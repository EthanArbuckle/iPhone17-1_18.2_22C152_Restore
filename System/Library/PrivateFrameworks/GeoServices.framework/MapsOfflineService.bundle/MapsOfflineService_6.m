void sub_2D4D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::out_of_range a19)
{
  std::out_of_range::~out_of_range(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_2D4D50(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = a1 + 920;
  sub_2D6A20(a1 + 920, a2, v22);
  if (!v22[0]) {
    return 0;
  }
  sub_2D6A20(v4, a2, v22);
  if (!v22[0])
  {
    std::logic_error::logic_error(&v24, "phmap at(): lookup non-existent key");
    sub_2D9094(&v24);
  }
  v5 = *(unsigned int **)(v23 + 8);
  v6 = *(unsigned int **)(v23 + 16);
  if (v5 == v6) {
    return 0;
  }
  v18 = *(unsigned int **)(v23 + 16);
  v19 = a2;
  v17 = a2 + 1;
  while (2)
  {
    uint64_t v7 = *v5;
    uint64_t v20 = 32 * v7;
    uint64_t v21 = **(void **)(a1 + 72);
    if ((*(unsigned char *)(v21 + 32 * v7) & 0xFB) != 0) {
      goto LABEL_5;
    }
    uint64_t v8 = v21 + 32 * v7;
    uint64_t v10 = *(void *)(v8 + 8);
    v9 = (uint64_t **)(v8 + 8);
    v11 = (uint64_t *)(v10 + 8 * v5[1]);
    v12 = v17;
    if ((~*v17 & 0x1FFF000) != 0)
    {
      int v13 = 0;
      v14 = v19;
      do
      {
        if (v11 == *v9) {
          break;
        }
        v13 |= 1 << sub_2DD178(a1, *v14);
        if (__PAIR64__(*((unsigned __int16 *)v14 + 2), *(_DWORD *)v14) == __PAIR64__((unsigned __int16)WORD2(*v11), *v11)&& ((*v11 & 0x1000000000000) == 0) == (*((unsigned char *)v14 + 6) == 0))
        {
          --v11;
        }
        else if (!sub_2DD4C0((uint64_t *)a1, *v14))
        {
          break;
        }
        v14 = (unint64_t *)(*(void *)(a1 + 16) + 12 * ((*v12 >> 12) & 0x1FFF));
        v12 = v14 + 1;
      }
      while ((~*((_DWORD *)v14 + 2) & 0x1FFF000) != 0);
    }
    else
    {
      int v13 = 0;
      v14 = v19;
    }
    v6 = v18;
    if (v11 != *v9) {
      goto LABEL_5;
    }
    while (1)
    {
      uint64_t v15 = *v11;
      if (__PAIR64__(*((unsigned __int16 *)v14 + 2), *(_DWORD *)v14) == __PAIR64__((unsigned __int16)WORD2(*v11), *v11)) {
        break;
      }
      if ((~*((_DWORD *)v14 + 2) & 0x1FFF000) == 0) {
        goto LABEL_5;
      }
LABEL_12:
      v13 |= 1 << sub_2DD178(a1, *v14);
      v14 = (unint64_t *)(*(void *)(a1 + 16) + 12 * ((*((_DWORD *)v14 + 2) >> 12) & 0x1FFF));
    }
    if (((v15 & 0x1000000000000) == 0) != (*((unsigned char *)v14 + 6) == 0) && (~*((_DWORD *)v14 + 2) & 0x1FFF000) != 0) {
      goto LABEL_12;
    }
    if (((v15 & 0x1000000000000) == 0) != (*((unsigned char *)v14 + 6) == 0) || (v13 & 4) != 0)
    {
LABEL_5:
      v5 += 2;
      if (v5 == v6) {
        return 0;
      }
      continue;
    }
    break;
  }
  if (v9[1] - *v9 - 1 == v5[1]) {
    return 2 * (*(unsigned char *)(v21 + v20) == 0);
  }
  else {
    return 1;
  }
}

void sub_2D5014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::out_of_range a21)
{
}

void sub_2D5028(uint64_t a1)
{
  int v15 = 0;
  __p[1] = 0;
  uint64_t v17 = 0;
  __p[0] = 0;
  uint64_t v2 = *(void *)(a1 + 16) + 12 * *(void *)(a1 + 40);
  int v4 = *(_DWORD *)(v2 - 4);
  v3 = (_DWORD *)(v2 - 4);
  uint64_t v5 = (uint64_t)(v3 - 2);
  if ((~v4 & 0x1FFF000) != 0)
  {
    do
    {
      sub_2D5B74((char **)__p, (void *)v5);
      uint64_t v5 = *(void *)(a1 + 16) + 12 * ((*v3 >> 12) & 0x1FFF);
      v3 = (_DWORD *)(v5 + 8);
    }
    while ((~*(_DWORD *)(v5 + 8) & 0x1FFF000) != 0);
  }
  sub_2D5B74((char **)__p, (void *)v5);
  v6 = (char *)__p[1] - 8;
  if (__p[0] != __p[1] && v6 > __p[0])
  {
    uint64_t v8 = (char *)__p[0] + 8;
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      int v10 = *(_DWORD *)v6;
      *(_DWORD *)(v8 - 5) = *(_DWORD *)(v6 + 3);
      *((_DWORD *)v8 - 2) = v10;
      *(_DWORD *)v6 = v9;
      v6[6] = BYTE6(v9);
      *((_WORD *)v6 + 2) = WORD2(v9);
      v6 -= 8;
      BOOL v11 = v8 >= v6;
      v8 += 8;
    }
    while (!v11);
  }
  int v12 = sub_2D4A4C(a1, (uint64_t)&v15);
  int v15 = v12;
  if ((v12 & 1) == 0)
  {
    unint64_t v13 = *(void *)(a1 + 2464);
    if (v13 >= *(void *)(a1 + 2472))
    {
      v14 = sub_38CE8((void **)(a1 + 2456), (uint64_t)&v15);
    }
    else
    {
      *(_DWORD *)unint64_t v13 = v12;
      *(void *)(v13 + 16) = 0;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 8) = 0;
      *(_OWORD *)(v13 + 8) = *(_OWORD *)__p;
      *(void *)(v13 + 24) = v17;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v17 = 0;
      v14 = (char *)(v13 + 32);
    }
    *(void *)(a1 + 2464) = v14;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2D5190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2D51B4(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)a1;
  uint64_t v3 = *a1;
  uint64_t v4 = a2 & 0xFF000000000000;
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
  v6 = (unsigned int *)sub_2D5EC4(*a1, a2 & 0xFFFFFFFFFFFFLL, (a2 & 0xFF000000000000) == 0);
  sub_2D5904(v3, v6, 0, (char **)(v2 + 48));
  uint64_t v8 = *(char **)(v2 + 48);
  uint64_t v7 = *(char **)(v2 + 56);
  uint64_t v9 = v8;
  if (v8 != v7)
  {
    while ((*(void *)v9 & 0xFFFFFFFFFFFFLL) != v5)
    {
      v9 += 8;
      if (v9 == v7)
      {
        uint64_t v9 = *(char **)(v2 + 56);
        break;
      }
    }
  }
  unint64_t v10 = v7 - v8;
  if ((v10 & 0x7F8) != 0)
  {
    uint64_t v11 = 0;
    unint64_t v101 = v9 - v8;
    unint64_t v12 = 0x2127599BF4325C37
        * (((a2 >> 16) & 0xFFFF0000 | (a2 << 32) | (v4 == 0)) ^ (((a2 >> 16) & 0xFFFF0000 | (a2 << 32)) >> 23));
    unint64_t v13 = (v12 ^ ~(v12 >> 47)) + ((v12 ^ (v12 >> 47)) << 21);
    unint64_t v14 = 21 * ((265 * (v13 ^ (v13 >> 24))) ^ ((265 * (v13 ^ (v13 >> 24))) >> 14));
    unint64_t v15 = 2147483649u * (v14 ^ (v14 >> 28));
    v16 = (uint64_t *)(v2
                    + 1688
                    + 48
                    * (((((unsigned __int16)(v14 ^ (v14 >> 28)) >> 8) ^ ((-2147483647
                                                                                         * (v14 ^ (v14 >> 28))) >> 16)) ^ ((-2147483647 * (v14 ^ (v14 >> 28))) >> 24)) & 0xF));
    uint64_t v102 = v2 + 1688;
    unint64_t v103 = v15 >> 7;
    unint64_t v97 = v15;
    uint64_t v104 = 0x101010101010101 * (v15 & 0x7F);
    uint64_t v98 = v2;
    uint64_t v17 = (v10 >> 3);
    uint64_t v99 = v17;
    v100 = v16;
    while (1)
    {
      unint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v11);
      if (sub_2DD178(v2, v19) == 5) {
        goto LABEL_9;
      }
      for (uint64_t i = *(void *)(v2 + 2456); i != *(void *)(v2 + 2464); i += 32)
      {
        uint64_t v21 = *(void *)(i + 8);
        if (*(void *)(i + 16) - v21 == 16
          && __PAIR64__(*(unsigned __int16 *)(v21 + 12), *(_DWORD *)(v21 + 8)) == __PAIR64__(WORD2(v19), v19)
          && (HIWORD(v19) & 1) != (*(unsigned char *)(v21 + 14) == 0)
          && (*(unsigned char *)i & 0x14) == 0)
        {
          goto LABEL_9;
        }
      }
      uint64_t v22 = 0;
      uint64_t v23 = v16[3];
      for (unint64_t j = v103; ; unint64_t j = v22 + v25)
      {
        uint64_t v25 = j & v23;
        uint64_t v26 = *(void *)(*v16 + v25);
        unint64_t v27 = ((v26 ^ v104) - 0x101010101010101) & ~(v26 ^ v104) & 0x8080808080808080;
        if (v27) {
          break;
        }
LABEL_25:
        if ((v26 & (~v26 << 6) & 0x8080808080808080) != 0)
        {
          unint64_t v29 = sub_2D8940(v16, v97);
          uint64_t v31 = v16[1] + 104 * v29;
          *(void *)uint64_t v31 = a2;
          *(_OWORD *)(v31 + 88) = 0u;
          *(_OWORD *)(v31 + 72) = 0u;
          *(_OWORD *)(v31 + 56) = 0u;
          *(_OWORD *)(v31 + 40) = 0u;
          *(_OWORD *)(v31 + 24) = 0u;
          *(_OWORD *)(v31 + 8) = 0u;
          uint64_t v28 = v16[1];
          goto LABEL_28;
        }
        v22 += 8;
      }
      uint64_t v28 = v16[1];
      while (1)
      {
        unint64_t v29 = (v25 + (__clz(__rbit64(v27)) >> 3)) & v23;
        unint64_t v30 = v28 + 104 * v29;
        if (__PAIR64__(*(unsigned __int16 *)(v30 + 4), *(_DWORD *)v30) == __PAIR64__(WORD2(a2), a2)
          && (HIWORD(a2) & 1) != (*(unsigned char *)(v30 + 6) == 0))
        {
          break;
        }
        v27 &= v27 - 1;
        if (!v27) {
          goto LABEL_25;
        }
      }
LABEL_28:
      unint64_t v32 = v28 + 104 * v29;
      unint64_t v33 = v32 + 8;
      v35 = *(char **)(v32 + 16);
      unint64_t v34 = *(void *)(v32 + 24);
      if ((unint64_t)v35 >= v34) {
        break;
      }
      *(_WORD *)v35 = -1;
      v35[2] = v11;
      v36 = v35 + 4;
      v35[3] = 1;
LABEL_48:
      uint64_t v57 = 0;
      *(void *)(v33 + 8) = v36;
      unint64_t v58 = (v19 >> 16) & 0xFFFF0000 | (v19 << 32);
      BOOL v59 = (v19 & 0xFF000000000000) == 0;
      unint64_t v60 = ((0x2127599BF4325C37 * ((v58 | v59) ^ (v58 >> 23))) ^ ~((0x2127599BF4325C37 * ((v58 | v59) ^ (v58 >> 23))) >> 47))
          + (((0x2127599BF4325C37 * ((v58 | v59) ^ (v58 >> 23))) ^ ((0x2127599BF4325C37 * ((v58 | v59) ^ (v58 >> 23))) >> 47)) << 21);
      unint64_t v61 = 21 * ((265 * (v60 ^ (v60 >> 24))) ^ ((265 * (v60 ^ (v60 >> 24))) >> 14));
      unint64_t v62 = 2147483649u * (v61 ^ (v61 >> 28));
      v63 = (uint64_t *)(v102
                      + 48
                      * (((((unsigned __int16)(v61 ^ (v61 >> 28)) >> 8) ^ ((-2147483647
                                                                                           * (v61 ^ (v61 >> 28))) >> 16)) ^ ((-2147483647 * (v61 ^ (v61 >> 28))) >> 24)) & 0xF));
      unint64_t v64 = v62 >> 7;
      uint64_t v65 = v63[3];
      while (1)
      {
        unint64_t v66 = v64 & v65;
        uint64_t v67 = *(void *)(*v63 + v66);
        unint64_t v68 = ((v67 ^ (0x101010101010101 * (v62 & 0x7F))) - 0x101010101010101) & ~(v67 ^ (0x101010101010101
                                                                                            * (v62 & 0x7F))) & 0x8080808080808080;
        if (v68) {
          break;
        }
LABEL_54:
        if ((v67 & (~v67 << 6) & 0x8080808080808080) != 0)
        {
          unint64_t v70 = sub_2D8940(v63, v62);
          uint64_t v72 = v63[1] + 104 * v70;
          *(void *)uint64_t v72 = v19;
          *(_OWORD *)(v72 + 88) = 0u;
          *(_OWORD *)(v72 + 72) = 0u;
          *(_OWORD *)(v72 + 56) = 0u;
          *(_OWORD *)(v72 + 40) = 0u;
          *(_OWORD *)(v72 + 24) = 0u;
          *(_OWORD *)(v72 + 8) = 0u;
          uint64_t v69 = v63[1];
          goto LABEL_57;
        }
        v57 += 8;
        unint64_t v64 = v57 + v66;
      }
      uint64_t v69 = v63[1];
      while (1)
      {
        unint64_t v70 = (v66 + (__clz(__rbit64(v68)) >> 3)) & v65;
        unint64_t v71 = v69 + 104 * v70;
        if (__PAIR64__(*(unsigned __int16 *)(v71 + 4), *(_DWORD *)v71) == __PAIR64__(WORD2(v19), v19)
          && (HIWORD(v19) & 1) != (*(unsigned char *)(v71 + 6) == 0))
        {
          break;
        }
        v68 &= v68 - 1;
        if (!v68) {
          goto LABEL_54;
        }
      }
LABEL_57:
      unint64_t v73 = v69 + 104 * v70;
      unint64_t v76 = *(void *)(v73 + 48);
      v75 = (void *)(v73 + 48);
      unint64_t v74 = v76;
      v77 = (char **)(v75 - 1);
      v78 = (unsigned char *)*(v75 - 1);
      if ((unint64_t)v78 >= v76)
      {
        v79 = (unsigned char *)*(v75 - 2);
        uint64_t v80 = (v78 - v79) >> 2;
        unint64_t v81 = v80 + 1;
        if ((unint64_t)(v80 + 1) >> 62) {
LABEL_77:
        }
          sub_2E00();
        uint64_t v82 = v74 - (void)v79;
        if (v82 >> 1 > v81) {
          unint64_t v81 = v82 >> 1;
        }
        BOOL v42 = (unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v42) {
          unint64_t v83 = v81;
        }
        if (v83 >> 62) {
LABEL_78:
        }
          sub_188D718();
        uint64_t v84 = 4 * v83;
        v85 = operator new(4 * v83);
        v86 = &v85[4 * v80];
        *(_WORD *)v86 = -1;
        v86[2] = v101 >> 3;
        v86[3] = 1;
        if (v78 == v79)
        {
          v88 = &v85[4 * v80];
        }
        else
        {
          unint64_t v87 = v78 - 4 - v79;
          if (v87 < 0x2C)
          {
            v88 = &v85[4 * v80];
            goto LABEL_72;
          }
          v88 = &v85[4 * v80];
          if ((unint64_t)(v79 - v85) < 0x20) {
            goto LABEL_81;
          }
          uint64_t v89 = (v87 >> 2) + 1;
          uint64_t v90 = 4 * (v89 & 0x7FFFFFFFFFFFFFF8);
          v91 = &v78[-v90];
          v88 = &v86[-v90];
          v92 = &v85[4 * v80 - 16];
          v93 = (long long *)(v78 - 16);
          uint64_t v94 = v89 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v95 = *v93;
            *(v92 - 1) = *(v93 - 1);
            _OWORD *v92 = v95;
            v92 -= 2;
            v93 -= 2;
            v94 -= 8;
          }
          while (v94);
          v78 = v91;
          if (v89 != (v89 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_81:
            do
            {
LABEL_72:
              int v96 = *((_DWORD *)v78 - 1);
              v78 -= 4;
              *((_DWORD *)v88 - 1) = v96;
              v88 -= 4;
            }
            while (v78 != v79);
          }
        }
        *(v75 - 2) = v88;
        v18 = v86 + 4;
        *v77 = v86 + 4;
        void *v75 = &v85[v84];
        if (v79) {
          operator delete(v79);
        }
        uint64_t v2 = v98;
        goto LABEL_8;
      }
      *(_WORD *)v78 = -1;
      v78[2] = v101 >> 3;
      v78[3] = 1;
      v18 = v78 + 4;
LABEL_8:
      uint64_t v17 = v99;
      v16 = v100;
      *v77 = v18;
LABEL_9:
      if (++v11 == v17) {
        return;
      }
    }
    v37 = *(char **)v33;
    uint64_t v38 = (uint64_t)&v35[-*(void *)v33];
    uint64_t v39 = v38 >> 2;
    unint64_t v40 = (v38 >> 2) + 1;
    if (v40 >> 62) {
      goto LABEL_77;
    }
    uint64_t v41 = v34 - (void)v37;
    if (v41 >> 1 > v40) {
      unint64_t v40 = v41 >> 1;
    }
    BOOL v42 = (unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v42) {
      unint64_t v43 = v40;
    }
    if (v43 >> 62) {
      goto LABEL_78;
    }
    uint64_t v44 = 4 * v43;
    v45 = (char *)operator new(4 * v43);
    v46 = &v45[4 * v39];
    *(_WORD *)v46 = -1;
    v46[2] = v11;
    v46[3] = 1;
    if (v35 == v37)
    {
      v48 = &v45[4 * v39];
    }
    else
    {
      unint64_t v47 = v35 - 4 - v37;
      if (v47 >= 0x2C)
      {
        v48 = &v45[4 * v39];
        if ((unint64_t)(&v35[-v38] - v45) >= 0x20)
        {
          uint64_t v49 = (v47 >> 2) + 1;
          uint64_t v50 = 4 * (v49 & 0x7FFFFFFFFFFFFFF8);
          v51 = &v35[-v50];
          v48 = &v46[-v50];
          v52 = &v45[4 * v39 - 16];
          v53 = v35 - 16;
          uint64_t v54 = v49 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v55 = *(_OWORD *)v53;
            *((_OWORD *)v52 - 1) = *((_OWORD *)v53 - 1);
            *(_OWORD *)v52 = v55;
            v52 -= 32;
            v53 -= 32;
            v54 -= 8;
          }
          while (v54);
          v35 = v51;
          if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_45;
          }
        }
      }
      else
      {
        v48 = &v45[4 * v39];
      }
      do
      {
        int v56 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *((_DWORD *)v48 - 1) = v56;
        v48 -= 4;
      }
      while (v35 != v37);
    }
LABEL_45:
    v36 = v46 + 4;
    *(void *)unint64_t v33 = v48;
    *(void *)(v33 + 8) = v46 + 4;
    *(void *)(v33 + 16) = &v45[v44];
    if (v37) {
      operator delete(v37);
    }
    uint64_t v2 = v98;
    goto LABEL_48;
  }
}

BOOL sub_2D5904(uint64_t a1, unsigned int *a2, int a3, char **a4)
{
  v46 = a2;
  a4[1] = *a4;
  uint64_t v8 = a2;
  uint64_t v9 = 1;
  unint64_t v10 = sub_290DEC(a1 + 3896, a2, 1);
  if (v10)
  {
    uint64_t v11 = &v10[-*(int *)v10];
    if (*(unsigned __int16 *)v11 >= 7u)
    {
      uint64_t v12 = *((unsigned __int16 *)v11 + 3);
      if (v12)
      {
        unint64_t v13 = &v10[v12];
        unint64_t v14 = &v13[((unint64_t)a2 >> 30) & 0x3FFFFFFFCLL];
        unint64_t v15 = &v14[*(unsigned int *)v13 + 4 + *(unsigned int *)&v14[*(unsigned int *)v13 + 4]];
        v16 = &v15[-*(int *)v15];
        if (*(unsigned __int16 *)v16 >= 5u && (uint64_t v17 = *((unsigned __int16 *)v16 + 2)) != 0) {
          v18 = &v15[v17 + *(unsigned int *)&v15[v17]];
        }
        else {
          v18 = 0;
        }
        unint64_t v19 = &v14[*(unsigned int *)v13 + 4 + *(unsigned int *)&v14[*(unsigned int *)v13 + 4]];
        uint64_t v20 = &v19[-*(int *)v19];
        if (*(unsigned __int16 *)v20 >= 0xDu && (uint64_t v21 = *((unsigned __int16 *)v20 + 6)) != 0)
        {
          v18 = &v19[v21 + *(unsigned int *)&v19[v21]];
          if (*(unsigned char *)(a1 + 7774))
          {
            char v45 = a3;
            v43[0] = (unsigned int *)a1;
            v43[1] = (unsigned int *)&v46;
            uint64_t v44 = (char *)a2;
            uint64_t v22 = *(unsigned int *)v18;
            v48 = (unsigned __int16 *)(v18 + 4);
            unint64_t v47 = &v18[2 * v22 + 4];
            sub_2D6548(&v48, (unsigned __int16 **)&v47, a4, (unsigned int *)&v44, (uint64_t *)v43);
            return *(unsigned int *)v18 == (a4[1] - *a4) >> 3;
          }
          unsigned int v37 = *(_DWORD *)v18;
          v36 = (unsigned __int16 *)(v18 + 4);
          uint64_t v35 = v37;
          if (v37)
          {
            uint64_t v38 = 2 * v35;
            uint64_t v39 = a4[1];
            do
            {
              unsigned int v40 = *v36++;
              unint64_t v41 = (unint64_t)v40 >> 1;
              if (((v40 & 1) == 0) != a3) {
                uint64_t v42 = 0;
              }
              else {
                uint64_t v42 = 0x1000000000000;
              }
              v43[0] = (unsigned int *)(v42 & 0xFFFF8000FFFFFFFFLL | ((v41 & 0x7FFF) << 32) | v8);
              uint64_t v39 = sub_2D6254((unint64_t *)a4, v39, (int *)v43) + 8;
              v38 -= 2;
            }
            while (v38);
          }
        }
        else if (v18)
        {
          if (*(unsigned char *)(a1 + 7774))
          {
            LOBYTE(v47) = a3;
            v48 = (unsigned __int16 *)a1;
            uint64_t v23 = *(unsigned int *)v18;
            v43[0] = (unsigned int *)(v18 + 4);
            uint64_t v44 = &v18[8 * v23 + 4];
            sub_2D67B4(v43, (unsigned int **)&v44, a4, &v47, (uint64_t *)&v48);
            return *(unsigned int *)v18 == (a4[1] - *a4) >> 3;
          }
          unsigned int v27 = *(_DWORD *)v18;
          uint64_t v26 = (uint64_t *)(v18 + 4);
          uint64_t v25 = v27;
          if (v27)
          {
            uint64_t v28 = 8 * v25;
            unint64_t v29 = a4[1];
            do
            {
              uint64_t v31 = *v26++;
              uint64_t v30 = v31;
              BOOL v32 = (v31 & 0xFF000000000000) == 0;
              BOOL v33 = (v31 & 0xFF000000000000) != 0;
              if (a3) {
                BOOL v32 = v33;
              }
              if (v32) {
                uint64_t v34 = 0x1000000000000;
              }
              else {
                uint64_t v34 = 0;
              }
              v43[0] = (unsigned int *)(v34 & 0xFFFF000000000000 | v30 & 0xFFFFFFFFFFFFLL);
              unint64_t v29 = sub_2D6254((unint64_t *)a4, v29, (int *)v43) + 8;
              v28 -= 8;
            }
            while (v28);
          }
        }
      }
    }
  }
  return v9;
}

char *sub_2D5B74(char **a1, void *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = (v5 - *a1) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_188D718();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    unint64_t v13 = &v12[8 * v8];
    *(void *)unint64_t v13 = *a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        int v14 = *((_DWORD *)v5 - 2);
        v5 -= 8;
        int v15 = *(_DWORD *)(v5 + 3);
        *((_DWORD *)v13 - 2) = v14;
        v13 -= 8;
        *(_DWORD *)(v13 + 3) = v15;
      }
      while (v5 != v7);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v5 = *a2;
    v6 = v5 + 8;
  }
  a1[1] = v6;
  return v6 - 8;
}

void sub_2D5C78(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    unint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if ((*(char *)(*(void *)a1 + v3) & 0x80000000) == 0)
      {
        uint64_t v5 = *v4;
        v6 = (void *)(*v4 + v2);
        uint64_t v7 = (void *)v6[10];
        if (v7)
        {
          v6[11] = v7;
          operator delete(v7);
        }
        uint64_t v8 = (void *)v6[7];
        if (v8)
        {
          *(void *)(v5 + v2 + 64) = v8;
          operator delete(v8);
        }
        unint64_t v9 = *(void **)(v5 + v2 + 32);
        if (v9)
        {
          *(void *)(v5 + v2 + 40) = v9;
          operator delete(v9);
        }
        uint64_t v10 = (void *)v6[1];
        if (v10)
        {
          *(void *)(v5 + v2 + 16) = v10;
          operator delete(v10);
        }
      }
      ++v3;
      v2 += 104;
    }
    while (v3 != *(void *)(a1 + 24));
    operator delete(*(void **)a1);
    *(void *)a1 = &unk_20E1710;
    *(void *)(a1 + 40) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *unint64_t v4 = 0;
  }
}

uint64_t sub_2D5D58(uint64_t a1, unint64_t a2)
{
  unint64_t v16 = a2;
  uint64_t v3 = sub_290DEC(a1 + 3896, a2, 1);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_296D50((unsigned int *)&v16, &v13);
    uint64_t v10 = std::string::insert(&v13, 0, "Road access could not find quad node for ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v10->__r_.__value_.__r.__words[2];
    long long v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v14);
  }
  unint64_t v4 = &v3[-*(int *)v3];
  if (*(unsigned __int16 *)v4 >= 5u && (uint64_t v5 = *((unsigned __int16 *)v4 + 2)) != 0)
  {
    v6 = &v3[v5 + *(unsigned int *)&v3[v5]];
    unint64_t v7 = a2;
  }
  else
  {
    v6 = 0;
    unint64_t v7 = a2;
  }
  return sub_295C4C(v6, v7);
}

void sub_2D5E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2D5EC4(uint64_t a1, unint64_t a2, int a3)
{
  LODWORD(v4) = a2;
  uint64_t v5 = (int *)sub_2D5D58(a1, a2);
  v6 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v7 = *v6;
  if ((a3 & 1) == 0)
  {
    if (v7 >= 5)
    {
      BOOL v27 = v7 >= 0x77 && v6[2] == 0;
      if (v27 && v6[59] && *(__int16 *)((char *)v5 + v6[59]) == -1)
      {
LABEL_28:
        sub_E1B4((uint64_t)v40);
        uint64_t v30 = sub_188FC78(v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/MapsOfflineServices/submodules/routing/data/api/data/facades/RoadNetworkFacade.h", 118);
        sub_188FC78(v30, (uint64_t)":", 1);
        uint64_t v31 = (void *)std::ostream::operator<<();
        BOOL v32 = sub_188FC78(v31, (uint64_t)":", 1);
        BOOL v33 = sub_188FC78(v32, (uint64_t)"road ", 5);
        uint64_t v34 = sub_2D620C(v33, v4);
        uint64_t v35 = sub_188FC78(v34, (uint64_t)", endpt ", 8);
        v36 = sub_2D61AC(v35, a3);
        sub_188FC78(v36, (uint64_t)" has no junction data", 21);
        exception = __cxa_allocate_exception(0x40uLL);
        std::stringbuf::str();
        uint64_t v38 = (void *)sub_2F404((uint64_t)exception, &v39);
      }
      unsigned __int16 v8 = v6[2];
      if (v8)
      {
LABEL_22:
        unint64_t v11 = __ROR8__(*(void *)((char *)v5 + v8), 32);
        unint64_t v4 = HIDWORD(v11);
        return v4 | (v11 << 32);
      }
      if (v7 >= 0x77)
      {
        uint64_t v28 = v6[59];
        if (v28)
        {
          unint64_t v11 = *(unsigned __int16 *)((char *)v5 + v28);
          return v4 | (v11 << 32);
        }
      }
    }
    unint64_t v11 = 0;
    return v4 | (v11 << 32);
  }
  if (v7 < 7) {
    goto LABEL_28;
  }
  unsigned __int16 v8 = v6[3];
  if (v8) {
    goto LABEL_22;
  }
  if (v7 < 0x79) {
    goto LABEL_28;
  }
  unsigned __int16 v9 = v6[60];
  if (!v9) {
    goto LABEL_28;
  }
  unint64_t v10 = *(unsigned int *)((char *)v5 + v9);
  unint64_t v11 = v10 >> 16;
  unsigned int v12 = sub_511FC(v4);
  unsigned int v13 = v12 >> 1;
  char v14 = v12 & 0xFE;
  unsigned int v15 = v4 & ~(-1 << (v12 & 0xFE));
  int v16 = sub_51938(v15);
  int v17 = sub_51938(v15 >> 1);
  int v18 = v16 + (char)v10;
  int v19 = v17 + ((__int16)v10 >> 8);
  unsigned int v20 = (int)((((((v18 & ~(v18 >> 31)) - v18 + (v18 >> 31)) >> v13) + (v18 >> 31)) << v13)
            + v18)
      % (1 << v13);
  unsigned int v21 = (int)((((((v19 & ~(v19 >> 31)) - v19 + (v19 >> 31)) >> v13) + (v19 >> 31)) << v13)
            + v19)
      % (1 << v13);
  int v22 = -1 << v13;
  unsigned int v23 = ~(-1 << v13);
  if (v23 < v20) {
    unsigned int v24 = ~v22;
  }
  else {
    unsigned int v24 = v20;
  }
  if (v23 < v21) {
    unsigned int v25 = ~v22;
  }
  else {
    unsigned int v25 = v21;
  }
  sub_518C8(v24, v25);
  LODWORD(v4) = v26 | (1 << v14);
  return v4 | (v11 << 32);
}

void sub_2D6158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_1C02990((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_1C02990((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *sub_2D61AC(void *a1, int a2)
{
  unint64_t v4 = sub_188FC78(a1, (uint64_t)"common::Endpoint::", 18);
  if (a2) {
    uint64_t v5 = "END";
  }
  else {
    uint64_t v5 = "START";
  }
  if (a2) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 5;
  }
  sub_188FC78(v4, (uint64_t)v5, v6);
  return a1;
}

void *sub_2D620C(void *a1, int a2)
{
  uint64_t v3 = sub_51960(a1, a2);
  sub_188FC78(v3, (uint64_t)".", 1);
  std::ostream::operator<<();
  return a1;
}

char *sub_2D6254(unint64_t *a1, void *a2, int *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  unsigned __int16 v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)unsigned __int16 v9 = *(void *)a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    uint64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    unsigned int v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      int v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unsigned int v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        int v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        int v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          unsigned int v13 = (uint64_t *)((char *)v13 + v21);
          int v19 = (void *)(v5 + v21);
          int v22 = (_OWORD *)(v5 + 16);
          unsigned int v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *int v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_45;
          }
        }
      }
      do
      {
        uint64_t v43 = *v13++;
        *v19++ = v43;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_45:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11 - 1);
    }
    int v44 = *a3;
    *(_DWORD *)(v9 + 3) = *(int *)((char *)a3 + 3);
    *(_DWORD *)unsigned __int16 v9 = v44;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    BOOL v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_35;
    }
    goto LABEL_24;
  }
  uint64_t v30 = 0;
  uint64_t v31 = (char *)(8 * v8);
  BOOL v32 = 0;
  if (!v8)
  {
LABEL_24:
    if (v7 < 1)
    {
      if ((void *)v6 == a2) {
        unint64_t v34 = 1;
      }
      else {
        unint64_t v34 = v7 >> 2;
      }
      if (v34 >> 61) {
        sub_188D718();
      }
      uint64_t v35 = (char *)operator new(8 * v34);
      uint64_t v31 = &v35[8 * (v34 >> 2)];
      BOOL v32 = &v35[8 * v34];
      if (v30)
      {
        operator delete(v30);
        unint64_t v6 = *a1;
      }
    }
    else
    {
      unint64_t v33 = v8 + 2;
      if (v8 >= -1) {
        unint64_t v33 = v8 + 1;
      }
      v31 -= 8 * (v33 >> 1);
    }
  }
LABEL_35:
  *(void *)uint64_t v31 = *(void *)a3;
  v36 = v31;
  if ((char *)v6 != v9)
  {
    unsigned int v37 = v9;
    v36 = v31;
    do
    {
      int v38 = *((_DWORD *)v37-- - 2);
      int v39 = *(_DWORD *)((char *)v37 + 3);
      *((_DWORD *)v36-- - 2) = v38;
      *(_DWORD *)((char *)v36 + 3) = v39;
    }
    while (v37 != (void *)v6);
  }
  unsigned int v40 = (char *)a1[1];
  int64_t v41 = v40 - v9;
  if (v40 != v9) {
    memmove(v31 + 8, v9, v41 - 1);
  }
  uint64_t v42 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v31[v41 + 8];
  a1[2] = (unint64_t)v32;
  if (v42) {
    operator delete(v42);
  }
  return v31;
}

void sub_2D6530(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char **sub_2D6548(unsigned __int16 **a1, unsigned __int16 **a2, char **a3, unsigned int *a4, uint64_t *a5)
{
  int v22 = a3;
  unint64_t v5 = *a1;
  if (*a1 != *a2)
  {
    while (1)
    {
      unint64_t v11 = *v5;
      uint64_t v13 = *a5;
      unint64_t v14 = v11 >> 1;
      if (!*(unsigned char *)(*a5 + 7774)) {
        break;
      }
      unsigned int v15 = (unsigned int *)a5[1];
      uint64_t v16 = *v15;
      unint64_t v17 = sub_290DEC(v13 + 3896, *v15, 1);
      if (v17)
      {
        unint64_t v18 = &v17[-*(int *)v17];
        if (*(unsigned __int16 *)v18 >= 5u)
        {
          uint64_t v19 = *((unsigned __int16 *)v18 + 2);
          if (v19)
          {
            if (*(_DWORD *)&v17[v19 + *(unsigned int *)&v17[v19]] > v14
              && sub_295DB4(v13, v16 & 0xFFFF8000FFFFFFFFLL | ((v14 & 0x7FFF) << 32)))
            {
              LOWORD(v11) = **a1;
              unint64_t v10 = ((unint64_t)(unsigned __int16)v11 << 31) & 0x7FFF00000000;
              goto LABEL_4;
            }
          }
        }
      }
LABEL_10:
      unint64_t v5 = *a1 + 1;
      *a1 = v5;
      if (v5 == *a2) {
        return v22;
      }
    }
    unint64_t v10 = v14 << 32;
LABEL_4:
    if (*((unsigned char *)a4 + 8)) {
      LOBYTE(v11) = (v11 & 1) == 0;
    }
    if (v11) {
      uint64_t v12 = 0x1000000000000;
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v21 = v12 | v10 | *a4;
    sub_2D66A4(&v22, &v21);
    goto LABEL_10;
  }
  return a3;
}

char ***sub_2D66A4(char ***a1, void *a2)
{
  unint64_t v4 = *a1;
  unint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *v4;
    uint64_t v9 = (v6 - *v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_188D718();
      }
      uint64_t v13 = (char *)operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v9];
    *(void *)unint64_t v14 = *a2;
    uint64_t v7 = v14 + 8;
    if (v6 != v8)
    {
      do
      {
        int v15 = *((_DWORD *)v6 - 2);
        v6 -= 8;
        int v16 = *(_DWORD *)(v6 + 3);
        *((_DWORD *)v14 - 2) = v15;
        v14 -= 8;
        *(_DWORD *)(v14 + 3) = v16;
      }
      while (v6 != v8);
      unint64_t v6 = *v4;
    }
    *unint64_t v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[8 * v12];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)unint64_t v6 = *a2;
    uint64_t v7 = v6 + 8;
  }
  v4[1] = v7;
  return a1;
}

char **sub_2D67B4(unsigned int **a1, unsigned int **a2, char **a3, unsigned char *a4, uint64_t *a5)
{
  unint64_t v21 = a3;
  unint64_t v5 = *a1;
  if (*a1 != *a2)
  {
    while (1)
    {
      uint64_t v13 = *a5;
      if (!*(unsigned char *)(*a5 + 7774)) {
        goto LABEL_3;
      }
      uint64_t v14 = *((unsigned __int16 *)v5 + 2);
      uint64_t v15 = *v5;
      int v16 = sub_290DEC(v13 + 3896, *v5, 1);
      if (v16)
      {
        unint64_t v17 = &v16[-*(int *)v16];
        if (*(unsigned __int16 *)v17 >= 5u)
        {
          uint64_t v18 = *((unsigned __int16 *)v17 + 2);
          if (v18)
          {
            if (*(_DWORD *)&v16[v18 + *(unsigned int *)&v16[v18]] > v14
              && sub_295DB4(v13, v15 | (v14 << 32)))
            {
              break;
            }
          }
        }
      }
LABEL_10:
      unint64_t v5 = *a1 + 2;
      *a1 = v5;
      if (v5 == *a2) {
        return v21;
      }
    }
    unint64_t v5 = *a1;
LABEL_3:
    uint64_t v10 = *(void *)v5;
    if (*a4) {
      BOOL v11 = (v10 & 0xFF000000000000) != 0;
    }
    else {
      BOOL v11 = (v10 & 0xFF000000000000) == 0;
    }
    if (v11) {
      uint64_t v12 = 0x1000000000000;
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v20 = v12 & 0xFFFF000000000000 | v10 & 0xFFFFFFFFFFFFLL;
    sub_2D66A4(&v21, &v20);
    goto LABEL_10;
  }
  return a3;
}

void sub_2D68F0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    unint64_t v2 = *(void *)(a1 + 24);
    if (v2 < 0x80)
    {
      if (v2)
      {
        uint64_t v3 = 0;
        uint64_t v4 = 56;
        do
        {
          if ((*(char *)(*(void *)a1 + v3) & 0x80000000) == 0)
          {
            uint64_t v5 = *(void *)(a1 + 8);
            uint64_t v6 = v5 + v4;
            uint64_t v7 = *(void **)(v5 + v4 + 24);
            if (v7)
            {
              *(void *)(v6 + 32) = v7;
              operator delete(v7);
            }
            uint64_t v8 = *(void **)(v5 + v4);
            if (v8)
            {
              *(void *)(v5 + v4 + 8) = v8;
              operator delete(v8);
            }
            uint64_t v9 = *(void **)(v5 + v4 - 24);
            if (v9)
            {
              *(void *)(v5 + v4 - 16) = v9;
              operator delete(v9);
            }
            uint64_t v10 = *(void **)(v6 - 48);
            if (v10)
            {
              *(void *)(v5 + v4 - 40) = v10;
              operator delete(v10);
            }
          }
          ++v3;
          v4 += 104;
        }
        while (v3 != *(void *)(a1 + 24));
        *(void *)(a1 + 16) = 0;
        memset(*(void **)a1, 128, v3 + 8);
        *(unsigned char *)(*(void *)a1 + v3) = -1;
        unint64_t v11 = *(void *)(a1 + 24);
        uint64_t v12 = v11 - (v11 >> 3);
        BOOL v13 = v11 == 7;
        uint64_t v14 = 6;
        if (!v13) {
          uint64_t v14 = v12;
        }
        *(void *)(a1 + 40) = v14 - *(void *)(a1 + 16);
      }
    }
    else
    {
      sub_2D5C78(a1);
    }
  }
}

uint64_t sub_2D6A20@<X0>(uint64_t result@<X0>, unint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = 0;
  unint64_t v4 = *a2;
  unint64_t v5 = (*a2 >> 16) & 0xFFFF0000 | (*a2 << 32);
  BOOL v6 = (*a2 & 0xFF000000000000) == 0;
  unint64_t v7 = ((0x2127599BF4325C37 * ((v5 | v6) ^ (v5 >> 23))) ^ ~((0x2127599BF4325C37 * ((v5 | v6) ^ (v5 >> 23))) >> 47))
     + (((0x2127599BF4325C37 * ((v5 | v6) ^ (v5 >> 23))) ^ ((0x2127599BF4325C37 * ((v5 | v6) ^ (v5 >> 23))) >> 47)) << 21);
  unint64_t v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
  unint64_t v9 = 2147483649u * (v8 ^ (v8 >> 28));
  uint64_t v10 = (void *)(result
                 + 48
                 * (((((unsigned __int16)(v8 ^ (v8 >> 28)) >> 8) ^ ((-2147483647
                                                                                    * (v8 ^ (v8 >> 28))) >> 16)) ^ ((-2147483647 * (v8 ^ (v8 >> 28))) >> 24)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = *v10;
  uint64_t v14 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v15 = v11 & v12;
    uint64_t v16 = *(void *)(v13 + v15);
    unint64_t v17 = ((v16 ^ v14) - 0x101010101010101) & ~(v16 ^ v14) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_8:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      a3[3] = v12;
      a3[4] = 0;
      return result;
    }
    v3 += 8;
    unint64_t v11 = v3 + v15;
  }
  while (1)
  {
    unint64_t v19 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v12;
    uint64_t v18 = v10[1];
    uint64_t v20 = v18 + 32 * v19;
    if (__PAIR64__(*(unsigned __int16 *)(v20 + 4), *(_DWORD *)v20) == __PAIR64__(WORD2(v4), v4)
      && (HIWORD(v4) & 1) != (*(unsigned char *)(v20 + 6) == 0))
    {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_8;
    }
  }
  BOOL v21 = v12 == v19;
  uint64_t v22 = v13 + v19;
  uint64_t v23 = v13 + v12;
  uint64_t v24 = result + 768;
  if (v12 == v19)
  {
    uint64_t v22 = 0;
    uint64_t v24 = 0;
    long long v25 = 0;
  }
  else
  {
    long long v25 = v10;
  }
  if (v12 == v19) {
    unint64_t v26 = a3;
  }
  else {
    unint64_t v26 = (void *)(v18 + 32 * v19);
  }
  if (v21) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = v23;
  }
  *a3 = v25;
  a3[1] = v24;
  a3[2] = v22;
  a3[3] = v26;
  a3[4] = v27;
  return result;
}

int *sub_2D6BA8(int *result, int *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  uint64_t v10 = v9;
  while (1)
  {
    unint64_t v9 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = a2 - v10;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          int v82 = *(a2 - 1);
          int v83 = *v10;
          if (BYTE2(v82) < BYTE2(*v10))
          {
            *uint64_t v10 = v82;
            *(a2 - 1) = v83;
          }
          return result;
        case 3:
          int v84 = *v10;
          int v85 = v10[1];
          unsigned int v86 = BYTE2(*v10);
          int v87 = *(a2 - 1);
          if (BYTE2(v85) >= v86)
          {
            if (BYTE2(v87) < BYTE2(v85))
            {
              v10[1] = v87;
              *(a2 - 1) = v85;
              int v134 = *v10;
              int v133 = v10[1];
              if (BYTE2(v133) < BYTE2(*v10))
              {
                *uint64_t v10 = v133;
                v10[1] = v134;
              }
            }
          }
          else
          {
            if (BYTE2(v87) >= BYTE2(v85))
            {
              *uint64_t v10 = v85;
              v10[1] = v84;
              int v137 = *(a2 - 1);
              if (v86 <= BYTE2(v137)) {
                return result;
              }
              v10[1] = v137;
            }
            else
            {
              *uint64_t v10 = v87;
            }
            *(a2 - 1) = v84;
          }
          return result;
        case 4:
          v88 = v10 + 1;
          int v89 = v10[1];
          uint64_t v90 = v10 + 2;
          int v91 = v10[2];
          int v92 = *v10;
          unsigned int v93 = BYTE2(*v10);
          unsigned int v94 = BYTE2(v91);
          if (BYTE2(v89) >= v93)
          {
            if (BYTE2(v91) >= BYTE2(v89))
            {
              int v89 = v10[2];
            }
            else
            {
              long long v95 = v10;
              int *v88 = v91;
              *uint64_t v90 = v89;
              int v96 = v10 + 1;
              BOOL v4 = BYTE2(v91) >= v93;
              unsigned int v93 = BYTE2(v89);
              unsigned int v94 = BYTE2(v89);
              if (!v4) {
                goto LABEL_183;
              }
            }
            int v138 = *(a2 - 1);
            if (v94 <= BYTE2(v138)) {
              return result;
            }
          }
          else
          {
            if (BYTE2(v91) < BYTE2(v89))
            {
              long long v95 = v10;
              int v96 = v10 + 2;
              int v89 = *v10;
              goto LABEL_183;
            }
            *uint64_t v10 = v89;
            v10[1] = v92;
            long long v95 = v10 + 1;
            int v96 = v10 + 2;
            int v89 = v92;
            if (BYTE2(v91) < v93)
            {
LABEL_183:
              *long long v95 = v91;
              *int v96 = v92;
              int v138 = *(a2 - 1);
              if (v93 <= BYTE2(v138)) {
                return result;
              }
              goto LABEL_187;
            }
            int v89 = v91;
            int v138 = *(a2 - 1);
            if (v94 <= BYTE2(v138)) {
              return result;
            }
          }
LABEL_187:
          *uint64_t v90 = v138;
          *(a2 - 1) = v89;
          int v139 = *v90;
          int v140 = *v88;
          if (BYTE2(v139) < BYTE2(*v88))
          {
            v10[1] = v139;
            v10[2] = v140;
            int v141 = *v10;
            if (BYTE2(v139) < BYTE2(*v10))
            {
              *uint64_t v10 = v139;
              v10[1] = v141;
            }
          }
          return result;
        case 5:
          return sub_2D7684(v10, v10 + 1, v10 + 2, v10 + 3, a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if (v11 <= 95) {
      break;
    }
    if (!a3)
    {
      if (v10 != a2)
      {
        int64_t v106 = (unint64_t)(v12 - 2) >> 1;
        int64_t v107 = v106;
        do
        {
          if (v106 >= v107)
          {
            uint64_t v109 = (2 * v107) | 1;
            v110 = &v10[v109];
            int v111 = *v110;
            if (2 * v107 + 2 < v12 && BYTE2(v111) < BYTE2(v110[1]))
            {
              int v111 = v110[1];
              ++v110;
              uint64_t v109 = 2 * v107 + 2;
            }
            result = &v10[v107];
            int v112 = *result;
            unsigned int v113 = BYTE2(*result);
            if (v113 <= BYTE2(v111))
            {
              while (1)
              {
                v114 = v110;
                *result = v111;
                if (v106 < v109) {
                  break;
                }
                uint64_t v115 = (2 * v109) | 1;
                v110 = &v10[v115];
                uint64_t v109 = 2 * v109 + 2;
                int v111 = *v110;
                if (v109 < v12)
                {
                  if (BYTE2(v111) >= BYTE2(v110[1]))
                  {
                    uint64_t v109 = v115;
                  }
                  else
                  {
                    int v111 = v110[1];
                    ++v110;
                  }
                  result = v114;
                  if (v113 > BYTE2(v111)) {
                    break;
                  }
                }
                else
                {
                  uint64_t v109 = v115;
                  result = v114;
                  if (v113 > BYTE2(v111)) {
                    break;
                  }
                }
              }
              int *v114 = v112;
            }
          }
          BOOL v108 = v107-- <= 0;
        }
        while (!v108);
        uint64_t v116 = (unint64_t)v11 >> 2;
        do
        {
          uint64_t v117 = 0;
          int v118 = *v10;
          int64_t v119 = (unint64_t)(v116 - 2) >> 1;
          v120 = v10;
          do
          {
            while (1)
            {
              v123 = &v120[v117];
              int v124 = v123[1];
              v122 = v123 + 1;
              int v121 = v124;
              uint64_t v125 = (2 * v117) | 1;
              uint64_t v117 = 2 * v117 + 2;
              if (v117 < v116) {
                break;
              }
              uint64_t v117 = v125;
              int *v120 = v121;
              v120 = v122;
              if (v125 > v119) {
                goto LABEL_160;
              }
            }
            result = (int *)BYTE2(v121);
            if (BYTE2(v121) >= BYTE2(v122[1]))
            {
              uint64_t v117 = v125;
            }
            else
            {
              int v121 = v122[1];
              ++v122;
            }
            int *v120 = v121;
            v120 = v122;
          }
          while (v117 <= v119);
LABEL_160:
          if (v122 == --a2)
          {
            int *v122 = v118;
          }
          else
          {
            int *v122 = *a2;
            *a2 = v118;
            uint64_t v126 = (char *)v122 - (char *)v10 + 4;
            if (v126 >= 5)
            {
              unint64_t v127 = (((unint64_t)v126 >> 2) - 2) >> 1;
              v128 = &v10[v127];
              int v129 = *v128;
              int v130 = *v122;
              unsigned int v131 = BYTE2(*v122);
              if (v131 > BYTE2(*v128))
              {
                do
                {
                  v132 = v128;
                  int *v122 = v129;
                  if (!v127) {
                    break;
                  }
                  unint64_t v127 = (v127 - 1) >> 1;
                  v128 = &v10[v127];
                  int v129 = *v128;
                  v122 = v132;
                }
                while (v131 > BYTE2(*v128));
                int *v132 = v130;
              }
            }
          }
          BOOL v108 = v116-- <= 2;
        }
        while (!v108);
      }
      return result;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = &v10[(unint64_t)v12 >> 1];
    int v15 = *(a2 - 1);
    if ((unint64_t)v11 < 0x201)
    {
      int v20 = *v10;
      int v21 = *v14;
      unsigned int v22 = BYTE2(*v10);
      unsigned int v23 = BYTE2(*v14);
      if (v22 < v23)
      {
        if (BYTE2(v15) < v22)
        {
          int *v14 = v15;
          goto LABEL_32;
        }
        int *v14 = v20;
        *uint64_t v10 = v21;
        int v36 = *(a2 - 1);
        if (v23 > BYTE2(v36))
        {
          *uint64_t v10 = v36;
LABEL_32:
          *(a2 - 1) = v21;
        }
LABEL_33:
        --a3;
        int v26 = *v10;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_34;
      }
      if (BYTE2(v15) >= v22) {
        goto LABEL_33;
      }
      *uint64_t v10 = v15;
      *(a2 - 1) = v20;
      int v25 = *v14;
      if (BYTE2(*v10) >= BYTE2(*v14)) {
        goto LABEL_33;
      }
      int *v14 = *v10;
      *uint64_t v10 = v25;
      --a3;
      int v26 = v25;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
      goto LABEL_34;
    }
    int v16 = *v14;
    int v17 = *v10;
    unsigned int v18 = BYTE2(*v14);
    unsigned int v19 = BYTE2(*v10);
    if (v18 >= v19)
    {
      if (BYTE2(v15) < v18)
      {
        int *v14 = v15;
        *(a2 - 1) = v16;
        int v24 = *v10;
        if (BYTE2(*v14) < BYTE2(*v10))
        {
          *uint64_t v10 = *v14;
          int *v14 = v24;
        }
      }
    }
    else
    {
      if (BYTE2(v15) >= v18)
      {
        *uint64_t v10 = v16;
        int *v14 = v17;
        int v27 = *(a2 - 1);
        if (v19 <= BYTE2(v27)) {
          goto LABEL_24;
        }
        int *v14 = v27;
      }
      else
      {
        *uint64_t v10 = v15;
      }
      *(a2 - 1) = v17;
    }
LABEL_24:
    uint64_t v28 = &v10[v13];
    int v31 = *(v28 - 1);
    unint64_t v29 = v28 - 1;
    int v30 = v31;
    int v32 = v10[1];
    unsigned int v33 = BYTE2(v31);
    int v34 = *(a2 - 2);
    if (BYTE2(v31) >= BYTE2(v32))
    {
      if (BYTE2(v34) < v33)
      {
        *unint64_t v29 = v34;
        *(a2 - 2) = v30;
        int v35 = v10[1];
        if (BYTE2(*v29) < BYTE2(v35))
        {
          v10[1] = *v29;
          *unint64_t v29 = v35;
        }
      }
    }
    else
    {
      if (BYTE2(v34) >= v33)
      {
        v10[1] = v30;
        *unint64_t v29 = v32;
        int v38 = *(a2 - 2);
        if (BYTE2(v32) <= BYTE2(v38)) {
          goto LABEL_38;
        }
        *unint64_t v29 = v38;
      }
      else
      {
        v10[1] = v34;
      }
      *(a2 - 2) = v32;
    }
LABEL_38:
    int v39 = &v10[v13];
    int v42 = v39[1];
    unsigned int v40 = v39 + 1;
    int v41 = v42;
    int v43 = v10[2];
    unsigned int v44 = BYTE2(v42);
    int v45 = *(a2 - 3);
    if (BYTE2(v42) >= BYTE2(v43))
    {
      if (BYTE2(v45) < v44)
      {
        *unsigned int v40 = v45;
        *(a2 - 3) = v41;
        int v46 = v10[2];
        if (BYTE2(*v40) < BYTE2(v46))
        {
          v10[2] = *v40;
          *unsigned int v40 = v46;
        }
      }
      goto LABEL_47;
    }
    if (BYTE2(v45) < v44)
    {
      v10[2] = v45;
LABEL_46:
      *(a2 - 3) = v43;
      goto LABEL_47;
    }
    v10[2] = v41;
    *unsigned int v40 = v43;
    int v47 = *(a2 - 3);
    if (BYTE2(v43) > BYTE2(v47))
    {
      *unsigned int v40 = v47;
      goto LABEL_46;
    }
LABEL_47:
    int v48 = *v14;
    int v49 = *v29;
    unsigned int v50 = BYTE2(*v14);
    int v51 = *v40;
    if (v50 >= BYTE2(*v29))
    {
      if (BYTE2(v51) >= v50) {
        goto LABEL_55;
      }
      int *v14 = v51;
      *unsigned int v40 = v48;
      unsigned int v40 = v14;
      int v48 = v49;
      if (BYTE2(v51) < BYTE2(v49))
      {
LABEL_54:
        *unint64_t v29 = v51;
        *unsigned int v40 = v49;
LABEL_55:
        int v53 = *v10;
        *uint64_t v10 = v48;
        int *v14 = v53;
        --a3;
        int v26 = *v10;
        if ((a4 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_34;
      }
      int v69 = *v10;
      *uint64_t v10 = v51;
      int *v14 = v69;
      --a3;
      int v26 = *v10;
      if (a4) {
        goto LABEL_34;
      }
LABEL_56:
      unsigned int v37 = BYTE2(v26);
      if (*((unsigned __int8 *)v10 - 2) < BYTE2(v26)) {
        goto LABEL_57;
      }
      if (BYTE2(v26) < *((unsigned __int8 *)a2 - 2))
      {
        unint64_t v70 = v10;
        do
        {
          uint64_t v10 = v70 + 1;
          unsigned int v71 = *((unsigned __int8 *)v70++ + 6);
        }
        while (BYTE2(v26) >= v71);
      }
      else
      {
        uint64_t v72 = v10 + 1;
        do
        {
          uint64_t v10 = v72;
          if (v72 >= a2) {
            break;
          }
          unsigned int v73 = *((unsigned __int8 *)v72++ + 2);
        }
        while (BYTE2(v26) >= v73);
      }
      unint64_t v74 = a2;
      if (v10 < a2)
      {
        v75 = a2;
        do
        {
          unint64_t v74 = v75 - 1;
          unsigned int v76 = *((unsigned __int8 *)v75-- - 2);
        }
        while (BYTE2(v26) < v76);
      }
      if (v10 < v74)
      {
        int v77 = *v10;
        int v78 = *v74;
        do
        {
          *uint64_t v10 = v78;
          *unint64_t v74 = v77;
          do
          {
            int v79 = v10[1];
            ++v10;
            int v77 = v79;
          }
          while (BYTE2(v26) >= BYTE2(v79));
          do
          {
            int v80 = *--v74;
            int v78 = v80;
          }
          while (BYTE2(v26) < BYTE2(v80));
        }
        while (v10 < v74);
      }
      unint64_t v81 = v10 - 1;
      BOOL v4 = v10 - 1 >= v9;
      BOOL v5 = v10 - 1 == v9;
      if (v10 - 1 != v9) {
        *unint64_t v9 = *v81;
      }
      a4 = 0;
      *unint64_t v81 = v26;
    }
    else
    {
      if (BYTE2(v51) < v50) {
        goto LABEL_54;
      }
      *unint64_t v29 = v48;
      int *v14 = v49;
      unint64_t v29 = v14;
      int v48 = v51;
      if (BYTE2(v51) < BYTE2(v49)) {
        goto LABEL_54;
      }
      int v52 = *v10;
      *uint64_t v10 = v49;
      int *v14 = v52;
      --a3;
      int v26 = *v10;
      if ((a4 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_34:
      unsigned int v37 = BYTE2(v26);
LABEL_57:
      uint64_t v54 = 0;
      do
        int v55 = v10[++v54];
      while (v37 > BYTE2(v55));
      int v56 = &v10[v54];
      uint64_t v57 = a2;
      if (v54 == 1)
      {
        unint64_t v60 = a2;
        while (v56 < v60)
        {
          unint64_t v58 = v60 - 1;
          unsigned int v61 = *((unsigned __int8 *)v60-- - 2);
          if (v37 > v61) {
            goto LABEL_65;
          }
        }
        unint64_t v58 = v60;
LABEL_74:
        uint64_t v67 = v56 - 1;
        if (v56 - 1 == v10) {
          goto LABEL_76;
        }
LABEL_75:
        *uint64_t v10 = *v67;
        goto LABEL_76;
      }
      do
      {
        unint64_t v58 = v57 - 1;
        unsigned int v59 = *((unsigned __int8 *)v57-- - 2);
      }
      while (v37 <= v59);
LABEL_65:
      if (v56 >= v58) {
        goto LABEL_74;
      }
      int v62 = *v58;
      v63 = v56;
      unint64_t v64 = v58;
      do
      {
        int *v63 = v62;
        *unint64_t v64 = v55;
        do
        {
          int v65 = v63[1];
          ++v63;
          int v55 = v65;
        }
        while (v37 > BYTE2(v65));
        do
        {
          int v66 = *--v64;
          int v62 = v66;
        }
        while (v37 <= BYTE2(v66));
      }
      while (v63 < v64);
      uint64_t v67 = v63 - 1;
      if (v63 - 1 != v10) {
        goto LABEL_75;
      }
LABEL_76:
      *uint64_t v67 = v26;
      if (v56 < v58) {
        goto LABEL_79;
      }
      BOOL v68 = sub_2D7838(v10, v67);
      uint64_t v10 = v67 + 1;
      result = (int *)sub_2D7838(v67 + 1, a2);
      if (result)
      {
        a2 = v67;
        if (v68) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v68)
      {
LABEL_79:
        result = (int *)sub_2D6BA8(v9, v67, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v67 + 1;
      }
    }
  }
  unint64_t v97 = v10 + 1;
  BOOL v99 = v10 == a2 || v97 == a2;
  if (a4)
  {
    if (!v99)
    {
      uint64_t v100 = 0;
      unint64_t v101 = v10;
      do
      {
        int v104 = *v101;
        int v103 = v101[1];
        unint64_t v101 = v97;
        if (BYTE2(v103) < BYTE2(v104))
        {
          uint64_t v105 = v100;
          do
          {
            *(int *)((char *)v10 + v105 + 4) = v104;
            if (!v105)
            {
              uint64_t v102 = v10;
              goto LABEL_125;
            }
            int v104 = *(int *)((char *)v10 + v105 - 4);
            v105 -= 4;
          }
          while (BYTE2(v103) < BYTE2(v104));
          uint64_t v102 = (int *)((char *)v10 + v105 + 4);
LABEL_125:
          *uint64_t v102 = v103;
        }
        unint64_t v97 = v101 + 1;
        v100 += 4;
      }
      while (v101 + 1 != a2);
    }
  }
  else if (!v99)
  {
    do
    {
      int v136 = *v9;
      int v135 = v9[1];
      unint64_t v9 = v97;
      if (BYTE2(v135) < BYTE2(v136))
      {
        do
        {
          *unint64_t v97 = v136;
          int v136 = *(v97 - 2);
          --v97;
        }
        while (BYTE2(v135) < BYTE2(v136));
        *unint64_t v97 = v135;
      }
      unint64_t v97 = v9 + 1;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

int *sub_2D7684(int *result, int *a2, int *a3, int *a4, int *a5)
{
  int v5 = *a2;
  int v6 = *result;
  unsigned int v7 = BYTE2(*a2);
  unsigned int v8 = BYTE2(*result);
  int v9 = *a3;
  unsigned int v10 = BYTE2(*a3);
  if (v7 >= v8)
  {
    if (v10 >= v7)
    {
      unsigned int v12 = BYTE2(v9);
      int v5 = *a3;
    }
    else
    {
      *a2 = v9;
      *a3 = v5;
      int v11 = *result;
      unsigned int v12 = BYTE2(v5);
      if (BYTE2(*a2) < BYTE2(*result))
      {
        *result = *a2;
        *a2 = v11;
        int v5 = *a3;
        int v13 = *a4;
        if (BYTE2(*a3) <= BYTE2(*a4)) {
          goto LABEL_18;
        }
        goto LABEL_14;
      }
    }
    int v13 = *a4;
    if (v12 <= BYTE2(*a4)) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  if (v10 >= v7)
  {
    *result = v5;
    *a2 = v6;
    int v5 = *a3;
    if (BYTE2(*a3) >= BYTE2(v6))
    {
      int v13 = *a4;
      if (BYTE2(v5) <= BYTE2(*a4)) {
        goto LABEL_18;
      }
      goto LABEL_14;
    }
    *a2 = v5;
  }
  else
  {
    *result = v9;
  }
  *a3 = v6;
  int v5 = v6;
  int v13 = *a4;
  if (v8 <= BYTE2(*a4)) {
    goto LABEL_18;
  }
LABEL_14:
  *a3 = v13;
  *a4 = v5;
  int v14 = *a2;
  if (BYTE2(*a3) < BYTE2(*a2))
  {
    *a2 = *a3;
    *a3 = v14;
    int v15 = *result;
    if (BYTE2(*a2) < BYTE2(*result))
    {
      *result = *a2;
      *a2 = v15;
    }
  }
LABEL_18:
  int v16 = *a4;
  if (BYTE2(*a5) < BYTE2(*a4))
  {
    *a4 = *a5;
    *a5 = v16;
    int v17 = *a3;
    if (BYTE2(*a4) < BYTE2(*a3))
    {
      *a3 = *a4;
      *a4 = v17;
      int v18 = *a2;
      if (BYTE2(*a3) < BYTE2(*a2))
      {
        *a2 = *a3;
        *a3 = v18;
        int v19 = *result;
        if (BYTE2(*a2) < BYTE2(*result))
        {
          *result = *a2;
          *a2 = v19;
        }
      }
    }
  }
  return result;
}

BOOL sub_2D7838(int *a1, int *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      int v10 = *(a2 - 1);
      int v11 = *a1;
      if (BYTE2(v10) < BYTE2(*a1))
      {
        *a1 = v10;
        *(a2 - 1) = v11;
      }
      return 1;
    case 3:
      int v12 = *a1;
      int v13 = a1[1];
      unsigned int v14 = BYTE2(*a1);
      int v15 = *(a2 - 1);
      if (BYTE2(v13) >= v14)
      {
        if (BYTE2(v15) < BYTE2(v13))
        {
          a1[1] = v15;
          *(a2 - 1) = v13;
          int v34 = *a1;
          int v33 = a1[1];
          if (BYTE2(v33) < BYTE2(*a1))
          {
            *a1 = v33;
            a1[1] = v34;
            return 1;
          }
        }
      }
      else
      {
        if (BYTE2(v15) < BYTE2(v13))
        {
          *a1 = v15;
          *(a2 - 1) = v12;
          return 1;
        }
        *a1 = v13;
        a1[1] = v12;
        int v36 = *(a2 - 1);
        if (v14 > BYTE2(v36))
        {
          a1[1] = v36;
          *(a2 - 1) = v12;
          return 1;
        }
      }
      return 1;
    case 4:
      int v16 = a1 + 1;
      int v17 = a1[1];
      int v18 = a1 + 2;
      int v19 = a1[2];
      int v20 = *a1;
      unsigned int v21 = BYTE2(*a1);
      unsigned int v22 = BYTE2(v19);
      if (BYTE2(v17) >= v21)
      {
        if (BYTE2(v19) >= BYTE2(v17))
        {
          int v17 = a1[2];
        }
        else
        {
          unsigned int v23 = a1;
          int *v16 = v19;
          int *v18 = v17;
          int v24 = a1 + 1;
          BOOL v35 = BYTE2(v19) >= v21;
          unsigned int v21 = BYTE2(v17);
          unsigned int v22 = BYTE2(v17);
          if (!v35) {
            goto LABEL_41;
          }
        }
        int v37 = *(a2 - 1);
        if (v22 <= BYTE2(v37)) {
          return 1;
        }
      }
      else
      {
        if (BYTE2(v19) < BYTE2(v17))
        {
          unsigned int v23 = a1;
          int v24 = a1 + 2;
          int v17 = *a1;
          goto LABEL_41;
        }
        *a1 = v17;
        a1[1] = v20;
        unsigned int v23 = a1 + 1;
        int v24 = a1 + 2;
        int v17 = v20;
        if (BYTE2(v19) < v21)
        {
LABEL_41:
          *unsigned int v23 = v19;
          *int v24 = v20;
          int v37 = *(a2 - 1);
          if (v21 <= BYTE2(v37)) {
            return 1;
          }
          goto LABEL_45;
        }
        int v17 = v19;
        int v37 = *(a2 - 1);
        if (v22 <= BYTE2(v37)) {
          return 1;
        }
      }
LABEL_45:
      int *v18 = v37;
      *(a2 - 1) = v17;
      int v38 = *v18;
      int v39 = *v16;
      if (BYTE2(v38) < BYTE2(*v16))
      {
        a1[1] = v38;
        a1[2] = v39;
        int v40 = *a1;
        if (BYTE2(v38) < BYTE2(*a1))
        {
          *a1 = v38;
          a1[1] = v40;
          return 1;
        }
      }
      return 1;
    case 5:
      sub_2D7684(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      BOOL v4 = a1 + 2;
      int v3 = a1[2];
      int v5 = a1[1];
      int v6 = *a1;
      unsigned int v7 = BYTE2(*a1);
      if (BYTE2(v5) >= v7)
      {
        if (BYTE2(v3) >= BYTE2(v5)) {
          goto LABEL_20;
        }
        a1[1] = v3;
        *BOOL v4 = v5;
        unsigned int v8 = a1;
        int v9 = a1 + 1;
      }
      else
      {
        unsigned int v8 = a1;
        int v9 = a1 + 2;
        if (BYTE2(v3) < BYTE2(v5)) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        unsigned int v8 = a1 + 1;
        int v9 = a1 + 2;
      }
      if (BYTE2(v3) >= v7) {
        goto LABEL_20;
      }
LABEL_19:
      *unsigned int v8 = v3;
      *int v9 = v6;
LABEL_20:
      int v25 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v26 = 0;
      for (uint64_t i = 12; ; i += 4)
      {
        int v28 = *v25;
        int v29 = *v4;
        unsigned int v30 = BYTE2(*v25);
        if (v30 < BYTE2(v29)) {
          break;
        }
LABEL_29:
        BOOL v4 = v25++;
        if (v25 == a2) {
          return 1;
        }
      }
      uint64_t v31 = i;
      do
      {
        *(int *)((char *)a1 + v31) = v29;
        uint64_t v32 = v31 - 4;
        if (v31 == 4)
        {
          *a1 = v28;
          if (++v26 != 8) {
            goto LABEL_29;
          }
          return v25 + 1 == a2;
        }
        int v29 = *(int *)((char *)a1 + v31 - 8);
        v31 -= 4;
      }
      while (v30 < BYTE2(v29));
      *(int *)((char *)a1 + v32) = v28;
      if (++v26 != 8) {
        goto LABEL_29;
      }
      return v25 + 1 == a2;
  }
}

void sub_2D7BD4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    unint64_t v2 = *(void *)(a1 + 24);
    if (v2 < 0x80)
    {
      if (v2)
      {
        uint64_t v8 = 0;
        for (uint64_t i = 0; i != v2; ++i)
        {
          if ((*(char *)(*(void *)a1 + i) & 0x80000000) == 0)
          {
            uint64_t v10 = *(void *)(a1 + 8) + v8;
            int v11 = *(void **)(v10 + 8);
            if (v11)
            {
              *(void *)(v10 + 16) = v11;
              operator delete(v11);
              unint64_t v2 = *(void *)(a1 + 24);
            }
          }
          v8 += 32;
        }
        *(void *)(a1 + 16) = 0;
        memset(*(void **)a1, 128, v2 + 8);
        *(unsigned char *)(*(void *)a1 + v2) = -1;
        unint64_t v12 = *(void *)(a1 + 24);
        uint64_t v13 = v12 - (v12 >> 3);
        BOOL v14 = v12 == 7;
        uint64_t v15 = 6;
        if (!v14) {
          uint64_t v15 = v13;
        }
        *(void *)(a1 + 40) = v15 - *(void *)(a1 + 16);
      }
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      int v5 = (void *)(a1 + 8);
      do
      {
        if ((*(char *)(*(void *)a1 + v4) & 0x80000000) == 0)
        {
          uint64_t v6 = *v5 + v3;
          unsigned int v7 = *(void **)(v6 + 8);
          if (v7)
          {
            *(void *)(v6 + 16) = v7;
            operator delete(v7);
            unint64_t v2 = *(void *)(a1 + 24);
          }
        }
        ++v4;
        v3 += 32;
      }
      while (v4 != v2);
      operator delete(*(void **)a1);
      *(void *)a1 = &unk_20E1710;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      void *v5 = 0;
    }
  }
}

unint64_t sub_2D7D20@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = 0;
  unint64_t v7 = *a2;
  unint64_t v8 = (*a2 >> 16) & 0xFFFF0000 | (*a2 << 32);
  BOOL v9 = (*a2 & 0xFF000000000000) == 0;
  unint64_t v10 = ((0x2127599BF4325C37 * ((v8 | v9) ^ (v8 >> 23))) ^ ~((0x2127599BF4325C37 * ((v8 | v9) ^ (v8 >> 23))) >> 47))
      + (((0x2127599BF4325C37 * ((v8 | v9) ^ (v8 >> 23))) ^ ((0x2127599BF4325C37 * ((v8 | v9) ^ (v8 >> 23))) >> 47)) << 21);
  unint64_t v11 = 21 * ((265 * (v10 ^ (v10 >> 24))) ^ ((265 * (v10 ^ (v10 >> 24))) >> 14));
  unint64_t v12 = 2147483649u * (v11 ^ (v11 >> 28));
  uint64_t v13 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v11 ^ (v11 >> 28)) >> 8) ^ ((-2147483647
                                                                                       * (v11 ^ (v11 >> 28))) >> 16)) ^ ((-2147483647 * (v11 ^ (v11 >> 28))) >> 24)) & 0xF));
  unint64_t v14 = v12 >> 7;
  uint64_t v15 = v13[3];
  uint64_t v16 = *v13;
  while (1)
  {
    unint64_t v17 = v14 & v15;
    uint64_t v18 = *(void *)(v16 + (v14 & v15));
    unint64_t v19 = ((v18 ^ (0x101010101010101 * (v12 & 0x7F))) - 0x101010101010101) & ~(v18 ^ (0x101010101010101
                                                                                        * (v12 & 0x7F))) & 0x8080808080808080;
    if (v19) {
      break;
    }
LABEL_7:
    if ((v18 & (~v18 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_2D7ECC(v13, v12);
      int v24 = (unint64_t *)(v13[1] + 32 * result);
      *int v24 = *a2;
      v24[1] = 0;
      v24[2] = 0;
      v24[3] = 0;
      uint64_t v16 = *v13;
      uint64_t v20 = v13[1];
      uint64_t v15 = v13[3];
      char v23 = 1;
      goto LABEL_11;
    }
    v6 += 8;
    unint64_t v14 = v6 + v17;
  }
  uint64_t v20 = v13[1];
  while (1)
  {
    unint64_t result = (v17 + (__clz(__rbit64(v19)) >> 3)) & v15;
    unint64_t v22 = v20 + 32 * result;
    if (__PAIR64__(*(unsigned __int16 *)(v22 + 4), *(_DWORD *)v22) == __PAIR64__(WORD2(v7), v7)
      && (HIWORD(v7) & 1) != (*(unsigned char *)(v22 + 6) == 0))
    {
      break;
    }
    v19 &= v19 - 1;
    if (!v19) {
      goto LABEL_7;
    }
  }
  char v23 = 0;
LABEL_11:
  *(void *)a3 = v13;
  *(void *)(a3 + 8) = a1 + 768;
  *(void *)(a3 + 16) = v16 + result;
  *(void *)(a3 + 24) = v20 + 32 * result;
  *(void *)(a3 + 32) = v16 + v15;
  *(unsigned char *)(a3 + 48) = v23;
  return result;
}

unint64_t sub_2D7ECC(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_2D801C((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

unint64_t sub_2D7FC4(void *a1, unint64_t a2)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = v2 & (a2 >> 7);
  uint64_t v4 = 0;
  for (unint64_t i = *(void *)(*a1 + v3) & (~*(void *)(*a1 + v3) << 7) & 0x8080808080808080;
        !i;
        unint64_t i = *(void *)(*a1 + v3) & (~*(void *)(*a1 + v3) << 7) & 0x8080808080808080)
  {
    v4 += 8;
    unint64_t v3 = (v4 + v3) & v2;
  }
  return (v3 + (__clz(__rbit64(i)) >> 3)) & v2;
}

void sub_2D801C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_2D804C((char **)a1, v2);
    return;
  }
  sub_2D8240(a1);
}

void sub_2D804C(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = (char *)operator new(v7 + 32 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (unint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        unint64_t v14 = &v5[32 * (void)i];
        BOOL v16 = (*(void *)v14 & 0xFF000000000000) == 0;
        unint64_t v15 = (*(void *)v14 >> 16) & 0xFFFF0000 | (*(void *)v14 << 32);
        unint64_t v17 = ((0x2127599BF4325C37 * ((v15 | v16) ^ (v15 >> 23))) ^ ~((0x2127599BF4325C37
                                                                       * ((v15 | v16) ^ (v15 >> 23))) >> 47))
            + (((0x2127599BF4325C37 * ((v15 | v16) ^ (v15 >> 23))) ^ ((0x2127599BF4325C37
                                                                       * ((v15 | v16) ^ (v15 >> 23))) >> 47)) << 21);
        unint64_t v18 = 21 * ((265 * (v17 ^ (v17 >> 24))) ^ ((265 * (v17 ^ (v17 >> 24))) >> 14));
        unint64_t v19 = 2147483649u * (v18 ^ (v18 >> 28));
        uint64_t v20 = a1[3];
        unsigned int v21 = *a1;
        unint64_t v22 = (unint64_t)v20 & (v19 >> 7);
        unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
        if (!v23)
        {
          uint64_t v24 = 8;
          do
          {
            unint64_t v22 = (v22 + v24) & (unint64_t)v20;
            v24 += 8;
            unint64_t v23 = *(void *)&v21[v22] & (~*(void *)&v21[v22] << 7) & 0x8080808080808080;
          }
          while (!v23);
        }
        unint64_t v11 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v20;
        char v12 = v19 & 0x7F;
        v21[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        uint64_t v13 = &a1[1][32 * v11];
        *(void *)uint64_t v13 = *(void *)v14;
        *((void *)v13 + 1) = 0;
        *((void *)v13 + 2) = 0;
        *((void *)v13 + 3) = 0;
        *(_OWORD *)(v13 + 8) = *(_OWORD *)(v14 + 8);
        *((void *)v13 + 3) = *((void *)v14 + 3);
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 2) = 0;
        *((void *)v14 + 3) = 0;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_2D8240(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_27;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        unint64_t *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      unint64_t v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        uint64_t v18 = 32 * i;
        unint64_t v19 = *(void *)(*(void *)(result + 8) + 32 * i);
        unint64_t v20 = (v19 >> 16) & 0xFFFF0000 | (v19 << 32);
        BOOL v21 = (v19 & 0xFF000000000000) == 0;
        unint64_t v22 = ((0x2127599BF4325C37 * ((v20 | v21) ^ (v20 >> 23))) ^ ~((0x2127599BF4325C37
                                                                       * ((v20 | v21) ^ (v20 >> 23))) >> 47))
            + (((0x2127599BF4325C37 * ((v20 | v21) ^ (v20 >> 23))) ^ ((0x2127599BF4325C37
                                                                       * ((v20 | v21) ^ (v20 >> 23))) >> 47)) << 21);
        unint64_t v23 = 21 * ((265 * (v22 ^ (v22 >> 24))) ^ ((265 * (v22 ^ (v22 >> 24))) >> 14));
        unint64_t v24 = 2147483649u * (v23 ^ (v23 >> 28));
        unint64_t v25 = v13 & (v24 >> 7);
        unint64_t v26 = *(uint64_t *)((unsigned char *)v17->i64 + v25) & (~*(uint64_t *)((char *)v17->i64 + v25) << 7) & 0x8080808080808080;
        if (v26)
        {
          unint64_t v15 = v13 & (v24 >> 7);
        }
        else
        {
          uint64_t v27 = 8;
          unint64_t v15 = v13 & (v24 >> 7);
          do
          {
            unint64_t v15 = (v15 + v27) & v13;
            v27 += 8;
            unint64_t v26 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v26);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v26)) >> 3)) & v13;
        if ((((v16 - v25) ^ (i - v25)) & v13) > 7)
        {
          int v28 = v17->u8[v16];
          v17->i8[v16] = v24 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v24 & 0x7F;
          uint64_t v29 = *(void *)(result + 8);
          if (v28 == 128)
          {
            unsigned int v30 = (void *)(v29 + 32 * v16);
            uint64_t v31 = v29 + 32 * i;
            *unsigned int v30 = *(void *)v31;
            v30[1] = 0;
            v30[2] = 0;
            v30[3] = 0;
            *(_OWORD *)(v30 + 1) = *(_OWORD *)(v31 + 8);
            v30[3] = *(void *)(v31 + 24);
            *(void *)(v31 + 16) = 0;
            *(void *)(v31 + 24) = 0;
            *(void *)(v31 + 8) = 0;
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            uint64_t v32 = (uint64_t *)(v29 + v18);
            uint64_t v33 = *v32;
            uint64_t v34 = v32[3];
            long long v35 = *(_OWORD *)(v32 + 1);
            v32[2] = 0;
            v32[3] = 0;
            v32[1] = 0;
            uint64_t v36 = *(void *)(result + 8);
            int v37 = (void *)(v36 + v18);
            uint64_t v38 = v36 + 32 * v16;
            void *v37 = *(void *)v38;
            v37[1] = 0;
            v37[2] = 0;
            v37[3] = 0;
            *(_OWORD *)(v37 + 1) = *(_OWORD *)(v38 + 8);
            v37[3] = *(void *)(v38 + 24);
            *(void *)(v38 + 16) = 0;
            *(void *)(v38 + 24) = 0;
            *(void *)(v38 + 8) = 0;
            uint64_t v39 = *(void *)(result + 8) + 32 * v16;
            *(void *)uint64_t v39 = v33;
            *(_OWORD *)(v39 + 8) = v35;
            *(void *)(v39 + 24) = v34;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v24 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v24 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v40 = i - (i >> 3);
    BOOL v41 = i == 7;
    uint64_t v42 = 6;
    if (!v41) {
      uint64_t v42 = v40;
    }
    *(void *)(result + 40) = v42 - *(void *)(result + 16);
  }
  else
  {
    *(void *)(result + 40) = -*(void *)(result + 16);
  }
  return result;
}

void *sub_2D8554(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  int8x16_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      sub_2E00();
    uint64_t v13 = v12;
    unint64_t result = operator new(8 * v12);
    int8x16_t v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    uint64_t v14 = a3 - v6;
    if (v14) {
      unint64_t result = memcpy(result, v6, v14 - 1);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  unint64_t v15 = (void **)(result + 1);
  unint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    size_t v19 = v14 - 1;
    unint64_t v20 = (void *)*result;
LABEL_20:
    unint64_t result = memmove(v20, __src, v19);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    unint64_t result = memmove((void *)*result, __src, v16 - v9 - 1);
    int8x16_t v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v18;
  if (v14)
  {
    size_t v19 = v14 - 1;
    unint64_t v20 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *unint64_t v15 = &v9[v14];
  return result;
}

uint64_t sub_2D86A4(uint64_t *a1, uint64_t *a2, __int16 *a3, __int16 *a4, unsigned __int8 *a5, unsigned __int8 *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  unint64_t v10 = v9 + 1;
  if (v9 + 1 > 0x1555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 2) > v10) {
    unint64_t v10 = 0x5555555555555556 * ((a1[2] - *a1) >> 2);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
    unint64_t v16 = 0x1555555555555555;
  }
  else {
    unint64_t v16 = v10;
  }
  if (v16)
  {
    unint64_t v26 = a2;
    if (v16 > 0x1555555555555555) {
      sub_188D718();
    }
    unint64_t v17 = a8;
    uint64_t v18 = (char *)operator new(12 * v16);
    a8 = v17;
    a2 = v26;
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v19 = sub_2DCEB0((uint64_t)&v18[12 * v9], *a2, *a3, *a4, *a5, *a6, *a7, *a8);
  uint64_t v20 = v19 + 12;
  unint64_t v22 = (_DWORD *)*a1;
  BOOL v21 = (_DWORD *)a1[1];
  if (v21 != (_DWORD *)*a1)
  {
    do
    {
      uint64_t v23 = *(void *)(v21 - 3);
      v21 -= 3;
      int v24 = v21[2];
      *(void *)(v19 - 12) = v23;
      v19 -= 12;
      *(_DWORD *)(v19 + 8) = v24;
    }
    while (v21 != v22);
    BOOL v21 = (_DWORD *)*a1;
  }
  *a1 = v19;
  a1[1] = v20;
  a1[2] = (uint64_t)&v18[12 * v16];
  if (v21) {
    operator delete(v21);
  }
  return v20;
}

void sub_2D8808(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2D8820@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = 0;
  uint64_t v6 = (uint64_t *)(a1 + 48 * (((BYTE1(a2) ^ BYTE2(a2)) ^ BYTE3(a2)) & 0xF));
  unint64_t v7 = a2 >> 7;
  uint64_t v8 = v6[3];
  while (1)
  {
    unint64_t v9 = v7 & v8;
    uint64_t v10 = *(void *)(*v6 + v9);
    unint64_t v11 = ((v10 ^ (0x101010101010101 * (a2 & 0x7F))) - 0x101010101010101) & ~(v10 ^ (0x101010101010101
                                                                                       * (a2 & 0x7F))) & 0x8080808080808080;
    if (v11) {
      break;
    }
LABEL_7:
    if ((v10 & (~v10 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_2D8940(v6, a2);
      *(void *)a4 = v6;
      *(void *)(a4 + 8) = result;
      *(unsigned char *)(a4 + 16) = 1;
      return result;
    }
    v5 += 8;
    unint64_t v7 = v5 + v9;
  }
  unint64_t v12 = *a3;
  while (1)
  {
    unint64_t result = (v9 + (__clz(__rbit64(v11)) >> 3)) & v8;
    uint64_t v14 = v6[1] + 104 * result;
    if (__PAIR64__(*(unsigned __int16 *)(v14 + 4), *(_DWORD *)v14) == __PAIR64__(WORD2(v12), v12)
      && (HIWORD(v12) & 1) != (*(unsigned char *)(v14 + 6) == 0))
    {
      break;
    }
    v11 &= v11 - 1;
    if (!v11) {
      goto LABEL_7;
    }
  }
  *(void *)a4 = v6;
  *(void *)(a4 + 8) = result;
  *(unsigned char *)(a4 + 16) = 0;
  return result;
}

unint64_t sub_2D8940(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_2D8A38((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_2D8A38(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_2D8A68((char **)a1, v2);
    return;
  }
  sub_2D8C58(a1);
}

void sub_2D8A68(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = (char *)operator new(v7 + 104 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (unint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        uint64_t v13 = &v5[104 * (void)i];
        BOOL v15 = (*(void *)v13 & 0xFF000000000000) == 0;
        unint64_t v14 = (*(void *)v13 >> 16) & 0xFFFF0000 | (*(void *)v13 << 32);
        unint64_t v16 = ((0x2127599BF4325C37 * ((v14 | v15) ^ (v14 >> 23))) ^ ~((0x2127599BF4325C37
                                                                       * ((v14 | v15) ^ (v14 >> 23))) >> 47))
            + (((0x2127599BF4325C37 * ((v14 | v15) ^ (v14 >> 23))) ^ ((0x2127599BF4325C37
                                                                       * ((v14 | v15) ^ (v14 >> 23))) >> 47)) << 21);
        unint64_t v17 = 21 * ((265 * (v16 ^ (v16 >> 24))) ^ ((265 * (v16 ^ (v16 >> 24))) >> 14));
        unint64_t v18 = 2147483649u * (v17 ^ (v17 >> 28));
        uint64_t v19 = a1[3];
        uint64_t v20 = *a1;
        unint64_t v21 = (unint64_t)v19 & (v18 >> 7);
        unint64_t v22 = *(void *)&(*a1)[v21] & (~*(void *)&(*a1)[v21] << 7) & 0x8080808080808080;
        if (!v22)
        {
          uint64_t v23 = 8;
          do
          {
            unint64_t v21 = (v21 + v23) & (unint64_t)v19;
            v23 += 8;
            unint64_t v22 = *(void *)&v20[v21] & (~*(void *)&v20[v21] << 7) & 0x8080808080808080;
          }
          while (!v22);
        }
        unint64_t v11 = (v21 + (__clz(__rbit64(v22)) >> 3)) & (unint64_t)v19;
        char v12 = v18 & 0x7F;
        v20[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        sub_2D8F94((uint64_t)(a1 + 5), &a1[1][104 * v11], (uint64_t)v13);
      }
    }
    operator delete(v4);
  }
}

void sub_2D8C58(uint64_t a1)
{
  uint64_t v2 = *(int8x16_t **)a1;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)a1 + v3;
  if (v4 + 1 != *(void *)a1)
  {
    unint64_t v5 = v3 - 7;
    unint64_t v6 = *(unint64_t **)a1;
    if (v5 < 0x18) {
      goto LABEL_26;
    }
    uint64_t v7 = (v5 >> 3) + 1;
    unint64_t v6 = (unint64_t *)v2 + (v7 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v8 = v2 + 1;
    v9.i64[0] = 0x8080808080808080;
    v9.i64[1] = 0x8080808080808080;
    v10.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v10.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v11 = v7 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v12 = vandq_s8(v8[-1], v9);
      int8x16_t v13 = vandq_s8(*v8, v9);
      v8[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v10);
      *uint64_t v8 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v13), (uint64x2_t)v13, 7uLL), v10);
      v8 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_26:
      do
      {
        unint64_t *v6 = (~(*v6 & 0x8080808080808080) + ((*v6 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v6;
      }
      while (v6 != (unint64_t *)(v4 + 1));
    }
  }
  *(void *)(v4 + 1) = v2->i64[0];
  *(unsigned char *)uint64_t v4 = -1;
  uint64_t v14 = *(void *)(a1 + 24);
  if (v14)
  {
    for (unint64_t i = 0; i != v14; ++i)
    {
      unint64_t v18 = *(int8x16_t **)a1;
      if (*(unsigned __int8 *)(*(void *)a1 + i) == 254)
      {
        unint64_t v19 = *(void *)(*(void *)(a1 + 8) + 104 * i);
        unint64_t v20 = (v19 >> 16) & 0xFFFF0000 | (v19 << 32);
        BOOL v21 = (v19 & 0xFF000000000000) == 0;
        unint64_t v22 = ((0x2127599BF4325C37 * ((v20 | v21) ^ (v20 >> 23))) ^ ~((0x2127599BF4325C37
                                                                       * ((v20 | v21) ^ (v20 >> 23))) >> 47))
            + (((0x2127599BF4325C37 * ((v20 | v21) ^ (v20 >> 23))) ^ ((0x2127599BF4325C37
                                                                       * ((v20 | v21) ^ (v20 >> 23))) >> 47)) << 21);
        unint64_t v23 = 21 * ((265 * (v22 ^ (v22 >> 24))) ^ ((265 * (v22 ^ (v22 >> 24))) >> 14));
        unint64_t v24 = 2147483649u * (v23 ^ (v23 >> 28));
        unint64_t v25 = v14 & (v24 >> 7);
        unint64_t v26 = *(uint64_t *)((unsigned char *)v18->i64 + v25) & (~*(uint64_t *)((char *)v18->i64 + v25) << 7) & 0x8080808080808080;
        if (v26)
        {
          unint64_t v16 = v14 & (v24 >> 7);
        }
        else
        {
          uint64_t v27 = 8;
          unint64_t v16 = v14 & (v24 >> 7);
          do
          {
            unint64_t v16 = (v16 + v27) & v14;
            v27 += 8;
            unint64_t v26 = *(uint64_t *)((unsigned char *)v18->i64 + v16) & (~*(uint64_t *)((char *)v18->i64 + v16) << 7) & 0x8080808080808080;
          }
          while (!v26);
        }
        unint64_t v17 = (v16 + (__clz(__rbit64(v26)) >> 3)) & v14;
        if ((((v17 - v25) ^ (i - v25)) & v14) > 7)
        {
          int v28 = v18->u8[v17];
          v18->i8[v17] = v24 & 0x7F;
          *(unsigned char *)((*(void *)(a1 + 24) & (v17 - 8)) + (*(void *)(a1 + 24) & 7) + *(void *)a1 + 1) = v24 & 0x7F;
          uint64_t v29 = *(void *)(a1 + 8);
          if (v28 == 128)
          {
            sub_2D8F94(a1 + 40, (void *)(v29 + 104 * v17), v29 + 104 * i);
            *(unsigned char *)(*(void *)a1 + i) = 0x80;
            *(unsigned char *)((*(void *)(a1 + 24) & (i - 8)) + (*(void *)(a1 + 24) & 7) + *(void *)a1 + 1) = 0x80;
          }
          else
          {
            sub_2D8F94(a1 + 40, v30, v29 + 104 * i);
            sub_2D8F94(a1 + 40, (void *)(*(void *)(a1 + 8) + 104 * i), *(void *)(a1 + 8) + 104 * v17);
            sub_2D8F94(a1 + 40, (void *)(*(void *)(a1 + 8) + 104 * v17), (uint64_t)v30);
            --i;
          }
        }
        else
        {
          v18->i8[i] = v24 & 0x7F;
          *(unsigned char *)((*(void *)(a1 + 24) & (i - 8)) + (*(void *)(a1 + 24) & 7) + *(void *)a1 + 1) = v24 & 0x7F;
        }
      }
      uint64_t v14 = *(void *)(a1 + 24);
    }
    uint64_t v14 = i - (i >> 3);
    if (i == 7) {
      uint64_t v14 = 6;
    }
  }
  *(void *)(a1 + 40) = v14 - *(void *)(a1 + 16);
}

void sub_2D8F94(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = *(void *)a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  uint64_t v4 = (void **)(a3 + 8);
  *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 8);
  a2[3] = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  a2[4] = 0;
  a2[5] = 0;
  a2[6] = 0;
  unint64_t v5 = (void **)(a3 + 32);
  *((_OWORD *)a2 + 2) = *(_OWORD *)(a3 + 32);
  a2[6] = *(void *)(a3 + 48);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  a2[7] = 0;
  a2[8] = 0;
  a2[9] = 0;
  *(_OWORD *)(a2 + 7) = *(_OWORD *)(a3 + 56);
  a2[9] = *(void *)(a3 + 72);
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  a2[10] = 0;
  a2[11] = 0;
  a2[12] = 0;
  *((_OWORD *)a2 + 5) = *(_OWORD *)(a3 + 80);
  a2[12] = *(void *)(a3 + 96);
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  unint64_t v6 = *(void **)(a3 + 56);
  if (v6)
  {
    *(void *)(a3 + 64) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(a3 + 40) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *v4;
  if (*v4)
  {
    *(void *)(a3 + 16) = v8;
    operator delete(v8);
  }
}

void sub_2D9094(const std::logic_error *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  uint64_t v3 = sub_2D90D4(exception, a1);
}

std::logic_error *sub_2D90D4(std::logic_error *a1, const std::logic_error *a2)
{
  unint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_2D9108()
{
  byte_2557037 = 1;
  word_2557020 = 65;
}

uint64_t sub_2D9124(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  sub_2D2170(a1 + 16);
  *(unsigned char *)(a1 + 2520) = a4;
  *(void *)(a1 + 2528) = &unk_20E1710;
  *(void *)(a1 + 2568) = 0;
  *(void *)(a1 + 2536) = 0;
  *(void *)(a1 + 2552) = 0;
  *(void *)(a1 + 2544) = 0;
  *(void *)(a1 + 2576) = &unk_20E1710;
  *(void *)(a1 + 2616) = 0;
  *(void *)(a1 + 2584) = 0;
  *(void *)(a1 + 2600) = 0;
  *(void *)(a1 + 2592) = 0;
  *(void *)(a1 + 2624) = &unk_20E1710;
  *(void *)(a1 + 2664) = 0;
  *(void *)(a1 + 2632) = 0;
  *(void *)(a1 + 2648) = 0;
  *(void *)(a1 + 2640) = 0;
  *(void *)(a1 + 2672) = &unk_20E1710;
  *(void *)(a1 + 2712) = 0;
  *(void *)(a1 + 2688) = 0;
  *(void *)(a1 + 2680) = 0;
  *(void *)(a1 + 2696) = 0;
  *(void *)(a1 + 2720) = &unk_20E1710;
  *(void *)(a1 + 2760) = 0;
  *(void *)(a1 + 2744) = 0;
  *(void *)(a1 + 2728) = 0;
  *(void *)(a1 + 2736) = 0;
  *(void *)(a1 + 2768) = &unk_20E1710;
  *(void *)(a1 + 2808) = 0;
  *(void *)(a1 + 2792) = 0;
  *(void *)(a1 + 2776) = 0;
  *(void *)(a1 + 2784) = 0;
  *(void *)(a1 + 2816) = &unk_20E1710;
  *(void *)(a1 + 2856) = 0;
  *(void *)(a1 + 2840) = 0;
  *(void *)(a1 + 2824) = 0;
  *(void *)(a1 + 2832) = 0;
  *(void *)(a1 + 2864) = &unk_20E1710;
  *(void *)(a1 + 2904) = 0;
  *(void *)(a1 + 2880) = 0;
  *(void *)(a1 + 2872) = 0;
  *(void *)(a1 + 2888) = 0;
  *(void *)(a1 + 2912) = &unk_20E1710;
  *(void *)(a1 + 2952) = 0;
  *(void *)(a1 + 2928) = 0;
  *(void *)(a1 + 2920) = 0;
  *(void *)(a1 + 2936) = 0;
  *(void *)(a1 + 2960) = &unk_20E1710;
  *(void *)(a1 + 3000) = 0;
  *(void *)(a1 + 2976) = 0;
  *(void *)(a1 + 2968) = 0;
  *(void *)(a1 + 2984) = 0;
  *(void *)(a1 + 3008) = &unk_20E1710;
  *(void *)(a1 + 3048) = 0;
  *(void *)(a1 + 3024) = 0;
  *(void *)(a1 + 3016) = 0;
  *(void *)(a1 + 3032) = 0;
  *(void *)(a1 + 3056) = &unk_20E1710;
  *(void *)(a1 + 3096) = 0;
  *(void *)(a1 + 3072) = 0;
  *(void *)(a1 + 3064) = 0;
  *(void *)(a1 + 3080) = 0;
  *(void *)(a1 + 3104) = &unk_20E1710;
  *(void *)(a1 + 3144) = 0;
  *(void *)(a1 + 3120) = 0;
  *(void *)(a1 + 3112) = 0;
  *(void *)(a1 + 3128) = 0;
  *(void *)(a1 + 3152) = &unk_20E1710;
  *(void *)(a1 + 3192) = 0;
  *(void *)(a1 + 3168) = 0;
  *(void *)(a1 + 3160) = 0;
  *(void *)(a1 + 3176) = 0;
  *(void *)(a1 + 3200) = &unk_20E1710;
  *(void *)(a1 + 3240) = 0;
  *(void *)(a1 + 3216) = 0;
  *(void *)(a1 + 3208) = 0;
  *(void *)(a1 + 3224) = 0;
  *(void *)(a1 + 3248) = &unk_20E1710;
  *(void *)(a1 + 3288) = 0;
  *(void *)(a1 + 3264) = 0;
  *(void *)(a1 + 3256) = 0;
  *(void *)(a1 + 3272) = 0;
  *(void *)(a1 + 3296) = &unk_20E1710;
  *(void *)(a1 + 3336) = 0;
  *(void *)(a1 + 3312) = 0;
  *(void *)(a1 + 3304) = 0;
  *(void *)(a1 + 3320) = 0;
  *(void *)(a1 + 3344) = &unk_20E1710;
  *(void *)(a1 + 3384) = 0;
  *(void *)(a1 + 3360) = 0;
  *(void *)(a1 + 3352) = 0;
  *(void *)(a1 + 3368) = 0;
  *(void *)(a1 + 3392) = &unk_20E1710;
  *(void *)(a1 + 3432) = 0;
  *(void *)(a1 + 3408) = 0;
  *(void *)(a1 + 3400) = 0;
  *(void *)(a1 + 3416) = 0;
  *(void *)(a1 + 3440) = &unk_20E1710;
  *(void *)(a1 + 3480) = 0;
  *(void *)(a1 + 3456) = 0;
  *(void *)(a1 + 3448) = 0;
  *(void *)(a1 + 3464) = 0;
  *(void *)(a1 + 3488) = &unk_20E1710;
  *(void *)(a1 + 3528) = 0;
  *(void *)(a1 + 3504) = 0;
  *(void *)(a1 + 3496) = 0;
  *(void *)(a1 + 3512) = 0;
  *(void *)(a1 + 3536) = &unk_20E1710;
  *(void *)(a1 + 3576) = 0;
  *(void *)(a1 + 3552) = 0;
  *(void *)(a1 + 3544) = 0;
  *(void *)(a1 + 3560) = 0;
  *(void *)(a1 + 3584) = &unk_20E1710;
  *(void *)(a1 + 3624) = 0;
  *(void *)(a1 + 3600) = 0;
  *(void *)(a1 + 3592) = 0;
  *(void *)(a1 + 3608) = 0;
  *(void *)(a1 + 3632) = &unk_20E1710;
  *(void *)(a1 + 3672) = 0;
  *(void *)(a1 + 3648) = 0;
  *(void *)(a1 + 3640) = 0;
  *(void *)(a1 + 3656) = 0;
  *(void *)(a1 + 3680) = &unk_20E1710;
  *(void *)(a1 + 3720) = 0;
  *(void *)(a1 + 3696) = 0;
  *(void *)(a1 + 3688) = 0;
  *(void *)(a1 + 3704) = 0;
  *(void *)(a1 + 3728) = &unk_20E1710;
  *(void *)(a1 + 3768) = 0;
  *(void *)(a1 + 3744) = 0;
  *(void *)(a1 + 3736) = 0;
  *(void *)(a1 + 3752) = 0;
  *(void *)(a1 + 3776) = &unk_20E1710;
  *(void *)(a1 + 3816) = 0;
  *(void *)(a1 + 3792) = 0;
  *(void *)(a1 + 3784) = 0;
  *(void *)(a1 + 3800) = 0;
  *(void *)(a1 + 3824) = &unk_20E1710;
  *(void *)(a1 + 3864) = 0;
  *(void *)(a1 + 3840) = 0;
  *(void *)(a1 + 3832) = 0;
  *(void *)(a1 + 3848) = 0;
  *(void *)(a1 + 3872) = &unk_20E1710;
  *(void *)(a1 + 3912) = 0;
  *(void *)(a1 + 3888) = 0;
  *(void *)(a1 + 3880) = 0;
  *(void *)(a1 + 3896) = 0;
  *(void *)(a1 + 3920) = &unk_20E1710;
  *(void *)(a1 + 3960) = 0;
  *(void *)(a1 + 3936) = 0;
  *(void *)(a1 + 3928) = 0;
  *(void *)(a1 + 3944) = 0;
  *(void *)(a1 + 3968) = &unk_20E1710;
  *(void *)(a1 + 4008) = 0;
  *(void *)(a1 + 3984) = 0;
  *(void *)(a1 + 3976) = 0;
  *(void *)(a1 + 3992) = 0;
  *(void *)(a1 + 4016) = &unk_20E1710;
  *(void *)(a1 + 4032) = 0;
  *(void *)(a1 + 4024) = 0;
  *(void *)(a1 + 4040) = 0;
  *(_OWORD *)(a1 + 4104) = 0u;
  *(_OWORD *)(a1 + 4088) = 0u;
  *(_OWORD *)(a1 + 4072) = 0u;
  *(_OWORD *)(a1 + 4056) = 0u;
  *(_DWORD *)(a1 + 4120) = 1065353216;
  return a1;
}

char *sub_2D9400(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v3 = a1 + 2528;
  if (sub_2D94BC(a1 + 2528, &v8))
  {
    uint64_t v4 = sub_2D960C(v3, &v8);
    return (char *)((*(void *)(v4 + 56) - *(void *)(v4 + 48)) >> 2);
  }
  else
  {
    unint64_t result = sub_2DB7BC(*(void *)(a1 + 8), v8, *(unsigned __int8 *)(a1 + 2520));
    if (result)
    {
      unint64_t v6 = &result[-*(int *)result];
      if (*(unsigned __int16 *)v6 >= 9u && (uint64_t v7 = *((unsigned __int16 *)v6 + 4)) != 0) {
        return (char *)*(unsigned int *)&result[v7 + *(unsigned int *)&result[v7]];
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_2D94BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = ((unint64_t)*a2 >> 16) & 0xFFFF0000 | (*a2 << 32);
  BOOL v5 = (*a2 & 0xFF000000000000) == 0;
  unint64_t v6 = ((0x2127599BF4325C37 * ((v4 | v5) ^ (v4 >> 23))) ^ ~((0x2127599BF4325C37 * ((v4 | v5) ^ (v4 >> 23))) >> 47))
     + (((0x2127599BF4325C37 * ((v4 | v5) ^ (v4 >> 23))) ^ ((0x2127599BF4325C37 * ((v4 | v5) ^ (v4 >> 23))) >> 47)) << 21);
  unint64_t v7 = 21 * ((265 * (v6 ^ (v6 >> 24))) ^ ((265 * (v6 ^ (v6 >> 24))) >> 14));
  unint64_t v8 = 2147483649u * (v7 ^ (v7 >> 28));
  int8x16_t v9 = (void *)(a1
                + 48
                * (((((unsigned __int16)(v7 ^ (v7 >> 28)) >> 8) ^ ((-2147483647
                                                                                   * (v7 ^ (v7 >> 28))) >> 16)) ^ ((-2147483647 * (v7 ^ (v7 >> 28))) >> 24)) & 0xF));
  unint64_t v10 = v8 >> 7;
  uint64_t v11 = v9[3];
  uint64_t v12 = 0x101010101010101 * (v8 & 0x7F);
  int v13 = (unsigned __int16)WORD2(*a2);
  uint64_t v14 = HIWORD(*a2) & 1;
  while (1)
  {
    unint64_t v15 = v10 & v11;
    uint64_t v16 = *(void *)(*v9 + v15);
    unint64_t v17 = ((v16 ^ v12) - 0x101010101010101) & ~(v16 ^ v12) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_9:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0) {
      return 0;
    }
    v2 += 8;
    unint64_t v10 = v2 + v15;
  }
  while (1)
  {
    unint64_t v18 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v11;
    uint64_t v19 = v9[1] + 104 * v18;
    if (*(_DWORD *)v19 == v3
      && *(unsigned __int16 *)(v19 + 4) == v13
      && ((v14 ^ (*(unsigned char *)(v19 + 6) == 0)) & 1) != 0)
    {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_9;
    }
  }
  return v11 != v18;
}

uint64_t sub_2D960C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = ((unint64_t)*a2 >> 16) & 0xFFFF0000 | (*a2 << 32);
  BOOL v5 = (*a2 & 0xFF000000000000) == 0;
  unint64_t v6 = ((0x2127599BF4325C37 * ((v4 | v5) ^ (v4 >> 23))) ^ ~((0x2127599BF4325C37 * ((v4 | v5) ^ (v4 >> 23))) >> 47))
     + (((0x2127599BF4325C37 * ((v4 | v5) ^ (v4 >> 23))) ^ ((0x2127599BF4325C37 * ((v4 | v5) ^ (v4 >> 23))) >> 47)) << 21);
  unint64_t v7 = 21 * ((265 * (v6 ^ (v6 >> 24))) ^ ((265 * (v6 ^ (v6 >> 24))) >> 14));
  unint64_t v8 = 2147483649u * (v7 ^ (v7 >> 28));
  int8x16_t v9 = (void *)(a1
                + 48
                * (((((unsigned __int16)(v7 ^ (v7 >> 28)) >> 8) ^ ((-2147483647
                                                                                   * (v7 ^ (v7 >> 28))) >> 16)) ^ ((-2147483647 * (v7 ^ (v7 >> 28))) >> 24)) & 0xF));
  unint64_t v10 = v8 >> 7;
  uint64_t v11 = v9[3];
  uint64_t v12 = 0x101010101010101 * (v8 & 0x7F);
  int v13 = (unsigned __int16)WORD2(*a2);
  uint64_t v14 = HIWORD(*a2) & 1;
  while (1)
  {
    unint64_t v15 = v10 & v11;
    uint64_t v16 = *(void *)(*v9 + v15);
    unint64_t v17 = ((v16 ^ v12) - 0x101010101010101) & ~(v16 ^ v12) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_9:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_13;
    }
    v2 += 8;
    unint64_t v10 = v2 + v15;
  }
  while (1)
  {
    unint64_t v18 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v11;
    uint64_t v19 = v9[1] + 104 * v18;
    if (*(_DWORD *)v19 == v3
      && *(unsigned __int16 *)(v19 + 4) == v13
      && ((v14 ^ (*(unsigned char *)(v19 + 6) == 0)) & 1) != 0)
    {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_9;
    }
  }
  if (v11 == v18)
  {
LABEL_13:
    std::logic_error::logic_error(&v21, "phmap at(): lookup non-existent key");
    sub_2D9094(&v21);
  }
  return v19 + 8;
}

void sub_2D97B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::out_of_range a9)
{
}

double sub_2D97C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v20 = a2;
  if (!a4)
  {
LABEL_7:
    uint64_t v14 = sub_2DB7BC(*(void *)(a1 + 8), a2, *(unsigned __int8 *)(a1 + 2520));
    if (v14)
    {
      unint64_t v15 = &v14[-*(int *)v14];
      unsigned int v16 = *(unsigned __int16 *)v15;
      if (a3)
      {
        if (v16 < 7) {
          goto LABEL_15;
        }
        int v17 = *((unsigned __int16 *)v15 + 3);
        if (!v17) {
          goto LABEL_15;
        }
      }
      else
      {
        if (v16 < 5) {
          goto LABEL_15;
        }
        int v17 = *((unsigned __int16 *)v15 + 2);
        if (!v17) {
          goto LABEL_15;
        }
      }
      unint64_t v18 = &v14[v17 + *(unsigned int *)&v14[v17]];
      uint64_t v19 = *(unsigned int *)v18;
      *a5 = 0;
      a5[1] = (uint64_t)v18;
      a5[2] = 0;
      a5[3] = 0;
      a5[4] = (uint64_t)v18;
      a5[5] = v19;
      return result;
    }
LABEL_15:
    double result = 0.0;
    *((_OWORD *)a5 + 1) = 0u;
    *((_OWORD *)a5 + 2) = 0u;
    *(_OWORD *)a5 = 0u;
    return result;
  }
  if (!sub_2D94BC(a1 + 2528, &v20))
  {
    a2 = v20;
    goto LABEL_7;
  }
  uint64_t v8 = sub_2D960C(a1 + 2528, &v20);
  uint64_t v10 = v8 + 24;
  uint64_t v11 = 24;
  if (!a3)
  {
    uint64_t v11 = 0;
    uint64_t v10 = v8;
  }
  uint64_t v12 = *(void *)(v10 + 8);
  uint64_t v13 = *(void *)(v8 + v11);
  *a5 = v10;
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = v10;
  a5[4] = 0;
  a5[5] = (v12 - v13) >> 2;
  return result;
}

uint64_t sub_2D98EC(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  uint64_t v19 = a2;
  if (!a5 || !sub_2D94BC(a1 + 2528, &v19))
  {
    if (a3)
    {
      unint64_t v15 = sub_2DB7BC(*(void *)(a1 + 8), v19, *(unsigned __int8 *)(a1 + 2520));
      if (v15)
      {
        uint64_t v12 = &v15[-*(int *)v15];
        unsigned int v16 = *(unsigned __int16 *)v12;
        if (a4)
        {
          if (v16 >= 0xB)
          {
            LODWORD(v12) = *((unsigned __int16 *)v12 + 5);
            if (!v12) {
              goto LABEL_17;
            }
LABEL_15:
            uint64_t v12 = &v15[v12 + *(unsigned int *)&v15[v12]];
            if (*(unsigned __int16 *)v12 >= a3)
            {
              LODWORD(v12) = *(_DWORD *)&v12[((4 * a3 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4];
              unsigned int v14 = v12 >> 16;
              unsigned int v13 = v12 >> 24;
              return (v14 << 16) | (v13 << 24) | (unsigned __int16)v12;
            }
          }
        }
        else if (v16 >= 9)
        {
          LODWORD(v12) = *((unsigned __int16 *)v12 + 4);
          if (!v12)
          {
LABEL_17:
            unsigned int v13 = 0;
            LOBYTE(v14) = -1;
            return (v14 << 16) | (v13 << 24) | (unsigned __int16)v12;
          }
          goto LABEL_15;
        }
      }
    }
    LOWORD(v12) = 0;
    goto LABEL_17;
  }
  uint64_t v8 = sub_2D960C(a1 + 2528, &v19);
  uint64_t v9 = v8 + 48;
  uint64_t v10 = 48;
  if (a4)
  {
    uint64_t v10 = 72;
    uint64_t v9 = v8 + 72;
  }
  int v11 = *(_DWORD *)(v9 + 8);
  uint64_t v12 = *(char **)(v8 + v10);
  if (a3 <= (unsigned __int16)((v11 - v12) >> 2))
  {
    unint64_t v18 = (unsigned __int16 *)&v12[4 * a3];
    LOWORD(v12) = *(v18 - 2);
    LOBYTE(v14) = *((unsigned char *)v18 - 2);
    unsigned int v13 = *((unsigned __int8 *)v18 - 1);
  }
  else
  {
    unsigned int v13 = 0;
    LOBYTE(v14) = -1;
    LOWORD(v12) = -1;
  }
  return (v14 << 16) | (v13 << 24) | (unsigned __int16)v12;
}

BOOL sub_2D9A48(uint64_t a1, uint64_t *a2)
{
  if (*a2 == a2[1]) {
    return 0;
  }
  sub_2D9E60(a1, a2, &v36);
  __p = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  BOOL v3 = sub_2D2174(a1 + 16, &v36, (unint64_t **)&__p, *(unsigned char *)(a1 + 2520));
  if (__p)
  {
    uint64_t v39 = __p;
    operator delete(__p);
  }
  BOOL v34 = v3;
  if (v3)
  {
    unint64_t v4 = (char **)sub_2D499C(a1 + 16);
    BOOL v5 = *v4;
    unint64_t v6 = (unint64_t *)v4[1];
    if (**v4 > -2)
    {
      unint64_t v7 = *v4;
      unsigned int v30 = v4[3];
      uint64_t v9 = &v30[(void)v5];
      long long v35 = v4;
      if (v5 != &v30[(void)v5])
      {
LABEL_9:
        uint64_t v10 = 0;
LABEL_10:
        uint64_t v11 = a1 + 2528;
        uint64_t v12 = a1 + 4088;
        while (1)
        {
          do
          {
            BOOL v14 = (*v6 & 0xFF000000000000) == 0;
            unint64_t v13 = (*v6 >> 16) & 0xFFFF0000 | (*v6 << 32);
            unint64_t v15 = ((0x2127599BF4325C37 * ((v13 | v14) ^ (v13 >> 23))) ^ ~((0x2127599BF4325C37
                                                                           * ((v13 | v14) ^ (v13 >> 23))) >> 47))
                + (((0x2127599BF4325C37 * ((v13 | v14) ^ (v13 >> 23))) ^ ((0x2127599BF4325C37
                                                                           * ((v13 | v14) ^ (v13 >> 23))) >> 47)) << 21);
            unint64_t v16 = 21 * ((265 * (v15 ^ (v15 >> 24))) ^ ((265 * (v15 ^ (v15 >> 24))) >> 14));
            sub_2D8820(v11, 2147483649u * (v16 ^ (v16 >> 28)), v6, (uint64_t)&__p);
            int v17 = __p;
            if ((_BYTE)v40)
            {
              uint64_t v18 = *((void *)__p + 1) + 104 * (void)v39;
              *(void *)uint64_t v18 = *v6;
              *(_OWORD *)(v18 + 8) = 0u;
              *(_OWORD *)(v18 + 24) = 0u;
              *(_OWORD *)(v18 + 40) = 0u;
              *(_OWORD *)(v18 + 56) = 0u;
              *(_OWORD *)(v18 + 72) = 0u;
              *(_OWORD *)(v18 + 88) = 0u;
            }
            sub_2DB600(v17[1] + 104 * (void)v39 + 8, (uint64_t)(v6 + 1));
            sub_2DC0DC(v12, v6, v6);
            int v19 = *++v7;
            v6 += 13;
            if (v19 <= -2)
            {
              do
              {
                unint64_t v20 = (__clz(__rbit64(((*(void *)v7 >> 7) & ~*(void *)v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v7 += v20;
                v6 += 13 * v20;
              }
              while (*v7 < -1);
            }
          }
          while (v7 != v9);
          std::logic_error v21 = v35;
          if (v10 == 15) {
            goto LABEL_23;
          }
          unint64_t v22 = &v35[6 * v10++];
          while (1)
          {
            unint64_t v23 = &v21[6 * v10];
            unint64_t v6 = (unint64_t *)v22[7];
            unint64_t v7 = *v23;
            if (**v23 <= -2)
            {
              do
              {
                unint64_t v24 = (__clz(__rbit64(((*(void *)v7 >> 7) & ~*(void *)v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
                v7 += v24;
                v6 += 13 * v24;
              }
              while (*v7 < -1);
            }
            uint64_t v9 = &v22[9][(void)*v23];
            if (v7 != v9) {
              break;
            }
            ++v10;
            unint64_t v22 = v23;
            std::logic_error v21 = v35;
            if (v10 == 16) {
              goto LABEL_23;
            }
          }
        }
      }
    }
    else
    {
      unint64_t v7 = *v4;
      do
      {
        unint64_t v8 = (__clz(__rbit64(((*(void *)v7 >> 7) & ~*(void *)v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        v7 += v8;
        v6 += 13 * v8;
      }
      while (*v7 < -1);
      uint64_t v9 = &v4[3][(void)v5];
      long long v35 = v4;
      if (v7 != v9) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = 1;
    uint64_t v31 = v4;
    do
    {
      uint64_t v32 = &v4[6 * v10];
      unint64_t v6 = (unint64_t *)v31[7];
      unint64_t v7 = *v32;
      if (**v32 <= -2)
      {
        do
        {
          unint64_t v33 = (__clz(__rbit64(((*(void *)v7 >> 7) & ~*(void *)v7 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          v7 += v33;
          v6 += 13 * v33;
        }
        while (*v7 < -1);
      }
      uint64_t v9 = &v31[9][(void)*v32];
      if (v7 != v9) {
        goto LABEL_10;
      }
      ++v10;
      uint64_t v31 = v32;
      unint64_t v4 = v35;
    }
    while (v10 != 16);
  }
LABEL_23:
  unint64_t v25 = (char *)v36;
  if (v36)
  {
    unint64_t v26 = v37;
    uint64_t v27 = v36;
    if (v37 != v36)
    {
      do
      {
        int v28 = (void *)*((void *)v26 - 3);
        if (v28)
        {
          *((void *)v26 - 2) = v28;
          operator delete(v28);
        }
        v26 -= 32;
      }
      while (v26 != v25);
      uint64_t v27 = v36;
    }
    int v37 = v25;
    operator delete(v27);
  }
  return v34;
}

void sub_2D9E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
}

void sub_2D9E60(uint64_t a1@<X0>, uint64_t *a2@<X1>, void **a3@<X8>)
{
  BOOL v3 = a3;
  v311[0] = 1 << *(unsigned char *)(a1 + 2520);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v308 = 0;
  v309 = 0;
  v310 = 0;
  v305 = 0;
  v306 = 0;
  v307 = 0;
  v302 = 0;
  v303 = 0;
  v304 = 0;
  v299 = 0;
  v300 = 0;
  v301 = 0;
  uint64_t v4 = *a2;
  uint64_t v280 = a2[1];
  if (*a2 != v280)
  {
    v284 = (uint64_t *)(a1 + 4064);
    uint64_t v287 = a1 + 3296;
    unint64_t v5 = *(void *)(a1 + 4072);
    do
    {
      while (1)
      {
        uint64_t v282 = v4;
        unint64_t v7 = *(unint64_t **)v4;
        unint64_t v6 = *(unint64_t **)(v4 + 8);
        if (v7 == v6) {
          break;
        }
        unint64_t v285 = (v5 - *v284) >> 5;
        do
        {
          while (1)
          {
            uint64_t v8 = 0;
            unint64_t v9 = *v7;
            unint64_t v10 = (*v7 >> 16) & 0xFFFF0000 | (*v7 << 32);
            BOOL v11 = (*v7 & 0xFF000000000000) == 0;
            unint64_t v12 = ((0x2127599BF4325C37 * ((v10 | v11) ^ (v10 >> 23))) ^ ~((0x2127599BF4325C37
                                                                           * ((v10 | v11) ^ (v10 >> 23))) >> 47))
                + (((0x2127599BF4325C37 * ((v10 | v11) ^ (v10 >> 23))) ^ ((0x2127599BF4325C37
                                                                           * ((v10 | v11) ^ (v10 >> 23))) >> 47)) << 21);
            unint64_t v13 = 21 * ((265 * (v12 ^ (v12 >> 24))) ^ ((265 * (v12 ^ (v12 >> 24))) >> 14));
            unint64_t v14 = 2147483649u * (v13 ^ (v13 >> 28));
            unint64_t v15 = (uint64_t *)(v287
                            + 48
                            * (((((unsigned __int16)(v13 ^ (v13 >> 28)) >> 8) ^ ((-2147483647
                                                                                                 * (v13 ^ (v13 >> 28))) >> 16)) ^ ((-2147483647 * (v13 ^ (v13 >> 28))) >> 24)) & 0xF));
            unint64_t v16 = v14 >> 7;
            uint64_t v17 = v15[3];
            while (1)
            {
              unint64_t v18 = v16 & v17;
              uint64_t v19 = *(void *)(*v15 + v18);
              unint64_t v20 = ((v19 ^ (0x101010101010101 * (v14 & 0x7F))) - 0x101010101010101) & ~(v19 ^ (0x101010101010101
                                                                                                  * (v14 & 0x7F))) & 0x8080808080808080;
              if (v20) {
                break;
              }
LABEL_12:
              if ((v19 & (~v19 << 6) & 0x8080808080808080) != 0)
              {
                unint64_t v22 = sub_2D7ECC(v15, v14);
                unint64_t v24 = (unint64_t *)(v15[1] + 32 * v22);
                *unint64_t v24 = v9;
                v24[1] = 0;
                v24[2] = 0;
                v24[3] = 0;
                uint64_t v21 = v15[1];
                BOOL v3 = a3;
                goto LABEL_15;
              }
              v8 += 8;
              unint64_t v16 = v8 + v18;
            }
            uint64_t v21 = v15[1];
            while (1)
            {
              unint64_t v22 = (v18 + (__clz(__rbit64(v20)) >> 3)) & v17;
              unint64_t v23 = v21 + 32 * v22;
              if (__PAIR64__(*(unsigned __int16 *)(v23 + 4), *(_DWORD *)v23) == __PAIR64__(WORD2(v9), v9)
                && (HIWORD(v9) & 1) != (*(unsigned char *)(v23 + 6) == 0))
              {
                break;
              }
              v20 &= v20 - 1;
              if (!v20) {
                goto LABEL_12;
              }
            }
LABEL_15:
            unint64_t v25 = v21 + 32 * v22;
            unint64_t v26 = v25 + 8;
            int v28 = *(char **)(v25 + 16);
            unint64_t v27 = *(void *)(v25 + 24);
            if ((unint64_t)v28 >= v27) {
              break;
            }
            *(_DWORD *)int v28 = v285;
            *(void *)(v26 + 8) = v28 + 4;
            unsigned int v30 = v306;
            uint64_t v29 = v307;
            if (v306 >= v307) {
              goto LABEL_38;
            }
LABEL_5:
            *unsigned int v30 = v9;
            v306 = (char *)(v30 + 1);
            if (++v7 == v6) {
              goto LABEL_55;
            }
          }
          uint64_t v31 = *(char **)v26;
          uint64_t v32 = (uint64_t)&v28[-*(void *)v26];
          uint64_t v33 = v32 >> 2;
          unint64_t v34 = (v32 >> 2) + 1;
          if (v34 >> 62) {
            sub_2E00();
          }
          uint64_t v35 = v27 - (void)v31;
          if (v35 >> 1 > v34) {
            unint64_t v34 = v35 >> 1;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (!v36)
          {
            int v37 = 0;
            uint64_t v38 = (_DWORD *)(4 * v33);
            *(_DWORD *)(4 * v33) = v285;
            uint64_t v39 = 4 * v33 + 4;
            if (v28 == v31) {
              goto LABEL_35;
            }
LABEL_29:
            unint64_t v40 = v28 - 4 - v31;
            if (v40 < 0x2C) {
              goto LABEL_338;
            }
            if ((unint64_t)(v28 - v37 - v32) < 0x20) {
              goto LABEL_338;
            }
            uint64_t v41 = (v40 >> 2) + 1;
            uint64_t v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
            int v43 = &v28[-v42];
            uint64_t v38 = (_DWORD *)((char *)v38 - v42);
            unsigned int v44 = &v37[4 * v33 - 16];
            int v45 = v28 - 16;
            uint64_t v46 = v41 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v47 = *(_OWORD *)v45;
              *(v44 - 1) = *((_OWORD *)v45 - 1);
              *unsigned int v44 = v47;
              v44 -= 2;
              v45 -= 32;
              v46 -= 8;
            }
            while (v46);
            int v28 = v43;
            if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_338:
              do
              {
                int v48 = *((_DWORD *)v28 - 1);
                v28 -= 4;
                *--uint64_t v38 = v48;
              }
              while (v28 != v31);
            }
            goto LABEL_35;
          }
          if (v36 >> 62) {
            goto LABEL_326;
          }
          int v37 = operator new(4 * v36);
          uint64_t v38 = &v37[4 * v33];
          *uint64_t v38 = v285;
          uint64_t v39 = (uint64_t)(v38 + 1);
          if (v28 != v31) {
            goto LABEL_29;
          }
LABEL_35:
          *(void *)unint64_t v26 = v38;
          *(void *)(v26 + 8) = v39;
          *(void *)(v26 + 16) = &v37[4 * v36];
          if (v31) {
            operator delete(v31);
          }
          BOOL v3 = a3;
          *(void *)(v26 + 8) = v39;
          unsigned int v30 = v306;
          uint64_t v29 = v307;
          if (v306 < v307) {
            goto LABEL_5;
          }
LABEL_38:
          int v49 = v305;
          uint64_t v50 = ((char *)v30 - v305) >> 3;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v52 = v29 - v305;
          if (v52 >> 2 > v51) {
            unint64_t v51 = v52 >> 2;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          if (v53)
          {
            if (v53 >> 61) {
LABEL_326:
            }
              sub_188D718();
            uint64_t v54 = (char *)operator new(8 * v53);
            int v55 = &v54[8 * v50];
            *(void *)int v55 = v9;
            uint64_t v56 = (uint64_t)(v55 + 8);
            if (v30 == (void *)v49)
            {
LABEL_52:
              v305 = v55;
              v306 = (char *)v56;
              v307 = &v54[8 * v53];
              if (!v30) {
                goto LABEL_54;
              }
LABEL_53:
              operator delete(v30);
              goto LABEL_54;
            }
          }
          else
          {
            uint64_t v54 = 0;
            int v55 = (char *)(8 * v50);
            *(void *)(8 * v50) = v9;
            uint64_t v56 = 8 * v50 + 8;
            if (v30 == (void *)v49) {
              goto LABEL_52;
            }
          }
          do
          {
            int v57 = *((_DWORD *)v30-- - 2);
            int v58 = *(_DWORD *)((char *)v30 + 3);
            *((_DWORD *)v55 - 2) = v57;
            v55 -= 8;
            *(_DWORD *)(v55 + 3) = v58;
          }
          while (v30 != (void *)v49);
          unsigned int v30 = v305;
          v305 = v55;
          v306 = (char *)v56;
          v307 = &v54[8 * v53];
          if (v30) {
            goto LABEL_53;
          }
LABEL_54:
          BOOL v3 = a3;
          v306 = (char *)v56;
          ++v7;
        }
        while (v7 != v6);
LABEL_55:
        uint64_t v59 = a1;
        unint64_t v5 = *(void *)(a1 + 4072);
        LOBYTE(v292) = 0;
        uint64_t v60 = v282;
        if (v5 < *(void *)(a1 + 4080)) {
          goto LABEL_56;
        }
LABEL_59:
        unint64_t v5 = sub_2DC484(v284, (char *)&v292, v311, v60);
        *(void *)(v59 + 4072) = v5;
        uint64_t v4 = v60 + 24;
        if (v4 == v280) {
          goto LABEL_60;
        }
      }
      uint64_t v59 = a1;
      LOBYTE(v292) = 0;
      uint64_t v60 = v282;
      if (v5 >= *(void *)(a1 + 4080)) {
        goto LABEL_59;
      }
LABEL_56:
      sub_2D1C78(v5, 0, v311[0], v60);
      v5 += 32;
      *(void *)(v59 + 4072) = v5;
      *(void *)(v59 + 4072) = v5;
      uint64_t v4 = v60 + 24;
    }
    while (v4 != v280);
LABEL_60:
    unsigned int v61 = v305;
    if (v306 != v305)
    {
      uint64_t v62 = 0;
      uint64_t v277 = v59 + 4088;
      uint64_t v278 = v59 + 2528;
      v286 = v3 + 2;
      do
      {
        uint64_t v63 = 0;
        uint64_t v279 = v62;
        unint64_t v64 = *(void *)&v61[8 * v62];
        unint64_t v298 = v64;
        unint64_t v65 = (v64 >> 16) & 0xFFFF0000 | (v64 << 32);
        BOOL v66 = (v64 & 0xFF000000000000) == 0;
        unint64_t v67 = ((0x2127599BF4325C37 * ((v65 | v66) ^ (v65 >> 23))) ^ ~((0x2127599BF4325C37
                                                                       * ((v65 | v66) ^ (v65 >> 23))) >> 47))
            + (((0x2127599BF4325C37 * ((v65 | v66) ^ (v65 >> 23))) ^ ((0x2127599BF4325C37
                                                                       * ((v65 | v66) ^ (v65 >> 23))) >> 47)) << 21);
        unint64_t v68 = 21 * ((265 * (v67 ^ (v67 >> 24))) ^ ((265 * (v67 ^ (v67 >> 24))) >> 14));
        unint64_t v69 = 2147483649u * (v68 ^ (v68 >> 28));
        unint64_t v70 = (uint64_t *)(v278
                        + 48
                        * (((((unsigned __int16)(v68 ^ (v68 >> 28)) >> 8) ^ ((-2147483647
                                                                                             * (v68 ^ (v68 >> 28))) >> 16)) ^ ((-2147483647 * (v68 ^ (v68 >> 28))) >> 24)) & 0xF));
        unint64_t v71 = v69 >> 7;
        long long v296 = 0u;
        long long v297 = 0u;
        long long v294 = 0u;
        long long v295 = 0u;
        long long v292 = 0u;
        long long v293 = 0u;
        uint64_t v72 = v70[3];
        while (1)
        {
          unint64_t v73 = v71 & v72;
          uint64_t v74 = *(void *)(*v70 + v73);
          unint64_t v75 = ((v74 ^ (0x101010101010101 * (v69 & 0x7F))) - 0x101010101010101) & ~(v74 ^ (0x101010101010101
                                                                                              * (v69 & 0x7F))) & 0x8080808080808080;
          if (v75) {
            break;
          }
LABEL_69:
          if ((v74 & (~v74 << 6) & 0x8080808080808080) != 0)
          {
            unint64_t v77 = sub_2D8940(v70, v69);
            uint64_t v158 = v70[1] + 104 * v77;
            *(void *)uint64_t v158 = v298;
            *(_OWORD *)(v158 + 8) = 0u;
            *(_OWORD *)(v158 + 24) = 0u;
            *(_OWORD *)(v158 + 40) = 0u;
            *(_OWORD *)(v158 + 56) = 0u;
            *(_OWORD *)(v158 + 72) = 0u;
            *(_OWORD *)(v158 + 88) = 0u;
            uint64_t v76 = v70[1];
            unint64_t v159 = v76 + 104 * v77;
            v160 = *(void **)(v159 + 8);
            unint64_t v81 = (void *)(v159 + 8);
            int v80 = v160;
            if (!v160) {
              goto LABEL_73;
            }
LABEL_72:
            v81[1] = v80;
            operator delete(v80);
            *unint64_t v81 = 0;
            v81[1] = 0;
            v81[2] = 0;
            goto LABEL_73;
          }
          v63 += 8;
          unint64_t v71 = v63 + v73;
        }
        uint64_t v76 = v70[1];
        while (1)
        {
          unint64_t v77 = (v73 + (__clz(__rbit64(v75)) >> 3)) & v72;
          unint64_t v78 = v76 + 104 * v77;
          if (__PAIR64__(*(unsigned __int16 *)(v78 + 4), *(_DWORD *)v78) == __PAIR64__(WORD2(v64), v64)
            && (HIWORD(v64) & 1) != (*(unsigned char *)(v78 + 6) == 0))
          {
            break;
          }
          v75 &= v75 - 1;
          if (!v75) {
            goto LABEL_69;
          }
        }
        unint64_t v79 = v76 + 104 * v77;
        int v82 = *(void **)(v79 + 8);
        unint64_t v81 = (void *)(v79 + 8);
        int v80 = v82;
        if (v82) {
          goto LABEL_72;
        }
LABEL_73:
        *unint64_t v81 = 0;
        v81[1] = 0;
        v81[2] = 0;
        unint64_t v83 = v76 + 104 * v77;
        unsigned int v86 = *(void **)(v83 + 32);
        int v85 = (void *)(v83 + 32);
        int v84 = v86;
        if (v86)
        {
          *(void *)(v76 + 104 * v77 + 40) = v84;
          operator delete(v84);
          void *v85 = 0;
          v85[1] = 0;
          v85[2] = 0;
        }
        void *v85 = 0;
        v85[1] = 0;
        v85[2] = 0;
        unint64_t v87 = v76 + 104 * v77;
        uint64_t v90 = *(void **)(v87 + 56);
        int v89 = (void *)(v87 + 56);
        v88 = v90;
        if (v90)
        {
          *(void *)(v76 + 104 * v77 + 64) = v88;
          operator delete(v88);
          *int v89 = 0;
          v89[1] = 0;
          v89[2] = 0;
        }
        *int v89 = 0;
        v89[1] = 0;
        v89[2] = 0;
        unint64_t v91 = v76 + 104 * v77;
        unsigned int v94 = *(void **)(v91 + 80);
        unsigned int v93 = (void *)(v91 + 80);
        int v92 = v94;
        if (v94)
        {
          *(void *)(v76 + 104 * v77 + 88) = v92;
          operator delete(v92);
          void *v93 = 0;
          v93[1] = 0;
          v93[2] = 0;
        }
        void *v93 = 0;
        v93[1] = 0;
        v93[2] = 0;
        sub_2DC0DC(v277, &v298, &v298);
        sub_2D6A20(v287, &v298, &v292);
        if (!(void)v292) {
          goto LABEL_147;
        }
        sub_2D7D20(v287, &v298, (uint64_t)&v292);
        long long v95 = *(unsigned int **)(*((void *)&v293 + 1) + 8);
        int v96 = *(unsigned int **)(*((void *)&v293 + 1) + 16);
        if (v95 == v96) {
          goto LABEL_147;
        }
        unint64_t v97 = v303;
        do
        {
          while (1)
          {
            uint64_t v98 = *v95;
            BOOL v99 = v97;
            if (v302 != v97)
            {
              BOOL v99 = v302;
              while (*(_DWORD *)v99 != v98)
              {
                v99 += 4;
                if (v99 == v97)
                {
                  BOOL v99 = v97;
                  break;
                }
              }
            }
            if (v99 == v97) {
              break;
            }
            if (++v95 == v96) {
              goto LABEL_147;
            }
          }
          uint64_t v100 = *v284;
          uint64_t v101 = *v284 + 32 * v98;
          uint64_t v102 = *(unint64_t **)(v101 + 8);
          int v103 = *(unint64_t **)(v101 + 16);
          if (v102 == v103) {
            goto LABEL_120;
          }
          int v104 = v306;
          do
          {
            unint64_t v106 = *v102;
            int64_t v107 = v305;
            BOOL v108 = v104;
            if (v305 != v104)
            {
              BOOL v108 = v305;
              while (__PAIR64__(*((unsigned __int16 *)v108 + 2), *(_DWORD *)v108) != __PAIR64__(WORD2(v106), v106)
                   || (HIWORD(v106) & 1) == (v108[6] == 0))
              {
                v108 += 8;
                if (v108 == v104)
                {
                  BOOL v108 = v104;
                  break;
                }
              }
            }
            if (v108 == v104)
            {
              if (v104 < v307)
              {
                *(void *)int v104 = v106;
                uint64_t v105 = v104 + 8;
                goto LABEL_92;
              }
              uint64_t v109 = (v104 - v305) >> 3;
              unint64_t v110 = v109 + 1;
              if ((unint64_t)(v109 + 1) >> 61) {
                sub_2E00();
              }
              uint64_t v111 = v307 - v305;
              if ((v307 - v305) >> 2 > v110) {
                unint64_t v110 = v111 >> 2;
              }
              if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v112 = v110;
              }
              if (v112)
              {
                if (v112 >> 61) {
                  goto LABEL_330;
                }
                unsigned int v113 = (char *)operator new(8 * v112);
                v114 = &v113[8 * v109];
                *(void *)v114 = v106;
                uint64_t v105 = v114 + 8;
                if (v107 == v104)
                {
LABEL_117:
                  v305 = v114;
                  v306 = v105;
                  v307 = &v113[8 * v112];
                  if (v104) {
                    goto LABEL_118;
                  }
                  goto LABEL_92;
                }
              }
              else
              {
                unsigned int v113 = 0;
                v114 = (char *)(8 * v109);
                uint64_t v115 = (unint64_t *)(8 * v109);
                *uint64_t v115 = v106;
                uint64_t v105 = (char *)(v115 + 1);
                if (v107 == v104) {
                  goto LABEL_117;
                }
              }
              do
              {
                int v116 = *((_DWORD *)v104 - 2);
                v104 -= 8;
                int v117 = *(_DWORD *)(v104 + 3);
                *((_DWORD *)v114 - 2) = v116;
                v114 -= 8;
                *(_DWORD *)(v114 + 3) = v117;
              }
              while (v104 != v107);
              int v104 = v305;
              v305 = v114;
              v306 = v105;
              v307 = &v113[8 * v112];
              if (v104) {
LABEL_118:
              }
                operator delete(v104);
LABEL_92:
              v306 = v105;
              int v104 = v105;
            }
            ++v102;
          }
          while (v102 != v103);
          uint64_t v100 = *v284;
LABEL_120:
          int v118 = (uint64_t *)(v100 + 32 * v98);
          int64_t v119 = (char *)a3[1];
          if (v119 >= a3[2])
          {
            a3[1] = sub_2DC630(a3, v118);
            unint64_t v127 = v303;
            uint64_t v126 = v304;
            if (v303 >= v304) {
              goto LABEL_125;
            }
LABEL_136:
            *(_DWORD *)unint64_t v127 = v98;
            unint64_t v97 = v127 + 4;
            goto LABEL_146;
          }
          uint64_t v120 = *v118;
          *((void *)v119 + 1) = 0;
          *(void *)int64_t v119 = v120;
          *((void *)v119 + 2) = 0;
          *((void *)v119 + 3) = 0;
          v122 = (unsigned char *)v118[1];
          int v121 = (unsigned char *)v118[2];
          uint64_t v123 = v121 - v122;
          if (v121 != v122)
          {
            if (v123 < 0) {
              sub_2E00();
            }
            int v124 = (char *)operator new(v121 - v122);
            *((void *)v119 + 1) = v124;
            *((void *)v119 + 2) = v124;
            uint64_t v125 = &v124[8 * (v123 >> 3)];
            *((void *)v119 + 3) = v125;
            memcpy(v124, v122, v123 - 1);
            *((void *)v119 + 2) = v125;
          }
          a3[1] = v119 + 32;
          a3[1] = v119 + 32;
          unint64_t v127 = v303;
          uint64_t v126 = v304;
          if (v303 < v304) {
            goto LABEL_136;
          }
LABEL_125:
          v128 = v302;
          uint64_t v129 = (v127 - v302) >> 2;
          unint64_t v130 = v129 + 1;
          if ((unint64_t)(v129 + 1) >> 62) {
            sub_2E00();
          }
          uint64_t v131 = v126 - v302;
          if (v131 >> 1 > v130) {
            unint64_t v130 = v131 >> 1;
          }
          if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v132 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v132 = v130;
          }
          if (!v132)
          {
            int v133 = 0;
            int v134 = (char *)(4 * v129);
            *(_DWORD *)(4 * v129) = v98;
            unint64_t v97 = (char *)(4 * v129 + 4);
            if (v127 == v128) {
              goto LABEL_144;
            }
LABEL_138:
            unint64_t v135 = v127 - 4 - v128;
            if (v135 < 0x2C) {
              goto LABEL_339;
            }
            if ((unint64_t)(v128 - v133) < 0x20) {
              goto LABEL_339;
            }
            uint64_t v136 = (v135 >> 2) + 1;
            uint64_t v137 = 4 * (v136 & 0x7FFFFFFFFFFFFFF8);
            int v138 = &v127[-v137];
            v134 -= v137;
            int v139 = &v133[4 * v129 - 16];
            int v140 = v127 - 16;
            uint64_t v141 = v136 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v142 = *(_OWORD *)v140;
              *(v139 - 1) = *((_OWORD *)v140 - 1);
              *int v139 = v142;
              v139 -= 2;
              v140 -= 32;
              v141 -= 8;
            }
            while (v141);
            unint64_t v127 = v138;
            if (v136 != (v136 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_339:
              do
              {
                int v143 = *((_DWORD *)v127 - 1);
                v127 -= 4;
                *((_DWORD *)v134 - 1) = v143;
                v134 -= 4;
              }
              while (v127 != v128);
            }
            goto LABEL_144;
          }
          if (v132 >> 62) {
LABEL_330:
          }
            sub_188D718();
          int v133 = operator new(4 * v132);
          int v134 = &v133[4 * v129];
          *(_DWORD *)int v134 = v98;
          unint64_t v97 = v134 + 4;
          if (v127 != v128) {
            goto LABEL_138;
          }
LABEL_144:
          v302 = v134;
          v304 = &v133[4 * v132];
          if (v128) {
            operator delete(v128);
          }
LABEL_146:
          v303 = v97;
          ++v95;
        }
        while (v95 != v96);
LABEL_147:
        uint64_t v144 = *(void *)a1;
        unint64_t v145 = v298;
        v309 = v308;
        v146 = (int *)sub_2D5D58(v144, v298 & 0xFFFFFFFFFFFFLL);
        v147 = (unsigned __int16 *)((char *)v146 - *v146);
        if (*v147 >= 0x21u)
        {
          uint64_t v148 = v147[16];
          if (v148)
          {
            v149 = (unsigned int *)((char *)v146 + v148 + *(unsigned int *)((char *)v146 + v148));
            unint64_t v150 = *v149;
            v151 = v308;
            if (v150 > (v310 - v308) >> 3)
            {
              v152 = v309;
              v153 = (char *)operator new(8 * v150);
              uint64_t v154 = v152 - v151;
              v155 = &v153[(v152 - v151) & 0xFFFFFFFFFFFFFFF8];
              v156 = v155;
              if (v152 != v151)
              {
                unint64_t v157 = v152 - 8 - v151;
                if (v157 < 0x58)
                {
                  v156 = &v153[(v152 - v151) & 0xFFFFFFFFFFFFFFF8];
                  goto LABEL_159;
                }
                v156 = &v153[(v152 - v151) & 0xFFFFFFFFFFFFFFF8];
                if ((unint64_t)(&v152[-(v154 & 0xFFFFFFFFFFFFFFF8)] - v153) < 0x20) {
                  goto LABEL_340;
                }
                uint64_t v161 = v154 >> 3;
                uint64_t v162 = (v157 >> 3) + 1;
                uint64_t v163 = 8 * (v162 & 0x3FFFFFFFFFFFFFFCLL);
                v164 = &v152[-v163];
                v156 = &v155[-v163];
                v165 = &v153[8 * v161 - 16];
                v166 = (long long *)(v152 - 16);
                uint64_t v167 = v162 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v168 = *v166;
                  *((_OWORD *)v165 - 1) = *(v166 - 1);
                  *(_OWORD *)v165 = v168;
                  v165 -= 32;
                  v166 -= 2;
                  v167 -= 4;
                }
                while (v167);
                v152 = v164;
                if (v162 != (v162 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_340:
                  do
                  {
LABEL_159:
                    uint64_t v169 = *((void *)v152 - 1);
                    v152 -= 8;
                    *((void *)v156 - 1) = v169;
                    v156 -= 8;
                  }
                  while (v152 != v151);
                }
              }
              v308 = v156;
              v309 = v155;
              v310 = &v153[8 * v150];
              if (v151) {
                operator delete(v151);
              }
            }
            unsigned int v172 = *v149;
            v171 = v149 + 1;
            uint64_t v170 = v172;
            if (v172)
            {
              v281 = &v171[2 * v170];
              v283 = (unsigned char *)(v144 + 7774);
              do
              {
                uint64_t v174 = *v171;
                uint64_t v173 = v171[1];
                if (*v283)
                {
                  if (!sub_2AB7E4(*(void *)(v144 + 3880))) {
                    goto LABEL_165;
                  }
                  v175 = (int *)sub_2DBC9C(v144, v174 | (v173 << 32));
                  v176 = (unsigned __int16 *)((char *)v175 - *v175);
                  if (*v176 < 7u) {
                    goto LABEL_165;
                  }
                  uint64_t v177 = v176[3];
                  if (!v177) {
                    goto LABEL_165;
                  }
                  uint64_t v178 = *(unsigned int *)((char *)v175 + v177);
                  uint64_t v179 = *(unsigned int *)((char *)v175 + v177 + v178);
                  if (v179 && *v283)
                  {
                    uint64_t v180 = 8 * v179;
                    v181 = (unsigned __int16 *)((char *)v175 + v178 + v177 + 8);
                    do
                    {
                      if (*v283)
                      {
                        uint64_t v182 = *v181;
                        uint64_t v183 = *((unsigned int *)v181 - 1);
                        v184 = sub_290DEC(v144 + 3896, *((_DWORD *)v181 - 1), 1);
                        if (!v184) {
                          goto LABEL_165;
                        }
                        v185 = &v184[-*(int *)v184];
                        if (*(unsigned __int16 *)v185 < 5u) {
                          goto LABEL_165;
                        }
                        uint64_t v186 = *((unsigned __int16 *)v185 + 2);
                        if (!v186
                          || *(_DWORD *)&v184[v186 + *(unsigned int *)&v184[v186]] <= v182
                          || !sub_295DB4(v144, v183 | (v182 << 32)))
                        {
                          goto LABEL_165;
                        }
                      }
                      v181 += 4;
                      v180 -= 8;
                    }
                    while (v180);
                  }
                }
                v187 = (int *)sub_2DBC9C(v144, v174 | (v173 << 32));
                v188 = (unsigned int *)((char *)v187 + *(unsigned __int16 *)((char *)v187 - *v187 + 6));
                v189 = (unsigned int *)((char *)v188 + *v188);
                unsigned int v192 = *v189;
                v190 = v189 + 1;
                uint64_t v191 = v192;
                if (v192)
                {
                  uint64_t v193 = 8 * v191;
                  while ((v145 & 0xFFFFFFFFFFFFLL) != (*v190 & 0xFFFFFFFFFFFFLL)
                       || (HIWORD(v145) & 1) == ((*v190 & 0xFF000000000000) != 0))
                  {
                    ++v190;
                    v193 -= 8;
                    if (!v193) {
                      goto LABEL_165;
                    }
                  }
                  int v194 = *(unsigned __int8 *)(a1 + 2520);
                  v195 = (int *)sub_2DBC9C(*(void *)a1, v174 | (v173 << 32));
                  if (v194 == 3)
                  {
                    v198 = (unsigned __int16 *)((char *)v195 - *v195);
                    if (*v198 < 0xFu) {
                      goto LABEL_165;
                    }
                    unsigned int v199 = v198[7];
                    if (!v199 || (*((unsigned char *)v195 + v199) & 4) == 0) {
                      goto LABEL_165;
                    }
                  }
                  else
                  {
                    if (v194) {
                      goto LABEL_165;
                    }
                    v196 = (unsigned __int16 *)((char *)v195 - *v195);
                    if (*v196 >= 0xFu)
                    {
                      unsigned int v197 = v196[7];
                      if (v197)
                      {
                        if ((*((unsigned char *)v195 + v197) & 1) == 0) {
                          goto LABEL_165;
                        }
                      }
                    }
                  }
                  v200 = (int *)sub_2DBC9C(*(void *)a1, v174 | (v173 << 32));
                  v201 = (unsigned __int16 *)((char *)v200 - *v200);
                  unsigned int v202 = *v201;
                  if (v202 < 5) {
                    goto LABEL_207;
                  }
                  if (!v201[2]) {
                    goto LABEL_341;
                  }
                  int v203 = *((unsigned __int8 *)v200 + v201[2]);
                  if ((v203 - 2) < 4) {
                    goto LABEL_165;
                  }
                  if (v203 == 1)
                  {
                    if (v202 < 9 || (!v201[4] ? (char v204 = 2) : (char v204 = 3), (v204 & 1) == 0))
                    {
LABEL_207:
                      v205 = v299;
                      if (v299 != v300)
                      {
                        while (*(_DWORD *)v205 != v174 || *((_DWORD *)v205 + 1) != v173)
                        {
                          if (++v205 == v300) {
                            goto LABEL_213;
                          }
                        }
                      }
                      if (v205 == v300)
                      {
LABEL_213:
                        *(void *)&long long v292 = *(void *)v171;
                        sub_29603C((void **)&v308, &v292);
                      }
                    }
                  }
                  else
                  {
LABEL_341:
                    if (v202 < 9 || !v201[4]) {
                      goto LABEL_207;
                    }
                  }
                }
LABEL_165:
                v171 += 2;
              }
              while (v171 != v281);
            }
          }
        }
        v206 = (unint64_t *)v308;
        v207 = (unint64_t *)v309;
        v208 = (uint64_t *)a1;
        if (v308 != v309)
        {
          while (1)
          {
            unint64_t v209 = *v206;
            uint64_t v210 = *v208;
            v291 = 0;
            __n128 __p = 0uLL;
            v211 = (int *)sub_2DBC9C(v210, v209);
            v212 = (unsigned __int16 *)((char *)v211 - *v211);
            if (*v212 >= 7u)
            {
              uint64_t v213 = v212[3];
              if (v213)
              {
                v214 = (unsigned int *)((char *)v211 + v213 + *(unsigned int *)((char *)v211 + v213));
                uint64_t v215 = *v214;
                if (v215)
                {
                  uint64_t v216 = 8 * v215;
                  v217 = (char *)operator new(8 * v215);
                  __p.n128_u64[0] = (unint64_t)v217;
                  __p.n128_u64[1] = (unint64_t)v217;
                  v291 = &v217[8 * v215];
                  v218 = (uint64_t *)(v214 + 1);
                  do
                  {
                    uint64_t v219 = *v218;
                    unint64_t v220 = HIDWORD(*v218);
                    LODWORD(v292) = *v218;
                    WORD2(v292) = v220;
                    BYTE6(v292) = (v219 & 0xFF000000000000) == 0;
                    v217 = sub_2D6254(__p.n128_u64, v217, (int *)&v292) + 8;
                    ++v218;
                    v216 -= 8;
                  }
                  while (v216);
                }
              }
            }
            unint64_t v222 = __p.n128_u64[1];
            v221 = (unint64_t *)__p.n128_u64[0];
            if (__p.n128_u64[0] != __p.n128_u64[1])
            {
              v223 = v306;
              while (2)
              {
                unint64_t v225 = *v221;
                v226 = v305;
                v227 = v223;
                if (v305 != v223)
                {
                  v227 = v305;
                  while (__PAIR64__(*((unsigned __int16 *)v227 + 2), *(_DWORD *)v227) != __PAIR64__(WORD2(v225), v225)
                       || (HIWORD(v225) & 1) == (v227[6] == 0))
                  {
                    v227 += 8;
                    if (v227 == v223)
                    {
                      v227 = v223;
                      break;
                    }
                  }
                }
                if (v227 != v223) {
                  goto LABEL_226;
                }
                if (v223 < v307)
                {
                  *(void *)v223 = v225;
                  v224 = v223 + 8;
                  goto LABEL_225;
                }
                uint64_t v228 = (v223 - v305) >> 3;
                unint64_t v229 = v228 + 1;
                if ((unint64_t)(v228 + 1) >> 61) {
                  sub_2E00();
                }
                uint64_t v230 = v307 - v305;
                if ((v307 - v305) >> 2 > v229) {
                  unint64_t v229 = v230 >> 2;
                }
                if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v231 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v231 = v229;
                }
                if (v231)
                {
                  if (v231 >> 61) {
                    goto LABEL_325;
                  }
                  v232 = (char *)operator new(8 * v231);
                  v233 = &v232[8 * v228];
                  *(void *)v233 = v225;
                  v224 = v233 + 8;
                  if (v226 == v223)
                  {
LABEL_250:
                    v305 = v233;
                    v306 = v224;
                    v307 = &v232[8 * v231];
                    if (v223) {
                      goto LABEL_251;
                    }
                    goto LABEL_225;
                  }
                }
                else
                {
                  v232 = 0;
                  v233 = (char *)(8 * v228);
                  v234 = (unint64_t *)(8 * v228);
                  unint64_t *v234 = v225;
                  v224 = (char *)(v234 + 1);
                  if (v226 == v223) {
                    goto LABEL_250;
                  }
                }
                do
                {
                  int v235 = *((_DWORD *)v223 - 2);
                  v223 -= 8;
                  int v236 = *(_DWORD *)(v223 + 3);
                  *((_DWORD *)v233 - 2) = v235;
                  v233 -= 8;
                  *(_DWORD *)(v233 + 3) = v236;
                }
                while (v223 != v226);
                v223 = v305;
                v305 = v233;
                v306 = v224;
                v307 = &v232[8 * v231];
                if (v223) {
LABEL_251:
                }
                  operator delete(v223);
LABEL_225:
                v306 = v224;
                v223 = v224;
LABEL_226:
                if (++v221 == (unint64_t *)v222) {
                  break;
                }
                continue;
              }
            }
            v237 = (int *)sub_2DBC9C(*(void *)a1, v209);
            v238 = (unsigned __int16 *)((char *)v237 - *v237);
            unsigned int v239 = *v238;
            if (v239 < 5) {
              goto LABEL_289;
            }
            if (!v238[2]) {
              break;
            }
            int v240 = *((unsigned __int8 *)v237 + v238[2]);
            if ((v240 - 2) < 4)
            {
              char v241 = 5;
              unint64_t v243 = (unint64_t)a3[1];
              unint64_t v242 = (unint64_t)a3[2];
              if (v243 < v242) {
                goto LABEL_290;
              }
              goto LABEL_256;
            }
            if (v240 != 1) {
              break;
            }
            if (v239 < 9)
            {
              char v241 = 2;
              unint64_t v243 = (unint64_t)a3[1];
              unint64_t v242 = (unint64_t)a3[2];
              if (v243 < v242) {
                goto LABEL_290;
              }
            }
            else
            {
              if (v238[4]) {
                char v241 = 3;
              }
              else {
                char v241 = 2;
              }
              unint64_t v243 = (unint64_t)a3[1];
              unint64_t v242 = (unint64_t)a3[2];
              if (v243 < v242)
              {
LABEL_290:
                sub_2D1D18(v243, v241, v311[0], &__p);
                a3[1] = (void *)(v243 + 32);
                a3[1] = (void *)(v243 + 32);
                v259 = v300;
                v258 = v301;
                if (v300 < (unint64_t *)v301) {
                  goto LABEL_278;
                }
                goto LABEL_291;
              }
            }
LABEL_256:
            uint64_t v244 = (uint64_t)(v243 - (void)*a3) >> 5;
            if ((unint64_t)(v244 + 1) >> 59) {
              sub_2E00();
            }
            uint64_t v245 = v242 - (void)*a3;
            uint64_t v246 = v245 >> 4;
            if (v245 >> 4 <= (unint64_t)(v244 + 1)) {
              uint64_t v246 = v244 + 1;
            }
            if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v247 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v247 = v246;
            }
            *(void *)&long long v294 = v286;
            if (v247)
            {
              if (v247 >> 59) {
                sub_188D718();
              }
              v248 = (char *)operator new(32 * v247);
            }
            else
            {
              v248 = 0;
            }
            *(void *)&long long v292 = v248;
            *((void *)&v292 + 1) = &v248[32 * v244];
            *(void *)&long long v293 = *((void *)&v292 + 1);
            *((void *)&v293 + 1) = &v248[32 * v247];
            sub_2D1D18(*((uint64_t *)&v292 + 1), v241, v311[0], &__p);
            uint64_t v249 = *((void *)&v292 + 1);
            v250 = (char *)(v293 + 32);
            v251 = (char *)*a3;
            v252 = (char *)a3[1];
            if (v252 == *a3)
            {
              *a3 = (void *)*((void *)&v292 + 1);
              a3[1] = v250;
              a3[2] = (void *)*((void *)&v293 + 1);
            }
            else
            {
              uint64_t v253 = 0;
              do
              {
                uint64_t v254 = v249 + v253;
                v255 = &v252[v253];
                *(void *)(v254 - 32) = *(void *)&v252[v253 - 32];
                *(void *)(v254 - 24) = 0;
                *(void *)(v254 - 16) = 0;
                *(void *)(v254 - 8) = 0;
                *(_OWORD *)(v254 - 24) = *(_OWORD *)&v252[v253 - 24];
                *(void *)(v254 - 8) = *(void *)&v252[v253 - 8];
                *((void *)v255 - 3) = 0;
                *((void *)v255 - 2) = 0;
                *((void *)v255 - 1) = 0;
                v253 -= 32;
              }
              while (&v252[v253] != v251);
              v252 = (char *)*a3;
              v256 = (char *)a3[1];
              *a3 = (void *)(v249 + v253);
              a3[1] = v250;
              a3[2] = (void *)*((void *)&v293 + 1);
              while (v256 != v252)
              {
                v257 = (void *)*((void *)v256 - 3);
                if (v257)
                {
                  *((void *)v256 - 2) = v257;
                  operator delete(v257);
                }
                v256 -= 32;
              }
            }
            if (v252) {
              operator delete(v252);
            }
            a3[1] = v250;
            v259 = v300;
            v258 = v301;
            if (v300 < (unint64_t *)v301)
            {
LABEL_278:
              unint64_t *v259 = v209;
              uint64_t v260 = (uint64_t)(v259 + 1);
              goto LABEL_311;
            }
LABEL_291:
            v261 = v299;
            uint64_t v262 = v259 - v299;
            unint64_t v263 = v262 + 1;
            if ((unint64_t)(v262 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v264 = v258 - (char *)v299;
            if (v264 >> 2 > v263) {
              unint64_t v263 = v264 >> 2;
            }
            if ((unint64_t)v264 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v265 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v265 = v263;
            }
            if (v265)
            {
              if (v265 >> 61) {
LABEL_325:
              }
                sub_188D718();
              v266 = operator new(8 * v265);
              v267 = (unint64_t *)&v266[8 * v262];
              unint64_t *v267 = v209;
              uint64_t v260 = (uint64_t)(v267 + 1);
              if (v259 != v261)
              {
LABEL_300:
                unint64_t v268 = (char *)(v259 - 1) - (char *)v261;
                if (v268 < 0x58) {
                  goto LABEL_342;
                }
                if ((unint64_t)((char *)v261 - v266) < 0x20) {
                  goto LABEL_342;
                }
                uint64_t v269 = (v268 >> 3) + 1;
                uint64_t v270 = 8 * (v269 & 0x3FFFFFFFFFFFFFFCLL);
                v271 = &v259[v270 / 0xFFFFFFFFFFFFFFF8];
                v267 = (unint64_t *)((char *)v267 - v270);
                v272 = &v266[8 * v262 - 16];
                v273 = v259 - 2;
                uint64_t v274 = v269 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v275 = *(_OWORD *)v273;
                  *(v272 - 1) = *((_OWORD *)v273 - 1);
                  _OWORD *v272 = v275;
                  v272 -= 2;
                  v273 -= 4;
                  v274 -= 4;
                }
                while (v274);
                v259 = v271;
                if (v269 != (v269 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_342:
                  do
                  {
                    unint64_t v276 = *--v259;
                    *--v267 = v276;
                  }
                  while (v259 != v261);
                }
                v259 = v299;
                v299 = v267;
                v301 = &v266[8 * v265];
                if (!v259) {
                  goto LABEL_311;
                }
LABEL_310:
                operator delete(v259);
                goto LABEL_311;
              }
            }
            else
            {
              v266 = 0;
              v267 = (unint64_t *)(8 * v262);
              *(void *)(8 * v262) = v209;
              uint64_t v260 = 8 * v262 + 8;
              if (v259 != v261) {
                goto LABEL_300;
              }
            }
            v299 = v267;
            v301 = &v266[8 * v265];
            if (v259) {
              goto LABEL_310;
            }
LABEL_311:
            v208 = (uint64_t *)a1;
            v300 = (unint64_t *)v260;
            if (__p.n128_u64[0])
            {
              __p.n128_u64[1] = __p.n128_u64[0];
              operator delete((void *)__p.n128_u64[0]);
            }
            if (++v206 == v207) {
              goto LABEL_62;
            }
          }
          if (v239 >= 9)
          {
            char v241 = v238[4] != 0;
            unint64_t v243 = (unint64_t)a3[1];
            unint64_t v242 = (unint64_t)a3[2];
            if (v243 < v242) {
              goto LABEL_290;
            }
            goto LABEL_256;
          }
LABEL_289:
          char v241 = 0;
          unint64_t v243 = (unint64_t)a3[1];
          unint64_t v242 = (unint64_t)a3[2];
          if (v243 < v242) {
            goto LABEL_290;
          }
          goto LABEL_256;
        }
LABEL_62:
        uint64_t v62 = v279 + 1;
        unsigned int v61 = v305;
      }
      while (v279 + 1 < (unint64_t)((v306 - v305) >> 3));
    }
  }
  if (v299) {
    operator delete(v299);
  }
  if (v302) {
    operator delete(v302);
  }
  if (v305)
  {
    v306 = v305;
    operator delete(v305);
  }
  if (v308)
  {
    v309 = v308;
    operator delete(v308);
  }
}

void sub_2DB478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  sub_22B700((uint64_t)&a23);
  unint64_t v26 = *(void **)(v24 - 192);
  if (v26)
  {
    *(void *)(v24 - 184) = v26;
    operator delete(v26);
    unint64_t v27 = *(void **)(v24 - 168);
    if (!v27)
    {
LABEL_3:
      int v28 = *(void **)(v24 - 144);
      if (!v28) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v27 = *(void **)(v24 - 168);
    if (!v27) {
      goto LABEL_3;
    }
  }
  *(void *)(v24 - 160) = v27;
  operator delete(v27);
  int v28 = *(void **)(v24 - 144);
  if (!v28)
  {
LABEL_4:
    uint64_t v29 = *(void **)(v24 - 120);
    if (!v29) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  *(void *)(v24 - 136) = v28;
  operator delete(v28);
  uint64_t v29 = *(void **)(v24 - 120);
  if (!v29)
  {
LABEL_5:
    sub_38358(v23);
    _Unwind_Resume(a1);
  }
LABEL_9:
  *(void *)(v24 - 112) = v29;
  operator delete(v29);
  sub_38358(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_2DB600(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  unint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(void *)(a1 + 56) = v6;
    operator delete(v6);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  unint64_t v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(void *)(a1 + 80) = v7;
    operator delete(v7);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  return a1;
}

void sub_2DB704(void *a1)
{
  sub_2D2670((uint64_t)(a1 + 316));
  uint64_t v2 = a1[509];
  uint64_t v3 = a1[508];
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
    }
    v2 -= 32;
  }
  a1[509] = v3;
  sub_2D49A4((uint64_t)(a1 + 412));
  if (a1[514])
  {
    unint64_t v5 = (void *)a1[513];
    if (v5)
    {
      do
      {
        unint64_t v6 = (void *)*v5;
        operator delete(v5);
        unint64_t v5 = v6;
      }
      while (v6);
    }
    a1[513] = 0;
    uint64_t v7 = a1[512];
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
        *(void *)(a1[511] + 8 * i) = 0;
    }
    a1[514] = 0;
  }
}

uint64_t sub_2DB7B4(uint64_t a1)
{
  return a1 + 4088;
}

char *sub_2DB7BC(uint64_t a1, uint64_t a2, int a3)
{
  double result = sub_2DB8E0(a1, a2, 1);
  if (result)
  {
    unint64_t v6 = &result[-*(int *)result];
    if (*(unsigned __int16 *)v6 >= 5u)
    {
      if (!*((_WORD *)v6 + 2)) {
        return 0;
      }
      uint64_t v7 = &result[*((unsigned __int16 *)v6 + 2) + *(unsigned int *)&result[*((unsigned __int16 *)v6 + 2)]];
      if (*(_DWORD *)v7 <= WORD2(a2)) {
        return 0;
      }
      uint64_t v8 = &v7[4 * WORD2(a2) + 4 + *(unsigned int *)&v7[4 * WORD2(a2) + 4]];
      unint64_t v9 = &v8[-*(int *)v8];
      unsigned int v10 = *(unsigned __int16 *)v9;
      if (a3 == 3)
      {
        if (v10 < 0x23) {
          return 0;
        }
        int v11 = *((unsigned __int16 *)v9 + 17);
        if (!v11) {
          return 0;
        }
      }
      else
      {
        if (v10 < 0x25) {
          return 0;
        }
        int v11 = *((unsigned __int16 *)v9 + 18);
        if (!v11) {
          return 0;
        }
      }
      unint64_t v12 = &v8[v11 + *(unsigned int *)&v8[v11]];
      unint64_t v13 = &v12[-*(int *)v12];
      unsigned int v14 = *(unsigned __int16 *)v13;
      if ((a2 & 0xFF000000000000) != 0)
      {
        if (v14 < 7) {
          return 0;
        }
        unsigned int v15 = *((unsigned __int16 *)v13 + 3);
        if (!v15) {
          return 0;
        }
      }
      else
      {
        if (v14 < 5) {
          return 0;
        }
        unsigned int v15 = *((unsigned __int16 *)v13 + 2);
        if (!v15) {
          return 0;
        }
      }
      return &v12[v15 + *(unsigned int *)&v12[v15]];
    }
    return 0;
  }
  return result;
}

char *sub_2DB8E0(uint64_t a1, unsigned int a2, int a3)
{
  int v24 = a3;
  unsigned int v25 = a2;
  v23[0] = &v24;
  v23[1] = (int *)&v25;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 784) == a2)
    {
      unsigned int v7 = 32;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 808) == a2)
    {
      unsigned int v7 = 33;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 832) == a2)
    {
      unsigned int v7 = 34;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 856) == a2)
    {
      unsigned int v7 = 35;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      unint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(a1 + 840);
    unint64_t v12 = *(void *)(a1 + 816);
    unint64_t v13 = *(void *)(a1 + 792);
    BOOL v14 = v13 < v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 792);
    }
    BOOL v15 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 816);
    }
    int v16 = 32 * v14;
    if (!v15) {
      int v16 = 33;
    }
    if (v11 >= v4) {
      unint64_t v17 = v4;
    }
    else {
      unint64_t v17 = *(void *)(a1 + 840);
    }
    unint64_t v18 = *(void *)(a1 + 864);
    if (v11 >= v4) {
      int v19 = v16;
    }
    else {
      int v19 = 34;
    }
    unint64_t v20 = (unsigned int *)sub_2AB884(v5, 8, a2, 1);
    unsigned int v21 = 35;
    if (v18 >= v17) {
      unsigned int v21 = v19;
    }
    uint64_t v22 = v6 + 24 * v21;
    *(_DWORD *)uint64_t v22 = v25;
    *(void *)(v22 + 8) = *(void *)(a1 + 3856);
    *(void *)(v22 + 16) = v20;
    if (v20) {
      return (char *)v20 + *v20;
    }
  }
LABEL_28:
  sub_2DBA70(v23);
  return 0;
}

uint64_t sub_2DBA70(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      unint64_t v9 = sub_736EC(8u);
      unsigned int v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_2DBBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

uint64_t sub_2DBC9C(uint64_t a1, unint64_t a2)
{
  unint64_t v16 = a2;
  uint64_t v3 = sub_290DEC(a1 + 3896, a2, 1);
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_2DBE08((unsigned int *)&v16, &v13);
    unsigned int v10 = std::string::insert(&v13, 0, "Sequence access could not find quad node for ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v10->__r_.__value_.__r.__words[2];
    long long v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v14);
  }
  unint64_t v4 = &v3[-*(int *)v3];
  if (*(unsigned __int16 *)v4 >= 9u && (uint64_t v5 = *((unsigned __int16 *)v4 + 4)) != 0)
  {
    long long v6 = &v3[v5 + *(unsigned int *)&v3[v5]];
    unint64_t v7 = a2;
  }
  else
  {
    long long v6 = 0;
    unint64_t v7 = a2;
  }
  return sub_2DBF74(v6, v7);
}

void sub_2DBDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2DBE08(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v10, *a1);
  unint64_t v4 = std::string::append(&v10, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1[1]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  long long v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v10.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
}

void sub_2DBF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2DBF74(_DWORD *a1, unint64_t a2)
{
  unint64_t v13 = a2;
  if (!a1 || *a1 <= HIDWORD(a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_2DBE08((unsigned int *)&v13, &v9);
    unint64_t v4 = std::string::insert(&v9, 0, "Flatbuffer vector requested index (object_index)");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    long long v6 = std::string::append(&v10, " is out of range");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v6->__r_.__value_.__r.__words[2];
    long long v11 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    long long v8 = (void *)sub_2F404((uint64_t)exception, &v11);
  }
  return (uint64_t)&a1[HIDWORD(a2) + 1] + a1[HIDWORD(a2) + 1];
}

void sub_2DC05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_2DC0DC(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = (*a2 >> 16) & 0xFFFF0000 | (*a2 << 32);
  unint64_t v8 = 0x2127599BF4325C37 * ((v7 | ((*a2 & 0xFF000000000000) == 0)) ^ (v7 >> 23));
  unint64_t v9 = v8 ^ (v8 >> 47);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8 ^ (v8 >> 47);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    std::string::size_type v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      unint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = v13[1];
            if (v14 == v9)
            {
              if (__PAIR64__(*((unsigned __int16 *)v13 + 10), *((_DWORD *)v13 + 4)) == __PAIR64__(WORD2(v6), v6)
                && (HIWORD(v6) & 1) != (*((unsigned char *)v13 + 22) == 0))
              {
                return v13;
              }
            }
            else if ((v14 & (v10 - 1)) != v3)
            {
              goto LABEL_26;
            }
            unint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_26;
            }
          }
        }
        do
        {
          unint64_t v16 = v13[1];
          if (v16 == v9)
          {
            if (__PAIR64__(*((unsigned __int16 *)v13 + 10), *((_DWORD *)v13 + 4)) == __PAIR64__(WORD2(v6), v6)
              && (HIWORD(v6) & 1) != (*((unsigned char *)v13 + 22) == 0))
            {
              return v13;
            }
          }
          else
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
            if (v16 != v3) {
              break;
            }
          }
          unint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_26:
  std::string v17 = operator new(0x18uLL);
  void *v17 = 0;
  v17[1] = v9;
  v17[2] = *a3;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (v10 && (float)(v19 * (float)v10) >= v18)
  {
    uint64_t v20 = *(void *)a1;
    unsigned int v21 = *(void **)(*(void *)a1 + 8 * v3);
    if (v21)
    {
LABEL_29:
      void *v17 = *v21;
LABEL_64:
      *unsigned int v21 = v17;
      goto LABEL_65;
    }
  }
  else
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v18 / v19);
    if (v23 <= v24) {
      size_t prime = v24;
    }
    else {
      size_t prime = v23;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_40;
    }
    if (prime < v10)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (prime <= v26) {
        size_t prime = v26;
      }
      if (prime < v10) {
LABEL_40:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v29 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v20 = *(void *)a1;
        unsigned int v21 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v21) {
          goto LABEL_29;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v20 = *(void *)a1;
        unsigned int v21 = *(void **)(*(void *)a1 + 8 * v9);
        if (v21) {
          goto LABEL_29;
        }
      }
    }
    else
    {
      unint64_t v3 = v29 & v9;
      uint64_t v20 = *(void *)a1;
      unsigned int v21 = *(void **)(*(void *)a1 + 8 * (v29 & v9));
      if (v21) {
        goto LABEL_29;
      }
    }
  }
  void *v17 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v17;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*v17)
  {
    unint64_t v30 = *(void *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v30 >= v10) {
        v30 %= v10;
      }
    }
    else
    {
      v30 &= v10 - 1;
    }
    unsigned int v21 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_64;
  }
LABEL_65:
  ++*(void *)(a1 + 24);
  return v17;
}

void sub_2DC470(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2DC484(uint64_t *a1, char *a2, int *a3, uint64_t a4)
{
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v10 = a1[2] - *a1;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  if (v11)
  {
    if (v11 >> 59) {
      sub_188D718();
    }
    std::string::size_type v12 = (char *)operator new(32 * v11);
  }
  else
  {
    std::string::size_type v12 = 0;
  }
  uint64_t v22 = (uint64_t)&v12[32 * v5];
  unint64_t v23 = &v12[32 * v11];
  sub_2D1C78(v22, *a2, *a3, a4);
  uint64_t v13 = v22 + 32;
  uint64_t v14 = (char *)*a1;
  std::string::size_type v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v22;
    a1[1] = v13;
    a1[2] = (uint64_t)v23;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = v22 + v16;
      float v18 = &v15[v16];
      *(void *)(v17 - 32) = *(void *)&v15[v16 - 32];
      *(void *)(v17 - 24) = 0;
      *(void *)(v17 - 16) = 0;
      *(void *)(v17 - 8) = 0;
      *(_OWORD *)(v17 - 24) = *(_OWORD *)&v15[v16 - 24];
      *(void *)(v17 - 8) = *(void *)&v15[v16 - 8];
      *((void *)v18 - 3) = 0;
      *((void *)v18 - 2) = 0;
      *((void *)v18 - 1) = 0;
      v16 -= 32;
    }
    while (&v15[v16] != v14);
    float v19 = (char *)*a1;
    std::string::size_type v15 = (char *)a1[1];
    *a1 = v22 + v16;
    a1[1] = v13;
    a1[2] = (uint64_t)v23;
    if (v15 != v19)
    {
      do
      {
        uint64_t v20 = (void *)*((void *)v15 - 3);
        if (v20)
        {
          *((void *)v15 - 2) = v20;
          operator delete(v20);
        }
        v15 -= 32;
      }
      while (v15 != v19);
      std::string::size_type v15 = v19;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v22 + 32;
}

void sub_2DC61C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_38800((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2DC630(void **a1, void *a2)
{
  unint64_t v4 = (char *)*a1;
  unint64_t v3 = (char *)a1[1];
  uint64_t v5 = (v3 - (unsigned char *)*a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::string::size_type v12 = &v10[32 * v9];
  unint64_t v11 = &v10[32 * v5];
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  uint64_t v13 = (char **)(v11 + 16);
  uint64_t v14 = (unsigned char *)a2[1];
  *(void *)unint64_t v11 = *a2;
  *((void *)v11 + 3) = 0;
  std::string::size_type v15 = (unsigned char *)a2[2];
  uint64_t v16 = v15 - v14;
  if (v15 != v14)
  {
    if (v16 < 0) {
      sub_2E00();
    }
    uint64_t v17 = (char *)operator new(v15 - v14);
    *((void *)v11 + 1) = v17;
    *uint64_t v13 = v17;
    float v18 = &v17[8 * (v16 >> 3)];
    *((void *)v11 + 3) = v18;
    memcpy(v17, v14, v16 - 1);
    *uint64_t v13 = v18;
  }
  float v19 = v11 + 32;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v19;
    a1[2] = v12;
  }
  else
  {
    uint64_t v20 = 0;
    do
    {
      unsigned int v21 = &v11[v20];
      uint64_t v22 = &v3[v20];
      *((void *)v21 - 4) = *(void *)&v3[v20 - 32];
      *((void *)v21 - 2) = 0;
      *((void *)v21 - 1) = 0;
      *(_OWORD *)(v21 - 24) = *(_OWORD *)&v3[v20 - 24];
      *((void *)v21 - 1) = *(void *)&v3[v20 - 8];
      *((void *)v22 - 3) = 0;
      *((void *)v22 - 2) = 0;
      *((void *)v22 - 1) = 0;
      v20 -= 32;
    }
    while (&v3[v20] != v4);
    unint64_t v23 = (char *)*a1;
    unint64_t v3 = (char *)a1[1];
    float v19 = v11 + 32;
    *a1 = &v11[v20];
    a1[1] = v11 + 32;
    a1[2] = v12;
    if (v3 != v23)
    {
      do
      {
        unint64_t v24 = (void *)*((void *)v3 - 3);
        if (v24)
        {
          *((void *)v3 - 2) = v24;
          operator delete(v24);
        }
        v3 -= 32;
      }
      while (v3 != v23);
      unint64_t v3 = v23;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v19;
}

void sub_2DC81C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *v2;
  if (*v2)
  {
    void *v3 = v5;
    operator delete(v5);
  }
  sub_38800((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2DC840()
{
  byte_255704F = 1;
  word_2557038 = 65;
}

void sub_2DC860(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
}

void sub_2DC874(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t *a5)
{
  unint64_t v53 = a3;
  uint64_t v9 = *a5;
  uint64_t v8 = a5[1];
  if (v8 != *a5)
  {
    uint64_t v10 = a5[1];
    do
    {
      std::string::size_type v12 = *(void **)(v10 - 24);
      v10 -= 24;
      unint64_t v11 = v12;
      if (v12)
      {
        *(void *)(v8 - 16) = v11;
        operator delete(v11);
      }
      uint64_t v8 = v10;
    }
    while (v10 != v9);
  }
  a5[1] = v9;
  *(unsigned char *)(a1 + 8) = a4;
  if (sub_2DD178(a1, a3) != 5)
  {
    *(void *)(a1 + 24) = *(void *)(a1 + 16);
    *(void *)(a1 + 40) = 0;
    LODWORD(v48) = 0;
    LODWORD(v47) = 0;
    int v52 = 0;
    BOOL v13 = sub_2DD794(a1, a3);
    BOOL v51 = v13;
    BOOL v14 = sub_2DD800(a1, a3);
    BOOL v50 = v14;
    unint64_t v15 = *(void *)(a1 + 24);
    if (v15 >= *(void *)(a1 + 32))
    {
      uint64_t v16 = sub_2D86A4((uint64_t *)(a1 + 16), (uint64_t *)&v53, (__int16 *)&v48, word_20E1700, (unsigned __int8 *)&v47, (unsigned __int8 *)&v52, (unsigned __int8 *)&v51, (unsigned __int8 *)&v50);
    }
    else
    {
      sub_2DCEB0(v15, a3, 0, 0x1FFF, 0, 0, v13, v14);
      uint64_t v16 = v15 + 12;
      *(void *)(a1 + 24) = v15 + 12;
    }
    *(void *)(a1 + 24) = v16;
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v18 = *(void *)(a1 + 40);
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 2) != v18)
    {
      do
      {
        uint64_t v19 = v17 + 12 * v18;
        uint64_t v20 = *(void *)v19;
        unsigned int v49 = *(_DWORD *)(v19 + 8);
        uint64_t v48 = v20;
        *(void *)(a1 + 40) = v18 + 1;
        if ((sub_2DD0AC((void *)a1, &v48) & 1) == 0)
        {
          if (v48 == v53
            && WORD2(v48) == WORD2(v53)
            && ((v53 & 0x1000000000000) == 0) == (BYTE6(v48) == 0)
            || (sub_2DD4C0((uint64_t *)a1, v48) & 1) != 0)
          {
            if (a2) {
              BOOL v21 = (v48 & 0xFF000000000000) != 0;
            }
            else {
              BOOL v21 = (v48 & 0xFF000000000000) == 0;
            }
            uint64_t v22 = (unsigned int *)sub_2D5EC4(*(void *)a1, v48 & 0xFFFFFFFFFFFFLL, v21);
            sub_2D5904(*(void *)a1, v22, a2, (char **)(a1 + 48));
            int v45 = sub_2DD178(a1, v48);
            unint64_t v24 = *(uint64_t **)(a1 + 48);
            unint64_t v23 = *(uint64_t **)(a1 + 56);
            while (2)
            {
              if (v24 == v23) {
                goto LABEL_14;
              }
              uint64_t v25 = *v24;
              int v26 = sub_2DD178(a1, *v24);
              if (v26 != 5)
              {
                int v27 = v26;
                BOOL v28 = v25 == v53 && WORD2(v25) == WORD2(v53);
                if (!v28 || ((v25 & 0xFF000000000000) == 0) == (HIWORD(v53) & 1))
                {
                  BOOL v29 = v48 == v53 && WORD2(v48) == WORD2(v53);
                  if (v29 && ((v53 & 0x1000000000000) == 0) == (BYTE6(v48) == 0)
                    || v48 != v25
                    || WORD2(v48) != WORD2(v25))
                  {
                    __int16 v30 = v49;
                    uint64_t v31 = (int *)sub_2D5D58(*(void *)a1, v25 & 0xFFFFFFFFFFFFLL);
                    uint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
                    if (*v32 < 9u)
                    {
                      LODWORD(v33) = 0;
                    }
                    else
                    {
                      uint64_t v33 = v32[4];
                      if (v33) {
                        LODWORD(v33) = *(int *)((char *)v31 + v33);
                      }
                    }
                    BOOL v34 = v33 % 0x64 > 0x31;
                    unsigned int v35 = (v30 & 0xFFF) + v33 / 0x64;
                    if (v34) {
                      __int16 v36 = v35 + 1;
                    }
                    else {
                      __int16 v36 = v35;
                    }
                    uint64_t v37 = v48;
                    if (a2)
                    {
                      uint64_t v38 = v25;
                    }
                    else
                    {
                      uint64_t v38 = v48;
                      uint64_t v37 = v25;
                    }
                    BOOL v39 = sub_2DD38C((uint64_t *)a1, v38, v37);
                    unsigned int v40 = v49;
                    if (v45 == v27) {
                      unsigned __int8 v41 = (v49 >> 25) & 3;
                    }
                    else {
                      unsigned __int8 v41 = ((v49 >> 25) & 3) + 1;
                    }
                    if ((v49 & 0x40000000) != 0)
                    {
                      BOOL v42 = 1;
                      if ((v49 & 0x80000000) == 0) {
                        goto LABEL_58;
                      }
LABEL_56:
                      BOOL v43 = 1;
                    }
                    else
                    {
                      BOOL v42 = sub_2DD794(a1, v25);
                      if ((v49 & 0x80000000) != 0) {
                        goto LABEL_56;
                      }
LABEL_58:
                      BOOL v43 = sub_2DD800(a1, v25);
                    }
                    sub_2DCEB0((uint64_t)&v47, v25, v36, v18, v41, ((v40 >> 27) & 7) + v39, v42, v43);
                    if ((sub_2DCF24((void *)a1, &v47) & 1) == 0 && sub_2DD590((uint64_t *)a1, &v47, a2)) {
                      sub_30C0C((char **)(a1 + 16), &v47);
                    }
                  }
                }
              }
              ++v24;
              continue;
            }
          }
          sub_2DCCDC(a1, v53, (uint64_t)a5);
        }
LABEL_14:
        uint64_t v17 = *(void *)(a1 + 16);
        uint64_t v18 = *(void *)(a1 + 40);
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 24) - v17) >> 2) != v18);
    }
  }
}

void sub_2DCCD4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  _Unwind_Resume(a1);
}

void sub_2DCCDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v19 = 0;
  uint64_t v6 = *(void *)(a1 + 16) + 12 * *(void *)(a1 + 40);
  int v8 = *(_DWORD *)(v6 - 4);
  unint64_t v7 = (_DWORD *)(v6 - 4);
  uint64_t v9 = (uint64_t)(v7 - 2);
  if ((~v8 & 0x1FFF000) == 0) {
    goto LABEL_5;
  }
  do
  {
    sub_2D5B74((char **)__p, (void *)v9);
    uint64_t v9 = *(void *)(a1 + 16) + 12 * ((*v7 >> 12) & 0x1FFF);
    unint64_t v7 = (_DWORD *)(v9 + 8);
  }
  while ((~*(_DWORD *)(v9 + 8) & 0x1FFF000) != 0);
  uint64_t v10 = __p[0];
  if ((int *)((char *)__p[1] - (char *)__p[0]) < (int *)((char *)dword_8 + 1)
    || __PAIR64__(*((unsigned __int16 *)__p[1] - 2), *((_DWORD *)__p[1] - 2)) != __PAIR64__(WORD2(a2), a2))
  {
LABEL_5:
    sub_2D5B74((char **)__p, (void *)v9);
    if (__p[0] != __p[1])
    {
      unint64_t v11 = (char *)__p[1] - 8;
      if ((char *)__p[1] - 8 > __p[0])
      {
        std::string::size_type v12 = (char *)__p[0] + 8;
        do
        {
          uint64_t v13 = *((void *)v12 - 1);
          int v14 = *(_DWORD *)v11;
          *(_DWORD *)(v12 - 5) = *(_DWORD *)(v11 + 3);
          *((_DWORD *)v12 - 2) = v14;
          *(_DWORD *)unint64_t v11 = v13;
          v11[6] = BYTE6(v13);
          *((_WORD *)v11 + 2) = WORD2(v13);
          v11 -= 8;
          BOOL v15 = v12 >= v11;
          v12 += 8;
        }
        while (!v15);
      }
    }
    uint64_t v16 = *(void **)(a3 + 8);
    if ((unint64_t)v16 >= *(void *)(a3 + 16))
    {
      uint64_t v17 = sub_4D088((char **)a3, (uint64_t)__p);
      uint64_t v10 = __p[0];
    }
    else
    {
      uint64_t v10 = 0;
      void *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      *(_OWORD *)uint64_t v16 = *(_OWORD *)__p;
      v16[2] = v19;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v19 = 0;
      uint64_t v17 = (char *)(v16 + 3);
    }
    *(void *)(a3 + 8) = v17;
  }
  if (v10)
  {
    __p[1] = v10;
    operator delete(v10);
  }
}

void sub_2DCE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2DCE94()
{
  byte_2557067 = 1;
  word_2557050 = 65;
}

uint64_t sub_2DCEB0(uint64_t result, uint64_t a2, __int16 a3, __int16 a4, unsigned int a5, unsigned int a6, int a7, int a8)
{
  *(void *)double result = a2;
  if (a5 >= 3) {
    int v8 = 3;
  }
  else {
    int v8 = a5;
  }
  int v9 = a3 & 0xFFF | ((a4 & 0x1FFF) << 12) | (v8 << 25);
  if (a6 >= 7) {
    int v10 = 7;
  }
  else {
    int v10 = a6;
  }
  int v11 = v9 | (v10 << 27);
  if (a7) {
    int v12 = 0x40000000;
  }
  else {
    int v12 = 0;
  }
  if (a8) {
    unsigned int v13 = 0x80000000;
  }
  else {
    unsigned int v13 = 0;
  }
  *(_DWORD *)(result + 8) = v11 | v12 | v13;
  return result;
}

double sub_2DCF04(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 5;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  return result;
}

uint64_t sub_2DCF24(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[5];
  if (v3)
  {
    uint64_t v4 = *a2;
    unsigned int v5 = *((_DWORD *)a2 + 2);
    unsigned int v6 = (v5 >> 25) & 3;
    unsigned int v7 = (v5 >> 27) & 7;
    int v8 = (unsigned int *)(v2 + 8);
    for (uint64_t i = 12 * v3; i; i -= 12)
    {
      if (__PAIR64__(*((unsigned __int16 *)v8 - 2), *(v8 - 2)) == __PAIR64__((unsigned __int16)WORD2(*a2), v4)
        && ((v4 & 0x1000000000000) == 0) == (*((unsigned char *)v8 - 2) == 0))
      {
        unsigned int v10 = *v8;
        if (!((v5 ^ *v8) >> 30))
        {
          unsigned int v11 = (v10 >> 25) & 3;
          if (v11 == v6)
          {
            unsigned int v12 = (v10 >> 27) & 7;
            if (v12 == v7)
            {
              if ((*v8 & 0xFFF) < (a2[1] & 0xFFFu)) {
                return 1;
              }
            }
            else if (v12 < v7)
            {
              return 1;
            }
          }
          else if (v11 && v11 < v6)
          {
            return 1;
          }
        }
      }
      v8 += 3;
    }
  }
  uint64_t v13 = v2 + 12 * v3;
  uint64_t v14 = a1[3];
  if (v13 != v14)
  {
    uint64_t v15 = *a2;
    unsigned int v16 = *((_DWORD *)a2 + 2);
    unsigned int v17 = (v16 >> 25) & 3;
    unsigned int v18 = (v16 >> 27) & 7;
    do
    {
      if (__PAIR64__(*(unsigned __int16 *)(v13 + 4), *(_DWORD *)v13) == __PAIR64__((unsigned __int16)WORD2(*a2), v15)
        && ((v15 & 0x1000000000000) == 0) == (*(unsigned char *)(v13 + 6) == 0))
      {
        unsigned int v19 = *(_DWORD *)(v13 + 8);
        if (!((v16 ^ v19) >> 30))
        {
          unsigned int v20 = (v19 >> 25) & 3;
          if (v20 == v17)
          {
            unsigned int v21 = (v19 >> 27) & 7;
            if (v21 == v18)
            {
              if ((*(_DWORD *)(v13 + 8) & 0xFFFu) < (a2[1] & 0xFFFu)) {
                return 1;
              }
            }
            else if (v21 < v18)
            {
              return 1;
            }
          }
          else if (v20 && v20 < v17)
          {
            return 1;
          }
        }
      }
      v13 += 12;
    }
    while (v13 != v14);
  }
  return 0;
}

uint64_t sub_2DD0AC(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[2] + 12 * a1[5];
  if (v3 != v2)
  {
    uint64_t v4 = *a2;
    unsigned int v5 = *((_DWORD *)a2 + 2);
    unsigned int v6 = (v5 >> 25) & 3;
    unsigned int v7 = (v5 >> 27) & 7;
    do
    {
      if (__PAIR64__(*(unsigned __int16 *)(v3 + 4), *(_DWORD *)v3) == __PAIR64__((unsigned __int16)WORD2(*a2), v4)
        && ((v4 & 0x1000000000000) == 0) == (*(unsigned char *)(v3 + 6) == 0))
      {
        unsigned int v8 = *(_DWORD *)(v3 + 8);
        if (!((v5 ^ v8) >> 30))
        {
          unsigned int v9 = (v8 >> 25) & 3;
          if (v9 == v6)
          {
            unsigned int v10 = (v8 >> 27) & 7;
            if (v10 == v7)
            {
              if ((*(_DWORD *)(v3 + 8) & 0xFFFu) < (a2[1] & 0xFFFu)) {
                return 1;
              }
            }
            else if (v10 < v7)
            {
              return 1;
            }
          }
          else if (v9 && v9 < v6)
          {
            return 1;
          }
        }
      }
      v3 += 12;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t sub_2DD178(uint64_t a1, uint64_t a2)
{
  return sub_2DD18C(a2, *(unsigned __int8 *)(a1 + 8), *(void *)a1);
}

uint64_t sub_2DD18C(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  uint64_t v5 = a1 & 0xFF000000000000;
  if (!a2)
  {
    unsigned int v10 = (int *)sub_2D5D58(a3, v4);
    unsigned int v11 = (unsigned __int16 *)((char *)v10 - *v10);
    unsigned int v12 = *v11;
    if (v5)
    {
      if (v12 < 0xB) {
        goto LABEL_22;
      }
      unsigned int v13 = v11[5];
      if (!v13 || (*(int *)((char *)v10 + v13) & 2) == 0) {
        goto LABEL_22;
      }
    }
    else if (v12 < 0xB || (unsigned int v16 = v11[5]) == 0 || (*(int *)((char *)v10 + v16) & 1) == 0)
    {
LABEL_22:
      unsigned int v17 = (int *)sub_2D5D58(a3, v4);
      unsigned int v18 = (unsigned __int16 *)((char *)v17 - *v17);
      unsigned int v19 = *v18;
      if (v5)
      {
        if (v19 >= 0xB)
        {
          unsigned int v20 = v18[5];
          if (v20)
          {
            if (*(int *)((char *)v17 + v20)) {
              return 5;
            }
          }
        }
      }
      else if (v19 >= 0xB)
      {
        unsigned int v21 = v18[5];
        if (v21)
        {
          if ((*(int *)((char *)v17 + v21) & 2) != 0) {
            return 5;
          }
        }
      }
      goto LABEL_30;
    }
    return 0;
  }
  if (a2 == 2) {
    goto LABEL_30;
  }
  if (a2 != 3) {
    return 5;
  }
  unsigned int v6 = (int *)sub_2D5D58(a3, v4);
  unsigned int v7 = (unsigned __int16 *)((char *)v6 - *v6);
  unsigned int v8 = *v7;
  if (v5)
  {
    if (v8 < 0x47) {
      goto LABEL_30;
    }
    unsigned int v9 = v7[35];
    if (!v9 || (*(int *)((char *)v6 + v9) & 2) == 0) {
      goto LABEL_30;
    }
    return 3;
  }
  if (v8 >= 0x47)
  {
    unsigned int v14 = v7[35];
    if (v14)
    {
      if (*(int *)((char *)v6 + v14)) {
        return 3;
      }
    }
  }
LABEL_30:
  uint64_t v22 = (int *)sub_2D5D58(a3, v4);
  unint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
  unsigned int v24 = *v23;
  if (v5)
  {
    if (v24 < 0x39) {
      return 5;
    }
    uint64_t v25 = v23[28];
    if (!v25) {
      return 5;
    }
    int v26 = *(int *)((char *)v22 + v25);
    if ((v26 & 2) != 0) {
      return 2;
    }
    goto LABEL_38;
  }
  if (v24 < 0x39) {
    return 5;
  }
  uint64_t v27 = v23[28];
  if (!v27) {
    return 5;
  }
  int v26 = *(int *)((char *)v22 + v27);
  if ((v26 & 1) == 0)
  {
LABEL_38:
    if ((v26 & 7) == 4 || (v26 & 0x23) == 0x20) {
      return 2;
    }
    return 5;
  }
  return 2;
}

BOOL sub_2DD38C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = (int *)sub_2D5D58(*a1, a2 & 0xFFFFFFFFFFFFLL);
  unsigned int v7 = (unsigned __int16 *)((char *)v6 - *v6);
  unsigned int v8 = *v7;
  if ((a2 & 0xFF000000000000) == 0)
  {
    if (v8 < 0x4B) {
      goto LABEL_8;
    }
    unsigned int v9 = v7[37];
    if (!v9) {
      goto LABEL_8;
    }
LABEL_7:
    __int16 v10 = *(_WORD *)((char *)v6 + v9);
    goto LABEL_9;
  }
  if (v8 >= 0x49)
  {
    unsigned int v9 = v7[36];
    if (v9) {
      goto LABEL_7;
    }
  }
LABEL_8:
  __int16 v10 = -1;
LABEL_9:
  unsigned int v11 = (int *)sub_2D5D58(*a1, a3 & 0xFFFFFFFFFFFFLL);
  unsigned int v12 = (unsigned __int16 *)((char *)v11 - *v11);
  unsigned int v13 = *v12;
  if ((a3 & 0xFF000000000000) == 0)
  {
    if (v13 < 0x49) {
      goto LABEL_16;
    }
    unsigned int v14 = v12[36];
    if (!v14) {
      goto LABEL_16;
    }
LABEL_15:
    int v15 = *(unsigned __int16 *)((char *)v11 + v14);
    goto LABEL_17;
  }
  if (v13 >= 0x4B)
  {
    unsigned int v14 = v12[37];
    if (v14) {
      goto LABEL_15;
    }
  }
LABEL_16:
  int v15 = 0xFFFF;
LABEL_17:
  unsigned __int16 v16 = v10 + 18000;
  if ((unsigned __int16)((unsigned __int16)(v10 + 18000) >> 5) >= 0x465u) {
    unsigned __int16 v16 = v10 - 18000;
  }
  int v17 = v15 - v16;
  if (v17 > 18000) {
    v17 -= 36000;
  }
  if (v17 < -17999) {
    v17 += 36000;
  }
  return fabs((double)v17 / 100.0) > 22.0;
}

uint64_t sub_2DD4C0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  unint64_t v4 = (int *)sub_2D5D58(*a1, a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4);
  if ((*v5 < 0xBu
     || (uint64_t v6 = v5[5]) == 0
     || (*((unsigned char *)v4 + v6 + 3) & 2) == 0
     || (unsigned int v11 = (int *)sub_2D5D58(*a1, v3), v12 = (unsigned __int16 *)((char *)v11 - *v11), *v12 >= 0xBu)
     && (uint64_t v13 = v12[5]) != 0
     && (*((unsigned char *)v11 + v13 + 3) & 4) != 0)
    && (unsigned int v7 = (int *)sub_2D5D58(*a1, v3), v8 = (unsigned __int16 *)((char *)v7 - *v7), *v8 >= 0xBu)
    && (unsigned int v9 = v8[5]) != 0)
  {
    return *((unsigned char *)v7 + v9 + 2) & 1;
  }
  else
  {
    return 0;
  }
}

BOOL sub_2DD590(uint64_t *a1, void *a2, int a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2 & 0xFF000000000000;
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFLL;
  if (a3)
  {
    unint64_t v7 = sub_2D5EC4(v4, v6, v5 != 0);
    uint64_t v8 = a1[2] + 12 * a1[5];
    int v10 = *(_DWORD *)(v8 - 4);
    unsigned int v9 = (unsigned int *)(v8 - 4);
    if ((~v10 & 0x1FFF000) == 0) {
      return 1;
    }
    unint64_t v16 = v7;
    uint64_t v17 = *(void *)(a1[2] + 12 * a1[5] - 12);
    if (sub_2D5EC4(*a1, v17 & 0xFFFFFFFFFFFFLL, (v17 & 0xFF000000000000) == 0) == v7) {
      return 0;
    }
    while (1)
    {
      uint64_t v20 = a1[2];
      unint64_t v21 = ((unint64_t)*v9 >> 12) & 0x1FFF;
      uint64_t v22 = v20 + 12 * v21;
      int v23 = *(_DWORD *)(v22 + 8);
      unsigned int v9 = (unsigned int *)(v22 + 8);
      BOOL result = (v23 & 0x1FFF000) == 33550336;
      if ((v23 & 0x1FFF000) == 0x1FFF000) {
        break;
      }
      if (sub_2D5EC4(*a1, *(void *)(v20 + 12 * v21) & 0xFFFFFFFFFFFFLL, (*(void *)(v20 + 12 * v21) & 0xFF000000000000) == 0) == v16)return 0; {
    }
      }
  }
  else
  {
    unint64_t v12 = sub_2D5EC4(v4, v6, v5 == 0);
    uint64_t v13 = a1[2] + 12 * a1[5];
    int v15 = *(_DWORD *)(v13 - 4);
    unsigned int v14 = (unsigned int *)(v13 - 4);
    if ((~v15 & 0x1FFF000) == 0) {
      return 1;
    }
    unint64_t v18 = v12;
    uint64_t v19 = *(void *)(a1[2] + 12 * a1[5] - 12);
    if (sub_2D5EC4(*a1, v19 & 0xFFFFFFFFFFFFLL, (v19 & 0xFF000000000000) != 0) == v12) {
      return 0;
    }
    while (1)
    {
      uint64_t v24 = a1[2];
      unint64_t v25 = ((unint64_t)*v14 >> 12) & 0x1FFF;
      uint64_t v26 = v24 + 12 * v25;
      int v27 = *(_DWORD *)(v26 + 8);
      unsigned int v14 = (unsigned int *)(v26 + 8);
      BOOL result = (v27 & 0x1FFF000) == 33550336;
      if ((v27 & 0x1FFF000) == 0x1FFF000) {
        break;
      }
      if (sub_2D5EC4(*a1, *(void *)(v24 + 12 * v25) & 0xFFFFFFFFFFFFLL, (*(void *)(v24 + 12 * v25) & 0xFF000000000000) != 0) == v18)return 0; {
    }
      }
  }
  return result;
}

BOOL sub_2DD794(uint64_t a1, uint64_t a2)
{
  int v4 = sub_2DD18C(a2, *(unsigned __int8 *)(a1 + 8), *(void *)a1);
  return v4 == *(unsigned __int8 *)(a1 + 8)
      && sub_2DD18C(a2 ^ 0x1000000000000, v4, *(void *)a1) == *(unsigned __int8 *)(a1 + 8);
}

BOOL sub_2DD800(uint64_t a1, uint64_t a2)
{
  if (sub_2DD18C(a2, *(unsigned __int8 *)(a1 + 8), *(void *)a1) != 3) {
    return 0;
  }
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  uint64_t v5 = a2 & 0xFF000000000000;
  unint64_t v6 = (int *)sub_2D5D58(*(void *)a1, v4);
  unint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  unsigned int v8 = *v7;
  if (v5)
  {
    if (v8 >= 0xB)
    {
      unsigned int v9 = v7[5];
      if (v9)
      {
        if ((*(int *)((char *)v6 + v9) & 2) != 0) {
          return 0;
        }
      }
    }
  }
  else if (v8 >= 0xB)
  {
    unsigned int v10 = v7[5];
    if (v10)
    {
      if (*(int *)((char *)v6 + v10)) {
        return 0;
      }
    }
  }
  unsigned int v11 = (int *)sub_2D5D58(*(void *)a1, v4);
  unint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  unsigned int v13 = *v12;
  if (v5)
  {
    if (v13 >= 0xB)
    {
      unsigned int v14 = v12[5];
      if (v14)
      {
        int v15 = 1;
        return (*(int *)((char *)v11 + v14) & v15) != 0;
      }
    }
  }
  else if (v13 >= 0xB)
  {
    unsigned int v14 = v12[5];
    if (v14)
    {
      int v15 = 2;
      return (*(int *)((char *)v11 + v14) & v15) != 0;
    }
  }
  return 0;
}

void sub_2DD90C()
{
  byte_255707F = 1;
  word_2557068 = 65;
}

void *sub_2DD928(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_51960(a1, a2);
  sub_188FC78(v4, (uint64_t)".", 1);
  std::ostream::operator<<();
  uint64_t v5 = sub_188FC78(a1, (uint64_t)"(", 1);
  if ((a2 & 0xFF000000000000) != 0) {
    unint64_t v6 = "rev";
  }
  else {
    unint64_t v6 = "fwd";
  }
  unint64_t v7 = sub_188FC78(v5, (uint64_t)v6, 3);
  sub_188FC78(v7, (uint64_t)")", 1);
  return a1;
}

double sub_2DD9C0@<D0>(int *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  unint64_t v6 = (void **)(a3 + 8);
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  uint64_t v7 = sub_1133328();
  double result = 0.0;
  *(_OWORD *)(a3 + 64) = 0u;
  unsigned int v9 = (void **)(a3 + 64);
  *(void *)(a3 + 120) = 0;
  unsigned int v10 = (void **)(a3 + 120);
  *(void *)(a3 + 56) = v7;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_DWORD *)(a3 + 111) = 0;
  if (a1)
  {
    unsigned int v11 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v11 < 5u || (uint64_t v12 = v11[2]) == 0)
    {
      BYTE7(v68) = 0;
      LOBYTE(v67) = 0;
      goto LABEL_9;
    }
    unsigned int v13 = (unsigned int *)((char *)a1 + v12);
    uint64_t v14 = *v13;
    unint64_t v16 = (char *)v13 + v14 + 4;
    size_t v15 = *(unsigned int *)((char *)v13 + v14);
    if (v15 >= 0x17)
    {
      uint64_t v39 = (v15 & 0xFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17) {
        uint64_t v39 = v15 | 7;
      }
      uint64_t v40 = v39 + 1;
      uint64_t v17 = (long long *)operator new(v39 + 1);
      *((void *)&v67 + 1) = v15;
      *(void *)&long long v68 = v40 | 0x8000000000000000;
      *(void *)&long long v67 = v17;
    }
    else
    {
      BYTE7(v68) = *(unsigned int *)((char *)v13 + v14);
      uint64_t v17 = &v67;
      if (!v15)
      {
        *((unsigned char *)&v67 + v15) = 0;
        if (*(char *)(a3 + 31) < 0) {
          goto LABEL_44;
        }
        goto LABEL_9;
      }
    }
    memcpy(v17, v16, v15);
    *((unsigned char *)v17 + v15) = 0;
    if (*(char *)(a3 + 31) < 0) {
LABEL_44:
    }
      operator delete(*v6);
LABEL_9:
    *(_OWORD *)unint64_t v6 = v67;
    *(void *)(a3 + 24) = v68;
    unint64_t v18 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v18 >= 7u)
    {
      uint64_t v19 = v18[3];
      if (v19)
      {
        uint64_t v20 = (unsigned int *)((char *)a1 + v19);
        uint64_t v21 = *v20;
        int v23 = (char *)v20 + v21 + 4;
        size_t v22 = *(unsigned int *)((char *)v20 + v21);
        if (v22 >= 0x17)
        {
          uint64_t v41 = (v22 & 0xFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17) {
            uint64_t v41 = v22 | 7;
          }
          uint64_t v42 = v41 + 1;
          uint64_t v24 = (long long *)operator new(v41 + 1);
          *((void *)&v67 + 1) = v22;
          *(void *)&long long v68 = v42 | 0x8000000000000000;
          *(void *)&long long v67 = v24;
        }
        else
        {
          BYTE7(v68) = *(unsigned int *)((char *)v20 + v21);
          uint64_t v24 = &v67;
          if (!v22)
          {
            *((unsigned char *)&v67 + v22) = 0;
            uint64_t v25 = a3 + 88;
            if (*(char *)(a3 + 111) < 0) {
              goto LABEL_16;
            }
            goto LABEL_17;
          }
        }
        memcpy(v24, v23, v22);
        *((unsigned char *)v24 + v22) = 0;
        uint64_t v25 = a3 + 88;
        if ((*(char *)(a3 + 111) & 0x80000000) == 0) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
    }
    BYTE7(v68) = 0;
    LOBYTE(v67) = 0;
    uint64_t v25 = a3 + 88;
    if (*(char *)(a3 + 111) < 0) {
LABEL_16:
    }
      operator delete(*(void **)v25);
LABEL_17:
    *(_OWORD *)uint64_t v25 = v67;
    *(void *)(v25 + 16) = v68;
    uint64_t v26 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v26 < 9u || (uint64_t v27 = v26[4]) == 0)
    {
      BYTE7(v68) = 0;
      LOBYTE(v67) = 0;
      uint64_t v33 = a3 + 32;
      if ((*(char *)(a3 + 55) & 0x80000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    BOOL v28 = (unsigned int *)((char *)a1 + v27);
    uint64_t v29 = *v28;
    uint64_t v31 = (char *)v28 + v29 + 4;
    size_t v30 = *(unsigned int *)((char *)v28 + v29);
    if (v30 >= 0x17)
    {
      uint64_t v43 = (v30 & 0xFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17) {
        uint64_t v43 = v30 | 7;
      }
      uint64_t v44 = v43 + 1;
      uint64_t v32 = (long long *)operator new(v43 + 1);
      *((void *)&v67 + 1) = v30;
      *(void *)&long long v68 = v44 | 0x8000000000000000;
      *(void *)&long long v67 = v32;
    }
    else
    {
      BYTE7(v68) = *(unsigned int *)((char *)v28 + v29);
      uint64_t v32 = &v67;
      if (!v30)
      {
        *((unsigned char *)&v67 + v30) = 0;
        uint64_t v33 = a3 + 32;
        if ((*(char *)(a3 + 55) & 0x80000000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_24;
      }
    }
    memcpy(v32, v31, v30);
    *((unsigned char *)v32 + v30) = 0;
    uint64_t v33 = a3 + 32;
    if ((*(char *)(a3 + 55) & 0x80000000) == 0)
    {
LABEL_25:
      *(_OWORD *)uint64_t v33 = v67;
      *(void *)(v33 + 16) = v68;
      unint64_t v34 = *(unsigned __int8 *)(a3 + 55);
      if ((v34 & 0x80u) == 0) {
        unsigned int v35 = (unsigned __int8 *)v33;
      }
      else {
        unsigned int v35 = *(unsigned __int8 **)(a3 + 32);
      }
      if ((v34 & 0x80u) != 0) {
        unint64_t v34 = *(void *)(a3 + 40);
      }
      if (v34 >= 0x1F) {
        uint64_t v36 = 31;
      }
      else {
        uint64_t v36 = v34;
      }
      switch(v36)
      {
        case 0:
          long long v68 = 0u;
          long long v69 = 0u;
          long long v67 = 0u;
          goto LABEL_56;
        case 1:
          uint64_t v37 = *v35;
          uint64_t v38 = 1;
          break;
        case 2:
          uint64_t v37 = *(unsigned __int16 *)v35;
          uint64_t v38 = 2;
          break;
        default:
          sub_76DEC(v35, v36, (uint64_t)&v67);
LABEL_56:
          *(void *)(a3 + 56) = sub_1133038((uint64_t)&v67, 0);
          uint64_t v45 = *a1;
          uint64_t v46 = -v45;
          uint64_t v47 = (unsigned __int16 *)((char *)a1 - v45);
          unsigned int v48 = *v47;
          if (v48 < 0xB)
          {
            *(unsigned char *)a3 = 0;
            if (a2)
            {
LABEL_60:
              if (v48 >= 0xD && v47[6]) {
                BOOL v50 = (unsigned int *)((char *)a1 + v47[6] + *(unsigned int *)((char *)a1 + v47[6]));
              }
              else {
                BOOL v50 = 0;
              }
              sub_2DDFFC((long long **)&v67, v50);
              uint64_t v62 = (void **)*v9;
              if (!*v9)
              {
LABEL_89:
                *(_OWORD *)(a3 + 64) = v67;
                *(void *)(a3 + 80) = v68;
                BOOL v51 = (unsigned __int16 *)((char *)a1 - *a1);
                unsigned int v52 = *v51;
                if (v52 <= 0xE) {
                  goto LABEL_90;
                }
                goto LABEL_65;
              }
              uint64_t v63 = *(void ***)(a3 + 72);
              unint64_t v64 = *v9;
              if (v63 == v62)
              {
LABEL_88:
                *(void *)(a3 + 72) = v62;
                operator delete(v64);
                *unsigned int v9 = 0;
                *(void *)(a3 + 72) = 0;
                *(void *)(a3 + 80) = 0;
                goto LABEL_89;
              }
              while (1)
              {
                if (*((char *)v63 - 9) < 0)
                {
                  operator delete(*(v63 - 4));
                  if ((*((char *)v63 - 33) & 0x80000000) == 0) {
                    goto LABEL_83;
                  }
LABEL_86:
                  operator delete(*(v63 - 7));
                  v63 -= 7;
                  if (v63 == v62)
                  {
LABEL_87:
                    unint64_t v64 = *v9;
                    goto LABEL_88;
                  }
                }
                else
                {
                  if (*((char *)v63 - 33) < 0) {
                    goto LABEL_86;
                  }
LABEL_83:
                  v63 -= 7;
                  if (v63 == v62) {
                    goto LABEL_87;
                  }
                }
              }
            }
          }
          else
          {
            uint64_t v49 = v47[5];
            if (v47[5]) {
              LOBYTE(v49) = *((unsigned char *)a1 + v49);
            }
            *(unsigned char *)a3 = v49;
            if (a2) {
              goto LABEL_60;
            }
          }
          BOOL v51 = (unsigned __int16 *)((char *)a1 + v46);
          unsigned int v52 = *v51;
          if (v52 <= 0xE)
          {
LABEL_90:
            *(unsigned char *)(a3 + 112) = 0;
LABEL_91:
            *(unsigned char *)(a3 + 113) = 0;
LABEL_92:
            *(unsigned char *)(a3 + 114) = 0;
            goto LABEL_93;
          }
LABEL_65:
          uint64_t v53 = v51[7];
          if (v51[7]) {
            LOBYTE(v53) = *((unsigned char *)a1 + v53) != 0;
          }
          *(unsigned char *)(a3 + 112) = v53;
          if (v52 < 0x11) {
            goto LABEL_91;
          }
          uint64_t v54 = v51[8];
          if (v51[8]) {
            LOBYTE(v54) = *((unsigned char *)a1 + v54) != 0;
          }
          *(unsigned char *)(a3 + 113) = v54;
          if (v52 < 0x13) {
            goto LABEL_92;
          }
          uint64_t v55 = v51[9];
          if (v51[9]) {
            LOBYTE(v55) = *((unsigned char *)a1 + v55);
          }
          *(unsigned char *)(a3 + 114) = v55;
          if (v52 < 0x15 || (uint64_t v56 = v51[10]) == 0)
          {
LABEL_93:
            BYTE7(v68) = 0;
            LOBYTE(v67) = 0;
            if ((*(char *)(a3 + 143) & 0x80000000) == 0)
            {
LABEL_95:
              double result = *(double *)&v67;
              *(_OWORD *)unsigned int v10 = v67;
              *(void *)(a3 + 136) = v68;
              return result;
            }
LABEL_94:
            operator delete(*v10);
            goto LABEL_95;
          }
          int v57 = (unsigned int *)((char *)a1 + v56);
          uint64_t v58 = *v57;
          uint64_t v60 = (char *)v57 + v58 + 4;
          size_t v59 = *(unsigned int *)((char *)v57 + v58);
          if (v59 >= 0x17)
          {
            uint64_t v65 = (v59 & 0xFFFFFFF8) + 8;
            if ((v59 | 7) != 0x17) {
              uint64_t v65 = v59 | 7;
            }
            uint64_t v66 = v65 + 1;
            unsigned int v61 = (long long *)operator new(v65 + 1);
            *((void *)&v67 + 1) = v59;
            *(void *)&long long v68 = v66 | 0x8000000000000000;
            *(void *)&long long v67 = v61;
          }
          else
          {
            BYTE7(v68) = *(unsigned int *)((char *)v57 + v58);
            unsigned int v61 = &v67;
            if (!v59)
            {
LABEL_101:
              *((unsigned char *)v61 + v59) = 0;
              if ((*(char *)(a3 + 143) & 0x80000000) == 0) {
                goto LABEL_95;
              }
              goto LABEL_94;
            }
          }
          memcpy(v61, v60, v59);
          goto LABEL_101;
      }
      *(void *)&long long v67 = v37;
      *((void *)&v67 + 1) = v38;
      long long v68 = 0u;
      long long v69 = 0u;
      goto LABEL_56;
    }
LABEL_24:
    operator delete(*(void **)v33);
    goto LABEL_25;
  }
  return result;
}

void sub_2DDF84(_Unwind_Exception *a1)
{
  sub_2DF404(v1);
  _Unwind_Resume(a1);
}

void sub_2DDF98(_Unwind_Exception *a1)
{
  sub_2DF404(v1);
  _Unwind_Resume(a1);
}

void sub_2DDFAC(_Unwind_Exception *a1)
{
  sub_2DF404(v1);
  _Unwind_Resume(a1);
}

void sub_2DDFC0(_Unwind_Exception *a1)
{
  sub_2DF404(v1);
  _Unwind_Resume(a1);
}

void sub_2DDFD4(_Unwind_Exception *a1)
{
  sub_2DF404(v1);
  _Unwind_Resume(a1);
}

void sub_2DDFE8(_Unwind_Exception *a1)
{
  sub_2DF404(v1);
  _Unwind_Resume(a1);
}

void sub_2DDFFC(long long **a1, unsigned int *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    unint64_t v3 = a1;
    sub_2DEAC8((uint64_t)a1, *a2);
    uint64_t v4 = *a2;
    if (v4)
    {
      unint64_t v5 = 0;
      uint64_t v30 = 4 * v4;
      uint64_t v6 = (uint64_t)v3[1];
      while (1)
      {
        uint64_t v7 = a2[v5 / 4 + 1];
        unsigned int v8 = (char *)&a2[v5 / 4] + v7;
        int v34 = 0;
        *(_OWORD *)uint64_t v31 = 0u;
        memset(__p, 0, sizeof(__p));
        char v33 = 0;
        uint64_t v9 = *((int *)v8 + 1);
        unsigned int v10 = (char *)&a2[v5 / 4] + v7 - v9;
        unsigned int v11 = *((unsigned __int16 *)v10 + 2);
        if (v11 < 9 || (uint64_t v12 = *((unsigned __int16 *)v10 + 6)) == 0)
        {
          uint64_t v16 = -v9;
          HIBYTE(v36) = 0;
          LOBYTE(__dst) = 0;
          *(_OWORD *)uint64_t v31 = __dst;
          __p[0] = v36;
          if (v11 < 0xD) {
            goto LABEL_21;
          }
          goto LABEL_17;
        }
        unsigned int v13 = (char *)a2 + v7 + v12 + v5 + *(unsigned int *)((char *)&a2[v5 / 4 + 1] + v7 + v12);
        size_t v14 = *((unsigned int *)v13 + 1);
        if (v14 >= 0x17) {
          break;
        }
        HIBYTE(v36) = *((_DWORD *)v13 + 1);
        p_dst = &__dst;
        if (v14) {
          goto LABEL_15;
        }
LABEL_16:
        *((unsigned char *)p_dst + v14) = 0;
        uint64_t v19 = *((int *)v8 + 1);
        uint64_t v16 = -v19;
        unsigned int v11 = *(unsigned __int16 *)((char *)&a2[v5 / 4 + 1] + v7 - v19);
        *(_OWORD *)uint64_t v31 = __dst;
        __p[0] = v36;
        if (v11 < 0xD) {
          goto LABEL_21;
        }
LABEL_17:
        if (!*(_WORD *)((char *)&a2[v5 / 4 + 4] + v16 + v7))
        {
LABEL_21:
          HIBYTE(v36) = 0;
          LOBYTE(__dst) = 0;
          *(_OWORD *)&__p[1] = __dst;
          __p[3] = v36;
          if (v11 < 7) {
            goto LABEL_30;
          }
          goto LABEL_22;
        }
        uint64_t v20 = *(unsigned __int16 *)((char *)&a2[v5 / 4 + 4] + v16 + v7);
        uint64_t v21 = (char *)a2 + v7 + v20 + v5 + *(unsigned int *)((char *)&a2[v5 / 4 + 1] + v7 + v20);
        size_t v22 = *((unsigned int *)v21 + 1);
        if (v22 >= 0x17)
        {
          uint64_t v24 = (v22 & 0xFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17) {
            uint64_t v24 = v22 | 7;
          }
          uint64_t v25 = v24 + 1;
          int v23 = (long long *)operator new(v24 + 1);
          *((void *)&__dst + 1) = v22;
          uint64_t v36 = (void *)(v25 | 0x8000000000000000);
          *(void *)&long long __dst = v23;
          unint64_t v3 = a1;
LABEL_28:
          memcpy(v23, v21 + 8, v22);
          goto LABEL_29;
        }
        HIBYTE(v36) = *((_DWORD *)v21 + 1);
        int v23 = &__dst;
        if (v22) {
          goto LABEL_28;
        }
LABEL_29:
        *((unsigned char *)v23 + v22) = 0;
        uint64_t v26 = *((int *)v8 + 1);
        uint64_t v16 = -v26;
        unsigned int v11 = *(unsigned __int16 *)((char *)&a2[v5 / 4 + 1] + v7 - v26);
        *(_OWORD *)&__p[1] = __dst;
        __p[3] = v36;
        if (v11 < 7)
        {
LABEL_30:
          int v27 = 0;
          char v33 = 0;
          if (v11 < 5) {
            goto LABEL_34;
          }
          goto LABEL_31;
        }
LABEL_22:
        if (*(_WORD *)((char *)&a2[v5 / 4 + 2] + v16 + v7 + 2)) {
          char v33 = *((unsigned char *)&a2[v5 / 4 + 1] + v7 + *(unsigned __int16 *)((char *)&a2[v5 / 4 + 2] + v16 + v7 + 2));
        }
        else {
          char v33 = 0;
        }
LABEL_31:
        if (*(_WORD *)((char *)&a2[v5 / 4 + 2] + v16 + v7)) {
          int v27 = *((unsigned __int8 *)&a2[v5 / 4 + 1] + v7 + *(unsigned __int16 *)((char *)&a2[v5 / 4 + 2] + v16 + v7));
        }
        else {
          int v27 = 0;
        }
LABEL_34:
        int v34 = v27;
        BOOL v28 = sub_2DECC0(v3, v6, (uint64_t)v31);
        if (SHIBYTE(__p[3]) < 0)
        {
          operator delete(__p[1]);
          if (SHIBYTE(__p[0]) < 0) {
LABEL_38:
          }
            operator delete(v31[0]);
        }
        else if (SHIBYTE(__p[0]) < 0)
        {
          goto LABEL_38;
        }
        uint64_t v6 = (uint64_t)v28 + 56;
        v5 += 4;
        if (v30 == v5) {
          return;
        }
      }
      uint64_t v17 = (v14 & 0xFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v17 = v14 | 7;
      }
      uint64_t v18 = v17 + 1;
      p_dst = (long long *)operator new(v17 + 1);
      *((void *)&__dst + 1) = v14;
      uint64_t v36 = (void *)(v18 | 0x8000000000000000);
      *(void *)&long long __dst = p_dst;
      unint64_t v3 = a1;
LABEL_15:
      memcpy(p_dst, v13 + 8, v14);
      goto LABEL_16;
    }
  }
}

void sub_2DE344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_2DE358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
    {
LABEL_3:
      sub_2DE3B8(a9);
      _Unwind_Resume(a1);
    }
  }
  else if ((a16 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a11);
  sub_2DE3B8(a9);
  _Unwind_Resume(a1);
}

void **sub_2DE3B8(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    unint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 9) < 0)
      {
        operator delete(*(v3 - 4));
        if (*((char *)v3 - 33) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 7));
      }
      else if (*((char *)v3 - 33) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 7;
      if (v3 == v2)
      {
        uint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

BOOL sub_2DE448(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    return *(void *)(a1 + 16) != 0;
  }
  else {
    return *(unsigned char *)(a1 + 31) != 0;
  }
}

void sub_2DE470(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a2 + 8;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  unint64_t v5 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v6 = *v5;
  if (v6 <= 4)
  {
    *(_DWORD *)a2 = 0;
LABEL_10:
    HIBYTE(v18) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_11;
  }
  uint64_t v7 = v5[2];
  if (v5[2]) {
    LODWORD(v7) = *(int *)((char *)a1 + v7);
  }
  *(_DWORD *)a2 = v7;
  if (v6 < 7) {
    goto LABEL_10;
  }
  uint64_t v8 = v5[3];
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = (unsigned int *)((char *)a1 + v8);
  uint64_t v10 = *v9;
  uint64_t v12 = (char *)v9 + v10 + 4;
  size_t v11 = *(unsigned int *)((char *)v9 + v10);
  if (v11 >= 0x17)
  {
    if ((v11 | 7) == 0x17) {
      uint64_t v16 = (v11 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v16 = v11 | 7;
    }
    p_dst = (long long *)operator new(v16 + 1);
    *((void *)&__dst + 1) = v11;
    uint64_t v18 = v16 - 0x7FFFFFFFFFFFFFFFLL;
    *(void *)&long long __dst = p_dst;
    goto LABEL_20;
  }
  HIBYTE(v18) = *(unsigned int *)((char *)v9 + v10);
  p_dst = &__dst;
  if (v11) {
LABEL_20:
  }
    memcpy(p_dst, v12, v11);
  *((unsigned char *)p_dst + v11) = 0;
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*(void **)v4);
  }
LABEL_11:
  *(_OWORD *)uint64_t v4 = __dst;
  *(void *)(v4 + 16) = v18;
  size_t v14 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v14 < 9u)
  {
    LOBYTE(v15) = 0;
  }
  else
  {
    uint64_t v15 = v14[4];
    if (v15) {
      LOBYTE(v15) = *((unsigned char *)a1 + v15) != 0;
    }
  }
  *(unsigned char *)(a2 + 32) = v15;
}

BOOL sub_2DE5CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (const void **)(a1 + 8);
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  uint64_t v5 = *(unsigned __int8 *)(a1 + 31);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  uint64_t v7 = *(unsigned __int8 *)(a2 + 31);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 16);
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    uint64_t v9 = (unsigned __int8 *)(a2 + 8);
  }
  else {
    uint64_t v9 = *(unsigned __int8 **)(a2 + 8);
  }
  if ((v5 & 0x80) != 0)
  {
    if (!memcmp(*v2, v9, *(void *)(a1 + 16))) {
      return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v2 == *v9)
    {
      uint64_t v2 = (const void **)((char *)v2 + 1);
      ++v9;
      if (!--v5) {
        return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
      }
    }
    return 0;
  }
  return *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32);
}

void sub_2DE69C(unsigned int *a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1) {
    sub_2DE6F4(a1, (uint64_t)a2, (void (*)(void **__return_ptr, char *))sub_2DE470);
  }
}

void sub_2DE6E0(_Unwind_Exception *a1)
{
  sub_2DE7D0(v1);
  _Unwind_Resume(a1);
}

void sub_2DE6F4(unsigned int *a1, uint64_t a2, void (*a3)(void **__return_ptr, char *))
{
  sub_2DF71C(a2, *a1 - 0x3333333333333333 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  unsigned int v8 = *a1;
  uint64_t v7 = (char *)(a1 + 1);
  uint64_t v6 = v8;
  if (v8)
  {
    uint64_t v9 = 4 * v6;
    uint64_t v10 = *(void *)(a2 + 8);
    do
    {
      a3(v12, &v7[*(unsigned int *)v7]);
      size_t v11 = sub_2DF860((char **)a2, v10, (uint64_t)v12);
      if (v13 < 0) {
        operator delete(v12[1]);
      }
      uint64_t v10 = (uint64_t)(v11 + 40);
      v7 += 4;
      v9 -= 4;
    }
    while (v9);
  }
}

void sub_2DE7B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_2DE7D0(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    unint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0) {
          operator delete(*(v3 - 4));
        }
        v3 -= 5;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

double sub_2DE844@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_WORD *)(a2 + 48) = 521;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(void *)(a2 + 120) = 0;
  uint64_t v5 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v5 >= 0x15u)
  {
    uint64_t v6 = v5[10];
    if (v6) {
      uint64_t v4 = (unsigned int *)((char *)a1 + v6 + *(unsigned int *)((char *)a1 + v6));
    }
    else {
      uint64_t v4 = 0;
    }
  }
  sub_767A8(v4, (uint64_t)&v33);
  uint64_t v7 = *a1;
  uint64_t v8 = v34;
  *(_OWORD *)a2 = v33;
  *(void *)(a2 + 16) = v8;
  uint64_t v9 = (unsigned __int16 *)((char *)a1 - v7);
  if (*v9 >= 0x17u && (uint64_t v10 = v9[11]) != 0) {
    size_t v11 = (unsigned int *)((char *)a1 + v10 + *(unsigned int *)((char *)a1 + v10));
  }
  else {
    size_t v11 = 0;
  }
  sub_767A8(v11, (uint64_t)&v33);
  uint64_t v12 = *a1;
  uint64_t v13 = v34;
  *(_OWORD *)(a2 + 24) = v33;
  *(void *)(a2 + 40) = v13;
  size_t v14 = (unsigned __int16 *)((char *)a1 - v12);
  unsigned int v15 = *v14;
  if (v15 < 0xD)
  {
    *(unsigned char *)(a2 + 49) = 0;
    if (v15 <= 0xA)
    {
      *(unsigned char *)(a2 + 48) = 0;
LABEL_20:
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v16 = v14[6];
    if (v14[6]) {
      LOBYTE(v16) = *((unsigned char *)a1 + v16);
    }
    *(unsigned char *)(a2 + 49) = v16;
  }
  uint64_t v17 = v14[5];
  if (v14[5]) {
    LOBYTE(v17) = *((unsigned char *)a1 + v17);
  }
  *(unsigned char *)(a2 + 48) = v17;
  if (v15 < 0xF) {
    goto LABEL_20;
  }
  uint64_t v18 = v14[7];
  if (!v18) {
    goto LABEL_20;
  }
  uint64_t v19 = (unsigned int *)((char *)a1 + v18);
  uint64_t v20 = *v19;
  uint64_t v34 = 0;
  long long v33 = 0uLL;
  sub_2DE6F4((unsigned int *)((char *)v19 + v20), (uint64_t)&v33, (void (*)(void **__return_ptr, char *))sub_2DE470);
LABEL_21:
  uint64_t v21 = *a1;
  uint64_t v22 = v34;
  *(_OWORD *)(a2 + 56) = v33;
  *(void *)(a2 + 72) = v22;
  int v23 = (unsigned __int16 *)((char *)a1 - v21);
  if (*v23 >= 0x11u && (uint64_t v24 = v23[8]) != 0) {
    uint64_t v25 = (unsigned int *)((char *)a1 + v24 + *(unsigned int *)((char *)a1 + v24));
  }
  else {
    uint64_t v25 = 0;
  }
  sub_2DDFFC((long long **)&v33, v25);
  uint64_t v26 = *a1;
  uint64_t v27 = v34;
  *(_OWORD *)(a2 + 80) = v33;
  *(void *)(a2 + 96) = v27;
  BOOL v28 = (unsigned __int16 *)((char *)a1 - v26);
  if (*v28 >= 0x19u && (uint64_t v29 = v28[12]) != 0) {
    uint64_t v30 = (unsigned int *)((char *)a1 + v29 + *(unsigned int *)((char *)a1 + v29));
  }
  else {
    uint64_t v30 = 0;
  }
  sub_767A8(v30, (uint64_t)&v33);
  uint64_t v31 = v34;
  double result = *(double *)&v33;
  *(_OWORD *)(a2 + 104) = v33;
  *(void *)(a2 + 120) = v31;
  return result;
}

void sub_2DEA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2DE7D0(&a9);
  sub_2DF518(v9);
  _Unwind_Resume(a1);
}

void sub_2DEA78(_Unwind_Exception *a1)
{
  sub_2DF518(v1);
  _Unwind_Resume(a1);
}

void sub_2DEA8C(_Unwind_Exception *a1)
{
  sub_2DF518(v1);
  _Unwind_Resume(a1);
}

void sub_2DEAA0(_Unwind_Exception *a1)
{
  sub_2DF518(v1);
  _Unwind_Resume(a1);
}

void sub_2DEAB4(_Unwind_Exception *a1)
{
  sub_2DF518(v1);
  _Unwind_Resume(a1);
}

void sub_2DEAC8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x492492492492493) {
    sub_2E00();
  }
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 56 * a2;
  uint64_t v6 = (char *)operator new(56 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v9 = &v6[(char *)v4 - (char *)v2];
  do
  {
    long long v10 = *(_OWORD *)(v4 - 7);
    *((void *)v9 - 5) = *(v4 - 5);
    *(_OWORD *)(v9 - 56) = v10;
    *(v4 - 6) = 0;
    *(v4 - 5) = 0;
    *(v4 - 7) = 0;
    long long v11 = *((_OWORD *)v4 - 2);
    *((void *)v9 - 2) = *(v4 - 2);
    *((_OWORD *)v9 - 2) = v11;
    *(v4 - 3) = 0;
    *(v4 - 2) = 0;
    *(v4 - 4) = 0;
    *((void *)v9 - 1) = *(v4 - 1);
    v9 -= 56;
    v4 -= 7;
  }
  while (v4 != v2);
  uint64_t v12 = *(void ***)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v12)
  {
    while (1)
    {
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*(v2 - 4));
        if (*((char *)v2 - 33) < 0) {
LABEL_13:
        }
          operator delete(*(v2 - 7));
      }
      else if (*((char *)v2 - 33) < 0)
      {
        goto LABEL_13;
      }
      v2 -= 7;
      if (v2 == v12)
      {
        uint64_t v2 = v12;
        break;
      }
    }
  }
  if (!v2) {
    return;
  }
LABEL_16:

  operator delete(v2);
}

uint64_t sub_2DEC3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    if (*(char *)(i - 9) < 0)
    {
      operator delete(*(void **)(i - 32));
      if ((*(char *)(i - 33) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((*(char *)(i - 33) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 56));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

long long *sub_2DECC0(long long **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 56;
  uint64_t v8 = (long long *)((char *)*a1 + 56 * v7);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v26 > 0x492492492492492) {
      sub_2E00();
    }
    unint64_t v27 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - (void)v5) >> 3);
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    if (v27 >= 0x249249249249249) {
      unint64_t v28 = 0x492492492492492;
    }
    else {
      unint64_t v28 = v26;
    }
    uint64_t v54 = a1 + 2;
    if (v28)
    {
      if (v28 > 0x492492492492492) {
        sub_188D718();
      }
      uint64_t v29 = (long long *)operator new(56 * v28);
    }
    else
    {
      uint64_t v29 = 0;
    }
    BOOL v50 = v29;
    BOOL v51 = (long long *)((char *)v29 + 56 * v7);
    unsigned int v52 = v51;
    uint64_t v53 = (long long *)((char *)v29 + 56 * v28);
    sub_2DF160(&v50, (long long *)a3);
    uint64_t v36 = v51;
    uint64_t v37 = *a1;
    uint64_t v38 = v51;
    if (*a1 != v8)
    {
      uint64_t v39 = v51;
      uint64_t v40 = v8;
      do
      {
        uint64_t v38 = (long long *)((char *)v39 - 56);
        long long v41 = *(long long *)((char *)v40 - 56);
        *((void *)v39 - 5) = *((void *)v40 - 5);
        *(long long *)((char *)v39 - 56) = v41;
        *((void *)v40 - 6) = 0;
        *((void *)v40 - 5) = 0;
        *((void *)v40 - 7) = 0;
        long long v42 = *(v40 - 2);
        *((void *)v39 - 2) = *((void *)v40 - 2);
        *(v39 - 2) = v42;
        *((void *)v40 - 3) = 0;
        *((void *)v40 - 2) = 0;
        *((void *)v40 - 4) = 0;
        *((void *)v39 - 1) = *((void *)v40 - 1);
        uint64_t v39 = (long long *)((char *)v39 - 56);
        uint64_t v40 = (long long *)((char *)v40 - 56);
      }
      while (v40 != v37);
    }
    BOOL v51 = v38;
    uint64_t v43 = a1[1];
    uint64_t v44 = v52;
    if (v43 != v8)
    {
      do
      {
        long long v45 = *v8;
        *((void *)v44 + 2) = *((void *)v8 + 2);
        *uint64_t v44 = v45;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = 0;
        *(void *)uint64_t v8 = 0;
        long long v46 = *(long long *)((char *)v8 + 24);
        *((void *)v44 + 5) = *((void *)v8 + 5);
        *(long long *)((char *)v44 + 24) = v46;
        *((void *)v8 + 4) = 0;
        *((void *)v8 + 5) = 0;
        *((void *)v8 + 3) = 0;
        *((void *)v44 + 6) = *((void *)v8 + 6);
        uint64_t v44 = (long long *)((char *)v44 + 56);
        uint64_t v8 = (long long *)((char *)v8 + 56);
      }
      while (v8 != v43);
      uint64_t v38 = v51;
      uint64_t v8 = a1[1];
    }
    uint64_t v47 = *a1;
    *a1 = v38;
    a1[1] = v44;
    unsigned int v48 = a1[2];
    a1[2] = v53;
    unsigned int v52 = v8;
    uint64_t v53 = v48;
    BOOL v50 = v47;
    BOOL v51 = v47;
    if (v8 == v47)
    {
      if (!v8) {
        return v36;
      }
      goto LABEL_36;
    }
    while (1)
    {
      unsigned int v52 = (long long *)((char *)v8 - 56);
      if (*((char *)v8 - 9) < 0)
      {
        operator delete(*((void **)v8 - 4));
        if (*((char *)v8 - 33) < 0) {
LABEL_44:
        }
          operator delete(*((void **)v8 - 7));
      }
      else if (*((char *)v8 - 33) < 0)
      {
        goto LABEL_44;
      }
      uint64_t v8 = v52;
      if (v52 == v47)
      {
        uint64_t v8 = v50;
        if (!v50) {
          return v36;
        }
LABEL_36:
        operator delete(v8);
        return v36;
      }
    }
  }
  if (v8 == (long long *)v6)
  {
    long long v33 = *(_OWORD *)a3;
    *((void *)v8 + 2) = *(void *)(a3 + 16);
    *uint64_t v8 = v33;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    uint64_t v34 = (char *)v5 + 56 * v7;
    long long v35 = *(_OWORD *)(a3 + 24);
    *((void *)v34 + 5) = *(void *)(a3 + 40);
    *(_OWORD *)(v34 + 24) = v35;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 24) = 0;
    *((void *)v34 + 6) = *(void *)(a3 + 48);
    a1[1] = (long long *)((char *)v8 + 56);
  }
  else
  {
    long long v10 = (char *)v8 + 56;
    unint64_t v11 = v6 - 56;
    uint64_t v12 = a1[1];
    if (v6 >= 0x38)
    {
      do
      {
        long long v13 = *(_OWORD *)v11;
        *((void *)v12 + 2) = *(void *)(v11 + 16);
        long long *v12 = v13;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)unint64_t v11 = 0;
        long long v14 = *(_OWORD *)(v11 + 24);
        *((void *)v12 + 5) = *(void *)(v11 + 40);
        *(long long *)((char *)v12 + 24) = v14;
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 24) = 0;
        *((void *)v12 + 6) = *(void *)(v11 + 48);
        uint64_t v12 = (long long *)((char *)v12 + 56);
        v11 += 56;
      }
      while (v11 < v6);
    }
    a1[1] = v12;
    if ((char *)v6 != v10)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - (void)v10) >> 3);
      uint64_t v17 = (char *)v5 + 56 * v7 + 56 * v16;
      uint64_t v18 = -56 * v16;
      do
      {
        uint64_t v21 = v6 + v15;
        uint64_t v22 = (void **)(v6 + v15 - 56);
        if (*(char *)(v6 + v15 - 33) < 0) {
          operator delete(*v22);
        }
        int v23 = &v17[v15 - 56];
        long long v24 = *(_OWORD *)v23;
        *(void *)(v6 + v15 - 40) = *(void *)&v17[v15 - 40];
        *(_OWORD *)uint64_t v22 = v24;
        v17[v15 - 33] = 0;
        *int v23 = 0;
        uint64_t v25 = (void **)(v21 - 32);
        if (*(char *)(v21 - 9) < 0) {
          operator delete(*v25);
        }
        uint64_t v19 = &v17[v15];
        long long v20 = *(_OWORD *)&v17[v15 - 32];
        *(void *)(v21 - 16) = *(void *)&v17[v15 - 16];
        *(_OWORD *)uint64_t v25 = v20;
        *(v19 - 9) = 0;
        *(v19 - 32) = 0;
        *(void *)(v6 + v15 - 8) = *(void *)&v17[v15 - 8];
        v15 -= 56;
      }
      while (v18 != v15);
    }
    if (*((char *)v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    long long v30 = *(_OWORD *)a3;
    *((void *)v8 + 2) = *(void *)(a3 + 16);
    *uint64_t v8 = v30;
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    uint64_t v31 = (void **)v5 + 7 * v7 + 3;
    if (*((char *)v8 + 47) < 0) {
      operator delete(*v31);
    }
    long long v32 = *(_OWORD *)(a3 + 24);
    *((void *)v5 + 7 * v7 + 5) = *(void *)(a3 + 40);
    *(_OWORD *)uint64_t v31 = v32;
    *(unsigned char *)(a3 + 47) = 0;
    *(unsigned char *)(a3 + 24) = 0;
    *((void *)v5 + 7 * v7 + 6) = *(void *)(a3 + 48);
  }
  return v8;
}

void sub_2DF14C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2DEC3C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_2DF160(long long **a1, long long *a2)
{
  uint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_34;
  }
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (((char *)v6 - (char *)*a1) >> 3);
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    if (v6 == v4)
    {
      uint64_t v29 = (long long *)((char *)v6 - 56 * v9);
    }
    else
    {
      uint64_t v11 = -56 * v9;
      do
      {
        uint64_t v13 = (uint64_t)v6 + v11;
        if (*((char *)v6 + v11 + 23) < 0) {
          operator delete(*(void **)v13);
        }
        long long v14 = *v6;
        *(void *)(v13 + 16) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v13 = v14;
        *((unsigned char *)v6 + 23) = 0;
        *(unsigned char *)unint64_t v6 = 0;
        uint64_t v15 = (void **)(v13 + 24);
        if (*(char *)(v13 + 47) < 0) {
          operator delete(*v15);
        }
        long long v12 = *(long long *)((char *)v6 + 24);
        *(void *)(v13 + 40) = *((void *)v6 + 5);
        *(_OWORD *)uint64_t v15 = v12;
        *((unsigned char *)v6 + 47) = 0;
        *((unsigned char *)v6 + 24) = 0;
        *(void *)((char *)v6 + v11 + 48) = *((void *)v6 + 6);
        unint64_t v6 = (long long *)((char *)v6 + 56);
      }
      while (v6 != v4);
      uint64_t v4 = a1[1];
      uint64_t v29 = (long long *)((char *)v6 + 56 * v10);
    }
    a1[1] = (long long *)((char *)v4 + 56 * v10);
    a1[2] = v29;
    uint64_t v4 = v29;
    goto LABEL_34;
  }
  unint64_t v16 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v4 - (char *)v5) >> 3);
  if (v4 == v5) {
    unint64_t v16 = 1;
  }
  if (v16 >= 0x492492492492493) {
    sub_188D718();
  }
  unint64_t v17 = v16 >> 2;
  uint64_t v18 = 56 * v16;
  uint64_t v19 = (char *)operator new(56 * v16);
  long long v20 = &v19[56 * v17];
  uint64_t v21 = &v19[v18];
  if (v4 != v6)
  {
    uint64_t v22 = &v20[(char *)v4 - (char *)v6];
    uint64_t v23 = 56 * v17;
    do
    {
      long long v24 = &v19[v23];
      long long v25 = *v6;
      *((void *)v24 + 2) = *((void *)v6 + 2);
      *(_OWORD *)long long v24 = v25;
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = 0;
      *(void *)unint64_t v6 = 0;
      long long v26 = *(long long *)((char *)v6 + 24);
      *((void *)v24 + 5) = *((void *)v6 + 5);
      *(_OWORD *)(v24 + 24) = v26;
      *((void *)v6 + 4) = 0;
      *((void *)v6 + 5) = 0;
      *((void *)v6 + 3) = 0;
      *((void *)v24 + 6) = *((void *)v6 + 6);
      v23 += 56;
      unint64_t v6 = (long long *)((char *)v6 + 56);
    }
    while (v24 + 56 != v22);
    uint64_t v5 = *a1;
    unint64_t v27 = a1[1];
    unint64_t v28 = a1[2];
    *a1 = (long long *)v19;
    a1[1] = (long long *)v20;
    a1[2] = (long long *)v22;
    a1[3] = (long long *)v21;
    while (1)
    {
      if (v28 == v27) {
        goto LABEL_31;
      }
      if (*((char *)v28 - 9) < 0)
      {
        operator delete(*((void **)v28 - 4));
        if ((*((char *)v28 - 33) & 0x80000000) == 0) {
          goto LABEL_20;
        }
      }
      else if ((*((char *)v28 - 33) & 0x80000000) == 0)
      {
        goto LABEL_20;
      }
      operator delete(*((void **)v28 - 7));
LABEL_20:
      unint64_t v28 = (long long *)((char *)v28 - 56);
    }
  }
  *a1 = (long long *)v19;
  a1[1] = (long long *)v20;
  a1[2] = (long long *)v20;
  a1[3] = (long long *)v21;
LABEL_31:
  if (v5) {
    operator delete(v5);
  }
  uint64_t v4 = a1[2];
LABEL_34:
  long long v30 = *a2;
  *((void *)v4 + 2) = *((void *)a2 + 2);
  *uint64_t v4 = v30;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *((void *)v4 + 5) = *((void *)a2 + 5);
  *(long long *)((char *)v4 + 24) = (__int128)result;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)v4 + 6) = *((void *)a2 + 6);
  a1[2] = (long long *)((char *)a1[2] + 56);
  return result;
}

uint64_t sub_2DF404(uint64_t a1)
{
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 111) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    operator delete(*(void **)(a1 + 88));
    uint64_t v2 = *(void ***)(a1 + 64);
    if (!v2)
    {
LABEL_4:
      if (*(char *)(a1 + 55) < 0) {
        goto LABEL_19;
      }
      goto LABEL_5;
    }
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 111) < 0) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v2 = *(void ***)(a1 + 64);
  if (!v2) {
    goto LABEL_4;
  }
LABEL_9:
  uint64_t v4 = *(void ***)(a1 + 72);
  if (v4 == v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
    if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_19:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_20;
  }
  do
  {
    if (*((char *)v4 - 9) < 0)
    {
      operator delete(*(v4 - 4));
      if ((*((char *)v4 - 33) & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
    else if ((*((char *)v4 - 33) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(*(v4 - 7));
LABEL_12:
    v4 -= 7;
  }
  while (v4 != v2);
  uint64_t v5 = *(void **)(a1 + 64);
  *(void *)(a1 + 72) = v2;
  operator delete(v5);
  if (*(char *)(a1 + 55) < 0) {
    goto LABEL_19;
  }
LABEL_5:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
    return a1;
  }
LABEL_20:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void **sub_2DF518(void **a1)
{
  uint64_t v2 = (void **)a1[13];
  if (v2)
  {
    unint64_t v3 = (void **)a1[14];
    uint64_t v4 = a1[13];
    if (v3 == v2)
    {
LABEL_11:
      a1[14] = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        uint64_t v4 = a1[13];
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  uint64_t v5 = (void **)a1[10];
  if (!v5) {
    goto LABEL_23;
  }
  unint64_t v6 = (void **)a1[11];
  uint64_t v7 = a1[10];
  if (v6 != v5)
  {
    while (1)
    {
      if (*((char *)v6 - 9) < 0)
      {
        operator delete(*(v6 - 4));
        if (*((char *)v6 - 33) < 0) {
LABEL_20:
        }
          operator delete(*(v6 - 7));
      }
      else if (*((char *)v6 - 33) < 0)
      {
        goto LABEL_20;
      }
      v6 -= 7;
      if (v6 == v5)
      {
        uint64_t v7 = a1[10];
        break;
      }
    }
  }
  a1[11] = v5;
  operator delete(v7);
LABEL_23:
  uint64_t v8 = (void **)a1[7];
  if (v8)
  {
    uint64_t v9 = (void **)a1[8];
    uint64_t v10 = a1[7];
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 9) < 0) {
          operator delete(*(v9 - 4));
        }
        v9 -= 5;
      }
      while (v9 != v8);
      uint64_t v10 = a1[7];
    }
    a1[8] = v8;
    operator delete(v10);
  }
  uint64_t v11 = (void **)a1[3];
  if (v11)
  {
    long long v12 = (void **)a1[4];
    uint64_t v13 = a1[3];
    if (v12 == v11)
    {
LABEL_41:
      a1[4] = v11;
      operator delete(v13);
      goto LABEL_42;
    }
    while (1)
    {
      if (*((char *)v12 - 1) < 0)
      {
        operator delete(*(v12 - 3));
        if (*((char *)v12 - 25) < 0) {
LABEL_39:
        }
          operator delete(*(v12 - 6));
      }
      else if (*((char *)v12 - 25) < 0)
      {
        goto LABEL_39;
      }
      v12 -= 6;
      if (v12 == v11)
      {
        uint64_t v13 = a1[3];
        goto LABEL_41;
      }
    }
  }
LABEL_42:
  long long v14 = (void **)*a1;
  if (*a1)
  {
    uint64_t v15 = (void **)a1[1];
    unint64_t v16 = *a1;
    if (v15 == v14)
    {
LABEL_52:
      a1[1] = v14;
      operator delete(v16);
      return a1;
    }
    while (1)
    {
      if (*((char *)v15 - 1) < 0)
      {
        operator delete(*(v15 - 3));
        if (*((char *)v15 - 25) < 0) {
LABEL_50:
        }
          operator delete(*(v15 - 6));
      }
      else if (*((char *)v15 - 25) < 0)
      {
        goto LABEL_50;
      }
      v15 -= 6;
      if (v15 == v14)
      {
        unint64_t v16 = *a1;
        goto LABEL_52;
      }
    }
  }
  return a1;
}

void sub_2DF71C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x666666666666667) {
    sub_2E00();
  }
  uint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 40 * a2;
  unint64_t v6 = (char *)operator new(40 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = &v8[v9 * 8];
    uint64_t v11 = &v4[v9];
    *((_DWORD *)v10 - 10) = v4[v9 - 5];
    long long v12 = *(_OWORD *)&v4[v9 - 4];
    *((void *)v10 - 2) = v4[v9 - 2];
    *((_OWORD *)v10 - 2) = v12;
    *(v11 - 3) = 0;
    *(v11 - 2) = 0;
    *(v11 - 4) = 0;
    *(v10 - 8) = (char)v4[v9 - 1];
    v9 -= 5;
  }
  while (&v4[v9] != v2);
  uint64_t v13 = *(void ***)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  *(void *)a1 = &v8[v9 * 8];
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v13)
  {
    do
    {
      if (*((char *)v2 - 9) < 0) {
        operator delete(*(v2 - 4));
      }
      v2 -= 5;
    }
    while (v2 != v13);
    uint64_t v2 = v13;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

char *sub_2DF860(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 40;
  uint64_t v8 = &(*a1)[40 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v21 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)v5) >> 3);
    if (2 * v22 > v21) {
      unint64_t v21 = 2 * v22;
    }
    if (v22 >= 0x333333333333333) {
      unint64_t v23 = 0x666666666666666;
    }
    else {
      unint64_t v23 = v21;
    }
    unsigned int v48 = a1 + 2;
    if (v23)
    {
      if (v23 > 0x666666666666666) {
        sub_188D718();
      }
      long long v24 = (char *)operator new(40 * v23);
    }
    else
    {
      long long v24 = 0;
    }
    uint64_t v44 = v24;
    long long v45 = &v24[40 * v7];
    long long v46 = v45;
    uint64_t v47 = &v24[40 * v23];
    sub_2DFC3C((uint64_t)&v44, a3);
    uint64_t v29 = v45;
    long long v30 = *a1;
    uint64_t v31 = v45;
    if (*a1 != v8)
    {
      uint64_t v32 = 0;
      do
      {
        long long v33 = &v29[v32];
        uint64_t v34 = &v8[v32];
        *((_DWORD *)v33 - 10) = *(_DWORD *)&v8[v32 - 40];
        long long v35 = *(_OWORD *)&v8[v32 - 32];
        *((void *)v33 - 2) = *(void *)&v8[v32 - 16];
        *((_OWORD *)v33 - 2) = v35;
        *((void *)v34 - 3) = 0;
        *((void *)v34 - 2) = 0;
        *((void *)v34 - 4) = 0;
        *(v33 - 8) = v8[v32 - 8];
        v32 -= 40;
      }
      while (&v8[v32] != v30);
      uint64_t v31 = &v29[v32];
    }
    long long v45 = v31;
    uint64_t v36 = a1[1];
    uint64_t v37 = v46;
    if (v36 != v8)
    {
      do
      {
        *(_DWORD *)uint64_t v37 = *(_DWORD *)v8;
        long long v38 = *(_OWORD *)(v8 + 8);
        *((void *)v37 + 3) = *((void *)v8 + 3);
        *(_OWORD *)(v37 + 8) = v38;
        *((void *)v8 + 2) = 0;
        *((void *)v8 + 3) = 0;
        *((void *)v8 + 1) = 0;
        v37[32] = v8[32];
        v37 += 40;
        v8 += 40;
      }
      while (v8 != v36);
      uint64_t v31 = v45;
      uint64_t v8 = a1[1];
    }
    uint64_t v39 = *a1;
    *a1 = v31;
    a1[1] = v37;
    uint64_t v40 = a1[2];
    a1[2] = v47;
    long long v46 = v8;
    uint64_t v47 = v40;
    uint64_t v44 = v39;
    long long v45 = v39;
    if (v8 == v39)
    {
      if (!v8) {
        return v29;
      }
    }
    else
    {
      do
      {
        long long v42 = v8 - 40;
        long long v46 = v8 - 40;
        if (*(v8 - 9) < 0)
        {
          operator delete(*((void **)v8 - 4));
          long long v42 = v46;
        }
        uint64_t v8 = v42;
      }
      while (v42 != v39);
      uint64_t v8 = v44;
      if (!v44) {
        return v29;
      }
    }
    operator delete(v8);
    return v29;
  }
  if (v8 == (char *)v6)
  {
    *(_DWORD *)uint64_t v8 = *(_DWORD *)a3;
    unint64_t v27 = &v5[40 * v7];
    long long v28 = *(_OWORD *)(a3 + 8);
    *((void *)v27 + 3) = *(void *)(a3 + 24);
    *(_OWORD *)(v27 + 8) = v28;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    v27[32] = *(unsigned char *)(a3 + 32);
    a1[1] = v8 + 40;
  }
  else
  {
    uint64_t v10 = v8 + 40;
    unint64_t v11 = v6 - 40;
    uint64_t v43 = (a2 - (uint64_t)*a1) / 40;
    long long v12 = a1[1];
    if (v6 >= 0x28)
    {
      do
      {
        *(_DWORD *)long long v12 = *(_DWORD *)v11;
        long long v13 = *(_OWORD *)(v11 + 8);
        *((void *)v12 + 3) = *(void *)(v11 + 24);
        *(_OWORD *)(v12 + 8) = v13;
        *(void *)(v11 + 16) = 0;
        *(void *)(v11 + 24) = 0;
        *(void *)(v11 + 8) = 0;
        v12[32] = *(unsigned char *)(v11 + 32);
        v12 += 40;
        v11 += 40;
      }
      while (v11 < v6);
    }
    a1[1] = v12;
    if ((char *)v6 != v10)
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v10) >> 3);
      unint64_t v16 = &v5[40 * v43 + 40 * v15];
      uint64_t v17 = -40 * v15;
      do
      {
        uint64_t v19 = &v16[v14];
        *(_DWORD *)(v6 + v14 - 40) = *(_DWORD *)&v16[v14 - 40];
        long long v20 = (void **)(v6 + v14 - 32);
        if (*(char *)(v6 + v14 - 9) < 0) {
          operator delete(*v20);
        }
        long long v18 = *((_OWORD *)v19 - 2);
        *(void *)(v6 + v14 - 16) = *((void *)v19 - 2);
        *(_OWORD *)long long v20 = v18;
        *(v19 - 9) = 0;
        *(v19 - 32) = 0;
        *(unsigned char *)(v6 + v14 - 8) = *(v19 - 8);
        v14 -= 40;
      }
      while (v17 != v14);
    }
    *(_DWORD *)uint64_t v8 = *(_DWORD *)a3;
    long long v25 = (void **)&v5[40 * v43 + 8];
    if (v8[31] < 0) {
      operator delete(*v25);
    }
    long long v26 = *(_OWORD *)(a3 + 8);
    *(void *)&v5[40 * v43 + 24] = *(void *)(a3 + 24);
    *(_OWORD *)long long v25 = v26;
    *(unsigned char *)(a3 + 31) = 0;
    *(unsigned char *)(a3 + 8) = 0;
    v5[40 * v43 + 32] = *(unsigned char *)(a3 + 32);
  }
  return v8;
}

void sub_2DFC28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B79D0((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_2DFC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)(a1 + 16);
  if (v4 == *(_DWORD **)(a1 + 24))
  {
    uint64_t v5 = *(unsigned char **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      unint64_t v14 = 0x999999999999999ALL * (((char *)v4 - v5) >> 3);
      if (v4 == (_DWORD *)v5) {
        unint64_t v14 = 1;
      }
      if (v14 >= 0x666666666666667) {
        sub_188D718();
      }
      unint64_t v15 = v14 >> 2;
      uint64_t v16 = 40 * v14;
      uint64_t v17 = (char *)operator new(40 * v14);
      long long v18 = &v17[40 * v15];
      uint64_t v19 = &v17[v16];
      if (v4 == (_DWORD *)v6)
      {
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v18;
        *(void *)(a1 + 24) = v19;
      }
      else
      {
        long long v20 = (char *)v4 + (void)v18 - v6;
        uint64_t v21 = 40 * v15;
        do
        {
          unint64_t v22 = &v17[v21];
          *(_DWORD *)unint64_t v22 = *(_DWORD *)v6;
          long long v23 = *(_OWORD *)(v6 + 8);
          *((void *)v22 + 3) = *(void *)(v6 + 24);
          *(_OWORD *)(v22 + 8) = v23;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
          *(void *)(v6 + 8) = 0;
          v22[32] = *(unsigned char *)(v6 + 32);
          v21 += 40;
          v6 += 40;
        }
        while (v22 + 40 != v20);
        uint64_t v5 = *(unsigned char **)a1;
        uint64_t v24 = *(void *)(a1 + 8);
        uint64_t v25 = *(void *)(a1 + 16);
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v20;
        *(void *)(a1 + 24) = v19;
        while (v25 != v24)
        {
          if (*(char *)(v25 - 9) < 0) {
            operator delete(*(void **)(v25 - 32));
          }
          v25 -= 40;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(_DWORD **)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if ((_DWORD *)v6 == v4)
      {
        long long v26 = (_DWORD *)(v6 - 40 * v9);
      }
      else
      {
        uint64_t v11 = -40 * v9;
        do
        {
          *(_DWORD *)(v6 + 40 * v10) = *(_DWORD *)v6;
          long long v13 = (void **)(v6 + v11 + 8);
          if (*(char *)(v6 + v11 + 31) < 0) {
            operator delete(*v13);
          }
          long long v12 = *(_OWORD *)(v6 + 8);
          *(void *)(v6 + v11 + 24) = *(void *)(v6 + 24);
          *(_OWORD *)long long v13 = v12;
          *(unsigned char *)(v6 + 31) = 0;
          *(unsigned char *)(v6 + 8) = 0;
          *(unsigned char *)(v6 + v11 + 32) = *(unsigned char *)(v6 + 32);
          v6 += 40;
        }
        while ((_DWORD *)v6 != v4);
        uint64_t v4 = *(_DWORD **)(a1 + 8);
        long long v26 = (_DWORD *)(v6 + 40 * v10);
      }
      *(void *)(a1 + 8) = &v4[10 * v10];
      *(void *)(a1 + 16) = v26;
      uint64_t v4 = v26;
    }
  }
  *uint64_t v4 = *(_DWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 8);
  *((void *)v4 + 3) = *(void *)(a2 + 24);
  *(__n128 *)(v4 + 2) = result;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *((unsigned char *)v4 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 16) += 40;
  return result;
}

unint64_t sub_2DFE6C(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  if (!v3) {
    return 0xFFFFFFFF00000000;
  }
  uint64_t v4 = sub_2E157C(a1, v3, 1);
  if (!v4) {
    return 0xFFFFFFFF00000000;
  }
  uint64_t v5 = &v4[-*(int *)v4];
  if (*(unsigned __int16 *)v5 < 5u) {
    return 0xFFFFFFFF00000000;
  }
  uint64_t v6 = *((unsigned __int16 *)v5 + 2);
  if (!v6) {
    return 0xFFFFFFFF00000000;
  }
  int64_t v7 = &v4[v6 + *(unsigned int *)&v4[v6]];
  unsigned int v10 = *(_DWORD *)v7;
  uint64_t v8 = (unsigned int *)(v7 + 4);
  unint64_t v9 = v10;
  uint64_t v11 = &v8[v10];
  if (v10)
  {
    long long v12 = v8;
    do
    {
      unint64_t v13 = v9 >> 1;
      unint64_t v14 = (unsigned int *)((char *)v12 + ((2 * v9) & 0x3FFFFFFFCLL));
      unint64_t v15 = *(void *)((char *)v14
                      + *v14
                      + *(unsigned __int16 *)((char *)v14 + *v14 - *(unsigned int *)((char *)v14 + *v14) + 4));
      uint64_t v16 = v14 + 1;
      v9 += ~(v9 >> 1);
      if (((v15 >> 16) & 0xFFFF0000 | (v15 << 32) | ((v15 & 0xFF000000000000) != 0)) >= ((*(void *)a2 >> 16) & 0xFFFF0000 | (*(void *)a2 << 32) | (unint64_t)((*(void *)a2 & 0xFF000000000000) == 0))) {
        unint64_t v9 = v13;
      }
      else {
        long long v12 = v16;
      }
    }
    while (v9);
    if (v12 == v11) {
      return 0xFFFFFFFF00000000;
    }
  }
  else
  {
    long long v12 = v8;
    if (v8 == v11) {
      return 0xFFFFFFFF00000000;
    }
  }
  uint64_t v18 = *(void *)((char *)v12
                  + *v12
                  + *(unsigned __int16 *)((char *)v12 + *v12 - *(unsigned int *)((char *)v12 + *v12) + 4));
  if ((v18 & 0xFFFFFFFFFFFFLL) == (*(void *)a2 & 0xFFFFFFFFFFFFLL)
    && ((v18 & 0xFF000000000000) != 0) != (HIWORD(*(void *)a2) & 1))
  {
    return (sub_2E2964((unint64_t)((char *)v12 - (char *)v8) >> 2) << 32) | *a2;
  }
  return 0xFFFFFFFF00000000;
}

unint64_t sub_2DFFF4(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = sub_2E0044(a1, a2);
  unint64_t v5 = (v3 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(v3 >> 62 == 0) << 63)) ^ 0x2000000000000000;
  return sub_2E0194(a1, (unsigned int *)&v5);
}

unint64_t sub_2E0044(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = sub_2E1FA4(a1, a2, 1);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = &v3[-*(int *)v3];
  if (*(unsigned __int16 *)v4 < 5u) {
    return 0;
  }
  uint64_t v5 = *((unsigned __int16 *)v4 + 2);
  if (!v5) {
    return v5;
  }
  uint64_t v6 = &v3[v5 + *(unsigned int *)&v3[v5]];
  if (*(_DWORD *)v6 <= HIDWORD(a2)) {
    return 0;
  }
  int64_t v7 = (int *)sub_2E2AB8(v6, a2);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
  unsigned int v9 = *v8;
  if (v9 < 5 || !v8[2]) {
    return 0;
  }
  unsigned int v10 = (unsigned int *)((char *)v7 + v8[2]);
  int v11 = *((unsigned __int16 *)v10 + 2);
  uint64_t v12 = *v10;
  int v13 = *((unsigned __int8 *)v10 + 6);
  if (v9 < 0x11) {
    return ((unint64_t)(v11 | ((v13 != 0) << 29)) << 32) | v12;
  }
  uint64_t v14 = v8[8];
  if (!v14) {
    return ((unint64_t)(v11 | ((v13 != 0) << 29)) << 32) | v12;
  }
  int v15 = *((unsigned __int8 *)v7 + v14);
  if (v15 != 1)
  {
    if (v15 == 3) {
      return ((unint64_t)(v11 | ((v13 != 0) << 29) | 0x40000000u) << 32) | v12;
    }
    return ((unint64_t)(v11 | ((v13 != 0) << 29)) << 32) | v12;
  }
  return ((unint64_t)(v11 | ((v13 != 0) << 29) | 0x80000000) << 32) | v12;
}

unint64_t sub_2E0194(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  if (!v3) {
    goto LABEL_13;
  }
  uint64_t v5 = sub_2E1FA4(a1, v3, 1);
  if (!v5) {
    goto LABEL_13;
  }
  uint64_t v6 = (int *)v5;
  int64_t v7 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v7 < 5u) {
    goto LABEL_13;
  }
  uint64_t v8 = *((unsigned __int16 *)v7 + 2);
  if (!v8) {
    goto LABEL_13;
  }
  unsigned int v9 = (unsigned int *)&v5[v8 + *(unsigned int *)&v5[v8]];
  unsigned int v10 = *v9++;
  uint64_t v34 = a1;
  char v33 = 0;
  uint64_t v31 = &v9[v10];
  uint64_t v32 = v9;
  sub_2E2D8C(&v32, &v31, (uint64_t *)a2, (unsigned int **)&v30);
  int v11 = (unsigned int *)((char *)v6 + *(unsigned __int16 *)((char *)v6 - *v6 + 4));
  uint64_t v12 = (unsigned int *)((char *)v11 + *v11);
  int v14 = *v12;
  int v13 = (char *)(v12 + 1);
  if (v30 == &v13[4 * v14])
  {
LABEL_13:
    unsigned int v26 = 0;
    unint64_t v27 = 0xFFFFFFFFLL;
    return v26 | (v27 << 32);
  }
  int v15 = &v30[*(unsigned int *)v30];
  uint64_t v16 = &v15[-*(int *)v15];
  unsigned int v17 = *(unsigned __int16 *)v16;
  if (v17 >= 5 && *((_WORD *)v16 + 2))
  {
    uint64_t v18 = &v15[*((unsigned __int16 *)v16 + 2)];
    int v19 = *((unsigned __int16 *)v18 + 2);
    int v20 = *(_DWORD *)v18;
    int v21 = v18[6];
    if (v17 >= 0x11)
    {
      uint64_t v22 = *((unsigned __int16 *)v16 + 8);
      if (v22)
      {
        int v23 = v15[v22];
        if (v23 == 1)
        {
          int v25 = v19 | ((v21 != 0) << 29);
          unsigned int v24 = 0x80000000;
LABEL_18:
          int v29 = v24 | v25;
          unsigned int v26 = 0;
          unint64_t v27 = 0xFFFFFFFFLL;
          if (v20 != *a2) {
            return v26 | (v27 << 32);
          }
          goto LABEL_19;
        }
        if (v23 == 3)
        {
          unsigned int v24 = 0;
          int v25 = v19 | ((v21 != 0) << 29) | 0x40000000;
          goto LABEL_18;
        }
      }
    }
    unsigned int v24 = 0;
    int v25 = v19 | ((v21 != 0) << 29);
    goto LABEL_18;
  }
  int v29 = 0;
  unsigned int v26 = 0;
  unint64_t v27 = 0xFFFFFFFFLL;
  if (*a2) {
    return v26 | (v27 << 32);
  }
LABEL_19:
  if (v29 == a2[1])
  {
    unint64_t v27 = sub_2E2964((unint64_t)(v30 - v13) >> 2);
    unsigned int v26 = *a2;
  }
  return v26 | (v27 << 32);
}

unint64_t sub_2E0364(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v5 = sub_2E0044(a1, a2);
  unint64_t v8 = (v5 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(v5 >> 62 == 0) << 63)) ^ 0x2000000000000000;
  sub_2E0194(a1, (unsigned int *)&v8);
  unint64_t v6 = sub_2E0044(a1, a3);
  unint64_t v8 = (v6 & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)(v6 >> 62 == 0) << 63)) ^ 0x2000000000000000;
  return sub_2E0194(a1, (unsigned int *)&v8);
}

unint64_t sub_2E03F8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_2E157C(a1, a2, 1);
  if (!v6) {
    goto LABEL_27;
  }
  int64_t v7 = &v6[-*(int *)v6];
  if (*(unsigned __int16 *)v7 < 5u) {
    goto LABEL_27;
  }
  uint64_t v8 = *((unsigned __int16 *)v7 + 2);
  if (!v8)
  {
LABEL_28:
    unint64_t v29 = 0xFFFFFFFF00000000;
    return v29 | v8;
  }
  unsigned int v9 = &v6[v8 + *(unsigned int *)&v6[v8]];
  if (*(_DWORD *)v9 <= HIDWORD(a2)
    || (unsigned int v10 = (int *)sub_2E2690(v9, a2)) == 0
    || (int v11 = (unsigned __int16 *)((char *)v10 - *v10), *v11 < 0xDu))
  {
LABEL_27:
    uint64_t v8 = 0;
    goto LABEL_28;
  }
  uint64_t v8 = v11[6];
  if (!v8) {
    goto LABEL_28;
  }
  uint64_t v12 = (unsigned int *)((char *)v10 + v8 + *(unsigned int *)((char *)v10 + v8));
  int v14 = v12 + 1;
  uint64_t v13 = *v12;
  if (!v13)
  {
    uint64_t v28 = 0;
    unsigned int v17 = v12 + 1;
    goto LABEL_25;
  }
  uint64_t v15 = 8 * v13;
  uint64_t v16 = &v14[2 * v13];
  unsigned int v17 = v12 + 1;
  do
  {
    uint64_t v19 = *v17;
    uint64_t v20 = v17[1];
    int v21 = sub_2E157C(a1, *v17, 1);
    if (!v21) {
      goto LABEL_10;
    }
    uint64_t v22 = &v21[-*(int *)v21];
    if (*(unsigned __int16 *)v22 < 9u) {
      goto LABEL_10;
    }
    uint64_t v23 = *((unsigned __int16 *)v22 + 4);
    if (!v23)
    {
      int v18 = -1;
      if (a3) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    unsigned int v24 = &v21[v23 + *(unsigned int *)&v21[v23]];
    if (*(_DWORD *)v24 > v20 && (int v25 = (int *)sub_2E1414(v24, v19 | (v20 << 32))) != 0)
    {
      unsigned int v26 = (int *)((char *)v25 + *(unsigned __int16 *)((char *)v25 - *v25 + 6));
      int v27 = *v26;
      int v18 = v26[1];
      if (v27 != a3) {
        goto LABEL_12;
      }
    }
    else
    {
LABEL_10:
      int v18 = -1;
      if (a3) {
        goto LABEL_12;
      }
    }
LABEL_11:
    if (v18 == HIDWORD(a3)) {
      goto LABEL_24;
    }
LABEL_12:
    v17 += 2;
    v15 -= 8;
  }
  while (v15);
  unsigned int v17 = v16;
LABEL_24:
  uint64_t v28 = 2 * *v12;
LABEL_25:
  if (v17 == &v14[v28]) {
    goto LABEL_27;
  }
  uint64_t v8 = *v17;
  unint64_t v29 = (unint64_t)v17[1] << 32;
  return v29 | v8;
}

int *sub_2E05C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result = (int *)sub_2E157C(a1, a2, 1);
  if (result
    && (unint64_t v6 = (unsigned __int16 *)((char *)result - *result), *v6 >= 9u)
    && (uint64_t v7 = v6[4]) != 0
    && (__n128 result = (int *)((char *)result + v7 + *(unsigned int *)((char *)result + v7)), *result > HIDWORD(a2))
    && (__n128 result = (int *)sub_2E1414(result, a2)) != 0)
  {
    uint64_t v8 = (unsigned __int16 *)((char *)result - *result);
    if (*v8 >= 9u
      && (uint64_t v9 = v8[4]) != 0
      && (unsigned int v10 = (unsigned int *)((char *)result + v9 + *(unsigned int *)((char *)result + v9)), v11 = *v10, v11))
    {
      uint64_t v12 = v11;
      uint64_t v13 = operator new(8 * v11);
      *(void *)&long long v17 = v13;
      *((void *)&v17 + 1) = v13;
      int v18 = &v13[v12];
      int v14 = v10 + 1;
      do
      {
        unint64_t v19 = *v14 & 0xFFFFFFFFFFFFLL | ((unint64_t)((*v14 & 0xFF000000000000) == 0) << 48);
        __n128 result = (int *)sub_2D6254((unint64_t *)&v17, v13, (int *)&v19);
        uint64_t v13 = result + 2;
        ++v14;
        --v12;
      }
      while (v12 * 8);
      long long v15 = v17;
      uint64_t v16 = v18;
    }
    else
    {
      uint64_t v16 = 0;
      long long v15 = 0uLL;
    }
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 16) = v16;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_2E0708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_2E0724@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = a2[1];
  v19[0] = *a2;
  v19[1] = v4;
  __n128 result = (int *)sub_2E2ED4(a1, (int32x2_t *)v19);
  if (result && (v6 = (unsigned __int16 *)((char *)result - *result), *v6 >= 0xDu) && (uint64_t v7 = v6[6]) != 0)
  {
    uint64_t v8 = (int *)((char *)result + v7 + *(unsigned int *)((char *)result + v7));
    uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
    if (*v9 >= 5u
      && (uint64_t v10 = v9[2]) != 0
      && (uint64_t v11 = (unsigned int *)((char *)v8 + v10 + *(unsigned int *)((char *)v8 + v10)), v12 = *v11, v12))
    {
      uint64_t v13 = (char *)operator new(12 * v12);
      *(void *)&long long v20 = v13;
      *((void *)&v20 + 1) = v13;
      int v21 = &v13[12 * v12];
      int v14 = v11 + 1;
      uint64_t v15 = (uint64_t)&v11[2 * v12 + 1];
      do
      {
        LODWORD(v16) = v14[1];
        if (v16 >= 0xFFFFFFFE) {
          uint64_t v16 = 4294967294;
        }
        else {
          uint64_t v16 = v16;
        }
        unint64_t v22 = *v14 | (unint64_t)(v16 << 32);
        int v23 = 0x7FFFFFFF;
        __n128 result = (int *)sub_32ACC((char **)&v20, (uint64_t)v13, (uint64_t)&v22);
        uint64_t v13 = (char *)(result + 3);
        v14 += 2;
      }
      while (v14 != (unsigned int *)v15);
      long long v17 = v20;
      int v18 = v21;
    }
    else
    {
      int v18 = 0;
      long long v17 = 0uLL;
    }
    *(_OWORD *)a3 = v17;
    *(void *)(a3 + 16) = v18;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_2E0868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2E0884(uint64_t a1, unsigned int *a2)
{
  sub_2D5904(a1, a2, 0, (char **)(a1 + 7800));
  unsigned int v3 = *(uint64_t **)(a1 + 7800);
  if (v3 == *(uint64_t **)(a1 + 7808)) {
    return -1;
  }
  sub_2954EC(a1, *v3, (uint64_t)v6);
  unint64_t v4 = sub_2E1AA4((uint64_t)v6);
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return v4;
}

void sub_2E0924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2E0940(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void **a6@<X8>)
{
  unint64_t v12 = sub_2E0E5C(a1, *(void *)a3, *(void *)(a3 + 8));
  sub_2E1028(a1, v12, &v81);
  if (a4 == a5)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
  else
  {
    sub_2E11B0(a1, a3, (uint64_t)a6);
    sub_2E130C(a1, a3, (uint64_t)__p);
    if (*((_WORD *)__p[0] + a4)) {
      uint64_t v13 = *((unsigned __int16 *)__p[0] + a4) - 1;
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = *((unsigned __int16 *)__p[0] + a5);
    uint64_t v15 = (char *)*a6;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a6[1] - (unsigned char *)*a6) >> 2);
    BOOL v17 = v16 > v14;
    if (v16 != v14)
    {
      unint64_t v18 = v14 + 1;
      if (v17)
      {
        if (v18 < v16) {
          a6[1] = &v15[12 * v18];
        }
      }
      else
      {
        sub_3907C(a6, v18 - v16);
        uint64_t v15 = (char *)*a6;
      }
    }
    if (v13)
    {
      unint64_t v19 = &v15[12 * v13];
      long long v20 = (char *)a6[1];
      int64_t v21 = v20 - v19;
      if (v20 != v19) {
        memmove(v15, v19, v20 - v19);
      }
      a6[1] = &v15[v21];
    }
    if (a4)
    {
      unint64_t v22 = (unsigned int *)sub_2D5EC4(a2, *((unsigned int *)v81 + 2 * a4) | ((unint64_t)(unsigned __int16)*((_DWORD *)v81 + 2 * a4 + 1) << 32), (*((_DWORD *)v81 + 2 * a4 + 1) & 0x20000000) == 0);
      uint64_t v23 = sub_2E0884(a2, v22);
      unsigned int v24 = (char *)*a6;
      LODWORD(v25) = *(_DWORD *)*a6;
      LODWORD(v26) = *((_DWORD *)*a6 + 1);
      double v27 = (double)v25;
      double v28 = (double)v26;
      LODWORD(v26) = *((_DWORD *)*a6 + 3);
      LODWORD(v29) = *((_DWORD *)*a6 + 4);
      double v30 = (double)v26 - v27;
      double v31 = (double)v29 - v28;
      double v32 = v30 * v30 + v31 * v31;
      BOOL v33 = fabs(v32) < 2.22044605e-16 || v32 == 0.0;
      double v34 = (((double)v23 - v27) * v30 + ((double)HIDWORD(v23) - v28) * v31) / v32;
      if (v33) {
        double v34 = 1.79769313e308;
      }
      if (v34 <= 0.0)
      {
        uint64_t v38 = *(void *)v24;
        unsigned int v39 = *((_DWORD *)v24 + 2);
      }
      else if (v34 >= 1.0)
      {
        uint64_t v38 = *(void *)(v24 + 12);
        unsigned int v39 = *((_DWORD *)v24 + 5);
      }
      else
      {
        int v35 = *((_DWORD *)v24 + 2);
        if (v35 == 0x7FFFFFFF)
        {
          BOOL v36 = 0;
          double v37 = 0.0;
        }
        else
        {
          double v40 = (double)v35;
          int v41 = *((_DWORD *)v24 + 5);
          BOOL v33 = v41 == 0x7FFFFFFF;
          double v37 = v34 * ((double)v41 - v40) + v40;
          BOOL v36 = v41 != 0x7FFFFFFF;
          if (v33) {
            double v37 = 0.0;
          }
        }
        double v42 = v31 * v34;
        double v43 = v30 * v34 + v27;
        if (v43 < 0.0) {
          double v44 = -0.5;
        }
        else {
          double v44 = 0.5;
        }
        uint64_t v45 = (v43 + v44);
        double v46 = v42 + v28;
        if (v46 < 0.0) {
          double v47 = -0.5;
        }
        else {
          double v47 = 0.5;
        }
        unsigned int v48 = (v46 + v47);
        if (v37 < 0.0) {
          double v49 = -0.5;
        }
        else {
          double v49 = 0.5;
        }
        if (v36) {
          unsigned int v39 = (v37 + v49);
        }
        else {
          unsigned int v39 = 0x7FFFFFFF;
        }
        if (v48 >= 0xFFFFFFFE) {
          uint64_t v50 = 4294967294;
        }
        else {
          uint64_t v50 = v48;
        }
        uint64_t v38 = v45 | (v50 << 32);
      }
      *(void *)unsigned int v24 = v38;
      *((_DWORD *)v24 + 2) = v39;
    }
    if (a5 != (v82 - (unsigned char *)v81) >> 3)
    {
      BOOL v51 = (unsigned int *)sub_2D5EC4(a2, *((unsigned int *)v81 + 2 * a5 - 2) | ((unint64_t)(unsigned __int16)*((_DWORD *)v81 + 2 * a5 - 1) << 32), (*((_DWORD *)v81 + 2 * a5 - 1) >> 29) & 1);
      uint64_t v52 = sub_2E0884(a2, v51);
      uint64_t v53 = a6[1];
      unsigned int v54 = *(v53 - 6);
      double v55 = (double)v54;
      LODWORD(v56) = *(v53 - 5);
      double v57 = (double)v56;
      LODWORD(v58) = *(v53 - 2);
      double v59 = (double)*(v53 - 3) - (double)v54;
      double v60 = (double)v58 - v57;
      double v61 = v59 * v59 + v60 * v60;
      BOOL v62 = fabs(v61) < 2.22044605e-16 || v61 == 0.0;
      double v63 = (((double)v52 - (double)v54) * v59 + ((double)HIDWORD(v52) - v57) * v60) / v61;
      if (v62) {
        double v63 = 1.79769313e308;
      }
      if (v63 <= 0.0)
      {
        uint64_t v68 = *((void *)v53 - 3);
        unsigned int v69 = *(v53 - 4);
      }
      else if (v63 >= 1.0)
      {
        uint64_t v68 = *(void *)(v53 - 3);
        unsigned int v69 = *(v53 - 1);
      }
      else
      {
        unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)v53 - (unsigned char *)*a6) >> 2);
        int v65 = *((_DWORD *)*a6 + 3 * v64 - 4);
        if (v65 == 0x7FFFFFFF)
        {
          BOOL v66 = 0;
          double v67 = 0.0;
        }
        else
        {
          int v70 = *((_DWORD *)*a6 + 3 * v64 - 1);
          BOOL v33 = v70 == 0x7FFFFFFF;
          double v67 = v63 * ((double)v70 - (double)v65) + (double)v65;
          BOOL v66 = v70 != 0x7FFFFFFF;
          if (v33) {
            double v67 = 0.0;
          }
        }
        double v71 = v60 * v63;
        double v72 = v59 * v63 + v55;
        if (v72 < 0.0) {
          double v73 = -0.5;
        }
        else {
          double v73 = 0.5;
        }
        uint64_t v74 = (v72 + v73);
        double v75 = v71 + v57;
        if (v75 < 0.0) {
          double v76 = -0.5;
        }
        else {
          double v76 = 0.5;
        }
        unsigned int v77 = (v75 + v76);
        if (v67 < 0.0) {
          double v78 = -0.5;
        }
        else {
          double v78 = 0.5;
        }
        if (v66) {
          unsigned int v69 = (v67 + v78);
        }
        else {
          unsigned int v69 = 0x7FFFFFFF;
        }
        if (v77 >= 0xFFFFFFFE) {
          uint64_t v79 = 4294967294;
        }
        else {
          uint64_t v79 = v77;
        }
        uint64_t v68 = v74 | (v79 << 32);
      }
      *(void *)(v53 - 3) = v68;
      *(v53 - 1) = v69;
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  if (v81)
  {
    int v82 = v81;
    operator delete(v81);
  }
}

void sub_2E0DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v15 = *(void **)v13;
    if (!*(void *)v13)
    {
LABEL_3:
      unint64_t v16 = a12;
      if (!a12) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v15 = *(void **)v13;
    if (!*(void *)v13) {
      goto LABEL_3;
    }
  }
  *(void *)(v13 + 8) = v15;
  operator delete(v15);
  unint64_t v16 = a12;
  if (!a12) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v16);
  _Unwind_Resume(exception_object);
}

unint64_t sub_2E0E5C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_2E1FA4(a1, a2, 1);
  if (!v6) {
    goto LABEL_27;
  }
  uint64_t v7 = &v6[-*(int *)v6];
  if (*(unsigned __int16 *)v7 < 5u) {
    goto LABEL_27;
  }
  uint64_t v8 = *((unsigned __int16 *)v7 + 2);
  if (!v8)
  {
LABEL_28:
    unint64_t v29 = 0xFFFFFFFF00000000;
    return v29 | v8;
  }
  uint64_t v9 = &v6[v8 + *(unsigned int *)&v6[v8]];
  if (*(_DWORD *)v9 <= HIDWORD(a2)
    || (uint64_t v10 = (int *)sub_2E2AB8(v9, a2)) == 0
    || (uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10), *v11 < 0xDu))
  {
LABEL_27:
    uint64_t v8 = 0;
    goto LABEL_28;
  }
  uint64_t v8 = v11[6];
  if (!v8) {
    goto LABEL_28;
  }
  unint64_t v12 = (unsigned int *)((char *)v10 + v8 + *(unsigned int *)((char *)v10 + v8));
  unint64_t v14 = v12 + 1;
  uint64_t v13 = *v12;
  if (!v13)
  {
    uint64_t v28 = 0;
    BOOL v17 = v12 + 1;
    goto LABEL_25;
  }
  uint64_t v15 = 8 * v13;
  unint64_t v16 = &v14[2 * v13];
  BOOL v17 = v12 + 1;
  do
  {
    uint64_t v19 = *v17;
    uint64_t v20 = v17[1];
    int64_t v21 = sub_2E1FA4(a1, *v17, 1);
    if (!v21) {
      goto LABEL_10;
    }
    unint64_t v22 = &v21[-*(int *)v21];
    if (*(unsigned __int16 *)v22 < 9u) {
      goto LABEL_10;
    }
    uint64_t v23 = *((unsigned __int16 *)v22 + 4);
    if (!v23)
    {
      int v18 = -1;
      if (a3) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
    unsigned int v24 = &v21[v23 + *(unsigned int *)&v21[v23]];
    if (*(_DWORD *)v24 > v20 && (unint64_t v25 = (int *)sub_2E1E3C(v24, v19 | (v20 << 32))) != 0)
    {
      unint64_t v26 = (int *)((char *)v25 + *(unsigned __int16 *)((char *)v25 - *v25 + 6));
      int v27 = *v26;
      int v18 = v26[1];
      if (v27 != a3) {
        goto LABEL_12;
      }
    }
    else
    {
LABEL_10:
      int v18 = -1;
      if (a3) {
        goto LABEL_12;
      }
    }
LABEL_11:
    if (v18 == HIDWORD(a3)) {
      goto LABEL_24;
    }
LABEL_12:
    v17 += 2;
    v15 -= 8;
  }
  while (v15);
  BOOL v17 = v16;
LABEL_24:
  uint64_t v28 = 2 * *v12;
LABEL_25:
  if (v17 == &v14[v28]) {
    goto LABEL_27;
  }
  uint64_t v8 = *v17;
  unint64_t v29 = (unint64_t)v17[1] << 32;
  return v29 | v8;
}

unsigned int *sub_2E1028@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  __n128 result = (unsigned int *)sub_2E1FA4(a1, a2, 1);
  if (!result) {
    goto LABEL_19;
  }
  unint64_t v6 = (unsigned __int16 *)((char *)result - (int)*result);
  if (*v6 < 9u) {
    goto LABEL_19;
  }
  uint64_t v7 = v6[4];
  if (!v7) {
    goto LABEL_19;
  }
  __n128 result = (unsigned int *)((char *)result + v7 + *(unsigned int *)((char *)result + v7));
  if (*result <= HIDWORD(a2)) {
    goto LABEL_19;
  }
  __n128 result = (unsigned int *)sub_2E1E3C(result, a2);
  if (!result) {
    goto LABEL_19;
  }
  uint64_t v8 = result;
  uint64_t v9 = (unsigned __int16 *)((char *)result - (int)*result);
  unsigned int v10 = *v9;
  if (v10 < 9) {
    goto LABEL_19;
  }
  uint64_t v11 = v9[4];
  BOOL v12 = v10 < 0xF || v11 == 0;
  if (!v12 && v9[7])
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v13 = *(unsigned int *)((char *)result + v11 + *(unsigned int *)((char *)result + v11));
    if (v13)
    {
      uint64_t v14 = 0;
      uint64_t v15 = (int *)(result + 1);
      do
      {
        unint64_t v16 = (char *)v8 - (int)*v8;
        uint64_t v17 = *(void *)((char *)&v15[2 * v14]
                        + *((unsigned __int16 *)v16 + 4)
                        + *(unsigned int *)((char *)v8 + *((unsigned __int16 *)v16 + 4)));
        LODWORD(v21) = v17;
        WORD2(v21) = WORD2(v17);
        unsigned int v18 = *((unsigned __int8 *)v15
              + *((unsigned __int16 *)v16 + 7)
              + *(unsigned int *)((char *)v8 + *((unsigned __int16 *)v16 + 7))
              + v14);
        BYTE6(v21) = (v17 & 0xFF000000000000) == 0;
        if (v18 >= 4) {
          unsigned __int8 v19 = -1;
        }
        else {
          unsigned __int8 v19 = 0x2FF0100u >> (8 * v18);
        }
        unsigned __int8 v20 = v19;
        __n128 result = sub_2E24CC((uint64_t)a3, &v21, &v20);
        ++v14;
      }
      while (v13 != v14);
    }
  }
  else
  {
LABEL_19:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void sub_2E1194(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_2E11B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result = (int *)sub_2E3418(a1, *(void *)a2, *(void *)(a2 + 8));
  if (result && (unint64_t v5 = (unsigned __int16 *)((char *)result - *result), *v5 >= 0xDu) && (v6 = v5[6]) != 0)
  {
    uint64_t v7 = (int *)((char *)result + v6 + *(unsigned int *)((char *)result + v6));
    uint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
    if (*v8 >= 5u
      && (uint64_t v9 = v8[2]) != 0
      && (unsigned int v10 = (unsigned int *)((char *)v7 + v9 + *(unsigned int *)((char *)v7 + v9)), v11 = *v10, v11))
    {
      BOOL v12 = (char *)operator new(12 * v11);
      *(void *)&long long v18 = v12;
      *((void *)&v18 + 1) = v12;
      unsigned __int8 v19 = &v12[12 * v11];
      uint64_t v13 = v10 + 1;
      uint64_t v14 = (uint64_t)&v10[2 * v11 + 1];
      do
      {
        LODWORD(v15) = v13[1];
        if (v15 >= 0xFFFFFFFE) {
          uint64_t v15 = 4294967294;
        }
        else {
          uint64_t v15 = v15;
        }
        unint64_t v20 = *v13 | (unint64_t)(v15 << 32);
        int v21 = 0x7FFFFFFF;
        __n128 result = (int *)sub_32ACC((char **)&v18, (uint64_t)v12, (uint64_t)&v20);
        BOOL v12 = (char *)(result + 3);
        v13 += 2;
      }
      while (v13 != (unsigned int *)v14);
      long long v16 = v18;
      uint64_t v17 = v19;
    }
    else
    {
      uint64_t v17 = 0;
      long long v16 = 0uLL;
    }
    *(_OWORD *)a3 = v16;
    *(void *)(a3 + 16) = v17;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_2E12F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_2E130C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 result = (int *)sub_2E3418(a1, *(void *)a2, *(void *)(a2 + 8));
  if (result && (unint64_t v5 = (unsigned __int16 *)((char *)result - *result), *v5 >= 0x1Du) && (v6 = v5[14]) != 0)
  {
    uint64_t v7 = (unsigned int *)((char *)result + v6 + *(unsigned int *)((char *)result + v6));
    uint64_t v8 = *v7;
    if (v8)
    {
      uint64_t v9 = 2 * v8;
      unsigned int v10 = operator new(2 * v8);
      *(void *)&long long v14 = v10;
      *((void *)&v14 + 1) = v10;
      uint64_t v15 = &v10[v9];
      uint64_t v11 = (__int16 *)(v7 + 1);
      do
      {
        __int16 v16 = *v11;
        __n128 result = (int *)sub_2E30B8((void **)&v14, v10, &v16);
        unsigned int v10 = (char *)result + 2;
        ++v11;
        v9 -= 2;
      }
      while (v9);
      long long v12 = v14;
      uint64_t v13 = v15;
    }
    else
    {
      uint64_t v13 = 0;
      long long v12 = 0uLL;
    }
    *(_OWORD *)a3 = v12;
    *(void *)(a3 + 16) = v13;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_2E13F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2E1414(_DWORD *a1, unint64_t a2)
{
  unint64_t v13 = a2;
  if (!a1 || *a1 <= HIDWORD(a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_2E1938((unsigned int *)&v13, &v9);
    unint64_t v4 = std::string::insert(&v9, 0, "Flatbuffer vector requested index (object_index)");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    uint64_t v6 = std::string::append(&v10, " is out of range");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v6->__r_.__value_.__r.__words[2];
    long long v11 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v11);
  }
  return (uint64_t)&a1[HIDWORD(a2) + 1] + a1[HIDWORD(a2) + 1];
}

void sub_2E14FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

char *sub_2E157C(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 2704) == a2)
    {
      unsigned int v7 = 112;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2728) == a2)
    {
      unsigned int v7 = 113;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2752) == a2)
    {
      unsigned int v7 = 114;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2776) == a2)
    {
      unsigned int v7 = 115;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      std::string v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 2760);
    unint64_t v12 = *(void *)(a1 + 2736);
    unint64_t v13 = *(void *)(a1 + 2712);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 2712);
    }
    int v15 = 112;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 2736);
    }
    int v17 = 113;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 2760);
    }
    unint64_t v19 = *(void *)(a1 + 2784);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 114;
    }
    int v21 = (unsigned int *)sub_2AB884(v5, 28, a2, 1);
    unsigned int v22 = 115;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_2E170C(v24);
  return 0;
}

uint64_t sub_2E170C(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      std::string v9 = sub_736EC(0x1Cu);
      std::string v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_2E1864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

void sub_2E1938(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v10, *a1);
  unint64_t v4 = std::string::append(&v10, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1[1]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  long long v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v10.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
}

void sub_2E1A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

unint64_t sub_2E1AA4(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  if (!*(unsigned char *)(a1 + 32))
  {
    if (*(void *)(a1 + 8) != *(void *)(a1 + 16))
    {
      *(void *)&long long v12 = *(void *)a1;
      *((void *)&v12 + 1) = a1 + 8;
      long long v13 = 0u;
      memset(v14, 0, 25);
      goto LABEL_6;
    }
LABEL_7:
    memset(v14, 0, sizeof(v14));
    long long v12 = 0u;
    long long v13 = 0u;
    return sub_2E1BC0((uint64_t)&v12);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (*(void *)(a1 + 8) == v3) {
    goto LABEL_7;
  }
  unint64_t v4 = *(void *)(v3 - 8);
  long long v5 = sub_2964C4(*(void *)a1, v4, 1);
  long long v6 = &v5[*(unsigned __int16 *)&v5[-*(int *)v5 + 4]];
  uint64_t v7 = (uint64_t)&v6[4 * HIDWORD(v4) + *(unsigned int *)v6];
  long long v8 = (int *)(v7 + 4 + *(unsigned int *)(v7 + 4));
  unsigned int v9 = ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) - 1;
  std::string v10 = (unsigned int *)((char *)v8 + *(unsigned __int16 *)((char *)v8 - *v8 + 6));
  LODWORD(v10) = *(unsigned int *)((char *)v10 + *v10) - 1;
  *(void *)&long long v12 = *(void *)a1;
  *((void *)&v12 + 1) = v2;
  long long v13 = 0u;
  v14[0] = 0u;
  *(void *)&v14[1] = __PAIR64__(v10, v9);
  BYTE8(v14[1]) = 1;
LABEL_6:
  sub_2E1D08((uint64_t)&v12);
  return sub_2E1BC0((uint64_t)&v12);
}

unint64_t sub_2E1BC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24) + 4 * *(unsigned int *)(a1 + 52);
  int v3 = *(unsigned __int16 *)(v2 + 4);
  int v4 = *(unsigned __int16 *)(v2 + 6);
  unsigned int v5 = sub_511FC(*(_DWORD *)(a1 + 40));
  unsigned int v6 = *(_DWORD *)(a1 + 40) & ~(-1 << (v5 & 0xFE));
  int v7 = sub_51938(v6);
  int v8 = sub_51938(v6 >> 1);
  int v9 = 1 << -(v5 >> 1);
  if (v5 < 2) {
    int v9 = -2;
  }
  unsigned int v10 = v9 * v8 + 4 * v4;
  if (v10 >= 0xFFFFFFFE) {
    uint64_t v11 = 4294967294;
  }
  else {
    uint64_t v11 = v10;
  }
  return (v9 * v7 + 4 * v3) | (unint64_t)(v11 << 32);
}

char *sub_2E1D08(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 48);
  uint64_t v3 = *(void *)a1;
  unint64_t v5 = *(void *)(**(void **)(a1 + 8) + 8 * v2);
  *(_DWORD *)(a1 + 40) = v5;
  unsigned int v6 = sub_2964C4(v3, v5, 1);
  int v7 = &v6[-*(int *)v6];
  if (*(unsigned __int16 *)v7 < 7u)
  {
    LODWORD(v8) = 0;
  }
  else
  {
    uint64_t v8 = *((unsigned __int16 *)v7 + 3);
    if (v8) {
      LODWORD(v8) = *(_DWORD *)&v6[v8];
    }
  }
  *(_DWORD *)(a1 + 44) = v8;
  __n128 result = sub_2964C4(*(void *)a1, *(_DWORD *)(a1 + 40), 1);
  unsigned int v10 = &result[-*(int *)result];
  if (*(unsigned __int16 *)v10 < 5u)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = *((unsigned __int16 *)v10 + 2);
    if (v11) {
      v11 += (uint64_t)&result[*(unsigned int *)&result[v11]];
    }
  }
  long long v12 = (int *)(v11 + 4 * HIDWORD(v5) + 4 + *(unsigned int *)(v11 + 4 * HIDWORD(v5) + 4));
  *(void *)(a1 + 16) = v12;
  long long v13 = (unsigned __int16 *)((char *)v12 - *v12);
  unsigned int v14 = *v13;
  if (v14 <= 6)
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  else
  {
    uint64_t v15 = v13[3];
    if (v13[3]) {
      v15 += (uint64_t)v12 + *(unsigned int *)((char *)v12 + v15);
    }
    *(void *)(a1 + 24) = v15;
    if (v14 >= 0xB && (uint64_t v16 = v13[5]) != 0) {
      *(void *)(a1 + 32) = (char *)v12 + v16 + *(unsigned int *)((char *)v12 + v16);
    }
    else {
      *(void *)(a1 + 32) = 0;
    }
  }
  return result;
}

uint64_t sub_2E1E3C(_DWORD *a1, unint64_t a2)
{
  unint64_t v13 = a2;
  if (!a1 || *a1 <= HIDWORD(a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_2E2360((unsigned int *)&v13, &v9);
    int v4 = std::string::insert(&v9, 0, "Flatbuffer vector requested index (object_index)");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    unsigned int v6 = std::string::append(&v10, " is out of range");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v6->__r_.__value_.__r.__words[2];
    long long v11 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v11);
  }
  return (uint64_t)&a1[HIDWORD(a2) + 1] + a1[HIDWORD(a2) + 1];
}

void sub_2E1F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

char *sub_2E1FA4(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 3184) == a2)
    {
      unsigned int v7 = 132;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 3208) == a2)
    {
      unsigned int v7 = 133;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 3232) == a2)
    {
      unsigned int v7 = 134;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 3256) == a2)
    {
      unsigned int v7 = 135;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      std::string v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 3240);
    unint64_t v12 = *(void *)(a1 + 3216);
    unint64_t v13 = *(void *)(a1 + 3192);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 3192);
    }
    int v15 = 132;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 3216);
    }
    int v17 = 133;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 3240);
    }
    unint64_t v19 = *(void *)(a1 + 3264);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 134;
    }
    int v21 = (unsigned int *)sub_2AB884(v5, 33, a2, 1);
    unsigned int v22 = 135;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_2E2134(v24);
  return 0;
}

uint64_t sub_2E2134(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      std::string v9 = sub_736EC(0x21u);
      std::string v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_2E228C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

void sub_2E2360(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v10, *a1);
  unint64_t v4 = std::string::append(&v10, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1[1]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  long long v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v10.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
}

void sub_2E2458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_2E24CC(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  unsigned int v7 = *(char **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  long long v8 = v7;
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v13 = *(char **)a1;
    uint64_t v14 = (uint64_t)&v7[-*(void *)a1];
    uint64_t v15 = v14 >> 3;
    unint64_t v16 = (v14 >> 3) + 1;
    if (v16 >> 61) {
      sub_2E00();
    }
    uint64_t v17 = v6 - (void)v13;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    BOOL v18 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v18) {
      unint64_t v19 = v16;
    }
    if (v19 >> 61) {
      sub_188D718();
    }
    uint64_t v20 = 8 * v19;
    int v21 = operator new(8 * v19);
    int v22 = *a3;
    int v23 = (unsigned __int16)WORD2(*a2) | (((*a2 & 0xFF000000000000) == 0) << 29);
    unsigned int v24 = &v21[8 * v15];
    *unsigned int v24 = *a2;
    v24[1] = v23 | ((v22 == 2) << 30) | ((v22 == 1) << 31);
    unint64_t v12 = v24 + 2;
    if (v7 != v13)
    {
      unint64_t v25 = v7 - v13 - 8;
      if (v25 < 0x58) {
        goto LABEL_23;
      }
      if ((unint64_t)(v7 - &v21[v14]) < 0x20) {
        goto LABEL_23;
      }
      uint64_t v26 = (v25 >> 3) + 1;
      uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      long long v8 = &v7[-v27];
      unsigned int v24 = (_DWORD *)((char *)v24 - v27);
      uint64_t v28 = &v21[8 * v15 - 16];
      unint64_t v29 = v7 - 16;
      uint64_t v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v31 = *(_OWORD *)v29;
        *(v28 - 1) = *((_OWORD *)v29 - 1);
        *uint64_t v28 = v31;
        v28 -= 2;
        v29 -= 32;
        v30 -= 4;
      }
      while (v30);
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_23:
        do
        {
          uint64_t v32 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v24 - 1) = v32;
          v24 -= 2;
        }
        while (v8 != v13);
      }
    }
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = &v21[v20];
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    int v9 = *a3;
    int v10 = (unsigned __int16)WORD2(*a2);
    int v11 = (*a2 & 0xFF000000000000) == 0;
    *(_DWORD *)unsigned int v7 = *a2;
    *((_DWORD *)v7 + 1) = v10 | (v11 << 29) | ((v9 == 2) << 30) | ((v9 == 1) << 31);
    unint64_t v12 = v7 + 8;
  }
  *(void *)(a1 + 8) = v12;
  return v12 - 2;
}

uint64_t sub_2E2690(_DWORD *a1, unint64_t a2)
{
  unint64_t v13 = a2;
  if (!a1 || *a1 <= HIDWORD(a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_2E27F8((unsigned int *)&v13, &v9);
    unint64_t v4 = std::string::insert(&v9, 0, "Flatbuffer vector requested index (object_index)");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    unint64_t v6 = std::string::append(&v10, " is out of range");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v6->__r_.__value_.__r.__words[2];
    long long v11 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    long long v8 = (void *)sub_2F404((uint64_t)exception, &v11);
  }
  return (uint64_t)&a1[HIDWORD(a2) + 1] + a1[HIDWORD(a2) + 1];
}

void sub_2E2778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_2E27F8(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v10, *a1);
  unint64_t v4 = std::string::append(&v10, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1[1]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  long long v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v10.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
}

void sub_2E28F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

unint64_t sub_2E2964(unint64_t result)
{
  uint64_t v1 = result;
  if (HIDWORD(result))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v8, v1);
    uint64_t v3 = std::string::insert(&v8, 0, "narrowing ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    long long v5 = std::string::append(&v9, " failed");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
    long long v10 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    long long v7 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return result;
}

void sub_2E2A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2E2AB8(_DWORD *a1, unint64_t a2)
{
  unint64_t v13 = a2;
  if (!a1 || *a1 <= HIDWORD(a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_2E2C20((unsigned int *)&v13, &v9);
    long long v4 = std::string::insert(&v9, 0, "Flatbuffer vector requested index (object_index)");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    long long v6 = std::string::append(&v10, " is out of range");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v6->__r_.__value_.__r.__words[2];
    long long v11 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::string v8 = (void *)sub_2F404((uint64_t)exception, &v11);
  }
  return (uint64_t)&a1[HIDWORD(a2) + 1] + a1[HIDWORD(a2) + 1];
}

void sub_2E2BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_2E2C20(unsigned int *a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v10, *a1);
  long long v4 = std::string::append(&v10, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1[1]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_13:
      operator delete(v10.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_13;
  }
}

void sub_2E2D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

unsigned int **sub_2E2D8C@<X0>(unsigned int **result@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, unsigned int **a4@<X8>)
{
  long long v4 = *result;
  unint64_t v5 = *a2 - (void)*result;
  if (v5 >= 4)
  {
    unint64_t v6 = v5 >> 2;
    while (1)
    {
      long long v7 = (unsigned int *)((char *)v4 + ((2 * v6) & 0x3FFFFFFFCLL));
      std::string v8 = (int *)((char *)v7 + *v7);
      std::string v9 = (unsigned __int16 *)((char *)v8 - *v8);
      unsigned int v10 = *v9;
      if (v10 >= 5)
      {
        if (v9[2]) {
          break;
        }
      }
      unint64_t v18 = 0;
      unsigned int v19 = 0;
LABEL_15:
      unint64_t v20 = v6 >> 1;
      if (((v18 + (int)(8 * v19)) | (v19 >> 27) & 4 | (v19 >> 29) & 2 | (unint64_t)(v19 >> 31)) < ((((int)(*a3 >> 29) & 0xFFFFFFFFFFFFFFF8) + (*a3 << 32)) & 0xFFFFFFFFFFFFFFF8 | ((unint64_t)*a3 >> 59) & 4 | ((unint64_t)*a3 >> 61) & 2 | ((unint64_t)*a3 >> 63)))
      {
        long long v4 = v7 + 1;
        *__n128 result = v7 + 1;
        unint64_t v20 = v6 + ~v20;
      }
      unint64_t v6 = v20;
      if (!v20) {
        goto LABEL_2;
      }
    }
    std::string v11 = (unsigned int *)((char *)v8 + v9[2]);
    int v12 = *((unsigned __int16 *)v11 + 2);
    int v13 = *((unsigned __int8 *)v11 + 6);
    if (v10 < 0x11) {
      goto LABEL_13;
    }
    uint64_t v14 = v9[8];
    if (!v14) {
      goto LABEL_13;
    }
    int v15 = *((unsigned __int8 *)v8 + v14);
    if (v15 == 1)
    {
      int v17 = v12 | ((v13 != 0) << 29);
      unsigned int v16 = 0x80000000;
      goto LABEL_14;
    }
    if (v15 == 3)
    {
      unsigned int v16 = 0;
      int v17 = v12 | ((v13 != 0) << 29) | 0x40000000;
    }
    else
    {
LABEL_13:
      unsigned int v16 = 0;
      int v17 = v12 | ((v13 != 0) << 29);
    }
LABEL_14:
    unsigned int v19 = v16 | v17;
    unint64_t v18 = (unint64_t)*v11 << 32;
    goto LABEL_15;
  }
LABEL_2:
  *a4 = v4;
  return result;
}

uint64_t sub_2E2ED4(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v3 = a2[1];
  long long v4 = sub_2E157C(a1, v3.u32[0], 1);
  if (!v4) {
    return 0;
  }
  unint64_t v5 = &v4[-*(int *)v4];
  if (*(unsigned __int16 *)v5 < 7u) {
    return 0;
  }
  uint64_t v6 = *((unsigned __int16 *)v5 + 3);
  if (!*((_WORD *)v5 + 3)) {
    return 0;
  }
  uint64_t v7 = HIDWORD(*(void *)&v3);
  uint64_t v8 = *(unsigned int *)&v4[v6];
  std::string v9 = &v4[v6 + v8];
  if (*(_DWORD *)v9 <= v3.i32[1]) {
    return 0;
  }
  uint64_t v10 = 4 * v7;
  std::string v11 = &v9[4 * v7];
  uint64_t v12 = *((unsigned int *)v11 + 1);
  int v13 = &v11[v12 + 4];
  uint64_t v14 = &v13[-*(int *)v13];
  if (*(unsigned __int16 *)v14 < 5u) {
    return 0;
  }
  uint64_t v15 = *((unsigned __int16 *)v14 + 2);
  if (!v15) {
    return 0;
  }
  unsigned int v16 = &v13[v15];
  uint64_t v17 = *(unsigned int *)v16;
  uint64_t v18 = *(unsigned int *)&v16[v17];
  if (!v18) {
    return 0;
  }
  uint64_t v19 = 0;
  uint64_t v20 = 4 * v18;
  int v21 = &v4[v15 + v12 + v8 + v6 + v10 + v17];
  while (1)
  {
    int v22 = &v21[v19];
    uint64_t v23 = *(unsigned int *)&v21[v19 + 8];
    unsigned int v24 = (unsigned __int16 *)&v21[v19 + v23 - *(int *)&v21[v19 + 8 + v23]];
    int32x2_t v25 = vceq_s32(*(int32x2_t *)&v21[v19 + 8 + v23 + v24[6]], *a2);
    char v26 = v25.i8[0] & v25.i8[4];
    if (v25.i8[0] & v25.i8[4])
    {
      int32x2_t v27 = vceq_s32(*(int32x2_t *)&v22[v23 + 8 + v24[7]], a2[1]);
      char v26 = v27.i8[0] & v27.i8[4];
      if (v27.i8[0] & v27.i8[4])
      {
        int32x2_t v28 = vceq_s32(*(int32x2_t *)&v22[v23 + 8 + v24[8]], a2[2]);
        char v26 = v28.i8[0] & v28.i8[4];
        if (v28.i8[0] & v28.i8[4])
        {
          int32x2_t v29 = vceq_s32(*(int32x2_t *)&v22[v23 + 8 + v24[9]], a2[3]);
          char v26 = v29.i8[0] & v29.i8[4];
        }
      }
    }
    if (v26) {
      break;
    }
    v19 += 4;
    if (v20 == v19) {
      return 0;
    }
  }
  return (uint64_t)&v4[v10 + 8 + v17 + v15 + v12 + v8 + v6 + v23 + v19];
}

char *sub_2E30B8(void **a1, unsigned char *a2, _WORD *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 1;
  std::string v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_WORD *)std::string v9 = *a3;
      a1[1] = v9 + 2;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 2);
    uint64_t v12 = v11 >> 1;
    int v13 = (__int16 *)(v5 - 2);
    if (v5 < 2)
    {
      uint64_t v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFELL) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 2;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x1E)
      {
        uint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 1) + 1;
          unint64_t v21 = 2 * (v20 & 0xFFFFFFFFFFFFFFF0);
          int v13 = (__int16 *)((char *)v13 + v21);
          uint64_t v19 = (_WORD *)(v5 + v21);
          int v22 = (_OWORD *)(v5 + 16);
          uint64_t v23 = (long long *)(2 * v12 + 2 * v8 + v6 + 16);
          unint64_t v24 = v20 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *int v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 16;
          }
          while (v24);
          if (v20 == (v20 & 0xFFFFFFFFFFFFFFF0)) {
            goto LABEL_51;
          }
        }
      }
      do
      {
        __int16 v57 = *v13++;
        *v19++ = v57;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_51:
    a1[1] = v19;
    if ((char *)v5 != v9 + 2) {
      memmove((void *)(v5 - 2 * v12), v9, v11);
    }
    *(_WORD *)std::string v9 = *a3;
    return v9;
  }
  uint64_t v26 = v5 - v6;
  if (v26 <= -3) {
    sub_2E00();
  }
  uint64_t v28 = v26 >> 1;
  unint64_t v29 = v10 - v6;
  if (v29 <= v28 + 1) {
    unint64_t v30 = v28 + 1;
  }
  else {
    unint64_t v30 = v29;
  }
  if (v29 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v31 = v30;
  }
  if (v31)
  {
    if (v31 < 0) {
      sub_188D718();
    }
    uint64_t v32 = (char *)operator new(2 * v31);
    BOOL v33 = &v32[2 * v8];
    double v34 = &v32[2 * v31];
    if (v8 != v31) {
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v32 = 0;
    BOOL v33 = (char *)(2 * v8);
    double v34 = 0;
    if (v8) {
      goto LABEL_29;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v54 = 1;
    }
    else {
      unint64_t v54 = v7;
    }
    if ((v54 & 0x8000000000000000) != 0) {
      sub_188D718();
    }
    double v55 = (char *)operator new(2 * v54);
    BOOL v33 = &v55[2 * (v54 >> 2)];
    double v34 = &v55[2 * v54];
    if (v32)
    {
      unint64_t v56 = &v55[2 * v54];
      operator delete(v32);
      double v34 = v56;
      BOOL v36 = (char *)*a1;
      *(_WORD *)BOOL v33 = *a3;
      double v37 = v33 + 2;
      uint64_t v38 = v33;
      if (v36 != v9) {
        goto LABEL_30;
      }
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v35 = v8 + 2;
    if (v8 >= -1) {
      uint64_t v35 = v8 + 1;
    }
    v33 -= v35 & 0xFFFFFFFFFFFFFFFELL;
  }
LABEL_29:
  BOOL v36 = (char *)v6;
  *(_WORD *)BOOL v33 = *a3;
  double v37 = v33 + 2;
  uint64_t v38 = v33;
  if ((char *)v6 != v9)
  {
LABEL_30:
    unsigned int v39 = (char *)((v7 & 0xFFFFFFFFFFFFFFFELL) + v6);
    unint64_t v40 = v39 - v36 - 2;
    int v41 = v9;
    uint64_t v38 = v33;
    if (v40 < 0x1E) {
      goto LABEL_60;
    }
    int v41 = v9;
    uint64_t v38 = v33;
    if ((unint64_t)(v39 - v33) < 0x20) {
      goto LABEL_60;
    }
    uint64_t v42 = (v40 >> 1) + 1;
    unint64_t v43 = 2 * (v42 & 0xFFFFFFFFFFFFFFF0);
    int v41 = &v9[-v43];
    uint64_t v38 = &v33[-v43];
    double v44 = v33 - 16;
    uint64_t v45 = (long long *)(v6 + 2 * v8 - 16);
    unint64_t v46 = v42 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      long long v47 = *v45;
      *((_OWORD *)v44 - 1) = *(v45 - 1);
      *(_OWORD *)double v44 = v47;
      v44 -= 32;
      v45 -= 2;
      v46 -= 16;
    }
    while (v46);
    if (v42 != (v42 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_60:
      do
      {
        __int16 v48 = *((_WORD *)v41 - 1);
        v41 -= 2;
        *((_WORD *)v38 - 1) = v48;
        v38 -= 2;
      }
      while (v41 != v36);
    }
  }
LABEL_36:
  double v49 = (char *)a1[1];
  int64_t v50 = v49 - v9;
  if (v49 != v9)
  {
    BOOL v51 = v9;
    size_t v52 = v49 - v9;
    uint64_t v53 = v34;
    memmove(v37, v51, v52);
    double v34 = v53;
    BOOL v36 = (char *)*a1;
  }
  *a1 = v38;
  a1[1] = &v37[v50];
  a1[2] = v34;
  if (v36) {
    operator delete(v36);
  }
  return v33;
}

void sub_2E3400(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2E3418(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = sub_2E1FA4(a1, a2, 1);
  if (!v5) {
    return 0;
  }
  unint64_t v6 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v6 < 7u) {
    return 0;
  }
  uint64_t v7 = *((unsigned __int16 *)v6 + 3);
  if (!*((_WORD *)v6 + 3)) {
    return 0;
  }
  unint64_t v8 = HIDWORD(a2);
  uint64_t v9 = *(unsigned int *)&v5[v7];
  unint64_t v10 = &v5[v7 + v9];
  if (*(_DWORD *)v10 <= HIDWORD(a2)) {
    return 0;
  }
  uint64_t v11 = 4 * v8;
  uint64_t v12 = &v10[4 * v8];
  uint64_t v13 = *((unsigned int *)v12 + 1);
  unint64_t v14 = &v12[v13 + 4];
  uint64_t v15 = &v14[-*(int *)v14];
  if (*(unsigned __int16 *)v15 < 5u) {
    return 0;
  }
  uint64_t v16 = *((unsigned __int16 *)v15 + 2);
  if (!v16) {
    return 0;
  }
  unint64_t v17 = &v14[v16];
  uint64_t v18 = *(unsigned int *)v17;
  uint64_t v19 = *(unsigned int *)&v17[v18];
  if (!v19) {
    return 0;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 4 * v19;
  int v22 = &v5[v16 + v13 + v9 + v7 + v11 + v18];
  while (1)
  {
    uint64_t v23 = *(unsigned int *)&v22[v20 + 8];
    unint64_t v24 = &v22[v20 + v23 - *(int *)&v22[v20 + 8 + v23]];
    int32x2_t v25 = vceq_s32(*(int32x2_t *)&v22[v20 + 8 + v23 + *((unsigned __int16 *)v24 + 7)], (int32x2_t)a2);
    char v26 = v25.i8[0] & v25.i8[4];
    int32x2_t v27 = vceq_s32(*(int32x2_t *)&v22[v20 + 8 + v23 + *((unsigned __int16 *)v24 + 8)], (int32x2_t)a3);
    if (v26) {
      char v26 = v27.i8[0] & v27.i8[4];
    }
    if (v26) {
      break;
    }
    v20 += 4;
    if (v21 == v20) {
      return 0;
    }
  }
  return (uint64_t)&v5[v11 + 8 + v18 + v16 + v13 + v9 + v7 + v23 + v20];
}

void sub_2E35B0()
{
  byte_2557097 = 1;
  word_2557080 = 65;
}

uint64_t sub_2E35CC(int **a1)
{
  uint64_t v1 = (char *)*a1;
  uint64_t v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (!*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0x27)
    {
      unsigned int v4 = v2[19];
      if (v2[19]) {
        goto LABEL_7;
      }
LABEL_16:
      if (v2[10])
      {
        unsigned int v13 = v1[v2[10]];
        if (v1[v2[10]])
        {
          uint64_t v14 = v2[5];
          if (v14)
          {
            int v15 = *(_DWORD *)&v1[v14];
            if ((~v15 & 3) != 0)
            {
LABEL_20:
              if (*((unsigned char *)a1 + 38)) {
                int v16 = 2;
              }
              else {
                int v16 = 1;
              }
              if ((v15 & v16) != 0) {
                return v13;
              }
              else {
                return 0;
              }
            }
LABEL_33:
            if (v13 >> 1 <= 1) {
              return 1;
            }
            else {
              return v13 >> 1;
            }
          }
          return 0;
        }
      }
LABEL_28:
      uint64_t v17 = v2[5];
      if (v17)
      {
        int v15 = *(_DWORD *)&v1[v17];
        if ((~v15 & 3) != 0) {
          unsigned int v13 = 1;
        }
        else {
          unsigned int v13 = 2;
        }
        if ((~v15 & 3) != 0) {
          goto LABEL_20;
        }
        goto LABEL_33;
      }
      return 0;
    }
LABEL_15:
    if (v3 < 0x15)
    {
      if (v3 < 0xB) {
        return 0;
      }
      goto LABEL_28;
    }
    goto LABEL_16;
  }
  if (v3 < 0x29) {
    goto LABEL_15;
  }
  unsigned int v4 = v2[20];
  if (!v2[20]) {
    goto LABEL_16;
  }
LABEL_7:
  unint64_t v5 = &v1[v4 + *(unsigned int *)&v1[v4]];
  uint64_t v6 = *(unsigned int *)v5;
  if (!v6) {
    return 0;
  }
  unint64_t v7 = 0;
  uint64_t result = 0;
  uint64_t v9 = 4 * v6;
  do
  {
    uint64_t v10 = *(unsigned int *)&v5[v7 + 4];
    uint64_t v11 = &v5[v7 + v10 - *(int *)&v5[v7 + 4 + v10]];
    if (*((unsigned __int16 *)v11 + 2) < 5u
      || (uint64_t v12 = *((unsigned __int16 *)v11 + 4)) == 0
      || (v5[v7 + 4 + v10 + v12] & 4) == 0)
    {
      uint64_t result = (result + 1);
    }
    v7 += 4;
  }
  while (v9 != v7);
  return result;
}

uint64_t sub_2E3710(int **a1, char a2, uint64_t a3)
{
  if (a2) {
    uint64_t v6 = (unsigned int *)sub_2E48C4(a1);
  }
  else {
    uint64_t v6 = (unsigned int *)sub_2E4738(a1);
  }
  sub_2D5904(a3, v6, 0, (char **)(a3 + 7800));
  unint64_t v7 = *(unsigned char **)(a3 + 7800);
  unint64_t v8 = *(unsigned char **)(a3 + 7808);
  uint64_t v9 = v8 - v7;
  if (v8 == v7)
  {
    uint64_t v10 = 0;
    goto LABEL_7;
  }
  if (v9 < 0) {
    sub_2E00();
  }
  uint64_t v10 = operator new(v8 - v7);
  memcpy(v10, v7, v9 - 1);
  uint64_t v11 = 8 * (v9 >> 3);
  if ((unint64_t)v11 < 0x10)
  {
LABEL_7:
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0x1000000000000;
    if (!v10) {
      return v13 | v12 | v14;
    }
LABEL_8:
    operator delete(v10);
    return v13 | v12 | v14;
  }
  unsigned __int16 v51 = 0;
  uint64_t v52 = 0;
  unsigned __int16 v49 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = v11 >> 3;
  double v18 = 1.79769313e308;
  double v19 = 1.79769313e308;
  LOBYTE(v50) = 1;
  LOBYTE(v48) = 1;
  do
  {
    while (1)
    {
      if (a2) {
        unint64_t v20 = *((void *)v10 + v16) ^ 0x1000000000000;
      }
      else {
        unint64_t v20 = *((void *)v10 + v16);
      }
      uint64_t v21 = (int *)sub_2D5D58(a3, v20 & 0xFFFFFFFFFFFFLL);
      if (*((_DWORD *)a1 + 8) == v20 && WORD2(v20) == *((unsigned __int16 *)a1 + 18)) {
        goto LABEL_69;
      }
      uint64_t v23 = v21;
      unint64_t v24 = (unsigned __int16 *)((char *)v21 - *v21);
      unsigned int v25 = *v24;
      uint64_t v26 = v20 & 0xFF000000000000;
      if ((v20 & 0xFF000000000000) == 0) {
        break;
      }
      if (v25 >= 0xB)
      {
        unsigned int v27 = v24[5];
        if (v27)
        {
          if ((*(int *)((char *)v21 + v27) & 2) != 0) {
            goto LABEL_27;
          }
        }
      }
LABEL_69:
      if (v17 == ++v16) {
        goto LABEL_72;
      }
    }
    if (v25 < 0xB) {
      goto LABEL_69;
    }
    unsigned int v28 = v24[5];
    if (!v28 || (*(int *)((char *)v21 + v28) & 1) == 0) {
      goto LABEL_69;
    }
LABEL_27:
    unint64_t v29 = (unint64_t)WORD2(v20) << 32;
    if (a2)
    {
      unint64_t v30 = v20 & 0xFFFF0000FFFFFFFFLL | v29;
      unint64_t v31 = (unint64_t)a1[4];
    }
    else
    {
      unint64_t v30 = (unint64_t)a1[4];
      unint64_t v31 = v20 & 0xFFFF0000FFFFFFFFLL | v29;
    }
    if (sub_2E77D4(a3, v30, v31, 0)) {
      goto LABEL_69;
    }
    if (a2)
    {
      uint64_t v32 = (unsigned __int16 *)((char *)v23 - *v23);
      unsigned int v33 = *v32;
      if (v26)
      {
        if (v33 >= 0x49)
        {
          unsigned int v34 = v32[36];
          if (v34) {
            goto LABEL_42;
          }
        }
      }
      else if (v33 >= 0x4B)
      {
        unsigned int v34 = v32[37];
        if (v34)
        {
LABEL_42:
          __int16 v38 = *(_WORD *)((char *)v23 + v34);
          uint64_t v23 = *a1;
          unsigned int v39 = (unsigned __int16 *)((char *)*a1 - **a1);
          unsigned int v40 = *v39;
          if (*((unsigned char *)a1 + 38)) {
            goto LABEL_45;
          }
          goto LABEL_53;
        }
      }
      __int16 v38 = -1;
      uint64_t v23 = *a1;
      unsigned int v39 = (unsigned __int16 *)((char *)*a1 - **a1);
      unsigned int v40 = *v39;
      if (*((unsigned char *)a1 + 38)) {
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v35 = (unsigned __int16 *)((char *)*a1 - **a1);
      unsigned int v36 = *v35;
      if (*((unsigned char *)a1 + 38))
      {
        if (v36 >= 0x49)
        {
          unsigned int v37 = v35[36];
          if (v37) {
            goto LABEL_50;
          }
        }
      }
      else if (v36 >= 0x4B)
      {
        unsigned int v37 = v35[37];
        if (v37)
        {
LABEL_50:
          __int16 v38 = *(_WORD *)((char *)*a1 + v37);
          unsigned int v39 = (unsigned __int16 *)((char *)v23 - *v23);
          unsigned int v40 = *v39;
          if (v26) {
            goto LABEL_45;
          }
          goto LABEL_53;
        }
      }
      __int16 v38 = -1;
      unsigned int v39 = (unsigned __int16 *)((char *)v23 - *v23);
      unsigned int v40 = *v39;
      if (v26)
      {
LABEL_45:
        if (v40 >= 0x4B)
        {
          unsigned int v41 = v39[37];
          if (v41) {
            goto LABEL_55;
          }
        }
        goto LABEL_56;
      }
    }
LABEL_53:
    if (v40 >= 0x49)
    {
      unsigned int v41 = v39[36];
      if (v41)
      {
LABEL_55:
        int v42 = *(unsigned __int16 *)((char *)v23 + v41);
        goto LABEL_57;
      }
    }
LABEL_56:
    int v42 = 0xFFFF;
LABEL_57:
    unsigned __int16 v43 = v38 + 18000;
    unsigned __int16 v44 = v38 - 18000;
    if ((unsigned __int16)(v43 >> 5) < 0x465u) {
      unsigned __int16 v44 = v43;
    }
    int v45 = v42 - v44;
    if (v45 > 18000) {
      v45 -= 36000;
    }
    if (v45 < -17999) {
      v45 += 36000;
    }
    double v46 = fabs((double)v45 / 100.0);
    if (!HIDWORD(v52) || v46 < v18)
    {
      unint64_t v50 = HIWORD(v20);
      HIDWORD(v52) = v20;
      unsigned __int16 v51 = WORD2(v20);
      double v18 = v46;
    }
    if (!sub_2E79EC(a3, v20 & 0xFFFF0000FFFFFFFFLL | v29, (uint64_t)a1[4]) || v52 && v46 >= v19) {
      goto LABEL_69;
    }
    unint64_t v48 = HIWORD(v20);
    LODWORD(v52) = v20;
    unsigned __int16 v49 = WORD2(v20);
    ++v16;
    double v19 = v46;
  }
  while (v17 != v16);
LABEL_72:
  unint64_t v47 = ((unint64_t)v49 << 32) | ((unint64_t)v48 << 48) | v52;
  if (!v52) {
    unint64_t v47 = ((unint64_t)v51 << 32) | ((unint64_t)v50 << 48) | HIDWORD(v52);
  }
  uint64_t v14 = v47 & 0xFF000000000000;
  uint64_t v13 = v47 & 0xFFFF00000000;
  uint64_t v12 = v47;
  if (v10) {
    goto LABEL_8;
  }
  return v13 | v12 | v14;
}

void sub_2E3B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2E3BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v4 = a3;
  unint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
  double v9 = sub_2E3D18(a1, a3 & 0xFFFFFFFFFFFFLL);
  double v10 = sub_2E3D18(a1, *(void *)(a2 + 32));
  sub_440F0(v9, v10);
  double v12 = v11;
  unint64_t v13 = (v8 | ((unint64_t)(v11 >= 90.0) << 48)) >> 32;
  uint64_t v14 = sub_2D5D58(a1, v8);
  if (*(unsigned char *)(a1 + 7772))
  {
    int v15 = sub_2DB8E0(a1 + 3896, v4, 0);
    uint64_t v16 = &v15[-*(int *)v15];
    if (*(unsigned __int16 *)v16 < 5u)
    {
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = *((unsigned __int16 *)v16 + 2);
      if (v17) {
        v17 += (uint64_t)&v15[*(unsigned int *)&v15[v17]];
      }
    }
    uint64_t v18 = v17 + 4 * (unsigned __int16)v13 + 4 + *(unsigned int *)(v17 + 4 * (unsigned __int16)v13 + 4);
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t result = sub_2E5C38(a1, v8, 1);
  *(void *)a4 = v14;
  *(void *)(a4 + 8) = v18;
  *(void *)(a4 + 16) = result;
  *(void *)(a4 + 24) = v20;
  *(_DWORD *)(a4 + 32) = v4;
  *(_WORD *)(a4 + 36) = v13;
  *(unsigned char *)(a4 + 38) = v12 >= 90.0;
  return result;
}

double sub_2E3D18(uint64_t a1, uint64_t a2)
{
  sub_2954EC(a1, a2, (uint64_t)v14);
  uint64_t v2 = __p;
  if (__p == v16)
  {
    double i = NAN;
    if (!__p) {
      return i;
    }
    goto LABEL_18;
  }
  unint64_t v3 = sub_2E1AA4((uint64_t)v14);
  int v5 = v4;
  if (v3 == sub_2E40A4((uint64_t)v14) && v5 == v6)
  {
    double i = NAN;
    goto LABEL_17;
  }
  unint64_t v8 = sub_2E1AA4((uint64_t)v14);
  unint64_t v9 = sub_2E40A4((uint64_t)v14);
  if (v9 == v8)
  {
    unint64_t v10 = HIDWORD(v8);
    unint64_t v11 = HIDWORD(v9);
    double i = 0.0;
    if (HIDWORD(v8) == HIDWORD(v9)) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v11 = HIDWORD(v9);
    unint64_t v10 = HIDWORD(v8);
  }
  double v12 = -(double)(v8 - v9);
  if ((int)v9 - (int)v8 < (v8 - v9)) {
    double v12 = (double)(v9 - v8);
  }
  for (double i = (atan2((double)v11 - (double)v10, v12) + 1.57079633) * 180.0 / 3.14159265;
        i >= 180.0;
  for (; i < -180.0; double i = i + 360.0)
    ;
LABEL_17:
  uint64_t v2 = __p;
  if (__p)
  {
LABEL_18:
    uint64_t v16 = v2;
    operator delete(v2);
  }
  return i;
}

void sub_2E3EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_2E3ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2954EC(a1, *(void *)(a2 + 32), (uint64_t)v18);
  sub_2954EC(a1, *(void *)(a3 + 32), (uint64_t)&v15);
  if (v19 == v20 || __p == v17)
  {
    double v10 = 1.79769313e308;
  }
  else
  {
    unint64_t v5 = sub_2E1AA4((uint64_t)v18);
    unint64_t v6 = sub_2E40A4((uint64_t)v18);
    unint64_t v7 = sub_2E1AA4((uint64_t)&v15);
    double v8 = (double)HIDWORD(v5) - (double)HIDWORD(v6);
    double v9 = (double)v6 - (double)v5;
    if (v8 != 0.0 || (double v10 = 0.0, v9 != 0.0))
    {
      double v11 = -(((double)v5 - (double)v6) * (double)HIDWORD(v5)
            + ((double)HIDWORD(v6) - (double)HIDWORD(v5)) * (double)v5
            + v8 * (double)v7
            + v9 * (double)HIDWORD(v7))
          / (v9 * v9 + v8 * v8);
      double v12 = v8 * v11 + (double)v7;
      LODWORD(v13) = (v9 * v11 + (double)HIDWORD(v7));
      if (v13 >= 0xFFFFFFFE) {
        uint64_t v13 = 4294967294;
      }
      else {
        uint64_t v13 = v13;
      }
      double v10 = sqrt((double)((v12 - (unint64_t)v7)
                        * (v12 - (unint64_t)v7)
                        + (v13 - HIDWORD(v7)) * (v13 - HIDWORD(v7))))
          / 100.0;
    }
  }
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  return v10;
}

void sub_2E4050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v17 = a15;
    if (!a15) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v17 = a15;
    if (!a15) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

unint64_t sub_2E40A4(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 8) != v3)
    {
      unint64_t v4 = *(void *)(v3 - 8);
      unint64_t v5 = sub_2964C4(*(void *)a1, v4, 1);
      unint64_t v6 = &v5[*(unsigned __int16 *)&v5[-*(int *)v5 + 4]];
      uint64_t v7 = (uint64_t)&v6[4 * HIDWORD(v4) + *(unsigned int *)v6];
      double v8 = (int *)(v7 + 4 + *(unsigned int *)(v7 + 4));
      unsigned int v9 = ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) - 1;
      double v10 = (unsigned int *)((char *)v8 + *(unsigned __int16 *)((char *)v8 - *v8 + 6));
      LODWORD(v10) = *(unsigned int *)((char *)v10 + *v10) - 1;
      *(void *)&long long v12 = *(void *)a1;
      *((void *)&v12 + 1) = v2;
      long long v13 = 0u;
      long long v14 = 0u;
      *(void *)&long long v15 = __PAIR64__(v10, v9);
      BYTE8(v15) = 0;
      goto LABEL_6;
    }
LABEL_7:
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    return sub_2E1BC0((uint64_t)&v12);
  }
  if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
    goto LABEL_7;
  }
  *(void *)&long long v12 = *(void *)a1;
  *((void *)&v12 + 1) = a1 + 8;
  long long v13 = 0u;
  long long v14 = 0u;
  *(void *)&long long v15 = 0;
  BYTE8(v15) = 1;
LABEL_6:
  sub_2E1D08((uint64_t)&v12);
  return sub_2E1BC0((uint64_t)&v12);
}

uint64_t sub_2E41C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2954EC(a1, *(void *)(a2 + 32), (uint64_t)v16);
  sub_2954EC(a1, *(void *)(a3 + 32), (uint64_t)&v13);
  if (v17 == v18 || __p == v15)
  {
    uint64_t v10 = 2;
    double v11 = __p;
    if (!__p) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v5 = sub_2E1AA4((uint64_t)v16);
    unint64_t v6 = sub_2E40A4((uint64_t)v16);
    unint64_t v7 = sub_2E40A4((uint64_t)&v13);
    double v8 = ((double)HIDWORD(v5) - (double)HIDWORD(v6)) * ((double)v7 - (double)v6)
       - ((double)v5 - (double)v6) * ((double)HIDWORD(v7) - (double)HIDWORD(v6));
    if (v8 == 0.0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = 1;
    }
    if (v8 >= 0.0) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    double v11 = __p;
    if (!__p) {
      goto LABEL_13;
    }
  }
  long long v15 = v11;
  operator delete(v11);
LABEL_13:
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
  return v10;
}

void sub_2E42C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v17 = a15;
    if (!a15) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v17 = a15;
    if (!a15) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2E431C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  unint64_t v4 = (unsigned __int16 *)((char *)v3 - *v3);
  unsigned int v5 = *v4;
  uint64_t v6 = a2 & 0xFF000000000000;
  if ((a2 & 0xFF000000000000) != 0)
  {
    if (v5 >= 0x39)
    {
      if (!v4[28] || (*(int *)((char *)v3 + v4[28]) & 2) == 0) {
        goto LABEL_13;
      }
      return 2;
    }
    if (v5 < 0xB) {
      return 0;
    }
  }
  else if (v5 < 0x39)
  {
    if (v5 <= 0xA) {
      return 0;
    }
  }
  else if (v4[28] && (*(int *)((char *)v3 + v4[28]) & 1) != 0)
  {
    return 2;
  }
LABEL_13:
  if (v4[5] && (*((unsigned char *)v3 + v4[5] + 1) & 0x80) != 0)
  {
    if (v6)
    {
      if (v5 >= 0x39)
      {
        uint64_t v10 = v4[28];
        if (!v10) {
          return v10 ^ 1;
        }
        unsigned int v11 = *(int *)((char *)v3 + v10);
        if ((v11 & 3) == 0)
        {
          LODWORD(v10) = (v11 >> 5) & 1;
          return v10 ^ 1;
        }
      }
    }
    else if (v5 >= 0x39)
    {
      uint64_t v10 = v4[28];
      if (!v10) {
        return v10 ^ 1;
      }
      int v14 = *(int *)((char *)v3 + v10);
      if ((v14 & 3) == 0) {
        return (v14 & 4) == 0;
      }
    }
    return 1;
  }
  if (v6)
  {
    if (v5 >= 0x39)
    {
      uint64_t v8 = v4[28];
      if (v8)
      {
        unsigned int v9 = *(int *)((char *)v3 + v8);
        if ((v9 & 3) == 0) {
          return (v9 >> 2) & 1;
        }
      }
    }
    return 0;
  }
  if (v5 < 0x39) {
    return 0;
  }
  uint64_t v12 = v4[28];
  if (!v12) {
    return 0;
  }
  unsigned int v13 = *(int *)((char *)v3 + v12);
  if ((v13 & 3) != 0) {
    return 0;
  }
  return (v13 >> 5) & 1;
}

BOOL sub_2E44A4(uint64_t a1, uint64_t a2, void *a3)
{
  a3[1] = *a3;
  uint64_t v6 = (unsigned int *)sub_2E4738((int **)a2);
  BOOL result = sub_2E45D4(a1, v6, (uint64_t)a3, 0, 1, 0);
  uint64_t v8 = a3[1];
  if (*a3 != v8)
  {
    for (uint64_t i = *a3 + 40; ; i += 40)
    {
      BOOL v10 = *(_DWORD *)(i - 8) == *(_DWORD *)(a2 + 32) && *(unsigned __int16 *)(i - 4) == *(unsigned __int16 *)(a2 + 36);
      if (v10) {
        break;
      }
      BOOL v10 = i == v8;
      if (v10) {
        return result;
      }
    }
    uint64_t v11 = i - 40;
    if (i - 40 != v8)
    {
      if (i != v8)
      {
        do
        {
          if (*(_DWORD *)(i + 32) != *(_DWORD *)(a2 + 32)
            || *(unsigned __int16 *)(i + 36) != *(unsigned __int16 *)(a2 + 36))
          {
            long long v13 = *(_OWORD *)i;
            long long v14 = *(_OWORD *)(i + 16);
            *(void *)(v11 + 32) = *(void *)(i + 32);
            *(_OWORD *)uint64_t v11 = v13;
            *(_OWORD *)(v11 + 16) = v14;
            v11 += 40;
          }
          i += 40;
        }
        while (i != v8);
        uint64_t v8 = a3[1];
      }
      if (v11 != v8) {
        a3[1] = v11;
      }
    }
  }
  return result;
}

BOOL sub_2E45D4(uint64_t a1, unsigned int *a2, uint64_t a3, int a4, char a5, char a6)
{
  char v25 = a5;
  char v24 = a6;
  *(void *)(a3 + 8) = *(void *)a3;
  BOOL v8 = sub_2D5904(a1, a2, a4, (char **)(a1 + 7800));
  uint64_t v9 = *(void *)(a1 + 7808) - *(void *)(a1 + 7800);
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = *(unsigned char **)a3;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a3 + 16) - *(void *)a3) >> 3) < v9 >> 3)
  {
    if ((unint64_t)v9 >= 0x3333333333333331) {
      sub_2E00();
    }
    uint64_t v12 = *(unsigned char **)(a3 + 8);
    uint64_t v13 = 40 * v10;
    long long v14 = (char *)operator new(40 * v10);
    long long v15 = &v14[40 * ((v12 - v11) / 40)];
    uint64_t v16 = v15;
    if (v12 != v11)
    {
      uint64_t v17 = &v14[40 * ((v12 - v11) / 40)];
      do
      {
        long long v18 = *(_OWORD *)(v12 - 40);
        long long v19 = *(_OWORD *)(v12 - 24);
        uint64_t v16 = v17 - 40;
        *((void *)v17 - 1) = *((void *)v12 - 1);
        *(_OWORD *)(v17 - 24) = v19;
        *(_OWORD *)(v17 - 40) = v18;
        v12 -= 40;
        v17 -= 40;
      }
      while (v12 != v11);
    }
    *(void *)a3 = v16;
    *(void *)(a3 + 8) = v15;
    *(void *)(a3 + 16) = &v14[v13];
    if (v11) {
      operator delete(v11);
    }
  }
  uint64_t v20 = *(__int8 **)(a3 + 8);
  uint64_t v21 = *(unint64_t **)(a1 + 7800);
  int v22 = *(unint64_t **)(a1 + 7808);
  v26[0] = a1;
  v26[1] = &v25;
  v26[2] = &v24;
  sub_2E7E4C(v21, v22, (char **)a3, v20, (uint64_t)v26);
  return v8;
}

unint64_t sub_2E4738(int **a1)
{
  uint64_t v1 = (char *)*a1;
  uint64_t v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  if (*((unsigned char *)a1 + 38))
  {
    unsigned int v3 = *v2;
    if (v3 < 5) {
      goto LABEL_17;
    }
    if (v2[2])
    {
      unint64_t v4 = __ROR8__(*(void *)&v1[v2[2]], 32);
      unint64_t v5 = HIDWORD(v4);
      return v5 | (v4 << 32);
    }
    if (v3 >= 0x77 && (uint64_t v23 = v2[59]) != 0) {
      unint64_t v4 = *(unsigned __int16 *)&v1[v23];
    }
    else {
LABEL_17:
    }
      unint64_t v4 = 0;
    LODWORD(v5) = *((_DWORD *)a1 + 8);
    return v5 | (v4 << 32);
  }
  if (v2[3])
  {
    unint64_t v4 = __ROR8__(*(void *)&v1[v2[3]], 32);
    unint64_t v5 = HIDWORD(v4);
  }
  else
  {
    unint64_t v6 = *(unsigned int *)&v1[v2[60]];
    unsigned int v7 = *((_DWORD *)a1 + 8);
    unint64_t v4 = v6 >> 16;
    unsigned int v8 = sub_511FC(v7);
    unsigned int v9 = v8 >> 1;
    char v10 = v8 & 0xFE;
    unsigned int v11 = v7 & ~(-1 << (v8 & 0xFE));
    int v12 = sub_51938(v11);
    int v13 = sub_51938(v11 >> 1);
    int v14 = v12 + (char)v6;
    int v15 = v13 + ((__int16)v6 >> 8);
    unsigned int v16 = (int)((((((v14 & ~(v14 >> 31)) - v14 + (v14 >> 31)) >> v9) + (v14 >> 31)) << v9)
              + v14)
        % (1 << v9);
    unsigned int v17 = (int)((((((v15 & ~(v15 >> 31)) - v15 + (v15 >> 31)) >> v9) + (v15 >> 31)) << v9)
              + v15)
        % (1 << v9);
    int v18 = -1 << v9;
    unsigned int v19 = ~(-1 << v9);
    if (v19 < v16) {
      unsigned int v20 = ~v18;
    }
    else {
      unsigned int v20 = v16;
    }
    if (v19 < v17) {
      unsigned int v21 = ~v18;
    }
    else {
      unsigned int v21 = v17;
    }
    sub_518C8(v20, v21);
    LODWORD(v5) = v22 | (1 << v10);
  }
  return v5 | (v4 << 32);
}

unint64_t sub_2E48C4(int **a1)
{
  uint64_t v1 = (char *)*a1;
  uint64_t v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  if (!*((unsigned char *)a1 + 38))
  {
    unsigned int v5 = *v2;
    if (v5 < 5) {
      goto LABEL_17;
    }
    if (v2[2])
    {
      unint64_t v3 = __ROR8__(*(void *)&v1[v2[2]], 32);
      unint64_t v4 = HIDWORD(v3);
      return v4 | (v3 << 32);
    }
    if (v5 >= 0x77 && (uint64_t v23 = v2[59]) != 0) {
      unint64_t v3 = *(unsigned __int16 *)&v1[v23];
    }
    else {
LABEL_17:
    }
      unint64_t v3 = 0;
    LODWORD(v4) = *((_DWORD *)a1 + 8);
    return v4 | (v3 << 32);
  }
  if (v2[3])
  {
    unint64_t v3 = __ROR8__(*(void *)&v1[v2[3]], 32);
    unint64_t v4 = HIDWORD(v3);
  }
  else
  {
    unint64_t v6 = *(unsigned int *)&v1[v2[60]];
    unsigned int v7 = *((_DWORD *)a1 + 8);
    unint64_t v3 = v6 >> 16;
    unsigned int v8 = sub_511FC(v7);
    unsigned int v9 = v8 >> 1;
    char v10 = v8 & 0xFE;
    unsigned int v11 = v7 & ~(-1 << (v8 & 0xFE));
    int v12 = sub_51938(v11);
    int v13 = sub_51938(v11 >> 1);
    int v14 = v12 + (char)v6;
    int v15 = v13 + ((__int16)v6 >> 8);
    unsigned int v16 = (int)((((((v14 & ~(v14 >> 31)) - v14 + (v14 >> 31)) >> v9) + (v14 >> 31)) << v9)
              + v14)
        % (1 << v9);
    unsigned int v17 = (int)((((((v15 & ~(v15 >> 31)) - v15 + (v15 >> 31)) >> v9) + (v15 >> 31)) << v9)
              + v15)
        % (1 << v9);
    int v18 = -1 << v9;
    unsigned int v19 = ~(-1 << v9);
    if (v19 < v16) {
      unsigned int v20 = ~v18;
    }
    else {
      unsigned int v20 = v16;
    }
    if (v19 < v17) {
      unsigned int v21 = ~v18;
    }
    else {
      unsigned int v21 = v17;
    }
    sub_518C8(v20, v21);
    LODWORD(v4) = v22 | (1 << v10);
  }
  return v4 | (v3 << 32);
}

uint64_t sub_2E4A50(uint64_t a1, int **a2, double a3)
{
  sub_2954EC(a1, (uint64_t)a2[4], (uint64_t)v12);
  sub_2E4B5C((uint64_t)v12, __p);
  unsigned int v5 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v5 >= 9u && (uint64_t v6 = v5[4]) != 0) {
    uint64_t v7 = *(unsigned int *)((char *)*a2 + v6);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v11 = v7;
  uint64_t v10 = 300;
  uint64_t v8 = sub_46408((uint64_t *)__p, &v11, &v10, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v13)
  {
    int v14 = v13;
    operator delete(v13);
  }
  return v8;
}

void sub_2E4B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    int v18 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v18 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

void *sub_2E4B5C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_2E51EC(a1, (uint64_t)v19);
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v8 = *(void *)(a1 + 16);
    if (*(void *)(a1 + 8) != v8)
    {
      unint64_t v9 = *(void *)(v8 - 8);
      uint64_t v10 = sub_2964C4(*(void *)a1, v9, 1);
      char v5 = 0;
      uint64_t v11 = &v10[*(unsigned __int16 *)&v10[-*(int *)v10 + 4]];
      uint64_t v12 = (uint64_t)&v11[4 * HIDWORD(v9) + *(unsigned int *)v11];
      int v13 = (int *)(v12 + 4 + *(unsigned int *)(v12 + 4));
      int v14 = (unsigned int *)((char *)v13 + *(unsigned __int16 *)((char *)v13 - *v13 + 6));
      int v7 = *(unsigned int *)((char *)v14 + *v14);
      uint64_t v4 = *(void *)a1;
      uint64_t v6 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
      long long v17 = 0u;
      long long v18 = 0u;
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v4 = 0;
    LODWORD(v6) = 0;
    int v7 = 0;
    char v5 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    memset(v16, 0, 7);
    goto LABEL_7;
  }
  if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
    goto LABEL_6;
  }
  uint64_t v4 = *(void *)a1;
  long long v17 = 0u;
  long long v18 = 0u;
  char v5 = 1;
  LODWORD(v6) = -1;
  int v7 = -1;
LABEL_7:
  v28[0] = v19[0];
  v28[1] = v19[1];
  v28[2] = v19[2];
  v28[3] = v19[3];
  long long v21 = v17;
  uint64_t v20 = v4;
  long long v22 = v18;
  uint64_t v23 = 0;
  int v24 = v6;
  int v25 = v7;
  char v26 = v5;
  *(_DWORD *)&v27[3] = *(_DWORD *)((char *)v16 + 3);
  *(_DWORD *)unsigned int v27 = v16[0];
  return sub_2E6580(a2, v28, (long long *)&v20);
}

BOOL sub_2E4CD4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  char v5 = (int *)sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 >= 0x2Fu)
  {
    uint64_t v7 = v6[23];
    if (v7)
    {
      unsigned int v8 = *((unsigned __int8 *)v5 + v7);
      BOOL v9 = v8 > 0x2D;
      uint64_t v10 = (1 << v8) & 0x208040000000;
      if (!v9 && v10 != 0) {
        return 1;
      }
    }
  }
  int v13 = (int *)sub_2D5D58(a1, v4);
  int v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 < 0x2Fu) {
    return 0;
  }
  uint64_t v15 = v14[23];
  if (!v15) {
    return 0;
  }
  if (*((unsigned char *)v13 + v15) != 47) {
    return 0;
  }
  unint64_t v16 = sub_2E68E8(a1, a2);
  if (v16 <= 0xFFFFFFFEFFFFFFFFLL)
  {
    if (v16) {
      return 0;
    }
  }
  long long v17 = (unsigned int *)sub_2D5EC4(a1, v4, 0);
  sub_2E4F74(a1, v17, (unint64_t *)&__p);
  long long v18 = (unint64_t *)__p;
  unsigned int v19 = v39;
  if (__p == v39)
  {
LABEL_23:
    unsigned int v27 = (unsigned int *)sub_2D5EC4(a1, v4, 1);
    sub_2E4F74(a1, v27, (unint64_t *)&v36);
    unsigned int v28 = v36;
    unint64_t v29 = v37;
    if (v36 == v37)
    {
      int v26 = 0;
    }
    else
    {
      do
      {
        unint64_t v30 = (int *)sub_2D5D58(a1, *v28);
        unint64_t v31 = (unsigned __int16 *)((char *)v30 - *v30);
        if (*v31 >= 0x2Fu)
        {
          uint64_t v32 = v31[23];
          if (v32)
          {
            unsigned int v33 = *((unsigned __int8 *)v30 + v32);
            BOOL v9 = v33 > 0x2D;
            uint64_t v34 = (1 << v33) & 0x208040000000;
            if (!v9 && v34 != 0)
            {
              int v26 = 1;
              goto LABEL_35;
            }
          }
        }
        ++v28;
      }
      while (v28 != v29);
      int v26 = 0;
LABEL_35:
      unsigned int v28 = v36;
    }
    if (v28)
    {
      unsigned int v37 = v28;
      operator delete(v28);
    }
  }
  else
  {
    while (1)
    {
      uint64_t v20 = (int *)sub_2D5D58(a1, *v18);
      long long v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 >= 0x2Fu)
      {
        uint64_t v22 = v21[23];
        if (v22)
        {
          unsigned int v23 = *((unsigned __int8 *)v20 + v22);
          BOOL v9 = v23 > 0x2D;
          uint64_t v24 = (1 << v23) & 0x208040000000;
          if (!v9 && v24 != 0) {
            break;
          }
        }
      }
      if (++v18 == v19) {
        goto LABEL_23;
      }
    }
    int v26 = 1;
  }
  if (__p)
  {
    unsigned int v39 = (unint64_t *)__p;
    operator delete(__p);
  }
  return v26 != 0;
}

void sub_2E4F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2E4F74@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, unint64_t *a3@<X8>)
{
  BOOL result = (char *)sub_2D5904(a1, a2, 0, (char **)(a1 + 7800));
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v6 = *(char **)(a1 + 7808);
  uint64_t v7 = *(char **)(a1 + 7800);
  uint64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_2E00();
    }
    BOOL v9 = operator new(v6 - v7);
    *a3 = (unint64_t)v9;
    a3[1] = (unint64_t)v9;
    a3[2] = (unint64_t)&v9[v8 >> 3];
    do
    {
      uint64_t v10 = *(void *)v7 & 0xFFFFFFFFFFFFLL;
      BOOL result = sub_2AA8EC(a3, v9, &v10);
      BOOL v9 = result + 8;
      v7 += 8;
    }
    while (v7 != v6);
  }
  return result;
}

void sub_2E5024(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2E5044(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = xmmword_20B8E30;
  *(void *)(a3 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  sub_29549C(a1, a2, (uint64_t)&v23);
  sub_2E51EC((uint64_t)&v23, (uint64_t)v19);
  unint64_t v4 = v24;
  if (v26)
  {
    if (v24 == v25) {
      LODWORD(v5) = 0;
    }
    else {
      LODWORD(v5) = -1;
    }
    int v6 = v5;
    if (v20 == v5 && v21 == v5) {
      goto LABEL_28;
    }
  }
  else if (v24 == v25)
  {
    LODWORD(v5) = 0;
    int v6 = 0;
    if (v20) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v21 == 0;
    }
    if (v15) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v8 = *((void *)v25 - 1);
    BOOL v9 = sub_2964C4(v23, v8, 1);
    uint64_t v10 = &v9[*(unsigned __int16 *)&v9[-*(int *)v9 + 4]];
    uint64_t v11 = (uint64_t)&v10[4 * HIDWORD(v8) + *(unsigned int *)v10];
    uint64_t v12 = (int *)(v11 + 4 + *(unsigned int *)(v11 + 4));
    unint64_t v4 = v24;
    unint64_t v5 = (unint64_t)(v25 - v24) >> 3;
    int v13 = (unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6));
    int v6 = *(unsigned int *)((char *)v13 + *v13);
    if (v20 == v5 && v21 == v6) {
      goto LABEL_28;
    }
  }
  do
  {
    unint64_t v17 = sub_2E1BC0((uint64_t)v19);
    int v18 = v16;
    sub_33A50(a3, (unsigned int *)&v17);
    if (v22) {
      sub_2E7608((uint64_t)v19);
    }
    else {
      sub_2E74E8((uint64_t)v19);
    }
  }
  while (v20 != v5 || v21 != v6);
  unint64_t v4 = v24;
LABEL_28:
  if (v4)
  {
    int v25 = v4;
    operator delete(v4);
  }
}

void sub_2E51C0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 - 64);
  if (v3)
  {
    *(void *)(v1 - 56) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_2E51EC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 8;
  if (!*(unsigned char *)(a1 + 32))
  {
    if (*(void *)(a1 + 8) != *(void *)(a1 + 16))
    {
      *(void *)a2 = *(void *)a1;
      *(void *)(a2 + 8) = v4;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 41) = 0u;
      goto LABEL_6;
    }
LABEL_9:
    double result = 0.0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(void *)(a1 + 8) == v5) {
    goto LABEL_9;
  }
  unint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = sub_2964C4(*(void *)a1, v6, 1);
  unint64_t v8 = &v7[*(unsigned __int16 *)&v7[-*(int *)v7 + 4]];
  uint64_t v9 = (uint64_t)&v8[4 * HIDWORD(v6) + *(unsigned int *)v8];
  uint64_t v10 = (int *)(v9 + 4 + *(unsigned int *)(v9 + 4));
  int v11 = ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) - 1;
  uint64_t v12 = (unsigned int *)((char *)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 6));
  LODWORD(v12) = *(unsigned int *)((char *)v12 + *v12) - 1;
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v4;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_DWORD *)(a2 + 48) = v11;
  *(_DWORD *)(a2 + 52) = v12;
  *(unsigned char *)(a2 + 56) = 1;
LABEL_6:

  sub_2E1D08(a2);
  return result;
}

uint64_t sub_2E5314(uint64_t a1, int **a2, char **a3)
{
  unint64_t v3 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v3 >= 0x25u && v3[18]) {
    return sub_2E5340(a1, a2, a3);
  }
  else {
    return 0;
  }
}

uint64_t sub_2E5340(uint64_t a1, int **a2, char **a3)
{
  unint64_t v6 = (unsigned __int16 *)((char *)*a2 - **a2);
  if (*v6 >= 0x25u && (uint64_t v7 = v6[18]) != 0)
  {
    int v8 = *(int *)((char *)*a2 + v7 + *(unsigned int *)((char *)*a2 + v7));
    uint64_t v9 = *a3;
    uint64_t v10 = &(*a3)[-*(int *)*a3];
    if (*(unsigned __int16 *)v10 < 0x25u) {
      goto LABEL_11;
    }
  }
  else
  {
    int v8 = 0;
    uint64_t v9 = *a3;
    uint64_t v10 = &(*a3)[-*(int *)*a3];
    if (*(unsigned __int16 *)v10 < 0x25u)
    {
LABEL_11:
      int v12 = 0;
LABEL_12:
      LOBYTE(v13) = v8 == v12;
      return v13 & 1;
    }
  }
  uint64_t v11 = *((unsigned __int16 *)v10 + 18);
  if (!v11) {
    goto LABEL_11;
  }
  int v12 = *(_DWORD *)&v9[v11 + *(unsigned int *)&v9[v11]];
  if (!v8 || !v12) {
    goto LABEL_12;
  }
  if (sub_2E5810(a1, *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32), *((unsigned int *)a3 + 8) | ((unint64_t)*((unsigned __int16 *)a3 + 18) << 32)))
  {
    LOBYTE(v13) = 1;
    return v13 & 1;
  }
  if (v8 == 1 && v12 == 1)
  {
    LOBYTE(v13) = 0;
    return v13 & 1;
  }
  BOOL v15 = (int *)sub_2D5D58(a1, *((unsigned int *)a2 + 8) | ((unint64_t)*((unsigned __int16 *)a2 + 18) << 32));
  int v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 0x25u && (uint64_t v17 = v16[18]) != 0) {
    int v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  }
  else {
    int v18 = 0;
  }
  sub_2DE69C(v18, &v59);
  unsigned int v19 = (int *)sub_2D5D58(a1, *((unsigned int *)a3 + 8) | ((unint64_t)*((unsigned __int16 *)a3 + 18) << 32));
  int v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 0x25u && (uint64_t v21 = v20[18]) != 0) {
    char v22 = (unsigned int *)((char *)v19 + v21 + *(unsigned int *)((char *)v19 + v21));
  }
  else {
    char v22 = 0;
  }
  sub_2DE69C(v22, &__p);
  uint64_t v23 = (unsigned __int8 *)v59;
  int v25 = (void **)__p;
  uint64_t v24 = v58;
  int v26 = (char *)v60 - (unsigned char *)v59 == (char *)v58 - (unsigned char *)__p;
  unint64_t v54 = (unsigned __int8 *)v60;
  if (v60 == v59)
  {
    LOBYTE(v13) = (char *)v60 - (unsigned char *)v59 == (char *)v58 - (unsigned char *)__p;
    goto LABEL_92;
  }
  if (__p == v58)
  {
    LOBYTE(v13) = 0;
    goto LABEL_92;
  }
  int v55 = *(_DWORD *)__p;
  int v56 = *(_DWORD *)v59;
  BOOL v27 = *(_DWORD *)v59 != *(_DWORD *)__p;
LABEL_29:
  if (v23[32])
  {
    int v13 = 0;
    unsigned int v28 = v25;
    while (1)
    {
      if (!*((unsigned char *)v28 + 32))
      {
        uint64_t v31 = v23[31];
        if ((v31 & 0x80u) == 0) {
          uint64_t v32 = (void *)v23[31];
        }
        else {
          uint64_t v32 = (void *)*((void *)v23 + 2);
        }
        unsigned int v33 = (void *)*((unsigned __int8 *)v28 + 31);
        int v34 = (char)v33;
        if ((char)v33 < 0) {
          unsigned int v33 = v28[2];
        }
        if (v32 == v33)
        {
          if (v34 >= 0) {
            uint64_t v35 = (unsigned __int8 *)(v28 + 1);
          }
          else {
            uint64_t v35 = (unsigned __int8 *)v28[1];
          }
          if ((v31 & 0x80) != 0)
          {
            BOOL v29 = memcmp(*((const void **)v23 + 1), v35, *((void *)v23 + 2)) == 0;
          }
          else
          {
            if (v23[31])
            {
              uint64_t v36 = 0;
              while (v23[v36 + 8] == v35[v36])
              {
                if (v31 == ++v36) {
                  goto LABEL_31;
                }
              }
              goto LABEL_36;
            }
LABEL_31:
            BOOL v29 = 1;
          }
          int v30 = !v29;
          if (*(_DWORD *)v23 != *(_DWORD *)v28) {
            int v30 = 1;
          }
          if ((v30 | v27) != 1)
          {
            LOBYTE(v13) = 1;
            goto LABEL_92;
          }
          v13 |= v30 ^ 1;
        }
      }
LABEL_36:
      v28 += 5;
      if (v28 == v24) {
        goto LABEL_28;
      }
    }
  }
  size_t v37 = *((void *)v23 + 2);
  if ((v23[31] & 0x80u) == 0) {
    __int16 v38 = (void *)v23[31];
  }
  else {
    __int16 v38 = (void *)*((void *)v23 + 2);
  }
  int v13 = 0;
  if ((v23[31] & 0x80) == 0)
  {
    unsigned int v39 = v25;
    while (1)
    {
      unsigned int v40 = (void *)*((unsigned __int8 *)v39 + 31);
      int v41 = (char)v40;
      if ((char)v40 < 0) {
        unsigned int v40 = v39[2];
      }
      if (v38 == v40)
      {
        if (v23[31])
        {
          uint64_t v42 = 0;
          if (v41 >= 0) {
            unsigned __int16 v43 = (char *)(v39 + 1);
          }
          else {
            unsigned __int16 v43 = (char *)v39[1];
          }
          while (v23[v42 + 8] == v43[v42])
          {
            if (v23[31] == ++v42) {
              goto LABEL_69;
            }
          }
        }
        else
        {
LABEL_69:
          if (*(_DWORD *)v23 == *(_DWORD *)v39)
          {
            int v13 = 1;
            if (!*((unsigned char *)v39 + 32) || v56 == v55) {
              goto LABEL_92;
            }
          }
        }
      }
      v39 += 5;
      if (v39 == v24) {
        goto LABEL_28;
      }
    }
  }
  unsigned __int16 v44 = v25;
  while (1)
  {
    int v45 = (void *)*((unsigned __int8 *)v44 + 31);
    int v46 = (char)v45;
    if ((char)v45 < 0) {
      int v45 = v44[2];
    }
    if (v38 == v45)
    {
      int v47 = *((unsigned __int8 *)v44 + 32);
      unint64_t v48 = v46 >= 0 ? (char *)(v44 + 1) : (char *)v44[1];
      if (!memcmp(*((const void **)v23 + 1), v48, v37) && *(_DWORD *)v23 == *(_DWORD *)v44)
      {
        int v13 = 1;
        if (!v47 || v56 == v55) {
          break;
        }
      }
    }
    v44 += 5;
    if (v44 == v24)
    {
LABEL_28:
      v26 &= v13;
      v23 += 40;
      LOBYTE(v13) = v26;
      if (v23 == v54) {
        break;
      }
      goto LABEL_29;
    }
  }
LABEL_92:
  unint64_t v50 = v25;
  if (v24 != v25)
  {
    do
    {
      if (*((char *)v24 - 9) < 0) {
        operator delete(*(v24 - 4));
      }
      v24 -= 5;
    }
    while (v24 != v25);
    unint64_t v50 = __p;
  }
  unint64_t v58 = v25;
  operator delete(v50);
  unsigned __int16 v51 = (void **)v59;
  if (v59)
  {
    uint64_t v52 = v60;
    uint64_t v53 = v59;
    if (v60 != v59)
    {
      do
      {
        if (*((char *)v52 - 9) < 0) {
          operator delete(*(v52 - 4));
        }
        v52 -= 5;
      }
      while (v52 != v51);
      uint64_t v53 = v59;
    }
    double v60 = v51;
    operator delete(v53);
  }
  return v13 & 1;
}

void sub_2E57FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2DE7D0((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_2E5810(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (int *)sub_2D5D58(a1, a2);
  unint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 >= 0x25u && (uint64_t v7 = v6[18]) != 0) {
    int v8 = (char *)v5 + v7 + *(unsigned int *)((char *)v5 + v7);
  }
  else {
    int v8 = 0;
  }
  uint64_t v9 = (int *)sub_2D5D58(a1, a3);
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 < 0x25u) {
    return v8 == 0;
  }
  uint64_t v11 = v10[18];
  if (!v11) {
    return v8 == 0;
  }
  if (!v8) {
    return 0;
  }
  int v12 = (char *)v9 + v11 + *(unsigned int *)((char *)v9 + v11);
  int v13 = &v8[*((unsigned int *)v8 + 1) + 4];
  int v14 = &v12[*((unsigned int *)v12 + 1) + 4];
  BOOL v15 = &v13[-*(int *)v13];
  unsigned int v16 = *(unsigned __int16 *)v15;
  if (v16 >= 5 && *((_WORD *)v15 + 2))
  {
    int v17 = *(_DWORD *)&v13[*((unsigned __int16 *)v15 + 2)];
    uint64_t v18 = *(int *)v14;
    unsigned int v19 = &v14[-v18];
    if (*(unsigned __int16 *)&v14[-v18] < 5u) {
      goto LABEL_11;
    }
LABEL_16:
    uint64_t v22 = *((unsigned __int16 *)v19 + 2);
    if (v22) {
      LODWORD(v22) = *(_DWORD *)&v14[v22];
    }
    if (v17 != v22) {
      return 0;
    }
    goto LABEL_19;
  }
  int v17 = 0;
  uint64_t v18 = *(int *)v14;
  unsigned int v19 = &v14[-v18];
  if (*(unsigned __int16 *)&v14[-v18] >= 5u) {
    goto LABEL_16;
  }
LABEL_11:
  if (v17) {
    return 0;
  }
LABEL_19:
  if (v16 >= 7)
  {
    uint64_t v23 = *((unsigned __int16 *)v15 + 3);
    if (v23)
    {
      uint64_t v24 = &v13[v23];
      uint64_t v25 = *(unsigned int *)v24;
      BOOL v27 = &v24[v25 + 4];
      size_t v26 = *(unsigned int *)&v24[v25];
      if (v26 >= 0x17)
      {
        if ((v26 | 7) == 0x17) {
          uint64_t v30 = (v26 & 0xFFFFFFF8) + 8;
        }
        else {
          uint64_t v30 = v26 | 7;
        }
        p_dst = (void **)operator new(v30 + 1);
        size_t __n = v26;
        uint64_t v57 = v30 - 0x7FFFFFFFFFFFFFFFLL;
        long long __dst = p_dst;
      }
      else
      {
        HIBYTE(v57) = *(_DWORD *)&v24[v25];
        p_dst = (void **)&__dst;
        if (!v26)
        {
LABEL_31:
          *((unsigned char *)p_dst + v26) = 0;
          BOOL v29 = &v14[-*(int *)v14];
          if (*(unsigned __int16 *)v29 < 7u) {
            goto LABEL_36;
          }
          goto LABEL_32;
        }
      }
      memcpy(p_dst, v27, v26);
      goto LABEL_31;
    }
  }
  HIBYTE(v57) = 0;
  LOBYTE(__dst) = 0;
  BOOL v29 = &v14[-v18];
  if (*(unsigned __int16 *)&v14[-v18] < 7u) {
    goto LABEL_36;
  }
LABEL_32:
  uint64_t v31 = *((unsigned __int16 *)v29 + 3);
  if (v31)
  {
    uint64_t v32 = &v14[v31];
    uint64_t v33 = *(unsigned int *)v32;
    uint64_t v35 = &v32[v33 + 4];
    size_t v34 = *(unsigned int *)&v32[v33];
    if (v34 >= 0x17)
    {
      uint64_t v38 = (v34 & 0xFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17) {
        uint64_t v38 = v34 | 7;
      }
      uint64_t v39 = v38 + 1;
      p_p = operator new(v38 + 1);
      size_t v53 = v34;
      unint64_t v54 = v39 | 0x8000000000000000;
      std::string __p = p_p;
    }
    else
    {
      HIBYTE(v54) = *(_DWORD *)&v32[v33];
      p_p = &__p;
      if (!v34) {
        goto LABEL_41;
      }
    }
    memcpy(p_p, v35, v34);
LABEL_41:
    *((unsigned char *)p_p + v34) = 0;
    unsigned int v37 = HIBYTE(v54);
    goto LABEL_42;
  }
LABEL_36:
  unsigned int v37 = 0;
  HIBYTE(v54) = 0;
  LOBYTE(__p) = 0;
LABEL_42:
  char v40 = HIBYTE(v57);
  if (v57 >= 0) {
    size_t v41 = HIBYTE(v57);
  }
  else {
    size_t v41 = __n;
  }
  size_t v42 = v53;
  if ((v37 & 0x80u) == 0) {
    size_t v42 = v37;
  }
  if (v41 == v42)
  {
    if ((v37 & 0x80u) == 0) {
      unsigned __int16 v43 = (unsigned __int8 *)&__p;
    }
    else {
      unsigned __int16 v43 = (unsigned __int8 *)__p;
    }
    if (v57 < 0)
    {
      BOOL v20 = memcmp(__dst, v43, __n) == 0;
    }
    else if (HIBYTE(v57))
    {
      uint64_t v44 = HIBYTE(v57) - 1;
      int v45 = (void **)&__dst;
      do
      {
        int v47 = *(unsigned __int8 *)v45;
        int v45 = (void **)((char *)v45 + 1);
        int v46 = v47;
        int v49 = *v43++;
        int v48 = v49;
        BOOL v51 = v44-- != 0;
        BOOL v20 = v46 == v48;
      }
      while (v46 == v48 && v51);
    }
    else
    {
      BOOL v20 = 1;
    }
  }
  else
  {
    BOOL v20 = 0;
  }
  if ((v37 & 0x80) != 0) {
    operator delete(__p);
  }
  if (v40 < 0) {
    operator delete(__dst);
  }
  return v20;
}

void sub_2E5B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2E5B50(int **a1)
{
  if (*((unsigned char *)a1 + 38)) {
    uint64_t v1 = a1[3];
  }
  else {
    uint64_t v1 = a1[2];
  }
  if (v1)
  {
    uint64_t v2 = (unsigned __int16 *)((char *)v1 - *v1);
    if (*v2 < 7u || (uint64_t v3 = v2[3]) == 0 || (LOWORD(v1) = *(_WORD *)((char *)v1 + v3), (_WORD)v1 == 0xFFFF)) {
      LOWORD(v1) = 0;
    }
  }
  if (*((unsigned char *)a1 + 38)) {
    uint64_t v4 = a1[2];
  }
  else {
    uint64_t v4 = a1[3];
  }
  if (v4
    && ((uint64_t v5 = (unsigned __int16 *)((char *)v4 - *v4), *v5 < 7u)
     || (uint64_t v6 = v5[3]) == 0
     || (LOWORD(v4) = *(_WORD *)((char *)v4 + v6), (_WORD)v4 == 0xFFFF)))
  {
    LOWORD(v4) = 0;
    uint64_t v7 = (char *)*a1;
    int v8 = (unsigned __int16 *)((char *)*a1 - **a1);
    if (*v8 < 0xBu) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v7 = (char *)*a1;
    int v8 = (unsigned __int16 *)((char *)*a1 - **a1);
    if (*v8 < 0xBu) {
      goto LABEL_21;
    }
  }
  uint64_t v9 = v8[5];
  if (v9)
  {
    int v10 = (*(_DWORD *)&v7[v9] >> 2) & 1;
    goto LABEL_22;
  }
LABEL_21:
  LOBYTE(v10) = 0;
LABEL_22:
  unsigned int v11 = ((unsigned __int16)v4 + (unsigned __int16)v1) << v10;
  if (v11 >= 0xFFFF) {
    return 0xFFFFLL;
  }
  else {
    return v11;
  }
}

uint64_t sub_2E5C38(uint64_t a1, unint64_t a2, int a3)
{
  if (!a3) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 7773)) {
    return 0;
  }
  uint64_t v4 = a1 + 3896;
  uint64_t v5 = sub_2E5E08(a1 + 3896, a2, 1);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v6 < 0xBu) {
    return 0;
  }
  if (!*((_WORD *)v6 + 5)) {
    return 0;
  }
  uint64_t v7 = &v5[*((unsigned __int16 *)v6 + 5) + *(unsigned int *)&v5[*((unsigned __int16 *)v6 + 5)]];
  if (*(_DWORD *)v7 <= HIDWORD(a2)) {
    return 0;
  }
  int v8 = &v7[8 * HIDWORD(a2)];
  unsigned int v11 = *((_DWORD *)v8 + 1);
  int v10 = v8 + 4;
  unsigned int v9 = v11;
  if (!v11) {
    return 0;
  }
  int v12 = sub_2E5F98(v4, v9, 1);
  if (!v12) {
    return 0;
  }
  int v13 = &v12[-*(int *)v12];
  unsigned int v14 = *(unsigned __int16 *)v13;
  if ((*((unsigned char *)v10 + 6) & 2) != 0)
  {
    if (v14 >= 5)
    {
      if (*((_WORD *)v13 + 2)) {
        BOOL v15 = &v12[*((unsigned __int16 *)v13 + 2) + *(unsigned int *)&v12[*((unsigned __int16 *)v13 + 2)]];
      }
      else {
        BOOL v15 = 0;
      }
      if (v14 < 7) {
        goto LABEL_27;
      }
      int v17 = *((unsigned __int16 *)v13 + 3);
      if (!*((_WORD *)v13 + 3)) {
        goto LABEL_27;
      }
LABEL_26:
      uint64_t v18 = &v12[v17 + *(unsigned int *)&v12[v17]];
      goto LABEL_28;
    }
    return 0;
  }
  if (v14 < 7)
  {
    BOOL v15 = 0;
    if (v14 >= 5) {
      goto LABEL_21;
    }
    return 0;
  }
  if (*((_WORD *)v13 + 3)) {
    BOOL v15 = &v12[*((unsigned __int16 *)v13 + 3) + *(unsigned int *)&v12[*((unsigned __int16 *)v13 + 3)]];
  }
  else {
    BOOL v15 = 0;
  }
LABEL_21:
  int v17 = *((unsigned __int16 *)v13 + 2);
  if (*((_WORD *)v13 + 2)) {
    goto LABEL_26;
  }
LABEL_27:
  uint64_t v18 = 0;
LABEL_28:
  if (v15 && (uint64_t v19 = *((unsigned __int16 *)v10 + 2), *(_DWORD *)v15 > v19)) {
    uint64_t v20 = (uint64_t)&v15[4 * v19 + 4 + *(unsigned int *)&v15[4 * v19 + 4]];
  }
  else {
    uint64_t v20 = 0;
  }
  if (v18 && *(_DWORD *)v18 > *((unsigned __int16 *)v10 + 2)) {
    return v20;
  }
  else {
    return v20;
  }
}

char *sub_2E5E08(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 2128) == a2)
    {
      unsigned int v7 = 88;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2152) == a2)
    {
      unsigned int v7 = 89;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2176) == a2)
    {
      unsigned int v7 = 90;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2200) == a2)
    {
      unsigned int v7 = 91;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      unsigned int v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 2184);
    unint64_t v12 = *(void *)(a1 + 2160);
    unint64_t v13 = *(void *)(a1 + 2136);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 2136);
    }
    int v15 = 88;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 2160);
    }
    int v17 = 89;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 2184);
    }
    unint64_t v19 = *(void *)(a1 + 2208);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 90;
    }
    uint64_t v21 = (unsigned int *)sub_2AB884(v5, 22, a2, 1);
    unsigned int v22 = 91;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_2E6128(v24);
  return 0;
}

char *sub_2E5F98(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 2032) == a2)
    {
      unsigned int v7 = 84;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2056) == a2)
    {
      unsigned int v7 = 85;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2080) == a2)
    {
      unsigned int v7 = 86;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2104) == a2)
    {
      unsigned int v7 = 87;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      unsigned int v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 2088);
    unint64_t v12 = *(void *)(a1 + 2064);
    unint64_t v13 = *(void *)(a1 + 2040);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 2040);
    }
    int v15 = 84;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 2064);
    }
    int v17 = 85;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 2088);
    }
    unint64_t v19 = *(void *)(a1 + 2112);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 86;
    }
    uint64_t v21 = (unsigned int *)sub_2AB884(v5, 21, a2, 1);
    unsigned int v22 = 87;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_2E6354(v24);
  return 0;
}

uint64_t sub_2E6128(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      unsigned int v9 = sub_736EC(0x16u);
      int v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_2E6280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

uint64_t sub_2E6354(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      unsigned int v9 = sub_736EC(0x15u);
      int v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_2E64AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

void *sub_2E6580(void *a1, long long *a2, long long *a3)
{
  a1[2] = 0;
  uint64_t v6 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  long long v7 = a2[1];
  long long v26 = *a2;
  long long v27 = v7;
  long long v8 = a2[3];
  long long v28 = a2[2];
  long long v29 = v8;
  unsigned int v9 = *((_DWORD *)a3 + 12);
  unsigned int v10 = *((_DWORD *)a3 + 13);
  if ((void)v8 != __PAIR64__(v10, v9))
  {
    size_t v11 = 0;
    unint64_t v12 = -1;
    do
    {
      while (!BYTE8(v29))
      {
        sub_2E74E8((uint64_t)&v26);
        ++v12;
        v11 += 12;
        if (v29 == v9 && DWORD1(v29) == v10) {
          goto LABEL_13;
        }
      }
      sub_2E7608((uint64_t)&v26);
      ++v12;
      v11 += 12;
    }
    while (v29 != v9 || DWORD1(v29) != v10);
LABEL_13:
    long long v21 = *a2;
    long long v22 = a2[1];
    long long v23 = a2[2];
    long long v24 = a2[3];
    long long v17 = *a3;
    long long v18 = a3[1];
    long long v19 = a3[2];
    long long v20 = a3[3];
    if (v12 >= 0x1555555555555555) {
      sub_2E00();
    }
    std::string v15 = (char *)operator new(v11);
    *a1 = v15;
    a1[1] = v15;
    a1[2] = &v15[v11];
    long long v26 = v21;
    long long v27 = v22;
    long long v28 = v23;
    long long v29 = v24;
    v25[0] = v17;
    v25[1] = v18;
    v25[2] = v19;
    v25[3] = v20;
    a1[1] = sub_2E6714(v6, &v26, (uint64_t)v25, (uint64_t)v15);
  }
  return a1;
}

void sub_2E66EC(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  unint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2E6714(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  int v5 = *(_DWORD *)(a3 + 48);
  uint64_t v6 = *(unsigned int *)(a3 + 52);
  long long v7 = a2[1];
  long long v26 = *a2;
  long long v27 = v7;
  long long v8 = a2[3];
  long long v28 = a2[2];
  long long v29 = v8;
  uint64_t v9 = DWORD1(v8);
  if (v8 != v5 || DWORD1(v8) != v6)
  {
    while (1)
    {
      uint64_t v11 = *((void *)&v27 + 1) + 4 * v9;
      int v12 = *(unsigned __int16 *)(v11 + 4);
      int v13 = *(unsigned __int16 *)(v11 + 6);
      unsigned int v14 = sub_511FC(DWORD2(v28));
      unsigned int v15 = DWORD2(v28) & ~(-1 << (v14 & 0xFE));
      int v16 = sub_51938(v15);
      int v17 = sub_51938(v15 >> 1);
      long long v18 = (unsigned __int16 *)(v27 - *(int *)v27);
      unsigned int v19 = *v18;
      if (v19 < 0xD) {
        break;
      }
      if (!v18[6]) {
        goto LABEL_11;
      }
      int v20 = *(_DWORD *)(v27 + v18[6] + *(unsigned int *)(v27 + v18[6]) + 4 * DWORD1(v29) + 4);
LABEL_18:
      int v24 = 1 << -(v14 >> 1);
      if (v14 < 2) {
        int v24 = -2;
      }
      LODWORD(v25) = v24 * v17 + 4 * v13;
      if (v25 >= 0xFFFFFFFE) {
        uint64_t v25 = 4294967294;
      }
      else {
        uint64_t v25 = v25;
      }
      *(void *)a4 = (v24 * v16 + 4 * v12) | (unint64_t)(v25 << 32);
      *(_DWORD *)(a4 + 8) = v20;
      if (BYTE8(v29))
      {
        sub_2E7608((uint64_t)&v26);
        a4 += 12;
        uint64_t v9 = DWORD1(v29);
        if (v29 == v5) {
          goto LABEL_6;
        }
      }
      else
      {
        sub_2E74E8((uint64_t)&v26);
        a4 += 12;
        uint64_t v9 = DWORD1(v29);
        if (v29 == v5)
        {
LABEL_6:
          if (v9 == v6) {
            return a4;
          }
        }
      }
    }
    if (v19 >= 0xB)
    {
LABEL_11:
      if (v18[5])
      {
        int v21 = *(unsigned __int16 *)(v27 + v18[5] + *(unsigned int *)(v27 + v18[5]) + 2 * DWORD1(v29) + 4);
        if (v21 != 0xFFFF)
        {
          uint64_t v22 = v18[4];
          if (v22) {
            int v23 = *(_DWORD *)(v27 + v22);
          }
          else {
            int v23 = 0;
          }
          int v20 = HIDWORD(v28) + v21 + v23;
          goto LABEL_18;
        }
      }
    }
    int v20 = 0x7FFFFFFF;
    goto LABEL_18;
  }
  return a4;
}

unint64_t sub_2E68E8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  int v5 = (int *)sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 >= 0x1Fu)
  {
    uint64_t v7 = v6[15];
    if (v7)
    {
      uint64_t v8 = *(unsigned int *)((char *)v5 + v7);
      if (v8 != -1)
      {
        unsigned int v9 = sub_2E6AA8(a1, a2);
        return v9 | (unint64_t)(v8 << 32);
      }
    }
  }
  unsigned int v10 = (int *)sub_2D5D58(a1, v4);
  uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 < 0x2Fu) {
    goto LABEL_17;
  }
  uint64_t v12 = v11[23];
  if (!v12 || *((unsigned char *)v10 + v12) != 44) {
    goto LABEL_17;
  }
  int v13 = (int *)sub_2D5D58(a1, v4);
  unsigned int v14 = (unsigned __int16 *)((char *)v13 - *v13);
  unsigned int v15 = *v14;
  if (v15 < 0x5F)
  {
    LODWORD(v16) = 0;
    LODWORD(v17) = 0;
  }
  else
  {
    uint64_t v16 = v14[47];
    if (v14[47]) {
      LODWORD(v16) = *(int *)((char *)v13 + v16 + *(unsigned int *)((char *)v13 + v16));
    }
    if (v15 < 0x61)
    {
      if (!v16) {
        goto LABEL_17;
      }
      goto LABEL_20;
    }
    uint64_t v17 = v14[48];
    if (v17)
    {
      if (*(int *)((char *)v13 + v17 + *(unsigned int *)((char *)v13 + v17)) + v16) {
        goto LABEL_20;
      }
LABEL_17:
      unsigned int v9 = 0;
      uint64_t v8 = 0xFFFFFFFFLL;
      return v9 | (unint64_t)(v8 << 32);
    }
  }
  if (!(v17 + v16)) {
    goto LABEL_17;
  }
LABEL_20:
  std::string __p = 0;
  int v21 = 0;
  uint64_t v22 = 0;
  p_p = &__p;
  sub_2E719C(a1, v4, 8, (uint64_t)&p_p);
  if ((a2 & 0xFF000000000000) != 0) {
    unint64_t v19 = sub_2E6CBC(a1, (uint64_t)v21, (uint64_t)v21, (uint64_t)__p, (uint64_t)__p);
  }
  else {
    unint64_t v19 = sub_2E6B94(a1, (unsigned int *)__p, v21);
  }
  unsigned int v9 = v19;
  uint64_t v8 = HIDWORD(v19);
  if (__p)
  {
    int v21 = (unsigned int *)__p;
    operator delete(__p);
  }
  return v9 | (unint64_t)(v8 << 32);
}

void sub_2E6A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2E6AA8(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 7768);
  unsigned int v5 = sub_511FC(a2);
  char v6 = v5;
  if (v4 <= 0xF)
  {
    char v7 = v5 - 2 * v4;
    return a2 >> (v7 & 0xFE);
  }
  unsigned int v8 = v5 >> 1;
  char v9 = sub_511FC(a2);
  LOBYTE(v10) = v6 & 0xFE;
  if (sub_2E6DE0(a1 + 3896, a2 >> ((v9 - v10) & 0xFE), 1))
  {
LABEL_8:
    *(_DWORD *)(a1 + 7768) = v8;
    char v7 = sub_511FC(a2) - v10;
    return a2 >> (v7 & 0xFE);
  }
  int v11 = -2 * v8;
  while (v8)
  {
    --v8;
    char v12 = sub_511FC(a2);
    v11 += 2;
    if (sub_2E6DE0(a1 + 3896, a2 >> ((v11 + v12) & 0xFE), 1))
    {
      int v10 = -v11;
      goto LABEL_8;
    }
  }
  return 0;
}

unint64_t sub_2E6B94(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  if (a2 == a3) {
    return 0xFFFFFFFF00000000;
  }
  unsigned int v4 = a2;
  char v6 = (unsigned char *)(a1 + 7774);
  uint64_t v7 = a1 + 3896;
  do
  {
    uint64_t v8 = *((unsigned __int16 *)v4 + 2);
    uint64_t v9 = *v4;
    if (!*v6
      || (int v10 = sub_290DEC(v7, *v4, 1)) != 0
      && (int v11 = &v10[-*(int *)v10], *(unsigned __int16 *)v11 >= 5u)
      && (uint64_t v12 = *((unsigned __int16 *)v11 + 2)) != 0
      && *(_DWORD *)&v10[v12 + *(unsigned int *)&v10[v12]] > v8
      && sub_295DB4(a1, v9 | (v8 << 32)))
    {
      int v13 = (int *)sub_2D5D58(a1, v9 | (v8 << 32));
      unsigned int v14 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v14 >= 0x1Fu)
      {
        uint64_t v15 = v14[15];
        if (v15)
        {
          uint64_t v16 = *(unsigned int *)((char *)v13 + v15);
          if (v16 != -1) {
            return sub_2E6AA8(a1, v9) | (unint64_t)(v16 << 32);
          }
        }
      }
    }
    v4 += 6;
  }
  while (v4 != a3);
  return 0xFFFFFFFF00000000;
}

unint64_t sub_2E6CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 == a5) {
    return 0xFFFFFFFF00000000;
  }
  uint64_t v6 = a3;
  uint64_t v8 = (unsigned char *)(a1 + 7774);
  uint64_t v9 = a1 + 3896;
  do
  {
    unsigned int v11 = *(_DWORD *)(v6 - 24);
    v6 -= 24;
    unsigned int v10 = v11;
    uint64_t v12 = *(unsigned __int16 *)(v6 + 4);
    unint64_t v13 = v11 | (unint64_t)(v12 << 32);
    if (*v8)
    {
      unsigned int v14 = sub_290DEC(v9, v10, 1);
      if (!v14) {
        continue;
      }
      uint64_t v15 = &v14[-*(int *)v14];
      if (*(unsigned __int16 *)v15 < 5u) {
        continue;
      }
      uint64_t v16 = *((unsigned __int16 *)v15 + 2);
      if (!v16
        || *(_DWORD *)&v14[v16 + *(unsigned int *)&v14[v16]] <= v12
        || !sub_295DB4(a1, v13))
      {
        continue;
      }
    }
    uint64_t v17 = (int *)sub_2D5D58(a1, v13);
    long long v18 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v18 >= 0x1Fu)
    {
      uint64_t v19 = v18[15];
      if (v19)
      {
        uint64_t v20 = *(unsigned int *)((char *)v17 + v19);
        if (v20 != -1) {
          return sub_2E6AA8(a1, v10) | (unint64_t)(v20 << 32);
        }
      }
    }
  }
  while (v6 != a5);
  return 0xFFFFFFFF00000000;
}

char *sub_2E6DE0(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 496) == a2)
    {
      unsigned int v7 = 20;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 520) == a2)
    {
      unsigned int v7 = 21;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 544) == a2)
    {
      unsigned int v7 = 22;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 568) == a2)
    {
      unsigned int v7 = 23;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 552);
    unint64_t v12 = *(void *)(a1 + 528);
    unint64_t v13 = *(void *)(a1 + 504);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 504);
    }
    int v15 = 20;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 528);
    }
    int v17 = 21;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 552);
    }
    unint64_t v19 = *(void *)(a1 + 576);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 22;
    }
    int v21 = (unsigned int *)sub_2AB884(v5, 5, a2, 1);
    unsigned int v22 = 23;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_2E6F70(v24);
  return 0;
}

uint64_t sub_2E6F70(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = sub_736EC(5u);
      unsigned int v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_2E70C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

void sub_2E719C(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  char v29 = a3;
  long long v6 = (int *)sub_2D5D58(a1, a2);
  unsigned int v7 = v6;
  v28[0] = &v29;
  v28[1] = a4;
  uint64_t v8 = *v6;
  uint64_t v9 = -v8;
  unsigned int v10 = (unsigned __int16 *)((char *)v6 - v8);
  if (*v10 >= 0x5Fu)
  {
    uint64_t v11 = v10[47];
    if (v11)
    {
      unint64_t v12 = (unsigned int *)((char *)v6 + v11 + *(unsigned int *)((char *)v6 + v11));
      unsigned int v15 = *v12;
      unint64_t v13 = v12 + 1;
      uint64_t v14 = v15;
      uint64_t v30 = a1;
      uint64_t v31 = v28;
      if (v15)
      {
        uint64_t v16 = 4 * v14;
        std::string v17 = v13;
        do
        {
          unsigned int v18 = *v17++;
          sub_2E72A4(&v30, (int *)((char *)v13 + v18));
          unint64_t v13 = v17;
          v16 -= 4;
        }
        while (v16);
        uint64_t v9 = -(uint64_t)*v7;
      }
    }
  }
  std::string::size_type v19 = (unsigned __int16 *)((char *)v7 + v9);
  if (*v19 >= 0x61u)
  {
    uint64_t v20 = v19[48];
    if (v20)
    {
      int v21 = (unsigned int *)((char *)v7 + v20 + *(unsigned int *)((char *)v7 + v20));
      unsigned int v24 = *v21;
      unsigned int v22 = v21 + 1;
      uint64_t v23 = v24;
      uint64_t v30 = a1;
      uint64_t v31 = v28;
      if (v24)
      {
        uint64_t v25 = 4 * v23;
        unsigned int v26 = v22;
        do
        {
          unsigned int v27 = *v26++;
          sub_2E72A4(&v30, (int *)((char *)v22 + v27));
          unsigned int v22 = v26;
          v25 -= 4;
        }
        while (v25);
      }
    }
  }
}

void sub_2E72A4(uint64_t *a1, int *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = (unsigned __int16 *)((char *)a2 - *a2);
  uint64_t v5 = *(void *)((char *)a2 + v4[2]);
  if (*v4 < 7u || (uint64_t v6 = v4[3]) == 0)
  {
    int v7 = 0;
    uint64_t v8 = WORD2(v5);
    uint64_t v9 = v5;
    if (!*(unsigned char *)(v3 + 7774)) {
      goto LABEL_11;
    }
LABEL_6:
    unsigned int v10 = sub_290DEC(v3 + 3896, v9, 1);
    if (!v10) {
      return;
    }
    uint64_t v11 = &v10[-*(int *)v10];
    if (*(unsigned __int16 *)v11 < 5u) {
      return;
    }
    uint64_t v12 = *((unsigned __int16 *)v11 + 2);
    if (!v12
      || *(_DWORD *)&v10[v12 + *(unsigned int *)&v10[v12]] <= v8
      || !sub_295DB4(v3, v9 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD2(v5) << 32)))
    {
      return;
    }
    goto LABEL_11;
  }
  int v7 = *((unsigned __int8 *)a2 + v6);
  uint64_t v8 = WORD2(v5);
  uint64_t v9 = v5;
  if (*(unsigned char *)(v3 + 7774)) {
    goto LABEL_6;
  }
LABEL_11:
  unint64_t v13 = (unsigned __int8 **)a1[1];
  if (v7 == **v13)
  {
    uint64_t v14 = v5 & 0xFF000000000000;
    uint64_t v15 = v8 << 32;
    uint64_t v16 = v13[1];
    std::string v17 = *(unint64_t ***)v16;
    std::string::size_type v19 = *(unint64_t **)(*(void *)v16 + 8);
    unint64_t v18 = *(void *)(*(void *)v16 + 16);
    if ((unint64_t)v19 >= v18)
    {
      int v21 = *v17;
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (v19 - *v17);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_2E00();
      }
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v21) >> 3);
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x555555555555555) {
        unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        if (v25 > 0xAAAAAAAAAAAAAAALL) {
          sub_188D718();
        }
        unsigned int v26 = (char *)operator new(24 * v25);
      }
      else
      {
        unsigned int v26 = 0;
      }
      unsigned int v27 = &v26[24 * v22];
      *(void *)unsigned int v27 = v9 | ((unint64_t)(v14 == 0) << 48) | v15;
      *((void *)v27 + 1) = 0x7FFFFFFFFFFFFFFFLL;
      v27[16] = v7;
      uint64_t v20 = (unint64_t *)(v27 + 24);
      if (v19 != v21)
      {
        do
        {
          long long v28 = *(_OWORD *)(v19 - 3);
          *(v27 - 8) = *((unsigned char *)v19 - 8);
          *(_OWORD *)(v27 - 24) = v28;
          v27 -= 24;
          v19 -= 3;
        }
        while (v19 != v21);
        std::string::size_type v19 = *v17;
      }
      unsigned int *v17 = (unint64_t *)v27;
      v17[1] = v20;
      v17[2] = (unint64_t *)&v26[24 * v25];
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      unint64_t *v19 = v9 | ((unint64_t)(v14 == 0) << 48) | v15;
      v19[1] = 0x7FFFFFFFFFFFFFFFLL;
      *((unsigned char *)v19 + 16) = v7;
      uint64_t v20 = v19 + 3;
    }
    v17[1] = v20;
  }
}

uint64_t sub_2E74E8(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = v2 + 1;
  uint64_t v3 = *(int **)(a1 + 24);
  int v4 = *v3;
  if ((int)v2 + 1 >= *v3)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8);
    unint64_t v13 = (*(_DWORD *)(a1 + 48) + 1);
    *(_DWORD *)(a1 + 48) = v13;
    if (v13 >= v12 >> 3) {
      return a1;
    }
    goto LABEL_11;
  }
  uint64_t v5 = v3 + 1;
  uint64_t v6 = (unsigned __int16 *)&v3[v2 + 1];
  int v7 = (unsigned __int16 *)&v5[(v2 + 1)];
  if (*v6 == *v7 && v6[1] == v7[1])
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8);
    if (v4 != 2 || v8 != 8)
    {
      int v10 = v2 + 2;
      unint64_t v11 = (*(_DWORD *)(a1 + 48) + 1);
      *(_DWORD *)(a1 + 48) = v11;
      *(_DWORD *)(a1 + 52) = v10;
      if (v11 < v8 >> 3)
      {
        do
        {
LABEL_11:
          sub_2E1D08(a1);
          *(_DWORD *)(a1 + 52) = 1;
          uint64_t v14 = *(unsigned __int16 **)(a1 + 24);
          if (v14[2] != v14[4]) {
            break;
          }
          if (v14[3] != v14[5]) {
            break;
          }
          unint64_t v15 = (*(_DWORD *)(a1 + 48) + 1);
          *(_DWORD *)(a1 + 48) = v15;
          *(_DWORD *)(a1 + 52) = 2;
        }
        while (v15 < (uint64_t)(*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8)) >> 3);
      }
    }
  }
  return a1;
}

uint64_t sub_2E7608(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = v2 - 1;
  uint64_t v3 = *(int **)(a1 + 24);
  int v4 = *v3;
  if ((int)v2 - 1 >= *v3)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8);
    unint64_t v13 = (*(_DWORD *)(a1 + 48) - 1);
    *(_DWORD *)(a1 + 48) = v13;
    if (v13 >= v12 >> 3) {
      return a1;
    }
    goto LABEL_11;
  }
  uint64_t v5 = v3 + 1;
  uint64_t v6 = (unsigned __int16 *)&v3[v2 + 1];
  int v7 = (unsigned __int16 *)&v5[(v2 - 1)];
  if (*v6 == *v7 && v6[1] == v7[1])
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8);
    if (v4 != 2 || v8 != 8)
    {
      int v10 = v2 - 2;
      unint64_t v11 = (*(_DWORD *)(a1 + 48) - 1);
      *(_DWORD *)(a1 + 48) = v11;
      *(_DWORD *)(a1 + 52) = v10;
      if (v11 < v8 >> 3)
      {
        do
        {
LABEL_11:
          sub_2E1D08(a1);
          uint64_t v14 = *(int **)(a1 + 24);
          int v16 = *v14++;
          int v15 = v16;
          *(_DWORD *)(a1 + 52) = v16 - 2;
          std::string v17 = (unsigned __int16 *)&v14[v16 - 1];
          unint64_t v18 = (unsigned __int16 *)&v14[v16 - 2];
          if (*v17 != *v18) {
            break;
          }
          if (v17[1] != v18[1]) {
            break;
          }
          unint64_t v19 = (*(_DWORD *)(a1 + 48) - 1);
          *(_DWORD *)(a1 + 48) = v19;
          *(_DWORD *)(a1 + 52) = v15 - 3;
        }
        while (v19 < (uint64_t)(*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8)) >> 3);
      }
    }
  }
  return a1;
}

unsigned int *sub_2E7730@<X0>(unsigned int *__src@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = a2;
  if (!__src)
  {
    a2[23] = 0;
    *a2 = 0;
    return __src;
  }
  int v4 = __src + 1;
  size_t v3 = *__src;
  if (v3 >= 0x17)
  {
    if ((v3 | 7) == 0x17) {
      uint64_t v5 = (v3 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v5 = v3 | 7;
    }
    uint64_t v6 = operator new(v5 + 1);
    v2[1] = v3;
    v2[2] = v5 - 0x7FFFFFFFFFFFFFFFLL;
    *uint64_t v2 = v6;
    uint64_t v2 = v6;
  }
  else
  {
    a2[23] = v3;
    if (!v3) {
      goto LABEL_11;
    }
  }
  __src = (unsigned int *)memcpy(v2, v4, v3);
LABEL_11:
  *((unsigned char *)v2 + v3) = 0;
  return __src;
}

uint64_t sub_2E77D4(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v8 = (int *)sub_2D5D58(a1, a2 & 0xFFFFFFFFFFFFLL);
  uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 0x21u)
  {
    uint64_t v10 = v9[16];
    if (v10)
    {
      unint64_t v11 = (unsigned int *)((char *)v8 + v10);
      uint64_t v12 = *v11;
      uint64_t v14 = (unint64_t *)((char *)v11 + v12 + 4);
      uint64_t v13 = *(unsigned int *)((char *)v11 + v12);
      if (v13)
      {
        char v15 = 0;
        uint64_t v16 = 8 * v13;
        uint64_t v17 = a3 & 0xFFFFFFFFFFFFLL;
        while (1)
        {
          if (!sub_2E7CD8(a1, *v14)) {
            goto LABEL_6;
          }
          unint64_t v18 = (int *)sub_2DBC9C(a1, *v14);
          if (a4 == 3)
          {
            uint64_t v19 = *v18;
            if (*(unsigned __int16 *)((char *)v18 - v19) < 0xFu
              || !*(_WORD *)((char *)v18 - v19 + 14)
              || (*((unsigned char *)v18 + *(unsigned __int16 *)((char *)v18 - v19 + 14)) & 4) == 0)
            {
              goto LABEL_6;
            }
          }
          else
          {
            if (a4) {
              goto LABEL_6;
            }
            uint64_t v19 = *v18;
            uint64_t v20 = -v19;
            if (*(unsigned __int16 *)((char *)v18 - v19) < 0xFu || !*(_WORD *)((char *)v18 - v19 + 14)) {
              goto LABEL_18;
            }
            if ((*((unsigned char *)v18 + *(unsigned __int16 *)((char *)v18 - v19 + 14)) & 1) == 0) {
              goto LABEL_6;
            }
          }
          uint64_t v20 = -(uint64_t)(int)v19;
LABEL_18:
          int v21 = (unsigned __int16 *)((char *)v18 + v20);
          unint64_t v22 = (unsigned int *)((char *)v18 + *(unsigned __int16 *)((char *)v18 + v20 + 6));
          unint64_t v23 = (char *)v22 + *v22;
          uint64_t v24 = *(void *)(v23 + 4);
          if ((v24 & 0xFFFFFFFFFFFFLL) == (a2 & 0xFFFFFFFFFFFFLL)
            && ((a2 & 0x1000000000000) == 0) == ((v24 & 0xFF000000000000) != 0)
            && (*v21 < 9u || !v21[4]))
          {
            uint64_t v25 = v21[2];
            if (v25)
            {
              if (*((unsigned char *)v18 + v25)) {
                goto LABEL_29;
              }
            }
            if (*(_DWORD *)v23 == 2)
            {
              uint64_t v26 = *(void *)(v23 + 12);
              if ((v26 & 0xFFFFFFFFFFFFLL) == v17 && (HIWORD(a3) & 1) != ((v26 & 0xFF000000000000) != 0))
              {
                char v15 = 1;
                return v15 & 1;
              }
            }
            if (v25)
            {
LABEL_29:
              if (*((unsigned char *)v18 + v25) == 1 && *(_DWORD *)v23 >= 2u)
              {
                uint64_t v27 = *(void *)(v23 + 12);
                if ((v27 & 0xFFFFFFFFFFFFLL) == v17 && (HIWORD(a3) & 1) != ((v27 & 0xFF000000000000) != 0)) {
                  break;
                }
                char v15 = 1;
              }
            }
          }
LABEL_6:
          ++v14;
          v16 -= 8;
          if (!v16) {
            return v15 & 1;
          }
        }
      }
    }
  }
  char v15 = 0;
  return v15 & 1;
}

uint64_t sub_2E79EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = sub_2E68E8(a1, a2);
  unint64_t v6 = sub_2E68E8(a1, a3);
  unsigned int v7 = v6;
  unint64_t v8 = HIDWORD(v6);
  if (!v5)
  {
    BOOL v9 = 0;
    goto LABEL_8;
  }
  BOOL v9 = HIDWORD(v5) != -1;
  if (HIDWORD(v5) == -1 || !v6 || HIDWORD(v6) == -1)
  {
LABEL_8:
    if (v6) {
      BOOL v11 = HIDWORD(v6) == -1;
    }
    else {
      BOOL v11 = 1;
    }
    int v12 = !v11;
    return v12 ^ v9 ^ 1u;
  }
  if (v5 == v6) {
    return 1;
  }
  uint64_t v14 = a1 + 3896;
  char v15 = sub_2E6DE0(v14, v5, 0);
  uint64_t v16 = &v15[-*(int *)v15];
  if (*(unsigned __int16 *)v16 >= 5u && (uint64_t v17 = *((unsigned __int16 *)v16 + 2)) != 0)
  {
    unint64_t v18 = &v15[v17 + *(unsigned int *)&v15[v17]];
    uint64_t v19 = v18;
    if (v5 == v7) {
      goto LABEL_25;
    }
  }
  else
  {
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    if (v5 == v7) {
      goto LABEL_25;
    }
  }
  uint64_t v20 = sub_2E6DE0(v14, v7, 0);
  int v21 = &v20[-*(int *)v20];
  if (*(unsigned __int16 *)v21 < 5u)
  {
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = (char *)*((unsigned __int16 *)v21 + 2);
    if (v19) {
      uint64_t v19 = &v19[(void)v20 + *(unsigned int *)&v19[(void)v20]];
    }
  }
LABEL_25:
  unint64_t v22 = &v18[4 * HIDWORD(v5) + 4 + *(unsigned int *)&v18[4 * HIDWORD(v5) + 4]];
  unint64_t v23 = &v22[-*(int *)v22];
  if (*(unsigned __int16 *)v23 >= 5u && (uint64_t v24 = *((unsigned __int16 *)v23 + 2)) != 0) {
    uint64_t v25 = &v22[v24 + *(unsigned int *)&v22[v24]];
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v26 = &v19[4 * v8];
  uint64_t v27 = &v25[*((unsigned int *)v25 + 1) + 4];
  long long v28 = &v26[*((unsigned int *)v26 + 1) + 4];
  char v29 = &v28[-*(int *)v28];
  if (*(unsigned __int16 *)v29 < 5u || (uint64_t v30 = *((unsigned __int16 *)v29 + 2)) == 0)
  {
    uint64_t v32 = dword_4;
    uint64_t v33 = 16777228;
    uint64_t v35 = &v27[-*(int *)v27];
    unsigned int v36 = *(unsigned __int16 *)v35;
    if (v36 < 0xB) {
      goto LABEL_36;
    }
LABEL_34:
    if (*((_WORD *)v35 + 5) && v27[*((unsigned __int16 *)v35 + 5)]) {
      return 0;
    }
    goto LABEL_36;
  }
  uint64_t v31 = &v28[v30 + *(unsigned int *)&v28[v30]];
  unsigned int v34 = *((_DWORD *)v31 + 1);
  uint64_t v32 = (int *)(v31 + 4);
  uint64_t v33 = v34;
  uint64_t v35 = &v27[-*(int *)v27];
  unsigned int v36 = *(unsigned __int16 *)v35;
  if (v36 >= 0xB) {
    goto LABEL_34;
  }
LABEL_36:
  unsigned int v37 = (int *)((char *)v32 + v33);
  uint64_t v38 = (unsigned __int16 *)((char *)v32 + v33 - *(int *)((char *)v32 + v33));
  if (*v38 >= 0xBu)
  {
    uint64_t v39 = v38[5];
    if (v39)
    {
      if (*((unsigned char *)v37 + v39)) {
        return 0;
      }
    }
  }
  if (v36 >= 5 && (uint64_t v40 = *((unsigned __int16 *)v35 + 2)) != 0) {
    size_t v41 = (unsigned int *)&v27[v40 + *(unsigned int *)&v27[v40]];
  }
  else {
    size_t v41 = 0;
  }
  sub_2E7730(v41, v47);
  size_t v42 = (unsigned __int16 *)((char *)v37 - *v37);
  if (*v42 >= 5u && (uint64_t v43 = v42[2]) != 0) {
    uint64_t v44 = (unsigned int *)((char *)v37 + v43 + *(unsigned int *)((char *)v37 + v43));
  }
  else {
    uint64_t v44 = 0;
  }
  sub_2E7730(v44, __p);
  BOOL v10 = sub_A938C((unsigned __int8 *)v47, (unsigned __int8 *)__p);
  if (v46 < 0) {
    operator delete(__p[0]);
  }
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  return v10;
}

void sub_2E7CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_2E7CD8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (unsigned char *)(a1 + 7774);
  if (!*(unsigned char *)(a1 + 7774)) {
    return &def_332C + 1;
  }
  int v5 = sub_2AB7E4(*(void *)(a1 + 3880));
  double result = 0;
  if (v5)
  {
    unsigned int v7 = (int *)sub_2DBC9C(a1, a2);
    unint64_t v8 = (unsigned __int16 *)((char *)v7 - *v7);
    if (*v8 >= 7u && (uint64_t v9 = v8[3]) != 0)
    {
      uint64_t v10 = *(unsigned int *)((char *)v7 + v9);
      uint64_t v11 = *(unsigned int *)((char *)v7 + v9 + v10);
      if (v11 && *v2)
      {
        uint64_t v12 = 8 * v11;
        uint64_t v13 = (unsigned __int16 *)((char *)v7 + v10 + v9 + 8);
        while (1)
        {
          if (*v2)
          {
            uint64_t v14 = *v13;
            uint64_t v15 = *((unsigned int *)v13 - 1);
            double result = (int *)sub_290DEC(a1 + 3896, *((_DWORD *)v13 - 1), 1);
            if (!result) {
              return result;
            }
            uint64_t v16 = (unsigned __int16 *)((char *)result - *result);
            if (*v16 < 5u) {
              return 0;
            }
            uint64_t v17 = v16[2];
            if (!v17 || *(int *)((char *)result + v17 + *(unsigned int *)((char *)result + v17)) <= v14) {
              return 0;
            }
            double result = (int *)sub_295DB4(a1, v15 | (v14 << 32));
            if (!result) {
              return result;
            }
          }
          v13 += 4;
          double result = &def_332C + 1;
          v12 -= 8;
          if (!v12) {
            return result;
          }
        }
      }
      return &def_332C + 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

char **sub_2E7E4C(unint64_t *a1, unint64_t *a2, char **a3, __int8 *a4, uint64_t a5)
{
  if (a1 != a2)
  {
    unsigned int v7 = a1;
    do
    {
      unint64_t v11 = *v7;
      uint64_t v12 = *(void *)a5;
      uint64_t v13 = *(void *)a5 + 3896;
      unsigned int v14 = *v7;
      uint64_t v15 = sub_290DEC(v13, v14, 0);
      uint64_t v16 = &v15[-*(int *)v15];
      if (*(unsigned __int16 *)v16 < 5u)
      {
        uint64_t v17 = 0;
      }
      else
      {
        uint64_t v17 = *((unsigned __int16 *)v16 + 2);
        if (v17) {
          v17 += (uint64_t)&v15[*(unsigned int *)&v15[v17]];
        }
      }
      uint64_t v18 = (v11 >> 30) & 0x3FFFC;
      uint64_t v20 = (unsigned int *)(v17 + v18 + 4);
      uint64_t v19 = *v20;
      if (**(unsigned char **)(a5 + 8) && *(unsigned char *)(v12 + 7772))
      {
        int v21 = sub_2DB8E0(v13, v14, 0);
        unint64_t v22 = &v21[-*(int *)v21];
        if (*(unsigned __int16 *)v22 < 5u)
        {
          uint64_t v23 = 0;
        }
        else
        {
          uint64_t v23 = *((unsigned __int16 *)v22 + 2);
          if (v23) {
            v23 += (uint64_t)&v21[*(unsigned int *)&v21[v23]];
          }
        }
        uint64_t v8 = v23 + v18 + 4 + *(unsigned int *)(v23 + v18 + 4);
      }
      else
      {
        uint64_t v8 = 0;
      }
      uint64_t v9 = sub_2E5C38(v12, v11 & 0xFFFFFFFFFFFFLL, **(unsigned __int8 **)(a5 + 16));
      v27.n128_u64[0] = (unint64_t)v20 + v19;
      v27.n128_u64[1] = v8;
      uint64_t v28 = v9;
      uint64_t v29 = v10;
      unint64_t v30 = v11;
      a4 = &sub_2E7FC8(a3, (uint64_t)a4, &v27)[2].n128_i8[8];
      ++v7;
    }
    while (v7 != a2);
  }
  return a3;
}

__n128 *sub_2E7FC8(char **a1, uint64_t a2, __n128 *a3)
{
  unint64_t v6 = (__n128 *)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 40;
  uint64_t v8 = (__n128 *)&(*a1)[40 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (void)v6) >> 3) + 1;
    if (v17 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)v6) >> 3);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x333333333333333) {
      unint64_t v19 = 0x666666666666666;
    }
    else {
      unint64_t v19 = v17;
    }
    uint64_t v40 = a1 + 2;
    if (v19)
    {
      if (v19 > 0x666666666666666) {
        sub_188D718();
      }
      uint64_t v20 = (__n128 *)operator new(40 * v19);
    }
    else
    {
      uint64_t v20 = 0;
    }
    unsigned int v36 = v20;
    unsigned int v37 = (char *)v20 + 40 * v7;
    long long __dst = v37;
    uint64_t v39 = (char *)v20 + 40 * v19;
    sub_2E8294((uint64_t)&v36, a3);
    uint64_t v23 = v37;
    uint64_t v24 = (__n128 *)*a1;
    uint64_t v25 = v37;
    if (*a1 != (char *)v8)
    {
      uint64_t v26 = v8;
      __n128 v27 = v37;
      do
      {
        long long v28 = *(long long *)((char *)&v26[-3] + 8);
        long long v29 = *(long long *)((char *)&v26[-2] + 8);
        uint64_t v25 = v27 - 40;
        *((void *)v27 - 1) = v26[-1].n128_u64[1];
        *(_OWORD *)(v27 - 24) = v29;
        *(_OWORD *)(v27 - 40) = v28;
        uint64_t v26 = (__n128 *)((char *)v26 - 40);
        v27 -= 40;
      }
      while (v26 != v24);
    }
    unsigned int v37 = v25;
    unint64_t v30 = (__n128 *)a1[1];
    uint64_t v31 = (char *)__dst;
    int64_t v32 = (char *)v30 - (char *)v8;
    if (v30 != v8)
    {
      memmove(__dst, v8, (char *)v30 - (char *)v8);
      uint64_t v25 = v37;
      uint64_t v8 = (__n128 *)a1[1];
    }
    uint64_t v33 = (__n128 *)*a1;
    *a1 = v25;
    a1[1] = &v31[v32];
    unsigned int v34 = a1[2];
    a1[2] = v39;
    long long __dst = v8;
    uint64_t v39 = v34;
    unsigned int v36 = v33;
    unsigned int v37 = (char *)v33;
    if (v8 != v33) {
      long long __dst = (char *)v33 + ((char *)v8 - (char *)v33 - 40) % 0x28uLL;
    }
    if (v33) {
      operator delete(v33);
    }
    return (__n128 *)v23;
  }
  else if (v8 == (__n128 *)v5)
  {
    __n128 v21 = *a3;
    __n128 v22 = a3[1];
    v8[2].n128_u64[0] = a3[2].n128_u64[0];
    *uint64_t v8 = v21;
    v8[1] = v22;
    a1[1] = &v8[2].n128_i8[8];
  }
  else
  {
    uint64_t v10 = &v8[2].n128_i8[8];
    unint64_t v11 = v5 - 40;
    uint64_t v12 = a1[1];
    if (v5 >= 0x28)
    {
      do
      {
        long long v13 = *(_OWORD *)v11;
        long long v14 = *(_OWORD *)(v11 + 16);
        *((void *)v12 + 4) = *(void *)(v11 + 32);
        *(_OWORD *)uint64_t v12 = v13;
        *((_OWORD *)v12 + 1) = v14;
        v11 += 40;
        v12 += 40;
      }
      while (v11 < v5);
    }
    a1[1] = v12;
    if ((char *)v5 != v10) {
      memmove(&v8[2].n128_i8[8], v8, v5 - (void)v10);
    }
    __n128 v15 = *a3;
    __n128 v16 = a3[1];
    v8[2].n128_u64[0] = a3[2].n128_u64[0];
    *uint64_t v8 = v15;
    v8[1] = v16;
  }
  return v8;
}

void sub_2E8238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    long long v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_2E8294(uint64_t a1, __n128 *a2)
{
  int v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    unint64_t v6 = *(__n128 **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      unint64_t v15 = 0x999999999999999ALL * (((char *)v4 - (char *)v6) >> 3);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x666666666666667) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 40 * v15;
      unint64_t v18 = (char *)operator new(40 * v15);
      unint64_t v19 = (__n128 *)&v18[40 * v16];
      uint64_t v21 = (uint64_t)v4 - v5;
      BOOL v20 = v4 == (__n128 *)v5;
      int v4 = v19;
      if (!v20)
      {
        uint64_t v22 = v21 / 40;
        int v4 = (__n128 *)((char *)v19 + 40 * v22);
        uint64_t v23 = 40 * v22;
        uint64_t v24 = &v18[40 * v16];
        do
        {
          __n128 v25 = *(__n128 *)v5;
          long long v26 = *(_OWORD *)(v5 + 16);
          *((void *)v24 + 4) = *(void *)(v5 + 32);
          *(__n128 *)uint64_t v24 = v25;
          *((_OWORD *)v24 + 1) = v26;
          v24 += 40;
          v5 += 40;
          v23 -= 40;
        }
        while (v23);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        int v4 = *(__n128 **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -40 * v9;
      unint64_t v12 = v5 + v11;
      long long v13 = (char *)v4 - v5;
      if (v4 != (__n128 *)v5)
      {
        memmove((void *)(v5 + v11), *(const void **)(a1 + 8), (size_t)v4->n128_u64 - v5);
        int v4 = *(__n128 **)(a1 + 8);
      }
      long long v14 = (char *)v4 + 40 * v10;
      int v4 = (__n128 *)&v13[v12];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v13[v12];
    }
  }
  __n128 result = *a2;
  __n128 v28 = a2[1];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  *int v4 = result;
  v4[1] = v28;
  *(void *)(a1 + 16) += 40;
  return result;
}

void sub_2E841C()
{
  byte_25570AF = 1;
  word_2557098 = 65;
}

uint64_t sub_2E8438(uint64_t result, int *a2)
{
  *(void *)__n128 result = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(result + 8) = -1;
  *(_DWORD *)(result + 16) = 0x7FFFFFFF;
  *(void *)(result + 24) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(result + 32) = 0xFFFFFFFF00000000;
  *(_DWORD *)(result + 40) = 16842752;
  *(void *)(result + 48) = 0;
  *(unsigned char *)(result + 56) = 0;
  if (!a2) {
    return result;
  }
  uint64_t v2 = 0;
  *(void *)(result + 32) = *(void *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 4));
  uint64_t v3 = *a2;
  int v4 = (char *)a2 - v3;
  if (*(unsigned __int16 *)((char *)a2 - v3) >= 7u)
  {
    uint64_t v2 = *((unsigned __int16 *)v4 + 3);
    if (*((_WORD *)v4 + 3))
    {
      uint64_t v2 = *(unsigned int *)((char *)a2 + v2);
      if (v2 == -1)
      {
        uint64_t v5 = -v3;
        unint64_t v6 = (unsigned __int16 *)((char *)a2 - v3);
        if (*v6 >= 9u) {
          goto LABEL_6;
        }
LABEL_11:
        uint64_t v7 = 0;
        goto LABEL_12;
      }
    }
  }
  *(void *)__n128 result = v2;
  uint64_t v5 = -(uint64_t)*a2;
  unint64_t v6 = (unsigned __int16 *)((char *)a2 - *a2);
  if (*v6 < 9u) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v7 = v6[4];
  if (!v7 || (uint64_t v7 = *(unsigned int *)((char *)a2 + v7), v7 != -1))
  {
LABEL_12:
    *(void *)(result + 24) = v7;
    uint64_t v8 = (unsigned __int16 *)((char *)a2 - *a2);
    if (*v8 < 0xBu) {
      return result;
    }
    goto LABEL_13;
  }
  uint64_t v8 = (unsigned __int16 *)((char *)a2 + v5);
  if (*v8 < 0xBu) {
    return result;
  }
LABEL_13:
  uint64_t v9 = v8[5];
  if (v9)
  {
    int v10 = *((unsigned __int8 *)a2 + v9);
    switch(v10)
    {
      case 0:
        goto LABEL_17;
      case 3:
        *(unsigned char *)(result + 42) = 2;
        *(unsigned char *)(result + 43) = 1;
        return result;
      case 1:
LABEL_17:
        *(unsigned char *)(result + 42) = v10;
        *(unsigned char *)(result + 43) = 1;
        break;
    }
  }
  return result;
}

void sub_2E8578(void *a1@<X8>)
{
}

void sub_2E8584(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_2E8590()
{
  return 0;
}

uint64_t sub_2E8598()
{
  return 0;
}

uint64_t sub_2E85A0()
{
  return 0;
}

uint64_t sub_2E85A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 24);
  if (!v3) {
    sub_29F82C();
  }
  int v4 = *(uint64_t (**)(void))(*(void *)v3 + 48);

  return v4();
}

void sub_2E85F8()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v2 = (char *)operator new(0x30uLL);
  long long v3 = xmmword_20E1380;
  strcpy(v2, "Method is not supported by the storage class");
  int v1 = (void *)sub_2F404((uint64_t)exception, (long long *)&v2);
}

void sub_2E8678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2E86A8()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v2 = (char *)operator new(0x30uLL);
  long long v3 = xmmword_20E1380;
  strcpy(v2, "Method is not supported by the storage class");
  int v1 = (void *)sub_2F404((uint64_t)exception, (long long *)&v2);
}

void sub_2E8728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2E8758()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v2 = (char *)operator new(0x30uLL);
  long long v3 = xmmword_20E1380;
  strcpy(v2, "Method is not supported by the storage class");
  int v1 = (void *)sub_2F404((uint64_t)exception, (long long *)&v2);
}

void sub_2E87D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2E8808()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v2 = (char *)operator new(0x30uLL);
  long long v3 = xmmword_20E1380;
  strcpy(v2, "Method is not supported by the storage class");
  int v1 = (void *)sub_2F404((uint64_t)exception, (long long *)&v2);
}

void sub_2E8888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2E88B8()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v2 = (char *)operator new(0x30uLL);
  long long v3 = xmmword_20E1380;
  strcpy(v2, "Method is not supported by the storage class");
  int v1 = (void *)sub_2F404((uint64_t)exception, (long long *)&v2);
}

void sub_2E8938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2E8968()
{
  exception = __cxa_allocate_exception(0x40uLL);
  uint64_t v2 = (char *)operator new(0x30uLL);
  long long v3 = xmmword_20E1380;
  strcpy(v2, "Method is not supported by the storage class");
  int v1 = (void *)sub_2F404((uint64_t)exception, (long long *)&v2);
}

void sub_2E89E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2E8A18(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = &qword_24F6838;
    unint64_t v6 = &unk_24F6000;
    uint64_t v7 = &unk_24F6000;
    uint64_t v8 = &unk_24F6000;
    do
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)v5, memory_order_acquire) & 1) == 0)
      {
        unint64_t v33 = v4;
        uint64_t v35 = a1;
        unint64_t v18 = v5;
        uint64_t v31 = a2;
        unint64_t v19 = v6;
        int v20 = __cxa_guard_acquire(v5);
        uint64_t v8 = (void *)&unk_24F6000;
        uint64_t v7 = (void *)&unk_24F6000;
        unint64_t v6 = v19;
        a2 = v31;
        unint64_t v4 = v33;
        int v21 = v20;
        uint64_t v5 = v18;
        a1 = v35;
        if (v21)
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6848, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F6848))
          {
            v19[264] = sub_2E8DA0();
            __cxa_guard_release(&qword_24F6848);
          }
          qword_24F6830 = v19[264] >> 3;
          __cxa_guard_release(v18);
          uint64_t v7 = &unk_24F6000;
          unint64_t v6 = v19;
          uint64_t v5 = v18;
          a2 = v31;
          unint64_t v4 = v33;
          a1 = v35;
          uint64_t v8 = (void *)&unk_24F6000;
        }
      }
      uint64_t v9 = v7[262];
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6868, memory_order_acquire) & 1) == 0)
      {
        unint64_t v34 = v4;
        uint64_t v36 = a1;
        int64_t v32 = a2;
        uint64_t v22 = v7;
        int v23 = __cxa_guard_acquire(&qword_24F6868);
        uint64_t v8 = (void *)&unk_24F6000;
        uint64_t v7 = v22;
        unint64_t v6 = (void *)&unk_24F6000;
        a2 = v32;
        unint64_t v4 = v34;
        int v24 = v23;
        uint64_t v5 = &qword_24F6838;
        a1 = v36;
        if (v24)
        {
          uint64_t v30 = v9;
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6838, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F6838))
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6848, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F6848))
            {
              qword_24F6840 = sub_2E8DA0();
              __cxa_guard_release(&qword_24F6848);
            }
            v22[262] = (unint64_t)qword_24F6840 >> 3;
            __cxa_guard_release(&qword_24F6838);
          }
          uint64_t v25 = v22[262];
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6838, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F6838))
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6848, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F6848))
            {
              qword_24F6840 = sub_2E8DA0();
              __cxa_guard_release(&qword_24F6848);
            }
            v22[262] = (unint64_t)qword_24F6840 >> 3;
            __cxa_guard_release(&qword_24F6838);
          }
          qword_24F6860 = v25 + (v22[262] >> 1);
          __cxa_guard_release(&qword_24F6868);
          uint64_t v8 = &unk_24F6000;
          uint64_t v7 = v22;
          a2 = v32;
          unint64_t v4 = v34;
          a1 = v36;
          uint64_t v5 = &qword_24F6838;
          unint64_t v6 = (void *)&unk_24F6000;
          uint64_t v9 = v30;
        }
      }
      _X8 = v3 + 8 * (v8[268] + v9 * v4);
      __asm { PRFM            #0, [X8] }
      uint64_t v3 = *(void *)(a1 + 24);
      unint64_t v2 = *(void *)(a1 + 32);
      BOOL v16 = *a2 > *(void *)(v3 + 8 * v4);
      uint64_t v17 = (2 * v4) | 1;
      unint64_t v4 = 2 * v4 + 2;
      if (!v16) {
        unint64_t v4 = v17;
      }
    }
    while (v4 < v2);
    char v26 = __clz(__rbit64(-2 - v4));
    if (v4 == -2) {
      char v27 = 0;
    }
    else {
      char v27 = v26 + 1;
    }
    unint64_t v28 = (v4 + 1) >> v27;
  }
  else
  {
    unint64_t v28 = 0;
  }
  if (v28) {
    unint64_t v2 = v28 - 1;
  }
  return v3 + 8 * v2;
}

void sub_2E8D40(_Unwind_Exception *a1)
{
}

void sub_2E8D78(_Unwind_Exception *a1)
{
}

uint64_t sub_2E8DA0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6858, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_24F6858))
  {
    return qword_24F6850;
  }
  sub_5E5C(v4, "hw.cachelinesize");
  if (sub_2E8F04((uint64_t)v4))
  {
    sub_5E5C(__p, "hw.cachelinesize");
    uint64_t v1 = sub_2E8F04((uint64_t)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v1 = 64;
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  qword_24F6850 = v1;
  __cxa_guard_release(&qword_24F6858);
  return qword_24F6850;
}

void sub_2E8E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      __cxa_guard_abort(&qword_24F6858);
      _Unwind_Resume(a1);
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  __cxa_guard_abort(&qword_24F6858);
  _Unwind_Resume(a1);
}

void sub_2E8EEC(_Unwind_Exception *a1)
{
}

uint64_t sub_2E8F04(uint64_t a1)
{
  uint64_t v1 = a1;
  size_t v9 = 8;
  uint64_t v10 = 0;
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  if (!sysctlbyname((const char *)a1, &v10, &v9, 0, 0)) {
    return v10;
  }
  unint64_t v2 = sub_188FC78(&std::cout, (uint64_t)"WARN | Retrieving hardware information failed: ", 47);
  int v3 = *(char *)(v1 + 23);
  if (v3 >= 0) {
    uint64_t v4 = v1;
  }
  else {
    uint64_t v4 = *(void *)v1;
  }
  if (v3 >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(v1 + 23);
  }
  else {
    uint64_t v5 = *(void *)(v1 + 8);
  }
  unint64_t v6 = sub_188FC78(v2, v4, v5);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  uint64_t v7 = std::locale::use_facet(&v11, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v11);
  std::ostream::put();
  std::ostream::flush();
  return 0;
}

void sub_2E9024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
}

char *sub_2E9038(void **a1, unsigned char *a2, void *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 3;
  size_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)size_t v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    long long v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      unint64_t v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        unint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        unint64_t v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          long long v13 = (uint64_t *)((char *)v13 + v21);
          unint64_t v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          int v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)size_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    int64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    int64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 2;
    }
    if (v52 >> 61) {
      sub_188D718();
    }
    size_t v53 = (char *)operator new(8 * v52);
    uint64_t v31 = &v53[8 * (v52 >> 2)];
    int64_t v32 = &v53[8 * v52];
    if (v30)
    {
      unint64_t v54 = &v53[8 * v52];
      operator delete(v30);
      int64_t v32 = v54;
      unint64_t v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      uint64_t v35 = v31 + 8;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  unint64_t v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  uint64_t v35 = v31 + 8;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    unsigned int v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    uint64_t v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    uint64_t v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    size_t v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)size_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  int v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    int v49 = v9;
    size_t v50 = v47 - v9;
    BOOL v51 = v32;
    memmove(v35, v49, v50);
    int64_t v32 = v51;
    unint64_t v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_2E9390(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2E93A8(void *a1)
{
  *a1 = off_2438480;
  bzero(a1 + 1, 0x298uLL);
  return a1;
}

uint64_t sub_2E93F0(uint64_t a1)
{
  return nullsub_1(a1 + 648);
}

unint64_t sub_2E93F8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v3 = *(void **)(a1 + 8 * a2 + 328);
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v13 = a3;
  uint64_t v4 = (void *)sub_2E8A18((uint64_t)(v3 + 4), &v13);
  uint64_t v6 = v3[7];
  uint64_t v5 = v3[8];
  uint64_t v7 = (void *)(v6 + 8 * v5);
  if (v4 == v7 || *v4 != v13) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = v3[10];
  size_t v9 = (unsigned int *)((char *)v4 + v8 - v6);
  unint64_t v10 = (unsigned int *)(v8 + 8 * v5);
  BOOL v11 = v4 == v7 && v9 == v10;
  if (v11 || *v4 != v13) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v9[1] & 0xFFFFFFF | ((unint64_t)*v9 << 32);
  }
}

char *sub_2E94E4@<X0>(char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)&result[8 * a2 + 328];
  if (v4)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    unint64_t v5 = *(void *)(v4 + 64);
    if (v5)
    {
      if (v5 >> 61) {
        sub_2E00();
      }
      uint64_t v6 = 8 * v5;
      uint64_t v7 = operator new(8 * v5);
      *(void *)a3 = v7;
      *(void *)(a3 + 8) = v7;
      *(void *)(a3 + 16) = &v7[v6];
      uint64_t v8 = *(uint64_t **)(v4 + 56);
      uint64_t v9 = v6 - 8;
      do
      {
        uint64_t v10 = v9;
        uint64_t v11 = *v8;
        __n128 result = sub_2E9038((void **)a3, v7, &v11);
        uint64_t v7 = result + 8;
        ++v8;
        uint64_t v9 = v10 - 8;
      }
      while (v10);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_2E95AC(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2E95CC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v6 = a2;
  for (uint64_t i = 8; i != 328; i += 8)
  {
    __n128 result = *(uint64_t **)(a1 + i);
    if (result)
    {
      int v5 = sub_4F44((unsigned int *)result);
      __n128 result = sub_737BC((uint64_t *)&v6, &v5);
    }
  }
  return result;
}

void sub_2E9640(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_2E965C@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_2E966C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1)) {
    return sub_2D0B00(*(void **)(a1 + 8 * a2 + 8), a3);
  }
  else {
    return 0;
  }
}

uint64_t sub_2E96EC@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1);
  if (result)
  {
    uint64_t result = sub_50BE8(*(void *)(a1 + 8 * a2 + 8));
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    uint64_t v8 = *(const void **)result;
    uint64_t v7 = *(void *)(result + 8);
    int64_t v9 = v7 - *(void *)result;
    if (v7 != *(void *)result)
    {
      if (v9 < 0) {
        sub_2E00();
      }
      uint64_t v10 = (char *)operator new(v7 - *(void *)result);
      *a3 = v10;
      uint64_t v11 = &v10[4 * (v9 >> 2)];
      a3[2] = v11;
      uint64_t result = (uint64_t)memcpy(v10, v8, v9);
      a3[1] = v11;
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void sub_2E97B4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2E97D0(uint64_t a1, unsigned int a2)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 96))(a1)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8 * a2 + 8);

  return sub_2D0AF4(v4);
}

BOOL sub_2E9844(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 8 * a2 + 8) != 0;
}

BOOL sub_2E9858(uint64_t a1, uint64_t a2, unsigned int a3)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, a2, a3);
  return v3 != 0;
}

BOOL sub_2E989C(uint64_t a1)
{
  uint64_t v1 = (void *)nullsub_1(a1 + 648);
  return *v1 != v1[1];
}

void *sub_2E98C8(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8 * a2 + 8);
  if (!v4) {
    operator new();
  }

  return sub_2D0CB8(v4, a3, a4);
}

void sub_2E9958()
{
}

void *sub_2E997C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_2E99D4(a1, a2);
  int v7 = *(void *)a4 & 0xFFFFFFF | (*(unsigned __int8 *)(a4 + 8) << 28);
  LODWORD(v9) = HIDWORD(*(void *)a4);
  HIDWORD(v9) = v7;
  uint64_t v10 = a3;
  return sub_2EA258(v6 + 8, &v10, &v9);
}

uint64_t sub_2E99D4(uint64_t a1, unsigned int a2)
{
  uint64_t result = *(void *)(a1 + 328 + 8 * a2);
  if (!result) {
    operator new();
  }
  return result;
}

void *sub_2E9AD8(uint64_t a1, unsigned int a2)
{
  unint64_t v2 = *(void **)(a1 + 8 * a2 + 8);
  if (!v2) {
    operator new();
  }

  return sub_2D1064(v2);
}

void sub_2E9B70()
{
}

uint64_t sub_2E9B94(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *(void **)(a1 + 8 * a2 + 8);
  if (!v3) {
    operator new();
  }

  return sub_2D0BF0(v3, a3);
}

void sub_2E9C38()
{
}

uint64_t sub_2E9C5C(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = sub_2E99D4(a1, a2);

  return sub_2E9C84(v2);
}

uint64_t sub_2E9C84(uint64_t result)
{
  if (!*(unsigned char *)result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(uint64_t **)(result + 8);
    uint64_t v3 = *(char **)(v1 + 16);
    uint64_t v4 = (uint64_t **)(v1 + 8);
    unint64_t v5 = 126 - 2 * __clz((v3 - (char *)v2) >> 4);
    if (v3 == (char *)v2) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
    sub_2EA384(v2, v3, (uint64_t)v14, v6, 1);
    uint64_t v8 = *v4;
    int v7 = v4[1];
    if (*v4 != v7)
    {
      uint64_t v9 = v8 + 2;
      do
      {
        if (v9 == v7) {
          goto LABEL_17;
        }
        uint64_t v10 = *(v9 - 2);
        uint64_t v11 = *v9;
        v9 += 2;
      }
      while (v10 != v11);
      uint64_t v8 = v9 - 4;
    }
    if (v8 != v7 && sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v14);
      sub_188FC78(v14, (uint64_t)"Duplicate geoid found during finalize:", 38);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
LABEL_17:
    sub_2EB5AC((uint64_t)v14, v4);
  }
  return result;
}

void sub_2E9F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double sub_2E9FC4(void *a1, uint64_t a2)
{
  sub_2F22FC(&v5, a2);
  uint64_t v3 = (void *)a1[81];
  if (v3)
  {
    a1[82] = v3;
    operator delete(v3);
  }
  double result = *(double *)&v5;
  *(_OWORD *)(a1 + 81) = v5;
  a1[83] = v6;
  return result;
}

void sub_2EA01C(void *a1)
{
  sub_2EC954(a1);

  operator delete();
}

void *sub_2EA054(void *a1)
{
  return a1;
}

void *sub_2EA258(uint64_t a1, void *a2, void *a3)
{
  int v7 = *(void **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 < v6)
  {
    *int v7 = *a2;
    v7[1] = *a3;
    uint64_t v8 = v7 + 2;
    goto LABEL_13;
  }
  uint64_t v9 = *(void **)a1;
  uint64_t v10 = ((uint64_t)v7 - *(void *)a1) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
  if (!v13) {
    unint64_t v14 = v11;
  }
  if (v14 >> 60) {
    sub_188D718();
  }
  uint64_t v15 = 16 * v14;
  unint64_t v16 = (char *)operator new(16 * v14);
  uint64_t v17 = *a3;
  unint64_t v18 = &v16[16 * v10];
  unint64_t v19 = &v16[v15];
  *(void *)unint64_t v18 = *a2;
  *((void *)v18 + 1) = v17;
  uint64_t v8 = v18 + 16;
  if (v7 == v9)
  {
    *(void *)a1 = v18;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v19;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    uint64_t v20 = v18 - 16;
    *((_OWORD *)v18 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 2;
    v18 -= 16;
  }
  while (v7 != v9);
  *(void *)a1 = v20;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v19;
  if (v9) {
LABEL_12:
  }
    operator delete(v9);
LABEL_13:
  *(void *)(a1 + 8) = v8;
  return v8 - 2;
}

uint64_t *sub_2EA384(uint64_t *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v11 = (unint64_t *)result;
LABEL_2:
  uint64_t v12 = a2 - 8;
  BOOL v13 = v11;
  while (1)
  {
    unint64_t v11 = v13;
    uint64_t v14 = a2 - (char *)v13;
    unint64_t v15 = (a2 - (char *)v13) >> 4;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v106 = *((void *)a2 - 2);
          uint64_t v107 = *v13;
          if (v106 < *v13)
          {
            *BOOL v13 = v106;
            *((void *)a2 - 2) = v107;
            unint64_t v108 = v13[1];
            v13[1] = *((void *)a2 - 1);
            *((void *)a2 - 1) = v108;
          }
          return result;
        case 3uLL:
          unint64_t v109 = v13[2];
          unint64_t v110 = *v13;
          unint64_t v111 = *((void *)a2 - 2);
          if (v109 >= *v13)
          {
            if (v111 >= v109) {
              return result;
            }
            v13[2] = v111;
            *((void *)a2 - 2) = v109;
            uint64_t v12 = (char *)(v13 + 3);
            unint64_t v137 = v13[3];
            v13[3] = *((void *)a2 - 1);
            *((void *)a2 - 1) = v137;
            unint64_t v138 = v13[2];
            unint64_t v139 = *v13;
            if (v138 >= *v13) {
              return result;
            }
            *BOOL v13 = v138;
            v13[2] = v139;
            unint64_t v112 = (uint64_t *)(v13 + 1);
          }
          else
          {
            if (v111 >= v109)
            {
              unint64_t v112 = (uint64_t *)(v13 + 3);
              unint64_t v148 = v13[3];
              unint64_t v149 = v13[1];
              *BOOL v13 = v109;
              v13[1] = v148;
              v13[2] = v110;
              v13[3] = v149;
              unint64_t v150 = *((void *)a2 - 2);
              if (v150 >= v110) {
                return result;
              }
              v13[2] = v150;
            }
            else
            {
              unint64_t v112 = (uint64_t *)(v13 + 1);
              *BOOL v13 = v111;
            }
            *((void *)a2 - 2) = v110;
          }
          uint64_t v151 = *v112;
          *unint64_t v112 = *(void *)v12;
          *(void *)uint64_t v12 = v151;
          return result;
        case 4uLL:
          return sub_2EB09C((uint64_t *)v13, v13 + 2, v13 + 4, (unint64_t *)a2 - 2);
        case 5uLL:
          double result = sub_2EB09C((uint64_t *)v13, v13 + 2, v13 + 4, v13 + 6);
          unint64_t v113 = *((void *)a2 - 2);
          unint64_t v114 = v13[6];
          if (v113 < v114)
          {
            v13[6] = v113;
            *((void *)a2 - 2) = v114;
            unint64_t v115 = v13[7];
            v13[7] = *((void *)a2 - 1);
            *((void *)a2 - 1) = v115;
            unint64_t v116 = v13[6];
            unint64_t v117 = v13[4];
            if (v116 < v117)
            {
              unint64_t v118 = v13[5];
              unint64_t v119 = v13[7];
              v13[4] = v116;
              v13[5] = v119;
              v13[6] = v117;
              v13[7] = v118;
              unint64_t v120 = v13[2];
              if (v116 < v120)
              {
                unint64_t v121 = v13[3];
                v13[2] = v116;
                v13[3] = v119;
                v13[4] = v120;
                v13[5] = v121;
                uint64_t v122 = *v13;
                if (v116 < *v13)
                {
                  unint64_t v123 = v13[1];
                  *BOOL v13 = v116;
                  v13[1] = v119;
                  v13[2] = v122;
                  v13[3] = v123;
                }
              }
            }
          }
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    if (!a4)
    {
      if (v13 != (unint64_t *)a2)
      {
        return (uint64_t *)sub_2EB1CC((char *)v13, a2, a2);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v13[2 * (v15 >> 1)];
    unint64_t v18 = *((void *)a2 - 2);
    if ((unint64_t)v14 >= 0x801)
    {
      unint64_t v19 = *v17;
      unint64_t v20 = *v13;
      if (*v17 >= *v13)
      {
        if (v18 < v19)
        {
          unint64_t *v17 = v18;
          *((void *)a2 - 2) = v19;
          long long v25 = &v13[2 * v16];
          unint64_t v27 = v25[1];
          unint64_t v26 = (char *)(v25 + 1);
          *(void *)unint64_t v26 = *((void *)a2 - 1);
          *((void *)a2 - 1) = v27;
          uint64_t v28 = *v13;
          if (*v17 < *v13)
          {
            *BOOL v13 = *v17;
            uint64_t v21 = v13 + 1;
            unint64_t *v17 = v28;
            goto LABEL_23;
          }
        }
      }
      else
      {
        if (v18 < v19)
        {
          uint64_t v21 = v13 + 1;
          *BOOL v13 = v18;
          goto LABEL_22;
        }
        *BOOL v13 = v19;
        unint64_t *v17 = v20;
        unint64_t v32 = v13[1];
        uint64_t v21 = &v13[2 * v16 + 1];
        v13[1] = *v21;
        *uint64_t v21 = v32;
        unint64_t v33 = *((void *)a2 - 2);
        if (v33 < v20)
        {
          unint64_t *v17 = v33;
LABEL_22:
          *((void *)a2 - 2) = v20;
          unint64_t v26 = a2 - 8;
LABEL_23:
          unint64_t v34 = *v21;
          *uint64_t v21 = *(void *)v26;
          *(void *)unint64_t v26 = v34;
        }
      }
      unint64_t v35 = v16 - 1;
      uint64_t v36 = &v13[2 * v16 - 2];
      unint64_t v37 = *v36;
      unint64_t v38 = v13[2];
      unint64_t v39 = *((void *)a2 - 4);
      if (*v36 >= v38)
      {
        if (v39 < v37)
        {
          unint64_t *v36 = v39;
          *((void *)a2 - 4) = v37;
          uint64_t v41 = &v13[2 * v35];
          unint64_t v43 = v41[1];
          size_t v42 = (char *)(v41 + 1);
          *(void *)size_t v42 = *((void *)a2 - 3);
          *((void *)a2 - 3) = v43;
          unint64_t v44 = v13[2];
          if (*v36 < v44)
          {
            v13[2] = *v36;
            unint64_t *v36 = v44;
            uint64_t v40 = v13 + 3;
            goto LABEL_36;
          }
        }
      }
      else
      {
        if (v39 < v37)
        {
          uint64_t v40 = v13 + 3;
          v13[2] = v39;
          goto LABEL_35;
        }
        int64_t v48 = &v13[2 * v35];
        unint64_t v49 = v48[1];
        uint64_t v40 = v48 + 1;
        unint64_t v50 = v13[3];
        v13[2] = v37;
        v13[3] = v49;
        unint64_t *v36 = v38;
        *uint64_t v40 = v50;
        unint64_t v51 = *((void *)a2 - 4);
        if (v51 < v38)
        {
          unint64_t *v36 = v51;
LABEL_35:
          *((void *)a2 - 4) = v38;
          size_t v42 = a2 - 24;
LABEL_36:
          unint64_t v52 = *v40;
          *uint64_t v40 = *(void *)v42;
          *(void *)size_t v42 = v52;
        }
      }
      unint64_t v53 = v16 + 1;
      unint64_t v54 = &v13[2 * v16 + 2];
      unint64_t v55 = *v54;
      unint64_t v56 = v13[4];
      unint64_t v57 = *((void *)a2 - 6);
      if (*v54 >= v56)
      {
        if (v57 < v55)
        {
          *unint64_t v54 = v57;
          *((void *)a2 - 6) = v55;
          double v59 = &v13[2 * v53];
          unint64_t v61 = v59[1];
          double v60 = (char *)(v59 + 1);
          *(void *)double v60 = *((void *)a2 - 5);
          *((void *)a2 - 5) = v61;
          unint64_t v55 = *v54;
          unint64_t v62 = v13[4];
          if (*v54 < v62)
          {
            v13[4] = v55;
            *unint64_t v54 = v62;
            unint64_t v58 = (uint64_t *)(v13 + 5);
            goto LABEL_46;
          }
        }
LABEL_47:
        unint64_t v67 = *v17;
        unint64_t v68 = *v36;
        if (*v17 >= *v36) {
          goto LABEL_53;
        }
      }
      else
      {
        if (v57 < v55)
        {
          unint64_t v58 = (uint64_t *)(v13 + 5);
          v13[4] = v57;
          goto LABEL_45;
        }
        double v63 = &v13[2 * v53];
        unint64_t v64 = v63[1];
        unint64_t v58 = (uint64_t *)(v63 + 1);
        double result = (uint64_t *)v13[5];
        v13[4] = v55;
        v13[5] = v64;
        *unint64_t v54 = v56;
        *unint64_t v58 = (uint64_t)result;
        unint64_t v65 = *((void *)a2 - 6);
        if (v65 < v56)
        {
          *unint64_t v54 = v65;
LABEL_45:
          *((void *)a2 - 6) = v56;
          double v60 = a2 - 40;
LABEL_46:
          uint64_t v66 = *v58;
          *unint64_t v58 = *(void *)v60;
          *(void *)double v60 = v66;
          unint64_t v55 = *v54;
          goto LABEL_47;
        }
        unint64_t v55 = v56;
        unint64_t v67 = *v17;
        unint64_t v68 = *v36;
        if (*v17 >= *v36)
        {
LABEL_53:
          if (v55 < v67)
          {
            unint64_t *v17 = v55;
            double v75 = &v13[2 * v16];
            double v76 = (uint64_t *)v75[1];
            int v70 = v75 + 1;
            double result = v76;
            *unint64_t v54 = v67;
            unsigned int v77 = &v13[2 * v53];
            *int v70 = v77[1];
            v77[1] = (unint64_t)v76;
            if (v55 >= v68)
            {
              unint64_t v67 = v55;
            }
            else
            {
              unint64_t *v36 = v55;
              unint64_t *v17 = v68;
              unsigned int v69 = &v13[2 * v35 + 1];
LABEL_56:
              unint64_t v78 = *v69;
              *unsigned int v69 = *v70;
              *int v70 = v78;
              unint64_t v67 = *v17;
            }
          }
          goto LABEL_57;
        }
      }
      unsigned int v69 = &v13[2 * v35 + 1];
      if (v55 < v67)
      {
        unint64_t *v36 = v55;
        *unint64_t v54 = v68;
        int v70 = &v13[2 * v53 + 1];
        goto LABEL_56;
      }
      unint64_t *v36 = v67;
      unint64_t *v17 = v68;
      double v71 = &v13[2 * v16];
      unint64_t v73 = v71[1];
      double v72 = v71 + 1;
      unint64_t v74 = *v69;
      *unsigned int v69 = v73;
      *double v72 = v74;
      if (v55 < v68)
      {
        unint64_t *v17 = v55;
        *unint64_t v54 = v68;
        int v70 = &v13[2 * v53 + 1];
        unsigned int v69 = v72;
        goto LABEL_56;
      }
      unint64_t v67 = v68;
LABEL_57:
      uint64_t v79 = *v13;
      *BOOL v13 = v67;
      uint64_t v24 = v13 + 1;
      unint64_t *v17 = v79;
      unint64_t v29 = (char *)&v13[2 * v16 + 1];
      goto LABEL_58;
    }
    unint64_t v22 = *v13;
    unint64_t v23 = *v17;
    if (*v13 >= *v17)
    {
      if (v18 >= v22) {
        goto LABEL_59;
      }
      *BOOL v13 = v18;
      *((void *)a2 - 2) = v22;
      unint64_t v29 = (char *)(v13 + 1);
      unint64_t v30 = v13[1];
      v13[1] = *((void *)a2 - 1);
      *((void *)a2 - 1) = v30;
      unint64_t v31 = *v17;
      if (*v13 >= *v17) {
        goto LABEL_59;
      }
      unint64_t *v17 = *v13;
      *BOOL v13 = v31;
      uint64_t v24 = &v13[2 * v16 + 1];
    }
    else
    {
      uint64_t v24 = &v13[2 * v16 + 1];
      if (v18 >= v22)
      {
        unint64_t *v17 = v22;
        unint64_t v45 = v13[1];
        *BOOL v13 = v23;
        unint64_t v46 = *v24;
        *uint64_t v24 = v45;
        v13[1] = v46;
        unint64_t v47 = *((void *)a2 - 2);
        if (v47 >= v23) {
          goto LABEL_59;
        }
        *BOOL v13 = v47;
        *((void *)a2 - 2) = v23;
        uint64_t v24 = v13 + 1;
      }
      else
      {
        unint64_t *v17 = v18;
        *((void *)a2 - 2) = v23;
      }
      unint64_t v29 = a2 - 8;
    }
LABEL_58:
    unint64_t v80 = *v24;
    *uint64_t v24 = *(void *)v29;
    *(void *)unint64_t v29 = v80;
LABEL_59:
    --a4;
    unint64_t v81 = *v13;
    if ((a5 & 1) != 0 || *(v13 - 2) < v81)
    {
      uint64_t v82 = 0;
      unint64_t v83 = v13[1];
      do
      {
        unint64_t v84 = v13[v82 + 2];
        v82 += 2;
      }
      while (v84 < v81);
      int v85 = (char *)&v13[v82];
      unsigned int v86 = a2;
      if (v82 == 2)
      {
        unsigned int v86 = a2;
        do
        {
          if (v85 >= v86) {
            break;
          }
          unint64_t v88 = *((void *)v86 - 2);
          v86 -= 16;
        }
        while (v88 >= v81);
      }
      else
      {
        do
        {
          unint64_t v87 = *((void *)v86 - 2);
          v86 -= 16;
        }
        while (v87 >= v81);
      }
      if (v85 >= v86)
      {
        BOOL v13 = (unint64_t *)((char *)v13 + v82 * 8);
        unsigned int v94 = v85 - 16;
        if (v85 - 16 != (char *)v11) {
          goto LABEL_76;
        }
      }
      else
      {
        unint64_t v89 = *(void *)v86;
        BOOL v13 = (unint64_t *)((char *)v13 + v82 * 8);
        uint64_t v90 = (unint64_t *)v86;
        do
        {
          *BOOL v13 = v89;
          *uint64_t v90 = v84;
          unint64_t v91 = v13[1];
          v13[1] = v90[1];
          v90[1] = v91;
          do
          {
            unint64_t v92 = v13[2];
            v13 += 2;
            unint64_t v84 = v92;
          }
          while (v92 < v81);
          do
          {
            unint64_t v93 = *(v90 - 2);
            v90 -= 2;
            unint64_t v89 = v93;
          }
          while (v93 >= v81);
        }
        while (v13 < v90);
        unsigned int v94 = (char *)(v13 - 2);
        if (v13 - 2 != v11)
        {
LABEL_76:
          unint64_t *v11 = *(v13 - 2);
          v11[1] = *(v13 - 1);
        }
      }
      *(v13 - 2) = v81;
      *(v13 - 1) = v83;
      if (v85 < v86) {
        goto LABEL_80;
      }
      BOOL v95 = sub_2EAD2C(v11, v94);
      double result = (uint64_t *)sub_2EAD2C(v13, a2);
      if (result)
      {
        a2 = v94;
        if (v95) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v95)
      {
LABEL_80:
        double result = (uint64_t *)sub_2EA384(v11, v94, a3, a4, a5 & 1);
        a5 = 0;
      }
    }
    else
    {
      if (v81 < *((void *)a2 - 2))
      {
        do
        {
          unint64_t v96 = v13[2];
          v13 += 2;
        }
        while (v81 >= v96);
      }
      else
      {
        unint64_t v97 = v13 + 2;
        do
        {
          BOOL v13 = v97;
          if (v97 >= (unint64_t *)a2) {
            break;
          }
          v97 += 2;
        }
        while (v81 >= *v13);
      }
      uint64_t v98 = (unint64_t *)a2;
      if (v13 < (unint64_t *)a2)
      {
        uint64_t v98 = (unint64_t *)a2;
        do
        {
          unint64_t v99 = *(v98 - 2);
          v98 -= 2;
        }
        while (v81 < v99);
      }
      unint64_t v100 = v11[1];
      if (v13 < v98)
      {
        uint64_t v101 = *v13;
        unint64_t v102 = *v98;
        do
        {
          *BOOL v13 = v102;
          *uint64_t v98 = v101;
          unint64_t v103 = v13[1];
          v13[1] = v98[1];
          v98[1] = v103;
          do
          {
            unint64_t v104 = v13[2];
            v13 += 2;
            uint64_t v101 = v104;
          }
          while (v81 >= v104);
          do
          {
            unint64_t v105 = *(v98 - 2);
            v98 -= 2;
            unint64_t v102 = v105;
          }
          while (v81 < v105);
        }
        while (v13 < v98);
      }
      BOOL v5 = v13 - 2 >= v11;
      BOOL v6 = v13 - 2 == v11;
      if (v13 - 2 != v11)
      {
        unint64_t *v11 = *(v13 - 2);
        v11[1] = *(v13 - 1);
      }
      a5 = 0;
      *(v13 - 2) = v81;
      *(v13 - 1) = v100;
    }
  }
  int v124 = (char *)(v13 + 2);
  BOOL v126 = v13 == (unint64_t *)a2 || v124 == a2;
  if (a5)
  {
    if (!v126)
    {
      uint64_t v127 = 0;
      v128 = v13;
      do
      {
        unint64_t v130 = v124;
        unint64_t v131 = v128[2];
        unint64_t v132 = *v128;
        if (v131 < *v128)
        {
          unint64_t v133 = v128[3];
          uint64_t v134 = v127;
          do
          {
            unint64_t v135 = (char *)v13 + v134;
            uint64_t v136 = *(unint64_t *)((char *)v13 + v134 + 8);
            *((void *)v135 + 2) = v132;
            *((void *)v135 + 3) = v136;
            if (!v134)
            {
              uint64_t v129 = v13;
              goto LABEL_129;
            }
            unint64_t v132 = *((void *)v135 - 2);
            v134 -= 16;
          }
          while (v131 < v132);
          uint64_t v129 = (unint64_t *)((char *)v13 + v134 + 16);
LABEL_129:
          *uint64_t v129 = v131;
          v129[1] = v133;
        }
        int v124 = v130 + 16;
        v127 += 16;
        v128 = (unint64_t *)v130;
      }
      while (v130 + 16 != a2);
    }
  }
  else if (!v126)
  {
    int v140 = v13 + 3;
    do
    {
      uint64_t v141 = v124;
      unint64_t v142 = v11[2];
      unint64_t v143 = *v11;
      if (v142 < *v11)
      {
        unint64_t v144 = v11[3];
        unint64_t v145 = v140;
        do
        {
          v146 = v145;
          *(v145 - 1) = v143;
          unint64_t v147 = *(v145 - 2);
          v145 -= 2;
          unint64_t *v146 = v147;
          unint64_t v143 = *(v146 - 5);
        }
        while (v142 < v143);
        *(v145 - 1) = v142;
        *unint64_t v145 = v144;
      }
      int v124 = v141 + 16;
      v140 += 2;
      unint64_t v11 = (unint64_t *)v141;
    }
    while (v141 + 16 != a2);
  }
  return result;
}

BOOL sub_2EAD2C(unint64_t *a1, char *a2)
{
  uint64_t v4 = (a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *((void *)a2 - 2);
      uint64_t v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *((void *)a2 - 2) = v7;
        unint64_t v8 = a1[1];
        a1[1] = *((void *)a2 - 1);
        *((void *)a2 - 1) = v8;
      }
      return result;
    case 3:
      unint64_t v9 = a1[2];
      unint64_t v10 = *a1;
      unint64_t v11 = *((void *)a2 - 2);
      if (v9 < *a1)
      {
        if (v11 >= v9)
        {
          uint64_t v12 = (uint64_t *)(a1 + 3);
          unint64_t v36 = a1[3];
          unint64_t v37 = a1[1];
          *a1 = v9;
          a1[1] = v36;
          a1[2] = v10;
          a1[3] = v37;
          unint64_t v38 = *((void *)a2 - 2);
          if (v38 >= v10) {
            return result;
          }
          a1[2] = v38;
        }
        else
        {
          uint64_t v12 = (uint64_t *)(a1 + 1);
          *a1 = v11;
        }
        *((void *)a2 - 2) = v10;
        unint64_t v30 = a2 - 8;
        goto LABEL_27;
      }
      if (v11 < v9)
      {
        a1[2] = v11;
        *((void *)a2 - 2) = v9;
        unint64_t v30 = (char *)(a1 + 3);
        unint64_t v29 = a1[3];
        a1[3] = *((void *)a2 - 1);
        *((void *)a2 - 1) = v29;
        unint64_t v31 = a1[2];
        uint64_t v32 = *a1;
        if (v31 < *a1)
        {
          *a1 = v31;
          a1[2] = v32;
          uint64_t v12 = (uint64_t *)(a1 + 1);
LABEL_27:
          uint64_t v39 = *v12;
          uint64_t *v12 = *(void *)v30;
          *(void *)unint64_t v30 = v39;
          return result;
        }
      }
      return result;
    case 4:
      sub_2EB09C((uint64_t *)a1, a1 + 2, a1 + 4, (unint64_t *)a2 - 2);
      return 1;
    case 5:
      sub_2EB09C((uint64_t *)a1, a1 + 2, a1 + 4, a1 + 6);
      unint64_t v18 = *((void *)a2 - 2);
      unint64_t v19 = a1[6];
      if (v18 >= v19) {
        return 1;
      }
      a1[6] = v18;
      *((void *)a2 - 2) = v19;
      unint64_t v20 = a1[7];
      a1[7] = *((void *)a2 - 1);
      *((void *)a2 - 1) = v20;
      unint64_t v21 = a1[6];
      unint64_t v22 = a1[4];
      if (v21 >= v22) {
        return 1;
      }
      unint64_t v23 = a1[5];
      unint64_t v24 = a1[7];
      a1[4] = v21;
      a1[5] = v24;
      a1[6] = v22;
      a1[7] = v23;
      unint64_t v25 = a1[2];
      if (v21 >= v25) {
        return 1;
      }
      unint64_t v26 = a1[3];
      a1[2] = v21;
      a1[3] = v24;
      a1[4] = v25;
      a1[5] = v26;
      uint64_t v27 = *a1;
      if (v21 >= *a1) {
        return 1;
      }
      unint64_t v28 = a1[1];
      *a1 = v21;
      a1[1] = v24;
      a1[2] = v27;
      a1[3] = v28;
      return 1;
    default:
      BOOL v13 = (char *)(a1 + 4);
      unint64_t v14 = a1[4];
      unint64_t v15 = a1[2];
      unint64_t v16 = *a1;
      if (v15 < *a1)
      {
        if (v14 >= v15)
        {
          uint64_t v17 = (uint64_t *)(a1 + 3);
          unint64_t v40 = a1[3];
          unint64_t v41 = a1[1];
          *a1 = v15;
          a1[1] = v40;
          a1[2] = v16;
          a1[3] = v41;
          if (v14 >= v16) {
            goto LABEL_32;
          }
          a1[2] = v14;
        }
        else
        {
          uint64_t v17 = (uint64_t *)(a1 + 1);
          *a1 = v14;
        }
        a1[4] = v16;
        unint64_t v34 = (uint64_t *)(a1 + 5);
        goto LABEL_31;
      }
      if (v14 < v15)
      {
        unint64_t v34 = (uint64_t *)(a1 + 3);
        unint64_t v33 = a1[3];
        unint64_t v35 = a1[5];
        a1[4] = v15;
        a1[5] = v33;
        a1[2] = v14;
        a1[3] = v35;
        if (v14 < v16)
        {
          *a1 = v14;
          a1[2] = v16;
          uint64_t v17 = (uint64_t *)(a1 + 1);
LABEL_31:
          uint64_t v42 = *v17;
          uint64_t *v17 = *v34;
          *unint64_t v34 = v42;
        }
      }
LABEL_32:
      unint64_t v43 = (char *)(a1 + 6);
      if (a1 + 6 == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v44 = 0;
      int v45 = 0;
      while (1)
      {
        unint64_t v46 = *(void *)v43;
        unint64_t v47 = *(void *)v13;
        if (*(void *)v43 < *(void *)v13) {
          break;
        }
LABEL_41:
        BOOL v13 = v43;
        v44 += 16;
        v43 += 16;
        if (v43 == a2) {
          return 1;
        }
      }
      unint64_t v48 = *((void *)v43 + 1);
      uint64_t v49 = v44;
      do
      {
        unint64_t v50 = (unint64_t *)((char *)a1 + v49);
        uint64_t v51 = *(unint64_t *)((char *)a1 + v49 + 40);
        v50[6] = v47;
        v50[7] = v51;
        if (v49 == -32)
        {
          *a1 = v46;
          a1[1] = v48;
          if (++v45 != 8) {
            goto LABEL_41;
          }
          return v43 + 16 == a2;
        }
        unint64_t v47 = v50[2];
        v49 -= 16;
      }
      while (v46 < v47);
      unint64_t v52 = (char *)a1 + v49;
      *((void *)v52 + 6) = v46;
      *((void *)v52 + 7) = v48;
      if (++v45 != 8) {
        goto LABEL_41;
      }
      return v43 + 16 == a2;
  }
}

uint64_t *sub_2EB09C(uint64_t *result, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v4 = *a2;
  unint64_t v5 = *result;
  unint64_t v6 = *a3;
  if (*a2 >= *result)
  {
    if (v6 < v4)
    {
      *a2 = v6;
      *a3 = v4;
      unint64_t v9 = (uint64_t *)(a2 + 1);
      unint64_t v8 = a2[1];
      a2[1] = a3[1];
      a3[1] = v8;
      unint64_t v10 = *result;
      if (*a2 < *result)
      {
        *BOOL result = *a2;
        uint64_t v7 = result + 1;
        *a2 = v10;
LABEL_10:
        uint64_t v12 = *v7;
        *uint64_t v7 = *v9;
        *unint64_t v9 = v12;
      }
    }
  }
  else
  {
    if (v6 < v4)
    {
      uint64_t v7 = result + 1;
      *BOOL result = v6;
LABEL_9:
      *a3 = v5;
      unint64_t v9 = (uint64_t *)(a3 + 1);
      goto LABEL_10;
    }
    *BOOL result = v4;
    *a2 = v5;
    uint64_t v7 = (uint64_t *)(a2 + 1);
    uint64_t v11 = result[1];
    result[1] = a2[1];
    a2[1] = v11;
    unint64_t v5 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      goto LABEL_9;
    }
  }
  unint64_t v13 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v13;
    unint64_t v14 = a3[1];
    a3[1] = a4[1];
    a4[1] = v14;
    unint64_t v15 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v15;
      unint64_t v16 = a2[1];
      a2[1] = a3[1];
      a3[1] = v16;
      unint64_t v17 = *result;
      if (*a2 < *result)
      {
        *BOOL result = *a2;
        *a2 = v17;
        uint64_t v18 = result[1];
        result[1] = a2[1];
        a2[1] = v18;
      }
    }
  }
  return result;
}

char *sub_2EB1CC(char *a1, char *a2, char *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a2 - a1;
  uint64_t v4 = (a2 - a1) >> 4;
  if (a2 - a1 >= 17 && (unint64_t)v3 >= 0x20)
  {
    int64_t v41 = (unint64_t)(v4 - 2) >> 1;
    int64_t v42 = v41;
    do
    {
      if (v41 >= v42)
      {
        uint64_t v43 = (2 * v42) | 1;
        uint64_t v44 = &a1[16 * v43];
        if (2 * v42 + 2 >= v4)
        {
          unint64_t v45 = *(void *)v44;
          unint64_t v47 = &a1[16 * v42];
          unint64_t v48 = *(void *)v47;
          if (*(void *)v44 >= *(void *)v47) {
            goto LABEL_72;
          }
        }
        else
        {
          unint64_t v45 = *((void *)v44 + 2);
          BOOL v46 = *(void *)v44 >= v45;
          if (*(void *)v44 > v45) {
            unint64_t v45 = *(void *)v44;
          }
          if (!v46)
          {
            v44 += 16;
            uint64_t v43 = 2 * v42 + 2;
          }
          unint64_t v47 = &a1[16 * v42];
          unint64_t v48 = *(void *)v47;
          if (v45 >= *(void *)v47)
          {
LABEL_72:
            uint64_t v49 = *((void *)v47 + 1);
            while (1)
            {
              uint64_t v51 = v47;
              unint64_t v47 = v44;
              void *v51 = v45;
              v51[1] = *((void *)v44 + 1);
              if (v41 < v43) {
                break;
              }
              uint64_t v52 = (2 * v43) | 1;
              uint64_t v44 = &a1[16 * v52];
              uint64_t v43 = 2 * v43 + 2;
              if (v43 < v4)
              {
                unint64_t v45 = *(void *)v44;
                unint64_t v50 = *((void *)v44 + 2);
                if (*(void *)v44 <= v50) {
                  unint64_t v45 = *((void *)v44 + 2);
                }
                if (*(void *)v44 >= v50) {
                  uint64_t v43 = v52;
                }
                else {
                  v44 += 16;
                }
                if (v45 < v48) {
                  break;
                }
              }
              else
              {
                unint64_t v45 = *(void *)v44;
                uint64_t v43 = v52;
                if (*(void *)v44 < v48) {
                  break;
                }
              }
            }
            *(void *)unint64_t v47 = v48;
            *((void *)v47 + 1) = v49;
          }
        }
      }
      BOOL v23 = v42-- <= 0;
    }
    while (!v23);
  }
  unint64_t v5 = a2;
  if (a2 != a3)
  {
    if (v3 < 32)
    {
      unint64_t v6 = a2;
      do
      {
        uint64_t v7 = *(void *)v6;
        if (*(void *)v6 < *(void *)a1)
        {
          *(void *)unint64_t v6 = *(void *)a1;
          *(void *)a1 = v7;
          uint64_t v8 = *((void *)v6 + 1);
          *((void *)v6 + 1) = *((void *)a1 + 1);
          *((void *)a1 + 1) = v8;
        }
        v6 += 16;
      }
      while (v6 != a3);
LABEL_37:
      unint64_t v5 = a3;
      goto LABEL_38;
    }
    unint64_t v9 = (unint64_t *)(a1 + 32);
    unint64_t v10 = a2;
    while (1)
    {
      uint64_t v11 = *(void *)v10;
      if (*(void *)v10 < *(void *)a1)
      {
        *(void *)unint64_t v10 = *(void *)a1;
        *(void *)a1 = v11;
        uint64_t v12 = *((void *)v10 + 1);
        *((void *)v10 + 1) = *((void *)a1 + 1);
        *((void *)a1 + 1) = v12;
        unint64_t v13 = *((void *)a1 + 2);
        if (v3 == 32)
        {
          unint64_t v14 = a1 + 16;
          uint64_t v15 = 1;
          unint64_t v16 = *(void *)a1;
          if (v13 >= *(void *)a1) {
            goto LABEL_26;
          }
        }
        else
        {
          BOOL v17 = v13 >= *v9;
          if (v13 <= *v9) {
            unint64_t v13 = *v9;
          }
          if (v17) {
            unint64_t v14 = a1 + 16;
          }
          else {
            unint64_t v14 = a1 + 32;
          }
          if (v17) {
            uint64_t v15 = 1;
          }
          else {
            uint64_t v15 = 2;
          }
          unint64_t v16 = *(void *)a1;
          if (v13 >= *(void *)a1)
          {
LABEL_26:
            uint64_t v18 = a1;
            while (1)
            {
              unint64_t v20 = v18;
              uint64_t v18 = v14;
              *unint64_t v20 = v13;
              v20[1] = *((void *)v14 + 1);
              if ((uint64_t)((unint64_t)(v4 - 2) >> 1) < v15) {
                break;
              }
              uint64_t v21 = (2 * v15) | 1;
              unint64_t v14 = &a1[16 * v21];
              uint64_t v15 = 2 * v15 + 2;
              if (v15 < v4)
              {
                unint64_t v13 = *(void *)v14;
                unint64_t v19 = *((void *)v14 + 2);
                if (*(void *)v14 <= v19) {
                  unint64_t v13 = *((void *)v14 + 2);
                }
                if (*(void *)v14 >= v19) {
                  uint64_t v15 = v21;
                }
                else {
                  v14 += 16;
                }
                if (v13 < v16) {
                  break;
                }
              }
              else
              {
                unint64_t v13 = *(void *)v14;
                uint64_t v15 = v21;
                if (*(void *)v14 < v16) {
                  break;
                }
              }
            }
            *(void *)uint64_t v18 = v16;
            *((void *)v18 + 1) = v12;
          }
        }
      }
      v10 += 16;
      if (v10 == a3) {
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (v3 >= 17)
  {
    uint64_t v22 = (unint64_t)v3 >> 4;
    do
    {
      uint64_t v24 = 0;
      unint64_t v25 = *(void *)a1;
      uint64_t v26 = *((void *)a1 + 1);
      int64_t v27 = (unint64_t)(v22 - 2) >> 1;
      unint64_t v28 = a1;
      do
      {
        while (1)
        {
          unint64_t v31 = &v28[16 * v24 + 16];
          uint64_t v32 = (2 * v24) | 1;
          uint64_t v24 = 2 * v24 + 2;
          if (v24 < v22) {
            break;
          }
          uint64_t v24 = v32;
          *(void *)unint64_t v28 = *(void *)v31;
          *((void *)v28 + 1) = *((void *)v31 + 1);
          unint64_t v28 = v31;
          if (v32 > v27) {
            goto LABEL_51;
          }
        }
        uint64_t v29 = *(void *)v31;
        unint64_t v30 = *((void *)v31 + 2);
        if (*(void *)v31 <= v30) {
          uint64_t v29 = *((void *)v31 + 2);
        }
        if (*(void *)v31 >= v30) {
          uint64_t v24 = v32;
        }
        else {
          v31 += 16;
        }
        *(void *)unint64_t v28 = v29;
        *((void *)v28 + 1) = *((void *)v31 + 1);
        unint64_t v28 = v31;
      }
      while (v24 <= v27);
LABEL_51:
      if (v31 == a2 - 16)
      {
        *(void *)unint64_t v31 = v25;
        *((void *)v31 + 1) = v26;
      }
      else
      {
        *(void *)unint64_t v31 = *((void *)a2 - 2);
        *((void *)v31 + 1) = *((void *)a2 - 1);
        *((void *)a2 - 2) = v25;
        *((void *)a2 - 1) = v26;
        uint64_t v33 = v31 - a1 + 16;
        if (v33 >= 17)
        {
          unint64_t v34 = (((unint64_t)v33 >> 4) - 2) >> 1;
          unint64_t v35 = &a1[16 * v34];
          uint64_t v36 = *(void *)v35;
          unint64_t v37 = *(void *)v31;
          if (*(void *)v35 < *(void *)v31)
          {
            uint64_t v38 = *((void *)v31 + 1);
            do
            {
              uint64_t v39 = v31;
              unint64_t v31 = v35;
              *(void *)uint64_t v39 = v36;
              *((void *)v39 + 1) = *((void *)v35 + 1);
              if (!v34) {
                break;
              }
              unint64_t v34 = (v34 - 1) >> 1;
              unint64_t v35 = &a1[16 * v34];
              uint64_t v36 = *(void *)v35;
            }
            while (*(void *)v35 < v37);
            *(void *)unint64_t v31 = v37;
            *((void *)v31 + 1) = v38;
          }
        }
      }
      a2 -= 16;
      BOOL v23 = v22-- <= 2;
    }
    while (!v23);
  }
  return v5;
}

void sub_2EB5AC(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1] - *a2;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = (v2 >> 4) + 1;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v2 >> 4;
  *(void *)(a1 + 40) = 1;
  operator new[]();
}

void sub_2EB6B4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 48);
  *(void *)(v1 + 48) = 0;
  if (v3 && !*(unsigned char *)(v1 + 56)) {
    operator delete[]();
  }
  uint64_t v4 = *(void **)v1;
  *(void *)uint64_t v1 = 0;
  if (v4)
  {
    if (!*(unsigned char *)(v1 + 16)) {
      free(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2EB708(void *a1, char **a2, char **a3, int a4)
{
  unint64_t v4 = a1[4];
  if (v4)
  {
    for (unint64_t i = a1[5]; i <= v4; i *= 2)
      ;
    a1[5] = i - 1;
    sub_2EB878((uint64_t)a1);
    if (a4)
    {
      uint64_t v20 = 0;
      sub_2EB9C4(a1, (void **)a2);
    }
    else
    {
      unint64_t v10 = *a2;
      uint64_t v11 = *a3;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v20 = 0;
      size_t v12 = v11 - v10;
      if (v11 == v10)
      {
        unint64_t v16 = 0;
        unint64_t v14 = 0;
      }
      else
      {
        if ((v12 & 0x8000000000000000) != 0) {
          sub_2E00();
        }
        unint64_t v13 = (uint64_t *)operator new(v12);
        unint64_t v14 = v13;
        uint64_t v15 = 0;
        do
        {
          *(_OWORD *)&v13[v15] = *(_OWORD *)&v10[v15 * 8];
          v15 += 2;
        }
        while (&v10[v15 * 8] != v11);
        unint64_t v16 = (char *)&v13[v15];
      }
      unint64_t v17 = 126 - 2 * __clz((v16 - (char *)v14) >> 4);
      if (v16 == (char *)v14) {
        uint64_t v18 = 0;
      }
      else {
        uint64_t v18 = v17;
      }
      sub_2EBC3C(v14, v16, (uint64_t)&v19, v18, 1);
      unint64_t v19 = v14;
      sub_2EB9C4(a1, &v19);
      if (v14) {
        operator delete(v14);
      }
    }
  }
}

void sub_2EB848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_2EB878(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6848, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F6848))
  {
    qword_24F6840 = sub_2E8DA0();
    __cxa_guard_release(&qword_24F6848);
  }
  if (malloc_type_posix_memalign((void **)(a1 + 24), qword_24F6840, 8 * *(void *)(a1 + 32) + 8, 0xA4BFA541uLL))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v6, "Memory allocation failed.");
    unint64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  uint64_t v2 = *(void **)(a1 + 24);
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = v2;
  if (v3 && !*(unsigned char *)(a1 + 16))
  {
    free(v3);
    uint64_t v2 = *(void **)a1;
  }
  *uint64_t v2 = 0;
  *(void *)(a1 + 24) = v2 + 1;
}

void sub_2EB97C(_Unwind_Exception *a1)
{
}

void sub_2EB994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2EB9B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2EB9C4(void *a1, void **a2)
{
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  LODWORD(v8) = 0;
  sub_2EBAD4((uint64_t)&v9, (int *)&v8);
  unint64_t v8 = 0;
  unint64_t v4 = *a2;
  while (v9 != v10)
  {
    unint64_t v8 = (2 * v8) | 1;
    if (v8 >= a1[4])
    {
      uint64_t v5 = *((void *)v10 - 1);
      v10 -= 8;
      uint64_t v6 = a1[3];
      uint64_t v7 = 8 * v5;
      *(void *)(v6 + v7) = 0;
      *(void *)(v6 + v7) = *v4;
      *(void *)(a1[6] + v7) = v4[1];
      v4 += 2;
      unint64_t v8 = 2 * v5 + 2;
      if (v8 >= a1[4]) {
        continue;
      }
    }
    sub_A4710((uint64_t)&v9, &v8);
  }
  if (v9)
  {
    unint64_t v10 = v9;
    operator delete(v9);
  }
}

void sub_2EBAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2EBAD4(uint64_t a1, int *a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      sub_2E00();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_188D718();
      }
      unint64_t v14 = operator new(8 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    *uint64_t v15 = *a2;
    uint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v18];
      uint64_t v15 = (void *)((char *)v15 - v18);
      unint64_t v19 = &v14[8 * v10 - 16];
      uint64_t v20 = v5 - 16;
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        _OWORD *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--uint64_t v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[8 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)uint64_t v5 = *a2;
    uint64_t v7 = v5 + 8;
  }
  *(void *)(a1 + 8) = v7;
  return v7 - 1;
}

uint64_t *sub_2EBC3C(uint64_t *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v11 = (unint64_t *)result;
LABEL_2:
  uint64_t v12 = a2 - 8;
  unint64_t v13 = v11;
  while (1)
  {
    unint64_t v11 = v13;
    uint64_t v14 = a2 - (char *)v13;
    unint64_t v15 = (a2 - (char *)v13) >> 4;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v106 = *((void *)a2 - 2);
          uint64_t v107 = *v13;
          if (v106 < *v13)
          {
            *unint64_t v13 = v106;
            *((void *)a2 - 2) = v107;
            unint64_t v108 = v13[1];
            v13[1] = *((void *)a2 - 1);
            *((void *)a2 - 1) = v108;
          }
          return result;
        case 3uLL:
          unint64_t v109 = v13[2];
          unint64_t v110 = *v13;
          unint64_t v111 = *((void *)a2 - 2);
          if (v109 >= *v13)
          {
            if (v111 >= v109) {
              return result;
            }
            v13[2] = v111;
            *((void *)a2 - 2) = v109;
            uint64_t v12 = (char *)(v13 + 3);
            unint64_t v137 = v13[3];
            v13[3] = *((void *)a2 - 1);
            *((void *)a2 - 1) = v137;
            unint64_t v138 = v13[2];
            unint64_t v139 = *v13;
            if (v138 >= *v13) {
              return result;
            }
            *unint64_t v13 = v138;
            v13[2] = v139;
            unint64_t v112 = (uint64_t *)(v13 + 1);
          }
          else
          {
            if (v111 >= v109)
            {
              unint64_t v112 = (uint64_t *)(v13 + 3);
              unint64_t v148 = v13[3];
              unint64_t v149 = v13[1];
              *unint64_t v13 = v109;
              v13[1] = v148;
              v13[2] = v110;
              v13[3] = v149;
              unint64_t v150 = *((void *)a2 - 2);
              if (v150 >= v110) {
                return result;
              }
              v13[2] = v150;
            }
            else
            {
              unint64_t v112 = (uint64_t *)(v13 + 1);
              *unint64_t v13 = v111;
            }
            *((void *)a2 - 2) = v110;
          }
          uint64_t v151 = *v112;
          *unint64_t v112 = *(void *)v12;
          *(void *)uint64_t v12 = v151;
          return result;
        case 4uLL:
          return sub_2EB09C((uint64_t *)v13, v13 + 2, v13 + 4, (unint64_t *)a2 - 2);
        case 5uLL:
          BOOL result = sub_2EB09C((uint64_t *)v13, v13 + 2, v13 + 4, v13 + 6);
          unint64_t v113 = *((void *)a2 - 2);
          unint64_t v114 = v13[6];
          if (v113 < v114)
          {
            v13[6] = v113;
            *((void *)a2 - 2) = v114;
            unint64_t v115 = v13[7];
            v13[7] = *((void *)a2 - 1);
            *((void *)a2 - 1) = v115;
            unint64_t v116 = v13[6];
            unint64_t v117 = v13[4];
            if (v116 < v117)
            {
              unint64_t v118 = v13[5];
              unint64_t v119 = v13[7];
              v13[4] = v116;
              v13[5] = v119;
              v13[6] = v117;
              v13[7] = v118;
              unint64_t v120 = v13[2];
              if (v116 < v120)
              {
                unint64_t v121 = v13[3];
                v13[2] = v116;
                v13[3] = v119;
                v13[4] = v120;
                v13[5] = v121;
                uint64_t v122 = *v13;
                if (v116 < *v13)
                {
                  unint64_t v123 = v13[1];
                  *unint64_t v13 = v116;
                  v13[1] = v119;
                  v13[2] = v122;
                  v13[3] = v123;
                }
              }
            }
          }
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383) {
      break;
    }
    if (!a4)
    {
      if (v13 != (unint64_t *)a2)
      {
        return (uint64_t *)sub_2EB1CC((char *)v13, a2, a2);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v13[2 * (v15 >> 1)];
    unint64_t v18 = *((void *)a2 - 2);
    if ((unint64_t)v14 >= 0x801)
    {
      unint64_t v19 = *v17;
      unint64_t v20 = *v13;
      if (*v17 >= *v13)
      {
        if (v18 < v19)
        {
          unint64_t *v17 = v18;
          *((void *)a2 - 2) = v19;
          unint64_t v25 = &v13[2 * v16];
          unint64_t v27 = v25[1];
          uint64_t v26 = (char *)(v25 + 1);
          *(void *)uint64_t v26 = *((void *)a2 - 1);
          *((void *)a2 - 1) = v27;
          uint64_t v28 = *v13;
          if (*v17 < *v13)
          {
            *unint64_t v13 = *v17;
            uint64_t v21 = v13 + 1;
            unint64_t *v17 = v28;
            goto LABEL_23;
          }
        }
      }
      else
      {
        if (v18 < v19)
        {
          uint64_t v21 = v13 + 1;
          *unint64_t v13 = v18;
          goto LABEL_22;
        }
        *unint64_t v13 = v19;
        unint64_t *v17 = v20;
        unint64_t v32 = v13[1];
        uint64_t v21 = &v13[2 * v16 + 1];
        v13[1] = *v21;
        *uint64_t v21 = v32;
        unint64_t v33 = *((void *)a2 - 2);
        if (v33 < v20)
        {
          unint64_t *v17 = v33;
LABEL_22:
          *((void *)a2 - 2) = v20;
          uint64_t v26 = a2 - 8;
LABEL_23:
          unint64_t v34 = *v21;
          *uint64_t v21 = *(void *)v26;
          *(void *)uint64_t v26 = v34;
        }
      }
      unint64_t v35 = v16 - 1;
      uint64_t v36 = &v13[2 * v16 - 2];
      unint64_t v37 = *v36;
      unint64_t v38 = v13[2];
      unint64_t v39 = *((void *)a2 - 4);
      if (*v36 >= v38)
      {
        if (v39 < v37)
        {
          unint64_t *v36 = v39;
          *((void *)a2 - 4) = v37;
          int64_t v41 = &v13[2 * v35];
          unint64_t v43 = v41[1];
          int64_t v42 = (char *)(v41 + 1);
          *(void *)int64_t v42 = *((void *)a2 - 3);
          *((void *)a2 - 3) = v43;
          unint64_t v44 = v13[2];
          if (*v36 < v44)
          {
            v13[2] = *v36;
            unint64_t *v36 = v44;
            unint64_t v40 = v13 + 3;
            goto LABEL_36;
          }
        }
      }
      else
      {
        if (v39 < v37)
        {
          unint64_t v40 = v13 + 3;
          v13[2] = v39;
          goto LABEL_35;
        }
        unint64_t v48 = &v13[2 * v35];
        unint64_t v49 = v48[1];
        unint64_t v40 = v48 + 1;
        unint64_t v50 = v13[3];
        v13[2] = v37;
        v13[3] = v49;
        unint64_t *v36 = v38;
        *unint64_t v40 = v50;
        unint64_t v51 = *((void *)a2 - 4);
        if (v51 < v38)
        {
          unint64_t *v36 = v51;
LABEL_35:
          *((void *)a2 - 4) = v38;
          int64_t v42 = a2 - 24;
LABEL_36:
          unint64_t v52 = *v40;
          *unint64_t v40 = *(void *)v42;
          *(void *)int64_t v42 = v52;
        }
      }
      unint64_t v53 = v16 + 1;
      unint64_t v54 = &v13[2 * v16 + 2];
      unint64_t v55 = *v54;
      unint64_t v56 = v13[4];
      unint64_t v57 = *((void *)a2 - 6);
      if (*v54 >= v56)
      {
        if (v57 < v55)
        {
          *unint64_t v54 = v57;
          *((void *)a2 - 6) = v55;
          double v59 = &v13[2 * v53];
          unint64_t v61 = v59[1];
          double v60 = (char *)(v59 + 1);
          *(void *)double v60 = *((void *)a2 - 5);
          *((void *)a2 - 5) = v61;
          unint64_t v55 = *v54;
          unint64_t v62 = v13[4];
          if (*v54 < v62)
          {
            v13[4] = v55;
            *unint64_t v54 = v62;
            unint64_t v58 = (uint64_t *)(v13 + 5);
            goto LABEL_46;
          }
        }
LABEL_47:
        unint64_t v67 = *v17;
        unint64_t v68 = *v36;
        if (*v17 >= *v36) {
          goto LABEL_53;
        }
      }
      else
      {
        if (v57 < v55)
        {
          unint64_t v58 = (uint64_t *)(v13 + 5);
          v13[4] = v57;
          goto LABEL_45;
        }
        double v63 = &v13[2 * v53];
        unint64_t v64 = v63[1];
        unint64_t v58 = (uint64_t *)(v63 + 1);
        BOOL result = (uint64_t *)v13[5];
        v13[4] = v55;
        v13[5] = v64;
        *unint64_t v54 = v56;
        *unint64_t v58 = (uint64_t)result;
        unint64_t v65 = *((void *)a2 - 6);
        if (v65 < v56)
        {
          *unint64_t v54 = v65;
LABEL_45:
          *((void *)a2 - 6) = v56;
          double v60 = a2 - 40;
LABEL_46:
          uint64_t v66 = *v58;
          *unint64_t v58 = *(void *)v60;
          *(void *)double v60 = v66;
          unint64_t v55 = *v54;
          goto LABEL_47;
        }
        unint64_t v55 = v56;
        unint64_t v67 = *v17;
        unint64_t v68 = *v36;
        if (*v17 >= *v36)
        {
LABEL_53:
          if (v55 < v67)
          {
            unint64_t *v17 = v55;
            double v75 = &v13[2 * v16];
            double v76 = (uint64_t *)v75[1];
            int v70 = v75 + 1;
            BOOL result = v76;
            *unint64_t v54 = v67;
            unsigned int v77 = &v13[2 * v53];
            *int v70 = v77[1];
            v77[1] = (unint64_t)v76;
            if (v55 >= v68)
            {
              unint64_t v67 = v55;
            }
            else
            {
              unint64_t *v36 = v55;
              unint64_t *v17 = v68;
              unsigned int v69 = &v13[2 * v35 + 1];
LABEL_56:
              unint64_t v78 = *v69;
              *unsigned int v69 = *v70;
              *int v70 = v78;
              unint64_t v67 = *v17;
            }
          }
          goto LABEL_57;
        }
      }
      unsigned int v69 = &v13[2 * v35 + 1];
      if (v55 < v67)
      {
        unint64_t *v36 = v55;
        *unint64_t v54 = v68;
        int v70 = &v13[2 * v53 + 1];
        goto LABEL_56;
      }
      unint64_t *v36 = v67;
      unint64_t *v17 = v68;
      double v71 = &v13[2 * v16];
      unint64_t v73 = v71[1];
      double v72 = v71 + 1;
      unint64_t v74 = *v69;
      *unsigned int v69 = v73;
      *double v72 = v74;
      if (v55 < v68)
      {
        unint64_t *v17 = v55;
        *unint64_t v54 = v68;
        int v70 = &v13[2 * v53 + 1];
        unsigned int v69 = v72;
        goto LABEL_56;
      }
      unint64_t v67 = v68;
LABEL_57:
      uint64_t v79 = *v13;
      *unint64_t v13 = v67;
      uint64_t v24 = v13 + 1;
      unint64_t *v17 = v79;
      uint64_t v29 = (char *)&v13[2 * v16 + 1];
      goto LABEL_58;
    }
    unint64_t v22 = *v13;
    unint64_t v23 = *v17;
    if (*v13 >= *v17)
    {
      if (v18 >= v22) {
        goto LABEL_59;
      }
      *unint64_t v13 = v18;
      *((void *)a2 - 2) = v22;
      uint64_t v29 = (char *)(v13 + 1);
      unint64_t v30 = v13[1];
      v13[1] = *((void *)a2 - 1);
      *((void *)a2 - 1) = v30;
      unint64_t v31 = *v17;
      if (*v13 >= *v17) {
        goto LABEL_59;
      }
      unint64_t *v17 = *v13;
      *unint64_t v13 = v31;
      uint64_t v24 = &v13[2 * v16 + 1];
    }
    else
    {
      uint64_t v24 = &v13[2 * v16 + 1];
      if (v18 >= v22)
      {
        unint64_t *v17 = v22;
        unint64_t v45 = v13[1];
        *unint64_t v13 = v23;
        unint64_t v46 = *v24;
        *uint64_t v24 = v45;
        v13[1] = v46;
        unint64_t v47 = *((void *)a2 - 2);
        if (v47 >= v23) {
          goto LABEL_59;
        }
        *unint64_t v13 = v47;
        *((void *)a2 - 2) = v23;
        uint64_t v24 = v13 + 1;
      }
      else
      {
        unint64_t *v17 = v18;
        *((void *)a2 - 2) = v23;
      }
      uint64_t v29 = a2 - 8;
    }
LABEL_58:
    unint64_t v80 = *v24;
    *uint64_t v24 = *(void *)v29;
    *(void *)uint64_t v29 = v80;
LABEL_59:
    --a4;
    unint64_t v81 = *v13;
    if ((a5 & 1) != 0 || *(v13 - 2) < v81)
    {
      uint64_t v82 = 0;
      unint64_t v83 = v13[1];
      do
      {
        unint64_t v84 = v13[v82 + 2];
        v82 += 2;
      }
      while (v84 < v81);
      int v85 = (char *)&v13[v82];
      unsigned int v86 = a2;
      if (v82 == 2)
      {
        unsigned int v86 = a2;
        do
        {
          if (v85 >= v86) {
            break;
          }
          unint64_t v88 = *((void *)v86 - 2);
          v86 -= 16;
        }
        while (v88 >= v81);
      }
      else
      {
        do
        {
          unint64_t v87 = *((void *)v86 - 2);
          v86 -= 16;
        }
        while (v87 >= v81);
      }
      if (v85 >= v86)
      {
        unint64_t v13 = (unint64_t *)((char *)v13 + v82 * 8);
        unsigned int v94 = v85 - 16;
        if (v85 - 16 != (char *)v11) {
          goto LABEL_76;
        }
      }
      else
      {
        unint64_t v89 = *(void *)v86;
        unint64_t v13 = (unint64_t *)((char *)v13 + v82 * 8);
        uint64_t v90 = (unint64_t *)v86;
        do
        {
          *unint64_t v13 = v89;
          *uint64_t v90 = v84;
          unint64_t v91 = v13[1];
          v13[1] = v90[1];
          v90[1] = v91;
          do
          {
            unint64_t v92 = v13[2];
            v13 += 2;
            unint64_t v84 = v92;
          }
          while (v92 < v81);
          do
          {
            unint64_t v93 = *(v90 - 2);
            v90 -= 2;
            unint64_t v89 = v93;
          }
          while (v93 >= v81);
        }
        while (v13 < v90);
        unsigned int v94 = (char *)(v13 - 2);
        if (v13 - 2 != v11)
        {
LABEL_76:
          unint64_t *v11 = *(v13 - 2);
          v11[1] = *(v13 - 1);
        }
      }
      *(v13 - 2) = v81;
      *(v13 - 1) = v83;
      if (v85 < v86) {
        goto LABEL_80;
      }
      BOOL v95 = sub_2EC5E4(v11, v94);
      BOOL result = (uint64_t *)sub_2EC5E4(v13, a2);
      if (result)
      {
        a2 = v94;
        if (v95) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v95)
      {
LABEL_80:
        BOOL result = (uint64_t *)sub_2EBC3C(v11, v94, a3, a4, a5 & 1);
        a5 = 0;
      }
    }
    else
    {
      if (v81 < *((void *)a2 - 2))
      {
        do
        {
          unint64_t v96 = v13[2];
          v13 += 2;
        }
        while (v81 >= v96);
      }
      else
      {
        unint64_t v97 = v13 + 2;
        do
        {
          unint64_t v13 = v97;
          if (v97 >= (unint64_t *)a2) {
            break;
          }
          v97 += 2;
        }
        while (v81 >= *v13);
      }
      uint64_t v98 = (unint64_t *)a2;
      if (v13 < (unint64_t *)a2)
      {
        uint64_t v98 = (unint64_t *)a2;
        do
        {
          unint64_t v99 = *(v98 - 2);
          v98 -= 2;
        }
        while (v81 < v99);
      }
      unint64_t v100 = v11[1];
      if (v13 < v98)
      {
        uint64_t v101 = *v13;
        unint64_t v102 = *v98;
        do
        {
          *unint64_t v13 = v102;
          *uint64_t v98 = v101;
          unint64_t v103 = v13[1];
          v13[1] = v98[1];
          v98[1] = v103;
          do
          {
            unint64_t v104 = v13[2];
            v13 += 2;
            uint64_t v101 = v104;
          }
          while (v81 >= v104);
          do
          {
            unint64_t v105 = *(v98 - 2);
            v98 -= 2;
            unint64_t v102 = v105;
          }
          while (v81 < v105);
        }
        while (v13 < v98);
      }
      BOOL v5 = v13 - 2 >= v11;
      BOOL v6 = v13 - 2 == v11;
      if (v13 - 2 != v11)
      {
        unint64_t *v11 = *(v13 - 2);
        v11[1] = *(v13 - 1);
      }
      a5 = 0;
      *(v13 - 2) = v81;
      *(v13 - 1) = v100;
    }
  }
  int v124 = (char *)(v13 + 2);
  BOOL v126 = v13 == (unint64_t *)a2 || v124 == a2;
  if (a5)
  {
    if (!v126)
    {
      uint64_t v127 = 0;
      v128 = v13;
      do
      {
        unint64_t v130 = v124;
        unint64_t v131 = v128[2];
        unint64_t v132 = *v128;
        if (v131 < *v128)
        {
          unint64_t v133 = v128[3];
          uint64_t v134 = v127;
          do
          {
            unint64_t v135 = (char *)v13 + v134;
            uint64_t v136 = *(unint64_t *)((char *)v13 + v134 + 8);
            *((void *)v135 + 2) = v132;
            *((void *)v135 + 3) = v136;
            if (!v134)
            {
              uint64_t v129 = v13;
              goto LABEL_129;
            }
            unint64_t v132 = *((void *)v135 - 2);
            v134 -= 16;
          }
          while (v131 < v132);
          uint64_t v129 = (unint64_t *)((char *)v13 + v134 + 16);
LABEL_129:
          *uint64_t v129 = v131;
          v129[1] = v133;
        }
        int v124 = v130 + 16;
        v127 += 16;
        v128 = (unint64_t *)v130;
      }
      while (v130 + 16 != a2);
    }
  }
  else if (!v126)
  {
    int v140 = v13 + 3;
    do
    {
      uint64_t v141 = v124;
      unint64_t v142 = v11[2];
      unint64_t v143 = *v11;
      if (v142 < *v11)
      {
        unint64_t v144 = v11[3];
        unint64_t v145 = v140;
        do
        {
          v146 = v145;
          *(v145 - 1) = v143;
          unint64_t v147 = *(v145 - 2);
          v145 -= 2;
          unint64_t *v146 = v147;
          unint64_t v143 = *(v146 - 5);
        }
        while (v142 < v143);
        *(v145 - 1) = v142;
        *unint64_t v145 = v144;
      }
      int v124 = v141 + 16;
      v140 += 2;
      unint64_t v11 = (unint64_t *)v141;
    }
    while (v141 + 16 != a2);
  }
  return result;
}

BOOL sub_2EC5E4(unint64_t *a1, char *a2)
{
  uint64_t v4 = (a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *((void *)a2 - 2);
      uint64_t v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *((void *)a2 - 2) = v7;
        unint64_t v8 = a1[1];
        a1[1] = *((void *)a2 - 1);
        *((void *)a2 - 1) = v8;
      }
      return result;
    case 3:
      unint64_t v9 = a1[2];
      unint64_t v10 = *a1;
      unint64_t v11 = *((void *)a2 - 2);
      if (v9 < *a1)
      {
        if (v11 >= v9)
        {
          uint64_t v12 = (uint64_t *)(a1 + 3);
          unint64_t v36 = a1[3];
          unint64_t v37 = a1[1];
          *a1 = v9;
          a1[1] = v36;
          a1[2] = v10;
          a1[3] = v37;
          unint64_t v38 = *((void *)a2 - 2);
          if (v38 >= v10) {
            return result;
          }
          a1[2] = v38;
        }
        else
        {
          uint64_t v12 = (uint64_t *)(a1 + 1);
          *a1 = v11;
        }
        *((void *)a2 - 2) = v10;
        unint64_t v30 = a2 - 8;
        goto LABEL_27;
      }
      if (v11 < v9)
      {
        a1[2] = v11;
        *((void *)a2 - 2) = v9;
        unint64_t v30 = (char *)(a1 + 3);
        unint64_t v29 = a1[3];
        a1[3] = *((void *)a2 - 1);
        *((void *)a2 - 1) = v29;
        unint64_t v31 = a1[2];
        uint64_t v32 = *a1;
        if (v31 < *a1)
        {
          *a1 = v31;
          a1[2] = v32;
          uint64_t v12 = (uint64_t *)(a1 + 1);
LABEL_27:
          uint64_t v39 = *v12;
          uint64_t *v12 = *(void *)v30;
          *(void *)unint64_t v30 = v39;
          return result;
        }
      }
      return result;
    case 4:
      sub_2EB09C((uint64_t *)a1, a1 + 2, a1 + 4, (unint64_t *)a2 - 2);
      return 1;
    case 5:
      sub_2EB09C((uint64_t *)a1, a1 + 2, a1 + 4, a1 + 6);
      unint64_t v18 = *((void *)a2 - 2);
      unint64_t v19 = a1[6];
      if (v18 >= v19) {
        return 1;
      }
      a1[6] = v18;
      *((void *)a2 - 2) = v19;
      unint64_t v20 = a1[7];
      a1[7] = *((void *)a2 - 1);
      *((void *)a2 - 1) = v20;
      unint64_t v21 = a1[6];
      unint64_t v22 = a1[4];
      if (v21 >= v22) {
        return 1;
      }
      unint64_t v23 = a1[5];
      unint64_t v24 = a1[7];
      a1[4] = v21;
      a1[5] = v24;
      a1[6] = v22;
      a1[7] = v23;
      unint64_t v25 = a1[2];
      if (v21 >= v25) {
        return 1;
      }
      unint64_t v26 = a1[3];
      a1[2] = v21;
      a1[3] = v24;
      a1[4] = v25;
      a1[5] = v26;
      uint64_t v27 = *a1;
      if (v21 >= *a1) {
        return 1;
      }
      unint64_t v28 = a1[1];
      *a1 = v21;
      a1[1] = v24;
      a1[2] = v27;
      a1[3] = v28;
      return 1;
    default:
      unint64_t v13 = (char *)(a1 + 4);
      unint64_t v14 = a1[4];
      unint64_t v15 = a1[2];
      unint64_t v16 = *a1;
      if (v15 < *a1)
      {
        if (v14 >= v15)
        {
          uint64_t v17 = (uint64_t *)(a1 + 3);
          unint64_t v40 = a1[3];
          unint64_t v41 = a1[1];
          *a1 = v15;
          a1[1] = v40;
          a1[2] = v16;
          a1[3] = v41;
          if (v14 >= v16) {
            goto LABEL_32;
          }
          a1[2] = v14;
        }
        else
        {
          uint64_t v17 = (uint64_t *)(a1 + 1);
          *a1 = v14;
        }
        a1[4] = v16;
        unint64_t v34 = (uint64_t *)(a1 + 5);
        goto LABEL_31;
      }
      if (v14 < v15)
      {
        unint64_t v34 = (uint64_t *)(a1 + 3);
        unint64_t v33 = a1[3];
        unint64_t v35 = a1[5];
        a1[4] = v15;
        a1[5] = v33;
        a1[2] = v14;
        a1[3] = v35;
        if (v14 < v16)
        {
          *a1 = v14;
          a1[2] = v16;
          uint64_t v17 = (uint64_t *)(a1 + 1);
LABEL_31:
          uint64_t v42 = *v17;
          uint64_t *v17 = *v34;
          *unint64_t v34 = v42;
        }
      }
LABEL_32:
      unint64_t v43 = (char *)(a1 + 6);
      if (a1 + 6 == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v44 = 0;
      int v45 = 0;
      while (1)
      {
        unint64_t v46 = *(void *)v43;
        unint64_t v47 = *(void *)v13;
        if (*(void *)v43 < *(void *)v13) {
          break;
        }
LABEL_41:
        unint64_t v13 = v43;
        v44 += 16;
        v43 += 16;
        if (v43 == a2) {
          return 1;
        }
      }
      unint64_t v48 = *((void *)v43 + 1);
      uint64_t v49 = v44;
      do
      {
        unint64_t v50 = (unint64_t *)((char *)a1 + v49);
        uint64_t v51 = *(unint64_t *)((char *)a1 + v49 + 40);
        v50[6] = v47;
        v50[7] = v51;
        if (v49 == -32)
        {
          *a1 = v46;
          a1[1] = v48;
          if (++v45 != 8) {
            goto LABEL_41;
          }
          return v43 + 16 == a2;
        }
        unint64_t v47 = v50[2];
        v49 -= 16;
      }
      while (v46 < v47);
      unint64_t v52 = (char *)a1 + v49;
      *((void *)v52 + 6) = v46;
      *((void *)v52 + 7) = v48;
      if (++v45 != 8) {
        goto LABEL_41;
      }
      return v43 + 16 == a2;
  }
}

void *sub_2EC954(void *a1)
{
  *a1 = off_2438480;
  uint64_t v2 = (void *)a1[81];
  if (v2)
  {
    a1[82] = v2;
    operator delete(v2);
  }
  for (uint64_t i = 80; i != 40; --i)
  {
    uint64_t v4 = a1[i];
    a1[i] = 0;
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 80);
      *(void *)(v4 + 80) = 0;
      if (!v5 || *(unsigned char *)(v4 + 88))
      {
        unint64_t v6 = *(void **)(v4 + 32);
        *(void *)(v4 + 32) = 0;
        if (v6 && !*(unsigned char *)(v4 + 48)) {
          free(v6);
        }
        uint64_t v7 = *(void **)(v4 + 8);
        if (v7)
        {
          *(void *)(v4 + 16) = v7;
          operator delete(v7);
        }
        operator delete();
      }
      operator delete[]();
    }
  }
  sub_2EA054(a1 + 1);
  return a1;
}

void *sub_2ECA50(void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  *BOOL result = a2;
  if (v2)
  {
    uint64_t v3 = (void *)v2[9];
    if (v3)
    {
      v2[10] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)v2[6];
    if (v4)
    {
      v2[7] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (void *)v2[3];
    if (v5)
    {
      do
      {
        unint64_t v6 = (void *)*v5;
        operator delete(v5);
        uint64_t v5 = v6;
      }
      while (v6);
    }
    uint64_t v7 = (void *)v2[1];
    v2[1] = 0;
    if (v7) {
      operator delete(v7);
    }
    operator delete();
  }
  return result;
}

void sub_2ECAF0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_2438570;
  *(unsigned char *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = operator new(0x20uLL);
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = off_2438690;
  operator new();
}

void sub_2ECF14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  if (!atomic_fetch_add(v5, 0xFFFFFFFFFFFFFFFFLL)) {
    sub_20A6EC0(v4);
  }
  sub_14A84((uint64_t)va1);
  sub_14A84((uint64_t)va2);
  sub_14A84((uint64_t)va);
  sub_14A84(v3);
  uint64_t v7 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v7) {
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_2ECFBC(uint64_t a1)
{
  return a1 + 48;
}

uint64_t sub_2ECFC4()
{
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v5);
    v0 = sub_188FC78(v5, (uint64_t)"Unsupported method ", 19);
    uint64_t v1 = sub_188FC78(v0, (uint64_t)"virtual RawEntityLookupEntry msl::data::OfflineDataProviderStorage::get_entity_by_id(LayerId, entity_id_t) const", 112);
    sub_188FC78(v1, (uint64_t)" called; returning default value", 32);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v4 < 0) {
      operator delete(__p);
    }
    if (v6 < 0) {
      operator delete((void *)v5[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return 0xFFFFFFFFLL;
}

void sub_2ED148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_2ED194@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)v7);
    uint64_t v3 = sub_188FC78(v7, (uint64_t)"Unsupported method ", 19);
    char v4 = sub_188FC78(v3, (uint64_t)"virtual common::Vector<entity_id_t> msl::data::OfflineDataProviderStorage::get_entity_ids(LayerId) const", 104);
    sub_188FC78(v4, (uint64_t)" called; returning default value", 32);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v6 < 0) {
      operator delete(__p);
    }
    if (v8 < 0) {
      operator delete((void *)v7[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    uint64_t result = std::ios::~ios();
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_2ED324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

char *sub_2ED370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 35, 1);
  if (v4) {
    uint64_t v4 = (uint64_t)v3 + *v3;
  }
  sub_291688(&v6, v4);
  return sub_291D74((char *)&v6, a2);
}

double sub_2ED3E4@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void *sub_2ED3F4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  a2[2296] = 1;
  return memcpy(a2, (const void *)(a1 + 216), 0x8F8uLL);
}

uint64_t sub_2ED40C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(double *)(a1 + 2456) = *(double *)(a1 + 2456) + 1.0;
  uint64_t v6 = (std::mutex *)(a1 + 152);
  std::mutex::lock((std::mutex *)(a1 + 152));
  v9[0] = a2;
  v9[1] = a3;
  uint64_t v7 = *(void *)*sub_2ED49C(a1, v9);
  std::mutex::unlock(v6);
  return v7;
}

void sub_2ED488(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2ED49C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = (void *)(a1 + 72);
  if (!sub_2F0FCC((void *)(a1 + 72), a2))
  {
    *(double *)(a1 + 8 * *a2 + 1816) = *(double *)(a1 + 8 * *a2 + 1816) + 1.0;
    sub_725D0((uint64_t)v17);
    uint64_t v7 = *(void *)(a1 + 32);
    sub_2D15A0(a2, (uint64_t)v12);
    (*(void (**)(long long *__return_ptr, uint64_t, unsigned char *))(*(void *)v7 + 24))(&v15, v7, v12);
    if (__p)
    {
      unint64_t v14 = __p;
      operator delete(__p);
    }
    *(double *)(a1 + 2488) = sub_72688((uint64_t)v17) + *(double *)(a1 + 2488);
    long long v10 = v15;
    long long v15 = 0uLL;
    char v11 = v16;
    sub_2EE564(a1, a2, (uint64_t)&v10);
    char v8 = (std::__shared_weak_count *)*((void *)&v10 + 1);
    if (*((void *)&v10 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    unint64_t v9 = (std::__shared_weak_count *)*((void *)&v15 + 1);
    if (*((void *)&v15 + 1)
      && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  uint64_t v5 = sub_2F1944(v4, a2);
  if (!v5) {
    sub_5AE8("unordered_map::at: key not found");
  }
  return v5 + 3;
}

void sub_2ED63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_2ED658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2ED67C()
{
  v0 = operator new(0x20uLL);
  v0[1] = 0;
  v0[2] = 0;
  void *v0 = off_24387B8;
  operator new();
}

void sub_2EDA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  if (!atomic_fetch_add(v6, 0xFFFFFFFFFFFFFFFFLL)) {
    sub_20A6EC0(v5);
  }
  sub_2EDB58((uint64_t)va);
  sub_14A84((uint64_t)va1);
  _Unwind_Resume(a1);
}

void *sub_2EDAC8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t sub_2EDB58(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

unsigned int *sub_2EDBD4(uint64_t a1, int a2)
{
  uint64_t v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 35, 1);
  if (v4) {
    uint64_t v4 = (uint64_t)v3 + *v3;
  }
  sub_291688(&v6, v4);
  return sub_291EBC(&v6, a2);
}

BOOL sub_2EDC48(uint64_t a1, int a2)
{
  uint64_t v3 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64))(a1, 35, 1);
  if (v4) {
    uint64_t v4 = (uint64_t)v3 + *v3;
  }
  sub_291688(&v6, v4);
  return sub_291F68(&v6, a2);
}

BOOL sub_2EDCBC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  *(double *)(a1 + 2464) = *(double *)(a1 + 2464) + 1.0;
  uint64_t v6 = (std::mutex *)(a1 + 152);
  std::mutex::lock((std::mutex *)(a1 + 152));
  v9[0] = a2;
  v9[1] = a3;
  BOOL v7 = sub_2EDD44(a1, v9);
  std::mutex::unlock(v6);
  return v7;
}

void sub_2EDD30(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2EDD44(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = (void *)(a1 + 72);
  if (sub_2F0FCC((void *)(a1 + 72), a2))
  {
    uint64_t v5 = sub_2F1944(v4, a2);
    if (v5) {
      return *(void *)(v5[3] + 8) != 0;
    }
LABEL_10:
    sub_5AE8("unordered_map::at: key not found");
  }
  if (!sub_2F0FCC((void *)(a1 + 112), a2))
  {
    *(double *)(a1 + 8 * *a2 + 1816) = *(double *)(a1 + 8 * *a2 + 1816) + 1.0;
    sub_725D0((uint64_t)v14);
    uint64_t v7 = *(void *)(a1 + 32);
    sub_2D15A0(a2, (uint64_t)v11);
    char v8 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v7 + 40))(v7, v11);
    if (__p)
    {
      uint64_t v13 = __p;
      operator delete(__p);
    }
    *(double *)(a1 + 2488) = sub_72688((uint64_t)v14) + *(double *)(a1 + 2488);
    uint64_t v9 = a1 + 8 * *a2;
    v11[0] = v8;
    *(double *)(v9 + 856) = *(double *)(v9 + 856) + 1.0;
    sub_2F1F48(a1 + 112, a2, a2, v11);
  }
  uint64_t v10 = sub_2F1944((void *)(a1 + 112), a2);
  if (!v10) {
    goto LABEL_10;
  }
  return *((unsigned char *)v10 + 24) != 0;
}

void sub_2EDEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2EDEC8()
{
  return 1;
}

BOOL sub_2EDED0(uint64_t a1)
{
  return *(void *)(a1 + 48) != *(void *)(a1 + 56);
}

void sub_2EDEE0(uint64_t a1, uint64_t **a2, void *a3)
{
  *(double *)(a1 + 2472) = *(double *)(a1 + 2472) + 1.0;
  unint64_t v30 = 0;
  unint64_t v31 = 0;
  uint64_t v32 = 0;
  sub_2F0900((char **)&v30, a2[1] - *a2);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v8 = (uint64_t)v31;
    do
    {
      uint64_t v28 = *v6;
      sub_2D15A0((unsigned int *)&v28, (uint64_t)__p);
      uint64_t v9 = sub_2F0A1C((char **)&v30, v8, (uint64_t)__p);
      if (__p[1])
      {
        unint64_t v34 = __p[1];
        operator delete(__p[1]);
      }
      uint64_t v8 = (uint64_t)(v9 + 32);
      ++v6;
    }
    while (v6 != v7);
  }
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
  uint64_t v28 = v11;
  if (!v10 || (uint64_t v12 = std::__shared_weak_count::lock(v10), (v29 = v12) == 0)) {
    sub_2F0F80();
  }
  uint64_t v13 = v12;
  sub_725D0((uint64_t)__p);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v35 = v11;
  unint64_t v36 = v13;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v37 = *(_OWORD *)__p;
  LOBYTE(v38) = (_BYTE)v34;
  uint64_t v15 = a3[3];
  if (!v15) {
    goto LABEL_11;
  }
  if ((void *)v15 != a3)
  {
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
LABEL_11:
    unint64_t v40 = (void *)v15;
    goto LABEL_13;
  }
  unint64_t v40 = v39;
  (*(void (**)(void *, void *))(*a3 + 24))(a3, v39);
LABEL_13:
  uint64_t v42 = 0;
  char v16 = (char *)operator new(0x50uLL);
  uint64_t v17 = v16;
  uint64_t v19 = v35;
  unint64_t v18 = v36;
  *(void *)char v16 = off_24388E0;
  *((void *)v16 + 1) = v19;
  *((void *)v16 + 2) = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v16 + 24) = v37;
  *((void *)v16 + 5) = v38;
  uint64_t v20 = (uint64_t)v40;
  if (!v40) {
    goto LABEL_18;
  }
  if (v40 != v39)
  {
    uint64_t v20 = (*(uint64_t (**)(void))(*v40 + 16))();
LABEL_18:
    v17[9] = v20;
    goto LABEL_20;
  }
  v17[9] = v17 + 6;
  (*(void (**)(void *))(v39[0] + 24))(v39);
LABEL_20:
  uint64_t v42 = v17;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v14 + 48))(v14, &v30, v41);
  if (v42 == v41)
  {
    (*(void (**)(void *))(v41[0] + 32))(v41);
    unint64_t v21 = v40;
    if (v40 != v39) {
      goto LABEL_24;
    }
LABEL_29:
    (*(void (**)(void *))(v39[0] + 32))(v39);
    unint64_t v22 = v36;
    if (!v36) {
      goto LABEL_32;
    }
    goto LABEL_30;
  }
  if (v42) {
    (*(void (**)(void *))(*v42 + 40))(v42);
  }
  unint64_t v21 = v40;
  if (v40 == v39) {
    goto LABEL_29;
  }
LABEL_24:
  if (v21) {
    (*(void (**)(void *))(*v21 + 40))(v21);
  }
  unint64_t v22 = v36;
  if (v36)
  {
LABEL_30:
    if (!atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_32:
  unint64_t v23 = v29;
  if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  unint64_t v24 = (char *)v30;
  if (v30)
  {
    unint64_t v25 = v31;
    unint64_t v26 = v30;
    if (v31 != v30)
    {
      do
      {
        uint64_t v27 = (void *)*((void *)v25 - 3);
        if (v27)
        {
          *((void *)v25 - 2) = v27;
          operator delete(v27);
        }
        v25 -= 32;
      }
      while (v25 != v24);
      unint64_t v26 = v30;
    }
    unint64_t v31 = v24;
    operator delete(v26);
  }
}

void sub_2EE344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v21 = v19[2];
  if (v21) {
    sub_20A6EF8(v21);
  }
  operator delete(v19);
  sub_2EE480((uint64_t)&a19);
  sub_14A84((uint64_t)&a10);
  sub_38358(&a12);
  _Unwind_Resume(a1);
}

void sub_2EE3B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_38358((void **)va);
  _Unwind_Resume(a1);
}

void sub_2EE3CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_38358(&a12);
  _Unwind_Resume(a1);
}

void *sub_2EE3F0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t sub_2EE480(uint64_t a1)
{
  uint64_t v2 = a1 + 40;
  uint64_t v3 = *(void *)(a1 + 64);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v4) {
      return a1;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v4) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_2EE564(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 16) && (uint64_t v6 = *(uint64_t **)a3) != 0 && *v6 && v6[1])
  {
    char v16 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v38 = *(uint64_t **)a3;
    uint64_t v39 = v16;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    unint64_t v7 = v6[1];
    if (!v7) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = operator new(0x28uLL);
    v5[1] = 0;
    v5[2] = 0;
    void *v5 = off_2438970;
    v5[4] = 0;
    v5[3] = 0;
    uint64_t v6 = v5 + 3;
    uint64_t v38 = v5 + 3;
    uint64_t v39 = (std::__shared_weak_count *)v5;
    unint64_t v7 = v5[4];
    if (!v7) {
      goto LABEL_7;
    }
  }
  if (!*v6)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v35, v6[1]);
    unint64_t v18 = std::string::insert(&v35, 0, "Obtained data from data provider which is nullptr but with size of ");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&v36, "; key: ");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    sub_2D1654(a2);
    if ((v34 & 0x80u) == 0) {
      unint64_t v22 = (const std::string::value_type *)v33;
    }
    else {
      unint64_t v22 = (const std::string::value_type *)v33[0];
    }
    if ((v34 & 0x80u) == 0) {
      std::string::size_type v23 = v34;
    }
    else {
      std::string::size_type v23 = v33[1];
    }
    unint64_t v24 = std::string::append(&v37, v22, v23);
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    std::string::size_type v41 = v24->__r_.__value_.__r.__words[2];
    long long v40 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    unint64_t v26 = (void *)sub_2F404((uint64_t)exception, &v40);
  }
  if (*(unsigned char *)(a1 + 24))
  {
    sub_725D0((uint64_t)&v40);
    if ((sub_2AE5B4(*a2, *v38, v38[1]) & 1) == 0)
    {
      uint64_t v27 = __cxa_allocate_exception(0x40uLL);
      sub_2D1654(a2);
      uint64_t v28 = std::string::insert(&v35, 0, "Could not verify integrity of Flatbuffer data (");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      unint64_t v30 = std::string::append(&v36, ")");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      uint64_t v32 = (void *)sub_2F404((uint64_t)v27, (long long *)&v37);
    }
    *(double *)(a1 + 2504) = sub_72688((uint64_t)&v40) + *(double *)(a1 + 2504);
    unint64_t v7 = v38[1];
  }
LABEL_7:
  uint64_t v8 = *a2;
  double v9 = (double)v7 * 0.0009765625 * 0.0009765625;
  double v10 = 1.0;
  if (v7) {
    double v11 = 0.0;
  }
  else {
    double v11 = 1.0;
  }
  uint64_t v12 = (double *)(a1 + 8 * v8);
  v12[27] = v12[27] + v11;
  if (!v7) {
    double v10 = 0.0;
  }
  v12[67] = v12[67] + v10;
  v12[147] = v9 + v12[147];
  if (v7 >= 0x4000) {
    double v9 = 0.0;
  }
  v12[187] = v9 + v12[187];
  uint64_t v13 = sub_2F1944((void *)(a1 + 112), a2);
  if (v13)
  {
    sub_256F0((void *)(a1 + 112), v13, (uint64_t)&v40);
    uint64_t v14 = (void *)v40;
    *(void *)&long long v40 = 0;
    if (v14) {
      operator delete(v14);
    }
    *(double *)(a1 + 8 * v8 + 856) = *(double *)(a1 + 8 * v8 + 856) + -1.0;
  }
  sub_2F1B0C(a1 + 72, a2, a2, (uint64_t)&v38);
  uint64_t v15 = v39;
  if (v39)
  {
    if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_2EE8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(__p);
    if (a33 < 0)
    {
LABEL_7:
      operator delete(a28);
      if (a26 < 0)
      {
LABEL_10:
        operator delete(a21);
        if ((a20 & 0x80000000) == 0) {
          goto LABEL_14;
        }
        goto LABEL_13;
      }
LABEL_12:
      if ((a20 & 0x80000000) == 0)
      {
LABEL_14:
        sub_14A84(v33 - 80);
        _Unwind_Resume(a1);
      }
LABEL_13:
      operator delete(a15);
      goto LABEL_14;
    }
  }
  else if (a33 < 0)
  {
    goto LABEL_7;
  }
  if (a26 < 0) {
    goto LABEL_10;
  }
  goto LABEL_12;
}

void sub_2EEA4C(uint64_t a1)
{
  sub_2EFC0C(a1);

  operator delete();
}

void *sub_2EEA84(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

void sub_2EEB14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2EEB34(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438690;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t *sub_2EEB88(uint64_t a1)
{
  return sub_2EECEC((uint64_t *)(a1 + 24));
}

void sub_2EEB94(uint64_t a1)
{
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_2EEC00(uint64_t a1)
{
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  operator delete();
}

uint64_t sub_2EEC80(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(void *)(a1 + 152) = v2;
      operator delete(v2);
    }
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 8);

  return v3(a1);
}

uint64_t *sub_2EECEC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2) {
    return a1;
  }
  if ((*(unsigned char *)(v2 + 136) & 1) == 0)
  {
    v8.__ptr_ = 0;
    uint64_t v3 = *(void *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v8);
    uint64_t v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v9.__cat_ = std::future_category();
      *(void *)&v9.__val_ = 4;
      std::future_error::future_error(&v7, v9);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      uint64_t v6 = std::logic_error::logic_error(exception, &v7);
      v6[1] = (std::logic_error)v7.__ec_;
    }
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  return a1;
}

void *sub_2EEE48(void *result)
{
  uint64_t v1 = result;
  *double result = off_2438728;
  uint64_t v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2EEEE0(void *a1)
{
  *a1 = off_2438728;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void *sub_2EEF88(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = off_2438728;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_2EEFE4(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_2438728;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_2EF01C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_2EF098(void *__p)
{
  uint64_t v1 = __p;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

void sub_2EF134(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  if (*a3)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v7);
      sub_188FC78(&v7, (uint64_t)"Unable to fetch the available regions from the offline data provider; creating a dummy region containin"
                 "g the entire world",
        121);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v12, 1u);
      if (SHIBYTE(v13) < 0) {
        operator delete((void *)v12);
      }
      if (v11 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    sub_33E90((uint64_t)&v12);
    uint64_t v5 = operator new(0x18uLL);
    std::future_error v7 = v5;
    std::error_code v9 = v5 + 3;
    v5[2] = v13;
    *(_OWORD *)uint64_t v5 = v12;
    std::exception_ptr v8 = v5 + 3;
    uint64_t v6 = *v4;
    if (!*v4) {
      sub_2E184(3u);
    }
  }
  else
  {
    sub_2EF520(a2, (void (*)(__n128 *__return_ptr, uint64_t))sub_7B358, (uint64_t)&v7);
    uint64_t v6 = **(void **)(a1 + 8);
    if (!v6) {
      sub_2E184(3u);
    }
  }
  sub_2EF62C(v6, (uint64_t)&v7);
  if (v7)
  {
    std::exception_ptr v8 = v7;
    operator delete(v7);
  }
}

void sub_2EF374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (__cdecl **a11)(std::stringbuf *__hidden this), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 57) < 0) {
    operator delete(*(void **)(v24 - 80));
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

void sub_2EF478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2EF4A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl4data12_GLOBAL__N_140get_available_regions_from_data_providerENSt3__110shared_ptrIN4maps7offl"
                     "ine12DataProviderEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3msl4data12_GLOBAL__N_140get_available_regions_from_data_providerENSt3__110shared_ptrI"
                                "N4maps7offline12DataProviderEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl4data12_GLOBAL__N_140get_available_regions_from_data_providerENSt3__110shared_ptrIN4maps7offline12DataProviderEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl4data12_GLOBAL__N_140get_available_regions_from_data_providerENSt3__110shared_ptrIN4maps7offline12DataProviderEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_2EF514()
{
}

uint64_t *sub_2EF520@<X0>(uint64_t *result@<X0>, void (*a2)(__n128 *__return_ptr, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v5 = *result;
  uint64_t v6 = result[1];
  if (v6 != *result)
  {
    unint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((v6 - *result) >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    double result = (uint64_t *)operator new(0x5D1745D1745D1748 * ((v6 - *result) >> 3));
    uint64_t v8 = (uint64_t)result;
    *(void *)a3 = result;
    *(void *)(a3 + 8) = result;
    for (*(void *)(a3 + 16) = &result[3 * v7]; v5 != v6; v5 += 88)
    {
      a2(&v9, v5);
      double result = (uint64_t *)sub_2EF6E8((char **)a3, v8, &v9);
      uint64_t v8 = (uint64_t)(result + 3);
    }
  }
  return result;
}

void sub_2EF60C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2EF62C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, uint64_t v5 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    sub_2E184(2u);
  }
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(void *)(a1 + 160) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_2EF6D4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

__n128 *sub_2EF6E8(char **a1, uint64_t a2, __n128 *a3)
{
  std::exception_ptr v6 = (__n128 *)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v8 = (__n128 *)&(*a1)[24 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v6) >> 3) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v6) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x555555555555555) {
      unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v17 = v15;
    }
    std::string v36 = a1 + 2;
    if (v17)
    {
      if (v17 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      unint64_t v18 = (__n128 *)operator new(24 * v17);
    }
    else
    {
      unint64_t v18 = 0;
    }
    uint64_t v32 = v18;
    uint64_t v33 = (char *)v18 + 24 * v7;
    long long __dst = v33;
    std::string v35 = (char *)v18 + 24 * v17;
    sub_2EF9AC((uint64_t)&v32, a3);
    uint64_t v20 = v33;
    long long v21 = (__n128 *)*a1;
    unint64_t v22 = v33;
    if (*a1 != (char *)v8)
    {
      std::string::size_type v23 = v8;
      uint64_t v24 = v33;
      do
      {
        long long v25 = *(long long *)((char *)&v23[-2] + 8);
        unint64_t v22 = v24 - 24;
        *((void *)v24 - 1) = v23[-1].n128_u64[1];
        *(_OWORD *)(v24 - 24) = v25;
        std::string::size_type v23 = (__n128 *)((char *)v23 - 24);
        v24 -= 24;
      }
      while (v23 != v21);
    }
    uint64_t v33 = v22;
    unint64_t v26 = (__n128 *)a1[1];
    uint64_t v27 = (char *)__dst;
    int64_t v28 = (char *)v26 - (char *)v8;
    if (v26 != v8)
    {
      memmove(__dst, v8, (char *)v26 - (char *)v8);
      unint64_t v22 = v33;
      uint64_t v8 = (__n128 *)a1[1];
    }
    long long v29 = (__n128 *)*a1;
    *a1 = v22;
    a1[1] = &v27[v28];
    unint64_t v30 = a1[2];
    a1[2] = v35;
    long long __dst = v8;
    std::string v35 = v30;
    uint64_t v32 = v29;
    uint64_t v33 = (char *)v29;
    if (v8 != v29) {
      long long __dst = (char *)v29 + ((char *)v8 - (char *)v29 - 24) % 0x18uLL;
    }
    if (v29) {
      operator delete(v29);
    }
    return (__n128 *)v20;
  }
  else if (v8 == (__n128 *)v5)
  {
    __n128 v19 = *a3;
    v8[1].n128_u64[0] = a3[1].n128_u64[0];
    *uint64_t v8 = v19;
    a1[1] = &v8[1].n128_i8[8];
  }
  else
  {
    double v10 = &v8[1].n128_u64[1];
    unint64_t v11 = v5 - 24;
    long long v12 = a1[1];
    if (v5 >= 0x18)
    {
      do
      {
        long long v13 = *(_OWORD *)v11;
        *((void *)v12 + 2) = *(void *)(v11 + 16);
        *(_OWORD *)long long v12 = v13;
        v12 += 24;
        v11 += 24;
      }
      while (v11 < v5);
    }
    a1[1] = v12;
    if ((unint64_t *)v5 != v10) {
      memmove(&v8[1].n128_i8[8], v8, v5 - (void)v10);
    }
    __n128 v14 = *a3;
    v8[1].n128_u64[0] = a3[1].n128_u64[0];
    *uint64_t v8 = v14;
  }
  return v8;
}

void sub_2EF950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    long long v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_2EF9AC(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    std::exception_ptr v6 = *(__n128 **)a1;
    unint64_t v5 = *(__n128 **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      unint64_t v15 = 0x5555555555555556 * (((char *)v4 - (char *)v6) >> 3);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0xAAAAAAAAAAAAAABLL) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 24 * v15;
      unint64_t v18 = (char *)operator new(24 * v15);
      __n128 v19 = (__n128 *)&v18[24 * v16];
      int64_t v21 = (char *)v4 - (char *)v5;
      BOOL v20 = v4 == v5;
      uint64_t v4 = v19;
      if (!v20)
      {
        uint64_t v22 = v21 / 24;
        uint64_t v4 = (__n128 *)((char *)v19 + 24 * v22);
        uint64_t v23 = 24 * v22;
        uint64_t v24 = &v18[24 * v16];
        do
        {
          __n128 v25 = *v5;
          *((void *)v24 + 2) = v5[1].n128_u64[0];
          *(__n128 *)uint64_t v24 = v25;
          v24 += 24;
          unint64_t v5 = (__n128 *)((char *)v5 + 24);
          v23 -= 24;
        }
        while (v23);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        uint64_t v4 = *(__n128 **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -24 * v9;
      long long v12 = (char *)v5 + v11;
      long long v13 = (char *)((char *)v4 - (char *)v5);
      if (v4 != v5)
      {
        memmove((char *)v5 + v11, *(const void **)(a1 + 8), (char *)v4 - (char *)v5);
        uint64_t v4 = *(__n128 **)(a1 + 8);
      }
      __n128 v14 = (char *)v4 + 24 * v10;
      uint64_t v4 = (__n128 *)&v13[(void)v12];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v13[(void)v12];
    }
  }
  __n128 result = *a2;
  v4[1].n128_u64[0] = a2[1].n128_u64[0];
  *uint64_t v4 = result;
  *(void *)(a1 + 16) += 24;
  return result;
}

void sub_2EFB34(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  uint64_t v4 = *(void *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
    *(void *)(a2 + 16) = *(void *)(a1 + 160);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 144) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
  }
}

void sub_2EFBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2EFC0C(uint64_t a1)
{
  *(void *)a1 = off_2438570;
  std::mutex::~mutex((std::mutex *)(a1 + 152));
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v4) {
    operator delete(v4);
  }
  std::exception_ptr v5 = *(void **)(a1 + 88);
  while (v5)
  {
    std::exception_ptr v6 = v5;
    std::exception_ptr v5 = (void *)*v5;
    std::exception_ptr v7 = (std::__shared_weak_count *)v6[4];
    if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    operator delete(v6);
  }
  uint64_t v8 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(void *)(a1 + 56) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 40);
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v11) {
      return a1;
    }
    goto LABEL_18;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11) {
LABEL_18:
  }
    std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_2EFD74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24387B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2EFD94(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24387B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t *sub_2EFDE8(uint64_t a1)
{
  return sub_2EFF4C((uint64_t *)(a1 + 24));
}

void sub_2EFDF4(uint64_t a1)
{
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_2EFE60(uint64_t a1)
{
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  operator delete();
}

uint64_t sub_2EFEE0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v2 = *(void **)(a1 + 144);
    if (v2)
    {
      *(void *)(a1 + 152) = v2;
      operator delete(v2);
    }
  }
  unint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 8);

  return v3(a1);
}

uint64_t *sub_2EFF4C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2) {
    return a1;
  }
  if ((*(unsigned char *)(v2 + 136) & 1) == 0)
  {
    v8.__ptr_ = 0;
    uint64_t v3 = *(void *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v8);
    uint64_t v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v9.__cat_ = std::future_category();
      *(void *)&v9.__val_ = 4;
      std::future_error::future_error(&v7, v9);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      std::exception_ptr v6 = std::logic_error::logic_error(exception, &v7);
      v6[1] = (std::logic_error)v7.__ec_;
    }
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  return a1;
}

void *sub_2F00A8(void *result)
{
  uint64_t v1 = result;
  *__n128 result = off_2438850;
  uint64_t v2 = (std::__shared_weak_count *)result[3];
  if (v2)
  {
    if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_2F0140(void *a1)
{
  *a1 = off_2438850;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

_DWORD *sub_2F01E8(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  *(void *)__n128 result = off_2438850;
  result[2] = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 2) = *(void *)(a1 + 16);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_2F024C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_2438850;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 16) = *(void *)(result + 16);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_2F028C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_2F0308(void *__p)
{
  uint64_t v1 = __p;
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    std::string __p = v1;
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  operator delete(__p);
}

void sub_2F03A4(uint64_t a1, uint64_t *a2, unsigned char *a3)
{
  if (*a3)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v11);
      sub_188FC78(&v11, (uint64_t)"An error occurred fetching the available keys from the offline data provider in get_quad_ids()", 94);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
      if (v15 < 0) {
        operator delete(v14);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    uint64_t v4 = *(uint64_t **)(a1 + 16);
    uint64_t v11 = 0;
    long long v12 = 0;
    uint64_t v13 = 0;
    uint64_t v5 = *v4;
    if (!*v4) {
      sub_2E184(3u);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    uint64_t v11 = 0;
    long long v12 = 0;
    uint64_t v13 = 0;
    int v8 = *(_DWORD *)(a1 + 8);
    __p[0] = &v11;
    while (v6 != v7)
    {
      if (v8 == sub_2D1548(v6))
      {
        int v16 = sub_2D1548(v6) >> 32;
        sub_737BC((uint64_t *)__p, &v16);
      }
      v6 += 32;
    }
    uint64_t v5 = **(void **)(a1 + 16);
    if (!v5) {
      sub_2E184(3u);
    }
  }
  sub_2F076C(v5, (uint64_t)&v11);
  if (v11)
  {
    long long v12 = v11;
    operator delete(v11);
  }
}

void sub_2F05C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void (__cdecl **a17)(std::stringbuf *__hidden this), uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

void sub_2F06CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2F06F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl4data26OfflineDataProviderStorage12get_quad_idsENS0_7LayerIdEE3$_0") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZNK3msl4data26OfflineDataProviderStorage12get_quad_idsENS0_7LayerIdEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl4data26OfflineDataProviderStorage12get_quad_idsENS0_7LayerIdEE3$_0")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl4data26OfflineDataProviderStorage12get_quad_idsENS0_7LayerIdEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_2F0760()
{
}

void sub_2F076C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, uint64_t v5 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    sub_2E184(2u);
  }
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(void *)(a1 + 160) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_2F0814(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_2F0828(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  uint64_t v4 = *(void *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    __break(1u);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 144);
    *(void *)(a2 + 16) = *(void *)(a1 + 160);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 144) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
  }
}

void sub_2F08D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(a1);
}

void sub_2F0900(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (a2 <= (a1[2] - *a1) >> 5) {
    return;
  }
  if (a2 >> 59) {
    sub_2E00();
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = 32 * a2;
  std::exception_ptr v6 = (char *)operator new(32 * a2);
  std::exception_ptr v7 = &v6[v5];
  int v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v9 = 0;
  do
  {
    char v10 = &v8[v9];
    uint64_t v11 = &v4[v9];
    *((_DWORD *)v10 - 8) = *(_DWORD *)&v4[v9 - 32];
    *(_OWORD *)(v10 - 24) = *(_OWORD *)&v4[v9 - 24];
    *((void *)v10 - 1) = *(void *)&v4[v9 - 8];
    *((void *)v11 - 3) = 0;
    *((void *)v11 - 2) = 0;
    *((void *)v11 - 1) = 0;
    v9 -= 32;
  }
  while (&v4[v9] != v2);
  long long v12 = *a1;
  uint64_t v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v12)
  {
    do
    {
      uint64_t v13 = (void *)*((void *)v2 - 3);
      if (v13)
      {
        *((void *)v2 - 2) = v13;
        operator delete(v13);
      }
      v2 -= 32;
    }
    while (v2 != v12);
    uint64_t v2 = v12;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

char *sub_2F0A1C(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 5;
  uint64_t v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFE0];
  unint64_t v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    unint64_t v22 = ((uint64_t)(v6 - (void)v5) >> 5) + 1;
    if (v22 >> 59) {
      sub_2E00();
    }
    uint64_t v23 = v10 - (void)v5;
    if (v23 >> 4 > v22) {
      unint64_t v22 = v23 >> 4;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v24 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    unint64_t v48 = a1 + 2;
    if (v24)
    {
      if (v24 >> 59) {
        sub_188D718();
      }
      __n128 v25 = (char *)operator new(32 * v24);
    }
    else
    {
      __n128 v25 = 0;
    }
    uint64_t v44 = v25;
    int v45 = &v25[32 * v8];
    unint64_t v46 = v45;
    unint64_t v47 = &v25[32 * v24];
    sub_2F0D9C((uint64_t)&v44, a3);
    unint64_t v30 = v45;
    long long v31 = *a1;
    uint64_t v32 = v45;
    if (*a1 != v9)
    {
      uint64_t v33 = 0;
      do
      {
        unsigned __int8 v34 = &v30[v33];
        std::string v35 = &v9[v33];
        *((_DWORD *)v34 - 8) = *(_DWORD *)&v9[v33 - 32];
        *((void *)v34 - 2) = 0;
        *((void *)v34 - 1) = 0;
        *((void *)v34 - 3) = 0;
        *(_OWORD *)(v34 - 24) = *(_OWORD *)&v9[v33 - 24];
        *((void *)v34 - 1) = *(void *)&v9[v33 - 8];
        *((void *)v35 - 3) = 0;
        *((void *)v35 - 2) = 0;
        *((void *)v35 - 1) = 0;
        v33 -= 32;
      }
      while (&v9[v33] != v31);
      uint64_t v32 = &v30[v33];
    }
    int v45 = v32;
    std::string v36 = a1[1];
    std::string v37 = v46;
    if (v36 != v9)
    {
      do
      {
        *(_DWORD *)std::string v37 = *(_DWORD *)v9;
        *((void *)v37 + 2) = 0;
        *((void *)v37 + 3) = 0;
        *((void *)v37 + 1) = 0;
        *(_OWORD *)(v37 + 8) = *(_OWORD *)(v9 + 8);
        *((void *)v37 + 3) = *((void *)v9 + 3);
        *((void *)v9 + 1) = 0;
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 3) = 0;
        v37 += 32;
        v9 += 32;
      }
      while (v9 != v36);
      uint64_t v32 = v45;
      uint64_t v9 = a1[1];
    }
    uint64_t v38 = *a1;
    *a1 = v32;
    a1[1] = v37;
    uint64_t v39 = a1[2];
    a1[2] = v47;
    unint64_t v46 = v9;
    unint64_t v47 = v39;
    uint64_t v44 = v38;
    int v45 = v38;
    if (v9 == v38)
    {
      if (!v9) {
        return v30;
      }
    }
    else
    {
      do
      {
        while (1)
        {
          std::string::size_type v41 = v9 - 32;
          unint64_t v46 = v9 - 32;
          uint64_t v42 = (void *)*((void *)v9 - 3);
          if (!v42) {
            break;
          }
          *((void *)v9 - 2) = v42;
          operator delete(v42);
          uint64_t v9 = v46;
          if (v46 == v38) {
            goto LABEL_39;
          }
        }
        v9 -= 32;
      }
      while (v41 != v38);
LABEL_39:
      uint64_t v9 = v44;
      if (!v44) {
        return v30;
      }
    }
    operator delete(v9);
    return v30;
  }
  if (v9 == (char *)v6)
  {
    *(_DWORD *)uint64_t v9 = *(_DWORD *)a3;
    long long v29 = &v5[32 * v8];
    *((void *)v29 + 2) = 0;
    *((void *)v29 + 3) = 0;
    *((void *)v29 + 1) = 0;
    *(_OWORD *)(v29 + 8) = *(_OWORD *)(a3 + 8);
    *((void *)v29 + 3) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    a1[1] = v9 + 32;
  }
  else
  {
    uint64_t v11 = v9 + 32;
    unint64_t v12 = v6 - 32;
    uint64_t v43 = v8;
    uint64_t v13 = a1[1];
    if (v6 >= 0x20)
    {
      do
      {
        *(_DWORD *)uint64_t v13 = *(_DWORD *)v12;
        *((void *)v13 + 2) = 0;
        *((void *)v13 + 3) = 0;
        *((void *)v13 + 1) = 0;
        *(_OWORD *)(v13 + 8) = *(_OWORD *)(v12 + 8);
        *((void *)v13 + 3) = *(void *)(v12 + 24);
        *(void *)(v12 + 8) = 0;
        *(void *)(v12 + 16) = 0;
        *(void *)(v12 + 24) = 0;
        v13 += 32;
        v12 += 32;
      }
      while (v12 < v6);
    }
    a1[1] = v13;
    if ((char *)v6 != v11)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 32 * ((uint64_t)(v6 - (void)v11) >> 5);
      int v16 = &v5[32 * v8 + v15];
      uint64_t v17 = -v15;
      do
      {
        unint64_t v18 = &v16[v14];
        uint64_t v19 = v6 + v14;
        int64_t v21 = (void **)(v6 + v14 - 24);
        BOOL v20 = *v21;
        *(_DWORD *)(v6 + v14 - 32) = *(_DWORD *)&v16[v14 - 32];
        if (v20)
        {
          *(void *)(v19 - 16) = v20;
          operator delete(v20);
          *int64_t v21 = 0;
          *(void *)(v6 + v14 - 16) = 0;
          *(void *)(v6 + v14 - 8) = 0;
        }
        *(_OWORD *)int64_t v21 = *(_OWORD *)(v18 - 24);
        *(void *)(v19 - 8) = *((void *)v18 - 1);
        *((void *)v18 - 3) = 0;
        *((void *)v18 - 2) = 0;
        *((void *)v18 - 1) = 0;
        v14 -= 32;
      }
      while (v17 != v14);
    }
    *(_DWORD *)uint64_t v9 = *(_DWORD *)a3;
    unint64_t v26 = &v5[32 * v43];
    int64_t v28 = v26 + 8;
    uint64_t v27 = (void *)*((void *)v26 + 1);
    if (v27)
    {
      *((void *)v26 + 2) = v27;
      operator delete(v27);
      *int64_t v28 = 0;
      *((void *)v26 + 2) = 0;
      *((void *)v26 + 3) = 0;
    }
    *(_OWORD *)int64_t v28 = *(_OWORD *)(a3 + 8);
    *((void *)v26 + 3) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
  }
  return v9;
}

void sub_2F0D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_38800((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_2F0D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4 == *(void **)(a1 + 24))
  {
    uint64_t v5 = *(unsigned char **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      unint64_t v15 = ((char *)v4 - v5) >> 4;
      if (v4 == (void *)v5) {
        unint64_t v15 = 1;
      }
      if (v15 >> 59) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 32 * v15;
      unint64_t v18 = (char *)operator new(32 * v15);
      uint64_t v19 = &v18[32 * v16];
      BOOL v20 = &v18[v17];
      if (v4 == (void *)v6)
      {
        *(void *)a1 = v18;
        *(void *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = v19;
        *(void *)(a1 + 24) = v20;
      }
      else
      {
        int64_t v21 = (char *)v4 + (void)v19 - v6;
        uint64_t v22 = 32 * v16;
        do
        {
          uint64_t v23 = &v18[v22];
          *(_DWORD *)uint64_t v23 = *(_DWORD *)v6;
          *(_OWORD *)(v23 + 8) = *(_OWORD *)(v6 + 8);
          *((void *)v23 + 3) = *(void *)(v6 + 24);
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
          v22 += 32;
          v6 += 32;
        }
        while (v23 + 32 != v21);
        uint64_t v5 = *(unsigned char **)a1;
        uint64_t v24 = *(void *)(a1 + 8);
        uint64_t v25 = *(void *)(a1 + 16);
        *(void *)a1 = v18;
        *(void *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v20;
        while (v25 != v24)
        {
          unint64_t v26 = *(void **)(v25 - 24);
          if (v26)
          {
            *(void *)(v25 - 16) = v26;
            operator delete(v26);
          }
          v25 -= 32;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(void **)(a1 + 16);
    }
    else
    {
      uint64_t v7 = (uint64_t)(v6 - *(void *)a1) >> 5;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      if ((void *)v6 == v4)
      {
        uint64_t v27 = (void *)(v6 - 32 * v9);
      }
      else
      {
        uint64_t v11 = -32 * v9;
        do
        {
          unint64_t v12 = v6 + v11;
          *(_DWORD *)(v6 + 32 * v10) = *(_DWORD *)v6;
          uint64_t v14 = (void **)(v6 + v11 + 8);
          uint64_t v13 = *v14;
          if (*v14)
          {
            *(void *)(v12 + 16) = v13;
            operator delete(v13);
            void *v14 = 0;
            *(void *)(v6 + v11 + 16) = 0;
            *(void *)(v6 + v11 + 24) = 0;
          }
          *(_OWORD *)uint64_t v14 = *(_OWORD *)(v6 + 8);
          *(void *)(v12 + 24) = *(void *)(v6 + 24);
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
          v6 += 32;
        }
        while ((void *)v6 != v4);
        uint64_t v4 = *(void **)(a1 + 8);
        uint64_t v27 = (void *)(v6 + 32 * v10);
      }
      *(void *)(a1 + 8) = &v4[4 * v10];
      *(void *)(a1 + 16) = v27;
      uint64_t v4 = v27;
    }
  }
  *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v4 + 1) = result;
  v4[3] = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 16) += 32;
  return result;
}

void sub_2F0F80()
{
  exception = __cxa_allocate_exception(8uLL);
}

uint64_t *sub_2F0FCC(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (v4 + (((v3 + 0x388152A534) ^ 0xDEADBEEFLL) << 6) + (((v3 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2) + 2654435769u) ^ (v3 + 0x388152A534) ^ 0xDEADBEEFLL;
  unint64_t v6 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v5 ^ (v5 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v5 ^ (v5 >> 33))) >> 33));
  unint64_t v7 = v6 ^ (v6 >> 33);
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v2);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = v7;
    if (v7 >= *(void *)&v2) {
      unint64_t v9 = v7 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v9 = v7 & (*(void *)&v2 - 1);
  }
  uint64_t v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  __n128 result = *v10;
  if (*v10)
  {
    if (v8.u32[0] < 2uLL)
    {
      uint64_t v12 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v16 = result[1];
        if (v7 == v16)
        {
          if (*((_DWORD *)result + 4) == v3 && *((_DWORD *)result + 5) == v4) {
            return result;
          }
        }
        else if ((v16 & v12) != v9)
        {
          return 0;
        }
        __n128 result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v14 = result[1];
      if (v7 == v14)
      {
        if (*((_DWORD *)result + 4) == v3 && *((_DWORD *)result + 5) == v4) {
          return result;
        }
      }
      else
      {
        if (v14 >= *(void *)&v2) {
          v14 %= *(void *)&v2;
        }
        if (v14 != v9) {
          return 0;
        }
      }
      __n128 result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_2F1118(void *a1)
{
  *a1 = off_24388E0;
  int8x8_t v2 = a1 + 6;
  uint64_t v3 = (void *)a1[9];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)a1[2];
    if (!v4) {
      return a1;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a1[2];
    if (!v4) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_2F1218(void *a1)
{
  *a1 = off_24388E0;
  int8x8_t v2 = a1 + 6;
  uint64_t v3 = (void *)a1[9];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)a1[2];
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a1[2];
    if (!v4)
    {
LABEL_9:
      operator delete();
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  goto LABEL_9;
}

char *sub_2F132C(uint64_t a1)
{
  int8x8_t v2 = (char *)operator new(0x50uLL);
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)int8x8_t v2 = off_24388E0;
  *((void *)v2 + 1) = v5;
  *((void *)v2 + 2) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 72);
  if (!v6) {
    goto LABEL_6;
  }
  if (v6 != a1 + 48)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
LABEL_6:
    *((void *)v3 + 9) = v6;
    return v3;
  }
  *((void *)v3 + 9) = v3 + 48;
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  return v3;
}

void sub_2F1418(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[2];
  if (v3) {
    sub_20A6F44(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2F1438(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)a2 = off_24388E0;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v5;
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6)
  {
    if (v6 == a1 + 48)
    {
      *(void *)(a2 + 72) = a2 + 48;
      return (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72));
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void))(*(void *)v6 + 16))(*(void *)(a1 + 72));
      *(void *)(a2 + 72) = result;
    }
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a2 + 72) = 0;
  }
  return result;
}

void sub_2F1524(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3) {
    sub_20A6F44(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2F153C(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v4) {
      return;
    }
    goto LABEL_7;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
LABEL_7:
    if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_2F1628(char *__p)
{
  uint64_t v2 = __p + 48;
  uint64_t v3 = (char *)*((void *)__p + 9);
  if (v3 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 2);
    if (!v4) {
      goto LABEL_5;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(char *))(*(void *)v3 + 40))(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)*((void *)__p + 2);
    if (!v4) {
      goto LABEL_5;
    }
  }
  if (atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_5:
    long long v5 = __p;
    goto LABEL_7;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  long long v5 = __p;

LABEL_7:
  operator delete(v5);
}

uint64_t sub_2F172C(uint64_t a1, uint64_t a2)
{
  double v4 = sub_72688(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  *(double *)(v5 + 2496) = v4 + *(double *)(v5 + 2496);
  uint64_t v6 = (std::mutex *)(v5 + 152);
  std::mutex::lock((std::mutex *)(v5 + 152));
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    unint64_t v16 = sub_2D1548((uint64_t)(i + 2));
    if (!sub_2F0FCC((void *)(*(void *)(a1 + 8) + 72), (unsigned int *)&v16))
    {
      uint64_t v8 = *(void *)(a1 + 8);
      *(double *)(v8 + 8 * v16 + 2136) = *(double *)(v8 + 8 * v16 + 2136) + 1.0;
      unint64_t v9 = (std::__shared_weak_count *)i[7];
      uint64_t v13 = i[6];
      unint64_t v14 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v15 = *((unsigned char *)i + 64);
      sub_2EE564(v8, (unsigned int *)&v16, (uint64_t)&v13);
      uint64_t v10 = v14;
      if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  std::mutex::unlock(v6);
  uint64_t v11 = *(void *)(a1 + 72);
  if (!v11) {
    sub_29F82C();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
}

void sub_2F1894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    sub_20A6EF8(a10);
    std::mutex::unlock(v10);
    _Unwind_Resume(a1);
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_2F18C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK3msl4data26OfflineDataProviderStorage24prefetch_quad_data_asyncERKNS_6common6VectorINS0_15Abstra"
                     "ctStorage14LayerAndQuadIdENSt3__19allocatorIS5_EEEENS6_8functionIFvvEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK3msl4data26OfflineDataProviderStorage24prefetch_quad_data_asyncERKNS_6common6VectorIN"
                                "S0_15AbstractStorage14LayerAndQuadIdENSt3__19allocatorIS5_EEEENS6_8functionIFvvEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK3msl4data26OfflineDataProviderStorage24prefetch_quad_data_asyncERKNS_6common6VectorINS0_15AbstractStorage14LayerAndQuadIdENSt3__19allocatorIS5_EEEENS6_8functionIFvvEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK3msl4data26OfflineDataProviderStorage24prefetch_quad_data_asyncERKNS_6common6VectorINS0_15AbstractStorage14LayerAndQuadIdENSt3__19allocatorIS5_EEEENS6_8functionIFvvEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_2F1938()
{
}

uint64_t *sub_2F1944(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (v4 + (((v3 + 0x388152A534) ^ 0xDEADBEEFLL) << 6) + (((v3 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2) + 2654435769u) ^ (v3 + 0x388152A534) ^ 0xDEADBEEFLL;
  unint64_t v6 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v5 ^ (v5 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v5 ^ (v5 >> 33))) >> 33));
  unint64_t v7 = v6 ^ (v6 >> 33);
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v2);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = v7;
    if (v7 >= *(void *)&v2) {
      unint64_t v9 = v7 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v9 = v7 & (*(void *)&v2 - 1);
  }
  uint64_t v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t result = *v10;
  if (*v10)
  {
    if (v8.u32[0] < 2uLL)
    {
      uint64_t v12 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v16 = result[1];
        if (v16 == v7)
        {
          if (*((_DWORD *)result + 4) == v3 && *((_DWORD *)result + 5) == v4) {
            return result;
          }
        }
        else if ((v16 & v12) != v9)
        {
          return 0;
        }
        uint64_t result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v14 = result[1];
      if (v14 == v7)
      {
        if (*((_DWORD *)result + 4) == v3 && *((_DWORD *)result + 5) == v4) {
          return result;
        }
      }
      else
      {
        if (v14 >= *(void *)&v2) {
          v14 %= *(void *)&v2;
        }
        if (v14 != v9) {
          return 0;
        }
      }
      uint64_t result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void sub_2F1A90(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2F1AB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438970;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

char *sub_2F1B0C(uint64_t a1, unsigned int *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  unint64_t v10 = (v9
       + (((v8 + 0x388152A534) ^ 0xDEADBEEFLL) << 6)
       + (((v8 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2)
       + 2654435769u) ^ (v8 + 0x388152A534) ^ 0xDEADBEEFLL;
  unint64_t v11 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v10 ^ (v10 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v10 ^ (v10 >> 33))) >> 33));
  unint64_t v12 = v11 ^ (v11 >> 33);
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11 ^ (v11 >> 33);
      if (v12 >= v13) {
        unint64_t v4 = v12 % v13;
      }
    }
    else
    {
      unint64_t v4 = v12 & (v13 - 1);
    }
    char v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = (char *)*v15;
      if (*v15)
      {
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v19 = *((void *)v16 + 1);
            if (v19 == v12)
            {
              if (*((_DWORD *)v16 + 4) == v8 && *((_DWORD *)v16 + 5) == v9) {
                return v16;
              }
            }
            else if ((v19 & (v13 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v16 = *(char **)v16;
            if (!v16) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v17 = *((void *)v16 + 1);
          if (v17 == v12)
          {
            if (*((_DWORD *)v16 + 4) == v8 && *((_DWORD *)v16 + 5) == v9) {
              return v16;
            }
          }
          else
          {
            if (v17 >= v13) {
              v17 %= v13;
            }
            if (v17 != v4) {
              break;
            }
          }
          uint64_t v16 = *(char **)v16;
        }
        while (v16);
      }
    }
  }
LABEL_31:
  int64_t v21 = (void *)(a1 + 16);
  uint64_t v16 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v12;
  *((void *)v16 + 2) = *a3;
  *(_OWORD *)(v16 + 24) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (v13 && (float)(v23 * (float)v13) >= v22)
  {
    uint64_t v24 = *(void *)a1;
    uint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
    if (v25)
    {
LABEL_34:
      *(void *)uint64_t v16 = *v25;
LABEL_69:
      *uint64_t v25 = v16;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v26 = 1;
    if (v13 >= 3) {
      BOOL v26 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v13);
    unint64_t v28 = vcvtps_u32_f32(v22 / v23);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v30) {
      goto LABEL_45;
    }
    if (prime < *(void *)&v30)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v30 < 3uLL || (uint8x8_t v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime < *(void *)&v30) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v34 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        uint64_t v24 = *(void *)a1;
        uint64_t v25 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        if (v25) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v12;
        uint64_t v24 = *(void *)a1;
        uint64_t v25 = *(void **)(*(void *)a1 + 8 * v12);
        if (v25) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v34 & v12;
      uint64_t v24 = *(void *)a1;
      uint64_t v25 = *(void **)(*(void *)a1 + 8 * (v34 & v12));
      if (v25) {
        goto LABEL_34;
      }
    }
  }
  *(void *)uint64_t v16 = *v21;
  *int64_t v21 = v16;
  *(void *)(v24 + 8 * v4) = v21;
  if (*(void *)v16)
  {
    unint64_t v35 = *(void *)(*(void *)v16 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v35 >= v13) {
        v35 %= v13;
      }
    }
    else
    {
      v35 &= v13 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_2F1EA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2F1EB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2F1EB8(uint64_t a1)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (std::__shared_weak_count *)v2[4];
      if (v3)
      {
        if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
    }
    operator delete(v2);
  }
  return a1;
}

void *sub_2F1F48(uint64_t a1, unsigned int *a2, void *a3, unsigned char *a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  unint64_t v10 = (v9
       + (((v8 + 0x388152A534) ^ 0xDEADBEEFLL) << 6)
       + (((v8 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2)
       + 2654435769u) ^ (v8 + 0x388152A534) ^ 0xDEADBEEFLL;
  unint64_t v11 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v10 ^ (v10 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v10 ^ (v10 >> 33))) >> 33));
  unint64_t v12 = v11 ^ (v11 >> 33);
  unint64_t v13 = *(void *)(a1 + 8);
  if (v13)
  {
    uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v4 = v11 ^ (v11 >> 33);
      if (v12 >= v13) {
        unint64_t v4 = v12 % v13;
      }
    }
    else
    {
      unint64_t v4 = v12 & (v13 - 1);
    }
    char v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = *v15;
      if (*v15)
      {
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v19 = v16[1];
            if (v19 == v12)
            {
              if (*((_DWORD *)v16 + 4) == v8 && *((_DWORD *)v16 + 5) == v9) {
                return v16;
              }
            }
            else if ((v19 & (v13 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v16 = (void *)*v16;
            if (!v16) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v17 = v16[1];
          if (v17 == v12)
          {
            if (*((_DWORD *)v16 + 4) == v8 && *((_DWORD *)v16 + 5) == v9) {
              return v16;
            }
          }
          else
          {
            if (v17 >= v13) {
              v17 %= v13;
            }
            if (v17 != v4) {
              break;
            }
          }
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_31:
  uint64_t v16 = operator new(0x20uLL);
  void *v16 = 0;
  v16[1] = v12;
  _DWORD v16[2] = *a3;
  *((unsigned char *)v16 + 24) = *a4;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v13 && (float)(v22 * (float)v13) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      void *v16 = *v24;
LABEL_69:
      *uint64_t v24 = v16;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v13 >= 3) {
      BOOL v25 = (v13 & (v13 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v13);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v13 = *(void *)(a1 + 8);
    }
    if (prime > v13) {
      goto LABEL_45;
    }
    if (prime < v13)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v13 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v13), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v13) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v13 = *(void *)(a1 + 8);
    unint64_t v32 = v13 - 1;
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13)
      {
        unint64_t v4 = v12 % v13;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v12 % v13));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v12;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * v12);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v12;
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v32 & v12));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  void *v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v16)
  {
    unint64_t v33 = *(void *)(*v16 + 8);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v33 >= v13) {
        v33 %= v13;
      }
    }
    else
    {
      v33 &= v13 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_2F22C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2F22DC(uint64_t result)
{
  return result;
}

void *sub_2F22FC(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v5 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    unint64_t v6 = (char *)operator new(v5);
    *a1 = v6;
    a1[1] = v6;
    unint64_t v7 = &v6[8 * (v5 >> 3)];
    a1[2] = v7;
    memcpy(v6, v4, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_2F2394(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2F23B0()
{
  HIBYTE(word_25570C6) = 22;
}

double sub_2F23DC(double *a1)
{
  int v2 = 0;
  return (double)(int)sub_2F2408(a1, &v2);
}

uint64_t sub_2F2408(double *a1, int *a2)
{
  uint64_t v2 = *a2;
  double v3 = a1[25]
     + (double)(int)(a1[24]
                   + (double)(int)(a1[23]
                                 + (double)(int)(a1[22]
                                               + (double)(int)(a1[21]
                                                             + (double)(int)(a1[20]
                                                                           + (double)(int)(a1[19]
                                                                                         + (double)(int)(a1[18] + (double)(int)(a1[17] + (double)(int)(a1[16] + (double)(int)(a1[15] + (double)(int)(a1[14] + (double)(int)(a1[13] + (double)(int)(a1[12] + (double)(int)(a1[11] + (double)(int)(a1[10] + (double)(int)(a1[9] + (double)(int)(a1[8] + (double)(int)(a1[7] + (double)(int)(a1[6] + (double)(int)(a1[5] + (double)(int)(a1[4] + (double)(int)(a1[3] + (double)(int)(a1[2] + (double)(int)(a1[1] + (double)(int)(*a1 + (double)v2)))))))))))))))))))))))));
  return (int)(a1[39]
                           + (double)(int)(a1[38]
                                         + (double)(int)(a1[37]
                                                       + (double)(int)(a1[36]
                                                                     + (double)(int)(a1[35]
                                                                                   + (double)(int)(a1[34]
                                                                                                 + (double)(int)(a1[33] + (double)(int)(a1[32] + (double)(int)(a1[31] + (double)(int)(a1[30] + (double)(int)(a1[29] + (double)(int)(a1[28] + (double)(int)(a1[27] + (double)(int)(a1[26] + (double)(int)v3))))))))))))));
}

double sub_2F2644(uint64_t a1)
{
  int v2 = 0;
  return (double)(int)sub_2F2408((double *)(a1 + 320), &v2);
}

double sub_2F2674(double *a1)
{
  return a1[120]
       + 0.0
       + a1[121]
       + a1[122]
       + a1[123]
       + a1[124]
       + a1[125]
       + a1[126]
       + a1[127]
       + a1[128]
       + a1[129]
       + a1[130]
       + a1[131]
       + a1[132]
       + a1[133]
       + a1[134]
       + a1[135]
       + a1[136]
       + a1[137]
       + a1[138]
       + a1[139]
       + a1[140]
       + a1[141]
       + a1[142]
       + a1[143]
       + a1[144]
       + a1[145]
       + a1[146]
       + a1[147]
       + a1[148]
       + a1[149]
       + a1[150]
       + a1[151]
       + a1[152]
       + a1[153]
       + a1[154]
       + a1[155]
       + a1[156]
       + a1[157]
       + a1[158]
       + a1[159];
}

double sub_2F27BC(double *a1)
{
  return a1[160]
       + 0.0
       + a1[161]
       + a1[162]
       + a1[163]
       + a1[164]
       + a1[165]
       + a1[166]
       + a1[167]
       + a1[168]
       + a1[169]
       + a1[170]
       + a1[171]
       + a1[172]
       + a1[173]
       + a1[174]
       + a1[175]
       + a1[176]
       + a1[177]
       + a1[178]
       + a1[179]
       + a1[180]
       + a1[181]
       + a1[182]
       + a1[183]
       + a1[184]
       + a1[185]
       + a1[186]
       + a1[187]
       + a1[188]
       + a1[189]
       + a1[190]
       + a1[191]
       + a1[192]
       + a1[193]
       + a1[194]
       + a1[195]
       + a1[196]
       + a1[197]
       + a1[198]
       + a1[199];
}

BOOL sub_2F2904(char **a1, int a2, unint64_t **a3)
{
  int64_t v5 = &a1[1][(void)*a1];
  unint64_t v54 = *a1;
  unint64_t v55 = v5;
  uint64_t v56 = 0x2C700000000;
  long long v53 = 0uLL;
  if (!sub_2F333C((uint64_t)&v54)) {
    goto LABEL_88;
  }
  int v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  do
  {
    if (v56 == 2)
    {
      int v6 = sub_2F39B0(&v54, v55);
      switch(v6)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          break;
        default:
          int v6 = 0;
          break;
      }
    }
    else if (v56 == 1)
    {
      uint64_t v8 = sub_2F3488(&v54);
      uint64_t v7 = v9;
    }
    else
    {
      sub_2F3548((uint64_t)&v54);
    }
  }
  while (sub_2F333C((uint64_t)&v54));
  if (!v8)
  {
LABEL_88:
    BOOL result = sub_723EC(3u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v59);
    sub_188FC78(v59, (uint64_t)"Encountered a TrafficColor that does not reference any segments.", 64);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
LABEL_90:
    if (v58 < 0) {
      operator delete(__p[0]);
    }
    if (v61 < 0) {
      operator delete(v60);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  if (!v6)
  {
    BOOL result = sub_723EC(3u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v59);
    sub_188FC78(v59, (uint64_t)"Encountered a TrafficColor with unknwon color.", 46);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    goto LABEL_90;
  }
  int v45 = *a3;
  unint64_t v46 = a3[1];
  unint64_t v50 = (float *)v8;
  uint64_t v51 = (float *)&v8[v7];
  uint64_t v52 = 0x2C700000000;
  if (sub_2F333C((uint64_t)&v50))
  {
    uint64_t v10 = 0;
    uint64_t v49 = 0;
    while (1)
    {
      if (v52 == 4)
      {
        float v17 = *v50++;
        if (v50 > v51)
        {
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(v59, "Skipping over bytes exceeded message length.");
          uint64_t v44 = (void *)sub_2F404((uint64_t)exception, v59);
        }
        if (v17 < 0.0)
        {
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)v59);
            sub_188FC78(v59, (uint64_t)"Encountered a TrafficColor with a negative end offset (", 55);
            unint64_t v18 = (void *)std::ostream::operator<<();
            sub_188FC78(v18, (uint64_t)").", 2);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 1u);
            goto LABEL_29;
          }
          goto LABEL_15;
        }
        double v28 = v17 * 100.0;
        if (v28 >= 0.0)
        {
          double v29 = v17 * 100.0;
          if (v28 < 4.50359963e15)
          {
            uint64_t v30 = (uint64_t)(v28 + v28) + 1;
            goto LABEL_65;
          }
        }
        else
        {
          double v29 = v17 * 100.0;
          if (v28 > -4.50359963e15)
          {
            uint64_t v30 = (uint64_t)(v28 + v28);
            if (v30 >= 1) {
              --v30;
            }
LABEL_65:
            double v29 = (double)(v30 >> 1);
          }
        }
        if (v29 < 9.22337204e18)
        {
          if (v28 >= 0.0)
          {
            if (v28 < 4.50359963e15)
            {
              uint64_t v32 = (uint64_t)(v28 + v28) + 1;
              goto LABEL_86;
            }
          }
          else if (v28 > -4.50359963e15)
          {
            uint64_t v32 = (uint64_t)(v28 + v28);
            if (v32 >= 1) {
              --v32;
            }
LABEL_86:
            double v28 = (double)(v32 >> 1);
          }
          uint64_t v49 = (uint64_t)v28;
          goto LABEL_15;
        }
        uint64_t v49 = 0x7FFFFFFFFFFFFFFELL;
        goto LABEL_15;
      }
      if (v52 != 3)
      {
        if (v52 == 2)
        {
          unint64_t v11 = sub_2F3E7C((char **)&v50, (char *)v51);
          unint64_t v12 = v11;
          uint8x8_t v14 = a3[1];
          unint64_t v13 = (unint64_t)a3[2];
          if ((unint64_t)v14 >= v13)
          {
            uint64_t v19 = *a3;
            uint64_t v20 = ((char *)v14 - (char *)*a3) >> 5;
            unint64_t v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 59) {
              sub_2E00();
            }
            uint64_t v22 = v13 - (void)v19;
            if (v22 >> 4 > v21) {
              unint64_t v21 = v22 >> 4;
            }
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v23 = v21;
            }
            if (v23)
            {
              if (v23 >> 59) {
                sub_188D718();
              }
              uint64_t v24 = (char *)operator new(32 * v23);
            }
            else
            {
              uint64_t v24 = 0;
            }
            unint64_t v33 = &v24[32 * v20];
            *(void *)unint64_t v33 = v12;
            *((_DWORD *)v33 + 2) = a2;
            *((_DWORD *)v33 + 3) = v6;
            *((_OWORD *)v33 + 1) = v53;
            unint64_t v34 = v33;
            if (v14 != v19)
            {
              do
              {
                long long v35 = *((_OWORD *)v14 - 1);
                *((_OWORD *)v34 - 2) = *((_OWORD *)v14 - 2);
                *((_OWORD *)v34 - 1) = v35;
                v34 -= 32;
                v14 -= 4;
              }
              while (v14 != v19);
              uint8x8_t v14 = *a3;
            }
            std::string v36 = &v24[32 * v23];
            std::string v37 = v33 + 32;
            *a3 = (unint64_t *)v34;
            a3[1] = (unint64_t *)(v33 + 32);
            a3[2] = (unint64_t *)v36;
            if (v14) {
              operator delete(v14);
            }
            a3[1] = (unint64_t *)v37;
          }
          else
          {
            unint64_t *v14 = v11;
            *((_DWORD *)v14 + 2) = a2;
            *((_DWORD *)v14 + 3) = v6;
            *((_OWORD *)v14 + 1) = v53;
            a3[1] = v14 + 4;
          }
        }
        else
        {
          sub_2F3548((uint64_t)&v50);
        }
        goto LABEL_15;
      }
      float v15 = *v50++;
      if (v50 > v51)
      {
        std::string::size_type v41 = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(v59, "Skipping over bytes exceeded message length.");
        uint64_t v42 = (void *)sub_2F404((uint64_t)v41, v59);
      }
      if (v15 < 0.0)
      {
        if (sub_723EC(1u))
        {
          sub_6BAC((uint64_t)v59);
          sub_188FC78(v59, (uint64_t)"Encountered a TrafficColor with a negative start offset (", 57);
          uint64_t v16 = (void *)std::ostream::operator<<();
          sub_188FC78(v16, (uint64_t)").", 2);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
LABEL_29:
          if (v58 < 0) {
            operator delete(__p[0]);
          }
          *(void *)&v59[0] = v47;
          *(void *)((char *)v59 + *(void *)(v47 - 24)) = v48;
          if (v61 < 0) {
            operator delete(v60);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
          goto LABEL_15;
        }
        goto LABEL_15;
      }
      double v25 = v15 * 100.0;
      if (v25 >= 0.0)
      {
        double v26 = v15 * 100.0;
        if (v25 < 4.50359963e15)
        {
          uint64_t v27 = (uint64_t)(v25 + v25) + 1;
LABEL_55:
          double v26 = (double)(v27 >> 1);
        }
      }
      else
      {
        double v26 = v15 * 100.0;
        if (v25 > -4.50359963e15)
        {
          uint64_t v27 = (uint64_t)(v25 + v25);
          if (v27 >= 1) {
            --v27;
          }
          goto LABEL_55;
        }
      }
      if (v26 < 9.22337204e18)
      {
        if (v25 >= 0.0)
        {
          if (v25 < 4.50359963e15)
          {
            uint64_t v31 = (uint64_t)(v25 + v25) + 1;
            goto LABEL_82;
          }
        }
        else if (v25 > -4.50359963e15)
        {
          uint64_t v31 = (uint64_t)(v25 + v25);
          if (v31 >= 1) {
            --v31;
          }
LABEL_82:
          double v25 = (double)(v31 >> 1);
        }
        uint64_t v10 = (uint64_t)v25;
        goto LABEL_15;
      }
      uint64_t v10 = 0x7FFFFFFFFFFFFFFELL;
LABEL_15:
      if (!sub_2F333C((uint64_t)&v50)) {
        goto LABEL_99;
      }
    }
  }
  uint64_t v49 = 0;
  uint64_t v10 = 0;
LABEL_99:
  unint64_t v39 = ((char *)v46 - (char *)v45) >> 5;
  uint64_t v40 = (char *)a3[1] - (char *)*a3;
  BOOL result = v39 < v40 >> 5;
  if (v39 < v40 >> 5)
  {
    (*a3)[4 * v39 + 2] = v10;
    *(a3[1] - 1) = v49;
  }
  return result;
}

void sub_2F3170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a29 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a30);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_2F320C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2F3244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void (__cdecl **a28)(std::stringbuf *__hidden this),uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  a27 = a12;
  *(uint64_t *)((char *)&a27 + *(void *)(a12 - 24)) = a13;
  if (a41 < 0) {
    operator delete(a36);
  }
  std::streambuf::~streambuf(v41);
  std::ios::~ios(a14);
  _Unwind_Resume(a1);
}

BOOL sub_2F333C(uint64_t a1)
{
  int v2 = *(char **)a1;
  unint64_t v1 = *(void *)(a1 + 8);
  if (*(void *)a1 < v1)
  {
    unsigned int v4 = sub_2F36C8((char **)a1, *(char **)(a1 + 8));
    *(_DWORD *)(a1 + 16) = v4 >> 3;
    if (v4 < 8 || (v4 - 152000) >> 6 <= 0x7C)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v11, "Parsed invalid tag.");
      uint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v11);
    }
    *(_DWORD *)(a1 + 20) = v4 & 7;
    if ((v4 & 7) >= 3 && (v4 & 7) != 5)
    {
      uint64_t v9 = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v11, "Unknown wire type.");
      uint64_t v10 = (void *)sub_2F404((uint64_t)v9, &v11);
    }
  }
  return (unint64_t)v2 < v1;
}

void sub_2F3450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2F3488(char **a1)
{
  uint64_t v2 = sub_2F36C8(a1, a1[1]);
  BOOL result = *a1;
  unsigned int v4 = a1[1];
  int64_t v5 = &(*a1)[v2];
  *a1 = v5;
  if (v5 > v4)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v8, "Sub-message length of field exceeded past the end of the message.");
    uint64_t v7 = (void *)sub_2F404((uint64_t)exception, &v8);
  }
  return result;
}

void sub_2F3518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_2F3548(uint64_t a1)
{
  uint64_t v1 = a1;
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
      uint64_t v2 = *(void *)(a1 + 8);
      return (unint64_t *)sub_2F3C98((uint64_t *)a1, v2);
    case 1:
      unsigned int v4 = 8;
      return sub_2F3DCC((unint64_t *)a1, v4);
    case 2:
      unsigned int v4 = sub_2F36C8((char **)a1, *(char **)(a1 + 8));
      a1 = v1;
      return sub_2F3DCC((unint64_t *)a1, v4);
    case 5:
      unsigned int v4 = 4;
      return sub_2F3DCC((unint64_t *)a1, v4);
    default:
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v7, "Unknown wire type.");
      int v6 = (void *)sub_2F404((uint64_t)exception, &v7);
  }
}

void sub_2F3680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2F36C8(char **a1, char *a2)
{
  uint64_t v2 = *a1;
  if (*a1 == a2)
  {
    if (a2 - v2 <= 9)
    {
LABEL_14:
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v19, "Buffer overflow.");
      uint8x8_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
    }
  }
  else
  {
    int v3 = *v2;
    if ((v3 & 0x80000000) == 0)
    {
      *a1 = v2 + 1;
      return v3;
    }
    if (a2 - v2 <= 9)
    {
      char v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = *a1;
      while (1)
      {
        int v11 = *v10++;
        uint64_t v12 = v11;
        if ((v11 & 0x80000000) == 0) {
          break;
        }
        v9 |= (unint64_t)(v12 & 0x7F) << v8;
        v8 += 7;
        uint64_t v2 = v10;
        if (v10 == a2) {
          goto LABEL_14;
        }
      }
      *a1 = v2 + 1;
      return (v12 << v8) | v9;
    }
  }
  int64_t v5 = v2 + 1;
  unint64_t v6 = *v2 & 0x7F;
  if ((*v2 & 0x80) == 0)
  {
LABEL_8:
    *a1 = v5;
    return v6;
  }
  unint64_t v7 = *v2 & 0x7F | ((unint64_t)(v2[1] & 0x7F) << 7);
  if (v2[1] < 0)
  {
    unint64_t v15 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14);
    if (v2[2] < 0)
    {
      unint64_t v16 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v2[3] & 0x7F) << 21);
      if (v2[3] < 0)
      {
        unint64_t v6 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0xFFFFFFF8001FFFFFLL | ((v2[3] & 0x7F) << 21) & 0xFFFFFFF | ((unint64_t)(v2[4] & 0x7F) << 28);
        if (v2[4] < 0)
        {
          if (v2[5] < 0)
          {
            if (v2[6] < 0)
            {
              if (v2[7] < 0)
              {
                int64_t v5 = v2 + 9;
                if ((v2[8] & 0x80000000) == 0) {
                  goto LABEL_8;
                }
                if (*v5 < 0)
                {
                  float v17 = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(&v19, "VarInt longer than expected.");
                  unint64_t v18 = (void *)sub_2F404((uint64_t)v17, &v19);
                }
                *a1 = v2 + 10;
                return v6;
              }
              else
              {
                *a1 = v2 + 8;
                return v6;
              }
            }
            else
            {
              *a1 = v2 + 7;
              return v6;
            }
          }
          else
          {
            *a1 = v2 + 6;
            return v6;
          }
        }
        else
        {
          *a1 = v2 + 5;
          return v6;
        }
      }
      else
      {
        *a1 = v2 + 4;
        return v16;
      }
    }
    else
    {
      *a1 = v2 + 3;
      return v15;
    }
  }
  else
  {
    *a1 = v2 + 2;
    return v7;
  }
}

void sub_2F3978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2F39B0(char **a1, char *a2)
{
  uint64_t v2 = *a1;
  if (*a1 == a2)
  {
    if (a2 - v2 <= 9)
    {
LABEL_14:
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v19, "Buffer overflow.");
      uint8x8_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
    }
  }
  else
  {
    int v3 = *v2;
    if ((v3 & 0x80000000) == 0)
    {
      *a1 = v2 + 1;
      return v3;
    }
    if (a2 - v2 <= 9)
    {
      char v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = *a1;
      while (1)
      {
        int v11 = *v10++;
        uint64_t v12 = v11;
        if ((v11 & 0x80000000) == 0) {
          break;
        }
        v9 |= (unint64_t)(v12 & 0x7F) << v8;
        v8 += 7;
        uint64_t v2 = v10;
        if (v10 == a2) {
          goto LABEL_14;
        }
      }
      *a1 = v2 + 1;
      return (v12 << v8) | v9;
    }
  }
  int64_t v5 = v2 + 1;
  unint64_t v6 = *v2 & 0x7F;
  if ((*v2 & 0x80) == 0)
  {
LABEL_8:
    *a1 = v5;
    return v6;
  }
  unint64_t v7 = *v2 & 0x7F | ((unint64_t)(v2[1] & 0x7F) << 7);
  if (v2[1] < 0)
  {
    unint64_t v15 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14);
    if (v2[2] < 0)
    {
      unint64_t v16 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v2[3] & 0x7F) << 21);
      if (v2[3] < 0)
      {
        unint64_t v6 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0xFFFFFFF8001FFFFFLL | ((v2[3] & 0x7F) << 21) & 0xFFFFFFF | ((unint64_t)(v2[4] & 0x7F) << 28);
        if (v2[4] < 0)
        {
          if (v2[5] < 0)
          {
            if (v2[6] < 0)
            {
              if (v2[7] < 0)
              {
                int64_t v5 = v2 + 9;
                if ((v2[8] & 0x80000000) == 0) {
                  goto LABEL_8;
                }
                if (*v5 < 0)
                {
                  float v17 = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(&v19, "VarInt longer than expected.");
                  unint64_t v18 = (void *)sub_2F404((uint64_t)v17, &v19);
                }
                *a1 = v2 + 10;
                return v6;
              }
              else
              {
                *a1 = v2 + 8;
                return v6;
              }
            }
            else
            {
              *a1 = v2 + 7;
              return v6;
            }
          }
          else
          {
            *a1 = v2 + 6;
            return v6;
          }
        }
        else
        {
          *a1 = v2 + 5;
          return v6;
        }
      }
      else
      {
        *a1 = v2 + 4;
        return v16;
      }
    }
    else
    {
      *a1 = v2 + 3;
      return v15;
    }
  }
  else
  {
    *a1 = v2 + 2;
    return v7;
  }
}

void sub_2F3C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2F3C98(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result == a2)
  {
LABEL_5:
    if (a2 - v2 <= 9)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v8, "Buffer overflow.");
      unint64_t v7 = (void *)sub_2F404((uint64_t)exception, &v8);
    }
    goto LABEL_6;
  }
  uint64_t v3 = 0;
  while (*(char *)(v2 + v3) < 0)
  {
    ++v3;
    if (v2 + v3 == a2) {
      goto LABEL_5;
    }
  }
  if (v3 >= 10)
  {
LABEL_6:
    unsigned int v4 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v8, "VarInt longer than expected.");
    int64_t v5 = (void *)sub_2F404((uint64_t)v4, &v8);
  }
  *BOOL result = v2 + v3 + 1;
  return result;
}

void sub_2F3D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_2F3DCC(unint64_t *result, unsigned int a2)
{
  unint64_t v2 = result[1];
  unint64_t v3 = *result + a2;
  *BOOL result = v3;
  if (v3 > v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v6, "Skipping over bytes exceeded message length.");
    int64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return result;
}

void sub_2F3E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2F3E7C(char **a1, char *a2)
{
  unint64_t v2 = *a1;
  if (*a1 == a2)
  {
    if (a2 - v2 <= 9)
    {
LABEL_7:
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v24, "Buffer overflow.");
      uint64_t v10 = (void *)sub_2F404((uint64_t)exception, &v24);
    }
  }
  else
  {
    uint64_t v3 = *v2;
    if ((v3 & 0x80) == 0)
    {
LABEL_14:
      *a1 = v2 + 1;
      return v3;
    }
    if (a2 - v2 <= 9)
    {
      char v4 = 0;
      uint64_t v5 = 0;
      long long v6 = *a1;
      while (1)
      {
        int v7 = *v6++;
        uint64_t v8 = v7;
        if ((v7 & 0x80000000) == 0) {
          break;
        }
        v5 |= (unint64_t)(v8 & 0x7F) << v4;
        v4 += 7;
        unint64_t v2 = v6;
        if (v6 == a2) {
          goto LABEL_7;
        }
      }
      uint64_t v3 = (v8 << v4) | v5;
      goto LABEL_14;
    }
  }
  int v11 = v2 + 1;
  unint64_t v12 = *v2 & 0x7F;
  if ((*v2 & 0x80) == 0)
  {
LABEL_10:
    *a1 = v11;
    return v12;
  }
  unint64_t v14 = *v2 & 0x7F | ((unint64_t)(v2[1] & 0x7F) << 7);
  if ((v2[1] & 0x80000000) == 0)
  {
    *a1 = v2 + 2;
    return v14;
  }
  unint64_t v15 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14);
  if (v2[2] < 0)
  {
    unint64_t v16 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v2[3] & 0x7F) << 21);
    if (v2[3] < 0)
    {
      unint64_t v17 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0xFFFFFFF8001FFFFFLL | ((v2[3] & 0x7F) << 21) & 0xFFFFFFF | ((unint64_t)(v2[4] & 0x7F) << 28);
      if (v2[4] < 0)
      {
        unint64_t v18 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0xFFFFFC00001FFFFFLL | ((v2[3] & 0x7F) << 21) & 0xFFFFFFF | ((unint64_t)(v2[4] & 0x7F) << 28) & 0xFFFFFC07FFFFFFFFLL | ((unint64_t)(v2[5] & 0x7F) << 35);
        if (v2[5] < 0)
        {
          unint64_t v19 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0xFFFE0000001FFFFFLL | ((v2[3] & 0x7F) << 21) & 0xFFFFFFF | ((unint64_t)(v2[4] & 0x7F) << 28) & 0xFFFE0007FFFFFFFFLL | ((unint64_t)(v2[5] & 0x7F) << 35) & 0xFFFE03FFFFFFFFFFLL | ((unint64_t)(v2[6] & 0x7F) << 42);
          if (v2[6] < 0)
          {
            unint64_t v20 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0xFF000000001FFFFFLL | ((v2[3] & 0x7F) << 21) & 0xFFFFFFF | ((unint64_t)(v2[4] & 0x7F) << 28) & 0xFF000007FFFFFFFFLL | ((unint64_t)(v2[5] & 0x7F) << 35) & 0xFF0003FFFFFFFFFFLL | ((unint64_t)(v2[6] & 0x7F) << 42) & 0xFF01FFFFFFFFFFFFLL | ((unint64_t)(v2[7] & 0x7F) << 49);
            if (v2[7] < 0)
            {
              int v11 = v2 + 9;
              unint64_t v12 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0x80000000001FFFFFLL | ((v2[3] & 0x7F) << 21) & 0xFFFFFFF | ((unint64_t)(v2[4] & 0x7F) << 28) & 0x80000007FFFFFFFFLL | ((unint64_t)(v2[5] & 0x7F) << 35) & 0x800003FFFFFFFFFFLL | ((unint64_t)(v2[6] & 0x7F) << 42) & 0x8001FFFFFFFFFFFFLL | ((unint64_t)(v2[7] & 0x7F) << 49) & 0x80FFFFFFFFFFFFFFLL | ((unint64_t)(v2[8] & 0x7F) << 56);
              if ((v2[8] & 0x80) == 0) {
                goto LABEL_10;
              }
              int v21 = *v11;
              if (v21 < 0)
              {
                uint64_t v22 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(&v24, "VarInt longer than expected.");
                unint64_t v23 = (void *)sub_2F404((uint64_t)v22, &v24);
              }
              *a1 = v2 + 10;
              return v12 | ((unint64_t)v21 << 63);
            }
            else
            {
              *a1 = v2 + 8;
              return v20;
            }
          }
          else
          {
            *a1 = v2 + 7;
            return v19;
          }
        }
        else
        {
          *a1 = v2 + 6;
          return v18;
        }
      }
      else
      {
        *a1 = v2 + 5;
        return v17;
      }
    }
    else
    {
      *a1 = v2 + 4;
      return v16;
    }
  }
  else
  {
    *a1 = v2 + 3;
    return v15;
  }
}

void sub_2F4120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2F4158()
{
  unk_25570DF = 16641;
  word_25570C8 = 65;
  byte_25570F7 = 1;
  byte_25570E1 = 0;
}

uint64_t sub_2F4180(char **a1, uint64_t a2)
{
  char v4 = &a1[1][(void)*a1];
  long long v35 = *a1;
  std::string v36 = v4;
  uint64_t v37 = 0x2C700000000;
  if (!sub_2F333C((uint64_t)&v35)) {
    return 0xFFFFFFFFLL;
  }
  while (v37 != 1)
  {
    sub_2F3548((uint64_t)&v35);
    if (!sub_2F333C((uint64_t)&v35)) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t v7 = *(void *)v35;
  v35 += 8;
  if (v35 > v36)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    *(void *)&v40[0] = operator new(0x30uLL);
    *(long long *)((char *)v40 + 8) = xmmword_20E1380;
    strcpy(*(char **)&v40[0], "Skipping over bytes exceeded message length.");
    unint64_t v33 = (void *)sub_2F404((uint64_t)exception, v40);
  }
  uint64_t v9 = (unsigned int *)(a2 + 48);
  int v8 = *(_DWORD *)(a2 + 48);
  uint64_t v10 = v40;
  if (v8 == -2) {
    uint64_t v10 = (long long *)(a2 + 48);
  }
  if (v8 == -1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (v8 + 1);
  }
  if (v8 == -1) {
    int v11 = v40;
  }
  else {
    int v11 = v10;
  }
  LODWORD(v40[0]) = v5;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v11;
  unint64_t v12 = *(void **)a2;
  unint64_t v13 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3;
  if ((int)v5 + 1 > v13) {
    unint64_t v14 = (v5 + 1);
  }
  else {
    unint64_t v14 = v13;
  }
  if (v14 <= v13)
  {
    if (v14 < v13) {
      *(void *)(a2 + 8) = &v12[v14];
    }
  }
  else
  {
    sub_2F6CF4((void **)a2, v14 - v13);
    unint64_t v12 = *(void **)a2;
  }
  v12[v5] = v7;
  unint64_t v15 = &a1[1][(void)*a1];
  long long v35 = *a1;
  std::string v36 = v15;
  uint64_t v37 = 0x2C700000000;
  while (sub_2F333C((uint64_t)&v35))
  {
    if (v37 == 4)
    {
      *(void *)&v40[0] = sub_2F3488(&v35);
      *((void *)&v40[0] + 1) = v16;
      int v17 = sub_2F4180(v40, a2);
      if (v17 != -1)
      {
        unsigned int v18 = v17;
        int v34 = v5;
        unsigned int v38 = v17;
        LODWORD(v40[0]) = v5;
        if (*v9 >= v5) {
          unint64_t v19 = (long long *)(a2 + 48);
        }
        else {
          unint64_t v19 = v40;
        }
        if (v5 == -1) {
          unint64_t v19 = (long long *)(a2 + 48);
        }
        if (*v9 == -1) {
          unint64_t v20 = v40;
        }
        else {
          unint64_t v20 = v19;
        }
        *uint64_t v9 = *(_DWORD *)v20;
        LOBYTE(v40[0]) = 0;
        sub_2F6EB8(a2 + 24, &v38, &v34, (char *)v40);
        unsigned int v38 = v18;
        LODWORD(v40[0]) = v34;
        unsigned int v21 = *v9;
        if (*v9 < v18 || v21 == -1) {
          unsigned int v21 = v18;
        }
        *uint64_t v9 = v21;
        char v39 = 1;
        sub_2F6EB8(a2 + 24, v40, (int *)&v38, &v39);
      }
    }
    else
    {
      switch(HIDWORD(v37))
      {
        case 0:
          sub_2F3C98((uint64_t *)&v35, (uint64_t)v36);
          break;
        case 1:
          v35 += 8;
          if (v35 > v36)
          {
            double v28 = __cxa_allocate_exception(0x40uLL);
            *(void *)&v40[0] = operator new(0x30uLL);
            *(long long *)((char *)v40 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v40[0], "Skipping over bytes exceeded message length.");
            double v29 = (void *)sub_2F404((uint64_t)v28, v40);
          }
          return result;
        case 2:
          unsigned int v23 = sub_2F36C8(&v35, v36);
          v35 += v23;
          if (v35 > v36)
          {
            double v26 = __cxa_allocate_exception(0x40uLL);
            *(void *)&v40[0] = operator new(0x30uLL);
            *(long long *)((char *)v40 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v40[0], "Skipping over bytes exceeded message length.");
            uint64_t v27 = (void *)sub_2F404((uint64_t)v26, v40);
          }
          return result;
        case 5:
          v35 += 4;
          if (v35 > v36)
          {
            long long v24 = __cxa_allocate_exception(0x40uLL);
            *(void *)&v40[0] = operator new(0x30uLL);
            *(long long *)((char *)v40 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v40[0], "Skipping over bytes exceeded message length.");
            double v25 = (void *)sub_2F404((uint64_t)v24, v40);
          }
          return result;
        default:
          uint64_t v30 = __cxa_allocate_exception(0x40uLL);
          BYTE7(v40[1]) = 18;
          strcpy((char *)v40, "Unknown wire type.");
          uint64_t v31 = (void *)sub_2F404((uint64_t)v30, v40);
      }
    }
  }
  return v5;
}

void sub_2F461C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2F4680@<W0>(void *a1@<X1>, const std::string *a2@<X2>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = *a1 + a1[1];
  *(void *)&long long v47 = *a1;
  *((void *)&v47 + 1) = v5;
  uint64_t v48 = 0x2C700000000;
  unint64_t v6 = sub_2F4CE4(&v47, 3);
  sub_2F4BAC((uint64_t)a3, v6);
  while (1)
  {
    BOOL result = sub_2F333C((uint64_t)&v47);
    if (!result) {
      break;
    }
    while (v48 != 3)
    {
      switch(HIDWORD(v48))
      {
        case 0:
          sub_2F3C98((uint64_t *)&v47, *((uint64_t *)&v47 + 1));
          break;
        case 1:
          *(void *)&long long v47 = v47 + 8;
          if ((unint64_t)v47 > *((void *)&v47 + 1))
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v21, "Skipping over bytes exceeded message length.");
            unint64_t v19 = (void *)sub_2F404((uint64_t)exception, &v21);
          }
          return result;
        case 2:
          unsigned int v8 = sub_2F36C8((char **)&v47, *((char **)&v47 + 1));
          sub_2F3DCC((unint64_t *)&v47, v8);
          break;
        case 5:
          *(void *)&long long v47 = v47 + 4;
          if ((unint64_t)v47 > *((void *)&v47 + 1))
          {
            uint64_t v16 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v21, "Skipping over bytes exceeded message length.");
            int v17 = (void *)sub_2F404((uint64_t)v16, &v21);
          }
          return result;
        default:
          unint64_t v14 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v21, "Unknown wire type.");
          unint64_t v15 = (void *)sub_2F404((uint64_t)v14, &v21);
      }
      BOOL result = sub_2F333C((uint64_t)&v47);
      if (!result) {
        return result;
      }
    }
    v20[0] = sub_2F3488((char **)&v47);
    v20[1] = v9;
    sub_2F4FDC(v20, a2, (uint64_t)&v21);
    uint64_t v10 = HIBYTE(v22);
    if (v22 < 0) {
      uint64_t v10 = *((void *)&v21 + 1);
    }
    if (v10
      && ((*((void *)&v27 + 1) - (void)v27) & 0x3FFFFFFFCLL) != 4
      && ((*((void *)&v37 + 1) - (void)v37) & 0x3FFFFFFFCLL) != 4
      && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v43 + 1) - v43) >> 2) >= 2)
    {
      unint64_t v11 = a3[1];
      if (v11 >= a3[2])
      {
        uint64_t v13 = sub_2F719C(a3, &v21);
      }
      else
      {
        long long v12 = v21;
        *(void *)(v11 + 16) = v22;
        *(void *)(v11 + 24) = 0;
        *(_OWORD *)unint64_t v11 = v12;
        uint64_t v22 = 0;
        long long v21 = 0uLL;
        *(void *)(v11 + 32) = 0;
        *(void *)(v11 + 40) = 0;
        *(_OWORD *)(v11 + 24) = v23;
        long long v23 = 0uLL;
        *(void *)(v11 + 40) = v24;
        *(void *)(v11 + 48) = 0;
        uint64_t v24 = 0;
        *(void *)(v11 + 56) = 0;
        *(void *)(v11 + 64) = 0;
        *(_OWORD *)(v11 + 48) = v25;
        long long v25 = 0uLL;
        *(void *)(v11 + 64) = v26;
        *(void *)(v11 + 72) = 0;
        uint64_t v26 = 0;
        *(void *)(v11 + 80) = 0;
        *(void *)(v11 + 88) = 0;
        *(_OWORD *)(v11 + 72) = v27;
        long long v27 = 0uLL;
        *(void *)(v11 + 88) = v28;
        *(void *)(v11 + 96) = 0;
        uint64_t v28 = 0;
        *(void *)(v11 + 104) = 0;
        *(void *)(v11 + 112) = 0;
        *(_OWORD *)(v11 + 96) = v29;
        long long v29 = 0uLL;
        *(void *)(v11 + 112) = v30;
        *(void *)(v11 + 120) = 0;
        uint64_t v30 = 0;
        *(void *)(v11 + 128) = 0;
        *(void *)(v11 + 136) = 0;
        *(_OWORD *)(v11 + 120) = v31;
        long long v31 = 0uLL;
        *(void *)(v11 + 136) = v32;
        *(void *)(v11 + 144) = 0;
        uint64_t v32 = 0;
        *(void *)(v11 + 152) = 0;
        *(void *)(v11 + 160) = 0;
        *(_OWORD *)(v11 + 144) = v33;
        long long v33 = 0uLL;
        *(void *)(v11 + 160) = v34;
        *(void *)(v11 + 168) = 0;
        uint64_t v34 = 0;
        *(void *)(v11 + 176) = 0;
        *(void *)(v11 + 184) = 0;
        *(_OWORD *)(v11 + 168) = v35;
        long long v35 = 0uLL;
        *(void *)(v11 + 184) = v36;
        *(void *)(v11 + 192) = 0;
        uint64_t v36 = 0;
        *(void *)(v11 + 200) = 0;
        *(void *)(v11 + 208) = 0;
        *(_OWORD *)(v11 + 192) = v37;
        long long v37 = 0uLL;
        *(void *)(v11 + 208) = v38;
        *(void *)(v11 + 216) = 0;
        uint64_t v38 = 0;
        *(void *)(v11 + 224) = 0;
        *(void *)(v11 + 232) = 0;
        *(_OWORD *)(v11 + 216) = v39;
        long long v39 = 0uLL;
        *(void *)(v11 + 232) = v40;
        *(void *)(v11 + 240) = 0;
        uint64_t v40 = 0;
        *(void *)(v11 + 248) = 0;
        *(void *)(v11 + 256) = 0;
        *(_OWORD *)(v11 + 240) = v41;
        long long v41 = 0uLL;
        *(void *)(v11 + 256) = v42;
        *(void *)(v11 + 264) = 0;
        uint64_t v42 = 0;
        *(void *)(v11 + 272) = 0;
        *(void *)(v11 + 280) = 0;
        *(_OWORD *)(v11 + 264) = v43;
        long long v43 = 0uLL;
        *(void *)(v11 + 280) = v44;
        *(void *)(v11 + 288) = 0;
        uint64_t v44 = 0;
        *(void *)(v11 + 296) = 0;
        *(void *)(v11 + 304) = 0;
        *(_OWORD *)(v11 + 288) = v45;
        *(void *)(v11 + 304) = v46;
        long long v45 = 0uLL;
        uint64_t v46 = 0;
        uint64_t v13 = v11 + 312;
      }
      a3[1] = v13;
    }
    sub_2F6914((uint64_t)&v21);
  }
  return result;
}

void sub_2F4B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_2F6914((uint64_t)va);
  sub_2F53CC(v8);
  _Unwind_Resume(a1);
}

void sub_2F4B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_2F53CC(v21);
  _Unwind_Resume(a1);
}

void sub_2F4BAC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(long long **)a1;
  if (0x6F96F96F96F96F97 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0xD20D20D20D20D3) {
    sub_2E00();
  }
  uint64_t v5 = *(long long **)(a1 + 8);
  uint64_t v6 = 312 * a2;
  uint64_t v7 = (char *)operator new(312 * a2);
  unsigned int v8 = &v7[v6];
  uint64_t v9 = &v7[(char *)v5 - (char *)v3];
  if (v5 == v3)
  {
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v8;
    if (!v3) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v10 = (uint64_t)&v7[(char *)v5 - (char *)v3];
  do
  {
    v10 -= 312;
    uint64_t v5 = (long long *)((char *)v5 - 312);
    sub_2F7000(v2, v10, v5);
  }
  while (v5 != v3);
  unint64_t v11 = *(long long **)a1;
  uint64_t v3 = *(long long **)(a1 + 8);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v8;
  if (v3 != v11)
  {
    do
    {
      uint64_t v3 = (long long *)((char *)v3 - 312);
      sub_2F6914((uint64_t)v3);
    }
    while (v3 != v11);
    uint64_t v3 = v11;
  }
  if (v3)
  {
LABEL_10:
    operator delete(v3);
  }
}

uint64_t sub_2F4CE4(long long *a1, int a2)
{
  long long v14 = *a1;
  uint64_t v15 = 0x2C700000000;
  uint64_t v3 = 0;
  while (sub_2F333C((uint64_t)&v14))
  {
    if (v15 == a2)
    {
      ++v3;
      sub_2F3548((uint64_t)&v14);
    }
    else
    {
      switch(HIDWORD(v15))
      {
        case 0:
          sub_2F3C98((uint64_t *)&v14, *((uint64_t *)&v14 + 1));
          break;
        case 1:
          *(void *)&long long v14 = v14 + 8;
          if ((unint64_t)v14 > *((void *)&v14 + 1))
          {
            exception = __cxa_allocate_exception(0x40uLL);
            *(void *)&v16[0] = operator new(0x30uLL);
            *(long long *)((char *)v16 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v16[0], "Skipping over bytes exceeded message length.");
            unint64_t v11 = (void *)sub_2F404((uint64_t)exception, v16);
          }
          return result;
        case 2:
          unsigned int v5 = sub_2F36C8((char **)&v14, *((char **)&v14 + 1));
          *(void *)&long long v14 = v14 + v5;
          if ((unint64_t)v14 > *((void *)&v14 + 1))
          {
            unsigned int v8 = __cxa_allocate_exception(0x40uLL);
            *(void *)&v16[0] = operator new(0x30uLL);
            *(long long *)((char *)v16 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v16[0], "Skipping over bytes exceeded message length.");
            uint64_t v9 = (void *)sub_2F404((uint64_t)v8, v16);
          }
          return result;
        case 5:
          *(void *)&long long v14 = v14 + 4;
          if ((unint64_t)v14 > *((void *)&v14 + 1))
          {
            uint64_t v6 = __cxa_allocate_exception(0x40uLL);
            *(void *)&v16[0] = operator new(0x30uLL);
            *(long long *)((char *)v16 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v16[0], "Skipping over bytes exceeded message length.");
            uint64_t v7 = (void *)sub_2F404((uint64_t)v6, v16);
          }
          return result;
        default:
          long long v12 = __cxa_allocate_exception(0x40uLL);
          BYTE7(v16[1]) = 18;
          strcpy((char *)v16, "Unknown wire type.");
          uint64_t v13 = (void *)sub_2F404((uint64_t)v12, v16);
      }
    }
  }
  return v3;
}

void sub_2F4F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2F4FDC@<X0>(char **a1@<X1>, const std::string *a2@<X2>, uint64_t a3@<X8>)
{
  sub_29D824(a3);
  std::string::operator=((std::string *)a3, a2);
  uint64_t v6 = &a1[1][(void)*a1];
  v30[0] = *a1;
  v30[1] = v6;
  uint64_t v31 = 0x2C700000000;
  uint64_t v7 = (void **)(a3 + 264);
  while (1)
  {
    uint64_t result = sub_2F333C((uint64_t)v30);
    if (!result) {
      break;
    }
    if (v31 == 1)
    {
      uint64_t v28 = sub_2F3488(v30);
      uint64_t v29 = v11;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      int v35 = -1;
      sub_2F4180(&v28, (uint64_t)&v32);
      sub_2F610C((uint64_t *)&v32, (uint64_t)v16);
      if (*((void *)&v33 + 1))
      {
        *(void *)&long long v34 = *((void *)&v33 + 1);
        operator delete(*((void **)&v33 + 1));
      }
      if ((void)v32)
      {
        *((void *)&v32 + 1) = v32;
        operator delete((void *)v32);
      }
      sub_2F5428(a3 + 24, (uint64_t)v16);
      long long v12 = __p[0];
      if (__p[0])
      {
LABEL_22:
        __p[1] = v12;
        operator delete(v12);
      }
LABEL_23:
      if (*((void *)&v20 + 1))
      {
        *(void *)&long long v21 = *((void *)&v20 + 1);
        operator delete(*((void **)&v20 + 1));
      }
      if (v19[0])
      {
        v19[1] = v19[0];
        operator delete(v19[0]);
      }
      if (v17[1])
      {
        *(void **)&long long v18 = v17[1];
        operator delete(v17[1]);
      }
      if (v16[0])
      {
        v16[1] = v16[0];
        operator delete(v16[0]);
      }
    }
    else
    {
      if (v31 == 2)
      {
        uint64_t v28 = sub_2F3488(v30);
        uint64_t v29 = v13;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v32 = 0u;
        int v35 = -1;
        sub_2F4180(&v28, (uint64_t)&v32);
        sub_2F610C((uint64_t *)&v32, (uint64_t)v16);
        if (*((void *)&v33 + 1))
        {
          *(void *)&long long v34 = *((void *)&v33 + 1);
          operator delete(*((void **)&v33 + 1));
        }
        if ((void)v32)
        {
          *((void *)&v32 + 1) = v32;
          operator delete((void *)v32);
        }
        sub_2F5428(a3 + 144, (uint64_t)v16);
        long long v12 = __p[0];
        if (__p[0]) {
          goto LABEL_22;
        }
        goto LABEL_23;
      }
      if (v31 == 3 && *(void *)(a3 + 264) == *(void *)(a3 + 272))
      {
        *(void *)&long long v32 = sub_2F3488(v30);
        *((void *)&v32 + 1) = v9;
        sub_2F5564(&v32, (uint64_t)v16);
        uint64_t v10 = *v7;
        if (*v7)
        {
          *(void *)(a3 + 272) = v10;
          operator delete(v10);
          *uint64_t v7 = 0;
          *(void *)(a3 + 272) = 0;
          *(void *)(a3 + 280) = 0;
        }
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v16;
        *(void **)(a3 + 280) = v17[0];
      }
      else
      {
        sub_2F3548((uint64_t)v30);
      }
    }
  }
  if (((*(void *)(a3 + 80) - *(void *)(a3 + 72)) & 0x3FFFFFFFCLL) == 4
    || ((*(void *)(a3 + 200) - *(void *)(a3 + 192)) & 0x3FFFFFFFCLL) == 4
    || *(void *)(a3 + 264) == *(void *)(a3 + 272))
  {
    uint64_t v27 = 0;
    long long v26 = 0u;
    memset(v25, 0, sizeof(v25));
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)unint64_t v19 = 0u;
    long long v20 = 0u;
    *(_OWORD *)int v17 = 0u;
    long long v18 = 0u;
    *(_OWORD *)uint64_t v16 = 0u;
    sub_29D824((uint64_t)v16);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = *(_OWORD *)v16;
    *(void **)(a3 + 16) = v17[0];
    HIBYTE(v17[0]) = 0;
    LOBYTE(v16[0]) = 0;
    sub_2F5428(a3 + 24, (uint64_t)&v17[1]);
    sub_2F5428(a3 + 144, (uint64_t)v25);
    long long v14 = *(void **)(a3 + 264);
    if (v14)
    {
      *(void *)(a3 + 272) = v14;
      operator delete(v14);
      *uint64_t v7 = 0;
      *(void *)(a3 + 272) = 0;
      *(void *)(a3 + 280) = 0;
    }
    *(_OWORD *)uint64_t v7 = *(_OWORD *)((char *)&v25[7] + 8);
    *(void *)(a3 + 280) = *((void *)&v25[8] + 1);
    memset((char *)&v25[7] + 8, 0, 24);
    uint64_t v15 = *(void **)(a3 + 288);
    if (v15)
    {
      *(void *)(a3 + 296) = v15;
      operator delete(v15);
      *(void *)(a3 + 288) = 0;
      *(void *)(a3 + 296) = 0;
      *(void *)(a3 + 304) = 0;
    }
    *(_OWORD *)(a3 + 288) = v26;
    *(void *)(a3 + 304) = v27;
    uint64_t v27 = 0;
    long long v26 = 0uLL;
    return sub_2F6914((uint64_t)v16);
  }
  return result;
}

void sub_2F5334(_Unwind_Exception *a1)
{
  sub_2F6914(v1);
  _Unwind_Resume(a1);
}

void sub_2F5348(_Unwind_Exception *a1)
{
  sub_2F6914(v1);
  _Unwind_Resume(a1);
}

void sub_2F535C(_Unwind_Exception *a1)
{
  sub_2F6914(v1);
  _Unwind_Resume(a1);
}

void sub_2F5370(_Unwind_Exception *a1)
{
  sub_2F6914(v1);
  _Unwind_Resume(a1);
}

void sub_2F5384(_Unwind_Exception *a1)
{
  sub_2F6914(v1);
  _Unwind_Resume(a1);
}

void sub_2F5398(_Unwind_Exception *a1)
{
  sub_3310C(v2 - 112);
  sub_2F6914(v1);
  _Unwind_Resume(a1);
}

void sub_2F53B8(_Unwind_Exception *a1)
{
  sub_2F6914(v1);
  _Unwind_Resume(a1);
}

void **sub_2F53CC(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    char v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_2F6914(v3 - 312);
      while ((void *)v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2F5428(uint64_t a1, uint64_t a2)
{
  char v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unsigned int v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(void *)(a1 + 56) = v6;
    operator delete(v6);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  uint64_t v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(void *)(a1 + 80) = v7;
    operator delete(v7);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  unsigned int v8 = *(void **)(a1 + 96);
  if (v8)
  {
    *(void *)(a1 + 104) = v8;
    operator delete(v8);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  return a1;
}

uint64_t sub_2F5564@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v224 = a2;
  uint64_t v4 = *a1 + a1[1];
  *(void *)&long long v222 = *a1;
  *((void *)&v222 + 1) = v4;
  uint64_t v223 = 0x2C700000000;
  uint64_t v5 = sub_2F4CE4(&v222, 3);
  uint64_t result = sub_2F4CE4(&v222, 4);
  if (!v5 || !result) {
    return result;
  }
  BOOL v7 = sub_2F333C((uint64_t)&v222);
  if (v223 != 3 && v7)
  {
    do
    {
      sub_2F3548((uint64_t)&v222);
      BOOL v9 = sub_2F333C((uint64_t)&v222);
    }
    while (v223 != 3 && v9);
  }
  unsigned int v11 = sub_2F36C8((char **)&v222, *((char **)&v222 + 1));
  long long v12 = (int8x16_t *)v222;
  uint64_t v13 = (unsigned __int8 *)(v222 + v11);
  long long v219 = v222;
  uint64_t v220 = (uint64_t)v13;
  uint64_t v221 = *((void *)&v222 + 1);
  sub_2F3DCC((unint64_t *)&v222, v11);
  if (!v12 || !v11)
  {
    unint64_t v14 = 0;
    uint64_t v16 = (void *)(a2 + 8);
    int v17 = *(char **)a2;
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    goto LABEL_30;
  }
  if (v11 < 8)
  {
    unint64_t v14 = 0;
    uint64_t v15 = (unsigned __int8 *)v12;
    goto LABEL_27;
  }
  if (v11 >= 0x20)
  {
    int64x2_t v20 = 0uLL;
    v21.i64[0] = -1;
    v21.i64[1] = -1;
    int8x16_t v22 = (int8x16_t)vdupq_n_s64(1uLL);
    uint64_t v19 = v11 & 0xFFFFFFE0;
    int64x2_t v23 = 0uLL;
    long long v24 = v12 + 1;
    int64x2_t v25 = 0uLL;
    uint64_t v26 = v19;
    int64x2_t v27 = 0uLL;
    int64x2_t v28 = 0uLL;
    int64x2_t v29 = 0uLL;
    int64x2_t v30 = 0uLL;
    int64x2_t v31 = 0uLL;
    int64x2_t v32 = 0uLL;
    int64x2_t v33 = 0uLL;
    int64x2_t v34 = 0uLL;
    int64x2_t v35 = 0uLL;
    int64x2_t v36 = 0uLL;
    int64x2_t v37 = 0uLL;
    int64x2_t v38 = 0uLL;
    int64x2_t v39 = 0uLL;
    do
    {
      uint8x16_t v40 = (uint8x16_t)vcgtq_s8(v24[-1], v21);
      uint16x8_t v41 = vmovl_u8(*(uint8x8_t *)v40.i8);
      uint16x8_t v42 = vmovl_high_u8(v40);
      uint32x4_t v43 = vmovl_high_u16(v42);
      v44.i64[0] = v43.u32[2];
      v44.i64[1] = v43.u32[3];
      int64x2_t v31 = vaddq_s64(v31, (int64x2_t)vandq_s8(v44, v22));
      uint32x4_t v45 = vmovl_high_u16(v41);
      uint32x4_t v46 = vmovl_u16(*(uint16x4_t *)v42.i8);
      v44.i64[0] = v43.u32[0];
      v44.i64[1] = v43.u32[1];
      int64x2_t v30 = vaddq_s64(v30, (int64x2_t)vandq_s8(v44, v22));
      v44.i64[0] = v46.u32[2];
      v44.i64[1] = v46.u32[3];
      int64x2_t v29 = vaddq_s64(v29, (int64x2_t)vandq_s8(v44, v22));
      v44.i64[0] = v45.u32[2];
      v44.i64[1] = v45.u32[3];
      int64x2_t v27 = vaddq_s64(v27, (int64x2_t)vandq_s8(v44, v22));
      int8x16_t v47 = *v24;
      v24 += 2;
      uint32x4_t v48 = vmovl_u16(*(uint16x4_t *)v41.i8);
      v44.i64[0] = v46.u32[0];
      v44.i64[1] = v46.u32[1];
      int64x2_t v28 = vaddq_s64(v28, (int64x2_t)vandq_s8(v44, v22));
      v44.i64[0] = v48.u32[0];
      v44.i64[1] = v48.u32[1];
      int64x2_t v49 = (int64x2_t)vandq_s8(v44, v22);
      v44.i64[0] = v48.u32[2];
      v44.i64[1] = v48.u32[3];
      int64x2_t v50 = (int64x2_t)vandq_s8(v44, v22);
      v44.i64[0] = v45.u32[0];
      v44.i64[1] = v45.u32[1];
      uint8x16_t v51 = (uint8x16_t)vcgtq_s8(v47, v21);
      int64x2_t v25 = vaddq_s64(v25, (int64x2_t)vandq_s8(v44, v22));
      uint16x8_t v52 = vmovl_u8(*(uint8x8_t *)v51.i8);
      uint16x8_t v53 = vmovl_high_u8(v51);
      int64x2_t v23 = vaddq_s64(v23, v50);
      uint32x4_t v54 = vmovl_high_u16(v53);
      int64x2_t v20 = vaddq_s64(v20, v49);
      v44.i64[0] = v54.u32[2];
      v44.i64[1] = v54.u32[3];
      int64x2_t v39 = vaddq_s64(v39, (int64x2_t)vandq_s8(v44, v22));
      uint32x4_t v55 = vmovl_high_u16(v52);
      uint32x4_t v56 = vmovl_u16(*(uint16x4_t *)v53.i8);
      v44.i64[0] = v54.u32[0];
      v44.i64[1] = v54.u32[1];
      int64x2_t v38 = vaddq_s64(v38, (int64x2_t)vandq_s8(v44, v22));
      v44.i64[0] = v56.u32[2];
      v44.i64[1] = v56.u32[3];
      int64x2_t v37 = vaddq_s64(v37, (int64x2_t)vandq_s8(v44, v22));
      v44.i64[0] = v55.u32[2];
      v44.i64[1] = v55.u32[3];
      int64x2_t v35 = vaddq_s64(v35, (int64x2_t)vandq_s8(v44, v22));
      v44.i64[0] = v56.u32[0];
      v44.i64[1] = v56.u32[1];
      int64x2_t v36 = vaddq_s64(v36, (int64x2_t)vandq_s8(v44, v22));
      uint32x4_t v57 = vmovl_u16(*(uint16x4_t *)v52.i8);
      v44.i64[0] = v55.u32[0];
      v44.i64[1] = v55.u32[1];
      int64x2_t v34 = vaddq_s64(v34, (int64x2_t)vandq_s8(v44, v22));
      v44.i64[0] = v57.u32[2];
      v44.i64[1] = v57.u32[3];
      int64x2_t v33 = vaddq_s64(v33, (int64x2_t)vandq_s8(v44, v22));
      v44.i64[0] = v57.u32[0];
      v44.i64[1] = v57.u32[1];
      int64x2_t v32 = vaddq_s64(v32, (int64x2_t)vandq_s8(v44, v22));
      v26 -= 32;
    }
    while (v26);
    unint64_t v14 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v32, v20), vaddq_s64(v36, v28)), vaddq_s64(vaddq_s64(v34, v25), vaddq_s64(v38, v30))), vaddq_s64(vaddq_s64(vaddq_s64(v33, v23), vaddq_s64(v37, v29)), vaddq_s64(vaddq_s64(v35, v27), vaddq_s64(v39, v31)))));
    if (v19 == v11) {
      goto LABEL_28;
    }
    if ((v11 & 0x18) == 0)
    {
      uint64_t v15 = &v12->u8[v19];
      do
      {
LABEL_27:
        unsigned int v73 = *v15++;
        v14 += (v73 >> 7) ^ 1;
      }
      while (v15 != v13);
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t v19 = 0;
  }
  uint64_t v15 = &v12->u8[v11 & 0xFFFFFFF8];
  int64x2_t v58 = 0uLL;
  int64x2_t v59 = (int64x2_t)v14;
  double v60 = (int8x8_t *)&v12->i8[v19];
  uint64_t v61 = v19 - (v11 & 0xFFFFFFF8);
  int8x16_t v62 = (int8x16_t)vdupq_n_s64(1uLL);
  int64x2_t v63 = 0uLL;
  int64x2_t v64 = 0uLL;
  do
  {
    int8x8_t v65 = *v60++;
    uint16x8_t v66 = vmovl_u8((uint8x8_t)vcgt_s8(v65, (int8x8_t)-1));
    uint32x4_t v67 = vmovl_u16(*(uint16x4_t *)v66.i8);
    v68.i64[0] = v67.u32[0];
    v68.i64[1] = v67.u32[1];
    int64x2_t v69 = (int64x2_t)vandq_s8(v68, v62);
    v68.i64[0] = v67.u32[2];
    v68.i64[1] = v67.u32[3];
    int64x2_t v70 = (int64x2_t)vandq_s8(v68, v62);
    uint32x4_t v71 = vmovl_high_u16(v66);
    v68.i64[0] = v71.u32[0];
    v68.i64[1] = v71.u32[1];
    int64x2_t v72 = (int64x2_t)vandq_s8(v68, v62);
    v68.i64[0] = v71.u32[2];
    v68.i64[1] = v71.u32[3];
    int64x2_t v64 = vaddq_s64(v64, (int64x2_t)vandq_s8(v68, v62));
    int64x2_t v63 = vaddq_s64(v63, v72);
    int64x2_t v58 = vaddq_s64(v58, v70);
    int64x2_t v59 = vaddq_s64(v59, v69);
    v61 += 8;
  }
  while (v61);
  unint64_t v14 = vaddvq_s64(vaddq_s64(vaddq_s64(v59, v63), vaddq_s64(v58, v64)));
  if ((v11 & 0xFFFFFFF8) != (unint64_t)v11) {
    goto LABEL_27;
  }
LABEL_28:
  uint64_t v16 = (void *)(a2 + 8);
  int v17 = *(char **)a2;
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  if (v14 > v18)
  {
    sub_3907C((void **)a2, v14 - v18);
    goto LABEL_32;
  }
LABEL_30:
  if (v18 > v14) {
    void *v16 = &v17[12 * v14];
  }
LABEL_32:
  sub_2F63A0(&v224, (char **)&v219, 1);
  uint64_t v74 = *a1 + a1[1];
  *(void *)&long long v219 = *a1;
  *((void *)&v219 + 1) = v74;
  uint64_t v220 = 0x2C700000000;
  BOOL v75 = sub_2F333C((uint64_t)&v219);
  if (v220 != 4 && v75)
  {
    do
    {
      sub_2F3548((uint64_t)&v219);
      BOOL v77 = sub_2F333C((uint64_t)&v219);
    }
    while (v220 != 4 && v77);
  }
  unsigned int v79 = sub_2F36C8((char **)&v219, *((char **)&v219 + 1));
  long long v80 = v219;
  uint64_t result = (uint64_t)sub_2F3DCC((unint64_t *)&v219, v79);
  uint64_t v81 = 0;
  uint64_t v82 = (unsigned __int8 *)(v80 + v79);
  if (!(void)v80 || !v79) {
    goto LABEL_56;
  }
  if (v79 < 8)
  {
    uint64_t v81 = 0;
    unint64_t v83 = (unsigned __int8 *)v80;
    goto LABEL_55;
  }
  if (v79 < 0x20)
  {
    uint64_t v81 = 0;
    uint64_t v84 = 0;
    goto LABEL_50;
  }
  int64x2_t v85 = 0uLL;
  v86.i64[0] = -1;
  v86.i64[1] = -1;
  int8x16_t v87 = (int8x16_t)vdupq_n_s64(1uLL);
  uint64_t v84 = v79 & 0xFFFFFFE0;
  int64x2_t v88 = 0uLL;
  unint64_t v89 = (int8x16_t *)(v80 + 16);
  int64x2_t v90 = 0uLL;
  uint64_t v91 = v84;
  int64x2_t v92 = 0uLL;
  int64x2_t v93 = 0uLL;
  int64x2_t v94 = 0uLL;
  int64x2_t v95 = 0uLL;
  int64x2_t v96 = 0uLL;
  int64x2_t v97 = 0uLL;
  int64x2_t v98 = 0uLL;
  int64x2_t v99 = 0uLL;
  int64x2_t v100 = 0uLL;
  int64x2_t v101 = 0uLL;
  int64x2_t v102 = 0uLL;
  int64x2_t v103 = 0uLL;
  int64x2_t v104 = 0uLL;
  do
  {
    uint8x16_t v105 = (uint8x16_t)vcgtq_s8(v89[-1], v86);
    uint16x8_t v106 = vmovl_u8(*(uint8x8_t *)v105.i8);
    uint16x8_t v107 = vmovl_high_u8(v105);
    uint32x4_t v108 = vmovl_high_u16(v107);
    v109.i64[0] = v108.u32[2];
    v109.i64[1] = v108.u32[3];
    int64x2_t v96 = vaddq_s64(v96, (int64x2_t)vandq_s8(v109, v87));
    uint32x4_t v110 = vmovl_high_u16(v106);
    uint32x4_t v111 = vmovl_u16(*(uint16x4_t *)v107.i8);
    v109.i64[0] = v108.u32[0];
    v109.i64[1] = v108.u32[1];
    int64x2_t v95 = vaddq_s64(v95, (int64x2_t)vandq_s8(v109, v87));
    v109.i64[0] = v111.u32[2];
    v109.i64[1] = v111.u32[3];
    int64x2_t v94 = vaddq_s64(v94, (int64x2_t)vandq_s8(v109, v87));
    v109.i64[0] = v110.u32[2];
    v109.i64[1] = v110.u32[3];
    int64x2_t v92 = vaddq_s64(v92, (int64x2_t)vandq_s8(v109, v87));
    int8x16_t v112 = *v89;
    v89 += 2;
    uint32x4_t v113 = vmovl_u16(*(uint16x4_t *)v106.i8);
    v109.i64[0] = v111.u32[0];
    v109.i64[1] = v111.u32[1];
    int64x2_t v93 = vaddq_s64(v93, (int64x2_t)vandq_s8(v109, v87));
    v109.i64[0] = v113.u32[0];
    v109.i64[1] = v113.u32[1];
    int64x2_t v114 = (int64x2_t)vandq_s8(v109, v87);
    v109.i64[0] = v113.u32[2];
    v109.i64[1] = v113.u32[3];
    int64x2_t v115 = (int64x2_t)vandq_s8(v109, v87);
    v109.i64[0] = v110.u32[0];
    v109.i64[1] = v110.u32[1];
    uint8x16_t v116 = (uint8x16_t)vcgtq_s8(v112, v86);
    int64x2_t v90 = vaddq_s64(v90, (int64x2_t)vandq_s8(v109, v87));
    uint16x8_t v117 = vmovl_u8(*(uint8x8_t *)v116.i8);
    uint16x8_t v118 = vmovl_high_u8(v116);
    int64x2_t v88 = vaddq_s64(v88, v115);
    uint32x4_t v119 = vmovl_high_u16(v118);
    int64x2_t v85 = vaddq_s64(v85, v114);
    v109.i64[0] = v119.u32[2];
    v109.i64[1] = v119.u32[3];
    int64x2_t v104 = vaddq_s64(v104, (int64x2_t)vandq_s8(v109, v87));
    uint32x4_t v120 = vmovl_high_u16(v117);
    uint32x4_t v121 = vmovl_u16(*(uint16x4_t *)v118.i8);
    v109.i64[0] = v119.u32[0];
    v109.i64[1] = v119.u32[1];
    int64x2_t v103 = vaddq_s64(v103, (int64x2_t)vandq_s8(v109, v87));
    v109.i64[0] = v121.u32[2];
    v109.i64[1] = v121.u32[3];
    int64x2_t v102 = vaddq_s64(v102, (int64x2_t)vandq_s8(v109, v87));
    v109.i64[0] = v120.u32[2];
    v109.i64[1] = v120.u32[3];
    int64x2_t v100 = vaddq_s64(v100, (int64x2_t)vandq_s8(v109, v87));
    v109.i64[0] = v121.u32[0];
    v109.i64[1] = v121.u32[1];
    int64x2_t v101 = vaddq_s64(v101, (int64x2_t)vandq_s8(v109, v87));
    uint32x4_t v122 = vmovl_u16(*(uint16x4_t *)v117.i8);
    v109.i64[0] = v120.u32[0];
    v109.i64[1] = v120.u32[1];
    int64x2_t v99 = vaddq_s64(v99, (int64x2_t)vandq_s8(v109, v87));
    v109.i64[0] = v122.u32[2];
    v109.i64[1] = v122.u32[3];
    int64x2_t v98 = vaddq_s64(v98, (int64x2_t)vandq_s8(v109, v87));
    v109.i64[0] = v122.u32[0];
    v109.i64[1] = v122.u32[1];
    int64x2_t v97 = vaddq_s64(v97, (int64x2_t)vandq_s8(v109, v87));
    v91 -= 32;
  }
  while (v91);
  uint64_t v81 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v97, v85), vaddq_s64(v101, v93)), vaddq_s64(vaddq_s64(v99, v90), vaddq_s64(v103, v95))), vaddq_s64(vaddq_s64(vaddq_s64(v98, v88), vaddq_s64(v102, v94)), vaddq_s64(vaddq_s64(v100, v92), vaddq_s64(v104, v96)))));
  if (v84 == v79) {
    goto LABEL_56;
  }
  if ((v79 & 0x18) != 0)
  {
LABEL_50:
    unint64_t v83 = (unsigned __int8 *)(v80 + (v79 & 0xFFFFFFF8));
    int64x2_t v123 = 0uLL;
    int64x2_t v124 = (int64x2_t)(unint64_t)v81;
    uint64_t v125 = (int8x8_t *)(v80 + v84);
    uint64_t v126 = v84 - (v79 & 0xFFFFFFF8);
    int8x16_t v127 = (int8x16_t)vdupq_n_s64(1uLL);
    int64x2_t v128 = 0uLL;
    int64x2_t v129 = 0uLL;
    do
    {
      int8x8_t v130 = *v125++;
      uint16x8_t v131 = vmovl_u8((uint8x8_t)vcgt_s8(v130, (int8x8_t)-1));
      uint32x4_t v132 = vmovl_u16(*(uint16x4_t *)v131.i8);
      v133.i64[0] = v132.u32[0];
      v133.i64[1] = v132.u32[1];
      int64x2_t v134 = (int64x2_t)vandq_s8(v133, v127);
      v133.i64[0] = v132.u32[2];
      v133.i64[1] = v132.u32[3];
      int64x2_t v135 = (int64x2_t)vandq_s8(v133, v127);
      uint32x4_t v136 = vmovl_high_u16(v131);
      v133.i64[0] = v136.u32[0];
      v133.i64[1] = v136.u32[1];
      int64x2_t v137 = (int64x2_t)vandq_s8(v133, v127);
      v133.i64[0] = v136.u32[2];
      v133.i64[1] = v136.u32[3];
      int64x2_t v129 = vaddq_s64(v129, (int64x2_t)vandq_s8(v133, v127));
      int64x2_t v128 = vaddq_s64(v128, v137);
      int64x2_t v123 = vaddq_s64(v123, v135);
      int64x2_t v124 = vaddq_s64(v124, v134);
      v126 += 8;
    }
    while (v126);
    uint64_t v81 = vaddvq_s64(vaddq_s64(vaddq_s64(v124, v128), vaddq_s64(v123, v129)));
    if ((v79 & 0xFFFFFFF8) == (unint64_t)v79) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  unint64_t v83 = (unsigned __int8 *)(v80 + v84);
  do
  {
LABEL_55:
    unsigned int v138 = *v83++;
    v81 += (v138 >> 7) ^ 1;
  }
  while (v83 != v82);
LABEL_56:
  unint64_t v139 = *(char **)a2;
  if (v81 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2)) {
    goto LABEL_84;
  }
  long long v222 = v80;
  if (!v79) {
    goto LABEL_83;
  }
  v140.i64[0] = -1;
  v140.i64[1] = -1;
  int8x16_t v141 = (int8x16_t)vdupq_n_s64(1uLL);
  unint64_t v142 = (char *)*((void *)&v80 + 1);
  unint64_t v143 = (char *)v80;
  double v144 = 0.0;
  int8x16_t v217 = v141;
  do
  {
    uint64_t v145 = 0;
    if (!(void)v80) {
      goto LABEL_76;
    }
    unint64_t v146 = (unint64_t)&v143[-v80];
    if (v143 == (char *)v80) {
      goto LABEL_76;
    }
    if (v146 < 8)
    {
      uint64_t v145 = 0;
      unint64_t v147 = (char *)v80;
      goto LABEL_75;
    }
    if (v146 < 0x20)
    {
      unint64_t v148 = 0;
      goto LABEL_70;
    }
    double v216 = v144;
    int64x2_t v149 = 0uLL;
    unint64_t v148 = v146 & 0xFFFFFFFFFFFFFFE0;
    int64x2_t v150 = 0uLL;
    unint64_t v151 = v146 & 0xFFFFFFFFFFFFFFE0;
    int64x2_t v152 = 0uLL;
    v153 = (int8x16_t *)(v80 + 16);
    int64x2_t v154 = 0uLL;
    int64x2_t v155 = 0uLL;
    int64x2_t v156 = 0uLL;
    int64x2_t v157 = 0uLL;
    int64x2_t v158 = 0uLL;
    int64x2_t v159 = 0uLL;
    int64x2_t v160 = 0uLL;
    int64x2_t v161 = 0uLL;
    int64x2_t v162 = 0uLL;
    int64x2_t v163 = 0uLL;
    int64x2_t v164 = 0uLL;
    int64x2_t v165 = 0uLL;
    int64x2_t v166 = 0uLL;
    do
    {
      uint8x16_t v167 = (uint8x16_t)vcgtq_s8(v153[-1], v140);
      uint16x8_t v168 = vmovl_u8(*(uint8x8_t *)v167.i8);
      uint32x4_t v169 = vmovl_u16(*(uint16x4_t *)v168.i8);
      v170.i64[0] = v169.u32[0];
      v170.i64[1] = v169.u32[1];
      int8x16_t v171 = (int8x16_t)vdupq_n_s64(1uLL);
      int64x2_t v218 = (int64x2_t)vandq_s8(v170, v171);
      v170.i64[0] = v169.u32[2];
      v170.i64[1] = v169.u32[3];
      int64x2_t v172 = (int64x2_t)vandq_s8(v170, v171);
      uint32x4_t v173 = vmovl_high_u16(v168);
      v170.i64[0] = v173.u32[0];
      v170.i64[1] = v173.u32[1];
      int64x2_t v174 = (int64x2_t)vandq_s8(v170, v171);
      uint16x8_t v175 = vmovl_high_u8(v167);
      uint32x4_t v176 = vmovl_u16(*(uint16x4_t *)v175.i8);
      v170.i64[0] = v176.u32[0];
      v170.i64[1] = v176.u32[1];
      int64x2_t v177 = (int64x2_t)vandq_s8(v170, v171);
      v170.i64[0] = v173.u32[2];
      v170.i64[1] = v173.u32[3];
      int64x2_t v178 = (int64x2_t)vandq_s8(v170, v171);
      v170.i64[0] = v176.u32[2];
      v170.i64[1] = v176.u32[3];
      int64x2_t v179 = (int64x2_t)vandq_s8(v170, v171);
      uint32x4_t v180 = vmovl_high_u16(v175);
      v170.i64[0] = v180.u32[0];
      v170.i64[1] = v180.u32[1];
      int64x2_t v181 = (int64x2_t)vandq_s8(v170, v171);
      v170.i64[0] = v180.u32[2];
      v170.i64[1] = v180.u32[3];
      int64x2_t v182 = (int64x2_t)vandq_s8(v170, v171);
      uint8x16_t v183 = (uint8x16_t)vcgtq_s8(*v153, v140);
      uint16x8_t v184 = vmovl_u8(*(uint8x8_t *)v183.i8);
      uint32x4_t v185 = vmovl_u16(*(uint16x4_t *)v184.i8);
      v170.i64[0] = v185.u32[0];
      v170.i64[1] = v185.u32[1];
      int64x2_t v186 = (int64x2_t)vandq_s8(v170, v171);
      v170.i64[0] = v185.u32[2];
      v170.i64[1] = v185.u32[3];
      int64x2_t v187 = (int64x2_t)vandq_s8(v170, v171);
      uint32x4_t v188 = vmovl_high_u16(v184);
      v170.i64[0] = v188.u32[0];
      v170.i64[1] = v188.u32[1];
      int64x2_t v189 = (int64x2_t)vandq_s8(v170, v171);
      uint16x8_t v190 = vmovl_high_u8(v183);
      uint32x4_t v191 = vmovl_u16(*(uint16x4_t *)v190.i8);
      v170.i64[0] = v191.u32[0];
      v170.i64[1] = v191.u32[1];
      int64x2_t v192 = (int64x2_t)vandq_s8(v170, v171);
      v170.i64[0] = v188.u32[2];
      v170.i64[1] = v188.u32[3];
      int64x2_t v193 = (int64x2_t)vandq_s8(v170, v171);
      v170.i64[0] = v191.u32[2];
      v170.i64[1] = v191.u32[3];
      int64x2_t v194 = (int64x2_t)vandq_s8(v170, v171);
      uint32x4_t v195 = vmovl_high_u16(v190);
      v170.i64[0] = v195.u32[0];
      v170.i64[1] = v195.u32[1];
      int64x2_t v196 = (int64x2_t)vandq_s8(v170, v171);
      v170.i64[0] = v195.u32[2];
      v170.i64[1] = v195.u32[3];
      int64x2_t v158 = vaddq_s64(v158, v182);
      int64x2_t v157 = vaddq_s64(v157, v181);
      int64x2_t v156 = vaddq_s64(v156, v179);
      int64x2_t v154 = vaddq_s64(v154, v178);
      int64x2_t v155 = vaddq_s64(v155, v177);
      int64x2_t v152 = vaddq_s64(v152, v174);
      int64x2_t v150 = vaddq_s64(v150, v172);
      int64x2_t v149 = vaddq_s64(v149, v218);
      int64x2_t v166 = vaddq_s64(v166, (int64x2_t)vandq_s8(v170, v171));
      int64x2_t v165 = vaddq_s64(v165, v196);
      int64x2_t v164 = vaddq_s64(v164, v194);
      int64x2_t v162 = vaddq_s64(v162, v193);
      int64x2_t v163 = vaddq_s64(v163, v192);
      v140.i64[0] = -1;
      v140.i64[1] = -1;
      int64x2_t v161 = vaddq_s64(v161, v189);
      int64x2_t v160 = vaddq_s64(v160, v187);
      int64x2_t v159 = vaddq_s64(v159, v186);
      v153 += 2;
      v151 -= 32;
    }
    while (v151);
    uint64_t v145 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v159, v149), vaddq_s64(v163, v155)), vaddq_s64(vaddq_s64(v161, v152), vaddq_s64(v165, v157))), vaddq_s64(vaddq_s64(vaddq_s64(v160, v150), vaddq_s64(v164, v156)), vaddq_s64(vaddq_s64(v162, v154), vaddq_s64(v166, v158)))));
    if (v146 != v148)
    {
      int8x16_t v141 = v217;
      double v144 = v216;
      if ((v146 & 0x18) == 0)
      {
        unint64_t v147 = (char *)(v80 + v148);
        do
        {
LABEL_75:
          unsigned int v211 = *v147++;
          v145 += (v211 >> 7) ^ 1;
        }
        while (v147 != v143);
        goto LABEL_76;
      }
LABEL_70:
      unint64_t v147 = (char *)(v80 + (v146 & 0xFFFFFFFFFFFFFFF8));
      int64x2_t v197 = 0uLL;
      int64x2_t v198 = (int64x2_t)*((unint64_t *)&v80 + 1);
      unsigned int v199 = (int8x8_t *)(v80 + v148);
      unint64_t v200 = v148 - (v146 & 0xFFFFFFFFFFFFFFF8);
      int64x2_t v201 = 0uLL;
      int64x2_t v202 = 0uLL;
      do
      {
        int8x8_t v203 = *v199++;
        uint16x8_t v204 = vmovl_u8((uint8x8_t)vcgt_s8(v203, (int8x8_t)-1));
        uint32x4_t v205 = vmovl_u16(*(uint16x4_t *)v204.i8);
        v206.i64[0] = v205.u32[0];
        v206.i64[1] = v205.u32[1];
        int64x2_t v207 = (int64x2_t)vandq_s8(v206, v141);
        v206.i64[0] = v205.u32[2];
        v206.i64[1] = v205.u32[3];
        int64x2_t v208 = (int64x2_t)vandq_s8(v206, v141);
        uint32x4_t v209 = vmovl_high_u16(v204);
        v206.i64[0] = v209.u32[0];
        v206.i64[1] = v209.u32[1];
        int64x2_t v210 = (int64x2_t)vandq_s8(v206, v141);
        v206.i64[0] = v209.u32[2];
        v206.i64[1] = v209.u32[3];
        int64x2_t v202 = vaddq_s64(v202, (int64x2_t)vandq_s8(v206, v141));
        int64x2_t v201 = vaddq_s64(v201, v210);
        int64x2_t v197 = vaddq_s64(v197, v208);
        int64x2_t v198 = vaddq_s64(v198, v207);
        v200 += 8;
      }
      while (v200);
      uint64_t v145 = vaddvq_s64(vaddq_s64(vaddq_s64(v198, v201), vaddq_s64(v197, v202)));
      if (v146 == (v146 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_76;
      }
      goto LABEL_75;
    }
    double v144 = v216;
LABEL_76:
    unint64_t v225 = v143;
    unint64_t v212 = sub_2F6A18(&v225, v142);
    double v213 = (double)(uint64_t)(-(uint64_t)(v212 & 1) ^ (v212 >> 1));
    double v214 = v213 / 1000000.0;
    if (v145) {
      double v215 = v213 / 1000000.0;
    }
    else {
      double v215 = 0.0;
    }
    if (v145 >= 1)
    {
      LODWORD(v214) = *(_DWORD *)(*(void *)a2 + 12 * v145 - 12);
      double v214 = (double)*(unint64_t *)&v214 * 360.0 / 4294967300.0 + -180.0;
    }
    double v144 = v144 + v215;
    *(_DWORD *)(*(void *)a2 + 12 * v145) = ((v144 + v214 + 180.0) / 360.0 * 4294967300.0);
    uint64_t result = (uint64_t)sub_2F3C98((uint64_t *)&v222, *((uint64_t *)&v222 + 1));
    unint64_t v142 = (char *)*((void *)&v222 + 1);
    unint64_t v143 = (char *)v222;
    v140.i64[0] = -1;
    v140.i64[1] = -1;
    int8x16_t v141 = v217;
  }
  while (v222 != __PAIR128__(*((unint64_t *)&v80 + 1), (unint64_t)v82));
  unint64_t v139 = *(char **)a2;
LABEL_83:
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v16 - (void)v139) >> 2) <= 1) {
LABEL_84:
  }
    void *v16 = v139;
  return result;
}

void sub_2F60D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2F610C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = operator new(4uLL);
  *uint64_t v4 = 0;
  *(void *)(a2 + 8) = v4 + 1;
  *(void *)(a2 + 16) = v4 + 1;
  *(void *)a2 = v4;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  uint64_t v5 = operator new(4uLL);
  uint64_t v7 = a1[3];
  uint64_t v6 = (unsigned int *)a1[4];
  unint64_t v8 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v7) >> 2));
  *(void *)(a2 + 48) = v5;
  *v5++ = 0;
  *(void *)(a2 + 56) = v5;
  *(void *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  if (v6 == (unsigned int *)v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  sub_2F7310(v7, v6, (uint64_t)&v30, v9, 1);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  if (v10 != v11)
  {
    uint64_t v12 = v10 + 4;
    do
    {
      uint64_t v14 = v12 - 4;
      unsigned int v13 = *(_DWORD *)(v12 - 4);
      if (*(unsigned char *)(v12 + 4)) {
        sub_2F8824((void *)a2, v13, (_DWORD *)v12);
      }
      else {
        sub_2F86BC((void *)a2, v13, (_DWORD *)v12);
      }
      v12 += 12;
    }
    while (v14 + 12 != v11);
  }
  unsigned int v15 = *((_DWORD *)a1 + 12);
  if (v15 != -1)
  {
    uint64_t v17 = *(void *)(a2 + 48);
    uint64_t v16 = *(void *)(a2 + 56);
    uint64_t v18 = v16 - v17;
    if (((unint64_t)(v16 - v17) >> 2) - 1 <= v15)
    {
      unint64_t v19 = v15 + 2;
      uint64_t v20 = *(void *)(a2 + 8);
      unint64_t v21 = (v20 - *(void *)a2) >> 2;
      if (v19 <= v21)
      {
        if (v19 < v21) {
          *(void *)(a2 + 8) = *(void *)a2 + 4 * v19;
        }
      }
      else
      {
        sub_500DC(a2, v19 - v21, (const float *)(v20 - 4));
        uint64_t v17 = *(void *)(a2 + 48);
        uint64_t v16 = *(void *)(a2 + 56);
        uint64_t v18 = v16 - v17;
      }
      unint64_t v22 = v18 >> 2;
      if (v19 <= v22)
      {
        if (v19 < v22) {
          *(void *)(a2 + 56) = v17 + 4 * v19;
        }
      }
      else
      {
        sub_500DC(a2 + 48, v19 - v22, (const float *)(v16 - 4));
      }
    }
  }
  uint64_t v23 = a1[1];
  if (*a1 != v23)
  {
    uint64_t v24 = 0;
    uint64_t v25 = (v23 - *a1) >> 3;
    do
    {
      unint64_t v26 = v24;
      uint64_t v27 = *a1;
      uint64_t v28 = *(void *)(a2 + 96);
      unint64_t v29 = (*(void *)(a2 + 104) - v28) >> 3;
      ++v24;
      if (v29 <= v26)
      {
        uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
        if (v24 <= v29)
        {
          if (v24 < v29) {
            *(void *)(a2 + 104) = v28 + 8 * v24;
          }
        }
        else
        {
          sub_2F898C((unint64_t *)(a2 + 96), v24 - v29, &v31);
          uint64_t v28 = *(void *)(a2 + 96);
        }
      }
      *(void *)(v28 + 8 * v26) = *(void *)(v27 + 8 * v26);
    }
    while (v25 != v24);
  }
}

void sub_2F634C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_2F6364(_Unwind_Exception *a1)
{
  sub_4E798(v1);
  _Unwind_Resume(a1);
}

void sub_2F6378(_Unwind_Exception *a1)
{
  sub_4E798(v1);
  _Unwind_Resume(a1);
}

void sub_2F638C(_Unwind_Exception *a1)
{
  sub_4E798(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2F63A0(uint64_t *result, char **a2, int a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  int64x2_t v99 = v5;
  int64x2_t v100 = v4;
  if (v5 != a2[2] || v4 != a2[3])
  {
    unint64_t v8 = result;
    double v9 = 0.5;
    int8x16_t v10 = (int8x16_t)vdupq_n_s64(1uLL);
    double v97 = 0.0;
    int8x16_t v96 = v10;
    do
    {
      uint64_t v11 = (int8x16_t *)*a2;
      if (*a2) {
        BOOL v12 = v5 == (char *)v11;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12)
      {
        uint64_t v13 = 0;
      }
      else
      {
        unint64_t v14 = v5 - (char *)v11;
        if ((unint64_t)(v5 - (char *)v11) < 8)
        {
          uint64_t v13 = 0;
          unsigned int v15 = *a2;
          goto LABEL_27;
        }
        if (v14 < 0x20)
        {
          uint64_t v13 = 0;
          unint64_t v16 = 0;
          goto LABEL_22;
        }
        int64x2_t v17 = 0uLL;
        unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFE0;
        int64x2_t v18 = 0uLL;
        unint64_t v19 = v11 + 1;
        int64x2_t v20 = 0uLL;
        unint64_t v21 = v14 & 0xFFFFFFFFFFFFFFE0;
        int64x2_t v22 = 0uLL;
        int64x2_t v23 = 0uLL;
        int64x2_t v24 = 0uLL;
        int64x2_t v25 = 0uLL;
        int64x2_t v26 = 0uLL;
        int64x2_t v27 = 0uLL;
        int64x2_t v28 = 0uLL;
        int64x2_t v29 = 0uLL;
        int64x2_t v30 = 0uLL;
        int64x2_t v31 = 0uLL;
        int64x2_t v32 = 0uLL;
        int64x2_t v33 = 0uLL;
        int64x2_t v34 = 0uLL;
        do
        {
          v35.i64[0] = -1;
          v35.i64[1] = -1;
          uint8x16_t v36 = (uint8x16_t)vcgtq_s8(v19[-1], v35);
          uint16x8_t v37 = vmovl_u8(*(uint8x8_t *)v36.i8);
          uint32x4_t v38 = vmovl_u16(*(uint16x4_t *)v37.i8);
          v39.i64[0] = v38.u32[0];
          v39.i64[1] = v38.u32[1];
          int8x16_t v40 = (int8x16_t)vdupq_n_s64(1uLL);
          int64x2_t v98 = (int64x2_t)vandq_s8(v39, v40);
          v39.i64[0] = v38.u32[2];
          v39.i64[1] = v38.u32[3];
          int64x2_t v41 = (int64x2_t)vandq_s8(v39, v40);
          uint32x4_t v42 = vmovl_high_u16(v37);
          v39.i64[0] = v42.u32[0];
          v39.i64[1] = v42.u32[1];
          int64x2_t v43 = (int64x2_t)vandq_s8(v39, v40);
          uint16x8_t v44 = vmovl_high_u8(v36);
          uint32x4_t v45 = vmovl_u16(*(uint16x4_t *)v44.i8);
          v39.i64[0] = v45.u32[0];
          v39.i64[1] = v45.u32[1];
          int64x2_t v46 = (int64x2_t)vandq_s8(v39, v40);
          v39.i64[0] = v42.u32[2];
          v39.i64[1] = v42.u32[3];
          int64x2_t v47 = (int64x2_t)vandq_s8(v39, v40);
          v39.i64[0] = v45.u32[2];
          v39.i64[1] = v45.u32[3];
          int64x2_t v48 = (int64x2_t)vandq_s8(v39, v40);
          uint32x4_t v49 = vmovl_high_u16(v44);
          v39.i64[0] = v49.u32[0];
          v39.i64[1] = v49.u32[1];
          int64x2_t v50 = (int64x2_t)vandq_s8(v39, v40);
          v39.i64[0] = v49.u32[2];
          v39.i64[1] = v49.u32[3];
          int64x2_t v51 = (int64x2_t)vandq_s8(v39, v40);
          uint8x16_t v52 = (uint8x16_t)vcgtq_s8(*v19, v35);
          uint16x8_t v53 = vmovl_u8(*(uint8x8_t *)v52.i8);
          uint32x4_t v54 = vmovl_u16(*(uint16x4_t *)v53.i8);
          v39.i64[0] = v54.u32[0];
          v39.i64[1] = v54.u32[1];
          int64x2_t v55 = (int64x2_t)vandq_s8(v39, v40);
          v39.i64[0] = v54.u32[2];
          v39.i64[1] = v54.u32[3];
          int64x2_t v56 = (int64x2_t)vandq_s8(v39, v40);
          uint32x4_t v57 = vmovl_high_u16(v53);
          v39.i64[0] = v57.u32[0];
          v39.i64[1] = v57.u32[1];
          int64x2_t v58 = (int64x2_t)vandq_s8(v39, v40);
          uint16x8_t v59 = vmovl_high_u8(v52);
          uint32x4_t v60 = vmovl_u16(*(uint16x4_t *)v59.i8);
          v39.i64[0] = v60.u32[0];
          v39.i64[1] = v60.u32[1];
          int64x2_t v61 = (int64x2_t)vandq_s8(v39, v40);
          v39.i64[0] = v57.u32[2];
          v39.i64[1] = v57.u32[3];
          int64x2_t v62 = (int64x2_t)vandq_s8(v39, v40);
          v39.i64[0] = v60.u32[2];
          v39.i64[1] = v60.u32[3];
          int64x2_t v63 = (int64x2_t)vandq_s8(v39, v40);
          uint32x4_t v64 = vmovl_high_u16(v59);
          v39.i64[0] = v64.u32[0];
          v39.i64[1] = v64.u32[1];
          int64x2_t v65 = (int64x2_t)vandq_s8(v39, v40);
          v39.i64[0] = v64.u32[2];
          v39.i64[1] = v64.u32[3];
          int64x2_t v26 = vaddq_s64(v26, v51);
          int64x2_t v25 = vaddq_s64(v25, v50);
          int64x2_t v24 = vaddq_s64(v24, v48);
          int64x2_t v22 = vaddq_s64(v22, v47);
          int64x2_t v23 = vaddq_s64(v23, v46);
          int64x2_t v20 = vaddq_s64(v20, v43);
          int64x2_t v18 = vaddq_s64(v18, v41);
          int64x2_t v17 = vaddq_s64(v17, v98);
          int64x2_t v34 = vaddq_s64(v34, (int64x2_t)vandq_s8(v39, v40));
          int64x2_t v33 = vaddq_s64(v33, v65);
          int64x2_t v32 = vaddq_s64(v32, v63);
          int64x2_t v30 = vaddq_s64(v30, v62);
          int64x2_t v31 = vaddq_s64(v31, v61);
          int64x2_t v29 = vaddq_s64(v29, v58);
          int64x2_t v28 = vaddq_s64(v28, v56);
          int64x2_t v27 = vaddq_s64(v27, v55);
          v19 += 2;
          v21 -= 32;
        }
        while (v21);
        uint64_t v13 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v27, v17), vaddq_s64(v31, v23)), vaddq_s64(vaddq_s64(v29, v20), vaddq_s64(v33, v25))), vaddq_s64(vaddq_s64(vaddq_s64(v28, v18), vaddq_s64(v32, v24)), vaddq_s64(vaddq_s64(v30, v22), vaddq_s64(v34, v26)))));
        if (v14 != v16)
        {
          double v9 = 0.5;
          if ((v14 & 0x18) != 0)
          {
            int8x16_t v10 = v96;
LABEL_22:
            unsigned int v15 = &v11->i8[v14 & 0xFFFFFFFFFFFFFFF8];
            int64x2_t v66 = 0uLL;
            int64x2_t v67 = (int64x2_t)(unint64_t)v13;
            int8x16_t v68 = (int8x8_t *)&v11->i8[v16];
            unint64_t v69 = v16 - (v14 & 0xFFFFFFFFFFFFFFF8);
            int64x2_t v70 = 0uLL;
            int64x2_t v71 = 0uLL;
            do
            {
              int8x8_t v72 = *v68++;
              uint16x8_t v73 = vmovl_u8((uint8x8_t)vcgt_s8(v72, (int8x8_t)-1));
              uint32x4_t v74 = vmovl_u16(*(uint16x4_t *)v73.i8);
              v75.i64[0] = v74.u32[0];
              v75.i64[1] = v74.u32[1];
              int64x2_t v76 = (int64x2_t)vandq_s8(v75, v10);
              v75.i64[0] = v74.u32[2];
              v75.i64[1] = v74.u32[3];
              int64x2_t v77 = (int64x2_t)vandq_s8(v75, v10);
              uint32x4_t v78 = vmovl_high_u16(v73);
              v75.i64[0] = v78.u32[0];
              v75.i64[1] = v78.u32[1];
              int64x2_t v79 = (int64x2_t)vandq_s8(v75, v10);
              v75.i64[0] = v78.u32[2];
              v75.i64[1] = v78.u32[3];
              int64x2_t v71 = vaddq_s64(v71, (int64x2_t)vandq_s8(v75, v10));
              int64x2_t v70 = vaddq_s64(v70, v79);
              int64x2_t v66 = vaddq_s64(v66, v77);
              int64x2_t v67 = vaddq_s64(v67, v76);
              v69 += 8;
            }
            while (v69);
            uint64_t v13 = vaddvq_s64(vaddq_s64(vaddq_s64(v67, v70), vaddq_s64(v66, v71)));
            if (v14 == (v14 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_28;
            }
          }
          else
          {
            unsigned int v15 = &v11->i8[v16];
          }
          do
          {
LABEL_27:
            unsigned int v80 = *v15++;
            v13 += (v80 >> 7) ^ 1;
          }
          while (v15 != v5);
          goto LABEL_28;
        }
        double v9 = 0.5;
      }
LABEL_28:
      int64x2_t v101 = v5;
      unint64_t v81 = sub_2F6A18(&v101, v4);
      uint64_t v82 = -(uint64_t)(v81 & 1) ^ (v81 >> 1);
      double v83 = (double)v82 / 1000000.0;
      if (v13) {
        double v84 = (double)v82 / 1000000.0;
      }
      else {
        double v84 = 0.0;
      }
      double v85 = v97 + v84;
      int8x16_t v86 = (uint64_t *)*v8;
      uint64_t v87 = v13 - 1;
      double v97 = v97 + v84;
      if (v13 < 1)
      {
        uint64_t v88 = *v86;
        if (a3) {
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v88 = *v86;
        if (a3)
        {
          LODWORD(v83) = *(_DWORD *)(v88 + 12 * v87 + 4);
          long double v89 = exp((double)*(unint64_t *)&v83 * -6.28318531 / 4294967300.0 + 3.14159265);
          double v83 = atan((v89 + -1.0 / v89) * v9) * 57.2957795;
LABEL_35:
          double v90 = fmax(v85 + v83, -85.0511288);
          double v91 = v90 * 3.14159265 / 180.0;
          BOOL v92 = v90 < 85.0511288;
          double v93 = 1.48442223;
          if (v92) {
            double v93 = v91;
          }
          long double v94 = sin(v93);
          unsigned int v95 = ((log((v94 + 1.0) / (1.0 - v94)) / -12.5663706 + v9) * 4294967300.0);
          if (v95 >= 0xFFFFFFFE) {
            unsigned int v95 = -2;
          }
          *(_DWORD *)(v88 + 12 * v13 + 4) = v95;
          goto LABEL_42;
        }
        LODWORD(v83) = *(_DWORD *)(v88 + 12 * v87);
        double v83 = (double)*(unint64_t *)&v83 * 360.0 / 4294967300.0 + -180.0;
      }
      *(_DWORD *)(v88 + 12 * v13) = ((v85 + v83 + 180.0) / 360.0 * 4294967300.0);
LABEL_42:
      uint64_t result = sub_2F3C98((uint64_t *)&v99, (uint64_t)v100);
      uint64_t v5 = v99;
      uint64_t v4 = v100;
      int8x16_t v10 = v96;
    }
    while (v99 != a2[2] || v100 != a2[3]);
  }
  return result;
}

uint64_t sub_2F6914(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 288);
  if (v2)
  {
    *(void *)(a1 + 296) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 264);
  if (v3)
  {
    *(void *)(a1 + 272) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 240);
  if (v4)
  {
    *(void *)(a1 + 248) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 216);
  if (v5)
  {
    *(void *)(a1 + 224) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 192);
  if (v6)
  {
    *(void *)(a1 + 200) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 168);
  if (v7)
  {
    *(void *)(a1 + 176) = v7;
    operator delete(v7);
  }
  unint64_t v8 = *(void **)(a1 + 144);
  if (v8)
  {
    *(void *)(a1 + 152) = v8;
    operator delete(v8);
  }
  double v9 = *(void **)(a1 + 120);
  if (v9)
  {
    *(void *)(a1 + 128) = v9;
    operator delete(v9);
  }
  int8x16_t v10 = *(void **)(a1 + 96);
  if (v10)
  {
    *(void *)(a1 + 104) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 72);
  if (v11)
  {
    *(void *)(a1 + 80) = v11;
    operator delete(v11);
  }
  BOOL v12 = *(void **)(a1 + 48);
  if (v12)
  {
    *(void *)(a1 + 56) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 24);
  if (v13)
  {
    *(void *)(a1 + 32) = v13;
    operator delete(v13);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unint64_t sub_2F6A18(char **a1, char *a2)
{
  uint64_t v2 = *a1;
  if (*a1 == a2)
  {
    if (a2 - v2 <= 9)
    {
LABEL_7:
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v24, "Buffer overflow.");
      int8x16_t v10 = (void *)sub_2F404((uint64_t)exception, &v24);
    }
  }
  else
  {
    uint64_t v3 = *v2;
    if ((v3 & 0x80) == 0)
    {
LABEL_14:
      *a1 = v2 + 1;
      return v3;
    }
    if (a2 - v2 <= 9)
    {
      char v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = *a1;
      while (1)
      {
        int v7 = *v6++;
        uint64_t v8 = v7;
        if ((v7 & 0x80000000) == 0) {
          break;
        }
        v5 |= (unint64_t)(v8 & 0x7F) << v4;
        v4 += 7;
        uint64_t v2 = v6;
        if (v6 == a2) {
          goto LABEL_7;
        }
      }
      uint64_t v3 = (v8 << v4) | v5;
      goto LABEL_14;
    }
  }
  uint64_t v11 = v2 + 1;
  unint64_t v12 = *v2 & 0x7F;
  if ((*v2 & 0x80) == 0)
  {
LABEL_10:
    *a1 = v11;
    return v12;
  }
  unint64_t v14 = *v2 & 0x7F | ((unint64_t)(v2[1] & 0x7F) << 7);
  if ((v2[1] & 0x80000000) == 0)
  {
    *a1 = v2 + 2;
    return v14;
  }
  unint64_t v15 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14);
  if (v2[2] < 0)
  {
    unint64_t v16 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0xFFFFFFFFF01FFFFFLL | ((unint64_t)(v2[3] & 0x7F) << 21);
    if (v2[3] < 0)
    {
      unint64_t v17 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0xFFFFFFF8001FFFFFLL | ((v2[3] & 0x7F) << 21) & 0xFFFFFFF | ((unint64_t)(v2[4] & 0x7F) << 28);
      if (v2[4] < 0)
      {
        unint64_t v18 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0xFFFFFC00001FFFFFLL | ((v2[3] & 0x7F) << 21) & 0xFFFFFFF | ((unint64_t)(v2[4] & 0x7F) << 28) & 0xFFFFFC07FFFFFFFFLL | ((unint64_t)(v2[5] & 0x7F) << 35);
        if (v2[5] < 0)
        {
          unint64_t v19 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0xFFFE0000001FFFFFLL | ((v2[3] & 0x7F) << 21) & 0xFFFFFFF | ((unint64_t)(v2[4] & 0x7F) << 28) & 0xFFFE0007FFFFFFFFLL | ((unint64_t)(v2[5] & 0x7F) << 35) & 0xFFFE03FFFFFFFFFFLL | ((unint64_t)(v2[6] & 0x7F) << 42);
          if (v2[6] < 0)
          {
            unint64_t v20 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0xFF000000001FFFFFLL | ((v2[3] & 0x7F) << 21) & 0xFFFFFFF | ((unint64_t)(v2[4] & 0x7F) << 28) & 0xFF000007FFFFFFFFLL | ((unint64_t)(v2[5] & 0x7F) << 35) & 0xFF0003FFFFFFFFFFLL | ((unint64_t)(v2[6] & 0x7F) << 42) & 0xFF01FFFFFFFFFFFFLL | ((unint64_t)(v2[7] & 0x7F) << 49);
            if (v2[7] < 0)
            {
              uint64_t v11 = v2 + 9;
              unint64_t v12 = *v2 & 0x7F | (unint64_t)(((v2[1] & 0x7F) << 7) & 0x3FFF) | ((unint64_t)(v2[2] & 0x7F) << 14) & 0x80000000001FFFFFLL | ((v2[3] & 0x7F) << 21) & 0xFFFFFFF | ((unint64_t)(v2[4] & 0x7F) << 28) & 0x80000007FFFFFFFFLL | ((unint64_t)(v2[5] & 0x7F) << 35) & 0x800003FFFFFFFFFFLL | ((unint64_t)(v2[6] & 0x7F) << 42) & 0x8001FFFFFFFFFFFFLL | ((unint64_t)(v2[7] & 0x7F) << 49) & 0x80FFFFFFFFFFFFFFLL | ((unint64_t)(v2[8] & 0x7F) << 56);
              if ((v2[8] & 0x80) == 0) {
                goto LABEL_10;
              }
              int v21 = *v11;
              if (v21 < 0)
              {
                int64x2_t v22 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(&v24, "VarInt longer than expected.");
                int64x2_t v23 = (void *)sub_2F404((uint64_t)v22, &v24);
              }
              *a1 = v2 + 10;
              return v12 | ((unint64_t)v21 << 63);
            }
            else
            {
              *a1 = v2 + 8;
              return v20;
            }
          }
          else
          {
            *a1 = v2 + 7;
            return v19;
          }
        }
        else
        {
          *a1 = v2 + 6;
          return v18;
        }
      }
      else
      {
        *a1 = v2 + 5;
        return v17;
      }
    }
    else
    {
      *a1 = v2 + 4;
      return v16;
    }
  }
  else
  {
    *a1 = v2 + 3;
    return v15;
  }
}

void sub_2F6CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2F6CF4(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  char v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      memset_pattern16(v5, &xmmword_20B8FC0, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    int v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_2E00();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_188D718();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    unint64_t v16 = &v13[8 * v12];
    memset_pattern16(v14, &xmmword_20B8FC0, v15);
    unint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v20];
      v14 -= v20;
      int v21 = &v13[8 * v9 - 16];
      int64x2_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *int v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      uint64_t v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

char *sub_2F6EB8(uint64_t a1, _DWORD *a2, int *a3, char *a4)
{
  uint64_t v9 = *(_DWORD **)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = *(_DWORD **)a1;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(void *)a1) >> 2);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v11) >> 2);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x1555555555555555;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15 > 0x1555555555555555) {
      sub_188D718();
    }
    uint64_t v16 = 12 * v15;
    unint64_t v17 = (char *)operator new(12 * v15);
    unint64_t v18 = &v17[12 * v12];
    int v19 = *a3;
    *(_DWORD *)unint64_t v18 = *a2;
    *((_DWORD *)v18 + 1) = v19;
    unsigned char v18[8] = *a4;
    for (uint64_t i = v18 + 12; v9 != v11; v18[8] = v21)
    {
      uint64_t v20 = *(void *)(v9 - 3);
      v9 -= 3;
      char v21 = *((unsigned char *)v9 + 8);
      *(void *)(v18 - 12) = v20;
      v18 -= 12;
    }
    *(void *)a1 = v18;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = &v17[v16];
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *uint64_t v9 = *a2;
    v9[1] = *a3;
    *((unsigned char *)v9 + 8) = *a4;
    uint64_t i = (char *)(v9 + 3);
  }
  *(void *)(a1 + 8) = i;
  return i - 12;
}

__n128 sub_2F7000(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 40) = *((void *)a3 + 5);
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = a3[3];
  *(void *)(a2 + 64) = *((void *)a3 + 8);
  *((void *)a3 + 6) = 0;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(long long *)((char *)a3 + 72);
  *(void *)(a2 + 88) = *((void *)a3 + 11);
  *((void *)a3 + 9) = 0;
  *((void *)a3 + 10) = 0;
  *((void *)a3 + 11) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = a3[6];
  *(void *)(a2 + 112) = *((void *)a3 + 14);
  *((void *)a3 + 12) = 0;
  *((void *)a3 + 13) = 0;
  *((void *)a3 + 14) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(_OWORD *)(a2 + 120) = *(long long *)((char *)a3 + 120);
  *(void *)(a2 + 136) = *((void *)a3 + 17);
  *((void *)a3 + 15) = 0;
  *((void *)a3 + 16) = 0;
  *((void *)a3 + 17) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 144) = a3[9];
  *(void *)(a2 + 160) = *((void *)a3 + 20);
  *((void *)a3 + 18) = 0;
  *((void *)a3 + 19) = 0;
  *((void *)a3 + 20) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 168) = *(long long *)((char *)a3 + 168);
  *(void *)(a2 + 184) = *((void *)a3 + 23);
  *((void *)a3 + 21) = 0;
  *((void *)a3 + 22) = 0;
  *((void *)a3 + 23) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 192) = a3[12];
  *(void *)(a2 + 208) = *((void *)a3 + 26);
  *((void *)a3 + 24) = 0;
  *((void *)a3 + 25) = 0;
  *((void *)a3 + 26) = 0;
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(_OWORD *)(a2 + 216) = *(long long *)((char *)a3 + 216);
  *(void *)(a2 + 232) = *((void *)a3 + 29);
  *((void *)a3 + 27) = 0;
  *((void *)a3 + 28) = 0;
  *((void *)a3 + 29) = 0;
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *(_OWORD *)(a2 + 240) = a3[15];
  *(void *)(a2 + 256) = *((void *)a3 + 32);
  *((void *)a3 + 30) = 0;
  *((void *)a3 + 31) = 0;
  *((void *)a3 + 32) = 0;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0;
  uint64_t v4 = *((void *)a3 + 34);
  *(void *)(a2 + 264) = *((void *)a3 + 33);
  *(void *)(a2 + 272) = v4;
  *(void *)(a2 + 280) = *((void *)a3 + 35);
  *((void *)a3 + 33) = 0;
  *((void *)a3 + 34) = 0;
  *((void *)a3 + 35) = 0;
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  __n128 result = (__n128)a3[18];
  *(__n128 *)(a2 + 288) = result;
  *(void *)(a2 + 304) = *((void *)a3 + 38);
  *((void *)a3 + 36) = 0;
  *((void *)a3 + 37) = 0;
  *((void *)a3 + 38) = 0;
  return result;
}

uint64_t sub_2F719C(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x6F96F96F96F96F97 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0xD20D20D20D20D2) {
    sub_2E00();
  }
  if (0xDF2DF2DF2DF2DF2ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDF2DF2DF2DF2DF2ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6F96F96F96F96F97 * ((a1[2] - *a1) >> 3)) >= 0x69069069069069) {
    unint64_t v6 = 0xD20D20D20D20D2;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xD20D20D20D20D2) {
      sub_188D718();
    }
    int v7 = (char *)operator new(312 * v6);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[312 * v3];
  uint64_t v9 = &v7[312 * v6];
  sub_2F7000((uint64_t)(a1 + 2), v8, a2);
  uint64_t v10 = v8 + 312;
  unint64_t v12 = (long long *)*a1;
  uint64_t v11 = (long long *)a1[1];
  if (v11 == (long long *)*a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v8 -= 312;
    uint64_t v11 = (long long *)((char *)v11 - 312);
    sub_2F7000((uint64_t)(a1 + 2), v8, v11);
  }
  while (v11 != v12);
  unint64_t v13 = (long long *)*a1;
  uint64_t v11 = (long long *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  if (v11 != v13)
  {
    do
    {
      uint64_t v11 = (long long *)((char *)v11 - 312);
      sub_2F6914((uint64_t)v11);
    }
    while (v11 != v13);
    uint64_t v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

uint64_t sub_2F7310(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v11) >> 2);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          int64x2_t v27 = (uint64_t *)(a2 - 3);
          unsigned int v28 = *(a2 - 3);
          if (v28 < *(_DWORD *)v11
            || (*(_DWORD *)v11 >= v28 ? (BOOL v29 = *(a2 - 2) >= *(_DWORD *)(v11 + 4)) : (BOOL v29 = 1), !v29))
          {
            int v74 = *(_DWORD *)(v11 + 8);
            uint64_t v71 = *(void *)v11;
            uint64_t v30 = *v27;
            *(unsigned char *)(v11 + 8) = *((unsigned char *)a2 - 4);
            *(void *)uint64_t v11 = v30;
            *int64x2_t v27 = v71;
            *((unsigned char *)a2 - 4) = v74;
          }
          break;
        case 3uLL:
          __n128 result = sub_2F7950((uint64_t *)v11, (unsigned int *)(v11 + 12), (uint64_t *)(a2 - 3));
          break;
        case 4uLL:
          int64x2_t v31 = (uint64_t *)(v11 + 12);
          int64x2_t v32 = (uint64_t *)(v11 + 24);
          __n128 result = sub_2F7950((uint64_t *)v11, (unsigned int *)(v11 + 12), (uint64_t *)(v11 + 24));
          int64x2_t v33 = a2 - 3;
          unsigned int v34 = *(a2 - 3);
          unsigned int v35 = *(_DWORD *)(v11 + 24);
          if (v34 < v35 || (v35 >= v34 ? (BOOL v36 = *(a2 - 2) >= *(_DWORD *)(v11 + 28)) : (BOOL v36 = 1), !v36))
          {
            char v37 = *(_DWORD *)(v11 + 32);
            uint64_t v38 = *v32;
            char v39 = *((unsigned char *)a2 - 4);
            *int64x2_t v32 = *(void *)v33;
            *(unsigned char *)(v11 + 32) = v39;
            *(void *)int64x2_t v33 = v38;
            *((unsigned char *)a2 - 4) = v37;
            if (*(_DWORD *)v32 < *(_DWORD *)v31
              || *(_DWORD *)v31 >= *(_DWORD *)v32 && *(_DWORD *)(v11 + 28) < *(_DWORD *)(v11 + 16))
            {
              char v40 = *(_DWORD *)(v11 + 20);
              uint64_t v41 = *v31;
              *int64x2_t v31 = *v32;
              *(unsigned char *)(v11 + 20) = *(unsigned char *)(v11 + 32);
              *int64x2_t v32 = v41;
              *(unsigned char *)(v11 + 32) = v40;
              unsigned int v42 = *(_DWORD *)(v11 + 12);
              if (v42 < *(_DWORD *)v11 || *(_DWORD *)v11 >= v42 && *(_DWORD *)(v11 + 16) < *(_DWORD *)(v11 + 4))
              {
                int v75 = *(_DWORD *)(v11 + 8);
                uint64_t v72 = *(void *)v11;
                *(void *)uint64_t v11 = *v31;
                *(unsigned char *)(v11 + 8) = *(unsigned char *)(v11 + 20);
                *int64x2_t v31 = v72;
                *(unsigned char *)(v11 + 20) = v75;
              }
            }
          }
          break;
        case 5uLL:
          __n128 result = sub_2F8158(v11, (unsigned int *)(v11 + 12), v11 + 24, (uint64_t *)(v11 + 36), (uint64_t *)(a2 - 3));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 287)
    {
      int64x2_t v43 = (unsigned int *)(v11 + 12);
      BOOL v45 = (unsigned int *)v11 == a2 || v43 == a2;
      if (a5)
      {
        if (v45) {
          return result;
        }
        uint64_t v46 = 0;
        uint64_t v47 = v11;
        while (2)
        {
          int64x2_t v48 = v43;
          unsigned int v49 = *(_DWORD *)(v47 + 12);
          if (v49 < *(_DWORD *)v47)
          {
            unsigned int v50 = *(_DWORD *)(v47 + 16);
            goto LABEL_65;
          }
          unsigned int v50 = *(_DWORD *)(v47 + 16);
          if (*(_DWORD *)v47 >= v49 && v50 < *(_DWORD *)(v47 + 4))
          {
LABEL_65:
            int v52 = *(_DWORD *)(v47 + 20);
            *(void *)int64x2_t v48 = *(void *)v47;
            *((unsigned char *)v48 + 8) = *(unsigned char *)(v47 + 8);
            uint64_t v53 = v11;
            if (v47 != v11)
            {
              uint64_t v54 = v46;
              while (1)
              {
                uint64_t v55 = v11 + v54;
                unsigned int v56 = *(_DWORD *)(v11 + v54 - 12);
                if (v49 >= v56 && (v56 < v49 || v50 >= *(_DWORD *)(v55 - 8))) {
                  break;
                }
                *(void *)uint64_t v55 = *(void *)(v11 + v54 - 12);
                *(unsigned char *)(v55 + 8) = *(unsigned char *)(v11 + v54 - 4);
                v54 -= 12;
                if (!v54)
                {
                  uint64_t v53 = v11;
                  goto LABEL_57;
                }
              }
              uint64_t v53 = v11 + v54;
            }
LABEL_57:
            *(_DWORD *)uint64_t v53 = v49;
            *(_DWORD *)(v53 + 4) = v50;
            *(unsigned char *)(v53 + 8) = v52;
          }
          int64x2_t v43 = v48 + 3;
          v46 += 12;
          uint64_t v47 = (uint64_t)v48;
          if (v48 + 3 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v45) {
        return result;
      }
      while (2)
      {
        uint64_t v61 = (uint64_t)v43;
        unsigned int v62 = *(_DWORD *)(v10 + 12);
        if (v62 >= *(_DWORD *)v10)
        {
          unsigned int v63 = *(_DWORD *)(v10 + 16);
          if (*(_DWORD *)v10 >= v62 && v63 < *(_DWORD *)(v10 + 4)) {
            goto LABEL_91;
          }
        }
        else
        {
          unsigned int v63 = *(_DWORD *)(v10 + 16);
LABEL_91:
          int v65 = *(_DWORD *)(v10 + 20);
          do
          {
            do
            {
              uint64_t v66 = v10;
              *(void *)(v10 + 12) = *(void *)v10;
              *(unsigned char *)(v10 + 20) = *(unsigned char *)(v10 + 8);
              unsigned int v68 = *(_DWORD *)(v10 - 12);
              v10 -= 12;
              unsigned int v67 = v68;
            }
            while (v62 < v68);
          }
          while (v67 >= v62 && v63 < *(_DWORD *)(v66 - 8));
          *(_DWORD *)uint64_t v66 = v62;
          *(_DWORD *)(v66 + 4) = v63;
          *(unsigned char *)(v66 + 8) = v65;
        }
        int64x2_t v43 = (unsigned int *)(v61 + 12);
        uint64_t v10 = v61;
        if ((unsigned int *)(v61 + 12) == a2) {
          return result;
        }
        continue;
      }
    }
    if (v13 == 1) {
      break;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = v11 + 12 * (v15 >> 1);
    if ((unint64_t)v14 < 0x601)
    {
      sub_2F7950((uint64_t *)v17, (unsigned int *)v11, (uint64_t *)(a2 - 3));
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      sub_2F7950((uint64_t *)v11, (unsigned int *)v17, (uint64_t *)(a2 - 3));
      uint64_t v18 = 12 * v16;
      int v19 = (unsigned int *)(12 * v16 + v11 - 12);
      sub_2F7950((uint64_t *)(v11 + 12), v19, (uint64_t *)a2 - 3);
      uint64_t v20 = (uint64_t *)(v11 + 24);
      char v21 = (unsigned int *)(v11 + 12 + v18);
      sub_2F7950(v20, v21, (uint64_t *)(a2 - 9));
      sub_2F7950((uint64_t *)v19, (unsigned int *)v17, (uint64_t *)v21);
      int v73 = *(_DWORD *)(v10 + 8);
      uint64_t v70 = *(void *)v10;
      uint64_t v22 = *(void *)v17;
      *(unsigned char *)(v10 + 8) = *(unsigned char *)(v17 + 8);
      *(void *)uint64_t v10 = v22;
      *(unsigned char *)(v17 + 8) = v73;
      *(void *)unint64_t v17 = v70;
      if (a5) {
        goto LABEL_15;
      }
    }
    unsigned int v23 = *(_DWORD *)(v10 - 12);
    if (v23 >= *(_DWORD *)v10 && (*(_DWORD *)v10 < v23 || *(_DWORD *)(v10 - 8) >= *(_DWORD *)(v10 + 4)))
    {
      __n128 result = (uint64_t)sub_2F7AEC((unsigned int *)v10, (unint64_t)a2);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_15:
    long long v24 = (unsigned int *)sub_2F7C50((unsigned int *)v10, (uint64_t)a2);
    if ((v25 & 1) == 0) {
      goto LABEL_18;
    }
    BOOL v26 = sub_2F7DD0(v10, v24);
    uint64_t v11 = (uint64_t)(v24 + 3);
    __n128 result = sub_2F7DD0((uint64_t)(v24 + 3), a2);
    if (result)
    {
      a4 = -v13;
      a2 = v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v26)
    {
LABEL_18:
      __n128 result = sub_2F7310(v10, v24, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t)(v24 + 3);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if ((unsigned int *)v11 != a2)
  {
    unint64_t v58 = (v15 - 2) >> 1;
    unint64_t v59 = v58 + 1;
    uint32x4_t v60 = (unsigned int *)(v11 + 12 * v58);
    do
    {
      sub_2F839C(v11, a3, v15, v60);
      v60 -= 3;
      --v59;
    }
    while (v59);
    return (uint64_t)sub_2F84E4((char *)v11, (char *)a2);
  }
  return result;
}

uint64_t sub_2F7950(uint64_t *a1, unsigned int *a2, uint64_t *a3)
{
  unsigned int v3 = *a2;
  if (*a2 < *(_DWORD *)a1 || ((unsigned int v4 = a2[1], *(_DWORD *)a1 >= v3) ? (v5 = v4 >= *((_DWORD *)a1 + 1)) : (v5 = 1), !v5))
  {
    if (*(_DWORD *)a3 < v3 || (v3 >= *(_DWORD *)a3 ? (BOOL v9 = *((_DWORD *)a3 + 1) >= a2[1]) : (BOOL v9 = 1), !v9))
    {
      char v16 = *((_DWORD *)a1 + 2);
      uint64_t v17 = *a1;
      char v18 = *((unsigned char *)a3 + 8);
      *a1 = *a3;
      *((unsigned char *)a1 + 8) = v18;
      *a3 = v17;
      *((unsigned char *)a3 + 8) = v16;
      return 1;
    }
    int v10 = *((_DWORD *)a1 + 2);
    uint64_t v11 = *a1;
    char v12 = *((unsigned char *)a2 + 8);
    *a1 = *(void *)a2;
    *((unsigned char *)a1 + 8) = v12;
    *(void *)a2 = v11;
    *((unsigned char *)a2 + 8) = v10;
    if (*(_DWORD *)a3 < *a2 || (uint64_t v7 = 1, *a2 >= *(_DWORD *)a3) && *((_DWORD *)a3 + 1) < a2[1])
    {
      char v13 = a2[2];
      uint64_t v14 = *(void *)a2;
      char v15 = *((unsigned char *)a3 + 8);
      *(void *)a2 = *a3;
      *((unsigned char *)a2 + 8) = v15;
      *a3 = v14;
      *((unsigned char *)a3 + 8) = v13;
      return 2;
    }
    return v7;
  }
  if (*(_DWORD *)a3 >= v3 && (v3 < *(_DWORD *)a3 || *((_DWORD *)a3 + 1) >= v4)) {
    return 0;
  }
  unsigned int v19 = a2[2];
  uint64_t v20 = *(void *)a2;
  char v21 = *((unsigned char *)a3 + 8);
  *(void *)a2 = *a3;
  *((unsigned char *)a2 + 8) = v21;
  *a3 = v20;
  *((unsigned char *)a3 + 8) = v19;
  if (*a2 >= *(_DWORD *)a1)
  {
    uint64_t v7 = 1;
    if (*(_DWORD *)a1 < *a2 || a2[1] >= *((_DWORD *)a1 + 1)) {
      return v7;
    }
  }
  char v22 = *((_DWORD *)a1 + 2);
  uint64_t v23 = *a1;
  char v24 = *((unsigned char *)a2 + 8);
  *a1 = *(void *)a2;
  *((unsigned char *)a1 + 8) = v24;
  *(void *)a2 = v23;
  *((unsigned char *)a2 + 8) = v22;
  return 2;
}

unsigned int *sub_2F7AEC(unsigned int *a1, unint64_t a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = a1[1];
  unsigned int v4 = *(_DWORD *)(a2 - 12);
  if (*a1 >= v4 && (v4 >= v2 ? (BOOL v5 = v3 >= *(_DWORD *)(a2 - 8)) : (BOOL v5 = 1), v5))
  {
    char v6 = a1 + 3;
    do
    {
      uint64_t v7 = v6;
      if ((unint64_t)v6 >= a2) {
        break;
      }
      unsigned int v8 = *v6;
      if (v2 < *v6) {
        break;
      }
      unsigned int v9 = v6[1];
      v6 += 3;
    }
    while (v8 < v2 || v3 >= v9);
  }
  else
  {
    uint64_t v11 = a1 + 3;
    do
    {
      uint64_t v7 = v11;
      unsigned int v12 = *v11;
      if (v2 < *v11) {
        break;
      }
      unsigned int v13 = v11[1];
      v11 += 3;
    }
    while (v12 < v2 || v3 >= v13);
  }
  if ((unint64_t)v7 < a2)
  {
    for (a2 -= 12; v2 < v4 || v4 >= v2 && v3 < *(_DWORD *)(a2 + 4); a2 -= 12)
    {
      unsigned int v15 = *(_DWORD *)(a2 - 12);
      unsigned int v4 = v15;
    }
  }
  unsigned int v16 = a1[2];
  while ((unint64_t)v7 < a2)
  {
    unsigned int v28 = v7[2];
    uint64_t v27 = *(void *)v7;
    uint64_t v17 = *(void *)a2;
    *((unsigned char *)v7 + 8) = *(unsigned char *)(a2 + 8);
    *(void *)uint64_t v7 = v17;
    *(unsigned char *)(a2 + 8) = v28;
    *(void *)a2 = v27;
    char v18 = v7 + 3;
    do
    {
      uint64_t v7 = v18;
      unsigned int v19 = *v18;
      if (v2 < *v18) {
        break;
      }
      unsigned int v20 = v18[1];
      v18 += 3;
    }
    while (v19 < v2 || v3 >= v20);
    do
    {
      do
      {
        unsigned int v23 = *(_DWORD *)(a2 - 12);
        a2 -= 12;
        unsigned int v22 = v23;
      }
      while (v2 < v23);
    }
    while (v22 >= v2 && v3 < *(_DWORD *)(a2 + 4));
  }
  if (v7 - 3 != a1)
  {
    uint64_t v25 = *(void *)(v7 - 3);
    *((unsigned char *)a1 + 8) = *((unsigned char *)v7 - 4);
    *(void *)a1 = v25;
  }
  *(v7 - 3) = v2;
  *(v7 - 2) = v3;
  *((unsigned char *)v7 - 4) = v16;
  return v7;
}

unint64_t sub_2F7C50(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  unsigned int v3 = *a1;
  unsigned int v4 = a1[1];
  unsigned int v5 = a1[2];
  while (1)
  {
    unsigned int v6 = a1[v2 + 3];
    if (v6 >= v3 && (v3 < v6 || a1[v2 + 4] >= v4)) {
      break;
    }
    v2 += 3;
  }
  unint64_t v8 = (unint64_t)&a1[v2 + 3];
  if (v2 * 4)
  {
    unsigned int v9 = (unsigned int *)(a2 - 12);
    do
    {
      int v10 = v9;
      unsigned int v11 = *v9;
      if (*v9 < v3) {
        break;
      }
      unsigned int v12 = v9[1];
      v9 -= 3;
    }
    while (v3 < v11 || v12 >= v4);
LABEL_24:
    unint64_t v16 = v8;
    if (v8 < (unint64_t)v10)
    {
      uint64_t v17 = v10;
      do
      {
        int v29 = *(_DWORD *)(v16 + 8);
        uint64_t v28 = *(void *)v16;
        uint64_t v18 = *(void *)v17;
        *(unsigned char *)(v16 + 8) = *((unsigned char *)v17 + 8);
        *(void *)unint64_t v16 = v18;
        *((unsigned char *)v17 + 8) = v29;
        *(void *)uint64_t v17 = v28;
        do
        {
          do
          {
            unsigned int v20 = *(_DWORD *)(v16 + 12);
            v16 += 12;
            unsigned int v19 = v20;
          }
          while (v20 < v3);
        }
        while (v3 >= v19 && *(_DWORD *)(v16 + 4) < v4);
        unsigned int v22 = v17 - 3;
        do
        {
          uint64_t v17 = v22;
          unsigned int v23 = *v22;
          if (*v22 < v3) {
            break;
          }
          unsigned int v24 = v22[1];
          v22 -= 3;
        }
        while (v3 < v23 || v24 >= v4);
      }
      while (v16 < (unint64_t)v17);
    }
  }
  else
  {
    uint64_t v14 = (unsigned int *)(a2 - 12);
    while (1)
    {
      int v10 = v14;
      if (v8 >= (unint64_t)(v14 + 3)) {
        break;
      }
      if (*v14 >= v3)
      {
        v14 -= 3;
        if (v3 < *v10 || v10[1] >= v4) {
          continue;
        }
      }
      goto LABEL_24;
    }
    unint64_t v16 = v8;
  }
  if ((unsigned int *)(v16 - 12) != a1)
  {
    uint64_t v26 = *(void *)(v16 - 12);
    *((unsigned char *)a1 + 8) = *(unsigned char *)(v16 - 4);
    *(void *)a1 = v26;
  }
  *(_DWORD *)(v16 - 12) = v3;
  *(_DWORD *)(v16 - 8) = v4;
  *(unsigned char *)(v16 - 4) = v5;
  return v16 - 12;
}

BOOL sub_2F7DD0(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v18 = (uint64_t *)(a2 - 3);
      unsigned int v19 = *(a2 - 3);
      if (v19 < *(_DWORD *)a1 || (*(_DWORD *)a1 >= v19 ? (BOOL v20 = *(a2 - 2) >= *(_DWORD *)(a1 + 4)) : (BOOL v20 = 1), !v20))
      {
        int v21 = *(_DWORD *)(a1 + 8);
        uint64_t v22 = *(void *)a1;
        char v23 = *((unsigned char *)a2 - 4);
        *(void *)a1 = *v18;
        *(unsigned char *)(a1 + 8) = v23;
        uint64_t *v18 = v22;
        *((unsigned char *)a2 - 4) = v21;
      }
      return result;
    case 3uLL:
      sub_2F7950((uint64_t *)a1, (unsigned int *)(a1 + 12), (uint64_t *)(a2 - 3));
      return 1;
    case 4uLL:
      unsigned int v24 = (uint64_t *)(a1 + 12);
      uint64_t v25 = (uint64_t *)(a1 + 24);
      sub_2F7950((uint64_t *)a1, (unsigned int *)(a1 + 12), (uint64_t *)(a1 + 24));
      uint64_t v26 = (uint64_t *)(a2 - 3);
      unsigned int v27 = *(a2 - 3);
      unsigned int v28 = *(_DWORD *)(a1 + 24);
      if (v27 < v28 || (BOOL result = 1, v28 >= v27) && *(a2 - 2) < *(_DWORD *)(a1 + 28))
      {
        char v29 = *(_DWORD *)(a1 + 32);
        uint64_t v30 = *v25;
        char v31 = *((unsigned char *)a2 - 4);
        *uint64_t v25 = *v26;
        *(unsigned char *)(a1 + 32) = v31;
        *uint64_t v26 = v30;
        *((unsigned char *)a2 - 4) = v29;
        if (*(_DWORD *)v25 < *(_DWORD *)v24
          || (BOOL result = 1, *(_DWORD *)v24 >= *(_DWORD *)v25) && *(_DWORD *)(a1 + 28) < *(_DWORD *)(a1 + 16))
        {
          char v32 = *(_DWORD *)(a1 + 20);
          uint64_t v33 = *v24;
          *unsigned int v24 = *v25;
          *(unsigned char *)(a1 + 20) = *(unsigned char *)(a1 + 32);
          *uint64_t v25 = v33;
          *(unsigned char *)(a1 + 32) = v32;
          unsigned int v34 = *(_DWORD *)(a1 + 12);
          if (v34 < *(_DWORD *)a1 || (BOOL result = 1, *(_DWORD *)a1 >= v34) && *(_DWORD *)(a1 + 16) < *(_DWORD *)(a1 + 4))
          {
            int v35 = *(_DWORD *)(a1 + 8);
            uint64_t v36 = *(void *)a1;
            *(void *)a1 = *v24;
            *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 20);
            *unsigned int v24 = v36;
            *(unsigned char *)(a1 + 20) = v35;
            return 1;
          }
        }
      }
      return result;
    case 5uLL:
      sub_2F8158(a1, (unsigned int *)(a1 + 12), a1 + 24, (uint64_t *)(a1 + 36), (uint64_t *)(a2 - 3));
      return 1;
    default:
      unsigned int v6 = (unsigned int *)(a1 + 24);
      sub_2F7950((uint64_t *)a1, (unsigned int *)(a1 + 12), (uint64_t *)(a1 + 24));
      uint64_t v7 = (unsigned int *)(a1 + 36);
      if ((unsigned int *)(a1 + 36) == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    unsigned int v11 = *v7;
    if (*v7 < *v6) {
      break;
    }
    unsigned int v12 = v7[1];
    if (*v6 >= v11 && v12 < v6[1]) {
      goto LABEL_14;
    }
LABEL_7:
    unsigned int v6 = v7;
    v8 += 12;
    v7 += 3;
    if (v7 == a2) {
      return 1;
    }
  }
  unsigned int v12 = v7[1];
LABEL_14:
  unsigned int v14 = v7[2];
  *(void *)uint64_t v7 = *(void *)v6;
  *((unsigned char *)v7 + 8) = *((unsigned char *)v6 + 8);
  uint64_t v10 = a1;
  if (v6 != (unsigned int *)a1)
  {
    uint64_t v15 = v8;
    while (1)
    {
      unsigned int v16 = *(_DWORD *)(a1 + v15 + 12);
      if (v11 >= v16 && (v16 < v11 || v12 >= *(_DWORD *)(a1 + v15 + 16))) {
        break;
      }
      *(void *)(a1 + v15 + 24) = *(void *)(a1 + v15 + 12);
      *(unsigned char *)(a1 + v15 + 32) = *(unsigned char *)(a1 + v15 + 20);
      v15 -= 12;
      if (v15 == -24)
      {
        uint64_t v10 = a1;
        goto LABEL_6;
      }
    }
    uint64_t v10 = a1 + v15 + 24;
  }
LABEL_6:
  *(_DWORD *)uint64_t v10 = v11;
  *(_DWORD *)(v10 + 4) = v12;
  *(unsigned char *)(v10 + 8) = v14;
  if (++v9 != 8) {
    goto LABEL_7;
  }
  return v7 + 3 == a2;
}

uint64_t sub_2F8158(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = sub_2F7950((uint64_t *)a1, a2, (uint64_t *)a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3
    || (*(_DWORD *)a3 >= *(_DWORD *)a4 ? (BOOL v11 = *((_DWORD *)a4 + 1) >= *(_DWORD *)(a3 + 4)) : (BOOL v11 = 1), !v11))
  {
    char v12 = *(_DWORD *)(a3 + 8);
    uint64_t v13 = *(void *)a3;
    char v14 = *((unsigned char *)a4 + 8);
    *(void *)a3 = *a4;
    *(unsigned char *)(a3 + 8) = v14;
    *a4 = v13;
    *((unsigned char *)a4 + 8) = v12;
    if (*(_DWORD *)a3 < *a2 || *a2 >= *(_DWORD *)a3 && *(_DWORD *)(a3 + 4) < a2[1])
    {
      char v15 = a2[2];
      uint64_t v16 = *(void *)a2;
      char v17 = *(unsigned char *)(a3 + 8);
      *(void *)a2 = *(void *)a3;
      *((unsigned char *)a2 + 8) = v17;
      *(void *)a3 = v16;
      *(unsigned char *)(a3 + 8) = v15;
      if (*a2 < *(_DWORD *)a1 || *(_DWORD *)a1 >= *a2 && a2[1] < *(_DWORD *)(a1 + 4))
      {
        int v18 = *(_DWORD *)(a1 + 8);
        uint64_t v19 = *(void *)a1;
        char v20 = *((unsigned char *)a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = v20;
        *(void *)a2 = v19;
        *((unsigned char *)a2 + 8) = v18;
      }
    }
  }
  if (*(_DWORD *)a5 < *(_DWORD *)a4 || *(_DWORD *)a4 >= *(_DWORD *)a5 && *((_DWORD *)a5 + 1) < *((_DWORD *)a4 + 1))
  {
    char v21 = *((_DWORD *)a4 + 2);
    uint64_t v22 = *a4;
    char v23 = *((unsigned char *)a5 + 8);
    *a4 = *a5;
    *((unsigned char *)a4 + 8) = v23;
    *a5 = v22;
    *((unsigned char *)a5 + 8) = v21;
    if (*(_DWORD *)a4 < *(_DWORD *)a3 || *(_DWORD *)a3 >= *(_DWORD *)a4 && *((_DWORD *)a4 + 1) < *(_DWORD *)(a3 + 4))
    {
      char v24 = *(_DWORD *)(a3 + 8);
      uint64_t v25 = *(void *)a3;
      char v26 = *((unsigned char *)a4 + 8);
      *(void *)a3 = *a4;
      *(unsigned char *)(a3 + 8) = v26;
      *a4 = v25;
      *((unsigned char *)a4 + 8) = v24;
      if (*(_DWORD *)a3 < *a2 || *a2 >= *(_DWORD *)a3 && *(_DWORD *)(a3 + 4) < a2[1])
      {
        char v27 = a2[2];
        uint64_t v28 = *(void *)a2;
        char v29 = *(unsigned char *)(a3 + 8);
        *(void *)a2 = *(void *)a3;
        *((unsigned char *)a2 + 8) = v29;
        *(void *)a3 = v28;
        *(unsigned char *)(a3 + 8) = v27;
        if (*a2 < *(_DWORD *)a1 || *(_DWORD *)a1 >= *a2 && a2[1] < *(_DWORD *)(a1 + 4))
        {
          int v30 = *(_DWORD *)(a1 + 8);
          uint64_t v31 = *(void *)a1;
          char v32 = *((unsigned char *)a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(unsigned char *)(a1 + 8) = v32;
          *(void *)a2 = v31;
          *((unsigned char *)a2 + 8) = v30;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2F839C(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 2)))
    {
      uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 2)) | 1;
      unsigned int v6 = (unsigned int *)(result + 12 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2 < a3)
      {
        unsigned int v7 = v6[3];
        if (*v6 < v7 || (v7 >= *v6 ? (BOOL v8 = *(_DWORD *)(result + 12 * v5 + 4) >= v6[4]) : (BOOL v8 = 1), !v8))
        {
          v6 += 3;
          uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 2) + 2;
        }
      }
      unsigned int v9 = *a4;
      if (*v6 >= *a4)
      {
        unsigned int v10 = a4[1];
        if (v9 < *v6 || v6[1] >= v10)
        {
          unsigned int v12 = a4[2];
          do
          {
            uint64_t v13 = a4;
            a4 = v6;
            uint64_t v14 = *(void *)v6;
            *((unsigned char *)v13 + 8) = *((unsigned char *)a4 + 8);
            *(void *)uint64_t v13 = v14;
            if (v4 < v5) {
              break;
            }
            uint64_t v15 = (2 * v5) | 1;
            unsigned int v6 = (unsigned int *)(result + 12 * v15);
            uint64_t v16 = 2 * v5 + 2;
            if (v16 < a3)
            {
              unsigned int v17 = v6[3];
              if (*v6 < v17 || (v17 >= *v6 ? (BOOL v18 = *(_DWORD *)(result + 12 * v15 + 4) >= v6[4]) : (BOOL v18 = 1), !v18))
              {
                v6 += 3;
                uint64_t v15 = v16;
              }
            }
            if (*v6 < v9) {
              break;
            }
            BOOL v19 = v9 < *v6 || v6[1] >= v10;
            uint64_t v5 = v15;
          }
          while (v19);
          *a4 = v9;
          a4[1] = v10;
          *((unsigned char *)a4 + 8) = v12;
        }
      }
    }
  }
  return result;
}

char *sub_2F84E4(char *result, char *a2)
{
  if (a2 - result >= 13)
  {
    int64_t v2 = (a2 - result) / 0xCuLL;
    do
    {
      uint64_t v4 = 0;
      uint64_t v28 = *(void *)result;
      int v29 = *((_DWORD *)result + 2);
      uint64_t v5 = result;
      do
      {
        unsigned int v7 = v5;
        uint64_t v8 = v4 + 1;
        v5 += 12 * v4 + 12;
        uint64_t v9 = 2 * v4;
        uint64_t v4 = (2 * v4) | 1;
        int64_t v10 = v9 + 2;
        if (v10 < v2)
        {
          unsigned int v11 = *((_DWORD *)v5 + 3);
          if (*(_DWORD *)v5 < v11
            || ((unsigned int v12 = *(_DWORD *)&v7[12 * v8 + 4], v11 >= *(_DWORD *)v5)
              ? (BOOL v13 = v12 >= *((_DWORD *)v5 + 4))
              : (BOOL v13 = 1),
                !v13))
          {
            v5 += 12;
            uint64_t v4 = v10;
          }
        }
        uint64_t v6 = *(void *)v5;
        v7[8] = v5[8];
        *(void *)unsigned int v7 = v6;
      }
      while (v4 <= (uint64_t)((unint64_t)(v2 - 2) >> 1));
      a2 -= 12;
      if (v5 == a2)
      {
        v5[8] = v29;
        *(void *)uint64_t v5 = v28;
      }
      else
      {
        uint64_t v14 = *(void *)a2;
        v5[8] = a2[8];
        *(void *)uint64_t v5 = v14;
        *(void *)a2 = v28;
        a2[8] = v29;
        uint64_t v15 = v5 - result + 12;
        if (v15 >= 13)
        {
          unint64_t v16 = v15 / 0xCuLL - 2;
          unint64_t v17 = v16 >> 1;
          BOOL v18 = &result[12 * (v16 >> 1)];
          unsigned int v19 = *(_DWORD *)v5;
          unsigned int v20 = *((_DWORD *)v5 + 1);
          if (*(_DWORD *)v18 < *(_DWORD *)v5
            || (v19 >= *(_DWORD *)v18 ? (BOOL v21 = *(_DWORD *)&result[12 * v17 + 4] >= v20) : (BOOL v21 = 1), !v21))
          {
            int v22 = *((_DWORD *)v5 + 2);
            char v23 = v18[8];
            *(void *)uint64_t v5 = *(void *)v18;
            v5[8] = v23;
            if (v16 >= 2)
            {
              while (1)
              {
                unint64_t v25 = v17 - 1;
                unint64_t v17 = (v17 - 1) >> 1;
                char v26 = &result[12 * v17];
                if (*(_DWORD *)v26 >= v19 && (v19 < *(_DWORD *)v26 || *(_DWORD *)&result[12 * v17 + 4] >= v20)) {
                  break;
                }
                uint64_t v24 = *(void *)v26;
                unsigned char v18[8] = v26[8];
                *(void *)BOOL v18 = v24;
                BOOL v18 = &result[12 * v17];
                if (v25 <= 1) {
                  goto LABEL_33;
                }
              }
            }
            char v26 = v18;
LABEL_33:
            *(_DWORD *)char v26 = v19;
            *((_DWORD *)v26 + 1) = v20;
            v26[8] = v22;
          }
        }
      }
    }
    while (v2-- > 2);
  }
  return result;
}

uint64_t sub_2F86BC(void *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  uint64_t v5 = (uint64_t)(a1 + 6);
  unsigned int v6 = a2 + 1;
  uint64_t v7 = v4 - v3;
  unsigned int v8 = ((unint64_t)(v4 - v3) >> 2) - 1;
  if (a2 + 1 < v8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "outgoing arc cannot be inserted because vertices with higher index are already present in the graph");
    unint64_t v17 = (void *)sub_2F404((uint64_t)exception, &v18);
  }
  if (v8 <= a2)
  {
    unint64_t v11 = a2 + 2;
    uint64_t v12 = a1[1];
    unint64_t v13 = (v12 - *a1) >> 2;
    if (v11 <= v13)
    {
      if (v11 < v13) {
        a1[1] = *a1 + 4 * v11;
      }
    }
    else
    {
      sub_500DC((uint64_t)a1, v11 - v13, (const float *)(v12 - 4));
      uint64_t v3 = a1[6];
      uint64_t v4 = a1[7];
      uint64_t v7 = v4 - v3;
    }
    unint64_t v14 = v7 >> 2;
    if (v11 <= v14)
    {
      if (v11 < v14) {
        a1[7] = v3 + 4 * v11;
      }
    }
    else
    {
      sub_500DC(v5, v11 - v14, (const float *)(v4 - 4));
    }
  }
  sub_745A4((uint64_t)(a1 + 9), a3);
  ++*(_DWORD *)(a1[6] + 4 * v6);
  return a1[10] - 4;
}

void sub_2F87F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2F8824(void *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  uint64_t v5 = (uint64_t)(a1 + 6);
  unsigned int v6 = a2 + 1;
  uint64_t v7 = v4 - v3;
  unsigned int v8 = ((unint64_t)(v4 - v3) >> 2) - 1;
  if (a2 + 1 < v8)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "incoming arc cannot be inserted because vertices with higher index are already present in the graph");
    unint64_t v17 = (void *)sub_2F404((uint64_t)exception, &v18);
  }
  if (v8 <= a2)
  {
    unint64_t v11 = a2 + 2;
    uint64_t v12 = a1[1];
    unint64_t v13 = (v12 - *a1) >> 2;
    if (v11 <= v13)
    {
      if (v11 < v13) {
        a1[1] = *a1 + 4 * v11;
      }
    }
    else
    {
      sub_500DC((uint64_t)a1, v11 - v13, (const float *)(v12 - 4));
      uint64_t v3 = a1[6];
      uint64_t v4 = a1[7];
      uint64_t v7 = v4 - v3;
    }
    unint64_t v14 = v7 >> 2;
    if (v11 <= v14)
    {
      if (v11 < v14) {
        a1[7] = v3 + 4 * v11;
      }
    }
    else
    {
      sub_500DC(v5, v11 - v14, (const float *)(v4 - 4));
    }
  }
  sub_745A4((uint64_t)(a1 + 3), a3);
  ++*(_DWORD *)(*a1 + 4 * v6);
  return a1[4] - 4;
}

void sub_2F895C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2F898C(unint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v7 = a1[1];
  unint64_t v6 = a1[2];
  unsigned int v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3) {
        goto LABEL_46;
      }
      unint64_t v17 = v16 + 1;
      unsigned int v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      int64x2_t v18 = vdupq_lane_s64(*a3, 0);
      unsigned int v19 = (int64x2_t *)(v7 + 16);
      uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v19[-1] = v18;
        int64x2_t *v19 = v18;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_46:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      unsigned int v8 = (uint64_t *)(v7 + 8 * a2);
    }
    a1[1] = (unint64_t)v8;
  }
  else
  {
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + a2;
    if (v11 >> 61) {
      sub_2E00();
    }
    uint64_t v12 = v6 - *a1;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= v11) {
      uint64_t v13 = (v9 >> 3) + a2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_188D718();
      }
      uint64_t v15 = (char *)operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[8 * v10];
    int v22 = (uint64_t *)(v21 + 8 * a2);
    unint64_t v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v24 = (uint64_t *)v21;
    if (v23 < 0x13) {
      goto LABEL_47;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      uint64_t v24 = (uint64_t *)&v15[8 * v10];
      if (&v15[8 * a2 + v9] > (char *)a3) {
        goto LABEL_47;
      }
    }
    unint64_t v25 = v23 + 1;
    uint64_t v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    int64x2_t v26 = vdupq_lane_s64(*a3, 0);
    char v27 = (int64x2_t *)&v15[8 * v10 + 16];
    uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *char v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_47:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    int v29 = (uint64_t *)*a1;
    if (v7 != *a1)
    {
      unint64_t v30 = v7 - *a1 - 8;
      if (v30 < 0x58) {
        goto LABEL_48;
      }
      if (v7 - (unint64_t)&v15[v9] < 0x20) {
        goto LABEL_48;
      }
      uint64_t v31 = (v30 >> 3) + 1;
      uint64_t v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned int v8 = (uint64_t *)(v7 - v32);
      v21 -= v32;
      uint64_t v33 = &v15[8 * v10 - 16];
      unsigned int v34 = (long long *)(v7 - 16);
      uint64_t v35 = v31 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v36 = *v34;
        *((_OWORD *)v33 - 1) = *(v34 - 1);
        *(_OWORD *)uint64_t v33 = v36;
        v33 -= 32;
        v34 -= 2;
        v35 -= 4;
      }
      while (v35);
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_48:
        do
        {
          uint64_t v37 = *--v8;
          *(void *)(v21 - 8) = v37;
          v21 -= 8;
        }
        while (v8 != v29);
      }
      unsigned int v8 = (uint64_t *)*a1;
    }
    *a1 = v21;
    a1[1] = (unint64_t)v22;
    a1[2] = (unint64_t)&v15[8 * v14];
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_2F8C04()
{
  unk_255710F = 16641;
  word_25570F8 = 65;
  byte_2557127 = 1;
  byte_2557111 = 0;
}

void sub_2F8C2C(char **a1@<X0>, __int16 **a2@<X1>, uint64_t *a3@<X8>)
{
  char v4 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v59 = xmmword_20B8E30;
  uint64_t v60 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v5 = &a1[1][(void)*a1];
  unsigned int v56 = *a1;
  uint32x4_t v57 = v5;
  uint64_t v58 = 0x2C700000000;
  while (sub_2F333C((uint64_t)&v56))
  {
    if (v58 == 1)
    {
      unsigned int v63 = sub_2F3488(&v56);
      uint32x4_t v64 = &v63[v6];
      uint64_t v65 = 0x2C700000000;
      double v7 = 0.0;
      double v8 = 0.0;
      double v9 = 0.0;
      double v10 = 0.0;
      while (sub_2F333C((uint64_t)&v63))
      {
        switch((int)v65)
        {
          case 1:
            double v10 = *(double *)v63;
            v63 += 8;
            if (v63 > v64)
            {
              exception = __cxa_allocate_exception(0x40uLL);
              uint64_t v66 = (char *)operator new(0x30uLL);
              long long v67 = xmmword_20E1380;
              strcpy(v66, "Skipping over bytes exceeded message length.");
              int64x2_t v51 = (void *)sub_2F404((uint64_t)exception, (long long *)&v66);
            }
            return;
          case 2:
            double v9 = *(double *)v63;
            v63 += 8;
            if (v63 > v64)
            {
              int64x2_t v48 = __cxa_allocate_exception(0x40uLL);
              uint64_t v66 = (char *)operator new(0x30uLL);
              long long v67 = xmmword_20E1380;
              strcpy(v66, "Skipping over bytes exceeded message length.");
              unsigned int v49 = (void *)sub_2F404((uint64_t)v48, (long long *)&v66);
            }
            return;
          case 3:
            double v8 = *(double *)v63;
            v63 += 8;
            if (v63 > v64)
            {
              uint64_t v46 = __cxa_allocate_exception(0x40uLL);
              uint64_t v66 = (char *)operator new(0x30uLL);
              long long v67 = xmmword_20E1380;
              strcpy(v66, "Skipping over bytes exceeded message length.");
              uint64_t v47 = (void *)sub_2F404((uint64_t)v46, (long long *)&v66);
            }
            return;
          case 4:
            double v7 = *(double *)v63;
            v63 += 8;
            if (v63 > v64)
            {
              uint16x8_t v44 = __cxa_allocate_exception(0x40uLL);
              uint64_t v66 = (char *)operator new(0x30uLL);
              long long v67 = xmmword_20E1380;
              strcpy(v66, "Skipping over bytes exceeded message length.");
              BOOL v45 = (void *)sub_2F404((uint64_t)v44, (long long *)&v66);
            }
            return;
          default:
            sub_2F3548((uint64_t)&v63);
            break;
        }
      }
      uint64_t v11 = -1;
      if (v9 <= 180.0 && v9 >= -180.0 && v10 >= -85.0511288 && v10 <= 85.0511288)
      {
        double v12 = fmax(v10, -85.0511288);
        double v13 = v12 * 3.14159265 / 180.0;
        BOOL v14 = v12 < 85.0511288;
        double v15 = 1.48442223;
        if (v14) {
          double v15 = v13;
        }
        long double v16 = sin(v15);
        LODWORD(v17) = ((log((v16 + 1.0) / (1.0 - v16)) / -12.5663706 + 0.5) * 4294967300.0);
        if (v17 >= 0xFFFFFFFE) {
          uint64_t v17 = 4294967294;
        }
        else {
          uint64_t v17 = v17;
        }
        uint64_t v11 = ((v9 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v17 << 32);
      }
      uint64_t v66 = (char *)v11;
      LODWORD(v67) = 0x7FFFFFFF;
      uint64_t v18 = -1;
      if (v7 <= 180.0 && v7 >= -180.0 && v8 >= -85.0511288 && v8 <= 85.0511288)
      {
        double v19 = fmax(v8, -85.0511288);
        double v20 = v19 * 3.14159265 / 180.0;
        BOOL v14 = v19 < 85.0511288;
        double v21 = 1.48442223;
        if (v14) {
          double v21 = v20;
        }
        long double v22 = sin(v21);
        LODWORD(v23) = ((log((v22 + 1.0) / (1.0 - v22)) / -12.5663706 + 0.5) * 4294967300.0);
        if (v23 >= 0xFFFFFFFE) {
          uint64_t v23 = 4294967294;
        }
        else {
          uint64_t v23 = v23;
        }
        uint64_t v18 = ((v7 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v23 << 32);
      }
      uint64_t v61 = v18;
      int v62 = 0x7FFFFFFF;
      sub_3392C((uint64_t)&v54, (unsigned int *)&v66, (unsigned int *)&v61);
      long long v59 = v54;
      uint64_t v60 = v55;
      if (!sub_344C4(&v59)) {
        return;
      }
    }
    else if (v58 == 2)
    {
      unsigned int v24 = sub_2F39B0(&v56, v57);
      if (v24 >= 7) {
        char v4 = 0;
      }
      else {
        char v4 = v24;
      }
    }
    else
    {
      sub_2F3548((uint64_t)&v56);
    }
  }
  uint64_t v66 = 0;
  long long v67 = 0uLL;
  sub_2F9430(&v59, 10, (int **)&v66);
  sub_29722C((int **)&v66);
  unint64_t v25 = (int *)v66;
  uint64_t v53 = (int *)v67;
  if (v66 != (char *)v67 && *a2 != a2[1])
  {
    unint64_t v26 = 0;
    do
    {
      char v27 = *a2;
      uint64_t v28 = a2[1];
      if (*a2 != v28)
      {
        int v29 = *v25;
        do
        {
          __int16 v30 = *v27;
          unint64_t v31 = a3[2];
          if (v26 < v31)
          {
            sub_359184(v26, v29, *v27, v4);
            v26 += 8;
            a3[1] = v26;
          }
          else
          {
            uint64_t v32 = (uint64_t)(v26 - *a3) >> 3;
            if ((unint64_t)(v32 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v33 = v31 - *a3;
            uint64_t v34 = v33 >> 2;
            if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
              uint64_t v34 = v32 + 1;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v34;
            }
            if (v35)
            {
              if (v35 >> 61) {
                sub_188D718();
              }
              long long v36 = (char *)operator new(8 * v35);
            }
            else
            {
              long long v36 = 0;
            }
            uint64_t v37 = sub_359184((uint64_t)&v36[8 * v32], v29, v30, v4);
            uint64_t v39 = *a3;
            uint64_t v38 = a3[1];
            uint64_t v40 = v37;
            if (v38 != *a3)
            {
              do
              {
                int v41 = *(_DWORD *)(v38 - 8);
                v38 -= 8;
                int v42 = *(_DWORD *)(v38 + 3);
                *(_DWORD *)(v40 - 8) = v41;
                v40 -= 8;
                *(_DWORD *)(v40 + 3) = v42;
              }
              while (v38 != v39);
              uint64_t v38 = *a3;
            }
            int64x2_t v43 = &v36[8 * v35];
            unint64_t v26 = v37 + 8;
            *a3 = v40;
            a3[1] = v37 + 8;
            a3[2] = (uint64_t)v43;
            if (v38) {
              operator delete((void *)v38);
            }
          }
          a3[1] = v26;
          ++v27;
        }
        while (v27 != v28);
      }
      ++v25;
    }
    while (v25 != v53);
    unint64_t v25 = (int *)v66;
  }
  if (v25)
  {
    *(void *)&long long v67 = v25;
    operator delete(v25);
  }
}

void sub_2F932C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v38 = *(void **)v37;
    if (!*(void *)v37) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v38 = *(void **)v37;
    if (!*(void *)v37) {
LABEL_7:
    }
      _Unwind_Resume(exception_object);
  }
  *(void *)(v37 + 8) = v38;
  operator delete(v38);
  goto LABEL_7;
}

void sub_2F9430(_DWORD *a1, int a2, int **a3)
{
  if (sub_344C4(a1))
  {
    unsigned int v6 = 1;
    if (a2)
    {
      unsigned int v7 = a1[4];
      if (v7 >= 0xFFFFFFFE) {
        unsigned int v7 = -2;
      }
      int v8 = -a2;
      unsigned int v9 = v7 >> -(char)a2;
      int v10 = -1 << a2;
      unsigned int v11 = ~(-1 << a2);
      unsigned int v12 = v11 < *a1 >> -(char)a2 ? ~v10 : *a1 >> -(char)a2;
      unsigned int v13 = v11 < v9 ? ~v10 : v9;
      int v14 = 1 << (2 * a2);
      sub_518C8(v12, v13);
      uint64_t v16 = v15 | v14;
      unsigned int v17 = v11 < a1[3] >> v8 ? ~v10 : a1[3] >> v8;
      unsigned int v18 = v11 < a1[4] >> v8 ? ~v10 : a1[4] >> v8;
      sub_518C8(v17, v18);
      unsigned int v6 = v19 | v14;
      unsigned int v20 = v11 < *a1 >> v8 ? ~v10 : *a1 >> v8;
      BOOL v21 = v11 >= a1[1] >> v8;
      uint64_t v22 = v16;
      unsigned int v23 = v21 ? a1[1] >> v8 : ~v10;
      sub_518C8(v20, v23);
      unsigned int v25 = v24 | v14;
    }
    else
    {
      uint64_t v22 = 1;
      unsigned int v25 = 1;
    }
    char v26 = sub_511FC(v25);
    int v27 = sub_51938((v25 & ~(-1 << (v26 & 0xFE))) >> 1);
    char v28 = sub_511FC(v22);
    int v29 = v27 - sub_51938((v22 & ~(-1 << (v28 & 0xFE))) >> 1);
    char v30 = sub_511FC(v6);
    int v31 = sub_51938(v6 & ~(-1 << (v30 & 0xFE)));
    char v32 = sub_511FC(v25);
    int v33 = sub_51938(v25 & ~(-1 << (v32 & 0xFE)));
    int v96 = v29;
    if (v29 != -1)
    {
      int v34 = 0;
      int v97 = v31 - v33;
      unsigned int v95 = v31 - v33 + 1;
      while (1)
      {
        if (v34 && v34 != v96)
        {
          unsigned int v36 = sub_511FC(v22);
          unsigned int v37 = v36 >> 1;
          char v38 = v36 & 0xFE;
          unsigned int v39 = v22 & ~(-1 << (v36 & 0xFE));
          int v40 = sub_51938(v39);
          int v41 = sub_51938(v39 >> 1);
          unsigned int v42 = (int)(((((((v41 + v34) & ~((v41 + v34) >> 31)) - (v41 + v34) + ((v41 + v34) >> 31)) >> v37)
                      + ((v41 + v34) >> 31)) << v37)
                    + v41
                    + v34)
              % (1 << v37);
          int v43 = -1 << v37;
          unsigned int v44 = ~(-1 << v37);
          if (v44 < (int)((((((v40 & ~(v40 >> 31)) - v40 + (v40 >> 31)) >> v37)
                           + (v40 >> 31)) << v37)
                         + v40)
                   % (1 << v37))
            unsigned int v45 = ~v43;
          else {
            unsigned int v45 = (int)((((((v40 & ~(v40 >> 31)) - v40 + (v40 >> 31)) >> v37) + (v40 >> 31)) << v37)
          }
                      + v40)
                % (1 << v37);
          if (v44 < v42) {
            unsigned int v46 = ~v43;
          }
          else {
            unsigned int v46 = v42;
          }
          sub_518C8(v45, v46);
          int v100 = v47 | (1 << v38);
          sub_745A4((uint64_t)a3, &v100);
          if (v95 >= 2)
          {
            unsigned int v48 = sub_511FC(v22);
            unsigned int v49 = v48 >> 1;
            char v50 = v48 & 0xFE;
            unsigned int v51 = v22 & ~(-1 << (v48 & 0xFE));
            int v52 = sub_51938(v51);
            int v53 = sub_51938(v51 >> 1);
            unsigned int v54 = (int)(((((((v53 + v34) & ~((v53 + v34) >> 31)) - (v53 + v34) + ((v53 + v34) >> 31)) >> v49)
                        + ((v53 + v34) >> 31)) << v49)
                      + v53
                      + v34)
                % (1 << v49);
            int v55 = -1 << v49;
            unsigned int v56 = ~(-1 << v49);
            if (v56 < (int)(((((((v52 + v97) & ~((v52 + v97) >> 31)) - (v52 + v97) + ((v52 + v97) >> 31)) >> v49)
                             + ((v52 + v97) >> 31)) << v49)
                           + v52
                           + v97)
                     % (1 << v49))
              unsigned int v57 = ~v55;
            else {
              unsigned int v57 = (int)(((((((v52 + v97) & ~((v52 + v97) >> 31)) - (v52 + v97) + ((v52 + v97) >> 31)) >> v49)
            }
                          + ((v52 + v97) >> 31)) << v49)
                        + v52
                        + v97)
                  % (1 << v49);
            if (v56 < v54) {
              unsigned int v58 = ~v55;
            }
            else {
              unsigned int v58 = v54;
            }
            sub_518C8(v57, v58);
            int v99 = v59 | (1 << v50);
            sub_745A4((uint64_t)a3, &v99);
          }
          goto LABEL_27;
        }
        if (v95) {
          break;
        }
LABEL_27:
        BOOL v35 = v34++ == v96;
        if (v35) {
          return;
        }
      }
      int v60 = 0;
      int v98 = v34;
      while (1)
      {
        unsigned int v62 = sub_511FC(v22);
        unsigned int v63 = v62 >> 1;
        char v64 = v62 & 0xFE;
        unsigned int v65 = v22 & ~(-1 << (v62 & 0xFE));
        int v66 = sub_51938(v65);
        int v67 = sub_51938(v65 >> 1);
        unsigned int v68 = (int)(((((((v67 + v34) & ~((v67 + v34) >> 31)) - (v67 + v34) + ((v67 + v34) >> 31)) >> v63)
                    + ((v67 + v34) >> 31)) << v63)
                  + v67
                  + v34)
            % (1 << v63);
        int v69 = -1 << v63;
        unsigned int v70 = ~(-1 << v63);
        unsigned int v71 = v70 < (int)(((((((v66 + v60) & ~((v66 + v60) >> 31)) - (v66 + v60) + ((v66 + v60) >> 31)) >> v63)
                          + ((v66 + v60) >> 31)) << v63)
                        + v66
                        + v60)
                  % (1 << v63)
            ? ~v69
            : (int)(((((((v66 + v60) & ~((v66 + v60) >> 31)) - (v66 + v60) + ((v66 + v60) >> 31)) >> v63)
                    + ((v66 + v60) >> 31)) << v63)
                  + v66
                  + v60)
            % (1 << v63);
        unsigned int v72 = v70 < v68 ? ~v69 : v68;
        sub_518C8(v71, v72);
        int v74 = v73 | (1 << v64);
        int64x2_t v76 = a3[1];
        unint64_t v75 = (unint64_t)a3[2];
        if ((unint64_t)v76 >= v75) {
          break;
        }
        *int64x2_t v76 = v74;
        uint64_t v61 = (uint64_t)(v76 + 1);
LABEL_47:
        a3[1] = (int *)v61;
        int v34 = v98;
        BOOL v35 = v60++ == v97;
        if (v35) {
          goto LABEL_27;
        }
      }
      uint64_t v77 = v22;
      uint32x4_t v78 = *a3;
      uint64_t v79 = (char *)v76 - (char *)*a3;
      uint64_t v80 = v79 >> 2;
      unint64_t v81 = (v79 >> 2) + 1;
      if (v81 >> 62) {
        sub_2E00();
      }
      uint64_t v82 = v75 - (void)v78;
      if (v82 >> 1 > v81) {
        unint64_t v81 = v82 >> 1;
      }
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v83 = v81;
      }
      if (v83)
      {
        if (v83 >> 62) {
          sub_188D718();
        }
        double v84 = operator new(4 * v83);
        double v85 = (int *)&v84[4 * v80];
        int *v85 = v74;
        uint64_t v61 = (uint64_t)(v85 + 1);
        if (v76 == v78) {
          goto LABEL_72;
        }
      }
      else
      {
        double v84 = 0;
        double v85 = (int *)(4 * v80);
        *(_DWORD *)(4 * v80) = v74;
        uint64_t v61 = 4 * v80 + 4;
        if (v76 == v78)
        {
LABEL_72:
          *a3 = v85;
          a3[1] = (int *)v61;
          a3[2] = (int *)&v84[4 * v83];
          if (v78) {
            operator delete(v78);
          }
          uint64_t v22 = v77;
          goto LABEL_47;
        }
      }
      unint64_t v86 = (char *)(v76 - 1) - (char *)v78;
      if (v86 < 0x2C) {
        goto LABEL_80;
      }
      if ((unint64_t)((char *)v76 - &v84[v79]) < 0x20) {
        goto LABEL_80;
      }
      uint64_t v87 = (v86 >> 2) + 1;
      uint64_t v88 = 4 * (v87 & 0x7FFFFFFFFFFFFFF8);
      long double v89 = &v76[v88 / 0xFFFFFFFFFFFFFFFCLL];
      double v85 = (int *)((char *)v85 - v88);
      double v90 = &v84[4 * v80 - 16];
      double v91 = v76 - 4;
      uint64_t v92 = v87 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v93 = *(_OWORD *)v91;
        *(v90 - 1) = *((_OWORD *)v91 - 1);
        *double v90 = v93;
        v90 -= 2;
        v91 -= 8;
        v92 -= 8;
      }
      while (v92);
      int64x2_t v76 = v89;
      if (v87 != (v87 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_80:
        do
        {
          int v94 = *--v76;
          *--double v85 = v94;
        }
        while (v76 != v78);
      }
      goto LABEL_72;
    }
  }
}

void sub_2F99A4()
{
  unk_255713F = 16641;
  word_2557128 = 65;
  byte_2557157 = 1;
  byte_2557141 = 0;
}

void *sub_2F99CC(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

void sub_2F99D4(uint64_t *a1, int **a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  uint64_t v288 = a3 + 320;
  sub_2FB768((void *)(a3 + 320), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  long long v346 = 0u;
  long long v347 = 0u;
  int v348 = 1065353216;
  uint64_t v289 = v3;
  uint64_t v286 = -1431655765 * ((*(void *)(v3 + 8) - *(void *)v3) >> 3);
  if (v286)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v293 = v4;
      uint64_t v5 = *(void *)v3 + 24 * v4;
      unsigned int v6 = *(uint64_t **)v5;
      v290 = *(uint64_t **)(v5 + 8);
      if (*(uint64_t **)v5 != v290) {
        break;
      }
LABEL_3:
      uint64_t v4 = v293 + 1;
      if (v293 + 1 == v286) {
        goto LABEL_318;
      }
    }
    uint64_t v285 = 0x7FFFFFFFFFFFFFFFLL;
    while (1)
    {
      uint64_t v7 = *v6;
      if (!*v6) {
        goto LABEL_8;
      }
      unsigned int v287 = *v6;
      uint64_t v8 = *a1;
      unint64_t v294 = v7 & 0xFFFFFFFFFFFFLL;
      sub_2D5D58(*a1, v7 & 0xFFFFFFFFFFFFLL);
      if (*(unsigned char *)(v8 + 7772))
      {
        LODWORD(v299) = v7;
        LODWORD(__p[0]) = 0;
        *(void *)&v320[0] = __p;
        *((void *)&v320[0] + 1) = &v299;
        unint64_t v9 = *(void *)(v8 + 7752) + 1;
        *(void *)(v8 + 7752) = v9;
        uint64_t v10 = *(void *)(v8 + 3896);
        if (!v10) {
          goto LABEL_21;
        }
        uint64_t v11 = v8 + 3912;
        if (*(_DWORD *)(v8 + 4680) == v7)
        {
          unsigned int v12 = 32;
          goto LABEL_20;
        }
        if (*(_DWORD *)(v8 + 4704) == v7)
        {
          unsigned int v12 = 33;
          goto LABEL_20;
        }
        if (*(_DWORD *)(v8 + 4728) == v7)
        {
          unsigned int v12 = 34;
          goto LABEL_20;
        }
        if (*(_DWORD *)(v8 + 4752) == v7)
        {
          unsigned int v12 = 35;
LABEL_20:
          ++*(void *)(v8 + 7760);
          uint64_t v13 = v11 + 24 * v12;
          *(void *)(v13 + 8) = v9;
          if (*(void *)(v13 + 16)) {
            goto LABEL_22;
          }
LABEL_21:
          sub_2DBA70((int **)v320);
          goto LABEL_22;
        }
        unint64_t v24 = *(void *)(v8 + 4736);
        unint64_t v25 = *(void *)(v8 + 4712);
        unint64_t v26 = *(void *)(v8 + 4688);
        unint64_t v291 = *(void *)(v8 + 4760);
        uint64_t v27 = sub_2AB884(v10, 8, v287, 1);
        if (v26 >= v9) {
          unint64_t v28 = v9;
        }
        else {
          unint64_t v28 = v26;
        }
        BOOL v29 = v25 >= v28;
        if (v25 < v28) {
          unint64_t v28 = v25;
        }
        unsigned int v30 = 32 * (v26 < v9);
        if (!v29) {
          unsigned int v30 = 33;
        }
        if (v24 < v28)
        {
          unsigned int v30 = 34;
          unint64_t v28 = v24;
        }
        if (v291 < v28) {
          unsigned int v30 = 35;
        }
        uint64_t v31 = v11 + 24 * v30;
        *(_DWORD *)uint64_t v31 = v299;
        *(void *)(v31 + 8) = *(void *)(v8 + 7752);
        *(void *)(v31 + 16) = v27;
        if (!v27) {
          goto LABEL_21;
        }
      }
LABEL_22:
      if (!*(unsigned char *)(v8 + 7773)) {
        goto LABEL_65;
      }
      LODWORD(v299) = v7;
      LODWORD(__p[0]) = 1;
      *(void *)&v320[0] = __p;
      *((void *)&v320[0] + 1) = &v299;
      unint64_t v14 = *(void *)(v8 + 7752) + 1;
      *(void *)(v8 + 7752) = v14;
      uint64_t v15 = *(void *)(v8 + 3896);
      if (!v15)
      {
LABEL_64:
        sub_2E6128((int **)v320);
        goto LABEL_65;
      }
      uint64_t v16 = v8 + 3912;
      if (*(_DWORD *)(v8 + 6024) == v7)
      {
        unsigned int v17 = 88;
        goto LABEL_32;
      }
      if (*(_DWORD *)(v8 + 6048) == v7)
      {
        unsigned int v17 = 89;
        goto LABEL_32;
      }
      if (*(_DWORD *)(v8 + 6072) == v7)
      {
        unsigned int v17 = 90;
        goto LABEL_32;
      }
      if (*(_DWORD *)(v8 + 6096) == v7)
      {
        unsigned int v17 = 91;
LABEL_32:
        ++*(void *)(v8 + 7760);
        uint64_t v18 = v16 + 24 * v17;
        *(void *)(v18 + 8) = v14;
        int v19 = *(unsigned int **)(v18 + 16);
        if (!v19) {
          goto LABEL_64;
        }
        goto LABEL_33;
      }
      unint64_t v32 = *(void *)(v8 + 6080);
      unint64_t v33 = *(void *)(v8 + 6056);
      unint64_t v34 = *(void *)(v8 + 6032);
      unint64_t v35 = *(void *)(v8 + 6104);
      int v19 = (unsigned int *)sub_2AB884(v15, 22, v287, 1);
      if (v34 >= v14) {
        unint64_t v36 = v14;
      }
      else {
        unint64_t v36 = v34;
      }
      int v37 = 88;
      if (v34 >= v14) {
        int v37 = 0;
      }
      if (v33 < v36)
      {
        unint64_t v36 = v33;
        int v37 = 89;
      }
      if (v32 < v36)
      {
        int v37 = 90;
        unint64_t v36 = v32;
      }
      BOOL v29 = v35 >= v36;
      unsigned int v38 = 91;
      if (v29) {
        unsigned int v38 = v37;
      }
      uint64_t v39 = v16 + 24 * v38;
      *(_DWORD *)uint64_t v39 = v299;
      *(void *)(v39 + 8) = *(void *)(v8 + 7752);
      *(void *)(v39 + 16) = v19;
      if (!v19) {
        goto LABEL_64;
      }
LABEL_33:
      unsigned int v20 = (int *)((char *)v19 + *v19);
      BOOL v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 >= 0xBu)
      {
        if (v21[5])
        {
          uint64_t v22 = (int *)((char *)v20 + v21[5] + *(unsigned int *)((char *)v20 + v21[5]));
          if (*v22 > HIDWORD(v294))
          {
            unsigned int v23 = v22[2 * HIDWORD(v294) + 1];
            if (v23) {
              sub_2E5F98(v8 + 3896, v23, 1);
            }
          }
        }
      }
LABEL_65:
      unint64_t v40 = v292 & 0xFF00000000000000 | ((unint64_t)((v7 & 0xFF000000000000) != 0) << 48) | v294;
      int v41 = *(void ***)v288;
      uint64_t v42 = *(void *)v288 + 56 * v293;
      uint64_t v43 = *(void *)(v42 + 24);
      uint64_t v44 = *(void *)(v42 + 32);
      unsigned int v45 = (char **)(v42 + 24);
      if (v43 != v44) {
        goto LABEL_108;
      }
      sub_2954EC(*a1, v292 & 0xFF00000000000000 | ((unint64_t)((v7 & 0xFF000000000000) != 0) << 48) | v294, (uint64_t)__p);
      unsigned int v46 = __p[1];
      if (__p[1] == (void *)v308)
      {
        int v54 = 0x7FFFFFFF;
        unint64_t v55 = 0xFFFFFFFF00000000;
        uint64_t v56 = 0xFFFFFFFFLL;
        if (!__p[1]) {
          goto LABEL_90;
        }
        goto LABEL_89;
      }
      if ((_BYTE)v309)
      {
        unint64_t v47 = *(void *)(v308 - 8);
        unsigned int v48 = sub_2964C4((uint64_t)__p[0], v47, 1);
        unsigned int v49 = &v48[*(unsigned __int16 *)&v48[-*(int *)v48 + 4]];
        uint64_t v50 = (uint64_t)&v49[4 * HIDWORD(v47) + *(unsigned int *)v49];
        unsigned int v51 = (int *)(v50 + 4 + *(unsigned int *)(v50 + 4));
        int v52 = (unsigned int *)((char *)v51 + *(unsigned __int16 *)((char *)v51 - *v51 + 6));
        LODWORD(v52) = *(unsigned int *)((char *)v52 + *v52) - 1;
        v299 = __p[0];
        v300 = (void (__cdecl **)(std::stringbuf *__hidden))&__p[1];
        long long v301 = 0u;
        long long v302 = 0u;
        LODWORD(v303) = (((unint64_t)v308 - (unint64_t)__p[1]) >> 3) - 1;
        HIDWORD(v303) = v52;
        char v304 = 1;
        int v53 = &v299;
        sub_2E1D08((uint64_t)&v299);
      }
      else
      {
        *(void **)&v320[0] = __p[0];
        *((void *)&v320[0] + 1) = &__p[1];
        v320[1] = 0u;
        memset(v321, 0, 25);
        int v53 = (void **)v320;
        sub_2E1D08((uint64_t)v320);
      }
      uint64_t v57 = (uint64_t)v53[3] + 4 * *((unsigned int *)v53 + 13);
      int v58 = *(unsigned __int16 *)(v57 + 4);
      int v59 = *(unsigned __int16 *)(v57 + 6);
      unsigned int v60 = sub_511FC(*((_DWORD *)v53 + 10));
      unsigned int v61 = v53[5] & ~(-1 << (v60 & 0xFE));
      int v62 = sub_51938(v61);
      int v63 = sub_51938(v61 >> 1);
      char v64 = (int *)v53[2];
      uint64_t v65 = *((unsigned int *)v53 + 13);
      int v66 = (unsigned __int16 *)((char *)v64 - *v64);
      unsigned int v67 = *v66;
      if (v67 < 0xD)
      {
        if (v67 < 0xB) {
          goto LABEL_80;
        }
      }
      else if (v66[6])
      {
        int v54 = *(int *)((char *)&v64[v65 + 1] + v66[6] + *(unsigned int *)((char *)v64 + v66[6]));
        goto LABEL_83;
      }
      if (!v66[5]
        || (int v68 = *(unsigned __int16 *)((char *)v64 + 2 * v65 + v66[5] + *(unsigned int *)((char *)v64 + v66[5]) + 4),
            v68 == 0xFFFF))
      {
LABEL_80:
        int v54 = 0x7FFFFFFF;
        goto LABEL_83;
      }
      uint64_t v69 = v66[4];
      if (v69) {
        int v70 = *(int *)((char *)v64 + v69);
      }
      else {
        int v70 = 0;
      }
      int v54 = *((_DWORD *)v53 + 11) + v68 + v70;
LABEL_83:
      int v71 = 1 << -(v60 >> 1);
      if (v60 < 2) {
        int v71 = -2;
      }
      LODWORD(v72) = v63 * v71 + 4 * v59;
      if (v72 >= 0xFFFFFFFE) {
        uint64_t v72 = 4294967294;
      }
      else {
        uint64_t v72 = v72;
      }
      unint64_t v55 = v72 << 32;
      uint64_t v56 = (v62 * v71 + 4 * v58);
      unsigned int v46 = __p[1];
      if (!__p[1]) {
        goto LABEL_90;
      }
LABEL_89:
      *(void *)&long long v308 = v46;
      operator delete(v46);
LABEL_90:
      unint64_t v73 = v55 | v56;
      unint64_t v75 = v45[1];
      unint64_t v74 = (unint64_t)v45[2];
      if ((unint64_t)v75 >= v74)
      {
        uint64_t v77 = *v45;
        unint64_t v78 = 0xAAAAAAAAAAAAAAABLL * ((v75 - *v45) >> 2);
        unint64_t v79 = v78 + 1;
        if (v78 + 1 > 0x1555555555555555) {
          sub_2E00();
        }
        unint64_t v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - (void)v77) >> 2);
        if (2 * v80 > v79) {
          unint64_t v79 = 2 * v80;
        }
        if (v80 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v81 = 0x1555555555555555;
        }
        else {
          unint64_t v81 = v79;
        }
        if (v81)
        {
          if (v81 > 0x1555555555555555) {
            sub_188D718();
          }
          uint64_t v82 = (char *)operator new(12 * v81);
        }
        else
        {
          uint64_t v82 = 0;
        }
        unint64_t v83 = &v82[12 * v78];
        *(void *)unint64_t v83 = v73;
        *((_DWORD *)v83 + 2) = v54;
        double v84 = v83;
        if (v75 != v77)
        {
          do
          {
            uint64_t v85 = *(void *)(v75 - 12);
            v75 -= 12;
            int v86 = *((_DWORD *)v75 + 2);
            *(void *)(v84 - 12) = v85;
            v84 -= 12;
            *((_DWORD *)v84 + 2) = v86;
          }
          while (v75 != v77);
          unint64_t v75 = *v45;
        }
        int64x2_t v76 = v83 + 12;
        void *v45 = v84;
        v45[1] = v83 + 12;
        v45[2] = &v82[12 * v81];
        if (v75) {
          operator delete(v75);
        }
      }
      else
      {
        *(void *)unint64_t v75 = v73;
        *((_DWORD *)v75 + 2) = v54;
        int64x2_t v76 = v75 + 12;
      }
      v45[1] = v76;
      int v41 = *(void ***)v288;
LABEL_108:
      unint64_t v292 = v292 & 0xFF00000000000000 | ((unint64_t)((v7 & 0xFF000000000000) != 0) << 48) | v294;
      sub_2954EC(*a1, v40, (uint64_t)__p);
      uint64_t v87 = __p[1];
      if (__p[1] == (void *)v308)
      {
        int v93 = 0x7FFFFFFF;
        unint64_t v94 = 0xFFFFFFFF00000000;
        uint64_t v95 = 0xFFFFFFFFLL;
        if (__p[1]) {
          goto LABEL_219;
        }
        goto LABEL_220;
      }
      if (!(_BYTE)v309)
      {
        unint64_t v96 = *(void *)(v308 - 8);
        int v97 = __p[0];
        LODWORD(v297[0]) = v96;
        v349[0] = 1;
        v343 = v349;
        v344 = (char *)v297;
        unint64_t v98 = *((void *)__p[0] + 482) + 1;
        *((void *)__p[0] + 482) = v98;
        if (*(void *)v97)
        {
          int v99 = (char *)(v97 + 4);
          if (v97[28] == v96)
          {
            unsigned int v100 = 4;
            goto LABEL_133;
          }
          if (v97[34] == v96)
          {
            unsigned int v100 = 5;
            goto LABEL_133;
          }
          if (v97[40] == v96)
          {
            unsigned int v100 = 6;
            goto LABEL_133;
          }
          if (v97[46] == v96)
          {
            unsigned int v100 = 7;
LABEL_133:
            ++*((void *)v97 + 483);
            uint8x16_t v105 = &v99[24 * v100];
            *((void *)v105 + 1) = v98;
            uint16x8_t v106 = (unsigned int *)*((void *)v105 + 2);
            if (v106)
            {
LABEL_134:
              uint16x8_t v107 = (int *)((char *)v106 + *v106);
LABEL_201:
              uint64_t v145 = (unsigned int *)((char *)v107 + *(unsigned __int16 *)((char *)v107 - *v107 + 4));
              uint64_t v146 = (uint64_t)&v145[HIDWORD(v96)] + *v145;
              unint64_t v147 = (int *)(v146 + 4 + *(unsigned int *)(v146 + 4));
              unint64_t v148 = (unsigned int *)((char *)v147 + *(unsigned __int16 *)((char *)v147 - *v147 + 6));
              LODWORD(v148) = *(unsigned int *)((char *)v148 + *v148) - 1;
              *(void **)&v320[0] = __p[0];
              *((void *)&v320[0] + 1) = &__p[1];
              v320[1] = 0u;
              v321[0] = 0u;
              LODWORD(v321[1]) = (((unint64_t)v308 - (unint64_t)__p[1]) >> 3) - 1;
              DWORD1(v321[1]) = v148;
              BYTE8(v321[1]) = 0;
              sub_2E1D08((uint64_t)v320);
              uint64_t v134 = *((void *)&v320[1] + 1);
              int64x2_t v137 = (void **)v320;
              uint64_t v136 = DWORD1(v321[1]);
              LODWORD(v89) = DWORD2(v321[0]);
              goto LABEL_202;
            }
          }
          else
          {
            unint64_t v138 = *((void *)v97 + 21);
            unint64_t v139 = *((void *)v97 + 18);
            unint64_t v140 = *((void *)v97 + 15);
            unint64_t v284 = *((void *)v97 + 24);
            uint16x8_t v106 = (unsigned int *)sub_2AB884(*(void *)v97, 1, v96, 1);
            if (v140 >= v98) {
              unint64_t v141 = v98;
            }
            else {
              unint64_t v141 = v140;
            }
            BOOL v142 = v139 >= v141;
            if (v139 < v141) {
              unint64_t v141 = v139;
            }
            unsigned int v143 = 4 * (v140 < v98);
            if (!v142) {
              unsigned int v143 = 5;
            }
            if (v138 < v141)
            {
              unsigned int v143 = 6;
              unint64_t v141 = v138;
            }
            if (v284 < v141) {
              unsigned int v143 = 7;
            }
            double v144 = &v99[24 * v143];
            *(_DWORD *)double v144 = v297[0];
            *((void *)v144 + 1) = *((void *)v97 + 482);
            *((void *)v144 + 2) = v106;
            if (v106) {
              goto LABEL_134;
            }
          }
        }
        sub_296654(&v343);
        uint16x8_t v107 = 0;
        goto LABEL_201;
      }
      uint64_t v88 = __p[0];
      v299 = __p[0];
      v300 = (void (__cdecl **)(std::stringbuf *__hidden))&__p[1];
      uint64_t v303 = 0;
      long long v301 = 0u;
      long long v302 = 0u;
      char v304 = 1;
      unint64_t v89 = *(void *)__p[1];
      DWORD2(v302) = *(void *)__p[1];
      LODWORD(v297[0]) = v89;
      v349[0] = 1;
      v343 = v349;
      v344 = (char *)v297;
      unint64_t v90 = *((void *)__p[0] + 482) + 1;
      *((void *)__p[0] + 482) = v90;
      if (!*(void *)v88)
      {
LABEL_147:
        sub_296654(&v343);
        int64x2_t v103 = 0;
        int64x2_t v104 = (_WORD *)(&loc_1120530 + 1);
        if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
          goto LABEL_150;
        }
        goto LABEL_148;
      }
      double v91 = (char *)(v88 + 4);
      if (v88[28] == v89)
      {
        unsigned int v92 = 4;
        goto LABEL_128;
      }
      if (v88[34] == v89)
      {
        unsigned int v92 = 5;
        goto LABEL_128;
      }
      if (v88[40] == v89)
      {
        unsigned int v92 = 6;
        goto LABEL_128;
      }
      if (v88[46] == v89)
      {
        unsigned int v92 = 7;
LABEL_128:
        ++*((void *)v88 + 483);
        int64x2_t v101 = &v91[24 * v92];
        *((void *)v101 + 1) = v90;
        int64x2_t v102 = (unsigned int *)*((void *)v101 + 2);
        if (!v102) {
          goto LABEL_147;
        }
        goto LABEL_129;
      }
      unint64_t v108 = *((void *)v88 + 18);
      unint64_t v109 = *((void *)v88 + 15);
      unint64_t v280 = *((void *)v88 + 24);
      unint64_t v282 = *((void *)v88 + 21);
      int64x2_t v102 = (unsigned int *)sub_2AB884(*(void *)v88, 1, v89, 1);
      if (v109 >= v90) {
        unint64_t v110 = v90;
      }
      else {
        unint64_t v110 = v109;
      }
      BOOL v111 = v108 >= v110;
      if (v108 < v110) {
        unint64_t v110 = v108;
      }
      unsigned int v112 = 4 * (v109 < v90);
      if (!v111) {
        unsigned int v112 = 5;
      }
      if (v282 < v110)
      {
        unsigned int v112 = 6;
        unint64_t v110 = v282;
      }
      if (v280 < v110) {
        unsigned int v112 = 7;
      }
      uint32x4_t v113 = &v91[24 * v112];
      *(_DWORD *)uint32x4_t v113 = v297[0];
      *((void *)v113 + 1) = *((void *)v88 + 482);
      *((void *)v113 + 2) = v102;
      if (!v102) {
        goto LABEL_147;
      }
LABEL_129:
      int64x2_t v103 = (int *)((char *)v102 + *v102);
      int64x2_t v104 = (unsigned __int16 *)((char *)v103 - *v103);
      if (*v104 < 7u) {
        goto LABEL_150;
      }
LABEL_148:
      uint64_t v114 = v104[3];
      if (v114)
      {
        int v115 = *(int *)((char *)v103 + v114);
        goto LABEL_151;
      }
LABEL_150:
      int v115 = 0;
LABEL_151:
      HIDWORD(v302) = v115;
      LODWORD(v297[0]) = v89;
      v349[0] = 1;
      v343 = v349;
      v344 = (char *)v297;
      unint64_t v116 = *((void *)v88 + 482) + 1;
      *((void *)v88 + 482) = v116;
      if (!*(void *)v88) {
        goto LABEL_175;
      }
      uint16x8_t v117 = (char *)(v88 + 4);
      if (v88[28] == v89)
      {
        unsigned int v118 = 4;
        goto LABEL_160;
      }
      if (v88[34] == v89)
      {
        unsigned int v118 = 5;
        goto LABEL_160;
      }
      if (v88[40] == v89)
      {
        unsigned int v118 = 6;
        goto LABEL_160;
      }
      if (v88[46] == v89)
      {
        unsigned int v118 = 7;
LABEL_160:
        ++*((void *)v88 + 483);
        uint32x4_t v119 = &v117[24 * v118];
        *((void *)v119 + 1) = v116;
        uint32x4_t v120 = (unsigned int *)*((void *)v119 + 2);
        if (v120) {
          goto LABEL_161;
        }
        goto LABEL_175;
      }
      unint64_t v123 = *((void *)v88 + 18);
      unint64_t v124 = *((void *)v88 + 15);
      unint64_t v281 = *((void *)v88 + 24);
      unint64_t v283 = *((void *)v88 + 21);
      uint32x4_t v120 = (unsigned int *)sub_2AB884(*(void *)v88, 1, v89, 1);
      if (v124 >= v116) {
        unint64_t v125 = v116;
      }
      else {
        unint64_t v125 = v124;
      }
      BOOL v126 = v123 >= v125;
      if (v123 < v125) {
        unint64_t v125 = v123;
      }
      unsigned int v127 = 4 * (v124 < v116);
      if (!v126) {
        unsigned int v127 = 5;
      }
      if (v283 < v125)
      {
        unsigned int v127 = 6;
        unint64_t v125 = v283;
      }
      if (v281 < v125) {
        unsigned int v127 = 7;
      }
      int64x2_t v128 = &v117[24 * v127];
      *(_DWORD *)int64x2_t v128 = v297[0];
      *((void *)v128 + 1) = *((void *)v88 + 482);
      *((void *)v128 + 2) = v120;
      if (v120)
      {
LABEL_161:
        uint32x4_t v121 = (int *)((char *)v120 + *v120);
        uint32x4_t v122 = (unsigned __int16 *)((char *)v121 - *v121);
        if (*v122 < 5u) {
          goto LABEL_178;
        }
        goto LABEL_176;
      }
LABEL_175:
      sub_296654(&v343);
      uint32x4_t v121 = 0;
      uint32x4_t v122 = (_WORD *)(&loc_1120530 + 1);
      if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
        goto LABEL_178;
      }
LABEL_176:
      uint64_t v129 = v122[2];
      if (!v129)
      {
LABEL_178:
        int8x8_t v130 = 0;
        goto LABEL_179;
      }
      int8x8_t v130 = (char *)v121 + v129 + *(unsigned int *)((char *)v121 + v129);
LABEL_179:
      uint16x8_t v131 = &v130[4 * HIDWORD(v89) + 4 + *(unsigned int *)&v130[4 * HIDWORD(v89) + 4]];
      *(void *)&long long v301 = v131;
      uint32x4_t v132 = &v131[-*(int *)v131];
      unsigned int v133 = *(unsigned __int16 *)v132;
      if (v133 <= 6)
      {
        uint64_t v134 = 0;
        uint64_t v135 = 0;
        *((void *)&v301 + 1) = 0;
      }
      else
      {
        uint64_t v134 = *((unsigned __int16 *)v132 + 3);
        if (*((_WORD *)v132 + 3)) {
          v134 += (uint64_t)&v131[*(unsigned int *)&v131[v134]];
        }
        *((void *)&v301 + 1) = v134;
        if (v133 < 0xB)
        {
          uint64_t v135 = 0;
        }
        else
        {
          uint64_t v135 = *((unsigned __int16 *)v132 + 5);
          if (v135) {
            v135 += (uint64_t)&v131[*(unsigned int *)&v131[v135]];
          }
        }
      }
      uint64_t v136 = 0;
      *(void *)&long long v302 = v135;
      int64x2_t v137 = &v299;
LABEL_202:
      uint64_t v149 = v134 + 4 * v136;
      int v150 = *(unsigned __int16 *)(v149 + 4);
      int v151 = *(unsigned __int16 *)(v149 + 6);
      unsigned int v152 = sub_511FC(v89);
      unsigned int v153 = v137[5] & ~(-1 << (v152 & 0xFE));
      int v154 = sub_51938(v153);
      int v155 = sub_51938(v153 >> 1);
      int64x2_t v156 = (int *)v137[2];
      uint64_t v157 = *((unsigned int *)v137 + 13);
      int64x2_t v158 = (unsigned __int16 *)((char *)v156 - *v156);
      unsigned int v159 = *v158;
      if (v159 < 0xD)
      {
        if (v159 < 0xB) {
          goto LABEL_210;
        }
      }
      else if (v158[6])
      {
        int v93 = *(int *)((char *)&v156[v157 + 1] + v158[6] + *(unsigned int *)((char *)v156 + v158[6]));
        goto LABEL_213;
      }
      if (!v158[5]
        || (int v160 = *(unsigned __int16 *)((char *)v156
                                       + 2 * v157
                                       + v158[5]
                                       + *(unsigned int *)((char *)v156 + v158[5])
                                       + 4),
            v160 == 0xFFFF))
      {
LABEL_210:
        int v93 = 0x7FFFFFFF;
        goto LABEL_213;
      }
      uint64_t v161 = v158[4];
      if (v161) {
        int v162 = *(int *)((char *)v156 + v161);
      }
      else {
        int v162 = 0;
      }
      int v93 = *((_DWORD *)v137 + 11) + v160 + v162;
LABEL_213:
      int v163 = 1 << -(v152 >> 1);
      if (v152 < 2) {
        int v163 = -2;
      }
      LODWORD(v164) = v155 * v163 + 4 * v151;
      if (v164 >= 0xFFFFFFFE) {
        uint64_t v164 = 4294967294;
      }
      else {
        uint64_t v164 = v164;
      }
      unint64_t v94 = v164 << 32;
      uint64_t v95 = (v154 * v163 + 4 * v150);
      uint64_t v87 = __p[1];
      if (__p[1])
      {
LABEL_219:
        *(void *)&long long v308 = v87;
        operator delete(v87);
      }
LABEL_220:
      unint64_t v165 = v94 | v95;
      int64x2_t v166 = &v41[7 * v293];
      uint8x16_t v167 = (char **)(v166 + 3);
      uint32x4_t v169 = (char *)v166[4];
      unint64_t v168 = (unint64_t)v166[5];
      if ((unint64_t)v169 >= v168)
      {
        int8x16_t v171 = *v167;
        unint64_t v172 = 0xAAAAAAAAAAAAAAABLL * ((v169 - *v167) >> 2);
        unint64_t v173 = v172 + 1;
        if (v172 + 1 > 0x1555555555555555) {
          sub_2E00();
        }
        unint64_t v174 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v168 - (void)v171) >> 2);
        if (2 * v174 > v173) {
          unint64_t v173 = 2 * v174;
        }
        if (v174 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v175 = 0x1555555555555555;
        }
        else {
          unint64_t v175 = v173;
        }
        if (v175)
        {
          if (v175 > 0x1555555555555555) {
            sub_188D718();
          }
          uint32x4_t v176 = (char *)operator new(12 * v175);
        }
        else
        {
          uint32x4_t v176 = 0;
        }
        int64x2_t v177 = &v176[12 * v172];
        *(void *)int64x2_t v177 = v165;
        *((_DWORD *)v177 + 2) = v93;
        int64x2_t v178 = v177;
        if (v169 != v171)
        {
          do
          {
            uint64_t v179 = *(void *)(v169 - 12);
            v169 -= 12;
            int v180 = *((_DWORD *)v169 + 2);
            *(void *)(v178 - 12) = v179;
            v178 -= 12;
            *((_DWORD *)v178 + 2) = v180;
          }
          while (v169 != v171);
          uint32x4_t v169 = *v167;
        }
        int8x16_t v170 = v177 + 12;
        *uint8x16_t v167 = v178;
        v167[1] = v177 + 12;
        v167[2] = &v176[12 * v175];
        if (v169) {
          operator delete(v169);
        }
      }
      else
      {
        *(void *)uint32x4_t v169 = v165;
        *((_DWORD *)v169 + 2) = v93;
        int8x16_t v170 = v169 + 12;
      }
      v167[1] = v170;
      uint64_t v181 = a1[1];
      LODWORD(v299) = v7;
      LODWORD(__p[0]) = 1;
      *(void *)&v320[0] = __p;
      *((void *)&v320[0] + 1) = &v299;
      unint64_t v182 = *(void *)(v181 + 3872) + 1;
      *(void *)(v181 + 3872) = v182;
      uint64_t v183 = *(void *)(v181 + 16);
      if (!v183)
      {
LABEL_267:
        sub_2E6128((int **)v320);
        goto LABEL_268;
      }
      uint64_t v184 = v181 + 32;
      if (*(_DWORD *)(v181 + 2144) == v7)
      {
        unsigned int v185 = 88;
        goto LABEL_246;
      }
      if (*(_DWORD *)(v181 + 2168) == v7)
      {
        unsigned int v185 = 89;
        goto LABEL_246;
      }
      if (*(_DWORD *)(v181 + 2192) == v7)
      {
        unsigned int v185 = 90;
        goto LABEL_246;
      }
      if (*(_DWORD *)(v181 + 2216) == v7)
      {
        unsigned int v185 = 91;
LABEL_246:
        ++*(void *)(v181 + 3880);
        uint64_t v186 = v184 + 24 * v185;
        *(void *)(v186 + 8) = v182;
        int64x2_t v187 = *(unsigned int **)(v186 + 16);
        if (!v187) {
          goto LABEL_267;
        }
        goto LABEL_247;
      }
      unint64_t v193 = *(void *)(v181 + 2200);
      unint64_t v194 = *(void *)(v181 + 2176);
      unint64_t v195 = *(void *)(v181 + 2152);
      unint64_t v196 = *(void *)(v181 + 2224);
      int64x2_t v187 = (unsigned int *)sub_2AB884(v183, 22, v287, 1);
      if (v195 >= v182) {
        unint64_t v197 = v182;
      }
      else {
        unint64_t v197 = v195;
      }
      int v198 = 88;
      if (v195 >= v182) {
        int v198 = 0;
      }
      if (v194 < v197)
      {
        unint64_t v197 = v194;
        int v198 = 89;
      }
      if (v193 < v197)
      {
        int v198 = 90;
        unint64_t v197 = v193;
      }
      BOOL v29 = v196 >= v197;
      unsigned int v199 = 91;
      if (v29) {
        unsigned int v199 = v198;
      }
      uint64_t v200 = v184 + 24 * v199;
      *(_DWORD *)uint64_t v200 = v299;
      *(void *)(v200 + 8) = *(void *)(v181 + 3872);
      *(void *)(v200 + 16) = v187;
      if (!v187) {
        goto LABEL_267;
      }
LABEL_247:
      uint32x4_t v188 = (int *)((char *)v187 + *v187);
      int64x2_t v189 = (unsigned __int16 *)((char *)v188 - *v188);
      if (*v189 >= 0xBu)
      {
        if (v189[5])
        {
          uint16x8_t v190 = (int *)((char *)v188 + v189[5] + *(unsigned int *)((char *)v188 + v189[5]));
          if (*v190 > WORD2(v7))
          {
            if (v190[2 * WORD2(v7) + 1])
            {
              unint64_t v191 = sub_2FC9E0(v181, v7, (uint64_t)&v190[2 * WORD2(v7) + 1]);
              unsigned int v192 = v191;
              uint64_t v3 = v289;
              if (!v191) {
                goto LABEL_8;
              }
              goto LABEL_269;
            }
          }
        }
      }
LABEL_268:
      unint64_t v191 = v294 | ((unint64_t)((v7 & 0xFF000000000000) == 0) << 62) | 0x8000000000000000;
      unsigned int v192 = v7;
      uint64_t v3 = v289;
      if (!v7) {
        goto LABEL_8;
      }
LABEL_269:
      if ((v191 & 0x8000000000000000) != 0) {
        goto LABEL_8;
      }
      uint64_t v201 = a1[1];
      LODWORD(__p[0]) = v191;
      LODWORD(v343) = 1;
      *(void *)&v320[0] = &v343;
      *((void *)&v320[0] + 1) = __p;
      unint64_t v202 = *(void *)(v201 + 3872) + 1;
      *(void *)(v201 + 3872) = v202;
      uint64_t v203 = *(void *)(v201 + 16);
      if (!v203)
      {
LABEL_6:
        sub_2E6128((int **)v320);
LABEL_7:
        uint64_t v3 = v289;
        goto LABEL_8;
      }
      uint64_t v204 = v201 + 32;
      if (*(_DWORD *)(v201 + 2144) == v191)
      {
        unsigned int v205 = 88;
        goto LABEL_279;
      }
      if (*(_DWORD *)(v201 + 2168) == v191)
      {
        unsigned int v205 = 89;
        goto LABEL_279;
      }
      if (*(_DWORD *)(v201 + 2192) == v191)
      {
        unsigned int v205 = 90;
        goto LABEL_279;
      }
      if (*(_DWORD *)(v201 + 2216) == v191)
      {
        unsigned int v205 = 91;
LABEL_279:
        ++*(void *)(v201 + 3880);
        uint64_t v206 = v204 + 24 * v205;
        *(void *)(v206 + 8) = v202;
        int64x2_t v207 = *(unsigned int **)(v206 + 16);
        if (!v207) {
          goto LABEL_6;
        }
        goto LABEL_280;
      }
      unint64_t v219 = *(void *)(v201 + 2200);
      unint64_t v220 = *(void *)(v201 + 2176);
      unint64_t v221 = *(void *)(v201 + 2152);
      unint64_t v222 = *(void *)(v201 + 2224);
      int64x2_t v207 = (unsigned int *)sub_2AB884(v203, 22, v192, 1);
      if (v221 >= v202) {
        unint64_t v223 = v202;
      }
      else {
        unint64_t v223 = v221;
      }
      int v224 = 88;
      if (v221 >= v202) {
        int v224 = 0;
      }
      if (v220 < v223)
      {
        unint64_t v223 = v220;
        int v224 = 89;
      }
      if (v219 < v223)
      {
        int v224 = 90;
        unint64_t v223 = v219;
      }
      BOOL v29 = v222 >= v223;
      unsigned int v225 = 91;
      if (v29) {
        unsigned int v225 = v224;
      }
      uint64_t v226 = v204 + 24 * v225;
      *(_DWORD *)uint64_t v226 = __p[0];
      *(void *)(v226 + 8) = *(void *)(v201 + 3872);
      *(void *)(v226 + 16) = v207;
      if (!v207) {
        goto LABEL_6;
      }
LABEL_280:
      int64x2_t v208 = (int *)((char *)v207 + *v207);
      uint32x4_t v209 = (unsigned __int16 *)((char *)v208 - *v208);
      if (*v209 < 5u) {
        goto LABEL_7;
      }
      uint64_t v3 = v289;
      if (v209[2])
      {
        int64x2_t v210 = (unsigned int *)((char *)v208 + v209[2] + *(unsigned int *)((char *)v208 + v209[2]));
        if (*v210 > (HIDWORD(v191) & 0x3FFFFFFFu))
        {
          unsigned int v211 = (int *)((char *)v210
                       + 4 * HIDWORD(v191)
                       + *(unsigned int *)((char *)v210 + (4 * HIDWORD(v191)) + 4)
                       + 4);
          unint64_t v212 = (unsigned __int16 *)((char *)v211 - *v211);
          unsigned int v213 = *v212;
          if (v213 < 0xB) {
            goto LABEL_304;
          }
          if (!v212[5]) {
            goto LABEL_305;
          }
          int v214 = *(unsigned __int8 *)(v201 + 3889);
          if (v214 == 254) {
            goto LABEL_305;
          }
          double v215 = (int *)((char *)v211 + v212[5] + *(unsigned int *)((char *)v211 + v212[5]));
          unsigned int v218 = *v215;
          double v216 = (unsigned __int8 *)(v215 + 1);
          uint64_t v217 = v218;
          if (v218)
          {
            while (v214 != *v216)
            {
              ++v216;
              if (!--v217) {
                goto LABEL_8;
              }
            }
LABEL_304:
            if (v213 >= 7)
            {
LABEL_305:
              uint64_t v227 = v212[3];
              if (v227)
              {
                uint64_t v228 = *(void *)((char *)v211 + v227);
                if ((v191 & 0x4000000000000000) == 0) {
                  uint64_t v228 = -v228;
                }
                v299 = (void *)v228;
                if (v228 == 0x7FFFFFFFFFFFFFFFLL) {
                  goto LABEL_8;
                }
                goto LABEL_313;
              }
            }
            uint64_t v228 = 0;
            if ((v191 & 0x4000000000000000) == 0) {
              uint64_t v228 = 0;
            }
            v299 = 0;
LABEL_313:
            if (v228 != v285)
            {
              unint64_t v229 = (uint64_t *)(*(void *)v288 + 56 * v293);
              uint64_t v231 = *v229;
              uint64_t v230 = v229[1];
              *(void *)&v320[0] = &v299;
              sub_2FCF00((uint64_t)&v346, (unint64_t *)&v299, (uint64_t)&unk_20F06E0, (void **)v320)[3] = v293 | ((unint64_t)(954437177 * ((unint64_t)(v230 - v231) >> 3)) << 32);
              v232 = (uint64_t *)(*(void *)v288 + 56 * v293);
              unint64_t v233 = v232[1];
              if (v233 >= v232[2])
              {
                uint64_t v234 = sub_2FD228(v232, (uint64_t *)&v299);
                uint64_t v3 = v289;
              }
              else
              {
                sub_357A60(v232[1], (uint64_t)v299);
                uint64_t v234 = v233 + 72;
                v232[1] = v233 + 72;
              }
              v232[1] = v234;
              uint64_t v285 = (uint64_t)v299;
            }
          }
        }
      }
LABEL_8:
      if (++v6 == v290) {
        goto LABEL_3;
      }
    }
  }
LABEL_318:
  int v235 = (int *)(v3 + 280);
  int v236 = (char *)a2[1] + (void)*a2;
  v343 = *a2;
  v344 = v236;
  uint64_t v345 = 0x2C700000000;
  while (sub_2F333C((uint64_t)&v343))
  {
    switch((int)v345)
    {
      case 2:
        *int v235 = 60 * sub_2F39B0((char **)&v343, v344);
        break;
      case 4:
        *(void *)(v3 + 288) = 100 * (int)sub_2F39B0((char **)&v343, v344);
        break;
      case 8:
        *(void *)(v3 + 296) = 100 * (int)sub_2F39B0((char **)&v343, v344);
        break;
      case 10:
        *(void *)&v320[0] = sub_2F3488((char **)&v343);
        *((void *)&v320[0] + 1) = v237;
        sub_2FB888(a1, v320, &v346, (void *)(v3 + 280));
        break;
      case 11:
        *(void *)&v320[0] = sub_2F3488((char **)&v343);
        *((void *)&v320[0] + 1) = *(void *)&v320[0] + v238;
        *(void *)&v320[1] = 0x2C700000000;
        if (sub_2F333C((uint64_t)v320))
        {
          while (1)
          {
            BOOL v239 = LODWORD(v320[1]) == 2;
            if (LODWORD(v320[1]) == 2) {
              break;
            }
            sub_2F3548((uint64_t)v320);
            if (!sub_2F333C((uint64_t)v320)) {
              goto LABEL_330;
            }
          }
        }
        else
        {
LABEL_330:
          BOOL v239 = 0;
        }
        *(unsigned char *)(v3 + 312) = v239;
        break;
      case 12:
        *(_WORD *)(v3 + 400) = sub_2F39B0((char **)&v343, v344);
        break;
      default:
        sub_2F3548((uint64_t)&v343);
        break;
    }
  }
  int v240 = *v235;
  if (*v235 != 0x7FFFFFFF)
  {
    uint64_t v241 = *(void *)(v3 + 296);
    if (v241)
    {
      double v242 = (double)*(uint64_t *)(v3 + 288) / (double)v241;
      int v243 = *(_DWORD *)(v3 + 144);
      *(double *)(v3 + 304) = v242;
      BOOL v244 = __OFSUB__(v240, v243);
      int v245 = v240 - v243;
      if (v245 < 0 == v244)
      {
LABEL_356:
        *(_DWORD *)(v3 + 316) = 10 * v245;
        long long v342 = 0u;
        long long v340 = 0u;
        long long v341 = 0u;
        long long v338 = 0u;
        long long v339 = 0u;
        long long v336 = 0u;
        long long v337 = 0u;
        long long v334 = 0u;
        long long v335 = 0u;
        long long v332 = 0u;
        long long v333 = 0u;
        long long v330 = 0u;
        long long v331 = 0u;
        long long v328 = 0u;
        long long v329 = 0u;
        long long v326 = 0u;
        long long v327 = 0u;
        long long v324 = 0u;
        long long v325 = 0u;
        *(_OWORD *)v322 = 0u;
        long long v323 = 0u;
        memset(v321, 0, sizeof(v321));
        memset(v320, 0, sizeof(v320));
        long long v318 = 0u;
        memset(v319, 0, sizeof(v319));
        long long v316 = 0u;
        long long v317 = 0u;
        long long v314 = 0u;
        long long v315 = 0u;
        long long v312 = 0u;
        long long v313 = 0u;
        long long v310 = 0u;
        long long v311 = 0u;
        long long v308 = 0u;
        long long v309 = 0u;
        *(_OWORD *)std::string __p = 0u;
        uint64_t v266 = *(void *)(v3 + 320);
        uint64_t v265 = *(void *)(v3 + 328);
        if (v266 != v265)
        {
          do
          {
            sub_2FC35C(a1, v266);
            uint64_t v268 = *(unsigned int *)(v266 + 48);
            if (v268 < 0x64)
            {
              ++*((_DWORD *)v320 + v268);
            }
            else if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)&v299);
              sub_188FC78(&v299, (uint64_t)"Display class counts array is too small.", 40);
              std::stringbuf::str();
              sub_7246C((uint64_t *)v297, 3u);
              if (v298 < 0) {
                operator delete(v297[0]);
              }
              v299 = v295;
              *(void **)((char *)&v299 + *((void *)v295 - 3)) = v267;
              if (v306 < 0) {
                operator delete(v305);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
            ++*((_DWORD *)__p + *(unsigned int *)(v266 + 52));
            v266 += 56;
          }
          while (v266 != v265);
        }
        unsigned int v269 = v320[0];
        uint64_t v270 = 4;
        v271 = (char *)v320;
        do
        {
          unsigned int v272 = *(_DWORD *)((char *)v320 + v270);
          BOOL v273 = v269 >= v272;
          if (v269 <= v272) {
            unsigned int v269 = *(_DWORD *)((char *)v320 + v270);
          }
          if (!v273) {
            v271 = (char *)v320 + v270;
          }
          v270 += 4;
        }
        while (v270 != 400);
        *(_DWORD *)(v3 + 344) = (unint64_t)(v271 - (char *)v320) >> 2;
        unsigned int v274 = __p[0];
        uint64_t v275 = 4;
        unint64_t v276 = __p;
        do
        {
          unsigned int v277 = *(_DWORD *)((char *)__p + v275);
          BOOL v278 = v274 >= v277;
          if (v274 <= v277) {
            unsigned int v274 = *(_DWORD *)((char *)__p + v275);
          }
          if (!v278) {
            unint64_t v276 = (void **)((char *)__p + v275);
          }
          v275 += 4;
        }
        while (v275 != 220);
        *(_DWORD *)(v3 + 348) = (unint64_t)((char *)v276 - (char *)__p) >> 2;
        v261 = (void *)v347;
        if (!(void)v347) {
          goto LABEL_352;
        }
        do
        {
LABEL_351:
          uint64_t v262 = (void *)*v261;
          operator delete(v261);
          v261 = v262;
        }
        while (v262);
        goto LABEL_352;
      }
    }
    else
    {
      int v264 = *(_DWORD *)(v3 + 144);
      *(double *)(v3 + 304) = 1.0;
      BOOL v244 = __OFSUB__(v240, v264);
      int v245 = v240 - v264;
      if (v245 < 0 == v244) {
        goto LABEL_356;
      }
    }
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v320);
      uint64_t v246 = sub_188FC78(v320, (uint64_t)"Encountered incident ", 21);
      uint64_t v249 = *(void *)(v3 + 40);
      uint64_t v248 = v3 + 40;
      uint64_t v247 = v249;
      int v250 = *(char *)(v248 + 23);
      if (v250 >= 0) {
        uint64_t v251 = v248;
      }
      else {
        uint64_t v251 = v247;
      }
      if (v250 >= 0) {
        uint64_t v252 = *(unsigned __int8 *)(v248 + 23);
      }
      else {
        uint64_t v252 = *(void *)(v248 + 8);
      }
      uint64_t v253 = sub_188FC78(v246, v251, v252);
      uint64_t v254 = sub_188FC78(v253, (uint64_t)" (self-detected) with a detection time (", 40);
      v255 = (void *)sub_266E4((uint64_t)v254);
      v256 = sub_188FC78(v255, (uint64_t)") that is sooner than the start time (", 38);
      v257 = (void *)sub_266E4((uint64_t)v256);
      sub_188FC78(v257, (uint64_t)").", 2);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v299, 3u);
      if (SBYTE7(v301) < 0) {
        operator delete(v299);
      }
      if (SHIBYTE(v323) < 0) {
        operator delete(v322[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      uint64_t v3 = v289;
    }
  }
  LODWORD(v320[0]) = 0x7FFFFFFF;
  *(int64x2_t *)((char *)v320 + 8) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *((void *)&v320[1] + 1) = 0;
  LOBYTE(v321[0]) = 0;
  DWORD1(v321[0]) = 0x7FFFFFFF;
  v322[0] = 0;
  memset_pattern16(&v322[1], &xmmword_20B8FC0, 0x30uLL);
  WORD4(v325) = -1;
  *(void *)&long long v326 = 0;
  long long v258 = v320[1];
  *(_OWORD *)int v235 = v320[0];
  *((_OWORD *)v235 + 1) = v258;
  *((void *)v235 + 4) = *(void *)&v321[0];
  if (*(void *)v288)
  {
    sub_29DB80((void ***)v288);
    operator delete(*(void **)v288);
    *(void *)uint64_t v288 = 0;
    *(void *)(v288 + 8) = 0;
    *(void *)(v288 + 16) = 0;
  }
  *(void *)uint64_t v288 = 0;
  *(void *)(v288 + 8) = 0;
  *(void *)(v288 + 16) = 0;
  long long v259 = v325;
  *(_OWORD *)(v3 + 376) = v324;
  *(_OWORD *)(v3 + 392) = v259;
  *(void *)(v3 + 408) = v326;
  long long v260 = v323;
  *(_OWORD *)(v3 + 344) = *(_OWORD *)v322;
  *(_OWORD *)(v3 + 360) = v260;
  v261 = (void *)v347;
  if ((void)v347) {
    goto LABEL_351;
  }
LABEL_352:
  unint64_t v263 = (void *)v346;
  *(void *)&long long v346 = 0;
  if (v263) {
    operator delete(v263);
  }
}

void sub_2FB4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&STACK[0x290]);
    sub_12168(v35 - 160);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&STACK[0x290]);
  sub_12168(v35 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a32 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a33);
    sub_12168(v33 - 160);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a33);
  sub_12168(v33 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB594(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB5A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_12168(v3 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB5C0(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB5D4(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB5E8(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB5FC(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB610(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB624(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB638(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB64C(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB660(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB674(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB688(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB69C(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB6B0(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB6C4(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB6D8(_Unwind_Exception *a1)
{
  sub_12168(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  sub_12168(v64 - 160);
  _Unwind_Resume(a1);
}

void sub_2FB768(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 == 0 || !v5)
  {
    if (v5) {
      return;
    }
    uint64_t v7 = *a1 + 56 * a2;
    if (v3 == v7)
    {
LABEL_8:
      a1[1] = v7;
      return;
    }
    while (1)
    {
      unint64_t v9 = *(void **)(v3 - 32);
      if (v9)
      {
        *(void *)(v3 - 24) = v9;
        operator delete(v9);
      }
      uint64_t v10 = (void **)(v3 - 56);
      uint64_t v11 = *(void *)(v3 - 56);
      if (!v11) {
        goto LABEL_12;
      }
      uint64_t v12 = *(void *)(v3 - 48);
      uint64_t v8 = *(void **)(v3 - 56);
      if (v12 != v11) {
        break;
      }
LABEL_11:
      *(void *)(v3 - 48) = v11;
      operator delete(v8);
LABEL_12:
      v3 -= 56;
      if (v10 == (void **)v7) {
        goto LABEL_8;
      }
    }
    while (*(char *)(v12 - 17) < 0)
    {
      operator delete(*(void **)(v12 - 40));
      uint64_t v13 = *(void **)(v12 - 64);
      if (v13) {
        goto LABEL_23;
      }
LABEL_18:
      v12 -= 72;
      if (v12 == v11)
      {
        uint64_t v8 = *v10;
        goto LABEL_11;
      }
    }
    uint64_t v13 = *(void **)(v12 - 64);
    if (!v13) {
      goto LABEL_18;
    }
LABEL_23:
    *(void *)(v12 - 56) = v13;
    operator delete(v13);
    goto LABEL_18;
  }

  sub_2FCC30((uint64_t)a1, v6);
}

uint64_t sub_2FB888(uint64_t *a1, void *a2, void *a3, void *a4)
{
  uint64_t v8 = *a2 + a2[1];
  *(void *)&long long v117 = *a2;
  *((void *)&v117 + 1) = v8;
  uint64_t v118 = 0x2C700000000;
  uint64_t result = sub_2F333C((uint64_t)&v117);
  if (result)
  {
    while (v118 != 1)
    {
      sub_2F3548((uint64_t)&v117);
      uint64_t result = sub_2F333C((uint64_t)&v117);
      if ((result & 1) == 0) {
        return result;
      }
    }
    unint64_t v10 = *(void *)v117;
    *(void *)&long long v117 = v117 + 8;
    if ((unint64_t)v117 > *((void *)&v117 + 1))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(__dst, "Skipping over bytes exceeded message length.");
      int64x2_t v104 = (void *)sub_2F404((uint64_t)exception, (long long *)__dst);
    }
    int8x8_t v11 = (int8x8_t)a3[1];
    if (v11)
    {
      uint8x8_t v12 = (uint8x8_t)vcnt_s8(v11);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] > 1uLL)
      {
        unint64_t v13 = v10;
        if (v10 >= *(void *)&v11) {
          unint64_t v13 = v10 % *(void *)&v11;
        }
      }
      else
      {
        unint64_t v13 = (*(void *)&v11 - 1) & v10;
      }
      unint64_t v14 = *(uint64_t ***)(*a3 + 8 * v13);
      if (v14)
      {
        uint64_t v15 = *v14;
        if (v15)
        {
          if (v12.u32[0] < 2uLL)
          {
            uint64_t v16 = *(void *)&v11 - 1;
            while (1)
            {
              uint64_t v18 = v15[1];
              if (v10 == v18)
              {
                if (v15[2] == v10) {
                  goto LABEL_27;
                }
              }
              else if ((v18 & v16) != v13)
              {
                return result;
              }
              uint64_t v15 = (uint64_t *)*v15;
              if (!v15) {
                return result;
              }
            }
          }
          while (1)
          {
            unint64_t v17 = v15[1];
            if (v10 == v17) {
              break;
            }
            if (v17 >= *(void *)&v11) {
              v17 %= *(void *)&v11;
            }
            if (v17 != v13) {
              return result;
            }
LABEL_16:
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              return result;
            }
          }
          if (v15[2] != v10) {
            goto LABEL_16;
          }
LABEL_27:
          unsigned int v19 = *((_DWORD *)v15 + 7);
          uint64_t v20 = *(void *)(a4[5] + 56 * *((unsigned int *)v15 + 6));
          uint64_t v21 = v20 + 72 * v19;
          uint64_t v22 = *a2 + a2[1];
          *(void *)&long long v117 = *a2;
          *((void *)&v117 + 1) = v22;
          uint64_t v118 = 0x2C700000000;
          unint64_t v23 = sub_2F4CE4(&v117, 2);
          unint64_t v24 = *(unsigned char **)(v21 + 8);
          unint64_t v108 = (void **)(v21 + 8);
          uint64_t v113 = v21;
          unint64_t v116 = (void *)(v21 + 24);
          if (v23 > (uint64_t)(*(void *)(v21 + 24) - (void)v24) >> 3)
          {
            if (v23 >> 61) {
              sub_2E00();
            }
            uint64_t v25 = v20 + 72 * v19;
            unint64_t v28 = *(char **)(v25 + 16);
            unint64_t v26 = (char **)(v25 + 16);
            uint64_t v27 = v28;
            uint64_t v29 = 8 * v23;
            unsigned int v30 = (char *)operator new(8 * v23);
            uint64_t v31 = &v30[v28 - v24];
            unint64_t v32 = v31;
            if (v28 != v24)
            {
              unint64_t v32 = &v30[v27 - v24];
              do
              {
                int v33 = *((_DWORD *)v27 - 2);
                v27 -= 8;
                int v34 = *(_DWORD *)(v27 + 3);
                *((_DWORD *)v32 - 2) = v33;
                v32 -= 8;
                *(_DWORD *)(v32 + 3) = v34;
              }
              while (v27 != v24);
            }
            *unint64_t v108 = v32;
            *unint64_t v26 = v31;
            *unint64_t v116 = &v30[v29];
            if (v24) {
              operator delete(v24);
            }
          }
          uint64_t v105 = v20;
          unsigned int v106 = v19;
          uint16x8_t v107 = a4;
          uint64_t result = sub_2F333C((uint64_t)&v117);
          if (result)
          {
            uint64_t v35 = v20 + 72 * v19;
            uint64_t v115 = v35 + 32;
            unint64_t v36 = (_DWORD *)(v35 + 64);
            int v37 = a4 + 14;
            unsigned int v38 = a4 + 13;
            uint64_t v39 = a4 + 12;
            uint64_t v114 = a4 + 11;
            unint64_t v40 = a4 + 10;
            int v41 = (void **)(v35 + 16);
            BOOL v111 = (void **)(v35 + 16);
            unsigned int v112 = (void *)(v35 + 56);
            unint64_t v109 = a1;
            unint64_t v110 = a4 + 12;
            while (v118 != 4)
            {
              if (v118 == 2)
              {
                uint64_t v42 = sub_2F3488((char **)&v117);
                uint64_t v44 = &v42[v43];
                *(void *)long long __dst = v42;
                *(void *)&__dst[8] = &v42[v43];
                *(void *)&__dst[16] = 0x2C700000000;
                if (sub_2F333C((uint64_t)__dst))
                {
                  while (*(_DWORD *)&__dst[16] != 10)
                  {
                    sub_2F3548((uint64_t)__dst);
                    if (!sub_2F333C((uint64_t)__dst)) {
                      goto LABEL_43;
                    }
                  }
                  uint64_t v45 = 100 * (int)sub_2F39B0((char **)__dst, *(char **)&__dst[8]);
                  uint32x4_t v119 = v42;
                  uint32x4_t v120 = v44;
                  uint64_t v121 = 0x2C700000000;
                  if (!sub_2F333C((uint64_t)&v119)) {
                    goto LABEL_37;
                  }
                  while (1)
                  {
LABEL_67:
                    if (v121 == 8)
                    {
                      uint32x4_t v122 = sub_2F3488(&v119);
                      unint64_t v123 = &v122[v72];
                      uint64_t v124 = 0x2C700000000;
                      if (sub_2F333C((uint64_t)&v122))
                      {
                        char v73 = 0;
                        while (2)
                        {
                          int v74 = 2;
                          unint64_t v75 = v40;
                          switch((int)v124)
                          {
                            case 1:
                              goto LABEL_100;
                            case 2:
                              if (v73)
                              {
                                char v73 = 1;
                              }
                              else
                              {
                                int v74 = 4;
                                unint64_t v75 = v114;
                                char v73 = 1;
LABEL_100:
                                *v36 |= v74;
                                *v75 += v45;
                              }
LABEL_101:
                              switch(HIDWORD(v124))
                              {
                                case 0:
                                  sub_2F3C98((uint64_t *)&v122, (uint64_t)v123);
                                  break;
                                case 1:
                                  v122 += 8;
                                  if (v122 > v123)
                                  {
                                    int v99 = __cxa_allocate_exception(0x40uLL);
                                    *(void *)long long __dst = operator new(0x30uLL);
                                    *(_OWORD *)&__dst[8] = xmmword_20E1380;
                                    strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                                    unsigned int v100 = (void *)sub_2F404((uint64_t)v99, (long long *)__dst);
                                  }
                                  return result;
                                case 2:
                                  unsigned int v76 = sub_2F36C8(&v122, v123);
                                  v122 += v76;
                                  if (v122 > v123)
                                  {
                                    int v97 = __cxa_allocate_exception(0x40uLL);
                                    *(void *)long long __dst = operator new(0x30uLL);
                                    *(_OWORD *)&__dst[8] = xmmword_20E1380;
                                    strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                                    unint64_t v98 = (void *)sub_2F404((uint64_t)v97, (long long *)__dst);
                                  }
                                  return result;
                                case 5:
                                  v122 += 4;
                                  if (v122 > v123)
                                  {
                                    int v93 = __cxa_allocate_exception(0x40uLL);
                                    *(void *)long long __dst = operator new(0x30uLL);
                                    *(_OWORD *)&__dst[8] = xmmword_20E1380;
                                    strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                                    unint64_t v94 = (void *)sub_2F404((uint64_t)v93, (long long *)__dst);
                                  }
                                  return result;
                                default:
                                  uint64_t v95 = __cxa_allocate_exception(0x40uLL);
                                  __dst[23] = 18;
                                  strcpy(__dst, "Unknown wire type.");
                                  unint64_t v96 = (void *)sub_2F404((uint64_t)v95, (long long *)__dst);
                              }
                              if (sub_2F333C((uint64_t)&v122)) {
                                continue;
                              }
                              goto LABEL_66;
                            case 3:
                              int v74 = 8;
                              unint64_t v75 = v39;
                              goto LABEL_100;
                            case 5:
                              int v74 = 16;
                              unint64_t v75 = v38;
                              goto LABEL_100;
                            case 6:
                              int v74 = 32;
                              unint64_t v75 = v37;
                              goto LABEL_100;
                            default:
                              goto LABEL_101;
                          }
                        }
                      }
                      goto LABEL_66;
                    }
                    if (v121 == 1) {
                      break;
                    }
                    sub_2F3548((uint64_t)&v119);
LABEL_66:
                    if (!sub_2F333C((uint64_t)&v119)) {
                      goto LABEL_37;
                    }
                  }
                  uint64_t v57 = v38;
                  int v58 = v37;
                  uint64_t v59 = *a1;
                  int64_t v60 = sub_2F3E7C(&v119, v120);
                  uint64_t v61 = v60;
                  if (v60 >= 0) {
                    uint64_t v62 = v60;
                  }
                  else {
                    uint64_t v62 = -v60;
                  }
                  unint64_t v63 = sub_2FD4C0(v59, v62);
                  BOOL v64 = v63 > 0xFFFFFFFEFFFFFFFFLL || v63 == 0;
                  int v65 = v64;
                  if (v61 < 1) {
                    int v66 = 1;
                  }
                  else {
                    int v66 = v65;
                  }
                  BOOL v64 = v66 == 0;
                  uint64_t v67 = 0x1000000000000;
                  if (v64) {
                    uint64_t v67 = 0;
                  }
                  if (v65) {
                    uint64_t v68 = 0;
                  }
                  else {
                    uint64_t v68 = v63 & 0xFFFFFFFFFFFFLL;
                  }
                  uint64_t v69 = v67 | v68;
                  int v70 = *v41;
                  if ((unint64_t)*v41 < *v116)
                  {
                    *(void *)int v70 = v69;
                    int v71 = v70 + 2;
                    int v37 = v58;
                    unsigned int v38 = v57;
                    uint64_t v39 = v110;
LABEL_123:
                    *int v41 = v71;
                    a1 = v109;
                    goto LABEL_66;
                  }
                  uint64_t v77 = v108;
                  unint64_t v78 = *v108;
                  uint64_t v79 = ((char *)v70 - (unsigned char *)*v108) >> 3;
                  unint64_t v80 = v79 + 1;
                  if ((unint64_t)(v79 + 1) >> 61) {
                    sub_2E00();
                  }
                  uint64_t v81 = *v116 - (void)v78;
                  if (v81 >> 2 > v80) {
                    unint64_t v80 = v81 >> 2;
                  }
                  if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v82 = v80;
                  }
                  if (v82)
                  {
                    if (v82 >> 61) {
                      sub_188D718();
                    }
                    unint64_t v83 = (char *)operator new(8 * v82);
                    uint64_t v77 = v108;
                    uint64_t v84 = (uint64_t)&v83[8 * v79];
                    *(void *)uint64_t v84 = v69;
                    int v71 = (void *)(v84 + 8);
                    int v37 = v58;
                    if (v70 == v78) {
                      goto LABEL_121;
                    }
                  }
                  else
                  {
                    unint64_t v83 = 0;
                    uint64_t v84 = 8 * v79;
                    uint64_t v85 = (uint64_t *)(8 * v79);
                    uint64_t *v85 = v69;
                    int v71 = v85 + 1;
                    int v37 = v58;
                    if (v70 == v78) {
                      goto LABEL_121;
                    }
                  }
                  do
                  {
                    int v86 = *(v70 - 2);
                    v70 -= 2;
                    int v87 = *(_DWORD *)((char *)v70 + 3);
                    *(_DWORD *)(v84 - 8) = v86;
                    v84 -= 8;
                    *(_DWORD *)(v84 + 3) = v87;
                  }
                  while (v70 != v78);
                  int v70 = *v77;
LABEL_121:
                  unsigned int v38 = v57;
                  *uint64_t v77 = (void *)v84;
                  uint64_t v39 = v110;
                  int v41 = v111;
                  *BOOL v111 = v71;
                  *unint64_t v116 = &v83[8 * v82];
                  if (v70) {
                    operator delete(v70);
                  }
                  goto LABEL_123;
                }
LABEL_43:
                uint64_t v45 = 0;
                uint32x4_t v119 = v42;
                uint32x4_t v120 = v44;
                uint64_t v121 = 0x2C700000000;
                if (sub_2F333C((uint64_t)&v119)) {
                  goto LABEL_67;
                }
              }
              else
              {
                sub_2F3548((uint64_t)&v117);
              }
LABEL_37:
              uint64_t result = sub_2F333C((uint64_t)&v117);
              if ((result & 1) == 0) {
                goto LABEL_124;
              }
            }
            uint32x4_t v122 = sub_2F3488((char **)&v117);
            unint64_t v123 = &v122[v46];
            uint64_t v124 = 0x2C700000000;
            if (!sub_2F333C((uint64_t)&v122)) {
              goto LABEL_37;
            }
            while (1)
            {
              if (v124 == 2)
              {
                uint64_t v53 = *(void *)v122;
                v122 += 8;
                if (v122 > v123)
                {
                  int64x2_t v101 = __cxa_allocate_exception(0x40uLL);
                  *(void *)long long __dst = operator new(0x30uLL);
                  *(_OWORD *)&__dst[8] = xmmword_20E1380;
                  strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                  int64x2_t v102 = (void *)sub_2F404((uint64_t)v101, (long long *)__dst);
                }
                *unsigned int v112 = v53;
                goto LABEL_48;
              }
              if (v124 == 1) {
                break;
              }
              sub_2F3548((uint64_t)&v122);
LABEL_48:
              if (!sub_2F333C((uint64_t)&v122)) {
                goto LABEL_37;
              }
            }
            unint64_t v47 = sub_2F3488(&v122);
            if (v48 >= 0x7FFFFFFFFFFFFFF8) {
              sub_188D690();
            }
            unsigned int v49 = v47;
            size_t v50 = v48;
            if (v48 >= 0x17)
            {
              uint64_t v54 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v48 | 7) != 0x17) {
                uint64_t v54 = v48 | 7;
              }
              uint64_t v55 = v54 + 1;
              unsigned int v51 = operator new(v54 + 1);
              unint64_t v56 = v55 | 0x8000000000000000;
              int v41 = v111;
              *(void *)&__dst[8] = v50;
              *(void *)&__dst[16] = v56;
              *(void *)long long __dst = v51;
            }
            else
            {
              __dst[23] = v48;
              unsigned int v51 = __dst;
              if (!v48)
              {
                __dst[0] = 0;
                if ((*(char *)(v113 + 55) & 0x80000000) == 0)
                {
LABEL_55:
                  long long v52 = *(_OWORD *)__dst;
                  *(void *)(v115 + 16) = *(void *)&__dst[16];
                  *(_OWORD *)uint64_t v115 = v52;
                  goto LABEL_48;
                }
LABEL_62:
                operator delete(*(void **)v115);
                goto LABEL_55;
              }
            }
            memmove(v51, v49, v50);
            v51[v50] = 0;
            if ((*(char *)(v113 + 55) & 0x80000000) == 0) {
              goto LABEL_55;
            }
            goto LABEL_62;
          }
LABEL_124:
          if (*(void *)(v105 + 72 * v106 + 56) != -1)
          {
            uint64_t v88 = *v108;
            unint64_t v89 = v108[1];
            if (*v108 == v89)
            {
              uint64_t v90 = 0;
            }
            else
            {
              uint64_t v90 = 0;
              do
              {
                if (*v88)
                {
                  uint64_t result = sub_2D5D58(*a1, *v88 & 0xFFFFFFFFFFFFLL);
                  unsigned int v92 = (unsigned __int16 *)(result - *(int *)result);
                  if (*v92 < 9u)
                  {
                    uint64_t v91 = 0;
                  }
                  else
                  {
                    uint64_t v91 = v92[4];
                    if (v91) {
                      uint64_t v91 = *(unsigned int *)(result + v91);
                    }
                  }
                  v90 += v91;
                }
                ++v88;
              }
              while (v88 != v89);
            }
            v107[16] += v90;
          }
        }
      }
    }
  }
  return result;
}

void sub_2FC2D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 105) < 0) {
    operator delete(*(void **)(v1 - 128));
  }
  _Unwind_Resume(exception_object);
}

void sub_2FC35C(uint64_t *a1, uint64_t a2)
{
  memset(v64, 0, 400);
  memset(v63, 0, 220);
  sub_357A84((char *)a2, (uint64_t)&v36);
  sub_357C9C((char *)a2, (uint64_t)&v48);
  sub_2FCB1C((uint64_t)&v53, &v36);
  sub_2FCB1C((uint64_t)&v58, &v48);
  if (__p)
  {
    long long v52 = __p;
    operator delete(__p);
  }
  if (v49)
  {
    size_t v50 = v49;
    operator delete(v49);
  }
  if (v39)
  {
    unint64_t v40 = v39;
    operator delete(v39);
  }
  if (v37)
  {
    unsigned int v38 = v37;
    operator delete(v37);
  }
  sub_2FCB1C((uint64_t)&v48, &v53);
  sub_2FCB1C((uint64_t)v43, &v58);
  unint64_t v4 = __p;
  BOOL v5 = v52;
  while (v4 == (void *)v5 || v46 == v47)
  {
    if ((v4 == (void *)v5) == (v46 == v47)) {
      goto LABEL_43;
    }
    uint64_t v6 = v48;
    uint64_t v8 = *(void *)v48;
    unsigned int v9 = *(void *)v48;
    if (v9) {
      goto LABEL_20;
    }
LABEL_39:
    uint64_t v19 = v6 + 8;
    unint64_t v20 = ((v5 - (unsigned char *)v4) >> 3) - 1;
    uint64_t v21 = *((void *)&v48 + 1);
    *(void *)&long long v48 = v19;
    if (*((void *)&v48 + 1) < v20)
    {
      do
      {
        if (v19 != v4[v21]) {
          break;
        }
        *((void *)&v48 + 1) = v21 + 1;
        uint64_t v19 = *((void *)v49 + v21 + 1);
        *(void *)&long long v48 = v19;
        ++v21;
      }
      while (v20 != *((void *)&v48 + 1));
    }
  }
  uint64_t v6 = v48;
  if (*((void *)&v48 + 1) != v43[1] || (void)v48 != v43[0])
  {
    uint64_t v8 = *(void *)v48;
    unsigned int v9 = *(void *)v48;
    if (!v9) {
      goto LABEL_39;
    }
LABEL_20:
    uint64_t v10 = *a1;
    unint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
    uint8x8_t v12 = (int *)sub_2D5D58(*a1, v8 & 0xFFFFFFFFFFFFLL);
    if (*(unsigned char *)(v10 + 7772)) {
      sub_2DB8E0(v10 + 3896, v9, 0);
    }
    sub_2E5C38(v10, v11, 1);
    unint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
    if (*v13 < 0x43u)
    {
      unint64_t v14 = 0;
    }
    else
    {
      unint64_t v14 = v13[33];
      if (v14)
      {
        unint64_t v14 = *((unsigned __int8 *)v12 + v14);
        if (v14 >= 0x64)
        {
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)&v36);
            sub_188FC78(&v36, (uint64_t)"Got an invalid display class ", 29);
            uint64_t v18 = (void *)std::ostream::operator<<();
            sub_188FC78(v18, (uint64_t)". Check whether the value range was increased recently.", 55);
            std::stringbuf::str();
            sub_7246C((uint64_t *)&v34, 3u);
            if (v35 < 0) {
              operator delete(v34);
            }
            *(void *)&long long v36 = v33;
            *(void *)((char *)&v36 + *(void *)(v33 - 24)) = v32;
            if (v42 < 0) {
              operator delete(v41);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
            uint64_t v15 = (unsigned __int16 *)((char *)v12 - *v12);
            if (*v15 < 0x2Fu) {
              goto LABEL_37;
            }
LABEL_30:
            uint64_t v16 = v15[23];
            if (v16)
            {
              uint64_t v17 = *((unsigned __int8 *)v12 + v16);
LABEL_38:
              ++*((_DWORD *)v63 + v17);
              unint64_t v4 = __p;
              BOOL v5 = v52;
              uint64_t v6 = v48;
              goto LABEL_39;
            }
LABEL_37:
            uint64_t v17 = 32;
            goto LABEL_38;
          }
LABEL_29:
          uint64_t v15 = (unsigned __int16 *)((char *)v12 - *v12);
          if (*v15 < 0x2Fu) {
            goto LABEL_37;
          }
          goto LABEL_30;
        }
      }
    }
    ++*((_DWORD *)v64 + v14);
    goto LABEL_29;
  }
LABEL_43:
  if (v46)
  {
    unint64_t v47 = v46;
    operator delete(v46);
  }
  if (v44)
  {
    uint64_t v45 = v44;
    operator delete(v44);
  }
  if (__p)
  {
    long long v52 = __p;
    operator delete(__p);
  }
  if (v49)
  {
    size_t v50 = v49;
    operator delete(v49);
  }
  if (v61)
  {
    uint64_t v62 = v61;
    operator delete(v61);
  }
  if (v59)
  {
    int64_t v60 = v59;
    operator delete(v59);
  }
  if (v56)
  {
    uint64_t v57 = v56;
    operator delete(v56);
  }
  if (v54)
  {
    uint64_t v55 = v54;
    operator delete(v54);
  }
  unsigned int v22 = v64[0];
  uint64_t v23 = 4;
  unint64_t v24 = (char *)v64;
  do
  {
    unsigned int v25 = *(_DWORD *)((char *)v64 + v23);
    BOOL v26 = v22 >= v25;
    if (v22 <= v25) {
      unsigned int v22 = *(_DWORD *)((char *)v64 + v23);
    }
    if (!v26) {
      unint64_t v24 = (char *)v64 + v23;
    }
    v23 += 4;
  }
  while (v23 != 400);
  *(_DWORD *)(a2 + 48) = (unint64_t)(v24 - (char *)v64) >> 2;
  unsigned int v27 = v63[0];
  uint64_t v28 = 4;
  uint64_t v29 = (char *)v63;
  do
  {
    unsigned int v30 = *(_DWORD *)((char *)v63 + v28);
    BOOL v31 = v27 >= v30;
    if (v27 <= v30) {
      unsigned int v27 = *(_DWORD *)((char *)v63 + v28);
    }
    if (!v31) {
      uint64_t v29 = (char *)v63 + v28;
    }
    v28 += 4;
  }
  while (v28 != 220);
  *(_DWORD *)(a2 + 52) = (unint64_t)(v29 - (char *)v63) >> 2;
}

void sub_2FC8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_2FC938((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2FC8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a19);
  sub_2FC938(&a52);
  sub_2FC938(&a60);
  sub_2FC97C(&a68);
  _Unwind_Resume(a1);
}

void *sub_2FC938(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

void *sub_2FC97C(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)a1[2];
  if (v5)
  {
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

unint64_t sub_2FC9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 3888))
  {
    uint64_t v5 = a1 + 16;
    uint64_t v6 = sub_2E5E08(a1 + 16, *(_DWORD *)a3, 1);
    if (!v6
      || (uint64_t v7 = &v6[-*(int *)v6], *(unsigned __int16 *)v7 < 5u)
      || (uint64_t v8 = *((unsigned __int16 *)v7 + 2)) == 0
      || (unsigned int v9 = &v6[v8 + *(unsigned int *)&v6[v8]],
          uint64_t v10 = *(unsigned __int16 *)(a3 + 4),
          *(_DWORD *)v9 <= v10))
    {
LABEL_12:
      BOOL v18 = (a2 & 0xFF000000000000) == 0;
      goto LABEL_13;
    }
    unint64_t v11 = &v9[4 * v10 + 4 + *(unsigned int *)&v9[4 * v10 + 4]];
    uint8x8_t v12 = &v11[*(unsigned __int16 *)&v11[-*(int *)v11 + 4]];
    uint64_t v13 = *(unsigned int *)v12;
    uint64_t v15 = (unsigned int *)&v12[v13 + 4];
    uint64_t v14 = *(unsigned int *)&v12[v13];
    if (v14)
    {
      uint64_t v16 = 8 * v14;
      while (sub_290DEC(v5, *v15, 1))
      {
        v15 += 2;
        v16 -= 8;
        if (!v16) {
          goto LABEL_10;
        }
      }
      goto LABEL_12;
    }
  }
LABEL_10:
  if (((a2 & 0xFF000000000000) != 0) != (*(unsigned char *)(a3 + 6) & 2) >> 1)
  {
    LODWORD(a2) = *(_DWORD *)a3;
    unint64_t v17 = *(unsigned __int16 *)(a3 + 4) | 0x40000000;
    return a2 | (v17 << 32);
  }
  if ((*(unsigned char *)(a3 + 6) & 1) == 0)
  {
    unint64_t v17 = *(unsigned __int16 *)(a3 + 4);
    LODWORD(a2) = *(_DWORD *)a3;
    return a2 | (v17 << 32);
  }
  BOOL v18 = (a2 & 0xFF000000000000) == 0;
LABEL_13:
  uint64_t v19 = v18;
  unint64_t v17 = ((a2 & 0xFFFF00000000 | (unint64_t)(v19 << 62)) >> 32) | 0x80000000;
  return a2 | (v17 << 32);
}

uint64_t sub_2FCB1C(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 2);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 3);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    unsigned int v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 32) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 24) = v9;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  unint64_t v11 = (unsigned char *)*((void *)a2 + 5);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 6);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_2FCBFC(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_2FCC30(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void ***)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (uint64_t)v5) >> 3) < a2)
  {
    uint64_t v6 = *(void ***)a1;
    uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x492492492492492) {
      sub_2E00();
    }
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x249249249249249) {
      unint64_t v10 = 0x492492492492492;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x492492492492492) {
        sub_188D718();
      }
      unint64_t v11 = (char *)operator new(56 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v13 = &v11[56 * v7];
    uint64_t v14 = &v11[56 * v10];
    size_t v15 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_36;
    }
    uint64_t v17 = 0;
    do
    {
      BOOL v18 = &v13[v17 * 8];
      uint64_t v19 = (char *)&v5[v17];
      *((void *)v18 - 6) = 0;
      *((void *)v18 - 5) = 0;
      *(_OWORD *)(v18 - 56) = *(_OWORD *)&v5[v17 - 7];
      *((void *)v18 - 5) = v5[v17 - 5];
      *((void *)v19 - 7) = 0;
      *((void *)v19 - 6) = 0;
      *((void *)v19 - 5) = 0;
      *((void *)v18 - 3) = 0;
      *((void *)v18 - 2) = 0;
      *((_OWORD *)v18 - 2) = *(_OWORD *)&v5[v17 - 4];
      *((void *)v18 - 2) = v5[v17 - 2];
      *((void *)v19 - 4) = 0;
      *((void *)v19 - 3) = 0;
      *((void *)v19 - 2) = 0;
      *((void *)v18 - 1) = v5[v17 - 1];
      v17 -= 7;
    }
    while (&v5[v17] != v6);
    unint64_t v20 = *(void ***)a1;
    uint64_t v5 = *(void ***)(a1 + 8);
    *(void *)a1 = &v13[v17 * 8];
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 == v20)
    {
LABEL_35:
      if (!v5) {
        return;
      }
LABEL_36:
      operator delete(v5);
      return;
    }
    while (1)
    {
      unsigned int v22 = *(v5 - 4);
      if (v22)
      {
        *(v5 - 3) = v22;
        operator delete(v22);
      }
      uint64_t v23 = v5 - 7;
      unint64_t v24 = (void **)*(v5 - 7);
      if (!v24) {
        goto LABEL_22;
      }
      unsigned int v25 = (void **)*(v5 - 6);
      uint64_t v21 = *(v5 - 7);
      if (v25 != v24) {
        break;
      }
LABEL_21:
      *(v5 - 6) = v24;
      operator delete(v21);
LABEL_22:
      v5 -= 7;
      if (v23 == v20)
      {
        uint64_t v5 = v20;
        goto LABEL_35;
      }
    }
    while (*((char *)v25 - 17) < 0)
    {
      operator delete(*(v25 - 5));
      BOOL v26 = *(v25 - 8);
      if (v26) {
        goto LABEL_33;
      }
LABEL_28:
      v25 -= 9;
      if (v25 == v24)
      {
        uint64_t v21 = *v23;
        goto LABEL_21;
      }
    }
    BOOL v26 = *(v25 - 8);
    if (!v26) {
      goto LABEL_28;
    }
LABEL_33:
    *(v25 - 7) = v26;
    operator delete(v26);
    goto LABEL_28;
  }
  if (a2)
  {
    size_t v12 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(*(void **)(a1 + 8), v12);
    uint64_t v5 = (void **)((char *)v5 + v12);
  }
  *(void *)(a1 + 8) = v5;
}

void *sub_2FCF00(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = (void *)*v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            unint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  size_t v15 = operator new(0x20uLL);
  *size_t v15 = 0;
  v15[1] = v7;
  v15[2] = **a4;
  v15[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *size_t v15 = *v19;
LABEL_61:
      void *v19 = v15;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v8) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void **)(*(void *)a1 + 8 * v7);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v27 & v7;
      uint64_t v18 = *(void *)a1;
      uint64_t v19 = *(void **)(*(void *)a1 + 8 * (v27 & v7));
      if (v19) {
        goto LABEL_26;
      }
    }
  }
  *size_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v18 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v28 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8) {
        v28 %= v8;
      }
    }
    else
    {
      v28 &= v8 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_2FD214(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2FD228(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(72 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v18 = (uint64_t)&v7[72 * v3];
  uint64_t v19 = &v7[72 * v6];
  sub_357A60(v18, *a2);
  uint64_t v8 = v18 + 72;
  uint8x8_t v9 = (void **)*a1;
  unint64_t v10 = (void **)a1[1];
  if (v10 == (void **)*a1)
  {
    *a1 = v18;
    a1[1] = v8;
    a1[2] = (uint64_t)v19;
    goto LABEL_24;
  }
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = v18 + v11 * 8;
    uint64_t v13 = &v10[v11];
    *(void *)(v12 - 72) = v10[v11 - 9];
    *(void *)(v12 - 64) = 0;
    *(void *)(v12 - 56) = 0;
    *(void *)(v12 - 48) = 0;
    *(_OWORD *)(v12 - 64) = *(_OWORD *)&v10[v11 - 8];
    *(void *)(v12 - 48) = v10[v11 - 6];
    *(v13 - 8) = 0;
    *(v13 - 7) = 0;
    *(v13 - 6) = 0;
    long long v14 = *(_OWORD *)&v10[v11 - 5];
    *(void *)(v12 - 24) = v10[v11 - 3];
    *(_OWORD *)(v12 - 40) = v14;
    *(v13 - 4) = 0;
    *(v13 - 3) = 0;
    *(v13 - 5) = 0;
    *(void *)(v12 - 16) = v10[v11 - 2];
    *(_DWORD *)(v12 - 8) = v10[v11 - 1];
    v11 -= 9;
  }
  while (&v10[v11] != v9);
  size_t v15 = (void **)*a1;
  unint64_t v10 = (void **)a1[1];
  *a1 = v18 + v11 * 8;
  a1[1] = v8;
  a1[2] = (uint64_t)v19;
  if (v10 != v15)
  {
    while (*((char *)v10 - 17) < 0)
    {
      operator delete(*(v10 - 5));
      float v16 = *(v10 - 8);
      if (v16) {
        goto LABEL_22;
      }
LABEL_17:
      v10 -= 9;
      if (v10 == v15)
      {
        unint64_t v10 = v15;
        goto LABEL_24;
      }
    }
    float v16 = *(v10 - 8);
    if (!v16) {
      goto LABEL_17;
    }
LABEL_22:
    *(v10 - 7) = v16;
    operator delete(v16);
    goto LABEL_17;
  }
LABEL_24:
  if (v10) {
    operator delete(v10);
  }
  return v18 + 72;
}

void sub_2FD428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2FD43C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2FD43C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    if (*(char *)(i - 17) < 0)
    {
      operator delete(*(void **)(i - 40));
      unint64_t v4 = *(void **)(i - 64);
      if (!v4) {
        continue;
      }
LABEL_8:
      *(void *)(i - 56) = v4;
      operator delete(v4);
      continue;
    }
    unint64_t v4 = *(void **)(i - 64);
    if (v4) {
      goto LABEL_8;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unint64_t sub_2FD4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 3880);
  if (!v3) {
    return 0xFFFFFFFF00000000;
  }
  uint64_t v4 = a2 >= 0 ? a2 : -a2;
  unint64_t v5 = sub_2ABB48(v3, 0, v4);
  unint64_t v7 = HIDWORD(v5);
  BOOL v8 = !HIDWORD(v5) || v5 == 0xFFFFFFFFLL;
  BOOL v9 = !v8 && v6 == 0;
  if (v9
    && ((unint64_t v11 = v5, !*(unsigned char *)(a1 + 7774))
     || (uint64_t v12 = sub_290DEC(a1 + 3896, HIDWORD(v5), 1)) != 0
     && (uint64_t v13 = &v12[-*(int *)v12], *(unsigned __int16 *)v13 >= 5u)
     && (uint64_t v14 = *((unsigned __int16 *)v13 + 2)) != 0
     && *(_DWORD *)&v12[v14 + *(unsigned int *)&v12[v14]] > v11
     && sub_295DB4(a1, __ROR8__(v11, 32))))
  {
    return (v11 << 32) | v7;
  }
  else
  {
    return 0xFFFFFFFF00000000;
  }
}

void sub_2FD5A8()
{
  unk_255716F = 16641;
  word_2557158 = 65;
  byte_2557187 = 1;
  byte_2557171 = 0;
}

uint64_t sub_2FD5D0(char **a1)
{
  uint64_t v1 = &a1[1][(void)*a1];
  unint64_t v10 = *a1;
  unint64_t v11 = v1;
  uint64_t v12 = 0x2C700000000;
  if (!sub_2F333C((uint64_t)&v10)) {
    return 0;
  }
  int v2 = 0;
  unsigned int v3 = 0;
  int v4 = 3;
  do
  {
    unsigned __int8 v5 = 4;
    switch((int)v12)
    {
      case 2:
        if (v2) {
          goto LABEL_4;
        }
        unsigned int v3 = sub_2F39B0(&v10, v11);
        int v2 = 1;
        continue;
      case 24:
        int v6 = *v10;
        sub_2F3C98((uint64_t *)&v10, (uint64_t)v11);
        if (!v6) {
          continue;
        }
        return 1;
      case 35:
        v15[0] = sub_2F3488(&v10);
        v15[1] = &v15[0][v7];
        uint64_t v16 = 0x2C700000000;
        if (!sub_2F333C((uint64_t)v15)) {
          continue;
        }
        break;
      case 40:
        return v5;
      default:
LABEL_4:
        sub_2F3548((uint64_t)&v10);
        continue;
    }
    while (v16 != 5)
    {
      sub_2F3548((uint64_t)v15);
      if (!sub_2F333C((uint64_t)v15)) {
        goto LABEL_5;
      }
    }
    v13[0] = sub_2F3488(v15);
    v13[1] = v13[0] + v8;
    uint64_t v14 = 0x2C700000000;
    if (sub_2F333C((uint64_t)v13))
    {
      while (v14 != 2)
      {
        sub_2F3548((uint64_t)v13);
        if (!sub_2F333C((uint64_t)v13)) {
          goto LABEL_5;
        }
      }
      int v4 = 6;
    }
LABEL_5:
    ;
  }
  while (sub_2F333C((uint64_t)&v10));
  if (!v2) {
    return 0;
  }
  if (v3 > 0xF) {
    return 3;
  }
  if (((1 << v3) & 0x619) != 0) {
    return 2;
  }
  if (v3 != 7)
  {
    if (v3 == 15) {
      return 5;
    }
    return 3;
  }
  if (v4 == 6) {
    return 6;
  }
  else {
    return 3;
  }
}

void *sub_2FD844(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = sub_2F99CC(a1, a2, a3);
  *((unsigned char *)result + 16) = a4;
  result[3] = a2;
  return result;
}

void sub_2FD874(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  sub_2FDD18(a2, a3);
  uint64_t v6 = *(unsigned __int8 *)(a3 + 63);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a3 + 48);
  }
  if (v6)
  {
    uint64_t v7 = *a2 + a2[1];
    *(void *)&long long v35 = *a2;
    *((void *)&v35 + 1) = v7;
    uint64_t v36 = 0x2C700000000;
    unint64_t v8 = sub_2F4CE4(&v35, 1);
    sub_2A6D40(a3, v8);
    int v9 = 0;
LABEL_5:
    while (sub_2F333C((uint64_t)&v35))
    {
      if (v36 == 35)
      {
        unint64_t v27 = sub_2F3488((char **)&v35);
        unint64_t v28 = (void (__cdecl **)(std::stringbuf *__hidden))&v27[v10];
        uint64_t v29 = (void *)0x2C700000000;
        if (sub_2F333C((uint64_t)&v27))
        {
          while (v29 != 1)
          {
            sub_2F3548((uint64_t)&v27);
            if (!sub_2F333C((uint64_t)&v27)) {
              goto LABEL_5;
            }
          }
          int v37 = sub_2F3488(&v27);
          unsigned int v38 = v11;
          sub_2F99D4(a1, (int **)&v37, a3);
        }
      }
      else if (v36 == 1)
      {
        unint64_t v27 = sub_2F3488((char **)&v35);
        unint64_t v28 = v12;
        v9 |= sub_2FF298((uint64_t)a1, &v27, a3);
      }
      else
      {
        sub_2F3548((uint64_t)&v35);
      }
    }
    if ((v9 & 1) == 0 && sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v27);
      uint64_t v13 = sub_188FC78(&v27, (uint64_t)"Encountered incident ", 21);
      int v14 = *(char *)(a3 + 63);
      if (v14 >= 0) {
        uint64_t v15 = a3 + 40;
      }
      else {
        uint64_t v15 = *(void *)(a3 + 40);
      }
      if (v14 >= 0) {
        uint64_t v16 = *(unsigned __int8 *)(a3 + 63);
      }
      else {
        uint64_t v16 = *(void *)(a3 + 48);
      }
      float v17 = sub_188FC78(v13, v15, v16);
      sub_188FC78(v17, (uint64_t)" not referencing any road segments.", 35);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v37, 3u);
      if (SHIBYTE(v39) < 0) {
        operator delete(v37);
      }
      if (v34 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    BOOL v18 = *(_DWORD *)(a3 + 28) == -1 && *(_DWORD *)(a3 + 32) == -1;
    if (v18 && *(void *)a3 != *(void *)(a3 + 8) && **(void **)a3 != *(void *)(*(void *)a3 + 8))
    {
      uint64_t v19 = a1[3];
      sub_358214((char *)a3, (uint64_t)&v27);
      sub_2954EC(v19, *(void *)v27, (uint64_t)&v37);
      BOOL v20 = v38;
      if (v38 == v39)
      {
        int v24 = 0x7FFFFFFF;
        unint64_t v25 = 0xFFFFFFFF00000000;
        uint64_t v26 = 0xFFFFFFFFLL;
        if (!v38) {
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v21 = sub_2E1AA4((uint64_t)&v37);
        unsigned int v22 = v21;
        int v24 = v23;
        unint64_t v25 = v21 & 0xFFFFFFFF00000000;
        BOOL v20 = v38;
        uint64_t v26 = v22;
        if (!v38)
        {
LABEL_38:
          *(void *)(a3 + 28) = v25 | v26;
          *(_DWORD *)(a3 + 36) = v24;
          if (v31)
          {
            uint64_t v32 = v31;
            operator delete(v31);
          }
          if (v29)
          {
            unsigned int v30 = v29;
            operator delete(v29);
          }
          return;
        }
      }
      uint64_t v39 = v20;
      operator delete(v20);
      goto LABEL_38;
    }
  }
}

void sub_2FDBE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unsigned __int8 v5 = *(void **)(v3 - 96);
  if (v5)
  {
    *(void *)(v3 - 88) = v5;
    operator delete(v5);
    sub_2FC938((uint64_t *)va);
    sub_29D95C(v2);
    _Unwind_Resume(a1);
  }
  sub_2FC938((uint64_t *)va);
  sub_29D95C(v2);
  _Unwind_Resume(a1);
}

void sub_2FDC2C(_Unwind_Exception *a1)
{
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

void sub_2FDC40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v3 - 81) < 0)
  {
    operator delete(*(void **)(v3 - 104));
    sub_111ECAC((uint64_t)va);
    sub_29D95C(v2);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)va);
  sub_29D95C(v2);
  _Unwind_Resume(a1);
}

void sub_2FDCB4(_Unwind_Exception *a1)
{
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

void sub_2FDCC8(_Unwind_Exception *a1)
{
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

void sub_2FDCDC(_Unwind_Exception *a1)
{
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

void sub_2FDCF0(_Unwind_Exception *a1)
{
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

void sub_2FDD04(_Unwind_Exception *a1)
{
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2FDD18@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + a1[1];
  *(void *)&long long v159 = *a1;
  *((void *)&v159 + 1) = v3;
  uint64_t v160 = 0x2C700000000;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 28) = -1;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  *(_OWORD *)(a2 + 40) = 0u;
  uint16x8_t v131 = (void **)(a2 + 40);
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  int v4 = (void **)(a2 + 96);
  *(_DWORD *)(a2 + 88) = 3;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_DWORD *)(a2 + 144) = 0;
  *(_OWORD *)(a2 + 220) = 0u;
  unsigned __int8 v5 = (_DWORD *)(a2 + 220);
  *(void *)(a2 + 148) = 0x7FFFFFFFLL;
  *(unsigned char *)(a2 + 156) = 7;
  *(_DWORD *)(a2 + 157) = 0;
  uint64_t v129 = (unsigned char *)(a2 + 157);
  *(_OWORD *)(a2 + 168) = 0u;
  uint64_t v6 = (void **)(a2 + 168);
  *(_DWORD *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(unsigned char *)(a2 + 216) = 0;
  *(_OWORD *)(a2 + 236) = 0u;
  *(_OWORD *)(a2 + 252) = 0u;
  *(void *)(a2 + 265) = 0;
  *(_DWORD *)(a2 + 280) = 0x7FFFFFFF;
  *(int64x2_t *)(a2 + 288) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a2 + 304) = 0;
  *(unsigned char *)(a2 + 312) = 0;
  *(_DWORD *)(a2 + 316) = 0x7FFFFFFF;
  *(_OWORD *)(a2 + 336) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  memset_pattern16((void *)(a2 + 352), &xmmword_20B8FC0, 0x30uLL);
  *(_WORD *)(a2 + 400) = -1;
  *(void *)(a2 + 408) = 0;
  *(unsigned char *)(a2 + 416) = 0;
  unint64_t v7 = sub_2F4CE4(&v159, 3);
  sub_76C8C(a2 + 64, v7);
  int v130 = 0;
  BOOL v124 = 0;
  char v126 = 0;
  unsigned int v127 = (uint64_t *)(a2 + 224);
  unint64_t v128 = 0;
  unint64_t v8 = (void **)(a2 + 248);
  unsigned __int8 v125 = 0;
  unint64_t v9 = 0xFFFFFFFFLL;
  while (2)
  {
    if (sub_2F333C((uint64_t)&v159))
    {
      switch((int)v160)
      {
        case 2:
          if (v130) {
            goto LABEL_3;
          }
          unsigned int v72 = sub_2F39B0((char **)&v159, *((char **)&v159 + 1));
          if (v72 == 11)
          {
            *(_DWORD *)(a2 + 88) = 2;
            *(_DWORD *)(a2 + 24) = 4;
          }
          else
          {
            *(_DWORD *)(a2 + 88) = sub_308FE0(v72);
          }
          int v130 = 1;
          continue;
        case 3:
          int64x2_t v156 = sub_2F3488((char **)&v159);
          uint64_t v157 = v10;
          sub_309E8C(&v156, (uint64_t)&__dst);
          unint64_t v11 = *(void *)(a2 + 72);
          if (v11 >= *(void *)(a2 + 80))
          {
            uint64_t v68 = sub_1E1D4((void **)(a2 + 64), (uint64_t)&__dst);
            int v69 = SHIBYTE(v134[0]);
            *(void *)(a2 + 72) = v68;
            if (v69 < 0)
            {
              operator delete(*(void **)&__p[8]);
              if ((__p[7] & 0x80000000) != 0) {
                goto LABEL_84;
              }
            }
            else if ((__p[7] & 0x80000000) != 0)
            {
              goto LABEL_84;
            }
          }
          else
          {
            long long v12 = __dst;
            *(void *)(v11 + 16) = *(void *)__p;
            *(_OWORD *)unint64_t v11 = v12;
            *(void *)std::string __p = 0;
            long long __dst = 0uLL;
            uint64_t v13 = v134[0];
            *(_OWORD *)(v11 + 24) = *(_OWORD *)&__p[8];
            *(void *)(v11 + 40) = v13;
            *(void *)&__p[16] = 0;
            v134[0] = 0;
            *(void *)&__p[8] = 0;
            *(void *)(a2 + 72) = v11 + 48;
            if ((__p[7] & 0x80000000) != 0) {
              goto LABEL_84;
            }
          }
          continue;
        case 4:
          uint64_t v29 = sub_2F3488((char **)&v159);
          size_t v31 = v30;
          if (v30 > 0x7FFFFFFFFFFFFFF7) {
            sub_188D690();
          }
          uint64_t v32 = v29;
          if (v30 >= 0x17)
          {
            uint64_t v64 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v30 | 7) != 0x17) {
              uint64_t v64 = v30 | 7;
            }
            uint64_t v65 = v64 + 1;
            p_dst = (long long *)operator new(v64 + 1);
            *((void *)&__dst + 1) = v31;
            *(void *)std::string __p = v65 | 0x8000000000000000;
            *(void *)&long long __dst = p_dst;
          }
          else
          {
            __p[7] = v30;
            p_dst = &__dst;
            if (!v30)
            {
              LOBYTE(__dst) = 0;
              if ((*(char *)(a2 + 63) & 0x80000000) == 0)
              {
LABEL_27:
                long long v34 = __dst;
                long long v35 = v131;
                goto LABEL_35;
              }
LABEL_76:
              operator delete(*v131);
              goto LABEL_27;
            }
          }
          memmove(p_dst, v32, v31);
          *((unsigned char *)p_dst + v31) = 0;
          if ((*(char *)(a2 + 63) & 0x80000000) == 0) {
            goto LABEL_27;
          }
          goto LABEL_76;
        case 5:
          *(void *)&long long __dst = sub_2F3488((char **)&v159);
          *((void *)&__dst + 1) = v47;
          *(void *)(a2 + 28) = sub_30A0EC((double **)&__dst);
          *(_DWORD *)(a2 + 36) = v48;
          continue;
        case 6:
          unint64_t v49 = sub_2F6A18((char **)&v159, *((char **)&v159 + 1));
          if (v49 >> 31) {
            *(_DWORD *)(a2 + 144) = 0x7FFFFFFF;
          }
          else {
            *(_DWORD *)(a2 + 144) = v49;
          }
          continue;
        case 7:
          unint64_t v36 = sub_2F6A18((char **)&v159, *((char **)&v159 + 1));
          if (v36 >> 31) {
            *(_DWORD *)(a2 + 152) = 0x7FFFFFFF;
          }
          else {
            *(_DWORD *)(a2 + 152) = v36;
          }
          continue;
        case 8:
          unint64_t v128 = sub_2F6A18((char **)&v159, *((char **)&v159 + 1));
          continue;
        case 10:
          *uint64_t v129 = sub_2F36C8((char **)&v159, *((char **)&v159 + 1));
          continue;
        case 11:
          unsigned int v51 = sub_2F39B0((char **)&v159, *((char **)&v159 + 1));
          *(unsigned char *)(a2 + 156) = sub_3098E8(v51);
          char v126 = 1;
          continue;
        case 14:
          int v50 = *(unsigned __int8 *)v159;
          sub_2F3C98((uint64_t *)&v159, *((uint64_t *)&v159 + 1));
          *(unsigned char *)(a2 + 159) = v50 != 0;
          continue;
        case 18:
          uint64_t v16 = sub_2F3488((char **)&v159);
          size_t v18 = v17;
          if (v17 > 0x7FFFFFFFFFFFFFF7) {
            sub_188D690();
          }
          uint64_t v19 = v16;
          if (v17 >= 0x17)
          {
            uint64_t v58 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v17 | 7) != 0x17) {
              uint64_t v58 = v17 | 7;
            }
            uint64_t v59 = v58 + 1;
            BOOL v20 = (long long *)operator new(v58 + 1);
            *((void *)&__dst + 1) = v18;
            *(void *)std::string __p = v59 | 0x8000000000000000;
            *(void *)&long long __dst = v20;
          }
          else
          {
            __p[7] = v17;
            BOOL v20 = &__dst;
            if (!v17)
            {
              LOBYTE(__dst) = 0;
              if ((*(char *)(a2 + 119) & 0x80000000) == 0) {
                goto LABEL_16;
              }
              goto LABEL_65;
            }
          }
          memmove(v20, v19, v18);
          *((unsigned char *)v20 + v18) = 0;
          if ((*(char *)(a2 + 119) & 0x80000000) == 0) {
            goto LABEL_16;
          }
LABEL_65:
          operator delete(*v4);
LABEL_16:
          *(_OWORD *)int v4 = __dst;
          *(void *)(a2 + 112) = *(void *)__p;
          continue;
        case 19:
          int v37 = sub_2F3488((char **)&v159);
          size_t v39 = v38;
          if (v38 > 0x7FFFFFFFFFFFFFF7) {
            sub_188D690();
          }
          unint64_t v40 = v37;
          if (v38 >= 0x17)
          {
            uint64_t v66 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v38 | 7) != 0x17) {
              uint64_t v66 = v38 | 7;
            }
            uint64_t v67 = v66 + 1;
            int v41 = (long long *)operator new(v66 + 1);
            *((void *)&__dst + 1) = v39;
            *(void *)std::string __p = v67 | 0x8000000000000000;
            *(void *)&long long __dst = v41;
          }
          else
          {
            __p[7] = v38;
            int v41 = &__dst;
            if (!v38)
            {
              LOBYTE(__dst) = 0;
              if ((*(char *)(a2 + 143) & 0x80000000) == 0) {
                goto LABEL_34;
              }
              goto LABEL_81;
            }
          }
          memmove(v41, v40, v39);
          *((unsigned char *)v41 + v39) = 0;
          if ((*(char *)(a2 + 143) & 0x80000000) == 0) {
            goto LABEL_34;
          }
LABEL_81:
          operator delete(*(void **)(a2 + 120));
LABEL_34:
          long long v34 = __dst;
          long long v35 = (void **)(a2 + 120);
LABEL_35:
          *(_OWORD *)long long v35 = v34;
          v35[2] = *(void **)__p;
          continue;
        case 21:
          int v21 = sub_2F39B0((char **)&v159, *((char **)&v159 + 1));
          unsigned __int8 v125 = sub_3091CC(v21);
          continue;
        case 28:
          unsigned int v15 = sub_2F39B0((char **)&v159, *((char **)&v159 + 1));
          _DWORD *v5 = sub_30CCA0(v15);
          continue;
        case 31:
          *(_DWORD *)(a2 + 160) = sub_2F36C8((char **)&v159, *((char **)&v159 + 1));
          continue;
        case 32:
          char v42 = sub_2F3488((char **)&v159);
          size_t v44 = v43;
          if (v43 > 0x7FFFFFFFFFFFFFF7) {
            sub_188D690();
          }
          uint64_t v45 = v42;
          if (v43 >= 0x17)
          {
            uint64_t v70 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v43 | 7) != 0x17) {
              uint64_t v70 = v43 | 7;
            }
            uint64_t v71 = v70 + 1;
            uint64_t v46 = (long long *)operator new(v70 + 1);
            *((void *)&__dst + 1) = v44;
            *(void *)std::string __p = v71 | 0x8000000000000000;
            *(void *)&long long __dst = v46;
          }
          else
          {
            __p[7] = v43;
            uint64_t v46 = &__dst;
            if (!v43)
            {
              LOBYTE(__dst) = 0;
              if ((*(char *)(a2 + 191) & 0x80000000) == 0) {
                goto LABEL_43;
              }
              goto LABEL_89;
            }
          }
          memmove(v46, v45, v44);
          *((unsigned char *)v46 + v44) = 0;
          if ((*(char *)(a2 + 191) & 0x80000000) == 0) {
            goto LABEL_43;
          }
LABEL_89:
          operator delete(*v6);
LABEL_43:
          *(_OWORD *)uint64_t v6 = __dst;
          *(void *)(a2 + 184) = *(void *)__p;
          continue;
        case 34:
          unsigned int v57 = sub_2F39B0((char **)&v159, *((char **)&v159 + 1));
          *(_DWORD *)(a2 + 24) |= 1 << sub_7BB78(v57);
          continue;
        case 35:
          int64x2_t v156 = sub_2F3488((char **)&v159);
          uint64_t v157 = v52;
          sub_30A39C(&v156, (char **)&__dst);
          long long v53 = (void *)*v127;
          if (*v127)
          {
            *(void *)(a2 + 232) = v53;
            operator delete(v53);
            *unsigned int v127 = 0;
            *(void *)(a2 + 232) = 0;
            *(void *)(a2 + 240) = 0;
          }
          *(_OWORD *)(a2 + 224) = __dst;
          *(void *)(a2 + 240) = *(void *)__p;
          sub_30AADC(&v156, (uint64_t)&__dst);
          uint64_t v54 = (void **)*v8;
          if (*v8)
          {
            uint64_t v55 = *(void ***)(a2 + 256);
            unint64_t v56 = *v8;
            if (v55 != v54)
            {
              do
              {
                if (*((char *)v55 - 1) < 0) {
                  operator delete(*(v55 - 3));
                }
                v55 -= 3;
              }
              while (v55 != v54);
              unint64_t v56 = *v8;
            }
            *(void *)(a2 + 256) = v54;
            operator delete(v56);
            *unint64_t v8 = 0;
            *(void *)(a2 + 256) = 0;
            *(void *)(a2 + 264) = 0;
          }
          *(_OWORD *)(a2 + 248) = __dst;
          *(void *)(a2 + 264) = *(void *)__p;
          continue;
        case 36:
          unsigned int v14 = sub_2F39B0((char **)&v159, *((char **)&v159 + 1));
          *(unsigned char *)(a2 + 216) = sub_309380(v14);
          continue;
        case 37:
          unsigned int v22 = sub_2F3488((char **)&v159);
          size_t v24 = v23;
          if (v23 > 0x7FFFFFFFFFFFFFF7) {
            sub_188D690();
          }
          unint64_t v25 = v22;
          if (v23 >= 0x17)
          {
            uint64_t v60 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v23 | 7) != 0x17) {
              uint64_t v60 = v23 | 7;
            }
            uint64_t v61 = v60 + 1;
            uint64_t v26 = (long long *)operator new(v60 + 1);
            *((void *)&__dst + 1) = v24;
            *(void *)std::string __p = v61 | 0x8000000000000000;
            *(void *)&long long __dst = v26;
          }
          else
          {
            __p[7] = v23;
            uint64_t v26 = &__dst;
            if (!v23)
            {
              LOBYTE(__dst) = 0;
              unint64_t v27 = *(void *)(a2 + 200);
              if (v27 < *(void *)(a2 + 208)) {
                goto LABEL_22;
              }
              goto LABEL_70;
            }
          }
          memmove(v26, v25, v24);
          *((unsigned char *)v26 + v24) = 0;
          unint64_t v27 = *(void *)(a2 + 200);
          if (v27 < *(void *)(a2 + 208))
          {
LABEL_22:
            long long v28 = __dst;
            *(void *)(v27 + 16) = *(void *)__p;
            *(_OWORD *)unint64_t v27 = v28;
            *(void *)(a2 + 200) = v27 + 24;
            continue;
          }
LABEL_70:
          uint64_t v62 = sub_6E8C4((void **)(a2 + 192), (uint64_t)&__dst);
          int v63 = __p[7];
          *(void *)(a2 + 200) = v62;
          if (v63 < 0) {
LABEL_84:
          }
            operator delete((void *)__dst);
          continue;
        case 42:
          BOOL v124 = *(unsigned char *)v159 != 0;
          sub_2F3C98((uint64_t *)&v159, *((uint64_t *)&v159 + 1));
          continue;
        case 44:
          unint64_t v9 = sub_2F36C8((char **)&v159, *((char **)&v159 + 1));
          continue;
        default:
LABEL_3:
          sub_2F3548((uint64_t)&v159);
          continue;
      }
    }
    break;
  }
  char v73 = *(unint64_t **)(a2 + 224);
  if (v73 != *(unint64_t **)(a2 + 232))
  {
    uint64_t v74 = *(unsigned __int8 *)(a2 + 63);
    if ((v74 & 0x80u) != 0) {
      uint64_t v74 = *(void *)(a2 + 48);
    }
    if (v74) {
      goto LABEL_103;
    }
LABEL_207:
    if (!sub_723EC(3u)) {
      goto LABEL_214;
    }
    sub_6BAC((uint64_t)&__dst);
    sub_188FC78(&__dst, (uint64_t)"Encountered incident without incident_id.", 41);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v156, 3u);
    goto LABEL_209;
  }
  unint64_t v112 = *(void *)(a2 + 240);
  if ((unint64_t)v73 >= v112)
  {
    uint64_t v119 = v112 - (void)v73;
    uint64_t v120 = v119 >> 2;
    if ((unint64_t)(v119 >> 2) <= 1) {
      uint64_t v120 = 1;
    }
    if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v121 = v120;
    }
    if (v121 >> 61) {
      sub_188D718();
    }
    uint32x4_t v122 = operator new(8 * v121);
    void *v122 = v125 | (v9 << 32);
    uint64_t v113 = v122 + 1;
    *(void *)(a2 + 224) = v122;
    *(void *)(a2 + 232) = v122 + 1;
    *(void *)(a2 + 240) = &v122[v121];
    if (v73) {
      operator delete(v73);
    }
  }
  else
  {
    *char v73 = v125 | (v9 << 32);
    uint64_t v113 = v73 + 1;
  }
  *(void *)(a2 + 232) = v113;
  uint64_t v123 = *(unsigned __int8 *)(a2 + 63);
  if ((v123 & 0x80u) != 0) {
    uint64_t v123 = *(void *)(a2 + 48);
  }
  if (!v123) {
    goto LABEL_207;
  }
LABEL_103:
  BOOL v75 = v130 != 0;
  if (!v130 && sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&__dst);
    unsigned int v76 = sub_188FC78(&__dst, (uint64_t)"Encountered incident ", 21);
    char v77 = *(unsigned char *)(a2 + 63);
    if (v77 >= 0) {
      uint64_t v78 = (uint64_t)v131;
    }
    else {
      uint64_t v78 = *(void *)(a2 + 40);
    }
    if (v77 >= 0) {
      uint64_t v79 = *(unsigned __int8 *)(a2 + 63);
    }
    else {
      uint64_t v79 = *(void *)(a2 + 48);
    }
    unint64_t v80 = sub_188FC78(v76, v78, v79);
    sub_188FC78(v80, (uint64_t)" without type.", 14);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v156, 3u);
    if (v158 < 0) {
      operator delete(v156);
    }
    if (SHIBYTE(v137) < 0) {
      operator delete(v135[0]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (!((*v129 == 0) | v126 & 1))
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&__dst);
      uint64_t v81 = sub_188FC78(&__dst, (uint64_t)"Encountered incident ", 21);
      char v82 = *(unsigned char *)(a2 + 63);
      if (v82 >= 0) {
        uint64_t v83 = (uint64_t)v131;
      }
      else {
        uint64_t v83 = *(void *)(a2 + 40);
      }
      if (v82 >= 0) {
        uint64_t v84 = *(unsigned __int8 *)(a2 + 63);
      }
      else {
        uint64_t v84 = *(void *)(a2 + 48);
      }
      uint64_t v85 = sub_188FC78(v81, v83, v84);
      int v86 = sub_188FC78(v85, (uint64_t)" with a lane closure count ", 27);
      LOBYTE(v156) = *v129;
      int v87 = sub_188FC78(v86, (uint64_t)&v156, 1);
      sub_188FC78(v87, (uint64_t)" but no lane closure type is set.", 33);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v156, 3u);
      if (v158 < 0) {
        operator delete(v156);
      }
      if (SHIBYTE(v137) < 0) {
        operator delete(v135[0]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    BOOL v75 = 0;
  }
  if (*(_DWORD *)(a2 + 144) == 0x7FFFFFFF)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&__dst);
      uint64_t v88 = sub_188FC78(&__dst, (uint64_t)"Encountered incident ", 21);
      char v89 = *(unsigned char *)(a2 + 63);
      if (v89 >= 0) {
        uint64_t v90 = (uint64_t)v131;
      }
      else {
        uint64_t v90 = *(void *)(a2 + 40);
      }
      if (v89 >= 0) {
        uint64_t v91 = *(unsigned __int8 *)(a2 + 63);
      }
      else {
        uint64_t v91 = *(void *)(a2 + 48);
      }
      unsigned int v92 = sub_188FC78(v88, v90, v91);
      sub_188FC78(v92, (uint64_t)" without a valid start time.", 28);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v156, 3u);
      if (v158 < 0) {
        operator delete(v156);
      }
      if (SHIBYTE(v137) < 0) {
        operator delete(v135[0]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    BOOL v75 = 0;
  }
  if (*(_DWORD *)(a2 + 152) == 0x7FFFFFFF)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&__dst);
      int v93 = sub_188FC78(&__dst, (uint64_t)"Encountered incident ", 21);
      char v94 = *(unsigned char *)(a2 + 63);
      if (v94 >= 0) {
        uint64_t v95 = (uint64_t)v131;
      }
      else {
        uint64_t v95 = *(void *)(a2 + 40);
      }
      if (v94 >= 0) {
        uint64_t v96 = *(unsigned __int8 *)(a2 + 63);
      }
      else {
        uint64_t v96 = *(void *)(a2 + 48);
      }
      int v97 = sub_188FC78(v93, v95, v96);
      sub_188FC78(v97, (uint64_t)" without a valid update time.", 29);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v156, 3u);
      if (v158 < 0) {
        operator delete(v156);
      }
      if (SHIBYTE(v137) < 0) {
        operator delete(v135[0]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    BOOL v75 = 0;
  }
  if (v128)
  {
    uint64_t v98 = *(int *)(a2 + 144);
    if (v128 + v98 <= 0x7FFFFFFE)
    {
      int v99 = v98 + v128;
      if ((int)v98 + (int)v128 > (int)v98)
      {
        *(_DWORD *)(a2 + 148) = v99;
        if (v124)
        {
          int v100 = *(_DWORD *)(a2 + 152);
          if (v100 != 0x7FFFFFFF && v100 > v99)
          {
            if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)&__dst);
              int64x2_t v101 = sub_188FC78(&__dst, (uint64_t)"Encountered incident ", 21);
              char v102 = *(unsigned char *)(a2 + 63);
              if (v102 >= 0) {
                uint64_t v103 = (uint64_t)v131;
              }
              else {
                uint64_t v103 = *(void *)(a2 + 40);
              }
              if (v102 >= 0) {
                uint64_t v104 = *(unsigned __int8 *)(a2 + 63);
              }
              else {
                uint64_t v104 = *(void *)(a2 + 48);
              }
              uint64_t v105 = sub_188FC78(v101, v103, v104);
              sub_188FC78(v105, (uint64_t)" which is marked active but the update time is past the incident end time.", 74);
              std::stringbuf::str();
              sub_7246C((uint64_t *)&v156, 3u);
              if (v158 < 0) {
                operator delete(v156);
              }
              sub_111ECAC((uint64_t)&__dst);
            }
            BOOL v75 = 0;
          }
        }
      }
    }
  }
  if ((*(unsigned char *)(a2 + 24) & 0x20) != 0)
  {
    if (!sub_723EC(3u)) {
      goto LABEL_214;
    }
    sub_6BAC((uint64_t)&__dst);
    uint64_t v114 = sub_188FC78(&__dst, (uint64_t)"Encountered incident ", 21);
    char v115 = *(unsigned char *)(a2 + 63);
    if (v115 >= 0) {
      uint64_t v116 = (uint64_t)v131;
    }
    else {
      uint64_t v116 = *(void *)(a2 + 40);
    }
    if (v115 >= 0) {
      uint64_t v117 = *(unsigned __int8 *)(a2 + 63);
    }
    else {
      uint64_t v117 = *(void *)(a2 + 48);
    }
    uint64_t v118 = sub_188FC78(v114, v116, v117);
    sub_188FC78(v118, (uint64_t)" with undefined transport type.", 31);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v156, 3u);
LABEL_209:
    if (v158 < 0) {
      operator delete(v156);
    }
    if (SHIBYTE(v137) < 0) {
      operator delete(v135[0]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    goto LABEL_214;
  }
  if (!v75)
  {
LABEL_214:
    uint64_t v155 = 0;
    long long v154 = 0u;
    memset(v153, 0, sizeof(v153));
    long long v150 = 0u;
    int v143 = 0;
    *(void *)BOOL v142 = 0x700000000;
    int v137 = 0;
    long long __dst = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(void *)&__p[12] = -1;
    *(_DWORD *)&__p[20] = 0x7FFFFFFF;
    memset(v134, 0, sizeof(v134));
    *(_OWORD *)uint64_t v135 = 0u;
    int v136 = 3;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v140 = 0u;
    uint64_t v141 = 0x7FFFFFFF00000000;
    *(_DWORD *)&v142[5] = 0;
    *(_DWORD *)&v142[8] = 0;
    long long v144 = 0u;
    long long v145 = 0u;
    memset(v146, 0, sizeof(v146));
    long long v147 = 0u;
    memset(v148, 0, sizeof(v148));
    v148[7] = 0x7FFFFFFF;
    int64x2_t v149 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    BYTE8(v150) = 0;
    HIDWORD(v150) = 0x7FFFFFFF;
    long long v151 = 0u;
    long long v152 = 0u;
    memset_pattern16(v153, &xmmword_20B8FC0, 0x30uLL);
    LOWORD(v154) = -1;
    LOBYTE(v155) = 0;
    sub_301388((char **)a2, (uint64_t)&__dst);
    return sub_29D95C((uint64_t)&__dst);
  }
  uint64_t result = sub_302EF0(v127);
  uint64_t v108 = *(void *)(a2 + 224);
  uint64_t v107 = *(void *)(a2 + 232);
  if (v108 == v107)
  {
    *(unsigned char *)(a2 + 272) = 0;
    if (!*(_DWORD *)(a2 + 24)) {
LABEL_217:
    }
      *(_DWORD *)(a2 + 24) = 1;
  }
  else
  {
    uint64_t v109 = v108 + 8;
    do
    {
      BOOL v110 = *(unsigned char *)(v109 - 8) == 14;
      BOOL v111 = *(unsigned char *)(v109 - 8) == 14 || v109 == v107;
      v109 += 8;
    }
    while (!v111);
    *(unsigned char *)(a2 + 272) = v110;
    if (!*(_DWORD *)(a2 + 24)) {
      goto LABEL_217;
    }
  }
  return result;
}

void sub_2FF08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v27 - 121) < 0)
  {
    operator delete(*(void **)(v27 - 144));
    sub_111ECAC((uint64_t)&__p);
    sub_29D95C(v26);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&__p);
  sub_29D95C(v26);
  _Unwind_Resume(a1);
}

void sub_2FF1D8(_Unwind_Exception *a1)
{
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2FF298(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *a2 + a2[1];
  *(void *)&long long v56 = *a2;
  *((void *)&v56 + 1) = v5;
  uint64_t v57 = 0x2C700000000;
  uint64_t v6 = *(void **)(a3 + 8);
  if ((unint64_t)v6 >= *(void *)(a3 + 16))
  {
    unint64_t v7 = sub_3B3B0((char **)a3);
  }
  else
  {
    void *v6 = 0;
    v6[1] = 0;
    unint64_t v7 = (char *)(v6 + 3);
    v6[2] = 0;
  }
  *(void *)(a3 + 8) = v7;
  unint64_t v8 = sub_2F4CE4(&v56, 2);
  unint64_t v9 = (void *)*((void *)v7 - 3);
  if (v8 > (uint64_t)(*((void *)v7 - 1) - (void)v9) >> 3)
  {
    if (v8 >> 61) {
      sub_2E00();
    }
    uint64_t v10 = *((void *)v7 - 2);
    uint64_t v11 = 8 * v8;
    long long v12 = (char *)operator new(8 * v8);
    uint64_t v13 = &v12[v10 - (void)v9];
    unsigned int v14 = v13;
    if ((void *)v10 != v9)
    {
      unsigned int v14 = &v12[v10 - (void)v9];
      do
      {
        int v15 = *(_DWORD *)(v10 - 8);
        v10 -= 8;
        int v16 = *(_DWORD *)(v10 + 3);
        *((_DWORD *)v14 - 2) = v15;
        v14 -= 8;
        *(_DWORD *)(v14 + 3) = v16;
      }
      while ((void *)v10 != v9);
    }
    *((void *)v7 - 3) = v14;
    *((void *)v7 - 2) = v13;
    *((void *)v7 - 1) = &v12[v11];
    if (v9) {
      operator delete(v9);
    }
  }
  char v17 = 0;
  if (sub_2F333C((uint64_t)&v56))
  {
    while (1)
    {
      while (v57 != 2)
      {
        switch(HIDWORD(v57))
        {
          case 0:
            sub_2F3C98((uint64_t *)&v56, *((uint64_t *)&v56 + 1));
            break;
          case 1:
            *(void *)&long long v56 = v56 + 8;
            if ((unint64_t)v56 > *((void *)&v56 + 1))
            {
              exception = __cxa_allocate_exception(0x40uLL);
              *(void *)&v58[0] = operator new(0x30uLL);
              *(long long *)((char *)v58 + 8) = xmmword_20E1380;
              strcpy(*(char **)&v58[0], "Skipping over bytes exceeded message length.");
              long long v53 = (void *)sub_2F404((uint64_t)exception, v58);
            }
            return result;
          case 2:
            unsigned int v18 = sub_2F36C8((char **)&v56, *((char **)&v56 + 1));
            *(void *)&long long v56 = v56 + v18;
            if ((unint64_t)v56 > *((void *)&v56 + 1))
            {
              int v50 = __cxa_allocate_exception(0x40uLL);
              *(void *)&v58[0] = operator new(0x30uLL);
              *(long long *)((char *)v58 + 8) = xmmword_20E1380;
              strcpy(*(char **)&v58[0], "Skipping over bytes exceeded message length.");
              unsigned int v51 = (void *)sub_2F404((uint64_t)v50, v58);
            }
            return result;
          case 5:
            *(void *)&long long v56 = v56 + 4;
            if ((unint64_t)v56 > *((void *)&v56 + 1))
            {
              int v48 = __cxa_allocate_exception(0x40uLL);
              *(void *)&v58[0] = operator new(0x30uLL);
              *(long long *)((char *)v58 + 8) = xmmword_20E1380;
              strcpy(*(char **)&v58[0], "Skipping over bytes exceeded message length.");
              unint64_t v49 = (void *)sub_2F404((uint64_t)v48, v58);
            }
            return result;
          default:
            uint64_t v54 = __cxa_allocate_exception(0x40uLL);
            BYTE7(v58[1]) = 18;
            strcpy((char *)v58, "Unknown wire type.");
            uint64_t v55 = (void *)sub_2F404((uint64_t)v54, v58);
        }
        if (!sub_2F333C((uint64_t)&v56)) {
          goto LABEL_61;
        }
      }
      uint64_t v19 = *(void *)(a1 + 24);
      int64_t v20 = sub_2F3E7C((char **)&v56, *((char **)&v56 + 1));
      uint64_t v21 = v20;
      uint64_t v22 = v20 >= 0 ? v20 : -v20;
      unint64_t v23 = sub_2FD4C0(v19, v22);
      BOOL v24 = v23 > 0xFFFFFFFEFFFFFFFFLL || v23 == 0;
      int v25 = v24;
      int v26 = v21 < 1 ? 1 : v25;
      uint64_t v27 = v26 ? 0x1000000000000 : 0;
      uint64_t v28 = v25 ? 0 : v23 & 0xFFFFFFFFFFFFLL;
      if (v28) {
        break;
      }
LABEL_60:
      char v17 = 1;
      if (!sub_2F333C((uint64_t)&v56)) {
        goto LABEL_61;
      }
    }
    uint64_t v29 = v27 | v28;
    uint64_t v30 = *(void *)(a3 + 8);
    uint64_t v32 = *(_DWORD **)(v30 - 16);
    unint64_t v31 = *(void *)(v30 - 8);
    if ((unint64_t)v32 < v31)
    {
      *(void *)uint64_t v32 = v29;
      uint64_t v33 = v32 + 2;
LABEL_59:
      *(void *)(v30 - 16) = v33;
      goto LABEL_60;
    }
    long long v34 = *(unsigned char **)(v30 - 24);
    uint64_t v35 = ((char *)v32 - v34) >> 3;
    unint64_t v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v37 = v31 - (void)v34;
    if (v37 >> 2 > v36) {
      unint64_t v36 = v37 >> 2;
    }
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v38 = v36;
    }
    if (v38)
    {
      if (v38 >> 61) {
        sub_188D718();
      }
      size_t v39 = (char *)operator new(8 * v38);
      uint64_t v40 = (uint64_t)&v39[8 * v35];
      *(void *)uint64_t v40 = v29;
      uint64_t v33 = (void *)(v40 + 8);
      if (v32 == (_DWORD *)v34) {
        goto LABEL_57;
      }
    }
    else
    {
      size_t v39 = 0;
      uint64_t v40 = 8 * v35;
      int v41 = (uint64_t *)(8 * v35);
      *int v41 = v29;
      uint64_t v33 = v41 + 1;
      if (v32 == (_DWORD *)v34) {
        goto LABEL_57;
      }
    }
    do
    {
      int v42 = *(v32 - 2);
      v32 -= 2;
      int v43 = *(_DWORD *)((char *)v32 + 3);
      *(_DWORD *)(v40 - 8) = v42;
      v40 -= 8;
      *(_DWORD *)(v40 + 3) = v43;
    }
    while (v32 != (_DWORD *)v34);
    uint64_t v32 = *(_DWORD **)(v30 - 24);
LABEL_57:
    *(void *)(v30 - 24) = v40;
    *(void *)(v30 - 16) = v33;
    *(void *)(v30 - 8) = &v39[8 * v38];
    if (v32) {
      operator delete(v32);
    }
    goto LABEL_59;
  }
LABEL_61:
  uint64_t v44 = *(void *)(a3 + 8);
  uint64_t v46 = v44 - 24;
  uint64_t v45 = *(void **)(v44 - 24);
  if (v45 == *(void **)(v44 - 16))
  {
    if (v45)
    {
      *(void *)(v44 - 16) = v45;
      operator delete(v45);
    }
    *(void *)(a3 + 8) = v46;
  }
  return v17 & 1;
}

void sub_2FF77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_2FF7D8@<D0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 28) = -1;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  *(_OWORD *)(a2 + 40) = 0u;
  int v4 = (void **)(a2 + 40);
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_DWORD *)(a2 + 88) = 3;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_DWORD *)(a2 + 144) = 0;
  *(void *)(a2 + 148) = 0x7FFFFFFFLL;
  *(unsigned char *)(a2 + 156) = 7;
  *(_DWORD *)(a2 + 160) = 0;
  *(_DWORD *)(a2 + 157) = 0;
  *(_OWORD *)(a2 + 168) = 0u;
  uint64_t v5 = (void **)(a2 + 168);
  *(unsigned char *)(a2 + 216) = 0;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 236) = 0u;
  *(_OWORD *)(a2 + 252) = 0u;
  *(_OWORD *)(a2 + 220) = 0u;
  *(void *)(a2 + 265) = 0;
  *(_DWORD *)(a2 + 280) = 0x7FFFFFFF;
  *(int64x2_t *)(a2 + 288) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(void *)(a2 + 304) = 0;
  *(unsigned char *)(a2 + 312) = 0;
  *(_DWORD *)(a2 + 316) = 0x7FFFFFFF;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 336) = 0u;
  memset_pattern16((void *)(a2 + 352), &xmmword_20B8FC0, 0x30uLL);
  *(_WORD *)(a2 + 400) = -1;
  *(void *)(a2 + 408) = 0;
  *(unsigned char *)(a2 + 416) = 0;
  if (a1)
  {
    unint64_t v7 = (unsigned __int16 *)((char *)a1 - *a1);
    if (*v7 > 0xAu)
    {
      if (v7[2])
      {
        uint64_t v8 = v7[5];
        if (v8)
        {
          if (*(int *)((char *)a1 + v8 + *(unsigned int *)((char *)a1 + v8)))
          {
            unint64_t v9 = sub_3B3B0((char **)a2);
            uint64_t v10 = *a1;
            *(void *)(a2 + 8) = v9;
            uint64_t v11 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 - v10 + 10));
            uint64_t v12 = *v11;
            unsigned int v14 = (uint64_t *)((char *)v11 + v12 + 4);
            uint64_t v13 = *(unsigned int *)((char *)v11 + v12);
            if (v13)
            {
              uint64_t v15 = 8 * v13;
              do
              {
                int v16 = *(void **)(a2 + 8);
                if (*(_DWORD *)v14)
                {
                  sub_2FFC90((uint64_t)(v16 - 3), v14);
                }
                else if ((unint64_t)v16 >= *(void *)(a2 + 16))
                {
                  *(void *)(a2 + 8) = sub_3B3B0((char **)a2);
                }
                else
                {
                  void *v16 = 0;
                  v16[1] = 0;
                  long long v16[2] = 0;
                  *(void *)(a2 + 8) = v16 + 3;
                }
                ++v14;
                v15 -= 8;
              }
              while (v15);
              unint64_t v9 = *(char **)(a2 + 8);
            }
            char v17 = *(char **)a2;
            if (*(char **)a2 != v9)
            {
              unsigned int v18 = *(char **)a2;
              while (*(void *)v18 == *((void *)v18 + 1))
              {
                v18 += 24;
                if (v18 == v9)
                {
                  if (v17 != v9)
                  {
                    uint64_t v19 = v9;
                    do
                    {
                      uint64_t v21 = (void *)*((void *)v19 - 3);
                      v19 -= 24;
                      int64_t v20 = v21;
                      if (v21)
                      {
                        *((void *)v9 - 2) = v20;
                        operator delete(v20);
                      }
                      unint64_t v9 = v19;
                    }
                    while (v19 != v17);
                  }
                  goto LABEL_24;
                }
              }
              uint64_t v22 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 - *a1 + 4));
              uint64_t v23 = *v22;
              int v25 = (char *)v22 + v23 + 4;
              size_t v24 = *(unsigned int *)((char *)v22 + v23);
              if (v24 >= 0x17)
              {
                uint64_t v27 = (v24 & 0xFFFFFFF8) + 8;
                if ((v24 | 7) != 0x17) {
                  uint64_t v27 = v24 | 7;
                }
                uint64_t v28 = v27 + 1;
                p_dst = (long long *)operator new(v27 + 1);
                *((void *)&__dst + 1) = v24;
                unint64_t v45 = v28 | 0x8000000000000000;
                *(void *)&long long __dst = p_dst;
              }
              else
              {
                HIBYTE(v45) = *(unsigned int *)((char *)v22 + v23);
                p_dst = &__dst;
                if (!v24)
                {
LABEL_32:
                  *((unsigned char *)p_dst + v24) = 0;
                  if (*(char *)(a2 + 63) < 0) {
                    operator delete(*v4);
                  }
                  *(_OWORD *)int v4 = __dst;
                  *(void *)(a2 + 56) = v45;
                  uint64_t v29 = (unsigned __int16 *)((char *)a1 - *a1);
                  unsigned int v30 = *v29;
                  if (v30 < 7 || !v29[3] || !*((unsigned char *)a1 + v29[3])) {
                    *(_DWORD *)(a2 + 88) = 2;
                  }
                  if (v30 >= 9 && v29[4])
                  {
                    unsigned int v31 = *((unsigned __int8 *)a1 + v29[4]);
                    unsigned int v32 = *(_DWORD *)(a2 + 24) & 0xFFFFFFF6 | (8 * ((v31 >> 2) & 1)) | v31 & 1;
                    *(_DWORD *)(a2 + 24) = v32;
                    if ((v31 & 2) != 0)
                    {
                      unsigned int v33 = v32 | 4;
                      goto LABEL_44;
                    }
                  }
                  else
                  {
                    unsigned int v32 = *(_DWORD *)(a2 + 24) & 0xFFFFFFF6;
                    *(_DWORD *)(a2 + 24) = v32;
                  }
                  unsigned int v33 = v32 & 0xFFFFFFFB;
LABEL_44:
                  *(_DWORD *)(a2 + 24) = v33;
                  if (v30 <= 0xC)
                  {
                    *(_DWORD *)(a2 + 144) = 0;
                  }
                  else
                  {
                    uint64_t v34 = v29[6];
                    if (v29[6]) {
                      LODWORD(v34) = *(int *)((char *)a1 + v34);
                    }
                    *(_DWORD *)(a2 + 144) = v34;
                    if (v30 >= 0xF)
                    {
                      if (v29[7])
                      {
                        int v35 = *(int *)((char *)a1 + v29[7]);
                        if (!v35) {
                          int v35 = 0x7FFFFFFF;
                        }
                      }
                      else
                      {
                        int v35 = 0x7FFFFFFF;
                      }
                      *(_DWORD *)(a2 + 148) = v35;
                      *(unsigned char *)(a2 + 158) = v35 != 0x7FFFFFFF;
                      if (v30 >= 0x11)
                      {
                        uint64_t v36 = v29[8];
                        if (v36)
                        {
                          uint64_t v37 = (unsigned int *)((char *)a1 + v36);
                          uint64_t v38 = *v37;
                          uint64_t v40 = (char *)v37 + v38 + 4;
                          size_t v39 = *(unsigned int *)((char *)v37 + v38);
                          if (v39 >= 0x17)
                          {
                            uint64_t v42 = (v39 & 0xFFFFFFF8) + 8;
                            if ((v39 | 7) != 0x17) {
                              uint64_t v42 = v39 | 7;
                            }
                            uint64_t v43 = v42 + 1;
                            int v41 = (long long *)operator new(v42 + 1);
                            *((void *)&__dst + 1) = v39;
                            unint64_t v45 = v43 | 0x8000000000000000;
                            *(void *)&long long __dst = v41;
                          }
                          else
                          {
                            HIBYTE(v45) = *(unsigned int *)((char *)v37 + v38);
                            int v41 = &__dst;
                            if (!v39)
                            {
LABEL_68:
                              *((unsigned char *)v41 + v39) = 0;
                              if ((*(char *)(a2 + 191) & 0x80000000) == 0) {
                                goto LABEL_56;
                              }
                              goto LABEL_55;
                            }
                          }
                          memcpy(v41, v40, v39);
                          goto LABEL_68;
                        }
                      }
LABEL_54:
                      HIBYTE(v45) = 0;
                      LOBYTE(__dst) = 0;
                      if ((*(char *)(a2 + 191) & 0x80000000) == 0)
                      {
LABEL_56:
                        double result = *(double *)&__dst;
                        *(_OWORD *)uint64_t v5 = __dst;
                        *(void *)(a2 + 184) = v45;
                        return result;
                      }
LABEL_55:
                      operator delete(*v5);
                      goto LABEL_56;
                    }
                  }
                  *(_DWORD *)(a2 + 148) = 0x7FFFFFFF;
                  *(unsigned char *)(a2 + 158) = 0;
                  goto LABEL_54;
                }
              }
              memcpy(p_dst, v25, v24);
              goto LABEL_32;
            }
LABEL_24:
            *(void *)(a2 + 8) = v17;
          }
        }
      }
    }
  }
  return result;
}

void sub_2FFC40(_Unwind_Exception *a1)
{
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

void sub_2FFC54(_Unwind_Exception *a1)
{
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

void sub_2FFC68(_Unwind_Exception *a1)
{
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

void sub_2FFC7C(_Unwind_Exception *a1)
{
  sub_29D95C(v1);
  _Unwind_Resume(a1);
}

char *sub_2FFC90(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v9 = *(_DWORD **)a1;
    uint64_t v10 = ((uint64_t)v5 - *(void *)a1) >> 3;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v12 = v4 - (void)v9;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14 >> 61) {
      sub_188D718();
    }
    uint64_t v15 = 8 * v14;
    int v16 = (char *)operator new(8 * v14);
    char v17 = &v16[8 * v10];
    uint64_t v18 = *a2;
    unint64_t v19 = HIDWORD(*a2);
    *(_DWORD *)char v17 = *a2;
    *((_WORD *)v17 + 2) = v19;
    v17[6] = (v18 & 0xFF000000000000) == 0;
    for (uint64_t i = v17 + 8; v5 != v9; *(_DWORD *)(v17 + 3) = v21)
    {
      int v20 = *(v5 - 2);
      v5 -= 2;
      int v21 = *(_DWORD *)((char *)v5 + 3);
      *((_DWORD *)v17 - 2) = v20;
      v17 -= 8;
    }
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = &v16[v15];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    uint64_t v6 = *a2;
    unint64_t v7 = HIDWORD(*a2);
    _DWORD *v5 = *a2;
    *((_WORD *)v5 + 2) = v7;
    *((unsigned char *)v5 + 6) = (v6 & 0xFF000000000000) == 0;
    uint64_t i = (char *)(v5 + 2);
  }
  *(void *)(a1 + 8) = i;
  return i - 8;
}

uint64_t sub_2FFDB0@<X0>(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 416) = 0;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 220) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  uint64_t v6 = a3 + 40;
  uint64_t v7 = a3 + 424;
  *(void *)(a3 + 28) = -1;
  *(_DWORD *)(a3 + 36) = 0x7FFFFFFF;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_DWORD *)(a3 + 88) = 3;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(void *)(a3 + 144) = 0x7FFFFFFF00000000;
  *(unsigned char *)(a3 + 156) = 7;
  *(_DWORD *)(a3 + 160) = 0;
  *(_DWORD *)(a3 + 157) = 0;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(unsigned char *)(a3 + 216) = 0;
  *(_OWORD *)(a3 + 236) = 0u;
  *(_OWORD *)(a3 + 252) = 0u;
  *(void *)(a3 + 265) = 0;
  *(_DWORD *)(a3 + 280) = 0x7FFFFFFF;
  *(int64x2_t *)(a3 + 288) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_DWORD *)(a3 + 316) = 0x7FFFFFFF;
  *(_OWORD *)(a3 + 320) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  memset_pattern16((void *)(a3 + 352), &xmmword_20B8FC0, 0x30uLL);
  *(_WORD *)(a3 + 400) = -1;
  *(_OWORD *)(v6 + 384) = xmmword_20E2060;
  *(void *)(v6 + 400) = -1;
  *(_DWORD *)(v6 + 408) = 0x7FFFFFFF;
  *(_OWORD *)(v7 + 32) = 0u;
  uint64_t v8 = v7 + 32;
  *(_OWORD *)(v6 + 432) = 0u;
  *(_OWORD *)(v6 + 448) = 0u;
  *(_OWORD *)(v6 + 464) = 0u;
  *(_OWORD *)(v6 + 480) = 0u;
  *(_OWORD *)(v6 + 496) = 0u;
  *(_OWORD *)(v6 + 512) = 0u;
  *(_OWORD *)(v6 + 528) = 0u;
  *(_OWORD *)(v6 + 544) = 0u;
  *(_OWORD *)(v6 + 560) = 0u;
  *(_OWORD *)(v6 + 576) = 0u;
  *(void *)(v6 + 592) = 0;
  *(_DWORD *)(v6 + 588) = 0x7FFFFFFF;
  *(void *)(v6 + 600) = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v9 = &a2[1][(void)*a2];
  v118[0] = *a2;
  v118[1] = v9;
  uint64_t v119 = 0x2C700000000;
  if (!sub_2F333C((uint64_t)v118))
  {
LABEL_4:
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v74);
      sub_188FC78(&v74, (uint64_t)"Trying to parse an area incident but no AreaEvent is populated in the incident.", 79);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v116, 3u);
      if (v117 < 0) {
        operator delete(v116[0]);
      }
      if (SHIBYTE(v81) < 0) {
        operator delete(__p[0]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    uint64_t v101 = 0;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v94 = 0u;
    int v87 = 0;
    *(void *)int v86 = 0x700000000;
    int v81 = 0;
    long long v74 = 0u;
    *(_OWORD *)BOOL v75 = 0u;
    *(void *)&v75[12] = -1;
    int v76 = 0x7FFFFFFF;
    long long v77 = 0u;
    long long v78 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int v80 = 3;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    uint64_t v85 = 0x7FFFFFFF00000000;
    *(_DWORD *)&v86[5] = 0;
    *(_DWORD *)&v86[8] = 0;
    long long v88 = 0u;
    long long v89 = 0u;
    memset(v90, 0, sizeof(v90));
    long long v91 = 0u;
    memset(v92, 0, sizeof(v92));
    v92[7] = 0x7FFFFFFF;
    int64x2_t v93 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    BYTE8(v94) = 0;
    HIDWORD(v94) = 0x7FFFFFFF;
    long long v95 = 0u;
    long long v96 = 0u;
    memset_pattern16(&v97, &xmmword_20B8FC0, 0x30uLL);
    LOWORD(v100) = -1;
    LOBYTE(v101) = 0;
    *(_OWORD *)char v102 = xmmword_20E2060;
    *(void *)&v102[16] = -1;
    *(_DWORD *)&v102[24] = 0x7FFFFFFF;
    long long v103 = 0u;
    uint64_t v114 = 0;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    HIDWORD(v113) = 0x7FFFFFFF;
    uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
    sub_301388((char **)a3, (uint64_t)&v74);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v102;
    *(_OWORD *)(v7 + 12) = *(_OWORD *)&v102[12];
    uint64_t v10 = *(void *)(a3 + 456);
    if (v10)
    {
      uint64_t v11 = *(void *)(a3 + 464);
      uint64_t v12 = *(void **)(a3 + 456);
      if (v11 != v10)
      {
        do
          uint64_t v11 = sub_30328C(v11 - 184);
        while (v11 != v10);
        uint64_t v12 = *(void **)v8;
      }
      *(void *)(a3 + 464) = v10;
      operator delete(v12);
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
    }
    *(_OWORD *)uint64_t v8 = v103;
    *(void *)(a3 + 472) = v104;
    *(void *)&long long v104 = 0;
    long long v103 = 0uLL;
    sub_303024(a3 + 480, (uint64_t)&v104 + 8);
    sub_303198((uint64_t)&v104 + 8);
    uint64_t v13 = v103;
    if (!(void)v103) {
      return sub_29D95C((uint64_t)&v74);
    }
    uint64_t v14 = *((void *)&v103 + 1);
    uint64_t v15 = (void *)v103;
    if (*((void *)&v103 + 1) == (void)v103)
    {
LABEL_19:
      *((void *)&v103 + 1) = v13;
      operator delete(v15);
      return sub_29D95C((uint64_t)&v74);
    }
    do
      uint64_t v14 = sub_30328C(v14 - 184);
    while (v14 != v13);
LABEL_18:
    uint64_t v15 = (void *)v103;
    goto LABEL_19;
  }
  while (v119 != 40)
  {
    sub_2F3548((uint64_t)v118);
    if (!sub_2F333C((uint64_t)v118)) {
      goto LABEL_4;
    }
  }
  sub_2FDD18(a2, (uint64_t)&v74);
  sub_301388((char **)a3, (uint64_t)&v74);
  sub_29D95C((uint64_t)&v74);
  uint64_t v17 = *(unsigned __int8 *)(a3 + 63);
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *(void *)(a3 + 48);
  }
  if (!v17)
  {
    uint64_t v101 = 0;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v94 = 0u;
    int v87 = 0;
    *(void *)int v86 = 0x700000000;
    int v81 = 0;
    long long v74 = 0u;
    *(_OWORD *)BOOL v75 = 0u;
    *(void *)&v75[12] = -1;
    int v76 = 0x7FFFFFFF;
    long long v77 = 0u;
    long long v78 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int v80 = 3;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    uint64_t v85 = 0x7FFFFFFF00000000;
    *(_DWORD *)&v86[5] = 0;
    *(_DWORD *)&v86[8] = 0;
    long long v88 = 0u;
    long long v89 = 0u;
    memset(v90, 0, sizeof(v90));
    long long v91 = 0u;
    memset(v92, 0, sizeof(v92));
    v92[7] = 0x7FFFFFFF;
    int64x2_t v93 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    BYTE8(v94) = 0;
    HIDWORD(v94) = 0x7FFFFFFF;
    long long v95 = 0u;
    long long v96 = 0u;
    memset_pattern16(&v97, &xmmword_20B8FC0, 0x30uLL);
    LOWORD(v100) = -1;
    LOBYTE(v101) = 0;
    *(_OWORD *)char v102 = xmmword_20E2060;
    *(void *)&v102[16] = -1;
    *(_DWORD *)&v102[24] = 0x7FFFFFFF;
    long long v103 = 0u;
    uint64_t v114 = 0;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    HIDWORD(v113) = 0x7FFFFFFF;
    uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
    sub_301388((char **)a3, (uint64_t)&v74);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v102;
    *(_OWORD *)(v7 + 12) = *(_OWORD *)&v102[12];
    uint64_t v41 = *(void *)(a3 + 456);
    if (v41)
    {
      uint64_t v42 = *(void *)(a3 + 464);
      uint64_t v43 = *(void **)(a3 + 456);
      if (v42 != v41)
      {
        do
          uint64_t v42 = sub_30328C(v42 - 184);
        while (v42 != v41);
        uint64_t v43 = *(void **)v8;
      }
      *(void *)(a3 + 464) = v41;
      operator delete(v43);
      *(void *)uint64_t v8 = 0;
      *(void *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
    }
    *(_OWORD *)uint64_t v8 = v103;
    *(void *)(a3 + 472) = v104;
    *(void *)&long long v104 = 0;
    long long v103 = 0uLL;
    sub_303024(a3 + 480, (uint64_t)&v104 + 8);
    sub_303198((uint64_t)&v104 + 8);
    uint64_t v13 = v103;
    if (!(void)v103) {
      return sub_29D95C((uint64_t)&v74);
    }
    uint64_t v44 = *((void *)&v103 + 1);
    uint64_t v15 = (void *)v103;
    if (*((void *)&v103 + 1) == (void)v103) {
      goto LABEL_19;
    }
    do
      uint64_t v44 = sub_30328C(v44 - 184);
    while (v44 != v13);
    goto LABEL_18;
  }
  *(void *)&long long v74 = sub_2F3488(v118);
  *((void *)&v74 + 1) = v18;
  sub_30174C(a1, (char **)&v74, a3);
  uint64_t v19 = *(void *)(a3 + 456);
  uint64_t v20 = *(void *)(a3 + 464);
  BOOL v21 = v19 != v20;
  if (v19 == v20 && sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v74);
    uint64_t v22 = sub_188FC78(&v74, (uint64_t)"Encountered area incident ", 26);
    int v23 = *(char *)(a3 + 63);
    if (v23 >= 0) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = *(void *)(a3 + 40);
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(a3 + 63);
    }
    else {
      uint64_t v25 = *(void *)(a3 + 48);
    }
    int v26 = sub_188FC78(v22, v24, v25);
    sub_188FC78(v26, (uint64_t)" with no area.", 14);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v116, 3u);
    if (v117 < 0) {
      operator delete(v116[0]);
    }
    if (SHIBYTE(v81) < 0) {
      operator delete(__p[0]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v27 = *(void *)(a3 + 456);
  uint64_t v28 = *(void *)(a3 + 464);
  if (v27 != v28)
  {
    do
    {
      BOOL v29 = sub_358B6C(v27);
      v27 += 184;
    }
    while (v27 != v28 && v29);
    if (!v29)
    {
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v74);
        unsigned int v31 = sub_188FC78(&v74, (uint64_t)"Encountered area incident ", 26);
        int v32 = *(char *)(a3 + 63);
        if (v32 >= 0) {
          uint64_t v33 = v6;
        }
        else {
          uint64_t v33 = *(void *)(a3 + 40);
        }
        if (v32 >= 0) {
          uint64_t v34 = *(unsigned __int8 *)(a3 + 63);
        }
        else {
          uint64_t v34 = *(void *)(a3 + 48);
        }
        int v35 = sub_188FC78(v31, v33, v34);
        sub_188FC78(v35, (uint64_t)" with invalid area(s).", 22);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v116, 3u);
        if (v117 < 0) {
          operator delete(v116[0]);
        }
        if (SHIBYTE(v81) < 0) {
          operator delete(__p[0]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      BOOL v21 = 0;
    }
  }
  if (*(void *)(a3 + 64) == *(void *)(a3 + 72))
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v74);
      unint64_t v45 = sub_188FC78(&v74, (uint64_t)"Encountered area incident ", 26);
      int v46 = *(char *)(a3 + 63);
      if (v46 >= 0) {
        uint64_t v47 = v6;
      }
      else {
        uint64_t v47 = *(void *)(a3 + 40);
      }
      if (v46 >= 0) {
        uint64_t v48 = *(unsigned __int8 *)(a3 + 63);
      }
      else {
        uint64_t v48 = *(void *)(a3 + 48);
      }
      unint64_t v49 = sub_188FC78(v45, v47, v48);
      sub_188FC78(v49, (uint64_t)" without any descriptions.", 26);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v116, 3u);
      if (v117 < 0) {
        operator delete(v116[0]);
      }
      if (SHIBYTE(v81) < 0) {
        operator delete(__p[0]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    BOOL v21 = 0;
    if (*(void *)(a3 + 568) != *(void *)(a3 + 576))
    {
LABEL_58:
      uint64_t v36 = a3 + 480;
      if (*(unsigned char *)(a3 + 480)) {
        goto LABEL_59;
      }
      goto LABEL_101;
    }
  }
  else if (*(void *)(a3 + 568) != *(void *)(a3 + 576))
  {
    goto LABEL_58;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v74);
    int v50 = sub_188FC78(&v74, (uint64_t)"Encountered area incident ", 26);
    int v51 = *(char *)(a3 + 63);
    if (v51 >= 0) {
      uint64_t v52 = v6;
    }
    else {
      uint64_t v52 = *(void *)(a3 + 40);
    }
    if (v51 >= 0) {
      uint64_t v53 = *(unsigned __int8 *)(a3 + 63);
    }
    else {
      uint64_t v53 = *(void *)(a3 + 48);
    }
    uint64_t v54 = sub_188FC78(v50, v52, v53);
    sub_188FC78(v54, (uint64_t)" without advisories.", 20);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v116, 3u);
    if (v117 < 0) {
      operator delete(v116[0]);
    }
    if (SHIBYTE(v81) < 0) {
      operator delete(__p[0]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  BOOL v21 = 0;
  uint64_t v36 = a3 + 480;
  if (*(unsigned char *)(a3 + 480))
  {
LABEL_59:
    if (*(unsigned char *)(a3 + 616) == (*(unsigned char *)(a3 + 480) == 2)) {
      goto LABEL_60;
    }
    goto LABEL_114;
  }
LABEL_101:
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v74);
    uint64_t v55 = sub_188FC78(&v74, (uint64_t)"Encountered area incident ", 26);
    int v56 = *(char *)(a3 + 63);
    if (v56 >= 0) {
      uint64_t v57 = v6;
    }
    else {
      uint64_t v57 = *(void *)(a3 + 40);
    }
    if (v56 >= 0) {
      uint64_t v58 = *(unsigned __int8 *)(a3 + 63);
    }
    else {
      uint64_t v58 = *(void *)(a3 + 48);
    }
    uint64_t v59 = sub_188FC78(v55, v57, v58);
    sub_188FC78(v59, (uint64_t)" with UNKNOWN area event type.", 30);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v116, 3u);
    if (v117 < 0) {
      operator delete(v116[0]);
    }
    if (SHIBYTE(v81) < 0) {
      operator delete(__p[0]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  BOOL v21 = 0;
  if (*(unsigned char *)(a3 + 616) == (*(unsigned char *)(a3 + 480) == 2))
  {
LABEL_60:
    if ((*(unsigned __int8 *)(a3 + 632) | 2) == 7) {
      goto LABEL_61;
    }
LABEL_127:
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v74);
      uint64_t v65 = sub_188FC78(&v74, (uint64_t)"Encountered area incident ", 26);
      int v66 = *(char *)(a3 + 63);
      if (v66 >= 0) {
        uint64_t v67 = v6;
      }
      else {
        uint64_t v67 = *(void *)(a3 + 40);
      }
      if (v66 >= 0) {
        uint64_t v68 = *(unsigned __int8 *)(a3 + 63);
      }
      else {
        uint64_t v68 = *(void *)(a3 + 48);
      }
      int v69 = sub_188FC78(v65, v67, v68);
      sub_188FC78(v69, (uint64_t)" with unsupported routing restriction type.", 43);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v116, 3u);
      if (v117 < 0) {
        operator delete(v116[0]);
      }
      if (SHIBYTE(v81) < 0) {
        operator delete(__p[0]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    goto LABEL_139;
  }
LABEL_114:
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v74);
    uint64_t v60 = sub_188FC78(&v74, (uint64_t)"Encountered area incident ", 26);
    int v61 = *(char *)(a3 + 63);
    if (v61 >= 0) {
      uint64_t v62 = v6;
    }
    else {
      uint64_t v62 = *(void *)(a3 + 40);
    }
    if (v61 >= 0) {
      uint64_t v63 = *(unsigned __int8 *)(a3 + 63);
    }
    else {
      uint64_t v63 = *(void *)(a3 + 48);
    }
    uint64_t v64 = sub_188FC78(v60, v62, v63);
    sub_188FC78(v64, (uint64_t)" with inconsistent fire data.", 29);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v116, 3u);
    if (v117 < 0) {
      operator delete(v116[0]);
    }
    if (SHIBYTE(v81) < 0) {
      operator delete(__p[0]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  BOOL v21 = 0;
  if ((*(unsigned __int8 *)(a3 + 632) | 2) != 7) {
    goto LABEL_127;
  }
LABEL_61:
  if (!v21)
  {
LABEL_139:
    uint64_t v101 = 0;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long v94 = 0u;
    int v87 = 0;
    *(void *)int v86 = 0x700000000;
    int v81 = 0;
    long long v74 = 0u;
    *(_OWORD *)BOOL v75 = 0u;
    *(void *)&v75[12] = -1;
    int v76 = 0x7FFFFFFF;
    long long v77 = 0u;
    long long v78 = 0u;
    *(_OWORD *)std::string __p = 0u;
    int v80 = 3;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    uint64_t v85 = 0x7FFFFFFF00000000;
    *(_DWORD *)&v86[5] = 0;
    *(_DWORD *)&v86[8] = 0;
    long long v88 = 0u;
    long long v89 = 0u;
    memset(v90, 0, sizeof(v90));
    long long v91 = 0u;
    memset(v92, 0, sizeof(v92));
    v92[7] = 0x7FFFFFFF;
    int64x2_t v93 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    BYTE8(v94) = 0;
    HIDWORD(v94) = 0x7FFFFFFF;
    long long v95 = 0u;
    long long v96 = 0u;
    memset_pattern16(&v97, &xmmword_20B8FC0, 0x30uLL);
    LOWORD(v100) = -1;
    LOBYTE(v101) = 0;
    *(_OWORD *)char v102 = xmmword_20E2060;
    *(void *)&v102[16] = -1;
    *(_DWORD *)&v102[24] = 0x7FFFFFFF;
    long long v103 = 0u;
    uint64_t v114 = 0;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    HIDWORD(v113) = 0x7FFFFFFF;
    uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
    sub_301388((char **)a3, (uint64_t)&v74);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v102;
    *(_OWORD *)(v7 + 12) = *(_OWORD *)&v102[12];
    uint64_t v70 = *(void *)(a3 + 456);
    if (v70)
    {
      uint64_t v71 = *(void *)(a3 + 464);
      unsigned int v72 = *(void **)(a3 + 456);
      if (v71 != v70)
      {
        do
          uint64_t v71 = sub_30328C(v71 - 184);
        while (v71 != v70);
        unsigned int v72 = *(void **)v8;
      }
      *(void *)(a3 + 464) = v70;
      operator delete(v72);
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
    }
    *(_OWORD *)uint64_t v8 = v103;
    *(void *)(a3 + 472) = v104;
    *(void *)&long long v104 = 0;
    long long v103 = 0uLL;
    sub_303024(v36, (uint64_t)&v104 + 8);
    sub_303198((uint64_t)&v104 + 8);
    uint64_t v13 = v103;
    if (!(void)v103) {
      return sub_29D95C((uint64_t)&v74);
    }
    uint64_t v73 = *((void *)&v103 + 1);
    uint64_t v15 = (void *)v103;
    if (*((void *)&v103 + 1) == (void)v103) {
      goto LABEL_19;
    }
    do
      uint64_t v73 = sub_30328C(v73 - 184);
    while (v73 != v13);
    goto LABEL_18;
  }
  uint64_t v37 = *(void *)(a3 + 456);
  unint64_t v38 = *(void *)(a3 + 464);
  unint64_t v39 = 126 - 2 * __clz(0xD37A6F4DE9BD37A7 * ((uint64_t)(v38 - v37) >> 3));
  if (v38 == v37) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = v39;
  }
  return sub_304BA4(v37, v38, (uint64_t)&v74, v40, 1);
}

void sub_30115C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v4 - 121) < 0)
  {
    operator delete(*(void **)(v4 - 144));
    sub_111ECAC((uint64_t)va);
    sub_301314(v3);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)va);
  sub_301314(v3);
  _Unwind_Resume(a1);
}

void sub_3012B0(_Unwind_Exception *a1)
{
  sub_301314(v1);
  _Unwind_Resume(a1);
}

void sub_3012C4(_Unwind_Exception *a1)
{
  sub_301314(v1);
  _Unwind_Resume(a1);
}

void sub_3012D8(_Unwind_Exception *a1)
{
  sub_301314(v1);
  _Unwind_Resume(a1);
}

void sub_3012EC(_Unwind_Exception *a1)
{
  sub_301314(v1);
  _Unwind_Resume(a1);
}

void sub_301300(_Unwind_Exception *a1)
{
  sub_301314(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_301314(uint64_t a1)
{
  sub_303198(a1 + 480);
  uint64_t v2 = *(void *)(a1 + 456);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 464);
    uint64_t v4 = *(void **)(a1 + 456);
    if (v3 != v2)
    {
      do
        uint64_t v3 = sub_30328C(v3 - 184);
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 456);
    }
    *(void *)(a1 + 464) = v2;
    operator delete(v4);
  }

  return sub_29D95C(a1);
}

char **sub_301388(char **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = *a1;
    if (v5 != v4)
    {
      uint64_t v7 = a1[1];
      do
      {
        unint64_t v9 = (void *)*((void *)v7 - 3);
        v7 -= 24;
        uint64_t v8 = v9;
        if (v9)
        {
          *((void *)v5 - 2) = v8;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      uint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(char **)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *((_DWORD *)a1 + 6) = *(_DWORD *)(a2 + 24);
  uint64_t v10 = *(char **)(a2 + 28);
  *((_DWORD *)a1 + 9) = *(_DWORD *)(a2 + 36);
  *(char **)((char *)a1 + 28) = v10;
  uint64_t v11 = (void **)(a1 + 5);
  if (*((char *)a1 + 63) < 0) {
    operator delete(*v11);
  }
  long long v12 = *(_OWORD *)(a2 + 40);
  a1[7] = *(char **)(a2 + 56);
  *(_OWORD *)uint64_t v11 = v12;
  *(unsigned char *)(a2 + 63) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  uint64_t v13 = (void **)(a1 + 8);
  uint64_t v14 = a1[8];
  if (v14)
  {
    uint64_t v15 = a1[9];
    int v16 = a1[8];
    if (v15 == v14)
    {
LABEL_21:
      a1[9] = v14;
      operator delete(v16);
      *uint64_t v13 = 0;
      a1[9] = 0;
      a1[10] = 0;
      goto LABEL_22;
    }
    while (1)
    {
      if (*(v15 - 1) < 0)
      {
        operator delete(*((void **)v15 - 3));
        if (*(v15 - 25) < 0) {
LABEL_19:
        }
          operator delete(*((void **)v15 - 6));
      }
      else if (*(v15 - 25) < 0)
      {
        goto LABEL_19;
      }
      v15 -= 48;
      if (v15 == v14)
      {
        int v16 = (char *)*v13;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  a1[10] = *(char **)(a2 + 80);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  *((_DWORD *)a1 + 22) = *(_DWORD *)(a2 + 88);
  uint64_t v17 = (void **)(a1 + 12);
  if (*((char *)a1 + 119) < 0) {
    operator delete(*v17);
  }
  long long v18 = *(_OWORD *)(a2 + 96);
  a1[14] = *(char **)(a2 + 112);
  *(_OWORD *)uint64_t v17 = v18;
  *(unsigned char *)(a2 + 119) = 0;
  *(unsigned char *)(a2 + 96) = 0;
  uint64_t v19 = (void **)(a1 + 15);
  if (*((char *)a1 + 143) < 0) {
    operator delete(*v19);
  }
  long long v20 = *(_OWORD *)(a2 + 120);
  a1[17] = *(char **)(a2 + 136);
  *(_OWORD *)uint64_t v19 = v20;
  *(unsigned char *)(a2 + 143) = 0;
  *(unsigned char *)(a2 + 120) = 0;
  int v21 = *(_DWORD *)(a2 + 160);
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  *((_DWORD *)a1 + 40) = v21;
  uint64_t v22 = (void **)(a1 + 21);
  if (*((char *)a1 + 191) < 0) {
    operator delete(*v22);
  }
  long long v23 = *(_OWORD *)(a2 + 168);
  a1[23] = *(char **)(a2 + 184);
  *(_OWORD *)uint64_t v22 = v23;
  *(unsigned char *)(a2 + 191) = 0;
  *(unsigned char *)(a2 + 168) = 0;
  uint64_t v24 = (void **)(a1 + 24);
  uint64_t v25 = a1[24];
  if (v25)
  {
    int v26 = a1[25];
    uint64_t v27 = a1[24];
    if (v26 != v25)
    {
      do
      {
        if (*(v26 - 1) < 0) {
          operator delete(*((void **)v26 - 3));
        }
        v26 -= 24;
      }
      while (v26 != v25);
      uint64_t v27 = (char *)*v24;
    }
    a1[25] = v25;
    operator delete(v27);
    *uint64_t v24 = 0;
    a1[25] = 0;
    a1[26] = 0;
  }
  *((_OWORD *)a1 + 12) = *(_OWORD *)(a2 + 192);
  a1[26] = *(char **)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  uint64_t v28 = a1[28];
  a1[27] = *(char **)(a2 + 216);
  if (v28)
  {
    a1[29] = v28;
    operator delete(v28);
    a1[28] = 0;
    a1[29] = 0;
    a1[30] = 0;
  }
  *((_OWORD *)a1 + 14) = *(_OWORD *)(a2 + 224);
  a1[30] = *(char **)(a2 + 240);
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  BOOL v29 = (void **)(a1 + 31);
  unsigned int v30 = a1[31];
  if (v30)
  {
    unsigned int v31 = a1[32];
    int v32 = a1[31];
    if (v31 != v30)
    {
      do
      {
        if (*(v31 - 1) < 0) {
          operator delete(*((void **)v31 - 3));
        }
        v31 -= 24;
      }
      while (v31 != v30);
      int v32 = (char *)*v29;
    }
    a1[32] = v30;
    operator delete(v32);
    *BOOL v29 = 0;
    a1[32] = 0;
    a1[33] = 0;
  }
  *(_OWORD *)(a1 + 31) = *(_OWORD *)(a2 + 248);
  a1[33] = *(char **)(a2 + 264);
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 248) = 0;
  *((unsigned char *)a1 + 272) = *(unsigned char *)(a2 + 272);
  long long v33 = *(_OWORD *)(a2 + 280);
  long long v34 = *(_OWORD *)(a2 + 296);
  a1[39] = *(char **)(a2 + 312);
  *(_OWORD *)(a1 + 35) = v33;
  *(_OWORD *)(a1 + 37) = v34;
  if (a1[40])
  {
    sub_29DB80((void ***)a1 + 40);
    operator delete(a1[40]);
    a1[40] = 0;
    a1[41] = 0;
    a1[42] = 0;
  }
  *((_OWORD *)a1 + 20) = *(_OWORD *)(a2 + 320);
  a1[42] = *(char **)(a2 + 336);
  *(void *)(a2 + 328) = 0;
  *(void *)(a2 + 336) = 0;
  *(void *)(a2 + 320) = 0;
  long long v36 = *(_OWORD *)(a2 + 376);
  long long v35 = *(_OWORD *)(a2 + 392);
  long long v37 = *(_OWORD *)(a2 + 360);
  a1[51] = *(char **)(a2 + 408);
  *(_OWORD *)(a1 + 47) = v36;
  *(_OWORD *)(a1 + 49) = v35;
  *(_OWORD *)(a1 + 45) = v37;
  *(_OWORD *)(a1 + 43) = *(_OWORD *)(a2 + 344);
  *((unsigned char *)a1 + 416) = *(unsigned char *)(a2 + 416);
  return a1;
}

BOOL sub_30174C(uint64_t a1, char **a2, uint64_t a3)
{
  uint64_t v4 = &a2[1][(void)*a2];
  uint64_t v54 = *a2;
  uint64_t v55 = v4;
  uint64_t v56 = 0x2C700000000;
  BOOL result = sub_2F333C((uint64_t)&v54);
  if (!result) {
    return result;
  }
  uint64_t v6 = (void **)(a3 + 592);
  while (2)
  {
    switch((int)v56)
    {
      case 1:
        uint64_t v41 = sub_2F3488(&v54);
        uint64_t v42 = v7;
        sub_30B868(&v41, *(void *)(a1 + 24), (uint64_t)__p);
        unint64_t v8 = *(void *)(a3 + 464);
        if (v8 >= *(void *)(a3 + 472))
        {
          uint64_t v10 = sub_306F8C((uint64_t *)(a3 + 456), (uint64_t)__p);
        }
        else
        {
          *(void *)(v8 + 16) = 0;
          *(void *)(v8 + 24) = 0;
          *(void *)unint64_t v8 = 0;
          *(void *)(v8 + 8) = 0;
          *(_OWORD *)unint64_t v8 = *(_OWORD *)__p;
          *(void *)(v8 + 16) = *(void *)&__p[16];
          memset(__p, 0, 24);
          *(void *)(v8 + 32) = 0;
          *(void *)(v8 + 40) = 0;
          *(_OWORD *)(v8 + 24) = *(_OWORD *)&__p[24];
          *(void *)&unsigned char __p[24] = 0;
          *(void *)&__p[32] = 0;
          *(void *)(v8 + 40) = *(void *)&__p[40];
          *(void *)(v8 + 48) = 0;
          *(void *)&__p[40] = 0;
          *(void *)(v8 + 56) = 0;
          *(void *)(v8 + 64) = 0;
          *(_OWORD *)(v8 + 48) = *(_OWORD *)v44;
          *(_OWORD *)uint64_t v44 = 0uLL;
          *(void *)(v8 + 64) = *(void *)&v44[16];
          *(void *)(v8 + 72) = 0;
          *(void *)&v44[16] = 0;
          *(void *)(v8 + 80) = 0;
          *(void *)(v8 + 88) = 0;
          *(_OWORD *)(v8 + 72) = v45;
          long long v45 = 0uLL;
          *(void *)(v8 + 88) = v46;
          *(void *)(v8 + 96) = 0;
          uint64_t v46 = 0;
          *(void *)(v8 + 104) = 0;
          *(void *)(v8 + 112) = 0;
          *(_OWORD *)(v8 + 96) = v47;
          *(void *)(v8 + 112) = v48;
          long long v47 = 0uLL;
          uint64_t v48 = 0;
          long long v9 = v49;
          *(_OWORD *)(v8 + 136) = v50;
          *(_OWORD *)(v8 + 120) = v9;
          *(void *)(v8 + 152) = 0;
          *(void *)(v8 + 160) = 0;
          *(void *)(v8 + 168) = 0;
          *(_OWORD *)(v8 + 152) = v51;
          *(void *)(v8 + 168) = v52;
          long long v51 = 0uLL;
          uint64_t v52 = 0;
          *(unsigned char *)(v8 + 176) = v53;
          uint64_t v10 = v8 + 184;
        }
        *(void *)(a3 + 464) = v10;
        sub_30328C((uint64_t)__p);
        sub_33998(a3 + 428, *(void *)(a3 + 464) - 56);
        goto LABEL_4;
      case 2:
        unint64_t v11 = sub_2F39B0(&v54, v55);
        *(_DWORD *)(a3 + 536) = sub_309544(v11);
        goto LABEL_4;
      case 3:
        uint64_t v41 = sub_2F3488(&v54);
        uint64_t v42 = v12;
        sub_30B118(&v41, (uint64_t)__p);
        unint64_t v13 = *(void *)(a3 + 552);
        if (v13 >= *(void *)(a3 + 560))
        {
          long long v33 = sub_1E1D4((void **)(a3 + 544), (uint64_t)__p);
          int v34 = __p[47];
          *(void *)(a3 + 552) = v33;
          if (v34 < 0)
          {
            operator delete(*(void **)&__p[24]);
            if ((__p[23] & 0x80000000) == 0) {
              goto LABEL_4;
            }
          }
          else if ((__p[23] & 0x80000000) == 0)
          {
            goto LABEL_4;
          }
        }
        else
        {
          long long v14 = *(_OWORD *)__p;
          *(void *)(v13 + 16) = *(void *)&__p[16];
          *(_OWORD *)unint64_t v13 = v14;
          memset(__p, 0, 24);
          uint64_t v15 = *(void *)&__p[40];
          *(_OWORD *)(v13 + 24) = *(_OWORD *)&__p[24];
          *(void *)(v13 + 40) = v15;
          memset(&__p[24], 0, 24);
          *(void *)(a3 + 552) = v13 + 48;
          if ((__p[23] & 0x80000000) == 0) {
            goto LABEL_4;
          }
        }
        operator delete(*(void **)__p);
        goto LABEL_4;
      case 4:
        uint64_t v41 = sub_2F3488(&v54);
        uint64_t v42 = v16;
        sub_30B378(&v41, (uint64_t)__p);
        sub_301D58((void **)(a3 + 488), (uint64_t)__p);
        uint64_t v17 = *(void *)&__p[24];
        if (!*(void *)&__p[24]) {
          goto LABEL_45;
        }
        uint64_t v18 = *(void *)&__p[32];
        uint64_t v19 = *(void **)&__p[24];
        if (*(void *)&__p[32] == *(void *)&__p[24]) {
          goto LABEL_44;
        }
        break;
      case 5:
        *(void *)std::string __p = sub_2F3488(&v54);
        *(void *)&__p[8] = v20;
        *(void *)(a3 + 632) = sub_30C7F8((char **)__p);
        *(void *)(a3 + 640) = v21;
        goto LABEL_4;
      case 6:
        uint64_t v41 = sub_2F3488(&v54);
        uint64_t v42 = v22;
        sub_30B570(&v41, (uint64_t)__p);
        unint64_t v23 = *(void *)(a3 + 576);
        if (v23 >= *(void *)(a3 + 584))
        {
          uint64_t v24 = sub_307310((char **)(a3 + 568), __p);
        }
        else
        {
          *(unsigned char *)unint64_t v23 = __p[0];
          *(void *)(v23 + 8) = 0;
          *(void *)(v23 + 16) = 0;
          *(void *)(v23 + 24) = 0;
          *(void *)(v23 + 32) = 0;
          *(_OWORD *)(v23 + 8) = *(_OWORD *)&__p[8];
          *(void *)(v23 + 24) = *(void *)&__p[24];
          memset(&__p[8], 0, 24);
          *(void *)(v23 + 40) = 0;
          *(void *)(v23 + 48) = 0;
          *(_OWORD *)(v23 + 32) = *(_OWORD *)&__p[32];
          *(void *)&__p[32] = 0;
          *(void *)&__p[40] = 0;
          *(void *)(v23 + 48) = *(void *)v44;
          *(void *)(v23 + 56) = 0;
          *(void *)uint64_t v44 = 0;
          *(void *)(v23 + 64) = 0;
          *(void *)(v23 + 72) = 0;
          *(_OWORD *)(v23 + 56) = *(_OWORD *)&v44[8];
          *(void *)(v23 + 72) = v45;
          *(void *)&v44[8] = 0;
          *(void *)&v44[16] = 0;
          *(void *)&long long v45 = 0;
          uint64_t v24 = (char *)(v23 + 80);
        }
        *(void *)(a3 + 576) = v24;
        sub_3034C4(__p);
        goto LABEL_4;
      case 7:
        uint64_t v25 = sub_2F3488(&v54);
        if (v26 >= 0x7FFFFFFFFFFFFFF8) {
          sub_188D690();
        }
        uint64_t v27 = v25;
        size_t v28 = v26;
        if (v26 >= 0x17)
        {
          uint64_t v35 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17) {
            uint64_t v35 = v26 | 7;
          }
          uint64_t v36 = v35 + 1;
          BOOL v29 = operator new(v35 + 1);
          *(void *)&__p[8] = v28;
          *(void *)&__p[16] = v36 | 0x8000000000000000;
          *(void *)std::string __p = v29;
        }
        else
        {
          __p[23] = v26;
          BOOL v29 = __p;
          if (!v26)
          {
            __p[0] = 0;
            if ((*(char *)(a3 + 615) & 0x80000000) == 0) {
              goto LABEL_28;
            }
            goto LABEL_42;
          }
        }
        memmove(v29, v27, v28);
        v29[v28] = 0;
        if ((*(char *)(a3 + 615) & 0x80000000) == 0) {
          goto LABEL_28;
        }
LABEL_42:
        operator delete(*v6);
LABEL_28:
        *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
        *(void *)(a3 + 608) = *(void *)&__p[16];
        goto LABEL_4;
      case 8:
        *(void *)std::string __p = sub_2F3488(&v54);
        *(void *)&__p[8] = v30;
        *(void *)(a3 + 616) = sub_30C8DC((char **)__p);
        *(void *)(a3 + 624) = v31;
        goto LABEL_4;
      case 9:
        unsigned int v32 = sub_2F39B0(&v54, v55);
        *(unsigned char *)(a3 + 480) = sub_30CAB0(v32);
        goto LABEL_4;
      default:
        sub_2F3548((uint64_t)&v54);
        goto LABEL_4;
    }
    do
    {
      if (*(char *)(v18 - 1) < 0)
      {
        operator delete(*(void **)(v18 - 24));
        if ((*(char *)(v18 - 25) & 0x80000000) == 0) {
          goto LABEL_15;
        }
      }
      else if ((*(char *)(v18 - 25) & 0x80000000) == 0)
      {
        goto LABEL_15;
      }
      operator delete(*(void **)(v18 - 48));
LABEL_15:
      v18 -= 48;
    }
    while (v18 != v17);
    uint64_t v19 = *(void **)&__p[24];
LABEL_44:
    *(void *)&__p[32] = v17;
    operator delete(v19);
LABEL_45:
    uint64_t v37 = *(void *)__p;
    if (*(void *)__p)
    {
      uint64_t v38 = *(void *)&__p[8];
      unint64_t v39 = *(void **)__p;
      if (*(void *)&__p[8] == *(void *)__p)
      {
LABEL_55:
        *(void *)&__p[8] = v37;
        operator delete(v39);
        goto LABEL_4;
      }
      while (2)
      {
        if (*(char *)(v38 - 1) < 0)
        {
          operator delete(*(void **)(v38 - 24));
          if (*(char *)(v38 - 25) < 0) {
            goto LABEL_53;
          }
        }
        else if (*(char *)(v38 - 25) < 0)
        {
LABEL_53:
          operator delete(*(void **)(v38 - 48));
        }
        v38 -= 48;
        if (v38 == v37)
        {
          unint64_t v39 = *(void **)__p;
          goto LABEL_55;
        }
        continue;
      }
    }
LABEL_4:
    BOOL result = sub_2F333C((uint64_t)&v54);
    if (result) {
      continue;
    }
    return result;
  }
}

void sub_301CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_3034C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_301D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1B23C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_301D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_30328C((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_301D58(void **a1, uint64_t a2)
{
  uint64_t v4 = (void **)*a1;
  if (*a1)
  {
    uint64_t v5 = (void **)a1[1];
    uint64_t v6 = *a1;
    if (v5 == v4)
    {
LABEL_11:
      a1[1] = v4;
      operator delete(v6);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      goto LABEL_12;
    }
    while (1)
    {
      if (*((char *)v5 - 1) < 0)
      {
        operator delete(*(v5 - 3));
        if (*((char *)v5 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v5 - 6));
      }
      else if (*((char *)v5 - 25) < 0)
      {
        goto LABEL_9;
      }
      v5 -= 6;
      if (v5 == v4)
      {
        uint64_t v6 = *a1;
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void **)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v7 = a1 + 3;
  unint64_t v8 = (void **)a1[3];
  if (v8)
  {
    long long v9 = (void **)a1[4];
    uint64_t v10 = a1[3];
    if (v9 == v8)
    {
LABEL_22:
      a1[4] = v8;
      operator delete(v10);
      *uint64_t v7 = 0;
      a1[4] = 0;
      a1[5] = 0;
      goto LABEL_23;
    }
    while (1)
    {
      if (*((char *)v9 - 1) < 0)
      {
        operator delete(*(v9 - 3));
        if (*((char *)v9 - 25) < 0) {
LABEL_20:
        }
          operator delete(*(v9 - 6));
      }
      else if (*((char *)v9 - 25) < 0)
      {
        goto LABEL_20;
      }
      v9 -= 6;
      if (v9 == v8)
      {
        uint64_t v10 = *v7;
        goto LABEL_22;
      }
    }
  }
LABEL_23:
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(void **)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return a1;
}

BOOL sub_301E9C@<W0>(char **a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = -1;
  *(void *)(a2 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a2 + 40) = 0;
  uint64_t v3 = a2 + 40;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  unint64_t v4 = (unint64_t)&a1[1][(void)*a1];
  unint64_t v26 = *a1;
  unint64_t v27 = v4;
  uint64_t v28 = 0x2C700000000;
  while (1)
  {
    BOOL result = sub_2F333C((uint64_t)&v26);
    if (!result) {
      return result;
    }
    switch(v28)
    {
      case 4:
        unint64_t v13 = sub_2F3488(&v26);
        size_t v15 = v14;
        if (v14 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        uint64_t v16 = v13;
        if (v14 >= 0x17)
        {
          uint64_t v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v14 | 7) != 0x17) {
            uint64_t v18 = v14 | 7;
          }
          uint64_t v19 = v18 + 1;
          p_dst = (long long *)operator new(v18 + 1);
          *((void *)&__dst + 1) = v15;
          unint64_t v32 = v19 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
LABEL_29:
          memmove(p_dst, v16, v15);
          *((unsigned char *)p_dst + v15) = 0;
          if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_30;
        }
        HIBYTE(v32) = v14;
        p_dst = &__dst;
        if (v14) {
          goto LABEL_29;
        }
        LOBYTE(__dst) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
          goto LABEL_24;
        }
LABEL_30:
        operator delete(*(void **)a2);
LABEL_24:
        *(_OWORD *)a2 = __dst;
        *(void *)(a2 + 16) = v32;
        break;
      case 0x1E:
        unint64_t v11 = *(void *)v26;
        v26 += 8;
        if ((unint64_t)v26 > v27)
        {
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&__dst, "Skipping over bytes exceeded message length.");
          unint64_t v23 = (void *)sub_2F404((uint64_t)exception, &__dst);
        }
        if (v11 < 0x7FFFFFFFFFFFFFFFLL)
        {
          *(void *)(a2 + 32) = v11;
        }
        else if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)&__dst);
          sub_188FC78(&__dst, (uint64_t)"Encountered congestion zone incident with congestion_zone_id ", 61);
          uint64_t v12 = (void *)std::ostream::operator<<();
          sub_188FC78(v12, (uint64_t)" that does not fit into an int64_t.", 35);
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 3u);
          if (v30 < 0) {
            operator delete(__p);
          }
          *(void *)&long long __dst = v24;
          *(void *)((char *)&__dst + *(void *)(v24 - 24)) = v25;
          if (v34 < 0) {
            operator delete(v33);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        break;
      case 0x20:
        uint64_t v6 = sub_2F3488(&v26);
        size_t v8 = v7;
        if (v7 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        long long v9 = v6;
        if (v7 >= 0x17)
        {
          uint64_t v20 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17) {
            uint64_t v20 = v7 | 7;
          }
          uint64_t v21 = v20 + 1;
          uint64_t v10 = (long long *)operator new(v20 + 1);
          *((void *)&__dst + 1) = v8;
          unint64_t v32 = v21 | 0x8000000000000000;
          *(void *)&long long __dst = v10;
LABEL_34:
          memmove(v10, v9, v8);
          *((unsigned char *)v10 + v8) = 0;
          if ((*(char *)(a2 + 63) & 0x80000000) == 0) {
            goto LABEL_11;
          }
          goto LABEL_35;
        }
        HIBYTE(v32) = v7;
        uint64_t v10 = &__dst;
        if (v7) {
          goto LABEL_34;
        }
        LOBYTE(__dst) = 0;
        if ((*(char *)(a2 + 63) & 0x80000000) == 0) {
          goto LABEL_11;
        }
LABEL_35:
        operator delete(*(void **)v3);
LABEL_11:
        *(_OWORD *)uint64_t v3 = __dst;
        *(void *)(v3 + 16) = v32;
        break;
      default:
        sub_2F3548((uint64_t)&v26);
        break;
    }
  }
}

void sub_30228C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,void (__cdecl **a23)(std::stringbuf *__hidden this),int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  a22 = a10;
  *(void **)((char *)&a22 + *((void *)a10 - 3)) = a11;
  if (a39 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  sub_3023FC(v39);
  _Unwind_Resume(a1);
}

void sub_3023D4()
{
}

uint64_t sub_3023FC(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

void sub_302458(uint64_t a1@<X0>, char **a2@<X1>, void *a3@<X8>)
{
  memset(&__p, 0, sizeof(__p));
  int v69 = 0;
  uint64_t v70 = 0;
  memset(v37, 0, sizeof(v37));
  int v38 = 0;
  uint64_t v39 = -1;
  int v40 = 0x7FFFFFFF;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  int v44 = 3;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  int v48 = 0;
  uint64_t v49 = 0x7FFFFFFFLL;
  char v50 = 7;
  memset(v51, 0, sizeof(v51));
  char v55 = 0;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  memset(v58, 0, sizeof(v58));
  int v59 = 0x7FFFFFFF;
  int64x2_t v60 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  uint64_t v61 = 0;
  char v62 = 0;
  int v63 = 0x7FFFFFFF;
  long long v64 = 0u;
  long long v65 = 0u;
  memset_pattern16(v66, &xmmword_20B8FC0, 0x30uLL);
  v66[24] = -1;
  uint64_t v67 = 0;
  char v68 = 0;
  uint64_t v5 = &a2[1][(void)*a2];
  v35[0] = *a2;
  v35[1] = v5;
  uint64_t v36 = 0x2C700000000;
  while (sub_2F333C((uint64_t)v35))
  {
    switch(v36)
    {
      case 1:
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_2F3488(v35);
        __dst.__r_.__value_.__l.__size_ = v16;
        sub_2FF298(a1, &__dst, (uint64_t)v37);
        break;
      case 4:
        unint64_t v11 = sub_2F3488(v35);
        std::string::size_type v13 = v12;
        if (v12 >= 0x7FFFFFFFFFFFFFF8) {
          sub_188D690();
        }
        unint64_t v14 = v11;
        if (v12 >= 0x17)
        {
          uint64_t v17 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v12 | 7) != 0x17) {
            uint64_t v17 = v12 | 7;
          }
          uint64_t v18 = v17 + 1;
          p_dst = (std::string *)operator new(v17 + 1);
          __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          __dst.__r_.__value_.__l.__size_ = v13;
LABEL_28:
          memmove(p_dst, v14, v13);
          p_dst->__r_.__value_.__s.__data_[v13] = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_23;
          }
          goto LABEL_29;
        }
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v12;
        p_dst = &__dst;
        if (v12) {
          goto LABEL_28;
        }
        __dst.__r_.__value_.__s.__data_[0] = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_23;
        }
LABEL_29:
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_23:
        std::string __p = __dst;
        break;
      case 0x23:
        uint64_t v85 = sub_2F3488(v35);
        int v86 = &v85[v8];
        uint64_t v87 = 0x2C700000000;
        if (sub_2F333C((uint64_t)&v85))
        {
          while (v87 != 5)
          {
            switch(HIDWORD(v87))
            {
              case 0:
                sub_2F3C98((uint64_t *)&v85, (uint64_t)v86);
                break;
              case 1:
                v85 += 8;
                if (v85 > v86)
                {
                  exception = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(&__dst, "Skipping over bytes exceeded message length.");
                  uint64_t v31 = (void *)sub_2F404((uint64_t)exception, (long long *)&__dst);
                }
                return;
              case 2:
                unsigned int v9 = sub_2F36C8(&v85, v86);
                sub_2F3DCC((unint64_t *)&v85, v9);
                break;
              case 5:
                v85 += 4;
                if (v85 > v86)
                {
                  uint64_t v28 = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(&__dst, "Skipping over bytes exceeded message length.");
                  BOOL v29 = (void *)sub_2F404((uint64_t)v28, (long long *)&__dst);
                }
                return;
              default:
                unint64_t v32 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(&__dst, "Unknown wire type.");
                long long v33 = (void *)sub_2F404((uint64_t)v32, (long long *)&__dst);
            }
            if (!sub_2F333C((uint64_t)&v85)) {
              goto LABEL_16;
            }
          }
          v74[0] = sub_2F3488(&v85);
          v74[1] = &v74[0][v19];
          uint64_t v75 = 0x2C700000000;
          if (sub_2F333C((uint64_t)v74))
          {
            while (v75 != 2)
            {
              sub_2F3548((uint64_t)v74);
              if (!sub_2F333C((uint64_t)v74)) {
                goto LABEL_33;
              }
            }
            int v69 = sub_2F3488(v74);
            uint64_t v70 = v20;
          }
          else
          {
LABEL_33:
            if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)&__dst);
              sub_188FC78(&__dst, (uint64_t)"ParsedVendorData does not contain Patch but IncidentMetaType is GEOMETRY_PATCH.", 79);
              std::stringbuf::str();
              sub_7246C((uint64_t *)&v72, 3u);
              if ((v73 & 0x80000000) == 0) {
                goto LABEL_37;
              }
              uint64_t v10 = (char *)v72;
LABEL_36:
              operator delete(v10);
LABEL_37:
              __dst.__r_.__value_.__r.__words[0] = v6;
              *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + *(void *)(v6 - 24)) = v7;
              if (SHIBYTE(v82) < 0) {
                operator delete(v80);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
          }
        }
        else
        {
LABEL_16:
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)&__dst);
            sub_188FC78(&__dst, (uint64_t)"Incident.debug does not contain ParsedVendorData but IncidentMetaType is GEOMETRY_PATCH.", 88);
            std::stringbuf::str();
            sub_7246C((uint64_t *)v74, 3u);
            if ((SHIBYTE(v75) & 0x80000000) == 0) {
              goto LABEL_37;
            }
            uint64_t v10 = v74[0];
            goto LABEL_36;
          }
        }
        break;
      default:
        sub_2F3548((uint64_t)v35);
        break;
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size) {
    BOOL v22 = v69 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (!v22)
  {
    sub_2F4680(&v69, &__p, (uint64_t *)&__dst);
    std::string::size_type v23 = __dst.__r_.__value_.__r.__words[0];
    *a3 = __dst.__r_.__value_.__r.__words[0];
    std::string::size_type v24 = __dst.__r_.__value_.__l.__size_;
    *(_OWORD *)(a3 + 1) = *(_OWORD *)&__dst.__r_.__value_.__r.__words[1];
    std::string::size_type v25 = v24;
    if (v23 != v24)
    {
      uint64_t v85 = 0;
      int v86 = 0;
      uint64_t v87 = 0;
      sub_3585E0((char *)v37, (uint64_t)&__dst);
      sub_302E30((long long *)&__dst, &v85);
      if (v83)
      {
        long long v84 = v83;
        operator delete(v83);
      }
      if (v81)
      {
        long long v82 = v81;
        operator delete(v81);
      }
      if (v78)
      {
        uint64_t v79 = v78;
        operator delete(v78);
      }
      if (__dst.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v77 = __dst.__r_.__value_.__r.__words[2];
        operator delete((void *)__dst.__r_.__value_.__r.__words[2]);
      }
      unint64_t v26 = 126 - 2 * __clz((v86 - v85) >> 3);
      if (v86 == v85) {
        uint64_t v27 = 0;
      }
      else {
        uint64_t v27 = v26;
      }
      sub_303770((uint64_t)v85, (int *)v86, (uint64_t)&__dst, v27, 1);
      sub_30361C((uint64_t)&v85);
      do
      {
        if ((char **)(v23 + 288) != &v85) {
          sub_2D8554((void *)(v23 + 288), v85, v86, (v86 - v85) >> 3);
        }
        v23 += 312;
      }
      while (v23 != v25);
      if (v85)
      {
        int v86 = v85;
        operator delete(v85);
      }
    }
  }
  sub_29D95C((uint64_t)v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_302B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_2FC97C(&STACK[0x230]);
  long long v74 = *(void **)(v72 - 136);
  if (v74)
  {
    *(void *)(v72 - 128) = v74;
    operator delete(v74);
  }
  sub_2F53CC(a9);
  sub_29D95C((uint64_t)&a14);
  if (a72 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_302E30(long long *a1, char **a2)
{
  sub_2FCB1C((uint64_t)&v11, a1);
  sub_2FCB1C((uint64_t)&v6, a1 + 4);
  uint64_t v4 = sub_3074D8(&v11, &v6, a2);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    uint64_t v8 = v7;
    operator delete(v7);
  }
  if (v14)
  {
    size_t v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    std::string::size_type v13 = v12;
    operator delete(v12);
  }
  return v4;
}

void sub_302ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

uint64_t sub_302EF0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (unsigned __int8 *)a1[1];
  unint64_t v4 = 126 - 2 * __clz((uint64_t)&v3[-v2] >> 3);
  if (v3 == (unsigned __int8 *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t result = sub_307BB4(v2, v3, (uint64_t)&v18, v5, 1);
  std::string::size_type v7 = (unsigned __int8 *)a1[1];
  if ((unsigned __int8 *)*a1 != v7)
  {
    uint64_t v8 = (unsigned __int8 *)(*a1 + 8);
    do
    {
      if (v8 == v7) {
        return result;
      }
      int v9 = *((_DWORD *)v8 + 1);
      int v10 = *v8;
      int v11 = *(v8 - 8);
      int v12 = *((_DWORD *)v8 - 1);
      v8 += 8;
    }
    while (v11 != v10 || v12 != v9);
    unint64_t v14 = v8 - 16;
    if (v8 == v7)
    {
      size_t v15 = v8 - 8;
      if (v8 - 8 == v7) {
        return result;
      }
      goto LABEL_22;
    }
    do
    {
      int v16 = *(void *)v8;
      if (v10 != v16 || *((_DWORD *)v14 + 1) != HIDWORD(*(void *)v8))
      {
        *((void *)v14 + 1) = *(void *)v8;
        v14 += 8;
      }
      v8 += 8;
      int v10 = v16;
    }
    while (v8 != v7);
    size_t v15 = v14 + 8;
    if (v14 + 8 != (unsigned __int8 *)a1[1]) {
LABEL_22:
    }
      a1[1] = (uint64_t)v15;
  }
  return result;
}

uint64_t sub_30301C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_303024(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  sub_301D58((void **)(a1 + 8), a2 + 8);
  unint64_t v4 = (void **)(a1 + 64);
  uint64_t v5 = *(void ***)(a1 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (v5)
  {
    long long v6 = *(void ***)(a1 + 72);
    std::string::size_type v7 = v5;
    if (v6 == v5)
    {
LABEL_11:
      *(void *)(a1 + 72) = v5;
      operator delete(v7);
      *unint64_t v4 = 0;
      *(void *)(a1 + 72) = 0;
      *(void *)(a1 + 80) = 0;
      goto LABEL_12;
    }
    while (1)
    {
      if (*((char *)v6 - 1) < 0)
      {
        operator delete(*(v6 - 3));
        if (*((char *)v6 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v6 - 6));
      }
      else if (*((char *)v6 - 25) < 0)
      {
        goto LABEL_9;
      }
      v6 -= 6;
      if (v6 == v5)
      {
        std::string::size_type v7 = *v4;
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  uint64_t v8 = (void **)(a1 + 88);
  int v9 = *(void **)(a1 + 88);
  if (v9)
  {
    int v10 = *(void **)(a1 + 96);
    int v11 = *(void **)(a1 + 88);
    if (v10 != v9)
    {
      do
        int v10 = sub_3034C4(v10 - 10);
      while (v10 != v9);
      int v11 = *v8;
    }
    *(void *)(a1 + 96) = v9;
    operator delete(v11);
    *uint64_t v8 = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  int v12 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*v12);
  }
  long long v13 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)int v12 = v13;
  *(unsigned char *)(a2 + 135) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  long long v14 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v14;
  return a1;
}

uint64_t sub_303198(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    uint64_t v2 = *(void **)(a1 + 88);
    if (!v2)
    {
LABEL_3:
      uint64_t v3 = *(void ***)(a1 + 64);
      if (!v3) {
        goto LABEL_20;
      }
LABEL_10:
      long long v6 = *(void ***)(a1 + 72);
      std::string::size_type v7 = v3;
      if (v6 == v3)
      {
LABEL_19:
        *(void *)(a1 + 72) = v3;
        operator delete(v7);
        goto LABEL_20;
      }
      while (1)
      {
        if (*((char *)v6 - 1) < 0)
        {
          operator delete(*(v6 - 3));
          if (*((char *)v6 - 25) < 0) {
LABEL_17:
          }
            operator delete(*(v6 - 6));
        }
        else if (*((char *)v6 - 25) < 0)
        {
          goto LABEL_17;
        }
        v6 -= 6;
        if (v6 == v3)
        {
          std::string::size_type v7 = *(void ***)(a1 + 64);
          goto LABEL_19;
        }
      }
    }
  }
  else
  {
    uint64_t v2 = *(void **)(a1 + 88);
    if (!v2) {
      goto LABEL_3;
    }
  }
  unint64_t v4 = *(void **)(a1 + 96);
  uint64_t v5 = v2;
  if (v4 != v2)
  {
    do
      unint64_t v4 = sub_3034C4(v4 - 10);
    while (v4 != v2);
    uint64_t v5 = *(void **)(a1 + 88);
  }
  *(void *)(a1 + 96) = v2;
  operator delete(v5);
  uint64_t v3 = *(void ***)(a1 + 64);
  if (v3) {
    goto LABEL_10;
  }
LABEL_20:
  sub_3033D0((void **)(a1 + 8));
  return a1;
}

uint64_t sub_30328C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 160) = v2;
    operator delete(v2);
  }
  sub_3033D0((void **)(a1 + 72));
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void **)(a1 + 48);
    if (v4 == v3)
    {
LABEL_13:
      *(void *)(a1 + 56) = v3;
      operator delete(v5);
      goto LABEL_14;
    }
    while (1)
    {
      if (*(char *)(v4 - 1) < 0)
      {
        operator delete(*(void **)(v4 - 24));
        if (*(char *)(v4 - 25) < 0) {
LABEL_11:
        }
          operator delete(*(void **)(v4 - 48));
      }
      else if (*(char *)(v4 - 25) < 0)
      {
        goto LABEL_11;
      }
      v4 -= 48;
      if (v4 == v3)
      {
        uint64_t v5 = *(void **)(a1 + 48);
        goto LABEL_13;
      }
    }
  }
LABEL_14:
  long long v6 = *(void **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 32) = v6;
    operator delete(v6);
  }
  std::string::size_type v7 = *(void ***)a1;
  if (*(void *)a1)
  {
    uint64_t v8 = *(void ***)(a1 + 8);
    int v9 = *(void ***)a1;
    if (v8 != v7)
    {
      int v10 = *(void ***)(a1 + 8);
      do
      {
        long long v13 = (char *)*(v10 - 3);
        v10 -= 3;
        int v12 = v13;
        if (v13)
        {
          long long v14 = (char *)*(v8 - 2);
          int v11 = v12;
          if (v14 != v12)
          {
            size_t v15 = (char *)*(v8 - 2);
            do
            {
              uint64_t v17 = (void *)*((void *)v15 - 3);
              v15 -= 24;
              int v16 = v17;
              if (v17)
              {
                *((void *)v14 - 2) = v16;
                operator delete(v16);
              }
              long long v14 = v15;
            }
            while (v15 != v12);
            int v11 = *v10;
          }
          *(v8 - 2) = v12;
          operator delete(v11);
        }
        uint64_t v8 = v10;
      }
      while (v10 != v7);
      int v9 = *(void ***)a1;
    }
    *(void *)(a1 + 8) = v7;
    operator delete(v9);
  }
  return a1;
}

void **sub_3033D0(void **a1)
{
  uint64_t v2 = (void **)a1[3];
  if (v2)
  {
    uint64_t v3 = (void **)a1[4];
    uint64_t v4 = a1[3];
    if (v3 == v2)
    {
LABEL_11:
      a1[4] = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        uint64_t v4 = a1[3];
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  uint64_t v5 = (void **)*a1;
  if (*a1)
  {
    long long v6 = (void **)a1[1];
    std::string::size_type v7 = *a1;
    if (v6 == v5)
    {
LABEL_22:
      a1[1] = v5;
      operator delete(v7);
      return a1;
    }
    while (1)
    {
      if (*((char *)v6 - 1) < 0)
      {
        operator delete(*(v6 - 3));
        if (*((char *)v6 - 25) < 0) {
LABEL_20:
        }
          operator delete(*(v6 - 6));
      }
      else if (*((char *)v6 - 25) < 0)
      {
        goto LABEL_20;
      }
      v6 -= 6;
      if (v6 == v5)
      {
        std::string::size_type v7 = *a1;
        goto LABEL_22;
      }
    }
  }
  return a1;
}

void *sub_3034C4(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2)
  {
    uint64_t v3 = a1[8];
    uint64_t v4 = (void *)a1[7];
    if (v3 == v2)
    {
LABEL_11:
      a1[8] = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 48;
      if (v3 == v2)
      {
        uint64_t v4 = (void *)a1[7];
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  uint64_t v5 = a1[4];
  if (!v5) {
    goto LABEL_23;
  }
  uint64_t v6 = a1[5];
  std::string::size_type v7 = (void *)a1[4];
  if (v6 != v5)
  {
    while (1)
    {
      if (*(char *)(v6 - 1) < 0)
      {
        operator delete(*(void **)(v6 - 24));
        if (*(char *)(v6 - 25) < 0) {
LABEL_20:
        }
          operator delete(*(void **)(v6 - 48));
      }
      else if (*(char *)(v6 - 25) < 0)
      {
        goto LABEL_20;
      }
      v6 -= 48;
      if (v6 == v5)
      {
        std::string::size_type v7 = (void *)a1[4];
        break;
      }
    }
  }
  a1[5] = v5;
  operator delete(v7);
LABEL_23:
  uint64_t v8 = a1[1];
  if (v8)
  {
    uint64_t v9 = a1[2];
    int v10 = (void *)a1[1];
    if (v9 == v8)
    {
LABEL_33:
      a1[2] = v8;
      operator delete(v10);
      return a1;
    }
    while (1)
    {
      if (*(char *)(v9 - 1) < 0)
      {
        operator delete(*(void **)(v9 - 24));
        if (*(char *)(v9 - 25) < 0) {
LABEL_31:
        }
          operator delete(*(void **)(v9 - 48));
      }
      else if (*(char *)(v9 - 25) < 0)
      {
        goto LABEL_31;
      }
      v9 -= 48;
      if (v9 == v8)
      {
        int v10 = (void *)a1[1];
        goto LABEL_33;
      }
    }
  }
  return a1;
}

uint64_t sub_30361C(uint64_t result)
{
  uint64_t v2 = *(_DWORD **)result;
  uint64_t v1 = *(_DWORD **)(result + 8);
  if (*(_DWORD **)result != v1 && *(void *)result + 8 != (void)v1)
  {
    uint64_t v4 = 0;
    LODWORD(v5) = *v2;
    while (1)
    {
      int v6 = v5;
      unint64_t v5 = *(void *)&v2[v4 + 2];
      if (v6 == v5 && LOWORD(v2[v4 + 1]) == WORD2(v5))
      {
        std::string::size_type v7 = &v2[v4];
        if ((HIWORD(v5) & 1) != (BYTE2(v2[v4 + 1]) == 0)) {
          break;
        }
      }
      v4 += 2;
      if (&v2[v4 + 2] == v1) {
        return result;
      }
    }
    if (v7 != v1)
    {
      uint64_t v8 = &v2[v4 + 4];
      if (v8 != v1)
      {
        do
        {
          if (__PAIR64__(*((unsigned __int16 *)v7 + 2), *v7) != __PAIR64__((unsigned __int16)WORD2(*(void *)v8), *(void *)v8)|| (HIWORD(*(void *)v8) & 1) == (*((unsigned char *)v7 + 6) == 0))
          {
            int v9 = *(_DWORD *)((char *)v8 + 3);
            v7[2] = *v8;
            v7 += 2;
            *(_DWORD *)((char *)v7 + 3) = v9;
          }
          v8 += 2;
        }
        while (v8 != v1);
        uint64_t v1 = *(_DWORD **)(result + 8);
      }
      if (v7 + 2 != v1) {
        *(void *)(result + 8) = v7 + 2;
      }
    }
  }
  return result;
}

uint64_t sub_303770(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  int v11 = (unsigned int *)v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = (uint64_t)v11;
    uint64_t v13 = (char *)a2 - (char *)v11;
    unint64_t v14 = v13 >> 3;
    if (!(!v6 & v5))
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v26 = *(a2 - 2);
          std::string::size_type v25 = a2 - 2;
          unint64_t v27 = *(void *)v10;
          if ((((unint64_t)v26 << 32) | ((unint64_t)*((unsigned __int16 *)v25 + 2) << 16) | (*((unsigned char *)v25 + 6) == 0)) < ((v27 >> 16) & 0xFFFF0000 | (v27 << 32) | ((v27 & 0xFF000000000000) == 0)))
          {
            int v28 = *v25;
            *(_DWORD *)(v10 + 3) = *(int *)((char *)v25 + 3);
            *(_DWORD *)uint64_t v10 = v28;
            *((unsigned char *)v25 + 6) = BYTE6(v27);
            *((_WORD *)v25 + 2) = WORD2(v27);
            *std::string::size_type v25 = v27;
          }
          break;
        case 3uLL:
          uint64_t result = sub_303D54((uint64_t *)v10, (unsigned int *)(v10 + 8), (unsigned int *)a2 - 2);
          break;
        case 4uLL:
          uint64_t result = sub_30450C(v10, (unsigned int *)(v10 + 8), (unsigned int *)(v10 + 16), (unsigned int *)a2 - 2);
          break;
        case 5uLL:
          uint64_t result = sub_304680(v10, (unsigned int *)(v10 + 8), (unsigned int *)(v10 + 16), (unsigned int *)(v10 + 24), (unsigned int *)a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 191) {
      break;
    }
    uint64_t v15 = v12;
    if (v12 == 1)
    {
      if ((int *)v10 != a2)
      {
        unint64_t v44 = (v14 - 2) >> 1;
        unint64_t v45 = v44 + 1;
        long long v46 = (unsigned int *)(v10 + 8 * v44);
        do
        {
          sub_304868(v10, a3, v13 >> 3, v46);
          v46 -= 2;
          --v45;
        }
        while (v45);
        unint64_t v47 = (unint64_t)v13 >> 3;
        do
        {
          uint64_t result = (uint64_t)sub_3049FC((unsigned int *)v10, (uint64_t)a2, a3, v47);
          a2 -= 2;
        }
        while (v47-- > 2);
      }
      return result;
    }
    unint64_t v16 = v14 >> 1;
    unint64_t v17 = v10 + 8 * (v14 >> 1);
    if ((unint64_t)v13 < 0x401)
    {
      sub_303D54((uint64_t *)v17, (unsigned int *)v10, (unsigned int *)a2 - 2);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_303D54((uint64_t *)v10, (unsigned int *)v17, (unsigned int *)a2 - 2);
      uint64_t v18 = 8 * v16;
      uint64_t v19 = (unsigned int *)(8 * v16 + v10 - 8);
      sub_303D54((uint64_t *)(v10 + 8), v19, (unsigned int *)a2 - 4);
      sub_303D54((uint64_t *)(v10 + 16), (unsigned int *)(v10 + 8 + v18), (unsigned int *)a2 - 6);
      sub_303D54((uint64_t *)v19, (unsigned int *)v17, (unsigned int *)(v10 + 8 + v18));
      uint64_t v20 = *(void *)v10;
      int v21 = *(_DWORD *)(v17 + 3);
      *(_DWORD *)uint64_t v10 = *(_DWORD *)v17;
      *(_DWORD *)(v10 + 3) = v21;
      *(_DWORD *)unint64_t v17 = v20;
      *(unsigned char *)(v17 + 6) = BYTE6(v20);
      *(_WORD *)(v17 + 4) = WORD2(v20);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((((unint64_t)*(unsigned int *)(v10 - 8) << 32) | ((unint64_t)*(unsigned __int16 *)(v10 - 4) << 16) | (*(unsigned char *)(v10 - 2) == 0)) >= ((*(void *)v10 >> 16) & 0xFFFF0000 | (*(void *)v10 << 32) | (unint64_t)((*(void *)v10 & 0xFF000000000000) == 0)))
    {
      uint64_t result = (uint64_t)sub_303F48((uint64_t *)v10, a2);
      int v11 = (unsigned int *)result;
      goto LABEL_18;
    }
LABEL_13:
    BOOL v22 = (unsigned int *)sub_3040D0((uint64_t *)v10, a2);
    if ((v23 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v24 = sub_30425C(v10, v22);
    int v11 = v22 + 2;
    uint64_t result = sub_30425C((uint64_t)(v22 + 2), (unsigned int *)a2);
    if (result)
    {
      a4 = -v15;
      a2 = (int *)v22;
      if (v24) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v15 + 1;
    if (!v24)
    {
LABEL_16:
      uint64_t result = sub_303770(v10, v22, a3, -v15, a5 & 1);
      int v11 = v22 + 2;
LABEL_18:
      a5 = 0;
      a4 = -v15;
      goto LABEL_3;
    }
  }
  BOOL v29 = (int *)(v10 + 8);
  BOOL v31 = (int *)v10 == a2 || v29 == a2;
  if (a5)
  {
    if (!v31)
    {
      uint64_t v32 = 0;
      long long v33 = (int *)v10;
      do
      {
        unint64_t v35 = *(void *)v33;
        uint64_t v36 = v33[2];
        uint64_t v37 = *((unsigned __int16 *)v33 + 6);
        int v38 = *((unsigned __int8 *)v33 + 14);
        long long v33 = v29;
        if (((v36 << 32) | (v37 << 16) | (unint64_t)(v38 == 0)) < ((v35 >> 16) & 0xFFFF0000 | (v35 << 32) | ((v35 & 0xFF000000000000) == 0)))
        {
          uint64_t v39 = *(void *)v29;
          uint64_t v40 = HIWORD(*(void *)v29);
          unint64_t v41 = (*(void *)v33 >> 16) & 0xFFFF0000 | (*(void *)v33 << 32) | (BYTE6(*(void *)v33) == 0);
          uint64_t v42 = v32;
          do
          {
            uint64_t v43 = v10 + v42;
            *(_DWORD *)(v43 + 8) = *(_DWORD *)(v10 + v42);
            *(_DWORD *)(v43 + 11) = *(_DWORD *)(v10 + v42 + 3);
            if (!v42)
            {
              uint64_t v34 = v10;
              goto LABEL_43;
            }
            v42 -= 8;
          }
          while (v41 < ((*(void *)(v43 - 8) >> 16) & 0xFFFF0000 | (*(void *)(v43 - 8) << 32) | (unint64_t)((*(void *)(v43 - 8) & 0xFF000000000000) == 0)));
          uint64_t v34 = v10 + v42 + 8;
LABEL_43:
          *(_DWORD *)uint64_t v34 = v39;
          *(_WORD *)(v34 + 4) = WORD2(v39);
          *(unsigned char *)(v34 + 6) = v40;
        }
        BOOL v29 = v33 + 2;
        v32 += 8;
      }
      while (v33 + 2 != a2);
    }
  }
  else if (!v31)
  {
    uint64_t v49 = (unsigned char *)(v10 + 14);
    do
    {
      unint64_t v50 = *(void *)v10;
      uint64_t v51 = *(unsigned int *)(v10 + 8);
      uint64_t v52 = *(unsigned __int16 *)(v10 + 12);
      int v53 = *(unsigned __int8 *)(v10 + 14);
      uint64_t v10 = (uint64_t)v29;
      if (((v51 << 32) | (v52 << 16) | (unint64_t)(v53 == 0)) < ((v50 >> 16) & 0xFFFF0000 | (v50 << 32) | ((v50 & 0xFF000000000000) == 0)))
      {
        uint64_t v54 = *(void *)v29;
        uint64_t v55 = HIWORD(*(void *)v10);
        unint64_t v56 = (*(void *)v10 >> 16) & 0xFFFF0000 | (*(void *)v10 << 32) | (BYTE6(*(void *)v10) == 0);
        long long v57 = v49;
        do
        {
          *(_DWORD *)(v57 - 6) = *(_DWORD *)(v57 - 14);
          *(_DWORD *)(v57 - 3) = *(_DWORD *)(v57 - 11);
          unint64_t v58 = *(void *)(v57 - 22);
          v57 -= 8;
        }
        while (v56 < ((v58 >> 16) & 0xFFFF0000 | (v58 << 32) | ((v58 & 0xFF000000000000) == 0)));
        *(_DWORD *)(v57 - 6) = v54;
        *((_WORD *)v57 - 1) = WORD2(v54);
        *long long v57 = v55;
      }
      BOOL v29 = (int *)(v10 + 8);
      v49 += 8;
    }
    while ((int *)(v10 + 8) != a2);
  }
  return result;
}

uint64_t sub_303D54(uint64_t *a1, unsigned int *a2, unsigned int *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *(void *)a2;
  unint64_t v5 = ((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0);
  unint64_t v6 = (v4 >> 16) & 0xFFFF0000 | (v4 << 32) | ((v4 & 0xFF000000000000) == 0);
  if ((((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) < ((v3 >> 16) & 0xFFFF0000 | (v3 << 32) | ((v3 & 0xFF000000000000) == 0)))
  {
    if (v5 < v6)
    {
      int v7 = *a3;
      *(_DWORD *)((char *)a1 + 3) = *(unsigned int *)((char *)a3 + 3);
      *(_DWORD *)a1 = v7;
      *((unsigned char *)a3 + 6) = BYTE6(v3);
      *((_WORD *)a3 + 2) = WORD2(v3);
      *a3 = v3;
      return 1;
    }
    int v12 = *a2;
    *(_DWORD *)((char *)a1 + 3) = *(unsigned int *)((char *)a2 + 3);
    *(_DWORD *)a1 = v12;
    *((unsigned char *)a2 + 6) = BYTE6(v3);
    *((_WORD *)a2 + 2) = WORD2(v3);
    *a2 = v3;
    unint64_t v13 = *(void *)a2;
    if ((((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < ((v13 >> 16) & 0xFFFF0000 | (v13 << 32) | ((v13 & 0xFF000000000000) == 0)))
    {
      unsigned int v14 = *a3;
      *(unsigned int *)((char *)a2 + 3) = *(unsigned int *)((char *)a3 + 3);
      *a2 = v14;
      *((unsigned char *)a3 + 6) = BYTE6(v13);
      *((_WORD *)a3 + 2) = WORD2(v13);
      *a3 = v13;
      return 2;
    }
    return 1;
  }
  if (v5 < v6)
  {
    unsigned int v9 = *a3;
    *(unsigned int *)((char *)a2 + 3) = *(unsigned int *)((char *)a3 + 3);
    *a2 = v9;
    *((unsigned char *)a3 + 6) = BYTE6(v4);
    *((_WORD *)a3 + 2) = WORD2(v4);
    *a3 = v4;
    unint64_t v10 = *a1;
    if ((((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) < ((v10 >> 16) & 0xFFFF0000 | (v10 << 32) | ((v10 & 0xFF000000000000) == 0)))
    {
      int v11 = *a2;
      *(_DWORD *)((char *)a1 + 3) = *(unsigned int *)((char *)a2 + 3);
      *(_DWORD *)a1 = v11;
      *((unsigned char *)a2 + 6) = BYTE6(v10);
      *((_WORD *)a2 + 2) = WORD2(v10);
      *a2 = v10;
      return 2;
    }
    return 1;
  }
  return 0;
}

uint64_t *sub_303F48(uint64_t *a1, int *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = HIWORD(*a1);
  unint64_t v4 = ((unint64_t)*a1 >> 16) & 0xFFFF0000 | (*a1 << 32) | (BYTE6(*a1) == 0);
  if (v4 >= ((*((void *)a2 - 1) >> 16) & 0xFFFF0000 | (*((void *)a2 - 1) << 32) | (unint64_t)((*((void *)a2 - 1) & 0xFF000000000000) == 0)))
  {
    int v7 = a1 + 1;
    do
    {
      unint64_t v5 = v7;
      if (v7 >= (uint64_t *)a2) {
        break;
      }
      ++v7;
    }
    while (v4 >= (((unint64_t)*v5 >> 16) & 0xFFFF0000 | (*v5 << 32) | ((*v5 & 0xFF000000000000) == 0)));
  }
  else
  {
    unint64_t v5 = a1;
    do
    {
      unint64_t v6 = v5[1];
      ++v5;
    }
    while (v4 >= ((v6 >> 16) & 0xFFFF0000 | (v6 << 32) | ((v6 & 0xFF000000000000) == 0)));
  }
  if (v5 < (uint64_t *)a2)
  {
    do
    {
      unint64_t v8 = *((void *)a2 - 1);
      a2 -= 2;
    }
    while (v4 < ((v8 >> 16) & 0xFFFF0000 | (v8 << 32) | ((v8 & 0xFF000000000000) == 0)));
  }
  if (v5 < (uint64_t *)a2)
  {
    unint64_t v9 = *v5;
    do
    {
      int v10 = *a2;
      *(_DWORD *)((char *)v5 + 3) = *(int *)((char *)a2 + 3);
      *(_DWORD *)unint64_t v5 = v10;
      *((unsigned char *)a2 + 6) = BYTE6(v9);
      *((_WORD *)a2 + 2) = WORD2(v9);
      *a2 = v9;
      do
      {
        unint64_t v11 = v5[1];
        ++v5;
        unint64_t v9 = v11;
      }
      while (v4 >= ((v11 >> 16) & 0xFFFF0000 | (v11 << 32) | ((v11 & 0xFF000000000000) == 0)));
      do
      {
        unint64_t v12 = *((void *)a2 - 1);
        a2 -= 2;
      }
      while (v4 < ((v12 >> 16) & 0xFFFF0000 | (v12 << 32) | ((v12 & 0xFF000000000000) == 0)));
    }
    while (v5 < (uint64_t *)a2);
  }
  if (v5 - 1 != a1)
  {
    int v13 = *((_DWORD *)v5 - 2);
    *(_DWORD *)((char *)a1 + 3) = *(_DWORD *)((char *)v5 - 5);
    *(_DWORD *)a1 = v13;
  }
  *((_DWORD *)v5 - 2) = v2;
  *((_WORD *)v5 - 2) = WORD2(v2);
  *((unsigned char *)v5 - 2) = v3;
  return v5;
}

uint64_t sub_3040D0(uint64_t *a1, int *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  unint64_t v4 = ((unint64_t)*a1 >> 16) & 0xFFFF0000 | (*a1 << 32) | ((*a1 & 0xFF000000000000) == 0);
  do
  {
    unint64_t v5 = ((unint64_t)LODWORD(a1[v2 + 1]) << 32) | ((unint64_t)WORD2(a1[v2 + 1]) << 16) | (BYTE6(a1[v2 + 1]) == 0);
    ++v2;
  }
  while (v5 < v4);
  unint64_t v6 = (unint64_t)&a1[v2];
  uint64_t v7 = (uint64_t)&a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= (unint64_t)a2) {
        break;
      }
      unsigned int v9 = *(a2 - 2);
      a2 -= 2;
    }
    while ((((unint64_t)v9 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) >= v4);
  }
  else
  {
    do
    {
      unsigned int v8 = *(a2 - 2);
      a2 -= 2;
    }
    while ((((unint64_t)v8 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) >= v4);
  }
  if (v6 < (unint64_t)a2)
  {
    int v10 = &a1[v2];
    unint64_t v11 = a2;
    do
    {
      uint64_t v12 = *v10;
      int v13 = *v11;
      *(_DWORD *)((char *)v10 + 3) = *(int *)((char *)v11 + 3);
      *(_DWORD *)int v10 = v13;
      int *v11 = v12;
      *((unsigned char *)v11 + 6) = BYTE6(v12);
      *((_WORD *)v11 + 2) = WORD2(v12);
      do
        unsigned int v14 = *((_DWORD *)v10++ + 2);
      while ((((unint64_t)v14 << 32) | ((unint64_t)*((unsigned __int16 *)v10 + 2) << 16) | (*((unsigned char *)v10 + 6) == 0)) < v4);
      do
      {
        unsigned int v15 = *(v11 - 2);
        v11 -= 2;
      }
      while ((((unint64_t)v15 << 32) | ((unint64_t)*((unsigned __int16 *)v11 + 2) << 16) | (*((unsigned char *)v11 + 6) == 0)) >= v4);
    }
    while (v10 < (uint64_t *)v11);
    uint64_t v7 = (uint64_t)(v10 - 1);
  }
  if ((uint64_t *)v7 != a1)
  {
    int v16 = *(_DWORD *)v7;
    *(_DWORD *)((char *)a1 + 3) = *(_DWORD *)(v7 + 3);
    *(_DWORD *)a1 = v16;
  }
  *(_DWORD *)uint64_t v7 = v3;
  *(unsigned char *)(v7 + 6) = BYTE6(v3);
  *(_WORD *)(v7 + 4) = WORD2(v3);
  return v7;
}

BOOL sub_30425C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v16 = a2 - 2;
      unint64_t v17 = *(void *)a1;
      if ((((unint64_t)*(a2 - 2) << 32) | ((unint64_t)*((unsigned __int16 *)a2 - 2) << 16) | (*((unsigned char *)a2 - 2) == 0)) < ((v17 >> 16) & 0xFFFF0000 | (v17 << 32) | ((v17 & 0xFF000000000000) == 0)))
      {
        unsigned int v18 = *v16;
        *(_DWORD *)(a1 + 3) = *(unsigned int *)((char *)a2 - 5);
        *(_DWORD *)a1 = v18;
        *((unsigned char *)a2 - 2) = BYTE6(v17);
        *((_WORD *)a2 - 2) = WORD2(v17);
        unsigned int *v16 = v17;
      }
      return result;
    case 3:
      sub_303D54((uint64_t *)a1, (unsigned int *)(a1 + 8), a2 - 2);
      return 1;
    case 4:
      sub_30450C(a1, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 16), a2 - 2);
      return 1;
    case 5:
      sub_304680(a1, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 24), a2 - 2);
      return 1;
    default:
      unint64_t v6 = (unsigned int *)(a1 + 16);
      sub_303D54((uint64_t *)a1, (unsigned int *)(a1 + 8), (unsigned int *)(a1 + 16));
      uint64_t v7 = (unsigned int *)(a1 + 24);
      if ((unsigned int *)(a1 + 24) == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    if ((((unint64_t)*v7 << 32) | ((unint64_t)*((unsigned __int16 *)v7 + 2) << 16) | (*((unsigned char *)v7 + 6) == 0)) < ((*(void *)v6 >> 16) & 0xFFFF0000 | (*(void *)v6 << 32) | (unint64_t)((*(void *)v6 & 0xFF000000000000) == 0)))
    {
      uint64_t v11 = *(void *)v7;
      uint64_t v12 = HIWORD(*(void *)v7);
      unint64_t v13 = (*(void *)v7 >> 16) & 0xFFFF0000 | (*(void *)v7 << 32) | (BYTE6(*(void *)v7) == 0);
      uint64_t v14 = v8;
      do
      {
        uint64_t v15 = a1 + v14;
        *(_DWORD *)(v15 + 24) = *(_DWORD *)(a1 + v14 + 16);
        *(_DWORD *)(v15 + 27) = *(_DWORD *)(a1 + v14 + 19);
        if (v14 == -16)
        {
          uint64_t v10 = a1;
          goto LABEL_6;
        }
        v14 -= 8;
      }
      while (v13 < ((*(void *)(v15 + 8) >> 16) & 0xFFFF0000 | (*(void *)(v15 + 8) << 32) | (unint64_t)((*(void *)(v15 + 8) & 0xFF000000000000) == 0)));
      uint64_t v10 = a1 + v14 + 24;
LABEL_6:
      *(_DWORD *)uint64_t v10 = v11;
      *(_WORD *)(v10 + 4) = WORD2(v11);
      *(unsigned char *)(v10 + 6) = v12;
      if (++v9 == 8) {
        return v7 + 2 == a2;
      }
    }
    unint64_t v6 = v7;
    v8 += 8;
    v7 += 2;
    if (v7 == a2) {
      return 1;
    }
  }
}

uint64_t sub_30450C(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result = sub_303D54((uint64_t *)a1, a2, a3);
  unint64_t v9 = *(void *)a3;
  if ((((unint64_t)*a4 << 32) | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 16) | (*((unsigned char *)a4 + 6) == 0)) < ((v9 >> 16) & 0xFFFF0000 | (v9 << 32) | ((v9 & 0xFF000000000000) == 0)))
  {
    unsigned int v10 = *a4;
    *(unsigned int *)((char *)a3 + 3) = *(unsigned int *)((char *)a4 + 3);
    *a3 = v10;
    *((unsigned char *)a4 + 6) = BYTE6(v9);
    *((_WORD *)a4 + 2) = WORD2(v9);
    *a4 = v9;
    unint64_t v11 = *(void *)a2;
    if ((((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < ((v11 >> 16) & 0xFFFF0000 | (v11 << 32) | ((v11 & 0xFF000000000000) == 0)))
    {
      unsigned int v12 = *a3;
      *(unsigned int *)((char *)a2 + 3) = *(unsigned int *)((char *)a3 + 3);
      *a2 = v12;
      *((unsigned char *)a3 + 6) = BYTE6(v11);
      *((_WORD *)a3 + 2) = WORD2(v11);
      *a3 = v11;
      unint64_t v13 = *(void *)a1;
      if ((((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) < ((v13 >> 16) & 0xFFFF0000 | (v13 << 32) | ((v13 & 0xFF000000000000) == 0)))
      {
        unsigned int v14 = *a2;
        *(_DWORD *)(a1 + 3) = *(unsigned int *)((char *)a2 + 3);
        *(_DWORD *)a1 = v14;
        *((unsigned char *)a2 + 6) = BYTE6(v13);
        *((_WORD *)a2 + 2) = WORD2(v13);
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_304680(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result = sub_30450C(a1, a2, a3, a4);
  unint64_t v11 = *(void *)a4;
  if ((((unint64_t)*a5 << 32) | ((unint64_t)*((unsigned __int16 *)a5 + 2) << 16) | (*((unsigned char *)a5 + 6) == 0)) < ((v11 >> 16) & 0xFFFF0000 | (v11 << 32) | ((v11 & 0xFF000000000000) == 0)))
  {
    unsigned int v12 = *a5;
    *(unsigned int *)((char *)a4 + 3) = *(unsigned int *)((char *)a5 + 3);
    *a4 = v12;
    *((unsigned char *)a5 + 6) = BYTE6(v11);
    *((_WORD *)a5 + 2) = WORD2(v11);
    *a5 = v11;
    unint64_t v13 = *(void *)a3;
    if ((((unint64_t)*a4 << 32) | ((unint64_t)*((unsigned __int16 *)a4 + 2) << 16) | (*((unsigned char *)a4 + 6) == 0)) < ((v13 >> 16) & 0xFFFF0000 | (v13 << 32) | ((v13 & 0xFF000000000000) == 0)))
    {
      unsigned int v14 = *a4;
      *(unsigned int *)((char *)a3 + 3) = *(unsigned int *)((char *)a4 + 3);
      *a3 = v14;
      *((unsigned char *)a4 + 6) = BYTE6(v13);
      *((_WORD *)a4 + 2) = WORD2(v13);
      *a4 = v13;
      unint64_t v15 = *(void *)a2;
      if ((((unint64_t)*a3 << 32) | ((unint64_t)*((unsigned __int16 *)a3 + 2) << 16) | (*((unsigned char *)a3 + 6) == 0)) < ((v15 >> 16) & 0xFFFF0000 | (v15 << 32) | ((v15 & 0xFF000000000000) == 0)))
      {
        unsigned int v16 = *a3;
        *(unsigned int *)((char *)a2 + 3) = *(unsigned int *)((char *)a3 + 3);
        *a2 = v16;
        *((unsigned char *)a3 + 6) = BYTE6(v15);
        *((_WORD *)a3 + 2) = WORD2(v15);
        *a3 = v15;
        unint64_t v17 = *(void *)a1;
        if ((((unint64_t)*a2 << 32) | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 16) | (*((unsigned char *)a2 + 6) == 0)) < ((v17 >> 16) & 0xFFFF0000 | (v17 << 32) | ((v17 & 0xFF000000000000) == 0)))
        {
          unsigned int v18 = *a2;
          *(_DWORD *)(a1 + 3) = *(unsigned int *)((char *)a2 + 3);
          *(_DWORD *)a1 = v18;
          *((unsigned char *)a2 + 6) = BYTE6(v17);
          *((_WORD *)a2 + 2) = WORD2(v17);
          *a2 = v17;
        }
      }
    }
  }
  return result;
}

uint64_t sub_304868(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (unsigned int *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3
        && (((unint64_t)*v8 << 32) | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 16) | (*((unsigned char *)v8 + 6) == 0)) < ((*((void *)v8 + 1) >> 16) & 0xFFFF0000 | (*((void *)v8 + 1) << 32) | (unint64_t)((*((void *)v8 + 1) & 0xFF000000000000) == 0)))
      {
        v8 += 2;
        uint64_t v7 = v9;
      }
      unint64_t v10 = *(void *)a4;
      unint64_t v11 = (v10 >> 16) & 0xFFFF0000 | (v10 << 32) | ((v10 & 0xFF000000000000) == 0);
      if ((((unint64_t)*v8 << 32) | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 16) | (*((unsigned char *)v8 + 6) == 0)) >= v11)
      {
        do
        {
          unsigned int v12 = a4;
          a4 = v8;
          int v13 = *v8;
          *(_DWORD *)((char *)v12 + 3) = *(unsigned int *)((char *)a4 + 3);
          _DWORD *v12 = v13;
          if (v5 < v7) {
            break;
          }
          uint64_t v14 = (2 * v7) | 1;
          uint64_t v8 = (unsigned int *)(result + 8 * v14);
          uint64_t v15 = 2 * v7 + 2;
          if (v15 < a3
            && (((unint64_t)*v8 << 32) | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 16) | (*((unsigned char *)v8 + 6) == 0)) < ((*((void *)v8 + 1) >> 16) & 0xFFFF0000 | (*((void *)v8 + 1) << 32) | (unint64_t)((*((void *)v8 + 1) & 0xFF000000000000) == 0)))
          {
            v8 += 2;
            uint64_t v14 = v15;
          }
          uint64_t v7 = v14;
        }
        while ((((unint64_t)*v8 << 32) | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 16) | (*((unsigned char *)v8 + 6) == 0)) >= v11);
        *a4 = v10;
        *((unsigned char *)a4 + 6) = BYTE6(v10);
        *((_WORD *)a4 + 2) = WORD2(v10);
      }
    }
  }
  return result;
}

unsigned int *sub_3049FC(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    unint64_t v5 = *(void *)result;
    uint64_t v6 = result;
    do
    {
      uint64_t v8 = &v6[2 * v4 + 2];
      uint64_t v9 = (2 * v4) | 1;
      uint64_t v10 = 2 * v4 + 2;
      if (v10 < a4
        && (((unint64_t)*v8 << 32) | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 16) | (*((unsigned char *)v8 + 6) == 0)) < ((*((void *)v8 + 1) >> 16) & 0xFFFF0000 | (*((void *)v8 + 1) << 32) | (unint64_t)((*((void *)v8 + 1) & 0xFF000000000000) == 0)))
      {
        v8 += 2;
        uint64_t v9 = v10;
      }
      unsigned int v7 = *v8;
      *(unsigned int *)((char *)v6 + 3) = *(unsigned int *)((char *)v8 + 3);
      unsigned int *v6 = v7;
      uint64_t v6 = v8;
      uint64_t v4 = v9;
    }
    while (v9 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    unint64_t v11 = (unsigned int *)(a2 - 8);
    if (v8 == (unsigned int *)(a2 - 8)) {
      goto LABEL_13;
    }
    unsigned int v12 = *v11;
    *(unsigned int *)((char *)v8 + 3) = *(_DWORD *)(a2 - 5);
    *uint64_t v8 = v12;
    *(unsigned char *)(a2 - 2) = BYTE6(v5);
    *(_WORD *)(a2 - 4) = WORD2(v5);
    unsigned int *v11 = v5;
    uint64_t v13 = (char *)v8 - (char *)result + 8;
    if (v13 >= 9)
    {
      unint64_t v14 = (((unint64_t)v13 >> 3) - 2) >> 1;
      uint64_t v15 = &result[2 * v14];
      unint64_t v5 = *(void *)v8;
      unint64_t v16 = (v5 >> 16) & 0xFFFF0000 | (v5 << 32) | ((v5 & 0xFF000000000000) == 0);
      if ((((unint64_t)*v15 << 32) | ((unint64_t)*((unsigned __int16 *)v15 + 2) << 16) | (*((unsigned char *)v15 + 6) == 0)) < v16)
      {
        do
        {
          unint64_t v17 = v8;
          uint64_t v8 = v15;
          unsigned int v18 = *v15;
          *(unsigned int *)((char *)v17 + 3) = *(unsigned int *)((char *)v8 + 3);
          unsigned int *v17 = v18;
          if (!v14) {
            break;
          }
          unint64_t v14 = (v14 - 1) >> 1;
          uint64_t v15 = &result[2 * v14];
        }
        while ((((unint64_t)*v15 << 32) | ((unint64_t)*((unsigned __int16 *)v15 + 2) << 16) | (*((unsigned char *)v15 + 6) == 0)) < v16);
LABEL_13:
        *uint64_t v8 = v5;
        *((unsigned char *)v8 + 6) = BYTE6(v5);
        *((_WORD *)v8 + 2) = WORD2(v5);
      }
    }
  }
  return result;
}

uint64_t sub_304BA4(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = result;
LABEL_2:
  uint64_t v10 = a2 - 184;
  uint64_t v11 = v9;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v9 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - v11;
    unint64_t v15 = 0xD37A6F4DE9BD37A7 * (v14 >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = sub_3588F4(v10, v9);
          if (result)
          {
            long long v33 = *(_OWORD *)v9;
            uint64_t v34 = *(void *)(v9 + 16);
            *(void *)(v9 + 8) = 0;
            *(void *)(v9 + 16) = 0;
            *(void *)uint64_t v9 = 0;
            long long v35 = *(_OWORD *)(v9 + 24);
            uint64_t v36 = *(void *)(v9 + 40);
            *(void *)(v9 + 32) = 0;
            *(void *)(v9 + 40) = 0;
            *(void *)(v9 + 24) = 0;
            long long v37 = *(_OWORD *)(v9 + 48);
            uint64_t v38 = *(void *)(v9 + 64);
            *(void *)(v9 + 48) = 0;
            *(void *)(v9 + 56) = 0;
            *(void *)(v9 + 64) = 0;
            long long v39 = *(_OWORD *)(v9 + 72);
            uint64_t v40 = *(void *)(v9 + 88);
            *(void *)(v9 + 72) = 0;
            *(void *)(v9 + 80) = 0;
            *(void *)(v9 + 88) = 0;
            long long v41 = *(_OWORD *)(v9 + 96);
            uint64_t v42 = *(void *)(v9 + 112);
            *(void *)(v9 + 96) = 0;
            *(void *)(v9 + 104) = 0;
            *(void *)(v9 + 112) = 0;
            long long v26 = *(_OWORD *)(v9 + 120);
            long long v44 = *(_OWORD *)(v9 + 136);
            long long v43 = v26;
            long long v45 = *(_OWORD *)(v9 + 152);
            uint64_t v46 = *(void *)(v9 + 168);
            *(void *)(v9 + 152) = 0;
            *(void *)(v9 + 160) = 0;
            *(void *)(v9 + 168) = 0;
            char v47 = *(unsigned char *)(v9 + 176);
            sub_3061BC(v9, v10);
            sub_3061BC(v10, (uint64_t)&v33);
            uint64_t result = sub_30328C((uint64_t)&v33);
          }
          break;
        case 3uLL:
          uint64_t result = sub_3053A8(v9, v9 + 184, v10);
          break;
        case 4uLL:
          uint64_t result = sub_3063B8(v9, v9 + 184, v9 + 368, v10);
          break;
        case 5uLL:
          uint64_t result = sub_306678(v9, v9 + 184, v9 + 368, v9 + 552, v10);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 4415)
    {
      if (a5) {
        return sub_3050B8(v9, a2);
      }
      else {
        return sub_305248(v9, a2);
      }
    }
    if (v12 == 1) {
      break;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = v9 + 184 * (v15 >> 1);
    if ((unint64_t)v14 < 0x5C01)
    {
      sub_3053A8(v17, v9, v10);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_3053A8(v9, v17, v10);
      uint64_t v18 = v10;
      uint64_t v19 = 184 * v16;
      uint64_t v20 = 184 * v16 + v9 - 184;
      sub_3053A8(v9 + 184, v20, a2 - 368);
      uint64_t v21 = v9 + 184 + v19;
      uint64_t v10 = v18;
      sub_3053A8(v9 + 368, v21, a2 - 552);
      sub_3053A8(v20, v17, v21);
      long long v33 = *(_OWORD *)v9;
      uint64_t v34 = *(void *)(v9 + 16);
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      long long v35 = *(_OWORD *)(v9 + 24);
      uint64_t v36 = *(void *)(v9 + 40);
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 32) = 0;
      *(void *)(v9 + 40) = 0;
      long long v37 = *(_OWORD *)(v9 + 48);
      uint64_t v38 = *(void *)(v9 + 64);
      *(void *)(v9 + 48) = 0;
      *(void *)(v9 + 56) = 0;
      *(void *)(v9 + 64) = 0;
      long long v39 = *(_OWORD *)(v9 + 72);
      uint64_t v40 = *(void *)(v9 + 88);
      *(void *)(v9 + 72) = 0;
      *(void *)(v9 + 80) = 0;
      *(void *)(v9 + 88) = 0;
      long long v41 = *(_OWORD *)(v9 + 96);
      uint64_t v42 = *(void *)(v9 + 112);
      *(void *)(v9 + 96) = 0;
      *(void *)(v9 + 104) = 0;
      *(void *)(v9 + 112) = 0;
      long long v22 = *(_OWORD *)(v9 + 136);
      long long v43 = *(_OWORD *)(v9 + 120);
      long long v44 = v22;
      long long v45 = *(_OWORD *)(v9 + 152);
      uint64_t v46 = *(void *)(v9 + 168);
      *(void *)(v9 + 152) = 0;
      *(void *)(v9 + 160) = 0;
      *(void *)(v9 + 168) = 0;
      char v47 = *(unsigned char *)(v9 + 176);
      sub_3061BC(v9, v17);
      sub_3061BC(v17, (uint64_t)&v33);
      sub_30328C((uint64_t)&v33);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (!sub_3588F4(v9 - 184, v9))
    {
      uint64_t result = sub_30583C(v9, a2);
      uint64_t v11 = result;
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v23 = sub_305B40(v9, a2);
    if ((v24 & 1) == 0) {
      goto LABEL_16;
    }
    char v25 = sub_305E48(v9, v23);
    uint64_t v11 = v23 + 184;
    uint64_t result = sub_305E48(v23 + 184, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v23;
      if (v25) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if ((v25 & 1) == 0)
    {
LABEL_16:
      uint64_t result = sub_304BA4(v9, v23, a3, -v13, a5 & 1);
      uint64_t v11 = v23 + 184;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (v9 != a2)
  {
    unint64_t v27 = (v15 - 2) >> 1;
    unint64_t v28 = v27 + 1;
    uint64_t v29 = v9 + 184 * v27;
    do
    {
      sub_306A14(v9, a3, 0xD37A6F4DE9BD37A7 * (v14 >> 3), v29);
      v29 -= 184;
      --v28;
    }
    while (v28);
    unint64_t v30 = v14 / 0xB8uLL;
    do
    {
      uint64_t result = sub_306C1C(v9, a2, a3, v30);
      a2 -= 184;
    }
    while (v30-- > 2);
  }
  return result;
}

uint64_t sub_3050B8(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 184;
    if (result + 184 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = result;
      do
      {
        uint64_t v8 = v4;
        uint64_t result = sub_3588F4(v4, v6);
        if (result)
        {
          long long v12 = *(_OWORD *)v8;
          uint64_t v13 = *(void *)(v6 + 200);
          *(void *)(v8 + 8) = 0;
          *(void *)(v8 + 16) = 0;
          *(void *)uint64_t v8 = 0;
          long long v14 = *(_OWORD *)(v6 + 208);
          uint64_t v15 = *(void *)(v6 + 224);
          *(void *)(v6 + 208) = 0;
          *(void *)(v6 + 216) = 0;
          long long v16 = *(_OWORD *)(v6 + 232);
          uint64_t v17 = *(void *)(v6 + 248);
          *(void *)(v6 + 224) = 0;
          *(void *)(v6 + 232) = 0;
          *(void *)(v6 + 240) = 0;
          *(void *)(v6 + 248) = 0;
          long long v18 = *(_OWORD *)(v6 + 256);
          uint64_t v19 = *(void *)(v6 + 272);
          *(void *)(v6 + 256) = 0;
          *(void *)(v6 + 264) = 0;
          long long v20 = *(_OWORD *)(v6 + 280);
          uint64_t v21 = *(void *)(v6 + 296);
          *(void *)(v6 + 272) = 0;
          *(void *)(v6 + 280) = 0;
          *(void *)(v6 + 288) = 0;
          *(void *)(v6 + 296) = 0;
          long long v9 = *(_OWORD *)(v6 + 320);
          long long v22 = *(_OWORD *)(v6 + 304);
          long long v23 = v9;
          long long v24 = *(_OWORD *)(v6 + 336);
          uint64_t v25 = *(void *)(v6 + 352);
          *(void *)(v6 + 336) = 0;
          *(void *)(v6 + 344) = 0;
          *(void *)(v6 + 352) = 0;
          uint64_t v10 = v5;
          char v26 = *(unsigned char *)(v6 + 360);
          do
          {
            sub_3061BC(v3 + v10 + 184, v3 + v10);
            if (!v10)
            {
              uint64_t v7 = v3;
              goto LABEL_5;
            }
            BOOL v11 = sub_3588F4((uint64_t)&v12, v3 + v10 - 184);
            v10 -= 184;
          }
          while (v11);
          uint64_t v7 = v3 + v10 + 184;
LABEL_5:
          sub_3061BC(v7, (uint64_t)&v12);
          uint64_t result = sub_30328C((uint64_t)&v12);
        }
        uint64_t v4 = v8 + 184;
        v5 += 184;
        uint64_t v6 = v8;
      }
      while (v8 + 184 != a2);
    }
  }
  return result;
}

void sub_305234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_305248(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result + 184;
    if (result + 184 != a2)
    {
      do
      {
        uint64_t v5 = v4;
        uint64_t result = sub_3588F4(v4, v3);
        if (result)
        {
          long long v7 = *(_OWORD *)v5;
          uint64_t v8 = *(void *)(v3 + 200);
          *(void *)(v5 + 8) = 0;
          *(void *)(v5 + 16) = 0;
          *(void *)uint64_t v5 = 0;
          long long v9 = *(_OWORD *)(v3 + 208);
          uint64_t v10 = *(void *)(v3 + 224);
          *(void *)(v3 + 208) = 0;
          *(void *)(v3 + 216) = 0;
          long long v11 = *(_OWORD *)(v3 + 232);
          uint64_t v12 = *(void *)(v3 + 248);
          *(void *)(v3 + 224) = 0;
          *(void *)(v3 + 232) = 0;
          *(void *)(v3 + 240) = 0;
          *(void *)(v3 + 248) = 0;
          long long v13 = *(_OWORD *)(v3 + 256);
          uint64_t v14 = *(void *)(v3 + 272);
          *(void *)(v3 + 256) = 0;
          *(void *)(v3 + 264) = 0;
          long long v15 = *(_OWORD *)(v3 + 280);
          uint64_t v16 = *(void *)(v3 + 296);
          *(void *)(v3 + 272) = 0;
          *(void *)(v3 + 280) = 0;
          *(void *)(v3 + 288) = 0;
          *(void *)(v3 + 296) = 0;
          long long v6 = *(_OWORD *)(v3 + 320);
          long long v17 = *(_OWORD *)(v3 + 304);
          long long v18 = v6;
          long long v19 = *(_OWORD *)(v3 + 336);
          uint64_t v20 = *(void *)(v3 + 352);
          *(void *)(v3 + 336) = 0;
          *(void *)(v3 + 344) = 0;
          *(void *)(v3 + 352) = 0;
          char v21 = *(unsigned char *)(v3 + 360);
          do
          {
            sub_3061BC(v3 + 184, v3);
            v3 -= 184;
          }
          while (sub_3588F4((uint64_t)&v7, v3));
          sub_3061BC(v3 + 184, (uint64_t)&v7);
          uint64_t result = sub_30328C((uint64_t)&v7);
        }
        uint64_t v4 = v5 + 184;
        uint64_t v3 = v5;
      }
      while (v5 + 184 != a2);
    }
  }
  return result;
}

void sub_305394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3053A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = sub_3588F4(a2, a1);
  uint64_t result = sub_3588F4(a3, a2);
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 24);
    long long v9 = (void *)(a1 + 48);
    if (result)
    {
      long long v16 = *(_OWORD *)a1;
      uint64_t v17 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      long long v18 = *(_OWORD *)(a1 + 24);
      uint64_t v19 = *(void *)(a1 + 40);
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      *uint64_t v8 = 0;
      long long v20 = *(_OWORD *)(a1 + 48);
      uint64_t v21 = *(void *)(a1 + 64);
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
      *long long v9 = 0;
      long long v22 = *(_OWORD *)(a1 + 72);
      uint64_t v23 = *(void *)(a1 + 88);
      *(void *)(a1 + 72) = 0;
      *(void *)(a1 + 80) = 0;
      long long v24 = *(_OWORD *)(a1 + 96);
      uint64_t v25 = *(void *)(a1 + 112);
      *(void *)(a1 + 88) = 0;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
      long long v10 = *(_OWORD *)(a1 + 120);
      long long v27 = *(_OWORD *)(a1 + 136);
      long long v26 = v10;
      long long v28 = *(_OWORD *)(a1 + 152);
      uint64_t v29 = *(void *)(a1 + 168);
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 160) = 0;
      *(void *)(a1 + 168) = 0;
      char v30 = *(unsigned char *)(a1 + 176);
      sub_3061BC(a1, a3);
      sub_3061BC(a3, (uint64_t)&v16);
      sub_30328C((uint64_t)&v16);
      return 1;
    }
    long long v16 = *(_OWORD *)a1;
    uint64_t v17 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    long long v18 = *(_OWORD *)(a1 + 24);
    uint64_t v19 = *(void *)(a1 + 40);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *uint64_t v8 = 0;
    long long v20 = *(_OWORD *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 64);
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *long long v9 = 0;
    long long v22 = *(_OWORD *)(a1 + 72);
    uint64_t v23 = *(void *)(a1 + 88);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    long long v24 = *(_OWORD *)(a1 + 96);
    uint64_t v25 = *(void *)(a1 + 112);
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    long long v14 = *(_OWORD *)(a1 + 120);
    long long v27 = *(_OWORD *)(a1 + 136);
    long long v26 = v14;
    long long v28 = *(_OWORD *)(a1 + 152);
    uint64_t v29 = *(void *)(a1 + 168);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
    char v30 = *(unsigned char *)(a1 + 176);
    sub_3061BC(a1, a2);
    sub_3061BC(a2, (uint64_t)&v16);
    sub_30328C((uint64_t)&v16);
    if (sub_3588F4(a3, a2))
    {
      long long v16 = *(_OWORD *)a2;
      uint64_t v17 = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      long long v18 = *(_OWORD *)(a2 + 24);
      uint64_t v19 = *(void *)(a2 + 40);
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      long long v20 = *(_OWORD *)(a2 + 48);
      uint64_t v21 = *(void *)(a2 + 64);
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      long long v22 = *(_OWORD *)(a2 + 72);
      uint64_t v23 = *(void *)(a2 + 88);
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      long long v24 = *(_OWORD *)(a2 + 96);
      uint64_t v25 = *(void *)(a2 + 112);
      *(void *)(a2 + 96) = 0;
      *(void *)(a2 + 104) = 0;
      *(void *)(a2 + 112) = 0;
      long long v15 = *(_OWORD *)(a2 + 120);
      long long v27 = *(_OWORD *)(a2 + 136);
      long long v26 = v15;
      long long v28 = *(_OWORD *)(a2 + 152);
      uint64_t v29 = *(void *)(a2 + 168);
      *(void *)(a2 + 152) = 0;
      *(void *)(a2 + 160) = 0;
      *(void *)(a2 + 168) = 0;
      char v30 = *(unsigned char *)(a2 + 176);
      sub_3061BC(a2, a3);
      uint64_t v13 = a3;
      goto LABEL_10;
    }
    return 1;
  }
  if (result)
  {
    long long v16 = *(_OWORD *)a2;
    uint64_t v17 = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    long long v18 = *(_OWORD *)(a2 + 24);
    uint64_t v19 = *(void *)(a2 + 40);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    long long v20 = *(_OWORD *)(a2 + 48);
    uint64_t v21 = *(void *)(a2 + 64);
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    long long v22 = *(_OWORD *)(a2 + 72);
    uint64_t v23 = *(void *)(a2 + 88);
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    long long v24 = *(_OWORD *)(a2 + 96);
    uint64_t v25 = *(void *)(a2 + 112);
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 112) = 0;
    long long v11 = *(_OWORD *)(a2 + 120);
    long long v27 = *(_OWORD *)(a2 + 136);
    long long v26 = v11;
    long long v28 = *(_OWORD *)(a2 + 152);
    uint64_t v29 = *(void *)(a2 + 168);
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 160) = 0;
    *(void *)(a2 + 168) = 0;
    char v30 = *(unsigned char *)(a2 + 176);
    sub_3061BC(a2, a3);
    sub_3061BC(a3, (uint64_t)&v16);
    sub_30328C((uint64_t)&v16);
    if (sub_3588F4(a2, a1))
    {
      long long v16 = *(_OWORD *)a1;
      uint64_t v17 = *(void *)(a1 + 16);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      long long v18 = *(_OWORD *)(a1 + 24);
      uint64_t v19 = *(void *)(a1 + 40);
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = 0;
      long long v20 = *(_OWORD *)(a1 + 48);
      uint64_t v21 = *(void *)(a1 + 64);
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      long long v22 = *(_OWORD *)(a1 + 72);
      uint64_t v23 = *(void *)(a1 + 88);
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      long long v24 = *(_OWORD *)(a1 + 96);
      uint64_t v25 = *(void *)(a1 + 112);
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
      long long v12 = *(_OWORD *)(a1 + 120);
      long long v27 = *(_OWORD *)(a1 + 136);
      long long v26 = v12;
      long long v28 = *(_OWORD *)(a1 + 152);
      uint64_t v29 = *(void *)(a1 + 168);
      *(void *)(a1 + 152) = 0;
      *(void *)(a1 + 160) = 0;
      *(void *)(a1 + 168) = 0;
      char v30 = *(unsigned char *)(a1 + 176);
      sub_3061BC(a1, a2);
      uint64_t v13 = a2;
LABEL_10:
      sub_3061BC(v13, (uint64_t)&v16);
      sub_30328C((uint64_t)&v16);
      return 2;
    }
    return 1;
  }
  return result;
}

unint64_t sub_30583C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  long long v10 = *(_OWORD *)a1;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  long long v12 = *(_OWORD *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 40);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  long long v14 = *(_OWORD *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 64);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  long long v16 = *(_OWORD *)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 88);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  long long v18 = *(_OWORD *)(a1 + 96);
  uint64_t v19 = *(void *)(a1 + 112);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  long long v4 = *(_OWORD *)(a1 + 120);
  long long v21 = *(_OWORD *)(a1 + 136);
  long long v20 = v4;
  long long v22 = *(_OWORD *)(a1 + 152);
  uint64_t v23 = *(void *)(a1 + 168);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  char v24 = *(unsigned char *)(a1 + 176);
  *(void *)(a1 + 168) = 0;
  if (sub_3588F4((uint64_t)&v10, a2 - 184))
  {
    unint64_t v5 = a1;
    do
      v5 += 184;
    while (!sub_3588F4((uint64_t)&v10, v5));
  }
  else
  {
    unint64_t v6 = a1 + 184;
    do
    {
      unint64_t v5 = v6;
      if (v6 >= v2) {
        break;
      }
      BOOL v7 = sub_3588F4((uint64_t)&v10, v6);
      unint64_t v6 = v5 + 184;
    }
    while (!v7);
  }
  if (v5 < v2)
  {
    do
      v2 -= 184;
    while (sub_3588F4((uint64_t)&v10, v2));
  }
  while (v5 < v2)
  {
    long long v25 = *(_OWORD *)v5;
    uint64_t v26 = *(void *)(v5 + 16);
    *(void *)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    long long v27 = *(_OWORD *)(v5 + 24);
    uint64_t v28 = *(void *)(v5 + 40);
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = 0;
    long long v29 = *(_OWORD *)(v5 + 48);
    uint64_t v30 = *(void *)(v5 + 64);
    *(void *)(v5 + 48) = 0;
    *(void *)(v5 + 56) = 0;
    *(void *)(v5 + 64) = 0;
    long long v31 = *(_OWORD *)(v5 + 72);
    uint64_t v32 = *(void *)(v5 + 88);
    *(void *)(v5 + 72) = 0;
    *(void *)(v5 + 80) = 0;
    *(void *)(v5 + 88) = 0;
    long long v33 = *(_OWORD *)(v5 + 96);
    uint64_t v34 = *(void *)(v5 + 112);
    *(void *)(v5 + 96) = 0;
    *(void *)(v5 + 104) = 0;
    *(void *)(v5 + 112) = 0;
    long long v8 = *(_OWORD *)(v5 + 136);
    long long v35 = *(_OWORD *)(v5 + 120);
    long long v36 = v8;
    long long v37 = *(_OWORD *)(v5 + 152);
    uint64_t v38 = *(void *)(v5 + 168);
    *(void *)(v5 + 152) = 0;
    *(void *)(v5 + 160) = 0;
    *(void *)(v5 + 168) = 0;
    char v39 = *(unsigned char *)(v5 + 176);
    sub_3061BC(v5, v2);
    sub_3061BC(v2, (uint64_t)&v25);
    sub_30328C((uint64_t)&v25);
    do
      v5 += 184;
    while (!sub_3588F4((uint64_t)&v10, v5));
    do
      v2 -= 184;
    while (sub_3588F4((uint64_t)&v10, v2));
  }
  if (v5 - 184 != a1) {
    sub_3061BC(a1, v5 - 184);
  }
  sub_3061BC(v5 - 184, (uint64_t)&v10);
  sub_30328C((uint64_t)&v10);
  return v5;
}

void sub_305AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_305ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_305AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_305B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_305B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_305B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_305B40(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v22 = *(void *)(a1 + 88);
  uint64_t v24 = *(void *)(a1 + 112);
  uint64_t v28 = *(void *)(a1 + 168);
  char v29 = *(unsigned char *)(a1 + 176);
  long long v15 = *(_OWORD *)a1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  long long v17 = *(_OWORD *)(a1 + 24);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  long long v19 = *(_OWORD *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  long long v21 = *(_OWORD *)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  long long v23 = *(_OWORD *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  long long v5 = *(_OWORD *)(a1 + 120);
  long long v26 = *(_OWORD *)(a1 + 136);
  long long v25 = v5;
  long long v27 = *(_OWORD *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  do
  {
    BOOL v6 = sub_3588F4(a1 + v4 + 184, (uint64_t)&v15);
    v4 += 184;
  }
  while (v6);
  unint64_t v7 = a1 + v4;
  if (v4 == 184)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      a2 -= 184;
    }
    while (!sub_3588F4(a2, (uint64_t)&v15));
  }
  else
  {
    do
      a2 -= 184;
    while (!sub_3588F4(a2, (uint64_t)&v15));
  }
  if (v7 >= a2)
  {
    uint64_t v13 = v7 - 184;
    if (v7 - 184 == a1) {
      goto LABEL_18;
    }
LABEL_17:
    sub_3061BC(a1, v13);
    goto LABEL_18;
  }
  unint64_t v8 = a1 + v4;
  unint64_t v9 = a2;
  do
  {
    long long v30 = *(_OWORD *)v8;
    uint64_t v10 = *(void *)(v8 + 16);
    *(void *)unint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    long long v32 = *(_OWORD *)(v8 + 24);
    uint64_t v11 = *(void *)(v8 + 40);
    uint64_t v31 = v10;
    uint64_t v33 = v11;
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 32) = 0;
    *(void *)(v8 + 40) = 0;
    long long v34 = *(_OWORD *)(v8 + 48);
    uint64_t v35 = *(void *)(v8 + 64);
    *(void *)(v8 + 56) = 0;
    *(void *)(v8 + 64) = 0;
    *(void *)(v8 + 48) = 0;
    long long v36 = *(_OWORD *)(v8 + 72);
    uint64_t v37 = *(void *)(v8 + 88);
    *(void *)(v8 + 72) = 0;
    *(void *)(v8 + 80) = 0;
    *(void *)(v8 + 88) = 0;
    long long v38 = *(_OWORD *)(v8 + 96);
    uint64_t v39 = *(void *)(v8 + 112);
    *(void *)(v8 + 96) = 0;
    *(void *)(v8 + 104) = 0;
    *(void *)(v8 + 112) = 0;
    long long v12 = *(_OWORD *)(v8 + 136);
    long long v40 = *(_OWORD *)(v8 + 120);
    long long v41 = v12;
    long long v42 = *(_OWORD *)(v8 + 152);
    uint64_t v43 = *(void *)(v8 + 168);
    *(void *)(v8 + 152) = 0;
    *(void *)(v8 + 160) = 0;
    *(void *)(v8 + 168) = 0;
    char v44 = *(unsigned char *)(v8 + 176);
    sub_3061BC(v8, v9);
    sub_3061BC(v9, (uint64_t)&v30);
    sub_30328C((uint64_t)&v30);
    do
      v8 += 184;
    while (sub_3588F4(v8, (uint64_t)&v15));
    do
      v9 -= 184;
    while (!sub_3588F4(v9, (uint64_t)&v15));
  }
  while (v8 < v9);
  uint64_t v13 = v8 - 184;
  if (v13 != a1) {
    goto LABEL_17;
  }
LABEL_18:
  sub_3061BC(v13, (uint64_t)&v15);
  sub_30328C((uint64_t)&v15);
  return v13;
}

void sub_305DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_305DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_305E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_305E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_305E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_305E48(uint64_t a1, uint64_t a2)
{
  BOOL v4 = 1;
  switch(0xD37A6F4DE9BD37A7 * ((a2 - a1) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      uint64_t v5 = a2 - 184;
      if (sub_3588F4(a2 - 184, a1))
      {
        long long v17 = *(_OWORD *)a1;
        uint64_t v18 = *(void *)(a1 + 16);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        long long v19 = *(_OWORD *)(a1 + 24);
        uint64_t v20 = *(void *)(a1 + 40);
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        long long v21 = *(_OWORD *)(a1 + 48);
        uint64_t v22 = *(void *)(a1 + 64);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        long long v23 = *(_OWORD *)(a1 + 72);
        uint64_t v24 = *(void *)(a1 + 88);
        *(void *)(a1 + 64) = 0;
        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
        *(void *)(a1 + 88) = 0;
        long long v25 = *(_OWORD *)(a1 + 96);
        uint64_t v26 = *(void *)(a1 + 112);
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 104) = 0;
        *(void *)(a1 + 112) = 0;
        long long v6 = *(_OWORD *)(a1 + 120);
        long long v28 = *(_OWORD *)(a1 + 136);
        long long v27 = v6;
        long long v29 = *(_OWORD *)(a1 + 152);
        uint64_t v30 = *(void *)(a1 + 168);
        *(void *)(a1 + 152) = 0;
        *(void *)(a1 + 160) = 0;
        *(void *)(a1 + 168) = 0;
        char v31 = *(unsigned char *)(a1 + 176);
        sub_3061BC(a1, v5);
        sub_3061BC(v5, (uint64_t)&v17);
        goto LABEL_20;
      }
      return v4;
    case 3uLL:
      sub_3053A8(a1, a1 + 184, a2 - 184);
      return v4;
    case 4uLL:
      sub_3063B8(a1, a1 + 184, a1 + 368, a2 - 184);
      return v4;
    case 5uLL:
      sub_306678(a1, a1 + 184, a1 + 368, a1 + 552, a2 - 184);
      return v4;
    default:
      uint64_t v7 = a1 + 368;
      sub_3053A8(a1, a1 + 184, a1 + 368);
      uint64_t v8 = a1 + 552;
      if (a1 + 552 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (!sub_3588F4(v8, v7))
  {
LABEL_14:
    uint64_t v7 = v8;
    v9 += 184;
    v8 += 184;
    if (v8 == a2) {
      return 1;
    }
  }
  long long v17 = *(_OWORD *)v8;
  uint64_t v18 = *(void *)(v8 + 16);
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  long long v19 = *(_OWORD *)(v8 + 24);
  uint64_t v20 = *(void *)(v8 + 40);
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = 0;
  *(void *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = 0;
  long long v21 = *(_OWORD *)(v8 + 48);
  uint64_t v22 = *(void *)(v8 + 64);
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  long long v23 = *(_OWORD *)(v8 + 72);
  uint64_t v24 = *(void *)(v8 + 88);
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  *(void *)(v8 + 80) = 0;
  *(void *)(v8 + 88) = 0;
  long long v25 = *(_OWORD *)(v8 + 96);
  uint64_t v11 = *(void *)(v8 + 112);
  *(void *)(v8 + 96) = 0;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  long long v12 = *(_OWORD *)(v8 + 136);
  long long v27 = *(_OWORD *)(v8 + 120);
  long long v28 = v12;
  long long v29 = *(_OWORD *)(v8 + 152);
  uint64_t v13 = *(void *)(v8 + 168);
  uint64_t v26 = v11;
  uint64_t v30 = v13;
  *(void *)(v8 + 152) = 0;
  *(void *)(v8 + 160) = 0;
  char v31 = *(unsigned char *)(v8 + 176);
  uint64_t v14 = v9;
  *(void *)(v8 + 168) = 0;
  while (1)
  {
    sub_3061BC(a1 + v14 + 552, a1 + v14 + 368);
    if (v14 == -368) {
      break;
    }
    BOOL v15 = sub_3588F4((uint64_t)&v17, a1 + v14 + 184);
    v14 -= 184;
    if (!v15)
    {
      sub_3061BC(a1 + v14 + 552, (uint64_t)&v17);
      if (++v10 != 8) {
        goto LABEL_13;
      }
      goto LABEL_19;
    }
  }
  sub_3061BC(a1, (uint64_t)&v17);
  if (++v10 != 8)
  {
LABEL_13:
    sub_30328C((uint64_t)&v17);
    goto LABEL_14;
  }
LABEL_19:
  BOOL v4 = v8 + 184 == a2;
LABEL_20:
  sub_30328C((uint64_t)&v17);
  return v4;
}

void sub_306190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_3061BC(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void ***)a1;
  if (*(void *)a1)
  {
    uint64_t v5 = *(void ***)(a1 + 8);
    long long v6 = *(void ***)a1;
    if (v5 != v4)
    {
      uint64_t v7 = *(void ***)(a1 + 8);
      do
      {
        int v10 = (char *)*(v7 - 3);
        v7 -= 3;
        uint64_t v9 = v10;
        if (v10)
        {
          uint64_t v11 = (char *)*(v5 - 2);
          uint64_t v8 = v9;
          if (v11 != v9)
          {
            long long v12 = (char *)*(v5 - 2);
            do
            {
              uint64_t v14 = (void *)*((void *)v12 - 3);
              v12 -= 24;
              uint64_t v13 = v14;
              if (v14)
              {
                *((void *)v11 - 2) = v13;
                operator delete(v13);
              }
              uint64_t v11 = v12;
            }
            while (v12 != v9);
            uint64_t v8 = *v7;
          }
          *(v5 - 2) = v9;
          operator delete(v8);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      long long v6 = *(void ***)a1;
    }
    *(void *)(a1 + 8) = v4;
    operator delete(v6);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  BOOL v15 = *(void **)(a1 + 24);
  if (v15)
  {
    *(void *)(a1 + 32) = v15;
    operator delete(v15);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v16 = (void **)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 48);
  if (v17)
  {
    uint64_t v18 = *(void *)(a1 + 56);
    long long v19 = *(void **)(a1 + 48);
    if (v18 == v17)
    {
LABEL_27:
      *(void *)(a1 + 56) = v17;
      operator delete(v19);
      unsigned int *v16 = 0;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 64) = 0;
      goto LABEL_28;
    }
    while (1)
    {
      if (*(char *)(v18 - 1) < 0)
      {
        operator delete(*(void **)(v18 - 24));
        if (*(char *)(v18 - 25) < 0) {
LABEL_25:
        }
          operator delete(*(void **)(v18 - 48));
      }
      else if (*(char *)(v18 - 25) < 0)
      {
        goto LABEL_25;
      }
      v18 -= 48;
      if (v18 == v17)
      {
        long long v19 = *v16;
        goto LABEL_27;
      }
    }
  }
LABEL_28:
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  sub_301D58((void **)(a1 + 72), a2 + 72);
  long long v20 = *(_OWORD *)(a2 + 136);
  long long v21 = *(void **)(a1 + 152);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v20;
  if (v21)
  {
    *(void *)(a1 + 160) = v21;
    operator delete(v21);
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
  }
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  return a1;
}

uint64_t sub_3063B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_3053A8(a1, a2, a3);
  uint64_t result = sub_3588F4(a4, a3);
  if (result)
  {
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    long long v14 = *(_OWORD *)(a3 + 24);
    uint64_t v15 = *(void *)(a3 + 40);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    long long v16 = *(_OWORD *)(a3 + 48);
    uint64_t v17 = *(void *)(a3 + 64);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    long long v18 = *(_OWORD *)(a3 + 72);
    uint64_t v19 = *(void *)(a3 + 88);
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    long long v20 = *(_OWORD *)(a3 + 96);
    uint64_t v21 = *(void *)(a3 + 112);
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 104) = 0;
    *(void *)(a3 + 112) = 0;
    long long v9 = *(_OWORD *)(a3 + 120);
    long long v23 = *(_OWORD *)(a3 + 136);
    long long v22 = v9;
    long long v24 = *(_OWORD *)(a3 + 152);
    uint64_t v25 = *(void *)(a3 + 168);
    *(void *)(a3 + 152) = 0;
    *(void *)(a3 + 160) = 0;
    *(void *)(a3 + 168) = 0;
    char v26 = *(unsigned char *)(a3 + 176);
    sub_3061BC(a3, a4);
    sub_3061BC(a4, (uint64_t)&v12);
    sub_30328C((uint64_t)&v12);
    uint64_t result = sub_3588F4(a3, a2);
    if (result)
    {
      long long v12 = *(_OWORD *)a2;
      uint64_t v13 = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      long long v14 = *(_OWORD *)(a2 + 24);
      uint64_t v15 = *(void *)(a2 + 40);
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      long long v16 = *(_OWORD *)(a2 + 48);
      uint64_t v17 = *(void *)(a2 + 64);
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 56) = 0;
      long long v18 = *(_OWORD *)(a2 + 72);
      uint64_t v19 = *(void *)(a2 + 88);
      *(void *)(a2 + 64) = 0;
      *(void *)(a2 + 72) = 0;
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      long long v20 = *(_OWORD *)(a2 + 96);
      uint64_t v21 = *(void *)(a2 + 112);
      *(void *)(a2 + 96) = 0;
      *(void *)(a2 + 104) = 0;
      *(void *)(a2 + 112) = 0;
      long long v10 = *(_OWORD *)(a2 + 120);
      long long v23 = *(_OWORD *)(a2 + 136);
      long long v22 = v10;
      long long v24 = *(_OWORD *)(a2 + 152);
      uint64_t v25 = *(void *)(a2 + 168);
      *(void *)(a2 + 152) = 0;
      *(void *)(a2 + 160) = 0;
      *(void *)(a2 + 168) = 0;
      char v26 = *(unsigned char *)(a2 + 176);
      sub_3061BC(a2, a3);
      sub_3061BC(a3, (uint64_t)&v12);
      sub_30328C((uint64_t)&v12);
      uint64_t result = sub_3588F4(a2, a1);
      if (result)
      {
        long long v12 = *(_OWORD *)a1;
        uint64_t v13 = *(void *)(a1 + 16);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        long long v14 = *(_OWORD *)(a1 + 24);
        uint64_t v15 = *(void *)(a1 + 40);
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        long long v16 = *(_OWORD *)(a1 + 48);
        uint64_t v17 = *(void *)(a1 + 64);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        long long v18 = *(_OWORD *)(a1 + 72);
        uint64_t v19 = *(void *)(a1 + 88);
        *(void *)(a1 + 64) = 0;
        *(void *)(a1 + 72) = 0;
        *(void *)(a1 + 80) = 0;
        *(void *)(a1 + 88) = 0;
        long long v20 = *(_OWORD *)(a1 + 96);
        uint64_t v21 = *(void *)(a1 + 112);
        *(void *)(a1 + 96) = 0;
        *(void *)(a1 + 104) = 0;
        *(void *)(a1 + 112) = 0;
        long long v11 = *(_OWORD *)(a1 + 120);
        long long v23 = *(_OWORD *)(a1 + 136);
        long long v22 = v11;
        long long v24 = *(_OWORD *)(a1 + 152);
        uint64_t v25 = *(void *)(a1 + 168);
        *(void *)(a1 + 152) = 0;
        *(void *)(a1 + 160) = 0;
        *(void *)(a1 + 168) = 0;
        char v26 = *(unsigned char *)(a1 + 176);
        sub_3061BC(a1, a2);
        sub_3061BC(a2, (uint64_t)&v12);
        return sub_30328C((uint64_t)&v12);
      }
    }
  }
  return result;
}

uint64_t sub_306678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_3063B8(a1, a2, a3, a4);
  uint64_t result = sub_3588F4(a5, a4);
  if (result)
  {
    long long v15 = *(_OWORD *)a4;
    uint64_t v16 = *(void *)(a4 + 16);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    long long v17 = *(_OWORD *)(a4 + 24);
    uint64_t v18 = *(void *)(a4 + 40);
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 40) = 0;
    long long v19 = *(_OWORD *)(a4 + 48);
    uint64_t v20 = *(void *)(a4 + 64);
    *(void *)(a4 + 48) = 0;
    *(void *)(a4 + 56) = 0;
    long long v21 = *(_OWORD *)(a4 + 72);
    uint64_t v22 = *(void *)(a4 + 88);
    *(void *)(a4 + 64) = 0;
    *(void *)(a4 + 72) = 0;
    *(void *)(a4 + 80) = 0;
    *(void *)(a4 + 88) = 0;
    long long v23 = *(_OWORD *)(a4 + 96);
    uint64_t v24 = *(void *)(a4 + 112);
    *(void *)(a4 + 96) = 0;
    *(void *)(a4 + 104) = 0;
    *(void *)(a4 + 112) = 0;
    long long v11 = *(_OWORD *)(a4 + 120);
    long long v26 = *(_OWORD *)(a4 + 136);
    long long v25 = v11;
    long long v27 = *(_OWORD *)(a4 + 152);
    uint64_t v28 = *(void *)(a4 + 168);
    *(void *)(a4 + 152) = 0;
    *(void *)(a4 + 160) = 0;
    *(void *)(a4 + 168) = 0;
    char v29 = *(unsigned char *)(a4 + 176);
    sub_3061BC(a4, a5);
    sub_3061BC(a5, (uint64_t)&v15);
    sub_30328C((uint64_t)&v15);
    uint64_t result = sub_3588F4(a4, a3);
    if (result)
    {
      long long v15 = *(_OWORD *)a3;
      uint64_t v16 = *(void *)(a3 + 16);
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      long long v17 = *(_OWORD *)(a3 + 24);
      uint64_t v18 = *(void *)(a3 + 40);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
      long long v19 = *(_OWORD *)(a3 + 48);
      uint64_t v20 = *(void *)(a3 + 64);
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      long long v21 = *(_OWORD *)(a3 + 72);
      uint64_t v22 = *(void *)(a3 + 88);
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 88) = 0;
      long long v23 = *(_OWORD *)(a3 + 96);
      uint64_t v24 = *(void *)(a3 + 112);
      *(void *)(a3 + 96) = 0;
      *(void *)(a3 + 104) = 0;
      *(void *)(a3 + 112) = 0;
      long long v12 = *(_OWORD *)(a3 + 120);
      long long v26 = *(_OWORD *)(a3 + 136);
      long long v25 = v12;
      long long v27 = *(_OWORD *)(a3 + 152);
      uint64_t v28 = *(void *)(a3 + 168);
      *(void *)(a3 + 152) = 0;
      *(void *)(a3 + 160) = 0;
      *(void *)(a3 + 168) = 0;
      char v29 = *(unsigned char *)(a3 + 176);
      sub_3061BC(a3, a4);
      sub_3061BC(a4, (uint64_t)&v15);
      sub_30328C((uint64_t)&v15);
      uint64_t result = sub_3588F4(a3, a2);
      if (result)
      {
        long long v15 = *(_OWORD *)a2;
        uint64_t v16 = *(void *)(a2 + 16);
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        long long v17 = *(_OWORD *)(a2 + 24);
        uint64_t v18 = *(void *)(a2 + 40);
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0;
        long long v19 = *(_OWORD *)(a2 + 48);
        uint64_t v20 = *(void *)(a2 + 64);
        *(void *)(a2 + 48) = 0;
        *(void *)(a2 + 56) = 0;
        long long v21 = *(_OWORD *)(a2 + 72);
        uint64_t v22 = *(void *)(a2 + 88);
        *(void *)(a2 + 64) = 0;
        *(void *)(a2 + 72) = 0;
        *(void *)(a2 + 80) = 0;
        *(void *)(a2 + 88) = 0;
        long long v23 = *(_OWORD *)(a2 + 96);
        uint64_t v24 = *(void *)(a2 + 112);
        *(void *)(a2 + 96) = 0;
        *(void *)(a2 + 104) = 0;
        *(void *)(a2 + 112) = 0;
        long long v13 = *(_OWORD *)(a2 + 120);
        long long v26 = *(_OWORD *)(a2 + 136);
        long long v25 = v13;
        long long v27 = *(_OWORD *)(a2 + 152);
        uint64_t v28 = *(void *)(a2 + 168);
        *(void *)(a2 + 152) = 0;
        *(void *)(a2 + 160) = 0;
        *(void *)(a2 + 168) = 0;
        char v29 = *(unsigned char *)(a2 + 176);
        sub_3061BC(a2, a3);
        sub_3061BC(a3, (uint64_t)&v15);
        sub_30328C((uint64_t)&v15);
        uint64_t result = sub_3588F4(a2, a1);
        if (result)
        {
          long long v15 = *(_OWORD *)a1;
          uint64_t v16 = *(void *)(a1 + 16);
          *(void *)a1 = 0;
          *(void *)(a1 + 8) = 0;
          long long v17 = *(_OWORD *)(a1 + 24);
          uint64_t v18 = *(void *)(a1 + 40);
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + 24) = 0;
          *(void *)(a1 + 32) = 0;
          *(void *)(a1 + 40) = 0;
          long long v19 = *(_OWORD *)(a1 + 48);
          uint64_t v20 = *(void *)(a1 + 64);
          *(void *)(a1 + 48) = 0;
          *(void *)(a1 + 56) = 0;
          long long v21 = *(_OWORD *)(a1 + 72);
          uint64_t v22 = *(void *)(a1 + 88);
          *(void *)(a1 + 64) = 0;
          *(void *)(a1 + 72) = 0;
          *(void *)(a1 + 80) = 0;
          *(void *)(a1 + 88) = 0;
          long long v23 = *(_OWORD *)(a1 + 96);
          uint64_t v24 = *(void *)(a1 + 112);
          *(void *)(a1 + 96) = 0;
          *(void *)(a1 + 104) = 0;
          *(void *)(a1 + 112) = 0;
          long long v14 = *(_OWORD *)(a1 + 120);
          long long v26 = *(_OWORD *)(a1 + 136);
          long long v25 = v14;
          long long v27 = *(_OWORD *)(a1 + 152);
          uint64_t v28 = *(void *)(a1 + 168);
          *(void *)(a1 + 152) = 0;
          *(void *)(a1 + 160) = 0;
          *(void *)(a1 + 168) = 0;
          char v29 = *(unsigned char *)(a1 + 176);
          sub_3061BC(a1, a2);
          sub_3061BC(a2, (uint64_t)&v15);
          return sub_30328C((uint64_t)&v15);
        }
      }
    }
  }
  return result;
}

uint64_t sub_306A14(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xD37A6F4DE9BD37A7 * ((a4 - result) >> 3)))
    {
      int64_t v9 = (0xA6F4DE9BD37A6F4ELL * ((a4 - result) >> 3)) | 1;
      uint64_t v10 = result + 184 * v9;
      int64_t v11 = 0xA6F4DE9BD37A6F4ELL * ((a4 - result) >> 3) + 2;
      if (v11 < a3 && sub_3588F4(result + 184 * v9, v10 + 184))
      {
        v10 += 184;
        int64_t v9 = v11;
      }
      uint64_t result = sub_3588F4(v10, v5);
      if ((result & 1) == 0)
      {
        long long v15 = *(_OWORD *)v5;
        uint64_t v16 = *(void *)(v5 + 16);
        *(void *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        long long v17 = *(_OWORD *)(v5 + 24);
        uint64_t v18 = *(void *)(v5 + 40);
        *(void *)(v5 + 16) = 0;
        *(void *)(v5 + 24) = 0;
        *(void *)(v5 + 32) = 0;
        *(void *)(v5 + 40) = 0;
        long long v19 = *(_OWORD *)(v5 + 48);
        uint64_t v20 = *(void *)(v5 + 64);
        *(void *)(v5 + 48) = 0;
        *(void *)(v5 + 56) = 0;
        long long v21 = *(_OWORD *)(v5 + 72);
        uint64_t v22 = *(void *)(v5 + 88);
        *(void *)(v5 + 64) = 0;
        *(void *)(v5 + 72) = 0;
        *(void *)(v5 + 80) = 0;
        *(void *)(v5 + 88) = 0;
        long long v23 = *(_OWORD *)(v5 + 96);
        uint64_t v24 = *(void *)(v5 + 112);
        *(void *)(v5 + 96) = 0;
        *(void *)(v5 + 104) = 0;
        *(void *)(v5 + 112) = 0;
        long long v12 = *(_OWORD *)(v5 + 120);
        long long v26 = *(_OWORD *)(v5 + 136);
        long long v25 = v12;
        long long v27 = *(_OWORD *)(v5 + 152);
        uint64_t v28 = *(void *)(v5 + 168);
        *(void *)(v5 + 152) = 0;
        *(void *)(v5 + 160) = 0;
        *(void *)(v5 + 168) = 0;
        char v29 = *(unsigned char *)(v5 + 176);
        do
        {
          uint64_t v13 = v10;
          sub_3061BC(v5, v10);
          if (v7 < v9) {
            break;
          }
          uint64_t v14 = (2 * v9) | 1;
          uint64_t v10 = v6 + 184 * v14;
          int64_t v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            int64_t v9 = v14;
          }
          else if (sub_3588F4(v6 + 184 * v14, v10 + 184))
          {
            v10 += 184;
          }
          else
          {
            int64_t v9 = v14;
          }
          uint64_t v5 = v13;
        }
        while (!sub_3588F4(v10, (uint64_t)&v15));
        sub_3061BC(v13, (uint64_t)&v15);
        return sub_30328C((uint64_t)&v15);
      }
    }
  }
  return result;
}

void sub_306C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_306C1C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    long long v15 = *(_OWORD *)result;
    uint64_t v16 = *(void *)(result + 16);
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    long long v17 = *(_OWORD *)(result + 24);
    uint64_t v18 = *(void *)(result + 40);
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    long long v19 = *(_OWORD *)(result + 48);
    uint64_t v20 = *(void *)(result + 64);
    *(void *)(result + 48) = 0;
    *(void *)(result + 56) = 0;
    long long v21 = *(_OWORD *)(result + 72);
    uint64_t v22 = *(void *)(result + 88);
    *(void *)(result + 64) = 0;
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 0;
    *(void *)(result + 88) = 0;
    long long v23 = *(_OWORD *)(result + 96);
    uint64_t v24 = *(void *)(result + 112);
    *(void *)(result + 96) = 0;
    *(void *)(result + 104) = 0;
    *(void *)(result + 112) = 0;
    long long v8 = *(_OWORD *)(result + 120);
    long long v26 = *(_OWORD *)(result + 136);
    long long v25 = v8;
    long long v27 = *(_OWORD *)(result + 152);
    uint64_t v28 = *(void *)(result + 168);
    *(void *)(result + 152) = 0;
    *(void *)(result + 160) = 0;
    char v29 = *(unsigned char *)(result + 176);
    int64_t v9 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v10 = result;
    *(void *)(result + 168) = 0;
    do
    {
      uint64_t v11 = v10 + 184 * v7 + 184;
      uint64_t v12 = (2 * v7) | 1;
      uint64_t v13 = 2 * v7 + 2;
      if (v13 < a4 && sub_3588F4(v10 + 184 * v7 + 184, v10 + 184 * v7 + 368))
      {
        v11 += 184;
        uint64_t v12 = v13;
      }
      sub_3061BC(v10, v11);
      uint64_t v10 = v11;
      uint64_t v7 = v12;
    }
    while (v12 <= v9);
    if (v11 == a2 - 184)
    {
      sub_3061BC(v11, (uint64_t)&v15);
    }
    else
    {
      sub_3061BC(v11, a2 - 184);
      sub_3061BC(a2 - 184, (uint64_t)&v15);
      sub_306E20(v6, v11 + 184, a3, 0xD37A6F4DE9BD37A7 * ((v11 + 184 - v6) >> 3));
    }
    return sub_30328C((uint64_t)&v15);
  }
  return result;
}

void sub_306DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_30328C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_306E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_30328C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_306E20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v5 = result;
    unint64_t v6 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v7 = result + 184 * v6;
    long long v8 = (void *)(a2 - 184);
    uint64_t result = sub_3588F4(v7, a2 - 184);
    if (result)
    {
      long long v11 = *(_OWORD *)(a2 - 184);
      uint64_t v12 = *(void *)(a2 - 168);
      v8[1] = 0;
      v8[2] = 0;
      *long long v8 = 0;
      long long v13 = *(_OWORD *)(a2 - 160);
      uint64_t v14 = *(void *)(a2 - 144);
      *(void *)(a2 - 160) = 0;
      *(void *)(a2 - 152) = 0;
      long long v15 = *(_OWORD *)(a2 - 136);
      uint64_t v16 = *(void *)(a2 - 120);
      *(void *)(a2 - 144) = 0;
      *(void *)(a2 - 136) = 0;
      *(void *)(a2 - 128) = 0;
      *(void *)(a2 - 120) = 0;
      long long v17 = *(_OWORD *)(a2 - 112);
      uint64_t v18 = *(void *)(a2 - 96);
      *(void *)(a2 - 112) = 0;
      *(void *)(a2 - 104) = 0;
      long long v19 = *(_OWORD *)(a2 - 88);
      uint64_t v20 = *(void *)(a2 - 72);
      *(void *)(a2 - 96) = 0;
      *(void *)(a2 - 88) = 0;
      *(void *)(a2 - 80) = 0;
      *(void *)(a2 - 72) = 0;
      long long v9 = *(_OWORD *)(a2 - 64);
      long long v22 = *(_OWORD *)(a2 - 48);
      long long v21 = v9;
      long long v23 = *(_OWORD *)(a2 - 32);
      uint64_t v24 = *(void *)(a2 - 16);
      *(void *)(a2 - 32) = 0;
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      char v25 = *(unsigned char *)(a2 - 8);
      do
      {
        uint64_t v10 = v7;
        sub_3061BC((uint64_t)v8, v7);
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = v5 + 184 * v6;
        long long v8 = (void *)v10;
      }
      while (sub_3588F4(v7, (uint64_t)&v11));
      sub_3061BC(v10, (uint64_t)&v11);
      return sub_30328C((uint64_t)&v11);
    }
  }
  return result;
}

void sub_306F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_306F8C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1642C8590B21642) {
    sub_2E00();
  }
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 3) >= 0xB21642C8590B21) {
    unint64_t v5 = 0x1642C8590B21642;
  }
  else {
    unint64_t v5 = v4;
  }
  long long v19 = a1 + 2;
  if (v5 > 0x1642C8590B21642) {
    sub_188D718();
  }
  uint64_t v7 = 184 * v5;
  long long v8 = (char *)operator new(184 * v5);
  long long v9 = &v8[184 * v3];
  std::string __p = v8;
  uint64_t v16 = v9;
  *(_OWORD *)long long v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *((void *)v9 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *((void *)v9 + 7) = 0;
  *((void *)v9 + 8) = 0;
  *((_OWORD *)v9 + 3) = *(_OWORD *)(a2 + 48);
  *((void *)v9 + 8) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *((void *)v9 + 10) = 0;
  *((void *)v9 + 11) = 0;
  *(_OWORD *)(v9 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v9 + 11) = *(void *)(a2 + 88);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *((void *)v9 + 13) = 0;
  *((void *)v9 + 14) = 0;
  *((_OWORD *)v9 + 6) = *(_OWORD *)(a2 + 96);
  *((void *)v9 + 14) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  long long v10 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v9 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v9 + 120) = v10;
  *((void *)v9 + 20) = 0;
  *((void *)v9 + 21) = 0;
  *(_OWORD *)(v9 + 152) = *(_OWORD *)(a2 + 152);
  *((void *)v9 + 21) = *(void *)(a2 + 168);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  v9[176] = *(unsigned char *)(a2 + 176);
  long long v17 = v9 + 184;
  uint64_t v18 = &v8[v7];
  sub_307180(a1, &__p);
  uint64_t v11 = a1[1];
  long long v13 = v16;
  for (uint64_t i = v17; v17 != v13; uint64_t i = v17)
  {
    long long v17 = i - 184;
    sub_30328C((uint64_t)(i - 184));
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_30716C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3072BC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_307180(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 184) = 0;
      *(void *)(v6 - 176) = 0;
      *(void *)(v6 - 168) = 0;
      *(_OWORD *)(v6 - 184) = *(_OWORD *)(v2 + v5 - 184);
      *(void *)(v6 - 168) = *(void *)(v2 + v5 - 168);
      *(void *)(v7 - 184) = 0;
      *(void *)(v7 - 176) = 0;
      *(void *)(v7 - 168) = 0;
      *(void *)(v6 - 160) = 0;
      *(void *)(v6 - 152) = 0;
      *(void *)(v6 - 144) = 0;
      *(_OWORD *)(v6 - 160) = *(_OWORD *)(v2 + v5 - 160);
      *(void *)(v6 - 144) = *(void *)(v2 + v5 - 144);
      *(void *)(v7 - 160) = 0;
      *(void *)(v7 - 152) = 0;
      *(void *)(v7 - 144) = 0;
      *(void *)(v6 - 136) = 0;
      *(void *)(v6 - 128) = 0;
      *(void *)(v6 - 120) = 0;
      *(_OWORD *)(v6 - 136) = *(_OWORD *)(v2 + v5 - 136);
      *(void *)(v6 - 120) = *(void *)(v2 + v5 - 120);
      *(void *)(v7 - 136) = 0;
      *(void *)(v7 - 128) = 0;
      *(void *)(v7 - 120) = 0;
      *(void *)(v6 - 112) = 0;
      *(void *)(v6 - 104) = 0;
      *(void *)(v6 - 96) = 0;
      *(_OWORD *)(v6 - 112) = *(_OWORD *)(v2 + v5 - 112);
      *(void *)(v6 - 96) = *(void *)(v2 + v5 - 96);
      *(void *)(v7 - 112) = 0;
      *(void *)(v7 - 104) = 0;
      *(void *)(v7 - 96) = 0;
      *(void *)(v6 - 88) = 0;
      *(void *)(v6 - 80) = 0;
      *(void *)(v6 - 72) = 0;
      *(_OWORD *)(v6 - 88) = *(_OWORD *)(v2 + v5 - 88);
      *(void *)(v6 - 72) = *(void *)(v2 + v5 - 72);
      *(void *)(v7 - 88) = 0;
      *(void *)(v7 - 80) = 0;
      *(void *)(v7 - 72) = 0;
      long long v8 = *(_OWORD *)(v2 + v5 - 64);
      long long v9 = *(_OWORD *)(v2 + v5 - 48);
      *(void *)(v6 - 24) = 0;
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 32) = 0;
      *(_OWORD *)(v6 - 64) = v8;
      *(_OWORD *)(v6 - 48) = v9;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = *(void *)(v2 + v5 - 16);
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(unsigned char *)(v6 - 8) = *(unsigned char *)(v2 + v5 - 8);
      v5 -= 184;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v10 = *result;
  *uint64_t result = v4;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t sub_3072BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 184;
    sub_30328C(i - 184);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_307310(char **a1, char *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v5 = 0x333333333333333;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x333333333333333) {
    sub_188D718();
  }
  uint64_t v7 = 80 * v5;
  long long v8 = (char *)operator new(80 * v5);
  long long v9 = &v8[80 * v3];
  *long long v9 = *a2;
  uint64_t v10 = &v8[v7];
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v9 + 3) = *((void *)a2 + 3);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((_OWORD *)v9 + 2) = *((_OWORD *)a2 + 2);
  *((void *)v9 + 6) = *((void *)a2 + 6);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)v9 + 8) = 0;
  *((void *)v9 + 9) = 0;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v9 + 9) = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  uint64_t v11 = v9 + 80;
  long long v13 = *a1;
  uint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v12) {
      return v11;
    }
    goto LABEL_15;
  }
  uint64_t v14 = 0;
  do
  {
    long long v15 = &v9[v14];
    uint64_t v16 = &v12[v14];
    *(v15 - 80) = v12[v14 - 80];
    *(_OWORD *)(v15 - 72) = *(_OWORD *)&v12[v14 - 72];
    *((void *)v15 - 7) = *(void *)&v12[v14 - 56];
    *((void *)v16 - 9) = 0;
    *((void *)v16 - 8) = 0;
    *((void *)v16 - 7) = 0;
    *((_OWORD *)v15 - 3) = *(_OWORD *)&v12[v14 - 48];
    *((void *)v15 - 4) = *(void *)&v12[v14 - 32];
    *((void *)v16 - 6) = 0;
    *((void *)v16 - 5) = 0;
    *((void *)v16 - 4) = 0;
    *(_OWORD *)(v15 - 24) = *(_OWORD *)&v12[v14 - 24];
    *((void *)v15 - 1) = *(void *)&v12[v14 - 8];
    *((void *)v16 - 3) = 0;
    *((void *)v16 - 2) = 0;
    *((void *)v16 - 1) = 0;
    v14 -= 80;
  }
  while (&v12[v14] != v13);
  long long v17 = *a1;
  uint64_t v12 = a1[1];
  *a1 = &v9[v14];
  a1[1] = v11;
  a1[2] = v10;
  if (v12 != v17)
  {
    do
      uint64_t v12 = (char *)sub_3034C4((void *)v12 - 10);
    while (v12 != v17);
    uint64_t v12 = v17;
  }
  if (v12) {
LABEL_15:
  }
    operator delete(v12);
  return v11;
}

uint64_t sub_3074D8(long long *a1, long long *a2, char **a3)
{
  sub_2FCB1C((uint64_t)&v12, a1);
  sub_2FCB1C((uint64_t)&v7, a2);
  sub_3075C8(&v12, &v7, a3, (uint64_t)v17);
  uint64_t v5 = v22;
  if (v20)
  {
    long long v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    long long v19 = v18;
    operator delete(v18);
  }
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    long long v9 = v8;
    operator delete(v8);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  return v5;
}

void sub_307598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_2FC938((uint64_t *)va);
  sub_2FC938((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_3075B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_2FC938((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_3075C8(long long *a1@<X0>, long long *a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  long long v4 = a1[1];
  long long v11 = *a1;
  *(_OWORD *)long long v12 = v4;
  uint64_t v13 = *((void *)a1 + 4);
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  *(_OWORD *)uint64_t v14 = *(long long *)((char *)a1 + 40);
  uint64_t v15 = *((void *)a1 + 7);
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 6) = 0;
  *((void *)a1 + 7) = 0;
  long long v5 = a2[1];
  long long v6 = *a2;
  *(_OWORD *)uint64_t v7 = v5;
  uint64_t v8 = *((void *)a2 + 4);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(_OWORD *)std::string __p = *(long long *)((char *)a2 + 40);
  uint64_t v10 = *((void *)a2 + 7);
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  sub_3076AC((uint64_t)&v11, (uint64_t)&v6, a3, a4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_307690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void sub_3076AC(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v11 = *(_OWORD *)a1;
  *(_OWORD *)long long v12 = v4;
  uint64_t v13 = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)uint64_t v14 = *(_OWORD *)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 56);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  long long v5 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v7 = v5;
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  sub_307790(&v11, &v6, a3, a4);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v12[0])
  {
    v12[1] = v12[0];
    operator delete(v12[0]);
  }
}

void sub_307774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

void sub_307790(long long *a1@<X0>, long long *a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  sub_2FCB1C((uint64_t)v44, a1);
  long long v8 = a2[1];
  long long v39 = *a2;
  *(_OWORD *)long long v40 = v8;
  uint64_t v9 = *((void *)a2 + 4);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  long long __p = *(long long *)((char *)a2 + 40);
  uint64_t v10 = *((void *)a2 + 7);
  uint64_t v41 = v9;
  uint64_t v43 = v10;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  sub_307A90((uint64_t)v44, (uint64_t)&v39, &v49);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  if (v47)
  {
    int v48 = v47;
    operator delete(v47);
  }
  uint64_t v35 = a1;
  if (v45)
  {
    uint64_t v46 = v45;
    operator delete(v45);
  }
  long long v37 = v49;
  long long v11 = v50;
  uint64_t v33 = v51;
  unint64_t v50 = 0;
  uint64_t v51 = 0;
  long long v12 = v53;
  uint64_t v32 = v52;
  long long v38 = v53;
  uint64_t v30 = v55;
  char v31 = v54;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v52 = 0;
  int v53 = 0;
  long long v36 = v56;
  char v29 = v57;
  long long v57 = 0;
  unint64_t v58 = 0;
  uint64_t v13 = v60;
  BOOL v14 = v60 == v61;
  uint64_t v59 = 0;
  int64x2_t v60 = 0;
  BOOL v15 = v13 == v61 || v31 == v38;
  int v16 = (v31 == v38) ^ v14;
  uint64_t v62 = 0;
  int v63 = a3;
  uint64_t v17 = (v31 - v38) >> 3;
  unint64_t v18 = v17 - 1;
  uint64_t v19 = v17 - 2;
  long long v34 = v11;
  uint64_t v20 = v11 + 8;
  uint64_t v61 = 0;
  while (v15)
  {
    if (!v16) {
      goto LABEL_28;
    }
    long long v21 = (void *)v37;
LABEL_25:
    sub_2D66A4(&v63, v21);
    unint64_t v24 = *((void *)&v37 + 1);
    *(void *)&long long v37 = v21 + 1;
    if (*((void *)&v37 + 1) < v18)
    {
      if (v21 + 1 == (void *)v12[*((void *)&v37 + 1)])
      {
        while (1)
        {
          uint64_t v22 = *(void *)&v20[8 * v24];
          *(void *)&long long v37 = v22;
          if (v19 == v24) {
            break;
          }
          uint64_t v23 = v12[++v24];
          if (v23 != v22) {
            goto LABEL_14;
          }
        }
        unint64_t v24 = v18;
      }
LABEL_14:
      *((void *)&v37 + 1) = v24;
    }
  }
  long long v21 = (void *)v37;
  if (*((void *)&v37 + 1) != *((void *)&v36 + 1) || (void)v37 != (void)v36) {
    goto LABEL_25;
  }
LABEL_28:
  long long v26 = v63;
  if (v13) {
    operator delete(v13);
  }
  if (v29) {
    operator delete(v29);
  }
  long long v27 = (void *)*((void *)v35 + 2);
  uint64_t v28 = (void *)*((void *)v35 + 5);
  v35[2] = 0u;
  v35[3] = 0u;
  v35[1] = 0u;
  if (v28) {
    operator delete(v28);
  }
  if (v27) {
    operator delete(v27);
  }
  *(_OWORD *)a4 = v37;
  *(void *)(a4 + 16) = v34;
  *(void *)(a4 + 24) = v33;
  *(void *)(a4 + 32) = v32;
  *(void *)(a4 + 40) = v12;
  *(void *)(a4 + 48) = v31;
  *(void *)(a4 + 56) = v30;
  *(void *)(a4 + 64) = v26;
  if (v60)
  {
    uint64_t v61 = v60;
    operator delete(v60);
  }
  if (v57)
  {
    unint64_t v58 = v57;
    operator delete(v57);
  }
  if (v53)
  {
    uint64_t v54 = v53;
    operator delete(v53);
  }
  if (v50)
  {
    uint64_t v51 = v50;
    operator delete(v50);
  }
}

void sub_307A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

void sub_307A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  sub_2FC938((uint64_t *)va);
  sub_2FC938((uint64_t *)va1);
  sub_2FC97C((void *)(v9 - 232));
  _Unwind_Resume(a1);
}

void sub_307A90(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v20 = *(_OWORD *)a1;
  *(_OWORD *)long long v21 = v5;
  uint64_t v22 = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)uint64_t v23 = *(_OWORD *)(a1 + 40);
  uint64_t v24 = *(void *)(a1 + 56);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = sub_2FCB1C((uint64_t)&v26, &v20);
  long long v25 = v26;
  long long v13 = v28;
  long long v14 = v27;
  long long v12 = v29;
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v15 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v16 = v7;
  uint64_t v17 = *(void *)(a2 + 32);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)long long __p = *(_OWORD *)(a2 + 40);
  uint64_t v19 = *(void *)(a2 + 56);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  sub_2FCB1C(v6, &v15);
  long long v8 = v26;
  long long v9 = v27;
  long long v10 = v28;
  long long v11 = v29;
  *a3 = v25;
  a3[1] = v14;
  a3[2] = v13;
  a3[3] = v12;
  a3[4] = v8;
  a3[5] = v9;
  a3[6] = v10;
  a3[7] = v11;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  if (v23[0])
  {
    v23[1] = v23[0];
    operator delete(v23[0]);
  }
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
}

uint64_t sub_307BB4(uint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = result;
LABEL_2:
  long long v11 = a2 - 8;
  uint64_t v75 = a2 - 24;
  int v76 = a2 - 16;
  uint64_t v12 = v10;
  std::string::size_type v77 = a2;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v14 = (uint64_t)&a2[-v12];
    unint64_t v15 = v14 >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v31 = *(void *)v10;
          unsigned int v32 = *(void *)v10;
          unsigned int v33 = *(a2 - 8);
          if (v33 == v32)
          {
            unsigned int v34 = *((_DWORD *)a2 - 1);
            if (v34 == -1) {
              return result;
            }
            if (HIDWORD(v31) != -1 && v34 >= HIDWORD(v31)) {
              return result;
            }
          }
          else if (v33 >= v32)
          {
            return result;
          }
          *(void *)uint64_t v10 = *((void *)a2 - 1);
          *((void *)a2 - 1) = v31;
          return result;
        case 3uLL:
          return sub_308170((uint64_t *)v10, (unsigned __int8 *)(v10 + 8), v11);
        case 4uLL:
          return sub_308990((uint64_t *)v10, (unsigned __int8 *)(v10 + 8), (unsigned __int8 *)(v10 + 16), v11);
        case 5uLL:
          return sub_308AA0((uint64_t *)v10, (unsigned __int8 *)(v10 + 8), (unsigned __int8 *)(v10 + 16), (unsigned __int8 *)(v10 + 24), v11);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 191)
    {
      long long v36 = (unsigned __int8 *)(v10 + 8);
      BOOL v38 = (unsigned __int8 *)v10 == a2 || v36 == a2;
      if (a5)
      {
        if (v38) {
          return result;
        }
        uint64_t v39 = 0;
        long long v40 = (unsigned __int8 *)v10;
        while (2)
        {
          char v47 = v40;
          long long v40 = v36;
          uint64_t v48 = *(void *)v47;
          unsigned int v49 = *(void *)v47;
          unsigned int v50 = v47[8];
          BOOL v51 = v50 >= v49;
          if (v50 == v49)
          {
            unsigned int v52 = *((_DWORD *)v47 + 3);
            if (v52 != -1)
            {
              BOOL v51 = HIDWORD(v48) != -1 && v52 >= HIDWORD(v48);
              goto LABEL_66;
            }
          }
          else
          {
LABEL_66:
            if (!v51)
            {
              uint64_t v53 = *((void *)v47 + 1);
              *((void *)v47 + 1) = v48;
              uint64_t v46 = (void *)v10;
              if (v47 == (unsigned __int8 *)v10) {
                goto LABEL_59;
              }
              uint64_t v54 = v39;
              if (HIDWORD(v53) != -1)
              {
                while (1)
                {
                  uint64_t v57 = *(void *)(v10 + v54 - 8);
                  if (v53 == v57)
                  {
                    if (HIDWORD(v57) != -1 && HIDWORD(v53) >= HIDWORD(v57))
                    {
                      uint64_t v46 = v47;
                      goto LABEL_59;
                    }
                  }
                  else if (v53 >= v57)
                  {
                    uint64_t v46 = (void *)(v10 + v54);
                    goto LABEL_59;
                  }
                  v47 -= 8;
                  *(void *)(v10 + v54) = v57;
                  v54 -= 8;
                  if (!v54)
                  {
LABEL_58:
                    uint64_t v46 = (void *)v10;
                    goto LABEL_59;
                  }
                }
              }
              uint64_t v55 = v39;
              while (1)
              {
                uint64_t v46 = (void *)(v10 + v55);
                uint64_t v56 = *(void *)(v10 + v55 - 8);
                if (v53 >= v56) {
                  break;
                }
                void *v46 = v56;
                v55 -= 8;
                if (!v55) {
                  goto LABEL_58;
                }
              }
LABEL_59:
              void *v46 = v53;
            }
          }
          long long v36 = v40 + 8;
          v39 += 8;
          if (v40 + 8 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v38) {
        return result;
      }
      while (2)
      {
        uint64_t v59 = *(void *)v10;
        unsigned int v60 = *(void *)v10;
        unsigned int v61 = *v36;
        BOOL v62 = v61 >= v60;
        if (v61 == v60)
        {
          unsigned int v63 = *(_DWORD *)(v10 + 12);
          if (v63 != -1)
          {
            BOOL v62 = HIDWORD(v59) != -1 && v63 >= HIDWORD(v59);
            goto LABEL_94;
          }
        }
        else
        {
LABEL_94:
          if (!v62)
          {
            uint64_t v64 = *(void *)v36;
            unsigned int v65 = *(void *)v36;
            uint64_t v66 = HIDWORD(*(void *)v36);
            if (v66 == -1)
            {
              *(void *)long long v36 = v59;
              uint64_t v73 = *(void *)(v10 - 8);
              unsigned int v74 = v73;
              char v68 = (void *)v10;
              if (v65 != v73)
              {
                char v68 = (void *)v10;
                do
                {
                  if (v74 <= v65) {
                    break;
                  }
                  *char v68 = v73;
                  uint64_t v73 = *(v68 - 2);
                  unsigned int v74 = v73;
                  --v68;
                }
                while (v65 != v73);
              }
            }
            else
            {
              uint64_t v67 = (void *)v10;
              do
              {
                while (1)
                {
                  char v68 = v67;
                  uint64_t v69 = v59;
                  uint64_t v70 = *--v67;
                  uint64_t v59 = v70;
                  v67[2] = v69;
                  unsigned int v71 = v70;
                  if (v65 == v70) {
                    break;
                  }
                  if (v65 >= v71) {
                    goto LABEL_87;
                  }
                }
              }
              while (HIDWORD(v59) == -1 || v66 < HIDWORD(v59));
            }
LABEL_87:
            *char v68 = v64;
          }
        }
        v36 += 8;
        v10 += 8;
        if (v36 == a2) {
          return result;
        }
        continue;
      }
    }
    uint64_t v16 = v13;
    if (v13 == 1) {
      break;
    }
    unint64_t v17 = v15 >> 1;
    uint64_t v18 = (uint64_t *)(v10 + 8 * (v15 >> 1));
    if ((unint64_t)v14 < 0x401)
    {
      sub_308170(v18, (unsigned __int8 *)v10, v11);
      if (a5) {
        goto LABEL_17;
      }
    }
    else
    {
      sub_308170((uint64_t *)v10, (unsigned __int8 *)v18, v11);
      uint64_t v19 = a5;
      long long v20 = v11;
      long long v21 = (uint64_t *)(v10 + 8 * v17);
      sub_308170((uint64_t *)(v10 + 8), (unsigned __int8 *)v21 - 8, v76);
      sub_308170((uint64_t *)(v10 + 16), (unsigned __int8 *)(v10 + 8 + 8 * v17), v75);
      sub_308170(v21 - 1, (unsigned __int8 *)v18, (unsigned __int8 *)(v10 + 8 + 8 * v17));
      uint64_t v22 = *(void *)v10;
      *(void *)uint64_t v10 = *v21;
      *long long v21 = v22;
      long long v11 = v20;
      a5 = v19;
      a2 = v77;
      if (a5) {
        goto LABEL_17;
      }
    }
    unsigned int v23 = *(void *)v10;
    unsigned int v24 = *(unsigned __int8 *)(v10 - 8);
    BOOL v25 = v24 >= v23;
    if (v24 == v23)
    {
      unsigned int v26 = *(_DWORD *)(v10 - 4);
      if (v26 == -1) {
        goto LABEL_21;
      }
      uint64_t v27 = HIDWORD(*(void *)v10);
      if (v27 == -1) {
        goto LABEL_17;
      }
      BOOL v25 = v26 >= v27;
    }
    if (v25)
    {
LABEL_21:
      uint64_t result = (uint64_t)sub_3082DC((unsigned __int8 *)v10, a2);
      uint64_t v12 = result;
      goto LABEL_22;
    }
LABEL_17:
    long long v28 = sub_3084F4((unsigned __int8 *)v10, (unint64_t)a2);
    if ((v29 & 1) == 0) {
      goto LABEL_20;
    }
    BOOL v30 = sub_3086F0(v10, v28);
    uint64_t v12 = (uint64_t)(v28 + 8);
    uint64_t result = sub_3086F0((uint64_t)(v28 + 8), a2);
    if (result)
    {
      a4 = -v16;
      a2 = v28;
      if (v30) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v30)
    {
LABEL_20:
      uint64_t result = sub_307BB4(v10, v28, a3, -v16, a5 & 1);
      uint64_t v12 = (uint64_t)(v28 + 8);
LABEL_22:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
  }
  if ((unsigned __int8 *)v10 != a2)
  {
    unint64_t v41 = (v15 - 2) >> 1;
    unint64_t v42 = v41 + 1;
    uint64_t v43 = (uint64_t *)(v10 + 8 * v41);
    do
    {
      sub_308C00(v10, a3, v14 >> 3, v43--);
      --v42;
    }
    while (v42);
    unint64_t v44 = (unint64_t)v14 >> 3;
    do
    {
      uint64_t result = (uint64_t)sub_308DF8((unsigned __int8 *)v10, (uint64_t)a2, a3, v44);
      a2 -= 8;
    }
    while (v44-- > 2);
  }
  return result;
}

uint64_t sub_308170(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *a1;
  unsigned int v4 = *a1;
  unsigned int v5 = *a2;
  if (v5 == v4)
  {
    unsigned int v6 = *((_DWORD *)a2 + 1);
    if (v6 != -1 && (HIDWORD(v3) == -1 || v6 < HIDWORD(v3)))
    {
LABEL_17:
      uint64_t v14 = *(void *)a2;
      unsigned int v15 = *(void *)a2;
      unsigned int v16 = *a3;
      if (v16 == v15)
      {
        unsigned int v17 = *((_DWORD *)a3 + 1);
        if (v17 != -1 && (HIDWORD(v14) == -1 || v17 < HIDWORD(v14))) {
          goto LABEL_36;
        }
      }
      else if (v16 < v15)
      {
LABEL_36:
        *a1 = *(void *)a3;
        *(void *)a3 = v3;
        return 1;
      }
      *a1 = v14;
      *(void *)a2 = v3;
      unsigned int v19 = *a3;
      if (v19 == v4)
      {
        unsigned int v20 = *((_DWORD *)a3 + 1);
        if (v20 != -1 && (HIDWORD(v3) == -1 || v20 < HIDWORD(v3))) {
          goto LABEL_38;
        }
      }
      else if (v19 < v4)
      {
LABEL_38:
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v3;
        return 2;
      }
      return 1;
    }
  }
  else if (v5 < v4)
  {
    goto LABEL_17;
  }
  uint64_t v8 = *(void *)a2;
  unsigned int v9 = *(void *)a2;
  unsigned int v10 = *a3;
  if (v10 != v9)
  {
    if (v10 < v9) {
      goto LABEL_30;
    }
    return 0;
  }
  unsigned int v11 = *((_DWORD *)a3 + 1);
  if (v11 == -1) {
    return 0;
  }
  if (HIDWORD(v8) != -1 && v11 >= HIDWORD(v8)) {
    return 0;
  }
LABEL_30:
  *(void *)a2 = *(void *)a3;
  *(void *)a3 = v8;
  uint64_t v21 = *a1;
  unsigned int v22 = *a1;
  unsigned int v23 = *a2;
  if (v23 == v22)
  {
    unsigned int v24 = *((_DWORD *)a2 + 1);
    if (v24 != -1 && (HIDWORD(v21) == -1 || v24 < HIDWORD(v21))) {
      goto LABEL_40;
    }
  }
  else if (v23 < v22)
  {
LABEL_40:
    *a1 = *(void *)a2;
    *(void *)a2 = v21;
    return 2;
  }
  return 1;
}

unsigned __int8 *sub_3082DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)a1;
  unsigned int v3 = *(void *)a1;
  uint64_t v4 = HIDWORD(*(void *)a1);
  unsigned int v5 = a2 - 8;
  unint64_t v6 = *((void *)a2 - 1);
  unsigned int v7 = v6;
  if (v3 == v6)
  {
    if (v4 == -1)
    {
      uint64_t i = a1 + 8;
      if (a1 + 8 >= a2) {
        goto LABEL_50;
      }
      goto LABEL_32;
    }
    if (HIDWORD(v6) == -1 || v4 < HIDWORD(v6)) {
      goto LABEL_11;
    }
  }
  else if (v3 < v6)
  {
    if (v4 != -1)
    {
LABEL_11:
      for (uint64_t i = a1 + 8; ; i += 8)
      {
        unsigned int v10 = *(void *)i;
        if (v3 == v10)
        {
          uint64_t v11 = HIDWORD(*(void *)i);
          if (v11 == -1 || v4 < v11) {
            goto LABEL_37;
          }
        }
        else if (v3 < v10)
        {
          goto LABEL_37;
        }
      }
    }
    uint64_t i = a1;
    do
    {
      unsigned int v16 = i[8];
      i += 8;
    }
    while (v3 >= v16);
    goto LABEL_37;
  }
  uint64_t i = a1 + 8;
  if (a1 + 8 >= a2) {
    goto LABEL_37;
  }
  if (v4 != -1)
  {
    while (1)
    {
      unsigned int v13 = *(void *)i;
      if (v3 == v13)
      {
        uint64_t v14 = HIDWORD(*(void *)i);
        if (v14 == -1 || v4 < v14) {
          goto LABEL_37;
        }
      }
      else if (v3 < v13)
      {
        goto LABEL_37;
      }
      i += 8;
      if (i >= a2) {
        goto LABEL_37;
      }
    }
  }
  do
  {
LABEL_32:
    if (v3 < *i) {
      break;
    }
    i += 8;
  }
  while (i < a2);
LABEL_37:
  if (i < a2)
  {
    if (v4 != -1)
    {
      while (1)
      {
        if (v3 == v6)
        {
          unint64_t v18 = HIDWORD(v6);
          if (v18 != -1 && v4 >= v18) {
            goto LABEL_49;
          }
        }
        else if (v3 >= v6)
        {
          goto LABEL_49;
        }
        unint64_t v17 = *((void *)v5 - 1);
        v5 -= 8;
        unint64_t v6 = v17;
      }
    }
    while (v3 != v7 && v7 > v3)
    {
      unsigned int v19 = *(v5 - 8);
      v5 -= 8;
      unsigned int v7 = v19;
    }
LABEL_49:
    a2 = v5;
  }
LABEL_50:
  if (i < a2)
  {
    uint64_t v20 = *(void *)i;
    uint64_t v21 = *(void *)a2;
    do
    {
      *(void *)uint64_t i = v21;
      *(void *)a2 = v20;
      if (v4 == -1)
      {
        do
        {
          uint64_t v22 = *((void *)i + 1);
          i += 8;
          uint64_t v20 = v22;
        }
        while (v3 >= v22);
      }
      else
      {
        do
        {
          while (1)
          {
            uint64_t v23 = *((void *)i + 1);
            i += 8;
            uint64_t v20 = v23;
            unsigned int v24 = v23;
            if (v3 == v23) {
              break;
            }
            if (v3 < v24) {
              goto LABEL_62;
            }
          }
        }
        while (HIDWORD(v20) != -1 && v4 >= HIDWORD(v20));
      }
LABEL_62:
      if (v4 == -1)
      {
        do
        {
          uint64_t v26 = *((void *)a2 - 1);
          a2 -= 8;
          uint64_t v21 = v26;
        }
        while (v3 < v26);
      }
      else
      {
        do
        {
          while (1)
          {
            uint64_t v27 = *((void *)a2 - 1);
            a2 -= 8;
            uint64_t v21 = v27;
            unsigned int v28 = v27;
            if (v3 == v27) {
              break;
            }
            if (v3 >= v28) {
              goto LABEL_52;
            }
          }
        }
        while (HIDWORD(v21) == -1 || v4 < HIDWORD(v21));
      }
LABEL_52:
      ;
    }
    while (i < a2);
  }
  if (i - 8 != a1) {
    *(void *)a1 = *((void *)i - 1);
  }
  *((void *)i - 1) = v2;
  return i;
}

unsigned __int8 *sub_3084F4(unsigned __int8 *a1, unint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  unsigned int v3 = *(void *)a1;
  uint64_t v4 = HIDWORD(*(void *)a1);
  unsigned int v5 = a1 + 8;
  if (v4 == -1)
  {
    while (1)
    {
      unsigned int v7 = *v5;
      if (v7 == v3)
      {
        if (*((_DWORD *)v5 + 1) == -1) {
          goto LABEL_12;
        }
      }
      else if (v7 >= v3)
      {
        goto LABEL_12;
      }
      v5 += 8;
    }
  }
  while (1)
  {
    unsigned int v6 = *v5;
    if (v6 != v3) {
      break;
    }
    if (*((_DWORD *)v5 + 1) >= v4) {
      goto LABEL_12;
    }
LABEL_4:
    v5 += 8;
  }
  if (v6 < v3) {
    goto LABEL_4;
  }
LABEL_12:
  if (v5 - 8 == a1)
  {
    if ((unint64_t)v5 < a2)
    {
      if (v4 == -1)
      {
        do
        {
          while (1)
          {
            unsigned int v16 = *(unsigned __int8 *)(a2 - 8);
            a2 -= 8;
            BOOL v17 = v16 >= v3;
            if (v16 == v3) {
              break;
            }
            if (!v17 || (unint64_t)v5 >= a2) {
              goto LABEL_43;
            }
          }
        }
        while (*(_DWORD *)(a2 + 4) == -1 && (unint64_t)v5 < a2);
      }
      else
      {
        do
        {
          unsigned int v13 = *(unsigned __int8 *)(a2 - 8);
          a2 -= 8;
          BOOL v14 = v13 >= v3;
          if (v13 == v3) {
            BOOL v14 = *(_DWORD *)(a2 + 4) >= v4;
          }
        }
        while (v14 && (unint64_t)v5 < a2);
      }
    }
  }
  else if (v4 == -1)
  {
    do
    {
      while (1)
      {
        unsigned int v10 = *(unsigned __int8 *)(a2 - 8);
        a2 -= 8;
        BOOL v11 = v10 >= v3;
        if (v10 != v3) {
          break;
        }
        if (*(_DWORD *)(a2 + 4) != -1) {
          goto LABEL_43;
        }
      }
    }
    while (v11);
  }
  else
  {
    do
    {
      while (1)
      {
        unsigned int v8 = *(unsigned __int8 *)(a2 - 8);
        a2 -= 8;
        BOOL v9 = v8 >= v3;
        if (v8 == v3) {
          break;
        }
        if (!v9) {
          goto LABEL_43;
        }
      }
    }
    while (*(_DWORD *)(a2 + 4) >= v4);
  }
LABEL_43:
  unsigned int v19 = v5;
  if ((unint64_t)v5 < a2)
  {
    unsigned int v19 = v5;
    unint64_t v20 = a2;
    do
    {
      uint64_t v21 = *(void *)v19;
      *(void *)unsigned int v19 = *(void *)v20;
      *(void *)unint64_t v20 = v21;
      if (v4 == -1)
      {
        do
        {
          while (1)
          {
            unsigned int v24 = v19[8];
            v19 += 8;
            BOOL v25 = v24 >= v3;
            if (v24 != v3) {
              break;
            }
            if (*((_DWORD *)v19 + 1) == -1) {
              goto LABEL_56;
            }
          }
        }
        while (!v25);
      }
      else
      {
        do
        {
          while (1)
          {
            unsigned int v22 = v19[8];
            v19 += 8;
            BOOL v23 = v22 >= v3;
            if (v22 == v3) {
              break;
            }
            if (v23) {
              goto LABEL_56;
            }
          }
        }
        while (*((_DWORD *)v19 + 1) < v4);
      }
LABEL_56:
      if (v4 == -1)
      {
        do
        {
          while (1)
          {
            unsigned int v28 = *(unsigned __int8 *)(v20 - 8);
            v20 -= 8;
            BOOL v29 = v28 >= v3;
            if (v28 != v3) {
              break;
            }
            if (*(_DWORD *)(v20 + 4) != -1) {
              goto LABEL_45;
            }
          }
        }
        while (v29);
      }
      else
      {
        do
        {
          while (1)
          {
            unsigned int v26 = *(unsigned __int8 *)(v20 - 8);
            v20 -= 8;
            BOOL v27 = v26 >= v3;
            if (v26 == v3) {
              break;
            }
            if (!v27) {
              goto LABEL_45;
            }
          }
        }
        while (*(_DWORD *)(v20 + 4) >= v4);
      }
LABEL_45:
      ;
    }
    while ((unint64_t)v19 < v20);
  }
  BOOL v30 = v19 - 8;
  if (v19 - 8 != a1) {
    *(void *)a1 = *(void *)v30;
  }
  *(void *)BOOL v30 = v2;
  return v19 - 8;
}

BOOL sub_3086F0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = (uint64_t)&a2[-a1] >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v23 = *(void *)a1;
      unsigned int v24 = *(void *)a1;
      unsigned int v25 = *(a2 - 8);
      if (v25 != v24)
      {
        if (v25 >= v24) {
          return result;
        }
        goto LABEL_43;
      }
      unsigned int v26 = *((_DWORD *)a2 - 1);
      if (v26 != -1 && (HIDWORD(v23) == -1 || v26 < HIDWORD(v23)))
      {
LABEL_43:
        *(void *)a1 = *((void *)a2 - 1);
        *((void *)a2 - 1) = v23;
      }
      return result;
    case 3:
      sub_308170((uint64_t *)a1, (unsigned __int8 *)(a1 + 8), a2 - 8);
      return 1;
    case 4:
      sub_308990((uint64_t *)a1, (unsigned __int8 *)(a1 + 8), (unsigned __int8 *)(a1 + 16), a2 - 8);
      return 1;
    case 5:
      sub_308AA0((uint64_t *)a1, (unsigned __int8 *)(a1 + 8), (unsigned __int8 *)(a1 + 16), (unsigned __int8 *)(a1 + 24), a2 - 8);
      return 1;
    default:
      unsigned int v6 = (unsigned __int8 *)(a1 + 16);
      sub_308170((uint64_t *)a1, (unsigned __int8 *)(a1 + 8), (unsigned __int8 *)(a1 + 16));
      unsigned int v7 = (unsigned __int8 *)(a1 + 24);
      if ((unsigned __int8 *)(a1 + 24) == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      while (2)
      {
        uint64_t v11 = *(void *)v6;
        unsigned int v12 = *(void *)v6;
        unsigned int v13 = *v7;
        BOOL v14 = v13 >= v12;
        if (v13 != v12) {
          goto LABEL_13;
        }
        unsigned int v15 = *((_DWORD *)v7 + 1);
        if (v15 == -1) {
          goto LABEL_7;
        }
        BOOL v14 = HIDWORD(v11) != -1 && v15 >= HIDWORD(v11);
LABEL_13:
        if (v14) {
          goto LABEL_7;
        }
        uint64_t v16 = *(void *)v7;
        *(void *)unsigned int v7 = v11;
        unsigned int v10 = (unsigned __int8 *)a1;
        if (v6 == (unsigned __int8 *)a1) {
          goto LABEL_6;
        }
        uint64_t v17 = v8;
        if (HIDWORD(v16) != -1)
        {
          while (1)
          {
            uint64_t v22 = *(void *)(a1 + v17 + 8);
            if (v16 == v22)
            {
              if (HIDWORD(v22) != -1 && HIDWORD(v16) >= HIDWORD(v22))
              {
                unsigned int v10 = (unsigned __int8 *)(a1 + v17 + 16);
                goto LABEL_6;
              }
            }
            else if (v16 >= v22)
            {
              unsigned int v10 = v6;
              goto LABEL_6;
            }
            v6 -= 8;
            *(void *)(a1 + v17 + 16) = v22;
            v17 -= 8;
            if (v17 == -16)
            {
LABEL_5:
              unsigned int v10 = (unsigned __int8 *)a1;
              goto LABEL_6;
            }
          }
        }
        uint64_t v18 = v8;
        while (1)
        {
          uint64_t v19 = a1 + v18;
          uint64_t v20 = *(void *)(a1 + v18 + 8);
          if (v16 >= v20) {
            break;
          }
          *(void *)(v19 + 16) = v20;
          v18 -= 8;
          if (v18 == -16) {
            goto LABEL_5;
          }
        }
        unsigned int v10 = (unsigned __int8 *)(v19 + 16);
LABEL_6:
        *(void *)unsigned int v10 = v16;
        if (++v9 != 8)
        {
LABEL_7:
          unsigned int v6 = v7;
          v8 += 8;
          v7 += 8;
          if (v7 == a2) {
            return 1;
          }
          continue;
        }
        return v7 + 8 == a2;
      }
  }
}

uint64_t sub_308990(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t result = sub_308170(a1, a2, a3);
  uint64_t v9 = *(void *)a3;
  unsigned int v10 = *(void *)a3;
  unsigned int v11 = *a4;
  if (v11 == v10)
  {
    unsigned int v12 = *((_DWORD *)a4 + 1);
    if (v12 == -1) {
      return result;
    }
    if (HIDWORD(v9) != -1 && v12 >= HIDWORD(v9)) {
      return result;
    }
  }
  else if (v11 >= v10)
  {
    return result;
  }
  *(void *)a3 = *(void *)a4;
  *(void *)a4 = v9;
  uint64_t v14 = *(void *)a2;
  unsigned int v15 = *(void *)a2;
  unsigned int v16 = *a3;
  BOOL v17 = v16 >= v15;
  if (v16 != v15) {
    goto LABEL_14;
  }
  unsigned int v18 = *((_DWORD *)a3 + 1);
  if (v18 == -1) {
    return result;
  }
  if (HIDWORD(v14) != -1)
  {
    BOOL v17 = v18 >= HIDWORD(v14);
LABEL_14:
    if (v17) {
      return result;
    }
  }
  *(void *)a2 = *(void *)a3;
  *(void *)a3 = v14;
  uint64_t v19 = *a1;
  unsigned int v20 = *a1;
  unsigned int v21 = *a2;
  BOOL v22 = v21 >= v20;
  if (v21 == v20)
  {
    unsigned int v23 = *((_DWORD *)a2 + 1);
    if (v23 == -1) {
      return result;
    }
    if (HIDWORD(v19) == -1)
    {
LABEL_22:
      *a1 = *(void *)a2;
      *(void *)a2 = v19;
      return result;
    }
    BOOL v22 = v23 >= HIDWORD(v19);
  }
  if (!v22) {
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_308AA0(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t result = sub_308990(a1, a2, a3, a4);
  uint64_t v11 = *(void *)a4;
  unsigned int v12 = *(void *)a4;
  unsigned int v13 = *a5;
  if (v13 == v12)
  {
    unsigned int v14 = *((_DWORD *)a5 + 1);
    if (v14 == -1) {
      return result;
    }
    if (HIDWORD(v11) != -1 && v14 >= HIDWORD(v11)) {
      return result;
    }
  }
  else if (v13 >= v12)
  {
    return result;
  }
  *(void *)a4 = *(void *)a5;
  *(void *)a5 = v11;
  uint64_t v16 = *(void *)a3;
  unsigned int v17 = *(void *)a3;
  unsigned int v18 = *a4;
  BOOL v19 = v18 >= v17;
  if (v18 == v17)
  {
    unsigned int v20 = *((_DWORD *)a4 + 1);
    if (v20 == -1) {
      return result;
    }
    if (HIDWORD(v16) == -1) {
      goto LABEL_15;
    }
    BOOL v19 = v20 >= HIDWORD(v16);
  }
  if (v19) {
    return result;
  }
LABEL_15:
  *(void *)a3 = *(void *)a4;
  *(void *)a4 = v16;
  uint64_t v21 = *(void *)a2;
  unsigned int v22 = *(void *)a2;
  unsigned int v23 = *a3;
  BOOL v24 = v23 >= v22;
  if (v23 != v22) {
    goto LABEL_19;
  }
  unsigned int v25 = *((_DWORD *)a3 + 1);
  if (v25 == -1) {
    return result;
  }
  if (HIDWORD(v21) != -1)
  {
    BOOL v24 = v25 >= HIDWORD(v21);
LABEL_19:
    if (v24) {
      return result;
    }
  }
  *(void *)a2 = *(void *)a3;
  *(void *)a3 = v21;
  uint64_t v26 = *a1;
  unsigned int v27 = *a1;
  unsigned int v28 = *a2;
  BOOL v29 = v28 >= v27;
  if (v28 == v27)
  {
    unsigned int v30 = *((_DWORD *)a2 + 1);
    if (v30 == -1) {
      return result;
    }
    if (HIDWORD(v26) == -1)
    {
LABEL_27:
      *a1 = *(void *)a2;
      *(void *)a2 = v26;
      return result;
    }
    BOOL v29 = v30 >= HIDWORD(v26);
  }
  if (!v29) {
    goto LABEL_27;
  }
  return result;
}

uint64_t sub_308C00(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 < 2) {
    return result;
  }
  uint64_t v4 = (uint64_t)a4 - result;
  int64_t v5 = (unint64_t)(a3 - 2) >> 1;
  if (v5 < ((uint64_t)a4 - result) >> 3) {
    return result;
  }
  uint64_t v6 = v4 >> 2;
  uint64_t v7 = (v4 >> 2) + 1;
  uint64_t v8 = (unsigned __int8 *)(result + 8 * v7);
  uint64_t v9 = v6 + 2;
  if (v9 < a3)
  {
    unsigned int v10 = *((void *)v8 + 1);
    unsigned int v11 = *v8;
    BOOL v12 = v11 >= v10;
    if (v11 == v10)
    {
      unsigned int v13 = *(_DWORD *)(result + 8 * v7 + 4);
      if (v13 == -1) {
        goto LABEL_11;
      }
      uint64_t v14 = HIDWORD(*((void *)v8 + 1));
      BOOL v12 = v14 != -1 && v13 >= v14;
    }
    if (!v12)
    {
      v8 += 8;
      uint64_t v7 = v9;
    }
  }
LABEL_11:
  uint64_t v15 = *a4;
  unsigned int v16 = *a4;
  unsigned int v17 = *v8;
  BOOL v18 = v17 >= v16;
  if (v17 == v16)
  {
    unsigned int v19 = *((_DWORD *)v8 + 1);
    if (v19 == -1) {
      goto LABEL_17;
    }
    if (HIDWORD(v15) == -1) {
      return result;
    }
    BOOL v18 = v19 >= HIDWORD(v15);
  }
  if (!v18) {
    return result;
  }
LABEL_17:
  *a4 = *(void *)v8;
  if (v5 >= v7)
  {
    if (HIDWORD(v15) == -1)
    {
      while (1)
      {
        uint64_t v29 = 2 * v7;
        uint64_t v7 = (2 * v7) | 1;
        unsigned int v20 = (unsigned __int8 *)(result + 8 * v7);
        uint64_t v30 = v29 + 2;
        if (v30 >= a3) {
          goto LABEL_46;
        }
        unsigned int v31 = *((void *)v20 + 1);
        unsigned int v32 = *v20;
        BOOL v33 = v32 >= v31;
        if (v32 == v31)
        {
          unsigned int v34 = *(_DWORD *)(result + 8 * v7 + 4);
          if (v34 == -1) {
            goto LABEL_46;
          }
          uint64_t v35 = HIDWORD(*((void *)v20 + 1));
          BOOL v33 = v35 != -1 && v34 >= v35;
        }
        if (!v33)
        {
          v20 += 8;
          uint64_t v7 = v30;
        }
LABEL_46:
        unsigned int v36 = *v20;
        if (v36 == v16)
        {
          if (*((_DWORD *)v20 + 1) != -1) {
            goto LABEL_18;
          }
        }
        else if (v36 < v16)
        {
          goto LABEL_18;
        }
        *(void *)uint64_t v8 = *(void *)v20;
        uint64_t v8 = v20;
        if (v5 < v7) {
          goto LABEL_19;
        }
      }
    }
    while (1)
    {
      uint64_t v21 = 2 * v7;
      uint64_t v7 = (2 * v7) | 1;
      unsigned int v20 = (unsigned __int8 *)(result + 8 * v7);
      uint64_t v22 = v21 + 2;
      if (v22 >= a3) {
        goto LABEL_33;
      }
      unsigned int v23 = *((void *)v20 + 1);
      unsigned int v24 = *v20;
      BOOL v25 = v24 >= v23;
      if (v24 == v23)
      {
        unsigned int v26 = *(_DWORD *)(result + 8 * v7 + 4);
        if (v26 == -1) {
          goto LABEL_33;
        }
        uint64_t v27 = HIDWORD(*((void *)v20 + 1));
        BOOL v25 = v27 != -1 && v26 >= v27;
      }
      if (!v25)
      {
        v20 += 8;
        uint64_t v7 = v22;
      }
LABEL_33:
      unsigned int v28 = *v20;
      if (v28 == v16)
      {
        if (*((_DWORD *)v20 + 1) < HIDWORD(v15)) {
          break;
        }
      }
      else if (v28 < v16)
      {
        break;
      }
      *(void *)uint64_t v8 = *(void *)v20;
      uint64_t v8 = v20;
      if (v5 < v7) {
        goto LABEL_19;
      }
    }
  }
LABEL_18:
  unsigned int v20 = v8;
LABEL_19:
  *(void *)unsigned int v20 = v15;
  return result;
}

unsigned __int8 *sub_308DF8(unsigned __int8 *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)result;
    uint64_t v6 = result;
    while (1)
    {
      uint64_t v7 = v6;
      uint64_t v8 = v4 + 1;
      v6 += 8 * v4 + 8;
      uint64_t v9 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v10 = v9 + 2;
      if (v10 < a4)
      {
        unsigned int v11 = *((void *)v6 + 1);
        unsigned int v12 = *v6;
        BOOL v13 = v12 >= v11;
        if (v12 != v11) {
          goto LABEL_10;
        }
        unsigned int v14 = *(_DWORD *)&v7[8 * v8 + 4];
        if (v14 != -1) {
          break;
        }
      }
LABEL_3:
      *(void *)uint64_t v7 = *(void *)v6;
      if (v4 > (uint64_t)((unint64_t)(a4 - 2) >> 1))
      {
        unsigned int v16 = (void *)(a2 - 8);
        if (v6 != (unsigned __int8 *)(a2 - 8))
        {
          *(void *)uint64_t v6 = *v16;
          void *v16 = v5;
          uint64_t v17 = v6 - result + 8;
          if (v17 < 9) {
            return result;
          }
          unint64_t v18 = ((unint64_t)v17 >> 3) - 2;
          unint64_t v19 = v18 >> 1;
          unsigned int v20 = &result[8 * (v18 >> 1)];
          uint64_t v5 = *(void *)v6;
          unsigned int v21 = *(void *)v6;
          unsigned int v22 = *v20;
          if (v22 == v21)
          {
            unsigned int v23 = *((_DWORD *)v20 + 1);
            if (v23 == -1 || HIDWORD(v5) != -1 && v23 >= HIDWORD(v5)) {
              return result;
            }
          }
          else if (v22 >= v21)
          {
            return result;
          }
          *(void *)uint64_t v6 = *(void *)v20;
          if (v18 >= 2)
          {
            if (HIDWORD(v5) == -1)
            {
              while (1)
              {
                unint64_t v26 = v19 - 1;
                unint64_t v19 = (v19 - 1) >> 1;
                uint64_t v6 = &result[8 * v19];
                unsigned int v27 = *v6;
                if (v27 == v21)
                {
                  if (*((_DWORD *)v6 + 1) == -1)
                  {
                    *(void *)unsigned int v20 = v5;
                    return result;
                  }
                }
                else if (v27 >= v21)
                {
                  goto LABEL_29;
                }
                *(void *)unsigned int v20 = *(void *)v6;
                unsigned int v20 = &result[8 * v19];
                if (v26 < 2) {
                  goto LABEL_22;
                }
              }
            }
            do
            {
              unint64_t v24 = v19 - 1;
              unint64_t v19 = (v19 - 1) >> 1;
              uint64_t v6 = &result[8 * v19];
              unsigned int v25 = *v6;
              if (v25 == v21)
              {
                if (*((_DWORD *)v6 + 1) >= HIDWORD(v5))
                {
LABEL_29:
                  *(void *)unsigned int v20 = v5;
                  return result;
                }
              }
              else if (v25 >= v21)
              {
                goto LABEL_29;
              }
              *(void *)unsigned int v20 = *(void *)v6;
              unsigned int v20 = &result[8 * v19];
            }
            while (v24 > 1);
          }
          else
          {
            uint64_t v6 = &result[8 * (v18 >> 1)];
          }
        }
LABEL_22:
        *(void *)uint64_t v6 = v5;
        return result;
      }
    }
    uint64_t v15 = HIDWORD(*((void *)v6 + 1));
    BOOL v13 = v15 != -1 && v14 >= v15;
LABEL_10:
    if (!v13)
    {
      v6 += 8;
      uint64_t v4 = v10;
    }
    goto LABEL_3;
  }
  return result;
}

void sub_308FB8()
{
  unk_255719F = 16641;
  word_2557188 = 65;
  byte_25571B7 = 1;
  byte_25571A1 = 0;
}

uint64_t sub_308FE0(unsigned int a1)
{
  if (a1 < 0x12) {
    return dword_20E2080[a1];
  }
  uint64_t v1 = 3;
  if (!sub_723EC(3u)) {
    return v1;
  }
  sub_6BAC((uint64_t)v5);
  sub_188FC78(v5, (uint64_t)"Unknown incident type encountered: ", 35);
  std::ostream::operator<<();
  std::stringbuf::str();
  sub_7246C((uint64_t *)&__p, 3u);
  if (v4 < 0) {
    operator delete(__p);
  }
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return 3;
}

void sub_309180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_3091CC(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = 3;
  switch(v1)
  {
    case 0:
      uint64_t result = 1;
      break;
    case 2:
      return result;
    case 5:
      uint64_t result = 6;
      break;
    case 11:
      uint64_t result = 12;
      break;
    case 13:
      uint64_t result = 14;
      break;
    case 14:
      uint64_t result = 15;
      break;
    case 17:
      uint64_t result = 18;
      break;
    case 22:
      uint64_t result = 23;
      break;
    case 78:
      uint64_t result = 79;
      break;
    default:
      uint64_t result = 64;
      break;
  }
  return result;
}

uint64_t sub_309380(unsigned int a1)
{
  unsigned __int8 v1 = a1;
  if (a1 >= 5)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v5);
      sub_188FC78(v5, (uint64_t)"Unknown navigation alert type encountered ", 42);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v4 < 0) {
        operator delete(__p);
      }
      if (v6 < 0) {
        operator delete((void *)v5[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return 0;
  }
  return v1;
}

void sub_3094F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_309544(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >= 0x14)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v5);
      sub_188FC78(v5, (uint64_t)"Unknown area event icon encountered: ", 37);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v4 < 0) {
        operator delete(__p);
      }
      if (v6 < 0) {
        operator delete((void *)v5[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return 0;
  }
  return v1;
}

void sub_3096BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_309708(unsigned int a1)
{
  if (a1 < 6) {
    return (a1 + 1);
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v4);
    sub_188FC78(v4, (uint64_t)"Unknown area event RouteScenario encountered: ", 46);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v3 < 0) {
      operator delete(__p);
    }
    if (v5 < 0) {
      operator delete((void *)v4[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return 0;
}

void sub_30989C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_3098E8(unsigned int a1)
{
  if (a1 < 0xA) {
    return byte_20E20C8[a1];
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v4);
    sub_188FC78(v4, (uint64_t)"Unknown LaneType encountered: ", 30);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v3 < 0) {
      operator delete(__p);
    }
    if (v5 < 0) {
      operator delete((void *)v4[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return 7;
}

void sub_309A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_309AC8(unsigned int a1)
{
  if (a1 < 8 && ((0xBFu >> a1) & 1) != 0) {
    return (0x700050403020100uLL >> (8 * a1));
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v4);
    sub_188FC78(v4, (uint64_t)"Unknown RouteRestrictionType ", 29);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v3 < 0) {
      operator delete(__p);
    }
    if (v5 < 0) {
      operator delete((void *)v4[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return 0;
}

void sub_309C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_309CC8(unsigned int a1)
{
  unsigned __int8 v1 = a1;
  if (a1 >= 4)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v5);
      sub_188FC78(v5, (uint64_t)"Unknown RouteRestrictionOption ", 31);
      std::ostream::operator<<();
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v4 < 0) {
        operator delete(__p);
      }
      if (v6 < 0) {
        operator delete((void *)v5[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return 0;
  }
  return v1;
}

void sub_309E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_309E8C@<W0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  char v3 = &a1[1][(void)*a1];
  v22[0] = *a1;
  v22[1] = v3;
  uint64_t v23 = 0x2C700000000;
  char v4 = (void **)(a2 + 24);
  while (1)
  {
    BOOL result = sub_2F333C((uint64_t)v22);
    if (!result) {
      return result;
    }
    if (v23 == 1)
    {
      unsigned int v11 = sub_2F3488(v22);
      size_t v13 = v12;
      if (v12 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      unsigned int v14 = v11;
      if (v12 >= 0x17)
      {
        uint64_t v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v18 = v12 | 7;
        }
        uint64_t v19 = v18 + 1;
        uint64_t v15 = (long long *)operator new(v18 + 1);
        *((void *)&v20 + 1) = v13;
        unint64_t v21 = v19 | 0x8000000000000000;
        *(void *)&long long v20 = v15;
LABEL_24:
        memmove(v15, v14, v13);
        *((unsigned char *)v15 + v13) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
          goto LABEL_15;
        }
        goto LABEL_25;
      }
      HIBYTE(v21) = v12;
      uint64_t v15 = &v20;
      if (v12) {
        goto LABEL_24;
      }
      LOBYTE(v20) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_15;
      }
LABEL_25:
      operator delete(*(void **)a2);
LABEL_15:
      *(_OWORD *)a2 = v20;
      *(void *)(a2 + 16) = v21;
    }
    else if (v23 == 2)
    {
      char v6 = sub_2F3488(v22);
      size_t v8 = v7;
      if (v7 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      uint64_t v9 = v6;
      if (v7 >= 0x17)
      {
        uint64_t v16 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17) {
          uint64_t v16 = v7 | 7;
        }
        uint64_t v17 = v16 + 1;
        uint64_t v10 = (long long *)operator new(v16 + 1);
        *((void *)&v20 + 1) = v8;
        unint64_t v21 = v17 | 0x8000000000000000;
        *(void *)&long long v20 = v10;
LABEL_19:
        memmove(v10, v9, v8);
        *((unsigned char *)v10 + v8) = 0;
        if ((*(char *)(a2 + 47) & 0x80000000) == 0) {
          goto LABEL_10;
        }
        goto LABEL_20;
      }
      HIBYTE(v21) = v7;
      uint64_t v10 = &v20;
      if (v7) {
        goto LABEL_19;
      }
      LOBYTE(v20) = 0;
      if ((*(char *)(a2 + 47) & 0x80000000) == 0) {
        goto LABEL_10;
      }
LABEL_20:
      operator delete(*v4);
LABEL_10:
      *(_OWORD *)char v4 = v20;
      *(void *)(a2 + 40) = v21;
    }
    else
    {
      sub_2F3548((uint64_t)v22);
    }
  }
}

void sub_30A088(_Unwind_Exception *a1)
{
  sub_1B23C(v1);
  _Unwind_Resume(a1);
}

void sub_30A09C(_Unwind_Exception *a1)
{
  sub_1B23C(v1);
  _Unwind_Resume(a1);
}

void sub_30A0B0(_Unwind_Exception *a1)
{
  sub_1B23C(v1);
  _Unwind_Resume(a1);
}

void sub_30A0C4(_Unwind_Exception *a1)
{
  sub_1B23C(v1);
  _Unwind_Resume(a1);
}

void sub_30A0D8(_Unwind_Exception *a1)
{
  sub_1B23C(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_30A0EC(double **a1)
{
  uint64_t v1 = (char *)a1[1] + (void)*a1;
  uint64_t v15 = *a1;
  unint64_t v16 = (unint64_t)v1;
  uint64_t v17 = 0x2C700000000;
  if (sub_2F333C((uint64_t)&v15))
  {
    unsigned int v2 = -1;
    uint64_t v3 = 0xFFFFFFFFLL;
    do
    {
      if (v17 == 2)
      {
        double v9 = *v15++;
        if ((unint64_t)v15 > v16)
        {
          exception = __cxa_allocate_exception(0x40uLL);
          uint64_t v18 = (char *)operator new(0x30uLL);
          long long v19 = xmmword_20E1380;
          strcpy(v18, "Skipping over bytes exceeded message length.");
          unsigned int v14 = (void *)sub_2F404((uint64_t)exception, (long long *)&v18);
        }
        unsigned int v2 = ((v9 + 180.0) / 360.0 * 4294967300.0);
      }
      else if (v17 == 1)
      {
        double v4 = *v15++;
        if ((unint64_t)v15 > v16)
        {
          unsigned int v11 = __cxa_allocate_exception(0x40uLL);
          uint64_t v18 = (char *)operator new(0x30uLL);
          long long v19 = xmmword_20E1380;
          strcpy(v18, "Skipping over bytes exceeded message length.");
          unint64_t v12 = (void *)sub_2F404((uint64_t)v11, (long long *)&v18);
        }
        double v5 = fmax(v4, -85.0511288);
        if (v5 >= 85.0511288) {
          double v6 = 1.48442223;
        }
        else {
          double v6 = v5 * 3.14159265 / 180.0;
        }
        long double v7 = sin(v6);
        unsigned int v8 = ((log((v7 + 1.0) / (1.0 - v7)) / -12.5663706 + 0.5) * 4294967300.0);
        if (v8 >= 0xFFFFFFFE) {
          uint64_t v3 = 4294967294;
        }
        else {
          uint64_t v3 = v8;
        }
      }
      else
      {
        sub_2F3548((uint64_t)&v15);
      }
    }
    while (sub_2F333C((uint64_t)&v15));
  }
  else
  {
    uint64_t v3 = 0xFFFFFFFFLL;
    unsigned int v2 = -1;
  }
  return v2 | (unint64_t)(v3 << 32);
}

void sub_30A364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_30A39C@<W0>(char **a1@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = &a1[1][(void)*a1];
  v64[0] = *a1;
  v64[1] = v3;
  uint64_t v65 = 0x2C700000000;
  BOOL result = sub_2F333C((uint64_t)v64);
  if (result)
  {
    while (v65 != 7)
    {
      sub_2F3548((uint64_t)v64);
      BOOL result = sub_2F333C((uint64_t)v64);
      if (!result) {
        return result;
      }
    }
    *(void *)&long long v62 = sub_2F3488(v64);
    *((void *)&v62 + 1) = v62 + v5;
    uint64_t v63 = 0x2C700000000;
    unint64_t v6 = sub_2F4CE4(&v62, 1);
    unint64_t v7 = v6;
    unsigned int v8 = *a2;
    if (v6 <= (a2[2] - *a2) >> 3) {
      goto LABEL_17;
    }
    if (v6 >> 61) {
      sub_2E00();
    }
    double v9 = a2[1];
    uint64_t v10 = (char *)operator new(8 * v6);
    uint64_t v11 = v9 - v8;
    unint64_t v12 = &v10[(v9 - v8) & 0xFFFFFFFFFFFFFFF8];
    size_t v13 = v12;
    if (v9 == v8) {
      goto LABEL_15;
    }
    if ((unint64_t)(v11 - 8) >= 0x58)
    {
      size_t v13 = &v10[(v9 - v8) & 0xFFFFFFFFFFFFFFF8];
      if (v9 - v10 - (v11 & 0xFFFFFFFFFFFFFFF8) >= 0x20)
      {
        uint64_t v14 = v11 >> 3;
        unint64_t v15 = ((unint64_t)(v11 - 8) >> 3) + 1;
        uint64_t v16 = 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v17 = &v9[-v16];
        size_t v13 = &v12[-v16];
        uint64_t v18 = &v10[8 * v14 - 16];
        long long v19 = (long long *)(v9 - 16);
        uint64_t v20 = v15 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v21 = *v19;
          *((_OWORD *)v18 - 1) = *(v19 - 1);
          *(_OWORD *)uint64_t v18 = v21;
          v18 -= 32;
          v19 -= 2;
          v20 -= 4;
        }
        while (v20);
        double v9 = v17;
        if (v15 == (v15 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_15:
          *a2 = v13;
          a2[1] = v12;
          a2[2] = &v10[8 * v7];
          if (v8) {
            operator delete(v8);
          }
          while (1)
          {
LABEL_17:
            BOOL result = sub_2F333C((uint64_t)&v62);
            if (!result) {
              return result;
            }
            while (v63 != 1)
            {
              switch(HIDWORD(v63))
              {
                case 0:
                  sub_2F3C98((uint64_t *)&v62, *((uint64_t *)&v62 + 1));
                  break;
                case 1:
                  *(void *)&long long v62 = v62 + 8;
                  if ((unint64_t)v62 > *((void *)&v62 + 1))
                  {
                    exception = __cxa_allocate_exception(0x40uLL);
                    sub_5E5C(&v69, "Skipping over bytes exceeded message length.");
                    uint64_t v53 = (void *)sub_2F404((uint64_t)exception, &v69);
                  }
                  return result;
                case 2:
                  unsigned int v23 = sub_2F36C8((char **)&v62, *((char **)&v62 + 1));
                  sub_2F3DCC((unint64_t *)&v62, v23);
                  break;
                case 5:
                  *(void *)&long long v62 = v62 + 4;
                  if ((unint64_t)v62 > *((void *)&v62 + 1))
                  {
                    unsigned int v50 = __cxa_allocate_exception(0x40uLL);
                    sub_5E5C(&v69, "Skipping over bytes exceeded message length.");
                    BOOL v51 = (void *)sub_2F404((uint64_t)v50, &v69);
                  }
                  return result;
                default:
                  uint64_t v54 = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(&v69, "Unknown wire type.");
                  uint64_t v55 = (void *)sub_2F404((uint64_t)v54, &v69);
              }
              BOOL result = sub_2F333C((uint64_t)&v62);
              if (!result) {
                return result;
              }
            }
            uint64_t v66 = sub_2F3488((char **)&v62);
            uint64_t v67 = &v66[v24];
            uint64_t v68 = 0x2C700000000;
            unint64_t v26 = a2[1];
            unint64_t v25 = (unint64_t)a2[2];
            if ((unint64_t)v26 < v25)
            {
              *(void *)unint64_t v26 = 0xFFFFFFFF00000000;
              uint64_t v27 = (uint64_t)(v26 + 8);
              goto LABEL_49;
            }
            unsigned int v28 = *a2;
            uint64_t v29 = v26 - *a2;
            uint64_t v30 = v29 >> 3;
            unint64_t v31 = (v29 >> 3) + 1;
            if (v31 >> 61) {
              sub_2E00();
            }
            uint64_t v32 = v25 - (void)v28;
            if (v32 >> 2 > v31) {
              unint64_t v31 = v32 >> 2;
            }
            unint64_t v33 = (unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v31;
            if (v33) {
              break;
            }
            unsigned int v34 = 0;
            uint64_t v35 = (char *)(8 * v30);
            *(void *)(8 * v30) = 0xFFFFFFFF00000000;
            uint64_t v27 = 8 * v30 + 8;
            if (v26 != v28) {
              goto LABEL_40;
            }
LABEL_47:
            *a2 = v35;
            a2[1] = (char *)v27;
            a2[2] = &v34[8 * v33];
            if (v26) {
              operator delete(v26);
            }
LABEL_49:
            a2[1] = (char *)v27;
            while (sub_2F333C((uint64_t)&v66))
            {
              if (v68 == 13)
              {
                *((_DWORD *)a2[1] - 1) = sub_2F36C8(&v66, v67);
              }
              else if (v68 == 2)
              {
                int v45 = sub_2F39B0(&v66, v67);
                *(a2[1] - 8) = sub_3091CC(v45);
              }
              else
              {
                switch(HIDWORD(v68))
                {
                  case 0:
                    sub_2F3C98((uint64_t *)&v66, (uint64_t)v67);
                    break;
                  case 1:
                    v66 += 8;
                    if (v66 > v67)
                    {
                      unint64_t v58 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(&v69, "Skipping over bytes exceeded message length.");
                      uint64_t v59 = (void *)sub_2F404((uint64_t)v58, &v69);
                    }
                    return result;
                  case 2:
                    unsigned int v46 = sub_2F36C8(&v66, v67);
                    sub_2F3DCC((unint64_t *)&v66, v46);
                    break;
                  case 5:
                    v66 += 4;
                    if (v66 > v67)
                    {
                      unsigned int v60 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(&v69, "Skipping over bytes exceeded message length.");
                      unsigned int v61 = (void *)sub_2F404((uint64_t)v60, &v69);
                    }
                    return result;
                  default:
                    uint64_t v56 = __cxa_allocate_exception(0x40uLL);
                    sub_5E5C(&v69, "Unknown wire type.");
                    uint64_t v57 = (void *)sub_2F404((uint64_t)v56, &v69);
                }
              }
            }
            char v47 = a2[1];
            int v49 = *(v47 - 8);
            uint64_t v48 = v47 - 8;
            if (!v49) {
              a2[1] = v48;
            }
          }
          if (v33 >> 61) {
            sub_188D718();
          }
          unsigned int v34 = operator new(8 * v33);
          uint64_t v35 = &v34[8 * v30];
          *(void *)uint64_t v35 = 0xFFFFFFFF00000000;
          uint64_t v27 = (uint64_t)(v35 + 8);
          if (v26 == v28) {
            goto LABEL_47;
          }
LABEL_40:
          unint64_t v36 = v26 - 8 - v28;
          if (v36 < 0x58) {
            goto LABEL_73;
          }
          if ((unint64_t)(v26 - &v34[v29]) < 0x20) {
            goto LABEL_73;
          }
          uint64_t v37 = (v36 >> 3) + 1;
          uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v39 = &v26[-v38];
          v35 -= v38;
          long long v40 = &v34[8 * v30 - 16];
          unint64_t v41 = (long long *)(v26 - 16);
          uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v43 = *v41;
            *(v40 - 1) = *(v41 - 1);
            *long long v40 = v43;
            v40 -= 2;
            v41 -= 2;
            v42 -= 4;
          }
          while (v42);
          unint64_t v26 = v39;
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_73:
            do
            {
              uint64_t v44 = *((void *)v26 - 1);
              v26 -= 8;
              *((void *)v35 - 1) = v44;
              v35 -= 8;
            }
            while (v26 != v28);
          }
          unint64_t v26 = *a2;
          goto LABEL_47;
        }
      }
    }
    else
    {
      size_t v13 = &v10[(v9 - v8) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v22 = *((void *)v9 - 1);
      v9 -= 8;
      *((void *)v13 - 1) = v22;
      v13 -= 8;
    }
    while (v9 != v8);
    goto LABEL_15;
  }
  return result;
}

void sub_30AA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    unint64_t v25 = *(void **)v23;
    if (!*(void *)v23) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v25 = *(void **)v23;
    if (!*(void *)v23) {
      goto LABEL_3;
    }
  }
  *(void *)(v23 + 8) = v25;
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

BOOL sub_30AADC@<W0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = &a1[1][(void)*a1];
  v37[0] = *a1;
  v37[1] = v3;
  uint64_t v38 = 0x2C700000000;
  BOOL result = sub_2F333C((uint64_t)v37);
  if (result)
  {
    while (v38 != 7)
    {
      sub_2F3548((uint64_t)v37);
      BOOL result = sub_2F333C((uint64_t)v37);
      if (!result) {
        return result;
      }
    }
    unsigned int v34 = sub_2F3488(v37);
    uint64_t v35 = &v34[v5];
    uint64_t v36 = 0x2C700000000;
LABEL_6:
    while (1)
    {
      BOOL result = sub_2F333C((uint64_t)&v34);
      if (!result) {
        break;
      }
      while (v36 != 1)
      {
        switch(HIDWORD(v36))
        {
          case 0:
            sub_2F3C98((uint64_t *)&v34, (uint64_t)v35);
            break;
          case 1:
            v34 += 8;
            if (v34 > v35)
            {
              exception = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(__dst, "Skipping over bytes exceeded message length.");
              uint64_t v23 = (void *)sub_2F404((uint64_t)exception, (long long *)__dst);
            }
            return result;
          case 2:
            unsigned int v6 = sub_2F36C8(&v34, v35);
            sub_2F3DCC((unint64_t *)&v34, v6);
            break;
          case 5:
            v34 += 4;
            if (v34 > v35)
            {
              uint64_t v20 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(__dst, "Skipping over bytes exceeded message length.");
              long long v21 = (void *)sub_2F404((uint64_t)v20, (long long *)__dst);
            }
            return result;
          default:
            uint64_t v24 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(__dst, "Unknown wire type.");
            unint64_t v25 = (void *)sub_2F404((uint64_t)v24, (long long *)__dst);
        }
        BOOL result = sub_2F333C((uint64_t)&v34);
        if (!result) {
          return result;
        }
      }
      uint64_t v39 = sub_2F3488(&v34);
      long long v40 = &v39[v7];
      uint64_t v41 = 0x2C700000000;
      if (sub_2F333C((uint64_t)&v39))
      {
        while (1)
        {
          while (v41 != 14)
          {
            switch(HIDWORD(v41))
            {
              case 0:
                sub_2F3C98((uint64_t *)&v39, (uint64_t)v40);
                break;
              case 1:
                v39 += 8;
                if (v39 > v40)
                {
                  unsigned int v28 = __cxa_allocate_exception(0x40uLL);
                  *(void *)std::string __dst = operator new(0x30uLL);
                  *(_OWORD *)&__dst[8] = xmmword_20E1380;
                  strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                  uint64_t v29 = (void *)sub_2F404((uint64_t)v28, (long long *)__dst);
                }
                return result;
              case 2:
                unsigned int v19 = sub_2F36C8(&v39, v40);
                v39 += v19;
                if (v39 > v40)
                {
                  unint64_t v26 = __cxa_allocate_exception(0x40uLL);
                  *(void *)std::string __dst = operator new(0x30uLL);
                  *(_OWORD *)&__dst[8] = xmmword_20E1380;
                  strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                  uint64_t v27 = (void *)sub_2F404((uint64_t)v26, (long long *)__dst);
                }
                return result;
              case 5:
                v39 += 4;
                if (v39 > v40)
                {
                  uint64_t v32 = __cxa_allocate_exception(0x40uLL);
                  *(void *)std::string __dst = operator new(0x30uLL);
                  *(_OWORD *)&__dst[8] = xmmword_20E1380;
                  strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                  unint64_t v33 = (void *)sub_2F404((uint64_t)v32, (long long *)__dst);
                }
                return result;
              default:
                uint64_t v30 = __cxa_allocate_exception(0x40uLL);
                __dst[23] = 18;
                strcpy(__dst, "Unknown wire type.");
                unint64_t v31 = (void *)sub_2F404((uint64_t)v30, (long long *)__dst);
            }
            if (!sub_2F333C((uint64_t)&v39)) {
              goto LABEL_6;
            }
          }
          unsigned int v8 = sub_2F3488(&v39);
          size_t v10 = v9;
          if (v9 >= 0x7FFFFFFFFFFFFFF8) {
            sub_188D690();
          }
          uint64_t v11 = v8;
          if (v9 >= 0x17)
          {
            uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v9 | 7) != 0x17) {
              uint64_t v15 = v9 | 7;
            }
            uint64_t v16 = v15 + 1;
            unint64_t v12 = operator new(v15 + 1);
            *(void *)&__dst[8] = v10;
            *(void *)&__dst[16] = v16 | 0x8000000000000000;
            *(void *)std::string __dst = v12;
          }
          else
          {
            __dst[23] = v9;
            unint64_t v12 = __dst;
            if (!v9)
            {
              __dst[0] = 0;
              unint64_t v13 = *(void *)(a2 + 8);
              if (v13 >= *(void *)(a2 + 16)) {
                goto LABEL_29;
              }
              goto LABEL_22;
            }
          }
          memmove(v12, v11, v10);
          v12[v10] = 0;
          unint64_t v13 = *(void *)(a2 + 8);
          if (v13 >= *(void *)(a2 + 16))
          {
LABEL_29:
            uint64_t v17 = sub_6E8C4((void **)a2, (uint64_t)__dst);
            int v18 = __dst[23];
            *(void *)(a2 + 8) = v17;
            if (v18 < 0) {
              operator delete(*(void **)__dst);
            }
            goto LABEL_31;
          }
LABEL_22:
          long long v14 = *(_OWORD *)__dst;
          *(void *)(v13 + 16) = *(void *)&__dst[16];
          *(_OWORD *)unint64_t v13 = v14;
          *(void *)(a2 + 8) = v13 + 24;
LABEL_31:
          if (!sub_2F333C((uint64_t)&v39)) {
            goto LABEL_6;
          }
        }
      }
    }
  }
  return result;
}

void sub_30B044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(v24);
    _Unwind_Resume(a1);
  }
  sub_1A668(v24);
  _Unwind_Resume(a1);
}

BOOL sub_30B118@<W0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v3 = &a1[1][(void)*a1];
  v22[0] = *a1;
  v22[1] = v3;
  uint64_t v23 = 0x2C700000000;
  double v4 = (void **)(a2 + 24);
  while (1)
  {
    BOOL result = sub_2F333C((uint64_t)v22);
    if (!result) {
      return result;
    }
    if (v23 == 1)
    {
      uint64_t v11 = sub_2F3488(v22);
      size_t v13 = v12;
      if (v12 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      long long v14 = v11;
      if (v12 >= 0x17)
      {
        uint64_t v18 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v18 = v12 | 7;
        }
        uint64_t v19 = v18 + 1;
        uint64_t v15 = (long long *)operator new(v18 + 1);
        *((void *)&v20 + 1) = v13;
        unint64_t v21 = v19 | 0x8000000000000000;
        *(void *)&long long v20 = v15;
LABEL_24:
        memmove(v15, v14, v13);
        *((unsigned char *)v15 + v13) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
          goto LABEL_15;
        }
        goto LABEL_25;
      }
      HIBYTE(v21) = v12;
      uint64_t v15 = &v20;
      if (v12) {
        goto LABEL_24;
      }
      LOBYTE(v20) = 0;
      if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
        goto LABEL_15;
      }
LABEL_25:
      operator delete(*(void **)a2);
LABEL_15:
      *(_OWORD *)a2 = v20;
      *(void *)(a2 + 16) = v21;
    }
    else if (v23 == 3)
    {
      unsigned int v6 = sub_2F3488(v22);
      size_t v8 = v7;
      if (v7 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      unint64_t v9 = v6;
      if (v7 >= 0x17)
      {
        uint64_t v16 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17) {
          uint64_t v16 = v7 | 7;
        }
        uint64_t v17 = v16 + 1;
        size_t v10 = (long long *)operator new(v16 + 1);
        *((void *)&v20 + 1) = v8;
        unint64_t v21 = v17 | 0x8000000000000000;
        *(void *)&long long v20 = v10;
LABEL_19:
        memmove(v10, v9, v8);
        *((unsigned char *)v10 + v8) = 0;
        if ((*(char *)(a2 + 47) & 0x80000000) == 0) {
          goto LABEL_10;
        }
        goto LABEL_20;
      }
      HIBYTE(v21) = v7;
      size_t v10 = &v20;
      if (v7) {
        goto LABEL_19;
      }
      LOBYTE(v20) = 0;
      if ((*(char *)(a2 + 47) & 0x80000000) == 0) {
        goto LABEL_10;
      }
LABEL_20:
      operator delete(*v4);
LABEL_10:
      *(_OWORD *)double v4 = v20;
      *(void *)(a2 + 40) = v21;
    }
    else
    {
      sub_2F3548((uint64_t)v22);
    }
  }
}

void sub_30B314(_Unwind_Exception *a1)
{
  sub_1B23C(v1);
  _Unwind_Resume(a1);
}

void sub_30B328(_Unwind_Exception *a1)
{
  sub_1B23C(v1);
  _Unwind_Resume(a1);
}

void sub_30B33C(_Unwind_Exception *a1)
{
  sub_1B23C(v1);
  _Unwind_Resume(a1);
}

void sub_30B350(_Unwind_Exception *a1)
{
  sub_1B23C(v1);
  _Unwind_Resume(a1);
}

void sub_30B364(_Unwind_Exception *a1)
{
  sub_1B23C(v1);
  _Unwind_Resume(a1);
}

BOOL sub_30B378@<W0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  uint64_t v3 = &a1[1][(void)*a1];
  v24[0] = *a1;
  v24[1] = v3;
  uint64_t v25 = 0x2C700000000;
  double v4 = (void **)(a2 + 24);
  while (1)
  {
    BOOL result = sub_2F333C((uint64_t)v24);
    if (!result) {
      return result;
    }
    if (v25 == 1)
    {
      uint64_t v18 = sub_2F3488(v24);
      uint64_t v19 = v10;
      sub_30B118(&v18, (uint64_t)v20);
      unint64_t v11 = *(void *)(a2 + 8);
      if (v11 >= *(void *)(a2 + 16))
      {
        uint64_t v16 = sub_1E1D4((void **)a2, (uint64_t)v20);
        int v17 = SHIBYTE(v23);
        *(void *)(a2 + 8) = v16;
        if (v17 < 0) {
LABEL_13:
        }
          operator delete((void *)__p);
      }
      else
      {
        long long v12 = *(_OWORD *)v20;
        *(void *)(v11 + 16) = v21;
        *(_OWORD *)unint64_t v11 = v12;
        v20[1] = 0;
        uint64_t v21 = 0;
        v20[0] = 0;
        uint64_t v13 = v23;
        *(_OWORD *)(v11 + 24) = __p;
        *(void *)(v11 + 40) = v13;
        uint64_t v23 = 0;
        long long __p = 0uLL;
        *(void *)(a2 + 8) = v11 + 48;
      }
LABEL_14:
      if (SHIBYTE(v21) < 0) {
        operator delete(v20[0]);
      }
    }
    else
    {
      if (v25 == 2)
      {
        uint64_t v18 = sub_2F3488(v24);
        uint64_t v19 = v6;
        sub_30B118(&v18, (uint64_t)v20);
        unint64_t v7 = *(void *)(a2 + 32);
        if (v7 >= *(void *)(a2 + 40))
        {
          long long v14 = sub_1E1D4(v4, (uint64_t)v20);
          int v15 = SHIBYTE(v23);
          *(void *)(a2 + 32) = v14;
          if (v15 < 0) {
            goto LABEL_13;
          }
        }
        else
        {
          long long v8 = *(_OWORD *)v20;
          *(void *)(v7 + 16) = v21;
          *(_OWORD *)unint64_t v7 = v8;
          v20[1] = 0;
          uint64_t v21 = 0;
          v20[0] = 0;
          uint64_t v9 = v23;
          *(_OWORD *)(v7 + 24) = __p;
          *(void *)(v7 + 40) = v9;
          uint64_t v23 = 0;
          long long __p = 0uLL;
          *(void *)(a2 + 32) = v7 + 48;
        }
        goto LABEL_14;
      }
      sub_2F3548((uint64_t)v24);
    }
  }
}

void sub_30B514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1B23C((uint64_t)va);
  sub_3033D0(v4);
  _Unwind_Resume(a1);
}

void sub_30B534(_Unwind_Exception *a1)
{
  sub_3033D0(v1);
  _Unwind_Resume(a1);
}

void sub_30B548(_Unwind_Exception *a1)
{
  sub_3033D0(v1);
  _Unwind_Resume(a1);
}

void sub_30B55C(_Unwind_Exception *a1)
{
  sub_3033D0(v1);
  _Unwind_Resume(a1);
}

BOOL sub_30B570@<W0>(char **a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v3 = (void **)(a2 + 8);
  *(unsigned char *)a2 = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  double v4 = (void **)(a2 + 56);
  *(void *)(a2 + 72) = 0;
  uint64_t v5 = &a1[1][(void)*a1];
  uint64_t v32 = *a1;
  unint64_t v33 = v5;
  uint64_t v34 = 0x2C700000000;
  while (1)
  {
    BOOL result = sub_2F333C((uint64_t)&v32);
    if (!result) {
      return result;
    }
    switch((int)v34)
    {
      case 1:
        unsigned int v7 = sub_2F39B0(&v32, v33);
        *(unsigned char *)a2 = sub_309708(v7);
        continue;
      case 2:
        unint64_t v26 = sub_2F3488(&v32);
        uint64_t v27 = v8;
        sub_30B118(&v26, (uint64_t)v28);
        unint64_t v9 = *(void *)(a2 + 16);
        if (v9 < *(void *)(a2 + 24))
        {
          long long v10 = *(_OWORD *)v28;
          *(void *)(v9 + 16) = v29;
          *(_OWORD *)unint64_t v9 = v10;
          v28[1] = 0;
          uint64_t v29 = 0;
          v28[0] = 0;
          uint64_t v11 = v31;
          *(_OWORD *)(v9 + 24) = __p;
          *(void *)(v9 + 40) = v11;
          uint64_t v31 = 0;
          long long __p = 0uLL;
          *(void *)(a2 + 16) = v9 + 48;
          goto LABEL_14;
        }
        long long v20 = sub_1E1D4(v3, (uint64_t)v28);
        int v21 = SHIBYTE(v31);
        *(void *)(a2 + 16) = v20;
        if ((v21 & 0x80000000) == 0) {
          goto LABEL_14;
        }
        goto LABEL_13;
      case 5:
        unint64_t v26 = sub_2F3488(&v32);
        uint64_t v27 = v12;
        sub_30B118(&v26, (uint64_t)v28);
        unint64_t v13 = *(void *)(a2 + 40);
        if (v13 < *(void *)(a2 + 48))
        {
          long long v14 = *(_OWORD *)v28;
          *(void *)(v13 + 16) = v29;
          *(_OWORD *)unint64_t v13 = v14;
          v28[1] = 0;
          uint64_t v29 = 0;
          v28[0] = 0;
          uint64_t v15 = v31;
          *(_OWORD *)(v13 + 24) = __p;
          *(void *)(v13 + 40) = v15;
          uint64_t v31 = 0;
          long long __p = 0uLL;
          *(void *)(a2 + 40) = v13 + 48;
          goto LABEL_14;
        }
        uint64_t v22 = sub_1E1D4((void **)(a2 + 32), (uint64_t)v28);
        int v23 = SHIBYTE(v31);
        *(void *)(a2 + 40) = v22;
        if (v23 < 0) {
          goto LABEL_13;
        }
        goto LABEL_14;
      case 6:
        unint64_t v26 = sub_2F3488(&v32);
        uint64_t v27 = v16;
        sub_30B118(&v26, (uint64_t)v28);
        unint64_t v17 = *(void *)(a2 + 64);
        if (v17 >= *(void *)(a2 + 72))
        {
          uint64_t v24 = sub_1E1D4(v4, (uint64_t)v28);
          int v25 = SHIBYTE(v31);
          *(void *)(a2 + 64) = v24;
          if (v25 < 0) {
LABEL_13:
          }
            operator delete((void *)__p);
        }
        else
        {
          long long v18 = *(_OWORD *)v28;
          *(void *)(v17 + 16) = v29;
          *(_OWORD *)unint64_t v17 = v18;
          v28[1] = 0;
          uint64_t v29 = 0;
          v28[0] = 0;
          uint64_t v19 = v31;
          *(_OWORD *)(v17 + 24) = __p;
          *(void *)(v17 + 40) = v19;
          uint64_t v31 = 0;
          long long __p = 0uLL;
          *(void *)(a2 + 64) = v17 + 48;
        }
LABEL_14:
        if (SHIBYTE(v29) < 0) {
          operator delete(v28[0]);
        }
        break;
      default:
        sub_2F3548((uint64_t)&v32);
        continue;
    }
  }
}

void sub_30B7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1B23C((uint64_t)va);
  sub_3034C4(v4);
  _Unwind_Resume(a1);
}

void sub_30B800(_Unwind_Exception *a1)
{
  sub_3034C4(v1);
  _Unwind_Resume(a1);
}

void sub_30B814(_Unwind_Exception *a1)
{
  sub_3034C4(v1);
  _Unwind_Resume(a1);
}

void sub_30B828(_Unwind_Exception *a1)
{
  sub_3034C4(v1);
  _Unwind_Resume(a1);
}

void sub_30B83C(_Unwind_Exception *a1)
{
  sub_3034C4(v1);
  _Unwind_Resume(a1);
}

void *sub_30B868@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 112) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  uint64_t v4 = a3 + 48;
  *(_OWORD *)(a3 + 120) = xmmword_20E2070;
  *(void *)(a3 + 152) = 0;
  long long v112 = (void **)(a3 + 152);
  *(_OWORD *)(a3 + 136) = xmmword_20B8EA0;
  *(void *)(a3 + 160) = 0;
  *(void *)(a3 + 168) = 0;
  *(unsigned char *)(a3 + 176) = 0;
  uint64_t v5 = *a1 + a1[1];
  *(void *)&long long v129 = *a1;
  *((void *)&v129 + 1) = v5;
  uint64_t v130 = 0x2C700000000;
  unint64_t v6 = sub_2F4CE4(&v129, 3);
  sub_76C8C(v4, v6);
  long long v110 = (_OWORD *)(a3 + 128);
  unsigned int v7 = (void **)(a3 + 24);
  long long v108 = (void **)v4;
  while (sub_2F333C((uint64_t)&v129))
  {
    switch((int)v130)
    {
      case 1:
        if (*(unsigned char *)(a3 + 176) == 2) {
          goto LABEL_155;
        }
        uint64_t v8 = sub_2F3488((char **)&v129);
        size_t v10 = v9;
        if (v9 >= 0x7FFFFFFFFFFFFFF8) {
          sub_188D690();
        }
        uint64_t v11 = v8;
        if (v9 >= 0x17)
        {
          uint64_t v50 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17) {
            uint64_t v50 = v9 | 7;
          }
          uint64_t v51 = v50 + 1;
          p_dst = (char *)operator new(v50 + 1);
          size_t v114 = v10;
          unint64_t v115 = v51 | 0x8000000000000000;
          std::string __dst = p_dst;
        }
        else
        {
          HIBYTE(v115) = v9;
          p_dst = (char *)&__dst;
          if (!v9) {
            goto LABEL_74;
          }
        }
        memmove(p_dst, v11, v10);
LABEL_74:
        p_dst[v10] = 0;
        sub_4B898((uint64_t *)&__dst, v116);
        unsigned int v52 = *(unsigned int ****)a3;
        if (*(void *)a3)
        {
          uint64_t v53 = *(void ***)(a3 + 8);
          uint64_t v54 = *(unsigned int ****)a3;
          if (v53 != (void **)v52)
          {
            uint64_t v55 = *(void ***)(a3 + 8);
            do
            {
              unint64_t v58 = (char *)*(v55 - 3);
              v55 -= 3;
              uint64_t v57 = v58;
              if (v58)
              {
                uint64_t v59 = (char *)*(v53 - 2);
                uint64_t v56 = v57;
                if (v59 != v57)
                {
                  unsigned int v60 = (char *)*(v53 - 2);
                  do
                  {
                    long long v62 = (void *)*((void *)v60 - 3);
                    v60 -= 24;
                    unsigned int v61 = v62;
                    if (v62)
                    {
                      *((void *)v59 - 2) = v61;
                      operator delete(v61);
                    }
                    uint64_t v59 = v60;
                  }
                  while (v60 != v57);
                  uint64_t v56 = *v55;
                }
                *(v53 - 2) = v57;
                operator delete(v56);
              }
              uint64_t v53 = v55;
            }
            while (v55 != (void **)v52);
            uint64_t v54 = *(unsigned int ****)a3;
          }
          *(void *)(a3 + 8) = v52;
          operator delete(v54);
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
        }
        *(_OWORD *)a3 = *(_OWORD *)v116;
        *(void **)(a3 + 16) = __p[0];
        v116[1] = 0;
        __p[0] = 0;
        v116[0] = 0;
        if (SHIBYTE(v115) < 0) {
          operator delete(__dst);
        }
        *(unsigned char *)(a3 + 176) = 1;
        continue;
      case 3:
        std::string __dst = sub_2F3488((char **)&v129);
        size_t v114 = v44;
        sub_30B118(&__dst, (uint64_t)v116);
        unint64_t v45 = *(void *)(a3 + 56);
        if (v45 < *(void *)(a3 + 64))
        {
          long long v46 = *(_OWORD *)v116;
          *(void **)(v45 + 16) = __p[0];
          *(_OWORD *)unint64_t v45 = v46;
          v116[1] = 0;
          __p[0] = 0;
          v116[0] = 0;
          char v47 = __p[3];
          *(_OWORD *)(v45 + 24) = *(_OWORD *)&__p[1];
          *(void *)(v45 + 40) = v47;
          memset(&__p[1], 0, 24);
          *(void *)(a3 + 56) = v45 + 48;
          if ((SHIBYTE(__p[0]) & 0x80000000) == 0) {
            continue;
          }
LABEL_69:
          operator delete(v116[0]);
          continue;
        }
        uint64_t v48 = sub_1E1D4(v108, (uint64_t)v116);
        int v49 = SHIBYTE(__p[3]);
        *(void *)(a3 + 56) = v48;
        if ((v49 & 0x80000000) == 0)
        {
          if ((SHIBYTE(__p[0]) & 0x80000000) == 0) {
            continue;
          }
          goto LABEL_69;
        }
        operator delete(__p[1]);
        if (SHIBYTE(__p[0]) < 0) {
          goto LABEL_69;
        }
        continue;
      case 4:
        std::string __dst = sub_2F3488((char **)&v129);
        size_t v114 = v13;
        sub_30B378(&__dst, (uint64_t)v116);
        sub_301D58((void **)(a3 + 72), (uint64_t)v116);
        long long v14 = (void **)__p[1];
        if (!__p[1]) {
          goto LABEL_20;
        }
        uint64_t v15 = (void **)__p[2];
        uint64_t v16 = __p[1];
        if (__p[2] == __p[1]) {
          goto LABEL_19;
        }
        do
        {
LABEL_15:
          if (*((char *)v15 - 1) < 0)
          {
            operator delete(*(v15 - 3));
            if ((*((char *)v15 - 25) & 0x80000000) == 0) {
              goto LABEL_14;
            }
          }
          else if ((*((char *)v15 - 25) & 0x80000000) == 0)
          {
LABEL_14:
            v15 -= 6;
            if (v15 == v14) {
              break;
            }
            goto LABEL_15;
          }
          operator delete(*(v15 - 6));
          v15 -= 6;
        }
        while (v15 != v14);
        uint64_t v16 = __p[1];
LABEL_19:
        __p[2] = v14;
        operator delete(v16);
LABEL_20:
        unint64_t v17 = (void **)v116[0];
        if (!v116[0]) {
          continue;
        }
        long long v18 = (void **)v116[1];
        uint64_t v19 = v116[0];
        if (v116[1] != v116[0])
        {
          while (1)
          {
            if (*((char *)v18 - 1) < 0)
            {
              operator delete(*(v18 - 3));
              if ((*((char *)v18 - 25) & 0x80000000) == 0) {
                goto LABEL_24;
              }
LABEL_27:
              operator delete(*(v18 - 6));
              v18 -= 6;
              if (v18 == v17)
              {
LABEL_28:
                uint64_t v19 = v116[0];
                break;
              }
            }
            else
            {
              if (*((char *)v18 - 25) < 0) {
                goto LABEL_27;
              }
LABEL_24:
              v18 -= 6;
              if (v18 == v17) {
                goto LABEL_28;
              }
            }
          }
        }
        v116[1] = v17;
        operator delete(v19);
        continue;
      case 5:
        *(_DWORD *)(a3 + 120) = sub_2F6A18((char **)&v129, *((char **)&v129 + 1));
        continue;
      case 6:
        *(_DWORD *)(a3 + 124) = sub_2F6A18((char **)&v129, *((char **)&v129 + 1));
        continue;
      case 7:
        if (*(unsigned char *)(a3 + 176) == 1)
        {
LABEL_155:
          long long v120 = 0u;
          long long v121 = 0u;
          long long v118 = 0u;
          long long v119 = 0u;
          memset(__p, 0, sizeof(__p));
          *(_OWORD *)uint64_t v116 = 0u;
          long long v123 = xmmword_20E2070;
          long long v124 = xmmword_20B8EA0;
          uint64_t v122 = 0;
          uint64_t v125 = 0;
          uint64_t v126 = 0;
          uint64_t v127 = 0;
          char v128 = 0;
          sub_3061BC(a3, (uint64_t)v116);
          return (void *)sub_30328C((uint64_t)v116);
        }
        std::string __dst = sub_2F3488((char **)&v129);
        size_t v114 = v20;
        sub_30C3E0(&__dst, a2, (uint64_t *)v116);
        uint64_t v22 = *(void **)(a3 + 24);
        uint64_t v21 = *(void *)(a3 + 32);
        uint64_t v23 = (v21 - (uint64_t)v22) >> 3;
        uint64_t v24 = v116[0];
        int v25 = v116[1];
        unint64_t v26 = v23 + (((char *)v116[1] - (char *)v116[0]) >> 3);
        if (v26 > (uint64_t)(*(void *)(a3 + 40) - (void)v22) >> 3)
        {
          if (v26 >> 61) {
LABEL_159:
          }
            sub_2E00();
          uint64_t v27 = (char *)operator new(8 * v26);
          unsigned int v28 = &v27[8 * v23];
          if ((void *)v21 != v22)
          {
            unsigned int v28 = &v27[8 * v23];
            do
            {
              int v29 = *(_DWORD *)(v21 - 8);
              v21 -= 8;
              int v30 = *(_DWORD *)(v21 + 3);
              *((_DWORD *)v28 - 2) = v29;
              v28 -= 8;
              *(_DWORD *)(v28 + 3) = v30;
            }
            while ((void *)v21 != v22);
          }
          *(void *)(a3 + 24) = v28;
          *(void *)(a3 + 32) = &v27[8 * v23];
          *(void *)(a3 + 40) = &v27[8 * v26];
          if (v22)
          {
            operator delete(v22);
            uint64_t v24 = v116[0];
            int v25 = v116[1];
          }
        }
        if (v24 != v25)
        {
          uint64_t v31 = *(_DWORD **)(a3 + 32);
          while (1)
          {
            unint64_t v33 = *(void *)(a3 + 40);
            if ((unint64_t)v31 < v33)
            {
              *(void *)uint64_t v31 = *v24;
              uint64_t v32 = v31 + 2;
            }
            else
            {
              uint64_t v34 = *v7;
              uint64_t v35 = ((char *)v31 - (unsigned char *)*v7) >> 3;
              unint64_t v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 61) {
                goto LABEL_159;
              }
              uint64_t v37 = v33 - (void)v34;
              if (v37 >> 2 > v36) {
                unint64_t v36 = v37 >> 2;
              }
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                if (v38 >> 61) {
                  sub_188D718();
                }
                uint64_t v39 = (char *)operator new(8 * v38);
                uint64_t v40 = (uint64_t)&v39[8 * v35];
                *(void *)uint64_t v40 = *v24;
                uint64_t v32 = (void *)(v40 + 8);
                if (v31 != v34)
                {
                  do
                  {
LABEL_54:
                    int v42 = *(v31 - 2);
                    v31 -= 2;
                    int v43 = *(_DWORD *)((char *)v31 + 3);
                    *(_DWORD *)(v40 - 8) = v42;
                    v40 -= 8;
                    *(_DWORD *)(v40 + 3) = v43;
                  }
                  while (v31 != v34);
                  uint64_t v31 = *v7;
                  *(void *)(a3 + 24) = v40;
                  *(void *)(a3 + 32) = v32;
                  *(void *)(a3 + 40) = &v39[8 * v38];
                  if (!v31) {
                    goto LABEL_41;
                  }
LABEL_58:
                  operator delete(v31);
                  goto LABEL_41;
                }
              }
              else
              {
                uint64_t v39 = 0;
                uint64_t v40 = 8 * v35;
                uint64_t v41 = (void *)(8 * v35);
                *uint64_t v41 = *v24;
                uint64_t v32 = v41 + 1;
                if (v31 != v34) {
                  goto LABEL_54;
                }
              }
              *(void *)(a3 + 24) = v40;
              *(void *)(a3 + 32) = v32;
              *(void *)(a3 + 40) = &v39[8 * v38];
              if (v31) {
                goto LABEL_58;
              }
            }
LABEL_41:
            *(void *)(a3 + 32) = v32;
            ++v24;
            uint64_t v31 = v32;
            if (v24 == v25)
            {
              int v25 = v116[0];
              break;
            }
          }
        }
        *(unsigned char *)(a3 + 176) = 2;
        if (v25)
        {
          v116[1] = v25;
          operator delete(v25);
        }
        break;
      default:
        sub_2F3548((uint64_t)&v129);
        continue;
    }
  }
  uint64_t v63 = *(void *)(a3 + 24);
  uint64_t v64 = *(int **)(a3 + 32);
  unint64_t v65 = 126 - 2 * __clz(((uint64_t)v64 - v63) >> 3);
  if (v64 == (int *)v63) {
    uint64_t v66 = 0;
  }
  else {
    uint64_t v66 = v65;
  }
  sub_303770(v63, v64, (uint64_t)v116, v66, 1);
  sub_30361C(a3 + 24);
  int v67 = *(unsigned __int8 *)(a3 + 176);
  if (v67 == 2)
  {
    uint64_t v68 = *(void **)(a3 + 24);
    for (uint64_t i = *(void **)(a3 + 32); v68 != i; ++v68)
    {
      sub_2E5044(a2, *v68 & 0xFFFFFFFFFFFFLL, (uint64_t)v116);
      sub_33998((uint64_t)v110, (uint64_t)v116);
    }
  }
  else if (v67 == 1)
  {
    sub_33E8C((uint64_t)v116, (unsigned int ****)a3);
    _OWORD *v110 = *(_OWORD *)v116;
    *(void **)(a3 + 144) = __p[0];
  }
  unsigned int v71 = *(unsigned int ****)a3;
  uint64_t v70 = *(unsigned int ****)(a3 + 8);
  long long v111 = v70;
LABEL_103:
  if (v71 != v70)
  {
    v116[0] = 0;
    v116[1] = 0;
    __p[0] = 0;
    sub_297598((uint64_t)v71, 0xFu, (uint64_t)v116);
    sub_29722C((int **)v116);
    uint64_t v72 = v116[0];
    uint64_t v73 = v116[1];
    if (v116[0] == v116[1]) {
      goto LABEL_136;
    }
    unsigned int v74 = *(char **)(a3 + 160);
    while (1)
    {
      unint64_t v76 = *(void *)(a3 + 168);
      if ((unint64_t)v74 >= v76) {
        break;
      }
      *(_DWORD *)unsigned int v74 = *v72;
      uint64_t v75 = (uint64_t)(v74 + 4);
LABEL_107:
      *(void *)(a3 + 160) = v75;
      ++v72;
      unsigned int v74 = (char *)v75;
      if (v72 == v73)
      {
        uint64_t v72 = v116[0];
LABEL_136:
        if (v72)
        {
          v116[1] = v72;
          operator delete(v72);
        }
        v71 += 3;
        uint64_t v70 = v111;
        goto LABEL_103;
      }
    }
    std::string::size_type v77 = (char *)*v112;
    uint64_t v78 = v74 - (unsigned char *)*v112;
    uint64_t v79 = v78 >> 2;
    unint64_t v80 = (v78 >> 2) + 1;
    if (v80 >> 62) {
      sub_2E00();
    }
    uint64_t v81 = v76 - (void)v77;
    if (v81 >> 1 > v80) {
      unint64_t v80 = v81 >> 1;
    }
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v82 = v80;
    }
    if (v82)
    {
      if (v82 >> 62) {
        sub_188D718();
      }
      long long v83 = operator new(4 * v82);
      long long v84 = &v83[4 * v79];
      *long long v84 = *v72;
      uint64_t v75 = (uint64_t)(v84 + 1);
      if (v74 == v77) {
        goto LABEL_123;
      }
    }
    else
    {
      long long v83 = 0;
      long long v84 = (_DWORD *)(4 * v79);
      *(_DWORD *)(4 * v79) = *v72;
      uint64_t v75 = 4 * v79 + 4;
      if (v74 == v77) {
        goto LABEL_123;
      }
    }
    unint64_t v85 = v74 - 4 - v77;
    if (v85 >= 0xBC)
    {
      if (&v83[v78 - 4 - (v85 & 0xFFFFFFFFFFFFFFFCLL)] > &v83[v78 - 4])
      {
        int v86 = v74;
      }
      else if (&v74[-(v85 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v74 - 4)
      {
        int v86 = v74;
      }
      else if ((unint64_t)(v74 - v83 - v78) >= 0x20)
      {
        uint64_t v88 = (v85 >> 2) + 1;
        uint64_t v89 = 4 * (v88 & 0x7FFFFFFFFFFFFFF8);
        int v86 = &v74[-v89];
        long long v84 = (_DWORD *)((char *)v84 - v89);
        uint64_t v90 = &v83[4 * v79 - 16];
        long long v91 = v74 - 16;
        uint64_t v92 = v88 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v93 = *(_OWORD *)v91;
          *(v90 - 1) = *((_OWORD *)v91 - 1);
          *uint64_t v90 = v93;
          v90 -= 2;
          v91 -= 32;
          v92 -= 8;
        }
        while (v92);
        if (v88 == (v88 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_123:
          *(void *)(a3 + 152) = v84;
          *(void *)(a3 + 160) = v75;
          *(void *)(a3 + 168) = &v83[4 * v82];
          if (v77) {
            operator delete(v77);
          }
          goto LABEL_107;
        }
      }
      else
      {
        int v86 = v74;
      }
    }
    else
    {
      int v86 = v74;
    }
    do
    {
      int v87 = *((_DWORD *)v86 - 1);
      v86 -= 4;
      *--long long v84 = v87;
    }
    while (v86 != v77);
    goto LABEL_123;
  }
  long long v94 = *(unsigned int **)(a3 + 152);
  long long v95 = *(char **)(a3 + 160);
  unint64_t v96 = 126 - 2 * __clz((v95 - (char *)v94) >> 2);
  if (v95 == (char *)v94) {
    uint64_t v97 = 0;
  }
  else {
    uint64_t v97 = v96;
  }
  BOOL result = sub_2E4C(v94, v95, (uint64_t)v116, v97, 1);
  long long v100 = *(char **)(a3 + 152);
  long long v99 = *(char **)(a3 + 160);
  if (v100 != v99)
  {
    uint64_t v101 = v100 + 4;
    while (v101 != v99)
    {
      int v103 = *((_DWORD *)v101 - 1);
      int v102 = *(_DWORD *)v101;
      v101 += 4;
      if (v103 == v102)
      {
        long long v104 = v101 - 8;
        while (v101 != v99)
        {
          int v105 = v102;
          int v102 = *(_DWORD *)v101;
          if (v105 != *(_DWORD *)v101)
          {
            *((_DWORD *)v104 + 1) = v102;
            v104 += 4;
          }
          v101 += 4;
        }
        long long v106 = v104 + 4;
        int64_t v107 = v99 - (v104 + 4);
        if (v99 != v104 + 4)
        {
          if (v99 != (char *)v106 + v107) {
            BOOL result = memmove(v104 + 4, (char *)v106 + v107, 0);
          }
          *(void *)(a3 + 160) = v106;
        }
        return result;
      }
    }
  }
  return result;
}

void sub_30C26C(_Unwind_Exception *a1)
{
  sub_30328C(v1);
  _Unwind_Resume(a1);
}

void sub_30C280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  sub_30328C(v27);
  _Unwind_Resume(a1);
}

BOOL sub_30C3E0@<W0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1 + a1[1];
  *(void *)&long long v40 = *a1;
  *((void *)&v40 + 1) = v5;
  uint64_t v41 = 0x2C700000000;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  unint64_t v6 = sub_2F4CE4(&v40, 2);
  unint64_t v7 = v6;
  if (v6)
  {
    if (v6 >> 61) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(8 * v6);
    *a3 = (uint64_t)v8;
    a3[1] = (uint64_t)v8;
    a3[2] = (uint64_t)&v8[8 * v7];
  }
  while (1)
  {
    BOOL result = sub_2F333C((uint64_t)&v40);
    if (!result) {
      return result;
    }
    while (v41 != 2)
    {
      switch(HIDWORD(v41))
      {
        case 0:
          sub_2F3C98((uint64_t *)&v40, *((uint64_t *)&v40 + 1));
          break;
        case 1:
          *(void *)&long long v40 = v40 + 8;
          if ((unint64_t)v40 > *((void *)&v40 + 1))
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v42, "Skipping over bytes exceeded message length.");
            uint64_t v39 = (void *)sub_2F404((uint64_t)exception, &v42);
          }
          return result;
        case 2:
          unsigned int v10 = sub_2F36C8((char **)&v40, *((char **)&v40 + 1));
          sub_2F3DCC((unint64_t *)&v40, v10);
          break;
        case 5:
          *(void *)&long long v40 = v40 + 4;
          if ((unint64_t)v40 > *((void *)&v40 + 1))
          {
            unint64_t v36 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v42, "Skipping over bytes exceeded message length.");
            uint64_t v37 = (void *)sub_2F404((uint64_t)v36, &v42);
          }
          return result;
        default:
          uint64_t v34 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v42, "Unknown wire type.");
          uint64_t v35 = (void *)sub_2F404((uint64_t)v34, &v42);
      }
      BOOL result = sub_2F333C((uint64_t)&v40);
      if (!result) {
        return result;
      }
    }
    int64_t v11 = sub_2F3E7C((char **)&v40, *((char **)&v40 + 1));
    uint64_t v12 = v11;
    if (v11 >= 0) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = -v11;
    }
    unint64_t v14 = sub_2FD4C0(a2, v13);
    BOOL v16 = v14 > 0xFFFFFFFEFFFFFFFFLL || v14 == 0;
    if (v12 < 1 || v16) {
      uint64_t v18 = 0x1000000000000;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v16) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v14 & 0xFFFFFFFFFFFFLL;
    }
    if (v19)
    {
      uint64_t v20 = v18 | v19;
      uint64_t v22 = (void *)a3[1];
      unint64_t v21 = a3[2];
      if ((unint64_t)v22 >= v21)
      {
        uint64_t v23 = (void *)*a3;
        uint64_t v24 = ((uint64_t)v22 - *a3) >> 3;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v26 = v21 - (void)v23;
        if (v26 >> 2 > v25) {
          unint64_t v25 = v26 >> 2;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          if (v27 >> 61) {
            sub_188D718();
          }
          unsigned int v28 = (char *)operator new(8 * v27);
          uint64_t v29 = (uint64_t)&v28[8 * v24];
          *(void *)uint64_t v29 = v20;
          int v30 = (void *)(v29 + 8);
          if (v22 == v23)
          {
LABEL_44:
            *a3 = v29;
            a3[1] = (uint64_t)v30;
            a3[2] = (uint64_t)&v28[8 * v27];
            if (!v22) {
              goto LABEL_46;
            }
LABEL_45:
            operator delete(v22);
            goto LABEL_46;
          }
        }
        else
        {
          unsigned int v28 = 0;
          uint64_t v29 = 8 * v24;
          uint64_t v31 = (uint64_t *)(8 * v24);
          *uint64_t v31 = v20;
          int v30 = v31 + 1;
          if (v22 == v23) {
            goto LABEL_44;
          }
        }
        do
        {
          int v32 = *((_DWORD *)v22-- - 2);
          int v33 = *(_DWORD *)((char *)v22 + 3);
          *(_DWORD *)(v29 - 8) = v32;
          v29 -= 8;
          *(_DWORD *)(v29 + 3) = v33;
        }
        while (v22 != v23);
        uint64_t v22 = (void *)*a3;
        *a3 = v29;
        a3[1] = (uint64_t)v30;
        a3[2] = (uint64_t)&v28[8 * v27];
        if (v22) {
          goto LABEL_45;
        }
LABEL_46:
        a3[1] = (uint64_t)v30;
      }
      else
      {
        *uint64_t v22 = v20;
        a3[1] = (uint64_t)(v22 + 1);
      }
    }
  }
}

void sub_30C75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v19 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v19;
    operator delete(v19);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_30C7F8(char **a1)
{
  uint64_t v1 = &a1[1][(void)*a1];
  unint64_t v7 = *a1;
  uint64_t v8 = v1;
  uint64_t v9 = 0x2C700000000;
  if (sub_2F333C((uint64_t)&v7))
  {
    unsigned __int8 v2 = 0;
    unsigned __int8 v3 = 0;
    do
    {
      switch(v9)
      {
        case 3:
          sub_2F36C8(&v7, v8);
          break;
        case 2:
          unsigned int v4 = sub_2F39B0(&v7, v8);
          unsigned __int8 v3 = sub_309CC8(v4);
          break;
        case 1:
          unsigned int v5 = sub_2F39B0(&v7, v8);
          unsigned __int8 v2 = sub_309AC8(v5);
          break;
      }
    }
    while (sub_2F333C((uint64_t)&v7));
  }
  else
  {
    unsigned __int8 v3 = 0;
    unsigned __int8 v2 = 0;
  }
  return v2 | ((unint64_t)v3 << 8);
}

unint64_t sub_30C8DC(char **a1)
{
  uint64_t v1 = &a1[1][(void)*a1];
  unint64_t v7 = *a1;
  uint64_t v8 = v1;
  uint64_t v9 = 0x2C700000000;
  if (sub_2F333C((uint64_t)&v7))
  {
    BOOL v2 = 0;
    unint64_t v3 = 0;
    do
    {
      switch((int)v9)
      {
        case 1:
          BOOL v2 = *v7 != 0;
          sub_2F3C98((uint64_t *)&v7, (uint64_t)v8);
          break;
        case 2:
          unint64_t v3 = sub_2F36C8(&v7, v8);
          break;
        case 3:
          v7 += 4;
          if (v7 > v8)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            unsigned int v10 = (char *)operator new(0x30uLL);
            long long v11 = xmmword_20E1380;
            strcpy(v10, "Skipping over bytes exceeded message length.");
            unint64_t v6 = (void *)sub_2F404((uint64_t)exception, (long long *)&v10);
          }
          return result;
        case 4:
          sub_2F6A18(&v7, v8);
          break;
        default:
          sub_2F3548((uint64_t)&v7);
          break;
      }
    }
    while (sub_2F333C((uint64_t)&v7));
  }
  else
  {
    unint64_t v3 = 0;
    BOOL v2 = 0;
  }
  return (v3 << 32) | ((unint64_t)v2 << 8) | 1;
}

void sub_30CA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_30CAB0(unsigned int a1)
{
  if (a1 < 8) {
    return (0x404040403020100uLL >> (8 * a1));
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v4);
    sub_188FC78(v4, (uint64_t)"Unknown area event type encountered: ", 37);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v3 < 0) {
      operator delete(__p);
    }
    if (v5 < 0) {
      operator delete((void *)v4[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return 0;
}

void sub_30CC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_30CCA0(unsigned int a1)
{
  if (a1 < 6) {
    return dword_20E20D4[a1];
  }
  uint64_t result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v4);
    sub_188FC78(v4, (uint64_t)"Unknown incident severity encountered: ", 39);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v3 < 0) {
      operator delete(__p);
    }
    if (v5 < 0) {
      operator delete((void *)v4[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  return result;
}

void sub_30CE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_30CE80()
{
  unk_25571CF = 16641;
  word_25571B8 = 65;
  byte_25571E7 = 1;
  byte_25571D1 = 0;
}

uint64_t sub_30CEA8(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

__n128 sub_30CEB8@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

BOOL sub_30CEC4@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  while (1)
  {
    BOOL result = sub_30DA40(a1);
    if (!result) {
      return result;
    }
    while (*(_DWORD *)(a1 + 16) != 1)
    {
      switch(*(_DWORD *)(a1 + 20))
      {
        case 0:
          sub_2F3C98((uint64_t *)a1, *(void *)(a1 + 8));
          break;
        case 1:
          unint64_t v8 = *(void *)(a1 + 8);
          unint64_t v9 = *(void *)a1 + 8;
          *(void *)a1 = v9;
          if (v9 > v8)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v73, "Skipping over bytes exceeded message length.");
            uint64_t v50 = (void *)sub_2F404((uint64_t)exception, &v73);
          }
          return result;
        case 2:
          unsigned int v5 = sub_2F36C8((char **)a1, *(char **)(a1 + 8));
          sub_3128D8((unint64_t *)a1, v5);
          break;
        case 5:
          unint64_t v6 = *(void *)(a1 + 8);
          unint64_t v7 = *(void *)a1 + 4;
          *(void *)a1 = v7;
          if (v7 > v6)
          {
            char v47 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v73, "Skipping over bytes exceeded message length.");
            uint64_t v48 = (void *)sub_2F404((uint64_t)v47, &v73);
          }
          return result;
        default:
          uint64_t v51 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v73, "Unknown wire type.");
          unsigned int v52 = (void *)sub_2F404((uint64_t)v51, &v73);
      }
      BOOL result = sub_30DA40(a1);
      if (!result) {
        return result;
      }
    }
    char v70 = 0;
    __p[0] = 0;
    __p[1] = 0;
    unint64_t v69 = 0;
    int v67 = 0;
    uint64_t v64 = sub_30DB8C((char **)a1);
    unint64_t v65 = &v64[v10];
    uint64_t v66 = 0x2C700000000;
    int v63 = 0x7FFFFFFF;
    while (sub_30DA40((uint64_t)&v64))
    {
      switch((int)v66)
      {
        case 1:
          unint64_t v11 = sub_2F6A18(&v64, v65);
          if (!(v11 >> 31)) {
            int v63 = v11;
          }
          continue;
        case 2:
          unsigned int v17 = sub_2F39B0(&v64, v65);
          unint64_t v18 = 0x302010000uLL >> (8 * v17);
          if (v17 >= 5) {
            LOBYTE(v18) = 0;
          }
          char v70 = v18;
          continue;
        case 4:
          int v12 = sub_2F36C8(&v64, v65);
          uint64_t v13 = v64;
          unint64_t v14 = &v64[v12];
          uint64_t v64 = v14;
          if (v14 > v65)
          {
            uint64_t v53 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v73, "Sub-message length of field exceeded past the end of the message.");
            uint64_t v54 = (void *)sub_2F404((uint64_t)v53, &v73);
          }
          *(void *)&long long __dst = v13;
          *((void *)&__dst + 1) = v14;
          unint64_t v72 = 0x2C700000000;
          if (sub_30DA40((uint64_t)&__dst))
          {
            while (v72 != 7)
            {
              switch(HIDWORD(v72))
              {
                case 0:
                  sub_2F3C98((uint64_t *)&__dst, *((uint64_t *)&__dst + 1));
                  break;
                case 1:
                  *(void *)&long long __dst = __dst + 8;
                  if ((unint64_t)__dst > *((void *)&__dst + 1))
                  {
                    uint64_t v37 = __cxa_allocate_exception(0x40uLL);
                    sub_5E5C(&v73, "Skipping over bytes exceeded message length.");
                    unint64_t v38 = (void *)sub_2F404((uint64_t)v37, &v73);
                  }
                  return result;
                case 2:
                  unsigned int v15 = sub_2F36C8((char **)&__dst, *((char **)&__dst + 1));
                  sub_3128D8((unint64_t *)&__dst, v15);
                  break;
                case 5:
                  *(void *)&long long __dst = __dst + 4;
                  if ((unint64_t)__dst > *((void *)&__dst + 1))
                  {
                    uint64_t v39 = __cxa_allocate_exception(0x40uLL);
                    sub_5E5C(&v73, "Skipping over bytes exceeded message length.");
                    long long v40 = (void *)sub_2F404((uint64_t)v39, &v73);
                  }
                  return result;
                default:
                  uint64_t v35 = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(&v73, "Unknown wire type.");
                  unint64_t v36 = (void *)sub_2F404((uint64_t)v35, &v73);
              }
              if (!sub_30DA40((uint64_t)&__dst)) {
                goto LABEL_29;
              }
            }
            int v25 = sub_2F39B0((char **)&__dst, *((char **)&__dst + 1));
            if (v25 == 1) {
              int v16 = 1;
            }
            else {
              int v16 = 2 * (v25 == 2);
            }
          }
          else
          {
LABEL_29:
            int v16 = 1;
          }
          *(void *)&long long __dst = v13;
          *((void *)&__dst + 1) = v14;
          unint64_t v72 = 0x2C700000000;
          if (sub_30DA40((uint64_t)&__dst))
          {
            while (v72 != 6)
            {
              switch(HIDWORD(v72))
              {
                case 0:
                  sub_2F3C98((uint64_t *)&__dst, *((uint64_t *)&__dst + 1));
                  break;
                case 1:
                  *(void *)&long long __dst = __dst + 8;
                  if ((unint64_t)__dst > *((void *)&__dst + 1))
                  {
                    int v43 = __cxa_allocate_exception(0x40uLL);
                    sub_5E5C(&v73, "Skipping over bytes exceeded message length.");
                    size_t v44 = (void *)sub_2F404((uint64_t)v43, &v73);
                  }
                  return result;
                case 2:
                  unsigned int v26 = sub_2F36C8((char **)&__dst, *((char **)&__dst + 1));
                  sub_3128D8((unint64_t *)&__dst, v26);
                  break;
                case 5:
                  *(void *)&long long __dst = __dst + 4;
                  if ((unint64_t)__dst > *((void *)&__dst + 1))
                  {
                    uint64_t v41 = __cxa_allocate_exception(0x40uLL);
                    sub_5E5C(&v73, "Skipping over bytes exceeded message length.");
                    long long v42 = (void *)sub_2F404((uint64_t)v41, &v73);
                  }
                  return result;
                default:
                  unint64_t v45 = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(&v73, "Unknown wire type.");
                  long long v46 = (void *)sub_2F404((uint64_t)v45, &v73);
              }
              if (!sub_30DA40((uint64_t)&__dst)) {
                goto LABEL_56;
              }
            }
            int v28 = sub_2F39B0((char **)&__dst, *((char **)&__dst + 1));
            char v29 = 0;
            switch(v28)
            {
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
                char v29 = v28;
                break;
              case 10:
                if (v16 == 2) {
                  char v29 = 10;
                }
                else {
                  char v29 = 9;
                }
                if (!v16) {
                  char v29 = 0;
                }
                break;
              default:
                break;
            }
            int v27 = 1 << v29;
          }
          else
          {
LABEL_56:
            int v27 = 0;
          }
          v67 |= v27;
          continue;
        case 5:
          unsigned int v19 = sub_2F36C8(&v64, v65);
          size_t v20 = v19;
          unint64_t v21 = v64;
          v64 += v19;
          if (v64 > v65)
          {
            uint64_t v55 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v73, "Sub-message length of field exceeded past the end of the message.");
            uint64_t v56 = (void *)sub_2F404((uint64_t)v55, &v73);
          }
          if (v19 >= 0x17)
          {
            uint64_t v23 = (v19 & 0xFFFFFFF8) + 8;
            if ((v19 | 7) != 0x17) {
              uint64_t v23 = v19 | 7;
            }
            uint64_t v24 = v23 + 1;
            p_dst = (long long *)operator new(v23 + 1);
            *((void *)&__dst + 1) = v20;
            unint64_t v72 = v24 | 0x8000000000000000;
            *(void *)&long long __dst = p_dst;
LABEL_42:
            memmove(p_dst, v21, v20);
            *((unsigned char *)p_dst + v20) = 0;
            if ((SHIBYTE(v69) & 0x80000000) == 0) {
              goto LABEL_14;
            }
            goto LABEL_43;
          }
          HIBYTE(v72) = v19;
          p_dst = &__dst;
          if (v19) {
            goto LABEL_42;
          }
          LOBYTE(__dst) = 0;
          if ((SHIBYTE(v69) & 0x80000000) == 0) {
            goto LABEL_14;
          }
LABEL_43:
          operator delete(__p[0]);
LABEL_14:
          *(_OWORD *)long long __p = __dst;
          unint64_t v69 = v72;
          break;
        default:
          switch(HIDWORD(v66))
          {
            case 0:
              sub_2F3C98((uint64_t *)&v64, (uint64_t)v65);
              break;
            case 1:
              v64 += 8;
              if (v64 > v65)
              {
                unsigned int v61 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(&v73, "Skipping over bytes exceeded message length.");
                long long v62 = (void *)sub_2F404((uint64_t)v61, &v73);
              }
              return result;
            case 2:
              unsigned int v30 = sub_2F36C8(&v64, v65);
              sub_3128D8((unint64_t *)&v64, v30);
              break;
            case 5:
              v64 += 4;
              if (v64 > v65)
              {
                uint64_t v57 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(&v73, "Skipping over bytes exceeded message length.");
                unint64_t v58 = (void *)sub_2F404((uint64_t)v57, &v73);
              }
              return result;
            default:
              uint64_t v59 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(&v73, "Unknown wire type.");
              unsigned int v60 = (void *)sub_2F404((uint64_t)v59, &v73);
          }
          continue;
      }
    }
    unint64_t v31 = *(void *)(a2 + 8);
    if (v31 >= *(void *)(a2 + 16))
    {
      *(void *)(a2 + 8) = sub_312988((char **)a2, (uint64_t)__p, &v70, &v67, &v63);
      if (SHIBYTE(v69) < 0) {
        goto LABEL_79;
      }
    }
    else
    {
      char v32 = v70;
      int v33 = v63;
      if (SHIBYTE(v69) < 0)
      {
        sub_4200(*(unsigned char **)(a2 + 8), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v34 = *(_OWORD *)__p;
        *(void *)(v31 + 16) = v69;
        *(_OWORD *)unint64_t v31 = v34;
      }
      *(unsigned char *)(v31 + 24) = v32;
      *(_DWORD *)(v31 + 28) = v67;
      *(_DWORD *)(v31 + 32) = v33;
      *(void *)(a2 + 8) = v31 + 40;
      *(void *)(a2 + 8) = v31 + 40;
      if (SHIBYTE(v69) < 0) {
LABEL_79:
      }
        operator delete(__p[0]);
    }
  }
}

void sub_30D860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  *(void *)(v30 + 8) = v31;
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_30DDCC((void **)v30);
  _Unwind_Resume(a1);
}

BOOL sub_30DA40(uint64_t a1)
{
  BOOL v2 = *(char **)a1;
  unint64_t v1 = *(void *)(a1 + 8);
  if (*(void *)a1 < v1)
  {
    unsigned int v4 = sub_2F36C8((char **)a1, *(char **)(a1 + 8));
    *(_DWORD *)(a1 + 16) = v4 >> 3;
    if (v4 < 8 || (v4 - 152000) >> 6 <= 0x7C)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v11, "Parsed invalid tag.");
      unint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v11);
    }
    *(_DWORD *)(a1 + 20) = v4 & 7;
    if ((v4 & 7) >= 3 && (v4 & 7) != 5)
    {
      unint64_t v9 = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v11, "Unknown wire type.");
      uint64_t v10 = (void *)sub_2F404((uint64_t)v9, &v11);
    }
  }
  return (unint64_t)v2 < v1;
}

void sub_30DB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_30DB8C(char **a1)
{
  uint64_t v2 = sub_2F36C8(a1, a1[1]);
  BOOL result = *a1;
  unsigned int v4 = a1[1];
  unsigned int v5 = &(*a1)[v2];
  *a1 = v5;
  if (v5 > v4)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v8, "Sub-message length of field exceeded past the end of the message.");
    unint64_t v7 = (void *)sub_2F404((uint64_t)exception, &v8);
  }
  return result;
}

void sub_30DC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *sub_30DC4C(uint64_t a1)
{
  uint64_t v1 = a1;
  switch(*(_DWORD *)(a1 + 20))
  {
    case 0:
      uint64_t v2 = *(void *)(a1 + 8);
      return (unint64_t *)sub_2F3C98((uint64_t *)a1, v2);
    case 1:
      unsigned int v4 = 8;
      return sub_3128D8((unint64_t *)a1, v4);
    case 2:
      unsigned int v4 = sub_2F36C8((char **)a1, *(char **)(a1 + 8));
      a1 = v1;
      return sub_3128D8((unint64_t *)a1, v4);
    case 5:
      unsigned int v4 = 4;
      return sub_3128D8((unint64_t *)a1, v4);
    default:
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v7, "Unknown wire type.");
      unint64_t v6 = (void *)sub_2F404((uint64_t)exception, &v7);
  }
}

void sub_30DD84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **sub_30DDCC(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    long long v3 = (void **)a1[1];
    unsigned int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 17) < 0) {
          operator delete(*(v3 - 5));
        }
        v3 -= 5;
      }
      while (v3 != v2);
      unsigned int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_30DE40(uint64_t a1, char **a2, uint64_t a3)
{
  v44[0] = sub_30DB8C(a2);
  v44[1] = &v44[0][v4];
  uint64_t v45 = 0x2C700000000;
  if (sub_30DA40((uint64_t)v44))
  {
    while (v45 != 1)
    {
      sub_30DC4C((uint64_t)v44);
      if (!sub_30DA40((uint64_t)v44)) {
        return;
      }
    }
    unsigned int v5 = sub_30DB8C(v44);
    unint64_t v43 = -1;
    int v42 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v41 = 0;
    long long v7 = &v5[v6];
    uint64_t v37 = v5;
    unint64_t v38 = &v5[v6];
    uint64_t v39 = 0x2C700000000;
    while (sub_30DA40((uint64_t)&v37))
    {
      while (v39 != 7)
      {
        switch(HIDWORD(v39))
        {
          case 0:
            sub_2F3C98((uint64_t *)&v37, (uint64_t)v38);
            break;
          case 1:
            v37 += 8;
            if (v37 > v38)
            {
              exception = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(&v46, "Skipping over bytes exceeded message length.");
              uint64_t v31 = (void *)sub_2F404((uint64_t)exception, &v46);
            }
            return;
          case 2:
            unsigned int v8 = sub_2F36C8(&v37, v38);
            sub_3128D8((unint64_t *)&v37, v8);
            break;
          case 5:
            v37 += 4;
            if (v37 > v38)
            {
              int v28 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(&v46, "Skipping over bytes exceeded message length.");
              char v29 = (void *)sub_2F404((uint64_t)v28, &v46);
            }
            return;
          default:
            unsigned int v26 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v46, "Unknown wire type.");
            int v27 = (void *)sub_2F404((uint64_t)v26, &v46);
        }
        if (!sub_30DA40((uint64_t)&v37)) {
          goto LABEL_19;
        }
      }
      int v9 = sub_2F39B0(&v37, v38);
      int v10 = 1 << (v9 == 1);
      if (v9 == 3) {
        int v10 = 4;
      }
      v42 |= v10;
    }
LABEL_19:
    *(void *)&long long v46 = v5;
    *((void *)&v46 + 1) = v7;
    uint64_t v47 = 0x2C700000000;
LABEL_21:
    while (sub_30DA40((uint64_t)&v46))
    {
      if (v47 == 1)
      {
        v35[0] = sub_30DB8C((char **)&v46);
        v35[1] = &v35[0][v11];
        uint64_t v36 = 0x2C700000000;
        if (sub_30DA40((uint64_t)v35))
        {
          while (v36 != 5)
          {
            sub_30DC4C((uint64_t)v35);
            if (!sub_30DA40((uint64_t)v35)) {
              goto LABEL_21;
            }
          }
          v34[0] = sub_30DB8C(v35);
          v34[1] = v34[0] + v12;
          v34[2] = 0x2C700000000;
          sub_30CEC4((uint64_t)v34, (uint64_t)&v32);
          uint64_t v13 = (void **)__p[0];
          if (__p[0])
          {
            unint64_t v14 = (void **)__p[1];
            unsigned int v15 = __p[0];
            if (__p[1] != __p[0])
            {
              do
              {
                if (*((char *)v14 - 17) < 0) {
                  operator delete(*(v14 - 5));
                }
                v14 -= 5;
              }
              while (v14 != v13);
              unsigned int v15 = __p[0];
            }
            __p[1] = v13;
            operator delete(v15);
          }
          *(_OWORD *)long long __p = v32;
          uint64_t v41 = v33;
        }
      }
      else if (v47 == 5)
      {
        unint64_t v43 = sub_2F6A18((char **)&v46, *((char **)&v46 + 1));
      }
      else
      {
        sub_30DC4C((uint64_t)&v46);
      }
    }
    char v16 = v42;
    if (v42)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6888, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F6888))
      {
        qword_24F6870 = 0;
        *(void *)algn_24F6878 = 0;
        qword_24F6880 = 0;
        __cxa_guard_release(&qword_24F6888);
      }
      unint64_t v17 = *(void *)(a3 + 8);
      if (v17 >= *(void *)(a3 + 16))
      {
        unsigned int v19 = sub_312C04((void **)a3, &v43, (uint64_t *)__p, &v42);
      }
      else
      {
        int v18 = v42;
        *(void *)unint64_t v17 = v43;
        *(void *)(v17 + 16) = 0;
        *(void *)(v17 + 24) = 0;
        *(void *)(v17 + 8) = 0;
        sub_31237C((char *)(v17 + 8), (uint64_t)__p[0], (uint64_t)__p[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *(_DWORD *)(v17 + 32) = v18;
        unsigned int v19 = (char *)(v17 + 40);
        *(void *)(a3 + 8) = v17 + 40;
      }
      *(void *)(a3 + 8) = v19;
      char v16 = v42;
    }
    if ((v16 & 2) != 0)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6888, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_24F6888))
      {
        qword_24F6870 = 0;
        *(void *)algn_24F6878 = 0;
        qword_24F6880 = 0;
        __cxa_guard_release(&qword_24F6888);
      }
      unint64_t v20 = *(void *)(a3 + 32);
      if (v20 >= *(void *)(a3 + 40))
      {
        uint64_t v22 = sub_312C04((void **)(a3 + 24), &v43, (uint64_t *)__p, &v42);
      }
      else
      {
        int v21 = v42;
        *(void *)unint64_t v20 = v43;
        *(void *)(v20 + 16) = 0;
        *(void *)(v20 + 24) = 0;
        *(void *)(v20 + 8) = 0;
        sub_31237C((char *)(v20 + 8), (uint64_t)__p[0], (uint64_t)__p[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *(_DWORD *)(v20 + 32) = v21;
        uint64_t v22 = (char *)(v20 + 40);
        *(void *)(a3 + 32) = v20 + 40;
      }
      *(void *)(a3 + 32) = v22;
    }
    uint64_t v23 = (void **)__p[0];
    if (__p[0])
    {
      uint64_t v24 = (void **)__p[1];
      int v25 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          if (*((char *)v24 - 17) < 0) {
            operator delete(*(v24 - 5));
          }
          v24 -= 5;
        }
        while (v24 != v23);
        int v25 = __p[0];
      }
      __p[1] = v23;
      operator delete(v25);
    }
  }
}

void sub_30E360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  *(void *)(v13 + 32) = v14;
  sub_30DDCC((void **)va);
  _Unwind_Resume(a1);
}

void sub_30E378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  *(void *)(v13 + 8) = v14;
  sub_30DDCC((void **)va);
  _Unwind_Resume(a1);
}

void sub_30E390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_30DDCC((void **)va);
  _Unwind_Resume(a1);
}

void sub_30E42C(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)char v29 = 0u;
  *(_OWORD *)uint64_t v30 = 0u;
  int v31 = 1065353216;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4) {
    goto LABEL_32;
  }
  do
  {
    unint64_t v6 = *(void *)v3;
    if (!v29[1]) {
      goto LABEL_22;
    }
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v29[1]);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = *(void *)v3;
      if ((void *)v6 >= v29[1]) {
        unint64_t v8 = v6 % (unint64_t)v29[1];
      }
    }
    else
    {
      unint64_t v8 = ((unint64_t)v29[1] - 1) & v6;
    }
    int v9 = (void *)*((void *)v29[0] + v8);
    if (!v9 || (int v10 = (void *)*v9) == 0)
    {
LABEL_22:
      *(void *)&long long v32 = *(void *)v3;
      *((void *)&v32 + 1) = v3;
      sub_312E44((uint64_t)v29, (unint64_t *)&v32, &v32);
      goto LABEL_23;
    }
    if (v7.u32[0] < 2uLL)
    {
      while (1)
      {
        unint64_t v12 = v10[1];
        if (v12 == v6)
        {
          if (v10[2] == v6) {
            goto LABEL_25;
          }
        }
        else if ((v12 & ((unint64_t)v29[1] - 1)) != v8)
        {
          goto LABEL_22;
        }
        int v10 = (void *)*v10;
        if (!v10) {
          goto LABEL_22;
        }
      }
    }
    while (1)
    {
      unint64_t v11 = v10[1];
      if (v11 == v6) {
        break;
      }
      if ((void *)v11 >= v29[1]) {
        v11 %= (unint64_t)v29[1];
      }
      if (v11 != v8) {
        goto LABEL_22;
      }
LABEL_12:
      int v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_22;
      }
    }
    if (v10[2] != v6) {
      goto LABEL_12;
    }
LABEL_25:
    sub_313168((void **)(v10[3] + 8), *(void *)(v10[3] + 16), *(std::string **)(v3 + 8), *(char **)(v3 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 3));
LABEL_23:
    v3 += 40;
  }
  while (v3 != v4);
  uint64_t v13 = (uint64_t *)a1[1];
  if ((uint64_t *)*a1 != v13)
  {
    uint64_t v14 = (uint64_t *)(*a1 + 8);
    do
    {
      unsigned int v15 = (const void **)v14[1];
      unint64_t v16 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v15 - *v14) >> 3));
      if (v15 == (const void **)*v14) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = v16;
      }
      sub_313704(*v14, v15, (uint64_t)&v32, v17, 1);
      sub_313618((const void ***)v14);
      int v18 = v14 + 4;
      v14 += 5;
    }
    while (v18 != v13);
  }
LABEL_32:
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_316378((char **)a2, (unint64_t)v30[1]);
  unsigned int v19 = v30[0];
  if (v30[0])
  {
    unint64_t v20 = *(void **)(a2 + 8);
    do
    {
      uint64_t v22 = (unint64_t *)v19[3];
      long long v32 = *v22;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      sub_31237C((char *)&v32 + 8, v22[1], v22[2], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22[2] - v22[1]) >> 3));
      int v35 = *((_DWORD *)v22 + 8);
      uint64_t v23 = sub_3164F0((char **)a2, v20, (uint64_t)&v32);
      uint64_t v24 = *((void *)&v32 + 1);
      if (*((void *)&v32 + 1))
      {
        uint64_t v25 = v33;
        int v21 = (void *)*((void *)&v32 + 1);
        if (v33 != *((void *)&v32 + 1))
        {
          do
          {
            if (*(char *)(v25 - 17) < 0) {
              operator delete(*(void **)(v25 - 40));
            }
            v25 -= 40;
          }
          while (v25 != v24);
          int v21 = (void *)*((void *)&v32 + 1);
        }
        uint64_t v33 = v24;
        operator delete(v21);
      }
      unint64_t v20 = v23 + 40;
      unsigned int v19 = (void *)*v19;
    }
    while (v19);
    unsigned int v26 = v30[0];
    if (v30[0])
    {
      do
      {
        int v27 = (void *)*v26;
        operator delete(v26);
        unsigned int v26 = v27;
      }
      while (v27);
    }
  }
  int v28 = v29[0];
  v29[0] = 0;
  if (v28) {
    operator delete(v28);
  }
}

void sub_30E704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11 = (char *)*v9;
  if (*v9)
  {
    unint64_t v12 = (char *)v9[1];
    uint64_t v13 = *v9;
    if (v12 != v11)
    {
      do
      {
        uint64_t v15 = *((void *)v12 - 4);
        if (v15)
        {
          uint64_t v16 = *((void *)v12 - 3);
          uint64_t v14 = (void *)*((void *)v12 - 4);
          if (v16 != v15)
          {
            do
            {
              if (*(char *)(v16 - 17) < 0) {
                operator delete(*(void **)(v16 - 40));
              }
              v16 -= 40;
            }
            while (v16 != v15);
            uint64_t v14 = (void *)*((void *)v12 - 4);
          }
          *((void *)v12 - 3) = v15;
          operator delete(v14);
        }
        v12 -= 40;
      }
      while (v12 != v11);
      uint64_t v13 = *v9;
    }
    v9[1] = v11;
    operator delete(v13);
    sub_12168((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_12168((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_30E7D4(uint64_t a1, char **a2, uint64_t *a3)
{
  sub_725D0((uint64_t)v84);
  unint64_t v6 = &a2[1][(void)*a2];
  uint64_t v81 = *a2;
  unint64_t v82 = v6;
  uint64_t v83 = 0x2C700000000;
  int v7 = 0;
  if (sub_2F333C((uint64_t)&v81))
  {
    do
    {
      while (v83 != 9)
      {
        switch(HIDWORD(v83))
        {
          case 0:
            sub_2F3C98((uint64_t *)&v81, (uint64_t)v82);
            break;
          case 1:
            v81 += 8;
            if (v81 > v82)
            {
              exception = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(__t, "Skipping over bytes exceeded message length.");
              uint64_t v51 = (void *)sub_2F404((uint64_t)exception, (long long *)&__t[0].__d_.__rep_);
            }
            return result;
          case 2:
            unsigned int v8 = sub_2F36C8(&v81, v82);
            v81 += v8;
            if (v81 > v82)
            {
              uint64_t v56 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(__t, "Skipping over bytes exceeded message length.");
              uint64_t v57 = (void *)sub_2F404((uint64_t)v56, (long long *)&__t[0].__d_.__rep_);
            }
            return result;
          case 5:
            v81 += 4;
            if (v81 > v82)
            {
              uint64_t v54 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(__t, "Skipping over bytes exceeded message length.");
              uint64_t v55 = (void *)sub_2F404((uint64_t)v54, (long long *)&__t[0].__d_.__rep_);
            }
            return result;
          default:
            unsigned int v52 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(__t, "Unknown wire type.");
            uint64_t v53 = (void *)sub_2F404((uint64_t)v52, (long long *)&__t[0].__d_.__rep_);
        }
        if (!sub_2F333C((uint64_t)&v81)) {
          goto LABEL_62;
        }
      }
      int v9 = sub_2F3488(&v81);
      unint64_t v11 = &v9[v10];
      uint64_t v79 = v9;
      *(void *)&long long v80 = &v9[v10];
      *((void *)&v80 + 1) = 0x2C700000000;
      if (sub_30DA40((uint64_t)&v79))
      {
        int v12 = 7;
        int v13 = 0x7FFFFFFF;
        int v14 = 0x7FFFFFFF;
        do
        {
          switch(DWORD2(v80))
          {
            case 1:
              int v12 = sub_2F39B0((char **)&v79, (char *)v80);
              break;
            case 2:
              unint64_t v16 = sub_2F6A18((char **)&v79, (char *)v80);
              if (!(v16 >> 31)) {
                int v14 = v16;
              }
              break;
            case 3:
              unint64_t v15 = sub_2F6A18((char **)&v79, (char *)v80);
              if (!(v15 >> 31)) {
                int v13 = v15;
              }
              break;
            default:
              switch(HIDWORD(v80))
              {
                case 0:
                  sub_2F3C98((uint64_t *)&v79, v80);
                  break;
                case 1:
                  uint64_t v79 = (char *)v79 + 8;
                  if ((unint64_t)v79 > (unint64_t)v80)
                  {
                    long long v62 = __cxa_allocate_exception(0x40uLL);
                    sub_5E5C(__t, "Skipping over bytes exceeded message length.");
                    int v63 = (void *)sub_2F404((uint64_t)v62, (long long *)&__t[0].__d_.__rep_);
                  }
                  return result;
                case 2:
                  unsigned int v17 = sub_2F36C8((char **)&v79, (char *)v80);
                  uint64_t v79 = (char *)v79 + v17;
                  if ((unint64_t)v79 > (unint64_t)v80)
                  {
                    unsigned int v60 = __cxa_allocate_exception(0x40uLL);
                    sub_5E5C(__t, "Skipping over bytes exceeded message length.");
                    unsigned int v61 = (void *)sub_2F404((uint64_t)v60, (long long *)&__t[0].__d_.__rep_);
                  }
                  return result;
                case 5:
                  uint64_t v79 = (char *)v79 + 4;
                  if ((unint64_t)v79 > (unint64_t)v80)
                  {
                    unint64_t v58 = __cxa_allocate_exception(0x40uLL);
                    sub_5E5C(__t, "Skipping over bytes exceeded message length.");
                    uint64_t v59 = (void *)sub_2F404((uint64_t)v58, (long long *)&__t[0].__d_.__rep_);
                  }
                  return result;
                default:
                  uint64_t v64 = __cxa_allocate_exception(0x40uLL);
                  sub_5E5C(__t, "Unknown wire type.");
                  unint64_t v65 = (void *)sub_2F404((uint64_t)v64, (long long *)&__t[0].__d_.__rep_);
              }
              break;
          }
        }
        while (sub_30DA40((uint64_t)&v79));
        if (v12 == 6)
        {
          if (v14 == 0x7FFFFFFF)
          {
            if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)__t);
              sub_188FC78(__t, (uint64_t)"Invalid publish time parsed in live data message.", 49);
              std::stringbuf::str();
              sub_7246C((uint64_t *)&__p, 3u);
LABEL_42:
              if (SHIBYTE(v78) < 0) {
                operator delete(__p);
              }
              __t[0].__d_.__rep_ = v75;
              *(std::chrono::duration<long long, std::ratio<1, 1000000>>::rep *)((char *)&__t[0].__d_.__rep_
                                                                               + *(void *)(v75 - 24)) = v74;
              if (v88 < 0) {
                operator delete(v87);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              std::ios::~ios();
            }
          }
          else
          {
            if (v13 != 0x7FFFFFFF)
            {
              __t[0] = std::chrono::system_clock::now();
              if (v13 >= (int)std::chrono::system_clock::to_time_t(__t))
              {
                uint64_t v79 = v9;
                *(void *)&long long v80 = v11;
                *((void *)&v80 + 1) = 0x2C700000000;
                for (BOOL i = sub_30DA40((uint64_t)&v79); i; BOOL i = sub_30DA40((uint64_t)&v79))
                {
                  while (DWORD2(v80) == 4)
                  {
                    sub_30DE40(i, (char **)&v79, (uint64_t)a3);
                    BOOL i = sub_30DA40((uint64_t)&v79);
                    if (!i) {
                      goto LABEL_61;
                    }
                  }
                  switch(HIDWORD(v80))
                  {
                    case 0:
                      sub_2F3C98((uint64_t *)&v79, v80);
                      break;
                    case 1:
                      uint64_t v79 = (char *)v79 + 8;
                      if ((unint64_t)v79 > (unint64_t)v80)
                      {
                        char v70 = __cxa_allocate_exception(0x40uLL);
                        sub_5E5C(__t, "Skipping over bytes exceeded message length.");
                        unsigned int v71 = (void *)sub_2F404((uint64_t)v70, (long long *)&__t[0].__d_.__rep_);
                      }
                      return result;
                    case 2:
                      unsigned int v19 = sub_2F36C8((char **)&v79, (char *)v80);
                      uint64_t v79 = (char *)v79 + v19;
                      if ((unint64_t)v79 > (unint64_t)v80)
                      {
                        uint64_t v68 = __cxa_allocate_exception(0x40uLL);
                        sub_5E5C(__t, "Skipping over bytes exceeded message length.");
                        unint64_t v69 = (void *)sub_2F404((uint64_t)v68, (long long *)&__t[0].__d_.__rep_);
                      }
                      return result;
                    case 5:
                      uint64_t v79 = (char *)v79 + 4;
                      if ((unint64_t)v79 > (unint64_t)v80)
                      {
                        uint64_t v66 = __cxa_allocate_exception(0x40uLL);
                        sub_5E5C(__t, "Skipping over bytes exceeded message length.");
                        int v67 = (void *)sub_2F404((uint64_t)v66, (long long *)&__t[0].__d_.__rep_);
                      }
                      return result;
                    default:
                      unint64_t v72 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(__t, "Unknown wire type.");
                      long long v73 = (void *)sub_2F404((uint64_t)v72, (long long *)&__t[0].__d_.__rep_);
                  }
                }
              }
              else
              {
                ++v7;
              }
              continue;
            }
            if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)__t);
              sub_188FC78(__t, (uint64_t)"Invalid expire time parsed in live data message.", 48);
              std::stringbuf::str();
              sub_7246C((uint64_t *)&__p, 3u);
              goto LABEL_42;
            }
          }
        }
      }
LABEL_61:
      ;
    }
    while (sub_2F333C((uint64_t)&v81));
  }
LABEL_62:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F6888))
  {
    qword_24F6870 = 0;
    *(void *)algn_24F6878 = 0;
    qword_24F6880 = 0;
    __cxa_guard_release(&qword_24F6888);
  }
  sub_30E42C(a3, (uint64_t)__t);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F6888))
  {
    qword_24F6870 = 0;
    *(void *)algn_24F6878 = 0;
    qword_24F6880 = 0;
    __cxa_guard_release(&qword_24F6888);
  }
  unint64_t v20 = (char *)*a3;
  if (*a3)
  {
    int v21 = (char *)a3[1];
    uint64_t v22 = (void *)*a3;
    if (v21 != v20)
    {
      do
      {
        uint64_t v24 = *((void *)v21 - 4);
        if (v24)
        {
          uint64_t v25 = *((void *)v21 - 3);
          uint64_t v23 = (void *)*((void *)v21 - 4);
          if (v25 != v24)
          {
            do
            {
              if (*(char *)(v25 - 17) < 0) {
                operator delete(*(void **)(v25 - 40));
              }
              v25 -= 40;
            }
            while (v25 != v24);
            uint64_t v23 = (void *)*((void *)v21 - 4);
          }
          *((void *)v21 - 3) = v24;
          operator delete(v23);
        }
        v21 -= 40;
      }
      while (v21 != v20);
      uint64_t v22 = (void *)*a3;
    }
    a3[1] = (uint64_t)v20;
    operator delete(v22);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  *(_OWORD *)a3 = *(_OWORD *)&__t[0].__d_.__rep_;
  a3[2] = v86;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F6888))
  {
    qword_24F6870 = 0;
    *(void *)algn_24F6878 = 0;
    qword_24F6880 = 0;
    __cxa_guard_release(&qword_24F6888);
  }
  unsigned int v26 = (void **)(a3 + 3);
  sub_30E42C(a3 + 3, (uint64_t)__t);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6888, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F6888))
  {
    qword_24F6870 = 0;
    *(void *)algn_24F6878 = 0;
    qword_24F6880 = 0;
    __cxa_guard_release(&qword_24F6888);
  }
  int v27 = (char *)*v26;
  if (*v26)
  {
    int v28 = (char *)a3[4];
    char v29 = *v26;
    if (v28 != v27)
    {
      do
      {
        uint64_t v31 = *((void *)v28 - 4);
        if (v31)
        {
          uint64_t v32 = *((void *)v28 - 3);
          uint64_t v30 = (void *)*((void *)v28 - 4);
          if (v32 != v31)
          {
            do
            {
              if (*(char *)(v32 - 17) < 0) {
                operator delete(*(void **)(v32 - 40));
              }
              v32 -= 40;
            }
            while (v32 != v31);
            uint64_t v30 = (void *)*((void *)v28 - 4);
          }
          *((void *)v28 - 3) = v31;
          operator delete(v30);
        }
        v28 -= 40;
      }
      while (v28 != v27);
      char v29 = *v26;
    }
    a3[4] = (uint64_t)v27;
    operator delete(v29);
    *unsigned int v26 = 0;
    a3[4] = 0;
    a3[5] = 0;
  }
  *(_OWORD *)(a3 + 3) = *(_OWORD *)&__t[0].__d_.__rep_;
  a3[5] = v86;
  sub_30F6F4(a3);
  __t[0] = std::chrono::system_clock::now();
  int v33 = std::chrono::system_clock::to_time_t(__t);
  sub_83850((uint64_t)__t);
  uint64_t v34 = operator new(0x30uLL);
  uint64_t v78 = 0;
  uint64_t v79 = v34;
  long long v80 = xmmword_20B93B0;
  strcpy((char *)v34, "data/traffic/LiveEVChargingStationParser.json");
  long long __p = 0;
  std::string::size_type v77 = 0;
  int v35 = sub_81C38((uint64_t)__t, (uint64_t)&v79, (uint64_t *)&__p);
  uint64_t v36 = (void **)__p;
  if (__p)
  {
    uint64_t v37 = v77;
    unint64_t v38 = __p;
    if (v77 != __p)
    {
      do
      {
        if (*((char *)v37 - 1) < 0) {
          operator delete(*(v37 - 3));
        }
        v37 -= 3;
      }
      while (v37 != v36);
      unint64_t v38 = __p;
    }
    std::string::size_type v77 = v36;
    operator delete(v38);
  }
  if (SHIBYTE(v80) < 0) {
    operator delete(v79);
  }
  uint64_t v79 = operator new(0x30uLL);
  long long v80 = xmmword_20E1380;
  strcpy((char *)v79, "stale_live_ev_charging_station_timelimit_min");
  int v39 = sub_5D2EC(v35, &v79);
  if ((SHIBYTE(v80) & 0x80000000) == 0)
  {
    uint64_t v40 = a3[6];
    uint64_t v41 = a3[7];
    if (v40 != v41) {
      goto LABEL_106;
    }
LABEL_115:
    int v43 = 0;
    uint64_t v42 = 0;
    goto LABEL_116;
  }
  operator delete(v79);
  uint64_t v40 = a3[6];
  uint64_t v41 = a3[7];
  if (v40 == v41) {
    goto LABEL_115;
  }
LABEL_106:
  uint64_t v42 = 0;
  int v43 = 0;
  uint64_t v44 = v40;
  do
  {
    uint64_t v45 = *(void *)(v44 + 8);
    uint64_t v46 = *(void *)(v44 + 16);
    while (v45 != v46)
    {
      int v47 = *(_DWORD *)(v45 + 32);
      if (v47 != 0x7FFFFFFF)
      {
        ++v43;
        int v48 = v33 - v47;
        v42 += v48;
        if (10 * v48 > v39) {
          ++*(_DWORD *)(a1 + 28);
        }
      }
      v45 += 40;
    }
    v44 += 40;
  }
  while (v44 != v41);
LABEL_116:
  *(void *)(a1 + 16) = v42;
  *(_DWORD *)(a1 + 24) = v43;
  *(_DWORD *)(a1 + 4) = -858993459 * ((unint64_t)(v41 - v40) >> 3);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)a1 = sub_72688((uint64_t)v84);
  return sub_31262C((uint64_t)__t);
}

void sub_30F4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_30F580(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_30F598(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_30F5B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_30F5C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_30F5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(__p);
    sub_31262C((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  sub_31262C((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_30F62C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_30F644(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_30F65C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_30F670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_30F68C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_30F6F4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (uint64_t *)a1[1];
  unint64_t v4 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - v2) >> 3));
  if (v3 == (uint64_t *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_30FA14(v2, v3, (uint64_t)&v24, v5, 1);
  sub_30F8BC((uint64_t)a1);
  uint64_t v6 = a1[3];
  int v7 = (uint64_t *)a1[4];
  unint64_t v8 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v7 - v6) >> 3));
  if (v7 == (uint64_t *)v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  sub_30FA14(v6, v7, (uint64_t)&v25, v9, 1);
  sub_30F8BC((uint64_t)(a1 + 3));
  sub_311E84(*a1, a1[1], a1[3], a1[4], (uint64_t)(a1 + 6));
  uint64_t v10 = a1[6];
  unint64_t v11 = (uint64_t *)a1[7];
  unint64_t v12 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v11 - v10) >> 3));
  if (v11 == (uint64_t *)v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  sub_30FA14(v10, v11, (uint64_t)&v26, v13, 1);
  sub_30F8BC((uint64_t)(a1 + 6));
  uint64_t v14 = *a1;
  for (uint64_t i = a1[1]; i != v14; i -= 40)
  {
    uint64_t v17 = *(void *)(i - 32);
    if (v17)
    {
      uint64_t v18 = *(void *)(i - 24);
      unint64_t v16 = *(void **)(i - 32);
      if (v18 != v17)
      {
        do
        {
          if (*(char *)(v18 - 17) < 0) {
            operator delete(*(void **)(v18 - 40));
          }
          v18 -= 40;
        }
        while (v18 != v17);
        unint64_t v16 = *(void **)(i - 32);
      }
      *(void *)(i - 24) = v17;
      operator delete(v16);
    }
  }
  a1[1] = v14;
  uint64_t v19 = a1[3];
  for (uint64_t j = a1[4]; j != v19; j -= 40)
  {
    uint64_t v22 = *(void *)(j - 32);
    if (v22)
    {
      uint64_t v23 = *(void *)(j - 24);
      int v21 = *(void **)(j - 32);
      if (v23 != v22)
      {
        do
        {
          if (*(char *)(v23 - 17) < 0) {
            operator delete(*(void **)(v23 - 40));
          }
          v23 -= 40;
        }
        while (v23 != v22);
        int v21 = *(void **)(j - 32);
      }
      *(void *)(j - 24) = v22;
      operator delete(v21);
    }
  }
  a1[4] = v19;
}

uint64_t sub_30F8BC(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)a1 == v3)
  {
    uint64_t v3 = *(void *)a1;
  }
  else
  {
    do
    {
      unint64_t v4 = v2 + 5;
      if (v2 + 5 == (uint64_t *)v3)
      {
        uint64_t v2 = *(uint64_t **)(a1 + 8);
        goto LABEL_21;
      }
      uint64_t v5 = *v2;
      uint64_t v6 = v2[5];
      v2 += 5;
    }
    while (v5 != v6);
    int v7 = v4 + 5;
    unint64_t v8 = v4 - 5;
    if (v4 + 5 != (void *)v3)
    {
      do
      {
        uint64_t v10 = v7;
        uint64_t v11 = *v7;
        if (*v8 != v11)
        {
          v8[5] = v11;
          unint64_t v12 = (void **)(v8 + 6);
          uint64_t v13 = v8[6];
          if (v13)
          {
            uint64_t v14 = v8[7];
            uint64_t v9 = (void *)v8[6];
            if (v14 != v13)
            {
              do
              {
                if (*(char *)(v14 - 17) < 0) {
                  operator delete(*(void **)(v14 - 40));
                }
                v14 -= 40;
              }
              while (v14 != v13);
              uint64_t v9 = *v12;
            }
            v8[7] = v13;
            operator delete(v9);
            char *v12 = 0;
            v8[7] = 0;
            v8[8] = 0;
          }
          *((_OWORD *)v8 + 3) = *((_OWORD *)v4 + 3);
          v8[8] = v4[8];
          v4[6] = 0;
          v4[7] = 0;
          v4[8] = 0;
          *((_DWORD *)v8 + 18) = *((_DWORD *)v4 + 18);
          v8 += 5;
        }
        int v7 = v10 + 5;
        unint64_t v4 = v10;
      }
      while (v10 + 5 != (void *)v3);
      uint64_t v3 = *(void *)(a1 + 8);
    }
    uint64_t v2 = (uint64_t *)v3;
    uint64_t v3 = (uint64_t)(v8 + 5);
  }
LABEL_21:

  return sub_311D34(a1, v3, (uint64_t)v2);
}

void sub_30FA14(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_30FF18(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1 + 5;
    if (a1 + 5 != a2)
    {
      unint64_t v4 = a1;
      unint64_t v19 = a2;
      while (1)
      {
        char v6 = (unint64_t *)v4;
        unint64_t v4 = v3;
        unint64_t v7 = v6[5];
        unint64_t v8 = *v6;
        if (v7 < *v6) {
          break;
        }
        if (v7 == *v6)
        {
          unsigned int v9 = *((_DWORD *)v6 + 18);
          unsigned int v18 = *((_DWORD *)v6 + 8);
          if (v9 != v18)
          {
            if (v9 && v18)
            {
              if (__clz(__rbit32(v9)) < __clz(__rbit32(v18))) {
                goto LABEL_9;
              }
            }
            else if (!v18)
            {
              goto LABEL_9;
            }
          }
        }
LABEL_6:
        uint64_t v3 = v4 + 5;
        if (v4 + 5 == a2) {
          return;
        }
      }
      unsigned int v9 = *((_DWORD *)v6 + 18);
LABEL_9:
      unint64_t v20 = v6[6];
      long long v21 = *(_OWORD *)(v6 + 7);
      v6[7] = 0;
      unsigned char v6[8] = 0;
      v6[6] = 0;
      unsigned int v10 = __clz(__rbit32(v9));
      unint64_t v11 = (unint64_t *)v4;
      uint64_t v12 = (void **)v4[1];
      while (1)
      {
        uint64_t v13 = v6;
        unint64_t *v11 = v8;
        if (v12)
        {
          uint64_t v14 = (void ***)(v11 + 2);
          unint64_t v15 = (void **)v11[2];
          unint64_t v16 = v12;
          if (v15 != v12)
          {
            do
            {
              if (*((char *)v15 - 17) < 0) {
                operator delete(*(v15 - 5));
              }
              v15 -= 5;
            }
            while (v15 != v12);
            unint64_t v16 = (void **)v11[1];
          }
          void *v14 = v12;
          operator delete(v16);
          void *v14 = 0;
          v11[3] = 0;
        }
        *(_OWORD *)(v11 + 1) = *(_OWORD *)(v13 + 1);
        v11[3] = v13[3];
        v13[1] = 0;
        void v13[2] = 0;
        v13[3] = 0;
        *((_DWORD *)v11 + 8) = *((_DWORD *)v13 + 8);
        if (v13 == (unint64_t *)a1) {
          break;
        }
        uint64_t v12 = 0;
        char v6 = v13 - 5;
        unint64_t v8 = *(v13 - 5);
        unint64_t v11 = v13;
        if (v7 >= v8)
        {
          if (v7 != v8 || (unsigned int v17 = *((_DWORD *)v13 - 2), v9 == v17))
          {
LABEL_4:
            char v5 = (uint64_t *)v13;
            goto LABEL_5;
          }
          if (v9 && v17)
          {
            uint64_t v12 = 0;
            unint64_t v11 = v13;
            if (v10 >= __clz(__rbit32(v17))) {
              goto LABEL_4;
            }
          }
          else
          {
            uint64_t v12 = 0;
            unint64_t v11 = v13;
            if (v17) {
              goto LABEL_4;
            }
          }
        }
      }
      char v5 = a1;
LABEL_5:
      a2 = v19;
      uint64_t *v5 = v7;
      v13[1] = v20;
      *((_OWORD *)v5 + 1) = v21;
      *((_DWORD *)v5 + 8) = v9;
      goto LABEL_6;
    }
  }
}

void sub_310110(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v2 = a1;
    uint64_t v3 = a1 + 5;
    if (a1 + 5 != a2)
    {
      unsigned int v18 = a2;
      while (1)
      {
        unint64_t v4 = (unint64_t *)v2;
        uint64_t v2 = v3;
        unint64_t v5 = v4[5];
        unint64_t v6 = *v4;
        if (v5 < *v4) {
          break;
        }
        if (v5 == *v4)
        {
          unsigned int v7 = *((_DWORD *)v4 + 18);
          unsigned int v17 = *((_DWORD *)v4 + 8);
          if (v7 != v17)
          {
            if (v7 && v17)
            {
              if (__clz(__rbit32(v7)) < __clz(__rbit32(v17))) {
                goto LABEL_8;
              }
            }
            else if (!v17)
            {
              goto LABEL_8;
            }
          }
        }
LABEL_5:
        uint64_t v3 = v2 + 5;
        if (v2 + 5 == a2) {
          return;
        }
      }
      unsigned int v7 = *((_DWORD *)v4 + 18);
LABEL_8:
      long long v19 = *((_OWORD *)v4 + 3);
      unint64_t v8 = v4[8];
      v4[7] = 0;
      v4[8] = 0;
      v4[6] = 0;
      unsigned int v9 = __clz(__rbit32(v7));
      unsigned int v10 = (unint64_t *)v2;
      unint64_t v11 = (void **)v2[1];
      while (1)
      {
        do
        {
          uint64_t v12 = v4;
          *unsigned int v10 = v6;
          if (v11)
          {
            uint64_t v14 = (void ***)(v10 + 2);
            uint64_t v13 = (void **)v10[2];
            unint64_t v15 = v11;
            if (v13 != v11)
            {
              do
              {
                if (*((char *)v13 - 17) < 0) {
                  operator delete(*(v13 - 5));
                }
                v13 -= 5;
              }
              while (v13 != v11);
              unint64_t v15 = (void **)v10[1];
            }
            void *v14 = v11;
            operator delete(v15);
            void *v14 = 0;
            v10[3] = 0;
          }
          unint64_t v11 = 0;
          unint64_t v4 = v12 - 5;
          unint64_t v6 = *(v12 - 5);
          *(_OWORD *)(v10 + 1) = *(_OWORD *)(v12 + 1);
          v10[3] = v12[3];
          v12[1] = 0;
          v12[2] = 0;
          v12[3] = 0;
          *((_DWORD *)v10 + 8) = *((_DWORD *)v12 + 8);
          unsigned int v10 = v12;
        }
        while (v5 < v6);
        if (v5 != v6) {
          break;
        }
        unsigned int v16 = *((_DWORD *)v12 - 2);
        if (v7 == v16) {
          break;
        }
        if (v7 && v16)
        {
          unint64_t v11 = 0;
          unsigned int v10 = v12;
          if (v9 >= __clz(__rbit32(v16))) {
            break;
          }
        }
        else
        {
          unint64_t v11 = 0;
          unsigned int v10 = v12;
          if (v16) {
            break;
          }
        }
      }
      unint64_t *v12 = v5;
      *(_OWORD *)(v12 + 1) = v19;
      v12[3] = v8;
      *((_DWORD *)v12 + 8) = v7;
      a2 = v18;
      goto LABEL_5;
    }
  }
}

uint64_t sub_3102EC(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a1;
  if (*a2 < *a1) {
    goto LABEL_2;
  }
  if (*a2 == *a1)
  {
    unsigned int v9 = *((_DWORD *)a2 + 8);
    unsigned int v10 = *((_DWORD *)a1 + 8);
    if (v9 != v10)
    {
      if (v9 && v10)
      {
        if (__clz(__rbit32(v9)) >= __clz(__rbit32(v10))) {
          goto LABEL_17;
        }
      }
      else if (v10)
      {
        goto LABEL_17;
      }
LABEL_2:
      if (*a3 < v3)
      {
LABEL_3:
        unint64_t v5 = a1[3];
        long long v6 = *(_OWORD *)(a1 + 1);
        a1[2] = 0;
        a1[3] = 0;
        a1[1] = 0;
        int v7 = *((_DWORD *)a1 + 8);
        *a1 = *a3;
        *(_OWORD *)(a1 + 1) = *(_OWORD *)(a3 + 1);
        a1[3] = a3[3];
        *((_DWORD *)a1 + 8) = *((_DWORD *)a3 + 8);
        *a3 = v4;
        *(_OWORD *)(a3 + 1) = v6;
        a3[3] = v5;
        *((_DWORD *)a3 + 8) = v7;
        return 1;
      }
      if (*a3 == v3)
      {
        unsigned int v11 = *((_DWORD *)a3 + 8);
        unsigned int v12 = *((_DWORD *)a2 + 8);
        if (v11 != v12)
        {
          if (v11 && v12)
          {
            if (__clz(__rbit32(v11)) < __clz(__rbit32(v12))) {
              goto LABEL_3;
            }
          }
          else if (!v12)
          {
            goto LABEL_3;
          }
        }
      }
      unint64_t v23 = a1[1];
      unint64_t v24 = a1[2];
      unint64_t v25 = a1[3];
      a1[2] = 0;
      a1[3] = 0;
      a1[1] = 0;
      unsigned int v26 = *((_DWORD *)a1 + 8);
      *a1 = *a2;
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
      a1[3] = a2[3];
      *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
      *a2 = v4;
      a2[1] = v23;
      a2[2] = v24;
      a2[3] = v25;
      *((_DWORD *)a2 + 8) = v26;
      if (*a3 < v4) {
        goto LABEL_33;
      }
      if (*a3 != v4) {
        return 1;
      }
      unsigned int v28 = *((_DWORD *)a3 + 8);
      if (v28 == v26) {
        return 1;
      }
      if (v26 && v28)
      {
        if (__clz(__rbit32(v28)) >= __clz(__rbit32(v26))) {
          return 1;
        }
LABEL_33:
        a2[1] = 0;
        a2[2] = 0;
        a2[3] = 0;
        *a2 = *a3;
        *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
        a2[3] = a3[3];
        *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
        *a3 = v4;
        a3[1] = v23;
        a3[2] = v24;
        a3[3] = v25;
        *((_DWORD *)a3 + 8) = v26;
        return 2;
      }
      if (!v26) {
        goto LABEL_33;
      }
      return 1;
    }
  }
LABEL_17:
  if (*a3 < v3)
  {
    int v13 = *((_DWORD *)a2 + 8);
    goto LABEL_19;
  }
  if (*a3 != v3) {
    return 0;
  }
  unsigned int v20 = *((_DWORD *)a3 + 8);
  unsigned int v21 = *((_DWORD *)a2 + 8);
  if (v20 == v21) {
    return 0;
  }
  if (v20 && v21)
  {
    int v13 = *((_DWORD *)a2 + 8);
    if (__clz(__rbit32(v20)) >= __clz(__rbit32(v21))) {
      return 0;
    }
  }
  else
  {
    int v13 = 0;
    uint64_t v27 = 0;
    if (v21) {
      return v27;
    }
  }
LABEL_19:
  unint64_t v14 = a2[3];
  long long v15 = *(_OWORD *)(a2 + 1);
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  *a2 = *a3;
  *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
  a2[3] = a3[3];
  *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
  *a3 = v3;
  *(_OWORD *)(a3 + 1) = v15;
  a3[3] = v14;
  *((_DWORD *)a3 + 8) = v13;
  unint64_t v16 = *a1;
  if (*a2 < *a1)
  {
    unsigned int v17 = *((_DWORD *)a1 + 8);
    goto LABEL_21;
  }
  if (*a2 != *a1) {
    return 1;
  }
  unsigned int v22 = *((_DWORD *)a2 + 8);
  unsigned int v17 = *((_DWORD *)a1 + 8);
  if (v22 == v17) {
    return 1;
  }
  if (v22 && v17)
  {
    if (__clz(__rbit32(v22)) >= __clz(__rbit32(v17))) {
      return 1;
    }
LABEL_21:
    unint64_t v18 = a1[3];
    long long v19 = *(_OWORD *)(a1 + 1);
    a1[2] = 0;
    a1[3] = 0;
    a1[1] = 0;
    *a1 = *a2;
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    a1[3] = a2[3];
    *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
    *a2 = v16;
    *(_OWORD *)(a2 + 1) = v19;
    a2[3] = v18;
    *((_DWORD *)a2 + 8) = v17;
    return 2;
  }
  if (!v17) {
    goto LABEL_21;
  }
  return 1;
}

unint64_t sub_3105E8(uint64_t *a1, unint64_t a2)
{
  unint64_t v3 = *a1;
  unint64_t v5 = a1 + 1;
  uint64_t v4 = a1[1];
  long long v6 = *((_OWORD *)a1 + 1);
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  unsigned int v7 = *((_DWORD *)a1 + 8);
  unint64_t v8 = *(void *)(a2 - 40);
  unsigned int v9 = __rbit32(v7);
  if (v3 < v8)
  {
LABEL_2:
    unint64_t v11 = (unint64_t)(a1 + 5);
    unint64_t v10 = a1[5];
    if (v3 >= v10)
    {
      if (v7)
      {
        unsigned int v12 = __clz(v9);
        do
        {
          if (v3 == v10)
          {
            unsigned int v14 = *(_DWORD *)(v11 + 32);
            if (v7 != v14)
            {
              unsigned int v15 = __clz(__rbit32(v14));
              if (!v14 || v12 < v15) {
                break;
              }
            }
          }
          unint64_t v13 = *(void *)(v11 + 40);
          v11 += 40;
          unint64_t v10 = v13;
        }
        while (v3 >= v13);
      }
      else
      {
        do
        {
          unint64_t v17 = *(void *)(v11 + 40);
          v11 += 40;
        }
        while (v3 >= v17);
      }
    }
    goto LABEL_34;
  }
  if (v3 == v8)
  {
    unsigned int v18 = *(_DWORD *)(a2 - 8);
    if (v7 != v18)
    {
      if (v7 && v18)
      {
        if (__clz(v9) < __clz(__rbit32(v18))) {
          goto LABEL_2;
        }
      }
      else if (!v18)
      {
        goto LABEL_2;
      }
    }
  }
  unint64_t v11 = (unint64_t)(a1 + 5);
  if ((unint64_t)(a1 + 5) < a2)
  {
    if (v7)
    {
      unsigned int v19 = __clz(v9);
      do
      {
        if (v3 < *(void *)v11) {
          break;
        }
        if (v3 == *(void *)v11)
        {
          unsigned int v20 = *(_DWORD *)(v11 + 32);
          if (v7 != v20 && (!v20 || v19 < __clz(__rbit32(v20)))) {
            break;
          }
        }
        v11 += 40;
      }
      while (v11 < a2);
    }
    else
    {
      do
      {
        if (v3 < *(void *)v11) {
          break;
        }
        v11 += 40;
      }
      while (v11 < a2);
    }
  }
LABEL_34:
  if (v11 < a2)
  {
    unsigned int v21 = __clz(v9);
    for (a2 -= 40; ; a2 -= 40)
    {
      if (v3 >= v8)
      {
        if (v3 != v8) {
          break;
        }
        unsigned int v23 = *(_DWORD *)(a2 + 32);
        if (v7 == v23) {
          break;
        }
        if (v7 && v23)
        {
          if (v21 >= __clz(__rbit32(v23))) {
            break;
          }
        }
        else if (v23)
        {
          break;
        }
      }
      unint64_t v22 = *(void *)(a2 - 40);
      unint64_t v8 = v22;
    }
  }
  if (v11 < a2)
  {
    unint64_t v24 = *(void *)v11;
    unsigned int v25 = __clz(v9);
    do
    {
      uint64_t v26 = *(void *)(v11 + 24);
      long long v27 = *(_OWORD *)(v11 + 8);
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = 0;
      *(void *)(v11 + 8) = 0;
      *(void *)unint64_t v11 = *(void *)a2;
      *(void *)a2 = v24;
      *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(v11 + 24) = *(void *)(a2 + 24);
      unint64_t v28 = *(void *)(v11 + 40);
      v11 += 40;
      unint64_t v24 = v28;
      int v29 = *(_DWORD *)(v11 - 8);
      *(_DWORD *)(v11 - 8) = *(_DWORD *)(a2 + 32);
      *(_OWORD *)(a2 + 8) = v27;
      *(void *)(a2 + 24) = v26;
      *(_DWORD *)(a2 + 32) = v29;
      if (v3 >= v28)
      {
        if (v7)
        {
          while (1)
          {
            if (v3 == v24)
            {
              unsigned int v32 = *(_DWORD *)(v11 + 32);
              if (v7 != v32)
              {
                unsigned int v33 = __clz(__rbit32(v32));
                if (!v32 || v25 < v33) {
                  break;
                }
              }
            }
            unint64_t v31 = *(void *)(v11 + 40);
            v11 += 40;
            unint64_t v24 = v31;
            if (v3 < v31) {
              goto LABEL_59;
            }
          }
          unint64_t v24 = v3;
        }
        else
        {
          do
          {
            unint64_t v30 = *(void *)(v11 + 40);
            v11 += 40;
            unint64_t v24 = v30;
          }
          while (v3 >= v30);
        }
      }
LABEL_59:
      if (v7)
      {
        do
        {
          do
          {
            unint64_t v35 = *(void *)(a2 - 40);
            a2 -= 40;
            BOOL v36 = v3 == v35;
          }
          while (v3 < v35);
          if (!v36) {
            break;
          }
          unsigned int v37 = *(_DWORD *)(a2 + 32);
          if (v7 == v37) {
            break;
          }
        }
        while (!v37 || v25 < __clz(__rbit32(v37)));
      }
      else
      {
        do
        {
          unint64_t v38 = *(void *)(a2 - 40);
          a2 -= 40;
        }
        while (v3 < v38);
      }
    }
    while (v11 < a2);
  }
  if ((uint64_t *)(v11 - 40) == a1)
  {
    uint64_t v42 = *(void ***)(v11 - 32);
    *(void *)(v11 - 40) = v3;
    if (v42)
    {
      long long v48 = v6;
      int v43 = *(void ***)(v11 - 24);
      uint64_t v44 = v42;
      if (v43 != v42)
      {
        do
        {
          if (*((char *)v43 - 17) < 0) {
            operator delete(*(v43 - 5));
          }
          v43 -= 5;
        }
        while (v43 != v42);
        uint64_t v44 = *(void ***)(v11 - 32);
      }
      *(void *)(v11 - 24) = v42;
      operator delete(v44);
      *(void *)(v11 - 32) = 0;
      long long v6 = v48;
    }
  }
  else
  {
    *a1 = *(void *)(v11 - 40);
    uint64_t v39 = a1[1];
    if (v39)
    {
      long long v47 = v6;
      uint64_t v40 = a1[2];
      uint64_t v41 = (void *)a1[1];
      if (v40 != v39)
      {
        do
        {
          if (*(char *)(v40 - 17) < 0) {
            operator delete(*(void **)(v40 - 40));
          }
          v40 -= 40;
        }
        while (v40 != v39);
        uint64_t v41 = (void *)*v5;
      }
      a1[2] = v39;
      operator delete(v41);
      uint64_t *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
      long long v6 = v47;
    }
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(v11 - 32);
    a1[3] = *(void *)(v11 - 16);
    int v45 = *(_DWORD *)(v11 - 8);
    *(void *)(v11 - 32) = 0;
    *((_DWORD *)a1 + 8) = v45;
    *(void *)(v11 - 40) = v3;
  }
  *(void *)(v11 - 32) = v4;
  *(_OWORD *)(v11 - 24) = v6;
  *(_DWORD *)(v11 - 8) = v7;
  return v11;
}

unint64_t sub_3109A0(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v4 = *a1;
  long long v6 = a1 + 1;
  uint64_t v5 = a1[1];
  long long v7 = *((_OWORD *)a1 + 1);
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  unsigned int v8 = *((_DWORD *)a1 + 8);
  unsigned int v9 = __clz(__rbit32(v8));
  unint64_t v10 = (unint64_t *)(a1 + 5);
  if (v8)
  {
    while (1)
    {
      unint64_t v11 = *v10;
      if (*v10 >= v4)
      {
        if (*v10 != v4) {
          break;
        }
        unsigned int v12 = *((_DWORD *)v10 + 8);
        unsigned int v13 = __clz(__rbit32(v12));
        BOOL v14 = v12 == v8 || v12 == 0;
        if (v14 || v13 >= v9) {
          break;
        }
      }
      v10 += 5;
    }
  }
  else
  {
    while (1)
    {
      unint64_t v11 = *v10;
      if (*v10 >= v4 && (*v10 != v4 || !*((_DWORD *)v10 + 8))) {
        break;
      }
      v10 += 5;
    }
  }
  if (v10 - 5 == (unint64_t *)a1)
  {
LABEL_51:
    if ((unint64_t)v10 < v2)
    {
      while (1)
      {
        unint64_t v24 = *(void *)(v2 - 40);
        v2 -= 40;
        unint64_t v23 = v24;
        if (v24 < v4) {
          break;
        }
        if (v23 != v4) {
          goto LABEL_51;
        }
        unsigned int v25 = *(_DWORD *)(v2 + 32);
        if (v25 == v8) {
          goto LABEL_51;
        }
        if (v8 && v25)
        {
          if (__clz(__rbit32(v25)) < v9 || (unint64_t)v10 >= v2) {
            break;
          }
        }
        else if ((unint64_t)v10 >= v2 || !v8)
        {
          break;
        }
      }
    }
  }
  else
  {
    unint64_t v2 = a2 - 40;
    unint64_t v16 = *(void *)(a2 - 40);
    if (v16 >= v4)
    {
      if (v8)
      {
        do
        {
          if (v16 == v4)
          {
            unsigned int v18 = *(_DWORD *)(v2 + 32);
            unsigned int v19 = __clz(__rbit32(v18));
            BOOL v20 = v18 == v8 || v18 == 0;
            if (!v20 && v19 < v9) {
              break;
            }
          }
          unint64_t v17 = *(void *)(v2 - 40);
          v2 -= 40;
          unint64_t v16 = v17;
        }
        while (v17 >= v4);
      }
      else
      {
        do
        {
          if (v16 == v4 && *(_DWORD *)(v2 + 32)) {
            break;
          }
          unint64_t v22 = *(void *)(v2 - 40);
          v2 -= 40;
          unint64_t v16 = v22;
        }
        while (v22 >= v4);
      }
    }
  }
  unint64_t v27 = (unint64_t)v10;
  if ((unint64_t)v10 < v2)
  {
    unint64_t v27 = (unint64_t)v10;
    unint64_t v28 = v2;
    do
    {
      uint64_t v29 = *(void *)(v27 + 24);
      long long v30 = *(_OWORD *)(v27 + 8);
      *(void *)(v27 + 16) = 0;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 8) = 0;
      int v31 = *(_DWORD *)(v27 + 32);
      *(void *)unint64_t v27 = *(void *)v28;
      *(_OWORD *)(v27 + 8) = *(_OWORD *)(v28 + 8);
      *(void *)(v27 + 24) = *(void *)(v28 + 24);
      *(_DWORD *)(v27 + 32) = *(_DWORD *)(v28 + 32);
      *(void *)unint64_t v28 = v11;
      *(_OWORD *)(v28 + 8) = v30;
      *(void *)(v28 + 24) = v29;
      *(_DWORD *)(v28 + 32) = v31;
      if (v8)
      {
        do
        {
          do
          {
            unint64_t v32 = *(void *)(v27 + 40);
            v27 += 40;
            unint64_t v11 = v32;
            BOOL v33 = v32 == v4;
          }
          while (v32 < v4);
          if (!v33) {
            break;
          }
          unsigned int v34 = *(_DWORD *)(v27 + 32);
          unsigned int v35 = __clz(__rbit32(v34));
          BOOL v36 = v34 == v8 || v34 == 0;
        }
        while (!v36 && v35 < v9);
      }
      else
      {
        do
        {
          do
          {
            unint64_t v38 = *(void *)(v27 + 40);
            v27 += 40;
            unint64_t v11 = v38;
            BOOL v39 = v38 == v4;
          }
          while (v38 < v4);
        }
        while (v39 && *(_DWORD *)(v27 + 32));
      }
      unint64_t v41 = *(void *)(v28 - 40);
      v28 -= 40;
      unint64_t v40 = v41;
      if (v41 >= v4)
      {
        if (v8)
        {
          do
          {
            if (v40 == v4)
            {
              unsigned int v43 = *(_DWORD *)(v28 + 32);
              unsigned int v44 = __clz(__rbit32(v43));
              BOOL v45 = v43 == v8 || v43 == 0;
              if (!v45 && v44 < v9) {
                break;
              }
            }
            unint64_t v42 = *(void *)(v28 - 40);
            v28 -= 40;
            unint64_t v40 = v42;
          }
          while (v42 >= v4);
        }
        else
        {
          do
          {
            if (v40 == v4 && *(_DWORD *)(v28 + 32)) {
              break;
            }
            unint64_t v47 = *(void *)(v28 - 40);
            v28 -= 40;
            unint64_t v40 = v47;
          }
          while (v47 >= v4);
        }
      }
    }
    while (v27 < v28);
  }
  if ((uint64_t *)(v27 - 40) == a1)
  {
    uint64_t v51 = *(void ***)(v27 - 32);
    *(void *)(v27 - 40) = v4;
    if (v51)
    {
      uint64_t v52 = v5;
      long long v59 = v7;
      uint64_t v53 = *(void ***)(v27 - 24);
      uint64_t v54 = v51;
      if (v53 != v51)
      {
        do
        {
          if (*((char *)v53 - 17) < 0) {
            operator delete(*(v53 - 5));
          }
          v53 -= 5;
        }
        while (v53 != v51);
        uint64_t v54 = *(void ***)(v27 - 32);
      }
      *(void *)(v27 - 24) = v51;
      operator delete(v54);
      *(void *)(v27 - 32) = 0;
      long long v7 = v59;
      uint64_t v5 = v52;
    }
  }
  else
  {
    *a1 = *(void *)(v27 - 40);
    uint64_t v48 = a1[1];
    if (v48)
    {
      uint64_t v57 = v5;
      long long v58 = v7;
      uint64_t v49 = a1[2];
      uint64_t v50 = (void *)a1[1];
      if (v49 != v48)
      {
        do
        {
          if (*(char *)(v49 - 17) < 0) {
            operator delete(*(void **)(v49 - 40));
          }
          v49 -= 40;
        }
        while (v49 != v48);
        uint64_t v50 = (void *)*v6;
      }
      a1[2] = v48;
      operator delete(v50);
      uint64_t *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      long long v7 = v58;
      uint64_t v5 = v57;
    }
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(v27 - 32);
    a1[3] = *(void *)(v27 - 16);
    int v55 = *(_DWORD *)(v27 - 8);
    *(void *)(v27 - 32) = 0;
    *((_DWORD *)a1 + 8) = v55;
    *(void *)(v27 - 40) = v4;
  }
  *(void *)(v27 - 32) = v5;
  *(_OWORD *)(v27 - 24) = v7;
  *(_DWORD *)(v27 - 8) = v8;
  return v27 - 40;
}

BOOL sub_310D60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = *(void *)(a2 - 40);
      unint64_t v7 = *(void *)a1;
      if (v6 < *(void *)a1)
      {
        unsigned int v8 = *(_DWORD *)(a1 + 32);
LABEL_5:
        uint64_t v9 = *(void *)(a1 + 24);
        long long v10 = *(_OWORD *)(a1 + 8);
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)a1 = *(void *)(a2 - 40);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 32);
        *(void *)(a1 + 24) = *(void *)(a2 - 16);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 - 8);
        *(void *)(a2 - 40) = v7;
        *(_OWORD *)(a2 - 32) = v10;
        *(void *)(a2 - 16) = v9;
        *(_DWORD *)(a2 - 8) = v8;
        return result;
      }
      if (v6 == *(void *)a1)
      {
        unsigned int v29 = *(_DWORD *)(a2 - 8);
        unsigned int v8 = *(_DWORD *)(a1 + 32);
        if (v29 != v8)
        {
          if (v29 && v8)
          {
            if (__clz(__rbit32(v29)) < __clz(__rbit32(v8))) {
              goto LABEL_5;
            }
          }
          else if (!v8)
          {
            goto LABEL_5;
          }
        }
      }
      return result;
    case 3uLL:
      sub_3102EC((unint64_t *)a1, (unint64_t *)(a1 + 40), (unint64_t *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_311150(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      sub_311354(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v11 = a1 + 80;
      sub_3102EC((unint64_t *)a1, (unint64_t *)(a1 + 40), (unint64_t *)(a1 + 80));
      uint64_t v12 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      while (2)
      {
        unint64_t v16 = *(void *)v12;
        if (*(void *)v12 >= *(void *)v11)
        {
          if (*(void *)v12 != *(void *)v11) {
            goto LABEL_12;
          }
          unsigned int v17 = *(_DWORD *)(v12 + 32);
          unsigned int v28 = *(_DWORD *)(v11 + 32);
          if (v17 == v28) {
            goto LABEL_12;
          }
          if (v17 && v28)
          {
            if (__clz(__rbit32(v17)) >= __clz(__rbit32(v28))) {
              goto LABEL_12;
            }
          }
          else if (v28)
          {
            goto LABEL_12;
          }
        }
        else
        {
          unsigned int v17 = *(_DWORD *)(v12 + 32);
        }
        uint64_t v18 = *(void *)(v12 + 8);
        long long v19 = *(_OWORD *)(v12 + 16);
        *(void *)(v12 + 16) = 0;
        *(void *)(v12 + 24) = 0;
        *(void *)(v12 + 8) = 0;
        *(void *)uint64_t v12 = *(void *)v11;
        int v20 = *(_DWORD *)(v11 + 32);
        unsigned int v15 = (void *)(v11 + 8);
        *(_OWORD *)(v12 + 8) = *(_OWORD *)(v11 + 8);
        *(void *)(v12 + 24) = *(void *)(v11 + 24);
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)(v11 + 24) = 0;
        *(_DWORD *)(v12 + 32) = v20;
        if (v11 == a1)
        {
LABEL_10:
          uint64_t v11 = a1;
          goto LABEL_11;
        }
        unsigned int v21 = __clz(__rbit32(v17));
        uint64_t v22 = v13;
        while (2)
        {
          uint64_t v24 = a1 + v22;
          unint64_t v25 = *(void *)(a1 + v22 + 40);
          if (v16 < v25) {
            goto LABEL_18;
          }
          if (v16 != v25) {
            goto LABEL_11;
          }
          uint64_t v26 = a1 + v22;
          unsigned int v27 = *(_DWORD *)(a1 + v22 + 72);
          if (v17 != v27)
          {
            if (v17 && v27)
            {
              if (v21 >= __clz(__rbit32(v27))) {
                goto LABEL_11;
              }
            }
            else if (v27)
            {
              goto LABEL_11;
            }
LABEL_18:
            unsigned int v15 = (void *)(v11 - 32);
            v11 -= 40;
            *(void *)(v24 + 80) = v25;
            int v23 = *(_DWORD *)(v24 + 72);
            *(_OWORD *)(v24 + 88) = *(_OWORD *)(v24 + 48);
            *(void *)(v24 + 104) = *(void *)(v24 + 64);
            *(void *)(v24 + 48) = 0;
            *(void *)(v24 + 56) = 0;
            *(void *)(v24 + 64) = 0;
            *(_DWORD *)(v24 + 112) = v23;
            v22 -= 40;
            if (v22 == -80)
            {
              unsigned int v15 = (void *)(a1 + 8);
              goto LABEL_10;
            }
            continue;
          }
          break;
        }
        unsigned int v15 = (void *)(v26 + 88);
        uint64_t v11 = v26 + 80;
LABEL_11:
        *(void *)uint64_t v11 = v16;
        *unsigned int v15 = v18;
        *(_OWORD *)(v11 + 16) = v19;
        *(_DWORD *)(v11 + 32) = v17;
        if (++v14 != 8)
        {
LABEL_12:
          uint64_t v11 = v12;
          v13 += 40;
          v12 += 40;
          if (v12 == a2) {
            return 1;
          }
          continue;
        }
        return v12 + 40 == a2;
      }
  }
}

uint64_t sub_3110DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 17) < 0) {
          operator delete(*(void **)(v3 - 40));
        }
        v3 -= 40;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_311150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_3102EC((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  unint64_t v9 = *(void *)a3;
  if (*(void *)a4 >= *(void *)a3)
  {
    if (*(void *)a4 != *(void *)a3) {
      return result;
    }
    unsigned int v21 = *(_DWORD *)(a4 + 32);
    unsigned int v10 = *(_DWORD *)(a3 + 32);
    if (v21 == v10) {
      return result;
    }
    if (v21 && v10)
    {
      if (__clz(__rbit32(v21)) >= __clz(__rbit32(v10))) {
        return result;
      }
    }
    else if (v10)
    {
      return result;
    }
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(a3 + 32);
  }
  uint64_t v11 = *(void *)(a3 + 24);
  long long v12 = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = *(void *)a4;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
  *(void *)(a3 + 24) = *(void *)(a4 + 24);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
  *(void *)a4 = v9;
  *(_OWORD *)(a4 + 8) = v12;
  *(void *)(a4 + 24) = v11;
  *(_DWORD *)(a4 + 32) = v10;
  unint64_t v13 = *(void *)a2;
  if (*(void *)a3 >= *(void *)a2)
  {
    if (*(void *)a3 != *(void *)a2) {
      return result;
    }
    unsigned int v22 = *(_DWORD *)(a3 + 32);
    unsigned int v14 = *(_DWORD *)(a2 + 32);
    if (v22 == v14) {
      return result;
    }
    if (v22 && v14)
    {
      if (__clz(__rbit32(v22)) >= __clz(__rbit32(v14))) {
        return result;
      }
    }
    else if (v14)
    {
      return result;
    }
  }
  else
  {
    unsigned int v14 = *(_DWORD *)(a2 + 32);
  }
  uint64_t v15 = *(void *)(a2 + 24);
  long long v16 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = *(void *)a3;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(void *)a3 = v13;
  *(_OWORD *)(a3 + 8) = v16;
  *(void *)(a3 + 24) = v15;
  *(_DWORD *)(a3 + 32) = v14;
  unint64_t v17 = *(void *)a1;
  if (*(void *)a2 < *(void *)a1)
  {
    unsigned int v18 = *(_DWORD *)(a1 + 32);
LABEL_7:
    uint64_t v19 = *(void *)(a1 + 24);
    long long v20 = *(_OWORD *)(a1 + 8);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)a1 = *(void *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(void *)a2 = v17;
    *(_OWORD *)(a2 + 8) = v20;
    *(void *)(a2 + 24) = v19;
    *(_DWORD *)(a2 + 32) = v18;
    return result;
  }
  if (*(void *)a2 == *(void *)a1)
  {
    unsigned int v23 = *(_DWORD *)(a2 + 32);
    unsigned int v18 = *(_DWORD *)(a1 + 32);
    if (v23 != v18)
    {
      if (v23 && v18)
      {
        if (__clz(__rbit32(v23)) < __clz(__rbit32(v18))) {
          goto LABEL_7;
        }
      }
      else if (!v18)
      {
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t sub_311354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_311150(a1, a2, a3, a4);
  uint64_t v11 = *(void *)a4;
  if (*(void *)a5 >= *(void *)a4)
  {
    if (*(void *)a5 != *(void *)a4) {
      return result;
    }
    unsigned int v27 = *(_DWORD *)(a5 + 32);
    unsigned int v12 = *(_DWORD *)(a4 + 32);
    if (v27 == v12) {
      return result;
    }
    if (v27 && v12)
    {
      if (__clz(__rbit32(v27)) >= __clz(__rbit32(v12))) {
        return result;
      }
    }
    else if (v12)
    {
      return result;
    }
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(a4 + 32);
  }
  uint64_t v13 = *(void *)(a4 + 24);
  long long v14 = *(_OWORD *)(a4 + 8);
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)a4 = *(void *)a5;
  *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 8);
  *(void *)(a4 + 24) = *(void *)(a5 + 24);
  *(_DWORD *)(a4 + 32) = *(_DWORD *)(a5 + 32);
  *(void *)a5 = v11;
  *(_OWORD *)(a5 + 8) = v14;
  *(void *)(a5 + 24) = v13;
  *(_DWORD *)(a5 + 32) = v12;
  uint64_t v15 = *(void *)a3;
  if (*(void *)a4 >= *(void *)a3)
  {
    if (*(void *)a4 != *(void *)a3) {
      return result;
    }
    unsigned int v28 = *(_DWORD *)(a4 + 32);
    unsigned int v16 = *(_DWORD *)(a3 + 32);
    if (v28 == v16) {
      return result;
    }
    if (v28 && v16)
    {
      if (__clz(__rbit32(v28)) >= __clz(__rbit32(v16))) {
        return result;
      }
    }
    else if (v16)
    {
      return result;
    }
  }
  else
  {
    unsigned int v16 = *(_DWORD *)(a3 + 32);
  }
  uint64_t v17 = *(void *)(a3 + 24);
  long long v18 = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)a3 = *(void *)a4;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
  *(void *)(a3 + 24) = *(void *)(a4 + 24);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
  *(void *)a4 = v15;
  *(_OWORD *)(a4 + 8) = v18;
  *(void *)(a4 + 24) = v17;
  *(_DWORD *)(a4 + 32) = v16;
  uint64_t v19 = *(void *)a2;
  if (*(void *)a3 >= *(void *)a2)
  {
    if (*(void *)a3 != *(void *)a2) {
      return result;
    }
    unsigned int v29 = *(_DWORD *)(a3 + 32);
    unsigned int v20 = *(_DWORD *)(a2 + 32);
    if (v29 == v20) {
      return result;
    }
    if (v29 && v20)
    {
      if (__clz(__rbit32(v29)) >= __clz(__rbit32(v20))) {
        return result;
      }
    }
    else if (v20)
    {
      return result;
    }
  }
  else
  {
    unsigned int v20 = *(_DWORD *)(a2 + 32);
  }
  uint64_t v21 = *(void *)(a2 + 24);
  long long v22 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = *(void *)a3;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(void *)a3 = v19;
  *(_OWORD *)(a3 + 8) = v22;
  *(void *)(a3 + 24) = v21;
  *(_DWORD *)(a3 + 32) = v20;
  uint64_t v23 = *(void *)a1;
  if (*(void *)a2 < *(void *)a1)
  {
    unsigned int v24 = *(_DWORD *)(a1 + 32);
LABEL_9:
    uint64_t v25 = *(void *)(a1 + 24);
    long long v26 = *(_OWORD *)(a1 + 8);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)a1 = *(void *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(void *)a2 = v23;
    *(_OWORD *)(a2 + 8) = v26;
    *(void *)(a2 + 24) = v25;
    *(_DWORD *)(a2 + 32) = v24;
    return result;
  }
  if (*(void *)a2 == *(void *)a1)
  {
    unsigned int v30 = *(_DWORD *)(a2 + 32);
    unsigned int v24 = *(_DWORD *)(a1 + 32);
    if (v30 != v24)
    {
      if (v30 && v24)
      {
        if (__clz(__rbit32(v30)) < __clz(__rbit32(v24))) {
          goto LABEL_9;
        }
      }
      else if (!v24)
      {
        goto LABEL_9;
      }
    }
  }
  return result;
}

uint64_t sub_3115FC(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 < 2) {
    return result;
  }
  int64_t v4 = (unint64_t)(a3 - 2) >> 1;
  if (v4 < (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - result) >> 3))) {
    return result;
  }
  int64_t v5 = (0x999999999999999ALL * (((uint64_t)a4 - result) >> 3)) | 1;
  unint64_t v6 = (unint64_t *)(result + 40 * v5);
  if ((uint64_t)(0x999999999999999ALL * (((uint64_t)a4 - result) >> 3) + 2) >= a3) {
    goto LABEL_16;
  }
  unint64_t v7 = v6[5];
  if (*v6 >= v7)
  {
    if (*v6 != v7) {
      goto LABEL_16;
    }
    unsigned int v8 = *(_DWORD *)(result + 40 * v5 + 32);
    unsigned int v9 = *((_DWORD *)v6 + 18);
    if (v8 == v9) {
      goto LABEL_16;
    }
    if (v8) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      if (v9) {
        goto LABEL_16;
      }
    }
    else if (__clz(__rbit32(v8)) >= __clz(__rbit32(v9)))
    {
      goto LABEL_16;
    }
  }
  v6 += 5;
  int64_t v5 = 0x999999999999999ALL * (((uint64_t)a4 - result) >> 3) + 2;
LABEL_16:
  unint64_t v11 = *a4;
  if (*v6 < *a4) {
    return result;
  }
  if (*v6 == *a4)
  {
    unsigned int v14 = *((_DWORD *)v6 + 8);
    unsigned int v12 = *((_DWORD *)a4 + 8);
    if (v14 != v12)
    {
      if (v14) {
        BOOL v13 = v12 == 0;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        unsigned int v14 = *((_DWORD *)a4 + 8);
        if (!v12) {
          return result;
        }
      }
      else
      {
        unsigned int v30 = __clz(__rbit32(v14));
        unsigned int v14 = *((_DWORD *)a4 + 8);
        if (v30 < __clz(__rbit32(v12))) {
          return result;
        }
      }
    }
  }
  else
  {
    unsigned int v14 = *((_DWORD *)a4 + 8);
  }
  unint64_t v15 = a4[1];
  unint64_t v16 = a4[2];
  unint64_t v17 = a4[3];
  a4[2] = 0;
  a4[3] = 0;
  a4[1] = 0;
  *a4 = *v6;
  int v18 = *((_DWORD *)v6 + 8);
  *(_OWORD *)(a4 + 1) = *(_OWORD *)(v6 + 1);
  a4[3] = v6[3];
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = 0;
  *((_DWORD *)a4 + 8) = v18;
  if (v4 < v5) {
    goto LABEL_53;
  }
  unsigned int v19 = __clz(__rbit32(v14));
  while (1)
  {
    uint64_t v21 = v6;
    uint64_t v22 = 2 * v5;
    int64_t v5 = (2 * v5) | 1;
    unint64_t v6 = (unint64_t *)(result + 40 * v5);
    int64_t v23 = v22 + 2;
    if (v23 >= a3) {
      goto LABEL_43;
    }
    unint64_t v24 = v6[5];
    if (*v6 < v24)
    {
LABEL_32:
      v6 += 5;
      int64_t v5 = v23;
      goto LABEL_43;
    }
    if (*v6 == v24)
    {
      unsigned int v25 = *(_DWORD *)(result + 40 * v5 + 32);
      unsigned int v26 = *((_DWORD *)v6 + 18);
      if (v25 != v26)
      {
        if (v25) {
          BOOL v27 = v26 == 0;
        }
        else {
          BOOL v27 = 1;
        }
        if (v27)
        {
          if (!v26) {
            goto LABEL_32;
          }
        }
        else if (__clz(__rbit32(v25)) < __clz(__rbit32(v26)))
        {
          goto LABEL_32;
        }
      }
    }
LABEL_43:
    if (*v6 < v11) {
      goto LABEL_52;
    }
    if (*v6 == v11)
    {
      unsigned int v28 = *((_DWORD *)v6 + 8);
      if (v28 != v14) {
        break;
      }
    }
LABEL_29:
    *uint64_t v21 = *v6;
    int v20 = *((_DWORD *)v6 + 8);
    *(_OWORD *)(v21 + 1) = *(_OWORD *)(v6 + 1);
    v21[3] = v6[3];
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    *((_DWORD *)v21 + 8) = v20;
    if (v4 < v5) {
      goto LABEL_53;
    }
  }
  if (v28) {
    BOOL v29 = v14 == 0;
  }
  else {
    BOOL v29 = 1;
  }
  if (!v29)
  {
    if (__clz(__rbit32(v28)) < v19) {
      goto LABEL_52;
    }
    goto LABEL_29;
  }
  if (v14) {
    goto LABEL_29;
  }
LABEL_52:
  unint64_t v6 = v21;
LABEL_53:
  unint64_t *v6 = v11;
  v6[1] = v15;
  v6[2] = v16;
  v6[3] = v17;
  *((_DWORD *)v6 + 8) = v14;
  return result;
}

void sub_311860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *(void *)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a1 + 24);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    unsigned int v12 = (void *)sub_311A34(a1, a3, a4);
    BOOL v13 = v12;
    if (v12 == (void *)(a2 - 40))
    {
      void *v12 = v8;
      int v18 = (void **)(v12 + 1);
      uint64_t v19 = v12[1];
      if (v19)
      {
        uint64_t v20 = v12[2];
        uint64_t v21 = (void *)v12[1];
        if (v20 != v19)
        {
          do
          {
            if (*(char *)(v20 - 17) < 0) {
              operator delete(*(void **)(v20 - 40));
            }
            v20 -= 40;
          }
          while (v20 != v19);
          uint64_t v21 = *v18;
        }
        void v13[2] = v19;
        operator delete(v21);
        uint64_t *v18 = 0;
        void v13[2] = 0;
        v13[3] = 0;
      }
      v13[1] = v7;
      void v13[2] = v9;
      v13[3] = v10;
      *((_DWORD *)v13 + 8) = v11;
    }
    else
    {
      uint64_t v23 = v10;
      uint64_t v24 = v9;
      void *v12 = *(void *)(a2 - 40);
      unsigned int v14 = (void **)(v12 + 1);
      uint64_t v15 = v12[1];
      if (v15)
      {
        uint64_t v22 = v7;
        uint64_t v16 = v12[2];
        unint64_t v17 = (void *)v12[1];
        if (v16 != v15)
        {
          do
          {
            if (*(char *)(v16 - 17) < 0) {
              operator delete(*(void **)(v16 - 40));
            }
            v16 -= 40;
          }
          while (v16 != v15);
          unint64_t v17 = *v14;
        }
        void v13[2] = v15;
        operator delete(v17);
        void *v14 = 0;
        void v13[2] = 0;
        v13[3] = 0;
        uint64_t v7 = v22;
      }
      *(_OWORD *)(v13 + 1) = *(_OWORD *)(a2 - 32);
      v13[3] = *(void *)(a2 - 16);
      *((_DWORD *)v13 + 8) = *(_DWORD *)(a2 - 8);
      *(void *)(a2 - 40) = v8;
      *(void *)(a2 - 32) = v7;
      *(void *)(a2 - 24) = v24;
      *(void *)(a2 - 16) = v23;
      *(_DWORD *)(a2 - 8) = v11;
      sub_311BA8(a1, (uint64_t)(v13 + 5), a3, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v13 - a1 + 40) >> 3));
    }
  }
}

void sub_311A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_3110DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_311A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v9 = v5 + 1;
    uint64_t v10 = a1 + 40 * (v5 + 1);
    uint64_t v11 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v12 = v11 + 2;
    if (v12 >= a3) {
      goto LABEL_20;
    }
    unint64_t v13 = *(void *)(v10 + 40);
    if (*(void *)v10 < v13)
    {
LABEL_9:
      v10 += 40;
      uint64_t v5 = v12;
      goto LABEL_20;
    }
    if (*(void *)v10 == v13)
    {
      unsigned int v14 = *(_DWORD *)(a1 + 40 * v9 + 32);
      unsigned int v15 = *(_DWORD *)(v10 + 72);
      if (v14 != v15)
      {
        if (v14) {
          BOOL v16 = v15 == 0;
        }
        else {
          BOOL v16 = 1;
        }
        if (v16)
        {
          if (!v15) {
            goto LABEL_9;
          }
        }
        else if (__clz(__rbit32(v14)) < __clz(__rbit32(v15)))
        {
          goto LABEL_9;
        }
      }
    }
LABEL_20:
    *(void *)a1 = *(void *)v10;
    unint64_t v17 = (void **)(a1 + 8);
    uint64_t v18 = *(void *)(a1 + 8);
    if (v18)
    {
      uint64_t v19 = *(void *)(a1 + 16);
      uint64_t v8 = *(void **)(a1 + 8);
      if (v19 != v18)
      {
        do
        {
          if (*(char *)(v19 - 17) < 0) {
            operator delete(*(void **)(v19 - 40));
          }
          v19 -= 40;
        }
        while (v19 != v18);
        uint64_t v8 = *v17;
      }
      *(void *)(a1 + 16) = v18;
      operator delete(v8);
      void *v17 = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
    }
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v10 + 8);
    *(void *)(a1 + 24) = *(void *)(v10 + 24);
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v10 + 32);
    a1 = v10;
  }
  while (v5 <= v7);
  return v10;
}

uint64_t sub_311BA8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4 = a4 < 2;
  unint64_t v5 = a4 - 2;
  if (!v4)
  {
    unint64_t v6 = v5 >> 1;
    uint64_t v7 = result + 40 * (v5 >> 1);
    unint64_t v8 = *(void *)(a2 - 40);
    if (*(void *)v7 >= v8)
    {
      if (*(void *)v7 != v8) {
        return result;
      }
      unsigned int v20 = *(_DWORD *)(result + 40 * v6 + 32);
      unsigned int v9 = *(_DWORD *)(a2 - 8);
      if (v20 == v9) {
        return result;
      }
      if (v20) {
        BOOL v21 = v9 == 0;
      }
      else {
        BOOL v21 = 1;
      }
      if (v21)
      {
        if (v9) {
          return result;
        }
      }
      else if (__clz(__rbit32(v20)) >= __clz(__rbit32(v9)))
      {
        return result;
      }
    }
    else
    {
      unsigned int v9 = *(_DWORD *)(a2 - 8);
    }
    uint64_t v10 = *(void *)(a2 - 32);
    uint64_t v11 = *(void *)(a2 - 24);
    uint64_t v12 = *(void *)(a2 - 16);
    *(void *)(a2 - 24) = 0;
    *(void *)(a2 - 16) = 0;
    *(void *)(a2 - 32) = 0;
    *(void *)(a2 - 40) = *(void *)v7;
    unint64_t v13 = (void *)(result + 40 * v6);
    unsigned int v14 = v13 + 1;
    *(_OWORD *)(a2 - 32) = *(_OWORD *)(v13 + 1);
    unsigned int v15 = v13 + 3;
    *(void *)(a2 - 16) = v13[3];
    void v13[2] = 0;
    BOOL v16 = v13 + 2;
    unint64_t v17 = (unsigned int *)(v16 + 2);
    int v18 = *((_DWORD *)v16 + 4);
    void *v14 = 0;
    *unsigned int v15 = 0;
    *(_DWORD *)(a2 - 8) = v18;
    if (v5 >= 2)
    {
      unsigned int v22 = __clz(__rbit32(v9));
      while (1)
      {
        unint64_t v25 = v6 - 1;
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v19 = (unint64_t *)(result + 40 * v6);
        unint64_t v26 = *v19;
        if (*v19 >= v8)
        {
          if (*v19 != v8) {
            break;
          }
          unsigned int v27 = *(_DWORD *)(result + 40 * v6 + 32);
          if (v27 == v9) {
            break;
          }
          if (v27) {
            BOOL v28 = v9 == 0;
          }
          else {
            BOOL v28 = 1;
          }
          if (v28)
          {
            if (v9) {
              break;
            }
          }
          else if (__clz(__rbit32(v27)) >= v22)
          {
            break;
          }
        }
        uint64_t v23 = (void *)(result + 40 * v6);
        unsigned int v14 = v23 + 1;
        *(_OWORD *)(v7 + 8) = *(_OWORD *)(v23 + 1);
        unsigned int v15 = v23 + 3;
        *(void *)(v7 + 24) = v23[3];
        v23[2] = 0;
        BOOL v16 = v23 + 2;
        unint64_t v17 = (unsigned int *)(v16 + 2);
        int v24 = *((_DWORD *)v16 + 4);
        *(void *)uint64_t v7 = v26;
        void *v14 = 0;
        *unsigned int v15 = 0;
        *(_DWORD *)(v7 + 32) = v24;
        uint64_t v7 = result + 40 * v6;
        if (v25 <= 1) {
          goto LABEL_6;
        }
      }
    }
    uint64_t v19 = (unint64_t *)v7;
LABEL_6:
    unint64_t *v19 = v8;
    void *v14 = v10;
    void *v16 = v11;
    *unsigned int v15 = v12;
    unsigned int *v17 = v9;
  }
  return result;
}

uint64_t sub_311D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = a2;
    if (a3 != v6)
    {
      do
      {
        *(void *)uint64_t v7 = *(void *)v5;
        unsigned int v9 = (void **)(v7 + 8);
        uint64_t v10 = *(void *)(v7 + 8);
        if (v10)
        {
          uint64_t v11 = *(void *)(v7 + 16);
          unint64_t v8 = *(void **)(v7 + 8);
          if (v11 != v10)
          {
            do
            {
              if (*(char *)(v11 - 17) < 0) {
                operator delete(*(void **)(v11 - 40));
              }
              v11 -= 40;
            }
            while (v11 != v10);
            unint64_t v8 = *v9;
          }
          *(void *)(v7 + 16) = v10;
          operator delete(v8);
          *unsigned int v9 = 0;
          *(void *)(v7 + 16) = 0;
          *(void *)(v7 + 24) = 0;
        }
        *(_OWORD *)(v7 + 8) = *(_OWORD *)(v5 + 8);
        *(void *)(v7 + 24) = *(void *)(v5 + 24);
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        *(void *)(v5 + 24) = 0;
        *(_DWORD *)(v7 + 32) = *(_DWORD *)(v5 + 32);
        v5 += 40;
        v7 += 40;
      }
      while (v5 != v6);
      uint64_t v5 = *(void *)(a1 + 8);
    }
    while (v5 != v7)
    {
      uint64_t v13 = *(void *)(v5 - 32);
      if (v13)
      {
        uint64_t v14 = *(void *)(v5 - 24);
        uint64_t v12 = *(void **)(v5 - 32);
        if (v14 != v13)
        {
          do
          {
            if (*(char *)(v14 - 17) < 0) {
              operator delete(*(void **)(v14 - 40));
            }
            v14 -= 40;
          }
          while (v14 != v13);
          uint64_t v12 = *(void **)(v5 - 32);
        }
        *(void *)(v5 - 24) = v13;
        operator delete(v12);
      }
      v5 -= 40;
    }
    *(void *)(a1 + 8) = v7;
  }
  return a2;
}

uint64_t sub_311E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 == a2)
  {
LABEL_20:
    if (a3 != a4)
    {
      uint64_t v14 = *(char **)(a5 + 8);
      do
      {
        while ((unint64_t)v14 >= *(void *)(a5 + 16))
        {
          uint64_t v14 = sub_31214C((void **)a5, a3);
          *(void *)(a5 + 8) = v14;
          a3 += 40;
          if (a3 == a4) {
            return a5;
          }
        }
        *(void *)uint64_t v14 = *(void *)a3;
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 2) = 0;
        *((void *)v14 + 3) = 0;
        sub_31237C(v14 + 8, *(void *)(a3 + 8), *(void *)(a3 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3));
        *((_DWORD *)v14 + 8) = *(_DWORD *)(a3 + 32);
        v14 += 40;
        *(void *)(a5 + 8) = v14;
        *(void *)(a5 + 8) = v14;
        a3 += 40;
      }
      while (a3 != a4);
    }
    return a5;
  }
  uint64_t v9 = a1;
  while (a3 != a4)
  {
    if (*(void *)a3 >= *(void *)v9)
    {
      if (*(void *)a3 == *(void *)v9)
      {
        unsigned int v11 = *(_DWORD *)(a3 + 32);
        unsigned int v12 = *(_DWORD *)(v9 + 32);
        if (v11 != v12)
        {
          if (v11 && v12)
          {
            if (__clz(__rbit32(v11)) < __clz(__rbit32(v12))) {
              goto LABEL_6;
            }
          }
          else if (!v12)
          {
            goto LABEL_6;
          }
        }
      }
      unint64_t v13 = *(void *)(a5 + 8);
      if (v13 >= *(void *)(a5 + 16))
      {
        *(void *)(a5 + 8) = sub_31214C((void **)a5, v9);
        v9 += 40;
        if (v9 == a2) {
          goto LABEL_20;
        }
      }
      else
      {
        *(void *)unint64_t v13 = *(void *)v9;
        *(void *)(v13 + 8) = 0;
        *(void *)(v13 + 16) = 0;
        *(void *)(v13 + 24) = 0;
        sub_31237C((char *)(v13 + 8), *(void *)(v9 + 8), *(void *)(v9 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 3));
        *(_DWORD *)(v13 + 32) = *(_DWORD *)(v9 + 32);
        *(void *)(a5 + 8) = v13 + 40;
        *(void *)(a5 + 8) = v13 + 40;
        v9 += 40;
        if (v9 == a2) {
          goto LABEL_20;
        }
      }
    }
    else
    {
LABEL_6:
      unint64_t v10 = *(void *)(a5 + 8);
      if (v10 >= *(void *)(a5 + 16))
      {
        *(void *)(a5 + 8) = sub_31214C((void **)a5, a3);
        a3 += 40;
        if (v9 == a2) {
          goto LABEL_20;
        }
      }
      else
      {
        *(void *)unint64_t v10 = *(void *)a3;
        *(void *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 0;
        *(void *)(v10 + 24) = 0;
        sub_31237C((char *)(v10 + 8), *(void *)(a3 + 8), *(void *)(a3 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 3));
        *(_DWORD *)(v10 + 32) = *(_DWORD *)(a3 + 32);
        *(void *)(a5 + 8) = v10 + 40;
        *(void *)(a5 + 8) = v10 + 40;
        a3 += 40;
        if (v9 == a2) {
          goto LABEL_20;
        }
      }
    }
  }
  unsigned int v15 = *(char **)(a5 + 8);
  do
  {
    while ((unint64_t)v15 >= *(void *)(a5 + 16))
    {
      unsigned int v15 = sub_31214C((void **)a5, v9);
      *(void *)(a5 + 8) = v15;
      v9 += 40;
      if (v9 == a2) {
        return a5;
      }
    }
    *(void *)unsigned int v15 = *(void *)v9;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = 0;
    *((void *)v15 + 3) = 0;
    sub_31237C(v15 + 8, *(void *)(v9 + 8), *(void *)(v9 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 3));
    *((_DWORD *)v15 + 8) = *(_DWORD *)(v9 + 32);
    v15 += 40;
    *(void *)(a5 + 8) = v15;
    *(void *)(a5 + 8) = v15;
    v9 += 40;
  }
  while (v9 != a2);
  return a5;
}

void sub_31212C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_312134(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_31213C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_312144(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_31214C(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  unsigned int v20 = &v7[40 * v3];
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)unsigned int v20 = *(void *)a2;
  *((void *)v20 + 2) = 0;
  *((void *)v20 + 3) = 0;
  BOOL v21 = &v7[40 * v6];
  *((void *)v20 + 1) = 0;
  sub_31237C(v20 + 8, v8, *(void *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a2 + 16) - v8) >> 3));
  *((_DWORD *)v20 + 8) = *(_DWORD *)(a2 + 32);
  uint64_t v9 = v20 + 40;
  unint64_t v10 = (char *)*a1;
  unsigned int v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v20;
    a1[1] = v9;
    a1[2] = v21;
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      unint64_t v13 = &v20[v12];
      uint64_t v14 = &v11[v12];
      *((void *)v13 - 5) = *(void *)&v11[v12 - 40];
      *((void *)v13 - 4) = 0;
      *((void *)v13 - 3) = 0;
      *((void *)v13 - 2) = 0;
      *((_OWORD *)v13 - 2) = *(_OWORD *)&v11[v12 - 32];
      *((void *)v13 - 2) = *(void *)&v11[v12 - 16];
      *((void *)v14 - 4) = 0;
      *((void *)v14 - 3) = 0;
      *((void *)v14 - 2) = 0;
      *((_DWORD *)v13 - 2) = *(_DWORD *)&v11[v12 - 8];
      v12 -= 40;
    }
    while (&v11[v12] != v10);
    unsigned int v15 = (char *)*a1;
    unsigned int v11 = (char *)a1[1];
    *a1 = &v20[v12];
    a1[1] = v9;
    a1[2] = v21;
    if (v11 != v15)
    {
      do
      {
        uint64_t v17 = *((void *)v11 - 4);
        if (v17)
        {
          uint64_t v18 = *((void *)v11 - 3);
          BOOL v16 = (void *)*((void *)v11 - 4);
          if (v18 != v17)
          {
            do
            {
              if (*(char *)(v18 - 17) < 0) {
                operator delete(*(void **)(v18 - 40));
              }
              v18 -= 40;
            }
            while (v18 != v17);
            BOOL v16 = (void *)*((void *)v11 - 4);
          }
          *((void *)v11 - 3) = v17;
          operator delete(v16);
        }
        v11 -= 40;
      }
      while (v11 != v15);
      unsigned int v11 = v15;
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return v20 + 40;
}

void sub_312368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_312560((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_31237C(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0x666666666666667) {
      sub_2E00();
    }
    uint64_t result = (char *)operator new(40 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[40 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = &v8[v9];
        uint64_t v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = (char *)sub_4200(result, *(void **)v11, *(void *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v11;
          *((void *)result + 2) = *(void *)(v11 + 16);
        }
        unint64_t v10 = &v8[v9];
        *((void *)v10 + 3) = *(void *)(a2 + v9 + 24);
        *((_DWORD *)v10 + 8) = *(_DWORD *)(a2 + v9 + 32);
        v9 += 40;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_312478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_31248C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 40)
  {
    if (*(char *)(v10 + v11 - 17) < 0) {
      operator delete(*(void **)(v10 + v11 - 40));
    }
  }
  *(void *)(v9 + 8) = v10;
  sub_3124C8(&a9);
  _Unwind_Resume(a1);
}

void ***sub_3124C8(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    unint64_t v3 = (void **)**result;
    if (v3)
    {
      unint64_t v4 = (void **)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 17) < 0) {
            operator delete(*(v4 - 5));
          }
          v4 -= 5;
        }
        while (v4 != v3);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_312560(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    while (1)
    {
      while (1)
      {
        uint64_t v4 = i - 40;
        *(void *)(a1 + 16) = i - 40;
        uint64_t v5 = *(void *)(i - 32);
        if (v5) {
          break;
        }
        i -= 40;
        if (v4 == v2) {
          goto LABEL_12;
        }
      }
      uint64_t v6 = *(void *)(i - 24);
      uint64_t v7 = *(void **)(i - 32);
      if (v6 != v5) {
        break;
      }
      *(void *)(i - 24) = v5;
      operator delete(v7);
      uint64_t i = *(void *)(a1 + 16);
      if (i == v2) {
        goto LABEL_12;
      }
    }
    do
    {
      if (*(char *)(v6 - 17) < 0) {
        operator delete(*(void **)(v6 - 40));
      }
      v6 -= 40;
    }
    while (v6 != v5);
    uint64_t v8 = *(void **)(i - 32);
    *(void *)(i - 24) = v5;
    operator delete(v8);
  }
LABEL_12:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_31262C(uint64_t a1)
{
  unsigned int v20 = (void **)(a1 + 416);
  sub_84854(&v20);
  sub_80150(a1 + 376, *(char **)(a1 + 392));
  uint64_t v2 = *(void **)(a1 + 376);
  *(void *)(a1 + 376) = 0;
  if (v2) {
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 352);
  if (v3)
  {
    *(void *)(a1 + 360) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 328);
  if (v4)
  {
    *(void *)(a1 + 336) = v4;
    operator delete(v4);
  }
  if ((*(char *)(a1 + 327) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 303) & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 304));
  if (*(char *)(a1 + 303) < 0)
  {
LABEL_12:
    operator delete(*(void **)(a1 + 280));
    std::mutex::~mutex((std::mutex *)(a1 + 216));
    uint64_t v5 = *(void ***)(a1 + 192);
    if (!v5) {
      goto LABEL_13;
    }
    while (1)
    {
LABEL_24:
      uint64_t v10 = (void **)*v5;
      if (*((char *)v5 + 63) < 0)
      {
        operator delete(v5[5]);
        if (*((char *)v5 + 39) < 0) {
LABEL_28:
        }
          operator delete(v5[2]);
      }
      else if (*((char *)v5 + 39) < 0)
      {
        goto LABEL_28;
      }
      operator delete(v5);
      uint64_t v5 = v10;
      if (!v10) {
        goto LABEL_13;
      }
    }
  }
LABEL_9:
  std::mutex::~mutex((std::mutex *)(a1 + 216));
  uint64_t v5 = *(void ***)(a1 + 192);
  if (v5) {
    goto LABEL_24;
  }
LABEL_13:
  uint64_t v6 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(char **)(a1 + 152);
  if (v7)
  {
    do
    {
      uint64_t v11 = *(char **)v7;
      sub_80150(v7 + 40, *((char **)v7 + 7));
      uint64_t v12 = (void *)*((void *)v7 + 5);
      *((void *)v7 + 5) = 0;
      if (v12) {
        operator delete(v12);
      }
      if (v7[39] < 0) {
        operator delete(*((void **)v7 + 2));
      }
      operator delete(v7);
      uint64_t v7 = v11;
    }
    while (v11);
  }
  uint64_t v8 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v8) {
    operator delete(v8);
  }
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_20:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0) {
        goto LABEL_21;
      }
      goto LABEL_36;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_21:
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 56);
    if (!v9) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(*(void **)(a1 + 64));
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v9) {
    goto LABEL_38;
  }
LABEL_37:
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    unint64_t v13 = *(void ***)(a1 + 24);
    if (!v13) {
      goto LABEL_46;
    }
    goto LABEL_39;
  }
LABEL_38:
  unint64_t v13 = *(void ***)(a1 + 24);
  if (!v13) {
    goto LABEL_46;
  }
LABEL_39:
  uint64_t v14 = *(void ***)(a1 + 32);
  unsigned int v15 = v13;
  if (v14 != v13)
  {
    do
    {
      if (*((char *)v14 - 1) < 0) {
        operator delete(*(v14 - 3));
      }
      v14 -= 3;
    }
    while (v14 != v13);
    unsigned int v15 = *(void ***)(a1 + 24);
  }
  *(void *)(a1 + 32) = v13;
  operator delete(v15);
LABEL_46:
  BOOL v16 = *(void ***)a1;
  if (*(void *)a1)
  {
    uint64_t v17 = *(void ***)(a1 + 8);
    uint64_t v18 = *(void ***)a1;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v17 - 1) < 0) {
          operator delete(*(v17 - 3));
        }
        v17 -= 3;
      }
      while (v17 != v16);
      uint64_t v18 = *(void ***)a1;
    }
    *(void *)(a1 + 8) = v16;
    operator delete(v18);
  }
  return a1;
}

unint64_t *sub_3128D8(unint64_t *result, unsigned int a2)
{
  unint64_t v2 = result[1];
  unint64_t v3 = *result + a2;
  *uint64_t result = v3;
  if (v3 > v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v6, "Skipping over bytes exceeded message length.");
    uint64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return result;
}

void sub_312958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_312988(char **a1, uint64_t a2, char *a3, _DWORD *a4, int *a5)
{
  long long v6 = *a1;
  uint64_t v7 = a1[1];
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
  unint64_t v9 = v8 + 1;
  if (v8 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[2] - v6) >> 3) > v9) {
    unint64_t v9 = 0x999999999999999ALL * ((a1[2] - v6) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v6) >> 3) >= 0x333333333333333) {
    unint64_t v14 = 0x666666666666666;
  }
  else {
    unint64_t v14 = v9;
  }
  if (v14)
  {
    if (v14 > 0x666666666666666) {
      sub_188D718();
    }
    unsigned int v15 = (char *)operator new(40 * v14);
  }
  else
  {
    unsigned int v15 = 0;
  }
  BOOL v16 = &v15[40 * v8];
  char v17 = *a3;
  int v18 = *a5;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v16, *(void **)a2, *(void *)(a2 + 8));
    long long v6 = *a1;
    uint64_t v7 = a1[1];
    BOOL v16 = &v15[40 * v8];
  }
  else
  {
    *(_OWORD *)BOOL v16 = *(_OWORD *)a2;
    *((void *)v16 + 2) = *(void *)(a2 + 16);
  }
  uint64_t v19 = &v15[40 * v8];
  v19[24] = v17;
  *((_DWORD *)v19 + 7) = *a4;
  *((_DWORD *)v19 + 8) = v18;
  if (v7 == v6)
  {
    unsigned int v22 = v6;
  }
  else
  {
    do
    {
      long long v20 = *(_OWORD *)(v7 - 40);
      *((void *)v16 - 3) = *((void *)v7 - 3);
      *(_OWORD *)(v16 - 40) = v20;
      *((void *)v7 - 4) = 0;
      *((void *)v7 - 3) = 0;
      *((void *)v7 - 5) = 0;
      uint64_t v21 = *((void *)v7 - 2);
      *((_DWORD *)v16 - 2) = *((_DWORD *)v7 - 2);
      *((void *)v16 - 2) = v21;
      v16 -= 40;
      v7 -= 40;
    }
    while (v7 != v6);
    unsigned int v22 = *a1;
    long long v6 = a1[1];
  }
  *a1 = v16;
  a1[1] = &v15[40 * v8 + 40];
  a1[2] = &v15[40 * v14];
  if (v6 != v22)
  {
    uint64_t v23 = (void **)(v6 - 40);
    do
    {
      if (*((char *)v23 + 23) < 0) {
        operator delete(*v23);
      }
      v23 -= 5;
    }
    while (v23 + 5 != (void **)v22);
    long long v6 = v22;
  }
  if (v6) {
    operator delete(v6);
  }
  return (uint64_t)&v15[40 * v8 + 40];
}

void sub_312B88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_312B9C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_312B9C(uint64_t a1)
{
  unint64_t v3 = *(void ***)(a1 + 8);
  unint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v5 = v2 - 5;
      *(void *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      unint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_312C04(void **a1, void *a2, uint64_t *a3, int *a4)
{
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v6) {
    unint64_t v6 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    if (v10 > 0x666666666666666) {
      sub_188D718();
    }
    uint64_t v11 = (char *)operator new(40 * v10);
  }
  else
  {
    uint64_t v11 = 0;
  }
  int v24 = &v11[40 * v5];
  unint64_t v25 = &v11[40 * v10];
  int v12 = *a4;
  *(void *)int v24 = *a2;
  *((void *)v24 + 2) = 0;
  *((void *)v24 + 3) = 0;
  *((void *)v24 + 1) = 0;
  sub_31237C(v24 + 8, *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * ((a3[1] - *a3) >> 3));
  *((_DWORD *)v24 + 8) = v12;
  unint64_t v13 = v24 + 40;
  unint64_t v14 = (char *)*a1;
  unsigned int v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v24;
    a1[1] = v13;
    a1[2] = v25;
  }
  else
  {
    uint64_t v16 = 0;
    do
    {
      char v17 = &v24[v16];
      int v18 = &v15[v16];
      *((void *)v17 - 5) = *(void *)&v15[v16 - 40];
      *((void *)v17 - 4) = 0;
      *((void *)v17 - 3) = 0;
      *((void *)v17 - 2) = 0;
      *((_OWORD *)v17 - 2) = *(_OWORD *)&v15[v16 - 32];
      *((void *)v17 - 2) = *(void *)&v15[v16 - 16];
      *((void *)v18 - 4) = 0;
      *((void *)v18 - 3) = 0;
      *((void *)v18 - 2) = 0;
      *((_DWORD *)v17 - 2) = *(_DWORD *)&v15[v16 - 8];
      v16 -= 40;
    }
    while (&v15[v16] != v14);
    uint64_t v19 = (char *)*a1;
    unsigned int v15 = (char *)a1[1];
    *a1 = &v24[v16];
    a1[1] = v13;
    a1[2] = v25;
    if (v15 != v19)
    {
      do
      {
        uint64_t v21 = *((void *)v15 - 4);
        if (v21)
        {
          uint64_t v22 = *((void *)v15 - 3);
          long long v20 = (void *)*((void *)v15 - 4);
          if (v22 != v21)
          {
            do
            {
              if (*(char *)(v22 - 17) < 0) {
                operator delete(*(void **)(v22 - 40));
              }
              v22 -= 40;
            }
            while (v22 != v21);
            long long v20 = (void *)*((void *)v15 - 4);
          }
          *((void *)v15 - 3) = v21;
          operator delete(v20);
        }
        v15 -= 40;
      }
      while (v15 != v19);
      unsigned int v15 = v19;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v24 + 40;
}

void sub_312E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_312560((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_312E44(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  unint64_t v14 = operator new(0x20uLL);
  void *v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    int v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      void *v14 = *v18;
LABEL_61:
      void *v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        int v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        int v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      int v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    int v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_313154(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_313168(void **a1, uint64_t a2, std::string *__str, char *a4, uint64_t a5)
{
  unint64_t v5 = (char *)*a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 40;
  uint64_t v7 = (uint64_t)*a1 + 40 * v6;
  if (a5 < 1) {
    return (char *)v7;
  }
  unint64_t v9 = __str;
  unint64_t v11 = a1[2];
  unint64_t v12 = (unint64_t)a1[1];
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v11[-v12] >> 3)) >= a5)
  {
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v7) >> 3)) >= a5)
    {
      int v18 = (std::string *)((char *)__str + 40 * a5);
      uint64_t v25 = (char *)a1[1];
      goto LABEL_42;
    }
    int v18 = (std::string *)((char *)__str + 8 * ((uint64_t)(v12 - v7) >> 3));
    if (v18 != (std::string *)a4)
    {
      unint64_t v19 = 0;
      do
      {
        unint64_t v23 = v12 + v19;
        uint8x8_t v24 = (char *)v18 + v19;
        if (SHIBYTE(v18->__r_.__value_.__r.__words[v19 / 8 + 2]) < 0)
        {
          sub_4200((unsigned char *)v23, *(void **)v24, *((void *)v24 + 1));
        }
        else
        {
          long long v20 = *(_OWORD *)v24;
          *(void *)(v23 + 16) = *((void *)v24 + 2);
          *(_OWORD *)unint64_t v23 = v20;
        }
        unint64_t v21 = v12 + v19;
        uint64_t v22 = *(uint64_t *)((char *)&v18[1].__r_.__value_.__l.__data_ + v19);
        *(_DWORD *)(v21 + 32) = v18[1].__r_.__value_.__r.__words[v19 / 8 + 1];
        *(void *)(v21 + 24) = v22;
        v19 += 40;
      }
      while ((char *)v18 + v19 != a4);
      uint64_t v25 = (char *)(v12 + v19);
      a1[1] = (void *)(v12 + v19);
      if ((uint64_t)(v12 - v7) < 1) {
        return (char *)v7;
      }
LABEL_42:
      uint64_t v42 = v7 + 40 * a5;
      unsigned int v43 = &v25[-40 * a5];
      unsigned int v44 = v25;
      if ((unint64_t)v43 < v12)
      {
        unsigned int v44 = v25;
        do
        {
          long long v45 = *(_OWORD *)v43;
          *((void *)v44 + 2) = *((void *)v43 + 2);
          *(_OWORD *)unsigned int v44 = v45;
          *((void *)v43 + 1) = 0;
          *((void *)v43 + 2) = 0;
          *(void *)unsigned int v43 = 0;
          uint64_t v46 = *((void *)v43 + 3);
          *((_DWORD *)v44 + 8) = *((_DWORD *)v43 + 8);
          *((void *)v44 + 3) = v46;
          v44 += 40;
          v43 += 40;
        }
        while ((unint64_t)v43 < v12);
      }
      a1[1] = v44;
      if (v25 != (char *)v42)
      {
        uint64_t v47 = 0;
        unint64_t v48 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v25[-v42] >> 3);
        uint64_t v49 = &v5[40 * v6 + 40 * v48];
        uint64_t v50 = -40 * v48;
        do
        {
          uint64_t v54 = &v25[v47];
          int v55 = (void **)&v25[v47 - 40];
          if (v25[v47 - 17] < 0) {
            operator delete(*v55);
          }
          uint64_t v51 = &v49[v47 - 40];
          long long v52 = *(_OWORD *)v51;
          *(void *)&v25[v47 - 24] = *(void *)&v49[v47 - 24];
          *(_OWORD *)int v55 = v52;
          v49[v47 - 17] = 0;
          char *v51 = 0;
          uint64_t v53 = *(void *)&v49[v47 - 16];
          *((_DWORD *)v54 - 2) = *(_DWORD *)&v49[v47 - 8];
          *((void *)v54 - 2) = v53;
          v47 -= 40;
        }
        while (v50 != v47);
      }
      if (v18 != v9)
      {
        uint64_t v56 = v7;
        do
        {
          std::string::operator=((std::string *)v56, v9);
          int v57 = v9[1].__r_.__value_.__r.__words[1];
          *(void *)(v56 + 24) = v9[1].__r_.__value_.__l.__data_;
          *(_DWORD *)(v56 + 32) = v57;
          unint64_t v9 = (std::string *)((char *)v9 + 40);
          v56 += 40;
        }
        while (v9 != v18);
      }
      return (char *)v7;
    }
    uint64_t v25 = (char *)a1[1];
    a1[1] = (void *)v12;
    if ((uint64_t)(v12 - v7) >= 1) {
      goto LABEL_42;
    }
    return (char *)v7;
  }
  unint64_t v13 = a5 - 0x3333333333333333 * ((uint64_t)(v12 - (void)v5) >> 3);
  if (v13 > 0x666666666666666) {
    sub_2E00();
  }
  unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v5) >> 3);
  if (2 * v14 > v13) {
    unint64_t v13 = 2 * v14;
  }
  if (v14 >= 0x333333333333333) {
    unint64_t v15 = 0x666666666666666;
  }
  else {
    unint64_t v15 = v13;
  }
  if (v15)
  {
    if (v15 > 0x666666666666666) {
      sub_188D718();
    }
    float v16 = (char *)operator new(40 * v15);
  }
  else
  {
    float v16 = 0;
  }
  unint64_t v26 = &v16[40 * v6];
  long long v59 = v26;
  unsigned int v60 = &v16[40 * v15];
  uint64_t v27 = 40 * a5;
  BOOL v28 = &v26[v27];
  do
  {
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_4200(v26, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v29 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      *((void *)v26 + 2) = *((void *)&v9->__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v26 = v29;
    }
    std::string::pointer data = v9[1].__r_.__value_.__l.__data_;
    *((_DWORD *)v26 + 8) = v9[1].__r_.__value_.__r.__words[1];
    *((void *)v26 + 3) = data;
    v26 += 40;
    unint64_t v9 = (std::string *)((char *)v9 + 40);
    v27 -= 40;
  }
  while (v27);
  int v31 = v59;
  unint64_t v32 = (char *)*a1;
  BOOL v33 = v59;
  if (*a1 != (void *)v7)
  {
    unsigned int v34 = v59;
    uint64_t v35 = v7;
    do
    {
      BOOL v33 = v34 - 40;
      long long v36 = *(_OWORD *)(v35 - 40);
      *((void *)v34 - 3) = *(void *)(v35 - 24);
      *(_OWORD *)(v34 - 40) = v36;
      *(void *)(v35 - 32) = 0;
      *(void *)(v35 - 24) = 0;
      *(void *)(v35 - 40) = 0;
      uint64_t v37 = *(void *)(v35 - 16);
      *((_DWORD *)v34 - 2) = *(_DWORD *)(v35 - 8);
      *((void *)v34 - 2) = v37;
      v34 -= 40;
      v35 -= 40;
    }
    while ((char *)v35 != v32);
  }
  unint64_t v38 = a1[1];
  if (v38 != (void *)v7)
  {
    do
    {
      long long v39 = *(_OWORD *)v7;
      *((void *)v28 + 2) = *(void *)(v7 + 16);
      *(_OWORD *)BOOL v28 = v39;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      uint64_t v40 = *(void *)(v7 + 24);
      *((_DWORD *)v28 + 8) = *(_DWORD *)(v7 + 32);
      *((void *)v28 + 3) = v40;
      v28 += 40;
      v7 += 40;
    }
    while ((void *)v7 != v38);
    uint64_t v7 = (uint64_t)a1[1];
  }
  unint64_t v41 = *a1;
  *a1 = v33;
  a1[1] = v28;
  a1[2] = v60;
  while ((void *)v7 != v41)
  {
    if (*(char *)(v7 - 17) < 0) {
      operator delete(*(void **)(v7 - 40));
    }
    v7 -= 40;
  }
  if (v41) {
    operator delete(v41);
  }
  return v31;
}

void sub_313600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_312B9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_313618(const void ***a1)
{
  unint64_t v2 = sub_316194(*a1, a1[1]);
  unint64_t v3 = (void **)a1[1];
  if (v3 != v2)
  {
    uint64_t v4 = v2;
    while (v3 != v4)
    {
      if (*((char *)v3 - 17) < 0) {
        operator delete(*(v3 - 5));
      }
      v3 -= 5;
    }
    a1[1] = (const void **)v4;
  }
}

void sub_313704(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_313D58(uint64_t a1, char *a2)
{
  if ((char *)a1 != a2)
  {
    uint64_t v37 = v2;
    uint64_t v38 = v3;
    char v6 = (char *)(a1 + 40);
    if ((char *)(a1 + 40) != a2)
    {
      uint64_t v7 = 0;
      uint8x8_t v8 = (const void **)a1;
      do
      {
        unint64_t v9 = v6;
        int v10 = *((char *)v8 + 23);
        int v11 = *((char *)v8 + 63);
        if (v11 >= 0) {
          size_t v12 = *((unsigned __int8 *)v8 + 63);
        }
        else {
          size_t v12 = (size_t)v8[6];
        }
        if (v11 >= 0) {
          uint64_t v13 = v6;
        }
        else {
          uint64_t v13 = (char *)v8[5];
        }
        if (v10 >= 0) {
          size_t v14 = *((unsigned __int8 *)v8 + 23);
        }
        else {
          size_t v14 = (size_t)v8[1];
        }
        if (v10 >= 0) {
          unint64_t v15 = v8;
        }
        else {
          unint64_t v15 = *v8;
        }
        if (v14 >= v12) {
          size_t v16 = v12;
        }
        else {
          size_t v16 = v14;
        }
        int v17 = memcmp(v13, v15, v16);
        BOOL v18 = v12 < v14;
        if (v17) {
          BOOL v18 = v17 < 0;
        }
        if (v18)
        {
          uint64_t v34 = *((void *)v9 + 2);
          long long v33 = *(_OWORD *)v9;
          *((void *)v9 + 1) = 0;
          *((void *)v9 + 2) = 0;
          *(void *)unint64_t v9 = 0;
          BOOL v35 = v8[8];
          int v36 = *((_DWORD *)v8 + 18);
          if (v34 >= 0) {
            size_t v19 = HIBYTE(v34);
          }
          else {
            size_t v19 = *((void *)&v33 + 1);
          }
          if (v34 >= 0) {
            char v20 = &v33;
          }
          else {
            char v20 = (long long *)v33;
          }
          uint64_t v21 = v7;
          while (1)
          {
            uint64_t v22 = v21;
            uint64_t v23 = a1 + v21;
            uint64_t v24 = a1 + v21 + 40;
            if (*(char *)(a1 + v21 + 63) < 0) {
              operator delete(*(void **)v24);
            }
            *(_OWORD *)uint64_t v24 = *(_OWORD *)v23;
            uint64_t v25 = *(void *)(v23 + 24);
            *(void *)(v24 + 16) = *(void *)(v23 + 16);
            *(unsigned char *)(v23 + 23) = 0;
            *(unsigned char *)uint64_t v23 = 0;
            *(void *)(v23 + 64) = v25;
            *(_DWORD *)(v23 + 72) = *(_DWORD *)(v23 + 32);
            if (!v22) {
              break;
            }
            int v26 = *(char *)(a1 + v22 - 17);
            if (v26 >= 0) {
              size_t v27 = *(unsigned __int8 *)(a1 + v22 - 17);
            }
            else {
              size_t v27 = *(void *)(a1 + v22 - 32);
            }
            if (v26 >= 0) {
              size_t v28 = (const void *)(a1 + v22 - 40);
            }
            else {
              size_t v28 = *(const void **)(a1 + v22 - 40);
            }
            if (v27 >= v19) {
              size_t v29 = v19;
            }
            else {
              size_t v29 = v27;
            }
            int v30 = memcmp(v20, v28, v29);
            BOOL v31 = v30 < 0;
            if (!v30) {
              BOOL v31 = v19 < v27;
            }
            uint64_t v21 = v22 - 40;
            if (!v31)
            {
              uint64_t v32 = a1 + v22;
              if ((*(char *)(a1 + v21 + 63) & 0x80000000) == 0) {
                goto LABEL_4;
              }
              goto LABEL_49;
            }
          }
          uint64_t v32 = a1;
          if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
            goto LABEL_4;
          }
LABEL_49:
          operator delete(*(void **)v32);
LABEL_4:
          *(_OWORD *)uint64_t v32 = v33;
          *(void *)(v32 + 16) = v34;
          *(void *)(a1 + v22 + 24) = v35;
          *(_DWORD *)(a1 + v22 + 32) = v36;
        }
        char v6 = v9 + 40;
        v7 += 40;
        uint8x8_t v8 = (const void **)v9;
      }
      while (v9 + 40 != a2);
    }
  }
}

void sub_313F68(const void **a1, const void **a2)
{
  if (a1 != a2)
  {
    uint64_t v33 = v2;
    uint64_t v34 = v3;
    char v5 = a1;
    char v6 = (char *)(a1 + 5);
    if (a1 + 5 != a2)
    {
      uint64_t v7 = a1 - 5;
      do
      {
        unint64_t v9 = v6;
        int v10 = *((char *)v5 + 23);
        int v11 = *((char *)v5 + 63);
        if (v11 >= 0) {
          size_t v12 = *((unsigned __int8 *)v5 + 63);
        }
        else {
          size_t v12 = (size_t)v5[6];
        }
        if (v11 >= 0) {
          uint64_t v13 = v6;
        }
        else {
          uint64_t v13 = (char *)v5[5];
        }
        if (v10 >= 0) {
          size_t v14 = *((unsigned __int8 *)v5 + 23);
        }
        else {
          size_t v14 = (size_t)v5[1];
        }
        if (v10 >= 0) {
          unint64_t v15 = v5;
        }
        else {
          unint64_t v15 = *v5;
        }
        if (v14 >= v12) {
          size_t v16 = v12;
        }
        else {
          size_t v16 = v14;
        }
        int v17 = memcmp(v13, v15, v16);
        BOOL v18 = v12 < v14;
        if (v17) {
          BOOL v18 = v17 < 0;
        }
        if (v18)
        {
          int v30 = (const void *)*((void *)v9 + 2);
          long long v29 = *(_OWORD *)v9;
          *((void *)v9 + 1) = 0;
          *((void *)v9 + 2) = 0;
          *(void *)unint64_t v9 = 0;
          BOOL v31 = v5[8];
          int v32 = *((_DWORD *)v5 + 18);
          if (SHIBYTE(v30) >= 0) {
            size_t v19 = HIBYTE(v30);
          }
          else {
            size_t v19 = *((void *)&v29 + 1);
          }
          if (SHIBYTE(v30) >= 0) {
            char v20 = &v29;
          }
          else {
            char v20 = (long long *)v29;
          }
          uint64_t v21 = v7;
          do
          {
            size_t v28 = (void **)(v21 + 10);
            if (*((char *)v21 + 103) < 0) {
              operator delete(*v28);
            }
            *(_OWORD *)size_t v28 = *(_OWORD *)(v21 + 5);
            v21[12] = v21[7];
            *((unsigned char *)v21 + 63) = 0;
            *((unsigned char *)v21 + 40) = 0;
            v21[13] = v21[8];
            *((_DWORD *)v21 + 28) = *((_DWORD *)v21 + 18);
            int v22 = *((char *)v21 + 23);
            if (v22 >= 0) {
              size_t v23 = *((unsigned __int8 *)v21 + 23);
            }
            else {
              size_t v23 = (size_t)v21[1];
            }
            if (v22 >= 0) {
              uint64_t v24 = v21;
            }
            else {
              uint64_t v24 = *v21;
            }
            if (v23 >= v19) {
              size_t v25 = v19;
            }
            else {
              size_t v25 = v23;
            }
            int v26 = memcmp(v20, v24, v25);
            BOOL v27 = v19 < v23;
            if (v26) {
              BOOL v27 = v26 < 0;
            }
            v21 -= 5;
          }
          while (v27);
          uint8x8_t v8 = (void **)(v21 + 10);
          if (*((char *)v21 + 103) < 0) {
            operator delete(*v8);
          }
          *(_OWORD *)uint8x8_t v8 = v29;
          v21[12] = v30;
          v21[13] = v31;
          *((_DWORD *)v21 + 28) = v32;
        }
        char v6 = v9 + 40;
        v7 += 5;
        char v5 = (const void **)v9;
      }
      while (v9 + 40 != (char *)a2);
    }
  }
}

uint64_t sub_314158(uint64_t a1, uint64_t a2, const void **a3)
{
  size_t v6 = *(unsigned __int8 *)(a1 + 23);
  uint64_t v7 = (void *)(a1 + 8);
  char v8 = *(unsigned char *)(a2 + 23);
  int v57 = (void *)(a2 + 8);
  unint64_t v9 = *(void **)a2;
  char v54 = v8;
  if (v8 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v10 = *(void *)(a2 + 8);
  }
  if (v8 >= 0) {
    int v11 = (const void *)a2;
  }
  else {
    int v11 = *(const void **)a2;
  }
  if ((v6 & 0x80u) == 0) {
    size_t v12 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v12 = *(void *)(a1 + 8);
  }
  uint64_t v55 = *(const void **)a1;
  if ((v6 & 0x80u) == 0) {
    uint64_t v13 = (const void *)a1;
  }
  else {
    uint64_t v13 = *(const void **)a1;
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  else {
    BOOL v16 = v10 < v12;
  }
  char v17 = *((unsigned char *)a3 + 23);
  uint64_t v56 = a3 + 1;
  if (v17 >= 0) {
    size_t v18 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v18 = (size_t)a3[1];
  }
  if (v17 >= 0) {
    size_t v19 = a3;
  }
  else {
    size_t v19 = *a3;
  }
  if (v10 >= v18) {
    size_t v20 = v18;
  }
  else {
    size_t v20 = v10;
  }
  int v21 = memcmp(v19, v11, v20);
  BOOL v22 = v21 < 0;
  if (!v21) {
    BOOL v22 = v18 < v10;
  }
  if (v16)
  {
    size_t v23 = (const void **)(a1 + 24);
    if (v22)
    {
      *(void *)uint64_t v68 = *v7;
      *(void *)&v68[7] = *(void *)((char *)v7 + 7);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      int v58 = *v23;
      int v63 = *(_DWORD *)(a1 + 32);
      uint64_t v24 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(void *)(a1 + 16) = v24;
      *((unsigned char *)a3 + 23) = 0;
      *(unsigned char *)a3 = 0;
      int v25 = *((_DWORD *)a3 + 8);
      *size_t v23 = a3[3];
      *(_DWORD *)(a1 + 32) = v25;
      if (*((char *)a3 + 23) < 0) {
        operator delete((void *)*a3);
      }
      *a3 = v55;
      *uint64_t v56 = *(void *)v68;
      *(const void **)((char *)a3 + 15) = *(const void **)&v68[7];
      *((unsigned char *)a3 + 23) = v6;
      a3[3] = v58;
      *((_DWORD *)a3 + 8) = v63;
      return 1;
    }
    *(void *)unsigned int v71 = *v7;
    *(void *)&v71[7] = *(void *)((char *)v7 + 7);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    unsigned int v61 = *v23;
    int v66 = *(_DWORD *)(a1 + 32);
    uint64_t v40 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v40;
    *(unsigned char *)(a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
    unint64_t v41 = (const void **)(a2 + 24);
    int v42 = *(_DWORD *)(a2 + 32);
    *size_t v23 = *(const void **)(a2 + 24);
    *((_DWORD *)v23 + 2) = v42;
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(void *)a2 = v55;
    *int v57 = *(void *)v71;
    *(void *)((char *)v57 + 7) = *(void *)&v71[7];
    *(unsigned char *)(a2 + 23) = v6;
    *unint64_t v41 = v61;
    *(_DWORD *)(a2 + 32) = v66;
    int v43 = *((char *)a3 + 23);
    if (v43 >= 0) {
      size_t v44 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v44 = (size_t)a3[1];
    }
    if (v43 >= 0) {
      int v45 = a3;
    }
    else {
      int v45 = *a3;
    }
    if ((v6 & 0x80u) == 0) {
      size_t v46 = v6;
    }
    else {
      size_t v46 = *(void *)(a2 + 8);
    }
    if ((v6 & 0x80u) == 0) {
      long long v47 = (const void *)a2;
    }
    else {
      long long v47 = v55;
    }
    if (v46 >= v44) {
      size_t v48 = v44;
    }
    else {
      size_t v48 = v46;
    }
    int v49 = memcmp(v45, v47, v48);
    BOOL v50 = v44 < v46;
    if (v49) {
      BOOL v50 = v49 < 0;
    }
    if (!v50) {
      return 1;
    }
    *(void *)unint64_t v72 = *v57;
    *(void *)&v72[7] = *(void *)((char *)v57 + 7);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    long long v62 = *v41;
    int v67 = *(_DWORD *)(a2 + 32);
    uint64_t v51 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = v51;
    *((unsigned char *)a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    int v52 = *((_DWORD *)a3 + 8);
    *unint64_t v41 = a3[3];
    *(_DWORD *)(a2 + 32) = v52;
    if (*((char *)a3 + 23) < 0) {
      operator delete((void *)*a3);
    }
    *a3 = v55;
    *uint64_t v56 = *(void *)v72;
    *(const void **)((char *)a3 + 15) = *(const void **)&v72[7];
    *((unsigned char *)a3 + 23) = v6;
    a3[3] = v62;
    *((_DWORD *)a3 + 8) = v67;
    return 2;
  }
  if (v22)
  {
    *(void *)unint64_t v69 = *v57;
    *(void *)&v69[7] = *(void *)((char *)v57 + 7);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    int v26 = (void *)(a2 + 24);
    long long v59 = *(const void **)(a2 + 24);
    int v64 = *(_DWORD *)(a2 + 32);
    BOOL v27 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = v27;
    *((unsigned char *)a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    int v28 = *((_DWORD *)a3 + 8);
    *(void *)(a2 + 24) = a3[3];
    *(_DWORD *)(a2 + 32) = v28;
    if (*((char *)a3 + 23) < 0) {
      operator delete((void *)*a3);
    }
    *a3 = v9;
    *uint64_t v56 = *(void *)v69;
    *(const void **)((char *)a3 + 15) = *(const void **)&v69[7];
    *((unsigned char *)a3 + 23) = v54;
    a3[3] = v59;
    *((_DWORD *)a3 + 8) = v64;
    int v29 = *(char *)(a1 + 23);
    int v30 = *(const void **)a1;
    int v31 = *(char *)(a2 + 23);
    if (v31 >= 0) {
      size_t v32 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v32 = *(void *)(a2 + 8);
    }
    if (v31 >= 0) {
      uint64_t v33 = (const void *)a2;
    }
    else {
      uint64_t v33 = *(const void **)a2;
    }
    if (v29 >= 0) {
      size_t v34 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      size_t v34 = *(void *)(a1 + 8);
    }
    if (v29 >= 0) {
      BOOL v35 = (const void *)a1;
    }
    else {
      BOOL v35 = *(const void **)a1;
    }
    if (v34 >= v32) {
      size_t v36 = v32;
    }
    else {
      size_t v36 = v34;
    }
    int v37 = memcmp(v33, v35, v36);
    BOOL v38 = v32 < v34;
    if (v37) {
      BOOL v38 = v37 < 0;
    }
    if (!v38) {
      return 1;
    }
    *(void *)char v70 = *v7;
    *(void *)&v70[7] = *(void *)((char *)v7 + 7);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    uint64_t v60 = *(void *)(a1 + 24);
    int v65 = *(_DWORD *)(a1 + 32);
    uint64_t v39 = *(void *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v39;
    *(unsigned char *)(a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
    LODWORD(v39) = *(_DWORD *)(a2 + 32);
    *(void *)(a1 + 24) = *v26;
    *(_DWORD *)(a1 + 32) = v39;
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(void *)a2 = v30;
    *int v57 = *(void *)v70;
    *(void *)((char *)v57 + 7) = *(void *)&v70[7];
    *(unsigned char *)(a2 + 23) = v29;
    *int v26 = v60;
    *(_DWORD *)(a2 + 32) = v65;
    return 2;
  }
  return 0;
}

const void **sub_314678(uint64_t a1, const void **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(const void **)(a1 + 16);
  *(_OWORD *)long long __p = *(_OWORD *)a1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v6 = a1 + 24;
  char v5 = *(const void **)(a1 + 24);
  int v65 = v4;
  int v66 = v5;
  int v67 = *(_DWORD *)(a1 + 32);
  int v7 = *((char *)a2 - 17);
  if (SHIBYTE(v4) >= 0) {
    char v8 = (void *)HIBYTE(v65);
  }
  else {
    char v8 = __p[1];
  }
  if (SHIBYTE(v4) >= 0) {
    unint64_t v9 = __p;
  }
  else {
    unint64_t v9 = (void **)__p[0];
  }
  if (v7 >= 0) {
    size_t v10 = *((unsigned __int8 *)a2 - 17);
  }
  else {
    size_t v10 = (size_t)*(a2 - 4);
  }
  if (v7 >= 0) {
    int v11 = a2 - 5;
  }
  else {
    int v11 = (const void **)*(a2 - 5);
  }
  if (v10 >= (unint64_t)v8) {
    size_t v12 = (size_t)v8;
  }
  else {
    size_t v12 = v10;
  }
  int v13 = memcmp(v9, v11, v12);
  BOOL v14 = (unint64_t)v8 < v10;
  if (v13) {
    BOOL v14 = v13 < 0;
  }
  if (v14)
  {
    int v15 = (const void **)(a1 + 40);
    do
    {
      int v16 = *((char *)v15 + 23);
      if (v16 >= 0) {
        size_t v17 = *((unsigned __int8 *)v15 + 23);
      }
      else {
        size_t v17 = (size_t)v15[1];
      }
      if (v16 >= 0) {
        size_t v18 = v15;
      }
      else {
        size_t v18 = *v15;
      }
      if (v17 >= (unint64_t)v8) {
        size_t v19 = (size_t)v8;
      }
      else {
        size_t v19 = v17;
      }
      int v20 = memcmp(v9, v18, v19);
      BOOL v21 = (unint64_t)v8 < v17;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      v15 += 5;
    }
    while (!v21);
    BOOL v22 = v15 - 5;
  }
  else
  {
    size_t v23 = (const void **)(a1 + 40);
    do
    {
      BOOL v22 = v23;
      if (v23 >= v2) {
        break;
      }
      int v24 = *((char *)v23 + 23);
      if (v24 >= 0) {
        size_t v25 = *((unsigned __int8 *)v23 + 23);
      }
      else {
        size_t v25 = (size_t)v23[1];
      }
      if (v24 >= 0) {
        int v26 = v23;
      }
      else {
        int v26 = *v23;
      }
      if (v25 >= (unint64_t)v8) {
        size_t v27 = (size_t)v8;
      }
      else {
        size_t v27 = v25;
      }
      int v28 = memcmp(v9, v26, v27);
      BOOL v29 = v28 < 0;
      if (!v28) {
        BOOL v29 = (unint64_t)v8 < v25;
      }
      size_t v23 = v22 + 5;
    }
    while (!v29);
  }
  if (v22 < v2)
  {
    int v30 = v2 - 5;
    do
    {
      int v31 = *((char *)v30 + 23);
      if (v31 >= 0) {
        size_t v32 = *((unsigned __int8 *)v30 + 23);
      }
      else {
        size_t v32 = (size_t)v30[1];
      }
      if (v31 >= 0) {
        uint64_t v33 = v30;
      }
      else {
        uint64_t v33 = *v30;
      }
      if (v32 >= (unint64_t)v8) {
        size_t v34 = (size_t)v8;
      }
      else {
        size_t v34 = v32;
      }
      int v35 = memcmp(v9, v33, v34);
      BOOL v36 = (unint64_t)v8 < v32;
      if (v35) {
        BOOL v36 = v35 < 0;
      }
      v30 -= 5;
    }
    while (v36);
    uint64_t v2 = v30 + 5;
  }
  if (v22 < v2)
  {
    int v37 = *v22;
    do
    {
      v70[0] = v22[1];
      *(void *)((char *)v70 + 7) = *(const void **)((char *)v22 + 15);
      char v38 = *((unsigned char *)v22 + 23);
      v22[1] = 0;
      v22[2] = 0;
      *BOOL v22 = 0;
      int v69 = *((_DWORD *)v22 + 8);
      uint64_t v68 = v22[3];
      uint64_t v39 = v2[2];
      *(_OWORD *)BOOL v22 = *(_OWORD *)v2;
      v22[2] = v39;
      *((unsigned char *)v2 + 23) = 0;
      *(unsigned char *)uint64_t v2 = 0;
      uint64_t v40 = v2[3];
      *((_DWORD *)v22 + 8) = *((_DWORD *)v2 + 8);
      void v22[3] = v40;
      if (*((char *)v2 + 23) < 0) {
        operator delete((void *)*v2);
      }
      *uint64_t v2 = v37;
      unint64_t v41 = *(const void **)((char *)v70 + 7);
      v2[1] = (const void *)v70[0];
      *(const void **)((char *)v2 + 15) = v41;
      *((unsigned char *)v2 + 23) = v38;
      v2[3] = v68;
      *((_DWORD *)v2 + 8) = v69;
      if (SHIBYTE(v65) >= 0) {
        int v42 = (void *)HIBYTE(v65);
      }
      else {
        int v42 = __p[1];
      }
      if (SHIBYTE(v65) >= 0) {
        int v43 = __p;
      }
      else {
        int v43 = (void **)__p[0];
      }
      size_t v44 = v22 + 5;
      do
      {
        int v45 = *((char *)v44 + 23);
        int v37 = *v44;
        if (v45 >= 0) {
          size_t v46 = *((unsigned __int8 *)v44 + 23);
        }
        else {
          size_t v46 = (size_t)v44[1];
        }
        if (v45 >= 0) {
          long long v47 = v44;
        }
        else {
          long long v47 = *v44;
        }
        if (v46 >= (unint64_t)v42) {
          size_t v48 = (size_t)v42;
        }
        else {
          size_t v48 = v46;
        }
        int v49 = memcmp(v43, v47, v48);
        BOOL v50 = (unint64_t)v42 < v46;
        if (v49) {
          BOOL v50 = v49 < 0;
        }
        v44 += 5;
      }
      while (!v50);
      BOOL v22 = v44 - 5;
      uint64_t v51 = v2 - 5;
      do
      {
        int v52 = *((char *)v51 + 23);
        if (v52 >= 0) {
          size_t v53 = *((unsigned __int8 *)v51 + 23);
        }
        else {
          size_t v53 = (size_t)v51[1];
        }
        if (v52 >= 0) {
          char v54 = v51;
        }
        else {
          char v54 = *v51;
        }
        if (v53 >= (unint64_t)v42) {
          size_t v55 = (size_t)v42;
        }
        else {
          size_t v55 = v53;
        }
        int v56 = memcmp(v43, v54, v55);
        BOOL v57 = (unint64_t)v42 < v53;
        if (v56) {
          BOOL v57 = v56 < 0;
        }
        v51 -= 5;
      }
      while (v57);
      uint64_t v2 = v51 + 5;
    }
    while (v22 < v2);
  }
  int v58 = (void **)(v22 - 5);
  if (v22 - 5 != (const void **)a1)
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v59 = *(_OWORD *)v58;
    *(void *)(a1 + 16) = *(v22 - 3);
    *(_OWORD *)a1 = v59;
    *((unsigned char *)v22 - 17) = 0;
    *((unsigned char *)v22 - 40) = 0;
    uint64_t v60 = (uint64_t)*(v22 - 2);
    *(_DWORD *)(v6 + 8) = *((_DWORD *)v22 - 2);
    *(void *)uint64_t v6 = v60;
  }
  if (*((char *)v22 - 17) < 0) {
    operator delete(*v58);
  }
  long long v61 = *(_OWORD *)__p;
  *(v22 - 3) = v65;
  *(_OWORD *)int v58 = v61;
  HIBYTE(v65) = 0;
  LOBYTE(__p[0]) = 0;
  long long v62 = v66;
  *((_DWORD *)v22 - 2) = v67;
  *(v22 - 2) = v62;
  if (SHIBYTE(v65) < 0) {
    operator delete(__p[0]);
  }
  return v22;
}

unint64_t sub_314A64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)long long __p = *(_OWORD *)a1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v7 = a1 + 24;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v63 = v5;
  uint64_t v64 = v6;
  int v65 = *(_DWORD *)(a1 + 32);
  char v8 = (void *)HIBYTE(v5);
  if ((char)v8 >= 0) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = __p[1];
  }
  if ((char)v8 >= 0) {
    size_t v10 = __p;
  }
  else {
    size_t v10 = (void **)__p[0];
  }
  do
  {
    int v11 = *(const void **)(a1 + v4 + 40);
    int v12 = *(char *)(a1 + v4 + 63);
    if (v12 >= 0) {
      size_t v13 = *(unsigned __int8 *)(a1 + v4 + 63);
    }
    else {
      size_t v13 = *(void *)(a1 + v4 + 48);
    }
    if (v12 >= 0) {
      BOOL v14 = (const void *)(a1 + v4 + 40);
    }
    else {
      BOOL v14 = *(const void **)(a1 + v4 + 40);
    }
    if ((unint64_t)v9 >= v13) {
      size_t v15 = v13;
    }
    else {
      size_t v15 = (size_t)v9;
    }
    int v16 = memcmp(v14, v10, v15);
    BOOL v17 = v13 < (unint64_t)v9;
    if (v16) {
      BOOL v17 = v16 < 0;
    }
    v4 += 40;
  }
  while (v17);
  unint64_t v18 = a1 + v4;
  if (v4 == 40)
  {
    size_t v27 = (const void **)(a2 - 40);
    while (1)
    {
      unint64_t v26 = (unint64_t)(v27 + 5);
      if (v18 >= (unint64_t)(v27 + 5)) {
        break;
      }
      int v28 = *((char *)v27 + 23);
      if (v28 >= 0) {
        size_t v29 = *((unsigned __int8 *)v27 + 23);
      }
      else {
        size_t v29 = (size_t)v27[1];
      }
      if (v28 >= 0) {
        int v30 = v27;
      }
      else {
        int v30 = *v27;
      }
      if ((unint64_t)v9 >= v29) {
        size_t v31 = v29;
      }
      else {
        size_t v31 = (size_t)v9;
      }
      int v32 = memcmp(v30, v10, v31);
      BOOL v33 = v29 < (unint64_t)v9;
      if (v32) {
        BOOL v33 = v32 < 0;
      }
      v27 -= 5;
      if (v33)
      {
        unint64_t v26 = (unint64_t)(v27 + 5);
        break;
      }
    }
  }
  else
  {
    size_t v19 = (const void **)(a2 - 40);
    do
    {
      int v20 = *((char *)v19 + 23);
      if (v20 >= 0) {
        size_t v21 = *((unsigned __int8 *)v19 + 23);
      }
      else {
        size_t v21 = (size_t)v19[1];
      }
      if (v20 >= 0) {
        BOOL v22 = v19;
      }
      else {
        BOOL v22 = *v19;
      }
      if ((unint64_t)v9 >= v21) {
        size_t v23 = v21;
      }
      else {
        size_t v23 = (size_t)v9;
      }
      int v24 = memcmp(v22, v10, v23);
      BOOL v25 = v21 < (unint64_t)v9;
      if (v24) {
        BOOL v25 = v24 < 0;
      }
      v19 -= 5;
    }
    while (!v25);
    unint64_t v26 = (unint64_t)(v19 + 5);
  }
  if (v18 >= v26)
  {
    unint64_t v34 = v18;
    unint64_t v56 = v18 - 40;
    if (v18 - 40 == a1) {
      goto LABEL_87;
    }
  }
  else
  {
    unint64_t v34 = v18;
    int v35 = (const void **)v26;
    do
    {
      v68[0] = *(void *)(v34 + 8);
      *(void *)((char *)v68 + 7) = *(void *)(v34 + 15);
      char v36 = *(unsigned char *)(v34 + 23);
      *(void *)(v34 + 8) = 0;
      *(void *)(v34 + 16) = 0;
      *(void *)unint64_t v34 = 0;
      int v67 = *(_DWORD *)(v34 + 32);
      int v66 = *(const void **)(v34 + 24);
      int v37 = v35[2];
      *(_OWORD *)unint64_t v34 = *(_OWORD *)v35;
      *(void *)(v34 + 16) = v37;
      *((unsigned char *)v35 + 23) = 0;
      *(unsigned char *)int v35 = 0;
      char v38 = v35[3];
      *(_DWORD *)(v34 + 32) = *((_DWORD *)v35 + 8);
      *(void *)(v34 + 24) = v38;
      if (*((char *)v35 + 23) < 0) {
        operator delete((void *)*v35);
      }
      const void *v35 = v11;
      uint64_t v39 = *(const void **)((char *)v68 + 7);
      v35[1] = (const void *)v68[0];
      *(const void **)((char *)v35 + 15) = v39;
      *((unsigned char *)v35 + 23) = v36;
      v35[3] = v66;
      *((_DWORD *)v35 + 8) = v67;
      if (v63 >= 0) {
        uint64_t v40 = (void *)HIBYTE(v63);
      }
      else {
        uint64_t v40 = __p[1];
      }
      if (v63 >= 0) {
        unint64_t v41 = __p;
      }
      else {
        unint64_t v41 = (void **)__p[0];
      }
      int v42 = (const void **)(v34 + 40);
      do
      {
        int v43 = *((char *)v42 + 23);
        int v11 = *v42;
        if (v43 >= 0) {
          size_t v44 = *((unsigned __int8 *)v42 + 23);
        }
        else {
          size_t v44 = (size_t)v42[1];
        }
        if (v43 >= 0) {
          int v45 = v42;
        }
        else {
          int v45 = *v42;
        }
        if ((unint64_t)v40 >= v44) {
          size_t v46 = v44;
        }
        else {
          size_t v46 = (size_t)v40;
        }
        int v47 = memcmp(v45, v41, v46);
        BOOL v48 = v44 < (unint64_t)v40;
        if (v47) {
          BOOL v48 = v47 < 0;
        }
        v42 += 5;
      }
      while (v48);
      unint64_t v34 = (unint64_t)(v42 - 5);
      int v49 = v35 - 5;
      do
      {
        int v50 = *((char *)v49 + 23);
        if (v50 >= 0) {
          size_t v51 = *((unsigned __int8 *)v49 + 23);
        }
        else {
          size_t v51 = (size_t)v49[1];
        }
        if (v50 >= 0) {
          int v52 = v49;
        }
        else {
          int v52 = *v49;
        }
        if ((unint64_t)v40 >= v51) {
          size_t v53 = v51;
        }
        else {
          size_t v53 = (size_t)v40;
        }
        int v54 = memcmp(v52, v41, v53);
        BOOL v55 = v51 < (unint64_t)v40;
        if (v54) {
          BOOL v55 = v54 < 0;
        }
        v49 -= 5;
      }
      while (!v55);
      int v35 = v49 + 5;
    }
    while (v34 < (unint64_t)v35);
    unint64_t v56 = v34 - 40;
    if (v34 - 40 == a1)
    {
LABEL_87:
      if ((*(char *)(v34 - 17) & 0x80000000) == 0) {
        goto LABEL_88;
      }
      goto LABEL_95;
    }
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v60 = *(_OWORD *)v56;
  *(void *)(a1 + 16) = *(void *)(v56 + 16);
  *(_OWORD *)a1 = v60;
  *(unsigned char *)(v34 - 17) = 0;
  *(unsigned char *)(v34 - 40) = 0;
  uint64_t v61 = *(void *)(v34 - 16);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v34 - 8);
  *(void *)uint64_t v7 = v61;
  if (*(char *)(v34 - 17) < 0) {
LABEL_95:
  }
    operator delete(*(void **)v56);
LABEL_88:
  long long v57 = *(_OWORD *)__p;
  *(void *)(v56 + 16) = v63;
  *(_OWORD *)unint64_t v56 = v57;
  HIBYTE(v63) = 0;
  LOBYTE(__p[0]) = 0;
  uint64_t v58 = v64;
  *(_DWORD *)(v34 - 8) = v65;
  *(void *)(v34 - 16) = v58;
  if (SHIBYTE(v63) < 0) {
    operator delete(__p[0]);
  }
  return v56;
}

BOOL sub_314E44(uint64_t a1, const void **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = (void **)(a2 - 5);
      int v7 = *(char *)(a1 + 23);
      char v8 = *(const void **)a1;
      int v9 = *((char *)a2 - 17);
      if (v9 >= 0) {
        size_t v10 = *((unsigned __int8 *)a2 - 17);
      }
      else {
        size_t v10 = (size_t)*(a2 - 4);
      }
      if (v9 >= 0) {
        int v11 = a2 - 5;
      }
      else {
        int v11 = (const void **)*(a2 - 5);
      }
      if (v7 >= 0) {
        size_t v12 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v12 = *(void *)(a1 + 8);
      }
      if (v7 >= 0) {
        size_t v13 = (const void *)a1;
      }
      else {
        size_t v13 = *(const void **)a1;
      }
      if (v12 >= v10) {
        size_t v14 = v10;
      }
      else {
        size_t v14 = v12;
      }
      int v15 = memcmp(v11, v13, v14);
      BOOL v16 = v10 < v12;
      if (v15) {
        BOOL v16 = v15 < 0;
      }
      if (v16)
      {
        *(void *)&long long v48 = *(void *)(a1 + 8);
        *(void *)((char *)&v48 + 7) = *(void *)(a1 + 15);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        size_t v46 = *(const void **)(a1 + 24);
        int v47 = *(_DWORD *)(a1 + 32);
        uint64_t v17 = (uint64_t)*(a2 - 3);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(void *)(a1 + 16) = v17;
        uint64_t v18 = (uint64_t)*(a2 - 2);
        *((unsigned char *)a2 - 17) = 0;
        *((unsigned char *)a2 - 40) = 0;
        *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 - 2);
        *(void *)(a1 + 24) = v18;
        if (*((char *)a2 - 17) < 0) {
          operator delete(*v6);
        }
        *(a2 - 5) = v8;
        *(a2 - 4) = (const void *)v48;
        *(const void **)((char *)a2 - 25) = *(const void **)((char *)&v48 + 7);
        *((unsigned char *)a2 - 17) = v7;
        *(a2 - 2) = v46;
        *((_DWORD *)a2 - 2) = v47;
      }
      return 1;
    case 3uLL:
      sub_314158(a1, a1 + 40, a2 - 5);
      return 1;
    case 4uLL:
      sub_315264(a1, a1 + 40, a1 + 80, a2 - 5);
      return 1;
    case 5uLL:
      sub_3155B8(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 5);
      return 1;
    default:
      size_t v19 = (const void **)(a1 + 80);
      sub_314158(a1, a1 + 40, (const void **)(a1 + 80));
      int v20 = (const void **)(a1 + 120);
      if ((const void **)(a1 + 120) == a2) {
        return 1;
      }
      uint64_t v21 = 0;
      int v22 = 0;
      break;
  }
  while (1)
  {
    int v23 = *((char *)v19 + 23);
    int v24 = *((char *)v20 + 23);
    if (v24 >= 0) {
      size_t v25 = *((unsigned __int8 *)v20 + 23);
    }
    else {
      size_t v25 = (size_t)v20[1];
    }
    if (v24 >= 0) {
      unint64_t v26 = v20;
    }
    else {
      unint64_t v26 = *v20;
    }
    if (v23 >= 0) {
      size_t v27 = *((unsigned __int8 *)v19 + 23);
    }
    else {
      size_t v27 = (size_t)v19[1];
    }
    if (v23 >= 0) {
      int v28 = v19;
    }
    else {
      int v28 = *v19;
    }
    if (v27 >= v25) {
      size_t v29 = v25;
    }
    else {
      size_t v29 = v27;
    }
    int v30 = memcmp(v26, v28, v29);
    BOOL v31 = v25 < v27;
    if (v30) {
      BOOL v31 = v30 < 0;
    }
    if (v31)
    {
      long long v48 = *(_OWORD *)v20;
      int v32 = v20[3];
      int v49 = v20[2];
      v20[1] = 0;
      v20[2] = 0;
      *int v20 = 0;
      int v50 = v32;
      uint64_t v33 = v21;
      int v51 = *((_DWORD *)v20 + 8);
      while (1)
      {
        uint64_t v34 = v33;
        uint64_t v35 = a1 + v33;
        uint64_t v36 = a1 + v33 + 120;
        if (*(char *)(a1 + v33 + 143) < 0) {
          operator delete(*(void **)v36);
        }
        *(_OWORD *)uint64_t v36 = *(_OWORD *)(v35 + 80);
        *(void *)(v36 + 16) = *(void *)(v35 + 96);
        *(unsigned char *)(v35 + 103) = 0;
        *(unsigned char *)(v35 + 80) = 0;
        *(void *)(v35 + 144) = *(void *)(v35 + 104);
        *(_DWORD *)(v35 + 152) = *(_DWORD *)(v35 + 112);
        if (v34 == -80) {
          break;
        }
        int v37 = *(char *)(a1 + v34 + 63);
        if (SHIBYTE(v49) >= 0) {
          size_t v38 = HIBYTE(v49);
        }
        else {
          size_t v38 = *((void *)&v48 + 1);
        }
        if (SHIBYTE(v49) >= 0) {
          uint64_t v39 = &v48;
        }
        else {
          uint64_t v39 = (long long *)v48;
        }
        if (v37 >= 0) {
          size_t v40 = *(unsigned __int8 *)(a1 + v34 + 63);
        }
        else {
          size_t v40 = *(void *)(a1 + v34 + 48);
        }
        if (v37 >= 0) {
          unint64_t v41 = (const void *)(a1 + v34 + 40);
        }
        else {
          unint64_t v41 = *(const void **)(a1 + v34 + 40);
        }
        if (v40 >= v38) {
          size_t v42 = v38;
        }
        else {
          size_t v42 = v40;
        }
        int v43 = memcmp(v39, v41, v42);
        BOOL v44 = v43 < 0;
        if (!v43) {
          BOOL v44 = v38 < v40;
        }
        uint64_t v33 = v34 - 40;
        if (!v44)
        {
          uint64_t v45 = a1 + v33 + 120;
          if ((*(char *)(a1 + v33 + 143) & 0x80000000) == 0) {
            goto LABEL_25;
          }
          goto LABEL_70;
        }
      }
      uint64_t v45 = a1;
      if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
        goto LABEL_25;
      }
LABEL_70:
      operator delete(*(void **)v45);
LABEL_25:
      *(_OWORD *)uint64_t v45 = v48;
      *(void *)(v45 + 16) = v49;
      *(void *)(a1 + v34 + 104) = v50;
      *(_DWORD *)(a1 + v34 + 112) = v51;
      if (++v22 == 8) {
        return v20 + 5 == a2;
      }
    }
    size_t v19 = v20;
    v21 += 40;
    v20 += 5;
    if (v20 == a2) {
      return 1;
    }
  }
}

void sub_315264(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  sub_314158(a1, a2, (const void **)a3);
  int v8 = *(char *)(a3 + 23);
  int v9 = *(const void **)a3;
  size_t v10 = (void *)(a3 + 8);
  int v11 = *((char *)a4 + 23);
  if (v11 >= 0) {
    size_t v12 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v12 = (size_t)a4[1];
  }
  if (v11 >= 0) {
    size_t v13 = a4;
  }
  else {
    size_t v13 = *a4;
  }
  if (v8 >= 0) {
    size_t v14 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v14 = *(void *)(a3 + 8);
  }
  if (v8 >= 0) {
    int v15 = (const void *)a3;
  }
  else {
    int v15 = *(const void **)a3;
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v18 = v12 < v14;
  if (v17) {
    BOOL v18 = v17 < 0;
  }
  if (v18)
  {
    *(void *)int v52 = *v10;
    *(void *)&v52[7] = *(void *)(a3 + 15);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    size_t v19 = (void *)(a3 + 24);
    size_t v46 = *(const void **)(a3 + 24);
    int v49 = *(_DWORD *)(a3 + 32);
    int v20 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(void *)(a3 + 16) = v20;
    *((unsigned char *)a4 + 23) = 0;
    *(unsigned char *)a4 = 0;
    int v21 = *((_DWORD *)a4 + 8);
    *(void *)(a3 + 24) = a4[3];
    *(_DWORD *)(a3 + 32) = v21;
    if (*((char *)a4 + 23) < 0) {
      operator delete((void *)*a4);
    }
    *a4 = v9;
    a4[1] = *(const void **)v52;
    *(const void **)((char *)a4 + 15) = *(const void **)&v52[7];
    *((unsigned char *)a4 + 23) = v8;
    a4[3] = v46;
    *((_DWORD *)a4 + 8) = v49;
    int v22 = *(char *)(a2 + 23);
    int v23 = *(void **)a2;
    int v24 = (void *)(a2 + 8);
    int v25 = *(char *)(a3 + 23);
    if (v25 >= 0) {
      size_t v26 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v26 = *(void *)(a3 + 8);
    }
    if (v25 >= 0) {
      size_t v27 = (const void *)a3;
    }
    else {
      size_t v27 = *(const void **)a3;
    }
    if (v22 >= 0) {
      size_t v28 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v28 = *(void *)(a2 + 8);
    }
    if (v22 >= 0) {
      size_t v29 = (const void *)a2;
    }
    else {
      size_t v29 = *(const void **)a2;
    }
    if (v28 >= v26) {
      size_t v30 = v26;
    }
    else {
      size_t v30 = v28;
    }
    int v31 = memcmp(v27, v29, v30);
    BOOL v32 = v26 < v28;
    if (v31) {
      BOOL v32 = v31 < 0;
    }
    if (v32)
    {
      *(void *)size_t v53 = *v24;
      *(void *)&v53[7] = *(void *)(a2 + 15);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)a2 = 0;
      uint64_t v33 = (void *)(a2 + 24);
      uint64_t v47 = *(void *)(a2 + 24);
      int v50 = *(_DWORD *)(a2 + 32);
      uint64_t v34 = *(void *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(void *)(a2 + 16) = v34;
      *(unsigned char *)(a3 + 23) = 0;
      *(unsigned char *)a3 = 0;
      LODWORD(v34) = *(_DWORD *)(a3 + 32);
      *(void *)(a2 + 24) = *v19;
      *(_DWORD *)(a2 + 32) = v34;
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(void *)a3 = v23;
      *size_t v10 = *(void *)v53;
      *(void *)(a3 + 15) = *(void *)&v53[7];
      *(unsigned char *)(a3 + 23) = v22;
      void *v19 = v47;
      *(_DWORD *)(a3 + 32) = v50;
      int v35 = *(char *)(a1 + 23);
      uint64_t v36 = *(const void **)a1;
      int v37 = *(char *)(a2 + 23);
      if (v37 >= 0) {
        size_t v38 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v38 = *(void *)(a2 + 8);
      }
      if (v37 >= 0) {
        uint64_t v39 = (const void *)a2;
      }
      else {
        uint64_t v39 = *(const void **)a2;
      }
      if (v35 >= 0) {
        size_t v40 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v40 = *(void *)(a1 + 8);
      }
      if (v35 >= 0) {
        unint64_t v41 = (const void *)a1;
      }
      else {
        unint64_t v41 = *(const void **)a1;
      }
      if (v40 >= v38) {
        size_t v42 = v38;
      }
      else {
        size_t v42 = v40;
      }
      int v43 = memcmp(v39, v41, v42);
      BOOL v44 = v38 < v40;
      if (v43) {
        BOOL v44 = v43 < 0;
      }
      if (v44)
      {
        *(void *)int v54 = *(void *)(a1 + 8);
        *(void *)&v54[7] = *(void *)(a1 + 15);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v48 = *(void *)(a1 + 24);
        int v51 = *(_DWORD *)(a1 + 32);
        uint64_t v45 = *(void *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v45;
        *(unsigned char *)(a2 + 23) = 0;
        *(unsigned char *)a2 = 0;
        LODWORD(v45) = *(_DWORD *)(a2 + 32);
        *(void *)(a1 + 24) = *v33;
        *(_DWORD *)(a1 + 32) = v45;
        if (*(char *)(a2 + 23) < 0) {
          operator delete(*(void **)a2);
        }
        *(void *)a2 = v36;
        *int v24 = *(void *)v54;
        *(void *)(a2 + 15) = *(void *)&v54[7];
        *(unsigned char *)(a2 + 23) = v35;
        *uint64_t v33 = v48;
        *(_DWORD *)(a2 + 32) = v51;
      }
    }
  }
}

void sub_3155B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  sub_315264(a1, a2, a3, (const void **)a4);
  int v9 = *(char *)(a4 + 23);
  size_t v10 = *(const void **)a4;
  int v11 = (void *)(a4 + 8);
  int v12 = *((char *)a5 + 23);
  if (v12 >= 0) {
    size_t v13 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v13 = (size_t)a5[1];
  }
  if (v12 >= 0) {
    size_t v14 = a5;
  }
  else {
    size_t v14 = *a5;
  }
  if (v9 >= 0) {
    size_t v15 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v15 = *(void *)(a4 + 8);
  }
  if (v9 >= 0) {
    size_t v16 = (const void *)a4;
  }
  else {
    size_t v16 = *(const void **)a4;
  }
  if (v15 >= v13) {
    size_t v17 = v13;
  }
  else {
    size_t v17 = v15;
  }
  int v18 = memcmp(v14, v16, v17);
  BOOL v19 = v13 < v15;
  if (v18) {
    BOOL v19 = v18 < 0;
  }
  if (v19)
  {
    *(void *)int v69 = *v11;
    *(void *)&v69[7] = *(void *)(a4 + 15);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    int v20 = (void *)(a4 + 24);
    uint64_t v61 = *(const void **)(a4 + 24);
    int v65 = *(_DWORD *)(a4 + 32);
    int v21 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(void *)(a4 + 16) = v21;
    *((unsigned char *)a5 + 23) = 0;
    *(unsigned char *)a5 = 0;
    int v22 = *((_DWORD *)a5 + 8);
    *(void *)(a4 + 24) = a5[3];
    *(_DWORD *)(a4 + 32) = v22;
    if (*((char *)a5 + 23) < 0) {
      operator delete((void *)*a5);
    }
    *a5 = v10;
    a5[1] = *(const void **)v69;
    *(const void **)((char *)a5 + 15) = *(const void **)&v69[7];
    *((unsigned char *)a5 + 23) = v9;
    a5[3] = v61;
    *((_DWORD *)a5 + 8) = v65;
    int v23 = *(char *)(a3 + 23);
    int v24 = *(void **)a3;
    int v25 = (void *)(a3 + 8);
    int v26 = *(char *)(a4 + 23);
    if (v26 >= 0) {
      size_t v27 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      size_t v27 = *(void *)(a4 + 8);
    }
    if (v26 >= 0) {
      size_t v28 = (const void *)a4;
    }
    else {
      size_t v28 = *(const void **)a4;
    }
    if (v23 >= 0) {
      size_t v29 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v29 = *(void *)(a3 + 8);
    }
    if (v23 >= 0) {
      size_t v30 = (const void *)a3;
    }
    else {
      size_t v30 = *(const void **)a3;
    }
    if (v29 >= v27) {
      size_t v31 = v27;
    }
    else {
      size_t v31 = v29;
    }
    int v32 = memcmp(v28, v30, v31);
    BOOL v33 = v27 < v29;
    if (v32) {
      BOOL v33 = v32 < 0;
    }
    if (v33)
    {
      *(void *)char v70 = *v25;
      *(void *)&v70[7] = *(void *)(a3 + 15);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      uint64_t v34 = (void *)(a3 + 24);
      uint64_t v62 = *(void *)(a3 + 24);
      int v66 = *(_DWORD *)(a3 + 32);
      uint64_t v35 = *(void *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(void *)(a3 + 16) = v35;
      *(unsigned char *)(a4 + 23) = 0;
      *(unsigned char *)a4 = 0;
      LODWORD(v35) = *(_DWORD *)(a4 + 32);
      *(void *)(a3 + 24) = *v20;
      *(_DWORD *)(a3 + 32) = v35;
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(void *)a4 = v24;
      void *v11 = *(void *)v70;
      *(void *)(a4 + 15) = *(void *)&v70[7];
      *(unsigned char *)(a4 + 23) = v23;
      *int v20 = v62;
      *(_DWORD *)(a4 + 32) = v66;
      int v36 = *(char *)(a2 + 23);
      int v37 = *(void **)a2;
      size_t v38 = (void *)(a2 + 8);
      int v39 = *(char *)(a3 + 23);
      if (v39 >= 0) {
        size_t v40 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        size_t v40 = *(void *)(a3 + 8);
      }
      if (v39 >= 0) {
        unint64_t v41 = (const void *)a3;
      }
      else {
        unint64_t v41 = *(const void **)a3;
      }
      if (v36 >= 0) {
        size_t v42 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v42 = *(void *)(a2 + 8);
      }
      if (v36 >= 0) {
        int v43 = (const void *)a2;
      }
      else {
        int v43 = *(const void **)a2;
      }
      if (v42 >= v40) {
        size_t v44 = v40;
      }
      else {
        size_t v44 = v42;
      }
      int v45 = memcmp(v41, v43, v44);
      BOOL v46 = v40 < v42;
      if (v45) {
        BOOL v46 = v45 < 0;
      }
      if (v46)
      {
        *(void *)unsigned int v71 = *v38;
        *(void *)&v71[7] = *(void *)(a2 + 15);
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)a2 = 0;
        uint64_t v47 = (void *)(a2 + 24);
        uint64_t v63 = *(void *)(a2 + 24);
        int v67 = *(_DWORD *)(a2 + 32);
        uint64_t v48 = *(void *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(void *)(a2 + 16) = v48;
        *(unsigned char *)(a3 + 23) = 0;
        *(unsigned char *)a3 = 0;
        LODWORD(v48) = *(_DWORD *)(a3 + 32);
        *(void *)(a2 + 24) = *v34;
        *(_DWORD *)(a2 + 32) = v48;
        if (*(char *)(a3 + 23) < 0) {
          operator delete(*(void **)a3);
        }
        *(void *)a3 = v37;
        *int v25 = *(void *)v71;
        *(void *)(a3 + 15) = *(void *)&v71[7];
        *(unsigned char *)(a3 + 23) = v36;
        *uint64_t v34 = v63;
        *(_DWORD *)(a3 + 32) = v67;
        int v49 = *(char *)(a1 + 23);
        int v50 = *(const void **)a1;
        int v51 = *(char *)(a2 + 23);
        if (v51 >= 0) {
          size_t v52 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v52 = *(void *)(a2 + 8);
        }
        if (v51 >= 0) {
          size_t v53 = (const void *)a2;
        }
        else {
          size_t v53 = *(const void **)a2;
        }
        if (v49 >= 0) {
          size_t v54 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v54 = *(void *)(a1 + 8);
        }
        if (v49 >= 0) {
          BOOL v55 = (const void *)a1;
        }
        else {
          BOOL v55 = *(const void **)a1;
        }
        if (v54 >= v52) {
          size_t v56 = v52;
        }
        else {
          size_t v56 = v54;
        }
        int v57 = memcmp(v53, v55, v56);
        BOOL v58 = v52 < v54;
        if (v57) {
          BOOL v58 = v57 < 0;
        }
        if (v58)
        {
          *(void *)unint64_t v72 = *(void *)(a1 + 8);
          *(void *)&v72[7] = *(void *)(a1 + 15);
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          uint64_t v64 = *(void *)(a1 + 24);
          int v68 = *(_DWORD *)(a1 + 32);
          uint64_t v59 = *(void *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v59;
          *(unsigned char *)(a2 + 23) = 0;
          *(unsigned char *)a2 = 0;
          LODWORD(v59) = *(_DWORD *)(a2 + 32);
          *(void *)(a1 + 24) = *v47;
          *(_DWORD *)(a1 + 32) = v59;
          if (*(char *)(a2 + 23) < 0) {
            operator delete(*(void **)a2);
          }
          *(void *)a2 = v50;
          *size_t v38 = *(void *)v72;
          *(void *)(a2 + 15) = *(void *)&v72[7];
          *(unsigned char *)(a2 + 23) = v49;
          *uint64_t v47 = v64;
          *(_DWORD *)(a2 + 32) = v68;
        }
      }
    }
  }
}

__n128 sub_315A00(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v73 = v4;
    uint64_t v74 = v5;
    int v7 = a4;
    uint64_t v8 = a1;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      int64_t v10 = a3;
      int64_t v11 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      int v12 = (__n128 *)(a1 + 40 * v11);
      int64_t v13 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v13 >= a3)
      {
        int v26 = (__n128 *)v12->n128_u64[0];
      }
      else
      {
        char v14 = v12[3].n128_i8[15];
        size_t v15 = (__n128 *)v12[2].n128_u64[1];
        char v16 = v12[1].n128_i8[7];
        int v65 = (__n128 *)v12->n128_u64[0];
        if (v16 >= 0) {
          size_t v17 = v12[1].n128_u8[7];
        }
        else {
          size_t v17 = v12->n128_u64[1];
        }
        if (v16 >= 0) {
          int v18 = (const void *)(a1 + 40 * v11);
        }
        else {
          int v18 = (const void *)v12->n128_u64[0];
        }
        unint64_t v19 = v6 >> 1;
        if (v14 >= 0) {
          size_t v20 = v12[3].n128_u8[15];
        }
        else {
          size_t v20 = v12[3].n128_u64[0];
        }
        if (v14 >= 0) {
          int v21 = &v12[2].n128_i8[8];
        }
        else {
          int v21 = (__int8 *)v12[2].n128_u64[1];
        }
        if (v20 >= v17) {
          size_t v22 = v17;
        }
        else {
          size_t v22 = v20;
        }
        int v23 = memcmp(v18, v21, v22);
        BOOL v24 = v17 >= v20;
        int64_t v9 = v19;
        uint64_t v8 = a1;
        BOOL v25 = !v24;
        if (v23) {
          BOOL v25 = v23 < 0;
        }
        BOOL v50 = !v25;
        int v26 = v65;
        if (!v50)
        {
          int v26 = v15;
          int v12 = (__n128 *)((char *)v12 + 40);
          int64_t v11 = v13;
        }
      }
      int v27 = v7[1].n128_i8[7];
      int v28 = v12[1].n128_i8[7];
      if (v28 >= 0) {
        size_t v29 = v12[1].n128_u8[7];
      }
      else {
        size_t v29 = v12->n128_u64[1];
      }
      if (v28 >= 0) {
        size_t v30 = v12;
      }
      else {
        size_t v30 = v26;
      }
      if (v27 >= 0) {
        size_t v31 = v7[1].n128_u8[7];
      }
      else {
        size_t v31 = v7->n128_u64[1];
      }
      if (v27 >= 0) {
        int v32 = v7;
      }
      else {
        int v32 = (__n128 *)v7->n128_u64[0];
      }
      if (v31 >= v29) {
        size_t v33 = v29;
      }
      else {
        size_t v33 = v31;
      }
      int v34 = memcmp(v30, v32, v33);
      BOOL v36 = v29 < v31;
      if (v34) {
        BOOL v36 = v34 < 0;
      }
      if (!v36)
      {
        __n128 v69 = *v7;
        unint64_t v37 = v7[1].n128_u64[0];
        unint64_t v38 = v7[1].n128_u64[1];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        int64_t v66 = v9;
        int64_t v70 = v37;
        unint64_t v71 = v38;
        unsigned __int32 v72 = v7[2].n128_u32[0];
        int64_t v67 = v10;
        do
        {
          long long v60 = v12;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v61 = *v12;
          v7[1].n128_u64[0] = v12[1].n128_u64[0];
          *int v7 = v61;
          v12[1].n128_u8[7] = 0;
          v12->n128_u8[0] = 0;
          unint64_t v62 = v12[1].n128_u64[1];
          v7[2].n128_u32[0] = v12[2].n128_u32[0];
          v7[1].n128_u64[1] = v62;
          if (v9 < v11) {
            break;
          }
          uint64_t v63 = (2 * v11) | 1;
          int v12 = (__n128 *)(v8 + 40 * v63);
          int64_t v11 = 2 * v11 + 2;
          if (v11 < v10)
          {
            int v39 = v12[3].n128_i8[15];
            size_t v40 = (__n128 *)v12[2].n128_u64[1];
            int v41 = v12[1].n128_i8[7];
            size_t v42 = (__n128 *)v12->n128_u64[0];
            if (v41 >= 0) {
              size_t v43 = v12[1].n128_u8[7];
            }
            else {
              size_t v43 = v12->n128_u64[1];
            }
            if (v41 >= 0) {
              size_t v44 = v12;
            }
            else {
              size_t v44 = (__n128 *)v12->n128_u64[0];
            }
            if (v39 >= 0) {
              size_t v45 = v12[3].n128_u8[15];
            }
            else {
              size_t v45 = v12[3].n128_u64[0];
            }
            if (v39 >= 0) {
              BOOL v46 = &v12[2].n128_i8[8];
            }
            else {
              BOOL v46 = (__int8 *)v12[2].n128_u64[1];
            }
            if (v45 >= v43) {
              size_t v47 = v43;
            }
            else {
              size_t v47 = v45;
            }
            int v48 = memcmp(v44, v46, v47);
            BOOL v49 = v43 < v45;
            if (v48) {
              BOOL v49 = v48 < 0;
            }
            BOOL v50 = !v49;
            if (v49) {
              int v51 = v40;
            }
            else {
              int v51 = v42;
            }
            int64_t v10 = v67;
            uint64_t v8 = a1;
            if (!v50) {
              int v12 = (__n128 *)((char *)v12 + 40);
            }
            int64_t v9 = v66;
            if (v50) {
              int64_t v11 = v63;
            }
          }
          else
          {
            int v51 = (__n128 *)v12->n128_u64[0];
            int64_t v11 = v63;
          }
          int v52 = v12[1].n128_i8[7];
          if (v52 >= 0) {
            size_t v53 = v12[1].n128_u8[7];
          }
          else {
            size_t v53 = v12->n128_u64[1];
          }
          if (v52 >= 0) {
            size_t v54 = v12;
          }
          else {
            size_t v54 = v51;
          }
          if (v70 >= 0) {
            size_t v55 = HIBYTE(v70);
          }
          else {
            size_t v55 = v69.n128_u64[1];
          }
          if (v70 >= 0) {
            size_t v56 = &v69;
          }
          else {
            size_t v56 = (__n128 *)v69.n128_u64[0];
          }
          if (v55 >= v53) {
            size_t v57 = v53;
          }
          else {
            size_t v57 = v55;
          }
          int v58 = memcmp(v54, v56, v57);
          BOOL v59 = v53 < v55;
          if (v58) {
            BOOL v59 = v58 < 0;
          }
          int v7 = v60;
        }
        while (!v59);
        if (v60[1].n128_i8[7] < 0) {
          operator delete((void *)v60->n128_u64[0]);
        }
        __n128 result = v69;
        v60[1].n128_u64[0] = v70;
        *long long v60 = result;
        unint64_t v64 = v71;
        v60[2].n128_u32[0] = v72;
        v60[1].n128_u64[1] = v64;
      }
    }
  }
  return result;
}

void sub_315D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v5 = 0;
    uint64_t v29 = *(void *)a1;
    *(void *)int v34 = *(void *)(a1 + 8);
    *(void *)&v34[7] = *(void *)(a1 + 15);
    char v31 = *(unsigned char *)(a1 + 23);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    uint64_t v32 = *(void *)(a1 + 24);
    int v33 = *(_DWORD *)(a1 + 32);
    int64_t v6 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v7 = a1;
    *(void *)a1 = 0;
    do
    {
      uint64_t v11 = v7 + 40 * v5 + 40;
      uint64_t v12 = 2 * v5;
      uint64_t v5 = (2 * v5) | 1;
      uint64_t v13 = v12 + 2;
      if (v12 + 2 < a4)
      {
        int v14 = *(char *)(v11 + 63);
        int v15 = *(char *)(v11 + 23);
        if (v15 >= 0) {
          size_t v16 = *(unsigned __int8 *)(v11 + 23);
        }
        else {
          size_t v16 = *(void *)(v11 + 8);
        }
        if (v15 >= 0) {
          size_t v17 = (const void *)v11;
        }
        else {
          size_t v17 = *(const void **)v11;
        }
        if (v14 >= 0) {
          size_t v18 = *(unsigned __int8 *)(v11 + 63);
        }
        else {
          size_t v18 = *(void *)(v11 + 48);
        }
        if (v14 >= 0) {
          unint64_t v19 = (const void *)(v11 + 40);
        }
        else {
          unint64_t v19 = *(const void **)(v11 + 40);
        }
        if (v18 >= v16) {
          size_t v20 = v16;
        }
        else {
          size_t v20 = v18;
        }
        int v21 = memcmp(v17, v19, v20);
        BOOL v22 = v16 < v18;
        if (v21) {
          BOOL v22 = v21 < 0;
        }
        if (v22)
        {
          v11 += 40;
          uint64_t v5 = v13;
        }
      }
      if (*(char *)(v7 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)v11;
      *(void *)(v7 + 16) = *(void *)(v11 + 16);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v11 + 23) = 0;
      int64_t v10 = (void *)(v11 + 24);
      uint64_t v9 = *(void *)(v11 + 24);
      *(unsigned char *)uint64_t v11 = 0;
      *(_DWORD *)(v7 + 32) = *(_DWORD *)(v11 + 32);
      *(void *)(v7 + 24) = v9;
      uint64_t v7 = v11;
    }
    while (v5 <= v6);
    int v23 = (void **)(a2 - 40);
    int v24 = *(char *)(v11 + 23);
    if (v11 == a2 - 40)
    {
      if (v24 < 0) {
        operator delete(*(void **)v11);
      }
      *(void *)uint64_t v11 = v29;
      *(void *)(v11 + 8) = *(void *)v34;
      *(void *)(v11 + 15) = *(void *)&v34[7];
      *(unsigned char *)(v11 + 23) = v31;
      *int64_t v10 = v32;
      *(_DWORD *)(v11 + 32) = v33;
    }
    else
    {
      if (v24 < 0) {
        operator delete(*(void **)v11);
      }
      long long v25 = *(_OWORD *)v23;
      *(void *)(v11 + 16) = *(void *)(a2 - 24);
      *(_OWORD *)uint64_t v11 = v25;
      uint64_t v26 = *(void *)(a2 - 16);
      *(unsigned char *)(a2 - 17) = 0;
      *(unsigned char *)(a2 - 40) = 0;
      *(_DWORD *)(v11 + 32) = *(_DWORD *)(a2 - 8);
      *int64_t v10 = v26;
      if (*(char *)(a2 - 17) < 0) {
        operator delete(*v23);
      }
      *(void *)(a2 - 40) = v29;
      *(void *)(a2 - 32) = *(void *)v34;
      *(void *)(a2 - 25) = *(void *)&v34[7];
      *(unsigned char *)(a2 - 17) = v31;
      *(void *)(a2 - 16) = v32;
      *(_DWORD *)(a2 - 8) = v33;
      sub_315FC4(a1, v11 + 40, a3, 0xCCCCCCCCCCCCCCCDLL * ((v11 + 40 - a1) >> 3));
    }
  }
}

double sub_315FC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v40 = v4;
    uint64_t v41 = v5;
    unint64_t v9 = v6 >> 1;
    int64_t v10 = (long long *)(a1 + 40 * (v6 >> 1));
    uint64_t v11 = (long long *)(a2 - 40);
    int v12 = *(char *)(a2 - 17);
    int v13 = *((char *)v10 + 23);
    if (v13 >= 0) {
      size_t v14 = *((unsigned __int8 *)v10 + 23);
    }
    else {
      size_t v14 = *((void *)v10 + 1);
    }
    if (v13 >= 0) {
      int v15 = (const void *)(a1 + 40 * (v6 >> 1));
    }
    else {
      int v15 = *(const void **)v10;
    }
    if (v12 >= 0) {
      size_t v16 = *(unsigned __int8 *)(a2 - 17);
    }
    else {
      size_t v16 = *(void *)(a2 - 32);
    }
    if (v12 >= 0) {
      size_t v17 = (const void *)(a2 - 40);
    }
    else {
      size_t v17 = *(const void **)(a2 - 40);
    }
    if (v16 >= v14) {
      size_t v18 = v14;
    }
    else {
      size_t v18 = v16;
    }
    int v19 = memcmp(v15, v17, v18);
    BOOL v21 = v14 < v16;
    if (v19) {
      BOOL v21 = v19 < 0;
    }
    if (v21)
    {
      uint64_t v22 = *((void *)v11 + 2);
      long long v36 = *v11;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = 0;
      *(void *)uint64_t v11 = 0;
      uint64_t v23 = *(void *)(a2 - 16);
      uint64_t v37 = v22;
      uint64_t v38 = v23;
      int v39 = *(_DWORD *)(a2 - 8);
      size_t v24 = HIBYTE(v22);
      if ((v24 & 0x80u) == 0) {
        size_t v25 = v24;
      }
      else {
        size_t v25 = *((void *)&v36 + 1);
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v26 = &v36;
      }
      else {
        uint64_t v26 = (long long *)v36;
      }
      do
      {
        int v27 = v10;
        if (*((char *)v11 + 23) < 0) {
          operator delete(*(void **)v11);
        }
        long long v28 = *v10;
        *((void *)v11 + 2) = *((void *)v10 + 2);
        long long *v11 = v28;
        *((unsigned char *)v10 + 23) = 0;
        *(unsigned char *)int64_t v10 = 0;
        uint64_t v29 = *((void *)v10 + 3);
        *((_DWORD *)v11 + 8) = *((_DWORD *)v10 + 8);
        *((void *)v11 + 3) = v29;
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        int64_t v10 = (long long *)(a1 + 40 * v9);
        int v30 = *((char *)v10 + 23);
        if (v30 >= 0) {
          size_t v31 = *((unsigned __int8 *)v10 + 23);
        }
        else {
          size_t v31 = *((void *)v10 + 1);
        }
        if (v30 >= 0) {
          uint64_t v32 = (const void *)(a1 + 40 * v9);
        }
        else {
          uint64_t v32 = *(const void **)v10;
        }
        if (v25 >= v31) {
          size_t v33 = v31;
        }
        else {
          size_t v33 = v25;
        }
        int v34 = memcmp(v32, v26, v33);
        BOOL v35 = v31 < v25;
        if (v34) {
          BOOL v35 = v34 < 0;
        }
        uint64_t v11 = v27;
      }
      while (v35);
      if (*((char *)v27 + 23) < 0) {
        operator delete(*(void **)v27);
      }
      double result = *(double *)&v36;
      *int v27 = v36;
      *((void *)v27 + 2) = v37;
      *((void *)v27 + 3) = v38;
      *((_DWORD *)v27 + 8) = v39;
    }
  }
  return result;
}

void **sub_316194(const void **a1, const void **a2)
{
  if (a1 == a2) {
    return (void **)a2;
  }
  uint64_t v3 = a1;
  uint64_t v4 = a1 + 5;
  if (a1 + 5 == a2) {
    return (void **)a2;
  }
  while (1)
  {
    uint64_t v5 = *((unsigned __int8 *)v3 + 23);
    if ((v5 & 0x80u) == 0) {
      unint64_t v6 = (const void *)*((unsigned __int8 *)v3 + 23);
    }
    else {
      unint64_t v6 = v3[1];
    }
    uint64_t v7 = (const void *)*((unsigned __int8 *)v3 + 63);
    int v8 = (char)v7;
    if ((char)v7 < 0) {
      uint64_t v7 = v3[6];
    }
    if (v6 == v7) {
      break;
    }
LABEL_5:
    v4 += 5;
    v3 += 5;
    if (v4 == a2) {
      return (void **)a2;
    }
  }
  if (v8 >= 0) {
    unint64_t v9 = (unsigned __int8 *)v4;
  }
  else {
    unint64_t v9 = (unsigned __int8 *)*v4;
  }
  if ((v5 & 0x80) != 0)
  {
    if (!memcmp(*v3, v9, (size_t)v3[1])) {
      goto LABEL_20;
    }
    goto LABEL_5;
  }
  if (*((unsigned char *)v3 + 23))
  {
    uint64_t v10 = 0;
    while (*((unsigned __int8 *)v3 + v10) == v9[v10])
    {
      if (v5 == ++v10) {
        goto LABEL_20;
      }
    }
    goto LABEL_5;
  }
LABEL_20:
  if (v3 == a2) {
    return (void **)v3;
  }
  uint64_t v11 = (unsigned __int8 **)(v3 + 10);
  if (v3 + 10 != a2)
  {
    int v12 = (unsigned __int8 **)(v3 + 5);
    while (1)
    {
      size_t v16 = v12;
      int v12 = v11;
      uint64_t v17 = *((unsigned __int8 *)v3 + 23);
      if ((v17 & 0x80u) == 0) {
        size_t v18 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
      }
      else {
        size_t v18 = (unsigned __int8 *)v3[1];
      }
      int v19 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 63);
      int v20 = (char)v19;
      if ((char)v19 < 0) {
        int v19 = v16[6];
      }
      if (v18 != v19) {
        goto LABEL_24;
      }
      if (v20 >= 0) {
        BOOL v21 = (unsigned __int8 *)v12;
      }
      else {
        BOOL v21 = *v12;
      }
      if ((v17 & 0x80) != 0)
      {
        if (!memcmp(*v3, v21, (size_t)v3[1])) {
          goto LABEL_41;
        }
LABEL_24:
        int v13 = (void **)(v3 + 5);
        if (*((char *)v3 + 63) < 0) {
          operator delete(*v13);
        }
        long long v14 = *(_OWORD *)v12;
        v3[7] = v12[2];
        *(_OWORD *)int v13 = v14;
        *((unsigned char *)v16 + 63) = 0;
        *(unsigned char *)int v12 = 0;
        int v15 = v16[8];
        *((_DWORD *)v3 + 18) = *((_DWORD *)v16 + 18);
        v3[8] = v15;
        uint64_t v11 = v12 + 5;
        v3 += 5;
        if (v12 + 5 == (unsigned __int8 **)a2) {
          return v13 + 5;
        }
      }
      else
      {
        if (*((unsigned char *)v3 + 23))
        {
          uint64_t v22 = 0;
          while (*((unsigned __int8 *)v3 + v22) == v21[v22])
          {
            if (v17 == ++v22) {
              goto LABEL_41;
            }
          }
          goto LABEL_24;
        }
LABEL_41:
        int v13 = (void **)v3;
        uint64_t v11 = v12 + 5;
        if (v12 + 5 == (unsigned __int8 **)a2) {
          return v13 + 5;
        }
      }
    }
  }
  int v13 = (void **)v3;
  return v13 + 5;
}

void sub_316378(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x666666666666667) {
    sub_2E00();
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = 40 * a2;
  unint64_t v6 = (char *)operator new(40 * a2);
  uint64_t v7 = &v6[v5];
  int v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_19;
  }
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = &v8[v9];
    uint64_t v11 = &v4[v9];
    *((void *)v10 - 5) = *(void *)&v4[v9 - 40];
    *((_OWORD *)v10 - 2) = *(_OWORD *)&v4[v9 - 32];
    *((void *)v10 - 2) = *(void *)&v4[v9 - 16];
    *((void *)v11 - 4) = 0;
    *((void *)v11 - 3) = 0;
    *((void *)v11 - 2) = 0;
    *((_DWORD *)v10 - 2) = *(_DWORD *)&v4[v9 - 8];
    v9 -= 40;
  }
  while (&v4[v9] != v2);
  int v12 = *a1;
  uint64_t v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v12)
  {
    do
    {
      uint64_t v14 = *((void *)v2 - 4);
      if (v14)
      {
        uint64_t v15 = *((void *)v2 - 3);
        int v13 = (void *)*((void *)v2 - 4);
        if (v15 != v14)
        {
          do
          {
            if (*(char *)(v15 - 17) < 0) {
              operator delete(*(void **)(v15 - 40));
            }
            v15 -= 40;
          }
          while (v15 != v14);
          int v13 = (void *)*((void *)v2 - 4);
        }
        *((void *)v2 - 3) = v14;
        operator delete(v13);
      }
      v2 -= 40;
    }
    while (v2 != v12);
    uint64_t v2 = v12;
  }
  if (v2)
  {
LABEL_19:
    operator delete(v2);
  }
}

char *sub_3164F0(char **a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (char *)a2;
  uint64_t v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - *a1) >> 3);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v7) >> 3) + 1;
    if (v19 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)v7) >> 3);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x333333333333333) {
      unint64_t v21 = 0x666666666666666;
    }
    else {
      unint64_t v21 = v19;
    }
    size_t v45 = a1 + 2;
    if (v21)
    {
      if (v21 > 0x666666666666666) {
        sub_188D718();
      }
      uint64_t v22 = (char *)operator new(40 * v21);
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v41 = v22;
    size_t v42 = &v22[40 * v8];
    size_t v43 = v42;
    size_t v44 = &v22[40 * v21];
    sub_3169B8((uint64_t)&v41, a3);
    size_t v24 = v42;
    size_t v25 = *a1;
    uint64_t v26 = v42;
    if (*a1 != v4)
    {
      uint64_t v27 = 0;
      do
      {
        long long v28 = &v24[v27];
        uint64_t v29 = &v4[v27];
        *((void *)v28 - 5) = *(void *)&v4[v27 - 40];
        *((void *)v28 - 4) = 0;
        *((void *)v28 - 3) = 0;
        *((void *)v28 - 2) = 0;
        *((_OWORD *)v28 - 2) = *(_OWORD *)&v4[v27 - 32];
        *((void *)v28 - 2) = *(void *)&v4[v27 - 16];
        *((void *)v29 - 4) = 0;
        *((void *)v29 - 3) = 0;
        *((void *)v29 - 2) = 0;
        *((_DWORD *)v28 - 2) = *(_DWORD *)&v4[v27 - 8];
        v27 -= 40;
      }
      while (&v4[v27] != v25);
      uint64_t v26 = &v24[v27];
    }
    size_t v42 = v26;
    int v30 = a1[1];
    size_t v31 = v43;
    if (v30 != v4)
    {
      do
      {
        *(void *)size_t v31 = *(void *)v4;
        *((void *)v31 + 1) = 0;
        *((void *)v31 + 2) = 0;
        *((void *)v31 + 3) = 0;
        *(_OWORD *)(v31 + 8) = *(_OWORD *)(v4 + 8);
        *((void *)v31 + 3) = *((void *)v4 + 3);
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        *((void *)v4 + 3) = 0;
        *((_DWORD *)v31 + 8) = *((_DWORD *)v4 + 8);
        v31 += 40;
        v4 += 40;
      }
      while (v4 != v30);
      uint64_t v26 = v42;
      uint64_t v4 = a1[1];
    }
    uint64_t v32 = *a1;
    *a1 = v26;
    a1[1] = v31;
    size_t v33 = a1[2];
    a1[2] = v44;
    size_t v43 = v4;
    size_t v44 = v33;
    uint64_t v41 = v32;
    size_t v42 = v32;
    if (v4 == v32)
    {
      if (!v4) {
        return v24;
      }
    }
    else
    {
      do
      {
        while (1)
        {
          while (1)
          {
            int v34 = v4 - 40;
            size_t v43 = v4 - 40;
            uint64_t v35 = *((void *)v4 - 4);
            if (v35) {
              break;
            }
            v4 -= 40;
            if (v34 == v32) {
              goto LABEL_40;
            }
          }
          uint64_t v36 = *((void *)v4 - 3);
          uint64_t v37 = (void *)*((void *)v4 - 4);
          if (v36 != v35) {
            break;
          }
          *((void *)v4 - 3) = v35;
          operator delete(v37);
          uint64_t v4 = v43;
          if (v43 == v32) {
            goto LABEL_40;
          }
        }
        do
        {
          if (*(char *)(v36 - 17) < 0) {
            operator delete(*(void **)(v36 - 40));
          }
          v36 -= 40;
        }
        while (v36 != v35);
        uint64_t v38 = (void *)*((void *)v4 - 4);
        *((void *)v4 - 3) = v35;
        operator delete(v38);
        uint64_t v4 = v43;
      }
      while (v43 != v32);
LABEL_40:
      uint64_t v4 = v41;
      if (!v41) {
        return v24;
      }
    }
    operator delete(v4);
    return v24;
  }
  if (a2 == (void *)v6)
  {
    *a2 = *(void *)a3;
    uint64_t v23 = &v7[40 * v8];
    *((void *)v23 + 2) = 0;
    *((void *)v23 + 3) = 0;
    *((void *)v23 + 1) = 0;
    *(_OWORD *)(v23 + 8) = *(_OWORD *)(a3 + 8);
    *((void *)v23 + 3) = *(void *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    *((_DWORD *)v23 + 8) = *(_DWORD *)(a3 + 32);
    a1[1] = (char *)(a2 + 5);
  }
  else
  {
    sub_316880((uint64_t)a1, (char *)a2, v6, (__n128 *)(a2 + 5));
    *(void *)uint64_t v4 = *(void *)a3;
    uint64_t v10 = &v7[40 * v8];
    int v13 = (void **)*((void *)v10 + 1);
    uint64_t v11 = v10 + 8;
    int v12 = v13;
    if (v13)
    {
      uint64_t v14 = &v7[40 * v8];
      uint64_t v17 = (void **)*((void *)v14 + 2);
      uint64_t v15 = (void ***)(v14 + 16);
      size_t v16 = v17;
      size_t v18 = v12;
      if (v17 != v12)
      {
        do
        {
          if (*((char *)v16 - 17) < 0) {
            operator delete(*(v16 - 5));
          }
          v16 -= 5;
        }
        while (v16 != v12);
        size_t v18 = *(void ***)v11;
      }
      *uint64_t v15 = v12;
      operator delete(v18);
      *(void *)uint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = 0;
    }
    *(_OWORD *)uint64_t v11 = *(_OWORD *)(a3 + 8);
    int v39 = &v7[40 * v8];
    *((void *)v39 + 3) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *((_DWORD *)v39 + 8) = *(_DWORD *)(a3 + 32);
  }
  return v4;
}

void sub_31686C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_312560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_316880(uint64_t a1, char *a2, unint64_t a3, __n128 *a4)
{
  uint64_t v5 = *(__n128 **)(a1 + 8);
  unint64_t v6 = (__n128 *)&a2[(char *)v5 - (char *)a4];
  uint64_t v7 = v5;
  if ((unint64_t)v6 < a3)
  {
    unint64_t v8 = &a2[(char *)v5 - (char *)a4];
    uint64_t v7 = *(__n128 **)(a1 + 8);
    do
    {
      v7->n128_u64[0] = *(void *)v8;
      v7->n128_u64[1] = 0;
      v7[1].n128_u64[0] = 0;
      v7[1].n128_u64[1] = 0;
      __n128 result = *(__n128 *)(v8 + 8);
      *(__n128 *)((char *)v7 + 8) = result;
      v7[1].n128_u64[1] = *((void *)v8 + 3);
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = 0;
      *((void *)v8 + 3) = 0;
      v7[2].n128_u32[0] = *((_DWORD *)v8 + 8);
      uint64_t v7 = (__n128 *)((char *)v7 + 40);
      v8 += 40;
    }
    while ((unint64_t)v8 < a3);
  }
  *(void *)(a1 + 8) = v7;
  if (v5 != a4)
  {
    uint64_t v10 = &a2[(char *)v5 - (char *)a4];
    uint64_t v11 = v5;
    do
    {
      unint64_t v13 = *((void *)v10 - 5);
      v10 -= 40;
      v11[-3].n128_u64[1] = v13;
      uint64_t v11 = (__n128 *)((char *)v11 - 40);
      uint64_t v14 = (void **)&v11->n128_u64[1];
      unint64_t v15 = v11->n128_u64[1];
      if (v15)
      {
        uint64_t v16 = v5[-2].n128_i64[1];
        int v12 = (void *)v11->n128_u64[1];
        if (v16 != v15)
        {
          do
          {
            if (*(char *)(v16 - 17) < 0) {
              operator delete(*(void **)(v16 - 40));
            }
            v16 -= 40;
          }
          while (v16 != v15);
          int v12 = *v14;
        }
        v5[-2].n128_u64[1] = v15;
        operator delete(v12);
        char *v14 = 0;
        v11[1].n128_u64[0] = 0;
        v11[1].n128_u64[1] = 0;
      }
      __n128 result = v6[-2];
      v5[-2] = result;
      v5[-1].n128_u64[0] = v6[-1].n128_u64[0];
      v6[-2].n128_u64[0] = 0;
      v6[-2].n128_u64[1] = 0;
      v6[-1].n128_u64[0] = 0;
      v5[-1].n128_u32[2] = v6[-1].n128_u32[2];
      uint64_t v5 = v11;
      unint64_t v6 = (__n128 *)v10;
    }
    while (v10 != a2);
  }
  return result;
}

__n128 sub_3169B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4 == *(void **)(a1 + 24))
  {
    uint64_t v5 = *(unsigned char **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      unint64_t v16 = 0x999999999999999ALL * (((char *)v4 - v5) >> 3);
      if (v4 == (void *)v5) {
        unint64_t v16 = 1;
      }
      if (v16 >= 0x666666666666667) {
        sub_188D718();
      }
      unint64_t v17 = v16 >> 2;
      uint64_t v18 = 40 * v16;
      unint64_t v19 = (char *)operator new(40 * v16);
      unint64_t v20 = &v19[40 * v17];
      unint64_t v21 = &v19[v18];
      if (v4 == (void *)v6)
      {
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v20;
        *(void *)(a1 + 16) = v20;
        *(void *)(a1 + 24) = v21;
      }
      else
      {
        uint64_t v22 = (char *)v4 + (void)v20 - v6;
        uint64_t v23 = 40 * v17;
        do
        {
          size_t v24 = &v19[v23];
          *(void *)size_t v24 = *(void *)v6;
          *(_OWORD *)(v24 + 8) = *(_OWORD *)(v6 + 8);
          *((void *)v24 + 3) = *(void *)(v6 + 24);
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
          *((_DWORD *)v24 + 8) = *(_DWORD *)(v6 + 32);
          v23 += 40;
          v6 += 40;
        }
        while (v24 + 40 != v22);
        uint64_t v5 = *(unsigned char **)a1;
        uint64_t v25 = *(void *)(a1 + 8);
        uint64_t v26 = *(void *)(a1 + 16);
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v20;
        *(void *)(a1 + 16) = v22;
        *(void *)(a1 + 24) = v21;
        while (v26 != v25)
        {
          uint64_t v28 = *(void *)(v26 - 32);
          if (v28)
          {
            uint64_t v29 = *(void *)(v26 - 24);
            uint64_t v27 = *(void **)(v26 - 32);
            if (v29 != v28)
            {
              do
              {
                if (*(char *)(v29 - 17) < 0) {
                  operator delete(*(void **)(v29 - 40));
                }
                v29 -= 40;
              }
              while (v29 != v28);
              uint64_t v27 = *(void **)(v26 - 32);
            }
            *(void *)(v26 - 24) = v28;
            operator delete(v27);
          }
          v26 -= 40;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(void **)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      unint64_t v11 = v6 - 40 * v9;
      if ((void *)v6 != v4)
      {
        do
        {
          *(void *)unint64_t v11 = *(void *)v6;
          unint64_t v13 = (void **)(v11 + 8);
          uint64_t v14 = *(void *)(v11 + 8);
          if (v14)
          {
            uint64_t v15 = *(void *)(v11 + 16);
            int v12 = *(void **)(v11 + 8);
            if (v15 != v14)
            {
              do
              {
                if (*(char *)(v15 - 17) < 0) {
                  operator delete(*(void **)(v15 - 40));
                }
                v15 -= 40;
              }
              while (v15 != v14);
              int v12 = *v13;
            }
            *(void *)(v11 + 16) = v14;
            operator delete(v12);
            *unint64_t v13 = 0;
            *(void *)(v11 + 16) = 0;
            *(void *)(v11 + 24) = 0;
          }
          *(_OWORD *)(v11 + 8) = *(_OWORD *)(v6 + 8);
          *(void *)(v11 + 24) = *(void *)(v6 + 24);
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
          *(_DWORD *)(v11 + 32) = *(_DWORD *)(v6 + 32);
          v6 += 40;
          v11 += 40;
        }
        while ((void *)v6 != v4);
        uint64_t v4 = *(void **)(a1 + 8);
      }
      *(void *)(a1 + 8) = &v4[5 * v10];
      *(void *)(a1 + 16) = v11;
      uint64_t v4 = (void *)v11;
    }
  }
  *uint64_t v4 = *(void *)a2;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = 0;
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v4 + 1) = result;
  v4[3] = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *((_DWORD *)v4 + 8) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 16) += 40;
  return result;
}

BOOL sub_316C50(char **a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v117 = (a4[1] - *a4) >> 4;
  uint64_t v5 = &a1[1][(void)*a1];
  uint64_t v134 = *a1;
  uint64_t v135 = v5;
  uint64_t v136 = 0x2C700000000;
  uint16x8_t v131 = 0;
  uint32x4_t v132 = 0;
  unsigned int v133 = 0;
  char v128 = 0;
  long long v129 = 0;
  uint64_t v130 = 0;
LABEL_3:
  while (sub_2F333C((uint64_t)&v134))
  {
    if (v136 == 1)
    {
      int v31 = sub_2F36C8(&v134, v135);
      uint64_t v32 = v134;
      size_t v33 = v135;
      int v34 = &v134[v31];
      uint64_t v134 = v34;
      if (v34 > v135)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v124, "Skipping over bytes exceeded message length.");
        unint64_t v115 = (void *)sub_2F404((uint64_t)exception, &v124);
      }
      *(void *)&long long v124 = v32;
      *((void *)&v124 + 1) = v135;
      if (v31)
      {
        uint64_t v35 = v135;
        while (1)
        {
          __p[0] = v32;
          int v36 = 10 * sub_2F36C8((char **)__p, v35);
          uint64_t v37 = v132;
          if (v132 >= v133)
          {
            int v39 = v131;
            uint64_t v40 = (v132 - v131) >> 2;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62) {
              sub_2E00();
            }
            uint64_t v42 = v133 - v131;
            if ((v133 - v131) >> 1 > v41) {
              unint64_t v41 = v42 >> 1;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              if (v43 >> 62) {
                sub_188D718();
              }
              size_t v44 = (char *)operator new(4 * v43);
              size_t v45 = &v44[4 * v40];
              *(_DWORD *)size_t v45 = v36;
              uint64_t v38 = (uint64_t)(v45 + 4);
              if (v37 != v39)
              {
LABEL_51:
                unint64_t v46 = v37 - 4 - v39;
                if (v46 < 0x2C) {
                  goto LABEL_175;
                }
                if ((unint64_t)(v39 - v44) < 0x20) {
                  goto LABEL_175;
                }
                uint64_t v47 = (v46 >> 2) + 1;
                uint64_t v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
                BOOL v49 = &v37[-v48];
                v45 -= v48;
                BOOL v50 = &v44[4 * v40 - 16];
                int v51 = v37 - 16;
                uint64_t v52 = v47 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v53 = *(_OWORD *)v51;
                  *((_OWORD *)v50 - 1) = *((_OWORD *)v51 - 1);
                  *(_OWORD *)BOOL v50 = v53;
                  v50 -= 32;
                  v51 -= 32;
                  v52 -= 8;
                }
                while (v52);
                uint64_t v37 = v49;
                if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_175:
                  do
                  {
                    int v54 = *((_DWORD *)v37 - 1);
                    v37 -= 4;
                    *((_DWORD *)v45 - 1) = v54;
                    v45 -= 4;
                  }
                  while (v37 != v39);
                }
                uint64_t v37 = v131;
                uint16x8_t v131 = v45;
                unsigned int v133 = &v44[4 * v43];
                if (!v37) {
                  goto LABEL_62;
                }
LABEL_61:
                operator delete(v37);
                goto LABEL_62;
              }
            }
            else
            {
              size_t v44 = 0;
              size_t v45 = (char *)(4 * v40);
              *(_DWORD *)(4 * v40) = v36;
              uint64_t v38 = 4 * v40 + 4;
              if (v37 != v39) {
                goto LABEL_51;
              }
            }
            uint16x8_t v131 = v45;
            unsigned int v133 = &v44[4 * v43];
            if (v37) {
              goto LABEL_61;
            }
          }
          else
          {
            *(_DWORD *)uint32x4_t v132 = v36;
            uint64_t v38 = (uint64_t)(v37 + 4);
          }
LABEL_62:
          uint32x4_t v132 = (char *)v38;
          sub_2F3C98((uint64_t *)&v124, *((uint64_t *)&v124 + 1));
          uint64_t v35 = (char *)*((void *)&v124 + 1);
          uint64_t v32 = (char *)v124;
          if ((char *)v124 == v34 && *((void *)&v124 + 1) == (void)v33) {
            goto LABEL_3;
          }
        }
      }
    }
    else if (v136 == 2)
    {
      int v6 = sub_2F36C8(&v134, v135);
      int64_t v7 = v134;
      uint64_t v8 = v135;
      uint64_t v9 = &v134[v6];
      uint64_t v134 = v9;
      if (v9 > v135)
      {
        long long v112 = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v124, "Skipping over bytes exceeded message length.");
        long long v113 = (void *)sub_2F404((uint64_t)v112, &v124);
      }
      *(void *)&long long v124 = v7;
      *((void *)&v124 + 1) = v135;
      if (v6)
      {
        uint64_t v10 = v135;
        while (1)
        {
          __p[0] = v7;
          double v11 = 4095.75 / (double)sub_2F36C8((char **)__p, v10) * 3.6;
          int v12 = v129;
          if (v129 >= v130)
          {
            uint64_t v14 = v128;
            uint64_t v15 = v129 - v128;
            unint64_t v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v17 = (char *)v130 - (char *)v128;
            if (((char *)v130 - (char *)v128) >> 2 > v16) {
              unint64_t v16 = v17 >> 2;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v16;
            }
            if (v18)
            {
              if (v18 >> 61) {
                sub_188D718();
              }
              unint64_t v19 = (char *)operator new(8 * v18);
              unint64_t v20 = (double *)&v19[8 * v15];
              *unint64_t v20 = v11;
              uint64_t v13 = (uint64_t)(v20 + 1);
              if (v12 != v14)
              {
LABEL_20:
                unint64_t v21 = (char *)(v12 - 1) - (char *)v14;
                if (v21 < 0x58) {
                  goto LABEL_176;
                }
                if ((unint64_t)((char *)v14 - v19) < 0x20) {
                  goto LABEL_176;
                }
                uint64_t v22 = (v21 >> 3) + 1;
                uint64_t v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
                size_t v24 = &v12[v23 / 0xFFFFFFFFFFFFFFF8];
                unint64_t v20 = (double *)((char *)v20 - v23);
                uint64_t v25 = &v19[8 * v15 - 16];
                uint64_t v26 = v12 - 2;
                uint64_t v27 = v22 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v28 = *(_OWORD *)v26;
                  *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
                  *(_OWORD *)uint64_t v25 = v28;
                  v25 -= 32;
                  v26 -= 4;
                  v27 -= 4;
                }
                while (v27);
                int v12 = v24;
                if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_176:
                  do
                  {
                    uint64_t v29 = *((void *)v12-- - 1);
                    *((void *)v20-- - 1) = v29;
                  }
                  while (v12 != v14);
                }
                int v12 = v128;
                char v128 = v20;
                uint64_t v130 = (double *)&v19[8 * v18];
                if (!v12) {
                  goto LABEL_31;
                }
LABEL_30:
                operator delete(v12);
                goto LABEL_31;
              }
            }
            else
            {
              unint64_t v19 = 0;
              unint64_t v20 = (double *)(8 * v15);
              *(double *)(8 * v15) = v11;
              uint64_t v13 = 8 * v15 + 8;
              if (v12 != v14) {
                goto LABEL_20;
              }
            }
            char v128 = v20;
            uint64_t v130 = (double *)&v19[8 * v18];
            if (v12) {
              goto LABEL_30;
            }
          }
          else
          {
            *long long v129 = v11;
            uint64_t v13 = (uint64_t)(v12 + 1);
          }
LABEL_31:
          long long v129 = (double *)v13;
          sub_2F3C98((uint64_t *)&v124, *((uint64_t *)&v124 + 1));
          uint64_t v10 = (char *)*((void *)&v124 + 1);
          int64_t v7 = (char *)v124;
          if ((char *)v124 == v9 && *((void *)&v124 + 1) == (void)v8) {
            goto LABEL_3;
          }
        }
      }
    }
    else
    {
      sub_2F3548((uint64_t)&v134);
    }
  }
  size_t v56 = v131;
  uint64_t v57 = (v132 - v131) >> 2;
  int v58 = v128;
  if (v57 != v129 - v128)
  {
    uint64_t v59 = a5;
    if (!sub_723EC(3u)) {
      goto LABEL_82;
    }
    sub_6BAC((uint64_t)&v124);
    sub_188FC78(&v124, (uint64_t)"Parsed an unequal number of seconds_in_future and encoded_pace.", 63);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    goto LABEL_77;
  }
  uint64_t v59 = a5;
  if (v131 != v132)
  {
    long long v60 = (int *)(v131 + 4);
    do
    {
      if (v60 == (int *)v132) {
        goto LABEL_92;
      }
      int v62 = *(v60 - 1);
      int v61 = *v60++;
    }
    while (v61 >= v62);
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v124);
      sub_188FC78(&v124, (uint64_t)"Encountered a PredictedPaces message where the time is not monotonously increasing.", 83);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
LABEL_77:
      if (v123 < 0) {
        operator delete(__p[0]);
      }
      if (v127 < 0) {
        operator delete(v126);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_82;
    }
    goto LABEL_82;
  }
LABEL_92:
  if (v128 != v129)
  {
    int64_t v66 = v128;
    while (*v66 > 0.0 && *v66 <= 250.0)
    {
      if (++v66 == v129) {
        goto LABEL_100;
      }
    }
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v124);
      sub_188FC78(&v124, (uint64_t)"Encountered a PredictedPaces message where at least one encoded pace results in an invalid speed.", 97);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      goto LABEL_77;
    }
LABEL_82:
    uint64_t v63 = 0;
    if (!v58) {
      goto LABEL_84;
    }
    goto LABEL_83;
  }
LABEL_100:
  if (v131 != v132)
  {
    uint64_t v68 = 0;
    while (1)
    {
      sub_357A54((uint64_t)&v124, *(_DWORD *)&v131[4 * v68], v128[v68]);
      unint64_t v71 = (_OWORD *)a4[1];
      unint64_t v70 = a4[2];
      if ((unint64_t)v71 < v70)
      {
        *unint64_t v71 = v124;
        __n128 v69 = v71 + 1;
      }
      else
      {
        unsigned __int32 v72 = (_OWORD *)*a4;
        uint64_t v73 = ((uint64_t)v71 - *a4) >> 4;
        unint64_t v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v75 = v70 - (void)v72;
        if (v75 >> 3 > v74) {
          unint64_t v74 = v75 >> 3;
        }
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v76 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v76 = v74;
        }
        if (v76)
        {
          if (v76 >> 60) {
            sub_188D718();
          }
          std::string::size_type v77 = (char *)operator new(16 * v76);
          uint64_t v78 = &v77[16 * v73];
          *(_OWORD *)uint64_t v78 = v124;
          uint64_t v79 = (uint64_t)v78;
          if (v71 != v72)
          {
            do
            {
LABEL_116:
              *(_OWORD *)(v79 - 16) = *(v71 - 1);
              v79 -= 16;
              --v71;
            }
            while (v71 != v72);
            unint64_t v71 = (_OWORD *)*a4;
            __n128 v69 = v78 + 16;
            *a4 = v79;
            a4[1] = (uint64_t)(v78 + 16);
            a4[2] = (uint64_t)&v77[16 * v76];
            if (!v71) {
              goto LABEL_103;
            }
LABEL_120:
            operator delete(v71);
            goto LABEL_103;
          }
        }
        else
        {
          std::string::size_type v77 = 0;
          uint64_t v78 = (char *)(16 * v73);
          *(_OWORD *)(16 * v73) = v124;
          uint64_t v79 = 16 * v73;
          if (v71 != v72) {
            goto LABEL_116;
          }
        }
        __n128 v69 = v78 + 16;
        *a4 = v79;
        a4[1] = (uint64_t)(v78 + 16);
        a4[2] = (uint64_t)&v77[16 * v76];
        if (v71) {
          goto LABEL_120;
        }
      }
LABEL_103:
      a4[1] = (uint64_t)v69;
      if (++v68 == v57)
      {
        size_t v56 = v131;
        int v58 = v128;
        uint64_t v63 = (v132 - v131) >> 2;
        if (!v128) {
          goto LABEL_84;
        }
LABEL_83:
        long long v129 = v58;
        operator delete(v58);
        goto LABEL_84;
      }
    }
  }
  size_t v56 = v132;
  uint64_t v63 = 0;
  if (v128) {
    goto LABEL_83;
  }
LABEL_84:
  if (v56)
  {
    uint32x4_t v132 = v56;
    operator delete(v56);
  }
  if (!v63) {
    return 0;
  }
  if (a3 != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v81 = *(char **)(v59 + 8);
    unint64_t v80 = *(void *)(v59 + 16);
    if ((unint64_t)v81 >= v80)
    {
      uint64_t v83 = *(char **)v59;
      uint64_t v84 = (uint64_t)&v81[-*(void *)v59] >> 5;
      unint64_t v85 = v84 + 1;
      if ((unint64_t)(v84 + 1) >> 59) {
        goto LABEL_171;
      }
      uint64_t v86 = v80 - (void)v83;
      if (v86 >> 4 > v85) {
        unint64_t v85 = v86 >> 4;
      }
      BOOL v87 = (unint64_t)v86 >= 0x7FFFFFFFFFFFFFE0;
      unint64_t v88 = 0x7FFFFFFFFFFFFFFLL;
      if (!v87) {
        unint64_t v88 = v85;
      }
      if (v88 >> 59) {
        goto LABEL_172;
      }
      uint64_t v89 = 32 * v88;
      uint64_t v90 = (char *)operator new(32 * v88);
      long long v91 = &v90[32 * v84];
      *(void *)long long v91 = a3;
      *((_DWORD *)v91 + 2) = a2;
      uint64_t v92 = &v90[v89];
      *((void *)v91 + 2) = v117;
      v91[24] = v63;
      unint64_t v82 = v91 + 32;
      if (v81 == v83)
      {
        *(void *)uint64_t v59 = v91;
        *(void *)(v59 + 8) = v82;
        *(void *)(v59 + 16) = v92;
        if (!v83) {
          goto LABEL_133;
        }
      }
      else
      {
        do
        {
          long long v93 = *((_OWORD *)v81 - 2);
          long long v94 = v91 - 32;
          *(_OWORD *)(v91 - 23) = *(_OWORD *)(v81 - 23);
          *((_OWORD *)v91 - 2) = v93;
          v81 -= 32;
          v91 -= 32;
        }
        while (v81 != v83);
        *(void *)uint64_t v59 = v94;
        *(void *)(v59 + 8) = v82;
        *(void *)(v59 + 16) = v92;
        if (!v83) {
          goto LABEL_133;
        }
      }
      operator delete(v83);
    }
    else
    {
      *(void *)uint64_t v81 = a3;
      *((_DWORD *)v81 + 2) = a2;
      *((void *)v81 + 2) = v117;
      unint64_t v82 = v81 + 32;
      v81[24] = v63;
    }
LABEL_133:
    *(void *)(v59 + 8) = v82;
    return 1;
  }
  unint64_t v64 = &a1[1][(void)*a1];
  *(void *)&long long v124 = *a1;
  *((void *)&v124 + 1) = v64;
  uint64_t v125 = 0x2C700000000;
  BOOL result = sub_2F333C((uint64_t)&v124);
  if (result)
  {
    while (v125 != 3)
    {
      sub_2F3548((uint64_t)&v124);
      if (!sub_2F333C((uint64_t)&v124)) {
        return 0;
      }
    }
    uint64_t v134 = sub_2F3488((char **)&v124);
    uint64_t v135 = &v134[v96];
    uint64_t v136 = 0x2C700000000;
    BOOL result = sub_30DA40((uint64_t)&v134);
    if (result)
    {
      while (v136 != 6)
      {
        sub_30DC4C((uint64_t)&v134);
        if (!sub_30DA40((uint64_t)&v134)) {
          return 0;
        }
      }
      unint64_t v97 = sub_2F3E7C(&v134, v135);
      unint64_t v98 = v97;
      long long v100 = *(char **)(v59 + 8);
      unint64_t v99 = *(void *)(v59 + 16);
      if ((unint64_t)v100 < v99)
      {
        *(void *)long long v100 = v97;
        *((_DWORD *)v100 + 2) = a2;
        *((void *)v100 + 2) = v117;
        uint64_t v101 = v100 + 32;
        v100[24] = v63;
LABEL_162:
        *(void *)(v59 + 8) = v101;
        return 1;
      }
      int v102 = *(char **)v59;
      uint64_t v103 = (uint64_t)&v100[-*(void *)v59] >> 5;
      unint64_t v104 = v103 + 1;
      if (!((unint64_t)(v103 + 1) >> 59))
      {
        uint64_t v105 = v99 - (void)v102;
        if (v105 >> 4 > v104) {
          unint64_t v104 = v105 >> 4;
        }
        BOOL v87 = (unint64_t)v105 >= 0x7FFFFFFFFFFFFFE0;
        unint64_t v106 = 0x7FFFFFFFFFFFFFFLL;
        if (!v87) {
          unint64_t v106 = v104;
        }
        if (!(v106 >> 59))
        {
          uint64_t v107 = 32 * v106;
          long long v108 = (char *)operator new(32 * v106);
          long long v109 = &v108[32 * v103];
          *(void *)long long v109 = v98;
          *((_DWORD *)v109 + 2) = a2;
          *((void *)v109 + 2) = v117;
          v109[24] = v63;
          uint64_t v101 = v109 + 32;
          if (v100 == v102)
          {
            long long v111 = &v108[32 * v103];
          }
          else
          {
            do
            {
              long long v110 = *((_OWORD *)v100 - 2);
              long long v111 = v109 - 32;
              *(_OWORD *)(v109 - 23) = *(_OWORD *)(v100 - 23);
              *((_OWORD *)v109 - 2) = v110;
              v100 -= 32;
              v109 -= 32;
            }
            while (v100 != v102);
          }
          *(void *)uint64_t v59 = v111;
          *(void *)(v59 + 8) = v101;
          *(void *)(v59 + 16) = &v108[v107];
          if (v102) {
            operator delete(v102);
          }
          goto LABEL_162;
        }
LABEL_172:
        sub_188D718();
      }
LABEL_171:
      sub_2E00();
    }
  }
  return result;
}

void sub_3177B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a21);
  long long v28 = *(void **)(v26 - 192);
  if (v28)
  {
    *(void *)(v26 - 184) = v28;
    operator delete(v28);
    uint64_t v29 = *(void **)(v26 - 168);
    if (!v29) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v29 = *(void **)(v26 - 168);
    if (!v29) {
      goto LABEL_5;
    }
  }
  *(void *)(v26 - 160) = v29;
  operator delete(v29);
  _Unwind_Resume(a1);
}

void sub_3178B0()
{
  unk_25571FF = 16641;
  word_25571E8 = 65;
  byte_2557217 = 1;
  byte_2557201 = 0;
}

uint64_t sub_3178D8(uint64_t result, uint64_t a2, uint64_t a3, double a4)
{
  *(void *)BOOL result = a2;
  *(void *)(result + 8) = a3;
  *(double *)(result + 16) = a4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

unint64_t sub_3178EC@<X0>(uint64_t a1@<X0>, float **a2@<X1>, int a3@<W2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)(a5 + 24) = 0;
  uint64_t v8 = (void *)(a5 + 24);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 32) = 0;
  *(_OWORD *)(a5 + 40) = xmmword_20E20F0;
  *(_WORD *)(a5 + 56) = 0;
  *(_DWORD *)(a5 + 60) = 0;
  *(unsigned char *)(a5 + 64) = 0;
  *(_DWORD *)(a5 + 16) = a3;
  double v9 = *(double *)(a1 + 16);
  uint64_t v10 = (char *)a2[1] + (void)*a2;
  unint64_t v76 = *a2;
  std::string::size_type v77 = v10;
  uint64_t v78 = 0x2C700000000;
  unint64_t result = sub_2F333C((uint64_t)&v76);
  if ((result & 1) == 0) {
    return result;
  }
  unsigned __int32 v72 = a4;
  int v12 = 0;
  uint64_t v13 = 0;
  double v14 = -1.0;
  while (2)
  {
    switch((int)v78)
    {
      case 1:
        int v12 = sub_2F3488((char **)&v76);
        uint64_t v13 = v15;
        goto LABEL_4;
      case 2:
        float v19 = *v76++;
        if (v76 > (float *)v77)
        {
          exception = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v81, "Skipping over bytes exceeded message length.");
          int64_t v67 = (void *)sub_2F404((uint64_t)exception, &v81);
        }
        if (v19 > 0.0 && v19 <= 250.0)
        {
          double v25 = roundf(v19 * 100.0) / 100.0;
          if (v25 <= v9) {
            double v14 = v9;
          }
          else {
            double v14 = v25;
          }
LABEL_38:
          *(double *)(a5 + 40) = v14;
          goto LABEL_4;
        }
        double v14 = -1.0;
        if (!sub_723EC(3u)) {
          goto LABEL_38;
        }
        sub_6BAC((uint64_t)&v81);
        sub_188FC78(&v81, (uint64_t)"Encountered invalid speed ", 26);
        unint64_t v21 = (void *)std::ostream::operator<<();
        sub_188FC78(v21, (uint64_t)".", 1);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 3u);
        if (v80 < 0) {
          operator delete(__p[0]);
        }
        *(void *)&long long v81 = v73;
        *(void *)((char *)&v81 + *(void *)(v73 - 24)) = v74;
        if (v84 < 0) {
          operator delete(v83);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        *(double *)(a5 + 40) = -1.0;
LABEL_4:
        unint64_t result = sub_2F333C((uint64_t)&v76);
        if (result) {
          continue;
        }
        v75[0] = v12;
        v75[1] = v13;
        if (v12)
        {
          BOOL v26 = (*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
          BOOL v27 = v14 < 0.0 && ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
          if (v14 >= 0.0) {
            BOOL v26 = 0;
          }
          int v28 = (*(void *)&v14 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v26;
          if ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000) {
            int v28 = 1;
          }
          if (((v28 | v27) & 1) == 0)
          {
            unint64_t v76 = (float *)v12;
            std::string::size_type v77 = &v12[v13];
            uint64_t v78 = 0x2C700000000;
            unint64_t result = sub_2F333C((uint64_t)&v76);
            if (result)
            {
              LODWORD(v29) = 0;
              BOOL v30 = 0;
              uint64_t v31 = 1;
              int64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
              uint64_t v33 = a1;
              while (1)
              {
                switch((int)v78)
                {
                  case 3:
                    float v34 = *v76++;
                    if (v76 > (float *)v77)
                    {
                      unint64_t v70 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(&v81, "Skipping over bytes exceeded message length.");
                      unint64_t v71 = (void *)sub_2F404((uint64_t)v70, &v81);
                    }
                    if (v34 < 0.0)
                    {
                      if (sub_723EC(1u))
                      {
                        sub_6BAC((uint64_t)&v81);
                        sub_188FC78(&v81, (uint64_t)"Encountered invalid start offset ", 33);
                        uint64_t v35 = (void *)std::ostream::operator<<();
                        sub_188FC78(v35, (uint64_t)".", 1);
                        std::stringbuf::str();
                        sub_7246C((uint64_t *)__p, 1u);
                        if (v80 < 0) {
                          operator delete(__p[0]);
                        }
                        *(void *)&long long v81 = v73;
                        *(void *)((char *)&v81 + *(void *)(v73 - 24)) = v74;
                        if (v84 < 0) {
                          operator delete(v83);
                        }
                        goto LABEL_75;
                      }
                      goto LABEL_57;
                    }
                    double v38 = v34 * 100.0;
                    if (v38 >= 0.0)
                    {
                      double v39 = v34 * 100.0;
                      if (v38 < 4.50359963e15)
                      {
                        uint64_t v40 = (uint64_t)(v38 + v38) + 1;
LABEL_99:
                        double v39 = (double)(v40 >> 1);
                      }
                    }
                    else
                    {
                      double v39 = v34 * 100.0;
                      if (v38 > -4.50359963e15)
                      {
                        uint64_t v40 = (uint64_t)(v38 + v38);
                        if (v40 >= 1) {
                          --v40;
                        }
                        goto LABEL_99;
                      }
                    }
                    if (v39 < 9.22337204e18)
                    {
                      if (v38 >= 0.0)
                      {
                        if (v38 < 4.50359963e15)
                        {
                          uint64_t v51 = (uint64_t)(v38 + v38) + 1;
                          goto LABEL_120;
                        }
                      }
                      else if (v38 > -4.50359963e15)
                      {
                        uint64_t v51 = (uint64_t)(v38 + v38);
                        if (v51 >= 1) {
                          --v51;
                        }
LABEL_120:
                        double v38 = (double)(v51 >> 1);
                      }
                      *uint64_t v8 = (uint64_t)v38;
                      goto LABEL_57;
                    }
                    *uint64_t v8 = 0x7FFFFFFFFFFFFFFELL;
LABEL_57:
                    unint64_t result = sub_2F333C((uint64_t)&v76);
                    if ((result & 1) == 0) {
                      goto LABEL_129;
                    }
                    break;
                  case 4:
                    float v36 = *v76++;
                    if (v76 > (float *)v77)
                    {
                      uint64_t v68 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(&v81, "Skipping over bytes exceeded message length.");
                      __n128 v69 = (void *)sub_2F404((uint64_t)v68, &v81);
                    }
                    if (v36 < 0.0)
                    {
                      if (sub_723EC(1u))
                      {
                        sub_6BAC((uint64_t)&v81);
                        sub_188FC78(&v81, (uint64_t)"Encountered invalid end offset ", 31);
                        uint64_t v37 = (void *)std::ostream::operator<<();
                        sub_188FC78(v37, (uint64_t)".", 1);
                        std::stringbuf::str();
                        sub_7246C((uint64_t *)__p, 1u);
                        if (v80 < 0) {
                          operator delete(__p[0]);
                        }
                        *(void *)&long long v81 = v73;
                        *(void *)((char *)&v81 + *(void *)(v73 - 24)) = v74;
                        if (v84 < 0) {
                          operator delete(v83);
                        }
LABEL_75:
                        std::streambuf::~streambuf();
                        std::ostream::~ostream();
                        std::ios::~ios();
                      }
                      goto LABEL_57;
                    }
                    double v41 = v36 * 100.0;
                    if (v41 >= 0.0)
                    {
                      double v42 = v36 * 100.0;
                      if (v41 < 4.50359963e15)
                      {
                        uint64_t v43 = (uint64_t)(v41 + v41) + 1;
                        goto LABEL_109;
                      }
                    }
                    else
                    {
                      double v42 = v36 * 100.0;
                      if (v41 > -4.50359963e15)
                      {
                        uint64_t v43 = (uint64_t)(v41 + v41);
                        if (v43 >= 1) {
                          --v43;
                        }
LABEL_109:
                        double v42 = (double)(v43 >> 1);
                      }
                    }
                    if (v42 < 9.22337204e18)
                    {
                      if (v41 >= 0.0)
                      {
                        if (v41 < 4.50359963e15)
                        {
                          uint64_t v52 = (uint64_t)(v41 + v41) + 1;
                          goto LABEL_124;
                        }
                      }
                      else if (v41 > -4.50359963e15)
                      {
                        uint64_t v52 = (uint64_t)(v41 + v41);
                        if (v52 >= 1) {
                          --v52;
                        }
LABEL_124:
                        double v41 = (double)(v52 >> 1);
                      }
                      *(void *)(a5 + 32) = (uint64_t)v41;
                      goto LABEL_57;
                    }
                    *(void *)(a5 + 32) = 0x7FFFFFFFFFFFFFFELL;
                    goto LABEL_57;
                  case 6:
                    int64_t v32 = sub_2F3E7C((char **)&v76, v77);
                    goto LABEL_57;
                  case 7:
                    BOOL v30 = *(unsigned char *)v76 != 0;
                    sub_2F3C98((uint64_t *)&v76, (uint64_t)v77);
                    goto LABEL_57;
                  case 8:
                    if (v29) {
                      goto LABEL_56;
                    }
                    uint64_t v44 = v31;
                    int64_t v45 = sub_2F3E7C((char **)&v76, v77);
                    if (!v45)
                    {
                      LODWORD(v29) = 0;
LABEL_127:
                      uint64_t v31 = v44;
                      goto LABEL_57;
                    }
                    int64_t v46 = v45;
                    if (v45 != 0x7FFFFFFFFFFFFFFFLL)
                    {
                      uint64_t v47 = v45 >= 0 ? v45 : -v45;
                      unint64_t v48 = sub_2ABB48(**(void **)(a1 + 8), 22, v47);
                      unint64_t v29 = HIDWORD(v48);
                      if (HIDWORD(v48) && v49 == 0)
                      {
                        *((void *)&v53 + 1) = v48 & 0x3FFFFFFF | ((v46 > 0) << 30);
                        *(void *)&long long v53 = v48;
                        *(void *)(a5 + 8) = v53 >> 32;
                        goto LABEL_127;
                      }
                    }
                    LODWORD(v29) = 0;
                    uint64_t v31 = 0;
                    goto LABEL_57;
                  default:
LABEL_56:
                    sub_2F3548((uint64_t)&v76);
                    goto LABEL_57;
                }
              }
            }
            BOOL v30 = 0;
            LODWORD(v31) = 1;
            int64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v33 = a1;
LABEL_129:
            ++v72[2];
            v72[4] += v30;
            if (v32 == 0x7FFFFFFFFFFFFFFFLL
              || (v32 >= 0 ? (uint64_t v54 = v32) : (uint64_t v54 = -v32),
                  (unint64_t result = sub_2ABB48(**(void **)(v33 + 8), 22, v54), HIDWORD(result))
                ? (BOOL v56 = v55 == 0)
                : (BOOL v56 = 0),
                  !v56))
            {
              int v57 = 0;
              *(void *)a5 = 0;
              goto LABEL_138;
            }
            *((void *)&v61 + 1) = result & 0x3FFFFFFF | ((v32 > 0) << 30);
            *(void *)&long long v61 = result;
            unint64_t v60 = v61 >> 32;
            *(void *)a5 = v60;
            if (v31)
            {
              if (!v30 || (unint64_t result = sub_318844((void *)v33, v75, v60, (uint64_t)v72), (result & 1) != 0))
              {
                ++v72[3];
                v72[5] += v30;
                return result;
              }
            }
            else
            {
              int v57 = 1;
LABEL_138:
              if (v32 == 0x7FFFFFFFFFFFFFFFLL) {
                int v57 = 1;
              }
              int v58 = v72[7] + (v57 & v31 ^ 1);
              if (v32 == 0x7FFFFFFFFFFFFFFFLL) {
                int v59 = v72[8] + 1;
              }
              else {
                int v59 = v72[8];
              }
              v72[7] = v58;
              v72[8] = v59;
            }
            *(void *)a5 = 0;
          }
        }
        return result;
      case 8:
        float v16 = *v76++;
        if (v76 > (float *)v77)
        {
          unint64_t v64 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v81, "Skipping over bytes exceeded message length.");
          int v65 = (void *)sub_2F404((uint64_t)v64, &v81);
        }
        *(float *)(a5 + 60) = v16;
        BOOL v17 = v16 >= 0.0 && v16 <= 2.0;
        if (!v17 && sub_723EC(1u))
        {
          sub_6BAC((uint64_t)&v81);
          sub_188FC78(&v81, (uint64_t)"Encountered load_factor ", 24);
          unint64_t v18 = (void *)std::ostream::operator<<();
          sub_188FC78(v18, (uint64_t)" out of the expected range [0.0, 2.0].", 38);
          std::stringbuf::str();
          sub_7246C((uint64_t *)__p, 1u);
          if (v80 < 0) {
            operator delete(__p[0]);
          }
          *(void *)&long long v81 = v73;
          *(void *)((char *)&v81 + *(void *)(v73 - 24)) = v74;
          if (v84 < 0) {
            operator delete(v83);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        goto LABEL_4;
      case 10:
        *(void *)&long long v81 = sub_2F3488((char **)&v76);
        *((void *)&v81 + 1) = v81 + v22;
        uint64_t v82 = 0x2C700000000;
        int v23 = sub_30DA40((uint64_t)&v81);
        if (v23)
        {
          while (v82 != 1)
          {
            sub_30DC4C((uint64_t)&v81);
            if (!sub_30DA40((uint64_t)&v81))
            {
              *(_WORD *)(a5 + 56) = 0;
              goto LABEL_4;
            }
          }
          LOWORD(v23) = sub_2F36C8((char **)&v81, *((char **)&v81 + 1));
        }
        *(_WORD *)(a5 + 56) = v23;
        goto LABEL_4;
      case 11:
        float v24 = *v76++;
        if (v76 > (float *)v77)
        {
          int v62 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v81, "Skipping over bytes exceeded message length.");
          uint64_t v63 = (void *)sub_2F404((uint64_t)v62, &v81);
        }
        *(double *)(a5 + 48) = v24 * 60.0;
        goto LABEL_4;
      default:
        sub_2F3548((uint64_t)&v76);
        goto LABEL_4;
    }
  }
}

void sub_31862C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,void (__cdecl **a27)(std::stringbuf *__hidden this),int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  a26 = a13;
  *(void **)((char *)&a26 + *((void *)a13 - 3)) = a14;
  if (a43 < 0) {
    operator delete(a38);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

void sub_318748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a25 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a26);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_318784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_3187A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_3187D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_111ECAC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_318844(void *a1, void *a2, unint64_t a3, uint64_t a4)
{
  sub_725D0((uint64_t)v40);
  uint64_t v8 = *a2 + a2[1];
  *(void *)&long long v38 = *a2;
  *((void *)&v38 + 1) = v8;
  uint64_t v39 = 0x2C700000000;
  long long __p = 0;
  float v36 = 0;
  uint64_t v37 = 0;
  unint64_t v9 = sub_2F4CE4(&v38, 2);
  unint64_t v10 = v9;
  if (v9)
  {
    if (v9 >> 61) {
      sub_2E00();
    }
    long long __p = operator new(8 * v9);
    float v36 = __p;
    uint64_t v37 = (char *)__p + 8 * v10;
  }
  while (sub_2F333C((uint64_t)&v38))
  {
    while (v39 != 2)
    {
      switch(HIDWORD(v39))
      {
        case 0:
          sub_2F3C98((uint64_t *)&v38, *((uint64_t *)&v38 + 1));
          break;
        case 1:
          *(void *)&long long v38 = v38 + 8;
          if ((unint64_t)v38 > *((void *)&v38 + 1))
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v41, "Skipping over bytes exceeded message length.");
            float v34 = (void *)sub_2F404((uint64_t)exception, &v41);
          }
          return result;
        case 2:
          unsigned int v11 = sub_2F36C8((char **)&v38, *((char **)&v38 + 1));
          sub_2F3DCC((unint64_t *)&v38, v11);
          break;
        case 5:
          *(void *)&long long v38 = v38 + 4;
          if ((unint64_t)v38 > *((void *)&v38 + 1))
          {
            uint64_t v31 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v41, "Skipping over bytes exceeded message length.");
            int64_t v32 = (void *)sub_2F404((uint64_t)v31, &v41);
          }
          return result;
        default:
          unint64_t v29 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v41, "Unknown wire type.");
          BOOL v30 = (void *)sub_2F404((uint64_t)v29, &v41);
      }
      if (!sub_2F333C((uint64_t)&v38)) {
        goto LABEL_15;
      }
    }
    *(void *)&long long v41 = sub_2F3E7C((char **)&v38, *((char **)&v38 + 1));
    sub_A4710((uint64_t)&__p, &v41);
  }
LABEL_15:
  sub_318C48(a1[1], a3, a1 + 3);
  unint64_t v12 = a1[4] - a1[3];
  if (v12 == v36 - (unsigned char *)__p)
  {
    if ((int)(v12 >> 3) < 1)
    {
LABEL_33:
      double v22 = sub_72688((uint64_t)v40);
      LODWORD(v23) = *(_DWORD *)(a4 + 40);
      *(_DWORD *)(a4 + 40) = (v22 + (double)v23);
      uint64_t v24 = 1;
      double v25 = __p;
      if (!__p) {
        return v24;
      }
      goto LABEL_36;
    }
    uint64_t v13 = 0;
    uint64_t v14 = v12 & 0x7FFFFFFF8;
    while (1)
    {
      uint64_t v15 = *(void *)((char *)__p + v13);
      uint64_t v16 = *(void *)(a1[3] + v13);
      BOOL v17 = (int *)sub_2D5D58(*a1, v16 & 0xFFFFFFFFFFFFLL);
      unint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
      if (*v18 < 0x1Du)
      {
        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v19 = v18[14];
        if (v19) {
          uint64_t v19 = *(void *)((char *)v17 + v19);
        }
      }
      if ((v16 & 0xFF000000000000) != 0) {
        uint64_t v19 = -v19;
      }
      BOOL v20 = v15 == 0x7FFFFFFFFFFFFFFFLL || v19 == 0x7FFFFFFFFFFFFFFFLL;
      if (v20 || v15 != v19) {
        break;
      }
      v13 += 8;
      if (v14 == v13) {
        goto LABEL_33;
      }
    }
  }
  double v26 = sub_72688((uint64_t)v40);
  uint64_t v24 = 0;
  LODWORD(v27) = *(_DWORD *)(a4 + 40);
  *(_DWORD *)(a4 + 40) = (v26 + (double)v27);
  ++*(_DWORD *)(a4 + 24);
  double v25 = __p;
  if (__p)
  {
LABEL_36:
    float v36 = v25;
    operator delete(v25);
  }
  return v24;
}

void sub_318BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_318C48(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v4 = HIDWORD(a2);
  a3[1] = *a3;
  if ((a2 & 0x8000000000000000) != 0)
  {
    *(void *)BOOL v50 = a2 & 0x3FFFFFFFFFFFFFFFLL;
    BOOL v49 = (a2 & 0x4000000000000000) == 0;
    sub_318EEC((uint64_t)a3, (int *)&v50[4], v50, (char *)&v49);
    return;
  }
  int v6 = sub_2E5E08(a1 + 16, a2, 1);
  if (v6)
  {
    int64_t v7 = &v6[-*(int *)v6];
    if (*(unsigned __int16 *)v7 >= 5u)
    {
      uint64_t v8 = *((unsigned __int16 *)v7 + 2);
      if (v8)
      {
        unint64_t v9 = (unsigned int *)&v6[v8 + *(unsigned int *)&v6[v8]];
        if (*v9 > (v4 & 0x3FFFFFFF))
        {
          unint64_t v10 = (int *)((char *)v9
                      + (4 * v4)
                      + *(unsigned int *)((char *)v9 + (4 * v4) + 4)
                      + 4);
          uint64_t v11 = *v10;
          unint64_t v12 = (unsigned __int16 *)((char *)v10 - v11);
          unsigned int v13 = *(unsigned __int16 *)((char *)v10 - v11);
          if (v13 >= 0xB)
          {
            if (!v12[5] || (int v14 = *(unsigned __int8 *)(a1 + 3889), v14 == 254))
            {
LABEL_16:
              uint64_t v19 = v12[2];
              if (v12[2])
              {
                if ((v4 & 0x40000000) != 0 || v13 < 0xD || (uint64_t v20 = v12[6]) == 0 || (*((unsigned char *)v10 + v20) & 1) == 0)
                {
                  uint64_t v21 = -v11;
                  unint64_t v22 = *(unsigned int *)((char *)v10 + v19 + *(unsigned int *)((char *)v10 + v19));
                  unint64_t v23 = (void *)*a3;
                  if (v22 > (uint64_t)(a3[2] - *a3) >> 3)
                  {
                    unint64_t v24 = a3[1];
                    uint64_t v25 = 8 * v22;
                    double v26 = (char *)operator new(8 * v22);
                    unint64_t v27 = &v26[v24 - (void)v23];
                    int v28 = v27;
                    if ((void *)v24 != v23)
                    {
                      int v28 = &v26[v24 - (void)v23];
                      do
                      {
                        int v29 = *(_DWORD *)(v24 - 8);
                        v24 -= 8;
                        int v30 = *(_DWORD *)(v24 + 3);
                        *((_DWORD *)v28 - 2) = v29;
                        v28 -= 8;
                        *(_DWORD *)(v28 + 3) = v30;
                      }
                      while ((void *)v24 != v23);
                    }
                    *a3 = (unint64_t)v28;
                    a3[1] = (unint64_t)v27;
                    a3[2] = (unint64_t)&v26[v25];
                    if (v23)
                    {
                      operator delete(v23);
                      uint64_t v21 = -(uint64_t)*v10;
                    }
                  }
                  uint64_t v31 = (unsigned int *)((char *)v10 + *(unsigned __int16 *)((char *)v10 + v21 + 4));
                  uint64_t v32 = *v31;
                  float v34 = (uint64_t *)((char *)v31 + v32 + 4);
                  uint64_t v33 = *(unsigned int *)((char *)v31 + v32);
                  if (v33)
                  {
                    uint64_t v35 = 8 * v33;
                    float v36 = (char *)a3[1];
                    do
                    {
                      uint64_t v38 = *v34++;
                      uint64_t v37 = v38;
                      BOOL v39 = (v38 & 0xFF000000000000) != 0;
                      BOOL v40 = (v38 & 0xFF000000000000) == 0;
                      if ((v4 & 0x40000000) != 0) {
                        BOOL v39 = v40;
                      }
                      if (v39) {
                        uint64_t v41 = 0x1000000000000;
                      }
                      else {
                        uint64_t v41 = 0;
                      }
                      *(void *)&v50[4] = v41 & 0xFFFF000000000000 | v37 & 0xFFFFFFFFFFFFLL;
                      float v36 = sub_2D6254(a3, v36, (int *)&v50[4]) + 8;
                      v35 -= 8;
                    }
                    while (v35);
                  }
                  if ((v4 & 0x40000000) == 0)
                  {
                    unint64_t v43 = *a3;
                    unint64_t v42 = a3[1];
                    if (*a3 != v42)
                    {
                      unint64_t v44 = v42 - 8;
                      if (v44 > v43)
                      {
                        unint64_t v45 = v43 + 8;
                        do
                        {
                          uint64_t v46 = *(void *)(v45 - 8);
                          int v47 = *(_DWORD *)v44;
                          *(_DWORD *)(v45 - 5) = *(_DWORD *)(v44 + 3);
                          *(_DWORD *)(v45 - 8) = v47;
                          *(_DWORD *)unint64_t v44 = v46;
                          *(unsigned char *)(v44 + 6) = BYTE6(v46);
                          *(_WORD *)(v44 + 4) = WORD2(v46);
                          v44 -= 8;
                          BOOL v48 = v45 >= v44;
                          v45 += 8;
                        }
                        while (!v48);
                      }
                    }
                  }
                }
              }
              return;
            }
            uint64_t v15 = (int *)((char *)v10 + v12[5] + *(unsigned int *)((char *)v10 + v12[5]));
            unsigned int v18 = *v15;
            uint64_t v16 = (unsigned __int8 *)(v15 + 1);
            uint64_t v17 = v18;
            if (!v18) {
              return;
            }
            while (v14 != *v16)
            {
              ++v16;
              if (!--v17) {
                return;
              }
            }
          }
          if (v13 < 5) {
            return;
          }
          goto LABEL_16;
        }
      }
    }
  }
}

char *sub_318EEC(uint64_t a1, int *a2, _DWORD *a3, char *a4)
{
  unint64_t v9 = *(_DWORD **)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if ((unint64_t)v9 >= v8)
  {
    unsigned int v13 = *(_DWORD **)a1;
    uint64_t v14 = ((uint64_t)v9 - *(void *)a1) >> 3;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v16 = v8 - (void)v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    BOOL v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v17) {
      unint64_t v18 = v15;
    }
    if (v18 >> 61) {
      sub_188D718();
    }
    uint64_t v19 = 8 * v18;
    uint64_t v20 = (char *)operator new(8 * v18);
    uint64_t v21 = &v20[8 * v14];
    int v22 = *a2;
    char v23 = *a4;
    *(_DWORD *)uint64_t v21 = *a3;
    *((_WORD *)v21 + 2) = v22;
    v21[6] = v23;
    for (uint64_t i = v21 + 8; v9 != v13; *(_DWORD *)(v21 + 3) = v25)
    {
      int v24 = *(v9 - 2);
      v9 -= 2;
      int v25 = *(_DWORD *)((char *)v9 + 3);
      *((_DWORD *)v21 - 2) = v24;
      v21 -= 8;
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = i;
    *(void *)(a1 + 16) = &v20[v19];
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    int v10 = *a2;
    char v11 = *a4;
    *unint64_t v9 = *a3;
    *((_WORD *)v9 + 2) = v10;
    *((unsigned char *)v9 + 6) = v11;
    uint64_t i = (char *)(v9 + 2);
  }
  *(void *)(a1 + 8) = i;
  return i - 8;
}

void sub_319014()
{
  unk_255722F = 16641;
  word_2557218 = 65;
  byte_2557247 = 1;
  byte_2557231 = 0;
}

uint64_t sub_31903C(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    uint64_t v2 = *(void ***)(a1 + 24);
    if (!v2) {
      goto LABEL_5;
    }
    while (1)
    {
LABEL_9:
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_13:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_13;
      }
      operator delete(v2);
      uint64_t v2 = v5;
      if (!v5) {
        goto LABEL_5;
      }
    }
  }
  uint64_t v2 = *(void ***)(a1 + 24);
  if (v2) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t **sub_3190E0(uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_504E0(v2);
    operator delete();
  }
  return a1;
}

void sub_319128(uint64_t a1, const void **a2, uint64_t a3, _DWORD *a4)
{
  if (*(char *)(a1 + 23) < 0)
  {
    **(unsigned char **)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 23) = 0;
  }
  if (sub_34508(a4))
  {
    *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
    v37.__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    sub_3610C(a4, &v37, v7);
  }
  int v8 = *((char *)a2 + 23);
  if (v8 >= 0) {
    size_t v9 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v9 = (size_t)a2[1];
  }
  int v10 = SHIBYTE(xmmword_2557268);
  if (xmmword_2557268 >= 0) {
    size_t v11 = HIBYTE(xmmword_2557268);
  }
  else {
    size_t v11 = xmmword_2557268;
  }
  unint64_t v12 = v11 + v9;
  if (v11 + v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v12 > 0x16)
  {
    uint64_t v24 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v24 = v12 | 7;
    }
    uint64_t v25 = v24 + 1;
    p_dst = (std::string *)operator new(v24 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + v9;
    __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    if (!v9)
    {
LABEL_20:
      if (v11)
      {
        if (v10 >= 0) {
          unint64_t v15 = &qword_2557260;
        }
        else {
          unint64_t v15 = (uint64_t *)qword_2557260;
        }
        memmove((char *)p_dst + v9, v15, v11);
      }
      p_dst->__r_.__value_.__s.__data_[v9 + v11] = 0;
      uint64_t v16 = std::string::append(&__dst, "/");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      int v18 = *(char *)(a3 + 23);
      if (v18 >= 0) {
        uint64_t v19 = (const std::string::value_type *)a3;
      }
      else {
        uint64_t v19 = *(const std::string::value_type **)a3;
      }
      if (v18 >= 0) {
        std::string::size_type v20 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v20 = *(void *)(a3 + 8);
      }
      uint64_t v21 = std::string::append(&v32, v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v37.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        std::operator+<char>();
        LODWORD(size) = v34;
      }
      else
      {
        unsigned __int8 v34 = 0;
        LOBYTE(v33[0]) = 0;
      }
      if ((size & 0x80u) == 0) {
        double v26 = (const std::string::value_type *)v33;
      }
      else {
        double v26 = (const std::string::value_type *)v33[0];
      }
      if ((size & 0x80u) == 0) {
        std::string::size_type v27 = size;
      }
      else {
        std::string::size_type v27 = (std::string::size_type)v33[1];
      }
      int v28 = std::string::append(__p, v26, v27);
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      std::string::size_type v36 = v28->__r_.__value_.__r.__words[2];
      long long v35 = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if ((char)v34 < 0)
      {
        operator delete(v33[0]);
        if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_48:
          if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_49;
          }
          goto LABEL_53;
        }
      }
      else if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_48;
      }
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_49:
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_50;
        }
LABEL_54:
        operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_50:
        sub_50350();
      }
LABEL_53:
      operator delete(v32.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_50;
      }
      goto LABEL_54;
    }
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v11 + v9;
    if (!v9) {
      goto LABEL_20;
    }
  }
  if (v8 >= 0) {
    uint64_t v14 = a2;
  }
  else {
    uint64_t v14 = *a2;
  }
  memmove(p_dst, v14, v9);
  goto LABEL_20;
}

void sub_3197C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a9);
  sub_31903C(v52 - 256);
  sub_3190E0((uint64_t **)(v52 - 176));
  if (*(char *)(v52 - 121) < 0) {
    operator delete(*(void **)(v52 - 144));
  }
  if (*(char *)(v52 - 89) < 0) {
    operator delete(*(void **)(v52 - 112));
  }
  __cxa_begin_catch(a1);
  if (*(char *)(v51 + 23) < 0)
  {
    **(unsigned char **)uint64_t v51 = 0;
    *(void *)(v51 + 8) = 0;
  }
  else
  {
    *(unsigned char *)uint64_t v51 = 0;
    *(unsigned char *)(v51 + 23) = 0;
  }
  __cxa_end_catch();
  JUMPOUT(0x319794);
}

uint64_t sub_319944(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    int v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  int v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  size_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    size_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_319A84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_319AA0(uint64_t a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    int v8 = operator new(v9 + 1);
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v10 | 0x8000000000000000;
    *(void *)a1 = v8;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 23) = v6;
  int v8 = (void *)a1;
  if (v6) {
LABEL_8:
  }
    memmove(v8, __s, v7);
  *((unsigned char *)v8 + v7) = 0;
  size_t v11 = (void *)(a1 + 24);
  size_t v12 = strlen(a3);
  if (v12 > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  size_t v13 = v12;
  if (v12 >= 0x17)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    size_t v11 = operator new(v14 + 1);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v15 | 0x8000000000000000;
    *(void *)(a1 + 24) = v11;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v12;
    if (!v12) {
      goto LABEL_17;
    }
  }
  memmove(v11, a3, v13);
LABEL_17:
  *((unsigned char *)v11 + v13) = 0;
  return a1;
}

void sub_319BE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_319BFC(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0)
  {
    operator delete(*(void **)(a1 + 136));
    uint64_t v2 = *(void ***)(a1 + 112);
    if (!v2) {
      goto LABEL_5;
    }
    while (1)
    {
LABEL_14:
      size_t v7 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0) {
LABEL_18:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_18;
      }
      operator delete(v2);
      uint64_t v2 = v7;
      if (!v7) {
        goto LABEL_5;
      }
    }
  }
  uint64_t v2 = *(void ***)(a1 + 112);
  if (v2) {
    goto LABEL_14;
  }
LABEL_5:
  uint64_t v3 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v3) {
    operator delete(v3);
  }
  unint64_t v4 = *(void ***)(a1 + 72);
  if (v4)
  {
    do
    {
      int v8 = (void **)*v4;
      if (*((char *)v4 + 63) < 0)
      {
        operator delete(v4[5]);
        if (*((char *)v4 + 39) < 0) {
LABEL_24:
        }
          operator delete(v4[2]);
      }
      else if (*((char *)v4 + 39) < 0)
      {
        goto LABEL_24;
      }
      operator delete(v4);
      unint64_t v4 = v8;
    }
    while (v8);
  }
  uint64_t v5 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v5) {
    operator delete(v5);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_319D38(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 4)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    size_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 4);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    size_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 16 * a2;
}

void sub_319E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_319F48(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return (int)*((double *)v2 + 5);
}

void sub_319FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_31A008(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 112);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 176));
  std::mutex::~mutex(v2);
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(a1 + 24);
    if (v4 != v3)
    {
      do
      {
        long long v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        v4 -= 16;
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v3;
    operator delete(v5);
  }
  long long v7 = *(std::thread **)a1;
  if (*(void *)a1)
  {
    int v8 = *(std::thread **)(a1 + 8);
    long long v9 = *(std::thread **)a1;
    if (v8 != v7)
    {
      do
        std::thread::~thread(v8 - 1);
      while (v8 != v7);
      long long v9 = *(std::thread **)a1;
    }
    *(void *)(a1 + 8) = v7;
    operator delete(v9);
  }
  return a1;
}

char *sub_31A110(char **a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v5 = a1[2] - *a1;
  if (v5 >> 3 > v4) {
    unint64_t v4 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 60) {
    sub_188D718();
  }
  uint64_t v9 = 16 * v7;
  uint64_t v10 = (char *)operator new(16 * v7);
  size_t v11 = &v10[16 * v3];
  *(_OWORD *)size_t v11 = *(_OWORD *)a2;
  size_t v12 = v11 + 16;
  long long v13 = &v10[v9];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v14 = *a1;
  std::string v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    if (!v15) {
      return v12;
    }
    goto LABEL_17;
  }
  do
  {
    long long v16 = *((_OWORD *)v15 - 1);
    v15 -= 16;
    *((_OWORD *)v11 - 1) = v16;
    v11 -= 16;
    *(void *)std::string v15 = 0;
    *((void *)v15 + 1) = 0;
  }
  while (v15 != v14);
  std::string v17 = *a1;
  std::string v15 = a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v13;
  if (v15 != v17)
  {
    do
    {
      std::string v18 = (std::__shared_weak_count *)*((void *)v15 - 1);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      v15 -= 16;
    }
    while (v15 != v17);
    std::string v15 = v17;
  }
  if (v15) {
LABEL_17:
  }
    operator delete(v15);
  return v12;
}

void sub_31A26C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_24389C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_31A28C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24389C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_31A2E8(char **a1, unint64_t a2, void *a3)
{
  BOOL v6 = a1[1];
  unint64_t v7 = a1[2];
  if (a2 <= (v7 - v6) >> 4)
  {
    if (a2)
    {
      long long v13 = &v6[16 * a2];
      do
      {
        uint64_t v14 = a3[1];
        *(void *)BOOL v6 = *a3;
        *((void *)v6 + 1) = v14;
        if (v14) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
        }
        v6 += 16;
      }
      while (v6 != v13);
      BOOL v6 = v13;
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v8 = (v6 - *a1) >> 4;
    unint64_t v9 = v8 + a2;
    if ((v8 + a2) >> 60) {
      sub_2E00();
    }
    uint64_t v10 = v7 - *a1;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        sub_188D718();
      }
      size_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      size_t v12 = 0;
    }
    std::string v15 = &v12[16 * v8];
    long long v16 = &v12[16 * v11];
    std::string v17 = &v15[16 * a2];
    std::string v18 = v15;
    do
    {
      uint64_t v19 = a3[1];
      *(void *)std::string v18 = *a3;
      *((void *)v18 + 1) = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      v18 += 16;
    }
    while (v18 != v17);
    std::string::size_type v20 = *a1;
    uint64_t v21 = a1[1];
    if (v21 == *a1)
    {
      *a1 = v15;
      a1[1] = v17;
      a1[2] = v16;
      if (!v21) {
        return;
      }
      goto LABEL_33;
    }
    do
    {
      long long v22 = *((_OWORD *)v21 - 1);
      v21 -= 16;
      *((_OWORD *)v15 - 1) = v22;
      v15 -= 16;
      *(void *)uint64_t v21 = 0;
      *((void *)v21 + 1) = 0;
    }
    while (v21 != v20);
    char v23 = *a1;
    uint64_t v21 = a1[1];
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v21 != v23)
    {
      do
      {
        uint64_t v24 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
        v21 -= 16;
      }
      while (v21 != v23);
      uint64_t v21 = v23;
    }
    if (v21)
    {
LABEL_33:
      operator delete(v21);
    }
  }
}

uint64_t *sub_31A4E8(void *a1, uint64_t a2)
{
  unint64_t v4 = (unsigned __int8 **)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    unint64_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    unint64_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = sub_B128((uint64_t)&v16, v7, v8);
  *(void *)(a2 + 8) = v9;
  uint64_t result = sub_31A634((uint64_t)a1, v9, v4);
  if (!result)
  {
    int8x8_t v11 = (int8x8_t)a1[1];
    unint64_t v12 = *(void *)(a2 + 8);
    uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v11) {
        v12 %= *(void *)&v11;
      }
    }
    else
    {
      v12 &= *(void *)&v11 - 1;
    }
    uint64_t v14 = *(void **)(*a1 + 8 * v12);
    if (v14)
    {
      *(void *)a2 = *v14;
    }
    else
    {
      *(void *)a2 = a1[2];
      a1[2] = a2;
      *(void *)(*a1 + 8 * v12) = a1 + 2;
      if (!*(void *)a2)
      {
LABEL_21:
        ++a1[3];
        return (uint64_t *)a2;
      }
      unint64_t v15 = *(void *)(*(void *)a2 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v15 >= *(void *)&v11) {
          v15 %= *(void *)&v11;
        }
      }
      else
      {
        v15 &= *(void *)&v11 - 1;
      }
      uint64_t v14 = (void *)(*a1 + 8 * v15);
    }
    void *v14 = a2;
    goto LABEL_21;
  }
  return result;
}

uint64_t *sub_31A634(uint64_t a1, unint64_t a2, unsigned __int8 **a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_50;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 <= a2) {
      unint64_t v7 = a2 % v4;
    }
    else {
      unint64_t v7 = a2;
    }
    unint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v7);
    if (!v8) {
      goto LABEL_50;
    }
  }
  else
  {
    unint64_t v7 = (v4 - 1) & a2;
    unint64_t v8 = *(uint64_t ***)(*(void *)a1 + 8 * v7);
    if (!v8) {
      goto LABEL_50;
    }
  }
  unint64_t v9 = *v8;
  if (*v8)
  {
    char v10 = *((unsigned char *)a3 + 23);
    if (v10 >= 0) {
      int8x8_t v11 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      int8x8_t v11 = a3[1];
    }
    if (v10 >= 0) {
      unint64_t v12 = (unsigned __int8 *)a3;
    }
    else {
      unint64_t v12 = *a3;
    }
    if (v6.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v17 = v9[1];
        if (v17 == a2)
        {
          uint64_t v18 = *((unsigned __int8 *)v9 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
          }
          else {
            uint64_t v19 = (unsigned __int8 *)v9[3];
          }
          if (v19 == v11)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v9[2], v12, v9[3])) {
                return v9;
              }
            }
            else
            {
              if (!*((unsigned char *)v9 + 39)) {
                return v9;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v9 + v20 + 16) == v12[v20])
              {
                if (v18 == ++v20) {
                  return v9;
                }
              }
            }
          }
        }
        else if ((v17 & (v4 - 1)) != v7)
        {
          goto LABEL_50;
        }
        unint64_t v9 = (uint64_t *)*v9;
        if (!v9) {
          goto LABEL_50;
        }
      }
    }
    do
    {
      unint64_t v13 = v9[1];
      if (v13 == a2)
      {
        uint64_t v14 = *((unsigned __int8 *)v9 + 39);
        if ((v14 & 0x80u) == 0) {
          unint64_t v15 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 39);
        }
        else {
          unint64_t v15 = (unsigned __int8 *)v9[3];
        }
        if (v15 == v11)
        {
          if ((v14 & 0x80) != 0)
          {
            if (!memcmp((const void *)v9[2], v12, v9[3])) {
              return v9;
            }
          }
          else
          {
            if (!*((unsigned char *)v9 + 39)) {
              return v9;
            }
            uint64_t v16 = 0;
            while (*((unsigned __int8 *)v9 + v16 + 16) == v12[v16])
            {
              if (v14 == ++v16) {
                return v9;
              }
            }
          }
        }
      }
      else
      {
        if (v13 >= v4) {
          v13 %= v4;
        }
        if (v13 != v7) {
          break;
        }
      }
      unint64_t v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
LABEL_50:
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v4 && (float)(v22 * (float)v4) >= v21) {
    return 0;
  }
  BOOL v23 = 1;
  if (v4 >= 3) {
    BOOL v23 = (v4 & (v4 - 1)) != 0;
  }
  unint64_t v24 = v23 | (2 * v4);
  unint64_t v25 = vcvtps_u32_f32(v21 / v22);
  if (v24 <= v25) {
    size_t prime = v25;
  }
  else {
    size_t prime = v24;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v4 = *(void *)(a1 + 8);
  }
  if (prime > v4) {
    goto LABEL_74;
  }
  if (prime < v4)
  {
    size_t v27 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
    {
      size_t v30 = std::__next_prime(v27);
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime >= v4) {
        return 0;
      }
    }
    else
    {
      uint64_t v29 = 1 << -(char)__clz(v27 - 1);
      if (v27 >= 2) {
        size_t v27 = v29;
      }
      if (prime <= v27) {
        size_t prime = v27;
      }
      if (prime >= v4) {
        return 0;
      }
    }
LABEL_74:
    sub_B6C0(a1, prime);
  }
  return 0;
}

void sub_31A918()
{
  byte_255725F = 21;
  strcpy((char *)&xmmword_2557248, "/v2/traffic/snapshots");
  qword_2557260 = (uint64_t)operator new(0x20uLL);
  strcpy((char *)qword_2557260, "/v2/traffic/snapshots/archived");
  byte_255728F = 20;
  xmmword_2557268 = xmmword_20B9800;
  strcpy(byte_2557278, "/v2/traffic/networks");
  byte_25572A7 = 16;
  strcpy(algn_2557290, "/v2/traffic/data");
  sub_319944((uint64_t)v0, "Accept", "application/x-protobuf");
  sub_319AA0((uint64_t)&v4, "Accept-Encoding", "gzip");
  sub_2AAA4((uint64_t)&unk_25572A8, (uint64_t)v0, 2);
  if (v7 < 0)
  {
    operator delete(__p);
    if ((v5 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v3 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v5 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(v4);
  if ((v3 & 0x80000000) == 0)
  {
LABEL_4:
    if ((v1 & 0x80000000) == 0) {
      return;
    }
LABEL_9:
    operator delete(v0[0]);
    return;
  }
LABEL_8:
  operator delete(v2);
  if (v1 < 0) {
    goto LABEL_9;
  }
}

void sub_31AAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a22);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a15 & 0x80000000) == 0) {
LABEL_10:
    }
      _Unwind_Resume(exception_object);
LABEL_9:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_8:
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

uint64_t sub_31AB44(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    char v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return (int)*((double *)v2 + 5);
}

void sub_31ABD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_31AC04(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    char v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return *((double *)v2 + 5);
}

void sub_31AC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_31ACC4(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  long long v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  char v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      int8x8_t v11 = *(char ***)(a1 + 8);
      unint64_t v12 = *(char ***)a1;
      if (v11 != v10)
      {
        unint64_t v13 = *(char ***)(a1 + 8);
        do
        {
          unint64_t v15 = *(v13 - 3);
          v13 -= 3;
          uint64_t v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          int8x8_t v11 = v13;
        }
        while (v13 != v10);
        unint64_t v12 = *(char ***)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_40;
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= __sz) {
      uint64_t v21 = __sz;
    }
    unint64_t v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL) {
LABEL_40:
    }
      sub_2E00();
    uint64_t v23 = 3 * v22;
    unint64_t v24 = operator new(24 * v22);
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v24;
    *(void *)(a1 + 16) = &v24[v23];
    unint64_t v25 = sub_4D59C(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(void *)(a1 + 8) = v25;
    return;
  }
  uint64_t v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    uint64_t v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      uint64_t v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10) {
          sub_31AF54(v10, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 2));
        }
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      char v10 = *(char ***)(a1 + 8);
    }
    unint64_t v25 = sub_4D59C(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    uint64_t v19 = *(char ***)a1;
    do
    {
      if (v6 != v10) {
        sub_31AF54(v10, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 2));
      }
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    uint64_t v16 = *(char ***)(a1 + 8);
    if (v16 == v19) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  uint64_t v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    double v26 = v16;
    do
    {
      uint8x8_t v28 = *(v26 - 3);
      v26 -= 3;
      size_t v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      uint64_t v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(void *)(a1 + 8) = v19;
}

void sub_31AF44(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_31AF4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_31AF54(void *result, char *__src, char *a3, size_t __sz)
{
  long long v6 = __src;
  char v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 2) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *char v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x1555555555555555) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 12 * v12;
    uint64_t result = operator new(12 * v12);
    uint64_t v9 = (char *)result;
    *char v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  unint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 2) >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    uint64_t v18 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  uint64_t v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    uint64_t v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *unint64_t v15 = &v9[v14];
  return result;
}

uint64_t *sub_31B0D0(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_B128((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v10 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v6;
  }
  unint64_t v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      char v14 = v2[23];
      if (v14 >= 0) {
        uint64_t v15 = v2[23];
      }
      else {
        uint64_t v15 = *((void *)v2 + 1);
      }
      if (v14 < 0) {
        uint64_t v2 = *(unsigned char **)v2;
      }
      if (v9.u32[0] < 2uLL)
      {
        uint64_t v16 = *(void *)&v7 - 1;
        while (1)
        {
          uint64_t v21 = v13[1];
          if (v21 == v8)
          {
            uint64_t v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0) {
              uint64_t v23 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v23 = v13[3];
            }
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3])) {
                  return v13;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  return v13;
                }
                uint64_t v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24) {
                    return v13;
                  }
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          uint64_t result = 0;
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            return result;
          }
        }
      }
      while (1)
      {
        unint64_t v17 = v13[1];
        if (v17 == v8)
        {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0) {
            uint64_t v19 = *((unsigned __int8 *)v13 + 39);
          }
          else {
            uint64_t v19 = v13[3];
          }
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3])) {
                return v13;
              }
            }
            else
            {
              if (!*((unsigned char *)v13 + 39)) {
                return v13;
              }
              uint64_t v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20) {
                  return v13;
                }
              }
            }
          }
        }
        else
        {
          if (v17 >= *(void *)&v7) {
            v17 %= *(void *)&v7;
          }
          if (v17 != v10) {
            return 0;
          }
        }
        uint64_t result = 0;
        uint64_t v13 = (uint64_t *)*v13;
        if (!v13) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_31B300(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v45, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  double v26 = operator new(0x40uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  char v46 = 0;
  *double v26 = 0;
  v26[1] = v11;
  size_t v27 = v26 + 2;
  uint8x8_t v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_4200(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)size_t v27 = v29;
  }
  v26[5] = 0;
  v26[6] = 0;
  v26[7] = 0;
  char v46 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    BOOL v34 = 1;
    if (v12 >= 3) {
      BOOL v34 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v35 = v34 | (2 * v12);
    unint64_t v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36) {
      size_t prime = v36;
    }
    else {
      size_t prime = v35;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v38) {
      goto LABEL_68;
    }
    if (prime < *(void *)&v38)
    {
      unint64_t v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v38 < 3uLL || (uint8x8_t v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        unint64_t v39 = std::__next_prime(v39);
      }
      else
      {
        uint64_t v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2) {
          unint64_t v39 = v41;
        }
      }
      if (prime <= v39) {
        size_t prime = v39;
      }
      if (prime < *(void *)&v38) {
LABEL_68:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        std::string v32 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
      else
      {
        unint64_t v4 = v11;
        std::string v32 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v33 = (void *)v45[0];
        if (v32) {
          goto LABEL_57;
        }
      }
    }
    else
    {
      unint64_t v4 = v42 & v11;
      std::string v32 = *(void **)(*(void *)a1 + 8 * (v42 & v11));
      uint64_t v33 = (void *)v45[0];
      if (v32) {
        goto LABEL_57;
      }
    }
LABEL_81:
    *uint64_t v33 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v45[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v45[0])
    {
      unint64_t v43 = *(void *)(*(void *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12) {
          v43 %= v12;
        }
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  std::string v32 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v33 = (void *)v45[0];
  if (!v32) {
    goto LABEL_81;
  }
LABEL_57:
  *uint64_t v33 = *v32;
  *std::string v32 = v45[0];
LABEL_92:
  uint64_t v15 = (uint64_t *)v45[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_31B74C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2D9D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_31B760(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2D9D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_31B778(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      char v3 = (void *)*v2;
      sub_25F44((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_31B7D8(uint64_t a1)
{
  sub_328138(a1 + 3896);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    char v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v3) {
      return a1;
    }
  }
  else
  {
    char v3 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v3) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t sub_31B8B0(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v136 = *a2;
  int v137 = (std::__shared_weak_count *)v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_327C18(a1, &v136);
  int8x8_t v7 = v137;
  if (v137 && !atomic_fetch_add(&v137->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  sub_327DC8((uint64_t *)(a1 + 7824), a2, 254);
  sub_327FD8(a1 + 12488, a2, 0, 0);
  unint64_t v8 = (unsigned char *)(a1 + 20568);
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = 0;
  *(void *)(a1 + 16376) = v10;
  *(void *)(a1 + 0x4000) = v9;
  uint64_t v12 = a1 + 16416;
  do
  {
    *(_DWORD *)(v12 + v11) = 0;
    *(_DWORD *)(v12 + v11 - 24) = 0;
    uint64_t v13 = a1 + v11;
    *(void *)(v13 + 16400) = 0;
    *(void *)(v13 + 16424) = 0;
    v11 += 48;
  }
  while (v11 != 3840);
  *(_OWORD *)(a1 + 20232) = 0u;
  char v14 = (void **)*a2;
  *(_DWORD *)(a1 + 20248) = -1;
  if (v14) {
    LOBYTE(v14) = sub_2ABCE4(v14);
  }
  *(unsigned char *)(a1 + 20252) = (_BYTE)v14;
  *(void *)long long __p = operator new(0x20uLL);
  long long v130 = xmmword_20B5EB0;
  *(_OWORD *)&__p[8] = xmmword_20B5EB0;
  strcpy(*(char **)__p, "live_speed_lower_bound_kph");
  qmemcpy(v129, "_lower_bound_kphlive_speed_lower", sizeof(v129));
  v135[0] = 0x3FD0000000000000;
  uint64_t v15 = sub_58070(a3, (uint64_t)__p);
  if (v15)
  {
    char v16 = (double *)(v15 + 5);
    BOOL v17 = *((_DWORD *)v15 + 12) == 1;
    unint64_t v18 = (double *)v135;
    if (v17) {
      unint64_t v18 = v16;
    }
    double v19 = *v18;
  }
  else
  {
    double v19 = 0.25;
  }
  sub_3178D8(a1 + 20256, a1, a1 + 7824, v19);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x19uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9250;
  strcpy(*(char **)__p, "enable_future_incidents");
  uint64_t v20 = sub_58070(a3, (uint64_t)__p);
  if (v20) {
    char v21 = *((_DWORD *)v20 + 12) == 4;
  }
  else {
    char v21 = 0;
  }
  sub_2FD844((void *)(a1 + 20304), a1, a1 + 7824, v21);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  sub_35A6BC(a1 + 20336, *a2);
  sub_30CEA8(a1 + 20392);
  sub_42A0(a1 + 20424);
  *(_OWORD *)(a1 + 20472) = 0u;
  *(_OWORD *)(a1 + 20488) = 0u;
  *(_DWORD *)(a1 + 20504) = 1065353216;
  *(void *)(a1 + 20512) = 0;
  *(void *)(a1 + 20528) = 0;
  *(void *)(a1 + 20520) = 0;
  *(void *)long long __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8870;
  strcpy(*(char **)__p, "disable_incident_branches");
  uint64_t v22 = sub_58070(a3, (uint64_t)__p);
  if (v22)
  {
    BOOL v23 = *((_DWORD *)v22 + 12) == 4;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  BOOL v23 = 0;
  if ((__p[23] & 0x80000000) != 0) {
LABEL_26:
  }
    operator delete(*(void **)__p);
LABEL_27:
  *(unsigned char *)(a1 + 20536) = v23;
  __p[23] = 19;
  strcpy(__p, "parse_weather_feeds");
  uint64_t v24 = sub_58070(a3, (uint64_t)__p);
  if (v24)
  {
    BOOL v25 = *((_DWORD *)v24 + 12) == 4;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  BOOL v25 = 0;
  if ((__p[23] & 0x80000000) != 0) {
LABEL_29:
  }
    operator delete(*(void **)__p);
LABEL_30:
  *(unsigned char *)(a1 + 20537) = v25;
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B93A0;
  strcpy(*(char **)__p, "parse_live_ev_charging_station_data");
  double v26 = sub_58070(a3, (uint64_t)__p);
  if (v26)
  {
    BOOL v27 = *((_DWORD *)v26 + 12) == 4;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  BOOL v27 = 0;
  if ((__p[23] & 0x80000000) != 0) {
LABEL_32:
  }
    operator delete(*(void **)__p);
LABEL_33:
  *(unsigned char *)(a1 + 20538) = v27;
  strcpy(__p, "parse_geometry_patches");
  __p[23] = 22;
  uint8x8_t v28 = sub_58070(a3, (uint64_t)__p);
  if (v28)
  {
    BOOL v29 = *((_DWORD *)v28 + 12) == 4;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  BOOL v29 = 0;
  if ((__p[23] & 0x80000000) != 0) {
LABEL_35:
  }
    operator delete(*(void **)__p);
LABEL_36:
  *(unsigned char *)(a1 + 20539) = v29;
  *(void *)long long __p = operator new(0x30uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9A80;
  strcpy(*(char **)__p, "compute_closure_crossing_maneuver_restrictions");
  float v30 = sub_58070(a3, (uint64_t)__p);
  if (v30)
  {
    BOOL v31 = *((_DWORD *)v30 + 12) == 4;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  BOOL v31 = 0;
  if ((__p[23] & 0x80000000) != 0) {
LABEL_38:
  }
    operator delete(*(void **)__p);
LABEL_39:
  *(unsigned char *)(a1 + 20540) = v31;
  __p[23] = 10;
  strcpy(__p, "map_filter");
  std::string v32 = sub_58070(a3, (uint64_t)__p);
  if (v32)
  {
    BOOL v33 = *((_DWORD *)v32 + 12) == 4;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  BOOL v33 = 0;
  if ((__p[23] & 0x80000000) != 0) {
LABEL_41:
  }
    operator delete(*(void **)__p);
LABEL_42:
  *(unsigned char *)(a1 + 20541) = v33;
  *(void *)(a1 + 20544) = 0;
  *(void *)(a1 + 20560) = 0;
  *(void *)(a1 + 20552) = 0;
  if (*a2)
  {
    sub_2ABC88((char *)*a2, (uint64_t)__p);
    unsigned int v34 = __p[23];
  }
  else
  {
    unsigned int v34 = 0;
    __p[23] = 0;
    __p[0] = 0;
  }
  if ((v34 & 0x80u) == 0) {
    unint64_t v35 = __p;
  }
  else {
    unint64_t v35 = *(char **)__p;
  }
  if ((v34 & 0x80u) == 0) {
    unint64_t v36 = v34;
  }
  else {
    unint64_t v36 = *(void *)&__p[8];
  }
  if (v36 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v36 >= 0x17)
  {
    uint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v38 = v36 | 7;
    }
    uint64_t v39 = v38 + 1;
    std::string v37 = (char *)operator new(v38 + 1);
    *(void *)(a1 + 20568) = v37;
    *(void *)(a1 + 20584) = v39 | 0x8000000000000000;
    *(void *)(a1 + 20576) = v36;
  }
  else
  {
    *(unsigned char *)(a1 + 20591) = v36;
    std::string v37 = (char *)(a1 + 20568);
    if (!v36)
    {
      *unint64_t v8 = 0;
      goto LABEL_83;
    }
  }
  if (v36 < 0x20 || (unint64_t)(v37 - v35) < 0x20)
  {
    uint8x8_t v40 = v35;
    uint64_t v41 = v37;
    do
    {
LABEL_77:
      char v46 = *v40++;
      *v41++ = v46;
    }
    while (v40 != &v35[v36]);
    goto LABEL_78;
  }
  uint8x8_t v40 = &v35[v36 & 0xFFFFFFFFFFFFFFE0];
  uint64_t v41 = &v37[v36 & 0xFFFFFFFFFFFFFFE0];
  unint64_t v42 = v37 + 16;
  unint64_t v43 = (long long *)(v35 + 16);
  unint64_t v44 = v36 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v45 = *v43;
    *(v42 - 1) = *(v43 - 1);
    *unint64_t v42 = v45;
    v42 += 2;
    v43 += 2;
    v44 -= 32;
  }
  while (v44);
  if (v36 != (v36 & 0x7FFFFFFFFFFFFFE0)) {
    goto LABEL_77;
  }
LABEL_78:
  *uint64_t v41 = 0;
  if (*(char *)(a1 + 20591) >= 0) {
    int v47 = (unsigned char *)(a1 + 20568);
  }
  else {
    int v47 = *(unsigned char **)v8;
  }
  do
  {
    *v47++ = __tolower(*v35++);
    --v36;
  }
  while (v36);
  LOBYTE(v34) = __p[23];
LABEL_83:
  if ((v34 & 0x80) != 0) {
    operator delete(*(void **)__p);
  }
  HIBYTE(v135[2]) = 19;
  strcpy((char *)v135, "feed_contents_check");
  memset(__p, 0, sizeof(__p));
  int v134 = 1065353216;
  BOOL v48 = sub_58070(a3, (uint64_t)v135);
  if (v48 && *((_DWORD *)v48 + 12) == 2) {
    BOOL v49 = (void *)v48[5];
  }
  else {
    BOOL v49 = __p;
  }
  HIBYTE(v132) = 7;
  strcpy((char *)&v131, "enabled");
  BOOL v50 = sub_58070(v49, (uint64_t)&v131);
  if (v50)
  {
    BOOL v51 = *((_DWORD *)v50 + 12) == 4;
    if ((SHIBYTE(v132) & 0x80000000) == 0) {
      goto LABEL_92;
    }
    goto LABEL_91;
  }
  BOOL v51 = 0;
  if (SHIBYTE(v132) < 0) {
LABEL_91:
  }
    operator delete(v131);
LABEL_92:
  uint64_t v52 = *(char **)&__p[16];
  if (*(void *)&__p[16])
  {
    do
    {
      BOOL v56 = *(char **)v52;
      sub_57AC8((uint64_t *)v52 + 5);
      if (v52[39] < 0) {
        operator delete(*((void **)v52 + 2));
      }
      operator delete(v52);
      uint64_t v52 = v56;
    }
    while (v56);
  }
  long long v53 = *(void **)__p;
  *(void *)long long __p = 0;
  if (v53) {
    operator delete(v53);
  }
  if (SHIBYTE(v135[2]) < 0) {
    operator delete((void *)v135[0]);
  }
  *(unsigned char *)(a1 + 20592) = v51;
  HIBYTE(v135[2]) = 19;
  strcpy((char *)v135, "feed_contents_check");
  memset(__p, 0, sizeof(__p));
  int v134 = 1065353216;
  uint64_t v54 = sub_58070(a3, (uint64_t)v135);
  if (v54 && *((_DWORD *)v54 + 12) == 2) {
    char v55 = (void *)v54[5];
  }
  else {
    char v55 = __p;
  }
  uint16x8_t v131 = operator new(0x20uLL);
  long long v132 = v130;
  strcpy((char *)v131, "min_required_match_percent");
  int v57 = sub_58070(v55, (uint64_t)&v131);
  if (v57 && *((_DWORD *)v57 + 12) == 1)
  {
    int v58 = (int)*((double *)v57 + 5);
    if ((SHIBYTE(v132) & 0x80000000) == 0) {
      goto LABEL_110;
    }
  }
  else
  {
    LOBYTE(v58) = 99;
    if ((SHIBYTE(v132) & 0x80000000) == 0) {
      goto LABEL_110;
    }
  }
  operator delete(v131);
LABEL_110:
  int v59 = *(char **)&__p[16];
  if (*(void *)&__p[16])
  {
    do
    {
      unint64_t v71 = *(char **)v59;
      sub_57AC8((uint64_t *)v59 + 5);
      if (v59[39] < 0) {
        operator delete(*((void **)v59 + 2));
      }
      operator delete(v59);
      int v59 = v71;
    }
    while (v71);
  }
  unint64_t v60 = *(void **)__p;
  *(void *)long long __p = 0;
  if (v60) {
    operator delete(v60);
  }
  if (SHIBYTE(v135[2]) < 0) {
    operator delete((void *)v135[0]);
  }
  *(unsigned char *)(a1 + 20593) = v58;
  long long v61 = (char **)(a1 + 20600);
  *(void *)(a1 + 20600) = 0;
  *(void *)(a1 + 20616) = 0;
  *(void *)(a1 + 20608) = 0;
  int v62 = (char *)operator new(0x20uLL);
  *(void *)long long __p = v62;
  *(_OWORD *)&__p[8] = v130;
  *(_OWORD *)int v62 = v129[1];
  *(_OWORD *)(v62 + 10) = v129[0];
  v62[26] = 0;
  v135[0] = 0x3FD0000000000000;
  uint64_t v63 = sub_58070(a3, (uint64_t)__p);
  if (v63)
  {
    unint64_t v64 = v63 + 5;
    if (*((_DWORD *)v63 + 12) != 1) {
      unint64_t v64 = v135;
    }
    *(void *)(a1 + 20624) = *v64;
    if ((__p[23] & 0x80000000) != 0) {
      goto LABEL_119;
    }
  }
  else
  {
    *(double *)(a1 + 20624) = 0.25;
    if ((__p[23] & 0x80000000) != 0) {
LABEL_119:
    }
      operator delete(*(void **)__p);
  }
  strcpy(__p, "compute_closure_colors");
  __p[23] = 22;
  int v65 = sub_58070(a3, (uint64_t)__p);
  if (v65)
  {
    BOOL v66 = *((_DWORD *)v65 + 12) == 4;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_123;
    }
    goto LABEL_122;
  }
  BOOL v66 = 0;
  if ((__p[23] & 0x80000000) != 0) {
LABEL_122:
  }
    operator delete(*(void **)__p);
LABEL_123:
  *(unsigned char *)(a1 + 20632) = v66;
  *(void *)long long __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8870;
  strcpy(*(char **)__p, "process_hsp_day_overrides");
  int64_t v67 = sub_58070(a3, (uint64_t)__p);
  if (!v67)
  {
    BOOL v68 = 0;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_126;
    }
    goto LABEL_125;
  }
  BOOL v68 = *((_DWORD *)v67 + 12) == 4;
  if ((__p[23] & 0x80000000) != 0) {
LABEL_125:
  }
    operator delete(*(void **)__p);
LABEL_126:
  *(unsigned char *)(a1 + 20633) = v68;
  HIBYTE(v135[2]) = 17;
  strcpy((char *)v135, "cbr_speeds_config");
  memset(__p, 0, sizeof(__p));
  int v134 = 1065353216;
  __n128 v69 = sub_58070(a3, (uint64_t)v135);
  if (v69 && *((_DWORD *)v69 + 12) == 2) {
    unint64_t v70 = (void *)v69[5];
  }
  else {
    unint64_t v70 = __p;
  }
  sub_328508(a1 + 20640, v70);
  unsigned __int32 v72 = *(char **)&__p[16];
  if (*(void *)&__p[16])
  {
    do
    {
      unint64_t v76 = *(char **)v72;
      sub_57AC8((uint64_t *)v72 + 5);
      if (v72[39] < 0) {
        operator delete(*((void **)v72 + 2));
      }
      operator delete(v72);
      unsigned __int32 v72 = v76;
    }
    while (v76);
  }
  uint64_t v73 = *(void **)__p;
  *(void *)long long __p = 0;
  if (v73) {
    operator delete(v73);
  }
  if (SHIBYTE(v135[2]) < 0) {
    operator delete((void *)v135[0]);
  }
  *(void *)(a1 + 20696) = 0;
  *(_OWORD *)(a1 + 20680) = 0u;
  memset(v135, 0, sizeof(v135));
  __p[23] = 18;
  strcpy(__p, "branch_ignore_list");
  *(void *)&v129[0] = a1 + 20680;
  uint64_t v74 = sub_58070(a3, (uint64_t)__p);
  if (v74 && *((_DWORD *)v74 + 12) == 3)
  {
    uint64_t v75 = (uint64_t *)v74[5];
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_147;
    }
  }
  else
  {
    uint64_t v75 = v135;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_147;
    }
  }
  operator delete(*(void **)__p);
LABEL_147:
  *(void *)&v129[1] = a1 + 7824;
  sub_23708(a1 + 20544, (v75[1] - *v75) >> 4);
  std::string::size_type v77 = (_DWORD *)*v75;
  uint64_t v78 = (_DWORD *)v75[1];
  if ((_DWORD *)*v75 != v78)
  {
    uint64_t v79 = *(void *)(a1 + 20552);
    do
    {
      if (v77[2])
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_23FDF58;
      }
      char v80 = *(long long **)v77;
      if (*(char *)(*(void *)v77 + 23) < 0)
      {
        sub_4200(__p, *(void **)v80, *((void *)v80 + 1));
      }
      else
      {
        long long v81 = *v80;
        *(void *)&__p[16] = *((void *)v80 + 2);
        *(_OWORD *)long long __p = v81;
      }
      uint64_t v82 = sub_5D6D4((std::string **)(a1 + 20544), v79, (std::string *)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      uint64_t v79 = (uint64_t)&v82[1];
      v77 += 4;
    }
    while (v77 != v78);
  }
  *(void *)long long __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = v130;
  strcpy(*(char **)__p, "extra_cbr_traffic_branches");
  uint64_t v83 = sub_58070(a3, (uint64_t)__p);
  if (v83 && *((_DWORD *)v83 + 12) == 3)
  {
    char v84 = (uint64_t *)v83[5];
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_162;
    }
  }
  else
  {
    char v84 = v135;
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_162;
    }
  }
  operator delete(*(void **)__p);
LABEL_162:
  unint64_t v85 = ((v84[1] - *v84) >> 4) + 1;
  uint64_t v86 = *(char **)(a1 + 20616);
  BOOL v87 = *(unsigned char **)(a1 + 20600);
  if (v85 <= (v86 - v87) >> 2) {
    goto LABEL_182;
  }
  if (v85 >> 62) {
    goto LABEL_214;
  }
  unint64_t v88 = *(unsigned char **)(a1 + 20608);
  uint64_t v89 = (char *)operator new(4 * v85);
  uint64_t v86 = &v89[4 * v85];
  uint64_t v90 = v88 - v87;
  long long v91 = &v89[(v88 - v87) & 0xFFFFFFFFFFFFFFFCLL];
  uint64_t v92 = v91;
  if (v88 != v87)
  {
    if ((unint64_t)(v90 - 4) < 0x2C)
    {
      uint64_t v92 = &v89[(v88 - v87) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_179:
        int v101 = *((_DWORD *)v88 - 1);
        v88 -= 4;
        *((_DWORD *)v92 - 1) = v101;
        v92 -= 4;
      }
      while (v88 != v87);
      goto LABEL_180;
    }
    uint64_t v92 = &v89[(v88 - v87) & 0xFFFFFFFFFFFFFFFCLL];
    if ((unint64_t)(&v88[-(v90 & 0xFFFFFFFFFFFFFFFCLL)] - v89) < 0x20) {
      goto LABEL_179;
    }
    uint64_t v93 = v90 >> 2;
    unint64_t v94 = ((unint64_t)(v90 - 4) >> 2) + 1;
    uint64_t v95 = 4 * (v94 & 0x7FFFFFFFFFFFFFF8);
    uint64_t v96 = &v88[-v95];
    uint64_t v92 = &v91[-v95];
    unint64_t v97 = &v89[4 * v93 - 16];
    unint64_t v98 = (long long *)(v88 - 16);
    uint64_t v99 = v94 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v100 = *v98;
      *((_OWORD *)v97 - 1) = *(v98 - 1);
      *(_OWORD *)unint64_t v97 = v100;
      v97 -= 32;
      v98 -= 2;
      v99 -= 8;
    }
    while (v99);
    unint64_t v88 = v96;
    if (v94 != (v94 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_179;
    }
  }
LABEL_180:
  *(void *)(a1 + 20600) = v92;
  *(void *)(a1 + 20608) = v91;
  *(void *)(a1 + 20616) = v86;
  if (v87)
  {
    operator delete(v87);
    uint64_t v86 = *(char **)(a1 + 20616);
  }
LABEL_182:
  int v102 = *(char **)(a1 + 20608);
  if (v102 < v86)
  {
    *(_DWORD *)int v102 = 0;
    uint64_t v103 = v102 + 4;
    *(void *)(a1 + 20608) = v102 + 4;
    uint64_t v104 = *v84;
    uint64_t v105 = v84[1];
    if (*v84 == v105) {
      goto LABEL_208;
    }
    goto LABEL_206;
  }
  unint64_t v106 = *v61;
  uint64_t v107 = v102 - *v61;
  uint64_t v108 = v107 >> 2;
  unint64_t v109 = (v107 >> 2) + 1;
  if (v109 >> 62) {
LABEL_214:
  }
    sub_2E00();
  uint64_t v110 = v86 - v106;
  if (v110 >> 1 > v109) {
    unint64_t v109 = v110 >> 1;
  }
  if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v111 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v111 = v109;
  }
  if (!v111)
  {
    long long v112 = 0;
    long long v113 = (_DWORD *)(4 * v108);
    size_t v114 = 0;
    *(_DWORD *)(4 * v108) = 0;
    uint64_t v103 = (char *)(4 * v108 + 4);
    unint64_t v115 = (char *)(v102 - v106);
    if (v102 != v106) {
      goto LABEL_194;
    }
LABEL_203:
    *(void *)(a1 + 20600) = v113;
    *(void *)(a1 + 20608) = v103;
    *(void *)(a1 + 20616) = v114;
    if (!v102) {
      goto LABEL_205;
    }
    goto LABEL_204;
  }
  if (v111 >> 62) {
    sub_188D718();
  }
  long long v112 = operator new(4 * v111);
  long long v113 = &v112[4 * v108];
  size_t v114 = &v112[4 * v111];
  *long long v113 = 0;
  uint64_t v103 = (char *)(v113 + 1);
  unint64_t v115 = (char *)(v102 - v106);
  if (v102 == v106) {
    goto LABEL_203;
  }
LABEL_194:
  unint64_t v116 = (unint64_t)(v115 - 4);
  if (v116 < 0x2C) {
    goto LABEL_218;
  }
  if ((unint64_t)(v102 - &v112[v107]) < 0x20) {
    goto LABEL_218;
  }
  uint64_t v117 = (v116 >> 2) + 1;
  uint64_t v118 = 4 * (v117 & 0x7FFFFFFFFFFFFFF8);
  long long v119 = &v102[-v118];
  long long v113 = (_DWORD *)((char *)v113 - v118);
  long long v120 = &v112[4 * v108 - 16];
  long long v121 = v102 - 16;
  uint64_t v122 = v117 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v123 = *(_OWORD *)v121;
    *(v120 - 1) = *((_OWORD *)v121 - 1);
    _OWORD *v120 = v123;
    v120 -= 2;
    v121 -= 32;
    v122 -= 8;
  }
  while (v122);
  int v102 = v119;
  if (v117 != (v117 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_218:
    do
    {
      int v124 = *((_DWORD *)v102 - 1);
      v102 -= 4;
      *--long long v113 = v124;
    }
    while (v102 != v106);
  }
  int v102 = *v61;
  *(void *)(a1 + 20600) = v113;
  *(void *)(a1 + 20608) = v103;
  *(void *)(a1 + 20616) = v114;
  if (v102) {
LABEL_204:
  }
    operator delete(v102);
LABEL_205:
  *(void *)(a1 + 20608) = v103;
  uint64_t v104 = *v84;
  uint64_t v105 = v84[1];
  if (*v84 == v105) {
    goto LABEL_208;
  }
  do
  {
LABEL_206:
    uint64_t v125 = sub_345948();
    if (*(_DWORD *)(v104 + 8))
    {
      char v128 = __cxa_allocate_exception(8uLL);
      void *v128 = &off_23FDF58;
    }
    *(_DWORD *)long long __p = sub_345D04((uint64_t)v125, *(void *)v104);
    uint64_t v103 = sub_32B764((unint64_t *)(a1 + 20600), v103, __p) + 4;
    v104 += 16;
  }
  while (v104 != v105);
LABEL_208:
  if (v135[0])
  {
    sub_5B788(v135);
    operator delete((void *)v135[0]);
  }
  return a1;
}

void sub_31C8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  sub_1A668(v37);
  uint64_t v39 = (void *)v35[2564];
  if (v39)
  {
    v35[2565] = v39;
    operator delete(v39);
  }
  sub_31B778(a12);
  sub_4814(a11);
  uint8x8_t v40 = (void *)v35[2535];
  if (v40)
  {
    v35[2536] = v40;
    operator delete(v40);
  }
  sub_14A84(a9);
  sub_14A84(a10);
  sub_31B7D8(v36);
  sub_32834C(v35);
  _Unwind_Resume(a1);
}

uint64_t sub_31CC1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)a2 + *(void *)(a2 + 8);
  *(void *)&long long v223 = *(void *)a2;
  *((void *)&v223 + 1) = v8;
  uint64_t v224 = 0x2C700000000;
  if (sub_2F4CE4(&v223, 5))
  {
    uint64_t v9 = (void *)(*(void *)a2 + *(void *)(a2 + 8));
    __p[0] = *(void **)a2;
    __p[1] = v9;
    int64_t v195 = 0x2C700000000;
    if (sub_2F333C((uint64_t)__p))
    {
      while (1)
      {
        while (v195 != 5)
        {
          switch(HIDWORD(v195))
          {
            case 0:
              sub_2F3C98((uint64_t *)__p, (uint64_t)__p[1]);
              break;
            case 1:
              __p[0] = (char *)__p[0] + 8;
              if (__p[0] > __p[1])
              {
                exception = __cxa_allocate_exception(0x40uLL);
                *(void *)unint64_t v212 = operator new(0x30uLL);
                *(_OWORD *)&v212[8] = xmmword_20E1380;
                strcpy(*(char **)v212, "Skipping over bytes exceeded message length.");
                unint64_t v182 = (void *)sub_2F404((uint64_t)exception, (long long *)v212);
              }
              return result;
            case 2:
              unsigned int v12 = sub_2F36C8((char **)__p, (char *)__p[1]);
              __p[0] = (char *)__p[0] + v12;
              if (__p[0] > __p[1])
              {
                uint64_t v179 = __cxa_allocate_exception(0x40uLL);
                *(void *)unint64_t v212 = operator new(0x30uLL);
                *(_OWORD *)&v212[8] = xmmword_20E1380;
                strcpy(*(char **)v212, "Skipping over bytes exceeded message length.");
                int v180 = (void *)sub_2F404((uint64_t)v179, (long long *)v212);
              }
              return result;
            case 5:
              __p[0] = (char *)__p[0] + 4;
              if (__p[0] > __p[1])
              {
                int64x2_t v177 = __cxa_allocate_exception(0x40uLL);
                *(void *)unint64_t v212 = operator new(0x30uLL);
                *(_OWORD *)&v212[8] = xmmword_20E1380;
                strcpy(*(char **)v212, "Skipping over bytes exceeded message length.");
                int64x2_t v178 = (void *)sub_2F404((uint64_t)v177, (long long *)v212);
              }
              return result;
            default:
              uint64_t v183 = __cxa_allocate_exception(0x40uLL);
              v212[23] = 18;
              strcpy(v212, "Unknown wire type.");
              uint64_t v184 = (void *)sub_2F404((uint64_t)v183, (long long *)v212);
          }
          if (!sub_2F333C((uint64_t)__p)) {
            goto LABEL_24;
          }
        }
        std::string __dst = sub_2F3488((char **)__p);
        uint64_t v226 = &__dst[v10];
        int64_t v227 = 0x2C700000000;
        if (sub_30DA40((uint64_t)&__dst)) {
          break;
        }
LABEL_14:
        if (!sub_2F333C((uint64_t)__p)) {
          goto LABEL_24;
        }
      }
      while (v227 != 3)
      {
        switch(HIDWORD(v227))
        {
          case 0:
            sub_2F3C98((uint64_t *)&__dst, (uint64_t)v226);
            break;
          case 1:
            __dst += 8;
            if (__dst > v226)
            {
              int v163 = __cxa_allocate_exception(0x40uLL);
              *(void *)unint64_t v212 = operator new(0x30uLL);
              *(_OWORD *)&v212[8] = xmmword_20E1380;
              strcpy(*(char **)v212, "Skipping over bytes exceeded message length.");
              uint64_t v164 = (void *)sub_2F404((uint64_t)v163, (long long *)v212);
            }
            return result;
          case 2:
            unsigned int v11 = sub_2F36C8(&__dst, v226);
            __dst += v11;
            if (__dst > v226)
            {
              uint64_t v161 = __cxa_allocate_exception(0x40uLL);
              *(void *)unint64_t v212 = operator new(0x30uLL);
              *(_OWORD *)&v212[8] = xmmword_20E1380;
              strcpy(*(char **)v212, "Skipping over bytes exceeded message length.");
              int v162 = (void *)sub_2F404((uint64_t)v161, (long long *)v212);
            }
            return result;
          case 5:
            __dst += 4;
            if (__dst > v226)
            {
              uint64_t v157 = __cxa_allocate_exception(0x40uLL);
              *(void *)unint64_t v212 = operator new(0x30uLL);
              *(_OWORD *)&v212[8] = xmmword_20E1380;
              strcpy(*(char **)v212, "Skipping over bytes exceeded message length.");
              char v158 = (void *)sub_2F404((uint64_t)v157, (long long *)v212);
            }
            return result;
          default:
            long long v159 = __cxa_allocate_exception(0x40uLL);
            v212[23] = 18;
            strcpy(v212, "Unknown wire type.");
            uint64_t v160 = (void *)sub_2F404((uint64_t)v159, (long long *)v212);
        }
        if (!sub_30DA40((uint64_t)&__dst)) {
          goto LABEL_14;
        }
      }
      int v13 = 0;
    }
    else
    {
LABEL_24:
      int v13 = 1;
    }
    char v16 = operator new(0x2D0uLL);
    v16[1] = 0;
    long long v16[2] = 0;
    void *v16 = off_2438A10;
    int v193 = 0;
    *a4 = sub_328A0C((uint64_t)(v16 + 3));
    a4[1] = (uint64_t)v16;
    *((_OWORD *)a4 + 1) = 0u;
    *((_OWORD *)a4 + 2) = 0u;
    *((_DWORD *)a4 + 12) = 1065353216;
    *((unsigned char *)a4 + 56) = 0;
    *((_OWORD *)a4 + 4) = 0u;
    *((_OWORD *)a4 + 5) = 0u;
    *((_OWORD *)a4 + 6) = 0u;
    *((_OWORD *)a4 + 7) = 0u;
    *((_OWORD *)a4 + 8) = 0u;
    *((_OWORD *)a4 + 9) = 0u;
    int64x2_t v189 = (char *)(a1 + 20568);
    uint16x8_t v190 = (void **)(a1 + 20680);
    *((_OWORD *)a4 + 10) = 0u;
    *((_OWORD *)a4 + 11) = 0u;
    uint32x4_t v188 = (uint64_t *)(a1 + 7824);
    *((_OWORD *)a4 + 12) = 0u;
    *((_OWORD *)a4 + 13) = 0u;
    *((_OWORD *)a4 + 14) = 0u;
    *(_OWORD *)((char *)a4 + 236) = 0u;
    *((_OWORD *)a4 + 17) = 0u;
    *((_OWORD *)a4 + 18) = 0u;
    *((_OWORD *)a4 + 16) = 0u;
LABEL_34:
    while (2)
    {
      uint64_t result = sub_2F333C((uint64_t)&v223);
      if (!result)
      {
LABEL_284:
        *(_DWORD *)*a4 = v193;
        unint64_t v111 = (void *)*a4;
        if (*(_DWORD *)*a4)
        {
          sub_322A04(v111 + 4);
          sub_322B5C(v111 + 16);
          int64_t v112 = v111[7];
          long long v113 = (long long *)v111[8];
          unint64_t v114 = 126 - 2 * __clz(((uint64_t)v113 - v112) >> 5);
          if (v113 == (long long *)v112) {
            uint64_t v115 = 0;
          }
          else {
            uint64_t v115 = v114;
          }
          sub_32F9D4(v112, v113, v115, 1);
          unint64_t v116 = v111[13];
          uint64_t v117 = (long long *)v111[14];
          unint64_t v118 = 126 - 2 * __clz((uint64_t)((uint64_t)v117 - v116) >> 5);
          if (v117 == (long long *)v116) {
            uint64_t v119 = 0;
          }
          else {
            uint64_t v119 = v118;
          }
          sub_331104(v116, v117, (uint64_t)__p, v119, 1);
          uint64_t v120 = v111[22];
          long long v121 = (__n128 *)v111[23];
          unint64_t v122 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v121 - v120) >> 3));
          if (v121 == (__n128 *)v120) {
            uint64_t v123 = 0;
          }
          else {
            uint64_t v123 = v122;
          }
          sub_29FDD0(v120, v121, (uint64_t)__p, v123, 1);
          int v124 = sub_332608((_DWORD *)v111[22], (_DWORD *)v111[23]);
          if ((_DWORD *)v111[23] != v124) {
            v111[23] = v124;
          }
          unint64_t v125 = v111[25];
          uint64_t v126 = (long long *)v111[26];
          unint64_t v127 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v126 - v125) >> 3));
          if (v126 == (long long *)v125) {
            uint64_t v128 = 0;
          }
          else {
            uint64_t v128 = v127;
          }
          sub_332744(v125, v126, (uint64_t)__p, v128, 1);
          long long v129 = (uint64_t *)v111[37];
          unint64_t v130 = v111[38];
          unint64_t v131 = 126 - 2 * __clz((uint64_t)(v130 - (void)v129) >> 6);
          if ((uint64_t *)v130 == v129) {
            uint64_t v132 = 0;
          }
          else {
            uint64_t v132 = v131;
          }
          sub_334AB4(v129, v130, (uint64_t)__p, v132, 1);
          sub_33498C(v111 + 37);
          uint64_t v133 = v111[28];
          int v134 = (long long *)v111[29];
          unint64_t v135 = 126 - 2 * __clz(0x2C3F35BA781948B1 * (((uint64_t)v134 - v133) >> 3));
          if (v134 == (long long *)v133) {
            uint64_t v136 = 0;
          }
          else {
            uint64_t v136 = v135;
          }
          sub_336688(v133, v134, (uint64_t)__p, v136, 1);
          uint64_t v137 = sub_33A2A4(v111[28], v111[29]);
          sub_33A0F4((uint64_t)(v111 + 28), v137, v111[29]);
          uint64_t v138 = v111[31];
          long long v139 = (unsigned int *)v111[32];
          unint64_t v140 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v139 - v138) >> 2));
          if (v139 == (unsigned int *)v138) {
            uint64_t v141 = 0;
          }
          else {
            uint64_t v141 = v140;
          }
          sub_33A554(v138, v139, (uint64_t)__p, v141, 1);
          sub_33A3E8((uint64_t)(v111 + 31));
          uint64_t v142 = v111[34];
          unint64_t v143 = v111[35];
          unint64_t v144 = 126 - 2 * __clz((uint64_t)(v143 - v142) >> 4);
          if (v143 == v142) {
            uint64_t v145 = 0;
          }
          else {
            uint64_t v145 = v144;
          }
          sub_33C650(v142, v143, (uint64_t)__p, v145, 1);
          sub_33C4F0((uint64_t)(v111 + 34));
          uint64_t v146 = v111[54];
          long long v147 = (uint64_t *)v111[55];
          unint64_t v148 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v147 - v146) >> 3));
          if (v147 == (uint64_t *)v146) {
            uint64_t v149 = 0;
          }
          else {
            uint64_t v149 = v148;
          }
          sub_30FA14(v146, v147, (uint64_t)__p, v149, 1);
          sub_30F8BC((uint64_t)(v111 + 54));
          sub_322C88(v111 + 60);
          sub_322DFC(a1, a3, a4);
          sub_323BE4(v150, (char **)a2, (uint64_t)a4);
          sub_323E34((long long **)(*a4 + 568));
          __p[0] = (void *)*a4;
          uint64_t result = (uint64_t)sub_32A014((uint64_t)(a4 + 2), (unsigned int *)__p[0], (uint64_t)&unk_20F06E0, (_DWORD **)__p);
          *(_DWORD *)(result + 248) = 1;
        }
        return result;
      }
      while (v224 != 5)
      {
        switch(HIDWORD(v224))
        {
          case 0:
            sub_2F3C98((uint64_t *)&v223, *((uint64_t *)&v223 + 1));
            break;
          case 1:
            *(void *)&long long v223 = v223 + 8;
            if ((unint64_t)v223 > *((void *)&v223 + 1))
            {
              unsigned int v153 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v212, "Skipping over bytes exceeded message length.");
              long long v154 = (void *)sub_2F404((uint64_t)v153, (long long *)v212);
            }
            return result;
          case 2:
            unsigned int v17 = sub_2F36C8((char **)&v223, *((char **)&v223 + 1));
            sub_2F3DCC((unint64_t *)&v223, v17);
            break;
          case 5:
            *(void *)&long long v223 = v223 + 4;
            if ((unint64_t)v223 > *((void *)&v223 + 1))
            {
              long long v151 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v212, "Skipping over bytes exceeded message length.");
              long long v152 = (void *)sub_2F404((uint64_t)v151, (long long *)v212);
            }
            return result;
          default:
            uint64_t v155 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v212, "Unknown wire type.");
            int64x2_t v156 = (void *)sub_2F404((uint64_t)v155, (long long *)v212);
        }
        uint64_t result = sub_2F333C((uint64_t)&v223);
        if ((result & 1) == 0) {
          goto LABEL_284;
        }
      }
      int64x2_t v210 = sub_2F3488((char **)&v223);
      uint64_t v211 = v18;
      __p[0] = v210;
      __p[1] = &v210[v18];
      int64_t v195 = 0x2C700000000;
      if (sub_2F333C((uint64_t)__p))
      {
        while (v195 != 1)
        {
          switch(HIDWORD(v195))
          {
            case 0:
              sub_2F3C98((uint64_t *)__p, (uint64_t)__p[1]);
              break;
            case 1:
              __p[0] = (char *)__p[0] + 8;
              if (__p[0] > __p[1])
              {
                unint64_t v165 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(v212, "Skipping over bytes exceeded message length.");
                int64x2_t v166 = (void *)sub_2F404((uint64_t)v165, (long long *)v212);
              }
              return result;
            case 2:
              unsigned int v19 = sub_2F36C8((char **)__p, (char *)__p[1]);
              sub_2F3DCC((unint64_t *)__p, v19);
              break;
            case 5:
              __p[0] = (char *)__p[0] + 4;
              if (__p[0] > __p[1])
              {
                uint32x4_t v169 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(v212, "Skipping over bytes exceeded message length.");
                int8x16_t v170 = (void *)sub_2F404((uint64_t)v169, (long long *)v212);
              }
              return result;
            default:
              uint8x16_t v167 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v212, "Unknown wire type.");
              unint64_t v168 = (void *)sub_2F404((uint64_t)v167, (long long *)v212);
          }
          if (!sub_2F333C((uint64_t)__p)) {
            goto LABEL_53;
          }
        }
        uint64_t v20 = sub_2F3488((char **)__p);
        int64x2_t v208 = v20;
        uint64_t v209 = v21;
        if (v20)
        {
          int v187 = v13;
          if (!*(unsigned char *)(a1 + 20541)
            || (*(void *)unint64_t v212 = v20,
                *(void *)&v212[8] = &v20[v21],
                *(void *)&v212[16] = 0x2C700000000,
                !sub_2F333C((uint64_t)v212)))
          {
LABEL_122:
            sub_31EF70(&v208, (uint64_t)v212);
            if (*(char *)(a1 + 20703) < 0) {
              operator delete(*v190);
            }
            *(_OWORD *)uint16x8_t v190 = *(_OWORD *)v212;
            *(void *)(a1 + 20696) = *(void *)&v212[16];
            *(_DWORD *)*a4 = 0;
            std::string __dst = v208;
            uint64_t v226 = &v208[v209];
            int64_t v227 = 0x2C700000000;
            while (1)
            {
              if (!sub_2F333C((uint64_t)&__dst))
              {
LABEL_234:
                int v92 = *(_DWORD *)*a4;
                if (!v92)
                {
                  *(_DWORD *)*a4 = 1;
                  sub_31F328(a1, (uint64_t)&v208, 0, (uint64_t)__p);
                  sub_3555F0(&v210, a1, v188, *(unsigned __int8 *)(a1 + 20593), v189, (uint64_t)__p);
                  uint64_t v93 = *a4;
                  int v94 = *(_DWORD *)(*a4 + 508);
                  int v95 = v198;
                  if (v94 != 0x7FFFFFFF && v94 <= v198)
                  {
                    int v101 = *(_DWORD *)(v93 + 512);
                    if (v101 == 0x7FFFFFFF || v101 < v198) {
                      goto LABEL_250;
                    }
LABEL_243:
                    uint64_t v99 = *(char **)(v93 + 576);
                    if ((unint64_t)v99 < *(void *)(v93 + 584)) {
                      goto LABEL_244;
                    }
LABEL_251:
                    uint64_t v100 = sub_329B74((int64x2_t *)(v93 + 568), (long long *)__p);
                  }
                  else
                  {
                    *(_DWORD *)(v93 + 508) = v198;
                    int v97 = *(_DWORD *)(v93 + 512);
                    if (v97 != 0x7FFFFFFF && v97 >= v95) {
                      goto LABEL_243;
                    }
LABEL_250:
                    *(_DWORD *)(v93 + 512) = v95;
                    uint64_t v99 = *(char **)(v93 + 576);
                    if ((unint64_t)v99 >= *(void *)(v93 + 584)) {
                      goto LABEL_251;
                    }
LABEL_244:
                    sub_329D98(v99, (long long *)__p);
                    uint64_t v100 = (uint64_t)(v99 + 144);
                    *(void *)(v93 + 576) = v99 + 144;
                  }
                  *(void *)(v93 + 576) = v100;
                  if (sub_723EC(1u))
                  {
                    sub_6BAC((uint64_t)v212);
                    uint64_t v103 = sub_188FC78(v212, (uint64_t)"Encountered snapshot without branch_ids in ", 43);
                    char v104 = *(unsigned char *)(a1 + 20703);
                    if (v104 >= 0) {
                      uint64_t v105 = a1 + 20680;
                    }
                    else {
                      uint64_t v105 = *(void *)(a1 + 20680);
                    }
                    if (v104 >= 0) {
                      uint64_t v106 = *(unsigned __int8 *)(a1 + 20703);
                    }
                    else {
                      uint64_t v106 = *(void *)(a1 + 20688);
                    }
                    uint64_t v107 = sub_188FC78(v103, v105, v106);
                    sub_188FC78(v107, (uint64_t)". Treating it as MAIN.", 22);
                    std::stringbuf::str();
                    sub_7246C((uint64_t *)&v205, 1u);
                    if (SHIBYTE(v207) < 0) {
                      operator delete(v205);
                    }
                    *(void *)unint64_t v212 = v192;
                    *(void *)&v212[*(void *)(v192 - 24)] = v191;
                    if (v219 < 0) {
                      operator delete(v217);
                    }
                    std::streambuf::~streambuf();
                    std::ostream::~ostream();
                    std::ios::~ios();
                  }
                  if (v203)
                  {
                    uint64_t v204 = v203;
                    operator delete(v203);
                  }
                  if ((v202 & 0x80000000) == 0)
                  {
                    if ((v200 & 0x80000000) == 0) {
                      goto LABEL_268;
                    }
LABEL_281:
                    operator delete(v199);
                    if (v197 < 0) {
                      goto LABEL_282;
                    }
LABEL_269:
                    if ((SHIBYTE(v195) & 0x80000000) == 0) {
                      goto LABEL_270;
                    }
LABEL_283:
                    operator delete(__p[0]);
                    goto LABEL_270;
                  }
                  operator delete(v201);
                  if (v200 < 0) {
                    goto LABEL_281;
                  }
LABEL_268:
                  if ((v197 & 0x80000000) == 0) {
                    goto LABEL_269;
                  }
LABEL_282:
                  operator delete(v196);
                  if (SHIBYTE(v195) < 0) {
                    goto LABEL_283;
                  }
LABEL_270:
                  int v92 = *(_DWORD *)*a4;
                }
                sub_320980(a1, &v210, (int **)a4);
                if (!*(unsigned char *)(a1 + 20536) || (*(_DWORD *)*a4 & 1u) - 1 <= 0xFFFFFFFD) {
                  sub_320CE0(a1, &v210, (unsigned int **)a4);
                }
                if (((*(unsigned char *)(a1 + 20632) != 0) & ~v187) == 0) {
                  sub_321228(a1, &v210, (int **)a4);
                }
                sub_321818(a1, &v210, (int **)a4);
                sub_321EB0(a1, &v210, (char **)a4, (uint64_t)a3);
                sub_322308(a1, (uint64_t)&v210, (unsigned int **)a4);
                if (*(unsigned char *)(a1 + 20633)) {
                  sub_32251C(a1, &v210, a4);
                }
                __p[0] = (void *)*a4;
                uint64_t v108 = sub_32A014((uint64_t)(a4 + 2), (unsigned int *)__p[0], (uint64_t)&unk_20F06E0, (_DWORD **)__p);
                ++*((_DWORD *)v108 + 63);
                uint64_t v109 = v211;
                __p[0] = (void *)*a4;
                uint64_t v110 = sub_32A014((uint64_t)(a4 + 2), (unsigned int *)__p[0], (uint64_t)&unk_20F06E0, (_DWORD **)__p);
                v193 |= v92;
                *((void *)v110 + 32) += v109;
LABEL_279:
                int v13 = v187;
                goto LABEL_34;
              }
              while (v227 != 4)
              {
                switch(HIDWORD(v227))
                {
                  case 0:
                    sub_2F3C98((uint64_t *)&__dst, (uint64_t)v226);
                    break;
                  case 1:
                    __dst += 8;
                    if (__dst > v226)
                    {
                      unint64_t v175 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v212, "Skipping over bytes exceeded message length.");
                      uint32x4_t v176 = (void *)sub_2F404((uint64_t)v175, (long long *)v212);
                    }
                    return result;
                  case 2:
                    unsigned int v48 = sub_2F36C8(&__dst, v226);
                    sub_2F3DCC((unint64_t *)&__dst, v48);
                    break;
                  case 5:
                    __dst += 4;
                    if (__dst > v226)
                    {
                      unint64_t v173 = __cxa_allocate_exception(0x40uLL);
                      sub_5E5C(v212, "Skipping over bytes exceeded message length.");
                      unint64_t v174 = (void *)sub_2F404((uint64_t)v173, (long long *)v212);
                    }
                    return result;
                  default:
                    int8x16_t v171 = __cxa_allocate_exception(0x40uLL);
                    sub_5E5C(v212, "Unknown wire type.");
                    unint64_t v172 = (void *)sub_2F404((uint64_t)v171, (long long *)v212);
                }
                if (!sub_2F333C((uint64_t)&__dst)) {
                  goto LABEL_234;
                }
              }
              unsigned int v49 = sub_2F36C8(&__dst, v226);
              size_t v50 = v49;
              BOOL v51 = __dst;
              __dst += v49;
              if (__dst > v226)
              {
                unsigned int v185 = __cxa_allocate_exception(0x40uLL);
                sub_5E5C(v212, "Sub-message length of field exceeded past the end of the message.");
                uint64_t v186 = (void *)sub_2F404((uint64_t)v185, (long long *)v212);
              }
              if (v49 >= 0x17) {
                break;
              }
              HIBYTE(v207) = v49;
              uint64_t v52 = &v205;
              if (v49) {
                goto LABEL_142;
              }
LABEL_143:
              v52[v50] = 0;
              if (v207 >= 0) {
                char v55 = (char *)&v205;
              }
              else {
                char v55 = (char *)v205;
              }
              if (v207 >= 0) {
                unint64_t v56 = HIBYTE(v207);
              }
              else {
                unint64_t v56 = v206;
              }
              int v57 = &v55[v56];
              if (v56)
              {
                unint64_t v58 = v56;
                int v59 = v55;
                while (1)
                {
                  __darwin_ct_rune_t v60 = *v59;
                  if (!(v60 < 0 ? __maskrune(v60, 0x4000uLL) : _DefaultRuneLocale.__runetype[v60] & 0x4000)) {
                    break;
                  }
                  ++v59;
                  if (!--v58)
                  {
                    int v59 = &v55[v56];
                    break;
                  }
                }
              }
              else
              {
                int v59 = v55;
              }
              unint64_t v62 = v59 - v55;
              if (v59 - v55 >= v56) {
                unint64_t v62 = v56;
              }
              uint64_t v63 = &v55[v62];
              unint64_t v64 = v56 - v62;
              int v65 = v57 + 1;
              unint64_t v66 = v62 - v56;
              while (v66)
              {
                __darwin_ct_rune_t v68 = *(v65 - 2);
                if (v68 < 0) {
                  __uint32_t v67 = __maskrune(v68, 0x4000uLL);
                }
                else {
                  __uint32_t v67 = _DefaultRuneLocale.__runetype[v68] & 0x4000;
                }
                --v65;
                ++v66;
                if (!v67) {
                  goto LABEL_167;
                }
              }
              int v65 = v63;
LABEL_167:
              unint64_t v69 = v57 - v65;
              if (v64 >= v57 - v65) {
                size_t v70 = v64 - (v57 - v65);
              }
              else {
                size_t v70 = 0;
              }
              if (v70 > 0x7FFFFFFFFFFFFFF7) {
                sub_188D690();
              }
              if (v70 >= 0x17)
              {
                uint64_t v74 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v70 | 7) != 0x17) {
                  uint64_t v74 = v70 | 7;
                }
                uint64_t v75 = v74 + 1;
                unint64_t v71 = operator new(v74 + 1);
                __p[1] = (void *)v70;
                int64_t v195 = v75 | 0x8000000000000000;
                __p[0] = v71;
              }
              else
              {
                HIBYTE(v195) = v70;
                unint64_t v71 = __p;
                if (v64 <= v69)
                {
                  *((unsigned char *)__p + v70) = 0;
                  if ((SHIBYTE(v207) & 0x80000000) == 0) {
                    goto LABEL_174;
                  }
                  goto LABEL_180;
                }
              }
              memmove(v71, v63, v70);
              *((unsigned char *)v71 + v70) = 0;
              if ((SHIBYTE(v207) & 0x80000000) == 0)
              {
LABEL_174:
                uint64_t v72 = *(void *)(a1 + 20544);
                uint64_t v73 = *(void *)(a1 + 20552);
                if (v72 != v73) {
                  goto LABEL_181;
                }
                goto LABEL_198;
              }
LABEL_180:
              operator delete(v205);
              uint64_t v72 = *(void *)(a1 + 20544);
              uint64_t v73 = *(void *)(a1 + 20552);
              if (v72 != v73)
              {
LABEL_181:
                if (v195 >= 0) {
                  unint64_t v76 = (void *)HIBYTE(v195);
                }
                else {
                  unint64_t v76 = __p[1];
                }
                if (v195 >= 0) {
                  std::string::size_type v77 = __p;
                }
                else {
                  std::string::size_type v77 = (void **)__p[0];
                }
                while (1)
                {
                  uint64_t v78 = *(unsigned __int8 *)(v72 + 23);
                  if ((v78 & 0x80u) == 0) {
                    uint64_t v79 = (void *)*(unsigned __int8 *)(v72 + 23);
                  }
                  else {
                    uint64_t v79 = *(void **)(v72 + 8);
                  }
                  if (v79 == v76)
                  {
                    if ((v78 & 0x80) != 0)
                    {
                      if (!memcmp(*(const void **)v72, v77, *(void *)(v72 + 8))) {
                        break;
                      }
                    }
                    else
                    {
                      if (!*(unsigned char *)(v72 + 23)) {
                        break;
                      }
                      uint64_t v80 = 0;
                      while (*(unsigned __int8 *)(v72 + v80) == *((unsigned __int8 *)v77 + v80))
                      {
                        if (v78 == ++v80) {
                          goto LABEL_198;
                        }
                      }
                    }
                  }
                  v72 += 24;
                  if (v72 == v73) {
                    goto LABEL_201;
                  }
                }
              }
LABEL_198:
              if (v72 != v73) {
                goto LABEL_199;
              }
LABEL_201:
              long long v81 = sub_345948();
              int v82 = sub_345A64((uint64_t)v81, (long long *)__p);
              if (v82 == -1)
              {
                if (sub_723EC(3u))
                {
                  sub_6BAC((uint64_t)v212);
                  uint64_t v89 = sub_188FC78(v212, (uint64_t)"Could not get a valid branch_id for branch ", 43);
                  if (v195 >= 0) {
                    uint64_t v90 = __p;
                  }
                  else {
                    uint64_t v90 = (void **)__p[0];
                  }
                  if (v195 >= 0) {
                    uint64_t v91 = HIBYTE(v195);
                  }
                  else {
                    uint64_t v91 = (uint64_t)__p[1];
                  }
                  sub_188FC78(v89, (uint64_t)v90, v91);
                  std::stringbuf::str();
                  sub_7246C((uint64_t *)&v205, 3u);
                  if (SHIBYTE(v207) < 0) {
                    operator delete(v205);
                  }
                  *(void *)unint64_t v212 = v192;
                  *(void *)&v212[*(void *)(v192 - 24)] = v191;
                  if (v219 < 0) {
                    operator delete(v217);
                  }
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  std::ios::~ios();
                }
                goto LABEL_199;
              }
              *(_DWORD *)*a4 |= 1 << v82;
              sub_31F328(a1, (uint64_t)&v208, v82, (uint64_t)v212);
              sub_3555F0(&v210, a1, v188, *(unsigned __int8 *)(a1 + 20593), v189, (uint64_t)v212);
              uint64_t v83 = *a4;
              int v84 = *(_DWORD *)(*a4 + 508);
              int v85 = v215;
              if (v84 == 0x7FFFFFFF || v84 > v215) {
                *(_DWORD *)(v83 + 508) = v215;
              }
              int v86 = *(_DWORD *)(v83 + 512);
              if (v86 == 0x7FFFFFFF || v86 < v85) {
                *(_DWORD *)(v83 + 512) = v85;
              }
              unint64_t v87 = *(void *)(v83 + 576);
              if (v87 >= *(void *)(v83 + 584))
              {
                uint64_t v88 = sub_329B74((int64x2_t *)(v83 + 568), (long long *)v212);
              }
              else
              {
                sub_329D98(*(char **)(v83 + 576), (long long *)v212);
                uint64_t v88 = v87 + 144;
                *(void *)(v83 + 576) = v87 + 144;
              }
              *(void *)(v83 + 576) = v88;
              if (v221)
              {
                unint64_t v222 = v221;
                operator delete(v221);
              }
              if (v220 < 0)
              {
                operator delete(v218);
                if ((SHIBYTE(v217) & 0x80000000) == 0)
                {
LABEL_227:
                  if ((v214 & 0x80000000) == 0) {
                    goto LABEL_228;
                  }
                  goto LABEL_232;
                }
              }
              else if ((SHIBYTE(v217) & 0x80000000) == 0)
              {
                goto LABEL_227;
              }
              operator delete(v216);
              if ((v214 & 0x80000000) == 0)
              {
LABEL_228:
                if ((v212[23] & 0x80000000) != 0) {
                  goto LABEL_233;
                }
                goto LABEL_199;
              }
LABEL_232:
              operator delete(v213);
              if ((v212[23] & 0x80000000) != 0) {
LABEL_233:
              }
                operator delete(*(void **)v212);
LABEL_199:
              if (SHIBYTE(v195) < 0) {
                operator delete(__p[0]);
              }
            }
            uint64_t v53 = (v49 & 0xFFFFFFF8) + 8;
            if ((v49 | 7) != 0x17) {
              uint64_t v53 = v49 | 7;
            }
            uint64_t v54 = v53 + 1;
            uint64_t v52 = operator new(v53 + 1);
            size_t v206 = v50;
            int64_t v207 = v54 | 0x8000000000000000;
            unsigned int v205 = v52;
LABEL_142:
            memmove(v52, v51, v50);
            goto LABEL_143;
          }
          while (*(_DWORD *)&v212[16] != 9)
          {
            sub_2F3548((uint64_t)v212);
            if (!sub_2F333C((uint64_t)v212)) {
              goto LABEL_122;
            }
          }
          uint64_t v22 = sub_2F3488((char **)v212);
          uint64_t v24 = (char *)v23;
          if (v23 > 0x7FFFFFFFFFFFFFF7) {
            sub_188D690();
          }
          BOOL v25 = v22;
          if (v23 >= 0x17)
          {
            uint64_t v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v23 | 7) != 0x17) {
              uint64_t v27 = v23 | 7;
            }
            uint64_t v28 = v27 + 1;
            p_dst = (char *)operator new(v27 + 1);
            uint64_t v226 = v24;
            int64_t v227 = v28 | 0x8000000000000000;
            std::string __dst = p_dst;
          }
          else
          {
            HIBYTE(v227) = v23;
            p_dst = (char *)&__dst;
            if (!v23)
            {
LABEL_74:
              v24[(void)p_dst] = 0;
              char v29 = HIBYTE(v227);
              if (v227 >= 0) {
                float v30 = &__dst;
              }
              else {
                float v30 = (char **)__dst;
              }
              if (v227 >= 0) {
                unint64_t v31 = HIBYTE(v227);
              }
              else {
                unint64_t v31 = (unint64_t)v226;
              }
              if (v31 > 0x7FFFFFFFFFFFFFF7) {
                sub_188D690();
              }
              if (v31 >= 0x17)
              {
                uint64_t v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17) {
                  uint64_t v33 = v31 | 7;
                }
                uint64_t v34 = v33 + 1;
                std::string v32 = operator new(v33 + 1);
                __p[1] = (void *)v31;
                int64_t v195 = v34 | 0x8000000000000000;
                __p[0] = v32;
              }
              else
              {
                HIBYTE(v195) = v31;
                if (!v31)
                {
                  LOBYTE(__p[0]) = 0;
                  goto LABEL_101;
                }
                std::string v32 = __p;
              }
              if (v31 < 0x20 || (unint64_t)((char *)v32 - (char *)v30) < 0x20)
              {
                unint64_t v35 = v30;
                uint64_t v36 = v32;
              }
              else
              {
                unint64_t v35 = (char **)((char *)v30 + (v31 & 0xFFFFFFFFFFFFFFE0));
                uint64_t v36 = (char *)v32 + (v31 & 0xFFFFFFFFFFFFFFE0);
                std::string v37 = v32 + 1;
                uint64_t v38 = (long long *)(v30 + 2);
                unint64_t v39 = v31 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v40 = *v38;
                  *(v37 - 1) = *(v38 - 1);
                  _OWORD *v37 = v40;
                  v37 += 2;
                  v38 += 2;
                  v39 -= 32;
                }
                while (v39);
                if (v31 == (v31 & 0x7FFFFFFFFFFFFFE0))
                {
LABEL_95:
                  unsigned char *v36 = 0;
                  if (v195 >= 0) {
                    unint64_t v42 = __p;
                  }
                  else {
                    unint64_t v42 = (void **)__p[0];
                  }
                  do
                  {
                    *(unsigned char *)unint64_t v42 = __tolower(*(char *)v30);
                    unint64_t v42 = (void **)((char *)v42 + 1);
                    float v30 = (char **)((char *)v30 + 1);
                    --v31;
                  }
                  while (v31);
                  char v29 = HIBYTE(v227);
LABEL_101:
                  if (v29 < 0) {
                    operator delete(__dst);
                  }
                  if (*(char *)(a1 + 20591) < 0) {
                    unint64_t v43 = *(void *)(a1 + 20576);
                  }
                  else {
                    unint64_t v43 = *(unsigned __int8 *)(a1 + 20591);
                  }
                  if (v43 < 4) {
                    goto LABEL_118;
                  }
                  unint64_t v44 = v195 >= 0 ? (void *)HIBYTE(v195) : __p[1];
                  if ((unint64_t)v44 < 4) {
                    goto LABEL_118;
                  }
                  uint64_t v45 = a1 + 20568;
                  if ((*(unsigned char *)(a1 + 20591) & 0x80) != 0) {
                    uint64_t v45 = *(void *)v189;
                  }
                  if (*(unsigned char *)(v45 + 3) != 97) {
                    goto LABEL_118;
                  }
                  char v46 = __p;
                  if (v195 < 0) {
                    char v46 = (void **)__p[0];
                  }
                  if (*((unsigned char *)v46 + 3) == 98) {
                    int v47 = 0;
                  }
                  else {
LABEL_118:
                  }
                    int v47 = 1;
                  if (v195 < 0) {
                    operator delete(__p[0]);
                  }
                  if (!v47) {
                    goto LABEL_279;
                  }
                  goto LABEL_122;
                }
              }
              do
              {
                char v41 = *(unsigned char *)v35;
                unint64_t v35 = (char **)((char *)v35 + 1);
                *v36++ = v41;
              }
              while (v35 != (char **)((char *)v30 + v31));
              goto LABEL_95;
            }
          }
          memmove(p_dst, v25, (size_t)v24);
          goto LABEL_74;
        }
      }
      else
      {
LABEL_53:
        int64x2_t v208 = 0;
        uint64_t v209 = 0;
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v212);
        sub_188FC78(v212, (uint64_t)"Could not find the SnapshotMetaData message.", 44);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 3u);
        if (SHIBYTE(v195) < 0) {
          operator delete(__p[0]);
        }
        *(void *)unint64_t v212 = v192;
        *(void *)&v212[*(void *)(v192 - 24)] = v191;
        if (v219 < 0) {
          operator delete(v217);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      continue;
    }
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v212);
    sub_188FC78(v212, (uint64_t)"Got an empty traffic snapshot.", 30);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 1u);
    if (SHIBYTE(v195) < 0) {
      operator delete(__p[0]);
    }
    if (v219 < 0) {
      operator delete(v217);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  char v14 = operator new(0x2D0uLL);
  v14[1] = 0;
  _OWORD v14[2] = 0;
  void *v14 = off_2438A10;
  uint64_t result = sub_328A0C((uint64_t)(v14 + 3));
  *a4 = result;
  a4[1] = (uint64_t)v14;
  *((_OWORD *)a4 + 1) = 0u;
  *((_OWORD *)a4 + 2) = 0u;
  *((_DWORD *)a4 + 12) = 1065353216;
  *((unsigned char *)a4 + 56) = 0;
  *((_OWORD *)a4 + 4) = 0u;
  *((_OWORD *)a4 + 5) = 0u;
  *((_OWORD *)a4 + 6) = 0u;
  *((_OWORD *)a4 + 7) = 0u;
  *((_OWORD *)a4 + 8) = 0u;
  *((_OWORD *)a4 + 9) = 0u;
  *((_OWORD *)a4 + 10) = 0u;
  *((_OWORD *)a4 + 11) = 0u;
  *((_OWORD *)a4 + 12) = 0u;
  *((_OWORD *)a4 + 13) = 0u;
  *((_OWORD *)a4 + 14) = 0u;
  *(_OWORD *)((char *)a4 + 236) = 0u;
  *((_OWORD *)a4 + 17) = 0u;
  *((_OWORD *)a4 + 18) = 0u;
  *((_OWORD *)a4 + 16) = 0u;
  return result;
}

void sub_31E91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a51);
  if (a25 < 0) {
    operator delete(a20);
  }
  sub_323F08(v56);
  if (a2 == 2)
  {
    __darwin_ct_rune_t v60 = __cxa_begin_catch(a1);
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&a51);
      long long v61 = sub_188FC78(&a51, (uint64_t)"Exception caught while trying to parse a snapshot: ", 51);
      unint64_t v62 = (const char *)sub_2F524((uint64_t)v60);
      size_t v63 = strlen(v62);
      unint64_t v64 = sub_188FC78(v61, (uint64_t)v62, v63);
      int v65 = sub_188FC78(v64, (uint64_t)"\n", 1);
      unint64_t v66 = (const char *)sub_2F540((uint64_t)v60);
      size_t v67 = strlen(v66);
      sub_188FC78(v65, (uint64_t)v66, v67);
      std::stringbuf::str();
      sub_7246C((uint64_t *)(v57 - 160), 3u);
      if (*(char *)(v57 - 137) < 0) {
        operator delete(*(void **)(v57 - 160));
      }
      sub_111ECAC((uint64_t)&a51);
    }
  }
  else
  {
    if (a2 != 1) {
      _Unwind_Resume(a1);
    }
    __darwin_ct_rune_t v68 = __cxa_begin_catch(a1);
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&a51);
      unint64_t v69 = sub_188FC78(&a51, (uint64_t)"Exception caught while trying to parse a snapshot: ", 51);
      size_t v70 = (const char *)(*(uint64_t (**)(void *))(*(void *)v68 + 16))(v68);
      size_t v71 = strlen(v70);
      sub_188FC78(v69, (uint64_t)v70, v71);
      std::stringbuf::str();
      sub_7246C((uint64_t *)(v57 - 160), 3u);
      if (*(char *)(v57 - 137) < 0) {
        operator delete(*(void **)(v57 - 160));
      }
      sub_111ECAC((uint64_t)&a51);
    }
  }
  sub_31EEC8((uint64_t)v56);
  __cxa_end_catch();
  JUMPOUT(0x31E2BCLL);
}

uint64_t sub_31EEC8(uint64_t a1)
{
  uint64_t v2 = operator new(0x2D0uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = off_2438A10;
  *(void *)a1 = sub_328A0C((uint64_t)(v2 + 3));
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(unsigned char *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  return a1;
}

void sub_31EF58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_31EF70(char **a1@<X1>, uint64_t a2@<X8>)
{
  v33[0] = 0;
  v33[1] = 0;
  int64_t v34 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v32 = 0;
  char v3 = &a1[1][(void)*a1];
  v29[0] = *a1;
  v29[1] = v3;
  uint64_t v30 = 0x2C700000000;
LABEL_3:
  while (sub_2F333C((uint64_t)v29))
  {
    if (v30 == 6)
    {
      uint64_t v8 = sub_2F3488(v29);
      size_t v10 = v9;
      if (v9 > 0x7FFFFFFFFFFFFFF7) {
        sub_188D690();
      }
      unsigned int v11 = v8;
      if (v9 >= 0x17)
      {
        uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v9 | 7) != 0x17) {
          uint64_t v13 = v9 | 7;
        }
        uint64_t v14 = v13 + 1;
        p_dst = (long long *)operator new(v13 + 1);
        *((void *)&__dst + 1) = v10;
        unint64_t v40 = v14 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
LABEL_21:
        memmove(p_dst, v11, v10);
        *((unsigned char *)p_dst + v10) = 0;
        if ((SHIBYTE(v32) & 0x80000000) == 0) {
          goto LABEL_17;
        }
        goto LABEL_22;
      }
      HIBYTE(v40) = v9;
      p_dst = &__dst;
      if (v9) {
        goto LABEL_21;
      }
      LOBYTE(__dst) = 0;
      if ((SHIBYTE(v32) & 0x80000000) == 0) {
        goto LABEL_17;
      }
LABEL_22:
      operator delete(__p[0]);
LABEL_17:
      *(_OWORD *)long long __p = __dst;
      unint64_t v32 = v40;
    }
    else
    {
      if (v30 != 12) {
        goto LABEL_2;
      }
      unint64_t v4 = (void *)HIBYTE(v34);
      if (v34 < 0) {
        unint64_t v4 = v33[1];
      }
      if (v4)
      {
LABEL_2:
        sub_2F3548((uint64_t)v29);
      }
      else
      {
        unint64_t v5 = sub_2F3488(v29);
        int8x8_t v7 = &v5[v6];
        *(void *)&long long __dst = v5;
        *((void *)&__dst + 1) = &v5[v6];
        unint64_t v40 = 0x2C700000000;
        if (sub_2F333C((uint64_t)&__dst))
        {
          while (v40 != 1)
          {
            sub_2F3548((uint64_t)&__dst);
            if (!sub_2F333C((uint64_t)&__dst)) {
              goto LABEL_3;
            }
          }
          if (sub_2F39B0((char **)&__dst, *((char **)&__dst + 1)) == 6)
          {
            *(void *)&long long __dst = v5;
            *((void *)&__dst + 1) = v7;
            unint64_t v40 = 0x2C700000000;
            if (sub_2F333C((uint64_t)&__dst))
            {
              while (v40 != 2)
              {
                sub_2F3548((uint64_t)&__dst);
                if (!sub_2F333C((uint64_t)&__dst)) {
                  goto LABEL_3;
                }
              }
              v37[0] = sub_2F3488((char **)&__dst);
              v37[1] = &v37[0][v15];
              uint64_t v38 = 0x2C700000000;
              if (sub_30DA40((uint64_t)v37))
              {
                while (v38 != 6)
                {
                  sub_30DC4C((uint64_t)v37);
                  if (!sub_30DA40((uint64_t)v37)) {
                    goto LABEL_3;
                  }
                }
                char v16 = sub_30DB8C(v37);
                size_t v18 = v17;
                if (v17 > 0x7FFFFFFFFFFFFFF7) {
                  sub_188D690();
                }
                unsigned int v19 = v16;
                if (v17 >= 0x17)
                {
                  uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v17 | 7) != 0x17) {
                    uint64_t v21 = v17 | 7;
                  }
                  uint64_t v22 = v21 + 1;
                  uint64_t v20 = (long long *)operator new(v21 + 1);
                  *((void *)&v35 + 1) = v18;
                  unint64_t v36 = v22 | 0x8000000000000000;
                  *(void *)&long long v35 = v20;
LABEL_39:
                  memmove(v20, v19, v18);
                  goto LABEL_40;
                }
                HIBYTE(v36) = v17;
                uint64_t v20 = &v35;
                if (v17) {
                  goto LABEL_39;
                }
LABEL_40:
                *((unsigned char *)v20 + v18) = 0;
                if (SHIBYTE(v34) < 0) {
                  operator delete(v33[0]);
                }
                *(_OWORD *)uint64_t v33 = v35;
                int64_t v34 = v36;
              }
            }
          }
        }
      }
    }
  }
  char v23 = HIBYTE(v34);
  int v24 = SHIBYTE(v34);
  if (v34 >= 0) {
    BOOL v25 = (void *)HIBYTE(v34);
  }
  else {
    BOOL v25 = v33[1];
  }
  double v26 = v33;
  if (!v25) {
    double v26 = __p;
  }
  int v27 = SHIBYTE(v32);
  if (!v25) {
    char v23 = HIBYTE(v32);
  }
  if (v23 < 0)
  {
    if (v25) {
      uint64_t v28 = v33[1];
    }
    else {
      uint64_t v28 = __p[1];
    }
    sub_4200((unsigned char *)a2, *v26, (unint64_t)v28);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)v26;
    *(void *)(a2 + 16) = v26[2];
  }
  if ((v27 & 0x80000000) == 0)
  {
    if ((v24 & 0x80000000) == 0) {
      return;
    }
LABEL_60:
    operator delete(v33[0]);
    return;
  }
  operator delete(__p[0]);
  if (v24 < 0) {
    goto LABEL_60;
  }
}

void sub_31F2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_31F328(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(void *)(a4 + 48) = 0x8000000080000000;
  *(_OWORD *)(a4 + 56) = 0u;
  unint64_t v127 = (std::string *)(a4 + 56);
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_DWORD *)(a4 + 104) = -1;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  unint64_t v131 = (void **)(a4 + 24);
  uint64_t v132 = (void *)(a4 + 112);
  std::string::assign((std::string *)(a4 + 24), "world");
  uint64_t v7 = *(void *)(a2 + 8);
  long long v147 = *(char **)a2;
  unint64_t v148 = &v147[v7];
  uint64_t v149 = 0x2C700000000;
  HIBYTE(v146) = 0;
  unint64_t v130 = (void **)(a4 + 80);
  int v129 = 0x7FFFFFFF;
  LOBYTE(__p) = 0;
LABEL_3:
  while (sub_2F333C((uint64_t)&v147))
  {
    switch((int)v149)
    {
      case 1:
        int v8 = sub_2F6A18(&v147, v148);
        *(_DWORD *)(a4 + 48) = v8;
        sub_48A0((_DWORD *)(a1 + 20424), v8);
        continue;
      case 2:
        uint64_t v14 = sub_2F3488(&v147);
        size_t v16 = v15;
        if (v15 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        unint64_t v17 = v14;
        if (v15 >= 0x17)
        {
          uint64_t v60 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v15 | 7) != 0x17) {
            uint64_t v60 = v15 | 7;
          }
          uint64_t v61 = v60 + 1;
          size_t v18 = operator new(v60 + 1);
          *(void *)&__dst[8] = v16;
          *(void *)&__dst[16] = v61 | 0x8000000000000000;
          *(void *)long long __dst = v18;
LABEL_96:
          memmove(v18, v17, v16);
          v18[v16] = 0;
          if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
            goto LABEL_15;
          }
          goto LABEL_97;
        }
        __dst[23] = v15;
        size_t v18 = __dst;
        if (v15) {
          goto LABEL_96;
        }
        __dst[0] = 0;
        if ((*(char *)(a4 + 23) & 0x80000000) == 0) {
          goto LABEL_15;
        }
LABEL_97:
        operator delete(*(void **)a4);
LABEL_15:
        *(_OWORD *)a4 = *(_OWORD *)__dst;
        *(void *)(a4 + 16) = *(void *)&__dst[16];
        continue;
      case 3:
        unsigned int v19 = sub_2F3488(&v147);
        uint64_t v21 = (void *)v20;
        if (v20 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        uint64_t v22 = v19;
        if (v20 >= 0x17)
        {
          uint64_t v62 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17) {
            uint64_t v62 = v20 | 7;
          }
          uint64_t v63 = v62 + 1;
          char v23 = operator new(v62 + 1);
          v139[1] = v21;
          v140[0] = (void *)(v63 | 0x8000000000000000);
          v139[0] = v23;
        }
        else
        {
          HIBYTE(v140[0]) = v20;
          char v23 = v139;
          if (!v20) {
            goto LABEL_102;
          }
        }
        memmove(v23, v22, (size_t)v21);
LABEL_102:
        *((unsigned char *)v21 + (void)v23) = 0;
        if (SHIBYTE(v140[0]) >= 0) {
          unint64_t v64 = v139;
        }
        else {
          unint64_t v64 = (void **)v139[0];
        }
        if (SHIBYTE(v140[0]) >= 0) {
          unint64_t v65 = HIBYTE(v140[0]);
        }
        else {
          unint64_t v65 = (unint64_t)v139[1];
        }
        if (v65 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        if (v65 < 0x17)
        {
          __dst[23] = v65;
          if (!v65)
          {
            __dst[0] = 0;
            if (*(char *)(a4 + 47) < 0) {
              goto LABEL_132;
            }
            goto LABEL_133;
          }
          unint64_t v66 = __dst;
LABEL_125:
          size_t v71 = v64;
          uint64_t v72 = v66;
          do
          {
LABEL_126:
            char v77 = *(unsigned char *)v71;
            size_t v71 = (void **)((char *)v71 + 1);
            *v72++ = v77;
          }
          while (v71 != (void **)((char *)v64 + v65));
          goto LABEL_127;
        }
        uint64_t v69 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v65 | 7) != 0x17) {
          uint64_t v69 = v65 | 7;
        }
        uint64_t v70 = v69 + 1;
        unint64_t v66 = operator new(v69 + 1);
        *(void *)&__dst[8] = v65;
        *(void *)&__dst[16] = v70 | 0x8000000000000000;
        *(void *)long long __dst = v66;
        if (v65 < 0x20 || (unint64_t)(v66 - (unsigned char *)v64) < 0x20) {
          goto LABEL_125;
        }
        size_t v71 = (void **)((char *)v64 + (v65 & 0xFFFFFFFFFFFFFFE0));
        uint64_t v72 = &v66[v65 & 0xFFFFFFFFFFFFFFE0];
        uint64_t v73 = v66 + 16;
        uint64_t v74 = (long long *)(v64 + 2);
        unint64_t v75 = v65 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v76 = *v74;
          *(v73 - 1) = *(v74 - 1);
          *uint64_t v73 = v76;
          v73 += 2;
          v74 += 2;
          v75 -= 32;
        }
        while (v75);
        if (v65 != (v65 & 0x7FFFFFFFFFFFFFE0)) {
          goto LABEL_126;
        }
LABEL_127:
        *uint64_t v72 = 0;
        if (__dst[23] >= 0) {
          uint64_t v78 = __dst;
        }
        else {
          uint64_t v78 = *(unsigned char **)__dst;
        }
        do
        {
          *v78++ = __tolower(*(char *)v64);
          unint64_t v64 = (void **)((char *)v64 + 1);
          --v65;
        }
        while (v65);
        if (*(char *)(a4 + 47) < 0) {
LABEL_132:
        }
          operator delete(*v131);
LABEL_133:
        *(_OWORD *)unint64_t v131 = *(_OWORD *)__dst;
        v131[2] = *(void **)&__dst[16];
        if (SHIBYTE(v140[0]) < 0) {
          operator delete(v139[0]);
        }
        break;
      case 8:
        uint64_t v150 = (long long *)sub_2F3488(&v147);
        long long v151 = (char *)v150 + v24;
        uint64_t v152 = 0x2C700000000;
        while (sub_30DA40((uint64_t)&v150))
        {
          while (v152 == 4)
          {
            v139[0] = sub_30DB8C((char **)&v150);
            v139[1] = (char *)v139[0] + v25;
            v140[0] = (void *)0x2C700000000;
            *(_OWORD *)unsigned int v153 = xmmword_20B8E30;
            *(void *)&v153[16] = 0x7FFFFFFFFFFFFFFFLL;
            while (sub_30DA40((uint64_t)v139))
            {
              switch(LODWORD(v140[0]))
              {
                case 1:
                  double v26 = *(double *)v139[0];
                  v139[0] = (char *)v139[0] + 8;
                  if (v139[0] > v139[1])
                  {
                    exception = __cxa_allocate_exception(0x40uLL);
                    *(void *)long long __dst = operator new(0x30uLL);
                    *(_OWORD *)&__dst[8] = xmmword_20E1380;
                    strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                    uint64_t v108 = (void *)sub_2F404((uint64_t)exception, (long long *)__dst);
                  }
                  double v27 = fmax(v26, -85.0511288);
                  if (v27 >= 85.0511288) {
                    double v28 = 1.48442223;
                  }
                  else {
                    double v28 = v27 * 3.14159265 / 180.0;
                  }
                  long double v29 = sin(v28);
                  unsigned int v30 = ((log((v29 + 1.0) / (1.0 - v29)) / -12.5663706 + 0.5) * 4294967300.0);
                  if (v30 >= 0xFFFFFFFE) {
                    unsigned int v30 = -2;
                  }
                  *(_DWORD *)&v153[4] = v30;
                  break;
                case 2:
                  double v37 = *(double *)v139[0];
                  v139[0] = (char *)v139[0] + 8;
                  if (v139[0] > v139[1])
                  {
                    uint64_t v109 = __cxa_allocate_exception(0x40uLL);
                    *(void *)long long __dst = operator new(0x30uLL);
                    *(_OWORD *)&__dst[8] = xmmword_20E1380;
                    strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                    uint64_t v110 = (void *)sub_2F404((uint64_t)v109, (long long *)__dst);
                  }
                  *(_DWORD *)unsigned int v153 = ((v37 + 180.0) / 360.0 * 4294967300.0);
                  break;
                case 3:
                  double v31 = *(double *)v139[0];
                  v139[0] = (char *)v139[0] + 8;
                  if (v139[0] > v139[1])
                  {
                    uint64_t v103 = __cxa_allocate_exception(0x40uLL);
                    *(void *)long long __dst = operator new(0x30uLL);
                    *(_OWORD *)&__dst[8] = xmmword_20E1380;
                    strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                    char v104 = (void *)sub_2F404((uint64_t)v103, (long long *)__dst);
                  }
                  double v32 = fmax(v31, -85.0511288);
                  if (v32 >= 85.0511288) {
                    double v33 = 1.48442223;
                  }
                  else {
                    double v33 = v32 * 3.14159265 / 180.0;
                  }
                  long double v34 = sin(v33);
                  unsigned int v35 = ((log((v34 + 1.0) / (1.0 - v34)) / -12.5663706 + 0.5) * 4294967300.0);
                  if (v35 >= 0xFFFFFFFE) {
                    unsigned int v35 = -2;
                  }
                  *(_DWORD *)&v153[16] = v35;
                  break;
                case 4:
                  double v36 = *(double *)v139[0];
                  v139[0] = (char *)v139[0] + 8;
                  if (v139[0] > v139[1])
                  {
                    uint64_t v105 = __cxa_allocate_exception(0x40uLL);
                    *(void *)long long __dst = operator new(0x30uLL);
                    *(_OWORD *)&__dst[8] = xmmword_20E1380;
                    strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                    uint64_t v106 = (void *)sub_2F404((uint64_t)v105, (long long *)__dst);
                  }
                  *(_DWORD *)&v153[12] = ((v36 + 180.0) / 360.0 * 4294967300.0);
                  break;
                default:
                  switch(HIDWORD(v140[0]))
                  {
                    case 0:
                      sub_2F3C98((uint64_t *)v139, (uint64_t)v139[1]);
                      break;
                    case 1:
                      v139[0] = (char *)v139[0] + 8;
                      if (v139[0] > v139[1])
                      {
                        long long v113 = __cxa_allocate_exception(0x40uLL);
                        *(void *)long long __dst = operator new(0x30uLL);
                        *(_OWORD *)&__dst[8] = xmmword_20E1380;
                        strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                        unint64_t v114 = (void *)sub_2F404((uint64_t)v113, (long long *)__dst);
                      }
                      return;
                    case 2:
                      unsigned int v38 = sub_2F36C8((char **)v139, (char *)v139[1]);
                      v139[0] = (char *)v139[0] + v38;
                      if (v139[0] > v139[1])
                      {
                        unint64_t v111 = __cxa_allocate_exception(0x40uLL);
                        *(void *)long long __dst = operator new(0x30uLL);
                        *(_OWORD *)&__dst[8] = xmmword_20E1380;
                        strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                        int64_t v112 = (void *)sub_2F404((uint64_t)v111, (long long *)__dst);
                      }
                      return;
                    case 5:
                      v139[0] = (char *)v139[0] + 4;
                      if (v139[0] > v139[1])
                      {
                        uint64_t v115 = __cxa_allocate_exception(0x40uLL);
                        *(void *)long long __dst = operator new(0x30uLL);
                        *(_OWORD *)&__dst[8] = xmmword_20E1380;
                        strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                        unint64_t v116 = (void *)sub_2F404((uint64_t)v115, (long long *)__dst);
                      }
                      return;
                    default:
                      uint64_t v117 = __cxa_allocate_exception(0x40uLL);
                      __dst[23] = 18;
                      strcpy(__dst, "Unknown wire type.");
                      unint64_t v118 = (void *)sub_2F404((uint64_t)v117, (long long *)__dst);
                  }
                  return;
              }
            }
            if (sub_344C4(v153))
            {
              unint64_t v40 = *(char **)(a4 + 120);
              unint64_t v39 = *(void *)(a4 + 128);
              if ((unint64_t)v40 >= v39)
              {
                unint64_t v44 = (char *)*v132;
                unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v40[-*v132] >> 3);
                unint64_t v46 = v45 + 1;
                if (v45 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  sub_2E00();
                }
                unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (void)v44) >> 3);
                if (2 * v47 > v46) {
                  unint64_t v46 = 2 * v47;
                }
                if (v47 >= 0x555555555555555) {
                  unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v48 = v46;
                }
                if (v48)
                {
                  if (v48 > 0xAAAAAAAAAAAAAAALL) {
                    sub_188D718();
                  }
                  unsigned int v49 = (char *)operator new(24 * v48);
                }
                else
                {
                  unsigned int v49 = 0;
                }
                size_t v50 = &v49[24 * v45];
                *(_OWORD *)size_t v50 = *(_OWORD *)v153;
                *((void *)v50 + 2) = *(void *)&v153[16];
                BOOL v51 = v50;
                if (v40 != v44)
                {
                  do
                  {
                    long long v52 = *(_OWORD *)(v40 - 24);
                    *((void *)v51 - 1) = *((void *)v40 - 1);
                    *(_OWORD *)(v51 - 24) = v52;
                    v51 -= 24;
                    v40 -= 24;
                  }
                  while (v40 != v44);
                  unint64_t v40 = (char *)*v132;
                }
                unint64_t v42 = v50 + 24;
                *(void *)(a4 + 112) = v51;
                *(void *)(a4 + 120) = v50 + 24;
                *(void *)(a4 + 128) = &v49[24 * v48];
                if (v40) {
                  operator delete(v40);
                }
              }
              else
              {
                long long v41 = *(_OWORD *)v153;
                *((void *)v40 + 2) = *(void *)&v153[16];
                *(_OWORD *)unint64_t v40 = v41;
                unint64_t v42 = v40 + 24;
              }
              *(void *)(a4 + 120) = v42;
            }
            if (!sub_30DA40((uint64_t)&v150)) {
              goto LABEL_3;
            }
          }
          switch(HIDWORD(v152))
          {
            case 0:
              sub_2F3C98((uint64_t *)&v150, (uint64_t)v151);
              break;
            case 1:
              uint64_t v150 = (long long *)((char *)v150 + 8);
              if (v150 > (long long *)v151)
              {
                uint64_t v123 = __cxa_allocate_exception(0x40uLL);
                *(void *)long long __dst = operator new(0x30uLL);
                *(_OWORD *)&__dst[8] = xmmword_20E1380;
                strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                int v124 = (void *)sub_2F404((uint64_t)v123, (long long *)__dst);
              }
              return;
            case 2:
              unsigned int v43 = sub_2F36C8((char **)&v150, v151);
              uint64_t v150 = (long long *)((char *)v150 + v43);
              if (v150 > (long long *)v151)
              {
                unint64_t v125 = __cxa_allocate_exception(0x40uLL);
                *(void *)long long __dst = operator new(0x30uLL);
                *(_OWORD *)&__dst[8] = xmmword_20E1380;
                strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                uint64_t v126 = (void *)sub_2F404((uint64_t)v125, (long long *)__dst);
              }
              return;
            case 5:
              uint64_t v150 = (long long *)((char *)v150 + 4);
              if (v150 > (long long *)v151)
              {
                long long v121 = __cxa_allocate_exception(0x40uLL);
                *(void *)long long __dst = operator new(0x30uLL);
                *(_OWORD *)&__dst[8] = xmmword_20E1380;
                strcpy(*(char **)__dst, "Skipping over bytes exceeded message length.");
                unint64_t v122 = (void *)sub_2F404((uint64_t)v121, (long long *)__dst);
              }
              return;
            default:
              uint64_t v119 = __cxa_allocate_exception(0x40uLL);
              __dst[23] = 18;
              strcpy(__dst, "Unknown wire type.");
              uint64_t v120 = (void *)sub_2F404((uint64_t)v119, (long long *)__dst);
          }
        }
        continue;
      case 9:
        uint64_t v53 = sub_2F3488(&v147);
        size_t v55 = v54;
        if (v54 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        unint64_t v56 = v53;
        if (v54 >= 0x17)
        {
          uint64_t v67 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v54 | 7) != 0x17) {
            uint64_t v67 = v54 | 7;
          }
          uint64_t v68 = v67 + 1;
          uint64_t v57 = operator new(v67 + 1);
          *(void *)&__dst[8] = v55;
          *(void *)&__dst[16] = v68 | 0x8000000000000000;
          *(void *)long long __dst = v57;
        }
        else
        {
          __dst[23] = v54;
          uint64_t v57 = __dst;
          if (!v54)
          {
            __dst[0] = 0;
            if ((*(char *)(a4 + 103) & 0x80000000) == 0) {
              goto LABEL_87;
            }
            goto LABEL_116;
          }
        }
        memmove(v57, v56, v55);
        v57[v55] = 0;
        if ((*(char *)(a4 + 103) & 0x80000000) == 0) {
          goto LABEL_87;
        }
LABEL_116:
        operator delete(*v130);
LABEL_87:
        *(_OWORD *)unint64_t v130 = *(_OWORD *)__dst;
        *(void *)(a4 + 96) = *(void *)&__dst[16];
        continue;
      case 10:
        unint64_t v9 = sub_2F3488(&v147);
        size_t v11 = v10;
        if (v10 > 0x7FFFFFFFFFFFFFF7) {
          sub_188D690();
        }
        unsigned int v12 = v9;
        if (v10 >= 0x17)
        {
          uint64_t v58 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17) {
            uint64_t v58 = v10 | 7;
          }
          uint64_t v59 = v58 + 1;
          uint64_t v13 = operator new(v58 + 1);
          *(void *)&__dst[8] = v11;
          *(void *)&__dst[16] = v59 | 0x8000000000000000;
          *(void *)long long __dst = v13;
        }
        else
        {
          __dst[23] = v10;
          uint64_t v13 = __dst;
          if (!v10)
          {
            __dst[0] = 0;
            if ((SHIBYTE(v146) & 0x80000000) == 0) {
              goto LABEL_10;
            }
            goto LABEL_92;
          }
        }
        memmove(v13, v12, v11);
        v13[v11] = 0;
        if ((SHIBYTE(v146) & 0x80000000) == 0) {
          goto LABEL_10;
        }
LABEL_92:
        operator delete((void *)__p);
LABEL_10:
        long long __p = *(_OWORD *)__dst;
        uint64_t v146 = *(void *)&__dst[16];
        continue;
      case 11:
        int v129 = sub_2F36C8(&v147, v148);
        continue;
      default:
        sub_2F3548((uint64_t)&v147);
        continue;
    }
  }
  int v79 = v129;
  *(_DWORD *)(a4 + 52) = *(_DWORD *)(a4 + 48) + v129;
  *(_DWORD *)(a4 + 104) = a3;
  sub_31EF70((char **)a2, (uint64_t)__dst);
  if (*(char *)(a4 + 79) < 0) {
    operator delete(v127->__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v127->__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
  v127->__r_.__value_.__r.__words[2] = *(void *)&__dst[16];
  uint64_t v80 = HIBYTE(v146);
  if (v146 < 0) {
    uint64_t v80 = *((void *)&__p + 1);
  }
  if (v80)
  {
    std::operator+<char>();
    long long v81 = __dst[23] >= 0 ? __dst : *(const std::string::value_type **)__dst;
    std::string::size_type v82 = __dst[23] >= 0 ? __dst[23] : *(void *)&__dst[8];
    std::string::append(v127, v81, v82);
    if ((__dst[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__dst);
      int v83 = *(char *)(a4 + 47);
      if (v83 < 0) {
        goto LABEL_153;
      }
LABEL_150:
      if (v83 != 5) {
        goto LABEL_162;
      }
LABEL_155:
      if (*(_DWORD *)v131 != 1819438967 || *((unsigned char *)v131 + 4) != 100) {
        goto LABEL_162;
      }
      sub_33E90((uint64_t)__dst);
      int v86 = *(char **)(a4 + 120);
      unint64_t v85 = *(void *)(a4 + 128);
      if ((unint64_t)v86 < v85)
      {
        long long v87 = *(_OWORD *)__dst;
        *((void *)v86 + 2) = *(void *)&__dst[16];
        *(_OWORD *)int v86 = v87;
        int v79 = v129;
        *(void *)(a4 + 120) = v86 + 24;
        goto LABEL_162;
      }
      uint64_t v93 = (char *)*v132;
      unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v86[-*v132] >> 3);
      unint64_t v95 = v94 + 1;
      if (v94 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_2E00();
      }
      unint64_t v96 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85 - (void)v93) >> 3);
      if (2 * v96 > v95) {
        unint64_t v95 = 2 * v96;
      }
      if (v96 >= 0x555555555555555) {
        unint64_t v97 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v97 = v95;
      }
      if (v97)
      {
        if (v97 > 0xAAAAAAAAAAAAAAALL) {
          sub_188D718();
        }
        unint64_t v98 = (char *)operator new(24 * v97);
      }
      else
      {
        unint64_t v98 = 0;
      }
      uint64_t v99 = &v98[24 * v94];
      uint64_t v100 = &v98[24 * v97];
      *(_OWORD *)uint64_t v99 = *(_OWORD *)__dst;
      *((void *)v99 + 2) = *(void *)&__dst[16];
      int v101 = v99 + 24;
      if (v86 == v93)
      {
        int v79 = v129;
        *(void *)(a4 + 112) = v99;
        *(void *)(a4 + 120) = v101;
        *(void *)(a4 + 128) = v100;
        if (v86) {
LABEL_209:
        }
          operator delete(v86);
      }
      else
      {
        int v79 = v129;
        do
        {
          long long v102 = *(_OWORD *)(v86 - 24);
          *((void *)v99 - 1) = *((void *)v86 - 1);
          *(_OWORD *)(v99 - 24) = v102;
          v99 -= 24;
          v86 -= 24;
        }
        while (v86 != v93);
        int v86 = (char *)*v132;
        *(void *)(a4 + 112) = v99;
        *(void *)(a4 + 120) = v101;
        *(void *)(a4 + 128) = v100;
        if (v86) {
          goto LABEL_209;
        }
      }
      *(void *)(a4 + 120) = v101;
      if (v79) {
        goto LABEL_163;
      }
      goto LABEL_164;
    }
  }
  int v83 = *(char *)(a4 + 47);
  if ((v83 & 0x80000000) == 0) {
    goto LABEL_150;
  }
LABEL_153:
  if (*(void *)(a4 + 32) == 5)
  {
    unint64_t v131 = (void **)*v131;
    goto LABEL_155;
  }
LABEL_162:
  if (v79)
  {
LABEL_163:
    if (v79 >= 2678401) {
      goto LABEL_164;
    }
LABEL_175:
    if (SHIBYTE(v146) < 0) {
      goto LABEL_176;
    }
    return;
  }
LABEL_164:
  uint64_t v88 = (char *)operator new(0x28uLL);
  uint64_t v152 = 0;
  *(void *)unsigned int v153 = v88;
  *(_OWORD *)&v153[8] = xmmword_20B9240;
  strcpy(v88, "TrafficApiParser.SuspiciousMaxFeedAge");
  uint64_t v150 = 0;
  long long v151 = 0;
  uint64_t v143 = 0;
  long long v141 = 0u;
  *(_OWORD *)uint64_t v142 = 0u;
  *(_OWORD *)long long v139 = 0u;
  *(_OWORD *)unint64_t v140 = 0u;
  char v138 = 0;
  LOBYTE(v137) = 0;
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  uint64_t v133 = 0;
  int v134 = 0;
  sub_29DC44((uint64_t)__dst, &v150, (long long *)v139, &v137, &v135, 0, (uint64_t)&v133, 1);
  nullsub_1(2);
  sub_29E11C((uint64_t)__dst);
  uint64_t v89 = v134;
  if (v134 && !atomic_fetch_add(&v134->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
  }
  uint64_t v90 = v136;
  if (v136 && !atomic_fetch_add(&v136->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
    std::__shared_weak_count::__release_weak(v90);
    if (v138 < 0) {
      goto LABEL_179;
    }
LABEL_170:
    if ((SHIBYTE(v143) & 0x80000000) == 0) {
      goto LABEL_171;
    }
LABEL_180:
    operator delete(v142[0]);
    if (SHIBYTE(v141) < 0) {
      goto LABEL_181;
    }
LABEL_172:
    if ((SHIBYTE(v140[0]) & 0x80000000) == 0) {
      goto LABEL_173;
    }
LABEL_182:
    operator delete(v139[0]);
    uint64_t v91 = (char *)v150;
    if (!v150)
    {
LABEL_174:
      if ((v153[23] & 0x80000000) != 0) {
        goto LABEL_185;
      }
      goto LABEL_175;
    }
  }
  else
  {
    if ((v138 & 0x80000000) == 0) {
      goto LABEL_170;
    }
LABEL_179:
    operator delete((void *)v137);
    if (SHIBYTE(v143) < 0) {
      goto LABEL_180;
    }
LABEL_171:
    if ((SHIBYTE(v141) & 0x80000000) == 0) {
      goto LABEL_172;
    }
LABEL_181:
    operator delete(v140[1]);
    if (SHIBYTE(v140[0]) < 0) {
      goto LABEL_182;
    }
LABEL_173:
    uint64_t v91 = (char *)v150;
    if (!v150) {
      goto LABEL_174;
    }
  }
  int v92 = v151;
  if (v151 == v91)
  {
    long long v151 = v91;
    operator delete(v91);
    if ((v153[23] & 0x80000000) != 0) {
      goto LABEL_185;
    }
    goto LABEL_175;
  }
  while (2)
  {
    if (*(v92 - 1) < 0)
    {
      operator delete(*((void **)v92 - 3));
      if (*(v92 - 25) < 0) {
        goto LABEL_192;
      }
    }
    else if (*(v92 - 25) < 0)
    {
LABEL_192:
      operator delete(*((void **)v92 - 6));
    }
    v92 -= 48;
    if (v92 != v91) {
      continue;
    }
    break;
  }
  long long v151 = v91;
  operator delete(v150);
  if ((v153[23] & 0x80000000) == 0) {
    goto LABEL_175;
  }
LABEL_185:
  operator delete(*(void **)v153);
  if (SHIBYTE(v146) < 0) {
LABEL_176:
  }
    operator delete((void *)__p);
}

void sub_3206EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a70 < 0) {
    operator delete(__p);
  }
  sub_3208E4(v70);
  _Unwind_Resume(a1);
}

uint64_t sub_3208E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 103) < 0)
  {
    operator delete(*(void **)(a1 + 80));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_10:
      operator delete(*(void **)(a1 + 24));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
    return a1;
  }
LABEL_11:
  operator delete(*(void **)a1);
  return a1;
}

double sub_320980(uint64_t a1, char **a2, int **a3)
{
  sub_725D0((uint64_t)v24);
  uint64_t v6 = &a2[1][(void)*a2];
  uint64_t v21 = *a2;
  uint64_t v22 = v6;
  uint64_t v23 = 0x2C700000000;
  while (sub_2F333C((uint64_t)&v21))
  {
    if (v23 == 2)
    {
      *(void *)&v25[0] = sub_2F3488(&v21);
      *((void *)&v25[0] + 1) = v11;
      sub_323FAC(a1, (uint64_t)v25, a3);
    }
    else
    {
      switch(HIDWORD(v23))
      {
        case 0:
          sub_2F3C98((uint64_t *)&v21, (uint64_t)v22);
          break;
        case 1:
          v21 += 8;
          if (v21 > v22)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            *(void *)&v25[0] = operator new(0x30uLL);
            *(long long *)((char *)v25 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v25[0], "Skipping over bytes exceeded message length.");
            uint64_t v14 = (void *)sub_2F404((uint64_t)exception, v25);
          }
          return result;
        case 2:
          unsigned int v12 = sub_2F36C8(&v21, v22);
          v21 += v12;
          if (v21 > v22)
          {
            unint64_t v17 = __cxa_allocate_exception(0x40uLL);
            *(void *)&v25[0] = operator new(0x30uLL);
            *(long long *)((char *)v25 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v25[0], "Skipping over bytes exceeded message length.");
            size_t v18 = (void *)sub_2F404((uint64_t)v17, v25);
          }
          return result;
        case 5:
          v21 += 4;
          if (v21 > v22)
          {
            unint64_t v15 = __cxa_allocate_exception(0x40uLL);
            *(void *)&v25[0] = operator new(0x30uLL);
            *(long long *)((char *)v25 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v25[0], "Skipping over bytes exceeded message length.");
            size_t v16 = (void *)sub_2F404((uint64_t)v15, v25);
          }
          return result;
        default:
          unsigned int v19 = __cxa_allocate_exception(0x40uLL);
          BYTE7(v25[1]) = 18;
          strcpy((char *)v25, "Unknown wire type.");
          unint64_t v20 = (void *)sub_2F404((uint64_t)v19, v25);
      }
    }
  }
  double v7 = sub_72688((uint64_t)v24);
  *(void *)&v25[0] = *a3;
  int v8 = sub_32A014((uint64_t)(a3 + 2), *(unsigned int **)&v25[0], (uint64_t)&unk_20F06E0, (_DWORD **)v25);
  LODWORD(v9) = *((_DWORD *)v8 + 17);
  double result = v7 + (double)v9;
  *((_DWORD *)v8 + 17) = result;
  return result;
}

void sub_320C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_320CE0(uint64_t a1, void *a2, unsigned int **a3)
{
  sub_725D0((uint64_t)v38);
  uint64_t v6 = (uint64_t *)*a3;
  uint64_t v7 = *a2 + a2[1];
  *(void *)&long long v36 = *a2;
  *((void *)&v36 + 1) = v7;
  uint64_t v37 = 0x2C700000000;
  uint64_t v8 = sub_2F4CE4(&v36, 3);
  sub_32773C(v6 + 19, v8 + 0x21CFB2B78C13521DLL * ((v6[20] - v6[19]) >> 3));
  unint64_t v9 = (unsigned char *)v6[22];
  unint64_t v10 = (unsigned char *)v6[23];
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3) + 20 * v8;
  if (0xAAAAAAAAAAAAAAABLL * ((v6[24] - (uint64_t)v9) >> 3) < v11)
  {
    if (v11 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v12 = 24 * v11;
    uint64_t v13 = (char *)operator new(24 * v11);
    uint64_t v14 = &v13[8 * ((v10 - v9) >> 3)];
    uint64_t v15 = (uint64_t)v14;
    if (v10 != v9)
    {
      size_t v16 = &v13[8 * ((v10 - v9) >> 3)];
      do
      {
        long long v17 = *(_OWORD *)(v10 - 24);
        uint64_t v15 = (uint64_t)(v16 - 24);
        *((void *)v16 - 1) = *((void *)v10 - 1);
        *(_OWORD *)(v16 - 24) = v17;
        v10 -= 24;
        v16 -= 24;
      }
      while (v10 != v9);
    }
    v6[22] = v15;
    v6[23] = (uint64_t)v14;
    v6[24] = (uint64_t)&v13[v12];
    if (v9) {
      operator delete(v9);
    }
  }
  *(void *)&v42[0] = *a3;
  size_t v18 = sub_32A014((uint64_t)(a3 + 2), *(unsigned int **)&v42[0], (uint64_t)&unk_20F06E0, (_DWORD **)v42);
  *((_DWORD *)v18 + 27) += v8;
  uint64_t v19 = *a2 + a2[1];
  *(void *)&v42[0] = *a2;
  *((void *)&v42[0] + 1) = v19;
  *(void *)&v42[1] = 0x2C700000000;
  while (sub_2F333C((uint64_t)v42))
  {
    if (LODWORD(v42[1]) == 1) {
      break;
    }
    sub_2F3548((uint64_t)v42);
  }
  unint64_t v39 = sub_2F3488((char **)v42);
  unint64_t v40 = &v39[v20];
  uint64_t v41 = 0x2C700000000;
  while (sub_30DA40((uint64_t)&v39))
  {
    if (v41 == 1) {
      break;
    }
    sub_30DC4C((uint64_t)&v39);
  }
  int v21 = sub_2F6A18(&v39, v40);
  sub_48A0((_DWORD *)(a1 + 20424), v21);
  while (sub_2F333C((uint64_t)&v36))
  {
    if (v37 == 3)
    {
      *(void *)&v42[0] = sub_2F3488((char **)&v36);
      *((void *)&v42[0] + 1) = v26;
      sub_324410(a1, (uint64_t)v42, v21, a3);
    }
    else
    {
      switch(HIDWORD(v37))
      {
        case 0:
          sub_2F3C98((uint64_t *)&v36, *((uint64_t *)&v36 + 1));
          break;
        case 1:
          *(void *)&long long v36 = v36 + 8;
          if ((unint64_t)v36 > *((void *)&v36 + 1))
          {
            exception = __cxa_allocate_exception(0x40uLL);
            *(void *)&v42[0] = operator new(0x30uLL);
            *(long long *)((char *)v42 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v42[0], "Skipping over bytes exceeded message length.");
            long double v29 = (void *)sub_2F404((uint64_t)exception, v42);
          }
          return result;
        case 2:
          unsigned int v27 = sub_2F36C8((char **)&v36, *((char **)&v36 + 1));
          *(void *)&long long v36 = v36 + v27;
          if ((unint64_t)v36 > *((void *)&v36 + 1))
          {
            double v32 = __cxa_allocate_exception(0x40uLL);
            *(void *)&v42[0] = operator new(0x30uLL);
            *(long long *)((char *)v42 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v42[0], "Skipping over bytes exceeded message length.");
            double v33 = (void *)sub_2F404((uint64_t)v32, v42);
          }
          return result;
        case 5:
          *(void *)&long long v36 = v36 + 4;
          if ((unint64_t)v36 > *((void *)&v36 + 1))
          {
            unsigned int v30 = __cxa_allocate_exception(0x40uLL);
            *(void *)&v42[0] = operator new(0x30uLL);
            *(long long *)((char *)v42 + 8) = xmmword_20E1380;
            strcpy(*(char **)&v42[0], "Skipping over bytes exceeded message length.");
            double v31 = (void *)sub_2F404((uint64_t)v30, v42);
          }
          return result;
        default:
          long double v34 = __cxa_allocate_exception(0x40uLL);
          BYTE7(v42[1]) = 18;
          strcpy((char *)v42, "Unknown wire type.");
          unsigned int v35 = (void *)sub_2F404((uint64_t)v34, v42);
      }
    }
  }
  double v22 = sub_72688((uint64_t)v38);
  *(void *)&v42[0] = *a3;
  uint64_t v23 = sub_32A014((uint64_t)(a3 + 2), *(unsigned int **)&v42[0], (uint64_t)&unk_20F06E0, (_DWORD **)v42);
  LODWORD(v24) = *((_DWORD *)v23 + 46);
  double result = v22 + (double)v24;
  *((_DWORD *)v23 + 46) = result;
  return result;
}

void sub_3211CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_321228(uint64_t a1, void *a2, int **a3)
{
  sub_725D0((uint64_t)v44);
  uint64_t v6 = *a2 + a2[1];
  *(void *)&long long v42 = *a2;
  *((void *)&v42 + 1) = v6;
  uint64_t v43 = 0x2C700000000;
  int v7 = sub_2F4CE4(&v42, 4);
  *(void *)&v36[0] = *a3;
  uint64_t v8 = sub_32A014((uint64_t)(a3 + 2), *(unsigned int **)&v36[0], (uint64_t)&unk_20F06E0, (_DWORD **)v36);
  *((_DWORD *)v8 + 21) += v7;
  if (sub_2F333C((uint64_t)&v42))
  {
    long double v34 = (unsigned __int8 *)(a1 + 20703);
    do
    {
      if (v43 == 4)
      {
        unint64_t v40 = sub_2F3488((char **)&v42);
        uint64_t v41 = v12;
        if (sub_2F2904(&v40, **a3, (unint64_t **)*a3 + 7))
        {
          *(void *)&v36[0] = *a3;
          unint64_t v11 = sub_32A014((uint64_t)(a3 + 2), *(unsigned int **)&v36[0], (uint64_t)&unk_20F06E0, (_DWORD **)v36);
          ++*((_DWORD *)v11 + 22);
        }
        else
        {
          uint64_t v13 = sub_16751F8((uint64_t)v39, 0, 0);
          sub_188AF1C(v13, v40, v41);
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)v36);
            uint64_t v14 = sub_188FC78(v36, (uint64_t)"Invalid color in ", 17);
            if ((*v34 & 0x80u) == 0) {
              uint64_t v15 = a1 + 20680;
            }
            else {
              uint64_t v15 = *(void *)(a1 + 20680);
            }
            if ((*v34 & 0x80u) == 0) {
              uint64_t v16 = *v34;
            }
            else {
              uint64_t v16 = *(void *)(a1 + 20688);
            }
            long long v17 = sub_188FC78(v14, v15, v16);
            size_t v18 = sub_188FC78(v17, (uint64_t)": ", 2);
            sub_188AB38((unint64_t)v39, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            sub_188FC78(v18, (uint64_t)p_p, size);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::stringbuf::str();
            sub_7246C((uint64_t *)&__p, 3u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            *(void *)&v36[0] = v9;
            *(void *)((char *)v36 + *(void *)(v9 - 24)) = v10;
            if (v38 < 0) {
              operator delete(v37);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          sub_16752E0(v39);
        }
      }
      else
      {
        switch(HIDWORD(v43))
        {
          case 0:
            sub_2F3C98((uint64_t *)&v42, *((uint64_t *)&v42 + 1));
            break;
          case 1:
            *(void *)&long long v42 = v42 + 8;
            if ((unint64_t)v42 > *((void *)&v42 + 1))
            {
              exception = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v36, "Skipping over bytes exceeded message length.");
              uint64_t v23 = (void *)sub_2F404((uint64_t)exception, v36);
            }
            return result;
          case 2:
            unsigned int v21 = sub_2F36C8((char **)&v42, *((char **)&v42 + 1));
            *(void *)&long long v42 = v42 + v21;
            if ((unint64_t)v42 > *((void *)&v42 + 1))
            {
              unsigned int v30 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v36, "Skipping over bytes exceeded message length.");
              double v31 = (void *)sub_2F404((uint64_t)v30, v36);
            }
            return result;
          case 5:
            *(void *)&long long v42 = v42 + 4;
            if ((unint64_t)v42 > *((void *)&v42 + 1))
            {
              double v28 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v36, "Skipping over bytes exceeded message length.");
              long double v29 = (void *)sub_2F404((uint64_t)v28, v36);
            }
            return result;
          default:
            double v32 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v36, "Unknown wire type.");
            double v33 = (void *)sub_2F404((uint64_t)v32, v36);
        }
      }
    }
    while (sub_2F333C((uint64_t)&v42));
  }
  double v24 = sub_72688((uint64_t)v44);
  *(void *)&v36[0] = *a3;
  uint64_t v25 = sub_32A014((uint64_t)(a3 + 2), *(unsigned int **)&v36[0], (uint64_t)&unk_20F06E0, (_DWORD **)v36);
  LODWORD(v26) = *((_DWORD *)v25 + 23);
  double result = v24 + (double)v26;
  *((_DWORD *)v25 + 23) = result;
  return result;
}

void sub_32173C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_321784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a17);
    sub_16752E0(v17 - 208);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a17);
  sub_16752E0(v17 - 208);
  _Unwind_Resume(a1);
}

void sub_3217EC(_Unwind_Exception *a1)
{
  sub_16752E0(v1 - 208);
  _Unwind_Resume(a1);
}

double sub_321818(uint64_t a1, void *a2, int **a3)
{
  sub_725D0((uint64_t)v54);
  uint64_t v6 = *a2 + a2[1];
  *(void *)&long long v52 = *a2;
  *((void *)&v52 + 1) = v6;
  uint64_t v53 = 0x2C700000000;
  int v7 = *a3;
  uint64_t v8 = (void **)(*a3 + 20);
  uint64_t v9 = (uint64_t)(*((void *)*a3 + 11) - (void)*v8) >> 4;
  unint64_t v10 = v9 + 4 * sub_2F4CE4(&v52, 6);
  unint64_t v11 = *v8;
  if (v10 > (uint64_t)(*((void *)v7 + 12) - (void)*v8) >> 4)
  {
    if (v10 >> 60) {
      sub_2E00();
    }
    uint64_t v12 = (unsigned char *)*((void *)v7 + 11);
    uint64_t v13 = 16 * v10;
    uint64_t v14 = (char *)operator new(16 * v10);
    uint64_t v15 = &v14[(v12 - v11) & 0xFFFFFFFFFFFFFFF0];
    uint64_t v16 = v15;
    if (v12 != v11)
    {
      uint64_t v17 = &v14[(v12 - v11) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        uint64_t v16 = v17 - 16;
        *((_OWORD *)v17 - 1) = *((_OWORD *)v12 - 1);
        v12 -= 16;
        v17 -= 16;
      }
      while (v12 != v11);
    }
    *((void *)v7 + 10) = v16;
    *((void *)v7 + 11) = v15;
    *((void *)v7 + 12) = &v14[v13];
    if (v11) {
      operator delete(v11);
    }
  }
  if (sub_2F333C((uint64_t)&v52))
  {
    unint64_t v44 = (unsigned __int8 *)(a1 + 20703);
    do
    {
      if (v53 == 6)
      {
        *(void *)&v46[0] = *a3;
        uint64_t v20 = sub_32A014((uint64_t)(a3 + 2), *(unsigned int **)&v46[0], (uint64_t)&unk_20F06E0, (_DWORD **)v46);
        ++*((_DWORD *)v20 + 24);
        size_t v50 = sub_2F3488((char **)&v52);
        uint64_t v51 = v21;
        if (sub_316C50(&v50, **a3, 0x7FFFFFFFFFFFFFFFLL, (uint64_t *)*a3 + 10, (uint64_t)(*a3 + 26)))
        {
          *(void *)&v46[0] = *a3;
          uint64_t v19 = sub_32A014((uint64_t)(a3 + 2), *(unsigned int **)&v46[0], (uint64_t)&unk_20F06E0, (_DWORD **)v46);
          ++*((_DWORD *)v19 + 25);
        }
        else
        {
          uint64_t v22 = sub_1679A84((uint64_t)v49, 0, 0);
          sub_188AF1C(v22, v50, v51);
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)v46);
            uint64_t v23 = sub_188FC78(v46, (uint64_t)"Invalid PredictedPaces in ", 26);
            if ((*v44 & 0x80u) == 0) {
              uint64_t v24 = a1 + 20680;
            }
            else {
              uint64_t v24 = *(void *)(a1 + 20680);
            }
            if ((*v44 & 0x80u) == 0) {
              uint64_t v25 = *v44;
            }
            else {
              uint64_t v25 = *(void *)(a1 + 20688);
            }
            unint64_t v26 = sub_188FC78(v23, v24, v25);
            unsigned int v27 = sub_188FC78(v26, (uint64_t)": ", 2);
            sub_188AB38((unint64_t)v49, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            sub_188FC78(v27, (uint64_t)p_p, size);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::stringbuf::str();
            sub_7246C((uint64_t *)&__p, 3u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            *(void *)&v46[0] = v43;
            *(void *)((char *)v46 + *(void *)(v43 - 24)) = v18;
            if (v48 < 0) {
              operator delete(v47);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          sub_1679B8C(v49);
        }
      }
      else
      {
        switch(HIDWORD(v53))
        {
          case 0:
            sub_2F3C98((uint64_t *)&v52, *((uint64_t *)&v52 + 1));
            break;
          case 1:
            *(void *)&long long v52 = v52 + 8;
            if ((unint64_t)v52 > *((void *)&v52 + 1))
            {
              exception = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v46, "Skipping over bytes exceeded message length.");
              double v32 = (void *)sub_2F404((uint64_t)exception, v46);
            }
            return result;
          case 2:
            unsigned int v30 = sub_2F36C8((char **)&v52, *((char **)&v52 + 1));
            *(void *)&long long v52 = v52 + v30;
            if ((unint64_t)v52 > *((void *)&v52 + 1))
            {
              unint64_t v39 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v46, "Skipping over bytes exceeded message length.");
              unint64_t v40 = (void *)sub_2F404((uint64_t)v39, v46);
            }
            return result;
          case 5:
            *(void *)&long long v52 = v52 + 4;
            if ((unint64_t)v52 > *((void *)&v52 + 1))
            {
              uint64_t v37 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v46, "Skipping over bytes exceeded message length.");
              char v38 = (void *)sub_2F404((uint64_t)v37, v46);
            }
            return result;
          default:
            uint64_t v41 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v46, "Unknown wire type.");
            long long v42 = (void *)sub_2F404((uint64_t)v41, v46);
        }
      }
    }
    while (sub_2F333C((uint64_t)&v52));
  }
  double v33 = sub_72688((uint64_t)v54);
  *(void *)&v46[0] = *a3;
  long double v34 = sub_32A014((uint64_t)(a3 + 2), *(unsigned int **)&v46[0], (uint64_t)&unk_20F06E0, (_DWORD **)v46);
  LODWORD(v35) = *((_DWORD *)v34 + 26);
  double result = v33 + (double)v35;
  *((_DWORD *)v34 + 26) = result;
  return result;
}

void sub_321DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_321E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a18);
    sub_1679B8C(v18 - 248);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a18);
  sub_1679B8C(v18 - 248);
  _Unwind_Resume(a1);
}

void sub_321E84(_Unwind_Exception *a1)
{
  sub_1679B8C(v1 - 248);
  _Unwind_Resume(a1);
}

void sub_321EB0(uint64_t a1, void *a2, char **a3, uint64_t a4)
{
  uint64_t v8 = *a2 + a2[1];
  *(void *)&long long v34 = *a2;
  *((void *)&v34 + 1) = v8;
  __p[0] = (void *)0x2C700000000;
  if (sub_2F4CE4(&v34, 8) && *(unsigned char *)(a1 + 20537))
  {
    uint64_t v9 = a1 + 20336;
    sub_35A6D4((void *)(a1 + 20336), a2, a4 + 320, (uint64_t)&v34);
    unint64_t v10 = *a3;
    *((_OWORD *)v10 + 20) = v34;
    unint64_t v11 = (void *)*((void *)v10 + 42);
    if (v11)
    {
      *((void *)v10 + 43) = v11;
      operator delete(v11);
      *((void *)v10 + 42) = 0;
      *((void *)v10 + 43) = 0;
      *((void *)v10 + 44) = 0;
    }
    *((_OWORD *)v10 + 21) = *(_OWORD *)__p;
    *((void *)v10 + 44) = v36;
    __p[1] = 0;
    uint64_t v36 = 0;
    __p[0] = 0;
    uint64_t v12 = v10 + 360;
    uint64_t v13 = (void *)*((void *)v10 + 45);
    if (v13)
    {
      *((void *)v10 + 46) = v13;
      operator delete(v13);
      void *v12 = 0;
      *((void *)v10 + 46) = 0;
      *((void *)v10 + 47) = 0;
      uint64_t v13 = __p[0];
    }
    *(_OWORD *)uint64_t v12 = v37;
    *((void *)v10 + 47) = v38;
    uint64_t v38 = 0;
    long long v37 = 0uLL;
    if (v13)
    {
      __p[1] = v13;
      operator delete(v13);
    }
    uint64_t v14 = *a3;
    if (*((_DWORD *)*a3 + 80) == 0x7FFFFFFF
      || *((_DWORD *)v14 + 81) == 0x7FFFFFFF
      || *((_DWORD *)v14 + 82) == 0x7FFFFFFF
      || !*((_DWORD *)v14 + 83)
      || (uint64_t v15 = *((void *)v14 + 42), v16 = *((void *)v14 + 43), v15 == v16)
      || *((void *)v14 + 46) - *((void *)v14 + 45) < (unint64_t)((v16 - v15) >> 3))
    {
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v34);
        uint64_t v17 = sub_188FC78(&v34, (uint64_t)"Invalid weather forecast data in ", 33);
        int v18 = *(char *)(a1 + 20703);
        if (v18 >= 0) {
          uint64_t v19 = a1 + 20680;
        }
        else {
          uint64_t v19 = *(void *)(a1 + 20680);
        }
        if (v18 >= 0) {
          uint64_t v20 = *(unsigned __int8 *)(a1 + 20703);
        }
        else {
          uint64_t v20 = *(void *)(a1 + 20688);
        }
        sub_188FC78(v17, v19, v20);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v32, 3u);
        if (v33 < 0) {
          operator delete(v32[0]);
        }
        if (v40 < 0) {
          operator delete(v39);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      uint64_t v21 = *a3;
      *((_OWORD *)v21 + 20) = xmmword_20E2120;
      uint64_t v22 = v21 + 336;
      uint64_t v23 = (void *)*((void *)v21 + 42);
      if (v23)
      {
        *((void *)v21 + 43) = v23;
        operator delete(v23);
        *uint64_t v22 = 0;
        *((void *)v21 + 43) = 0;
        *((void *)v21 + 44) = 0;
      }
      uint64_t v24 = v21 + 360;
      *uint64_t v22 = 0;
      *((void *)v21 + 43) = 0;
      *((void *)v21 + 44) = 0;
      uint64_t v25 = (void *)*((void *)v21 + 45);
      if (v25)
      {
        *((void *)v21 + 46) = v25;
        operator delete(v25);
        *uint64_t v24 = 0;
        *((void *)v21 + 46) = 0;
        *((void *)v21 + 47) = 0;
      }
      *uint64_t v24 = 0;
      *((void *)v21 + 46) = 0;
      *((void *)v21 + 47) = 0;
    }
    else
    {
      sub_35CC4C(a1 + 20336, (uint64_t)&v34);
      int v26 = v34;
      v32[0] = *a3;
      unsigned int v27 = sub_32A014((uint64_t)(a3 + 2), (unsigned int *)v32[0], (uint64_t)&unk_20F06E0, (_DWORD **)v32);
      *((_DWORD *)v27 + 52) += v26;
      *(void *)&long long v34 = *a3;
      double v28 = sub_32A014((uint64_t)(a3 + 2), (unsigned int *)v34, (uint64_t)&unk_20F06E0, (_DWORD **)&v34);
      ++*((_DWORD *)v28 + 48);
      sub_35CC4C(v9, (uint64_t)&v34);
      int v29 = v37;
      v32[0] = *a3;
      unsigned int v30 = sub_32A014((uint64_t)(a3 + 2), (unsigned int *)v32[0], (uint64_t)&unk_20F06E0, (_DWORD **)v32);
      *((_DWORD *)v30 + 49) += v29;
      sub_35CC4C(v9, (uint64_t)&v34);
      v32[0] = *a3;
      double v31 = sub_32A014((uint64_t)(a3 + 2), (unsigned int *)v32[0], (uint64_t)&unk_20F06E0, (_DWORD **)v32);
      *((void *)v31 + 25) = v36;
    }
  }
}

void sub_3222BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_322308(uint64_t result, uint64_t a2, unsigned int **a3)
{
  if (*(unsigned char *)(result + 20538))
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)a2 + *(void *)(a2 + 8);
    *(void *)&long long v15 = *(void *)a2;
    *((void *)&v15 + 1) = v6;
    uint64_t v16 = 0x2C700000000;
    double result = sub_2F4CE4(&v15, 9);
    if (result)
    {
      sub_30E7D4(v5 + 20392, (char **)a2, (uint64_t *)*a3 + 48);
      sub_30CEB8(v5 + 20392, &v15);
      uint64_t v7 = v16;
      uint64_t v19 = *a3;
      uint64_t v8 = sub_32A014((uint64_t)(a3 + 2), v19, (uint64_t)&unk_20F06E0, &v19);
      *((void *)v8 + 27) += v7;
      sub_30CEB8(v5 + 20392, &v15);
      LODWORD(v7) = v17;
      uint64_t v19 = *a3;
      uint64_t v9 = sub_32A014((uint64_t)(a3 + 2), v19, (uint64_t)&unk_20F06E0, &v19);
      *((_DWORD *)v9 + 56) += v7;
      sub_30CEB8(v5 + 20392, &v15);
      LODWORD(v7) = v15;
      uint64_t v19 = *a3;
      unint64_t v10 = sub_32A014((uint64_t)(a3 + 2), v19, (uint64_t)&unk_20F06E0, &v19);
      *((_DWORD *)v10 + 58) += v7;
      sub_30CEB8(v5 + 20392, &v15);
      LODWORD(v7) = DWORD1(v15);
      uint64_t v19 = *a3;
      unint64_t v11 = sub_32A014((uint64_t)(a3 + 2), v19, (uint64_t)&unk_20F06E0, &v19);
      *((_DWORD *)v11 + 59) += v7;
      sub_30CEB8(v5 + 20392, &v15);
      LODWORD(v7) = DWORD2(v15);
      uint64_t v19 = *a3;
      uint64_t v12 = sub_32A014((uint64_t)(a3 + 2), v19, (uint64_t)&unk_20F06E0, &v19);
      *((_DWORD *)v12 + 60) += v7;
      sub_30CEB8(v5 + 20392, &v15);
      int v13 = v18;
      uint64_t v19 = *a3;
      uint64_t v14 = sub_32A014((uint64_t)(a3 + 2), v19, (uint64_t)&unk_20F06E0, &v19);
      *((_DWORD *)v14 + 61) += v13;
      *(void *)&long long v15 = *a3;
      double result = (uint64_t)sub_32A014((uint64_t)(a3 + 2), (unsigned int *)v15, (uint64_t)&unk_20F06E0, (_DWORD **)&v15);
      ++*(_DWORD *)(result + 228);
    }
  }
  return result;
}

void sub_32251C(uint64_t a1, char **a2, uint64_t *a3)
{
  sub_725D0((uint64_t)v47);
  uint64_t v6 = &a2[1][(void)*a2];
  unint64_t v44 = *a2;
  unint64_t v45 = v6;
  uint64_t v46 = 0x2C700000000;
  uint64_t v7 = *(void *)(*a3 + 576);
  unint64_t v10 = *(char **)(v7 - 120);
  uint64_t v8 = (char *)(v7 - 120);
  uint64_t v9 = v10;
  int v11 = v8[23];
  if (v11 >= 0) {
    uint64_t v12 = v8;
  }
  else {
    uint64_t v12 = v9;
  }
  unint64_t v13 = *((void *)v8 + 1);
  if (v11 >= 0) {
    unint64_t v14 = v11;
  }
  else {
    unint64_t v14 = v13;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v14 < 0x17)
  {
    HIBYTE(v43) = v14;
    if (!v14)
    {
      LOBYTE(v42[0]) = 0;
      goto LABEL_27;
    }
    long long v15 = v42;
    goto LABEL_19;
  }
  uint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v14 | 7) != 0x17) {
    uint64_t v16 = v14 | 7;
  }
  uint64_t v17 = v16 + 1;
  long long v15 = operator new(v16 + 1);
  v42[1] = (void *)v14;
  int64_t v43 = v17 | 0x8000000000000000;
  v42[0] = v15;
  if (v14 < 0x20 || (unint64_t)((char *)v15 - v12) < 0x20)
  {
LABEL_19:
    int v18 = v12;
    uint64_t v19 = v15;
    do
    {
LABEL_20:
      char v24 = *v18++;
      *v19++ = v24;
    }
    while (v18 != &v12[v14]);
    goto LABEL_21;
  }
  int v18 = &v12[v14 & 0xFFFFFFFFFFFFFFE0];
  uint64_t v19 = (char *)v15 + (v14 & 0xFFFFFFFFFFFFFFE0);
  uint64_t v20 = v15 + 1;
  uint64_t v21 = (long long *)(v12 + 16);
  unint64_t v22 = v14 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    long long v23 = *v21;
    *(v20 - 1) = *(v21 - 1);
    *uint64_t v20 = v23;
    v20 += 2;
    v21 += 2;
    v22 -= 32;
  }
  while (v22);
  if (v14 != (v14 & 0x7FFFFFFFFFFFFFE0)) {
    goto LABEL_20;
  }
LABEL_21:
  unsigned char *v19 = 0;
  if (v43 >= 0) {
    uint64_t v25 = v42;
  }
  else {
    uint64_t v25 = (void **)v42[0];
  }
  do
  {
    *(unsigned char *)uint64_t v25 = __toupper(*v12);
    uint64_t v25 = (void **)((char *)v25 + 1);
    ++v12;
    --v14;
  }
  while (v14);
LABEL_27:
  while (sub_2F333C((uint64_t)&v44))
  {
    while (v46 != 10)
    {
      switch(HIDWORD(v46))
      {
        case 0:
          sub_2F3C98((uint64_t *)&v44, (uint64_t)v45);
          break;
        case 1:
          v44 += 8;
          if (v44 > v45)
          {
            exception = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v48, "Skipping over bytes exceeded message length.");
            unint64_t v39 = (void *)sub_2F404((uint64_t)exception, &v48);
          }
          return;
        case 2:
          unsigned int v26 = sub_2F36C8(&v44, v45);
          sub_2F3DCC((unint64_t *)&v44, v26);
          break;
        case 5:
          v44 += 4;
          if (v44 > v45)
          {
            uint64_t v36 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(&v48, "Skipping over bytes exceeded message length.");
            long long v37 = (void *)sub_2F404((uint64_t)v36, &v48);
          }
          return;
        default:
          long long v34 = __cxa_allocate_exception(0x40uLL);
          sub_5E5C(&v48, "Unknown wire type.");
          unint64_t v35 = (void *)sub_2F404((uint64_t)v34, &v48);
      }
      if (!sub_2F333C((uint64_t)&v44)) {
        goto LABEL_44;
      }
    }
    v41[0] = sub_2F3488(&v44);
    v41[1] = v27;
    sub_3279E4(a1, (unsigned __int8 **)v42, __p);
    sub_2F8C2C(v41, (__int16 **)__p, (uint64_t *)&v48);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v28 = *a3;
    if ((void)v48 == *((void *)&v48 + 1))
    {
      __p[0] = (void *)*a3;
      int v29 = sub_32A014((uint64_t)(a3 + 2), (unsigned int *)v28, (uint64_t)&unk_20F06E0, (_DWORD **)__p);
      ++*((_DWORD *)v29 + 19);
    }
    else
    {
      sub_3455C4(v28 + 128, *(void *)(v28 + 136), v48, *((char **)&v48 + 1), (uint64_t)(*((void *)&v48 + 1) - v48) >> 3);
    }
    __p[0] = (void *)*a3;
    unsigned int v30 = sub_32A014((uint64_t)(a3 + 2), (unsigned int *)__p[0], (uint64_t)&unk_20F06E0, (_DWORD **)__p);
    ++*((_DWORD *)v30 + 18);
    if ((void)v48)
    {
      *((void *)&v48 + 1) = v48;
      operator delete((void *)v48);
    }
  }
LABEL_44:
  double v31 = sub_72688((uint64_t)v47);
  *(void *)&long long v48 = *a3;
  double v32 = sub_32A014((uint64_t)(a3 + 2), (unsigned int *)v48, (uint64_t)&unk_20F06E0, (_DWORD **)&v48);
  LODWORD(v33) = *((_DWORD *)v32 + 20);
  *((_DWORD *)v32 + 20) = (v31 + (double)v33);
  if (SHIBYTE(v43) < 0) {
    operator delete(v42[0]);
  }
}

void sub_322954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_322A04(unint64_t *a1)
{
  unint64_t v2 = *a1;
  char v3 = (long long *)a1[1];
  unint64_t v4 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)v3 - v2) >> 3));
  if (v3 == (long long *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_32BAD4(v2, v3, (uint64_t)&v15, v5, 1);
  uint64_t v6 = (unsigned int *)*a1;
  uint64_t v7 = (unsigned int *)a1[1];
  if ((unsigned int *)*a1 == v7)
  {
LABEL_13:
    if (v6 != (unsigned int *)a1[1]) {
LABEL_16:
    }
      a1[1] = (unint64_t)v6;
  }
  else
  {
    do
    {
      uint64_t v8 = v6 + 18;
      if (v6 + 18 == v7)
      {
        uint64_t v6 = v7;
        goto LABEL_13;
      }
      BOOL v9 = sub_3575D0(v6, (uint64_t)(v6 + 18));
      v6 += 18;
    }
    while (!v9);
    uint64_t v10 = (uint64_t)(v8 + 18);
    int v11 = v8 - 18;
    while ((unsigned int *)v10 != v7)
    {
      if (!sub_3575D0(v11, v10))
      {
        *(_OWORD *)(v11 + 18) = *(_OWORD *)v10;
        long long v12 = *(_OWORD *)(v10 + 16);
        long long v13 = *(_OWORD *)(v10 + 32);
        long long v14 = *(_OWORD *)(v10 + 48);
        *((unsigned char *)v11 + 136) = *(unsigned char *)(v10 + 64);
        *(_OWORD *)(v11 + 30) = v14;
        *(_OWORD *)(v11 + 26) = v13;
        *(_OWORD *)(v11 + 22) = v12;
        v11 += 18;
      }
      v10 += 72;
    }
    uint64_t v6 = v11 + 18;
    if (v6 != (unsigned int *)a1[1]) {
      goto LABEL_16;
    }
  }
}

uint64_t sub_322B5C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = (int *)a1[1];
  unint64_t v4 = 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3);
  if (v3 == (int *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t result = sub_32E0C0(v2, v3, (uint64_t)&v13, v5, 1);
  uint64_t v7 = *a1;
  uint64_t v8 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 == v8)
  {
LABEL_13:
    if (v7 != a1[1]) {
LABEL_16:
    }
      a1[1] = v7;
  }
  else
  {
    do
    {
      uint64_t v9 = v7 + 8;
      if ((_DWORD *)(v7 + 8) == v8)
      {
        uint64_t v7 = (uint64_t)v8;
        goto LABEL_13;
      }
      uint64_t result = sub_3591B4(v7, v7 + 8);
      v7 += 8;
    }
    while (!result);
    uint64_t v10 = (_DWORD *)(v9 + 8);
    uint64_t v11 = v9 - 8;
    while (v10 != v8)
    {
      uint64_t result = sub_3591B4(v11, (uint64_t)v10);
      if ((result & 1) == 0)
      {
        int v12 = *(_DWORD *)((char *)v10 + 3);
        *(_DWORD *)(v11 + 8) = *v10;
        v11 += 8;
        *(_DWORD *)(v11 + 3) = v12;
      }
      v10 += 2;
    }
    uint64_t v7 = v11 + 8;
    if (v7 != a1[1]) {
      goto LABEL_16;
    }
  }
  return result;
}

void sub_322C88(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = 126 - 2 * __clz((uint64_t)(v3 - v2) >> 5);
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_33DE40(v2, v3, (uint64_t)&v16, v5, 1);
  uint64_t v7 = (uint64_t *)*a1;
  uint64_t v6 = (uint64_t *)a1[1];
  if ((uint64_t *)*a1 != v6 && *a1 + 32 != (void)v6)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *v7;
    while (1)
    {
      uint64_t v11 = v10;
      int v12 = &v7[v9];
      uint64_t v10 = v7[v9 + 4];
      if (v11 == v10 && *((_DWORD *)v12 + 2) == *((_DWORD *)v12 + 10) && v12[2] == v12[6]) {
        break;
      }
      v9 += 4;
      if (&v7[v9 + 4] == v6) {
        return;
      }
    }
    char v13 = &v7[v9];
    if (v13 != v6)
    {
      long long v14 = v13 + 8;
      if (v13 + 8 != v6)
      {
        do
        {
          if (*v13 != *v14 || *((_DWORD *)v13 + 2) != *((_DWORD *)v14 + 2) || v13[2] != v14[2])
          {
            long long v15 = *((_OWORD *)v14 + 1);
            *((_OWORD *)v13 + 2) = *(_OWORD *)v14;
            *((_OWORD *)v13 + 3) = v15;
            v13 += 4;
          }
          v14 += 4;
        }
        while (v14 != v6);
        uint64_t v6 = (uint64_t *)a1[1];
      }
      if (v13 + 4 != v6) {
        a1[1] = (uint64_t)(v13 + 4);
      }
    }
  }
}

void sub_322DFC(uint64_t a1, void *a2, void *a3)
{
  sub_725D0((uint64_t)v145);
  uint64_t v5 = *(uint32x4_t **)(a1 + 20600);
  uint64_t v6 = *(uint32x4_t **)(a1 + 20608);
  if (v5 == v6)
  {
    __int32 v8 = 0;
    goto LABEL_9;
  }
  unint64_t v7 = (char *)v6 - (char *)v5 - 4;
  if (v7 < 0x1C)
  {
    __int32 v8 = 0;
    uint64_t v9 = *(uint32x4_t **)(a1 + 20600);
    do
    {
LABEL_8:
      __int32 v17 = v9->i32[0];
      uint64_t v9 = (uint32x4_t *)((char *)v9 + 4);
      v8 |= 1 << v17;
    }
    while (v9 != v6);
    goto LABEL_9;
  }
  uint64_t v10 = (v7 >> 2) + 1;
  uint64_t v9 = (uint32x4_t *)((char *)v5 + 4 * (v10 & 0x7FFFFFFFFFFFFFF8));
  uint64_t v11 = v5 + 1;
  int8x16_t v12 = 0uLL;
  v13.i64[0] = 0x100000001;
  v13.i64[1] = 0x100000001;
  uint64_t v14 = v10 & 0x7FFFFFFFFFFFFFF8;
  int8x16_t v15 = 0uLL;
  do
  {
    int8x16_t v12 = vorrq_s8((int8x16_t)vshlq_u32(v13, v11[-1]), v12);
    int8x16_t v15 = vorrq_s8((int8x16_t)vshlq_u32(v13, *v11), v15);
    v11 += 2;
    v14 -= 8;
  }
  while (v14);
  int8x16_t v16 = vorrq_s8(v15, v12);
  *(int8x8_t *)v16.i8 = vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
  __int32 v8 = v16.i32[0] | v16.i32[1];
  if (v10 != (v10 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v142 = 0;
  uint64_t v143 = 0;
  uint64_t v144 = 0;
  int v18 = (void *)*a3;
  uint64_t v19 = *(void *)(*a3 + 32);
  uint64_t v20 = *(void *)(*a3 + 40);
  if (v19 != v20)
  {
    uint64_t v21 = a2[1];
    uint64_t v22 = a2[2];
    long long v23 = (char **)(v18 + 1);
    *(double *)&long long v24 = (double)(unint64_t)((v22 - v21) >> 4) * 1.2;
    uint64_t v25 = (v20 - v19) >> 3;
    if (v21 == v22) {
      *(double *)&long long v24 = (double)(0x8E38E38E38E38E39 * v25);
    }
    unint64_t v26 = (unint64_t)*(double *)&v24;
    unsigned int v27 = (unsigned char *)v18[1];
    if ((unint64_t)*(double *)&v24 > (uint64_t)(v18[3] - (void)v27) >> 4)
    {
      if (v26 >> 60) {
        sub_2E00();
      }
      uint64_t v28 = (unsigned char *)v18[2];
      int v29 = (char *)operator new(16 * v26);
      unsigned int v30 = &v29[(v28 - v27) & 0xFFFFFFFFFFFFFFF0];
      double v31 = v30;
      if (v28 != v27)
      {
        double v32 = &v29[(v28 - v27) & 0xFFFFFFFFFFFFFFF0];
        do
        {
          long long v24 = *((_OWORD *)v28 - 1);
          double v31 = v32 - 16;
          *((_OWORD *)v32 - 1) = v24;
          v28 -= 16;
          v32 -= 16;
        }
        while (v28 != v27);
      }
      v18[1] = v31;
      v18[2] = v30;
      v18[3] = &v29[16 * v26];
      if (v27) {
        operator delete(v27);
      }
    }
    unint64_t v130 = a3;
    std::string __p = 0;
    long long v139 = 0;
    uint64_t v140 = 0;
    double v141 = -1.0;
    uint64_t v33 = v18[4];
    if (v18[5] != v33)
    {
      unint64_t v34 = 0;
      unint64_t v35 = 0;
      long long v137 = (unsigned char *)(a1 + 20640);
      uint64_t v134 = a1 + 7824;
      uint64_t v135 = v18;
      uint64_t v133 = a1 + 12488;
      do
      {
        uint64_t v36 = v33 + 72 * v35;
        uint64_t v37 = a2[4];
        if (v34 >= 0x8E38E38E38E38E39 * ((a2[5] - v37) >> 3))
        {
          LODWORD(v39) = 0;
          unint64_t v38 = 0;
          unint64_t v40 = *(void *)v36;
        }
        else
        {
          unint64_t v38 = *(void *)(v37 + 72 * v34);
          unint64_t v39 = HIDWORD(v38);
          unint64_t v40 = *(void *)v36;
          if (v38)
          {
            if (((4 * HIDWORD(v38)) | (v38 << 32) | (v38 >> 63) | (v38 >> 61) & 2) < ((v40 >> 30) & 0xFFFFFFFC | (v40 << 32) | (v40 >> 63) | (v40 >> 61) & 2))
            {
              ++v34;
              goto LABEL_23;
            }
          }
          else
          {
            unint64_t v38 = 0;
          }
        }
        if (((4 * v39) | (v38 << 32) | (v39 >> 31) | (unint64_t)((v39 >> 29) & 2)) == ((v40 >> 30) & 0xFFFFFFFC | (v40 << 32) | (v40 >> 63) | (v40 >> 61) & 2))
        {
          int v41 = *(unsigned __int8 *)(v37 + 72 * v34 + 64);
          if (v41 == 1)
          {
            uint64_t v42 = v33 + 72 * v35;
            char v43 = 1;
            goto LABEL_132;
          }
          double v52 = *(double *)(v37 + 72 * v34 + 40);
          if (*v137)
          {
            LODWORD(v24) = *(_DWORD *)(a1 + 20672);
            *(double *)&long long v24 = (double)(unint64_t)v24;
            double v53 = v52 / *(double *)&v24;
            if (v53 >= 0.0)
            {
              if (v53 < 4.50359963e15)
              {
                uint64_t v54 = (uint64_t)(v53 + v53) + 1;
                goto LABEL_89;
              }
            }
            else if (v53 > -4.50359963e15)
            {
              uint64_t v54 = (uint64_t)(v53 + v53);
              if (v54 >= 1) {
                --v54;
              }
LABEL_89:
              double v53 = (double)(v54 >> 1);
            }
            double v76 = *(double *)(v33 + 72 * v35 + 40) / *(double *)&v24;
            if (v76 >= 0.0)
            {
              if (v76 < 4.50359963e15)
              {
                uint64_t v77 = (uint64_t)(v76 + v76) + 1;
                goto LABEL_97;
              }
            }
            else if (v76 > -4.50359963e15)
            {
              uint64_t v77 = (uint64_t)(v76 + v76);
              if (v77 >= 1) {
                --v77;
              }
LABEL_97:
              double v76 = (double)(v77 >> 1);
            }
            double v52 = fmax(v53 * *(double *)&v24, 1.0);
            *(double *)&long long v24 = v76 * *(double *)&v24;
            double v55 = fmax(*(double *)&v24, 1.0);
            if (v41 != 3)
            {
LABEL_99:
              if (v41 != 2) {
                goto LABEL_102;
              }
              if (v52 != v55)
              {
                *(double *)&long long v24 = vabdd_f64(v52, v55);
                if (*(double *)&v24 >= 2.22044605e-16) {
                  goto LABEL_102;
                }
              }
LABEL_131:
              uint64_t v42 = v33 + 72 * v35;
              char v43 = 2;
LABEL_132:
              *(unsigned char *)(v42 + 64) = v43;
LABEL_161:
              ++v34;
LABEL_22:
              ++v35;
              goto LABEL_23;
            }
          }
          else
          {
            double v55 = *(double *)(v33 + 72 * v35 + 40);
            if (v41 != 3) {
              goto LABEL_99;
            }
          }
          double v56 = vabdd_f64(v52, v55);
          if (v52 != v55 && v56 >= 2.22044605e-16)
          {
LABEL_102:
            *(double *)&long long v24 = v55 / sub_327854(v133, v40);
            if (*(double *)&v24 >= *(float *)(a1 + 20664) && *(double *)&v24 <= *(float *)(a1 + 20668)) {
              goto LABEL_131;
            }
            *(unsigned char *)(v33 + 72 * v35 + 64) = 3;
            sub_318C48(v134, *(void *)v36, (unint64_t *)&v142);
            uint64_t v78 = (uint64_t *)v142;
            int v79 = v143;
            v148[0] = v23;
            if (v142 != v143)
            {
              uint64_t v132 = (int *)(v33 + 72 * v35 + 16);
              int v80 = vcvtad_u64_f64(v55);
              do
              {
                uint64_t v81 = *v78;
                std::string::size_type v82 = (int *)sub_2D5D58(a1, *v78 & 0xFFFFFFFFFFFFLL);
                int v83 = (unsigned __int16 *)((char *)v82 - *v82);
                unsigned int v84 = *v83;
                if ((v81 & 0xFF000000000000) != 0)
                {
                  if (v84 >= 0xB)
                  {
                    if (v83[5])
                    {
                      int v85 = *(int *)((char *)v82 + v83[5]);
                      if ((v85 & 2) != 0) {
                        goto LABEL_115;
                      }
                    }
                  }
                }
                else if (v84 >= 0xB)
                {
                  if (v83[5])
                  {
                    int v85 = *(int *)((char *)v82 + v83[5]);
                    if (v85)
                    {
LABEL_115:
                      if (v84 < 0x1B
                        || !v83[13]
                        || *(_DWORD *)(a1 + 20644) >= *((unsigned __int8 *)v82 + v83[13]))
                      {
                        uint64_t v86 = v83[4];
                        if (v86) {
                          uint64_t v86 = *(unsigned int *)((char *)v82 + v86);
                        }
                        if (v86 >= *(void *)(a1 + 20656) && ((v85 & 0x4000000) == 0 || !*(unsigned char *)(a1 + 20648)))
                        {
                          uint64_t v87 = *v78;
                          uint64_t v88 = (int *)sub_2D5D58(a1, *v78 & 0xFFFFFFFFFFFFLL);
                          uint64_t v89 = (unsigned __int16 *)((char *)v88 - *v88);
                          if (*v89 < 0x1Du)
                          {
                            uint64_t v90 = 0;
                          }
                          else
                          {
                            uint64_t v90 = v89[14];
                            if (v90) {
                              uint64_t v90 = *(void *)((char *)v88 + v90);
                            }
                          }
                          if ((v87 & 0xFF000000000000) != 0) {
                            uint64_t v91 = -v90;
                          }
                          else {
                            uint64_t v91 = v90;
                          }
                          sub_3579E0((uint64_t)&v146, v91, *v132, v80);
                          sub_343E08(v148, &v146);
                        }
                      }
                    }
                  }
                }
                ++v78;
              }
              while (v78 != v79);
            }
LABEL_160:
            int v18 = v135;
            goto LABEL_161;
          }
          *(unsigned char *)(v33 + 72 * v35 + 64) = 3;
          sub_318C48(v134, v40, (unint64_t *)&v142);
          uint64_t v58 = (uint64_t *)v142;
          uint64_t v59 = v143;
          v148[0] = v23;
          if (v142 == v143) {
            goto LABEL_160;
          }
          unint64_t v131 = (int *)(v33 + 72 * v35 + 16);
          int v60 = vcvtad_u64_f64(v55);
          while (2)
          {
            uint64_t v92 = *v58;
            uint64_t v93 = (int *)sub_2D5D58(a1, *v58 & 0xFFFFFFFFFFFFLL);
            unint64_t v94 = (unsigned __int16 *)((char *)v93 - *v93);
            unsigned int v95 = *v94;
            if ((v92 & 0xFF000000000000) != 0)
            {
              if (v95 < 0xB) {
                goto LABEL_135;
              }
              if (!v94[5]) {
                goto LABEL_135;
              }
              int v96 = *(int *)((char *)v93 + v94[5]);
              if ((v96 & 2) == 0) {
                goto LABEL_135;
              }
LABEL_144:
              if (v95 < 0x1B
                || !v94[13]
                || *(_DWORD *)(a1 + 20644) >= *((unsigned __int8 *)v93 + v94[13]))
              {
                uint64_t v97 = v94[4];
                if (v97) {
                  uint64_t v97 = *(unsigned int *)((char *)v93 + v97);
                }
                if (v97 >= *(void *)(a1 + 20656) && ((v96 & 0x4000000) == 0 || !*(unsigned char *)(a1 + 20648)))
                {
                  uint64_t v98 = *v58;
                  uint64_t v99 = (int *)sub_2D5D58(a1, *v58 & 0xFFFFFFFFFFFFLL);
                  uint64_t v100 = (unsigned __int16 *)((char *)v99 - *v99);
                  if (*v100 < 0x1Du)
                  {
                    uint64_t v101 = 0;
                  }
                  else
                  {
                    uint64_t v101 = v100[14];
                    if (v101) {
                      uint64_t v101 = *(void *)((char *)v99 + v101);
                    }
                  }
                  if ((v98 & 0xFF000000000000) != 0) {
                    uint64_t v102 = -v101;
                  }
                  else {
                    uint64_t v102 = v101;
                  }
                  sub_3579E0((uint64_t)&v146, v102, *v131, v60);
                  sub_343E08(v148, &v146);
                }
              }
            }
            else if (v95 >= 0xB)
            {
              if (v94[5])
              {
                int v96 = *(int *)((char *)v93 + v94[5]);
                if (v96) {
                  goto LABEL_144;
                }
              }
            }
LABEL_135:
            if (++v58 == v59) {
              goto LABEL_160;
            }
            continue;
          }
        }
        uint64_t v44 = v33 + 72 * v35;
        unsigned int v45 = (*(_DWORD *)(v44 + 16) & v8) + 1;
        int v46 = *(_DWORD *)(v44 + 8);
        if (v45 < 2 || v46 != 0) {
          goto LABEL_21;
        }
        v148[0] = *(char ***)v36;
        unint64_t v48 = 0x2127599BF4325C37
            * ((((unint64_t)v148[0] >> 61) & 2 | ((unint64_t)v148[0] >> 63) | ((unint64_t)v148[0] >> 30) & 0xFFFFFFFC | ((uint64_t)v148[0] << 32)) ^ ((((unint64_t)v148[0] >> 30) & 0xFFFFFFFC | ((uint64_t)v148[0] << 32)) >> 23));
        unint64_t v49 = (v48 ^ ~(v48 >> 47)) + ((v48 ^ (v48 >> 47)) << 21);
        unint64_t v50 = 21 * ((265 * (v49 ^ (v49 >> 24))) ^ ((265 * (v49 ^ (v49 >> 24))) >> 14));
        sub_32AC3C(a1 + 11720, v148, 2147483649u * (v50 ^ (v50 >> 28)), (uint64_t **)&v146);
        uint64_t v51 = (void)v146 ? *(void *)(v147 + 8) : sub_32A6F4(v134, (unint64_t)v148[0]);
        if (v51 < *(void *)(a1 + 20656)) {
          goto LABEL_21;
        }
        *(double *)&long long v24 = sub_327854(v133, *(void *)v36);
        double v141 = *(double *)&v24;
        BOOL v64 = (uint64_t)v24 <= -1 || (((unint64_t)v24 & 0x7FFFFFFFFFFFFFFFLL) - 0x10000000000000) >> 53 >= 0x3FF;
        BOOL v65 = v64 && (unint64_t)(v24 - 1) >= 0xFFFFFFFFFFFFFLL;
        BOOL v66 = !v65 || (v24 & 0x7FFFFFFFFFFFFFFFLL) == 0;
        if (!v66 || *(double *)&v24 <= 0.0) {
          goto LABEL_21;
        }
        sub_318C48(v134, *(void *)v36, (unint64_t *)&v142);
        uint64_t v68 = __p;
        long long v139 = __p;
        uint64_t v70 = (uint64_t *)v142;
        uint64_t v69 = v143;
        *(void *)&long long v146 = &__p;
        if (v142 == v143)
        {
          size_t v71 = __p;
          goto LABEL_187;
        }
        do
        {
          uint64_t v104 = *v70;
          uint64_t v105 = (int *)sub_2D5D58(a1, *v70 & 0xFFFFFFFFFFFFLL);
          uint64_t v106 = (unsigned __int16 *)((char *)v105 - *v105);
          unsigned int v107 = *v106;
          if ((v104 & 0xFF000000000000) != 0)
          {
            if (v107 < 0xB) {
              goto LABEL_166;
            }
            if (!v106[5]) {
              goto LABEL_166;
            }
            int v108 = *(int *)((char *)v105 + v106[5]);
            if ((v108 & 2) == 0) {
              goto LABEL_166;
            }
          }
          else
          {
            if (v107 < 0xB) {
              goto LABEL_166;
            }
            if (!v106[5]) {
              goto LABEL_166;
            }
            int v108 = *(int *)((char *)v105 + v106[5]);
            if ((v108 & 1) == 0) {
              goto LABEL_166;
            }
          }
          if (v107 < 0x1B
            || !v106[13]
            || *(_DWORD *)(a1 + 20644) >= *((unsigned __int8 *)v105 + v106[13]))
          {
            uint64_t v109 = v106[4];
            if (v109) {
              uint64_t v109 = *(unsigned int *)((char *)v105 + v109);
            }
            if (v109 >= *(void *)(a1 + 20656) && ((v108 & 0x4000000) == 0 || !*(unsigned char *)(a1 + 20648)))
            {
              uint64_t v110 = *v70;
              unint64_t v111 = (int *)sub_2D5D58(a1, *v70 & 0xFFFFFFFFFFFFLL);
              int64_t v112 = (unsigned __int16 *)((char *)v111 - *v111);
              if (*v112 < 0x1Du)
              {
                uint64_t v103 = 0;
              }
              else
              {
                uint64_t v103 = v112[14];
                if (v103) {
                  uint64_t v103 = *(void *)((char *)v111 + v103);
                }
              }
              if ((v110 & 0xFF000000000000) != 0) {
                uint64_t v103 = -v103;
              }
              v148[0] = (char **)v103;
              sub_32B48C((uint64_t *)&v146, v148);
            }
          }
LABEL_166:
          ++v70;
        }
        while (v70 != v69);
        size_t v71 = __p;
        uint64_t v68 = v139;
LABEL_187:
        int v18 = v135;
        if (v71 == v68)
        {
LABEL_21:
          *(unsigned char *)(v33 + 72 * v35 + 64) = 1;
          goto LABEL_22;
        }
        *(void *)&long long v24 = *(void *)(v33 + 72 * v35 + 40);
        if (*v137)
        {
          LODWORD(v67) = *(_DWORD *)(a1 + 20672);
          double v61 = (double)v67;
          double v62 = *(double *)&v24 / v61;
          if (v62 >= 0.0)
          {
            if (v62 < 4.50359963e15)
            {
              uint64_t v63 = (uint64_t)(v62 + v62) + 1;
              goto LABEL_79;
            }
          }
          else if (v62 > -4.50359963e15)
          {
            uint64_t v63 = (uint64_t)(v62 + v62);
            if (v63 >= 1) {
              --v63;
            }
LABEL_79:
            double v62 = (double)(v63 >> 1);
          }
          *(double *)&long long v24 = fmax(v62 * v61, 1.0);
        }
        if (*(double *)&v24 / v141 >= *(float *)(a1 + 20664) && *(double *)&v24 / v141 <= *(float *)(a1 + 20668))
        {
          *(unsigned char *)(v33 + 72 * v35 + 64) = 2;
        }
        else
        {
          *(unsigned char *)(v33 + 72 * v35 + 64) = 3;
          uint64_t v72 = (uint64_t *)__p;
          uint64_t v73 = (uint64_t *)v139;
          if (__p != v139)
          {
            uint64_t v74 = (char *)v135[2];
            int v75 = vcvtad_u64_f64(*(double *)&v24);
            do
            {
              sub_3579E0((uint64_t)&v146, *v72, *(_DWORD *)(v36 + 16), v75);
              uint64_t v74 = sub_343F1C(v23, v74, &v146) + 16;
              ++v72;
            }
            while (v72 != v73);
          }
        }
        ++v35;
        int v18 = v135;
LABEL_23:
        uint64_t v33 = v18[4];
      }
      while (v35 < 0x8E38E38E38E38E39 * ((v18[5] - v33) >> 3));
    }
    unint64_t v113 = v18[1];
    unint64_t v114 = (long long *)v18[2];
    unint64_t v115 = 126 - 2 * __clz((uint64_t)((uint64_t)v114 - v113) >> 4);
    if (v114 == (long long *)v113) {
      uint64_t v116 = 0;
    }
    else {
      uint64_t v116 = v115;
    }
    sub_344168(v113, v114, v116, 1);
    uint64_t v118 = v18[1];
    uint64_t v117 = v18[2];
    if (v118 == v117)
    {
      uint64_t v117 = v18[1];
      uint64_t v120 = v130;
    }
    else
    {
      uint64_t v119 = v118 - 16;
      uint64_t v120 = v130;
      do
      {
        if (v119 + 32 == v117) {
          goto LABEL_212;
        }
        uint64_t v121 = *(void *)(v119 + 16);
        v119 += 16;
      }
      while (v121 != *(void *)(v119 + 16) || *(_DWORD *)(v119 + 8) != *(_DWORD *)(v119 + 24));
      uint64_t v123 = v119 + 32;
      if (v119 + 32 == v117)
      {
        uint64_t v124 = v119 + 16;
        if (v119 + 16 == v117) {
          goto LABEL_212;
        }
        goto LABEL_211;
      }
      do
      {
        if (*(void *)v119 != *(void *)v123 || *(_DWORD *)(v119 + 8) != *(_DWORD *)(v123 + 8))
        {
          *(_OWORD *)(v119 + 16) = *(_OWORD *)v123;
          v119 += 16;
        }
        v123 += 16;
      }
      while (v123 != v117);
      uint64_t v118 = v18[1];
      uint64_t v117 = v18[2];
      uint64_t v124 = v119 + 16;
      if (v119 + 16 != v117)
      {
LABEL_211:
        uint64_t v117 = v124;
        v18[2] = v124;
      }
    }
LABEL_212:
    *(void *)&long long v146 = *v120;
    uint64_t v126 = sub_32A014((uint64_t)(v120 + 2), (unsigned int *)v146, (uint64_t)&unk_20F06E0, (_DWORD **)&v146);
    *((_DWORD *)v126 + 7) += (unint64_t)(v117 - v118) >> 4;
    double v127 = sub_72688((uint64_t)v145);
    *(void *)&long long v146 = *v120;
    uint64_t v128 = sub_32A014((uint64_t)(v120 + 2), (unsigned int *)v146, (uint64_t)&unk_20F06E0, (_DWORD **)&v146);
    LODWORD(v129) = *((_DWORD *)v128 + 15);
    *((_DWORD *)v128 + 15) = (v127 + (double)v129);
    if (__p)
    {
      long long v139 = __p;
      operator delete(__p);
    }
    if (v142)
    {
      uint64_t v143 = (uint64_t *)v142;
      operator delete(v142);
    }
  }
}

void sub_323B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v25 = a23;
    if (!a23) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v25 = a23;
    if (!a23) {
      goto LABEL_3;
    }
  }
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

time_t sub_323BE4(uint64_t a1, char **a2, uint64_t a3)
{
  unint64_t v4 = &a2[1][(void)*a2];
  v27[0] = *a2;
  v27[1] = v4;
  uint64_t v28 = 0x2C700000000;
  if (sub_2F333C((uint64_t)v27))
  {
    while (v28 != 4)
    {
      sub_2F3548((uint64_t)v27);
      if (!sub_2F333C((uint64_t)v27)) {
        goto LABEL_33;
      }
    }
    __t.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)sub_2F3488(v27);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v25 = __t.__d_.__rep_ + v5;
    uint64_t v26 = 0x2C700000000;
    while (sub_30DA40((uint64_t)&__t))
    {
      while (v26 == 2)
      {
        int8x16_t v12 = sub_30DB8C((char **)&__t);
        if (v13 > 0x7FFFFFFFFFFFFFF7) {
LABEL_34:
        }
          sub_188D690();
        uint64_t v14 = v12;
        size_t v15 = v13;
        if (v13 >= 0x17)
        {
          uint64_t v19 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v13 | 7) != 0x17) {
            uint64_t v19 = v13 | 7;
          }
          uint64_t v20 = v19 + 1;
          p_dst = (long long *)operator new(v19 + 1);
          *((void *)&__dst + 1) = v15;
          unint64_t v23 = v20 | 0x8000000000000000;
          *(void *)&long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v23) = v13;
          p_dst = &__dst;
          if (!v13)
          {
            LOBYTE(__dst) = 0;
            uint64_t v11 = *(void *)a3 + 544;
            if ((*(char *)(*(void *)a3 + 567) & 0x80000000) == 0) {
              goto LABEL_8;
            }
            goto LABEL_7;
          }
        }
        memmove(p_dst, v14, v15);
        *((unsigned char *)p_dst + v15) = 0;
        uint64_t v11 = *(void *)a3 + 544;
        if ((*(char *)(*(void *)a3 + 567) & 0x80000000) == 0) {
          goto LABEL_8;
        }
LABEL_7:
        operator delete(*(void **)v11);
LABEL_8:
        *(_OWORD *)uint64_t v11 = __dst;
        *(void *)(v11 + 16) = v23;
        if (!sub_30DA40((uint64_t)&__t)) {
          goto LABEL_33;
        }
      }
      if (v26 == 1)
      {
        uint64_t v6 = sub_30DB8C((char **)&__t);
        if (v7 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_34;
        }
        __int32 v8 = v6;
        size_t v9 = v7;
        if (v7 >= 0x17)
        {
          uint64_t v17 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17) {
            uint64_t v17 = v7 | 7;
          }
          uint64_t v18 = v17 + 1;
          uint64_t v10 = (long long *)operator new(v17 + 1);
          *((void *)&__dst + 1) = v9;
          unint64_t v23 = v18 | 0x8000000000000000;
          *(void *)&long long __dst = v10;
        }
        else
        {
          HIBYTE(v23) = v7;
          uint64_t v10 = &__dst;
          if (!v7)
          {
            LOBYTE(__dst) = 0;
            uint64_t v11 = *(void *)a3 + 520;
            if ((*(char *)(*(void *)a3 + 543) & 0x80000000) == 0) {
              goto LABEL_8;
            }
            goto LABEL_7;
          }
        }
        memmove(v10, v8, v9);
        *((unsigned char *)v10 + v9) = 0;
        uint64_t v11 = *(void *)a3 + 520;
        if ((*(char *)(*(void *)a3 + 543) & 0x80000000) == 0) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
      sub_30DC4C((uint64_t)&__t);
    }
  }
LABEL_33:
  __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  time_t result = std::chrono::system_clock::to_time_t(&__t);
  *(_DWORD *)(*(void *)a3 + 504) = result;
  return result;
}

void sub_323E34(long long **a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = 126 - 2 * __clz(0x8E38E38E38E38E39 * (v3 - v2));
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  sub_33F340((unsigned int *)v2, v3, (uint64_t)&v7, v5, 1);
  uint64_t v6 = sub_343154(*a1, a1[1]);
  if (a1[1] != (long long *)v6) {
    sub_329660((uint64_t)a1, v6);
  }
}

void *sub_323F08(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = (void *)a1[2];
  a1[2] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  if (!v5 || atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_323FAC(uint64_t a1, uint64_t a2, int **a3)
{
  uint64_t v6 = *(void *)a2 + *(void *)(a2 + 8);
  char v43 = *(float **)a2;
  uint64_t v44 = v6;
  uint64_t v45 = 0x2C700000000;
  if (sub_2F333C((uint64_t)&v43))
  {
    while (v45 != 1)
    {
      sub_2F3548((uint64_t)&v43);
      if (!sub_2F333C((uint64_t)&v43)) {
        return;
      }
    }
    v41[0] = sub_2F3488((char **)&v43);
    v41[1] = v41[0] + v7;
    uint64_t v42 = 0x2C700000000;
    if (sub_30DA40((uint64_t)v41))
    {
      char v8 = 0;
      do
      {
        while (1)
        {
          int v9 = v42;
          sub_30DC4C((uint64_t)v41);
          BOOL v10 = sub_30DA40((uint64_t)v41);
          if (v9 != 6) {
            break;
          }
          char v8 = 1;
          if (!v10) {
            goto LABEL_13;
          }
        }
      }
      while (v10);
      if ((v8 & 1) == 0) {
        return;
      }
LABEL_13:
      int v11 = **a3;
      *(void *)&long long v36 = *a3;
      int8x16_t v12 = sub_32A014((uint64_t)(a3 + 2), (unsigned int *)v36, (uint64_t)&unk_20F06E0, (_DWORD **)&v36);
      sub_3178EC(a1 + 20256, (float **)a2, v11, (_DWORD *)v12 + 6, (uint64_t)&v36);
      if (v36)
      {
        uint64_t v13 = *(void *)a2 + *(void *)(a2 + 8);
        char v43 = *(float **)a2;
        uint64_t v44 = v13;
        uint64_t v45 = 0x2C700000000;
        if (sub_2F333C((uint64_t)&v43))
        {
          while (v45 != 7)
          {
            sub_2F3548((uint64_t)&v43);
            if (!sub_2F333C((uint64_t)&v43)) {
              goto LABEL_19;
            }
          }
          v35[0] = sub_2F3488((char **)&v43);
          v35[1] = v14;
          int v15 = **a3;
          uint64_t v16 = sub_3242C0(a1 + 7824, v36);
          sub_316C50(v35, v15, v16, (uint64_t *)*a3 + 10, (uint64_t)(*a3 + 26));
        }
LABEL_19:
        uint64_t v17 = *a3;
        uint64_t v19 = (char *)*((void *)*a3 + 5);
        unint64_t v18 = *((void *)v17 + 6);
        if ((unint64_t)v19 >= v18)
        {
          long long v24 = (char *)*((void *)v17 + 4);
          unint64_t v25 = 0x8E38E38E38E38E39 * ((v19 - v24) >> 3) + 1;
          if (v25 > 0x38E38E38E38E38ELL) {
            sub_2E00();
          }
          unint64_t v26 = 0x8E38E38E38E38E39 * ((uint64_t)(v18 - (void)v24) >> 3);
          if (2 * v26 > v25) {
            unint64_t v25 = 2 * v26;
          }
          if (v26 >= 0x1C71C71C71C71C7) {
            unint64_t v27 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            if (v27 > 0x38E38E38E38E38ELL) {
              sub_188D718();
            }
            uint64_t v28 = (char *)operator new(72 * v27);
          }
          else
          {
            uint64_t v28 = 0;
          }
          int v29 = &v28[8 * ((v19 - v24) >> 3)];
          long long v30 = v39;
          *((_OWORD *)v29 + 2) = v38;
          *((_OWORD *)v29 + 3) = v30;
          *((void *)v29 + 8) = v40;
          long long v31 = v37;
          *(_OWORD *)int v29 = v36;
          *((_OWORD *)v29 + 1) = v31;
          unint64_t v23 = v29 + 72;
          if (v19 != v24)
          {
            do
            {
              *(_OWORD *)(v29 - 72) = *(_OWORD *)(v19 - 72);
              long long v32 = *(_OWORD *)(v19 - 56);
              long long v33 = *(_OWORD *)(v19 - 40);
              long long v34 = *(_OWORD *)(v19 - 24);
              *(v29 - 8) = *(v19 - 8);
              *(_OWORD *)(v29 - 24) = v34;
              *(_OWORD *)(v29 - 40) = v33;
              *(_OWORD *)(v29 - 56) = v32;
              v29 -= 72;
              v19 -= 72;
            }
            while (v19 != v24);
            uint64_t v19 = (char *)*((void *)v17 + 4);
          }
          *((void *)v17 + 4) = v29;
          *((void *)v17 + 5) = v23;
          *((void *)v17 + 6) = &v28[72 * v27];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(_OWORD *)uint64_t v19 = v36;
          long long v20 = v37;
          long long v21 = v38;
          long long v22 = v39;
          *((void *)v19 + 8) = v40;
          *((_OWORD *)v19 + 2) = v21;
          *((_OWORD *)v19 + 3) = v22;
          *((_OWORD *)v19 + 1) = v20;
          unint64_t v23 = v19 + 72;
        }
        *((void *)v17 + 5) = v23;
      }
    }
  }
}

uint64_t sub_3242C0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v4 = sub_2E5E08(a1 + 16, a2, 1);
  if (!v4) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v5 = &v4[-*(int *)v4];
  if (*(unsigned __int16 *)v5 < 5u) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  if (!*((_WORD *)v5 + 2)) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v6 = (unsigned int *)&v4[*((unsigned __int16 *)v5 + 2) + *(unsigned int *)&v4[*((unsigned __int16 *)v5 + 2)]];
  if (*v6 <= (HIDWORD(a2) & 0x3FFFFFFFu)) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v7 = (int *)((char *)v6 + 4 * HIDWORD(a2) + *(unsigned int *)((char *)v6 + (4 * HIDWORD(a2)) + 4) + 4);
  char v8 = (unsigned __int16 *)((char *)v7 - *v7);
  unsigned int v9 = *v8;
  if (v9 < 0xB) {
    goto LABEL_17;
  }
  if (!v8[5]) {
    goto LABEL_18;
  }
  int v10 = *(unsigned __int8 *)(a1 + 3889);
  if (v10 == 254) {
    goto LABEL_18;
  }
  int v11 = (int *)((char *)v7 + v8[5] + *(unsigned int *)((char *)v7 + v8[5]));
  unsigned int v14 = *v11;
  int8x16_t v12 = (unsigned __int8 *)(v11 + 1);
  uint64_t v13 = v14;
  if (!v14) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t result = 0x7FFFFFFFFFFFFFFFLL;
  while (v10 != *v12)
  {
    ++v12;
    if (!--v13) {
      return result;
    }
  }
LABEL_17:
  if (v9 < 7) {
    return 0;
  }
LABEL_18:
  uint64_t v16 = v8[3];
  if (!v16) {
    return 0;
  }
  uint64_t v17 = *(void *)((char *)v7 + v16);
  if ((a2 & 0x4000000000000000) != 0) {
    return v17;
  }
  else {
    return -v17;
  }
}

void sub_324410(uint64_t a1, uint64_t a2, int a3, unsigned int **a4)
{
  unint64_t v4 = a4;
  char v8 = *a4;
  unsigned int v9 = (unsigned char *)(a1 + 20539);
  switch(sub_2FD5D0((char **)a2))
  {
    case 0u:
      *(void *)uint64_t v285 = operator new(0x28uLL);
      *(_OWORD *)&v285[8] = xmmword_20B9260;
      strcpy(*(char **)v285, "TrafficApiParser.Incident.Invalid");
      memset(&__p, 0, sizeof(__p));
      *(void *)&long long v329 = 0;
      *(_OWORD *)long long v328 = 0u;
      long long v327 = 0u;
      *(_OWORD *)long long v326 = 0u;
      *(_OWORD *)long long v325 = 0u;
      HIBYTE(v324) = 0;
      LOBYTE(v323) = 0;
      v322 = 0;
      uint64_t v321 = 0;
      v320 = 0;
      uint64_t v319 = 0;
      sub_29DC44((uint64_t)v295, (long long **)&__p, (long long *)v325, &v323, &v321, 0, (uint64_t)&v319, 1);
      nullsub_1(2);
      sub_29E11C((uint64_t)v295);
      int v10 = v320;
      if (v320 && !atomic_fetch_add(&v320->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
      int v11 = v322;
      if (v322 && !atomic_fetch_add(&v322->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      if (SHIBYTE(v324) < 0)
      {
        operator delete((void *)v323);
        if ((SBYTE7(v329) & 0x80000000) == 0)
        {
LABEL_10:
          if ((SHIBYTE(v327) & 0x80000000) == 0) {
            goto LABEL_11;
          }
          goto LABEL_243;
        }
      }
      else if ((SBYTE7(v329) & 0x80000000) == 0)
      {
        goto LABEL_10;
      }
      operator delete(v328[0]);
      if ((SHIBYTE(v327) & 0x80000000) == 0)
      {
LABEL_11:
        if ((SHIBYTE(v326[0]) & 0x80000000) == 0) {
          goto LABEL_12;
        }
        goto LABEL_244;
      }
LABEL_243:
      operator delete(v326[1]);
      if ((SHIBYTE(v326[0]) & 0x80000000) == 0)
      {
LABEL_12:
        int8x16_t v12 = (void *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0]) {
          goto LABEL_13;
        }
LABEL_245:
        if ((v285[23] & 0x80000000) != 0) {
          goto LABEL_15;
        }
        goto LABEL_246;
      }
LABEL_244:
      operator delete(v325[0]);
      int8x16_t v12 = (void *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_245;
      }
LABEL_13:
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
      if ((void *)__p.__r_.__value_.__l.__size_ == v12)
      {
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
        operator delete(v12);
        if ((v285[23] & 0x80000000) != 0) {
          goto LABEL_15;
        }
        goto LABEL_246;
      }
      do
      {
        while (*(char *)(size - 1) < 0)
        {
          operator delete(*(void **)(size - 24));
          if (*(char *)(size - 25) < 0) {
            goto LABEL_21;
          }
LABEL_18:
          size -= 48;
          if ((void *)size == v12) {
            goto LABEL_22;
          }
        }
        if ((*(char *)(size - 25) & 0x80000000) == 0) {
          goto LABEL_18;
        }
LABEL_21:
        operator delete(*(void **)(size - 48));
        size -= 48;
      }
      while ((void *)size != v12);
LABEL_22:
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((v285[23] & 0x80000000) != 0)
      {
LABEL_15:
        operator delete(*(void **)v285);
        if (!sub_723EC(3u)) {
          return;
        }
        goto LABEL_247;
      }
LABEL_246:
      if (!sub_723EC(3u)) {
        return;
      }
LABEL_247:
      sub_6BAC((uint64_t)v325);
      long long v139 = sub_188FC78(v325, (uint64_t)"Invalid incident without any specified type in ", 47);
      int v140 = *(char *)(a1 + 20703);
      if (v140 >= 0) {
        uint64_t v141 = a1 + 20680;
      }
      else {
        uint64_t v141 = *(void *)(a1 + 20680);
      }
      if (v140 >= 0) {
        uint64_t v142 = *(unsigned __int8 *)(a1 + 20703);
      }
      else {
        uint64_t v142 = *(void *)(a1 + 20688);
      }
      uint64_t v143 = sub_188FC78(v139, v141, v142);
      uint64_t v144 = sub_188FC78(v143, (uint64_t)": ", 2);
      sub_1687148((uint64_t)v295, 0, 0);
      sub_188AF1C((uint64_t)v295, *(char **)a2, *(_DWORD *)(a2 + 8));
      sub_188AB38((unint64_t)v295, (std::string *)v285);
      sub_168738C(v295);
      if (v285[23] >= 0) {
        uint64_t v145 = v285;
      }
      else {
        uint64_t v145 = *(unsigned char **)v285;
      }
      if (v285[23] >= 0) {
        uint64_t v146 = v285[23];
      }
      else {
        uint64_t v146 = *(void *)&v285[8];
      }
      sub_188FC78(v144, (uint64_t)v145, v146);
      if ((v285[23] & 0x80000000) != 0) {
        operator delete(*(void **)v285);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)v295, 3u);
      if (v296 < 0) {
        operator delete(v295[0]);
      }
      if (v330 < 0) {
        operator delete(*((void **)&v329 + 1));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      return;
    case 1u:
      *(void *)uint64_t v285 = operator new(0x28uLL);
      *(_OWORD *)&v285[8] = xmmword_20B9260;
      strcpy(*(char **)v285, "TrafficApiParser.Incident.Ignored");
      memset(&__p, 0, sizeof(__p));
      *(void *)&long long v329 = 0;
      *(_OWORD *)long long v328 = 0u;
      long long v327 = 0u;
      *(_OWORD *)long long v326 = 0u;
      *(_OWORD *)long long v325 = 0u;
      HIBYTE(v324) = 0;
      LOBYTE(v323) = 0;
      long long v318 = 0;
      uint64_t v317 = 0;
      long long v316 = 0;
      uint64_t v315 = 0;
      sub_29DC44((uint64_t)v295, (long long **)&__p, (long long *)v325, &v323, &v317, 0, (uint64_t)&v315, 1);
      nullsub_1(2);
      sub_29E11C((uint64_t)v295);
      unint64_t v48 = v316;
      if (v316 && !atomic_fetch_add(&v316->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
      unint64_t v49 = v318;
      if (v318 && !atomic_fetch_add(&v318->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
      if (SHIBYTE(v324) < 0)
      {
        operator delete((void *)v323);
        if ((SBYTE7(v329) & 0x80000000) == 0)
        {
LABEL_93:
          if ((SHIBYTE(v327) & 0x80000000) == 0) {
            goto LABEL_94;
          }
          goto LABEL_268;
        }
      }
      else if ((SBYTE7(v329) & 0x80000000) == 0)
      {
        goto LABEL_93;
      }
      operator delete(v328[0]);
      if ((SHIBYTE(v327) & 0x80000000) == 0)
      {
LABEL_94:
        if ((SHIBYTE(v326[0]) & 0x80000000) == 0) {
          goto LABEL_95;
        }
        goto LABEL_269;
      }
LABEL_268:
      operator delete(v326[1]);
      if ((SHIBYTE(v326[0]) & 0x80000000) == 0)
      {
LABEL_95:
        std::string::size_type v34 = __p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0]) {
          goto LABEL_291;
        }
        goto LABEL_270;
      }
LABEL_269:
      operator delete(v325[0]);
      std::string::size_type v34 = __p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_291;
      }
LABEL_270:
      std::string::size_type v147 = __p.__r_.__value_.__l.__size_;
      char v138 = (void *)v34;
      if (__p.__r_.__value_.__l.__size_ == v34) {
        goto LABEL_278;
      }
      while (1)
      {
        if (*(char *)(v147 - 1) < 0)
        {
          operator delete(*(void **)(v147 - 24));
          if ((*(char *)(v147 - 25) & 0x80000000) == 0) {
            goto LABEL_273;
          }
LABEL_276:
          operator delete(*(void **)(v147 - 48));
          v147 -= 48;
          if (v147 == v34) {
            goto LABEL_277;
          }
        }
        else
        {
          if (*(char *)(v147 - 25) < 0) {
            goto LABEL_276;
          }
LABEL_273:
          v147 -= 48;
          if (v147 == v34) {
            goto LABEL_277;
          }
        }
      }
    case 2u:
      *(void *)uint64_t v285 = operator new(0x28uLL);
      *(_OWORD *)&v285[8] = xmmword_20B9240;
      strcpy(*(char **)v285, "TrafficApiParser.Incident.IgnoredType");
      memset(&__p, 0, sizeof(__p));
      *(void *)&long long v329 = 0;
      *(_OWORD *)long long v328 = 0u;
      long long v327 = 0u;
      *(_OWORD *)long long v326 = 0u;
      *(_OWORD *)long long v325 = 0u;
      HIBYTE(v324) = 0;
      LOBYTE(v323) = 0;
      long long v314 = 0;
      uint64_t v313 = 0;
      long long v312 = 0;
      uint64_t v311 = 0;
      sub_29DC44((uint64_t)v295, (long long **)&__p, (long long *)v325, &v323, &v313, 0, (uint64_t)&v311, 1);
      nullsub_1(2);
      sub_29E11C((uint64_t)v295);
      long long v32 = v312;
      if (v312 && !atomic_fetch_add(&v312->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
      long long v33 = v314;
      if (v314 && !atomic_fetch_add(&v314->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
      if (SHIBYTE(v324) < 0)
      {
        operator delete((void *)v323);
        if ((SBYTE7(v329) & 0x80000000) == 0)
        {
LABEL_57:
          if ((SHIBYTE(v327) & 0x80000000) == 0) {
            goto LABEL_58;
          }
          goto LABEL_231;
        }
      }
      else if ((SBYTE7(v329) & 0x80000000) == 0)
      {
        goto LABEL_57;
      }
      operator delete(v328[0]);
      if ((SHIBYTE(v327) & 0x80000000) == 0)
      {
LABEL_58:
        if ((SHIBYTE(v326[0]) & 0x80000000) == 0) {
          goto LABEL_59;
        }
LABEL_232:
        operator delete(v325[0]);
        std::string::size_type v34 = __p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0]) {
          goto LABEL_291;
        }
LABEL_233:
        std::string::size_type v137 = __p.__r_.__value_.__l.__size_;
        char v138 = (void *)v34;
        if (__p.__r_.__value_.__l.__size_ == v34) {
          goto LABEL_278;
        }
        while (1)
        {
          if (*(char *)(v137 - 1) < 0)
          {
            operator delete(*(void **)(v137 - 24));
            if ((*(char *)(v137 - 25) & 0x80000000) == 0) {
              goto LABEL_236;
            }
LABEL_239:
            operator delete(*(void **)(v137 - 48));
            v137 -= 48;
            if (v137 == v34)
            {
LABEL_277:
              char v138 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_278:
              __p.__r_.__value_.__l.__size_ = v34;
LABEL_290:
              operator delete(v138);
LABEL_291:
              if ((v285[23] & 0x80000000) != 0) {
                operator delete(*(void **)v285);
              }
              return;
            }
          }
          else
          {
            if (*(char *)(v137 - 25) < 0) {
              goto LABEL_239;
            }
LABEL_236:
            v137 -= 48;
            if (v137 == v34) {
              goto LABEL_277;
            }
          }
        }
      }
LABEL_231:
      operator delete(v326[1]);
      if ((SHIBYTE(v326[0]) & 0x80000000) == 0)
      {
LABEL_59:
        std::string::size_type v34 = __p.__r_.__value_.__r.__words[0];
        if (!__p.__r_.__value_.__r.__words[0]) {
          goto LABEL_291;
        }
        goto LABEL_233;
      }
      goto LABEL_232;
    case 3u:
      sub_2FD874((uint64_t *)(a1 + 20304), (void *)a2, (uint64_t)v295);
      uint64_t v35 = v299;
      if ((v299 & 0x80u) != 0) {
        uint64_t v35 = v298;
      }
      if (v35)
      {
        if (v295[0] != v295[1]
          && ((sub_30301C(a1 + 20304) & 1) != 0 || sub_358898((uint64_t)v295, a3))
          && !sub_3588BC((uint64_t)v295, a3))
        {
          sub_3588D4((uint64_t)v295, a3);
          uint64_t v36 = v302;
          if ((v302 & 0x80u) != 0) {
            uint64_t v36 = v301[1];
          }
          if (v36 && v295[0] != v295[1] && *(void *)v295[0] != *((void *)v295[0] + 1))
          {
            v325[0] = *v4;
            long long v37 = sub_32A014((uint64_t)(v4 + 2), (unsigned int *)v325[0], (uint64_t)&unk_20F06E0, (_DWORD **)v325);
            ++*((_DWORD *)v37 + 41);
            unsigned int v38 = **(_DWORD **)v295[0];
            unsigned __int16 v39 = sub_326F64(a1, v38 | ((unint64_t)*(unsigned __int16 *)(*(void *)v295[0] + 4) << 32));
            sub_326FA8(a1, v39, v285);
            sub_26A18((uint64_t)&v323, v285);
            if (sub_2A9F0((uint64_t)&v323))
            {
              if (sub_723EC(1u))
              {
                sub_6BAC((uint64_t)v325);
                uint64_t v40 = sub_188FC78(v325, (uint64_t)"Invalid timezone retrieval for road_id ", 39);
                int v41 = sub_2D620C(v40, v38);
                uint64_t v42 = sub_188FC78(v41, (uint64_t)", region_id ", 12);
                std::ostream::operator<<();
                char v43 = sub_188FC78(v42, (uint64_t)", and timezone name ", 20);
                if (v285[23] >= 0) {
                  uint64_t v44 = v285;
                }
                else {
                  uint64_t v44 = *(unsigned char **)v285;
                }
                if (v285[23] >= 0) {
                  uint64_t v45 = v285[23];
                }
                else {
                  uint64_t v45 = *(void *)&v285[8];
                }
                int v46 = sub_188FC78(v43, (uint64_t)v44, v45);
                sub_188FC78(v46, (uint64_t)".", 1);
                std::stringbuf::str();
                sub_7246C((uint64_t *)&__p, 1u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                sub_111ECAC((uint64_t)v325);
              }
              v325[0] = *v4;
              unint64_t v47 = sub_32A014((uint64_t)(v4 + 2), (unsigned int *)v325[0], (uint64_t)&unk_20F06E0, (_DWORD **)v325);
LABEL_426:
              ++*((_DWORD *)v47 + 42);
              sub_26C4C((const void **)&v323);
              if ((v285[23] & 0x80000000) != 0)
              {
                int64_t v195 = *(void **)v285;
LABEL_357:
                operator delete(v195);
              }
              goto LABEL_358;
            }
            sub_48B4(a1 + 20424, (CFTimeZoneRef *)&v323);
            if ((sub_11B0C((void *)(a1 + 20472), (unsigned int *)(a1 + 20424), (uint64_t)v301, 0) & 1) == 0)
            {
              v325[0] = *v4;
              unint64_t v47 = sub_32A014((uint64_t)(v4 + 2), (unsigned int *)v325[0], (uint64_t)&unk_20F06E0, (_DWORD **)v325);
              goto LABEL_426;
            }
            sub_26C4C((const void **)&v323);
            if ((v285[23] & 0x80000000) != 0) {
              operator delete(*(void **)v285);
            }
          }
          uint64_t v196 = *((void *)v8 + 19);
          uint64_t v197 = *((void *)v8 + 20);
          uint64_t v198 = *((void *)v8 + 22);
          BOOL v278 = (void **)(v8 + 44);
          uint64_t v199 = *((void *)v8 + 23);
          sub_358214((char *)v295, (uint64_t)v284);
          sub_35841C((char *)v295, (uint64_t)v283);
          uint64_t v200 = sub_3271C8(v284, v283);
          sub_3270C0((uint64_t)(v8 + 44), v200 - 0x5555555555555555 * ((v199 - v198) >> 3));
          sub_2FC938(v283);
          sub_2FC938(v284);
          sub_3585E0((char *)v295, (uint64_t)v325);
          sub_2FCB1C((uint64_t)v285, (long long *)v325);
          sub_2FCB1C((uint64_t)&__p, &v329);
          uint64_t v201 = 0x21CFB2B78C13521DLL * ((v197 - v196) >> 3);
          unint64_t v276 = (uint64_t **)(v8 + 68);
          uint64_t v202 = *(void *)&v285[40];
          uint64_t v203 = *(void *)&v285[48];
          while (1)
          {
            if (v202 == v203 || v281 == v282)
            {
              if ((v202 == v203) == (v281 == v282)) {
                goto LABEL_412;
              }
              uint64_t v205 = **(void **)v285;
              int64_t v207 = (char *)*((void *)v8 + 23);
              unint64_t v206 = *((void *)v8 + 24);
              if ((unint64_t)v207 < v206) {
                goto LABEL_371;
              }
            }
            else
            {
              if (*(void *)&v285[8] == __p.__r_.__value_.__l.__size_
                && *(void *)v285 == __p.__r_.__value_.__r.__words[0])
              {
LABEL_412:
                sub_2FC938(&__p);
                sub_2FC938(v285);
                sub_2FC97C(v325);
                v325[0] = *v4;
                int v245 = sub_32A014((uint64_t)(v4 + 2), (unsigned int *)v325[0], (uint64_t)&unk_20F06E0, (_DWORD **)v325);
                ++*((_DWORD *)v245 + 28);
                int v246 = sub_3586DC((uint64_t)v295);
                v325[0] = *v4;
                uint64_t v247 = sub_32A014((uint64_t)(v4 + 2), (unsigned int *)v325[0], (uint64_t)&unk_20F06E0, (_DWORD **)v325);
                *((_DWORD *)v247 + 29) += v246;
                int v248 = sub_35870C((uint64_t)v295);
                v325[0] = *v4;
                uint64_t v249 = sub_32A014((uint64_t)(v4 + 2), (unsigned int *)v325[0], (uint64_t)&unk_20F06E0, (_DWORD **)v325);
                *((_DWORD *)v249 + 30) += v248;
                int v250 = sub_35873C((uint64_t)v295);
                v325[0] = *v4;
                uint64_t v251 = sub_32A014((uint64_t)(v4 + 2), (unsigned int *)v325[0], (uint64_t)&unk_20F06E0, (_DWORD **)v325);
                *((_DWORD *)v251 + 31) += v250;
                int v252 = sub_358820((uint64_t)v295);
                v325[0] = *v4;
                uint64_t v253 = sub_32A014((uint64_t)(v4 + 2), (unsigned int *)v325[0], (uint64_t)&unk_20F06E0, (_DWORD **)v325);
                *((_DWORD *)v253 + 43) += v252;
                BOOL v254 = sub_358820((uint64_t)v295);
                int v255 = v303;
                v325[0] = *v4;
                v256 = sub_32A014((uint64_t)(v4 + 2), (unsigned int *)v325[0], (uint64_t)&unk_20F06E0, (_DWORD **)v325);
                if (v255) {
                  int v257 = v254;
                }
                else {
                  int v257 = 0;
                }
                *((_DWORD *)v256 + 44) += v257;
                if (!sub_358820((uint64_t)v295) || (long long v258 = v304, v304 == v305))
                {
                  int v261 = 0;
                }
                else
                {
                  while (1)
                  {
                    uint64_t v259 = *v258;
                    uint64_t v260 = v258[1];
                    if (*v258 != v260) {
                      break;
                    }
LABEL_420:
                    int v261 = 0;
                    v258 += 7;
                    if (v258 == v305) {
                      goto LABEL_424;
                    }
                  }
                  while (*(void *)(v259 + 56) == -1)
                  {
                    v259 += 72;
                    if (v259 == v260) {
                      goto LABEL_420;
                    }
                  }
                  int v261 = 1;
                }
LABEL_424:
                v325[0] = *v4;
                uint64_t v262 = sub_32A014((uint64_t)(v4 + 2), (unsigned int *)v325[0], (uint64_t)&unk_20F06E0, (_DWORD **)v325);
                *((_DWORD *)v262 + 45) += v261;
                sub_3273A0((char *)a1, (uint64_t)v295, v4);
                sub_29C654((uint64_t *)v8 + 19, (uint64_t)v295);
                break;
              }
              uint64_t v205 = **(void **)v285;
              int64_t v207 = (char *)*((void *)v8 + 23);
              unint64_t v206 = *((void *)v8 + 24);
              if ((unint64_t)v207 < v206)
              {
LABEL_371:
                int v208 = *v8;
                *(void *)int64_t v207 = v205;
                *((_DWORD *)v207 + 2) = v208;
                *((void *)v207 + 2) = v201;
                uint64_t v209 = v207 + 24;
                goto LABEL_386;
              }
            }
            int64x2_t v210 = (char *)*v278;
            unint64_t v211 = 0xAAAAAAAAAAAAAAABLL * ((v207 - (unsigned char *)*v278) >> 3);
            unint64_t v212 = v211 + 1;
            if (v211 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_2E00();
            }
            unint64_t v213 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v206 - (void)v210) >> 3);
            if (2 * v213 > v212) {
              unint64_t v212 = 2 * v213;
            }
            if (v213 >= 0x555555555555555) {
              unint64_t v214 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v214 = v212;
            }
            if (v214 > 0xAAAAAAAAAAAAAAALL) {
              sub_188D718();
            }
            int v215 = (char *)operator new(24 * v214);
            int v216 = *v8;
            uint64_t v217 = &v215[24 * v211];
            *(void *)uint64_t v217 = v205;
            *((_DWORD *)v217 + 2) = v216;
            *((void *)v217 + 2) = v201;
            if (v207 == v210)
            {
              int v243 = &v215[24 * v214];
              uint64_t v209 = v217 + 24;
              *((void *)v8 + 22) = v217;
              *((void *)v8 + 23) = v217 + 24;
              *((void *)v8 + 24) = v243;
              if (v210) {
                goto LABEL_385;
              }
            }
            else
            {
              unsigned int v218 = &v215[24 * v211];
              do
              {
                long long v219 = *(_OWORD *)(v207 - 24);
                char v220 = v218 - 24;
                *((void *)v218 - 1) = *((void *)v207 - 1);
                *(_OWORD *)(v218 - 24) = v219;
                v207 -= 24;
                v218 -= 24;
              }
              while (v207 != v210);
              unint64_t v221 = &v215[24 * v214];
              uint64_t v209 = v217 + 24;
              *((void *)v8 + 22) = v220;
              *((void *)v8 + 23) = v217 + 24;
              *((void *)v8 + 24) = v221;
              if (v210) {
LABEL_385:
              }
                operator delete(v210);
            }
LABEL_386:
            unint64_t v4 = a4;
            *((void *)v8 + 23) = v209;
            if (v300 == 14)
            {
              uint64_t v222 = sub_35535C(v205, *v8, v297, a1);
              uint64_t v224 = v222;
              uint64_t v225 = v223;
              int64_t v227 = (uint64_t *)*((void *)v8 + 35);
              unint64_t v226 = *((void *)v8 + 36);
              if ((unint64_t)v227 < v226)
              {
                uint64_t *v227 = v222;
                v227[1] = v223;
                uint64_t v228 = v227 + 2;
                unint64_t v4 = a4;
LABEL_402:
                *((void *)v8 + 35) = v228;
                goto LABEL_403;
              }
              unint64_t v229 = *v276;
              uint64_t v230 = ((char *)v227 - (char *)*v276) >> 4;
              unint64_t v231 = v230 + 1;
              if ((unint64_t)(v230 + 1) >> 60) {
                sub_2E00();
              }
              uint64_t v232 = v226 - (void)v229;
              if (v232 >> 3 > v231) {
                unint64_t v231 = v232 >> 3;
              }
              if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v233 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v233 = v231;
              }
              if (v233)
              {
                if (v233 >> 60) {
                  sub_188D718();
                }
                uint64_t v234 = (char *)operator new(16 * v233);
                int v235 = (uint64_t *)&v234[16 * v230];
                *int v235 = v224;
                v235[1] = v225;
                uint64_t v236 = (uint64_t)v235;
                if (v227 != v229) {
                  goto LABEL_398;
                }
LABEL_410:
                unint64_t v4 = a4;
                BOOL v244 = &v234[16 * v233];
                uint64_t v228 = v235 + 2;
                *((void *)v8 + 34) = v236;
                *((void *)v8 + 35) = v235 + 2;
                *((void *)v8 + 36) = v244;
                if (!v227) {
                  goto LABEL_402;
                }
              }
              else
              {
                uint64_t v234 = 0;
                int v235 = (uint64_t *)(16 * v230);
                *int v235 = v224;
                v235[1] = v223;
                uint64_t v236 = 16 * v230;
                if (v227 == v229) {
                  goto LABEL_410;
                }
LABEL_398:
                unint64_t v4 = a4;
                do
                {
                  uint64_t v237 = *(v227 - 2);
                  v227 -= 2;
                  uint64_t v238 = *(uint64_t *)((char *)v227 + 7);
                  *(void *)(v236 - 16) = v237;
                  v236 -= 16;
                  *(void *)(v236 + 7) = v238;
                }
                while (v227 != v229);
                int64_t v227 = *v276;
                BOOL v239 = &v234[16 * v233];
                uint64_t v228 = v235 + 2;
                *((void *)v8 + 34) = v236;
                *((void *)v8 + 35) = v235 + 2;
                *((void *)v8 + 36) = v239;
                if (!v227) {
                  goto LABEL_402;
                }
              }
              operator delete(v227);
              goto LABEL_402;
            }
LABEL_403:
            uint64_t v240 = *(void *)&v285[8];
            uint64_t v241 = *(void *)v285 + 8;
            uint64_t v202 = *(void *)&v285[40];
            uint64_t v203 = *(void *)&v285[48];
            unint64_t v242 = ((uint64_t)(*(void *)&v285[48] - *(void *)&v285[40]) >> 3) - 1;
            *(void *)v285 += 8;
            if (*(void *)&v285[8] < v242)
            {
              do
              {
                if (v241 != *(void *)(*(void *)&v285[40] + 8 * v240)) {
                  break;
                }
                *(void *)&v285[8] = v240 + 1;
                uint64_t v241 = *(void *)(*(void *)&v285[16] + 8 + 8 * v240);
                *(void *)uint64_t v285 = v241;
                ++v240;
              }
              while (v242 != *(void *)&v285[8]);
            }
          }
        }
LABEL_358:
        sub_29D95C((uint64_t)v295);
        return;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B9260;
      strcpy(__p.__r_.__value_.__l.__data_, "TrafficApiParser.Incident.Invalid");
      long long v323 = 0uLL;
      uint64_t v324 = 0;
      uint64_t v286 = 0;
      memset(v285, 0, sizeof(v285));
      char v294 = 0;
      LOBYTE(v293) = 0;
      unint64_t v292 = 0;
      uint64_t v291 = 0;
      v290 = 0;
      uint64_t v289 = 0;
      sub_29DC44((uint64_t)v325, (long long **)&v323, (long long *)v285, &v293, &v291, 0, (uint64_t)&v289, 1);
      nullsub_1(2);
      sub_29E11C((uint64_t)v325);
      uint64_t v134 = v290;
      if (v290 && !atomic_fetch_add(&v290->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
      }
      uint64_t v135 = v292;
      if (v292 && !atomic_fetch_add(&v292->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
      if (v294 < 0)
      {
        operator delete((void *)v293);
        if ((SHIBYTE(v286) & 0x80000000) == 0)
        {
LABEL_225:
          if ((v285[47] & 0x80000000) == 0) {
            goto LABEL_226;
          }
          goto LABEL_295;
        }
      }
      else if ((SHIBYTE(v286) & 0x80000000) == 0)
      {
        goto LABEL_225;
      }
      operator delete(*(void **)&v285[48]);
      if ((v285[47] & 0x80000000) == 0)
      {
LABEL_226:
        if ((v285[23] & 0x80000000) == 0) {
          goto LABEL_227;
        }
        goto LABEL_296;
      }
LABEL_295:
      operator delete(*(void **)&v285[24]);
      if ((v285[23] & 0x80000000) == 0)
      {
LABEL_227:
        uint64_t v136 = (void **)v323;
        if (!(void)v323) {
          goto LABEL_306;
        }
LABEL_297:
        long long v159 = (void **)*((void *)&v323 + 1);
        uint64_t v160 = v136;
        if (*((void ***)&v323 + 1) == v136)
        {
LABEL_305:
          *((void *)&v323 + 1) = v136;
          operator delete(v160);
          goto LABEL_306;
        }
        while (1)
        {
          if (*((char *)v159 - 1) < 0)
          {
            operator delete(*(v159 - 3));
            if ((*((char *)v159 - 25) & 0x80000000) == 0) {
              goto LABEL_300;
            }
LABEL_303:
            operator delete(*(v159 - 6));
            v159 -= 6;
            if (v159 == v136)
            {
LABEL_304:
              uint64_t v160 = (void **)v323;
              goto LABEL_305;
            }
          }
          else
          {
            if (*((char *)v159 - 25) < 0) {
              goto LABEL_303;
            }
LABEL_300:
            v159 -= 6;
            if (v159 == v136) {
              goto LABEL_304;
            }
          }
        }
      }
LABEL_296:
      operator delete(*(void **)v285);
      uint64_t v136 = (void **)v323;
      if (!(void)v323)
      {
LABEL_306:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)v285);
          uint64_t v161 = sub_188FC78(v285, (uint64_t)"Invalid incident in ", 20);
          int v162 = *(char *)(a1 + 20703);
          if (v162 >= 0) {
            uint64_t v163 = a1 + 20680;
          }
          else {
            uint64_t v163 = *(void *)(a1 + 20680);
          }
          if (v162 >= 0) {
            uint64_t v164 = *(unsigned __int8 *)(a1 + 20703);
          }
          else {
            uint64_t v164 = *(void *)(a1 + 20688);
          }
          unint64_t v165 = sub_188FC78(v161, v163, v164);
          int64x2_t v166 = sub_188FC78(v165, (uint64_t)": ", 2);
          sub_1687148((uint64_t)v325, 0, 0);
          sub_188AF1C((uint64_t)v325, *(char **)a2, *(_DWORD *)(a2 + 8));
          sub_188AB38((unint64_t)v325, &__p);
          sub_168738C(v325);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v168 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v168 = __p.__r_.__value_.__l.__size_;
          }
          sub_188FC78(v166, (uint64_t)p_p, v168);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::stringbuf::str();
          sub_7246C((uint64_t *)v325, 3u);
          if (SHIBYTE(v326[0]) < 0) {
            operator delete(v325[0]);
          }
          if (v288 < 0) {
            operator delete(v287);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        goto LABEL_358;
      }
      goto LABEL_297;
    case 4u:
      sub_725D0((uint64_t)v285);
      sub_2FFDB0(a1 + 20304, (char **)a2, (uint64_t)v295);
      uint64_t v14 = v299;
      if ((v299 & 0x80u) != 0) {
        uint64_t v14 = v298;
      }
      if (v14)
      {
        if (sub_358898((uint64_t)v295, a3))
        {
          if (sub_3586A0((uint64_t)v295))
          {
            int v15 = (uint64_t *)v307;
            uint64_t v16 = v308;
            if (v307 != v308)
            {
              uint64_t v17 = (uint64_t)(a4 + 2);
              if (v310 == 7)
              {
                do
                {
                  v325[1] = 0;
                  v325[0] = 0;
                  v326[0] = 0;
                  sub_295374((uint64_t *)a1, v15, (uint64_t)v325);
                  unint64_t v169 = 126 - 2 * __clz(((char *)v325[1] - (char *)v325[0]) >> 3);
                  if (v325[1] == v325[0]) {
                    uint64_t v170 = 0;
                  }
                  else {
                    uint64_t v170 = v169;
                  }
                  sub_303770((uint64_t)v325[0], (int *)v325[1], (uint64_t)&__p, v170, 1);
                  sub_30361C((uint64_t)v325);
                  int8x16_t v171 = (std::string::size_type *)v325[0];
                  unint64_t v172 = (std::string::size_type *)v325[1];
                  if (v325[0] == v325[1])
                  {
                    unint64_t v175 = v325[0];
                  }
                  else
                  {
                    unint64_t v173 = (char *)*((void *)v8 + 32);
                    do
                    {
                      unsigned int v174 = **a4;
                      __p.__r_.__value_.__r.__words[0] = *v171;
                      LODWORD(__p.__r_.__value_.__r.__words[1]) = v174;
                      unint64_t v173 = sub_3435C8((char **)v8 + 31, (uint64_t)v173, (uint64_t)&__p) + 12;
                      ++v171;
                    }
                    while (v171 != v172);
                    unint64_t v175 = v325[1];
                    int8x16_t v171 = (std::string::size_type *)v325[0];
                  }
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*a4;
                  uint32x4_t v176 = sub_32A014(v17, (unsigned int *)__p.__r_.__value_.__l.__data_, (uint64_t)&unk_20F06E0, &__p);
                  *((_DWORD *)v176 + 38) += (unint64_t)(v175 - (unsigned char *)v171) >> 3;
                  int64x2_t v177 = (std::string::size_type *)v15[3];
                  int64x2_t v178 = (std::string::size_type *)v15[4];
                  if (v177 == v178)
                  {
                    uint64_t v181 = v15[3];
                  }
                  else
                  {
                    uint64_t v179 = (char *)*((void *)v8 + 32);
                    do
                    {
                      unsigned int v180 = **a4;
                      __p.__r_.__value_.__r.__words[0] = *v177;
                      LODWORD(__p.__r_.__value_.__r.__words[1]) = v180;
                      uint64_t v179 = sub_3435C8((char **)v8 + 31, (uint64_t)v179, (uint64_t)&__p) + 12;
                      ++v177;
                    }
                    while (v177 != v178);
                    int64x2_t v177 = (std::string::size_type *)v15[3];
                    uint64_t v181 = v15[4];
                  }
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*a4;
                  unint64_t v182 = sub_32A014(v17, (unsigned int *)__p.__r_.__value_.__l.__data_, (uint64_t)&unk_20F06E0, &__p);
                  *((_DWORD *)v182 + 38) += (unint64_t)(v181 - (void)v177) >> 3;
                  if (v325[0])
                  {
                    v325[1] = v325[0];
                    operator delete(v325[0]);
                  }
                  v15 += 23;
                }
                while (v15 != v16);
              }
              else if (v310 == 5)
              {
                do
                {
                  v325[1] = 0;
                  v325[0] = 0;
                  v326[0] = 0;
                  sub_2953C8((uint64_t *)a1, v15, (uint64_t)v325);
                  unint64_t v18 = 126 - 2 * __clz(((char *)v325[1] - (char *)v325[0]) >> 3);
                  if (v325[1] == v325[0]) {
                    uint64_t v19 = 0;
                  }
                  else {
                    uint64_t v19 = v18;
                  }
                  sub_303770((uint64_t)v325[0], (int *)v325[1], (uint64_t)&__p, v19, 1);
                  sub_30361C((uint64_t)v325);
                  long long v20 = (uint64_t *)v325[0];
                  long long v21 = (uint64_t *)v325[1];
                  if (v325[0] == v325[1])
                  {
                    long long v24 = v325[0];
                  }
                  else
                  {
                    long long v22 = (char *)*((void *)v8 + 35);
                    do
                    {
                      __p.__r_.__value_.__r.__words[0] = sub_35535C(*v20, *v8, v297, a1);
                      __p.__r_.__value_.__l.__size_ = v23;
                      long long v22 = sub_34387C((void *)v8 + 34, v22, (uint64_t *)&__p) + 16;
                      ++v20;
                    }
                    while (v20 != v21);
                    long long v24 = v325[1];
                    long long v20 = (uint64_t *)v325[0];
                  }
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*a4;
                  unint64_t v25 = sub_32A014(v17, (unsigned int *)__p.__r_.__value_.__l.__data_, (uint64_t)&unk_20F06E0, &__p);
                  *((_DWORD *)v25 + 39) += (unint64_t)(v24 - (unsigned char *)v20) >> 3;
                  unint64_t v27 = (uint64_t *)v15[3];
                  unint64_t v26 = (uint64_t *)v15[4];
                  if (v27 == v26)
                  {
                    uint64_t v30 = v15[3];
                  }
                  else
                  {
                    uint64_t v28 = (char *)*((void *)v8 + 35);
                    do
                    {
                      __p.__r_.__value_.__r.__words[0] = sub_35535C(*v27, *v8, v297, a1);
                      __p.__r_.__value_.__l.__size_ = v29;
                      uint64_t v28 = sub_34387C((void *)v8 + 34, v28, (uint64_t *)&__p) + 16;
                      ++v27;
                    }
                    while (v27 != v26);
                    unint64_t v27 = (uint64_t *)v15[3];
                    uint64_t v30 = v15[4];
                  }
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*a4;
                  long long v31 = sub_32A014(v17, (unsigned int *)__p.__r_.__value_.__l.__data_, (uint64_t)&unk_20F06E0, &__p);
                  *((_DWORD *)v31 + 39) += (unint64_t)(v30 - (void)v27) >> 3;
                  if (v325[0])
                  {
                    v325[1] = v325[0];
                    operator delete(v325[0]);
                  }
                  v15 += 23;
                }
                while (v15 != v16);
              }
            }
          }
          int v306 = *v8;
          if (v309[0] == 3)
          {
            uint64_t v183 = (void **)a4;
            v325[0] = *a4;
            unsigned int v185 = sub_32A014((uint64_t)(a4 + 2), (unsigned int *)v325[0], (uint64_t)&unk_20F06E0, (_DWORD **)v325);
            ++*((_DWORD *)v185 + 35);
          }
          else
          {
            uint64_t v183 = (void **)a4;
            if (v309[0] == 2)
            {
              v325[0] = *a4;
              uint64_t v184 = sub_32A014((uint64_t)(a4 + 2), (unsigned int *)v325[0], (uint64_t)&unk_20F06E0, (_DWORD **)v325);
              ++*((_DWORD *)v184 + 34);
            }
          }
          unint64_t v186 = *((void *)v8 + 29);
          if (v186 >= *((void *)v8 + 30))
          {
            uint32x4_t v188 = sub_343AC0((void **)v8 + 28, (uint64_t)v295);
          }
          else
          {
            sub_338DCC(v186, (uint64_t)v295);
            uint32x4_t v188 = (void *)(v187 + 648);
          }
          *((void *)v8 + 29) = v188;
          v325[0] = *v183;
          int64x2_t v189 = sub_32A014((uint64_t)(v183 + 2), (unsigned int *)v325[0], (uint64_t)&unk_20F06E0, (_DWORD **)v325);
          ++*((_DWORD *)v189 + 28);
          v325[0] = *v183;
          uint16x8_t v190 = sub_32A014((uint64_t)(v183 + 2), (unsigned int *)v325[0], (uint64_t)&unk_20F06E0, (_DWORD **)v325);
          ++*((_DWORD *)v190 + 33);
          double v191 = sub_72688((uint64_t)v285);
          v325[0] = *v183;
          uint64_t v192 = sub_32A014((uint64_t)(v183 + 2), (unsigned int *)v325[0], (uint64_t)&unk_20F06E0, (_DWORD **)v325);
          LODWORD(v193) = *((_DWORD *)v192 + 47);
          *((_DWORD *)v192 + 47) = (v191 + (double)v193);
          sub_303198((uint64_t)v309);
          unint64_t v131 = (uint64_t *)v307;
          if (!v307) {
            goto LABEL_358;
          }
          uint64_t v194 = (uint64_t)v308;
          uint64_t v133 = v307;
          if (v308 == v307)
          {
LABEL_356:
            long long v308 = v131;
            int64_t v195 = v133;
            goto LABEL_357;
          }
          do
            uint64_t v194 = sub_30328C(v194 - 184);
          while ((uint64_t *)v194 != v131);
LABEL_355:
          uint64_t v133 = v307;
          goto LABEL_356;
        }
      }
      else if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v325);
        double v127 = sub_188FC78(v325, (uint64_t)"Invalid AreaIncident in ", 24);
        int v128 = *(char *)(a1 + 20703);
        if (v128 >= 0) {
          uint64_t v129 = a1 + 20680;
        }
        else {
          uint64_t v129 = *(void *)(a1 + 20680);
        }
        if (v128 >= 0) {
          uint64_t v130 = *(unsigned __int8 *)(a1 + 20703);
        }
        else {
          uint64_t v130 = *(void *)(a1 + 20688);
        }
        sub_188FC78(v127, v129, v130);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 3u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v330 < 0) {
          operator delete(*((void **)&v329 + 1));
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_303198((uint64_t)v309);
      unint64_t v131 = (uint64_t *)v307;
      if (!v307) {
        goto LABEL_358;
      }
      uint64_t v132 = (uint64_t)v308;
      uint64_t v133 = v307;
      if (v308 == v307) {
        goto LABEL_356;
      }
      do
        uint64_t v132 = sub_30328C(v132 - 184);
      while ((uint64_t *)v132 != v131);
      goto LABEL_355;
    case 5u:
      sub_301E9C((char **)a2, (uint64_t)v285);
      if (*(void *)&v285[32] == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_442;
      }
      uint64_t v50 = v285[23];
      if (v285[23] < 0) {
        uint64_t v50 = *(void *)&v285[8];
      }
      if (!v50)
      {
LABEL_442:
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)v325);
          uint64_t v118 = sub_188FC78(v325, (uint64_t)"Invalid CongestionZone incident in ", 35);
          int v119 = *(char *)(a1 + 20703);
          if (v119 >= 0) {
            uint64_t v120 = a1 + 20680;
          }
          else {
            uint64_t v120 = *(void *)(a1 + 20680);
          }
          if (v119 >= 0) {
            uint64_t v121 = *(unsigned __int8 *)(a1 + 20703);
          }
          else {
            uint64_t v121 = *(void *)(a1 + 20688);
          }
          unint64_t v122 = sub_188FC78(v118, v120, v121);
          uint64_t v123 = sub_188FC78(v122, (uint64_t)": ", 2);
          sub_1687148((uint64_t)v295, 0, 0);
          sub_188AF1C((uint64_t)v295, *(char **)a2, *(_DWORD *)(a2 + 8));
          sub_188AB38((unint64_t)v295, &__p);
          sub_168738C(v295);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v124 = &__p;
          }
          else {
            uint64_t v124 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v125 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v125 = __p.__r_.__value_.__l.__size_;
          }
          sub_188FC78(v123, (uint64_t)v124, v125);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::stringbuf::str();
          sub_7246C((uint64_t *)v295, 3u);
          if (v296 < 0) {
            operator delete(v295[0]);
          }
          if (v330 < 0) {
            operator delete(*((void **)&v329 + 1));
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
        if ((v285[63] & 0x80000000) == 0) {
          goto LABEL_291;
        }
      }
      else
      {
        *(_DWORD *)&v285[24] = *v8;
        unint64_t v51 = *((void *)v8 + 38);
        if (v51 >= *((void *)v8 + 39))
        {
          uint64_t v54 = sub_343C64((void **)v8 + 37, (uint64_t)v285);
        }
        else
        {
          long long v52 = *(_OWORD *)v285;
          *(void *)(v51 + 16) = *(void *)&v285[16];
          *(_OWORD *)unint64_t v51 = v52;
          *(void *)uint64_t v285 = 0;
          *(void *)&v285[8] = 0;
          *(_OWORD *)(v51 + 24) = *(_OWORD *)&v285[24];
          uint64_t v53 = *(void *)&v285[56];
          *(_OWORD *)(v51 + 40) = *(_OWORD *)&v285[40];
          *(void *)(v51 + 56) = v53;
          *(void *)&v285[16] = 0;
          memset(&v285[40], 0, 24);
          uint64_t v54 = (char *)(v51 + 64);
        }
        *((void *)v8 + 38) = v54;
        v295[0] = *v4;
        uint64_t v157 = sub_32A014((uint64_t)(v4 + 2), (unsigned int *)v295[0], (uint64_t)&unk_20F06E0, (_DWORD **)v295);
        ++*((_DWORD *)v157 + 28);
        v295[0] = *v4;
        char v158 = sub_32A014((uint64_t)(v4 + 2), (unsigned int *)v295[0], (uint64_t)&unk_20F06E0, (_DWORD **)v295);
        ++*((_DWORD *)v158 + 40);
        if ((v285[63] & 0x80000000) == 0) {
          goto LABEL_291;
        }
      }
      char v138 = *(void **)&v285[40];
      goto LABEL_290;
    case 6u:
      if (!*v9) {
        return;
      }
      sub_302458(a1 + 20304, (char **)a2, v325);
      double v55 = v325[0];
      BOOL v273 = v325[1];
      if (v325[0] == v325[1])
      {
        uint64_t v126 = v325[0];
LABEL_280:
        v295[0] = *v4;
        unint64_t v148 = sub_32A014((uint64_t)(v4 + 2), (unsigned int *)v295[0], (uint64_t)&unk_20F06E0, (_DWORD **)v295);
        int v149 = *((_DWORD *)v148 + 36);
        if (v126 != v55) {
          ++v149;
        }
        *((_DWORD *)v148 + 36) = v149;
        uint64_t v150 = v325[1];
        long long v151 = v325[0];
        v295[0] = *v4;
        uint64_t v152 = sub_32A014((uint64_t)(v4 + 2), (unsigned int *)v295[0], (uint64_t)&unk_20F06E0, (_DWORD **)v295);
        *((_DWORD *)v152 + 37) -= 1762037865 * ((unint64_t)(v150 - v151) >> 3);
        v295[0] = *v4;
        unsigned int v153 = sub_32A014((uint64_t)(v4 + 2), (unsigned int *)v295[0], (uint64_t)&unk_20F06E0, (_DWORD **)v295);
        ++*((_DWORD *)v153 + 28);
        long long v154 = v325[0];
        if (v325[0])
        {
          uint64_t v155 = v325[1];
          int64x2_t v156 = v325[0];
          if (v325[1] != v325[0])
          {
            do
              uint64_t v155 = (void *)sub_2F6914((uint64_t)v155 - 312);
            while (v155 != v154);
            int64x2_t v156 = v325[0];
          }
          v325[1] = v154;
          operator delete(v156);
        }
        return;
      }
      unsigned int v277 = (void **)(v8 + 120);
      uint64_t v279 = v8;
      uint64_t v271 = (uint64_t)(v8 + 118);
      unsigned int v272 = (uint64_t *)(v8 + 114);
      break;
    default:
      return;
  }
  while (1)
  {
    unint64_t v57 = ((v55[10] - v55[9]) << 30) - 0x100000000;
    unint64_t v58 = HIDWORD(v57);
    if (HIDWORD(v57)) {
      break;
    }
LABEL_109:
    unint64_t v59 = (unint64_t)(((v55[25] - v55[24]) << 30) - 0x100000000) >> 32;
    if (v59)
    {
      unint64_t v89 = 0;
      uint64_t v90 = v55 + 30;
      while (2)
      {
        unint64_t v93 = v55[30];
        unint64_t v94 = (uint64_t)(v55[31] - v93) >> 3;
        if (v94 <= v89)
        {
          v295[0] = (void *)0x7FFFFFFFFFFFFFFFLL;
          sub_2F898C(v90, v89 - v94 + 1, (uint64_t *)v295);
          unint64_t v93 = *v90;
        }
        uint64_t v95 = *(void *)(v93 + 8 * v89);
        uint64_t v96 = v55[10] - v55[9];
        unint64_t v97 = (unint64_t)((v96 << 30) - 0x100000000) >> 32;
        if (v97)
        {
          uint64_t v98 = 0;
          unint64_t v99 = v96 >> 2;
          unint64_t v100 = ((unint64_t)v96 >> 2) - 1;
          while (1)
          {
            uint64_t v101 = v98 + 1;
            if (v99 <= v98 + 1)
            {
              exception = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v295, "vertex id out of range");
              uint64_t v270 = (void *)sub_2F404((uint64_t)exception, (long long *)v295);
            }
            uint64_t v102 = v55[15];
            if (v100 > (v55[16] - v102) >> 3)
            {
              v267 = __cxa_allocate_exception(0x40uLL);
              sub_5E5C(v295, "no or incomplete vertex data stored");
              uint64_t v268 = (void *)sub_2F404((uint64_t)v267, (long long *)v295);
            }
            if (*(void *)(v102 + 8 * v98) == v95) {
              break;
            }
            ++v98;
            if (v97 == v101) {
              goto LABEL_162;
            }
          }
        }
        else
        {
          LODWORD(v98) = 0;
        }
        if (v98 != v97 && v98 != -1) {
          goto LABEL_146;
        }
LABEL_162:
        uint64_t v104 = 0x6F96F96F96F96F97 * ((uint64_t)(*((void *)v8 + 58) - *((void *)v8 + 57)) >> 3);
        uint64_t v106 = (char *)*((void *)v8 + 61);
        unint64_t v105 = *((void *)v8 + 62);
        if ((unint64_t)v106 < v105)
        {
          int v91 = *v8;
          *(void *)uint64_t v106 = v95;
          *((_DWORD *)v106 + 2) = v91;
          *((void *)v106 + 2) = v104;
          *((_DWORD *)v106 + 6) = -1;
          *((_DWORD *)v106 + 7) = v89;
          uint64_t v92 = v106 + 32;
        }
        else
        {
          unsigned int v107 = (char *)*v277;
          uint64_t v108 = (v106 - (unsigned char *)*v277) >> 5;
          unint64_t v109 = v108 + 1;
          if ((unint64_t)(v108 + 1) >> 59) {
            sub_2E00();
          }
          uint64_t v110 = v105 - (void)v107;
          if (v110 >> 4 > v109) {
            unint64_t v109 = v110 >> 4;
          }
          if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v111 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v111 = v109;
          }
          if (v111 >> 59) {
            sub_188D718();
          }
          int64_t v112 = (char *)operator new(32 * v111);
          int v113 = *v8;
          unint64_t v114 = &v112[32 * v108];
          *(void *)unint64_t v114 = v95;
          *((_DWORD *)v114 + 2) = v113;
          *((void *)v114 + 2) = v104;
          *((_DWORD *)v114 + 6) = -1;
          *((_DWORD *)v114 + 7) = v89;
          if (v106 == v107)
          {
            uint64_t v92 = v114 + 32;
            *((void *)v8 + 60) = &v112[32 * v108];
            *((void *)v8 + 61) = v114 + 32;
            *((void *)v8 + 62) = &v112[32 * v111];
            if (v107) {
              goto LABEL_174;
            }
          }
          else
          {
            unint64_t v115 = &v112[32 * v108];
            do
            {
              long long v116 = *((_OWORD *)v106 - 1);
              uint64_t v117 = v115 - 32;
              *((_OWORD *)v115 - 2) = *((_OWORD *)v106 - 2);
              *((_OWORD *)v115 - 1) = v116;
              v106 -= 32;
              v115 -= 32;
            }
            while (v106 != v107);
            uint64_t v92 = v114 + 32;
            *((void *)v8 + 60) = v117;
            *((void *)v8 + 61) = v114 + 32;
            *((void *)v8 + 62) = &v112[32 * v111];
            if (v107) {
LABEL_174:
            }
              operator delete(v107);
          }
          uint64_t v90 = v55 + 30;
        }
        *((void *)v8 + 61) = v92;
LABEL_146:
        if (++v89 == v59) {
          break;
        }
        continue;
      }
    }
    unint64_t v60 = *((void *)v8 + 58);
    if (v60 < *((void *)v8 + 59))
    {
      sub_2F7000(v271, *((void *)v8 + 58), (long long *)v55);
      uint64_t v56 = v60 + 312;
    }
    else
    {
      uint64_t v56 = sub_2F719C(v272, (long long *)v55);
    }
    unint64_t v4 = a4;
    *((void *)v8 + 58) = v56;
    v55 += 39;
    if (v55 == v273)
    {
      uint64_t v126 = v325[0];
      double v55 = v325[1];
      goto LABEL_280;
    }
  }
  unint64_t v61 = 0;
  unint64_t v275 = HIDWORD(v57);
  while (1)
  {
    while (1)
    {
      uint64_t v63 = v55[15];
      unint64_t v64 = (v55[16] - v63) >> 3;
      if (v64 <= v61)
      {
        v295[0] = (void *)0x7FFFFFFFFFFFFFFFLL;
        sub_2F898C(v55 + 15, v61 - v64 + 1, (uint64_t *)v295);
        uint64_t v63 = v55[15];
      }
      uint64_t v65 = *(void *)(v63 + 8 * v61);
      uint64_t v66 = v55[25] - v55[24];
      unint64_t v67 = (unint64_t)((v66 << 30) - 0x100000000) >> 32;
      if (v67)
      {
        uint64_t v68 = 0;
        unint64_t v69 = v66 >> 2;
        unint64_t v70 = ((unint64_t)v66 >> 2) - 1;
        while (1)
        {
          uint64_t v71 = v68 + 1;
          if (v69 <= v68 + 1)
          {
            uint64_t v265 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v295, "vertex id out of range");
            uint64_t v266 = (void *)sub_2F404((uint64_t)v265, (long long *)v295);
          }
          uint64_t v72 = v55[30];
          if (v70 > (v55[31] - v72) >> 3)
          {
            unint64_t v263 = __cxa_allocate_exception(0x40uLL);
            sub_5E5C(v295, "no or incomplete vertex data stored");
            int v264 = (void *)sub_2F404((uint64_t)v263, (long long *)v295);
          }
          if (*(void *)(v72 + 8 * v68) == v65) {
            break;
          }
          ++v68;
          if (v67 == v71) {
            goto LABEL_125;
          }
        }
      }
      else
      {
        LODWORD(v68) = 0;
      }
      if (v68 == v67) {
LABEL_125:
      }
        LODWORD(v68) = -1;
      uint64_t v73 = 0x6F96F96F96F96F97 * ((uint64_t)(*((void *)v8 + 58) - *((void *)v8 + 57)) >> 3);
      int v75 = (char *)*((void *)v8 + 61);
      unint64_t v74 = *((void *)v8 + 62);
      if ((unint64_t)v75 >= v74) {
        break;
      }
      int v62 = *v8;
      *(void *)int v75 = v65;
      *((_DWORD *)v75 + 2) = v62;
      *((void *)v75 + 2) = v73;
      *((_DWORD *)v75 + 6) = v61;
      *((_DWORD *)v75 + 7) = v68;
      *((void *)v8 + 61) = v75 + 32;
      if (++v61 == v58) {
        goto LABEL_109;
      }
    }
    double v76 = (char *)*v277;
    uint64_t v77 = (v75 - (unsigned char *)*v277) >> 5;
    unint64_t v78 = v77 + 1;
    if ((unint64_t)(v77 + 1) >> 59) {
      sub_2E00();
    }
    uint64_t v79 = v74 - (void)v76;
    if (v79 >> 4 > v78) {
      unint64_t v78 = v79 >> 4;
    }
    if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v80 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v80 = v78;
    }
    if (v80 >> 59) {
      sub_188D718();
    }
    uint64_t v81 = 0x6F96F96F96F96F97 * ((uint64_t)(*((void *)v8 + 58) - *((void *)v8 + 57)) >> 3);
    std::string::size_type v82 = (char *)operator new(32 * v80);
    int v83 = *v279;
    unsigned int v84 = &v82[32 * v77];
    *(void *)unsigned int v84 = v65;
    *((_DWORD *)v84 + 2) = v83;
    *((void *)v84 + 2) = v81;
    *((_DWORD *)v84 + 6) = v61;
    *((_DWORD *)v84 + 7) = v68;
    if (v75 == v76)
    {
      uint64_t v88 = v84 + 32;
      *((void *)v279 + 60) = &v82[32 * v77];
      *((void *)v279 + 61) = v84 + 32;
      *((void *)v279 + 62) = &v82[32 * v80];
      if (!v76) {
        goto LABEL_139;
      }
    }
    else
    {
      int v85 = &v82[32 * v77];
      do
      {
        long long v86 = *((_OWORD *)v75 - 1);
        uint64_t v87 = v85 - 32;
        *((_OWORD *)v85 - 2) = *((_OWORD *)v75 - 2);
        *((_OWORD *)v85 - 1) = v86;
        v75 -= 32;
        v85 -= 32;
      }
      while (v75 != v76);
      uint64_t v88 = v84 + 32;
      *((void *)v279 + 60) = v87;
      *((void *)v279 + 61) = v84 + 32;
      *((void *)v279 + 62) = &v82[32 * v80];
      if (!v76) {
        goto LABEL_139;
      }
    }
    operator delete(v76);
LABEL_139:
    unint64_t v58 = v275;
    char v8 = v279;
    *((void *)v279 + 61) = v88;
    if (++v61 == v275) {
      goto LABEL_109;
    }
  }
}

void sub_326A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&STACK[0x540]);
  sub_26C4C((const void **)&STACK[0x528]);
  if (a49 < 0) {
    operator delete(a44);
  }
  sub_29D95C((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_326E2C(_Unwind_Exception *a1)
{
  uint64_t v2 = (void *)STACK[0x540];
  if (STACK[0x540])
  {
    STACK[0x548] = (unint64_t)v2;
    operator delete(v2);
  }
  sub_301314((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_326E78(_Unwind_Exception *a1)
{
}

void sub_326E8C(_Unwind_Exception *a1)
{
}

void sub_326EA0(_Unwind_Exception *a1)
{
}

void sub_326EB4(_Unwind_Exception *a1)
{
}

void sub_326EC8(_Unwind_Exception *a1)
{
}

void sub_326EDC(_Unwind_Exception *a1)
{
}

void sub_326EF0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x257]) < 0)
  {
    operator delete((void *)STACK[0x240]);
    sub_2F53CC((void **)&STACK[0x540]);
    _Unwind_Resume(a1);
  }
  sub_2F53CC((void **)&STACK[0x540]);
  _Unwind_Resume(a1);
}

uint64_t sub_326F64(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (int *)sub_2D5D58(a1, a2);
  unint64_t v3 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v3 >= 0xDu && (uint64_t v4 = v3[6]) != 0) {
    return *(unsigned __int16 *)((char *)v2 + v4);
  }
  else {
    return 0;
  }
}

int *sub_326FA8@<X0>(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, unsigned char *a3@<X8>)
{
  uint64_t result = (int *)sub_290DEC(a1 + 3896, 1u, 0);
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 < 0xBu)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = v6[5];
    if (v7) {
      v7 += (uint64_t)result + *(unsigned int *)((char *)result + v7);
    }
  }
  char v8 = (int *)(v7 + 4 * a2 + 4 + *(unsigned int *)(v7 + 4 * a2 + 4));
  unsigned int v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 < 7u || (uint64_t v10 = v9[3]) == 0)
  {
    a3[23] = 0;
    *a3 = 0;
    return result;
  }
  int v11 = (unsigned int *)((char *)v8 + v10);
  uint64_t v12 = *v11;
  uint64_t v14 = (char *)v11 + v12 + 4;
  size_t v13 = *(unsigned int *)((char *)v11 + v12);
  if (v13 >= 0x17)
  {
    if ((v13 | 7) == 0x17) {
      uint64_t v15 = (v13 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v15 = v13 | 7;
    }
    uint64_t v16 = operator new(v15 + 1);
    *((void *)a3 + 1) = v13;
    *((void *)a3 + 2) = v15 - 0x7FFFFFFFFFFFFFFFLL;
    *(void *)a3 = v16;
    a3 = v16;
  }
  else
  {
    a3[23] = v13;
    if (!v13) {
      goto LABEL_16;
    }
  }
  uint64_t result = (int *)memcpy(a3, v14, v13);
LABEL_16:
  a3[v13] = 0;
  return result;
}

void sub_3270C0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v4 = *(unsigned char **)(a1 + 8);
    uint64_t v5 = 24 * a2;
    uint64_t v6 = (char *)operator new(24 * a2);
    uint64_t v7 = &v6[24 * ((v4 - v2) / 24)];
    char v8 = v7;
    if (v4 != v2)
    {
      unsigned int v9 = &v6[24 * ((v4 - v2) / 24)];
      do
      {
        long long v10 = *(_OWORD *)(v4 - 24);
        char v8 = v9 - 24;
        *((void *)v9 - 1) = *((void *)v4 - 1);
        *(_OWORD *)(v9 - 24) = v10;
        v4 -= 24;
        v9 -= 24;
      }
      while (v4 != v2);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[v5];
    if (v2)
    {
      operator delete(v2);
    }
  }
}

uint64_t sub_3271C8(long long *a1, long long *a2)
{
  sub_2FCB1C((uint64_t)&v20, a1);
  sub_2FCB1C((uint64_t)&v14, a2);
  uint64_t v3 = (v25 - (unsigned char *)v24) >> 3;
  unint64_t v4 = v3 - 1;
  if (v25 == v24)
  {
    uint64_t v5 = v18;
    if (v18 != v19)
    {
      uint64_t v6 = v20;
      for (unint64_t i = v21; ; unint64_t i = v3 - 1)
      {
        do
        {
LABEL_4:
          v6 += 8;
          uint64_t v20 = v6;
        }
        while (i >= v4);
        do
        {
          if (v6 != *((void *)v24 + i)) {
            goto LABEL_4;
          }
          uint64_t v6 = *((void *)v22 + i + 1);
          uint64_t v20 = v6;
          ++i;
        }
        while (v4 != i);
      }
    }
LABEL_11:
    uint64_t v10 = 0;
    goto LABEL_26;
  }
  uint64_t v5 = v18;
  uint64_t v8 = v20;
  unint64_t v9 = v21;
  if (v18 == v19)
  {
    uint64_t v11 = v3 - 2;
    while (1)
    {
      do
      {
        do
        {
LABEL_14:
          v8 += 8;
          uint64_t v20 = v8;
        }
        while (v9 >= v4);
      }
      while (v8 != *((void *)v24 + v9));
      while (1)
      {
        uint64_t v8 = *((void *)v22 + v9 + 1);
        uint64_t v20 = v8;
        if (v11 == v9) {
          break;
        }
        uint64_t v12 = *((void *)v24 + ++v9);
        if (v12 != v8) {
          goto LABEL_14;
        }
      }
      unint64_t v9 = v4;
    }
  }
  if (v21 == v15 && v20 == v14) {
    goto LABEL_11;
  }
  uint64_t v10 = 0;
  do
  {
    v8 += 8;
    uint64_t v20 = v8;
    if (v9 < v4)
    {
      while (v8 == *((void *)v24 + v9))
      {
        uint64_t v8 = *((void *)v22 + v9 + 1);
        uint64_t v20 = v8;
        unint64_t v21 = ++v9;
        if (v4 == v9)
        {
          unint64_t v9 = v3 - 1;
          break;
        }
      }
    }
    ++v10;
  }
  while (v9 != v15 || v8 != v14);
LABEL_26:
  if (v5)
  {
    uint64_t v19 = v5;
    operator delete(v5);
  }
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    unint64_t v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    std::string::size_type v23 = v22;
    operator delete(v22);
  }
  return v10;
}

void sub_32738C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2FC938((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_3273A0(char *result, uint64_t a2, unsigned int **a3)
{
  if (result[20632]) {
    BOOL v3 = *(unsigned char *)(a2 + 159) == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3 || (*(_DWORD *)(a2 + 88) | 4) != 6) {
    return result;
  }
  uint64_t v6 = (uint64_t)result;
  uint64_t result = (char *)sub_357E70(a2 + 280);
  if (!result)
  {
LABEL_15:
    sub_725D0((uint64_t)v53);
    uint64_t v10 = *a3;
    sub_3585E0((char *)a2, (uint64_t)&v43);
    sub_2FCB1C((uint64_t)&v37, &v43);
    sub_2FCB1C((uint64_t)v32, &v48);
    uint64_t v11 = v41;
    uint64_t v12 = v42;
    while (1)
    {
      if (v11 == v12 || v35 == v36)
      {
        if ((v11 == v12) == (v35 == v36)) {
          goto LABEL_40;
        }
        size_t v13 = v37;
      }
      else
      {
        size_t v13 = v37;
        if (v38 == v32[1] && v37 == (uint64_t *)v32[0])
        {
LABEL_40:
          if (v35)
          {
            uint64_t v36 = v35;
            operator delete(v35);
          }
          if (__p)
          {
            std::string::size_type v34 = __p;
            operator delete(__p);
          }
          if (v41)
          {
            uint64_t v42 = v41;
            operator delete(v41);
          }
          if (v39)
          {
            uint64_t v40 = v39;
            operator delete(v39);
          }
          if (v51)
          {
            long long v52 = v51;
            operator delete(v51);
          }
          if (v49)
          {
            uint64_t v50 = v49;
            operator delete(v49);
          }
          if (v46)
          {
            unint64_t v47 = v46;
            operator delete(v46);
          }
          if (v44)
          {
            uint64_t v45 = v44;
            operator delete(v44);
          }
          double v27 = sub_72688((uint64_t)v53);
          *(void *)&long long v43 = *a3;
          uint64_t result = sub_32A014((uint64_t)(a3 + 2), (unsigned int *)v43, (uint64_t)&unk_20F06E0, (_DWORD **)&v43);
          LODWORD(v28) = *((_DWORD *)result + 23);
          *((_DWORD *)result + 23) = (v27 + (double)v28);
          return result;
        }
      }
      uint64_t v15 = *v13;
      uint64_t v16 = (int *)sub_2D5D58(v6, *v13 & 0xFFFFFFFFFFFFLL);
      uint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
      if (*v17 < 0x1Du)
      {
        uint64_t v18 = 0;
      }
      else
      {
        uint64_t v18 = v17[14];
        if (v18) {
          uint64_t v18 = *(void *)((char *)v16 + v18);
        }
      }
      if ((v15 & 0xFF000000000000) != 0) {
        uint64_t v19 = -v18;
      }
      else {
        uint64_t v19 = v18;
      }
      uint64_t v54 = (unsigned int *)v19;
      int v31 = 1;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      unint64_t v20 = *((void *)v10 + 8);
      if (v20 >= *((void *)v10 + 9))
      {
        uint64_t v21 = sub_34548C((uint64_t *)v10 + 7, (uint64_t *)&v54, (int *)v10, &v31, &v30, &v29);
      }
      else
      {
        sub_3578E8(*((void *)v10 + 8), v19, *v10, 1, 0, 0);
        uint64_t v21 = v20 + 32;
        *((void *)v10 + 8) = v20 + 32;
      }
      *((void *)v10 + 8) = v21;
      uint64_t v54 = *a3;
      long long v22 = sub_32A014((uint64_t)(a3 + 2), v54, (uint64_t)&unk_20F06E0, &v54);
      ++*((_DWORD *)v22 + 21);
      uint64_t v54 = *a3;
      std::string::size_type v23 = sub_32A014((uint64_t)(a3 + 2), v54, (uint64_t)&unk_20F06E0, &v54);
      ++*((_DWORD *)v23 + 22);
      unint64_t v24 = v38;
      unint64_t v25 = v37 + 1;
      uint64_t v11 = v41;
      uint64_t v12 = v42;
      unint64_t v26 = ((v42 - (unsigned char *)v41) >> 3) - 1;
      ++v37;
      if (v38 < v26)
      {
        do
        {
          if (v25 != *((uint64_t **)v41 + v24)) {
            break;
          }
          unint64_t v38 = v24 + 1;
          unint64_t v25 = (uint64_t *)*((void *)v39 + v24 + 1);
          long long v37 = v25;
          ++v24;
        }
        while (v26 != v38);
      }
    }
  }
  for (unint64_t i = *(uint64_t **)(a2 + 320); ; i += 7)
  {
    if (i == *(uint64_t **)(a2 + 328)) {
      goto LABEL_15;
    }
    uint64_t v8 = *i;
    uint64_t v9 = i[1];
    if (*i != v9) {
      break;
    }
LABEL_9:
    ;
  }
  while (*(void *)(v8 + 56) == -1)
  {
    v8 += 72;
    if (v8 == v9) {
      goto LABEL_9;
    }
  }
  return result;
}

void sub_327704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_32773C(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v3 = *a1;
  if (0x21CFB2B78C13521DLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x9A90E7D95BC60ALL) {
      sub_2E00();
    }
    uint64_t v5 = a1[1];
    uint64_t v6 = 424 * a2;
    uint64_t v10 = operator new(424 * a2);
    uint64_t v11 = (uint64_t)v10 + v5 - v3;
    sub_29FBAC(v2, v5, v5, v3, v3, v11, v11);
    uint64_t v8 = (void *)*a1;
    uint64_t v7 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    for (a1[2] = (uint64_t)v10 + v6; (void *)v7 != v8; uint64_t v7 = sub_29D95C(v7 - 424))
      ;
    if (v8) {
      operator delete(v8);
    }
  }
}

void sub_327840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_29FB58((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_327854(uint64_t a1, unint64_t a2)
{
  int v2 = HIDWORD(a2);
  if ((a2 & 0x8000000000000000) != 0) {
    return sub_32A35C(a1, (a2 & 0xFFFFFFFFFFFFLL | (((a2 >> 62) & 1) << 48)) ^ 0x1000000000000, 0);
  }
  unint64_t v4 = sub_2E5F98(a1, a2, 1);
  double result = -1.0;
  if (v4)
  {
    uint64_t v6 = &v4[-*(int *)v4];
    unsigned int v7 = *(unsigned __int16 *)v6;
    if ((v2 & 0x40000000) == 0)
    {
      if (v7 < 7) {
        return result;
      }
      int v8 = *((unsigned __int16 *)v6 + 3);
      if (!v8) {
        return result;
      }
LABEL_10:
      uint64_t v9 = (unsigned int *)&v4[v8 + *(unsigned int *)&v4[v8]];
      if (*v9 <= (v2 & 0x3FFFFFFFu)) {
        return result;
      }
      uint64_t v10 = (int *)((char *)v9 + 4 * v2 + *(unsigned int *)((char *)v9 + (4 * v2) + 4) + 4);
      uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
      unsigned int v12 = *v11;
      if (v12 >= 9 && v11[4])
      {
        unsigned int v13 = *(unsigned __int16 *)((char *)v10 + v11[4]);
        unsigned int v14 = *(unsigned __int16 *)(a1 + 3872);
        if (!*(_WORD *)(a1 + 3872))
        {
LABEL_20:
          if ((unsigned __int16)(v13 - 1) <= 0xFFFDu) {
            return (double)v13 / 100.0;
          }
          return result;
        }
      }
      else
      {
        unsigned int v13 = 0xFFFF;
        unsigned int v14 = *(unsigned __int16 *)(a1 + 3872);
        if (!*(_WORD *)(a1 + 3872)) {
          goto LABEL_20;
        }
      }
      if (v12 >= 0xF)
      {
        uint64_t v15 = v11[7];
        if (v15)
        {
          uint64_t v16 = (unsigned int *)((char *)v10 + v15 + *(unsigned int *)((char *)v10 + v15));
          if (*v16 >= v14)
          {
            unsigned int v17 = *((unsigned __int16 *)v16 + v14 + 1);
            if ((unsigned __int16)(v17 + 1) > 1u) {
              return (double)v17 / 100.0;
            }
          }
        }
      }
      goto LABEL_20;
    }
    if (v7 >= 5)
    {
      int v8 = *((unsigned __int16 *)v6 + 2);
      if (v8) {
        goto LABEL_10;
      }
    }
  }
  return result;
}

void sub_3279E4(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = sub_290DEC(a1 + 3896, 1u, 1);
  if (v5 && (v6 = &v5[-*(int *)v5], *(unsigned __int16 *)v6 >= 0xBu) && (uint64_t v7 = *((unsigned __int16 *)v6 + 5)) != 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    __int16 v38 = 0;
    int v8 = &v5[v7];
    uint64_t v9 = *(unsigned int *)v8;
    uint64_t v11 = (unsigned int *)&v8[v9 + 4];
    uint64_t v10 = *(unsigned int *)&v8[v9];
    if (v10)
    {
      unsigned int v12 = &v11[v10];
      do
      {
        unsigned int v13 = (int *)((char *)v11 + *v11);
        unsigned int v14 = (unsigned __int16 *)((char *)v13 - *v13);
        if (*v14 < 5u || (uint64_t v15 = v14[2]) == 0)
        {
          size_t v21 = 0;
          HIBYTE(v37) = 0;
          LOBYTE(__p) = 0;
          goto LABEL_19;
        }
        uint64_t v16 = (unsigned int *)((char *)v13 + v15);
        uint64_t v17 = *v16;
        uint64_t v19 = (char *)v16 + v17 + 4;
        size_t v18 = *(unsigned int *)((char *)v16 + v17);
        if (v18 >= 0x17)
        {
          uint64_t v22 = (v18 & 0xFFFFFFF8) + 8;
          if ((v18 | 7) != 0x17) {
            uint64_t v22 = v18 | 7;
          }
          uint64_t v23 = v22 + 1;
          p_p = operator new(v22 + 1);
          size_t __n = v18;
          unint64_t v37 = v23 | 0x8000000000000000;
          std::string __p = p_p;
        }
        else
        {
          HIBYTE(v37) = *(unsigned int *)((char *)v16 + v17);
          p_p = &__p;
          if (!v18) {
            goto LABEL_18;
          }
        }
        memcpy(p_p, v19, v18);
LABEL_18:
        *((unsigned char *)p_p + v18) = 0;
        size_t v21 = HIBYTE(v37);
LABEL_19:
        if ((v21 & 0x80u) == 0) {
          size_t v24 = v21;
        }
        else {
          size_t v24 = __n;
        }
        unint64_t v25 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
        int v26 = (char)v25;
        if ((char)v25 < 0) {
          unint64_t v25 = a2[1];
        }
        if ((unsigned __int8 *)v24 != v25)
        {
          if ((char)v21 < 0) {
            operator delete(__p);
          }
          goto LABEL_7;
        }
        if (v26 >= 0) {
          double v27 = (unsigned __int8 *)a2;
        }
        else {
          double v27 = *a2;
        }
        if ((char)v21 < 0)
        {
          long long v33 = __p;
          int v34 = memcmp(__p, v27, __n);
          operator delete(v33);
          if (v34) {
            goto LABEL_7;
          }
        }
        else if (v21)
        {
          uint64_t v28 = 0;
          size_t v29 = v21 - 1;
          do
          {
            int v30 = *((unsigned __int8 *)&__p + v28);
            int v31 = v27[v28];
          }
          while (v30 == v31 && v29 != v28++);
          if (v30 != v31) {
            goto LABEL_7;
          }
        }
        sub_32B600((uint64_t)a3, &v38);
LABEL_7:
        ++v38;
        ++v11;
      }
      while (v11 != v12);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_327BF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_327C18(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)&long long v17 = *a2;
  *((void *)&v17 + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_29541C(a1, &v17);
  uint64_t v5 = (_OWORD *)(a1 + 3880);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)
    && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  _OWORD *v5 = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v7 = *(void *)(a1 + 3880);
  uint64_t v8 = *(void *)(a1 + 3888);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = 0;
  *(void *)(a1 + 3896) = v7;
  *(void *)(a1 + 3904) = v8;
  do
  {
    uint64_t v10 = a1 + v9;
    *(_DWORD *)(v10 + 3912) = 0;
    *(_DWORD *)(v10 + 3936) = 0;
    *(void *)(v10 + 3920) = 0;
    *(void *)(v10 + 3944) = 0;
    v9 += 48;
  }
  while (v9 != 3840);
  *(_OWORD *)(a1 + 7752) = 0u;
  uint64_t v11 = *(void **)(a1 + 3880);
  *(_DWORD *)(a1 + 7768) = 16;
  if (!v11)
  {
    *(unsigned char *)(a1 + 7772) = 0;
    goto LABEL_15;
  }
  char v12 = sub_2ABBE0(v11, 8, 1);
  unsigned int v13 = *(void **)(a1 + 3880);
  *(unsigned char *)(a1 + 7772) = v12;
  if (!v13)
  {
LABEL_15:
    LOBYTE(v15) = 0;
    *(unsigned char *)(a1 + 7773) = 0;
    goto LABEL_16;
  }
  char v14 = sub_2ABBE0(v13, 21, 1);
  uint64_t v15 = *(void ***)v5;
  *(unsigned char *)(a1 + 7773) = v14;
  if (v15) {
    LOBYTE(v15) = sub_2ABCE4(v15);
  }
LABEL_16:
  *(unsigned char *)(a1 + 7774) = (_BYTE)v15;
  *(_OWORD *)(a1 + 7776) = 0u;
  *(_OWORD *)(a1 + 7792) = 0u;
  *(_OWORD *)(a1 + 7808) = 0u;
  return a1;
}

void sub_327D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_327DA4(_Unwind_Exception *a1)
{
  sub_14A84(v3);
  sub_14A84(v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_327DC8(uint64_t *a1, uint64_t *a2, char a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    uint64_t v5 = *a1;
    uint64_t v7 = a1[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 0;
  a1[2] = v5;
  a1[3] = v7;
  do
  {
    uint64_t v9 = &a1[v8];
    *((_DWORD *)v9 + 8) = 0;
    *((_DWORD *)v9 + 14) = 0;
    v9[5] = 0;
    v9[8] = 0;
    v8 += 6;
  }
  while (v8 != 480);
  *((_OWORD *)a1 + 242) = 0u;
  uint64_t v10 = (void **)*a1;
  if (*a1) {
    LOBYTE(v10) = sub_2ABCE4(v10);
  }
  *((unsigned char *)a1 + 3888) = (_BYTE)v10;
  *((unsigned char *)a1 + 3889) = a3;
  a1[487] = (uint64_t)&unk_20E1710;
  a1[492] = 0;
  a1[488] = 0;
  a1[490] = 0;
  a1[489] = 0;
  a1[493] = (uint64_t)&unk_20E1710;
  a1[498] = 0;
  a1[494] = 0;
  a1[496] = 0;
  a1[495] = 0;
  a1[499] = (uint64_t)&unk_20E1710;
  a1[504] = 0;
  a1[500] = 0;
  a1[502] = 0;
  a1[501] = 0;
  a1[505] = (uint64_t)&unk_20E1710;
  a1[510] = 0;
  a1[507] = 0;
  a1[506] = 0;
  a1[508] = 0;
  a1[511] = (uint64_t)&unk_20E1710;
  a1[516] = 0;
  a1[514] = 0;
  a1[512] = 0;
  a1[513] = 0;
  a1[517] = (uint64_t)&unk_20E1710;
  a1[522] = 0;
  a1[520] = 0;
  a1[518] = 0;
  a1[519] = 0;
  a1[523] = (uint64_t)&unk_20E1710;
  a1[528] = 0;
  a1[525] = 0;
  a1[524] = 0;
  a1[526] = 0;
  a1[529] = (uint64_t)&unk_20E1710;
  a1[534] = 0;
  a1[531] = 0;
  a1[530] = 0;
  a1[532] = 0;
  a1[535] = (uint64_t)&unk_20E1710;
  a1[540] = 0;
  a1[537] = 0;
  a1[536] = 0;
  a1[538] = 0;
  a1[541] = (uint64_t)&unk_20E1710;
  a1[546] = 0;
  a1[543] = 0;
  a1[542] = 0;
  a1[544] = 0;
  a1[547] = (uint64_t)&unk_20E1710;
  a1[552] = 0;
  a1[549] = 0;
  a1[548] = 0;
  a1[550] = 0;
  a1[553] = (uint64_t)&unk_20E1710;
  a1[558] = 0;
  a1[555] = 0;
  a1[554] = 0;
  a1[556] = 0;
  a1[559] = (uint64_t)&unk_20E1710;
  a1[564] = 0;
  a1[561] = 0;
  a1[560] = 0;
  a1[562] = 0;
  a1[565] = (uint64_t)&unk_20E1710;
  a1[570] = 0;
  a1[567] = 0;
  a1[566] = 0;
  a1[568] = 0;
  a1[571] = (uint64_t)&unk_20E1710;
  a1[576] = 0;
  a1[573] = 0;
  a1[572] = 0;
  a1[574] = 0;
  a1[577] = (uint64_t)&unk_20E1710;
  a1[582] = 0;
  a1[579] = 0;
  a1[578] = 0;
  a1[580] = 0;
  return a1;
}

void sub_327FBC(_Unwind_Exception *a1)
{
  sub_14A84(v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_327FD8(uint64_t a1, uint64_t *a2, __int16 a3, __int16 a4)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = 0;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  do
  {
    uint64_t v8 = a1 + v7;
    *(_DWORD *)(v8 + 16) = 0;
    *(_DWORD *)(v8 + 40) = 0;
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 48) = 0;
    v7 += 48;
  }
  while (v7 != 3840);
  *(_OWORD *)(a1 + 3856) = 0u;
  *(_WORD *)(a1 + 3872) = a3;
  *(_DWORD *)(a1 + 3876) = 1;
  *(_WORD *)(a1 + 3880) = a4;
  *(_DWORD *)(a1 + 3884) = 1;
  uint64_t v9 = sub_2E5F98(a1, 1u, 1);
  if (!v9) {
    return a1;
  }
  uint64_t v10 = &v9[-*(int *)v9];
  if (*(unsigned __int16 *)v10 < 0x11u)
  {
    unsigned int v12 = 1;
LABEL_11:
    *(_DWORD *)(a1 + 3876) = v12;
    if (v12 > *(unsigned __int16 *)(a1 + 3872)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v11 = *((unsigned __int16 *)v10 + 8);
  if (v11)
  {
    unsigned int v12 = v9[v11];
    if (!v12) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  *(_DWORD *)(a1 + 3876) = 1;
  if (*(_WORD *)(a1 + 3872)) {
LABEL_12:
  }
    *(_WORD *)(a1 + 3872) = 0;
LABEL_13:
  unsigned int v13 = &v9[-*(int *)v9];
  if (*(unsigned __int16 *)v13 < 0x13u)
  {
    unsigned int v15 = 1;
  }
  else
  {
    uint64_t v14 = *((unsigned __int16 *)v13 + 9);
    if (!v14)
    {
      *(_DWORD *)(a1 + 3884) = 1;
      if (!*(_WORD *)(a1 + 3880)) {
        return a1;
      }
      goto LABEL_19;
    }
    unsigned int v15 = v9[v14];
    if (!v15) {
      return a1;
    }
  }
  *(_DWORD *)(a1 + 3884) = v15;
  if (v15 > *(unsigned __int16 *)(a1 + 3880)) {
    return a1;
  }
LABEL_19:
  *(_WORD *)(a1 + 3880) = 0;
  return a1;
}

void sub_328124(_Unwind_Exception *a1)
{
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_328138(uint64_t a1)
{
  if (*(void *)(a1 + 744))
  {
    operator delete(*(void **)(a1 + 720));
    *(void *)(a1 + 720) = &unk_20E1710;
    *(void *)(a1 + 760) = 0;
    *(void *)(a1 + 728) = 0;
    *(void *)(a1 + 744) = 0;
    *(void *)(a1 + 736) = 0;
  }
  if (*(void *)(a1 + 696))
  {
    operator delete(*(void **)(a1 + 672));
    *(void *)(a1 + 672) = &unk_20E1710;
    *(void *)(a1 + 712) = 0;
    *(void *)(a1 + 680) = 0;
    *(void *)(a1 + 696) = 0;
    *(void *)(a1 + 688) = 0;
  }
  if (*(void *)(a1 + 648))
  {
    operator delete(*(void **)(a1 + 624));
    *(void *)(a1 + 624) = &unk_20E1710;
    *(void *)(a1 + 664) = 0;
    *(void *)(a1 + 632) = 0;
    *(void *)(a1 + 648) = 0;
    *(void *)(a1 + 640) = 0;
  }
  if (*(void *)(a1 + 600))
  {
    operator delete(*(void **)(a1 + 576));
    *(void *)(a1 + 576) = &unk_20E1710;
    *(void *)(a1 + 616) = 0;
    *(void *)(a1 + 584) = 0;
    *(void *)(a1 + 600) = 0;
    *(void *)(a1 + 592) = 0;
  }
  if (*(void *)(a1 + 552))
  {
    operator delete(*(void **)(a1 + 528));
    *(void *)(a1 + 528) = &unk_20E1710;
    *(void *)(a1 + 568) = 0;
    *(void *)(a1 + 536) = 0;
    *(void *)(a1 + 552) = 0;
    *(void *)(a1 + 544) = 0;
  }
  if (*(void *)(a1 + 504))
  {
    operator delete(*(void **)(a1 + 480));
    *(void *)(a1 + 520) = 0;
    *(void *)(a1 + 480) = &unk_20E1710;
    *(void *)(a1 + 488) = 0;
    *(void *)(a1 + 496) = 0;
    *(void *)(a1 + 504) = 0;
  }
  if (*(void *)(a1 + 456))
  {
    operator delete(*(void **)(a1 + 432));
    *(void *)(a1 + 472) = 0;
    *(void *)(a1 + 432) = &unk_20E1710;
    *(void *)(a1 + 440) = 0;
    *(void *)(a1 + 448) = 0;
    *(void *)(a1 + 456) = 0;
  }
  if (*(void *)(a1 + 408))
  {
    operator delete(*(void **)(a1 + 384));
    *(void *)(a1 + 424) = 0;
    *(void *)(a1 + 384) = &unk_20E1710;
    *(void *)(a1 + 392) = 0;
    *(void *)(a1 + 400) = 0;
    *(void *)(a1 + 408) = 0;
  }
  if (*(void *)(a1 + 360))
  {
    operator delete(*(void **)(a1 + 336));
    *(void *)(a1 + 376) = 0;
    *(void *)(a1 + 336) = &unk_20E1710;
    *(void *)(a1 + 344) = 0;
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 360) = 0;
  }
  if (*(void *)(a1 + 312))
  {
    operator delete(*(void **)(a1 + 288));
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 288) = &unk_20E1710;
    *(void *)(a1 + 296) = 0;
    *(void *)(a1 + 304) = 0;
    *(void *)(a1 + 312) = 0;
  }
  if (*(void *)(a1 + 264))
  {
    operator delete(*(void **)(a1 + 240));
    *(void *)(a1 + 280) = 0;
    *(void *)(a1 + 240) = &unk_20E1710;
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
  }
  if (*(void *)(a1 + 216))
  {
    operator delete(*(void **)(a1 + 192));
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 192) = &unk_20E1710;
    *(void *)(a1 + 200) = 0;
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
  }
  if (*(void *)(a1 + 168))
  {
    operator delete(*(void **)(a1 + 144));
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 144) = &unk_20E1710;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
  }
  if (*(void *)(a1 + 120))
  {
    operator delete(*(void **)(a1 + 96));
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 96) = &unk_20E1710;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
  }
  if (*(void *)(a1 + 72))
  {
    operator delete(*(void **)(a1 + 48));
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 48) = &unk_20E1710;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
  }
  if (*(void *)(a1 + 24))
  {
    operator delete(*(void **)a1);
    *(void *)(a1 + 40) = 0;
    *(void *)a1 = &unk_20E1710;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_32834C(void *a1)
{
  uint64_t v2 = (void *)a1[975];
  if (v2)
  {
    a1[976] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[972];
  if (v3)
  {
    uint64_t v4 = a1[973];
    uint64_t v5 = (void *)a1[972];
    if (v4 != v3)
    {
      do
      {
        uint64_t v7 = *(void *)(v4 - 32);
        if (v7)
        {
          uint64_t v8 = *(void *)(v4 - 24);
          uint64_t v6 = *(void **)(v4 - 32);
          if (v8 != v7)
          {
            do
            {
              uint64_t v9 = *(void **)(v8 - 24);
              if (v9)
              {
                *(void *)(v8 - 16) = v9;
                operator delete(v9);
              }
              v8 -= 32;
            }
            while (v8 != v7);
            uint64_t v6 = *(void **)(v4 - 32);
          }
          *(void *)(v4 - 24) = v7;
          operator delete(v6);
        }
        v4 -= 48;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)a1[972];
    }
    a1[973] = v3;
    operator delete(v5);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[488];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    uint64_t v11 = (std::__shared_weak_count *)a1[486];
    if (!v11) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v11 = (std::__shared_weak_count *)a1[486];
    if (!v11) {
      goto LABEL_23;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_23:
  unsigned int v12 = (std::__shared_weak_count *)a1[1];
  if (!v12 || atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

uint64_t sub_328508(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "enable_filtering");
  uint64_t v4 = sub_58070(a2, (uint64_t)__p);
  if (!v4)
  {
    BOOL v5 = 0;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  BOOL v5 = *((_DWORD *)v4 + 12) == 4;
  if (SHIBYTE(__p[2]) < 0) {
LABEL_3:
  }
    operator delete(__p[0]);
LABEL_4:
  *(unsigned char *)a1 = v5;
  HIBYTE(__p[2]) = 7;
  strcpy((char *)__p, "max_frc");
  uint64_t v6 = sub_58070(a2, (uint64_t)__p);
  if (v6 && *((_DWORD *)v6 + 12) == 1)
  {
    unsigned int v7 = *((double *)v6 + 5);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v7 = 6;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  operator delete(__p[0]);
LABEL_10:
  *(_DWORD *)(a1 + 4) = v7;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "ignore_intersection_internal_speeds");
  uint64_t v8 = sub_58070(a2, (uint64_t)__p);
  if (v8)
  {
    BOOL v9 = *((_DWORD *)v8 + 12) == 4;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  BOOL v9 = 0;
  if (SHIBYTE(__p[2]) < 0) {
LABEL_12:
  }
    operator delete(__p[0]);
LABEL_13:
  *(unsigned char *)(a1 + 8) = v9;
  HIBYTE(__p[2]) = 20;
  strcpy((char *)__p, "min_segment_length_m");
  uint64_t v23 = 0x402E000000000000;
  uint64_t v10 = sub_58070(a2, (uint64_t)__p);
  if (v10)
  {
    uint64_t v11 = (double *)(v10 + 5);
    if (*((_DWORD *)v10 + 12) != 1) {
      uint64_t v11 = (double *)&v23;
    }
    double v12 = *v11 * 100.0;
    if (v12 < 0.0) {
      goto LABEL_17;
    }
  }
  else
  {
    double v12 = 15.0 * 100.0;
    if (15.0 * 100.0 < 0.0)
    {
LABEL_17:
      double v13 = v12;
      if (v12 <= -4.50359963e15) {
        goto LABEL_29;
      }
      uint64_t v14 = (uint64_t)(v12 + v12);
      if (v14 >= 1) {
        --v14;
      }
      goto LABEL_28;
    }
  }
  double v13 = v12;
  if (v12 >= 4.50359963e15) {
    goto LABEL_29;
  }
  uint64_t v14 = (uint64_t)(v12 + v12) + 1;
LABEL_28:
  double v13 = (double)(v14 >> 1);
LABEL_29:
  if (v13 >= 9.22337204e18)
  {
    *(void *)(a1 + 16) = 0x7FFFFFFFFFFFFFFELL;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_41;
    }
    goto LABEL_42;
  }
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_40;
    }
    uint64_t v15 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_40;
    }
    uint64_t v15 = (uint64_t)(v12 + v12);
    if (v15 >= 1) {
      --v15;
    }
  }
  double v12 = (double)(v15 >> 1);
LABEL_40:
  *(void *)(a1 + 16) = (uint64_t)v12;
  if (SHIBYTE(__p[2]) < 0) {
LABEL_41:
  }
    operator delete(__p[0]);
LABEL_42:
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "freeflow_ratio_ignore_lower_bound");
  uint64_t v16 = sub_58070(a2, (uint64_t)__p);
  if (v16 && *((_DWORD *)v16 + 12) == 1)
  {
    float v17 = *((double *)v16 + 5);
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_47;
    }
  }
  else
  {
    float v17 = 0.8;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_47:
    }
      operator delete(__p[0]);
  }
  *(float *)(a1 + 24) = v17;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "freeflow_ratio_ignore_upper_bound");
  size_t v18 = sub_58070(a2, (uint64_t)__p);
  if (v18 && *((_DWORD *)v18 + 12) == 1)
  {
    float v19 = *((double *)v18 + 5);
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_53;
    }
  }
  else
  {
    float v19 = 1.2;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_53:
    }
      operator delete(__p[0]);
  }
  *(float *)(a1 + 28) = v19;
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "round_to_kph");
  unint64_t v20 = sub_58070(a2, (uint64_t)__p);
  if (v20 && *((_DWORD *)v20 + 12) == 1)
  {
    unsigned int v21 = *((double *)v20 + 5);
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_59;
    }
  }
  else
  {
    unsigned int v21 = 5;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_59:
    }
      operator delete(__p[0]);
  }
  *(_DWORD *)(a1 + 32) = v21;
  return a1;
}

void sub_328958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_32898C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_2438A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_3289AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_2438A10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_328A00(uint64_t a1)
{
  return sub_3298C0(a1 + 24);
}

uint64_t sub_328A0C(uint64_t a1)
{
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  uint64_t v2 = a1 + 620;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 320) = 0x8000000080000000;
  *(_DWORD *)(a1 + 328) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_OWORD *)(a1 + 348) = 0u;
  *(_OWORD *)(a1 + 364) = 0u;
  *(_OWORD *)(a1 + 380) = 0u;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(_OWORD *)(a1 + 460) = 0u;
  *(_OWORD *)(a1 + 476) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(void *)(a1 + 504) = 0x8000000080000000;
  *(_DWORD *)(a1 + 512) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 618) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 608) = 0x3E4CCCCD3F000000;
  *(_OWORD *)(a1 + 620) = xmmword_20B93F0;
  *(unsigned char *)(a1 + 636) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 592) = xmmword_20B98A0;
  *(_WORD *)(a1 + 616) = 256;
  *(_OWORD *)(a1 + 656) = xmmword_20E2130;
  *(void *)(a1 + 672) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 680) = 0x7FFFFFFF;
  uint64_t v3 = malloc_type_malloc(0x280uLL, 0x1000040B68A9B53uLL);
  *(void *)(a1 + 688) = v3;
  uint64_t v4 = *(void *)(a1 + 656);
  if (v4)
  {
    uint64_t v5 = 20 * v4;
    do
    {
      long long v6 = *(_OWORD *)(a1 + 664);
      v3[4] = *(_DWORD *)(a1 + 680);
      *(_OWORD *)uint64_t v3 = v6;
      v3 += 5;
      v5 -= 20;
    }
    while (v5);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6898, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F6898))
  {
    qword_24F6890 = 1;
    __cxa_guard_release(&qword_24F6898);
  }
  uint64_t v7 = qword_24F6890;
  sub_328F88(a1 + 592);
  *(unsigned char *)(a1 + 618) = 1;
  *(void *)(a1 + 624) = v7;
  *(unsigned char *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 12) = -1;
  return a1;
}

void sub_328BE4(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  uint64_t v7 = *(void **)(v1 + 688);
  if (v7)
  {
    free(v7);
    sub_328DB4((uint64_t *)(v1 + 568));
    if ((*(char *)(v1 + 567) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v8 = (void **)(v1 + 296);
      BOOL v9 = (void **)(v1 + 384);
      uint64_t v10 = (void **)(v1 + 456);
      if ((*(char *)(v1 + 543) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else
  {
    sub_328DB4((uint64_t *)(v1 + 568));
    if ((*(char *)(v1 + 567) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*(void **)(v1 + 544));
  uint64_t v8 = (void **)(v1 + 296);
  BOOL v9 = (void **)(v1 + 384);
  uint64_t v10 = (void **)(v1 + 456);
  if ((*(char *)(v1 + 543) & 0x80000000) == 0)
  {
LABEL_4:
    uint64_t v11 = *(void **)(v1 + 480);
    if (!v11) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_19:
  operator delete(*v5);
  uint64_t v11 = *(void **)(v1 + 480);
  if (!v11)
  {
LABEL_6:
    sub_2F53CC(v10);
    sub_329718(v9);
    sub_2FC938(v3);
    sub_328DF0(v8);
    double v12 = *(void **)(v1 + 272);
    if (v12)
    {
      *(void *)(v1 + 280) = v12;
      operator delete(v12);
      double v13 = *(void **)(v1 + 248);
      if (!v13)
      {
LABEL_8:
        uint64_t v14 = (void **)(v1 + 152);
        sub_328E80(v2);
        uint64_t v15 = *(void **)(v1 + 200);
        if (!v15) {
          goto LABEL_9;
        }
        goto LABEL_23;
      }
    }
    else
    {
      double v13 = *(void **)(v1 + 248);
      if (!v13) {
        goto LABEL_8;
      }
    }
    *(void *)(v1 + 256) = v13;
    operator delete(v13);
    uint64_t v14 = (void **)(v1 + 152);
    sub_328E80(v2);
    uint64_t v15 = *(void **)(v1 + 200);
    if (!v15)
    {
LABEL_9:
      uint64_t v16 = *(void **)(v1 + 176);
      if (!v16) {
        goto LABEL_10;
      }
      goto LABEL_24;
    }
LABEL_23:
    *(void *)(v1 + 208) = v15;
    operator delete(v15);
    uint64_t v16 = *(void **)(v1 + 176);
    if (!v16)
    {
LABEL_10:
      sub_328F2C(v14);
      float v17 = *(void **)(v1 + 128);
      if (!v17) {
        goto LABEL_11;
      }
      goto LABEL_25;
    }
LABEL_24:
    *(void *)(v1 + 184) = v16;
    operator delete(v16);
    sub_328F2C(v14);
    float v17 = *(void **)(v1 + 128);
    if (!v17)
    {
LABEL_11:
      size_t v18 = *(void **)(v1 + 104);
      if (!v18) {
        goto LABEL_12;
      }
      goto LABEL_26;
    }
LABEL_25:
    *(void *)(v1 + 136) = v17;
    operator delete(v17);
    size_t v18 = *(void **)(v1 + 104);
    if (!v18)
    {
LABEL_12:
      float v19 = *(void **)(v1 + 80);
      if (!v19) {
        goto LABEL_13;
      }
      goto LABEL_27;
    }
LABEL_26:
    *(void *)(v1 + 112) = v18;
    operator delete(v18);
    float v19 = *(void **)(v1 + 80);
    if (!v19)
    {
LABEL_13:
      unint64_t v20 = *(void **)(v1 + 56);
      if (!v20) {
        goto LABEL_14;
      }
      goto LABEL_28;
    }
LABEL_27:
    *(void *)(v1 + 88) = v19;
    operator delete(v19);
    unint64_t v20 = *(void **)(v1 + 56);
    if (!v20)
    {
LABEL_14:
      unsigned int v21 = *(void **)(v1 + 32);
      if (!v21) {
        goto LABEL_15;
      }
      goto LABEL_29;
    }
LABEL_28:
    *(void *)(v1 + 64) = v20;
    operator delete(v20);
    unsigned int v21 = *(void **)(v1 + 32);
    if (!v21)
    {
LABEL_15:
      uint64_t v22 = *(void **)(v1 + 8);
      if (!v22) {
        goto LABEL_16;
      }
      goto LABEL_30;
    }
LABEL_29:
    *(void *)(v1 + 40) = v21;
    operator delete(v21);
    uint64_t v22 = *(void **)(v1 + 8);
    if (!v22) {
LABEL_16:
    }
      _Unwind_Resume(a1);
LABEL_30:
    *(void *)(v1 + 16) = v22;
    operator delete(v22);
    _Unwind_Resume(a1);
  }
LABEL_5:
  *(void *)(v1 + 488) = v11;
  operator delete(v11);
  goto LABEL_6;
}

uint64_t *sub_328DB4(uint64_t *a1)
{
  if (*a1)
  {
    sub_329660((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void **sub_328DF0(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 41) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 8));
      }
      else if (*((char *)v3 - 41) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 8;
      if (v3 == v2)
      {
        uint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void **sub_328E80(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        sub_303198(v3 - 168);
        uint64_t v5 = *(void *)(v3 - 192);
        if (v5)
        {
          uint64_t v6 = *(void *)(v3 - 184);
          uint64_t v7 = *(void **)(v3 - 192);
          if (v6 != v5)
          {
            do
              uint64_t v6 = sub_30328C(v6 - 184);
            while (v6 != v5);
            uint64_t v7 = *(void **)(v3 - 192);
          }
          *(void *)(v3 - 184) = v5;
          operator delete(v7);
        }
        v3 -= 648;
        sub_29D95C(v3);
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_328F2C(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_29D95C(v3 - 424);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_328F88(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    sub_329090((uint64_t)&v16, a1, 0x20uLL);
    uint64x2_t v3 = *(uint64x2_t *)a1;
    long long v2 = *(_OWORD *)(a1 + 16);
    long long v4 = v17;
    *(uint64x2_t *)a1 = v16;
    *(_OWORD *)(a1 + 16) = v4;
    uint64x2_t v16 = v3;
    long long v17 = v2;
    long long v5 = v19;
    long long v6 = *(_OWORD *)(a1 + 32);
    long long v7 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 32) = v18;
    *(_OWORD *)(a1 + 48) = v5;
    long long v18 = v6;
    long long v19 = v7;
    unint64_t v8 = *(void *)(a1 + 64);
    unint64_t v9 = v20;
    *(void *)(a1 + 64) = v20;
    unint64_t v20 = v8;
    int v10 = *(_DWORD *)(a1 + 80);
    char v11 = *(unsigned char *)(a1 + 84);
    __int16 v24 = *(_WORD *)(a1 + 85);
    __int16 v12 = v24;
    char v25 = *(unsigned char *)(a1 + 87);
    char v13 = v25;
    int v14 = *(_DWORD *)(a1 + 88);
    *(void *)&long long v2 = *(void *)(a1 + 72);
    *(_OWORD *)(a1 + 72) = v21;
    *(_DWORD *)(a1 + 88) = v22;
    *(void *)&long long v21 = v2;
    DWORD2(v21) = v10;
    BYTE12(v21) = v11;
    HIBYTE(v21) = v13;
    *(_WORD *)((char *)&v21 + 13) = v12;
    int v22 = v14;
    uint64_t v15 = *(void **)(a1 + 96);
    *(void *)(a1 + 96) = v23;
    uint64_t v23 = v15;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)v9)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v16 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v17, (float)v8)));
    BYTE8(v17) = 0;
    if (v15) {
      free(v15);
    }
  }
}

float sub_329090(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  long long v4 = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  *(void *)(a1 + 96) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + 24) = 0;
    sub_3291DC(a1, a2, a3);
  }
  else
  {
    unint64_t v6 = 4;
    if (a3 > 4) {
      goto LABEL_5;
    }
    while (1)
    {
      float v7 = *(float *)(a1 + 16) * (float)v6;
      if (*(void *)(a2 + 56) - *(void *)(a2 + 48) < (unint64_t)v7) {
        break;
      }
      do
      {
LABEL_5:
        if ((v6 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v6 *= 2;
      }
      while (v6 < a3);
    }
    *(void *)(a1 + 64) = v6;
    float result = *(float *)(a1 + 20) * (float)v6;
    *(void *)a1 = (unint64_t)v7;
    *(void *)(a1 + 8) = (unint64_t)result;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_3291C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_3291DC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = *(void *)(a2 + 56) - *(void *)(a2 + 48);
  unint64_t v6 = 4;
  if (a3 <= 4) {
    goto LABEL_4;
  }
  do
  {
    do
    {
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
LABEL_4:
    ;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6));
  sub_329560(a1, v6);
  uint64_t v7 = *(void *)(a2 + 64);
  if (v7)
  {
    int v8 = *(_DWORD *)(a2 + 72);
    int v9 = *(_DWORD *)(a2 + 76);
    int v10 = *(_DWORD *)(a2 + 80);
    int v11 = *(unsigned __int8 *)(a2 + 84);
    if (*(void *)(a2 + 48))
    {
      uint64_t v12 = 20 * v7;
      char v13 = *(unsigned int **)(a2 + 96);
      while (v8 == *v13 && v9 == v13[1] && v10 == v13[2] && v11 == *((unsigned __int8 *)v13 + 12)
           || *(_DWORD *)(a2 + 32) == *v13
           && *(_DWORD *)(a2 + 36) == v13[1]
           && *(_DWORD *)(a2 + 40) == v13[2]
           && *(unsigned __int8 *)(a2 + 44) == *((unsigned __int8 *)v13 + 12))
      {
        v13 += 5;
        v12 -= 20;
        if (!v12) {
          goto LABEL_53;
        }
      }
    }
    else
    {
      uint64_t v28 = 20 * v7;
      char v13 = *(unsigned int **)(a2 + 96);
      while (v8 == *v13 && v9 == v13[1] && v10 == v13[2] && v11 == *((unsigned __int8 *)v13 + 12))
      {
        v13 += 5;
        v28 -= 20;
        if (!v28) {
          goto LABEL_53;
        }
      }
    }
  }
  else
  {
    char v13 = *(unsigned int **)(a2 + 96);
  }
  uint64_t v14 = *(void *)(a2 + 96) + 20 * v7;
  if (v13 != (unsigned int *)v14)
  {
    do
    {
      uint64_t v15 = *(void *)(a1 + 64) - 1;
      unint64_t v16 = (v13[1] + 2654435769 + ((unint64_t)*v13 << 6) + ((unint64_t)*v13 >> 2)) ^ *v13;
      unint64_t v17 = (v13[2] + 2654435769 + (v16 << 6) + (v16 >> 2)) ^ v16;
      uint64_t v18 = (*((unsigned __int8 *)v13 + 12) + 2654435769 + (v17 << 6) + (v17 >> 2)) ^ v17;
      for (uint64_t i = 1; ; ++i)
      {
        uint64_t v20 = v18 & v15;
        uint64_t v21 = *(void *)(a1 + 96) + 20 * (v18 & v15);
        if (*(_DWORD *)(a1 + 72) == *(_DWORD *)v21
          && *(_DWORD *)(a1 + 76) == *(_DWORD *)(v21 + 4)
          && *(_DWORD *)(a1 + 80) == *(_DWORD *)(v21 + 8)
          && *(unsigned __int8 *)(a1 + 84) == *(unsigned __int8 *)(v21 + 12))
        {
          break;
        }
        uint64_t v18 = i + v20;
      }
      long long v22 = *(_OWORD *)v13;
      *(_DWORD *)(v21 + 16) = v13[4];
      *(_OWORD *)uint64_t v21 = v22;
      ++*(void *)(a1 + 56);
      uint64_t v23 = v13 + 5;
      char v13 = (unsigned int *)v14;
      if (v23 != (unsigned int *)v14)
      {
        int v24 = *(_DWORD *)(a2 + 72);
        int v25 = *(_DWORD *)(a2 + 76);
        int v26 = *(_DWORD *)(a2 + 80);
        int v27 = *(unsigned __int8 *)(a2 + 84);
        if (*(void *)(a2 + 48))
        {
          while (v24 == *v23 && v25 == v23[1] && v26 == v23[2] && v27 == *((unsigned __int8 *)v23 + 12)
               || *(_DWORD *)(a2 + 32) == *v23
               && *(_DWORD *)(a2 + 36) == v23[1]
               && *(_DWORD *)(a2 + 40) == v23[2]
               && *(unsigned __int8 *)(a2 + 44) == *((unsigned __int8 *)v23 + 12))
          {
            v23 += 5;
            if (v23 == (unsigned int *)v14) {
              goto LABEL_46;
            }
          }
        }
        else
        {
          while (v24 == *v23 && v25 == v23[1] && v26 == v23[2] && v27 == *((unsigned __int8 *)v23 + 12))
          {
            v23 += 5;
            if (v23 == (unsigned int *)v14)
            {
LABEL_46:
              char v13 = (unsigned int *)v14;
              goto LABEL_22;
            }
          }
        }
        char v13 = v23;
      }
LABEL_22:
      ;
    }
    while (v13 != (unsigned int *)(*(void *)(a2 + 96) + 20 * *(void *)(a2 + 64)));
  }
LABEL_53:
  ++*(_DWORD *)(a1 + 28);
}

void sub_32954C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64x2_t sub_329560(uint64_t a1, unint64_t a2)
{
  long long v4 = *(_DWORD **)(a1 + 96);
  if (v4)
  {
    if (*(void *)(a1 + 64) == a2) {
      goto LABEL_7;
    }
    unint64_t v5 = malloc_type_realloc(*(void **)(a1 + 96), 20 * a2, 0x1000040B68A9B53uLL);
    if (!v5)
    {
      fprintf(__stderrp, "sparsehash: FATAL ERROR: failed to reallocate %lu elements for ptr %p", a2, v4);
      exit(1);
    }
  }
  else
  {
    unint64_t v5 = malloc_type_malloc(20 * a2, 0x1000040B68A9B53uLL);
  }
  *(void *)(a1 + 96) = v5;
  long long v4 = v5;
LABEL_7:
  if (a2)
  {
    uint64_t v6 = 20 * a2;
    do
    {
      long long v7 = *(_OWORD *)(a1 + 72);
      v4[4] = *(_DWORD *)(a1 + 88);
      *(_OWORD *)long long v4 = v7;
      v4 += 5;
      v6 -= 20;
    }
    while (v6);
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  uint64x2_t result = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)a2)));
  *(uint64x2_t *)a1 = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void sub_329660(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 144)
  {
    unint64_t v5 = *(void **)(i - 32);
    if (v5)
    {
      *(void *)(i - 24) = v5;
      operator delete(v5);
    }
    if (*(char *)(i - 41) < 0)
    {
      operator delete(*(void **)(i - 64));
      if ((*(char *)(i - 65) & 0x80000000) == 0)
      {
LABEL_8:
        if ((*(char *)(i - 97) & 0x80000000) == 0) {
          goto LABEL_9;
        }
        goto LABEL_13;
      }
    }
    else if ((*(char *)(i - 65) & 0x80000000) == 0)
    {
      goto LABEL_8;
    }
    operator delete(*(void **)(i - 88));
    if ((*(char *)(i - 97) & 0x80000000) == 0)
    {
LABEL_9:
      if (*(char *)(i - 121) < 0) {
        goto LABEL_14;
      }
      continue;
    }
LABEL_13:
    operator delete(*(void **)(i - 120));
    if (*(char *)(i - 121) < 0) {
LABEL_14:
    }
      operator delete(*(void **)(i - 144));
  }
  *(void *)(a1 + 8) = a2;
}

void **sub_329718(void **a1)
{
  long long v2 = (char *)a1[6];
  if (v2)
  {
    long long v3 = (char *)a1[7];
    long long v4 = a1[6];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 4);
        if (v6)
        {
          uint64_t v7 = *((void *)v3 - 3);
          unint64_t v5 = (void *)*((void *)v3 - 4);
          if (v7 != v6)
          {
            do
            {
              if (*(char *)(v7 - 17) < 0) {
                operator delete(*(void **)(v7 - 40));
              }
              v7 -= 40;
            }
            while (v7 != v6);
            unint64_t v5 = (void *)*((void *)v3 - 4);
          }
          *((void *)v3 - 3) = v6;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      long long v4 = a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  int v8 = (char *)a1[3];
  if (v8)
  {
    int v9 = (char *)a1[4];
    int v10 = a1[3];
    if (v9 != v8)
    {
      do
      {
        uint64_t v12 = *((void *)v9 - 4);
        if (v12)
        {
          uint64_t v13 = *((void *)v9 - 3);
          int v11 = (void *)*((void *)v9 - 4);
          if (v13 != v12)
          {
            do
            {
              if (*(char *)(v13 - 17) < 0) {
                operator delete(*(void **)(v13 - 40));
              }
              v13 -= 40;
            }
            while (v13 != v12);
            int v11 = (void *)*((void *)v9 - 4);
          }
          *((void *)v9 - 3) = v12;
          operator delete(v11);
        }
        v9 -= 40;
      }
      while (v9 != v8);
      int v10 = a1[3];
    }
    a1[4] = v8;
    operator delete(v10);
  }
  uint64_t v14 = (char *)*a1;
  if (*a1)
  {
    uint64_t v15 = (char *)a1[1];
    unint64_t v16 = *a1;
    if (v15 != v14)
    {
      do
      {
        uint64_t v18 = *((void *)v15 - 4);
        if (v18)
        {
          uint64_t v19 = *((void *)v15 - 3);
          unint64_t v17 = (void *)*((void *)v15 - 4);
          if (v19 != v18)
          {
            do
            {
              if (*(char *)(v19 - 17) < 0) {
                operator delete(*(void **)(v19 - 40));
              }
              v19 -= 40;
            }
            while (v19 != v18);
            unint64_t v17 = (void *)*((void *)v15 - 4);
          }
          *((void *)v15 - 3) = v18;
          operator delete(v17);
        }
        v15 -= 40;
      }
      while (v15 != v14);
      unint64_t v16 = *a1;
    }
    a1[1] = v14;
    operator delete(v16);
  }
  return a1;
}

uint64_t sub_3298C0(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 688);
  if (v2) {
    free(v2);
  }
  uint64_t v3 = *(void *)(a1 + 568);
  if (v3)
  {
    sub_329660(a1 + 568, v3);
    operator delete(*(void **)(a1 + 568));
  }
  if (*(char *)(a1 + 567) < 0)
  {
    operator delete(*(void **)(a1 + 544));
    if ((*(char *)(a1 + 543) & 0x80000000) == 0)
    {
LABEL_7:
      long long v4 = *(void **)(a1 + 480);
      if (!v4) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 543) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 520));
  long long v4 = *(void **)(a1 + 480);
  if (v4)
  {
LABEL_8:
    *(void *)(a1 + 488) = v4;
    operator delete(v4);
  }
LABEL_9:
  uint64_t v5 = *(void *)(a1 + 456);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 464);
    uint64_t v7 = *(void **)(a1 + 456);
    if (v6 != v5)
    {
      do
        uint64_t v6 = sub_2F6914(v6 - 312);
      while (v6 != v5);
      uint64_t v7 = *(void **)(a1 + 456);
    }
    *(void *)(a1 + 464) = v5;
    operator delete(v7);
  }
  sub_329718((void **)(a1 + 384));
  int v8 = *(void **)(a1 + 360);
  if (v8)
  {
    *(void *)(a1 + 368) = v8;
    operator delete(v8);
  }
  int v9 = *(void **)(a1 + 336);
  if (v9)
  {
    *(void *)(a1 + 344) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void *)(a1 + 296);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 304);
    uint64_t v12 = *(void **)(a1 + 296);
    if (v11 == v10)
    {
LABEL_31:
      *(void *)(a1 + 304) = v10;
      operator delete(v12);
      goto LABEL_32;
    }
    while (1)
    {
      if (*(char *)(v11 - 1) < 0)
      {
        operator delete(*(void **)(v11 - 24));
        if (*(char *)(v11 - 41) < 0) {
LABEL_26:
        }
          operator delete(*(void **)(v11 - 64));
      }
      else if (*(char *)(v11 - 41) < 0)
      {
        goto LABEL_26;
      }
      v11 -= 64;
      if (v11 == v10)
      {
        uint64_t v12 = *(void **)(a1 + 296);
        goto LABEL_31;
      }
    }
  }
LABEL_32:
  uint64_t v13 = *(void **)(a1 + 272);
  if (v13)
  {
    *(void *)(a1 + 280) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(a1 + 248);
  if (v14)
  {
    *(void *)(a1 + 256) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void *)(a1 + 224);
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 232);
    unint64_t v17 = *(void **)(a1 + 224);
    if (v16 != v15)
    {
      do
      {
        sub_303198(v16 - 168);
        uint64_t v18 = *(void *)(v16 - 192);
        if (v18)
        {
          uint64_t v19 = *(void *)(v16 - 184);
          uint64_t v20 = *(void **)(v16 - 192);
          if (v19 != v18)
          {
            do
              uint64_t v19 = sub_30328C(v19 - 184);
            while (v19 != v18);
            uint64_t v20 = *(void **)(v16 - 192);
          }
          *(void *)(v16 - 184) = v18;
          operator delete(v20);
        }
        v16 -= 648;
        sub_29D95C(v16);
      }
      while (v16 != v15);
      unint64_t v17 = *(void **)(a1 + 224);
    }
    *(void *)(a1 + 232) = v15;
    operator delete(v17);
  }
  uint64_t v21 = *(void **)(a1 + 200);
  if (v21)
  {
    *(void *)(a1 + 208) = v21;
    operator delete(v21);
  }
  long long v22 = *(void **)(a1 + 176);
  if (v22)
  {
    *(void *)(a1 + 184) = v22;
    operator delete(v22);
  }
  uint64_t v23 = *(void *)(a1 + 152);
  if (v23)
  {
    uint64_t v24 = *(void *)(a1 + 160);
    int v25 = *(void **)(a1 + 152);
    if (v24 != v23)
    {
      do
        uint64_t v24 = sub_29D95C(v24 - 424);
      while (v24 != v23);
      int v25 = *(void **)(a1 + 152);
    }
    *(void *)(a1 + 160) = v23;
    operator delete(v25);
  }
  int v26 = *(void **)(a1 + 128);
  if (v26)
  {
    *(void *)(a1 + 136) = v26;
    operator delete(v26);
  }
  int v27 = *(void **)(a1 + 104);
  if (v27)
  {
    *(void *)(a1 + 112) = v27;
    operator delete(v27);
  }
  uint64_t v28 = *(void **)(a1 + 80);
  if (v28)
  {
    *(void *)(a1 + 88) = v28;
    operator delete(v28);
  }
  size_t v29 = *(void **)(a1 + 56);
  if (v29)
  {
    *(void *)(a1 + 64) = v29;
    operator delete(v29);
  }
  int v30 = *(void **)(a1 + 32);
  if (v30)
  {
    *(void *)(a1 + 40) = v30;
    operator delete(v30);
  }
  int v31 = *(void **)(a1 + 8);
  if (v31)
  {
    *(void *)(a1 + 16) = v31;
    operator delete(v31);
  }
  return a1;
}

uint64_t sub_329B74(int64x2_t *a1, long long *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v4;
  }
  int v26 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(144 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::string __p = v7;
  v24.i64[0] = (uint64_t)&v7[144 * v3];
  int v25 = &v7[144 * v6];
  sub_329D98((char *)v24.i64[0], a2);
  uint64_t v8 = v24.i64[0];
  uint64_t v9 = v24.i64[0] + 144;
  v24.i64[1] = v24.i64[0] + 144;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v20 = vdupq_n_s64(v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v8 + v12;
      uint64_t v14 = v10 + v12;
      long long v15 = *(_OWORD *)(v10 + v12 - 144);
      *(void *)(v13 - 128) = *(void *)(v10 + v12 - 128);
      *(_OWORD *)(v13 - 144) = v15;
      *(void *)(v14 - 136) = 0;
      *(void *)(v14 - 128) = 0;
      *(void *)(v14 - 144) = 0;
      long long v16 = *(_OWORD *)(v10 + v12 - 120);
      *(void *)(v13 - 104) = *(void *)(v10 + v12 - 104);
      *(_OWORD *)(v13 - 120) = v16;
      *(void *)(v14 - 112) = 0;
      *(void *)(v14 - 104) = 0;
      *(void *)(v14 - 120) = 0;
      *(void *)(v13 - 96) = *(void *)(v10 + v12 - 96);
      long long v17 = *(_OWORD *)(v10 + v12 - 88);
      *(void *)(v13 - 72) = *(void *)(v10 + v12 - 72);
      *(_OWORD *)(v13 - 88) = v17;
      *(void *)(v14 - 80) = 0;
      *(void *)(v14 - 72) = 0;
      *(void *)(v14 - 88) = 0;
      long long v18 = *(_OWORD *)(v10 + v12 - 64);
      *(void *)(v13 - 48) = *(void *)(v10 + v12 - 48);
      *(_OWORD *)(v13 - 64) = v18;
      *(void *)(v14 - 56) = 0;
      *(void *)(v14 - 48) = 0;
      *(void *)(v14 - 64) = 0;
      int v19 = *(_DWORD *)(v10 + v12 - 40);
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      *(void *)(v13 - 32) = 0;
      *(_DWORD *)(v13 - 40) = v19;
      *(_OWORD *)(v13 - 32) = *(_OWORD *)(v10 + v12 - 32);
      *(void *)(v13 - 16) = *(void *)(v10 + v12 - 16);
      *(void *)(v14 - 32) = 0;
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(void *)(v13 - 8) = *(void *)(v10 + v12 - 8);
      v12 -= 144;
    }
    while (v10 + v12 != v11);
    int64x2_t v20 = *a1;
    uint64_t v9 = v24.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v24 = v20;
  uint64_t v21 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v25;
  int v25 = v21;
  std::string __p = (void *)v20.i64[0];
  sub_2A22B4((uint64_t)&__p, v20.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v9;
}

void sub_329D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_329FDC((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_329D98(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    uint64_t v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
    uint64_t v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      long long v6 = *(long long *)((char *)a2 + 24);
      *((void *)v5 + 2) = *((void *)a2 + 5);
      *(_OWORD *)uint64_t v5 = v6;
      goto LABEL_6;
    }
  }
  sub_4200(v5, *((void **)a2 + 3), *((void *)a2 + 4));
LABEL_6:
  *((void *)__dst + 6) = *((void *)a2 + 6);
  if (*((char *)a2 + 79) < 0)
  {
    sub_4200(__dst + 56, *((void **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 56);
    *((void *)__dst + 9) = *((void *)a2 + 9);
    *(_OWORD *)(__dst + 56) = v7;
  }
  if (*((char *)a2 + 103) < 0)
  {
    sub_4200(__dst + 80, *((void **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v8 = a2[5];
    *((void *)__dst + 12) = *((void *)a2 + 12);
    *((_OWORD *)__dst + 5) = v8;
  }
  int v9 = *((_DWORD *)a2 + 26);
  *((void *)__dst + 14) = 0;
  *((_DWORD *)__dst + 26) = v9;
  *((void *)__dst + 15) = 0;
  *((void *)__dst + 16) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 14);
  unint64_t v10 = (unsigned char *)*((void *)a2 + 15);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v12 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v13 = (char *)operator new(v12);
    *((void *)__dst + 14) = v13;
    *((void *)__dst + 15) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *((void *)__dst + 16) = v14;
    memcpy(v13, v11, v12);
    *((void *)__dst + 15) = v14;
  }
  *((void *)__dst + 17) = *((void *)a2 + 17);
  return __dst;
}

void sub_329F28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 79) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_329FDC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_32A014(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return (char *)v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            uint64_t v11 = (uint64_t *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return (char *)v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  long long v15 = (char *)operator new(0x108uLL);
  *(void *)long long v15 = 0;
  *((void *)v15 + 1) = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *(_OWORD *)(v15 + 248) = 0u;
  *(_OWORD *)(v15 + 232) = 0u;
  *(_OWORD *)(v15 + 216) = 0u;
  *(_OWORD *)(v15 + 200) = 0u;
  *(_OWORD *)(v15 + 184) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 24) = 0u;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < v8) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
  }
  uint64_t v25 = *(void *)a1;
  int v26 = *(void **)(*(void *)a1 + 8 * v7);
  if (v26)
  {
    *(void *)long long v15 = *v26;
LABEL_59:
    *int v26 = v15;
    goto LABEL_60;
  }
  *(void *)long long v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v7) = a1 + 16;
  if (*(void *)v15)
  {
    unint64_t v27 = *(void *)(*(void *)v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    int v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_32A348(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_32A35C(uint64_t a1, uint64_t a2, char a3)
{
  long long v6 = sub_32A458(a1, a2);
  if (!v6) {
    return sub_32A584(a1, a2);
  }
  unint64_t v7 = &v6[-*(int *)v6];
  unsigned int v8 = *(unsigned __int16 *)v7;
  if (v8 < 9 || !*((_WORD *)v7 + 4))
  {
    unsigned int v9 = 0xFFFF;
    if (a3) {
      goto LABEL_12;
    }
LABEL_7:
    unsigned int v10 = *(unsigned __int16 *)(a1 + 3872);
    if (*(_WORD *)(a1 + 3872))
    {
      if (v8 >= 0xF)
      {
        uint64_t v11 = *((unsigned __int16 *)v7 + 7);
        if (v11)
        {
          unint64_t v12 = &v6[v11 + *(unsigned int *)&v6[v11]];
          if (*(_DWORD *)v12 >= v10)
          {
            unsigned int v13 = *(unsigned __int16 *)&v12[2 * v10 + 2];
            if ((unsigned __int16)(v13 + 1) > 1u)
            {
              double v15 = (double)v13;
              return v15 / 100.0;
            }
          }
        }
      }
    }
    goto LABEL_12;
  }
  unsigned int v9 = *(unsigned __int16 *)&v6[*((unsigned __int16 *)v7 + 4)];
  if ((a3 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_12:
  double result = -1.0;
  if ((unsigned __int16)(v9 - 1) <= 0xFFFDu)
  {
    double v15 = (double)v9;
    return v15 / 100.0;
  }
  return result;
}

char *sub_32A458(uint64_t a1, uint64_t a2)
{
  double result = sub_2E5E08(a1, a2, 1);
  if (result)
  {
    uint64_t v5 = &result[-*(int *)result];
    if (*(unsigned __int16 *)v5 < 0xBu)
    {
      return 0;
    }
    else
    {
      if (!*((_WORD *)v5 + 5)) {
        return 0;
      }
      long long v6 = &result[*((unsigned __int16 *)v5 + 5) + *(unsigned int *)&result[*((unsigned __int16 *)v5 + 5)]];
      if (*(_DWORD *)v6 <= WORD2(a2)) {
        return 0;
      }
      uint64_t v7 = 8 * WORD2(a2);
      uint64_t v8 = (uint64_t)&v6[v7 + 4];
      if (!*(_DWORD *)v8) {
        return 0;
      }
      char v9 = v6[v7 + 10];
      double result = sub_2E5F98(a1, *(_DWORD *)v8, 1);
      if (result)
      {
        unsigned int v10 = &result[-*(int *)result];
        unsigned int v11 = *(unsigned __int16 *)v10;
        if (((a2 & 0xFF000000000000) != 0) == (v9 & 2) >> 1)
        {
          if (v11 < 7) {
            return 0;
          }
          int v12 = *((unsigned __int16 *)v10 + 3);
          if (!v12) {
            return 0;
          }
        }
        else
        {
          if (v11 < 5) {
            return 0;
          }
          int v12 = *((unsigned __int16 *)v10 + 2);
          if (!v12) {
            return 0;
          }
        }
        unsigned int v13 = &result[v12 + *(unsigned int *)&result[v12]];
        uint64_t v14 = *(unsigned __int16 *)(v8 + 4);
        if (*(_DWORD *)v13 > v14) {
          return &v13[4 * v14 + 4 + *(unsigned int *)&v13[4 * v14 + 4]];
        }
        return 0;
      }
    }
  }
  return result;
}

double sub_32A584(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v2 = WORD2(a2);
  unsigned int v4 = a2;
  uint64_t v5 = sub_290DEC(a1, a2, 1);
  double v6 = -1.0;
  if (v5)
  {
    uint64_t v7 = &v5[-*(int *)v5];
    if (*(unsigned __int16 *)v7 >= 5u)
    {
      if (*((_WORD *)v7 + 2))
      {
        uint64_t v8 = &v5[*((unsigned __int16 *)v7 + 2) + *(unsigned int *)&v5[*((unsigned __int16 *)v7 + 2)]];
        if (*(_DWORD *)v8 > v2)
        {
          char v9 = &v8[4 * v2 + 4 + *(unsigned int *)&v8[4 * v2 + 4]];
          unsigned int v10 = &v9[-*(int *)v9];
          if (*(unsigned __int16 *)v10 >= 0x43u && (uint64_t v11 = *((unsigned __int16 *)v10 + 33)) != 0)
          {
            int v12 = v9[v11];
            unsigned int v13 = sub_2E5F98(a1, v4, 1);
            if (!v13) {
              return v6;
            }
          }
          else
          {
            int v12 = 0;
            unsigned int v13 = sub_2E5F98(a1, v4, 1);
            if (!v13) {
              return v6;
            }
          }
          uint64_t v14 = &v13[-*(int *)v13];
          if (*(unsigned __int16 *)v14 >= 0x15u)
          {
            uint64_t v15 = *((unsigned __int16 *)v14 + 10);
            if (v15)
            {
              float v16 = &v13[v15 + *(unsigned int *)&v13[v15]];
              unsigned int v18 = *(_DWORD *)v16;
              float v17 = (unsigned __int8 *)(v16 + 4);
              uint64_t v19 = 4 * v18;
              if (v18)
              {
                uint64_t v20 = v19;
                for (uint64_t i = v17; v12 != *i; i += 4)
                {
                  v20 -= 4;
                  if (!v20) {
                    return v6;
                  }
                }
              }
              else
              {
                uint64_t i = v17;
              }
              if (i != &v17[v19])
              {
                unsigned int v22 = *((unsigned __int16 *)i + 1);
                if ((unsigned __int16)(v22 - 1) <= 0xFFFDu) {
                  return (double)v22 / 100.0;
                }
              }
            }
          }
        }
      }
    }
  }
  return v6;
}

uint64_t sub_32A6F4(uint64_t a1, unint64_t a2)
{
  unint64_t v69 = a2;
  unint64_t v4 = HIDWORD(a2);
  uint64_t v5 = a1 + 16;
  if ((a2 & 0x8000000000000000) == 0)
  {
    double v6 = sub_2E5E08(a1 + 16, a2, 1);
    if (!v6) {
      return 0;
    }
    uint64_t v7 = &v6[-*(int *)v6];
    if (*(unsigned __int16 *)v7 < 5u) {
      return 0;
    }
    uint64_t v8 = *((unsigned __int16 *)v7 + 2);
    if (!v8) {
      return 0;
    }
    char v9 = (unsigned int *)&v6[v8 + *(unsigned int *)&v6[v8]];
    if (*v9 <= (v4 & 0x3FFFFFFF)) {
      return 0;
    }
    unsigned int v10 = (int *)((char *)v9 + (4 * v4) + *(unsigned int *)((char *)v9 + (4 * v4) + 4) + 4);
    uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    unsigned int v12 = *v11;
    if (v12 >= 0xB)
    {
      if (!v11[5] || (int v13 = *(unsigned __int8 *)(a1 + 3889), v13 == 254))
      {
LABEL_46:
        uint64_t v43 = v11[2];
        if (v43)
        {
          uint64_t v44 = (unsigned int *)((char *)v10 + v43);
          uint64_t v45 = *v44;
          uint64_t v47 = (uint64_t)v44 + v45 + 4;
          uint64_t v46 = *(unsigned int *)((char *)v44 + v45);
          if (v46)
          {
            uint64_t v18 = 0;
            uint64_t v48 = 255;
            uint64_t v49 = v47 + 8 * v46;
            while (1)
            {
              long long v52 = sub_290DEC(v5, *(_DWORD *)v47, 1);
              uint64_t v53 = &v52[-*(int *)v52];
              if (*(unsigned __int16 *)v53 < 5u)
              {
                uint64_t v54 = 0;
              }
              else
              {
                uint64_t v54 = *((unsigned __int16 *)v53 + 2);
                if (v54) {
                  v54 += (uint64_t)&v52[*(unsigned int *)&v52[v54]];
                }
              }
              uint64_t v55 = v54 + 4 * *(unsigned __int16 *)(v47 + 4);
              uint64_t v56 = v55 + 4 + *(unsigned int *)(v55 + 4);
              unint64_t v57 = (unsigned __int16 *)(v56 - *(int *)v56);
              unsigned int v58 = *v57;
              if (v58 < 9)
              {
                uint64_t v59 = 0;
              }
              else
              {
                uint64_t v59 = v57[4];
                if (v57[4]) {
                  uint64_t v59 = *(unsigned int *)(v56 + v59);
                }
              }
              int v60 = (v4 & 0x40000000) == 0;
              int v61 = *(unsigned char *)(v47 + 6) != 0;
              if (v60 == v61)
              {
                if (v58 < 0xB)
                {
LABEL_51:
                  unint64_t v51 = v48;
                  goto LABEL_52;
                }
                uint64_t v62 = v57[5];
                if (!v57[5]) {
                  goto LABEL_71;
                }
                if ((*(_DWORD *)(v56 + v62) & 0x20) == 0)
                {
                  uint64_t v62 = 0;
LABEL_71:
                  if (v58 < 0x2F) {
                    goto LABEL_81;
                  }
                  goto LABEL_74;
                }
              }
              else
              {
                if (v58 < 0xB) {
                  goto LABEL_51;
                }
                uint64_t v62 = v57[5];
                if (!v57[5]) {
                  goto LABEL_71;
                }
                if ((*(_DWORD *)(v56 + v62) & 0x10) == 0)
                {
                  uint64_t v62 = 0;
                  if (v58 < 0x2F) {
                    goto LABEL_81;
                  }
                  goto LABEL_74;
                }
              }
              uint64_t v62 = 256;
              if (v58 < 0x2F) {
                goto LABEL_81;
              }
LABEL_74:
              if (!v57[23]
                || ((unsigned int v63 = *(unsigned __int8 *)(v56 + v57[23]),
                     BOOL v31 = v63 > 0x2D,
                     uint64_t v64 = (1 << v63) & 0x208040000000,
                     !v31)
                  ? (BOOL v65 = v64 == 0)
                  : (BOOL v65 = 1),
                    v65))
              {
LABEL_81:
                uint64_t v66 = 0;
                uint64_t v67 = v57[5];
                if (!v57[5]) {
                  goto LABEL_83;
                }
LABEL_82:
                uint64_t v67 = (*(_DWORD *)(v56 + v67) << 21) & 0x1000000;
                goto LABEL_83;
              }
              uint64_t v66 = 0x10000;
              uint64_t v67 = v57[5];
              if (v57[5]) {
                goto LABEL_82;
              }
LABEL_83:
              unint64_t v51 = v62 | v66 | v67 | v48;
              if (v60 != v61)
              {
                if (v58 >= 0x27)
                {
                  unsigned int v68 = v57[19];
                  if (v68) {
                    goto LABEL_89;
                  }
                }
              }
              else if (v58 >= 0x29)
              {
                unsigned int v68 = v57[20];
                if (v68)
                {
LABEL_89:
                  LODWORD(v56) = *(unsigned __int8 *)(v56 + v68 + *(unsigned int *)(v56 + v68));
                  if (v56)
                  {
                    if (v56 >= v48) {
                      uint64_t v56 = v48;
                    }
                    else {
                      uint64_t v56 = v56;
                    }
                    unint64_t v51 = v51 & 0xFFFFFFFFFFFFFF00 | v56;
                  }
                }
              }
LABEL_52:
              v18 += v59;
              v47 += 8;
              uint64_t v48 = v51;
              if (v47 == v49) {
                goto LABEL_95;
              }
            }
          }
          uint64_t v18 = 0;
          LODWORD(v51) = 255;
LABEL_95:
          if ((_BYTE)v51 == 0xFF) {
            int v28 = v51 & 0xFFFFFF00 | 1;
          }
          else {
            int v28 = v51;
          }
          goto LABEL_42;
        }
        return 0;
      }
      uint64_t v14 = (int *)((char *)v10 + v11[5] + *(unsigned int *)((char *)v10 + v11[5]));
      unsigned int v17 = *v14;
      uint64_t v15 = (unsigned __int8 *)(v14 + 1);
      uint64_t v16 = v17;
      if (!v17) {
        return 0;
      }
      while (v13 != *v15)
      {
        uint64_t v18 = 0;
        ++v15;
        if (!--v16) {
          return v18;
        }
      }
    }
    if (v12 < 5) {
      return 0;
    }
    goto LABEL_46;
  }
  uint64_t v19 = sub_290DEC(a1 + 16, a2, 1);
  uint64_t v20 = &v19[-*(int *)v19];
  if (*(unsigned __int16 *)v20 < 5u)
  {
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v21 = *((unsigned __int16 *)v20 + 2);
    if (v21) {
      v21 += (uint64_t)&v19[*(unsigned int *)&v19[v21]];
    }
  }
  unsigned int v22 = (int *)(v21 + (4 * v4) + 4 + *(unsigned int *)(v21 + (4 * v4) + 4));
  uint64_t v23 = *v22;
  uint64_t v24 = (unsigned __int16 *)((char *)v22 - v23);
  unsigned int v25 = *(unsigned __int16 *)((char *)v22 - v23);
  if (v25 >= 9 && v24[4])
  {
    uint64_t v18 = *(unsigned int *)((char *)v22 + v24[4]);
    if (v4 >> 30 != 3) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v18 = 0;
    if (v4 >> 30 != 3)
    {
LABEL_20:
      if (v25 >= 0xB)
      {
        uint64_t v26 = v24[5];
        if (v24[5])
        {
          LODWORD(v23) = *(int *)((char *)v22 + v26);
          if ((v23 & 0x20) != 0) {
            goto LABEL_23;
          }
          goto LABEL_29;
        }
        goto LABEL_32;
      }
      goto LABEL_31;
    }
  }
  if (v25 >= 0xB)
  {
    uint64_t v26 = v24[5];
    if (v24[5])
    {
      LODWORD(v23) = *(int *)((char *)v22 + v26);
      if ((v23 & 0x10) != 0)
      {
LABEL_23:
        char v27 = 0;
        LODWORD(v26) = 256;
        if (v25 >= 0x2F) {
          goto LABEL_33;
        }
        goto LABEL_39;
      }
LABEL_29:
      char v27 = 0;
      LODWORD(v26) = 0;
      if (v25 >= 0x2F) {
        goto LABEL_33;
      }
      goto LABEL_39;
    }
LABEL_32:
    char v27 = 1;
    if (v25 >= 0x2F)
    {
LABEL_33:
      uint64_t v29 = v24[23];
      if (v29)
      {
        unsigned int v30 = *((unsigned __int8 *)v22 + v29);
        BOOL v31 = v30 > 0x2D;
        uint64_t v32 = (1 << v30) & 0x208040000000;
        if (!v31 && v32 != 0) {
          LODWORD(v26) = v26 | 0x10000;
        }
      }
    }
LABEL_39:
    if (v27) {
      int v28 = v26;
    }
    else {
      int v28 = v26 | (v23 << 21) & 0x1000000;
    }
    goto LABEL_42;
  }
LABEL_31:
  int v28 = 0;
LABEL_42:
  unint64_t v34 = 0x2127599BF4325C37
      * (((a2 >> 61) & 2 | (a2 >> 63) | (a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) ^ (((a2 >> 30) & 0xFFFFFFFC | (a2 << 32)) >> 23));
  unint64_t v35 = (v34 ^ ~(v34 >> 47)) + ((v34 ^ (v34 >> 47)) << 21);
  unint64_t v36 = 21 * ((265 * (v35 ^ (v35 >> 24))) ^ ((265 * (v35 ^ (v35 >> 24))) >> 14));
  unint64_t v37 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v36 ^ (v36 >> 28)) >> 8) ^ ((-2147483647
                                                                                       * (v36 ^ (v36 >> 28))) >> 16)) ^ ((-2147483647 * (v36 ^ (v36 >> 28))) >> 24)) & 0xF)
                  + 3896);
  unint64_t v38 = sub_32AD60(v37, &v69, 2147483649u * (v36 ^ (v36 >> 28)));
  if (v39)
  {
    unint64_t v40 = v69;
    int v41 = (unint64_t *)(v37[1] + 24 * v38);
    v41[1] = 0;
    void v41[2] = 0;
    *int v41 = v40;
    *((unsigned char *)v41 + 16) = -1;
  }
  uint64_t v42 = v37[1] + 24 * v38;
  *(void *)(v42 + 8) = v18;
  *(_DWORD *)(v42 + 16) = v28;
  return v18;
}

uint64_t sub_32AC3C@<X0>(uint64_t result@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = (uint64_t *)(result + 48 * (((BYTE1(a3) ^ BYTE2(a3)) ^ BYTE3(a3)) & 0xF));
  unint64_t v6 = a3 >> 7;
  uint64_t v7 = v5[3];
  uint64_t v8 = *v5;
  uint64_t v9 = 0x101010101010101 * (a3 & 0x7F);
  uint64_t v10 = (*a2 >> 30) & 0xFFFFFFFCLL | (*a2 << 32) | (*a2 >> 63) | (*a2 >> 61) & 2;
  while (1)
  {
    uint64_t v11 = v6 & v7;
    uint64_t v12 = *(void *)(v8 + v11);
    unint64_t v13 = ((v12 ^ v9) - 0x101010101010101) & ~(v12 ^ v9) & 0x8080808080808080;
    if (v13) {
      break;
    }
LABEL_5:
    if ((v12 & (~v12 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_8;
    }
    v4 += 8;
    unint64_t v6 = v4 + v11;
  }
  while (1)
  {
    unint64_t v14 = (v11 + (__clz(__rbit64(v13)) >> 3)) & v7;
    uint64_t v15 = (unsigned int *)(v5[1] + 24 * v14);
    if (((4 * v15[1]) | ((unint64_t)*v15 << 32) | ((unint64_t)v15[1] >> 31) | ((unint64_t)v15[1] >> 29) & 2) == v10) {
      break;
    }
    v13 &= v13 - 1;
    if (!v13) {
      goto LABEL_5;
    }
  }
  if (v7 == v14)
  {
LABEL_8:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    a4[4] = 0;
    return result;
  }
  *a4 = v5;
  a4[1] = (uint64_t *)(result + 768);
  a4[2] = (uint64_t *)(v8 + v14);
  a4[3] = (uint64_t *)v15;
  a4[4] = (uint64_t *)(v8 + v7);
  return result;
}

unint64_t sub_32AD60(uint64_t *a1, void *a2, unint64_t a3)
{
  uint64_t v3 = 0;
  unint64_t v4 = a3 >> 7;
  uint64_t v5 = a1[3];
  uint64_t v6 = (*a2 >> 30) & 0xFFFFFFFCLL | (*a2 << 32) | (*a2 >> 63) | (*a2 >> 61) & 2;
  while (1)
  {
    unint64_t v7 = v4 & v5;
    uint64_t v8 = *(void *)(*a1 + (v4 & v5));
    unint64_t v9 = ((v8 ^ (0x101010101010101 * (a3 & 0x7F))) - 0x101010101010101) & ~(v8 ^ (0x101010101010101 * (a3 & 0x7F))) & 0x8080808080808080;
    if (v9) {
      break;
    }
LABEL_5:
    if ((v8 & (~v8 << 6) & 0x8080808080808080) != 0) {
      return sub_32AE58(a1, a3);
    }
    v3 += 8;
    unint64_t v4 = v3 + v7;
  }
  while (1)
  {
    unint64_t v11 = (v7 + (__clz(__rbit64(v9)) >> 3)) & v5;
    uint64_t v10 = a1[1];
    if (((4 * *(_DWORD *)(v10 + 24 * v11 + 4)) | ((unint64_t)*(unsigned int *)(v10 + 24 * v11) << 32) | ((unint64_t)*(unsigned int *)(v10 + 24 * v11 + 4) >> 31) | ((unint64_t)*(unsigned int *)(v10 + 24 * v11 + 4) >> 29) & 2) == v6) {
      return v11;
    }
    v9 &= v9 - 1;
    if (!v9) {
      goto LABEL_5;
    }
  }
}

unint64_t sub_32AE58(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_32AF50((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_32AF50(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    unsigned __int16 v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    unsigned __int16 v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_32AF80((char **)a1, v2);
    return;
  }
  sub_32B16C(a1);
}

void sub_32AF80(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = (char *)operator new(v7 + 24 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)&dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        uint64_t v15 = &v5[24 * (void)i];
        unint64_t v16 = (*(void *)v15 >> 30) & 0xFFFFFFFCLL | (*(void *)v15 << 32);
        unint64_t v17 = 0x2127599BF4325C37 * (((*(void *)v15 >> 61) & 2 | (*(void *)v15 >> 63) | v16) ^ (v16 >> 23));
        unint64_t v18 = (v17 ^ ~(v17 >> 47)) + ((v17 ^ (v17 >> 47)) << 21);
        unint64_t v19 = 21 * ((265 * (v18 ^ (v18 >> 24))) ^ ((265 * (v18 ^ (v18 >> 24))) >> 14));
        unint64_t v20 = 2147483649u * (v19 ^ (v19 >> 28));
        uint64_t v21 = a1[3];
        unsigned int v22 = *a1;
        unint64_t v23 = (unint64_t)v21 & (v20 >> 7);
        unint64_t v24 = *(void *)&(*a1)[v23] & (~*(void *)&(*a1)[v23] << 7) & 0x8080808080808080;
        if (!v24)
        {
          uint64_t v25 = 8;
          do
          {
            unint64_t v23 = (v23 + v25) & (unint64_t)v21;
            v25 += 8;
            unint64_t v24 = *(void *)&v22[v23] & (~*(void *)&v22[v23] << 7) & 0x8080808080808080;
          }
          while (!v24);
        }
        unint64_t v11 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v21;
        char v12 = v20 & 0x7F;
        v22[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        uint64_t v13 = (uint64_t)&a1[1][24 * v11];
        long long v14 = *(_OWORD *)v15;
        *(void *)(v13 + 16) = *((void *)v15 + 2);
        *(_OWORD *)uint64_t v13 = v14;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_32B16C(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_28;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      *unint64_t v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        unint64_t *v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      unint64_t v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        unint64_t v18 = *(void *)(*(void *)(result + 8) + 24 * i);
        unint64_t v19 = 0x2127599BF4325C37
            * (((v18 >> 61) & 2 | (v18 >> 63) | (v18 >> 30) & 0xFFFFFFFC | (v18 << 32)) ^ (((v18 >> 30) & 0xFFFFFFFC | (v18 << 32)) >> 23));
        unint64_t v20 = (v19 ^ ~(v19 >> 47)) + ((v19 ^ (v19 >> 47)) << 21);
        unint64_t v21 = 21 * ((265 * (v20 ^ (v20 >> 24))) ^ ((265 * (v20 ^ (v20 >> 24))) >> 14));
        unint64_t v22 = 2147483649u * (v21 ^ (v21 >> 28));
        unint64_t v23 = v13 & (v22 >> 7);
        unint64_t v24 = *(uint64_t *)((unsigned char *)v17->i64 + v23) & (~*(uint64_t *)((char *)v17->i64 + v23) << 7) & 0x8080808080808080;
        if (v24)
        {
          unint64_t v15 = v13 & (v22 >> 7);
        }
        else
        {
          uint64_t v25 = 8;
          unint64_t v15 = v13 & (v22 >> 7);
          do
          {
            unint64_t v15 = (v15 + v25) & v13;
            v25 += 8;
            unint64_t v24 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v24);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v24)) >> 3)) & v13;
        if ((((v16 - v23) ^ (i - v23)) & v13) > 7)
        {
          int v26 = v17->u8[v16];
          v17->i8[v16] = v22 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v22 & 0x7F;
          uint64_t v27 = *(void *)(result + 8);
          if (v26 == 128)
          {
            uint64_t v28 = v27 + 24 * v16;
            uint64_t v29 = (long long *)(v27 + 24 * i);
            long long v30 = *v29;
            *(void *)(v28 + 16) = *((void *)v29 + 2);
            *(_OWORD *)uint64_t v28 = v30;
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            BOOL v31 = (long long *)(v27 + 24 * i);
            long long v32 = *v31;
            uint64_t v33 = *((void *)v31 + 2);
            uint64_t v34 = 24 * v16;
            unint64_t v35 = (long long *)(v27 + 24 * v16);
            uint64_t v36 = *((void *)v35 + 2);
            *BOOL v31 = *v35;
            *((void *)v31 + 2) = v36;
            uint64_t v37 = *(void *)(result + 8) + v34;
            *(_OWORD *)uint64_t v37 = v32;
            *(void *)(v37 + 16) = v33;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v22 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v22 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v38 = i - (i >> 3);
    BOOL v39 = i == 7;
    uint64_t v40 = 6;
    if (!v39) {
      uint64_t v40 = v38;
    }
  }
  else
  {
    uint64_t v40 = 0;
  }
  *(void *)(result + 40) = v40 - *(void *)(result + 16);
  return result;
}

uint64_t *sub_32B48C(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *(char **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  unint64_t v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    int8x16_t v9 = *(char **)v4;
    uint64_t v10 = (uint64_t)&v6[-*(void *)v4];
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + 1;
    if (v12 >> 61) {
      sub_2E00();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_188D718();
      }
      unint64_t v15 = operator new(8 * v14);
    }
    else
    {
      unint64_t v15 = 0;
    }
    unint64_t v16 = &v15[8 * v11];
    void *v16 = *a2;
    int8x16_t v8 = v16 + 1;
    if (v6 != v9)
    {
      unint64_t v17 = v6 - v9 - 8;
      if (v17 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v6 - v15 - v10) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v18 = (v17 >> 3) + 1;
      uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v7 = &v6[-v19];
      unint64_t v16 = (void *)((char *)v16 - v19);
      unint64_t v20 = &v15[8 * v11 - 16];
      unint64_t v21 = v6 - 16;
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *unint64_t v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v24 = *((void *)v7 - 1);
          v7 -= 8;
          *--unint64_t v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(void *)uint64_t v4 = v16;
    *(void *)(v4 + 8) = v8;
    *(void *)(v4 + 16) = &v15[8 * v14];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)uint64_t v6 = *a2;
    int8x16_t v8 = v6 + 8;
  }
  *(void *)(v4 + 8) = v8;
  return a1;
}

_WORD *sub_32B600(uint64_t a1, _WORD *a2)
{
  unint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    int8x16_t v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    if (v9 <= -3) {
      sub_2E00();
    }
    uint64_t v10 = v9 >> 1;
    unint64_t v11 = v4 - (void)v8;
    if (v11 <= (v9 >> 1) + 1) {
      unint64_t v12 = v10 + 1;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 < 0) {
        sub_188D718();
      }
      unint64_t v14 = operator new(2 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    unint64_t v15 = &v14[2 * v10];
    *unint64_t v15 = *a2;
    unint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 2;
      if (v16 < 0x1E) {
        goto LABEL_28;
      }
      if (v5 - v14 - (v9 & 0xFFFFFFFFFFFFFFFELL) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v17 = (v16 >> 1) + 1;
      unint64_t v18 = 2 * (v17 & 0xFFFFFFFFFFFFFFF0);
      uint64_t v6 = &v5[-v18];
      unint64_t v15 = (_WORD *)((char *)v15 - v18);
      uint64_t v19 = &v14[2 * v10 - 16];
      unint64_t v20 = v5 - 16;
      unint64_t v21 = v17 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        _OWORD *v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 16;
      }
      while (v21);
      if (v17 != (v17 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_28:
        do
        {
          __int16 v23 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *--unint64_t v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[2 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_WORD *)unint64_t v5 = *a2;
    unint64_t v7 = v5 + 2;
  }
  *(void *)(a1 + 8) = v7;
  return v7 - 1;
}

char *sub_32B764(unint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 2;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(_DWORD *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 4);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 4);
    uint64_t v12 = v11 >> 2;
    uint64_t v13 = (int *)(v5 - 4);
    if (v5 < 4)
    {
      uint64_t v19 = (_DWORD *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 4;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x2C)
      {
        uint64_t v19 = (_DWORD *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (_DWORD *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 2) + 1;
          uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v13 = (int *)((char *)v13 + v21);
          uint64_t v19 = (_DWORD *)(v5 + v21);
          long long v22 = (_OWORD *)(v5 + 16);
          __int16 v23 = (long long *)(4 * v12 + 4 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *long long v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 8;
          }
          while (v24);
          if (v20 == (v20 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        int v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 4) {
      memmove((void *)(v5 - 4 * v12), v9, v11);
    }
    *(_DWORD *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 2) + 1;
  if (v26 >> 62) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 1 > v26) {
    unint64_t v26 = v28 >> 1;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 62) {
      sub_188D718();
    }
    long long v30 = (char *)operator new(4 * v29);
    BOOL v31 = &v30[4 * v8];
    long long v32 = &v30[4 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    long long v30 = 0;
    BOOL v31 = (char *)(4 * v8);
    long long v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((_DWORD *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 1;
    }
    if (v53 >> 62) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(4 * v53);
    BOOL v31 = &v54[v53 & 0xFFFFFFFFFFFFFFFCLL];
    long long v32 = &v54[4 * v53];
    if (v30)
    {
      uint64_t v55 = &v54[4 * v53];
      operator delete(v30);
      long long v32 = v55;
      uint64_t v34 = (char *)*a1;
      *(_DWORD *)BOOL v31 = *a3;
      unint64_t v35 = v31 + 4;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 4 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(_DWORD *)BOOL v31 = *a3;
  unint64_t v35 = v31 + 4;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6);
    unint64_t v38 = v37 - v34 - 4;
    BOOL v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x2C) {
      goto LABEL_59;
    }
    BOOL v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 2) + 1;
    uint64_t v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
    BOOL v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    uint64_t v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 4 * v8 - 16);
    uint64_t v44 = v40 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)uint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 8;
    }
    while (v44);
    if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_59:
      do
      {
        int v46 = *((_DWORD *)v39 - 1);
        v39 -= 4;
        *((_DWORD *)v36 - 1) = v46;
        v36 -= 4;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    unint64_t v51 = v32;
    memmove(v35, v49, v50);
    long long v32 = v51;
  }
  long long v52 = (_DWORD *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_32BABC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_32BAD4(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7 = a3;
LABEL_2:
  unint64_t v10 = (unsigned int *)a2 - 18;
  unint64_t v284 = (unsigned int *)(a2 - 9);
  int64_t v11 = (long long *)((char *)a2 - 216);
  unint64_t v12 = a1;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (uint64_t)a2 - v12;
    unint64_t v16 = 0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)a2 - v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return *(double *)&v220;
        case 2uLL:
          if (!sub_357694((unsigned int *)a2 - 18, v12)) {
            return *(double *)&v220;
          }
          goto LABEL_71;
        case 3uLL:
          unint64_t v221 = (long long *)(v12 + 72);
          BOOL v222 = sub_357694((unsigned int *)(v12 + 72), v12);
          BOOL v223 = sub_357694(v10, v12 + 72);
          if (v222)
          {
            if (v223)
            {
LABEL_71:
              long long v286 = *(_OWORD *)v12;
              long long v224 = *(_OWORD *)(v12 + 16);
              long long v225 = *(_OWORD *)(v12 + 32);
              long long v226 = *(_OWORD *)(v12 + 48);
              uint64_t v290 = *(void *)(v12 + 64);
              long long v288 = v225;
              long long v289 = v226;
              long long v287 = v224;
              long long v227 = *((_OWORD *)v10 + 2);
              long long v220 = *((_OWORD *)v10 + 3);
              long long v228 = *((_OWORD *)v10 + 1);
              *(unsigned char *)(v12 + 64) = *((unsigned char *)v10 + 64);
              *(_OWORD *)(v12 + 32) = v227;
              *(_OWORD *)(v12 + 48) = v220;
              *(_OWORD *)(v12 + 16) = v228;
              *(_OWORD *)unint64_t v12 = *(_OWORD *)v10;
              *((_OWORD *)v10 + 1) = v287;
              *((_OWORD *)v10 + 2) = v288;
              *((_OWORD *)v10 + 3) = v289;
              *((unsigned char *)v10 + 64) = v290;
              *(void *)&long long v220 = v286;
              *(_OWORD *)unint64_t v10 = v286;
            }
            else
            {
              long long v286 = *(_OWORD *)v12;
              long long v269 = *(_OWORD *)(v12 + 16);
              long long v270 = *(_OWORD *)(v12 + 32);
              long long v271 = *(_OWORD *)(v12 + 48);
              uint64_t v290 = *(void *)(v12 + 64);
              long long v288 = v270;
              long long v289 = v271;
              long long v287 = v269;
              *(unsigned char *)(v12 + 64) = *(unsigned char *)(v12 + 136);
              long long v272 = *(_OWORD *)(v12 + 120);
              *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 104);
              *(_OWORD *)(v12 + 48) = v272;
              long long v273 = *(_OWORD *)(v12 + 88);
              *(_OWORD *)unint64_t v12 = *v221;
              *(_OWORD *)(v12 + 16) = v273;
              long long v274 = v286;
              long long v275 = v287;
              long long v276 = v288;
              long long v277 = v289;
              *(unsigned char *)(v12 + 136) = v290;
              *(_OWORD *)(v12 + 104) = v276;
              *(_OWORD *)(v12 + 120) = v277;
              long long *v221 = v274;
              *(_OWORD *)(v12 + 88) = v275;
              if (sub_357694(v10, v12 + 72))
              {
                long long v278 = *(_OWORD *)(v12 + 120);
                long long v288 = *(_OWORD *)(v12 + 104);
                long long v289 = v278;
                uint64_t v290 = *(void *)(v12 + 136);
                long long v279 = *(_OWORD *)(v12 + 88);
                long long v286 = *v221;
                long long v287 = v279;
                long long *v221 = *(_OWORD *)v10;
                long long v280 = *((_OWORD *)v10 + 2);
                long long v220 = *((_OWORD *)v10 + 3);
                long long v281 = *((_OWORD *)v10 + 1);
                *(unsigned char *)(v12 + 136) = *((unsigned char *)v10 + 64);
                *(_OWORD *)(v12 + 104) = v280;
                *(_OWORD *)(v12 + 120) = v220;
                *(_OWORD *)(v12 + 88) = v281;
                *(_OWORD *)unint64_t v10 = v286;
                *((unsigned char *)v10 + 64) = v290;
                *((_OWORD *)v10 + 3) = v289;
                *((_OWORD *)v10 + 2) = v288;
                *(void *)&long long v220 = v287;
                *((_OWORD *)v10 + 1) = v287;
              }
            }
          }
          else if (v223)
          {
            long long v245 = *(_OWORD *)(v12 + 120);
            long long v288 = *(_OWORD *)(v12 + 104);
            long long v289 = v245;
            uint64_t v290 = *(void *)(v12 + 136);
            long long v246 = *(_OWORD *)(v12 + 88);
            long long v286 = *v221;
            long long v287 = v246;
            long long *v221 = *(_OWORD *)v10;
            long long v248 = *((_OWORD *)v10 + 2);
            long long v247 = *((_OWORD *)v10 + 3);
            long long v249 = *((_OWORD *)v10 + 1);
            *(unsigned char *)(v12 + 136) = *((unsigned char *)v10 + 64);
            *(_OWORD *)(v12 + 104) = v248;
            *(_OWORD *)(v12 + 120) = v247;
            *(_OWORD *)(v12 + 88) = v249;
            *(_OWORD *)unint64_t v10 = v286;
            *((unsigned char *)v10 + 64) = v290;
            *((_OWORD *)v10 + 3) = v289;
            *((_OWORD *)v10 + 2) = v288;
            *((_OWORD *)v10 + 1) = v287;
            if (sub_357694((unsigned int *)(v12 + 72), v12))
            {
              long long v286 = *(_OWORD *)v12;
              long long v250 = *(_OWORD *)(v12 + 16);
              long long v251 = *(_OWORD *)(v12 + 32);
              long long v252 = *(_OWORD *)(v12 + 48);
              uint64_t v290 = *(void *)(v12 + 64);
              long long v288 = v251;
              long long v289 = v252;
              long long v287 = v250;
              *(unsigned char *)(v12 + 64) = *(unsigned char *)(v12 + 136);
              long long v253 = *(_OWORD *)(v12 + 120);
              *(_OWORD *)(v12 + 32) = *(_OWORD *)(v12 + 104);
              *(_OWORD *)(v12 + 48) = v253;
              long long v254 = *(_OWORD *)(v12 + 88);
              *(_OWORD *)unint64_t v12 = *v221;
              *(_OWORD *)(v12 + 16) = v254;
              long long v220 = v286;
              long long v255 = v287;
              long long v256 = v288;
              long long v257 = v289;
              *(unsigned char *)(v12 + 136) = v290;
              *(_OWORD *)(v12 + 104) = v256;
              *(_OWORD *)(v12 + 120) = v257;
              long long *v221 = v220;
              *(_OWORD *)(v12 + 88) = v255;
            }
          }
          break;
        case 4uLL:
          *(void *)&long long v220 = sub_32D520(v12, v12 + 72, v12 + 144, (uint64_t)a2 - 72).n128_u64[0];
          return *(double *)&v220;
        case 5uLL:
          *(void *)&long long v220 = sub_32D84C(v12, v12 + 72, v12 + 144, v12 + 216, (uint64_t)a2 - 72).n128_u64[0];
          return *(double *)&v220;
        default:
          JUMPOUT(0);
      }
      return *(double *)&v220;
    }
    if (v15 <= 1727) {
      break;
    }
    if (v14 == 1)
    {
      if ((long long *)v12 != a2)
      {
        sub_32DA1C(v12, a2, a2, v7);
      }
      return *(double *)&v220;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = v12 + 72 * (v16 >> 1);
    if ((unint64_t)v15 >= 0x2401)
    {
      BOOL v19 = sub_357694((unsigned int *)(a1 + 72 * (v16 >> 1)), a1);
      BOOL v20 = sub_357694((unsigned int *)a2 - 18, v18);
      if (v19)
      {
        if (v20)
        {
          long long v286 = *(_OWORD *)a1;
          long long v21 = *(_OWORD *)(a1 + 16);
          long long v22 = *(_OWORD *)(a1 + 32);
          long long v23 = *(_OWORD *)(a1 + 48);
          uint64_t v290 = *(void *)(a1 + 64);
          long long v288 = v22;
          long long v289 = v23;
          long long v287 = v21;
          long long v25 = *(long long *)((char *)a2 - 40);
          long long v24 = *(long long *)((char *)a2 - 24);
          long long v26 = *(long long *)((char *)a2 - 56);
          *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 - 8);
          *(_OWORD *)(a1 + 32) = v25;
          *(_OWORD *)(a1 + 48) = v24;
          *(_OWORD *)(a1 + 16) = v26;
          *(_OWORD *)a1 = *(_OWORD *)v10;
          goto LABEL_25;
        }
        long long v286 = *(_OWORD *)a1;
        long long v65 = *(_OWORD *)(a1 + 16);
        long long v66 = *(_OWORD *)(a1 + 32);
        long long v67 = *(_OWORD *)(a1 + 48);
        uint64_t v290 = *(void *)(a1 + 64);
        long long v288 = v66;
        long long v289 = v67;
        long long v287 = v65;
        long long v69 = *(_OWORD *)(v18 + 32);
        long long v68 = *(_OWORD *)(v18 + 48);
        long long v70 = *(_OWORD *)(v18 + 16);
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(v18 + 64);
        *(_OWORD *)(a1 + 32) = v69;
        *(_OWORD *)(a1 + 48) = v68;
        *(_OWORD *)(a1 + 16) = v70;
        *(_OWORD *)a1 = *(_OWORD *)v18;
        long long v72 = v288;
        long long v71 = v289;
        long long v73 = v287;
        *(unsigned char *)(v18 + 64) = v290;
        *(_OWORD *)(v18 + 32) = v72;
        *(_OWORD *)(v18 + 48) = v71;
        *(_OWORD *)(v18 + 16) = v73;
        *(_OWORD *)uint64_t v18 = v286;
        if (sub_357694((unsigned int *)a2 - 18, v18))
        {
          long long v286 = *(_OWORD *)v18;
          long long v74 = *(_OWORD *)(v18 + 16);
          long long v75 = *(_OWORD *)(v18 + 32);
          long long v76 = *(_OWORD *)(v18 + 48);
          uint64_t v290 = *(void *)(v18 + 64);
          long long v288 = v75;
          long long v289 = v76;
          long long v287 = v74;
          long long v78 = *(long long *)((char *)a2 - 40);
          long long v77 = *(long long *)((char *)a2 - 24);
          long long v79 = *(long long *)((char *)a2 - 56);
          *(unsigned char *)(v18 + 64) = *((unsigned char *)a2 - 8);
          *(_OWORD *)(v18 + 32) = v78;
          *(_OWORD *)(v18 + 48) = v77;
          *(_OWORD *)(v18 + 16) = v79;
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v10;
LABEL_25:
          *(long long *)((char *)a2 - 56) = v287;
          *(long long *)((char *)a2 - 40) = v288;
          *(long long *)((char *)a2 - 24) = v289;
          *((unsigned char *)a2 - 8) = v290;
          *(_OWORD *)unint64_t v10 = v286;
        }
      }
      else if (v20)
      {
        long long v286 = *(_OWORD *)v18;
        long long v35 = *(_OWORD *)(v18 + 16);
        long long v36 = *(_OWORD *)(v18 + 32);
        long long v37 = *(_OWORD *)(v18 + 48);
        uint64_t v290 = *(void *)(v18 + 64);
        long long v288 = v36;
        long long v289 = v37;
        long long v287 = v35;
        long long v39 = *(long long *)((char *)a2 - 40);
        long long v38 = *(long long *)((char *)a2 - 24);
        long long v40 = *(long long *)((char *)a2 - 56);
        *(unsigned char *)(v18 + 64) = *((unsigned char *)a2 - 8);
        *(_OWORD *)(v18 + 32) = v39;
        *(_OWORD *)(v18 + 48) = v38;
        *(_OWORD *)(v18 + 16) = v40;
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v10;
        *(long long *)((char *)a2 - 56) = v287;
        *(long long *)((char *)a2 - 40) = v288;
        *(long long *)((char *)a2 - 24) = v289;
        *((unsigned char *)a2 - 8) = v290;
        *(_OWORD *)unint64_t v10 = v286;
        if (sub_357694((unsigned int *)v18, a1))
        {
          long long v286 = *(_OWORD *)a1;
          long long v41 = *(_OWORD *)(a1 + 16);
          long long v42 = *(_OWORD *)(a1 + 32);
          long long v43 = *(_OWORD *)(a1 + 48);
          uint64_t v290 = *(void *)(a1 + 64);
          long long v288 = v42;
          long long v289 = v43;
          long long v287 = v41;
          long long v45 = *(_OWORD *)(v18 + 32);
          long long v44 = *(_OWORD *)(v18 + 48);
          long long v46 = *(_OWORD *)(v18 + 16);
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(v18 + 64);
          *(_OWORD *)(a1 + 32) = v45;
          *(_OWORD *)(a1 + 48) = v44;
          *(_OWORD *)(a1 + 16) = v46;
          *(_OWORD *)a1 = *(_OWORD *)v18;
          long long v48 = v288;
          long long v47 = v289;
          long long v49 = v287;
          *(unsigned char *)(v18 + 64) = v290;
          *(_OWORD *)(v18 + 32) = v48;
          *(_OWORD *)(v18 + 48) = v47;
          *(_OWORD *)(v18 + 16) = v49;
          *(_OWORD *)uint64_t v18 = v286;
        }
      }
      unint64_t v80 = (long long *)(a1 + 72);
      uint64_t v81 = a1 + 72 * v17 - 72;
      BOOL v82 = sub_357694((unsigned int *)v81, a1 + 72);
      BOOL v83 = sub_357694(v284, v81);
      if (v82)
      {
        if (v83)
        {
          long long v84 = *(_OWORD *)(a1 + 120);
          long long v288 = *(_OWORD *)(a1 + 104);
          long long v289 = v84;
          uint64_t v290 = *(void *)(a1 + 136);
          long long v85 = *(_OWORD *)(a1 + 88);
          long long v286 = *v80;
          long long v287 = v85;
          *unint64_t v80 = *(_OWORD *)v284;
          long long v87 = *(a2 - 7);
          long long v86 = *(a2 - 6);
          long long v88 = *(a2 - 8);
          *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 - 80);
          *(_OWORD *)(a1 + 104) = v87;
          *(_OWORD *)(a1 + 120) = v86;
          *(_OWORD *)(a1 + 88) = v88;
          *(_OWORD *)unint64_t v284 = v286;
          *((unsigned char *)a2 - 80) = v290;
          *(a2 - 6) = v289;
          *(a2 - 7) = v288;
          *(a2 - 8) = v287;
        }
        else
        {
          long long v118 = *(_OWORD *)(a1 + 120);
          long long v288 = *(_OWORD *)(a1 + 104);
          long long v289 = v118;
          uint64_t v290 = *(void *)(a1 + 136);
          long long v119 = *(_OWORD *)(a1 + 88);
          long long v286 = *v80;
          long long v287 = v119;
          long long v121 = *(_OWORD *)(a1 + 72 * v17 - 40);
          long long v120 = *(_OWORD *)(a1 + 72 * v17 - 24);
          long long v122 = *(_OWORD *)(a1 + 72 * v17 - 56);
          *(unsigned char *)(a1 + 136) = *(unsigned char *)(a1 + 72 * v17 - 8);
          *(_OWORD *)(a1 + 104) = v121;
          *(_OWORD *)(a1 + 120) = v120;
          *(_OWORD *)(a1 + 88) = v122;
          *unint64_t v80 = *(_OWORD *)v81;
          *(_OWORD *)uint64_t v81 = v286;
          long long v123 = v287;
          long long v124 = v288;
          long long v125 = v289;
          *(unsigned char *)(a1 + 72 * v17 - 8) = v290;
          *(_OWORD *)(a1 + 72 * v17 - 40) = v124;
          *(_OWORD *)(a1 + 72 * v17 - 24) = v125;
          *(_OWORD *)(a1 + 72 * v17 - 56) = v123;
          if (sub_357694(v284, v81))
          {
            long long v286 = *(_OWORD *)v81;
            long long v126 = *(_OWORD *)(a1 + 72 * v17 - 56);
            long long v127 = *(_OWORD *)(a1 + 72 * v17 - 40);
            long long v128 = *(_OWORD *)(a1 + 72 * v17 - 24);
            uint64_t v290 = *(void *)(a1 + 72 * v17 - 8);
            long long v288 = v127;
            long long v289 = v128;
            long long v287 = v126;
            long long v130 = *(a2 - 7);
            long long v129 = *(a2 - 6);
            long long v131 = *(a2 - 8);
            *(unsigned char *)(a1 + 72 * v17 - 8) = *((unsigned char *)a2 - 80);
            *(_OWORD *)(a1 + 72 * v17 - 40) = v130;
            *(_OWORD *)(a1 + 72 * v17 - 24) = v129;
            *(_OWORD *)(a1 + 72 * v17 - 56) = v131;
            *(_OWORD *)uint64_t v81 = *(_OWORD *)v284;
            *(a2 - 8) = v287;
            *(a2 - 7) = v288;
            *(a2 - 6) = v289;
            *((unsigned char *)a2 - 80) = v290;
            *(_OWORD *)unint64_t v284 = v286;
          }
        }
      }
      else if (v83)
      {
        long long v286 = *(_OWORD *)v81;
        long long v89 = *(_OWORD *)(a1 + 72 * v17 - 56);
        long long v90 = *(_OWORD *)(a1 + 72 * v17 - 40);
        long long v91 = *(_OWORD *)(a1 + 72 * v17 - 24);
        uint64_t v290 = *(void *)(a1 + 72 * v17 - 8);
        long long v288 = v90;
        long long v289 = v91;
        long long v287 = v89;
        long long v93 = *(a2 - 7);
        long long v92 = *(a2 - 6);
        long long v94 = *(a2 - 8);
        *(unsigned char *)(a1 + 72 * v17 - 8) = *((unsigned char *)a2 - 80);
        *(_OWORD *)(a1 + 72 * v17 - 40) = v93;
        *(_OWORD *)(a1 + 72 * v17 - 24) = v92;
        *(_OWORD *)(a1 + 72 * v17 - 56) = v94;
        *(_OWORD *)uint64_t v81 = *(_OWORD *)v284;
        *(a2 - 8) = v287;
        *(a2 - 7) = v288;
        *(a2 - 6) = v289;
        *((unsigned char *)a2 - 80) = v290;
        *(_OWORD *)unint64_t v284 = v286;
        if (sub_357694((unsigned int *)v81, a1 + 72))
        {
          long long v95 = *(_OWORD *)(a1 + 120);
          long long v288 = *(_OWORD *)(a1 + 104);
          long long v289 = v95;
          uint64_t v290 = *(void *)(a1 + 136);
          long long v96 = *(_OWORD *)(a1 + 88);
          long long v286 = *v80;
          long long v287 = v96;
          long long v98 = *(_OWORD *)(a1 + 72 * v17 - 40);
          long long v97 = *(_OWORD *)(a1 + 72 * v17 - 24);
          long long v99 = *(_OWORD *)(a1 + 72 * v17 - 56);
          *(unsigned char *)(a1 + 136) = *(unsigned char *)(a1 + 72 * v17 - 8);
          *(_OWORD *)(a1 + 104) = v98;
          *(_OWORD *)(a1 + 120) = v97;
          *(_OWORD *)(a1 + 88) = v99;
          *unint64_t v80 = *(_OWORD *)v81;
          *(_OWORD *)uint64_t v81 = v286;
          long long v100 = v287;
          long long v101 = v288;
          long long v102 = v289;
          *(unsigned char *)(a1 + 72 * v17 - 8) = v290;
          *(_OWORD *)(a1 + 72 * v17 - 40) = v101;
          *(_OWORD *)(a1 + 72 * v17 - 24) = v102;
          *(_OWORD *)(a1 + 72 * v17 - 56) = v100;
        }
      }
      uint64_t v132 = (long long *)(a1 + 144);
      uint64_t v133 = a1 + 72 * v17 + 72;
      BOOL v134 = sub_357694((unsigned int *)v133, a1 + 144);
      BOOL v135 = sub_357694((unsigned int *)a2 - 54, v133);
      if (v134)
      {
        if (v135)
        {
          long long v136 = *(_OWORD *)(a1 + 192);
          long long v288 = *(_OWORD *)(a1 + 176);
          long long v289 = v136;
          uint64_t v290 = *(void *)(a1 + 208);
          long long v137 = *(_OWORD *)(a1 + 160);
          long long v286 = *v132;
          long long v287 = v137;
          long long *v132 = *v11;
          long long v139 = *(long long *)((char *)a2 - 184);
          long long v138 = *(long long *)((char *)a2 - 168);
          long long v140 = *(long long *)((char *)a2 - 200);
          *(unsigned char *)(a1 + 208) = *((unsigned char *)a2 - 152);
          *(_OWORD *)(a1 + 176) = v139;
          *(_OWORD *)(a1 + 192) = v138;
          *(_OWORD *)(a1 + 160) = v140;
          long long *v11 = v286;
          *((unsigned char *)a2 - 152) = v290;
          *(long long *)((char *)a2 - 168) = v289;
          *(long long *)((char *)a2 - 184) = v288;
          *(long long *)((char *)a2 - 200) = v287;
        }
        else
        {
          long long v155 = *(_OWORD *)(a1 + 192);
          long long v288 = *(_OWORD *)(a1 + 176);
          long long v289 = v155;
          uint64_t v290 = *(void *)(a1 + 208);
          long long v156 = *(_OWORD *)(a1 + 160);
          long long v286 = *v132;
          long long v287 = v156;
          long long v158 = *(_OWORD *)(v133 + 32);
          long long v157 = *(_OWORD *)(v133 + 48);
          long long v159 = *(_OWORD *)(v133 + 16);
          *(unsigned char *)(a1 + 208) = *(unsigned char *)(v133 + 64);
          *(_OWORD *)(a1 + 176) = v158;
          *(_OWORD *)(a1 + 192) = v157;
          *(_OWORD *)(a1 + 160) = v159;
          long long *v132 = *(_OWORD *)v133;
          *(_OWORD *)uint64_t v133 = v286;
          long long v160 = v287;
          long long v161 = v288;
          long long v162 = v289;
          *(unsigned char *)(v133 + 64) = v290;
          *(_OWORD *)(v133 + 32) = v161;
          *(_OWORD *)(v133 + 48) = v162;
          *(_OWORD *)(v133 + 16) = v160;
          if (sub_357694((unsigned int *)a2 - 54, v133))
          {
            long long v286 = *(_OWORD *)v133;
            long long v163 = *(_OWORD *)(v133 + 16);
            long long v164 = *(_OWORD *)(v133 + 32);
            long long v165 = *(_OWORD *)(v133 + 48);
            uint64_t v290 = *(void *)(v133 + 64);
            long long v288 = v164;
            long long v289 = v165;
            long long v287 = v163;
            long long v167 = *(long long *)((char *)a2 - 184);
            long long v166 = *(long long *)((char *)a2 - 168);
            long long v168 = *(long long *)((char *)a2 - 200);
            *(unsigned char *)(v133 + 64) = *((unsigned char *)a2 - 152);
            *(_OWORD *)(v133 + 32) = v167;
            *(_OWORD *)(v133 + 48) = v166;
            *(_OWORD *)(v133 + 16) = v168;
            *(_OWORD *)uint64_t v133 = *v11;
            *(long long *)((char *)a2 - 200) = v287;
            *(long long *)((char *)a2 - 184) = v288;
            *(long long *)((char *)a2 - 168) = v289;
            *((unsigned char *)a2 - 152) = v290;
            long long *v11 = v286;
          }
        }
      }
      else if (v135)
      {
        long long v286 = *(_OWORD *)v133;
        long long v141 = *(_OWORD *)(v133 + 16);
        long long v142 = *(_OWORD *)(v133 + 32);
        long long v143 = *(_OWORD *)(v133 + 48);
        uint64_t v290 = *(void *)(v133 + 64);
        long long v288 = v142;
        long long v289 = v143;
        long long v287 = v141;
        long long v145 = *(long long *)((char *)a2 - 184);
        long long v144 = *(long long *)((char *)a2 - 168);
        long long v146 = *(long long *)((char *)a2 - 200);
        *(unsigned char *)(v133 + 64) = *((unsigned char *)a2 - 152);
        *(_OWORD *)(v133 + 32) = v145;
        *(_OWORD *)(v133 + 48) = v144;
        *(_OWORD *)(v133 + 16) = v146;
        *(_OWORD *)uint64_t v133 = *v11;
        *(long long *)((char *)a2 - 200) = v287;
        *(long long *)((char *)a2 - 184) = v288;
        *(long long *)((char *)a2 - 168) = v289;
        *((unsigned char *)a2 - 152) = v290;
        long long *v11 = v286;
        if (sub_357694((unsigned int *)v133, a1 + 144))
        {
          long long v147 = *(_OWORD *)(a1 + 192);
          long long v288 = *(_OWORD *)(a1 + 176);
          long long v289 = v147;
          uint64_t v290 = *(void *)(a1 + 208);
          long long v148 = *(_OWORD *)(a1 + 160);
          long long v286 = *v132;
          long long v287 = v148;
          long long v150 = *(_OWORD *)(v133 + 32);
          long long v149 = *(_OWORD *)(v133 + 48);
          long long v151 = *(_OWORD *)(v133 + 16);
          *(unsigned char *)(a1 + 208) = *(unsigned char *)(v133 + 64);
          *(_OWORD *)(a1 + 176) = v150;
          *(_OWORD *)(a1 + 192) = v149;
          *(_OWORD *)(a1 + 160) = v151;
          long long *v132 = *(_OWORD *)v133;
          *(_OWORD *)uint64_t v133 = v286;
          long long v152 = v287;
          long long v153 = v288;
          long long v154 = v289;
          *(unsigned char *)(v133 + 64) = v290;
          *(_OWORD *)(v133 + 32) = v153;
          *(_OWORD *)(v133 + 48) = v154;
          *(_OWORD *)(v133 + 16) = v152;
        }
      }
      BOOL v169 = sub_357694((unsigned int *)v18, v81);
      BOOL v170 = sub_357694((unsigned int *)v133, v18);
      if (v169)
      {
        if (v170)
        {
          long long v286 = *(_OWORD *)v81;
          long long v171 = *(_OWORD *)(v81 + 16);
          long long v172 = *(_OWORD *)(v81 + 32);
          long long v173 = *(_OWORD *)(v81 + 48);
          uint64_t v290 = *(void *)(v81 + 64);
          long long v288 = v172;
          long long v289 = v173;
          long long v287 = v171;
          *(unsigned char *)(v81 + 64) = *(unsigned char *)(v133 + 64);
          long long v174 = *(_OWORD *)(v133 + 48);
          *(_OWORD *)(v81 + 32) = *(_OWORD *)(v133 + 32);
          *(_OWORD *)(v81 + 48) = v174;
          long long v175 = *(_OWORD *)(v133 + 16);
          *(_OWORD *)uint64_t v81 = *(_OWORD *)v133;
          *(_OWORD *)(v81 + 16) = v175;
          goto LABEL_55;
        }
        long long v286 = *(_OWORD *)v81;
        long long v192 = *(_OWORD *)(v81 + 16);
        long long v193 = *(_OWORD *)(v81 + 32);
        long long v194 = *(_OWORD *)(v81 + 48);
        uint64_t v290 = *(void *)(v81 + 64);
        long long v288 = v193;
        long long v289 = v194;
        long long v287 = v192;
        *(unsigned char *)(v81 + 64) = *(unsigned char *)(v18 + 64);
        long long v195 = *(_OWORD *)(v18 + 48);
        *(_OWORD *)(v81 + 32) = *(_OWORD *)(v18 + 32);
        *(_OWORD *)(v81 + 48) = v195;
        long long v196 = *(_OWORD *)(v18 + 16);
        *(_OWORD *)uint64_t v81 = *(_OWORD *)v18;
        *(_OWORD *)(v81 + 16) = v196;
        *(_OWORD *)uint64_t v18 = v286;
        long long v198 = v288;
        long long v197 = v289;
        long long v199 = v287;
        *(unsigned char *)(v18 + 64) = v290;
        *(_OWORD *)(v18 + 32) = v198;
        *(_OWORD *)(v18 + 48) = v197;
        *(_OWORD *)(v18 + 16) = v199;
        if (sub_357694((unsigned int *)v133, v18))
        {
          long long v286 = *(_OWORD *)v18;
          long long v200 = *(_OWORD *)(v18 + 16);
          long long v201 = *(_OWORD *)(v18 + 32);
          long long v202 = *(_OWORD *)(v18 + 48);
          uint64_t v290 = *(void *)(v18 + 64);
          long long v288 = v201;
          long long v289 = v202;
          long long v287 = v200;
          *(unsigned char *)(v18 + 64) = *(unsigned char *)(v133 + 64);
          long long v203 = *(_OWORD *)(v133 + 48);
          *(_OWORD *)(v18 + 32) = *(_OWORD *)(v133 + 32);
          *(_OWORD *)(v18 + 48) = v203;
          long long v204 = *(_OWORD *)(v133 + 16);
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v133;
          *(_OWORD *)(v18 + 16) = v204;
LABEL_55:
          *(_OWORD *)uint64_t v133 = v286;
          long long v206 = v288;
          long long v205 = v289;
          long long v207 = v287;
          *(unsigned char *)(v133 + 64) = v290;
          *(_OWORD *)(v133 + 32) = v206;
          *(_OWORD *)(v133 + 48) = v205;
          *(_OWORD *)(v133 + 16) = v207;
        }
      }
      else if (v170)
      {
        long long v286 = *(_OWORD *)v18;
        long long v176 = *(_OWORD *)(v18 + 16);
        long long v177 = *(_OWORD *)(v18 + 32);
        long long v178 = *(_OWORD *)(v18 + 48);
        uint64_t v290 = *(void *)(v18 + 64);
        long long v288 = v177;
        long long v289 = v178;
        long long v287 = v176;
        *(unsigned char *)(v18 + 64) = *(unsigned char *)(v133 + 64);
        long long v179 = *(_OWORD *)(v133 + 48);
        *(_OWORD *)(v18 + 32) = *(_OWORD *)(v133 + 32);
        *(_OWORD *)(v18 + 48) = v179;
        long long v180 = *(_OWORD *)(v133 + 16);
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v133;
        *(_OWORD *)(v18 + 16) = v180;
        *(_OWORD *)uint64_t v133 = v286;
        long long v182 = v288;
        long long v181 = v289;
        long long v183 = v287;
        *(unsigned char *)(v133 + 64) = v290;
        *(_OWORD *)(v133 + 32) = v182;
        *(_OWORD *)(v133 + 48) = v181;
        *(_OWORD *)(v133 + 16) = v183;
        if (sub_357694((unsigned int *)v18, v81))
        {
          long long v286 = *(_OWORD *)v81;
          long long v184 = *(_OWORD *)(v81 + 16);
          long long v185 = *(_OWORD *)(v81 + 32);
          long long v186 = *(_OWORD *)(v81 + 48);
          uint64_t v290 = *(void *)(v81 + 64);
          long long v288 = v185;
          long long v289 = v186;
          long long v287 = v184;
          *(unsigned char *)(v81 + 64) = *(unsigned char *)(v18 + 64);
          long long v187 = *(_OWORD *)(v18 + 48);
          *(_OWORD *)(v81 + 32) = *(_OWORD *)(v18 + 32);
          *(_OWORD *)(v81 + 48) = v187;
          long long v188 = *(_OWORD *)(v18 + 16);
          *(_OWORD *)uint64_t v81 = *(_OWORD *)v18;
          *(_OWORD *)(v81 + 16) = v188;
          *(_OWORD *)uint64_t v18 = v286;
          long long v190 = v288;
          long long v189 = v289;
          long long v191 = v287;
          *(unsigned char *)(v18 + 64) = v290;
          *(_OWORD *)(v18 + 32) = v190;
          *(_OWORD *)(v18 + 48) = v189;
          *(_OWORD *)(v18 + 16) = v191;
        }
      }
      long long v286 = *(_OWORD *)a1;
      long long v208 = *(_OWORD *)(a1 + 16);
      long long v209 = *(_OWORD *)(a1 + 32);
      long long v210 = *(_OWORD *)(a1 + 48);
      uint64_t v290 = *(void *)(a1 + 64);
      long long v288 = v209;
      long long v289 = v210;
      long long v287 = v208;
      long long v212 = *(_OWORD *)(v18 + 32);
      long long v211 = *(_OWORD *)(v18 + 48);
      long long v213 = *(_OWORD *)(v18 + 16);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(v18 + 64);
      *(_OWORD *)(a1 + 32) = v212;
      *(_OWORD *)(a1 + 48) = v211;
      *(_OWORD *)(a1 + 16) = v213;
      *(_OWORD *)a1 = *(_OWORD *)v18;
      long long v215 = v288;
      long long v214 = v289;
      long long v216 = v287;
      *(unsigned char *)(v18 + 64) = v290;
      *(_OWORD *)(v18 + 32) = v215;
      *(_OWORD *)(v18 + 48) = v214;
      *(_OWORD *)(v18 + 16) = v216;
      *(_OWORD *)uint64_t v18 = v286;
      uint64_t v7 = a3;
      if (a5) {
        goto LABEL_58;
      }
      goto LABEL_57;
    }
    BOOL v27 = sub_357694((unsigned int *)a1, a1 + 72 * (v16 >> 1));
    BOOL v28 = sub_357694((unsigned int *)a2 - 18, a1);
    if (v27)
    {
      if (v28)
      {
        long long v286 = *(_OWORD *)v18;
        long long v29 = *(_OWORD *)(v18 + 16);
        long long v30 = *(_OWORD *)(v18 + 32);
        long long v31 = *(_OWORD *)(v18 + 48);
        uint64_t v290 = *(void *)(v18 + 64);
        long long v288 = v30;
        long long v289 = v31;
        long long v287 = v29;
        long long v33 = *(long long *)((char *)a2 - 40);
        long long v32 = *(long long *)((char *)a2 - 24);
        long long v34 = *(long long *)((char *)a2 - 56);
        *(unsigned char *)(v18 + 64) = *((unsigned char *)a2 - 8);
        *(_OWORD *)(v18 + 32) = v33;
        *(_OWORD *)(v18 + 48) = v32;
        *(_OWORD *)(v18 + 16) = v34;
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v10;
        goto LABEL_34;
      }
      long long v286 = *(_OWORD *)v18;
      long long v103 = *(_OWORD *)(v18 + 16);
      long long v104 = *(_OWORD *)(v18 + 32);
      long long v105 = *(_OWORD *)(v18 + 48);
      uint64_t v290 = *(void *)(v18 + 64);
      long long v288 = v104;
      long long v289 = v105;
      long long v287 = v103;
      long long v107 = *(_OWORD *)(a1 + 32);
      long long v106 = *(_OWORD *)(a1 + 48);
      long long v108 = *(_OWORD *)(a1 + 16);
      *(unsigned char *)(v18 + 64) = *(unsigned char *)(a1 + 64);
      *(_OWORD *)(v18 + 32) = v107;
      *(_OWORD *)(v18 + 48) = v106;
      *(_OWORD *)(v18 + 16) = v108;
      *(_OWORD *)uint64_t v18 = *(_OWORD *)a1;
      long long v110 = v288;
      long long v109 = v289;
      long long v111 = v287;
      *(unsigned char *)(a1 + 64) = v290;
      *(_OWORD *)(a1 + 32) = v110;
      *(_OWORD *)(a1 + 48) = v109;
      *(_OWORD *)(a1 + 16) = v111;
      *(_OWORD *)a1 = v286;
      if (sub_357694((unsigned int *)a2 - 18, a1))
      {
        long long v286 = *(_OWORD *)a1;
        long long v112 = *(_OWORD *)(a1 + 16);
        long long v113 = *(_OWORD *)(a1 + 32);
        long long v114 = *(_OWORD *)(a1 + 48);
        uint64_t v290 = *(void *)(a1 + 64);
        long long v288 = v113;
        long long v289 = v114;
        long long v287 = v112;
        long long v116 = *(long long *)((char *)a2 - 40);
        long long v115 = *(long long *)((char *)a2 - 24);
        long long v117 = *(long long *)((char *)a2 - 56);
        *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 - 8);
        *(_OWORD *)(a1 + 32) = v116;
        *(_OWORD *)(a1 + 48) = v115;
        *(_OWORD *)(a1 + 16) = v117;
        *(_OWORD *)a1 = *(_OWORD *)v10;
LABEL_34:
        *(long long *)((char *)a2 - 56) = v287;
        *(long long *)((char *)a2 - 40) = v288;
        *(long long *)((char *)a2 - 24) = v289;
        *((unsigned char *)a2 - 8) = v290;
        *(_OWORD *)unint64_t v10 = v286;
      }
LABEL_35:
      if (a5) {
        goto LABEL_58;
      }
      goto LABEL_57;
    }
    if (!v28) {
      goto LABEL_35;
    }
    long long v286 = *(_OWORD *)a1;
    long long v50 = *(_OWORD *)(a1 + 16);
    long long v51 = *(_OWORD *)(a1 + 32);
    long long v52 = *(_OWORD *)(a1 + 48);
    uint64_t v290 = *(void *)(a1 + 64);
    long long v288 = v51;
    long long v289 = v52;
    long long v287 = v50;
    long long v54 = *(long long *)((char *)a2 - 40);
    long long v53 = *(long long *)((char *)a2 - 24);
    long long v55 = *(long long *)((char *)a2 - 56);
    *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 - 8);
    *(_OWORD *)(a1 + 32) = v54;
    *(_OWORD *)(a1 + 48) = v53;
    *(_OWORD *)(a1 + 16) = v55;
    *(_OWORD *)a1 = *(_OWORD *)v10;
    *(long long *)((char *)a2 - 56) = v287;
    *(long long *)((char *)a2 - 40) = v288;
    *(long long *)((char *)a2 - 24) = v289;
    *((unsigned char *)a2 - 8) = v290;
    *(_OWORD *)unint64_t v10 = v286;
    if (!sub_357694((unsigned int *)a1, v18)) {
      goto LABEL_35;
    }
    long long v286 = *(_OWORD *)v18;
    long long v56 = *(_OWORD *)(v18 + 16);
    long long v57 = *(_OWORD *)(v18 + 32);
    long long v58 = *(_OWORD *)(v18 + 48);
    uint64_t v290 = *(void *)(v18 + 64);
    long long v288 = v57;
    long long v289 = v58;
    long long v287 = v56;
    long long v60 = *(_OWORD *)(a1 + 32);
    long long v59 = *(_OWORD *)(a1 + 48);
    long long v61 = *(_OWORD *)(a1 + 16);
    *(unsigned char *)(v18 + 64) = *(unsigned char *)(a1 + 64);
    *(_OWORD *)(v18 + 32) = v60;
    *(_OWORD *)(v18 + 48) = v59;
    *(_OWORD *)(v18 + 16) = v61;
    *(_OWORD *)uint64_t v18 = *(_OWORD *)a1;
    long long v63 = v288;
    long long v62 = v289;
    long long v64 = v287;
    *(unsigned char *)(a1 + 64) = v290;
    *(_OWORD *)(a1 + 32) = v63;
    *(_OWORD *)(a1 + 48) = v62;
    *(_OWORD *)(a1 + 16) = v64;
    *(_OWORD *)a1 = v286;
    if (a5) {
      goto LABEL_58;
    }
LABEL_57:
    if (!sub_357694((unsigned int *)(a1 - 72), a1))
    {
      unint64_t v12 = sub_32CC44(a1, (unint64_t)a2);
      goto LABEL_63;
    }
LABEL_58:
    uint64_t v217 = sub_32CDE0((long long *)a1, (unsigned int *)a2);
    if ((v218 & 1) == 0) {
      goto LABEL_61;
    }
    BOOL v219 = sub_32CF80(a1, v217);
    unint64_t v12 = v217 + 72;
    if (sub_32CF80(v217 + 72, (uint64_t)a2))
    {
      a4 = -v14;
      a2 = (long long *)v217;
      if (v219) {
        return *(double *)&v220;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v219)
    {
LABEL_61:
      sub_32BAD4(a1, v217, v7, -v14, a5 & 1);
      unint64_t v12 = v217 + 72;
LABEL_63:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  unint64_t v229 = (unsigned int *)(v12 + 72);
  BOOL v231 = (long long *)v12 == a2 || v229 == (unsigned int *)a2;
  if (a5)
  {
    if (!v231)
    {
      uint64_t v232 = 0;
      uint64_t v233 = v12;
      do
      {
        uint64_t v237 = v233;
        uint64_t v233 = (uint64_t)v229;
        if (sub_357694(v229, v237))
        {
          long long v286 = *(_OWORD *)v233;
          long long v238 = *(_OWORD *)(v233 + 16);
          long long v239 = *(_OWORD *)(v233 + 32);
          long long v240 = *(_OWORD *)(v233 + 48);
          uint64_t v290 = *(void *)(v233 + 64);
          long long v288 = v239;
          long long v289 = v240;
          long long v287 = v238;
          uint64_t v241 = v232;
          do
          {
            uint64_t v242 = v12 + v241;
            long long v243 = *(_OWORD *)(v12 + v241);
            *(_OWORD *)(v242 + 88) = *(_OWORD *)(v12 + v241 + 16);
            long long v244 = *(_OWORD *)(v12 + v241 + 48);
            *(_OWORD *)(v242 + 104) = *(_OWORD *)(v12 + v241 + 32);
            *(_OWORD *)(v242 + 120) = v244;
            *(unsigned char *)(v242 + 136) = *(unsigned char *)(v12 + v241 + 64);
            *(_OWORD *)(v242 + 72) = v243;
            if (!v241)
            {
              uint64_t v234 = v12;
              goto LABEL_88;
            }
            v241 -= 72;
          }
          while (sub_357694((unsigned int *)&v286, v241 + v12));
          uint64_t v234 = v12 + v241 + 72;
LABEL_88:
          *(_OWORD *)uint64_t v234 = v286;
          long long v220 = v287;
          long long v235 = v288;
          long long v236 = v289;
          *(unsigned char *)(v234 + 64) = v290;
          *(_OWORD *)(v234 + 32) = v235;
          *(_OWORD *)(v234 + 48) = v236;
          *(_OWORD *)(v234 + 16) = v220;
        }
        unint64_t v229 = (unsigned int *)(v233 + 72);
        v232 += 72;
      }
      while ((long long *)(v233 + 72) != a2);
    }
  }
  else if (!v231)
  {
    uint64_t v258 = v12 - 72;
    do
    {
      uint64_t v259 = a1;
      a1 = (unint64_t)v229;
      if (sub_357694(v229, v259))
      {
        long long v286 = *(_OWORD *)a1;
        long long v260 = *(_OWORD *)(a1 + 16);
        long long v261 = *(_OWORD *)(a1 + 32);
        long long v262 = *(_OWORD *)(a1 + 48);
        uint64_t v290 = *(void *)(a1 + 64);
        long long v288 = v261;
        long long v289 = v262;
        long long v287 = v260;
        uint64_t v263 = v258;
        do
        {
          long long v264 = *(_OWORD *)(v263 + 88);
          long long v265 = *(_OWORD *)(v263 + 120);
          *(_OWORD *)(v263 + 176) = *(_OWORD *)(v263 + 104);
          *(_OWORD *)(v263 + 192) = v265;
          *(unsigned char *)(v263 + 208) = *(unsigned char *)(v263 + 136);
          *(_OWORD *)(v263 + 144) = *(_OWORD *)(v263 + 72);
          *(_OWORD *)(v263 + 160) = v264;
          BOOL v266 = sub_357694((unsigned int *)&v286, v263);
          v263 -= 72;
        }
        while (v266);
        *(_OWORD *)(v263 + 144) = v286;
        long long v220 = v287;
        long long v267 = v288;
        long long v268 = v289;
        *(unsigned char *)(v263 + 208) = v290;
        *(_OWORD *)(v263 + 176) = v267;
        *(_OWORD *)(v263 + 192) = v268;
        *(_OWORD *)(v263 + 160) = v220;
      }
      unint64_t v229 = (unsigned int *)(a1 + 72);
      v258 += 72;
    }
    while ((long long *)(a1 + 72) != a2);
  }
  return *(double *)&v220;
}

unint64_t sub_32CC44(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v28 = *(_OWORD *)(a1 + 32);
  long long v29 = v4;
  uint64_t v30 = *(void *)(a1 + 64);
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v26 = *(_OWORD *)a1;
  long long v27 = v5;
  if (sub_357694((unsigned int *)&v26, a2 - 72))
  {
    unint64_t v6 = a1;
    do
      v6 += 72;
    while (!sub_357694((unsigned int *)&v26, v6));
  }
  else
  {
    unint64_t v7 = a1 + 72;
    do
    {
      unint64_t v6 = v7;
      if (v7 >= v2) {
        break;
      }
      BOOL v8 = sub_357694((unsigned int *)&v26, v7);
      unint64_t v7 = v6 + 72;
    }
    while (!v8);
  }
  if (v6 < v2)
  {
    do
      v2 -= 72;
    while (sub_357694((unsigned int *)&v26, v2));
  }
  while (v6 < v2)
  {
    long long v31 = *(_OWORD *)v6;
    long long v9 = *(_OWORD *)(v6 + 16);
    long long v10 = *(_OWORD *)(v6 + 32);
    long long v11 = *(_OWORD *)(v6 + 48);
    uint64_t v35 = *(void *)(v6 + 64);
    long long v33 = v10;
    long long v34 = v11;
    long long v32 = v9;
    long long v13 = *(_OWORD *)(v2 + 32);
    long long v12 = *(_OWORD *)(v2 + 48);
    long long v14 = *(_OWORD *)(v2 + 16);
    *(unsigned char *)(v6 + 64) = *(unsigned char *)(v2 + 64);
    *(_OWORD *)(v6 + 32) = v13;
    *(_OWORD *)(v6 + 48) = v12;
    *(_OWORD *)(v6 + 16) = v14;
    *(_OWORD *)unint64_t v6 = *(_OWORD *)v2;
    long long v16 = v33;
    long long v15 = v34;
    long long v17 = v32;
    *(unsigned char *)(v2 + 64) = v35;
    *(_OWORD *)(v2 + 32) = v16;
    *(_OWORD *)(v2 + 48) = v15;
    *(_OWORD *)(v2 + 16) = v17;
    *(_OWORD *)unint64_t v2 = v31;
    do
      v6 += 72;
    while (!sub_357694((unsigned int *)&v26, v6));
    do
      v2 -= 72;
    while (sub_357694((unsigned int *)&v26, v2));
  }
  uint64_t v18 = (_OWORD *)(v6 - 72);
  if (v6 - 72 != a1)
  {
    *(_OWORD *)a1 = *v18;
    long long v19 = *(_OWORD *)(v6 - 56);
    long long v20 = *(_OWORD *)(v6 - 40);
    long long v21 = *(_OWORD *)(v6 - 24);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(v6 - 8);
    *(_OWORD *)(a1 + 32) = v20;
    *(_OWORD *)(a1 + 48) = v21;
    *(_OWORD *)(a1 + 16) = v19;
  }
  _OWORD *v18 = v26;
  long long v22 = v27;
  long long v23 = v28;
  long long v24 = v29;
  *(unsigned char *)(v6 - 8) = v30;
  *(_OWORD *)(v6 - 40) = v23;
  *(_OWORD *)(v6 - 24) = v24;
  *(_OWORD *)(v6 - 56) = v22;
  return v6;
}

uint64_t sub_32CDE0(long long *a1, unsigned int *a2)
{
  uint64_t v4 = 0;
  long long v5 = a1[3];
  long long v28 = a1[2];
  long long v29 = v5;
  uint64_t v30 = *((void *)a1 + 8);
  long long v6 = a1[1];
  long long v26 = *a1;
  long long v27 = v6;
  do
    v4 += 72;
  while (sub_357694((unsigned int *)((char *)a1 + v4), (uint64_t)&v26));
  unint64_t v7 = (unint64_t)a1 + v4;
  uint64_t v8 = (uint64_t)a1 + v4 - 72;
  if (v4 == 72)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 18;
    }
    while (!sub_357694(a2, (uint64_t)&v26));
  }
  else
  {
    do
      a2 -= 18;
    while (!sub_357694(a2, (uint64_t)&v26));
  }
  if (v7 < (unint64_t)a2)
  {
    unint64_t v9 = (unint64_t)a1 + v4;
    long long v10 = a2;
    do
    {
      long long v11 = *(_OWORD *)(v9 + 48);
      long long v33 = *(_OWORD *)(v9 + 32);
      long long v34 = v11;
      uint64_t v35 = *(void *)(v9 + 64);
      long long v12 = *(_OWORD *)(v9 + 16);
      long long v31 = *(_OWORD *)v9;
      long long v32 = v12;
      long long v14 = *((_OWORD *)v10 + 2);
      long long v13 = *((_OWORD *)v10 + 3);
      long long v15 = *((_OWORD *)v10 + 1);
      *(unsigned char *)(v9 + 64) = *((unsigned char *)v10 + 64);
      *(_OWORD *)(v9 + 32) = v14;
      *(_OWORD *)(v9 + 48) = v13;
      *(_OWORD *)(v9 + 16) = v15;
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
      *(_OWORD *)long long v10 = v31;
      long long v16 = v32;
      long long v17 = v33;
      long long v18 = v34;
      *((unsigned char *)v10 + 64) = v35;
      *((_OWORD *)v10 + 2) = v17;
      *((_OWORD *)v10 + 3) = v18;
      *((_OWORD *)v10 + 1) = v16;
      do
        v9 += 72;
      while (sub_357694((unsigned int *)v9, (uint64_t)&v26));
      do
        v10 -= 18;
      while (!sub_357694(v10, (uint64_t)&v26));
    }
    while (v9 < (unint64_t)v10);
    uint64_t v8 = v9 - 72;
  }
  if ((long long *)v8 != a1)
  {
    *a1 = *(_OWORD *)v8;
    long long v19 = *(_OWORD *)(v8 + 16);
    long long v20 = *(_OWORD *)(v8 + 32);
    long long v21 = *(_OWORD *)(v8 + 48);
    *((unsigned char *)a1 + 64) = *(unsigned char *)(v8 + 64);
    a1[2] = v20;
    a1[3] = v21;
    a1[1] = v19;
  }
  *(_OWORD *)uint64_t v8 = v26;
  long long v22 = v27;
  long long v23 = v28;
  long long v24 = v29;
  *(unsigned char *)(v8 + 64) = v30;
  *(_OWORD *)(v8 + 32) = v23;
  *(_OWORD *)(v8 + 48) = v24;
  *(_OWORD *)(v8 + 16) = v22;
  return v8;
}

BOOL sub_32CF80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = a2 - 72;
      if (sub_357694((unsigned int *)(a2 - 72), a1)) {
        goto LABEL_6;
      }
      return 1;
    case 3uLL:
      unint64_t v7 = (_OWORD *)(a1 + 72);
      uint64_t v6 = a2 - 72;
      BOOL v8 = sub_357694((unsigned int *)(a1 + 72), a1);
      BOOL v9 = sub_357694((unsigned int *)v6, a1 + 72);
      if (v8)
      {
        if (v9)
        {
LABEL_6:
          long long v10 = *(_OWORD *)(a1 + 48);
          long long v99 = *(_OWORD *)(a1 + 32);
          long long v100 = v10;
          uint64_t v101 = *(void *)(a1 + 64);
          long long v11 = *(_OWORD *)(a1 + 16);
          long long v97 = *(_OWORD *)a1;
          long long v98 = v11;
          *(_OWORD *)a1 = *(_OWORD *)v6;
          long long v13 = *(_OWORD *)(v6 + 32);
          long long v12 = *(_OWORD *)(v6 + 48);
          long long v14 = *(_OWORD *)(v6 + 16);
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(v6 + 64);
          *(_OWORD *)(a1 + 32) = v13;
          *(_OWORD *)(a1 + 48) = v12;
          *(_OWORD *)(a1 + 16) = v14;
LABEL_7:
          *(unsigned char *)(v6 + 64) = v101;
          long long v15 = v100;
          *(_OWORD *)(v6 + 32) = v99;
          *(_OWORD *)(v6 + 48) = v15;
          long long v16 = v98;
          BOOL result = 1;
          *(_OWORD *)uint64_t v6 = v97;
          *(_OWORD *)(v6 + 16) = v16;
          return result;
        }
        long long v56 = *(_OWORD *)(a1 + 48);
        long long v99 = *(_OWORD *)(a1 + 32);
        long long v100 = v56;
        uint64_t v101 = *(void *)(a1 + 64);
        long long v57 = *(_OWORD *)(a1 + 16);
        long long v97 = *(_OWORD *)a1;
        long long v98 = v57;
        long long v58 = *(_OWORD *)(a1 + 120);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 104);
        *(_OWORD *)(a1 + 48) = v58;
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a1 + 136);
        long long v59 = *(_OWORD *)(a1 + 88);
        *(_OWORD *)a1 = *v7;
        *(_OWORD *)(a1 + 16) = v59;
        long long v60 = v97;
        long long v61 = v98;
        long long v62 = v99;
        long long v63 = v100;
        *(unsigned char *)(a1 + 136) = v101;
        *(_OWORD *)(a1 + 104) = v62;
        *(_OWORD *)(a1 + 120) = v63;
        *unint64_t v7 = v60;
        *(_OWORD *)(a1 + 88) = v61;
        if (sub_357694((unsigned int *)v6, a1 + 72))
        {
          long long v64 = *(_OWORD *)(a1 + 120);
          long long v99 = *(_OWORD *)(a1 + 104);
          long long v100 = v64;
          uint64_t v101 = *(void *)(a1 + 136);
          long long v65 = *(_OWORD *)(a1 + 88);
          long long v97 = *v7;
          long long v98 = v65;
          *unint64_t v7 = *(_OWORD *)v6;
          long long v67 = *(_OWORD *)(v6 + 32);
          long long v66 = *(_OWORD *)(v6 + 48);
          long long v68 = *(_OWORD *)(v6 + 16);
          *(unsigned char *)(a1 + 136) = *(unsigned char *)(v6 + 64);
          *(_OWORD *)(a1 + 104) = v67;
          *(_OWORD *)(a1 + 120) = v66;
          *(_OWORD *)(a1 + 88) = v68;
          goto LABEL_7;
        }
      }
      else if (v9)
      {
        long long v25 = *(_OWORD *)(a1 + 120);
        long long v99 = *(_OWORD *)(a1 + 104);
        long long v100 = v25;
        uint64_t v101 = *(void *)(a1 + 136);
        long long v26 = *(_OWORD *)(a1 + 88);
        long long v97 = *v7;
        long long v98 = v26;
        *unint64_t v7 = *(_OWORD *)v6;
        long long v28 = *(_OWORD *)(v6 + 32);
        long long v27 = *(_OWORD *)(v6 + 48);
        long long v29 = *(_OWORD *)(v6 + 16);
        *(unsigned char *)(a1 + 136) = *(unsigned char *)(v6 + 64);
        *(_OWORD *)(a1 + 104) = v28;
        *(_OWORD *)(a1 + 120) = v27;
        *(_OWORD *)(a1 + 88) = v29;
        *(unsigned char *)(v6 + 64) = v101;
        long long v30 = v100;
        *(_OWORD *)(v6 + 32) = v99;
        *(_OWORD *)(v6 + 48) = v30;
        long long v31 = v98;
        *(_OWORD *)uint64_t v6 = v97;
        *(_OWORD *)(v6 + 16) = v31;
        if (sub_357694((unsigned int *)(a1 + 72), a1))
        {
          long long v32 = *(_OWORD *)(a1 + 48);
          long long v99 = *(_OWORD *)(a1 + 32);
          long long v100 = v32;
          uint64_t v101 = *(void *)(a1 + 64);
          long long v33 = *(_OWORD *)(a1 + 16);
          long long v97 = *(_OWORD *)a1;
          long long v98 = v33;
          long long v34 = *(_OWORD *)(a1 + 120);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 104);
          *(_OWORD *)(a1 + 48) = v34;
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(a1 + 136);
          long long v35 = *(_OWORD *)(a1 + 88);
          *(_OWORD *)a1 = *v7;
          *(_OWORD *)(a1 + 16) = v35;
          long long v36 = v97;
          long long v37 = v98;
          long long v38 = v99;
          long long v39 = v100;
          *(unsigned char *)(a1 + 136) = v101;
          *(_OWORD *)(a1 + 104) = v38;
          *(_OWORD *)(a1 + 120) = v39;
          BOOL result = 1;
          *unint64_t v7 = v36;
          *(_OWORD *)(a1 + 88) = v37;
          return result;
        }
      }
      return 1;
    case 4uLL:
      sub_32D520(a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      sub_32D84C(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72);
      return 1;
    default:
      long long v17 = (_OWORD *)(a1 + 144);
      long long v18 = (_OWORD *)(a1 + 72);
      BOOL v19 = sub_357694((unsigned int *)(a1 + 72), a1);
      BOOL v20 = sub_357694((unsigned int *)(a1 + 144), a1 + 72);
      if (v19)
      {
        if (v20)
        {
          long long v21 = *(_OWORD *)(a1 + 48);
          long long v99 = *(_OWORD *)(a1 + 32);
          long long v100 = v21;
          uint64_t v101 = *(void *)(a1 + 64);
          long long v22 = *(_OWORD *)(a1 + 16);
          long long v97 = *(_OWORD *)a1;
          long long v98 = v22;
          long long v23 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 176);
          *(_OWORD *)(a1 + 48) = v23;
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(a1 + 208);
          long long v24 = *(_OWORD *)(a1 + 160);
          *(_OWORD *)a1 = *v17;
          *(_OWORD *)(a1 + 16) = v24;
        }
        else
        {
          long long v69 = *(_OWORD *)(a1 + 48);
          long long v99 = *(_OWORD *)(a1 + 32);
          long long v100 = v69;
          uint64_t v101 = *(void *)(a1 + 64);
          long long v70 = *(_OWORD *)(a1 + 16);
          long long v97 = *(_OWORD *)a1;
          long long v98 = v70;
          long long v71 = *(_OWORD *)(a1 + 120);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 104);
          *(_OWORD *)(a1 + 48) = v71;
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(a1 + 136);
          long long v72 = *(_OWORD *)(a1 + 88);
          *(_OWORD *)a1 = *v18;
          *(_OWORD *)(a1 + 16) = v72;
          long long v73 = v97;
          long long v74 = v98;
          long long v75 = v99;
          long long v76 = v100;
          *(unsigned char *)(a1 + 136) = v101;
          *(_OWORD *)(a1 + 104) = v75;
          *(_OWORD *)(a1 + 120) = v76;
          _OWORD *v18 = v73;
          *(_OWORD *)(a1 + 88) = v74;
          if (!sub_357694((unsigned int *)(a1 + 144), a1 + 72)) {
            goto LABEL_24;
          }
          long long v77 = *(_OWORD *)(a1 + 120);
          long long v99 = *(_OWORD *)(a1 + 104);
          long long v100 = v77;
          uint64_t v101 = *(void *)(a1 + 136);
          long long v78 = *(_OWORD *)(a1 + 88);
          long long v97 = *v18;
          long long v98 = v78;
          long long v79 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 176);
          *(_OWORD *)(a1 + 120) = v79;
          *(unsigned char *)(a1 + 136) = *(unsigned char *)(a1 + 208);
          long long v80 = *(_OWORD *)(a1 + 160);
          _OWORD *v18 = *v17;
          *(_OWORD *)(a1 + 88) = v80;
        }
        long long v81 = v97;
        long long v82 = v98;
        long long v83 = v99;
        long long v84 = v100;
        *(unsigned char *)(a1 + 208) = v101;
        *(_OWORD *)(a1 + 176) = v83;
        *(_OWORD *)(a1 + 192) = v84;
        _OWORD *v17 = v81;
        *(_OWORD *)(a1 + 160) = v82;
      }
      else if (v20)
      {
        long long v40 = *(_OWORD *)(a1 + 120);
        long long v99 = *(_OWORD *)(a1 + 104);
        long long v100 = v40;
        uint64_t v101 = *(void *)(a1 + 136);
        long long v41 = *(_OWORD *)(a1 + 88);
        long long v97 = *v18;
        long long v98 = v41;
        long long v42 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 176);
        *(_OWORD *)(a1 + 120) = v42;
        *(unsigned char *)(a1 + 136) = *(unsigned char *)(a1 + 208);
        long long v43 = *(_OWORD *)(a1 + 160);
        _OWORD *v18 = *v17;
        *(_OWORD *)(a1 + 88) = v43;
        long long v44 = v97;
        long long v45 = v98;
        long long v46 = v99;
        long long v47 = v100;
        *(unsigned char *)(a1 + 208) = v101;
        *(_OWORD *)(a1 + 176) = v46;
        *(_OWORD *)(a1 + 192) = v47;
        _OWORD *v17 = v44;
        *(_OWORD *)(a1 + 160) = v45;
        if (sub_357694((unsigned int *)(a1 + 72), a1))
        {
          long long v48 = *(_OWORD *)(a1 + 48);
          long long v99 = *(_OWORD *)(a1 + 32);
          long long v100 = v48;
          uint64_t v101 = *(void *)(a1 + 64);
          long long v49 = *(_OWORD *)(a1 + 16);
          long long v97 = *(_OWORD *)a1;
          long long v98 = v49;
          long long v50 = *(_OWORD *)(a1 + 120);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 104);
          *(_OWORD *)(a1 + 48) = v50;
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(a1 + 136);
          long long v51 = *(_OWORD *)(a1 + 88);
          *(_OWORD *)a1 = *v18;
          *(_OWORD *)(a1 + 16) = v51;
          long long v52 = v97;
          long long v53 = v98;
          long long v54 = v99;
          long long v55 = v100;
          *(unsigned char *)(a1 + 136) = v101;
          *(_OWORD *)(a1 + 104) = v54;
          *(_OWORD *)(a1 + 120) = v55;
          _OWORD *v18 = v52;
          *(_OWORD *)(a1 + 88) = v53;
        }
      }
LABEL_24:
      uint64_t v85 = a1 + 216;
      if (a1 + 216 == a2) {
        return 1;
      }
      uint64_t v86 = 0;
      int v87 = 0;
      while (1)
      {
        if (sub_357694((unsigned int *)v85, (uint64_t)v17))
        {
          long long v91 = *(_OWORD *)(v85 + 48);
          long long v99 = *(_OWORD *)(v85 + 32);
          long long v100 = v91;
          uint64_t v101 = *(void *)(v85 + 64);
          long long v92 = *(_OWORD *)(v85 + 16);
          long long v97 = *(_OWORD *)v85;
          long long v98 = v92;
          uint64_t v93 = v86;
          do
          {
            uint64_t v94 = a1 + v93;
            long long v95 = *(_OWORD *)(a1 + v93 + 144);
            *(_OWORD *)(v94 + 232) = *(_OWORD *)(a1 + v93 + 160);
            long long v96 = *(_OWORD *)(a1 + v93 + 192);
            *(_OWORD *)(v94 + 248) = *(_OWORD *)(a1 + v93 + 176);
            *(_OWORD *)(a1 + v93 + 264) = v96;
            *(unsigned char *)(v94 + 280) = *(unsigned char *)(a1 + v93 + 208);
            *(_OWORD *)(v94 + 216) = v95;
            if (v93 == -144)
            {
              uint64_t v88 = a1;
              goto LABEL_27;
            }
            v93 -= 72;
          }
          while (sub_357694((unsigned int *)&v97, v94 + 72));
          uint64_t v88 = a1 + v93 + 216;
LABEL_27:
          long long v89 = v100;
          *(_OWORD *)(v88 + 32) = v99;
          *(_OWORD *)(v88 + 48) = v89;
          *(unsigned char *)(v88 + 64) = v101;
          long long v90 = v98;
          *(_OWORD *)uint64_t v88 = v97;
          *(_OWORD *)(v88 + 16) = v90;
          if (++v87 == 8) {
            return v85 + 72 == a2;
          }
        }
        long long v17 = (_OWORD *)v85;
        v86 += 72;
        v85 += 72;
        if (v85 == a2) {
          return 1;
        }
      }
  }
}

__n128 sub_32D520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = sub_357694((unsigned int *)a2, a1);
  BOOL v9 = sub_357694((unsigned int *)a3, a2);
  if (v8)
  {
    if (v9)
    {
      long long v49 = *(_OWORD *)(a1 + 32);
      long long v56 = *(_OWORD *)(a1 + 48);
      uint64_t v63 = *(void *)(a1 + 64);
      __n128 v35 = *(__n128 *)a1;
      long long v42 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      long long v11 = *(_OWORD *)(a3 + 32);
      long long v10 = *(_OWORD *)(a3 + 48);
      long long v12 = *(_OWORD *)(a3 + 16);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a3 + 64);
      *(_OWORD *)(a1 + 32) = v11;
      *(_OWORD *)(a1 + 48) = v10;
      *(_OWORD *)(a1 + 16) = v12;
LABEL_9:
      *(unsigned char *)(a3 + 64) = v63;
      *(_OWORD *)(a3 + 32) = v49;
      *(_OWORD *)(a3 + 48) = v56;
      *(__n128 *)a3 = v35;
      *(_OWORD *)(a3 + 16) = v42;
      goto LABEL_10;
    }
    long long v52 = *(_OWORD *)(a1 + 32);
    long long v59 = *(_OWORD *)(a1 + 48);
    uint64_t v66 = *(void *)(a1 + 64);
    __n128 v38 = *(__n128 *)a1;
    long long v45 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    long long v20 = *(_OWORD *)(a2 + 32);
    long long v19 = *(_OWORD *)(a2 + 48);
    long long v21 = *(_OWORD *)(a2 + 16);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    *(_OWORD *)(a1 + 32) = v20;
    *(_OWORD *)(a1 + 48) = v19;
    *(_OWORD *)(a1 + 16) = v21;
    *(unsigned char *)(a2 + 64) = v66;
    *(_OWORD *)(a2 + 32) = v52;
    *(_OWORD *)(a2 + 48) = v59;
    *(__n128 *)a2 = v38;
    *(_OWORD *)(a2 + 16) = v45;
    if (sub_357694((unsigned int *)a3, a2))
    {
      long long v49 = *(_OWORD *)(a2 + 32);
      long long v56 = *(_OWORD *)(a2 + 48);
      uint64_t v63 = *(void *)(a2 + 64);
      __n128 v35 = *(__n128 *)a2;
      long long v42 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      long long v23 = *(_OWORD *)(a3 + 32);
      long long v22 = *(_OWORD *)(a3 + 48);
      long long v24 = *(_OWORD *)(a3 + 16);
      *(unsigned char *)(a2 + 64) = *(unsigned char *)(a3 + 64);
      *(_OWORD *)(a2 + 32) = v23;
      *(_OWORD *)(a2 + 48) = v22;
      *(_OWORD *)(a2 + 16) = v24;
      goto LABEL_9;
    }
  }
  else if (v9)
  {
    long long v50 = *(_OWORD *)(a2 + 32);
    long long v57 = *(_OWORD *)(a2 + 48);
    uint64_t v64 = *(void *)(a2 + 64);
    __n128 v36 = *(__n128 *)a2;
    long long v43 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    long long v14 = *(_OWORD *)(a3 + 32);
    long long v13 = *(_OWORD *)(a3 + 48);
    long long v15 = *(_OWORD *)(a3 + 16);
    *(unsigned char *)(a2 + 64) = *(unsigned char *)(a3 + 64);
    *(_OWORD *)(a2 + 32) = v14;
    *(_OWORD *)(a2 + 48) = v13;
    *(_OWORD *)(a2 + 16) = v15;
    *(unsigned char *)(a3 + 64) = v64;
    *(_OWORD *)(a3 + 32) = v50;
    *(_OWORD *)(a3 + 48) = v57;
    *(__n128 *)a3 = v36;
    *(_OWORD *)(a3 + 16) = v43;
    if (sub_357694((unsigned int *)a2, a1))
    {
      long long v51 = *(_OWORD *)(a1 + 32);
      long long v58 = *(_OWORD *)(a1 + 48);
      uint64_t v65 = *(void *)(a1 + 64);
      __n128 v37 = *(__n128 *)a1;
      long long v44 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v17 = *(_OWORD *)(a2 + 32);
      long long v16 = *(_OWORD *)(a2 + 48);
      long long v18 = *(_OWORD *)(a2 + 16);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      *(_OWORD *)(a1 + 32) = v17;
      *(_OWORD *)(a1 + 48) = v16;
      *(_OWORD *)(a1 + 16) = v18;
      *(unsigned char *)(a2 + 64) = v65;
      *(_OWORD *)(a2 + 32) = v51;
      *(_OWORD *)(a2 + 48) = v58;
      *(__n128 *)a2 = v37;
      *(_OWORD *)(a2 + 16) = v44;
    }
  }
LABEL_10:
  if (sub_357694((unsigned int *)a4, a3))
  {
    long long v53 = *(_OWORD *)(a3 + 32);
    long long v60 = *(_OWORD *)(a3 + 48);
    uint64_t v67 = *(void *)(a3 + 64);
    long long v39 = *(_OWORD *)a3;
    long long v46 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    long long v27 = *(_OWORD *)(a4 + 32);
    long long v26 = *(_OWORD *)(a4 + 48);
    long long v28 = *(_OWORD *)(a4 + 16);
    *(unsigned char *)(a3 + 64) = *(unsigned char *)(a4 + 64);
    *(_OWORD *)(a3 + 32) = v27;
    *(_OWORD *)(a3 + 48) = v26;
    *(_OWORD *)(a3 + 16) = v28;
    *(unsigned char *)(a4 + 64) = v67;
    *(_OWORD *)(a4 + 32) = v53;
    *(_OWORD *)(a4 + 48) = v60;
    *(_OWORD *)a4 = v39;
    *(_OWORD *)(a4 + 16) = v46;
    if (sub_357694((unsigned int *)a3, a2))
    {
      long long v54 = *(_OWORD *)(a2 + 32);
      long long v61 = *(_OWORD *)(a2 + 48);
      uint64_t v68 = *(void *)(a2 + 64);
      __n128 v40 = *(__n128 *)a2;
      long long v47 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      long long v30 = *(_OWORD *)(a3 + 32);
      long long v29 = *(_OWORD *)(a3 + 48);
      long long v31 = *(_OWORD *)(a3 + 16);
      *(unsigned char *)(a2 + 64) = *(unsigned char *)(a3 + 64);
      *(_OWORD *)(a2 + 32) = v30;
      *(_OWORD *)(a2 + 48) = v29;
      *(_OWORD *)(a2 + 16) = v31;
      *(unsigned char *)(a3 + 64) = v68;
      *(_OWORD *)(a3 + 32) = v54;
      *(_OWORD *)(a3 + 48) = v61;
      *(__n128 *)a3 = v40;
      *(_OWORD *)(a3 + 16) = v47;
      if (sub_357694((unsigned int *)a2, a1))
      {
        long long v55 = *(_OWORD *)(a1 + 32);
        long long v62 = *(_OWORD *)(a1 + 48);
        uint64_t v69 = *(void *)(a1 + 64);
        __n128 v41 = *(__n128 *)a1;
        long long v48 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        long long v33 = *(_OWORD *)(a2 + 32);
        long long v32 = *(_OWORD *)(a2 + 48);
        long long v34 = *(_OWORD *)(a2 + 16);
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
        *(_OWORD *)(a1 + 32) = v33;
        *(_OWORD *)(a1 + 48) = v32;
        *(_OWORD *)(a1 + 16) = v34;
        *(unsigned char *)(a2 + 64) = v69;
        *(_OWORD *)(a2 + 32) = v55;
        *(_OWORD *)(a2 + 48) = v62;
        __n128 result = v41;
        *(__n128 *)a2 = v41;
        *(_OWORD *)(a2 + 16) = v48;
      }
    }
  }
  return result;
}

__n128 sub_32D84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_32D520(a1, a2, a3, a4);
  if (sub_357694((unsigned int *)a5, a4))
  {
    long long v31 = *(_OWORD *)(a4 + 32);
    long long v35 = *(_OWORD *)(a4 + 48);
    uint64_t v39 = *(void *)(a4 + 64);
    long long v23 = *(_OWORD *)a4;
    long long v27 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    long long v12 = *(_OWORD *)(a5 + 32);
    long long v11 = *(_OWORD *)(a5 + 48);
    long long v13 = *(_OWORD *)(a5 + 16);
    *(unsigned char *)(a4 + 64) = *(unsigned char *)(a5 + 64);
    *(_OWORD *)(a4 + 32) = v12;
    *(_OWORD *)(a4 + 48) = v11;
    *(_OWORD *)(a4 + 16) = v13;
    *(unsigned char *)(a5 + 64) = v39;
    *(_OWORD *)(a5 + 32) = v31;
    *(_OWORD *)(a5 + 48) = v35;
    *(_OWORD *)a5 = v23;
    *(_OWORD *)(a5 + 16) = v27;
    if (sub_357694((unsigned int *)a4, a3))
    {
      long long v32 = *(_OWORD *)(a3 + 32);
      long long v36 = *(_OWORD *)(a3 + 48);
      uint64_t v40 = *(void *)(a3 + 64);
      long long v24 = *(_OWORD *)a3;
      long long v28 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      long long v15 = *(_OWORD *)(a4 + 32);
      long long v14 = *(_OWORD *)(a4 + 48);
      long long v16 = *(_OWORD *)(a4 + 16);
      *(unsigned char *)(a3 + 64) = *(unsigned char *)(a4 + 64);
      *(_OWORD *)(a3 + 32) = v15;
      *(_OWORD *)(a3 + 48) = v14;
      *(_OWORD *)(a3 + 16) = v16;
      *(unsigned char *)(a4 + 64) = v40;
      *(_OWORD *)(a4 + 32) = v32;
      *(_OWORD *)(a4 + 48) = v36;
      *(_OWORD *)a4 = v24;
      *(_OWORD *)(a4 + 16) = v28;
      if (sub_357694((unsigned int *)a3, a2))
      {
        long long v33 = *(_OWORD *)(a2 + 32);
        long long v37 = *(_OWORD *)(a2 + 48);
        uint64_t v41 = *(void *)(a2 + 64);
        long long v25 = *(_OWORD *)a2;
        long long v29 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        long long v18 = *(_OWORD *)(a3 + 32);
        long long v17 = *(_OWORD *)(a3 + 48);
        long long v19 = *(_OWORD *)(a3 + 16);
        *(unsigned char *)(a2 + 64) = *(unsigned char *)(a3 + 64);
        *(_OWORD *)(a2 + 32) = v18;
        *(_OWORD *)(a2 + 48) = v17;
        *(_OWORD *)(a2 + 16) = v19;
        *(unsigned char *)(a3 + 64) = v41;
        *(_OWORD *)(a3 + 32) = v33;
        *(_OWORD *)(a3 + 48) = v37;
        *(_OWORD *)a3 = v25;
        *(_OWORD *)(a3 + 16) = v29;
        if (sub_357694((unsigned int *)a2, a1))
        {
          long long v34 = *(_OWORD *)(a1 + 32);
          long long v38 = *(_OWORD *)(a1 + 48);
          uint64_t v42 = *(void *)(a1 + 64);
          __n128 v26 = *(__n128 *)a1;
          long long v30 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          long long v21 = *(_OWORD *)(a2 + 32);
          long long v20 = *(_OWORD *)(a2 + 48);
          long long v22 = *(_OWORD *)(a2 + 16);
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
          *(_OWORD *)(a1 + 32) = v21;
          *(_OWORD *)(a1 + 48) = v20;
          *(_OWORD *)(a1 + 16) = v22;
          *(unsigned char *)(a2 + 64) = v42;
          *(_OWORD *)(a2 + 32) = v34;
          *(_OWORD *)(a2 + 48) = v38;
          __n128 result = v26;
          *(__n128 *)a2 = v26;
          *(_OWORD *)(a2 + 16) = v30;
        }
      }
    }
  }
  return result;
}

long long *sub_32DA1C(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 == a2) {
    return a3;
  }
  long long v5 = a2;
  uint64_t v7 = (uint64_t)a2 - a1;
  uint64_t v8 = ((uint64_t)a2 - a1) / 72;
  if ((uint64_t)a2 - a1 >= 73)
  {
    unint64_t v10 = (unint64_t)(v8 - 2) >> 1;
    unint64_t v11 = v10 + 1;
    uint64_t v12 = a1 + 72 * v10;
    do
    {
      sub_32DF30(a1, a4, v8, v12);
      v12 -= 72;
      --v11;
    }
    while (v11);
  }
  long long v13 = v5;
  if (v5 != a3)
  {
    if (v7 < 144)
    {
      long long v14 = v5;
      do
      {
        if (sub_357694((unsigned int *)v14, a1))
        {
          long long v15 = v14[3];
          long long v82 = v14[2];
          long long v83 = v15;
          uint64_t v84 = *((void *)v14 + 8);
          long long v16 = v14[1];
          long long v80 = *v14;
          long long v81 = v16;
          long long *v14 = *(_OWORD *)a1;
          long long v18 = *(_OWORD *)(a1 + 32);
          long long v17 = *(_OWORD *)(a1 + 48);
          long long v19 = *(_OWORD *)(a1 + 16);
          *((unsigned char *)v14 + 64) = *(unsigned char *)(a1 + 64);
          _OWORD v14[2] = v18;
          v14[3] = v17;
          v14[1] = v19;
          *(unsigned char *)(a1 + 64) = v84;
          long long v20 = v83;
          *(_OWORD *)(a1 + 32) = v82;
          *(_OWORD *)(a1 + 48) = v20;
          long long v21 = v81;
          *(_OWORD *)a1 = v80;
          *(_OWORD *)(a1 + 16) = v21;
        }
        long long v14 = (long long *)((char *)v14 + 72);
      }
      while (v14 != a3);
      long long v13 = a3;
      goto LABEL_33;
    }
    long long v22 = (unsigned int *)(a1 + 72);
    uint64_t v72 = v7;
    long long v23 = v5;
    long long v73 = a3;
    while (1)
    {
      if (sub_357694((unsigned int *)v23, a1))
      {
        long long v27 = v23[3];
        long long v82 = v23[2];
        long long v83 = v27;
        uint64_t v84 = *((void *)v23 + 8);
        long long v28 = v23[1];
        long long v80 = *v23;
        long long v81 = v28;
        *long long v23 = *(_OWORD *)a1;
        long long v30 = *(_OWORD *)(a1 + 32);
        long long v29 = *(_OWORD *)(a1 + 48);
        long long v31 = *(_OWORD *)(a1 + 16);
        *((unsigned char *)v23 + 64) = *(unsigned char *)(a1 + 64);
        v23[2] = v30;
        v23[3] = v29;
        v23[1] = v31;
        *(unsigned char *)(a1 + 64) = v84;
        long long v32 = v83;
        *(_OWORD *)(a1 + 32) = v82;
        *(_OWORD *)(a1 + 48) = v32;
        long long v33 = v81;
        *(_OWORD *)a1 = v80;
        *(_OWORD *)(a1 + 16) = v33;
        if ((unint64_t)v8 < 3)
        {
          long long v35 = v22;
          int64_t v36 = 1;
          if (!sub_357694(v22, a1)) {
            goto LABEL_25;
          }
        }
        else
        {
          BOOL v34 = sub_357694(v22, a1 + 144);
          if (v34) {
            long long v35 = (unsigned int *)(a1 + 144);
          }
          else {
            long long v35 = v22;
          }
          if (v34) {
            int64_t v36 = 2;
          }
          else {
            int64_t v36 = 1;
          }
          if (!sub_357694(v35, a1))
          {
LABEL_25:
            long long v37 = *(_OWORD *)(a1 + 48);
            long long v82 = *(_OWORD *)(a1 + 32);
            long long v83 = v37;
            uint64_t v84 = *(void *)(a1 + 64);
            long long v38 = *(_OWORD *)(a1 + 16);
            long long v80 = *(_OWORD *)a1;
            long long v81 = v38;
            uint64_t v39 = a1;
            do
            {
              uint64_t v41 = v35;
              *(_OWORD *)uint64_t v39 = *(_OWORD *)v35;
              long long v42 = *((_OWORD *)v35 + 1);
              long long v43 = *((_OWORD *)v35 + 2);
              long long v44 = *((_OWORD *)v35 + 3);
              *(unsigned char *)(v39 + 64) = *((unsigned char *)v35 + 64);
              *(_OWORD *)(v39 + 32) = v43;
              *(_OWORD *)(v39 + 48) = v44;
              *(_OWORD *)(v39 + 16) = v42;
              if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v36) {
                break;
              }
              uint64_t v45 = (2 * v36) | 1;
              long long v35 = (unsigned int *)(a1 + 72 * v45);
              if (2 * v36 + 2 < v8 && sub_357694((unsigned int *)(a1 + 72 * v45), (uint64_t)(v35 + 18)))
              {
                v35 += 18;
                uint64_t v45 = 2 * v36 + 2;
              }
              BOOL v40 = sub_357694(v35, (uint64_t)&v80);
              uint64_t v39 = (uint64_t)v41;
              int64_t v36 = v45;
            }
            while (!v40);
            *(_OWORD *)uint64_t v41 = v80;
            long long v24 = v81;
            long long v25 = v82;
            long long v26 = v83;
            *((unsigned char *)v41 + 64) = v84;
            *((_OWORD *)v41 + 2) = v25;
            *((_OWORD *)v41 + 3) = v26;
            *((_OWORD *)v41 + 1) = v24;
            long long v22 = (unsigned int *)(a1 + 72);
            a3 = v73;
          }
        }
      }
      long long v23 = (long long *)((char *)v23 + 72);
      if (v23 == a3)
      {
        long long v13 = a3;
        uint64_t v7 = v72;
        goto LABEL_34;
      }
    }
  }
LABEL_33:
  if (v7 < 73) {
    return v13;
  }
LABEL_34:
  long long v74 = v13;
  int64_t v46 = v7 / 0x48uLL;
  do
  {
    uint64_t v48 = 0;
    long long v77 = *(_OWORD *)(a1 + 32);
    long long v78 = *(_OWORD *)(a1 + 48);
    uint64_t v79 = *(void *)(a1 + 64);
    long long v75 = *(_OWORD *)a1;
    long long v76 = *(_OWORD *)(a1 + 16);
    uint64_t v49 = a1;
    do
    {
      uint64_t v53 = v49 + 72 * v48 + 72;
      uint64_t v54 = (2 * v48) | 1;
      uint64_t v55 = 2 * v48 + 2;
      if (v55 < v46 && sub_357694((unsigned int *)(v49 + 72 * v48 + 72), v49 + 72 * v48 + 144))
      {
        v53 += 72;
        uint64_t v54 = v55;
      }
      *(_OWORD *)uint64_t v49 = *(_OWORD *)v53;
      long long v50 = *(_OWORD *)(v53 + 16);
      long long v51 = *(_OWORD *)(v53 + 32);
      long long v52 = *(_OWORD *)(v53 + 48);
      *(unsigned char *)(v49 + 64) = *(unsigned char *)(v53 + 64);
      *(_OWORD *)(v49 + 32) = v51;
      *(_OWORD *)(v49 + 48) = v52;
      *(_OWORD *)(v49 + 16) = v50;
      uint64_t v49 = v53;
      uint64_t v48 = v54;
    }
    while (v54 <= (uint64_t)((unint64_t)(v46 - 2) >> 1));
    long long v5 = (long long *)((char *)v5 - 72);
    if ((long long *)v53 == v5)
    {
      *(_OWORD *)uint64_t v53 = v75;
      *(unsigned char *)(v53 + 64) = v79;
      *(_OWORD *)(v53 + 32) = v77;
      *(_OWORD *)(v53 + 48) = v78;
      *(_OWORD *)(v53 + 16) = v76;
    }
    else
    {
      *(_OWORD *)uint64_t v53 = *v5;
      long long v56 = v5[1];
      long long v57 = v5[2];
      long long v58 = v5[3];
      *(unsigned char *)(v53 + 64) = *((unsigned char *)v5 + 64);
      *(_OWORD *)(v53 + 32) = v57;
      *(_OWORD *)(v53 + 48) = v58;
      *(_OWORD *)(v53 + 16) = v56;
      v5[2] = v77;
      v5[3] = v78;
      *((unsigned char *)v5 + 64) = v79;
      long long *v5 = v75;
      v5[1] = v76;
      uint64_t v59 = v53 - a1 + 72;
      if (v59 >= 73)
      {
        unint64_t v60 = (v59 / 0x48uLL - 2) >> 1;
        unint64_t v61 = a1 + 72 * v60;
        if (sub_357694((unsigned int *)v61, v53))
        {
          long long v80 = *(_OWORD *)v53;
          long long v62 = *(_OWORD *)(v53 + 16);
          long long v63 = *(_OWORD *)(v53 + 32);
          long long v64 = *(_OWORD *)(v53 + 48);
          uint64_t v84 = *(void *)(v53 + 64);
          long long v82 = v63;
          long long v83 = v64;
          long long v81 = v62;
          do
          {
            uint64_t v65 = v61;
            *(_OWORD *)uint64_t v53 = *(_OWORD *)v61;
            long long v66 = *(_OWORD *)(v61 + 16);
            long long v67 = *(_OWORD *)(v61 + 32);
            long long v68 = *(_OWORD *)(v61 + 48);
            *(unsigned char *)(v53 + 64) = *(unsigned char *)(v61 + 64);
            *(_OWORD *)(v53 + 32) = v67;
            *(_OWORD *)(v53 + 48) = v68;
            *(_OWORD *)(v53 + 16) = v66;
            if (!v60) {
              break;
            }
            unint64_t v60 = (v60 - 1) >> 1;
            unint64_t v61 = a1 + 72 * v60;
            uint64_t v53 = v65;
          }
          while (sub_357694((unsigned int *)v61, (uint64_t)&v80));
          long long v69 = v83;
          *(_OWORD *)(v65 + 32) = v82;
          *(_OWORD *)(v65 + 48) = v69;
          *(unsigned char *)(v65 + 64) = v84;
          long long v70 = v81;
          *(_OWORD *)uint64_t v65 = v80;
          *(_OWORD *)(v65 + 16) = v70;
        }
      }
    }
  }
  while (v46-- > 2);
  return v74;
}

__n128 sub_32DF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v30 = v4;
    uint64_t v31 = v5;
    uint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0x8E38E38E38E38E39 * ((a4 - a1) >> 3)))
    {
      uint64_t v11 = (0x1C71C71C71C71C72 * ((a4 - a1) >> 3)) | 1;
      uint64_t v12 = a1 + 72 * v11;
      uint64_t v13 = 0x1C71C71C71C71C72 * ((a4 - a1) >> 3) + 2;
      if (v13 < a3 && sub_357694((unsigned int *)(a1 + 72 * v11), v12 + 72))
      {
        v12 += 72;
        uint64_t v11 = v13;
      }
      if (!sub_357694((unsigned int *)v12, v7))
      {
        long long v15 = *(_OWORD *)(v7 + 48);
        long long v27 = *(_OWORD *)(v7 + 32);
        long long v28 = v15;
        uint64_t v29 = *(void *)(v7 + 64);
        __n128 v16 = *(__n128 *)(v7 + 16);
        long long v25 = *(_OWORD *)v7;
        __n128 v26 = v16;
        do
        {
          uint64_t v17 = v12;
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v12;
          long long v18 = *(_OWORD *)(v12 + 16);
          long long v19 = *(_OWORD *)(v12 + 32);
          long long v20 = *(_OWORD *)(v12 + 48);
          *(unsigned char *)(v7 + 64) = *(unsigned char *)(v12 + 64);
          *(_OWORD *)(v7 + 32) = v19;
          *(_OWORD *)(v7 + 48) = v20;
          *(_OWORD *)(v7 + 16) = v18;
          if (v9 < v11) {
            break;
          }
          uint64_t v21 = (2 * v11) | 1;
          uint64_t v12 = a1 + 72 * v21;
          uint64_t v22 = 2 * v11 + 2;
          if (v22 < a3 && sub_357694((unsigned int *)(a1 + 72 * v21), v12 + 72))
          {
            v12 += 72;
            uint64_t v21 = v22;
          }
          uint64_t v7 = v17;
          uint64_t v11 = v21;
        }
        while (!sub_357694((unsigned int *)v12, (uint64_t)&v25));
        *(_OWORD *)uint64_t v17 = v25;
        __n128 result = v26;
        long long v23 = v27;
        long long v24 = v28;
        *(unsigned char *)(v17 + 64) = v29;
        *(_OWORD *)(v17 + 32) = v23;
        *(_OWORD *)(v17 + 48) = v24;
        *(__n128 *)(v17 + 16) = result;
      }
    }
  }
  return result;
}

uint64_t sub_32E0C0(uint64_t result, int *a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v10 = result;
LABEL_2:
  uint64_t v11 = (uint64_t)(a2 - 2);
  long long v119 = a2 - 6;
  long long v120 = a2 - 4;
  uint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  int v118 = a5;
  while (1)
  {
    unint64_t v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (uint64_t)a2 - v12;
    unint64_t v16 = ((uint64_t)a2 - v12) >> 3;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          __n128 result = sub_3591E0((uint64_t)(a2 - 2), v12);
          if (!result) {
            return result;
          }
          uint64_t v88 = *(void *)v12;
          int v89 = *(_DWORD *)v11;
          *(_DWORD *)(v12 + 3) = *(int *)((char *)a2 - 5);
          *(_DWORD *)uint64_t v12 = v89;
          goto LABEL_112;
        case 3uLL:
          long long v90 = (_DWORD *)(v12 + 8);
          BOOL v91 = sub_3591E0(v12 + 8, v12);
          __n128 result = sub_3591E0(v11, v12 + 8);
          if (v91)
          {
            uint64_t v92 = *(void *)v12;
            if (result)
            {
              int v93 = *(_DWORD *)v11;
              *(_DWORD *)(v12 + 3) = *(_DWORD *)(v11 + 3);
              *(_DWORD *)uint64_t v12 = v93;
              *(unsigned char *)(v11 + 6) = BYTE6(v92);
              *(_WORD *)(v11 + 4) = WORD2(v92);
              *(_DWORD *)uint64_t v11 = v92;
            }
            else
            {
              *(_DWORD *)uint64_t v12 = *v90;
              *(_DWORD *)(v12 + 3) = *(_DWORD *)(v12 + 11);
              *(_DWORD *)(v12 + 8) = v92;
              *(unsigned char *)(v12 + 14) = BYTE6(v92);
              *(_WORD *)(v12 + 12) = WORD2(v92);
              __n128 result = sub_3591E0(v11, v12 + 8);
              if (result)
              {
                uint64_t v88 = *(void *)v90;
                int v117 = *(_DWORD *)v11;
                *(_DWORD *)(v12 + 11) = *(_DWORD *)(v11 + 3);
                *long long v90 = v117;
LABEL_112:
                *(_DWORD *)uint64_t v11 = v88;
                *(unsigned char *)(v11 + 6) = BYTE6(v88);
                *(_WORD *)(v11 + 4) = WORD2(v88);
              }
            }
          }
          else if (result)
          {
            uint64_t v110 = *(void *)(v12 + 8);
            int v111 = *(_DWORD *)v11;
            *(_DWORD *)(v12 + 11) = *(_DWORD *)(v11 + 3);
            *long long v90 = v111;
            *(_DWORD *)uint64_t v11 = v110;
            *(unsigned char *)(v11 + 6) = BYTE6(v110);
            *(_WORD *)(v11 + 4) = WORD2(v110);
LABEL_101:
            __n128 result = sub_3591E0((uint64_t)v90, v12);
            if (result)
            {
              uint64_t v112 = *(void *)v12;
              *(_DWORD *)uint64_t v12 = *v90;
              *(_DWORD *)(v12 + 3) = *(_DWORD *)((char *)v90 + 3);
              *(_DWORD *)(v12 + 8) = v112;
              *(unsigned char *)(v12 + 14) = BYTE6(v112);
              *(_WORD *)(v12 + 12) = WORD2(v112);
            }
          }
          break;
        case 4uLL:
          return sub_32F2E0(v12, v12 + 8, v12 + 16, (uint64_t)(a2 - 2));
        case 5uLL:
          long long v90 = (_DWORD *)(v12 + 8);
          uint64_t v94 = (uint64_t *)(v12 + 16);
          long long v95 = (uint64_t *)(v12 + 24);
          sub_32F2E0(v12, v12 + 8, v12 + 16, v12 + 24);
          __n128 result = sub_3591E0(v11, v12 + 24);
          if (!result) {
            return result;
          }
          uint64_t v96 = *v95;
          int v97 = *(_DWORD *)v11;
          *(_DWORD *)(v12 + 27) = *(_DWORD *)(v11 + 3);
          *(_DWORD *)long long v95 = v97;
          *(_DWORD *)uint64_t v11 = v96;
          *(unsigned char *)(v11 + 6) = BYTE6(v96);
          *(_WORD *)(v11 + 4) = WORD2(v96);
          __n128 result = sub_3591E0(v12 + 24, v12 + 16);
          if (!result) {
            return result;
          }
          uint64_t v98 = *v94;
          *(_DWORD *)uint64_t v94 = *(_DWORD *)v95;
          *(_DWORD *)(v12 + 19) = *(_DWORD *)(v12 + 27);
          *(_DWORD *)long long v95 = v98;
          *(_WORD *)(v12 + 28) = WORD2(v98);
          *(unsigned char *)(v12 + 30) = BYTE6(v98);
          __n128 result = sub_3591E0(v12 + 16, v12 + 8);
          if (!result) {
            return result;
          }
          uint64_t v99 = *(void *)(v12 + 8);
          *long long v90 = *(_DWORD *)v94;
          *(_DWORD *)(v12 + 11) = *(_DWORD *)(v12 + 19);
          *(_DWORD *)(v12 + 16) = v99;
          *(unsigned char *)(v12 + 22) = BYTE6(v99);
          *(_WORD *)(v12 + 20) = WORD2(v99);
          goto LABEL_101;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if ((int *)v12 != a2)
      {
        return sub_32F4D8(v12, (uint64_t)a2, (uint64_t)a2, a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = v12 + 8 * (v16 >> 1);
    if ((unint64_t)v15 >= 0x401)
    {
      BOOL v19 = sub_3591E0(v10 + 8 * (v16 >> 1), v10);
      BOOL v20 = sub_3591E0((uint64_t)(a2 - 2), v18);
      if (v19)
      {
        uint64_t v21 = *(void *)v10;
        uint64_t v22 = HIWORD(*(void *)v10);
        uint64_t v23 = HIDWORD(*(void *)v10);
        if (v20)
        {
          int v24 = *(_DWORD *)v11;
          *(_DWORD *)(v10 + 3) = *(int *)((char *)a2 - 5);
          *(_DWORD *)unint64_t v10 = v24;
          *((unsigned char *)a2 - 2) = v22;
          *((_WORD *)a2 - 2) = v23;
          *(_DWORD *)uint64_t v11 = v21;
        }
        else
        {
          int v39 = *(_DWORD *)v18;
          *(_DWORD *)(v10 + 3) = *(_DWORD *)(v18 + 3);
          *(_DWORD *)unint64_t v10 = v39;
          *(unsigned char *)(v18 + 6) = v22;
          *(_WORD *)(v18 + 4) = v23;
          *(_DWORD *)uint64_t v18 = v21;
          if (sub_3591E0((uint64_t)(a2 - 2), v18))
          {
            uint64_t v40 = *(void *)v18;
            int v41 = *(_DWORD *)v11;
            *(_DWORD *)(v18 + 3) = *(int *)((char *)a2 - 5);
            *(_DWORD *)uint64_t v18 = v41;
            *(_DWORD *)uint64_t v11 = v40;
            *((unsigned char *)a2 - 2) = BYTE6(v40);
            *((_WORD *)a2 - 2) = WORD2(v40);
          }
        }
      }
      else if (v20)
      {
        uint64_t v31 = *(void *)v18;
        int v32 = *(_DWORD *)v11;
        *(_DWORD *)(v18 + 3) = *(int *)((char *)a2 - 5);
        *(_DWORD *)uint64_t v18 = v32;
        *(_DWORD *)uint64_t v11 = v31;
        *((unsigned char *)a2 - 2) = BYTE6(v31);
        *((_WORD *)a2 - 2) = WORD2(v31);
        if (sub_3591E0(v18, v10))
        {
          uint64_t v33 = *(void *)v10;
          int v34 = *(_DWORD *)v18;
          *(_DWORD *)(v10 + 3) = *(_DWORD *)(v18 + 3);
          *(_DWORD *)unint64_t v10 = v34;
          *(_DWORD *)uint64_t v18 = v33;
          *(unsigned char *)(v18 + 6) = BYTE6(v33);
          *(_WORD *)(v18 + 4) = WORD2(v33);
        }
      }
      long long v42 = (uint64_t *)(v10 + 8);
      long long v43 = (int *)(v10 + 8 * v17 - 8);
      BOOL v44 = sub_3591E0((uint64_t)v43, v10 + 8);
      BOOL v45 = sub_3591E0((uint64_t)v120, (uint64_t)v43);
      if (v44)
      {
        uint64_t v46 = *v42;
        unint64_t v47 = HIWORD(*v42);
        unint64_t v48 = HIDWORD(*v42);
        if (v45)
        {
          int v49 = *v120;
          *(_DWORD *)(v10 + 11) = *(int *)((char *)a2 - 13);
          *(_DWORD *)long long v42 = v49;
          *((unsigned char *)a2 - 10) = v47;
          *((_WORD *)a2 - 6) = v48;
          int *v120 = v46;
        }
        else
        {
          int v57 = *v43;
          *(_DWORD *)(v10 + 11) = *(_DWORD *)(v10 + 8 * v17 - 5);
          *(_DWORD *)long long v42 = v57;
          *(unsigned char *)(v10 + 8 * v17 - 2) = v47;
          *(_WORD *)(v10 + 8 * v17 - 4) = v48;
          *long long v43 = v46;
          if (sub_3591E0((uint64_t)v120, (uint64_t)v43))
          {
            uint64_t v58 = *(void *)v43;
            int v59 = *v120;
            *(_DWORD *)(v10 + 8 * v17 - 5) = *(int *)((char *)a2 - 13);
            *long long v43 = v59;
            int *v120 = v58;
            *((unsigned char *)a2 - 10) = BYTE6(v58);
            *((_WORD *)a2 - 6) = WORD2(v58);
          }
        }
      }
      else if (v45)
      {
        uint64_t v50 = *(void *)v43;
        int v51 = *v120;
        *(_DWORD *)(v10 + 8 * v17 - 5) = *(int *)((char *)a2 - 13);
        *long long v43 = v51;
        int *v120 = v50;
        *((unsigned char *)a2 - 10) = BYTE6(v50);
        *((_WORD *)a2 - 6) = WORD2(v50);
        if (sub_3591E0((uint64_t)v43, v10 + 8))
        {
          uint64_t v52 = *v42;
          int v53 = *v43;
          *(_DWORD *)(v10 + 11) = *(_DWORD *)(v10 + 8 * v17 - 5);
          *(_DWORD *)long long v42 = v53;
          *long long v43 = v52;
          *(unsigned char *)(v10 + 8 * v17 - 2) = BYTE6(v52);
          *(_WORD *)(v10 + 8 * v17 - 4) = WORD2(v52);
        }
      }
      unint64_t v60 = (uint64_t *)(v10 + 16);
      uint64_t v61 = v10 + 8 * v17 + 8;
      BOOL v62 = sub_3591E0(v61, v10 + 16);
      BOOL v63 = sub_3591E0((uint64_t)v119, v61);
      if (v62)
      {
        uint64_t v64 = *v60;
        unint64_t v65 = HIWORD(*v60);
        unint64_t v66 = HIDWORD(*v60);
        if (v63)
        {
          int v67 = *v119;
          *(_DWORD *)(v10 + 19) = *(int *)((char *)a2 - 21);
          *(_DWORD *)unint64_t v60 = v67;
          *((unsigned char *)a2 - 18) = v65;
          *((_WORD *)a2 - 10) = v66;
          *long long v119 = v64;
        }
        else
        {
          int v72 = *(_DWORD *)v61;
          *(_DWORD *)(v10 + 19) = *(_DWORD *)(v61 + 3);
          *(_DWORD *)unint64_t v60 = v72;
          *(unsigned char *)(v61 + 6) = v65;
          *(_WORD *)(v61 + 4) = v66;
          *(_DWORD *)uint64_t v61 = v64;
          if (sub_3591E0((uint64_t)v119, v61))
          {
            uint64_t v73 = *(void *)v61;
            int v74 = *v119;
            *(_DWORD *)(v61 + 3) = *(int *)((char *)a2 - 21);
            *(_DWORD *)uint64_t v61 = v74;
            *long long v119 = v73;
            *((unsigned char *)a2 - 18) = BYTE6(v73);
            *((_WORD *)a2 - 10) = WORD2(v73);
          }
        }
      }
      else if (v63)
      {
        uint64_t v68 = *(void *)v61;
        int v69 = *v119;
        *(_DWORD *)(v61 + 3) = *(int *)((char *)a2 - 21);
        *(_DWORD *)uint64_t v61 = v69;
        *long long v119 = v68;
        *((unsigned char *)a2 - 18) = BYTE6(v68);
        *((_WORD *)a2 - 10) = WORD2(v68);
        if (sub_3591E0(v61, v10 + 16))
        {
          uint64_t v70 = *v60;
          int v71 = *(_DWORD *)v61;
          *(_DWORD *)(v10 + 19) = *(_DWORD *)(v61 + 3);
          *(_DWORD *)unint64_t v60 = v71;
          *(_DWORD *)uint64_t v61 = v70;
          *(unsigned char *)(v61 + 6) = BYTE6(v70);
          *(_WORD *)(v61 + 4) = WORD2(v70);
        }
      }
      BOOL v75 = sub_3591E0(v18, (uint64_t)v43);
      BOOL v76 = sub_3591E0(v61, v18);
      if (v75)
      {
        uint64_t v77 = *(void *)v43;
        uint64_t v78 = HIDWORD(*(void *)v43);
        uint64_t v79 = HIWORD(*(void *)v43);
        if (v76)
        {
          *long long v43 = *(_DWORD *)v61;
          *(int *)((char *)v43 + 3) = *(_DWORD *)(v61 + 3);
          *(_DWORD *)uint64_t v61 = v77;
          *(_WORD *)(v61 + 4) = v78;
          goto LABEL_54;
        }
        *long long v43 = *(_DWORD *)v18;
        *(int *)((char *)v43 + 3) = *(_DWORD *)(v18 + 3);
        *(_DWORD *)uint64_t v18 = v77;
        *(_WORD *)(v18 + 4) = v78;
        *(unsigned char *)(v18 + 6) = v79;
        if (sub_3591E0(v61, v18))
        {
          unint64_t v82 = *(void *)v18;
          *(_DWORD *)uint64_t v18 = *(_DWORD *)v61;
          *(_DWORD *)(v18 + 3) = *(_DWORD *)(v61 + 3);
          *(_DWORD *)uint64_t v61 = v82;
          *(_WORD *)(v61 + 4) = WORD2(v82);
          uint64_t v79 = HIWORD(v82);
LABEL_54:
          *(unsigned char *)(v61 + 6) = v79;
        }
      }
      else if (v76)
      {
        unint64_t v80 = *(void *)v18;
        *(_DWORD *)uint64_t v18 = *(_DWORD *)v61;
        *(_DWORD *)(v18 + 3) = *(_DWORD *)(v61 + 3);
        *(_DWORD *)uint64_t v61 = v80;
        *(_WORD *)(v61 + 4) = WORD2(v80);
        *(unsigned char *)(v61 + 6) = BYTE6(v80);
        if (sub_3591E0(v18, (uint64_t)v43))
        {
          uint64_t v81 = *(void *)v43;
          *long long v43 = *(_DWORD *)v18;
          *(int *)((char *)v43 + 3) = *(_DWORD *)(v18 + 3);
          *(_DWORD *)uint64_t v18 = v81;
          *(_WORD *)(v18 + 4) = WORD2(v81);
          *(unsigned char *)(v18 + 6) = BYTE6(v81);
        }
      }
      uint64_t v83 = *(void *)v10;
      int v84 = *(_DWORD *)v18;
      *(_DWORD *)(v10 + 3) = *(_DWORD *)(v18 + 3);
      *(_DWORD *)unint64_t v10 = v84;
      *(_DWORD *)uint64_t v18 = v83;
      *(unsigned char *)(v18 + 6) = BYTE6(v83);
      *(_WORD *)(v18 + 4) = WORD2(v83);
      a5 = v118;
      if (v118) {
        goto LABEL_57;
      }
      goto LABEL_56;
    }
    BOOL v25 = sub_3591E0(v10, v10 + 8 * (v16 >> 1));
    BOOL v26 = sub_3591E0((uint64_t)(a2 - 2), v10);
    if (v25)
    {
      unint64_t v27 = *(void *)v18;
      uint64_t v28 = HIWORD(*(void *)v18);
      uint64_t v29 = HIDWORD(*(void *)v18);
      if (!v26)
      {
        int v54 = *(_DWORD *)v10;
        *(_DWORD *)(v18 + 3) = *(_DWORD *)(v10 + 3);
        *(_DWORD *)uint64_t v18 = v54;
        *(unsigned char *)(v10 + 6) = v28;
        *(_WORD *)(v10 + 4) = v29;
        *(_DWORD *)unint64_t v10 = v27;
        if (sub_3591E0((uint64_t)(a2 - 2), v10))
        {
          uint64_t v55 = *(void *)v10;
          int v56 = *(_DWORD *)v11;
          *(_DWORD *)(v10 + 3) = *(int *)((char *)a2 - 5);
          *(_DWORD *)unint64_t v10 = v56;
          *(_DWORD *)uint64_t v11 = v55;
          *((unsigned char *)a2 - 2) = BYTE6(v55);
          *((_WORD *)a2 - 2) = WORD2(v55);
        }
LABEL_34:
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      int v30 = *(_DWORD *)v11;
      *(_DWORD *)(v18 + 3) = *(int *)((char *)a2 - 5);
      *(_DWORD *)uint64_t v18 = v30;
      *((unsigned char *)a2 - 2) = v28;
      *((_WORD *)a2 - 2) = v29;
      *(_DWORD *)uint64_t v11 = v27;
      if (a5) {
        goto LABEL_57;
      }
    }
    else
    {
      if (!v26) {
        goto LABEL_34;
      }
      uint64_t v35 = *(void *)v10;
      int v36 = *(_DWORD *)v11;
      *(_DWORD *)(v10 + 3) = *(int *)((char *)a2 - 5);
      *(_DWORD *)unint64_t v10 = v36;
      *(_DWORD *)uint64_t v11 = v35;
      *((unsigned char *)a2 - 2) = BYTE6(v35);
      *((_WORD *)a2 - 2) = WORD2(v35);
      if (!sub_3591E0(v10, v18)) {
        goto LABEL_34;
      }
      unint64_t v37 = *(void *)v18;
      int v38 = *(_DWORD *)v10;
      *(_DWORD *)(v18 + 3) = *(_DWORD *)(v10 + 3);
      *(_DWORD *)uint64_t v18 = v38;
      *(_DWORD *)unint64_t v10 = v37;
      *(unsigned char *)(v10 + 6) = BYTE6(v37);
      *(_WORD *)(v10 + 4) = WORD2(v37);
      if (a5) {
        goto LABEL_57;
      }
    }
LABEL_56:
    if (!sub_3591E0(v10 - 8, v10))
    {
      __n128 result = sub_32EBA8(v10, (unint64_t)a2);
      uint64_t v12 = result;
      goto LABEL_62;
    }
LABEL_57:
    uint64_t v85 = sub_32ECDC((int *)v10, (unint64_t)a2);
    if ((v86 & 1) == 0) {
      goto LABEL_60;
    }
    BOOL v87 = sub_32EE1C(v10, v85);
    uint64_t v12 = (uint64_t)(v85 + 2);
    __n128 result = sub_32EE1C((uint64_t)(v85 + 2), a2);
    if (result)
    {
      a4 = -v14;
      a2 = v85;
      if (v87) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v87)
    {
LABEL_60:
      __n128 result = sub_32E0C0(v10, v85, a3, -v14, a5 & 1);
      uint64_t v12 = (uint64_t)(v85 + 2);
LABEL_62:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  uint64_t v100 = v12 + 8;
  BOOL v102 = (int *)v12 == a2 || v100 == (void)a2;
  if (a5)
  {
    if (!v102)
    {
      uint64_t v103 = 0;
      long long v104 = (uint64_t *)v12;
      do
      {
        uint64_t v107 = (uint64_t)v104;
        long long v104 = (uint64_t *)v100;
        __n128 result = sub_3591E0(v100, v107);
        if (result)
        {
          uint64_t v121 = *v104;
          uint64_t v108 = v103;
          do
          {
            uint64_t v109 = v12 + v108;
            *(_DWORD *)(v109 + 8) = *(_DWORD *)(v12 + v108);
            *(_DWORD *)(v109 + 11) = *(_DWORD *)(v12 + v108 + 3);
            if (!v108)
            {
              long long v105 = (_DWORD *)v12;
              goto LABEL_88;
            }
            v108 -= 8;
            __n128 result = sub_3591E0((uint64_t)&v121, v108 + v12);
          }
          while ((result & 1) != 0);
          long long v105 = (_DWORD *)(v12 + v108 + 8);
LABEL_88:
          int v106 = v121;
          *(_DWORD *)((char *)v105 + 3) = *(_DWORD *)((char *)&v121 + 3);
          *long long v105 = v106;
        }
        uint64_t v100 = (uint64_t)(v104 + 1);
        v103 += 8;
      }
      while (v104 + 1 != (uint64_t *)a2);
    }
  }
  else if (!v102)
  {
    long long v113 = (_DWORD *)(v12 - 8);
    do
    {
      uint64_t v114 = v10;
      unint64_t v10 = v100;
      __n128 result = sub_3591E0(v100, v114);
      if (result)
      {
        uint64_t v121 = *(void *)v10;
        long long v115 = v113;
        do
        {
          v115[4] = v115[2];
          *(_DWORD *)((char *)v115 + 19) = *(_DWORD *)((char *)v115 + 11);
          __n128 result = sub_3591E0((uint64_t)&v121, (uint64_t)v115);
          v115 -= 2;
        }
        while ((result & 1) != 0);
        int v116 = v121;
        *(_DWORD *)((char *)v115 + 19) = *(_DWORD *)((char *)&v121 + 3);
        v115[4] = v116;
      }
      uint64_t v100 = v10 + 8;
      v113 += 2;
    }
    while ((int *)(v10 + 8) != a2);
  }
  return result;
}

unint64_t sub_32EBA8(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v13 = *(void *)a1;
  if (sub_3591E0((uint64_t)&v13, a2 - 8))
  {
    unint64_t v4 = a1;
    do
      v4 += 8;
    while (!sub_3591E0((uint64_t)&v13, v4));
  }
  else
  {
    unint64_t v5 = a1 + 8;
    do
    {
      unint64_t v4 = v5;
      if (v5 >= v2) {
        break;
      }
      BOOL v6 = sub_3591E0((uint64_t)&v13, v5);
      unint64_t v5 = v4 + 8;
    }
    while (!v6);
  }
  if (v4 < v2)
  {
    do
      v2 -= 8;
    while (sub_3591E0((uint64_t)&v13, v2));
  }
  while (v4 < v2)
  {
    uint64_t v7 = *(void *)v4;
    int v8 = *(_DWORD *)v2;
    *(_DWORD *)(v4 + 3) = *(_DWORD *)(v2 + 3);
    *(_DWORD *)unint64_t v4 = v8;
    *(_DWORD *)unint64_t v2 = v7;
    *(unsigned char *)(v2 + 6) = BYTE6(v7);
    *(_WORD *)(v2 + 4) = WORD2(v7);
    do
      v4 += 8;
    while (!sub_3591E0((uint64_t)&v13, v4));
    do
      v2 -= 8;
    while (sub_3591E0((uint64_t)&v13, v2));
  }
  uint64_t v9 = (int *)(v4 - 8);
  if (v4 - 8 != a1)
  {
    int v10 = *v9;
    *(_DWORD *)(a1 + 3) = *(_DWORD *)(v4 - 5);
    *(_DWORD *)a1 = v10;
  }
  int v11 = v13;
  *(_DWORD *)(v4 - 5) = *(_DWORD *)((char *)&v13 + 3);
  *uint64_t v9 = v11;
  return v4;
}

int *sub_32ECDC(int *a1, unint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v14 = *(void *)a1;
  do
    v4 += 2;
  while (sub_3591E0((uint64_t)&a1[v4], (uint64_t)&v14));
  unint64_t v5 = (unint64_t)&a1[v4];
  BOOL v6 = &a1[v4 - 2];
  if (v4 == 2)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      a2 -= 8;
    }
    while (!sub_3591E0(a2, (uint64_t)&v14));
  }
  else
  {
    do
      a2 -= 8;
    while (!sub_3591E0(a2, (uint64_t)&v14));
  }
  if (v5 < a2)
  {
    unint64_t v7 = (unint64_t)&a1[v4];
    unint64_t v8 = a2;
    do
    {
      uint64_t v9 = *(void *)v7;
      int v10 = *(_DWORD *)v8;
      *(_DWORD *)(v7 + 3) = *(_DWORD *)(v8 + 3);
      *(_DWORD *)unint64_t v7 = v10;
      *(_DWORD *)unint64_t v8 = v9;
      *(unsigned char *)(v8 + 6) = BYTE6(v9);
      *(_WORD *)(v8 + 4) = WORD2(v9);
      do
        v7 += 8;
      while (sub_3591E0(v7, (uint64_t)&v14));
      do
        v8 -= 8;
      while (!sub_3591E0(v8, (uint64_t)&v14));
    }
    while (v7 < v8);
    BOOL v6 = (int *)(v7 - 8);
  }
  if (v6 != a1)
  {
    int v11 = *v6;
    *(int *)((char *)a1 + 3) = *(int *)((char *)v6 + 3);
    *a1 = v11;
  }
  int v12 = v14;
  *(int *)((char *)v6 + 3) = *(_DWORD *)((char *)&v14 + 3);
  int *v6 = v12;
  return v6;
}

BOOL sub_32EE1C(uint64_t a1, void *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (uint64_t)(a2 - 1);
      if (!sub_3591E0((uint64_t)(a2 - 1), a1)) {
        return 1;
      }
      uint64_t v7 = *(void *)a1;
      int v8 = *(_DWORD *)v6;
      *(_DWORD *)(a1 + 3) = *(_DWORD *)(v6 + 3);
      *(_DWORD *)a1 = v8;
      goto LABEL_24;
    case 3:
      uint64_t v9 = (_DWORD *)(a1 + 8);
      uint64_t v6 = (uint64_t)(a2 - 1);
      BOOL v10 = sub_3591E0(a1 + 8, a1);
      BOOL v11 = sub_3591E0(v6, a1 + 8);
      if (v10)
      {
        uint64_t v12 = *(void *)a1;
        if (v11)
        {
          int v13 = *(_DWORD *)v6;
          *(_DWORD *)(a1 + 3) = *(_DWORD *)(v6 + 3);
          *(_DWORD *)a1 = v13;
          *(unsigned char *)(v6 + 6) = BYTE6(v12);
          *(_WORD *)(v6 + 4) = WORD2(v12);
          *(_DWORD *)uint64_t v6 = v12;
        }
        else
        {
          *(_DWORD *)a1 = *v9;
          *(_DWORD *)(a1 + 3) = *(_DWORD *)(a1 + 11);
          *(_DWORD *)(a1 + 8) = v12;
          *(unsigned char *)(a1 + 14) = BYTE6(v12);
          *(_WORD *)(a1 + 12) = WORD2(v12);
          if (sub_3591E0(v6, a1 + 8))
          {
            uint64_t v7 = *(void *)v9;
            int v31 = *(_DWORD *)v6;
            *(_DWORD *)(a1 + 11) = *(_DWORD *)(v6 + 3);
            *uint64_t v9 = v31;
LABEL_24:
            *(_DWORD *)uint64_t v6 = v7;
            *(unsigned char *)(v6 + 6) = BYTE6(v7);
            *(_WORD *)(v6 + 4) = WORD2(v7);
          }
        }
      }
      else if (v11)
      {
        uint64_t v26 = *(void *)(a1 + 8);
        int v27 = *(_DWORD *)v6;
        *(_DWORD *)(a1 + 11) = *(_DWORD *)(v6 + 3);
        *uint64_t v9 = v27;
        *(_DWORD *)uint64_t v6 = v26;
        *(unsigned char *)(v6 + 6) = BYTE6(v26);
        *(_WORD *)(v6 + 4) = WORD2(v26);
LABEL_17:
        if (sub_3591E0((uint64_t)v9, a1))
        {
          uint64_t v28 = *(void *)a1;
          *(_DWORD *)a1 = *v9;
          *(_DWORD *)(a1 + 3) = *(_DWORD *)((char *)v9 + 3);
          *(_DWORD *)(a1 + 8) = v28;
          *(unsigned char *)(a1 + 14) = BYTE6(v28);
          *(_WORD *)(a1 + 12) = WORD2(v28);
        }
      }
      return 1;
    case 4:
      sub_32F2E0(a1, a1 + 8, a1 + 16, (uint64_t)(a2 - 1));
      return 1;
    case 5:
      uint64_t v9 = (_DWORD *)(a1 + 8);
      uint64_t v14 = (uint64_t *)(a1 + 16);
      uint64_t v15 = (uint64_t *)(a1 + 24);
      uint64_t v16 = (uint64_t)(a2 - 1);
      sub_32F2E0(a1, a1 + 8, a1 + 16, a1 + 24);
      if (!sub_3591E0(v16, a1 + 24)) {
        return 1;
      }
      uint64_t v17 = *v15;
      int v18 = *(_DWORD *)v16;
      *(_DWORD *)(a1 + 27) = *(_DWORD *)(v16 + 3);
      *(_DWORD *)uint64_t v15 = v18;
      *(_DWORD *)uint64_t v16 = v17;
      *(unsigned char *)(v16 + 6) = BYTE6(v17);
      *(_WORD *)(v16 + 4) = WORD2(v17);
      if (!sub_3591E0(a1 + 24, a1 + 16)) {
        return 1;
      }
      uint64_t v19 = *v14;
      *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
      *(_DWORD *)(a1 + 19) = *(_DWORD *)(a1 + 27);
      *(_DWORD *)uint64_t v15 = v19;
      *(_WORD *)(a1 + 28) = WORD2(v19);
      *(unsigned char *)(a1 + 30) = BYTE6(v19);
      if (!sub_3591E0(a1 + 16, a1 + 8)) {
        return 1;
      }
      uint64_t v20 = *(void *)(a1 + 8);
      *uint64_t v9 = *(_DWORD *)v14;
      *(_DWORD *)(a1 + 11) = *(_DWORD *)(a1 + 19);
      *(_DWORD *)(a1 + 16) = v20;
      *(unsigned char *)(a1 + 22) = BYTE6(v20);
      *(_WORD *)(a1 + 20) = WORD2(v20);
      goto LABEL_17;
    default:
      uint64_t v21 = (_DWORD *)(a1 + 16);
      uint64_t v22 = (_DWORD *)(a1 + 8);
      BOOL v23 = sub_3591E0(a1 + 8, a1);
      BOOL v24 = sub_3591E0(a1 + 16, a1 + 8);
      if (v23)
      {
        uint64_t v25 = *(void *)a1;
        if (v24)
        {
          *(_DWORD *)a1 = *v21;
          *(_DWORD *)(a1 + 3) = *(_DWORD *)(a1 + 19);
          *(_DWORD *)(a1 + 16) = v25;
          *(unsigned char *)(a1 + 22) = BYTE6(v25);
          *(_WORD *)(a1 + 20) = WORD2(v25);
        }
        else
        {
          *(_DWORD *)a1 = *v22;
          *(_DWORD *)(a1 + 3) = *(_DWORD *)(a1 + 11);
          *(_DWORD *)(a1 + 8) = v25;
          *(unsigned char *)(a1 + 14) = BYTE6(v25);
          *(_WORD *)(a1 + 12) = WORD2(v25);
          if (sub_3591E0(a1 + 16, a1 + 8))
          {
            uint64_t v32 = *(void *)v22;
            *uint64_t v22 = *v21;
            *(_DWORD *)(a1 + 11) = *(_DWORD *)(a1 + 19);
            *uint64_t v21 = v32;
            *(_WORD *)(a1 + 20) = WORD2(v32);
            *(unsigned char *)(a1 + 22) = BYTE6(v32);
          }
        }
      }
      else if (v24)
      {
        uint64_t v29 = *(void *)(a1 + 8);
        *uint64_t v22 = *v21;
        *(_DWORD *)(a1 + 11) = *(_DWORD *)(a1 + 19);
        *(_DWORD *)(a1 + 16) = v29;
        *(unsigned char *)(a1 + 22) = BYTE6(v29);
        *(_WORD *)(a1 + 20) = WORD2(v29);
        if (sub_3591E0(a1 + 8, a1))
        {
          uint64_t v30 = *(void *)a1;
          *(_DWORD *)a1 = *v22;
          *(_DWORD *)(a1 + 3) = *(_DWORD *)(a1 + 11);
          *(_DWORD *)(a1 + 8) = v30;
          *(unsigned char *)(a1 + 14) = BYTE6(v30);
          *(_WORD *)(a1 + 12) = WORD2(v30);
        }
      }
      uint64_t v33 = (void *)(a1 + 24);
      if ((void *)(a1 + 24) == a2) {
        return 1;
      }
      uint64_t v34 = 0;
      int v35 = 0;
      break;
  }
  while (1)
  {
    if (sub_3591E0((uint64_t)v33, (uint64_t)v21))
    {
      uint64_t v39 = *v33;
      uint64_t v37 = v34;
      do
      {
        uint64_t v38 = a1 + v37;
        *(_DWORD *)(v38 + 24) = *(_DWORD *)(a1 + v37 + 16);
        *(_DWORD *)(v38 + 27) = *(_DWORD *)(a1 + v37 + 19);
        if (v37 == -16)
        {
          int v36 = (_DWORD *)a1;
          goto LABEL_30;
        }
        v37 -= 8;
      }
      while (sub_3591E0((uint64_t)&v39, v38 + 8));
      int v36 = (_DWORD *)(a1 + v37 + 24);
LABEL_30:
      _DWORD *v36 = v39;
      *(_DWORD *)((char *)v36 + 3) = *(_DWORD *)((char *)&v39 + 3);
      if (++v35 == 8) {
        return v33 + 1 == a2;
      }
    }
    uint64_t v21 = v33;
    v34 += 8;
    if (++v33 == a2) {
      return 1;
    }
  }
}

BOOL sub_32F2E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = sub_3591E0(a2, a1);
  BOOL v9 = sub_3591E0(a3, a2);
  if (v8)
  {
    uint64_t v10 = *(void *)a1;
    if (v9)
    {
      int v11 = *(_DWORD *)a3;
      *(_DWORD *)(a1 + 3) = *(_DWORD *)(a3 + 3);
      *(_DWORD *)a1 = v11;
      *(unsigned char *)(a3 + 6) = BYTE6(v10);
      *(_WORD *)(a3 + 4) = WORD2(v10);
      *(_DWORD *)a3 = v10;
    }
    else
    {
      int v16 = *(_DWORD *)a2;
      *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
      *(_DWORD *)a1 = v16;
      *(unsigned char *)(a2 + 6) = BYTE6(v10);
      *(_WORD *)(a2 + 4) = WORD2(v10);
      *(_DWORD *)a2 = v10;
      if (sub_3591E0(a3, a2))
      {
        uint64_t v17 = *(void *)a2;
        int v18 = *(_DWORD *)a3;
        *(_DWORD *)(a2 + 3) = *(_DWORD *)(a3 + 3);
        *(_DWORD *)a2 = v18;
        *(_DWORD *)a3 = v17;
        *(unsigned char *)(a3 + 6) = BYTE6(v17);
        *(_WORD *)(a3 + 4) = WORD2(v17);
      }
    }
  }
  else if (v9)
  {
    uint64_t v12 = *(void *)a2;
    int v13 = *(_DWORD *)a3;
    *(_DWORD *)(a2 + 3) = *(_DWORD *)(a3 + 3);
    *(_DWORD *)a2 = v13;
    *(_DWORD *)a3 = v12;
    *(unsigned char *)(a3 + 6) = BYTE6(v12);
    *(_WORD *)(a3 + 4) = WORD2(v12);
    if (sub_3591E0(a2, a1))
    {
      uint64_t v14 = *(void *)a1;
      int v15 = *(_DWORD *)a2;
      *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
      *(_DWORD *)a1 = v15;
      *(_DWORD *)a2 = v14;
      *(unsigned char *)(a2 + 6) = BYTE6(v14);
      *(_WORD *)(a2 + 4) = WORD2(v14);
    }
  }
  BOOL result = sub_3591E0(a4, a3);
  if (result)
  {
    uint64_t v20 = *(void *)a3;
    int v21 = *(_DWORD *)a4;
    *(_DWORD *)(a3 + 3) = *(_DWORD *)(a4 + 3);
    *(_DWORD *)a3 = v21;
    *(_DWORD *)a4 = v20;
    *(unsigned char *)(a4 + 6) = BYTE6(v20);
    *(_WORD *)(a4 + 4) = WORD2(v20);
    BOOL result = sub_3591E0(a3, a2);
    if (result)
    {
      uint64_t v22 = *(void *)a2;
      int v23 = *(_DWORD *)a3;
      *(_DWORD *)(a2 + 3) = *(_DWORD *)(a3 + 3);
      *(_DWORD *)a2 = v23;
      *(_DWORD *)a3 = v22;
      *(unsigned char *)(a3 + 6) = BYTE6(v22);
      *(_WORD *)(a3 + 4) = WORD2(v22);
      BOOL result = sub_3591E0(a2, a1);
      if (result)
      {
        uint64_t v24 = *(void *)a1;
        int v25 = *(_DWORD *)a2;
        *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
        *(_DWORD *)a1 = v25;
        *(_DWORD *)a2 = v24;
        *(unsigned char *)(a2 + 6) = BYTE6(v24);
        *(_WORD *)(a2 + 4) = WORD2(v24);
      }
    }
  }
  return result;
}

uint64_t sub_32F4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v5 = a2;
  uint64_t v7 = a2 - a1;
  uint64_t v8 = (a2 - a1) >> 3;
  if (a2 - a1 >= 9)
  {
    unint64_t v10 = (unint64_t)(v8 - 2) >> 1;
    unint64_t v11 = v10 + 1;
    uint64_t v12 = a1 + 8 * v10;
    do
    {
      sub_32F8A0(a1, a4, v8, v12);
      v12 -= 8;
      --v11;
    }
    while (v11);
  }
  uint64_t v13 = v5;
  if (v5 != a3)
  {
    if (v7 < 16)
    {
      uint64_t v14 = v5;
      do
      {
        if (sub_3591E0(v14, a1))
        {
          uint64_t v15 = *(void *)v14;
          int v16 = *(_DWORD *)a1;
          *(_DWORD *)(v14 + 3) = *(_DWORD *)(a1 + 3);
          *(_DWORD *)uint64_t v14 = v16;
          *(_DWORD *)a1 = v15;
          *(unsigned char *)(a1 + 6) = BYTE6(v15);
          *(_WORD *)(a1 + 4) = WORD2(v15);
        }
        v14 += 8;
      }
      while (v14 != a3);
LABEL_29:
      uint64_t v13 = a3;
      goto LABEL_30;
    }
    uint64_t v17 = a1 + 8;
    uint64_t v18 = v5;
    uint64_t v45 = v7;
    uint64_t v46 = a3;
    while (1)
    {
      if (sub_3591E0(v18, a1))
      {
        uint64_t v20 = *(void *)v18;
        int v21 = *(_DWORD *)a1;
        *(_DWORD *)(v18 + 3) = *(_DWORD *)(a1 + 3);
        *(_DWORD *)uint64_t v18 = v21;
        *(_DWORD *)a1 = v20;
        *(unsigned char *)(a1 + 6) = BYTE6(v20);
        *(_WORD *)(a1 + 4) = WORD2(v20);
        if (v7 == 16)
        {
          uint64_t v22 = (_DWORD *)v17;
          int64_t v23 = 1;
          if (!sub_3591E0(v17, a1)) {
            goto LABEL_22;
          }
        }
        else
        {
          uint64_t v22 = (_DWORD *)(a1 + 16);
          if (sub_3591E0(v17, a1 + 16))
          {
            int64_t v23 = 2;
          }
          else
          {
            uint64_t v22 = (_DWORD *)v17;
            int64_t v23 = 1;
          }
          if (!sub_3591E0((uint64_t)v22, a1))
          {
LABEL_22:
            uint64_t v48 = *(void *)a1;
            uint64_t v24 = (_DWORD *)a1;
            do
            {
              uint64_t v26 = v22;
              int v27 = *v22;
              *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)v22 + 3);
              *uint64_t v24 = v27;
              if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v23) {
                break;
              }
              uint64_t v28 = (2 * v23) | 1;
              uint64_t v22 = (_DWORD *)(a1 + 8 * v28);
              if (2 * v23 + 2 < v8 && sub_3591E0(a1 + 8 * v28, (uint64_t)(v22 + 2)))
              {
                v22 += 2;
                uint64_t v28 = 2 * v23 + 2;
              }
              BOOL v25 = sub_3591E0((uint64_t)v22, (uint64_t)&v48);
              uint64_t v24 = v26;
              int64_t v23 = v28;
            }
            while (!v25);
            int v19 = v48;
            *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)((char *)&v48 + 3);
            *uint64_t v26 = v19;
            uint64_t v7 = v45;
            a3 = v46;
            uint64_t v17 = a1 + 8;
          }
        }
      }
      v18 += 8;
      if (v18 == a3) {
        goto LABEL_29;
      }
    }
  }
LABEL_30:
  if (v7 < 9) {
    return v13;
  }
  uint64_t v47 = v13;
  uint64_t v29 = (unint64_t)v7 >> 3;
  do
  {
    uint64_t v31 = 0;
    uint64_t v32 = *(void *)a1;
    uint64_t v33 = (_DWORD *)a1;
    do
    {
      uint64_t v35 = (uint64_t)&v33[2 * v31 + 2];
      uint64_t v36 = (2 * v31) | 1;
      uint64_t v37 = 2 * v31 + 2;
      if (v37 < v29 && sub_3591E0((uint64_t)&v33[2 * v31 + 2], (uint64_t)&v33[2 * v31 + 4]))
      {
        v35 += 8;
        uint64_t v36 = v37;
      }
      int v34 = *(_DWORD *)v35;
      *(_DWORD *)((char *)v33 + 3) = *(_DWORD *)(v35 + 3);
      *uint64_t v33 = v34;
      uint64_t v33 = (_DWORD *)v35;
      uint64_t v31 = v36;
    }
    while (v36 <= (uint64_t)((unint64_t)(v29 - 2) >> 1));
    v5 -= 8;
    if (v35 == v5)
    {
      *(_DWORD *)uint64_t v35 = v32;
      *(unsigned char *)(v35 + 6) = BYTE6(v32);
      *(_WORD *)(v35 + 4) = WORD2(v32);
    }
    else
    {
      int v38 = *(_DWORD *)v5;
      *(_DWORD *)(v35 + 3) = *(_DWORD *)(v5 + 3);
      *(_DWORD *)uint64_t v35 = v38;
      *(unsigned char *)(v5 + 6) = BYTE6(v32);
      *(_WORD *)(v5 + 4) = WORD2(v32);
      *(_DWORD *)uint64_t v5 = v32;
      uint64_t v39 = v35 - a1 + 8;
      if (v39 >= 9)
      {
        unint64_t v40 = (((unint64_t)v39 >> 3) - 2) >> 1;
        int v41 = (_DWORD *)(a1 + 8 * v40);
        if (sub_3591E0((uint64_t)v41, v35))
        {
          uint64_t v48 = *(void *)v35;
          do
          {
            long long v42 = v41;
            int v43 = *v41;
            *(_DWORD *)(v35 + 3) = *(_DWORD *)((char *)v41 + 3);
            *(_DWORD *)uint64_t v35 = v43;
            if (!v40) {
              break;
            }
            unint64_t v40 = (v40 - 1) >> 1;
            int v41 = (_DWORD *)(a1 + 8 * v40);
            uint64_t v35 = (uint64_t)v42;
          }
          while (sub_3591E0((uint64_t)v41, (uint64_t)&v48));
          *long long v42 = v48;
          *(_DWORD *)((char *)v42 + 3) = *(_DWORD *)((char *)&v48 + 3);
        }
      }
    }
  }
  while (v29-- > 2);
  return v47;
}

BOOL sub_32F8A0(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    v20[9] = v4;
    v20[10] = v5;
    uint64_t v7 = a4;
    BOOL v8 = result;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (a4 - result) >> 3)
    {
      uint64_t v11 = (a4 - result) >> 2;
      uint64_t v12 = v11 + 1;
      uint64_t v13 = (_DWORD *)(result + 8 * (v11 + 1));
      uint64_t v14 = v11 + 2;
      if (v11 + 2 < a3 && sub_3591E0(result + 8 * (v11 + 1), (uint64_t)(v13 + 2)))
      {
        v13 += 2;
        uint64_t v12 = v14;
      }
      BOOL result = sub_3591E0((uint64_t)v13, v7);
      if (!result)
      {
        v20[0] = *(void *)v7;
        do
        {
          uint64_t v15 = v13;
          int v16 = *v13;
          *(_DWORD *)(v7 + 3) = *(_DWORD *)((char *)v13 + 3);
          *(_DWORD *)uint64_t v7 = v16;
          if (v9 < v12) {
            break;
          }
          uint64_t v17 = (2 * v12) | 1;
          uint64_t v13 = (_DWORD *)(v8 + 8 * v17);
          uint64_t v18 = 2 * v12 + 2;
          if (v18 < a3 && sub_3591E0(v8 + 8 * v17, (uint64_t)(v13 + 2)))
          {
            v13 += 2;
            uint64_t v17 = v18;
          }
          BOOL result = sub_3591E0((uint64_t)v13, (uint64_t)v20);
          uint64_t v7 = (uint64_t)v15;
          uint64_t v12 = v17;
        }
        while (!result);
        int v19 = v20[0];
        *(_DWORD *)((char *)v15 + 3) = *(_DWORD *)((char *)v20 + 3);
        *uint64_t v15 = v19;
      }
    }
  }
  return result;
}

int64_t sub_32F9D4(int64_t result, long long *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unint64_t v10 = a2 - 2;
  unint64_t j = v9;
  while (1)
  {
    unint64_t v9 = j;
    uint64_t v12 = (uint64_t)a2 - j;
    unint64_t v13 = (uint64_t)((uint64_t)a2 - j) >> 5;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v80 = a2 - 2;
          uint64_t v81 = *((void *)a2 - 4);
          if (v81 < *(void *)j
            || *(void *)j >= v81
            && ((unsigned int v82 = *(_DWORD *)(j + 8), v83 = *((_DWORD *)a2 - 6), v83 < v82)
             || v82 >= v83
             && ((uint64_t v84 = *((void *)a2 - 2), v85 = *(void *)(j + 16), v84 < v85)
              || v85 >= v84 && *((void *)a2 - 1) < *(void *)(j + 24))))
          {
            long long v187 = *(_OWORD *)j;
            long long v192 = *(_OWORD *)(j + 16);
            long long v86 = *(a2 - 1);
            *(_OWORD *)unint64_t j = *v80;
            *(_OWORD *)(j + 16) = v86;
            *unint64_t v80 = v187;
            *(a2 - 1) = v192;
          }
          break;
        case 3uLL:
          BOOL result = (int64_t)sub_330A44((long long *)j, (uint64_t *)(j + 32), a2 - 2);
          break;
        case 4uLL:
          BOOL result = (int64_t)sub_330F74(j, (long long *)(j + 32), (long long *)(j + 64), a2 - 2);
          break;
        case 5uLL:
          BOOL result = (int64_t)sub_33083C(j, j + 32, j + 64, j + 96, (uint64_t)(a2 - 2));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 767) {
      break;
    }
    if (!a3)
    {
      if ((long long *)j != a2)
      {
        int64_t v108 = (v13 - 2) >> 1;
        int64_t v109 = v108;
        while (2)
        {
          int64_t v111 = v109;
          if (v108 >= v109)
          {
            uint64_t v112 = (2 * v109) | 1;
            uint64_t v110 = (_OWORD *)(j + 32 * v112);
            if (2 * v111 + 2 < (uint64_t)v13)
            {
              uint64_t v113 = *((void *)v110 + 4);
              if (*(void *)v110 < v113
                || v113 >= *(void *)v110
                && ((v114 = *((_DWORD *)v110 + 10), unsigned int v115 = *((_DWORD *)v110 + 2), v115 < v114)
                 || v114 >= v115
                 && ((uint64_t v116 = *((void *)v110 + 2), v117 = *((void *)v110 + 6), v116 < v117)
                  || v117 >= v116 && *((void *)v110 + 3) < *((void *)v110 + 7))))
              {
                v110 += 2;
                uint64_t v112 = 2 * v111 + 2;
              }
            }
            unint64_t v118 = j + 32 * v111;
            uint64_t v119 = *(void *)v118;
            BOOL result = *(void *)v110;
            if (*(void *)v110 >= *(void *)v118)
            {
              unint64_t v120 = j + 32 * v111;
              uint64_t v121 = (uint64_t *)(v120 + 16);
              long long v122 = (int64_t *)(v120 + 24);
              unsigned int v123 = *(_DWORD *)(v120 + 8);
              if (v119 >= result)
              {
                BOOL result = *((unsigned int *)v110 + 2);
                if (result >= v123)
                {
                  uint64_t v124 = *v121;
                  if (v123 < result) {
                    goto LABEL_207;
                  }
                  BOOL result = *((void *)v110 + 2);
                  if (result >= v124)
                  {
                    if (v124 < result) {
                      goto LABEL_207;
                    }
                    BOOL result = *((void *)v110 + 3);
                    if (result >= *v122) {
                      goto LABEL_207;
                    }
                  }
                }
              }
              else
              {
                uint64_t v124 = *v121;
LABEL_207:
                BOOL result = *(unsigned int *)(v118 + 12);
                int64_t v125 = *v122;
                long long v126 = v110[1];
                *(_OWORD *)unint64_t v118 = *v110;
                *(_OWORD *)(v118 + 16) = v126;
                while (1)
                {
                  if (v108 < v112) {
                    goto LABEL_192;
                  }
                  long long v128 = v110;
                  uint64_t v129 = 2 * v112;
                  uint64_t v112 = (2 * v112) | 1;
                  uint64_t v110 = (_OWORD *)(j + 32 * v112);
                  uint64_t v130 = v129 + 2;
                  if (v130 < (uint64_t)v13)
                  {
                    uint64_t v131 = *((void *)v110 + 4);
                    if (*(void *)v110 < v131
                      || v131 >= *(void *)v110
                      && ((unsigned int v134 = *((_DWORD *)v110 + 10), v135 = *((_DWORD *)v110 + 2), v135 < v134)
                       || v134 >= v135
                       && ((uint64_t v136 = *((void *)v110 + 2), v137 = *((void *)v110 + 6), v136 < v137)
                        || v137 >= v136 && *((void *)v110 + 3) < *((void *)v110 + 7))))
                    {
                      v110 += 2;
                      uint64_t v112 = v130;
                    }
                  }
                  if (*(void *)v110 < v119) {
                    break;
                  }
                  if (v119 >= *(void *)v110)
                  {
                    unsigned int v132 = *((_DWORD *)v110 + 2);
                    if (v132 < v123) {
                      break;
                    }
                    if (v123 >= v132)
                    {
                      uint64_t v133 = *((void *)v110 + 2);
                      if (v133 < v124 || v124 >= v133 && *((void *)v110 + 3) < v125) {
                        break;
                      }
                    }
                  }
                  long long v127 = v110[1];
                  _OWORD *v128 = *v110;
                  v128[1] = v127;
                }
                uint64_t v110 = v128;
LABEL_192:
                *(void *)uint64_t v110 = v119;
                *((_DWORD *)v110 + 2) = v123;
                *((_DWORD *)v110 + 3) = result;
                *((void *)v110 + 2) = v124;
                *((void *)v110 + 3) = v125;
              }
            }
          }
          int64_t v109 = v111 - 1;
          if (v111) {
            continue;
          }
          break;
        }
        uint64_t v138 = (unint64_t)v12 >> 5;
        while (2)
        {
          uint64_t v140 = 0;
          long long v188 = *(_OWORD *)j;
          long long v193 = *(_OWORD *)(j + 16);
          unint64_t v141 = j;
          do
          {
            long long v143 = (_OWORD *)v141;
            v141 += 32 * (v140 + 1);
            uint64_t v144 = 2 * v140;
            uint64_t v140 = (2 * v140) | 1;
            uint64_t v145 = v144 + 2;
            if (v145 < v138)
            {
              uint64_t v146 = *(void *)(v141 + 32);
              if (*(void *)v141 < v146
                || v146 >= *(void *)v141
                && ((v147 = *(_DWORD *)(v141 + 40), unsigned int v148 = *(_DWORD *)(v141 + 8), v148 < v147)
                 || v147 >= v148
                 && ((v149 = *(void *)(v141 + 16), uint64_t v150 = *(void *)(v141 + 48), v149 < v150)
                  || v150 >= v149 && *(void *)(v141 + 24) < *(void *)(v141 + 56))))
              {
                v141 += 32;
                uint64_t v140 = v145;
              }
            }
            long long v142 = *(_OWORD *)(v141 + 16);
            *long long v143 = *(_OWORD *)v141;
            v143[1] = v142;
          }
          while (v140 <= (uint64_t)((unint64_t)(v138 - 2) >> 1));
          a2 -= 2;
          if ((long long *)v141 == a2)
          {
            *(_OWORD *)unint64_t v141 = v188;
            *(_OWORD *)(v141 + 16) = v193;
            goto LABEL_235;
          }
          long long v151 = a2[1];
          *(_OWORD *)unint64_t v141 = *a2;
          *(_OWORD *)(v141 + 16) = v151;
          *a2 = v188;
          a2[1] = v193;
          uint64_t v152 = v141 - j + 32;
          if (v152 >= 33)
          {
            unint64_t v153 = ((unint64_t)v152 >> 5) - 2;
            unint64_t v154 = v153 >> 1;
            unint64_t v155 = j + 32 * (v153 >> 1);
            uint64_t v156 = *(void *)v141;
            if (*(void *)v155 < *(void *)v141)
            {
              unsigned int v157 = *(_DWORD *)(v141 + 8);
              goto LABEL_259;
            }
            if (v156 >= *(void *)v155)
            {
              unsigned int v157 = *(_DWORD *)(v141 + 8);
              unsigned int v158 = *(_DWORD *)(v155 + 8);
              if (v158 < v157
                || v157 >= v158
                && ((uint64_t v159 = *(void *)(v155 + 16), v160 = *(void *)(v141 + 16), v159 < v160)
                 || v160 >= v159 && *(void *)(v155 + 24) < *(void *)(v141 + 24)))
              {
LABEL_259:
                int v161 = *(_DWORD *)(v141 + 12);
                uint64_t v162 = *(void *)(v141 + 16);
                uint64_t v163 = *(void *)(v141 + 24);
                long long v164 = *(_OWORD *)(v155 + 16);
                *(_OWORD *)unint64_t v141 = *(_OWORD *)v155;
                *(_OWORD *)(v141 + 16) = v164;
                if (v153 >= 2)
                {
                  while (1)
                  {
                    unint64_t v167 = v154 - 1;
                    unint64_t v154 = (v154 - 1) >> 1;
                    unint64_t v165 = j + 32 * v154;
                    BOOL result = v165 + 24;
                    if (*(void *)v165 >= v156)
                    {
                      if (v156 < *(void *)v165) {
                        break;
                      }
                      unsigned int v168 = *(_DWORD *)(v165 + 8);
                      if (v168 >= v157)
                      {
                        if (v157 < v168) {
                          break;
                        }
                        uint64_t v169 = *(void *)(v165 + 16);
                        if (v169 >= v162)
                        {
                          if (v162 < v169) {
                            break;
                          }
                          BOOL result = *(void *)result;
                          if (result >= v163) {
                            break;
                          }
                        }
                      }
                    }
                    long long v166 = *(_OWORD *)(v165 + 16);
                    *(_OWORD *)unint64_t v155 = *(_OWORD *)v165;
                    *(_OWORD *)(v155 + 16) = v166;
                    unint64_t v155 = j + 32 * v154;
                    if (v167 <= 1) {
                      goto LABEL_261;
                    }
                  }
                }
                unint64_t v165 = v155;
LABEL_261:
                *(void *)unint64_t v165 = v156;
                *(_DWORD *)(v165 + 8) = v157;
                *(_DWORD *)(v165 + 12) = v161;
                *(void *)(v165 + 16) = v162;
                *(void *)(v165 + 24) = v163;
              }
            }
          }
LABEL_235:
          if (v138-- <= 2) {
            return result;
          }
          continue;
        }
      }
      return result;
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = j + 32 * (v13 >> 1);
    if ((unint64_t)v12 > 0x1000)
    {
      sub_330A44((long long *)v9, (uint64_t *)(v9 + 32 * (v13 >> 1)), a2 - 2);
      uint64_t v16 = 32 * v14;
      uint64_t v17 = (uint64_t *)(32 * v14 + v9 - 32);
      sub_330A44((long long *)(v9 + 32), v17, a2 - 4);
      sub_330A44((long long *)(v9 + 64), (uint64_t *)(v9 + 32 + v16), a2 - 6);
      BOOL result = (int64_t)sub_330A44((long long *)v17, (uint64_t *)v15, (long long *)(v9 + 32 + v16));
      long long v184 = *(_OWORD *)v9;
      long long v189 = *(_OWORD *)(v9 + 16);
      long long v18 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v15;
      *(_OWORD *)(v9 + 16) = v18;
      *(_OWORD *)unint64_t v15 = v184;
      *(_OWORD *)(v15 + 16) = v189;
      --a3;
      uint64_t v19 = *(void *)v9;
      if (a4) {
        goto LABEL_19;
      }
    }
    else
    {
      BOOL result = (int64_t)sub_330A44((long long *)(v9 + 32 * (v13 >> 1)), (uint64_t *)v9, a2 - 2);
      --a3;
      uint64_t v19 = *(void *)v9;
      if (a4) {
        goto LABEL_19;
      }
    }
    uint64_t v20 = *(void *)(v9 - 32);
    if (v20 < v19)
    {
LABEL_19:
      uint64_t v25 = 0;
      uint64_t v26 = *(void *)(v9 + 8);
      uint64_t v27 = *(void *)(v9 + 16);
      uint64_t v28 = *(void *)(v9 + 24);
      while (1)
      {
        uint64_t v29 = v9 + v25;
        uint64_t v30 = *(void *)(v9 + v25 + 32);
        if (v30 >= v19)
        {
          if (v19 < v30) {
            break;
          }
          unsigned int v31 = *(_DWORD *)(v29 + 40);
          if (v31 >= v26)
          {
            if (v26 < v31) {
              break;
            }
            uint64_t v32 = *(void *)(v29 + 48);
            if (v32 >= v27 && (v27 < v32 || *(void *)(v29 + 56) >= v28)) {
              break;
            }
          }
        }
        v25 += 32;
      }
      unint64_t v33 = v9 + v25 + 32;
      if (v25)
      {
        uint64_t v34 = *(void *)v10;
        for (unint64_t i = a2 - 2; v34 >= v19; i -= 2)
        {
          if (v19 >= v34)
          {
            unsigned int v37 = *((_DWORD *)i + 2);
            if (v37 < v26) {
              break;
            }
            if (v26 >= v37)
            {
              uint64_t v38 = *((void *)i + 2);
              if (v38 < v27 || v27 >= v38 && *((void *)i + 3) < v28) {
                break;
              }
            }
          }
          uint64_t v36 = *((void *)i - 4);
          uint64_t v34 = v36;
        }
      }
      else
      {
        unint64_t i = a2;
        if (v33 < (unint64_t)a2)
        {
          uint64_t v39 = *(void *)v10;
          unint64_t i = a2 - 2;
          if (*(void *)v10 >= v19)
          {
            unint64_t i = a2 - 2;
            do
            {
              if (v19 < v39) {
                goto LABEL_72;
              }
              unsigned int v52 = *((_DWORD *)i + 2);
              if (v52 < v26) {
                break;
              }
              if (v26 < v52) {
                goto LABEL_72;
              }
              uint64_t v53 = *((void *)i + 2);
              if (v53 < v27) {
                break;
              }
              if (v27 >= v53)
              {
                if (v33 >= (unint64_t)i || *((void *)i + 3) < v28) {
                  break;
                }
              }
              else
              {
LABEL_72:
                if (v33 >= (unint64_t)i) {
                  break;
                }
              }
              uint64_t v54 = *((void *)i - 4);
              i -= 2;
              uint64_t v39 = v54;
            }
            while (v54 >= v19);
          }
        }
      }
      unint64_t j = v33;
      if (v33 < (unint64_t)i)
      {
        unint64_t v40 = (unint64_t)i;
        do
        {
          long long v185 = *(_OWORD *)j;
          long long v190 = *(_OWORD *)(j + 16);
          long long v41 = *(_OWORD *)(v40 + 16);
          *(_OWORD *)unint64_t j = *(_OWORD *)v40;
          *(_OWORD *)(j + 16) = v41;
          *(_OWORD *)unint64_t v40 = v185;
          *(_OWORD *)(v40 + 16) = v190;
          while (1)
          {
            do
            {
              uint64_t v43 = *(void *)(j + 32);
              j += 32;
              uint64_t v42 = v43;
            }
            while (v43 < v19);
            if (v19 < v42) {
              break;
            }
            unsigned int v44 = *(_DWORD *)(j + 8);
            if (v44 >= v26)
            {
              if (v26 < v44) {
                break;
              }
              uint64_t v45 = *(void *)(j + 16);
              if (v45 >= v27 && (v27 < v45 || *(void *)(j + 24) >= v28)) {
                break;
              }
            }
          }
          while (1)
          {
            uint64_t v47 = *(void *)(v40 - 32);
            v40 -= 32;
            uint64_t v46 = v47;
            if (v47 < v19) {
              break;
            }
            if (v19 >= v46)
            {
              unsigned int v48 = *(_DWORD *)(v40 + 8);
              if (v48 < v26) {
                break;
              }
              if (v26 >= v48)
              {
                uint64_t v49 = *(void *)(v40 + 16);
                if (v49 < v27 || v27 >= v49 && *(void *)(v40 + 24) < v28) {
                  break;
                }
              }
            }
          }
        }
        while (j < v40);
      }
      if (j - 32 != v9)
      {
        long long v50 = *(_OWORD *)(j - 16);
        *(_OWORD *)unint64_t v9 = *(_OWORD *)(j - 32);
        *(_OWORD *)(v9 + 16) = v50;
      }
      *(void *)(j - 32) = v19;
      *(void *)(j - 24) = v26;
      *(void *)(j - 16) = v27;
      *(void *)(j - 8) = v28;
      if (v33 < (unint64_t)i) {
        goto LABEL_65;
      }
      BOOL v51 = sub_330C68(v9, j - 32);
      BOOL result = sub_330C68(j, (uint64_t)a2);
      if (result)
      {
        a2 = (long long *)(j - 32);
        if (v51) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v51)
      {
LABEL_65:
        BOOL result = sub_32F9D4(v9, j - 32, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      unsigned int v21 = *(_DWORD *)(v9 + 8);
      if (v19 < v20)
      {
        uint64_t v23 = *(void *)(v9 + 16);
      }
      else
      {
        unsigned int v22 = *(_DWORD *)(v9 - 24);
        if (v22 < v21) {
          goto LABEL_19;
        }
        uint64_t v23 = *(void *)(v9 + 16);
        if (v21 >= v22)
        {
          uint64_t v24 = *(void *)(v9 - 16);
          if (v24 < v23 || v23 >= v24 && *(void *)(v9 - 8) < *(void *)(v9 + 24)) {
            goto LABEL_19;
          }
        }
      }
      int v55 = *(_DWORD *)(v9 + 12);
      uint64_t v56 = *(void *)(v9 + 24);
      uint64_t v57 = *(void *)v10;
      if (v19 < *(void *)v10
        || v57 >= v19
        && ((unsigned int v78 = *((_DWORD *)a2 - 6), v21 < v78)
         || v78 >= v21 && ((uint64_t v79 = *((void *)a2 - 2), v23 < v79) || v79 >= v23 && v56 < *((void *)a2 - 1))))
      {
        unint64_t j = v9;
        while (1)
        {
          uint64_t v59 = *(void *)(j + 32);
          j += 32;
          uint64_t v58 = v59;
          if (v19 < v59) {
            break;
          }
          if (v58 >= v19)
          {
            unsigned int v60 = *(_DWORD *)(j + 8);
            if (v21 < v60) {
              break;
            }
            if (v60 >= v21)
            {
              uint64_t v61 = *(void *)(j + 16);
              if (v23 < v61 || v61 >= v23 && v56 < *(void *)(j + 24)) {
                break;
              }
            }
          }
        }
      }
      else
      {
        for (unint64_t j = v9 + 32; j < (unint64_t)a2; j += 32)
        {
          if (v19 < *(void *)j) {
            break;
          }
          if (*(void *)j >= v19)
          {
            unsigned int v62 = *(_DWORD *)(j + 8);
            if (v21 < v62) {
              break;
            }
            if (v62 >= v21)
            {
              uint64_t v63 = *(void *)(j + 16);
              if (v23 < v63 || v63 >= v23 && v56 < *(void *)(j + 24)) {
                break;
              }
            }
          }
        }
      }
      k = a2;
      if (j < (unint64_t)a2)
      {
        for (k = a2 - 2; ; k -= 2)
        {
          if (v19 >= v57)
          {
            if (v57 < v19) {
              break;
            }
            unsigned int v66 = *((_DWORD *)k + 2);
            if (v21 >= v66)
            {
              if (v66 < v21) {
                break;
              }
              uint64_t v67 = *((void *)k + 2);
              if (v23 >= v67 && (v67 < v23 || v56 >= *((void *)k + 3))) {
                break;
              }
            }
          }
          uint64_t v65 = *((void *)k - 4);
          uint64_t v57 = v65;
        }
      }
      while (j < (unint64_t)k)
      {
        long long v186 = *(_OWORD *)j;
        long long v191 = *(_OWORD *)(j + 16);
        long long v68 = k[1];
        *(_OWORD *)unint64_t j = *k;
        *(_OWORD *)(j + 16) = v68;
        long long *k = v186;
        k[1] = v191;
        while (1)
        {
          uint64_t v70 = *(void *)(j + 32);
          j += 32;
          uint64_t v69 = v70;
          if (v19 < v70) {
            break;
          }
          if (v69 >= v19)
          {
            unsigned int v71 = *(_DWORD *)(j + 8);
            if (v21 < v71) {
              break;
            }
            if (v71 >= v21)
            {
              uint64_t v72 = *(void *)(j + 16);
              if (v23 < v72 || v72 >= v23 && v56 < *(void *)(j + 24)) {
                break;
              }
            }
          }
        }
        while (1)
        {
          do
          {
            uint64_t v74 = *((void *)k - 4);
            k -= 2;
            uint64_t v73 = v74;
          }
          while (v19 < v74);
          if (v73 < v19) {
            break;
          }
          unsigned int v75 = *((_DWORD *)k + 2);
          if (v21 >= v75)
          {
            if (v75 < v21) {
              break;
            }
            uint64_t v76 = *((void *)k + 2);
            if (v23 >= v76 && (v76 < v23 || v56 >= *((void *)k + 3))) {
              break;
            }
          }
        }
      }
      BOOL v4 = j - 32 >= v9;
      BOOL v5 = j - 32 == v9;
      if (j - 32 != v9)
      {
        long long v77 = *(_OWORD *)(j - 16);
        *(_OWORD *)unint64_t v9 = *(_OWORD *)(j - 32);
        *(_OWORD *)(v9 + 16) = v77;
      }
      a4 = 0;
      *(void *)(j - 32) = v19;
      *(_DWORD *)(j - 24) = v21;
      *(_DWORD *)(j - 20) = v55;
      *(void *)(j - 16) = v23;
      *(void *)(j - 8) = v56;
    }
  }
  BOOL v87 = (long long *)(j + 32);
  BOOL v89 = (long long *)j == a2 || v87 == a2;
  if (a4)
  {
    if (v89) {
      return result;
    }
    uint64_t v90 = 0;
    BOOL v91 = (_OWORD *)j;
LABEL_168:
    int v93 = v91;
    BOOL v91 = v87;
    uint64_t v94 = *((void *)v93 + 4);
    if (v94 >= *(void *)v93)
    {
      if (*(void *)v93 < v94) {
        goto LABEL_167;
      }
      unsigned int v96 = *((_DWORD *)v93 + 2);
      unsigned int v95 = *((_DWORD *)v93 + 10);
      if (v95 >= v96)
      {
        if (v96 < v95) {
          goto LABEL_167;
        }
        uint64_t v106 = *((void *)v93 + 6);
        uint64_t v107 = *((void *)v93 + 2);
        if (v106 >= v107 && (v107 < v106 || *((void *)v93 + 7) >= *((void *)v93 + 3))) {
          goto LABEL_167;
        }
      }
    }
    else
    {
      unsigned int v95 = *((_DWORD *)v93 + 10);
    }
    int v97 = *((_DWORD *)v93 + 11);
    uint64_t v98 = *((void *)v93 + 6);
    uint64_t v99 = *((void *)v93 + 7);
    long long v100 = v93[1];
    _OWORD *v91 = *v93;
    v91[1] = v100;
    unint64_t v92 = j;
    if (v93 == (_OWORD *)j) {
      goto LABEL_166;
    }
    uint64_t v101 = v90;
    while (1)
    {
      uint64_t v103 = (_OWORD *)(j + v101);
      BOOL result = j + v101 - 32;
      if (v94 >= *(void *)result)
      {
        if (*(void *)result < v94) {
          goto LABEL_182;
        }
        unsigned int v104 = *((_DWORD *)v103 - 6);
        if (v95 >= v104)
        {
          if (v104 < v95) {
            goto LABEL_182;
          }
          uint64_t v105 = *((void *)v103 - 2);
          if (v98 >= v105)
          {
            if (v105 < v98)
            {
              unint64_t v92 = j + v101;
LABEL_166:
              *(void *)unint64_t v92 = v94;
              *(_DWORD *)(v92 + 8) = v95;
              *(_DWORD *)(v92 + 12) = v97;
              *(void *)(v92 + 16) = v98;
              *(void *)(v92 + 24) = v99;
LABEL_167:
              BOOL v87 = v91 + 2;
              v90 += 32;
              if (v91 + 2 == a2) {
                return result;
              }
              goto LABEL_168;
            }
            if (v99 >= *((void *)v103 - 1))
            {
LABEL_182:
              unint64_t v92 = (unint64_t)v93;
              goto LABEL_166;
            }
          }
        }
      }
      v93 -= 2;
      long long v102 = *(_OWORD *)(j + v101 - 16);
      *uint64_t v103 = *(_OWORD *)result;
      v103[1] = v102;
      v101 -= 32;
      if (!v101)
      {
        unint64_t v92 = j;
        goto LABEL_166;
      }
    }
  }
  if (!v89)
  {
    while (1)
    {
      unint64_t v170 = v9;
      unint64_t v9 = (unint64_t)v87;
      uint64_t v171 = *(void *)(v170 + 32);
      if (v171 < *(void *)v170) {
        break;
      }
      if (*(void *)v170 >= v171)
      {
        unsigned int v173 = *(_DWORD *)(v170 + 8);
        unsigned int v172 = *(_DWORD *)(v170 + 40);
        if (v172 < v173) {
          goto LABEL_279;
        }
        if (v173 >= v172)
        {
          uint64_t v182 = *(void *)(v170 + 48);
          uint64_t v183 = *(void *)(v170 + 16);
          if (v182 < v183 || v183 >= v182 && *(void *)(v170 + 56) < *(void *)(v170 + 24)) {
            goto LABEL_279;
          }
        }
      }
LABEL_274:
      BOOL v87 = (long long *)(v9 + 32);
      if ((long long *)(v9 + 32) == a2) {
        return result;
      }
    }
    unsigned int v172 = *(_DWORD *)(v170 + 40);
LABEL_279:
    int v174 = *(_DWORD *)(v170 + 44);
    long long v175 = (_OWORD *)v9;
    uint64_t v177 = *(void *)(v170 + 48);
    uint64_t v176 = *(void *)(v170 + 56);
    while (1)
    {
      long long v178 = *(v175 - 1);
      _OWORD *v175 = *(v175 - 2);
      v175[1] = v178;
      uint64_t v179 = *((void *)v175 - 8);
      if (v171 >= v179)
      {
        if (v179 < v171) {
          break;
        }
        unsigned int v180 = *((_DWORD *)v175 - 14);
        if (v172 >= v180)
        {
          if (v180 < v172) {
            break;
          }
          uint64_t v181 = *((void *)v175 - 6);
          if (v177 >= v181 && (v181 < v177 || v176 >= *((void *)v175 - 5))) {
            break;
          }
        }
      }
      v175 -= 2;
    }
    *((void *)v175 - 4) = v171;
    *((_DWORD *)v175 - 6) = v172;
    *((_DWORD *)v175 - 5) = v174;
    *((void *)v175 - 2) = v177;
    *((void *)v175 - 1) = v176;
    goto LABEL_274;
  }
  return result;
}

long long *sub_33083C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL result = sub_330F74(a1, (long long *)a2, (long long *)a3, (long long *)a4);
  if (*(void *)a5 < *(void *)a4
    || *(void *)a4 >= *(void *)a5
    && ((unsigned int v11 = *(_DWORD *)(a4 + 8), v12 = *(_DWORD *)(a5 + 8), v12 < v11)
     || v11 >= v12
     && ((uint64_t v13 = *(void *)(a5 + 16), v14 = *(void *)(a4 + 16), v13 < v14)
      || v14 >= v13 && *(void *)(a5 + 24) < *(void *)(a4 + 24))))
  {
    long long v16 = *(_OWORD *)a4;
    long long v15 = *(_OWORD *)(a4 + 16);
    long long v17 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v17;
    *(_OWORD *)a5 = v16;
    *(_OWORD *)(a5 + 16) = v15;
    if (*(void *)a4 < *(void *)a3
      || *(void *)a3 >= *(void *)a4
      && ((unsigned int v31 = *(_DWORD *)(a3 + 8), v32 = *(_DWORD *)(a4 + 8), v32 < v31)
       || v31 >= v32
       && ((uint64_t v33 = *(void *)(a4 + 16), v34 = *(void *)(a3 + 16), v33 < v34)
        || v34 >= v33 && *(void *)(a4 + 24) < *(void *)(a3 + 24))))
    {
      long long v19 = *(_OWORD *)a3;
      long long v18 = *(_OWORD *)(a3 + 16);
      long long v20 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v20;
      *(_OWORD *)a4 = v19;
      *(_OWORD *)(a4 + 16) = v18;
      if (*(void *)a3 < *(void *)a2
        || *(void *)a2 >= *(void *)a3
        && ((unsigned int v35 = *(_DWORD *)(a2 + 8), v36 = *(_DWORD *)(a3 + 8), v36 < v35)
         || v35 >= v36
         && ((v37 = *(void *)(a3 + 16), uint64_t v38 = *(void *)(a2 + 16), v37 < v38)
          || v38 >= v37 && *(void *)(a3 + 24) < *(void *)(a2 + 24))))
      {
        long long v22 = *(_OWORD *)a2;
        long long v21 = *(_OWORD *)(a2 + 16);
        long long v23 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v23;
        *(_OWORD *)a3 = v22;
        *(_OWORD *)(a3 + 16) = v21;
        if (*(void *)a2 < *(void *)a1
          || *(void *)a1 >= *(void *)a2
          && ((unsigned int v24 = *(_DWORD *)(a1 + 8), v25 = *(_DWORD *)(a2 + 8), v25 < v24)
           || v24 >= v25
           && ((uint64_t v26 = *(void *)(a2 + 16), v27 = *(void *)(a1 + 16), v26 < v27)
            || v27 >= v26 && *(void *)(a2 + 24) < *(void *)(a1 + 24))))
        {
          long long v29 = *(_OWORD *)a1;
          long long v28 = *(_OWORD *)(a1 + 16);
          long long v30 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v30;
          *(_OWORD *)a2 = v29;
          *(_OWORD *)(a2 + 16) = v28;
        }
      }
    }
  }
  return result;
}

long long *sub_330A44(long long *result, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  if (*a2 < *(void *)result
    || *(void *)result >= v3
    && ((unsigned int v7 = *((_DWORD *)result + 2), v8 = *((_DWORD *)a2 + 2), v8 < v7)
     || v7 >= v8
     && ((uint64_t v35 = a2[2], v36 = *((void *)result + 2), v35 < v36) || v36 >= v35 && a2[3] < *((void *)result + 3))))
  {
    if (*(void *)a3 < v3
      || v3 >= *(void *)a3
      && ((unsigned int v27 = *((_DWORD *)a2 + 2), v28 = *((_DWORD *)a3 + 2), v28 < v27)
       || v27 >= v28
       && ((uint64_t v29 = *((void *)a3 + 2), v30 = a2[2], v29 < v30) || v30 >= v29 && *((void *)a3 + 3) < a2[3])))
    {
      long long v5 = *result;
      long long v4 = result[1];
      long long v6 = a3[1];
      *BOOL result = *a3;
      result[1] = v6;
    }
    else
    {
      long long v16 = *result;
      long long v15 = result[1];
      long long v17 = *((_OWORD *)a2 + 1);
      *BOOL result = *(_OWORD *)a2;
      result[1] = v17;
      *(_OWORD *)a2 = v16;
      *((_OWORD *)a2 + 1) = v15;
      if (*(void *)a3 >= *a2)
      {
        if (*a2 < *(void *)a3) {
          return result;
        }
        unsigned int v18 = *((_DWORD *)a2 + 2);
        unsigned int v19 = *((_DWORD *)a3 + 2);
        if (v19 >= v18)
        {
          if (v18 < v19) {
            return result;
          }
          uint64_t v20 = *((void *)a3 + 2);
          uint64_t v21 = a2[2];
          if (v20 >= v21 && (v21 < v20 || *((void *)a3 + 3) >= a2[3])) {
            return result;
          }
        }
      }
      long long v5 = *(_OWORD *)a2;
      long long v4 = *((_OWORD *)a2 + 1);
      long long v22 = a3[1];
      *(_OWORD *)a2 = *a3;
      *((_OWORD *)a2 + 1) = v22;
    }
    *a3 = v5;
    a3[1] = v4;
    return result;
  }
  if (*(void *)a3 < v3
    || v3 >= *(void *)a3
    && ((unsigned int v23 = *((_DWORD *)a2 + 2), v24 = *((_DWORD *)a3 + 2), v24 < v23)
     || v23 >= v24 && ((uint64_t v25 = *((void *)a3 + 2), v26 = a2[2], v25 < v26) || v26 >= v25 && *((void *)a3 + 3) < a2[3])))
  {
    long long v10 = *(_OWORD *)a2;
    long long v9 = *((_OWORD *)a2 + 1);
    long long v11 = a3[1];
    *(_OWORD *)a2 = *a3;
    *((_OWORD *)a2 + 1) = v11;
    *a3 = v10;
    a3[1] = v9;
    if (*a2 < *(void *)result
      || *(void *)result >= *a2
      && ((unsigned int v31 = *((_DWORD *)result + 2), v32 = *((_DWORD *)a2 + 2), v32 < v31)
       || v31 >= v32
       && ((uint64_t v33 = a2[2], v34 = *((void *)result + 2), v33 < v34) || v34 >= v33 && a2[3] < *((void *)result + 3))))
    {
      long long v13 = *result;
      long long v12 = result[1];
      long long v14 = *((_OWORD *)a2 + 1);
      *BOOL result = *(_OWORD *)a2;
      result[1] = v14;
      *(_OWORD *)a2 = v13;
      *((_OWORD *)a2 + 1) = v12;
    }
  }
  return result;
}

BOOL sub_330C68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v26 = (long long *)(a2 - 32);
      uint64_t v27 = *(void *)(a2 - 32);
      if (v27 < *(void *)a1
        || *(void *)a1 >= v27
        && ((unsigned int v31 = *(_DWORD *)(a1 + 8), v32 = *(_DWORD *)(a2 - 24), v32 < v31)
         || v31 >= v32
         && ((uint64_t v33 = *(void *)(a2 - 16), v34 = *(void *)(a1 + 16), v33 < v34)
          || v34 >= v33 && *(void *)(a2 - 8) < *(void *)(a1 + 24))))
      {
        long long v29 = *(_OWORD *)a1;
        long long v28 = *(_OWORD *)(a1 + 16);
        long long v30 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *v26;
        *(_OWORD *)(a1 + 16) = v30;
        *uint64_t v26 = v29;
        *(_OWORD *)(a2 - 16) = v28;
      }
      return result;
    case 3:
      sub_330A44((long long *)a1, (uint64_t *)(a1 + 32), (long long *)(a2 - 32));
      return 1;
    case 4:
      sub_330F74(a1, (long long *)(a1 + 32), (long long *)(a1 + 64), (long long *)(a2 - 32));
      return 1;
    case 5:
      sub_33083C(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      uint64_t v6 = a1 + 64;
      sub_330A44((long long *)a1, (uint64_t *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v7 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (2)
  {
    uint64_t v11 = *(void *)v7;
    if (*(void *)v7 >= *(void *)v6)
    {
      if (*(void *)v6 < v11) {
        goto LABEL_8;
      }
      unsigned int v23 = *(_DWORD *)(v6 + 8);
      unsigned int v12 = *(_DWORD *)(v7 + 8);
      if (v12 >= v23)
      {
        if (v23 < v12) {
          goto LABEL_8;
        }
        uint64_t v24 = *(void *)(v7 + 16);
        uint64_t v25 = *(void *)(v6 + 16);
        if (v24 >= v25 && (v25 < v24 || *(void *)(v7 + 24) >= *(void *)(v6 + 24))) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      unsigned int v12 = *(_DWORD *)(v7 + 8);
    }
    int v13 = *(_DWORD *)(v7 + 12);
    uint64_t v14 = *(void *)(v7 + 16);
    uint64_t v15 = *(void *)(v7 + 24);
    long long v16 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
    *(_OWORD *)(v7 + 16) = v16;
    uint64_t v10 = a1;
    if (v6 == a1) {
      goto LABEL_7;
    }
    uint64_t v17 = v8;
    while (1)
    {
      uint64_t v19 = a1 + v17;
      uint64_t v20 = *(void *)(a1 + v17 + 32);
      if (v11 >= v20)
      {
        if (v20 < v11) {
          goto LABEL_29;
        }
        unsigned int v21 = *(_DWORD *)(v19 + 40);
        if (v12 >= v21)
        {
          if (v21 < v12) {
            goto LABEL_29;
          }
          uint64_t v22 = *(void *)(v19 + 48);
          if (v14 >= v22) {
            break;
          }
        }
      }
LABEL_13:
      v6 -= 32;
      long long v18 = *(_OWORD *)(a1 + v17 + 48);
      *(_OWORD *)(v19 + 64) = *(_OWORD *)(a1 + v17 + 32);
      *(_OWORD *)(v19 + 80) = v18;
      v17 -= 32;
      if (v17 == -64)
      {
        uint64_t v10 = a1;
        goto LABEL_7;
      }
    }
    if (v22 >= v14)
    {
      if (v15 >= *(void *)(v19 + 56))
      {
        uint64_t v10 = a1 + v17 + 64;
        goto LABEL_7;
      }
      goto LABEL_13;
    }
LABEL_29:
    uint64_t v10 = v6;
LABEL_7:
    *(void *)uint64_t v10 = v11;
    *(_DWORD *)(v10 + 8) = v12;
    *(_DWORD *)(v10 + 12) = v13;
    ++v9;
    *(void *)(v10 + 16) = v14;
    *(void *)(v10 + 24) = v15;
    if (v9 == 8) {
      return v7 + 32 == a2;
    }
LABEL_8:
    uint64_t v6 = v7;
    v8 += 32;
    v7 += 32;
    if (v7 != a2) {
      continue;
    }
    return 1;
  }
}

long long *sub_330F74(uint64_t a1, long long *a2, long long *a3, long long *a4)
{
  BOOL result = sub_330A44((long long *)a1, (uint64_t *)a2, a3);
  if (*(void *)a4 < *(void *)a3
    || *(void *)a3 >= *(void *)a4
    && ((v22 = *((_DWORD *)a3 + 2), unsigned int v23 = *((_DWORD *)a4 + 2), v23 < v22)
     || v22 >= v23
     && ((uint64_t v24 = *((void *)a4 + 2), v25 = *((void *)a3 + 2), v24 < v25)
      || v25 >= v24 && *((void *)a4 + 3) < *((void *)a3 + 3))))
  {
    long long v10 = *a3;
    long long v9 = a3[1];
    long long v11 = a4[1];
    *a3 = *a4;
    a3[1] = v11;
    *a4 = v10;
    a4[1] = v9;
    if (*(void *)a3 < *(void *)a2
      || *(void *)a2 >= *(void *)a3
      && ((unsigned int v26 = *((_DWORD *)a2 + 2), v27 = *((_DWORD *)a3 + 2), v27 < v26)
       || v26 >= v27
       && ((uint64_t v28 = *((void *)a3 + 2), v29 = *((void *)a2 + 2), v28 < v29)
        || v29 >= v28 && *((void *)a3 + 3) < *((void *)a2 + 3))))
    {
      long long v13 = *a2;
      long long v12 = a2[1];
      long long v14 = a3[1];
      *a2 = *a3;
      a2[1] = v14;
      *a3 = v13;
      a3[1] = v12;
      if (*(void *)a2 < *(void *)a1
        || *(void *)a1 >= *(void *)a2
        && ((unsigned int v15 = *(_DWORD *)(a1 + 8), v16 = *((_DWORD *)a2 + 2), v16 < v15)
         || v15 >= v16
         && ((uint64_t v17 = *((void *)a2 + 2), v18 = *(void *)(a1 + 16), v17 < v18)
          || v18 >= v17 && *((void *)a2 + 3) < *(void *)(a1 + 24))))
      {
        long long v20 = *(_OWORD *)a1;
        long long v19 = *(_OWORD *)(a1 + 16);
        long long v21 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v21;
        *a2 = v20;
        a2[1] = v19;
      }
    }
  }
  return result;
}

void sub_331104(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_33177C(long long *a1, uint64_t *a2, long long *a3)
{
  uint64_t v3 = *a2;
  if (*a2 >= *(void *)a1 && (*(void *)a1 < v3 || *((_DWORD *)a2 + 2) >= *((_DWORD *)a1 + 2)))
  {
    if (*(void *)a3 < v3) {
      goto LABEL_7;
    }
    if (v3 < *(void *)a3) {
      return 0;
    }
    if (*((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
LABEL_7:
      *(_OWORD *)unint64_t v16 = *(_OWORD *)a2;
      long long v7 = *(_OWORD *)a2;
      *(_OWORD *)&v16[16] = *((_OWORD *)a2 + 1);
      long long v8 = *(long long *)((char *)a3 + 9);
      *(_OWORD *)a2 = *a3;
      *(_OWORD *)((char *)a2 + 9) = v8;
      *a3 = v7;
      *(long long *)((char *)a3 + 9) = *(_OWORD *)&v16[9];
      if (*a2 < *(void *)a1) {
        goto LABEL_8;
      }
      if (*(void *)a1 < *a2) {
        return 1;
      }
      if (*((_DWORD *)a2 + 2) < *((_DWORD *)a1 + 2))
      {
LABEL_8:
        *(_OWORD *)uint64_t v17 = *a1;
        long long v9 = *a1;
        *(_OWORD *)&unsigned char v17[16] = a1[1];
        long long v10 = *(_OWORD *)((char *)a2 + 9);
        *a1 = *(_OWORD *)a2;
        *(long long *)((char *)a1 + 9) = v10;
        *(_OWORD *)a2 = v9;
        *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v17[9];
        return 2;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (*(void *)a3 < v3 || v3 >= *(void *)a3 && *((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      *(_OWORD *)unint64_t v15 = *a1;
      long long v4 = *a1;
      *(_OWORD *)&v15[16] = a1[1];
      long long v5 = *(long long *)((char *)a3 + 9);
      *a1 = *a3;
      *(long long *)((char *)a1 + 9) = v5;
      *a3 = v4;
      *(long long *)((char *)a3 + 9) = *(_OWORD *)&v15[9];
      return 1;
    }
    *(_OWORD *)uint64_t v18 = *a1;
    long long v11 = *a1;
    *(_OWORD *)&v18[16] = a1[1];
    long long v12 = *(_OWORD *)((char *)a2 + 9);
    *a1 = *(_OWORD *)a2;
    *(long long *)((char *)a1 + 9) = v12;
    *(_OWORD *)a2 = v11;
    *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v18[9];
    if (*(void *)a3 < *a2) {
      goto LABEL_12;
    }
    if (*a2 >= *(void *)a3)
    {
      if (*((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
      {
LABEL_12:
        *(_OWORD *)long long v19 = *(_OWORD *)a2;
        long long v13 = *(_OWORD *)a2;
        *(_OWORD *)&v19[16] = *((_OWORD *)a2 + 1);
        long long v14 = *(long long *)((char *)a3 + 9);
        *(_OWORD *)a2 = *a3;
        *(_OWORD *)((char *)a2 + 9) = v14;
        *a3 = v13;
        *(long long *)((char *)a3 + 9) = *(_OWORD *)&v19[9];
        return 2;
      }
      return 1;
    }
    else
    {
      return 1;
    }
  }
}

unint64_t sub_331960(uint64_t *a1, long long *a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = *((void *)a2 - 4);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *((_DWORD *)a2 - 6)))
  {
    for (unint64_t i = (unint64_t)(a1 + 4);
          i < (unint64_t)a2 && v2 >= *(void *)i && (*(void *)i < v2 || v3 >= *(_DWORD *)(i + 8));
  }
  else
  {
    unint64_t i = (unint64_t)a1;
    do
    {
      uint64_t v7 = *(void *)(i + 32);
      i += 32;
      uint64_t v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= *(_DWORD *)(i + 8)));
  }
  if (i < (unint64_t)a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < *((_DWORD *)a2 + 2); a2 -= 2)
    {
      uint64_t v8 = *((void *)a2 - 4);
      uint64_t v4 = v8;
    }
  }
  while (i < (unint64_t)a2)
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)i;
    *(_OWORD *)&unsigned char v17[16] = *(_OWORD *)(i + 16);
    long long v9 = *a2;
    *(_OWORD *)(i + 9) = *(long long *)((char *)a2 + 9);
    *(_OWORD *)unint64_t i = v9;
    *(long long *)((char *)a2 + 9) = *(_OWORD *)&v17[9];
    *a2 = *(_OWORD *)v17;
    do
    {
      uint64_t v11 = *(void *)(i + 32);
      i += 32;
      uint64_t v10 = v11;
    }
    while (v2 >= v11 && (v10 < v2 || v3 >= *(_DWORD *)(i + 8)));
    do
    {
      do
      {
        uint64_t v13 = *((void *)a2 - 4);
        a2 -= 2;
        uint64_t v12 = v13;
      }
      while (v2 < v13);
    }
    while (v12 >= v2 && v3 < *((_DWORD *)a2 + 2));
  }
  if ((uint64_t *)(i - 32) != a1)
  {
    long long v14 = *(_OWORD *)(i - 32);
    *(_OWORD *)((char *)a1 + 9) = *(_OWORD *)(i - 23);
    *(_OWORD *)a1 = v14;
  }
  *(void *)(i - 32) = v2;
  *(_DWORD *)(i - 24) = v3;
  *(void *)(i - 15) = *(void *)&v16[5];
  *(void *)(i - 20) = *(void *)v16;
  return i;
}

unint64_t sub_331AD8(uint64_t *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a1;
  unsigned int v4 = *((_DWORD *)a1 + 2);
  while (1)
  {
    uint64_t v5 = a1[v2 + 4];
    if (v5 >= v3 && (v3 < v5 || LODWORD(a1[v2 + 5]) >= v4)) {
      break;
    }
    v2 += 4;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 4];
  if (v2 * 8)
  {
    do
    {
      uint64_t v8 = *(void *)(a2 - 32);
      a2 -= 32;
      uint64_t v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || *(_DWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        uint64_t v10 = *(void *)(a2 - 32);
        a2 -= 32;
        uint64_t v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v3 < v9) {
          goto LABEL_19;
        }
      }
      while (*(_DWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  unint64_t v12 = v6;
  if (v6 < a2)
  {
    unint64_t v13 = a2;
    do
    {
      *(_OWORD *)unint64_t v22 = *(_OWORD *)v12;
      *(_OWORD *)&v22[16] = *(_OWORD *)(v12 + 16);
      long long v14 = *(_OWORD *)v13;
      *(_OWORD *)(v12 + 9) = *(_OWORD *)(v13 + 9);
      *(_OWORD *)unint64_t v12 = v14;
      *(_OWORD *)(v13 + 9) = *(_OWORD *)&v22[9];
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v22;
      do
      {
        do
        {
          uint64_t v16 = *(void *)(v12 + 32);
          v12 += 32;
          uint64_t v15 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v15 && *(_DWORD *)(v12 + 8) < v4);
      do
      {
        uint64_t v18 = *(void *)(v13 - 32);
        v13 -= 32;
        uint64_t v17 = v18;
      }
      while (v18 >= v3 && (v3 < v17 || *(_DWORD *)(v13 + 8) >= v4));
    }
    while (v12 < v13);
  }
  if ((uint64_t *)(v12 - 32) != a1)
  {
    long long v19 = *(_OWORD *)(v12 - 32);
    *(_OWORD *)((char *)a1 + 9) = *(_OWORD *)(v12 - 23);
    *(_OWORD *)a1 = v19;
  }
  *(void *)(v12 - 32) = v3;
  *(_DWORD *)(v12 - 24) = v4;
  *(void *)(v12 - 15) = *(void *)&v21[5];
  *(void *)(v12 - 20) = *(void *)v21;
  return v12 - 32;
}

BOOL sub_331C50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v16 = (_OWORD *)(a2 - 32);
      uint64_t v17 = *(void *)(a2 - 32);
      if (v17 < *(void *)a1 || *(void *)a1 >= v17 && *(_DWORD *)(a2 - 24) < *(_DWORD *)(a1 + 8))
      {
        *(_OWORD *)long long v33 = *(_OWORD *)a1;
        long long v18 = *(_OWORD *)a1;
        *(_OWORD *)&v33[16] = *(_OWORD *)(a1 + 16);
        long long v19 = *(_OWORD *)(a2 - 23);
        *(_OWORD *)a1 = *v16;
        *(_OWORD *)(a1 + 9) = v19;
        _OWORD *v16 = v18;
        *(_OWORD *)(a2 - 23) = *(_OWORD *)&v33[9];
      }
      return result;
    case 3:
      sub_33177C((long long *)a1, (uint64_t *)(a1 + 32), (long long *)(a2 - 32));
      return 1;
    case 4:
      long long v20 = (long long *)(a1 + 32);
      uint64_t v21 = (long long *)(a1 + 64);
      sub_33177C((long long *)a1, (uint64_t *)(a1 + 32), (long long *)(a1 + 64));
      unint64_t v22 = (long long *)(a2 - 32);
      uint64_t v23 = *(void *)(a2 - 32);
      uint64_t v24 = *(void *)(a1 + 64);
      if (v23 >= v24 && (v24 < v23 || *(_DWORD *)(a2 - 24) >= *(_DWORD *)(a1 + 72))) {
        return 1;
      }
      *(_OWORD *)long long v34 = *v21;
      long long v25 = *v21;
      *(_OWORD *)&v34[16] = *(_OWORD *)(a1 + 80);
      long long v26 = *(_OWORD *)(a2 - 23);
      *uint64_t v21 = *v22;
      *(_OWORD *)(a1 + 73) = v26;
      *unint64_t v22 = v25;
      *(_OWORD *)(a2 - 23) = *(_OWORD *)&v34[9];
      uint64_t v27 = *(void *)(a1 + 32);
      uint64_t v28 = *(void *)(a1 + 64);
      if (v28 >= v27 && (v27 < v28 || *(_DWORD *)(a1 + 72) >= *(_DWORD *)(a1 + 40))) {
        return 1;
      }
      *(_OWORD *)uint64_t v35 = *v20;
      long long v29 = *v20;
      *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 48);
      *long long v20 = *v21;
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a1 + 73);
      *uint64_t v21 = v29;
      *(_OWORD *)(a1 + 73) = *(_OWORD *)&v35[9];
      uint64_t v30 = *(void *)(a1 + 32);
      if (v30 >= *(void *)a1 && (*(void *)a1 < v30 || *(_DWORD *)(a1 + 40) >= *(_DWORD *)(a1 + 8))) {
        return 1;
      }
      *(_OWORD *)uint64_t v36 = *(_OWORD *)a1;
      long long v31 = *(_OWORD *)a1;
      *(_OWORD *)&v36[16] = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a1 = *v20;
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a1 + 41);
      *long long v20 = v31;
      *(_OWORD *)(a1 + 41) = *(_OWORD *)&v36[9];
      return 1;
    case 5:
      sub_33200C(a1, (long long *)(a1 + 32), (long long *)(a1 + 64), (long long *)(a1 + 96), (long long *)(a2 - 32));
      return 1;
    default:
      uint64_t v6 = a1 + 64;
      sub_33177C((long long *)a1, (uint64_t *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v7 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (2)
  {
    uint64_t v11 = *(void *)v7;
    if (*(void *)v7 >= *(void *)v6)
    {
      if (*(void *)v6 < v11) {
        goto LABEL_7;
      }
      unsigned int v12 = *(_DWORD *)(v7 + 8);
      if (v12 >= *(_DWORD *)(v6 + 8)) {
        goto LABEL_7;
      }
    }
    else
    {
      unsigned int v12 = *(_DWORD *)(v7 + 8);
    }
    long long v32 = *(_OWORD *)(v7 + 12);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
    *(_OWORD *)(v7 + 9) = *(_OWORD *)(v6 + 9);
    uint64_t v10 = a1;
    if (v6 == a1) {
      goto LABEL_6;
    }
    uint64_t v13 = v8;
    while (1)
    {
      uint64_t v14 = a1 + v13;
      uint64_t v15 = *(void *)(a1 + v13 + 32);
      if (v11 < v15) {
        goto LABEL_12;
      }
      if (v15 < v11) {
        break;
      }
      if (v12 >= *(_DWORD *)(v14 + 40))
      {
        uint64_t v10 = a1 + v13 + 64;
        goto LABEL_6;
      }
LABEL_12:
      v6 -= 32;
      *(_OWORD *)(v14 + 64) = *(_OWORD *)(a1 + v13 + 32);
      *(_OWORD *)(v14 + 73) = *(_OWORD *)(a1 + v13 + 41);
      v13 -= 32;
      if (v13 == -64)
      {
        uint64_t v10 = a1;
        goto LABEL_6;
      }
    }
    uint64_t v10 = v6;
LABEL_6:
    *(void *)uint64_t v10 = v11;
    *(_DWORD *)(v10 + 8) = v12;
    *(void *)(v10 + 12) = v32;
    *(void *)(v10 + 17) = *(void *)((char *)&v32 + 5);
    if (++v9 == 8) {
      return v7 + 32 == a2;
    }
LABEL_7:
    uint64_t v6 = v7;
    v8 += 32;
    v7 += 32;
    if (v7 != a2) {
      continue;
    }
    return 1;
  }
}

__n128 sub_33200C(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5)
{
  sub_33177C((long long *)a1, (uint64_t *)a2, a3);
  if (*(void *)a4 < *(void *)a3 || *(void *)a3 >= *(void *)a4 && *((_DWORD *)a4 + 2) < *((_DWORD *)a3 + 2))
  {
    *(_OWORD *)long long v25 = *a3;
    long long v11 = *a3;
    *(_OWORD *)&v25[16] = a3[1];
    long long v12 = *(long long *)((char *)a4 + 9);
    *a3 = *a4;
    *(long long *)((char *)a3 + 9) = v12;
    *a4 = v11;
    __n128 result = *(__n128 *)&v25[9];
    *(long long *)((char *)a4 + 9) = *(_OWORD *)&v25[9];
    if (*(void *)a3 < *(void *)a2 || *(void *)a2 >= *(void *)a3 && *((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
    {
      *(_OWORD *)long long v26 = *a2;
      long long v13 = *a2;
      *(_OWORD *)&v26[16] = a2[1];
      long long v14 = *(long long *)((char *)a3 + 9);
      *a2 = *a3;
      *(long long *)((char *)a2 + 9) = v14;
      *a3 = v13;
      __n128 result = *(__n128 *)&v26[9];
      *(long long *)((char *)a3 + 9) = *(_OWORD *)&v26[9];
      if (*(void *)a2 < *(void *)a1 || *(void *)a1 >= *(void *)a2 && *((_DWORD *)a2 + 2) < *(_DWORD *)(a1 + 8))
      {
        *(_OWORD *)uint64_t v27 = *(_OWORD *)a1;
        long long v15 = *(_OWORD *)a1;
        *(_OWORD *)&v27[16] = *(_OWORD *)(a1 + 16);
        long long v16 = *(long long *)((char *)a2 + 9);
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 9) = v16;
        *a2 = v15;
        __n128 result = *(__n128 *)&v27[9];
        *(long long *)((char *)a2 + 9) = *(_OWORD *)&v27[9];
      }
    }
  }
  if (*(void *)a5 < *(void *)a4 || *(void *)a4 >= *(void *)a5 && *((_DWORD *)a5 + 2) < *((_DWORD *)a4 + 2))
  {
    *(_OWORD *)uint64_t v28 = *a4;
    long long v17 = *a4;
    *(_OWORD *)&v28[16] = a4[1];
    long long v18 = *(long long *)((char *)a5 + 9);
    *a4 = *a5;
    *(long long *)((char *)a4 + 9) = v18;
    *a5 = v17;
    __n128 result = *(__n128 *)&v28[9];
    *(long long *)((char *)a5 + 9) = *(_OWORD *)&v28[9];
    if (*(void *)a4 < *(void *)a3 || *(void *)a3 >= *(void *)a4 && *((_DWORD *)a4 + 2) < *((_DWORD *)a3 + 2))
    {
      *(_OWORD *)long long v29 = *a3;
      long long v19 = *a3;
      *(_OWORD *)&v29[16] = a3[1];
      long long v20 = *(long long *)((char *)a4 + 9);
      *a3 = *a4;
      *(long long *)((char *)a3 + 9) = v20;
      *a4 = v19;
      __n128 result = *(__n128 *)&v29[9];
      *(long long *)((char *)a4 + 9) = *(_OWORD *)&v29[9];
      if (*(void *)a3 < *(void *)a2 || *(void *)a2 >= *(void *)a3 && *((_DWORD *)a3 + 2) < *((_DWORD *)a2 + 2))
      {
        *(_OWORD *)uint64_t v30 = *a2;
        long long v21 = *a2;
        *(_OWORD *)&v30[16] = a2[1];
        long long v22 = *(long long *)((char *)a3 + 9);
        *a2 = *a3;
        *(long long *)((char *)a2 + 9) = v22;
        *a3 = v21;
        __n128 result = *(__n128 *)&v30[9];
        *(long long *)((char *)a3 + 9) = *(_OWORD *)&v30[9];
        if (*(void *)a2 < *(void *)a1
          || *(void *)a1 >= *(void *)a2 && *((_DWORD *)a2 + 2) < *(_DWORD *)(a1 + 8))
        {
          *(_OWORD *)long long v31 = *(_OWORD *)a1;
          long long v23 = *(_OWORD *)a1;
          *(_OWORD *)&v31[16] = *(_OWORD *)(a1 + 16);
          long long v24 = *(long long *)((char *)a2 + 9);
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 9) = v24;
          *a2 = v23;
          __n128 result = *(__n128 *)&v31[9];
          *(long long *)((char *)a2 + 9) = *(_OWORD *)&v31[9];
        }
      }
    }
  }
  return result;
}

uint64_t sub_3322A0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 5)
    {
      uint64_t v6 = v4 >> 4;
      uint64_t v7 = (v4 >> 4) + 1;
      uint64_t v8 = (long long *)(result + 32 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        uint64_t v10 = *((void *)v8 + 4);
        if (*(void *)v8 < v10 || v10 >= *(void *)v8 && *((_DWORD *)v8 + 2) < *((_DWORD *)v8 + 10))
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      uint64_t v11 = *a4;
      if (*(void *)v8 >= *a4)
      {
        unsigned int v12 = *((_DWORD *)a4 + 2);
        if (v11 < *(void *)v8 || *((_DWORD *)v8 + 2) >= v12)
        {
          long long v19 = *(_OWORD *)((char *)a4 + 12);
          long long v13 = *(long long *)((char *)v8 + 9);
          *(_OWORD *)a4 = *v8;
          *(_OWORD *)((char *)a4 + 9) = v13;
          if (v5 >= v7)
          {
            while (1)
            {
              uint64_t v16 = 2 * v7;
              uint64_t v7 = (2 * v7) | 1;
              long long v14 = (long long *)(result + 32 * v7);
              uint64_t v17 = v16 + 2;
              if (v17 < a3)
              {
                uint64_t v18 = *((void *)v14 + 4);
                if (*(void *)v14 < v18 || v18 >= *(void *)v14 && *((_DWORD *)v14 + 2) < *((_DWORD *)v14 + 10))
                {
                  v14 += 2;
                  uint64_t v7 = v17;
                }
              }
              if (*(void *)v14 < v11 || v11 >= *(void *)v14 && *((_DWORD *)v14 + 2) < v12) {
                break;
              }
              long long v15 = *v14;
              *(long long *)((char *)v8 + 9) = *(long long *)((char *)v14 + 9);
              *uint64_t v8 = v15;
              uint64_t v8 = v14;
              if (v5 < v7) {
                goto LABEL_13;
              }
            }
          }
          long long v14 = v8;
LABEL_13:
          *(void *)long long v14 = v11;
          *((_DWORD *)v14 + 2) = v12;
          *(void *)((char *)v14 + 12) = v19;
          *(void *)((char *)v14 + 17) = *(void *)((char *)&v19 + 5);
        }
      }
    }
  }
  return result;
}

char *sub_332418(char *result, char *a2)
{
  if (a2 - result >= 33)
  {
    uint64_t v2 = (unint64_t)(a2 - result) >> 5;
    do
    {
      uint64_t v4 = 0;
      *(_OWORD *)long long v22 = *(_OWORD *)result;
      *(_OWORD *)&v22[16] = *((_OWORD *)result + 1);
      int64_t v5 = result;
      do
      {
        uint64_t v7 = v5;
        v5 += 32 * v4 + 32;
        uint64_t v8 = 2 * v4;
        uint64_t v4 = (2 * v4) | 1;
        uint64_t v9 = v8 + 2;
        if (v9 < v2)
        {
          uint64_t v10 = *((void *)v5 + 4);
          if (*(void *)v5 < v10 || v10 >= *(void *)v5 && *((_DWORD *)v5 + 2) < *((_DWORD *)v5 + 10))
          {
            v5 += 32;
            uint64_t v4 = v9;
          }
        }
        long long v6 = *(_OWORD *)v5;
        *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)(v5 + 9);
        *uint64_t v7 = v6;
      }
      while (v4 <= (uint64_t)((unint64_t)(v2 - 2) >> 1));
      a2 -= 32;
      if (v5 == a2)
      {
        *(_OWORD *)(v5 + 9) = *(_OWORD *)&v22[9];
        *(_OWORD *)int64_t v5 = *(_OWORD *)v22;
      }
      else
      {
        long long v11 = *(_OWORD *)a2;
        *(_OWORD *)(v5 + 9) = *(_OWORD *)(a2 + 9);
        *(_OWORD *)int64_t v5 = v11;
        *(_OWORD *)a2 = *(_OWORD *)v22;
        *(_OWORD *)(a2 + 9) = *(_OWORD *)&v22[9];
        uint64_t v12 = v5 - result + 32;
        if (v12 >= 33)
        {
          unint64_t v13 = ((unint64_t)v12 >> 5) - 2;
          unint64_t v14 = v13 >> 1;
          long long v15 = &result[32 * (v13 >> 1)];
          uint64_t v16 = *(void *)v5;
          if (*(void *)v15 < *(void *)v5)
          {
            unsigned int v17 = *((_DWORD *)v5 + 2);
LABEL_17:
            long long v23 = *(_OWORD *)(v5 + 12);
            long long v18 = *(_OWORD *)v15;
            *(_OWORD *)(v5 + 9) = *(_OWORD *)(v15 + 9);
            *(_OWORD *)int64_t v5 = v18;
            if (v13 >= 2)
            {
              while (1)
              {
                unint64_t v21 = v14 - 1;
                unint64_t v14 = (v14 - 1) >> 1;
                long long v19 = &result[32 * v14];
                if (*(void *)v19 >= v16 && (v16 < *(void *)v19 || *((_DWORD *)v19 + 2) >= v17)) {
                  break;
                }
                long long v20 = *(_OWORD *)v19;
                *(_OWORD *)(v15 + 9) = *(_OWORD *)(v19 + 9);
                *(_OWORD *)long long v15 = v20;
                long long v15 = &result[32 * v14];
                if (v21 <= 1) {
                  goto LABEL_19;
                }
              }
            }
            long long v19 = v15;
LABEL_19:
            *(void *)long long v19 = v16;
            *((_DWORD *)v19 + 2) = v17;
            *(void *)(v19 + 12) = v23;
            *(void *)(v19 + 17) = *(void *)((char *)&v23 + 5);
            continue;
          }
          if (v16 >= *(void *)v15)
          {
            unsigned int v17 = *((_DWORD *)v5 + 2);
            if (*((_DWORD *)v15 + 2) < v17) {
              goto LABEL_17;
            }
          }
        }
      }
    }
    while (v2-- > 2);
  }
  return result;
}

_DWORD *sub_332608(_DWORD *a1, _DWORD *a2)
{
  if (a1 == a2 || a1 + 6 == a2) {
    return a2;
  }
  uint64_t v2 = 0;
  LODWORD(v3) = *a1;
  while (1)
  {
    int v4 = v3;
    int64_t v5 = &a1[v2];
    unint64_t v3 = *(void *)&a1[v2 + 6];
    if (v4 == v3
      && *((unsigned __int16 *)v5 + 2) == WORD2(v3)
      && (HIWORD(v3) & 1) != (BYTE2(a1[v2 + 1]) == 0)
      && v5[2] == v5[8]
      && *((void *)v5 + 2) == *((void *)v5 + 5))
    {
      break;
    }
    v2 += 6;
    if (&a1[v2 + 6] == a2) {
      return a2;
    }
  }
  __n128 result = &a1[v2];
  if (result != a2)
  {
    for (unint64_t i = result + 12; i != a2; i += 6)
    {
      if (__PAIR64__(*((unsigned __int16 *)result + 2), *result) != __PAIR64__((unsigned __int16)WORD2(*(void *)i), *(void *)i)|| (HIWORD(*(void *)i) & 1) == (*((unsigned char *)result + 6) == 0)|| result[2] != i[2]|| *((void *)result + 2) != *((void *)i + 2))
      {
        long long v8 = *(_OWORD *)i;
        *((void *)result + 5) = *((void *)i + 2);
        *(_OWORD *)(result + 6) = v8;
        result += 6;
      }
    }
    result += 6;
  }
  return result;
}

void sub_332744(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
BOOL sub_332B10(BOOL result, long long *a2)
{
  if ((long long *)result != a2)
  {
    *(void *)&v30[81] = v2;
    uint64_t v31 = v3;
    int v4 = a2;
    char v5 = (long long *)result;
    char v6 = (long long *)(result + 40);
    if ((long long *)(result + 40) != a2)
    {
      uint64_t v7 = 0;
      long long v8 = (long long *)result;
      do
      {
        uint64_t v12 = v8;
        long long v8 = v6;
        if (*((_DWORD *)v12 + 10) && *((_DWORD *)v12 + 12))
        {
          BOOL v13 = !*(_DWORD *)v12 || *((_DWORD *)v12 + 2) == 0;
          if (v13
            || (*(void *)&long long v23 = v6,
                *((void *)&v23 + 1) = v12 + 3,
                *(void *)&long long v24 = (char *)v12 + 56,
                long long v27 = (unsigned int *)v12,
                uint64_t v28 = (char *)v12 + 8,
                __n128 v29 = v12 + 1,
                __n128 result = sub_333D90((uint64_t)v26, (unsigned int **)&v23, (uint64_t)&v27)))
          {
            long long v14 = v8[1];
            long long v23 = *v8;
            long long v24 = v14;
            uint64_t v25 = *((void *)v8 + 4);
            long long v15 = v12[1];
            *long long v8 = *v12;
            v8[1] = v15;
            *((_WORD *)v8 + 16) = *((_WORD *)v12 + 16);
            uint64_t v9 = v5;
            if (v12 != v5)
            {
              uint64_t v16 = v7;
              do
              {
                if (v23) {
                  BOOL v18 = DWORD2(v23) == 0;
                }
                else {
                  BOOL v18 = 1;
                }
                if (v18)
                {
                  uint64_t v9 = v12;
                  goto LABEL_5;
                }
                uint64_t v19 = (uint64_t)v5 + v16;
                long long v20 = (_DWORD *)((char *)v5 + v16 - 40);
                if (*v20) {
                  BOOL v21 = *(_DWORD *)((char *)v5 + v16 - 32) == 0;
                }
                else {
                  BOOL v21 = 1;
                }
                if (!v21)
                {
                  long long v27 = (unsigned int *)&v23;
                  uint64_t v28 = (char *)&v23 + 8;
                  __n128 v29 = &v24;
                  uint64_t v9 = (long long *)((char *)v5 + v16);
                  v26[0] = (char *)v5 + v16 - 40;
                  v26[1] = (char *)v5 + v16 - 32;
                  v26[2] = (char *)v5 + v16 - 24;
                  __n128 result = sub_333D90((uint64_t)v30, &v27, (uint64_t)v26);
                  if (!result) {
                    goto LABEL_5;
                  }
                }
                uint64_t v12 = (long long *)((char *)v12 - 40);
                long long v17 = *(long long *)((char *)v5 + v16 - 24);
                *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
                *(_OWORD *)(v19 + 16) = v17;
                *(_WORD *)(v19 + 32) = *(_WORD *)((char *)v5 + v16 - 8);
                v16 -= 40;
              }
              while (v16);
              uint64_t v9 = v5;
LABEL_5:
              int v4 = a2;
            }
            long long v10 = v23;
            long long v11 = v24;
            *((_WORD *)v9 + 16) = v25;
            *uint64_t v9 = v10;
            v9[1] = v11;
          }
        }
        char v6 = (long long *)((char *)v8 + 40);
        v7 += 40;
      }
      while ((long long *)((char *)v8 + 40) != v4);
    }
  }
  return result;
}

BOOL sub_332CD8(BOOL result, uint64_t *a2)
{
  if ((uint64_t *)result != a2)
  {
    *(void *)&v23[33] = v2;
    uint64_t v24 = v3;
    char v5 = (unint64_t *)result;
    while (v5 + 5 != (unint64_t *)a2)
    {
      char v6 = v5;
      v5 += 5;
      if (*((_DWORD *)v6 + 10) && *((_DWORD *)v6 + 12))
      {
        BOOL v7 = !*(_DWORD *)v6 || *((_DWORD *)v6 + 2) == 0;
        if (v7
          || (*(void *)&long long v21 = v5,
              *((void *)&v21 + 1) = v6 + 6,
              long long v22 = (uint64_t *)(v6 + 7),
              v20[0] = v6,
              v20[1] = v6 + 1,
              v20[2] = v6 + 2,
              __n128 result = sub_333D90((uint64_t)v23, (unsigned int **)&v21, (uint64_t)v20)))
        {
          unint64_t v8 = *v5;
          unint64_t v9 = v6[6];
          unsigned int v10 = *((_DWORD *)v6 + 14);
          LODWORD(v22) = *((_DWORD *)v6 + 19);
          long long v21 = *(_OWORD *)((char *)v6 + 60);
          *((_WORD *)v5 + 16) = *((_WORD *)v6 + 16);
          long long v11 = *((_OWORD *)v6 + 1);
          *(_OWORD *)char v5 = *(_OWORD *)v6;
          *((_OWORD *)v5 + 1) = v11;
          if (v8 && v9)
          {
            unint64_t v12 = (v8 >> 16) & 0xFFFF0000 | (v8 << 32) | ((v8 & 0xFF000000000000) == 0);
            unint64_t v13 = (v9 >> 16) & 0xFFFF0000 | (v9 << 32) | ((v9 & 0xFF000000000000) == 0);
            for (unint64_t i = v6; ; v6 = i)
            {
              int v16 = *((_DWORD *)i - 10);
              i -= 5;
              if (v16 && *((_DWORD *)i + 2) != 0)
              {
                unint64_t v18 = (*(v6 - 5) >> 16) & 0xFFFF0000 | (*(v6 - 5) << 32) | ((*(v6 - 5) & 0xFF000000000000) == 0);
                if (v12 >= v18)
                {
                  if (v18 < v12) {
                    break;
                  }
                  unint64_t v19 = (*(v6 - 4) >> 16) & 0xFFFF0000 | (*(v6 - 4) << 32) | ((*(v6 - 4) & 0xFF000000000000) == 0);
                  if (v13 >= v19 && (v19 < v13 || v10 >= *((_DWORD *)v6 - 6))) {
                    break;
                  }
                }
              }
              long long v15 = *((_OWORD *)i + 1);
              *(_OWORD *)char v6 = *(_OWORD *)i;
              *((_OWORD *)v6 + 1) = v15;
              *((_WORD *)v6 + 16) = *((_WORD *)i + 16);
            }
          }
          unint64_t *v6 = v8;
          v6[1] = v9;
          *((_DWORD *)v6 + 4) = v10;
          *(unint64_t *)((char *)v6 + 20) = v21;
          *(unint64_t *)((char *)v6 + 26) = *(void *)((char *)&v21 + 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_332EA0(long long *a1, long long *a2, long long *a3)
{
  if (*(_DWORD *)a2 && *((_DWORD *)a2 + 2))
  {
    BOOL v6 = !*(_DWORD *)a1 || *((_DWORD *)a1 + 2) == 0;
    if (v6
      || (long long v35 = (unsigned int *)a2,
          uint64_t v36 = (uint64_t)a2 + 8,
          long long v37 = a2 + 1,
          BOOL v32 = a1,
          uint64_t v33 = (uint64_t)a1 + 8,
          long long v34 = a1 + 1,
          sub_333D90((uint64_t)v38, &v35, (uint64_t)&v32)))
    {
      if (*(_DWORD *)a3)
      {
        if (*((_DWORD *)a3 + 2))
        {
          if (!*(_DWORD *)a2
            || !*((_DWORD *)a2 + 2)
            || (long long v35 = (unsigned int *)a3,
                uint64_t v36 = (uint64_t)a3 + 8,
                long long v37 = a3 + 1,
                BOOL v32 = a2,
                uint64_t v33 = (uint64_t)a2 + 8,
                long long v34 = a2 + 1,
                sub_333D90((uint64_t)v38, &v35, (uint64_t)&v32)))
          {
            uint64_t v7 = *((void *)a1 + 4);
            long long v8 = *a1;
            long long v9 = a1[1];
            __int16 v10 = *((_WORD *)a3 + 16);
            long long v11 = a3[1];
            *a1 = *a3;
            a1[1] = v11;
            *((_WORD *)a1 + 16) = v10;
            *a3 = v8;
            a3[1] = v9;
            uint64_t result = 1;
LABEL_33:
            *((_WORD *)a3 + 16) = v7;
            return result;
          }
        }
      }
      uint64_t v23 = *((void *)a1 + 4);
      long long v24 = *a1;
      long long v25 = a1[1];
      __int16 v26 = *((_WORD *)a2 + 16);
      long long v27 = a2[1];
      *a1 = *a2;
      a1[1] = v27;
      *((_WORD *)a1 + 16) = v26;
      *a2 = v24;
      a2[1] = v25;
      *((_WORD *)a2 + 16) = v23;
      if (*(_DWORD *)a3)
      {
        if (*((_DWORD *)a3 + 2))
        {
          if (!*(_DWORD *)a2
            || !*((_DWORD *)a2 + 2)
            || (long long v35 = (unsigned int *)a3,
                uint64_t v36 = (uint64_t)a3 + 8,
                long long v37 = a3 + 1,
                BOOL v32 = a2,
                uint64_t v33 = (uint64_t)a2 + 8,
                long long v34 = a2 + 1,
                sub_333D90((uint64_t)v38, &v35, (uint64_t)&v32)))
          {
            uint64_t v7 = *((void *)a2 + 4);
            long long v28 = *a2;
            long long v29 = a2[1];
            __int16 v30 = *((_WORD *)a3 + 16);
            long long v31 = a3[1];
            *a2 = *a3;
            a2[1] = v31;
            *((_WORD *)a2 + 16) = v30;
            *a3 = v28;
            a3[1] = v29;
            uint64_t result = 2;
            goto LABEL_33;
          }
        }
      }
      return 1;
    }
  }
  if (!*(_DWORD *)a3 || !*((_DWORD *)a3 + 2)) {
    return 0;
  }
  if (!*(_DWORD *)a2
    || !*((_DWORD *)a2 + 2)
    || (long long v35 = (unsigned int *)a3,
        uint64_t v36 = (uint64_t)a3 + 8,
        long long v37 = a3 + 1,
        BOOL v32 = a2,
        uint64_t v33 = (uint64_t)a2 + 8,
        long long v34 = a2 + 1,
        uint64_t result = sub_333D90((uint64_t)v38, &v35, (uint64_t)&v32),
        result))
  {
    uint64_t v13 = *((void *)a2 + 4);
    long long v14 = *a2;
    long long v15 = a2[1];
    __int16 v16 = *((_WORD *)a3 + 16);
    long long v17 = a3[1];
    *a2 = *a3;
    a2[1] = v17;
    *((_WORD *)a2 + 16) = v16;
    *a3 = v14;
    a3[1] = v15;
    *((_WORD *)a3 + 16) = v13;
    if (!*(_DWORD *)a2) {
      return 1;
    }
    if (!*((_DWORD *)a2 + 2)) {
      return 1;
    }
    if (*(_DWORD *)a1)
    {
      if (*((_DWORD *)a1 + 2))
      {
        long long v35 = (unsigned int *)a2;
        uint64_t v36 = (uint64_t)a2 + 8;
        long long v37 = a2 + 1;
        BOOL v32 = a1;
        uint64_t v33 = (uint64_t)a1 + 8;
        long long v34 = a1 + 1;
        if (!sub_333D90((uint64_t)v38, &v35, (uint64_t)&v32)) {
          return 1;
        }
      }
    }
    uint64_t v18 = *((void *)a1 + 4);
    long long v19 = *a1;
    long long v20 = a1[1];
    __int16 v21 = *((_WORD *)a2 + 16);
    long long v22 = a2[1];
    *a1 = *a2;
    a1[1] = v22;
    *((_WORD *)a1 + 16) = v21;
    *a2 = v19;
    a2[1] = v20;
    uint64_t result = 2;
    *((_WORD *)a2 + 16) = v18;
  }
  return result;
}

unint64_t sub_333178(long long *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  long long v4 = a1[1];
  long long v49 = *a1;
  long long v50 = v4;
  uint64_t v51 = *((void *)a1 + 4);
  unint64_t v5 = a2 - 40;
  if (!v49 || !DWORD2(v49)) {
    goto LABEL_25;
  }
  BOOL v6 = !*(_DWORD *)(a2 - 40) || *(_DWORD *)(a2 - 32) == 0;
  if (v6
    || (*(void *)&long long v56 = &v49,
        *((void *)&v56 + 1) = (char *)&v49 + 8,
        *(void *)&long long v57 = &v50,
        unint64_t v52 = (_DWORD *)(a2 - 40),
        uint64_t v53 = (_DWORD *)(a2 - 32),
        unint64_t v54 = (_DWORD *)(a2 - 24),
        BOOL v7 = sub_333D90((uint64_t)&v55, (unsigned int **)&v56, (uint64_t)&v52),
        v7))
  {
    int v8 = 1;
    long long v9 = a1;
    while (1)
    {
      BOOL v10 = !v8 || DWORD2(v49) == 0;
      BOOL v11 = v10;
      unint64_t v12 = (_DWORD *)v9 + 2;
      do
        v12 += 10;
      while (v11);
      long long v9 = (long long *)(v12 - 2);
      if (!*(v12 - 2) || *v12 == 0) {
        break;
      }
      *(void *)&long long v56 = &v49;
      *((void *)&v56 + 1) = (char *)&v49 + 8;
      *(void *)&long long v57 = &v50;
      unint64_t v52 = v12 - 2;
      uint64_t v53 = v12;
      unint64_t v54 = v12 + 2;
      if (sub_333D90((uint64_t)&v55, (unsigned int **)&v56, (uint64_t)&v52)) {
        break;
      }
      int v8 = v49;
    }
    unint64_t v14 = (unint64_t)(v12 - 2);
  }
  else
  {
LABEL_25:
    unint64_t v14 = (unint64_t)a1 + 40;
    if ((unint64_t)a1 + 40 < v2)
    {
      if (!v49)
      {
        if (v2 <= (unint64_t)(a1 + 5)) {
          unint64_t v19 = (unint64_t)(a1 + 5);
        }
        else {
          unint64_t v19 = v2;
        }
        unint64_t v20 = v19 - 80;
        if ((long long *)v20 == a1) {
          __int16 v21 = a1;
        }
        else {
          __int16 v21 = (long long *)((char *)a1 + 1);
        }
        BOOL v6 = v20 == (void)a1;
        unint64_t v22 = (v20 - (unint64_t)v21) / 0x28;
        if (!v6) {
          ++v22;
        }
        unint64_t v14 = (unint64_t)a1 + 40 * v22 + 80;
        if (v14 >= v2) {
          goto LABEL_85;
        }
        goto LABEL_41;
      }
      do
      {
        if (v49) {
          BOOL v15 = DWORD2(v49) == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15)
        {
          if (!*(_DWORD *)v14 || *(_DWORD *)(v14 + 8) == 0) {
            break;
          }
          *(void *)&long long v56 = &v49;
          *((void *)&v56 + 1) = (char *)&v49 + 8;
          *(void *)&long long v57 = &v50;
          unint64_t v52 = (_DWORD *)v14;
          uint64_t v53 = (_DWORD *)(v14 + 8);
          unint64_t v54 = (_DWORD *)(v14 + 16);
          if (sub_333D90((uint64_t)&v55, (unsigned int **)&v56, (uint64_t)&v52)) {
            break;
          }
        }
        v14 += 40;
      }
      while (v14 < v2);
    }
  }
  if (v14 >= v2) {
    goto LABEL_85;
  }
LABEL_41:
  int v17 = v49;
  if (v49)
  {
    unint64_t v2 = v5;
    while (DWORD2(v49))
    {
      if (*(_DWORD *)v2) {
        BOOL v18 = *(_DWORD *)(v2 + 8) == 0;
      }
      else {
        BOOL v18 = 1;
      }
      if (!v18)
      {
        *(void *)&long long v56 = &v49;
        *((void *)&v56 + 1) = (char *)&v49 + 8;
        *(void *)&long long v57 = &v50;
        unint64_t v52 = (_DWORD *)v2;
        uint64_t v53 = (_DWORD *)(v2 + 8);
        unint64_t v54 = (_DWORD *)(v2 + 16);
        if (!sub_333D90((uint64_t)&v55, (unsigned int **)&v56, (uint64_t)&v52)) {
          break;
        }
        int v17 = v49;
      }
      v2 -= 40;
      if (!v17) {
        break;
      }
    }
  }
  else
  {
    unint64_t v2 = v5;
  }
LABEL_85:
  while (v14 < v2)
  {
    long long v23 = *(_OWORD *)v14;
    long long v24 = *(_OWORD *)(v14 + 16);
    uint64_t v58 = *(void *)(v14 + 32);
    long long v56 = v23;
    long long v57 = v24;
    long long v25 = *(_OWORD *)v2;
    long long v26 = *(_OWORD *)(v2 + 16);
    *(_WORD *)(v14 + 32) = *(_WORD *)(v2 + 32);
    *(_OWORD *)unint64_t v14 = v25;
    *(_OWORD *)(v14 + 16) = v26;
    long long v27 = v56;
    long long v28 = v57;
    *(_WORD *)(v2 + 32) = v58;
    *(_OWORD *)unint64_t v2 = v27;
    *(_OWORD *)(v2 + 16) = v28;
    unint64_t v29 = ((unint64_t)v49 >> 16) & 0xFFFF0000;
    BOOL v30 = (v49 & 0xFF000000000000) == 0;
    unint64_t v31 = v29 | ((void)v49 << 32) | v30;
    unint64_t v32 = (*((void *)&v49 + 1) >> 16) & 0xFFFF0000 | (*((void *)&v49 + 1) << 32) | ((*((void *)&v49 + 1) & 0xFF000000000000) == 0);
    int v33 = *(_DWORD *)(v14 + 40);
    v14 += 40;
    if (v33)
    {
      unint64_t v34 = v14 + 8;
      if (*(_DWORD *)(v14 + 8))
      {
        do
        {
          unint64_t v35 = (*(void *)(v34 - 8) >> 16) & 0xFFFF0000 | (*(void *)(v34 - 8) << 32) | ((*(void *)(v34 - 8) & 0xFF000000000000) == 0);
          if (((BYTE6(v49) == 0) | (WORD2(v49) << 16) | ((unint64_t)v49 << 32)) < v35) {
            break;
          }
          if (v35 >= v31)
          {
            unint64_t v36 = (*(void *)v34 >> 16) & 0xFFFF0000 | (*(void *)v34 << 32) | ((*(void *)v34 & 0xFF000000000000) == 0);
            if ((((unint64_t)DWORD2(v49) << 32) | ((unint64_t)WORD6(v49) << 16) | (BYTE14(v49) == 0)) < v36) {
              goto LABEL_73;
            }
            if (v36 >= v32 && v50 < *(_DWORD *)(v34 + 8)) {
              break;
            }
          }
          int v38 = *(_DWORD *)(v34 + 40);
          v34 += 40;
          int v37 = v38;
          if (!*(_DWORD *)(v34 - 8)) {
            break;
          }
          v14 += 40;
        }
        while (v37);
        unint64_t v14 = v34 - 8;
      }
    }
LABEL_73:
    v2 -= 40;
    if (DWORD2(v49))
    {
      unint64_t v39 = v29 | v30 | ((unint64_t)v49 << 32);
      while (1)
      {
        if (*(_DWORD *)v2 && *(_DWORD *)(v2 + 8) != 0)
        {
          unint64_t v41 = (*(void *)v2 >> 16) & 0xFFFF0000 | (*(void *)v2 << 32) | ((*(void *)v2 & 0xFF000000000000) == 0);
          if (v39 >= v41)
          {
            if (v41 < v31) {
              break;
            }
            unint64_t v42 = (*(void *)(v2 + 8) >> 16) & 0xFFFF0000 | (*(void *)(v2 + 8) << 32) | ((*(void *)(v2 + 8) & 0xFF000000000000) == 0);
            if (v32 >= v42 && (v42 < v32 || v50 >= *(_DWORD *)(v2 + 16))) {
              break;
            }
          }
        }
        v2 -= 40;
      }
    }
  }
  unint64_t v43 = (long long *)(v14 - 40);
  if ((long long *)(v14 - 40) != a1)
  {
    long long v44 = *v43;
    long long v45 = *(_OWORD *)(v14 - 24);
    *((_WORD *)a1 + 16) = *(_WORD *)(v14 - 8);
    *a1 = v44;
    a1[1] = v45;
  }
  long long v46 = v49;
  long long v47 = v50;
  *(_WORD *)(v14 - 8) = v51;
  *unint64_t v43 = v46;
  *(_OWORD *)(v14 - 24) = v47;
  return v14;
}

__n128 sub_333604(unint64_t a1, _DWORD *a2)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  __n128 v49 = *(__n128 *)a1;
  long long v50 = v4;
  uint64_t v51 = *(void *)(a1 + 32);
  unint64_t v5 = a1 + 40;
  if (!*(_DWORD *)(a1 + 40)) {
    goto LABEL_22;
  }
  unint64_t v6 = a1;
  do
  {
    unint64_t v7 = v5;
    if (!*(_DWORD *)(v5 + 8)) {
      break;
    }
    if (v49.n128_u32[0]) {
      BOOL v8 = v49.n128_u32[2] == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      *(void *)&long long v56 = v5;
      *((void *)&v56 + 1) = v5 + 8;
      *(void *)&long long v57 = v5 + 16;
      unint64_t v52 = &v49;
      uint64_t v53 = &v49.n128_i8[8];
      unint64_t v54 = &v50;
      if (!sub_333D90((uint64_t)&v55, (unsigned int **)&v56, (uint64_t)&v52))
      {
        unint64_t v6 = v5 - 40;
        break;
      }
    }
    v5 += 40;
    unint64_t v6 = v7;
  }
  while (*(_DWORD *)(v7 + 40));
  if (v6 == a1)
  {
LABEL_22:
    if (v5 < (unint64_t)a2)
    {
      do
      {
        while (1)
        {
          int v10 = *(a2 - 10);
          a2 -= 10;
          if (v10)
          {
            if (a2[2]) {
              break;
            }
          }
          if (v5 >= (unint64_t)a2) {
            goto LABEL_33;
          }
        }
        if (v49.n128_u32[0]) {
          BOOL v11 = v49.n128_u32[2] == 0;
        }
        else {
          BOOL v11 = 1;
        }
        if (v11) {
          break;
        }
        *(void *)&long long v56 = a2;
        *((void *)&v56 + 1) = a2 + 2;
        *(void *)&long long v57 = a2 + 4;
        unint64_t v52 = &v49;
        uint64_t v53 = &v49.n128_i8[8];
        unint64_t v54 = &v50;
        BOOL v12 = sub_333D90((uint64_t)&v55, (unsigned int **)&v56, (uint64_t)&v52);
        if (v5 >= (unint64_t)a2) {
          break;
        }
      }
      while (!v12);
    }
  }
  else
  {
    for (a2 -= 10; ; a2 -= 10)
    {
      if (*a2 && a2[2])
      {
        if (!v49.n128_u32[0] || v49.n128_u32[2] == 0) {
          break;
        }
        *(void *)&long long v56 = a2;
        *((void *)&v56 + 1) = a2 + 2;
        *(void *)&long long v57 = a2 + 4;
        unint64_t v52 = &v49;
        uint64_t v53 = &v49.n128_i8[8];
        unint64_t v54 = &v50;
        if (sub_333D90((uint64_t)&v55, (unsigned int **)&v56, (uint64_t)&v52)) {
          break;
        }
      }
    }
  }
LABEL_33:
  unint64_t v13 = v5;
  if (v5 < (unint64_t)a2)
  {
    unint64_t v13 = v5;
    unint64_t v14 = a2;
    do
    {
      long long v15 = *(_OWORD *)v13;
      long long v16 = *(_OWORD *)(v13 + 16);
      uint64_t v58 = *(void *)(v13 + 32);
      long long v56 = v15;
      long long v57 = v16;
      long long v17 = *(_OWORD *)v14;
      long long v18 = *((_OWORD *)v14 + 1);
      *(_WORD *)(v13 + 32) = *((_WORD *)v14 + 16);
      *(_OWORD *)unint64_t v13 = v17;
      *(_OWORD *)(v13 + 16) = v18;
      long long v19 = v56;
      long long v20 = v57;
      *((_WORD *)v14 + 16) = v58;
      *(_OWORD *)unint64_t v14 = v19;
      *((_OWORD *)v14 + 1) = v20;
      unsigned int v22 = *(_DWORD *)(v13 + 40);
      v13 += 40;
      uint64_t v21 = v22;
      unsigned __int32 v23 = v49.n128_u32[2];
      unsigned __int32 v24 = v49.n128_u32[0];
      if (v22)
      {
        uint64_t v25 = v49.n128_u64[0] & 0xFF000000000000;
        uint64_t v26 = v49.n128_u64[1] & 0xFF000000000000;
        if (v49.n128_u32[2]) {
          BOOL v27 = v49.n128_u32[0] == 0;
        }
        else {
          BOOL v27 = 1;
        }
        unint64_t v28 = (v49.n128_u64[0] >> 16) & 0xFFFF0000 | (v49.n128_u64[0] << 32);
        uint64_t v29 = (v49.n128_u64[1] >> 16) & 0xFFFF0000 | (v49.n128_u64[1] << 32);
        if (v27)
        {
          do
          {
            if (!*(_DWORD *)(v13 + 8)) {
              break;
            }
            int v32 = *(_DWORD *)(v13 + 40);
            v13 += 40;
          }
          while (v32);
        }
        else
        {
          unint64_t v30 = v28 | ((v49.n128_u64[0] & 0xFF000000000000) == 0);
          unint64_t v31 = v29 | ((v49.n128_u64[1] & 0xFF000000000000) == 0);
          do
          {
            uint64_t v34 = *(unsigned int *)(v13 + 8);
            if (!v34
              || ((v21 << 32) | ((unint64_t)*(unsigned __int16 *)(v13 + 4) << 16) | (*(unsigned char *)(v13 + 6) == 0)) >= v30
              && (v30 < ((*(void *)v13 >> 16) & 0xFFFF0000 | (*(void *)v13 << 32) | (unint64_t)((*(void *)v13 & 0xFF000000000000) == 0))
               || ((v34 << 32) | ((unint64_t)*(unsigned __int16 *)(v13 + 12) << 16) | (*(unsigned char *)(v13 + 14) == 0)) >= v31
               && (v31 < ((*(void *)(v13 + 8) >> 16) & 0xFFFF0000 | (*(void *)(v13 + 8) << 32) | (unint64_t)((*(void *)(v13 + 8) & 0xFF000000000000) == 0))
                || *(_DWORD *)(v13 + 16) >= v50)))
            {
              break;
            }
            unsigned int v33 = *(_DWORD *)(v13 + 40);
            v13 += 40;
            uint64_t v21 = v33;
          }
          while (v33);
        }
      }
      else
      {
        unint64_t v28 = (v49.n128_u64[0] >> 16) & 0xFFFF0000 | (v49.n128_u64[0] << 32);
        uint64_t v25 = v49.n128_u64[0] & 0xFF000000000000;
        uint64_t v29 = (v49.n128_u64[1] >> 16) & 0xFFFF0000 | (v49.n128_u64[1] << 32);
        uint64_t v26 = v49.n128_u64[1] & 0xFF000000000000;
        unsigned __int32 v23 = v49.n128_u32[2];
        unsigned __int32 v24 = v49.n128_u32[0];
      }
      BOOL v35 = v25 == 0;
      BOOL v36 = v26 == 0;
      if (v23) {
        BOOL v37 = v24 == 0;
      }
      else {
        BOOL v37 = 1;
      }
      if (v37)
      {
        do
        {
          do
          {
            int v43 = *(v14 - 10);
            v14 -= 10;
          }
          while (!v43);
        }
        while (!v14[2]);
      }
      else
      {
        unint64_t v38 = v28 | v35;
        unint64_t v39 = v29 | v36;
        do
        {
          do
          {
            unsigned int v41 = *(v14 - 10);
            v14 -= 10;
            uint64_t v40 = v41;
          }
          while (!v41);
          uint64_t v42 = v14[2];
        }
        while (!v42
             || ((v40 << 32) | ((unint64_t)*((unsigned __int16 *)v14 + 2) << 16) | (*((unsigned char *)v14 + 6) == 0)) >= v38
             && (v38 < ((*(void *)v14 >> 16) & 0xFFFF0000 | (*(void *)v14 << 32) | (unint64_t)((*(void *)v14 & 0xFF000000000000) == 0))
              || ((v42 << 32) | ((unint64_t)*((unsigned __int16 *)v14 + 6) << 16) | (*((unsigned char *)v14 + 14) == 0)) >= v39
              && (v39 < ((*((void *)v14 + 1) >> 16) & 0xFFFF0000 | (*((void *)v14 + 1) << 32) | (unint64_t)((*((void *)v14 + 1) & 0xFF000000000000) == 0))
               || v14[4] >= v50)));
      }
    }
    while (v13 < (unint64_t)v14);
  }
  long long v44 = (__n128 *)(v13 - 40);
  if (v13 - 40 != a1)
  {
    __n128 v45 = *v44;
    long long v46 = *(_OWORD *)(v13 - 24);
    *(_WORD *)(a1 + 32) = *(_WORD *)(v13 - 8);
    *(__n128 *)a1 = v45;
    *(_OWORD *)(a1 + 16) = v46;
  }
  __n128 result = v49;
  long long v48 = v50;
  *(_WORD *)(v13 - 8) = v51;
  *long long v44 = result;
  *(_OWORD *)(v13 - 24) = v48;
  return result;
}

BOOL sub_333A68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = (_OWORD *)(a2 - 40);
      if (*(_DWORD *)(a2 - 40) && *(_DWORD *)(a2 - 32))
      {
        if (*(_DWORD *)a1)
        {
          if (*(_DWORD *)(a1 + 8))
          {
            *(void *)&long long v28 = a2 - 40;
            *((void *)&v28 + 1) = a2 - 32;
            *(void *)&long long v29 = a2 - 24;
            int v32 = (unsigned int *)a1;
            unsigned int v33 = (char *)(a1 + 8);
            uint64_t v34 = (long long *)(a1 + 16);
            if (!sub_333D90((uint64_t)v31, (unsigned int **)&v28, (uint64_t)&v32)) {
              return 1;
            }
          }
        }
        uint64_t v7 = *(void *)(a1 + 32);
        long long v8 = *(_OWORD *)a1;
        long long v9 = *(_OWORD *)(a1 + 16);
        __int16 v10 = *(_WORD *)(a2 - 8);
        long long v11 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v11;
        *(_WORD *)(a1 + 32) = v10;
        _OWORD *v6 = v8;
        *(_OWORD *)(a2 - 24) = v9;
        BOOL result = 1;
        *(_WORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      sub_332EA0((long long *)a1, (long long *)(a1 + 40), (long long *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_333EAC(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      sub_33404C(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v12 = a1 + 80;
      sub_332EA0((long long *)a1, (long long *)(a1 + 40), (long long *)(a1 + 80));
      uint64_t v13 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (*(_DWORD *)v13 && *(_DWORD *)(v13 + 8))
    {
      BOOL v19 = !*(_DWORD *)v12 || *(_DWORD *)(v12 + 8) == 0;
      if (v19
        || (*(void *)&long long v28 = v13,
            *((void *)&v28 + 1) = v13 + 8,
            *(void *)&long long v29 = v13 + 16,
            int v32 = (unsigned int *)v12,
            unsigned int v33 = (char *)(v12 + 8),
            uint64_t v34 = (long long *)(v12 + 16),
            sub_333D90((uint64_t)v31, (unsigned int **)&v28, (uint64_t)&v32)))
      {
        long long v20 = *(_OWORD *)(v13 + 16);
        long long v28 = *(_OWORD *)v13;
        long long v29 = v20;
        uint64_t v30 = *(void *)(v13 + 32);
        long long v21 = *(_OWORD *)(v12 + 16);
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
        *(_OWORD *)(v13 + 16) = v21;
        *(_WORD *)(v13 + 32) = *(_WORD *)(v12 + 32);
        uint64_t v16 = a1;
        if (v12 != a1)
        {
          uint64_t v22 = v14;
          do
          {
            if (v28) {
              BOOL v24 = DWORD2(v28) == 0;
            }
            else {
              BOOL v24 = 1;
            }
            if (v24)
            {
              uint64_t v16 = v12;
              goto LABEL_11;
            }
            uint64_t v25 = a1 + v22;
            uint64_t v26 = (_DWORD *)(a1 + v22 + 40);
            if (*v26) {
              BOOL v27 = *(_DWORD *)(a1 + v22 + 48) == 0;
            }
            else {
              BOOL v27 = 1;
            }
            if (!v27)
            {
              int v32 = (unsigned int *)&v28;
              unsigned int v33 = (char *)&v28 + 8;
              uint64_t v34 = &v29;
              v31[0] = a1 + v22 + 40;
              v31[1] = a1 + v22 + 48;
              v31[2] = a1 + v22 + 56;
              if (!sub_333D90((uint64_t)v35, &v32, (uint64_t)v31))
              {
                uint64_t v16 = a1 + v22 + 80;
                goto LABEL_11;
              }
            }
            v12 -= 40;
            long long v23 = *(_OWORD *)(a1 + v22 + 56);
            *(_OWORD *)(v25 + 80) = *(_OWORD *)v26;
            *(_OWORD *)(v25 + 96) = v23;
            *(_WORD *)(v25 + 112) = *(_WORD *)(a1 + v22 + 72);
            v22 -= 40;
          }
          while (v22 != -80);
          uint64_t v16 = a1;
        }
LABEL_11:
        long long v17 = v28;
        long long v18 = v29;
        *(_WORD *)(v16 + 32) = v30;
        *(_OWORD *)uint64_t v16 = v17;
        *(_OWORD *)(v16 + 16) = v18;
        if (++v15 == 8) {
          return v13 + 40 == a2;
        }
      }
    }
    uint64_t v12 = v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2) {
      return 1;
    }
  }
}

BOOL sub_333D90(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  unint64_t v3 = (**(void **)a3 >> 16) & 0xFFFF0000 | (**(void **)a3 << 32) | ((**(void **)a3 & 0xFF000000000000) == 0);
  if ((((unint64_t)**a2 << 32) | ((unint64_t)*((unsigned __int16 *)*a2 + 2) << 16) | (*((unsigned char *)*a2 + 6) == 0)) < v3) {
    return 1;
  }
  if (v3 < ((*(void *)*a2 >> 16) & 0xFFFF0000 | (*(void *)*a2 << 32) | (unint64_t)((*(void *)*a2 & 0xFF000000000000) == 0))) {
    return 0;
  }
  unint64_t v5 = a2[1];
  unint64_t v6 = (**(void **)(a3 + 8) >> 16) & 0xFFFF0000 | (**(void **)(a3 + 8) << 32) | ((**(void **)(a3 + 8) & 0xFF000000000000) == 0);
  if ((((unint64_t)*v5 << 32) | ((unint64_t)*((unsigned __int16 *)v5 + 2) << 16) | (*((unsigned char *)v5 + 6) == 0)) < v6) {
    return 1;
  }
  if (v6 >= ((*(void *)v5 >> 16) & 0xFFFF0000 | (*(void *)v5 << 32) | (unint64_t)((*(void *)v5 & 0xFF000000000000) == 0))) {
    return *a2[2] < **(_DWORD **)(a3 + 16);
  }
  return 0;
}

__n128 sub_333EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_332EA0((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(_DWORD *)a4)
  {
    if (*(_DWORD *)(a4 + 8))
    {
      if (!*(_DWORD *)a3
        || !*(_DWORD *)(a3 + 8)
        || (BOOL v24 = (unsigned int *)a4,
            uint64_t v25 = a4 + 8,
            uint64_t v26 = a4 + 16,
            uint64_t v21 = a3,
            uint64_t v22 = a3 + 8,
            uint64_t v23 = a3 + 16,
            sub_333D90((uint64_t)v27, &v24, (uint64_t)&v21)))
      {
        uint64_t v9 = *(void *)(a3 + 32);
        __n128 result = *(__n128 *)a3;
        long long v10 = *(_OWORD *)(a3 + 16);
        __int16 v11 = *(_WORD *)(a4 + 32);
        long long v12 = *(_OWORD *)(a4 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a4;
        *(_OWORD *)(a3 + 16) = v12;
        *(_WORD *)(a3 + 32) = v11;
        *(__n128 *)a4 = result;
        *(_OWORD *)(a4 + 16) = v10;
        *(_WORD *)(a4 + 32) = v9;
        if (*(_DWORD *)a3)
        {
          if (*(_DWORD *)(a3 + 8))
          {
            if (!*(_DWORD *)a2
              || !*(_DWORD *)(a2 + 8)
              || (BOOL v24 = (unsigned int *)a3,
                  uint64_t v25 = a3 + 8,
                  uint64_t v26 = a3 + 16,
                  uint64_t v21 = a2,
                  uint64_t v22 = a2 + 8,
                  uint64_t v23 = a2 + 16,
                  sub_333D90((uint64_t)v27, &v24, (uint64_t)&v21)))
            {
              uint64_t v13 = *(void *)(a2 + 32);
              __n128 result = *(__n128 *)a2;
              long long v14 = *(_OWORD *)(a2 + 16);
              __int16 v15 = *(_WORD *)(a3 + 32);
              long long v16 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v16;
              *(_WORD *)(a2 + 32) = v15;
              *(__n128 *)a3 = result;
              *(_OWORD *)(a3 + 16) = v14;
              *(_WORD *)(a3 + 32) = v13;
              if (*(_DWORD *)a2)
              {
                if (*(_DWORD *)(a2 + 8))
                {
                  if (!*(_DWORD *)a1
                    || !*(_DWORD *)(a1 + 8)
                    || (BOOL v24 = (unsigned int *)a2,
                        uint64_t v25 = a2 + 8,
                        uint64_t v26 = a2 + 16,
                        uint64_t v21 = a1,
                        uint64_t v22 = a1 + 8,
                        uint64_t v23 = a1 + 16,
                        sub_333D90((uint64_t)v27, &v24, (uint64_t)&v21)))
                  {
                    uint64_t v17 = *(void *)(a1 + 32);
                    __n128 result = *(__n128 *)a1;
                    long long v18 = *(_OWORD *)(a1 + 16);
                    __int16 v19 = *(_WORD *)(a2 + 32);
                    long long v20 = *(_OWORD *)(a2 + 16);
                    *(_OWORD *)a1 = *(_OWORD *)a2;
                    *(_OWORD *)(a1 + 16) = v20;
                    *(_WORD *)(a1 + 32) = v19;
                    *(__n128 *)a2 = result;
                    *(_OWORD *)(a2 + 16) = v18;
                    *(_WORD *)(a2 + 32) = v17;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 sub_33404C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_333EAC(a1, a2, a3, a4).n128_u64[0];
  if (*(_DWORD *)a5)
  {
    if (*(_DWORD *)(a5 + 8))
    {
      if (!*(_DWORD *)a4
        || !*(_DWORD *)(a4 + 8)
        || (uint64_t v30 = (unsigned int *)a5,
            uint64_t v31 = a5 + 8,
            uint64_t v32 = a5 + 16,
            uint64_t v27 = a4,
            uint64_t v28 = a4 + 8,
            uint64_t v29 = a4 + 16,
            sub_333D90((uint64_t)v33, &v30, (uint64_t)&v27)))
      {
        uint64_t v11 = *(void *)(a4 + 32);
        __n128 result = *(__n128 *)a4;
        long long v12 = *(_OWORD *)(a4 + 16);
        __int16 v13 = *(_WORD *)(a5 + 32);
        long long v14 = *(_OWORD *)(a5 + 16);
        *(_OWORD *)a4 = *(_OWORD *)a5;
        *(_OWORD *)(a4 + 16) = v14;
        *(_WORD *)(a4 + 32) = v13;
        *(__n128 *)a5 = result;
        *(_OWORD *)(a5 + 16) = v12;
        *(_WORD *)(a5 + 32) = v11;
        if (*(_DWORD *)a4)
        {
          if (*(_DWORD *)(a4 + 8))
          {
            if (!*(_DWORD *)a3
              || !*(_DWORD *)(a3 + 8)
              || (uint64_t v30 = (unsigned int *)a4,
                  uint64_t v31 = a4 + 8,
                  uint64_t v32 = a4 + 16,
                  uint64_t v27 = a3,
                  uint64_t v28 = a3 + 8,
                  uint64_t v29 = a3 + 16,
                  sub_333D90((uint64_t)v33, &v30, (uint64_t)&v27)))
            {
              uint64_t v15 = *(void *)(a3 + 32);
              __n128 result = *(__n128 *)a3;
              long long v16 = *(_OWORD *)(a3 + 16);
              __int16 v17 = *(_WORD *)(a4 + 32);
              long long v18 = *(_OWORD *)(a4 + 16);
              *(_OWORD *)a3 = *(_OWORD *)a4;
              *(_OWORD *)(a3 + 16) = v18;
              *(_WORD *)(a3 + 32) = v17;
              *(__n128 *)a4 = result;
              *(_OWORD *)(a4 + 16) = v16;
              *(_WORD *)(a4 + 32) = v15;
              if (*(_DWORD *)a3)
              {
                if (*(_DWORD *)(a3 + 8))
                {
                  if (!*(_DWORD *)a2
                    || !*(_DWORD *)(a2 + 8)
                    || (uint64_t v30 = (unsigned int *)a3,
                        uint64_t v31 = a3 + 8,
                        uint64_t v32 = a3 + 16,
                        uint64_t v27 = a2,
                        uint64_t v28 = a2 + 8,
                        uint64_t v29 = a2 + 16,
                        sub_333D90((uint64_t)v33, &v30, (uint64_t)&v27)))
                  {
                    uint64_t v19 = *(void *)(a2 + 32);
                    __n128 result = *(__n128 *)a2;
                    long long v20 = *(_OWORD *)(a2 + 16);
                    __int16 v21 = *(_WORD *)(a3 + 32);
                    long long v22 = *(_OWORD *)(a3 + 16);
                    *(_OWORD *)a2 = *(_OWORD *)a3;
                    *(_OWORD *)(a2 + 16) = v22;
                    *(_WORD *)(a2 + 32) = v21;
                    *(__n128 *)a3 = result;
                    *(_OWORD *)(a3 + 16) = v20;
                    *(_WORD *)(a3 + 32) = v19;
                    if (*(_DWORD *)a2)
                    {
                      if (*(_DWORD *)(a2 + 8))
                      {
                        if (!*(_DWORD *)a1
                          || !*(_DWORD *)(a1 + 8)
                          || (uint64_t v30 = (unsigned int *)a2,
                              uint64_t v31 = a2 + 8,
                              uint64_t v32 = a2 + 16,
                              uint64_t v27 = a1,
                              uint64_t v28 = a1 + 8,
                              uint64_t v29 = a1 + 16,
                              sub_333D90((uint64_t)v33, &v30, (uint64_t)&v27)))
                        {
                          uint64_t v23 = *(void *)(a1 + 32);
                          __n128 result = *(__n128 *)a1;
                          long long v24 = *(_OWORD *)(a1 + 16);
                          __int16 v25 = *(_WORD *)(a2 + 32);
                          long long v26 = *(_OWORD *)(a2 + 16);
                          *(_OWORD *)a1 = *(_OWORD *)a2;
                          *(_OWORD *)(a1 + 16) = v26;
                          *(_WORD *)(a1 + 32) = v25;
                          *(__n128 *)a2 = result;
                          *(_OWORD *)(a2 + 16) = v24;
                          *(_WORD *)(a2 + 32) = v23;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_334268(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    unint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (uint64_t)(a2 - a1) / 40;
    if ((uint64_t)(a2 - a1) >= 41)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 40 * v10);
      do
      {
        sub_334554(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 40);
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = v6;
    if (v6 != a3)
    {
      unint64_t v14 = v6;
      do
      {
        if (*(_DWORD *)v14 && *(_DWORD *)(v14 + 8))
        {
          BOOL v20 = !*(_DWORD *)a1 || *(_DWORD *)(a1 + 8) == 0;
          if (v20
            || (v44.n128_u64[0] = v14,
                v44.n128_u64[1] = v14 + 8,
                *(void *)&long long v45 = v14 + 16,
                long long v48 = (unsigned int *)a1,
                uint64_t v49 = a1 + 8,
                uint64_t v50 = a1 + 16,
                sub_333D90((uint64_t)v47, (unsigned int **)&v44, (uint64_t)&v48)))
          {
            uint64_t v15 = *(void *)(v14 + 32);
            long long v16 = *(_OWORD *)v14;
            long long v17 = *(_OWORD *)(v14 + 16);
            __int16 v18 = *(_WORD *)(a1 + 32);
            long long v19 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)unint64_t v14 = *(_OWORD *)a1;
            *(_OWORD *)(v14 + 16) = v19;
            *(_WORD *)(v14 + 32) = v18;
            *(_OWORD *)a1 = v16;
            *(_OWORD *)(a1 + 16) = v17;
            *(_WORD *)(a1 + 32) = v15;
            sub_334554(a1, a4, v9, (__n128 *)a1);
          }
        }
        v14 += 40;
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 < 41)
    {
      return v13;
    }
    else
    {
      unint64_t v42 = v13;
      uint64_t v43 = a4;
      int64_t v21 = v8 / 0x28uLL;
      do
      {
        while (1)
        {
          uint64_t v28 = 0;
          long long v29 = *(_OWORD *)(a1 + 16);
          __n128 v44 = *(__n128 *)a1;
          long long v45 = v29;
          uint64_t v46 = *(void *)(a1 + 32);
          uint64_t v30 = a1;
          do
          {
            uint64_t v33 = v30;
            uint64_t v34 = v28 + 1;
            v30 += 40 * (v28 + 1);
            uint64_t v35 = 2 * v28;
            uint64_t v28 = (2 * v28) | 1;
            uint64_t v36 = v35 + 2;
            if (v35 + 2 < v21)
            {
              if (*(_DWORD *)v30)
              {
                uint64_t v37 = v33 + 40 * v34;
                int v39 = *(_DWORD *)(v37 + 8);
                uint64_t v38 = v37 + 8;
                if (v39)
                {
                  if (*(_DWORD *)(v30 + 40)) {
                    BOOL v40 = *(_DWORD *)(v30 + 48) == 0;
                  }
                  else {
                    BOOL v40 = 1;
                  }
                  if (v40
                    || (long long v48 = (unsigned int *)v30,
                        uint64_t v49 = v38,
                        uint64_t v50 = v33 + 40 * v34 + 16,
                        v47[0] = v30 + 40,
                        v47[1] = v30 + 48,
                        v47[2] = v30 + 56,
                        sub_333D90((uint64_t)v51, &v48, (uint64_t)v47)))
                  {
                    v30 += 40;
                    uint64_t v28 = v36;
                  }
                }
              }
            }
            long long v31 = *(_OWORD *)v30;
            long long v32 = *(_OWORD *)(v30 + 16);
            *(_WORD *)(v33 + 32) = *(_WORD *)(v30 + 32);
            *(_OWORD *)uint64_t v33 = v31;
            *(_OWORD *)(v33 + 16) = v32;
          }
          while (v28 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
          v6 -= 40;
          if (v30 == v6) {
            break;
          }
          __n128 v22 = *(__n128 *)v6;
          long long v23 = *(_OWORD *)(v6 + 16);
          *(_WORD *)(v30 + 32) = *(_WORD *)(v6 + 32);
          *(__n128 *)uint64_t v30 = v22;
          *(_OWORD *)(v30 + 16) = v23;
          long long v24 = v45;
          *(__n128 *)unint64_t v6 = v44;
          *(_OWORD *)(v6 + 16) = v24;
          *(_WORD *)(v6 + 32) = v46;
          sub_334804(a1, v30 + 40, v43, 0xCCCCCCCCCCCCCCCDLL * ((v30 + 40 - a1) >> 3));
          BOOL v25 = v21-- <= 2;
          if (v25) {
            return v42;
          }
        }
        __n128 v26 = v44;
        long long v27 = v45;
        *(_WORD *)(v30 + 32) = v46;
        *(__n128 *)uint64_t v30 = v26;
        *(_OWORD *)(v30 + 16) = v27;
        BOOL v25 = v21-- <= 2;
      }
      while (!v25);
      return v42;
    }
  }
  return a3;
}

__n128 sub_334554(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  *(void *)&v41[81] = v4;
  uint64_t v42 = v5;
  int64_t v9 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) < (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3))) {
    return result;
  }
  int64_t v11 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
  unint64_t v12 = a1 + 40 * v11;
  int64_t v13 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
  if (v13 < a3)
  {
    if (!*(_DWORD *)v12) {
      goto LABEL_17;
    }
    uint64_t v14 = a1 + 40 * v11;
    int v16 = *(_DWORD *)(v14 + 8);
    unint64_t v15 = v14 + 8;
    if (v16)
    {
      BOOL v17 = !*(_DWORD *)(v12 + 40) || *(_DWORD *)(v12 + 48) == 0;
      if (v17
        || (v32.n128_u64[0] = a1 + 40 * v11,
            v32.n128_u64[1] = v15,
            v33.n128_u64[0] = v32.n128_u64[0] + 16,
            uint64_t v38 = (__n128 *)(v12 + 40),
            int v39 = (unint64_t *)(v12 + 48),
            BOOL v40 = (unsigned int *)(v12 + 56),
            sub_333D90((uint64_t)&v35, (unsigned int **)&v32, (uint64_t)&v38)))
      {
        v12 += 40;
        int64_t v11 = v13;
      }
    }
  }
  if (*(_DWORD *)v12)
  {
    if (*(_DWORD *)(v12 + 8))
    {
      if (!a4->n128_u32[0]) {
        return result;
      }
      if (!a4->n128_u32[2]) {
        return result;
      }
      v32.n128_u64[0] = v12;
      v32.n128_u64[1] = v12 + 8;
      v33.n128_u64[0] = v12 + 16;
      uint64_t v38 = a4;
      int v39 = &a4->n128_u64[1];
      BOOL v40 = (unsigned int *)&a4[1];
      if (sub_333D90((uint64_t)&v35, (unsigned int **)&v32, (uint64_t)&v38)) {
        return result;
      }
    }
  }
LABEL_17:
  __n128 v19 = a4[1];
  __n128 v32 = *a4;
  __n128 v33 = v19;
  unint64_t v34 = a4[2].n128_u64[0];
  __n128 v21 = *(__n128 *)v12;
  __n128 v20 = *(__n128 *)(v12 + 16);
  a4[2].n128_u16[0] = *(_WORD *)(v12 + 32);
  *a4 = v21;
  a4[1] = v20;
  if (v9 >= v11)
  {
    while (1)
    {
      uint64_t v26 = 2 * v11;
      int64_t v11 = (2 * v11) | 1;
      unint64_t v22 = a1 + 40 * v11;
      int64_t v27 = v26 + 2;
      if (v26 + 2 < a3)
      {
        if (!*(_DWORD *)v22) {
          goto LABEL_22;
        }
        uint64_t v28 = a1 + 40 * v11;
        int v30 = *(_DWORD *)(v28 + 8);
        long long v29 = (unint64_t *)(v28 + 8);
        if (v30)
        {
          if (*(_DWORD *)(v22 + 40)) {
            BOOL v31 = *(_DWORD *)(v22 + 48) == 0;
          }
          else {
            BOOL v31 = 1;
          }
          if (v31
            || (uint64_t v38 = (__n128 *)(a1 + 40 * v11),
                int v39 = v29,
                BOOL v40 = (unsigned int *)&v38[1],
                uint64_t v35 = (__n128 *)(v22 + 40),
                uint64_t v36 = (__int8 *)(v22 + 48),
                uint64_t v37 = (__n128 *)(v22 + 56),
                sub_333D90((uint64_t)v41, (unsigned int **)&v38, (uint64_t)&v35)))
          {
            v22 += 40;
            int64_t v11 = v27;
          }
        }
      }
      if (*(_DWORD *)v22)
      {
        if (*(_DWORD *)(v22 + 8))
        {
          if (!v32.n128_u32[0]) {
            break;
          }
          if (!v32.n128_u32[2]) {
            break;
          }
          uint64_t v38 = (__n128 *)v22;
          int v39 = (unint64_t *)(v22 + 8);
          BOOL v40 = (unsigned int *)(v22 + 16);
          uint64_t v35 = &v32;
          uint64_t v36 = &v32.n128_i8[8];
          uint64_t v37 = &v33;
          if (sub_333D90((uint64_t)v41, (unsigned int **)&v38, (uint64_t)&v35)) {
            break;
          }
        }
      }
LABEL_22:
      long long v24 = *(_OWORD *)v22;
      long long v25 = *(_OWORD *)(v22 + 16);
      *(_WORD *)(v12 + 32) = *(_WORD *)(v22 + 32);
      *(_OWORD *)unint64_t v12 = v24;
      *(_OWORD *)(v12 + 16) = v25;
      unint64_t v12 = v22;
      if (v9 < v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v22 = v12;
LABEL_19:
  __n128 result = v32;
  __n128 v23 = v33;
  *(_WORD *)(v22 + 32) = v34;
  *(__n128 *)unint64_t v22 = result;
  *(__n128 *)(v22 + 16) = v23;
  return result;
}

__n128 sub_334804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = (long long *)(a1 + 40 * (v4 >> 1));
    if (*(_DWORD *)v7)
    {
      uint64_t v8 = a1 + 40 * v6;
      int v10 = *(_DWORD *)(v8 + 8);
      unint64_t v9 = v8 + 8;
      if (v10)
      {
        uint64_t v11 = a2 - 40;
        if (!*(_DWORD *)(a2 - 40)
          || !*(_DWORD *)(a2 - 32)
          || (v24.n128_u64[0] = a1 + 40 * (v4 >> 1),
              v24.n128_u64[1] = v9,
              *(void *)&long long v25 = a1 + 40 * v6 + 16,
              uint64_t v28 = (unsigned int *)(a2 - 40),
              uint64_t v29 = a2 - 32,
              int v30 = (unsigned int *)(a2 - 24),
              sub_333D90((uint64_t)v27, (unsigned int **)&v24, (uint64_t)&v28)))
        {
          long long v13 = *(_OWORD *)(v11 + 16);
          __n128 v24 = *(__n128 *)v11;
          long long v25 = v13;
          uint64_t v26 = *(void *)(v11 + 32);
          __int16 v14 = *((_WORD *)v7 + 16);
          long long v15 = v7[1];
          *(_OWORD *)uint64_t v11 = *v7;
          *(_OWORD *)(v11 + 16) = v15;
          *(_WORD *)(v11 + 32) = v14;
          if (v4 >= 2)
          {
            while (1)
            {
              __int16 v18 = v7;
              unint64_t v19 = v6 - 1;
              unint64_t v6 = (v6 - 1) >> 1;
              uint64_t v7 = (long long *)(a1 + 40 * v6);
              if (!*(_DWORD *)v7) {
                break;
              }
              uint64_t v20 = a1 + 40 * v6;
              int v22 = *(_DWORD *)(v20 + 8);
              uint64_t v21 = v20 + 8;
              if (!v22) {
                break;
              }
              if (v24.n128_u32[0])
              {
                if (v24.n128_u32[2])
                {
                  uint64_t v28 = (unsigned int *)(a1 + 40 * v6);
                  uint64_t v29 = v21;
                  int v30 = v28 + 4;
                  v27[0] = &v24;
                  v27[1] = &v24.n128_u64[1];
                  v27[2] = &v25;
                  if (!sub_333D90((uint64_t)&v31, &v28, (uint64_t)v27)) {
                    break;
                  }
                }
              }
              long long v16 = *v7;
              long long v17 = v7[1];
              *((_WORD *)v18 + 16) = *((_WORD *)v7 + 16);
              long long *v18 = v16;
              v18[1] = v17;
              if (v19 <= 1) {
                goto LABEL_16;
              }
            }
            uint64_t v7 = v18;
          }
LABEL_16:
          __n128 result = v24;
          long long v23 = v25;
          *((_WORD *)v7 + 16) = v26;
          *uint64_t v7 = (__int128)result;
          v7[1] = v23;
        }
      }
    }
  }
  return result;
}

uint64_t sub_33498C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      uint64_t v4 = v2 + 64;
      if (v2 + 64 == v3)
      {
        uint64_t v2 = v3;
        goto LABEL_15;
      }
      int v5 = sub_35902C(v2, (unsigned __int8 *)(v2 + 64));
      uint64_t v2 = v4;
    }
    while (!v5);
    uint64_t v6 = v4 + 64;
    uint64_t v7 = v4 - 64;
    if (v6 == v3)
    {
      uint64_t v8 = (void **)v7;
    }
    else
    {
      do
      {
        while ((sub_35902C(v7, (unsigned __int8 *)v6) & 1) != 0)
        {
          uint64_t v8 = (void **)v7;
          v6 += 64;
          if (v6 == v3) {
            goto LABEL_13;
          }
        }
        uint64_t v8 = (void **)(v7 + 64);
        if (*(char *)(v7 + 87) < 0) {
          operator delete(*v8);
        }
        long long v9 = *(_OWORD *)v6;
        *(void *)(v7 + 80) = *(void *)(v6 + 16);
        *(_OWORD *)uint64_t v8 = v9;
        *(unsigned char *)(v6 + 23) = 0;
        *(unsigned char *)uint64_t v6 = 0;
        *(_OWORD *)(v7 + 88) = *(_OWORD *)(v6 + 24);
        int v10 = (void **)(v7 + 104);
        if (*(char *)(v7 + 127) < 0) {
          operator delete(*v10);
        }
        long long v11 = *(_OWORD *)(v6 + 40);
        *(void *)(v7 + 120) = *(void *)(v6 + 56);
        *(_OWORD *)int v10 = v11;
        *(unsigned char *)(v6 + 63) = 0;
        *(unsigned char *)(v6 + 40) = 0;
        v7 += 64;
        v6 += 64;
      }
      while (v6 != v3);
    }
LABEL_13:
    uint64_t v2 = (uint64_t)(v8 + 8);
  }
LABEL_15:
  uint64_t v12 = a1[1];

  return sub_33655C((uint64_t)a1, v2, v12);
}

void sub_334AB4(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = a2;
  int v10 = a1;
  unint64_t v30 = a2;
  char v31 = a1;
LABEL_2:
  uint64_t v11 = 1 - a4;
  while (1)
  {
    uint64_t v12 = v9 - (void)v10;
    unint64_t v13 = (v9 - (uint64_t)v10) >> 6;
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v30 = v9 - 64;
          if (sub_359080(v9 - 64, (uint64_t)v10)) {
            sub_334DF8(&v31, (uint64_t *)&v30);
          }
          break;
        case 3uLL:
          unint64_t v30 = v9 - 64;
          sub_335360(v10, v10 + 8, v9 - 64);
          break;
        case 4uLL:
          unint64_t v30 = v9 - 64;
          sub_335CA8(v10, v10 + 8, v10 + 16, v9 - 64);
          break;
        case 5uLL:
          unint64_t v30 = v9 - 64;
          sub_335D48(v10, v10 + 8, v10 + 16, v10 + 24, v9 - 64);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 1535)
    {
      if (a5) {
        sub_334F70((uint64_t)v10, v9);
      }
      else {
        sub_33517C((uint64_t)v10, v9);
      }
      return;
    }
    if (v11 == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 64;
    if ((unint64_t)v12 <= 0x2000)
    {
      sub_335360(&v10[8 * v14], v10, v15);
      if (a5)
      {
LABEL_13:
        uint64_t v9 = v30;
        uint64_t v20 = sub_335700((uint64_t)v31, v30);
        if ((v22 & 1) == 0) {
          goto LABEL_19;
        }
        goto LABEL_14;
      }
    }
    else
    {
      sub_335360(v10, &v10[8 * v14], v15);
      unint64_t v16 = v14 << 6;
      uint64_t v17 = (v14 << 6) - 64;
      unint64_t v18 = v30;
      sub_335360(v31 + 8, (uint64_t *)((char *)v31 + v17), v30 - 128);
      sub_335360(v31 + 16, (uint64_t *)((char *)v31 + v16 + 64), v18 - 192);
      sub_335360((uint64_t *)((char *)v31 + v17), (uint64_t *)((char *)v31 + v16), (uint64_t)v31 + v16 + 64);
      uint64_t v29 = (uint64_t)v31 + v16;
      sub_334DF8(&v31, &v29);
      if (a5) {
        goto LABEL_13;
      }
    }
    char v19 = sub_359080((uint64_t)(v31 - 8), (uint64_t)v31);
    uint64_t v9 = v30;
    if ((v19 & 1) == 0)
    {
      int v10 = sub_335450((uint64_t)v31, v30);
      goto LABEL_21;
    }
    uint64_t v20 = sub_335700((uint64_t)v31, v30);
    if ((v21 & 1) == 0) {
      goto LABEL_19;
    }
LABEL_14:
    BOOL v23 = sub_3359A0(v31, (uint64_t)v20);
    int v10 = v20 + 8;
    if (sub_3359A0(v20 + 8, v9))
    {
      if (v23) {
        return;
      }
      unint64_t v30 = (unint64_t)v20;
      int v10 = v31;
      uint64_t v9 = (uint64_t)v20;
      ++v11;
    }
    else
    {
      if (!v23)
      {
LABEL_19:
        sub_334AB4(v31, v20, a3, -v11, a5 & 1);
        int v10 = v20 + 8;
LABEL_21:
        a5 = 0;
        char v31 = v10;
        a4 = -v11;
        goto LABEL_2;
      }
      char v31 = v20 + 8;
      ++v11;
    }
  }
  if (v10 != (uint64_t *)v9)
  {
    unint64_t v24 = (v13 - 2) >> 1;
    unint64_t v25 = v24 + 1;
    uint64_t v26 = (uint64_t)&v10[8 * v24];
    do
    {
      sub_335E14((uint64_t)v10, a3, (v9 - (uint64_t)v10) >> 6, v26);
      v26 -= 64;
      --v25;
    }
    while (v25);
    unint64_t v27 = (unint64_t)v12 >> 6;
    do
    {
      sub_336058((uint64_t)v10, v9, a3, v27);
      v9 -= 64;
    }
    while (v27-- > 2);
  }
}

void sub_334DF8(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = **a1;
  *(void *)uint64_t v15 = (*a1)[1];
  *(void *)&v15[7] = *(uint64_t *)((char *)*a1 + 15);
  char v5 = *((unsigned char *)*a1 + 23);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = 0;
  uint64_t v7 = (void **)(v2 + 5);
  uint64_t v6 = v2[5];
  long long v13 = *(_OWORD *)(v2 + 3);
  *(void *)unint64_t v14 = v2[6];
  *(void *)&v14[7] = *(uint64_t *)((char *)v2 + 55);
  char v8 = *((unsigned char *)v2 + 63);
  v2[5] = 0;
  v2[6] = 0;
  v2[7] = 0;
  uint64_t v9 = *(void *)(v3 + 16);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)v3;
  v2[2] = v9;
  *(unsigned char *)(v3 + 23) = 0;
  *(unsigned char *)uint64_t v3 = 0;
  *(_OWORD *)(v2 + 3) = *(_OWORD *)(v3 + 24);
  if (*((char *)v2 + 63) < 0) {
    operator delete(*v7);
  }
  int v10 = (_OWORD *)(v3 + 24);
  long long v11 = *(_OWORD *)(v3 + 40);
  v7[2] = *(void **)(v3 + 56);
  *(_OWORD *)uint64_t v7 = v11;
  *(unsigned char *)(v3 + 63) = 0;
  *(unsigned char *)(v3 + 40) = 0;
  if (*(char *)(v3 + 23) < 0)
  {
    operator delete(*(void **)v3);
    int v12 = *(char *)(v3 + 63);
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = *(void *)v15;
    *(void *)(v3 + 15) = *(void *)&v15[7];
    *(unsigned char *)(v3 + 23) = v5;
    *int v10 = v13;
    if (v12 < 0) {
      operator delete(*(void **)(v3 + 40));
    }
  }
  else
  {
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = *(void *)v15;
    *(void *)(v3 + 15) = *(void *)&v15[7];
    *(unsigned char *)(v3 + 23) = v5;
    *int v10 = v13;
  }
  *(void *)(v3 + 40) = v6;
  *(void *)(v3 + 48) = *(void *)v14;
  *(void *)(v3 + 55) = *(void *)&v14[7];
  *(unsigned char *)(v3 + 63) = v8;
}

void sub_334F70(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 64;
    if (a1 + 64 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = a1;
      do
      {
        uint64_t v7 = v4;
        if (sub_359080(v4, v6))
        {
          *(_OWORD *)std::string __p = *(_OWORD *)v7;
          uint64_t v18 = *(void *)(v7 + 16);
          *(void *)(v7 + 8) = 0;
          *(void *)(v7 + 16) = 0;
          *(void *)uint64_t v7 = 0;
          long long v19 = *(_OWORD *)(v6 + 88);
          long long v20 = *(_OWORD *)(v6 + 104);
          uint64_t v21 = *(void *)(v6 + 120);
          *(void *)(v6 + 112) = 0;
          *(void *)(v6 + 120) = 0;
          uint64_t v8 = v5;
          *(void *)(v6 + 104) = 0;
          while (1)
          {
            uint64_t v9 = a1 + v8;
            int v10 = (void **)(a1 + v8 + 64);
            if (*(char *)(a1 + v8 + 87) < 0) {
              operator delete(*v10);
            }
            *(_OWORD *)int v10 = *(_OWORD *)v9;
            *(void *)(a1 + v8 + 80) = *(void *)(v9 + 16);
            *(unsigned char *)(v9 + 23) = 0;
            *(unsigned char *)uint64_t v9 = 0;
            *(_OWORD *)(v9 + 88) = *(_OWORD *)(v9 + 24);
            uint64_t v11 = v9 + 104;
            if (*(char *)(v9 + 127) < 0) {
              operator delete(*(void **)v11);
            }
            uint64_t v12 = a1 + v8;
            *(_OWORD *)uint64_t v11 = *(_OWORD *)(a1 + v8 + 40);
            *(void *)(v11 + 16) = *(void *)(a1 + v8 + 56);
            *(unsigned char *)(v12 + 63) = 0;
            *(unsigned char *)(v12 + 40) = 0;
            if (!v8) {
              break;
            }
            v8 -= 64;
            if ((sub_359080((uint64_t)__p, v12 - 64) & 1) == 0)
            {
              uint64_t v13 = a1 + v8 + 64;
              if ((*(char *)(v13 + 23) & 0x80000000) == 0) {
                goto LABEL_18;
              }
              goto LABEL_17;
            }
          }
          uint64_t v13 = a1;
          if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
            goto LABEL_18;
          }
LABEL_17:
          operator delete(*(void **)v13);
LABEL_18:
          unint64_t v14 = (_OWORD *)(v12 + 24);
          uint64_t v15 = v12 + 40;
          *(_OWORD *)uint64_t v13 = *(_OWORD *)__p;
          *(void *)(v13 + 16) = v18;
          HIBYTE(v18) = 0;
          LOBYTE(__p[0]) = 0;
          _OWORD *v14 = v19;
          if (*(char *)(v13 + 63) < 0)
          {
            operator delete(*(void **)v15);
            int v16 = SHIBYTE(v18);
            *(_OWORD *)uint64_t v15 = v20;
            *(void *)(v15 + 16) = v21;
            HIBYTE(v21) = 0;
            LOBYTE(v20) = 0;
            if (v16 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            *(_OWORD *)uint64_t v15 = v20;
            *(void *)(v15 + 16) = v21;
          }
        }
        uint64_t v4 = v7 + 64;
        v5 += 64;
        uint64_t v6 = v7;
      }
      while (v7 + 64 != a2);
    }
  }
}

void sub_335168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_33517C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = a1 + 64;
    if (a1 + 64 != a2)
    {
      uint64_t v5 = (char *)(a1 + 127);
      do
      {
        uint64_t v6 = v4;
        if (sub_359080(v4, v3))
        {
          *(_OWORD *)std::string __p = *(_OWORD *)v6;
          uint64_t v15 = *(void *)(v6 + 16);
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          *(void *)uint64_t v6 = 0;
          long long v16 = *(_OWORD *)(v3 + 88);
          long long v17 = *(_OWORD *)(v3 + 104);
          uint64_t v18 = *(void *)(v3 + 120);
          *(void *)(v3 + 112) = 0;
          *(void *)(v3 + 120) = 0;
          uint64_t v7 = v5;
          *(void *)(v3 + 104) = 0;
          do
          {
            uint64_t v8 = (void **)(v7 - 63);
            if (*(v7 - 40) < 0) {
              operator delete(*v8);
            }
            *(_OWORD *)uint64_t v8 = *(_OWORD *)(v7 - 127);
            *(void *)(v7 - 47) = *(void *)(v7 - 111);
            *(v7 - 104) = 0;
            *(v7 - 127) = 0;
            *(_OWORD *)(v7 - 39) = *(_OWORD *)(v7 - 103);
            uint64_t v9 = (void **)(v7 - 23);
            if (*v7 < 0) {
              operator delete(*v9);
            }
            *(_OWORD *)uint64_t v9 = *(_OWORD *)(v7 - 87);
            *(void *)(v7 - 7) = *(void *)(v7 - 71);
            *(v7 - 64) = 0;
            *(v7 - 87) = 0;
            char v10 = sub_359080((uint64_t)__p, (uint64_t)(v7 - 191));
            v7 -= 64;
          }
          while ((v10 & 1) != 0);
          uint64_t v11 = (void **)(v7 - 63);
          if (*(v7 - 40) < 0) {
            operator delete(*v11);
          }
          uint64_t v12 = (void **)(v7 - 23);
          *(_OWORD *)uint64_t v11 = *(_OWORD *)__p;
          *(void *)(v7 - 47) = v15;
          HIBYTE(v15) = 0;
          LOBYTE(__p[0]) = 0;
          *(_OWORD *)(v7 - 39) = v16;
          if (*v7 < 0)
          {
            operator delete(*v12);
            int v13 = SHIBYTE(v15);
            *(_OWORD *)uint64_t v12 = v17;
            *(void *)(v7 - 7) = v18;
            HIBYTE(v18) = 0;
            LOBYTE(v17) = 0;
            if (v13 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            *(_OWORD *)uint64_t v12 = v17;
            *(void *)(v7 - 7) = v18;
          }
        }
        uint64_t v4 = v6 + 64;
        v5 += 64;
        uint64_t v3 = v6;
      }
      while (v6 + 64 != a2);
    }
  }
}

void sub_33534C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_335360(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v10 = a2;
  uint64_t v11 = a1;
  uint64_t v9 = a3;
  char v5 = sub_359080((uint64_t)a2, (uint64_t)a1);
  uint64_t result = sub_359080(a3, (uint64_t)a2);
  if (v5)
  {
    if (result)
    {
      sub_334DF8(&v11, &v9);
      return 1;
    }
    sub_334DF8(&v11, (uint64_t *)&v10);
    if (sub_359080(v9, (uint64_t)v10))
    {
      uint64_t v7 = &v10;
      uint64_t v8 = &v9;
      goto LABEL_10;
    }
    return 1;
  }
  if (result)
  {
    sub_334DF8(&v10, &v9);
    if (sub_359080((uint64_t)v10, (uint64_t)v11))
    {
      uint64_t v7 = &v11;
      uint64_t v8 = (uint64_t *)&v10;
LABEL_10:
      sub_334DF8(v7, v8);
      return 2;
    }
    return 1;
  }
  return result;
}

uint64_t *sub_335450(uint64_t a1, unint64_t a2)
{
  char v22 = (uint64_t *)a1;
  *(_OWORD *)std::string __p = *(_OWORD *)a1;
  uint64_t v17 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  long long v18 = *(_OWORD *)(a1 + 24);
  long long v19 = *(_OWORD *)(a1 + 40);
  uint64_t v20 = *(void *)(a1 + 56);
  unint64_t v21 = a2;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  if (sub_359080((uint64_t)__p, a2 - 64))
  {
    uint64_t v3 = (uint64_t *)a1;
    do
    {
      v3 += 8;
      char v22 = v3;
    }
    while ((sub_359080((uint64_t)__p, (uint64_t)v3) & 1) == 0);
  }
  else
  {
    uint64_t v4 = (uint64_t *)(a1 + 64);
    do
    {
      uint64_t v3 = v4;
      char v22 = v4;
      if ((unint64_t)v4 >= v21) {
        break;
      }
      int v5 = sub_359080((uint64_t)__p, (uint64_t)v4);
      uint64_t v4 = v3 + 8;
    }
    while (!v5);
  }
  unint64_t v6 = v21;
  if ((unint64_t)v3 < v21)
  {
    do
    {
      v6 -= 64;
      unint64_t v21 = v6;
    }
    while ((sub_359080((uint64_t)__p, v6) & 1) != 0);
    uint64_t v3 = v22;
  }
  if ((unint64_t)v3 < v6)
  {
    do
    {
      sub_334DF8(&v22, (uint64_t *)&v21);
      do
        v22 += 8;
      while (!sub_359080((uint64_t)__p, (uint64_t)v22));
      do
        v21 -= 64;
      while ((sub_359080((uint64_t)__p, v21) & 1) != 0);
      uint64_t v3 = v22;
    }
    while ((unint64_t)v22 < v21);
  }
  uint64_t v7 = (void **)(v3 - 8);
  if (v3 - 8 != (uint64_t *)a1)
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    uint64_t v8 = (void **)(a1 + 40);
    long long v9 = *(_OWORD *)v7;
    *(void *)(a1 + 16) = *(v3 - 6);
    *(_OWORD *)a1 = v9;
    *((unsigned char *)v3 - 41) = 0;
    *((unsigned char *)v3 - 64) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v3 - 5);
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*v8);
    }
    long long v10 = *(_OWORD *)(v3 - 3);
    *(void *)(a1 + 56) = *(v3 - 1);
    *(_OWORD *)uint64_t v8 = v10;
    *((unsigned char *)v3 - 1) = 0;
    *((unsigned char *)v3 - 24) = 0;
  }
  if (*((char *)v3 - 41) < 0) {
    operator delete(*v7);
  }
  long long v11 = *(_OWORD *)__p;
  *(v3 - 6) = v17;
  *(_OWORD *)uint64_t v7 = v11;
  HIBYTE(v17) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(v3 - 5) = v18;
  uint64_t v12 = (void **)(v3 - 3);
  if (*((char *)v3 - 1) < 0) {
    operator delete(*v12);
  }
  long long v13 = v19;
  *(v3 - 1) = v20;
  *(_OWORD *)uint64_t v12 = v13;
  HIBYTE(v20) = 0;
  LOBYTE(v19) = 0;
  unint64_t v14 = v22;
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  return v14;
}

void sub_335688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_33569C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_3356B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_3356C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_3356D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_3356EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_335700(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a1;
  uint64_t v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v4 = (_OWORD *)(a1 + 24);
  long long v20 = *(_OWORD *)(a1 + 24);
  uint64_t v22 = *(void *)(a1 + 56);
  unint64_t v23 = a2;
  uint64_t v5 = a1 + 40;
  long long v21 = *(_OWORD *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  do
  {
    unint64_t v24 = (uint64_t *)(a1 + v3 + 64);
    v3 += 64;
  }
  while ((sub_359080((uint64_t)v24, (uint64_t)__p) & 1) != 0);
  unint64_t v6 = v23;
  if (v3 == 64)
  {
    long long v9 = (uint64_t *)(a1 + 64);
    do
    {
      if ((unint64_t)v9 >= v6) {
        break;
      }
      v6 -= 64;
      unint64_t v23 = v6;
    }
    while ((sub_359080(v6, (uint64_t)__p) & 1) == 0);
  }
  else
  {
    uint64_t v7 = v23 - 64;
    do
    {
      unint64_t v23 = v7;
      int v8 = sub_359080(v7, (uint64_t)__p);
      v7 -= 64;
    }
    while (!v8);
    long long v9 = v24;
  }
  long long v10 = v9;
  if ((unint64_t)v9 < v23)
  {
    do
    {
      sub_334DF8(&v24, (uint64_t *)&v23);
      do
        v24 += 8;
      while ((sub_359080((uint64_t)v24, (uint64_t)__p) & 1) != 0);
      do
        v23 -= 64;
      while (!sub_359080(v23, (uint64_t)__p));
      long long v10 = v24;
    }
    while ((unint64_t)v24 < v23);
  }
  long long v11 = (void **)(v10 - 8);
  if (v10 - 8 != (uint64_t *)a1)
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v12 = *(_OWORD *)v11;
    *(void *)(a1 + 16) = *(v10 - 6);
    *(_OWORD *)a1 = v12;
    *((unsigned char *)v10 - 41) = 0;
    *((unsigned char *)v10 - 64) = 0;
    *uint64_t v4 = *(_OWORD *)(v10 - 5);
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*(void **)v5);
    }
    long long v13 = *(_OWORD *)(v10 - 3);
    *(void *)(v5 + 16) = *(v10 - 1);
    *(_OWORD *)uint64_t v5 = v13;
    *((unsigned char *)v10 - 1) = 0;
    *((unsigned char *)v10 - 24) = 0;
  }
  if (*((char *)v10 - 41) < 0) {
    operator delete(*v11);
  }
  long long v14 = *(_OWORD *)__p;
  *(v10 - 6) = v19;
  *(_OWORD *)long long v11 = v14;
  HIBYTE(v19) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(v10 - 5) = v20;
  uint64_t v15 = (void **)(v10 - 3);
  if (*((char *)v10 - 1) < 0) {
    operator delete(*v15);
  }
  long long v16 = v21;
  *(v10 - 1) = v22;
  *(_OWORD *)uint64_t v15 = v16;
  HIBYTE(v22) = 0;
  LOBYTE(v21) = 0;
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  return v10 - 8;
}

void sub_33593C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_335950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_335964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_335978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_33598C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_3359A0(uint64_t *a1, uint64_t a2)
{
  unint64_t v23 = a1;
  uint64_t v22 = a2;
  uint64_t v4 = (a2 - (uint64_t)a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v22 = a2 - 64;
      if (sub_359080(a2 - 64, (uint64_t)a1)) {
        sub_334DF8(&v23, &v22);
      }
      return 1;
    case 3:
      sub_335360(a1, a1 + 8, a2 - 64);
      return 1;
    case 4:
      sub_335CA8(a1, a1 + 8, a1 + 16, a2 - 64);
      return 1;
    case 5:
      sub_335D48(a1, a1 + 8, a1 + 16, a1 + 24, a2 - 64);
      return 1;
    default:
      uint64_t v6 = (uint64_t)(a1 + 16);
      sub_335360(a1, a1 + 8, (uint64_t)(a1 + 16));
      uint64_t v7 = (uint64_t)(a1 + 24);
      if (v7 == a2) {
        return 1;
      }
      int v8 = 0;
      break;
  }
  do
  {
    if (sub_359080(v7, v6))
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v7;
      uint64_t v18 = *(void *)(v7 + 16);
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      long long v19 = *(_OWORD *)(v7 + 24);
      long long v20 = *(_OWORD *)(v7 + 40);
      uint64_t v21 = *(void *)(v7 + 56);
      *(void *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      do
      {
        uint64_t v10 = v6;
        uint64_t v11 = v6 + 64;
        if (*(char *)(v10 + 87) < 0) {
          operator delete(*(void **)v11);
        }
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v10;
        *(void *)(v11 + 16) = *(void *)(v10 + 16);
        *(unsigned char *)(v10 + 23) = 0;
        *(unsigned char *)uint64_t v10 = 0;
        *(_OWORD *)(v10 + 88) = *(_OWORD *)(v10 + 24);
        long long v12 = (void **)(v10 + 104);
        if (*(char *)(v10 + 127) < 0) {
          operator delete(*v12);
        }
        *(_OWORD *)long long v12 = *(_OWORD *)(v10 + 40);
        *(void *)(v10 + 120) = *(void *)(v10 + 56);
        *(unsigned char *)(v10 + 63) = 0;
        *(unsigned char *)(v10 + 40) = 0;
        if ((uint64_t *)v10 == v23) {
          break;
        }
        uint64_t v6 = v10 - 64;
      }
      while ((sub_359080((uint64_t)__p, v10 - 64) & 1) != 0);
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      char v13 = 0;
      long long v14 = (void **)(v10 + 40);
      long long v15 = *(_OWORD *)__p;
      *(void *)(v10 + 16) = v18;
      *(_OWORD *)uint64_t v10 = v15;
      HIBYTE(v18) = 0;
      LOBYTE(__p[0]) = 0;
      *(_OWORD *)(v10 + 24) = v19;
      if (*(char *)(v10 + 63) < 0)
      {
        operator delete(*v14);
        char v13 = HIBYTE(v18);
      }
      long long v16 = v20;
      *(void *)(v10 + 56) = v21;
      *(_OWORD *)long long v14 = v16;
      HIBYTE(v21) = 0;
      LOBYTE(v20) = 0;
      uint64_t v9 = v22;
      if (v13 < 0)
      {
        operator delete(__p[0]);
        if (++v8 == 8) {
          return v7 + 64 == v9;
        }
      }
      else if (++v8 == 8)
      {
        return v7 + 64 == v9;
      }
    }
    else
    {
      uint64_t v9 = v22;
    }
    uint64_t v6 = v7;
    v7 += 64;
  }
  while (v7 != v9);
  return 1;
}

void sub_335C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_335CA8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v10 = a2;
  uint64_t v11 = a1;
  uint64_t v8 = a4;
  uint64_t v9 = a3;
  sub_335360(a1, a2, (uint64_t)a3);
  if (sub_359080(a4, (uint64_t)a3))
  {
    sub_334DF8(&v9, &v8);
    if (sub_359080((uint64_t)v9, (uint64_t)a2))
    {
      sub_334DF8(&v10, (uint64_t *)&v9);
      if (sub_359080((uint64_t)v10, (uint64_t)a1)) {
        sub_334DF8(&v11, (uint64_t *)&v10);
      }
    }
  }
}

void sub_335D48(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  char v13 = a2;
  long long v14 = a1;
  uint64_t v11 = a4;
  long long v12 = a3;
  uint64_t v10 = a5;
  sub_335CA8(a1, a2, a3, (uint64_t)a4);
  if (sub_359080(a5, (uint64_t)a4))
  {
    sub_334DF8(&v11, &v10);
    if (sub_359080((uint64_t)v11, (uint64_t)a3))
    {
      sub_334DF8(&v12, (uint64_t *)&v11);
      if (sub_359080((uint64_t)v12, (uint64_t)a2))
      {
        sub_334DF8(&v13, (uint64_t *)&v12);
        if (sub_359080((uint64_t)v13, (uint64_t)a1)) {
          sub_334DF8(&v14, (uint64_t *)&v13);
        }
      }
    }
  }
}

void sub_335E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - a1) >> 6)
    {
      uint64_t v9 = (a4 - a1) >> 5;
      uint64_t v10 = v9 + 1;
      uint64_t v11 = a1 + ((v9 + 1) << 6);
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3 && sub_359080(a1 + ((v9 + 1) << 6), v11 + 64))
      {
        v11 += 64;
        uint64_t v10 = v12;
      }
      if ((sub_359080(v11, v5) & 1) == 0)
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v5;
        uint64_t v24 = *(void *)(v5 + 16);
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        *(void *)uint64_t v5 = 0;
        long long v25 = *(_OWORD *)(v5 + 24);
        long long v26 = *(_OWORD *)(v5 + 40);
        uint64_t v27 = *(void *)(v5 + 56);
        *(void *)(v5 + 40) = 0;
        *(void *)(v5 + 48) = 0;
        *(void *)(v5 + 56) = 0;
        do
        {
          uint64_t v13 = v11;
          if (*(char *)(v5 + 23) < 0) {
            operator delete(*(void **)v5);
          }
          long long v14 = *(_OWORD *)v11;
          *(void *)(v5 + 16) = *(void *)(v11 + 16);
          *(_OWORD *)uint64_t v5 = v14;
          *(unsigned char *)(v11 + 23) = 0;
          *(unsigned char *)uint64_t v11 = 0;
          *(_OWORD *)(v5 + 24) = *(_OWORD *)(v11 + 24);
          long long v15 = (void **)(v5 + 40);
          if (*(char *)(v5 + 63) < 0) {
            operator delete(*v15);
          }
          long long v16 = *(_OWORD *)(v13 + 40);
          *(void *)(v5 + 56) = *(void *)(v13 + 56);
          *(_OWORD *)long long v15 = v16;
          *(unsigned char *)(v13 + 63) = 0;
          *(unsigned char *)(v13 + 40) = 0;
          if (v7 < v10) {
            break;
          }
          uint64_t v17 = (2 * v10) | 1;
          uint64_t v11 = a1 + (v17 << 6);
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            uint64_t v10 = v17;
          }
          else if (sub_359080(a1 + (v17 << 6), v11 + 64))
          {
            v11 += 64;
          }
          else
          {
            uint64_t v10 = v17;
          }
          uint64_t v5 = v13;
        }
        while (!sub_359080(v11, (uint64_t)__p));
        if (*(char *)(v13 + 23) < 0) {
          operator delete(*(void **)v13);
        }
        uint64_t v18 = (void **)(v13 + 40);
        long long v19 = *(_OWORD *)__p;
        *(void *)(v13 + 16) = v24;
        *(_OWORD *)uint64_t v13 = v19;
        HIBYTE(v24) = 0;
        LOBYTE(__p[0]) = 0;
        *(_OWORD *)(v13 + 24) = v25;
        if (*(char *)(v13 + 63) < 0)
        {
          operator delete(*v18);
          int v21 = SHIBYTE(v24);
          uint64_t v22 = v27;
          *(_OWORD *)uint64_t v18 = v26;
          *(void *)(v13 + 56) = v22;
          HIBYTE(v27) = 0;
          LOBYTE(v26) = 0;
          if (v21 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v20 = v26;
          *(void *)(v13 + 56) = v27;
          *(_OWORD *)uint64_t v18 = v20;
        }
      }
    }
  }
}

void sub_336044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_336058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = 0;
    *(_OWORD *)uint64_t v28 = *(_OWORD *)a1;
    uint64_t v29 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    long long v30 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 40);
    uint64_t v32 = *(void *)(a1 + 56);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    int64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = a1;
    *(void *)(a1 + 56) = 0;
    do
    {
      uint64_t v11 = v9 + (v7 << 6) + 64;
      uint64_t v12 = 2 * v7;
      uint64_t v7 = (2 * v7) | 1;
      uint64_t v13 = v12 + 2;
      if (v12 + 2 < a4 && sub_359080(v11, v11 + 64))
      {
        v11 += 64;
        uint64_t v7 = v13;
      }
      if (*(char *)(v9 + 23) < 0) {
        operator delete(*(void **)v9);
      }
      long long v14 = *(_OWORD *)v11;
      *(void *)(v9 + 16) = *(void *)(v11 + 16);
      *(_OWORD *)uint64_t v9 = v14;
      *(unsigned char *)(v11 + 23) = 0;
      *(unsigned char *)uint64_t v11 = 0;
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(v11 + 24);
      long long v15 = (void **)(v9 + 40);
      if (*(char *)(v9 + 63) < 0) {
        operator delete(*v15);
      }
      long long v10 = *(_OWORD *)(v11 + 40);
      *(void *)(v9 + 56) = *(void *)(v11 + 56);
      *(_OWORD *)long long v15 = v10;
      *(unsigned char *)(v11 + 63) = 0;
      *(unsigned char *)(v11 + 40) = 0;
      uint64_t v9 = v11;
    }
    while (v7 <= v8);
    long long v16 = (_OWORD *)(v11 + 24);
    uint64_t v17 = (void **)(v11 + 40);
    uint64_t v18 = (long long *)(a2 - 64);
    int v19 = *(char *)(v11 + 23);
    if (v11 == a2 - 64)
    {
      if (v19 < 0)
      {
        operator delete(*(void **)v11);
        int v26 = *(char *)(v11 + 63);
        *(void *)(v11 + 16) = v29;
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v28;
        _OWORD *v16 = v30;
        if (v26 < 0) {
          operator delete(*v17);
        }
      }
      else
      {
        *(void *)(v11 + 16) = v29;
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v28;
        _OWORD *v16 = v30;
      }
      *(void *)(v11 + 56) = v32;
      *(_OWORD *)uint64_t v17 = *(_OWORD *)__p;
    }
    else
    {
      if (v19 < 0) {
        operator delete(*(void **)v11);
      }
      long long v20 = *v18;
      *(void *)(v11 + 16) = *(void *)(a2 - 48);
      *(_OWORD *)uint64_t v11 = v20;
      *(unsigned char *)(a2 - 41) = 0;
      *(unsigned char *)(a2 - 64) = 0;
      int v21 = (_OWORD *)(a2 - 40);
      _OWORD *v16 = *(_OWORD *)(a2 - 40);
      if (*(char *)(v11 + 63) < 0) {
        operator delete(*v17);
      }
      uint64_t v22 = (void **)(a2 - 24);
      long long v23 = *(_OWORD *)(a2 - 24);
      *(void *)(v11 + 56) = *(void *)(a2 - 8);
      *(_OWORD *)uint64_t v17 = v23;
      *(unsigned char *)(a2 - 1) = 0;
      *(unsigned char *)(a2 - 24) = 0;
      if (*(char *)(a2 - 41) < 0)
      {
        operator delete(*(void **)(a2 - 64));
        int v25 = *(char *)(a2 - 1);
        long long *v18 = *(_OWORD *)v28;
        *(void *)(a2 - 48) = v29;
        uint64_t v24 = a3;
        *int v21 = v30;
        if (v25 < 0) {
          operator delete(*v22);
        }
      }
      else
      {
        long long *v18 = *(_OWORD *)v28;
        *(void *)(a2 - 48) = v29;
        uint64_t v24 = a3;
        *int v21 = v30;
      }
      *(_OWORD *)uint64_t v22 = *(_OWORD *)__p;
      *(void *)(a2 - 8) = v32;
      sub_336394(a1, v11 + 64, v24, (v11 + 64 - a1) >> 6);
    }
  }
}

void sub_33636C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3023FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_336380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3023FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_336394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = a1 + (v4 >> 1 << 6);
    uint64_t v9 = a2 - 64;
    if (sub_359080(v8, a2 - 64))
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v9;
      uint64_t v17 = *(void *)(v9 + 16);
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)uint64_t v9 = 0;
      long long v18 = *(_OWORD *)(a2 - 40);
      long long v19 = *(_OWORD *)(a2 - 24);
      uint64_t v20 = *(void *)(a2 - 8);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      do
      {
        uint64_t v10 = v8;
        if (*(char *)(v9 + 23) < 0) {
          operator delete(*(void **)v9);
        }
        long long v11 = *(_OWORD *)v8;
        *(void *)(v9 + 16) = *(void *)(v8 + 16);
        *(_OWORD *)uint64_t v9 = v11;
        *(unsigned char *)(v8 + 23) = 0;
        *(unsigned char *)uint64_t v8 = 0;
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v8 + 24);
        uint64_t v12 = (void **)(v9 + 40);
        if (*(char *)(v9 + 63) < 0) {
          operator delete(*v12);
        }
        long long v13 = *(_OWORD *)(v10 + 40);
        *(void *)(v9 + 56) = *(void *)(v10 + 56);
        *(_OWORD *)uint64_t v12 = v13;
        *(unsigned char *)(v10 + 63) = 0;
        *(unsigned char *)(v10 + 40) = 0;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = a1 + (v7 << 6);
        uint64_t v9 = v10;
      }
      while ((sub_359080(v8, (uint64_t)__p) & 1) != 0);
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      long long v14 = (void **)(v10 + 40);
      *(_OWORD *)uint64_t v10 = *(_OWORD *)__p;
      *(void *)(v10 + 16) = v17;
      HIBYTE(v17) = 0;
      LOBYTE(__p[0]) = 0;
      *(_OWORD *)(v10 + 24) = v18;
      if (*(char *)(v10 + 63) < 0)
      {
        operator delete(*v14);
        int v15 = SHIBYTE(v17);
        *(_OWORD *)long long v14 = v19;
        *(void *)(v10 + 56) = v20;
        HIBYTE(v20) = 0;
        LOBYTE(v19) = 0;
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_OWORD *)long long v14 = v19;
        *(void *)(v10 + 56) = v20;
      }
    }
  }
}