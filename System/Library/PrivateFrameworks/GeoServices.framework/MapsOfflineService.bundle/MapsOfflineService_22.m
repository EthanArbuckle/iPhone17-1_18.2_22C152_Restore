void sub_9A79A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  sub_9A6B68(&a23);
  _Unwind_Resume(a1);
}

void sub_9A7A64(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *a1;
  uint64_t v39 = a1[1];
  if (*a1 != v39)
  {
    v4 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(v3 + 8);
      uint64_t v6 = *(void *)(v3 + 16);
      if (v7 != v6)
      {
        while (*(_DWORD *)v7 != 2)
        {
          v7 += 5704;
          if (v7 == v6)
          {
            uint64_t v7 = *(void *)(v3 + 16);
            break;
          }
        }
      }
      v8 = *(_OWORD **)(v7 + 2200);
      v9 = *(_OWORD **)(v7 + 2208);
      if (v8 != v9) {
        break;
      }
      char v10 = sub_97C9C0(v3);
      if (!*(unsigned char *)(v7 + 792))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      char v11 = v10;
      v13 = (char *)a2[1];
      unint64_t v12 = a2[2];
      if ((unint64_t)v13 < v12)
      {
        *(void *)v13 = *(void *)(v7 + 752);
        v13[8] = v10;
        v5 = v13 + 16;
      }
      else
      {
        v14 = (char *)*a2;
        uint64_t v15 = (uint64_t)&v13[-*a2] >> 4;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v17 = v12 - (void)v14;
        if (v17 >> 3 > v16) {
          unint64_t v16 = v17 >> 3;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18 >> 60) {
          sub_188D718();
        }
        v19 = (char *)operator new(16 * v18);
        v20 = &v19[16 * v15];
        *(void *)v20 = *(void *)(v7 + 752);
        v20[8] = v11;
        for (i = v20; v13 != v14; i[8] = v23)
        {
          uint64_t v22 = *((void *)v13 - 2);
          v13 -= 16;
          char v23 = v13[8];
          *((void *)i - 2) = v22;
          i -= 16;
        }
        v24 = &v19[16 * v18];
        v5 = v20 + 16;
        *a2 = (uint64_t)i;
        a2[1] = (uint64_t)(v20 + 16);
        a2[2] = (uint64_t)v24;
        if (v14) {
          operator delete(v14);
        }
      }
      a2[1] = (uint64_t)v5;
LABEL_5:
      v3 += 104;
      v4 = v5;
      if (v3 == v39) {
        return;
      }
    }
    while (1)
    {
      unint64_t v25 = a2[2];
      if ((unint64_t)v4 < v25)
      {
        *(_OWORD *)v4 = *v8;
        v5 = v4 + 16;
      }
      else
      {
        v26 = (char *)*a2;
        uint64_t v27 = (uint64_t)&v4[-*a2] >> 4;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v29 = v25 - (void)v26;
        if (v29 >> 3 > v28) {
          unint64_t v28 = v29 >> 3;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          if (v30 >> 60) {
            sub_188D718();
          }
          v31 = (char *)operator new(16 * v30);
          v32 = &v31[16 * v27];
          *(_OWORD *)v32 = *v8;
          uint64_t v33 = (uint64_t)v32;
          if (v4 != v26)
          {
            do
            {
LABEL_38:
              uint64_t v34 = *((void *)v4 - 2);
              v4 -= 16;
              char v35 = v4[8];
              *(void *)(v33 - 16) = v34;
              v33 -= 16;
              *(unsigned char *)(v33 + 8) = v35;
            }
            while (v4 != v26);
            v4 = (char *)*a2;
            v36 = &v31[16 * v30];
            v5 = v32 + 16;
            *a2 = v33;
            a2[1] = (uint64_t)(v32 + 16);
            a2[2] = (uint64_t)v36;
            if (!v4) {
              goto LABEL_25;
            }
LABEL_42:
            operator delete(v4);
            goto LABEL_25;
          }
        }
        else
        {
          v31 = 0;
          v32 = (char *)(16 * v27);
          *(_OWORD *)(16 * v27) = *v8;
          uint64_t v33 = 16 * v27;
          if (v4 != v26) {
            goto LABEL_38;
          }
        }
        v37 = &v31[16 * v30];
        v5 = v32 + 16;
        *a2 = v33;
        a2[1] = (uint64_t)(v32 + 16);
        a2[2] = (uint64_t)v37;
        if (v4) {
          goto LABEL_42;
        }
      }
LABEL_25:
      a2[1] = (uint64_t)v5;
      ++v8;
      v4 = v5;
      if (v8 == v9) {
        goto LABEL_5;
      }
    }
  }
}

void sub_9A7D58(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9A7D80(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 72);
  if (0x66FD0EB66FD0EB67 * ((*(void *)(v2 + 80) - v3) >> 3) <= a2) {
    sub_66748();
  }
  uint64_t v4 = v3 + 696 * a2;
  v5 = *(unsigned __int8 **)(v4 + 568);
  unint64_t v6 = *(void *)(v4 + 576) - (void)v5;
  if (v6 < 2)
  {
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    if (v6 != 1)
    {
LABEL_6:
      unsigned int v9 = 20;
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v7 = v5[1];
  }
  unsigned int v8 = *v5;
  unsigned int v9 = 1;
  switch(v8)
  {
    case 0u:
    case 6u:
    case 7u:
      goto LABEL_6;
    case 1u:
      unsigned int v9 = 7;
      break;
    case 2u:
      unsigned int v9 = 10;
      break;
    case 3u:
      unsigned int v9 = 8;
      break;
    case 4u:
      unsigned int v9 = 5;
      break;
    case 5u:
      break;
    default:
      unsigned int v9 = 0;
      break;
  }
LABEL_7:
  if (v7 > 7) {
    unsigned int v10 = 0;
  }
  else {
    unsigned int v10 = dword_20EA7F0[(char)v7];
  }
  BOOL v11 = v9 >= v10;
  BOOL v12 = v9 == v10;
  if (v9 <= v10) {
    unsigned int v13 = v8;
  }
  else {
    unsigned int v13 = v7;
  }
  unsigned int v14 = v7 << 16;
  unsigned int v15 = v8 << 8;
  if (v12 || !v11) {
    unsigned int v15 = v14;
  }
  return v15 | v13;
}

void sub_9A7EB0(int a1, uint64_t a2)
{
  if (a1 == 1)
  {
    sub_4D4B58(a2);
    return;
  }
  if (a1) {
    return;
  }
  if ((*(char *)(a2 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a2 + 71) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_15:
    operator delete(*(void **)(a2 + 48));
    int v3 = *(_DWORD *)(a2 + 32);
    if (v3 != 1) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  operator delete(*(void **)(a2 + 80));
  if (*(char *)(a2 + 71) < 0) {
    goto LABEL_15;
  }
LABEL_5:
  int v3 = *(_DWORD *)(a2 + 32);
  if (v3 != 1)
  {
LABEL_6:
    if (!v3 && *(char *)(a2 + 31) < 0)
    {
      uint64_t v4 = *(void **)(a2 + 8);
LABEL_10:
      operator delete(v4);
      return;
    }
    return;
  }
LABEL_16:
  uint64_t v4 = *(void **)(a2 + 8);
  if (v4)
  {
    *(void *)(a2 + 16) = v4;
    goto LABEL_10;
  }
}

void *sub_9A7F90(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x186186186186187) {
      sub_2E00();
    }
    unint64_t v6 = (char *)operator new(168 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    uint64_t v8 = 168 * a3;
    a1[2] = &v6[v8];
    do
    {
      uint64_t v9 = (uint64_t)&v6[v7];
      uint64_t v10 = a2 + v7;
      int v11 = *(_DWORD *)(a2 + v7 + 160);
      *(_DWORD *)&v6[v7 + 160] = v11;
      if (v11 == 1)
      {
        sub_4F58AC(v9, v10);
      }
      else if (!v11)
      {
        sub_4F57A0(v9, v10);
      }
      v7 += 168;
    }
    while (v8 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_9A8074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_9A8088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v13 = v10 + v11;
  for (uint64_t i = -v11; i; i += 168)
  {
    uint64_t v15 = v13 - 168;
    sub_9A7EB0(*(_DWORD *)(v13 - 8), v13 - 168);
    uint64_t v13 = v15;
  }
  *(void *)(v9 + 8) = v10;
  sub_9A80D0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_9A80D0(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    int v3 = **result;
    if (v3)
    {
      for (uint64_t i = (uint64_t)v2[1]; (void *)i != v3; sub_9A7EB0(v5, i))
      {
        int v5 = *(_DWORD *)(i - 8);
        i -= 168;
      }
      v2[1] = v3;
      operator delete(**v1);
      return v1;
    }
  }
  return result;
}

void *sub_9A8158(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v5 = 24 * a3;
    unint64_t v6 = (char *)operator new(24 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    uint64_t v8 = a2 + v5;
    do
    {
      uint64_t v9 = &v6[v7];
      uint64_t v10 = a2 + v7;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      sub_9A82F8((uint64_t)&v6[v7], *(void *)(a2 + v7), *(void *)(a2 + v7 + 8), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + v7 + 8) - *(void *)(a2 + v7)) >> 3));
      v7 += 24;
    }
    while (v10 + 24 != v8);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_9A8258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_9A826C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_9A8438(v10, (uint64_t)v12, v12, (uint64_t)v11, v11);
  *(void *)(v9 + 8) = v11;
  sub_9A82A0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_9A82A0(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  int v3 = *a1;
  uint64_t v4 = (void **)**a1;
  if (!v4) {
    return a1;
  }
  sub_965828((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

uint64_t sub_9A82F8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0x186186186186187) {
      sub_2E00();
    }
    result = (uint64_t)operator new(168 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 168 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        result = v8 + v9;
        uint64_t v10 = a2 + v9;
        int v11 = *(_DWORD *)(a2 + v9 + 160);
        *(_DWORD *)(v8 + v9 + 160) = v11;
        if (v11 == 1)
        {
          result = sub_4F58AC(result, v10);
        }
        else if (!v11)
        {
          result = sub_4F57A0(result, v10);
        }
        v9 += 168;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_9A83DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_9A83F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v13 = v10 + v11;
  for (uint64_t i = -v11; i; i += 168)
  {
    uint64_t v15 = v13 - 168;
    sub_9A7EB0(*(_DWORD *)(v13 - 8), v13 - 168);
    uint64_t v13 = v15;
  }
  *(void *)(v9 + 8) = v10;
  sub_9A80D0(&a9);
  _Unwind_Resume(a1);
}

void sub_9A8438(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  if (a3 != a5)
  {
    unint64_t v6 = a3;
    uint64_t v7 = a3;
    while (1)
    {
      uint64_t v10 = (char *)*(v7 - 3);
      v7 -= 3;
      uint64_t v9 = v10;
      if (!v10) {
        goto LABEL_5;
      }
      uint64_t v11 = (char *)*(v6 - 2);
      uint64_t v8 = v9;
      if (v11 != v9) {
        break;
      }
LABEL_4:
      *(v6 - 2) = v9;
      operator delete(v8);
LABEL_5:
      unint64_t v6 = v7;
      if (v7 == a5) {
        return;
      }
    }
    while (1)
    {
      BOOL v12 = v11 - 168;
      int v13 = *((_DWORD *)v11 - 2);
      if (v13 == 1)
      {
        sub_4D4B58((uint64_t)(v11 - 168));
      }
      else if (!v13)
      {
        if (*(v11 - 65) < 0)
        {
          operator delete(*((void **)v11 - 11));
          if ((*(v11 - 97) & 0x80000000) == 0) {
            goto LABEL_15;
          }
        }
        else if ((*(v11 - 97) & 0x80000000) == 0)
        {
LABEL_15:
          int v14 = *((_DWORD *)v11 - 34);
          if (v14 == 1) {
            goto LABEL_21;
          }
LABEL_16:
          if (!v14 && *(v11 - 137) < 0) {
            operator delete(*((void **)v11 - 20));
          }
          goto LABEL_10;
        }
        operator delete(*((void **)v11 - 15));
        int v14 = *((_DWORD *)v11 - 34);
        if (v14 == 1)
        {
LABEL_21:
          uint64_t v15 = (void *)*((void *)v11 - 20);
          if (v15)
          {
            *((void *)v11 - 19) = v15;
            operator delete(v15);
          }
          goto LABEL_10;
        }
        goto LABEL_16;
      }
LABEL_10:
      v11 -= 168;
      if (v12 == v9)
      {
        uint64_t v8 = *v7;
        goto LABEL_4;
      }
    }
  }
}

void *sub_9A8548(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v5 = 24 * a3;
    unint64_t v6 = (char *)operator new(24 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    uint64_t v8 = a2 + v5;
    do
    {
      uint64_t v9 = &v6[v7];
      uint64_t v10 = a2 + v7;
      *(void *)uint64_t v9 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      sub_9A8714((uint64_t)&v6[v7], *(void *)(a2 + v7), *(void *)(a2 + v7 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + v7 + 8) - *(void *)(a2 + v7)) >> 3));
      v7 += 24;
    }
    while (v10 + 24 != v8);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_9A8630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_9A8644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  if (v11) {
    sub_20AD374((uint64_t)v10 + v11, v10);
  }
  *(void *)(v9 + 8) = v10;
  sub_9A866C(&a9);
  _Unwind_Resume(a1);
}

void ***sub_9A866C(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    int v3 = (void ***)**result;
    if (v3)
    {
      uint64_t v4 = (void ***)v2[1];
      uint64_t v5 = **result;
      if (v4 != v3)
      {
        unint64_t v6 = v4 - 3;
        do
        {
          if (*v6)
          {
            sub_965828((uint64_t)v6, *v6);
            operator delete(*v6);
          }
          BOOL v7 = v6 == v3;
          v6 -= 3;
        }
        while (!v7);
        uint64_t v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_9A8714(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = (void *)result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    result = (uint64_t)operator new(24 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 24 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = (void *)(v8 + v9);
        uint64_t v11 = a2 + v9;
        *uint64_t v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        result = sub_9A82F8(v8 + v9, *(void *)(a2 + v9), *(void *)(a2 + v9 + 8), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + v9 + 8) - *(void *)(a2 + v9)) >> 3));
        v9 += 24;
      }
      while (v11 + 24 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_9A8814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_9A8828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_9A8438(v11, (uint64_t)v12, v12, (uint64_t)v10, v10);
  *(void *)(v9 + 8) = v10;
  sub_9A82A0(&a9);
  _Unwind_Resume(a1);
}

void ***sub_9A885C(void ****a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v5 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0xAAAAAAAAAAAAAAALL) {
    sub_188D718();
  }
  uint64_t v7 = 24 * v5;
  uint64_t v8 = (char *)operator new(24 * v5);
  uint64_t v9 = &v8[24 * v3];
  uint64_t v10 = (void ***)&v8[v7];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v11 = (void ***)(v9 + 24);
  BOOL v12 = *a1;
  int v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = (void ***)v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      long long v14 = *(_OWORD *)(v13 - 3);
      v13 -= 3;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((void *)v9 + 2) = v13[2];
      char *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
    }
    while (v13 != v12);
    int v13 = *a1;
    uint64_t v15 = a1[1];
    *a1 = (void ***)v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 == v13)
    {
      int v13 = v15;
      if (!v15) {
        return v11;
      }
      goto LABEL_17;
    }
    unint64_t v16 = v15 - 3;
    do
    {
      if (*v16)
      {
        sub_965828((uint64_t)v16, *v16);
        operator delete(*v16);
      }
      BOOL v17 = v16 == v13;
      v16 -= 3;
    }
    while (!v17);
  }
  if (v13) {
LABEL_17:
  }
    operator delete(v13);
  return v11;
}

uint64_t sub_9A89C4(uint64_t a1)
{
  unint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  while (v2 != v3)
  {
    unint64_t v5 = (void **)*(v2 - 3);
    v2 -= 3;
    unint64_t v4 = v5;
    *(void *)(a1 + 16) = v2;
    if (v5)
    {
      sub_965828((uint64_t)v2, v4);
      operator delete(*v2);
      uint64_t v2 = *(void ***)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_9A8A2C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x9E79E79E79E79E7ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[2] - *a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v5 = 0x186186186186186;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x186186186186186) {
    sub_188D718();
  }
  uint64_t v7 = 168 * v5;
  uint64_t v8 = (char *)operator new(168 * v5);
  uint64_t v9 = (uint64_t)&v8[168 * v3];
  int v10 = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(v9 + 160) = v10;
  if (v10 == 1)
  {
    sub_4F58AC(v9, a2);
  }
  else if (!v10)
  {
    sub_4F57A0(v9, a2);
  }
  BOOL v12 = (void *)*a1;
  uint64_t v11 = a1[1];
  if (v11 == *a1)
  {
    uint64_t v15 = (void *)a1[1];
    uint64_t v13 = v9;
  }
  else
  {
    uint64_t v13 = v9;
    do
    {
      *(_DWORD *)(v13 - 8) = *(_DWORD *)(v11 - 8);
      v13 -= 168;
      int v14 = *(_DWORD *)(v11 - 8);
      v11 -= 168;
      if (v14 == 1)
      {
        uint64_t v13 = sub_4F58AC(v13, v11);
      }
      else if (!v14)
      {
        uint64_t v13 = sub_4F57A0(v13, v11);
      }
    }
    while ((void *)v11 != v12);
    uint64_t v15 = (void *)*a1;
    uint64_t v11 = a1[1];
  }
  *a1 = v13;
  a1[1] = v9 + 168;
  a1[2] = (uint64_t)&v8[v7];
  while ((void *)v11 != v15)
  {
    int v16 = *(_DWORD *)(v11 - 8);
    v11 -= 168;
    sub_9A7EB0(v16, v11);
  }
  if (v15) {
    operator delete(v15);
  }
  return v9 + 168;
}

char *sub_9A8BD4(void ****a1, uint64_t *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  BOOL v17 = &v7[24 * v3];
  unint64_t v18 = &v7[24 * v6];
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *(void *)BOOL v17 = 0;
  sub_9A8714((uint64_t)v17, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  uint64_t v8 = (void ***)v17;
  uint64_t v9 = (void ***)(v17 + 24);
  uint64_t v11 = *a1;
  int v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = (void ***)v17;
    a1[1] = v9;
    a1[2] = (void ***)v18;
  }
  else
  {
    do
    {
      *(v8 - 3) = 0;
      *(v8 - 2) = 0;
      v8 -= 3;
      v8[2] = 0;
      long long v12 = *(_OWORD *)(v10 - 3);
      v10 -= 3;
      *(_OWORD *)uint64_t v8 = v12;
      v8[2] = v10[2];
      *int v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
    }
    while (v10 != v11);
    uint64_t v13 = *a1;
    int v10 = a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (void ***)v18;
    if (v10 != v13)
    {
      int v14 = v10 - 3;
      do
      {
        if (*v14)
        {
          sub_965828((uint64_t)v14, *v14);
          operator delete(*v14);
        }
        BOOL v15 = v14 == v13;
        v14 -= 3;
      }
      while (!v15);
      int v10 = v13;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v17 + 24;
}

void sub_9A8D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9A89C4((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_9A8D98()
{
  byte_25DC3BF = 1;
  word_25DC3A8 = 65;
  byte_25DC3D7 = 1;
  word_25DC3C0 = 65;
  char v3 = 7;
  strcpy((char *)v2, "UNKNOWN");
  int v4 = 0;
  char v6 = 14;
  strcpy((char *)v5, "ROUTES_THROUGH");
  int v7 = 1;
  char v9 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v10 = 3;
  char v12 = 11;
  strcpy((char *)v11, "ROUTES_FROM");
  int v13 = 2;
  xmmword_25DC480 = 0u;
  xmmword_25DC490 = 0u;
  dword_25DC4A0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DC480, (uint64_t)v2, (uint64_t)v2);
  sub_3A6EF0((uint64_t)&xmmword_25DC480, (uint64_t)v5, (uint64_t)v5);
  sub_3A6EF0((uint64_t)&xmmword_25DC480, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DC480, (uint64_t)v11, (uint64_t)v11);
  if (v12 < 0)
  {
    operator delete(v11[0]);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v6 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v5[0]);
      if ((v3 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v2[0]);
      goto LABEL_5;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v6 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v3 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DC3EF = 8;
  strcpy((char *)&qword_25DC3D8, "any_mode");
  byte_25DC407 = 7;
  strcpy((char *)&dword_25DC3F0, "cycling");
  byte_25DC41F = 7;
  strcpy((char *)&dword_25DC408, "driving");
  byte_25DC437 = 7;
  strcpy((char *)&dword_25DC420, "walking");
  qword_25DC440 = 0;
  qword_25DC448 = 0;
  qword_25DC438 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DC438 = (uint64_t)v0;
  qword_25DC440 = (uint64_t)(v0 + 9);
  qword_25DC448 = (uint64_t)(v0 + 9);
  qword_25DC450 = 0;
  qword_25DC458 = 0;
  unk_25DC460 = 0;
  result = (char *)operator new(9uLL);
  qword_25DC458 = (uint64_t)(result + 9);
  unk_25DC460 = result + 9;
  *(void *)result = 0x604020C00010305;
  result[8] = 13;
  qword_25DC450 = (uint64_t)result;
  byte_25DC47F = 5;
  strcpy((char *)&dword_25DC468, "{dur}");
  return result;
}

void sub_9A9080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if ((void)xmmword_25DC490) {
    sub_20AD3C0((void **)xmmword_25DC490);
  }
  v37 = (void *)xmmword_25DC480;
  *(void *)&xmmword_25DC480 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

__n128 sub_9A9120(__n128 *a1, __n128 *a2, unint64_t a3)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a1[1].n128_u64[0] = a3;
  return result;
}

BOOL sub_9A9134@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = -1;
  *(_DWORD *)(a3 + 32) = 0x7FFFFFFF;
  *(void *)(a3 + 40) = 0;
  unint64_t v5 = (std::string *)(a3 + 40);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 64) = 100;
  char v6 = (_DWORD *)(a1 + 36);
  if (*(_DWORD *)(a1 + 1208) == 2)
  {
    if (*(_DWORD *)(a1 + 40) != 0x7FFFFFFF) {
      char v6 = (_DWORD *)(a1 + 40);
    }
    if (*(_DWORD *)(a1 + 28) == 0x7FFFFFFF) {
      int v7 = (_DWORD *)(a1 + 24);
    }
    else {
      int v7 = (_DWORD *)(a1 + 28);
    }
  }
  else
  {
    int v7 = (_DWORD *)(a1 + 24);
  }
  *(_DWORD *)(a3 + 16) = 10 * (*v6 - *v7);
  *(_DWORD *)(a3 + 32) = *(_DWORD *)(a1 + 1136);
  std::string::operator=(v5, (const std::string *)(a1 + 1144));
  *(_DWORD *)(a3 + 64) = *(_DWORD *)(a1 + 1168);
  sub_994B0C(v11, (void *)a1);
  while (1)
  {
    sub_994AD8((void **)v11, v10);
    BOOL result = sub_994D74(v11, v10);
    if (!result) {
      break;
    }
    if (*(_DWORD *)sub_994DB0(v11) == 1)
    {
      *(void *)(a3 + 8) += *(void *)(sub_994DB0(v11) + 1888);
    }
    else if (*(_DWORD *)sub_994DB0(v11) == 2)
    {
      uint64_t v9 = *(void *)(a3 + 24);
      if (v9 == -1) {
        *(void *)(a3 + 24) = 1;
      }
      else {
        *(void *)(a3 + 24) = v9 + 1;
      }
    }
    sub_994B7C((uint64_t)v11);
  }
  return result;
}

void sub_9A929C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_9A92C4(uint64_t *a1, void *a2)
{
  if (*(_DWORD *)(a1[2] + 1436)) {
    return;
  }
  unint64_t v3 = 0xAFEAFEAFEAFEAFEBLL * ((uint64_t)(a2[1] - *a2) >> 4);
  if (v3 < 2) {
    return;
  }
  v90 = 0;
  v91 = 0;
  unint64_t v92 = 0;
  sub_9A9D74((uint64_t)&v90, v3);
  uint64_t v5 = a2[1] - *a2;
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = v5 / 3120;
    do
    {
      sub_9A9134(*a2 + v6, v7, (uint64_t)&v84);
      uint64_t v11 = v91;
      if ((unint64_t)v91 < v92)
      {
        long long v9 = v85;
        *(_OWORD *)v91 = v84;
        *((_OWORD *)v11 + 1) = v9;
        *((_DWORD *)v11 + 8) = v86;
        long long v10 = __p;
        *((void *)v11 + 7) = v88;
        *(_OWORD *)(v11 + 40) = v10;
        uint64_t v88 = 0;
        long long __p = 0uLL;
        *((_DWORD *)v11 + 16) = v89;
        v91 = v11 + 72;
      }
      else
      {
        v91 = sub_9AA028((void **)&v90, (uint64_t)&v84);
        if (SHIBYTE(v88) < 0) {
          operator delete((void *)__p);
        }
      }
      ++v7;
      v6 += 3120;
    }
    while (v8 != v7);
  }
  unint64_t v12 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((v91 - v90) >> 3));
  if (v91 == v90) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  sub_9AA1E8((unint64_t)v90, (uint64_t)v91, v13, 1);
  int v14 = v90;
  if (0x8E38E38E38E38E39 * ((v91 - v90) >> 3) <= 1) {
    sub_66748();
  }
  if (*((_DWORD *)v90 + 4) == *((_DWORD *)v90 + 22))
  {
    long long v84 = xmmword_20E7D40;
    LODWORD(v85) = 0;
    *((void *)&v85 + 1) = -1;
    int v86 = 0x7FFFFFFF;
    uint64_t v88 = 0;
    long long __p = 0uLL;
    int v89 = 100;
  }
  else
  {
    long long v15 = *((_OWORD *)v90 + 1);
    long long v84 = *(_OWORD *)v90;
    long long v85 = v15;
    int v86 = *((_DWORD *)v90 + 8);
    if (v90[63] < 0)
    {
      sub_4200(&__p, *((void **)v90 + 5), *((void *)v90 + 6));
    }
    else
    {
      long long v16 = *(_OWORD *)(v90 + 40);
      uint64_t v88 = *((void *)v90 + 7);
      long long __p = v16;
    }
    int v89 = *((_DWORD *)v14 + 16);
    if ((void)v84 != -1) {
      sub_9A9ED4(a1, 0, *a2 + 3120 * v84);
    }
  }
  unint64_t v17 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((v91 - v90) >> 3));
  if (v91 == v90) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v17;
  }
  sub_9ABF58((unint64_t)v90, v91, v18, 1);
  v19 = v90;
  if (0x8E38E38E38E38E39 * ((v91 - v90) >> 3) <= 1) {
    sub_66748();
  }
  if (*((void *)v90 + 1) == *((void *)v90 + 10))
  {
    long long v78 = xmmword_20E7D40;
    LODWORD(v79) = 0;
    *((void *)&v79 + 1) = -1;
    int v80 = 0x7FFFFFFF;
    uint64_t v82 = 0;
    long long v81 = 0uLL;
    int v83 = 100;
  }
  else
  {
    long long v20 = *((_OWORD *)v90 + 1);
    long long v78 = *(_OWORD *)v90;
    long long v79 = v20;
    int v80 = *((_DWORD *)v90 + 8);
    if (v90[63] < 0)
    {
      sub_4200(&v81, *((void **)v90 + 5), *((void *)v90 + 6));
    }
    else
    {
      long long v21 = *(_OWORD *)(v90 + 40);
      uint64_t v82 = *((void *)v90 + 7);
      long long v81 = v21;
    }
    int v83 = *((_DWORD *)v19 + 16);
    if ((void)v78 != -1) {
      sub_9A9ED4(a1, 2u, *a2 + 3120 * v78);
    }
  }
  uint64_t v22 = v90;
  if (v90[63] < 0)
  {
    sub_4200(__n, *((void **)v90 + 5), *((void *)v90 + 6));
    uint64_t v22 = v90;
    char v23 = v91;
    if (v90 == v91) {
      goto LABEL_91;
    }
  }
  else
  {
    *(_OWORD *)__n = *(_OWORD *)(v90 + 40);
    uint64_t v77 = *((void *)v90 + 7);
    char v23 = v91;
    if (v90 == v91)
    {
LABEL_91:
      unint64_t v48 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((v23 - v22) >> 3));
      if (v23 == v22) {
        uint64_t v49 = 0;
      }
      else {
        uint64_t v49 = v48;
      }
      sub_9ADC8C((uint64_t)v22, (unint64_t)v23, v49, 1);
      v50 = v90;
      int v97 = *((_DWORD *)v90 + 8);
      v51 = (unsigned __int8 *)&v98;
      if (v90[63] < 0)
      {
        sub_4200(&v98, *((void **)v90 + 5), *((void *)v90 + 6));
      }
      else
      {
        long long v98 = *(_OWORD *)(v90 + 40);
        uint64_t v99 = *((void *)v90 + 7);
      }
      v52 = v90;
      int v100 = *((_DWORD *)v50 + 16);
      if (0x8E38E38E38E38E39 * ((v91 - v90) >> 3) <= 1) {
        sub_66748();
      }
      int v53 = *((_DWORD *)v90 + 26);
      int v93 = v53;
      if (v90[135] < 0)
      {
        sub_4200(&v94, *((void **)v90 + 14), *((void *)v90 + 15));
        int v54 = *((_DWORD *)v52 + 34);
        int v96 = v54;
        if (v97 == v93)
        {
LABEL_100:
          uint64_t v55 = HIBYTE(v99);
          if (v99 >= 0) {
            uint64_t v56 = HIBYTE(v99);
          }
          else {
            uint64_t v56 = *((void *)&v98 + 1);
          }
          uint64_t v57 = HIBYTE(v95);
          char v58 = HIBYTE(v95);
          if (v95 < 0) {
            uint64_t v57 = *((void *)&v94 + 1);
          }
          if (v56 != v57) {
            goto LABEL_118;
          }
          if (v95 >= 0) {
            v59 = (unsigned __int8 *)&v94;
          }
          else {
            v59 = (unsigned __int8 *)v94;
          }
          if (v99 < 0)
          {
            if (memcmp((const void *)v98, v59, *((size_t *)&v98 + 1))) {
              goto LABEL_118;
            }
          }
          else if (HIBYTE(v99))
          {
            while (*v51 == *v59)
            {
              ++v51;
              ++v59;
              if (!--v55) {
                goto LABEL_122;
              }
            }
LABEL_118:
            BOOL v60 = 0;
            if ((v58 & 0x80) == 0) {
              goto LABEL_119;
            }
            goto LABEL_123;
          }
LABEL_122:
          BOOL v60 = v100 == v54;
          if ((v58 & 0x80) == 0)
          {
LABEL_119:
            if ((SHIBYTE(v99) & 0x80000000) == 0) {
              goto LABEL_120;
            }
            goto LABEL_124;
          }
LABEL_123:
          operator delete((void *)v94);
          if ((SHIBYTE(v99) & 0x80000000) == 0)
          {
LABEL_120:
            if (v60)
            {
LABEL_121:
              uint64_t v74 = 0;
              long long v73 = 0uLL;
              int v75 = 100;
LABEL_130:
              if (SHIBYTE(v74) < 0) {
                operator delete((void *)v73);
              }
              uint64_t v22 = v90;
              char v23 = v91;
              goto LABEL_133;
            }
LABEL_125:
            v61 = v90;
            long long v70 = *(_OWORD *)v90;
            if (v90[63] < 0)
            {
              sub_4200(&v73, *((void **)v90 + 5), *((void *)v90 + 6));
            }
            else
            {
              long long v62 = *(_OWORD *)(v90 + 40);
              uint64_t v74 = *((void *)v90 + 7);
              long long v73 = v62;
            }
            int v75 = *((_DWORD *)v61 + 16);
            if ((void)v70 != -1) {
              sub_9A9ED4(a1, 3u, *a2 + 3120 * v70);
            }
            goto LABEL_130;
          }
LABEL_124:
          operator delete((void *)v98);
          if (v60) {
            goto LABEL_121;
          }
          goto LABEL_125;
        }
      }
      else
      {
        long long v94 = *((_OWORD *)v90 + 7);
        uint64_t v95 = *((void *)v90 + 16);
        int v54 = *((_DWORD *)v90 + 34);
        int v96 = v54;
        if (v97 == v53) {
          goto LABEL_100;
        }
      }
      BOOL v60 = 0;
      if ((v95 & 0x8000000000000000) == 0) {
        goto LABEL_119;
      }
      goto LABEL_123;
    }
  }
  size_t v24 = __n[1];
  if (v77 >= 0) {
    size_t v25 = HIBYTE(v77);
  }
  else {
    size_t v25 = __n[1];
  }
  if (v77 < 0)
  {
    char v35 = (const void *)__n[0];
    v36 = v22;
    while (1)
    {
      int v37 = *((_DWORD *)v36 + 8);
      if (v37 == 0x7FFFFFFF) {
        break;
      }
      uint64_t v38 = v36[63];
      int v39 = (char)v38;
      if ((v38 & 0x80u) != 0) {
        uint64_t v38 = *((void *)v36 + 6);
      }
      BOOL v40 = v37 < 1 || v38 == 0;
      if (v40 || v25 != v38) {
        break;
      }
      v42 = v39 >= 0 ? v36 + 40 : (char *)*((void *)v36 + 5);
      if (memcmp(v35, v42, v24)) {
        break;
      }
      v36 += 72;
      if (v36 == v23) {
        goto LABEL_91;
      }
    }
  }
  else if (HIBYTE(v77))
  {
    v26 = v22;
LABEL_42:
    int v27 = *((_DWORD *)v26 + 8);
    if (v27 != 0x7FFFFFFF)
    {
      uint64_t v28 = v26[63];
      int v29 = (char)v28;
      if ((v28 & 0x80u) != 0) {
        uint64_t v28 = *((void *)v26 + 6);
      }
      BOOL v30 = v27 < 1 || v28 == 0;
      if (!v30 && v25 == v28)
      {
        v32 = (unsigned __int8 *)(v26 + 40);
        if (v29 < 0) {
          v32 = (unsigned __int8 *)*((void *)v26 + 5);
        }
        uint64_t v33 = __n;
        uint64_t v34 = HIBYTE(v77);
        while (*(unsigned __int8 *)v33 == *v32)
        {
          uint64_t v33 = (size_t *)((char *)v33 + 1);
          ++v32;
          if (!--v34)
          {
            v26 += 72;
            if (v26 != v23) {
              goto LABEL_42;
            }
            goto LABEL_91;
          }
        }
      }
    }
  }
  else
  {
    v43 = v22;
    while (1)
    {
      int v44 = *((_DWORD *)v43 + 8);
      if (v44 == 0x7FFFFFFF) {
        break;
      }
      uint64_t v45 = v43[63];
      if ((v45 & 0x80u) != 0) {
        uint64_t v45 = *((void *)v43 + 6);
      }
      BOOL v46 = v44 < 1 || v45 == 0;
      if (v46 || v25 != v45) {
        break;
      }
      v43 += 72;
      if (v43 == v23) {
        goto LABEL_91;
      }
    }
  }
LABEL_133:
  if (v23 - v22 == 144 && (*((void *)v22 + 3) == -1 || *((void *)v22 + 12) == -1)) {
    goto LABEL_141;
  }
  unint64_t v63 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((v23 - v22) >> 3));
  if (v23 == v22) {
    uint64_t v64 = 0;
  }
  else {
    uint64_t v64 = v63;
  }
  sub_9B03D0((unint64_t)v22, (uint64_t)v23, v64, 1);
  v65 = v90;
  if (0x8E38E38E38E38E39 * ((v91 - v90) >> 3) <= 1) {
    sub_66748();
  }
  if (*((void *)v90 + 3) == *((void *)v90 + 12))
  {
LABEL_141:
    uint64_t v74 = 0;
    long long v73 = 0uLL;
    int v75 = 100;
  }
  else
  {
    long long v71 = *(_OWORD *)v90;
    long long v72 = *((_OWORD *)v90 + 1);
    if (v90[63] < 0)
    {
      sub_4200(&v73, *((void **)v90 + 5), *((void *)v90 + 6));
    }
    else
    {
      long long v66 = *(_OWORD *)(v90 + 40);
      uint64_t v74 = *((void *)v90 + 7);
      long long v73 = v66;
    }
    int v75 = *((_DWORD *)v65 + 16);
    if ((void)v71 != -1 && *((void *)&v72 + 1) != -1) {
      sub_9A9ED4(a1, 1u, *a2 + 3120 * v71);
    }
  }
  if (SHIBYTE(v74) < 0)
  {
    operator delete((void *)v73);
    if ((SHIBYTE(v77) & 0x80000000) == 0)
    {
LABEL_150:
      if ((SHIBYTE(v82) & 0x80000000) == 0) {
        goto LABEL_151;
      }
      goto LABEL_156;
    }
  }
  else if ((SHIBYTE(v77) & 0x80000000) == 0)
  {
    goto LABEL_150;
  }
  operator delete((void *)__n[0]);
  if ((SHIBYTE(v82) & 0x80000000) == 0)
  {
LABEL_151:
    if ((SHIBYTE(v88) & 0x80000000) == 0) {
      goto LABEL_152;
    }
LABEL_157:
    operator delete((void *)__p);
    v67 = v90;
    if (!v90) {
      return;
    }
    goto LABEL_158;
  }
LABEL_156:
  operator delete((void *)v81);
  if (SHIBYTE(v88) < 0) {
    goto LABEL_157;
  }
LABEL_152:
  v67 = v90;
  if (!v90) {
    return;
  }
LABEL_158:
  v68 = v91;
  v69 = v67;
  if (v91 != v67)
  {
    do
    {
      if (*(v68 - 9) < 0) {
        operator delete(*((void **)v68 - 4));
      }
      v68 -= 72;
    }
    while (v68 != v67);
    v69 = v90;
  }
  v91 = v67;
  operator delete(v69);
}

void sub_9A9C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a27 < 0)
  {
    operator delete(a22);
    if ((a39 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else if ((a39 & 0x80000000) == 0)
  {
LABEL_5:
    if (a52 < 0) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }
  operator delete(a34);
  if (a52 < 0)
  {
LABEL_6:
    operator delete(a47);
    sub_9A9FB4((void **)(v52 - 192));
    _Unwind_Resume(a1);
  }
LABEL_9:
  sub_9A9FB4((void **)(v52 - 192));
  _Unwind_Resume(a1);
}

void sub_9A9D60(_Unwind_Exception *a1)
{
  sub_9A9FB4((void **)(v1 - 192));
  _Unwind_Resume(a1);
}

void sub_9A9D74(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void ***)a1;
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_2E00();
  }
  int v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 72 * a2;
  uint64_t v6 = (char *)operator new(72 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v9 = 0;
  do
  {
    long long v10 = &v8[v9 * 8];
    uint64_t v11 = &v4[v9];
    long long v12 = *(_OWORD *)&v4[v9 - 9];
    *(_OWORD *)(v10 - 56) = *(_OWORD *)&v4[v9 - 7];
    *(_OWORD *)(v10 - 72) = v12;
    *((_DWORD *)v10 - 10) = v4[v9 - 5];
    long long v13 = *(_OWORD *)&v4[v9 - 4];
    *((void *)v10 - 2) = v4[v9 - 2];
    *((_OWORD *)v10 - 2) = v13;
    *(v11 - 3) = 0;
    *(v11 - 2) = 0;
    *(v11 - 4) = 0;
    *((_DWORD *)v10 - 2) = v4[v9 - 1];
    v9 -= 9;
  }
  while (&v4[v9] != v2);
  int v14 = *(void ***)a1;
  uint64_t v2 = *(void ***)(a1 + 8);
  *(void *)a1 = &v8[v9 * 8];
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v14)
  {
    do
    {
      if (*((char *)v2 - 9) < 0) {
        operator delete(*(v2 - 4));
      }
      v2 -= 9;
    }
    while (v2 != v14);
    uint64_t v2 = v14;
  }
  if (v2)
  {
LABEL_13:
    operator delete(v2);
  }
}

void sub_9A9ED4(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 1024))
  {
    *(_DWORD *)(a3 + 1020) = a2;
    *(unsigned char *)(a3 + 1024) = 1;
    memset(&v7, 0, sizeof(v7));
    if (a2 < 4) {
      std::string::assign(&v7, off_243C5D0[a2]);
    }
    uint64_t v5 = (void *)(a3 + 856);
    if (sub_45FB38(v5))
    {
      uint64_t v6 = sub_8D7730(*a1, (uint64_t)&v7);
      sub_5F3D48((uint64_t)v8, (uint64_t)v6);
      sub_4D90B4((uint64_t)v5, (uint64_t)v8);
      sub_4D4B58((uint64_t)v8);
    }
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
  }
}

void sub_9A9F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_9A9FB4(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    unint64_t v3 = (void **)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0) {
          operator delete(*(v3 - 4));
        }
        v3 -= 9;
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_9AA028(void **a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v5 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x38E38E38E38E38ELL) {
    sub_188D718();
  }
  uint64_t v7 = 72 * v5;
  uint64_t v8 = (char *)operator new(72 * v5);
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v10 = &v8[72 * v3];
  uint64_t v11 = &v8[v7];
  *(_OWORD *)long long v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v9;
  *((_DWORD *)v10 + 8) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(a2 + 40);
  *((void *)v10 + 7) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *((_DWORD *)v10 + 16) = *(_DWORD *)(a2 + 64);
  long long v12 = v10 + 72;
  long long v13 = (void **)*a1;
  int v14 = (void **)a1[1];
  if (v14 == *a1)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
    if (!v14) {
      return v12;
    }
    goto LABEL_18;
  }
  uint64_t v15 = 0;
  do
  {
    long long v16 = &v10[v15 * 8];
    unint64_t v17 = &v14[v15];
    long long v18 = *(_OWORD *)&v14[v15 - 9];
    *(_OWORD *)(v16 - 56) = *(_OWORD *)&v14[v15 - 7];
    *(_OWORD *)(v16 - 72) = v18;
    *((_DWORD *)v16 - 10) = v14[v15 - 5];
    long long v19 = *(_OWORD *)&v14[v15 - 4];
    *((void *)v16 - 2) = v14[v15 - 2];
    *((_OWORD *)v16 - 2) = v19;
    *(v17 - 3) = 0;
    *(v17 - 2) = 0;
    *(v17 - 4) = 0;
    *((_DWORD *)v16 - 2) = v14[v15 - 1];
    v15 -= 9;
  }
  while (&v14[v15] != v13);
  long long v20 = (void **)*a1;
  int v14 = (void **)a1[1];
  *a1 = &v10[v15 * 8];
  a1[1] = v12;
  a1[2] = v11;
  if (v14 != v20)
  {
    do
    {
      if (*((char *)v14 - 9) < 0) {
        operator delete(*(v14 - 4));
      }
      v14 -= 9;
    }
    while (v14 != v20);
    int v14 = v20;
  }
  if (v14) {
LABEL_18:
  }
    operator delete(v14);
  return v12;
}

void sub_9AA1E8(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    v143 = (long long *)(a2 - 144);
    v144 = (long long *)(a2 - 72);
    uint64_t v163 = a2;
    v142 = (long long *)(a2 - 216);
    unint64_t v8 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v8;
          long long v9 = (_OWORD *)v163;
          uint64_t v10 = v163 - v8;
          uint64_t v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v163 - v8) >> 3);
          if (v5 || !v4)
          {
            switch(v11)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*(_DWORD *)(v163 - 56) < *(_DWORD *)(a1 + 16))
                {
                  long long v169 = *(_OWORD *)a1;
                  long long v177 = *(_OWORD *)(a1 + 16);
                  int v67 = *(_DWORD *)(a1 + 32);
                  uint64_t v68 = *(void *)(a1 + 40);
                  *(void *)v191 = *(void *)(a1 + 48);
                  *(void *)&v191[7] = *(void *)(a1 + 55);
                  char v69 = *(unsigned char *)(a1 + 63);
                  *(void *)(a1 + 48) = 0;
                  *(void *)(a1 + 56) = 0;
                  *(void *)(a1 + 40) = 0;
                  int v70 = *(_DWORD *)(a1 + 64);
                  long long v71 = *(_OWORD *)(v163 - 56);
                  *(_OWORD *)a1 = *(_OWORD *)(v163 - 72);
                  *(_OWORD *)(a1 + 16) = v71;
                  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v163 - 40);
                  long long v72 = *(_OWORD *)(v163 - 32);
                  *(void *)(a1 + 56) = *(void *)(v163 - 16);
                  *(_OWORD *)(a1 + 40) = v72;
                  *(unsigned char *)(v163 - 9) = 0;
                  *(unsigned char *)(v163 - 32) = 0;
                  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v163 - 8);
                  *(_OWORD *)(v163 - 56) = v177;
                  *(_OWORD *)(v163 - 72) = v169;
                  *(_DWORD *)(v163 - 40) = v67;
                  if (*(char *)(v163 - 9) < 0) {
                    operator delete(*(void **)(v163 - 32));
                  }
                  *(void *)(v163 - 32) = v68;
                  *(void *)(v163 - 17) = *(void *)&v191[7];
                  *(void *)(v163 - 24) = *(void *)v191;
                  *(unsigned char *)(v163 - 9) = v69;
                  *(_DWORD *)(v163 - 8) = v70;
                }
                break;
              case 3:
                sub_9AB590((long long *)a1, (long long *)(a1 + 72), v144);
                break;
              case 4:
                sub_9ABCC8(a1, a1 + 72, a1 + 144, (uint64_t)v144);
                break;
              case 5:
                sub_9AB240(a1, a1 + 72, a1 + 144, a1 + 216, (uint64_t)v144);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v10 <= 1727)
          {
            long long v73 = (_OWORD *)(a1 + 72);
            BOOL v75 = a1 == v163 || v73 == (_OWORD *)v163;
            if (a4)
            {
              if (!v75)
              {
                uint64_t v76 = 0;
                unint64_t v77 = a1;
                do
                {
                  long long v78 = v73;
                  int v79 = *(_DWORD *)(v77 + 88);
                  if (v79 < *(_DWORD *)(v77 + 16))
                  {
                    long long v170 = *v73;
                    uint64_t v198 = *(void *)(v77 + 92);
                    int v80 = *(_DWORD *)(v77 + 104);
                    int v202 = *(_DWORD *)(v77 + 100);
                    uint64_t v159 = *(void *)(v77 + 112);
                    *(void *)v192 = *(void *)(v77 + 120);
                    *(void *)&v192[7] = *(void *)(v77 + 127);
                    char v81 = *(unsigned char *)(v77 + 135);
                    *(void *)(v77 + 120) = 0;
                    *(void *)(v77 + 128) = 0;
                    *(void *)(v77 + 112) = 0;
                    uint64_t v82 = v76;
                    int v83 = *(_DWORD *)(v77 + 136);
                    while (1)
                    {
                      uint64_t v84 = v82;
                      uint64_t v85 = a1 + v82;
                      long long v86 = *(_OWORD *)(a1 + v82 + 16);
                      *(_OWORD *)(v85 + 72) = *(_OWORD *)(a1 + v82);
                      *(_OWORD *)(v85 + 88) = v86;
                      *(_DWORD *)(v85 + 104) = *(_DWORD *)(a1 + v82 + 32);
                      uint64_t v87 = a1 + v82 + 112;
                      if (*(char *)(a1 + v82 + 135) < 0) {
                        operator delete(*(void **)v87);
                      }
                      *(_OWORD *)uint64_t v87 = *(_OWORD *)(v85 + 40);
                      *(void *)(v87 + 16) = *(void *)(v85 + 56);
                      *(unsigned char *)(v85 + 63) = 0;
                      *(unsigned char *)(v85 + 40) = 0;
                      *(_DWORD *)(v85 + 136) = *(_DWORD *)(v85 + 64);
                      if (!v84) {
                        break;
                      }
                      uint64_t v82 = v84 - 72;
                      if (v79 >= *(_DWORD *)(a1 + v84 - 56))
                      {
                        unint64_t v88 = a1 + v84;
                        goto LABEL_98;
                      }
                    }
                    unint64_t v88 = a1;
LABEL_98:
                    *(_OWORD *)unint64_t v88 = v170;
                    *(_DWORD *)(v88 + 16) = v79;
                    *(void *)(v88 + 20) = v198;
                    *(_DWORD *)(v88 + 28) = v202;
                    *(_DWORD *)(v88 + 32) = v80;
                    uint64_t v89 = a1 + v84;
                    if (*(char *)(v88 + 63) < 0) {
                      operator delete(*(void **)(v89 + 40));
                    }
                    long long v9 = (_OWORD *)v163;
                    *(void *)(v89 + 40) = v159;
                    *(void *)(v88 + 48) = *(void *)v192;
                    *(void *)(v88 + 55) = *(void *)&v192[7];
                    *(unsigned char *)(v88 + 63) = v81;
                    *(_DWORD *)(v88 + 64) = v83;
                  }
                  long long v73 = (_OWORD *)((char *)v78 + 72);
                  v76 += 72;
                  unint64_t v77 = (unint64_t)v78;
                }
                while ((_OWORD *)((char *)v78 + 72) != v9);
              }
            }
            else if (!v75)
            {
              v130 = (_DWORD *)(a1 + 136);
              do
              {
                v131 = v73;
                int v132 = *(_DWORD *)(a1 + 88);
                if (v132 < *(_DWORD *)(a1 + 16))
                {
                  long long v173 = *v73;
                  uint64_t v201 = *(void *)(a1 + 92);
                  int v133 = *(_DWORD *)(a1 + 104);
                  int v204 = *(_DWORD *)(a1 + 100);
                  uint64_t v134 = *(void *)(a1 + 112);
                  *(void *)v195 = *(void *)(a1 + 120);
                  *(void *)&v195[7] = *(void *)(a1 + 127);
                  char v135 = *(unsigned char *)(a1 + 135);
                  *(void *)(a1 + 120) = 0;
                  *(void *)(a1 + 128) = 0;
                  *(void *)(a1 + 112) = 0;
                  v136 = v130;
                  int v137 = *(_DWORD *)(a1 + 136);
                  do
                  {
                    long long v140 = *(_OWORD *)(v136 - 30);
                    *((_OWORD *)v136 - 4) = *(_OWORD *)(v136 - 34);
                    *((_OWORD *)v136 - 3) = v140;
                    *(v136 - 8) = *(v136 - 26);
                    v141 = (void **)(v136 - 6);
                    if (*((char *)v136 - 1) < 0) {
                      operator delete(*v141);
                    }
                    *(_OWORD *)v141 = *((_OWORD *)v136 - 6);
                    *((void *)v136 - 1) = *((void *)v136 - 10);
                    *((unsigned char *)v136 - 73) = 0;
                    *((unsigned char *)v136 - 96) = 0;
                    v138 = v136 - 18;
                    _DWORD *v136 = *(v136 - 18);
                    int v139 = *(v136 - 48);
                    v136 -= 18;
                  }
                  while (v132 < v139);
                  *((_OWORD *)v138 - 4) = v173;
                  *(v138 - 12) = v132;
                  *(void *)(v138 - 11) = v201;
                  *(v138 - 9) = v204;
                  *(v138 - 8) = v133;
                  if (*((char *)v138 - 1) < 0) {
                    operator delete(*((void **)v138 - 3));
                  }
                  *((void *)v138 - 3) = v134;
                  *(void *)((char *)v138 - 9) = *(void *)&v195[7];
                  *((void *)v138 - 2) = *(void *)v195;
                  *((unsigned char *)v138 - 1) = v135;
                  _DWORD *v138 = v137;
                  long long v9 = (_OWORD *)v163;
                }
                long long v73 = (_OWORD *)((char *)v131 + 72);
                v130 += 18;
                a1 = (unint64_t)v131;
              }
              while ((_OWORD *)((char *)v131 + 72) != v9);
            }
            return;
          }
          if (!a3)
          {
            if (a1 != v163)
            {
              int64_t v90 = (unint64_t)(v11 - 2) >> 1;
              int64_t v91 = v90;
              do
              {
                int64_t v92 = v91;
                if (v90 >= v91)
                {
                  uint64_t v93 = (2 * v91) | 1;
                  unint64_t v94 = a1 + 72 * v93;
                  if (2 * v92 + 2 < v11)
                  {
                    BOOL v95 = *(_DWORD *)(v94 + 16) < *(_DWORD *)(v94 + 88);
                    v94 += 72 * v95;
                    if (v95) {
                      uint64_t v93 = 2 * v92 + 2;
                    }
                  }
                  unint64_t v96 = a1 + 72 * v92;
                  int v97 = *(_DWORD *)(v96 + 16);
                  if (*(_DWORD *)(v94 + 16) >= v97)
                  {
                    long long v171 = *(_OWORD *)v96;
                    int v203 = *(_DWORD *)(v96 + 28);
                    uint64_t v199 = *(void *)(v96 + 20);
                    unint64_t v98 = a1 + 72 * v92;
                    int v148 = *(_DWORD *)(v98 + 32);
                    uint64_t v160 = *(void *)(v98 + 40);
                    *(void *)&v193[7] = *(void *)(v98 + 55);
                    *(void *)v193 = *(void *)(v98 + 48);
                    char v154 = *(unsigned char *)(v96 + 63);
                    *(void *)(v98 + 40) = 0;
                    *(void *)(v98 + 48) = 0;
                    *(void *)(v98 + 56) = 0;
                    int v151 = *(_DWORD *)(v98 + 64);
                    do
                    {
                      unint64_t v99 = v94;
                      long long v100 = *(_OWORD *)(v94 + 16);
                      *(_OWORD *)unint64_t v96 = *(_OWORD *)v94;
                      *(_OWORD *)(v96 + 16) = v100;
                      *(_DWORD *)(v96 + 32) = *(_DWORD *)(v94 + 32);
                      v101 = (void **)(v96 + 40);
                      if (*(char *)(v96 + 63) < 0) {
                        operator delete(*v101);
                      }
                      long long v102 = *(_OWORD *)(v99 + 40);
                      *(void *)(v96 + 56) = *(void *)(v99 + 56);
                      *(_OWORD *)v101 = v102;
                      *(unsigned char *)(v99 + 63) = 0;
                      *(unsigned char *)(v99 + 40) = 0;
                      *(_DWORD *)(v96 + 64) = *(_DWORD *)(v99 + 64);
                      if (v90 < v93) {
                        break;
                      }
                      uint64_t v103 = (2 * v93) | 1;
                      unint64_t v94 = a1 + 72 * v103;
                      if (2 * v93 + 2 < v11)
                      {
                        BOOL v95 = *(_DWORD *)(v94 + 16) < *(_DWORD *)(v94 + 88);
                        v94 += 72 * v95;
                        if (v95) {
                          uint64_t v103 = 2 * v93 + 2;
                        }
                      }
                      unint64_t v96 = v99;
                      uint64_t v93 = v103;
                    }
                    while (*(_DWORD *)(v94 + 16) >= v97);
                    *(_OWORD *)unint64_t v99 = v171;
                    *(_DWORD *)(v99 + 16) = v97;
                    *(void *)(v99 + 20) = v199;
                    *(_DWORD *)(v99 + 28) = v203;
                    *(_DWORD *)(v99 + 32) = v148;
                    if (*(char *)(v99 + 63) < 0) {
                      operator delete(*(void **)(v99 + 40));
                    }
                    *(void *)(v99 + 40) = v160;
                    *(void *)(v99 + 48) = *(void *)v193;
                    *(void *)(v99 + 55) = *(void *)&v193[7];
                    *(unsigned char *)(v99 + 63) = v154;
                    *(_DWORD *)(v99 + 64) = v151;
                    long long v9 = (_OWORD *)v163;
                  }
                }
                int64_t v91 = v92 - 1;
              }
              while (v92);
              int64_t v104 = v10 / 0x48uLL;
              do
              {
                uint64_t v105 = 0;
                v106 = v9;
                long long v172 = *(_OWORD *)a1;
                long long v178 = *(_OWORD *)(a1 + 16);
                int v107 = *(_DWORD *)(a1 + 32);
                uint64_t v161 = *(void *)(a1 + 40);
                *(void *)v181 = *(void *)(a1 + 48);
                *(void *)&v181[7] = *(void *)(a1 + 55);
                char v164 = *(unsigned char *)(a1 + 63);
                *(void *)(a1 + 48) = 0;
                *(void *)(a1 + 56) = 0;
                *(void *)(a1 + 40) = 0;
                unint64_t v108 = a1;
                int v155 = *(_DWORD *)(a1 + 64);
                do
                {
                  uint64_t v110 = v108 + 72 * v105 + 72;
                  uint64_t v111 = 2 * v105;
                  uint64_t v105 = (2 * v105) | 1;
                  uint64_t v112 = v111 + 2;
                  if (v111 + 2 < v104)
                  {
                    int v113 = *(_DWORD *)(v110 + 16);
                    int v114 = *(_DWORD *)(v110 + 88);
                    v110 += 72 * (v113 < v114);
                    if (v113 < v114) {
                      uint64_t v105 = v112;
                    }
                  }
                  long long v115 = *(_OWORD *)(v110 + 16);
                  *(_OWORD *)unint64_t v108 = *(_OWORD *)v110;
                  *(_OWORD *)(v108 + 16) = v115;
                  *(_DWORD *)(v108 + 32) = *(_DWORD *)(v110 + 32);
                  v116 = (void **)(v108 + 40);
                  if (*(char *)(v108 + 63) < 0) {
                    operator delete(*v116);
                  }
                  long long v109 = *(_OWORD *)(v110 + 40);
                  *(void *)(v108 + 56) = *(void *)(v110 + 56);
                  *(_OWORD *)v116 = v109;
                  *(unsigned char *)(v110 + 63) = 0;
                  *(unsigned char *)(v110 + 40) = 0;
                  *(_DWORD *)(v108 + 64) = *(_DWORD *)(v110 + 64);
                  unint64_t v108 = v110;
                }
                while (v105 <= (uint64_t)((unint64_t)(v104 - 2) >> 1));
                v117 = (void **)(v110 + 40);
                long long v9 = (_OWORD *)((char *)v106 - 72);
                if ((_OWORD *)v110 == (_OWORD *)((char *)v106 - 72))
                {
                  *(_OWORD *)uint64_t v110 = v172;
                  *(_OWORD *)(v110 + 16) = v178;
                  *(_DWORD *)(v110 + 32) = v107;
                  if (*(char *)(v110 + 63) < 0) {
                    operator delete(*v117);
                  }
                  *(void *)(v110 + 40) = v161;
                  *(void *)(v110 + 48) = *(void *)v181;
                  *(void *)(v110 + 55) = *(void *)&v181[7];
                  *(unsigned char *)(v110 + 63) = v164;
                  *(_DWORD *)(v110 + 64) = v155;
                }
                else
                {
                  long long v118 = *(_OWORD *)((char *)v106 - 56);
                  *(_OWORD *)uint64_t v110 = *v9;
                  *(_OWORD *)(v110 + 16) = v118;
                  *(_DWORD *)(v110 + 32) = *((_DWORD *)v106 - 10);
                  if (*(char *)(v110 + 63) < 0) {
                    operator delete(*v117);
                  }
                  long long v119 = *(v106 - 2);
                  *(void *)(v110 + 56) = *((void *)v106 - 2);
                  *(_OWORD *)v117 = v119;
                  *((unsigned char *)v106 - 9) = 0;
                  *((unsigned char *)v106 - 32) = 0;
                  *(_DWORD *)(v110 + 64) = *((_DWORD *)v106 - 2);
                  _OWORD *v9 = v172;
                  *(_OWORD *)((char *)v106 - 56) = v178;
                  *((_DWORD *)v106 - 10) = v107;
                  if (*((char *)v106 - 9) < 0) {
                    operator delete(*((void **)v106 - 4));
                  }
                  *((void *)v106 - 4) = v161;
                  *(void *)((char *)v106 - 17) = *(void *)&v181[7];
                  *((void *)v106 - 3) = *(void *)v181;
                  *((unsigned char *)v106 - 9) = v164;
                  *((_DWORD *)v106 - 2) = v155;
                  uint64_t v120 = v110 + 72 - a1;
                  if (v120 >= 73)
                  {
                    unint64_t v121 = (v120 / 0x48uLL - 2) >> 1;
                    unint64_t v122 = a1 + 72 * v121;
                    int v123 = *(_DWORD *)(v110 + 16);
                    if (*(_DWORD *)(v122 + 16) < v123)
                    {
                      v165 = (_OWORD *)((char *)v106 - 72);
                      long long v194 = *(_OWORD *)v110;
                      int v187 = *(_DWORD *)(v110 + 28);
                      uint64_t v184 = *(void *)(v110 + 20);
                      int v124 = *(_DWORD *)(v110 + 32);
                      uint64_t v156 = *(void *)(v110 + 40);
                      *(void *)v200 = *(void *)(v110 + 48);
                      *(void *)&v200[7] = *(void *)(v110 + 55);
                      char v162 = *(unsigned char *)(v110 + 63);
                      *v117 = 0;
                      *(void *)(v110 + 48) = 0;
                      *(void *)(v110 + 56) = 0;
                      int v125 = *(_DWORD *)(v110 + 64);
                      do
                      {
                        uint64_t v126 = v122;
                        long long v127 = *(_OWORD *)(v122 + 16);
                        *(_OWORD *)uint64_t v110 = *(_OWORD *)v122;
                        *(_OWORD *)(v110 + 16) = v127;
                        *(_DWORD *)(v110 + 32) = *(_DWORD *)(v122 + 32);
                        v128 = (void **)(v110 + 40);
                        if (*(char *)(v110 + 63) < 0) {
                          operator delete(*v128);
                        }
                        long long v129 = *(_OWORD *)(v126 + 40);
                        *(void *)(v110 + 56) = *(void *)(v126 + 56);
                        *(_OWORD *)v128 = v129;
                        *(unsigned char *)(v126 + 63) = 0;
                        *(unsigned char *)(v126 + 40) = 0;
                        *(_DWORD *)(v110 + 64) = *(_DWORD *)(v126 + 64);
                        if (!v121) {
                          break;
                        }
                        unint64_t v121 = (v121 - 1) >> 1;
                        unint64_t v122 = a1 + 72 * v121;
                        uint64_t v110 = v126;
                      }
                      while (*(_DWORD *)(v122 + 16) < v123);
                      *(_OWORD *)uint64_t v126 = v194;
                      *(_DWORD *)(v126 + 16) = v123;
                      *(void *)(v126 + 20) = v184;
                      *(_DWORD *)(v126 + 28) = v187;
                      *(_DWORD *)(v126 + 32) = v124;
                      if (*(char *)(v126 + 63) < 0) {
                        operator delete(*(void **)(v126 + 40));
                      }
                      *(void *)(v126 + 40) = v156;
                      *(void *)(v126 + 48) = *(void *)v200;
                      *(void *)(v126 + 55) = *(void *)&v200[7];
                      *(unsigned char *)(v126 + 63) = v162;
                      *(_DWORD *)(v126 + 64) = v125;
                      long long v9 = v165;
                    }
                  }
                }
                BOOL v95 = v104-- <= 2;
              }
              while (!v95);
            }
            return;
          }
          unint64_t v12 = (unint64_t)v11 >> 1;
          unint64_t v13 = a1 + 72 * ((unint64_t)v11 >> 1);
          if ((unint64_t)v10 < 0x2401)
          {
            sub_9AB590((long long *)v13, (long long *)a1, v144);
            --a3;
            if (a4)
            {
LABEL_14:
              int v22 = *(_DWORD *)(a1 + 16);
              break;
            }
          }
          else
          {
            sub_9AB590((long long *)a1, (long long *)v13, v144);
            uint64_t v14 = 72 * v12;
            unint64_t v15 = a1 + 72 * v12;
            sub_9AB590((long long *)(a1 + 72), (long long *)(v15 - 72), v143);
            sub_9AB590((long long *)(a1 + 144), (long long *)(a1 + 72 + v14), v142);
            long long v9 = (_OWORD *)v163;
            sub_9AB590((long long *)(v15 - 72), (long long *)v13, (long long *)(a1 + 72 + v14));
            long long v166 = *(_OWORD *)a1;
            long long v174 = *(_OWORD *)(a1 + 16);
            int v16 = *(_DWORD *)(a1 + 32);
            *(void *)((char *)&v188 + 7) = *(void *)(a1 + 55);
            uint64_t v17 = *(void *)(a1 + 40);
            *(void *)&long long v188 = *(void *)(a1 + 48);
            char v18 = *(unsigned char *)(a1 + 63);
            *(void *)(a1 + 48) = 0;
            *(void *)(a1 + 56) = 0;
            *(void *)(a1 + 40) = 0;
            int v19 = *(_DWORD *)(a1 + 64);
            long long v20 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(_OWORD *)(a1 + 16) = v20;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(v15 + 32);
            long long v21 = *(_OWORD *)(v15 + 40);
            *(void *)(a1 + 56) = *(void *)(v15 + 56);
            *(_OWORD *)(a1 + 40) = v21;
            *(unsigned char *)(v13 + 63) = 0;
            *(unsigned char *)(v15 + 40) = 0;
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(v15 + 64);
            *(_OWORD *)unint64_t v13 = v166;
            *(_OWORD *)(v13 + 16) = v174;
            *(_DWORD *)(v15 + 32) = v16;
            *(void *)(v15 + 40) = v17;
            *(void *)(v15 + 48) = v188;
            *(void *)(v15 + 55) = *(void *)((char *)&v188 + 7);
            *(unsigned char *)(v13 + 63) = v18;
            *(_DWORD *)(v15 + 64) = v19;
            --a3;
            if (a4) {
              goto LABEL_14;
            }
          }
          int v22 = *(_DWORD *)(a1 + 16);
          if (*(_DWORD *)(a1 - 56) < v22) {
            break;
          }
          long long v189 = *(_OWORD *)a1;
          int v23 = *(_DWORD *)(a1 + 16);
          int v149 = *(_DWORD *)(a1 + 32);
          int v185 = *(_DWORD *)(a1 + 28);
          uint64_t v182 = *(void *)(a1 + 20);
          size_t v24 = (void **)(a1 + 40);
          uint64_t v152 = *(void *)(a1 + 40);
          *(void *)v179 = *(void *)(a1 + 48);
          *(void *)&v179[7] = *(void *)(a1 + 55);
          char v157 = *(unsigned char *)(a1 + 63);
          *(void *)(a1 + 40) = 0;
          *(void *)(a1 + 48) = 0;
          *(void *)(a1 + 56) = 0;
          if (v23 >= *((_DWORD *)v9 - 14))
          {
            unint64_t v50 = a1 + 72;
            do
            {
              unint64_t v8 = v50;
              if (v50 >= (unint64_t)v9) {
                break;
              }
              int v51 = *(_DWORD *)(v50 + 16);
              v50 += 72;
            }
            while (v23 >= v51);
          }
          else
          {
            unint64_t v25 = a1;
            do
            {
              unint64_t v8 = v25 + 72;
              int v26 = *(_DWORD *)(v25 + 88);
              v25 += 72;
            }
            while (v23 >= v26);
          }
          uint64_t v52 = v9;
          if (v8 < (unint64_t)v9)
          {
            int v53 = v9;
            do
            {
              uint64_t v52 = (_OWORD *)((char *)v53 - 72);
              int v54 = *((_DWORD *)v53 - 14);
              int v53 = (_OWORD *)((char *)v53 - 72);
            }
            while (v23 < v54);
          }
          int v55 = *(_DWORD *)(a1 + 64);
          while (v8 < (unint64_t)v52)
          {
            long long v168 = *(_OWORD *)v8;
            long long v176 = *(_OWORD *)(v8 + 16);
            int v56 = *(_DWORD *)(v8 + 32);
            uint64_t v57 = *(void *)(v8 + 40);
            *(void *)v197 = *(void *)(v8 + 48);
            *(void *)&v197[7] = *(void *)(v8 + 55);
            char v58 = *(unsigned char *)(v8 + 63);
            *(void *)(v8 + 48) = 0;
            *(void *)(v8 + 56) = 0;
            *(void *)(v8 + 40) = 0;
            int v59 = *(_DWORD *)(v8 + 64);
            long long v60 = v52[1];
            *(_OWORD *)unint64_t v8 = *v52;
            *(_OWORD *)(v8 + 16) = v60;
            *(_DWORD *)(v8 + 32) = *((_DWORD *)v52 + 8);
            long long v61 = *(_OWORD *)((char *)v52 + 40);
            *(void *)(v8 + 56) = *((void *)v52 + 7);
            *(_OWORD *)(v8 + 40) = v61;
            *((unsigned char *)v52 + 63) = 0;
            *((unsigned char *)v52 + 40) = 0;
            *(_DWORD *)(v8 + 64) = *((_DWORD *)v52 + 16);
            _OWORD *v52 = v168;
            v52[1] = v176;
            *((_DWORD *)v52 + 8) = v56;
            if (*((char *)v52 + 63) < 0) {
              operator delete(*((void **)v52 + 5));
            }
            *((void *)v52 + 5) = v57;
            *((void *)v52 + 6) = *(void *)v197;
            *(void *)((char *)v52 + 55) = *(void *)&v197[7];
            *((unsigned char *)v52 + 63) = v58;
            *((_DWORD *)v52 + 16) = v59;
            do
            {
              int v62 = *(_DWORD *)(v8 + 88);
              v8 += 72;
            }
            while (v23 >= v62);
            do
            {
              int v63 = *((_DWORD *)v52 - 14);
              uint64_t v52 = (_OWORD *)((char *)v52 - 72);
            }
            while (v23 < v63);
          }
          uint64_t v64 = (long long *)(v8 - 72);
          BOOL v4 = v8 - 72 >= a1;
          BOOL v5 = v8 - 72 == a1;
          if (v8 - 72 != a1)
          {
            long long v65 = *(_OWORD *)(v8 - 56);
            *(_OWORD *)a1 = *v64;
            *(_OWORD *)(a1 + 16) = v65;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 - 40);
            if (*(char *)(a1 + 63) < 0) {
              operator delete(*v24);
            }
            long long v66 = *(_OWORD *)(v8 - 32);
            *(void *)(a1 + 56) = *(void *)(v8 - 16);
            *(_OWORD *)size_t v24 = v66;
            *(unsigned char *)(v8 - 9) = 0;
            *(unsigned char *)(v8 - 32) = 0;
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 - 8);
          }
          *uint64_t v64 = v189;
          *(_DWORD *)(v8 - 56) = v23;
          *(void *)(v8 - 52) = v182;
          *(_DWORD *)(v8 - 44) = v185;
          *(_DWORD *)(v8 - 40) = v149;
          if (*(char *)(v8 - 9) < 0) {
            operator delete(*(void **)(v8 - 32));
          }
          a4 = 0;
          *(void *)(v8 - 32) = v152;
          *(void *)(v8 - 17) = *(void *)&v179[7];
          *(void *)(v8 - 24) = *(void *)v179;
          *(unsigned char *)(v8 - 9) = v157;
          *(_DWORD *)(v8 - 8) = v55;
        }
        uint64_t v27 = 0;
        long long v190 = *(_OWORD *)a1;
        uint64_t v183 = *(void *)(a1 + 20);
        int v28 = *(_DWORD *)(a1 + 32);
        int v186 = *(_DWORD *)(a1 + 28);
        int v29 = (void **)(a1 + 40);
        uint64_t v153 = *(void *)(a1 + 40);
        uint64_t v158 = a3;
        *(void *)v180 = *(void *)(a1 + 48);
        *(void *)&v180[7] = *(void *)(a1 + 55);
        char v150 = *(unsigned char *)(a1 + 63);
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        int v146 = v28;
        int v147 = *(_DWORD *)(a1 + 64);
        do
        {
          int v30 = *(_DWORD *)(a1 + v27 + 88);
          v27 += 72;
        }
        while (v30 < v22);
        unint64_t v31 = a1 + v27;
        v32 = v9;
        if (v27 == 72)
        {
          char v35 = v9;
          while (v31 < (unint64_t)v35)
          {
            uint64_t v33 = (char *)v35 - 72;
            int v36 = *((_DWORD *)v35 - 14);
            char v35 = (_OWORD *)((char *)v35 - 72);
            if (v36 < v22) {
              goto LABEL_23;
            }
          }
          uint64_t v33 = (char *)v35;
          unint64_t v8 = v31;
        }
        else
        {
          do
          {
            uint64_t v33 = (char *)v32 - 72;
            int v34 = *((_DWORD *)v32 - 14);
            v32 = (_OWORD *)((char *)v32 - 72);
          }
          while (v34 >= v22);
LABEL_23:
          unint64_t v8 = v31;
          if (v31 < (unint64_t)v33)
          {
            unint64_t v37 = (unint64_t)v33;
            do
            {
              long long v167 = *(_OWORD *)v8;
              long long v175 = *(_OWORD *)(v8 + 16);
              int v38 = *(_DWORD *)(v8 + 32);
              uint64_t v39 = *(void *)(v8 + 40);
              *(void *)v196 = *(void *)(v8 + 48);
              *(void *)&v196[7] = *(void *)(v8 + 55);
              char v40 = *(unsigned char *)(v8 + 63);
              *(void *)(v8 + 48) = 0;
              *(void *)(v8 + 56) = 0;
              *(void *)(v8 + 40) = 0;
              int v41 = *(_DWORD *)(v8 + 64);
              long long v42 = *(_OWORD *)(v37 + 16);
              *(_OWORD *)unint64_t v8 = *(_OWORD *)v37;
              *(_OWORD *)(v8 + 16) = v42;
              *(_DWORD *)(v8 + 32) = *(_DWORD *)(v37 + 32);
              long long v43 = *(_OWORD *)(v37 + 40);
              *(void *)(v8 + 56) = *(void *)(v37 + 56);
              *(_OWORD *)(v8 + 40) = v43;
              *(unsigned char *)(v37 + 63) = 0;
              *(unsigned char *)(v37 + 40) = 0;
              *(_DWORD *)(v8 + 64) = *(_DWORD *)(v37 + 64);
              *(_OWORD *)unint64_t v37 = v167;
              *(_OWORD *)(v37 + 16) = v175;
              *(_DWORD *)(v37 + 32) = v38;
              if (*(char *)(v37 + 63) < 0) {
                operator delete(*(void **)(v37 + 40));
              }
              *(void *)(v37 + 40) = v39;
              *(void *)(v37 + 48) = *(void *)v196;
              *(void *)(v37 + 55) = *(void *)&v196[7];
              *(unsigned char *)(v37 + 63) = v40;
              *(_DWORD *)(v37 + 64) = v41;
              do
              {
                int v44 = *(_DWORD *)(v8 + 88);
                v8 += 72;
              }
              while (v44 < v22);
              do
              {
                int v45 = *(_DWORD *)(v37 - 56);
                v37 -= 72;
              }
              while (v45 >= v22);
            }
            while (v8 < v37);
          }
        }
        BOOL v46 = (long long *)(v8 - 72);
        if (v8 - 72 != a1)
        {
          long long v47 = *(_OWORD *)(v8 - 56);
          *(_OWORD *)a1 = *v46;
          *(_OWORD *)(a1 + 16) = v47;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 - 40);
          if (*(char *)(a1 + 63) < 0) {
            operator delete(*v29);
          }
          long long v48 = *(_OWORD *)(v8 - 32);
          *(void *)(a1 + 56) = *(void *)(v8 - 16);
          *(_OWORD *)int v29 = v48;
          *(unsigned char *)(v8 - 9) = 0;
          *(unsigned char *)(v8 - 32) = 0;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 - 8);
        }
        *BOOL v46 = v190;
        *(_DWORD *)(v8 - 56) = v22;
        *(void *)(v8 - 52) = v183;
        *(_DWORD *)(v8 - 44) = v186;
        *(_DWORD *)(v8 - 40) = v146;
        if (*(char *)(v8 - 9) < 0) {
          operator delete(*(void **)(v8 - 32));
        }
        a3 = v158;
        *(void *)(v8 - 32) = v153;
        *(void *)(v8 - 17) = *(void *)&v180[7];
        *(void *)(v8 - 24) = *(void *)v180;
        *(unsigned char *)(v8 - 9) = v150;
        *(_DWORD *)(v8 - 8) = v147;
        if (v31 >= (unint64_t)v33) {
          break;
        }
LABEL_40:
        sub_9AA1E8(a1, v8 - 72, v158, a4 & 1);
        a4 = 0;
      }
      BOOL v49 = sub_9AB954(a1, v8 - 72);
      if (sub_9AB954(v8, v163)) {
        break;
      }
      if (!v49) {
        goto LABEL_40;
      }
    }
    a2 = v8 - 72;
    if (!v49) {
      continue;
    }
    break;
  }
}

void sub_9AB240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_9ABCC8(a1, a2, a3, a4);
  if (*(_DWORD *)(a5 + 16) < *(_DWORD *)(a4 + 16))
  {
    long long v39 = *(_OWORD *)a4;
    long long v43 = *(_OWORD *)(a4 + 16);
    int v10 = *(_DWORD *)(a4 + 32);
    uint64_t v11 = (long long *)(a4 + 40);
    uint64_t v12 = *(void *)(a4 + 40);
    *(void *)long long v47 = *(void *)(a4 + 48);
    *(void *)&v47[7] = *(void *)(a4 + 55);
    char v13 = *(unsigned char *)(a4 + 63);
    *(void *)(a4 + 56) = 0;
    *(void *)(a4 + 48) = 0;
    *(void *)(a4 + 40) = 0;
    int v14 = *(_DWORD *)(a4 + 64);
    long long v15 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v15;
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(a5 + 32);
    long long v16 = *(_OWORD *)(a5 + 40);
    *(void *)(a4 + 56) = *(void *)(a5 + 56);
    *(_OWORD *)(a4 + 40) = v16;
    *(unsigned char *)(a5 + 63) = 0;
    *(unsigned char *)(a5 + 40) = 0;
    *(_DWORD *)(a4 + 64) = *(_DWORD *)(a5 + 64);
    *(_OWORD *)a5 = v39;
    *(_OWORD *)(a5 + 16) = v43;
    *(_DWORD *)(a5 + 32) = v10;
    if (*(char *)(a5 + 63) < 0) {
      operator delete(*(void **)(a5 + 40));
    }
    *(void *)(a5 + 40) = v12;
    *(void *)(a5 + 48) = *(void *)v47;
    *(void *)(a5 + 55) = *(void *)&v47[7];
    *(unsigned char *)(a5 + 63) = v13;
    *(_DWORD *)(a5 + 64) = v14;
    if (*(_DWORD *)(a4 + 16) < *(_DWORD *)(a3 + 16))
    {
      long long v40 = *(_OWORD *)a3;
      long long v44 = *(_OWORD *)(a3 + 16);
      int v17 = *(_DWORD *)(a3 + 32);
      int v19 = (void **)(a3 + 40);
      uint64_t v18 = *(void *)(a3 + 40);
      *(void *)long long v48 = *(void *)(a3 + 48);
      *(void *)&v48[7] = *(void *)(a3 + 55);
      char v20 = *(unsigned char *)(a3 + 63);
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 40) = 0;
      int v21 = *(_DWORD *)(a3 + 64);
      long long v22 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v22;
      *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
      long long v23 = *v11;
      *(void *)(a3 + 56) = *(void *)(a4 + 56);
      *(_OWORD *)(a3 + 40) = v23;
      *(unsigned char *)(a4 + 63) = 0;
      *(unsigned char *)(a4 + 40) = 0;
      *(_DWORD *)(a3 + 64) = *(_DWORD *)(a4 + 64);
      *(_OWORD *)a4 = v40;
      *(_OWORD *)(a4 + 16) = v44;
      *(_DWORD *)(a4 + 32) = v17;
      if (*(char *)(a4 + 63) < 0)
      {
        size_t v24 = *(void **)v11;
        uint64_t v25 = v18;
        operator delete(v24);
        uint64_t v18 = v25;
      }
      *(void *)(a4 + 40) = v18;
      *(void *)(a4 + 48) = *(void *)v48;
      *(void *)(a4 + 55) = *(void *)&v48[7];
      *(unsigned char *)(a4 + 63) = v20;
      *(_DWORD *)(a4 + 64) = v21;
      if (*(_DWORD *)(a3 + 16) < *(_DWORD *)(a2 + 16))
      {
        long long v41 = *(_OWORD *)a2;
        long long v45 = *(_OWORD *)(a2 + 16);
        int v26 = *(_DWORD *)(a2 + 32);
        uint64_t v27 = (void **)(a2 + 40);
        uint64_t v28 = *(void *)(a2 + 40);
        *(void *)BOOL v49 = *(void *)(a2 + 48);
        *(void *)&v49[7] = *(void *)(a2 + 55);
        char v29 = *(unsigned char *)(a2 + 63);
        *(void *)(a2 + 56) = 0;
        *(void *)(a2 + 48) = 0;
        *(void *)(a2 + 40) = 0;
        int v30 = *(_DWORD *)(a2 + 64);
        long long v31 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v31;
        *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
        long long v32 = *(_OWORD *)v19;
        *(void *)(a2 + 56) = *(void *)(a3 + 56);
        *(_OWORD *)(a2 + 40) = v32;
        *(unsigned char *)(a3 + 63) = 0;
        *(unsigned char *)(a3 + 40) = 0;
        *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
        *(_OWORD *)a3 = v41;
        *(_OWORD *)(a3 + 16) = v45;
        *(_DWORD *)(a3 + 32) = v26;
        if (*(char *)(a3 + 63) < 0) {
          operator delete(*v19);
        }
        *(void *)(a3 + 40) = v28;
        *(void *)(a3 + 48) = *(void *)v49;
        *(void *)(a3 + 55) = *(void *)&v49[7];
        *(unsigned char *)(a3 + 63) = v29;
        *(_DWORD *)(a3 + 64) = v30;
        if (*(_DWORD *)(a2 + 16) < *(_DWORD *)(a1 + 16))
        {
          long long v42 = *(_OWORD *)a1;
          long long v46 = *(_OWORD *)(a1 + 16);
          int v33 = *(_DWORD *)(a1 + 32);
          uint64_t v34 = *(void *)(a1 + 40);
          *(void *)unint64_t v50 = *(void *)(a1 + 48);
          *(void *)&v50[7] = *(void *)(a1 + 55);
          char v35 = *(unsigned char *)(a1 + 63);
          *(void *)(a1 + 48) = 0;
          *(void *)(a1 + 56) = 0;
          *(void *)(a1 + 40) = 0;
          int v36 = *(_DWORD *)(a1 + 64);
          long long v37 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v37;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
          long long v38 = *(_OWORD *)v27;
          *(void *)(a1 + 56) = *(void *)(a2 + 56);
          *(_OWORD *)(a1 + 40) = v38;
          *(unsigned char *)(a2 + 63) = 0;
          *(unsigned char *)(a2 + 40) = 0;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
          *(_OWORD *)a2 = v42;
          *(_OWORD *)(a2 + 16) = v46;
          *(_DWORD *)(a2 + 32) = v33;
          if (*(char *)(a2 + 63) < 0) {
            operator delete(*v27);
          }
          *(void *)(a2 + 40) = v34;
          *(void *)(a2 + 48) = *(void *)v50;
          *(void *)(a2 + 55) = *(void *)&v50[7];
          *(unsigned char *)(a2 + 63) = v35;
          *(_DWORD *)(a2 + 64) = v36;
        }
      }
    }
  }
}

void sub_9AB590(long long *a1, long long *a2, long long *a3)
{
  int v6 = *((_DWORD *)a2 + 4);
  int v7 = *((_DWORD *)a3 + 4);
  if (v6 >= *((_DWORD *)a1 + 4))
  {
    if (v7 < v6)
    {
      long long v41 = *a2;
      long long v46 = a2[1];
      int v16 = *((_DWORD *)a2 + 8);
      int v17 = (void **)a2 + 5;
      uint64_t v18 = *((void *)a2 + 5);
      int v19 = a2 + 3;
      *(void *)int v51 = *((void *)a2 + 6);
      *(void *)&v51[7] = *(void *)((char *)a2 + 55);
      char v20 = *((unsigned char *)a2 + 63);
      *((void *)a2 + 7) = 0;
      *((void *)a2 + 6) = 0;
      *((void *)a2 + 5) = 0;
      int v21 = *((_DWORD *)a2 + 16);
      long long v22 = a3[1];
      *a2 = *a3;
      a2[1] = v22;
      *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
      long long v23 = *(long long *)((char *)a3 + 40);
      *((void *)a2 + 7) = *((void *)a3 + 7);
      *(long long *)((char *)a2 + 40) = v23;
      *((unsigned char *)a3 + 63) = 0;
      *((unsigned char *)a3 + 40) = 0;
      *((_DWORD *)a2 + 16) = *((_DWORD *)a3 + 16);
      *a3 = v41;
      a3[1] = v46;
      *((_DWORD *)a3 + 8) = v16;
      if (*((char *)a3 + 63) < 0) {
        operator delete(*((void **)a3 + 5));
      }
      *((void *)a3 + 5) = v18;
      *((void *)a3 + 6) = *(void *)v51;
      *(void *)((char *)a3 + 55) = *(void *)&v51[7];
      *((unsigned char *)a3 + 63) = v20;
      *((_DWORD *)a3 + 16) = v21;
      if (*((_DWORD *)a2 + 4) < *((_DWORD *)a1 + 4))
      {
        long long v42 = *a1;
        long long v47 = a1[1];
        int v24 = *((_DWORD *)a1 + 8);
        uint64_t v25 = *((void *)a1 + 5);
        *(void *)uint64_t v52 = *((void *)a1 + 6);
        *(void *)&v52[7] = *(void *)((char *)a1 + 55);
        char v26 = *((unsigned char *)a1 + 63);
        *((void *)a1 + 6) = 0;
        *((void *)a1 + 7) = 0;
        *((void *)a1 + 5) = 0;
        int v27 = *((_DWORD *)a1 + 16);
        long long v28 = a2[1];
        *a1 = *a2;
        a1[1] = v28;
        *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
        long long v29 = *(_OWORD *)v17;
        *((void *)a1 + 7) = *((void *)a2 + 7);
        *(long long *)((char *)a1 + 40) = v29;
        *((unsigned char *)a2 + 63) = 0;
        *((unsigned char *)a2 + 40) = 0;
        *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
        *a2 = v42;
        a2[1] = v47;
        *((_DWORD *)a2 + 8) = v24;
        if (*((char *)a2 + 63) < 0) {
          operator delete(*v17);
        }
        *((void *)a2 + 5) = v25;
        void *v19 = *(void *)v52;
        *(void *)((char *)a2 + 55) = *(void *)&v52[7];
        *((unsigned char *)a2 + 63) = v26;
        *((_DWORD *)a2 + 16) = v27;
      }
    }
  }
  else
  {
    unint64_t v8 = (void *)a1 + 5;
    long long v9 = a1 + 3;
    if (v7 >= v6)
    {
      long long v43 = *a1;
      long long v48 = a1[1];
      int v30 = *((_DWORD *)a1 + 8);
      uint64_t v31 = *((void *)a1 + 5);
      *(void *)int v53 = *v9;
      *(void *)&v53[7] = *(void *)((char *)a1 + 55);
      char v32 = *((unsigned char *)a1 + 63);
      *((void *)a1 + 6) = 0;
      *((void *)a1 + 7) = 0;
      void *v8 = 0;
      int v33 = *((_DWORD *)a1 + 16);
      long long v34 = a2[1];
      *a1 = *a2;
      a1[1] = v34;
      *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
      char v35 = (void **)a2 + 5;
      long long v36 = *(long long *)((char *)a2 + 40);
      *((void *)a1 + 7) = *((void *)a2 + 7);
      *(_OWORD *)unint64_t v8 = v36;
      *((unsigned char *)a2 + 63) = 0;
      *((unsigned char *)a2 + 40) = 0;
      *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
      *a2 = v43;
      a2[1] = v48;
      *((_DWORD *)a2 + 8) = v30;
      if (*((char *)a2 + 63) < 0) {
        operator delete(*v35);
      }
      *((void *)a2 + 6) = *(void *)v53;
      *((void *)a2 + 5) = v31;
      *(void *)((char *)a2 + 55) = *(void *)&v53[7];
      *((unsigned char *)a2 + 63) = v32;
      *((_DWORD *)a2 + 16) = v33;
      if (*((_DWORD *)a3 + 4) < *((_DWORD *)a2 + 4))
      {
        long long v44 = *a2;
        long long v49 = a2[1];
        int v37 = *((_DWORD *)a2 + 8);
        *(void *)int v54 = *((void *)a2 + 6);
        *(void *)&v54[7] = *(void *)((char *)a2 + 55);
        *((void *)a2 + 6) = 0;
        *((void *)a2 + 7) = 0;
        *char v35 = 0;
        long long v38 = a3[1];
        *a2 = *a3;
        a2[1] = v38;
        *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
        long long v39 = *(long long *)((char *)a3 + 40);
        *((void *)a2 + 7) = *((void *)a3 + 7);
        *(_OWORD *)char v35 = v39;
        *((unsigned char *)a3 + 63) = 0;
        *((unsigned char *)a3 + 40) = 0;
        *((_DWORD *)a2 + 16) = *((_DWORD *)a3 + 16);
        *a3 = v44;
        a3[1] = v49;
        *((_DWORD *)a3 + 8) = v37;
        if (*((char *)a3 + 63) < 0) {
          operator delete(*((void **)a3 + 5));
        }
        *((void *)a3 + 5) = v31;
        *((void *)a3 + 6) = *(void *)v54;
        *(void *)((char *)a3 + 55) = *(void *)&v54[7];
        *((unsigned char *)a3 + 63) = v32;
        *((_DWORD *)a3 + 16) = v33;
      }
    }
    else
    {
      long long v40 = *a1;
      long long v45 = a1[1];
      int v10 = *((_DWORD *)a1 + 8);
      uint64_t v11 = *((void *)a1 + 5);
      *(void *)unint64_t v50 = *v9;
      *(void *)&v50[7] = *(void *)((char *)a1 + 55);
      char v12 = *((unsigned char *)a1 + 63);
      *((void *)a1 + 6) = 0;
      *((void *)a1 + 7) = 0;
      void *v8 = 0;
      int v13 = *((_DWORD *)a1 + 16);
      long long v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((_DWORD *)a1 + 8) = *((_DWORD *)a3 + 8);
      long long v15 = *(long long *)((char *)a3 + 40);
      *((void *)a1 + 7) = *((void *)a3 + 7);
      *(_OWORD *)unint64_t v8 = v15;
      *((unsigned char *)a3 + 63) = 0;
      *((unsigned char *)a3 + 40) = 0;
      *((_DWORD *)a1 + 16) = *((_DWORD *)a3 + 16);
      *a3 = v40;
      a3[1] = v45;
      *((_DWORD *)a3 + 8) = v10;
      if (*((char *)a3 + 63) < 0) {
        operator delete(*((void **)a3 + 5));
      }
      *((void *)a3 + 5) = v11;
      *((void *)a3 + 6) = *(void *)v50;
      *(void *)((char *)a3 + 55) = *(void *)&v50[7];
      *((unsigned char *)a3 + 63) = v12;
      *((_DWORD *)a3 + 16) = v13;
    }
  }
}

BOOL sub_9AB954(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 56) < *(_DWORD *)(a1 + 16))
      {
        long long v29 = *(_OWORD *)a1;
        long long v31 = *(_OWORD *)(a1 + 16);
        int v6 = *(_DWORD *)(a1 + 32);
        uint64_t v7 = *(void *)(a1 + 40);
        *(void *)long long v34 = *(void *)(a1 + 48);
        *(void *)&v34[7] = *(void *)(a1 + 55);
        char v8 = *(unsigned char *)(a1 + 63);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        int v9 = *(_DWORD *)(a1 + 64);
        long long v10 = *(_OWORD *)(a2 - 56);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 16) = v10;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 - 40);
        long long v11 = *(_OWORD *)(a2 - 32);
        *(void *)(a1 + 56) = *(void *)(a2 - 16);
        *(_OWORD *)(a1 + 40) = v11;
        *(unsigned char *)(a2 - 9) = 0;
        *(unsigned char *)(a2 - 32) = 0;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 - 8);
        *(_OWORD *)(a2 - 72) = v29;
        *(_OWORD *)(a2 - 56) = v31;
        *(_DWORD *)(a2 - 40) = v6;
        if (*(char *)(a2 - 9) < 0) {
          operator delete(*(void **)(a2 - 32));
        }
        *(void *)(a2 - 32) = v7;
        *(void *)(a2 - 24) = *(void *)v34;
        *(void *)(a2 - 17) = *(void *)&v34[7];
        *(unsigned char *)(a2 - 9) = v8;
        *(_DWORD *)(a2 - 8) = v9;
        return 1;
      }
      return result;
    case 3uLL:
      sub_9AB590((long long *)a1, (long long *)(a1 + 72), (long long *)(a2 - 72));
      return 1;
    case 4uLL:
      sub_9ABCC8(a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      sub_9AB240(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72);
      return 1;
    default:
      uint64_t v12 = a1 + 144;
      sub_9AB590((long long *)a1, (long long *)(a1 + 72), (long long *)(a1 + 144));
      uint64_t v13 = a1 + 216;
      if (a1 + 216 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    int v16 = *(_DWORD *)(v13 + 16);
    if (v16 < *(_DWORD *)(v12 + 16))
    {
      long long v30 = *(_OWORD *)v13;
      uint64_t v32 = *(void *)(v13 + 20);
      int v17 = *(_DWORD *)(v13 + 32);
      int v33 = *(_DWORD *)(v13 + 28);
      uint64_t v28 = *(void *)(v13 + 40);
      *(void *)char v35 = *(void *)(v13 + 48);
      *(void *)&v35[7] = *(void *)(v13 + 55);
      char v18 = *(unsigned char *)(v13 + 63);
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(void *)(v13 + 40) = 0;
      uint64_t v19 = v14;
      int v26 = *(_DWORD *)(v13 + 64);
      char v27 = v18;
      while (1)
      {
        uint64_t v20 = v19;
        uint64_t v21 = a1 + v19;
        long long v22 = *(_OWORD *)(a1 + v19 + 160);
        *(_OWORD *)(v21 + 216) = *(_OWORD *)(a1 + v19 + 144);
        *(_OWORD *)(v21 + 232) = v22;
        *(_DWORD *)(v21 + 248) = *(_DWORD *)(a1 + v19 + 176);
        uint64_t v23 = a1 + v19 + 256;
        if (*(char *)(a1 + v19 + 279) < 0) {
          operator delete(*(void **)v23);
        }
        *(_OWORD *)uint64_t v23 = *(_OWORD *)(v21 + 184);
        *(void *)(v23 + 16) = *(void *)(v21 + 200);
        *(unsigned char *)(v21 + 207) = 0;
        *(unsigned char *)(v21 + 184) = 0;
        *(_DWORD *)(v21 + 280) = *(_DWORD *)(v21 + 208);
        if (v20 == -144) {
          break;
        }
        uint64_t v19 = v20 - 72;
        if (v16 >= *(_DWORD *)(a1 + v20 + 88))
        {
          uint64_t v24 = a1 + v19 + 216;
          goto LABEL_18;
        }
      }
      uint64_t v24 = a1;
LABEL_18:
      *(_OWORD *)uint64_t v24 = v30;
      *(_DWORD *)(v24 + 16) = v16;
      *(void *)(v24 + 20) = v32;
      *(_DWORD *)(v24 + 28) = v33;
      *(_DWORD *)(v24 + 32) = v17;
      uint64_t v25 = a1 + v20;
      if (*(char *)(v24 + 63) < 0) {
        operator delete(*(void **)(v25 + 184));
      }
      *(void *)(v25 + 184) = v28;
      *(void *)(v24 + 48) = *(void *)v35;
      *(void *)(v24 + 55) = *(void *)&v35[7];
      *(unsigned char *)(v24 + 63) = v27;
      *(_DWORD *)(v24 + 64) = v26;
      if (++v15 == 8) {
        return v13 + 72 == a2;
      }
    }
    uint64_t v12 = v13;
    v14 += 72;
    v13 += 72;
    if (v13 == a2) {
      return 1;
    }
  }
}

void sub_9ABCC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_9AB590((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(_DWORD *)(a4 + 16) < *(_DWORD *)(a3 + 16))
  {
    long long v28 = *(_OWORD *)a3;
    long long v31 = *(_OWORD *)(a3 + 16);
    int v8 = *(_DWORD *)(a3 + 32);
    int v9 = (void **)(a3 + 40);
    uint64_t v10 = *(void *)(a3 + 40);
    *(void *)long long v34 = *(void *)(a3 + 48);
    *(void *)&v34[7] = *(void *)(a3 + 55);
    char v11 = *(unsigned char *)(a3 + 63);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 40) = 0;
    int v12 = *(_DWORD *)(a3 + 64);
    long long v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v13;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
    long long v14 = *(_OWORD *)(a4 + 40);
    *(void *)(a3 + 56) = *(void *)(a4 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(unsigned char *)(a4 + 63) = 0;
    *(unsigned char *)(a4 + 40) = 0;
    *(_DWORD *)(a3 + 64) = *(_DWORD *)(a4 + 64);
    *(_OWORD *)a4 = v28;
    *(_OWORD *)(a4 + 16) = v31;
    *(_DWORD *)(a4 + 32) = v8;
    if (*(char *)(a4 + 63) < 0) {
      operator delete(*(void **)(a4 + 40));
    }
    *(void *)(a4 + 40) = v10;
    *(void *)(a4 + 48) = *(void *)v34;
    *(void *)(a4 + 55) = *(void *)&v34[7];
    *(unsigned char *)(a4 + 63) = v11;
    *(_DWORD *)(a4 + 64) = v12;
    if (*(_DWORD *)(a3 + 16) < *(_DWORD *)(a2 + 16))
    {
      long long v29 = *(_OWORD *)a2;
      long long v32 = *(_OWORD *)(a2 + 16);
      int v15 = *(_DWORD *)(a2 + 32);
      int v16 = (void **)(a2 + 40);
      uint64_t v17 = *(void *)(a2 + 40);
      *(void *)char v35 = *(void *)(a2 + 48);
      *(void *)&v35[7] = *(void *)(a2 + 55);
      char v18 = *(unsigned char *)(a2 + 63);
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 40) = 0;
      int v19 = *(_DWORD *)(a2 + 64);
      long long v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
      long long v21 = *(_OWORD *)v9;
      *(void *)(a2 + 56) = *(void *)(a3 + 56);
      *(_OWORD *)(a2 + 40) = v21;
      *(unsigned char *)(a3 + 63) = 0;
      *(unsigned char *)(a3 + 40) = 0;
      *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
      *(_OWORD *)a3 = v29;
      *(_OWORD *)(a3 + 16) = v32;
      *(_DWORD *)(a3 + 32) = v15;
      if (*(char *)(a3 + 63) < 0) {
        operator delete(*v9);
      }
      *(void *)(a3 + 40) = v17;
      *(void *)(a3 + 48) = *(void *)v35;
      *(void *)(a3 + 55) = *(void *)&v35[7];
      *(unsigned char *)(a3 + 63) = v18;
      *(_DWORD *)(a3 + 64) = v19;
      if (*(_DWORD *)(a2 + 16) < *(_DWORD *)(a1 + 16))
      {
        long long v30 = *(_OWORD *)a1;
        long long v33 = *(_OWORD *)(a1 + 16);
        int v22 = *(_DWORD *)(a1 + 32);
        uint64_t v23 = *(void *)(a1 + 40);
        *(void *)long long v36 = *(void *)(a1 + 48);
        *(void *)&v36[7] = *(void *)(a1 + 55);
        char v24 = *(unsigned char *)(a1 + 63);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        int v25 = *(_DWORD *)(a1 + 64);
        long long v26 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        long long v27 = *(_OWORD *)v16;
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = v27;
        *(unsigned char *)(a2 + 63) = 0;
        *(unsigned char *)(a2 + 40) = 0;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
        *(_OWORD *)a2 = v30;
        *(_OWORD *)(a2 + 16) = v33;
        *(_DWORD *)(a2 + 32) = v22;
        if (*(char *)(a2 + 63) < 0) {
          operator delete(*v16);
        }
        *(void *)(a2 + 40) = v23;
        *(void *)(a2 + 48) = *(void *)v36;
        *(void *)(a2 + 55) = *(void *)&v36[7];
        *(unsigned char *)(a2 + 63) = v24;
        *(_DWORD *)(a2 + 64) = v25;
      }
    }
  }
}

void sub_9ABF58(unint64_t a1, void *a2, uint64_t a3, char a4)
{
  while (2)
  {
    v141 = (long long *)(a2 - 18);
    v142 = (long long *)(a2 - 9);
    long long v140 = (long long *)(a2 - 27);
    unint64_t v8 = a1;
    unint64_t v160 = (unint64_t)a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v8;
          uint64_t v9 = (uint64_t)a2 - v8;
          uint64_t v10 = 0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)a2 - v8) >> 3);
          if (v5 || !v4)
          {
            switch(v10)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*(a2 - 8) < *(void *)(a1 + 8))
                {
                  long long v171 = *(_OWORD *)a1;
                  long long v179 = *(_OWORD *)(a1 + 16);
                  int v63 = *(_DWORD *)(a1 + 32);
                  uint64_t v64 = *(void *)(a1 + 40);
                  *(void *)int v187 = *(void *)(a1 + 48);
                  *(void *)&v187[7] = *(void *)(a1 + 55);
                  char v65 = *(unsigned char *)(a1 + 63);
                  *(void *)(a1 + 48) = 0;
                  *(void *)(a1 + 56) = 0;
                  *(void *)(a1 + 40) = 0;
                  int v66 = *(_DWORD *)(a1 + 64);
                  long long v67 = *(_OWORD *)(a2 - 7);
                  *(_OWORD *)a1 = *(_OWORD *)(a2 - 9);
                  *(_OWORD *)(a1 + 16) = v67;
                  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 - 10);
                  long long v68 = *((_OWORD *)a2 - 2);
                  *(void *)(a1 + 56) = *(a2 - 2);
                  *(_OWORD *)(a1 + 40) = v68;
                  *((unsigned char *)a2 - 9) = 0;
                  *((unsigned char *)a2 - 32) = 0;
                  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 - 2);
                  *(_OWORD *)(a2 - 7) = v179;
                  *(_OWORD *)(a2 - 9) = v171;
                  *((_DWORD *)a2 - 10) = v63;
                  if (*((char *)a2 - 9) < 0) {
                    operator delete((void *)*(a2 - 4));
                  }
                  *(a2 - 4) = v64;
                  *(void *)((char *)a2 - 17) = *(void *)&v187[7];
                  *(a2 - 3) = *(void *)v187;
                  *((unsigned char *)a2 - 9) = v65;
                  *((_DWORD *)a2 - 2) = v66;
                }
                break;
              case 3:
                sub_9AD2D0((long long *)a1, (long long *)(a1 + 72), v142);
                break;
              case 4:
                sub_9AD9FC(a1, a1 + 72, a1 + 144, (uint64_t)v142);
                break;
              case 5:
                sub_9ACF80(a1, a1 + 72, a1 + 144, a1 + 216, (uint64_t)v142);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v9 <= 1727)
          {
            char v69 = (void *)(a1 + 72);
            BOOL v71 = (void *)a1 == a2 || v69 == a2;
            if (a4)
            {
              if (!v71)
              {
                uint64_t v72 = 0;
                unint64_t v73 = a1;
                do
                {
                  uint64_t v74 = v69;
                  uint64_t v75 = *(void *)(v73 + 80);
                  if (v75 < *(void *)(v73 + 8))
                  {
                    uint64_t v76 = *v69;
                    long long v172 = *(_OWORD *)(v73 + 88);
                    int v77 = *(_DWORD *)(v73 + 104);
                    uint64_t v164 = *(void *)(v73 + 112);
                    *(void *)long long v188 = *(void *)(v73 + 120);
                    *(void *)&v188[7] = *(void *)(v73 + 127);
                    char v156 = *(unsigned char *)(v73 + 135);
                    *(void *)(v73 + 120) = 0;
                    *(void *)(v73 + 128) = 0;
                    *(void *)(v73 + 112) = 0;
                    uint64_t v78 = v72;
                    int v79 = *(_DWORD *)(v73 + 136);
                    while (1)
                    {
                      uint64_t v80 = v78;
                      uint64_t v81 = a1 + v78;
                      long long v82 = *(_OWORD *)(a1 + v78 + 16);
                      *(_OWORD *)(v81 + 72) = *(_OWORD *)(a1 + v78);
                      *(_OWORD *)(v81 + 88) = v82;
                      *(_DWORD *)(v81 + 104) = *(_DWORD *)(a1 + v78 + 32);
                      uint64_t v83 = a1 + v78 + 112;
                      if (*(char *)(a1 + v78 + 135) < 0) {
                        operator delete(*(void **)v83);
                      }
                      *(_OWORD *)uint64_t v83 = *(_OWORD *)(v81 + 40);
                      *(void *)(v83 + 16) = *(void *)(v81 + 56);
                      *(unsigned char *)(v81 + 63) = 0;
                      *(unsigned char *)(v81 + 40) = 0;
                      *(_DWORD *)(v81 + 136) = *(_DWORD *)(v81 + 64);
                      if (!v80) {
                        break;
                      }
                      uint64_t v78 = v80 - 72;
                      if (v75 >= *(void *)(a1 + v80 - 64))
                      {
                        unint64_t v84 = a1 + v80;
                        goto LABEL_99;
                      }
                    }
                    unint64_t v84 = a1;
LABEL_99:
                    *(void *)unint64_t v84 = v76;
                    *(void *)(v84 + 8) = v75;
                    *(_OWORD *)(v84 + 16) = v172;
                    *(_DWORD *)(v84 + 32) = v77;
                    uint64_t v85 = a1 + v80;
                    if (*(char *)(v84 + 63) < 0) {
                      operator delete(*(void **)(v85 + 40));
                    }
                    *(void *)(v85 + 40) = v164;
                    *(void *)(v84 + 48) = *(void *)v188;
                    *(void *)(v84 + 55) = *(void *)&v188[7];
                    *(unsigned char *)(v84 + 63) = v156;
                    *(_DWORD *)(v84 + 64) = v79;
                  }
                  char v69 = v74 + 9;
                  v72 += 72;
                  unint64_t v73 = (unint64_t)v74;
                }
                while (v74 + 9 != (void *)v160);
              }
            }
            else if (!v71)
            {
              long long v127 = (_DWORD *)(a1 + 136);
              do
              {
                v128 = v69;
                uint64_t v129 = *(void *)(a1 + 80);
                if (v129 < *(void *)(a1 + 8))
                {
                  uint64_t v130 = *v69;
                  long long v175 = *(_OWORD *)(a1 + 88);
                  int v131 = *(_DWORD *)(a1 + 104);
                  uint64_t v132 = *(void *)(a1 + 112);
                  *(void *)v191 = *(void *)(a1 + 120);
                  *(void *)&v191[7] = *(void *)(a1 + 127);
                  char v133 = *(unsigned char *)(a1 + 135);
                  *(void *)(a1 + 120) = 0;
                  *(void *)(a1 + 128) = 0;
                  *(void *)(a1 + 112) = 0;
                  uint64_t v134 = v127;
                  int v135 = *(_DWORD *)(a1 + 136);
                  do
                  {
                    long long v138 = *(_OWORD *)(v134 - 30);
                    *((_OWORD *)v134 - 4) = *(_OWORD *)(v134 - 34);
                    *((_OWORD *)v134 - 3) = v138;
                    *(v134 - 8) = *(v134 - 26);
                    int v139 = (void **)(v134 - 6);
                    if (*((char *)v134 - 1) < 0) {
                      operator delete(*v139);
                    }
                    *(_OWORD *)int v139 = *((_OWORD *)v134 - 6);
                    *((void *)v134 - 1) = *((void *)v134 - 10);
                    *((unsigned char *)v134 - 73) = 0;
                    *((unsigned char *)v134 - 96) = 0;
                    v136 = v134 - 18;
                    *uint64_t v134 = *(v134 - 18);
                    uint64_t v137 = *((void *)v134 - 25);
                    v134 -= 18;
                  }
                  while (v129 < v137);
                  *((void *)v136 - 8) = v130;
                  *((void *)v136 - 7) = v129;
                  *((_OWORD *)v136 - 3) = v175;
                  *(v136 - 8) = v131;
                  if (*((char *)v136 - 1) < 0) {
                    operator delete(*((void **)v136 - 3));
                  }
                  *((void *)v136 - 3) = v132;
                  *(void *)((char *)v136 - 9) = *(void *)&v191[7];
                  *((void *)v136 - 2) = *(void *)v191;
                  *((unsigned char *)v136 - 1) = v133;
                  _DWORD *v136 = v135;
                  a2 = (void *)v160;
                }
                char v69 = v128 + 9;
                v127 += 18;
                a1 = (unint64_t)v128;
              }
              while (v128 + 9 != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((void *)a1 != a2)
            {
              int64_t v86 = (unint64_t)(v10 - 2) >> 1;
              int64_t v87 = v86;
              do
              {
                int64_t v88 = v87;
                if (v86 >= v87)
                {
                  uint64_t v89 = (2 * v87) | 1;
                  unint64_t v90 = a1 + 72 * v89;
                  if (2 * v88 + 2 < v10)
                  {
                    BOOL v91 = *(void *)(v90 + 8) < *(void *)(v90 + 80);
                    v90 += 72 * v91;
                    if (v91) {
                      uint64_t v89 = 2 * v88 + 2;
                    }
                  }
                  unint64_t v92 = a1 + 72 * v88;
                  uint64_t v93 = *(void *)(v92 + 8);
                  if (*(void *)(v90 + 8) >= v93)
                  {
                    uint64_t v150 = *(void *)v92;
                    long long v173 = *(_OWORD *)(v92 + 16);
                    unint64_t v94 = a1 + 72 * v88;
                    int v146 = *(_DWORD *)(v94 + 32);
                    uint64_t v165 = *(void *)(v94 + 40);
                    *(void *)&v189[7] = *(void *)(v94 + 55);
                    *(void *)long long v189 = *(void *)(v94 + 48);
                    char v157 = *(unsigned char *)(v92 + 63);
                    *(void *)(v94 + 40) = 0;
                    *(void *)(v94 + 48) = 0;
                    *(void *)(v94 + 56) = 0;
                    int v153 = *(_DWORD *)(v94 + 64);
                    do
                    {
                      unint64_t v95 = v90;
                      long long v96 = *(_OWORD *)(v90 + 16);
                      *(_OWORD *)unint64_t v92 = *(_OWORD *)v90;
                      *(_OWORD *)(v92 + 16) = v96;
                      *(_DWORD *)(v92 + 32) = *(_DWORD *)(v90 + 32);
                      int v97 = (void **)(v92 + 40);
                      if (*(char *)(v92 + 63) < 0) {
                        operator delete(*v97);
                      }
                      long long v98 = *(_OWORD *)(v95 + 40);
                      *(void *)(v92 + 56) = *(void *)(v95 + 56);
                      *(_OWORD *)int v97 = v98;
                      *(unsigned char *)(v95 + 63) = 0;
                      *(unsigned char *)(v95 + 40) = 0;
                      *(_DWORD *)(v92 + 64) = *(_DWORD *)(v95 + 64);
                      if (v86 < v89) {
                        break;
                      }
                      uint64_t v99 = (2 * v89) | 1;
                      unint64_t v90 = a1 + 72 * v99;
                      if (2 * v89 + 2 < v10)
                      {
                        BOOL v91 = *(void *)(v90 + 8) < *(void *)(v90 + 80);
                        v90 += 72 * v91;
                        if (v91) {
                          uint64_t v99 = 2 * v89 + 2;
                        }
                      }
                      unint64_t v92 = v95;
                      uint64_t v89 = v99;
                    }
                    while (*(void *)(v90 + 8) >= v93);
                    *(void *)unint64_t v95 = v150;
                    *(void *)(v95 + 8) = v93;
                    *(_OWORD *)(v95 + 16) = v173;
                    *(_DWORD *)(v95 + 32) = v146;
                    if (*(char *)(v95 + 63) < 0) {
                      operator delete(*(void **)(v95 + 40));
                    }
                    *(void *)(v95 + 40) = v165;
                    *(void *)(v95 + 48) = *(void *)v189;
                    *(void *)(v95 + 55) = *(void *)&v189[7];
                    *(unsigned char *)(v95 + 63) = v157;
                    *(_DWORD *)(v95 + 64) = v153;
                    a2 = (void *)v160;
                  }
                }
                int64_t v87 = v88 - 1;
              }
              while (v88);
              int64_t v100 = v9 / 0x48uLL;
              do
              {
                uint64_t v102 = 0;
                uint64_t v103 = a2;
                long long v174 = *(_OWORD *)a1;
                long long v180 = *(_OWORD *)(a1 + 16);
                int v104 = *(_DWORD *)(a1 + 32);
                uint64_t v161 = *(void *)(a1 + 40);
                *(void *)uint64_t v183 = *(void *)(a1 + 48);
                *(void *)&v183[7] = *(void *)(a1 + 55);
                char v166 = *(unsigned char *)(a1 + 63);
                *(void *)(a1 + 48) = 0;
                *(void *)(a1 + 56) = 0;
                *(void *)(a1 + 40) = 0;
                unint64_t v105 = a1;
                int v158 = *(_DWORD *)(a1 + 64);
                do
                {
                  uint64_t v107 = v105 + 72 * v102 + 72;
                  uint64_t v108 = 2 * v102;
                  uint64_t v102 = (2 * v102) | 1;
                  uint64_t v109 = v108 + 2;
                  if (v108 + 2 < v100)
                  {
                    uint64_t v110 = *(void *)(v107 + 8);
                    uint64_t v111 = *(void *)(v107 + 80);
                    v107 += 72 * (v110 < v111);
                    if (v110 < v111) {
                      uint64_t v102 = v109;
                    }
                  }
                  long long v112 = *(_OWORD *)(v107 + 16);
                  *(_OWORD *)unint64_t v105 = *(_OWORD *)v107;
                  *(_OWORD *)(v105 + 16) = v112;
                  *(_DWORD *)(v105 + 32) = *(_DWORD *)(v107 + 32);
                  int v113 = (void **)(v105 + 40);
                  if (*(char *)(v105 + 63) < 0) {
                    operator delete(*v113);
                  }
                  long long v106 = *(_OWORD *)(v107 + 40);
                  *(void *)(v105 + 56) = *(void *)(v107 + 56);
                  *(_OWORD *)int v113 = v106;
                  *(unsigned char *)(v107 + 63) = 0;
                  *(unsigned char *)(v107 + 40) = 0;
                  *(_DWORD *)(v105 + 64) = *(_DWORD *)(v107 + 64);
                  unint64_t v105 = v107;
                }
                while (v102 <= (uint64_t)((unint64_t)(v100 - 2) >> 1));
                int v114 = (void **)(v107 + 40);
                long long v115 = (long long *)(v103 - 9);
                if ((void *)v107 == v103 - 9)
                {
                  v101 = v103 - 9;
                  *(_OWORD *)uint64_t v107 = v174;
                  *(_OWORD *)(v107 + 16) = v180;
                  *(_DWORD *)(v107 + 32) = v104;
                  if (*(char *)(v107 + 63) < 0) {
                    operator delete(*v114);
                  }
                  *(void *)(v107 + 40) = v161;
                  *(void *)(v107 + 48) = *(void *)v183;
                  *(void *)(v107 + 55) = *(void *)&v183[7];
                  *(unsigned char *)(v107 + 63) = v166;
                  *(_DWORD *)(v107 + 64) = v158;
                }
                else
                {
                  long long v116 = *(_OWORD *)(v103 - 7);
                  *(_OWORD *)uint64_t v107 = *v115;
                  *(_OWORD *)(v107 + 16) = v116;
                  *(_DWORD *)(v107 + 32) = *((_DWORD *)v103 - 10);
                  if (*(char *)(v107 + 63) < 0) {
                    operator delete(*v114);
                  }
                  long long v117 = *((_OWORD *)v103 - 2);
                  *(void *)(v107 + 56) = *(v103 - 2);
                  *(_OWORD *)int v114 = v117;
                  *((unsigned char *)v103 - 9) = 0;
                  *((unsigned char *)v103 - 32) = 0;
                  *(_DWORD *)(v107 + 64) = *((_DWORD *)v103 - 2);
                  *long long v115 = v174;
                  *(_OWORD *)(v103 - 7) = v180;
                  v101 = v103 - 9;
                  *((_DWORD *)v103 - 10) = v104;
                  if (*((char *)v103 - 9) < 0) {
                    operator delete((void *)*(v103 - 4));
                  }
                  *(v103 - 4) = v161;
                  *(void *)((char *)v103 - 17) = *(void *)&v183[7];
                  *(v103 - 3) = *(void *)v183;
                  *((unsigned char *)v103 - 9) = v166;
                  *((_DWORD *)v103 - 2) = v158;
                  uint64_t v118 = v107 + 72 - a1;
                  if (v118 >= 73)
                  {
                    unint64_t v119 = (v118 / 0x48uLL - 2) >> 1;
                    unint64_t v120 = a1 + 72 * v119;
                    uint64_t v121 = *(void *)(v107 + 8);
                    if (*(void *)(v120 + 8) < v121)
                    {
                      uint64_t v122 = *(void *)v107;
                      long long v190 = *(_OWORD *)(v107 + 16);
                      int v147 = *(_DWORD *)(v107 + 32);
                      uint64_t v167 = *(void *)(v107 + 40);
                      *(void *)&v194[7] = *(void *)(v107 + 55);
                      *(void *)long long v194 = *(void *)(v107 + 48);
                      char v162 = *(unsigned char *)(v107 + 63);
                      *int v114 = 0;
                      *(void *)(v107 + 48) = 0;
                      *(void *)(v107 + 56) = 0;
                      int v159 = *(_DWORD *)(v107 + 64);
                      do
                      {
                        uint64_t v123 = v120;
                        long long v124 = *(_OWORD *)(v120 + 16);
                        *(_OWORD *)uint64_t v107 = *(_OWORD *)v120;
                        *(_OWORD *)(v107 + 16) = v124;
                        *(_DWORD *)(v107 + 32) = *(_DWORD *)(v120 + 32);
                        int v125 = (void **)(v107 + 40);
                        if (*(char *)(v107 + 63) < 0) {
                          operator delete(*v125);
                        }
                        long long v126 = *(_OWORD *)(v123 + 40);
                        *(void *)(v107 + 56) = *(void *)(v123 + 56);
                        *(_OWORD *)int v125 = v126;
                        *(unsigned char *)(v123 + 63) = 0;
                        *(unsigned char *)(v123 + 40) = 0;
                        *(_DWORD *)(v107 + 64) = *(_DWORD *)(v123 + 64);
                        if (!v119) {
                          break;
                        }
                        unint64_t v119 = (v119 - 1) >> 1;
                        unint64_t v120 = a1 + 72 * v119;
                        uint64_t v107 = v123;
                      }
                      while (*(void *)(v120 + 8) < v121);
                      *(void *)uint64_t v123 = v122;
                      *(void *)(v123 + 8) = v121;
                      *(_OWORD *)(v123 + 16) = v190;
                      *(_DWORD *)(v123 + 32) = v147;
                      if (*(char *)(v123 + 63) < 0) {
                        operator delete(*(void **)(v123 + 40));
                      }
                      *(void *)(v123 + 40) = v167;
                      *(void *)(v123 + 48) = *(void *)v194;
                      *(void *)(v123 + 55) = *(void *)&v194[7];
                      *(unsigned char *)(v123 + 63) = v162;
                      *(_DWORD *)(v123 + 64) = v159;
                    }
                  }
                }
                BOOL v91 = v100-- <= 2;
                a2 = v101;
              }
              while (!v91);
            }
            return;
          }
          unint64_t v11 = (unint64_t)v10 >> 1;
          unint64_t v12 = a1 + 72 * ((unint64_t)v10 >> 1);
          if ((unint64_t)v9 < 0x2401)
          {
            sub_9AD2D0((long long *)v12, (long long *)a1, v142);
            --a3;
            if (a4)
            {
LABEL_14:
              uint64_t v21 = *(void *)(a1 + 8);
              break;
            }
          }
          else
          {
            sub_9AD2D0((long long *)a1, (long long *)v12, v142);
            uint64_t v13 = 72 * v11;
            unint64_t v14 = a1 + 72 * v11;
            sub_9AD2D0((long long *)(a1 + 72), (long long *)(v14 - 72), v141);
            sub_9AD2D0((long long *)(a1 + 144), (long long *)(a1 + 72 + v13), v140);
            sub_9AD2D0((long long *)(v14 - 72), (long long *)v12, (long long *)(a1 + 72 + v13));
            long long v168 = *(_OWORD *)a1;
            long long v176 = *(_OWORD *)(a1 + 16);
            int v15 = *(_DWORD *)(a1 + 32);
            *(void *)((char *)&v184 + 7) = *(void *)(a1 + 55);
            uint64_t v16 = *(void *)(a1 + 40);
            *(void *)&long long v184 = *(void *)(a1 + 48);
            char v17 = *(unsigned char *)(a1 + 63);
            *(void *)(a1 + 48) = 0;
            *(void *)(a1 + 56) = 0;
            *(void *)(a1 + 40) = 0;
            int v18 = *(_DWORD *)(a1 + 64);
            long long v19 = *(_OWORD *)(v12 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(_OWORD *)(a1 + 16) = v19;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(v14 + 32);
            long long v20 = *(_OWORD *)(v14 + 40);
            *(void *)(a1 + 56) = *(void *)(v14 + 56);
            *(_OWORD *)(a1 + 40) = v20;
            *(unsigned char *)(v12 + 63) = 0;
            *(unsigned char *)(v14 + 40) = 0;
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(v14 + 64);
            *(_OWORD *)unint64_t v12 = v168;
            *(_OWORD *)(v12 + 16) = v176;
            *(_DWORD *)(v14 + 32) = v15;
            *(void *)(v14 + 40) = v16;
            *(void *)(v14 + 48) = v184;
            *(void *)(v14 + 55) = *(void *)((char *)&v184 + 7);
            *(unsigned char *)(v12 + 63) = v17;
            *(_DWORD *)(v14 + 64) = v18;
            --a3;
            if (a4) {
              goto LABEL_14;
            }
          }
          uint64_t v21 = *(void *)(a1 + 8);
          if (*(void *)(a1 - 64) < v21) {
            break;
          }
          int v22 = a2;
          uint64_t v23 = *(void *)a1;
          long long v185 = *(_OWORD *)(a1 + 16);
          int v148 = *(_DWORD *)(a1 + 32);
          char v24 = (void **)(a1 + 40);
          uint64_t v154 = *(void *)(a1 + 40);
          *(void *)v181 = *(void *)(a1 + 48);
          *(void *)&v181[7] = *(void *)(a1 + 55);
          char v151 = *(unsigned char *)(a1 + 63);
          *(void *)(a1 + 48) = 0;
          *(void *)(a1 + 56) = 0;
          *(void *)(a1 + 40) = 0;
          if (v21 >= *(v22 - 8))
          {
            unint64_t v48 = a1 + 72;
            do
            {
              unint64_t v8 = v48;
              if (v48 >= v160) {
                break;
              }
              v48 += 72;
            }
            while (v21 >= *(void *)(v8 + 8));
          }
          else
          {
            unint64_t v25 = a1;
            do
            {
              unint64_t v8 = v25 + 72;
              uint64_t v26 = *(void *)(v25 + 80);
              v25 += 72;
            }
            while (v21 >= v26);
          }
          unint64_t v49 = v160;
          if (v8 < v160)
          {
            unint64_t v50 = v160;
            do
            {
              unint64_t v49 = v50 - 72;
              uint64_t v51 = *(void *)(v50 - 64);
              v50 -= 72;
            }
            while (v21 < v51);
          }
          int v52 = *(_DWORD *)(a1 + 64);
          while (v8 < v49)
          {
            long long v170 = *(_OWORD *)v8;
            long long v178 = *(_OWORD *)(v8 + 16);
            int v53 = *(_DWORD *)(v8 + 32);
            uint64_t v54 = *(void *)(v8 + 40);
            *(void *)v193 = *(void *)(v8 + 48);
            *(void *)&v193[7] = *(void *)(v8 + 55);
            char v55 = *(unsigned char *)(v8 + 63);
            *(void *)(v8 + 48) = 0;
            *(void *)(v8 + 56) = 0;
            *(void *)(v8 + 40) = 0;
            int v56 = *(_DWORD *)(v8 + 64);
            long long v57 = *(_OWORD *)(v49 + 16);
            *(_OWORD *)unint64_t v8 = *(_OWORD *)v49;
            *(_OWORD *)(v8 + 16) = v57;
            *(_DWORD *)(v8 + 32) = *(_DWORD *)(v49 + 32);
            long long v58 = *(_OWORD *)(v49 + 40);
            *(void *)(v8 + 56) = *(void *)(v49 + 56);
            *(_OWORD *)(v8 + 40) = v58;
            *(unsigned char *)(v49 + 63) = 0;
            *(unsigned char *)(v49 + 40) = 0;
            *(_DWORD *)(v8 + 64) = *(_DWORD *)(v49 + 64);
            *(_OWORD *)unint64_t v49 = v170;
            *(_OWORD *)(v49 + 16) = v178;
            *(_DWORD *)(v49 + 32) = v53;
            if (*(char *)(v49 + 63) < 0) {
              operator delete(*(void **)(v49 + 40));
            }
            *(void *)(v49 + 40) = v54;
            *(void *)(v49 + 48) = *(void *)v193;
            *(void *)(v49 + 55) = *(void *)&v193[7];
            *(unsigned char *)(v49 + 63) = v55;
            *(_DWORD *)(v49 + 64) = v56;
            do
            {
              uint64_t v59 = *(void *)(v8 + 80);
              v8 += 72;
            }
            while (v21 >= v59);
            do
            {
              uint64_t v60 = *(void *)(v49 - 64);
              v49 -= 72;
            }
            while (v21 < v60);
          }
          BOOL v4 = v8 - 72 >= a1;
          BOOL v5 = v8 - 72 == a1;
          if (v8 - 72 != a1)
          {
            long long v61 = *(_OWORD *)(v8 - 56);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 72);
            *(_OWORD *)(a1 + 16) = v61;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 - 40);
            if (*(char *)(a1 + 63) < 0) {
              operator delete(*v24);
            }
            long long v62 = *(_OWORD *)(v8 - 32);
            *(void *)(a1 + 56) = *(void *)(v8 - 16);
            *(_OWORD *)char v24 = v62;
            *(unsigned char *)(v8 - 9) = 0;
            *(unsigned char *)(v8 - 32) = 0;
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 - 8);
          }
          *(void *)(v8 - 72) = v23;
          *(void *)(v8 - 64) = v21;
          *(_OWORD *)(v8 - 56) = v185;
          *(_DWORD *)(v8 - 40) = v148;
          if (*(char *)(v8 - 9) < 0) {
            operator delete(*(void **)(v8 - 32));
          }
          a4 = 0;
          a2 = (void *)v160;
          *(void *)(v8 - 32) = v154;
          *(void *)(v8 - 17) = *(void *)&v181[7];
          *(void *)(v8 - 24) = *(void *)v181;
          *(unsigned char *)(v8 - 9) = v151;
          *(_DWORD *)(v8 - 8) = v52;
        }
        uint64_t v27 = 0;
        uint64_t v145 = *(void *)a1;
        long long v186 = *(_OWORD *)(a1 + 16);
        int v144 = *(_DWORD *)(a1 + 32);
        long long v28 = (void **)(a1 + 40);
        uint64_t v155 = *(void *)(a1 + 40);
        *(void *)uint64_t v182 = *(void *)(a1 + 48);
        *(void *)&v182[7] = *(void *)(a1 + 55);
        char v152 = *(unsigned char *)(a1 + 63);
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        int v149 = *(_DWORD *)(a1 + 64);
        do
        {
          uint64_t v29 = *(void *)(a1 + v27 + 80);
          v27 += 72;
        }
        while (v29 < v21);
        unint64_t v30 = a1 + v27;
        long long v31 = a2;
        if (v27 == 72)
        {
          unint64_t v34 = v160;
          while (v30 < v34)
          {
            unint64_t v32 = v34 - 72;
            uint64_t v35 = *(void *)(v34 - 64);
            v34 -= 72;
            if (v35 < v21) {
              goto LABEL_23;
            }
          }
          unint64_t v32 = v34;
          unint64_t v8 = v30;
        }
        else
        {
          do
          {
            unint64_t v32 = (unint64_t)(v31 - 9);
            uint64_t v33 = *(v31 - 8);
            v31 -= 9;
          }
          while (v33 >= v21);
LABEL_23:
          unint64_t v8 = v30;
          if (v30 < v32)
          {
            unint64_t v36 = v32;
            do
            {
              long long v169 = *(_OWORD *)v8;
              long long v177 = *(_OWORD *)(v8 + 16);
              int v37 = *(_DWORD *)(v8 + 32);
              uint64_t v38 = *(void *)(v8 + 40);
              *(void *)v192 = *(void *)(v8 + 48);
              *(void *)&v192[7] = *(void *)(v8 + 55);
              char v39 = *(unsigned char *)(v8 + 63);
              *(void *)(v8 + 48) = 0;
              *(void *)(v8 + 56) = 0;
              *(void *)(v8 + 40) = 0;
              int v40 = *(_DWORD *)(v8 + 64);
              long long v41 = *(_OWORD *)(v36 + 16);
              *(_OWORD *)unint64_t v8 = *(_OWORD *)v36;
              *(_OWORD *)(v8 + 16) = v41;
              *(_DWORD *)(v8 + 32) = *(_DWORD *)(v36 + 32);
              long long v42 = *(_OWORD *)(v36 + 40);
              *(void *)(v8 + 56) = *(void *)(v36 + 56);
              *(_OWORD *)(v8 + 40) = v42;
              *(unsigned char *)(v36 + 63) = 0;
              *(unsigned char *)(v36 + 40) = 0;
              *(_DWORD *)(v8 + 64) = *(_DWORD *)(v36 + 64);
              *(_OWORD *)unint64_t v36 = v169;
              *(_OWORD *)(v36 + 16) = v177;
              *(_DWORD *)(v36 + 32) = v37;
              if (*(char *)(v36 + 63) < 0) {
                operator delete(*(void **)(v36 + 40));
              }
              *(void *)(v36 + 40) = v38;
              *(void *)(v36 + 48) = *(void *)v192;
              *(void *)(v36 + 55) = *(void *)&v192[7];
              *(unsigned char *)(v36 + 63) = v39;
              *(_DWORD *)(v36 + 64) = v40;
              do
              {
                uint64_t v43 = *(void *)(v8 + 80);
                v8 += 72;
              }
              while (v43 < v21);
              do
              {
                uint64_t v44 = *(void *)(v36 - 64);
                v36 -= 72;
              }
              while (v44 >= v21);
            }
            while (v8 < v36);
          }
        }
        if (v8 - 72 != a1)
        {
          long long v45 = *(_OWORD *)(v8 - 56);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 72);
          *(_OWORD *)(a1 + 16) = v45;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 - 40);
          if (*(char *)(a1 + 63) < 0) {
            operator delete(*v28);
          }
          long long v46 = *(_OWORD *)(v8 - 32);
          *(void *)(a1 + 56) = *(void *)(v8 - 16);
          *(_OWORD *)long long v28 = v46;
          *(unsigned char *)(v8 - 9) = 0;
          *(unsigned char *)(v8 - 32) = 0;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 - 8);
        }
        *(void *)(v8 - 72) = v145;
        *(void *)(v8 - 64) = v21;
        *(_OWORD *)(v8 - 56) = v186;
        *(_DWORD *)(v8 - 40) = v144;
        if (*(char *)(v8 - 9) < 0) {
          operator delete(*(void **)(v8 - 32));
        }
        *(void *)(v8 - 32) = v155;
        *(void *)(v8 - 17) = *(void *)&v182[7];
        *(void *)(v8 - 24) = *(void *)v182;
        *(unsigned char *)(v8 - 9) = v152;
        *(_DWORD *)(v8 - 8) = v149;
        BOOL v4 = v30 >= v32;
        a2 = (void *)v160;
        if (v4) {
          break;
        }
LABEL_41:
        sub_9ABF58(a1, v8 - 72, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v47 = sub_9AD694(a1, v8 - 72);
      if (sub_9AD694(v8, v160)) {
        break;
      }
      if (!v47) {
        goto LABEL_41;
      }
    }
    a2 = (void *)(v8 - 72);
    if (!v47) {
      continue;
    }
    break;
  }
}

void sub_9ACF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_9AD9FC(a1, a2, a3, a4);
  if (*(void *)(a5 + 8) < *(void *)(a4 + 8))
  {
    long long v39 = *(_OWORD *)a4;
    long long v43 = *(_OWORD *)(a4 + 16);
    int v10 = *(_DWORD *)(a4 + 32);
    unint64_t v11 = (long long *)(a4 + 40);
    uint64_t v12 = *(void *)(a4 + 40);
    *(void *)BOOL v47 = *(void *)(a4 + 48);
    *(void *)&v47[7] = *(void *)(a4 + 55);
    char v13 = *(unsigned char *)(a4 + 63);
    *(void *)(a4 + 56) = 0;
    *(void *)(a4 + 48) = 0;
    *(void *)(a4 + 40) = 0;
    int v14 = *(_DWORD *)(a4 + 64);
    long long v15 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v15;
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(a5 + 32);
    long long v16 = *(_OWORD *)(a5 + 40);
    *(void *)(a4 + 56) = *(void *)(a5 + 56);
    *(_OWORD *)(a4 + 40) = v16;
    *(unsigned char *)(a5 + 63) = 0;
    *(unsigned char *)(a5 + 40) = 0;
    *(_DWORD *)(a4 + 64) = *(_DWORD *)(a5 + 64);
    *(_OWORD *)a5 = v39;
    *(_OWORD *)(a5 + 16) = v43;
    *(_DWORD *)(a5 + 32) = v10;
    if (*(char *)(a5 + 63) < 0) {
      operator delete(*(void **)(a5 + 40));
    }
    *(void *)(a5 + 40) = v12;
    *(void *)(a5 + 48) = *(void *)v47;
    *(void *)(a5 + 55) = *(void *)&v47[7];
    *(unsigned char *)(a5 + 63) = v13;
    *(_DWORD *)(a5 + 64) = v14;
    if (*(void *)(a4 + 8) < *(void *)(a3 + 8))
    {
      long long v40 = *(_OWORD *)a3;
      long long v44 = *(_OWORD *)(a3 + 16);
      int v17 = *(_DWORD *)(a3 + 32);
      long long v19 = (void **)(a3 + 40);
      uint64_t v18 = *(void *)(a3 + 40);
      *(void *)unint64_t v48 = *(void *)(a3 + 48);
      *(void *)&v48[7] = *(void *)(a3 + 55);
      char v20 = *(unsigned char *)(a3 + 63);
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 40) = 0;
      int v21 = *(_DWORD *)(a3 + 64);
      long long v22 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v22;
      *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
      long long v23 = *v11;
      *(void *)(a3 + 56) = *(void *)(a4 + 56);
      *(_OWORD *)(a3 + 40) = v23;
      *(unsigned char *)(a4 + 63) = 0;
      *(unsigned char *)(a4 + 40) = 0;
      *(_DWORD *)(a3 + 64) = *(_DWORD *)(a4 + 64);
      *(_OWORD *)a4 = v40;
      *(_OWORD *)(a4 + 16) = v44;
      *(_DWORD *)(a4 + 32) = v17;
      if (*(char *)(a4 + 63) < 0)
      {
        char v24 = *(void **)v11;
        uint64_t v25 = v18;
        operator delete(v24);
        uint64_t v18 = v25;
      }
      *(void *)(a4 + 40) = v18;
      *(void *)(a4 + 48) = *(void *)v48;
      *(void *)(a4 + 55) = *(void *)&v48[7];
      *(unsigned char *)(a4 + 63) = v20;
      *(_DWORD *)(a4 + 64) = v21;
      if (*(void *)(a3 + 8) < *(void *)(a2 + 8))
      {
        long long v41 = *(_OWORD *)a2;
        long long v45 = *(_OWORD *)(a2 + 16);
        int v26 = *(_DWORD *)(a2 + 32);
        uint64_t v27 = (void **)(a2 + 40);
        uint64_t v28 = *(void *)(a2 + 40);
        *(void *)unint64_t v49 = *(void *)(a2 + 48);
        *(void *)&v49[7] = *(void *)(a2 + 55);
        char v29 = *(unsigned char *)(a2 + 63);
        *(void *)(a2 + 56) = 0;
        *(void *)(a2 + 48) = 0;
        *(void *)(a2 + 40) = 0;
        int v30 = *(_DWORD *)(a2 + 64);
        long long v31 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v31;
        *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
        long long v32 = *(_OWORD *)v19;
        *(void *)(a2 + 56) = *(void *)(a3 + 56);
        *(_OWORD *)(a2 + 40) = v32;
        *(unsigned char *)(a3 + 63) = 0;
        *(unsigned char *)(a3 + 40) = 0;
        *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
        *(_OWORD *)a3 = v41;
        *(_OWORD *)(a3 + 16) = v45;
        *(_DWORD *)(a3 + 32) = v26;
        if (*(char *)(a3 + 63) < 0) {
          operator delete(*v19);
        }
        *(void *)(a3 + 40) = v28;
        *(void *)(a3 + 48) = *(void *)v49;
        *(void *)(a3 + 55) = *(void *)&v49[7];
        *(unsigned char *)(a3 + 63) = v29;
        *(_DWORD *)(a3 + 64) = v30;
        if (*(void *)(a2 + 8) < *(void *)(a1 + 8))
        {
          long long v42 = *(_OWORD *)a1;
          long long v46 = *(_OWORD *)(a1 + 16);
          int v33 = *(_DWORD *)(a1 + 32);
          uint64_t v34 = *(void *)(a1 + 40);
          *(void *)unint64_t v50 = *(void *)(a1 + 48);
          *(void *)&v50[7] = *(void *)(a1 + 55);
          char v35 = *(unsigned char *)(a1 + 63);
          *(void *)(a1 + 48) = 0;
          *(void *)(a1 + 56) = 0;
          *(void *)(a1 + 40) = 0;
          int v36 = *(_DWORD *)(a1 + 64);
          long long v37 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v37;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
          long long v38 = *(_OWORD *)v27;
          *(void *)(a1 + 56) = *(void *)(a2 + 56);
          *(_OWORD *)(a1 + 40) = v38;
          *(unsigned char *)(a2 + 63) = 0;
          *(unsigned char *)(a2 + 40) = 0;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
          *(_OWORD *)a2 = v42;
          *(_OWORD *)(a2 + 16) = v46;
          *(_DWORD *)(a2 + 32) = v33;
          if (*(char *)(a2 + 63) < 0) {
            operator delete(*v27);
          }
          *(void *)(a2 + 40) = v34;
          *(void *)(a2 + 48) = *(void *)v50;
          *(void *)(a2 + 55) = *(void *)&v50[7];
          *(unsigned char *)(a2 + 63) = v35;
          *(_DWORD *)(a2 + 64) = v36;
        }
      }
    }
  }
}

void sub_9AD2D0(long long *a1, long long *a2, long long *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a3 + 1);
  if (v6 >= *((void *)a1 + 1))
  {
    if (v7 < v6)
    {
      long long v41 = *a2;
      long long v46 = a2[1];
      int v16 = *((_DWORD *)a2 + 8);
      int v17 = (void **)a2 + 5;
      uint64_t v18 = *((void *)a2 + 5);
      long long v19 = a2 + 3;
      *(void *)uint64_t v51 = *((void *)a2 + 6);
      *(void *)&v51[7] = *(void *)((char *)a2 + 55);
      char v20 = *((unsigned char *)a2 + 63);
      *((void *)a2 + 7) = 0;
      *((void *)a2 + 6) = 0;
      *((void *)a2 + 5) = 0;
      int v21 = *((_DWORD *)a2 + 16);
      long long v22 = a3[1];
      *a2 = *a3;
      a2[1] = v22;
      *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
      long long v23 = *(long long *)((char *)a3 + 40);
      *((void *)a2 + 7) = *((void *)a3 + 7);
      *(long long *)((char *)a2 + 40) = v23;
      *((unsigned char *)a3 + 63) = 0;
      *((unsigned char *)a3 + 40) = 0;
      *((_DWORD *)a2 + 16) = *((_DWORD *)a3 + 16);
      *a3 = v41;
      a3[1] = v46;
      *((_DWORD *)a3 + 8) = v16;
      if (*((char *)a3 + 63) < 0) {
        operator delete(*((void **)a3 + 5));
      }
      *((void *)a3 + 5) = v18;
      *((void *)a3 + 6) = *(void *)v51;
      *(void *)((char *)a3 + 55) = *(void *)&v51[7];
      *((unsigned char *)a3 + 63) = v20;
      *((_DWORD *)a3 + 16) = v21;
      if (*((void *)a2 + 1) < *((void *)a1 + 1))
      {
        long long v42 = *a1;
        long long v47 = a1[1];
        int v24 = *((_DWORD *)a1 + 8);
        uint64_t v25 = *((void *)a1 + 5);
        *(void *)int v52 = *((void *)a1 + 6);
        *(void *)&v52[7] = *(void *)((char *)a1 + 55);
        char v26 = *((unsigned char *)a1 + 63);
        *((void *)a1 + 6) = 0;
        *((void *)a1 + 7) = 0;
        *((void *)a1 + 5) = 0;
        int v27 = *((_DWORD *)a1 + 16);
        long long v28 = a2[1];
        *a1 = *a2;
        a1[1] = v28;
        *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
        long long v29 = *(_OWORD *)v17;
        *((void *)a1 + 7) = *((void *)a2 + 7);
        *(long long *)((char *)a1 + 40) = v29;
        *((unsigned char *)a2 + 63) = 0;
        *((unsigned char *)a2 + 40) = 0;
        *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
        *a2 = v42;
        a2[1] = v47;
        *((_DWORD *)a2 + 8) = v24;
        if (*((char *)a2 + 63) < 0) {
          operator delete(*v17);
        }
        *((void *)a2 + 5) = v25;
        void *v19 = *(void *)v52;
        *(void *)((char *)a2 + 55) = *(void *)&v52[7];
        *((unsigned char *)a2 + 63) = v26;
        *((_DWORD *)a2 + 16) = v27;
      }
    }
  }
  else
  {
    unint64_t v8 = (void *)a1 + 5;
    uint64_t v9 = a1 + 3;
    if (v7 >= v6)
    {
      long long v43 = *a1;
      long long v48 = a1[1];
      int v30 = *((_DWORD *)a1 + 8);
      uint64_t v31 = *((void *)a1 + 5);
      *(void *)int v53 = *v9;
      *(void *)&v53[7] = *(void *)((char *)a1 + 55);
      char v32 = *((unsigned char *)a1 + 63);
      *((void *)a1 + 6) = 0;
      *((void *)a1 + 7) = 0;
      void *v8 = 0;
      int v33 = *((_DWORD *)a1 + 16);
      long long v34 = a2[1];
      *a1 = *a2;
      a1[1] = v34;
      *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
      char v35 = (void **)a2 + 5;
      long long v36 = *(long long *)((char *)a2 + 40);
      *((void *)a1 + 7) = *((void *)a2 + 7);
      *(_OWORD *)unint64_t v8 = v36;
      *((unsigned char *)a2 + 63) = 0;
      *((unsigned char *)a2 + 40) = 0;
      *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
      *a2 = v43;
      a2[1] = v48;
      *((_DWORD *)a2 + 8) = v30;
      if (*((char *)a2 + 63) < 0) {
        operator delete(*v35);
      }
      *((void *)a2 + 6) = *(void *)v53;
      *((void *)a2 + 5) = v31;
      *(void *)((char *)a2 + 55) = *(void *)&v53[7];
      *((unsigned char *)a2 + 63) = v32;
      *((_DWORD *)a2 + 16) = v33;
      if (*((void *)a3 + 1) < *((void *)a2 + 1))
      {
        long long v44 = *a2;
        long long v49 = a2[1];
        int v37 = *((_DWORD *)a2 + 8);
        *(void *)uint64_t v54 = *((void *)a2 + 6);
        *(void *)&v54[7] = *(void *)((char *)a2 + 55);
        *((void *)a2 + 6) = 0;
        *((void *)a2 + 7) = 0;
        *char v35 = 0;
        long long v38 = a3[1];
        *a2 = *a3;
        a2[1] = v38;
        *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
        long long v39 = *(long long *)((char *)a3 + 40);
        *((void *)a2 + 7) = *((void *)a3 + 7);
        *(_OWORD *)char v35 = v39;
        *((unsigned char *)a3 + 63) = 0;
        *((unsigned char *)a3 + 40) = 0;
        *((_DWORD *)a2 + 16) = *((_DWORD *)a3 + 16);
        *a3 = v44;
        a3[1] = v49;
        *((_DWORD *)a3 + 8) = v37;
        if (*((char *)a3 + 63) < 0) {
          operator delete(*((void **)a3 + 5));
        }
        *((void *)a3 + 5) = v31;
        *((void *)a3 + 6) = *(void *)v54;
        *(void *)((char *)a3 + 55) = *(void *)&v54[7];
        *((unsigned char *)a3 + 63) = v32;
        *((_DWORD *)a3 + 16) = v33;
      }
    }
    else
    {
      long long v40 = *a1;
      long long v45 = a1[1];
      int v10 = *((_DWORD *)a1 + 8);
      uint64_t v11 = *((void *)a1 + 5);
      *(void *)unint64_t v50 = *v9;
      *(void *)&v50[7] = *(void *)((char *)a1 + 55);
      char v12 = *((unsigned char *)a1 + 63);
      *((void *)a1 + 6) = 0;
      *((void *)a1 + 7) = 0;
      void *v8 = 0;
      int v13 = *((_DWORD *)a1 + 16);
      long long v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((_DWORD *)a1 + 8) = *((_DWORD *)a3 + 8);
      long long v15 = *(long long *)((char *)a3 + 40);
      *((void *)a1 + 7) = *((void *)a3 + 7);
      *(_OWORD *)unint64_t v8 = v15;
      *((unsigned char *)a3 + 63) = 0;
      *((unsigned char *)a3 + 40) = 0;
      *((_DWORD *)a1 + 16) = *((_DWORD *)a3 + 16);
      *a3 = v40;
      a3[1] = v45;
      *((_DWORD *)a3 + 8) = v10;
      if (*((char *)a3 + 63) < 0) {
        operator delete(*((void **)a3 + 5));
      }
      *((void *)a3 + 5) = v11;
      *((void *)a3 + 6) = *(void *)v50;
      *(void *)((char *)a3 + 55) = *(void *)&v50[7];
      *((unsigned char *)a3 + 63) = v12;
      *((_DWORD *)a3 + 16) = v13;
    }
  }
}

BOOL sub_9AD694(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(void *)(a2 - 64) < *(void *)(a1 + 8))
      {
        long long v30 = *(_OWORD *)a1;
        long long v32 = *(_OWORD *)(a1 + 16);
        int v6 = *(_DWORD *)(a1 + 32);
        uint64_t v7 = *(void *)(a1 + 40);
        *(void *)int v33 = *(void *)(a1 + 48);
        *(void *)&v33[7] = *(void *)(a1 + 55);
        char v8 = *(unsigned char *)(a1 + 63);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        int v9 = *(_DWORD *)(a1 + 64);
        long long v10 = *(_OWORD *)(a2 - 56);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 16) = v10;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 - 40);
        long long v11 = *(_OWORD *)(a2 - 32);
        *(void *)(a1 + 56) = *(void *)(a2 - 16);
        *(_OWORD *)(a1 + 40) = v11;
        *(unsigned char *)(a2 - 9) = 0;
        *(unsigned char *)(a2 - 32) = 0;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 - 8);
        *(_OWORD *)(a2 - 72) = v30;
        *(_OWORD *)(a2 - 56) = v32;
        *(_DWORD *)(a2 - 40) = v6;
        if (*(char *)(a2 - 9) < 0) {
          operator delete(*(void **)(a2 - 32));
        }
        *(void *)(a2 - 32) = v7;
        *(void *)(a2 - 24) = *(void *)v33;
        *(void *)(a2 - 17) = *(void *)&v33[7];
        *(unsigned char *)(a2 - 9) = v8;
        *(_DWORD *)(a2 - 8) = v9;
        return 1;
      }
      return result;
    case 3uLL:
      sub_9AD2D0((long long *)a1, (long long *)(a1 + 72), (long long *)(a2 - 72));
      return 1;
    case 4uLL:
      sub_9AD9FC(a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      sub_9ACF80(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72);
      return 1;
    default:
      uint64_t v12 = a1 + 144;
      sub_9AD2D0((long long *)a1, (long long *)(a1 + 72), (long long *)(a1 + 144));
      uint64_t v13 = a1 + 216;
      if (a1 + 216 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    uint64_t v16 = *(void *)(v13 + 8);
    if (v16 < *(void *)(v12 + 8))
    {
      uint64_t v17 = *(void *)v13;
      long long v31 = *(_OWORD *)(v13 + 16);
      int v18 = *(_DWORD *)(v13 + 32);
      uint64_t v29 = *(void *)(v13 + 40);
      *(void *)long long v34 = *(void *)(v13 + 48);
      *(void *)&v34[7] = *(void *)(v13 + 55);
      char v28 = *(unsigned char *)(v13 + 63);
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(void *)(v13 + 40) = 0;
      uint64_t v19 = v14;
      int v26 = v18;
      int v27 = *(_DWORD *)(v13 + 64);
      while (1)
      {
        uint64_t v20 = v19;
        uint64_t v21 = a1 + v19;
        long long v22 = *(_OWORD *)(a1 + v19 + 160);
        *(_OWORD *)(v21 + 216) = *(_OWORD *)(a1 + v19 + 144);
        *(_OWORD *)(v21 + 232) = v22;
        *(_DWORD *)(v21 + 248) = *(_DWORD *)(a1 + v19 + 176);
        uint64_t v23 = a1 + v19 + 256;
        if (*(char *)(a1 + v19 + 279) < 0) {
          operator delete(*(void **)v23);
        }
        *(_OWORD *)uint64_t v23 = *(_OWORD *)(v21 + 184);
        *(void *)(v23 + 16) = *(void *)(v21 + 200);
        *(unsigned char *)(v21 + 207) = 0;
        *(unsigned char *)(v21 + 184) = 0;
        *(_DWORD *)(v21 + 280) = *(_DWORD *)(v21 + 208);
        if (v20 == -144) {
          break;
        }
        uint64_t v19 = v20 - 72;
        if (v16 >= *(void *)(a1 + v20 + 80))
        {
          uint64_t v24 = a1 + v19 + 216;
          goto LABEL_18;
        }
      }
      uint64_t v24 = a1;
LABEL_18:
      *(void *)uint64_t v24 = v17;
      *(void *)(v24 + 8) = v16;
      *(_OWORD *)(v24 + 16) = v31;
      *(_DWORD *)(v24 + 32) = v26;
      uint64_t v25 = a1 + v20;
      if (*(char *)(v24 + 63) < 0) {
        operator delete(*(void **)(v25 + 184));
      }
      *(void *)(v25 + 184) = v29;
      *(void *)(v24 + 48) = *(void *)v34;
      *(void *)(v24 + 55) = *(void *)&v34[7];
      *(unsigned char *)(v24 + 63) = v28;
      *(_DWORD *)(v24 + 64) = v27;
      if (++v15 == 8) {
        return v13 + 72 == a2;
      }
    }
    uint64_t v12 = v13;
    v14 += 72;
    v13 += 72;
    if (v13 == a2) {
      return 1;
    }
  }
}

void sub_9AD9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_9AD2D0((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(void *)(a4 + 8) < *(void *)(a3 + 8))
  {
    long long v28 = *(_OWORD *)a3;
    long long v31 = *(_OWORD *)(a3 + 16);
    int v8 = *(_DWORD *)(a3 + 32);
    int v9 = (void **)(a3 + 40);
    uint64_t v10 = *(void *)(a3 + 40);
    *(void *)long long v34 = *(void *)(a3 + 48);
    *(void *)&v34[7] = *(void *)(a3 + 55);
    char v11 = *(unsigned char *)(a3 + 63);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 40) = 0;
    int v12 = *(_DWORD *)(a3 + 64);
    long long v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v13;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
    long long v14 = *(_OWORD *)(a4 + 40);
    *(void *)(a3 + 56) = *(void *)(a4 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(unsigned char *)(a4 + 63) = 0;
    *(unsigned char *)(a4 + 40) = 0;
    *(_DWORD *)(a3 + 64) = *(_DWORD *)(a4 + 64);
    *(_OWORD *)a4 = v28;
    *(_OWORD *)(a4 + 16) = v31;
    *(_DWORD *)(a4 + 32) = v8;
    if (*(char *)(a4 + 63) < 0) {
      operator delete(*(void **)(a4 + 40));
    }
    *(void *)(a4 + 40) = v10;
    *(void *)(a4 + 48) = *(void *)v34;
    *(void *)(a4 + 55) = *(void *)&v34[7];
    *(unsigned char *)(a4 + 63) = v11;
    *(_DWORD *)(a4 + 64) = v12;
    if (*(void *)(a3 + 8) < *(void *)(a2 + 8))
    {
      long long v29 = *(_OWORD *)a2;
      long long v32 = *(_OWORD *)(a2 + 16);
      int v15 = *(_DWORD *)(a2 + 32);
      uint64_t v16 = (void **)(a2 + 40);
      uint64_t v17 = *(void *)(a2 + 40);
      *(void *)char v35 = *(void *)(a2 + 48);
      *(void *)&v35[7] = *(void *)(a2 + 55);
      char v18 = *(unsigned char *)(a2 + 63);
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 40) = 0;
      int v19 = *(_DWORD *)(a2 + 64);
      long long v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
      long long v21 = *(_OWORD *)v9;
      *(void *)(a2 + 56) = *(void *)(a3 + 56);
      *(_OWORD *)(a2 + 40) = v21;
      *(unsigned char *)(a3 + 63) = 0;
      *(unsigned char *)(a3 + 40) = 0;
      *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
      *(_OWORD *)a3 = v29;
      *(_OWORD *)(a3 + 16) = v32;
      *(_DWORD *)(a3 + 32) = v15;
      if (*(char *)(a3 + 63) < 0) {
        operator delete(*v9);
      }
      *(void *)(a3 + 40) = v17;
      *(void *)(a3 + 48) = *(void *)v35;
      *(void *)(a3 + 55) = *(void *)&v35[7];
      *(unsigned char *)(a3 + 63) = v18;
      *(_DWORD *)(a3 + 64) = v19;
      if (*(void *)(a2 + 8) < *(void *)(a1 + 8))
      {
        long long v30 = *(_OWORD *)a1;
        long long v33 = *(_OWORD *)(a1 + 16);
        int v22 = *(_DWORD *)(a1 + 32);
        uint64_t v23 = *(void *)(a1 + 40);
        *(void *)long long v36 = *(void *)(a1 + 48);
        *(void *)&v36[7] = *(void *)(a1 + 55);
        char v24 = *(unsigned char *)(a1 + 63);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        int v25 = *(_DWORD *)(a1 + 64);
        long long v26 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        long long v27 = *(_OWORD *)v16;
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = v27;
        *(unsigned char *)(a2 + 63) = 0;
        *(unsigned char *)(a2 + 40) = 0;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
        *(_OWORD *)a2 = v30;
        *(_OWORD *)(a2 + 16) = v33;
        *(_DWORD *)(a2 + 32) = v22;
        if (*(char *)(a2 + 63) < 0) {
          operator delete(*v16);
        }
        *(void *)(a2 + 40) = v23;
        *(void *)(a2 + 48) = *(void *)v36;
        *(void *)(a2 + 55) = *(void *)&v36[7];
        *(unsigned char *)(a2 + 63) = v24;
        *(_DWORD *)(a2 + 64) = v25;
      }
    }
  }
}

void sub_9ADC8C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
void sub_9AF404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_9AF584(uint64_t a1, uint64_t a2)
{
  int v10 = *(_DWORD *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
  {
    sub_4200(&v11, *(void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else
  {
    long long v11 = *(_OWORD *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 56);
  }
  int v13 = *(_DWORD *)(a1 + 64);
  int v4 = *(_DWORD *)(a2 + 32);
  if ((*(char *)(a2 + 63) & 0x80000000) == 0)
  {
    long long __p = *(_OWORD *)(a2 + 40);
    uint64_t v8 = *(void *)(a2 + 56);
    int v9 = *(_DWORD *)(a2 + 64);
    int v5 = v10;
    if ((SHIBYTE(v8) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  sub_4200(&__p, *(void **)(a2 + 40), *(void *)(a2 + 48));
  int v9 = *(_DWORD *)(a2 + 64);
  int v5 = v10;
  if (SHIBYTE(v8) < 0) {
LABEL_6:
  }
    operator delete((void *)__p);
LABEL_7:
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
  return v5 < v4;
}

void sub_9AF68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9AF6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_9B0140(a1, a2, a3, a4);
  if (sub_9AF584(a5, a4))
  {
    long long v39 = *(_OWORD *)a4;
    long long v43 = *(_OWORD *)(a4 + 16);
    int v10 = *(_DWORD *)(a4 + 32);
    long long v11 = (long long *)(a4 + 40);
    uint64_t v12 = *(void *)(a4 + 40);
    *(void *)char v47 = *(void *)(a4 + 48);
    *(void *)&v47[7] = *(void *)(a4 + 55);
    char v13 = *(unsigned char *)(a4 + 63);
    *(void *)(a4 + 56) = 0;
    *(void *)(a4 + 48) = 0;
    *(void *)(a4 + 40) = 0;
    int v14 = *(_DWORD *)(a4 + 64);
    long long v15 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v15;
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(a5 + 32);
    long long v16 = *(_OWORD *)(a5 + 40);
    *(void *)(a4 + 56) = *(void *)(a5 + 56);
    *(_OWORD *)(a4 + 40) = v16;
    *(unsigned char *)(a5 + 63) = 0;
    *(unsigned char *)(a5 + 40) = 0;
    *(_DWORD *)(a4 + 64) = *(_DWORD *)(a5 + 64);
    *(_OWORD *)a5 = v39;
    *(_OWORD *)(a5 + 16) = v43;
    *(_DWORD *)(a5 + 32) = v10;
    if (*(char *)(a5 + 63) < 0) {
      operator delete(*(void **)(a5 + 40));
    }
    *(void *)(a5 + 40) = v12;
    *(void *)(a5 + 48) = *(void *)v47;
    *(void *)(a5 + 55) = *(void *)&v47[7];
    *(unsigned char *)(a5 + 63) = v13;
    *(_DWORD *)(a5 + 64) = v14;
    if (sub_9AF584(a4, a3))
    {
      long long v40 = *(_OWORD *)a3;
      long long v44 = *(_OWORD *)(a3 + 16);
      int v17 = *(_DWORD *)(a3 + 32);
      unint64_t v19 = (void **)(a3 + 40);
      uint64_t v18 = *(void *)(a3 + 40);
      *(void *)int v48 = *(void *)(a3 + 48);
      *(void *)&v48[7] = *(void *)(a3 + 55);
      char v20 = *(unsigned char *)(a3 + 63);
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 40) = 0;
      int v21 = *(_DWORD *)(a3 + 64);
      long long v22 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v22;
      *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
      long long v23 = *v11;
      *(void *)(a3 + 56) = *(void *)(a4 + 56);
      *(_OWORD *)(a3 + 40) = v23;
      *(unsigned char *)(a4 + 63) = 0;
      *(unsigned char *)(a4 + 40) = 0;
      *(_DWORD *)(a3 + 64) = *(_DWORD *)(a4 + 64);
      *(_OWORD *)a4 = v40;
      *(_OWORD *)(a4 + 16) = v44;
      *(_DWORD *)(a4 + 32) = v17;
      if (*(char *)(a4 + 63) < 0)
      {
        uint64_t v24 = *(void **)v11;
        uint64_t v25 = v18;
        operator delete(v24);
        uint64_t v18 = v25;
      }
      *(void *)(a4 + 40) = v18;
      *(void *)(a4 + 48) = *(void *)v48;
      *(void *)(a4 + 55) = *(void *)&v48[7];
      *(unsigned char *)(a4 + 63) = v20;
      *(_DWORD *)(a4 + 64) = v21;
      if (sub_9AF584(a3, a2))
      {
        long long v41 = *(_OWORD *)a2;
        long long v45 = *(_OWORD *)(a2 + 16);
        int v26 = *(_DWORD *)(a2 + 32);
        uint64_t v27 = (void **)(a2 + 40);
        uint64_t v28 = *(void *)(a2 + 40);
        *(void *)long long v49 = *(void *)(a2 + 48);
        *(void *)&v49[7] = *(void *)(a2 + 55);
        char v29 = *(unsigned char *)(a2 + 63);
        *(void *)(a2 + 56) = 0;
        *(void *)(a2 + 48) = 0;
        *(void *)(a2 + 40) = 0;
        int v30 = *(_DWORD *)(a2 + 64);
        long long v31 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v31;
        *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
        long long v32 = *(_OWORD *)v19;
        *(void *)(a2 + 56) = *(void *)(a3 + 56);
        *(_OWORD *)(a2 + 40) = v32;
        *(unsigned char *)(a3 + 63) = 0;
        *(unsigned char *)(a3 + 40) = 0;
        *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
        *(_OWORD *)a3 = v41;
        *(_OWORD *)(a3 + 16) = v45;
        *(_DWORD *)(a3 + 32) = v26;
        if (*(char *)(a3 + 63) < 0) {
          operator delete(*v19);
        }
        *(void *)(a3 + 40) = v28;
        *(void *)(a3 + 48) = *(void *)v49;
        *(void *)(a3 + 55) = *(void *)&v49[7];
        *(unsigned char *)(a3 + 63) = v29;
        *(_DWORD *)(a3 + 64) = v30;
        if (sub_9AF584(a2, a1))
        {
          long long v42 = *(_OWORD *)a1;
          long long v46 = *(_OWORD *)(a1 + 16);
          int v33 = *(_DWORD *)(a1 + 32);
          uint64_t v34 = *(void *)(a1 + 40);
          *(void *)long long v50 = *(void *)(a1 + 48);
          *(void *)&v50[7] = *(void *)(a1 + 55);
          char v35 = *(unsigned char *)(a1 + 63);
          *(void *)(a1 + 48) = 0;
          *(void *)(a1 + 56) = 0;
          *(void *)(a1 + 40) = 0;
          int v36 = *(_DWORD *)(a1 + 64);
          long long v37 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v37;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
          long long v38 = *(_OWORD *)v27;
          *(void *)(a1 + 56) = *(void *)(a2 + 56);
          *(_OWORD *)(a1 + 40) = v38;
          *(unsigned char *)(a2 + 63) = 0;
          *(unsigned char *)(a2 + 40) = 0;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
          *(_OWORD *)a2 = v42;
          *(_OWORD *)(a2 + 16) = v46;
          *(_DWORD *)(a2 + 32) = v33;
          if (*(char *)(a2 + 63) < 0) {
            operator delete(*v27);
          }
          *(void *)(a2 + 40) = v34;
          *(void *)(a2 + 48) = *(void *)v50;
          *(void *)(a2 + 55) = *(void *)&v50[7];
          *(unsigned char *)(a2 + 63) = v35;
          *(_DWORD *)(a2 + 64) = v36;
        }
      }
    }
  }
}

void sub_9AF9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = sub_9AF584(a2, a1);
  BOOL v7 = sub_9AF584(a3, a2);
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 40);
    int v9 = (void *)(a1 + 48);
    if (v7)
    {
      long long v42 = *(_OWORD *)a1;
      long long v47 = *(_OWORD *)(a1 + 16);
      int v10 = *(_DWORD *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      *(void *)uint64_t v52 = *v9;
      *(void *)&v52[7] = *(void *)(a1 + 55);
      char v12 = *(unsigned char *)(a1 + 63);
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      void *v8 = 0;
      int v13 = *(_DWORD *)(a1 + 64);
      long long v14 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v14;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a3 + 32);
      long long v15 = *(_OWORD *)(a3 + 40);
      *(void *)(a1 + 56) = *(void *)(a3 + 56);
      *(_OWORD *)uint64_t v8 = v15;
      *(unsigned char *)(a3 + 63) = 0;
      *(unsigned char *)(a3 + 40) = 0;
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a3 + 64);
      *(_OWORD *)a3 = v42;
      *(_OWORD *)(a3 + 16) = v47;
      *(_DWORD *)(a3 + 32) = v10;
      if (*(char *)(a3 + 63) < 0) {
        operator delete(*(void **)(a3 + 40));
      }
      *(void *)(a3 + 40) = v11;
      *(void *)(a3 + 48) = *(void *)v52;
      *(void *)(a3 + 55) = *(void *)&v52[7];
      *(unsigned char *)(a3 + 63) = v12;
      *(_DWORD *)(a3 + 64) = v13;
    }
    else
    {
      long long v45 = *(_OWORD *)a1;
      long long v50 = *(_OWORD *)(a1 + 16);
      int v29 = *(_DWORD *)(a1 + 32);
      uint64_t v30 = *(void *)(a1 + 40);
      *(void *)unint64_t v55 = *v9;
      *(void *)&v55[7] = *(void *)(a1 + 55);
      char v31 = *(unsigned char *)(a1 + 63);
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      void *v8 = 0;
      int v32 = *(_DWORD *)(a1 + 64);
      long long v33 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v33;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      uint64_t v34 = (void **)(a2 + 40);
      long long v35 = *(_OWORD *)(a2 + 40);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(_OWORD *)uint64_t v8 = v35;
      *(unsigned char *)(a2 + 63) = 0;
      *(unsigned char *)(a2 + 40) = 0;
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      *(_OWORD *)a2 = v45;
      *(_OWORD *)(a2 + 16) = v50;
      *(_DWORD *)(a2 + 32) = v29;
      if (*(char *)(a2 + 63) < 0) {
        operator delete(*v34);
      }
      *(void *)(a2 + 40) = v30;
      *(void *)(a2 + 48) = *(void *)v55;
      *(void *)(a2 + 55) = *(void *)&v55[7];
      *(unsigned char *)(a2 + 63) = v31;
      *(_DWORD *)(a2 + 64) = v32;
      if (sub_9AF584(a3, a2))
      {
        long long v46 = *(_OWORD *)a2;
        long long v51 = *(_OWORD *)(a2 + 16);
        int v36 = *(_DWORD *)(a2 + 32);
        uint64_t v37 = *(void *)(a2 + 40);
        *(void *)int v56 = *(void *)(a2 + 48);
        *(void *)&v56[7] = *(void *)(a2 + 55);
        char v38 = *(unsigned char *)(a2 + 63);
        *(void *)(a2 + 48) = 0;
        *(void *)(a2 + 56) = 0;
        *uint64_t v34 = 0;
        int v39 = *(_DWORD *)(a2 + 64);
        long long v40 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v40;
        *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
        long long v41 = *(_OWORD *)(a3 + 40);
        *(void *)(a2 + 56) = *(void *)(a3 + 56);
        *(_OWORD *)uint64_t v34 = v41;
        *(unsigned char *)(a3 + 63) = 0;
        *(unsigned char *)(a3 + 40) = 0;
        *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
        *(_OWORD *)a3 = v46;
        *(_OWORD *)(a3 + 16) = v51;
        *(_DWORD *)(a3 + 32) = v36;
        if (*(char *)(a3 + 63) < 0) {
          operator delete(*(void **)(a3 + 40));
        }
        *(void *)(a3 + 40) = v37;
        *(void *)(a3 + 48) = *(void *)v56;
        *(void *)(a3 + 55) = *(void *)&v56[7];
        *(unsigned char *)(a3 + 63) = v38;
        *(_DWORD *)(a3 + 64) = v39;
      }
    }
  }
  else if (v7)
  {
    long long v43 = *(_OWORD *)a2;
    long long v48 = *(_OWORD *)(a2 + 16);
    int v16 = *(_DWORD *)(a2 + 32);
    int v17 = (void **)(a2 + 40);
    uint64_t v18 = *(void *)(a2 + 40);
    *(void *)int v53 = *(void *)(a2 + 48);
    *(void *)&v53[7] = *(void *)(a2 + 55);
    char v19 = *(unsigned char *)(a2 + 63);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 40) = 0;
    int v20 = *(_DWORD *)(a2 + 64);
    long long v21 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v21;
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
    long long v22 = *(_OWORD *)(a3 + 40);
    *(void *)(a2 + 56) = *(void *)(a3 + 56);
    *(_OWORD *)(a2 + 40) = v22;
    *(unsigned char *)(a3 + 63) = 0;
    *(unsigned char *)(a3 + 40) = 0;
    *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
    *(_OWORD *)a3 = v43;
    *(_OWORD *)(a3 + 16) = v48;
    *(_DWORD *)(a3 + 32) = v16;
    if (*(char *)(a3 + 63) < 0) {
      operator delete(*(void **)(a3 + 40));
    }
    *(void *)(a3 + 40) = v18;
    *(void *)(a3 + 48) = *(void *)v53;
    *(void *)(a3 + 55) = *(void *)&v53[7];
    *(unsigned char *)(a3 + 63) = v19;
    *(_DWORD *)(a3 + 64) = v20;
    if (sub_9AF584(a2, a1))
    {
      long long v44 = *(_OWORD *)a1;
      long long v49 = *(_OWORD *)(a1 + 16);
      int v23 = *(_DWORD *)(a1 + 32);
      uint64_t v24 = *(void *)(a1 + 40);
      *(void *)int v54 = *(void *)(a1 + 48);
      *(void *)&v54[7] = *(void *)(a1 + 55);
      char v25 = *(unsigned char *)(a1 + 63);
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 40) = 0;
      int v26 = *(_DWORD *)(a1 + 64);
      long long v27 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v27;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      long long v28 = *(_OWORD *)v17;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = v28;
      *(unsigned char *)(a2 + 63) = 0;
      *(unsigned char *)(a2 + 40) = 0;
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      *(_OWORD *)a2 = v44;
      *(_OWORD *)(a2 + 16) = v49;
      *(_DWORD *)(a2 + 32) = v23;
      if (*(char *)(a2 + 63) < 0) {
        operator delete(*v17);
      }
      *(void *)(a2 + 40) = v24;
      *(void *)(a2 + 48) = *(void *)v54;
      *(void *)(a2 + 55) = *(void *)&v54[7];
      *(unsigned char *)(a2 + 63) = v25;
      *(_DWORD *)(a2 + 64) = v26;
    }
  }
}

BOOL sub_9AFDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v6 = (_OWORD *)(a2 - 72);
      if (sub_9AF584(a2 - 72, a1))
      {
        long long v7 = *(_OWORD *)(a1 + 16);
        long long v32 = *(_OWORD *)a1;
        long long v33 = v7;
        int v8 = *(_DWORD *)(a1 + 32);
        uint64_t v9 = *(void *)(a1 + 40);
        v38[0] = *(void *)(a1 + 48);
        *(void *)((char *)v38 + 7) = *(void *)(a1 + 55);
        char v10 = *(unsigned char *)(a1 + 63);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        int v11 = *(_DWORD *)(a1 + 64);
        long long v12 = *(_OWORD *)(a2 - 56);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v12;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 - 40);
        long long v13 = *(_OWORD *)(a2 - 32);
        *(void *)(a1 + 56) = *(void *)(a2 - 16);
        *(_OWORD *)(a1 + 40) = v13;
        *(unsigned char *)(a2 - 9) = 0;
        *(unsigned char *)(a2 - 32) = 0;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 - 8);
        long long v14 = v33;
        *BOOL v6 = v32;
        *(_OWORD *)(a2 - 56) = v14;
        *(_DWORD *)(a2 - 40) = v8;
        if (*(char *)(a2 - 9) < 0) {
          operator delete(*(void **)(a2 - 32));
        }
        uint64_t v15 = v38[0];
        *(void *)(a2 - 32) = v9;
        *(void *)(a2 - 24) = v15;
        *(void *)(a2 - 17) = *(void *)((char *)v38 + 7);
        *(unsigned char *)(a2 - 9) = v10;
        *(_DWORD *)(a2 - 8) = v11;
      }
      return 1;
    case 3uLL:
      sub_9AF9F8(a1, a1 + 72, a2 - 72);
      return 1;
    case 4uLL:
      sub_9B0140(a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      sub_9AF6A8(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72);
      return 1;
    default:
      uint64_t v16 = a1 + 144;
      sub_9AF9F8(a1, a1 + 72, a1 + 144);
      uint64_t v17 = a1 + 216;
      if (a1 + 216 == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    if (sub_9AF584(v17, v16))
    {
      long long v20 = *(_OWORD *)(v17 + 16);
      long long v32 = *(_OWORD *)v17;
      long long v33 = v20;
      int v21 = *(_DWORD *)(v17 + 32);
      long long v35 = *(_OWORD *)(v17 + 40);
      uint64_t v36 = *(void *)(v17 + 56);
      *(void *)(v17 + 40) = 0;
      *(void *)(v17 + 48) = 0;
      int v22 = *(_DWORD *)(v17 + 64);
      int v34 = v21;
      int v37 = v22;
      uint64_t v23 = v18;
      *(void *)(v17 + 56) = 0;
      while (1)
      {
        uint64_t v24 = v23;
        uint64_t v25 = a1 + v23;
        long long v26 = *(_OWORD *)(a1 + v23 + 160);
        *(_OWORD *)(v25 + 216) = *(_OWORD *)(a1 + v23 + 144);
        *(_OWORD *)(v25 + 232) = v26;
        *(_DWORD *)(v25 + 248) = *(_DWORD *)(a1 + v23 + 176);
        uint64_t v27 = a1 + v23 + 256;
        if (*(char *)(a1 + v23 + 279) < 0) {
          operator delete(*(void **)v27);
        }
        *(_OWORD *)uint64_t v27 = *(_OWORD *)(v25 + 184);
        *(void *)(v27 + 16) = *(void *)(v25 + 200);
        *(unsigned char *)(v25 + 207) = 0;
        *(unsigned char *)(v25 + 184) = 0;
        *(_DWORD *)(v25 + 280) = *(_DWORD *)(v25 + 208);
        if (v24 == -144) {
          break;
        }
        BOOL v28 = sub_9AF584((uint64_t)&v32, a1 + v24 + 72);
        uint64_t v23 = v24 - 72;
        if (!v28)
        {
          uint64_t v29 = a1 + v23 + 216;
          goto LABEL_18;
        }
      }
      uint64_t v29 = a1;
LABEL_18:
      long long v30 = v33;
      *(_OWORD *)uint64_t v29 = v32;
      *(_OWORD *)(v29 + 16) = v30;
      *(_DWORD *)(v29 + 32) = v34;
      uint64_t v31 = a1 + v24 + 184;
      if (*(char *)(v29 + 63) < 0) {
        operator delete(*(void **)v31);
      }
      *(_OWORD *)uint64_t v31 = v35;
      *(void *)(v31 + 16) = v36;
      HIBYTE(v36) = 0;
      LOBYTE(v35) = 0;
      *(_DWORD *)(v29 + 64) = v37;
      if (++v19 == 8) {
        return v17 + 72 == a2;
      }
    }
    uint64_t v16 = v17;
    v18 += 72;
    v17 += 72;
    if (v17 == a2) {
      return 1;
    }
  }
}

void sub_9B010C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9B0140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_9AF9F8(a1, a2, a3);
  if (sub_9AF584(a4, a3))
  {
    long long v28 = *(_OWORD *)a3;
    long long v31 = *(_OWORD *)(a3 + 16);
    int v8 = *(_DWORD *)(a3 + 32);
    uint64_t v9 = (void **)(a3 + 40);
    uint64_t v10 = *(void *)(a3 + 40);
    *(void *)int v34 = *(void *)(a3 + 48);
    *(void *)&v34[7] = *(void *)(a3 + 55);
    char v11 = *(unsigned char *)(a3 + 63);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 40) = 0;
    int v12 = *(_DWORD *)(a3 + 64);
    long long v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v13;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
    long long v14 = *(_OWORD *)(a4 + 40);
    *(void *)(a3 + 56) = *(void *)(a4 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(unsigned char *)(a4 + 63) = 0;
    *(unsigned char *)(a4 + 40) = 0;
    *(_DWORD *)(a3 + 64) = *(_DWORD *)(a4 + 64);
    *(_OWORD *)a4 = v28;
    *(_OWORD *)(a4 + 16) = v31;
    *(_DWORD *)(a4 + 32) = v8;
    if (*(char *)(a4 + 63) < 0) {
      operator delete(*(void **)(a4 + 40));
    }
    *(void *)(a4 + 40) = v10;
    *(void *)(a4 + 48) = *(void *)v34;
    *(void *)(a4 + 55) = *(void *)&v34[7];
    *(unsigned char *)(a4 + 63) = v11;
    *(_DWORD *)(a4 + 64) = v12;
    if (sub_9AF584(a3, a2))
    {
      long long v29 = *(_OWORD *)a2;
      long long v32 = *(_OWORD *)(a2 + 16);
      int v15 = *(_DWORD *)(a2 + 32);
      uint64_t v16 = (void **)(a2 + 40);
      uint64_t v17 = *(void *)(a2 + 40);
      *(void *)long long v35 = *(void *)(a2 + 48);
      *(void *)&v35[7] = *(void *)(a2 + 55);
      char v18 = *(unsigned char *)(a2 + 63);
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 40) = 0;
      int v19 = *(_DWORD *)(a2 + 64);
      long long v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
      long long v21 = *(_OWORD *)v9;
      *(void *)(a2 + 56) = *(void *)(a3 + 56);
      *(_OWORD *)(a2 + 40) = v21;
      *(unsigned char *)(a3 + 63) = 0;
      *(unsigned char *)(a3 + 40) = 0;
      *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
      *(_OWORD *)a3 = v29;
      *(_OWORD *)(a3 + 16) = v32;
      *(_DWORD *)(a3 + 32) = v15;
      if (*(char *)(a3 + 63) < 0) {
        operator delete(*v9);
      }
      *(void *)(a3 + 40) = v17;
      *(void *)(a3 + 48) = *(void *)v35;
      *(void *)(a3 + 55) = *(void *)&v35[7];
      *(unsigned char *)(a3 + 63) = v18;
      *(_DWORD *)(a3 + 64) = v19;
      if (sub_9AF584(a2, a1))
      {
        long long v30 = *(_OWORD *)a1;
        long long v33 = *(_OWORD *)(a1 + 16);
        int v22 = *(_DWORD *)(a1 + 32);
        uint64_t v23 = *(void *)(a1 + 40);
        *(void *)uint64_t v36 = *(void *)(a1 + 48);
        *(void *)&v36[7] = *(void *)(a1 + 55);
        char v24 = *(unsigned char *)(a1 + 63);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        int v25 = *(_DWORD *)(a1 + 64);
        long long v26 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        long long v27 = *(_OWORD *)v16;
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = v27;
        *(unsigned char *)(a2 + 63) = 0;
        *(unsigned char *)(a2 + 40) = 0;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
        *(_OWORD *)a2 = v30;
        *(_OWORD *)(a2 + 16) = v33;
        *(_DWORD *)(a2 + 32) = v22;
        if (*(char *)(a2 + 63) < 0) {
          operator delete(*v16);
        }
        *(void *)(a2 + 40) = v23;
        *(void *)(a2 + 48) = *(void *)v36;
        *(void *)(a2 + 55) = *(void *)&v36[7];
        *(unsigned char *)(a2 + 63) = v24;
        *(_DWORD *)(a2 + 64) = v25;
      }
    }
  }
}

void sub_9B03D0(unint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v148 = (long long *)(a2 - 144);
    uint64_t v149 = (long long *)(a2 - 72);
    uint64_t v169 = a2;
    BOOL v147 = (long long *)(a2 - 216);
    unint64_t v8 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v8;
          unint64_t v9 = v169;
          uint64_t v10 = v169 - v8;
          uint64_t v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v169 - v8) >> 3);
          if (v5 || !v4)
          {
            switch(v11)
            {
              case 0:
              case 1:
                return;
              case 2:
                if (*(void *)(v169 - 48) < *(void *)(a1 + 24))
                {
                  long long v174 = *(_OWORD *)a1;
                  long long v182 = *(_OWORD *)(a1 + 16);
                  int v66 = *(_DWORD *)(a1 + 32);
                  uint64_t v67 = *(void *)(a1 + 40);
                  *(void *)long long v193 = *(void *)(a1 + 48);
                  *(void *)&v193[7] = *(void *)(a1 + 55);
                  char v68 = *(unsigned char *)(a1 + 63);
                  *(void *)(a1 + 48) = 0;
                  *(void *)(a1 + 56) = 0;
                  *(void *)(a1 + 40) = 0;
                  int v69 = *(_DWORD *)(a1 + 64);
                  long long v70 = *(_OWORD *)(v169 - 56);
                  *(_OWORD *)a1 = *(_OWORD *)(v169 - 72);
                  *(_OWORD *)(a1 + 16) = v70;
                  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v169 - 40);
                  long long v71 = *(_OWORD *)(v169 - 32);
                  *(void *)(a1 + 56) = *(void *)(v169 - 16);
                  *(_OWORD *)(a1 + 40) = v71;
                  *(unsigned char *)(v169 - 9) = 0;
                  *(unsigned char *)(v169 - 32) = 0;
                  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v169 - 8);
                  *(_OWORD *)(v169 - 56) = v182;
                  *(_OWORD *)(v169 - 72) = v174;
                  *(_DWORD *)(v169 - 40) = v66;
                  if (*(char *)(v169 - 9) < 0) {
                    operator delete(*(void **)(v169 - 32));
                  }
                  *(void *)(v169 - 32) = v67;
                  *(void *)(v169 - 17) = *(void *)&v193[7];
                  *(void *)(v169 - 24) = *(void *)v193;
                  *(unsigned char *)(v169 - 9) = v68;
                  *(_DWORD *)(v169 - 8) = v69;
                }
                break;
              case 3:
                sub_9B172C((long long *)a1, (long long *)(a1 + 72), v149);
                break;
              case 4:
                sub_9B1E58(a1, a1 + 72, a1 + 144, (uint64_t)v149);
                break;
              case 5:
                sub_9B13DC(a1, a1 + 72, a1 + 144, a1 + 216, (uint64_t)v149);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v10 <= 1727)
          {
            unint64_t v72 = a1 + 72;
            BOOL v74 = a1 == v169 || v72 == v169;
            if (a4)
            {
              if (!v74)
              {
                uint64_t v75 = 0;
                unint64_t v76 = a1;
                do
                {
                  unint64_t v77 = v72;
                  unint64_t v78 = *(void *)(v76 + 96);
                  if (v78 < *(void *)(v76 + 24))
                  {
                    uint64_t v183 = *(void *)(v72 + 16);
                    long long v175 = *(_OWORD *)v72;
                    int v79 = *(_DWORD *)(v76 + 104);
                    uint64_t v165 = *(void *)(v76 + 112);
                    *(void *)int v194 = *(void *)(v76 + 120);
                    *(void *)&v194[7] = *(void *)(v76 + 127);
                    char v80 = *(unsigned char *)(v76 + 135);
                    *(void *)(v76 + 120) = 0;
                    *(void *)(v76 + 128) = 0;
                    *(void *)(v76 + 112) = 0;
                    uint64_t v81 = v75;
                    int v82 = *(_DWORD *)(v76 + 136);
                    while (1)
                    {
                      uint64_t v83 = v81;
                      uint64_t v84 = a1 + v81;
                      long long v85 = *(_OWORD *)(a1 + v81 + 16);
                      *(_OWORD *)(v84 + 72) = *(_OWORD *)(a1 + v81);
                      *(_OWORD *)(v84 + 88) = v85;
                      *(_DWORD *)(v84 + 104) = *(_DWORD *)(a1 + v81 + 32);
                      uint64_t v86 = a1 + v81 + 112;
                      if (*(char *)(a1 + v81 + 135) < 0) {
                        operator delete(*(void **)v86);
                      }
                      *(_OWORD *)uint64_t v86 = *(_OWORD *)(v84 + 40);
                      *(void *)(v86 + 16) = *(void *)(v84 + 56);
                      *(unsigned char *)(v84 + 63) = 0;
                      *(unsigned char *)(v84 + 40) = 0;
                      *(_DWORD *)(v84 + 136) = *(_DWORD *)(v84 + 64);
                      if (!v83) {
                        break;
                      }
                      uint64_t v81 = v83 - 72;
                      if (v78 >= *(void *)(a1 + v83 - 48))
                      {
                        unint64_t v87 = a1 + v83;
                        goto LABEL_98;
                      }
                    }
                    unint64_t v87 = a1;
LABEL_98:
                    *(_OWORD *)unint64_t v87 = v175;
                    *(void *)(v87 + 16) = v183;
                    *(void *)(v87 + 24) = v78;
                    *(_DWORD *)(v87 + 32) = v79;
                    uint64_t v88 = a1 + v83;
                    if (*(char *)(v87 + 63) < 0) {
                      operator delete(*(void **)(v88 + 40));
                    }
                    unint64_t v9 = v169;
                    *(void *)(v88 + 40) = v165;
                    *(void *)(v87 + 48) = *(void *)v194;
                    *(void *)(v87 + 55) = *(void *)&v194[7];
                    *(unsigned char *)(v87 + 63) = v80;
                    *(_DWORD *)(v87 + 64) = v82;
                  }
                  unint64_t v72 = v77 + 72;
                  v75 += 72;
                  unint64_t v76 = v77;
                }
                while (v77 + 72 != v9);
              }
            }
            else if (!v74)
            {
              uint64_t v135 = (_DWORD *)(a1 + 136);
              do
              {
                unint64_t v136 = v72;
                unint64_t v137 = *(void *)(a1 + 96);
                if (v137 < *(void *)(a1 + 24))
                {
                  uint64_t v186 = *(void *)(v72 + 16);
                  long long v178 = *(_OWORD *)v72;
                  int v138 = *(_DWORD *)(a1 + 104);
                  uint64_t v139 = *(void *)(a1 + 112);
                  *(void *)v197 = *(void *)(a1 + 120);
                  *(void *)&v197[7] = *(void *)(a1 + 127);
                  char v140 = *(unsigned char *)(a1 + 135);
                  *(void *)(a1 + 120) = 0;
                  *(void *)(a1 + 128) = 0;
                  *(void *)(a1 + 112) = 0;
                  v141 = v135;
                  int v142 = *(_DWORD *)(a1 + 136);
                  do
                  {
                    long long v145 = *(_OWORD *)(v141 - 30);
                    *((_OWORD *)v141 - 4) = *(_OWORD *)(v141 - 34);
                    *((_OWORD *)v141 - 3) = v145;
                    *(v141 - 8) = *(v141 - 26);
                    int64_t v146 = (void **)(v141 - 6);
                    if (*((char *)v141 - 1) < 0) {
                      operator delete(*v146);
                    }
                    *(_OWORD *)int64_t v146 = *((_OWORD *)v141 - 6);
                    *((void *)v141 - 1) = *((void *)v141 - 10);
                    *((unsigned char *)v141 - 73) = 0;
                    *((unsigned char *)v141 - 96) = 0;
                    uint64_t v143 = v141 - 18;
                    _DWORD *v141 = *(v141 - 18);
                    unint64_t v144 = *((void *)v141 - 23);
                    v141 -= 18;
                  }
                  while (v137 < v144);
                  *((_OWORD *)v143 - 4) = v178;
                  *((void *)v143 - 6) = v186;
                  *((void *)v143 - 5) = v137;
                  *(v143 - 8) = v138;
                  if (*((char *)v143 - 1) < 0) {
                    operator delete(*((void **)v143 - 3));
                  }
                  *((void *)v143 - 3) = v139;
                  *(void *)((char *)v143 - 9) = *(void *)&v197[7];
                  *((void *)v143 - 2) = *(void *)v197;
                  *((unsigned char *)v143 - 1) = v140;
                  _DWORD *v143 = v142;
                  unint64_t v9 = v169;
                }
                unint64_t v72 = v136 + 72;
                v135 += 18;
                a1 = v136;
              }
              while (v136 + 72 != v9);
            }
            return;
          }
          if (!a3)
          {
            if (a1 != v169)
            {
              int64_t v89 = (unint64_t)(v11 - 2) >> 1;
              int64_t v90 = v89;
              do
              {
                int64_t v91 = v90;
                if (v89 >= v90)
                {
                  uint64_t v92 = (2 * v90) | 1;
                  unint64_t v93 = a1 + 72 * v92;
                  if (2 * v91 + 2 < v11)
                  {
                    unint64_t v94 = *(void *)(v93 + 24);
                    unint64_t v95 = *(void *)(v93 + 96);
                    v93 += 72 * (v94 < v95);
                    if (v94 < v95) {
                      uint64_t v92 = 2 * v91 + 2;
                    }
                  }
                  unint64_t v96 = a1 + 72 * v91;
                  unint64_t v97 = *(void *)(v96 + 24);
                  if (*(void *)(v93 + 24) >= v97)
                  {
                    uint64_t v184 = *(void *)(v96 + 16);
                    long long v176 = *(_OWORD *)v96;
                    unint64_t v98 = a1 + 72 * v91;
                    int v153 = *(_DWORD *)(v98 + 32);
                    uint64_t v166 = *(void *)(v98 + 40);
                    *(void *)&v195[7] = *(void *)(v98 + 55);
                    *(void *)long long v195 = *(void *)(v98 + 48);
                    char v99 = *(unsigned char *)(v96 + 63);
                    *(void *)(v98 + 40) = 0;
                    *(void *)(v98 + 48) = 0;
                    *(void *)(v98 + 56) = 0;
                    int v156 = *(_DWORD *)(v98 + 64);
                    char v160 = v99;
                    do
                    {
                      unint64_t v100 = v93;
                      long long v101 = *(_OWORD *)(v93 + 16);
                      *(_OWORD *)unint64_t v96 = *(_OWORD *)v93;
                      *(_OWORD *)(v96 + 16) = v101;
                      *(_DWORD *)(v96 + 32) = *(_DWORD *)(v93 + 32);
                      long long v102 = (void **)(v96 + 40);
                      if (*(char *)(v96 + 63) < 0) {
                        operator delete(*v102);
                      }
                      long long v103 = *(_OWORD *)(v100 + 40);
                      *(void *)(v96 + 56) = *(void *)(v100 + 56);
                      *(_OWORD *)long long v102 = v103;
                      *(unsigned char *)(v100 + 63) = 0;
                      *(unsigned char *)(v100 + 40) = 0;
                      *(_DWORD *)(v96 + 64) = *(_DWORD *)(v100 + 64);
                      if (v89 < v92) {
                        break;
                      }
                      uint64_t v104 = (2 * v92) | 1;
                      unint64_t v93 = a1 + 72 * v104;
                      if (2 * v92 + 2 < v11)
                      {
                        unint64_t v105 = *(void *)(v93 + 24);
                        unint64_t v106 = *(void *)(v93 + 96);
                        v93 += 72 * (v105 < v106);
                        if (v105 < v106) {
                          uint64_t v104 = 2 * v92 + 2;
                        }
                      }
                      unint64_t v96 = v100;
                      uint64_t v92 = v104;
                    }
                    while (*(void *)(v93 + 24) >= v97);
                    *(_OWORD *)unint64_t v100 = v176;
                    *(void *)(v100 + 16) = v184;
                    *(void *)(v100 + 24) = v97;
                    *(_DWORD *)(v100 + 32) = v153;
                    if (*(char *)(v100 + 63) < 0) {
                      operator delete(*(void **)(v100 + 40));
                    }
                    *(void *)(v100 + 40) = v166;
                    *(void *)(v100 + 48) = *(void *)v195;
                    *(void *)(v100 + 55) = *(void *)&v195[7];
                    *(unsigned char *)(v100 + 63) = v160;
                    *(_DWORD *)(v100 + 64) = v156;
                    unint64_t v9 = v169;
                  }
                }
                int64_t v90 = v91 - 1;
              }
              while (v91);
              int64_t v107 = v10 / 0x48uLL;
              do
              {
                uint64_t v109 = 0;
                unint64_t v110 = v9;
                long long v177 = *(_OWORD *)a1;
                long long v185 = *(_OWORD *)(a1 + 16);
                int v111 = *(_DWORD *)(a1 + 32);
                uint64_t v161 = *(void *)(a1 + 40);
                *(void *)int v189 = *(void *)(a1 + 48);
                *(void *)&v189[7] = *(void *)(a1 + 55);
                char v167 = *(unsigned char *)(a1 + 63);
                *(void *)(a1 + 48) = 0;
                *(void *)(a1 + 56) = 0;
                *(void *)(a1 + 40) = 0;
                unint64_t v112 = a1;
                int v157 = *(_DWORD *)(a1 + 64);
                do
                {
                  uint64_t v114 = v112 + 72 * v109 + 72;
                  uint64_t v115 = 2 * v109;
                  uint64_t v109 = (2 * v109) | 1;
                  uint64_t v116 = v115 + 2;
                  if (v115 + 2 < v107)
                  {
                    unint64_t v117 = *(void *)(v114 + 24);
                    unint64_t v118 = *(void *)(v114 + 96);
                    v114 += 72 * (v117 < v118);
                    if (v117 < v118) {
                      uint64_t v109 = v116;
                    }
                  }
                  long long v119 = *(_OWORD *)(v114 + 16);
                  *(_OWORD *)unint64_t v112 = *(_OWORD *)v114;
                  *(_OWORD *)(v112 + 16) = v119;
                  *(_DWORD *)(v112 + 32) = *(_DWORD *)(v114 + 32);
                  unint64_t v120 = (void **)(v112 + 40);
                  if (*(char *)(v112 + 63) < 0) {
                    operator delete(*v120);
                  }
                  long long v113 = *(_OWORD *)(v114 + 40);
                  *(void *)(v112 + 56) = *(void *)(v114 + 56);
                  *(_OWORD *)unint64_t v120 = v113;
                  *(unsigned char *)(v114 + 63) = 0;
                  *(unsigned char *)(v114 + 40) = 0;
                  *(_DWORD *)(v112 + 64) = *(_DWORD *)(v114 + 64);
                  unint64_t v112 = v114;
                }
                while (v109 <= (uint64_t)((unint64_t)(v107 - 2) >> 1));
                int v121 = (void **)(v114 + 40);
                uint64_t v122 = (long long *)(v110 - 72);
                unint64_t v170 = v110 - 72;
                if (v114 == v110 - 72)
                {
                  *(_OWORD *)uint64_t v114 = v177;
                  *(_OWORD *)(v114 + 16) = v185;
                  *(_DWORD *)(v114 + 32) = v111;
                  if (*(char *)(v114 + 63) < 0) {
                    operator delete(*v121);
                  }
                  *(void *)(v114 + 40) = v161;
                  *(void *)(v114 + 48) = *(void *)v189;
                  *(void *)(v114 + 55) = *(void *)&v189[7];
                  *(unsigned char *)(v114 + 63) = v167;
                  *(_DWORD *)(v114 + 64) = v157;
                }
                else
                {
                  long long v123 = *(_OWORD *)(v110 - 56);
                  *(_OWORD *)uint64_t v114 = *v122;
                  *(_OWORD *)(v114 + 16) = v123;
                  *(_DWORD *)(v114 + 32) = *(_DWORD *)(v110 - 40);
                  if (*(char *)(v114 + 63) < 0) {
                    operator delete(*v121);
                  }
                  long long v124 = *(_OWORD *)(v110 - 32);
                  *(void *)(v114 + 56) = *(void *)(v110 - 16);
                  *(_OWORD *)int v121 = v124;
                  *(unsigned char *)(v110 - 9) = 0;
                  *(unsigned char *)(v110 - 32) = 0;
                  *(_DWORD *)(v114 + 64) = *(_DWORD *)(v110 - 8);
                  *uint64_t v122 = v177;
                  *(_OWORD *)(v110 - 56) = v185;
                  *(_DWORD *)(v110 - 40) = v111;
                  if (*(char *)(v110 - 9) < 0) {
                    operator delete(*(void **)(v110 - 32));
                  }
                  *(void *)(v110 - 32) = v161;
                  *(void *)(v110 - 17) = *(void *)&v189[7];
                  *(void *)(v110 - 24) = *(void *)v189;
                  *(unsigned char *)(v110 - 9) = v167;
                  *(_DWORD *)(v110 - 8) = v157;
                  uint64_t v125 = v114 + 72 - a1;
                  if (v125 >= 73)
                  {
                    unint64_t v126 = (v125 / 0x48uLL - 2) >> 1;
                    unint64_t v127 = a1 + 72 * v126;
                    unint64_t v128 = *(void *)(v114 + 24);
                    if (*(void *)(v127 + 24) < v128)
                    {
                      uint64_t v200 = *(void *)(v114 + 16);
                      long long v196 = *(_OWORD *)v114;
                      int v129 = *(_DWORD *)(v114 + 32);
                      uint64_t v168 = *(void *)(v114 + 40);
                      *(void *)&v203[7] = *(void *)(v114 + 55);
                      *(void *)unint64_t v203 = *(void *)(v114 + 48);
                      char v162 = *(unsigned char *)(v114 + 63);
                      *int v121 = 0;
                      *(void *)(v114 + 48) = 0;
                      *(void *)(v114 + 56) = 0;
                      int v130 = *(_DWORD *)(v114 + 64);
                      do
                      {
                        uint64_t v131 = v127;
                        long long v132 = *(_OWORD *)(v127 + 16);
                        *(_OWORD *)uint64_t v114 = *(_OWORD *)v127;
                        *(_OWORD *)(v114 + 16) = v132;
                        *(_DWORD *)(v114 + 32) = *(_DWORD *)(v127 + 32);
                        uint64_t v133 = (void **)(v114 + 40);
                        if (*(char *)(v114 + 63) < 0) {
                          operator delete(*v133);
                        }
                        long long v134 = *(_OWORD *)(v131 + 40);
                        *(void *)(v114 + 56) = *(void *)(v131 + 56);
                        *(_OWORD *)uint64_t v133 = v134;
                        *(unsigned char *)(v131 + 63) = 0;
                        *(unsigned char *)(v131 + 40) = 0;
                        *(_DWORD *)(v114 + 64) = *(_DWORD *)(v131 + 64);
                        if (!v126) {
                          break;
                        }
                        unint64_t v126 = (v126 - 1) >> 1;
                        unint64_t v127 = a1 + 72 * v126;
                        uint64_t v114 = v131;
                      }
                      while (*(void *)(v127 + 24) < v128);
                      *(_OWORD *)uint64_t v131 = v196;
                      *(void *)(v131 + 16) = v200;
                      *(void *)(v131 + 24) = v128;
                      *(_DWORD *)(v131 + 32) = v129;
                      if (*(char *)(v131 + 63) < 0) {
                        operator delete(*(void **)(v131 + 40));
                      }
                      *(void *)(v131 + 40) = v168;
                      *(void *)(v131 + 48) = *(void *)v203;
                      *(void *)(v131 + 55) = *(void *)&v203[7];
                      *(unsigned char *)(v131 + 63) = v162;
                      *(_DWORD *)(v131 + 64) = v130;
                    }
                  }
                }
                BOOL v108 = v107-- <= 2;
                unint64_t v9 = v170;
              }
              while (!v108);
            }
            return;
          }
          unint64_t v12 = (unint64_t)v11 >> 1;
          unint64_t v13 = a1 + 72 * ((unint64_t)v11 >> 1);
          if ((unint64_t)v10 < 0x2401)
          {
            sub_9B172C((long long *)v13, (long long *)a1, v149);
            --a3;
            if (a4)
            {
LABEL_14:
              unint64_t v22 = *(void *)(a1 + 24);
              break;
            }
          }
          else
          {
            sub_9B172C((long long *)a1, (long long *)v13, v149);
            uint64_t v14 = 72 * v12;
            unint64_t v15 = a1 + 72 * v12;
            sub_9B172C((long long *)(a1 + 72), (long long *)(v15 - 72), v148);
            sub_9B172C((long long *)(a1 + 144), (long long *)(a1 + 72 + v14), v147);
            unint64_t v9 = v169;
            sub_9B172C((long long *)(v15 - 72), (long long *)v13, (long long *)(a1 + 72 + v14));
            long long v171 = *(_OWORD *)a1;
            long long v179 = *(_OWORD *)(a1 + 16);
            int v16 = *(_DWORD *)(a1 + 32);
            *(void *)((char *)&v190 + 7) = *(void *)(a1 + 55);
            uint64_t v17 = *(void *)(a1 + 40);
            *(void *)&long long v190 = *(void *)(a1 + 48);
            char v18 = *(unsigned char *)(a1 + 63);
            *(void *)(a1 + 48) = 0;
            *(void *)(a1 + 56) = 0;
            *(void *)(a1 + 40) = 0;
            int v19 = *(_DWORD *)(a1 + 64);
            long long v20 = *(_OWORD *)(v13 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v13;
            *(_OWORD *)(a1 + 16) = v20;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(v15 + 32);
            long long v21 = *(_OWORD *)(v15 + 40);
            *(void *)(a1 + 56) = *(void *)(v15 + 56);
            *(_OWORD *)(a1 + 40) = v21;
            *(unsigned char *)(v13 + 63) = 0;
            *(unsigned char *)(v15 + 40) = 0;
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(v15 + 64);
            *(_OWORD *)unint64_t v13 = v171;
            *(_OWORD *)(v13 + 16) = v179;
            *(_DWORD *)(v15 + 32) = v16;
            *(void *)(v15 + 40) = v17;
            *(void *)(v15 + 48) = v190;
            *(void *)(v15 + 55) = *(void *)((char *)&v190 + 7);
            *(unsigned char *)(v13 + 63) = v18;
            *(_DWORD *)(v15 + 64) = v19;
            --a3;
            if (a4) {
              goto LABEL_14;
            }
          }
          unint64_t v22 = *(void *)(a1 + 24);
          if (*(void *)(a1 - 48) < v22) {
            break;
          }
          uint64_t v198 = *(void *)(a1 + 16);
          long long v191 = *(_OWORD *)a1;
          unint64_t v23 = *(void *)(a1 + 24);
          char v24 = (void **)(a1 + 40);
          uint64_t v163 = *(void *)(a1 + 40);
          *(void *)unint64_t v187 = *(void *)(a1 + 48);
          *(void *)&v187[7] = *(void *)(a1 + 55);
          int v154 = *(_DWORD *)(a1 + 32);
          char v158 = *(unsigned char *)(a1 + 63);
          *(void *)(a1 + 40) = 0;
          *(void *)(a1 + 48) = 0;
          *(void *)(a1 + 56) = 0;
          if (v23 >= *(void *)(v9 - 48))
          {
            unint64_t v49 = a1 + 72;
            do
            {
              unint64_t v8 = v49;
              if (v49 >= v9) {
                break;
              }
              unint64_t v50 = *(void *)(v49 + 24);
              v49 += 72;
            }
            while (v23 >= v50);
          }
          else
          {
            unint64_t v25 = a1;
            do
            {
              unint64_t v8 = v25 + 72;
              unint64_t v26 = *(void *)(v25 + 96);
              v25 += 72;
            }
            while (v23 >= v26);
          }
          unint64_t v51 = v9;
          if (v8 < v9)
          {
            unint64_t v52 = v9;
            do
            {
              unint64_t v51 = v52 - 72;
              unint64_t v53 = *(void *)(v52 - 48);
              v52 -= 72;
            }
            while (v23 < v53);
          }
          int v54 = *(_DWORD *)(a1 + 64);
          while (v8 < v51)
          {
            long long v173 = *(_OWORD *)v8;
            long long v181 = *(_OWORD *)(v8 + 16);
            int v55 = *(_DWORD *)(v8 + 32);
            uint64_t v56 = *(void *)(v8 + 40);
            *(void *)int v202 = *(void *)(v8 + 48);
            *(void *)&v202[7] = *(void *)(v8 + 55);
            char v57 = *(unsigned char *)(v8 + 63);
            *(void *)(v8 + 48) = 0;
            *(void *)(v8 + 56) = 0;
            *(void *)(v8 + 40) = 0;
            int v58 = *(_DWORD *)(v8 + 64);
            long long v59 = *(_OWORD *)(v51 + 16);
            *(_OWORD *)unint64_t v8 = *(_OWORD *)v51;
            *(_OWORD *)(v8 + 16) = v59;
            *(_DWORD *)(v8 + 32) = *(_DWORD *)(v51 + 32);
            long long v60 = *(_OWORD *)(v51 + 40);
            *(void *)(v8 + 56) = *(void *)(v51 + 56);
            *(_OWORD *)(v8 + 40) = v60;
            *(unsigned char *)(v51 + 63) = 0;
            *(unsigned char *)(v51 + 40) = 0;
            *(_DWORD *)(v8 + 64) = *(_DWORD *)(v51 + 64);
            *(_OWORD *)unint64_t v51 = v173;
            *(_OWORD *)(v51 + 16) = v181;
            *(_DWORD *)(v51 + 32) = v55;
            if (*(char *)(v51 + 63) < 0) {
              operator delete(*(void **)(v51 + 40));
            }
            *(void *)(v51 + 40) = v56;
            *(void *)(v51 + 48) = *(void *)v202;
            *(void *)(v51 + 55) = *(void *)&v202[7];
            *(unsigned char *)(v51 + 63) = v57;
            *(_DWORD *)(v51 + 64) = v58;
            do
            {
              unint64_t v61 = *(void *)(v8 + 96);
              v8 += 72;
            }
            while (v23 >= v61);
            do
            {
              unint64_t v62 = *(void *)(v51 - 48);
              v51 -= 72;
            }
            while (v23 < v62);
          }
          long long v63 = (long long *)(v8 - 72);
          BOOL v4 = v8 - 72 >= a1;
          BOOL v5 = v8 - 72 == a1;
          if (v8 - 72 != a1)
          {
            long long v64 = *(_OWORD *)(v8 - 56);
            *(_OWORD *)a1 = *v63;
            *(_OWORD *)(a1 + 16) = v64;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 - 40);
            if (*(char *)(a1 + 63) < 0) {
              operator delete(*v24);
            }
            long long v65 = *(_OWORD *)(v8 - 32);
            *(void *)(a1 + 56) = *(void *)(v8 - 16);
            *(_OWORD *)char v24 = v65;
            *(unsigned char *)(v8 - 9) = 0;
            *(unsigned char *)(v8 - 32) = 0;
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 - 8);
          }
          *(void *)(v8 - 56) = v198;
          *long long v63 = v191;
          *(void *)(v8 - 48) = v23;
          *(_DWORD *)(v8 - 40) = v154;
          if (*(char *)(v8 - 9) < 0) {
            operator delete(*(void **)(v8 - 32));
          }
          a4 = 0;
          *(void *)(v8 - 32) = v163;
          *(void *)(v8 - 17) = *(void *)&v187[7];
          *(void *)(v8 - 24) = *(void *)v187;
          *(unsigned char *)(v8 - 9) = v158;
          *(_DWORD *)(v8 - 8) = v54;
        }
        uint64_t v27 = 0;
        uint64_t v199 = *(void *)(a1 + 16);
        long long v192 = *(_OWORD *)a1;
        int v151 = *(_DWORD *)(a1 + 32);
        long long v28 = (void **)(a1 + 40);
        uint64_t v159 = *(void *)(a1 + 40);
        uint64_t v164 = a3;
        *(void *)int v188 = *(void *)(a1 + 48);
        *(void *)&v188[7] = *(void *)(a1 + 55);
        char v155 = *(unsigned char *)(a1 + 63);
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        int v152 = *(_DWORD *)(a1 + 64);
        do
        {
          unint64_t v29 = *(void *)(a1 + v27 + 96);
          v27 += 72;
        }
        while (v29 < v22);
        unint64_t v30 = a1 + v27;
        unint64_t v31 = v9;
        if (v27 == 72)
        {
          unint64_t v34 = v9;
          while (v30 < v34)
          {
            unint64_t v32 = v34 - 72;
            unint64_t v35 = *(void *)(v34 - 48);
            v34 -= 72;
            if (v35 < v22) {
              goto LABEL_23;
            }
          }
          unint64_t v32 = v34;
          unint64_t v8 = v30;
        }
        else
        {
          do
          {
            unint64_t v32 = v31 - 72;
            unint64_t v33 = *(void *)(v31 - 48);
            v31 -= 72;
          }
          while (v33 >= v22);
LABEL_23:
          unint64_t v8 = v30;
          if (v30 < v32)
          {
            unint64_t v36 = v32;
            do
            {
              long long v172 = *(_OWORD *)v8;
              long long v180 = *(_OWORD *)(v8 + 16);
              int v37 = *(_DWORD *)(v8 + 32);
              uint64_t v38 = *(void *)(v8 + 40);
              *(void *)unint64_t v201 = *(void *)(v8 + 48);
              *(void *)&v201[7] = *(void *)(v8 + 55);
              char v39 = *(unsigned char *)(v8 + 63);
              *(void *)(v8 + 48) = 0;
              *(void *)(v8 + 56) = 0;
              *(void *)(v8 + 40) = 0;
              int v40 = *(_DWORD *)(v8 + 64);
              long long v41 = *(_OWORD *)(v36 + 16);
              *(_OWORD *)unint64_t v8 = *(_OWORD *)v36;
              *(_OWORD *)(v8 + 16) = v41;
              *(_DWORD *)(v8 + 32) = *(_DWORD *)(v36 + 32);
              long long v42 = *(_OWORD *)(v36 + 40);
              *(void *)(v8 + 56) = *(void *)(v36 + 56);
              *(_OWORD *)(v8 + 40) = v42;
              *(unsigned char *)(v36 + 63) = 0;
              *(unsigned char *)(v36 + 40) = 0;
              *(_DWORD *)(v8 + 64) = *(_DWORD *)(v36 + 64);
              *(_OWORD *)unint64_t v36 = v172;
              *(_OWORD *)(v36 + 16) = v180;
              *(_DWORD *)(v36 + 32) = v37;
              if (*(char *)(v36 + 63) < 0) {
                operator delete(*(void **)(v36 + 40));
              }
              *(void *)(v36 + 40) = v38;
              *(void *)(v36 + 48) = *(void *)v201;
              *(void *)(v36 + 55) = *(void *)&v201[7];
              *(unsigned char *)(v36 + 63) = v39;
              *(_DWORD *)(v36 + 64) = v40;
              do
              {
                unint64_t v43 = *(void *)(v8 + 96);
                v8 += 72;
              }
              while (v43 < v22);
              do
              {
                unint64_t v44 = *(void *)(v36 - 48);
                v36 -= 72;
              }
              while (v44 >= v22);
            }
            while (v8 < v36);
          }
        }
        long long v45 = (long long *)(v8 - 72);
        if (v8 - 72 != a1)
        {
          long long v46 = *(_OWORD *)(v8 - 56);
          *(_OWORD *)a1 = *v45;
          *(_OWORD *)(a1 + 16) = v46;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(v8 - 40);
          if (*(char *)(a1 + 63) < 0) {
            operator delete(*v28);
          }
          long long v47 = *(_OWORD *)(v8 - 32);
          *(void *)(a1 + 56) = *(void *)(v8 - 16);
          *(_OWORD *)long long v28 = v47;
          *(unsigned char *)(v8 - 9) = 0;
          *(unsigned char *)(v8 - 32) = 0;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(v8 - 8);
        }
        *(void *)(v8 - 56) = v199;
        *long long v45 = v192;
        *(void *)(v8 - 48) = v22;
        *(_DWORD *)(v8 - 40) = v151;
        if (*(char *)(v8 - 9) < 0) {
          operator delete(*(void **)(v8 - 32));
        }
        a3 = v164;
        *(void *)(v8 - 32) = v159;
        *(void *)(v8 - 17) = *(void *)&v188[7];
        *(void *)(v8 - 24) = *(void *)v188;
        *(unsigned char *)(v8 - 9) = v155;
        *(_DWORD *)(v8 - 8) = v152;
        if (v30 >= v32) {
          break;
        }
LABEL_40:
        sub_9B03D0(a1, v8 - 72, v164, a4 & 1);
        a4 = 0;
      }
      BOOL v48 = sub_9B1AF0(a1, v8 - 72);
      if (sub_9B1AF0(v8, v169)) {
        break;
      }
      if (!v48) {
        goto LABEL_40;
      }
    }
    a2 = v8 - 72;
    if (!v48) {
      continue;
    }
    break;
  }
}

void sub_9B13DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_9B1E58(a1, a2, a3, a4);
  if (*(void *)(a5 + 24) < *(void *)(a4 + 24))
  {
    long long v39 = *(_OWORD *)a4;
    long long v43 = *(_OWORD *)(a4 + 16);
    int v10 = *(_DWORD *)(a4 + 32);
    uint64_t v11 = (long long *)(a4 + 40);
    uint64_t v12 = *(void *)(a4 + 40);
    *(void *)long long v47 = *(void *)(a4 + 48);
    *(void *)&v47[7] = *(void *)(a4 + 55);
    char v13 = *(unsigned char *)(a4 + 63);
    *(void *)(a4 + 56) = 0;
    *(void *)(a4 + 48) = 0;
    *(void *)(a4 + 40) = 0;
    int v14 = *(_DWORD *)(a4 + 64);
    long long v15 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v15;
    *(_DWORD *)(a4 + 32) = *(_DWORD *)(a5 + 32);
    long long v16 = *(_OWORD *)(a5 + 40);
    *(void *)(a4 + 56) = *(void *)(a5 + 56);
    *(_OWORD *)(a4 + 40) = v16;
    *(unsigned char *)(a5 + 63) = 0;
    *(unsigned char *)(a5 + 40) = 0;
    *(_DWORD *)(a4 + 64) = *(_DWORD *)(a5 + 64);
    *(_OWORD *)a5 = v39;
    *(_OWORD *)(a5 + 16) = v43;
    *(_DWORD *)(a5 + 32) = v10;
    if (*(char *)(a5 + 63) < 0) {
      operator delete(*(void **)(a5 + 40));
    }
    *(void *)(a5 + 40) = v12;
    *(void *)(a5 + 48) = *(void *)v47;
    *(void *)(a5 + 55) = *(void *)&v47[7];
    *(unsigned char *)(a5 + 63) = v13;
    *(_DWORD *)(a5 + 64) = v14;
    if (*(void *)(a4 + 24) < *(void *)(a3 + 24))
    {
      long long v40 = *(_OWORD *)a3;
      long long v44 = *(_OWORD *)(a3 + 16);
      int v17 = *(_DWORD *)(a3 + 32);
      int v19 = (void **)(a3 + 40);
      uint64_t v18 = *(void *)(a3 + 40);
      *(void *)BOOL v48 = *(void *)(a3 + 48);
      *(void *)&v48[7] = *(void *)(a3 + 55);
      char v20 = *(unsigned char *)(a3 + 63);
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 40) = 0;
      int v21 = *(_DWORD *)(a3 + 64);
      long long v22 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v22;
      *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
      long long v23 = *v11;
      *(void *)(a3 + 56) = *(void *)(a4 + 56);
      *(_OWORD *)(a3 + 40) = v23;
      *(unsigned char *)(a4 + 63) = 0;
      *(unsigned char *)(a4 + 40) = 0;
      *(_DWORD *)(a3 + 64) = *(_DWORD *)(a4 + 64);
      *(_OWORD *)a4 = v40;
      *(_OWORD *)(a4 + 16) = v44;
      *(_DWORD *)(a4 + 32) = v17;
      if (*(char *)(a4 + 63) < 0)
      {
        char v24 = *(void **)v11;
        uint64_t v25 = v18;
        operator delete(v24);
        uint64_t v18 = v25;
      }
      *(void *)(a4 + 40) = v18;
      *(void *)(a4 + 48) = *(void *)v48;
      *(void *)(a4 + 55) = *(void *)&v48[7];
      *(unsigned char *)(a4 + 63) = v20;
      *(_DWORD *)(a4 + 64) = v21;
      if (*(void *)(a3 + 24) < *(void *)(a2 + 24))
      {
        long long v41 = *(_OWORD *)a2;
        long long v45 = *(_OWORD *)(a2 + 16);
        int v26 = *(_DWORD *)(a2 + 32);
        uint64_t v27 = (void **)(a2 + 40);
        uint64_t v28 = *(void *)(a2 + 40);
        *(void *)unint64_t v49 = *(void *)(a2 + 48);
        *(void *)&v49[7] = *(void *)(a2 + 55);
        char v29 = *(unsigned char *)(a2 + 63);
        *(void *)(a2 + 56) = 0;
        *(void *)(a2 + 48) = 0;
        *(void *)(a2 + 40) = 0;
        int v30 = *(_DWORD *)(a2 + 64);
        long long v31 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v31;
        *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
        long long v32 = *(_OWORD *)v19;
        *(void *)(a2 + 56) = *(void *)(a3 + 56);
        *(_OWORD *)(a2 + 40) = v32;
        *(unsigned char *)(a3 + 63) = 0;
        *(unsigned char *)(a3 + 40) = 0;
        *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
        *(_OWORD *)a3 = v41;
        *(_OWORD *)(a3 + 16) = v45;
        *(_DWORD *)(a3 + 32) = v26;
        if (*(char *)(a3 + 63) < 0) {
          operator delete(*v19);
        }
        *(void *)(a3 + 40) = v28;
        *(void *)(a3 + 48) = *(void *)v49;
        *(void *)(a3 + 55) = *(void *)&v49[7];
        *(unsigned char *)(a3 + 63) = v29;
        *(_DWORD *)(a3 + 64) = v30;
        if (*(void *)(a2 + 24) < *(void *)(a1 + 24))
        {
          long long v42 = *(_OWORD *)a1;
          long long v46 = *(_OWORD *)(a1 + 16);
          int v33 = *(_DWORD *)(a1 + 32);
          uint64_t v34 = *(void *)(a1 + 40);
          *(void *)unint64_t v50 = *(void *)(a1 + 48);
          *(void *)&v50[7] = *(void *)(a1 + 55);
          char v35 = *(unsigned char *)(a1 + 63);
          *(void *)(a1 + 48) = 0;
          *(void *)(a1 + 56) = 0;
          *(void *)(a1 + 40) = 0;
          int v36 = *(_DWORD *)(a1 + 64);
          long long v37 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v37;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
          long long v38 = *(_OWORD *)v27;
          *(void *)(a1 + 56) = *(void *)(a2 + 56);
          *(_OWORD *)(a1 + 40) = v38;
          *(unsigned char *)(a2 + 63) = 0;
          *(unsigned char *)(a2 + 40) = 0;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
          *(_OWORD *)a2 = v42;
          *(_OWORD *)(a2 + 16) = v46;
          *(_DWORD *)(a2 + 32) = v33;
          if (*(char *)(a2 + 63) < 0) {
            operator delete(*v27);
          }
          *(void *)(a2 + 40) = v34;
          *(void *)(a2 + 48) = *(void *)v50;
          *(void *)(a2 + 55) = *(void *)&v50[7];
          *(unsigned char *)(a2 + 63) = v35;
          *(_DWORD *)(a2 + 64) = v36;
        }
      }
    }
  }
}

void sub_9B172C(long long *a1, long long *a2, long long *a3)
{
  unint64_t v6 = *((void *)a2 + 3);
  unint64_t v7 = *((void *)a3 + 3);
  if (v6 >= *((void *)a1 + 3))
  {
    if (v7 < v6)
    {
      long long v41 = *a2;
      long long v46 = a2[1];
      int v16 = *((_DWORD *)a2 + 8);
      int v17 = (void **)a2 + 5;
      uint64_t v18 = *((void *)a2 + 5);
      int v19 = a2 + 3;
      *(void *)unint64_t v51 = *((void *)a2 + 6);
      *(void *)&v51[7] = *(void *)((char *)a2 + 55);
      char v20 = *((unsigned char *)a2 + 63);
      *((void *)a2 + 7) = 0;
      *((void *)a2 + 6) = 0;
      *((void *)a2 + 5) = 0;
      int v21 = *((_DWORD *)a2 + 16);
      long long v22 = a3[1];
      *a2 = *a3;
      a2[1] = v22;
      *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
      long long v23 = *(long long *)((char *)a3 + 40);
      *((void *)a2 + 7) = *((void *)a3 + 7);
      *(long long *)((char *)a2 + 40) = v23;
      *((unsigned char *)a3 + 63) = 0;
      *((unsigned char *)a3 + 40) = 0;
      *((_DWORD *)a2 + 16) = *((_DWORD *)a3 + 16);
      *a3 = v41;
      a3[1] = v46;
      *((_DWORD *)a3 + 8) = v16;
      if (*((char *)a3 + 63) < 0) {
        operator delete(*((void **)a3 + 5));
      }
      *((void *)a3 + 5) = v18;
      *((void *)a3 + 6) = *(void *)v51;
      *(void *)((char *)a3 + 55) = *(void *)&v51[7];
      *((unsigned char *)a3 + 63) = v20;
      *((_DWORD *)a3 + 16) = v21;
      if (*((void *)a2 + 3) < *((void *)a1 + 3))
      {
        long long v42 = *a1;
        long long v47 = a1[1];
        int v24 = *((_DWORD *)a1 + 8);
        uint64_t v25 = *((void *)a1 + 5);
        *(void *)unint64_t v52 = *((void *)a1 + 6);
        *(void *)&v52[7] = *(void *)((char *)a1 + 55);
        char v26 = *((unsigned char *)a1 + 63);
        *((void *)a1 + 6) = 0;
        *((void *)a1 + 7) = 0;
        *((void *)a1 + 5) = 0;
        int v27 = *((_DWORD *)a1 + 16);
        long long v28 = a2[1];
        *a1 = *a2;
        a1[1] = v28;
        *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
        long long v29 = *(_OWORD *)v17;
        *((void *)a1 + 7) = *((void *)a2 + 7);
        *(long long *)((char *)a1 + 40) = v29;
        *((unsigned char *)a2 + 63) = 0;
        *((unsigned char *)a2 + 40) = 0;
        *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
        *a2 = v42;
        a2[1] = v47;
        *((_DWORD *)a2 + 8) = v24;
        if (*((char *)a2 + 63) < 0) {
          operator delete(*v17);
        }
        *((void *)a2 + 5) = v25;
        void *v19 = *(void *)v52;
        *(void *)((char *)a2 + 55) = *(void *)&v52[7];
        *((unsigned char *)a2 + 63) = v26;
        *((_DWORD *)a2 + 16) = v27;
      }
    }
  }
  else
  {
    unint64_t v8 = (void *)a1 + 5;
    unint64_t v9 = a1 + 3;
    if (v7 >= v6)
    {
      long long v43 = *a1;
      long long v48 = a1[1];
      int v30 = *((_DWORD *)a1 + 8);
      uint64_t v31 = *((void *)a1 + 5);
      *(void *)unint64_t v53 = *v9;
      *(void *)&v53[7] = *(void *)((char *)a1 + 55);
      char v32 = *((unsigned char *)a1 + 63);
      *((void *)a1 + 6) = 0;
      *((void *)a1 + 7) = 0;
      void *v8 = 0;
      int v33 = *((_DWORD *)a1 + 16);
      long long v34 = a2[1];
      *a1 = *a2;
      a1[1] = v34;
      *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
      char v35 = (void **)a2 + 5;
      long long v36 = *(long long *)((char *)a2 + 40);
      *((void *)a1 + 7) = *((void *)a2 + 7);
      *(_OWORD *)unint64_t v8 = v36;
      *((unsigned char *)a2 + 63) = 0;
      *((unsigned char *)a2 + 40) = 0;
      *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
      *a2 = v43;
      a2[1] = v48;
      *((_DWORD *)a2 + 8) = v30;
      if (*((char *)a2 + 63) < 0) {
        operator delete(*v35);
      }
      *((void *)a2 + 6) = *(void *)v53;
      *((void *)a2 + 5) = v31;
      *(void *)((char *)a2 + 55) = *(void *)&v53[7];
      *((unsigned char *)a2 + 63) = v32;
      *((_DWORD *)a2 + 16) = v33;
      if (*((void *)a3 + 3) < *((void *)a2 + 3))
      {
        long long v44 = *a2;
        long long v49 = a2[1];
        int v37 = *((_DWORD *)a2 + 8);
        *(void *)int v54 = *((void *)a2 + 6);
        *(void *)&v54[7] = *(void *)((char *)a2 + 55);
        *((void *)a2 + 6) = 0;
        *((void *)a2 + 7) = 0;
        *char v35 = 0;
        long long v38 = a3[1];
        *a2 = *a3;
        a2[1] = v38;
        *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
        long long v39 = *(long long *)((char *)a3 + 40);
        *((void *)a2 + 7) = *((void *)a3 + 7);
        *(_OWORD *)char v35 = v39;
        *((unsigned char *)a3 + 63) = 0;
        *((unsigned char *)a3 + 40) = 0;
        *((_DWORD *)a2 + 16) = *((_DWORD *)a3 + 16);
        *a3 = v44;
        a3[1] = v49;
        *((_DWORD *)a3 + 8) = v37;
        if (*((char *)a3 + 63) < 0) {
          operator delete(*((void **)a3 + 5));
        }
        *((void *)a3 + 5) = v31;
        *((void *)a3 + 6) = *(void *)v54;
        *(void *)((char *)a3 + 55) = *(void *)&v54[7];
        *((unsigned char *)a3 + 63) = v32;
        *((_DWORD *)a3 + 16) = v33;
      }
    }
    else
    {
      long long v40 = *a1;
      long long v45 = a1[1];
      int v10 = *((_DWORD *)a1 + 8);
      uint64_t v11 = *((void *)a1 + 5);
      *(void *)unint64_t v50 = *v9;
      *(void *)&v50[7] = *(void *)((char *)a1 + 55);
      char v12 = *((unsigned char *)a1 + 63);
      *((void *)a1 + 6) = 0;
      *((void *)a1 + 7) = 0;
      void *v8 = 0;
      int v13 = *((_DWORD *)a1 + 16);
      long long v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((_DWORD *)a1 + 8) = *((_DWORD *)a3 + 8);
      long long v15 = *(long long *)((char *)a3 + 40);
      *((void *)a1 + 7) = *((void *)a3 + 7);
      *(_OWORD *)unint64_t v8 = v15;
      *((unsigned char *)a3 + 63) = 0;
      *((unsigned char *)a3 + 40) = 0;
      *((_DWORD *)a1 + 16) = *((_DWORD *)a3 + 16);
      *a3 = v40;
      a3[1] = v45;
      *((_DWORD *)a3 + 8) = v10;
      if (*((char *)a3 + 63) < 0) {
        operator delete(*((void **)a3 + 5));
      }
      *((void *)a3 + 5) = v11;
      *((void *)a3 + 6) = *(void *)v50;
      *(void *)((char *)a3 + 55) = *(void *)&v50[7];
      *((unsigned char *)a3 + 63) = v12;
      *((_DWORD *)a3 + 16) = v13;
    }
  }
}

BOOL sub_9B1AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(void *)(a2 - 48) < *(void *)(a1 + 24))
      {
        long long v29 = *(_OWORD *)a1;
        long long v31 = *(_OWORD *)(a1 + 16);
        int v6 = *(_DWORD *)(a1 + 32);
        uint64_t v7 = *(void *)(a1 + 40);
        *(void *)int v33 = *(void *)(a1 + 48);
        *(void *)&v33[7] = *(void *)(a1 + 55);
        char v8 = *(unsigned char *)(a1 + 63);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        int v9 = *(_DWORD *)(a1 + 64);
        long long v10 = *(_OWORD *)(a2 - 56);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 72);
        *(_OWORD *)(a1 + 16) = v10;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 - 40);
        long long v11 = *(_OWORD *)(a2 - 32);
        *(void *)(a1 + 56) = *(void *)(a2 - 16);
        *(_OWORD *)(a1 + 40) = v11;
        *(unsigned char *)(a2 - 9) = 0;
        *(unsigned char *)(a2 - 32) = 0;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 - 8);
        *(_OWORD *)(a2 - 72) = v29;
        *(_OWORD *)(a2 - 56) = v31;
        *(_DWORD *)(a2 - 40) = v6;
        if (*(char *)(a2 - 9) < 0) {
          operator delete(*(void **)(a2 - 32));
        }
        *(void *)(a2 - 32) = v7;
        *(void *)(a2 - 24) = *(void *)v33;
        *(void *)(a2 - 17) = *(void *)&v33[7];
        *(unsigned char *)(a2 - 9) = v8;
        *(_DWORD *)(a2 - 8) = v9;
        return 1;
      }
      return result;
    case 3uLL:
      sub_9B172C((long long *)a1, (long long *)(a1 + 72), (long long *)(a2 - 72));
      return 1;
    case 4uLL:
      sub_9B1E58(a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      sub_9B13DC(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72);
      return 1;
    default:
      uint64_t v12 = a1 + 144;
      sub_9B172C((long long *)a1, (long long *)(a1 + 72), (long long *)(a1 + 144));
      uint64_t v13 = a1 + 216;
      if (a1 + 216 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    unint64_t v16 = *(void *)(v13 + 24);
    if (v16 < *(void *)(v12 + 24))
    {
      long long v30 = *(_OWORD *)v13;
      uint64_t v32 = *(void *)(v13 + 16);
      int v17 = *(_DWORD *)(v13 + 32);
      uint64_t v28 = *(void *)(v13 + 40);
      *(void *)long long v34 = *(void *)(v13 + 48);
      *(void *)&v34[7] = *(void *)(v13 + 55);
      char v18 = *(unsigned char *)(v13 + 63);
      *(void *)(v13 + 48) = 0;
      *(void *)(v13 + 56) = 0;
      *(void *)(v13 + 40) = 0;
      uint64_t v19 = v14;
      int v26 = *(_DWORD *)(v13 + 64);
      char v27 = v18;
      while (1)
      {
        uint64_t v20 = v19;
        uint64_t v21 = a1 + v19;
        long long v22 = *(_OWORD *)(a1 + v19 + 160);
        *(_OWORD *)(v21 + 216) = *(_OWORD *)(a1 + v19 + 144);
        *(_OWORD *)(v21 + 232) = v22;
        *(_DWORD *)(v21 + 248) = *(_DWORD *)(a1 + v19 + 176);
        uint64_t v23 = a1 + v19 + 256;
        if (*(char *)(a1 + v19 + 279) < 0) {
          operator delete(*(void **)v23);
        }
        *(_OWORD *)uint64_t v23 = *(_OWORD *)(v21 + 184);
        *(void *)(v23 + 16) = *(void *)(v21 + 200);
        *(unsigned char *)(v21 + 207) = 0;
        *(unsigned char *)(v21 + 184) = 0;
        *(_DWORD *)(v21 + 280) = *(_DWORD *)(v21 + 208);
        if (v20 == -144) {
          break;
        }
        uint64_t v19 = v20 - 72;
        if (v16 >= *(void *)(a1 + v20 + 96))
        {
          uint64_t v24 = a1 + v19 + 216;
          goto LABEL_18;
        }
      }
      uint64_t v24 = a1;
LABEL_18:
      *(_OWORD *)uint64_t v24 = v30;
      *(void *)(v24 + 16) = v32;
      *(void *)(v24 + 24) = v16;
      *(_DWORD *)(v24 + 32) = v17;
      uint64_t v25 = a1 + v20;
      if (*(char *)(v24 + 63) < 0) {
        operator delete(*(void **)(v25 + 184));
      }
      *(void *)(v25 + 184) = v28;
      *(void *)(v24 + 48) = *(void *)v34;
      *(void *)(v24 + 55) = *(void *)&v34[7];
      *(unsigned char *)(v24 + 63) = v27;
      *(_DWORD *)(v24 + 64) = v26;
      if (++v15 == 8) {
        return v13 + 72 == a2;
      }
    }
    uint64_t v12 = v13;
    v14 += 72;
    v13 += 72;
    if (v13 == a2) {
      return 1;
    }
  }
}

void sub_9B1E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_9B172C((long long *)a1, (long long *)a2, (long long *)a3);
  if (*(void *)(a4 + 24) < *(void *)(a3 + 24))
  {
    long long v28 = *(_OWORD *)a3;
    long long v31 = *(_OWORD *)(a3 + 16);
    int v8 = *(_DWORD *)(a3 + 32);
    int v9 = (void **)(a3 + 40);
    uint64_t v10 = *(void *)(a3 + 40);
    *(void *)long long v34 = *(void *)(a3 + 48);
    *(void *)&v34[7] = *(void *)(a3 + 55);
    char v11 = *(unsigned char *)(a3 + 63);
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 40) = 0;
    int v12 = *(_DWORD *)(a3 + 64);
    long long v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v13;
    *(_DWORD *)(a3 + 32) = *(_DWORD *)(a4 + 32);
    long long v14 = *(_OWORD *)(a4 + 40);
    *(void *)(a3 + 56) = *(void *)(a4 + 56);
    *(_OWORD *)(a3 + 40) = v14;
    *(unsigned char *)(a4 + 63) = 0;
    *(unsigned char *)(a4 + 40) = 0;
    *(_DWORD *)(a3 + 64) = *(_DWORD *)(a4 + 64);
    *(_OWORD *)a4 = v28;
    *(_OWORD *)(a4 + 16) = v31;
    *(_DWORD *)(a4 + 32) = v8;
    if (*(char *)(a4 + 63) < 0) {
      operator delete(*(void **)(a4 + 40));
    }
    *(void *)(a4 + 40) = v10;
    *(void *)(a4 + 48) = *(void *)v34;
    *(void *)(a4 + 55) = *(void *)&v34[7];
    *(unsigned char *)(a4 + 63) = v11;
    *(_DWORD *)(a4 + 64) = v12;
    if (*(void *)(a3 + 24) < *(void *)(a2 + 24))
    {
      long long v29 = *(_OWORD *)a2;
      long long v32 = *(_OWORD *)(a2 + 16);
      int v15 = *(_DWORD *)(a2 + 32);
      unint64_t v16 = (void **)(a2 + 40);
      uint64_t v17 = *(void *)(a2 + 40);
      *(void *)char v35 = *(void *)(a2 + 48);
      *(void *)&v35[7] = *(void *)(a2 + 55);
      char v18 = *(unsigned char *)(a2 + 63);
      *(void *)(a2 + 56) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 40) = 0;
      int v19 = *(_DWORD *)(a2 + 64);
      long long v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
      long long v21 = *(_OWORD *)v9;
      *(void *)(a2 + 56) = *(void *)(a3 + 56);
      *(_OWORD *)(a2 + 40) = v21;
      *(unsigned char *)(a3 + 63) = 0;
      *(unsigned char *)(a3 + 40) = 0;
      *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
      *(_OWORD *)a3 = v29;
      *(_OWORD *)(a3 + 16) = v32;
      *(_DWORD *)(a3 + 32) = v15;
      if (*(char *)(a3 + 63) < 0) {
        operator delete(*v9);
      }
      *(void *)(a3 + 40) = v17;
      *(void *)(a3 + 48) = *(void *)v35;
      *(void *)(a3 + 55) = *(void *)&v35[7];
      *(unsigned char *)(a3 + 63) = v18;
      *(_DWORD *)(a3 + 64) = v19;
      if (*(void *)(a2 + 24) < *(void *)(a1 + 24))
      {
        long long v30 = *(_OWORD *)a1;
        long long v33 = *(_OWORD *)(a1 + 16);
        int v22 = *(_DWORD *)(a1 + 32);
        uint64_t v23 = *(void *)(a1 + 40);
        *(void *)long long v36 = *(void *)(a1 + 48);
        *(void *)&v36[7] = *(void *)(a1 + 55);
        char v24 = *(unsigned char *)(a1 + 63);
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        int v25 = *(_DWORD *)(a1 + 64);
        long long v26 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v26;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        long long v27 = *(_OWORD *)v16;
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(_OWORD *)(a1 + 40) = v27;
        *(unsigned char *)(a2 + 63) = 0;
        *(unsigned char *)(a2 + 40) = 0;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
        *(_OWORD *)a2 = v30;
        *(_OWORD *)(a2 + 16) = v33;
        *(_DWORD *)(a2 + 32) = v22;
        if (*(char *)(a2 + 63) < 0) {
          operator delete(*v16);
        }
        *(void *)(a2 + 40) = v23;
        *(void *)(a2 + 48) = *(void *)v36;
        *(void *)(a2 + 55) = *(void *)&v36[7];
        *(unsigned char *)(a2 + 63) = v24;
        *(_DWORD *)(a2 + 64) = v25;
      }
    }
  }
}

double sub_9B20E8()
{
  byte_25DC4BF = 1;
  word_25DC4A8 = 65;
  byte_25DC4D7 = 1;
  word_25DC4C0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DC568 = 0u;
  *(_OWORD *)&qword_25DC578 = 0u;
  dword_25DC588 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DC568, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DC568, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DC568, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DC568, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DC4EF = 8;
  strcpy((char *)&qword_25DC4D8, "any_mode");
  byte_25DC507 = 7;
  strcpy((char *)&dword_25DC4F0, "cycling");
  byte_25DC51F = 7;
  strcpy((char *)&dword_25DC508, "driving");
  byte_25DC537 = 7;
  strcpy((char *)&dword_25DC520, "walking");
  qword_25DC540 = 0;
  qword_25DC548 = 0;
  qword_25DC538 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DC538 = (uint64_t)v0;
  qword_25DC540 = (uint64_t)(v0 + 9);
  qword_25DC548 = (uint64_t)(v0 + 9);
  qword_25DC550 = 0;
  qword_25DC558 = 0;
  unk_25DC560 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DC558 = (uint64_t)(v1 + 9);
  unk_25DC560 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DC550 = (uint64_t)v1;
  return result;
}

void sub_9B23B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DC578) {
    sub_20AD404((void **)qword_25DC578);
  }
  int v37 = (void *)xmmword_25DC568;
  *(void *)&xmmword_25DC568 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_9B2450(uint64_t a1, void *a2, char a3)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "walk_far_threshold_minutes");
  *(_DWORD *)a1 = 600 * sub_319F48(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8E90;
  strcpy((char *)__p[0], "enable_ambiguous_walk_detection");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 4) = v6;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "enable_service_status");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 5) = v7;
  *(unsigned char *)(a1 + 6) = a3;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93C0;
  strcpy((char *)__p[0], "enable_journey_planner_service_frequency");
  BOOL v8 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 7) = v8;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9280;
  strcpy((char *)__p[0], "enable_platform_assignment_updates");
  BOOL v9 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 8) = v9;
  return a1;
}

void sub_9B263C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9B2668(uint64_t a1, void *a2, char a3)
{
  HIBYTE(v13[2]) = 19;
  strcpy((char *)v13, "TransitRouteBuilder");
  long long __p = 0;
  int v11 = 0;
  uint64_t v12 = 0;
  BOOL v6 = sub_374CDC((uint64_t)a2, (uint64_t)v13, (uint64_t *)&__p);
  sub_9B2450(a1, v6, a3);
  BOOL v7 = (void **)__p;
  if (__p)
  {
    BOOL v8 = v11;
    BOOL v9 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      BOOL v9 = __p;
    }
    int v11 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v13[2]) < 0) {
    operator delete(v13[0]);
  }
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = sub_375500(a2);
  *(void *)(a1 + 32) = sub_3755E4(*(void **)(a1 + 16));
  *(void *)(a1 + 40) = sub_375B24(*(void **)(a1 + 16));
  *(void *)(a1 + 48) = sub_3750CC(*(void **)(a1 + 16));
  nullsub_1(a1 + 56);
  nullsub_1(a1 + 57);
  *(void *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = 0x7FFFFFFF;
  *(void *)(a1 + 80) = -1;
  *(void *)(a1 + 88) = -1;
  *(void *)(a1 + 96) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = -1935635296;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 127) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 164) = 100;
  *(void *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 376) = xmmword_20B8E30;
  *(void *)(a1 + 392) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 424) = 0;
  *(void *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 436) = xmmword_20E22B0;
  *(void *)(a1 + 456) = -1;
  *(void *)(a1 + 464) = -1;
  *(void *)(a1 + 472) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = -1935635296;
  *(_DWORD *)(a1 + 503) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 540) = 100;
  *(void *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(unsigned char *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(void *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 752) = xmmword_20B8E30;
  *(void *)(a1 + 768) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 800) = 0;
  *(void *)(a1 + 792) = 0;
  *(unsigned char *)(a1 + 808) = 0;
  *(_DWORD *)(a1 + 812) = 0;
  sub_5B9B3C(a1 + 816);
  *(void *)(a1 + 2352) = *(void *)(a1 + 32);
  *(void *)(a1 + 2360) = a1 + 56;
  sub_938160((uint64_t *)(a1 + 2368), a2);
  *(_OWORD *)(a1 + 2416) = 0u;
  *(_OWORD *)(a1 + 2400) = 0u;
  *(void *)(a1 + 2432) = -1;
  *(_DWORD *)(a1 + 2440) = 0x7FFFFFFF;
  *(void *)(a1 + 2448) = 0;
  *(void *)(a1 + 2464) = 0;
  *(void *)(a1 + 2456) = 0;
  *(void *)(a1 + 2472) = -1;
  *(_DWORD *)(a1 + 2480) = 0x7FFFFFFF;
  *(void *)(a1 + 2488) = 0;
  *(void *)(a1 + 2504) = 0;
  *(void *)(a1 + 2496) = 0;
  *(unsigned char *)(a1 + 2512) = 0;
  *(void *)(a1 + 2520) = -1;
  *(_DWORD *)(a1 + 2528) = 0;
  operator new();
}

void sub_9B2968()
{
}

void sub_9B2A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_9B2A90(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_9CCA04(v2);
    operator delete();
  }
  return a1;
}

uint64_t *sub_9B2AD8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_8F3800(v2);
    operator delete();
  }
  return a1;
}

uint64_t sub_9B2B24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 2536);
  *(void *)(a1 + 2536) = 0;
  if (v2) {
    operator delete();
  }
  if (*(char *)(a1 + 2511) < 0)
  {
    operator delete(*(void **)(a1 + 2488));
    if ((*(char *)(a1 + 2471) & 0x80000000) == 0)
    {
LABEL_5:
      uint64_t v3 = *(void *)(a1 + 2424);
      *(void *)(a1 + 2424) = 0;
      if (v3) {
        goto LABEL_6;
      }
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 2471) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 2448));
  uint64_t v3 = *(void *)(a1 + 2424);
  *(void *)(a1 + 2424) = 0;
  if (v3)
  {
LABEL_6:
    sub_9CCA04(v3);
    operator delete();
  }
LABEL_7:
  uint64_t v4 = *(void *)(a1 + 2416);
  *(void *)(a1 + 2416) = 0;
  if (v4) {
    operator delete();
  }
  uint64_t v5 = *(void *)(a1 + 2408);
  *(void *)(a1 + 2408) = 0;
  if (v5) {
    operator delete();
  }
  uint64_t v6 = *(void *)(a1 + 2400);
  *(void *)(a1 + 2400) = 0;
  if (v6)
  {
    sub_8F3800(v6);
    operator delete();
  }
  sub_4BCED0(a1 + 816);
  sub_402C7C(a1 + 440);
  sub_402C7C(a1 + 64);
  return a1;
}

void sub_9B2C44(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W5>, uint64_t a6@<X8>)
{
  int v11 = (unsigned int *)(a1 + 64);
  sub_5A303C(a1 + 64, a2);
  sub_5A303C(a1 + 440, a3);
  sub_5B949C(a1 + 816, a4);
  sub_9B3624(a1, (uint64_t)v11, (uint64_t)__t);
  *(std::chrono::system_clock::time_point *)(a1 + 2432) = __t[0];
  *(_DWORD *)(a1 + 2440) = __t[1].__d_.__rep_;
  uint64_t v12 = (void **)(a1 + 2448);
  if (*(char *)(a1 + 2471) < 0) {
    operator delete(*v12);
  }
  *(_OWORD *)uint64_t v12 = v38;
  *(void *)(a1 + 2464) = v39;
  sub_9B3624(a1, a1 + 440, (uint64_t)__t);
  *(std::chrono::system_clock::time_point *)(a1 + 2472) = __t[0];
  *(_DWORD *)(a1 + 2480) = __t[1].__d_.__rep_;
  char v13 = (void **)(a1 + 2488);
  if (*(char *)(a1 + 2511) < 0) {
    operator delete(*v13);
  }
  *(_OWORD *)char v13 = v38;
  *(void *)(a1 + 2504) = v39;
  *(_OWORD *)(a6 + 256) = 0u;
  *(_OWORD *)(a6 + 272) = 0u;
  *(_OWORD *)(a6 + 224) = 0u;
  *(_OWORD *)(a6 + 240) = 0u;
  *(_OWORD *)(a6 + 192) = 0u;
  *(_OWORD *)(a6 + 208) = 0u;
  *(_OWORD *)(a6 + 160) = 0u;
  *(_OWORD *)(a6 + 176) = 0u;
  *(_OWORD *)(a6 + 128) = 0u;
  *(_OWORD *)(a6 + 144) = 0u;
  *(_OWORD *)(a6 + 96) = 0u;
  *(_OWORD *)(a6 + 112) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_OWORD *)(a6 + 80) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  __t[0] = std::chrono::system_clock::now();
  int v14 = std::chrono::system_clock::to_time_t(__t);
  *(_DWORD *)(a6 + 288) = v14;
  *(_DWORD *)(a6 + 292) = v14;
  *(_OWORD *)(a6 + 296) = 0u;
  *(_OWORD *)(a6 + 312) = 0u;
  *(_OWORD *)(a6 + 328) = 0u;
  *(_OWORD *)(a6 + 344) = 0u;
  *(_OWORD *)(a6 + 360) = 0u;
  *(_OWORD *)(a6 + 376) = 0u;
  *(_OWORD *)(a6 + 392) = 0u;
  *(_OWORD *)(a6 + 408) = 0u;
  *(_OWORD *)(a6 + 424) = 0u;
  *(void *)(a6 + 440) = 0;
  *(_DWORD *)(a6 + 448) = 0x7FFFFFFF;
  *(unsigned char *)(a6 + 456) = 1;
  *(void *)(a6 + 552) = 0;
  *(unsigned char *)(a6 + 560) = 0;
  *(_OWORD *)(a6 + 504) = 0u;
  *(_OWORD *)(a6 + 520) = 0u;
  *(_OWORD *)(a6 + 529) = 0u;
  *(_OWORD *)(a6 + 664) = 0u;
  *(_OWORD *)(a6 + 680) = 0u;
  *(_OWORD *)(a6 + 632) = 0u;
  *(_OWORD *)(a6 + 648) = 0u;
  *(_OWORD *)(a6 + 600) = 0u;
  *(_OWORD *)(a6 + 616) = 0u;
  *(_OWORD *)(a6 + 568) = 0u;
  *(_OWORD *)(a6 + 584) = 0u;
  *(_OWORD *)(a6 + 464) = 0u;
  *(_OWORD *)(a6 + 480) = 0u;
  *(_DWORD *)(a6 + 496) = 0;
  uint64_t v15 = sub_37B3A8(*(void *)(a1 + 16));
  uint64_t v16 = *(void *)v15;
  *(_DWORD *)(a6 + 296) = *(_DWORD *)(v15 + 8);
  *(void *)(a6 + 288) = v16;
  *(_DWORD *)(a6 + 300) = a5;
  uint64_t v17 = sub_3757C8(*(void **)(a1 + 16));
  char v18 = sub_398020(v17, 0);
  int v19 = &v18[-*(int *)v18];
  if (*(unsigned __int16 *)v19 < 5u || (uint64_t v20 = *((unsigned __int16 *)v19 + 2)) == 0)
  {
    BYTE7(v38) = 0;
    LOBYTE(__t[0].__d_.__rep_) = 0;
    uint64_t v26 = a6 + 328;
    if ((*(char *)(a6 + 351) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  long long v21 = &v18[v20];
  uint64_t v22 = *(unsigned int *)v21;
  char v24 = &v21[v22 + 4];
  size_t v23 = *(unsigned int *)&v21[v22];
  if (v23 >= 0x17)
  {
    uint64_t v32 = (v23 & 0xFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17) {
      uint64_t v32 = v23 | 7;
    }
    uint64_t v33 = v32 + 1;
    int v25 = operator new(v32 + 1);
    __t[1].__d_.__rep_ = v23;
    *(void *)&long long v38 = v33 | 0x8000000000000000;
    __t[0].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v25;
  }
  else
  {
    BYTE7(v38) = *(_DWORD *)&v21[v22];
    int v25 = __t;
    if (!v23)
    {
LABEL_29:
      v25[v23] = 0;
      uint64_t v26 = a6 + 328;
      if ((*(char *)(a6 + 351) & 0x80000000) == 0)
      {
LABEL_12:
        *(_OWORD *)uint64_t v26 = *(_OWORD *)&__t[0].__d_.__rep_;
        *(void *)(v26 + 16) = v38;
        uint64_t v27 = *(void *)(a1 + 48);
        sub_4071CC(v27, v11, 1u, 1000000, (uint64_t)sub_29C8, (char **)__t);
        rep = (void *)__t[0].__d_.__rep_;
        if (__t[0].__d_.__rep_ == __t[1].__d_.__rep_)
        {
          v35[0] = 0;
          v35[1] = 0;
          uint64_t v36 = 0;
          if (!__t[0].__d_.__rep_)
          {
LABEL_15:
            long long v29 = (void **)(a6 + 304);
            if (*(char *)(a6 + 327) < 0) {
              operator delete(*v29);
            }
            *(_OWORD *)long long v29 = *(_OWORD *)v35;
            *(void *)(a6 + 320) = v36;
            uint64_t v30 = *(void *)(a1 + 48);
            sub_4071CC(v30, (unsigned int *)(a1 + 440), 1u, 1000000, (uint64_t)sub_29C8, (char **)__t);
            long long v31 = (void *)__t[0].__d_.__rep_;
            if (__t[0].__d_.__rep_ == __t[1].__d_.__rep_)
            {
              v35[0] = 0;
              v35[1] = 0;
              uint64_t v36 = 0;
              if (!__t[0].__d_.__rep_)
              {
LABEL_20:
                sub_47FC34((void *)(a6 + 304), (unsigned __int8 *)v35, (uint64_t)&__p);
                *(void *)(a6 + 464) = sub_9B3910(a1);
                operator new();
              }
            }
            else
            {
              sub_3D63DC(v30, *(void *)(__t[0].__d_.__rep_ + 8), v35);
              long long v31 = (void *)__t[0].__d_.__rep_;
              if (!__t[0].__d_.__rep_) {
                goto LABEL_20;
              }
            }
            __t[1].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)v31;
            operator delete(v31);
            goto LABEL_20;
          }
        }
        else
        {
          sub_3D63DC(v27, *(void *)(__t[0].__d_.__rep_ + 8), v35);
          rep = (void *)__t[0].__d_.__rep_;
          if (!__t[0].__d_.__rep_) {
            goto LABEL_15;
          }
        }
        __t[1].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000>>::rep)rep;
        operator delete(rep);
        goto LABEL_15;
      }
LABEL_11:
      operator delete(*(void **)v26);
      goto LABEL_12;
    }
  }
  memcpy(v25, v24, v23);
  goto LABEL_29;
}

void sub_9B3460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (__p) {
    operator delete(__p);
  }
  sub_9BE2CC(v35);
  _Unwind_Resume(a1);
}

void sub_9B3624(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 16) = 0;
  uint64_t v4 = (std::string *)(a3 + 16);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)a3 = *(void *)a2;
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 48);
  sub_4071CC(v5, (unsigned int *)a3, 1u, 1000000, (uint64_t)sub_29C8, (char **)&__p);
  uint64_t v6 = (void (__cdecl **)(std::stringbuf *__hidden))__p;
  if (__p != v15)
  {
    sub_3BDCD8(v5, *((void *)__p + 1), &v18);
    uint64_t v6 = (void (__cdecl **)(std::stringbuf *__hidden))__p;
    if (!__p) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  long long v18 = 0uLL;
  std::string::size_type v19 = 0;
  if (__p)
  {
LABEL_3:
    uint64_t v15 = v6;
    operator delete(v6);
  }
LABEL_4:
  if (*(char *)(a3 + 39) < 0) {
    operator delete(v4->__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v18;
  v4->__r_.__value_.__r.__words[2] = v19;
  uint64_t v7 = *(unsigned __int8 *)(a3 + 39);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 24);
  }
  if (!v7)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&__p);
      BOOL v8 = sub_188FC78(&__p, (uint64_t)"Road segment has no time zone information. Falling back to UTC. Req: ", 69);
      BOOL v9 = sub_69510();
      uint64_t v10 = sub_68EE4((uint64_t)v9);
      int v11 = *(char *)(v10 + 23);
      if (v11 >= 0) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = *(void *)v10;
      }
      if (v11 >= 0) {
        uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
      }
      else {
        uint64_t v13 = *(void *)(v10 + 8);
      }
      sub_188FC78(v8, v12, v13);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v18, 1u);
      if (SHIBYTE(v19) < 0) {
        operator delete((void *)v18);
      }
      if (v17 < 0) {
        operator delete(v16);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    std::string::assign(v4, "UTC");
  }
}

void sub_9B3888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (*(char *)(v12 - 49) < 0) {
    operator delete(*(void **)(v12 - 72));
  }
  sub_111ECAC((uint64_t)&__p);
  if ((*(char *)(v11 + 39) & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(*v10);
  _Unwind_Resume(a1);
}

unint64_t sub_9B3910(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v10 = 0;
  *(void *)uint64_t v11 = operator new(0x20uLL);
  *(_OWORD *)&v11[8] = xmmword_20B8E90;
  strcpy(*(char **)v11, "TransitRouteUpdateConfiguration");
  long long __p = 0;
  BOOL v9 = 0;
  uint64_t v2 = sub_374CDC(v1, (uint64_t)v11, (uint64_t *)&__p);
  uint64_t v3 = (void **)__p;
  if (__p)
  {
    uint64_t v4 = v9;
    uint64_t v5 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v3);
      uint64_t v5 = __p;
    }
    BOOL v9 = v3;
    operator delete(v5);
  }
  if ((v11[23] & 0x80000000) != 0) {
    operator delete(*(void **)v11);
  }
  v11[23] = 11;
  strcpy(v11, "ttl_seconds");
  unint64_t result = sub_9BDA8C(v2, (uint64_t)v11);
  unint64_t v7 = result;
  if ((v11[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v11);
    return v7;
  }
  return result;
}

void sub_9B3A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9B3A74(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_9BE450(a3);
  *(void *)(a3 + 24) = *(void *)a2;
  *(_WORD *)(a3 + 32) = *(_WORD *)(a2 + 8);
  *(void *)(a3 + 36) = *(void *)(a2 + 12);
  *(_WORD *)(a3 + 44) = *(_WORD *)(a2 + 20);
  *(void *)(a3 + 48) = sub_9B3D44(a1, a2);
  if (a3 + 1056 != a2 + 48) {
    sub_9C0DA8((void *)(a3 + 1056), *(char **)(a2 + 48), *(char **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2));
  }
  if (a3 + 1080 != a2 + 72) {
    sub_9C0DA8((void *)(a3 + 1080), *(char **)(a2 + 72), *(char **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2));
  }
  *(_OWORD *)(a3 + 1216) = *(_OWORD *)(a2 + 160);
  *(unsigned char *)(a3 + 1200) = sub_9B4164(a1, a2);
  *(_DWORD *)(a3 + 1208) = *(_DWORD *)(a2 + 128);
  *(unsigned char *)(a3 + 1212) = *(unsigned char *)(a2 + 132);
  if (a3 + 2344 != a2 + 136) {
    sub_326C0((void *)(a3 + 2344), *(char **)(a2 + 136), *(char **)(a2 + 144), (uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 3);
  }
  *(unsigned char *)(a1 + 2512) = sub_49B018(a2);
  *(_DWORD *)(a1 + 2528) = *(_DWORD *)(a2 + 128);
  sub_93AE10((uint64_t)v24, *(void **)(a1 + 16), a1 + 816);
  sub_93AE14((uint64_t)v24, a2, &__p);
  uint64_t v6 = (void **)__p;
  unint64_t v7 = v23;
  if (__p != v23)
  {
    do
    {
      sub_9B42EC(a1, v6, (uint64_t)&__p, a2, (int64x2_t *)a3);
      v6 += 3;
    }
    while (v6 != v7);
    uint64_t v6 = (void **)__p;
  }
  if (v6)
  {
    BOOL v8 = v23;
    BOOL v9 = v6;
    if (v23 != v6)
    {
      uint64_t v10 = v23;
      do
      {
        uint64_t v13 = (char *)*(v10 - 3);
        v10 -= 3;
        uint64_t v12 = v13;
        if (v13)
        {
          int v14 = (char *)*(v8 - 2);
          uint64_t v11 = v12;
          if (v14 != v12)
          {
            do
            {
              if (*(v14 - 16)) {
                *(v14 - 16) = 0;
              }
              uint64_t v15 = (void *)*((void *)v14 - 10);
              if (v15)
              {
                *((void *)v14 - 9) = v15;
                operator delete(v15);
              }
              v14 -= 88;
            }
            while (v14 != v12);
            uint64_t v11 = *v10;
          }
          *(v8 - 2) = v12;
          operator delete(v11);
        }
        BOOL v8 = v10;
      }
      while (v10 != v6);
      BOOL v9 = __p;
    }
    size_t v23 = v6;
    operator delete(v9);
  }
  uint64_t v16 = (char *)v25;
  if (v25)
  {
    char v17 = v26;
    long long v18 = v25;
    if (v26 != v25)
    {
      std::string::size_type v19 = v26;
      do
      {
        long long v21 = (void *)*((void *)v19 - 3);
        v19 -= 24;
        uint64_t v20 = v21;
        if (v21)
        {
          *((void *)v17 - 2) = v20;
          operator delete(v20);
        }
        char v17 = v19;
      }
      while (v19 != v16);
      long long v18 = v25;
    }
    uint64_t v26 = v16;
    operator delete(v18);
  }
}

void sub_9B3CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4769B4((uint64_t)va);
  sub_9BDD0C(v4);
  _Unwind_Resume(a1);
}

void sub_9B3CE4(_Unwind_Exception *a1)
{
  sub_9BDD0C(v1);
  _Unwind_Resume(a1);
}

void sub_9B3CF8(_Unwind_Exception *a1)
{
  sub_9BDD0C(v1);
  _Unwind_Resume(a1);
}

void sub_9B3D0C(_Unwind_Exception *a1)
{
  sub_9BDD0C(v1);
  _Unwind_Resume(a1);
}

void sub_9B3D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_93B288(&a9);
  sub_4769B4((uint64_t)&a12);
  sub_9BDD0C(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_9B3D44(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 7))
  {
    uint64_t v3 = *(void *)(a2 + 96);
    if (v3 == *(void *)(a2 + 104) || *(unsigned char *)(a2 + 124) == 0) {
      return 0x7FFFFFFF7FFFFFFFLL;
    }
    sub_BB5C(&v57, *(_DWORD *)(v3 + 8), *(_DWORD *)(v3 + 12));
    return v57;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  if (v5 == v6)
  {
LABEL_19:
    int v14 = 1;
  }
  else
  {
LABEL_11:
    BOOL v8 = sub_499D80(v5);
    BOOL v9 = (unsigned int *)*((void *)v8 + 1);
    uint64_t v10 = (unsigned int *)*((void *)v8 + 2);
    while (1)
    {
      if (v9 == v10)
      {
        v5 += 64;
        if (v5 == v6) {
          goto LABEL_19;
        }
        goto LABEL_11;
      }
      if (!v9[272])
      {
        uint64_t v11 = (int *)sub_369F8C(*(void *)(a1 + 32), v9[2] | ((unint64_t)v9[1] << 32), 0, "trip");
        uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
        if (*v12 < 0x13u) {
          break;
        }
        uint64_t v13 = v12[9];
        if (!v13 || !*(int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13))) {
          break;
        }
      }
      v9 += 274;
    }
    int v14 = 0;
  }
  long long __p = 0;
  int v55 = 0;
  uint64_t v56 = 0;
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  unint64_t v16 = v15 + 1;
  if (v15 != -1)
  {
    if (v16 >> 62) {
      sub_2E00();
    }
    long long __p = operator new(4 * v16);
    int v55 = (char *)__p;
    uint64_t v56 = (char *)__p + 4 * v16;
  }
  int v17 = sub_474FB0(a2);
  int v18 = v17;
  std::string::size_type v19 = v55;
  if (v55 >= v56)
  {
    long long v21 = (char *)__p;
    int64_t v22 = v55 - (unsigned char *)__p;
    uint64_t v23 = (v55 - (unsigned char *)__p) >> 2;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v25 = v56 - (unsigned char *)__p;
    if ((v56 - (unsigned char *)__p) >> 1 > v24) {
      unint64_t v24 = v25 >> 1;
    }
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26)
    {
      if (v26 >> 62) {
        sub_188D718();
      }
      uint64_t v27 = (char *)operator new(4 * v26);
      long long v28 = &v27[4 * v23];
      long long v29 = &v27[4 * v26];
      *(_DWORD *)long long v28 = v18;
      uint64_t v20 = v28 + 4;
      int64_t v30 = v19 - v21;
      if (v19 == v21) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v27 = 0;
      long long v28 = (char *)(4 * v23);
      long long v29 = 0;
      *(_DWORD *)(4 * v23) = v18;
      uint64_t v20 = (char *)(4 * v23 + 4);
      int64_t v30 = v19 - v21;
      if (v19 == v21)
      {
LABEL_42:
        long long __p = v28;
        uint64_t v56 = v29;
        if (v21) {
          operator delete(v21);
        }
        goto LABEL_44;
      }
    }
    unint64_t v31 = v30 - 4;
    if (v31 < 0x2C) {
      goto LABEL_75;
    }
    if ((unint64_t)(v19 - v27 - v22) < 0x20) {
      goto LABEL_75;
    }
    uint64_t v32 = (v31 >> 2) + 1;
    uint64_t v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
    long long v34 = &v19[-v33];
    v28 -= v33;
    uint64_t v35 = &v27[4 * v23 - 16];
    uint64_t v36 = v19 - 16;
    uint64_t v37 = v32 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v38 = *(_OWORD *)v36;
      *((_OWORD *)v35 - 1) = *((_OWORD *)v36 - 1);
      *(_OWORD *)uint64_t v35 = v38;
      v35 -= 32;
      v36 -= 32;
      v37 -= 8;
    }
    while (v37);
    std::string::size_type v19 = v34;
    if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_75:
      do
      {
        int v39 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v28 - 1) = v39;
        v28 -= 4;
      }
      while (v19 != v21);
    }
    goto LABEL_42;
  }
  *(_DWORD *)int v55 = v17;
  uint64_t v20 = v19 + 4;
LABEL_44:
  int v55 = v20;
  long long v41 = *(int **)(a2 + 72);
  long long v40 = *(int **)(a2 + 80);
  if (v41 != v40)
  {
    do
    {
      int v58 = *v41;
      uint64_t v20 = sub_935E5C(&__p, v20, &v58) + 4;
      v41 += 3;
    }
    while (v41 != v40);
    uint64_t v20 = v55;
  }
  unint64_t v42 = 126 - 2 * __clz((v20 - (unsigned char *)__p) >> 2);
  if (v20 == __p) {
    uint64_t v43 = 0;
  }
  else {
    uint64_t v43 = v42;
  }
  sub_97CC7C((int *)__p, v20, (uint64_t)&v58, v43, 1);
  long long v44 = v55;
  if (__p != v55)
  {
    long long v45 = (char *)__p + 4;
    while (v45 != v55)
    {
      int v46 = *((_DWORD *)v45 - 1);
      int v47 = *(_DWORD *)v45;
      v45 += 4;
      if (v46 == v47)
      {
        long long v48 = v45 - 8;
        while (v45 != v44)
        {
          int v49 = v46;
          int v46 = *(_DWORD *)v45;
          if (v49 != *(_DWORD *)v45)
          {
            *((_DWORD *)v48 + 1) = v46;
            v48 += 4;
          }
          v45 += 4;
        }
        unint64_t v51 = v48 + 4;
        int64_t v52 = v44 - (v48 + 4);
        if (v44 == v48 + 4) {
          break;
        }
        if (v44 != &v51[v52]) {
          memmove(v48 + 4, &v51[v52], 0);
        }
        int v55 = v51;
        if (v14) {
          goto LABEL_66;
        }
        goto LABEL_63;
      }
    }
  }
  if (v14) {
LABEL_66:
  }
    unint64_t v50 = sub_BC28((uint64_t)&__p, 2147483646, 10, 1, 1);
  else {
LABEL_63:
  }
    unint64_t v50 = sub_BC28((uint64_t)&__p, 9000, 10, 1, 1);
  unint64_t v57 = v50;
  if (__p)
  {
    int v55 = (char *)__p;
    operator delete(__p);
  }
  return v57;
}

void sub_9B413C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9B4164(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 24);
  uint64_t v3 = *(void **)(a2 + 32);
  if (v2 == v3) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = (void *)*v2;
    uint64_t v6 = (void *)v2[1];
LABEL_4:
    if (v5 != v6) {
      break;
    }
    v2 += 8;
    if (v2 == v3) {
      return 0;
    }
  }
  unint64_t v7 = (_DWORD *)v5[1];
  BOOL v8 = (_DWORD *)v5[2];
  while (v7 != v8)
  {
    if (!v7[272])
    {
      BOOL v9 = (int *)sub_369F8C(*(void *)(a1 + 32), v7[2] | ((unint64_t)v7[1] << 32), 0, "trip");
      uint64_t v10 = (int *)sub_8DFD1C(*(void *)(a1 + 32), *(void *)((char *)v9 + *(unsigned __int16 *)((char *)v9 - *v9 + 6)), 0, "line");
      uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
      if (*v11 >= 0x3Du)
      {
        uint64_t v12 = v11[30];
        if (v12)
        {
          if (*((unsigned char *)v10 + v12)) {
            return 1;
          }
        }
      }
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = **(void **)(v13 + 3896);
      if (v14)
      {
        if (sub_367060(v14, v7[2] | ((unint64_t)v7[1] << 32), v7[3], *(unsigned char *)(v13 + 3904)))
        {
          return 1;
        }
      }
    }
    v7 += 274;
  }
  unint64_t v15 = (unsigned int *)v5[10];
  unint64_t v16 = (unsigned int *)v5[11];
  if (v15 == v16 || !**(void **)(*(void *)(a1 + 40) + 3896))
  {
LABEL_3:
    v5 += 18;
    goto LABEL_4;
  }
  while (1)
  {
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = **(void **)(v17 + 3896);
    if (v18)
    {
      if (sub_367060(v18, v15[1] | ((unint64_t)*v15 << 32), v15[2], *(unsigned char *)(v17 + 3904))) {
        return 1;
      }
    }
    v15 += 7;
    if (v15 == v16) {
      goto LABEL_3;
    }
  }
}

void *sub_9B42EC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int64x2_t *a5)
{
  uint64_t v8 = a5->i64[0];
  unint64_t v9 = a5->u64[1];
  if (v9 >= a5[1].i64[0])
  {
    uint64_t v11 = a2;
    uint64_t v12 = sub_9C0F2C(a5);
    a2 = v11;
    uint64_t v10 = v12;
  }
  else
  {
    *(_OWORD *)unint64_t v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(unsigned char *)(v9 + 24) = 1;
    uint64_t v10 = (char *)(v9 + 32);
  }
  a5->i64[1] = (uint64_t)v10;
  long long v38 = (void **)(v10 - 32);
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  uint64_t v36 = a2;
  if (*a2 != v13)
  {
    if (v8 == v9)
    {
      __str = (std::string *)(a1 + 2448);
      while (1)
      {
        unint64_t v15 = *((void *)v10 - 3);
        if (v15 >= *((void *)v10 - 2))
        {
          unint64_t v16 = sub_9C1274(v38);
          *((void *)v10 - 3) = v16;
          if (*(_DWORD *)v14)
          {
LABEL_9:
            int v17 = sub_499E4C((_DWORD *)(*(void *)(*(void *)(*(void *)(a4 + 24) + (**(void **)(v14 + 8) << 6))+ 144 * *(void *)(*(void *)(v14 + 8) + 8)+ 8)+ 1096 * *(void *)(*(void *)(v14 + 8) + 16)), *(_DWORD *)(a4 + 128));
            int v39 = 0;
            unint64_t v18 = *((void *)v16 - 11);
            if (v18 >= *((void *)v16 - 10)) {
              goto LABEL_13;
            }
            goto LABEL_10;
          }
        }
        else
        {
          *(_OWORD *)(v15 + 16) = 0u;
          *(_OWORD *)(v15 + 32) = 0u;
          *(_OWORD *)unint64_t v15 = 0u;
          *(void *)(v15 + 48) = 0;
          *(void *)(v15 + 56) = -1;
          *(void *)(v15 + 64) = -1;
          *(void *)(v15 + 72) = -1;
          *(void *)(v15 + 88) = 0;
          *(void *)(v15 + 96) = 0;
          unint64_t v16 = (char *)(v15 + 104);
          *(void *)(v15 + 80) = 0;
          *((void *)v10 - 3) = v15 + 104;
          if (*(_DWORD *)v14) {
            goto LABEL_9;
          }
        }
        int v17 = sub_49A264(a4);
        int v39 = 0;
        unint64_t v18 = *((void *)v16 - 11);
        if (v18 >= *((void *)v16 - 10))
        {
LABEL_13:
          uint64_t v19 = sub_9C19E4((uint64_t *)v16 - 12, &v39);
          goto LABEL_14;
        }
LABEL_10:
        sub_9BE750(v18, 0);
        uint64_t v19 = v18 + 5704;
        *((void *)v16 - 11) = v18 + 5704;
LABEL_14:
        *((void *)v16 - 11) = v19;
        uint64_t v20 = v19 - 5704;
        *(_DWORD *)(v20 + 40) = v17;
        int v21 = *(unsigned __int8 *)(v19 - 4864);
        int v22 = *(_DWORD *)(a1 + 2440);
        *(void *)(v20 + 800) = *(void *)(a1 + 2432);
        *(_DWORD *)(v20 + 808) = v22;
        uint64_t v23 = (std::string *)(v19 - 4888);
        if (v21)
        {
          std::string::operator=(v23, __str);
        }
        else
        {
          if (*(char *)(a1 + 2471) < 0)
          {
            sub_4200(v23, *(void **)(a1 + 2448), *(void *)(a1 + 2456));
          }
          else
          {
            long long v24 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
            v23->__r_.__value_.__r.__words[2] = *(void *)(a1 + 2464);
            *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
          }
          *(unsigned char *)(v20 + 840) = 1;
        }
        sub_9B464C();
        v14 += 88;
        if (v14 == v13) {
          goto LABEL_27;
        }
      }
    }
    do
    {
      unint64_t v26 = *((void *)v10 - 3);
      if (v26 >= *((void *)v10 - 2))
      {
        uint64_t v25 = sub_9C1274(v38);
      }
      else
      {
        *(_OWORD *)(v26 + 16) = 0u;
        *(_OWORD *)(v26 + 32) = 0u;
        *(_OWORD *)unint64_t v26 = 0u;
        *(void *)(v26 + 48) = 0;
        *(void *)(v26 + 56) = -1;
        *(void *)(v26 + 64) = -1;
        *(void *)(v26 + 72) = -1;
        *(void *)(v26 + 88) = 0;
        *(void *)(v26 + 96) = 0;
        uint64_t v25 = (char *)(v26 + 104);
        *(void *)(v26 + 80) = 0;
      }
      *((void *)v10 - 3) = v25;
      sub_9B464C();
      v14 += 88;
    }
    while (v14 != v13);
  }
LABEL_27:
  sub_9901D4(*(void ***)(a1 + 2408), (uint64_t *)v38);
  sub_9D508C((uint64_t *)v38);
  unint64_t result = sub_9D51C8(v38);
  if (*(unsigned char *)(a1 + 5))
  {
    uint64_t v28 = *((void *)v10 - 4);
    if (v28 != *((void *)v10 - 3))
    {
      uint64_t v30 = *(void *)(v28 + 8);
      uint64_t v29 = *(void *)(v28 + 16);
      if (v30 != v29 && *(_DWORD *)(v29 - 5704) == 4)
      {
        unint64_t result = v36;
        uint64_t v31 = *v36;
        if (v36[1] == *v36) {
          sub_66748();
        }
        uint64_t v32 = *(void **)(v31 + 8);
        uint64_t v33 = *(void **)(v31 + 16);
        if (v32 == v33)
        {
LABEL_37:
          LOBYTE(v35) = 1;
        }
        else
        {
          uint64_t v34 = *(void *)(a4 + 24);
          while (1)
          {
            if ((unint64_t)((*(void *)(a4 + 32) - v34) >> 6) <= *v32) {
              sub_66748();
            }
            int v35 = *(unsigned __int8 *)(v34 + (*v32 << 6) + 48);
            if (v35 != 1) {
              break;
            }
            v32 += 3;
            if (v32 == v33) {
              goto LABEL_37;
            }
          }
        }
        *(v10 - 8) = v35;
      }
    }
  }
  return result;
}

void sub_9B4644(_Unwind_Exception *a1)
{
  *(void *)(v2 - 88) = v1;
  _Unwind_Resume(a1);
}

void sub_9B464C()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v36 = v3;
  uint64_t v34 = v4;
  if (*(_DWORD *)v1 <= 1u) {
    *(_DWORD *)uint64_t v2 = *(_DWORD *)v1;
  }
  uint64_t v32 = v0;
  int v30 = *(unsigned __int8 *)(v1 + 40);
  if (*(unsigned char *)(v1 + 40)) {
    v2[7] = *(void *)(v1 + 32);
  }
  uint64_t v31 = v2;
  uint64_t v37 = v1;
  uint64_t v5 = *(void *)(v1 + 16) - *(void *)(v1 + 8);
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    do
    {
      unint64_t v7 = (unint64_t *)(*(void *)(v37 + 8) + 24 * v6);
      unint64_t v8 = v7[1];
      uint64_t v9 = *(void *)(*(void *)(v36 + 24) + (*v7 << 6));
      uint64_t v35 = v9 + 144 * v8;
      uint64_t v10 = (void *)(v35 + 8);
      uint64_t v11 = (int *)(*(void *)(v35 + 8) + 1096 * v7[2]);
      sub_9B4D94(v36, v37, v6, v34, (char *)v63);
      sub_9B4F0C(v36, v37, v6, v57);
      int v12 = v11[272];
      if (v12 != 3)
      {
        if (v12 == 1)
        {
          sub_9B5624(v32, (uint64_t)v11, (uint64_t)v57, v31);
        }
        else if (!v12)
        {
          unint64_t v13 = v7[2] + 1;
          char v14 = v13 < 0xE21A291C077975B9 * ((uint64_t)(*(void *)(v9 + 144 * v8 + 16) - *v10) >> 3)
             && *(_DWORD *)(*v10 + 1096 * v13 + 1088) == 0;
          sub_9CCD58(*(double **)(v32 + 2424), *(void *)(v32 + 2520), v7, (uint64_t)v45);
          uint64_t v20 = (uint64_t *)(*(void *)(v36 + 24) + (*v7 << 6));
          sub_9B5028(v32, v11, (uint64_t)v57, v35, v14, (uint64_t)v45, v20, *(unsigned __int8 *)(v37 + 80), v31);
          if ((v14 & 1) == 0) {
            sub_9B5400(v32, v20, v7[1], *(unsigned __int8 *)(v37 + 80), (uint64_t)v31);
          }
          if (v54)
          {
            int v21 = (void **)v52;
            if (v52)
            {
              int v22 = v53;
              uint64_t v23 = v52;
              if (v53 != v52)
              {
                do
                {
                  if (*((char *)v22 - 17) < 0) {
                    operator delete(*(v22 - 5));
                  }
                  v22 -= 6;
                }
                while (v22 != v21);
                uint64_t v23 = v52;
              }
              unint64_t v53 = v21;
              operator delete(v23);
            }
            char v54 = 0;
          }
          if (v51)
          {
            if (v49)
            {
              unint64_t v50 = v49;
              operator delete(v49);
            }
            if (v47 < 0) {
              operator delete(v46);
            }
          }
        }
LABEL_56:
        if (v62) {
          goto LABEL_57;
        }
        goto LABEL_62;
      }
      char v56 = 0;
      if (v67)
      {
        if (v6 + 1 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v37 + 16) - *(void *)(v37 + 8)) >> 3))
        {
          sub_9B4D94(v36, v37, v6 + 1, v34, (char *)v38);
          sub_9B5500((uint64_t)v45, (uint64_t)v38);
          if (v44)
          {
            if (v43 == 3)
            {
              sub_3AFFFC((uint64_t)&v39);
              if (v31[1] != v31[2]) {
                goto LABEL_32;
              }
              goto LABEL_23;
            }
            if (v43 == 1 && __p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
        }
      }
      if (v31[1] != v31[2]) {
        goto LABEL_32;
      }
LABEL_23:
      uint64_t v42 = 0;
      *(_OWORD *)long long __p = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
      memset(v38, 0, sizeof(v38));
      unint64_t v15 = v57;
      if (v61) {
        unint64_t v15 = 0;
      }
      char v72 = 1;
      long long v16 = *((_OWORD *)v15 + 1);
      v68[0] = *(_OWORD *)v15;
      v68[1] = v16;
      *(_OWORD *)int v69 = *((_OWORD *)v15 + 2);
      *(void *)&v69[14] = *(void *)(v15 + 46);
      int v17 = (unsigned __int8 *)v60 + 4;
      if (v61) {
        int v17 = (unsigned char *)(&stru_20 + 28);
      }
      int v18 = *v17;
      char v71 = v18;
      if (v18)
      {
        uint64_t v19 = (int *)v60;
        if (v61) {
          uint64_t v19 = (_DWORD *)(&stru_20 + 24);
        }
        int v70 = *v19;
      }
      sub_9B77BC(v32, v38, (uint64_t)v68, v31);
LABEL_32:
      sub_9B808C(v32, (uint64_t)v11, (uint64_t)v57, (uint64_t)v63, (uint64_t)v45, v31);
      if (!v56) {
        goto LABEL_56;
      }
      if (v55 != 3)
      {
        if (v55 == 1 && v49)
        {
          unint64_t v50 = v49;
          operator delete(v49);
          if (v62) {
            goto LABEL_57;
          }
          goto LABEL_62;
        }
        goto LABEL_56;
      }
      sub_3AFFFC((uint64_t)&v48);
      if (v62)
      {
LABEL_57:
        if (v61 == 3)
        {
          sub_3AFFFC((uint64_t)&v58);
        }
        else if (v61 == 1 && v59)
        {
          v60[0] = v59;
          operator delete(v59);
        }
      }
LABEL_62:
      if (v67)
      {
        if (v66 == 3)
        {
          sub_3AFFFC((uint64_t)v64);
        }
        else if (v66 == 1)
        {
          if (*(void *)&v64[16])
          {
            uint64_t v65 = *(void *)&v64[16];
            operator delete(*(void **)&v64[16]);
          }
        }
        else if (!v66 && BYTE4(v65))
        {
          BYTE4(v65) = 0;
        }
      }
      ++v6;
    }
    while (v6 != v33);
  }
  if (!v30)
  {
    uint64_t v24 = *(void *)(v37 + 16);
    if (*(void *)(v37 + 8) == v24)
    {
      if (*(unsigned char *)(v37 + 72))
      {
        uint64_t v25 = *(void *)(*(void *)(*(void *)(v36 + 24) + (*(void *)(v37 + 48) << 6))
                        + 144 * *(void *)(v37 + 56)
                        + 8)
            + 1096 * *(void *)(v37 + 64);
        char v67 = 1;
        uint64_t v26 = *(unsigned int *)(v25 + 1088);
        int v66 = v26;
        if (v26)
        {
          sub_8EC504(v26, (long long *)v25, (uint64_t)v63);
        }
        else
        {
          long long v27 = *(_OWORD *)v25;
          long long v28 = *(_OWORD *)(v25 + 16);
          long long v29 = *(_OWORD *)(v25 + 32);
          *(void *)&v64[14] = *(void *)(v25 + 46);
          *(_OWORD *)long long v64 = v29;
          v63[1] = v28;
          v63[0] = v27;
          BYTE4(v65) = *(unsigned char *)(v25 + 60);
          if (BYTE4(v65)) {
            LODWORD(v65) = *(_DWORD *)(v25 + 56);
          }
        }
      }
      else
      {
        bzero(v63, 0x450uLL);
      }
      *(_DWORD *)unint64_t v57 = sub_499FDC(v63, *(_DWORD *)(v36 + 128));
      sub_9B595C(v32, v57, v31);
      if (v67)
      {
        if (v66 == 3)
        {
          sub_3AFFFC((uint64_t)v64);
        }
        else if (v66 == 1)
        {
          if (*(void *)&v64[16])
          {
            uint64_t v65 = *(void *)&v64[16];
            operator delete(*(void **)&v64[16]);
          }
        }
      }
    }
    else
    {
      LODWORD(v63[0]) = sub_499FDC((_DWORD *)(*(void *)(*(void *)(*(void *)(v36 + 24) + (*(void *)(v24 - 24) << 6))+ 144 * *(void *)(v24 - 16)+ 8)+ 1096 * *(void *)(v24 - 8)), *(_DWORD *)(v36 + 128));
      sub_9B595C(v32, v63, v31);
    }
  }
}

void sub_9B4CF8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_58CC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_9B4D28(_Unwind_Exception *a1)
{
}

void sub_9B4D70(_Unwind_Exception *a1)
{
}

void sub_9B4D94(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, char *a5@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 8);
  if (a3 + 1 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 16) - v5) >> 3))
  {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 24) + (*(void *)(v5 + 24 * (a3 + 1)) << 6))
                   + 144 * *(void *)(v5 + 24 * (a3 + 1) + 8)
                   + 8)
       + 1096 * *(void *)(v5 + 24 * (a3 + 1) + 16);
    a5[1096] = 1;
    *((_DWORD *)a5 + 272) = *(_DWORD *)(v6 + 1088);
    uint64_t v7 = *(unsigned int *)(v6 + 1088);
    if (v7)
    {
      sub_8EC504(v7, (long long *)v6, (uint64_t)a5);
      return;
    }
LABEL_16:
    long long v13 = *(_OWORD *)v6;
    long long v14 = *(_OWORD *)(v6 + 16);
    long long v15 = *(_OWORD *)(v6 + 32);
    *(void *)(a5 + 46) = *(void *)(v6 + 46);
    *((_OWORD *)a5 + 1) = v14;
    *((_OWORD *)a5 + 2) = v15;
    *(_OWORD *)a5 = v13;
    int v16 = *(unsigned __int8 *)(v6 + 60);
    a5[60] = v16;
    if (v16) {
      *((_DWORD *)a5 + 14) = *(_DWORD *)(v6 + 56);
    }
    return;
  }
  if (*(unsigned char *)(a2 + 40))
  {
    unint64_t v8 = (uint64_t *)(*a4 + 24 * *(void *)(a2 + 32));
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (v9 != v10)
    {
      while (*(_DWORD *)v9)
      {
        v9 += 88;
        if (v9 == v10)
        {
          uint64_t v9 = v10;
          break;
        }
      }
    }
    uint64_t v11 = *(void **)(v9 + 8);
    if (v11 != *(void **)(v9 + 16))
    {
      uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 24) + (*v11 << 6)) + 144 * v11[1] + 8) + 1096 * v11[2];
      a5[1096] = 1;
      *((_DWORD *)a5 + 272) = *(_DWORD *)(v6 + 1088);
      uint64_t v12 = *(unsigned int *)(v6 + 1088);
      if (v12)
      {
        sub_8EC504(v12, (long long *)v6, (uint64_t)a5);
        return;
      }
      goto LABEL_16;
    }
  }

  bzero(a5, 0x450uLL);
}

void sub_9B4F0C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  if (a3)
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 24) + (*(void *)(*(void *)(a2 + 8) + 24 * a3 - 24) << 6))
                   + 144 * *(void *)(*(void *)(a2 + 8) + 24 * a3 - 16)
                   + 8)
       + 1096 * *(void *)(*(void *)(a2 + 8) + 24 * a3 - 8);
    a4[1096] = 1;
    *((_DWORD *)a4 + 272) = *(_DWORD *)(v4 + 1088);
    uint64_t v5 = *(unsigned int *)(v4 + 1088);
    if (v5)
    {
      sub_8EC504(v5, (long long *)v4, (uint64_t)a4);
      return;
    }
LABEL_8:
    long long v7 = *(_OWORD *)v4;
    long long v8 = *(_OWORD *)(v4 + 16);
    long long v9 = *(_OWORD *)(v4 + 32);
    *(void *)(a4 + 46) = *(void *)(v4 + 46);
    *((_OWORD *)a4 + 1) = v8;
    *((_OWORD *)a4 + 2) = v9;
    *(_OWORD *)a4 = v7;
    int v10 = *(unsigned __int8 *)(v4 + 60);
    a4[60] = v10;
    if (v10) {
      *((_DWORD *)a4 + 14) = *(_DWORD *)(v4 + 56);
    }
    return;
  }
  if (*(unsigned char *)(a2 + 72))
  {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 24) + (*(void *)(a2 + 48) << 6)) + 144 * *(void *)(a2 + 56) + 8)
       + 1096 * *(void *)(a2 + 64);
    a4[1096] = 1;
    *((_DWORD *)a4 + 272) = *(_DWORD *)(v4 + 1088);
    uint64_t v6 = *(unsigned int *)(v4 + 1088);
    if (v6)
    {
      sub_8EC504(v6, (long long *)v4, (uint64_t)a4);
      return;
    }
    goto LABEL_8;
  }

  bzero(a4, 0x450uLL);
}

void sub_9B5028(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t *a7, int a8, uint64_t *a9)
{
  uint64_t v17 = a9[2];
  if (a9[1] != v17
    || (*(_DWORD *)(a3 + 1088) ? (v18 = 0) : (v18 = a3), sub_9B5D64(a1, v18, a2, a9), uint64_t v17 = a9[2], a9[1] != v17))
  {
    if (*(_DWORD *)(v17 - 5704) <= 1u)
    {
      char v40 = a5;
      uint64_t v19 = a2[1];
      int v20 = a2[4];
      int v21 = sub_369B60(*(void *)(a1 + 32), a2[2] | (unint64_t)(v19 << 32), 0);
      int v22 = &v21[-*(int *)v21];
      if (*(unsigned __int16 *)v22 < 5u)
      {
        uint64_t v23 = 0;
      }
      else
      {
        uint64_t v23 = *((unsigned __int16 *)v22 + 2);
        if (*((_WORD *)v22 + 2)) {
          v23 += (uint64_t)&v21[*(unsigned int *)&v21[v23]];
        }
      }
      uint64_t v24 = (int *)(v23 + 4 * v19 + 4 + *(unsigned int *)(v23 + 4 * v19 + 4));
      uint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
      if (*v25 >= 0xDu && (uint64_t v26 = v25[6]) != 0) {
        int v27 = *(int *)((char *)v24 + v26);
      }
      else {
        int v27 = -1;
      }
      unint64_t v28 = *(void *)&v21[24 * (v27 + v20)
                          + 4
                          + *((unsigned __int16 *)v22 + 3)
                          + *(unsigned int *)&v21[*((unsigned __int16 *)v22 + 3)]];
      uint64_t v46 = 0;
      memset(v45, 0, sizeof(v45));
      sub_9B5FB8(a1, v45, a3, v28, a9);
      a5 = v40;
      uint64_t v17 = a9[2];
    }
  }
  if (*(_DWORD *)(v17 - 5704) == 3)
  {
    if (!sub_9B6988(a1, (unsigned int *)a2, (uint64_t)a9))
    {
      if (!*(unsigned char *)(a3 + 1096))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      int v29 = sub_499FDC((_DWORD *)a3, *(_DWORD *)(a1 + 2528));
      sub_9B6B78(a1, (unsigned int *)a2, v29, a6, a9);
    }
  }
  else
  {
    sub_9B65E4();
    int v30 = *a2;
    v44[0] = 0;
    v44[1] = 0;
    sub_9B5AFC(a1, v30, (uint64_t)v44, a9[2] - 5704);
    uint64_t v31 = (uint64_t *)(a1 + 2368);
    if (a8) {
      sub_9381AC(v31, a7, (unint64_t *)v45);
    }
    else {
      sub_9382E0(v31, a4, (unint64_t *)v45);
    }
    uint64_t v32 = *(void **)&v45[0];
    if (*(void *)&v45[0] != *((void *)&v45[0] + 1))
    {
      unint64_t v33 = (_DWORD *)a9[1];
      uint64_t v34 = (_DWORD *)a9[2];
      while (v34 != v33)
      {
        v34 -= 1426;
        if (*v34 == 2)
        {
          unint64_t v33 = v34 + 1426;
          break;
        }
      }
      if (v33 - 926 != (_DWORD *)v45)
      {
        sub_9C1848((void *)v33 - 463, *(char **)&v45[0], *((char **)&v45[0] + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v45[0] + 1) - *(void *)&v45[0]) >> 2));
        uint64_t v32 = *(void **)&v45[0];
      }
    }
    if (v32)
    {
      *((void *)&v45[0] + 1) = v32;
      operator delete(v32);
    }
  }
  uint64_t v35 = a2[4];
  if (v35 < a2[5])
  {
    uint64_t v36 = 0;
    do
    {
      sub_9B6E24(a1, (uint64_t)a2, v35 + v36, a9);
      int v37 = *a2;
      uint64_t v42 = v36;
      char v43 = 1;
      sub_9B5AFC(a1, v37, (uint64_t)&v42, a9[2] - 5704);
      ++v36;
    }
    while (v35 + v36 < (unint64_t)a2[5]);
  }
  if ((a5 & 1) == 0)
  {
    sub_9B75A0(a1, (unsigned int *)a2, a9);
    int v38 = *a2;
    v41[0] = 0;
    v41[1] = 0;
    sub_9B5AFC(a1, v38, (uint64_t)v41, a9[2] - 5704);
  }
}

void sub_9B53D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9B5400(uint64_t result, uint64_t *a2, unint64_t a3, int a4, uint64_t a5)
{
  if (*(_DWORD *)(result + 2252) >= 2u)
  {
    uint64_t v5 = *(void *)(a5 + 16);
    sub_99AF90(*(void *)(result + 2536), a2, a3, a4, (uint64_t)v9);
    if (v10 != v11)
    {
      uint64_t v6 = (uint64_t *)(v5 - 2272);
      unint64_t v7 = *(void *)(v5 - 2272);
      if (v7 >= *(void *)(v5 - 2264))
      {
        uint64_t v8 = sub_9C7FF8((uint64_t *)(v5 - 2280), (uint64_t)v9);
      }
      else
      {
        sub_92A0D0(*(void *)(v5 - 2272), (uint64_t)v9);
        uint64_t v8 = v7 + 464;
        *uint64_t v6 = v7 + 464;
      }
      *uint64_t v6 = v8;
    }
    return sub_92A294((uint64_t)v9);
  }
  return result;
}

void sub_9B54CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_92A294((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9B54E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = v2;
  *uint64_t v3 = v4;
  sub_92A294((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9B5500(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 1096))
  {
    sub_9C1454(a1);
    return a1;
  }
  if (!*(unsigned char *)(a1 + 1096))
  {
    *(_DWORD *)(a1 + 1088) = *(_DWORD *)(a2 + 1088);
    uint64_t v3 = *(unsigned int *)(a2 + 1088);
    if (v3)
    {
      sub_9C16F4(v3, (long long *)a2, a1);
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      long long v5 = *(_OWORD *)(a2 + 16);
      long long v6 = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 46) = *(void *)(a2 + 46);
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 32) = v6;
      *(_OWORD *)a1 = v4;
      int v7 = *(unsigned __int8 *)(a2 + 60);
      *(unsigned char *)(a1 + 60) = v7;
      if (v7) {
        *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      }
    }
    *(unsigned char *)(a1 + 1096) = 1;
    return a1;
  }
  sub_9C14C4(a1, a2);
  return a1;
}

uint64_t sub_9B55B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1096))
  {
    int v2 = *(_DWORD *)(a1 + 1088);
    if (v2 == 3)
    {
      sub_3AFFFC(a1 + 32);
    }
    else if (v2 == 1)
    {
      uint64_t v3 = *(void **)(a1 + 48);
      if (v3)
      {
        *(void *)(a1 + 56) = v3;
        operator delete(v3);
      }
    }
    else if (!v2 && *(unsigned char *)(a1 + 60))
    {
      *(unsigned char *)(a1 + 60) = 0;
    }
    *(unsigned char *)(a1 + 1096) = 0;
  }
  return a1;
}

void sub_9B5624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(_DWORD *)(a2 + 16)) {
    int v8 = 1;
  }
  else {
    int v8 = 2;
  }
  if (*(_DWORD *)(a2 + 4)) {
    int v9 = 0;
  }
  else {
    int v9 = v8;
  }
  if (v9 == 2)
  {
    uint64_t v20 = a4[2];
    if (a4[1] != v20 && *(_DWORD *)(v20 - 5704) <= 1u)
    {
      unint64_t v21 = *(unsigned int *)(a2 + 12) | ((unint64_t)*(unsigned int *)(a2 + 8) << 32);
      uint64_t v30 = 0;
      long long v28 = 0u;
      long long v29 = 0u;
      memset(v27, 0, sizeof(v27));
      sub_9B5FB8(a1, v27, a3, v21, a4);
    }
    sub_9B8464(a1, (long long *)a2, a4);
  }
  else if (v9 == 1)
  {
    LOBYTE(v30) = 1;
    long long v15 = *(_OWORD *)(a2 + 16);
    v27[0] = *(_OWORD *)a2;
    v27[1] = v15;
    *(long long *)((char *)&v27[1] + 12) = *(_OWORD *)(a2 + 28);
    *(void *)&long long v29 = 0;
    long long v28 = 0uLL;
    uint64_t v17 = *(unsigned char **)(a2 + 48);
    int v16 = *(unsigned char **)(a2 + 56);
    int64_t v18 = v16 - v17;
    if (v16 == v17)
    {
      uint64_t v19 = 0;
    }
    else
    {
      if (v18 < 0) {
        sub_2E00();
      }
      uint64_t v19 = (char *)operator new(v16 - v17);
      *(void *)&long long v28 = v19;
      *(void *)&long long v29 = &v19[8 * (v18 >> 3)];
      memcpy(v19, v17, v18);
      *((void *)&v28 + 1) = v29;
    }
    BYTE8(v29) = *(unsigned char *)(a2 + 72);
    int v26 = 0;
    memset(v25, 0, sizeof(v25));
    sub_9B77BC(a1, v27, (uint64_t)v25, a4);
    if (v19)
    {
      int v22 = v19;
LABEL_25:
      operator delete(v22);
    }
  }
  else
  {
    LOBYTE(v30) = 1;
    long long v10 = *(_OWORD *)(a2 + 16);
    v27[0] = *(_OWORD *)a2;
    v27[1] = v10;
    *(long long *)((char *)&v27[1] + 12) = *(_OWORD *)(a2 + 28);
    *(void *)&long long v29 = 0;
    long long v28 = 0uLL;
    uint64_t v12 = *(unsigned char **)(a2 + 48);
    uint64_t v11 = *(unsigned char **)(a2 + 56);
    int64_t v13 = v11 - v12;
    if (v11 == v12)
    {
      long long v14 = 0;
    }
    else
    {
      if (v13 < 0) {
        sub_2E00();
      }
      long long v14 = (char *)operator new(v11 - v12);
      *(void *)&long long v28 = v14;
      *(void *)&long long v29 = &v14[8 * (v13 >> 3)];
      memcpy(v14, v12, v13);
      *((void *)&v28 + 1) = v29;
    }
    BYTE8(v29) = *(unsigned char *)(a2 + 72);
    sub_9B5FB8(a1, v27, a3, 0xFFFFFFFF00000000, a4);
    if (v14)
    {
      int v22 = v14;
      goto LABEL_25;
    }
  }
  sub_938DA0(a1 + 2368, (_DWORD *)a2, (uint64_t)v27);
  uint64_t v23 = *(void **)&v27[0];
  if (*(void *)&v27[0] != *((void *)&v27[0] + 1))
  {
    uint64_t v24 = (long long *)(a4[2] - 3704);
    if (v24 != v27)
    {
      sub_9C1848(v24, *(char **)&v27[0], *((char **)&v27[0] + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v27[0] + 1) - *(void *)&v27[0]) >> 2));
      uint64_t v23 = *(void **)&v27[0];
    }
  }
  if (v23)
  {
    *((void *)&v27[0] + 1) = v23;
    operator delete(v23);
  }
}

void sub_9B58E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (v26)
  {
    operator delete(v26);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_9B595C(uint64_t a1, _DWORD *a2, void *a3)
{
  unint64_t v8 = a3[1];
  uint64_t v6 = a3[2];
  int v7 = a3 + 1;
  if (v8 == v6)
  {
    int v9 = 0;
    int v19 = 9;
    if (v8 < a3[3]) {
      goto LABEL_6;
    }
  }
  else
  {
    if (*(_DWORD *)(v6 - 5704) == 1)
    {
      int v9 = sub_9BB400(a1, v6 - 5704);
      int v19 = 9;
      unint64_t v8 = a3[2];
      if (v8 >= a3[3]) {
        goto LABEL_8;
      }
LABEL_6:
      sub_9BE750(v8, 9);
      uint64_t v10 = v8 + 5704;
      a3[2] = v8 + 5704;
      goto LABEL_9;
    }
    int v9 = 0;
    unint64_t v8 = a3[2];
    int v19 = 9;
    if (v8 < a3[3]) {
      goto LABEL_6;
    }
  }
LABEL_8:
  uint64_t v10 = sub_9C19E4(v7, &v19);
LABEL_9:
  a3[2] = v10;
  uint64_t v11 = v10 - 5704;
  *(_DWORD *)(v11 + 40) = *a2;
  int v12 = *(unsigned __int8 *)(v10 - 4864);
  int v13 = *(_DWORD *)(a1 + 2480);
  *(void *)(v11 + 800) = *(void *)(a1 + 2472);
  *(_DWORD *)(v11 + 808) = v13;
  unint64_t result = (std::string *)(v10 - 4888);
  long long v15 = (const std::string *)(a1 + 2488);
  if (v12)
  {
    unint64_t result = std::string::operator=(result, v15);
    int64_t v18 = (unsigned char *)(v10 - 3788);
    if (*(unsigned char *)(v10 - 3788)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  int v16 = (unsigned char *)(v10 - 4864);
  if ((*(char *)(a1 + 2511) & 0x80000000) == 0)
  {
    long long v17 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    *(void *)(v10 - 4872) = *(void *)(a1 + 2504);
    *(_OWORD *)&result->__r_.__value_.__l.__data_ = v17;
    *int v16 = 1;
    int64_t v18 = (unsigned char *)(v10 - 3788);
    if (*(unsigned char *)(v10 - 3788)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  unint64_t result = (std::string *)sub_4200(result, *(void **)(a1 + 2488), *(void *)(a1 + 2496));
  *int v16 = 1;
  int64_t v18 = (unsigned char *)(v10 - 3788);
  if (!*(unsigned char *)(v10 - 3788)) {
LABEL_14:
  }
    *int64_t v18 = 1;
LABEL_15:
  *(_DWORD *)(v10 - 3792) = v9;
  return result;
}

void sub_9B5AF4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_9B5AFC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = *(_DWORD *)a4 - 2;
  if (v4 <= 3 && *(_DWORD *)(a1 + 2252))
  {
    *(_DWORD *)(a4 + 8) = a2;
    switch(v4)
    {
      case 0u:
        uint64_t v6 = (std::string *)(a4 + 16);
        int v7 = "b";
        goto LABEL_6;
      case 1u:
        if (!*(unsigned char *)(a3 + 8))
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        std::to_string(&__p, *(void *)a3);
        unint64_t v8 = std::string::insert(&__p, 0, "p");
        std::string::size_type v9 = v8->__r_.__value_.__r.__words[0];
        v14[0] = v8->__r_.__value_.__l.__size_;
        *(void *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
        char v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a4 + 39) < 0) {
          operator delete(*(void **)(a4 + 16));
        }
        uint64_t v11 = v14[0];
        *(void *)(a4 + 16) = v9;
        *(void *)(a4 + 24) = v11;
        *(void *)(a4 + 31) = *(void *)((char *)v14 + 7);
        *(unsigned char *)(a4 + 39) = v10;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        return;
      case 2u:
        uint64_t v6 = (std::string *)(a4 + 16);
        int v7 = "a";
        goto LABEL_6;
      case 3u:
        uint64_t v6 = (std::string *)(a4 + 16);
        int v7 = "t";
LABEL_6:
        std::string::assign(v6, v7);
        break;
      default:
        return;
    }
  }
}

void sub_9B5D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_9B5D64(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4)
{
  int v30 = 5;
  unint64_t v8 = a4[2];
  if (v8 >= a4[3])
  {
    uint64_t v9 = sub_9C19E4(a4 + 1, &v30);
  }
  else
  {
    sub_9BE750(a4[2], 5);
    uint64_t v9 = v8 + 5704;
    a4[2] = v9;
  }
  a4[2] = v9;
  char v31 = 0;
  uint64_t v34 = 0;
  unint64_t v35 = 0xFFFFFFFF00000000;
  std::string __p = 0;
  unint64_t v33 = 0;
  int v30 = 0;
  char v10 = (int *)(v9 - 4744);
  if (*(unsigned char *)(v9 - 4704))
  {
    sub_9C2A9C((uint64_t)v10, &v30);
  }
  else
  {
    int v11 = v30;
    *(unsigned char *)(v9 - 4740) = v31;
    *char v10 = v11;
    *(void *)(v9 - 4736) = 0;
    *(void *)(v9 - 4720) = 0;
    *(void *)(v9 - 4728) = 0;
    unint64_t v33 = 0;
    uint64_t v34 = 0;
    std::string __p = 0;
    *(void *)(v9 - 4712) = v35;
    *(unsigned char *)(v9 - 4704) = 1;
  }
  uint64_t v12 = a3[1];
  int v13 = a3[4];
  long long v14 = sub_369B60(*(void *)(a1 + 32), a3[2] | (unint64_t)(v12 << 32), 0);
  long long v15 = &v14[-*(int *)v14];
  if (*(unsigned __int16 *)v15 < 5u)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = *((unsigned __int16 *)v15 + 2);
    if (*((_WORD *)v15 + 2)) {
      v16 += (uint64_t)&v14[*(unsigned int *)&v14[v16]];
    }
  }
  long long v17 = (int *)(v16 + 4 * v12 + 4 + *(unsigned int *)(v16 + 4 * v12 + 4));
  int64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 0xDu && (uint64_t v19 = v18[6]) != 0) {
    int v20 = *(int *)((char *)v17 + v19);
  }
  else {
    int v20 = -1;
  }
  unint64_t v21 = *(void *)&v14[24 * (v20 + v13)
                      + 4
                      + *((unsigned __int16 *)v15 + 3)
                      + *(unsigned int *)&v14[*((unsigned __int16 *)v15 + 3)]];
  uint64_t v22 = *(void *)(a1 + 2400);
  BOOL v23 = HIDWORD(v21) == 0xFFFFFFFF || v21 == 0;
  uint64_t v24 = __ROR8__(v21, 32);
  if (v23) {
    uint64_t v24 = 0xFFFFFFFFLL;
  }
  unint64_t v29 = __ROR8__(v24, 32);
  unint64_t v25 = sub_97066C(v22, &v29);
  uint64_t v26 = v9 - 5704;
  *(void *)(v26 + 48) = v25;
  *(void *)(v26 + 56) = v25;
  *(_DWORD *)(v9 - 5664) = sub_49A23C(a2, *(_DWORD *)(a1 + 2528));
  int v27 = *a3;
  v28[0] = 0;
  v28[1] = 0;
  sub_9B5AFC(a1, v27, (uint64_t)v28, v9 - 5704);
  if (__p)
  {
    unint64_t v33 = __p;
    operator delete(__p);
  }
}

void sub_9B5F80(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_9B5F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_9B5FB8(uint64_t a1, long long *a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  char v10 = a5 + 1;
  *(_DWORD *)int v49 = 6;
  unint64_t v11 = a5[2];
  if (v11 >= a5[3])
  {
    uint64_t v12 = sub_9C19E4(a5 + 1, (int *)v49);
  }
  else
  {
    sub_9BE750(a5[2], 6);
    uint64_t v12 = v11 + 5704;
    a5[2] = v12;
  }
  a5[2] = v12;
  *(_DWORD *)int v49 = 0x7FFFFFFF;
  *(void *)&v49[8] = -1;
  *(void *)&v49[16] = -1;
  *(_WORD *)&v49[24] = 0;
  v50[1] = 0;
  uint64_t v51 = 0;
  v50[0] = 0;
  char v52 = 0;
  char v53 = 0;
  long long __p = 0uLL;
  int v55 = 0;
  unint64_t v56 = 0xFFFFFFFF00000000;
  if (!*((unsigned char *)a2 + 80))
  {
    if (*(unsigned char *)(a3 + 1096)) {
      *(_DWORD *)(v12 - 5664) = sub_499FDC((_DWORD *)a3, *(_DWORD *)(a1 + 2528));
    }
    else {
      *(_DWORD *)(v12 - 5664) = *(_DWORD *)(*v10 + 40);
    }
    *(_DWORD *)int v49 = 0;
    unint64_t v48 = a4;
    goto LABEL_37;
  }
  *(_DWORD *)(v12 - 5664) = *((_DWORD *)a2 + 7);
  unint64_t v48 = *((unsigned int *)a2 + 6) | ((unint64_t)*((unsigned int *)a2 + 5) << 32);
  uint64_t v14 = *((unsigned int *)a2 + 2);
  uint64_t v13 = *((unsigned int *)a2 + 3);
  uint64_t v15 = *(void *)(a1 + 2400);
  BOOL v16 = v14 == 0xFFFFFFFFLL || v13 == 0;
  uint64_t v17 = v14 | (v13 << 32);
  if (v16) {
    uint64_t v17 = 0xFFFFFFFFLL;
  }
  *(void *)&long long v40 = __ROR8__(v17, 32);
  *(void *)&v49[8] = sub_974AF4(v15, (unint64_t *)&v40);
  if (!*((unsigned char *)a2 + 80))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  *(_DWORD *)int v49 = 10 * (*((_DWORD *)a2 + 8) - *((_DWORD *)a2 + 7));
  long long v18 = a2[1];
  long long v42 = *a2;
  *(_OWORD *)char v43 = v18;
  *(_OWORD *)&v43[12] = *(long long *)((char *)a2 + 28);
  long long v45 = 0;
  uint64_t v46 = 0;
  char v44 = 0;
  int v20 = (unsigned char *)*((void *)a2 + 6);
  uint64_t v19 = (unsigned char *)*((void *)a2 + 7);
  int64_t v21 = v19 - v20;
  if (v19 == v20)
  {
    uint64_t v22 = 0;
    char v47 = *((unsigned char *)a2 + 72);
    if (v47) {
      goto LABEL_23;
    }
  }
  else
  {
    if (v21 < 0) {
      sub_2E00();
    }
    uint64_t v22 = (char *)operator new(v19 - v20);
    char v44 = v22;
    uint64_t v46 = &v22[8 * (v21 >> 3)];
    memcpy(v22, v20, v21);
    long long v45 = &v22[8 * (v21 >> 3)];
    char v47 = *((unsigned char *)a2 + 72);
    if (v47) {
      goto LABEL_23;
    }
  }
  if (*(_DWORD *)&v43[20] != -1)
  {
    if (*(_DWORD *)&v43[24])
    {
      BOOL v23 = (int *)sub_94C794(*(void *)(a1 + 24), *(unsigned int *)&v43[24] | ((unint64_t)*(unsigned int *)&v43[20] << 32), 0, "transfer graph");
      uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
      if (*v24 >= 0x13u)
      {
        uint64_t v25 = v24[9];
        if (v25) {
          LOBYTE(v25) = *((unsigned char *)v23 + v25) != 0;
        }
        goto LABEL_24;
      }
    }
  }
LABEL_23:
  LOBYTE(v25) = 0;
LABEL_24:
  char v53 = v25;
  if (v22)
  {
    long long v45 = v22;
    operator delete(v22);
  }
  if (!*((unsigned char *)a2 + 80))
  {
    int v38 = __cxa_allocate_exception(8uLL);
    *int v38 = &off_2439078;
  }
  long long v40 = 0uLL;
  long long v41 = 0;
  int v27 = (char *)*((void *)a2 + 6);
  uint64_t v26 = (char *)*((void *)a2 + 7);
  uint64_t v28 = v26 - v27;
  if (v26 != v27)
  {
    if (v28 < 0) {
      sub_2E00();
    }
    unint64_t v29 = (char *)operator new(v26 - v27);
    *(void *)&long long v40 = v29;
    *((void *)&v40 + 1) = v29;
    long long v41 = &v29[8 * (v28 >> 3)];
    do
    {
      LODWORD(v57) = *((_DWORD *)v27 + 1);
      HIDWORD(v57) = *(_DWORD *)v27;
      unint64_t v29 = sub_9C262C((unint64_t *)&v40, v29, &v57) + 8;
      v27 += 8;
    }
    while (v27 != v26);
  }
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  long long __p = v40;
  int v55 = v41;
  if (!*((unsigned char *)a2 + 80))
  {
    long long v39 = __cxa_allocate_exception(8uLL);
    *long long v39 = &off_2439078;
  }
  unint64_t v56 = *((unsigned int *)a2 + 10) | ((unint64_t)*((unsigned int *)a2 + 9) << 32);
LABEL_37:
  unint64_t v30 = sub_97066C(*(void *)(a1 + 2400), &v48);
  *(void *)(v12 - 5648) = v30;
  *(void *)&v49[16] = v30;
  v49[25] = sub_9B8810(a1, (uint64_t)v49);
  char v31 = (void *)sub_976514(*(void *)(a1 + 2400));
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v31[1] - *v31) >> 3) <= *(void *)&v49[16]) {
    sub_66748();
  }
  v49[24] = *(unsigned char *)(*v31 + 168 * *(void *)&v49[16] + 163) ^ 1;
  if (*(unsigned char *)(v12 - 4752))
  {
    sub_9C299C(v12 - 4856, (long long *)v49);
  }
  else
  {
    long long v32 = *(_OWORD *)v49;
    *(_OWORD *)(v12 - 4846) = *(_OWORD *)&v49[10];
    *(_OWORD *)(v12 - 4856) = v32;
    uint64_t v33 = v12 - 5704;
    *(void *)(v33 + 880) = 0;
    *(void *)(v33 + 896) = 0;
    *(void *)(v33 + 888) = 0;
    *(_OWORD *)(v33 + 880) = *(_OWORD *)v50;
    *(void *)(v33 + 896) = v51;
    v50[1] = 0;
    uint64_t v51 = 0;
    v50[0] = 0;
    *(unsigned char *)(v33 + 904) = v52;
    *(unsigned char *)(v33 + 912) = v53;
    *(void *)(v12 - 4784) = 0;
    *(void *)(v33 + 936) = 0;
    *(void *)(v33 + 928) = 0;
    *(_OWORD *)(v12 - 4784) = __p;
    *(void *)(v33 + 936) = v55;
    int v55 = 0;
    long long __p = 0uLL;
    *(void *)(v33 + 944) = v56;
    *(unsigned char *)(v12 - 4752) = 1;
  }
  *(void *)(v12 - 3816) = sub_9B8918(a1, v12 - 4856);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  uint64_t v34 = (void **)v50[0];
  if (v50[0])
  {
    unint64_t v35 = (void **)v50[1];
    uint64_t v36 = v50[0];
    if (v50[1] != v50[0])
    {
      do
      {
        if (*((char *)v35 - 9) < 0) {
          operator delete(*(v35 - 4));
        }
        v35 -= 5;
      }
      while (v35 != v34);
      uint64_t v36 = v50[0];
    }
    v50[1] = v34;
    operator delete(v36);
  }
}

void sub_9B653C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (v25)
  {
    operator delete(v25);
    sub_9B8C48(&a25);
    _Unwind_Resume(a1);
  }
  sub_9B8C48(&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_9B65E4()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  int v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = v0;
  sub_9BE750((uint64_t)v44, 2);
  v48[3648] = *(unsigned char *)(v14 + 52);
  signed int v16 = sub_49A214(v14, *(_DWORD *)(v15 + 2528));
  if (*(unsigned char *)(v12 + 1096))
  {
    signed int v17 = v16;
    signed int v18 = sub_499FDC((_DWORD *)v12, *(_DWORD *)(v15 + 2528));
    if (v17 >= v18) {
      unsigned int v19 = v18;
    }
    else {
      unsigned int v19 = v17;
    }
  }
  else
  {
    uint64_t v20 = v2[2];
    if (!*(unsigned char *)(v20 - 4752))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    uint64_t v21 = v20 - 5704;
    int v22 = *(_DWORD *)(v21 + 40);
    LODWORD(v21) = *(_DWORD *)(v21 + 848);
    int v23 = (int)v21 / 10;
    int v24 = (int)v21 % 10;
    if ((int)v21 < 0) {
      char v25 = -5;
    }
    else {
      char v25 = 5;
    }
    unsigned int v19 = v23 + v22 + (((103 * (char)(v25 + v24)) >> 15) & 1) + ((103 * (char)(v25 + v24)) >> 10);
  }
  v44[10] = v19;
  uint64_t v26 = *(unsigned int *)(v14 + 4);
  int v27 = *(_DWORD *)(v14 + 16);
  uint64_t v28 = sub_369B60(*(void *)(v15 + 32), *(unsigned int *)(v14 + 8) | (unint64_t)(v26 << 32), 0);
  unint64_t v29 = &v28[-*(int *)v28];
  if (*(unsigned __int16 *)v29 < 5u)
  {
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = *((unsigned __int16 *)v29 + 2);
    if (*((_WORD *)v29 + 2)) {
      v30 += (uint64_t)&v28[*(unsigned int *)&v28[v30]];
    }
  }
  char v31 = (int *)(v30 + 4 * v26 + 4 + *(unsigned int *)(v30 + 4 * v26 + 4));
  long long v32 = (unsigned __int16 *)((char *)v31 - *v31);
  if (*v32 >= 0xDu && (uint64_t v33 = v32[6]) != 0) {
    int v34 = *(int *)((char *)v31 + v33);
  }
  else {
    int v34 = -1;
  }
  unint64_t v35 = *(void *)&v28[24 * (v34 + v27)
                      + 4
                      + *((unsigned __int16 *)v29 + 3)
                      + *(unsigned int *)&v28[*((unsigned __int16 *)v29 + 3)]];
  uint64_t v36 = *(void *)(v15 + 2400);
  BOOL v37 = HIDWORD(v35) == 0xFFFFFFFF || v35 == 0;
  uint64_t v38 = __ROR8__(v35, 32);
  if (v37) {
    uint64_t v38 = 0xFFFFFFFFLL;
  }
  unint64_t v43 = __ROR8__(v38, 32);
  unint64_t v45 = sub_97066C(v36, &v43);
  unint64_t v46 = v45;
  sub_9B9018(v15, v14, *(_DWORD *)(v14 + 16), v10, v6, v4, v44);
  if (v4) {
    sub_9BACA8(v15, v6, (uint64_t)v44);
  }
  sub_9BDB4C((uint64_t)v48, v8);
  if (*(unsigned char *)(v14 + 60)) {
    int v47 = *(_DWORD *)(v14 + 56);
  }
  unint64_t v39 = v2[2];
  if (v39 >= v2[3])
  {
    uint64_t v40 = sub_9C2B14(v2 + 1, (uint64_t)v44);
  }
  else
  {
    sub_927AF0(v2[2], (uint64_t)v44);
    uint64_t v40 = v39 + 5704;
    v2[2] = v39 + 5704;
  }
  v2[2] = v40;
  return sub_92A5D4((uint64_t)v44);
}

void sub_9B68F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  *(void *)(v3 + 16) = v4;
  sub_92A5D4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9B690C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_92A5D4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9B6920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_92A5D4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9B6934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_92A5D4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9B6948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_92A5D4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9B6960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_92A5D4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9B6974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_92A5D4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9B6988(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = (int *)sub_369F8C(*(void *)(a1 + 32), a2[2] | ((unint64_t)a2[1] << 32), 0, "trip");
  unint64_t v7 = *(void *)((char *)v6 + *(unsigned __int16 *)((char *)v6 - *v6 + 6));
  uint64_t v8 = *(void *)(a1 + 2400);
  BOOL v9 = HIDWORD(v7) == 0xFFFFFFFF || v7 == 0;
  uint64_t v10 = __ROR8__(v7, 32);
  if (v9) {
    uint64_t v10 = 0xFFFFFFFFLL;
  }
  unint64_t v29 = __ROR8__(v10, 32);
  unint64_t v28 = 0xFFFFFFFF00000000;
  uint64_t v11 = sub_972C9C(v8, &v29, (void **)&v28);
  if (!*(unsigned char *)(v5 - 4912))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(void *)(v5 - 4952) != v11) {
    return 0;
  }
  uint64_t v13 = a2[1];
  uint64_t v12 = a2[2];
  unsigned int v14 = a2[4];
  uint64_t v15 = sub_369B60(*(void *)(a1 + 32), v12 | (v13 << 32), 0);
  signed int v16 = &v15[-*(int *)v15];
  if (*(unsigned __int16 *)v16 < 5u)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = *((unsigned __int16 *)v16 + 2);
    if (*((_WORD *)v16 + 2)) {
      v17 += (uint64_t)&v15[*(unsigned int *)&v15[v17]];
    }
  }
  unsigned int v19 = (int *)(v17 + 4 * v13 + 4 + *(unsigned int *)(v17 + 4 * v13 + 4));
  uint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 0xDu && (uint64_t v21 = v20[6]) != 0) {
    int v22 = *(int *)((char *)v19 + v21);
  }
  else {
    int v22 = -1;
  }
  unint64_t v23 = *(void *)&v15[24 * v22
                      + 4
                      + 24 * v14
                      + *((unsigned __int16 *)v16 + 3)
                      + *(unsigned int *)&v15[*((unsigned __int16 *)v16 + 3)]];
  uint64_t v24 = *(void *)(a1 + 2400);
  BOOL v25 = HIDWORD(v23) == 0xFFFFFFFF || v23 == 0;
  uint64_t v26 = __ROR8__(v23, 32);
  if (v25) {
    uint64_t v26 = 0xFFFFFFFFLL;
  }
  unint64_t v29 = __ROR8__(v26, 32);
  if (*(void *)(v5 - 5648) == sub_97066C(v24, &v29)) {
    return 2;
  }
  else {
    return 1;
  }
}

void sub_9B6B78(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v11 = a5[2];
  unint64_t v10 = a5[3];
  uint64_t v12 = *(void *)(v11 - 5648);
  LODWORD(v36[0]) = 8;
  if (v11 >= v10)
  {
    uint64_t v13 = sub_9C19E4(a5 + 1, (int *)v36);
  }
  else
  {
    sub_9BE750(v11, 8);
    uint64_t v13 = v11 + 5704;
    a5[2] = v13;
  }
  a5[2] = v13;
  *(_DWORD *)(v13 - 5664) = a3;
  *(void *)(v13 - 5656) = v12;
  uint64_t v14 = a2[1];
  unsigned int v15 = a2[4];
  signed int v16 = sub_369B60(*(void *)(a1 + 32), a2[2] | (unint64_t)(v14 << 32), 0);
  uint64_t v17 = &v16[-*(int *)v16];
  if (*(unsigned __int16 *)v17 < 5u)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = *((unsigned __int16 *)v17 + 2);
    if (*((_WORD *)v17 + 2)) {
      v18 += (uint64_t)&v16[*(unsigned int *)&v16[v18]];
    }
  }
  unsigned int v19 = (int *)(v18 + 4 * v14 + 4 + *(unsigned int *)(v18 + 4 * v14 + 4));
  uint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
  if (*v20 >= 0xDu && (uint64_t v21 = v20[6]) != 0) {
    int v22 = *(int *)((char *)v19 + v21);
  }
  else {
    int v22 = -1;
  }
  unint64_t v23 = *(void *)&v16[24 * v22
                      + 4
                      + 24 * v15
                      + *((unsigned __int16 *)v17 + 3)
                      + *(unsigned int *)&v16[*((unsigned __int16 *)v17 + 3)]];
  uint64_t v24 = *(void *)(a1 + 2400);
  BOOL v25 = HIDWORD(v23) == 0xFFFFFFFF || v23 == 0;
  uint64_t v26 = __ROR8__(v23, 32);
  if (v25) {
    uint64_t v26 = 0xFFFFFFFFLL;
  }
  *(void *)&v36[0] = __ROR8__(v26, 32);
  *(void *)(v13 - 5648) = sub_97066C(v24, (unint64_t *)v36);
  unsigned int v27 = a2[4];
  long long v37 = 0u;
  memset(v36, 0, sizeof(v36));
  LOBYTE(v37) = 1;
  *(void *)((char *)&v37 + 4) = 0x8000000080000000;
  memset(v32, 0, sizeof(v32));
  char v33 = 1;
  uint64_t v34 = 0x7FFFFFFF7FFFFFFFLL;
  __int16 v35 = 0;
  sub_9B9018(a1, (uint64_t)a2, v27, (uint64_t)v36, (uint64_t *)v32, 0, (_DWORD *)(v13 - 5704));
  sub_9BEAA8(v36);
  if (!*(unsigned char *)(v13 - 4912))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  int v28 = *(_DWORD *)(v13 - 5616);
  if (v28 != 0x7FFFFFFF)
  {
    int v29 = *(_DWORD *)(v13 - 5664);
    if (v28 < v29) {
      *(_DWORD *)(v13 - 5616) = v29;
    }
  }
  uint64_t v30 = sub_9BDB4C(v13 - 3680, a4);
  sub_9BB2C8(v30, (uint64_t)a5, v13 - 5704);
}

void sub_9B6DF4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_9B6DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20AD448((void **)&a9, &a17);
  _Unwind_Resume(a1);
}

void sub_9B6E24(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  LODWORD(v82[0]) = 3;
  unint64_t v8 = a4[2];
  if (v8 >= a4[3])
  {
    uint64_t v9 = sub_9C19E4(a4 + 1, (int *)v82);
  }
  else
  {
    sub_9BE750(a4[2], 3);
    uint64_t v9 = v8 + 5704;
    a4[2] = v8 + 5704;
  }
  a4[2] = v9;
  uint64_t v10 = *(unsigned int *)(a2 + 4);
  unint64_t v11 = sub_369B60(*(void *)(a1 + 32), *(unsigned int *)(a2 + 8) | (unint64_t)(v10 << 32), 0);
  uint64_t v12 = &v11[-*(int *)v11];
  if (*(unsigned __int16 *)v12 < 5u)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = *((unsigned __int16 *)v12 + 2);
    if (*((_WORD *)v12 + 2)) {
      v13 += (uint64_t)&v11[*(unsigned int *)&v11[v13]];
    }
  }
  uint64_t v14 = (int *)(v13 + 4 * v10 + 4 + *(unsigned int *)(v13 + 4 * v10 + 4));
  unsigned int v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 0xDu && (uint64_t v16 = v15[6]) != 0) {
    int v17 = *(int *)((char *)v14 + v16);
  }
  else {
    int v17 = -1;
  }
  unint64_t v18 = *(void *)&v11[24 * v17
                      + 4
                      + 24 * a3
                      + *((unsigned __int16 *)v12 + 3)
                      + *(unsigned int *)&v11[*((unsigned __int16 *)v12 + 3)]];
  uint64_t v19 = *(unsigned int *)(a2 + 4);
  uint64_t v20 = sub_369B60(*(void *)(a1 + 32), *(unsigned int *)(a2 + 8) | (unint64_t)(v19 << 32), 0);
  uint64_t v21 = &v20[-*(int *)v20];
  if (*(unsigned __int16 *)v21 >= 5u && *((_WORD *)v21 + 2)) {
    int v22 = &v20[*((unsigned __int16 *)v21 + 2) + *(unsigned int *)&v20[*((unsigned __int16 *)v21 + 2)]];
  }
  else {
    int v22 = 0;
  }
  unint64_t v23 = HIDWORD(v18);
  uint64_t v24 = &v22[4 * v19 + 4 + *(unsigned int *)&v22[4 * v19 + 4]];
  BOOL v25 = &v24[-*(int *)v24];
  if (*(unsigned __int16 *)v25 >= 0xDu && (uint64_t v26 = *((unsigned __int16 *)v25 + 6)) != 0) {
    int v27 = *(_DWORD *)&v24[v26];
  }
  else {
    int v27 = -1;
  }
  unint64_t v28 = *(void *)&v20[24 * a3
                      + 28
                      + 24 * v27
                      + *((unsigned __int16 *)v21 + 3)
                      + *(unsigned int *)&v20[*((unsigned __int16 *)v21 + 3)]];
  uint64_t v29 = *(void *)(a1 + 2400);
  BOOL v30 = v23 == 0xFFFFFFFF || v18 == 0;
  uint64_t v31 = v23 | (v18 << 32);
  if (v30) {
    uint64_t v31 = 0xFFFFFFFFLL;
  }
  *(void *)&v82[0] = __ROR8__(v31, 32);
  *(void *)(v9 - 5656) = sub_97066C(v29, (unint64_t *)v82);
  uint64_t v32 = *(void *)(a1 + 2400);
  BOOL v33 = HIDWORD(v28) == 0xFFFFFFFF || v28 == 0;
  uint64_t v34 = __ROR8__(v28, 32);
  if (v33) {
    uint64_t v34 = 0xFFFFFFFFLL;
  }
  *(void *)&v82[0] = __ROR8__(v34, 32);
  *(void *)(v9 - 5648) = sub_97066C(v32, (unint64_t *)v82);
  if (*(unsigned char *)(a1 + 6))
  {
    *(void *)(v9 - 3808) = sub_9BAEF4(a1, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned int *)(a2 + 4) << 32), a3);
    uint64_t v35 = sub_976514(*(void *)(a1 + 2400));
    uint64_t v36 = *(void *)(v35 + 240);
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v35 + 248) - v36) >> 3) <= *(void *)(v9 - 3808)) {
      sub_66748();
    }
    long long v37 = (unsigned int **)(v36 + 24 * *(void *)(v9 - 3808));
    uint64_t v38 = *v37;
    unint64_t v39 = v37[1];
    double v40 = 0.0;
    if (*v37 != v39)
    {
      long long v41 = v38 + 3;
      if (v38 + 3 != v39)
      {
        float64x2_t v75 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
        float64x2_t v76 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
        float64x2_t v74 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
        float64x2_t v73 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
        HIDWORD(v42) = 1096306543;
        do
        {
          LODWORD(v42) = *(v41 - 2);
          long double v43 = exp(3.14159265 - (double)*(unint64_t *)&v42 * 6.28318531 / 4294967300.0);
          *(double *)&unint64_t v44 = atan((v43 - 1.0 / v43) * 0.5) * 57.2957795;
          long double v45 = *(double *)&v44 * 0.0174532925;
          unsigned int v46 = *(v41 - 3);
          LODWORD(v44) = v41[1];
          long double v47 = exp(3.14159265 - (double)v44 * 6.28318531 / 4294967300.0);
          long double v48 = atan((v47 - 1.0 / v47) * 0.5) * 57.2957795 * 0.0174532925;
          v49.i64[0] = v46;
          v49.i64[1] = *v41;
          int64x2_t v50 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v49), v76), v74), v75), v73);
          double v77 = vsubq_f64((float64x2_t)v50, (float64x2_t)vdupq_laneq_s64(v50, 1)).f64[0];
          long double v51 = sin((v45 - v48) * 0.5);
          long double v52 = v51 * v51;
          double v53 = cos(v45);
          long double v54 = v53 * cos(v48);
          long double v55 = sin(0.5 * v77);
          long double v56 = atan2(sqrt(v52 + v54 * (v55 * v55)), sqrt(1.0 - (v52 + v54 * (v55 * v55))));
          double v42 = (v56 + v56) * 6372797.56;
          double v40 = v40 + v42;
          v41 += 3;
        }
        while (v41 != v39);
      }
    }
    double v57 = v40 * 100.0;
    if (v40 * 100.0 >= 0.0)
    {
      double v58 = v40 * 100.0;
      if (v57 >= 4.50359963e15) {
        goto LABEL_45;
      }
      uint64_t v59 = (uint64_t)(v57 + v57) + 1;
    }
    else
    {
      double v58 = v40 * 100.0;
      if (v57 <= -4.50359963e15) {
        goto LABEL_45;
      }
      uint64_t v59 = (uint64_t)(v57 + v57);
      if (v59 >= 1) {
        --v59;
      }
    }
    double v58 = (double)(v59 >> 1);
LABEL_45:
    if (v58 >= 9.22337204e18)
    {
      uint64_t v61 = 0x7FFFFFFFFFFFFFFELL;
LABEL_56:
      *(void *)(v9 - 3816) = v61;
      goto LABEL_57;
    }
    if (v57 >= 0.0)
    {
      if (v57 < 4.50359963e15)
      {
        uint64_t v60 = (uint64_t)(v57 + v57) + 1;
LABEL_54:
        double v57 = (double)(v60 >> 1);
      }
    }
    else if (v57 > -4.50359963e15)
    {
      uint64_t v60 = (uint64_t)(v57 + v57);
      if (v60 >= 1) {
        --v60;
      }
      goto LABEL_54;
    }
    uint64_t v61 = (uint64_t)v57;
    goto LABEL_56;
  }
LABEL_57:
  long long v83 = 0u;
  memset(v82, 0, sizeof(v82));
  LOBYTE(v83) = 1;
  *(void *)((char *)&v83 + 4) = 0x8000000080000000;
  memset(v78, 0, sizeof(v78));
  char v79 = 1;
  uint64_t v80 = 0x7FFFFFFF7FFFFFFFLL;
  __int16 v81 = 0;
  sub_9B9018(a1, a2, a3, (uint64_t)v82, (uint64_t *)v78, 0, (_DWORD *)(v9 - 5704));
  char v62 = sub_9BEAA8(v82);
  sub_9BB2C8((uint64_t)v62, (uint64_t)a4, v9 - 5704);
  uint64_t v63 = a4[1];
  unint64_t v64 = 0xBC7FD20AC579B779 * ((a4[2] - v63) >> 3);
  if (v64 <= 1) {
    sub_66748();
  }
  unint64_t v65 = v64 - 2;
  if (*(_DWORD *)(v63 + 5704 * v65) == 3)
  {
    char v66 = *(unsigned char *)(v63 + 5704 * v65 + 1980);
    goto LABEL_64;
  }
  uint64_t v67 = sub_976514(*(void *)(a1 + 2400));
  if (!*(unsigned char *)(v9 - 4912))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  unint64_t v68 = *(void *)(v9 - 4952);
  uint64_t v69 = *(void *)(v67 + 72);
  if (0x66FD0EB66FD0EB67 * ((*(void *)(v67 + 80) - v69) >> 3) <= v68) {
    sub_66748();
  }
  unsigned int v70 = *(unsigned __int16 *)(v69 + 696 * v68 + 552);
  if (v70 > 6 || (char v66 = 1, ((1 << v70) & 0x52) == 0))
  {
    signed int v71 = 100 * ((5243 * (v70 >> 2)) >> 17);
    char v66 = 1;
    if (v71 > 999)
    {
      if (v71 == 1000 || v71 == 1200 || v71 == 1300) {
        goto LABEL_64;
      }
    }
    else if (v71 == 400 || v71 == 500 || v71 == 600)
    {
      goto LABEL_64;
    }
    char v66 = 0;
  }
LABEL_64:
  *(unsigned char *)(v9 - 3724) = v66;
}

void sub_9B7570(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_9B7578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20AD448(&a27, &a35);
  _Unwind_Resume(a1);
}

void sub_9B75A0(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  LODWORD(v29[0]) = 4;
  unint64_t v6 = a3[2];
  if (v6 >= a3[3])
  {
    uint64_t v7 = sub_9C19E4(a3 + 1, (int *)v29);
  }
  else
  {
    sub_9BE750(a3[2], 4);
    uint64_t v7 = v6 + 5704;
    a3[2] = v6 + 5704;
  }
  a3[2] = v7;
  *(_DWORD *)(v7 - 5664) = sub_49A23C((uint64_t)a2, *(_DWORD *)(a1 + 2528));
  uint64_t v8 = a2[1];
  unsigned int v9 = a2[5];
  uint64_t v10 = sub_369B60(*(void *)(a1 + 32), a2[2] | (unint64_t)(v8 << 32), 0);
  unint64_t v11 = &v10[-*(int *)v10];
  if (*(unsigned __int16 *)v11 < 5u)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = *((unsigned __int16 *)v11 + 2);
    if (*((_WORD *)v11 + 2)) {
      v12 += (uint64_t)&v10[*(unsigned int *)&v10[v12]];
    }
  }
  uint64_t v13 = (int *)(v12 + 4 * v8 + 4 + *(unsigned int *)(v12 + 4 * v8 + 4));
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 0xDu && (uint64_t v15 = v14[6]) != 0) {
    int v16 = *(int *)((char *)v13 + v15);
  }
  else {
    int v16 = -1;
  }
  unint64_t v17 = *(void *)&v10[24 * v16
                      + 4
                      + 24 * v9
                      + *((unsigned __int16 *)v11 + 3)
                      + *(unsigned int *)&v10[*((unsigned __int16 *)v11 + 3)]];
  uint64_t v18 = *(void *)(a1 + 2400);
  BOOL v19 = HIDWORD(v17) == 0xFFFFFFFF || v17 == 0;
  uint64_t v20 = __ROR8__(v17, 32);
  if (v19) {
    uint64_t v20 = 0xFFFFFFFFLL;
  }
  *(void *)&v29[0] = __ROR8__(v20, 32);
  unint64_t v21 = sub_97066C(v18, (unint64_t *)v29);
  uint64_t v22 = v7 - 5704;
  *(void *)(v22 + 48) = v21;
  *(void *)(v22 + 56) = v21;
  unsigned int v23 = a2[5];
  long long v30 = 0u;
  memset(v29, 0, sizeof(v29));
  LOBYTE(v30) = 1;
  *(void *)((char *)&v30 + 4) = 0x8000000080000000;
  memset(v25, 0, sizeof(v25));
  char v26 = 1;
  uint64_t v27 = 0x7FFFFFFF7FFFFFFFLL;
  __int16 v28 = 0;
  sub_9B9018(a1, (uint64_t)a2, v23, (uint64_t)v29, (uint64_t *)v25, 0, (_DWORD *)(v7 - 5704));
  uint64_t v24 = sub_9BEAA8(v29);
  sub_9BB2C8((uint64_t)v24, (uint64_t)a3, v7 - 5704);
}

void sub_9B778C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_9B7794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20AD448((void **)&a9, &a17);
  _Unwind_Resume(a1);
}

void sub_9B77BC(uint64_t a1, long long *a2, uint64_t a3, uint64_t *a4)
{
  *(_DWORD *)uint64_t v69 = 7;
  unint64_t v8 = a4[2];
  if (v8 >= a4[3])
  {
    uint64_t v9 = sub_9C19E4(a4 + 1, (int *)v69);
  }
  else
  {
    sub_9BE750(a4[2], 7);
    uint64_t v9 = v8 + 5704;
    a4[2] = v9;
  }
  a4[2] = v9;
  *(_DWORD *)uint64_t v69 = 0x7FFFFFFF;
  *(void *)&v69[8] = -1;
  *(void *)&v69[16] = -1;
  *(_WORD *)&v69[24] = 0;
  v70[1] = 0;
  signed int v71 = 0;
  v70[0] = 0;
  char v72 = 0;
  char v73 = 0;
  long long __p = 0uLL;
  float64x2_t v75 = 0;
  unint64_t v76 = 0xFFFFFFFF00000000;
  if (!*((unsigned char *)a2 + 80))
  {
    *(_DWORD *)(v9 - 5664) = sub_49A23C(a3, *(_DWORD *)(a1 + 2528));
    *(_DWORD *)uint64_t v69 = 0;
    if (!*(unsigned char *)(a3 + 64))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    uint64_t v15 = *(unsigned int *)(a3 + 4);
    int v16 = *(_DWORD *)(a3 + 20);
    unint64_t v17 = sub_369B60(*(void *)(a1 + 32), *(unsigned int *)(a3 + 8) | (unint64_t)(v15 << 32), 0);
    uint64_t v18 = &v17[-*(int *)v17];
    if (*(unsigned __int16 *)v18 < 5u)
    {
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v19 = *((unsigned __int16 *)v18 + 2);
      if (*((_WORD *)v18 + 2)) {
        v19 += (uint64_t)&v17[*(unsigned int *)&v17[v19]];
      }
    }
    uint64_t v38 = (int *)(v19 + 4 * v15 + 4 + *(unsigned int *)(v19 + 4 * v15 + 4));
    unint64_t v39 = (unsigned __int16 *)((char *)v38 - *v38);
    if (*v39 >= 0xDu && (uint64_t v40 = v39[6]) != 0) {
      int v41 = *(int *)((char *)v38 + v40);
    }
    else {
      int v41 = -1;
    }
    unint64_t v37 = *(void *)&v17[24 * (v41 + v16)
                        + 4
                        + *((unsigned __int16 *)v18 + 3)
                        + *(unsigned int *)&v17[*((unsigned __int16 *)v18 + 3)]];
    goto LABEL_53;
  }
  *(_DWORD *)(v9 - 5664) = *((_DWORD *)a2 + 7);
  unint64_t v67 = *((unsigned int *)a2 + 6) | ((unint64_t)*((unsigned int *)a2 + 5) << 32);
  *(void *)&v69[8] = sub_974AF4(*(void *)(a1 + 2400), &v67);
  if (!*((unsigned char *)a2 + 80))
  {
    uint64x2_t v49 = __cxa_allocate_exception(8uLL);
    *uint64x2_t v49 = &off_2439078;
  }
  *(_DWORD *)uint64_t v69 = 10 * (*((_DWORD *)a2 + 8) - *((_DWORD *)a2 + 7));
  long long v10 = a2[1];
  long long v61 = *a2;
  *(_OWORD *)char v62 = v10;
  *(_OWORD *)&v62[12] = *(long long *)((char *)a2 + 28);
  unint64_t v64 = 0;
  unint64_t v65 = 0;
  uint64_t v63 = 0;
  uint64_t v12 = (unsigned char *)*((void *)a2 + 6);
  unint64_t v11 = (unsigned char *)*((void *)a2 + 7);
  int64_t v13 = v11 - v12;
  if (v11 == v12)
  {
    uint64_t v14 = 0;
    char v66 = *((unsigned char *)a2 + 72);
    if (v66)
    {
LABEL_20:
      LOBYTE(v22) = 0;
      goto LABEL_21;
    }
  }
  else
  {
    if (v13 < 0) {
      sub_2E00();
    }
    uint64_t v14 = (char *)operator new(v11 - v12);
    uint64_t v63 = v14;
    unint64_t v65 = &v14[8 * (v13 >> 3)];
    memcpy(v14, v12, v13);
    unint64_t v64 = v65;
    char v66 = *((unsigned char *)a2 + 72);
    if (v66) {
      goto LABEL_20;
    }
  }
  if (*(_DWORD *)&v62[20] == -1) {
    goto LABEL_20;
  }
  if (!*(_DWORD *)&v62[24]) {
    goto LABEL_20;
  }
  uint64_t v20 = (int *)sub_94C794(*(void *)(a1 + 24), *(unsigned int *)&v62[24] | ((unint64_t)*(unsigned int *)&v62[20] << 32), 0, "transfer graph");
  unint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v21 < 0x13u) {
    goto LABEL_20;
  }
  uint64_t v22 = v21[9];
  if (v22) {
    LOBYTE(v22) = *((unsigned char *)v20 + v22) != 0;
  }
LABEL_21:
  char v73 = v22;
  if (v14)
  {
    unint64_t v64 = v14;
    operator delete(v14);
  }
  if (!*((unsigned char *)a2 + 80))
  {
    int64x2_t v50 = __cxa_allocate_exception(8uLL);
    void *v50 = &off_2439078;
  }
  long long v55 = 0uLL;
  long double v56 = 0;
  uint64_t v24 = (char *)*((void *)a2 + 6);
  unsigned int v23 = (char *)*((void *)a2 + 7);
  uint64_t v25 = v23 - v24;
  if (v23 != v24)
  {
    if (v25 < 0) {
      sub_2E00();
    }
    char v26 = (char *)operator new(v23 - v24);
    *(void *)&long long v55 = v26;
    *((void *)&v55 + 1) = v26;
    long double v56 = &v26[8 * (v25 >> 3)];
    do
    {
      LODWORD(v58) = *((_DWORD *)v24 + 1);
      HIDWORD(v58) = *(_DWORD *)v24;
      char v26 = sub_9C262C((unint64_t *)&v55, v26, &v58) + 8;
      v24 += 8;
    }
    while (v24 != v23);
  }
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  long long __p = v55;
  float64x2_t v75 = v56;
  if (!*((unsigned char *)a2 + 80))
  {
    long double v51 = __cxa_allocate_exception(8uLL);
    void *v51 = &off_2439078;
  }
  uint64_t v27 = *((unsigned int *)a2 + 9);
  if (v27 == -1 || (uint64_t v28 = *((unsigned int *)a2 + 10), !v28))
  {
    unint64_t v37 = *((unsigned int *)a2 + 3) | ((unint64_t)*((unsigned int *)a2 + 2) << 32);
LABEL_53:
    unint64_t v68 = v37;
    goto LABEL_54;
  }
  unint64_t v76 = v28 | (v27 << 32);
  unint64_t v68 = *((unsigned int *)a2 + 3) | ((unint64_t)*((unsigned int *)a2 + 2) << 32);
  uint64_t v29 = (int *)sub_94C794(*(void *)(a1 + 24), v76, 0, "transfer graph");
  long long v30 = (unsigned __int16 *)((char *)v29 - *v29);
  if (*v30 >= 0xBu)
  {
    uint64_t v31 = v30[5];
    if (v31)
    {
      if (*(int *)((char *)v29 + v31 + *(unsigned int *)((char *)v29 + v31)))
      {
        double v58 = 0;
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        if (!*((unsigned char *)a2 + 80))
        {
          double v53 = __cxa_allocate_exception(8uLL);
          *double v53 = &off_2439078;
        }
        uint64_t v32 = (_DWORD *)*((void *)a2 + 6);
        BOOL v33 = (_DWORD *)*((void *)a2 + 7);
        *(void *)&long long v55 = &v58;
        if (v32 != v33)
        {
          do
          {
            LODWORD(v77) = v32[1];
            HIDWORD(v77) = *v32;
            sub_2A98DC((void ***)&v55, &v77);
            v32 += 2;
          }
          while (v32 != v33);
          if (!*((unsigned char *)a2 + 80))
          {
            long double v54 = __cxa_allocate_exception(8uLL);
            *long double v54 = &off_2439078;
          }
        }
        sub_94C0A0(*(uint64_t **)(a1 + 2416), *((unsigned int *)a2 + 10) | ((unint64_t)*((unsigned int *)a2 + 9) << 32), (uint64_t)&v58, a1 + 1784, (uint64_t)&v55);
        uint64_t v34 = (void **)v70[0];
        if (v70[0])
        {
          uint64_t v35 = (void **)v70[1];
          uint64_t v36 = v70[0];
          if (v70[1] != v70[0])
          {
            do
            {
              if (*((char *)v35 - 9) < 0) {
                operator delete(*(v35 - 4));
              }
              v35 -= 5;
            }
            while (v35 != v34);
            uint64_t v36 = v70[0];
          }
          v70[1] = v34;
          operator delete(v36);
        }
        *(_OWORD *)unsigned int v70 = v55;
        signed int v71 = v56;
        char v72 = v57;
        if (v58)
        {
          uint64_t v59 = v58;
          operator delete(v58);
        }
      }
    }
  }
LABEL_54:
  unint64_t v42 = sub_97066C(*(void *)(a1 + 2400), &v68);
  *(void *)(v9 - 5656) = v42;
  *(void *)&v69[16] = v42;
  v69[25] = sub_9B8810(a1, (uint64_t)v69);
  long double v43 = (void *)sub_976514(*(void *)(a1 + 2400));
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v43[1] - *v43) >> 3) <= *(void *)&v69[16]) {
    sub_66748();
  }
  v69[24] = *(unsigned char *)(*v43 + 168 * *(void *)&v69[16] + 163) ^ 1;
  if (*(unsigned char *)(v9 - 4752))
  {
    sub_9C299C(v9 - 4856, (long long *)v69);
  }
  else
  {
    long long v44 = *(_OWORD *)v69;
    *(_OWORD *)(v9 - 4846) = *(_OWORD *)&v69[10];
    *(_OWORD *)(v9 - 4856) = v44;
    uint64_t v45 = v9 - 5704;
    *(void *)(v45 + 880) = 0;
    *(void *)(v45 + 896) = 0;
    *(void *)(v45 + 888) = 0;
    *(_OWORD *)(v45 + 880) = *(_OWORD *)v70;
    *(void *)(v45 + 896) = v71;
    v70[1] = 0;
    signed int v71 = 0;
    v70[0] = 0;
    *(unsigned char *)(v45 + 904) = v72;
    *(unsigned char *)(v45 + 912) = v73;
    *(void *)(v9 - 4784) = 0;
    *(void *)(v45 + 936) = 0;
    *(void *)(v45 + 928) = 0;
    *(_OWORD *)(v9 - 4784) = __p;
    *(void *)(v45 + 936) = v75;
    float64x2_t v75 = 0;
    long long __p = 0uLL;
    *(void *)(v45 + 944) = v76;
    *(unsigned char *)(v9 - 4752) = 1;
  }
  *(void *)(v9 - 3816) = sub_9B8918(a1, v9 - 4856);
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  unsigned int v46 = (void **)v70[0];
  if (v70[0])
  {
    long double v47 = (void **)v70[1];
    long double v48 = v70[0];
    if (v70[1] != v70[0])
    {
      do
      {
        if (*((char *)v47 - 9) < 0) {
          operator delete(*(v47 - 4));
        }
        v47 -= 5;
      }
      while (v47 != v46);
      long double v48 = v70[0];
    }
    v70[1] = v46;
    operator delete(v48);
  }
}

void sub_9B7FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (v29)
  {
    operator delete(v29);
    sub_9B8C48(&a29);
    _Unwind_Resume(a1);
  }
  sub_9B8C48(&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_9B808C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  LODWORD(v46) = 1;
  unint64_t v12 = a6[2];
  if (v12 >= a6[3])
  {
    uint64_t v13 = sub_9C19E4(a6 + 1, (int *)&v46);
  }
  else
  {
    sub_9BE750(a6[2], 1);
    uint64_t v13 = v12 + 5704;
    a6[2] = v13;
  }
  a6[2] = v13;
  uint64_t v14 = (_DWORD *)(v13 - 5664);
  if (*(unsigned char *)(a3 + 1096)) {
    BOOL v15 = *(_DWORD *)(a3 + 1088) == 2;
  }
  else {
    BOOL v15 = 0;
  }
  if (v15)
  {
    _DWORD *v14 = *(_DWORD *)(a3 + 4);
    uint64_t v16 = sub_49A29C(a3, *(void *)(a1 + 24));
    if (*(unsigned char *)(a4 + 1096)) {
      BOOL v20 = *(_DWORD *)(a4 + 1088) == 2;
    }
    else {
      BOOL v20 = 0;
    }
    int v18 = v20;
    if (!v20) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v16 = 0;
    _DWORD *v14 = *(_DWORD *)(a2 + 544);
    if (*(unsigned char *)(a4 + 1096)) {
      BOOL v17 = *(_DWORD *)(a4 + 1088) == 2;
    }
    else {
      BOOL v17 = 0;
    }
    int v18 = v17;
    if (!v17)
    {
LABEL_24:
      uint64_t v19 = 0;
      goto LABEL_25;
    }
  }
  uint64_t v19 = sub_49A29C(a4, *(void *)(a1 + 24));
LABEL_25:
  uint64_t v21 = a6[1];
  unint64_t v22 = 0xBC7FD20AC579B779 * ((a6[2] - v21) >> 3);
  BOOL v23 = v22 >= 2;
  unint64_t v24 = v22 - 2;
  if (v23 && *(_DWORD *)(v21 + 5704 * v24) == 7) {
    *(void *)(v13 - 5656) = *(void *)(v21 + 5704 * v24 + 48);
  }
  if (v18) {
    uint64_t v25 = a5;
  }
  else {
    uint64_t v25 = a4;
  }
  *(void *)(v13 - 5648) = sub_9B8CCC(a1, v25);
  if (*(unsigned char *)(a3 + 1096))
  {
    unint64_t v41 = sub_9B8DE4(a1, (unsigned int *)a3, 1);
    int v42 = v26;
    if (*(unsigned char *)(a4 + 1096)) {
      goto LABEL_34;
    }
  }
  else
  {
    unint64_t v41 = *(void *)(a1 + 64);
    int v42 = *(_DWORD *)(a1 + 72);
    if (*(unsigned char *)(a4 + 1096))
    {
LABEL_34:
      unint64_t v39 = sub_9B8DE4(a1, (unsigned int *)a4, 0);
      int v40 = v27;
      if (!*(unsigned char *)(a1 + 4)) {
        goto LABEL_39;
      }
      goto LABEL_38;
    }
  }
  unint64_t v39 = *(void *)(a1 + 440);
  int v40 = *(_DWORD *)(a1 + 448);
  if (!*(unsigned char *)(a1 + 4))
  {
LABEL_39:
    BOOL v28 = 0;
    goto LABEL_41;
  }
LABEL_38:
  if (*(unsigned char *)(a1 + 2512)) {
    goto LABEL_39;
  }
  BOOL v28 = sub_921A48(a2 + 32, (unsigned int *)&v41, (unsigned int *)&v39);
LABEL_41:
  uint64_t result = sub_470B5C((void *)(a2 + 32));
  if ((result ^ 1 | v28))
  {
    *(void *)(v13 - 3816) = v19 + v16 + *(void *)(a2 + 536);
    int v30 = 2;
    unint64_t v31 = -1;
  }
  else
  {
    uint64_t v32 = a2 + 4;
    BOOL v33 = *(_DWORD *)(a2 + 8) != -1 && *(_DWORD *)(a2 + 12) != 0;
    if (*(_DWORD *)(a2 + 8) == -1 || *(_DWORD *)(a2 + 12) == 0) {
      uint64_t v32 = a1 + 64;
    }
    uint64_t v46 = *(void *)v32;
    int v47 = *(_DWORD *)(v32 + 8);
    BOOL v48 = v33;
    if (*(_DWORD *)(a2 + 20) == -1 || !*(_DWORD *)(a2 + 24))
    {
      int v34 = 0;
      uint64_t v43 = *(void *)(a1 + 440);
      int v44 = *(_DWORD *)(a1 + 448);
    }
    else
    {
      uint64_t v43 = *(void *)(a2 + 16);
      int v44 = *(_DWORD *)(a2 + 24);
      int v34 = 1;
    }
    int v45 = v34;
    unint64_t v31 = sub_97598C(*(void *)(a1 + 2400), a2 + 32, &v46, (unsigned int *)&v43, *(unsigned __int8 *)(a1 + 2512));
    uint64_t v35 = sub_976514(*(void *)(a1 + 2400));
    uint64_t v36 = *(void *)(v35 + 168);
    if (0xBAA6550FFBAA6551 * ((*(void *)(v35 + 176) - v36) >> 3) <= v31) {
      sub_66748();
    }
    unint64_t v37 = (uint64_t *)(v36 + 7560 * v31);
    *(void *)(v13 - 3816) = v19 + v16 + sub_646C34(v37);
    uint64_t result = sub_646CE8((uint64_t)v37);
    int v30 = (int)result > *(_DWORD *)a1;
  }
  if (!*(unsigned char *)(v13 - 5624)) {
    *(unsigned char *)(v13 - 5624) = 1;
  }
  uint64_t v38 = v13 - 5704;
  *(void *)(v38 + 64) = v31;
  *(_DWORD *)(v38 + 72) = v30;
  return result;
}

void sub_9B8454(_Unwind_Exception *a1)
{
  *(void *)(v2 + 16) = v1;
  _Unwind_Resume(a1);
}

void sub_9B8464(uint64_t a1, long long *a2, uint64_t *a3)
{
  int v39 = 5;
  unint64_t v6 = a3[2];
  if (v6 >= a3[3])
  {
    uint64_t v7 = sub_9C19E4(a3 + 1, &v39);
  }
  else
  {
    sub_9BE750(a3[2], 5);
    uint64_t v7 = v6 + 5704;
    a3[2] = v7;
  }
  a3[2] = v7;
  *(_DWORD *)(v7 - 5664) = *((_DWORD *)a2 + 7);
  unint64_t v46 = *((unsigned int *)a2 + 3) | ((unint64_t)*((unsigned int *)a2 + 2) << 32);
  *(void *)(v7 - 5656) = sub_97066C(*(void *)(a1 + 2400), &v46);
  unint64_t v45 = *((unsigned int *)a2 + 6) | ((unint64_t)*((unsigned int *)a2 + 5) << 32);
  *(void *)(v7 - 5648) = sub_97066C(*(void *)(a1 + 2400), &v45);
  long long __p = 0;
  int v42 = 0;
  uint64_t v43 = 0;
  unint64_t v44 = 0xFFFFFFFF00000000;
  int v39 = 10 * (*((_DWORD *)a2 + 8) - *((_DWORD *)a2 + 7));
  long long v8 = a2[1];
  long long v33 = *a2;
  *(_OWORD *)int v34 = v8;
  *(_OWORD *)&v34[12] = *(long long *)((char *)a2 + 28);
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  uint64_t v35 = 0;
  long long v10 = (unsigned char *)*((void *)a2 + 6);
  uint64_t v9 = (unsigned char *)*((void *)a2 + 7);
  int64_t v11 = v9 - v10;
  if (v9 == v10)
  {
    unint64_t v12 = 0;
    char v38 = *((unsigned char *)a2 + 72);
    if (v38)
    {
LABEL_14:
      LOBYTE(v15) = 0;
      goto LABEL_15;
    }
  }
  else
  {
    if (v11 < 0) {
      sub_2E00();
    }
    unint64_t v12 = (char *)operator new(v9 - v10);
    uint64_t v35 = v12;
    unint64_t v37 = &v12[8 * (v11 >> 3)];
    memcpy(v12, v10, v11);
    uint64_t v36 = v37;
    char v38 = *((unsigned char *)a2 + 72);
    if (v38) {
      goto LABEL_14;
    }
  }
  if (*(_DWORD *)&v34[20] == -1) {
    goto LABEL_14;
  }
  if (!*(_DWORD *)&v34[24]) {
    goto LABEL_14;
  }
  uint64_t v13 = (int *)sub_94C794(*(void *)(a1 + 24), *(unsigned int *)&v34[24] | ((unint64_t)*(unsigned int *)&v34[20] << 32), 0, "transfer graph");
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 < 0x13u) {
    goto LABEL_14;
  }
  uint64_t v15 = v14[9];
  if (v15) {
    LOBYTE(v15) = *((unsigned char *)v13 + v15) != 0;
  }
LABEL_15:
  char v40 = v15;
  if (v12)
  {
    uint64_t v36 = v12;
    operator delete(v12);
  }
  int v30 = 0;
  unint64_t v31 = 0;
  uint64_t v32 = 0;
  BOOL v17 = (char *)*((void *)a2 + 6);
  uint64_t v16 = (char *)*((void *)a2 + 7);
  uint64_t v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0) {
      sub_2E00();
    }
    uint64_t v19 = (char *)operator new(v16 - v17);
    int v30 = v19;
    unint64_t v31 = v19;
    uint64_t v32 = &v19[8 * (v18 >> 3)];
    do
    {
      LODWORD(v47) = *((_DWORD *)v17 + 1);
      HIDWORD(v47) = *(_DWORD *)v17;
      uint64_t v19 = sub_9C262C((unint64_t *)&v30, v19, &v47) + 8;
      v17 += 8;
    }
    while (v17 != v16);
  }
  BOOL v20 = v30;
  uint64_t v21 = v31;
  unint64_t v22 = v32;
  uint64_t v23 = *((unsigned int *)a2 + 9);
  uint64_t v24 = *((unsigned int *)a2 + 10);
  long long __p = v30;
  int v42 = v31;
  uint64_t v43 = v32;
  if (v23 != -1 && v24) {
    unint64_t v44 = v24 | (v23 << 32);
  }
  uint64_t v25 = (int *)(v7 - 4744);
  if (!*(unsigned char *)(v7 - 4704))
  {
    int v26 = v39;
    *(unsigned char *)(v7 - 4740) = v40;
    *uint64_t v25 = v26;
    int v27 = (void *)(v7 - 5704);
    v27[121] = v20;
    v27[122] = v21;
    v27[123] = v22;
    int v42 = 0;
    uint64_t v43 = 0;
    long long __p = 0;
    v27[124] = v44;
    *(unsigned char *)(v7 - 4704) = 1;
    int v28 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 == -1) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  sub_9C2A9C((uint64_t)v25, &v39);
  int v28 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 != -1)
  {
LABEL_26:
    v29[0] = 0;
    v29[1] = 0;
    sub_9B5AFC(a1, v28, (uint64_t)v29, v7 - 5704);
  }
LABEL_27:
  if (__p)
  {
    int v42 = __p;
    operator delete(__p);
  }
}

void sub_9B8790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (v27)
  {
    operator delete(v27);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_9B8810(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8) != -1) {
    return 0;
  }
  uint64_t v4 = (void *)sub_976514(*(void *)(a1 + 2400));
  unint64_t v5 = *(void *)(a2 + 16);
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v4[1] - *v4) >> 3) <= v5) {
    sub_66748();
  }
  unint64_t v6 = *(void *)(*v4 + 168 * v5 + 104);
  if (v6 == -1) {
    return 0;
  }
  uint64_t v7 = v4[3];
  if (0x8E38E38E38E38E39 * ((v4[4] - v7) >> 4) <= v6) {
    sub_66748();
  }
  unint64_t v8 = *(void *)(v7 + 144 * v6 + 104);
  if (v8 == -1) {
    return 0;
  }
  uint64_t v9 = v4[6];
  if (0xF0F0F0F0F0F0F0F1 * ((v4[7] - v9) >> 3) <= v8) {
    sub_66748();
  }
  return *(unsigned char *)(v9 + 136 * v8 + 104) == 3;
}

uint64_t sub_9B8918(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8) == -1) {
    return 0;
  }
  uint64_t v4 = sub_976514(*(void *)(a1 + 2400));
  uint64_t v5 = *(void *)(v4 + 120);
  unint64_t v6 = *(void *)(a2 + 8);
  if (0x86BCA1AF286BCA1BLL * ((*(void *)(v4 + 128) - v5) >> 4) <= v6) {
    sub_66748();
  }
  uint64_t v7 = (void *)sub_976514(*(void *)(a1 + 2400));
  unint64_t v8 = *(void *)(a2 + 16);
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v7[1] - *v7) >> 3) <= v8) {
    sub_66748();
  }
  uint64_t v9 = (unsigned int *)(v5 + 304 * v6);
  unsigned int v11 = *v9;
  unsigned int v10 = v9[1];
  if (v11 == -1 && v10 == -1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v13 = (unsigned int *)(*v7 + 168 * v8);
  unsigned int v15 = *v13;
  unsigned int v14 = v13[1];
  if (*v13 == -1 && v14 == -1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  long double v17 = exp(3.14159265 - (double)v10 * 6.28318531 / 4294967300.0);
  long double v18 = atan((v17 - 1.0 / v17) * 0.5) * 57.2957795 * 0.0174532925;
  v19.i64[0] = v11;
  v19.i64[1] = v15;
  long double v20 = exp(3.14159265 - (double)v14 * 6.28318531 / 4294967300.0);
  long double v21 = atan((v20 - 1.0 / v20) * 0.5) * 57.2957795 * 0.0174532925;
  int64x2_t v22 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v19), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v34 = vsubq_f64((float64x2_t)v22, (float64x2_t)vdupq_laneq_s64(v22, 1)).f64[0];
  long double v23 = sin((v18 - v21) * 0.5);
  long double v24 = v23 * v23;
  double v25 = cos(v18);
  long double v26 = v25 * cos(v21);
  long double v27 = sin(0.5 * v34);
  long double v28 = atan2(sqrt(v27 * v27 * v26 + v24), sqrt(1.0 - (v27 * v27 * v26 + v24)));
  double v29 = (v28 + v28) * 6372797.56 * 100.0;
  if (v29 >= 0.0)
  {
    double v30 = v29;
    if (v29 >= 4.50359963e15) {
      goto LABEL_22;
    }
    uint64_t v31 = (uint64_t)(v29 + v29) + 1;
  }
  else
  {
    double v30 = v29;
    if (v29 <= -4.50359963e15) {
      goto LABEL_22;
    }
    uint64_t v31 = (uint64_t)(v29 + v29);
    if (v31 >= 1) {
      --v31;
    }
  }
  double v30 = (double)(v31 >> 1);
LABEL_22:
  if (v30 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v29 >= 0.0)
  {
    if (v29 < 4.50359963e15)
    {
      uint64_t v33 = (uint64_t)(v29 + v29) + 1;
      return (uint64_t)(double)(v33 >> 1);
    }
  }
  else if (v29 > -4.50359963e15)
  {
    uint64_t v33 = (uint64_t)(v29 + v29);
    if (v33 >= 1) {
      --v33;
    }
    return (uint64_t)(double)(v33 >> 1);
  }
  return (uint64_t)v29;
}

void *sub_9B8C48(void *a1)
{
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[4];
  if (v3)
  {
    uint64_t v4 = a1[5];
    uint64_t v5 = (void *)a1[4];
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 9) < 0) {
          operator delete(*(void **)(v4 - 32));
        }
        v4 -= 40;
      }
      while (v4 != v3);
      uint64_t v5 = (void *)a1[4];
    }
    a1[5] = v3;
    operator delete(v5);
  }
  return a1;
}

unint64_t sub_9B8CCC(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 1096)) {
    return -1;
  }
  int v3 = *(_DWORD *)(a2 + 1088);
  if (v3 != 1)
  {
    if (!v3)
    {
      uint64_t v4 = *(unsigned int *)(a2 + 4);
      int v5 = *(_DWORD *)(a2 + 16);
      unint64_t v6 = sub_369B60(*(void *)(a1 + 32), *(unsigned int *)(a2 + 8) | (unint64_t)(v4 << 32), 0);
      uint64_t v7 = &v6[-*(int *)v6];
      if (*(unsigned __int16 *)v7 < 5u)
      {
        uint64_t v8 = 0;
      }
      else
      {
        uint64_t v8 = *((unsigned __int16 *)v7 + 2);
        if (*((_WORD *)v7 + 2)) {
          v8 += (uint64_t)&v6[*(unsigned int *)&v6[v8]];
        }
      }
      unsigned int v11 = (int *)(v8 + 4 * v4 + 4 + *(unsigned int *)(v8 + 4 * v4 + 4));
      unint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v12 >= 0xDu && (uint64_t v13 = v12[6]) != 0) {
        int v14 = *(int *)((char *)v11 + v13);
      }
      else {
        int v14 = -1;
      }
      unint64_t v10 = *(void *)&v6[24 * (v14 + v5)
                         + 4
                         + *((unsigned __int16 *)v7 + 3)
                         + *(unsigned int *)&v6[*((unsigned __int16 *)v7 + 3)]];
      goto LABEL_15;
    }
    return -1;
  }
  unint64_t v10 = *(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned int *)(a2 + 20) << 32);
LABEL_15:
  unint64_t v15 = v10;
  return sub_97066C(*(void *)(a1 + 2400), &v15);
}

unint64_t sub_9B8DE4(uint64_t a1, unsigned int *a2, int a3)
{
  unsigned int v4 = a2[272];
  if (!v4)
  {
    uint64_t v7 = (int *)(a2 + 5);
    if (a3 != 1) {
      uint64_t v7 = (int *)(a2 + 4);
    }
    int v8 = *v7;
    uint64_t v9 = a2[1];
    unint64_t v10 = sub_369B60(*(void *)(a1 + 32), a2[2] | (unint64_t)(v9 << 32), 0);
    unsigned int v11 = &v10[-*(int *)v10];
    if (*(unsigned __int16 *)v11 < 5u)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = *((unsigned __int16 *)v11 + 2);
      if (*((_WORD *)v11 + 2)) {
        v12 += (uint64_t)&v10[*(unsigned int *)&v10[v12]];
      }
    }
    long double v20 = (int *)(v12 + 4 * v9 + 4 + *(unsigned int *)(v12 + 4 * v9 + 4));
    long double v21 = (unsigned __int16 *)((char *)v20 - *v20);
    if (*v21 >= 0xDu && (uint64_t v22 = v21[6]) != 0) {
      int v23 = *(int *)((char *)v20 + v22);
    }
    else {
      int v23 = -1;
    }
    int v5 = (int *)sub_498D5C(*(void *)(a1 + 24), *(void *)&v10[24 * (v23 + v8)+ 4+ *((unsigned __int16 *)v11 + 3)+ *(unsigned int *)&v10[*((unsigned __int16 *)v11 + 3)]], 0, "stop");
    unsigned __int16 v6 = *(_WORD *)((char *)v5 - *v5 + 6);
LABEL_25:
    long double v24 = (unsigned int *)((char *)v5 + v6);
    unsigned int v25 = *v24;
    unsigned int v26 = v24[1];
    if (v26 >= 0xFFFFFFFE) {
      unsigned int v26 = -2;
    }
    return v25 | ((unint64_t)v26 << 32);
  }
  if (v4 != 1)
  {
    if (v4 != 2) {
      return -1;
    }
    int v5 = (int *)sub_4992B0(*(void *)(a1 + 24), a2[4] | ((unint64_t)a2[3] << 32), 0, "road access point");
    unsigned __int16 v6 = *(_WORD *)((char *)v5 - *v5 + 8);
    goto LABEL_25;
  }
  uint64_t v13 = a2 + 1;
  if (a3) {
    int v14 = (int *)(a2 + 4);
  }
  else {
    int v14 = (int *)(a2 + 1);
  }
  int v15 = *v14;
  if (v15 == 3)
  {
    uint64_t v27 = *(void *)(a1 + 24);
    if (a3) {
      uint64_t v13 = a2 + 4;
    }
    long double v17 = (int *)sub_499804(v27, v13[2] | ((unint64_t)v13[1] << 32), 0, "access point");
    long double v18 = (unsigned __int16 *)((char *)v17 - *v17 + 14);
  }
  else
  {
    if (v15) {
      return -1;
    }
    uint64_t v16 = *(void *)(a1 + 24);
    if (a3) {
      uint64_t v13 = a2 + 4;
    }
    long double v17 = (int *)sub_498D5C(v16, v13[2] | ((unint64_t)v13[1] << 32), 0, "stop");
    long double v18 = (unsigned __int16 *)((char *)v17 - *v17 + 6);
  }
  uint64_t v28 = (uint64_t)v17 + *v18;
  uint64_t v29 = *(unsigned int *)v28;
  LODWORD(v28) = *(_DWORD *)(v28 + 4);
  if (v28 >= 0xFFFFFFFE) {
    uint64_t v28 = 4294967294;
  }
  else {
    uint64_t v28 = v28;
  }
  return v29 | (v28 << 32);
}

uint64_t sub_9B9018(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5, int a6, _DWORD *a7)
{
  unint64_t v260 = 0x8000000080000000;
  __int16 v261 = 0;
  long long v262 = xmmword_20EA7A0;
  unint64_t v263 = 0x8000000080000000;
  __int16 v264 = 0;
  long long v265 = xmmword_20EA7A0;
  uint64_t v266 = 0x8000000080000000;
  int v267 = 0x7FFFFFFF;
  __int16 v268 = 0;
  char v269 = 0;
  v270[56] = 0;
  long long v271 = 0u;
  memset(v272, 0, sizeof(v272));
  char v273 = 2;
  memset(v274, 0, sizeof(v274));
  char v275 = 0;
  v276[8] = -1;
  *(_DWORD *)((char *)v277 + 3) = -1;
  LODWORD(v277[0]) = -1;
  memset((char *)v277 + 7, 0, 26);
  memset(&v277[5], 0, 24);
  char v278 = 0;
  char v279 = 0;
  char v280 = 1;
  memset(v281, 0, sizeof(v281));
  long long v282 = 0u;
  v283 = 0;
  char v284 = 1;
  uint64_t v285 = 0x7FFFFFFF7FFFFFFFLL;
  v286[56] = 0;
  char v287 = 0;
  v288[8] = -1;
  *(_DWORD *)((char *)v289 + 3) = -1;
  LODWORD(v289[0]) = -1;
  memset((char *)v289 + 7, 0, 26);
  char v290 = 0;
  memset(&v289[5], 0, 24);
  uint64_t v291 = -1;
  long long v292 = 0u;
  __int16 v294 = 0;
  uint64_t v293 = 0;
  uint64_t v295 = -1;
  uint64_t v296 = -1;
  long long v297 = xmmword_20EA7A0;
  char v298 = 0;
  int32x2_t v241 = vrev64_s32(*(int32x2_t *)(a2 + 4));
  uint64_t v12 = (int *)sub_369F8C(*(void *)(a1 + 32), *(void *)&v241, 0, "trip");
  unint64_t v240 = *(void *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6));
  uint64_t v13 = *(void *)(a1 + 2400);
  *(void *)&long long v250 = 0xFFFFFFFF00000000;
  uint64_t v295 = sub_972C9C(v13, &v240, (void **)&v250);
  uint64_t v14 = *(void *)(a1 + 32);
  int v15 = (int *)sub_369F8C(v14, *(void *)&v241, 0, "trip");
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0) {
    uint64_t v18 = *(void *)((char *)v15 + v17);
  }
  else {
    uint64_t v18 = 0;
  }
  uint64x2_t v19 = sub_398020(v14, 0);
  long double v20 = &v19[-*(int *)v19];
  if (*(unsigned __int16 *)v20 >= 0xBu)
  {
    uint64_t v21 = *((unsigned __int16 *)v20 + 5);
    if (v21)
    {
      if (v19[v21]) {
        uint64_t v18 = nullsub_1(v18);
      }
    }
  }
  uint64_t v296 = v18;
  unsigned int v22 = *(_DWORD *)(a2 + 12);
  *(int32x2_t *)&long long v297 = v241;
  *((void *)&v297 + 1) = __PAIR64__(a3, v22);
  int v23 = (int *)sub_369F8C(*(void *)(a1 + 32), *(void *)&v241, 0, "trip");
  long double v24 = (unsigned __int16 *)((char *)v23 - *v23);
  uint64_t v203 = a4;
  uint64_t v204 = a7;
  if (*v24 < 0x13u || (uint64_t v25 = v24[9]) == 0 || !*(int *)((char *)v23 + v25 + *(unsigned int *)((char *)v23 + v25)))
  {
    uint64_t v31 = sub_92084C(*(void *)(a1 + 32), (uint64_t)&v241, *(unsigned int *)(a2 + 12), a3);
    int v34 = sub_920698(*(void *)(a1 + 32), (uint64_t)&v241, *(unsigned int *)(a2 + 12), a3);
    LODWORD(v39) = *(_DWORD *)(a1 + 2248);
    if (v39)
    {
      uint64_t v40 = *(void *)(a1 + 40);
      if (**(void **)(v40 + 3896))
      {
        unint64_t v41 = sub_367060(**(void **)(v40 + 3896), *(void *)&v241, *(_DWORD *)(a2 + 12), *(unsigned char *)(v40 + 3904));
        uint64_t v40 = *(void *)(a1 + 40);
        if (v41)
        {
          LODWORD(v39) = *((unsigned __int8 *)sub_90DEBC(v40, *(void *)&v241, *(_DWORD *)(a2 + 12), 0) + 32);
          if (v39 == 1)
          {
            uint64_t v33 = 0x7FFFFFFFLL;
            __int16 v42 = 2;
            int v32 = 0x7FFFFFFF;
            goto LABEL_66;
          }
          uint64_t v40 = *(void *)(a1 + 40);
        }
      }
      uint64_t v39 = **(void **)(v40 + 3896);
      if (v39)
      {
        uint64_t v60 = sub_367060(**(void **)(v40 + 3896), *(void *)&v241, *(_DWORD *)(a2 + 12), *(unsigned char *)(v40 + 3904));
        if (v60)
        {
          uint64_t v61 = v60[5];
          if (0xCCCCCCCCCCCCCCCDLL * ((v60[6] - v61) >> 2) > a3 && *(unsigned __int8 *)(v61 + 20 * a3) != 255)
          {
            uint64_t v33 = sub_920BB4(*(void *)(a1 + 40), *(void *)&v241, *(unsigned int *)(a2 + 12), a3);
            int v32 = sub_920A00(*(void *)(a1 + 40), *(void *)&v241, *(unsigned int *)(a2 + 12), a3);
            __int16 v42 = *(unsigned __int8 *)(sub_90DB40(*(void *)(a1 + 40), *(void *)&v241, *(_DWORD *)(a2 + 12), a3, 0)
                                     + 18);
            LOWORD(v39) = 1;
            goto LABEL_66;
          }
        }
        LOWORD(v39) = 0;
      }
    }
    __int16 v42 = 0;
    uint64_t v33 = v31;
    int v32 = v34;
LABEL_66:
    unsigned int v62 = *(_DWORD *)(a2 + 12);
    unint64_t v260 = v31 | (unint64_t)(v33 << 32);
    __int16 v261 = v39 | (v42 << 8);
    *(int32x2_t *)&long long v262 = v241;
    *((void *)&v262 + 1) = __PAIR64__(a3, v62);
    unint64_t v263 = __PAIR64__(v32, v34);
    __int16 v264 = v261;
    *(int32x2_t *)&long long v265 = v241;
    char v29 = 1;
    *((void *)&v265 + 1) = __PAIR64__(a3, v62);
    uint64_t v35 = a7;
    int v36 = *a7;
    if (*a7 != 3) {
      goto LABEL_13;
    }
LABEL_67:
    int v63 = *(_DWORD *)(a2 + 16);
    _ZF = v63 == a3;
    if (v63 == a3) {
      int v65 = v34;
    }
    else {
      int v65 = v31;
    }
    if (_ZF) {
      int v66 = v32;
    }
    else {
      int v66 = v33;
    }
    if (v66 == 0x7FFFFFFF) {
      int v66 = v65;
    }
    if (*(_DWORD *)(a1 + 2528) == 2) {
      int v65 = v66;
    }
    v35[10] = v65;
    long long __p = 0uLL;
    v239 = 0;
    long long v236 = 0uLL;
    v237 = 0;
    unint64_t v37 = v35;
    int v38 = *v35;
    if (*v35 != 2) {
      goto LABEL_78;
    }
LABEL_29:
    uint64_t v43 = (int *)sub_8DFD1C(*(void *)(a1 + 32), v240, 0, "line");
    unint64_t v44 = (unsigned __int16 *)((char *)v43 - *v43);
    if (*v44 >= 0x25u && (uint64_t v45 = v44[18]) != 0) {
      unsigned int v46 = *((unsigned __int8 *)v43 + v45);
    }
    else {
      unsigned int v46 = 0;
    }
    int v234 = 0;
    v235 = 0;
    v233 = 0;
    uint64_t v47 = (const void *)__p;
    int64_t v48 = *((void *)&__p + 1) - __p;
    if (*((void *)&__p + 1) == (void)__p)
    {
      uint64x2_t v49 = 0;
    }
    else
    {
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v48 >> 2)) > 0x924924924924924) {
        sub_2E00();
      }
      uint64x2_t v49 = (unsigned int *)operator new(*((void *)&__p + 1) - __p);
      v233 = v49;
      v235 = &v49[v48 >> 2];
      memcpy(v49, v47, v48);
      int v234 = v235;
    }
    sub_9BB9A8(&v233, 1, (void **)&v250);
    if (v281[0])
    {
      v281[1] = v281[0];
      operator delete(v281[0]);
    }
    *(_OWORD *)v281 = v250;
    v281[2] = v251;
    v251 = 0;
    long long v250 = 0uLL;
    if (v49)
    {
      int v234 = v49;
      operator delete(v49);
    }
    v231 = 0;
    int v232 = 0;
    v230 = 0;
    int64x2_t v50 = (const void *)v236;
    int64_t v51 = *((void *)&v236 + 1) - v236;
    if (*((void *)&v236 + 1) == (void)v236)
    {
      long double v52 = 0;
    }
    else
    {
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v51 >> 2)) > 0x924924924924924) {
        sub_2E00();
      }
      long double v52 = (unsigned int *)operator new(*((void *)&v236 + 1) - v236);
      v230 = v52;
      int v232 = &v52[v51 >> 2];
      memcpy(v52, v50, v51);
      v231 = v232;
    }
    sub_9BB9A8(&v230, 1, (void **)&v250);
    double v53 = (void *)v203;
    if (v281[3])
    {
      v281[4] = v281[3];
      operator delete(v281[3]);
    }
    *(_OWORD *)&v281[3] = v250;
    v281[5] = v251;
    v251 = 0;
    long long v250 = 0uLL;
    if (v52)
    {
      v231 = v52;
      operator delete(v52);
    }
    if (v46 == 2) {
      char v54 = v29;
    }
    else {
      char v54 = 0;
    }
    if (v54)
    {
LABEL_96:
      int32x2_t v72 = v241;
      char v73 = sub_369B60(*(void *)(a1 + 32), *(void *)&v241, 0);
      float64x2_t v74 = &v73[-*(int *)v73];
      if (*(unsigned __int16 *)v74 < 5u)
      {
        uint64_t v75 = 0;
      }
      else
      {
        uint64_t v75 = *((unsigned __int16 *)v74 + 2);
        if (*((_WORD *)v74 + 2)) {
          v75 += (uint64_t)&v73[*(unsigned int *)&v73[v75]];
        }
      }
      unint64_t v76 = (int *)(v75
                  + 4 * HIDWORD(*(void *)&v72)
                  + 4
                  + *(unsigned int *)(v75 + 4 * HIDWORD(*(void *)&v72) + 4));
      uint64_t v77 = (unsigned __int16 *)((char *)v76 - *v76);
      if (*v77 >= 0xDu && (uint64_t v78 = v77[6]) != 0) {
        int v79 = *(int *)((char *)v76 + v78);
      }
      else {
        int v79 = -1;
      }
      int v80 = *(unsigned __int16 *)&v73[24 * v79
                                    + 24
                                    + 24 * a3
                                    + *((unsigned __int16 *)v74 + 3)
                                    + *(unsigned int *)&v73[*((unsigned __int16 *)v74 + 3)]];
      if (v80) {
        int v267 = *(_DWORD *)(a2 + 24) - v80;
      }
      if (*(unsigned char *)(a1 + 5))
      {
        __int16 v81 = (char *)(a5 + 6);
        if (!a6) {
          __int16 v81 = (char *)(v53 + 16);
        }
        char v284 = *v81;
      }
      int v82 = (_DWORD *)v53[1];
      long long v83 = (_DWORD *)v53[2];
      if (v82 != v83)
      {
        while (!sub_9BD990(a1, v82))
        {
          v82 += 274;
          if (v82 == v83) {
            goto LABEL_113;
          }
        }
        goto LABEL_119;
      }
LABEL_113:
      uint64_t v84 = (unsigned int *)v53[10];
      long long v85 = (unsigned int *)v53[11];
      if (v84 == v85)
      {
LABEL_120:
        LOBYTE(v86) = 0;
      }
      else
      {
        uint64_t v86 = **(void **)(*(void *)(a1 + 40) + 3896);
        if (v86)
        {
          while (1)
          {
            uint64_t v87 = *(void *)(a1 + 40);
            uint64_t v88 = **(void **)(v87 + 3896);
            if (v88)
            {
              if (sub_367060(v88, v84[1] | ((unint64_t)*v84 << 32), v84[2], *(unsigned char *)(v87 + 3904))) {
                break;
              }
            }
            v84 += 7;
            if (v84 == v85) {
              goto LABEL_120;
            }
          }
LABEL_119:
          LOBYTE(v86) = 1;
        }
      }
      char v298 = v86;
      sub_9BC514(*(void *)(a1 + 32), (unint64_t *)&v241, a3, *(_DWORD *)(a2 + 12), (uint64_t)&v250);
      sub_9973DC((uint64_t)&v250, a1 + 1784, (uint64_t)&v242);
      if (SHIBYTE(v272[3]) < 0) {
        operator delete((void *)v272[1]);
      }
      *(_OWORD *)&v272[1] = v242;
      v272[3] = v243;
      HIBYTE(v243) = 0;
      LOBYTE(v242) = 0;
      char v273 = v244;
      if (SHIBYTE(v274[2]) < 0)
      {
        operator delete(v274[0]);
        *(_OWORD *)v274 = v246;
        v274[2] = v247;
        HIBYTE(v247) = 0;
        LOBYTE(v246) = 0;
        if (SHIBYTE(v243) < 0) {
          operator delete((void *)v242);
        }
      }
      else
      {
        *(_OWORD *)v274 = v246;
        v274[2] = v247;
        HIBYTE(v247) = 0;
        LOBYTE(v246) = 0;
      }
      uint64_t v89 = *((void *)&v254 + 1);
      if (*((void *)&v254 + 1))
      {
        uint64_t v90 = v255;
        int64_t v91 = (void *)*((void *)&v254 + 1);
        if ((void)v255 != *((void *)&v254 + 1))
        {
          do
          {
            if (*(char *)(v90 - 1) < 0) {
              operator delete(*(void **)(v90 - 24));
            }
            v90 -= 32;
          }
          while (v90 != v89);
          int64_t v91 = (void *)*((void *)&v254 + 1);
        }
        *(void *)&long long v255 = v89;
        operator delete(v91);
      }
      if (SHIBYTE(v251) < 0)
      {
        operator delete((void *)v250);
        uint64_t v92 = v203;
        if (!*(unsigned char *)(a1 + 8)) {
          goto LABEL_158;
        }
      }
      else
      {
        uint64_t v92 = v203;
        if (!*(unsigned char *)(a1 + 8)) {
          goto LABEL_158;
        }
      }
      if (*(_DWORD *)(a1 + 2252) >= 2u)
      {
        if (*(_DWORD *)(a1 + 2248))
        {
          uint64_t v93 = *(void *)(a1 + 40);
          uint64_t v94 = **(void **)(v93 + 3896);
          if (v94)
          {
            unint64_t v95 = sub_367060(v94, *(void *)&v241, *(_DWORD *)(a2 + 12), *(unsigned char *)(v93 + 3904));
            if (v95)
            {
              unint64_t v96 = (char *)v95[8];
              unint64_t v97 = (char *)v95[9];
              if (v97 - v96 >= 72)
              {
                if (v97 - v96 == 72)
                {
                  unsigned int v99 = a3;
                }
                else
                {
                  unint64_t v98 = (v97 - v96) / 0x48uLL;
                  unsigned int v99 = a3;
                  do
                  {
                    uint64_t v100 = 18 * (v98 >> 2);
                    _X14 = &v96[v100 * 4];
                    __asm { PRFM            #0, [X14] }
                    unint64_t v106 = (unsigned int *)&v96[72 * (v98 >> 1)];
                    _X13 = &v106[v100];
                    __asm { PRFM            #0, [X13] }
                    if (*v106 >= a3) {
                      unint64_t v109 = 0;
                    }
                    else {
                      unint64_t v109 = v98 >> 1;
                    }
                    v96 += 72 * v109;
                    v98 -= v98 >> 1;
                  }
                  while ((uint64_t)v98 > 1);
                }
                v96 += 72 * (*(_DWORD *)v96 < v99);
              }
              if (v96 != v97 && *(_DWORD *)v96 == a3)
              {
                unint64_t v110 = sub_9BED48(*(void *)(a1 + 40), *(void *)&v241, *(_DWORD *)(a2 + 12), a3, 0);
                sub_9973DC((uint64_t)(v110 + 1), a1 + 1784, (uint64_t)&v250);
                if (SHIBYTE(v272[3]) < 0) {
                  operator delete((void *)v272[1]);
                }
                *(_OWORD *)&v272[1] = v250;
                v272[3] = v251;
                HIBYTE(v251) = 0;
                LOBYTE(v250) = 0;
                char v273 = v252;
                if (SHIBYTE(v274[2]) < 0)
                {
                  operator delete(v274[0]);
                  *(_OWORD *)v274 = v254;
                  v274[2] = (void *)v255;
                  BYTE7(v255) = 0;
                  LOBYTE(v254) = 0;
                  if (SHIBYTE(v251) < 0) {
                    operator delete((void *)v250);
                  }
                }
                else
                {
                  *(_OWORD *)v274 = v254;
                  v274[2] = (void *)v255;
                }
                char v279 = 1;
LABEL_171:
                int32x2_t v116 = v241;
                unint64_t v117 = sub_369B60(*(void *)(a1 + 32), *(void *)&v241, 0);
                unint64_t v118 = &v117[-*(int *)v117];
                unint64_t v37 = v204;
                if (*(unsigned __int16 *)v118 < 5u)
                {
                  uint64_t v119 = 0;
                }
                else
                {
                  uint64_t v119 = *((unsigned __int16 *)v118 + 2);
                  if (*((_WORD *)v118 + 2)) {
                    v119 += (uint64_t)&v117[*(unsigned int *)&v117[v119]];
                  }
                }
                unint64_t v120 = (int *)(v119
                             + 4 * HIDWORD(*(void *)&v116)
                             + 4
                             + *(unsigned int *)(v119 + 4 * HIDWORD(*(void *)&v116) + 4));
                int v121 = (unsigned __int16 *)((char *)v120 - *v120);
                if (*v121 >= 0xDu && (uint64_t v122 = v121[6]) != 0) {
                  int v123 = *(int *)((char *)v120 + v122);
                }
                else {
                  int v123 = -1;
                }
                sub_9BC6C4(a1, *(void *)&v117[24 * v123+ 4+ 24 * a3+ *((unsigned __int16 *)v118 + 3)+ *(unsigned int *)&v117[*((unsigned __int16 *)v118 + 3)]], v240, (uint64_t)&v272[1], (uint64_t)&v250);
                sub_4F377C((uint64_t)v276, (uint64_t)&v250);
                v277[0] = *((void *)&v254 + 1);
                if (SHIBYTE(v277[3]) < 0) {
                  operator delete((void *)v277[1]);
                }
                char v124 = 0;
                *(_OWORD *)&v277[1] = v255;
                v277[3] = v256;
                HIBYTE(v256) = 0;
                LOBYTE(v255) = 0;
                LOBYTE(v277[4]) = v257;
                if (SHIBYTE(v277[7]) < 0)
                {
                  operator delete((void *)v277[5]);
                  char v124 = HIBYTE(v256);
                }
                *(std::string *)&v277[5] = v258;
                *((unsigned char *)&v258.__r_.__value_.__s + 23) = 0;
                v258.__r_.__value_.__s.__data_[0] = 0;
                char v278 = v259;
                if (v124 < 0)
                {
                  operator delete((void *)v255);
                  int v125 = v254;
                  if (v254 != 1)
                  {
LABEL_185:
                    if (v125 || (v253 & 0x80000000) == 0)
                    {
LABEL_192:
                      unint64_t v127 = (uint64_t *)((char *)a5 + 52);
                      if (!a6) {
                        unint64_t v127 = (uint64_t *)(v92 + 132);
                      }
                      uint64_t v285 = *v127;
                      int v38 = *v204;
                      if (*v204 == 8) {
                        goto LABEL_196;
                      }
                      goto LABEL_195;
                    }
                    unint64_t v126 = (void *)*((void *)&v250 + 1);
LABEL_191:
                    operator delete(v126);
                    goto LABEL_192;
                  }
                }
                else
                {
                  int v125 = v254;
                  if (v254 != 1) {
                    goto LABEL_185;
                  }
                }
                unint64_t v126 = (void *)*((void *)&v250 + 1);
                if (!*((void *)&v250 + 1)) {
                  goto LABEL_192;
                }
                v251 = (void *)*((void *)&v250 + 1);
                goto LABEL_191;
              }
            }
          }
        }
      }
LABEL_158:
      uint64_t v111 = HIBYTE(v272[3]);
      if (v272[3] < 0) {
        uint64_t v111 = v272[2];
      }
      if (v111)
      {
        unint64_t v112 = (void *)HIBYTE(v274[2]);
        if (SHIBYTE(v274[2]) < 0) {
          unint64_t v112 = v274[1];
        }
        if (v112)
        {
          long long v113 = (int *)sub_9BEB94(*(void *)(a1 + 32), *(void *)&v241, a3, *(_DWORD *)(a2 + 12));
          if (v113)
          {
            uint64_t v114 = (unsigned __int16 *)((char *)v113 - *v113);
            if (*v114 < 9u)
            {
              LOBYTE(v115) = 0;
            }
            else
            {
              uint64_t v115 = v114[4];
              if (v115) {
                LOBYTE(v115) = *((unsigned char *)v113 + v115) != 0;
              }
            }
          }
          else
          {
            LOBYTE(v115) = 0;
          }
          char v275 = v115;
        }
      }
      goto LABEL_171;
    }
    if (a6)
    {
      sub_9BBC04(a5, (uint64_t *)v229);
      sub_9BB9A8(v229, 0, (void **)&v250);
    }
    else
    {
      int v226 = 0;
      v227 = 0;
      uint64_t v228 = 0;
      long double v56 = *(unsigned char **)(v203 + 80);
      long long v55 = *(unsigned char **)(v203 + 88);
      int64_t v57 = v55 - v56;
      if (v55 != v56)
      {
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v57 >> 2)) > 0x924924924924924) {
          sub_2E00();
        }
        double v58 = (char *)operator new(v57);
        uint64_t v59 = &v58[4 * (v57 >> 2)];
        int v226 = v58;
        uint64_t v228 = v59;
        memcpy(v58, v56, v57);
        v227 = v59;
      }
      sub_9BB9A8((unsigned int **)&v226, 0, (void **)&v250);
      double v53 = (void *)v203;
    }
    if ((void)v282)
    {
      *((void *)&v282 + 1) = v282;
      operator delete((void *)v282);
    }
    long long v282 = v250;
    v283 = v251;
    v251 = 0;
    long long v250 = 0uLL;
    if (a6)
    {
      unint64_t v67 = v229[0];
      if (v229[0])
      {
        unint64_t v68 = (void **)v229;
LABEL_88:
        v68[1] = v67;
        operator delete(v67);
      }
    }
    else
    {
      unint64_t v67 = (unsigned int *)v226;
      if (v226)
      {
        unint64_t v68 = &v226;
        goto LABEL_88;
      }
    }
    uint64_t v266 = sub_9BBEE4(a1, (unsigned int *)a2, (uint64_t)v53, (uint64_t)a5, (uint64_t)v281, v29, a6);
    BOOL v69 = sub_BB7C(&v266);
    if (v46 < 6 && v69) {
      unsigned int v71 = (0x32u >> v46) & 1;
    }
    else {
      LOBYTE(v71) = 0;
    }
    HIBYTE(v294) = v71;
    goto LABEL_96;
  }
  int v26 = sub_92084C(*(void *)(a1 + 32), (uint64_t)&v241, *(unsigned int *)(a2 + 12), a3);
  int v27 = sub_920698(*(void *)(a1 + 32), (uint64_t)&v241, *(unsigned int *)(a2 + 12), a3);
  int v28 = sub_920698(*(void *)(a1 + 32), (uint64_t)&v241, *(unsigned int *)(a2 + 12), *(_DWORD *)(a2 + 16));
  char v29 = 0;
  int v30 = *(_DWORD *)(a2 + 24);
  LODWORD(v31) = v26 - v28 + v30;
  int v32 = v27 - v28 + v30;
  LODWORD(v33) = v31;
  int v34 = v32;
  uint64_t v35 = a7;
  int v36 = *a7;
  if (*a7 == 3) {
    goto LABEL_67;
  }
LABEL_13:
  long long __p = 0uLL;
  v239 = 0;
  long long v236 = 0uLL;
  v237 = 0;
  if (v36 != 2 || !a6)
  {
    unint64_t v37 = a7;
    if (v36 == 8 || v36 == 2)
    {
      if (&__p != (long long *)(v203 + 32)) {
        sub_9C1848(&__p, *(char **)(v203 + 32), *(char **)(v203 + 40), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v203 + 40) - *(void *)(v203 + 32)) >> 2));
      }
      if (&v236 != (long long *)(v203 + 56)) {
        sub_9C1848(&v236, *(char **)(v203 + 56), *(char **)(v203 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v203 + 64) - *(void *)(v203 + 56)) >> 2));
      }
    }
    int v38 = *a7;
    if (*a7 != 2) {
      goto LABEL_78;
    }
    goto LABEL_29;
  }
  sub_9BB564(a1, a5, *(_DWORD *)(a2 + 24), 0, (uint64_t)&v250);
  unint64_t v37 = a7;
  long long __p = v250;
  v239 = v251;
  sub_9BB564(a1, a5, *(_DWORD *)(a2 + 24), 1, (uint64_t)&v250);
  long long v236 = v250;
  v237 = v251;
  int v38 = *a7;
  if (*a7 == 2) {
    goto LABEL_29;
  }
LABEL_78:
  if (v38 == 8) {
    goto LABEL_196;
  }
LABEL_195:
  if (v38 != 2) {
    goto LABEL_304;
  }
LABEL_196:
  sub_9BC8DC((uint64_t *)(a1 + 2352), a2, &__p, &v236, a1 + 1784, (uint64_t)&v250);
  uint64_t v128 = v271;
  if (!(void)v271) {
    goto LABEL_206;
  }
  uint64_t v129 = *((void *)&v271 + 1);
  int v130 = (void *)v271;
  if (*((void *)&v271 + 1) != (void)v271)
  {
    while (1)
    {
      if (*(char *)(v129 - 1) < 0)
      {
        operator delete(*(void **)(v129 - 24));
        if ((*(char *)(v129 - 33) & 0x80000000) == 0) {
          goto LABEL_200;
        }
LABEL_203:
        operator delete(*(void **)(v129 - 56));
        v129 -= 56;
        if (v129 == v128)
        {
LABEL_204:
          int v130 = (void *)v271;
          break;
        }
      }
      else
      {
        if (*(char *)(v129 - 33) < 0) {
          goto LABEL_203;
        }
LABEL_200:
        v129 -= 56;
        if (v129 == v128) {
          goto LABEL_204;
        }
      }
    }
  }
  *((void *)&v271 + 1) = v128;
  operator delete(v130);
LABEL_206:
  long long v271 = v250;
  v272[0] = v251;
  sub_90BBA0(*(void *)(a1 + 32), (uint64_t)&v241, a3, (uint64_t)&v250);
  sub_9973DC((uint64_t)&v250, a1 + 1784, (uint64_t)&v220);
  uint64_t v131 = *((void *)&v254 + 1);
  if (*((void *)&v254 + 1))
  {
    uint64_t v132 = v255;
    uint64_t v133 = (void *)*((void *)&v254 + 1);
    if ((void)v255 != *((void *)&v254 + 1))
    {
      do
      {
        if (*(char *)(v132 - 1) < 0) {
          operator delete(*(void **)(v132 - 24));
        }
        v132 -= 32;
      }
      while (v132 != v131);
      uint64_t v133 = (void *)*((void *)&v254 + 1);
    }
    *(void *)&long long v255 = v131;
    operator delete(v133);
  }
  if ((SHIBYTE(v251) & 0x80000000) == 0)
  {
    uint64_t v134 = v222;
    if ((v222 & 0x80u) != 0) {
      uint64_t v134 = v221;
    }
    if (!v134) {
      goto LABEL_226;
    }
LABEL_222:
    uint64_t v136 = v225;
    if ((v225 & 0x80u) != 0) {
      uint64_t v136 = v224;
    }
    if (v136) {
      sub_9C62C4(v286, (uint64_t)&v220);
    }
    goto LABEL_226;
  }
  operator delete((void *)v250);
  uint64_t v135 = v222;
  if ((v222 & 0x80u) != 0) {
    uint64_t v135 = v221;
  }
  if (v135) {
    goto LABEL_222;
  }
LABEL_226:
  unint64_t v137 = (char *)a5 + 61;
  if (!a6) {
    unint64_t v137 = (char *)(a2 + 53);
  }
  char v287 = *v137;
  int v138 = sub_369B60(*(void *)(a1 + 32), *(void *)&v241, 0);
  uint64_t v139 = &v138[-*(int *)v138];
  unsigned int v140 = *(unsigned __int16 *)v139;
  if (v140 < 5)
  {
    uint64_t v141 = 0;
  }
  else
  {
    uint64_t v141 = *((unsigned __int16 *)v139 + 2);
    if (*((_WORD *)v139 + 2)) {
      v141 += (uint64_t)&v138[*(unsigned int *)&v138[v141]];
    }
  }
  int v142 = (int *)(v141 + 4 * v241.u32[1] + 4 + *(unsigned int *)(v141 + 4 * v241.u32[1] + 4));
  uint64_t v143 = (unsigned __int16 *)((char *)v142 - *v142);
  if (*v143 < 0x1Du || (uint64_t v144 = v143[14]) == 0 || (v145 = *(unsigned int *)((char *)v142 + v144), v145 == -1))
  {
    long long v250 = 0uLL;
    v251 = 0;
    char v252 = 2;
    long long v254 = (unint64_t)sub_1133328();
    long long v255 = 0uLL;
  }
  else
  {
    if (v140 < 0x13)
    {
      uint64_t v146 = 0;
    }
    else
    {
      uint64_t v146 = *((unsigned __int16 *)v139 + 9);
      if (v146) {
        v146 += (uint64_t)&v138[*(unsigned int *)&v138[v146]];
      }
    }
    sub_4A0694((int *)(v146 + 4 * v145 + 4 + *(unsigned int *)(v146 + 4 * v145 + 4)), (uint64_t)&v250);
  }
  sub_9973DC((uint64_t)&v250, a1 + 1784, (uint64_t)&v214);
  uint64_t v147 = *((void *)&v254 + 1);
  if (*((void *)&v254 + 1))
  {
    uint64_t v148 = v255;
    uint64_t v149 = (void *)*((void *)&v254 + 1);
    if ((void)v255 != *((void *)&v254 + 1))
    {
      do
      {
        if (*(char *)(v148 - 1) < 0) {
          operator delete(*(void **)(v148 - 24));
        }
        v148 -= 32;
      }
      while (v148 != v147);
      uint64_t v149 = (void *)*((void *)&v254 + 1);
    }
    *(void *)&long long v255 = v147;
    operator delete(v149);
  }
  if ((SHIBYTE(v251) & 0x80000000) == 0)
  {
    uint64_t v150 = v216;
    if ((v216 & 0x80u) != 0) {
      uint64_t v150 = v215;
    }
    if (!v150) {
      goto LABEL_259;
    }
LABEL_255:
    uint64_t v152 = v219;
    if ((v219 & 0x80u) != 0) {
      uint64_t v152 = v218;
    }
    if (v152) {
      sub_9C62C4(v270, (uint64_t)&v214);
    }
    goto LABEL_259;
  }
  operator delete((void *)v250);
  uint64_t v151 = v216;
  if ((v216 & 0x80u) != 0) {
    uint64_t v151 = v215;
  }
  if (v151) {
    goto LABEL_255;
  }
LABEL_259:
  int v153 = (int *)sub_369F8C(*(void *)(a1 + 32), *(void *)&v241, 0, "trip");
  int v154 = (unsigned __int16 *)((char *)v153 - *v153);
  if (*v154 < 0x1Bu)
  {
    LOBYTE(v155) = 0;
  }
  else
  {
    uint64_t v155 = v154[13];
    if (v155) {
      LOBYTE(v155) = *((unsigned char *)v153 + v155) != 0;
    }
  }
  char v269 = v155;
  uint8x8_t v156 = (uint8x8_t)sub_9BD088(*(void *)(a1 + 32), (uint64_t)&v241, (uint64_t)&v242).n128_u64[0];
  if (!v249)
  {
LABEL_300:
    if (((char)v219 & 0x80000000) == 0) {
      goto LABEL_301;
    }
    goto LABEL_346;
  }
  sub_966D38((uint64_t)&v242, 4, a1 + 1784, (uint64_t)&v250, v156);
  sub_4F377C((uint64_t)v288, (uint64_t)&v250);
  v289[0] = *((void *)&v254 + 1);
  if (SHIBYTE(v289[3]) < 0) {
    operator delete((void *)v289[1]);
  }
  char v157 = 0;
  *(_OWORD *)&v289[1] = v255;
  v289[3] = v256;
  HIBYTE(v256) = 0;
  LOBYTE(v255) = 0;
  LOBYTE(v289[4]) = v257;
  if (SHIBYTE(v289[7]) < 0)
  {
    operator delete((void *)v289[5]);
    char v157 = HIBYTE(v256);
  }
  *(std::string *)&v289[5] = v258;
  *((unsigned char *)&v258.__r_.__value_.__s + 23) = 0;
  v258.__r_.__value_.__s.__data_[0] = 0;
  char v290 = v259;
  if (v157 < 0)
  {
    operator delete((void *)v255);
    int v158 = v254;
    if (v254 != 1) {
      goto LABEL_270;
    }
LABEL_274:
    uint64_t v159 = (void *)*((void *)&v250 + 1);
    if (!*((void *)&v250 + 1)) {
      goto LABEL_277;
    }
    v251 = (void *)*((void *)&v250 + 1);
    goto LABEL_276;
  }
  int v158 = v254;
  if (v254 == 1) {
    goto LABEL_274;
  }
LABEL_270:
  if (!v158 && v253 < 0)
  {
    uint64_t v159 = (void *)*((void *)&v250 + 1);
LABEL_276:
    operator delete(v159);
  }
LABEL_277:
  uint64_t v160 = sub_976514(*(void *)(a1 + 2400));
  uint64_t v161 = v295;
  uint64_t v162 = *(void *)(v160 + 72);
  uint64_t v163 = sub_976514(*(void *)(a1 + 2400));
  uint64_t v164 = (uint64_t *)(v162 + 696 * v161);
  uint64_t v165 = v164[8];
  uint64_t v166 = *(void *)(v163 + 96);
  sub_9950FC(v164, (char *)&v250);
  sub_9950FC((uint64_t *)(v166 + 208 * v165), (char *)v210);
  char v208 = 1;
  LOWORD(v207) = 32;
  sub_9BD268((uint64_t)&v207, (const void **)v210, (const void **)&v250, (uint64_t)&v214, &v209);
  if (SHIBYTE(v289[7]) < 0) {
    operator delete((void *)v289[5]);
  }
  *(std::string *)&v289[5] = v209;
  *((unsigned char *)&v209.__r_.__value_.__s + 23) = 0;
  v209.__r_.__value_.__s.__data_[0] = 0;
  if (v208 < 0)
  {
    operator delete(v207);
    if ((v213 & 0x80000000) == 0)
    {
LABEL_281:
      if ((v211 & 0x80000000) == 0) {
        goto LABEL_282;
      }
      goto LABEL_288;
    }
  }
  else if ((v213 & 0x80000000) == 0)
  {
    goto LABEL_281;
  }
  operator delete(v212);
  if ((v211 & 0x80000000) == 0)
  {
LABEL_282:
    if ((SBYTE7(v255) & 0x80000000) == 0) {
      goto LABEL_283;
    }
    goto LABEL_289;
  }
LABEL_288:
  operator delete(v210[0]);
  if ((SBYTE7(v255) & 0x80000000) == 0)
  {
LABEL_283:
    if ((SHIBYTE(v251) & 0x80000000) == 0) {
      goto LABEL_284;
    }
LABEL_290:
    operator delete((void *)v250);
    if (!v249) {
      goto LABEL_300;
    }
    goto LABEL_291;
  }
LABEL_289:
  operator delete((void *)v254);
  if (SHIBYTE(v251) < 0) {
    goto LABEL_290;
  }
LABEL_284:
  if (!v249) {
    goto LABEL_300;
  }
LABEL_291:
  char v167 = (void **)v247;
  if (v247)
  {
    uint64_t v168 = v248;
    uint64_t v169 = v247;
    if (v248 != v247)
    {
      do
      {
        if (*((char *)v168 - 1) < 0) {
          operator delete(*(v168 - 3));
        }
        v168 -= 4;
      }
      while (v168 != v167);
      uint64_t v169 = v247;
    }
    v248 = v167;
    operator delete(v169);
  }
  if ((v245 & 0x80000000) == 0) {
    goto LABEL_300;
  }
  operator delete(*((void **)&v242 + 1));
  if (((char)v219 & 0x80000000) == 0)
  {
LABEL_301:
    if (((char)v216 & 0x80000000) == 0) {
      goto LABEL_302;
    }
    goto LABEL_347;
  }
LABEL_346:
  operator delete(v217);
  if (((char)v216 & 0x80000000) == 0)
  {
LABEL_302:
    if (((char)v225 & 0x80000000) == 0) {
      goto LABEL_303;
    }
LABEL_348:
    operator delete(v223);
    if (((char)v222 & 0x80000000) == 0) {
      goto LABEL_304;
    }
    goto LABEL_349;
  }
LABEL_347:
  operator delete(v214);
  if ((char)v225 < 0) {
    goto LABEL_348;
  }
LABEL_303:
  if (((char)v222 & 0x80000000) == 0) {
    goto LABEL_304;
  }
LABEL_349:
  operator delete(v220);
LABEL_304:
  int32x2_t v170 = v241;
  long long v171 = sub_369B60(*(void *)(a1 + 32), *(void *)&v241, 0);
  long long v172 = &v171[-*(int *)v171];
  if (*(unsigned __int16 *)v172 < 5u)
  {
    uint64_t v173 = 0;
  }
  else
  {
    uint64_t v173 = *((unsigned __int16 *)v172 + 2);
    if (*((_WORD *)v172 + 2)) {
      v173 += (uint64_t)&v171[*(unsigned int *)&v171[v173]];
    }
  }
  long long v174 = (int *)(v173
               + 4 * HIDWORD(*(void *)&v170)
               + 4
               + *(unsigned int *)(v173 + 4 * HIDWORD(*(void *)&v170) + 4));
  long long v175 = (unsigned __int16 *)((char *)v174 - *v174);
  if (*v175 >= 0xDu && (uint64_t v176 = v175[6]) != 0) {
    int v177 = *(int *)((char *)v174 + v176);
  }
  else {
    int v177 = -1;
  }
  int v178 = v171[24 * v177
                             + 22
                             + 24 * a3
                             + *((unsigned __int16 *)v172 + 3)
                             + *(unsigned int *)&v171[*((unsigned __int16 *)v172 + 3)]];
  int32x2_t v179 = v241;
  long long v180 = sub_369B60(*(void *)(a1 + 32), *(void *)&v241, 0);
  long long v181 = &v180[-*(int *)v180];
  if (*(unsigned __int16 *)v181 < 5u)
  {
    uint64_t v182 = 0;
  }
  else
  {
    uint64_t v182 = *((unsigned __int16 *)v181 + 2);
    if (*((_WORD *)v181 + 2)) {
      v182 += (uint64_t)&v180[*(unsigned int *)&v180[v182]];
    }
  }
  uint64_t v183 = (int *)(v182
               + 4 * HIDWORD(*(void *)&v179)
               + 4
               + *(unsigned int *)(v182 + 4 * HIDWORD(*(void *)&v179) + 4));
  uint64_t v184 = (unsigned __int16 *)((char *)v183 - *v183);
  if (*v184 >= 0xDu && (uint64_t v185 = v184[6]) != 0) {
    int v186 = *(int *)((char *)v183 + v185);
  }
  else {
    int v186 = -1;
  }
  int v187 = v180[24 * v186
                             + 20
                             + 24 * a3
                             + *((unsigned __int16 *)v181 + 3)
                             + *(unsigned int *)&v180[*((unsigned __int16 *)v181 + 3)]];
  uint64_t v188 = *(void *)(a1 + 32);
  int32x2_t v189 = v241;
  long long v190 = sub_369B60(v188, *(void *)&v241, 0);
  long long v191 = &v190[-*(int *)v190];
  if (*(unsigned __int16 *)v191 < 5u)
  {
    uint64_t v192 = 0;
  }
  else
  {
    uint64_t v192 = *((unsigned __int16 *)v191 + 2);
    if (*((_WORD *)v191 + 2)) {
      v192 += (uint64_t)&v190[*(unsigned int *)&v190[v192]];
    }
  }
  long long v193 = (int *)(v192
               + 4 * HIDWORD(*(void *)&v189)
               + 4
               + *(unsigned int *)(v192 + 4 * HIDWORD(*(void *)&v189) + 4));
  int v194 = (unsigned __int16 *)((char *)v193 - *v193);
  if (*v194 >= 0xDu && (uint64_t v195 = v194[6]) != 0)
  {
    int v196 = *(int *)((char *)v193 + v195);
    unsigned int v197 = *v37 - 2;
    if (v197 > 6) {
      goto LABEL_339;
    }
  }
  else
  {
    int v196 = -1;
    unsigned int v197 = *v37 - 2;
  }
  int v198 = v190[24 * v196
                             + 21
                             + 24 * a3
                             + *((unsigned __int16 *)v191 + 3)
                             + *(unsigned int *)&v190[*((unsigned __int16 *)v191 + 3)]];
  switch(v197)
  {
    case 0u:
      LOBYTE(v268) = v187;
      break;
    case 1u:
    case 6u:
      if (v178 || (v187 == 1 ? (BOOL v199 = v198 == 1) : (BOOL v199 = 0), v199)) {
        HIBYTE(v268) = 1;
      }
      break;
    case 2u:
      LOBYTE(v268) = v198;
      break;
    default:
      break;
  }
LABEL_339:
  uint64_t v200 = (uint64_t)(v37 + 22);
  if (!*((unsigned char *)v37 + 792))
  {
    sub_9C2348(v200, (uint64_t)&v260);
    *((unsigned char *)v37 + 792) = 1;
    unint64_t v201 = (void *)v236;
    if (!(void)v236) {
      goto LABEL_342;
    }
    goto LABEL_341;
  }
  sub_9C6400(v200, (uint64_t)&v260);
  unint64_t v201 = (void *)v236;
  if ((void)v236)
  {
LABEL_341:
    *((void *)&v236 + 1) = v201;
    operator delete(v201);
  }
LABEL_342:
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  return sub_92A428((uint64_t)&v260);
}

void sub_9BAA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v60 = a59;
    if (!a59)
    {
LABEL_3:
      sub_92A428((uint64_t)&STACK[0x288]);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v60 = a59;
    if (!a59) {
      goto LABEL_3;
    }
  }
  operator delete(v60);
  sub_92A428((uint64_t)&STACK[0x288]);
  _Unwind_Resume(a1);
}

void sub_9BACA8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t i = a2[1];
  if (0x8E38E38E38E38E39 * ((i - *a2) >> 4) >= 2)
  {
    uint64_t v6 = a1;
    if (v3 != i)
    {
      uint64_t v7 = (uint64_t *)(a1 + 2368);
      uint64_t v33 = (uint64_t *)(a1 + 2368);
      int v34 = (void **)(a3 + 2200);
      do
      {
        while (1)
        {
          int v8 = *(unsigned int **)(v3 + 8);
          uint64_t v9 = *(unsigned int **)(v3 + 16);
          if (v8 != v9)
          {
            while (v8[272])
            {
              v8 += 274;
              if (v8 == v9)
              {
                int v8 = *(unsigned int **)(v3 + 16);
                break;
              }
            }
          }
          unint64_t v10 = (int *)sub_369F8C(*(void *)(v6 + 32), v8[2] | ((unint64_t)v8[1] << 32), 0, "trip");
          unint64_t v37 = *(void *)((char *)v10 + *(unsigned __int16 *)((char *)v10 - *v10 + 6));
          uint64_t v11 = *(void *)(v6 + 2400);
          uint64_t v35 = (void *)0xFFFFFFFF00000000;
          uint64_t v12 = sub_972C9C(v11, &v37, &v35);
          sub_9382E0(v7, v3, (unint64_t *)&v35);
          uint64_t v14 = v35;
          uint64_t v13 = v36;
          if (v35)
          {
            int v36 = v35;
            operator delete(v35);
          }
          BOOL v15 = v14 != v13;
          uint64_t v16 = *(char **)(a3 + 2208);
          unint64_t v17 = *(void *)(a3 + 2216);
          if ((unint64_t)v16 >= v17) {
            break;
          }
          *(void *)uint64_t v16 = v12;
          v16[8] = v15;
          *(void *)(a3 + 2208) = v16 + 16;
          v3 += 144;
          if (v3 == i) {
            goto LABEL_23;
          }
        }
        uint64_t v18 = v6;
        uint64_t v19 = i;
        long double v20 = (char *)*v34;
        uint64_t v21 = (v16 - (unsigned char *)*v34) >> 4;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v23 = v17 - (void)v20;
        if (v23 >> 3 > v22) {
          unint64_t v22 = v23 >> 3;
        }
        BOOL v24 = (unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0;
        unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
        if (!v24) {
          unint64_t v25 = v22;
        }
        if (v25 >> 60) {
          sub_188D718();
        }
        uint64_t v26 = 16 * v25;
        int v27 = (char *)operator new(16 * v25);
        int v28 = &v27[16 * v21];
        *(void *)int v28 = v12;
        v28[8] = v15;
        char v29 = v28;
        for (uint64_t i = v19; v16 != v20; v29[8] = v31)
        {
          uint64_t v30 = *((void *)v16 - 2);
          v16 -= 16;
          char v31 = v16[8];
          *((void *)v29 - 2) = v30;
          v29 -= 16;
        }
        *(void *)(a3 + 2200) = v29;
        int v32 = v28 + 16;
        *(void *)(a3 + 2208) = v28 + 16;
        *(void *)(a3 + 2216) = &v27[v26];
        uint64_t v6 = v18;
        if (v20) {
          operator delete(v20);
        }
        uint64_t v7 = v33;
        *(void *)(a3 + 2208) = v32;
        v3 += 144;
      }
      while (v3 != i);
    }
LABEL_23:
    sub_9904C0(*(void ***)(v6 + 2408), (unint64_t **)(a3 + 2200));
  }
}

unint64_t sub_9BAEF4(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = sub_369B60(v6, a2, 0);
  int v8 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v8 < 5u)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = *((unsigned __int16 *)v8 + 2);
    if (*((_WORD *)v8 + 2)) {
      v9 += (uint64_t)&v7[*(unsigned int *)&v7[v9]];
    }
  }
  unint64_t v10 = (int *)(v9 + 4 * HIDWORD(a2) + 4 + *(unsigned int *)(v9 + 4 * HIDWORD(a2) + 4));
  uint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 0x1Fu && (uint64_t v12 = v11[15]) != 0) {
    int v13 = *(int *)((char *)v10 + v12);
  }
  else {
    int v13 = -1;
  }
  long long __p = *(void **)&v7[8 * (v13 + a3)
                    + 4
                    + *((unsigned __int16 *)v8 + 8)
                    + *(unsigned int *)&v7[*((unsigned __int16 *)v8 + 8)]];
  sub_49BC10(v6, (unint64_t *)&__p, (char **)&v40);
  uint64_t v43 = 0;
  unint64_t v44 = 0;
  __int16 v42 = 0;
  BOOL v15 = (uint64_t *)v40;
  uint64_t v14 = v41;
  int64_t v16 = (char *)v41 - (unsigned char *)v40;
  if (v41 != v40)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 2);
    if (v17 > 0x1555555555555555) {
      sub_2E00();
    }
    __int16 v42 = operator new(v16);
    uint64_t v43 = v42;
    unint64_t v44 = (char *)v42 + 12 * v17;
    long long __p = &v42;
    do
    {
      sub_3BDEE8((char ***)&__p, v15);
      BOOL v15 = (uint64_t *)((char *)v15 + 12);
    }
    while (v15 != v14);
    uint64_t v14 = (uint64_t *)v40;
  }
  if (v14)
  {
    unint64_t v41 = v14;
    operator delete(v14);
  }
  uint64_t v36 = a1;
  long long __p = 0;
  int v38 = 0;
  uint64_t v39 = 0;
  sub_426D8((uint64_t *)&v42, 0xAAAAAAAAAAAAAAABLL * ((v43 - (unsigned char *)v42) >> 2), 0, 1, &__p, (uint64_t)&v40, 1.0);
  if (__p) {
    operator delete(__p);
  }
  long long __p = 0;
  int v38 = 0;
  uint64_t v39 = 0;
  uint64_t v18 = v41;
  if (v41)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    do
    {
      if ((*(void *)((char *)v40 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20))
      {
        uint64_t v23 = (char *)v42 + 12 * v20;
        if (v19 < v39)
        {
          uint64_t v21 = *(void *)v23;
          *((_DWORD *)v19 + 2) = *((_DWORD *)v23 + 2);
          *(void *)uint64_t v19 = v21;
          unint64_t v22 = v19 + 12;
        }
        else
        {
          BOOL v24 = (char *)__p;
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (unsigned char *)__p) >> 2);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0x1555555555555555) {
            sub_2E00();
          }
          if (0x5555555555555556 * ((v39 - (unsigned char *)__p) >> 2) > v26) {
            unint64_t v26 = 0x5555555555555556 * ((v39 - (unsigned char *)__p) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v39 - (unsigned char *)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v27 = 0x1555555555555555;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27)
          {
            if (v27 > 0x1555555555555555) {
              sub_188D718();
            }
            int v28 = (char *)operator new(12 * v27);
          }
          else
          {
            int v28 = 0;
          }
          uint64_t v29 = *(void *)v23;
          uint64_t v30 = &v28[12 * v25];
          *((_DWORD *)v30 + 2) = *((_DWORD *)v23 + 2);
          *(void *)uint64_t v30 = v29;
          char v31 = v30;
          if (v19 != v24)
          {
            do
            {
              uint64_t v32 = *(void *)(v19 - 12);
              v19 -= 12;
              int v33 = *((_DWORD *)v19 + 2);
              *(void *)(v31 - 12) = v32;
              v31 -= 12;
              *((_DWORD *)v31 + 2) = v33;
            }
            while (v19 != v24);
            uint64_t v19 = (char *)__p;
          }
          unint64_t v22 = v30 + 12;
          long long __p = v31;
          int v38 = v30 + 12;
          uint64_t v39 = &v28[12 * v27];
          if (v19) {
            operator delete(v19);
          }
        }
        int v38 = v22;
        uint64_t v19 = v22;
      }
      ++v20;
    }
    while ((uint64_t *)v20 != v18);
  }
  unint64_t v34 = sub_975814(*(void *)(v36 + 2400), (const void **)&__p);
  if (__p)
  {
    int v38 = __p;
    operator delete(__p);
  }
  if (v40) {
    operator delete(v40);
  }
  if (v42)
  {
    uint64_t v43 = v42;
    operator delete(v42);
  }
  return v34;
}

void sub_9BB250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_9BB2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 792)) {
    goto LABEL_15;
  }
  if (*(_DWORD *)(a3 + 116) != 0x7FFFFFFF) {
    return;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v7 = v5 - 5704;
  if (v5 - 5704 == v6) {
    return;
  }
  uint64_t v8 = v5 - 11264;
  do
  {
    if (*(unsigned char *)(v8 + 648) && sub_BB7C((_DWORD *)v8))
    {
      if (v7 == *(void *)(a2 + 8)) {
        return;
      }
LABEL_11:
      if (*(unsigned char *)(v7 - 4912))
      {
        if (*(unsigned char *)(a3 + 792))
        {
          *(void *)(a3 + 144) = *(void *)(v7 - 5560);
          if (*(unsigned char *)(v7 - 4912))
          {
            *(unsigned char *)(a3 + 745) = *(unsigned char *)(v7 - 4959);
            return;
          }
        }
      }
LABEL_15:
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    v7 -= 5704;
    v8 -= 5704;
  }
  while (v7 != v6);
  uint64_t v7 = v6;
  if (v6 != *(void *)(a2 + 8)) {
    goto LABEL_11;
  }
}

uint64_t sub_9BB400(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 80)) {
    goto LABEL_9;
  }
  if (*(void *)(a2 + 64) == -1) {
    return 0;
  }
  uint64_t v3 = sub_976514(*(void *)(a1 + 2400));
  if (!*(unsigned char *)(a2 + 80))
  {
LABEL_9:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  unint64_t v4 = *(void *)(a2 + 64);
  uint64_t v5 = *(void *)(v3 + 168);
  if (0xBAA6550FFBAA6551 * ((*(void *)(v3 + 176) - v5) >> 3) <= v4) {
    sub_66748();
  }
  int v6 = *(_DWORD *)(*(void *)(sub_6467E8((void *)(v5 + 7560 * v4), 0) + 1072) - 2240);
  if (v6 == 33) {
    return 1;
  }
  else {
    return 2 * (v6 == 34);
  }
}

void *sub_9BB4F8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*a1;
  if (*a1)
  {
    unint64_t v4 = (void *)a1[1];
    uint64_t v5 = (void *)*a1;
    if (v4 != v3)
    {
      do
        unint64_t v4 = sub_9BEAA8(v4 - 18);
      while (v4 != v3);
      uint64_t v5 = (void *)*a1;
    }
    a1[1] = v3;
    operator delete(v5);
  }
  return a1;
}

void sub_9BB564(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v6 = *a2;
  uint64_t v48 = a2[1];
  if (*a2 != v48)
  {
    while (1)
    {
      uint64_t v9 = v6 + 56;
      uint64_t v10 = 32;
      if (a4) {
        uint64_t v10 = 56;
      }
      else {
        uint64_t v9 = v6 + 32;
      }
      uint64_t v11 = *(long long **)(v6 + v10);
      uint64_t v12 = *(long long **)(v9 + 8);
      while (v11 != v12)
      {
        int v15 = *((_DWORD *)v11 + 4);
        BOOL v16 = v15 <= a3;
        BOOL v17 = v15 < a3;
        int v18 = !v16;
        if (!a4) {
          BOOL v17 = v18;
        }
        if (v17)
        {
          unint64_t v20 = *(_OWORD **)(a5 + 8);
          unint64_t v19 = *(void *)(a5 + 16);
          if ((unint64_t)v20 < v19)
          {
            long long v13 = *v11;
            *(_OWORD *)((char *)v20 + 12) = *(long long *)((char *)v11 + 12);
            _OWORD *v20 = v13;
            uint64_t v14 = (char *)v20 + 28;
          }
          else
          {
            uint64_t v21 = *(_OWORD **)a5;
            uint64_t v22 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v20 - *(void *)a5) >> 2);
            unint64_t v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) > 0x924924924924924) {
              sub_2E00();
            }
            unint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v19 - (void)v21) >> 2);
            if (2 * v24 > v23) {
              unint64_t v23 = 2 * v24;
            }
            if (v24 >= 0x492492492492492) {
              unint64_t v25 = 0x924924924924924;
            }
            else {
              unint64_t v25 = v23;
            }
            if (v25)
            {
              if (v25 > 0x924924924924924) {
                sub_188D718();
              }
              unint64_t v26 = (char *)operator new(28 * v25);
            }
            else
            {
              unint64_t v26 = 0;
            }
            long long v27 = *v11;
            int v28 = &v26[28 * v22];
            *(_OWORD *)(v28 + 12) = *(long long *)((char *)v11 + 12);
            *(_OWORD *)int v28 = v27;
            uint64_t v29 = v28;
            if (v20 != v21)
            {
              do
              {
                long long v30 = *(_OWORD *)((char *)v20 - 28);
                *(v29 - 1) = *(v20 - 1);
                *(_OWORD *)((char *)v29 - 28) = v30;
                uint64_t v29 = (_OWORD *)((char *)v29 - 28);
                unint64_t v20 = (_OWORD *)((char *)v20 - 28);
              }
              while (v20 != v21);
              unint64_t v20 = v21;
            }
            char v31 = &v26[28 * v25];
            uint64_t v14 = v28 + 28;
            *(void *)a5 = v29;
            *(void *)(a5 + 8) = v28 + 28;
            *(void *)(a5 + 16) = v31;
            if (v20) {
              operator delete(v20);
            }
          }
          *(void *)(a5 + 8) = v14;
        }
        uint64_t v11 = (long long *)((char *)v11 + 28);
      }
      int v33 = *(_DWORD **)(v6 + 8);
      uint64_t v32 = *(_DWORD **)(v6 + 16);
      if (v33 != v32)
      {
        while (v33[272])
        {
          v33 += 274;
          if (v33 == v32)
          {
            int v33 = *(_DWORD **)(v6 + 16);
            break;
          }
        }
      }
      int v34 = v33[6];
      if (a4)
      {
        if (v34 < a3) {
          goto LABEL_42;
        }
      }
      else if (v34 >= a3)
      {
LABEL_42:
        if (*(_DWORD *)(a1 + 2248)
          && (uint64_t v35 = *(void *)(a1 + 40), (v36 = **(void **)(v35 + 3896)) != 0)
          && (unint64_t v37 = v33[4],
              (v38 = sub_367060(v36, v33[2] | ((unint64_t)v33[1] << 32), v33[3], *(unsigned char *)(v35 + 3904))) != 0)&& (uint64_t v39 = v38[5], 0xCCCCCCCCCCCCCCCDLL * ((v38[6] - v39) >> 2) > v37)&& *(unsigned __int8 *)(v39 + 20 * v37) != 255)
        {
          int v40 = sub_920A00(*(void *)(a1 + 40), v33[2] | ((unint64_t)v33[1] << 32), v33[3], v33[4]);
        }
        else
        {
          int v40 = 0x7FFFFFFF;
        }
        sub_9BD81C((char **)a5);
        uint64_t v41 = *(void *)(a5 + 8);
        *(void *)(v41 - 28) = *(void *)(v33 + 1);
        *(_DWORD *)(v41 - 20) = v33[3];
        *(_DWORD *)(v41 - 16) = v33[4];
        *(void *)(v41 - 12) = v33[6] | ((unint64_t)v33[6] << 32);
        *(_WORD *)(v41 - 4) = 0;
        if (v40 != 0x7FFFFFFF)
        {
          *(_WORD *)(v41 - 4) = 1;
          *(_DWORD *)(v41 - 8) = v40;
        }
      }
      v6 += 144;
      if (v6 == v48)
      {
        uint64_t v43 = *(char **)a5;
        __int16 v42 = *(char **)(a5 + 8);
        goto LABEL_53;
      }
    }
  }
  __int16 v42 = 0;
  uint64_t v43 = 0;
LABEL_53:
  if (v42 - v43 < 3585)
  {
LABEL_57:
    unsigned int v46 = 0;
    unint64_t v44 = 0;
  }
  else
  {
    unint64_t v44 = 0x6DB6DB6DB6DB6DB7 * ((v42 - v43) >> 2);
    while (1)
    {
      uint64_t v45 = operator new(28 * v44, &std::nothrow);
      if (v45) {
        break;
      }
      BOOL v16 = v44 > 1;
      v44 >>= 1;
      if (!v16) {
        goto LABEL_57;
      }
    }
    unsigned int v46 = v45;
  }
  sub_9C764C((uint64_t)v43, v42, 0x6DB6DB6DB6DB6DB7 * ((v42 - v43) >> 2), v46, v44);
  if (v46)
  {
    operator delete(v46);
  }
}

void sub_9BB958(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    operator delete(v2);
    unint64_t v4 = *(void **)v1;
    if (!*(void *)v1) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v4 = *(void **)v1;
    if (!*(void *)v1) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 8) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

void sub_9BB9A8(unsigned int **a1@<X1>, char a2@<W2>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    uint64_t v5 = a3;
    uint64_t v6 = 0;
    char v26 = a2;
    unint64_t v25 = a1[1];
    while (1)
    {
      if ((a2 & 1) == 0 && *((unsigned __int8 *)v4 + 25) - 1 < 2) {
        goto LABEL_5;
      }
      uint64_t v8 = *v4;
      uint64_t v9 = v4[1];
      uint64_t v10 = (uint64_t *)(v4 + 4);
      unsigned int v11 = v4[2];
      unsigned int v12 = v4[3];
      unint64_t v13 = (unint64_t)v5[2];
      if ((unint64_t)v6 >= v13) {
        break;
      }
      uint64_t v7 = *v10;
      *((_DWORD *)v6 + 2) = v4[6];
      *(void *)uint64_t v6 = v7;
      *(void *)(v6 + 12) = v9 | (v8 << 32);
      *((_DWORD *)v6 + 5) = v11;
      *((_DWORD *)v6 + 6) = v12;
      v6 += 28;
LABEL_4:
      v5[1] = v6;
LABEL_5:
      v4 += 7;
      if (v4 == v3) {
        return;
      }
    }
    uint64_t v14 = (char *)*v5;
    uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((v6 - (unsigned char *)*v5) >> 2);
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) > 0x924924924924924) {
      sub_2E00();
    }
    unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - (void)v14) >> 2);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x492492492492492) {
      unint64_t v18 = 0x924924924924924;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18 > 0x924924924924924) {
      sub_188D718();
    }
    unint64_t v19 = (char *)operator new(28 * v18);
    unint64_t v20 = &v19[28 * v15];
    uint64_t v21 = *v10;
    *((_DWORD *)v20 + 2) = v4[6];
    *(void *)unint64_t v20 = v21;
    *(void *)(v20 + 12) = v9 | (v8 << 32);
    *((_DWORD *)v20 + 5) = v11;
    *((_DWORD *)v20 + 6) = v12;
    if (v6 == v14)
    {
      uint64_t v5 = a3;
      uint64_t v6 = v20 + 28;
      *a3 = v20;
      a3[1] = v20 + 28;
      a3[2] = &v19[28 * v18];
      if (!v14) {
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v22 = &v19[28 * v15];
      uint64_t v5 = a3;
      do
      {
        long long v23 = *(_OWORD *)(v6 - 28);
        unint64_t v24 = v22 - 28;
        *((_OWORD *)v22 - 1) = *((_OWORD *)v6 - 1);
        *(_OWORD *)(v22 - 28) = v23;
        v6 -= 28;
        v22 -= 28;
      }
      while (v6 != v14);
      uint64_t v6 = v20 + 28;
      *a3 = v24;
      a3[1] = v20 + 28;
      a3[2] = &v19[28 * v18];
      if (!v14) {
        goto LABEL_21;
      }
    }
    operator delete(v14);
LABEL_21:
    a2 = v26;
    uint64_t v3 = v25;
    goto LABEL_4;
  }
}

void sub_9BBBD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12)
  {
    *(void *)(a12 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_9BBC04(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *a1;
  uint64_t v25 = a1[1];
  if (*a1 == v25)
  {
    unint64_t v4 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v6 = *(long long **)(v3 + 80);
      uint64_t v5 = *(long long **)(v3 + 88);
      uint64_t v26 = v3;
      if (v6 != v5)
      {
        uint64_t v7 = v4;
        do
        {
          unint64_t v9 = a2[2];
          if ((unint64_t)v7 < v9)
          {
            long long v8 = *v6;
            *(_OWORD *)((char *)v7 + 12) = *(long long *)((char *)v6 + 12);
            *uint64_t v7 = v8;
            unint64_t v4 = (char *)v7 + 28;
          }
          else
          {
            uint64_t v10 = (_OWORD *)*a2;
            uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v7 - *a2) >> 2);
            unint64_t v12 = v11 + 1;
            if ((unint64_t)(v11 + 1) > 0x924924924924924) {
              sub_2E00();
            }
            unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - (void)v10) >> 2);
            if (2 * v13 > v12) {
              unint64_t v12 = 2 * v13;
            }
            if (v13 >= 0x492492492492492) {
              unint64_t v14 = 0x924924924924924;
            }
            else {
              unint64_t v14 = v12;
            }
            if (v14)
            {
              if (v14 > 0x924924924924924) {
                sub_188D718();
              }
              uint64_t v15 = (char *)operator new(28 * v14);
            }
            else
            {
              uint64_t v15 = 0;
            }
            long long v16 = *v6;
            unint64_t v17 = &v15[28 * v11];
            *(_OWORD *)(v17 + 12) = *(long long *)((char *)v6 + 12);
            *(_OWORD *)unint64_t v17 = v16;
            unint64_t v18 = v17;
            if (v7 != v10)
            {
              do
              {
                long long v19 = *(_OWORD *)((char *)v7 - 28);
                *(v18 - 1) = *(v7 - 1);
                *(_OWORD *)((char *)v18 - 28) = v19;
                unint64_t v18 = (_OWORD *)((char *)v18 - 28);
                uint64_t v7 = (_OWORD *)((char *)v7 - 28);
              }
              while (v7 != v10);
              uint64_t v7 = v10;
            }
            unint64_t v4 = v17 + 28;
            *a2 = (uint64_t)v18;
            a2[1] = (uint64_t)(v17 + 28);
            a2[2] = (uint64_t)&v15[28 * v14];
            if (v7) {
              operator delete(v7);
            }
          }
          a2[1] = (uint64_t)v4;
          uint64_t v6 = (long long *)((char *)v6 + 28);
          uint64_t v7 = v4;
        }
        while (v6 != v5);
      }
      uint64_t v3 = v26 + 144;
    }
    while (v26 + 144 != v25);
    uint64_t v20 = *a2;
  }
  if ((uint64_t)&v4[-v20] < 3585)
  {
LABEL_30:
    unint64_t v24 = 0;
    unint64_t v21 = 0;
  }
  else
  {
    unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v4[-v20] >> 2);
    while (1)
    {
      uint64_t v22 = operator new(28 * v21, &std::nothrow);
      if (v22) {
        break;
      }
      BOOL v23 = v21 > 1;
      v21 >>= 1;
      if (!v23) {
        goto LABEL_30;
      }
    }
    unint64_t v24 = v22;
  }
  sub_9C6984(v20, v4, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v4[-v20] >> 2), v24, v21);
  if (v24)
  {
    operator delete(v24);
  }
}

void sub_9BBE98(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    operator delete(v2);
    unint64_t v4 = *(void **)v1;
    if (!*(void *)v1) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v4 = *(void **)v1;
    if (!*(void *)v1) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 8) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

uint64_t sub_9BBEE4(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, int a7)
{
  if (!*(unsigned char *)(a1 + 7))
  {
    long long __p = 0;
    unint64_t v64 = 0;
    int v65 = 0;
    uint64_t v22 = *(_DWORD **)a5;
    unint64_t v21 = *(_DWORD **)(a5 + 8);
    uint64_t v23 = (uint64_t)v21 - *(void *)a5;
    uint64_t v24 = 0x6DB6DB6DB6DB6DB7 * (v23 >> 2);
    unint64_t v25 = v24 + 1;
    if (v24 == -1)
    {
      uint64_t v26 = 0;
      long long v27 = 0;
      int v28 = (int *)(a2 + 6);
    }
    else
    {
      if (v25 >> 62) {
        sub_2E00();
      }
      uint64_t v29 = operator new(4 * v25);
      long long v30 = v29;
      long long v27 = &v29[v25];
      long long __p = v29;
      unint64_t v64 = (char *)v29;
      int v65 = v27;
      int v28 = (int *)(a2 + 6);
      if (v23 >= -27)
      {
        *uint64_t v29 = *v28;
        char v31 = (char *)(v29 + 1);
LABEL_27:
        unint64_t v64 = v31;
        if (v22 != v21)
        {
          do
          {
            LODWORD(v61[0]) = *v22;
            char v31 = sub_935E5C(&__p, v31, v61) + 4;
            v22 += 7;
          }
          while (v22 != v21);
          long long v30 = (int *)__p;
          char v31 = v64;
        }
        unint64_t v35 = 126 - 2 * __clz((v31 - (char *)v30) >> 2);
        if (v31 == (char *)v30) {
          uint64_t v36 = 0;
        }
        else {
          uint64_t v36 = v35;
        }
        sub_97CC7C(v30, v31, (uint64_t)v61, v36, 1);
        unint64_t v37 = v64;
        if (__p != v64)
        {
          int v38 = (char *)__p + 4;
          while (v38 != v64)
          {
            int v39 = *((_DWORD *)v38 - 1);
            int v40 = *(_DWORD *)v38;
            v38 += 4;
            if (v39 == v40)
            {
              uint64_t v41 = v38 - 8;
              while (v38 != v37)
              {
                int v42 = v39;
                int v39 = *(_DWORD *)v38;
                if (v42 != *(_DWORD *)v38)
                {
                  *((_DWORD *)v41 + 1) = v39;
                  v41 += 4;
                }
                v38 += 4;
              }
              uint64_t v48 = v41 + 4;
              int64_t v49 = v37 - (v41 + 4);
              if (v37 == v41 + 4) {
                break;
              }
              if (v37 != &v48[v49]) {
                memmove(v41 + 4, &v48[v49], 0);
              }
              unint64_t v64 = v48;
              v68[0] = 0x8000000080000000;
              if (a6) {
                goto LABEL_50;
              }
              goto LABEL_46;
            }
          }
        }
        v68[0] = 0x8000000080000000;
        if (a6)
        {
LABEL_50:
          v68[0] = sub_BC28((uint64_t)&__p, 9000, 10, 1, 1);
        }
        else
        {
LABEL_46:
          v68[0] = sub_BC28((uint64_t)&__p, 2147483646, 10, 1, 1);
          if (!sub_BB7C(v68))
          {
            uint64_t v43 = *(void *)(a1 + 32);
            unsigned int v44 = a2[12];
            uint64_t v45 = (int *)sub_369F8C(v43, a2[2] | ((unint64_t)a2[1] << 32), 0, "trip");
            unsigned int v46 = (unsigned int *)((char *)v45 + *(unsigned __int16 *)((char *)v45 - *v45 + 18));
            int v47 = sub_920D68(*(unsigned int *)((char *)&v46[3 * v44 + 1] + *v46));
            sub_BB64(v61, 10 * v47);
            v68[0] = v61[0];
          }
        }
        if (__p)
        {
          unint64_t v64 = (char *)__p;
          operator delete(__p);
        }
        return v68[0];
      }
      uint64_t v26 = v29;
    }
    uint64_t v32 = (char *)v27 - v26;
    uint64_t v33 = v32 >> 1;
    if ((unint64_t)(v32 >> 1) <= 1) {
      uint64_t v33 = 1;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v33;
    }
    if (v34 >> 62) {
      sub_188D718();
    }
    long long v30 = (int *)operator new(4 * v34);
    *long long v30 = *v28;
    char v31 = (char *)(v30 + 1);
    long long __p = v30;
    unint64_t v64 = (char *)(v30 + 1);
    int v65 = &v30[v34];
    if (v26)
    {
      operator delete(v26);
      uint64_t v22 = *(_DWORD **)a5;
      unint64_t v21 = *(_DWORD **)(a5 + 8);
    }
    goto LABEL_27;
  }
  uint64_t v10 = (unsigned char *)(a4 + 60);
  if (!a7) {
    uint64_t v10 = (unsigned char *)(a3 + 140);
  }
  if (*v10)
  {
    uint64_t v11 = (void *)(a3 + 104);
    if (a7) {
      uint64_t v11 = (void *)(a4 + 24);
    }
    if (*v11 != v11[1])
    {
      unint64_t v12 = sub_BB5C(v68, *(_DWORD *)(*v11 + 8), *(_DWORD *)(*v11 + 12));
      if (sub_BB7C(v12)) {
        return v68[0];
      }
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)&__p);
        unint64_t v13 = sub_188FC78(&__p, (uint64_t)"Invalid service frequency found: ", 33);
        unint64_t v14 = sub_BBBC(v13);
        sub_188FC78(v14, (uint64_t)" (trip_muid: ", 13);
        uint64_t v15 = *(void *)(a1 + 32);
        long long v16 = (int *)sub_369F8C(v15, a2[2] | ((unint64_t)a2[1] << 32), 0, "trip");
        unint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
        if (*v17 >= 5u && (uint64_t v18 = v17[2]) != 0) {
          uint64_t v19 = *(void *)((char *)v16 + v18);
        }
        else {
          uint64_t v19 = 0;
        }
        int64x2_t v50 = sub_398020(v15, 0);
        int64_t v51 = &v50[-*(int *)v50];
        if (*(unsigned __int16 *)v51 >= 0xBu)
        {
          uint64_t v52 = *((unsigned __int16 *)v51 + 5);
          if (v52)
          {
            if (v50[v52]) {
              nullsub_1(v19);
            }
          }
        }
        double v53 = (void *)std::ostream::operator<<();
        sub_188FC78(v53, (uint64_t)")", 1);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v61, 1u);
        if (v62 < 0) {
          operator delete(v61[0]);
        }
        if (v67 < 0) {
          operator delete(v66);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
    }
  }
  if (a6)
  {
    uint64_t v54 = 0x7FFFFFFF7FFFFFFFLL;
  }
  else
  {
    uint64_t v55 = *(void *)(a1 + 32);
    unsigned int v56 = a2[12];
    int64_t v57 = (int *)sub_369F8C(v55, a2[2] | ((unint64_t)a2[1] << 32), 0, "trip");
    double v58 = (unsigned int *)((char *)v57 + *(unsigned __int16 *)((char *)v57 - *v57 + 18));
    int v59 = sub_920D68(*(unsigned int *)((char *)&v58[3 * v56 + 1] + *v58));
    sub_BB64(&__p, 10 * v59);
    uint64_t v54 = (uint64_t)__p;
  }
  v68[0] = v54;
  return v68[0];
}

void sub_9BC49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_9BC4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_9BC514(uint64_t a1@<X0>, unint64_t *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v9 = (int *)sub_9BEB94(a1, *a2, a3, a4);
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 < 5u) {
    goto LABEL_19;
  }
  uint64_t v11 = v10[2];
  if (!v11) {
    goto LABEL_19;
  }
  unsigned int v12 = *(unsigned __int16 *)((char *)v9 + v11);
  if (v12 == 0xFFFF) {
    goto LABEL_19;
  }
  unint64_t v13 = *a2;
  unint64_t v14 = sub_369B60(a1, v13, 0);
  uint64_t v15 = &v14[-*(int *)v14];
  if (*(unsigned __int16 *)v15 < 5u)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = *((unsigned __int16 *)v15 + 2);
    if (*((_WORD *)v15 + 2)) {
      v16 += (uint64_t)&v14[*(unsigned int *)&v14[v16]];
    }
  }
  unint64_t v17 = (int *)(v16 + 4 * HIDWORD(v13) + 4 + *(unsigned int *)(v16 + 4 * HIDWORD(v13) + 4));
  uint64_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
  if (*v18 >= 0xDu && (uint64_t v19 = v18[6]) != 0) {
    int v20 = *(int *)((char *)v17 + v19);
  }
  else {
    int v20 = -1;
  }
  unint64_t v21 = (int *)sub_498D5C(a1, *(void *)&v14[24 * (v20 + a3)+ 4+ *((unsigned __int16 *)v15 + 3)+ *(unsigned int *)&v14[*((unsigned __int16 *)v15 + 3)]], 0, "stop");
  uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
  if (*v22 >= 0x35u
    && (uint64_t v23 = v22[26]) != 0
    && (uint64_t v24 = (unsigned int *)((char *)v21 + v23 + *(unsigned int *)((char *)v21 + v23)), *v24 > v12))
  {
    unint64_t v25 = (int *)((char *)&v24[v12 + 1] + v24[v12 + 1]);
    sub_4A0694(v25, a5);
  }
  else
  {
LABEL_19:
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    *(unsigned char *)(a5 + 24) = 2;
    *(void *)(a5 + 32) = sub_1133328();
    *(void *)(a5 + 40) = 0;
    *(void *)(a5 + 48) = 0;
    *(void *)(a5 + 56) = 0;
  }
}

void sub_9BC6C4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (*(unsigned char *)(a4 + 176) == 1) {
    sub_9BD4FC(v8, a2, a3, (uint64_t)&v17);
  }
  else {
    sub_9BD644(v8, a2, a3, (uint64_t)&v17);
  }
  int v10 = v23;
  if (!v23) {
    goto LABEL_15;
  }
  if (v22)
  {
    uint64_t v11 = *(unsigned __int8 *)(a4 + 23);
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(a4 + 8);
    }
    if (!v11) {
      goto LABEL_15;
    }
    uint64_t v12 = *(unsigned __int8 *)(a4 + 55);
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a4 + 40);
    }
    if (!v12)
    {
LABEL_15:
      *(_OWORD *)(a5 + 32) = 0u;
      *(_OWORD *)(a5 + 48) = 0u;
      *(_OWORD *)(a5 + 64) = 0u;
      *(_OWORD *)(a5 + 80) = 0u;
      *(_OWORD *)(a5 + 96) = 0u;
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
      *(_DWORD *)(a5 + 32) = -1;
      *(_DWORD *)(a5 + 40) = -1;
      *(_DWORD *)(a5 + 43) = -1;
      *(void *)(a5 + 47) = 0;
      *(void *)(a5 + 55) = 0;
      *(void *)(a5 + 63) = 0;
      *(_WORD *)(a5 + 71) = 0;
      *(void *)(a5 + 80) = 0;
      *(void *)(a5 + 88) = 0;
      *(void *)(a5 + 96) = 0;
      *(unsigned char *)(a5 + 104) = 0;
LABEL_16:
      if (!v10) {
        return;
      }
      goto LABEL_17;
    }
  }
  sub_966D38((uint64_t)&v17, 0, a1 + 1784, a5, v9);
  if (!v23)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (v22)
  {
    std::string::operator=((std::string *)(a5 + 8), (const std::string *)a4);
    int v10 = v23;
    goto LABEL_16;
  }
LABEL_17:
  unint64_t v13 = (void **)__p;
  if (__p)
  {
    unint64_t v14 = v21;
    uint64_t v15 = __p;
    if (v21 != __p)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 4;
      }
      while (v14 != v13);
      uint64_t v15 = __p;
    }
    unint64_t v21 = v13;
    operator delete(v15);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
}

void sub_9BC8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_9BC8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_4D9814(v9);
  sub_9BD78C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_9BC8DC(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = *a1;
  __s1 = (void *)vrev64_s32(*(int32x2_t *)(a2 + 4));
  sub_90BD1C(v12, (uint64_t)&__s1, *(_DWORD *)(a2 + 16), (uint64_t)&v71);
  sub_9973DC((uint64_t)&v71, a5, (uint64_t)&v76);
  unint64_t v13 = (void **)__p;
  if (__p)
  {
    unint64_t v14 = v75;
    uint64_t v15 = __p;
    if (v75 != __p)
    {
      do
      {
        if (*((char *)v14 - 1) < 0) {
          operator delete(*(v14 - 3));
        }
        v14 -= 4;
      }
      while (v14 != v13);
      uint64_t v15 = __p;
    }
    uint64_t v75 = v13;
    operator delete(v15);
  }
  if (v73 < 0)
  {
    operator delete(v71);
    uint64_t v17 = v78;
    if ((v78 & 0x80u) != 0) {
      uint64_t v17 = v77;
    }
    if (!v17) {
      goto LABEL_61;
    }
  }
  else
  {
    uint64_t v16 = v78;
    if ((v78 & 0x80u) != 0) {
      uint64_t v16 = v77;
    }
    if (!v16) {
      goto LABEL_61;
    }
  }
  uint64_t v18 = v81;
  if ((v81 & 0x80u) != 0) {
    uint64_t v18 = v80;
  }
  if (!v18)
  {
LABEL_61:
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    *(void *)(a6 + 16) = 0;
    goto LABEL_125;
  }
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  uint64_t v59 = a6;
  *(void *)(a6 + 8) = sub_9C2F50((void **)a6, (uint64_t)&v76);
  *(_OWORD *)unint64_t v68 = 0u;
  *(_OWORD *)BOOL v69 = 0u;
  int v70 = 1065353216;
  uint64_t v19 = a4[1];
  if (v19 != *a4)
  {
    uint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((v19 - *a4) >> 2);
    while (1)
    {
      if (*(_DWORD *)(a2 + 24) - *(_DWORD *)(v19 - 12) > 900) {
        goto LABEL_62;
      }
      uint64_t v21 = *a1;
      int v60 = *(_DWORD *)(v19 - 24);
      int v61 = *(_DWORD *)(v19 - 28);
      sub_90BD1C(v21, (uint64_t)&v60, *(_DWORD *)(v19 - 16), (uint64_t)&v71);
      sub_9973DC((uint64_t)&v71, a5, (uint64_t)&__s1);
      char v22 = (void **)__p;
      if (__p)
      {
        unsigned __int8 v23 = v75;
        uint64_t v24 = __p;
        if (v75 != __p)
        {
          do
          {
            if (*((char *)v23 - 1) < 0) {
              operator delete(*(v23 - 3));
            }
            v23 -= 4;
          }
          while (v23 != v22);
          uint64_t v24 = __p;
        }
        uint64_t v75 = v22;
        operator delete(v24);
      }
      if (v73 < 0) {
        operator delete(v71);
      }
      --v20;
      uint64_t v25 = v64;
      size_t v26 = (v64 & 0x80u) == 0 ? v64 : __n;
      if (!v26) {
        break;
      }
      uint64_t v27 = v67;
      if ((v67 & 0x80u) != 0) {
        uint64_t v27 = v66;
      }
      if (!v27) {
        break;
      }
      uint64_t v28 = v78;
      if ((v78 & 0x80u) != 0) {
        uint64_t v28 = v77;
      }
      if (v26 == v28)
      {
        if ((v78 & 0x80u) == 0) {
          uint64_t v29 = (void **)&v76;
        }
        else {
          uint64_t v29 = v76;
        }
        if ((v64 & 0x80) != 0)
        {
          if (!memcmp(__s1, v29, __n)) {
            break;
          }
        }
        else
        {
          if (!v64) {
            break;
          }
          p_s1 = &__s1;
          while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v29)
          {
            p_s1 = (void **)((char *)p_s1 + 1);
            uint64_t v29 = (void **)((char *)v29 + 1);
            if (!--v25) {
              goto LABEL_55;
            }
          }
        }
      }
      unsigned int v71 = &__s1;
      char v31 = sub_9C3250((uint64_t)v68, (uint64_t)&__s1, (uint64_t)&unk_20F06E0, (long long **)&v71);
      int v32 = *((_DWORD *)v31 + 18);
      *((_DWORD *)v31 + 18) = v32 + 1;
      if (v32) {
        break;
      }
      v31[10] = v20;
      if (((char)v67 & 0x80000000) == 0)
      {
LABEL_56:
        if ((char)v64 < 0) {
          goto LABEL_60;
        }
        goto LABEL_22;
      }
LABEL_59:
      operator delete(v65);
      if ((char)v64 < 0) {
LABEL_60:
      }
        operator delete(__s1);
LABEL_22:
      v19 -= 28;
      if (v19 == *a4) {
        goto LABEL_62;
      }
    }
LABEL_55:
    if (((char)v67 & 0x80000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_59;
  }
LABEL_62:
  uint64_t v33 = a3[1] - *a3;
  if (v33)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0x6DB6DB6DB6DB6DB7 * (v33 >> 2);
    do
    {
      if (*(_DWORD *)(*a3 + 28 * v34 + 16) - *(_DWORD *)(a2 + 24) > 900) {
        break;
      }
      uint64_t v36 = (int *)(*a3 + 28 * v34);
      uint64_t v37 = *a1;
      int v60 = v36[1];
      int v61 = *v36;
      sub_90BD1C(v37, (uint64_t)&v60, v36[3], (uint64_t)&v71);
      sub_9973DC((uint64_t)&v71, a5, (uint64_t)&__s1);
      int v38 = (void **)__p;
      if (__p)
      {
        int v39 = v75;
        int v40 = __p;
        if (v75 != __p)
        {
          do
          {
            if (*((char *)v39 - 1) < 0) {
              operator delete(*(v39 - 3));
            }
            v39 -= 4;
          }
          while (v39 != v38);
          int v40 = __p;
        }
        uint64_t v75 = v38;
        operator delete(v40);
      }
      if (v73 < 0)
      {
        operator delete(v71);
        uint64_t v41 = v64;
        size_t v42 = __n;
        if ((v64 & 0x80u) == 0) {
          size_t v43 = v64;
        }
        else {
          size_t v43 = __n;
        }
        if (!v43) {
          goto LABEL_101;
        }
      }
      else
      {
        uint64_t v41 = v64;
        size_t v42 = __n;
        if ((v64 & 0x80u) == 0) {
          size_t v43 = v64;
        }
        else {
          size_t v43 = __n;
        }
        if (!v43) {
          goto LABEL_101;
        }
      }
      uint64_t v44 = v67;
      if ((v67 & 0x80u) != 0) {
        uint64_t v44 = v66;
      }
      if (!v44) {
        goto LABEL_101;
      }
      uint64_t v45 = v78;
      if ((v78 & 0x80u) != 0) {
        uint64_t v45 = v77;
      }
      if (v43 == v45)
      {
        if ((v78 & 0x80u) == 0) {
          unsigned int v46 = (void **)&v76;
        }
        else {
          unsigned int v46 = v76;
        }
        if ((v41 & 0x80) != 0)
        {
          if (!memcmp(__s1, v46, v42)) {
            goto LABEL_101;
          }
        }
        else
        {
          if (!v41) {
            goto LABEL_101;
          }
          int v47 = &__s1;
          while (*(unsigned __int8 *)v47 == *(unsigned __int8 *)v46)
          {
            int v47 = (void **)((char *)v47 + 1);
            unsigned int v46 = (void **)((char *)v46 + 1);
            if (!--v41) {
              goto LABEL_101;
            }
          }
        }
      }
      unsigned int v71 = &__s1;
      uint64_t v48 = sub_9C3250((uint64_t)v68, (uint64_t)&__s1, (uint64_t)&unk_20F06E0, (long long **)&v71);
      int v49 = *((_DWORD *)v48 + 18);
      *((_DWORD *)v48 + 18) = v49 + 1;
      if (v49)
      {
LABEL_101:
        if (((char)v67 & 0x80000000) == 0) {
          goto LABEL_102;
        }
        goto LABEL_105;
      }
      v48[10] = v34 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a4[1] - *a4) >> 2);
      if (((char)v67 & 0x80000000) == 0)
      {
LABEL_102:
        if ((char)v64 < 0) {
          goto LABEL_106;
        }
        goto LABEL_64;
      }
LABEL_105:
      operator delete(v65);
      if ((char)v64 < 0) {
LABEL_106:
      }
        operator delete(__s1);
LABEL_64:
      ++v34;
    }
    while (v34 != v35);
  }
  if (v69[1])
  {
    sub_9C37F4((char **)&v71, (uint64_t *)v69[0], 0);
    unint64_t v50 = 126 - 2 * __clz(0x8E38E38E38E38E39 * ((v72 - (unsigned char *)v71) >> 3));
    uint64_t v51 = v72 == v71 ? 0 : v50;
    uint64_t v52 = v59;
    sub_9C3A7C((unint64_t)v71, (long long *)v72, (uint64_t)&__s1, v51, 1);
    sub_9C2CBC(v52, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v52 + 8) - *(void *)v52) >> 3)- 0x71C71C71C71C71C7 * ((v72 - (unsigned char *)v71) >> 3));
    sub_9C5A48((long long *)v71, (long long *)v72, (__n128 **)v52, *(void *)(v52 + 8));
    double v53 = (long long *)v71;
    if (v71)
    {
      uint64_t v54 = v72;
      uint64_t v55 = v71;
      if (v72 == v71)
      {
LABEL_121:
        int32x2_t v72 = (char *)v53;
        operator delete(v55);
        goto LABEL_122;
      }
      while (1)
      {
        if (*(v54 - 17) < 0)
        {
          operator delete(*((void **)v54 - 5));
          if (*(v54 - 49) < 0) {
LABEL_119:
          }
            operator delete(*((void **)v54 - 9));
        }
        else if (*(v54 - 49) < 0)
        {
          goto LABEL_119;
        }
        v54 -= 72;
        if (v54 == (char *)v53)
        {
          uint64_t v55 = v71;
          goto LABEL_121;
        }
      }
    }
  }
LABEL_122:
  unsigned int v56 = (void **)v69[0];
  if (v69[0])
  {
    do
    {
      double v58 = (void **)*v56;
      if (*((char *)v56 + 71) < 0)
      {
        operator delete(v56[6]);
        if (*((char *)v56 + 39) < 0) {
LABEL_133:
        }
          operator delete(v56[2]);
      }
      else if (*((char *)v56 + 39) < 0)
      {
        goto LABEL_133;
      }
      operator delete(v56);
      unsigned int v56 = v58;
    }
    while (v58);
  }
  int64_t v57 = v68[0];
  v68[0] = 0;
  if (v57) {
    operator delete(v57);
  }
LABEL_125:
  if (((char)v81 & 0x80000000) == 0)
  {
    if (((char)v78 & 0x80000000) == 0) {
      return;
    }
LABEL_135:
    operator delete(v76);
    return;
  }
  operator delete(v79);
  if ((char)v78 < 0) {
    goto LABEL_135;
  }
}

void sub_9BCFF0(_Unwind_Exception *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  sub_9C2E38((void **)va1);
  sub_9C2EC8((uint64_t)va);
  sub_8E4FE0(a3);
  sub_4A0638(v11 - 144);
  _Unwind_Resume(a1);
}

__n128 sub_9BD088@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = sub_369B60(a1, *(void *)a2, 0);
  uint64_t v7 = &v5[-*(int *)v5];
  unsigned int v8 = *(unsigned __int16 *)v7;
  if (v8 < 5)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = *((unsigned __int16 *)v7 + 2);
    if (*((_WORD *)v7 + 2)) {
      v9 += (uint64_t)&v5[*(unsigned int *)&v5[v9]];
    }
  }
  uint64_t v10 = v9 + 4 * *(unsigned int *)(a2 + 4);
  uint64_t v11 = (int *)(v10 + 4 + *(unsigned int *)(v10 + 4));
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 < 0x19u || (uint64_t v13 = v12[12]) == 0 || (v14 = *(unsigned int *)((char *)v11 + v13), v14 == -1))
  {
    result.n128_u64[0] = 0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    return result;
  }
  if (v8 < 0xF)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = *((unsigned __int16 *)v7 + 7);
    if (v15) {
      v15 += (uint64_t)&v5[*(unsigned int *)&v5[v15]];
    }
  }
  uint64_t v16 = (int *)(v15 + 4 * v14 + 4 + *(unsigned int *)(v15 + 4 * v14 + 4));
  uint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
  unsigned int v18 = *v17;
  if (v18 < 7)
  {
    unsigned int v19 = 0;
    uint64_t v20 = 0xFFFFFFLL;
    if (v18 < 5) {
      goto LABEL_24;
    }
    uint64_t v21 = v17[2];
    if (!v21) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
  if (v17[3])
  {
    unsigned int v19 = *(int *)((char *)v16 + v17[3]);
    if (v18 >= 9) {
      goto LABEL_16;
    }
  }
  else
  {
    unsigned int v19 = 0;
    if (v18 >= 9)
    {
LABEL_16:
      if (v17[4])
      {
        uint64_t v20 = *(unsigned int *)((char *)v16 + v17[4]);
        uint64_t v21 = v17[2];
        if (!v21) {
          goto LABEL_24;
        }
      }
      else
      {
        uint64_t v20 = 0xFFFFFFLL;
        uint64_t v21 = v17[2];
        if (!v21) {
          goto LABEL_24;
        }
      }
      goto LABEL_21;
    }
  }
  uint64_t v20 = 0xFFFFFFLL;
  uint64_t v21 = v17[2];
  if (!v21)
  {
LABEL_24:
    char v22 = 0;
    goto LABEL_25;
  }
LABEL_21:
  char v22 = (int *)((char *)v16 + v21 + *(unsigned int *)((char *)v16 + v21));
LABEL_25:
  sub_4A0694(v22, (uint64_t)&v26);
  uint64_t v23 = *(void *)v27;
  *(void *)(a3 + 8) = v26;
  *(void *)(a3 + 16) = v23;
  *(void *)(a3 + 23) = *(void *)&v27[7];
  LOBYTE(v23) = v28;
  __n128 result = v29;
  uint64_t v24 = v31;
  long long v25 = v30;
  *(unsigned char *)(a3 + 72) = 1;
  *(void *)a3 = v19 | (unint64_t)(v20 << 32);
  *(unsigned char *)(a3 + 31) = v23;
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v25;
  *(void *)(a3 + 64) = v24;
  return result;
}

void sub_9BD268(uint64_t a1@<X0>, const void **a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  sub_289800(a1, a3, a4, &v29);
  size_t v8 = *((unsigned __int8 *)a2 + 23);
  char v9 = v8;
  size_t v10 = (size_t)a2[1];
  if ((v8 & 0x80u) == 0) {
    uint64_t v11 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v11 = a2[1];
  }
  if (!v11) {
    goto LABEL_10;
  }
  std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v29.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_4200(__p, *(void **)a1, *(void *)(a1 + 8));
      size_t v8 = *((unsigned __int8 *)a2 + 23);
      size_t v10 = (size_t)a2[1];
      char v9 = *((unsigned char *)a2 + 23);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a1;
      uint64_t v28 = *(void *)(a1 + 16);
    }
  }
  else
  {
LABEL_10:
    HIBYTE(v28) = 0;
    LOBYTE(__p[0]) = 0;
  }
  int v13 = v9;
  if (v9 >= 0) {
    size_t v14 = v8;
  }
  else {
    size_t v14 = v10;
  }
  int v15 = SHIBYTE(v28);
  if (v28 >= 0) {
    size_t v16 = HIBYTE(v28);
  }
  else {
    size_t v16 = (size_t)__p[1];
  }
  unint64_t v17 = v16 + v14;
  if (v16 + v14 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v17 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v16 + v14;
    if (!v14) {
      goto LABEL_24;
    }
    goto LABEL_20;
  }
  uint64_t v24 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v17 | 7) != 0x17) {
    uint64_t v24 = v17 | 7;
  }
  uint64_t v25 = v24 + 1;
  p_dst = (std::string *)operator new(v24 + 1);
  __dst.__r_.__value_.__l.__size_ = v16 + v14;
  __dst.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v14)
  {
LABEL_20:
    if (v13 >= 0) {
      unsigned int v19 = a2;
    }
    else {
      unsigned int v19 = *a2;
    }
    memmove(p_dst, v19, v14);
  }
LABEL_24:
  if (v16)
  {
    if (v15 >= 0) {
      uint64_t v20 = __p;
    }
    else {
      uint64_t v20 = (void **)__p[0];
    }
    memmove((char *)p_dst + v14, v20, v16);
  }
  p_dst->__r_.__value_.__s.__data_[v14 + v16] = 0;
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v21 = &v29;
  }
  else {
    uint64_t v21 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v22 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v22 = v29.__r_.__value_.__l.__size_;
  }
  uint64_t v23 = std::string::append(&__dst, (const std::string::value_type *)v21, v22);
  *a5 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28) & 0x80000000) == 0)
    {
LABEL_37:
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_45:
      operator delete(v29.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_45;
  }
}

void sub_9BD488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if ((a27 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_9BD4FC(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (int *)sub_498D5C(a1, a2, 0, "stop");
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 0x47u && (uint64_t v8 = v7[35]) != 0) {
    char v9 = (char **)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
  }
  else {
    char v9 = 0;
  }
  sub_9BF304(v9, (void (*)(void **__return_ptr, char *))sub_9BF3A8, (uint64_t)&__p);
  sub_9BF11C((uint64_t *)&__p, a3, a4);
  size_t v10 = (char *)__p;
  if (__p)
  {
    uint64_t v11 = v17;
    uint64_t v12 = __p;
    if (v17 != __p)
    {
      do
      {
        uint64_t v13 = *((void *)v11 - 6);
        if (v13)
        {
          uint64_t v14 = *((void *)v11 - 5);
          int v15 = (void *)*((void *)v11 - 6);
          if (v14 != v13)
          {
            do
            {
              if (*(char *)(v14 - 1) < 0) {
                operator delete(*(void **)(v14 - 24));
              }
              v14 -= 32;
            }
            while (v14 != v13);
            int v15 = (void *)*((void *)v11 - 6);
          }
          *((void *)v11 - 5) = v13;
          operator delete(v15);
        }
        if (*(v11 - 65) < 0) {
          operator delete(*((void **)v11 - 11));
        }
        v11 -= 96;
      }
      while (v11 != v10);
      uint64_t v12 = __p;
    }
    unint64_t v17 = v10;
    operator delete(v12);
  }
}

void sub_9BD630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9BF240((void **)va);
  _Unwind_Resume(a1);
}

void sub_9BD644(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (int *)sub_498D5C(a1, a2, 0, "stop");
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 0x41u && (uint64_t v8 = v7[32]) != 0) {
    char v9 = (char **)((char *)v6 + v8 + *(unsigned int *)((char *)v6 + v8));
  }
  else {
    char v9 = 0;
  }
  sub_9BF304(v9, (void (*)(void **__return_ptr, char *))sub_9BF3A8, (uint64_t)&__p);
  sub_9BF11C((uint64_t *)&__p, a3, a4);
  size_t v10 = (char *)__p;
  if (__p)
  {
    uint64_t v11 = v17;
    uint64_t v12 = __p;
    if (v17 != __p)
    {
      do
      {
        uint64_t v13 = *((void *)v11 - 6);
        if (v13)
        {
          uint64_t v14 = *((void *)v11 - 5);
          int v15 = (void *)*((void *)v11 - 6);
          if (v14 != v13)
          {
            do
            {
              if (*(char *)(v14 - 1) < 0) {
                operator delete(*(void **)(v14 - 24));
              }
              v14 -= 32;
            }
            while (v14 != v13);
            int v15 = (void *)*((void *)v11 - 6);
          }
          *((void *)v11 - 5) = v13;
          operator delete(v15);
        }
        if (*(v11 - 65) < 0) {
          operator delete(*((void **)v11 - 11));
        }
        v11 -= 96;
      }
      while (v11 != v10);
      uint64_t v12 = __p;
    }
    unint64_t v17 = v10;
    operator delete(v12);
  }
}

void sub_9BD778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9BF240((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9BD78C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v2 = *(void *)(a1 + 48);
    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 56);
      unint64_t v4 = *(void **)(a1 + 48);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0) {
            operator delete(*(void **)(v3 - 24));
          }
          v3 -= 32;
        }
        while (v3 != v2);
        unint64_t v4 = *(void **)(a1 + 48);
      }
      *(void *)(a1 + 56) = v2;
      operator delete(v4);
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)(a1 + 96) = 0;
  }
  return a1;
}

char *sub_9BD81C(char **a1)
{
  uint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 < v2)
  {
    *((_DWORD *)v3 + 6) = 0;
    *(_OWORD *)uint64_t v3 = xmmword_20EA810;
    *((void *)v3 + 2) = 0x8000000080000000;
    unint64_t v4 = v3 + 28;
    goto LABEL_14;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 2);
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) > 0x924924924924924) {
    sub_2E00();
  }
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v2 - (void)v5) >> 2);
  if (2 * v8 > v7) {
    unint64_t v7 = 2 * v8;
  }
  if (v8 >= 0x492492492492492) {
    unint64_t v9 = 0x924924924924924;
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9 > 0x924924924924924) {
    sub_188D718();
  }
  uint64_t v10 = 28 * v9;
  uint64_t v11 = (char *)operator new(28 * v9);
  uint64_t v12 = &v11[28 * v6];
  uint64_t v13 = &v11[v10];
  *((_DWORD *)v12 + 6) = 0;
  *(_OWORD *)uint64_t v12 = xmmword_20EA810;
  *((void *)v12 + 2) = 0x8000000080000000;
  unint64_t v4 = v12 + 28;
  if (v3 == v5)
  {
    *a1 = v12;
    a1[1] = v4;
    a1[2] = v13;
    if (!v5) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  do
  {
    long long v14 = *(_OWORD *)(v3 - 28);
    int v15 = v12 - 28;
    *((_OWORD *)v12 - 1) = *((_OWORD *)v3 - 1);
    *(_OWORD *)(v12 - 28) = v14;
    v3 -= 28;
    v12 -= 28;
  }
  while (v3 != v5);
  *a1 = v15;
  a1[1] = v4;
  a1[2] = v13;
  if (v5) {
LABEL_13:
  }
    operator delete(v5);
LABEL_14:
  a1[1] = v4;
  return v4 - 28;
}

BOOL sub_9BD990(uint64_t a1, _DWORD *a2)
{
  if (a2[272]) {
    return 0;
  }
  uint64_t v5 = (int *)sub_369F8C(*(void *)(a1 + 32), a2[2] | ((unint64_t)a2[1] << 32), 0, "trip");
  uint64_t v6 = (int *)sub_8DFD1C(*(void *)(a1 + 32), *(void *)((char *)v5 + *(unsigned __int16 *)((char *)v5 - *v5 + 6)), 0, "line");
  unint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 >= 0x3Du)
  {
    uint64_t v8 = v7[30];
    if (v8)
    {
      if (*((unsigned char *)v6 + v8)) {
        return 1;
      }
    }
  }
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = **(void **)(v9 + 3896);
  return v10
      && sub_367060(v10, a2[2] | ((unint64_t)a2[1] << 32), a2[3], *(unsigned char *)(v9 + 3904));
}

unint64_t sub_9BDA8C(void *a1, uint64_t a2)
{
  unint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return (unint64_t)*((double *)v2 + 5);
}

void sub_9BDB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9BDB4C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 80))
  {
    if (*(unsigned char *)(a1 + 80))
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      if (a1 != a2) {
        sub_326C0((void *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    }
    else
    {
      sub_9296F8(a1, a2);
      *(unsigned char *)(a1 + 80) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 80))
  {
    long long v6 = *(void **)(a1 + 48);
    if (v6)
    {
      *(void *)(a1 + 56) = v6;
      operator delete(v6);
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)(a1 + 80) = 0;
  }
  unint64_t v4 = (void **)(a1 + 88);
  if (*(unsigned char *)(a2 + 120))
  {
    if (!*(unsigned char *)(a1 + 120))
    {
      char *v4 = 0;
      *(void *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0;
      sub_92980C((unsigned char *)(a1 + 88), *(void *)(a2 + 88), *(void *)(a2 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 4));
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(unsigned char *)(a1 + 120) = 1;
      return a1;
    }
    if (a1 != a2) {
      sub_9C02A8((void **)(a1 + 88), *(void *)(a2 + 88), *(void *)(a2 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 4));
    }
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    return a1;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 120)) {
      return a1;
    }
    unint64_t v7 = (void **)*v4;
    if (*v4)
    {
      uint64_t v8 = *(void ***)(a1 + 96);
      uint64_t v9 = *v4;
      if (v8 != v7)
      {
        do
        {
          if (*((char *)v8 - 17) < 0) {
            operator delete(*(v8 - 5));
          }
          v8 -= 6;
        }
        while (v8 != v7);
        uint64_t v9 = *v4;
      }
      *(void *)(a1 + 96) = v7;
      operator delete(v9);
    }
    *(unsigned char *)(a1 + 120) = 0;
    return a1;
  }
}

uint64_t sub_9BDD0C(uint64_t a1)
{
  sub_402C7C(a1 + 2744);
  sub_402C7C(a1 + 2368);
  unint64_t v2 = *(void **)(a1 + 2344);
  if (v2)
  {
    *(void *)(a1 + 2352) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 2320);
  if (v3)
  {
    *(void *)(a1 + 2328) = v3;
    operator delete(v3);
  }
  sub_4F2BD0((void **)(a1 + 1232));
  unint64_t v4 = *(void **)(a1 + 1176);
  if (v4)
  {
    *(void *)(a1 + 1184) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 1167) < 0)
  {
    operator delete(*(void **)(a1 + 1144));
    if ((*(char *)(a1 + 1127) & 0x80000000) == 0)
    {
LABEL_9:
      uint64_t v5 = *(void **)(a1 + 1080);
      if (!v5) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 1127) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 1104));
  uint64_t v5 = *(void **)(a1 + 1080);
  if (v5)
  {
LABEL_10:
    *(void *)(a1 + 1088) = v5;
    operator delete(v5);
  }
LABEL_11:
  long long v6 = *(void **)(a1 + 1056);
  if (v6)
  {
    *(void *)(a1 + 1064) = v6;
    operator delete(v6);
  }
  uint64_t v8 = (void **)(a1 + 1032);
  sub_9BDEC8(&v8);
  sub_4D4B58(a1 + 856);
  sub_4D4B58(a1 + 696);
  sub_4D4B58(a1 + 536);
  sub_4D4B58(a1 + 376);
  sub_4D4B58(a1 + 216);
  sub_4D4B58(a1 + 56);
  if (*(void *)a1)
  {
    sub_9BDFF4(a1, *(void ***)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_9BDE30(uint64_t a1)
{
  sub_4D4B58(a1 + 800);
  sub_4D4B58(a1 + 640);
  sub_4D4B58(a1 + 480);
  sub_4D4B58(a1 + 320);
  sub_4D4B58(a1 + 160);

  return sub_4D4B58(a1);
}

void ***sub_9BDE8C(void ***a1)
{
  if (*a1)
  {
    sub_9BDFF4((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

void sub_9BDEC8(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      long long v6 = (void **)v1[1];
      do
      {
        uint64_t v9 = (void **)*(v6 - 3);
        v6 -= 3;
        uint64_t v8 = v9;
        if (v9)
        {
          uint64_t v10 = (void **)*(v4 - 2);
          unint64_t v7 = v8;
          if (v10 != v8)
          {
            uint64_t v11 = (void **)*(v4 - 2);
            do
            {
              long long v14 = *(v11 - 3);
              v11 -= 3;
              uint64_t v13 = v14;
              if (v14)
              {
                uint64_t v15 = (uint64_t)*(v10 - 2);
                uint64_t v12 = v13;
                if ((void *)v15 != v13)
                {
                  do
                  {
                    uint64_t v16 = v15 - 168;
                    if (*(_DWORD *)(v15 - 8) == 1) {
                      uint64_t v16 = sub_4D4B58(v16);
                    }
                    uint64_t v15 = v16;
                  }
                  while ((void *)v16 != v13);
                  uint64_t v12 = *v11;
                }
                *(v10 - 2) = v13;
                operator delete(v12);
              }
              uint64_t v10 = v11;
            }
            while (v11 != v8);
            unint64_t v7 = *v6;
          }
          *(v4 - 2) = v8;
          operator delete(v7);
        }
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_9BDFF4(uint64_t a1, void **a2)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  if (v2 != a2)
  {
    uint64_t v3 = *(void ***)(a1 + 8);
    while (1)
    {
      long long v6 = (char *)*(v3 - 4);
      v3 -= 4;
      uint64_t v5 = v6;
      if (!v6) {
        goto LABEL_5;
      }
      uint64_t v26 = v2;
      uint64_t v27 = v3;
      unint64_t v7 = (char *)*(v2 - 3);
      unint64_t v4 = v5;
      if (v7 != v5) {
        break;
      }
LABEL_4:
      *(v26 - 3) = v5;
      operator delete(v4);
      uint64_t v3 = v27;
LABEL_5:
      unint64_t v2 = v3;
      if (v3 == a2) {
        goto LABEL_43;
      }
    }
    while (1)
    {
      uint64_t v8 = (void **)*((void *)v7 - 3);
      if (!v8) {
        goto LABEL_36;
      }
      uint64_t v9 = (void **)*((void *)v7 - 2);
      uint64_t v10 = (void *)*((void *)v7 - 3);
      if (v9 != v8) {
        break;
      }
LABEL_35:
      *((void *)v7 - 2) = v8;
      operator delete(v10);
LABEL_36:
      if ((*(v7 - 49) & 0x80000000) == 0)
      {
        uint64_t v21 = (void *)*((void *)v7 - 12);
        if (!v21) {
          goto LABEL_10;
        }
LABEL_40:
        uint64_t v22 = *((void *)v7 - 11);
        uint64_t v23 = v21;
        if ((void *)v22 != v21)
        {
          do
            uint64_t v22 = sub_92A5D4(v22 - 5704);
          while ((void *)v22 != v21);
          uint64_t v23 = (void *)*((void *)v7 - 12);
        }
        *((void *)v7 - 11) = v21;
        operator delete(v23);
        goto LABEL_10;
      }
      operator delete(*((void **)v7 - 9));
      uint64_t v21 = (void *)*((void *)v7 - 12);
      if (v21) {
        goto LABEL_40;
      }
LABEL_10:
      v7 -= 104;
      if (v7 == v5)
      {
        unint64_t v4 = *v27;
        goto LABEL_4;
      }
    }
    while (1)
    {
      uint64_t v11 = (void **)*(v9 - 3);
      if (v11)
      {
        uint64_t v12 = (void **)*(v9 - 2);
        uint64_t v13 = *(v9 - 3);
        if (v12 != v11)
        {
          long long v14 = (void **)*(v9 - 2);
          do
          {
            unint64_t v17 = (char *)*(v14 - 3);
            v14 -= 3;
            uint64_t v16 = v17;
            if (v17)
            {
              unsigned int v18 = (char *)*(v12 - 2);
              uint64_t v15 = v16;
              if (v18 != v16)
              {
                do
                {
                  unsigned int v19 = (void *)*((void *)v18 - 3);
                  if (v19)
                  {
                    *((void *)v18 - 2) = v19;
                    operator delete(v19);
                  }
                  v18 -= 32;
                }
                while (v18 != v16);
                uint64_t v15 = *v14;
              }
              *(v12 - 2) = v16;
              operator delete(v15);
            }
            uint64_t v12 = v14;
          }
          while (v14 != v11);
          uint64_t v13 = *(v9 - 3);
        }
        *(v9 - 2) = v11;
        operator delete(v13);
      }
      if (*((char *)v9 - 25) < 0)
      {
        operator delete(*(v9 - 6));
        uint64_t v20 = v9 - 9;
        if (*((char *)v9 - 49) < 0) {
LABEL_33:
        }
          operator delete(*v20);
      }
      else
      {
        uint64_t v20 = v9 - 9;
        if (*((char *)v9 - 49) < 0) {
          goto LABEL_33;
        }
      }
      uint64_t v9 = v20;
      if (v20 == v8)
      {
        uint64_t v10 = (void *)*((void *)v7 - 3);
        goto LABEL_35;
      }
    }
  }
LABEL_43:
  *(void *)(a1 + 8) = a2;
}

void sub_9BE1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 88);
    uint64_t v5 = *(void **)(a2 + 80);
    if (v4 != v3)
    {
      do
      {
        v4 -= 72;
        sub_993404(a2 + 96, v4);
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(a2 + 80);
    }
    *(void *)(a2 + 88) = v3;
    operator delete(v5);
  }
  if (*(char *)(a2 + 55) < 0)
  {
    operator delete(*(void **)(a2 + 32));
    long long v6 = *(void **)(a2 + 8);
    if (!v6) {
      return;
    }
  }
  else
  {
    long long v6 = *(void **)(a2 + 8);
    if (!v6) {
      return;
    }
  }
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = v6;
  if ((void *)v7 != v6)
  {
    do
      uint64_t v7 = sub_92A5D4(v7 - 5704);
    while ((void *)v7 != v6);
    uint64_t v8 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v6;

  operator delete(v8);
}

uint64_t sub_9BE2CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 472);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 480);
    uint64_t v4 = *(void **)(a1 + 472);
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 568;
      do
      {
        sub_8E57D0((void *)(v5 + 24));
        uint64_t v7 = *(void **)v5;
        if (*(void *)v5)
        {
          *(void *)(v5 + 8) = v7;
          operator delete(v7);
        }
        BOOL v6 = v5 == v2;
        v5 -= 568;
      }
      while (!v6);
      uint64_t v4 = *(void **)(a1 + 472);
    }
    *(void *)(a1 + 480) = v2;
    operator delete(v4);
  }
  uint64_t v8 = *(void *)(a1 + 424);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 432);
    uint64_t v10 = *(void **)(a1 + 424);
    if (v9 != v8)
    {
      do
      {
        uint64_t v11 = v9 - 168;
        sub_4D4B58(v9 - 160);
        uint64_t v9 = v11;
      }
      while (v11 != v8);
      uint64_t v10 = *(void **)(a1 + 424);
    }
    *(void *)(a1 + 432) = v8;
    operator delete(v10);
  }
  uint64_t v12 = *(void **)(a1 + 400);
  if (v12)
  {
    *(void *)(a1 + 408) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 376);
  if (v13)
  {
    *(void *)(a1 + 384) = v13;
    operator delete(v13);
  }
  if (*(char *)(a1 + 375) < 0)
  {
    operator delete(*(void **)(a1 + 352));
    if ((*(char *)(a1 + 351) & 0x80000000) == 0)
    {
LABEL_20:
      if ((*(char *)(a1 + 327) & 0x80000000) == 0) {
        goto LABEL_21;
      }
LABEL_25:
      operator delete(*(void **)(a1 + 304));
      sub_8F39EC((void *)(a1 + 24));
      long long v14 = *(void **)a1;
      if (!*(void *)a1) {
        return a1;
      }
      goto LABEL_26;
    }
  }
  else if ((*(char *)(a1 + 351) & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete(*(void **)(a1 + 328));
  if (*(char *)(a1 + 327) < 0) {
    goto LABEL_25;
  }
LABEL_21:
  sub_8F39EC((void *)(a1 + 24));
  long long v14 = *(void **)a1;
  if (!*(void *)a1) {
    return a1;
  }
LABEL_26:
  uint64_t v16 = *(void *)(a1 + 8);
  unint64_t v17 = v14;
  if ((void *)v16 != v14)
  {
    do
      uint64_t v16 = sub_9BDD0C(v16 - 3120);
    while ((void *)v16 != v14);
    unint64_t v17 = *(void **)a1;
  }
  *(void *)(a1 + 8) = v14;
  operator delete(v17);
  return a1;
}

uint64_t sub_9BE450(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0x8000000080000000;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 36) = 0x8000000080000000;
  *(_WORD *)(a1 + 44) = 0;
  *(void *)(a1 + 48) = 0x8000000080000000;
  sub_981774(a1 + 56);
  *(void *)(a1 + 1016) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 1024) = 0;
  *(unsigned char *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_DWORD *)(a1 + 1136) = 0x7FFFFFFF;
  *(void *)(a1 + 1144) = 0;
  *(void *)(a1 + 1160) = 0;
  *(void *)(a1 + 1152) = 0;
  *(_DWORD *)(a1 + 1168) = 100;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1192) = 0;
  *(void *)(a1 + 1184) = 0;
  *(unsigned char *)(a1 + 1200) = 0;
  *(void *)(a1 + 1204) = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 1212) = 0;
  *(unsigned char *)(a1 + 1216) = 0;
  *(void *)(a1 + 1224) = 0x3FF0000000000000;
  sub_4F29BC(a1 + 1232);
  *(_OWORD *)(a1 + 2352) = 0u;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_OWORD *)(a1 + 2320) = 0u;
  *(void *)(a1 + 2368) = -1;
  *(_DWORD *)(a1 + 2376) = 0x7FFFFFFF;
  *(void *)(a1 + 2384) = -1;
  *(void *)(a1 + 2392) = -1;
  *(void *)(a1 + 2400) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 2408) = 0;
  *(_DWORD *)(a1 + 2416) = -1935635296;
  *(void *)(a1 + 2424) = 0;
  *(_DWORD *)(a1 + 2431) = 0;
  *(void *)(a1 + 2440) = 0;
  *(void *)(a1 + 2456) = 0;
  *(void *)(a1 + 2448) = 0;
  *(_DWORD *)(a1 + 2464) = 0;
  *(unsigned char *)(a1 + 2468) = 100;
  *(void *)(a1 + 2472) = 0;
  *(_DWORD *)(a1 + 2480) = 0;
  *(unsigned char *)(a1 + 2584) = 0;
  *(_OWORD *)(a1 + 2568) = 0u;
  *(_OWORD *)(a1 + 2552) = 0u;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_OWORD *)(a1 + 2520) = 0u;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2592) = 0u;
  *(_OWORD *)(a1 + 2608) = 0u;
  *(_OWORD *)(a1 + 2624) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(void *)(a1 + 2672) = 0;
  *(_OWORD *)(a1 + 2680) = xmmword_20B8E30;
  *(void *)(a1 + 2696) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 2720) = 0;
  *(_DWORD *)(a1 + 2728) = 0;
  *(void *)(a1 + 2704) = 0;
  *(void *)(a1 + 2712) = 0;
  *(unsigned char *)(a1 + 2736) = 0;
  *(_OWORD *)(a1 + 2740) = xmmword_20E22B0;
  *(void *)(a1 + 2768) = -1;
  *(void *)(a1 + 2760) = -1;
  *(void *)(a1 + 2776) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 2784) = 0;
  *(_DWORD *)(a1 + 2792) = -1935635296;
  *(_DWORD *)(a1 + 2807) = 0;
  *(void *)(a1 + 2800) = 0;
  *(void *)(a1 + 2824) = 0;
  *(void *)(a1 + 2816) = 0;
  *(_DWORD *)(a1 + 2840) = 0;
  *(void *)(a1 + 2832) = 0;
  *(unsigned char *)(a1 + 2844) = 100;
  *(void *)(a1 + 2848) = 0;
  *(_DWORD *)(a1 + 2856) = 0;
  *(_OWORD *)(a1 + 2944) = 0u;
  *(_OWORD *)(a1 + 2928) = 0u;
  *(_OWORD *)(a1 + 2912) = 0u;
  *(_OWORD *)(a1 + 2896) = 0u;
  *(_OWORD *)(a1 + 2880) = 0u;
  *(_OWORD *)(a1 + 2864) = 0u;
  *(unsigned char *)(a1 + 2960) = 0;
  *(void *)(a1 + 3048) = 0;
  *(_OWORD *)(a1 + 3016) = 0u;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 3056) = xmmword_20B8E30;
  *(void *)(a1 + 3072) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 3088) = 0;
  *(void *)(a1 + 3080) = 0;
  *(_DWORD *)(a1 + 3104) = 0;
  *(void *)(a1 + 3096) = 0;
  *(unsigned char *)(a1 + 3112) = 0;
  *(_DWORD *)(a1 + 3116) = 0;
  return a1;
}

void sub_9BE6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v2 + 1184) = v7;
    operator delete(v7);
    if ((*(char *)(v2 + 1167) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v2 + 1127) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v2 + 1167) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v4);
  if ((*(char *)(v2 + 1127) & 0x80000000) == 0)
  {
LABEL_4:
    uint64_t v8 = *(void **)(v2 + 1080);
    if (!v8) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(v2 + 1104));
  uint64_t v8 = *(void **)(v2 + 1080);
  if (!v8)
  {
LABEL_5:
    uint64_t v9 = *(void **)(v2 + 1056);
    if (!v9) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_11:
  *(void *)(v2 + 1088) = v8;
  operator delete(v8);
  uint64_t v9 = *(void **)(v2 + 1056);
  if (!v9)
  {
LABEL_7:
    sub_9BDEC8((void ***)va);
    sub_9BDE30(v3);
    sub_9BDE8C((void ***)v2);
    _Unwind_Resume(a1);
  }
LABEL_6:
  *(void *)(v2 + 1064) = v9;
  operator delete(v9);
  goto LABEL_7;
}

void sub_9BE73C(_Unwind_Exception *a1)
{
  sub_9BDE8C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9BE750(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = -1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0x7FFFFFFF;
  *(void *)(a1 + 48) = -1;
  *(void *)(a1 + 56) = -1;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 792) = 0;
  *(unsigned char *)(a1 + 840) = 0;
  *(unsigned char *)(a1 + 952) = 0;
  *(unsigned char *)(a1 + 1000) = 0;
  *(_DWORD *)(a1 + 1008) = 0;
  sub_980AF0(a1 + 1016);
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  sub_5F3B34(a1 + 1696);
  *(unsigned char *)(a1 + 1856) = 0;
  *(void *)(a1 + 1864) = 0;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(void *)(a1 + 1888) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 1896) = -1;
  *(void *)(a1 + 1904) = -1;
  *(unsigned char *)(a1 + 1916) = 0;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(void *)(a1 + 1968) = -1;
  *(_DWORD *)(a1 + 1976) = 0;
  *(unsigned char *)(a1 + 1980) = 0;
  *(void *)(a1 + 1984) = -1;
  *(void *)(a1 + 1992) = -1;
  *(void *)(a1 + 2016) = 0;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(unsigned char *)(a1 + 2104) = 0;
  *(unsigned char *)(a1 + 2144) = 0;
  *(void *)(a1 + 2168) = 0;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(void *)(a1 + 2176) = 0xFFFFFFFF00000000;
  *(void *)(a1 + 2184) = 0x8000000080000000;
  *(void *)(a1 + 2192) = -1;
  *(void *)(a1 + 2216) = 0;
  *(_OWORD *)(a1 + 2200) = 0u;
  sub_980E24(a1 + 2224);
  *(void *)(a1 + 3488) = 0;
  *(_OWORD *)(a1 + 3472) = 0u;
  *(_OWORD *)(a1 + 3456) = 0u;
  *(_OWORD *)(a1 + 3440) = 0u;
  *(_OWORD *)(a1 + 3424) = 0u;
  sub_4F29BC(a1 + 3496);
  sub_4F29BC(a1 + 4584);
  *(unsigned char *)(a1 + 5672) = 0;
  *(void *)(a1 + 5680) = 0;
  *(void *)(a1 + 5696) = 0;
  *(void *)(a1 + 5688) = 0;
  return a1;
}

void sub_9BE8DC(_Unwind_Exception *a1)
{
  uint64_t v21 = v5;
  uint64_t v8 = v3;
  sub_4F2BD0(v8);
  uint64_t v10 = *(void **)(v1 + 3472);
  if (v10)
  {
    *(void *)(v1 + 3480) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(v1 + 3448);
  if (v11)
  {
    *(void *)(v1 + 3456) = v11;
    operator delete(v11);
  }
  sub_9283F8((void **)(v1 + 3424));
  sub_92A344(v4);
  uint64_t v12 = *v7;
  if (*v7)
  {
    *(void *)(v1 + 2208) = v12;
    operator delete(v12);
    uint64_t v13 = (void **)(v1 + 2000);
    long long v14 = *v6;
    if (!*v6)
    {
LABEL_7:
      sub_928454(v1 + 2024);
      uint64_t v15 = *v13;
      if (!*v13) {
        goto LABEL_8;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v13 = (void **)(v1 + 2000);
    long long v14 = *v6;
    if (!*v6) {
      goto LABEL_7;
    }
  }
  *(void *)(v1 + 2160) = v14;
  operator delete(v14);
  sub_928454(v1 + 2024);
  uint64_t v15 = *v13;
  if (!*v13)
  {
LABEL_8:
    uint64_t v16 = (void **)(v1 + 1920);
    unint64_t v17 = *(void **)(v1 + 1944);
    if (!v17) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  *(void *)(v1 + 2008) = v15;
  operator delete(v15);
  uint64_t v16 = (void **)(v1 + 1920);
  unint64_t v17 = *(void **)(v1 + 1944);
  if (!v17)
  {
LABEL_9:
    unsigned int v18 = (uint64_t *)(v1 + 1864);
    unsigned int v19 = *v16;
    if (!*v16) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  *(void *)(v1 + 1952) = v17;
  operator delete(v17);
  unsigned int v18 = (uint64_t *)(v1 + 1864);
  unsigned int v19 = *v16;
  if (!*v16)
  {
LABEL_10:
    if (!*(unsigned char *)(v1 + 1916))
    {
LABEL_12:
      sub_928500(v18);
      sub_92853C(v2);
      if (*(unsigned char *)(v1 + 1000))
      {
        uint64_t v20 = *(void **)(v1 + 968);
        if (v20)
        {
          *(void *)(v1 + 976) = v20;
          operator delete(v20);
        }
        *(unsigned char *)(v1 + 1000) = 0;
      }
      sub_928580(v1 + 848);
      if (*(unsigned char *)(v1 + 840))
      {
        if (*(char *)(v1 + 839) < 0) {
          operator delete(*(void **)(v1 + 816));
        }
        *(unsigned char *)(v1 + 840) = 0;
      }
      if (*(unsigned char *)(v1 + 792))
      {
        sub_92A428(v1 + 88);
        *(unsigned char *)(v1 + 792) = 0;
      }
      if (*(unsigned char *)(v1 + 80)) {
        *(unsigned char *)(v1 + 80) = 0;
      }
      if (*(char *)(v1 + 39) < 0) {
        operator delete(*v21);
      }
      _Unwind_Resume(a1);
    }
LABEL_11:
    *(unsigned char *)(v1 + 1916) = 0;
    goto LABEL_12;
  }
LABEL_17:
  *(void *)(v1 + 1928) = v19;
  operator delete(v19);
  if (!*(unsigned char *)(v1 + 1916)) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void *sub_9BEAA8(void *a1)
{
  uint64_t v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  uint64_t v6 = a1[1];
  if (v6)
  {
    uint64_t v7 = a1[2];
    uint64_t v8 = (void *)a1[1];
    if (v7 != v6)
    {
      uint64_t v9 = v7 - 1064;
      do
      {
        int v11 = *(_DWORD *)(v9 + 1056);
        if (v11 == 3)
        {
          sub_3AFFFC(v9);
        }
        else if (v11 == 1)
        {
          uint64_t v12 = *(void **)(v9 + 16);
          if (v12)
          {
            *(void *)(v9 + 24) = v12;
            operator delete(v12);
          }
        }
        else if (!v11 && *(unsigned char *)(v9 + 28))
        {
          *(unsigned char *)(v9 + 28) = 0;
        }
        uint64_t v10 = v9 - 32;
        v9 -= 1096;
      }
      while (v10 != v6);
      uint64_t v8 = (void *)a1[1];
    }
    a1[2] = v6;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_9BEB94(uint64_t a1, unint64_t a2, int a3, int a4)
{
  uint64_t v7 = sub_369B60(a1, a2, 0);
  uint64_t v8 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v8 < 5u)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = *((unsigned __int16 *)v8 + 2);
    if (*((_WORD *)v8 + 2)) {
      v9 += (uint64_t)&v7[*(unsigned int *)&v7[v9]];
    }
  }
  uint64_t v10 = (int *)(v9 + 4 * HIDWORD(a2) + 4 + *(unsigned int *)(v9 + 4 * HIDWORD(a2) + 4));
  int v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 < 0x29u) {
    return 0;
  }
  uint64_t v12 = v11[20];
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *(unsigned int *)((char *)&v10[a3 + 1] + v12 + *(unsigned int *)((char *)v10 + v12));
  if (v13 == -1) {
    return 0;
  }
  uint64_t v14 = (uint64_t)&v7[4 * v13 + *((unsigned __int16 *)v8 + 10) + *(unsigned int *)&v7[*((unsigned __int16 *)v8 + 10)]];
  uint64_t v15 = (int *)(v14 + 4 + *(unsigned int *)(v14 + 4));
  uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 7u) {
    return 0;
  }
  uint64_t v17 = v16[3];
  if (!v17) {
    return 0;
  }
  unsigned int v18 = (unsigned int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17));
  uint64_t v19 = *v18;
  if (!v19) {
    return 0;
  }
  uint64_t v20 = 0;
  uint64_t v21 = v18 + 1;
  int v22 = -1;
  while (1)
  {
    uint64_t v24 = (int *)((char *)&v21[v20] + v21[v20]);
    uint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24);
    if (*v25 >= 7u)
    {
      uint64_t v26 = v25[3];
      if (v26)
      {
        uint64_t v27 = (unsigned int *)((char *)v24 + v26 + *(unsigned int *)((char *)v24 + v26));
        uint64_t v28 = *v27;
        if (v28) {
          break;
        }
      }
    }
    int v22 = v20;
LABEL_13:
    ++v20;
    unsigned int v23 = v22;
    if (v20 == v19) {
      goto LABEL_22;
    }
  }
  std::string v29 = (unsigned __int16 *)(v27 + 1);
  uint64_t v30 = 2 * v28;
  while (a4 != *v29)
  {
    ++v29;
    v30 -= 2;
    if (!v30) {
      goto LABEL_13;
    }
  }
  unsigned int v23 = v20;
  if (!v30) {
    goto LABEL_13;
  }
LABEL_22:
  if (v23 != -1) {
    return (uint64_t)&v21[v23] + v21[v23];
  }
  return 0;
}

uint64_t *sub_9BED48(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v48 = a2;
  __n128 result = sub_90DEBC(a1, a2, a3, a5);
  if (result)
  {
    uint64_t v9 = result;
    __n128 result = (uint64_t *)result[8];
    uint64_t v10 = (uint64_t *)v9[9];
    if ((char *)v10 - (char *)result >= 72)
    {
      if ((char *)v10 - (char *)result != 72)
      {
        unint64_t v11 = ((char *)v10 - (char *)result) / 0x48uLL;
        do
        {
          uint64_t v12 = 18 * (v11 >> 2);
          _X13 = &result[(unint64_t)v12 / 2];
          __asm { PRFM            #0, [X13] }
          uint64_t v19 = (unsigned int *)&result[9 * (v11 >> 1)];
          _X12 = &v19[v12];
          __asm { PRFM            #0, [X12] }
          if (*v19 >= a4) {
            unint64_t v22 = 0;
          }
          else {
            unint64_t v22 = v11 >> 1;
          }
          result += 9 * v22;
          v11 -= v11 >> 1;
        }
        while ((uint64_t)v11 > 1);
      }
      result += 9 * (*(_DWORD *)result < a4);
    }
    if (result == v10 || *(_DWORD *)result != a4)
    {
      if (a5 == 1)
      {
        return 0;
      }
      else if (!a5)
      {
        exception = __cxa_allocate_exception(0x40uLL);
        sub_90E0F0((unsigned int *)&v48, &v41);
        uint64_t v24 = std::string::insert(&v41, 0, "Could not obtain stop time update for trip ");
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        uint64_t v26 = std::string::append(&v42, ", schedule index ");
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v40, a3);
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v28 = &v40;
        }
        else {
          uint64_t v28 = (std::string *)v40.__r_.__value_.__r.__words[0];
        }
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v40.__r_.__value_.__l.__size_;
        }
        uint64_t v30 = std::string::append(&v43, (const std::string::value_type *)v28, size);
        long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        int v32 = std::string::append(&v44, ", and stop index ");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v39, a4);
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v34 = &v39;
        }
        else {
          uint64_t v34 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v35 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v35 = v39.__r_.__value_.__l.__size_;
        }
        uint64_t v36 = std::string::append(&v45, (const std::string::value_type *)v34, v35);
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        std::string::size_type v47 = v36->__r_.__value_.__r.__words[2];
        long long v46 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        int v38 = (void *)sub_2F404((uint64_t)exception, &v46);
      }
    }
  }
  return result;
}

void sub_9BEFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v47 - 57) < 0) {
    operator delete(*(void **)(v47 - 80));
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((*(char *)(v47 - 89) & 0x80000000) == 0)
    {
LABEL_5:
      if ((a47 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  else if ((*(char *)(v47 - 89) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v47 - 112));
  if ((a47 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a42);
  if ((a21 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a40 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a16);
  if ((a40 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a33 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_16;
  }
LABEL_15:
  operator delete(a35);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }
LABEL_16:
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_17:
  }
    _Unwind_Resume(a1);
LABEL_10:
  operator delete(__p);
  goto LABEL_17;
}

__n128 sub_9BF11C@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    while (1)
    {
      int v6 = *(_DWORD *)(v5 + 80);
      int v7 = *(_DWORD *)(v5 + 84);
      if (!v6 || v7 == -1) {
        break;
      }
      if (v6 == a2 && v7 == HIDWORD(a2)) {
        break;
      }
      v5 += 96;
      if (v5 == v4) {
        goto LABEL_15;
      }
    }
  }
  if (v5 == v4)
  {
LABEL_15:
    *(void *)(a3 + 96) = 0;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    *(unsigned char *)(a3 + 96) = 1;
    *(void *)a3 = *(void *)v5;
    if (*(char *)(v5 + 31) < 0)
    {
      sub_4200((unsigned char *)(a3 + 8), *(void **)(v5 + 8), *(void *)(v5 + 16));
    }
    else
    {
      long long v10 = *(_OWORD *)(v5 + 8);
      *(void *)(a3 + 24) = *(void *)(v5 + 24);
      *(_OWORD *)(a3 + 8) = v10;
    }
    long long v12 = *(_OWORD *)(v5 + 32);
    *(void *)(a3 + 48) = 0;
    *(_OWORD *)(a3 + 32) = v12;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    sub_360840((unsigned char *)(a3 + 48), *(void *)(v5 + 48), *(void *)(v5 + 56), (uint64_t)(*(void *)(v5 + 56) - *(void *)(v5 + 48)) >> 5);
    __n128 result = *(__n128 *)(v5 + 72);
    *(unsigned char *)(a3 + 88) = *(unsigned char *)(v5 + 88);
    *(__n128 *)(a3 + 72) = result;
  }
  return result;
}

void sub_9BF224(void *a1)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  sub_58CC(a1);
}

void **sub_9BF240(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 6);
        if (v5)
        {
          uint64_t v6 = *((void *)v3 - 5);
          int v7 = (void *)*((void *)v3 - 6);
          if (v6 != v5)
          {
            do
            {
              if (*(char *)(v6 - 1) < 0) {
                operator delete(*(void **)(v6 - 24));
              }
              v6 -= 32;
            }
            while (v6 != v5);
            int v7 = (void *)*((void *)v3 - 6);
          }
          *((void *)v3 - 5) = v5;
          operator delete(v7);
        }
        if (*(v3 - 65) < 0) {
          operator delete(*((void **)v3 - 11));
        }
        v3 -= 96;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char **sub_9BF304@<X0>(char **result@<X0>, void (*a2)(void **__return_ptr, char *)@<X1>, uint64_t a3@<X8>)
{
  void (*v8)(void **__return_ptr, char *);

  uint64_t v7 = 0;
  uint64_t v8 = a2;
  long long v6 = 0u;
  if (result)
  {
    uint64_t v4 = (unsigned int *)result;
    sub_9BF590((char **)&v6, *(unsigned int *)result);
    __n128 result = sub_9BF7FC(v4, (char **)&v6, *((uint64_t *)&v6 + 1), &v8);
    uint64_t v5 = v7;
    *(_OWORD *)a3 = v6;
    *(void *)(a3 + 16) = v5;
  }
  else
  {
    *(_OWORD *)a3 = 0uLL;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_9BF38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    sub_20AD4A4();
  }
  _Unwind_Resume(exception_object);
}

void sub_9BF3A8(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 < 9u)
  {
    uint64_t v5 = 0;
    long long v6 = (_WORD *)(&loc_1120530 + 1);
    unsigned int v7 = *(unsigned __int16 *)((char *)&loc_1120530 + 1);
    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) >= 7u) {
      goto LABEL_5;
    }
LABEL_11:
    unsigned int v8 = 0;
    uint64_t v9 = 0xFFFFFFLL;
    if (v7 < 5) {
      goto LABEL_16;
    }
    uint64_t v10 = v6[2];
    if (!v10) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  uint64_t v5 = (int *)v4[4];
  if (v5) {
    uint64_t v5 = (int *)((char *)v5 + (void)a1 + *(unsigned int *)((char *)v5 + (void)a1));
  }
  long long v6 = (unsigned __int16 *)((char *)v5 - *v5);
  unsigned int v7 = *v6;
  if (v7 < 7) {
    goto LABEL_11;
  }
LABEL_5:
  if (v6[3])
  {
    unsigned int v8 = *(int *)((char *)v5 + v6[3]);
    if (v7 >= 9) {
      goto LABEL_7;
    }
  }
  else
  {
    unsigned int v8 = 0;
    if (v7 >= 9)
    {
LABEL_7:
      if (v6[4])
      {
        uint64_t v9 = *(unsigned int *)((char *)v5 + v6[4]);
        uint64_t v10 = v6[2];
        if (!v10) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v9 = 0xFFFFFFLL;
        uint64_t v10 = v6[2];
        if (!v10) {
          goto LABEL_16;
        }
      }
LABEL_13:
      unint64_t v11 = (int *)((char *)v5 + v10 + *(unsigned int *)((char *)v5 + v10));
      goto LABEL_17;
    }
  }
  uint64_t v9 = 0xFFFFFFLL;
  uint64_t v10 = v6[2];
  if (v10) {
    goto LABEL_13;
  }
LABEL_16:
  unint64_t v11 = 0;
LABEL_17:
  sub_4A0694(v11, (uint64_t)&v21);
  uint64_t v12 = v21;
  v27[0] = *(void *)v22;
  *(void *)((char *)v27 + 7) = *(void *)&v22[7];
  char v13 = v23;
  long long v20 = v24;
  long long v14 = v25;
  uint64_t v15 = v26;
  uint64_t v16 = (unsigned __int16 *)((char *)a1 - *a1);
  uint64_t v17 = *(void *)((char *)a1 + v16[2]);
  uint64_t v18 = *(void *)((char *)a1 + v16[3]);
  if (*v16 < 0xBu)
  {
    LOBYTE(v19) = 0;
  }
  else
  {
    uint64_t v19 = v16[5];
    if (v19) {
      LOBYTE(v19) = *((unsigned char *)a1 + v19) != 0;
    }
  }
  *(void *)a2 = v8 | (unint64_t)(v9 << 32);
  *(void *)(a2 + 8) = v12;
  *(void *)(a2 + 16) = v27[0];
  *(void *)(a2 + 23) = *(void *)((char *)v27 + 7);
  *(unsigned char *)(a2 + 31) = v13;
  *(_OWORD *)(a2 + 32) = v20;
  *(_OWORD *)(a2 + 48) = v14;
  *(void *)(a2 + 64) = v15;
  *(void *)(a2 + 72) = v17;
  *(void *)(a2 + 80) = v18;
  *(unsigned char *)(a2 + 88) = v19;
}

void sub_9BF590(char **a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= a2) {
    return;
  }
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    sub_2E00();
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = 96 * a2;
  long long v6 = (char *)operator new(96 * a2);
  unsigned int v7 = &v6[v5];
  unsigned int v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_21;
  }
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = &v8[v9];
    unint64_t v11 = &v4[v9];
    *((void *)v10 - 12) = *(void *)&v4[v9 - 96];
    long long v12 = *(_OWORD *)&v4[v9 - 88];
    *((void *)v10 - 9) = *(void *)&v4[v9 - 72];
    *(_OWORD *)(v10 - 88) = v12;
    *((void *)v11 - 10) = 0;
    *((void *)v11 - 9) = 0;
    *((void *)v11 - 11) = 0;
    *((_OWORD *)v10 - 4) = *(_OWORD *)&v4[v9 - 64];
    *((_OWORD *)v10 - 3) = *(_OWORD *)&v4[v9 - 48];
    *((void *)v10 - 4) = *(void *)&v4[v9 - 32];
    *((void *)v11 - 6) = 0;
    *((void *)v11 - 5) = 0;
    *((void *)v11 - 4) = 0;
    long long v13 = *(_OWORD *)&v4[v9 - 24];
    *(v10 - 8) = v4[v9 - 8];
    *(_OWORD *)(v10 - 24) = v13;
    v9 -= 96;
  }
  while (&v4[v9] != v2);
  long long v14 = *a1;
  uint64_t v2 = a1[1];
  *a1 = &v8[v9];
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v14)
  {
    do
    {
      uint64_t v15 = *((void *)v2 - 6);
      if (v15)
      {
        uint64_t v16 = *((void *)v2 - 5);
        uint64_t v17 = (void *)*((void *)v2 - 6);
        if (v16 != v15)
        {
          do
          {
            if (*(char *)(v16 - 1) < 0) {
              operator delete(*(void **)(v16 - 24));
            }
            v16 -= 32;
          }
          while (v16 != v15);
          uint64_t v17 = (void *)*((void *)v2 - 6);
        }
        *((void *)v2 - 5) = v15;
        operator delete(v17);
      }
      if (*(v2 - 65) < 0) {
        operator delete(*((void **)v2 - 11));
      }
      v2 -= 96;
    }
    while (v2 != v14);
    uint64_t v2 = v14;
  }
  if (v2)
  {
LABEL_21:
    operator delete(v2);
  }
}

uint64_t sub_9BF744(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    uint64_t v4 = *(void *)(i - 48);
    if (v4)
    {
      uint64_t v5 = *(void *)(i - 40);
      long long v6 = *(void **)(i - 48);
      if (v5 != v4)
      {
        do
        {
          if (*(char *)(v5 - 1) < 0) {
            operator delete(*(void **)(v5 - 24));
          }
          v5 -= 32;
        }
        while (v5 != v4);
        long long v6 = *(void **)(i - 48);
      }
      *(void *)(i - 40) = v4;
      operator delete(v6);
    }
    if (*(char *)(i - 65) < 0) {
      operator delete(*(void **)(i - 88));
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char **sub_9BF7FC(unsigned int *a1, char **a2, uint64_t a3, void (**a4)(void **__return_ptr, char *))
{
  void (*v9)(void **__return_ptr, char *);
  uint64_t v10;
  void **v11;
  void **v12;
  void *v13;
  void *v15[3];
  char v16;
  void *__p;
  void **v18;

  unsigned int v7 = (char *)(a1 + 1);
  uint64_t v6 = *a1;
  if (v6)
  {
    unsigned int v8 = (unsigned int *)&v7[4 * v6];
    uint64_t v9 = *a4;
    (*a4)(v15, &v7[*(unsigned int *)v7]);
    while (1)
    {
      uint64_t v10 = sub_9BF924(a2, a3, (uint64_t)v15);
      unint64_t v11 = (void **)__p;
      if (__p)
      {
        long long v12 = v18;
        long long v13 = __p;
        if (v18 != __p)
        {
          do
          {
            if (*((char *)v12 - 1) < 0) {
              operator delete(*(v12 - 3));
            }
            v12 -= 4;
          }
          while (v12 != v11);
          long long v13 = __p;
        }
        uint64_t v18 = v11;
        operator delete(v13);
      }
      if (v16 < 0) {
        operator delete(v15[1]);
      }
      a3 = v10 + 96;
      v7 += 4;
      if (v7 == (char *)v8) {
        break;
      }
      v9(v15, &v7[*(unsigned int *)v7]);
    }
  }
  return a2;
}

void sub_9BF8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a18) {
    sub_20AC0C4((uint64_t)&a19, a18);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9BF924(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  unsigned int v7 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)*a1) >> 5);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v7) >> 5) + 1;
    if (v20 > 0x2AAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v7) >> 5);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x155555555555555) {
      unint64_t v22 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v22 = v20;
    }
    uint64_t v51 = a1 + 2;
    if (v22)
    {
      if (v22 > 0x2AAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      char v23 = (char *)operator new(96 * v22);
    }
    else
    {
      char v23 = 0;
    }
    uint64_t v47 = v23;
    uint64_t v48 = &v23[96 * v8];
    int v49 = v48;
    unint64_t v50 = &v23[96 * v22];
    sub_9BFDDC((uint64_t)&v47, a3);
    long long v27 = v48;
    uint64_t v28 = *a1;
    std::string v29 = v48;
    if (*a1 != (char *)v4)
    {
      uint64_t v30 = 0;
      do
      {
        long long v31 = &v27[v30];
        uint64_t v32 = v4 + v30;
        *((void *)v31 - 12) = *(void *)(v4 + v30 - 96);
        long long v33 = *(_OWORD *)(v4 + v30 - 88);
        *((void *)v31 - 9) = *(void *)(v4 + v30 - 72);
        *(_OWORD *)(v31 - 88) = v33;
        *(void *)(v32 - 80) = 0;
        *(void *)(v32 - 72) = 0;
        *(void *)(v32 - 88) = 0;
        *((_OWORD *)v31 - 4) = *(_OWORD *)(v4 + v30 - 64);
        *((void *)v31 - 5) = 0;
        *((void *)v31 - 4) = 0;
        *((void *)v31 - 6) = 0;
        *((_OWORD *)v31 - 3) = *(_OWORD *)(v4 + v30 - 48);
        *((void *)v31 - 4) = *(void *)(v4 + v30 - 32);
        *(void *)(v32 - 48) = 0;
        *(void *)(v32 - 40) = 0;
        *(void *)(v32 - 32) = 0;
        long long v34 = *(_OWORD *)(v4 + v30 - 24);
        *(v31 - 8) = *(unsigned char *)(v4 + v30 - 8);
        *(_OWORD *)(v31 - 24) = v34;
        v30 -= 96;
      }
      while ((char *)(v4 + v30) != v28);
      std::string v29 = &v27[v30];
    }
    uint64_t v48 = v29;
    std::string::size_type v35 = a1[1];
    uint64_t v36 = v49;
    if (v35 != (char *)v4)
    {
      do
      {
        *(void *)uint64_t v36 = *(void *)v4;
        long long v37 = *(_OWORD *)(v4 + 8);
        *((void *)v36 + 3) = *(void *)(v4 + 24);
        *(_OWORD *)(v36 + 8) = v37;
        *(void *)(v4 + 16) = 0;
        *(void *)(v4 + 24) = 0;
        *(void *)(v4 + 8) = 0;
        *((_OWORD *)v36 + 2) = *(_OWORD *)(v4 + 32);
        *((void *)v36 + 7) = 0;
        *((void *)v36 + 8) = 0;
        *((void *)v36 + 6) = 0;
        *((_OWORD *)v36 + 3) = *(_OWORD *)(v4 + 48);
        *((void *)v36 + 8) = *(void *)(v4 + 64);
        *(void *)(v4 + 48) = 0;
        *(void *)(v4 + 56) = 0;
        *(void *)(v4 + 64) = 0;
        long long v38 = *(_OWORD *)(v4 + 72);
        v36[88] = *(unsigned char *)(v4 + 88);
        *(_OWORD *)(v36 + 72) = v38;
        v36 += 96;
        v4 += 96;
      }
      while ((char *)v4 != v35);
      std::string v29 = v48;
      uint64_t v4 = (uint64_t)a1[1];
    }
    std::string v39 = *a1;
    *a1 = v29;
    a1[1] = v36;
    std::string v40 = a1[2];
    a1[2] = v50;
    int v49 = (char *)v4;
    unint64_t v50 = v40;
    uint64_t v47 = v39;
    uint64_t v48 = v39;
    if ((char *)v4 == v39)
    {
      if (!v4) {
        return (uint64_t)v27;
      }
    }
    else
    {
      do
      {
        int v49 = (char *)(v4 - 96);
        uint64_t v41 = *(void *)(v4 - 48);
        if (v41)
        {
          uint64_t v42 = *(void *)(v4 - 40);
          std::string v43 = *(void **)(v4 - 48);
          if (v42 != v41)
          {
            do
            {
              if (*(char *)(v42 - 1) < 0) {
                operator delete(*(void **)(v42 - 24));
              }
              v42 -= 32;
            }
            while (v42 != v41);
            std::string v43 = *(void **)(v4 - 48);
          }
          *(void *)(v4 - 40) = v41;
          operator delete(v43);
        }
        if (*(char *)(v4 - 65) < 0) {
          operator delete(*(void **)(v4 - 88));
        }
        uint64_t v4 = (uint64_t)v49;
      }
      while (v49 != v39);
      uint64_t v4 = (uint64_t)v47;
      if (!v47) {
        return (uint64_t)v27;
      }
    }
    operator delete((void *)v4);
    return (uint64_t)v27;
  }
  if (a2 == v6)
  {
    *(void *)a2 = *(void *)a3;
    long long v24 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)(a2 + 8) = v24;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a3 + 48);
    *(void *)(a2 + 64) = *(void *)(a3 + 64);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    long long v25 = &v7[96 * v8];
    long long v26 = *(_OWORD *)(a3 + 72);
    v25[88] = *(unsigned char *)(a3 + 88);
    *(_OWORD *)(v25 + 72) = v26;
    a1[1] = (char *)(a2 + 96);
  }
  else
  {
    uint64_t v10 = a1[1];
    if (v6 >= 0x60)
    {
      unint64_t v11 = v6 - 96;
      uint64_t v10 = a1[1];
      do
      {
        *(void *)uint64_t v10 = *(void *)v11;
        long long v12 = *(_OWORD *)(v11 + 8);
        *((void *)v10 + 3) = *(void *)(v11 + 24);
        *(_OWORD *)(v10 + 8) = v12;
        *(void *)(v11 + 16) = 0;
        *(void *)(v11 + 24) = 0;
        *(void *)(v11 + 8) = 0;
        *((_OWORD *)v10 + 2) = *(_OWORD *)(v11 + 32);
        *((void *)v10 + 7) = 0;
        *((void *)v10 + 8) = 0;
        *((void *)v10 + 6) = 0;
        *((_OWORD *)v10 + 3) = *(_OWORD *)(v11 + 48);
        *((void *)v10 + 8) = *(void *)(v11 + 64);
        *(void *)(v11 + 48) = 0;
        *(void *)(v11 + 56) = 0;
        *(void *)(v11 + 64) = 0;
        long long v13 = *(_OWORD *)(v11 + 72);
        v10[88] = *(unsigned char *)(v11 + 88);
        *(_OWORD *)(v10 + 72) = v13;
        v10 += 96;
        v11 += 96;
      }
      while (v11 < v6);
    }
    a1[1] = v10;
    sub_9C0054((uint64_t)&v47, a2, v6 - 96, v6);
    *(void *)uint64_t v4 = *(void *)a3;
    long long v14 = (void **)(v4 + 8);
    if (*(char *)(v4 + 31) < 0) {
      operator delete(*v14);
    }
    long long v15 = *(_OWORD *)(a3 + 8);
    *(void *)(v4 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)long long v14 = v15;
    *(unsigned char *)(a3 + 31) = 0;
    *(unsigned char *)(a3 + 8) = 0;
    uint64_t v16 = (void **)(v4 + 48);
    uint64_t v17 = *(void ***)(v4 + 48);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
    if (v17)
    {
      uint64_t v18 = *(void ***)(v4 + 56);
      uint64_t v19 = v17;
      if (v18 != v17)
      {
        do
        {
          if (*((char *)v18 - 1) < 0) {
            operator delete(*(v18 - 3));
          }
          v18 -= 4;
        }
        while (v18 != v17);
        uint64_t v19 = *v16;
      }
      *(void *)(v4 + 56) = v17;
      operator delete(v19);
      *uint64_t v16 = 0;
      *(void *)(v4 + 56) = 0;
      *(void *)(v4 + 64) = 0;
    }
    *(_OWORD *)(v4 + 48) = *(_OWORD *)(a3 + 48);
    *(void *)(v4 + 64) = *(void *)(a3 + 64);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    std::string v44 = &v7[96 * v8];
    long long v45 = *(_OWORD *)(a3 + 72);
    v44[88] = *(unsigned char *)(a3 + 88);
    *(_OWORD *)(v44 + 72) = v45;
  }
  return v4;
}

void sub_9BFDC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9BF744((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_9BFDDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == *(void *)(a1 + 24))
  {
    uint64_t v5 = *(void **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      unint64_t v11 = 0x5555555555555556 * ((v4 - (uint64_t)v5) >> 5);
      if ((void *)v4 == v5) {
        unint64_t v11 = 1;
      }
      if (v11 >= 0x2AAAAAAAAAAAAABLL) {
        sub_188D718();
      }
      unint64_t v12 = v11 >> 2;
      uint64_t v13 = 96 * v11;
      long long v14 = (char *)operator new(96 * v11);
      long long v15 = &v14[96 * v12];
      uint64_t v16 = &v14[v13];
      if (v4 == v6)
      {
        *(void *)a1 = v14;
        *(void *)(a1 + 8) = v15;
        *(void *)(a1 + 16) = v15;
        *(void *)(a1 + 24) = v16;
      }
      else
      {
        uint64_t v17 = &v15[v4 - v6];
        uint64_t v18 = 96 * v12;
        do
        {
          uint64_t v19 = &v14[v18];
          *(void *)uint64_t v19 = *(void *)v6;
          long long v20 = *(_OWORD *)(v6 + 8);
          *((void *)v19 + 3) = *(void *)(v6 + 24);
          *(_OWORD *)(v19 + 8) = v20;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
          *(void *)(v6 + 8) = 0;
          *((_OWORD *)v19 + 2) = *(_OWORD *)(v6 + 32);
          *((_OWORD *)v19 + 3) = *(_OWORD *)(v6 + 48);
          *((void *)v19 + 8) = *(void *)(v6 + 64);
          *(void *)(v6 + 48) = 0;
          *(void *)(v6 + 56) = 0;
          *(void *)(v6 + 64) = 0;
          long long v21 = *(_OWORD *)(v6 + 72);
          v19[88] = *(unsigned char *)(v6 + 88);
          *(_OWORD *)(v19 + 72) = v21;
          v18 += 96;
          v6 += 96;
        }
        while (v19 + 96 != v17);
        uint64_t v5 = *(void **)a1;
        uint64_t v22 = *(void *)(a1 + 8);
        uint64_t v23 = *(void *)(a1 + 16);
        *(void *)a1 = v14;
        *(void *)(a1 + 8) = v15;
        *(void *)(a1 + 16) = v17;
        *(void *)(a1 + 24) = v16;
        while (v23 != v22)
        {
          uint64_t v24 = *(void *)(v23 - 48);
          if (v24)
          {
            uint64_t v25 = *(void *)(v23 - 40);
            long long v26 = *(void **)(v23 - 48);
            if (v25 != v24)
            {
              do
              {
                if (*(char *)(v25 - 1) < 0) {
                  operator delete(*(void **)(v25 - 24));
                }
                v25 -= 32;
              }
              while (v25 != v24);
              long long v26 = *(void **)(v23 - 48);
            }
            *(void *)(v23 - 40) = v24;
            operator delete(v26);
          }
          if (*(char *)(v23 - 65) < 0) {
            operator delete(*(void **)(v23 - 88));
          }
          v23 -= 96;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(void *)(a1 + 16);
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(void *)a1) >> 5);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -96 * (v8 >> 1);
      sub_9C018C((uint64_t)&v29, *(void *)(a1 + 8), v4, v6 - 96 * (v8 >> 1));
      uint64_t v4 = v10;
      *(void *)(a1 + 8) += v9;
      *(void *)(a1 + 16) = v10;
    }
  }
  *(void *)uint64_t v4 = *(void *)a2;
  long long v27 = *(_OWORD *)(a2 + 8);
  *(void *)(v4 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(v4 + 8) = v27;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(v4 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  __n128 result = *(__n128 *)(a2 + 72);
  *(unsigned char *)(v4 + 88) = *(unsigned char *)(a2 + 88);
  *(__n128 *)(v4 + 72) = result;
  *(void *)(a1 + 16) += 96;
  return result;
}

uint64_t sub_9C0054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    uint64_t v8 = a3;
    uint64_t v9 = a4;
    do
    {
      uint64_t v12 = *(void *)(v8 - 96);
      v8 -= 96;
      *(void *)(v9 - 96) = v12;
      v9 -= 96;
      uint64_t v13 = (void **)(v9 + 8);
      if (*(char *)(v9 + 31) < 0) {
        operator delete(*v13);
      }
      long long v14 = *(_OWORD *)(v8 + 8);
      *(void *)(v9 + 24) = *(void *)(v8 + 24);
      *(_OWORD *)uint64_t v13 = v14;
      *(unsigned char *)(v7 - 65) = 0;
      *(unsigned char *)(v7 - 88) = 0;
      long long v15 = (void **)(v4 - 48);
      uint64_t v16 = *(void ***)(v4 - 48);
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v7 - 64);
      if (v16)
      {
        uint64_t v17 = *(void ***)(v4 - 40);
        uint64_t v10 = v16;
        if (v17 != v16)
        {
          do
          {
            if (*((char *)v17 - 1) < 0) {
              operator delete(*(v17 - 3));
            }
            v17 -= 4;
          }
          while (v17 != v16);
          uint64_t v10 = *v15;
        }
        *(void *)(v4 - 40) = v16;
        operator delete(v10);
        *long long v15 = 0;
        *(void *)(v4 - 40) = 0;
        *(void *)(v4 - 32) = 0;
      }
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v7 - 48);
      *(void *)(v4 - 32) = *(void *)(v7 - 32);
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      long long v11 = *(_OWORD *)(v7 - 24);
      *(unsigned char *)(v4 - 8) = *(unsigned char *)(v7 - 8);
      *(_OWORD *)(v4 - 24) = v11;
      uint64_t v4 = v9;
      uint64_t v7 = v8;
    }
    while (v8 != a2);
  }
  return a3;
}

uint64_t sub_9C018C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(void *)a4 = *(void *)v5;
      uint64_t v9 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*v9);
      }
      long long v10 = *(_OWORD *)(v5 + 8);
      *(void *)(a4 + 24) = *(void *)(v5 + 24);
      *(_OWORD *)uint64_t v9 = v10;
      *(unsigned char *)(v5 + 31) = 0;
      *(unsigned char *)(v5 + 8) = 0;
      long long v11 = (void **)(a4 + 48);
      uint64_t v12 = *(void ***)(a4 + 48);
      *(_OWORD *)(a4 + 32) = *(_OWORD *)(v5 + 32);
      if (v12)
      {
        uint64_t v13 = *(void ***)(a4 + 56);
        uint64_t v7 = v12;
        if (v13 != v12)
        {
          do
          {
            if (*((char *)v13 - 1) < 0) {
              operator delete(*(v13 - 3));
            }
            v13 -= 4;
          }
          while (v13 != v12);
          uint64_t v7 = *v11;
        }
        *(void *)(a4 + 56) = v12;
        operator delete(v7);
        *long long v11 = 0;
        *(void *)(a4 + 56) = 0;
        *(void *)(a4 + 64) = 0;
      }
      *(_OWORD *)(a4 + 48) = *(_OWORD *)(v5 + 48);
      *(void *)(a4 + 64) = *(void *)(v5 + 64);
      *(void *)(v5 + 48) = 0;
      *(void *)(v5 + 56) = 0;
      *(void *)(v5 + 64) = 0;
      long long v8 = *(_OWORD *)(v5 + 72);
      *(unsigned char *)(a4 + 88) = *(unsigned char *)(v5 + 88);
      *(_OWORD *)(a4 + 72) = v8;
      v5 += 96;
      a4 += 96;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_9C02A8(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*a1) >> 4) < a4)
  {
    if (v9)
    {
      long long v10 = (char *)a1[1];
      long long v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*(v10 - 17) < 0) {
            operator delete(*((void **)v10 - 5));
          }
          v10 -= 48;
        }
        while (v10 != v9);
        long long v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x555555555555555) {
      goto LABEL_46;
    }
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v23 = 2 * v22;
    if (2 * v22 <= a4) {
      uint64_t v23 = a4;
    }
    unint64_t v24 = v22 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v23;
    if (v24 > 0x555555555555555) {
LABEL_46:
    }
      sub_2E00();
    uint64_t v25 = 6 * v24;
    long long v21 = (void **)operator new(48 * v24);
    *a1 = v21;
    a1[1] = v21;
    a1[2] = &v21[v25];
    if (v6 != a3)
    {
      unint64_t v26 = 0;
      do
      {
        uint64_t v28 = v6 + v26;
        LODWORD(v21[v26 / 8]) = *(_DWORD *)(v6 + v26);
        char v29 = (char *)&v21[v26 / 8 + 1];
        uint64_t v30 = (void **)(v6 + v26 + 8);
        if (*(char *)(v6 + v26 + 31) < 0)
        {
          sub_4200(v29, *v30, *(void *)(v28 + 16));
        }
        else
        {
          *(_OWORD *)char v29 = *(_OWORD *)v30;
          v21[v26 / 8 + 3] = *(void **)(v6 + v26 + 24);
        }
        long long v27 = (char *)&v21[v26 / 8];
        *((_DWORD *)v27 + 8) = *(_DWORD *)(v28 + 32);
        *((_DWORD *)v27 + 10) = *(_DWORD *)(v28 + 40);
        v26 += 48;
      }
      while (v28 + 48 != a3);
      long long v21 = (void **)((char *)v21 + v26);
    }
LABEL_38:
    a1[1] = v21;
    return;
  }
  uint64_t v12 = (void **)a1[1];
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - v9) >> 4) >= a4)
  {
    if (a2 == a3)
    {
      long long v21 = (void **)*a1;
    }
    else
    {
      long long v21 = (void **)*a1;
      do
      {
        *(_DWORD *)uint64_t v9 = *(_DWORD *)v6;
        std::string::operator=((std::string *)(v9 + 8), (const std::string *)(v6 + 8));
        *((_DWORD *)v9 + 8) = *(_DWORD *)(v6 + 32);
        *((_DWORD *)v9 + 10) = *(_DWORD *)(v6 + 40);
        v21 += 6;
        v6 += 48;
        v9 += 48;
      }
      while (v6 != a3);
      uint64_t v12 = (void **)a1[1];
    }
    while (v12 != v21)
    {
      if (*((char *)v12 - 17) < 0) {
        operator delete(*(v12 - 5));
      }
      v12 -= 6;
    }
    goto LABEL_38;
  }
  uint64_t v13 = a2 + 16 * (((char *)v12 - v9) >> 4);
  if (v12 != (void **)v9)
  {
    do
    {
      *(_DWORD *)uint64_t v9 = *(_DWORD *)v6;
      std::string::operator=((std::string *)(v9 + 8), (const std::string *)(v6 + 8));
      *((_DWORD *)v9 + 8) = *(_DWORD *)(v6 + 32);
      *((_DWORD *)v9 + 10) = *(_DWORD *)(v6 + 40);
      v6 += 48;
      v9 += 48;
    }
    while (v6 != v13);
    uint64_t v9 = (char *)a1[1];
  }
  long long v14 = v9;
  if (v13 != a3)
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v18 = v13 + v15;
      *(_DWORD *)&v9[v15] = *(_DWORD *)(v13 + v15);
      uint64_t v19 = &v9[v15 + 8];
      long long v20 = (void **)(v13 + v15 + 8);
      if (*(char *)(v13 + v15 + 31) < 0)
      {
        sub_4200(v19, *v20, *(void *)(v18 + 16));
      }
      else
      {
        long long v16 = *(_OWORD *)v20;
        *(void *)&v9[v15 + 24] = *(void *)(v13 + v15 + 24);
        *(_OWORD *)uint64_t v19 = v16;
      }
      uint64_t v17 = &v9[v15];
      *((_DWORD *)v17 + 8) = *(_DWORD *)(v18 + 32);
      *((_DWORD *)v17 + 10) = *(_DWORD *)(v18 + 40);
      v15 += 48;
    }
    while (v18 + 48 != a3);
    long long v14 = &v9[v15];
  }
  a1[1] = v14;
}

void sub_9C05DC(_Unwind_Exception *exception_object)
{
  for (; v3; v3 -= 48)
  {
    if (*(char *)(v2 + v3 - 17) < 0) {
      operator delete(*(void **)(v2 + v3 - 40));
    }
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_9C0610(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAFEAFEAFEAFEAFEBLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x15015015015015) {
    sub_2E00();
  }
  if (0x5FD5FD5FD5FD5FD6 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5FD5FD5FD5FD5FD6 * ((a1[2] - *a1) >> 4);
  }
  if (0xAFEAFEAFEAFEAFEBLL * ((a1[2] - *a1) >> 4) >= 0xA80A80A80A80ALL) {
    unint64_t v6 = 0x15015015015015;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x15015015015015) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(3120 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[3120 * v6];
  uint64_t v9 = sub_9C076C((uint64_t)&v7[3120 * v3], a2);
  uint64_t v10 = v9 + 3120;
  uint64_t v12 = (char *)*a1;
  long long v11 = (char *)a1[1];
  if (v11 == (char *)*a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = (uint64_t)v8;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v11 -= 3120;
    uint64_t v9 = sub_9C076C(v9 - 3120, (uint64_t)v11);
  }
  while (v11 != v12);
  uint64_t v13 = (char *)*a1;
  long long v11 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v10;
  a1[2] = (uint64_t)v8;
  if (v11 != v13)
  {
    do
    {
      v11 -= 3120;
      sub_9BDD0C((uint64_t)v11);
    }
    while (v11 != v13);
    long long v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

uint64_t sub_9C076C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  sub_980FA8(a1 + 56, a2 + 56);
  *(_DWORD *)(a1 + 1016) = *(_DWORD *)(a2 + 1016);
  *(void *)(a1 + 1020) = *(void *)(a2 + 1020);
  *(void *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  *(void *)(a1 + 1040) = *(void *)(a2 + 1040);
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  *(void *)(a2 + 1048) = 0;
  *(_OWORD *)(a2 + 1032) = 0u;
  *(void *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 1056);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  *(void *)(a2 + 1072) = 0;
  *(_OWORD *)(a2 + 1056) = 0u;
  *(void *)(a1 + 1096) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
  *(void *)(a1 + 1096) = *(void *)(a2 + 1096);
  *(void *)(a2 + 1096) = 0;
  *(_OWORD *)(a2 + 1080) = 0u;
  long long v5 = *(_OWORD *)(a2 + 1104);
  *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
  *(_OWORD *)(a1 + 1104) = v5;
  *(void *)(a2 + 1104) = 0;
  *(_OWORD *)(a2 + 1112) = 0u;
  *(unsigned char *)(a1 + 1128) = *(unsigned char *)(a2 + 1128);
  *(_DWORD *)(a1 + 1136) = *(_DWORD *)(a2 + 1136);
  long long v6 = *(_OWORD *)(a2 + 1144);
  *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
  *(_OWORD *)(a1 + 1144) = v6;
  *(_OWORD *)(a2 + 1152) = 0u;
  *(void *)(a2 + 1144) = 0;
  *(_DWORD *)(a1 + 1168) = *(_DWORD *)(a2 + 1168);
  *(_OWORD *)(a1 + 1184) = 0u;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
  *(void *)(a2 + 1192) = 0;
  *(_OWORD *)(a2 + 1176) = 0u;
  long long v7 = *(_OWORD *)(a2 + 1200);
  *(_OWORD *)(a1 + 1216) = *(_OWORD *)(a2 + 1216);
  *(_OWORD *)(a1 + 1200) = v7;
  *(void *)(a1 + 1232) = 0;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1232) = *(_OWORD *)(a2 + 1232);
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  *(void *)(a2 + 1248) = 0;
  *(_OWORD *)(a2 + 1232) = 0u;
  *(void *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(void *)(a1 + 1256) = *(void *)(a2 + 1256);
  *(void *)(a1 + 1264) = *(void *)(a2 + 1264);
  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  *(void *)(a2 + 1272) = 0;
  *(_OWORD *)(a2 + 1256) = 0u;
  sub_4F4498(a1 + 1280, a2 + 1280);
  sub_4F4498(a1 + 1776, a2 + 1776);
  *(void *)(a1 + 2288) = 0;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_OWORD *)(a1 + 2272) = *(_OWORD *)(a2 + 2272);
  *(void *)(a1 + 2288) = *(void *)(a2 + 2288);
  *(void *)(a2 + 2288) = 0;
  *(_OWORD *)(a2 + 2272) = 0u;
  *(void *)(a1 + 2312) = 0;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(void *)(a1 + 2296) = *(void *)(a2 + 2296);
  *(void *)(a1 + 2304) = *(void *)(a2 + 2304);
  *(void *)(a1 + 2312) = *(void *)(a2 + 2312);
  *(void *)(a2 + 2312) = 0;
  *(_OWORD *)(a2 + 2296) = 0u;
  *(void *)(a1 + 2336) = 0;
  *(_OWORD *)(a1 + 2320) = 0u;
  *(_OWORD *)(a1 + 2320) = *(_OWORD *)(a2 + 2320);
  *(void *)(a1 + 2336) = *(void *)(a2 + 2336);
  *(void *)(a2 + 2336) = 0;
  *(_OWORD *)(a2 + 2320) = 0u;
  *(void *)(a1 + 2360) = 0;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(void *)(a1 + 2344) = *(void *)(a2 + 2344);
  *(void *)(a1 + 2352) = *(void *)(a2 + 2352);
  *(void *)(a1 + 2360) = *(void *)(a2 + 2360);
  *(void *)(a2 + 2360) = 0;
  *(_OWORD *)(a2 + 2344) = 0u;
  long long v8 = *(_OWORD *)(a2 + 2384);
  long long v9 = *(_OWORD *)(a2 + 2400);
  long long v10 = *(_OWORD *)(a2 + 2416);
  *(_DWORD *)(a1 + 2431) = *(_DWORD *)(a2 + 2431);
  *(_OWORD *)(a1 + 2416) = v10;
  *(_OWORD *)(a1 + 2400) = v9;
  *(_OWORD *)(a1 + 2384) = v8;
  *(_OWORD *)(a1 + 2368) = *(_OWORD *)(a2 + 2368);
  *(void *)(a1 + 2448) = 0;
  *(void *)(a1 + 2456) = 0;
  *(void *)(a1 + 2440) = 0;
  *(void *)(a1 + 2440) = *(void *)(a2 + 2440);
  *(void *)(a1 + 2448) = *(void *)(a2 + 2448);
  *(void *)(a1 + 2456) = *(void *)(a2 + 2456);
  *(void *)(a2 + 2448) = 0;
  *(void *)(a2 + 2440) = 0;
  *(void *)(a2 + 2456) = 0;
  int v11 = *(_DWORD *)(a2 + 2464);
  *(unsigned char *)(a1 + 2468) = *(unsigned char *)(a2 + 2468);
  *(_DWORD *)(a1 + 2464) = v11;
  uint64_t v12 = *(void *)(a2 + 2472);
  *(_DWORD *)(a1 + 2480) = *(_DWORD *)(a2 + 2480);
  *(void *)(a1 + 2472) = v12;
  long long v13 = *(_OWORD *)(a2 + 2488);
  *(void *)(a1 + 2504) = *(void *)(a2 + 2504);
  *(_OWORD *)(a1 + 2488) = v13;
  *(void *)(a2 + 2504) = 0;
  *(void *)(a2 + 2496) = 0;
  *(void *)(a2 + 2488) = 0;
  long long v14 = *(_OWORD *)(a2 + 2512);
  *(void *)(a1 + 2528) = *(void *)(a2 + 2528);
  *(_OWORD *)(a1 + 2512) = v14;
  *(void *)(a2 + 2520) = 0;
  *(void *)(a2 + 2512) = 0;
  *(void *)(a2 + 2528) = 0;
  long long v15 = *(_OWORD *)(a2 + 2536);
  *(void *)(a1 + 2552) = *(void *)(a2 + 2552);
  *(_OWORD *)(a1 + 2536) = v15;
  *(void *)(a2 + 2544) = 0;
  *(void *)(a2 + 2536) = 0;
  *(void *)(a2 + 2552) = 0;
  long long v16 = *(_OWORD *)(a2 + 2560);
  *(void *)(a1 + 2576) = *(void *)(a2 + 2576);
  *(_OWORD *)(a1 + 2560) = v16;
  *(void *)(a2 + 2568) = 0;
  *(void *)(a2 + 2560) = 0;
  *(void *)(a2 + 2576) = 0;
  long long v17 = *(_OWORD *)(a2 + 2584);
  *(void *)(a1 + 2600) = *(void *)(a2 + 2600);
  *(_OWORD *)(a1 + 2584) = v17;
  *(void *)(a1 + 2608) = 0;
  *(void *)(a1 + 2624) = 0;
  *(void *)(a1 + 2616) = 0;
  *(_OWORD *)(a1 + 2608) = *(_OWORD *)(a2 + 2608);
  *(void *)(a1 + 2624) = *(void *)(a2 + 2624);
  *(void *)(a2 + 2616) = 0;
  *(void *)(a2 + 2608) = 0;
  *(void *)(a2 + 2624) = 0;
  *(void *)(a1 + 2640) = 0;
  *(void *)(a1 + 2632) = 0;
  *(void *)(a1 + 2648) = 0;
  *(void *)(a1 + 2632) = *(void *)(a2 + 2632);
  *(void *)(a1 + 2640) = *(void *)(a2 + 2640);
  *(void *)(a1 + 2648) = *(void *)(a2 + 2648);
  *(void *)(a2 + 2640) = 0;
  *(void *)(a2 + 2632) = 0;
  *(void *)(a2 + 2648) = 0;
  *(void *)(a1 + 2664) = 0;
  *(void *)(a1 + 2656) = 0;
  *(void *)(a1 + 2672) = 0;
  *(_OWORD *)(a1 + 2656) = *(_OWORD *)(a2 + 2656);
  *(void *)(a1 + 2672) = *(void *)(a2 + 2672);
  *(void *)(a2 + 2664) = 0;
  *(void *)(a2 + 2656) = 0;
  *(void *)(a2 + 2672) = 0;
  long long v18 = *(_OWORD *)(a2 + 2680);
  *(void *)(a1 + 2696) = *(void *)(a2 + 2696);
  *(_OWORD *)(a1 + 2680) = v18;
  *(void *)(a1 + 2704) = 0;
  *(void *)(a1 + 2720) = 0;
  *(void *)(a1 + 2712) = 0;
  *(_OWORD *)(a1 + 2704) = *(_OWORD *)(a2 + 2704);
  *(void *)(a1 + 2720) = *(void *)(a2 + 2720);
  *(void *)(a2 + 2712) = 0;
  *(void *)(a2 + 2704) = 0;
  *(void *)(a2 + 2720) = 0;
  *(_DWORD *)(a1 + 2728) = *(_DWORD *)(a2 + 2728);
  *(void *)(a1 + 2736) = *(void *)(a2 + 2736);
  *(_OWORD *)(a1 + 2744) = *(_OWORD *)(a2 + 2744);
  long long v19 = *(_OWORD *)(a2 + 2760);
  long long v20 = *(_OWORD *)(a2 + 2776);
  long long v21 = *(_OWORD *)(a2 + 2792);
  *(_DWORD *)(a1 + 2807) = *(_DWORD *)(a2 + 2807);
  *(_OWORD *)(a1 + 2776) = v20;
  *(_OWORD *)(a1 + 2792) = v21;
  *(_OWORD *)(a1 + 2760) = v19;
  *(void *)(a1 + 2816) = 0;
  *(void *)(a1 + 2832) = 0;
  *(void *)(a1 + 2824) = 0;
  *(_OWORD *)(a1 + 2816) = *(_OWORD *)(a2 + 2816);
  *(void *)(a1 + 2832) = *(void *)(a2 + 2832);
  *(void *)(a2 + 2824) = 0;
  *(void *)(a2 + 2816) = 0;
  *(void *)(a2 + 2832) = 0;
  LODWORD(v12) = *(_DWORD *)(a2 + 2840);
  *(unsigned char *)(a1 + 2844) = *(unsigned char *)(a2 + 2844);
  *(_DWORD *)(a1 + 2840) = v12;
  uint64_t v22 = *(void *)(a2 + 2848);
  *(_DWORD *)(a1 + 2856) = *(_DWORD *)(a2 + 2856);
  *(void *)(a1 + 2848) = v22;
  long long v23 = *(_OWORD *)(a2 + 2864);
  *(void *)(a1 + 2880) = *(void *)(a2 + 2880);
  *(_OWORD *)(a1 + 2864) = v23;
  *(void *)(a2 + 2880) = 0;
  *(void *)(a2 + 2872) = 0;
  *(void *)(a2 + 2864) = 0;
  long long v24 = *(_OWORD *)(a2 + 2888);
  *(void *)(a1 + 2904) = *(void *)(a2 + 2904);
  *(_OWORD *)(a1 + 2888) = v24;
  *(void *)(a2 + 2896) = 0;
  *(void *)(a2 + 2888) = 0;
  *(void *)(a2 + 2904) = 0;
  long long v25 = *(_OWORD *)(a2 + 2912);
  *(void *)(a1 + 2928) = *(void *)(a2 + 2928);
  *(_OWORD *)(a1 + 2912) = v25;
  *(void *)(a2 + 2920) = 0;
  *(void *)(a2 + 2912) = 0;
  *(void *)(a2 + 2928) = 0;
  long long v26 = *(_OWORD *)(a2 + 2936);
  *(void *)(a1 + 2952) = *(void *)(a2 + 2952);
  *(_OWORD *)(a1 + 2936) = v26;
  *(void *)(a2 + 2944) = 0;
  *(void *)(a2 + 2936) = 0;
  *(void *)(a2 + 2952) = 0;
  long long v27 = *(_OWORD *)(a2 + 2960);
  *(void *)(a1 + 2976) = *(void *)(a2 + 2976);
  *(_OWORD *)(a1 + 2960) = v27;
  *(void *)(a1 + 2984) = 0;
  *(void *)(a1 + 3000) = 0;
  *(void *)(a1 + 2992) = 0;
  *(void *)(a1 + 2984) = *(void *)(a2 + 2984);
  *(void *)(a1 + 2992) = *(void *)(a2 + 2992);
  *(void *)(a1 + 3000) = *(void *)(a2 + 3000);
  *(void *)(a2 + 2992) = 0;
  *(void *)(a2 + 2984) = 0;
  *(void *)(a2 + 3000) = 0;
  *(void *)(a1 + 3016) = 0;
  *(void *)(a1 + 3008) = 0;
  *(void *)(a1 + 3024) = 0;
  *(_OWORD *)(a1 + 3008) = *(_OWORD *)(a2 + 3008);
  *(void *)(a1 + 3024) = *(void *)(a2 + 3024);
  *(void *)(a2 + 3016) = 0;
  *(void *)(a2 + 3008) = 0;
  *(void *)(a2 + 3024) = 0;
  *(void *)(a1 + 3040) = 0;
  *(void *)(a1 + 3032) = 0;
  *(void *)(a1 + 3048) = 0;
  *(void *)(a1 + 3032) = *(void *)(a2 + 3032);
  *(void *)(a1 + 3040) = *(void *)(a2 + 3040);
  *(void *)(a1 + 3048) = *(void *)(a2 + 3048);
  *(void *)(a2 + 3040) = 0;
  *(void *)(a2 + 3032) = 0;
  *(void *)(a2 + 3048) = 0;
  long long v28 = *(_OWORD *)(a2 + 3056);
  *(void *)(a1 + 3072) = *(void *)(a2 + 3072);
  *(_OWORD *)(a1 + 3056) = v28;
  *(void *)(a1 + 3080) = 0;
  *(void *)(a1 + 3096) = 0;
  *(void *)(a1 + 3088) = 0;
  *(void *)(a1 + 3080) = *(void *)(a2 + 3080);
  *(void *)(a1 + 3088) = *(void *)(a2 + 3088);
  *(void *)(a1 + 3096) = *(void *)(a2 + 3096);
  *(void *)(a2 + 3088) = 0;
  *(void *)(a2 + 3080) = 0;
  *(void *)(a2 + 3096) = 0;
  *(_DWORD *)(a1 + 3104) = *(_DWORD *)(a2 + 3104);
  *(void *)(a1 + 3112) = *(void *)(a2 + 3112);
  return a1;
}

void *sub_9C0DA8(void *result, char *__src, char *a3, size_t __sz)
{
  long long v6 = __src;
  long long v7 = result;
  uint64_t v8 = result[2];
  long long v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 2) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x1555555555555555) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= __sz) {
      uint64_t v11 = __sz;
    }
    unint64_t v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 12 * v12;
    __n128 result = operator new(12 * v12);
    long long v9 = (char *)result;
    *long long v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    uint64_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14 - 2);
    }
    long long v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  long long v15 = (void **)(result + 1);
  long long v16 = (unsigned char *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 2) >= __sz)
  {
    uint64_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v18 = v14 - 2;
    long long v19 = (void *)*result;
LABEL_21:
    __n128 result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  long long v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9 - 2);
    long long v9 = (char *)*v15;
  }
  uint64_t v14 = a3 - v17;
  if (v14)
  {
    size_t v18 = v14 - 2;
    long long v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *long long v15 = &v9[v14];
  return result;
}

char *sub_9C0F2C(int64x2_t *a1)
{
  uint64_t v3 = a1->i64[0];
  unint64_t v2 = a1->u64[1];
  uint64_t v4 = (uint64_t)(v2 - a1->i64[0]) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = a1[1].i64[0];
  if ((v6 - v3) >> 4 > v5) {
    unint64_t v5 = (v6 - v3) >> 4;
  }
  if ((unint64_t)(v6 - v3) >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v5 = 0x7FFFFFFFFFFFFFFLL;
  }
  long long v20 = a1 + 1;
  if (v5 >> 59) {
    sub_188D718();
  }
  uint64_t v7 = 32 * v5;
  uint64_t v8 = (char *)operator new(32 * v5);
  long long v9 = &v8[32 * v4];
  unint64_t v10 = &v8[v7];
  *(_OWORD *)long long v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  v9[24] = 1;
  uint64_t v11 = v9 + 32;
  if (v2 == v3)
  {
    int64x2_t v15 = vdupq_n_s64(v2);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = &v9[v12];
      uint64_t v14 = v2 + v12;
      *((_OWORD *)v13 - 2) = *(_OWORD *)(v2 + v12 - 32);
      *((void *)v13 - 2) = *(void *)(v2 + v12 - 16);
      *(void *)(v14 - 32) = 0;
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(v13 - 8) = *(unsigned char *)(v2 + v12 - 8);
      v12 -= 32;
    }
    while (v2 + v12 != v3);
    int64x2_t v15 = *a1;
    uint64_t v6 = a1[1].i64[0];
    v9 += v12;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v11;
  int64x2_t v18 = v15;
  a1[1].i64[0] = (uint64_t)v10;
  uint64_t v19 = v6;
  long long __p = (void *)v15.i64[0];
  sub_9C106C((uint64_t)&__p, (void **)v15.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

uint64_t sub_9C106C(uint64_t result, void **a2)
{
  unint64_t v2 = *(void ***)(result + 16);
  if (v2 != a2)
  {
    uint64_t v3 = *(void ***)(result + 16);
    uint64_t v24 = result;
    while (1)
    {
      uint64_t v6 = (char *)*(v3 - 4);
      v3 -= 4;
      unint64_t v5 = v6;
      *(void *)(result + 16) = v3;
      if (!v6) {
        goto LABEL_5;
      }
      long long v25 = v3;
      long long v27 = v2;
      uint64_t v7 = (char *)*(v2 - 3);
      uint64_t v4 = v5;
      if (v7 != v5) {
        break;
      }
LABEL_4:
      *(v27 - 3) = v5;
      operator delete(v4);
      __n128 result = v24;
      uint64_t v3 = *(void ***)(v24 + 16);
LABEL_5:
      unint64_t v2 = v3;
      if (v3 == a2) {
        return result;
      }
    }
    while (1)
    {
      uint64_t v8 = (void **)*((void *)v7 - 3);
      if (!v8) {
        goto LABEL_36;
      }
      long long v9 = (void **)*((void *)v7 - 2);
      unint64_t v10 = (void *)*((void *)v7 - 3);
      if (v9 != v8) {
        break;
      }
LABEL_35:
      *((void *)v7 - 2) = v8;
      operator delete(v10);
LABEL_36:
      if ((*(v7 - 49) & 0x80000000) == 0)
      {
        long long v21 = (void *)*((void *)v7 - 12);
        if (!v21) {
          goto LABEL_10;
        }
LABEL_40:
        uint64_t v22 = *((void *)v7 - 11);
        long long v23 = v21;
        if ((void *)v22 != v21)
        {
          do
            uint64_t v22 = sub_92A5D4(v22 - 5704);
          while ((void *)v22 != v21);
          long long v23 = (void *)*((void *)v7 - 12);
        }
        *((void *)v7 - 11) = v21;
        operator delete(v23);
        goto LABEL_10;
      }
      operator delete(*((void **)v7 - 9));
      long long v21 = (void *)*((void *)v7 - 12);
      if (v21) {
        goto LABEL_40;
      }
LABEL_10:
      v7 -= 104;
      if (v7 == v5)
      {
        uint64_t v4 = *v25;
        goto LABEL_4;
      }
    }
    while (1)
    {
      uint64_t v11 = (void **)*(v9 - 3);
      if (v11)
      {
        uint64_t v12 = (void **)*(v9 - 2);
        uint64_t v13 = *(v9 - 3);
        if (v12 != v11)
        {
          uint64_t v14 = (void **)*(v9 - 2);
          do
          {
            long long v17 = (char *)*(v14 - 3);
            v14 -= 3;
            long long v16 = v17;
            if (v17)
            {
              int64x2_t v18 = (char *)*(v12 - 2);
              int64x2_t v15 = v16;
              if (v18 != v16)
              {
                do
                {
                  uint64_t v19 = (void *)*((void *)v18 - 3);
                  if (v19)
                  {
                    *((void *)v18 - 2) = v19;
                    operator delete(v19);
                  }
                  v18 -= 32;
                }
                while (v18 != v16);
                int64x2_t v15 = *v14;
              }
              *(v12 - 2) = v16;
              operator delete(v15);
            }
            uint64_t v12 = v14;
          }
          while (v14 != v11);
          uint64_t v13 = *(v9 - 3);
        }
        *(v9 - 2) = v11;
        operator delete(v13);
      }
      if (*((char *)v9 - 25) < 0)
      {
        operator delete(*(v9 - 6));
        long long v20 = v9 - 9;
        if (*((char *)v9 - 49) < 0) {
LABEL_33:
        }
          operator delete(*v20);
      }
      else
      {
        long long v20 = v9 - 9;
        if (*((char *)v9 - 49) < 0) {
          goto LABEL_33;
        }
      }
      long long v9 = v20;
      if (v20 == v8)
      {
        unint64_t v10 = (void *)*((void *)v7 - 3);
        goto LABEL_35;
      }
    }
  }
  return result;
}

char *sub_9C1274(void **a1)
{
  uint64_t v3 = (char *)*a1;
  unint64_t v2 = (char *)a1[1];
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  if (0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[2] - v3) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v6 = 0x276276276276276;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0x276276276276276) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(104 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[104 * v4];
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *(_OWORD *)uint64_t v8 = 0u;
  long long v9 = &v7[104 * v6];
  *((void *)v8 + 6) = 0;
  *((void *)v8 + 7) = -1;
  *((void *)v8 + 8) = -1;
  *((void *)v8 + 9) = -1;
  *((void *)v8 + 11) = 0;
  *((void *)v8 + 12) = 0;
  *((void *)v8 + 10) = 0;
  unint64_t v10 = v8 + 104;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_18;
  }
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = &v8[v11];
    uint64_t v13 = &v2[v11];
    *((_DWORD *)v12 - 26) = *(_DWORD *)&v2[v11 - 104];
    *((void *)v12 - 11) = 0;
    *((void *)v12 - 10) = 0;
    *((_OWORD *)v12 - 6) = *(_OWORD *)&v2[v11 - 96];
    *((void *)v12 - 10) = *(void *)&v2[v11 - 80];
    *((void *)v13 - 12) = 0;
    *((void *)v13 - 11) = 0;
    *((void *)v13 - 10) = 0;
    long long v14 = *(_OWORD *)&v2[v11 - 72];
    *((void *)v12 - 7) = *(void *)&v2[v11 - 56];
    *(_OWORD *)(v12 - 72) = v14;
    *((void *)v13 - 8) = 0;
    *((void *)v13 - 7) = 0;
    *((void *)v13 - 9) = 0;
    long long v15 = *(_OWORD *)&v2[v11 - 48];
    *((void *)v12 - 4) = *(void *)&v2[v11 - 32];
    *((_OWORD *)v12 - 3) = v15;
    *((void *)v12 - 2) = 0;
    *((void *)v12 - 1) = 0;
    *(_OWORD *)(v12 - 24) = *(_OWORD *)&v2[v11 - 24];
    *((void *)v12 - 1) = *(void *)&v2[v11 - 8];
    *((void *)v13 - 3) = 0;
    *((void *)v13 - 2) = 0;
    *((void *)v13 - 1) = 0;
    v11 -= 104;
  }
  while (&v2[v11] != v3);
  long long v16 = (char *)*a1;
  unint64_t v2 = (char *)a1[1];
  *a1 = &v8[v11];
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v16)
  {
    do
    {
      v2 -= 104;
      sub_9BE1F4((uint64_t)(a1 + 2), (uint64_t)v2);
    }
    while (v2 != v16);
    unint64_t v2 = v16;
  }
  if (v2) {
LABEL_18:
  }
    operator delete(v2);
  return v10;
}

void sub_9C1454(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1096))
  {
    int v2 = *(_DWORD *)(a1 + 1088);
    switch(v2)
    {
      case 3:
        sub_3AFFFC(a1 + 32);
        break;
      case 1:
        uint64_t v3 = *(void **)(a1 + 48);
        if (v3)
        {
          *(void *)(a1 + 56) = v3;
          operator delete(v3);
        }
        break;
      case 0:
        if (*(unsigned char *)(a1 + 60)) {
          *(unsigned char *)(a1 + 60) = 0;
        }
        break;
    }
    *(unsigned char *)(a1 + 1096) = 0;
  }
}

uint64_t sub_9C14C4(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  int v4 = *(_DWORD *)(a1 + 1088);
  uint64_t v5 = *(unsigned int *)(a2 + 1088);
  if (v4 == v5)
  {
    switch(v4)
    {
      case 0:
        long long v13 = *(_OWORD *)a2;
        long long v14 = *(_OWORD *)(a2 + 16);
        long long v15 = *(_OWORD *)(a2 + 32);
        *(void *)(a1 + 46) = *(void *)(a2 + 46);
        *(_OWORD *)(a1 + 16) = v14;
        *(_OWORD *)(a1 + 32) = v15;
        *(_OWORD *)a1 = v13;
        if (*(unsigned char *)(a2 + 60))
        {
          int v16 = *(_DWORD *)(a2 + 56);
          if (!*(unsigned char *)(a1 + 60)) {
            *(unsigned char *)(a1 + 60) = 1;
          }
          *(_DWORD *)(a1 + 56) = v16;
          uint64_t result = a1;
        }
        else
        {
          if (!*(unsigned char *)(a1 + 60)) {
            return a1;
          }
          *(unsigned char *)(a1 + 60) = 0;
          uint64_t result = a1;
        }
        break;
      case 1:
        long long v17 = *(_OWORD *)a2;
        long long v18 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
        *(_OWORD *)a1 = v17;
        *(_OWORD *)(a1 + 16) = v18;
        uint64_t v19 = *(void **)(a1 + 48);
        if (v19)
        {
          *(void *)(a1 + 56) = v19;
          operator delete(v19);
          *(void *)(a1 + 48) = 0;
          *(void *)(a1 + 56) = 0;
          *(void *)(a1 + 64) = 0;
        }
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a2 + 48) = 0;
        *(void *)(a2 + 56) = 0;
        *(void *)(a2 + 64) = 0;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        return a1;
      case 2:
      case 4:
        long long v6 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = v6;
        return a1;
      case 3:
        long long v20 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
        *(_OWORD *)a1 = v20;
        sub_8E5980(a1 + 32, a2 + 32);
        return a1;
      default:
        return a1;
    }
    return result;
  }
  switch(v4)
  {
    case 3:
      sub_3AFFFC(a1 + 32);
LABEL_14:
      uint64_t v5 = *(unsigned int *)(a2 + 1088);
      break;
    case 1:
      uint64_t v8 = *(void **)(a1 + 48);
      if (v8)
      {
        *(void *)(a1 + 56) = v8;
        operator delete(v8);
      }
      goto LABEL_14;
    case 0:
      if (*(unsigned char *)(a1 + 60)) {
        *(unsigned char *)(a1 + 60) = 0;
      }
      goto LABEL_14;
  }
  if (v5)
  {
    sub_9C16F4(v5, (long long *)a2, a1);
  }
  else
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    long long v11 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 46) = *(void *)(a2 + 46);
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = v11;
    *(_OWORD *)a1 = v9;
    int v12 = *(unsigned __int8 *)(a2 + 60);
    *(unsigned char *)(a1 + 60) = v12;
    if (v12) {
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    }
  }
  *(_DWORD *)(a1 + 1088) = *(_DWORD *)(a2 + 1088);
  return a1;
}

uint64_t sub_9C16F4(uint64_t result, long long *a2, uint64_t a3)
{
  switch((int)result)
  {
    case 1:
      long long v6 = *a2;
      long long v7 = a2[1];
      *(_OWORD *)(a3 + 28) = *(long long *)((char *)a2 + 28);
      *(void *)(a3 + 48) = 0;
      *(_OWORD *)a3 = v6;
      *(_OWORD *)(a3 + 16) = v7;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
      long long v9 = (unsigned char *)*((void *)a2 + 6);
      uint64_t v8 = (unsigned char *)*((void *)a2 + 7);
      int64_t v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0) {
          sub_2E00();
        }
        long long v11 = (char *)operator new(v8 - v9);
        *(void *)(a3 + 48) = v11;
        *(void *)(a3 + 56) = v11;
        int v12 = &v11[8 * (v10 >> 3)];
        *(void *)(a3 + 64) = v12;
        uint64_t result = (uint64_t)memcpy(v11, v9, v10);
        *(void *)(a3 + 56) = v12;
      }
      *(unsigned char *)(a3 + 72) = *((unsigned char *)a2 + 72);
      break;
    case 2:
    case 4:
      long long v5 = *a2;
      *(_DWORD *)(a3 + 16) = *((_DWORD *)a2 + 4);
      *(_OWORD *)a3 = v5;
      break;
    case 3:
      long long v13 = *a2;
      *(_OWORD *)(a3 + 12) = *(long long *)((char *)a2 + 12);
      *(_OWORD *)a3 = v13;
      uint64_t v14 = (uint64_t)(a2 + 2);
      uint64_t result = sub_7A3ACC(a3 + 32, v14);
      break;
    default:
      return result;
  }
  return result;
}

void sub_9C181C(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *sub_9C1848(void *result, char *__src, char *a3, unint64_t a4)
{
  long long v6 = __src;
  long long v7 = result;
  uint64_t v8 = result[2];
  long long v9 = (char *)*result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *result) >> 2) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x924924924924924) {
      goto LABEL_23;
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x492492492492492 ? 0x924924924924924 : v11;
    if (v12 > 0x924924924924924) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 28 * v12;
    uint64_t result = operator new(28 * v12);
    long long v9 = (char *)result;
    *long long v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    long long v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  long long v15 = (void **)(result + 1);
  int v16 = (unsigned char *)result[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v16 - v9) >> 2) >= a4)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    long long v18 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  long long v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    long long v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    long long v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *long long v15 = &v9[v14];
  return result;
}

uint64_t sub_9C19E4(uint64_t *a1, int *a2)
{
  unint64_t v3 = 0xBC7FD20AC579B779 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xB7D4EA19221C0) {
    sub_2E00();
  }
  if (0x78FFA4158AF36EF2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x78FFA4158AF36EF2 * ((a1[2] - *a1) >> 3);
  }
  if (0xBC7FD20AC579B779 * ((a1[2] - *a1) >> 3) >= 0x5BEA750C910E0) {
    unint64_t v6 = 0xB7D4EA19221C0;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xB7D4EA19221C0) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(5704 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[5704 * v3];
  long long v15 = &v7[5704 * v6];
  sub_9BE750(v14, *a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 5704;
  uint64_t v11 = (char *)*a1;
  unint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 5704;
      uint64_t v8 = sub_9C1BEC(v8 - 5704, (uint64_t)v10);
    }
    while (v10 != v11);
    unint64_t v12 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 5704;
        sub_92A5D4((uint64_t)v10);
      }
      while (v10 != v12);
      unint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 5704;
}

void sub_9C1B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9C1B8C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9C1B8C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 5704;
    sub_92A5D4(i - 5704);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_9C1BEC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  int v6 = *(unsigned __int8 *)(a2 + 80);
  *(unsigned char *)(a1 + 80) = v6;
  if (v6) {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  }
  int v7 = *(unsigned __int8 *)(a2 + 792);
  *(unsigned char *)(a1 + 792) = v7;
  if (v7) {
    sub_9C2348(a1 + 88, a2 + 88);
  }
  int v8 = *(unsigned __int8 *)(a2 + 840);
  *(unsigned char *)(a1 + 840) = v8;
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 800);
    *(_DWORD *)(a1 + 808) = *(_DWORD *)(a2 + 808);
    *(void *)(a1 + 800) = v9;
    long long v10 = *(_OWORD *)(a2 + 816);
    *(void *)(a1 + 832) = *(void *)(a2 + 832);
    *(_OWORD *)(a1 + 816) = v10;
    *(void *)(a2 + 832) = 0;
    *(void *)(a2 + 824) = 0;
    *(void *)(a2 + 816) = 0;
  }
  int v11 = *(unsigned __int8 *)(a2 + 952);
  *(unsigned char *)(a1 + 952) = v11;
  if (v11)
  {
    long long v12 = *(_OWORD *)(a2 + 848);
    *(_OWORD *)(a1 + 858) = *(_OWORD *)(a2 + 858);
    *(_OWORD *)(a1 + 848) = v12;
    *(void *)(a1 + 880) = 0;
    *(void *)(a1 + 896) = 0;
    *(void *)(a1 + 888) = 0;
    *(_OWORD *)(a1 + 880) = *(_OWORD *)(a2 + 880);
    *(void *)(a1 + 896) = *(void *)(a2 + 896);
    *(void *)(a2 + 896) = 0;
    *(void *)(a2 + 888) = 0;
    *(void *)(a2 + 880) = 0;
    *(unsigned char *)(a1 + 904) = *(unsigned char *)(a2 + 904);
    *(unsigned char *)(a1 + 912) = *(unsigned char *)(a2 + 912);
    *(void *)(a1 + 920) = 0;
    *(void *)(a1 + 936) = 0;
    *(void *)(a1 + 928) = 0;
    *(void *)(a1 + 920) = *(void *)(a2 + 920);
    *(void *)(a1 + 928) = *(void *)(a2 + 928);
    *(void *)(a1 + 936) = *(void *)(a2 + 936);
    *(void *)(a2 + 928) = 0;
    *(void *)(a2 + 920) = 0;
    *(void *)(a2 + 936) = 0;
    *(void *)(a1 + 944) = *(void *)(a2 + 944);
  }
  int v13 = *(unsigned __int8 *)(a2 + 1000);
  *(unsigned char *)(a1 + 1000) = v13;
  if (v13)
  {
    int v14 = *(_DWORD *)(a2 + 960);
    *(unsigned char *)(a1 + 964) = *(unsigned char *)(a2 + 964);
    *(_DWORD *)(a1 + 960) = v14;
    *(void *)(a1 + 968) = 0;
    *(void *)(a1 + 984) = 0;
    *(void *)(a1 + 976) = 0;
    *(void *)(a1 + 968) = *(void *)(a2 + 968);
    *(void *)(a1 + 976) = *(void *)(a2 + 976);
    *(void *)(a1 + 984) = *(void *)(a2 + 984);
    *(void *)(a2 + 976) = 0;
    *(void *)(a2 + 968) = 0;
    *(void *)(a2 + 984) = 0;
    *(void *)(a1 + 992) = *(void *)(a2 + 992);
  }
  *(_DWORD *)(a1 + 1008) = *(_DWORD *)(a2 + 1008);
  sub_981E40(a1 + 1016, a2 + 1016);
  *(void *)(a1 + 1616) = 0;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_OWORD *)(a1 + 1600) = *(_OWORD *)(a2 + 1600);
  *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  *(void *)(a2 + 1616) = 0;
  *(_OWORD *)(a2 + 1600) = 0u;
  *(void *)(a1 + 1640) = 0;
  v15[38] = 0u;
  *((void *)v15 + 76) = *(void *)(a2 + 1624);
  *(void *)(a1 + 1632) = *(void *)(a2 + 1632);
  *(void *)(a1 + 1640) = *(void *)(a2 + 1640);
  *(void *)(a2 + 1640) = 0;
  *(_OWORD *)(a2 + 1624) = 0u;
  *(void *)(a1 + 1664) = 0;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1648) = *(_OWORD *)(a2 + 1648);
  *(void *)(a1 + 1664) = *(void *)(a2 + 1664);
  *(void *)(a2 + 1664) = 0;
  *(_OWORD *)(a2 + 1648) = 0u;
  *(void *)(a1 + 1688) = 0;
  v15[41] = 0u;
  *((void *)v15 + 82) = *(void *)(a2 + 1672);
  *(void *)(a1 + 1680) = *(void *)(a2 + 1680);
  *(void *)(a1 + 1688) = *(void *)(a2 + 1688);
  *(void *)(a2 + 1688) = 0;
  *(_OWORD *)(a2 + 1672) = 0u;
  *(void *)(a1 + 1712) = 0;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1696) = *(_OWORD *)(a2 + 1696);
  *(void *)(a1 + 1712) = *(void *)(a2 + 1712);
  *(void *)(a2 + 1712) = 0;
  *(_OWORD *)(a2 + 1696) = 0u;
  *(void *)(a1 + 1736) = 0;
  v15[44] = 0u;
  *((void *)v15 + 88) = *(void *)(a2 + 1720);
  *(void *)(a1 + 1728) = *(void *)(a2 + 1728);
  *(void *)(a1 + 1736) = *(void *)(a2 + 1736);
  *(void *)(a2 + 1736) = 0;
  *(_OWORD *)(a2 + 1720) = 0u;
  *(void *)(a1 + 1760) = 0;
  *(_OWORD *)(a1 + 1744) = 0u;
  *(_OWORD *)(a1 + 1744) = *(_OWORD *)(a2 + 1744);
  *(void *)(a1 + 1760) = *(void *)(a2 + 1760);
  *(void *)(a2 + 1760) = 0;
  *(_OWORD *)(a2 + 1744) = 0u;
  *(void *)(a1 + 1784) = 0;
  v15[47] = 0u;
  *((void *)v15 + 94) = *(void *)(a2 + 1768);
  *(void *)(a1 + 1776) = *(void *)(a2 + 1776);
  *(void *)(a1 + 1784) = *(void *)(a2 + 1784);
  uint64_t v16 = *(void *)(a2 + 1792);
  *(_OWORD *)(a2 + 1768) = 0u;
  *(_OWORD *)(a2 + 1784) = 0u;
  *(void *)(a1 + 1792) = v16;
  LODWORD(v16) = *(_DWORD *)(a2 + 1800);
  *(unsigned char *)(a1 + 1804) = *(unsigned char *)(a2 + 1804);
  *(_DWORD *)(a1 + 1800) = v16;
  long long v17 = *(_OWORD *)(a2 + 1808);
  *(void *)(a1 + 1824) = *(void *)(a2 + 1824);
  *(_OWORD *)(a1 + 1808) = v17;
  *(void *)(a2 + 1808) = 0;
  *(_OWORD *)(a2 + 1816) = 0u;
  long long v18 = *(_OWORD *)(a2 + 1832);
  *(void *)(a1 + 1848) = *(void *)(a2 + 1848);
  v15[51] = v18;
  *(_OWORD *)(a2 + 1840) = 0u;
  *(void *)(a2 + 1832) = 0;
  *(unsigned char *)(a1 + 1856) = *(unsigned char *)(a2 + 1856);
  *(void *)(a1 + 1864) = 0;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(void *)(a1 + 1864) = *(void *)(a2 + 1864);
  *(void *)(a1 + 1872) = *(void *)(a2 + 1872);
  *(void *)(a1 + 1880) = *(void *)(a2 + 1880);
  *(void *)(a2 + 1880) = 0;
  *(_OWORD *)(a2 + 1864) = 0u;
  long long v19 = *(_OWORD *)(a2 + 1888);
  *(void *)(a1 + 1904) = *(void *)(a2 + 1904);
  *(_OWORD *)(a1 + 1888) = v19;
  LODWORD(v16) = *(unsigned __int8 *)(a2 + 1916);
  *(unsigned char *)(a1 + 1916) = v16;
  if (v16) {
    *(_DWORD *)(a1 + 1912) = *(_DWORD *)(a2 + 1912);
  }
  *(void *)(a1 + 1936) = 0;
  *(_OWORD *)(a1 + 1920) = 0uLL;
  *(_OWORD *)(a1 + 1920) = *(_OWORD *)(a2 + 1920);
  *(void *)(a1 + 1936) = *(void *)(a2 + 1936);
  *(void *)(a2 + 1936) = 0;
  *(_OWORD *)(a2 + 1920) = 0uLL;
  *(void *)(a1 + 1960) = 0;
  *(_OWORD *)(a1 + 1944) = 0uLL;
  *(void *)(a1 + 1944) = *(void *)(a2 + 1944);
  *(void *)(a1 + 1952) = *(void *)(a2 + 1952);
  *(void *)(a1 + 1960) = *(void *)(a2 + 1960);
  *(void *)(a2 + 1960) = 0;
  *(_OWORD *)(a2 + 1944) = 0uLL;
  long long v20 = *(_OWORD *)(a2 + 1968);
  *(_OWORD *)(a1 + 1984) = *(_OWORD *)(a2 + 1984);
  *(_OWORD *)(a1 + 1968) = v20;
  *(void *)(a1 + 2000) = 0;
  *(_OWORD *)(a1 + 2008) = 0uLL;
  *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a2 + 2000);
  *(void *)(a1 + 2016) = *(void *)(a2 + 2016);
  *(void *)(a2 + 2016) = 0;
  *(_OWORD *)(a2 + 2000) = 0uLL;
  int v21 = *(unsigned __int8 *)(a2 + 2104);
  *(unsigned char *)(a1 + 2104) = v21;
  if (v21)
  {
    *(_DWORD *)(a1 + 2024) = *(_DWORD *)(a2 + 2024);
    long long v22 = *(_OWORD *)(a2 + 2032);
    *(void *)(a1 + 2048) = *(void *)(a2 + 2048);
    *(_OWORD *)(a1 + 2032) = v22;
    *(void *)(a2 + 2048) = 0;
    *(void *)(a2 + 2040) = 0;
    *(void *)(a2 + 2032) = 0;
    *(_DWORD *)(a1 + 2056) = *(_DWORD *)(a2 + 2056);
    *(void *)(a1 + 2064) = *(void *)(a2 + 2064);
    *(void *)(a1 + 2072) = 0;
    *(void *)(a1 + 2088) = 0;
    *(void *)(a1 + 2080) = 0;
    *(void *)(a1 + 2072) = *(void *)(a2 + 2072);
    *(void *)(a1 + 2080) = *(void *)(a2 + 2080);
    *(void *)(a1 + 2088) = *(void *)(a2 + 2088);
    *(void *)(a2 + 2080) = 0;
    *(void *)(a2 + 2072) = 0;
    *(void *)(a2 + 2088) = 0;
    *(_WORD *)(a1 + 2096) = *(_WORD *)(a2 + 2096);
  }
  int v23 = *(unsigned __int8 *)(a2 + 2144);
  *(unsigned char *)(a1 + 2144) = v23;
  if (v23)
  {
    *(void *)(a1 + 2120) = 0;
    *(void *)(a1 + 2112) = 0;
    *(void *)(a1 + 2128) = 0;
    *(_OWORD *)(a1 + 2112) = *(_OWORD *)(a2 + 2112);
    *(void *)(a1 + 2128) = *(void *)(a2 + 2128);
    *(void *)(a2 + 2120) = 0;
    *(void *)(a2 + 2112) = 0;
    *(void *)(a2 + 2128) = 0;
    *(void *)(a1 + 2136) = *(void *)(a2 + 2136);
  }
  *(void *)(a1 + 2168) = 0;
  *(_OWORD *)(a1 + 2152) = 0u;
  *(void *)(a1 + 2152) = *(void *)(a2 + 2152);
  *(void *)(a1 + 2160) = *(void *)(a2 + 2160);
  *(void *)(a1 + 2168) = *(void *)(a2 + 2168);
  *(void *)(a2 + 2168) = 0;
  *(_OWORD *)(a2 + 2152) = 0u;
  long long v24 = *(_OWORD *)(a2 + 2176);
  *(void *)(a1 + 2192) = *(void *)(a2 + 2192);
  *(_OWORD *)(a1 + 2176) = v24;
  *(void *)(a1 + 2200) = 0;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(void *)(a1 + 2200) = *(void *)(a2 + 2200);
  *(void *)(a1 + 2208) = *(void *)(a2 + 2208);
  *(void *)(a1 + 2216) = *(void *)(a2 + 2216);
  *(void *)(a2 + 2216) = 0;
  *(_OWORD *)(a2 + 2200) = 0u;
  sub_982160(a1 + 2224, a2 + 2224);
  *(void *)(a1 + 3440) = 0;
  *(_OWORD *)(a1 + 3424) = 0u;
  *(_OWORD *)(a1 + 3424) = *(_OWORD *)(a2 + 3424);
  *(void *)(a1 + 3440) = *(void *)(a2 + 3440);
  *(void *)(a2 + 3440) = 0;
  *(_OWORD *)(a2 + 3424) = 0u;
  *(void *)(a1 + 3464) = 0;
  *(_OWORD *)(a1 + 3448) = 0u;
  *(void *)(a1 + 3448) = *(void *)(a2 + 3448);
  *(void *)(a1 + 3456) = *(void *)(a2 + 3456);
  *(void *)(a1 + 3464) = *(void *)(a2 + 3464);
  *(void *)(a2 + 3464) = 0;
  *(_OWORD *)(a2 + 3448) = 0u;
  *(void *)(a1 + 3488) = 0;
  *(_OWORD *)(a1 + 3472) = 0u;
  *(_OWORD *)(a1 + 3472) = *(_OWORD *)(a2 + 3472);
  *(void *)(a1 + 3488) = *(void *)(a2 + 3488);
  *(void *)(a2 + 3488) = 0;
  *(_OWORD *)(a2 + 3472) = 0u;
  *(void *)(a1 + 3512) = 0;
  *(_OWORD *)(a1 + 3496) = 0u;
  *(void *)(a1 + 3496) = *(void *)(a2 + 3496);
  *(void *)(a1 + 3504) = *(void *)(a2 + 3504);
  *(void *)(a1 + 3512) = *(void *)(a2 + 3512);
  *(void *)(a2 + 3512) = 0;
  *(_OWORD *)(a2 + 3496) = 0u;
  *(void *)(a1 + 3536) = 0;
  *(_OWORD *)(a1 + 3520) = 0u;
  *(_OWORD *)(a1 + 3520) = *(_OWORD *)(a2 + 3520);
  *(void *)(a1 + 3536) = *(void *)(a2 + 3536);
  *(void *)(a2 + 3536) = 0;
  *(_OWORD *)(a2 + 3520) = 0u;
  sub_4F4498(a1 + 3544, a2 + 3544);
  sub_4F4498(a1 + 4040, a2 + 4040);
  *(void *)(a1 + 4552) = 0;
  *(_OWORD *)(a1 + 4536) = 0u;
  *(void *)(a1 + 4536) = *(void *)(a2 + 4536);
  *(void *)(a1 + 4544) = *(void *)(a2 + 4544);
  *(void *)(a1 + 4552) = *(void *)(a2 + 4552);
  *(void *)(a2 + 4552) = 0;
  *(_OWORD *)(a2 + 4536) = 0u;
  *(void *)(a1 + 4576) = 0;
  *(_OWORD *)(a1 + 4560) = 0u;
  *(_OWORD *)(a1 + 4560) = *(_OWORD *)(a2 + 4560);
  *(void *)(a1 + 4576) = *(void *)(a2 + 4576);
  *(void *)(a2 + 4576) = 0;
  *(_OWORD *)(a2 + 4560) = 0u;
  *(void *)(a1 + 4600) = 0;
  *(_OWORD *)(a1 + 4584) = 0u;
  *(void *)(a1 + 4584) = *(void *)(a2 + 4584);
  *(void *)(a1 + 4592) = *(void *)(a2 + 4592);
  *(void *)(a1 + 4600) = *(void *)(a2 + 4600);
  *(void *)(a2 + 4600) = 0;
  *(_OWORD *)(a2 + 4584) = 0u;
  *(void *)(a1 + 4624) = 0;
  *(_OWORD *)(a1 + 4608) = 0u;
  *(_OWORD *)(a1 + 4608) = *(_OWORD *)(a2 + 4608);
  *(void *)(a1 + 4624) = *(void *)(a2 + 4624);
  *(void *)(a2 + 4624) = 0;
  *(_OWORD *)(a2 + 4608) = 0u;
  sub_4F4498(a1 + 4632, a2 + 4632);
  sub_4F4498(a1 + 5128, a2 + 5128);
  *(void *)(a1 + 5640) = 0;
  *(_OWORD *)(a1 + 5624) = 0u;
  *(void *)(a1 + 5624) = *(void *)(a2 + 5624);
  *(void *)(a1 + 5632) = *(void *)(a2 + 5632);
  *(void *)(a1 + 5640) = *(void *)(a2 + 5640);
  *(void *)(a2 + 5640) = 0;
  *(_OWORD *)(a2 + 5624) = 0u;
  *(void *)(a1 + 5664) = 0;
  *(_OWORD *)(a1 + 5648) = 0u;
  *(_OWORD *)(a1 + 5648) = *(_OWORD *)(a2 + 5648);
  *(void *)(a1 + 5664) = *(void *)(a2 + 5664);
  *(void *)(a2 + 5664) = 0;
  *(_OWORD *)(a2 + 5648) = 0u;
  *(unsigned char *)(a1 + 5672) = *(unsigned char *)(a2 + 5672);
  *(_OWORD *)(a1 + 5688) = 0u;
  *(void *)(a1 + 5680) = 0;
  *(_OWORD *)(a1 + 5680) = *(_OWORD *)(a2 + 5680);
  *(void *)(a1 + 5696) = *(void *)(a2 + 5696);
  *(void *)(a2 + 5696) = 0;
  *(_OWORD *)(a2 + 5680) = 0u;
  return a1;
}

uint64_t sub_9C2348(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 63) = *(void *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  int v7 = *(unsigned __int8 *)(a2 + 128);
  *(unsigned char *)(a1 + 128) = v7;
  if (v7)
  {
    long long v8 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v8;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 72) = 0;
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    long long v9 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v9;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    *(void *)(a2 + 104) = 0;
  }
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  long long v10 = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = v10;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 160) = 0;
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = v11;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 192) = 0;
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 256), (uint64_t *)(a2 + 224), (void *)(a1 + 224));
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  long long v12 = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = v12;
  *(void *)(a2 + 280) = 0;
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 272) = 0;
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  long long v13 = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = v13;
  *(void *)(a2 + 312) = 0;
  *(void *)(a2 + 320) = 0;
  *(void *)(a2 + 304) = 0;
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a2 + 352) = 0;
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  uint64_t v14 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v14;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 384) = 0;
  *(void *)(a2 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a2 + 400) = 0;
  *(void *)(a2 + 408) = 0;
  *(void *)(a2 + 416) = 0;
  uint64_t v15 = *(void *)(a2 + 424);
  *(_DWORD *)(a1 + 432) = *(_DWORD *)(a2 + 432);
  *(void *)(a1 + 424) = v15;
  LODWORD(v15) = *(unsigned __int8 *)(a2 + 496);
  *(unsigned char *)(a1 + 496) = v15;
  if (v15)
  {
    long long v16 = *(_OWORD *)(a2 + 440);
    *(void *)(a1 + 456) = *(void *)(a2 + 456);
    *(_OWORD *)(a1 + 440) = v16;
    *(void *)(a2 + 448) = 0;
    *(void *)(a2 + 456) = 0;
    *(void *)(a2 + 440) = 0;
    *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
    long long v17 = *(_OWORD *)(a2 + 472);
    *(void *)(a1 + 488) = *(void *)(a2 + 488);
    *(_OWORD *)(a1 + 472) = v17;
    *(void *)(a2 + 480) = 0;
    *(void *)(a2 + 488) = 0;
    *(void *)(a2 + 472) = 0;
  }
  *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 504);
  *(_DWORD *)(a1 + 544) = *(_DWORD *)(a2 + 544);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 544), (uint64_t *)(a2 + 512), (void *)(a1 + 512));
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  long long v18 = *(_OWORD *)(a2 + 560);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(_OWORD *)(a1 + 560) = v18;
  *(_OWORD *)(a2 + 568) = 0u;
  *(void *)(a2 + 560) = 0;
  *(unsigned char *)(a1 + 584) = *(unsigned char *)(a2 + 584);
  long long v19 = *(_OWORD *)(a2 + 592);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(_OWORD *)(a1 + 592) = v19;
  *(_OWORD *)(a2 + 600) = 0u;
  *(void *)(a2 + 592) = 0;
  *(unsigned char *)(a1 + 616) = *(unsigned char *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(_OWORD *)(a1 + 640) = 0u;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  *(void *)(a2 + 648) = 0;
  *(_OWORD *)(a2 + 632) = 0u;
  long long v20 = *(_OWORD *)(a2 + 656);
  long long v21 = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 681) = *(_OWORD *)(a2 + 681);
  *(_OWORD *)(a1 + 656) = v20;
  *(_OWORD *)(a1 + 672) = v21;
  return a1;
}

char *sub_9C262C(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  long long v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)long long v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    long long v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      long long v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        long long v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        long long v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          long long v13 = (uint64_t *)((char *)v13 + v21);
          long long v19 = (void *)(v5 + v21);
          long long v22 = (_OWORD *)(v5 + 16);
          int v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *long long v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)long long v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    long long v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    long long v31 = (char *)(8 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    long long v31 = &v54[8 * (v53 >> 2)];
    uint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      uint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      uint64_t v32 = v55;
      long long v34 = (char *)*a1;
      *(void *)long long v31 = *a3;
      std::string::size_type v35 = v31 + 8;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  long long v34 = (char *)v6;
  *(void *)long long v31 = *a3;
  std::string::size_type v35 = v31 + 8;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    long long v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    std::string v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    std::string v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    std::string v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    uint64_t v42 = v31 - 16;
    std::string v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)uint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    int v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
  }
  uint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_9C2984(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_9C299C(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 10) = *(long long *)((char *)a2 + 10);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = a1 + 32;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = a2 + 2;
  if (v6)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    long long v9 = *(void **)(a1 + 32);
    if (v8 != v6)
    {
      do
      {
        if (*(char *)(v8 - 9) < 0) {
          operator delete(*(void **)(v8 - 32));
        }
        v8 -= 40;
      }
      while (v8 != v6);
      long long v9 = *(void **)v5;
    }
    *(void *)(a1 + 40) = v6;
    operator delete(v9);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
  }
  *(_OWORD *)(a1 + 32) = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *uint64_t v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  unint64_t v10 = *(void **)(a1 + 72);
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
  if (v10)
  {
    *(void *)(a1 + 80) = v10;
    operator delete(v10);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  __n128 result = *(__n128 *)((char *)a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  return result;
}

__n128 sub_9C2A9C(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(unsigned char *)(a1 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)a1 = v4;
  uint64_t v6 = (void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(void *)(a1 + 16) = v5;
    operator delete(v5);
    *uint64_t v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  __n128 result = *(__n128 *)(a2 + 2);
  *(__n128 *)(a1 + 8) = result;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  return result;
}

uint64_t sub_9C2B14(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xBC7FD20AC579B779 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xB7D4EA19221C0) {
    sub_2E00();
  }
  if (0x78FFA4158AF36EF2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x78FFA4158AF36EF2 * ((a1[2] - *a1) >> 3);
  }
  if (0xBC7FD20AC579B779 * ((a1[2] - *a1) >> 3) >= 0x5BEA750C910E0) {
    unint64_t v6 = 0xB7D4EA19221C0;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xB7D4EA19221C0) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(5704 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v14 = (uint64_t)&v7[5704 * v3];
  uint64_t v15 = &v7[5704 * v6];
  sub_927AF0(v14, a2);
  uint64_t v8 = v14;
  uint64_t v9 = v14 + 5704;
  int64_t v11 = (char *)*a1;
  unint64_t v10 = (char *)a1[1];
  if (v10 == (char *)*a1)
  {
    *a1 = v14;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
  }
  else
  {
    do
    {
      v10 -= 5704;
      uint64_t v8 = sub_9C1BEC(v8 - 5704, (uint64_t)v10);
    }
    while (v10 != v11);
    uint64_t v12 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    a1[2] = (uint64_t)v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 5704;
        sub_92A5D4((uint64_t)v10);
      }
      while (v10 != v12);
      unint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 5704;
}

void sub_9C2CA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9C1B8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9C2CBC(uint64_t a1, unint64_t a2)
{
  int v2 = *(void ***)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x492492492492493) {
    sub_2E00();
  }
  unint64_t v4 = *(void ***)(a1 + 8);
  uint64_t v5 = 56 * a2;
  unint64_t v6 = (char *)operator new(56 * a2);
  uint64_t v7 = &v6[v5];
  uint64_t v8 = &v6[(char *)v4 - (char *)v2];
  if (v4 == v2)
  {
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v7;
    if (!v2) {
      return;
    }
    goto LABEL_16;
  }
  uint64_t v9 = 0;
  do
  {
    unint64_t v10 = &v8[v9 * 8];
    int64_t v11 = &v4[v9];
    long long v12 = *(_OWORD *)&v4[v9 - 7];
    *((void *)v10 - 5) = v4[v9 - 5];
    *(_OWORD *)(v10 - 56) = v12;
    *(v11 - 6) = 0;
    *(v11 - 5) = 0;
    *(v11 - 7) = 0;
    *(v10 - 32) = (char)v4[v9 - 4];
    long long v13 = *(_OWORD *)&v4[v9 - 3];
    *((void *)v10 - 1) = v4[v9 - 1];
    *(_OWORD *)(v10 - 24) = v13;
    *(v11 - 2) = 0;
    *(v11 - 1) = 0;
    *(v11 - 3) = 0;
    v9 -= 7;
  }
  while (&v4[v9] != v2);
  uint64_t v14 = *(void ***)a1;
  int v2 = *(void ***)(a1 + 8);
  *(void *)a1 = &v8[v9 * 8];
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  if (v2 != v14)
  {
    while (1)
    {
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*(v2 - 3));
        if (*((char *)v2 - 33) < 0) {
LABEL_13:
        }
          operator delete(*(v2 - 7));
      }
      else if (*((char *)v2 - 33) < 0)
      {
        goto LABEL_13;
      }
      v2 -= 7;
      if (v2 == v14)
      {
        int v2 = v14;
        break;
      }
    }
  }
  if (!v2) {
    return;
  }
LABEL_16:

  operator delete(v2);
}

void **sub_9C2E38(void **a1)
{
  int v2 = (void **)*a1;
  if (*a1)
  {
    unint64_t v3 = (void **)a1[1];
    unint64_t v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 17) < 0)
      {
        operator delete(*(v3 - 5));
        if (*((char *)v3 - 49) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 9));
      }
      else if (*((char *)v3 - 49) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 9;
      if (v3 == v2)
      {
        unint64_t v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

uint64_t sub_9C2EC8(uint64_t a1)
{
  int v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 71) < 0)
      {
        operator delete(v2[6]);
        if (*((char *)v2 + 39) < 0) {
LABEL_10:
        }
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v2);
      int v2 = v5;
    }
    while (v5);
  }
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

char *sub_9C2F50(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    sub_2E00();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x492492492492492) {
      sub_188D718();
    }
    uint64_t v7 = operator new(56 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[56 * v3];
  uint64_t v20 = &v7[56 * v6];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(&v7[56 * v3], *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
    *((void *)v8 + 2) = *(void *)(a2 + 16);
  }
  uint64_t v9 = &v7[56 * v3];
  v9[24] = *(unsigned char *)(a2 + 24);
  unint64_t v10 = v9 + 32;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_4200(v10, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)(a2 + 32);
    *((void *)v9 + 6) = *(void *)(a2 + 48);
  }
  int64_t v11 = &v7[56 * v3];
  long long v19 = v11;
  long long v12 = v11 + 56;
  long long v13 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = &v7[56 * v3];
    a1[1] = v12;
    a1[2] = v20;
    goto LABEL_29;
  }
  do
  {
    long long v15 = *(_OWORD *)(v14 - 56);
    *((void *)v11 - 5) = *((void *)v14 - 5);
    *(_OWORD *)(v11 - 56) = v15;
    *((void *)v14 - 6) = 0;
    *((void *)v14 - 5) = 0;
    *((void *)v14 - 7) = 0;
    *(v11 - 32) = *(v14 - 32);
    long long v16 = *(_OWORD *)(v14 - 24);
    *((void *)v11 - 1) = *((void *)v14 - 1);
    *(_OWORD *)(v11 - 24) = v16;
    v11 -= 56;
    *((void *)v14 - 2) = 0;
    *((void *)v14 - 1) = 0;
    *((void *)v14 - 3) = 0;
    v14 -= 56;
  }
  while (v14 != v13);
  unint64_t v17 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v20;
  if (v14 == v17) {
    goto LABEL_29;
  }
  do
  {
    if (*(v14 - 1) < 0)
    {
      operator delete(*((void **)v14 - 3));
      if ((*(v14 - 33) & 0x80000000) == 0) {
        goto LABEL_22;
      }
    }
    else if ((*(v14 - 33) & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(*((void **)v14 - 7));
LABEL_22:
    v14 -= 56;
  }
  while (v14 != v17);
  uint64_t v14 = v17;
LABEL_29:
  if (v14) {
    operator delete(v14);
  }
  return v19 + 56;
}

void sub_9C3194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
  {
    operator delete(*(void **)v2);
    sub_9C31CC((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_9C31CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9C31CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    if (*(char *)(i - 1) < 0)
    {
      operator delete(*(void **)(i - 24));
      if ((*(char *)(i - 33) & 0x80000000) == 0) {
        continue;
      }
    }
    else if ((*(char *)(i - 33) & 0x80000000) == 0)
    {
      continue;
    }
    operator delete(*(void **)(i - 56));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_9C3250(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_B128((uint64_t)v40, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      long long v15 = *v14;
      if (*v14)
      {
        char v16 = v6[23];
        if (v16 >= 0) {
          uint64_t v17 = v6[23];
        }
        else {
          uint64_t v17 = *((void *)v6 + 1);
        }
        if (v16 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v15[1];
            if (v22 == v11)
            {
              uint64_t v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v15 + 39);
              }
              else {
                uint64_t v24 = v15[3];
              }
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3])) {
                    return v15;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v15 + 39)) {
                    return v15;
                  }
                  uint64_t v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25) {
                      return v15;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            long long v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v11)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v18 >= v12) {
              v18 %= v12;
            }
            if (v18 != v4) {
              break;
            }
          }
          long long v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  sub_9C3688(a1, v11, a4, (uint64_t)v40);
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v12 || (float)(v27 * (float)v12) < v26)
  {
    BOOL v29 = 1;
    if (v12 >= 3) {
      BOOL v29 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v12);
    unint64_t v31 = vcvtps_u32_f32(v26 / v27);
    if (v30 <= v31) {
      size_t prime = v31;
    }
    else {
      size_t prime = v30;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v33) {
      goto LABEL_65;
    }
    if (prime < *(void *)&v33)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v33 < 3uLL || (uint8x8_t v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (prime <= v34) {
        size_t prime = v34;
      }
      if (prime < *(void *)&v33) {
LABEL_65:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v37 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v28 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v28) {
          goto LABEL_54;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v28 = *(void **)(*(void *)a1 + 8 * v11);
        if (v28) {
          goto LABEL_54;
        }
      }
    }
    else
    {
      unint64_t v4 = v37 & v11;
      uint64_t v28 = *(void **)(*(void *)a1 + 8 * (v37 & v11));
      if (v28) {
        goto LABEL_54;
      }
    }
LABEL_78:
    *(void *)v40[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v40[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v40[0])
    {
      unint64_t v38 = *(void *)(*(void *)v40[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12) {
          v38 %= v12;
        }
      }
      else
      {
        v38 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v38) = v40[0];
    }
    goto LABEL_89;
  }
  uint64_t v28 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v28) {
    goto LABEL_78;
  }
LABEL_54:
  *(void *)v40[0] = *v28;
  *uint64_t v28 = v40[0];
LABEL_89:
  long long v15 = (uint64_t *)v40[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_9C3670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9C3788((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_9C3688@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x58uLL);
  unint64_t v9 = v8;
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v10 = *a3;
  if (*((char *)v10 + 23) < 0)
  {
    sub_4200((unsigned char *)v8 + 16, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *((_OWORD *)v8 + 1) = v11;
  }
  *((unsigned char *)v9 + 40) = *((unsigned char *)v10 + 24);
  __n128 result = v9 + 6;
  if (*((char *)v10 + 55) < 0)
  {
    __n128 result = sub_4200(result, *((void **)v10 + 4), *((void *)v10 + 5));
  }
  else
  {
    long long v13 = v10[2];
    v9[8] = *((void *)v10 + 6);
    *(_OWORD *)__n128 result = v13;
  }
  *((_DWORD *)v9 + 18) = 0;
  v9[10] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_9C3750(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 39) < 0)
  {
    operator delete(*v3);
    sub_9C3788(v1);
    _Unwind_Resume(a1);
  }
  sub_9C3788(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_9C3788(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*(char *)(v2 + 71) < 0)
      {
        operator delete(*(void **)(v2 + 48));
        if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
          goto LABEL_5;
        }
      }
      else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 16));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

char **sub_9C37F4(char **a1, uint64_t *a2, uint64_t *a3)
{
  a1[2] = 0;
  int v4 = a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  if (a2 != a3)
  {
    size_t v7 = 0;
    unint64_t v8 = -1;
    unint64_t v9 = a2;
    do
    {
      unint64_t v9 = (uint64_t *)*v9;
      ++v8;
      v7 += 72;
    }
    while (v9 != a3);
    if (v8 >= 0x38E38E38E38E38ELL) {
      sub_2E00();
    }
    unint64_t v10 = (char *)operator new(v7);
    *a1 = v10;
    a1[1] = v10;
    a1[2] = &v10[v7];
    a1[1] = sub_9C38E4(v4, a2, a3, v10);
  }
  return a1;
}

void sub_9C38B8(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AD54C((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_9C38E4(int a1, uint64_t *a2, uint64_t *a3, char *__dst)
{
  int v4 = __dst;
  long long v11 = __dst;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 39) < 0)
      {
        sub_4200(v4, (void *)v6[2], v6[3]);
      }
      else
      {
        long long v8 = *((_OWORD *)v6 + 1);
        *((void *)v4 + 2) = v6[4];
        *(_OWORD *)int v4 = v8;
      }
      v4[24] = *((unsigned char *)v6 + 40);
      unint64_t v9 = v4 + 32;
      if (*((char *)v6 + 71) < 0)
      {
        sub_4200(v9, (void *)v6[6], v6[7]);
      }
      else
      {
        long long v7 = *((_OWORD *)v6 + 3);
        *((void *)v4 + 6) = v6[8];
        *(_OWORD *)unint64_t v9 = v7;
      }
      *(_OWORD *)(v4 + 56) = *(_OWORD *)(v6 + 9);
      unint64_t v6 = (uint64_t *)*v6;
      int v4 = v11 + 72;
      v11 += 72;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_9C39C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 23) < 0)
  {
    operator delete(*(void **)v9);
    sub_9C39FC((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_9C39FC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_9C39FC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (1)
    {
      if (v3 == v4) {
        return a1;
      }
      if (*(char *)(v3 - 17) < 0)
      {
        operator delete(*(void **)(v3 - 40));
        if ((*(char *)(v3 - 49) & 0x80000000) == 0) {
          goto LABEL_4;
        }
      }
      else if ((*(char *)(v3 - 49) & 0x80000000) == 0)
      {
        goto LABEL_4;
      }
      operator delete(*(void **)(v3 - 72));
LABEL_4:
      v3 -= 72;
    }
  }
  return a1;
}

void sub_9C3A7C(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_9C3F00(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1 + 9;
    if (a1 + 9 != a2)
    {
      uint64_t v4 = 0;
      char v5 = a1;
      char v25 = a2;
      do
      {
        long long v7 = v3;
        unsigned int v8 = *((_DWORD *)v5 + 32);
        unsigned int v9 = *((_DWORD *)v5 + 14);
        BOOL v10 = v8 == v9;
        BOOL v11 = v8 > v9;
        if (v10) {
          BOOL v11 = v5[17] < (unint64_t)v5[8];
        }
        if (v11)
        {
          uint64_t v26 = *v7;
          *(void *)unint64_t v30 = v7[1];
          *(void *)&v30[7] = *(uint64_t *)((char *)v7 + 15);
          char v12 = *((unsigned char *)v7 + 23);
          v7[1] = 0;
          v7[2] = 0;
          *long long v7 = 0;
          char v13 = *((unsigned char *)v5 + 96);
          *(_OWORD *)BOOL v29 = *(_OWORD *)((char *)v5 + 105);
          *(void *)&v29[14] = *(uint64_t *)((char *)v5 + 119);
          char v27 = *((unsigned char *)v5 + 127);
          char v28 = *((unsigned char *)v5 + 104);
          v5[13] = 0;
          v5[14] = 0;
          v5[15] = 0;
          unsigned int v14 = *((_DWORD *)v5 + 32);
          uint64_t v15 = v4;
          unint64_t v16 = v5[17];
          while (1)
          {
            uint64_t v17 = v15;
            uint64_t v18 = (uint64_t)a1 + v15;
            uint64_t v19 = (uint64_t)a1 + v15 + 72;
            if (*((char *)a1 + v15 + 95) < 0) {
              operator delete(*(void **)v19);
            }
            *(_OWORD *)uint64_t v19 = *(_OWORD *)v18;
            *(void *)(v19 + 16) = *(void *)(v18 + 16);
            *(unsigned char *)(v18 + 23) = 0;
            *(unsigned char *)uint64_t v18 = 0;
            *(unsigned char *)(v18 + 96) = *(unsigned char *)(v18 + 24);
            uint64_t v20 = v18 + 104;
            if (*(char *)(v18 + 127) < 0) {
              operator delete(*(void **)v20);
            }
            uint64_t v21 = (uint64_t)a1 + v17;
            *(_OWORD *)uint64_t v20 = *(_OWORD *)((char *)a1 + v17 + 32);
            *(void *)(v20 + 16) = *(uint64_t *)((char *)a1 + v17 + 48);
            *(unsigned char *)(v21 + 55) = 0;
            *(unsigned char *)(v21 + 32) = 0;
            *(_DWORD *)(v21 + 128) = *(_DWORD *)((char *)a1 + v17 + 56);
            *(void *)(v21 + 136) = *(uint64_t *)((char *)a1 + v17 + 64);
            if (!v17) {
              break;
            }
            unsigned int v22 = *(_DWORD *)(v21 - 16);
            BOOL v10 = v14 == v22;
            BOOL v23 = v14 > v22;
            if (v10) {
              BOOL v23 = v16 < *(void *)(v21 - 8);
            }
            uint64_t v15 = v17 - 72;
            if (!v23)
            {
              unint64_t v24 = (uint64_t *)((char *)a1 + v17);
              if ((*((char *)a1 + v15 + 95) & 0x80000000) == 0) {
                goto LABEL_22;
              }
              goto LABEL_21;
            }
          }
          unint64_t v24 = a1;
          if ((*((char *)a1 + 23) & 0x80000000) == 0) {
            goto LABEL_22;
          }
LABEL_21:
          operator delete((void *)*v24);
LABEL_22:
          uint64_t *v24 = v26;
          v24[1] = *(void *)v30;
          *(uint64_t *)((char *)v24 + 15) = *(void *)&v30[7];
          *((unsigned char *)v24 + 23) = v12;
          *((unsigned char *)v24 + 24) = v13;
          if (*((char *)v24 + 55) < 0) {
            operator delete(*(void **)(v21 + 32));
          }
          *(unsigned char *)(v21 + 32) = v28;
          uint64_t v6 = (uint64_t)a1 + v17;
          *(_OWORD *)(v6 + 33) = *(_OWORD *)v29;
          *(void *)(v6 + 47) = *(void *)&v29[14];
          *(unsigned char *)(v21 + 55) = v27;
          *((_DWORD *)v24 + 14) = v14;
          v24[8] = v16;
          a2 = v25;
        }
        uint64_t v3 = v7 + 9;
        v4 += 72;
        char v5 = v7;
      }
      while (v7 + 9 != a2);
    }
  }
}

uint64_t *sub_9C4160(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result + 9;
    if (result + 9 != a2)
    {
      uint64_t v4 = result + 17;
      do
      {
        char v5 = v3;
        unsigned int v6 = *((_DWORD *)result + 32);
        unsigned int v7 = *((_DWORD *)result + 14);
        BOOL v8 = v6 == v7;
        BOOL v9 = v6 > v7;
        if (v8) {
          BOOL v9 = result[17] < (unint64_t)result[8];
        }
        if (v9)
        {
          unint64_t v10 = *v5;
          *(void *)char v25 = v5[1];
          *(void *)&v25[7] = *(uint64_t *)((char *)v5 + 15);
          char v11 = *((unsigned char *)v5 + 23);
          v5[1] = 0;
          v5[2] = 0;
          uint64_t *v5 = 0;
          char v12 = *((unsigned char *)result + 96);
          char v23 = *((unsigned char *)result + 104);
          *(_OWORD *)unint64_t v24 = *(_OWORD *)((char *)result + 105);
          *(void *)&v24[14] = *(uint64_t *)((char *)result + 119);
          char v13 = *((unsigned char *)result + 127);
          result[13] = 0;
          result[14] = 0;
          result[15] = 0;
          unsigned int v14 = *((_DWORD *)result + 32);
          uint64_t v15 = v4;
          unint64_t v16 = result[17];
          do
          {
            uint64_t v20 = (void **)(v15 - 8);
            if (*((char *)v15 - 41) < 0) {
              operator delete(*v20);
            }
            *(_OWORD *)uint64_t v20 = *(_OWORD *)(v15 - 17);
            *(v15 - 6) = *(v15 - 15);
            *((unsigned char *)v15 - 113) = 0;
            *((unsigned char *)v15 - 136) = 0;
            *((unsigned char *)v15 - 40) = *((unsigned char *)v15 - 112);
            uint64_t v21 = (void **)(v15 - 4);
            if (*((char *)v15 - 9) < 0) {
              operator delete(*v21);
            }
            *(_OWORD *)uint64_t v21 = *(_OWORD *)(v15 - 13);
            *(v15 - 2) = *(v15 - 11);
            *((unsigned char *)v15 - 81) = 0;
            *((unsigned char *)v15 - 104) = 0;
            *((_DWORD *)v15 - 2) = *((_DWORD *)v15 - 20);
            uint64_t v17 = v15 - 9;
            *uint64_t v15 = *(v15 - 9);
            unsigned int v18 = *((_DWORD *)v15 - 38);
            BOOL v8 = v14 == v18;
            BOOL v19 = v14 > v18;
            if (v8) {
              BOOL v19 = v16 < *(v15 - 18);
            }
            v15 -= 9;
          }
          while (v19);
          if (*((char *)v17 - 41) < 0) {
            operator delete((void *)*(v17 - 8));
          }
          *(v17 - 8) = v10;
          *(v17 - 7) = *(void *)v25;
          *(unint64_t *)((char *)v17 - 49) = *(void *)&v25[7];
          *((unsigned char *)v17 - 41) = v11;
          *((unsigned char *)v17 - 40) = v12;
          uint64_t v2 = a2;
          if (*((char *)v17 - 9) < 0) {
            operator delete((void *)*(v17 - 4));
          }
          *((unsigned char *)v17 - 32) = v23;
          *(_OWORD *)((char *)v17 - 31) = *(_OWORD *)v24;
          *(unint64_t *)((char *)v17 - 17) = *(void *)&v24[14];
          *((unsigned char *)v17 - 9) = v13;
          *((_DWORD *)v17 - 2) = v14;
          *uint64_t v17 = v16;
        }
        uint64_t v3 = v5 + 9;
        v4 += 9;
        __n128 result = v5;
      }
      while (v5 + 9 != v2);
    }
  }
  return result;
}

uint64_t sub_9C4390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a2 + 56);
  unsigned int v7 = *(_DWORD *)(a1 + 56);
  unint64_t v8 = *(void *)(a2 + 64);
  BOOL v9 = v6 == v7;
  BOOL v10 = v6 > v7;
  if (v9) {
    BOOL v10 = v8 < *(void *)(a1 + 64);
  }
  unsigned int v11 = *(_DWORD *)(a3 + 56);
  BOOL v12 = *(void *)(a3 + 64) < v8;
  BOOL v9 = v11 == v6;
  BOOL v13 = v11 > v6;
  if (v9) {
    BOOL v13 = v12;
  }
  if (v10)
  {
    if (v13)
    {
      sub_9C4E2C((uint64_t *)a1, (long long *)a3);
      return 1;
    }
    sub_9C4E2C((uint64_t *)a1, (long long *)a2);
    unsigned int v18 = *(_DWORD *)(a3 + 56);
    unsigned int v19 = *(_DWORD *)(a2 + 56);
    BOOL v9 = v18 == v19;
    BOOL v20 = v18 > v19;
    if (v9) {
      BOOL v20 = *(void *)(a3 + 64) < *(void *)(a2 + 64);
    }
    if (v20)
    {
      sub_9C4E2C((uint64_t *)a2, (long long *)a3);
      return 2;
    }
    return 1;
  }
  if (v13)
  {
    sub_9C4E2C((uint64_t *)a2, (long long *)a3);
    unsigned int v15 = *(_DWORD *)(a2 + 56);
    unsigned int v16 = *(_DWORD *)(a1 + 56);
    BOOL v9 = v15 == v16;
    BOOL v17 = v15 > v16;
    if (v9) {
      BOOL v17 = *(void *)(a2 + 64) < *(void *)(a1 + 64);
    }
    if (v17)
    {
      sub_9C4E2C((uint64_t *)a1, (long long *)a2);
      return 2;
    }
    return 1;
  }
  return 0;
}

unint64_t sub_9C44F0(unint64_t a1, long long *a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)std::string v39 = *(void *)(a1 + 8);
  *(void *)&v39[7] = *(void *)(a1 + 15);
  char v4 = *(unsigned char *)(a1 + 23);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  unint64_t v5 = a1 + 32;
  char v6 = *(unsigned char *)(a1 + 24);
  uint64_t v37 = *(void *)(a1 + 32);
  *(void *)unint64_t v38 = *(void *)(a1 + 40);
  *(void *)&v38[7] = *(void *)(a1 + 47);
  char v7 = *(unsigned char *)(a1 + 55);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  unsigned int v8 = *(_DWORD *)(a1 + 56);
  unint64_t v9 = *(void *)(a1 + 64);
  unsigned int v10 = *((_DWORD *)a2 - 4);
  BOOL v11 = v8 == v10;
  BOOL v12 = v8 > v10;
  if (v11) {
    BOOL v12 = v9 < *((void *)a2 - 1);
  }
  if (v12)
  {
    unint64_t v13 = a1;
    do
    {
      unint64_t v14 = v13 + 72;
      unsigned int v15 = *(_DWORD *)(v13 + 128);
      BOOL v16 = v9 < *(void *)(v13 + 136);
      BOOL v11 = v8 == v15;
      BOOL v17 = v8 > v15;
      if (v11) {
        BOOL v17 = v16;
      }
      unint64_t v13 = v14;
    }
    while (!v17);
  }
  else
  {
    unint64_t v18 = a1 + 72;
    do
    {
      unint64_t v14 = v18;
      if (v18 >= (unint64_t)a2) {
        break;
      }
      unsigned int v19 = *(_DWORD *)(v18 + 56);
      BOOL v20 = v9 < *(void *)(v14 + 64);
      BOOL v11 = v8 == v19;
      BOOL v21 = v8 > v19;
      if (!v11) {
        BOOL v20 = v21;
      }
      unint64_t v18 = v14 + 72;
    }
    while (!v20);
  }
  if (v14 >= (unint64_t)a2)
  {
    unsigned int v22 = a2;
  }
  else
  {
    do
    {
      unsigned int v22 = (long long *)((char *)a2 - 72);
      unsigned int v23 = *((_DWORD *)a2 - 4);
      BOOL v11 = v8 == v23;
      BOOL v24 = v8 > v23;
      if (v11) {
        BOOL v24 = v9 < *((void *)a2 - 1);
      }
      a2 = (long long *)((char *)a2 - 72);
    }
    while (v24);
  }
  while (v14 < (unint64_t)v22)
  {
    sub_9C4E2C((uint64_t *)v14, v22);
    do
    {
      unsigned int v25 = *(_DWORD *)(v14 + 128);
      unint64_t v26 = *(void *)(v14 + 136);
      v14 += 72;
      BOOL v27 = v9 < v26;
      BOOL v11 = v8 == v25;
      BOOL v28 = v8 > v25;
      if (v11) {
        BOOL v28 = v27;
      }
    }
    while (!v28);
    do
    {
      unsigned int v29 = *((_DWORD *)v22 - 4);
      unint64_t v30 = *((void *)v22 - 1);
      unsigned int v22 = (long long *)((char *)v22 - 72);
      BOOL v31 = v9 < v30;
      BOOL v11 = v8 == v29;
      BOOL v32 = v8 > v29;
      if (v11) {
        BOOL v32 = v31;
      }
    }
    while (v32);
  }
  unint64_t v33 = (void **)(v14 - 72);
  if (v14 - 72 != a1)
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v34 = *(_OWORD *)v33;
    *(void *)(a1 + 16) = *(void *)(v14 - 56);
    *(_OWORD *)a1 = v34;
    *(unsigned char *)(v14 - 49) = 0;
    *(unsigned char *)(v14 - 72) = 0;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(v14 - 48);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)v5);
    }
    long long v35 = *(_OWORD *)(v14 - 40);
    *(void *)(v5 + 16) = *(void *)(v14 - 24);
    *(_OWORD *)unint64_t v5 = v35;
    *(unsigned char *)(v14 - 17) = 0;
    *(unsigned char *)(v14 - 40) = 0;
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v14 - 16);
    *(void *)(a1 + 64) = *(void *)(v14 - 8);
  }
  if (*(char *)(v14 - 49) < 0) {
    operator delete(*v33);
  }
  *(void *)(v14 - 72) = v3;
  *(void *)(v14 - 57) = *(void *)&v39[7];
  *(void *)(v14 - 64) = *(void *)v39;
  *(unsigned char *)(v14 - 49) = v4;
  *(unsigned char *)(v14 - 48) = v6;
  if (*(char *)(v14 - 17) < 0) {
    operator delete(*(void **)(v14 - 40));
  }
  *(void *)(v14 - 40) = v37;
  *(void *)(v14 - 25) = *(void *)&v38[7];
  *(void *)(v14 - 32) = *(void *)v38;
  *(unsigned char *)(v14 - 17) = v7;
  *(_DWORD *)(v14 - 16) = v8;
  *(void *)(v14 - 8) = v9;
  return v14;
}

unint64_t sub_9C47AC(uint64_t a1, long long *a2)
{
  uint64_t v3 = 0;
  char v4 = *(void **)a1;
  *(void *)unint64_t v38 = *(void *)(a1 + 8);
  *(void *)&v38[7] = *(void *)(a1 + 15);
  char v5 = *(unsigned char *)(a1 + 23);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  char v6 = *(unsigned char *)(a1 + 24);
  uint64_t v7 = a1 + 32;
  long long v35 = v4;
  uint64_t v36 = *(void *)(a1 + 32);
  *(void *)uint64_t v37 = *(void *)(a1 + 40);
  *(void *)&v37[7] = *(void *)(a1 + 47);
  char v34 = *(unsigned char *)(a1 + 55);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  unsigned int v8 = *(_DWORD *)(a1 + 56);
  unint64_t v9 = *(void *)(a1 + 64);
  do
  {
    unsigned int v10 = *(_DWORD *)(a1 + v3 + 128);
    BOOL v11 = *(void *)(a1 + v3 + 136) < v9;
    BOOL v12 = v10 == v8;
    BOOL v13 = v10 > v8;
    if (!v12) {
      BOOL v11 = v13;
    }
    v3 += 72;
  }
  while (v11);
  unint64_t v14 = a1 + v3;
  if (v3 == 72)
  {
    while (v14 < (unint64_t)a2)
    {
      unsigned int v15 = (long long *)((char *)a2 - 72);
      unsigned int v18 = *((_DWORD *)a2 - 4);
      BOOL v12 = v18 == v8;
      BOOL v19 = v18 > v8;
      if (v12) {
        BOOL v19 = *((void *)a2 - 1) < v9;
      }
      a2 = (long long *)((char *)a2 - 72);
      if (v19) {
        goto LABEL_15;
      }
    }
    unsigned int v15 = a2;
  }
  else
  {
    do
    {
      unsigned int v15 = (long long *)((char *)a2 - 72);
      unsigned int v16 = *((_DWORD *)a2 - 4);
      BOOL v12 = v16 == v8;
      BOOL v17 = v16 > v8;
      if (v12) {
        BOOL v17 = *((void *)a2 - 1) < v9;
      }
      a2 = (long long *)((char *)a2 - 72);
    }
    while (!v17);
  }
LABEL_15:
  unint64_t v20 = v14;
  if (v14 < (unint64_t)v15)
  {
    BOOL v21 = v15;
    do
    {
      sub_9C4E2C((uint64_t *)v20, v21);
      do
      {
        unsigned int v22 = *(_DWORD *)(v20 + 128);
        unint64_t v23 = *(void *)(v20 + 136);
        v20 += 72;
        BOOL v24 = v23 < v9;
        BOOL v12 = v22 == v8;
        BOOL v25 = v22 > v8;
        if (v12) {
          BOOL v25 = v24;
        }
      }
      while (v25);
      do
      {
        unsigned int v26 = *((_DWORD *)v21 - 4);
        unint64_t v27 = *((void *)v21 - 1);
        BOOL v21 = (long long *)((char *)v21 - 72);
        BOOL v28 = v27 < v9;
        BOOL v12 = v26 == v8;
        BOOL v29 = v26 > v8;
        if (v12) {
          BOOL v29 = v28;
        }
      }
      while (!v29);
    }
    while (v20 < (unint64_t)v21);
  }
  unint64_t v30 = (void **)(v20 - 72);
  if (v20 - 72 != a1)
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v31 = *(_OWORD *)v30;
    *(void *)(a1 + 16) = *(void *)(v20 - 56);
    *(_OWORD *)a1 = v31;
    *(unsigned char *)(v20 - 49) = 0;
    *(unsigned char *)(v20 - 72) = 0;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(v20 - 48);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)v7);
    }
    long long v32 = *(_OWORD *)(v20 - 40);
    *(void *)(v7 + 16) = *(void *)(v20 - 24);
    *(_OWORD *)uint64_t v7 = v32;
    *(unsigned char *)(v20 - 17) = 0;
    *(unsigned char *)(v20 - 40) = 0;
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v20 - 16);
    *(void *)(a1 + 64) = *(void *)(v20 - 8);
  }
  if (*(char *)(v20 - 49) < 0) {
    operator delete(*v30);
  }
  *(void *)(v20 - 72) = v35;
  *(void *)(v20 - 57) = *(void *)&v38[7];
  *(void *)(v20 - 64) = *(void *)v38;
  *(unsigned char *)(v20 - 49) = v5;
  *(unsigned char *)(v20 - 48) = v6;
  if (*(char *)(v20 - 17) < 0) {
    operator delete(*(void **)(v20 - 40));
  }
  *(void *)(v20 - 40) = v36;
  *(void *)(v20 - 25) = *(void *)&v37[7];
  *(void *)(v20 - 32) = *(void *)v37;
  *(unsigned char *)(v20 - 17) = v34;
  *(_DWORD *)(v20 - 16) = v8;
  *(void *)(v20 - 8) = v9;
  return v20 - 72;
}

BOOL sub_9C4A68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unsigned int v27 = *(_DWORD *)(a2 - 16);
      unsigned int v28 = *(_DWORD *)(a1 + 56);
      BOOL v14 = v27 == v28;
      BOOL v29 = v27 > v28;
      if (v14) {
        BOOL v29 = *(void *)(a2 - 8) < *(void *)(a1 + 64);
      }
      if (v29)
      {
        sub_9C4E2C((uint64_t *)a1, (long long *)(a2 - 72));
        return 1;
      }
      return result;
    case 3uLL:
      sub_9C4390(a1, a1 + 72, a2 - 72);
      return 1;
    case 4uLL:
      sub_9C4FB4(a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      sub_9C50B4(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72);
      return 1;
    default:
      uint64_t v6 = a1 + 144;
      sub_9C4390(a1, a1 + 72, a1 + 144);
      uint64_t v7 = a1 + 216;
      if (a1 + 216 == v2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      uint64_t v30 = v2;
      break;
  }
  while (1)
  {
    unsigned int v11 = *(_DWORD *)(v7 + 56);
    unsigned int v12 = *(_DWORD *)(v6 + 56);
    unint64_t v13 = *(void *)(v7 + 64);
    BOOL v14 = v11 == v12;
    BOOL v15 = v11 > v12;
    if (v14) {
      BOOL v15 = v13 < *(void *)(v6 + 64);
    }
    if (v15)
    {
      uint64_t v33 = *(void *)v7;
      *(void *)uint64_t v37 = *(void *)(v7 + 8);
      *(void *)&v37[7] = *(void *)(v7 + 15);
      char v16 = *(unsigned char *)(v7 + 23);
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      char v31 = *(unsigned char *)(v7 + 24);
      char v32 = v16;
      *(_OWORD *)uint64_t v36 = *(_OWORD *)(v7 + 33);
      *(void *)&v36[14] = *(void *)(v7 + 47);
      char v34 = *(unsigned char *)(v7 + 55);
      char v35 = *(unsigned char *)(v7 + 32);
      *(void *)(v7 + 40) = 0;
      *(void *)(v7 + 48) = 0;
      uint64_t v17 = v8;
      *(void *)(v7 + 32) = 0;
      while (1)
      {
        uint64_t v18 = v17;
        uint64_t v19 = a1 + v17;
        uint64_t v20 = a1 + v17 + 216;
        if (*(char *)(a1 + v17 + 239) < 0) {
          operator delete(*(void **)v20);
        }
        *(_OWORD *)uint64_t v20 = *(_OWORD *)(v19 + 144);
        *(void *)(v20 + 16) = *(void *)(v19 + 160);
        *(unsigned char *)(v19 + 167) = 0;
        *(unsigned char *)(v19 + 144) = 0;
        *(unsigned char *)(v19 + 240) = *(unsigned char *)(v19 + 168);
        BOOL v21 = (void **)(v19 + 248);
        if (*(char *)(v19 + 271) < 0) {
          operator delete(*v21);
        }
        uint64_t v22 = a1 + v18;
        *(_OWORD *)BOOL v21 = *(_OWORD *)(a1 + v18 + 176);
        *(void *)(v19 + 264) = *(void *)(a1 + v18 + 192);
        *(unsigned char *)(v22 + 199) = 0;
        *(unsigned char *)(v22 + 176) = 0;
        *(_DWORD *)(v22 + 272) = *(_DWORD *)(a1 + v18 + 200);
        *(void *)(v22 + 280) = *(void *)(a1 + v18 + 208);
        if (v18 == -144) {
          break;
        }
        unsigned int v23 = *(_DWORD *)(v22 + 128);
        BOOL v24 = v13 < *(void *)(v22 + 136);
        BOOL v14 = v11 == v23;
        BOOL v25 = v11 > v23;
        if (!v14) {
          BOOL v24 = v25;
        }
        uint64_t v17 = v18 - 72;
        if (!v24)
        {
          uint64_t v26 = a1 + v17 + 216;
          if ((*(char *)(a1 + v17 + 239) & 0x80000000) == 0) {
            goto LABEL_23;
          }
          goto LABEL_22;
        }
      }
      uint64_t v26 = a1;
      if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
        goto LABEL_23;
      }
LABEL_22:
      operator delete(*(void **)v26);
LABEL_23:
      *(void *)uint64_t v26 = v33;
      *(void *)(v26 + 8) = *(void *)v37;
      *(void *)(v26 + 15) = *(void *)&v37[7];
      *(unsigned char *)(v26 + 23) = v32;
      *(unsigned char *)(v26 + 24) = v31;
      if (*(char *)(v26 + 55) < 0) {
        operator delete(*(void **)(v22 + 176));
      }
      *(unsigned char *)(v22 + 176) = v35;
      uint64_t v10 = a1 + v18;
      *(_OWORD *)(v10 + 177) = *(_OWORD *)v36;
      *(void *)(v10 + 191) = *(void *)&v36[14];
      *(unsigned char *)(v22 + 199) = v34;
      *(_DWORD *)(v26 + 56) = v11;
      *(void *)(v26 + 64) = v13;
      ++v9;
      uint64_t v2 = v30;
      if (v9 == 8) {
        return v7 + 72 == v30;
      }
    }
    uint64_t v6 = v7;
    v8 += 72;
    v7 += 72;
    if (v7 == v2) {
      return 1;
    }
  }
}

void sub_9C4E2C(uint64_t *a1, long long *a2)
{
  uint64_t v4 = *a1;
  *(void *)char v16 = a1[1];
  *(void *)&v16[7] = *(uint64_t *)((char *)a1 + 15);
  char v5 = *((unsigned char *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v7 = a1 + 4;
  uint64_t v6 = a1[4];
  char v8 = *((unsigned char *)a1 + 24);
  *(void *)BOOL v15 = a1[5];
  *(void *)&v15[7] = *(uint64_t *)((char *)a1 + 47);
  char v9 = *((unsigned char *)a1 + 55);
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  long long v10 = *a2;
  a1[2] = *((void *)a2 + 2);
  *(_OWORD *)a1 = v10;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
  if (*((char *)a1 + 55) < 0) {
    operator delete((void *)*v7);
  }
  long long v11 = a2[2];
  v7[2] = *((void *)a2 + 6);
  *(_OWORD *)uint64_t v7 = v11;
  *((unsigned char *)a2 + 55) = 0;
  *((unsigned char *)a2 + 32) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    operator delete(*(void **)a2);
    int v12 = *((char *)a2 + 55);
    *(void *)a2 = v4;
    *((void *)a2 + 1) = *(void *)v16;
    *(void *)((char *)a2 + 15) = *(void *)&v16[7];
    *((unsigned char *)a2 + 23) = v5;
    *((unsigned char *)a2 + 24) = v8;
    if (v12 < 0) {
      operator delete(*((void **)a2 + 4));
    }
  }
  else
  {
    *(void *)a2 = v4;
    *((void *)a2 + 1) = *(void *)v16;
    *(void *)((char *)a2 + 15) = *(void *)&v16[7];
    *((unsigned char *)a2 + 23) = v5;
    *((unsigned char *)a2 + 24) = v8;
  }
  *((void *)a2 + 4) = v6;
  *((void *)a2 + 5) = *(void *)v15;
  *(void *)((char *)a2 + 47) = *(void *)&v15[7];
  *((unsigned char *)a2 + 55) = v9;
  int v13 = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v13;
  uint64_t v14 = a1[8];
  a1[8] = *((void *)a2 + 8);
  *((void *)a2 + 8) = v14;
}

void sub_9C4FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_9C4390(a1, a2, a3);
  unsigned int v8 = *(_DWORD *)(a4 + 56);
  unsigned int v9 = *(_DWORD *)(a3 + 56);
  BOOL v10 = v8 == v9;
  BOOL v11 = v8 > v9;
  if (v10) {
    BOOL v11 = *(void *)(a4 + 64) < *(void *)(a3 + 64);
  }
  if (v11)
  {
    sub_9C4E2C((uint64_t *)a3, (long long *)a4);
    unsigned int v12 = *(_DWORD *)(a3 + 56);
    unsigned int v13 = *(_DWORD *)(a2 + 56);
    BOOL v10 = v12 == v13;
    BOOL v14 = v12 > v13;
    if (v10) {
      BOOL v14 = *(void *)(a3 + 64) < *(void *)(a2 + 64);
    }
    if (v14)
    {
      sub_9C4E2C((uint64_t *)a2, (long long *)a3);
      unsigned int v15 = *(_DWORD *)(a2 + 56);
      unsigned int v16 = *(_DWORD *)(a1 + 56);
      BOOL v10 = v15 == v16;
      BOOL v17 = v15 > v16;
      if (v10) {
        BOOL v17 = *(void *)(a2 + 64) < *(void *)(a1 + 64);
      }
      if (v17)
      {
        sub_9C4E2C((uint64_t *)a1, (long long *)a2);
      }
    }
  }
}

void sub_9C50B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_9C4FB4(a1, a2, a3, a4);
  unsigned int v10 = *(_DWORD *)(a5 + 56);
  unsigned int v11 = *(_DWORD *)(a4 + 56);
  BOOL v12 = v10 == v11;
  BOOL v13 = v10 > v11;
  if (v12) {
    BOOL v13 = *(void *)(a5 + 64) < *(void *)(a4 + 64);
  }
  if (v13)
  {
    sub_9C4E2C((uint64_t *)a4, (long long *)a5);
    unsigned int v14 = *(_DWORD *)(a4 + 56);
    unsigned int v15 = *(_DWORD *)(a3 + 56);
    BOOL v12 = v14 == v15;
    BOOL v16 = v14 > v15;
    if (v12) {
      BOOL v16 = *(void *)(a4 + 64) < *(void *)(a3 + 64);
    }
    if (v16)
    {
      sub_9C4E2C((uint64_t *)a3, (long long *)a4);
      unsigned int v17 = *(_DWORD *)(a3 + 56);
      unsigned int v18 = *(_DWORD *)(a2 + 56);
      BOOL v12 = v17 == v18;
      BOOL v19 = v17 > v18;
      if (v12) {
        BOOL v19 = *(void *)(a3 + 64) < *(void *)(a2 + 64);
      }
      if (v19)
      {
        sub_9C4E2C((uint64_t *)a2, (long long *)a3);
        unsigned int v20 = *(_DWORD *)(a2 + 56);
        unsigned int v21 = *(_DWORD *)(a1 + 56);
        BOOL v12 = v20 == v21;
        BOOL v22 = v20 > v21;
        if (v12) {
          BOOL v22 = *(void *)(a2 + 64) < *(void *)(a1 + 64);
        }
        if (v22)
        {
          sub_9C4E2C((uint64_t *)a1, (long long *)a2);
        }
      }
    }
  }
}

void sub_9C51FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = (long long *)a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0x8E38E38E38E38E39 * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v9 = (0x1C71C71C71C71C72 * (((uint64_t)a4 - a1) >> 3)) | 1;
      unsigned int v10 = (long long *)(a1 + 72 * v9);
      if (0x1C71C71C71C71C72 * (((uint64_t)a4 - a1) >> 3) + 2 < a3)
      {
        uint64_t v11 = a1 + 72 * v9;
        unsigned int v12 = *(_DWORD *)(v11 + 56);
        unsigned int v13 = *((_DWORD *)v10 + 32);
        BOOL v14 = *(void *)(v11 + 64) < *((void *)v10 + 17);
        BOOL v15 = v12 == v13;
        BOOL v16 = v12 > v13;
        if (!v15) {
          BOOL v14 = v16;
        }
        unsigned int v10 = (long long *)((char *)v10 + 72 * v14);
        if (v14) {
          uint64_t v9 = 0x1C71C71C71C71C72 * (((uint64_t)a4 - a1) >> 3) + 2;
        }
      }
      unsigned int v17 = *((_DWORD *)v10 + 14);
      unsigned int v18 = *((_DWORD *)a4 + 14);
      unint64_t v19 = a4[8];
      BOOL v15 = v17 == v18;
      BOOL v20 = v17 > v18;
      if (v15) {
        BOOL v20 = *((void *)v10 + 8) < v19;
      }
      if (!v20)
      {
        uint64_t v36 = *a4;
        *(void *)uint64_t v40 = a4[1];
        *(void *)&v40[7] = *(uint64_t *)((char *)a4 + 15);
        char v21 = *((unsigned char *)a4 + 23);
        a4[1] = 0;
        a4[2] = 0;
        *a4 = 0;
        char v34 = *((unsigned char *)a4 + 24);
        char v35 = v21;
        *(_OWORD *)std::string v39 = *(_OWORD *)((char *)a4 + 33);
        *(void *)&v39[14] = *(uint64_t *)((char *)a4 + 47);
        char v37 = *((unsigned char *)a4 + 55);
        char v38 = *((unsigned char *)a4 + 32);
        a4[5] = 0;
        a4[6] = 0;
        a4[4] = 0;
        do
        {
          BOOL v24 = v10;
          if (*((char *)v5 + 23) < 0) {
            operator delete(*(void **)v5);
          }
          long long v25 = *v24;
          *((void *)v5 + 2) = *((void *)v24 + 2);
          long long *v5 = v25;
          *((unsigned char *)v24 + 23) = 0;
          *(unsigned char *)BOOL v24 = 0;
          *((unsigned char *)v5 + 24) = *((unsigned char *)v24 + 24);
          uint64_t v26 = (void **)(v5 + 2);
          if (*((char *)v5 + 55) < 0) {
            operator delete(*v26);
          }
          long long v27 = v24[2];
          *((void *)v5 + 6) = *((void *)v24 + 6);
          *(_OWORD *)uint64_t v26 = v27;
          *((unsigned char *)v24 + 55) = 0;
          *((unsigned char *)v24 + 32) = 0;
          *((_DWORD *)v5 + 14) = *((_DWORD *)v24 + 14);
          *((void *)v5 + 8) = *((void *)v24 + 8);
          if (v7 < v9) {
            break;
          }
          uint64_t v28 = (2 * v9) | 1;
          unsigned int v10 = (long long *)(a1 + 72 * v28);
          if (2 * v9 + 2 < a3)
          {
            uint64_t v29 = a1 + 72 * v28;
            unsigned int v30 = *(_DWORD *)(v29 + 56);
            unsigned int v31 = *((_DWORD *)v10 + 32);
            BOOL v32 = *(void *)(v29 + 64) < *((void *)v10 + 17);
            BOOL v15 = v30 == v31;
            BOOL v33 = v30 > v31;
            if (!v15) {
              BOOL v32 = v33;
            }
            unsigned int v10 = (long long *)((char *)v10 + 72 * v32);
            if (v32) {
              uint64_t v28 = 2 * v9 + 2;
            }
          }
          unsigned int v22 = *((_DWORD *)v10 + 14);
          BOOL v15 = v22 == v18;
          BOOL v23 = v22 > v18;
          if (v15) {
            BOOL v23 = *((void *)v10 + 8) < v19;
          }
          char v5 = v24;
          uint64_t v9 = v28;
        }
        while (!v23);
        if (*((char *)v24 + 23) < 0) {
          operator delete(*(void **)v24);
        }
        *(void *)BOOL v24 = v36;
        *((void *)v24 + 1) = *(void *)v40;
        *(void *)((char *)v24 + 15) = *(void *)&v40[7];
        *((unsigned char *)v24 + 23) = v35;
        *((unsigned char *)v24 + 24) = v34;
        if (*((char *)v24 + 55) < 0) {
          operator delete(*((void **)v24 + 4));
        }
        *((unsigned char *)v24 + 32) = v38;
        *(long long *)((char *)v24 + 33) = *(_OWORD *)v39;
        *(void *)((char *)v24 + 47) = *(void *)&v39[14];
        *((unsigned char *)v24 + 55) = v37;
        *((_DWORD *)v24 + 14) = v18;
        *((void *)v24 + 8) = v19;
      }
    }
  }
}

void sub_9C54E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = 0;
    *(_OWORD *)unsigned int v30 = *(_OWORD *)a1;
    uint64_t v31 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    char v32 = *(unsigned char *)(a1 + 24);
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 32);
    uint64_t v34 = *(void *)(a1 + 48);
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    int64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = a1;
    long long v35 = *(_OWORD *)(a1 + 56);
    do
    {
      uint64_t v11 = v7 + 1;
      uint64_t v12 = v9 + 72 * (v7 + 1);
      uint64_t v13 = 2 * v7;
      uint64_t v7 = (2 * v7) | 1;
      uint64_t v14 = v13 + 2;
      if (v13 + 2 < a4)
      {
        uint64_t v15 = v9 + 72 * v11;
        unsigned int v16 = *(_DWORD *)(v15 + 56);
        unsigned int v17 = *(_DWORD *)(v12 + 128);
        BOOL v18 = *(void *)(v15 + 64) < *(void *)(v12 + 136);
        BOOL v19 = v16 == v17;
        BOOL v20 = v16 > v17;
        if (!v19) {
          BOOL v18 = v20;
        }
        v12 += 72 * v18;
        if (v18) {
          uint64_t v7 = v14;
        }
      }
      if (*(char *)(v9 + 23) < 0) {
        operator delete(*(void **)v9);
      }
      long long v21 = *(_OWORD *)v12;
      *(void *)(v9 + 16) = *(void *)(v12 + 16);
      *(_OWORD *)uint64_t v9 = v21;
      *(unsigned char *)(v12 + 23) = 0;
      *(unsigned char *)uint64_t v12 = 0;
      *(unsigned char *)(v9 + 24) = *(unsigned char *)(v12 + 24);
      unsigned int v22 = (void **)(v9 + 32);
      if (*(char *)(v9 + 55) < 0) {
        operator delete(*v22);
      }
      long long v10 = *(_OWORD *)(v12 + 32);
      *(void *)(v9 + 48) = *(void *)(v12 + 48);
      *(_OWORD *)unsigned int v22 = v10;
      *(unsigned char *)(v12 + 55) = 0;
      *(unsigned char *)(v12 + 32) = 0;
      *(_DWORD *)(v9 + 56) = *(_DWORD *)(v12 + 56);
      *(void *)(v9 + 64) = *(void *)(v12 + 64);
      uint64_t v9 = v12;
    }
    while (v7 <= v8);
    BOOL v23 = (void **)(v12 + 32);
    BOOL v24 = (void **)(a2 - 72);
    int v25 = *(char *)(v12 + 23);
    if (v12 == a2 - 72)
    {
      if (v25 < 0) {
        operator delete(*(void **)v12);
      }
      *(void *)(v12 + 16) = v31;
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v30;
      *(unsigned char *)(v12 + 24) = v32;
      if (*(char *)(v12 + 55) < 0) {
        operator delete(*v23);
      }
      *(void *)(v12 + 48) = v34;
      *(_OWORD *)BOOL v23 = *(_OWORD *)__p;
      *(_DWORD *)(v12 + 56) = v35;
      *(void *)(v12 + 64) = *((void *)&v35 + 1);
    }
    else
    {
      if (v25 < 0) {
        operator delete(*(void **)v12);
      }
      long long v26 = *(_OWORD *)v24;
      *(void *)(v12 + 16) = *(void *)(a2 - 56);
      *(_OWORD *)uint64_t v12 = v26;
      *(unsigned char *)(a2 - 49) = 0;
      *(unsigned char *)(a2 - 72) = 0;
      *(unsigned char *)(v12 + 24) = *(unsigned char *)(a2 - 48);
      if (*(char *)(v12 + 55) < 0) {
        operator delete(*v23);
      }
      long long v27 = (void **)(a2 - 40);
      long long v28 = *(_OWORD *)(a2 - 40);
      *(void *)(v12 + 48) = *(void *)(a2 - 24);
      *(_OWORD *)BOOL v23 = v28;
      *(unsigned char *)(a2 - 17) = 0;
      *(unsigned char *)(a2 - 40) = 0;
      *(_DWORD *)(v12 + 56) = *(_DWORD *)(a2 - 16);
      *(void *)(v12 + 64) = *(void *)(a2 - 8);
      if (*(char *)(a2 - 49) < 0) {
        operator delete(*v24);
      }
      *(_OWORD *)BOOL v24 = *(_OWORD *)v30;
      *(void *)(a2 - 56) = v31;
      *(unsigned char *)(a2 - 48) = v32;
      if (*(char *)(a2 - 17) < 0) {
        operator delete(*v27);
      }
      *(_OWORD *)long long v27 = *(_OWORD *)__p;
      *(void *)(a2 - 24) = v34;
      *(_DWORD *)(a2 - 16) = v35;
      *(void *)(a2 - 8) = *((void *)&v35 + 1);
      sub_9C5824(a1, v12 + 72, a3, 0x8E38E38E38E38E39 * ((v12 + 72 - a1) >> 3));
    }
  }
}

void sub_9C5810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4A0638((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9C5824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v6 = v4 >> 1;
    uint64_t v7 = a1 + 72 * (v4 >> 1);
    unsigned int v8 = *(_DWORD *)(v7 + 56);
    unsigned int v9 = *(_DWORD *)(a2 - 16);
    unint64_t v10 = *(void *)(a2 - 8);
    BOOL v11 = *(void *)(v7 + 64) < v10;
    BOOL v12 = v8 == v9;
    BOOL v13 = v8 > v9;
    if (!v12) {
      BOOL v11 = v13;
    }
    if (v11)
    {
      uint64_t v14 = (long long *)(a2 - 72);
      uint64_t v28 = *(void *)(a2 - 72);
      *(void *)char v32 = *(void *)(a2 - 64);
      *(void *)&v32[7] = *(void *)(a2 - 57);
      char v27 = *(unsigned char *)(a2 - 49);
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = 0;
      *(void *)uint64_t v14 = 0;
      char v15 = *(unsigned char *)(a2 - 48);
      *(_OWORD *)uint64_t v31 = *(_OWORD *)(a2 - 39);
      *(void *)&v31[14] = *(void *)(a2 - 25);
      char v29 = *(unsigned char *)(a2 - 17);
      char v30 = *(unsigned char *)(a2 - 40);
      *((void *)v14 + 5) = 0;
      *((void *)v14 + 6) = 0;
      *((void *)v14 + 4) = 0;
      do
      {
        if (*((char *)v14 + 23) < 0) {
          operator delete(*(void **)v14);
        }
        unsigned int v16 = (long long *)(a1 + 72 * v6);
        long long v17 = *v16;
        *((void *)v14 + 2) = *((void *)v16 + 2);
        long long *v14 = v17;
        *((unsigned char *)v16 + 23) = 0;
        *(unsigned char *)unsigned int v16 = 0;
        *((unsigned char *)v14 + 24) = *((unsigned char *)v16 + 24);
        BOOL v18 = (void **)(v14 + 2);
        if (*((char *)v14 + 55) < 0) {
          operator delete(*v18);
        }
        long long v19 = v16[2];
        *((void *)v14 + 6) = *((void *)v16 + 6);
        *(_OWORD *)BOOL v18 = v19;
        *((unsigned char *)v16 + 55) = 0;
        uint64_t v20 = a1 + 72 * v6;
        uint64_t v22 = *(void *)(v20 + 64);
        long long v21 = (unint64_t *)(v20 + 64);
        *((unsigned char *)v16 + 32) = 0;
        *((_DWORD *)v14 + 14) = *((_DWORD *)v21 - 2);
        *((void *)v14 + 8) = v22;
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v23 = a1 + 72 * v6;
        unsigned int v24 = *(_DWORD *)(v23 + 56);
        BOOL v25 = *(void *)(v23 + 64) < v10;
        BOOL v12 = v24 == v9;
        BOOL v26 = v24 > v9;
        if (!v12) {
          BOOL v25 = v26;
        }
        uint64_t v14 = v16;
      }
      while (v25);
      if (*((char *)v16 + 23) < 0) {
        operator delete(*(void **)v16);
      }
      *(void *)unsigned int v16 = v28;
      *((void *)v16 + 1) = *(void *)v32;
      *(void *)((char *)v16 + 15) = *(void *)&v32[7];
      *((unsigned char *)v16 + 23) = v27;
      *((unsigned char *)v16 + 24) = v15;
      if (*((char *)v16 + 55) < 0) {
        operator delete(*((void **)v16 + 4));
      }
      *((unsigned char *)v16 + 32) = v30;
      *(long long *)((char *)v16 + 33) = *(_OWORD *)v31;
      *(void *)((char *)v16 + 47) = *(void *)&v31[14];
      *((unsigned char *)v16 + 55) = v29;
      *((_DWORD *)v21 - 2) = v9;
      *long long v21 = v10;
    }
  }
}

__n128 **sub_9C5A48(long long *a1, long long *a2, __n128 **a3, uint64_t a4)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; uint64_t i = (long long *)((char *)i + 72))
    {
      if (*((char *)i + 23) < 0)
      {
        sub_4200(v12, *(void **)i, *((void *)i + 1));
        char v14 = *((unsigned char *)i + 24);
        if ((*((char *)i + 55) & 0x80000000) == 0)
        {
LABEL_6:
          long long v9 = i[2];
          uint64_t v16 = *((void *)i + 6);
          long long __p = v9;
          goto LABEL_9;
        }
      }
      else
      {
        long long v8 = *i;
        uint64_t v13 = *((void *)i + 2);
        *(_OWORD *)BOOL v12 = v8;
        char v14 = *((unsigned char *)i + 24);
        if ((*((char *)i + 55) & 0x80000000) == 0) {
          goto LABEL_6;
        }
      }
      sub_4200(&__p, *((void **)i + 4), *((void *)i + 5));
LABEL_9:
      unint64_t v10 = sub_9C5B94(a3, a4, (uint64_t)v12);
      if (SHIBYTE(v16) < 0)
      {
        operator delete((void *)__p);
        if (SHIBYTE(v13) < 0) {
LABEL_13:
        }
          operator delete(v12[0]);
      }
      else if (SHIBYTE(v13) < 0)
      {
        goto LABEL_13;
      }
      a4 = (uint64_t)&v10[3].n128_i64[1];
    }
  }
  return a3;
}

void sub_9C5B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9C5B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 *sub_9C5B94(__n128 **a1, uint64_t a2, uint64_t a3)
{
  char v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 56;
  long long v8 = (__n128 *)((char *)*a1 + 56 * v7);
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v26 > 0x492492492492492) {
      sub_2E00();
    }
    unint64_t v27 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - (void)v5) >> 3);
    if (2 * v27 > v26) {
      unint64_t v26 = 2 * v27;
    }
    if (v27 >= 0x249249249249249) {
      unint64_t v28 = 0x492492492492492;
    }
    else {
      unint64_t v28 = v26;
    }
    uint64_t v56 = a1 + 2;
    if (v28)
    {
      if (v28 > 0x492492492492492) {
        sub_188D718();
      }
      char v29 = (__n128 *)operator new(56 * v28);
    }
    else
    {
      char v29 = 0;
    }
    uint64_t v52 = v29;
    unint64_t v53 = (__n128 *)((char *)v29 + 56 * v7);
    uint64_t v54 = v53;
    uint64_t v55 = (__n128 *)((char *)v29 + 56 * v28);
    sub_9C6024(&v52, (__n128 *)a3);
    char v37 = v53;
    char v38 = *a1;
    std::string v39 = v53;
    if (*a1 != v8)
    {
      unint64_t v40 = 0;
      do
      {
        uint64_t v41 = (uint64_t)v37 + v40;
        uint64_t v42 = (char *)v8 + v40;
        long long v43 = *(long long *)((char *)&v8[-3] + v40 - 8);
        *(void *)(v41 - 40) = *(void *)((char *)&v8[-2] + v40 - 8);
        *(_OWORD *)(v41 - 56) = v43;
        *((void *)v42 - 6) = 0;
        *((void *)v42 - 5) = 0;
        *((void *)v42 - 7) = 0;
        *(unsigned char *)(v41 - 32) = v8[-2].n128_u8[v40];
        long long v44 = *(long long *)((char *)&v8[-1] + v40 - 8);
        *(void *)(v41 - 8) = v8->n128_u64[v40 / 8 - 1];
        *(_OWORD *)(v41 - 24) = v44;
        *((void *)v42 - 2) = 0;
        *((void *)v42 - 1) = 0;
        *((void *)v42 - 3) = 0;
        v40 -= 56;
      }
      while ((__n128 *)((char *)v8 + v40) != v38);
      std::string v39 = (__n128 *)((char *)v37 + v40);
    }
    unint64_t v53 = v39;
    long long v45 = a1[1];
    uint64_t v46 = v54;
    if (v45 != v8)
    {
      do
      {
        __n128 v47 = *v8;
        v46[1].n128_u64[0] = v8[1].n128_u64[0];
        *uint64_t v46 = v47;
        v8->n128_u64[1] = 0;
        v8[1].n128_u64[0] = 0;
        v8->n128_u64[0] = 0;
        v46[1].n128_u8[8] = v8[1].n128_u8[8];
        __n128 v48 = v8[2];
        v46[3].n128_u64[0] = v8[3].n128_u64[0];
        v46[2] = v48;
        v8[2].n128_u64[1] = 0;
        v8[3].n128_u64[0] = 0;
        v8[2].n128_u64[0] = 0;
        uint64_t v46 = (__n128 *)((char *)v46 + 56);
        long long v8 = (__n128 *)((char *)v8 + 56);
      }
      while (v8 != v45);
      std::string v39 = v53;
      long long v8 = a1[1];
    }
    int v49 = *a1;
    *a1 = v39;
    a1[1] = v46;
    size_t v50 = a1[2];
    a1[2] = v55;
    uint64_t v54 = v8;
    uint64_t v55 = v50;
    uint64_t v52 = v49;
    unint64_t v53 = v49;
    if (v8 == v49)
    {
      if (!v8) {
        return v37;
      }
      goto LABEL_37;
    }
    while (1)
    {
      uint64_t v54 = (__n128 *)((char *)v8 - 56);
      if (v8[-1].n128_i8[15] < 0)
      {
        operator delete((void *)v8[-2].n128_u64[1]);
        if (v8[-3].n128_i8[15] < 0) {
LABEL_45:
        }
          operator delete((void *)v8[-4].n128_u64[1]);
      }
      else if (v8[-3].n128_i8[15] < 0)
      {
        goto LABEL_45;
      }
      long long v8 = v54;
      if (v54 == v49)
      {
        long long v8 = v52;
        if (!v52) {
          return v37;
        }
LABEL_37:
        operator delete(v8);
        return v37;
      }
    }
  }
  if (v8 == (__n128 *)v6)
  {
    __n128 v34 = *(__n128 *)a3;
    v8[1].n128_u64[0] = *(void *)(a3 + 16);
    __n128 *v8 = v34;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    long long v35 = (char *)v5 + 56 * v7;
    v35[24] = *(unsigned char *)(a3 + 24);
    long long v36 = *(_OWORD *)(a3 + 32);
    *((void *)v35 + 6) = *(void *)(a3 + 48);
    *((_OWORD *)v35 + 2) = v36;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 32) = 0;
    a1[1] = (__n128 *)((char *)v8 + 56);
  }
  else
  {
    unint64_t v10 = &v8[3].n128_i8[8];
    unint64_t v11 = v6 - 56;
    BOOL v12 = a1[1];
    if (v6 >= 0x38)
    {
      do
      {
        __n128 v13 = *(__n128 *)v11;
        v12[1].n128_u64[0] = *(void *)(v11 + 16);
        *BOOL v12 = v13;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)unint64_t v11 = 0;
        v12[1].n128_u8[8] = *(unsigned char *)(v11 + 24);
        __n128 v14 = *(__n128 *)(v11 + 32);
        v12[3].n128_u64[0] = *(void *)(v11 + 48);
        v12[2] = v14;
        *(void *)(v11 + 40) = 0;
        *(void *)(v11 + 48) = 0;
        *(void *)(v11 + 32) = 0;
        BOOL v12 = (__n128 *)((char *)v12 + 56);
        v11 += 56;
      }
      while (v11 < v6);
    }
    a1[1] = v12;
    if ((char *)v6 != v10)
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - (void)v10) >> 3);
      uint64_t v17 = -56 * v16;
      BOOL v18 = (char *)v5 + 56 * v7 + 56 * v16;
      do
      {
        uint64_t v21 = v6 + v15;
        uint64_t v22 = (void **)(v6 + v15 - 56);
        if (*(char *)(v6 + v15 - 33) < 0) {
          operator delete(*v22);
        }
        uint64_t v23 = &v18[v15 - 56];
        long long v24 = *(_OWORD *)v23;
        *(void *)(v6 + v15 - 40) = *(void *)&v18[v15 - 40];
        *(_OWORD *)uint64_t v22 = v24;
        v18[v15 - 33] = 0;
        *uint64_t v23 = 0;
        *(unsigned char *)(v21 - 32) = v18[v15 - 32];
        BOOL v25 = (void **)(v21 - 24);
        if (*(char *)(v21 - 1) < 0) {
          operator delete(*v25);
        }
        long long v19 = &v18[v15];
        long long v20 = *(_OWORD *)&v18[v15 - 24];
        *(void *)(v21 - 8) = *(void *)&v18[v15 - 8];
        *(_OWORD *)BOOL v25 = v20;
        *(v19 - 1) = 0;
        *(v19 - 24) = 0;
        v15 -= 56;
      }
      while (v17 != v15);
    }
    if (v8[1].n128_i8[7] < 0) {
      operator delete((void *)v8->n128_u64[0]);
    }
    __n128 v30 = *(__n128 *)a3;
    v8[1].n128_u64[0] = *(void *)(a3 + 16);
    __n128 *v8 = v30;
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    uint64_t v31 = (char *)v5 + 56 * v7;
    v31[24] = *(unsigned char *)(a3 + 24);
    char v32 = v31 + 32;
    if (v8[3].n128_i8[7] < 0) {
      operator delete(*(void **)v32);
    }
    long long v33 = *(_OWORD *)(a3 + 32);
    *((void *)v32 + 2) = *(void *)(a3 + 48);
    *(_OWORD *)char v32 = v33;
    *(unsigned char *)(a3 + 55) = 0;
    *(unsigned char *)(a3 + 32) = 0;
  }
  return v8;
}

void sub_9C6010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9C31CC((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_9C6024(__n128 **a1, __n128 *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_34;
  }
  char v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  if (v6 > (unint64_t)*a1)
  {
    uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - (void)*a1) >> 3);
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    if ((__n128 *)v6 == v4)
    {
      char v29 = (__n128 *)(v6 - 56 * v9);
    }
    else
    {
      uint64_t v11 = -56 * v9;
      do
      {
        unint64_t v13 = v6 + v11;
        if (*(char *)(v6 + v11 + 23) < 0) {
          operator delete(*(void **)v13);
        }
        __n128 v14 = *(__n128 *)v6;
        *(void *)(v13 + 16) = *(void *)(v6 + 16);
        *(__n128 *)unint64_t v13 = v14;
        *(unsigned char *)(v6 + 23) = 0;
        *(unsigned char *)unint64_t v6 = 0;
        *(unsigned char *)(v13 + 24) = *(unsigned char *)(v6 + 24);
        uint64_t v15 = (void **)(v13 + 32);
        if (*(char *)(v13 + 55) < 0) {
          operator delete(*v15);
        }
        long long v12 = *(_OWORD *)(v6 + 32);
        *(void *)(v13 + 48) = *(void *)(v6 + 48);
        *(_OWORD *)uint64_t v15 = v12;
        *(unsigned char *)(v6 + 55) = 0;
        *(unsigned char *)(v6 + 32) = 0;
        v6 += 56;
      }
      while ((__n128 *)v6 != v4);
      unint64_t v4 = a1[1];
      char v29 = (__n128 *)(v6 + 56 * v10);
    }
    a1[1] = (__n128 *)((char *)v4 + 56 * v10);
    a1[2] = v29;
    unint64_t v4 = v29;
    goto LABEL_34;
  }
  unint64_t v16 = 0xDB6DB6DB6DB6DB6ELL * (((char *)v4 - (char *)v5) >> 3);
  if (v4 == v5) {
    unint64_t v16 = 1;
  }
  if (v16 >= 0x492492492492493) {
    sub_188D718();
  }
  unint64_t v17 = v16 >> 2;
  uint64_t v18 = 56 * v16;
  long long v19 = (__n128 *)operator new(56 * v16);
  long long v20 = (char *)v19 + 56 * v17;
  uint64_t v21 = (char *)v19 + v18;
  if (v4 != (__n128 *)v6)
  {
    uint64_t v22 = (char *)v4 + (void)v20 - v6;
    uint64_t v23 = 56 * v17;
    do
    {
      long long v24 = (char *)v19 + v23;
      __n128 v25 = *(__n128 *)v6;
      *((void *)v24 + 2) = *(void *)(v6 + 16);
      *(__n128 *)long long v24 = v25;
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      *(void *)unint64_t v6 = 0;
      v24[24] = *(unsigned char *)(v6 + 24);
      long long v26 = *(_OWORD *)(v6 + 32);
      *((void *)v24 + 6) = *(void *)(v6 + 48);
      *((_OWORD *)v24 + 2) = v26;
      *(void *)(v6 + 40) = 0;
      *(void *)(v6 + 48) = 0;
      *(void *)(v6 + 32) = 0;
      v23 += 56;
      v6 += 56;
    }
    while (v24 + 56 != v22);
    char v5 = *a1;
    unint64_t v27 = a1[1];
    unint64_t v28 = a1[2];
    *a1 = v19;
    a1[1] = (__n128 *)v20;
    a1[2] = (__n128 *)v22;
    a1[3] = (__n128 *)v21;
    while (1)
    {
      if (v28 == v27) {
        goto LABEL_31;
      }
      if (v28[-1].n128_i8[15] < 0)
      {
        operator delete((void *)v28[-2].n128_u64[1]);
        if ((v28[-3].n128_i8[15] & 0x80000000) == 0) {
          goto LABEL_20;
        }
      }
      else if ((v28[-3].n128_i8[15] & 0x80000000) == 0)
      {
        goto LABEL_20;
      }
      operator delete((void *)v28[-4].n128_u64[1]);
LABEL_20:
      unint64_t v28 = (__n128 *)((char *)v28 - 56);
    }
  }
  *a1 = v19;
  a1[1] = (__n128 *)v20;
  a1[2] = (__n128 *)v20;
  a1[3] = (__n128 *)v21;
LABEL_31:
  if (v5) {
    operator delete(v5);
  }
  unint64_t v4 = a1[2];
LABEL_34:
  __n128 v30 = *a2;
  v4[1].n128_u64[0] = a2[1].n128_u64[0];
  __n128 *v4 = v30;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  v4[1].n128_u8[8] = a2[1].n128_u8[8];
  __n128 result = a2[2];
  v4[3].n128_u64[0] = a2[3].n128_u64[0];
  v4[2] = result;
  a2[2].n128_u64[1] = 0;
  a2[3].n128_u64[0] = 0;
  a2[2].n128_u64[0] = 0;
  a1[2] = (__n128 *)((char *)a1[2] + 56);
  return result;
}

std::string *sub_9C62C4(unsigned char *__dst, uint64_t a2)
{
  if (__dst[56])
  {
    return sub_9C63B8((uint64_t)__dst, a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(__dst, *(void **)a2, *(void *)(a2 + 8));
      __dst[24] = *(unsigned char *)(a2 + 24);
      __n128 result = (std::string *)(__dst + 32);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *((void *)__dst + 2) = *(void *)(a2 + 16);
      *(_OWORD *)std::string __dst = v4;
      __dst[24] = *(unsigned char *)(a2 + 24);
      __n128 result = (std::string *)(__dst + 32);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
      {
LABEL_4:
        long long v6 = *(_OWORD *)(a2 + 32);
        result->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
        *(_OWORD *)&result->__r_.__value_.__l.__data_ = v6;
        __dst[56] = 1;
        return result;
      }
    }
    __n128 result = (std::string *)sub_4200(result, *(void **)(a2 + 32), *(void *)(a2 + 40));
    __dst[56] = 1;
  }
  return result;
}

void sub_9C639C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_9C63B8(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);

  return std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
}

uint64_t sub_9C6400(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 63) = *(void *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v7 = a1 + 72;
  if (*(unsigned char *)(a2 + 128))
  {
    uint64_t v8 = (long long *)(a2 + 72);
    if (*(unsigned char *)(a1 + 128))
    {
      if (*(char *)(a1 + 95) < 0) {
        operator delete(*(void **)v7);
      }
      long long v32 = *v8;
      *(void *)(v7 + 16) = *(void *)(a2 + 88);
      *(_OWORD *)uint64_t v7 = v32;
      *(unsigned char *)(a2 + 95) = 0;
      *(unsigned char *)(a2 + 72) = 0;
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      long long v33 = (void **)(a1 + 104);
      if (*(char *)(a1 + 127) < 0) {
        operator delete(*v33);
      }
      long long v34 = *(_OWORD *)(a2 + 104);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(_OWORD *)long long v33 = v34;
      *(unsigned char *)(a2 + 127) = 0;
      *(unsigned char *)(a2 + 104) = 0;
    }
    else
    {
      long long v9 = *v8;
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(_OWORD *)uint64_t v7 = v9;
      *(void *)(a2 + 80) = 0;
      *(void *)(a2 + 88) = 0;
      *(void *)uint64_t v8 = 0;
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      long long v10 = *(_OWORD *)(a2 + 104);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(_OWORD *)(a1 + 104) = v10;
      *(void *)(a2 + 112) = 0;
      *(void *)(a2 + 120) = 0;
      *(void *)(a2 + 104) = 0;
      *(unsigned char *)(a1 + 128) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 128))
  {
    if (*(char *)(a1 + 127) < 0) {
      operator delete(*(void **)(a1 + 104));
    }
    if (*(char *)(a1 + 95) < 0) {
      operator delete(*(void **)v7);
    }
    *(unsigned char *)(a1 + 128) = 0;
  }
  uint64_t v11 = (void **)(a1 + 136);
  uint64_t v12 = *(void *)(a1 + 136);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 144);
    __n128 v14 = *(void **)(a1 + 136);
    if (v13 == v12)
    {
LABEL_14:
      *(void *)(a1 + 144) = v12;
      operator delete(v14);
      *uint64_t v11 = 0;
      *(void *)(a1 + 144) = 0;
      *(void *)(a1 + 152) = 0;
      goto LABEL_15;
    }
    while (1)
    {
      if (*(char *)(v13 - 1) < 0)
      {
        operator delete(*(void **)(v13 - 24));
        if (*(char *)(v13 - 33) < 0) {
LABEL_12:
        }
          operator delete(*(void **)(v13 - 56));
      }
      else if (*(char *)(v13 - 33) < 0)
      {
        goto LABEL_12;
      }
      v13 -= 56;
      if (v13 == v12)
      {
        __n128 v14 = *v11;
        goto LABEL_14;
      }
    }
  }
LABEL_15:
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  sub_9C686C(a1 + 160, (long long *)(a2 + 160));
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  uint64_t v15 = *(void **)(a1 + 352);
  if (v15)
  {
    *(void *)(a1 + 360) = v15;
    operator delete(v15);
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 360) = 0;
    *(void *)(a1 + 368) = 0;
  }
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a2 + 352) = 0;
  *(void *)(a2 + 360) = 0;
  *(void *)(a2 + 368) = 0;
  unint64_t v16 = *(void **)(a1 + 376);
  if (v16)
  {
    *(void *)(a1 + 384) = v16;
    operator delete(v16);
    *(void *)(a1 + 376) = 0;
    *(void *)(a1 + 384) = 0;
    *(void *)(a1 + 392) = 0;
  }
  uint64_t v17 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v17;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 384) = 0;
  *(void *)(a2 + 392) = 0;
  uint64_t v18 = *(void **)(a1 + 400);
  if (v18)
  {
    *(void *)(a1 + 408) = v18;
    operator delete(v18);
    *(void *)(a1 + 400) = 0;
    *(void *)(a1 + 408) = 0;
    *(void *)(a1 + 416) = 0;
  }
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(void *)(a2 + 408) = 0;
  *(void *)(a2 + 416) = 0;
  *(void *)(a2 + 400) = 0;
  int v19 = *(_DWORD *)(a2 + 432);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(_DWORD *)(a1 + 432) = v19;
  long long v20 = (void **)(a1 + 440);
  if (*(unsigned char *)(a2 + 496))
  {
    uint64_t v21 = (long long *)(a2 + 440);
    if (*(unsigned char *)(a1 + 496))
    {
      if (*(char *)(a1 + 463) < 0) {
        operator delete(*v20);
      }
      long long v35 = *v21;
      *(void *)(a1 + 456) = *(void *)(a2 + 456);
      *(_OWORD *)long long v20 = v35;
      *(unsigned char *)(a2 + 463) = 0;
      *(unsigned char *)(a2 + 440) = 0;
      *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
      long long v36 = (void **)(a1 + 472);
      if (*(char *)(a1 + 495) < 0) {
        operator delete(*v36);
      }
      long long v37 = *(_OWORD *)(a2 + 472);
      *(void *)(a1 + 488) = *(void *)(a2 + 488);
      *(_OWORD *)long long v36 = v37;
      *(unsigned char *)(a2 + 495) = 0;
      *(unsigned char *)(a2 + 472) = 0;
    }
    else
    {
      long long v22 = *v21;
      *(void *)(a1 + 456) = *(void *)(a2 + 456);
      *(_OWORD *)long long v20 = v22;
      *(void *)(a2 + 448) = 0;
      *(void *)(a2 + 456) = 0;
      *(void *)uint64_t v21 = 0;
      *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
      long long v23 = *(_OWORD *)(a2 + 472);
      *(void *)(a1 + 488) = *(void *)(a2 + 488);
      *(_OWORD *)(a1 + 472) = v23;
      *(void *)(a2 + 480) = 0;
      *(void *)(a2 + 488) = 0;
      *(void *)(a2 + 472) = 0;
      *(unsigned char *)(a1 + 496) = 1;
    }
  }
  else if (*(unsigned char *)(a1 + 496))
  {
    if (*(char *)(a1 + 495) < 0) {
      operator delete(*(void **)(a1 + 472));
    }
    if (*(char *)(a1 + 463) < 0) {
      operator delete(*v20);
    }
    *(unsigned char *)(a1 + 496) = 0;
  }
  *(unsigned char *)(a1 + 504) = *(unsigned char *)(a2 + 504);
  sub_4F377C(a1 + 512, a2 + 512);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  long long v24 = (void **)(a1 + 560);
  if (*(char *)(a1 + 583) < 0) {
    operator delete(*v24);
  }
  long long v25 = *(_OWORD *)(a2 + 560);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(_OWORD *)long long v24 = v25;
  *(unsigned char *)(a2 + 583) = 0;
  *(unsigned char *)(a2 + 560) = 0;
  *(unsigned char *)(a1 + 584) = *(unsigned char *)(a2 + 584);
  long long v26 = (void **)(a1 + 592);
  if (*(char *)(a1 + 615) < 0) {
    operator delete(*v26);
  }
  long long v27 = *(_OWORD *)(a2 + 592);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(_OWORD *)long long v26 = v27;
  *(unsigned char *)(a2 + 615) = 0;
  *(unsigned char *)(a2 + 592) = 0;
  *(unsigned char *)(a1 + 616) = *(unsigned char *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  unint64_t v28 = *(void **)(a1 + 632);
  if (v28)
  {
    *(void *)(a1 + 640) = v28;
    operator delete(v28);
    *(void *)(a1 + 632) = 0;
    *(void *)(a1 + 640) = 0;
    *(void *)(a1 + 648) = 0;
  }
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  *(void *)(a2 + 648) = 0;
  *(_OWORD *)(a2 + 632) = 0u;
  long long v29 = *(_OWORD *)(a2 + 656);
  long long v30 = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 681) = *(_OWORD *)(a2 + 681);
  *(_OWORD *)(a1 + 656) = v29;
  *(_OWORD *)(a1 + 672) = v30;
  return a1;
}

uint64_t sub_9C686C(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  long long v5 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v5);
  }
  long long v6 = a2[2];
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_OWORD *)long long v5 = v6;
  *((unsigned char *)a2 + 55) = 0;
  *((unsigned char *)a2 + 32) = 0;
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  sub_4F377C(a1 + 64, (uint64_t)(a2 + 4));
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  uint64_t v7 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[7];
  *(void *)(a1 + 128) = *((void *)a2 + 16);
  *(_OWORD *)uint64_t v7 = v8;
  *((unsigned char *)a2 + 135) = 0;
  *((unsigned char *)a2 + 112) = 0;
  *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
  long long v9 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*v9);
  }
  long long v10 = a2[9];
  *(void *)(a1 + 160) = *((void *)a2 + 20);
  *(_OWORD *)long long v9 = v10;
  *((unsigned char *)a2 + 167) = 0;
  *((unsigned char *)a2 + 144) = 0;
  *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
  *(unsigned char *)(a1 + 176) = *((unsigned char *)a2 + 176);
  return a1;
}

__n128 sub_9C6984(uint64_t a1, char *a2, unint64_t a3, _OWORD *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = a1;
    if (a3 == 2)
    {
      int v7 = *((_DWORD *)a2 - 3);
      if (*((_DWORD *)a2 - 2) != 0x7FFFFFFF) {
        int v7 = *((_DWORD *)a2 - 2);
      }
      if (*(_DWORD *)(a1 + 20) == 0x7FFFFFFF) {
        int v8 = *(_DWORD *)(a1 + 16);
      }
      else {
        int v8 = *(_DWORD *)(a1 + 20);
      }
      if (v7 < v8)
      {
        *(_OWORD *)unint64_t v40 = *(_OWORD *)a1;
        *(_OWORD *)&v40[12] = *(_OWORD *)(a1 + 12);
        long long v9 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 28);
        *(_OWORD *)(a1 + 12) = v9;
        *((_OWORD *)a2 - 1) = *(_OWORD *)&v40[12];
        __n128 result = *(__n128 *)v40;
        *(_OWORD *)(a2 - 28) = *(_OWORD *)v40;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      long long v27 = a4;
      unint64_t v28 = a3 >> 1;
      uint64_t v29 = a1 + 28 * (a3 >> 1);
      unint64_t v30 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_9C6C90(a1, v29, v30, a4);
        uint64_t v31 = (_OWORD *)((char *)v27 + 28 * v28);
        sub_9C6C90(v6 + 28 * (a3 >> 1), (uint64_t)a2, a3 - (a3 >> 1), v31);
        long long v32 = (_OWORD *)((char *)v27 + 28 * a3);
        long long v33 = v31;
        while (v33 != v32)
        {
          int v34 = *((_DWORD *)v33 + 4);
          if (*((_DWORD *)v33 + 5) != 0x7FFFFFFF) {
            int v34 = *((_DWORD *)v33 + 5);
          }
          if (*((_DWORD *)v27 + 5) == 0x7FFFFFFF) {
            int v35 = *((_DWORD *)v27 + 4);
          }
          else {
            int v35 = *((_DWORD *)v27 + 5);
          }
          if (v34 >= v35)
          {
            __n128 result = *(__n128 *)v27;
            *(_OWORD *)(v6 + 12) = *(_OWORD *)((char *)v27 + 12);
            *(__n128 *)uint64_t v6 = result;
            v6 += 28;
            long long v27 = (_OWORD *)((char *)v27 + 28);
            if (v27 == v31) {
              goto LABEL_43;
            }
          }
          else
          {
            __n128 result = *(__n128 *)v33;
            *(_OWORD *)(v6 + 12) = *(_OWORD *)((char *)v33 + 12);
            *(__n128 *)uint64_t v6 = result;
            v6 += 28;
            long long v33 = (_OWORD *)((char *)v33 + 28);
            if (v27 == v31)
            {
LABEL_43:
              if (v33 != v32)
              {
                uint64_t v36 = 0;
                do
                {
                  uint64_t v37 = v6 + v36;
                  __n128 result = *(__n128 *)((char *)v33 + v36);
                  *(_OWORD *)(v37 + 12) = *(_OWORD *)((char *)v33 + v36 + 12);
                  *(__n128 *)uint64_t v37 = result;
                  v36 += 28;
                }
                while ((_OWORD *)((char *)v33 + v36) != v32);
              }
              return result;
            }
          }
        }
        if (v27 != v31)
        {
          uint64_t v38 = 0;
          do
          {
            uint64_t v39 = v6 + v38;
            __n128 result = *(__n128 *)((char *)v27 + v38);
            *(_OWORD *)(v39 + 12) = *(_OWORD *)((char *)v27 + v38 + 12);
            *(__n128 *)uint64_t v39 = result;
            v38 += 28;
          }
          while ((_OWORD *)((char *)v27 + v38) != v31);
        }
      }
      else
      {
        sub_9C6984(a1, v29, v30, a4, a5);
        sub_9C6984(v6 + 28 * (a3 >> 1), a2, a3 - (a3 >> 1), v27, a5);
        sub_9C6F88((char *)v6, (char *)(v6 + 28 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (char *)v27, a5);
      }
    }
    else if ((char *)a1 != a2)
    {
      uint64_t v12 = (__n128 *)(a1 + 28);
      if ((char *)(a1 + 28) != a2)
      {
        uint64_t v13 = 0;
        __n128 v14 = (_DWORD *)a1;
        do
        {
          unint64_t v16 = v12;
          int v17 = v14[11];
          int v18 = v14[12];
          int v19 = v14[4];
          if (v18 == 0x7FFFFFFF) {
            int v20 = v14[11];
          }
          else {
            int v20 = v14[12];
          }
          if (v14[5] != 0x7FFFFFFF) {
            int v19 = v14[5];
          }
          if (v20 < v19)
          {
            __n128 v41 = *v16;
            int v21 = v14[13];
            uint64_t v22 = v13;
            do
            {
              uint64_t v23 = a1 + v22;
              *(_OWORD *)(v23 + 28) = *(_OWORD *)(a1 + v22);
              *(_OWORD *)(v23 + 40) = *(_OWORD *)(a1 + v22 + 12);
              if (!v22)
              {
                uint64_t v15 = a1;
                goto LABEL_15;
              }
              int v25 = *(_DWORD *)(v23 - 12);
              int v24 = *(_DWORD *)(v23 - 8);
              if (v24 == 0x7FFFFFFF) {
                int v24 = v25;
              }
              v22 -= 28;
            }
            while (v20 < v24);
            uint64_t v15 = a1 + v22 + 28;
LABEL_15:
            __n128 result = v41;
            *(__n128 *)uint64_t v15 = v41;
            *(_DWORD *)(v15 + 16) = v17;
            *(_DWORD *)(v15 + 20) = v18;
            *(_DWORD *)(v15 + 24) = v21;
          }
          uint64_t v12 = (__n128 *)((char *)v16 + 28);
          v13 += 28;
          __n128 v14 = v16;
        }
        while ((char *)&v16[1].n128_f64[1] + 4 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_9C6C90(uint64_t result, uint64_t a2, unint64_t a3, _OWORD *a4)
{
  if (a3)
  {
    long long v4 = a4;
    uint64_t v7 = result;
    if (a3 == 2)
    {
      long long v9 = (long long *)(a2 - 28);
      int v10 = *(_DWORD *)(a2 - 8);
      int v11 = *(_DWORD *)(result + 16);
      if (v10 == 0x7FFFFFFF) {
        int v10 = *(_DWORD *)(a2 - 12);
      }
      if (*(_DWORD *)(result + 20) != 0x7FFFFFFF) {
        int v11 = *(_DWORD *)(result + 20);
      }
      if (v10 >= v11)
      {
        long long v28 = *(_OWORD *)result;
        *(_OWORD *)((char *)a4 + 12) = *(_OWORD *)(result + 12);
        *a4 = v28;
        long long v13 = *v9;
        long long v14 = *(_OWORD *)(a2 - 16);
      }
      else
      {
        long long v12 = *v9;
        *(_OWORD *)((char *)a4 + 12) = *(_OWORD *)(a2 - 16);
        *a4 = v12;
        long long v13 = *(_OWORD *)result;
        long long v14 = *(_OWORD *)(result + 12);
      }
      *(_OWORD *)((char *)a4 + 40) = v14;
      *(_OWORD *)((char *)a4 + 28) = v13;
    }
    else if (a3 == 1)
    {
      long long v8 = *(_OWORD *)result;
      *(_OWORD *)((char *)a4 + 12) = *(_OWORD *)(result + 12);
      *a4 = v8;
    }
    else if ((uint64_t)a3 > 8)
    {
      unint64_t v29 = a3 >> 1;
      uint64_t v30 = 28 * (a3 >> 1);
      uint64_t v31 = result + v30;
      sub_9C6984(result, result + v30, a3 >> 1, a4, a3 >> 1);
      __n128 result = sub_9C6984(v7 + v30, a2, a3 - v29, (char *)v4 + v30, a3 - v29);
      uint64_t v32 = v7 + v30;
      while (v32 != a2)
      {
        int v34 = *(_DWORD *)(v32 + 16);
        if (*(_DWORD *)(v32 + 20) != 0x7FFFFFFF) {
          int v34 = *(_DWORD *)(v32 + 20);
        }
        if (*(_DWORD *)(v7 + 20) == 0x7FFFFFFF) {
          int v35 = *(_DWORD *)(v7 + 16);
        }
        else {
          int v35 = *(_DWORD *)(v7 + 20);
        }
        if (v34 >= v35)
        {
          long long v33 = *(_OWORD *)v7;
          *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(v7 + 12);
          _OWORD *v4 = v33;
          long long v4 = (_OWORD *)((char *)v4 + 28);
          v7 += 28;
          if (v7 == v31) {
            goto LABEL_44;
          }
        }
        else
        {
          long long v36 = *(_OWORD *)v32;
          *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(v32 + 12);
          _OWORD *v4 = v36;
          long long v4 = (_OWORD *)((char *)v4 + 28);
          v32 += 28;
          if (v7 == v31)
          {
LABEL_44:
            if (v32 != a2)
            {
              uint64_t v37 = 0;
              do
              {
                uint64_t v38 = (_OWORD *)((char *)v4 + v37);
                long long v39 = *(_OWORD *)(v32 + v37);
                *(_OWORD *)((char *)v38 + 12) = *(_OWORD *)(v32 + v37 + 12);
                *uint64_t v38 = v39;
                v37 += 28;
              }
              while (v32 + v37 != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v31)
      {
        uint64_t v40 = 0;
        do
        {
          __n128 v41 = (_OWORD *)((char *)v4 + v40);
          long long v42 = *(_OWORD *)(v7 + v40);
          *(_OWORD *)((char *)v41 + 12) = *(_OWORD *)(v7 + v40 + 12);
          *__n128 v41 = v42;
          v40 += 28;
        }
        while (v7 + v40 != v31);
      }
    }
    else if (result != a2)
    {
      long long v15 = *(_OWORD *)result;
      *(_OWORD *)((char *)a4 + 12) = *(_OWORD *)(result + 12);
      *a4 = v15;
      uint64_t v16 = result + 28;
      if (result + 28 != a2)
      {
        uint64_t v17 = 0;
        int v18 = a4;
        do
        {
          uint64_t v20 = v7;
          int v21 = v18;
          uint64_t v7 = v16;
          int v18 = (_OWORD *)((char *)v18 + 28);
          int v22 = *(_DWORD *)(v20 + 48);
          int v23 = *((_DWORD *)v21 + 4);
          if (v22 == 0x7FFFFFFF) {
            int v22 = *(_DWORD *)(v20 + 44);
          }
          if (*((_DWORD *)v21 + 5) != 0x7FFFFFFF) {
            int v23 = *((_DWORD *)v21 + 5);
          }
          int v24 = v18;
          if (v22 < v23)
          {
            *int v18 = *v21;
            *(_OWORD *)((char *)v18 + 12) = *(_OWORD *)((char *)v21 + 12);
            int v24 = a4;
            if (v21 != a4)
            {
              uint64_t v25 = v17;
              while (1)
              {
                int v24 = (_OWORD *)((char *)a4 + v25);
                int v26 = *(_DWORD *)(v20 + 44);
                if (*(_DWORD *)(v20 + 48) != 0x7FFFFFFF) {
                  int v26 = *(_DWORD *)(v20 + 48);
                }
                int v27 = *(_DWORD *)((char *)a4 + v25 - 8) == 0x7FFFFFFF
                    ? *(_DWORD *)((char *)a4 + v25 - 12)
                    : *(_DWORD *)((char *)a4 + v25 - 8);
                if (v26 >= v27) {
                  break;
                }
                _OWORD *v24 = *(_OWORD *)((char *)v24 - 28);
                *(_OWORD *)((char *)v24 + 12) = *(v24 - 1);
                v25 -= 28;
                if (!v25)
                {
                  int v24 = a4;
                  break;
                }
              }
            }
          }
          long long v19 = *(_OWORD *)v7;
          *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)(v7 + 12);
          _OWORD *v24 = v19;
          uint64_t v16 = v7 + 28;
          v17 += 28;
        }
        while (v7 + 28 != a2);
      }
    }
  }
  return result;
}

char *sub_9C6F88(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    int v10 = result;
    while (a5 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v11 = 0;
      int v12 = *((_DWORD *)a2 + 4);
      if (*((_DWORD *)a2 + 5) != 0x7FFFFFFF) {
        int v12 = *((_DWORD *)a2 + 5);
      }
      uint64_t v13 = -a4;
      while (1)
      {
        long long v14 = &v10[v11];
        int v15 = *(_DWORD *)&v10[v11 + 16];
        if (*(_DWORD *)&v10[v11 + 20] != 0x7FFFFFFF) {
          int v15 = *(_DWORD *)&v10[v11 + 20];
        }
        if (v12 < v15) {
          break;
        }
        v11 += 28;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v17 = -v13;
      unsigned int v71 = a3;
      __src = a6;
      uint64_t v70 = a7;
      if (-v13 >= a5)
      {
        if (v13 == -1)
        {
          int v63 = &v10[v11];
          *(_OWORD *)&v73[12] = *(_OWORD *)&v10[v11 + 12];
          *(_OWORD *)char v73 = *(_OWORD *)&v10[v11];
          long long v64 = *(_OWORD *)a2;
          *(_OWORD *)(v63 + 12) = *(_OWORD *)(a2 + 12);
          *(_OWORD *)int v63 = v64;
          *(_OWORD *)a2 = *(_OWORD *)v73;
          *(_OWORD *)(a2 + 12) = *(_OWORD *)&v73[12];
          return result;
        }
        if (v13 > 0) {
          uint64_t v17 = 1 - v13;
        }
        uint64_t v28 = v17 >> 1;
        uint64_t v20 = a2;
        if (a2 != a3)
        {
          unint64_t v29 = &v10[28 * v28 + v11];
          int v31 = *((_DWORD *)v29 + 4);
          int v30 = *((_DWORD *)v29 + 5);
          unint64_t v32 = 0x6DB6DB6DB6DB6DB7 * ((a3 - a2) >> 2);
          if (v30 == 0x7FFFFFFF) {
            int v30 = v31;
          }
          uint64_t v20 = a2;
          do
          {
            unint64_t v33 = v32 >> 1;
            int v34 = &v20[28 * (v32 >> 1)];
            int v35 = *((_DWORD *)v34 + 4);
            if (*((_DWORD *)v34 + 5) != 0x7FFFFFFF) {
              int v35 = *((_DWORD *)v34 + 5);
            }
            long long v36 = v34 + 28;
            v32 += ~v33;
            if (v35 < v30) {
              uint64_t v20 = v36;
            }
            else {
              unint64_t v32 = v33;
            }
          }
          while (v32);
        }
        int v21 = &v10[28 * v28 + v11];
        uint64_t v19 = 0x6DB6DB6DB6DB6DB7 * ((v20 - a2) >> 2);
      }
      else
      {
        if (a5 >= 0) {
          uint64_t v18 = a5;
        }
        else {
          uint64_t v18 = a5 + 1;
        }
        uint64_t v19 = v18 >> 1;
        uint64_t v20 = &a2[28 * (v18 >> 1)];
        int v21 = a2;
        if (a2 - v10 != v11)
        {
          unint64_t v22 = 0x6DB6DB6DB6DB6DB7 * ((a2 - v10 - v11) >> 2);
          if (*((_DWORD *)v20 + 5) == 0x7FFFFFFF) {
            int v23 = *((_DWORD *)v20 + 4);
          }
          else {
            int v23 = *((_DWORD *)v20 + 5);
          }
          int v21 = &v10[v11];
          do
          {
            unint64_t v24 = v22 >> 1;
            uint64_t v25 = &v21[28 * (v22 >> 1)];
            int v26 = *((_DWORD *)v25 + 4);
            if (*((_DWORD *)v25 + 5) != 0x7FFFFFFF) {
              int v26 = *((_DWORD *)v25 + 5);
            }
            int v27 = v25 + 28;
            v22 += ~v24;
            if (v23 < v26) {
              unint64_t v22 = v24;
            }
            else {
              int v21 = v27;
            }
          }
          while (v22);
        }
        uint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((v21 - v10 - v11) >> 2);
      }
      a4 = -v28 - v13;
      uint64_t v68 = a5;
      uint64_t v69 = a5 - v19;
      uint64_t v37 = sub_9C7424(v21, a2, v20);
      uint64_t v38 = v28;
      uint64_t v39 = v19;
      uint64_t v40 = v37;
      if (v38 + v39 >= v68 - (v38 + v39) - v13)
      {
        long long v42 = v20;
        a6 = __src;
        uint64_t v43 = v38;
        __n128 result = (char *)sub_9C6F88(v37, v42, v71, a4, v69, __src, v70);
        a2 = v21;
        a7 = v70;
        a4 = v43;
        a3 = v40;
      }
      else
      {
        __n128 v41 = v21;
        a7 = v70;
        __n128 result = (char *)sub_9C6F88(&v10[v11], v41, v37, v38, v39, __src, v70);
        long long v14 = v40;
        a2 = v20;
        a6 = __src;
        a3 = v71;
        uint64_t v39 = v69;
      }
      a5 = v39;
      int v10 = v14;
      if (!v39) {
        return result;
      }
    }
    if (a4 <= a5)
    {
      if (v10 != a2)
      {
        uint64_t v54 = 0;
        do
        {
          uint64_t v55 = &a6[v54];
          long long v56 = *(_OWORD *)&v10[v54];
          *(_OWORD *)(v55 + 12) = *(_OWORD *)&v10[v54 + 12];
          *(_OWORD *)uint64_t v55 = v56;
          v54 += 28;
        }
        while (&v10[v54] != a2);
        if (v54)
        {
          int64_t v57 = &a6[v54];
          double v58 = a6;
          while (a2 != a3)
          {
            int v60 = *((_DWORD *)a2 + 4);
            if (*((_DWORD *)a2 + 5) != 0x7FFFFFFF) {
              int v60 = *((_DWORD *)a2 + 5);
            }
            if (*((_DWORD *)v58 + 5) == 0x7FFFFFFF) {
              int v61 = *((_DWORD *)v58 + 4);
            }
            else {
              int v61 = *((_DWORD *)v58 + 5);
            }
            if (v60 >= v61)
            {
              long long v59 = *(_OWORD *)v58;
              *(_OWORD *)(v10 + 12) = *(_OWORD *)(v58 + 12);
              *(_OWORD *)int v10 = v59;
              v10 += 28;
              v58 += 28;
              if (v57 == v58) {
                return result;
              }
            }
            else
            {
              long long v62 = *(_OWORD *)a2;
              *(_OWORD *)(v10 + 12) = *(_OWORD *)(a2 + 12);
              *(_OWORD *)int v10 = v62;
              v10 += 28;
              a2 += 28;
              if (v57 == v58) {
                return result;
              }
            }
          }
          return (char *)memmove(v10, v58, a6 - v58 + v54);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v44 = 0;
      do
      {
        long long v45 = &a6[v44];
        long long v46 = *(_OWORD *)&a2[v44];
        *(_OWORD *)(v45 + 12) = *(_OWORD *)&a2[v44 + 12];
        *(_OWORD *)long long v45 = v46;
        v44 += 28;
      }
      while (&a2[v44] != a3);
      if (v44)
      {
        __n128 v47 = &a6[v44];
        __n128 v48 = a3 - 28;
        while (a2 != v10)
        {
          int v49 = *((_DWORD *)a2 - 3);
          int v50 = *((_DWORD *)v47 - 3);
          if (*((_DWORD *)v47 - 2) != 0x7FFFFFFF) {
            int v50 = *((_DWORD *)v47 - 2);
          }
          if (*((_DWORD *)a2 - 2) != 0x7FFFFFFF) {
            int v49 = *((_DWORD *)a2 - 2);
          }
          BOOL v51 = v50 < v49;
          if (v50 >= v49) {
            uint64_t v52 = v47 - 28;
          }
          else {
            uint64_t v52 = a2 - 28;
          }
          if (v51) {
            a2 -= 28;
          }
          else {
            v47 -= 28;
          }
          long long v53 = *(_OWORD *)v52;
          *(_OWORD *)(v48 + 12) = *(_OWORD *)(v52 + 12);
          *(_OWORD *)__n128 v48 = v53;
          v48 -= 28;
          if (v47 == a6) {
            return result;
          }
        }
        uint64_t v65 = 0;
        do
        {
          uint64_t v66 = &v48[v65];
          long long v67 = *(_OWORD *)&v47[v65 - 28];
          *(_OWORD *)(v66 + 12) = *(_OWORD *)&v47[v65 - 16];
          *(_OWORD *)uint64_t v66 = v67;
          v65 -= 28;
        }
        while (&v47[v65] != a6);
      }
    }
  }
  return result;
}

char *sub_9C7424(char *__src, char *a2, char *a3)
{
  long long v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 28 == a2)
    {
      *(_OWORD *)int v30 = *(_OWORD *)__src;
      *(_OWORD *)&v30[12] = *(_OWORD *)(__src + 12);
      int64_t v11 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      long long v4 = &__src[v11];
      *(_OWORD *)long long v4 = *(_OWORD *)v30;
      *(_OWORD *)(v4 + 12) = *(_OWORD *)&v30[12];
    }
    else if (a2 + 28 == a3)
    {
      long long v4 = __src + 28;
      *(_OWORD *)int v31 = *(_OWORD *)(a3 - 28);
      *(_OWORD *)&v31[12] = *((_OWORD *)a3 - 1);
      size_t v12 = a3 - 28 - __src;
      if (a3 - 28 != __src) {
        memmove(__src + 28, __src, v12);
      }
      *(_OWORD *)__src = *(_OWORD *)v31;
      *(_OWORD *)(__src + 12) = *(_OWORD *)&v31[12];
    }
    else
    {
      uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((a2 - __src) >> 2);
      if (v6 == 0x6DB6DB6DB6DB6DB7 * ((a3 - a2) >> 2))
      {
        uint64_t v7 = __src + 28;
        long long v8 = a2 + 28;
        do
        {
          *(_OWORD *)unint64_t v29 = *(_OWORD *)(v7 - 28);
          *(_OWORD *)&v29[12] = *((_OWORD *)v7 - 1);
          long long v9 = *((_OWORD *)v8 - 1);
          *(_OWORD *)(v7 - 28) = *(_OWORD *)(v8 - 28);
          *((_OWORD *)v7 - 1) = v9;
          *((_OWORD *)v8 - 1) = *(_OWORD *)&v29[12];
          *(_OWORD *)(v8 - 28) = *(_OWORD *)v29;
          if (v7 == a2) {
            break;
          }
          v7 += 28;
          BOOL v10 = v8 == a3;
          v8 += 28;
        }
        while (!v10);
        return a2;
      }
      else
      {
        uint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((a3 - a2) >> 2);
        uint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((a2 - __src) >> 2);
        do
        {
          uint64_t v15 = v14;
          uint64_t v14 = v13;
          uint64_t v13 = v15 % v13;
        }
        while (v13);
        if (v14)
        {
          uint64_t v16 = &__src[28 * v14];
          do
          {
            long long v17 = *(_OWORD *)(v16 - 28);
            long long v18 = *((_OWORD *)v16 - 1);
            v16 -= 28;
            long long v32 = v17;
            HIDWORD(v32) = v18;
            uint64_t v19 = &v16[4 * ((a2 - __src) >> 2)];
            uint64_t v20 = v16;
            do
            {
              int v21 = v19;
              long long v22 = *(_OWORD *)v19;
              *(_OWORD *)((char *)v20 + 12) = *(_OWORD *)(v19 + 12);
              _OWORD *v20 = v22;
              uint64_t v23 = 0x6DB6DB6DB6DB6DB7 * ((a3 - v19) >> 2);
              v19 += 4 * ((a2 - __src) >> 2);
              BOOL v24 = __OFSUB__(v6, v23);
              uint64_t v26 = v6 - v23;
              char v25 = (v26 < 0) ^ v24;
              int v27 = &__src[28 * v26];
              if (!v25) {
                uint64_t v19 = v27;
              }
              uint64_t v20 = v21;
            }
            while (v19 != v16);
            *(_OWORD *)((char *)v21 + 12) = v18;
            *int v21 = v32;
          }
          while (v16 != __src);
        }
        return &__src[4 * ((a3 - a2) >> 2)];
      }
    }
  }
  return v4;
}

__n128 sub_9C764C(uint64_t a1, char *a2, unint64_t a3, _OWORD *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = a1;
    if (a3 == 2)
    {
      if (*((_DWORD *)a2 - 3) < *(_DWORD *)(a1 + 16))
      {
        *(_OWORD *)int v31 = *(_OWORD *)a1;
        *(_OWORD *)&v31[12] = *(_OWORD *)(a1 + 12);
        long long v7 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 28);
        *(_OWORD *)(a1 + 12) = v7;
        *((_OWORD *)a2 - 1) = *(_OWORD *)&v31[12];
        __n128 result = *(__n128 *)v31;
        *(_OWORD *)(a2 - 28) = *(_OWORD *)v31;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      uint64_t v20 = a4;
      unint64_t v21 = a3 >> 1;
      uint64_t v22 = a1 + 28 * (a3 >> 1);
      unint64_t v23 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_9C7914(a1, v22, v23, a4);
        BOOL v24 = (_OWORD *)((char *)v20 + 28 * v21);
        sub_9C7914(v6 + 28 * (a3 >> 1), (uint64_t)a2, a3 - (a3 >> 1), v24);
        char v25 = (_OWORD *)((char *)v20 + 28 * a3);
        uint64_t v26 = v24;
        while (v26 != v25)
        {
          if (*((_DWORD *)v26 + 4) >= *((_DWORD *)v20 + 4))
          {
            __n128 result = *(__n128 *)v20;
            *(_OWORD *)(v6 + 12) = *(_OWORD *)((char *)v20 + 12);
            *(__n128 *)uint64_t v6 = result;
            v6 += 28;
            uint64_t v20 = (_OWORD *)((char *)v20 + 28);
            if (v20 == v24) {
              goto LABEL_26;
            }
          }
          else
          {
            __n128 result = *(__n128 *)v26;
            *(_OWORD *)(v6 + 12) = *(_OWORD *)((char *)v26 + 12);
            *(__n128 *)uint64_t v6 = result;
            v6 += 28;
            uint64_t v26 = (_OWORD *)((char *)v26 + 28);
            if (v20 == v24)
            {
LABEL_26:
              if (v26 != v25)
              {
                uint64_t v27 = 0;
                do
                {
                  uint64_t v28 = v6 + v27;
                  __n128 result = *(__n128 *)((char *)v26 + v27);
                  *(_OWORD *)(v28 + 12) = *(_OWORD *)((char *)v26 + v27 + 12);
                  *(__n128 *)uint64_t v28 = result;
                  v27 += 28;
                }
                while ((_OWORD *)((char *)v26 + v27) != v25);
              }
              return result;
            }
          }
        }
        if (v20 != v24)
        {
          uint64_t v29 = 0;
          do
          {
            uint64_t v30 = v6 + v29;
            __n128 result = *(__n128 *)((char *)v20 + v29);
            *(_OWORD *)(v30 + 12) = *(_OWORD *)((char *)v20 + v29 + 12);
            *(__n128 *)uint64_t v30 = result;
            v29 += 28;
          }
          while ((_OWORD *)((char *)v20 + v29) != v24);
        }
      }
      else
      {
        sub_9C764C(a1, v22, v23, a4, a5);
        sub_9C764C(v6 + 28 * (a3 >> 1), a2, a3 - (a3 >> 1), v20, a5);
        sub_9C7BC0((char *)v6, (char *)(v6 + 28 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (char *)v20, a5);
      }
    }
    else if ((char *)a1 != a2)
    {
      BOOL v10 = (__n128 *)(a1 + 28);
      if ((char *)(a1 + 28) != a2)
      {
        uint64_t v11 = 0;
        size_t v12 = (__n128 *)a1;
        do
        {
          uint64_t v14 = v10;
          signed __int32 v15 = v12[2].n128_i32[3];
          if (v15 < (signed __int32)v12[1].n128_u32[0])
          {
            __n128 v32 = *v14;
            unint64_t v16 = v12[3].n128_u64[0];
            uint64_t v17 = v11;
            do
            {
              uint64_t v18 = a1 + v17;
              *(_OWORD *)(v18 + 28) = *(_OWORD *)(a1 + v17);
              *(_OWORD *)(v18 + 40) = *(_OWORD *)(a1 + v17 + 12);
              if (!v17)
              {
                uint64_t v13 = a1;
                goto LABEL_10;
              }
              v17 -= 28;
            }
            while (v15 < *(_DWORD *)(v18 - 12));
            uint64_t v13 = a1 + v17 + 28;
LABEL_10:
            __n128 result = v32;
            *(__n128 *)uint64_t v13 = v32;
            *(_DWORD *)(v13 + 16) = v15;
            *(void *)(v13 + 20) = v16;
          }
          BOOL v10 = (__n128 *)((char *)v14 + 28);
          v11 += 28;
          size_t v12 = v14;
        }
        while ((char *)&v14[1].n128_f64[1] + 4 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_9C7914(uint64_t result, uint64_t a2, unint64_t a3, _OWORD *a4)
{
  if (a3)
  {
    long long v4 = a4;
    uint64_t v7 = result;
    if (a3 == 2)
    {
      long long v9 = (long long *)(a2 - 28);
      if (*(_DWORD *)(a2 - 12) >= *(_DWORD *)(result + 16))
      {
        long long v22 = *(_OWORD *)result;
        *(_OWORD *)((char *)a4 + 12) = *(_OWORD *)(result + 12);
        *a4 = v22;
        long long v11 = *v9;
        long long v12 = *(_OWORD *)(a2 - 16);
      }
      else
      {
        long long v10 = *v9;
        *(_OWORD *)((char *)a4 + 12) = *(_OWORD *)(a2 - 16);
        *a4 = v10;
        long long v11 = *(_OWORD *)result;
        long long v12 = *(_OWORD *)(result + 12);
      }
      *(_OWORD *)((char *)a4 + 40) = v12;
      *(_OWORD *)((char *)a4 + 28) = v11;
    }
    else if (a3 == 1)
    {
      long long v8 = *(_OWORD *)result;
      *(_OWORD *)((char *)a4 + 12) = *(_OWORD *)(result + 12);
      *a4 = v8;
    }
    else if ((uint64_t)a3 > 8)
    {
      unint64_t v23 = a3 >> 1;
      uint64_t v24 = 28 * (a3 >> 1);
      uint64_t v25 = result + v24;
      sub_9C764C(result, result + v24, a3 >> 1, a4, a3 >> 1);
      __n128 result = sub_9C764C(v7 + v24, a2, a3 - v23, (char *)v4 + v24, a3 - v23);
      uint64_t v26 = v7 + v24;
      while (v26 != a2)
      {
        if (*(_DWORD *)(v26 + 16) >= *(_DWORD *)(v7 + 16))
        {
          long long v27 = *(_OWORD *)v7;
          *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(v7 + 12);
          _OWORD *v4 = v27;
          long long v4 = (_OWORD *)((char *)v4 + 28);
          v7 += 28;
          if (v7 == v25) {
            goto LABEL_26;
          }
        }
        else
        {
          long long v28 = *(_OWORD *)v26;
          *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(v26 + 12);
          _OWORD *v4 = v28;
          long long v4 = (_OWORD *)((char *)v4 + 28);
          v26 += 28;
          if (v7 == v25)
          {
LABEL_26:
            if (v26 != a2)
            {
              uint64_t v29 = 0;
              do
              {
                uint64_t v30 = (_OWORD *)((char *)v4 + v29);
                long long v31 = *(_OWORD *)(v26 + v29);
                *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)(v26 + v29 + 12);
                *uint64_t v30 = v31;
                v29 += 28;
              }
              while (v26 + v29 != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v25)
      {
        uint64_t v32 = 0;
        do
        {
          unint64_t v33 = (_OWORD *)((char *)v4 + v32);
          long long v34 = *(_OWORD *)(v7 + v32);
          *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)(v7 + v32 + 12);
          *unint64_t v33 = v34;
          v32 += 28;
        }
        while (v7 + v32 != v25);
      }
    }
    else if (result != a2)
    {
      long long v13 = *(_OWORD *)result;
      *(_OWORD *)((char *)a4 + 12) = *(_OWORD *)(result + 12);
      *a4 = v13;
      uint64_t v14 = result + 28;
      if (result + 28 != a2)
      {
        uint64_t v15 = 0;
        unint64_t v16 = a4;
        do
        {
          uint64_t v18 = v7;
          uint64_t v19 = v16;
          uint64_t v7 = v14;
          unint64_t v16 = (_OWORD *)((char *)v16 + 28);
          uint64_t v20 = v16;
          if (*(_DWORD *)(v18 + 44) < *((_DWORD *)v19 + 4))
          {
            *unint64_t v16 = *v19;
            *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)v19 + 12);
            uint64_t v20 = a4;
            if (v19 != a4)
            {
              uint64_t v21 = v15;
              while (1)
              {
                uint64_t v20 = (_OWORD *)((char *)a4 + v21);
                if (*(_DWORD *)(v18 + 44) >= *(_DWORD *)((char *)a4 + v21 - 12)) {
                  break;
                }
                _OWORD *v20 = *(_OWORD *)((char *)v20 - 28);
                *(_OWORD *)((char *)v20 + 12) = *(v20 - 1);
                v21 -= 28;
                if (!v21)
                {
                  uint64_t v20 = a4;
                  break;
                }
              }
            }
          }
          long long v17 = *(_OWORD *)v7;
          *(_OWORD *)((char *)v20 + 12) = *(_OWORD *)(v7 + 12);
          _OWORD *v20 = v17;
          uint64_t v14 = v7 + 28;
          v15 += 28;
        }
        while (v7 + 28 != a2);
      }
    }
  }
  return result;
}

char *sub_9C7BC0(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    uint64_t v9 = a5;
    long long v11 = result;
    while (v9 > a7 && a4 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v12 = 0;
      uint64_t v13 = -a4;
      while (1)
      {
        uint64_t v14 = &v11[v12];
        if (*((_DWORD *)a2 + 4) < *(_DWORD *)&v11[v12 + 16]) {
          break;
        }
        v12 += 28;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v16 = -v13;
      long long v62 = a3;
      __src = a6;
      uint64_t v61 = a7;
      if (-v13 >= v9)
      {
        if (v13 == -1)
        {
          long long v56 = &v11[v12];
          *(_OWORD *)&v64[12] = *(_OWORD *)&v11[v12 + 12];
          *(_OWORD *)long long v64 = *(_OWORD *)&v11[v12];
          long long v57 = *(_OWORD *)a2;
          *(_OWORD *)(v56 + 12) = *(_OWORD *)(a2 + 12);
          *(_OWORD *)long long v56 = v57;
          *(_OWORD *)a2 = *(_OWORD *)v64;
          *(_OWORD *)(a2 + 12) = *(_OWORD *)&v64[12];
          return result;
        }
        if (v13 > 0) {
          uint64_t v16 = 1 - v13;
        }
        uint64_t v26 = v16 >> 1;
        uint64_t v20 = &v11[28 * (v16 >> 1) + v12];
        uint64_t v19 = a2;
        if (a2 != a3)
        {
          unint64_t v27 = 0x6DB6DB6DB6DB6DB7 * ((a3 - a2) >> 2);
          uint64_t v19 = a2;
          do
          {
            unint64_t v28 = v27 >> 1;
            uint64_t v29 = &v19[28 * (v27 >> 1)];
            int v30 = *((_DWORD *)v29 + 4);
            long long v31 = v29 + 28;
            v27 += ~(v27 >> 1);
            if (v30 < *((_DWORD *)v20 + 4)) {
              uint64_t v19 = v31;
            }
            else {
              unint64_t v27 = v28;
            }
          }
          while (v27);
        }
        uint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((v19 - a2) >> 2);
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v17 = v9;
        }
        else {
          uint64_t v17 = v9 + 1;
        }
        uint64_t v18 = v17 >> 1;
        uint64_t v19 = &a2[28 * (v17 >> 1)];
        uint64_t v20 = a2;
        if (a2 - v11 != v12)
        {
          unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((a2 - v11 - v12) >> 2);
          uint64_t v20 = &v11[v12];
          do
          {
            unint64_t v22 = v21 >> 1;
            unint64_t v23 = &v20[28 * (v21 >> 1)];
            int v24 = *((_DWORD *)v23 + 4);
            uint64_t v25 = v23 + 28;
            v21 += ~(v21 >> 1);
            if (v24 > *((_DWORD *)v19 + 4)) {
              unint64_t v21 = v22;
            }
            else {
              uint64_t v20 = v25;
            }
          }
          while (v21);
        }
        uint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((v20 - v11 - v12) >> 2);
      }
      a4 = -(v26 + v13);
      uint64_t v32 = v26;
      unint64_t v33 = sub_9C7424(v20, a2, v19);
      uint64_t v34 = v32;
      int v35 = v33;
      if (v34 + v18 >= v9 - (v34 + v18) - v13)
      {
        uint64_t v37 = v19;
        uint64_t v38 = v34;
        a7 = v61;
        __n128 result = (char *)sub_9C7BC0(v33, v37, v62, a4, v9 - v18, __src, v61);
        a2 = v20;
        a6 = __src;
        a4 = v38;
        a3 = v35;
      }
      else
      {
        long long v36 = v20;
        a6 = __src;
        __n128 result = (char *)sub_9C7BC0(&v11[v12], v36, v33, v34, v18, __src, v61);
        uint64_t v14 = v35;
        a2 = v19;
        a7 = v61;
        a3 = v62;
        uint64_t v18 = v9 - v18;
      }
      uint64_t v9 = v18;
      long long v11 = v14;
      if (!v18) {
        return result;
      }
    }
    if (a4 <= v9)
    {
      if (v11 != a2)
      {
        uint64_t v49 = 0;
        do
        {
          int v50 = &a6[v49];
          long long v51 = *(_OWORD *)&v11[v49];
          *(_OWORD *)(v50 + 12) = *(_OWORD *)&v11[v49 + 12];
          *(_OWORD *)int v50 = v51;
          v49 += 28;
        }
        while (&v11[v49] != a2);
        if (v49)
        {
          uint64_t v52 = &a6[v49];
          long long v53 = a6;
          while (a2 != a3)
          {
            if (*((_DWORD *)a2 + 4) >= *((_DWORD *)v53 + 4))
            {
              long long v54 = *(_OWORD *)v53;
              *(_OWORD *)(v11 + 12) = *(_OWORD *)(v53 + 12);
              *(_OWORD *)long long v11 = v54;
              v11 += 28;
              v53 += 28;
              if (v52 == v53) {
                return result;
              }
            }
            else
            {
              long long v55 = *(_OWORD *)a2;
              *(_OWORD *)(v11 + 12) = *(_OWORD *)(a2 + 12);
              *(_OWORD *)long long v11 = v55;
              v11 += 28;
              a2 += 28;
              if (v52 == v53) {
                return result;
              }
            }
          }
          return (char *)memmove(v11, v53, a6 - v53 + v49);
        }
      }
    }
    else if (a3 != a2)
    {
      uint64_t v39 = 0;
      do
      {
        uint64_t v40 = &a6[v39];
        long long v41 = *(_OWORD *)&a2[v39];
        *(_OWORD *)(v40 + 12) = *(_OWORD *)&a2[v39 + 12];
        *(_OWORD *)uint64_t v40 = v41;
        v39 += 28;
      }
      while (&a2[v39] != a3);
      if (v39)
      {
        long long v42 = &a6[v39];
        uint64_t v43 = a3 - 28;
        while (a2 != v11)
        {
          int v44 = *((_DWORD *)a2 - 3);
          int v45 = *((_DWORD *)v42 - 3);
          BOOL v46 = v45 < v44;
          if (v45 >= v44) {
            __n128 v47 = v42 - 28;
          }
          else {
            __n128 v47 = a2 - 28;
          }
          if (v46) {
            a2 -= 28;
          }
          else {
            v42 -= 28;
          }
          long long v48 = *(_OWORD *)v47;
          *(_OWORD *)(v43 + 12) = *(_OWORD *)(v47 + 12);
          *(_OWORD *)uint64_t v43 = v48;
          v43 -= 28;
          if (v42 == a6) {
            return result;
          }
        }
        uint64_t v58 = 0;
        do
        {
          long long v59 = &v43[v58];
          long long v60 = *(_OWORD *)&v42[v58 - 28];
          *(_OWORD *)(v59 + 12) = *(_OWORD *)&v42[v58 - 16];
          *(_OWORD *)long long v59 = v60;
          v58 -= 28;
        }
        while (&v42[v58] != a6);
      }
    }
  }
  return result;
}

uint64_t sub_9C7FF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x8D3DCB08D3DCB0) {
    sub_2E00();
  }
  if (0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x34F72C234F72C235 * ((a1[2] - *a1) >> 4)) >= 0x469EE58469EE58) {
    unint64_t v6 = 0x8D3DCB08D3DCB0;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x8D3DCB08D3DCB0) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(464 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v16 = (uint64_t)&v7[464 * v3];
  uint64_t v17 = &v7[464 * v6];
  sub_92A0D0(v16, a2);
  uint64_t v8 = v16 + 464;
  long long v10 = (char *)*a1;
  uint64_t v9 = (char *)a1[1];
  if (v9 == (char *)*a1)
  {
    *a1 = v16;
    a1[1] = v8;
    a1[2] = (uint64_t)v17;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = v16 + v11;
      uint64_t v13 = &v9[v11];
      sub_9C822C(v16 + v11 - 464, (uint64_t)&v9[v11 - 464]);
      *(void *)(v12 - 32) = 0;
      *(void *)(v12 - 24) = 0;
      *(void *)(v12 - 16) = 0;
      *(_OWORD *)(v12 - 32) = *(_OWORD *)&v9[v11 - 32];
      *(void *)(v12 - 16) = *(void *)&v9[v11 - 16];
      *((void *)v13 - 4) = 0;
      *((void *)v13 - 3) = 0;
      *((void *)v13 - 2) = 0;
      *(_DWORD *)(v12 - 8) = *(_DWORD *)&v9[v11 - 8];
      v11 -= 464;
    }
    while (&v9[v11] != v10);
    uint64_t v14 = (char *)*a1;
    uint64_t v9 = (char *)a1[1];
    *a1 = v16 + v11;
    a1[1] = v8;
    a1[2] = (uint64_t)v17;
    if (v9 != v14)
    {
      do
      {
        v9 -= 464;
        sub_92A294((uint64_t)v9);
      }
      while (v9 != v14);
      uint64_t v9 = v14;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v16 + 464;
}

void sub_9C81C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9C81D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9C81D8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 464;
    sub_92A294(i - 464);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_9C822C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)a2 = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a2 + 72) = 0u;
  uint64_t v4 = *(void *)(a2 + 96);
  *(_OWORD *)(a2 + 88) = 0u;
  *(void *)(a1 + 96) = v4;
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v4;
  long long v5 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v5;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 120) = 0u;
  long long v6 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a2 + 144) = 0u;
  *(void *)(a2 + 136) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  *(_OWORD *)(a2 + 160) = 0u;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 200) = 0;
  *(_OWORD *)(a2 + 184) = 0u;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a2 + 224) = 0;
  *(_OWORD *)(a2 + 208) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(_OWORD *)(a2 + 232) = 0u;
  uint64_t v7 = *(void *)(a2 + 256);
  *(_OWORD *)(a2 + 248) = 0u;
  *(void *)(a1 + 256) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 264);
  *(unsigned char *)(a1 + 268) = *(unsigned char *)(a2 + 268);
  *(_DWORD *)(a1 + 264) = v7;
  long long v8 = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = v8;
  *(void *)(a2 + 280) = 0;
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 272) = 0;
  long long v9 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_OWORD *)(a1 + 296) = v9;
  *(void *)(a2 + 304) = 0;
  *(void *)(a2 + 312) = 0;
  *(void *)(a2 + 296) = 0;
  *(_DWORD *)(a1 + 352) = *(_DWORD *)(a2 + 352);
  sub_4F38B0((void *)*(unsigned int *)(a2 + 352), (uint64_t *)(a2 + 320), (void *)(a1 + 320));
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  long long v10 = *(_OWORD *)(a2 + 368);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  *(_OWORD *)(a1 + 368) = v10;
  *(void *)(a2 + 376) = 0;
  *(void *)(a2 + 384) = 0;
  *(void *)(a2 + 368) = 0;
  *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  long long v11 = *(_OWORD *)(a2 + 400);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = v11;
  *(void *)(a2 + 408) = 0;
  *(void *)(a2 + 416) = 0;
  *(void *)(a2 + 400) = 0;
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  return a1;
}

uint64_t sub_9C8454(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

double sub_9C8464()
{
  byte_25DC5A7 = 1;
  word_25DC590 = 65;
  byte_25DC5BF = 1;
  word_25DC5A8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DC650 = 0u;
  *(_OWORD *)&qword_25DC660 = 0u;
  dword_25DC670 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DC650, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DC650, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DC650, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DC650, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DC5D7 = 8;
  strcpy((char *)&qword_25DC5C0, "any_mode");
  byte_25DC5EF = 7;
  strcpy((char *)&dword_25DC5D8, "cycling");
  byte_25DC607 = 7;
  strcpy((char *)&dword_25DC5F0, "driving");
  byte_25DC61F = 7;
  strcpy((char *)&dword_25DC608, "walking");
  qword_25DC628 = 0;
  qword_25DC630 = 0;
  qword_25DC620 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DC620 = (uint64_t)v0;
  qword_25DC628 = (uint64_t)(v0 + 9);
  qword_25DC630 = (uint64_t)(v0 + 9);
  qword_25DC638 = 0;
  qword_25DC640 = 0;
  unk_25DC648 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DC640 = (uint64_t)(v1 + 9);
  unk_25DC648 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DC638 = (uint64_t)v1;
  return result;
}

void sub_9C872C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DC660) {
    sub_20AD5C0((void **)qword_25DC660);
  }
  uint64_t v37 = (void *)xmmword_25DC650;
  *(void *)&xmmword_25DC650 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_9C87CC(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(*(void *)(a2 + 16) + 1436);
  if (v2 != 2)
  {
    if (v2 != 1)
    {
      if (!v2) {
        operator new();
      }
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_9C88B4()
{
}

uint64_t sub_9C8904(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = off_243C600;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = *a3;
  *(void *)(a1 + 24) = a3[1];
  *(void *)(a1 + 32) = a3[2];
  *(void *)(a1 + 40) = a3[3];
  *(void *)(a1 + 48) = a3 + 5;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0x8000000080000000;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_WORD *)(a1 + 172) = 1;
  *(unsigned char *)(a1 + 174) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  sub_9C8A34(a1);
  return a1;
}

void sub_9C89B0(_Unwind_Exception *exception_object)
{
  int v5 = *(void **)(v1 + 184);
  if (v5)
  {
    *(void *)(v1 + 192) = v5;
    operator delete(v5);
    if ((*(char *)(v1 + 167) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 143) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v1 + 167) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 + 144));
  if ((*(char *)(v1 + 143) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 119) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(v1 + 120));
  if ((*(char *)(v1 + 119) & 0x80000000) == 0)
  {
LABEL_5:
    long long v6 = *v2;
    if (!*v2) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v3);
  long long v6 = *v2;
  if (!*v2) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  *(void *)(v1 + 64) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void sub_9C8A34(uint64_t a1)
{
  sub_994B0C(&__dst, *(void **)(a1 + 8));
  sub_994AD8((void **)&__dst, v101);
  if (sub_994D74(&__dst, v101))
  {
    int v2 = (uint64_t **)(a1 + 56);
    while (1)
    {
      uint64_t v4 = sub_994DB0((unint64_t *)&__dst);
      uint64_t v5 = v4;
      char v7 = *(uint64_t **)(a1 + 64);
      unint64_t v6 = *(void *)(a1 + 72);
      if ((unint64_t)v7 >= v6) {
        break;
      }
      *char v7 = v4;
      uint64_t v3 = (uint64_t)(v7 + 1);
LABEL_4:
      *(void *)(a1 + 64) = v3;
      sub_994B7C((uint64_t)&__dst);
      sub_994AD8((void **)&__dst, v101);
      if (!sub_994D74(&__dst, v101)) {
        goto LABEL_26;
      }
    }
    int v8 = *v2;
    uint64_t v9 = (char *)v7 - (char *)*v2;
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      sub_2E00();
    }
    uint64_t v12 = v6 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_188D718();
      }
      int v14 = operator new(8 * v13);
      uint64_t v15 = (uint64_t *)&v14[8 * v10];
      *uint64_t v15 = v5;
      uint64_t v3 = (uint64_t)(v15 + 1);
      if (v7 == v8) {
        goto LABEL_24;
      }
    }
    else
    {
      int v14 = 0;
      uint64_t v15 = (uint64_t *)(8 * v10);
      *(void *)(8 * v10) = v5;
      uint64_t v3 = 8 * v10 + 8;
      if (v7 == v8)
      {
LABEL_24:
        *(void *)(a1 + 56) = v15;
        *(void *)(a1 + 64) = v3;
        *(void *)(a1 + 72) = &v14[8 * v13];
        if (v7) {
          operator delete(v7);
        }
        goto LABEL_4;
      }
    }
    unint64_t v16 = (char *)(v7 - 1) - (char *)v8;
    if (v16 < 0x58) {
      goto LABEL_175;
    }
    if ((unint64_t)((char *)v7 - &v14[v9]) < 0x20) {
      goto LABEL_175;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v19 = &v7[v18 / 0xFFFFFFFFFFFFFFF8];
    uint64_t v15 = (uint64_t *)((char *)v15 - v18);
    uint64_t v20 = &v14[8 * v10 - 16];
    unint64_t v21 = v7 - 2;
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v23 = *(_OWORD *)v21;
      *(v20 - 1) = *((_OWORD *)v21 - 1);
      _OWORD *v20 = v23;
      v20 -= 2;
      v21 -= 4;
      v22 -= 4;
    }
    while (v22);
    char v7 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_175:
      do
      {
        uint64_t v24 = *--v7;
        *--uint64_t v15 = v24;
      }
      while (v7 != v8);
    }
    char v7 = *v2;
    goto LABEL_24;
  }
LABEL_26:
  uint64_t v25 = *(const std::string ***)(a1 + 56);
  uint64_t v26 = *(const std::string ***)(a1 + 64);
  if (v25 == v26) {
    return;
  }
  unint64_t v27 = *(void **)(a1 + 56);
  while (*(_DWORD *)*v27 != 3)
  {
    if (++v27 == v26)
    {
      int v28 = 0x7FFFFFFF;
      goto LABEL_32;
    }
  }
  int v28 = *(_DWORD *)(*v27 + 40);
LABEL_32:
  *(_DWORD *)(a1 + 88) = v28;
  uint64_t v29 = *v25;
  if (!v29[35].__r_.__value_.__s.__data_[0]
    || (std::string::operator=((std::string *)(a1 + 96), v29 + 34),
        int v30 = *(const std::string **)(*(void *)(a1 + 64) - 8),
        !v30[35].__r_.__value_.__s.__data_[0]))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  std::string::operator=((std::string *)(a1 + 120), v30 + 34);
  long long v31 = *(int ***)(a1 + 56);
  uint64_t v32 = *(int ***)(a1 + 64);
  if (v31 == v32)
  {
    char v85 = 0;
    int v82 = (unsigned char *)(a1 + 173);
    goto LABEL_160;
  }
  char v33 = 0;
  uint64_t v34 = (void **)(a1 + 144);
  do
  {
    if (*(char *)(a1 + 167) < 0)
    {
      if (*(void *)(a1 + 152))
      {
LABEL_42:
        uint64_t v37 = *v31;
        int v38 = **v31;
        if (v38 == 2) {
          goto LABEL_43;
        }
        goto LABEL_52;
      }
    }
    else if (*(unsigned char *)(a1 + 167))
    {
      goto LABEL_42;
    }
    uint64_t v40 = *((void *)*v31 + 6);
    if (v40 == -1 && (uint64_t v40 = *((void *)*v31 + 7), v40 == -1))
    {
      long long __dst = 0uLL;
      uint64_t v103 = 0;
      if (*(char *)(a1 + 167) < 0) {
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v41 = **(void **)(a1 + 16) + 168 * v40;
      long long v42 = (void **)(v41 + 136);
      if ((*(char *)(v41 + 159) & 0x80000000) == 0)
      {
        long long v43 = *(_OWORD *)v42;
        uint64_t v103 = *(void *)(v41 + 152);
        long long __dst = v43;
        if ((*(char *)(a1 + 167) & 0x80000000) == 0) {
          goto LABEL_51;
        }
LABEL_50:
        operator delete(*v34);
        goto LABEL_51;
      }
      sub_4200(&__dst, *v42, *(void *)(v41 + 144));
      if (*(char *)(a1 + 167) < 0) {
        goto LABEL_50;
      }
    }
LABEL_51:
    *(_OWORD *)uint64_t v34 = __dst;
    *(void *)(a1 + 160) = v103;
    uint64_t v37 = *v31;
    int v38 = **v31;
    if (v38 == 2)
    {
LABEL_43:
      int v39 = *(_DWORD *)(a1 + 168);
      *(_DWORD *)(a1 + 168) = v39 + 1;
      if (v39)
      {
        char v33 = 1;
        goto LABEL_63;
      }
      *(void *)(a1 + 176) = v37;
      uint64_t v37 = *v31;
      char v33 = 1;
      if (**v31 == 1) {
        goto LABEL_62;
      }
      goto LABEL_63;
    }
LABEL_52:
    if (v33)
    {
      char v33 = 1;
      if (v38 != 1) {
        goto LABEL_63;
      }
LABEL_62:
      *(void *)(a1 + 80) += *((void *)v37 + 236);
      uint64_t v37 = *v31;
      goto LABEL_63;
    }
    char v33 = 0;
    if (v38 == 10 || v38 == 1) {
      *(unsigned char *)(a1 + 172) = 0;
    }
    if (v38 == 1) {
      goto LABEL_62;
    }
LABEL_63:
    if (*((unsigned char *)v37 + 2104))
    {
      int v45 = *(unsigned __int8 **)(a1 + 184);
      BOOL v46 = *(unsigned __int8 **)(a1 + 192);
      if (v45 == v46) {
        goto LABEL_79;
      }
      __n128 v47 = *(unsigned __int8 **)(a1 + 184);
      while (*v47 != *((unsigned __int8 *)v37 + 2064))
      {
        if (++v47 == v46)
        {
          __n128 v47 = *(unsigned __int8 **)(a1 + 192);
          break;
        }
      }
      if (v47 == v46)
      {
LABEL_79:
        unint64_t v49 = *(void *)(a1 + 200);
        if ((unint64_t)v46 < v49)
        {
          unsigned __int8 v35 = *((unsigned char *)v37 + 2064);
          goto LABEL_37;
        }
        unint64_t v50 = v46 - v45;
        uint64_t v51 = v46 - v45 + 1;
        if (v51 < 0) {
          goto LABEL_172;
        }
        unint64_t v52 = v49 - (void)v45;
        if (2 * v52 > v51) {
          uint64_t v51 = 2 * v52;
        }
        if (v52 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v53 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v53 = v51;
        }
        if (v53)
        {
          long long v54 = (char *)operator new(v53);
          long long v55 = &v54[v50];
          v54[v50] = *((unsigned char *)v37 + 2064);
          uint64_t v36 = (uint64_t)&v54[v50 + 1];
          if (v45 == v46) {
            goto LABEL_140;
          }
        }
        else
        {
          long long v54 = 0;
          long long v55 = (char *)(v46 - v45);
          *(unsigned char *)unint64_t v50 = *((unsigned char *)v37 + 2064);
          uint64_t v36 = v50 + 1;
          if (v45 == v46) {
            goto LABEL_140;
          }
        }
        if (v50 >= 8 && (unint64_t)(v45 - (unsigned __int8 *)v54) >= 0x20)
        {
          if (v50 >= 0x20)
          {
            unint64_t v60 = v50 & 0xFFFFFFFFFFFFFFE0;
            long long v62 = &v54[v50 - 16];
            int v63 = v46 - 16;
            unint64_t v64 = v50 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v65 = *(_OWORD *)v63;
              *((_OWORD *)v62 - 1) = *((_OWORD *)v63 - 1);
              *(_OWORD *)long long v62 = v65;
              v62 -= 32;
              v63 -= 32;
              v64 -= 32;
            }
            while (v64);
            if (v50 == v60) {
              goto LABEL_139;
            }
            if ((v50 & 0x18) != 0) {
              goto LABEL_120;
            }
            v55 -= v60;
            v46 -= v60;
          }
          else
          {
            unint64_t v60 = 0;
LABEL_120:
            v55 -= v50 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v66 = &v54[&v46[-v60] - v45 - 8];
            long long v67 = &v46[-v60 - 8];
            unint64_t v68 = v60 - (v50 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v69 = *(void *)v67;
              v67 -= 8;
              *(void *)uint64_t v66 = v69;
              v66 -= 8;
              v68 += 8;
            }
            while (v68);
            v46 -= v50 & 0xFFFFFFFFFFFFFFF8;
            if (v50 == (v50 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_139;
            }
          }
        }
        unsigned __int8 v78 = v55 - 1;
        do
        {
          char v79 = *--v46;
          *v78-- = v79;
        }
        while (v46 != v45);
        goto LABEL_139;
      }
    }
    else if (*((unsigned char *)v37 + 2144))
    {
      int v45 = *(unsigned __int8 **)(a1 + 184);
      BOOL v46 = *(unsigned __int8 **)(a1 + 192);
      if (v45 == v46) {
        goto LABEL_93;
      }
      long long v48 = *(unsigned __int8 **)(a1 + 184);
      while (*v48 != *((unsigned __int8 *)v37 + 2136))
      {
        if (++v48 == v46)
        {
          long long v48 = *(unsigned __int8 **)(a1 + 192);
          break;
        }
      }
      if (v48 == v46)
      {
LABEL_93:
        unint64_t v56 = *(void *)(a1 + 200);
        if ((unint64_t)v46 < v56)
        {
          unsigned __int8 v35 = *((unsigned char *)v37 + 2136);
LABEL_37:
          *BOOL v46 = v35;
          uint64_t v36 = (uint64_t)(v46 + 1);
LABEL_38:
          *(void *)(a1 + 192) = v36;
          goto LABEL_39;
        }
        unint64_t v57 = v46 - v45;
        uint64_t v58 = v46 - v45 + 1;
        if (v58 < 0) {
LABEL_172:
        }
          sub_2E00();
        unint64_t v59 = v56 - (void)v45;
        if (2 * v59 > v58) {
          uint64_t v58 = 2 * v59;
        }
        if (v59 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v53 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v53 = v58;
        }
        if (v53)
        {
          long long v54 = (char *)operator new(v53);
          long long v55 = &v54[v57];
          v54[v57] = *((unsigned char *)v37 + 2136);
          uint64_t v36 = (uint64_t)&v54[v57 + 1];
          if (v45 == v46)
          {
LABEL_140:
            *(void *)(a1 + 184) = v55;
            *(void *)(a1 + 192) = v36;
            *(void *)(a1 + 200) = &v54[v53];
            if (v45) {
              operator delete(v45);
            }
            goto LABEL_38;
          }
        }
        else
        {
          long long v54 = 0;
          long long v55 = (char *)(v46 - v45);
          *(unsigned char *)unint64_t v57 = *((unsigned char *)v37 + 2136);
          uint64_t v36 = v57 + 1;
          if (v45 == v46) {
            goto LABEL_140;
          }
        }
        if (v57 >= 8 && (unint64_t)(v45 - (unsigned __int8 *)v54) >= 0x20)
        {
          if (v57 >= 0x20)
          {
            unint64_t v61 = v57 & 0xFFFFFFFFFFFFFFE0;
            uint64_t v70 = &v54[v57 - 16];
            unsigned int v71 = v46 - 16;
            unint64_t v72 = v57 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              long long v73 = *(_OWORD *)v71;
              *((_OWORD *)v70 - 1) = *((_OWORD *)v71 - 1);
              *(_OWORD *)uint64_t v70 = v73;
              v70 -= 32;
              v71 -= 32;
              v72 -= 32;
            }
            while (v72);
            if (v57 == v61) {
              goto LABEL_139;
            }
            if ((v57 & 0x18) != 0) {
              goto LABEL_128;
            }
            v55 -= v61;
            v46 -= v61;
          }
          else
          {
            unint64_t v61 = 0;
LABEL_128:
            v55 -= v57 & 0xFFFFFFFFFFFFFFF8;
            float64x2_t v74 = &v54[&v46[-v61] - v45 - 8];
            uint64_t v75 = &v46[-v61 - 8];
            unint64_t v76 = v61 - (v57 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              uint64_t v77 = *(void *)v75;
              v75 -= 8;
              *(void *)float64x2_t v74 = v77;
              v74 -= 8;
              v76 += 8;
            }
            while (v76);
            v46 -= v57 & 0xFFFFFFFFFFFFFFF8;
            if (v57 == (v57 & 0xFFFFFFFFFFFFFFF8))
            {
LABEL_139:
              long long v55 = v54;
              goto LABEL_140;
            }
          }
        }
        uint64_t v80 = v55 - 1;
        do
        {
          char v81 = *--v46;
          *v80-- = v81;
        }
        while (v46 != v45);
        goto LABEL_139;
      }
    }
LABEL_39:
    ++v31;
  }
  while (v31 != v32);
  *(unsigned char *)(a1 + 173) = 0;
  int v82 = (unsigned char *)(a1 + 173);
  long long v83 = *(int ***)(a1 + 56);
  uint64_t v84 = *(int ***)(a1 + 64);
  if (v83 == v84)
  {
    char v85 = 0;
LABEL_160:
    *int v82 = v85 & 1;
    uint64_t v93 = **(void ***)(a1 + 8);
    if (*(void *)(*(void *)(a1 + 8) + 8) - (void)v93 == 32) {
      goto LABEL_161;
    }
    goto LABEL_165;
  }
  char v85 = 0;
  while (1)
  {
    uint64_t v86 = *v83;
    int v87 = **v83;
    if (v87 == 8 || v87 == 2) {
      break;
    }
LABEL_146:
    if (++v83 == v84) {
      goto LABEL_160;
    }
  }
  if (*((unsigned char *)v86 + 792))
  {
    uint64_t v89 = *((void *)v86 + 94);
    if (v89 != -1)
    {
      uint64_t v90 = *(void *)(*(void *)(a1 + 16) + 72) + 696 * v89;
      int64_t v91 = *(void **)(v90 + 648);
      uint64_t v92 = *(void **)(v90 + 656);
      if (v91 != v92)
      {
        while (*v91 != 0x1000003E8)
        {
          if (++v91 == v92) {
            goto LABEL_157;
          }
        }
        char v85 = 1;
        goto LABEL_146;
      }
    }
  }
LABEL_157:
  uint64_t v93 = **(void ***)(a1 + 8);
  if (*(void *)(*(void *)(a1 + 8) + 8) - (void)v93 != 32)
  {
LABEL_165:
    BOOL v99 = 0;
    goto LABEL_166;
  }
LABEL_161:
  unint64_t v96 = v93;
  uint64_t v94 = *v93;
  uint64_t v95 = v96[1];
  if (v95 - v94 != 104) {
    goto LABEL_165;
  }
  BOOL v99 = v94 == v95
     || (v98 = *(void *)(v94 + 8), uint64_t v97 = *(void *)(v94 + 16), v98 == v97)
     || *(_DWORD *)(v97 - 5704) != 4;
LABEL_166:
  *(unsigned char *)(a1 + 174) = v99;
}

double sub_9C92C0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 176);
  if (v2)
  {
    if (!*(unsigned char *)(v2 + 792))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    *(_OWORD *)a2 = *(_OWORD *)(v2 + 116);
    long long v3 = *(_OWORD *)(v2 + 128);
    *(_OWORD *)(a2 + 12) = v3;
    if (*(_DWORD *)a2 == 0x7FFFFFFF)
    {
      *(void *)a2 = *(unsigned int *)(a1 + 88) | ((unint64_t)*(unsigned int *)(a1 + 88) << 32);
      *(_WORD *)(a2 + 8) = 0;
    }
  }
  else
  {
    *(_OWORD *)a2 = xmmword_20EA820;
    *(unsigned char *)(a2 + 9) = 0;
    *(void *)&long long v3 = -1;
    *(void *)(a2 + 16) = -1;
    *(_DWORD *)(a2 + 24) = -1;
  }
  return *(double *)&v3;
}

BOOL sub_9C937C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 176);
  return v1 && (*(_DWORD *)(v1 + 1008) & 0xFFFFFFFD) == 1;
}

uint64_t sub_9C93A0(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 8);
  uint64_t v2 = v1 + 6;
  if (v1[302] == 2)
  {
    unsigned int v4 = v1[7];
    long long v3 = v1 + 7;
    if (v4 != 0x7FFFFFFF) {
      uint64_t v2 = v3;
    }
  }
  return *v2;
}

uint64_t sub_9C93CC(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 24);
}

uint64_t sub_9C93D8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(result + 174))
  {
    *(_DWORD *)a2 = 0;
  }
  else
  {
    uint64_t v2 = *(void **)(result + 56);
    long long v3 = *(void **)(result + 64);
    if (v2 == v3) {
      goto LABEL_6;
    }
    while (1)
    {
      unsigned int v4 = (_DWORD *)*v2;
      if (*(_DWORD *)*v2 == 2) {
        break;
      }
      if (++v2 == v3) {
        goto LABEL_6;
      }
    }
    if (!*((unsigned char *)v4 + 792) || (uint64_t v5 = *((void *)v4 + 94), v5 == -1))
    {
LABEL_6:
      *(_WORD *)a2 = 2;
      *(unsigned char *)(a2 + 2) = 1;
    }
    else
    {
      *(_WORD *)a2 = *(_WORD *)(*(void *)(*(void *)(result + 16) + 72) + 696 * v5 + 556);
      *(unsigned char *)(a2 + 2) = 1;
    }
  }
  return result;
}

BOOL sub_9C945C(void *a1)
{
  uint64_t v1 = a1[1];
  if (*(_DWORD *)(v1 + 1204) != -1) {
    return 0;
  }
  BOOL result = sub_BB7C((_DWORD *)(v1 + 48));
  if (result)
  {
    for (uint64_t i = a1[7]; i != a1[8]; i += 8)
    {
      if (**(_DWORD **)i == 2 && (*(_DWORD *)(*(void *)i + 1008) & 0xFFFFFFFD) == 1) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_9C94F0(uint64_t a1)
{
  return *(void *)(a1 + 8) + 1080;
}

uint64_t sub_9C94FC(uint64_t a1)
{
  return *(void *)(a1 + 8) + 1136;
}

uint64_t sub_9C9508(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 1056);
  if (v2 == *(void *)(v1 + 1064)) {
    return 0x7FFFFFFF7FFFFFFFLL;
  }
  else {
    return *(void *)v2;
  }
}

void sub_9C9534(void **a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  uint64_t v2 = a2 + 8;
  *(_DWORD *)a2 = 0x7FFFFFFF;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  long long v3 = a1[7];
  for (uint64_t i = a1[8]; v3 != i; ++v3)
  {
    uint64_t v8 = *v3;
    if (*(_DWORD *)*v3 == 2)
    {
      if (!*(unsigned char *)(v8 + 792))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      int v9 = *(_DWORD *)(v8 + 152);
      if (v9 != 0x7FFFFFFF)
      {
        *(_DWORD *)a2 = v9;
        uint64_t v10 = *(void *)(v8 + 48);
        if (v10 == -1)
        {
          long long v15 = 0uLL;
          uint64_t v16 = 0;
        }
        else
        {
          uint64_t v11 = *a1[2] + 168 * v10;
          if (*(char *)(v11 + 159) < 0)
          {
            sub_4200(&v15, *(void **)(v11 + 136), *(void *)(v11 + 144));
          }
          else
          {
            long long v12 = *(_OWORD *)(v11 + 136);
            uint64_t v16 = *(void *)(v11 + 152);
            long long v15 = v12;
          }
        }
        if (*(char *)(a2 + 31) < 0) {
          operator delete(*(void **)v2);
        }
        *(_OWORD *)uint64_t v2 = v15;
        *(void *)(v2 + 16) = v16;
        if (!*(unsigned char *)(*v3 + 792) || (uint64_t v13 = *(void *)(*v3 + 752), v13 == -1)) {
          __int16 v7 = 2;
        }
        else {
          __int16 v7 = *(_WORD *)(a1[2][9] + 696 * v13 + 556);
        }
        *(_WORD *)(a2 + 32) = v7;
      }
    }
  }
}

void sub_9C96C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_9C96E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 173) || *(unsigned char *)(a1 + 174))
  {
    sub_5F3B34(a2);
    uint64_t v4 = *(void *)(a1 + 24);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B9250;
    strcpy(__p.__r_.__value_.__l.__data_, "RouteDuration_NoVehicle");
    uint64_t v5 = sub_8D7730(v4, (uint64_t)&__p);
    unint64_t v6 = *(void *)(a2 + 8);
    if (v6 >= *(void *)(a2 + 16))
    {
      *(void *)(a2 + 8) = sub_6E6EC((char **)a2, (uint64_t)v5);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_24;
      }
    }
    else
    {
      if (*((char *)v5 + 23) < 0)
      {
        sub_4200(*(unsigned char **)(a2 + 8), (void *)*v5, v5[1]);
      }
      else
      {
        long long v7 = *(_OWORD *)v5;
        *(void *)(v6 + 16) = v5[2];
        *(_OWORD *)unint64_t v6 = v7;
      }
      *(void *)(a2 + 8) = v6 + 24;
      *(void *)(a2 + 8) = v6 + 24;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_24:
        operator delete(__p.__r_.__value_.__l.__data_);
        uint64_t v8 = *(_DWORD **)(a1 + 8);
        int v9 = v8 + 9;
        if (v8[302] != 2) {
          goto LABEL_25;
        }
        goto LABEL_8;
      }
    }
    uint64_t v8 = *(_DWORD **)(a1 + 8);
    int v9 = v8 + 9;
    if (v8[302] != 2)
    {
LABEL_25:
      uint64_t v10 = v8 + 6;
LABEL_26:
      int v24 = *v9 - *v10;
      if (v24 >= 60) {
        int v25 = 10 * v24;
      }
      else {
        int v25 = 600;
      }
      sub_5F657C((uint64_t *)a2, (uint64_t)&qword_25DCA98, v25);
      return;
    }
LABEL_8:
    int v12 = v8[7];
    uint64_t v10 = v8 + 7;
    int v11 = v12;
    if (v10[3] != 0x7FFFFFFF) {
      int v9 = v10 + 3;
    }
    if (v11 == 0x7FFFFFFF) {
      --v10;
    }
    goto LABEL_26;
  }
  sub_5F3B34(a2);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B91B0;
  strcpy(__p.__r_.__value_.__l.__data_, "RouteDescription_ArrivalTime");
  uint64_t v13 = *(int **)(a1 + 8);
  int v14 = v13 + 9;
  if (v13[302] == 2)
  {
    int v16 = v13[10];
    long long v15 = v13 + 10;
    if (v16 != 0x7FFFFFFF) {
      int v14 = v15;
    }
  }
  int v26 = *v14;
  sub_5F5F70(a2, &xmmword_25DCB10, &v26, a1 + 120, 0);
  uint64_t v17 = *(int **)(a1 + 8);
  uint64_t v18 = v17 + 9;
  if (v17[302] == 2)
  {
    int v20 = v17[10];
    uint64_t v19 = v17 + 10;
    if (v20 != 0x7FFFFFFF) {
      uint64_t v18 = v19;
    }
  }
  int v26 = *v18;
  sub_98D43C(&v26, (const char *)(a1 + 96), (const char *)(a1 + 120), *(void *)(a1 + 32) + 1177, *(int **)(a1 + 40), &__p, a2);
  unint64_t v21 = sub_8D7730(*(void *)(a1 + 24), (uint64_t)&__p);
  unint64_t v22 = *(void *)(a2 + 8);
  if (v22 >= *(void *)(a2 + 16))
  {
    *(void *)(a2 + 8) = sub_6E6EC((char **)a2, (uint64_t)v21);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_35:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  if (*((char *)v21 + 23) < 0)
  {
    sub_4200(*(unsigned char **)(a2 + 8), (void *)*v21, v21[1]);
  }
  else
  {
    long long v23 = *(_OWORD *)v21;
    *(void *)(v22 + 16) = v21[2];
    *(_OWORD *)unint64_t v22 = v23;
  }
  *(void *)(a2 + 8) = v22 + 24;
  *(void *)(a2 + 8) = v22 + 24;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_35;
  }
}

void sub_9C99CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 8) = v16;
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v15);
  _Unwind_Resume(a1);
}

void sub_9C9A28(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 174))
  {
    sub_5F3B34((uint64_t)a2);
    uint64_t v12 = *(void *)(a1 + 80);
    if (v12 >= 1)
    {
      LOBYTE(__p) = 1;
      sub_5F6090(a2, (uint64_t)&xmmword_25DCA80, &v12, (char *)&__p);
      uint64_t v4 = *(void *)(a1 + 24);
      std::string __p = operator new(0x20uLL);
      long long v11 = xmmword_20B8890;
      strcpy((char *)__p, "RouteDescription_WalkDistance");
      uint64_t v5 = sub_8D7730(v4, (uint64_t)&__p);
      unint64_t v6 = a2[1];
      if (v6 >= a2[2])
      {
        a2[1] = (uint64_t)sub_6E6EC((char **)a2, (uint64_t)v5);
        if (SHIBYTE(v11) < 0) {
LABEL_18:
        }
          operator delete(__p);
      }
      else
      {
        if (*((char *)v5 + 23) < 0)
        {
          sub_4200((unsigned char *)a2[1], (void *)*v5, v5[1]);
        }
        else
        {
          long long v7 = *(_OWORD *)v5;
          *(void *)(v6 + 16) = v5[2];
          *(_OWORD *)unint64_t v6 = v7;
        }
        a2[1] = v6 + 24;
        a2[1] = v6 + 24;
        if (SHIBYTE(v11) < 0) {
          goto LABEL_18;
        }
      }
    }
  }
  else if (*(_DWORD *)(*(void *)(a1 + 40) + 8) == 1)
  {
    sub_9C9CAC(a1, a2);
  }
  else if (*(unsigned char *)(a1 + 173))
  {
    sub_9CA0B4(a1, a2);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 8);
    if (*(_DWORD *)(v8 + 1204) == -1 && sub_BB7C((_DWORD *)(v8 + 48)))
    {
      for (uint64_t i = *(void *)(a1 + 56); i != *(void *)(a1 + 64); i += 8)
      {
        if (**(_DWORD **)i == 2 && (*(_DWORD *)(*(void *)i + 1008) & 0xFFFFFFFD) == 1) {
          goto LABEL_26;
        }
      }
      sub_9CA5D0(a1, a2);
    }
    else
    {
LABEL_26:
      sub_9CA740(a1, a2);
    }
  }
}

void sub_9C9C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v14);
  _Unwind_Resume(a1);
}

void sub_9C9CAC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_5F3B34((uint64_t)a2);
  memset(&v45, 0, sizeof(v45));
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(unsigned char *)(a1 + 173))
  {
    std::string __p = operator new(0x20uLL);
    long long v44 = xmmword_20B91C0;
    strcpy((char *)__p, "RouteDescription_LowFreq");
    uint64_t v5 = (const std::string *)sub_8D7730(v4, (uint64_t)&__p);
    std::string::operator=(&v45, v5);
    if (SHIBYTE(v44) < 0)
    {
      operator delete(__p);
      unint64_t v6 = *(_DWORD **)(a1 + 8);
      long long v7 = v6 + 6;
      if (v6[302] == 2)
      {
LABEL_4:
        int v9 = v6[7];
        uint64_t v8 = v6 + 7;
        if (v9 != 0x7FFFFFFF) {
          long long v7 = v8;
        }
      }
    }
    else
    {
      unint64_t v6 = *(_DWORD **)(a1 + 8);
      long long v7 = v6 + 6;
      if (v6[302] == 2) {
        goto LABEL_4;
      }
    }
    LODWORD(__p) = *v7;
    sub_5F5F70((uint64_t)a2, &xmmword_25DCAE0, &__p, a1 + 96, 0);
    goto LABEL_47;
  }
  std::string __p = operator new(0x20uLL);
  long long v44 = xmmword_20B8870;
  strcpy((char *)__p, "RouteDescription_ArriveBy");
  uint64_t v10 = (const std::string *)sub_8D7730(v4, (uint64_t)&__p);
  std::string::operator=(&v45, v10);
  if (SHIBYTE(v44) < 0)
  {
    operator delete(__p);
    long long v11 = (const char *)(a1 + 96);
    uint64_t v12 = *(_DWORD **)(a1 + 8);
    if (v12[302] == 2) {
      goto LABEL_9;
    }
  }
  else
  {
    long long v11 = (const char *)(a1 + 96);
    uint64_t v12 = *(_DWORD **)(a1 + 8);
    if (v12[302] == 2)
    {
LABEL_9:
      uint64_t v13 = 7;
      if (v12[7] == 0x7FFFFFFF) {
        uint64_t v13 = 6;
      }
      int v14 = v12[v13];
      int v16 = v12[10];
      uint64_t v15 = v12 + 10;
      if (v16 == 0x7FFFFFFF) {
        --v15;
      }
      goto LABEL_18;
    }
  }
  int v14 = v12[6];
  uint64_t v15 = v12 + 9;
LABEL_18:
  int v42 = *v15;
  LODWORD(__p) = v14;
  BOOL v17 = sub_26710(v11, (int *)&__p, (const char *)(a1 + 120), &v42);
  LODWORD(__p) = **(_DWORD **)(a1 + 40);
  uint64_t v18 = *(int **)(a1 + 8);
  uint64_t v19 = v18 + 6;
  if (v18[302] == 2)
  {
    int v21 = v18[7];
    int v20 = v18 + 7;
    if (v21 != 0x7FFFFFFF) {
      uint64_t v19 = v20;
    }
  }
  int v42 = *v19;
  int v22 = sub_26854((int *)&__p, &v42, v11);
  long long v23 = *(_DWORD **)(a1 + 8);
  if (v23[302] == 2)
  {
    uint64_t v24 = 7;
    if (v23[7] == 0x7FFFFFFF) {
      uint64_t v24 = 6;
    }
    int v25 = v23[v24];
    int v27 = v23[10];
    int v26 = v23 + 10;
    if (v27 == 0x7FFFFFFF) {
      --v26;
    }
  }
  else
  {
    int v25 = v23[6];
    int v26 = v23 + 9;
  }
  int v41 = *v26;
  int v42 = v25;
  int v28 = sub_26854(&v42, &v41, (const char *)(a1 + 120));
  if (v17) {
    char v29 = 6;
  }
  else {
    char v29 = 7;
  }
  if (v17) {
    char v30 = 0;
  }
  else {
    char v30 = 5;
  }
  if (v22) {
    char v31 = v29;
  }
  else {
    char v31 = v30;
  }
  if (v28) {
    char v32 = v29;
  }
  else {
    char v32 = v30;
  }
  char v33 = *(int **)(a1 + 8);
  uint64_t v34 = v33 + 6;
  if (v33[302] == 2)
  {
    int v36 = v33[7];
    unsigned __int8 v35 = v33 + 7;
    if (v36 != 0x7FFFFFFF) {
      uint64_t v34 = v35;
    }
  }
  int v42 = *v34;
  sub_5F5F70((uint64_t)a2, &xmmword_25DCAE0, &v42, (uint64_t)v11, v31);
  uint64_t v37 = *(int **)(a1 + 8);
  int v38 = v37 + 9;
  if (v37[302] == 2)
  {
    int v40 = v37[10];
    int v39 = v37 + 10;
    if (v40 != 0x7FFFFFFF) {
      int v38 = v39;
    }
  }
  int v42 = *v38;
  sub_5F5F70((uint64_t)a2, &xmmword_25DCB10, &v42, a1 + 120, v32);
LABEL_47:
  sub_9CB3AC(a1, (const void **)&v45.__r_.__value_.__l.__data_, a2);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
}

void sub_9CA044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if ((a22 & 0x80000000) == 0)
  {
    sub_4D4B58(v22);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_4D4B58(v22);
  _Unwind_Resume(a1);
}

void sub_9CA0B4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_5F3B34((uint64_t)a2);
  memset(&v40, 0, sizeof(v40));
  uint64_t v4 = *(void *)(a1 + 176);
  if (!v4 || ((v5 = *(_DWORD *)(v4 + 1008) & 0xFFFFFFFD, *(unsigned char *)(a1 + 172)) ? (BOOL v6 = v5 == 1) : (BOOL v6 = 0), !v6))
  {
    std::string::assign(&v40, "RouteDescription_LowFreq");
    long long v7 = *(_DWORD **)(a1 + 8);
    uint64_t v8 = v7 + 6;
    if (v7[302] == 2)
    {
      int v10 = v7[7];
      int v9 = v7 + 7;
      if (v10 != 0x7FFFFFFF) {
        uint64_t v8 = v9;
      }
    }
    LODWORD(__p[0]) = *v8;
    sub_5F5F70((uint64_t)a2, &xmmword_25DCAE0, __p, a1 + 96, 0);
    long long v11 = *(_DWORD **)(a1 + 8);
    uint64_t v12 = v11 + 6;
    if (v11[302] == 2)
    {
      int v14 = v11[7];
      uint64_t v13 = v11 + 7;
      if (v14 != 0x7FFFFFFF) {
        uint64_t v12 = v13;
      }
    }
    LODWORD(__p[0]) = *v12;
    sub_98D43C((int *)__p, (const char *)(a1 + 96), (const char *)(a1 + 96), *(void *)(a1 + 32) + 1177, *(int **)(a1 + 40), &v40, (uint64_t)a2);
    goto LABEL_56;
  }
  if (*(unsigned char *)(a1 + 174))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v15 = *(void **)(a1 + 56);
  int v16 = *(void **)(a1 + 64);
  if (v15 == v16) {
    goto LABEL_21;
  }
  while (1)
  {
    BOOL v17 = (_DWORD *)*v15;
    if (*(_DWORD *)*v15 == 2) {
      break;
    }
    if (++v15 == v16) {
      goto LABEL_21;
    }
  }
  if (!*((unsigned char *)v17 + 792) || (uint64_t v18 = *((void *)v17 + 94), v18 == -1)) {
LABEL_21:
  }
    uint64_t v19 = 2;
  else {
    uint64_t v19 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 72) + 696 * v18 + 556);
  }
  sub_98C68C(v19, (uint64_t)__p);
  uint64_t v20 = *(void *)(a1 + 176);
  if (!v20)
  {
    int v23 = 0x7FFFFFFF;
    int v21 = 0x7FFFFFFF;
    goto LABEL_33;
  }
  if (!*(unsigned char *)(v20 + 792))
  {
    unsigned __int8 v35 = __cxa_allocate_exception(8uLL);
    *unsigned __int8 v35 = &off_2439078;
  }
  int v21 = *(_DWORD *)(v20 + 116);
  if (v21 == 0x7FFFFFFF)
  {
    int v22 = 0;
    int v21 = *(_DWORD *)(a1 + 88);
    int v23 = v21;
    if (*(_DWORD *)(*(void *)(a1 + 8) + 1208) != 2) {
      goto LABEL_33;
    }
  }
  else
  {
    int v23 = *(_DWORD *)(v20 + 120);
    int v22 = *(unsigned __int8 *)(v20 + 124);
    if (*(_DWORD *)(*(void *)(a1 + 8) + 1208) != 2) {
      goto LABEL_33;
    }
  }
  if (v23 == 0x7FFFFFFF)
  {
    int v23 = 0x7FFFFFFF;
    goto LABEL_33;
  }
  if (v22 != 1)
  {
LABEL_33:
    int v25 = SHIBYTE(v39);
    if (v39 >= 0) {
      size_t v26 = HIBYTE(v39);
    }
    else {
      size_t v26 = (size_t)__p[1];
    }
    unint64_t v27 = v26 + 41;
    if (v26 + 41 >= 0x7FFFFFFFFFFFFFF8) {
      sub_188D690();
    }
    if (v27 > 0x16)
    {
      uint64_t v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17) {
        uint64_t v29 = v27 | 7;
      }
      uint64_t v30 = v29 + 1;
      p_dst = (std::string *)operator new(v29 + 1);
      __dst.__r_.__value_.__l.__size_ = v26 + 41;
      __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      if (!v26) {
        goto LABEL_46;
      }
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v26 + 41;
    }
    if (v25 >= 0) {
      char v31 = __p;
    }
    else {
      char v31 = (void **)__p[0];
    }
    memmove(p_dst, v31, v26);
LABEL_46:
    int v24 = 0;
    strcpy((char *)p_dst + v26, " scheduled at {FirstVehicleDepartureTime}");
    goto LABEL_47;
  }
  std::operator+<char>();
  int v24 = 1;
LABEL_47:
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::string v40 = __dst;
  if (v23 == 0x7FFFFFFF) {
    int v32 = v21;
  }
  else {
    int v32 = v23;
  }
  if (!v24) {
    int v32 = v21;
  }
  LODWORD(__dst.__r_.__value_.__l.__data_) = v32;
  sub_5F5F70((uint64_t)a2, &qword_25DCAF8, &__dst, a1 + 144, 0);
  sub_98D43C((int *)&__dst, (const char *)(a1 + 144), (const char *)(a1 + 144), *(void *)(a1 + 32) + 1177, *(int **)(a1 + 40), &v40, (uint64_t)a2);
  if (SHIBYTE(v39) < 0) {
    operator delete(__p[0]);
  }
LABEL_56:
  char v33 = sub_8D7730(*(void *)(a1 + 24), (uint64_t)&v40);
  if (*((char *)v33 + 23) < 0)
  {
    sub_4200(__p, (void *)*v33, v33[1]);
  }
  else
  {
    long long v34 = *(_OWORD *)v33;
    uint64_t v39 = v33[2];
    *(_OWORD *)std::string __p = v34;
  }
  sub_9CB3AC(a1, (const void **)__p, a2);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_63:
    operator delete(v40.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_63;
  }
}

void sub_9CA528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
LABEL_3:
    sub_4D4B58(v25);
    _Unwind_Resume(a1);
  }
  operator delete(a20);
  sub_4D4B58(v25);
  _Unwind_Resume(a1);
}

void sub_9CA5D0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_5F3B34((uint64_t)a2);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 24);
  std::string __p = operator new(0x20uLL);
  long long v12 = xmmword_20B8870;
  strcpy((char *)__p, "RouteDescription_HighFreq");
  BOOL v6 = sub_8D7730(v5, (uint64_t)&__p);
  if (*((char *)v6 + 23) < 0)
  {
    sub_4200(__dst, (void *)*v6, v6[1]);
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    uint64_t v14 = v6[2];
    *(_OWORD *)std::string __dst = v7;
  }
  uint64_t v8 = v4 + 48;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  int v9 = (int *)nullsub_1(v4 + 48);
  int v10 = (int *)sub_BBB4(v8);
  sub_5F3EF4(a2, (uint64_t)&qword_25DC9F0, v9, v10);
  sub_9CB3AC(a1, (const void **)__dst, a2);
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_9CA6F4(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_9CA708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v21);
  _Unwind_Resume(a1);
}

void sub_9CA740(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  memset(&v34, 0, sizeof(v34));
  sub_5F3B34((uint64_t)a2);
  if (*(unsigned char *)(a1 + 172) && (uint64_t v4 = *(void *)(a1 + 176)) != 0 && (*(_DWORD *)(v4 + 1008) & 0xFFFFFFFD) == 1)
  {
    if (!*(unsigned char *)(a1 + 173))
    {
      std::string::assign(&v34, "RouteDescription_LowFreq_FromStation_{RouteVehicle}");
      qmemcpy(__p, "{RouteVehicle}", 14);
      if (*(unsigned char *)(a1 + 174))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      uint64_t v5 = *(void **)(a1 + 56);
      BOOL v6 = *(void **)(a1 + 64);
      if (v5 == v6) {
        goto LABEL_32;
      }
      while (1)
      {
        long long v7 = (_DWORD *)*v5;
        if (*(_DWORD *)*v5 == 2) {
          break;
        }
        if (++v5 == v6) {
          goto LABEL_32;
        }
      }
      if (!*((unsigned char *)v7 + 792) || (uint64_t v19 = *((void *)v7 + 94), v19 == -1)) {
LABEL_32:
      }
        uint64_t v20 = 2;
      else {
        uint64_t v20 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 72) + 696 * v19 + 556);
      }
      sub_98C68C(v20, (uint64_t)v30);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v21 = &v34;
      }
      else {
        uint64_t v21 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      int64_t size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t size = v34.__r_.__value_.__l.__size_;
      }
      if (size >= 14)
      {
        int v23 = (void **)((char *)&v21->__r_.__value_.__l.__data_ + size);
        int v24 = v21;
        do
        {
          uint64_t v25 = (void **)memchr(v24, 123, size - 13);
          if (!v25) {
            break;
          }
          if (*v25 == __p[0] && *(void **)((char *)v25 + 6) == *(void **)((char *)__p + 6))
          {
            if (v25 != v23 && (char *)v25 - (char *)v21 != -1)
            {
              if ((v31 & 0x80u) == 0) {
                unint64_t v27 = v30;
              }
              else {
                unint64_t v27 = (void **)v30[0];
              }
              if ((v31 & 0x80u) == 0) {
                std::string::size_type v28 = v31;
              }
              else {
                std::string::size_type v28 = (std::string::size_type)v30[1];
              }
              std::string::replace(&v34, (char *)v25 - (char *)v21, 0xEuLL, (const std::string::value_type *)v27, v28);
            }
            break;
          }
          int v24 = (std::string *)((char *)v25 + 1);
          int64_t size = (char *)v23 - (char *)v24;
        }
        while ((char *)v23 - (char *)v24 >= 14);
      }
      if ((char)v31 < 0) {
        operator delete(v30[0]);
      }
      LODWORD(__p[0]) = *(_DWORD *)(a1 + 88);
      sub_5F5F70((uint64_t)a2, &qword_25DCAF8, __p, a1 + 144, 0);
      LODWORD(__p[0]) = *(_DWORD *)(a1 + 88);
      sub_98D43C((int *)__p, (const char *)(a1 + 144), (const char *)(a1 + 96), *(void *)(a1 + 32) + 1177, *(int **)(a1 + 40), &v34, (uint64_t)a2);
    }
  }
  else
  {
    std::string::assign(&v34, "RouteDescription_LowFreq");
    uint64_t v8 = *(_DWORD **)(a1 + 8);
    int v9 = v8 + 6;
    if (v8[302] == 2)
    {
      int v11 = v8[7];
      int v10 = v8 + 7;
      if (v11 != 0x7FFFFFFF) {
        int v9 = v10;
      }
    }
    LODWORD(__p[0]) = *v9;
    sub_5F5F70((uint64_t)a2, &xmmword_25DCAE0, __p, a1 + 96, 0);
    long long v12 = *(_DWORD **)(a1 + 8);
    uint64_t v13 = v12 + 6;
    if (v12[302] == 2)
    {
      int v15 = v12[7];
      uint64_t v14 = v12 + 7;
      if (v15 != 0x7FFFFFFF) {
        uint64_t v13 = v14;
      }
    }
    LODWORD(__p[0]) = *v13;
    sub_98D43C((int *)__p, (const char *)(a1 + 96), (const char *)(a1 + 96), *(void *)(a1 + 32) + 1177, *(int **)(a1 + 40), &v34, (uint64_t)a2);
  }
  std::string::size_type v16 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v16 = v34.__r_.__value_.__l.__size_;
  }
  if (v16)
  {
    BOOL v17 = sub_8D7730(*(void *)(a1 + 24), (uint64_t)&v34);
    if (*((char *)v17 + 23) < 0)
    {
      sub_4200(__p, (void *)*v17, v17[1]);
    }
    else
    {
      long long v18 = *(_OWORD *)v17;
      uint64_t v33 = v17[2];
      *(_OWORD *)std::string __p = v18;
    }
  }
  else
  {
    HIBYTE(v33) = 0;
    LOBYTE(__p[0]) = 0;
  }
  sub_9CB3AC(a1, (const void **)__p, a2);
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_28:
    operator delete(v34.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_28;
  }
}

void sub_9CAAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v27);
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void sub_9CAB60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  memset(&v29, 0, sizeof(v29));
  if (*(unsigned char *)(a1 + 174))
  {
    std::string::assign(&v29, "TravelDescription_NoVehicle");
    goto LABEL_56;
  }
  std::string::assign(&v29, "TravelDescription_{RouteVehicle}");
  if (*(unsigned char *)(a1 + 174))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v5 = *(void **)(a1 + 64);
  if (v4 != v5)
  {
    char v6 = 0;
    unsigned __int16 v7 = 2;
    while (1)
    {
      uint64_t v8 = (_DWORD *)*v4;
      if (*(_DWORD *)*v4 == 2)
      {
        if (v6)
        {
          if (!*((unsigned char *)v8 + 792) || (uint64_t v9 = *((void *)v8 + 94), v9 == -1))
          {
            if (v7 != 2) {
              break;
            }
          }
          else if (*(unsigned __int16 *)(*(void *)(*(void *)(a1 + 16) + 72) + 696 * v9 + 556) != v7)
          {
            break;
          }
        }
        else
        {
          if (!*((unsigned char *)v8 + 792) || (uint64_t v10 = *((void *)v8 + 94), v10 == -1))
          {
            char v6 = 1;
            unsigned __int16 v7 = 2;
            goto LABEL_8;
          }
          unsigned __int16 v7 = *(_WORD *)(*(void *)(*(void *)(a1 + 16) + 72) + 696 * v10 + 556);
        }
        char v6 = 1;
      }
LABEL_8:
      if (++v4 == v5) {
        goto LABEL_20;
      }
    }
  }
  unsigned __int16 v7 = 2;
LABEL_20:
  sub_98C68C(v7, (uint64_t)&v28);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v28.__r_.__value_.__l.__size_ == 7)
    {
      int v11 = (std::string *)v28.__r_.__value_.__r.__words[0];
LABEL_25:
      int data = (int)v11->__r_.__value_.__l.__data_;
      int v13 = *(_DWORD *)((char *)v11->__r_.__value_.__r.__words + 3);
      if (data == 1768449366 && v13 == 1701602153) {
        std::string::assign(&v28, "Transit");
      }
    }
  }
  else if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) == 7)
  {
    int v11 = &v28;
    goto LABEL_25;
  }
  qmemcpy(v27, "{RouteVehicle}", 14);
  int64_t size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = &v29;
  }
  else {
    std::string::size_type v16 = (std::string *)v29.__r_.__value_.__r.__words[0];
  }
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int64_t size = v29.__r_.__value_.__l.__size_;
  }
  if (size >= 14)
  {
    BOOL v17 = (char *)v16 + size;
    long long v18 = v16;
    do
    {
      uint64_t v19 = (char *)memchr(v18, 123, size - 13);
      if (!v19) {
        break;
      }
      if (*(void *)v19 == v27[0] && *(void *)(v19 + 6) == *(void *)((char *)v27 + 6))
      {
        if (v19 != v17 && v19 - (char *)v16 != -1)
        {
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v21 = &v28;
          }
          else {
            uint64_t v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
          }
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v22 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v22 = v28.__r_.__value_.__l.__size_;
          }
          std::string::replace(&v29, v19 - (char *)v16, 0xEuLL, (const std::string::value_type *)v21, v22);
        }
        break;
      }
      long long v18 = (std::string *)(v19 + 1);
      int64_t size = v17 - (char *)v18;
    }
    while (v17 - (char *)v18 >= 14);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
LABEL_56:
  sub_5F3B34(a2);
  int v23 = sub_8D7730(*(void *)(a1 + 24), (uint64_t)&v29);
  unint64_t v24 = *(void *)(a2 + 8);
  if (v24 >= *(void *)(a2 + 16))
  {
    *(void *)(a2 + 8) = sub_6E6EC((char **)a2, (uint64_t)v23);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
LABEL_63:
    }
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  else
  {
    if (*((char *)v23 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a2 + 8), (void *)*v23, v23[1]);
    }
    else
    {
      long long v25 = *(_OWORD *)v23;
      *(void *)(v24 + 16) = v23[2];
      *(_OWORD *)unint64_t v24 = v25;
    }
    *(void *)(a2 + 8) = v24 + 24;
    *(void *)(a2 + 8) = v24 + 24;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_63;
    }
  }
}

void sub_9CAE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if (a24 < 0)
    {
LABEL_5:
      operator delete(a19);
      _Unwind_Resume(a1);
    }
  }
  else if (a24 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_9CAF10@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3B34(a2);
  uint64_t v4 = a1[1];
  int v5 = *(_DWORD *)(v4 + 1136);
  if (v5 == 0x7FFFFFFF) {
    goto LABEL_16;
  }
  uint64_t v6 = *(unsigned __int8 *)(v4 + 1167);
  if (*(char *)(v4 + 1167) < 0)
  {
    if (!*(void *)(v4 + 1152)) {
      goto LABEL_16;
    }
  }
  else if (!*(unsigned char *)(v4 + 1167))
  {
    goto LABEL_16;
  }
  if (*(unsigned __int8 *)(a1[4] + 1177) >= 8u)
  {
    if ((v6 & 0x80) != 0)
    {
      if (v5) {
        BOOL v25 = 1;
      }
      else {
        BOOL v25 = *(void *)(v4 + 1152) == 0;
      }
      if (!v25)
      {
LABEL_40:
        uint64_t v26 = a1[3];
        v36[23] = 19;
        strcpy(v36, "RouteDetailSubtitle");
        uint64_t v27 = sub_8D7730(v26, (uint64_t)v36);
        uint64_t v28 = a1[3];
        std::string v34 = operator new(0x20uLL);
        long long v35 = xmmword_20B91A0;
        strcpy((char *)v34, "RouteDescription_Price_Free");
        std::string v29 = sub_8D7730(v28, (uint64_t)&v34);
        sub_289800((uint64_t)&dword_25DC918, (const void **)v27, (uint64_t)v29, &__p);
        unint64_t v30 = *(void *)(a2 + 8);
        if (v30 < *(void *)(a2 + 16))
        {
          long long v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(void *)(v30 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v30 = v31;
          memset(&__p, 0, sizeof(__p));
          *(void *)(a2 + 8) = v30 + 24;
          if (SHIBYTE(v35) < 0) {
            goto LABEL_42;
          }
LABEL_48:
          if ((v36[23] & 0x80000000) == 0) {
            goto LABEL_25;
          }
LABEL_49:
          std::string::size_type v16 = *(void **)v36;
          goto LABEL_24;
        }
        int v32 = sub_6E8C4((void **)a2, (uint64_t)&__p);
        int v33 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a2 + 8) = v32;
        if (v33 < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v35) & 0x80000000) == 0) {
            goto LABEL_48;
          }
        }
        else if ((SHIBYTE(v35) & 0x80000000) == 0)
        {
          goto LABEL_48;
        }
LABEL_42:
        operator delete(v34);
        if ((v36[23] & 0x80000000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_49;
      }
    }
    else
    {
      if (v5) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v6 == 0;
      }
      if (!v7) {
        goto LABEL_40;
      }
    }
    uint64_t v8 = a1[3];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_20B8870;
    strcpy(__p.__r_.__value_.__l.__data_, "RouteDetailSubtitle_Price");
    uint64_t v9 = sub_8D7730(v8, (uint64_t)&__p);
    unint64_t v10 = *(void *)(a2 + 8);
    if (v10 >= *(void *)(a2 + 16))
    {
      *(void *)(a2 + 8) = sub_6E6EC((char **)a2, (uint64_t)v9);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_45;
      }
    }
    else
    {
      if (*((char *)v9 + 23) < 0)
      {
        sub_4200(*(unsigned char **)(a2 + 8), (void *)*v9, v9[1]);
      }
      else
      {
        long long v11 = *(_OWORD *)v9;
        *(void *)(v10 + 16) = v9[2];
        *(_OWORD *)unint64_t v10 = v11;
      }
      *(void *)(a2 + 8) = v10 + 24;
      *(void *)(a2 + 8) = v10 + 24;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
LABEL_45:
      }
        sub_5F6C04(a2, (long long *)&qword_25DCB70);
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_45;
  }
LABEL_16:
  uint64_t v12 = a1[3];
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 19;
  strcpy((char *)&__p, "RouteDetailSubtitle");
  int v13 = sub_8D7730(v12, (uint64_t)&__p);
  unint64_t v14 = *(void *)(a2 + 8);
  if (v14 >= *(void *)(a2 + 16))
  {
    *(void *)(a2 + 8) = sub_6E6EC((char **)a2, (uint64_t)v13);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  if (*((char *)v13 + 23) < 0)
  {
    sub_4200(*(unsigned char **)(a2 + 8), (void *)*v13, v13[1]);
  }
  else
  {
    long long v15 = *(_OWORD *)v13;
    *(void *)(v14 + 16) = v13[2];
    *(_OWORD *)unint64_t v14 = v15;
  }
  *(void *)(a2 + 8) = v14 + 24;
  *(void *)(a2 + 8) = v14 + 24;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_23:
    std::string::size_type v16 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_24:
    operator delete(v16);
  }
LABEL_25:
  BOOL v17 = (_DWORD *)a1[1];
  long long v18 = v17 + 9;
  if (v17[302] == 2)
  {
    int v21 = v17[7];
    uint64_t v19 = v17 + 7;
    int v20 = v21;
    if (v19[3] != 0x7FFFFFFF) {
      long long v18 = v19 + 3;
    }
    if (v20 == 0x7FFFFFFF) {
      --v19;
    }
  }
  else
  {
    uint64_t v19 = v17 + 6;
  }
  int v22 = *v18 - *v19;
  if (v22 >= 60) {
    int v23 = 10 * v22;
  }
  else {
    int v23 = 600;
  }
  return sub_5F66B8((uint64_t *)a2, (uint64_t)&qword_25DCA98, v23);
}

void sub_9CB2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  *(void *)(v28 + 8) = v29;
  if (a28 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v28);
  _Unwind_Resume(a1);
}

void sub_9CB3AC(uint64_t a1, const void **a2, uint64_t *a3)
{
  memset(&v29, 0, sizeof(v29));
  if (!*(unsigned char *)(a1 + 173)) {
    goto LABEL_15;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_20B9250;
  strcpy(__p[0].__r_.__value_.__l.__data_, "RouteDuration_NoVehicle");
  BOOL v7 = (const std::string *)sub_8D7730(v6, (uint64_t)__p);
  std::string::operator=(&v29, v7);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    uint64_t v8 = *(_DWORD **)(a1 + 8);
    uint64_t v9 = v8 + 9;
    if (v8[302] == 2) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v8 = *(_DWORD **)(a1 + 8);
    uint64_t v9 = v8 + 9;
    if (v8[302] == 2)
    {
LABEL_4:
      int v12 = v8[7];
      unint64_t v10 = v8 + 7;
      int v11 = v12;
      if (v10[3] != 0x7FFFFFFF) {
        uint64_t v9 = v10 + 3;
      }
      if (v11 == 0x7FFFFFFF) {
        --v10;
      }
      goto LABEL_11;
    }
  }
  unint64_t v10 = v8 + 6;
LABEL_11:
  int v13 = *v9 - *v10;
  if (v13 >= 60) {
    int v14 = 10 * v13;
  }
  else {
    int v14 = 600;
  }
  sub_5F657C(a3, (uint64_t)&qword_25DCA98, v14);
LABEL_15:
  memset(&v28, 0, sizeof(v28));
  uint64_t v27 = *(void *)(a1 + 80);
  if (v27 >= 1 && !*(_DWORD *)(*(void *)(a1 + 32) + 1436))
  {
    __p[0].__r_.__value_.__s.__data_[0] = 1;
    sub_5F6090(a3, (uint64_t)&xmmword_25DCA80, &v27, (char *)__p);
    uint64_t v15 = *(void *)(a1 + 24);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_20B8890;
    strcpy(__p[0].__r_.__value_.__l.__data_, "RouteDescription_WalkDistance");
    std::string::size_type v16 = (const std::string *)sub_8D7730(v15, (uint64_t)__p);
    std::string::operator=(&v28, v16);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  sub_9BD268((uint64_t)&dword_25DC918, (const void **)&v29.__r_.__value_.__l.__data_, a2, (uint64_t)&v28, &v26);
  uint64_t v17 = *(void *)(a1 + 8);
  int v18 = *(_DWORD *)(v17 + 1136);
  if (v18 != 0x7FFFFFFF)
  {
    uint64_t v19 = *(unsigned __int8 *)(v17 + 1167);
    if (*(char *)(v17 + 1167) < 0)
    {
      if (!*(void *)(v17 + 1152)) {
        goto LABEL_36;
      }
    }
    else if (!*(unsigned char *)(v17 + 1167))
    {
      goto LABEL_36;
    }
    if (*(unsigned __int8 *)(*(void *)(a1 + 32) + 1177) >= 8u && *(unsigned char *)(a1 + 173))
    {
      memset(&v25, 0, sizeof(v25));
      if ((v19 & 0x80) != 0) {
        uint64_t v19 = *(void *)(v17 + 1152);
      }
      if (v18 || !v19) {
        sub_5F6C04((uint64_t)a3, (long long *)&qword_25DCB70);
      }
      uint64_t v20 = *(void *)(a1 + 24);
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
      *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_20B91A0;
      strcpy(__p[0].__r_.__value_.__l.__data_, "RouteDescription_Price_Free");
      int v21 = (const std::string *)sub_8D7730(v20, (uint64_t)__p);
      std::string::operator=(&v25, v21);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      sub_289800((uint64_t)&dword_25DC918, (const void **)&v26.__r_.__value_.__l.__data_, (uint64_t)&v25, __p);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      std::string v26 = __p[0];
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v25.__r_.__value_.__l.__data_);
        unint64_t v22 = a3[1];
        if (v22 < a3[2]) {
          goto LABEL_37;
        }
LABEL_42:
        unint64_t v24 = sub_55C330((char **)a3, (uint64_t)&v26);
        goto LABEL_43;
      }
    }
  }
LABEL_36:
  unint64_t v22 = a3[1];
  if (v22 >= a3[2]) {
    goto LABEL_42;
  }
LABEL_37:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_4200((unsigned char *)v22, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else
  {
    long long v23 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    *(void *)(v22 + 16) = *((void *)&v26.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v22 = v23;
  }
  unint64_t v24 = (char *)(v22 + 24);
  a3[1] = v22 + 24;
LABEL_43:
  a3[1] = (uint64_t)v24;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_45:
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_49:
      operator delete(v29.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_49;
  }
}

void sub_9CB89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_6:
    if (a28 < 0) {
      operator delete(a23);
    }
    if (a34 < 0) {
      operator delete(a29);
    }
    _Unwind_Resume(exception_object);
  }
  operator delete(a16);
  goto LABEL_6;
}

uint64_t sub_9CB9B4()
{
  return 0;
}

void sub_9CB9C0(uint64_t a1)
{
  sub_92F570(a1);

  operator delete();
}

char *sub_9CB9F8()
{
  byte_25DC68F = 1;
  word_25DC678 = 65;
  byte_25DC6A7 = 1;
  word_25DC690 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DCDE0 = 0u;
  *(_OWORD *)&qword_25DCDF0 = 0u;
  dword_25DCE00 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DCDE0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DCDE0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DCDE0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DCDE0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DC6BF = 8;
  strcpy((char *)&qword_25DC6A8, "any_mode");
  byte_25DC6D7 = 7;
  strcpy((char *)&dword_25DC6C0, "cycling");
  byte_25DC6EF = 7;
  strcpy((char *)&dword_25DC6D8, "driving");
  byte_25DC707 = 7;
  strcpy((char *)&dword_25DC6F0, "walking");
  qword_25DC710 = 0;
  qword_25DC718 = 0;
  qword_25DC708 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DC708 = (uint64_t)v0;
  qword_25DC710 = (uint64_t)(v0 + 9);
  qword_25DC718 = (uint64_t)(v0 + 9);
  qword_25DC720 = 0;
  qword_25DC728 = 0;
  unk_25DC730 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DC728 = (uint64_t)(v1 + 9);
  unk_25DC730 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DC720 = (uint64_t)v1;
  byte_25DC74F = 6;
  strcpy((char *)&dword_25DC738, "{Mode}");
  byte_25DC767 = 11;
  strcpy((char *)&qword_25DC750, "{Direction}");
  byte_25DC77F = 6;
  strcpy((char *)&dword_25DC768, "{Line}");
  byte_25DC797 = 12;
  strcpy((char *)&qword_25DC780, "{LineNumber}");
  strcpy(&byte_25DC7AF, "\n{Headsign1}");
  strcpy((char *)&qword_25DC798, "{Headsign}");
  byte_25DC7C7 = 11;
  byte_25DC7DF = 11;
  strcpy((char *)&qword_25DC7C8, "{Headsign2}");
  byte_25DC7F7 = 11;
  strcpy((char *)&qword_25DC7E0, "{Headsign3}");
  byte_25DC80F = 11;
  strcpy((char *)&qword_25DC7F8, "{Headsign4}");
  byte_25DC827 = 11;
  strcpy((char *)&qword_25DC810, "{Headsign5}");
  byte_25DC83F = 6;
  strcpy((char *)&dword_25DC828, "{Stop}");
  byte_25DC857 = 14;
  strcpy((char *)&qword_25DC840, "{PreviousStop}");
  byte_25DC86F = 8;
  strcpy((char *)&qword_25DC858, "{System}");
  byte_25DC887 = 15;
  strcpy((char *)&qword_25DC870, "{VehicleNumber}");
  byte_25DC89F = 17;
  strcpy((char *)&xmmword_25DC888, "{AccessPointExit}");
  strcpy(&byte_25DC8B7, "\n{nextBoardStation}");
  strcpy((char *)&qword_25DC8A0, "{Platform}");
  byte_25DC8CF = 18;
  qword_25DC8D0 = 0;
  unk_25DC8D8 = 0;
  qword_25DC8E0 = 0;
  byte_25DC8FF = 1;
  word_25DC8E8 = 32;
  qword_25DC900 = (uint64_t)operator new(0x20uLL);
  unk_25DC908 = xmmword_20B8890;
  strcpy((char *)qword_25DC900, "LeaveStop_Loc_Comma_Separator");
  byte_25DC92F = 5;
  dword_25DC918 = -1028144608;
  word_25DC91C = 160;
  byte_25DC947 = 2;
  word_25DC930 = -24382;
  byte_25DC932 = 0;
  byte_25DC95F = 4;
  dword_25DC948 = 548913696;
  byte_25DC94C = 0;
  byte_25DC977 = 15;
  strcpy((char *)&qword_25DC960 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25DC960, "{s:s} ·");
  byte_25DC98F = 6;
  strcpy((char *)&dword_25DC978, "NoType");
  byte_25DC9A7 = 14;
  strcpy((char *)&qword_25DC990, "{WalkDistance}");
  strcpy(&byte_25DC9BF, "\n{OneMinute}");
  strcpy((char *)&qword_25DC9A8, "{WalkTime}");
  byte_25DC9D7 = 11;
  byte_25DC9EF = 14;
  strcpy((char *)&qword_25DC9D8, "{StepDuration}");
  byte_25DCA07 = 15;
  strcpy((char *)&qword_25DC9F0, "{TripFrequency}");
  byte_25DCA1F = 11;
  strcpy((char *)&qword_25DCA08, "{BoardTime}");
  byte_25DCA37 = 12;
  strcpy((char *)&qword_25DCA20, "{AlightTime}");
  byte_25DCA4F = 21;
  strcpy((char *)&xmmword_25DCA38, "{FutureTimestampList}");
  byte_25DCA67 = 15;
  strcpy((char *)&qword_25DCA50, "{DepartureTime}");
  byte_25DCA7F = 13;
  strcpy((char *)&qword_25DCA68, "{ArrivalTime}");
  byte_25DCA97 = 19;
  strcpy((char *)&xmmword_25DCA80, "{TotalWalkDistance}");
  byte_25DCAAF = 14;
  strcpy((char *)&qword_25DCA98, "{TripDuration}");
  byte_25DCAC7 = 11;
  strcpy((char *)&qword_25DCAB0, "{DayOfWeek}");
  byte_25DCADF = 6;
  strcpy((char *)&dword_25DCAC8, "{Date}");
  byte_25DCAF7 = 16;
  strcpy((char *)&xmmword_25DCAE0, "{OutTheDoorTime}");
  BOOL result = (char *)operator new(0x20uLL);
  *(void *)&qword_25DCAF8 = result;
  unk_25DCB00 = xmmword_20B91A0;
  strcpy(result, "{FirstVehicleDepartureTime}");
  byte_25DCB27 = 18;
  strcpy((char *)&xmmword_25DCB10, "{RouteArrivalTime}");
  strcpy(&byte_25DCB3F, "\n{IC_Artwork}");
  strcpy((char *)&qword_25DCB28, "{BaseFare}");
  byte_25DCB57 = 12;
  byte_25DCB6F = 11;
  strcpy((char *)&qword_25DCB58, "{RT_Symbol}");
  byte_25DCB87 = 12;
  strcpy((char *)&qword_25DCB70, "{TotalPrice}");
  byte_25DCB9F = 13;
  strcpy((char *)&qword_25DCB88, "{CheckInTime}");
  byte_25DCBB7 = 19;
  strcpy(byte_25DCBA0, "{LiveDepartureTime}");
  strcpy(&byte_25DCBCF, "\n{LegDuration}");
  strcpy((char *)&qword_25DCBB8, "{TimeList}");
  byte_25DCBE7 = 13;
  byte_25DCBFF = 15;
  strcpy((char *)&qword_25DCBE8, "{CountdownList}");
  byte_25DCC17 = 3;
  dword_25DCC00 = 8217723;
  strcpy(&byte_25DCC2F, "\t{AccessPointArt}");
  strcpy((char *)&qword_25DCC18, "{LineArt}");
  byte_25DCC47 = 16;
  byte_25DCC5F = 11;
  strcpy((char *)&qword_25DCC48, "{SystemArt}");
  strcpy(&byte_25DCC77, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25DCC60, "{CardName}");
  byte_25DCC8F = 18;
  byte_25DCCA7 = 16;
  strcpy((char *)&xmmword_25DCC90, "{ServiceEndTime}");
  byte_25DCCBF = 6;
  strcpy((char *)&dword_25DCCA8, "OnTime");
  byte_25DCCD7 = 6;
  strcpy((char *)&dword_25DCCC0, "Delays");
  byte_25DCCEF = 1;
  word_25DCCD8 = 115;
  byte_25DCD07 = 2;
  strcpy((char *)&word_25DCCF0, "cs");
  byte_25DCD1F = 1;
  word_25DCD08 = 112;
  byte_25DCD37 = 5;
  strcpy((char *)&dword_25DCD20, "_Line");
  byte_25DCD4F = 7;
  strcpy((char *)&dword_25DCD38, "_System");
  strcpy(&byte_25DCD67, "\n_VehicleNumber");
  strcpy((char *)&qword_25DCD50, "_Direction");
  byte_25DCD7F = 14;
  byte_25DCD97 = 12;
  strcpy((char *)&qword_25DCD80, "_To_Headsign");
  byte_25DCDAF = 16;
  strcpy((char *)&xmmword_25DCD98, "_Toward_Headsign");
  strcpy(&byte_25DCDC7, "\t_LineNumber");
  strcpy((char *)&qword_25DCDB0, "_Headsign");
  byte_25DCDDF = 11;
  return result;
}

void sub_9CC5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DCDF0) {
    sub_20AD604((void **)qword_25DCDF0);
  }
  uint64_t v37 = (void *)xmmword_25DCDE0;
  *(void *)&xmmword_25DCDE0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_9CC680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  operator new();
}

void sub_9CC924(_Unwind_Exception *a1)
{
  sub_9CC9AC(v1);
  _Unwind_Resume(a1);
}

void sub_9CC980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1A668(&a10);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_9CC9AC(v18);
  _Unwind_Resume(a1);
}

uint64_t *sub_9CC9AC(uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    sub_151A3A4(v1 + 64);
    sub_1517768(v1);
    operator delete();
  }
  return result;
}

uint64_t sub_9CCA04(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  if (v1)
  {
    sub_151A3A4(v1 + 64);
    sub_1517768(v1);
    operator delete();
  }
  return result;
}

void sub_9CCA58(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_725D0((uint64_t)v17);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(*(void *)(v6 + 40) + 8 * (int)sub_9CD338(a2) + 8);
  uint64_t v8 = *(void *)(a1 + 24);
  int v9 = sub_9CD338(a2);
  sub_10C569C(v7, *(void *)(*(void *)(v8 + 104) + 8 * v9 + 8), *(void *)(a1 + 16), (uint64_t)v15);
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)a3 = 0x7FFFFFFF;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 100;
  if (v15[0])
  {
    sub_49DD5C((uint64_t)v16, (uint64_t)&v11);
    *(_DWORD *)a3 = v11;
    int v10 = v14;
    *(_OWORD *)(a3 + 8) = v12;
    *(void *)(a3 + 24) = v13;
    *(_DWORD *)(a3 + 32) = v10;
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(double *)(a1 + 32) = sub_72688((uint64_t)v17) + *(double *)(a1 + 32);
  if (v15[0]) {
    sub_151C978(v16);
  }
}

void sub_9CCB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15) {
    sub_151C978(v15);
  }
  _Unwind_Resume(exception_object);
}

double sub_9CCB84@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  sub_725D0((uint64_t)v21);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(*(void *)(v6 + 104) + 8 * (int)sub_9CD338(a2) + 8);
  uint64_t v8 = sub_375C38(*(void **)a1);
  uint64_t v9 = *(int *)(v7 + 72);
  int v10 = *(unsigned int ***)(v7 + 80);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v9)
  {
    if ((v9 & 0x80000000) != 0) {
      sub_2E00();
    }
    uint64_t v11 = v8;
    uint64_t v12 = 8 * v9;
    uint64_t v13 = (char *)operator new(8 * v9);
    *a3 = (unint64_t)v13;
    a3[1] = (unint64_t)v13;
    a3[2] = (unint64_t)&v13[v12];
    do
    {
      int v14 = *v10;
      unint64_t v22 = -1;
      int v23 = 0x7FFFFFFF;
      unint64_t v22 = sub_2A28D0(v11, v14, (uint64_t)&v22);
      uint64_t v13 = sub_9CD48C(a3, v13, &v22) + 8;
      ++v10;
      v12 -= 8;
    }
    while (v12);
    std::string::size_type v16 = (void *)*a3;
    uint64_t v15 = (void *)a3[1];
    if ((void *)*a3 != v15)
    {
      while (*v16 <= 0xFFFFFFFEFFFFFFFFLL && *v16 != 0)
      {
        if (++v16 == v15) {
          goto LABEL_24;
        }
      }
      if (v16 != v15)
      {
        int v18 = v16 + 1;
        if (v16 + 1 != v15)
        {
          do
          {
            if (*v18 <= 0xFFFFFFFEFFFFFFFFLL && *v18 != 0) {
              *v16++ = *v18;
            }
            ++v18;
          }
          while (v18 != v15);
          uint64_t v15 = (void *)a3[1];
        }
      }
      if (v16 != v15) {
        a3[1] = (unint64_t)v16;
      }
    }
  }
LABEL_24:
  double result = sub_72688((uint64_t)v21) + *(double *)(a1 + 32);
  *(double *)(a1 + 32) = result;
  return result;
}

void sub_9CCD38(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_9CCD58(double *a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  sub_725D0((uint64_t)v63);
  *(unsigned char *)(a4 + 80) = 0;
  *(unsigned char *)(a4 + 120) = 0;
  uint64_t v8 = (void *)*((void *)a1 + 1);
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v8[1] - *v8) >> 4) <= a2) {
    sub_66748();
  }
  uint64_t v9 = *v8 + 176 * a2;
  uint64_t v10 = *(void *)(v9 + 24);
  unint64_t v11 = *a3;
  unint64_t v12 = (*(void *)(v9 + 32) - v10) >> 6;
  if (v12 <= *a3) {
    sub_66748();
  }
  uint64_t v13 = (void *)(v10 + (v11 << 6));
  unint64_t v14 = a3[1];
  if (0x8E38E38E38E38E39 * ((uint64_t)(v13[1] - *v13) >> 4) <= v14) {
    sub_66748();
  }
  if (!*(_DWORD *)(*v13 + 144 * v14))
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    unint64_t v17 = a3[2];
    unint64_t v18 = ((unint64_t)((((137 * v17) & 0x1FFFFFFFFFFFFFFFLL) * (unsigned __int128)0x3BCBADC7F10D148FuLL) >> 64) >> 5)
        + 1;
    while (1)
    {
      if (v16 == v12)
      {
LABEL_45:
        int v38 = (void *)*((void *)a1 + 3);
        int v39 = sub_9CD338(a2);
        uint64_t v40 = v15 - 1;
        sub_10C57DC(*(void *)(v38[13] + 8 * v39 + 8), v15 - 1, (uint64_t)v64);
        if (v64[0])
        {
          uint64_t v41 = sub_375C38(*(void **)a1);
          uint64_t v42 = sub_3757C8(*(void **)a1);
          sub_49F628(v65, v41, v42, (uint64_t)&v55);
          if (*(unsigned char *)(a4 + 80))
          {
            sub_9CD7FC(a4, (uint64_t)&v55);
            if (v60[0])
            {
              v60[1] = v60[0];
              operator delete(v60[0]);
            }
          }
          else
          {
            *(_DWORD *)a4 = v55;
            *(_OWORD *)(a4 + 8) = *(_OWORD *)__p;
            *(void *)(a4 + 24) = v57;
            __p[0] = 0;
            __p[1] = 0;
            *(_DWORD *)(a4 + 32) = v58;
            *(void *)(a4 + 40) = v59;
            *(_OWORD *)(a4 + 48) = *(_OWORD *)v60;
            *(void *)(a4 + 64) = v61;
            uint64_t v57 = 0;
            v60[0] = 0;
            v60[1] = 0;
            uint64_t v61 = 0;
            *(_WORD *)(a4 + 72) = v62;
            *(unsigned char *)(a4 + 80) = 1;
          }
          if (SHIBYTE(v57) < 0) {
            operator delete(__p[0]);
          }
        }
        long long v43 = (void *)*((void *)a1 + 3);
        uint64_t v44 = *(void *)(v43[5] + 8 * (int)sub_9CD338(a2) + 8);
        std::string v45 = (void *)*((void *)a1 + 3);
        int v46 = sub_9CD338(a2);
        sub_10C5874(v44, *(void *)(v45[13] + 8 * v46 + 8), *((void *)a1 + 2), v40, (uint64_t)&v55);
        if ((_BYTE)v55)
        {
          sub_49FC2C((uint64_t)__p, (uint64_t)v52);
          if (*(unsigned char *)(a4 + 120))
          {
            sub_9CD8A8((void **)(a4 + 88), (__n128 *)v52);
            unint64_t v49 = (void **)v52[0];
            if (v52[0])
            {
              unint64_t v50 = (void **)v52[1];
              uint64_t v51 = v52[0];
              if (v52[1] != v52[0])
              {
                do
                {
                  if (*((char *)v50 - 17) < 0) {
                    operator delete(*(v50 - 5));
                  }
                  v50 -= 6;
                }
                while (v50 != v49);
                uint64_t v51 = v52[0];
              }
              v52[1] = v49;
              operator delete(v51);
            }
          }
          else
          {
            *(_OWORD *)(a4 + 88) = *(_OWORD *)v52;
            uint64_t v47 = v53;
            uint64_t v48 = v54;
            v52[1] = 0;
            uint64_t v53 = 0;
            v52[0] = 0;
            *(void *)(a4 + 104) = v47;
            *(void *)(a4 + 112) = v48;
            *(unsigned char *)(a4 + 120) = 1;
          }
        }
        a1[4] = sub_72688((uint64_t)v63) + a1[4];
        if ((_BYTE)v55) {
          sub_151E354(__p);
        }
        if (v64[0]) {
          sub_151D1E0(v65);
        }
        return;
      }
      uint64_t v20 = (uint64_t *)(v10 + (v16 << 6));
      if (v16 == v11)
      {
        if (0x8E38E38E38E38E39 * ((v20[1] - *v20) >> 4) <= v14) {
          sub_66748();
        }
        uint64_t v21 = *(void *)(*v20 + 144 * v14 + 8);
        uint64_t v22 = v21 + 1096 * v17;
        if (v21 == v22 + 1096)
        {
          uint64_t v19 = 0;
        }
        else
        {
          if (1096 * v17 >= 0x448)
          {
            uint64_t v30 = 0;
            uint64_t v31 = 0;
            uint64_t v23 = v21 + 1096 * (v18 & 0x7FFFFFFFFFFFFELL);
            uint64_t v32 = v18 & 0x7FFFFFFFFFFFFELL;
            do
            {
              if (!*(_DWORD *)(v21 + 1088)) {
                ++v30;
              }
              if (!*(_DWORD *)(v21 + 2184)) {
                ++v31;
              }
              v21 += 2192;
              v32 -= 2;
            }
            while (v32);
            uint64_t v19 = v31 + v30;
            if (v18 == (v18 & 0x7FFFFFFFFFFFFELL)) {
              goto LABEL_7;
            }
          }
          else
          {
            uint64_t v19 = 0;
            uint64_t v23 = v21;
          }
          uint64_t v33 = v23 - 1096;
          do
          {
            if (!*(_DWORD *)(v33 + 2184)) {
              ++v19;
            }
            v33 += 1096;
          }
          while (v33 != v22);
        }
      }
      else
      {
        uint64_t v25 = *v20;
        uint64_t v24 = v20[1];
        if (v25 == v24) {
          goto LABEL_8;
        }
        while (*(_DWORD *)v25)
        {
          v25 += 144;
          if (v25 == v24) {
            goto LABEL_8;
          }
        }
        uint64_t v27 = *(void *)(v25 + 8);
        uint64_t v26 = *(void *)(v25 + 16);
        if (v27 == v26) {
          goto LABEL_8;
        }
        unint64_t v28 = v26 - v27 - 1096;
        if (v28 >= 0x448)
        {
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          unint64_t v36 = v28 / 0x448 + 1;
          uint64_t v29 = v27 + 1096 * (v36 & 0x7FFFFFFFFFFFFELL);
          uint64_t v37 = v36 & 0x7FFFFFFFFFFFFELL;
          do
          {
            if (!*(_DWORD *)(v27 + 1088)) {
              ++v34;
            }
            if (!*(_DWORD *)(v27 + 2184)) {
              ++v35;
            }
            v27 += 2192;
            v37 -= 2;
          }
          while (v37);
          uint64_t v19 = v35 + v34;
          if (v36 == (v36 & 0x7FFFFFFFFFFFFELL)) {
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v19 = 0;
          uint64_t v29 = v27;
        }
        do
        {
          if (!*(_DWORD *)(v29 + 1088)) {
            ++v19;
          }
          v29 += 1096;
        }
        while (v29 != v26);
      }
LABEL_7:
      v15 += v19;
LABEL_8:
      if (++v16 > v11) {
        goto LABEL_45;
      }
    }
  }
}

void sub_9CD280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28)
{
  if (a14)
  {
    sub_151E354(v29);
    if (!a27)
    {
LABEL_3:
      sub_928454(v28);
      _Unwind_Resume(a1);
    }
  }
  else if (!a27)
  {
    goto LABEL_3;
  }
  sub_151D1E0(&a28);
  sub_928454(v28);
  _Unwind_Resume(a1);
}

void sub_9CD310(_Unwind_Exception *a1)
{
  sub_928454(v1);
  _Unwind_Resume(a1);
}

void sub_9CD324(_Unwind_Exception *a1)
{
  sub_928454(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_9CD338(unint64_t result)
{
  unint64_t v1 = result;
  if (result >> 31)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v8, v1);
    long long v3 = std::string::insert(&v8, 0, "narrowing ");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    int v5 = std::string::append(&v9, " failed");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v5->__r_.__value_.__r.__words[2];
    long long v10 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return result;
}

void sub_9CD40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

char *sub_9CD48C(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  std::string v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)std::string v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          uint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)std::string v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    uint64_t v31 = &v54[8 * (v53 >> 2)];
    uint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      int v55 = &v54[8 * v53];
      operator delete(v30);
      uint64_t v32 = v55;
      uint64_t v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      uint64_t v35 = v31 + 8;
      unint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  uint64_t v35 = v31 + 8;
  unint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    int v39 = v9;
    unint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    int v39 = v9;
    unint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    int v39 = &v9[-v41];
    unint64_t v36 = &v31[-v41];
    uint64_t v42 = v31 - 16;
    long long v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)uint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    unint64_t v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
  }
  unint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_9CD7E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_9CD7FC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *(_OWORD *)(a2 + 8);
  *(void *)(v4 + 16) = *(void *)(a2 + 24);
  *(_OWORD *)uint64_t v4 = v5;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  unint64_t v6 = *(void **)(a1 + 48);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  if (v6)
  {
    *(void *)(a1 + 56) = v6;
    operator delete(v6);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  __n128 result = *(__n128 *)(a2 + 48);
  *(__n128 *)(a1 + 48) = result;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  return result;
}

__n128 sub_9CD8A8(void **a1, __n128 *a2)
{
  uint64_t v4 = (void **)*a1;
  if (*a1)
  {
    long long v5 = (void **)a1[1];
    unint64_t v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 17) < 0) {
          operator delete(*(v5 - 5));
        }
        v5 -= 6;
      }
      while (v5 != v4);
      unint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  a1[2] = (void *)a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a1[3] = (void *)a2[1].n128_u64[1];
  return result;
}

void sub_9CD944()
{
  unk_25DCE1F = 16641;
  word_25DCE08 = 65;
  byte_25DCE37 = 1;
  byte_25DCE21 = 0;
}

uint64_t sub_9CD96C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  uint64_t v13 = 0;
  unint64_t v14 = operator new(0x20uLL);
  long long v15 = xmmword_20B91A0;
  strcpy((char *)v14, "TransitRouteHintsAnnotation");
  int64_t v11 = 0;
  uint64_t v12 = 0;
  long long v5 = sub_374CDC(a3, (uint64_t)&v14, (uint64_t *)&v11);
  std::string __p = operator new(0x19uLL);
  long long v17 = xmmword_20B9250;
  strcpy((char *)__p, "enable_arrive_by_option");
  BOOL v6 = sub_29D62C(v5, (uint64_t)&__p);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = (void **)v11;
  if (v11)
  {
    uint64_t v8 = v12;
    std::string v9 = v11;
    if (v12 != v11)
    {
      do
      {
        if (*((char *)v8 - 1) < 0) {
          operator delete(*(v8 - 3));
        }
        v8 -= 3;
      }
      while (v8 != v7);
      std::string v9 = v11;
    }
    uint64_t v12 = v7;
    operator delete(v9);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14);
  }
  return a1;
}

void sub_9CDABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_9CDB24(uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  if (*(void **)a1 == v2) {
    return 0;
  }
  while (1)
  {
    sub_994B0C(v6, v1);
    sub_994AD8((void **)v6, v5);
    if (sub_994D74(v6, v5)) {
      break;
    }
LABEL_3:
    v1 += 390;
    if (v1 == v2) {
      return 0;
    }
  }
  while (1)
  {
    uint64_t v3 = sub_994DB0(v6);
    if (*(unsigned char *)(v3 + 2104))
    {
      if (*(unsigned char *)(v3 + 2097) == 1) {
        return 1;
      }
    }
    sub_994B7C((uint64_t)v6);
    sub_994AD8((void **)v6, v5);
    if (!sub_994D74(v6, v5)) {
      goto LABEL_3;
    }
  }
}

uint64_t sub_9CDBE4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a2 + 456) = *(unsigned char *)(result + 16);
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)a2 == v4) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = (void **)(a2 + 400);
  uint64_t v9 = *(void *)a2;
  while (1)
  {
    if (*(_DWORD *)(v9 + 1136) != 0x7FFFFFFF)
    {
      uint64_t v10 = *(unsigned __int8 *)(v9 + 1167);
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(v9 + 1152);
      }
      if (v10) {
        break;
      }
    }
    v9 += 3120;
    if (v9 == v4) {
      return result;
    }
  }
  int64_t v11 = *(unint64_t **)(v3 + 1176);
  uint64_t v12 = *(unint64_t **)(v3 + 1184);
  if (v11 != v12) {
    goto LABEL_11;
  }
  do
  {
LABEL_9:
    v3 += 3120;
    if (v3 == v4) {
      goto LABEL_49;
    }
    int64_t v11 = *(unint64_t **)(v3 + 1176);
    uint64_t v12 = *(unint64_t **)(v3 + 1184);
  }
  while (v11 == v12);
  while (1)
  {
LABEL_11:
    unint64_t v13 = *v11;
    uint64_t v14 = sub_3757C8(*(void **)(v7 + 8));
    long long v15 = (int *)sub_2A4F60(v14, v13, 0, "payment_method");
    unsigned int v16 = 0;
    long long v17 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v17 < 9u) {
      goto LABEL_14;
    }
    uint64_t v18 = v17[4];
    if (!v18) {
      break;
    }
    unsigned int v16 = *((unsigned __int8 *)v15 + v18);
LABEL_14:
    if (sub_97CB58(v16)) {
      goto LABEL_18;
    }
LABEL_15:
    if (++v11 == v12) {
      goto LABEL_9;
    }
  }
  if ((sub_97CB58(0) & 1) == 0) {
    goto LABEL_15;
  }
LABEL_18:
  uint64_t v20 = *(unsigned char **)(a2 + 408);
  unint64_t v19 = *(void *)(a2 + 416);
  if ((unint64_t)v20 < v19)
  {
    unsigned char *v20 = 1;
    uint64_t v21 = (uint64_t)(v20 + 1);
    goto LABEL_48;
  }
  uint64_t v22 = *v8;
  unint64_t v23 = v20 - (unsigned char *)*v8;
  unint64_t v24 = v23 + 1;
  if ((uint64_t)(v23 + 1) < 0) {
    sub_2E00();
  }
  unint64_t v25 = v19 - (void)v22;
  if (2 * v25 > v24) {
    unint64_t v24 = 2 * v25;
  }
  if (v25 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v26 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v26 = v24;
  }
  if (v26) {
    uint64_t v27 = (char *)operator new(v26);
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v28 = &v27[v23];
  unint64_t v29 = &v27[v26];
  v27[v23] = 1;
  uint64_t v21 = (uint64_t)&v27[v23 + 1];
  if (v20 != v22)
  {
    if (v23 >= 8 && (unint64_t)(v22 - v27) >= 0x20)
    {
      if (v23 >= 0x20)
      {
        unint64_t v30 = v23 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v31 = (long long *)(v20 - 16);
        uint64_t v32 = &v27[v20 - 16 - v22];
        unint64_t v33 = v23 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v34 = *v31;
          *((_OWORD *)v32 - 1) = *(v31 - 1);
          *(_OWORD *)uint64_t v32 = v34;
          v32 -= 32;
          v31 -= 2;
          v33 -= 32;
        }
        while (v33);
        if (v23 == v30) {
          goto LABEL_45;
        }
        if ((v23 & 0x18) != 0) {
          goto LABEL_38;
        }
        v28 -= v30;
        v20 -= v30;
      }
      else
      {
        unint64_t v30 = 0;
LABEL_38:
        v28 -= v23 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v35 = &v20[-v30 - 8];
        int64_t v36 = v35 - v22;
        unint64_t v37 = v30 - (v23 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v38 = *(void *)v35;
          v35 -= 8;
          *(void *)&v27[v36] = v38;
          v36 -= 8;
          v37 += 8;
        }
        while (v37);
        v20 -= v23 & 0xFFFFFFFFFFFFFFF8;
        if (v23 == (v23 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_45:
          uint64_t v28 = v27;
          goto LABEL_46;
        }
      }
    }
    int v39 = v28 - 1;
    do
    {
      char v40 = *--v20;
      *v39-- = v40;
    }
    while (v20 != v22);
    goto LABEL_45;
  }
LABEL_46:
  *(void *)(a2 + 400) = v28;
  *(void *)(a2 + 408) = v21;
  *(void *)(a2 + 416) = v29;
  if (v22) {
    operator delete(v22);
  }
LABEL_48:
  *(void *)(a2 + 408) = v21;
LABEL_49:
  __n128 result = sub_9CDB24(a2);
  if (result)
  {
    *(_DWORD *)(a2 + 448) = *(unsigned __int8 *)(a3 + 1185);
    uint64_t v41 = *(void *)v7;
    std::string __p = operator new(0x20uLL);
    long long v58 = xmmword_20B9800;
    strcpy((char *)__p, "Route_Option_Surcharge_Default");
    uint64_t v42 = sub_8D7730(v41, (uint64_t)&__p);
    if (SHIBYTE(v58) < 0) {
      operator delete(__p);
    }
    v59[0] = 0;
    sub_5F3D48((uint64_t)&__p, (uint64_t)v42);
    long long v43 = *(_DWORD **)(a2 + 432);
    if ((unint64_t)v43 >= *(void *)(a2 + 440))
    {
      uint64_t v44 = sub_9CE1BC((void **)(a2 + 424), v59, (uint64_t)&__p);
    }
    else
    {
      _DWORD *v43 = v59[0];
      sub_4F58AC((uint64_t)(v43 + 2), (uint64_t)&__p);
      uint64_t v44 = (char *)(v43 + 42);
      *(void *)(a2 + 432) = v43 + 42;
    }
    *(void *)(a2 + 432) = v44;
    sub_4D4B58((uint64_t)&__p);
    uint64_t v45 = *(void *)v7;
    std::string __p = operator new(0x28uLL);
    long long v58 = xmmword_20B93A0;
    strcpy((char *)__p, "Route_Option_Surcharge_Non_Reserved");
    uint64_t v46 = sub_8D7730(v45, (uint64_t)&__p);
    if (SHIBYTE(v58) < 0) {
      operator delete(__p);
    }
    v59[0] = 2;
    sub_5F3D48((uint64_t)&__p, (uint64_t)v46);
    uint64_t v47 = *(_DWORD **)(a2 + 432);
    if ((unint64_t)v47 >= *(void *)(a2 + 440))
    {
      int64_t v48 = sub_9CE1BC((void **)(a2 + 424), v59, (uint64_t)&__p);
    }
    else
    {
      *uint64_t v47 = v59[0];
      sub_4F58AC((uint64_t)(v47 + 2), (uint64_t)&__p);
      int64_t v48 = (char *)(v47 + 42);
      *(void *)(a2 + 432) = v47 + 42;
    }
    *(void *)(a2 + 432) = v48;
    sub_4D4B58((uint64_t)&__p);
    uint64_t v49 = *(void *)v7;
    std::string __p = operator new(0x20uLL);
    long long v58 = xmmword_20B8E90;
    strcpy((char *)__p, "Route_Option_Surcharge_Reserved");
    size_t v50 = sub_8D7730(v49, (uint64_t)&__p);
    if (SHIBYTE(v58) < 0) {
      operator delete(__p);
    }
    v59[0] = 1;
    sub_5F3D48((uint64_t)&__p, (uint64_t)v50);
    uint64_t v51 = *(_DWORD **)(a2 + 432);
    if ((unint64_t)v51 >= *(void *)(a2 + 440))
    {
      unint64_t v52 = sub_9CE1BC((void **)(a2 + 424), v59, (uint64_t)&__p);
    }
    else
    {
      _DWORD *v51 = v59[0];
      sub_4F58AC((uint64_t)(v51 + 2), (uint64_t)&__p);
      unint64_t v52 = (char *)(v51 + 42);
      *(void *)(a2 + 432) = v51 + 42;
    }
    *(void *)(a2 + 432) = v52;
    sub_4D4B58((uint64_t)&__p);
    uint64_t v53 = *(void *)v7;
    std::string __p = operator new(0x20uLL);
    long long v58 = xmmword_20B91B0;
    strcpy((char *)__p, "Route_Option_Surcharge_Green");
    uint64_t v54 = sub_8D7730(v53, (uint64_t)&__p);
    if (SHIBYTE(v58) < 0) {
      operator delete(__p);
    }
    v59[0] = 3;
    sub_5F3D48((uint64_t)&__p, (uint64_t)v54);
    int v55 = *(_DWORD **)(a2 + 432);
    if ((unint64_t)v55 >= *(void *)(a2 + 440))
    {
      uint64_t v56 = sub_9CE1BC((void **)(a2 + 424), v59, (uint64_t)&__p);
    }
    else
    {
      *int v55 = v59[0];
      sub_4F58AC((uint64_t)(v55 + 2), (uint64_t)&__p);
      uint64_t v56 = (char *)(v55 + 42);
      *(void *)(a2 + 432) = v55 + 42;
    }
    *(void *)(a2 + 432) = v56;
    return sub_4D4B58((uint64_t)&__p);
  }
  return result;
}

void sub_9CE180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_9CE1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_9CE1BC(void **a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v4 = 0xCF3CF3CF3CF3CF3DLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x186186186186186) {
    sub_2E00();
  }
  if (0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v5) {
    unint64_t v5 = 0x9E79E79E79E79E7ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xCF3CF3CF3CF3CF3DLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0xC30C30C30C30C3) {
    unint64_t v8 = 0x186186186186186;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0x186186186186186) {
      sub_188D718();
    }
    uint64_t v9 = (char *)operator new(168 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t v23 = &v9[168 * v4];
  unint64_t v24 = &v9[168 * v8];
  *(_DWORD *)unint64_t v23 = *a2;
  sub_4F58AC((uint64_t)(v23 + 8), a3);
  uint64_t v10 = v23 + 168;
  uint64_t v12 = (char *)*a1;
  int64_t v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v23;
    a1[1] = v10;
    a1[2] = v24;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = &v23[v13];
      long long v15 = &v11[v13];
      int v16 = *(_DWORD *)&v11[v13 - 168];
      *((void *)v14 - 20) = 0;
      *((_DWORD *)v14 - 42) = v16;
      *(_OWORD *)(v14 - 152) = 0uLL;
      *((_OWORD *)v14 - 10) = *(_OWORD *)&v11[v13 - 160];
      *((void *)v14 - 18) = *(void *)&v11[v13 - 144];
      *((void *)v15 - 18) = 0;
      *((_OWORD *)v15 - 10) = 0uLL;
      *((void *)v14 - 15) = 0;
      *(_OWORD *)(v14 - 136) = 0uLL;
      *(_OWORD *)(v14 - 136) = *(_OWORD *)&v11[v13 - 136];
      *((void *)v14 - 15) = *(void *)&v11[v13 - 120];
      *((void *)v15 - 15) = 0;
      *(_OWORD *)(v15 - 136) = 0uLL;
      *((void *)v14 - 12) = 0;
      *((_OWORD *)v14 - 7) = 0uLL;
      *((_OWORD *)v14 - 7) = *(_OWORD *)&v11[v13 - 112];
      *((void *)v14 - 12) = *(void *)&v11[v13 - 96];
      *((void *)v15 - 12) = 0;
      *((_OWORD *)v15 - 7) = 0uLL;
      *((void *)v14 - 9) = 0;
      *(_OWORD *)(v14 - 88) = 0uLL;
      *(_OWORD *)(v14 - 88) = *(_OWORD *)&v11[v13 - 88];
      *((void *)v14 - 9) = *(void *)&v11[v13 - 72];
      *(_OWORD *)(v15 - 88) = 0uLL;
      uint64_t v17 = *(void *)&v11[v13 - 64];
      *(_OWORD *)(v15 - 72) = 0uLL;
      *((void *)v14 - 8) = v17;
      LODWORD(v17) = *(_DWORD *)&v11[v13 - 56];
      *(v14 - 52) = v11[v13 - 52];
      *((_DWORD *)v14 - 14) = v17;
      long long v18 = *(_OWORD *)&v11[v13 - 48];
      *((void *)v14 - 4) = *(void *)&v11[v13 - 32];
      *((_OWORD *)v14 - 3) = v18;
      *((void *)v15 - 5) = 0;
      *((void *)v15 - 4) = 0;
      *((void *)v15 - 6) = 0;
      long long v19 = *(_OWORD *)&v11[v13 - 24];
      *((void *)v14 - 1) = *(void *)&v11[v13 - 8];
      *(_OWORD *)(v14 - 24) = v19;
      *((void *)v15 - 2) = 0;
      *((void *)v15 - 1) = 0;
      *((void *)v15 - 3) = 0;
      v13 -= 168;
    }
    while (&v11[v13] != v12);
    uint64_t v20 = (char *)*a1;
    int64_t v11 = (char *)a1[1];
    *a1 = &v23[v13];
    a1[1] = v10;
    a1[2] = v24;
    if (v11 != v20)
    {
      do
      {
        uint64_t v21 = v11 - 168;
        sub_4D4B58((uint64_t)(v11 - 160));
        int64_t v11 = v21;
      }
      while (v21 != v20);
      int64_t v11 = v20;
    }
  }
  if (v11) {
    operator delete(v11);
  }
  return v23 + 168;
}

void sub_9CE42C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9CE440((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9CE440(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 168;
    sub_4D4B58(i - 160);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double sub_9CE498()
{
  byte_25DCE4F = 1;
  word_25DCE38 = 65;
  byte_25DCE67 = 1;
  word_25DCE50 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DCEF8 = 0u;
  *(_OWORD *)&qword_25DCF08 = 0u;
  dword_25DCF18 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DCEF8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DCEF8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DCEF8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DCEF8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DCE7F = 8;
  strcpy((char *)&qword_25DCE68, "any_mode");
  byte_25DCE97 = 7;
  strcpy((char *)&dword_25DCE80, "cycling");
  byte_25DCEAF = 7;
  strcpy((char *)&dword_25DCE98, "driving");
  byte_25DCEC7 = 7;
  strcpy((char *)&dword_25DCEB0, "walking");
  qword_25DCED0 = 0;
  qword_25DCED8 = 0;
  qword_25DCEC8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DCEC8 = (uint64_t)v0;
  qword_25DCED0 = (uint64_t)(v0 + 9);
  qword_25DCED8 = (uint64_t)(v0 + 9);
  qword_25DCEE0 = 0;
  qword_25DCEE8 = 0;
  unk_25DCEF0 = 0;
  unint64_t v1 = (char *)operator new(9uLL);
  qword_25DCEE8 = (uint64_t)(v1 + 9);
  unk_25DCEF0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)unint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DCEE0 = (uint64_t)v1;
  return result;
}

void sub_9CE760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DCF08) {
    sub_20AD648((void **)qword_25DCF08);
  }
  unint64_t v37 = (void *)xmmword_25DCEF8;
  *(void *)&xmmword_25DCEF8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_9CE800(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void sub_9CE80C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 != a2[1])
  {
    uint64_t v4 = *(void *)(v2 + 8);
    uint64_t v3 = *(void *)(v2 + 16);
    if (v4 != v3 && *(_DWORD *)(v3 - 5704) == 4)
    {
      sub_9CE90C(a2, (uint64_t)&__p);
      int v8 = v15;
      if (v15)
      {
        do
        {
          if (v8[6] - v8[5] >= 0x10uLL) {
            sub_9CEB70(a1, (uint64_t)(v8 + 5), a2, v7);
          }
          int v8 = (void *)*v8;
        }
        while (v8);
        uint64_t v9 = v15;
        if (v15)
        {
          do
          {
            int v11 = (void *)*v9;
            uint64_t v12 = (void *)v9[5];
            if (v12)
            {
              v9[6] = v12;
              operator delete(v12);
            }
            char v13 = (void *)v9[2];
            if (v13)
            {
              v9[3] = v13;
              operator delete(v13);
            }
            operator delete(v9);
            uint64_t v9 = v11;
          }
          while (v11);
        }
      }
      char v10 = __p;
      std::string __p = 0;
      if (v10) {
        operator delete(v10);
      }
    }
  }
}

void sub_9CE8F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9CF670((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9CE90C(void *a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v2 = a1[1] - *a1;
  if (v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0x4EC4EC4EC4EC4EC5 * (v2 >> 3);
    while (1)
    {
      sub_9CF6EC(*a1 + 104 * v4, (char **)__p);
      uint64_t v28 = __p;
      BOOL v6 = sub_9CFBB4(a2, (uint64_t **)__p, (uint64_t)&unk_20F06E0, (uint64_t *)&v28);
      int v8 = (char *)v6[6];
      unint64_t v7 = v6[7];
      if ((unint64_t)v8 >= v7) {
        break;
      }
      *(void *)int v8 = v4;
      uint64_t v9 = (uint64_t)(v8 + 8);
LABEL_25:
      v6[6] = v9;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (++v4 == v5) {
        return;
      }
    }
    char v10 = (char *)v6[5];
    uint64_t v11 = (v8 - v10) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_188D718();
      }
      long long v15 = operator new(8 * v14);
      int v16 = &v15[8 * v11];
      *int v16 = v4;
      uint64_t v9 = (uint64_t)(v16 + 1);
      if (v8 == v10) {
        goto LABEL_23;
      }
    }
    else
    {
      long long v15 = 0;
      int v16 = (void *)(8 * v11);
      *(void *)(8 * v11) = v4;
      uint64_t v9 = 8 * v11 + 8;
      if (v8 == v10)
      {
LABEL_23:
        v6[5] = v16;
        v6[6] = v9;
        v6[7] = &v15[8 * v14];
        if (v10) {
          operator delete(v10);
        }
        goto LABEL_25;
      }
    }
    unint64_t v17 = v8 - 8 - v10;
    if (v17 < 0x58) {
      goto LABEL_32;
    }
    if ((unint64_t)(v10 - v15) < 0x20) {
      goto LABEL_32;
    }
    uint64_t v18 = (v17 >> 3) + 1;
    uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v20 = &v8[-v19];
    int v16 = (void *)((char *)v16 - v19);
    uint64_t v21 = &v15[8 * v11 - 16];
    uint64_t v22 = v8 - 16;
    uint64_t v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *uint64_t v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    int v8 = v20;
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_32:
      do
      {
        uint64_t v25 = *((void *)v8 - 1);
        v8 -= 8;
        *--int v16 = v25;
      }
      while (v8 != v10);
    }
    goto LABEL_23;
  }
}

void sub_9CEB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  sub_9CF670(a9);
  _Unwind_Resume(a1);
}

void sub_9CEB70(uint64_t a1, uint64_t a2, uint64_t *a3, __n128 a4)
{
  uint64_t v146 = 0;
  uint64_t v147 = 0;
  unint64_t v148 = 0;
  uint64_t v4 = *(void **)a2;
  uint64_t v139 = *(void **)(a2 + 8);
  if (*(void **)a2 == v139)
  {
    int v63 = 0;
    char v81 = 0;
    std::string __p = 0;
    uint64_t v144 = 0;
    uint64_t v145 = 0;
    goto LABEL_118;
  }
  do
  {
    uint64_t v6 = *v4;
    uint64_t v7 = *a3;
    int v8 = v147;
    uint64_t v141 = v4;
    if ((unint64_t)v147 >= v148)
    {
      uint64_t v9 = sub_3B3B0((char **)&v146);
    }
    else
    {
      *(void *)uint64_t v147 = 0;
      *((void *)v8 + 1) = 0;
      uint64_t v9 = v8 + 24;
      *((void *)v8 + 2) = 0;
    }
    uint64_t v147 = v9;
    uint64_t v10 = v7 + 104 * v6;
    uint64_t v11 = *(void *)(v10 + 8);
    uint64_t v12 = *(void *)(v10 + 16);
    if (v11 != v12)
    {
      unint64_t v13 = 0;
      uint64_t v14 = -1;
      do
      {
        if (*(_DWORD *)v11 != 3) {
          goto LABEL_12;
        }
        if (v14 == -1)
        {
          if (!*(unsigned char *)(v11 + 792))
          {
LABEL_181:
            exception = __cxa_allocate_exception(8uLL);
            void *exception = &off_2439078;
          }
        }
        else
        {
          if (!*(unsigned char *)(v11 + 792)) {
            goto LABEL_181;
          }
          if (v14 == *(void *)(v11 + 752)) {
            goto LABEL_11;
          }
        }
        uint64_t v14 = *(void *)(v11 + 752);
        uint64_t v15 = *(void *)(*(void *)(a1 + 8) + 72) + 696 * v14;
        if (*(unsigned char *)(v15 + 641) && (uint64_t v32 = (unsigned char *)(v15 + 640), *v32))
        {
          unint64_t v33 = sub_969500(*(uint64_t **)a1, v11, *v32);
          uint64_t v34 = *(void *)(a1 + 16);
          unint64_t v35 = sub_8FC520(v34 + 24, (uint64_t)v33);
          uint64_t v136 = (uint64_t *)v34;
          int8x8_t v36 = *(int8x8_t *)(v34 + 8);
          if (v36)
          {
            unint64_t v37 = v35;
            uint8x8_t v38 = (uint8x8_t)vcnt_s8(v36);
            v38.i16[0] = vaddlv_u8(v38);
            if (v38.u32[0] > 1uLL)
            {
              unint64_t v39 = v35;
              char v40 = v136;
              if (v35 >= *(void *)&v36) {
                unint64_t v39 = v35 % *(void *)&v36;
              }
            }
            else
            {
              unint64_t v39 = (*(void *)&v36 - 1) & v35;
              char v40 = v136;
            }
            uint64_t v41 = *(void **)(*v40 + 8 * v39);
            if (v41)
            {
              uint64_t v42 = (void *)*v41;
              if (*v41)
              {
                unint64_t v133 = v39;
                if (v38.u32[0] < 2uLL)
                {
                  uint64_t v43 = *(void *)&v36 - 1;
                  while (1)
                  {
                    uint64_t v46 = v42[1];
                    if (v46 == v37)
                    {
                      char v47 = sub_4F3B98((uint64_t)(v42 + 2), (uint64_t)v33);
                      unint64_t v39 = v133;
                      if (v47) {
                        goto LABEL_58;
                      }
                    }
                    else if ((v46 & v43) != v39)
                    {
                      goto LABEL_59;
                    }
                    uint64_t v42 = (void *)*v42;
                    if (!v42) {
                      goto LABEL_59;
                    }
                  }
                }
                do
                {
                  unint64_t v44 = v42[1];
                  if (v44 == v37)
                  {
                    char v45 = sub_4F3B98((uint64_t)(v42 + 2), (uint64_t)v33);
                    unint64_t v39 = v133;
                    if (v45)
                    {
LABEL_58:
                      int64_t v48 = (void *)v42[16];
                      goto LABEL_63;
                    }
                  }
                  else
                  {
                    if (v44 >= *(void *)&v36) {
                      v44 %= *(void *)&v36;
                    }
                    if (v44 != v39) {
                      break;
                    }
                  }
                  uint64_t v42 = (void *)*v42;
                }
                while (v42);
              }
            }
          }
LABEL_59:
          unint64_t v49 = v136[6];
          unint64_t v50 = v136[7];
          std::string __p = (void *)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v49 - v136[5]) >> 4));
          if (v49 >= v50)
          {
            uint64_t v51 = sub_966000(v136 + 5, (uint64_t)v33);
          }
          else
          {
            sub_4F57A0(v49, (uint64_t)v33);
            uint64_t v51 = v49 + 112;
            v136[6] = v49 + 112;
          }
          v136[6] = v51;
          sub_966360((uint64_t)v136, (uint64_t)v33, (uint64_t)v33, &__p);
          int64_t v48 = __p;
LABEL_63:
          int v16 = v147;
          uint64_t v18 = (__n128 *)*((void *)v147 - 2);
          unint64_t v52 = *((void *)v147 - 1);
          if ((unint64_t)v18 < v52)
          {
            v18->n128_u64[0] = v13;
            v18->n128_u64[1] = (unint64_t)v48;
            goto LABEL_22;
          }
          uint64_t v21 = (__n128 *)*((void *)v147 - 3);
          uint64_t v53 = v18 - v21;
          unint64_t v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 60) {
            sub_2E00();
          }
          unint64_t v137 = v48;
          uint64_t v55 = v52 - (void)v21;
          if (v55 >> 3 > v54) {
            unint64_t v54 = v55 >> 3;
          }
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
          }
          if (v54 >> 60) {
            sub_188D718();
          }
          unint64_t v134 = v54;
          uint64_t v56 = (char *)operator new(16 * v54);
          uint64_t v57 = &v56[16 * v53];
          *(void *)uint64_t v57 = v13;
          *((void *)v57 + 1) = v137;
          if (v18 == v21)
          {
            unint64_t v60 = &v56[16 * v53];
            unint64_t v59 = v134;
          }
          else
          {
            long long v58 = (__n128 *)&v56[16 * v53];
            unint64_t v59 = v134;
            do
            {
              a4 = v18[-1];
              unint64_t v60 = (char *)&v58[-1];
              v58[-1] = a4;
              --v18;
              --v58;
            }
            while (v18 != v21);
          }
          uint64_t v19 = (__n128 *)(v57 + 16);
          *((void *)v16 - 3) = v60;
          *((void *)v16 - 2) = v57 + 16;
          *((void *)v16 - 1) = &v56[16 * v59];
          if (!v21) {
            goto LABEL_10;
          }
        }
        else
        {
          int v16 = v147;
          uint64_t v18 = (__n128 *)*((void *)v147 - 2);
          unint64_t v17 = *((void *)v147 - 1);
          if ((unint64_t)v18 < v17)
          {
            v18->n128_u64[0] = v13;
            v18->n128_u64[1] = -1;
LABEL_22:
            uint64_t v19 = v18 + 1;
            goto LABEL_10;
          }
          uint64_t v20 = a1;
          uint64_t v21 = (__n128 *)*((void *)v147 - 3);
          uint64_t v22 = v18 - v21;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 60) {
            sub_2E00();
          }
          uint64_t v24 = v17 - (void)v21;
          if (v24 >> 3 > v23) {
            unint64_t v23 = v24 >> 3;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25 >> 60) {
            sub_188D718();
          }
          size_t v26 = (char *)operator new(16 * v25);
          uint64_t v27 = &v26[16 * v22];
          *(void *)uint64_t v27 = v13;
          *((void *)v27 + 1) = -1;
          if (v18 == v21)
          {
            a1 = v20;
            uint64_t v31 = &v26[16 * v25];
            uint64_t v19 = (__n128 *)(v27 + 16);
            *((void *)v16 - 3) = v27;
            *((void *)v16 - 2) = v27 + 16;
            *((void *)v16 - 1) = v31;
            if (!v21) {
              goto LABEL_10;
            }
          }
          else
          {
            uint64_t v28 = (__n128 *)&v26[16 * v22];
            a1 = v20;
            do
            {
              a4 = v18[-1];
              unint64_t v29 = (char *)&v28[-1];
              v28[-1] = a4;
              --v18;
              --v28;
            }
            while (v18 != v21);
            unint64_t v30 = &v26[16 * v25];
            uint64_t v19 = (__n128 *)(v27 + 16);
            *((void *)v16 - 3) = v29;
            *((void *)v16 - 2) = v27 + 16;
            *((void *)v16 - 1) = v30;
            if (!v21) {
              goto LABEL_10;
            }
          }
        }
        operator delete(v21);
LABEL_10:
        *((void *)v16 - 2) = v19;
LABEL_11:
        ++v13;
LABEL_12:
        v11 += 5704;
      }
      while (v11 != v12);
    }
    uint64_t v4 = v141 + 1;
  }
  while (v141 + 1 != v139);
  uint64_t v61 = (char *)v146;
  __int16 v62 = v147;
  std::string __p = 0;
  uint64_t v144 = 0;
  uint64_t v145 = 0;
  if (v146 == v147)
  {
    int v63 = 0;
    char v81 = 0;
  }
  else
  {
    int v63 = 0;
    unint64_t v64 = 0;
    do
    {
      long long v65 = *(void **)v61;
      uint64_t v66 = (void *)*((void *)v61 + 1);
      while (v65 != v66)
      {
        long long v67 = (char *)__p;
        if (__p != v64)
        {
          unint64_t v68 = (char *)__p;
          while (*v65 != *(void *)v68)
          {
            v68 += 32;
            if (v68 == v64) {
              goto LABEL_83;
            }
          }
          unint64_t v64 = v68;
        }
LABEL_83:
        if (v64 == v63)
        {
          if (v63 >= v145)
          {
            uint64_t v70 = (v63 - (unsigned char *)__p) >> 5;
            unint64_t v71 = v70 + 1;
            if ((unint64_t)(v70 + 1) >> 59) {
              sub_2E00();
            }
            uint64_t v72 = v145 - (unsigned char *)__p;
            if ((v145 - (unsigned char *)__p) >> 4 > v71) {
              unint64_t v71 = v72 >> 4;
            }
            if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v73 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v73 = v71;
            }
            if (v73)
            {
              if (v73 >> 59) {
                sub_188D718();
              }
              float64x2_t v74 = (char *)operator new(32 * v73);
            }
            else
            {
              float64x2_t v74 = 0;
            }
            uint64_t v75 = &v74[32 * v70];
            *(void *)uint64_t v75 = *v65;
            *((void *)v75 + 1) = 0;
            *((void *)v75 + 2) = 0;
            *((void *)v75 + 3) = 0;
            uint64_t v69 = v75 + 32;
            if (v63 == v67)
            {
              std::string __p = v75;
              uint64_t v144 = v75 + 32;
              uint64_t v145 = &v74[32 * v73];
            }
            else
            {
              uint64_t v76 = 0;
              do
              {
                uint64_t v77 = &v75[v76];
                unsigned __int8 v78 = &v63[v76];
                *((void *)v77 - 4) = *(void *)&v63[v76 - 32];
                *((void *)v77 - 2) = 0;
                *((void *)v77 - 1) = 0;
                a4 = *(__n128 *)&v63[v76 - 24];
                *(__n128 *)(v77 - 24) = a4;
                *((void *)v77 - 1) = *(void *)&v63[v76 - 8];
                *((void *)v78 - 3) = 0;
                *((void *)v78 - 2) = 0;
                *((void *)v78 - 1) = 0;
                v76 -= 32;
              }
              while (&v63[v76] != v67);
              int v63 = (char *)__p;
              char v79 = v144;
              std::string __p = &v75[v76];
              uint64_t v144 = v75 + 32;
              uint64_t v145 = &v74[32 * v73];
              while (v79 != v63)
              {
                uint64_t v80 = (void *)*((void *)v79 - 3);
                if (v80)
                {
                  *((void *)v79 - 2) = v80;
                  operator delete(v80);
                }
                v79 -= 32;
              }
            }
            if (v63) {
              operator delete(v63);
            }
          }
          else
          {
            *(void *)int v63 = *v65;
            *((void *)v63 + 1) = 0;
            *((void *)v63 + 2) = 0;
            *((void *)v63 + 3) = 0;
            uint64_t v69 = v63 + 32;
          }
          uint64_t v144 = v69;
          int v63 = v69;
        }
        v65 += 2;
        unint64_t v64 = v63;
      }
      v61 += 24;
    }
    while (v61 != v62);
    char v81 = (char *)__p;
  }
LABEL_118:
  unint64_t v82 = 126 - 2 * __clz((v63 - v81) >> 5);
  if (v63 == v81) {
    uint64_t v83 = 0;
  }
  else {
    uint64_t v83 = v82;
  }
  sub_9D00B8((unint64_t)v81, (unint64_t)v63, v83, 1, a4);
  uint64_t v86 = (char *)v146;
  char v85 = v147;
  uint64_t v131 = v147;
  while (2)
  {
    if (v86 != v85)
    {
      uint64_t v87 = *((void *)v86 + 1);
      uint64_t v88 = v87 - *(void *)v86;
      if (v87 == *(void *)v86)
      {
LABEL_122:
        v86 += 24;
        char v85 = v131;
        continue;
      }
      uint64_t v89 = 0;
      uint64_t v90 = v88 >> 4;
      uint64_t v135 = v88 >> 4;
      int v138 = v86;
      while (2)
      {
        uint64_t v92 = *(void *)v86;
        int v142 = (void *)(*(void *)v86 + 16 * v89 + 8);
        if (*v142 == -1)
        {
          uint64_t v91 = v89 + 1;
          goto LABEL_127;
        }
        uint64_t v91 = v89 + 1;
        if (v89 + 1 >= (unint64_t)((*((void *)v86 + 1) - v92) >> 4))
        {
          unint64_t v93 = -1;
          uint64_t v95 = (unint64_t *)__p;
          uint64_t v94 = (unint64_t *)v144;
          if (__p == v144) {
            goto LABEL_127;
          }
        }
        else
        {
          unint64_t v93 = *(void *)(v92 + 16 * v91) - 1;
          uint64_t v95 = (unint64_t *)__p;
          uint64_t v94 = (unint64_t *)v144;
          if (__p == v144) {
            goto LABEL_127;
          }
        }
        uint64_t v140 = v89 + 1;
        unint64_t v96 = *(void *)(v92 + 16 * v89);
        do
        {
          if (*v95 >= v96 && *v95 <= v93)
          {
            uint64_t v100 = (char *)v95[2];
            unint64_t v99 = v95[3];
            if ((unint64_t)v100 < v99)
            {
              *(void *)uint64_t v100 = *v142;
              uint64_t v97 = v100 + 8;
            }
            else
            {
              long long v101 = (char *)v95[1];
              uint64_t v102 = (v100 - v101) >> 3;
              unint64_t v103 = v102 + 1;
              if ((unint64_t)(v102 + 1) >> 61) {
                sub_2E00();
              }
              uint64_t v104 = v99 - (void)v101;
              if (v104 >> 2 > v103) {
                unint64_t v103 = v104 >> 2;
              }
              if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v105 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v105 = v103;
              }
              if (v105)
              {
                if (v105 >> 61) {
                  sub_188D718();
                }
                uint64_t v84 = operator new(8 * v105);
              }
              else
              {
                uint64_t v84 = 0;
              }
              unint64_t v106 = &v84[8 * v102];
              void *v106 = *v142;
              uint64_t v97 = v106 + 1;
              if (v100 != v101)
              {
                unint64_t v107 = v100 - 8 - v101;
                if (v107 < 0x58) {
                  goto LABEL_192;
                }
                if ((unint64_t)(v101 - v84) < 0x20) {
                  goto LABEL_192;
                }
                uint64_t v108 = (v107 >> 3) + 1;
                uint64_t v109 = 8 * (v108 & 0x3FFFFFFFFFFFFFFCLL);
                unint64_t v110 = &v100[-v109];
                unint64_t v106 = (void *)((char *)v106 - v109);
                uint64_t v111 = &v84[8 * v102 - 16];
                unint64_t v112 = v100 - 16;
                uint64_t v113 = v108 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v114 = *(_OWORD *)v112;
                  *(v111 - 1) = *((_OWORD *)v112 - 1);
                  *uint64_t v111 = v114;
                  v111 -= 2;
                  v112 -= 32;
                  v113 -= 4;
                }
                while (v113);
                uint64_t v100 = v110;
                if (v108 != (v108 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_192:
                  do
                  {
                    uint64_t v115 = *((void *)v100 - 1);
                    v100 -= 8;
                    *--unint64_t v106 = v115;
                  }
                  while (v100 != v101);
                }
              }
              v95[1] = (unint64_t)v106;
              v95[2] = (unint64_t)v97;
              v95[3] = (unint64_t)&v84[8 * v105];
              if (v101) {
                operator delete(v101);
              }
            }
            v95[2] = (unint64_t)v97;
          }
          v95 += 4;
        }
        while (v95 != v94);
        uint64_t v90 = v135;
        uint64_t v86 = v138;
        uint64_t v91 = v140;
LABEL_127:
        uint64_t v89 = v91;
        if (v91 == v90) {
          goto LABEL_122;
        }
        continue;
      }
    }
    break;
  }
  sub_9CF920((uint64_t)v84, (uint64_t *)&__p);
  unint64_t v117 = *(void **)a2;
  unint64_t v118 = *(void **)(a2 + 8);
  if (*(void **)a2 != v118)
  {
    do
      sub_9CFA48(v116, &__p, *a3 + 104 * *v117++);
    while (v117 != v118);
  }
  uint64_t v119 = (char *)__p;
  if (__p)
  {
    unint64_t v120 = v144;
    int v121 = __p;
    if (v144 != __p)
    {
      do
      {
        uint64_t v122 = (void *)*((void *)v120 - 3);
        if (v122)
        {
          *((void *)v120 - 2) = v122;
          operator delete(v122);
        }
        v120 -= 32;
      }
      while (v120 != v119);
      int v121 = __p;
    }
    uint64_t v144 = v119;
    operator delete(v121);
  }
  int v123 = (char *)v146;
  if (v146)
  {
    char v124 = v147;
    int v125 = v146;
    if (v147 != v146)
    {
      unint64_t v126 = v147;
      do
      {
        uint64_t v128 = (void *)*((void *)v126 - 3);
        v126 -= 24;
        unint64_t v127 = v128;
        if (v128)
        {
          *((void *)v124 - 2) = v127;
          operator delete(v127);
        }
        char v124 = v126;
      }
      while (v126 != v123);
      int v125 = v146;
    }
    uint64_t v147 = v123;
    operator delete(v125);
  }
}

void sub_9CF560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_9CF574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  *(void *)(v12 + 48) = v13;
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_9CF58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_9CF5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_9CF5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_9CF5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_9CF5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_9CF5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void *);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_38358((void **)va);
  sub_36094((void **)va1);
  _Unwind_Resume(a1);
}

void sub_9CF65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9CF670(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (void *)v2[5];
      if (v6)
      {
        v2[6] = v6;
        operator delete(v6);
      }
      uint64_t v7 = (void *)v2[2];
      if (v7)
      {
        v2[3] = v7;
        operator delete(v7);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void sub_9CF6EC(uint64_t a1@<X1>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    while (1)
    {
      if (*(_DWORD *)v2 != 3) {
        goto LABEL_5;
      }
      if (v7 >= v6) {
        break;
      }
      *(void *)uint64_t v7 = *(void *)(v2 + 1896);
      uint64_t v8 = (uint64_t)(v7 + 8);
LABEL_4:
      a2[1] = (char *)v8;
      uint64_t v7 = (char *)v8;
LABEL_5:
      v2 += 5704;
      if (v2 == v3) {
        return;
      }
    }
    uint64_t v9 = (v7 - v5) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_2E00();
    }
    if ((v6 - v5) >> 2 > v10) {
      unint64_t v10 = (v6 - v5) >> 2;
    }
    if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_188D718();
      }
      uint64_t v12 = operator new(8 * v11);
      uint64_t v13 = &v12[8 * v9];
      *(void *)uint64_t v13 = *(void *)(v2 + 1896);
      uint64_t v8 = (uint64_t)(v13 + 8);
      if (v7 == v5) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = (char *)(8 * v9);
      *(void *)(8 * v9) = *(void *)(v2 + 1896);
      uint64_t v8 = 8 * v9 + 8;
      if (v7 == v5) {
        goto LABEL_22;
      }
    }
    unint64_t v14 = v7 - 8 - v5;
    if (v14 >= 0x168)
    {
      if (&v12[v7 - v5 - 8 - (v14 & 0xFFFFFFFFFFFFFFF8)] > &v12[v7 - v5 - 8])
      {
        uint64_t v15 = v7;
      }
      else if (&v7[-(v14 & 0xFFFFFFFFFFFFFFF8) - 8] > v7 - 8)
      {
        uint64_t v15 = v7;
      }
      else if ((unint64_t)(v5 - v12) >= 0x20)
      {
        uint64_t v17 = (v14 >> 3) + 1;
        uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v15 = &v7[-v18];
        v13 -= v18;
        uint64_t v19 = &v12[8 * v9 - 16];
        uint64_t v20 = v7 - 16;
        uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v22 = *(_OWORD *)v20;
          *(v19 - 1) = *((_OWORD *)v20 - 1);
          _OWORD *v19 = v22;
          v19 -= 2;
          v20 -= 32;
          v21 -= 4;
        }
        while (v21);
        if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_22:
          uint64_t v6 = &v12[8 * v11];
          *a2 = v13;
          a2[1] = (char *)v8;
          a2[2] = v6;
          if (v5) {
            operator delete(v5);
          }
          uint64_t v5 = v13;
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t v15 = v7;
      }
    }
    else
    {
      uint64_t v15 = v7;
    }
    do
    {
      uint64_t v16 = *((void *)v15 - 1);
      v15 -= 8;
      *((void *)v13 - 1) = v16;
      v13 -= 8;
    }
    while (v15 != v5);
    goto LABEL_22;
  }
}

void sub_9CF900(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_9CF920(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      uint64_t v4 = *(unint64_t **)(v2 + 8);
      uint64_t v5 = *(unint64_t **)(v2 + 16);
      *(_OWORD *)unint64_t v11 = 0u;
      *(_OWORD *)std::string __p = 0u;
      int v13 = 1065353216;
      if (v4 != v5)
      {
        uint64_t v6 = v4;
        do
        {
          sub_987818((uint64_t)v11, v6, v6);
          if (v7) {
            *v4++ = *v6;
          }
          ++v6;
        }
        while (v6 != v5);
        uint64_t v8 = __p[0];
        if (__p[0])
        {
          do
          {
            uint64_t v9 = (void *)*v8;
            operator delete(v8);
            uint64_t v8 = v9;
          }
          while (v9);
        }
        unint64_t v10 = v11[0];
        v11[0] = 0;
        if (v10) {
          operator delete(v10);
        }
      }
      if (v4 != *(unint64_t **)(v2 + 16)) {
        *(void *)(v2 + 16) = v4;
      }
      v2 += 32;
    }
    while (v2 != v3);
  }
}

void sub_9CFA1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  uint64_t v12 = __p;
  if (__p)
  {
    do
    {
      int v13 = (void *)*v12;
      operator delete(v12);
      uint64_t v12 = v13;
    }
    while (v13);
  }
  sub_20AD68C((void **)&a9);
  _Unwind_Resume(a1);
}

void sub_9CFA48(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2[1] - *a2 < 0x21uLL)
  {
    unint64_t v4 = -1;
    uint64_t v5 = *(void *)(a3 + 8);
    uint64_t v6 = *(void *)(a3 + 16);
    if (v5 == v6) {
      return;
    }
  }
  else
  {
    unint64_t v4 = *(void *)(*a2 + 32) - 1;
    uint64_t v5 = *(void *)(a3 + 8);
    uint64_t v6 = *(void *)(a3 + 16);
    if (v5 == v6) {
      return;
    }
  }
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  do
  {
    if (*(_DWORD *)v5 == 3)
    {
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
      if (v7 <= v4)
      {
        unint64_t v11 = (v10 - v9) >> 5;
      }
      else
      {
        unint64_t v11 = (v10 - v9) >> 5;
        if (v11 <= v8 + 2) {
          unint64_t v4 = -1;
        }
        else {
          unint64_t v4 = *(void *)(v9 + 32 * (v8 + 1)) - 1;
        }
        ++v8;
      }
      if (v11 <= v8) {
        sub_66748();
      }
      if (!*(unsigned char *)(v5 + 792))
      {
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      uint64_t v12 = (char **)(v9 + 32 * v8 + 8);
      if ((char **)(v5 + 720) != v12) {
        sub_326C0((void *)(v5 + 720), *v12, *(char **)(v9 + 32 * v8 + 16), (uint64_t)(*(void *)(v9 + 32 * v8 + 16) - (void)*v12) >> 3);
      }
      ++v7;
    }
    v5 += 5704;
  }
  while (v5 != v6);
}

void *sub_9CFBB4(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = a2[1];
  unint64_t v7 = 31337;
  if (*a2 != v6)
  {
    unint64_t v8 = *a2;
    do
    {
      uint64_t v9 = *v8++;
      v7 ^= (v7 << 6) + (v7 >> 2) + 2654435769u + v9;
    }
    while (v8 != v6);
  }
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v10) {
        unint64_t v4 = v7 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v7;
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      double result = (void *)*v12;
      if (*v12)
      {
        unint64_t v14 = (char *)((char *)v6 - (char *)*a2);
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v19 = result[1];
            if (v19 == v7)
            {
              uint64_t v21 = (char *)result[2];
              uint64_t v20 = (char *)result[3];
              if ((char *)(v20 - v21) == v14)
              {
                if (v21 == v20) {
                  return result;
                }
                for (uint64_t i = *a2; *(void *)v21 == *i; ++i)
                {
                  v21 += 8;
                  if (v21 == v20) {
                    return result;
                  }
                }
              }
            }
            else if ((v19 & (v10 - 1)) != v4)
            {
              goto LABEL_34;
            }
            double result = (void *)*result;
            if (!result) {
              goto LABEL_34;
            }
          }
        }
        do
        {
          unint64_t v15 = result[1];
          if (v15 == v7)
          {
            uint64_t v17 = (char *)result[2];
            uint64_t v16 = (char *)result[3];
            if ((char *)(v16 - v17) == v14)
            {
              if (v17 == v16) {
                return result;
              }
              for (j = *a2; *(void *)v17 == *j; ++j)
              {
                v17 += 8;
                if (v17 == v16) {
                  return result;
                }
              }
            }
          }
          else
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
            if (v15 != v4) {
              break;
            }
          }
          double result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_34:
  sub_9CFF7C(a1, v7, a4, (uint64_t)&v36);
  float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v24 = *(float *)(a1 + 32);
  if (!v10 || (float)(v24 * (float)v10) < v23)
  {
    BOOL v26 = 1;
    if (v10 >= 3) {
      BOOL v26 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v10);
    unint64_t v28 = vcvtps_u32_f32(v23 / v24);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v30) {
      goto LABEL_48;
    }
    if (prime < *(void *)&v30)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v30 < 3uLL || (uint8x8_t v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime < *(void *)&v30) {
LABEL_48:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v34 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v7 >= v10)
      {
        unint64_t v4 = v7 % v10;
        unint64_t v25 = *(void **)(*(void *)a1 + 8 * (v7 % v10));
        if (v25) {
          goto LABEL_37;
        }
      }
      else
      {
        unint64_t v4 = v7;
        unint64_t v25 = *(void **)(*(void *)a1 + 8 * v7);
        if (v25) {
          goto LABEL_37;
        }
      }
    }
    else
    {
      unint64_t v4 = v34 & v7;
      unint64_t v25 = *(void **)(*(void *)a1 + 8 * (v34 & v7));
      if (v25) {
        goto LABEL_37;
      }
    }
LABEL_61:
    void *v36 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v36;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v36)
    {
      unint64_t v35 = *(void *)(*v36 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v35 >= v10) {
          v35 %= v10;
        }
      }
      else
      {
        v35 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v35) = v36;
    }
    goto LABEL_72;
  }
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v25) {
    goto LABEL_61;
  }
LABEL_37:
  void *v36 = *v25;
  *unint64_t v25 = v36;
LABEL_72:
  double result = v36;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_9CFF68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9D0058((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_9CFF7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  double result = operator new(0x40uLL);
  uint64_t v9 = result;
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *result = 0;
  result[1] = a2;
  result[2] = 0;
  uint64_t v10 = *a3;
  result[3] = 0;
  result[4] = 0;
  uint64_t v12 = *(unsigned char **)v10;
  uint8x8_t v11 = *(unsigned char **)(v10 + 8);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_2E00();
    }
    unint64_t v14 = (char *)operator new(v11 - v12);
    v9[2] = v14;
    v9[3] = v14;
    unint64_t v15 = &v14[8 * (v13 >> 3)];
    v9[4] = v15;
    double result = memcpy(v14, v12, v13);
    v9[3] = v15;
  }
  v9[5] = 0;
  v9[6] = 0;
  v9[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_9D0034(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 24) = v5;
    operator delete(v5);
  }
  sub_9D0058(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9D0058(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[5];
      if (v3)
      {
        v2[6] = v3;
        operator delete(v3);
      }
      unint64_t v4 = (void *)v2[2];
      if (v4)
      {
        v2[3] = v4;
        operator delete(v4);
      }
    }
    operator delete(v2);
  }
  return a1;
}

double sub_9D00B8(unint64_t a1, unint64_t a2, uint64_t a3, char a4, __n128 a5)
{
__n128 sub_9D0AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_9D0F98(a1, a2, a3, a4).n128_u64[0];
  uint64_t v11 = *(void *)a4;
  if (*(void *)a5 < *(void *)a4)
  {
    uint64_t v12 = *(void *)(a4 + 24);
    __n128 result = *(__n128 *)(a4 + 8);
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)a4 = *(void *)a5;
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 8);
    *(void *)(a4 + 24) = *(void *)(a5 + 24);
    *(void *)a5 = v11;
    *(__n128 *)(a5 + 8) = result;
    *(void *)(a5 + 24) = v12;
    uint64_t v13 = *(void *)a3;
    if (*(void *)a4 < *(void *)a3)
    {
      uint64_t v14 = *(void *)(a3 + 24);
      __n128 result = *(__n128 *)(a3 + 8);
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)a3 = *(void *)a4;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
      *(void *)(a3 + 24) = *(void *)(a4 + 24);
      *(void *)a4 = v13;
      *(__n128 *)(a4 + 8) = result;
      *(void *)(a4 + 24) = v14;
      uint64_t v15 = *(void *)a2;
      if (*(void *)a3 < *(void *)a2)
      {
        uint64_t v16 = *(void *)(a2 + 24);
        __n128 result = *(__n128 *)(a2 + 8);
        *(void *)(a2 + 16) = 0;
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)a2 = *(void *)a3;
        *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
        *(void *)(a2 + 24) = *(void *)(a3 + 24);
        *(void *)a3 = v15;
        *(__n128 *)(a3 + 8) = result;
        *(void *)(a3 + 24) = v16;
        uint64_t v17 = *(void *)a1;
        if (*(void *)a2 < *(void *)a1)
        {
          uint64_t v18 = *(void *)(a1 + 24);
          __n128 result = *(__n128 *)(a1 + 8);
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + 24) = 0;
          *(void *)(a1 + 8) = 0;
          *(void *)a1 = *(void *)a2;
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(void *)a2 = v17;
          *(__n128 *)(a2 + 8) = result;
          *(void *)(a2 + 24) = v18;
        }
      }
    }
  }
  return result;
}

unint64_t *sub_9D0C1C(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  unint64_t v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      uint64_t v9 = a2[3];
      long long v10 = *(_OWORD *)(a2 + 1);
      a2[2] = 0;
      a2[3] = 0;
      a2[1] = 0;
      *a2 = *a3;
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      a2[3] = a3[3];
      *a3 = v3;
      *(_OWORD *)(a3 + 1) = v10;
      a3[3] = v9;
      unint64_t v11 = *result;
      if (*a2 < *result)
      {
        uint64_t v12 = result[3];
        long long v13 = *(_OWORD *)(result + 1);
        result[2] = 0;
        result[3] = 0;
        result[1] = 0;
        void *result = *a2;
        *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 1);
        result[3] = a2[3];
        *a2 = v11;
        *(_OWORD *)(a2 + 1) = v13;
        a2[3] = v12;
      }
    }
  }
  else
  {
    uint64_t v7 = result[1];
    uint64_t v6 = result[2];
    uint64_t v8 = result[3];
    result[2] = 0;
    result[3] = 0;
    result[1] = 0;
    if (v5 >= v3)
    {
      void *result = *a2;
      *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 1);
      result[3] = a2[3];
      *a2 = v4;
      a2[1] = v7;
      a2[2] = v6;
      a2[3] = v8;
      if (*a3 >= v4) {
        return result;
      }
      a2[1] = 0;
      a2[2] = 0;
      a2[3] = 0;
      *a2 = *a3;
      *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
      a2[3] = a3[3];
    }
    else
    {
      void *result = *a3;
      *(_OWORD *)(result + 1) = *(_OWORD *)(a3 + 1);
      result[3] = a3[3];
    }
    *a3 = v4;
    a3[1] = v7;
    a3[2] = v6;
    a3[3] = v8;
  }
  return result;
}

BOOL sub_9D0D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v17 = *(void *)a1;
      if (*(void *)(a2 - 32) < *(void *)a1)
      {
        uint64_t v18 = *(void *)(a1 + 24);
        long long v19 = *(_OWORD *)(a1 + 8);
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)a1 = *(void *)(a2 - 32);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 24) = *(void *)(a2 - 8);
        *(void *)(a2 - 32) = v17;
        *(_OWORD *)(a2 - 24) = v19;
        *(void *)(a2 - 8) = v18;
      }
      break;
    case 3:
      sub_9D0C1C((unint64_t *)a1, (unint64_t *)(a1 + 32), (unint64_t *)(a2 - 32));
      BOOL result = 1;
      break;
    case 4:
      sub_9D0F98(a1, a1 + 32, a1 + 64, a2 - 32);
      BOOL result = 1;
      break;
    case 5:
      sub_9D0AC8(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      BOOL result = 1;
      break;
    default:
      uint64_t v6 = (unint64_t *)(a1 + 64);
      sub_9D0C1C((unint64_t *)a1, (unint64_t *)(a1 + 32), (unint64_t *)(a1 + 64));
      uint64_t v7 = a1 + 96;
      if (a1 + 96 == a2)
      {
LABEL_13:
        BOOL result = 1;
      }
      else
      {
        uint64_t v8 = 0;
        int v9 = 0;
        while (1)
        {
          unint64_t v10 = *(void *)v7;
          if (*(void *)v7 < *v6) {
            break;
          }
LABEL_12:
          uint64_t v6 = (unint64_t *)v7;
          v8 += 32;
          v7 += 32;
          if (v7 == a2) {
            goto LABEL_13;
          }
        }
        uint64_t v11 = *(void *)(v7 + 8);
        long long v12 = *(_OWORD *)(v7 + 16);
        *(void *)(v7 + 16) = 0;
        *(void *)(v7 + 24) = 0;
        *(void *)(v7 + 8) = 0;
        uint64_t v13 = v8;
        unint64_t v14 = *v6;
        do
        {
          uint64_t v15 = a1 + v13;
          *(_OWORD *)(v15 + 104) = *(_OWORD *)(a1 + v13 + 72);
          *(void *)(v15 + 120) = *(void *)(a1 + v13 + 88);
          *(void *)(v15 + 72) = 0;
          *(void *)(v15 + 80) = 0;
          *(void *)(v15 + 88) = 0;
          *(void *)(v15 + 96) = v14;
          if (v13 == -64)
          {
            *(void *)a1 = v10;
            *(void *)(v15 + 72) = v11;
            *(_OWORD *)(a1 + 16) = v12;
            if (++v9 != 8) {
              goto LABEL_12;
            }
            goto LABEL_19;
          }
          unint64_t v14 = *(void *)(v15 + 32);
          v13 -= 32;
        }
        while (v10 < v14);
        uint64_t v16 = a1 + v13;
        *(void *)(v16 + 96) = v10;
        *(void *)(v15 + 72) = v11;
        *(_OWORD *)(v16 + 112) = v12;
        if (++v9 != 8) {
          goto LABEL_12;
        }
LABEL_19:
        BOOL result = v7 + 32 == a2;
      }
      break;
  }
  return result;
}

__n128 sub_9D0F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_9D0C1C((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  unint64_t v9 = *(void *)a3;
  if (*(void *)a4 < *(void *)a3)
  {
    uint64_t v10 = *(void *)(a3 + 24);
    __n128 result = *(__n128 *)(a3 + 8);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)a3 = *(void *)a4;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(void *)(a3 + 24) = *(void *)(a4 + 24);
    *(void *)a4 = v9;
    *(__n128 *)(a4 + 8) = result;
    *(void *)(a4 + 24) = v10;
    unint64_t v11 = *(void *)a2;
    if (*(void *)a3 < *(void *)a2)
    {
      uint64_t v12 = *(void *)(a2 + 24);
      __n128 result = *(__n128 *)(a2 + 8);
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)a2 = *(void *)a3;
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(void *)(a2 + 24) = *(void *)(a3 + 24);
      *(void *)a3 = v11;
      *(__n128 *)(a3 + 8) = result;
      *(void *)(a3 + 24) = v12;
      unint64_t v13 = *(void *)a1;
      if (*(void *)a2 < *(void *)a1)
      {
        uint64_t v14 = *(void *)(a1 + 24);
        __n128 result = *(__n128 *)(a1 + 8);
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)a1 = *(void *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)a2 = v13;
        *(__n128 *)(a2 + 8) = result;
        *(void *)(a2 + 24) = v14;
      }
    }
  }
  return result;
}

double sub_9D109C()
{
  byte_25DCF37 = 1;
  word_25DCF20 = 65;
  byte_25DCF4F = 1;
  word_25DCF38 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DCFE0 = 0u;
  *(_OWORD *)&qword_25DCFF0 = 0u;
  dword_25DD000 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DCFE0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DCFE0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DCFE0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DCFE0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DCF67 = 8;
  strcpy((char *)&qword_25DCF50, "any_mode");
  byte_25DCF7F = 7;
  strcpy((char *)&dword_25DCF68, "cycling");
  byte_25DCF97 = 7;
  strcpy((char *)&dword_25DCF80, "driving");
  byte_25DCFAF = 7;
  strcpy((char *)&dword_25DCF98, "walking");
  qword_25DCFB8 = 0;
  qword_25DCFC0 = 0;
  qword_25DCFB0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DCFB0 = (uint64_t)v0;
  qword_25DCFB8 = (uint64_t)(v0 + 9);
  qword_25DCFC0 = (uint64_t)(v0 + 9);
  qword_25DCFC8 = 0;
  qword_25DCFD0 = 0;
  unk_25DCFD8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DCFD0 = (uint64_t)(v1 + 9);
  unk_25DCFD8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DCFC8 = (uint64_t)v1;
  return result;
}

void sub_9D1364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DCFF0) {
    sub_20AD6B4((void **)qword_25DCFF0);
  }
  long long v37 = (void *)xmmword_25DCFE0;
  *(void *)&xmmword_25DCFE0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t *sub_9D1404(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  a1[1] = a3;
  uint64_t v12 = 0;
  char v13 = operator new(0x28uLL);
  long long v14 = xmmword_20B9960;
  strcpy((char *)v13, "TransitRoutePaymentSuggestionAnnotation");
  std::string __p = 0;
  int v11 = 0;
  int v5 = sub_374CDC(a2, (uint64_t)&v13, (uint64_t *)&__p);
  sub_9D152C((uint64_t)(a1 + 2), v5);
  uint64_t v6 = (void **)__p;
  if (__p)
  {
    char v7 = v11;
    int v8 = __p;
    if (v11 != __p)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      int v8 = __p;
    }
    int v11 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13);
  }
  return a1;
}

void sub_9D1504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_9D152C(uint64_t a1, void *a2)
{
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "leg_ratio_threshold");
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(double *)a1 = v4;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9960;
  strcpy((char *)__p[0], "use_first_leg_with_card_payment_methods");
  BOOL v5 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 8) = v5;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "require_same_payment_method_type");
  BOOL v6 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 9) = v6;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "use_stop_parents_as_fallback");
  BOOL v7 = sub_29D62C(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 10) = v7;
  return a1;
}

void sub_9D16B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9D16E0(uint64_t *a1, uint64_t a2)
{
  if (*(unsigned char *)(a1[1] + 1430))
  {
    unint64_t v3 = *(void **)(a2 + 8);
    if (*(void **)a2 != v3)
    {
      BOOL v5 = *(void **)a2;
      while (!*((unsigned char *)v5 + 1128))
      {
        v5 += 390;
        if (v5 == v3)
        {
          BOOL v5 = *(void **)(a2 + 8);
          break;
        }
      }
      if (v5 == v3) {
        BOOL v6 = *(void **)a2;
      }
      else {
        BOOL v6 = v5;
      }
      if (v6[293] != v6[294])
      {
        sub_9D1914((uint64_t)a1, v6, &v24);
        BOOL v7 = v24;
        if (v24 != v25)
        {
          sub_99EC34((uint64_t)v22, *a1, a1[1]);
          int v8 = (void **)v6[293];
          unint64_t v9 = (void **)v6[294];
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          long long v19 = 0;
          uint64_t v10 = (char *)v9 - (char *)v8;
          if (v9 != v8)
          {
            if (v10 < 0) {
              sub_2E00();
            }
            int v11 = (char *)operator new((char *)v9 - (char *)v8);
            long long v19 = v11;
            uint64_t v20 = v11;
            uint64_t v21 = &v11[8 * (v10 >> 3)];
            do
            {
              std::string __p = *v8;
              int v11 = sub_9D25FC((unint64_t *)&v19, v11, &__p) + 8;
              ++v8;
            }
            while (v8 != v9);
          }
          sub_99EC54((uint64_t)v22, (void ***)&v19, (uint64_t)&v24, &__p);
          if ((void **)(a2 + 472) != &__p) {
            sub_9042F4(a2 + 472, __p, v18, 0x193D4BB7E327A977 * ((v18 - (unsigned char *)__p) >> 3));
          }
          uint64_t v12 = (char *)__p;
          if (__p)
          {
            char v13 = __p;
            if (v18 != __p)
            {
              long long v14 = v18 - 568;
              do
              {
                sub_8E57D0((void *)v14 + 3);
                uint64_t v16 = *(void **)v14;
                if (*(void *)v14)
                {
                  *((void *)v14 + 1) = v16;
                  operator delete(v16);
                }
                BOOL v15 = v14 == v12;
                v14 -= 568;
              }
              while (!v15);
              char v13 = __p;
            }
            uint64_t v18 = v12;
            operator delete(v13);
          }
          if (v19)
          {
            uint64_t v20 = v19;
            operator delete(v19);
          }
          sub_8E5894((uint64_t)&v23);
          BOOL v7 = v24;
        }
        if (v7)
        {
          unint64_t v25 = v7;
          operator delete(v7);
        }
      }
    }
  }
}

void sub_9D18BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18)
{
  sub_9040D0(&a10);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_8E5894((uint64_t)&a18);
  uint64_t v20 = *(void **)(v18 - 56);
  if (v20)
  {
    *(void *)(v18 - 48) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void sub_9D1914(uint64_t a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  if (sub_9D2198((void **)a1, a2))
  {
    unsigned int v6 = sub_9D1C34(a2);
    uint64_t v31 = sub_9D1CDC((void **)a1, a2);
    sub_9D1E4C(a2, v6, (uint64_t)&v32);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    BOOL v7 = v32;
    int v8 = v33;
    if (v32 != v33)
    {
      unint64_t v9 = 0;
      while (1)
      {
        if (v7[1] < *(double *)(a1 + 16)) {
          goto LABEL_6;
        }
        if (*(unsigned char *)(a1 + 24))
        {
          int v11 = *(_DWORD **)v31;
          uint64_t v12 = *(_DWORD **)(v31 + 8);
          if (*(_DWORD **)v31 != v12)
          {
            while (*v11 != *(_DWORD *)v7 || v11[1] != *((_DWORD *)v7 + 1))
            {
              v11 += 2;
              if (v11 == v12)
              {
                int v11 = *(_DWORD **)(v31 + 8);
                break;
              }
            }
          }
          if (v11 == v12) {
            goto LABEL_6;
          }
        }
        unint64_t v13 = (unint64_t)a3[2];
        if ((unint64_t)v9 < v13)
        {
          *(double *)unint64_t v9 = *v7;
          uint64_t v10 = (uint64_t)(v9 + 8);
          goto LABEL_5;
        }
        long long v14 = *a3;
        uint64_t v15 = v9 - *a3;
        uint64_t v16 = v15 >> 3;
        unint64_t v17 = (v15 >> 3) + 1;
        if (v17 >> 61) {
          sub_2E00();
        }
        uint64_t v18 = v13 - (void)v14;
        if (v18 >> 2 > v17) {
          unint64_t v17 = v18 >> 2;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          if (v19 >> 61) {
            sub_188D718();
          }
          uint64_t v20 = operator new(8 * v19);
          uint64_t v21 = &v20[8 * v16];
          *(double *)uint64_t v21 = *v7;
          uint64_t v10 = (uint64_t)(v21 + 8);
          if (v9 == v14)
          {
LABEL_27:
            *a3 = v21;
            a3[1] = (char *)v10;
            a3[2] = &v20[8 * v19];
            if (!v9) {
              goto LABEL_5;
            }
LABEL_34:
            operator delete(v9);
            goto LABEL_5;
          }
        }
        else
        {
          uint64_t v20 = 0;
          uint64_t v21 = (char *)(8 * v16);
          *(double *)(8 * v16) = *v7;
          uint64_t v10 = 8 * v16 + 8;
          if (v9 == v14) {
            goto LABEL_27;
          }
        }
        unint64_t v22 = v9 - 8 - v14;
        if (v22 < 0x168)
        {
          uint64_t v23 = v9;
          goto LABEL_32;
        }
        if (&v20[v15 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] > &v20[v15 - 8]) {
          break;
        }
        if (&v9[-(v22 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
        {
          uint64_t v23 = v9;
          goto LABEL_32;
        }
        if ((unint64_t)(v9 - v20 - v15) < 0x20)
        {
          uint64_t v23 = v9;
          goto LABEL_32;
        }
        uint64_t v25 = (v22 >> 3) + 1;
        uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v23 = &v9[-v26];
        v21 -= v26;
        unint64_t v27 = &v20[8 * v16 - 16];
        unint64_t v28 = (long long *)(v9 - 16);
        uint64_t v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v30 = *v28;
          *(v27 - 1) = *(v28 - 1);
          *unint64_t v27 = v30;
          v27 -= 2;
          v28 -= 2;
          v29 -= 4;
        }
        while (v29);
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_32;
        }
LABEL_33:
        unint64_t v9 = *a3;
        *a3 = v21;
        a3[1] = (char *)v10;
        a3[2] = &v20[8 * v19];
        if (v9) {
          goto LABEL_34;
        }
LABEL_5:
        a3[1] = (char *)v10;
        unint64_t v9 = (char *)v10;
LABEL_6:
        v7 += 2;
        if (v7 == v8)
        {
          BOOL v7 = v32;
          goto LABEL_47;
        }
      }
      uint64_t v23 = v9;
      do
      {
LABEL_32:
        uint64_t v24 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v21 - 1) = v24;
        v21 -= 8;
      }
      while (v23 != v14);
      goto LABEL_33;
    }
LABEL_47:
    if (v7)
    {
      uint64_t v33 = v7;
      operator delete(v7);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_9D1BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v12)
  {
    *(void *)(v11 + 8) = v12;
    operator delete(v12);
    long long v14 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v14 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_9D1C34(void *a1)
{
  sub_994B0C(v4, a1);
  sub_994AD8((void **)v4, v3);
  uint64_t v1 = 0;
  while (sub_994D74(v4, v3))
  {
    if (*(_DWORD *)sub_994DB0(v4) == 2 || *(_DWORD *)sub_994DB0(v4) == 8) {
      uint64_t v1 = (v1 + 1);
    }
    sub_994B7C((uint64_t)v4);
    sub_994AD8((void **)v4, v3);
  }
  return v1;
}

uint64_t sub_9D1CDC(void **a1, void *a2)
{
  sub_994B0C(v18, a2);
  sub_994AD8((void **)v18, v17);
  while (sub_994D74(v18, v17))
  {
    if (*(_DWORD *)sub_994DB0(v18) == 2)
    {
      uint64_t v3 = sub_994DB0(v18);
      double v4 = *(unint64_t **)(v3 + 5680);
      BOOL v5 = *(unint64_t **)(v3 + 5688);
      while (v4 != v5)
      {
        unint64_t v6 = *v4;
        uint64_t v7 = sub_3757C8(*a1);
        int v8 = (int *)sub_2A4F60(v7, v6, 0, "payment_method");
        unint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
        if (*v9 >= 9u)
        {
          uint64_t v10 = v9[4];
          if (v10)
          {
            unsigned int v11 = *((unsigned __int8 *)v8 + v10);
            BOOL v12 = v11 > 4;
            int v13 = (1 << v11) & 0x16;
            if (!v12 && v13 != 0) {
              return sub_994DB0(v18) + 5680;
            }
          }
        }
        ++v4;
      }
    }
    sub_994B7C((uint64_t)v18);
    sub_994AD8((void **)v18, v17);
  }
  uint64_t v15 = &qword_25DD0D0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25DD008, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25DD008))
  {
    qword_25DD0D8 = 0;
    unk_25DD0E0 = 0;
    qword_25DD0D0 = 0;
    uint64_t v15 = &qword_25DD0D0;
    __cxa_guard_release(&qword_25DD008);
  }
  return (uint64_t)v15;
}

void sub_9D1E4C(void *a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  if (a2)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    unint64_t v27 = 0;
    sub_994B0C(&v24, a1);
    uint64_t v3 = 0;
    double v4 = 0;
    BOOL v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      sub_994AD8(&v24, v23);
      if (!sub_994D74(&v24, v23)) {
        break;
      }
      if (*(_DWORD *)sub_994DB0(v24.n128_u64) == 2)
      {
        uint64_t v7 = sub_994DB0(v24.n128_u64);
        int v8 = *(_DWORD **)(v7 + 5680);
        unint64_t v9 = *(_DWORD **)(v7 + 5688);
        while (v8 != v9)
        {
          if (v4 != v5)
          {
            uint64_t v10 = v4;
            while (*v8 != *(_DWORD *)v10 || v8[1] != *((_DWORD *)v10 + 1))
            {
              v10 += 12;
              if (v10 == v5) {
                goto LABEL_7;
              }
            }
            BOOL v5 = v10;
          }
LABEL_7:
          if (v5 == v3)
          {
            if (v3 >= v27)
            {
              unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 2) + 1;
              if (v11 > 0x1555555555555555) {
                sub_2E00();
              }
              if (0x5555555555555556 * ((v27 - v4) >> 2) > v11) {
                unint64_t v11 = 0x5555555555555556 * ((v27 - v4) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v27 - v4) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v12 = 0x1555555555555555;
              }
              else {
                unint64_t v12 = v11;
              }
              if (v12 > 0x1555555555555555) {
                sub_188D718();
              }
              int v13 = (char *)operator new(12 * v12);
              long long v14 = &v13[4 * ((v3 - v4) >> 2)];
              *(void *)long long v14 = *(void *)v8;
              *((_DWORD *)v14 + 2) = 1;
              for (uint64_t i = v14; v3 != v4; *((_DWORD *)i + 2) = v17)
              {
                uint64_t v16 = *(void *)(v3 - 12);
                v3 -= 12;
                int v17 = *((_DWORD *)v3 + 2);
                *(void *)(i - 12) = v16;
                i -= 12;
              }
              uint64_t v3 = v14 + 12;
              uint64_t v25 = i;
              uint64_t v26 = v14 + 12;
              unint64_t v27 = &v13[12 * v12];
              if (v4) {
                operator delete(v4);
              }
              double v4 = i;
              uint64_t v26 = v3;
            }
            else
            {
              *(void *)uint64_t v3 = *(void *)v8;
              *((_DWORD *)v3 + 2) = 1;
              v3 += 12;
              uint64_t v26 = v3;
            }
          }
          else
          {
            ++*((_DWORD *)v5 + 2);
          }
          v8 += 2;
          BOOL v5 = v3;
          unint64_t v6 = v4;
        }
      }
      sub_994B7C((uint64_t)&v24);
    }
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    if (v5 != v6)
    {
      if ((0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 2)) >> 60) {
        sub_2E00();
      }
      uint64_t v18 = (__n128 *)operator new(0xAAAAAAAAAAAAAAB0 * ((v5 - v6) >> 2));
      *(void *)a3 = v18;
      *(void *)(a3 + 8) = v18;
      *(void *)(a3 + 16) = &v18[0xFAAAAAAAAAAAAAABLL * ((v5 - v6) >> 2)];
      uint64_t v20 = v6;
      do
      {
        LODWORD(v19) = *((_DWORD *)v20 + 2);
        v24.n128_u64[0] = *(void *)v20;
        v24.n128_f64[1] = (double)v19 / (double)a2;
        uint64_t v18 = sub_9D296C((__n128 **)a3, (uint64_t)v18, &v24) + 1;
        v20 += 12;
      }
      while (v20 != v5);
    }
    if (v6)
    {
      uint64_t v26 = v6;
      operator delete(v6);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
}

void sub_9D2130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9D2198(void **a1, void *a2)
{
  if (!*((unsigned char *)a1 + 25)) {
    return 1;
  }
  unint64_t v60 = 0;
  uint64_t v61 = 0;
  unint64_t v62 = 0;
  sub_994B0C(v59, a2);
  uint64_t v3 = 0;
  double v4 = 0;
  unint64_t v5 = 0;
  while (1)
  {
    sub_994AD8((void **)v59, v58);
    if (!sub_994D74(v59, v58)) {
      break;
    }
    if (*(_DWORD *)sub_994DB0(v59) != 2)
    {
      uint64_t v6 = sub_994DB0(v59);
      uint64_t v7 = *(unint64_t **)(v6 + 5680);
      int v8 = *(unint64_t **)(v6 + 5688);
      while (1)
      {
        if (v7 == v8) {
          goto LABEL_3;
        }
        unint64_t v10 = *v7;
        uint64_t v11 = sub_3757C8(*a1);
        unint64_t v12 = (int *)sub_2A4F60(v11, v10, 0, "payment_method");
        int v13 = (unsigned __int16 *)((char *)v12 - *v12);
        if (*v13 >= 9u)
        {
          uint64_t v14 = v13[4];
          if (v14)
          {
            unsigned int v15 = *((unsigned __int8 *)v12 + v14);
            BOOL v16 = v15 > 4;
            int v17 = (1 << v15) & 0x16;
            if (!v16 && v17 != 0) {
              break;
            }
          }
        }
LABEL_9:
        ++v7;
      }
      uint64_t v19 = sub_3757C8(*a1);
      uint64_t v20 = (int *)sub_2A4F60(v19, *v7, 0, "payment_method");
      uint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
      if (*v21 >= 9u && (uint64_t v22 = v21[4]) != 0)
      {
        unsigned __int8 v23 = *((unsigned char *)v20 + v22);
        if (v4 >= v3)
        {
LABEL_22:
          __n128 v24 = v60;
          unint64_t v25 = v4 - v60;
          uint64_t v26 = v4 - v60 + 1;
          if (v26 < 0) {
            sub_2E00();
          }
          if (2 * (v3 - v60) > (unint64_t)v26) {
            uint64_t v26 = 2 * (v3 - v60);
          }
          if ((unint64_t)(v3 - v60) >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v27 = v26;
          }
          if (v27)
          {
            unint64_t v28 = (unsigned __int8 *)operator new(v27);
            uint64_t v29 = &v28[v25];
            v28[v25] = v23;
            uint64_t v9 = (uint64_t)&v28[v25 + 1];
            if (v4 != v24)
            {
LABEL_30:
              if (v25 < 8
                || &v28[v25 + v24 - v4] > &v28[v25 - 1]
                || v24 > v4 - 1
                || (unint64_t)(v24 - v28) < 0x20)
              {
                long long v30 = v4;
              }
              else if (v25 >= 0x20)
              {
                unint64_t v33 = v25 & 0xFFFFFFFFFFFFFFE0;
                unint64_t v34 = &v28[v25 - 16];
                BOOL v35 = v4 - 16;
                unint64_t v36 = v25 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v37 = *(_OWORD *)v35;
                  *((_OWORD *)v34 - 1) = *((_OWORD *)v35 - 1);
                  *(_OWORD *)unint64_t v34 = v37;
                  v34 -= 32;
                  v35 -= 32;
                  v36 -= 32;
                }
                while (v36);
                if (v25 == v33) {
                  goto LABEL_34;
                }
                if ((v25 & 0x18) != 0) {
                  goto LABEL_48;
                }
                v29 -= v33;
                long long v30 = &v4[-v33];
              }
              else
              {
                unint64_t v33 = 0;
LABEL_48:
                long long v30 = &v4[-(v25 & 0xFFFFFFFFFFFFFFF8)];
                v29 -= v25 & 0xFFFFFFFFFFFFFFF8;
                unint64_t v38 = &v28[&v4[-v33] - v24 - 8];
                unint64_t v39 = &v4[-v33 - 8];
                unint64_t v40 = v33 - (v25 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  uint64_t v41 = *(void *)v39;
                  v39 -= 8;
                  *(void *)unint64_t v38 = v41;
                  v38 -= 8;
                  v40 += 8;
                }
                while (v40);
                if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_34:
                  unint64_t v5 = (unint64_t)v28;
                  uint64_t v3 = &v28[v27];
                  unint64_t v60 = v28;
                  unint64_t v62 = v3;
                  if (!v24) {
                    goto LABEL_8;
                  }
LABEL_38:
                  operator delete(v24);
LABEL_8:
                  uint64_t v61 = (unsigned __int8 *)v9;
                  double v4 = (unsigned __int8 *)v9;
                  goto LABEL_9;
                }
              }
              uint64_t v31 = v29 - 1;
              do
              {
                unsigned __int8 v32 = *--v30;
                *v31-- = v32;
              }
              while (v30 != v24);
              goto LABEL_34;
            }
          }
          else
          {
            unint64_t v28 = 0;
            uint64_t v29 = (unsigned __int8 *)(v4 - v60);
            *(unsigned char *)unint64_t v25 = v23;
            uint64_t v9 = v25 + 1;
            if (v4 != v24) {
              goto LABEL_30;
            }
          }
          unint64_t v5 = (unint64_t)v29;
          uint64_t v3 = &v28[v27];
          unint64_t v60 = v29;
          unint64_t v62 = v3;
          if (v24) {
            goto LABEL_38;
          }
          goto LABEL_8;
        }
      }
      else
      {
        unsigned __int8 v23 = 0;
        if (v4 >= v3) {
          goto LABEL_22;
        }
      }
      unsigned __int8 *v4 = v23;
      uint64_t v9 = (uint64_t)(v4 + 1);
      goto LABEL_8;
    }
LABEL_3:
    sub_994B7C((uint64_t)v59);
  }
  unint64_t v42 = 126 - 2 * __clz((unint64_t)&v4[-v5]);
  if (v4 == (unsigned __int8 *)v5) {
    uint64_t v43 = 0;
  }
  else {
    uint64_t v43 = v42;
  }
  sub_9D2E88(v5, v4, (uint64_t)v59, v43, 1);
  unint64_t v45 = v60;
  unint64_t v44 = v61;
  if (v60 != v61)
  {
    uint64_t v46 = v60 + 1;
    while (v46 != v61)
    {
      int v47 = *(v46 - 1);
      int v48 = *v46++;
      if (v47 == v48)
      {
        uint64_t v49 = v46 - 2;
        unint64_t v50 = v49 + 2;
        if (v49 + 2 != v61)
        {
          int v52 = *v49;
          do
          {
            int v53 = v52;
            int v52 = *v50;
            if (v53 != v52) {
              *++uint64_t v49 = v52;
            }
            ++v50;
          }
          while (v50 != v44);
        }
        unint64_t v54 = (char *)(v49 + 1);
        int64_t v55 = v44 - (v49 + 1);
        if (v55)
        {
          int64_t v56 = v44 - (unsigned __int8 *)&v54[v55];
          if (v44 != (unsigned __int8 *)&v54[v55]) {
            memmove(v54, &v54[v55], v44 - (unsigned __int8 *)&v54[v55]);
          }
          unint64_t v44 = (unsigned __int8 *)&v54[v56];
        }
        break;
      }
    }
  }
  BOOL v51 = v44 - v45 == 1;
  if (v45) {
    operator delete(v45);
  }
  return v51;
}

void sub_9D25C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_9D25FC(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    int v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unsigned int v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          int v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          unsigned __int8 v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    long long v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    unsigned __int8 v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    long long v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    unsigned __int8 v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    unint64_t v54 = (char *)operator new(8 * v53);
    uint64_t v31 = &v54[8 * (v53 >> 2)];
    unsigned __int8 v32 = &v54[8 * v53];
    if (v30)
    {
      int64_t v55 = &v54[8 * v53];
      operator delete(v30);
      unsigned __int8 v32 = v55;
      unint64_t v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      BOOL v35 = v31 + 8;
      unint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  unint64_t v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  BOOL v35 = v31 + 8;
  unint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    long long v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    unint64_t v39 = v9;
    unint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    unint64_t v39 = v9;
    unint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v39 = &v9[-v41];
    unint64_t v36 = &v31[-v41];
    unint64_t v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)unint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  int v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    BOOL v51 = v32;
    memmove(v35, v49, v50);
    unsigned __int8 v32 = v51;
  }
  int v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_9D2954(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 *sub_9D296C(__n128 **a1, uint64_t a2, __n128 *a3)
{
  unint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 4;
  uint64_t v9 = (__n128 *)((char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    unint64_t v30 = ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v30 >> 60) {
      sub_2E00();
    }
    uint64_t v31 = v10 - (void)v5;
    if (v31 >> 3 > v30) {
      unint64_t v30 = v31 >> 3;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v30;
    }
    uint64_t v49 = a1 + 2;
    if (v32)
    {
      if (v32 >> 60) {
        sub_188D718();
      }
      unint64_t v33 = (__n128 *)operator new(16 * v32);
    }
    else
    {
      unint64_t v33 = 0;
    }
    long long v45 = v33;
    uint64_t v46 = &v33[v8];
    int v47 = v46;
    int64_t v48 = (char *)&v33[v32];
    sub_9D2C54((uint64_t)&v45, a3);
    unint64_t v34 = v46;
    BOOL v35 = *a1;
    unint64_t v36 = v46;
    if (*a1 != v9)
    {
      long long v37 = v9;
      unint64_t v38 = v46;
      do
      {
        unint64_t v36 = v38 - 1;
        v38[-1] = v37[-1];
        --v37;
        --v38;
      }
      while (v37 != v35);
    }
    uint64_t v46 = v36;
    unint64_t v39 = a1[1];
    uint64_t v40 = v47;
    if (v39 != v9)
    {
      do
      {
        __n128 v41 = *v9++;
        *v40++ = v41;
      }
      while (v9 != v39);
      unint64_t v36 = v46;
      uint64_t v9 = a1[1];
    }
    unint64_t v42 = *a1;
    *a1 = v36;
    a1[1] = v40;
    uint64_t v43 = (char *)a1[2];
    a1[2] = (__n128 *)v48;
    int v47 = v9;
    int64_t v48 = v43;
    long long v45 = v42;
    uint64_t v46 = v42;
    if (v9 != v42) {
      int v47 = (__n128 *)((char *)v9 + (((char *)v42 - (char *)v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    if (v42) {
      operator delete(v42);
    }
    return v34;
  }
  else if (v9 == (__n128 *)v6)
  {
    __n128 *v9 = *a3;
    a1[1] = v9 + 1;
  }
  else
  {
    int64_t v11 = v9 + 1;
    unint64_t v12 = v6 - 16;
    int v13 = a1[1];
    if (v6 >= 0x10)
    {
      unint64_t v14 = (long long *)(v6 - 16);
      int v13 = a1[1];
      do
      {
        __n128 v15 = (__n128)*v14++;
        *v13++ = v15;
      }
      while ((unint64_t)v14 < v6);
    }
    a1[1] = v13;
    if ((__n128 *)v6 != v11)
    {
      unint64_t v16 = v6 - (void)v11;
      unint64_t v17 = v6 - (void)v11 - 16;
      if (v17 < 0xD0
        || v6 - (v16 & 0xFFFFFFFFFFFFFFF0) < v12
        && (unint64_t)v5->n128_u64 + v16 + (v7 & 0xFFFFFFFFFFFFFFF0) - (v16 & 0xFFFFFFFFFFFFFFF0) < v6)
      {
        goto LABEL_13;
      }
      uint64_t v18 = (v17 >> 4) + 1;
      uint64_t v19 = 16 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
      unint64_t v20 = v6 - v19;
      unint64_t v21 = v12 - v19;
      uint64_t v22 = (_OWORD *)(v6 - 48);
      unsigned __int8 v23 = (_OWORD *)(v6 - 32);
      uint64_t v24 = v18 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        long long v25 = v22[1];
        long long v27 = *(v22 - 2);
        long long v26 = *(v22 - 1);
        *unsigned __int8 v23 = *v22;
        v23[1] = v25;
        *(v23 - 2) = v27;
        *(v23 - 1) = v26;
        v23 -= 4;
        v22 -= 4;
        v24 -= 4;
      }
      while (v24);
      unint64_t v6 = v20;
      unint64_t v12 = v21;
      if (v18 != (v18 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_13:
        uint64_t v28 = (void *)(v6 - 8);
        do
        {
          uint64_t v29 = *(void *)(v12 - 16);
          v12 -= 16;
          *(v28 - 1) = v29;
          *uint64_t v28 = *(void *)(v12 + 8);
          v28 -= 2;
        }
        while ((__n128 *)v12 != v9);
      }
    }
    v9->n128_u64[0] = a3->n128_u64[0];
    v5[v8].n128_u64[1] = a3->n128_u64[1];
  }
  return v9;
}

void sub_9D2C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    int v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    int v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_9D2C54(uint64_t a1, __n128 *a2)
{
  double v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    unint64_t v5 = *(__n128 **)a1;
    unint64_t v6 = *(char **)(a1 + 8);
    if ((unint64_t)v6 > *(void *)a1)
    {
      uint64_t v7 = (uint64_t)&v6[-*(void *)a1] >> 4;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      int64_t v11 = (__n128 *)&v6[-16 * v9];
      if (v6 == (char *)v4) {
        goto LABEL_61;
      }
      unint64_t v12 = (char *)v4 - v6 - 16;
      if (v12 >= 0x210)
      {
        unint64_t v22 = 16 * v10 + (v12 & 0xFFFFFFFFFFFFFFF0);
        unsigned __int8 v23 = v6 + 8;
        uint64_t v24 = &v6[v22 + 8];
        unint64_t v25 = (unint64_t)&v6[16 * v10 + 8];
        unint64_t v26 = (unint64_t)&v6[v22 + 16];
        unint64_t v27 = (unint64_t)&v6[(v12 & 0xFFFFFFFFFFFFFFF0) + 8];
        unint64_t v28 = (unint64_t)&v6[(v12 & 0xFFFFFFFFFFFFFFF0) + 16];
        BOOL v30 = (unint64_t)v11 < v27 && v6 < v24;
        BOOL v32 = (unint64_t)v11 < v28 && v23 < v24;
        BOOL v34 = v25 < v27 && (unint64_t)v6 < v26;
        BOOL v36 = v25 < v28 && (unint64_t)v23 < v26;
        if (v25 >= (unint64_t)v24 || (unint64_t)v11 >= v26)
        {
          if (v30)
          {
            int v13 = *(__n128 **)(a1 + 8);
          }
          else if (v32)
          {
            int v13 = *(__n128 **)(a1 + 8);
          }
          else if (v34)
          {
            int v13 = *(__n128 **)(a1 + 8);
          }
          else if (v36)
          {
            int v13 = *(__n128 **)(a1 + 8);
          }
          else
          {
            uint64_t v38 = (v12 >> 4) + 1;
            uint64_t v39 = 16 * (v38 & 0x1FFFFFFFFFFFFFFCLL);
            int64_t v11 = (__n128 *)((char *)v11 + v39);
            int v13 = (__n128 *)&v6[v39];
            uint64_t v40 = v38 & 0x1FFFFFFFFFFFFFFCLL;
            do
            {
              __n128 v41 = &v6[16 * v10];
              long long v42 = *((_OWORD *)v6 + 1);
              long long v44 = *((_OWORD *)v6 + 2);
              long long v43 = *((_OWORD *)v6 + 3);
              *(_OWORD *)__n128 v41 = *(_OWORD *)v6;
              *((_OWORD *)v41 + 1) = v42;
              *((_OWORD *)v41 + 2) = v44;
              *((_OWORD *)v41 + 3) = v43;
              v6 += 64;
              v40 -= 4;
            }
            while (v40);
            if (v38 == (v38 & 0x1FFFFFFFFFFFFFFCLL)) {
              goto LABEL_60;
            }
          }
        }
        else
        {
          int v13 = *(__n128 **)(a1 + 8);
        }
      }
      else
      {
        int v13 = *(__n128 **)(a1 + 8);
      }
      do
      {
        v11->n128_u64[0] = v13->n128_u64[0];
        v11->n128_u64[1] = v13->n128_u64[1];
        ++v11;
        ++v13;
      }
      while (v13 != v4);
LABEL_60:
      double v4 = *(__n128 **)(a1 + 8);
LABEL_61:
      *(void *)(a1 + 8) = &v4[v10];
      *(void *)(a1 + 16) = v11;
      double v4 = v11;
      goto LABEL_62;
    }
    if (v4 == v5) {
      unint64_t v14 = 1;
    }
    else {
      unint64_t v14 = ((char *)v4 - (char *)v5) >> 3;
    }
    if (v14 >> 60) {
      sub_188D718();
    }
    __n128 v15 = (char *)operator new(16 * v14);
    unint64_t v16 = (__n128 *)&v15[16 * (v14 >> 2)];
    uint64_t v18 = (char *)v4 - v6;
    BOOL v17 = v4 == (__n128 *)v6;
    double v4 = v16;
    if (!v17)
    {
      double v4 = (__n128 *)((char *)v16 + (v18 & 0xFFFFFFFFFFFFFFF0));
      uint64_t v19 = 16 * (v18 >> 4);
      unint64_t v20 = &v15[16 * (v14 >> 2)];
      do
      {
        long long v21 = *(_OWORD *)v6;
        v6 += 16;
        *(_OWORD *)unint64_t v20 = v21;
        v20 += 16;
        v19 -= 16;
      }
      while (v19);
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = &v15[16 * v14];
    if (v5)
    {
      operator delete(v5);
      double v4 = *(__n128 **)(a1 + 16);
    }
  }
LABEL_62:
  __n128 result = *a2;
  __n128 *v4 = *a2;
  *(void *)(a1 + 16) += 16;
  return result;
}

unint64_t sub_9D2E88(unint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, char a5)
{
  int64_t v11 = (unsigned __int8 *)result;
LABEL_2:
  unint64_t v12 = v11;
  while (1)
  {
    int64_t v11 = v12;
    unint64_t v13 = a2 - v12;
    if (v6 || !v5)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned int v72 = *(a2 - 1);
          unsigned int v73 = *v12;
          if (v72 < v73)
          {
            *unint64_t v12 = v72;
            *(a2 - 1) = v73;
          }
          return result;
        case 3uLL:
          unsigned int v74 = v12[1];
          unsigned int v75 = *v12;
          unsigned int v76 = *(a2 - 1);
          if (v74 >= v75)
          {
            if (v76 < v74)
            {
              v12[1] = v76;
              *(a2 - 1) = v74;
              unsigned int v93 = v12[1];
              unsigned int v94 = *v12;
              if (v93 < v94)
              {
                *unint64_t v12 = v93;
                v12[1] = v94;
              }
            }
          }
          else
          {
            if (v76 >= v74)
            {
              *unint64_t v12 = v74;
              v12[1] = v75;
              unsigned int v101 = *(a2 - 1);
              if (v101 >= v75) {
                return result;
              }
              v12[1] = v101;
            }
            else
            {
              *unint64_t v12 = v76;
            }
            *(a2 - 1) = v75;
          }
          return result;
        case 4uLL:
          unint64_t v77 = v12 + 1;
          BOOL v78 = (unsigned __int8 *)v12[1];
          unint64_t v79 = v12 + 2;
          unsigned int v80 = v12[2];
          uint64_t v81 = (unsigned __int8 *)*v12;
          if (v78 >= v81)
          {
            if (v80 >= v78)
            {
LABEL_149:
              LODWORD(v78) = v80;
              unsigned int v95 = *(a2 - 1);
              if (v95 >= v78) {
                return result;
              }
LABEL_150:
              *unint64_t v79 = v95;
              *(a2 - 1) = v78;
              unsigned int v98 = *v79;
              unsigned int v99 = *v77;
              if (v98 < v99)
              {
                v12[1] = v98;
                v12[2] = v99;
                unsigned int v100 = *v12;
                if (v98 < v100)
                {
                  *unint64_t v12 = v98;
                  v12[1] = v100;
                }
              }
              return result;
            }
            *unint64_t v77 = v80;
            *unint64_t v79 = (_BYTE)v78;
            uint64_t v82 = v12;
            unint64_t v83 = v12 + 1;
            __n128 result = (unint64_t)v78;
            if (v80 >= v81)
            {
LABEL_141:
              unsigned int v95 = *(a2 - 1);
              if (v95 >= v78) {
                return result;
              }
              goto LABEL_150;
            }
          }
          else
          {
            uint64_t v82 = v12;
            unint64_t v83 = v12 + 2;
            __n128 result = *v12;
            if (v80 >= v78)
            {
              *unint64_t v12 = v78;
              v12[1] = v81;
              uint64_t v82 = v12 + 1;
              unint64_t v83 = v12 + 2;
              __n128 result = (unint64_t)v81;
              if (v80 >= v81) {
                goto LABEL_149;
              }
            }
          }
          *uint64_t v82 = v80;
          *unint64_t v83 = (_BYTE)v81;
          LODWORD(v78) = result;
          goto LABEL_141;
        case 5uLL:
          return (unint64_t)sub_9D39D8(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1);
        default:
          JUMPOUT(0);
      }
    }
    if ((uint64_t)v13 <= 23) {
      break;
    }
    if (!a4)
    {
      if (v12 != a2)
      {
        return (unint64_t)sub_9D3B14(v12, a2, a2);
      }
      return result;
    }
    unint64_t v14 = v13 >> 1;
    __n128 v15 = &v12[v13 >> 1];
    unsigned int v16 = *(a2 - 1);
    if (v13 < 0x81)
    {
      unsigned int v19 = *v12;
      unsigned int v20 = *v15;
      if (v19 < v20)
      {
        if (v16 < v19)
        {
          *__n128 v15 = v16;
          goto LABEL_32;
        }
        *__n128 v15 = v19;
        *unint64_t v12 = v20;
        unsigned int v33 = *(a2 - 1);
        if (v33 < v20)
        {
          *unint64_t v12 = v33;
LABEL_32:
          *(a2 - 1) = v20;
        }
LABEL_33:
        --a4;
        unsigned int v25 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v16 >= v19) {
        goto LABEL_33;
      }
      *unint64_t v12 = v16;
      *(a2 - 1) = v19;
      unsigned int v23 = *v12;
      unsigned int v24 = *v15;
      if (v23 >= v24) {
        goto LABEL_33;
      }
      *__n128 v15 = v23;
      *unint64_t v12 = v24;
      --a4;
      unsigned int v25 = v24;
      if (a5) {
        goto LABEL_57;
      }
LABEL_56:
      if (*(v12 - 1) < v25) {
        goto LABEL_57;
      }
      if (v25 < *(a2 - 1))
      {
        do
          unsigned int v63 = *++v12;
        while (v25 >= v63);
      }
      else
      {
        uint64_t v64 = v12 + 1;
        do
        {
          unint64_t v12 = v64;
          if (v64 >= a2) {
            break;
          }
          ++v64;
        }
        while (v25 >= *v12);
      }
      int64_t v65 = a2;
      if (v12 < a2)
      {
        int64_t v65 = a2;
        do
          unsigned int v66 = *--v65;
        while (v25 < v66);
      }
      if (v12 < v65)
      {
        unsigned __int8 v67 = *v12;
        unsigned __int8 v68 = *v65;
        do
        {
          *unint64_t v12 = v68;
          unsigned __int8 *v65 = v67;
          do
          {
            unsigned int v69 = *++v12;
            unsigned __int8 v67 = v69;
          }
          while (v25 >= v69);
          do
          {
            unsigned int v70 = *--v65;
            unsigned __int8 v68 = v70;
          }
          while (v25 < v70);
        }
        while (v12 < v65);
      }
      BOOL v71 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        *int64_t v11 = *v71;
      }
      a5 = 0;
      *BOOL v71 = v25;
    }
    else
    {
      unsigned int v17 = *v15;
      unsigned int v18 = *v12;
      if (v17 >= v18)
      {
        if (v16 < v17)
        {
          *__n128 v15 = v16;
          *(a2 - 1) = v17;
          unsigned int v21 = *v15;
          unsigned int v22 = *v12;
          if (v21 < v22)
          {
            *unint64_t v12 = v21;
            *__n128 v15 = v22;
          }
        }
      }
      else
      {
        if (v16 >= v17)
        {
          *unint64_t v12 = v17;
          *__n128 v15 = v18;
          unsigned int v26 = *(a2 - 1);
          if (v26 >= v18) {
            goto LABEL_24;
          }
          *__n128 v15 = v26;
        }
        else
        {
          *unint64_t v12 = v16;
        }
        *(a2 - 1) = v18;
      }
LABEL_24:
      unint64_t v27 = &v12[v14 - 1];
      unsigned int v28 = *v27;
      unsigned int v29 = v12[1];
      unsigned int v30 = *(a2 - 2);
      if (v28 >= v29)
      {
        if (v30 < v28)
        {
          *unint64_t v27 = v30;
          *(a2 - 2) = v28;
          unsigned int v31 = *v27;
          unsigned int v32 = v12[1];
          if (v31 < v32)
          {
            v12[1] = v31;
            *unint64_t v27 = v32;
          }
        }
      }
      else
      {
        if (v30 >= v28)
        {
          v12[1] = v28;
          *unint64_t v27 = v29;
          unsigned int v34 = *(a2 - 2);
          if (v34 >= v29) {
            goto LABEL_38;
          }
          *unint64_t v27 = v34;
        }
        else
        {
          v12[1] = v30;
        }
        *(a2 - 2) = v29;
      }
LABEL_38:
      BOOL v35 = &v12[v14];
      unsigned int v38 = v35[1];
      BOOL v36 = v35 + 1;
      unsigned int v37 = v38;
      unsigned int v39 = v12[2];
      unsigned int v40 = *(a2 - 3);
      if (v38 >= v39)
      {
        if (v40 < v37)
        {
          unsigned __int8 *v36 = v40;
          *(a2 - 3) = v37;
          unsigned int v41 = *v36;
          unsigned int v42 = v12[2];
          if (v41 < v42)
          {
            v12[2] = v41;
            unsigned __int8 *v36 = v42;
          }
        }
      }
      else
      {
        if (v40 >= v37)
        {
          v12[2] = v37;
          unsigned __int8 *v36 = v39;
          unsigned int v43 = *(a2 - 3);
          if (v43 >= v39) {
            goto LABEL_47;
          }
          unsigned __int8 *v36 = v43;
        }
        else
        {
          v12[2] = v40;
        }
        *(a2 - 3) = v39;
      }
LABEL_47:
      unsigned int v44 = *v15;
      unsigned int v45 = *v27;
      unsigned int v46 = *v36;
      if (v44 >= v45)
      {
        if (v46 >= v44) {
          goto LABEL_55;
        }
        *__n128 v15 = v46;
        unsigned __int8 *v36 = v44;
        BOOL v36 = &v12[v13 >> 1];
        LOBYTE(v44) = v45;
        if (v46 < v45)
        {
LABEL_54:
          *unint64_t v27 = v46;
          unsigned __int8 *v36 = v45;
LABEL_55:
          unsigned __int8 v48 = *v12;
          *unint64_t v12 = v44;
          *__n128 v15 = v48;
          --a4;
          unsigned int v25 = *v12;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        unsigned __int8 v62 = *v12;
        *unint64_t v12 = v46;
        *__n128 v15 = v62;
        --a4;
        unsigned int v25 = *v12;
        if (a5) {
          goto LABEL_57;
        }
        goto LABEL_56;
      }
      if (v46 < v44) {
        goto LABEL_54;
      }
      *unint64_t v27 = v44;
      *__n128 v15 = v45;
      unint64_t v27 = &v12[v13 >> 1];
      LOBYTE(v44) = v46;
      if (v46 < v45) {
        goto LABEL_54;
      }
      unsigned __int8 v47 = *v12;
      *unint64_t v12 = v45;
      *__n128 v15 = v47;
      --a4;
      unsigned int v25 = *v12;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v49 = 0;
      do
        unsigned int v50 = v12[++v49];
      while (v50 < v25);
      BOOL v51 = &v12[v49];
      int v52 = a2;
      if (v49 == 1)
      {
        int v52 = a2;
        do
        {
          if (v51 >= v52) {
            break;
          }
          unsigned int v54 = *--v52;
        }
        while (v54 >= v25);
      }
      else
      {
        do
          unsigned int v53 = *--v52;
        while (v53 >= v25);
      }
      if (v51 >= v52)
      {
        unint64_t v60 = v51 - 1;
        if (v51 - 1 == v12) {
          goto LABEL_75;
        }
LABEL_74:
        *unint64_t v12 = *v60;
        goto LABEL_75;
      }
      unsigned __int8 v55 = *v52;
      uint64_t v56 = &v12[v49];
      unint64_t v57 = v52;
      do
      {
        *uint64_t v56 = v55;
        *unint64_t v57 = v50;
        do
        {
          unsigned int v58 = *++v56;
          LOBYTE(v50) = v58;
        }
        while (v58 < v25);
        do
        {
          unsigned int v59 = *--v57;
          unsigned __int8 v55 = v59;
        }
        while (v59 >= v25);
      }
      while (v56 < v57);
      unint64_t v60 = v56 - 1;
      if (v56 - 1 != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *unint64_t v60 = v25;
      if (v51 < v52) {
        goto LABEL_78;
      }
      BOOL v61 = sub_9D3690(v12, v60);
      unint64_t v12 = v60 + 1;
      __n128 result = sub_9D3690(v60 + 1, a2);
      if (result)
      {
        a2 = v60;
        if (v61) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v61)
      {
LABEL_78:
        __n128 result = sub_9D2E88(v11, v60, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v12 = v60 + 1;
      }
    }
  }
  uint64_t v84 = v12 + 1;
  BOOL v86 = v12 == a2 || v84 == a2;
  if (a5)
  {
    if (!v86)
    {
      uint64_t v87 = 0;
      unint64_t v88 = v12;
      do
      {
        unsigned int v90 = v88[1];
        unsigned int v91 = *v88;
        unint64_t v88 = v84;
        if (v90 < v91)
        {
          uint64_t v92 = v87;
          do
          {
            v12[v92 + 1] = v91;
            if (!v92)
            {
              unint64_t v89 = v12;
              goto LABEL_124;
            }
            unsigned int v91 = v12[--v92];
          }
          while (v90 < v91);
          unint64_t v89 = &v12[v92 + 1];
LABEL_124:
          *unint64_t v89 = v90;
        }
        uint64_t v84 = v88 + 1;
        ++v87;
      }
      while (v88 + 1 != a2);
    }
  }
  else if (!v86)
  {
    do
    {
      unsigned int v96 = v11[1];
      unsigned int v97 = *v11;
      int64_t v11 = v84;
      if (v96 < v97)
      {
        do
        {
          *uint64_t v84 = v97;
          unsigned int v97 = *(v84 - 2);
          --v84;
        }
        while (v96 < v97);
        *uint64_t v84 = v96;
      }
      uint64_t v84 = v11 + 1;
    }
    while (v11 + 1 != a2);
  }
  return result;
}

BOOL sub_9D3690(unsigned __int8 *a1, unsigned __int8 *a2)
{
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      unsigned int v9 = *(a2 - 1);
      unsigned int v10 = *a1;
      if (v9 >= v10) {
        return 1;
      }
      *a1 = v9;
      *(a2 - 1) = v10;
      return 1;
    case 3:
      unsigned int v11 = a1[1];
      unsigned int v12 = *a1;
      unsigned int v13 = *(a2 - 1);
      if (v11 >= v12)
      {
        if (v13 >= v11) {
          return 1;
        }
        a1[1] = v13;
        *(a2 - 1) = v11;
        unsigned int v28 = a1[1];
        unsigned int v29 = *a1;
        if (v28 >= v29) {
          return 1;
        }
        *a1 = v28;
        a1[1] = v29;
        return 1;
      }
      else if (v13 >= v11)
      {
        *a1 = v11;
        a1[1] = v12;
        unsigned int v34 = *(a2 - 1);
        if (v34 >= v12) {
          return 1;
        }
        a1[1] = v34;
        *(a2 - 1) = v12;
        return 1;
      }
      else
      {
        *a1 = v13;
        *(a2 - 1) = v12;
        return 1;
      }
    case 4:
      unint64_t v14 = a1 + 1;
      unsigned int v15 = a1[1];
      unsigned int v16 = a1 + 2;
      unsigned int v17 = a1[2];
      unsigned int v18 = *a1;
      if (v15 < v18)
      {
        unsigned int v19 = a1;
        unsigned int v20 = a1 + 2;
        unsigned int v21 = *a1;
        if (v17 >= v15)
        {
          *a1 = v15;
          a1[1] = v18;
          unsigned int v19 = a1 + 1;
          unsigned int v20 = a1 + 2;
          unsigned int v21 = v18;
          if (v17 >= v18) {
            goto LABEL_38;
          }
        }
LABEL_35:
        unsigned char *v19 = v17;
        unsigned char *v20 = v18;
        unsigned int v15 = v21;
LABEL_36:
        unsigned int v30 = *(a2 - 1);
        if (v30 >= v15) {
          return 1;
        }
        goto LABEL_39;
      }
      if (v17 < v15)
      {
        unsigned char *v14 = v17;
        *unsigned int v16 = v15;
        unsigned int v19 = a1;
        unsigned int v20 = a1 + 1;
        unsigned int v21 = v15;
        if (v17 >= v18) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
LABEL_38:
      unsigned int v15 = v17;
      unsigned int v30 = *(a2 - 1);
      if (v30 >= v15) {
        return 1;
      }
LABEL_39:
      *unsigned int v16 = v30;
      *(a2 - 1) = v15;
      unsigned int v31 = *v16;
      unsigned int v32 = *v14;
      if (v31 >= v32) {
        return 1;
      }
      a1[1] = v31;
      a1[2] = v32;
      unsigned int v33 = *a1;
      if (v31 >= v33) {
        return 1;
      }
      *a1 = v31;
      a1[1] = v33;
      return 1;
    case 5:
      sub_9D39D8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      double v4 = a1 + 2;
      unsigned int v3 = a1[2];
      unsigned int v5 = a1[1];
      unsigned int v6 = *a1;
      if (v5 >= v6)
      {
        if (v3 >= v5) {
          goto LABEL_20;
        }
        a1[1] = v3;
        unsigned char *v4 = v5;
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 1;
      }
      else
      {
        uint64_t v7 = a1;
        uint64_t v8 = a1 + 2;
        if (v3 < v5) {
          goto LABEL_19;
        }
        *a1 = v5;
        a1[1] = v6;
        uint64_t v7 = a1 + 1;
        uint64_t v8 = a1 + 2;
      }
      if (v3 >= v6) {
        goto LABEL_20;
      }
LABEL_19:
      *uint64_t v7 = v3;
      unsigned char *v8 = v6;
LABEL_20:
      unsigned int v22 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v23 = 0;
      int v24 = 0;
      while (1)
      {
        unsigned int v25 = *v22;
        unsigned int v26 = *v4;
        if (v25 < v26) {
          break;
        }
LABEL_23:
        double v4 = v22;
        ++v23;
        if (++v22 == a2) {
          return 1;
        }
      }
      uint64_t v27 = v23;
      do
      {
        a1[v27 + 3] = v26;
        if (v27 == -2)
        {
          *a1 = v25;
          if (++v24 != 8) {
            goto LABEL_23;
          }
          return v22 + 1 == a2;
        }
        unsigned int v26 = a1[v27-- + 1];
      }
      while (v25 < v26);
      a1[v27 + 3] = v25;
      if (++v24 != 8) {
        goto LABEL_23;
      }
      return v22 + 1 == a2;
  }
}

unsigned char *sub_9D39D8(unsigned char *result, unsigned char *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5)
{
  unsigned int v5 = *a2;
  unsigned int v6 = *result;
  unsigned int v7 = *a3;
  if (v5 >= v6)
  {
    if (v7 >= v5)
    {
      LOBYTE(v5) = *a3;
      unsigned int v10 = *a4;
      if (v10 >= v7) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
    *a2 = v7;
    *a3 = v5;
    unsigned int v8 = *a2;
    unsigned int v9 = *result;
    if (v8 < v9)
    {
      void *result = v8;
      *a2 = v9;
      unsigned int v5 = *a3;
      unsigned int v10 = *a4;
      if (v10 >= v5) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    if (v7 >= v5)
    {
      void *result = v5;
      *a2 = v6;
      unsigned int v5 = *a3;
      if (v5 >= v6) {
        goto LABEL_11;
      }
      *a2 = v5;
    }
    else
    {
      void *result = v7;
    }
    *a3 = v6;
    unsigned int v5 = v6;
  }
LABEL_11:
  unsigned int v10 = *a4;
  if (v10 >= v5) {
    goto LABEL_17;
  }
LABEL_14:
  *a3 = v10;
  *a4 = v5;
  unsigned int v11 = *a3;
  unsigned int v12 = *a2;
  if (v11 < v12)
  {
    *a2 = v11;
    *a3 = v12;
    unsigned int v13 = *a2;
    unsigned int v14 = *result;
    if (v13 < v14)
    {
      void *result = v13;
      *a2 = v14;
    }
  }
LABEL_17:
  unsigned int v15 = *a5;
  unsigned int v16 = *a4;
  if (v15 < v16)
  {
    *a4 = v15;
    *a5 = v16;
    unsigned int v17 = *a4;
    unsigned int v18 = *a3;
    if (v17 < v18)
    {
      *a3 = v17;
      *a4 = v18;
      unsigned int v19 = *a3;
      unsigned int v20 = *a2;
      if (v19 < v20)
      {
        *a2 = v19;
        *a3 = v20;
        unsigned int v21 = *a2;
        unsigned int v22 = *result;
        if (v21 < v22)
        {
          void *result = v21;
          *a2 = v22;
        }
      }
    }
  }
  return result;
}

unsigned __int8 *sub_9D3B14(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a2 - a1;
  if (a2 - a1 >= 2)
  {
    int64_t v4 = (unint64_t)(a2 - a1 - 2) >> 1;
    int64_t v5 = v4;
    do
    {
      if (v4 >= v5)
      {
        uint64_t v7 = (2 * v5) | 1;
        unsigned int v8 = &a1[v7];
        if (2 * v5 + 2 >= v3)
        {
          unsigned int v10 = *v8;
          unsigned int v12 = &a1[v5];
          unsigned int v13 = a1[v5];
          if (v10 >= v13) {
            goto LABEL_22;
          }
        }
        else
        {
          unsigned int v9 = *v8;
          unsigned int v10 = v8[1];
          BOOL v11 = v9 >= v10;
          if (v9 > v10) {
            unsigned int v10 = *v8;
          }
          if (!v11)
          {
            ++v8;
            uint64_t v7 = 2 * v5 + 2;
          }
          unsigned int v12 = &a1[v5];
          unsigned int v13 = a1[v5];
          if (v10 >= v13)
          {
LABEL_22:
            while (1)
            {
              *unsigned int v12 = v10;
              unsigned int v12 = v8;
              if (v4 < v7) {
                break;
              }
              uint64_t v16 = (2 * v7) | 1;
              unsigned int v8 = &a1[v16];
              uint64_t v7 = 2 * v7 + 2;
              if (v7 < v3)
              {
                unsigned int v10 = *v8;
                unsigned int v14 = v8[1];
                BOOL v15 = v10 >= v14;
                if (v10 <= v14) {
                  unsigned int v10 = v8[1];
                }
                if (v15) {
                  uint64_t v7 = v16;
                }
                else {
                  ++v8;
                }
                if (v10 < v13) {
                  break;
                }
              }
              else
              {
                unsigned int v10 = *v8;
                uint64_t v7 = v16;
                if (v10 < v13) {
                  break;
                }
              }
            }
            *unsigned int v12 = v13;
          }
        }
      }
      BOOL v6 = v5-- <= 0;
    }
    while (!v6);
  }
  unsigned int v17 = a2;
  if (a2 != a3)
  {
    if (v3 < 2)
    {
      unsigned int v18 = *a1;
      unsigned int v19 = a2;
      do
      {
        unsigned int v20 = *v19;
        if (v20 < v18)
        {
          unsigned __int8 *v19 = v18;
          *a1 = v20;
          unsigned int v18 = v20;
        }
        ++v19;
      }
      while (v19 != a3);
LABEL_59:
      unsigned int v17 = a3;
      goto LABEL_60;
    }
    unsigned int v21 = a2;
    while (1)
    {
      unsigned int v22 = *v21;
      unsigned int v23 = *a1;
      if (v22 < v23)
      {
        *unsigned int v21 = v23;
        *a1 = v22;
        unsigned int v24 = a1[1];
        if (v3 == 2)
        {
          unsigned int v25 = a1 + 1;
          uint64_t v26 = 1;
          if (v24 >= v22) {
            goto LABEL_48;
          }
        }
        else
        {
          unsigned int v27 = a1[2];
          BOOL v28 = v24 >= v27;
          if (v24 <= v27) {
            unsigned int v24 = a1[2];
          }
          if (v28) {
            unsigned int v25 = a1 + 1;
          }
          else {
            unsigned int v25 = a1 + 2;
          }
          if (v28) {
            uint64_t v26 = 1;
          }
          else {
            uint64_t v26 = 2;
          }
          if (v24 >= v22)
          {
LABEL_48:
            unsigned int v29 = a1;
            while (1)
            {
              *unsigned int v29 = v24;
              unsigned int v29 = v25;
              if ((uint64_t)((unint64_t)(v3 - 2) >> 1) < v26) {
                break;
              }
              uint64_t v32 = (2 * v26) | 1;
              unsigned int v25 = &a1[v32];
              uint64_t v26 = 2 * v26 + 2;
              if (v26 < v3)
              {
                unsigned int v24 = *v25;
                unsigned int v30 = v25[1];
                BOOL v31 = v24 >= v30;
                if (v24 <= v30) {
                  unsigned int v24 = v25[1];
                }
                if (v31) {
                  uint64_t v26 = v32;
                }
                else {
                  ++v25;
                }
                if (v24 < v22) {
                  break;
                }
              }
              else
              {
                unsigned int v24 = *v25;
                uint64_t v26 = v32;
                if (v24 < v22) {
                  break;
                }
              }
            }
            *unsigned int v29 = v22;
          }
        }
      }
      if (++v21 == a3) {
        goto LABEL_59;
      }
    }
  }
LABEL_60:
  if (v3 >= 2)
  {
    do
    {
      uint64_t v34 = 0;
      unsigned __int8 v35 = *a1;
      int64_t v36 = (unint64_t)(v3 - 2) >> 1;
      unsigned int v37 = a1;
      do
      {
        while (1)
        {
          unsigned int v41 = &v37[v34 + 1];
          uint64_t v42 = (2 * v34) | 1;
          uint64_t v34 = 2 * v34 + 2;
          if (v34 < v3) {
            break;
          }
          uint64_t v34 = v42;
          unsigned __int8 *v37 = *v41;
          unsigned int v37 = v41;
          if (v42 > v36) {
            goto LABEL_74;
          }
        }
        unsigned int v38 = *v41;
        unsigned int v39 = v41[1];
        BOOL v40 = v38 >= v39;
        if (v38 <= v39) {
          LOBYTE(v38) = v41[1];
        }
        if (v40) {
          uint64_t v34 = v42;
        }
        else {
          ++v41;
        }
        unsigned __int8 *v37 = v38;
        unsigned int v37 = v41;
      }
      while (v34 <= v36);
LABEL_74:
      if (v41 == --a2)
      {
        *unsigned int v41 = v35;
      }
      else
      {
        *unsigned int v41 = *a2;
        *a2 = v35;
        if (v41 - a1 + 1 >= 2)
        {
          unint64_t v43 = (unint64_t)(v41 - a1 - 1) >> 1;
          unsigned int v44 = &a1[v43];
          unsigned int v45 = a1[v43];
          unsigned int v46 = *v41;
          if (v45 < v46)
          {
            do
            {
              *unsigned int v41 = v45;
              unsigned int v41 = v44;
              if (!v43) {
                break;
              }
              unint64_t v43 = (v43 - 1) >> 1;
              unsigned int v44 = &a1[v43];
              unsigned int v45 = a1[v43];
            }
            while (v45 < v46);
            *unsigned int v41 = v46;
          }
        }
      }
      BOOL v6 = v3-- <= 2;
    }
    while (!v6);
  }
  return v17;
}

double sub_9D3E5C()
{
  byte_25DD027 = 1;
  word_25DD010 = 65;
  byte_25DD03F = 1;
  word_25DD028 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DD0E8 = 0u;
  xmmword_25DD0F8 = 0u;
  dword_25DD108 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DD0E8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DD0E8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DD0E8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DD0E8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DD057 = 8;
  strcpy((char *)&qword_25DD040, "any_mode");
  byte_25DD06F = 7;
  strcpy((char *)&dword_25DD058, "cycling");
  byte_25DD087 = 7;
  strcpy((char *)&dword_25DD070, "driving");
  byte_25DD09F = 7;
  strcpy((char *)&dword_25DD088, "walking");
  qword_25DD0A8 = 0;
  qword_25DD0B0 = 0;
  qword_25DD0A0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DD0A0 = (uint64_t)v0;
  qword_25DD0A8 = (uint64_t)(v0 + 9);
  qword_25DD0B0 = (uint64_t)(v0 + 9);
  qword_25DD0B8 = 0;
  qword_25DD0C0 = 0;
  unk_25DD0C8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DD0C0 = (uint64_t)(v1 + 9);
  unk_25DD0C8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DD0B8 = (uint64_t)v1;
  return result;
}

void sub_9D4128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if ((void)xmmword_25DD0F8) {
    sub_20AD6F8((void **)xmmword_25DD0F8);
  }
  unsigned int v37 = (void *)xmmword_25DD0E8;
  *(void *)&xmmword_25DD0E8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_9D41C8(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)*a2;
  uint64_t v3 = (void *)a2[1];
  if ((void *)*a2 != v3)
  {
    do
    {
      sub_9D421C(a1, (uint64_t)a2, v2);
      v2 += 390;
    }
    while (v2 != v3);
  }
}

void sub_9D421C(uint64_t a1, uint64_t a2, void *a3)
{
  sub_9E6208((uint64_t)v18, a3);
  while (1)
  {
    sub_9E6260((uint64_t)v18, v12);
    BOOL v4 = sub_9E6044(v18, v12);
    sub_9467EC((uint64_t)&v17);
    int v5 = __p;
    if (__p)
    {
      do
      {
        BOOL v6 = (void *)*v5;
        operator delete(v5);
        int v5 = v6;
      }
      while (v6);
    }
    char v7 = v15;
    BOOL v15 = 0;
    if (v7) {
      operator delete(v7);
    }
    if (v13)
    {
      int v14 = v13;
      operator delete(v13);
    }
    if (!v4) {
      break;
    }
    if (*(_DWORD *)sub_9E6230((uint64_t)v18) == 2)
    {
      sub_9E5A94((uint64_t)v18, 0xFFFFFFFFFFFFFFFFLL, (char **)v12);
      uint64_t v8 = sub_9E6230((uint64_t)v18);
      sub_9D43C4(v8, a2, (uint64_t *)v12, v8);
      if (v12[0])
      {
        v12[1] = v12[0];
        operator delete(v12[0]);
      }
    }
    sub_9E5780(v18);
  }
  sub_9467EC((uint64_t)&v23);
  unsigned int v9 = v22;
  if (v22)
  {
    do
    {
      char v10 = (void *)*v9;
      operator delete(v9);
      unsigned int v9 = v10;
    }
    while (v10);
  }
  int v11 = v21;
  unsigned int v21 = 0;
  if (v11) {
    operator delete(v11);
  }
  if (v19)
  {
    unsigned int v20 = v19;
    operator delete(v19);
  }
}

void sub_9D4368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

uint64_t sub_9D43C4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result = sub_9D44E8((uint64_t *)(a2 + 24), a3);
  unsigned int v7 = *(_DWORD *)(a4 + 1008);
  if (v7 <= 5)
  {
    if (((1 << v7) & 0x26) != 0)
    {
      if (*(unsigned char *)(a4 + 792))
      {
        int v8 = *(_DWORD *)(a4 + 116);
        uint64_t v9 = *(void *)(a4 + 768);
        if (v8 == 0x7FFFFFFF)
        {
          int v8 = *(_DWORD *)(a4 + 40);
          int v10 = v8;
        }
        else if (*(_DWORD *)(a4 + 120) == 0x7FFFFFFF)
        {
          int v10 = *(_DWORD *)(a4 + 116);
        }
        else
        {
          int v10 = *(_DWORD *)(a4 + 120);
        }
LABEL_17:
        *(void *)(a4 + 2176) = v9;
        *(_DWORD *)(a4 + 2184) = v8;
        *(_DWORD *)(a4 + 2188) = v10;
        *(void *)(a4 + 2192) = result;
        return result;
      }
    }
    else
    {
      if (((1 << v7) & 0x18) == 0) {
        return result;
      }
      if (*(unsigned char *)(a4 + 792))
      {
        int v11 = *(int **)(a4 + 488);
        if (v11 == *(int **)(a4 + 496)) {
          return result;
        }
        if (v7 == 4)
        {
          unsigned int v12 = (int *)(a2 + 292);
        }
        else
        {
          unsigned int v12 = v11 + 1;
          if (v11[1] == 0x7FFFFFFF) {
            unsigned int v12 = *(int **)(a4 + 488);
          }
        }
        int v10 = *v12;
        uint64_t v9 = *(void *)(v11 + 3);
        int v8 = *v11;
        goto LABEL_17;
      }
    }
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  return result;
}

uint64_t sub_9D44E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    while (**(_DWORD **)v2 != 4)
    {
      v2 += 8;
      if (v2 == v3)
      {
        uint64_t v2 = a2[1];
        break;
      }
    }
  }
  unint64_t v4 = *(void *)(*(void *)v2 + 56);
  uint64_t v5 = *a1;
  if (0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3) <= v4) {
    sub_66748();
  }
  unint64_t v6 = *(void *)(v5 + 168 * v4 + 104);
  if (v6 == -1) {
    return *(void *)(v5 + 168 * v4 + 88);
  }
  uint64_t v7 = a1[3];
  if (0x8E38E38E38E38E39 * ((a1[4] - v7) >> 4) <= v6) {
    sub_66748();
  }
  unint64_t v8 = *(void *)(v7 + 144 * v6 + 104);
  if (v8 == -1) {
    return *(void *)(v7 + 144 * v6 + 88);
  }
  uint64_t v9 = a1[6];
  if (0xF0F0F0F0F0F0F0F1 * ((a1[7] - v9) >> 3) <= v8) {
    sub_66748();
  }
  return *(void *)(v9 + 136 * v8 + 88);
}

double sub_9D4610()
{
  byte_25DD127 = 1;
  word_25DD110 = 65;
  byte_25DD13F = 1;
  word_25DD128 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DD1D0 = 0u;
  *(_OWORD *)&qword_25DD1E0 = 0u;
  dword_25DD1F0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DD1D0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DD1D0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DD1D0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DD1D0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DD157 = 8;
  strcpy((char *)&qword_25DD140, "any_mode");
  byte_25DD16F = 7;
  strcpy((char *)&dword_25DD158, "cycling");
  byte_25DD187 = 7;
  strcpy((char *)&dword_25DD170, "driving");
  byte_25DD19F = 7;
  strcpy((char *)&dword_25DD188, "walking");
  qword_25DD1A8 = 0;
  qword_25DD1B0 = 0;
  qword_25DD1A0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DD1A0 = (uint64_t)v0;
  qword_25DD1A8 = (uint64_t)(v0 + 9);
  qword_25DD1B0 = (uint64_t)(v0 + 9);
  qword_25DD1B8 = 0;
  qword_25DD1C0 = 0;
  unk_25DD1C8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DD1C0 = (uint64_t)(v1 + 9);
  unk_25DD1C8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DD1B8 = (uint64_t)v1;
  return result;
}

void sub_9D48D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DD1E0) {
    sub_20AD73C((void **)qword_25DD1E0);
  }
  unsigned int v37 = (void *)xmmword_25DD1D0;
  *(void *)&xmmword_25DD1D0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_9D4978(void *result, uint64_t a2, uint64_t a3)
{
  void *result = a3;
  result[1] = a2;
  return result;
}

void sub_9D4980(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v5 == v4 || *(_DWORD *)(v4 - 5704) != 4) {
    goto LABEL_11;
  }
  while (*(_DWORD *)v5 != 2)
  {
    v5 += 5704;
    if (v5 == v4) {
      goto LABEL_11;
    }
  }
  if (v5 == v4)
  {
LABEL_11:
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = -1;
    *(_DWORD *)(a3 + 40) = -1;
    *(_DWORD *)(a3 + 43) = -1;
    *(void *)(a3 + 47) = 0;
    *(void *)(a3 + 55) = 0;
    *(void *)(a3 + 63) = 0;
    *(_WORD *)(a3 + 71) = 0;
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    *(unsigned char *)(a3 + 104) = 0;
    return;
  }
  if (!*(unsigned char *)(v5 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v8 = *(void *)(v5 + 752);
  uint64_t v9 = (*a1)[9];
  std::string __p = 0;
  std::string __dst = 0;
  unsigned int v29 = 0;
  char v10 = (char **)(v9 + 696 * v8);
  int v11 = v10[72];
  unsigned int v12 = v10[71];
  int64_t v13 = v10[75] - v10[74];
  int64_t v14 = &v10[78][(void)v11] - &v10[77][(void)v12];
  int64_t v15 = v14 + v13;
  if (v14 + v13)
  {
    if (v15 < 0) {
      sub_2E00();
    }
    uint64_t v16 = (char *)operator new(v14 + v13);
    std::string __p = v16;
    std::string __dst = v16;
    unsigned int v29 = &v16[v15];
    unsigned int v12 = v10[71];
    int v11 = v10[72];
  }
  else
  {
    uint64_t v16 = 0;
  }
  sub_686B68((uint64_t)&__p, v16, v12, v11, v11 - v12);
  sub_686B68((uint64_t)&__p, (char *)__dst, v10[77], v10[78], v10[78] - v10[77]);
  sub_686B68((uint64_t)&__p, (char *)__dst, v10[74], v10[75], v10[75] - v10[74]);
  uint64_t v17 = (unsigned __int8 *)__p;
  if (__p != __dst)
  {
    unsigned int v18 = (unsigned __int8 *)__p + 1;
    if ((char *)__p + 1 != __dst)
    {
      while (1)
      {
        unint64_t v19 = (char)*v18;
        if (v19 > 7)
        {
          unsigned int v20 = 0;
          uint64_t v21 = (char)*v17;
          if (v21 <= 7) {
            goto LABEL_17;
          }
LABEL_24:
          if (++v18 == __dst) {
            break;
          }
        }
        else
        {
          unsigned int v20 = dword_20EA858[v19];
          uint64_t v21 = (char)*v17;
          if (v21 > 7) {
            goto LABEL_24;
          }
LABEL_17:
          if (v20 < dword_20EA858[v21]) {
            uint64_t v17 = v18;
          }
          if (++v18 == __dst) {
            break;
          }
        }
      }
    }
  }
  if (v17 == __dst) {
    int v22 = 0;
  }
  else {
    int v22 = *v17;
  }
  uint64_t v23 = sub_969500(a1[1], v5, v22);
  sub_4F57A0(a3, (uint64_t)v23);
  int v24 = *(_DWORD *)(a3 + 32);
  if (v24 == 1)
  {
    if (*(_DWORD *)(a3 + 4) != -1 || *(_DWORD *)a3 != -1 || *(void *)(a3 + 8) != *(void *)(a3 + 16)) {
      goto LABEL_36;
    }
  }
  else if (!v24 && *(_DWORD *)a3 != -1)
  {
    goto LABEL_36;
  }
  uint64_t v25 = v9 + 696 * v8;
  sub_4F39B8(a3, (std::string *)(v25 + 104));
  *(void *)(a3 + 40) = *(void *)(v25 + 144);
  std::string::operator=((std::string *)(a3 + 48), (const std::string *)(v25 + 152));
  *(unsigned char *)(a3 + 72) = *(unsigned char *)(v25 + 176);
  std::string::operator=((std::string *)(a3 + 80), (const std::string *)(v25 + 184));
  *(unsigned char *)(a3 + 104) = *(unsigned char *)(v25 + 208);
LABEL_36:
  if (sub_97C9C0(a2)) {
    *(unsigned char *)(a3 + 104) = 1;
  }
  if (__p)
  {
    std::string __dst = __p;
    operator delete(__p);
  }
}

void sub_9D4CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9D4D24()
{
  byte_25DD20F = 1;
  word_25DD1F8 = 65;
  byte_25DD227 = 1;
  word_25DD210 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DD2B8 = 0u;
  *(_OWORD *)&qword_25DD2C8 = 0u;
  dword_25DD2D8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DD2B8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DD2B8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DD2B8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DD2B8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DD23F = 8;
  strcpy((char *)&qword_25DD228, "any_mode");
  byte_25DD257 = 7;
  strcpy((char *)&dword_25DD240, "cycling");
  byte_25DD26F = 7;
  strcpy((char *)&dword_25DD258, "driving");
  byte_25DD287 = 7;
  strcpy((char *)&dword_25DD270, "walking");
  qword_25DD290 = 0;
  qword_25DD298 = 0;
  qword_25DD288 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DD288 = (uint64_t)v0;
  qword_25DD290 = (uint64_t)(v0 + 9);
  qword_25DD298 = (uint64_t)(v0 + 9);
  qword_25DD2A0 = 0;
  qword_25DD2A8 = 0;
  unk_25DD2B0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DD2A8 = (uint64_t)(v1 + 9);
  unk_25DD2B0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DD2A0 = (uint64_t)v1;
  return result;
}

void sub_9D4FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DD2C8) {
    sub_20AD780((void **)qword_25DD2C8);
  }
  unsigned int v37 = (void *)xmmword_25DD2B8;
  *(void *)&xmmword_25DD2B8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t *sub_9D508C(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = result[1];
  if (*result != v2)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    if (*(void *)(v1 + 8) != v3 && *(_DWORD *)(v3 - 5704) == 4)
    {
      char v4 = result;
      while (1)
      {
        uint64_t v5 = *(void *)(v1 + 8);
        uint64_t v6 = *(void *)(v1 + 16);
        if (v5 != v6)
        {
          while (*(_DWORD *)v5 != 2)
          {
            v5 += 5704;
            if (v5 == v6) {
              goto LABEL_5;
            }
          }
        }
        if (v5 != v6)
        {
          if (!*(unsigned char *)(v5 + 792)) {
            goto LABEL_21;
          }
          double result = (uint64_t *)sub_BB7C((_DWORD *)(v5 + 144));
          if (!result) {
            break;
          }
        }
LABEL_5:
        v1 += 104;
        if (v1 == v2) {
          return result;
        }
      }
      uint64_t v7 = *v4;
      uint64_t v8 = v4[1];
      if (*v4 != v8)
      {
        while (1)
        {
          uint64_t v9 = *(void *)(v7 + 8);
          uint64_t v10 = *(void *)(v7 + 16);
          if (v9 != v10)
          {
            while (*(_DWORD *)v9 != 2)
            {
              v9 += 5704;
              if (v9 == v10)
              {
                uint64_t v9 = *(void *)(v7 + 16);
                break;
              }
            }
          }
          if (!*(unsigned char *)(v9 + 792)) {
            break;
          }
          *(unsigned char *)(v9 + 744) = 1;
          v7 += 104;
          if (v7 == v8) {
            return result;
          }
        }
LABEL_21:
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
    }
  }
  return result;
}

void *sub_9D51C8(void *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = result[1];
  uint64_t v3 = v2 - *result;
  unint64_t v4 = 0x4EC4EC4EC4EC4EC5 * (v3 >> 3);
  if (v2 != *result && v4 >= 2)
  {
    uint64_t v6 = *(void *)(v1 + 8);
    uint64_t v7 = *(void *)(v1 + 16);
    if (v6 != v7 && *(_DWORD *)(v7 - 5704) == 4)
    {
      uint64_t v8 = result;
      if (v3 == 104)
      {
        unint64_t v9 = 0;
        uint64_t v10 = *(void *)(v1 + 16);
        if (v6 != v10) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v11 = 0;
        while (*(_DWORD *)(v1 + v11))
        {
          v11 += 104;
          if (v1 + v11 == v2) {
            goto LABEL_14;
          }
        }
        unint64_t v9 = 0x4EC4EC4EC4EC4EC5 * (v11 >> 3);
        if (v4 <= v9) {
LABEL_14:
        }
          sub_66748();
        uint64_t v6 = *(void *)(v1 + 8 * (v11 >> 3) + 8);
        uint64_t v10 = *(void *)(v1 + 104 * v9 + 16);
        if (v6 != v10)
        {
LABEL_17:
          while (*(_DWORD *)v6 != 2)
          {
            v6 += 5704;
            if (v6 == v10)
            {
              uint64_t v6 = v10;
              break;
            }
          }
        }
      }
      if (*(unsigned char *)(v6 + 2104) || *(unsigned char *)(v6 + 2144))
      {
        uint64_t v12 = 0;
        uint64_t v13 = v6 + 2024;
        do
        {
          if (v12 != v9)
          {
            uint64_t v14 = *v8 + 104 * v12;
            int64_t v15 = *(_DWORD **)(v14 + 8);
            uint64_t v16 = *(_DWORD **)(v14 + 16);
            if (v15 != v16)
            {
              while (*v15 != 2)
              {
                v15 += 1426;
                if (v15 == v16)
                {
                  int64_t v15 = v16;
                  break;
                }
              }
            }
            double result = (void *)sub_9BDB4C((uint64_t)(v15 + 506), v13);
          }
          ++v12;
        }
        while (v12 != v4);
      }
    }
  }
  return result;
}

void sub_9D5364(uint64_t *a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a3[2] == 1 || *(unsigned char *)(a2 + 174) != 0) {
    goto LABEL_5;
  }
  int v11 = sub_9C93CC(a2);
  sub_9C92C0(a2, (uint64_t)v24);
  uint64_t v12 = *(unsigned int *)v24;
  uint64_t v13 = sub_9C94F0(a2);
  int v14 = sub_9C9508(a2);
  if (!sub_9C945C((void *)a2))
  {
    if (*(void *)v13 != *(void *)(v13 + 8))
    {
      int v16 = **(_DWORD **)v13;
      if (v16 != 0x7FFFFFFF)
      {
        int v17 = v16 - v11;
        if (v17 > 10799)
        {
          uint64_t v18 = (v17 + v12);
          uint64_t v25 = (v18 << 32) | 2;
          if (v18 != 0x7FFFFFFF) {
            goto LABEL_24;
          }
        }
      }
    }
LABEL_5:
    *(void *)(a5 + 160) = 0;
    *(_OWORD *)(a5 + 128) = 0u;
    *(_OWORD *)(a5 + 144) = 0u;
    *(_OWORD *)(a5 + 96) = 0u;
    *(_OWORD *)(a5 + 112) = 0u;
    *(_OWORD *)(a5 + 64) = 0u;
    *(_OWORD *)(a5 + 80) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    sub_5F3B34(a5);
    *(_DWORD *)(a5 + 160) = 0;
    return;
  }
  int v15 = *a3;
  if (v14 != 0x7FFFFFFF) {
    int v15 = v14;
  }
  if (v11 - v15 <= 10799)
  {
    unint64_t v19 = *(int **)v13;
    unsigned int v20 = *(int **)(v13 + 8);
    if (*(int **)v13 != v20)
    {
      int v21 = v11;
      while (v21 - v11 <= 3600)
      {
        int v22 = *v19;
        if (*v19 - v21 >= 10800)
        {
          uint64_t v23 = (v21 - v11 + v12);
          uint64_t v25 = (v23 << 32) | 1;
          if (v23 == 0x7FFFFFFF) {
            goto LABEL_5;
          }
          goto LABEL_24;
        }
        v19 += 3;
        int v21 = v22;
        if (v19 == v20) {
          goto LABEL_5;
        }
      }
    }
    goto LABEL_5;
  }
  uint64_t v25 = v12 << 32;
  if (v12 == 0x7FFFFFFF) {
    goto LABEL_5;
  }
LABEL_24:
  sub_9C93D8(a2, (uint64_t)v24);
  sub_9D5558(a1, (int *)&v25, *(_DWORD *)(a2 + 168), (const char *)(a2 + 144), (const char *)(a2 + 96), v24[0], a3, a4, a5);
}

void sub_9D5558(uint64_t *a1@<X0>, int *a2@<X1>, int a3@<W2>, const char *a4@<X3>, const char *a5@<X4>, uint64_t a6@<X5>, int *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  memset(&v31, 0, sizeof(v31));
  memset(&v30, 0, sizeof(v30));
  int v16 = *a2;
  if (*a2 == 2)
  {
    std::string::assign(&v31, "Last_Until_");
    std::string::assign(&v30, "{NextDepartureTime}");
    if (a3 == 1)
    {
      sub_98C68C(a6, (uint64_t)__p);
      if ((v29 & 0x80u) == 0) {
        unsigned int v20 = __p;
      }
      else {
        unsigned int v20 = (void **)__p[0];
      }
      if ((v29 & 0x80u) == 0) {
        std::string::size_type v21 = v29;
      }
      else {
        std::string::size_type v21 = (std::string::size_type)__p[1];
      }
      std::string::append(&v31, (const std::string::value_type *)v20, v21);
      if ((char)v29 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      if (byte_25DD5F7 >= 0) {
        uint64_t v26 = (const std::string::value_type *)&qword_25DD5E0;
      }
      else {
        uint64_t v26 = (const std::string::value_type *)qword_25DD5E0;
      }
      if (byte_25DD5F7 >= 0) {
        std::string::size_type v27 = byte_25DD5F7;
      }
      else {
        std::string::size_type v27 = unk_25DD5E8;
      }
      std::string::append(&v31, v26, v27);
    }
  }
  else
  {
    if (v16 == 1)
    {
      std::string::assign(&v31, "Advisory_ServiceGap_ServiceEnds");
      int v17 = "{ServiceEndTime}";
    }
    else
    {
      if (v16) {
        goto LABEL_16;
      }
      std::string::assign(&v31, "Advisory_ServiceBeginsMessage");
      int v17 = "{NextDepartureTime}";
    }
    std::string::assign(&v30, v17);
  }
LABEL_16:
  sub_5F3B34(a9);
  *(_DWORD *)(a9 + 160) = 1;
  int v22 = a2 + 1;
  sub_5F5F70(a9, (long long *)&v30, v22, (uint64_t)a4, 0);
  sub_98D43C(v22, a5, a4, a8, a7, &v31, a9);
  uint64_t v23 = sub_8D7730(*a1, (uint64_t)&v31);
  unint64_t v24 = *(void *)(a9 + 8);
  if (v24 >= *(void *)(a9 + 16))
  {
    *(void *)(a9 + 8) = sub_1D740((char **)a9, (uint64_t)v23);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_24;
    }
  }
  else
  {
    if (*((char *)v23 + 23) < 0)
    {
      sub_4200(*(unsigned char **)(a9 + 8), (void *)*v23, v23[1]);
    }
    else
    {
      long long v25 = *(_OWORD *)v23;
      *(void *)(v24 + 16) = v23[2];
      *(_OWORD *)unint64_t v24 = v25;
    }
    *(void *)(a9 + 8) = v24 + 24;
    *(void *)(a9 + 8) = v24 + 24;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_24:
      operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_25;
      }
      return;
    }
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
LABEL_25:
  }
    operator delete(v31.__r_.__value_.__l.__data_);
}

void sub_9D57A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a27 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_9D582C(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, int *a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
  if (a5[2] == 1 || *(_DWORD *)a2 != 2)
  {
    *(void *)(a8 + 160) = 0;
    *(_OWORD *)(a8 + 128) = 0u;
    *(_OWORD *)(a8 + 144) = 0u;
    *(_OWORD *)(a8 + 96) = 0u;
    *(_OWORD *)(a8 + 112) = 0u;
    *(_OWORD *)(a8 + 64) = 0u;
    *(_OWORD *)(a8 + 80) = 0u;
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    sub_5F3B34(a8);
    *(_DWORD *)(a8 + 160) = 0;
    return;
  }
  uint64_t v10 = a7;
  uint64_t v11 = a6;
  uint64_t v12 = a5;
  uint64_t v13 = a4;
  int v16 = a1;
  uint64_t v17 = *(void *)(a2 + 440);
  uint64_t v18 = *(void *)(a2 + 448);
  unsigned int v44 = 0;
  unsigned int v45 = 0;
  std::string __p = 0;
  if (v18 != v17)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v18 - v17) >> 2)) >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v23 = (char *)operator new(0x2492492492492494 * ((v18 - v17) >> 2));
    std::string __p = v23;
    unsigned int v44 = v23;
    unsigned int v45 = &v23[0x2492492492492494 * ((v18 - v17) >> 2)];
    uint64_t v11 = a6;
    uint64_t v13 = a4;
    int v16 = a1;
    uint64_t v10 = a7;
    uint64_t v12 = a5;
    do
    {
      int v24 = *(_DWORD *)(v17 + 8);
      uint64_t v46 = *(void *)v17;
      int v47 = v24;
      uint64_t v23 = sub_9D5C14(&__p, v23, (uint64_t)&v46) + 12;
      v17 += 28;
    }
    while (v17 != v18);
  }
  uint64_t v25 = *(void *)(a2 + 472);
  if (*(void *)(a2 + 464) == v25) {
    int v26 = 0x7FFFFFFF;
  }
  else {
    int v26 = *(_DWORD *)(v25 - 28);
  }
  unsigned int v27 = *(_DWORD *)(a2 + 116);
  if (v27 == 0x7FFFFFFF) {
    uint64_t v28 = *(unsigned int *)(a3 + 40);
  }
  else {
    uint64_t v28 = v27;
  }
  int v29 = *(_DWORD *)(a2 + 1008);
  if (v29 == 4 || v29 == 2)
  {
    if (v26 == 0x7FFFFFFF) {
      int v26 = *v12;
    }
    if ((int)v28 - v26 <= 10799)
    {
      unsigned __int8 v35 = (char *)__p;
      if (__p != v44)
      {
        uint64_t v36 = v28;
        while ((int)v36 - (int)v28 <= 3600)
        {
          uint64_t v37 = *(unsigned int *)v35;
          if ((int)v37 - (int)v36 > 10799)
          {
            uint64_t v46 = (v36 << 32) | 1;
            if (v36 != 0x7FFFFFFF) {
              goto LABEL_22;
            }
            break;
          }
          v35 += 12;
          uint64_t v36 = v37;
          if (v35 == v44) {
            break;
          }
        }
      }
    }
    else
    {
      uint64_t v46 = v28 << 32;
      if (v28 != 0x7FFFFFFF)
      {
LABEL_22:
        unint64_t v30 = *(void *)(a2 + 48);
        if (v30 != -1) {
          goto LABEL_23;
        }
LABEL_41:
        unint64_t v30 = *(void *)(a2 + 56);
LABEL_23:
        if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v10[1] - *v10) >> 3) <= v30) {
          sub_66748();
        }
        uint64_t v31 = *v10 + 168 * v30;
        if (!*(unsigned char *)(a2 + 792))
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_2439078;
        }
        uint64_t v32 = v10[9];
        unint64_t v33 = *(void *)(a2 + 752);
        if (0x66FD0EB66FD0EB67 * ((v10[10] - v32) >> 3) <= v33) {
          sub_66748();
        }
        sub_9D5558(v16, (int *)&v46, 1, (const char *)(v31 + 136), v13, *(unsigned __int16 *)(v32 + 696 * v33 + 556), v12, v11, a8);
        uint64_t v34 = (char *)__p;
        if (__p) {
          goto LABEL_27;
        }
        return;
      }
    }
  }
  else if (__p != v44)
  {
    uint64_t v38 = *(unsigned int *)__p;
    int v39 = v38 - v28;
    if (v38 != 0x7FFFFFFF && v39 >= 10800)
    {
      uint64_t v46 = (v38 << 32) | 2;
      unint64_t v30 = *(void *)(a2 + 48);
      if (v30 != -1) {
        goto LABEL_23;
      }
      goto LABEL_41;
    }
  }
  *(void *)(a8 + 160) = 0;
  *(_OWORD *)(a8 + 128) = 0u;
  *(_OWORD *)(a8 + 144) = 0u;
  *(_OWORD *)(a8 + 96) = 0u;
  *(_OWORD *)(a8 + 112) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 80) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  sub_5F3B34(a8);
  *(_DWORD *)(a8 + 160) = 0;
  uint64_t v34 = (char *)__p;
  if (__p)
  {
LABEL_27:
    unsigned int v44 = v34;
    operator delete(v34);
  }
}

void sub_9D5BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_9D5C14(void *a1, char *__src, uint64_t a3)
{
  unint64_t v4 = __src;
  uint64_t v6 = (char *)a1[1];
  unint64_t v7 = a1[2];
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = (char *)*a1;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*a1] >> 2) + 1;
    if (v14 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v13) >> 2);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x1555555555555555;
    }
    else {
      unint64_t v16 = v14;
    }
    unsigned __int8 v35 = a1 + 2;
    if (v16)
    {
      if (v16 > 0x1555555555555555) {
        sub_188D718();
      }
      uint64_t v17 = (char *)operator new(12 * v16);
    }
    else
    {
      uint64_t v17 = 0;
    }
    uint64_t v31 = v17;
    uint64_t v32 = &v17[4 * ((v4 - v13) >> 2)];
    std::string __dst = v32;
    uint64_t v34 = &v17[12 * v16];
    sub_9D5EC4((uint64_t)&v31, (uint64_t *)a3);
    unint64_t v19 = v32;
    unsigned int v20 = (char *)*a1;
    std::string::size_type v21 = v32;
    if ((char *)*a1 != v4)
    {
      int v22 = v4;
      std::string::size_type v21 = v32;
      do
      {
        uint64_t v23 = *(void *)(v22 - 12);
        v22 -= 12;
        __int16 v24 = *((_WORD *)v22 + 4);
        *(void *)(v21 - 12) = v23;
        v21 -= 12;
        *((_WORD *)v21 + 4) = v24;
      }
      while (v22 != v20);
    }
    uint64_t v32 = v21;
    uint64_t v25 = (char *)a1[1];
    int v26 = (char *)__dst;
    int64_t v27 = v25 - v4;
    if (v25 != v4)
    {
      memmove(__dst, v4, v27 - 2);
      std::string::size_type v21 = v32;
      unint64_t v4 = (char *)a1[1];
    }
    uint64_t v28 = (char *)*a1;
    *a1 = v21;
    a1[1] = &v26[v27];
    int v29 = (char *)a1[2];
    a1[2] = v34;
    std::string __dst = v4;
    uint64_t v34 = v29;
    uint64_t v31 = v28;
    uint64_t v32 = v28;
    if (v4 != v28) {
      std::string __dst = &v28[(v4 - v28 - 12) % 0xCuLL];
    }
    if (v28) {
      operator delete(v28);
    }
    return v19;
  }
  else if (__src == v6)
  {
    uint64_t v18 = *(void *)a3;
    *((_DWORD *)__src + 2) = *(_DWORD *)(a3 + 8);
    *(void *)__src = v18;
    a1[1] = __src + 12;
  }
  else
  {
    uint64_t v8 = __src + 12;
    unint64_t v9 = v6 - 12;
    uint64_t v10 = a1[1];
    if ((unint64_t)v6 >= 0xC)
    {
      do
      {
        uint64_t v11 = *(void *)v9;
        *(_DWORD *)(v10 + 8) = *((_DWORD *)v9 + 2);
        *(void *)uint64_t v10 = v11;
        v10 += 12;
        v9 += 12;
      }
      while (v9 < v6);
    }
    a1[1] = v10;
    if (v6 != v8) {
      memmove(v8, __src, v6 - v8 - 2);
    }
    uint64_t v12 = *(void *)a3;
    *((_WORD *)v4 + 4) = *(_WORD *)(a3 + 8);
    *(void *)unint64_t v4 = v12;
  }
  return v4;
}

void sub_9D5E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    uint64_t v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_9D5EC4(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    uint64_t v6 = *(char **)a1;
    uint64_t v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      unint64_t v15 = 0x5555555555555556 * ((v4 - v6) >> 2);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x1555555555555556) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 12 * v15;
      uint64_t v18 = (char *)operator new(12 * v15);
      unint64_t v19 = &v18[12 * v16];
      int64_t v21 = v4 - v5;
      BOOL v20 = v4 == v5;
      unint64_t v4 = v19;
      if (!v20)
      {
        uint64_t v22 = v21 / 12;
        unint64_t v4 = &v19[12 * v22];
        uint64_t v23 = 12 * v22;
        __int16 v24 = &v18[12 * v16];
        do
        {
          uint64_t v25 = *(void *)v5;
          *((_DWORD *)v24 + 2) = *((_DWORD *)v5 + 2);
          *(void *)__int16 v24 = v25;
          v24 += 12;
          v5 += 12;
          v23 -= 12;
        }
        while (v23);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        unint64_t v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-*(void *)a1] >> 2);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -12 * v9;
      uint64_t v12 = &v5[v11];
      uint64_t v13 = (char *)(v4 - v5);
      if (v4 != v5)
      {
        memmove(&v5[v11], *(const void **)(a1 + 8), (size_t)(v13 - 2));
        unint64_t v4 = *(char **)(a1 + 8);
      }
      unint64_t v14 = &v4[12 * v10];
      unint64_t v4 = &v13[(void)v12];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v13[(void)v12];
    }
  }
  uint64_t v26 = *a2;
  *((_DWORD *)v4 + 2) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t v4 = v26;
  *(void *)(a1 + 16) += 12;
}

char *sub_9D604C()
{
  byte_25DD2F7 = 1;
  word_25DD2E0 = 65;
  byte_25DD30F = 1;
  word_25DD2F8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DDA48 = 0u;
  *(_OWORD *)&qword_25DDA58 = 0u;
  dword_25DDA68 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DDA48, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DDA48, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DDA48, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DDA48, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DD327 = 8;
  strcpy((char *)&qword_25DD310, "any_mode");
  byte_25DD33F = 7;
  strcpy((char *)&dword_25DD328, "cycling");
  byte_25DD357 = 7;
  strcpy((char *)&dword_25DD340, "driving");
  byte_25DD36F = 7;
  strcpy((char *)&dword_25DD358, "walking");
  qword_25DD378 = 0;
  qword_25DD380 = 0;
  qword_25DD370 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DD370 = (uint64_t)v0;
  qword_25DD378 = (uint64_t)(v0 + 9);
  qword_25DD380 = (uint64_t)(v0 + 9);
  qword_25DD388 = 0;
  qword_25DD390 = 0;
  unk_25DD398 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DD390 = (uint64_t)(v1 + 9);
  unk_25DD398 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DD388 = (uint64_t)v1;
  byte_25DD3B7 = 6;
  strcpy((char *)&dword_25DD3A0, "{Mode}");
  byte_25DD3CF = 11;
  strcpy((char *)&qword_25DD3B8, "{Direction}");
  byte_25DD3E7 = 6;
  strcpy((char *)&dword_25DD3D0, "{Line}");
  byte_25DD3FF = 12;
  strcpy((char *)&qword_25DD3E8, "{LineNumber}");
  strcpy(&byte_25DD417, "\n{Headsign1}");
  strcpy((char *)&qword_25DD400, "{Headsign}");
  byte_25DD42F = 11;
  byte_25DD447 = 11;
  strcpy((char *)&qword_25DD430, "{Headsign2}");
  byte_25DD45F = 11;
  strcpy((char *)&qword_25DD448, "{Headsign3}");
  byte_25DD477 = 11;
  strcpy((char *)&qword_25DD460, "{Headsign4}");
  byte_25DD48F = 11;
  strcpy((char *)&qword_25DD478, "{Headsign5}");
  byte_25DD4A7 = 6;
  strcpy((char *)&dword_25DD490, "{Stop}");
  byte_25DD4BF = 14;
  strcpy((char *)&qword_25DD4A8, "{PreviousStop}");
  byte_25DD4D7 = 8;
  strcpy((char *)&qword_25DD4C0, "{System}");
  byte_25DD4EF = 15;
  strcpy((char *)&qword_25DD4D8, "{VehicleNumber}");
  byte_25DD507 = 17;
  strcpy((char *)&xmmword_25DD4F0, "{AccessPointExit}");
  strcpy(&byte_25DD51F, "\n{nextBoardStation}");
  strcpy((char *)&qword_25DD508, "{Platform}");
  byte_25DD537 = 18;
  qword_25DD538 = 0;
  unk_25DD540 = 0;
  qword_25DD548 = 0;
  byte_25DD567 = 1;
  word_25DD550 = 32;
  qword_25DD568 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25DD570 = xmmword_20B8890;
  strcpy((char *)qword_25DD568, "LeaveStop_Loc_Comma_Separator");
  byte_25DD597 = 5;
  dword_25DD580 = -1028144608;
  word_25DD584 = 160;
  byte_25DD5AF = 2;
  word_25DD598 = -24382;
  byte_25DD59A = 0;
  byte_25DD5C7 = 4;
  dword_25DD5B0 = 548913696;
  byte_25DD5B4 = 0;
  byte_25DD5DF = 15;
  strcpy((char *)&qword_25DD5C8 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25DD5C8, "{s:s} ·");
  byte_25DD5F7 = 6;
  strcpy((char *)&qword_25DD5E0, "NoType");
  byte_25DD60F = 14;
  strcpy((char *)&qword_25DD5F8, "{WalkDistance}");
  strcpy(&byte_25DD627, "\n{OneMinute}");
  strcpy((char *)&qword_25DD610, "{WalkTime}");
  byte_25DD63F = 11;
  byte_25DD657 = 14;
  strcpy((char *)&qword_25DD640, "{StepDuration}");
  byte_25DD66F = 15;
  strcpy((char *)&qword_25DD658, "{TripFrequency}");
  byte_25DD687 = 11;
  strcpy((char *)&qword_25DD670, "{BoardTime}");
  byte_25DD69F = 12;
  strcpy((char *)&qword_25DD688, "{AlightTime}");
  byte_25DD6B7 = 21;
  strcpy((char *)&xmmword_25DD6A0, "{FutureTimestampList}");
  byte_25DD6CF = 15;
  strcpy((char *)&qword_25DD6B8, "{DepartureTime}");
  byte_25DD6E7 = 13;
  strcpy((char *)&qword_25DD6D0, "{ArrivalTime}");
  byte_25DD6FF = 19;
  strcpy((char *)&xmmword_25DD6E8, "{TotalWalkDistance}");
  byte_25DD717 = 14;
  strcpy((char *)&qword_25DD700, "{TripDuration}");
  byte_25DD72F = 11;
  strcpy((char *)&qword_25DD718, "{DayOfWeek}");
  byte_25DD747 = 6;
  strcpy((char *)&dword_25DD730, "{Date}");
  byte_25DD75F = 16;
  strcpy((char *)&xmmword_25DD748, "{OutTheDoorTime}");
  double result = (char *)operator new(0x20uLL);
  qword_25DD760 = (uint64_t)result;
  unk_25DD768 = xmmword_20B91A0;
  strcpy(result, "{FirstVehicleDepartureTime}");
  byte_25DD78F = 18;
  strcpy(byte_25DD778, "{RouteArrivalTime}");
  strcpy(&byte_25DD7A7, "\n{IC_Artwork}");
  strcpy((char *)&qword_25DD790, "{BaseFare}");
  byte_25DD7BF = 12;
  byte_25DD7D7 = 11;
  strcpy((char *)&qword_25DD7C0, "{RT_Symbol}");
  byte_25DD7EF = 12;
  strcpy((char *)&qword_25DD7D8, "{TotalPrice}");
  byte_25DD807 = 13;
  strcpy((char *)&qword_25DD7F0, "{CheckInTime}");
  byte_25DD81F = 19;
  strcpy(byte_25DD808, "{LiveDepartureTime}");
  strcpy(&byte_25DD837, "\n{LegDuration}");
  strcpy((char *)&qword_25DD820, "{TimeList}");
  byte_25DD84F = 13;
  byte_25DD867 = 15;
  strcpy((char *)&qword_25DD850, "{CountdownList}");
  byte_25DD87F = 3;
  dword_25DD868 = 8217723;
  strcpy(&byte_25DD897, "\t{AccessPointArt}");
  strcpy((char *)&qword_25DD880, "{LineArt}");
  byte_25DD8AF = 16;
  byte_25DD8C7 = 11;
  strcpy((char *)&qword_25DD8B0, "{SystemArt}");
  strcpy(&byte_25DD8DF, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25DD8C8, "{CardName}");
  byte_25DD8F7 = 18;
  byte_25DD90F = 16;
  strcpy((char *)&xmmword_25DD8F8, "{ServiceEndTime}");
  byte_25DD927 = 6;
  strcpy((char *)&dword_25DD910, "OnTime");
  byte_25DD93F = 6;
  strcpy((char *)&dword_25DD928, "Delays");
  byte_25DD957 = 1;
  word_25DD940 = 115;
  byte_25DD96F = 2;
  strcpy((char *)&word_25DD958, "cs");
  byte_25DD987 = 1;
  word_25DD970 = 112;
  byte_25DD99F = 5;
  strcpy((char *)&dword_25DD988, "_Line");
  byte_25DD9B7 = 7;
  strcpy((char *)&dword_25DD9A0, "_System");
  strcpy(&byte_25DD9CF, "\n_VehicleNumber");
  strcpy((char *)&qword_25DD9B8, "_Direction");
  byte_25DD9E7 = 14;
  byte_25DD9FF = 12;
  strcpy((char *)&qword_25DD9E8, "_To_Headsign");
  byte_25DDA17 = 16;
  strcpy((char *)&xmmword_25DDA00, "_Toward_Headsign");
  strcpy(&byte_25DDA2F, "\t_LineNumber");
  strcpy((char *)&qword_25DDA18, "_Headsign");
  byte_25DDA47 = 11;
  return result;
}

void sub_9D6C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DDA58) {
    sub_20AD7C4((void **)qword_25DDA58);
  }
  uint64_t v37 = (void *)xmmword_25DDA48;
  *(void *)&xmmword_25DDA48 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_9D6CD4(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *result = a3;
  result[1] = a2;
  result[2] = a4;
  return result;
}

void sub_9D6CE0(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(unsigned char *)(a2 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  unint64_t v7 = *(void *)(a2 + 752);
  uint64_t v8 = *(void *)(*(void *)a1 + 72);
  if (0x66FD0EB66FD0EB67 * ((*(void *)(*(void *)a1 + 80) - v8) >> 3) <= v7) {
    sub_66748();
  }
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_DWORD *)(a4 + 80) = -1;
  *(_DWORD *)(a4 + 88) = -1;
  *(_DWORD *)(a4 + 91) = -1;
  *(void *)(a4 + 95) = 0;
  *(void *)(a4 + 111) = 0;
  *(void *)(a4 + 103) = 0;
  *(_WORD *)(a4 + 119) = 0;
  *(void *)(a4 + 136) = 0;
  *(void *)(a4 + 144) = 0;
  *(void *)(a4 + 128) = 0;
  *(unsigned char *)(a4 + 152) = 0;
  *(_DWORD *)(a4 + 192) = -1;
  *(_DWORD *)(a4 + 203) = -1;
  *(_DWORD *)(a4 + 200) = -1;
  *(void *)(a4 + 240) = 0;
  *(void *)(a4 + 215) = 0;
  *(void *)(a4 + 207) = 0;
  *(_WORD *)(a4 + 231) = 0;
  *(void *)(a4 + 223) = 0;
  *(void *)(a4 + 248) = 0;
  *(void *)(a4 + 256) = 0;
  *(unsigned char *)(a4 + 264) = 0;
  char v10 = sub_969500(*(uint64_t **)(a1 + 8), a2, 7);
  if (*(_DWORD *)(*(void *)(a1 + 16) + 1436) < 2u)
  {
LABEL_17:
    if (*(void *)(a2 + 2200) == *(void *)(a2 + 2208))
    {
      uint64_t v19 = v8 + 696 * v7;
      BOOL v20 = *(unsigned __int8 **)(v19 + 616);
      int64_t v21 = *(unsigned __int8 **)(v19 + 624);
      while (v20 != v21)
      {
        uint64_t v23 = sub_969500(*(uint64_t **)(a1 + 8), a2, *v20);
        unint64_t v24 = *(void *)(a4 + 8);
        if (v24 >= *(void *)(a4 + 16))
        {
          uint64_t v22 = sub_966000((uint64_t *)a4, (uint64_t)v23);
        }
        else
        {
          sub_4F57A0(*(void *)(a4 + 8), (uint64_t)v23);
          uint64_t v22 = v24 + 112;
          *(void *)(a4 + 8) = v24 + 112;
        }
        *(void *)(a4 + 8) = v22;
        ++v20;
      }
      uint64_t v25 = v8 + 696 * v7;
      uint64_t v26 = *(unsigned __int8 **)(v25 + 592);
      for (uint64_t i = *(unsigned __int8 **)(v25 + 600); v26 != i; ++v26)
      {
        while (1)
        {
          uint64_t v28 = sub_969500(*(uint64_t **)(a1 + 8), a2, *v26);
          unint64_t v29 = *(void *)(a4 + 32);
          if (v29 < *(void *)(a4 + 40)) {
            break;
          }
          *(void *)(a4 + 32) = sub_966000((uint64_t *)(a4 + 24), (uint64_t)v28);
          if (++v26 == i) {
            goto LABEL_51;
          }
        }
        sub_4F57A0(*(void *)(a4 + 32), (uint64_t)v28);
        *(void *)(a4 + 32) = v29 + 112;
        *(void *)(a4 + 32) = v29 + 112;
      }
      goto LABEL_51;
    }
    unint64_t v16 = sub_969500(*(uint64_t **)(a1 + 8), a2, 3);
    sub_4F57A0((uint64_t)&v39, (uint64_t)v16);
    unint64_t v17 = *(void *)(a4 + 8);
    if (v17 >= *(void *)(a4 + 16))
    {
      uint64_t v18 = sub_966000((uint64_t *)a4, (uint64_t)&v39);
    }
    else
    {
      sub_4F57A0(*(void *)(a4 + 8), (uint64_t)&v39);
      uint64_t v18 = v17 + 112;
      *(void *)(a4 + 8) = v17 + 112;
    }
    *(void *)(a4 + 8) = v18;
    unint64_t v30 = *(void *)(a4 + 32);
    if (v30 >= *(void *)(a4 + 40))
    {
      uint64_t v31 = sub_966000((uint64_t *)(a4 + 24), (uint64_t)&v39);
    }
    else
    {
      sub_4F57A0(*(void *)(a4 + 32), (uint64_t)&v39);
      uint64_t v31 = v30 + 112;
      *(void *)(a4 + 32) = v30 + 112;
    }
    *(void *)(a4 + 32) = v31;
    if (v49 < 0)
    {
      operator delete(v47);
      if ((v45 & 0x80000000) == 0)
      {
LABEL_38:
        int v32 = v43;
        if (v43 != 1)
        {
LABEL_39:
          if (!v32 && v42 < 0)
          {
            operator delete(__p);
            uint64_t v33 = v8 + 696 * v7;
            if (!*(unsigned char *)(v33 + 641)) {
              goto LABEL_53;
            }
            goto LABEL_52;
          }
          goto LABEL_51;
        }
LABEL_45:
        if (__p)
        {
          unsigned int v41 = __p;
          operator delete(__p);
          uint64_t v33 = v8 + 696 * v7;
          if (!*(unsigned char *)(v33 + 641)) {
            goto LABEL_53;
          }
          goto LABEL_52;
        }
        goto LABEL_51;
      }
    }
    else if ((v45 & 0x80000000) == 0)
    {
      goto LABEL_38;
    }
    operator delete(v44);
    int v32 = v43;
    if (v43 != 1) {
      goto LABEL_39;
    }
    goto LABEL_45;
  }
  uint64_t v11 = (uint64_t)v10;
  int v12 = *((_DWORD *)v10 + 8);
  if (v12 != 1)
  {
    if (v12) {
      goto LABEL_17;
    }
    BOOL v13 = *(_DWORD *)v10 == -1;
    goto LABEL_10;
  }
  if (*((_DWORD *)v10 + 1) == -1 && *(_DWORD *)v10 == -1)
  {
    BOOL v13 = *((void *)v10 + 1) == *((void *)v10 + 2);
LABEL_10:
    int v12 = !v13;
  }
  if (!v12 || (a3 & 1) != 0) {
    goto LABEL_17;
  }
  unint64_t v14 = *(void *)(a4 + 8);
  if (v14 >= *(void *)(a4 + 16))
  {
    uint64_t v15 = sub_966000((uint64_t *)a4, (uint64_t)v10);
  }
  else
  {
    sub_4F57A0(*(void *)(a4 + 8), (uint64_t)v10);
    uint64_t v15 = v14 + 112;
    *(void *)(a4 + 8) = v14 + 112;
  }
  *(void *)(a4 + 8) = v15;
  unint64_t v34 = *(void *)(a4 + 32);
  if (v34 >= *(void *)(a4 + 40))
  {
    *(void *)(a4 + 32) = sub_966000((uint64_t *)(a4 + 24), v11);
    uint64_t v33 = v8 + 696 * v7;
    if (!*(unsigned char *)(v33 + 641)) {
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  sub_4F57A0(*(void *)(a4 + 32), v11);
  *(void *)(a4 + 32) = v34 + 112;
  *(void *)(a4 + 32) = v34 + 112;
LABEL_51:
  uint64_t v33 = v8 + 696 * v7;
  if (*(unsigned char *)(v33 + 641))
  {
LABEL_52:
    unsigned __int8 v35 = sub_969500(*(uint64_t **)(a1 + 8), a2, *(unsigned __int8 *)(v33 + 640));
    sub_4F39B8(a4 + 160, (std::string *)v35);
    *(void *)(a4 + 200) = *((void *)v35 + 5);
    std::string::operator=((std::string *)(a4 + 208), (const std::string *)v35 + 2);
    *(unsigned char *)(a4 + 232) = *((unsigned char *)v35 + 72);
    std::string::operator=((std::string *)(a4 + 240), (const std::string *)(v35 + 5));
    *(unsigned char *)(a4 + 264) = *((unsigned char *)v35 + 104);
  }
LABEL_53:
  if (*(void *)(a4 + 24) == *(void *)(a4 + 32) && sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v39);
    sub_188FC78(&v39, (uint64_t)"No stepping artworks resolved for line ", 39);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&v37, 3u);
    if (v38 < 0) {
      operator delete(v37);
    }
    if (v48 < 0) {
      operator delete(v46);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
}

void sub_9D72F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D7308(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D7320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    sub_934F58(v15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_934F58(v15);
  _Unwind_Resume(a1);
}

void sub_9D73C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4D9814((uint64_t)va);
  sub_934F58(v4);
  _Unwind_Resume(a1);
}

void sub_9D73DC(_Unwind_Exception *a1)
{
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D73F0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D7408(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D7420(_Unwind_Exception *a1)
{
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D7434(_Unwind_Exception *a1)
{
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D7448(_Unwind_Exception *a1)
{
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

BOOL sub_9D745C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  if (v1 == 1)
  {
    if (*(_DWORD *)(a1 + 4) == -1) {
      return *(_DWORD *)a1 != -1 || *(void *)(a1 + 8) != *(void *)(a1 + 16);
    }
    else {
      return 1;
    }
  }
  else
  {
    return !v1 && *(_DWORD *)a1 != -1;
  }
}

uint64_t sub_9D74BC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_966000(a1, a2);
    a1[1] = result;
  }
  else
  {
    sub_4F57A0(a1[1], a2);
    uint64_t result = v3 + 112;
    a1[1] = v3 + 112;
    a1[1] = v3 + 112;
  }
  return result;
}

void sub_9D7514(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_9D751C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_DWORD *)(a4 + 80) = -1;
  *(_DWORD *)(a4 + 88) = -1;
  *(_DWORD *)(a4 + 91) = -1;
  *(void *)(a4 + 95) = 0;
  *(void *)(a4 + 111) = 0;
  *(void *)(a4 + 103) = 0;
  *(_WORD *)(a4 + 119) = 0;
  *(void *)(a4 + 136) = 0;
  *(void *)(a4 + 144) = 0;
  *(void *)(a4 + 128) = 0;
  *(unsigned char *)(a4 + 152) = 0;
  *(_DWORD *)(a4 + 192) = -1;
  *(_DWORD *)(a4 + 200) = -1;
  *(_DWORD *)(a4 + 203) = -1;
  *(void *)(a4 + 215) = 0;
  *(void *)(a4 + 207) = 0;
  *(_WORD *)(a4 + 231) = 0;
  *(void *)(a4 + 223) = 0;
  *(void *)(a4 + 240) = 0;
  *(void *)(a4 + 248) = 0;
  *(unsigned char *)(a4 + 264) = 0;
  *(void *)(a4 + 256) = 0;
  uint64_t v8 = sub_969500(*(uint64_t **)(a1 + 8), a2, 7);
  uint64_t v9 = (uint64_t)v8;
  int v10 = *((_DWORD *)v8 + 8);
  if (v10 == 1)
  {
    if (*((_DWORD *)v8 + 1) == -1 && *(_DWORD *)v8 == -1 && *((void *)v8 + 1) == *((void *)v8 + 2)) {
      goto LABEL_10;
    }
LABEL_8:
    unint64_t v11 = *(void *)(a4 + 32);
    if (v11 >= *(void *)(a4 + 40))
    {
      uint64_t v12 = sub_966000((uint64_t *)(a4 + 24), (uint64_t)v8);
    }
    else
    {
      sub_4F57A0(*(void *)(a4 + 32), (uint64_t)v8);
      uint64_t v12 = v11 + 112;
      *(void *)(a4 + 32) = v11 + 112;
    }
    *(void *)(a4 + 32) = v12;
    unint64_t v27 = *(void *)(a4 + 8);
    if (v27 >= *(void *)(a4 + 16))
    {
      uint64_t v28 = sub_966000((uint64_t *)a4, v9);
    }
    else
    {
      sub_4F57A0(*(void *)(a4 + 8), v9);
      uint64_t v28 = v27 + 112;
      *(void *)(a4 + 8) = v27 + 112;
    }
    *(void *)(a4 + 8) = v28;
    return;
  }
  if (!v10 && *(_DWORD *)v8 != -1) {
    goto LABEL_8;
  }
LABEL_10:
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  do
  {
    if (v13 == v14)
    {
      if (*(void *)(*(void *)(v14 - 8) + 2200) == *(void *)(*(void *)(v14 - 8) + 2208)) {
        goto LABEL_17;
      }
LABEL_14:
      unint64_t v17 = sub_969500(*(uint64_t **)(a1 + 8), a2, 3);
      sub_4F57A0((uint64_t)&v46, (uint64_t)v17);
      unint64_t v18 = *(void *)(a4 + 32);
      if (v18 >= *(void *)(a4 + 40))
      {
        uint64_t v19 = sub_966000((uint64_t *)(a4 + 24), (uint64_t)&v46);
      }
      else
      {
        sub_4F57A0(*(void *)(a4 + 32), (uint64_t)&v46);
        uint64_t v19 = v18 + 112;
        *(void *)(a4 + 32) = v18 + 112;
      }
      *(void *)(a4 + 32) = v19;
      if (SHIBYTE(v55) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v52) & 0x80000000) == 0)
        {
LABEL_33:
          int v29 = v49;
          if (v49 != 1) {
            goto LABEL_34;
          }
          goto LABEL_39;
        }
      }
      else if ((SHIBYTE(v52) & 0x80000000) == 0)
      {
        goto LABEL_33;
      }
      operator delete(v51[0]);
      int v29 = v49;
      if (v49 != 1)
      {
LABEL_34:
        if (v29 || (SHIBYTE(v48) & 0x80000000) == 0) {
          goto LABEL_42;
        }
        unint64_t v30 = (void *)v47;
LABEL_41:
        operator delete(v30);
        goto LABEL_42;
      }
LABEL_39:
      unint64_t v30 = (void *)v47;
      if (!(void)v47) {
        goto LABEL_42;
      }
      *((void *)&v47 + 1) = v47;
      goto LABEL_41;
    }
    unint64_t v16 = *(_DWORD **)(v13 - 8);
    v13 -= 8;
    uint64_t v15 = v16;
  }
  while (*v16 != 2);
  if (*((void *)v15 + 275) != *((void *)v15 + 276)) {
    goto LABEL_14;
  }
LABEL_17:
  if (!*(unsigned char *)(a2 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v20 = *(void *)(*(void *)a1 + 72);
  unint64_t v21 = *(void *)(a2 + 752);
  if (0x66FD0EB66FD0EB67 * ((*(void *)(*(void *)a1 + 80) - v20) >> 3) <= v21) {
    sub_66748();
  }
  uint64_t v22 = v20 + 696 * v21;
  uint64_t v23 = *(unsigned __int8 **)(v22 + 592);
  for (uint64_t i = *(unsigned __int8 **)(v22 + 600); v23 != i; ++v23)
  {
    while (1)
    {
      uint64_t v25 = sub_969500(*(uint64_t **)(a1 + 8), a2, *v23);
      unint64_t v26 = *(void *)(a4 + 32);
      if (v26 < *(void *)(a4 + 40)) {
        break;
      }
      *(void *)(a4 + 32) = sub_966000((uint64_t *)(a4 + 24), (uint64_t)v25);
      if (++v23 == i) {
        goto LABEL_42;
      }
    }
    sub_4F57A0(*(void *)(a4 + 32), (uint64_t)v25);
    *(void *)(a4 + 32) = v26 + 112;
    *(void *)(a4 + 32) = v26 + 112;
  }
LABEL_42:
  if (*(_DWORD *)(*(void *)(a1 + 16) + 1436) < 2u) {
    return;
  }
  sub_9698F8(*(void *)(a1 + 8), 210011, (uint64_t)&v46);
  unint64_t v31 = *(void *)(a4 + 8);
  if (v31 >= *(void *)(a4 + 16))
  {
    unint64_t v34 = sub_9D9490((void **)a4, (uint64_t)&v46);
    int v35 = SHIBYTE(v55);
    *(void *)(a4 + 8) = v34;
    if (v35 < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v52) < 0) {
        goto LABEL_61;
      }
    }
    else if (SHIBYTE(v52) < 0)
    {
      goto LABEL_61;
    }
LABEL_50:
    int v36 = v49;
    if (v49 == 1) {
      goto LABEL_62;
    }
    goto LABEL_51;
  }
  *(_DWORD *)(v31 + 32) = v49;
  if (v49 == 1)
  {
    uint64_t v38 = v46;
    *(void *)(v31 + 8) = 0;
    *(void *)unint64_t v31 = v38;
    *(void *)(v31 + 16) = 0;
    *(void *)(v31 + 24) = 0;
    uint64_t v39 = (const void *)v47;
    int64_t v40 = *((void *)&v47 + 1) - v47;
    if (*((void *)&v47 + 1) != (void)v47)
    {
      if (v40 < 0) {
        sub_2E00();
      }
      unsigned int v41 = (char *)operator new(*((void *)&v47 + 1) - v47);
      *(void *)(v31 + 8) = v41;
      *(void *)(v31 + 16) = v41;
      char v42 = &v41[8 * (v40 >> 3)];
      *(void *)(v31 + 24) = v42;
      memcpy(v41, v39, v40);
      *(void *)(v31 + 16) = v42;
    }
  }
  else if (!v49)
  {
    *(void *)unint64_t v31 = v46;
    int v32 = (unsigned char *)(v31 + 8);
    if (SHIBYTE(v48) < 0)
    {
      sub_4200(v32, (void *)v47, *((unint64_t *)&v47 + 1));
    }
    else
    {
      long long v33 = v47;
      *(void *)(v31 + 24) = v48;
      *(_OWORD *)int v32 = v33;
    }
  }
  *(void *)(v31 + 40) = v50;
  long long v43 = *(_OWORD *)v51;
  *(void *)(v31 + 64) = v52;
  *(_OWORD *)(v31 + 48) = v43;
  v51[0] = 0;
  v51[1] = 0;
  *(unsigned char *)(v31 + 72) = v53;
  long long v44 = *(_OWORD *)__p;
  *(void *)(v31 + 96) = v55;
  *(_OWORD *)(v31 + 80) = v44;
  uint64_t v52 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v55 = 0;
  *(unsigned char *)(v31 + 104) = v56;
  *(void *)(a4 + 8) = v31 + 112;
  if ((SHIBYTE(v52) & 0x80000000) == 0) {
    goto LABEL_50;
  }
LABEL_61:
  operator delete(v51[0]);
  int v36 = v49;
  if (v49 == 1)
  {
LABEL_62:
    uint64_t v37 = (void *)v47;
    if ((void)v47)
    {
      *((void *)&v47 + 1) = v47;
LABEL_64:
      operator delete(v37);
    }
    return;
  }
LABEL_51:
  if (!v36 && SHIBYTE(v48) < 0)
  {
    uint64_t v37 = (void *)v47;
    goto LABEL_64;
  }
}

void sub_9D7A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_9D7AEC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_9D9490((void **)a1, a2);
    *(void *)(a1 + 8) = result;
  }
  else
  {
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(a2 + 32);
    sub_4F38B0((void *)*(unsigned int *)(a2 + 32), (uint64_t *)a2, (void *)v4);
    *(void *)(v4 + 40) = *(void *)(a2 + 40);
    long long v5 = *(_OWORD *)(a2 + 48);
    *(void *)(v4 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(v4 + 48) = v5;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 48) = 0;
    *(unsigned char *)(v4 + 72) = *(unsigned char *)(a2 + 72);
    long long v6 = *(_OWORD *)(a2 + 80);
    *(void *)(v4 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(v4 + 80) = v6;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 80) = 0;
    *(unsigned char *)(v4 + 104) = *(unsigned char *)(a2 + 104);
    uint64_t result = (char *)(v4 + 112);
    *(void *)(a1 + 8) = v4 + 112;
  }
  return result;
}

void sub_9D7BB0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_DWORD *)(a4 + 80) = -1;
  *(_DWORD *)(a4 + 88) = -1;
  *(_DWORD *)(a4 + 91) = -1;
  *(void *)(a4 + 95) = 0;
  *(void *)(a4 + 111) = 0;
  *(void *)(a4 + 103) = 0;
  *(_WORD *)(a4 + 119) = 0;
  *(void *)(a4 + 136) = 0;
  *(void *)(a4 + 144) = 0;
  *(void *)(a4 + 128) = 0;
  *(unsigned char *)(a4 + 152) = 0;
  *(_DWORD *)(a4 + 192) = -1;
  *(_DWORD *)(a4 + 200) = -1;
  *(_DWORD *)(a4 + 203) = -1;
  *(void *)(a4 + 215) = 0;
  *(void *)(a4 + 207) = 0;
  *(_WORD *)(a4 + 231) = 0;
  *(void *)(a4 + 223) = 0;
  *(void *)(a4 + 240) = 0;
  *(void *)(a4 + 248) = 0;
  *(unsigned char *)(a4 + 264) = 0;
  uint64_t v7 = a2[1] - *a2;
  *(void *)(a4 + 256) = 0;
  if (v7 != 8) {
    goto LABEL_24;
  }
  sub_9698F8(*(void *)(a1 + 8), 210004, (uint64_t)&v29);
  unint64_t v8 = *(void *)(a4 + 32);
  if (v8 >= *(void *)(a4 + 40))
  {
    unint64_t v11 = sub_9D9490((void **)(a4 + 24), (uint64_t)&v29);
    int v12 = SHIBYTE(v38);
    *(void *)(a4 + 32) = v11;
    if (v12 < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v35) < 0) {
        goto LABEL_20;
      }
    }
    else if (SHIBYTE(v35) < 0)
    {
      goto LABEL_20;
    }
LABEL_9:
    int v13 = v32;
    if (v32 == 1)
    {
LABEL_21:
      uint64_t v14 = (void *)v30;
      if (!(void)v30) {
        goto LABEL_24;
      }
      *((void *)&v30 + 1) = v30;
      goto LABEL_23;
    }
    goto LABEL_10;
  }
  *(_DWORD *)(v8 + 32) = v32;
  if (v32 == 1)
  {
    uint64_t v15 = v29;
    *(void *)(v8 + 8) = 0;
    *(void *)unint64_t v8 = v15;
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 24) = 0;
    unint64_t v16 = (const void *)v30;
    int64_t v17 = *((void *)&v30 + 1) - v30;
    if (*((void *)&v30 + 1) != (void)v30)
    {
      if (v17 < 0) {
        sub_2E00();
      }
      unint64_t v18 = (char *)operator new(*((void *)&v30 + 1) - v30);
      *(void *)(v8 + 8) = v18;
      *(void *)(v8 + 16) = v18;
      uint64_t v19 = &v18[8 * (v17 >> 3)];
      *(void *)(v8 + 24) = v19;
      memcpy(v18, v16, v17);
      *(void *)(v8 + 16) = v19;
    }
  }
  else if (!v32)
  {
    *(void *)unint64_t v8 = v29;
    uint64_t v9 = (unsigned char *)(v8 + 8);
    if (SHIBYTE(v31) < 0)
    {
      sub_4200(v9, (void *)v30, *((unint64_t *)&v30 + 1));
    }
    else
    {
      long long v10 = v30;
      *(void *)(v8 + 24) = v31;
      *(_OWORD *)uint64_t v9 = v10;
    }
  }
  *(void *)(v8 + 40) = v33;
  long long v20 = *(_OWORD *)v34;
  *(void *)(v8 + 64) = v35;
  *(_OWORD *)(v8 + 48) = v20;
  v34[0] = 0;
  v34[1] = 0;
  *(unsigned char *)(v8 + 72) = v36;
  long long v21 = *(_OWORD *)__p;
  *(void *)(v8 + 96) = v38;
  *(_OWORD *)(v8 + 80) = v21;
  uint64_t v35 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v38 = 0;
  *(unsigned char *)(v8 + 104) = v39;
  *(void *)(a4 + 32) = v8 + 112;
  if ((SHIBYTE(v35) & 0x80000000) == 0) {
    goto LABEL_9;
  }
LABEL_20:
  operator delete(v34[0]);
  int v13 = v32;
  if (v32 == 1) {
    goto LABEL_21;
  }
LABEL_10:
  if (!v13 && SHIBYTE(v31) < 0)
  {
    uint64_t v14 = (void *)v30;
LABEL_23:
    operator delete(v14);
  }
LABEL_24:
  uint64_t v22 = *a3;
  uint64_t v23 = a3[1];
  if (*a3 != v23)
  {
    while (*(_DWORD *)*v22 != 2)
    {
      if (++v22 == v23) {
        return;
      }
    }
  }
  if (v22 != v23 && !*(_DWORD *)(*(void *)(a1 + 16) + 1436))
  {
    unint64_t v24 = sub_969500(*(uint64_t **)(a1 + 8), *v22, 7);
    int v25 = *((_DWORD *)v24 + 8);
    if (v25 != 1)
    {
      if (v25 || *(_DWORD *)v24 == -1) {
        return;
      }
      goto LABEL_40;
    }
    BOOL v26 = *((_DWORD *)v24 + 1) == -1 && *(_DWORD *)v24 == -1;
    if (!v26 || *((void *)v24 + 1) != *((void *)v24 + 2))
    {
LABEL_40:
      unint64_t v27 = *(void *)(a4 + 8);
      if (v27 >= *(void *)(a4 + 16))
      {
        uint64_t v28 = sub_966000((uint64_t *)a4, (uint64_t)v24);
      }
      else
      {
        sub_4F57A0(*(void *)(a4 + 8), (uint64_t)v24);
        uint64_t v28 = v27 + 112;
        *(void *)(a4 + 8) = v27 + 112;
      }
      *(void *)(a4 + 8) = v28;
    }
  }
}

void sub_9D7EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_9D7F50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 80) = -1;
  *(_DWORD *)(a3 + 88) = -1;
  *(_DWORD *)(a3 + 91) = -1;
  *(void *)(a3 + 128) = 0;
  unint64_t v4 = (std::string *)(a3 + 128);
  *(void *)(a3 + 95) = 0;
  *(void *)(a3 + 111) = 0;
  *(void *)(a3 + 103) = 0;
  *(_WORD *)(a3 + 119) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(unsigned char *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 192) = -1;
  *(_DWORD *)(a3 + 200) = -1;
  *(_DWORD *)(a3 + 203) = -1;
  *(void *)(a3 + 215) = 0;
  *(void *)(a3 + 207) = 0;
  *(_WORD *)(a3 + 231) = 0;
  *(void *)(a3 + 223) = 0;
  *(void *)(a3 + 240) = 0;
  *(void *)(a3 + 248) = 0;
  *(unsigned char *)(a3 + 264) = 0;
  *(void *)(a3 + 256) = 0;
  if (!*(unsigned char *)(a2 + 952))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(void *)(a2 + 856) == -1 || *(_DWORD *)(*(void *)(a1 + 16) + 1436) > 1u) {
    return;
  }
  long long v6 = sub_969500(*(uint64_t **)(a1 + 8), a2, 5);
  uint64_t v7 = (uint64_t)v6;
  int v8 = *((_DWORD *)v6 + 8);
  if (v8 == 1)
  {
    if (*((_DWORD *)v6 + 1) == -1 && *(_DWORD *)v6 == -1 && *((void *)v6 + 1) == *((void *)v6 + 2))
    {
LABEL_7:
      uint64_t v9 = (void **)(a3 + 24);
      if (*(void *)(a3 + 24) != *(void *)(a3 + 32)) {
        return;
      }
      goto LABEL_16;
    }
  }
  else if (v8 || *(_DWORD *)v6 == -1)
  {
    goto LABEL_7;
  }
  sub_4F39B8(a3 + 48, (std::string *)v6);
  *(void *)(a3 + 88) = *(void *)(v7 + 40);
  std::string::operator=((std::string *)(a3 + 96), (const std::string *)(v7 + 48));
  *(unsigned char *)(a3 + 120) = *(unsigned char *)(v7 + 72);
  std::string::operator=(v4, (const std::string *)(v7 + 80));
  *(unsigned char *)(a3 + 152) = *(unsigned char *)(v7 + 104);
  unint64_t v10 = *(void *)(a3 + 32);
  if (v10 >= *(void *)(a3 + 40))
  {
    *(void *)(a3 + 32) = sub_966000((uint64_t *)(a3 + 24), v7);
    uint64_t v9 = (void **)(a3 + 24);
    if (*(void *)(a3 + 24) != *(void *)(a3 + 32)) {
      return;
    }
  }
  else
  {
    sub_4F57A0(*(void *)(a3 + 32), v7);
    *(void *)(a3 + 32) = v10 + 112;
    *(void *)(a3 + 32) = v10 + 112;
    uint64_t v9 = (void **)(a3 + 24);
    if (*(void *)(a3 + 24) != *(void *)(a3 + 32)) {
      return;
    }
  }
LABEL_16:
  sub_9698F8(*(void *)(a1 + 8), 210011, (uint64_t)&v26);
  unint64_t v11 = *(void *)(a3 + 32);
  if (v11 >= *(void *)(a3 + 40))
  {
    uint64_t v14 = sub_9D9490(v9, (uint64_t)&v26);
    int v15 = SHIBYTE(v35);
    *(void *)(a3 + 32) = v14;
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v32) < 0) {
        goto LABEL_34;
      }
    }
    else if (SHIBYTE(v32) < 0)
    {
      goto LABEL_34;
    }
LABEL_23:
    int v16 = v29;
    if (v29 == 1) {
      goto LABEL_35;
    }
    goto LABEL_24;
  }
  *(_DWORD *)(v11 + 32) = v29;
  if (v29 == 1)
  {
    uint64_t v18 = v26;
    *(void *)(v11 + 8) = 0;
    *(void *)unint64_t v11 = v18;
    *(void *)(v11 + 16) = 0;
    *(void *)(v11 + 24) = 0;
    uint64_t v19 = (const void *)v27;
    int64_t v20 = *((void *)&v27 + 1) - v27;
    if (*((void *)&v27 + 1) != (void)v27)
    {
      if (v20 < 0) {
        sub_2E00();
      }
      long long v21 = (char *)operator new(*((void *)&v27 + 1) - v27);
      *(void *)(v11 + 8) = v21;
      *(void *)(v11 + 16) = v21;
      uint64_t v22 = &v21[8 * (v20 >> 3)];
      *(void *)(v11 + 24) = v22;
      memcpy(v21, v19, v20);
      *(void *)(v11 + 16) = v22;
    }
  }
  else if (!v29)
  {
    *(void *)unint64_t v11 = v26;
    int v12 = (unsigned char *)(v11 + 8);
    if (SHIBYTE(v28) < 0)
    {
      sub_4200(v12, (void *)v27, *((unint64_t *)&v27 + 1));
    }
    else
    {
      long long v13 = v27;
      *(void *)(v11 + 24) = v28;
      *(_OWORD *)int v12 = v13;
    }
  }
  *(void *)(v11 + 40) = v30;
  long long v23 = *(_OWORD *)v31;
  *(void *)(v11 + 64) = v32;
  *(_OWORD *)(v11 + 48) = v23;
  v31[0] = 0;
  v31[1] = 0;
  *(unsigned char *)(v11 + 72) = v33;
  long long v24 = *(_OWORD *)__p;
  *(void *)(v11 + 96) = v35;
  *(_OWORD *)(v11 + 80) = v24;
  uint64_t v32 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v35 = 0;
  *(unsigned char *)(v11 + 104) = v36;
  *(void *)(a3 + 32) = v11 + 112;
  if ((SHIBYTE(v32) & 0x80000000) == 0) {
    goto LABEL_23;
  }
LABEL_34:
  operator delete(v31[0]);
  int v16 = v29;
  if (v29 == 1)
  {
LABEL_35:
    int64_t v17 = (void *)v27;
    if ((void)v27)
    {
      *((void *)&v27 + 1) = v27;
      goto LABEL_37;
    }
    return;
  }
LABEL_24:
  if (!v16 && SHIBYTE(v28) < 0)
  {
    int64_t v17 = (void *)v27;
LABEL_37:
    operator delete(v17);
  }
}

void sub_9D8314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9D8380@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if (!*(unsigned char *)(a2 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(a2 + 752);
  uint64_t v8 = *(void *)(*(void *)result + 72);
  if (0x66FD0EB66FD0EB67 * ((*(void *)(*(void *)result + 80) - v8) >> 3) <= v7) {
    sub_66748();
  }
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_DWORD *)(a4 + 80) = -1;
  *(_DWORD *)(a4 + 88) = -1;
  *(_DWORD *)(a4 + 91) = -1;
  *(void *)(a4 + 95) = 0;
  *(void *)(a4 + 111) = 0;
  *(void *)(a4 + 103) = 0;
  *(_WORD *)(a4 + 119) = 0;
  *(void *)(a4 + 136) = 0;
  *(void *)(a4 + 144) = 0;
  *(void *)(a4 + 128) = 0;
  *(unsigned char *)(a4 + 152) = 0;
  *(_DWORD *)(a4 + 192) = -1;
  *(_DWORD *)(a4 + 203) = -1;
  *(_DWORD *)(a4 + 200) = -1;
  *(void *)(a4 + 240) = 0;
  *(void *)(a4 + 215) = 0;
  *(void *)(a4 + 207) = 0;
  *(_WORD *)(a4 + 231) = 0;
  *(void *)(a4 + 223) = 0;
  *(void *)(a4 + 248) = 0;
  *(void *)(a4 + 256) = 0;
  *(unsigned char *)(a4 + 264) = 0;
  if ((a3 & 1) != 0 || *(_DWORD *)(*(void *)(result + 16) + 1436) <= 1u)
  {
    uint64_t v9 = v8 + 696 * v7;
    unint64_t v10 = *(unsigned __int8 **)(v9 + 616);
    unint64_t v11 = *(unsigned __int8 **)(v9 + 624);
    while (v10 != v11)
    {
      long long v13 = sub_969500(*(uint64_t **)(v6 + 8), a2, *v10);
      unint64_t v14 = *(void *)(a4 + 8);
      if (v14 >= *(void *)(a4 + 16))
      {
        uint64_t v12 = sub_966000((uint64_t *)a4, (uint64_t)v13);
      }
      else
      {
        sub_4F57A0(*(void *)(a4 + 8), (uint64_t)v13);
        uint64_t v12 = v14 + 112;
        *(void *)(a4 + 8) = v14 + 112;
      }
      *(void *)(a4 + 8) = v12;
      ++v10;
    }
    uint64_t v15 = v8 + 696 * v7;
    int v16 = *(unsigned __int8 **)(v15 + 592);
    int64_t v17 = *(unsigned __int8 **)(v15 + 600);
    if (v16 == v17)
    {
      uint64_t result = *(void *)(a4 + 32);
      if (*(void *)(a4 + 24) != result) {
        goto LABEL_25;
      }
      goto LABEL_19;
    }
    do
    {
      while (1)
      {
        uint64_t v18 = sub_969500(*(uint64_t **)(v6 + 8), a2, *v16);
        unint64_t v19 = *(void *)(a4 + 32);
        if (v19 < *(void *)(a4 + 40)) {
          break;
        }
        uint64_t result = sub_966000((uint64_t *)(a4 + 24), (uint64_t)v18);
        *(void *)(a4 + 32) = result;
        if (++v16 == v17) {
          goto LABEL_16;
        }
      }
      sub_4F57A0(*(void *)(a4 + 32), (uint64_t)v18);
      uint64_t result = v19 + 112;
      *(void *)(a4 + 32) = v19 + 112;
      *(void *)(a4 + 32) = v19 + 112;
      ++v16;
    }
    while (v16 != v17);
LABEL_16:
    if (*(void *)(a4 + 24) == result)
    {
LABEL_19:
      uint64_t result = sub_723EC(3u);
      if (result)
      {
        sub_6BAC((uint64_t)v25);
        sub_188FC78(v25, (uint64_t)"No stepping artworks resolved for line ", 39);
        std::ostream::operator<<();
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 3u);
        if (v24 < 0) {
          operator delete(__p);
        }
        if (v26 < 0) {
          operator delete((void *)v25[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        uint64_t result = std::ios::~ios();
      }
    }
  }
LABEL_25:
  uint64_t v20 = v8 + 696 * v7;
  if (*(unsigned char *)(v20 + 641))
  {
    long long v21 = sub_969500(*(uint64_t **)(v6 + 8), a2, *(unsigned __int8 *)(v20 + 640));
    sub_4F39B8(a4 + 160, (std::string *)v21);
    *(void *)(a4 + 200) = *((void *)v21 + 5);
    std::string::operator=((std::string *)(a4 + 208), (const std::string *)v21 + 2);
    *(unsigned char *)(a4 + 232) = *((unsigned char *)v21 + 72);
    uint64_t result = (uint64_t)std::string::operator=((std::string *)(a4 + 240), (const std::string *)(v21 + 5));
    *(unsigned char *)(a4 + 264) = *((unsigned char *)v21 + 104);
  }
  return result;
}

void sub_9D876C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    sub_934F58(v16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_934F58(v16);
  _Unwind_Resume(a1);
}

void sub_9D87CC(_Unwind_Exception *a1)
{
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D87E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D87F8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D8810(_Unwind_Exception *a1)
{
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D8824(_Unwind_Exception *a1)
{
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9D8838@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t **a4@<X3>, uint64_t a5@<X8>)
{
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_DWORD *)(a5 + 80) = -1;
  *(_DWORD *)(a5 + 88) = -1;
  *(_DWORD *)(a5 + 91) = -1;
  *(void *)(a5 + 95) = 0;
  *(void *)(a5 + 111) = 0;
  *(void *)(a5 + 103) = 0;
  *(_WORD *)(a5 + 119) = 0;
  *(void *)(a5 + 136) = 0;
  *(void *)(a5 + 144) = 0;
  *(void *)(a5 + 128) = 0;
  *(unsigned char *)(a5 + 152) = 0;
  *(_DWORD *)(a5 + 192) = -1;
  *(_DWORD *)(a5 + 200) = -1;
  *(_DWORD *)(a5 + 203) = -1;
  *(void *)(a5 + 215) = 0;
  *(void *)(a5 + 207) = 0;
  *(_WORD *)(a5 + 231) = 0;
  *(void *)(a5 + 223) = 0;
  *(void *)(a5 + 240) = 0;
  *(void *)(a5 + 248) = 0;
  *(unsigned char *)(a5 + 264) = 0;
  *(void *)(a5 + 256) = 0;
  unsigned int v6 = *(_DWORD *)(*(void *)(result + 16) + 1436);
  if (v6 <= 1)
  {
    uint64_t v7 = a3[1];
    if (*a3 != v7)
    {
      uint64_t v8 = a4[1];
      if (*a4 != v8)
      {
        uint64_t v9 = *(void *)(v7 - 8);
        if (*(_DWORD *)v9 == 4)
        {
          uint64_t v11 = result;
          uint64_t v12 = *a4;
          while (1)
          {
            long long v13 = (_DWORD *)*v12;
            if (*(_DWORD *)*v12 == 2) {
              break;
            }
            if (++v12 == v8) {
              return result;
            }
          }
          if (v12 != v8)
          {
            if (v6)
            {
              sub_9698F8(*(void *)(result + 8), 210013, (uint64_t)v20);
              sub_9D7AEC(a5, (uint64_t)v20);
              uint64_t result = sub_4D9814((uint64_t)v20);
            }
            else if (*(_DWORD *)**a4 != 6 && *(void *)(v9 + 1944) == *(void *)(v9 + 1952))
            {
              unint64_t v14 = sub_969500(*(uint64_t **)(result + 8), *v12, 7);
              uint64_t result = sub_9D745C((uint64_t)v14);
              if (result) {
                uint64_t result = sub_9D74BC((uint64_t *)a5, (uint64_t)v14);
              }
            }
            if (*(void *)(a2 + 48) != *(void *)(a2 + 56))
            {
              uint64_t v15 = *(void *)v11;
              uint64_t v16 = *(void *)(sub_921D74(v9 + 88) + 664);
              uint64_t v17 = *(void *)(v15 + 72);
              uint64_t v18 = *(void *)v11;
              uint64_t result = sub_921D74((uint64_t)(v13 + 22));
              if (*(void *)(v17 + 696 * v16 + 64) != *(void *)(*(void *)(v18 + 72)
                                                                  + 696 * *(void *)(result + 664)
                                                                  + 64))
              {
                unint64_t v19 = sub_969500(*(uint64_t **)(v11 + 8), (uint64_t)v13, 3);
                if (!sub_9D745C((uint64_t)v19)) {
                  unint64_t v19 = sub_969500(*(uint64_t **)(v11 + 8), (uint64_t)v13, 2);
                }
                return sub_9D74BC((uint64_t *)(a5 + 24), (uint64_t)v19);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_9D8A6C(_Unwind_Exception *a1)
{
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D8A80(_Unwind_Exception *a1)
{
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D8A94(_Unwind_Exception *a1)
{
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D8AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D9814((uint64_t)va);
  sub_934F58(v2);
  _Unwind_Resume(a1);
}

void sub_9D8AC4(_Unwind_Exception *a1)
{
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D8AD8(_Unwind_Exception *a1)
{
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D8AEC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v5 = *(uint64_t **)a3;
  if (*(void *)a3 == *(void *)(a3 + 8))
  {
    *(_OWORD *)(a4 + 240) = 0u;
    *(_OWORD *)(a4 + 256) = 0u;
    *(_OWORD *)(a4 + 208) = 0u;
    *(_OWORD *)(a4 + 224) = 0u;
    *(_OWORD *)(a4 + 176) = 0u;
    *(_OWORD *)(a4 + 192) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_DWORD *)(a4 + 80) = -1;
    *(_DWORD *)(a4 + 88) = -1;
    *(_DWORD *)(a4 + 91) = -1;
    *(void *)(a4 + 95) = 0;
    *(void *)(a4 + 111) = 0;
    *(void *)(a4 + 103) = 0;
    *(_WORD *)(a4 + 119) = 0;
    *(void *)(a4 + 136) = 0;
    *(void *)(a4 + 144) = 0;
    *(void *)(a4 + 128) = 0;
    *(unsigned char *)(a4 + 152) = 0;
    *(_DWORD *)(a4 + 192) = -1;
    *(_DWORD *)(a4 + 200) = -1;
    *(_DWORD *)(a4 + 203) = -1;
    *(void *)(a4 + 207) = 0;
    *(void *)(a4 + 223) = 0;
    *(void *)(a4 + 215) = 0;
    *(_WORD *)(a4 + 231) = 0;
    *(void *)(a4 + 240) = 0;
    *(void *)(a4 + 248) = 0;
    *(unsigned char *)(a4 + 264) = 0;
    *(void *)(a4 + 256) = 0;
    return;
  }
  if (!*(unsigned char *)(a2 + 80))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  int v7 = *(_DWORD *)(a2 + 72);
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_DWORD *)(a4 + 80) = -1;
  *(_DWORD *)(a4 + 88) = -1;
  *(_DWORD *)(a4 + 91) = -1;
  *(void *)(a4 + 95) = 0;
  *(void *)(a4 + 111) = 0;
  *(void *)(a4 + 103) = 0;
  *(_WORD *)(a4 + 119) = 0;
  *(void *)(a4 + 136) = 0;
  *(void *)(a4 + 144) = 0;
  *(void *)(a4 + 128) = 0;
  *(unsigned char *)(a4 + 152) = 0;
  *(_DWORD *)(a4 + 192) = -1;
  *(_DWORD *)(a4 + 203) = -1;
  *(_DWORD *)(a4 + 200) = -1;
  *(void *)(a4 + 215) = 0;
  *(void *)(a4 + 207) = 0;
  *(_WORD *)(a4 + 231) = 0;
  *(void *)(a4 + 223) = 0;
  *(void *)(a4 + 248) = 0;
  *(void *)(a4 + 256) = 0;
  *(void *)(a4 + 240) = 0;
  *(unsigned char *)(a4 + 264) = 0;
  if (v7 != 2) {
    goto LABEL_32;
  }
  uint64_t v8 = *v5;
  if (*(_DWORD *)v8 != 6) {
    goto LABEL_32;
  }
  if (!*(unsigned char *)(v8 + 952))
  {
    unsigned int v54 = __cxa_allocate_exception(8uLL);
    *unsigned int v54 = &off_2439078;
  }
  unint64_t v9 = *(void *)(v8 + 864);
  if (v9 == -1) {
    goto LABEL_32;
  }
  int v10 = sub_97C680(*(uint64_t **)a1, v9);
  if ((v10 - 4) >= 4 && v10 != 9) {
    goto LABEL_32;
  }
  sub_9698F8(*(void *)(a1 + 8), 210012, (uint64_t)&v55);
  unint64_t v11 = *(void *)(a4 + 32);
  if (v11 >= *(void *)(a4 + 40))
  {
    unint64_t v14 = sub_9D9490((void **)(a4 + 24), (uint64_t)&v55);
    int v15 = SHIBYTE(v64);
    *(void *)(a4 + 32) = v14;
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v61) < 0) {
        goto LABEL_28;
      }
    }
    else if (SHIBYTE(v61) < 0)
    {
      goto LABEL_28;
    }
LABEL_17:
    int v16 = v58;
    if (v58 == 1)
    {
LABEL_29:
      uint64_t v17 = (void *)v56;
      if (!(void)v56) {
        goto LABEL_32;
      }
      *((void *)&v56 + 1) = v56;
      goto LABEL_31;
    }
    goto LABEL_18;
  }
  *(_DWORD *)(v11 + 32) = v58;
  if (v58 == 1)
  {
    uint64_t v18 = v55;
    *(void *)(v11 + 8) = 0;
    *(void *)unint64_t v11 = v18;
    *(void *)(v11 + 16) = 0;
    *(void *)(v11 + 24) = 0;
    unint64_t v19 = (const void *)v56;
    int64_t v20 = *((void *)&v56 + 1) - v56;
    if (*((void *)&v56 + 1) != (void)v56)
    {
      if (v20 < 0) {
        sub_2E00();
      }
      long long v21 = (char *)operator new(*((void *)&v56 + 1) - v56);
      *(void *)(v11 + 8) = v21;
      *(void *)(v11 + 16) = v21;
      uint64_t v22 = &v21[8 * (v20 >> 3)];
      *(void *)(v11 + 24) = v22;
      memcpy(v21, v19, v20);
      *(void *)(v11 + 16) = v22;
    }
  }
  else if (!v58)
  {
    *(void *)unint64_t v11 = v55;
    uint64_t v12 = (unsigned char *)(v11 + 8);
    if (SHIBYTE(v57) < 0)
    {
      sub_4200(v12, (void *)v56, *((unint64_t *)&v56 + 1));
    }
    else
    {
      long long v13 = v56;
      *(void *)(v11 + 24) = v57;
      *(_OWORD *)uint64_t v12 = v13;
    }
  }
  *(void *)(v11 + 40) = v59;
  long long v23 = *(_OWORD *)v60;
  *(void *)(v11 + 64) = v61;
  *(_OWORD *)(v11 + 48) = v23;
  v60[0] = 0;
  v60[1] = 0;
  *(unsigned char *)(v11 + 72) = v62;
  long long v24 = *(_OWORD *)__p;
  *(void *)(v11 + 96) = v64;
  *(_OWORD *)(v11 + 80) = v24;
  uint64_t v61 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v64 = 0;
  *(unsigned char *)(v11 + 104) = v65;
  *(void *)(a4 + 32) = v11 + 112;
  if ((SHIBYTE(v61) & 0x80000000) == 0) {
    goto LABEL_17;
  }
LABEL_28:
  operator delete(v60[0]);
  int v16 = v58;
  if (v58 == 1) {
    goto LABEL_29;
  }
LABEL_18:
  if (!v16 && SHIBYTE(v57) < 0)
  {
    uint64_t v17 = (void *)v56;
LABEL_31:
    operator delete(v17);
  }
LABEL_32:
  sub_9698F8(*(void *)(a1 + 8), 210002, (uint64_t)&v55);
  unint64_t v25 = *(void *)(a4 + 8);
  if (v25 >= *(void *)(a4 + 16))
  {
    uint64_t v28 = sub_9D9490((void **)a4, (uint64_t)&v55);
    int v29 = SHIBYTE(v64);
    *(void *)(a4 + 8) = v28;
    if (v29 < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v61) < 0) {
        goto LABEL_50;
      }
    }
    else if (SHIBYTE(v61) < 0)
    {
      goto LABEL_50;
    }
  }
  else
  {
    *(_DWORD *)(v25 + 32) = v58;
    if (v58 == 1)
    {
      uint64_t v32 = v55;
      *(void *)(v25 + 8) = 0;
      *(void *)unint64_t v25 = v32;
      *(void *)(v25 + 16) = 0;
      *(void *)(v25 + 24) = 0;
      char v33 = (const void *)v56;
      int64_t v34 = *((void *)&v56 + 1) - v56;
      if (*((void *)&v56 + 1) != (void)v56)
      {
        if (v34 < 0) {
          sub_2E00();
        }
        uint64_t v35 = (char *)operator new(*((void *)&v56 + 1) - v56);
        *(void *)(v25 + 8) = v35;
        *(void *)(v25 + 16) = v35;
        char v36 = &v35[8 * (v34 >> 3)];
        *(void *)(v25 + 24) = v36;
        memcpy(v35, v33, v34);
        *(void *)(v25 + 16) = v36;
      }
    }
    else if (!v58)
    {
      *(void *)unint64_t v25 = v55;
      char v26 = (unsigned char *)(v25 + 8);
      if (SHIBYTE(v57) < 0)
      {
        sub_4200(v26, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v27 = v56;
        *(void *)(v25 + 24) = v57;
        *(_OWORD *)char v26 = v27;
      }
    }
    *(void *)(v25 + 40) = v59;
    long long v37 = *(_OWORD *)v60;
    *(void *)(v25 + 64) = v61;
    *(_OWORD *)(v25 + 48) = v37;
    v60[0] = 0;
    v60[1] = 0;
    *(unsigned char *)(v25 + 72) = v62;
    long long v38 = *(_OWORD *)__p;
    *(void *)(v25 + 96) = v64;
    *(_OWORD *)(v25 + 80) = v38;
    uint64_t v61 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v64 = 0;
    *(unsigned char *)(v25 + 104) = v65;
    *(void *)(a4 + 8) = v25 + 112;
    if (SHIBYTE(v61) < 0)
    {
LABEL_50:
      operator delete(v60[0]);
      int v30 = v58;
      if (v58 == 1) {
        goto LABEL_51;
      }
      goto LABEL_40;
    }
  }
  int v30 = v58;
  if (v58 == 1)
  {
LABEL_51:
    uint64_t v31 = (void *)v56;
    if (!(void)v56) {
      goto LABEL_54;
    }
    *((void *)&v56 + 1) = v56;
    goto LABEL_53;
  }
LABEL_40:
  if (!v30 && SHIBYTE(v57) < 0)
  {
    uint64_t v31 = (void *)v56;
LABEL_53:
    operator delete(v31);
  }
LABEL_54:
  if (*(void *)(a4 + 24) != *(void *)(a4 + 32)) {
    return;
  }
  sub_9698F8(*(void *)(a1 + 8), 210004, (uint64_t)&v55);
  unint64_t v39 = *(void *)(a4 + 32);
  if (v39 >= *(void *)(a4 + 40))
  {
    char v42 = sub_9D9490((void **)(a4 + 24), (uint64_t)&v55);
    int v43 = SHIBYTE(v64);
    *(void *)(a4 + 32) = v42;
    if (v43 < 0)
    {
      operator delete(__p[0]);
      if (SHIBYTE(v61) < 0) {
        goto LABEL_74;
      }
    }
    else if (SHIBYTE(v61) < 0)
    {
      goto LABEL_74;
    }
LABEL_63:
    int v44 = v58;
    if (v58 == 1) {
      goto LABEL_75;
    }
    goto LABEL_64;
  }
  *(_DWORD *)(v39 + 32) = v58;
  if (v58 == 1)
  {
    uint64_t v46 = v55;
    *(void *)(v39 + 8) = 0;
    *(void *)unint64_t v39 = v46;
    *(void *)(v39 + 16) = 0;
    *(void *)(v39 + 24) = 0;
    long long v47 = (const void *)v56;
    int64_t v48 = *((void *)&v56 + 1) - v56;
    if (*((void *)&v56 + 1) != (void)v56)
    {
      if (v48 < 0) {
        sub_2E00();
      }
      int v49 = (char *)operator new(*((void *)&v56 + 1) - v56);
      *(void *)(v39 + 8) = v49;
      *(void *)(v39 + 16) = v49;
      uint64_t v50 = &v49[8 * (v48 >> 3)];
      *(void *)(v39 + 24) = v50;
      memcpy(v49, v47, v48);
      *(void *)(v39 + 16) = v50;
    }
  }
  else if (!v58)
  {
    *(void *)unint64_t v39 = v55;
    int64_t v40 = (unsigned char *)(v39 + 8);
    if (SHIBYTE(v57) < 0)
    {
      sub_4200(v40, (void *)v56, *((unint64_t *)&v56 + 1));
    }
    else
    {
      long long v41 = v56;
      *(void *)(v39 + 24) = v57;
      *(_OWORD *)int64_t v40 = v41;
    }
  }
  *(void *)(v39 + 40) = v59;
  long long v51 = *(_OWORD *)v60;
  *(void *)(v39 + 64) = v61;
  *(_OWORD *)(v39 + 48) = v51;
  v60[0] = 0;
  v60[1] = 0;
  *(unsigned char *)(v39 + 72) = v62;
  long long v52 = *(_OWORD *)__p;
  *(void *)(v39 + 96) = v64;
  *(_OWORD *)(v39 + 80) = v52;
  uint64_t v61 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v64 = 0;
  *(unsigned char *)(v39 + 104) = v65;
  *(void *)(a4 + 32) = v39 + 112;
  if ((SHIBYTE(v61) & 0x80000000) == 0) {
    goto LABEL_63;
  }
LABEL_74:
  operator delete(v60[0]);
  int v44 = v58;
  if (v58 == 1)
  {
LABEL_75:
    char v45 = (void *)v56;
    if ((void)v56)
    {
      *((void *)&v56 + 1) = v56;
      goto LABEL_77;
    }
    return;
  }
LABEL_64:
  if (!v44 && SHIBYTE(v57) < 0)
  {
    char v45 = (void *)v56;
LABEL_77:
    operator delete(v45);
  }
}

void sub_9D9208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9D9290@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(_DWORD *)(*(void *)(result + 16) + 1436) != 1 || **(_DWORD **)(*(void *)(a3 + 8) - 8) != 2)
  {
    *(_OWORD *)(a4 + 240) = 0u;
    *(_OWORD *)(a4 + 256) = 0u;
    *(_OWORD *)(a4 + 208) = 0u;
    *(_OWORD *)(a4 + 224) = 0u;
    *(_OWORD *)(a4 + 176) = 0u;
    *(_OWORD *)(a4 + 192) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_DWORD *)(a4 + 80) = -1;
    *(_DWORD *)(a4 + 88) = -1;
    *(_DWORD *)(a4 + 91) = -1;
    *(void *)(a4 + 95) = 0;
    *(void *)(a4 + 111) = 0;
    *(void *)(a4 + 103) = 0;
    *(_WORD *)(a4 + 119) = 0;
    *(void *)(a4 + 136) = 0;
    *(void *)(a4 + 144) = 0;
    *(void *)(a4 + 128) = 0;
    *(unsigned char *)(a4 + 152) = 0;
    *(_DWORD *)(a4 + 192) = -1;
    *(_DWORD *)(a4 + 200) = -1;
    *(_DWORD *)(a4 + 203) = -1;
    *(void *)(a4 + 207) = 0;
    *(void *)(a4 + 223) = 0;
    *(void *)(a4 + 215) = 0;
    *(_WORD *)(a4 + 231) = 0;
    *(void *)(a4 + 240) = 0;
    *(void *)(a4 + 248) = 0;
    *(unsigned char *)(a4 + 264) = 0;
    *(void *)(a4 + 256) = 0;
    return result;
  }
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_DWORD *)(a4 + 80) = -1;
  *(_DWORD *)(a4 + 88) = -1;
  *(_DWORD *)(a4 + 91) = -1;
  *(void *)(a4 + 95) = 0;
  *(void *)(a4 + 111) = 0;
  *(void *)(a4 + 103) = 0;
  *(_WORD *)(a4 + 119) = 0;
  *(void *)(a4 + 136) = 0;
  *(void *)(a4 + 144) = 0;
  *(void *)(a4 + 128) = 0;
  *(unsigned char *)(a4 + 152) = 0;
  *(_DWORD *)(a4 + 192) = -1;
  *(_DWORD *)(a4 + 203) = -1;
  *(_DWORD *)(a4 + 200) = -1;
  *(void *)(a4 + 215) = 0;
  *(void *)(a4 + 207) = 0;
  *(_WORD *)(a4 + 231) = 0;
  *(void *)(a4 + 223) = 0;
  *(void *)(a4 + 248) = 0;
  *(void *)(a4 + 256) = 0;
  *(void *)(a4 + 240) = 0;
  *(unsigned char *)(a4 + 264) = 0;
  uint64_t result = (uint64_t)sub_969500(*(uint64_t **)(result + 8), a2, 7);
  int v5 = *(_DWORD *)(result + 32);
  if (v5 != 1)
  {
    if (v5 || *(_DWORD *)result == -1) {
      return result;
    }
LABEL_11:
    unint64_t v6 = *(void *)(a4 + 8);
    if (v6 >= *(void *)(a4 + 16))
    {
      uint64_t result = sub_966000((uint64_t *)a4, result);
      *(void *)(a4 + 8) = result;
    }
    else
    {
      sub_4F57A0(*(void *)(a4 + 8), result);
      uint64_t result = v6 + 112;
      *(void *)(a4 + 8) = v6 + 112;
      *(void *)(a4 + 8) = v6 + 112;
    }
    return result;
  }
  if (*(_DWORD *)(result + 4) != -1 || *(_DWORD *)result != -1 || *(void *)(result + 8) != *(void *)(result + 16)) {
    goto LABEL_11;
  }
  return result;
}

void sub_9D9464(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

void sub_9D947C(_Unwind_Exception *a1)
{
  sub_934F58(v1);
  _Unwind_Resume(a1);
}

char *sub_9D9490(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x249249249249249) {
    sub_2E00();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)) >= 0x124924924924924) {
    unint64_t v6 = 0x249249249249249;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x249249249249249) {
      sub_188D718();
    }
    int v7 = (char *)operator new(112 * v6);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = &v7[112 * v3];
  unint64_t v9 = (void *)*(unsigned int *)(a2 + 32);
  *((_DWORD *)v8 + 8) = v9;
  sub_4F38B0(v9, (uint64_t *)a2, v8);
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *((_OWORD *)v8 + 3) = *(_OWORD *)(a2 + 48);
  int v10 = &v7[112 * v6];
  *((void *)v8 + 8) = *(void *)(a2 + 64);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  v8[72] = *(unsigned char *)(a2 + 72);
  *((_OWORD *)v8 + 5) = *(_OWORD *)(a2 + 80);
  *((void *)v8 + 12) = *(void *)(a2 + 96);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 80) = 0;
  v8[104] = *(unsigned char *)(a2 + 104);
  unint64_t v11 = v8 + 112;
  long long v13 = (void **)*a1;
  uint64_t v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v10;
    if (!v12) {
      return v8 + 112;
    }
    goto LABEL_30;
  }
  uint64_t v14 = 0;
  do
  {
    int v15 = &v8[v14 * 8];
    int v16 = &v12[v14];
    *(_DWORD *)&v8[v14 * 8 - 80] = v12[v14 - 10];
    sub_4F38B0((void *)LODWORD(v12[v14 - 10]), (uint64_t *)&v12[v14 - 14], &v8[v14 * 8 - 112]);
    *((void *)v15 - 9) = v12[v14 - 9];
    long long v17 = *(_OWORD *)&v12[v14 - 8];
    *((void *)v15 - 6) = v12[v14 - 6];
    *((_OWORD *)v15 - 4) = v17;
    *(v16 - 7) = 0;
    *(v16 - 6) = 0;
    *(v16 - 8) = 0;
    *(v15 - 40) = (char)v12[v14 - 5];
    long long v18 = *(_OWORD *)&v12[v14 - 4];
    *((void *)v15 - 2) = v12[v14 - 2];
    *((_OWORD *)v15 - 2) = v18;
    *(v16 - 3) = 0;
    *(v16 - 2) = 0;
    *(v16 - 4) = 0;
    *(v15 - 8) = (char)v12[v14 - 1];
    v14 -= 14;
  }
  while (&v12[v14] != v13);
  unint64_t v19 = (void **)*a1;
  uint64_t v12 = (void **)a1[1];
  *a1 = &v8[v14 * 8];
  a1[1] = v11;
  a1[2] = v10;
  if (v12 != v19)
  {
    while (1)
    {
      if (*((char *)v12 - 9) < 0)
      {
        operator delete(*(v12 - 4));
        if ((*((char *)v12 - 41) & 0x80000000) == 0)
        {
LABEL_20:
          int v20 = *((_DWORD *)v12 - 20);
          if (v20 != 1) {
            goto LABEL_21;
          }
          goto LABEL_26;
        }
      }
      else if ((*((char *)v12 - 41) & 0x80000000) == 0)
      {
        goto LABEL_20;
      }
      operator delete(*(v12 - 8));
      int v20 = *((_DWORD *)v12 - 20);
      if (v20 != 1)
      {
LABEL_21:
        if (v20 || (*((char *)v12 - 81) & 0x80000000) == 0) {
          goto LABEL_17;
        }
        long long v21 = *(v12 - 13);
        goto LABEL_16;
      }
LABEL_26:
      long long v21 = *(v12 - 13);
      if (!v21) {
        goto LABEL_17;
      }
      *(v12 - 12) = v21;
LABEL_16:
      operator delete(v21);
LABEL_17:
      v12 -= 14;
      if (v12 == v19)
      {
        uint64_t v12 = v19;
        break;
      }
    }
  }
  if (v12) {
LABEL_30:
  }
    operator delete(v12);
  return v8 + 112;
}

double sub_9D972C()
{
  byte_25DDA87 = 1;
  word_25DDA70 = 65;
  byte_25DDA9F = 1;
  word_25DDA88 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DDB30 = 0u;
  *(_OWORD *)&qword_25DDB40 = 0u;
  dword_25DDB50 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DDB30, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DDB30, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DDB30, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DDB30, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DDAB7 = 8;
  strcpy((char *)&qword_25DDAA0, "any_mode");
  byte_25DDACF = 7;
  strcpy((char *)&dword_25DDAB8, "cycling");
  byte_25DDAE7 = 7;
  strcpy((char *)&dword_25DDAD0, "driving");
  byte_25DDAFF = 7;
  strcpy((char *)&dword_25DDAE8, "walking");
  qword_25DDB08 = 0;
  qword_25DDB10 = 0;
  qword_25DDB00 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DDB00 = (uint64_t)v0;
  qword_25DDB08 = (uint64_t)(v0 + 9);
  qword_25DDB10 = (uint64_t)(v0 + 9);
  qword_25DDB18 = 0;
  qword_25DDB20 = 0;
  unk_25DDB28 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DDB20 = (uint64_t)(v1 + 9);
  unk_25DDB28 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DDB18 = (uint64_t)v1;
  return result;
}

void sub_9D99F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DDB40) {
    sub_20AD808((void **)qword_25DDB40);
  }
  long long v37 = (void *)xmmword_25DDB30;
  *(void *)&xmmword_25DDB30 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_9D9A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(_DWORD *)(a2 + 1436) > 1u;
  sub_4BBDC0(a1 + 8, a2);
  *(void *)(a1 + 1544) = a3;
  return a1;
}

void sub_9D9AD4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    sub_2F99CC(v42, a2 + 24, *(void *)(a1 + 1544));
    char v4 = *(void **)a2;
    int v5 = *(void **)(a2 + 8);
    if (*(void **)a2 != v5)
    {
      do
      {
        sub_9E6208((uint64_t)v36, v4);
        while (1)
        {
          sub_9E6260((uint64_t)v36, v26);
          BOOL v6 = sub_9E6044(v36, v26);
          char v7 = v32;
          int v8 = v33;
          if (v33 == v32)
          {
            int v8 = v32;
            uint64_t v35 = 0;
            unint64_t v15 = 0;
          }
          else
          {
            unint64_t v9 = &v32[v34 >> 7];
            uint64_t v10 = (uint64_t)*v9;
            uint64_t v11 = (uint64_t)*v9 + 32 * (v34 & 0x7F);
            uint64_t v12 = *(uint64_t *)((char *)v32 + (((v35 + v34) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v35 + v34) & 0x7F);
            if (v11 != v12)
            {
              do
              {
                char v13 = *(void **)v11;
                if (*(void *)v11)
                {
                  *(void *)(v11 + 8) = v13;
                  operator delete(v13);
                  uint64_t v10 = (uint64_t)*v9;
                }
                v11 += 32;
                if (v11 - v10 == 4096)
                {
                  uint64_t v14 = (uint64_t)v9[1];
                  ++v9;
                  uint64_t v10 = v14;
                  uint64_t v11 = v14;
                }
              }
              while (v11 != v12);
              char v7 = v32;
              int v8 = v33;
            }
            uint64_t v35 = 0;
            unint64_t v15 = (char *)v8 - (char *)v7;
            if ((unint64_t)((char *)v8 - (char *)v7) >= 0x11)
            {
              do
              {
                operator delete(*v7);
                int v8 = v33;
                char v7 = v32 + 1;
                uint64_t v32 = v7;
                unint64_t v15 = (char *)v33 - (char *)v7;
              }
              while ((unint64_t)((char *)v33 - (char *)v7) > 0x10);
            }
          }
          unint64_t v16 = v15 >> 3;
          if (v16 == 1)
          {
            uint64_t v17 = 64;
            goto LABEL_22;
          }
          if (v16 == 2)
          {
            uint64_t v17 = 128;
LABEL_22:
            unint64_t v34 = v17;
          }
          if (v7 != v8)
          {
            do
            {
              long long v18 = *v7++;
              operator delete(v18);
            }
            while (v7 != v8);
            if (v33 != v32) {
              char v33 = (void **)((char *)v33 + (((char *)v32 - (char *)v33 + 7) & 0xFFFFFFFFFFFFFFF8));
            }
          }
          if (__p) {
            operator delete(__p);
          }
          unint64_t v19 = v30;
          if (v30)
          {
            do
            {
              int v20 = (void *)*v19;
              operator delete(v19);
              unint64_t v19 = v20;
            }
            while (v20);
          }
          long long v21 = v29;
          int v29 = 0;
          if (v21) {
            operator delete(v21);
          }
          if (v27)
          {
            uint64_t v28 = v27;
            operator delete(v27);
          }
          if (!v6) {
            break;
          }
          uint64_t v22 = sub_9E6230((uint64_t)v36);
          sub_9D9DA0(a1, (uint64_t)v42, v22);
          sub_9E5780(v36);
        }
        sub_9467EC((uint64_t)&v41);
        long long v23 = v40;
        if (v40)
        {
          do
          {
            long long v24 = (void *)*v23;
            operator delete(v23);
            long long v23 = v24;
          }
          while (v24);
        }
        unint64_t v25 = v39;
        unint64_t v39 = 0;
        if (v25) {
          operator delete(v25);
        }
        if (v37)
        {
          long long v38 = v37;
          operator delete(v37);
        }
        v4 += 390;
      }
      while (v4 != v5);
    }
  }
}

void sub_9D9D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_9D9D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_9D9D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

uint64_t sub_9D9DA0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a3 == 5)
  {
    if (!*(unsigned char *)(a3 + 1000))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    if (*(unsigned char *)(a3 + 964))
    {
      sub_5F3D7C((uint64_t)v11, (uint64_t)&word_25DE050, (__int16 *)(result + 1185));
      if (!*(unsigned char *)(a3 + 1000))
      {
        uint64_t v10 = __cxa_allocate_exception(8uLL);
        *uint64_t v10 = &off_2439078;
      }
      sub_5F657C(v11, (uint64_t)&word_25DE050, *(_DWORD *)(a3 + 960));
      sub_9698F8(a2, 210002, (uint64_t)v12);
      unint64_t v5 = *(void *)(a3 + 1872);
      if (v5 >= *(void *)(a3 + 1880))
      {
        uint64_t v6 = sub_9D9FE8((uint64_t *)(a3 + 1864), (uint64_t)v12, (uint64_t)v11);
      }
      else
      {
        sub_9DA164(*(void *)(a3 + 1872), (uint64_t)v12, (uint64_t)v11);
        uint64_t v6 = v5 + 272;
        *(void *)(a3 + 1872) = v5 + 272;
      }
      *(void *)(a3 + 1872) = v6;
      if (v20 < 0)
      {
        operator delete(v19);
        if ((v18 & 0x80000000) == 0)
        {
LABEL_10:
          int v7 = v16;
          if (v16 != 1) {
            goto LABEL_11;
          }
          goto LABEL_16;
        }
      }
      else if ((v18 & 0x80000000) == 0)
      {
        goto LABEL_10;
      }
      operator delete(v17);
      int v7 = v16;
      if (v16 != 1)
      {
LABEL_11:
        if (v7 || (v15 & 0x80000000) == 0) {
          return sub_4D4B58((uint64_t)v11);
        }
        int v8 = v13;
        goto LABEL_18;
      }
LABEL_16:
      int v8 = v13;
      if (!v13) {
        return sub_4D4B58((uint64_t)v11);
      }
      uint64_t v14 = v13;
LABEL_18:
      operator delete(v8);
      return sub_4D4B58((uint64_t)v11);
    }
  }
  return result;
}

void sub_9D9F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D9814(v2 - 152);
  sub_4D4B58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9D9FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9D9FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D4B58((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9D9FE8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xF0F0F0F0F0F0F0) {
    sub_2E00();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 4) > v5) {
    unint64_t v5 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 4);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 4) >= 0x78787878787878) {
    unint64_t v8 = 0xF0F0F0F0F0F0F0;
  }
  else {
    unint64_t v8 = v5;
  }
  char v20 = a1 + 2;
  if (v8)
  {
    if (v8 > 0xF0F0F0F0F0F0F0) {
      sub_188D718();
    }
    unint64_t v9 = (char *)operator new(272 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  std::string __p = v9;
  v18.i64[0] = (uint64_t)&v9[272 * v4];
  v18.i64[1] = v18.i64[0];
  unint64_t v19 = &v9[272 * v8];
  sub_9DA164(v18.i64[0], a2, a3);
  uint64_t v10 = v18.i64[0];
  uint64_t v11 = v18.i64[0] + 272;
  uint64_t v13 = *a1;
  unint64_t v12 = a1[1];
  if (v12 == *a1)
  {
    int64x2_t v14 = vdupq_n_s64(v12);
  }
  else
  {
    do
    {
      v10 -= 272;
      v12 -= 272;
      sub_9DA1F8((uint64_t)(a1 + 2), v10, v12);
    }
    while (v12 != v13);
    int64x2_t v14 = *(int64x2_t *)a1;
  }
  *a1 = v10;
  a1[1] = v11;
  int64x2_t v18 = v14;
  char v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  unint64_t v19 = v15;
  std::string __p = (void *)v14.i64[0];
  sub_9DA34C((uint64_t)&__p, v14.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_9DA150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9DA1C0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9DA164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_4F57A0(a1, a2);
  sub_4F58AC(v5 + 112, a3);
  return a1;
}

void sub_9DA19C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*(void **)(v1 + 80));
  }
  sub_20AC60C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9DA1C0(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_9DA1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  sub_4F38B0((void *)*(unsigned int *)(a3 + 32), (uint64_t *)a3, (void *)a2);
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  long long v5 = *(_OWORD *)(a3 + 48);
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)(a3 + 48) = 0;
  *(unsigned char *)(a2 + 72) = *(unsigned char *)(a3 + 72);
  long long v6 = *(_OWORD *)(a3 + 80);
  *(void *)(a2 + 96) = *(void *)(a3 + 96);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a3 + 88) = 0u;
  *(void *)(a3 + 80) = 0;
  *(unsigned char *)(a2 + 104) = *(unsigned char *)(a3 + 104);
  *(_OWORD *)(a2 + 120) = 0u;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(void *)(a2 + 128) = *(void *)(a3 + 128);
  *(void *)(a3 + 128) = 0;
  *(_OWORD *)(a3 + 112) = 0u;
  *(void *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a3 + 136);
  *(void *)(a2 + 152) = *(void *)(a3 + 152);
  *(void *)(a3 + 152) = 0;
  *(_OWORD *)(a3 + 136) = 0u;
  *(void *)(a2 + 176) = 0;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  *(void *)(a2 + 176) = *(void *)(a3 + 176);
  *(void *)(a3 + 176) = 0;
  *(_OWORD *)(a3 + 160) = 0u;
  *(void *)(a2 + 200) = 0;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(a3 + 184);
  *(void *)(a2 + 200) = *(void *)(a3 + 200);
  *(_OWORD *)(a3 + 184) = 0u;
  uint64_t v7 = *(void *)(a3 + 208);
  *(_OWORD *)(a3 + 200) = 0u;
  *(void *)(a2 + 208) = v7;
  LODWORD(v7) = *(_DWORD *)(a3 + 216);
  *(unsigned char *)(a2 + 220) = *(unsigned char *)(a3 + 220);
  *(_DWORD *)(a2 + 216) = v7;
  long long v8 = *(_OWORD *)(a3 + 224);
  *(void *)(a2 + 240) = *(void *)(a3 + 240);
  *(_OWORD *)(a2 + 224) = v8;
  *(void *)(a3 + 232) = 0;
  *(void *)(a3 + 240) = 0;
  *(void *)(a3 + 224) = 0;
  __n128 result = *(__n128 *)(a3 + 248);
  *(void *)(a2 + 264) = *(void *)(a3 + 264);
  *(__n128 *)(a2 + 248) = result;
  *(void *)(a3 + 256) = 0;
  *(void *)(a3 + 264) = 0;
  *(void *)(a3 + 248) = 0;
  return result;
}

void sub_9DA34C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 272;
    sub_4D4B58(i - 160);
    if (*(char *)(i - 169) < 0)
    {
      operator delete(*(void **)(i - 192));
      if ((*(char *)(i - 201) & 0x80000000) == 0)
      {
LABEL_7:
        int v6 = *(_DWORD *)(i - 240);
        if (v6 != 1) {
          goto LABEL_8;
        }
        goto LABEL_13;
      }
    }
    else if ((*(char *)(i - 201) & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(*(void **)(i - 224));
    int v6 = *(_DWORD *)(i - 240);
    if (v6 != 1)
    {
LABEL_8:
      if (v6 || (*(char *)(i - 241) & 0x80000000) == 0) {
        continue;
      }
      long long v5 = *(void **)(i - 264);
      goto LABEL_3;
    }
LABEL_13:
    long long v5 = *(void **)(i - 264);
    if (!v5) {
      continue;
    }
    *(void *)(i - 256) = v5;
LABEL_3:
    operator delete(v5);
  }
}

double sub_9DA414()
{
  byte_25DDB6F = 1;
  word_25DDB58 = 65;
  byte_25DDB87 = 1;
  word_25DDB70 = 65;
  byte_25DDB9F = 6;
  strcpy((char *)&dword_25DDB88, "{Mode}");
  byte_25DDBB7 = 11;
  strcpy((char *)&qword_25DDBA0, "{Direction}");
  byte_25DDBCF = 6;
  strcpy((char *)&dword_25DDBB8, "{Line}");
  byte_25DDBE7 = 12;
  strcpy((char *)&qword_25DDBD0, "{LineNumber}");
  strcpy(&byte_25DDBFF, "\n{Headsign1}");
  strcpy((char *)&qword_25DDBE8, "{Headsign}");
  byte_25DDC17 = 11;
  byte_25DDC2F = 11;
  strcpy((char *)&qword_25DDC18, "{Headsign2}");
  byte_25DDC47 = 11;
  strcpy((char *)&qword_25DDC30, "{Headsign3}");
  byte_25DDC5F = 11;
  strcpy((char *)&qword_25DDC48, "{Headsign4}");
  byte_25DDC77 = 11;
  strcpy((char *)&qword_25DDC60, "{Headsign5}");
  byte_25DDC8F = 6;
  strcpy((char *)&dword_25DDC78, "{Stop}");
  byte_25DDCA7 = 14;
  strcpy((char *)&qword_25DDC90, "{PreviousStop}");
  byte_25DDCBF = 8;
  strcpy((char *)&qword_25DDCA8, "{System}");
  byte_25DDCD7 = 15;
  strcpy((char *)&qword_25DDCC0, "{VehicleNumber}");
  byte_25DDCEF = 17;
  strcpy((char *)&xmmword_25DDCD8, "{AccessPointExit}");
  strcpy(&byte_25DDD07, "\n{nextBoardStation}");
  strcpy((char *)&qword_25DDCF0, "{Platform}");
  byte_25DDD1F = 18;
  qword_25DDD20 = 0;
  unk_25DDD28 = 0;
  qword_25DDD30 = 0;
  byte_25DDD4F = 1;
  word_25DDD38 = 32;
  qword_25DDD50 = (uint64_t)operator new(0x20uLL);
  xmmword_25DDD58 = xmmword_20B8890;
  strcpy((char *)qword_25DDD50, "LeaveStop_Loc_Comma_Separator");
  byte_25DDD7F = 5;
  dword_25DDD68 = -1028144608;
  word_25DDD6C = 160;
  byte_25DDD97 = 2;
  word_25DDD80 = -24382;
  byte_25DDD82 = 0;
  byte_25DDDAF = 4;
  dword_25DDD98 = 548913696;
  byte_25DDD9C = 0;
  byte_25DDDC7 = 15;
  strcpy((char *)&qword_25DDDB0 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25DDDB0, "{s:s} ·");
  byte_25DDDDF = 6;
  strcpy((char *)&dword_25DDDC8, "NoType");
  byte_25DDDF7 = 14;
  strcpy((char *)&qword_25DDDE0, "{WalkDistance}");
  strcpy(&byte_25DDE0F, "\n{OneMinute}");
  strcpy((char *)&qword_25DDDF8, "{WalkTime}");
  byte_25DDE27 = 11;
  byte_25DDE3F = 14;
  strcpy((char *)&qword_25DDE28, "{StepDuration}");
  byte_25DDE57 = 15;
  strcpy((char *)&qword_25DDE40, "{TripFrequency}");
  byte_25DDE6F = 11;
  strcpy((char *)&qword_25DDE58, "{BoardTime}");
  byte_25DDE87 = 12;
  strcpy((char *)&qword_25DDE70, "{AlightTime}");
  byte_25DDE9F = 21;
  strcpy((char *)&xmmword_25DDE88, "{FutureTimestampList}");
  byte_25DDEB7 = 15;
  strcpy((char *)&qword_25DDEA0, "{DepartureTime}");
  byte_25DDECF = 13;
  strcpy((char *)&qword_25DDEB8, "{ArrivalTime}");
  byte_25DDEE7 = 19;
  strcpy((char *)&xmmword_25DDED0, "{TotalWalkDistance}");
  byte_25DDEFF = 14;
  strcpy((char *)&qword_25DDEE8, "{TripDuration}");
  byte_25DDF17 = 11;
  strcpy((char *)&qword_25DDF00, "{DayOfWeek}");
  byte_25DDF2F = 6;
  strcpy((char *)&dword_25DDF18, "{Date}");
  byte_25DDF47 = 16;
  strcpy((char *)&xmmword_25DDF30, "{OutTheDoorTime}");
  qword_25DDF48 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_25DDF50 = xmmword_20B91A0;
  strcpy((char *)qword_25DDF48, "{FirstVehicleDepartureTime}");
  byte_25DDF77 = 18;
  strcpy((char *)&xmmword_25DDF60, "{RouteArrivalTime}");
  strcpy(&byte_25DDF8F, "\n{IC_Artwork}");
  strcpy((char *)&qword_25DDF78, "{BaseFare}");
  byte_25DDFA7 = 12;
  byte_25DDFBF = 11;
  strcpy((char *)&qword_25DDFA8, "{RT_Symbol}");
  byte_25DDFD7 = 12;
  strcpy((char *)&qword_25DDFC0, "{TotalPrice}");
  byte_25DDFEF = 13;
  strcpy((char *)&qword_25DDFD8, "{CheckInTime}");
  byte_25DE007 = 19;
  strcpy((char *)&xmmword_25DDFF0, "{LiveDepartureTime}");
  strcpy(&byte_25DE01F, "\n{LegDuration}");
  strcpy((char *)&qword_25DE008, "{TimeList}");
  byte_25DE037 = 13;
  byte_25DE04F = 15;
  strcpy((char *)&qword_25DE038, "{CountdownList}");
  byte_25DE067 = 3;
  byte_25DE052 = 125;
  word_25DE050 = 25723;
  byte_25DE053 = 0;
  strcpy(&byte_25DE07F, "\t{AccessPointArt}");
  strcpy((char *)&qword_25DE068, "{LineArt}");
  byte_25DE097 = 16;
  byte_25DE0AF = 11;
  strcpy((char *)&qword_25DE098, "{SystemArt}");
  strcpy(&byte_25DE0C7, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25DE0B0, "{CardName}");
  byte_25DE0DF = 18;
  byte_25DE0F7 = 16;
  strcpy((char *)&xmmword_25DE0E0, "{ServiceEndTime}");
  byte_25DE10F = 6;
  strcpy((char *)&dword_25DE0F8, "OnTime");
  byte_25DE127 = 6;
  strcpy((char *)&dword_25DE110, "Delays");
  byte_25DE13F = 1;
  word_25DE128 = 115;
  byte_25DE157 = 2;
  strcpy((char *)&word_25DE140, "cs");
  byte_25DE16F = 1;
  word_25DE158 = 112;
  byte_25DE187 = 5;
  byte_25DE174 = 101;
  dword_25DE170 = 1852394591;
  byte_25DE175 = 0;
  byte_25DE19F = 7;
  strcpy((char *)&dword_25DE188, "_System");
  strcpy(&byte_25DE1B7, "\n_VehicleNumber");
  strcpy((char *)&qword_25DE1A0, "_Direction");
  byte_25DE1CF = 14;
  byte_25DE1E7 = 12;
  strcpy((char *)&qword_25DE1D0, "_To_Headsign");
  byte_25DE1FF = 16;
  strcpy((char *)&xmmword_25DE1E8, "_Toward_Headsign");
  strcpy(&byte_25DE217, "\t_LineNumber");
  strcpy((char *)&qword_25DE200, "_Headsign");
  byte_25DE22F = 11;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DE2C0 = 0u;
  *(_OWORD *)&qword_25DE2D0 = 0u;
  dword_25DE2E0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DE2C0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DE2C0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DE2C0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DE2C0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DE247 = 8;
  strcpy((char *)&qword_25DE230, "any_mode");
  byte_25DE25F = 7;
  strcpy((char *)&dword_25DE248, "cycling");
  byte_25DE277 = 7;
  strcpy((char *)&dword_25DE260, "driving");
  byte_25DE28F = 7;
  strcpy((char *)&dword_25DE278, "walking");
  qword_25DE290 = 0;
  unk_25DE298 = 0;
  qword_25DE2A0 = 0;
  uint64_t v0 = (char *)operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DE290 = (uint64_t)v0;
  unk_25DE298 = v0 + 9;
  qword_25DE2A0 = (uint64_t)(v0 + 9);
  qword_25DE2A8 = 0;
  qword_25DE2B0 = 0;
  unk_25DE2B8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DE2B0 = (uint64_t)(v1 + 9);
  unk_25DE2B8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DE2A8 = (uint64_t)v1;
  return result;
}

void sub_9DB024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DE2D0) {
    sub_20AD84C((void **)qword_25DE2D0);
  }
  long long v37 = (void *)xmmword_25DE2C0;
  *(void *)&xmmword_25DE2C0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_9DB0C4(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  BOOL v10 = sub_9DB514((void *)a1);
  unsigned int v11 = *(_DWORD *)(a1 + 128);
  if (v10 && v11 == 4)
  {
    if (a3 != 2 || a4 != 1) {
      goto LABEL_17;
    }
  }
  else
  {
    BOOL v12 = v11 > 8;
    int v13 = (1 << v11) & 0x160;
    if (v12 || v13 == 0) {
      goto LABEL_17;
    }
  }
  char v15 = *(_DWORD ***)(a1 + 48);
  int v16 = *(_DWORD ***)(a1 + 56);
  if (v15 == v16)
  {
LABEL_13:
    if (**(_DWORD **)(a1 + 72) != 2)
    {
LABEL_17:
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 104))(a1, 2);
      sub_9DB368((std::string *)a1, a5, a2);
      return;
    }
  }
  else
  {
    while (**v15 != 2)
    {
      if (++v15 == v16) {
        goto LABEL_13;
      }
    }
  }

  sub_9DB200(a1, a5);
}

void sub_9DB1EC(_Unwind_Exception *a1)
{
  sub_50828(v1);
  _Unwind_Resume(a1);
}

void sub_9DB200(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(_DWORD ***)(a1 + 48);
  char v4 = *(_DWORD ***)(a1 + 56);
  if (v3 == v4)
  {
LABEL_4:
    int v5 = *(_DWORD **)(a1 + 72);
    if (*v5 != 2)
    {
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_DWORD *)(a2 + 32) = 1065353216;
      return;
    }
  }
  else
  {
    while (1)
    {
      int v5 = *v3;
      if (**v3 == 2) {
        break;
      }
      if (++v3 == v4) {
        goto LABEL_4;
      }
    }
  }
  char v7 = *(long long **)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v12 = *(void *)(a1 + 80);
  int8x16_t v13 = vextq_s8(*(int8x16_t *)(a1 + 88), *(int8x16_t *)(a1 + 88), 8uLL);
  uint64_t v14 = v8;
  uint64_t v15 = v6;
  long long v9 = *v7;
  long long v10 = v7[1];
  long long v18 = v7[2];
  long long v17 = v10;
  long long v16 = v9;
  sub_9E1E70(a1 + 24, a1 + 48, (uint64_t)v5, &v12, &v19);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 104))(v19, 2);
  unsigned int v11 = v20;
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_9DB354(_Unwind_Exception *a1)
{
  sub_14A84(v1 - 40);
  _Unwind_Resume(a1);
}

std::string *sub_9DB368(std::string *result, uint64_t a2, uint64_t a3)
{
  if (result[9].__r_.__value_.__s.__data_[0])
  {
    char v3 = *(unsigned char *)(a3 + 23);
    uint64_t v4 = v3 >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(void *)(a3 + 8);
    int v5 = v3 >= 0 ? (std::string *)a3 : *(std::string **)a3;
    if (v4 >= 5)
    {
      char v7 = (std::string *)((char *)v5 + v4);
      uint64_t v8 = v4;
      double result = v5;
      do
      {
        double result = (std::string *)memchr(result, 95, v8 - 4);
        if (!result) {
          break;
        }
        if (LODWORD(result->__r_.__value_.__l.__data_) == 1852394591 && result->__r_.__value_.__s.__data_[4] == 101)
        {
          if (result != v7 && (char *)result - (char *)v5 != -1 && v4 >= 7)
          {
            double result = v5;
            while (1)
            {
              double result = (std::string *)memchr(result, 95, v4 - 6);
              if (!result) {
                break;
              }
              if (LODWORD(result->__r_.__value_.__l.__data_) == 1937331039
                && *(_DWORD *)((char *)result->__r_.__value_.__r.__words + 3) == 1835365491)
              {
                if (result != v7 && (char *)result - (char *)v5 != -1)
                {
                  uint64_t v12 = byte_25DE4D8;
                  unsigned int v11 = sub_31B300(a2, (uint64_t)byte_25DE4D8, (uint64_t)&unk_20F06E0, (long long **)&v12);
                  return std::string::assign((std::string *)(v11 + 5), "");
                }
                return result;
              }
              double result = (std::string *)((char *)result + 1);
              uint64_t v4 = (char *)v7 - (char *)result;
              if ((char *)v7 - (char *)result < 7) {
                return result;
              }
            }
          }
          return result;
        }
        double result = (std::string *)((char *)result + 1);
        uint64_t v8 = (char *)v7 - (char *)result;
      }
      while ((char *)v7 - (char *)result >= 5);
    }
  }
  return result;
}

_DWORD *sub_9DB4DC(void *a1, int a2)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = a1[7];
  if (v2 == v3) {
    return (_DWORD *)a1[9];
  }
  while (**(_DWORD **)v2 != a2)
  {
    v2 += 8;
    if (v2 == v3) {
      return (_DWORD *)a1[9];
    }
  }
  return *(_DWORD **)v2;
}

BOOL sub_9DB514(void *a1)
{
  uint64_t v1 = a1[9];
  if (*(_DWORD *)v1 == 4)
  {
    if (!*(unsigned char *)(v1 + 792)) {
      return 0;
    }
    uint64_t v2 = *(void *)(v1 + 752);
    if (v2 == -1) {
      return 0;
    }
    uint64_t v3 = *(void *)(a1[10] + 72);
    if ((*(unsigned char *)(v3 + 696 * v2 + 67) & 0x80) != 0) {
      return 0;
    }
    goto LABEL_5;
  }
  uint64_t v9 = a1[3];
  uint64_t v8 = a1[4];
  if (v8 == v9) {
    return 0;
  }
  while (1)
  {
    unsigned int v11 = *(_DWORD **)(v8 - 8);
    v8 -= 8;
    long long v10 = v11;
    int v12 = *v11;
    if ((*v11 - 5) >= 2) {
      break;
    }
    if (v8 == v9) {
      return 0;
    }
  }
  if (v12 != 4) {
    return 0;
  }
  if (!*((unsigned char *)v10 + 792)) {
    return 0;
  }
  uint64_t v13 = *((void *)v10 + 94);
  if (v13 == -1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1[10] + 72);
  if ((*(unsigned char *)(v3 + 696 * v13 + 67) & 0x80) != 0) {
    return 0;
  }
  if (*(_DWORD *)v1 != 2)
  {
LABEL_5:
    uint64_t v4 = (int **)a1[6];
    int v5 = (int **)a1[7];
    if (v4 != v5)
    {
      while (1)
      {
        uint64_t v6 = *v4;
        int v7 = **v4;
        if ((v7 - 5) >= 2) {
          break;
        }
        if (++v4 == v5) {
          return 0;
        }
      }
      if (v7 == 2)
      {
        if (*((unsigned char *)v6 + 792))
        {
          uint64_t v14 = *((void *)v6 + 94);
          if (v14 != -1) {
            return (*(unsigned char *)(v3 + 696 * v14 + 67) & 0x80) == 0;
          }
        }
      }
    }
    return 0;
  }
  if (*(unsigned char *)(v1 + 792))
  {
    uint64_t v14 = *(void *)(v1 + 752);
    if (v14 != -1) {
      return (*(unsigned char *)(v3 + 696 * v14 + 67) & 0x80) == 0;
    }
  }
  return 0;
}

BOOL sub_9DB63C(void *a1)
{
  uint64_t v1 = (int *)a1[9];
  int v2 = *v1;
  if (*v1 != 2)
  {
    int v7 = (int **)a1[6];
    uint64_t v8 = (int **)a1[7];
    if (v7 == v8) {
      goto LABEL_22;
    }
    while (1)
    {
      uint64_t v9 = *v7;
      int v10 = **v7;
      if ((v10 - 5) >= 2) {
        break;
      }
      if (++v7 == v8) {
        goto LABEL_22;
      }
    }
    if (v10 != 2 || !*((unsigned char *)v9 + 792) || (uint64_t v3 = *((void *)v9 + 94), v3 == -1))
    {
LABEL_22:
      int v4 = -1;
      if (v2 != 4)
      {
LABEL_5:
        uint64_t v6 = a1[3];
        uint64_t v5 = a1[4];
        if (v5 != v6) {
          goto LABEL_12;
        }
        return v4 == -1;
      }
LABEL_23:
      if (*((unsigned char *)v1 + 792))
      {
        uint64_t v14 = *((void *)v1 + 94);
        if (v14 != -1) {
          return v4 == *(_DWORD *)(*(void *)(a1[10] + 72) + 696 * v14 + 64);
        }
      }
      return v4 == -1;
    }
LABEL_4:
    int v4 = *(_DWORD *)(*(void *)(a1[10] + 72) + 696 * v3 + 64);
    if (v2 != 4) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
  if (*((unsigned char *)v1 + 792))
  {
    uint64_t v3 = *((void *)v1 + 94);
    if (v3 != -1) {
      goto LABEL_4;
    }
  }
  int v4 = -1;
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  if (v5 != v6)
  {
LABEL_12:
    while (1)
    {
      int v12 = *(_DWORD **)(v5 - 8);
      v5 -= 8;
      unsigned int v11 = v12;
      int v13 = *v12;
      if ((*v12 - 5) >= 2) {
        break;
      }
      if (v5 == v6) {
        return v4 == -1;
      }
    }
    if (v13 != 4) {
      return v4 == -1;
    }
    if (!*((unsigned char *)v11 + 792)) {
      return v4 == -1;
    }
    uint64_t v14 = *((void *)v11 + 94);
    if (v14 == -1) {
      return v4 == -1;
    }
    return v4 == *(_DWORD *)(*(void *)(a1[10] + 72) + 696 * v14 + 64);
  }
  return v4 == -1;
}

uint64_t sub_9DB778(void *a1)
{
  uint64_t v1 = a1[9];
  if (*(_DWORD *)v1 == 2)
  {
    if (*(unsigned char *)(v1 + 792))
    {
      uint64_t v2 = *(void *)(v1 + 752);
      if (v2 != -1) {
        return *(unsigned int *)(*(void *)(a1[10] + 72) + 696 * v2 + 64);
      }
    }
    return 0xFFFFFFFFLL;
  }
  int v4 = (int **)a1[6];
  uint64_t v5 = (int **)a1[7];
  if (v4 == v5) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t v6 = *v4;
    int v7 = **v4;
    if ((v7 - 5) >= 2) {
      break;
    }
    if (++v4 == v5) {
      return 0xFFFFFFFFLL;
    }
  }
  if (v7 != 2 || !*((unsigned char *)v6 + 792)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *((void *)v6 + 94);
  if (v2 != -1) {
    return *(unsigned int *)(*(void *)(a1[10] + 72) + 696 * v2 + 64);
  }
  return 0xFFFFFFFFLL;
}

BOOL sub_9DB810(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 == v2) {
    return 0;
  }
  int v3 = 0;
  while (1)
  {
    uint64_t v5 = *(unsigned int **)(v1 - 8);
    v1 -= 8;
    int v4 = v5;
    unsigned int v6 = *v5;
    if (*v5 == 2) {
      return v3 == 1;
    }
    if (!*((unsigned char *)v4 + 792) || !*((unsigned char *)v4 + 157)) {
      break;
    }
LABEL_3:
    if (v1 == v2) {
      return v3 == 1;
    }
  }
  BOOL v7 = v6 > 7;
  int v8 = (1 << v6) & 0xD2;
  if (!v7 && v8 != 0) {
    return 0;
  }
  if (v3 <= 0)
  {
    ++v3;
    goto LABEL_3;
  }
  return 0;
}

uint64_t sub_9DB8C0()
{
  return 1;
}

uint64_t sub_9DB8C8()
{
  return 0;
}

uint64_t sub_9DB8D0()
{
  return 0;
}

void sub_9DB8E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v39[0] = &qword_25DE3D0;
  int v4 = sub_31B300(a2, (uint64_t)&qword_25DE3D0, (uint64_t)&unk_20F06E0, (long long **)v39);
  std::string::operator=((std::string *)(v4 + 5), (const std::string *)(a1 + 192));
  sub_994EAC((uint64_t *)(a1 + 224), (uint64_t)v39);
  *(void *)uint64_t v41 = &qword_25DE4C0;
  uint64_t v5 = sub_31B300(a2, (uint64_t)&qword_25DE4C0, (uint64_t)&unk_20F06E0, (long long **)v41);
  unsigned int v6 = (void **)(v5 + 5);
  if (*((char *)v5 + 63) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)unsigned int v6 = *(_OWORD *)v39;
  v6[2] = v39[2];
  sub_994EAC((uint64_t *)(a1 + 336), (uint64_t)v39);
  *(void *)uint64_t v41 = &dword_25DE4A8;
  BOOL v7 = sub_31B300(a2, (uint64_t)&dword_25DE4A8, (uint64_t)&unk_20F06E0, (long long **)v41);
  int v8 = (void **)(v7 + 5);
  if (*((char *)v7 + 63) < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)int v8 = *(_OWORD *)v39;
  v8[2] = v39[2];
  sub_995044((uint64_t *)(a1 + 416), (uint64_t)v39);
  *(void *)uint64_t v41 = &dword_25DE3E8;
  uint64_t v9 = sub_31B300(a2, (uint64_t)&dword_25DE3E8, (uint64_t)&unk_20F06E0, (long long **)v41);
  int v10 = (void **)(v9 + 5);
  if (*((char *)v9 + 63) < 0) {
    operator delete(*v10);
  }
  *(_OWORD *)int v10 = *(_OWORD *)v39;
  v10[2] = v39[2];
  v39[0] = &dword_25DE3E8;
  unsigned int v11 = sub_31B300(a2, (uint64_t)&dword_25DE3E8, (uint64_t)&unk_20F06E0, (long long **)v39);
  v39[0] = &qword_25DE400;
  int v12 = sub_31B300(a2, (uint64_t)&qword_25DE400, (uint64_t)&unk_20F06E0, (long long **)v39);
  std::string::operator=((std::string *)(v12 + 5), (const std::string *)(v11 + 5));
  sub_994EAC((uint64_t *)(a1 + 440), (uint64_t)v39);
  *(void *)uint64_t v41 = &xmmword_25DE4D8;
  int v13 = sub_31B300(a2, (uint64_t)&xmmword_25DE4D8, (uint64_t)&unk_20F06E0, (long long **)v41);
  uint64_t v14 = (void **)(v13 + 5);
  if (*((char *)v13 + 63) < 0) {
    operator delete(*v14);
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v39;
  void v14[2] = v39[2];
  v39[0] = &qword_25DE4F0;
  uint64_t v15 = sub_31B300(a2, (uint64_t)&qword_25DE4F0, (uint64_t)&unk_20F06E0, (long long **)v39);
  std::string::operator=((std::string *)(v15 + 5), (const std::string *)(a1 + 136));
  sub_995114((uint64_t *)(a1 + 312), (char *)v39);
  long long v16 = v39[0];
  *(void **)uint64_t v41 = v39[1];
  *(void **)&v41[7] = *(void **)((char *)&v39[1] + 7);
  char v17 = HIBYTE(v39[2]);
  memset(v39, 0, 24);
  if (v40 < 0)
  {
    operator delete(v39[4]);
    if (SHIBYTE(v39[2]) < 0) {
      operator delete(v39[0]);
    }
  }
  v39[0] = &xmmword_25DE508;
  long long v18 = sub_31B300(a2, (uint64_t)&xmmword_25DE508, (uint64_t)&unk_20F06E0, (long long **)v39);
  uint64_t v19 = v18;
  if (*((char *)v18 + 63) < 0) {
    operator delete((void *)v18[5]);
  }
  uint64_t v20 = *(void *)v41;
  v19[5] = (uint64_t)v16;
  v19[6] = v20;
  *(uint64_t *)((char *)v19 + 55) = *(void *)&v41[7];
  *((unsigned char *)v19 + 63) = v17;
  v39[0] = &qword_25DE520;
  long long v21 = sub_31B300(a2, (uint64_t)&qword_25DE520, (uint64_t)&unk_20F06E0, (long long **)v39);
  std::string::operator=((std::string *)(v21 + 5), (const std::string *)(a1 + 360));
  sub_994EAC((uint64_t *)(a1 + 336), (uint64_t)v39);
  *(void *)uint64_t v41 = &xmmword_25DE538;
  uint64_t v22 = sub_31B300(a2, (uint64_t)&xmmword_25DE538, (uint64_t)&unk_20F06E0, (long long **)v41);
  long long v23 = (void **)(v22 + 5);
  if (*((char *)v22 + 63) < 0) {
    operator delete(*v23);
  }
  *(_OWORD *)long long v23 = *(_OWORD *)v39;
  v23[2] = v39[2];
  unint64_t v25 = *(const std::string **)(a1 + 168);
  long long v24 = *(const std::string **)(a1 + 176);
  uint64_t v26 = (char *)v24 - (char *)v25;
  if (v24 != v25)
  {
    v39[0] = &qword_25DE418;
    long long v27 = sub_31B300(a2, (uint64_t)&qword_25DE418, (uint64_t)&unk_20F06E0, (long long **)v39);
    std::string::operator=((std::string *)(v27 + 5), v25);
    uint64_t v28 = *(const std::string **)(a1 + 168);
    v39[0] = &qword_25DE430;
    int v29 = sub_31B300(a2, (uint64_t)&qword_25DE430, (uint64_t)&unk_20F06E0, (long long **)v39);
    std::string::operator=((std::string *)(v29 + 5), v28);
    unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (v26 >> 3);
    if (v30 >= 2)
    {
      uint64_t v31 = *(const std::string **)(a1 + 168);
      v39[0] = &qword_25DE448;
      uint64_t v32 = sub_31B300(a2, (uint64_t)&qword_25DE448, (uint64_t)&unk_20F06E0, (long long **)v39);
      std::string::operator=((std::string *)(v32 + 5), v31 + 1);
      if (v30 >= 3)
      {
        char v33 = *(const std::string **)(a1 + 168);
        v39[0] = &qword_25DE460;
        unint64_t v34 = sub_31B300(a2, (uint64_t)&qword_25DE460, (uint64_t)&unk_20F06E0, (long long **)v39);
        std::string::operator=((std::string *)(v34 + 5), v33 + 2);
        if (v30 >= 4)
        {
          uint64_t v35 = *(const std::string **)(a1 + 168);
          v39[0] = &qword_25DE478;
          char v36 = sub_31B300(a2, (uint64_t)&qword_25DE478, (uint64_t)&unk_20F06E0, (long long **)v39);
          std::string::operator=((std::string *)(v36 + 5), v35 + 3);
          if (v30 >= 5)
          {
            long long v37 = *(const std::string **)(a1 + 168);
            v39[0] = &qword_25DE490;
            long long v38 = sub_31B300(a2, (uint64_t)&qword_25DE490, (uint64_t)&unk_20F06E0, (long long **)v39);
            std::string::operator=((std::string *)(v38 + 5), v37 + 4);
          }
        }
      }
    }
  }
}

void sub_9DBDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_50828(v15);
    _Unwind_Resume(a1);
  }
  sub_50828(v15);
  _Unwind_Resume(a1);
}

void sub_9DBE70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_9DBE78(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_9DBE80(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_995114((uint64_t *)(a1 + 312), (char *)v3);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(void *)(a2 + 16) = v4;
  v3[1] = 0;
  uint64_t v4 = 0;
  v3[0] = 0;
  if (v6 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v4) < 0) {
      operator delete(v3[0]);
    }
  }
}

void sub_9DBEFC(int a1@<W1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 1:
      *(unsigned char *)(a2 + 23) = 9;
      strcpy((char *)a2, "_BUS_STOP");
      break;
    case 2:
      *(unsigned char *)(a2 + 23) = 11;
      strcpy((char *)a2, "_TRAIN_STOP");
      break;
    case 3:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "_SUBWAY_STOP");
      break;
    case 4:
      *(unsigned char *)(a2 + 23) = 12;
      strcpy((char *)a2, "_BUS_STATION");
      break;
    case 5:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "_TRAIN_STATION");
      break;
    case 6:
      uint64_t v2 = "_SUBWAY_STATION";
      goto LABEL_10;
    case 7:
      uint64_t v2 = "_FERRY_TERMINAL";
LABEL_10:
      *(unsigned char *)(a2 + 23) = 15;
      *(void *)a2 = *(void *)v2;
      *(void *)(a2 + 7) = *(void *)(v2 + 7);
      *(unsigned char *)(a2 + 15) = 0;
      break;
    case 8:
      *(unsigned char *)(a2 + 23) = 10;
      strcpy((char *)a2, "_TRAM_STOP");
      break;
    case 9:
      *(unsigned char *)(a2 + 23) = 13;
      strcpy((char *)a2, "_TRAM_STATION");
      break;
    default:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      break;
  }
}

void sub_9DC0B4(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  int v4 = a1;
  sub_98CF54(a1, (uint64_t)&v8);
  switch(v4)
  {
    case 0:
      if (!a2) {
        goto LABEL_15;
      }
      *(unsigned char *)(a3 + 23) = 8;
      strcpy((char *)a3, "_Station");
      if (v9 < 0) {
        goto LABEL_22;
      }
      return;
    case 1:
      if (!a2) {
        goto LABEL_15;
      }
      goto LABEL_14;
    case 2:
      if (a2) {
        goto LABEL_14;
      }
      goto LABEL_15;
    case 3:
      if (a2) {
        goto LABEL_14;
      }
      goto LABEL_15;
    case 4:
    case 5:
    case 6:
    case 9:
      std::operator+<char>();
      char v6 = std::string::append(&__p, "_Station");
      goto LABEL_18;
    case 7:
      *(unsigned char *)(a3 + 23) = 15;
      strcpy((char *)a3, "_Terminal_Ferry");
      if (v9 < 0) {
        goto LABEL_22;
      }
      return;
    case 8:
      if (!a2) {
        goto LABEL_15;
      }
LABEL_14:
      std::operator+<char>();
      char v6 = std::string::append(&__p, "_Stop");
LABEL_18:
      *(_OWORD *)a3 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      *(void *)(a3 + 16) = *((void *)&v6->__r_.__value_.__l + 2);
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v9 & 0x80000000) == 0) {
          return;
        }
      }
      else if ((v9 & 0x80000000) == 0)
      {
        return;
      }
LABEL_22:
      operator delete(v8);
      return;
    default:
LABEL_15:
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      if (v9 < 0) {
        goto LABEL_22;
      }
      return;
  }
}

void sub_9DC338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9DC3CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (v1 == *(void *)(a1 + 56)) {
    uint64_t v1 = a1 + 72;
  }
  return *(void *)v1;
}

void sub_9DC3E4(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (_DWORD **)a1[6];
  int v3 = (_DWORD **)a1[7];
  if (v2 == v3)
  {
LABEL_4:
    int v4 = (_DWORD *)a1[9];
    if (*v4 != 2)
    {
LABEL_8:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      return;
    }
  }
  else
  {
    while (1)
    {
      int v4 = *v2;
      if (**v2 == 2) {
        break;
      }
      if (++v2 == v3) {
        goto LABEL_4;
      }
    }
  }
  if (!*((unsigned char *)v4 + 792)) {
    goto LABEL_8;
  }
  uint64_t v5 = *((void *)v4 + 94);
  if (v5 == -1) {
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(a1[10] + 72);
  if (*(unsigned char *)(v6 + 696 * v5 + 559)) {
    goto LABEL_8;
  }
  sub_995044((uint64_t *)(v6 + 696 * v5), (uint64_t)a2);
}

void sub_9DC460(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (_DWORD **)a1[6];
  int v3 = (_DWORD **)a1[7];
  if (v2 == v3)
  {
LABEL_4:
    int v4 = (_DWORD *)a1[9];
    if (*v4 != 2)
    {
LABEL_11:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      return;
    }
  }
  else
  {
    while (1)
    {
      int v4 = *v2;
      if (**v2 == 2) {
        break;
      }
      if (++v2 == v3) {
        goto LABEL_4;
      }
    }
  }
  if (!*((unsigned char *)v4 + 792)) {
    goto LABEL_11;
  }
  uint64_t v5 = (void *)a1[10];
  uint64_t v6 = v5[9];
  unint64_t v7 = *((void *)v4 + 94);
  if (0x66FD0EB66FD0EB67 * ((v5[10] - v6) >> 3) <= v7) {
    sub_66748();
  }
  unint64_t v8 = *(void *)(v6 + 696 * v7 + 64);
  uint64_t v9 = v5[12];
  if (0x4EC4EC4EC4EC4EC5 * ((v5[13] - v9) >> 4) <= v8) {
    sub_66748();
  }

  sub_994EAC((uint64_t *)(v9 + 208 * v8), (uint64_t)a2);
}

void *sub_9DC554@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  int v3 = (_DWORD **)result[6];
  int v4 = (_DWORD **)result[7];
  if (v3 == v4)
  {
LABEL_4:
    uint64_t v5 = (_DWORD *)result[9];
    if (*v5 != 2) {
      return result;
    }
  }
  else
  {
    while (1)
    {
      uint64_t v5 = *v3;
      if (**v3 == 2) {
        break;
      }
      if (++v3 == v4) {
        goto LABEL_4;
      }
    }
  }
  if (*((unsigned char *)v5 + 792))
  {
    uint64_t v6 = *((void *)v5 + 28);
    uint64_t v7 = *((void *)v5 + 29);
    if (v6 != v7)
    {
      unint64_t v8 = 0;
      do
      {
        while ((unint64_t)v8 >= *(void *)(a2 + 16))
        {
          double result = sub_6E6EC((char **)a2, v6);
          unint64_t v8 = result;
          *(void *)(a2 + 8) = result;
          v6 += 56;
          if (v6 == v7) {
            return result;
          }
        }
        if (*(char *)(v6 + 23) < 0)
        {
          double result = sub_4200(v8, *(void **)v6, *(void *)(v6 + 8));
        }
        else
        {
          long long v9 = *(_OWORD *)v6;
          v8[2] = *(void *)(v6 + 16);
          *(_OWORD *)unint64_t v8 = v9;
        }
        v8 += 3;
        *(void *)(a2 + 8) = v8;
        *(void *)(a2 + 8) = v8;
        v6 += 56;
      }
      while (v6 != v7);
    }
  }
  return result;
}

void sub_9DC648(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  sub_1A668((void **)v1);
  _Unwind_Resume(a1);
}

void sub_9DC660(_Unwind_Exception *a1)
{
  sub_1A668(v1);
  _Unwind_Resume(a1);
}

double sub_9DC674@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2[2] + 1436))
  {
    switch(*(_DWORD *)sub_9E6018(a1))
    {
      case 1:
        sub_9E2070(a1, a2, v7);
        break;
      case 2:
        sub_9E2634(a1, a2, (uint64_t *)v7);
        break;
      case 3:
        sub_9E2A0C(a1, a2, (uint64_t *)v7);
        break;
      case 4:
        sub_9E2820(a1, a2, v7);
        break;
      case 5:
        sub_9E2448(a1, a2, v7);
        break;
      case 6:
        sub_9E225C(a1, a2, v7);
        break;
      default:
        goto LABEL_4;
    }
    double result = v7[0];
    *(_OWORD *)a3 = *(_OWORD *)v7;
  }
  else
  {
LABEL_4:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  return result;
}

void sub_9DC7CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>)
{
  char v18 = *(unsigned char *)(a3 + 48);
  v8.n128_f64[0] = sub_9302A4(a2, (uint64_t *)a3, (uint64_t)&v16);
  if (v16)
  {
    long long v9 = v17;
    a4->n128_u64[0] = v16;
    a4->n128_u64[1] = (unint64_t)v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    v8.n128_f64[0] = sub_9DC674(a2, (uint64_t *)a3, (uint64_t)&v14);
    if (v14)
    {
      int v10 = v15;
      a4->n128_u64[0] = v14;
      a4->n128_u64[1] = (unint64_t)v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      switch(*(_DWORD *)sub_9E6018(a2))
      {
        case 1:
          sub_9E2BF8(a2, (void *)a3, (uint64_t *)&v13);
          goto LABEL_17;
        case 2:
          sub_9E33A8(a2, (void *)a3, (uint64_t *)&v13);
          goto LABEL_17;
        case 4:
          sub_9E2DE4(a2, (void *)a3, (uint64_t *)&v13);
          goto LABEL_17;
        case 5:
          sub_9E3780(a2, (void *)a3, (uint64_t *)&v13);
          goto LABEL_17;
        case 6:
          sub_9E2FD0(a2, (void *)a3, (uint64_t *)&v13);
          goto LABEL_17;
        case 7:
          sub_9E31BC(a2, (void *)a3, (uint64_t *)&v13);
          goto LABEL_17;
        case 8:
          sub_9E3594(a2, (void *)a3, (uint64_t *)&v13);
          goto LABEL_17;
        case 9:
          sub_9E396C(a1, a2, (void *)a3, (uint64_t *)&v13);
LABEL_17:
          __n128 v8 = v13;
          *a4 = v13;
          break;
        default:
          a4->n128_u64[0] = 0;
          a4->n128_u64[1] = 0;
          break;
      }
    }
    unsigned int v11 = v15;
    if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v8);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  int v12 = v17;
  if (v17)
  {
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v8);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_9DCA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_14A84((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_9DCA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9DCAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 104);
  if (v2 == -1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(*(void *)(v3 + 24) + 144 * v2 + 104);
  if (v4 == -1) {
    return 0;
  }
  uint64_t v5 = *(void *)(v3 + 48) + 136 * v4;
  if (*(void *)(v5 + 16) == *(void *)(v5 + 24)) {
    return 0;
  }
  else {
    return v5;
  }
}

BOOL sub_9DCB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3 = 0;
  if (a2 == -1 || a3 == -1) {
    return v3;
  }
  uint64_t v6 = *(uint64_t **)(a1 + 80);
  uint64_t v7 = *v6;
  uint64_t v8 = *v6 + 168 * a2;
  uint64_t v9 = *(void *)(v8 + 104);
  if (v9 == -1 || (uint64_t v10 = *(void *)(v6[3] + 144 * v9 + 104), v10 == -1))
  {
    unsigned int v11 = 0;
    uint64_t v12 = *(void *)(v7 + 168 * a3 + 104);
    if (v12 == -1) {
      return 0;
    }
  }
  else
  {
    unsigned int v11 = (void *)(v6[6] + 136 * v10);
    if (v11[2] == v11[3]) {
      unsigned int v11 = 0;
    }
    uint64_t v12 = *(void *)(v7 + 168 * a3 + 104);
    if (v12 == -1) {
      return 0;
    }
  }
  uint64_t v13 = *(void *)(v6[3] + 144 * v12 + 104);
  if (v13 == -1) {
    return 0;
  }
  BOOL v3 = 0;
  unint64_t v14 = (void *)(v6[6] + 136 * v13);
  if (v14[2] == v14[3]) {
    unint64_t v14 = 0;
  }
  if (!v11 || !v14) {
    return v3;
  }
  if (v11[11] == v14[11]) {
    return 0;
  }
  uint64_t v16 = v7 + 168 * a3;
  char v17 = (uint64_t *)sub_97C798(v8, (uint64_t)v6);
  sub_994EAC(v17, (uint64_t)&__s1);
  char v18 = (uint64_t *)sub_97C798(v16, *(void *)(a1 + 80));
  sub_994EAC(v18, (uint64_t)__p);
  unsigned __int8 v19 = v34;
  if ((v34 & 0x80u) == 0) {
    size_t v20 = v34;
  }
  else {
    size_t v20 = __n;
  }
  unint64_t v21 = v31;
  int v22 = (char)v31;
  if ((v31 & 0x80u) != 0) {
    unint64_t v21 = (unint64_t)__p[1];
  }
  if (v20 == v21)
  {
    if ((v31 & 0x80u) == 0) {
      long long v23 = __p;
    }
    else {
      long long v23 = (void **)__p[0];
    }
    if ((char)v34 < 0)
    {
      BOOL v3 = memcmp(__s1, v23, __n) != 0;
    }
    else if (v34)
    {
      uint64_t v24 = v34 - 1;
      p_s1 = &__s1;
      do
      {
        int v27 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v26 = v27;
        int v28 = *(unsigned __int8 *)v23;
        long long v23 = (void **)((char *)v23 + 1);
        BOOL v3 = v26 != v28;
      }
      while (v26 == v28 && v24-- != 0);
    }
    else
    {
      BOOL v3 = 0;
    }
  }
  else
  {
    BOOL v3 = 1;
  }
  if (v22 < 0)
  {
    operator delete(__p[0]);
    unsigned __int8 v19 = v34;
  }
  if ((v19 & 0x80) == 0) {
    return v3;
  }
  operator delete(__s1);
  return v3;
}

void sub_9DCD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9DCD2C(uint64_t a1, uint64_t a2)
{
  return sub_97C798(a2, *(void *)(a1 + 80));
}

uint64_t sub_9DCD3C(uint64_t a1, uint64_t a2, void *a3)
{
  sub_9E57A8(a2, (uint64_t **)v9);
  sub_9E5A94(a2, 0xFFFFFFFFFFFFFFFFLL, (char **)__p);
  uint64_t v6 = sub_9E6018(a2);
  sub_9DCE20(a1, (uint64_t)v9, (uint64_t)__p, v6, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  return a1;
}

void sub_9DCDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_9DCE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = off_243C658;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v10 = *(const void **)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  int64_t v11 = v9 - *(void *)a2;
  if (v9 != *(void *)a2)
  {
    if (v11 < 0) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(v9 - *(void *)a2);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    *(void *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(void *)(a1 + 32) = v13;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  unint64_t v14 = *(const void **)a3;
  int64_t v15 = *(void *)(a3 + 8) - *(void *)a3;
  if (v15)
  {
    if (v15 < 0) {
      sub_2E00();
    }
    uint64_t v16 = (char *)operator new(v15);
    *(void *)(a1 + 48) = v16;
    *(void *)(a1 + 56) = v16;
    char v17 = &v16[8 * (v15 >> 3)];
    *(void *)(a1 + 64) = v17;
    memcpy(v16, v14, v15);
    *(void *)(a1 + 56) = v17;
  }
  *(void *)(a1 + 72) = a4;
  *(void *)(a1 + 80) = *a5;
  *(void *)(a1 + 88) = a5[2];
  *(void *)(a1 + 96) = a5[1];
  *(void *)(a1 + 104) = a5[3];
  *(void *)(a1 + 112) = a5 + 5;
  *(void *)(a1 + 120) = a5[4];
  *(_DWORD *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 132) = 2;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_WORD *)(a1 + 216) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 252) = 0x8000000080000000;
  *(_WORD *)(a1 + 260) = 0;
  *(_OWORD *)(a1 + 264) = xmmword_20EA7A0;
  *(void *)(a1 + 280) = 0x8000000080000000;
  *(_WORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 292) = xmmword_20EA7A0;
  *(void *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(unsigned char *)(a1 + 384) = 2;
  *(void *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  sub_9DD110(a1);
  return a1;
}

void sub_9DD008(_Unwind_Exception *a1)
{
  uint64_t v13 = v4;
  sub_1A6DC((void **)(v1 + 488));
  sub_5F84D4(v1 + 464);
  sub_8E4FE0((void **)(v1 + 440));
  sub_8E4FE0((void **)(v1 + 416));
  sub_4A0638(v6);
  sub_8E4FE0((void **)(v1 + 336));
  sub_8E4FE0(v7);
  sub_8E4FE0(v13);
  if (*(char *)(v1 + 215) < 0)
  {
    operator delete(*(void **)(v1 + 192));
    sub_1A668(v5);
    if ((*(char *)(v1 + 159) & 0x80000000) == 0)
    {
LABEL_3:
      uint64_t v10 = *v3;
      if (!*v3) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    sub_1A668(v5);
    if ((*(char *)(v1 + 159) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*v8);
  uint64_t v10 = *v3;
  if (!*v3)
  {
LABEL_4:
    int64_t v11 = *v2;
    if (!*v2) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  *(void *)(v1 + 56) = v10;
  operator delete(v10);
  int64_t v11 = *v2;
  if (!*v2)
  {
LABEL_5:
    uint64_t v12 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v12) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  *(void *)(v1 + 32) = v11;
  operator delete(v11);
  uint64_t v12 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v12) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_11:
  std::__shared_weak_count::__release_weak(v12);
  _Unwind_Resume(a1);
}

void sub_9DD110(uint64_t a1)
{
  BOOL v3 = (_DWORD **)(a1 + 72);
  uint64_t v2 = *(_DWORD **)(a1 + 72);
  if (*((unsigned char *)v2 + 792))
  {
    uint64_t v4 = *(void *)(a1 + 80);
    uint64_t v5 = *((void *)v2 + 94);
    uint64_t v6 = *(void *)(v4 + 72);
    uint64_t v7 = v6 + 696 * v5;
    uint64_t v8 = (char **)(a1 + 416);
    if (*(unsigned char *)(v7 + 559)) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v8 == (char **)v7;
    }
    if (!v9)
    {
      sub_8F59E0(v8, *(std::string **)v7, *(long long **)(v7 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3));
      uint64_t v4 = *(void *)(a1 + 80);
    }
    uint64_t v10 = v6 + 696 * v5;
    uint64_t v11 = *(void *)(v10 + 64);
    uint64_t v12 = *(void *)(v4 + 96);
    uint64_t v13 = v12 + 208 * v11;
    *(_WORD *)(a1 + 132) = *(_WORD *)(v10 + 556);
    int v14 = *(unsigned __int8 *)(v10 + 560);
    if (v14) {
      LOBYTE(v14) = **v3 != 8;
    }
    *(unsigned char *)(a1 + 217) = v14;
    if (a1 + 440 != v13) {
      sub_8F59E0((char **)(a1 + 440), *(std::string **)v13, *(long long **)(v13 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 3));
    }
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(v12 + 208 * v11 + 200);
    *(unsigned char *)(a1 + 160) = *((unsigned char *)v2 + 158);
    if (*((unsigned char *)v2 + 216)) {
      std::string::operator=((std::string *)(a1 + 136), (const std::string *)(v2 + 40));
    }
    uint64_t v15 = *((void *)v2 + 28);
    uint64_t v16 = *((void *)v2 + 29);
    if (v15 != v16)
    {
      char v17 = *(char **)(a1 + 176);
      do
      {
        while ((unint64_t)v17 >= *(void *)(a1 + 184))
        {
          char v17 = sub_1D740((char **)(a1 + 168), v15);
          *(void *)(a1 + 176) = v17;
          v15 += 56;
          if (v15 == v16) {
            goto LABEL_21;
          }
        }
        if (*(char *)(v15 + 23) < 0)
        {
          sub_4200(v17, *(void **)v15, *(void *)(v15 + 8));
        }
        else
        {
          long long v18 = *(_OWORD *)v15;
          *((void *)v17 + 2) = *(void *)(v15 + 16);
          *(_OWORD *)char v17 = v18;
        }
        v17 += 24;
        *(void *)(a1 + 176) = v17;
        *(void *)(a1 + 176) = v17;
        v15 += 56;
      }
      while (v15 != v16);
    }
LABEL_21:
    if (!*(unsigned char *)(v6 + 696 * v5 + 561) && *((unsigned char *)v2 + 584)) {
      std::string::operator=((std::string *)(a1 + 192), (const std::string *)v2 + 22);
    }
    *(unsigned char *)(a1 + 161) = *((unsigned char *)v2 + 156);
    uint64_t v2 = *(_DWORD **)(a1 + 72);
  }
  if (*v2 == 7) {
    goto LABEL_42;
  }
  unsigned __int8 v19 = *(_DWORD ***)(a1 + 48);
  if (v19 == *(_DWORD ***)(a1 + 56)) {
    unsigned __int8 v19 = v3;
  }
  uint64_t v2 = *v19;
  if (**v19 == 7)
  {
LABEL_42:
    if (*((unsigned char *)v2 + 952))
    {
      uint64_t v20 = *((void *)v2 + 107);
      if (v20 != -1)
      {
        uint64_t v21 = *(void *)(*(void *)(a1 + 80) + 120);
        int v22 = (std::string **)(v21 + 304 * v20 + 40);
        if ((std::string **)(a1 + 312) != v22) {
          sub_8F59E0((char **)(a1 + 312), *v22, *(long long **)(v21 + 304 * v20 + 48), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v21 + 304 * v20 + 48) - (void)*v22) >> 3));
        }
        sub_995114((uint64_t *)(a1 + 312), (char *)&v26);
        long long v23 = v26;
        uint64_t v24 = v27;
        int v25 = SHIBYTE(v28);
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        int v26 = 0;
        if (v30 < 0)
        {
          operator delete(__p);
          if (SHIBYTE(v28) < 0) {
            operator delete(v26);
          }
        }
        if (v25 < 0)
        {
          *(unsigned char *)(a1 + 163) = v24 != 0;
          operator delete(v23);
        }
        else
        {
          *(unsigned char *)(a1 + 163) = v25 != 0;
        }
      }
    }
  }
  sub_9DD41C(a1, **(_DWORD **)(a1 + 72));
  sub_9DD528(a1);
}

void sub_9DD414(_Unwind_Exception *a1)
{
  *(void *)(v1 + 176) = v2;
  _Unwind_Resume(a1);
}

BOOL sub_9DD41C(BOOL result, int a2)
{
  uint64_t v2 = result;
  switch(a2)
  {
    case 0:
    case 10:
      goto LABEL_2;
    case 1:
      int v3 = 1;
      goto LABEL_18;
    case 2:
      double result = sub_9DB514((void *)result);
      if (result && (double result = sub_9DB63C((void *)v2))) {
        int v3 = 3;
      }
      else {
        int v3 = 2;
      }
      goto LABEL_18;
    case 3:
      int v3 = 11;
      goto LABEL_18;
    case 4:
      int v3 = 4;
      goto LABEL_18;
    case 5:
      double result = sub_9DB514((void *)result);
      if (result)
      {
        double result = sub_9DB63C((void *)v2);
        if (result) {
          int v3 = 5;
        }
        else {
          int v3 = 6;
        }
LABEL_18:
        *(_DWORD *)(v2 + 128) = v3;
      }
      else
      {
LABEL_2:
        *(_DWORD *)(v2 + 128) = 0;
      }
      return result;
    case 6:
      int v3 = 8;
      goto LABEL_18;
    case 7:
      int v3 = 9;
      goto LABEL_18;
    case 8:
      int v3 = 7;
      goto LABEL_18;
    case 9:
      int v3 = 10;
      goto LABEL_18;
    default:
      return result;
  }
}

void sub_9DD528(uint64_t a1)
{
  int v3 = (uint64_t *)(a1 + 72);
  uint64_t v2 = *(int **)(a1 + 72);
  uint64_t v4 = *((void *)v2 + 6);
  if (v4 != -1 || ((v4 = *((void *)v2 + 7), v5 = *v2, v4 != -1) ? (BOOL v6 = v5 == 6) : (BOOL v6 = 0), v6))
  {
    uint64_t v7 = *(uint64_t **)(a1 + 80);
    uint64_t v8 = *v7;
    if (*v7)
    {
      uint64_t v9 = sub_97C798(v8 + 168 * v4, (uint64_t)v7);
      if (a1 + 336 != v9) {
        sub_8F59E0((char **)(a1 + 336), *(std::string **)v9, *(long long **)(v9 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 3));
      }
      *(unsigned char *)(a1 + 162) = *(unsigned char *)(v8 + 168 * v4 + 163);
      uint64_t v10 = *(void *)(a1 + 72);
      if (*(_DWORD *)v10 != 6)
      {
        if (*(_DWORD *)v10 != 2) {
          return;
        }
        if (*(unsigned char *)(v10 + 792))
        {
          if (*(char *)(v10 + 271) < 0)
          {
            sub_4200(__p, *(void **)(v10 + 248), *(void *)(v10 + 256));
            BYTE8(v18) = *(unsigned char *)(v10 + 272);
            if ((*(char *)(v10 + 303) & 0x80000000) == 0) {
              goto LABEL_15;
            }
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)(v10 + 248);
            *(void *)&long long v18 = *(void *)(v10 + 264);
            BYTE8(v18) = *(unsigned char *)(v10 + 272);
            if ((*(char *)(v10 + 303) & 0x80000000) == 0)
            {
LABEL_15:
              uint64_t v11 = (long long *)(v10 + 280);
LABEL_22:
              long long v19 = *v11;
              uint64_t v20 = *((void *)v11 + 2);
LABEL_28:
              int v14 = (void **)(a1 + 360);
              if (*(char *)(a1 + 383) < 0) {
                operator delete(*v14);
              }
              *(_OWORD *)int v14 = *(_OWORD *)__p;
              *(void *)(a1 + 376) = v18;
              BYTE7(v18) = 0;
              LOBYTE(__p[0]) = 0;
              *(unsigned char *)(a1 + 384) = BYTE8(v18);
              uint64_t v15 = (void **)(a1 + 392);
              if (*(char *)(a1 + 415) < 0)
              {
                operator delete(*v15);
                int v16 = SBYTE7(v18);
                *(_OWORD *)uint64_t v15 = v19;
                *(void *)(a1 + 408) = v20;
                HIBYTE(v20) = 0;
                LOBYTE(v19) = 0;
                if (v16 < 0) {
                  operator delete(__p[0]);
                }
              }
              else
              {
                *(_OWORD *)uint64_t v15 = v19;
                *(void *)(a1 + 408) = v20;
              }
              return;
            }
          }
          sub_4200(&v19, *(void **)(v10 + 280), *(void *)(v10 + 288));
          goto LABEL_28;
        }
LABEL_23:
        *(_OWORD *)std::string __p = 0u;
        long long v18 = 0u;
        BYTE8(v18) = 2;
        uint64_t v20 = 0;
        long long v19 = 0uLL;
        goto LABEL_28;
      }
      uint64_t v12 = *(uint64_t **)(a1 + 48);
      if (v12 == *(uint64_t **)(a1 + 56)) {
        uint64_t v12 = v3;
      }
      uint64_t v13 = *v12;
      if (!*(unsigned char *)(*v12 + 792)) {
        goto LABEL_23;
      }
      if (*(char *)(v13 + 271) < 0)
      {
        sub_4200(__p, *(void **)(v13 + 248), *(void *)(v13 + 256));
        BYTE8(v18) = *(unsigned char *)(v13 + 272);
        if ((*(char *)(v13 + 303) & 0x80000000) == 0) {
          goto LABEL_21;
        }
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(v13 + 248);
        *(void *)&long long v18 = *(void *)(v13 + 264);
        BYTE8(v18) = *(unsigned char *)(v13 + 272);
        if ((*(char *)(v13 + 303) & 0x80000000) == 0)
        {
LABEL_21:
          uint64_t v11 = (long long *)(v13 + 280);
          goto LABEL_22;
        }
      }
      sub_4200(&v19, *(void **)(v13 + 280), *(void *)(v13 + 288));
      goto LABEL_28;
    }
  }
}

void sub_9DD7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9DD7CC@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 792))
  {
    *(void *)&long long v5 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(unsigned char *)(a2 + 24) = 2;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
    return *(double *)&v5;
  }
  if (*(char *)(a1 + 271) < 0)
  {
    sub_4200((unsigned char *)a2, *(void **)(a1 + 248), *(void *)(a1 + 256));
    *(unsigned char *)(a2 + 24) = *(unsigned char *)(a1 + 272);
    uint64_t v4 = a2 + 32;
    if ((*(char *)(a1 + 303) & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_7:
    sub_4200((unsigned char *)v4, *(void **)(a1 + 280), *(void *)(a1 + 288));
    return *(double *)&v5;
  }
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 248);
  *(void *)(a2 + 16) = *(void *)(a1 + 264);
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(a1 + 272);
  uint64_t v4 = a2 + 32;
  if (*(char *)(a1 + 303) < 0) {
    goto LABEL_7;
  }
LABEL_4:
  long long v5 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)uint64_t v4 = v5;
  *(void *)(v4 + 16) = *(void *)(a1 + 296);
  return *(double *)&v5;
}

void sub_9DD88C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_9DD8A8(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 792)) {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(a2 + 271);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 256);
  }
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(unsigned __int8 *)(a2 + 303);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 288);
  }
  return v3 != 0;
}

char *sub_9DD8F0@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a3 == -1 || !*(unsigned char *)(a2 + 792))
  {
LABEL_7:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    return result;
  }
  int v5 = *(unsigned __int8 *)(**((void **)result + 10) + 168 * a3 + 162);
  if (v5 == 2)
  {
    if (*(unsigned char *)(a2 + 304))
    {
      double result = (char *)operator new(0x20uLL);
      *(void *)a4 = result;
      *(_OWORD *)(a4 + 8) = xmmword_20B8E90;
      strcpy(result, "Notice_Platform_Numeric_Grouped");
    }
    else
    {
      double result = (char *)operator new(0x19uLL);
      *(void *)a4 = result;
      *(_OWORD *)(a4 + 8) = xmmword_20B9250;
      strcpy(result, "Notice_Platform_Numeric");
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (!*(unsigned char *)(**((void **)result + 10) + 168 * a3 + 162))
      {
        *(unsigned char *)(a4 + 23) = 15;
        strcpy((char *)a4, "Notice_Platform");
        return result;
      }
      goto LABEL_7;
    }
    if (*(unsigned char *)(a2 + 304))
    {
      double result = (char *)operator new(0x20uLL);
      *(void *)a4 = result;
      *(_OWORD *)(a4 + 8) = xmmword_20B91B0;
      strcpy(result, "Notice_Platform_Name_Grouped");
    }
    else
    {
      *(unsigned char *)(a4 + 23) = 20;
      strcpy((char *)a4, "Notice_Platform_Name");
    }
  }
  return result;
}

uint64_t sub_9DDA84(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 132);
}

BOOL sub_9DDA8C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 != 4 && a2 != 2 || *(_DWORD *)a3 != 2) {
    return 0;
  }
  if (!*(unsigned char *)(a3 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (!*(unsigned char *)(a3 + 216)) {
    return 1;
  }
  uint64_t v3 = *(unsigned __int8 *)(a3 + 183);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a3 + 168);
  }
  if (!v3) {
    return 1;
  }
  uint64_t v4 = *(unsigned __int8 *)(a3 + 215);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a3 + 200);
  }
  return v4 == 0;
}

BOOL sub_9DDB58(uint64_t a1)
{
  return *(_DWORD *)(a1 + 128) == 0;
}

uint64_t sub_9DDB68@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 1:
      *(unsigned char *)(a2 + 23) = 14;
      strcpy((char *)a2, "_RESERVED_SEAT");
      return result;
    case 2:
      *(unsigned char *)(a2 + 23) = 18;
      strcpy((char *)a2, "_NON_RESERVED_SEAT");
      return result;
    case 3:
      *(unsigned char *)(a2 + 23) = 6;
      *(_DWORD *)a2 = 1163020127;
      __int16 v4 = 20037;
      goto LABEL_15;
    case 4:
    case 5:
    case 10:
    case 13:
    case 14:
    case 15:
      double result = sub_723EC(1u);
      if (result)
      {
        sub_6BAC((uint64_t)v8);
        sub_188FC78(v8, (uint64_t)"Unexpected Surcharge Type: ", 27);
        std::ostream::operator<<();
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 1u);
        if (v7 < 0) {
          operator delete(__p);
        }
        if (v9 < 0) {
          operator delete((void *)v8[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        double result = std::ios::~ios();
      }
      goto LABEL_8;
    case 6:
      uint64_t v3 = "_TRAIN_TICKET";
      goto LABEL_9;
    case 7:
      *(unsigned char *)(a2 + 23) = 6;
      *(_DWORD *)a2 = 1313426527;
      __int16 v4 = 21061;
LABEL_15:
      *(_WORD *)(a2 + 4) = v4;
      *(unsigned char *)(a2 + 6) = 0;
      return result;
    case 9:
      int v5 = "_EXPRESS_TICKET";
      goto LABEL_18;
    case 11:
      int v5 = "_NIGHT_DISCOUNT";
LABEL_18:
      *(unsigned char *)(a2 + 23) = 15;
      *(void *)a2 = *(void *)v5;
      *(void *)(a2 + 7) = *(void *)(v5 + 7);
      *(unsigned char *)(a2 + 15) = 0;
      break;
    case 12:
      *(unsigned char *)(a2 + 23) = 10;
      strcpy((char *)a2, "_SL_TICKET");
      break;
    default:
LABEL_8:
      uint64_t v3 = "_UNKNOWN_TYPE";
LABEL_9:
      *(unsigned char *)(a2 + 23) = 13;
      *(void *)a2 = *(void *)v3;
      *(void *)(a2 + 5) = *(void *)(v3 + 5);
      *(unsigned char *)(a2 + 13) = 0;
      break;
  }
  return result;
}

void sub_9DDE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_9DDF1C(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  sub_922B20(a2);
  sub_9DDF68(a1, (uint64_t)(a2 + 5), v4, v5);
}

void sub_9DDF54(_Unwind_Exception *a1)
{
  sub_927A08(v1);
  _Unwind_Resume(a1);
}

void sub_9DDF68(uint64_t a1, uint64_t a2, double a3, int32x4_t a4)
{
  int v4 = **(_DWORD **)(a1 + 72);
  if (v4 == 8 || v4 == 2)
  {
    sub_9DE9AC((void *)a1, a2, (uint64_t)&v21, a4);
    sub_9DED14(a1, a2, __p);
    uint64_t v8 = v23;
    if ((v23 & 0x80u) != 0) {
      uint64_t v8 = v22;
    }
    if (v8) {
      sub_98ED2C((uint64_t)&v21, *(void *)(a1 + 96), a2);
    }
    unint64_t v9 = v20;
    unsigned __int8 v10 = v20;
    if ((v20 & 0x80u) != 0) {
      unint64_t v9 = (unint64_t)__p[1];
    }
    if (v9)
    {
      uint64_t v11 = sub_8D7730(*(void *)(a1 + 96), (uint64_t)__p);
      uint64_t v12 = v23;
      if ((v23 & 0x80u) != 0) {
        uint64_t v12 = v22;
      }
      if (v12)
      {
        unint64_t v13 = *(void *)(a2 + 56);
        if (v13 >= *(void *)(a2 + 64))
        {
          uint64_t v15 = sub_6E6EC((char **)(a2 + 48), (uint64_t)&xmmword_25DE568);
        }
        else
        {
          if (byte_25DE57F < 0)
          {
            sub_4200(*(unsigned char **)(a2 + 56), (void *)xmmword_25DE568, *((unint64_t *)&xmmword_25DE568 + 1));
          }
          else
          {
            long long v14 = xmmword_25DE568;
            *(void *)(v13 + 16) = unk_25DE578;
            *(_OWORD *)unint64_t v13 = v14;
          }
          uint64_t v15 = (char *)(v13 + 24);
          *(void *)(a2 + 56) = v13 + 24;
        }
        *(void *)(a2 + 56) = v15;
      }
      sub_5F41E8(a2, (uint64_t)v11);
      unsigned __int8 v10 = v20;
    }
    if ((v10 & 0x80) != 0) {
      operator delete(__p[0]);
    }
    int v16 = (void **)v24;
    if (!v24) {
      goto LABEL_37;
    }
    char v17 = v25;
    long long v18 = v24;
    if (v25 == v24)
    {
LABEL_36:
      int v25 = v16;
      operator delete(v18);
LABEL_37:
      if ((char)v23 < 0) {
        operator delete(v21);
      }
      return;
    }
    while (1)
    {
      if (*((char *)v17 - 1) < 0)
      {
        operator delete(*(v17 - 3));
        if (*((char *)v17 - 25) < 0) {
LABEL_34:
        }
          operator delete(*(v17 - 6));
      }
      else if (*((char *)v17 - 25) < 0)
      {
        goto LABEL_34;
      }
      v17 -= 6;
      if (v17 == v16)
      {
        long long v18 = v24;
        goto LABEL_36;
      }
    }
  }
}

void sub_9DE140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  *(void *)(v16 + 56) = v17;
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_9DEC60((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_9DE188(uint64_t result, unsigned __int8 *a2, uint64_t a3)
{
  if (*(unsigned char *)(result + 40) == 1 && *a2 <= 1u)
  {
    sub_52500C(0, (uint64_t)v5);
    sub_5F40C0(a3, (long long *)&qword_25DE7C0);
  }
  return result;
}

void sub_9DE274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4D9814((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9DE28C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int8 v10 = *(unint64_t **)(a1 + 48);
  uint64_t v11 = *(unint64_t **)(a1 + 56);
  if (v10 != v11)
  {
    do
    {
      if (!sub_97CB70(*v10, a2)) {
        goto LABEL_5;
      }
      ++v10;
    }
    while (v10 != v11);
    strcpy((char *)a5, "{BaseFare} cash fare");
    char v12 = 20;
    goto LABEL_25;
  }
LABEL_5:
  if (*(unsigned char *)(a1 + 73) == 1 && *(unsigned char *)(a1 + 40) == 1)
  {
    strcpy((char *)a5, "{BaseFare} IC fare");
    char v12 = 18;
LABEL_25:
    *(unsigned char *)(a5 + 23) = v12;
    *(void *)(a5 + 32) = 0;
    *(void *)(a5 + 40) = 0;
    *(void *)(a5 + 24) = 0;
    return;
  }
  long long v14 = *(unint64_t **)(a1 + 48);
  uint64_t v15 = *(unint64_t **)(a1 + 56);
  if (v14 == v15)
  {
LABEL_24:
    strcpy((char *)a5, "Board_Base_Fare");
    char v12 = 15;
    goto LABEL_25;
  }
  while (sub_97CA68(*v14, a2))
  {
    if (++v14 == v15)
    {
      uint64_t v16 = (char *)operator new(0x20uLL);
      strcpy(v16, "{BaseFare} contactless fare");
      sub_4200((unsigned char *)a5, v16, 0x1BuLL);
      goto LABEL_29;
    }
  }
  uint64_t v17 = *(unint64_t **)(a1 + 48);
  long long v18 = *(unint64_t **)(a1 + 56);
  if (v17 != v18)
  {
    do
    {
      if ((sub_97CAE0(*v17, a2) & 1) == 0) {
        goto LABEL_24;
      }
      ++v17;
    }
    while (v17 != v18);
    uint64_t v17 = *(unint64_t **)(a1 + 48);
    if (*(void *)(a1 + 56) - (void)v17 >= 9uLL)
    {
      uint64_t v16 = (char *)operator new(0x20uLL);
      strcpy(v16, "{BaseFare} transit card fare");
      sub_4200((unsigned char *)a5, v16, 0x1CuLL);
LABEL_29:
      *(void *)(a5 + 24) = 0;
      *(void *)(a5 + 32) = 0;
      *(void *)(a5 + 40) = 0;
      operator delete(v16);
      return;
    }
  }
  unint64_t v19 = *v17;
  unsigned __int8 v20 = (int *)(a3 + 968);
  sub_4A0494(*v17, a2, (uint64_t)v20, (uint64_t)v35);
  if (*(unsigned char *)(a4 + 24) || sub_2A4C78(a2, v19, *v20))
  {
    uint64_t v21 = "{BaseFare} {CardName} card fare";
    size_t v22 = strlen("{BaseFare} {CardName} card fare");
    if (v22 < 0x7FFFFFFFFFFFFFF8) {
      goto LABEL_21;
    }
LABEL_65:
    sub_188D690();
  }
  uint64_t v21 = "{BaseFare} {CardName} fare";
  size_t v22 = strlen("{BaseFare} {CardName} fare");
  if (v22 >= 0x7FFFFFFFFFFFFFF8) {
    goto LABEL_65;
  }
LABEL_21:
  size_t v23 = v22;
  if (v22 >= 0x17)
  {
    uint64_t v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17) {
      uint64_t v25 = v22 | 7;
    }
    uint64_t v26 = v25 + 1;
    p_dst = (long long *)operator new(v25 + 1);
    *((void *)&__dst + 1) = v23;
    unint64_t v34 = v26 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_35;
  }
  HIBYTE(v34) = v22;
  p_dst = &__dst;
  if (v22) {
LABEL_35:
  }
    memcpy(p_dst, v21, v23);
  *((unsigned char *)p_dst + v23) = 0;
  if (byte_25DE8F7 < 0)
  {
    sub_4200(v37, (void *)xmmword_25DE8E0, *((unint64_t *)&xmmword_25DE8E0 + 1));
  }
  else
  {
    *(_OWORD *)long long v37 = xmmword_25DE8E0;
    uint64_t v38 = unk_25DE8F0;
  }
  if (SHIBYTE(v36) < 0)
  {
    sub_4200(&v39, v35[0], (unint64_t)v35[1]);
  }
  else
  {
    long long v39 = *(_OWORD *)v35;
    uint64_t v40 = v36;
  }
  sub_9E3B6C((char **)&__p, (long long *)v37, 1uLL);
  int v27 = SHIBYTE(v34);
  if (SHIBYTE(v34) < 0)
  {
    sub_4200((unsigned char *)a5, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)a5 = __dst;
    *(void *)(a5 + 16) = v34;
  }
  sub_29DDA8((char **)(a5 + 24), (long long **)&__p);
  uint64_t v28 = (void **)__p;
  if (__p)
  {
    int v29 = v32;
    char v30 = __p;
    if (v32 == __p)
    {
LABEL_54:
      uint64_t v32 = v28;
      operator delete(v30);
      goto LABEL_55;
    }
    while (1)
    {
      if (*((char *)v29 - 1) < 0)
      {
        operator delete(*(v29 - 3));
        if ((*((char *)v29 - 25) & 0x80000000) == 0) {
          goto LABEL_49;
        }
LABEL_52:
        operator delete(*(v29 - 6));
        v29 -= 6;
        if (v29 == v28)
        {
LABEL_53:
          char v30 = __p;
          goto LABEL_54;
        }
      }
      else
      {
        if (*((char *)v29 - 25) < 0) {
          goto LABEL_52;
        }
LABEL_49:
        v29 -= 6;
        if (v29 == v28) {
          goto LABEL_53;
        }
      }
    }
  }
LABEL_55:
  if (SHIBYTE(v40) < 0)
  {
    operator delete((void *)v39);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_57:
      if ((v27 & 0x80000000) == 0) {
        goto LABEL_58;
      }
      goto LABEL_62;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_57;
  }
  operator delete(v37[0]);
  if ((v27 & 0x80000000) == 0)
  {
LABEL_58:
    if (SHIBYTE(v36) < 0) {
      goto LABEL_63;
    }
    return;
  }
LABEL_62:
  operator delete((void *)__dst);
  if (SHIBYTE(v36) < 0) {
LABEL_63:
  }
    operator delete(v35[0]);
}

void sub_9DE738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a19 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(a20);
  goto LABEL_7;
}

void sub_9DE810(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_9DE824(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_9DE998(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_9DE9AC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, int32x4_t a4@<Q1>)
{
  v5.i32[1] = 0;
  v5.i64[1] = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  uint64_t v6 = a1[9];
  if (!*(unsigned char *)(v6 + 2104)) {
    goto LABEL_3;
  }
  int v7 = *(_DWORD *)(v6 + 2024);
  if (v7 == 0x7FFFFFFF) {
    goto LABEL_3;
  }
  if ((*(char *)(v6 + 2055) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v6 + 2055)) {
      goto LABEL_3;
    }
LABEL_22:
    if (v7) {
      sub_9DE824((uint64_t)a1, v6 + 2024, a2);
    }
    strcpy((char *)a3, "Board_Base_Fare_Free");
    *(unsigned char *)(a3 + 23) = 20;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 24) = 0;
    return;
  }
  if (*(void *)(v6 + 2040)) {
    goto LABEL_22;
  }
LABEL_3:
  uint64_t v9 = a1[3];
  uint64_t v8 = a1[4];
  if (v8 == v9) {
    return;
  }
  unsigned int v10 = 0;
  while (1)
  {
    char v12 = *(_DWORD **)(v8 - 8);
    v8 -= 8;
    uint64_t v11 = v12;
    int v13 = *v12;
    if (*v12 != 8 && v13 != 2) {
      goto LABEL_16;
    }
    ++v10;
    if (!*((unsigned char *)v11 + 2104) || v11[506] == 0x7FFFFFFF) {
      goto LABEL_16;
    }
    if (*((char *)v11 + 2055) < 0) {
      break;
    }
    if (*((unsigned char *)v11 + 2055)) {
      goto LABEL_24;
    }
LABEL_16:
    if (v8 == v9) {
      return;
    }
  }
  if (!*((void *)v11 + 255)) {
    goto LABEL_16;
  }
LABEL_24:
  if (v11[517] > v10)
  {
    unsigned int v15 = *(unsigned __int8 *)(a1[11] + 1184);
    if (v15 < 2) {
      goto LABEL_29;
    }
    if (v15 != 2)
    {
      uint64_t v17 = 0;
      int8x16_t v18 = 0uLL;
      goto LABEL_34;
    }
    if (*(unsigned char *)(v6 + 2144))
    {
LABEL_29:
      uint64_t v17 = (uint64_t)operator new(0x19uLL);
      strcpy((char *)v17, "Board_Base_Fare_Covered");
      sub_4200(__dst, (void *)v17, 0x17uLL);
      int v16 = 1;
    }
    else
    {
      v5.i32[0] = 8;
      a4.i32[0] = *(_DWORD *)v6;
      int8x16_t v18 = vbicq_s8((int8x16_t)xmmword_20EA880, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a4, v5), 0));
      if (*(_DWORD *)v6 == 8) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = 0x6172545F65657246;
      }
LABEL_34:
      int v16 = 0;
      *(void *)long long __dst = v17;
      *(int8x16_t *)&__dst[8] = v18;
    }
    *(_OWORD *)a3 = *(_OWORD *)__dst;
    uint64_t v19 = *(void *)&__dst[16];
    __dst[23] = 0;
    __dst[0] = 0;
    *(void *)(a3 + 16) = v19;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    uint64_t v22 = 0;
    long long v21 = 0uLL;
    if (v16) {
      operator delete((void *)v17);
    }
  }
}

void sub_9DEC1C(_Unwind_Exception *a1)
{
  operator delete(v2);
  sub_9DEC60(v1);
  _Unwind_Resume(a1);
}

void sub_9DEC38(_Unwind_Exception *a1)
{
  sub_9DEC60(v1);
  _Unwind_Resume(a1);
}

void sub_9DEC4C(_Unwind_Exception *a1)
{
  sub_9DEC60(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9DEC60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(void **)(a1 + 24);
    if (v3 == v2)
    {
LABEL_11:
      *(void *)(a1 + 32) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 48;
      if (v3 == v2)
      {
        int v4 = *(void **)(a1 + 24);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_9DED14@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v3 = *(void *)(result + 72);
  if (!*(unsigned char *)(v3 + 2144)) {
    return result;
  }
  int v4 = *(int **)(v3 + 2112);
  if (*(int **)(v3 + 2120) == v4) {
    sub_66748();
  }
  int v6 = *v4;
  if (*v4 == 0x7FFFFFFF) {
    goto LABEL_15;
  }
  if ((*((char *)v4 + 31) & 0x80000000) == 0)
  {
    if (v6) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = *((unsigned char *)v4 + 31) == 0;
    }
    if (!v7) {
      return result;
    }
LABEL_15:
    sub_9DDB68(v4[10], (uint64_t)&v12);
    std::operator+<char>();
    uint64_t v9 = std::string::append(&__p, "}");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    sub_5F6C04(a2, (long long *)&v13);
  }
  if (v6) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = *((void *)v4 + 2) == 0;
  }
  if (v8) {
    goto LABEL_15;
  }
  return result;
}

void sub_9DEF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_4D9814((uint64_t)&a21);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v27 < 0)
  {
    operator delete(v26);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_9DF040@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1[11] + 1436))
  {
    uint64_t v3 = *(uint64_t (**)(void))(*a1 + 136);
    return v3();
  }
  else
  {
    *(void *)(a2 + 320) = 0;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    sub_5F3B34(a2);
    uint64_t result = sub_5F3B34(a2 + 160);
    *(unsigned char *)(a2 + 320) = 0;
  }
  return result;
}

void sub_9DF0F8(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9DF10C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  uint64_t v2 = a1 + 160;
  sub_5F3B34(a1);
  uint64_t result = sub_5F3B34(v2);
  *(unsigned char *)(a1 + 320) = 0;
  return result;
}

void sub_9DF178(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9DF18C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (*(_DWORD *)(a1[11] + 1436))
  {
    uint64_t v3 = *(uint64_t (**)(void))(*a1 + 144);
    return v3();
  }
  else
  {
    (*(void (**)(void *__return_ptr))(*a1 + 152))(v5);
    sub_4F58AC(a2, (uint64_t)v5);
    *(unsigned char *)(a2 + 160) = 0;
    return sub_4D4B58((uint64_t)v5);
  }
}

void sub_9DF244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_9DF258@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t result = sub_5F3B34(a1);
  *(unsigned char *)(result + 160) = 0;
  return result;
}

uint64_t sub_9DF294@<X0>(uint64_t a1@<X8>)
{
  return sub_5F3B34(a1);
}

uint64_t sub_9DF29C@<X0>(uint64_t a1@<X8>)
{
  return sub_5F3B34(a1);
}

char *sub_9DF2A4@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, int a6@<W5>, char a7@<W6>, uint64_t a8@<X8>)
{
  int v9 = *a2;
  if (*a2 == 0x7FFFFFFF)
  {
LABEL_2:
    return (char *)sub_5F3B34(a8);
  }
  unsigned int v15 = a2;
  if (*((unsigned char *)a2 + 8))
  {
    int v17 = *((unsigned __int8 *)a2 + 9);
    if (v17 == 1)
    {
      unsigned int v18 = 5;
    }
    else if (v17 == 2)
    {
      if ((a7 & 1) == 0) {
        goto LABEL_2;
      }
      unsigned int v18 = 4;
    }
    else
    {
      int v19 = a2[1];
      if ((int)fabs((double)(10 * (v9 - v19))) < 600)
      {
        unsigned int v18 = 1;
      }
      else if (v9 >= v19)
      {
        unsigned int v18 = 2;
      }
      else
      {
        unsigned int v18 = 3;
      }
    }
  }
  else
  {
    unsigned int v18 = 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25DE2E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25DE2E8))
  {
    sub_5E5C(&xmmword_25DEA60, "{t}");
    __cxa_guard_release(&qword_25DE2E8);
  }
  sub_5F3B74(a8, (__int16 *)(*(void *)(a1 + 88) + 1177));
  if (!a6) {
    goto LABEL_21;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_25DE2F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_25DE2F0))
  {
    sub_5E5C(qword_25DEA78, "s");
    __cxa_guard_release(&qword_25DE2F0);
  }
  if (((1 << v18) & 0x33) == 0)
  {
    sub_5F4680(a8, (uint64_t)&xmmword_25DEA60, (uint64_t)qword_25DEA78, 2);
    sub_98ED08(a8, v18);
  }
  else
  {
LABEL_21:
    sub_5F41E8(a8, (uint64_t)&xmmword_25DEA60);
  }
  if (a5 && v18 && v18 != 5 && v15[1] != 0x7FFFFFFF) {
    ++v15;
  }
  int v20 = *v15;
  return sub_5F5F70(a8, &xmmword_25DEA60, &v20, a3, a4);
}

void sub_9DF4E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25DE2F0);
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_9DF504(_Unwind_Exception *a1)
{
}

void sub_9DF51C(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_9DF530(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_9DF544(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_5F3B74(a4, (__int16 *)(*(void *)(a1 + 88) + 1177));
  if (!*(unsigned char *)(a2 + 8) || (int v8 = *(unsigned __int8 *)(a2 + 9), v8 == 1))
  {
    uint64_t v12 = *(void *)(a1 + 96);
    __p[23] = 9;
    strcpy(__p, "Scheduled");
    std::string v13 = sub_8D7730(v12, (uint64_t)__p);
    sub_5F41E8(a4, (uint64_t)v13);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  else
  {
    if (v8 == 2)
    {
      uint64_t v9 = *(void *)(a1 + 96);
      __p[23] = 9;
      strcpy(__p, "Cancelled");
      long long v10 = sub_8D7730(v9, (uint64_t)__p);
      sub_5F4680(a4, (uint64_t)v10, (uint64_t)&word_25DE958, 2);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      unsigned int v11 = 4;
    }
    else
    {
      int v14 = *(_DWORD *)(a2 + 4);
      if ((int)fabs((double)(10 * (*(_DWORD *)a2 - v14))) < 600)
      {
        uint64_t v17 = *(void *)(a1 + 96);
        __p[23] = 7;
        strcpy(__p, "On-time");
        unsigned int v18 = sub_8D7730(v17, (uint64_t)__p);
        sub_5F4680(a4, (uint64_t)v18, (uint64_t)&dword_25DE928, 1);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        unsigned int v11 = 1;
      }
      else
      {
        if (*(_DWORD *)a2 >= v14) {
          unsigned int v11 = 2;
        }
        else {
          unsigned int v11 = 3;
        }
        uint64_t v15 = *(void *)(a1 + 96);
        *(void *)std::string __p = operator new(0x19uLL);
        *(_OWORD *)&__p[8] = xmmword_20B9250;
        strcpy(*(char **)__p, "Now {LiveDepartureTime}");
        int v16 = sub_8D7730(v15, (uint64_t)__p);
        sub_5F4680(a4, (uint64_t)v16, (uint64_t)&dword_25DE940, 2);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        *(_DWORD *)std::string __p = *(_DWORD *)(a2 + 4);
        sub_5F5F70(a4, &xmmword_25DE820, __p, a3, 0);
      }
    }
    sub_98ED08(a4, v11);
  }
}

void sub_9DF7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_4D4B58(v15);
  _Unwind_Resume(a1);
}

void sub_9DF7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  sub_4D4B58(v15);
  _Unwind_Resume(a1);
}

void sub_9DF7FC(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  switch(sub_64E00(a2, *(_DWORD *)(*(void *)(a1 + 88) + 968)))
  {
    case 0u:
      std::operator+<char>();
      break;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
      std::operator+<char>();
      int v4 = std::string::append(&v6, "s");
      long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      *(void *)(a3 + 16) = *((void *)&v4->__r_.__value_.__l + 2);
      *(_OWORD *)a3 = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v6.__r_.__value_.__l.__data_);
      }
      break;
    default:
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      break;
  }
}

void sub_9DF974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9DF9B0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_50A7C((uint64_t)&v47, a3);
  uint64_t v7 = a1[58];
  uint64_t v8 = a1[59];
  if (v7 != v8)
  {
    while (1)
    {
      uint64_t v9 = sub_31B0D0(&v47, v7);
      long long v10 = v9;
      if (!v9) {
        goto LABEL_4;
      }
      int8x8_t v11 = v48;
      unint64_t v12 = v9[1];
      uint8x8_t v13 = (uint8x8_t)vcnt_s8(v48);
      v13.i16[0] = vaddlv_u8(v13);
      if (v13.u32[0] > 1uLL)
      {
        if (v12 >= *(void *)&v48) {
          v12 %= *(void *)&v48;
        }
      }
      else
      {
        v12 &= *(void *)&v48 - 1;
      }
      uint64_t v14 = *v9;
      uint64_t v15 = (uint64_t *)*((void *)v47 + v12);
      do
      {
        int v16 = v15;
        uint64_t v15 = (uint64_t *)*v15;
      }
      while (v15 != v9);
      if (v16 != (uint64_t *)&v49)
      {
        unint64_t v17 = v16[1];
        if (v13.u32[0] > 1uLL)
        {
          if (v17 >= *(void *)&v48) {
            v17 %= *(void *)&v48;
          }
        }
        else
        {
          v17 &= *(void *)&v48 - 1;
        }
        if (v17 == v12) {
          goto LABEL_25;
        }
      }
      if (!v14) {
        break;
      }
      unint64_t v18 = *(void *)(v14 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v18 >= *(void *)&v48) {
          v18 %= *(void *)&v48;
        }
      }
      else
      {
        v18 &= *(void *)&v48 - 1;
      }
      if (v18 != v12) {
        break;
      }
LABEL_26:
      unint64_t v19 = *(void *)(v14 + 8);
      if (v13.u32[0] > 1uLL)
      {
        if (v19 >= *(void *)&v11) {
          v19 %= *(void *)&v11;
        }
      }
      else
      {
        v19 &= *(void *)&v11 - 1;
      }
      if (v19 != v12)
      {
        *((void *)v47 + v19) = v16;
        uint64_t v14 = *v9;
      }
LABEL_32:
      *int v16 = v14;
      uint64_t *v9 = 0;
      --v50;
      if (*((char *)v9 + 63) < 0)
      {
        operator delete((void *)v9[5]);
        if (*((char *)v10 + 39) < 0) {
LABEL_36:
        }
          operator delete((void *)v10[2]);
      }
      else if (*((char *)v9 + 39) < 0)
      {
        goto LABEL_36;
      }
      operator delete(v10);
LABEL_4:
      v7 += 144;
      if (v7 == v8) {
        goto LABEL_37;
      }
    }
    *((void *)v47 + v12) = 0;
    uint64_t v14 = *v9;
LABEL_25:
    if (!v14) {
      goto LABEL_32;
    }
    goto LABEL_26;
  }
LABEL_37:
  *(_OWORD *)int v44 = 0u;
  *(_OWORD *)char v45 = 0u;
  int v46 = 1065353216;
  int v20 = (const std::string *)a1[61];
  long long v21 = (const std::string *)a1[62];
  while (v20 != v21)
  {
    uint64_t v22 = sub_31B0D0(&v47, (uint64_t)v20);
    if (v22)
    {
      size_t v23 = (std::string *)(v22 + 5);
      sub_92DCD0((uint64_t)v44, (uint64_t)(v22 + 2), (uint64_t)(v22 + 2), (uint64_t)(v22 + 5));
      std::string::operator=(v23, v20 + 1);
    }
    v20 += 2;
  }
  sub_6581AC(a2, (uint64_t)&v47, a1[12], 0, &__p);
  sub_6582D0(&__p, (uint64_t)v44);
  sub_5F41E8(a4, (uint64_t)&__p);
  uint64_t v24 = (char *)a1[58];
  for (uint64_t i = a1[59]; v24 != (char *)i; v24 += 144)
  {
    int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v28 = v24[23];
    if (v28 >= 0) {
      int v29 = v24;
    }
    else {
      int v29 = *(char **)v24;
    }
    if (v28 >= 0) {
      int64_t v30 = v24[23];
    }
    else {
      int64_t v30 = *((void *)v24 + 1);
    }
    if (v30)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int64_t size = __p.__r_.__value_.__l.__size_;
      }
      if (size >= v30)
      {
        unsigned __int8 v31 = (char *)p_p + size;
        int v32 = *v29;
        char v33 = p_p;
        do
        {
          int64_t v34 = size - v30;
          if (v34 == -1) {
            break;
          }
          uint64_t v35 = (char *)memchr(v33, v32, v34 + 1);
          if (!v35) {
            break;
          }
          uint64_t v36 = v35;
          if (!memcmp(v35, v29, v30))
          {
            if (v36 != v31 && v36 - (char *)p_p != -1) {
              goto LABEL_44;
            }
            break;
          }
          char v33 = (std::string *)(v36 + 1);
          int64_t size = v31 - (v36 + 1);
        }
        while (size >= v30);
      }
    }
    else
    {
LABEL_44:
      sub_5F4060(a4, (long long *)v24);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v37 = (void **)v45[0];
  if (v45[0])
  {
    do
    {
      uint64_t v41 = (void **)*v37;
      if (*((char *)v37 + 63) < 0)
      {
        operator delete(v37[5]);
        if (*((char *)v37 + 39) < 0) {
LABEL_82:
        }
          operator delete(v37[2]);
      }
      else if (*((char *)v37 + 39) < 0)
      {
        goto LABEL_82;
      }
      operator delete(v37);
      long long v37 = v41;
    }
    while (v41);
  }
  uint64_t v38 = v44[0];
  v44[0] = 0;
  if (v38) {
    operator delete(v38);
  }
  long long v39 = (void **)v49;
  if (v49)
  {
    do
    {
      char v42 = (void **)*v39;
      if (*((char *)v39 + 63) < 0)
      {
        operator delete(v39[5]);
        if (*((char *)v39 + 39) < 0) {
LABEL_88:
        }
          operator delete(v39[2]);
      }
      else if (*((char *)v39 + 39) < 0)
      {
        goto LABEL_88;
      }
      operator delete(v39);
      long long v39 = v42;
    }
    while (v42);
  }
  uint64_t v40 = v47;
  long long v47 = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_9DFDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_50828((uint64_t)va);
  sub_50828((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_9DFDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_50828((uint64_t)&a16);
    sub_50828((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  sub_50828((uint64_t)&a16);
  sub_50828((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_9DFE44(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    sub_9DB0C4((uint64_t)a1, a2, a3, a4, (uint64_t)v14);
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200(__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v13 = *(void *)(a2 + 16);
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
    int v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
    sub_98E2D8(v14, v7, v8, *((unsigned char *)a1 + 160), a1[12], a2);
    sub_9DF9B0(a1, a2, (uint64_t)v14, a2 + 80);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = (void **)v15;
    if (!v15)
    {
LABEL_10:
      uint64_t v10 = v14[0];
      v14[0] = 0;
      if (v10) {
        operator delete(v10);
      }
      return;
    }
    while (1)
    {
      uint64_t v11 = (void **)*v9;
      if (*((char *)v9 + 63) < 0)
      {
        operator delete(v9[5]);
        if (*((char *)v9 + 39) < 0) {
LABEL_18:
        }
          operator delete(v9[2]);
      }
      else if (*((char *)v9 + 39) < 0)
      {
        goto LABEL_18;
      }
      operator delete(v9);
      uint64_t v9 = v11;
      if (!v11) {
        goto LABEL_10;
      }
    }
  }
}

void sub_9DFFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_50828((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9DFFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_50828((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_9DFFE8(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, void *a5@<X8>)
{
  long long v33 = 0uLL;
  unint64_t v34 = 0;
  if (*(void *)(a2 + 24) == *(void *)(a2 + 32))
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  sub_9DB0C4(a1, a2, a3, a4, (uint64_t)v31);
  int v8 = *(long long **)(a2 + 24);
  uint64_t v9 = *(long long **)(a2 + 32);
  while (v8 != v9)
  {
    if (*((char *)v8 + 23) < 0)
    {
      sub_4200(&__str, *(void **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v10 = *v8;
      __str.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v10;
    }
    int v11 = *((unsigned __int8 *)v8 + 24);
    char v30 = *((unsigned char *)v8 + 24);
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    char v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      memset(&__p, 0, sizeof(__p));
      if (v11)
      {
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
        int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
        sub_98E2D8(v31, v14, v15, *(unsigned char *)(a1 + 160), *(void *)(a1 + 96), (uint64_t)&__str);
        sub_6581AC((uint64_t)&__str, (uint64_t)v31, *(void *)(a1 + 96), 0, &v27);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = v27;
      }
      else
      {
        std::string::operator=(&__p, &__str);
      }
      std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      char v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
      }
      if (v16)
      {
        unint64_t v18 = (_OWORD *)*((void *)&v33 + 1);
        if (*((void *)&v33 + 1) >= v34)
        {
          int v20 = sub_1D740((char **)&v33, (uint64_t)&__p);
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_4200(*((unsigned char **)&v33 + 1), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(void *)(*((void *)&v33 + 1) + 16) = *((void *)&__p.__r_.__value_.__l + 2);
            *unint64_t v18 = v19;
          }
          int v20 = (char *)v18 + 24;
        }
        *((void *)&v33 + 1) = v20;
        char v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if (v17 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      char v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    if (v13 < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    v8 += 2;
  }
  *(_OWORD *)a5 = v33;
  a5[2] = v34;
  unint64_t v34 = 0;
  long long v33 = 0uLL;
  long long v21 = v32;
  if (v32)
  {
    while (1)
    {
      uint64_t v22 = *(char **)v21;
      if (v21[63] < 0)
      {
        operator delete(*((void **)v21 + 5));
        if ((v21[39] & 0x80000000) == 0) {
          goto LABEL_34;
        }
LABEL_37:
        operator delete(*((void **)v21 + 2));
        operator delete(v21);
        long long v21 = v22;
        if (!v22) {
          break;
        }
      }
      else
      {
        if (v21[39] < 0) {
          goto LABEL_37;
        }
LABEL_34:
        operator delete(v21);
        long long v21 = v22;
        if (!v22) {
          break;
        }
      }
    }
  }
  size_t v23 = v31[0];
  v31[0] = 0;
  if (v23) {
    operator delete(v23);
  }
  uint64_t v24 = v33;
  if ((void)v33)
  {
    uint64_t v25 = *((void *)&v33 + 1);
    uint64_t v26 = (void *)v33;
    if (*((void *)&v33 + 1) != (void)v33)
    {
      do
      {
        if (*(char *)(v25 - 1) < 0) {
          operator delete(*(void **)(v25 - 24));
        }
        v25 -= 24;
      }
      while (v25 != v24);
      uint64_t v26 = (void *)v33;
    }
    *((void *)&v33 + 1) = v24;
    operator delete(v26);
  }
}

void sub_9E02D0(_Unwind_Exception *a1)
{
  sub_1A668((void **)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_9E02E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  *(void *)(v29 - 72) = v28;
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  sub_50828((uint64_t)&a28);
  sub_1A668((void **)(v29 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_9E034C@<X0>(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 96))(&v50);
  uint64_t v8 = v52;
  if ((v52 & 0x80u) != 0) {
    uint64_t v8 = v51;
  }
  if (!v8 && sub_45FB38(v58) && v53 == v54)
  {
    sub_5F3B34(a4);
    return sub_927A08((uint64_t)&v50);
  }
  uint64_t v9 = v52;
  if ((v52 & 0x80u) != 0) {
    uint64_t v9 = v51;
  }
  if (v9)
  {
    sub_9DFE44(a1, (uint64_t)&v50, a2, a3);
    goto LABEL_10;
  }
  if (v53 == v54) {
    goto LABEL_10;
  }
  sub_9DFFE8((uint64_t)a1, (uint64_t)&v50, a2, a3, &v48);
  if (!v57)
  {
    uint64_t v44 = a4;
    memset(&__p, 0, sizeof(__p));
    int v11 = v48;
    unint64_t v12 = v49;
    if (v49 == v48)
    {
LABEL_81:
      sub_5F41E8((uint64_t)v58, (uint64_t)&__p);
      a4 = v44;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v11) {
          goto LABEL_88;
        }
        goto LABEL_10;
      }
LABEL_82:
      if (v11) {
        goto LABEL_88;
      }
      goto LABEL_10;
    }
    unint64_t v26 = 0;
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)v48) >> 3);
    while (1)
    {
      uint64_t v28 = &v11[v26];
      int v29 = SHIBYTE(v28->__r_.__value_.__r.__words[2]);
      char v30 = v29 >= 0
          ? (const std::string::value_type *)&v11[v26]
          : (const std::string::value_type *)v28->__r_.__value_.__r.__words[0];
      std::string::size_type v31 = v29 >= 0 ? HIBYTE(v28->__r_.__value_.__r.__words[2]) : v28->__r_.__value_.__l.__size_;
      std::string::append(&__p, v30, v31);
      if (v26 < 0xAAAAAAAAAAAAAAABLL * ((v56 - v55) >> 3)) {
        break;
      }
LABEL_45:
      if (++v26 == v27) {
        goto LABEL_81;
      }
    }
    uint64_t v32 = v55 + 24 * v26;
    uint64_t v33 = *(unsigned __int8 *)(v32 + 23);
    unint64_t v34 = *(void *)(v32 + 8);
    if ((v33 & 0x80u) == 0) {
      uint64_t v35 = *(unsigned __int8 *)(v32 + 23);
    }
    else {
      uint64_t v35 = *(void *)(v32 + 8);
    }
    uint64_t v36 = byte_25DE57F;
    if (byte_25DE57F < 0) {
      uint64_t v36 = *((void *)&xmmword_25DE568 + 1);
    }
    if (v35 == v36)
    {
      if (byte_25DE57F >= 0) {
        long long v37 = &xmmword_25DE568;
      }
      else {
        long long v37 = (long long *)xmmword_25DE568;
      }
      if ((v33 & 0x80) != 0)
      {
        long long v39 = *(void **)v32;
        if (!memcmp(*(const void **)v32, v37, *(void *)(v32 + 8))) {
          goto LABEL_72;
        }
      }
      else
      {
        if (!*(unsigned char *)(v32 + 23))
        {
LABEL_70:
          long long v41 = *(_OWORD *)v32;
          uint64_t v46 = *(void *)(v32 + 16);
          *(_OWORD *)long long __dst = v41;
          goto LABEL_73;
        }
        uint64_t v38 = (unsigned __int8 *)(v55 + 24 * v26);
        while (*v38 == *(unsigned __int8 *)v37)
        {
          ++v38;
          long long v37 = (long long *)((char *)v37 + 1);
          if (!--v33) {
            goto LABEL_70;
          }
        }
      }
    }
    uint64_t v40 = sub_8D7730(a1[12], v32);
    uint64_t v32 = (uint64_t)v40;
    if ((*((char *)v40 + 23) & 0x80000000) == 0) {
      goto LABEL_70;
    }
    long long v39 = (void *)*v40;
    unint64_t v34 = v40[1];
LABEL_72:
    sub_4200(__dst, v39, v34);
LABEL_73:
    if (v46 >= 0) {
      char v42 = __dst;
    }
    else {
      char v42 = (void **)__dst[0];
    }
    if (v46 >= 0) {
      std::string::size_type v43 = HIBYTE(v46);
    }
    else {
      std::string::size_type v43 = (std::string::size_type)__dst[1];
    }
    std::string::append(&__p, (const std::string::value_type *)v42, v43);
    if (SHIBYTE(v46) < 0) {
      operator delete(__dst[0]);
    }
    goto LABEL_45;
  }
  int v11 = v48;
  unint64_t v12 = v49;
  sub_69208((uint64_t)v58, v48, v49, 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)v48) >> 3));
  uint64_t v14 = v55;
  uint64_t v13 = v56;
  if (v55 == v56) {
    goto LABEL_82;
  }
  do
  {
    uint64_t v16 = *(unsigned __int8 *)(v14 + 23);
    unint64_t v17 = *(void *)(v14 + 8);
    if ((v16 & 0x80u) == 0) {
      uint64_t v18 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      uint64_t v18 = *(void *)(v14 + 8);
    }
    uint64_t v19 = byte_25DE57F;
    if (byte_25DE57F < 0) {
      uint64_t v19 = *((void *)&xmmword_25DE568 + 1);
    }
    if (v18 == v19)
    {
      if (byte_25DE57F >= 0) {
        int v20 = &xmmword_25DE568;
      }
      else {
        int v20 = (long long *)xmmword_25DE568;
      }
      if ((v16 & 0x80) != 0)
      {
        size_t v23 = *(void **)v14;
        if (!memcmp(*(const void **)v14, v20, *(void *)(v14 + 8))) {
          goto LABEL_37;
        }
      }
      else
      {
        long long v21 = (uint64_t *)v14;
        if (!*(unsigned char *)(v14 + 23)) {
          goto LABEL_35;
        }
        uint64_t v22 = 0;
        while (*(unsigned __int8 *)(v14 + v22) == *((unsigned __int8 *)v20 + v22))
        {
          if (v16 == ++v22)
          {
            long long v21 = (uint64_t *)v14;
            goto LABEL_35;
          }
        }
      }
    }
    long long v21 = sub_8D7730(a1[12], v14);
    if ((*((char *)v21 + 23) & 0x80000000) == 0)
    {
LABEL_35:
      long long v24 = *(_OWORD *)v21;
      __p.__r_.__value_.__r.__words[2] = v21[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
      goto LABEL_38;
    }
    size_t v23 = (void *)*v21;
    unint64_t v17 = v21[1];
LABEL_37:
    sub_4200(&__p, v23, v17);
LABEL_38:
    uint64_t v25 = v60;
    if ((unint64_t)v60 < v61)
    {
      long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v60 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
      *uint64_t v25 = v15;
      unint64_t v60 = (char *)v25 + 24;
    }
    else
    {
      unint64_t v60 = sub_6E8C4(&v59, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    v14 += 24;
  }
  while (v14 != v13);
  if (!v11) {
    goto LABEL_10;
  }
LABEL_88:
  while (v12 != v11)
  {
    if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12[-1].__r_.__value_.__l.__data_);
    }
    --v12;
  }
  operator delete(v11);
LABEL_10:
  sub_4F58AC(a4, (uint64_t)v58);
  return sub_927A08((uint64_t)&v50);
}

void sub_9E07E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a23 < 0)
  {
    operator delete(__p);
    sub_1A668(&a25);
    sub_927A08((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  sub_1A668(&a25);
  sub_927A08((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_9E086C(uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 80) + 168 * *(void *)(a2 + 48) + 136;
}

void sub_9E0888(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  sub_5F3B74((uint64_t)a3, (__int16 *)(*(void *)(a1 + 88) + 1177));
  memset(&v9, 0, sizeof(v9));
  if (a2 > 599)
  {
    std::string::assign(&v9, "Walk {WalkTime}");
    int v7 = a2;
    uint64_t v6 = &qword_25DE628;
  }
  else
  {
    std::string::assign(&v9, "Walk less than {OneMinute}");
    uint64_t v6 = &qword_25DE640;
    int v7 = 600;
  }
  sub_5F657C(a3, (uint64_t)v6, v7);
  uint64_t v8 = sub_8D7730(*(void *)(a1 + 96), (uint64_t)&v9);
  sub_5F41E8((uint64_t)a3, (uint64_t)v8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_9E0964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4D4B58(v15);
  _Unwind_Resume(a1);
}

void sub_9E098C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_5F3B74(a3, (__int16 *)(*(void *)(a1 + 88) + 1177));
  sub_97C8E8(*(void **)(a1 + 80), a2);
  int v6 = sub_97C680(*(uint64_t **)(a1 + 80), a2);
  uint64_t v7 = *(void *)(a1 + 96);
  sub_98D04C(v6, (uint64_t)__p);
  uint64_t v8 = sub_8D7730(v7, (uint64_t)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  sub_5F4680(a3, (uint64_t)v8, (uint64_t)&word_25DE958, 2);
  *(unsigned char *)(a3 + 104) = 5;
}

void sub_9E0A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_4D4B58(v15);
  _Unwind_Resume(a1);
}

void sub_9E0A88(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_5F3B74(a2, (__int16 *)(*(void *)(a1 + 88) + 1177));
  sub_98C68C(*(unsigned __int16 *)(a1 + 132), (uint64_t)v15);
  int v4 = (char)v16;
  if ((v16 & 0x80u) == 0) {
    size_t v5 = v16;
  }
  else {
    size_t v5 = (size_t)v15[1];
  }
  unint64_t v6 = v5 + 10;
  if (v5 + 10 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    p_p = operator new(v8 + 1);
    size_t v13 = v5 + 10;
    unint64_t v14 = v9 | 0x8000000000000000;
    std::string __p = p_p;
  }
  else
  {
    size_t v13 = 0;
    unint64_t v14 = 0;
    std::string __p = 0;
    p_p = &__p;
    HIBYTE(v14) = v5 + 10;
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v4 >= 0) {
    char v10 = v15;
  }
  else {
    char v10 = (void **)v15[0];
  }
  memmove(p_p, v10, v5);
LABEL_15:
  strcpy((char *)p_p + v5, " cancelled");
  int v11 = sub_8D7730(*(void *)(a1 + 96), (uint64_t)&__p);
  sub_5F4680(a2, (uint64_t)v11, (uint64_t)&word_25DE958, 2);
  *(unsigned char *)(a2 + 104) = 4;
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (((char)v16 & 0x80000000) == 0) {
      return;
    }
LABEL_19:
    operator delete(v15[0]);
    return;
  }
  operator delete(__p);
  if ((char)v16 < 0) {
    goto LABEL_19;
  }
}

void sub_9E0C00(_Unwind_Exception *a1)
{
  sub_4D4B58(v1);
  _Unwind_Resume(a1);
}

void sub_9E0C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a20 & 0x80000000) == 0)
  {
    sub_4D4B58(v20);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  sub_4D4B58(v20);
  _Unwind_Resume(a1);
}

BOOL sub_9E0C70(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 248) & 0xFFFFFFFD) == 1;
}

uint64_t sub_9E0C84(uint64_t a1)
{
  return (10 * (*(_DWORD *)(a1 + 280) - *(_DWORD *)(a1 + 252)));
}

uint64_t sub_9E0C9C(uint64_t a1)
{
  uint64_t v1 = 284;
  if (*(_DWORD *)(a1 + 284) == 0x7FFFFFFF) {
    uint64_t v1 = 280;
  }
  int v2 = *(_DWORD *)(a1 + v1);
  uint64_t v3 = 256;
  if (*(_DWORD *)(a1 + 256) == 0x7FFFFFFF) {
    uint64_t v3 = 252;
  }
  return (10 * (v2 - *(_DWORD *)(a1 + v3)));
}

void sub_9E0CE0(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 2200);
  uint64_t v8 = *(void *)(a2 + 2208);
  if (v7 != v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    uint64_t v11 = (v8 - v7) >> 4;
    while (1)
    {
      sub_9E0F5C((uint64_t)v17, a1, *(void *)(*(void *)(a2 + 2200) + v9), v10, 1, 1);
      unint64_t v12 = *(void *)(a4 + 8);
      if (v12 >= *(void *)(a4 + 16))
      {
        size_t v13 = sub_9E3E20((char **)a4, (long long *)v17);
      }
      else
      {
        sub_9E3D3C(a4 + 16, *(char **)(a4 + 8), (long long *)v17);
        size_t v13 = (char *)(v12 + 160);
        *(void *)(a4 + 8) = v12 + 160;
      }
      *(void *)(a4 + 8) = v13;
      if (v28 < 0)
      {
        operator delete(__p);
        if ((v26 & 0x80000000) == 0)
        {
LABEL_9:
          int v14 = v24;
          if (v24 == 1) {
            goto LABEL_15;
          }
          goto LABEL_10;
        }
      }
      else if ((v26 & 0x80000000) == 0)
      {
        goto LABEL_9;
      }
      operator delete(v25);
      int v14 = v24;
      if (v24 == 1)
      {
LABEL_15:
        uint64_t v15 = v21;
        if (!v21) {
          goto LABEL_18;
        }
        uint64_t v22 = v21;
        goto LABEL_17;
      }
LABEL_10:
      if (!v14 && v23 < 0)
      {
        uint64_t v15 = v21;
LABEL_17:
        operator delete(v15);
      }
LABEL_18:
      if (v20 < 0)
      {
        operator delete(v19);
        if (v18 < 0) {
LABEL_22:
        }
          operator delete(v17[0]);
      }
      else if (v18 < 0)
      {
        goto LABEL_22;
      }
      ++v10;
      v9 += 16;
      if (v11 == v10) {
        return;
      }
    }
  }
  if (!*(unsigned char *)(a2 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  sub_9E0F5C((uint64_t)v17, a1, *(void *)(a2 + 752), 0, 0, a3);
  sub_9E1344((char **)a4, (uint64_t)v17, 1uLL);
  sub_52FAE0((uint64_t)v17);
}

void sub_9E0F08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52FAE0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9E0F1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_52FAE0((uint64_t)va);
  sub_9337A0(v2);
  _Unwind_Resume(a1);
}

void sub_9E0F44(_Unwind_Exception *a1)
{
  sub_9337A0(v1);
  _Unwind_Resume(a1);
}

void sub_9E0F5C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, int a5, int a6)
{
  uint64_t v7 = *(void *)(a2 + 80);
  uint64_t v8 = *(void *)(v7 + 72);
  if (0x66FD0EB66FD0EB67 * ((*(void *)(v7 + 80) - v8) >> 3) <= a3) {
    sub_66748();
  }
  uint64_t v13 = v8 + 696 * a3;
  if (*(unsigned char *)(v13 + 559))
  {
    v28[0] = 0;
    v28[1] = 0;
    uint64_t v29 = 0;
  }
  else if (a5)
  {
    sub_9950CC((uint64_t *)v13, (char *)v30);
    *(_OWORD *)char v28 = *(_OWORD *)v30;
    uint64_t v29 = v31;
    v30[1] = 0;
    *(void *)&long long v31 = 0;
    v30[0] = 0;
    if (SLOBYTE(__p_15[1]) < 0)
    {
      operator delete((void *)__p);
      if (SBYTE7(v31) < 0) {
        operator delete(v30[0]);
      }
    }
  }
  else
  {
    sub_995044((uint64_t *)v13, (uint64_t)v28);
  }
  if (a6
    && *(unsigned char *)(*(void *)(a2 + 112) + 8)
    && (v14 = v8 + 696 * a3, uint64_t v15 = *(void *)(v14 + 624), v16 = *(unsigned char **)(v14 + 616), v15 - (void)v16 == 1)
    && *v16 == 1)
  {
    sub_4F57A0((uint64_t)v30, v8 + 696 * a3 + 104);
  }
  else
  {
    long long v31 = 0u;
    uint64_t __p = 0xFFFFFFFFLL;
    *(_OWORD *)&v35[1] = 0u;
    long long v38 = 0u;
    *(_OWORD *)char v30 = 0u;
    memset(__p_8, 255, sizeof(__p_8));
    *(_OWORD *)__p_15 = 0uLL;
    *(void *)uint64_t v35 = 0;
    *(_WORD *)&v35[8] = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    *(void *)&long long v38 = 0;
    BYTE8(v38) = 0;
  }
  std::to_string(&v25, a4);
  unint64_t v17 = std::string::insert(&v25, 0, "{Line");
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  uint64_t v19 = std::string::append(&v26, "}");
  char v20 = (void *)v19->__r_.__value_.__r.__words[0];
  unint64_t size = v19->__r_.__value_.__l.__size_;
  v27[0] = v19->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v27 + 3) = *(_DWORD *)((char *)&v19->__r_.__value_.__r.__words[2] + 3);
  int v22 = SHIBYTE(v19->__r_.__value_.__r.__words[2]);
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_17;
    }
LABEL_20:
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((v22 & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_20;
  }
LABEL_17:
  if ((v22 & 0x80000000) == 0)
  {
LABEL_18:
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = size;
    *(_DWORD *)(a1 + 16) = v27[0];
    *(_DWORD *)(a1 + 19) = *(_DWORD *)((char *)v27 + 3);
    *(unsigned char *)(a1 + 23) = v22;
    goto LABEL_22;
  }
LABEL_21:
  sub_4200((unsigned char *)a1, v20, size);
LABEL_22:
  if (SHIBYTE(v29) < 0)
  {
    sub_4200((unsigned char *)(a1 + 24), v28[0], (unint64_t)v28[1]);
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v28;
    *(void *)(a1 + 40) = v29;
  }
  sub_4F57A0(a1 + 48, (uint64_t)v30);
  if (v22 < 0)
  {
    operator delete(v20);
    if ((SBYTE7(v38) & 0x80000000) == 0)
    {
LABEL_27:
      if ((v35[8] & 0x80000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_34;
    }
  }
  else if ((SBYTE7(v38) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(v36);
  if ((v35[8] & 0x80000000) == 0)
  {
LABEL_28:
    int v23 = __p;
    if (__p != 1) {
      goto LABEL_29;
    }
    goto LABEL_35;
  }
LABEL_34:
  operator delete(*(void **)((char *)__p_15 + 1));
  int v23 = __p;
  if (__p != 1)
  {
LABEL_29:
    if (v23 || (SHIBYTE(v31) & 0x80000000) == 0) {
      goto LABEL_38;
    }
    int v24 = v30[1];
    goto LABEL_37;
  }
LABEL_35:
  int v24 = v30[1];
  if (!v30[1]) {
    goto LABEL_38;
  }
  *(void **)&long long v31 = v30[1];
LABEL_37:
  operator delete(v24);
LABEL_38:
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[0]);
  }
}

void sub_9E128C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char **sub_9E1344(char **a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  int v4 = a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x19999999999999ALL) {
      sub_2E00();
    }
    uint64_t v6 = 160 * a3;
    uint64_t v7 = (char *)operator new(160 * a3);
    uint64_t v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    do
    {
      sub_9E3D3C(v4, &v7[v8], (long long *)(a2 + v8));
      v8 += 160;
    }
    while (v6 != v8);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_9E13F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    size_t v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_52FAE0(v4 - 160);
      while ((void *)v4 != v3);
      size_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_9E145C(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(*(void *)(a1 + 112) + 8))
  {
    uint64_t v2 = *a2;
    if (*(unsigned __int8 *)(*(void *)(a1 + 88) + 1177) >= 0xBu)
    {
      uint64_t v3 = a2[1];
      if (v2 != v3)
      {
        uint64_t v4 = *a2;
        while (1)
        {
          int v5 = *(_DWORD *)(v4 + 80);
          if (v5 == 1)
          {
            BOOL v6 = *(_DWORD *)(v4 + 52) == -1 && *(_DWORD *)(v4 + 48) == -1;
            if (v6 && *(void *)(v4 + 56) == *(void *)(v4 + 64)) {
              goto LABEL_18;
            }
          }
          else if (v5 || *(_DWORD *)(v4 + 48) == -1)
          {
            goto LABEL_18;
          }
          v4 += 160;
          if (v4 == v3) {
            return 0;
          }
        }
      }
      return 0;
    }
  }
  else
  {
    uint64_t v2 = *a2;
  }
LABEL_18:
  uint64_t v7 = a2[1];
  if (v2 == v7) {
    return 0;
  }
  uint64_t v8 = v2 + 160;
  do
  {
    uint64_t v9 = *(void *)(v8 - 128);
    if (*(char *)(v8 - 113) >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(v8 - 113);
    }
    BOOL result = v9 == 0;
    if (v9) {
      BOOL v11 = v8 == v7;
    }
    else {
      BOOL v11 = 1;
    }
    v8 += 160;
  }
  while (!v11);
  return result;
}

BOOL sub_9E1524(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  if (*a2 == v2) {
    return 0;
  }
  uint64_t v3 = *a2 + 160;
  do
  {
    uint64_t v4 = *(void *)(v3 - 128);
    if (*(char *)(v3 - 113) >= 0) {
      uint64_t v4 = *(unsigned __int8 *)(v3 - 113);
    }
    BOOL result = v4 == 0;
    if (v4) {
      BOOL v6 = v3 == v2;
    }
    else {
      BOOL v6 = 1;
    }
    v3 += 160;
  }
  while (!v6);
  return result;
}

void sub_9E1568(void *a1@<X0>, uint64_t a2@<X1>, long long **a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  sub_5F3B74(a7, (__int16 *)(a1[11] + 1177));
  sub_98C68C(a5, (uint64_t)&v74);
  if (*(unsigned char *)(a1[14] + 8))
  {
    unint64_t v12 = *a3;
    if (*(unsigned __int8 *)(a1[11] + 1177) >= 0xBu)
    {
      uint64_t v13 = a3[1];
      if (v12 != v13)
      {
        uint64_t v14 = *a3;
        while (1)
        {
          int v15 = *((_DWORD *)v14 + 20);
          if (v15 == 1)
          {
            BOOL v16 = *((_DWORD *)v14 + 13) == -1 && *((_DWORD *)v14 + 12) == -1;
            if (v16 && *((void *)v14 + 7) == *((void *)v14 + 8)) {
              goto LABEL_18;
            }
          }
          else if (v15 || *((_DWORD *)v14 + 12) == -1)
          {
            goto LABEL_18;
          }
          v14 += 10;
          if (v14 == v13) {
            goto LABEL_28;
          }
        }
      }
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v12 = *a3;
  }
LABEL_18:
  unint64_t v17 = a3[1];
  if (v12 == v17)
  {
LABEL_28:
    BOOL v20 = 0;
    goto LABEL_29;
  }
  long long v18 = v12 + 10;
  do
  {
    uint64_t v19 = *((void *)v18 - 16);
    if (*((char *)v18 - 113) >= 0) {
      uint64_t v19 = *((unsigned __int8 *)v18 - 113);
    }
    BOOL v20 = v19 == 0;
    if (v19) {
      BOOL v21 = v18 == v17;
    }
    else {
      BOOL v21 = 1;
    }
    v18 += 10;
  }
  while (!v21);
LABEL_29:
  if (*((char *)a4 + 23) >= 0) {
    uint64_t v22 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    uint64_t v22 = *((void *)a4 + 1);
  }
  if (v22) {
    BOOL v23 = 0;
  }
  else {
    BOOL v23 = v20;
  }
  if (!a6 || v23)
  {
    std::operator+<char>();
  }
  else
  {
    unsigned __int8 v73 = 0;
    LOBYTE(v72[0]) = 0;
  }
  uint64_t v24 = 9;
  if (!v22) {
    uint64_t v24 = 0;
  }
  unsigned __int8 v71 = v24;
  if (v22)
  {
    LOBYTE(v70) = 125;
    unsigned int v69 = *(void **)" {System}";
  }
  *((unsigned char *)&v69 + v24) = 0;
  if (v20)
  {
    HIBYTE(v68) = 0;
    LOBYTE(v67[0]) = 0;
    goto LABEL_47;
  }
  std::to_string(&__dst, 0xCCCCCCCCCCCCCCCDLL * (((char *)a3[1] - (char *)*a3) >> 5));
  std::string v25 = std::string::insert(&__dst, 0, " {MultipleLine");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  unint64_t v27 = std::string::append(&v76, "}");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  int64_t v68 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)unsigned __int8 v67 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v76.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_47;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_47:
  int v29 = *(char *)(a2 + 23);
  if (v29 >= 0) {
    size_t v30 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v30 = *(void *)(a2 + 8);
  }
  int v31 = (char)v71;
  if ((v71 & 0x80u) == 0) {
    size_t v32 = v71;
  }
  else {
    size_t v32 = v70;
  }
  unint64_t v33 = v32 + v30;
  if (v32 + v30 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  unint64_t v34 = (const void **)a2;
  unint64_t v60 = a3;
  unint64_t v61 = a4;
  if (v33 <= 0x16)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = (char *)&__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v32 + v30;
    if (!v30) {
      goto LABEL_60;
    }
    goto LABEL_56;
  }
  uint64_t v46 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v33 | 7) != 0x17) {
    uint64_t v46 = v33 | 7;
  }
  uint64_t v47 = v46 + 1;
  p_dst = (char *)operator new(v46 + 1);
  __dst.__r_.__value_.__l.__size_ = v32 + v30;
  __dst.__r_.__value_.__r.__words[2] = v47 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (v30)
  {
LABEL_56:
    if (v29 >= 0) {
      uint64_t v36 = v34;
    }
    else {
      uint64_t v36 = *v34;
    }
    memmove(p_dst, v36, v30);
  }
LABEL_60:
  if (v32)
  {
    if (v31 >= 0) {
      uint64_t v37 = &v69;
    }
    else {
      uint64_t v37 = v69;
    }
    memmove(&p_dst[v30], v37, v32);
  }
  p_dst[v30 + v32] = 0;
  if (v68 >= 0) {
    long long v38 = v67;
  }
  else {
    long long v38 = (void **)v67[0];
  }
  if (v68 >= 0) {
    std::string::size_type v39 = HIBYTE(v68);
  }
  else {
    std::string::size_type v39 = (std::string::size_type)v67[1];
  }
  uint64_t v40 = std::string::append(&__dst, (const std::string::value_type *)v38, v39);
  long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if ((v73 & 0x80u) == 0) {
    char v42 = v72;
  }
  else {
    char v42 = (void **)v72[0];
  }
  if ((v73 & 0x80u) == 0) {
    std::string::size_type v43 = v73;
  }
  else {
    std::string::size_type v43 = (std::string::size_type)v72[1];
  }
  uint64_t v44 = std::string::append(&v76, (const std::string::value_type *)v42, v43);
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  std::string::size_type v66 = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t __p = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_79;
    }
LABEL_86:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((byte_25DE4D8[23] & 0x80000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_87;
  }
  operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_86;
  }
LABEL_79:
  if ((byte_25DE4D8[23] & 0x80000000) == 0)
  {
LABEL_80:
    std::string v76 = *(std::string *)byte_25DE4D8;
    goto LABEL_88;
  }
LABEL_87:
  sub_4200(&v76, *(void **)byte_25DE4D8, *(unint64_t *)&byte_25DE4D8[8]);
LABEL_88:
  if (*((char *)v61 + 23) < 0)
  {
    sub_4200(&v77, *(void **)v61, *((void *)v61 + 1));
  }
  else
  {
    long long v77 = *v61;
    uint64_t v78 = *((void *)v61 + 2);
  }
  sub_2AAA4((uint64_t)&__dst, (uint64_t)&v76, 1);
  if (SHIBYTE(v78) < 0)
  {
    operator delete((void *)v77);
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_93:
      int v48 = *(unsigned __int8 *)(a1[14] + 8);
      if (*(unsigned char *)(a1[14] + 8)) {
        goto LABEL_94;
      }
LABEL_112:
      int v49 = *a3;
      uint64_t v54 = v60[1];
      if (*v60 == v54) {
        goto LABEL_119;
      }
      goto LABEL_115;
    }
  }
  else if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_93;
  }
  operator delete(v76.__r_.__value_.__l.__data_);
  int v48 = *(unsigned __int8 *)(a1[14] + 8);
  if (!*(unsigned char *)(a1[14] + 8)) {
    goto LABEL_112;
  }
LABEL_94:
  int v49 = *a3;
  if (*(unsigned __int8 *)(a1[11] + 1177) < 0xBu)
  {
LABEL_108:
    int v48 = 0;
    uint64_t v54 = v60[1];
    if (v49 == v54) {
      goto LABEL_119;
    }
    goto LABEL_115;
  }
  uint64_t v50 = v60[1];
  if (v49 != v50)
  {
    for (uint64_t i = *v60; i != v50; i += 10)
    {
      int v52 = *((_DWORD *)i + 20);
      if (v52 == 1)
      {
        BOOL v53 = *((_DWORD *)i + 13) == -1 && *((_DWORD *)i + 12) == -1;
        if (v53 && *((void *)i + 7) == *((void *)i + 8)) {
          goto LABEL_108;
        }
      }
      else if (v52 || *((_DWORD *)i + 12) == -1)
      {
        goto LABEL_108;
      }
    }
  }
  int v48 = 1;
  uint64_t v54 = v60[1];
  if (v49 != v54)
  {
LABEL_115:
    if (v48) {
      sub_5F40C0(a7, v49);
    }
    if (!v20)
    {
      do
      {
        v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
        uint64_t v55 = sub_31B300((uint64_t)&__dst, (uint64_t)v49, (uint64_t)&unk_20F06E0, (long long **)&v76);
        uint64_t v56 = (const std::string *)((char *)v49 + 24);
        std::string::operator=((std::string *)(v55 + 5), v56);
        int v49 = (long long *)&v56[5].__r_.__value_.__r.__words[2];
      }
      while (v49 != v54);
    }
  }
LABEL_119:
  sub_6581AC((uint64_t)__p, (uint64_t)&__dst, a1[12], 0, &v76);
  sub_5F41E8(a7, (uint64_t)&v76);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v76.__r_.__value_.__l.__data_);
  }
  char v57 = (char *)__dst.__r_.__value_.__r.__words[2];
  if (__dst.__r_.__value_.__r.__words[2])
  {
    while (1)
    {
      int v58 = *(char **)v57;
      if (v57[63] < 0)
      {
        operator delete(*((void **)v57 + 5));
        if ((v57[39] & 0x80000000) == 0) {
          goto LABEL_124;
        }
LABEL_127:
        operator delete(*((void **)v57 + 2));
        operator delete(v57);
        char v57 = v58;
        if (!v58) {
          break;
        }
      }
      else
      {
        if (v57[39] < 0) {
          goto LABEL_127;
        }
LABEL_124:
        operator delete(v57);
        char v57 = v58;
        if (!v58) {
          break;
        }
      }
    }
  }
  uint64_t v59 = (void *)__dst.__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = 0;
  if (v59) {
    operator delete(v59);
  }
  if (SHIBYTE(v66) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v68) & 0x80000000) == 0)
    {
LABEL_132:
      if (((char)v71 & 0x80000000) == 0) {
        goto LABEL_133;
      }
      goto LABEL_138;
    }
  }
  else if ((SHIBYTE(v68) & 0x80000000) == 0)
  {
    goto LABEL_132;
  }
  operator delete(v67[0]);
  if (((char)v71 & 0x80000000) == 0)
  {
LABEL_133:
    if (((char)v73 & 0x80000000) == 0) {
      goto LABEL_134;
    }
    goto LABEL_139;
  }
LABEL_138:
  operator delete(v69);
  if (((char)v73 & 0x80000000) == 0)
  {
LABEL_134:
    if ((v75 & 0x80000000) == 0) {
      return;
    }
LABEL_140:
    operator delete(v74);
    return;
  }
LABEL_139:
  operator delete(v72[0]);
  if (v75 < 0) {
    goto LABEL_140;
  }
}

void sub_9E1CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (*(char *)(v53 - 137) < 0) {
    operator delete(*(void **)(v53 - 160));
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a41 < 0)
  {
    operator delete(a36);
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((a47 & 0x80000000) == 0)
  {
LABEL_9:
    if (a53 < 0) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  operator delete(a42);
  if (a53 < 0)
  {
LABEL_10:
    operator delete(a48);
    sub_4D4B58(a12);
    _Unwind_Resume(a1);
  }
LABEL_13:
  sub_4D4B58(a12);
  _Unwind_Resume(a1);
}

void sub_9E1E0C(uint64_t a1)
{
  sub_921ED8(a1);

  operator delete();
}

_OWORD *sub_9E1E44@<X0>(_OWORD *a1@<X8>)
{
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return sub_922B20(a1);
}

void sub_9E1E70(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, uint64_t *a5@<X8>)
{
  unint64_t v10 = (std::__shared_weak_count *)operator new(0x218uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = &v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_243C740;
  uint64_t v12 = sub_9DCE20((uint64_t)&v10[1], a1, a2, a3, a4);
  *a5 = v12;
  a5[1] = (uint64_t)v10;
  shared_weak_owners = (std::__shared_weak_count *)v10[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[1].__shared_owners_ = v12;
    v10[1].__shared_weak_owners_ = (uint64_t)v10;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v10[1].__shared_owners_ = v12;
    v10[1].__shared_weak_owners_ = (uint64_t)v10;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);

  std::__shared_weak_count::__release_weak(v10);
}

void sub_9E1FBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9E1FD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243C740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9E1FF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243C740;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_9E2048(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_9E2070(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = (std::__shared_weak_count *)operator new(0x220uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243C790;
  uint64_t v8 = sub_94055C((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9E21A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9E21C0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243C790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9E21E0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243C790;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_9E2234(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_9E225C(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = (std::__shared_weak_count *)operator new(0x220uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243C7E0;
  uint64_t v8 = sub_940A30((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9E2394(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9E23AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243C7E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9E23CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243C7E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_9E2420(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_9E2448(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = (std::__shared_weak_count *)operator new(0x218uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243C830;
  uint64_t v8 = sub_940A78((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9E2580(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9E2598(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243C830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9E25B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243C830;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_9E260C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_9E2634(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  BOOL v6 = (std::__shared_weak_count *)operator new(0x250uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243C880;
  uint64_t v8 = sub_941524((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = (uint64_t)v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9E276C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9E2784(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243C880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9E27A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243C880;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_9E27F8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_9E2820(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  BOOL v6 = (std::__shared_weak_count *)operator new(0x238uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243C8D0;
  uint64_t v8 = sub_94341C((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = (uint64_t)v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9E2958(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9E2970(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243C8D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9E2990(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243C8D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_9E29E4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_9E2A0C(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  BOOL v6 = (std::__shared_weak_count *)operator new(0x218uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243C920;
  uint64_t v8 = sub_943BF8((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = (uint64_t)v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9E2B44(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9E2B5C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243C920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9E2B7C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243C920;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_9E2BD0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_9E2BF8(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  BOOL v6 = (std::__shared_weak_count *)operator new(0x220uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243C970;
  uint64_t v8 = sub_9222B8((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = (uint64_t)v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9E2D30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9E2D48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243C970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9E2D68(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243C970;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_9E2DBC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_9E2DE4(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  BOOL v6 = (std::__shared_weak_count *)operator new(0x238uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243C9C0;
  uint64_t v8 = sub_9245B0((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = (uint64_t)v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9E2F1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9E2F34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243C9C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9E2F54(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243C9C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_9E2FA8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_9E2FD0(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  BOOL v6 = (std::__shared_weak_count *)operator new(0x220uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243CA10;
  uint64_t v8 = sub_9251D0((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = (uint64_t)v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9E3108(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9E3120(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243CA10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9E3140(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243CA10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_9E3194(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_9E31BC(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  BOOL v6 = (std::__shared_weak_count *)operator new(0x238uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243CA60;
  uint64_t v8 = sub_92564C((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = (uint64_t)v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9E32F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9E330C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243CA60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9E332C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243CA60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_9E3380(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_9E33A8(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  BOOL v6 = (std::__shared_weak_count *)operator new(0x238uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243CAB0;
  uint64_t v8 = sub_92349C((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = (uint64_t)v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9E34E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9E34F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243CAB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9E3518(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243CAB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_9E356C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_9E3594(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  BOOL v6 = (std::__shared_weak_count *)operator new(0x220uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243CB00;
  uint64_t v8 = sub_927200((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = (uint64_t)v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9E36CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9E36E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243CB00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9E3704(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243CB00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_9E3758(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_9E3780(uint64_t a1@<X1>, void *a2@<X2>, uint64_t *a3@<X8>)
{
  BOOL v6 = (std::__shared_weak_count *)operator new(0x218uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = &v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_243CB50;
  uint64_t v8 = sub_9260EC((uint64_t)&v6[1], a1, a2);
  *a3 = v8;
  a3[1] = (uint64_t)v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v6[1].__shared_owners_ = v8;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);

  std::__shared_weak_count::__release_weak(v6);
}

void sub_9E38B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9E38D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243CB50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9E38F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243CB50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_9E3944(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_9E396C(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v8 = (std::__shared_weak_count *)operator new(0x390uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = &v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_243CBA0;
  uint64_t v10 = sub_926A58((uint64_t)&v8[1], a1, a2, a3);
  *a4 = v10;
  a4[1] = (uint64_t)v8;
  shared_weak_owners = (std::__shared_weak_count *)v8[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = v10;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  else
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v8[1].__shared_owners_ = v10;
    v8[1].__shared_weak_owners_ = (uint64_t)v8;
    if (atomic_fetch_add(p_shared_owners, 0xFFFFFFFFFFFFFFFFLL)) {
      return;
    }
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);

  std::__shared_weak_count::__release_weak(v8);
}

void sub_9E3AB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_9E3AD0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243CBA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_9E3AF0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243CBA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_9E3B44(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

char **sub_9E3B6C(char **a1, long long *a2, unint64_t a3)
{
  a1[2] = 0;
  int v4 = a1 + 16;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x555555555555556) {
      sub_2E00();
    }
    uint64_t v6 = 3 * a3;
    uint64_t v7 = (char *)operator new(48 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6 * 16];
    a1[1] = sub_9E3C38(v4, a2, &a2[v6], v7);
  }
  return a1;
}

void sub_9E3C0C(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20AB2D0((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_9E3C38(int a1, long long *a2, long long *a3, char *__dst)
{
  int v4 = __dst;
  BOOL v11 = __dst;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_4200(v4, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)int v4 = v8;
      }
      uint64_t v9 = v4 + 24;
      if (*((char *)v6 + 47) < 0)
      {
        sub_4200(v9, *((void **)v6 + 3), *((void *)v6 + 4));
      }
      else
      {
        long long v7 = *(long long *)((char *)v6 + 24);
        *((void *)v4 + 5) = *((void *)v6 + 5);
        *(_OWORD *)uint64_t v9 = v7;
      }
      v6 += 3;
      int v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_9E3D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 23) < 0)
  {
    operator delete(*(void **)v9);
    sub_29DF84((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_29DF84((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_9E3D3C(int a1, char *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a3, *((void *)a3 + 1));
    uint64_t v6 = __dst + 24;
    if ((*((char *)a3 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    sub_4200(v6, *((void **)a3 + 3), *((void *)a3 + 4));
    return sub_4F57A0((uint64_t)(__dst + 48), (uint64_t)(a3 + 3));
  }
  long long v5 = *a3;
  *((void *)__dst + 2) = *((void *)a3 + 2);
  *(_OWORD *)std::string __dst = v5;
  uint64_t v6 = __dst + 24;
  if (*((char *)a3 + 47) < 0) {
    goto LABEL_5;
  }
LABEL_3:
  long long v7 = *(long long *)((char *)a3 + 24);
  *((void *)v6 + 2) = *((void *)a3 + 5);
  *(_OWORD *)uint64_t v6 = v7;
  return sub_4F57A0((uint64_t)(__dst + 48), (uint64_t)(a3 + 3));
}

void sub_9E3DD4(_Unwind_Exception *exception_object)
{
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_9E3E20(char **a1, long long *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x199999999999999) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 5) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 5);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 5) >= 0xCCCCCCCCCCCCCCLL) {
    unint64_t v6 = 0x199999999999999;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x199999999999999) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(160 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  BOOL v21 = &v7[160 * v3];
  uint64_t v22 = &v7[160 * v6];
  sub_9E3D3C(a1 + 16, v21, a2);
  long long v8 = v21 + 160;
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  if (v9 == *a1)
  {
    *a1 = v21;
    a1[1] = v8;
    a1[2] = v22;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = &v21[v11];
      uint64_t v13 = &v9[v11];
      long long v14 = *(_OWORD *)&v9[v11 - 160];
      *((void *)v12 - 18) = *(void *)&v9[v11 - 144];
      *((_OWORD *)v12 - 10) = v14;
      *((void *)v13 - 19) = 0;
      *((void *)v13 - 18) = 0;
      *((void *)v13 - 20) = 0;
      long long v15 = *(_OWORD *)&v9[v11 - 136];
      *((void *)v12 - 15) = *(void *)&v9[v11 - 120];
      *(_OWORD *)(v12 - 136) = v15;
      *((void *)v13 - 16) = 0;
      *((void *)v13 - 15) = 0;
      *((void *)v13 - 17) = 0;
      *((_DWORD *)v12 - 20) = *(_DWORD *)&v9[v11 - 80];
      sub_4F38B0((void *)*(unsigned int *)&v9[v11 - 80], (uint64_t *)&v9[v11 - 112], &v21[v11 - 112]);
      *((void *)v12 - 9) = *(void *)&v9[v11 - 72];
      long long v16 = *(_OWORD *)&v9[v11 - 64];
      *((void *)v12 - 6) = *(void *)&v9[v11 - 48];
      *((_OWORD *)v12 - 4) = v16;
      *((void *)v13 - 7) = 0;
      *((void *)v13 - 6) = 0;
      *((void *)v13 - 8) = 0;
      *(v12 - 40) = v9[v11 - 40];
      long long v17 = *(_OWORD *)&v9[v11 - 32];
      *((void *)v12 - 2) = *(void *)&v9[v11 - 16];
      *((_OWORD *)v12 - 2) = v17;
      *((void *)v13 - 3) = 0;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 4) = 0;
      *(v12 - 8) = v9[v11 - 8];
      v11 -= 160;
    }
    while (&v9[v11] != v10);
    long long v18 = *a1;
    uint64_t v9 = a1[1];
    uint64_t v19 = &v21[v11];
    long long v8 = v21 + 160;
    *a1 = v19;
    a1[1] = v21 + 160;
    a1[2] = v22;
    if (v9 != v18)
    {
      do
      {
        v9 -= 160;
        sub_52FAE0((uint64_t)v9);
      }
      while (v9 != v18);
      uint64_t v9 = v18;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v8;
}

void sub_9E4034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9E404C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9E404C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 160;
    sub_52FAE0(i - 160);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_9E40A0()
{
  byte_25DE30F = 1;
  word_25DE2F8 = 65;
  byte_25DE327 = 1;
  word_25DE310 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DEA90 = 0u;
  *(_OWORD *)&qword_25DEAA0 = 0u;
  dword_25DEAB0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DEA90, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DEA90, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DEA90, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DEA90, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DE33F = 8;
  strcpy((char *)&qword_25DE328, "any_mode");
  byte_25DE357 = 7;
  strcpy((char *)&dword_25DE340, "cycling");
  byte_25DE36F = 7;
  strcpy((char *)&dword_25DE358, "driving");
  byte_25DE387 = 7;
  strcpy((char *)&dword_25DE370, "walking");
  qword_25DE390 = 0;
  qword_25DE398 = 0;
  qword_25DE388 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DE388 = (uint64_t)v0;
  qword_25DE390 = (uint64_t)(v0 + 9);
  qword_25DE398 = (uint64_t)(v0 + 9);
  qword_25DE3A0 = 0;
  qword_25DE3A8 = 0;
  unk_25DE3B0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DE3A8 = (uint64_t)(v1 + 9);
  unk_25DE3B0 = v1 + 9;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DE3A0 = (uint64_t)v1;
  byte_25DE3CF = 6;
  strcpy((char *)&dword_25DE3B8, "{Mode}");
  byte_25DE3E7 = 11;
  strcpy((char *)&qword_25DE3D0, "{Direction}");
  byte_25DE3FF = 6;
  strcpy((char *)&dword_25DE3E8, "{Line}");
  byte_25DE417 = 12;
  strcpy((char *)&qword_25DE400, "{LineNumber}");
  strcpy(&byte_25DE42F, "\n{Headsign1}");
  strcpy((char *)&qword_25DE418, "{Headsign}");
  byte_25DE447 = 11;
  byte_25DE45F = 11;
  strcpy((char *)&qword_25DE448, "{Headsign2}");
  byte_25DE477 = 11;
  strcpy((char *)&qword_25DE460, "{Headsign3}");
  byte_25DE48F = 11;
  strcpy((char *)&qword_25DE478, "{Headsign4}");
  byte_25DE4A7 = 11;
  strcpy((char *)&qword_25DE490, "{Headsign5}");
  byte_25DE4BF = 6;
  strcpy((char *)&dword_25DE4A8, "{Stop}");
  byte_25DE4D7 = 14;
  strcpy((char *)&qword_25DE4C0, "{PreviousStop}");
  byte_25DE4D8[23] = 8;
  strcpy(byte_25DE4D8, "{System}");
  byte_25DE507 = 15;
  strcpy((char *)&qword_25DE4F0, "{VehicleNumber}");
  byte_25DE51F = 17;
  strcpy((char *)&xmmword_25DE508, "{AccessPointExit}");
  strcpy(&byte_25DE537, "\n{nextBoardStation}");
  strcpy((char *)&qword_25DE520, "{Platform}");
  byte_25DE54F = 18;
  qword_25DE550 = 0;
  unk_25DE558 = 0;
  qword_25DE560 = 0;
  byte_25DE57F = 1;
  LOWORD(xmmword_25DE568) = 32;
  qword_25DE580 = (uint64_t)operator new(0x20uLL);
  unk_25DE588 = xmmword_20B8890;
  strcpy((char *)qword_25DE580, "LeaveStop_Loc_Comma_Separator");
  byte_25DE5AF = 5;
  dword_25DE598 = -1028144608;
  word_25DE59C = 160;
  byte_25DE5C7 = 2;
  word_25DE5B0 = -24382;
  byte_25DE5B2 = 0;
  byte_25DE5DF = 4;
  dword_25DE5C8 = 548913696;
  byte_25DE5CC = 0;
  byte_25DE5F7 = 15;
  strcpy((char *)&qword_25DE5E0 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25DE5E0, "{s:s} ·");
  byte_25DE60F = 6;
  strcpy((char *)&dword_25DE5F8, "NoType");
  byte_25DE627 = 14;
  strcpy((char *)&qword_25DE610, "{WalkDistance}");
  strcpy(&byte_25DE63F, "\n{OneMinute}");
  strcpy((char *)&qword_25DE628, "{WalkTime}");
  byte_25DE657 = 11;
  byte_25DE66F = 14;
  strcpy((char *)&qword_25DE658, "{StepDuration}");
  byte_25DE687 = 15;
  strcpy((char *)&qword_25DE670, "{TripFrequency}");
  byte_25DE69F = 11;
  strcpy((char *)&qword_25DE688, "{BoardTime}");
  byte_25DE6B7 = 12;
  strcpy((char *)&qword_25DE6A0, "{AlightTime}");
  byte_25DE6CF = 21;
  strcpy((char *)&xmmword_25DE6B8, "{FutureTimestampList}");
  byte_25DE6E7 = 15;
  strcpy((char *)&qword_25DE6D0, "{DepartureTime}");
  byte_25DE6FF = 13;
  strcpy((char *)&qword_25DE6E8, "{ArrivalTime}");
  byte_25DE717 = 19;
  strcpy((char *)&xmmword_25DE700, "{TotalWalkDistance}");
  byte_25DE72F = 14;
  strcpy((char *)&qword_25DE718, "{TripDuration}");
  byte_25DE747 = 11;
  strcpy((char *)&qword_25DE730, "{DayOfWeek}");
  byte_25DE75F = 6;
  strcpy((char *)&dword_25DE748, "{Date}");
  byte_25DE777 = 16;
  strcpy((char *)&xmmword_25DE760, "{OutTheDoorTime}");
  BOOL result = (char *)operator new(0x20uLL);
  qword_25DE778 = (uint64_t)result;
  unk_25DE780 = xmmword_20B91A0;
  strcpy(result, "{FirstVehicleDepartureTime}");
  byte_25DE7A7 = 18;
  strcpy(byte_25DE790, "{RouteArrivalTime}");
  strcpy(&byte_25DE7BF, "\n{IC_Artwork}");
  strcpy((char *)&qword_25DE7A8, "{BaseFare}");
  byte_25DE7D7 = 12;
  byte_25DE7EF = 11;
  strcpy((char *)&qword_25DE7D8, "{RT_Symbol}");
  byte_25DE807 = 12;
  strcpy((char *)&qword_25DE7F0, "{TotalPrice}");
  byte_25DE81F = 13;
  strcpy((char *)&qword_25DE808, "{CheckInTime}");
  byte_25DE837 = 19;
  strcpy((char *)&xmmword_25DE820, "{LiveDepartureTime}");
  strcpy(&byte_25DE84F, "\n{LegDuration}");
  strcpy((char *)&qword_25DE838, "{TimeList}");
  byte_25DE867 = 13;
  byte_25DE87F = 15;
  strcpy((char *)&qword_25DE868, "{CountdownList}");
  byte_25DE897 = 3;
  dword_25DE880 = 8217723;
  strcpy(&byte_25DE8AF, "\t{AccessPointArt}");
  strcpy((char *)&qword_25DE898, "{LineArt}");
  byte_25DE8C7 = 16;
  byte_25DE8DF = 11;
  strcpy((char *)&qword_25DE8C8, "{SystemArt}");
  strcpy(&byte_25DE8F7, "\n{ServiceBeginTime}");
  strcpy((char *)&xmmword_25DE8E0, "{CardName}");
  byte_25DE90F = 18;
  byte_25DE927 = 16;
  strcpy((char *)&xmmword_25DE910, "{ServiceEndTime}");
  byte_25DE93F = 6;
  strcpy((char *)&dword_25DE928, "OnTime");
  byte_25DE957 = 6;
  strcpy((char *)&dword_25DE940, "Delays");
  byte_25DE96F = 1;
  word_25DE958 = 115;
  byte_25DE987 = 2;
  strcpy((char *)&word_25DE970, "cs");
  byte_25DE99F = 1;
  word_25DE988 = 112;
  byte_25DE9B7 = 5;
  strcpy((char *)&dword_25DE9A0, "_Line");
  byte_25DE9CF = 7;
  strcpy((char *)&dword_25DE9B8, "_System");
  strcpy(&byte_25DE9E7, "\n_VehicleNumber");
  strcpy((char *)&qword_25DE9D0, "_Direction");
  byte_25DE9FF = 14;
  byte_25DEA17 = 12;
  strcpy((char *)&qword_25DEA00, "_To_Headsign");
  byte_25DEA2F = 16;
  strcpy((char *)&xmmword_25DEA18, "_Toward_Headsign");
  strcpy(&byte_25DEA47, "\t_LineNumber");
  strcpy((char *)&qword_25DEA30, "_Headsign");
  byte_25DEA5F = 11;
  return result;
}

void sub_9E4C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DEAA0) {
    sub_20AD890((void **)qword_25DEAA0);
  }
  uint64_t v37 = (void *)xmmword_25DEA90;
  *(void *)&xmmword_25DEA90 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_9E4D28(uint64_t a1, void *a2)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v3 = (void **)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  char v4 = (void *)(a1 + 96);
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  if (*a2 == a2[1])
  {
    int v5 = (void *)(a1 + 32);
    sub_9E4D28(&v22);
    *(void *)&long long v23 = -1;
    *((void *)&v23 + 1) = -1;
    *((void *)&v22 + 1) = -1;
    long long v6 = v23;
    *(_OWORD *)a1 = v22;
    *(_OWORD *)(a1 + 16) = v6;
    char v7 = *(void **)(a1 + 32);
    if (v7)
    {
      *(void *)(a1 + 40) = v7;
      operator delete(v7);
      void *v5 = 0;
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
    }
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v24;
    *(void *)(a1 + 48) = v25;
    v24[1] = 0;
    uint64_t v25 = 0;
    v24[0] = 0;
    if (*(void *)(a1 + 80))
    {
      int v8 = *(void **)(a1 + 72);
      if (v8)
      {
        do
        {
          uint64_t v9 = (void *)*v8;
          operator delete(v8);
          int v8 = v9;
        }
        while (v9);
      }
      *(void *)(a1 + 72) = 0;
      uint64_t v10 = *(void *)(a1 + 64);
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
          *((void *)*v3 + i) = 0;
      }
      *(void *)(a1 + 80) = 0;
    }
    uint64_t v12 = v26;
    long long v26 = 0;
    char v13 = *v3;
    *uint64_t v3 = v12;
    if (v13) {
      operator delete(v13);
    }
    unint64_t v14 = v27;
    long long v15 = __p;
    *(void *)(a1 + 72) = __p;
    *(void *)(a1 + 64) = v14;
    unint64_t v27 = 0;
    uint64_t v16 = v29;
    *(void *)(a1 + 80) = v29;
    *(_DWORD *)(a1 + 88) = v30;
    if (v16)
    {
      unint64_t v17 = v15[1];
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v17 >= v14) {
          v17 %= v14;
        }
      }
      else
      {
        v17 &= v14 - 1;
      }
      *((void *)*v3 + v17) = a1 + 72;
      uint64_t __p = 0;
      uint64_t v29 = 0;
    }
    sub_9E62DC(v4, (uint64_t)v31);
    sub_9467EC((uint64_t)v31);
    long long v18 = __p;
    if (__p)
    {
      do
      {
        uint64_t v19 = (void *)*v18;
        operator delete(v18);
        long long v18 = v19;
      }
      while (v19);
    }
    BOOL v20 = v26;
    long long v26 = 0;
    if (v20) {
      operator delete(v20);
    }
    if (v24[0])
    {
      v24[1] = v24[0];
      operator delete(v24[0]);
    }
  }
  return a1;
}

void sub_9E4F08(_Unwind_Exception *a1)
{
  int v5 = v4;
  sub_9467EC(v3);
  sub_12168(v2);
  char v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 40) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void sub_9E4F38(void **a1)
{
  sub_9E4D28((uint64_t)v89, *a1);
  *(void *)&long long v90 = -1;
  *((void *)&v90 + 1) = -1;
  v89[1] = (void *)-1;
  if (*a1 == v89[0] && a1[1] == (void *)-1 && a1[2] == (void *)-1)
  {
    BOOL v2 = a1[3] == (void *)-1;
    sub_9467EC((uint64_t)v98);
    uint64_t v3 = __p;
    if (!__p) {
      goto LABEL_6;
    }
  }
  else
  {
    BOOL v2 = 0;
    sub_9467EC((uint64_t)v98);
    uint64_t v3 = __p;
    if (!__p) {
      goto LABEL_6;
    }
  }
  do
  {
    char v4 = (void *)*v3;
    operator delete(v3);
    uint64_t v3 = v4;
  }
  while (v4);
LABEL_6:
  int v5 = v93;
  unsigned int v93 = 0;
  if (v5) {
    operator delete(v5);
  }
  if (v91[0])
  {
    v91[1] = v91[0];
    operator delete(v91[0]);
  }
  if (v2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(v89, "Iterated past end");
    uint64_t v85 = (void *)sub_2F404((uint64_t)exception, (long long *)v89);
  }
  long long v6 = (unint64_t *)(a1 + 3);
  char v7 = (void *)(**a1 + 32 * (void)a1[3]);
  unint64_t v8 = (unint64_t)a1[2];
  uint64_t v9 = *v7;
  int v11 = a1 + 1;
  unint64_t v10 = (unint64_t)a1[1];
  uint64_t v12 = *v7 + 104 * v8;
  uint64_t v14 = *(void *)(v12 + 8);
  char v13 = (uint64_t *)(v12 + 8);
  long long v15 = v13 + 1;
  if (v10 < 0xBC7FD20AC579B779 * ((v13[1] - v14) >> 3) - 1)
  {
    *int v11 = v10 + 1;
    return;
  }
  uint64_t v16 = v9 + 104 * v8;
  uint64_t v18 = *(void *)(v16 + 56);
  unint64_t v17 = (uint64_t *)(v16 + 56);
  if (v18 == -1) {
    goto LABEL_53;
  }
  v89[0] = 0;
  v89[1] = 0;
  *(void *)&long long v90 = 0;
  BOOL v20 = (char *)a1[4];
  uint64_t v19 = (char *)a1[5];
  int64_t v21 = v19 - v20;
  BOOL v86 = v7;
  uint64_t v87 = v17;
  if (v19 == v20)
  {
    long long v22 = 0;
    uint64_t v23 = *v13;
    uint64_t v24 = *v15;
    if (*v13 != *v15) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }
  if (v21 < 0) {
    sub_2E00();
  }
  v89[0] = operator new(v19 - v20);
  v89[1] = v89[0];
  long long v22 = (char *)v89[0] + 8 * (v21 >> 3);
  *(void *)&long long v90 = v22;
  memcpy(v89[0], v20, v21);
  v89[1] = v22;
  uint64_t v23 = *v13;
  uint64_t v24 = *v15;
  while (v23 != v24)
  {
LABEL_22:
    if ((unint64_t)v22 < (unint64_t)v90)
    {
      *long long v22 = v23;
      uint64_t v25 = v22 + 1;
    }
    else
    {
      long long v26 = v89[0];
      int64_t v27 = (char *)v22 - (char *)v89[0];
      uint64_t v28 = ((char *)v22 - (char *)v89[0]) >> 3;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v30 = v90 - (unint64_t)v89[0];
      if ((uint64_t)(v90 - (unint64_t)v89[0]) >> 2 > v29) {
        unint64_t v29 = v30 >> 2;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31)
      {
        if (v31 >> 61) {
          sub_188D718();
        }
        size_t v32 = operator new(8 * v31);
        unint64_t v33 = &v32[8 * v28];
        *unint64_t v33 = v23;
        uint64_t v25 = v33 + 1;
        if (v22 != (void *)v26)
        {
LABEL_32:
          unint64_t v34 = (char *)(v22 - 1) - v26;
          if (v34 < 0x168)
          {
            uint64_t v35 = v22;
            goto LABEL_34;
          }
          if (&v32[v27 - 8 - (v34 & 0xFFFFFFFFFFFFFFF8)] > &v32[v27 - 8])
          {
            uint64_t v35 = v22;
            goto LABEL_34;
          }
          if ((void *)((char *)v22 - (v34 & 0xFFFFFFFFFFFFFFF8) - 8) > v22 - 1)
          {
            uint64_t v35 = v22;
            goto LABEL_34;
          }
          if ((unint64_t)((char *)v22 - v32 - v27) < 0x20)
          {
            uint64_t v35 = v22;
            goto LABEL_34;
          }
          uint64_t v37 = (v34 >> 3) + 1;
          uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v35 = &v22[v38 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v33 = (void *)((char *)v33 - v38);
          std::string::size_type v39 = &v32[8 * v28 - 16];
          uint64_t v40 = (long long *)(v22 - 2);
          uint64_t v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v42 = *v40;
            *(v39 - 1) = *(v40 - 1);
            *std::string::size_type v39 = v42;
            v39 -= 2;
            v40 -= 2;
            v41 -= 4;
          }
          while (v41);
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_34:
              uint64_t v36 = *--v35;
              *--unint64_t v33 = v36;
            }
            while (v35 != (void *)v26);
          }
          long long v22 = v89[0];
          v89[0] = v33;
          v89[1] = v25;
          *(void *)&long long v90 = &v32[8 * v31];
          if (!v22) {
            goto LABEL_21;
          }
LABEL_39:
          operator delete(v22);
          goto LABEL_21;
        }
      }
      else
      {
        size_t v32 = 0;
        unint64_t v33 = (void *)(8 * v28);
        *(void *)(8 * v28) = v23;
        uint64_t v25 = (void *)(8 * v28 + 8);
        if (v22 != (void *)v26) {
          goto LABEL_32;
        }
      }
      v89[0] = v33;
      v89[1] = v25;
      *(void *)&long long v90 = &v32[8 * v31];
      if (v22) {
        goto LABEL_39;
      }
    }
LABEL_21:
    v89[1] = v25;
    v23 += 5704;
    long long v22 = v25;
  }
LABEL_50:
  uint64_t v88 = *v87;
  sub_9E6694(a1 + 12, (uint64_t)v89, &v88);
  long long v6 = (unint64_t *)(a1 + 3);
  int v11 = a1 + 1;
  char v7 = v86;
  if (v89[0])
  {
    v89[1] = v89[0];
    operator delete(v89[0]);
  }
  unint64_t v8 = (unint64_t)a1[2];
  uint64_t v9 = *v86;
LABEL_53:
  if (v8 < 0x4EC4EC4EC4EC4EC5 * ((v7[1] - v9) >> 3) - 1)
  {
    a1[1] = 0;
    a1[2] = (void *)(v8 + 1);
    return;
  }
  std::string::size_type v43 = a1[17];
  if (!v43) {
    goto LABEL_85;
  }
  do
  {
    uint64_t v44 = a1[16];
    long long v45 = (void *)((char *)v43 - 1);
    unint64_t v46 = (unint64_t)v43 + (void)v44 - 1;
    uint64_t v47 = (char *)a1[13];
    unint64_t v48 = v46 >> 7;
    unint64_t v49 = v46 & 0x7F;
    uint64_t v50 = *(void *)&v47[8 * (v46 >> 7)] + 32 * v49;
    int v52 = (unint64_t *)(v50 + 24);
    unint64_t v51 = *(void *)(v50 + 24);
    int8x8_t v53 = (int8x8_t)a1[8];
    if (!*(void *)&v53) {
      goto LABEL_99;
    }
    uint8x8_t v54 = (uint8x8_t)vcnt_s8(v53);
    v54.i16[0] = vaddlv_u8(v54);
    if (v54.u32[0] > 1uLL)
    {
      unint64_t v55 = *(void *)(v50 + 24);
      if (v51 >= *(void *)&v53) {
        unint64_t v55 = v51 % *(void *)&v53;
      }
    }
    else
    {
      unint64_t v55 = (*(void *)&v53 - 1) & v51;
    }
    uint64_t v56 = (void *)a1[7][v55];
    if (!v56 || (char v57 = (void *)*v56) == 0)
    {
LABEL_99:
      if (a1 + 4 != (void **)v50)
      {
        sub_326C0(a1 + 4, *(char **)v50, *(char **)(v50 + 8), (uint64_t)(*(void *)(v50 + 8) - *(void *)v50) >> 3);
        unint64_t v51 = *v52;
        uint64_t v44 = a1[16];
        std::string::size_type v43 = a1[17];
        uint64_t v47 = (char *)a1[13];
        long long v45 = (void *)((char *)v43 - 1);
        unint64_t v76 = (unint64_t)v44 + (void)v43 - 1;
        unint64_t v48 = v76 >> 7;
        unint64_t v49 = v76 & 0x7F;
      }
      *long long v6 = v51;
      uint64_t v77 = *(void *)&v47[8 * v48] + 32 * v49;
      uint64_t v78 = *(void **)v77;
      if (*(void *)v77)
      {
        *(void *)(v77 + 8) = v78;
        operator delete(v78);
        uint64_t v47 = (char *)a1[13];
        uint64_t v44 = a1[16];
        std::string::size_type v43 = a1[17];
        long long v45 = (void *)((char *)v43 - 1);
      }
      unint64_t v79 = (char *)a1[14];
      a1[17] = v45;
      if (v79 == v47) {
        uint64_t v80 = 0;
      }
      else {
        uint64_t v80 = 16 * (v79 - v47) - 1;
      }
      if (v80 - ((unint64_t)v43 + (unint64_t)v44) + 1 >= 0x100)
      {
        operator delete(*((void **)v79 - 1));
        --a1[14];
      }
      sub_7A06C8((uint64_t)(a1 + 7), v6, v6);
      *int v11 = 0;
      v11[1] = 0;
      return;
    }
    if (v54.u32[0] < 2uLL)
    {
      uint64_t v58 = *(void *)&v53 - 1;
      while (1)
      {
        uint64_t v60 = v57[1];
        if (v51 == v60)
        {
          if (v57[2] == v51) {
            goto LABEL_77;
          }
        }
        else if ((v60 & v58) != v55)
        {
          goto LABEL_99;
        }
        char v57 = (void *)*v57;
        if (!v57) {
          goto LABEL_99;
        }
      }
    }
    while (1)
    {
      unint64_t v59 = v57[1];
      if (v51 == v59) {
        break;
      }
      if (v59 >= *(void *)&v53) {
        v59 %= *(void *)&v53;
      }
      if (v59 != v55) {
        goto LABEL_99;
      }
LABEL_66:
      char v57 = (void *)*v57;
      if (!v57) {
        goto LABEL_99;
      }
    }
    if (v57[2] != v51) {
      goto LABEL_66;
    }
LABEL_77:
    unint64_t v61 = *(char **)v50;
    if (*(void *)v50)
    {
      *(void *)(v50 + 8) = v61;
      operator delete(v61);
      uint64_t v47 = (char *)a1[13];
      uint64_t v44 = a1[16];
      std::string::size_type v43 = a1[17];
      long long v45 = (void *)((char *)v43 - 1);
    }
    char v62 = (char *)a1[14];
    a1[17] = v45;
    if (v62 == v47) {
      uint64_t v63 = 0;
    }
    else {
      uint64_t v63 = 16 * (v62 - v47) - 1;
    }
    if (v63 - ((unint64_t)v43 + (unint64_t)v44) + 1 >= 0x100)
    {
      operator delete(*((void **)v62 - 1));
      --a1[14];
      long long v45 = a1[17];
    }
    std::string::size_type v43 = v45;
  }
  while (v45);
LABEL_85:
  sub_9E4D28((uint64_t)v89, *a1);
  *(void *)&long long v90 = -1;
  *((void *)&v90 + 1) = -1;
  v89[1] = (void *)-1;
  long long v64 = v90;
  *(_OWORD *)a1 = *(_OWORD *)v89;
  *((_OWORD *)a1 + 1) = v64;
  char v65 = a1[4];
  if (v65)
  {
    a1[5] = v65;
    operator delete(v65);
    a1[4] = 0;
    a1[5] = 0;
    a1[6] = 0;
  }
  *((_OWORD *)a1 + 2) = *(_OWORD *)v91;
  a1[6] = v92;
  v91[1] = 0;
  uint64_t v92 = 0;
  v91[0] = 0;
  if (a1[10])
  {
    std::string::size_type v66 = a1[9];
    if (v66)
    {
      do
      {
        unsigned __int8 v67 = (void *)*v66;
        operator delete(v66);
        std::string::size_type v66 = v67;
      }
      while (v67);
    }
    a1[9] = 0;
    int64_t v68 = a1[8];
    if (v68)
    {
      for (uint64_t i = 0; i != v68; uint64_t i = (void *)((char *)i + 1))
        a1[7][(void)i] = 0;
    }
    a1[10] = 0;
  }
  size_t v70 = v93;
  unsigned int v93 = 0;
  unsigned __int8 v71 = a1[7];
  a1[7] = v70;
  if (v71) {
    operator delete(v71);
  }
  unint64_t v72 = (unint64_t)v94;
  unsigned __int8 v73 = __p;
  a1[9] = __p;
  a1[8] = (void *)v72;
  unsigned int v94 = 0;
  unsigned int v74 = v96;
  a1[10] = v96;
  *((_DWORD *)a1 + 22) = v97;
  if (v74)
  {
    unint64_t v75 = v73[1];
    if ((v72 & (v72 - 1)) != 0)
    {
      if (v75 >= v72) {
        v75 %= v72;
      }
    }
    else
    {
      v75 &= v72 - 1;
    }
    a1[7][v75] = a1 + 9;
    uint64_t __p = 0;
    unsigned int v96 = 0;
  }
  sub_9E62DC(a1 + 12, (uint64_t)v98);
  sub_9467EC((uint64_t)v98);
  uint64_t v81 = __p;
  if (__p)
  {
    do
    {
      uint64_t v82 = (void *)*v81;
      operator delete(v81);
      uint64_t v81 = v82;
    }
    while (v82);
  }
  unint64_t v83 = v93;
  unsigned int v93 = 0;
  if (v83) {
    operator delete(v83);
  }
  if (v91[0])
  {
    v91[1] = v91[0];
    operator delete(v91[0]);
  }
}

void sub_9E5730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_9E5780(void **a1)
{
  return a1;
}

void sub_9E57A8(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  char v4 = *(unsigned char **)(a1 + 32);
  uint64_t v3 = *(unsigned char **)(a1 + 40);
  int64_t v5 = v3 - v4;
  if (v3 == v4)
  {
    char v7 = 0;
    unint64_t v8 = *(void *)(a1 + 8);
    if (!v8) {
      return;
    }
    goto LABEL_6;
  }
  if (v5 < 0) {
    sub_2E00();
  }
  long long v6 = (uint64_t *)operator new(v3 - v4);
  *a2 = v6;
  char v7 = &v6[v5 >> 3];
  a2[2] = v7;
  memcpy(v6, v4, v5);
  a2[1] = v7;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
LABEL_6:
    unint64_t v9 = 0;
    unint64_t v10 = (void *)(*(void *)(**(void **)a1 + 32 * *(void *)(a1 + 24)) + 104 * *(void *)(a1 + 16) + 8);
    size_t v32 = v10;
    do
    {
      while (1)
      {
        uint64_t v11 = *v10 + 5704 * v9;
        unint64_t v12 = (unint64_t)a2[2];
        if ((unint64_t)v7 >= v12) {
          break;
        }
        *v7++ = v11;
        a2[1] = v7;
        if (++v9 >= v8) {
          return;
        }
      }
      char v13 = *a2;
      uint64_t v14 = (char *)v7 - (char *)*a2;
      uint64_t v15 = v14 >> 3;
      unint64_t v16 = (v14 >> 3) + 1;
      if (v16 >> 61) {
        sub_2E00();
      }
      uint64_t v17 = v12 - (void)v13;
      if (v17 >> 2 > v16) {
        unint64_t v16 = v17 >> 2;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 61) {
          sub_188D718();
        }
        uint64_t v19 = operator new(8 * v18);
        BOOL v20 = (uint64_t *)&v19[8 * v15];
        uint64_t *v20 = v11;
        uint64_t v21 = (uint64_t)(v20 + 1);
        if (v7 != v13)
        {
LABEL_23:
          unint64_t v22 = (char *)(v7 - 1) - (char *)v13;
          if (v22 < 0x168)
          {
            uint64_t v23 = v7;
            goto LABEL_25;
          }
          if (&v19[v14 - 8 - (v22 & 0xFFFFFFFFFFFFFFF8)] > &v19[v14 - 8])
          {
            uint64_t v23 = v7;
            goto LABEL_25;
          }
          if ((uint64_t *)((char *)v7 - (v22 & 0xFFFFFFFFFFFFFFF8) - 8) > v7 - 1)
          {
            uint64_t v23 = v7;
            goto LABEL_25;
          }
          if ((unint64_t)((char *)v7 - v19 - v14) < 0x20)
          {
            uint64_t v23 = v7;
            goto LABEL_25;
          }
          uint64_t v25 = (v22 >> 3) + 1;
          uint64_t v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v23 = &v7[v26 / 0xFFFFFFFFFFFFFFF8];
          BOOL v20 = (uint64_t *)((char *)v20 - v26);
          int64_t v27 = &v19[8 * v15 - 16];
          uint64_t v28 = v7 - 2;
          uint64_t v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v30 = *(_OWORD *)v28;
            *(v27 - 1) = *((_OWORD *)v28 - 1);
            *int64_t v27 = v30;
            v27 -= 2;
            v28 -= 4;
            v29 -= 4;
          }
          while (v29);
          if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_25:
              uint64_t v24 = *--v23;
              *--BOOL v20 = v24;
            }
            while (v23 != v13);
          }
          char v7 = *a2;
          *a2 = v20;
          a2[1] = (uint64_t *)v21;
          a2[2] = (uint64_t *)&v19[8 * v18];
          if (!v7) {
            goto LABEL_20;
          }
LABEL_19:
          operator delete(v7);
          unint64_t v8 = *(void *)(a1 + 8);
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v19 = 0;
        BOOL v20 = (uint64_t *)(8 * v15);
        *(void *)(8 * v15) = v11;
        uint64_t v21 = 8 * v15 + 8;
        if (v7 != v13) {
          goto LABEL_23;
        }
      }
      *a2 = v20;
      a2[1] = (uint64_t *)v21;
      a2[2] = (uint64_t *)&v19[8 * v18];
      if (v7) {
        goto LABEL_19;
      }
LABEL_20:
      unint64_t v10 = v32;
      a2[1] = (uint64_t *)v21;
      ++v9;
      char v7 = (uint64_t *)v21;
    }
    while (v9 < v8);
  }
}

void sub_9E5A64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_9E5A94(uint64_t a1@<X0>, unint64_t a2@<X1>, char **a3@<X8>)
{
  unint64_t v3 = a2;
  int64_t v5 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v62 = *(void *)(a1 + 16);
  uint64_t v61 = *(void *)(**(void **)a1 + 32 * *(void *)(a1 + 24));
  uint64_t v6 = v61 + 104 * v62;
  uint64_t v9 = *(void *)(v6 + 8);
  unint64_t v8 = (uint64_t *)(v6 + 8);
  uint64_t v7 = v9;
  unint64_t v10 = v8 + 1;
  unint64_t v11 = *(void *)(a1 + 8) + 1;
  if (v11 < 0xBC7FD20AC579B779 * ((v8[1] - v9) >> 3))
  {
    unint64_t v12 = 0;
    while (1)
    {
      char v13 = *a3;
      uint64_t v14 = v12 - *a3;
      uint64_t v15 = v14 >> 3;
      if (v14 >> 3 >= v3)
      {
        int64_t v5 = v12;
        goto LABEL_36;
      }
      uint64_t v16 = v7 + 5704 * v11;
      unint64_t v17 = (unint64_t)a3[2];
      if ((unint64_t)v12 >= v17) {
        break;
      }
      *(void *)unint64_t v12 = v16;
      int64_t v5 = v12 + 8;
      unint64_t v3 = a2;
LABEL_4:
      a3[1] = v5;
      ++v11;
      uint64_t v7 = *v8;
      unint64_t v12 = v5;
      if (v11 >= 0xBC7FD20AC579B779 * ((*v10 - *v8) >> 3)) {
        goto LABEL_36;
      }
    }
    unint64_t v18 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v19 = v17 - (void)v13;
    if (v19 >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 >> 61) {
        sub_188D718();
      }
      uint64_t v21 = operator new(8 * v20);
      unint64_t v22 = &v21[8 * v15];
      *(void *)unint64_t v22 = v16;
      int64_t v5 = v22 + 8;
      if (v12 != v13)
      {
LABEL_16:
        unint64_t v23 = v12 - 8 - v13;
        unint64_t v3 = a2;
        if (v23 >= 0x168)
        {
          if (&v21[v14 - 8 - (v23 & 0xFFFFFFFFFFFFFFF8)] > &v21[v14 - 8])
          {
            uint64_t v24 = v12;
          }
          else if (&v12[-(v23 & 0xFFFFFFFFFFFFFFF8) - 8] > v12 - 8)
          {
            uint64_t v24 = v12;
          }
          else if ((unint64_t)(v12 - v21 - v14) >= 0x20)
          {
            uint64_t v26 = (v23 >> 3) + 1;
            uint64_t v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v24 = &v12[-v27];
            v22 -= v27;
            uint64_t v28 = &v21[8 * v15 - 16];
            uint64_t v29 = v12 - 16;
            uint64_t v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v31 = *(_OWORD *)v29;
              *(v28 - 1) = *((_OWORD *)v29 - 1);
              *uint64_t v28 = v31;
              v28 -= 2;
              v29 -= 32;
              v30 -= 4;
            }
            while (v30);
            if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_19:
              unint64_t v12 = *a3;
              *a3 = v22;
              a3[1] = v5;
              a3[2] = &v21[8 * v20];
              if (!v12)
              {
LABEL_21:
                unint64_t v10 = v8 + 1;
                goto LABEL_4;
              }
LABEL_20:
              operator delete(v12);
              goto LABEL_21;
            }
          }
          else
          {
            uint64_t v24 = v12;
          }
        }
        else
        {
          uint64_t v24 = v12;
        }
        do
        {
          uint64_t v25 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v22 - 1) = v25;
          v22 -= 8;
        }
        while (v24 != v13);
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v21 = 0;
      unint64_t v22 = (char *)(8 * v15);
      *(void *)(8 * v15) = v16;
      int64_t v5 = (char *)(8 * v15 + 8);
      if (v12 != v13) {
        goto LABEL_16;
      }
    }
    unint64_t v3 = a2;
    *a3 = v22;
    a3[1] = v5;
    a3[2] = &v21[8 * v20];
    if (!v12) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_36:
  uint64_t v32 = *(void *)(v61 + 104 * v62 + 56);
  if (v32 != -1)
  {
    unint64_t v33 = *a3;
    while (v3 > (v5 - v33) >> 3)
    {
      unint64_t v34 = (uint64_t *)(**(void **)a1 + 32 * v32);
      uint64_t v36 = *v34;
      uint64_t v35 = v34[1];
      if (*v34 == v35) {
        goto LABEL_84;
      }
      uint64_t v37 = v35 - v36;
      if (v35 - v36 == 104)
      {
        unint64_t v38 = 0;
      }
      else
      {
        uint64_t v39 = 0;
        while (*(_DWORD *)(v36 + v39))
        {
          v39 += 104;
          if (v36 + v39 == v35)
          {
            uint64_t v39 = v35 - v36;
            break;
          }
        }
        unint64_t v38 = 0x4EC4EC4EC4EC4EC5 * (v39 >> 3);
      }
      if (0x4EC4EC4EC4EC4EC5 * (v37 >> 3) <= v38) {
LABEL_84:
      }
        sub_66748();
      unint64_t v64 = v38;
      uint64_t v40 = v36 + 104 * v38;
      uint64_t v42 = *(void *)(v40 + 8);
      uint64_t v41 = *(void *)(v40 + 16);
      if (v42 != v41)
      {
        do
        {
          unint64_t v45 = (unint64_t)a3[2];
          if ((unint64_t)v5 < v45)
          {
            *(void *)int64_t v5 = v42;
            uint64_t v43 = (uint64_t)(v5 + 8);
          }
          else
          {
            uint64_t v46 = (v5 - v33) >> 3;
            unint64_t v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v48 = v45 - (void)v33;
            if (v48 >> 2 > v47) {
              unint64_t v47 = v48 >> 2;
            }
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v49 = v47;
            }
            if (v49)
            {
              if (v49 >> 61) {
                sub_188D718();
              }
              uint64_t v50 = operator new(8 * v49);
              unint64_t v51 = &v50[8 * v46];
              *(void *)unint64_t v51 = v42;
              uint64_t v43 = (uint64_t)(v51 + 8);
              if (v5 != v33)
              {
LABEL_66:
                unint64_t v52 = v5 - 8 - v33;
                if (v52 < 0x168
                  || &v50[v5 - v33 - 8 - (v52 & 0xFFFFFFFFFFFFFFF8)] > &v50[v5 - v33 - 8]
                  || &v5[-(v52 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8
                  || (unint64_t)(v33 - v50) < 0x20)
                {
                  int8x8_t v53 = v5;
                  unint64_t v3 = a2;
                }
                else
                {
                  uint64_t v55 = (v52 >> 3) + 1;
                  uint64_t v56 = 8 * (v55 & 0x3FFFFFFFFFFFFFFCLL);
                  int8x8_t v53 = &v5[-v56];
                  v51 -= v56;
                  char v57 = &v50[8 * v46 - 16];
                  uint64_t v58 = (long long *)(v5 - 16);
                  uint64_t v59 = v55 & 0x3FFFFFFFFFFFFFFCLL;
                  unint64_t v3 = a2;
                  do
                  {
                    long long v60 = *v58;
                    *(v57 - 1) = *(v58 - 1);
                    *char v57 = v60;
                    v57 -= 2;
                    v58 -= 2;
                    v59 -= 4;
                  }
                  while (v59);
                  if (v55 == (v55 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_69:
                    unint64_t v33 = *a3;
                    *a3 = v51;
                    a3[1] = (char *)v43;
                    a3[2] = &v50[8 * v49];
                    if (!v33) {
                      goto LABEL_52;
                    }
LABEL_73:
                    operator delete(v33);
                    goto LABEL_52;
                  }
                }
                do
                {
                  uint64_t v54 = *((void *)v53 - 1);
                  v53 -= 8;
                  *((void *)v51 - 1) = v54;
                  v51 -= 8;
                }
                while (v53 != v33);
                goto LABEL_69;
              }
            }
            else
            {
              uint64_t v50 = 0;
              unint64_t v51 = (char *)(8 * v46);
              *(void *)(8 * v46) = v42;
              uint64_t v43 = 8 * v46 + 8;
              if (v5 != v33) {
                goto LABEL_66;
              }
            }
            unint64_t v3 = a2;
            *a3 = v51;
            a3[1] = (char *)v43;
            a3[2] = &v50[8 * v49];
            if (v33) {
              goto LABEL_73;
            }
          }
LABEL_52:
          a3[1] = (char *)v43;
          unint64_t v33 = *a3;
          v42 += 5704;
          BOOL v44 = v3 <= (v43 - (uint64_t)*a3) >> 3 || v42 == v41;
          int64_t v5 = (char *)v43;
        }
        while (!v44);
      }
      uint64_t v32 = *(void *)(v36 + 104 * v64 + 56);
      if (v32 == -1) {
        return;
      }
    }
  }
}

void sub_9E5FEC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9E6018(uint64_t a1)
{
  return *(void *)(*(void *)(**(void **)a1 + 32 * *(void *)(a1 + 24)) + 104 * *(void *)(a1 + 16) + 8)
       + 5704 * *(void *)(a1 + 8);
}

BOOL sub_9E6044(void *a1, void *a2)
{
  return *a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2] || a1[3] != a2[3];
}

void sub_9E6090(void **a1, int a2)
{
  sub_9E4F38(a1);
  while (1)
  {
    sub_9E4D28((uint64_t)v13, *a1);
    memset(&v13[1], 255, 24);
    if (*a1 != (void *)v13[0])
    {
      uint64_t v4 = (uint64_t)a1[1];
      uint64_t v5 = (uint64_t)a1[2];
      goto LABEL_9;
    }
    uint64_t v4 = (uint64_t)a1[1];
    uint64_t v5 = (uint64_t)a1[2];
    if (v4 == -1) {
      break;
    }
LABEL_9:
    int v6 = *(_DWORD *)(*(void *)(*(void *)(**a1 + 32 * (void)a1[3]) + 104 * v5 + 8) + 5704 * v4);
    sub_9467EC((uint64_t)v18);
    uint64_t v7 = __p;
    if (__p)
    {
      do
      {
        unint64_t v8 = (void *)*v7;
        operator delete(v7);
        uint64_t v7 = v8;
      }
      while (v8);
    }
    uint64_t v9 = v16;
    uint64_t v16 = 0;
    if (v9) {
      operator delete(v9);
    }
    if (v14)
    {
      uint64_t v15 = v14;
      operator delete(v14);
    }
    if (v6 == a2) {
      return;
    }
    sub_9E4F38(a1);
  }
  if (v5 != -1)
  {
    uint64_t v4 = -1;
    goto LABEL_9;
  }
  if (a1[3] != (void *)-1)
  {
    uint64_t v4 = -1;
    uint64_t v5 = -1;
    goto LABEL_9;
  }
  sub_9467EC((uint64_t)v18);
  unint64_t v10 = __p;
  if (__p)
  {
    do
    {
      unint64_t v11 = (void *)*v10;
      operator delete(v10);
      unint64_t v10 = v11;
    }
    while (v11);
  }
  unint64_t v12 = v16;
  uint64_t v16 = 0;
  if (v12) {
    operator delete(v12);
  }
  if (v14)
  {
    uint64_t v15 = v14;
    operator delete(v14);
  }
}

uint64_t sub_9E6208(uint64_t a1, void *a2)
{
  uint64_t result = sub_9E4D28(a1, a2);
  *(void *)(result + 144) = a2;
  return result;
}

uint64_t sub_9E6230(uint64_t a1)
{
  return *(void *)(*(void *)(**(void **)(a1 + 144) + 32 * *(void *)(a1 + 24))
                   + 104 * *(void *)(a1 + 16)
                   + 8)
       + 5704 * *(void *)(a1 + 8);
}

uint64_t sub_9E6260@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = *(void **)(a1 + 144);
  uint64_t result = sub_9E4D28((uint64_t)a2, v3);
  a2[18] = v3;
  a2[1] = -1;
  a2[2] = -1;
  a2[3] = -1;
  return result;
}

uint64_t sub_9E62A4@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_9E4D28((uint64_t)a2, *a1);
  a2[2] = -1;
  a2[3] = -1;
  a2[1] = -1;
  return result;
}

double sub_9E62DC(void *a1, uint64_t a2)
{
  uint64_t v4 = (void **)a1[1];
  uint64_t v5 = (void **)a1[2];
  if (v5 == v4)
  {
    a1[5] = 0;
    unint64_t v13 = 0;
  }
  else
  {
    unint64_t v6 = a1[4];
    uint64_t v7 = &v4[v6 >> 7];
    uint64_t v8 = (uint64_t)*v7;
    uint64_t v9 = (uint64_t)*v7 + 32 * (v6 & 0x7F);
    uint64_t v10 = *(uint64_t *)((char *)v4 + (((a1[5] + v6) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[5] + v6) & 0x7F);
    if (v9 != v10)
    {
      do
      {
        unint64_t v11 = *(void **)v9;
        if (*(void *)v9)
        {
          *(void *)(v9 + 8) = v11;
          operator delete(v11);
          uint64_t v8 = (uint64_t)*v7;
        }
        v9 += 32;
        if (v9 - v8 == 4096)
        {
          uint64_t v12 = (uint64_t)v7[1];
          ++v7;
          uint64_t v8 = v12;
          uint64_t v9 = v12;
        }
      }
      while (v9 != v10);
      uint64_t v4 = (void **)a1[1];
      uint64_t v5 = (void **)a1[2];
    }
    a1[5] = 0;
    unint64_t v13 = (char *)v5 - (char *)v4;
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x11)
    {
      do
      {
        operator delete(*v4);
        uint64_t v14 = a1[2];
        uint64_t v4 = (void **)(a1[1] + 8);
        a1[1] = v4;
        unint64_t v13 = v14 - (void)v4;
      }
      while (v13 > 0x10);
    }
  }
  if (v13 >> 3 == 1)
  {
    uint64_t v15 = 64;
  }
  else
  {
    if (v13 >> 3 != 2) {
      goto LABEL_18;
    }
    uint64_t v15 = 128;
  }
  a1[4] = v15;
LABEL_18:
  sub_9E646C(a1);
  uint64_t v17 = a1[1];
  uint64_t v16 = a1[2];
  if (v16 != v17) {
    a1[2] = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_9E6560((uint64_t)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  uint64_t v18 = *(void *)(a2 + 32);
  a1[3] = *(void *)(a2 + 24);
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  a1[4] = v18;
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_9E646C(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    unint64_t v3 = a1[4];
    uint64_t v4 = (void **)a1[1];
    if (v3 >= 0x80)
    {
      operator delete(*v4);
      uint64_t v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      uint64_t v2 = a1[5];
      unint64_t v3 = a1[4] - 128;
      a1[4] = v3;
    }
    uint64_t v5 = (void **)a1[2];
    if (v5 == v4) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = 16 * ((char *)v5 - (char *)v4) - 1;
    }
    if (v6 - (v2 + v3) >= 0x80)
    {
      operator delete(*(v5 - 1));
      a1[2] -= 8;
    }
    uint64_t v7 = (uint64_t)a1;
  }
  else
  {
    uint64_t v8 = a1[2];
    if (v8 != a1[1])
    {
      do
      {
        operator delete(*(void **)(v8 - 8));
        uint64_t v9 = a1[1];
        uint64_t v8 = a1[2] - 8;
        a1[2] = v8;
      }
      while (v8 != v9);
    }
    a1[4] = 0;
    uint64_t v7 = (uint64_t)a1;
  }
  sub_9E6560(v7);
}

void sub_9E6560(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 16);
  uint64_t v2 = *(void **)a1;
  unint64_t v3 = *(char **)(a1 + 8);
  int64_t v4 = v1 - v3;
  unint64_t v5 = (v1 - v3) >> 3;
  if (v5 >= (uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 3) {
    return;
  }
  if (v1 == v3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v5;
    goto LABEL_13;
  }
  if (v4 < 0) {
    sub_188D718();
  }
  uint64_t v7 = operator new(v1 - v3);
  uint64_t v8 = (uint64_t)&v7[v5];
  if ((unint64_t)(v4 - 8) < 0x18)
  {
    uint64_t v9 = v7;
    do
    {
LABEL_12:
      uint64_t v17 = *(void *)v3;
      v3 += 8;
      *v9++ = v17;
    }
    while (v9 != (void *)v8);
    goto LABEL_13;
  }
  uint64_t v9 = v7;
  if ((unint64_t)((char *)v7 - v3) < 0x20) {
    goto LABEL_12;
  }
  uint64_t v10 = 0;
  unint64_t v11 = ((unint64_t)(v4 - 8) >> 3) + 1;
  uint64_t v12 = v11 & 0x3FFFFFFFFFFFFFFCLL;
  uint64_t v9 = &v7[v12];
  unint64_t v13 = &v3[v12 * 8];
  uint64_t v14 = v11 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t v15 = &v7[v10];
    long long v16 = *(_OWORD *)&v3[v10 * 8 + 16];
    *uint64_t v15 = *(_OWORD *)&v3[v10 * 8];
    v15[1] = v16;
    v10 += 4;
    v14 -= 4;
  }
  while (v14);
  unint64_t v3 = v13;
  if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_12;
  }
LABEL_13:
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v8;
  if (v2)
  {
    operator delete(v2);
  }
}

uint64_t sub_9E6694(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = 16 * (v7 - v6) - 1;
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  if (v8 == a1[5] + a1[4])
  {
    sub_9E680C((uint64_t)a1);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
  }
  if (v7 == v6)
  {
    uint64_t v10 = 0;
    *(void *)&def_332C = 0;
    *(void *)dword_8 = 0;
    *(void *)dword_10 = 0;
    unint64_t v11 = *(const void **)a2;
    int64_t v12 = *(void *)(a2 + 8) - *(void *)a2;
    if (!v12) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v9 = a1[5] + a1[4];
    uint64_t v10 = (void *)(*(void *)(v6 + ((v9 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v9 & 0x7F));
    *uint64_t v10 = 0;
    v10[1] = 0;
    v10[2] = 0;
    unint64_t v11 = *(const void **)a2;
    int64_t v12 = *(void *)(a2 + 8) - *(void *)a2;
    if (!v12) {
      goto LABEL_11;
    }
  }
  if (v12 < 0) {
    sub_2E00();
  }
  unint64_t v13 = (char *)operator new(v12);
  *uint64_t v10 = v13;
  v10[1] = v13;
  uint64_t v14 = &v13[8 * (v12 >> 3)];
  v10[2] = v14;
  memcpy(v13, v11, v12);
  v10[1] = v14;
LABEL_11:
  void v10[3] = *a3;
  uint64_t v15 = a1[4];
  uint64_t v16 = a1[5] + 1;
  a1[5] = v16;
  unint64_t v17 = v15 + v16;
  uint64_t v18 = a1[1];
  uint64_t v19 = (void *)(v18 + 8 * (v17 >> 7));
  uint64_t v20 = *v19 + 32 * (v17 & 0x7F);
  if (a1[2] == v18) {
    uint64_t v20 = 0;
  }
  if (v20 == *v19) {
    return *(v19 - 1) + 4064;
  }
  else {
    return v20 - 32;
  }
}

void sub_9E67F0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_9E680C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)unint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    unint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        unint64_t v34 = (char *)operator new(8 * v31);
        uint64_t v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        unint64_t v5 = v35;
        if (!v37)
        {
          unint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            unsigned int v74 = &v34[8 * v32];
            uint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v40 = &v35[v76];
              v7 += v76;
              uint64_t v77 = (long long *)(v6 + 3);
              uint64_t v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *uint64_t v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            uint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    unint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      unsigned int v91 = operator new(0x1000uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    unsigned int v91 = operator new(0x1000uLL);
    sub_224F8((void **)a1, &v91);
    uint64_t v41 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    unint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        unint64_t v34 = (char *)operator new(8 * v42);
        uint64_t v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        unint64_t v5 = v35;
        if (!v37)
        {
          unint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            unint64_t v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v47 = &v35[v84];
              v7 += v84;
              uint64_t v85 = (long long *)(v41 + 3);
              BOOL v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *BOOL v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unint64_t v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          unint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  uint64_t v26 = operator new(0x1000uLL);
  uint64_t v27 = &v25[8 * v21];
  uint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      unint64_t v49 = (char *)operator new(8 * v48);
      uint64_t v27 = &v49[8 * (v48 >> 2)];
      uint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)uint64_t v27 = v90;
      uint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)uint64_t v27 = v26;
      uint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          long long v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          int8x8_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v53;
          if (!v37)
          {
            uint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            unint64_t v64 = &v60[8 * v61];
            char v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            unint64_t v64 = &v60[8 * v61];
            char v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v64 = &v53[v68];
            char v65 = &v27[v68];
            unsigned int v69 = (long long *)(v27 + 16);
            size_t v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)size_t v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)unint64_t v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          char v57 = &v29[8 * (v56 >> 1)];
          int8x8_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        int8x8_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      unint64_t v51 = v53 - 8;
      uint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)uint64_t v27 = v26;
  uint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  unint64_t v51 = v27;
LABEL_46:
  unint64_t v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_9E6D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_9E6D98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_9E6DAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_9E6DC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9E6DDC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  uint64_t v12 = 0;
  uint64_t v13 = operator new(0x28uLL);
  long long v14 = xmmword_20B8FD0;
  strcpy((char *)v13, "TransitStepPaymentMethodIdAnnotation");
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v4 = sub_374CDC(a2, (uint64_t)&v13, (uint64_t *)&v10);
  uint64_t __p = operator new(0x20uLL);
  long long v16 = xmmword_20B91B0;
  strcpy((char *)__p, "use_stop_parents_as_fallback");
  BOOL v5 = sub_29D62C(v4, (uint64_t)&__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = (void **)v10;
  if (v10)
  {
    uint64_t v7 = v11;
    uint64_t v8 = v10;
    if (v11 != v10)
    {
      do
      {
        if (*((char *)v7 - 1) < 0) {
          operator delete(*(v7 - 3));
        }
        v7 -= 3;
      }
      while (v7 != v6);
      uint64_t v8 = v10;
    }
    uint64_t v11 = v6;
    operator delete(v8);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13);
  }
  return a1;
}

void sub_9E6F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_9E6F98(void **a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a2;
  BOOL v3 = *(void **)(a2 + 8);
  if (*(void **)a2 != v3)
  {
    BOOL v5 = (uint64_t *)(a2 + 24);
    do
    {
      sub_9E6FEC(a1, v2, v5);
      v2 += 390;
    }
    while (v2 != v3);
  }
}

void sub_9E6FEC(void **a1, void *a2, uint64_t *a3)
{
  sub_9E6208((uint64_t)v21, a2);
  while (1)
  {
    sub_9E6260((uint64_t)v21, &v14);
    BOOL v5 = sub_9E6044(v21, &v14);
    sub_9467EC((uint64_t)&v20);
    uint64_t v6 = __p;
    if (__p)
    {
      do
      {
        uint64_t v7 = (void *)*v6;
        operator delete(v6);
        uint64_t v6 = v7;
      }
      while (v7);
    }
    uint64_t v8 = v18;
    uint64_t v18 = 0;
    if (v8) {
      operator delete(v8);
    }
    if (v16)
    {
      uint64_t v17 = v16;
      operator delete(v16);
    }
    if (!v5) {
      break;
    }
    if (*(_DWORD *)sub_9E6230((uint64_t)v21) == 2)
    {
      unint64_t v9 = (void *)sub_9E6230((uint64_t)v21);
      sub_9E71C4(a1, v21, a3, (uint64_t)&v14);
      uint64_t v10 = (void *)v9[710];
      if (v10)
      {
        v9[711] = v10;
        operator delete(v10);
        v9[710] = 0;
        v9[711] = 0;
        v9[712] = 0;
      }
      *((_OWORD *)v9 + 355) = v14;
      v9[712] = v15;
    }
    sub_9E5780(v21);
  }
  sub_9467EC((uint64_t)&v26);
  uint64_t v11 = v25;
  if (v25)
  {
    do
    {
      uint64_t v12 = (void *)*v11;
      operator delete(v11);
      uint64_t v11 = v12;
    }
    while (v12);
  }
  uint64_t v13 = v24;
  unint64_t v24 = 0;
  if (v13) {
    operator delete(v13);
  }
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
}

void sub_9E7158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_9E716C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_9E7180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_9E719C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_9E71B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_9E71C4(void **a1@<X0>, void **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_9E6230((uint64_t)a2);
  if (!*(unsigned char *)(v8 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  unint64_t v9 = *(void *)(v8 + 752);
  uint64_t v10 = a3[9];
  if (0x66FD0EB66FD0EB67 * ((a3[10] - v10) >> 3) <= v9) {
    sub_66748();
  }
  unint64_t v11 = *(void *)(sub_9E6230((uint64_t)a2) + 48);
  sub_9E6090(a2, 4);
  unint64_t v12 = *(void *)(sub_9E6230((uint64_t)a2) + 48);
  uint64_t v13 = sub_3755E4(*a1);
  sub_9E78D8(v13, (unint64_t *)(v10 + 696 * v9 + 56), a4);
  long long v14 = *(int8x16_t **)(a4 + 8);
  unint64_t v15 = 126 - 2 * __clz(((uint64_t)v14->i64 - *(void *)a4) >> 3);
  if (v14 == *(int8x16_t **)a4) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  uint64_t v79 = (int8x16_t **)a4;
  sub_9A4F6C(*(int8x16_t **)a4, v14, (uint64_t)&v83, v16, 1);
  sub_9E79C8((uint64_t)a1, v11, a3, &v83);
  unint64_t v78 = v12;
  unint64_t v17 = 126 - 2 * __clz(((char *)v84 - (char *)v83) >> 3);
  if (v84 == v83) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v17;
  }
  sub_9A4F6C(v83, v84, (uint64_t)&__p, v18, 1);
  uint64_t v19 = 0;
  uint64_t __p = 0;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  uint64_t v20 = *(int8x16_t **)a4;
  uint64_t v21 = *(int8x16_t **)(a4 + 8);
  if (*(int8x16_t **)a4 != v21)
  {
    uint64_t v76 = a1;
    uint64_t v77 = a3;
    uint64_t v22 = v83;
    uint64_t v23 = v84;
    if (v83 != v84)
    {
      uint64_t v19 = 0;
      while (1)
      {
        unint64_t v24 = v20->u32[1] | ((unint64_t)v20->u32[0] << 32);
        unint64_t v25 = v22->u32[1] | ((unint64_t)v22->u32[0] << 32);
        if (v24 >= v25) {
          break;
        }
        uint64_t v20 = (int8x16_t *)((char *)v20 + 8);
        if (v20 == v21) {
          goto LABEL_49;
        }
LABEL_31:
        if (v22 == v23)
        {
LABEL_49:
          a4 = (uint64_t)v79;
          uint64_t v20 = *v79;
          goto LABEL_51;
        }
      }
      if (v25 < v24)
      {
LABEL_30:
        uint64_t v22 = (int8x16_t *)((char *)v22 + 8);
        if (v20 == v21) {
          goto LABEL_49;
        }
        goto LABEL_31;
      }
      if (v19 < v82)
      {
        *(void *)uint64_t v19 = v20->i64[0];
        uint64_t v26 = (uint64_t)(v19 + 8);
LABEL_29:
        uint64_t v81 = v26;
        uint64_t v20 = (int8x16_t *)((char *)v20 + 8);
        uint64_t v19 = (char *)v26;
        goto LABEL_30;
      }
      uint64_t v27 = (char *)__p;
      int64_t v28 = v19 - (unsigned char *)__p;
      uint64_t v29 = (v19 - (unsigned char *)__p) >> 3;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 61) {
LABEL_103:
      }
        sub_2E00();
      uint64_t v31 = v82 - (unsigned char *)__p;
      if ((v82 - (unsigned char *)__p) >> 2 > v30) {
        unint64_t v30 = v31 >> 2;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v30;
      }
      if (v32)
      {
        if (v32 >> 61) {
LABEL_104:
        }
          sub_188D718();
        uint64_t v33 = operator new(8 * v32);
        unint64_t v34 = &v33[8 * v29];
        *unint64_t v34 = v20->i64[0];
        uint64_t v26 = (uint64_t)(v34 + 1);
        if (v19 == v27)
        {
LABEL_27:
          uint64_t __p = v34;
          uint64_t v81 = v26;
          uint64_t v82 = &v33[8 * v32];
          if (!v19) {
            goto LABEL_29;
          }
LABEL_28:
          operator delete(v19);
          goto LABEL_29;
        }
      }
      else
      {
        uint64_t v33 = 0;
        unint64_t v34 = (void *)(8 * v29);
        *(void *)(8 * v29) = v20->i64[0];
        uint64_t v26 = 8 * v29 + 8;
        if (v19 == v27) {
          goto LABEL_27;
        }
      }
      unint64_t v35 = v19 - 8 - v27;
      if (v35 >= 0x168)
      {
        if (&v33[v28 - 8 - (v35 & 0xFFFFFFFFFFFFFFF8)] > &v33[v28 - 8])
        {
          uint64_t v36 = v19;
        }
        else if (&v19[-(v35 & 0xFFFFFFFFFFFFFFF8) - 8] > v19 - 8)
        {
          uint64_t v36 = v19;
        }
        else if ((unint64_t)(v19 - v33 - v28) >= 0x20)
        {
          uint64_t v38 = (v35 >> 3) + 1;
          uint64_t v39 = 8 * (v38 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v36 = &v19[-v39];
          unint64_t v34 = (void *)((char *)v34 - v39);
          uint64_t v40 = &v33[8 * v29 - 16];
          uint64_t v41 = v19 - 16;
          uint64_t v42 = v38 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v43 = *(_OWORD *)v41;
            *(v40 - 1) = *((_OWORD *)v41 - 1);
            *uint64_t v40 = v43;
            v40 -= 2;
            v41 -= 32;
            v42 -= 4;
          }
          while (v42);
          if (v38 == (v38 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_37:
            uint64_t v19 = (char *)__p;
            uint64_t __p = v34;
            uint64_t v81 = v26;
            uint64_t v82 = &v33[8 * v32];
            if (!v19) {
              goto LABEL_29;
            }
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t v36 = v19;
        }
      }
      else
      {
        uint64_t v36 = v19;
      }
      do
      {
        uint64_t v37 = *((void *)v36 - 1);
        v36 -= 8;
        *--unint64_t v34 = v37;
      }
      while (v36 != v27);
      goto LABEL_37;
    }
    a4 = (uint64_t)v79;
LABEL_51:
    a1 = v76;
    a3 = v77;
  }
  if (v20)
  {
    *(void *)(a4 + 8) = v20;
    operator delete(v20);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  int64_t v45 = v82;
  uint64_t v44 = v83;
  *(void *)a4 = __p;
  *(void *)(a4 + 8) = v19;
  *(void *)(a4 + 16) = v45;
  if (v44)
  {
    uint64_t v84 = v44;
    operator delete(v44);
  }
  sub_9E79C8((uint64_t)a1, v78, a3, &v83);
  unint64_t v46 = 126 - 2 * __clz(((char *)v84 - (char *)v83) >> 3);
  if (v84 == v83) {
    uint64_t v47 = 0;
  }
  else {
    uint64_t v47 = v46;
  }
  sub_9A4F6C(v83, v84, (uint64_t)&__p, v47, 1);
  unint64_t v48 = 0;
  uint64_t __p = 0;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  unint64_t v49 = *(int8x16_t **)a4;
  uint64_t v50 = *(int8x16_t **)(a4 + 8);
  if (*(int8x16_t **)a4 != v50)
  {
    unint64_t v51 = v83;
    unint64_t v52 = v84;
    if (v83 != v84)
    {
      unint64_t v48 = 0;
      while (1)
      {
        unint64_t v53 = v49->u32[1] | ((unint64_t)v49->u32[0] << 32);
        unint64_t v54 = v51->u32[1] | ((unint64_t)v51->u32[0] << 32);
        if (v53 >= v54) {
          break;
        }
        unint64_t v49 = (int8x16_t *)((char *)v49 + 8);
        if (v49 == v50) {
          goto LABEL_96;
        }
LABEL_84:
        if (v51 == v52)
        {
LABEL_96:
          unint64_t v49 = *(int8x16_t **)a4;
          goto LABEL_97;
        }
      }
      if (v54 < v53)
      {
LABEL_83:
        unint64_t v51 = (int8x16_t *)((char *)v51 + 8);
        if (v49 == v50) {
          goto LABEL_96;
        }
        goto LABEL_84;
      }
      if (v48 < v82)
      {
        *(void *)unint64_t v48 = v49->i64[0];
        uint64_t v55 = (uint64_t)(v48 + 8);
LABEL_82:
        uint64_t v81 = v55;
        unint64_t v49 = (int8x16_t *)((char *)v49 + 8);
        unint64_t v48 = (char *)v55;
        goto LABEL_83;
      }
      unint64_t v56 = (char *)__p;
      int64_t v57 = v48 - (unsigned char *)__p;
      uint64_t v58 = (v48 - (unsigned char *)__p) >> 3;
      unint64_t v59 = v58 + 1;
      if ((unint64_t)(v58 + 1) >> 61) {
        goto LABEL_103;
      }
      uint64_t v60 = v82 - (unsigned char *)__p;
      if ((v82 - (unsigned char *)__p) >> 2 > v59) {
        unint64_t v59 = v60 >> 2;
      }
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v61 = v59;
      }
      if (v61)
      {
        if (v61 >> 61) {
          goto LABEL_104;
        }
        int64_t v62 = operator new(8 * v61);
        unint64_t v63 = &v62[8 * v58];
        *unint64_t v63 = v49->i64[0];
        uint64_t v55 = (uint64_t)(v63 + 1);
        if (v48 != v56)
        {
LABEL_77:
          unint64_t v64 = v48 - 8 - v56;
          if (v64 < 0x168
            || &v62[v57 - 8 - (v64 & 0xFFFFFFFFFFFFFFF8)] > &v62[v57 - 8]
            || &v48[-(v64 & 0xFFFFFFFFFFFFFFF8) - 8] > v48 - 8
            || (unint64_t)(v48 - v62 - v57) < 0x20)
          {
            char v65 = v48;
            a4 = (uint64_t)v79;
          }
          else
          {
            uint64_t v67 = (v64 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            char v65 = &v48[-v68];
            unint64_t v63 = (void *)((char *)v63 - v68);
            unsigned int v69 = &v62[8 * v58 - 16];
            size_t v70 = v48 - 16;
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *(_OWORD *)v70;
              *(v69 - 1) = *((_OWORD *)v70 - 1);
              _OWORD *v69 = v72;
              v69 -= 2;
              v70 -= 32;
              v71 -= 4;
            }
            while (v71);
            a4 = (uint64_t)v79;
            if (v67 == (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_80:
              unint64_t v48 = (char *)__p;
              uint64_t __p = v63;
              uint64_t v81 = v55;
              uint64_t v82 = &v62[8 * v61];
              if (!v48) {
                goto LABEL_82;
              }
LABEL_81:
              operator delete(v48);
              goto LABEL_82;
            }
          }
          do
          {
            uint64_t v66 = *((void *)v65 - 1);
            v65 -= 8;
            *--unint64_t v63 = v66;
          }
          while (v65 != v56);
          goto LABEL_80;
        }
      }
      else
      {
        int64_t v62 = 0;
        unint64_t v63 = (void *)(8 * v58);
        *(void *)(8 * v58) = v49->i64[0];
        uint64_t v55 = 8 * v58 + 8;
        if (v48 != v56) {
          goto LABEL_77;
        }
      }
      a4 = (uint64_t)v79;
      uint64_t __p = v63;
      uint64_t v81 = v55;
      uint64_t v82 = &v62[8 * v61];
      if (!v48) {
        goto LABEL_82;
      }
      goto LABEL_81;
    }
  }
LABEL_97:
  if (v49)
  {
    *(void *)(a4 + 8) = v49;
    operator delete(v49);
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  unsigned int v74 = v82;
  uint64_t v73 = v83;
  *(void *)a4 = __p;
  *(void *)(a4 + 8) = v48;
  *(void *)(a4 + 16) = v74;
  if (v73)
  {
    uint64_t v84 = v73;
    operator delete(v73);
  }
}

void sub_9E782C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v18 = *(void **)a12;
  if (!*(void *)a12) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(a12 + 8) = v18;
  operator delete(v18);
  _Unwind_Resume(exception_object);
}

int *sub_9E78D8@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_8DFD1C(a1, *a2, 0, "line");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x51u && (uint64_t v7 = v6[40]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    unint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    long long v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (double result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          double result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_9E79AC(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_9E79C8@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = sub_375500(*(void **)a1);
  uint64_t v9 = *a3;
  if (0xCF3CF3CF3CF3CF3DLL * ((a3[1] - *a3) >> 3) <= a2) {
    sub_66748();
  }
  uint64_t v10 = v8;
  sub_9E7BC4(v8, (unint64_t *)(v9 + 168 * a2 + 96), (uint64_t)a4);
  if (*(unsigned char *)(a1 + 8))
  {
    if (*a4 == a4[1])
    {
      unint64_t v12 = *(void *)(v9 + 168 * a2 + 104);
      if (v12 != -1)
      {
        uint64_t v13 = a3[3];
        if (0x8E38E38E38E38E39 * ((a3[4] - v13) >> 4) <= v12) {
          sub_66748();
        }
        sub_9E7CB4(v10, (unint64_t *)(v13 + 144 * v12 + 96), (uint64_t)v19);
        long long v14 = (void *)*a4;
        if (*a4)
        {
          a4[1] = v14;
          operator delete(v14);
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
        }
        uint64_t v15 = *(void *)v19;
        *a4 = *(void *)v19;
        double result = *(double *)&v19[8];
        *(_OWORD *)(a4 + 1) = *(_OWORD *)&v19[8];
        if (v15 == *(void *)&result)
        {
          unint64_t v16 = *(void *)(v13 + 144 * v12 + 104);
          if (v16 != -1)
          {
            uint64_t v17 = a3[6];
            if (0xF0F0F0F0F0F0F0F1 * ((a3[7] - v17) >> 3) <= v16) {
              sub_66748();
            }
            sub_9E7DA4(v10, (unint64_t *)(v17 + 136 * v16 + 96), (uint64_t)v19);
            uint64_t v18 = (void *)*a4;
            if (*a4)
            {
              a4[1] = v18;
              operator delete(v18);
              *a4 = 0;
              a4[1] = 0;
              a4[2] = 0;
            }
            double result = *(double *)v19;
            *(_OWORD *)a4 = *(_OWORD *)v19;
            a4[2] = *(void *)&v19[16];
          }
        }
      }
    }
  }
  return result;
}

void sub_9E7B9C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_9E7BC4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_498D5C(a1, *a2, 0, "stop");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x43u && (uint64_t v7 = v6[33]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    unint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    long long v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (double result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          double result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_9E7C98(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_9E7CB4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_8ED3D4(a1, *a2, 0, "hall");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x2Du && (uint64_t v7 = v6[22]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    unint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    long long v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (double result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          double result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_9E7D88(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

int *sub_9E7DA4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double result = (int *)sub_8ED928(a1, *a2, 0, "station");
  uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
  if (*v6 >= 0x39u && (uint64_t v7 = v6[28]) != 0)
  {
    uint64_t v8 = (unsigned int *)((char *)result + v7);
    uint64_t v9 = *v8;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    unint64_t v11 = (uint64_t *)((char *)v8 + v9 + 4);
    uint64_t v10 = *(unsigned int *)((char *)v8 + v9);
    long long v14 = (void **)a3;
    if (v10)
    {
      uint64_t v12 = 8 * v10;
      do
      {
        if (!*(unsigned char *)(a1 + 3888) || (double result = (int *)sub_2AB7E4(*(void *)(a1 + 3872)), result))
        {
          uint64_t v13 = *v11;
          double result = (int *)sub_2A98DC(&v14, &v13);
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_9E7E78(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_9E7E94()
{
  byte_25DEACF = 1;
  word_25DEAB8 = 65;
  byte_25DEAE7 = 1;
  word_25DEAD0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DEB78 = 0u;
  *(_OWORD *)&qword_25DEB88 = 0u;
  dword_25DEB98 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DEB78, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DEB78, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DEB78, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DEB78, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DEAFF = 8;
  strcpy((char *)&qword_25DEAE8, "any_mode");
  byte_25DEB17 = 7;
  strcpy((char *)&dword_25DEB00, "cycling");
  byte_25DEB2F = 7;
  strcpy((char *)&dword_25DEB18, "driving");
  byte_25DEB47 = 7;
  strcpy((char *)&dword_25DEB30, "walking");
  qword_25DEB50 = 0;
  qword_25DEB58 = 0;
  qword_25DEB48 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DEB48 = (uint64_t)v0;
  qword_25DEB50 = (uint64_t)(v0 + 9);
  qword_25DEB58 = (uint64_t)(v0 + 9);
  qword_25DEB60 = 0;
  qword_25DEB68 = 0;
  unk_25DEB70 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DEB68 = (uint64_t)(v1 + 9);
  unk_25DEB70 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DEB60 = (uint64_t)v1;
  return result;
}

void sub_9E815C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DEB88) {
    sub_20AD8D4((void **)qword_25DEB88);
  }
  uint64_t v37 = (void *)xmmword_25DEB78;
  *(void *)&xmmword_25DEB78 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_9E81FC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    do
    {
      sub_9E8238();
      v1 += 3120;
    }
    while (v1 != v2);
  }
}

void sub_9E8238()
{
  uint64_t v0 = (void *)__chkstk_darwin();
  sub_9E6208((uint64_t)v23, v0);
  while (1)
  {
    sub_9E6260((uint64_t)v23, &v30);
    BOOL v1 = sub_9E6044(v23, &v30);
    sub_9467EC((uint64_t)&v36);
    uint64_t v2 = __p;
    if (__p)
    {
      do
      {
        BOOL v3 = (void *)*v2;
        operator delete(v2);
        uint64_t v2 = v3;
      }
      while (v3);
    }
    char v4 = v34;
    unint64_t v34 = 0;
    if (v4) {
      operator delete(v4);
    }
    if (v32)
    {
      uint64_t v33 = v32;
      operator delete(v32);
    }
    if (!v1) {
      break;
    }
    int v5 = 0;
    switch(*(_DWORD *)sub_9E6230((uint64_t)v23))
    {
      case 0:
        int v5 = 4;
        goto LABEL_55;
      case 1:
      case 4:
        sub_9E5A94((uint64_t)v23, 1uLL, (char **)&v30);
        char v10 = *(_DWORD **)v30;
        uint64_t v31 = (int **)v30;
        operator delete(v30);
        if (*v10 == 9) {
          int v5 = 5;
        }
        else {
          int v5 = 2;
        }
        goto LABEL_55;
      case 2:
        int v5 = 3;
        goto LABEL_55;
      case 3:
        sub_9E5A94((uint64_t)v23, 0xFFFFFFFFFFFFFFFFLL, (char **)&v30);
        uint64_t v6 = (int **)v30;
        if (**(_DWORD **)v30 == 4)
        {
          int v5 = 2;
          goto LABEL_54;
        }
        if (v30 == v31) {
          goto LABEL_53;
        }
        int v12 = 0;
        char v13 = (int **)v30;
        while (1)
        {
          while (1)
          {
            int v14 = *v13;
            int v15 = **v13;
            if (v15 != 3) {
              break;
            }
            if (!*((unsigned char *)v14 + 792))
            {
              exception = __cxa_allocate_exception(8uLL);
              void *exception = &off_2439078;
            }
            BOOL v16 = *((unsigned __int8 *)v14 + 157) == 0;
            if ((v16 & v12 & 1) == 0)
            {
              v12 |= v16;
              if (++v13 != v31) {
                continue;
              }
            }
LABEL_53:
            int v5 = 0;
            goto LABEL_54;
          }
          if (v15 == 4) {
            break;
          }
          if (++v13 == v31) {
            goto LABEL_53;
          }
        }
        int v5 = v12 & 1;
        goto LABEL_54;
      case 5:
        sub_9E5A94((uint64_t)v23, 2uLL, (char **)&v30);
        uint64_t v6 = (int **)v30;
        if (**(_DWORD **)v30 == 9)
        {
          int v5 = 5;
          goto LABEL_54;
        }
        int v11 = (int **)v30;
        if (v30 == v31) {
          goto LABEL_42;
        }
        int v11 = (int **)v30;
        break;
      case 6:
        sub_9E5A94((uint64_t)v23, 1uLL, (char **)v29);
        sub_927AF0((uint64_t)&v30, *(void *)v29[0]);
        if (v29[0])
        {
          v29[1] = v29[0];
          operator delete(v29[0]);
        }
        sub_9E57A8((uint64_t)v23, (uint64_t **)&v21);
        sub_927AF0((uint64_t)v29, *(v22 - 1));
        if (v21)
        {
          uint64_t v22 = v21;
          operator delete(v21);
        }
        if (LODWORD(v29[0]) == 5) {
          int v7 = 0;
        }
        else {
          int v7 = 3;
        }
        if (v30 == 9) {
          int v8 = 5;
        }
        else {
          int v8 = 0;
        }
        if (v30 == 2) {
          int v5 = v7;
        }
        else {
          int v5 = v8;
        }
        sub_92A5D4((uint64_t)v29);
        sub_92A5D4((uint64_t)&v30);
        goto LABEL_55;
      case 7:
        sub_9E5A94((uint64_t)v23, 1uLL, (char **)&v30);
        uint64_t v9 = *(_DWORD **)v30;
        uint64_t v31 = (int **)v30;
        operator delete(v30);
        if (*v9 == 1) {
          int v5 = 3;
        }
        else {
          int v5 = 0;
        }
        goto LABEL_55;
      case 9:
        int v5 = 5;
        goto LABEL_55;
      default:
        goto LABEL_55;
    }
    while (**v11 != 2)
    {
      if (++v11 == v31)
      {
        int v11 = v31;
        break;
      }
    }
LABEL_42:
    if (v11 == v31) {
      int v5 = 0;
    }
    else {
      int v5 = 3;
    }
LABEL_54:
    uint64_t v31 = v6;
    operator delete(v6);
LABEL_55:
    *(_DWORD *)(sub_9E6230((uint64_t)v23) + 1976) = v5;
    sub_9E5780(v23);
  }
  sub_9467EC((uint64_t)&v28);
  uint64_t v17 = v27;
  if (v27)
  {
    do
    {
      uint64_t v18 = (void *)*v17;
      operator delete(v17);
      uint64_t v17 = v18;
    }
    while (v18);
  }
  uint64_t v19 = v26;
  uint64_t v26 = 0;
  if (v19) {
    operator delete(v19);
  }
  if (v24)
  {
    unint64_t v25 = v24;
    operator delete(v24);
  }
}

void sub_9E8670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
}

void sub_9E8720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v6 = (void *)STACK[0x1700];
  if (STACK[0x1700])
  {
    STACK[0x1708] = (unint64_t)v6;
    operator delete(v6);
  }
  sub_945B38(va);
  _Unwind_Resume(a1);
}

double sub_9E876C()
{
  byte_25DEBB7 = 1;
  word_25DEBA0 = 65;
  byte_25DEBCF = 1;
  word_25DEBB8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DEC60 = 0u;
  *(_OWORD *)&qword_25DEC70 = 0u;
  dword_25DEC80 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DEC60, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DEC60, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DEC60, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DEC60, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DEBE7 = 8;
  strcpy((char *)&qword_25DEBD0, "any_mode");
  byte_25DEBFF = 7;
  strcpy((char *)&dword_25DEBE8, "cycling");
  byte_25DEC17 = 7;
  strcpy((char *)&dword_25DEC00, "driving");
  byte_25DEC2F = 7;
  strcpy((char *)&dword_25DEC18, "walking");
  qword_25DEC38 = 0;
  qword_25DEC40 = 0;
  qword_25DEC30 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DEC30 = (uint64_t)v0;
  qword_25DEC38 = (uint64_t)(v0 + 9);
  qword_25DEC40 = (uint64_t)(v0 + 9);
  qword_25DEC48 = 0;
  qword_25DEC50 = 0;
  unk_25DEC58 = 0;
  BOOL v1 = (char *)operator new(9uLL);
  qword_25DEC50 = (uint64_t)(v1 + 9);
  unk_25DEC58 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)BOOL v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DEC48 = (uint64_t)v1;
  return result;
}

void sub_9E8A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DEC70) {
    sub_20AD918((void **)qword_25DEC70);
  }
  uint64_t v37 = (void *)xmmword_25DEC60;
  *(void *)&xmmword_25DEC60 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_9E8AD4(void *(****a1)(void **__return_ptr), uint64_t a2)
{
}

void sub_9E8ADC(void *(****a1)(void **__return_ptr), void *a2)
{
  unint64_t v61 = 0;
  int64_t v62 = 0;
  unint64_t v63 = 0;
  *(_OWORD *)uint64_t v58 = 0u;
  *(_OWORD *)unint64_t v59 = 0u;
  float v60 = 1.0;
  float v4 = (float)(0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a2[1] - *a2) >> 3)
             - 0x71C71C71C71C71C7 * ((uint64_t)(a2[4] - a2[3]) >> 4)
             + 0x66FD0EB66FD0EB67 * ((uint64_t)(a2[10] - a2[9]) >> 3)
             + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a2[13] - a2[12]) >> 4));
  size_t prime = (unint64_t)v4;
  if ((unint64_t)v4 == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0((uint64_t)v58, prime);
    goto LABEL_18;
  }
  if ((prime & ((unint64_t)v4 - 1)) != 0)
  {
    size_t prime = std::__next_prime((unint64_t)v4);
    uint64_t v6 = v58[1];
    BOOL v7 = (void *)prime >= v58[1];
    if ((void *)prime > v58[1]) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v6 = 0;
    BOOL v7 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v7)
  {
    unint64_t v8 = vcvtps_u32_f32((float)(unint64_t)v59[1] / v60);
    if ((unint64_t)v6 < 3
      || (uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      unint64_t v8 = std::__next_prime(v8);
    }
    else
    {
      uint64_t v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2) {
        unint64_t v8 = v10;
      }
    }
    if (prime <= v8) {
      size_t prime = v8;
    }
    if (prime < (unint64_t)v6) {
      goto LABEL_17;
    }
  }
LABEL_18:
  uint64_t v11 = a2[1] - *a2;
  if (v11)
  {
    int v12 = 0;
    uint64_t v13 = v11 / 168;
    uint64_t v14 = 88;
    do
    {
      uint64_t v15 = *a2 + v14;
      BOOL v16 = v62;
      if ((unint64_t)v62 >= v63)
      {
        uint64_t v17 = sub_9E92F8((char **)&v61, (void *)(*a2 + v14), (uint64_t *)(v15 + 8));
      }
      else
      {
        *int64_t v62 = *(_OWORD *)v15;
        v16[1] = xmmword_20E22B0;
        uint64_t v17 = (char *)(v16 + 2);
      }
      int64_t v62 = v17;
      __p[0] = v12;
      LODWORD(__p[1]) = 0;
      sub_9E9430((uint64_t)v58, (unint64_t *)v15, (void *)v15, __p);
      ++v12;
      v14 += 168;
    }
    while ((char *)v13 != v12);
  }
  uint64_t v18 = a2[4] - a2[3];
  if (v18)
  {
    uint64_t v19 = 0;
    uint64_t v20 = v18 / 144;
    uint64_t v21 = 88;
    do
    {
      uint64_t v22 = a2[3] + v21;
      uint64_t v23 = v62;
      if ((unint64_t)v62 >= v63)
      {
        unint64_t v24 = sub_9E9754((char **)&v61, (void *)(a2[3] + v21), (uint64_t *)(v22 + 8));
      }
      else
      {
        *int64_t v62 = *(_OWORD *)v22;
        v23[1] = xmmword_20EAE60;
        unint64_t v24 = (char *)(v23 + 2);
      }
      int64_t v62 = v24;
      __p[0] = v19;
      LODWORD(__p[1]) = 1;
      sub_9E9430((uint64_t)v58, (unint64_t *)v22, (void *)v22, __p);
      ++v19;
      v21 += 144;
    }
    while ((char *)v20 != v19);
  }
  uint64_t v25 = a2[10] - a2[9];
  if (v25)
  {
    uint64_t v26 = 0;
    uint64_t v27 = v25 / 696;
    uint64_t v28 = 48;
    do
    {
      uint64_t v29 = a2[9] + v28;
      unint64_t v30 = v62;
      if ((unint64_t)v62 >= v63)
      {
        uint64_t v31 = sub_9E988C((char **)&v61, (void *)(a2[9] + v28), (uint64_t *)(v29 + 8));
      }
      else
      {
        *int64_t v62 = *(_OWORD *)v29;
        v30[1] = xmmword_20EAE70;
        uint64_t v31 = (char *)(v30 + 2);
      }
      int64_t v62 = v31;
      __p[0] = v26;
      LODWORD(__p[1]) = 2;
      sub_9E9430((uint64_t)v58, (unint64_t *)v29, (void *)v29, __p);
      ++v26;
      v28 += 696;
    }
    while ((char *)v27 != v26);
  }
  uint64_t v32 = a2[13] - a2[12];
  if (v32)
  {
    uint64_t v33 = 0;
    uint64_t v34 = v32 / 208;
    uint64_t v35 = 48;
    do
    {
      uint64_t v36 = a2[12] + v35;
      uint64_t v37 = v62;
      if ((unint64_t)v62 >= v63)
      {
        uint64_t v38 = sub_9E99C4((char **)&v61, (void *)(a2[12] + v35), (uint64_t *)(v36 + 8));
      }
      else
      {
        *int64_t v62 = *(_OWORD *)v36;
        v37[1] = xmmword_20EAE80;
        uint64_t v38 = (char *)(v37 + 2);
      }
      int64_t v62 = v38;
      __p[0] = v33;
      LODWORD(__p[1]) = 3;
      sub_9E9430((uint64_t)v58, (unint64_t *)v36, (void *)v36, __p);
      ++v33;
      v35 += 208;
    }
    while ((char *)v34 != v33);
  }
  uint64_t v39 = (***a1)(__p);
  uint64_t v40 = (unint64_t *)__p[0];
  uint64_t v41 = (unint64_t *)__p[1];
  if (__p[0] != __p[1])
  {
    int8x8_t v42 = (int8x8_t)v58[1];
    if (v58[1])
    {
LABEL_44:
      unint64_t v43 = *v40;
      uint8x8_t v44 = (uint8x8_t)vcnt_s8(v42);
      v44.i16[0] = vaddlv_u8(v44);
      if (v44.u32[0] > 1uLL)
      {
        unint64_t v45 = *v40;
        if (v43 >= *(void *)&v42) {
          unint64_t v45 = v43 % *(void *)&v42;
        }
      }
      else
      {
        unint64_t v45 = (*(void *)&v42 - 1) & v43;
      }
      unint64_t v46 = (void *)*((void *)v58[0] + v45);
      if (v46)
      {
        uint64_t v47 = (void *)*v46;
        if (v47)
        {
          if (v44.u32[0] < 2uLL)
          {
            uint64_t v48 = *(void *)&v42 - 1;
            while (1)
            {
              uint64_t v50 = v47[1];
              if (v50 == v43)
              {
                if (v47[2] == v43) {
                  goto LABEL_64;
                }
              }
              else if ((v50 & v48) != v45)
              {
                goto LABEL_65;
              }
              uint64_t v47 = (void *)*v47;
              if (!v47) {
                goto LABEL_65;
              }
            }
          }
          do
          {
            unint64_t v49 = v47[1];
            if (v49 == v43)
            {
              if (v47[2] == v43)
              {
LABEL_64:
                sub_9E9130((uint64_t)v39, (uint64_t)v40, (uint64_t)(v47 + 3), a2);
                break;
              }
            }
            else
            {
              if (v49 >= *(void *)&v42) {
                v49 %= *(void *)&v42;
              }
              if (v49 != v45) {
                break;
              }
            }
            uint64_t v47 = (void *)*v47;
          }
          while (v47);
        }
      }
LABEL_65:
      while (1)
      {
        v40 += 4;
        if (v40 == v41) {
          break;
        }
        int8x8_t v42 = (int8x8_t)v58[1];
        if (v58[1]) {
          goto LABEL_44;
        }
      }
      uint64_t v40 = (unint64_t *)__p[0];
    }
  }
  if (v40)
  {
    unint64_t v51 = (unint64_t *)__p[1];
    unint64_t v52 = v40;
    if (__p[1] != v40)
    {
      do
      {
        unint64_t v53 = (void *)*(v51 - 3);
        if (v53)
        {
          *(v51 - 2) = (unint64_t)v53;
          operator delete(v53);
        }
        v51 -= 4;
      }
      while (v51 != v40);
      unint64_t v52 = (unint64_t *)__p[0];
    }
    __p[1] = v40;
    operator delete(v52);
  }
  unint64_t v54 = v59[0];
  if (v59[0])
  {
    do
    {
      uint64_t v55 = (void *)*v54;
      operator delete(v54);
      unint64_t v54 = v55;
    }
    while (v55);
  }
  unint64_t v56 = v58[0];
  v58[0] = 0;
  if (v56) {
    operator delete(v56);
  }
  if (v61)
  {
    int64_t v62 = v61;
    operator delete(v61);
  }
}

void sub_9E90D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_9E9130(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  switch(*(_DWORD *)(a3 + 8))
  {
    case 0:
      float v4 = (uint64_t *)(*a4 + 168 * *(void *)a3 + 112);
      if (v4 != (uint64_t *)(a2 + 8)) {
        sub_326C0(v4, *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
      }
      int v5 = &qword_25DED48;
      if (v4 != &qword_25DED48 && *v4 == v4[1]) {
        goto LABEL_23;
      }
      break;
    case 1:
      float v4 = (uint64_t *)(a4[3] + 144 * *(void *)a3 + 120);
      if (v4 != (uint64_t *)(a2 + 8)) {
        sub_326C0(v4, *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
      }
      int v5 = &qword_25DED60;
      if (v4 != &qword_25DED60 && *v4 == v4[1]) {
        goto LABEL_23;
      }
      break;
    case 2:
      float v4 = (uint64_t *)(a4[9] + 696 * *(void *)a3 + 72);
      if (v4 != (uint64_t *)(a2 + 8)) {
        sub_326C0(v4, *(char **)(a2 + 8), *(char **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
      }
      int v5 = &qword_25DED78;
      if (v4 != &qword_25DED78 && *v4 == v4[1])
      {
LABEL_23:
        uint8x8_t v9 = (char *)*v5;
        uint64_t v10 = (char *)v5[1];
        size_t v11 = (uint64_t)&v10[-*v5] >> 3;
        int v12 = v4;
        goto LABEL_25;
      }
      break;
    case 3:
      int v12 = (uint64_t *)(a4[12] + 208 * *(void *)a3 + 64);
      if (v12 != (uint64_t *)(a2 + 8))
      {
        uint64_t v10 = *(char **)(a2 + 16);
        size_t v11 = (uint64_t)&v10[-*(void *)(a2 + 8)] >> 3;
        uint8x8_t v9 = *(char **)(a2 + 8);
LABEL_25:
        sub_326C0(v12, v9, v10, v11);
      }
      break;
    default:
      return;
  }
}

char *sub_9E92F8(char **a1, void *a2, uint64_t *a3)
{
  float v4 = *a1;
  int v5 = a1[1];
  uint64_t v6 = (v5 - *a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - v4;
  if (v8 >> 4 > v7) {
    unint64_t v7 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  if (v7 >> 59) {
    sub_188D718();
  }
  uint64_t v11 = 32 * v7;
  int v12 = (char *)operator new(32 * v7);
  uint64_t v13 = &v12[32 * v6];
  uint64_t v14 = *a3;
  *(void *)uint64_t v13 = *a2;
  *((void *)v13 + 1) = v14;
  *((_OWORD *)v13 + 1) = xmmword_20E22B0;
  uint64_t v15 = v13 + 32;
  if (v5 != v4)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v18 = &v13[v16];
      uint64_t v19 = &v5[v16];
      *((void *)v18 - 4) = *(void *)&v5[v16 - 32];
      unsigned int v20 = *(_DWORD *)&v5[v16 - 16];
      *((_DWORD *)v18 - 4) = v20;
      if (v20 <= 3) {
        *((void *)v18 - 3) = *((void *)v19 - 3);
      }
      uint64_t v17 = *(void *)(v19 - 12);
      *((_DWORD *)v18 - 1) = *((_DWORD *)v19 - 1);
      *(void *)(v18 - 12) = v17;
      v16 -= 32;
    }
    while (&v5[v16] != v4);
    v13 += v16;
  }
  *a1 = v13;
  a1[1] = v15;
  a1[2] = &v12[v11];
  if (v4) {
    operator delete(v4);
  }
  return v15;
}

char *sub_9E9430(uint64_t a1, unint64_t *a2, void *a3, _OWORD *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      int v12 = (char *)*v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v14 = *((void *)v12 + 1);
            if (v14 == v8)
            {
              if (*((void *)v12 + 2) == v8) {
                return v12;
              }
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            int v12 = *(char **)v12;
            if (!v12) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == v8)
          {
            if (*((void *)v12 + 2) == v8) {
              return v12;
            }
          }
          else
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
            if (v13 != v4) {
              break;
            }
          }
          int v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  int v12 = (char *)operator new(0x28uLL);
  *(void *)int v12 = 0;
  *((void *)v12 + 1) = v8;
  *((void *)v12 + 2) = *a3;
  *(_OWORD *)(v12 + 24) = *a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v9 && (float)(v16 * (float)v9) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v4);
    if (v18)
    {
LABEL_26:
      *(void *)int v12 = *v18;
LABEL_61:
      *uint64_t v18 = v12;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v9 = *(void *)(a1 + 8);
    }
    if (prime > v9) {
      goto LABEL_37;
    }
    if (prime < v9)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v9) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v26 = v9 - 1;
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
      {
        unint64_t v4 = v8 % v9;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v8 % v9));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v8;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v8);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v26 & v8;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v8));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *(void *)int v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v17 + 8 * v4) = a1 + 16;
  if (*(void *)v12)
  {
    unint64_t v27 = *(void *)(*(void *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_9E9740(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_9E9754(char **a1, void *a2, uint64_t *a3)
{
  unint64_t v4 = *a1;
  int v5 = a1[1];
  uint64_t v6 = (v5 - *a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - v4;
  if (v8 >> 4 > v7) {
    unint64_t v7 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  if (v7 >> 59) {
    sub_188D718();
  }
  uint64_t v11 = 32 * v7;
  int v12 = (char *)operator new(32 * v7);
  unint64_t v13 = &v12[32 * v6];
  uint64_t v14 = *a3;
  *(void *)unint64_t v13 = *a2;
  *((void *)v13 + 1) = v14;
  *((_OWORD *)v13 + 1) = xmmword_20EAE60;
  float v15 = v13 + 32;
  if (v5 != v4)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v18 = &v13[v16];
      BOOL v19 = &v5[v16];
      *((void *)v18 - 4) = *(void *)&v5[v16 - 32];
      unsigned int v20 = *(_DWORD *)&v5[v16 - 16];
      *((_DWORD *)v18 - 4) = v20;
      if (v20 <= 3) {
        *((void *)v18 - 3) = *((void *)v19 - 3);
      }
      uint64_t v17 = *(void *)(v19 - 12);
      *((_DWORD *)v18 - 1) = *((_DWORD *)v19 - 1);
      *(void *)(v18 - 12) = v17;
      v16 -= 32;
    }
    while (&v5[v16] != v4);
    v13 += v16;
  }
  *a1 = v13;
  a1[1] = v15;
  a1[2] = &v12[v11];
  if (v4) {
    operator delete(v4);
  }
  return v15;
}

char *sub_9E988C(char **a1, void *a2, uint64_t *a3)
{
  unint64_t v4 = *a1;
  int v5 = a1[1];
  uint64_t v6 = (v5 - *a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - v4;
  if (v8 >> 4 > v7) {
    unint64_t v7 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  if (v7 >> 59) {
    sub_188D718();
  }
  uint64_t v11 = 32 * v7;
  int v12 = (char *)operator new(32 * v7);
  unint64_t v13 = &v12[32 * v6];
  uint64_t v14 = *a3;
  *(void *)unint64_t v13 = *a2;
  *((void *)v13 + 1) = v14;
  *((_OWORD *)v13 + 1) = xmmword_20EAE70;
  float v15 = v13 + 32;
  if (v5 != v4)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v18 = &v13[v16];
      BOOL v19 = &v5[v16];
      *((void *)v18 - 4) = *(void *)&v5[v16 - 32];
      unsigned int v20 = *(_DWORD *)&v5[v16 - 16];
      *((_DWORD *)v18 - 4) = v20;
      if (v20 <= 3) {
        *((void *)v18 - 3) = *((void *)v19 - 3);
      }
      uint64_t v17 = *(void *)(v19 - 12);
      *((_DWORD *)v18 - 1) = *((_DWORD *)v19 - 1);
      *(void *)(v18 - 12) = v17;
      v16 -= 32;
    }
    while (&v5[v16] != v4);
    v13 += v16;
  }
  *a1 = v13;
  a1[1] = v15;
  a1[2] = &v12[v11];
  if (v4) {
    operator delete(v4);
  }
  return v15;
}

char *sub_9E99C4(char **a1, void *a2, uint64_t *a3)
{
  unint64_t v4 = *a1;
  int v5 = a1[1];
  uint64_t v6 = (v5 - *a1) >> 5;
  unint64_t v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - v4;
  if (v8 >> 4 > v7) {
    unint64_t v7 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  if (v7 >> 59) {
    sub_188D718();
  }
  uint64_t v11 = 32 * v7;
  int v12 = (char *)operator new(32 * v7);
  unint64_t v13 = &v12[32 * v6];
  uint64_t v14 = *a3;
  *(void *)unint64_t v13 = *a2;
  *((void *)v13 + 1) = v14;
  *((_OWORD *)v13 + 1) = xmmword_20EAE80;
  float v15 = v13 + 32;
  if (v5 != v4)
  {
    uint64_t v16 = 0;
    do
    {
      uint64_t v18 = &v13[v16];
      BOOL v19 = &v5[v16];
      *((void *)v18 - 4) = *(void *)&v5[v16 - 32];
      unsigned int v20 = *(_DWORD *)&v5[v16 - 16];
      *((_DWORD *)v18 - 4) = v20;
      if (v20 <= 3) {
        *((void *)v18 - 3) = *((void *)v19 - 3);
      }
      uint64_t v17 = *(void *)(v19 - 12);
      *((_DWORD *)v18 - 1) = *((_DWORD *)v19 - 1);
      *(void *)(v18 - 12) = v17;
      v16 -= 32;
    }
    while (&v5[v16] != v4);
    v13 += v16;
  }
  *a1 = v13;
  a1[1] = v15;
  a1[2] = &v12[v11];
  if (v4) {
    operator delete(v4);
  }
  return v15;
}

uint64_t sub_9E9AFC()
{
  byte_25DEC9F = 1;
  word_25DEC88 = 65;
  byte_25DECB7 = 1;
  word_25DECA0 = 65;
  char v7 = 7;
  strcpy((char *)v6, "UNKNOWN");
  int v8 = 0;
  char v10 = 14;
  strcpy((char *)v9, "ROUTES_THROUGH");
  int v11 = 1;
  char v13 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v14 = 3;
  char v16 = 11;
  strcpy((char *)v15, "ROUTES_FROM");
  int v17 = 2;
  xmmword_25DED90 = 0u;
  *(_OWORD *)&qword_25DEDA0 = 0u;
  dword_25DEDB0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DED90, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DED90, (uint64_t)v9, (uint64_t)v9);
  sub_3A6EF0((uint64_t)&xmmword_25DED90, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DED90, (uint64_t)v15, (uint64_t)v15);
  if (v16 < 0)
  {
    operator delete(v15[0]);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v9[0]);
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v6[0]);
      goto LABEL_5;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v10 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v7 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DECCF = 8;
  strcpy((char *)&qword_25DECB8, "any_mode");
  byte_25DECE7 = 7;
  strcpy((char *)&dword_25DECD0, "cycling");
  byte_25DECFF = 7;
  strcpy((char *)&dword_25DECE8, "driving");
  byte_25DED17 = 7;
  strcpy((char *)&dword_25DED00, "walking");
  qword_25DED20 = 0;
  qword_25DED28 = 0;
  qword_25DED18 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DED18 = (uint64_t)v0;
  qword_25DED20 = (uint64_t)(v0 + 9);
  qword_25DED28 = (uint64_t)(v0 + 9);
  qword_25DED30 = 0;
  qword_25DED38 = 0;
  qword_25DED40 = 0;
  BOOL v1 = operator new(9uLL);
  *(void *)BOOL v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DED30 = (uint64_t)v1;
  qword_25DED38 = (uint64_t)(v1 + 9);
  qword_25DED40 = (uint64_t)(v1 + 9);
  qword_25DED48 = 0;
  qword_25DED50 = 0;
  qword_25DED58 = 0;
  uint64_t v2 = operator new(0x18uLL);
  *(_OWORD *)uint64_t v2 = xmmword_20EAE90;
  v2[2] = 42;
  qword_25DED48 = (uint64_t)v2;
  qword_25DED50 = (uint64_t)(v2 + 3);
  qword_25DED58 = (uint64_t)(v2 + 3);
  qword_25DED60 = 0;
  qword_25DED68 = 0;
  qword_25DED70 = 0;
  BOOL v3 = operator new(0x18uLL);
  *(_OWORD *)BOOL v3 = xmmword_20EAE90;
  v3[2] = 0x30000002ALL;
  qword_25DED60 = (uint64_t)v3;
  qword_25DED68 = (uint64_t)(v3 + 3);
  qword_25DED70 = (uint64_t)(v3 + 3);
  qword_25DED78 = 0;
  qword_25DED80 = 0;
  unk_25DED88 = 0;
  unint64_t v4 = operator new(8uLL);
  qword_25DED78 = (uint64_t)v4;
  void *v4 = 0x2BC00000025;
  uint64_t result = (uint64_t)(v4 + 1);
  qword_25DED80 = result;
  unk_25DED88 = result;
  return result;
}

void sub_9E9E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (qword_25DEDA0) {
    sub_20AD95C((void **)qword_25DEDA0);
  }
  uint64_t v39 = (void *)xmmword_25DED90;
  *(void *)&xmmword_25DED90 = 0;
  if (v39)
  {
    operator delete(v39);
    if ((a38 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a31 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a38 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a24 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a26);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a17 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a12);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a19);
  if ((a17 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_9E9F00(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = sub_3757C8(a2);
  *(void *)(a1 + 8) = sub_3755E4(a2);
  *(void *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 1065353216;
  return a1;
}

void sub_9E9F60(std::string *a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 1431))
  {
    uint64_t v6 = *(void *)(a2 + 120);
    uint64_t v7 = *(void *)(a2 + 128);
    if (v6 == v7)
    {
LABEL_8:
      uint64_t v10 = *(void *)(a2 + 96);
      uint64_t v11 = *(void *)(a2 + 104);
      if (v10 == v11) {
        return;
      }
      while (1)
      {
        int v12 = (int *)sub_8DFD1C(a1->__r_.__value_.__l.__size_, *(void *)(v10 + 56), 0, "line");
        char v13 = (unsigned __int16 *)((char *)v12 - *v12);
        if (*v13 >= 0x55u)
        {
          if (v13[42]) {
            break;
          }
        }
        v10 += 696;
        if (v10 == v11) {
          return;
        }
      }
    }
    else
    {
      while (1)
      {
        int v8 = (int *)sub_8EF9B8(a1->__r_.__value_.__r.__words[0], *(void *)(v6 + 56), 0, "system");
        unint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
        if (*v9 >= 0x17u)
        {
          if (v9[11]) {
            break;
          }
        }
        v6 += 208;
        if (v6 == v7) {
          goto LABEL_8;
        }
      }
    }
    int v14 = *(void **)a2;
    float v15 = *(void **)(a2 + 8);
    if (*(void **)a2 != v15)
    {
      char v16 = (uint64_t *)(a2 + 24);
      do
      {
        sub_9EA0CC(a1, v14, v16, a3);
        if (a1[2].__r_.__value_.__r.__words[0])
        {
          int v17 = (void *)a1[1].__r_.__value_.__r.__words[2];
          if (v17)
          {
            do
            {
              uint64_t v18 = (void *)*v17;
              operator delete(v17);
              int v17 = v18;
            }
            while (v18);
          }
          a1[1].__r_.__value_.__r.__words[2] = 0;
          std::string::size_type size = a1[1].__r_.__value_.__l.__size_;
          if (size)
          {
            for (uint64_t i = 0; i != size; ++i)
              *(void *)(a1[1].__r_.__value_.__r.__words[0] + 8 * i) = 0;
          }
          a1[2].__r_.__value_.__r.__words[0] = 0;
        }
        v14 += 390;
      }
      while (v14 != v15);
    }
  }
}

void sub_9EA0CC(std::string *a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = a2[1] - *a2;
  if (v4)
  {
    unint64_t v9 = 0;
    uint64_t v10 = v4 >> 5;
    do
    {
      int8x8_t v11 = (int8x8_t)a1[1].__r_.__value_.__r.__words[1];
      if (v11)
      {
        uint8x8_t v12 = (uint8x8_t)vcnt_s8(v11);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          unint64_t v13 = v9;
          if (v9 >= *(void *)&v11) {
            unint64_t v13 = v9 % *(void *)&v11;
          }
        }
        else
        {
          unint64_t v13 = (*(void *)&v11 - 1) & v9;
        }
        int v14 = *(void **)(a1[1].__r_.__value_.__r.__words[0] + 8 * v13);
        if (v14)
        {
          float v15 = (void *)*v14;
          if (v15)
          {
            if (v12.u32[0] < 2uLL)
            {
              uint64_t v16 = *(void *)&v11 - 1;
              while (1)
              {
                uint64_t v18 = v15[1];
                if (v18 == v9)
                {
                  if (v15[2] == v9) {
                    goto LABEL_3;
                  }
                }
                else if ((v18 & v16) != v13)
                {
                  goto LABEL_24;
                }
                float v15 = (void *)*v15;
                if (!v15) {
                  goto LABEL_24;
                }
              }
            }
            do
            {
              unint64_t v17 = v15[1];
              if (v17 == v9)
              {
                if (v15[2] == v9) {
                  goto LABEL_3;
                }
              }
              else
              {
                if (v17 >= *(void *)&v11) {
                  v17 %= *(void *)&v11;
                }
                if (v17 != v13) {
                  break;
                }
              }
              float v15 = (void *)*v15;
            }
            while (v15);
          }
        }
      }
LABEL_24:
      uint64_t v19 = *a2 + 32 * v9;
      unsigned int v20 = *(void **)v19;
      unint64_t v21 = *(void **)(v19 + 8);
      if (*(void **)v19 != v21)
      {
        do
        {
          sub_9EA23C(a1, v20, a2, a3, a4);
          v20 += 13;
        }
        while (v20 != v21);
      }
LABEL_3:
      ++v9;
    }
    while (v9 != v10);
  }
}

void sub_9EA23C(std::string *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6 = a2[1];
  uint64_t v5 = a2[2];
  if (v6 != v5 && *(_DWORD *)(v5 - 5704) == 4)
  {
    while (*(_DWORD *)v6 != 2)
    {
      v6 += 5704;
      if (v6 == v5)
      {
        uint64_t v6 = a2[2];
        break;
      }
    }
    if (!*(unsigned char *)(v6 + 792))
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_2439078;
    }
    if (*(_DWORD *)(v6 + 116) != 0x7FFFFFFF)
    {
      uint64_t v12 = a4[9];
      unint64_t v13 = *(void *)(v6 + 752);
      if (0x66FD0EB66FD0EB67 * ((a4[10] - v12) >> 3) <= v13) {
        sub_66748();
      }
      unint64_t v38 = *(void *)(v12 + 696 * v13 + 64);
      uint64_t v39 = a4[12];
      if (0x4EC4EC4EC4EC4EC5 * ((a4[13] - v39) >> 4) <= v38) {
        sub_66748();
      }
      if (sub_9EAB1C((uint64_t *)a1, a4, v13))
      {
        sub_9EAC4C((uint64_t *)a1, a4, *(void *)(v6 + 752), (uint64_t)&v59);
        unint64_t v14 = *(void *)(v6 + 56);
        if (0xCF3CF3CF3CF3CF3DLL * ((a4[1] - *a4) >> 3) <= v14) {
          sub_66748();
        }
        int v37 = *(_DWORD *)(v6 + 116);
        uint64_t v15 = *(void *)(v6 + 56);
        uint64_t v16 = *a4;
        sub_97C7FC(*a4 + 168 * v14, (uint64_t)a4, (uint64_t)v57);
        if (!*(unsigned char *)(v6 + 792))
        {
          uint64_t v36 = __cxa_allocate_exception(8uLL);
          void *v36 = &off_2439078;
        }
        sub_9EADC4(a1->__r_.__value_.__l.__size_, (unint64_t *)(v6 + 768), *(_DWORD *)(v6 + 780), &v56);
        unint64_t v17 = v58;
        if ((v58 & 0x80u) != 0) {
          unint64_t v17 = (unint64_t)v57[1];
        }
        if (!v17) {
          goto LABEL_69;
        }
        std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v56.__r_.__value_.__l.__size_;
        }
        if (!size) {
          goto LABEL_69;
        }
        memset(&v54, 0, sizeof(v54));
        long long v53 = 0u;
        long long v52 = 0u;
        long long v51 = 0u;
        int v55 = 0x7FFFFFFF;
        long long v50 = 0uLL;
        unint64_t v49 = 0;
        uint64_t v19 = (int *)sub_8DFD1C(a1->__r_.__value_.__l.__size_, *(void *)(v12 + 696 * v13 + 56), 0, "line");
        unsigned int v20 = (unsigned __int16 *)((char *)v19 - *v19);
        if ((*v20 >= 0x57u && (uint64_t v21 = v20[43]) != 0 && *((unsigned char *)v19 + v21)
           || sub_9EB044(a1->__r_.__value_.__r.__words[0], (unint64_t *)(v39 + 208 * v38 + 56)))
          && (sub_9EB09C((uint64_t *)a1, a2, a3, a4) & 1) != 0)
        {
          sub_9EB6A0((uint64_t *)a1, a2, a3, a4, &v44);
          uint64_t v22 = v44;
          unint64_t v49 = (uint64_t *)v44;
          long long v50 = v45;
          if (v44 == (unint64_t *)v45)
          {
            sub_9EB3C0(a1, (uint64_t)a2, a4, (uint64_t)&v44);
          }
          else
          {
            unint64_t v23 = *(void *)(v45 - 8);
            if (v23 >= (uint64_t)(a3[1] - *a3) >> 5) {
              sub_66748();
            }
            uint64_t v24 = sub_9EBA30((uint64_t *)(*a3 + 32 * v23));
            sub_9EB3C0(a1, v24, a4, (uint64_t)&v44);
          }
          sub_9EB5E4((uint64_t)&v51, (long long *)&v44);
          sub_29D7B0((uint64_t)&v44);
        }
        else
        {
          sub_9EB3C0(a1, (uint64_t)a2, a4, (uint64_t)&v44);
          sub_9EB5E4((uint64_t)&v51, (long long *)&v44);
          sub_29D7B0((uint64_t)&v44);
          uint64_t v22 = 0;
        }
        uint64_t v25 = HIBYTE(v53);
        if (v53 < 0) {
          uint64_t v25 = v53;
        }
        if (v25)
        {
          uint64_t v26 = BYTE7(v52);
          if (SBYTE7(v52) < 0) {
            uint64_t v26 = *((void *)&v51 + 1);
          }
          if (v26)
          {
            unint64_t v27 = v61;
            if (v61 == (char *)v62)
            {
LABEL_39:
              int v28 = 0;
            }
            else
            {
              while (v27[24] != 4)
              {
                v27 += 80;
                if (v27 == (char *)v62) {
                  goto LABEL_39;
                }
              }
              if (v55 == 0x7FFFFFFF) {
                goto LABEL_64;
              }
              int v28 = 1;
            }
            sub_949D74((char *)__dst, &v59);
            sub_949F20(__dst, &v56);
            sub_949F28(__dst, (const std::string *)&v51);
            sub_949F50((uint64_t)__dst, *(_DWORD *)(a5 + 968));
            sub_949F30((uint64_t)__dst, v37, (std::string *)(v16 + 168 * v15 + 136));
            if (v28) {
              sub_949F40((uint64_t)__dst, v55, &v54);
            }
            sub_94A99C((uint64_t)__dst, (uint64_t)v46);
            unint64_t v29 = v47;
            if ((v47 & 0x80u) != 0) {
              unint64_t v29 = (unint64_t)v46[1];
            }
            if (v29)
            {
              unint64_t v30 = sub_9EBAC8(a1, (uint64_t)v57, (uint64_t)&v52 + 8, (uint64_t)__p);
              unint64_t v31 = v43;
              if ((v43 & 0x80u) != 0) {
                unint64_t v31 = (unint64_t)__p[1];
              }
              if (v31)
              {
                sub_9EBDBC((uint64_t)v30, (uint64_t)a2, (uint64_t)v46, (uint64_t)__p, &v49);
              }
              else if (sub_723EC(1u))
              {
                sub_6BAC((uint64_t)&v44);
                sub_188FC78(&v44, (uint64_t)"Failed to generate a ticketing segment display text for system ", 63);
                std::ostream::operator<<();
                std::stringbuf::str();
                sub_7246C((uint64_t *)&v40, 1u);
                if (v41 < 0) {
                  operator delete(v40);
                }
                sub_111ECAC((uint64_t)&v44);
              }
              if ((char)v43 < 0) {
                operator delete(__p[0]);
              }
            }
            else if (sub_723EC(1u))
            {
              sub_6BAC((uint64_t)&v44);
              sub_188FC78(&v44, (uint64_t)"Failed to format ticketing URL for system ", 42);
              std::ostream::operator<<();
              std::stringbuf::str();
              sub_7246C((uint64_t *)__p, 1u);
              if ((char)v43 < 0) {
                operator delete(__p[0]);
              }
              sub_111ECAC((uint64_t)&v44);
            }
            if ((char)v47 < 0) {
              operator delete(v46[0]);
            }
            sub_949F1C((uint64_t)__dst);
          }
        }
LABEL_64:
        if (v22) {
          operator delete(v22);
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v54.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v53) & 0x80000000) == 0)
          {
LABEL_68:
            if ((SBYTE7(v52) & 0x80000000) == 0) {
              goto LABEL_69;
            }
LABEL_75:
            operator delete((void *)v51);
            if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_70:
              if (((char)v58 & 0x80000000) == 0) {
                goto LABEL_71;
              }
              goto LABEL_77;
            }
LABEL_76:
            operator delete(v56.__r_.__value_.__l.__data_);
            if (((char)v58 & 0x80000000) == 0)
            {
LABEL_71:
              uint64_t v32 = v61;
              if (!v61)
              {
LABEL_82:
                if (v60 < 0) {
                  operator delete((void *)v59);
                }
                return;
              }
LABEL_78:
              uint64_t v33 = v62;
              uint64_t v34 = v32;
              if ((char *)v62 != v32)
              {
                do
                {
                  v33 -= 80;
                  sub_94B370((uint64_t)&v63, v33);
                }
                while ((char *)v33 != v32);
                uint64_t v34 = v61;
              }
              uint64_t v62 = (uint64_t)v32;
              operator delete(v34);
              goto LABEL_82;
            }
LABEL_77:
            operator delete(v57[0]);
            uint64_t v32 = v61;
            if (!v61) {
              goto LABEL_82;
            }
            goto LABEL_78;
          }
        }
        else if ((SHIBYTE(v53) & 0x80000000) == 0)
        {
          goto LABEL_68;
        }
        operator delete(*((void **)&v52 + 1));
        if (SBYTE7(v52) < 0) {
          goto LABEL_75;
        }
LABEL_69:
        if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_70;
        }
        goto LABEL_76;
      }
    }
  }
}

void sub_9EA960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a24);
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  sub_949F1C((uint64_t)&a63);
  if (v63)
  {
    STACK[0x210] = (unint64_t)v63;
    operator delete(v63);
    sub_29D7B0((uint64_t)&STACK[0x220]);
    if (*(char *)(v64 - 169) < 0)
    {
LABEL_9:
      operator delete(*(void **)(v64 - 192));
      if (*(char *)(v64 - 145) < 0)
      {
LABEL_13:
        operator delete(*(void **)(v64 - 168));
        sub_9A0088(v64 - 144);
        _Unwind_Resume(a1);
      }
LABEL_14:
      sub_9A0088(v64 - 144);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    sub_29D7B0((uint64_t)&STACK[0x220]);
    if (*(char *)(v64 - 169) < 0) {
      goto LABEL_9;
    }
  }
  if (*(char *)(v64 - 145) < 0) {
    goto LABEL_13;
  }
  goto LABEL_14;
}

BOOL sub_9EAB1C(uint64_t *a1, void *a2, unint64_t a3)
{
  uint64_t v4 = a2[9];
  if (0x66FD0EB66FD0EB67 * ((a2[10] - v4) >> 3) <= a3) {
    sub_66748();
  }
  uint64_t v6 = a2[12];
  unint64_t v7 = *(void *)(v4 + 696 * a3 + 64);
  if (0x4EC4EC4EC4EC4EC5 * ((a2[13] - v6) >> 4) <= v7) {
    sub_66748();
  }
  int v8 = (int *)sub_8EF9B8(*a1, *(void *)(v6 + 208 * v7 + 56), 0, "system");
  unint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v9 >= 0x17u && v9[11]) {
    return 1;
  }
  int8x8_t v11 = (int *)sub_8DFD1C(a1[1], *(void *)(v4 + 696 * a3 + 56), 0, "line");
  BOOL result = 0;
  uint64_t v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 0x55u) {
    return v12[42] != 0;
  }
  return result;
}

double sub_9EAC4C@<D0>(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = a2[9];
  if (0x66FD0EB66FD0EB67 * ((a2[10] - v6) >> 3) <= a3) {
    sub_66748();
  }
  unint64_t v7 = *(void *)(v6 + 696 * a3 + 64);
  uint64_t v8 = a2[12];
  if (0x4EC4EC4EC4EC4EC5 * ((a2[13] - v8) >> 4) <= v7) {
    sub_66748();
  }
  uint64_t v9 = v6 + 696 * a3;
  unint64_t v11 = *(void *)(v9 + 56);
  uint64_t v10 = (unint64_t *)(v9 + 56);
  uint64_t v12 = (int *)sub_8DFD1C(a1[1], v11, 0, "line");
  unint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 < 0x55u || !v13[42])
  {
    unint64_t v14 = (int *)sub_8EF9B8(*a1, *(void *)(v8 + 208 * v7 + 56), 0, "system");
    unint64_t v17 = (unsigned __int16 *)((char *)v14 - *v14);
    if (*v17 < 0x17u) {
      goto LABEL_11;
    }
    unsigned int v16 = v17[11];
    if (!v16) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v18 = (int *)((char *)v14 + v16 + *(int *)((char *)v14 + v16));
    goto LABEL_12;
  }
  unint64_t v14 = (int *)sub_8DFD1C(a1[1], *v10, 0, "line");
  uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 0x55u)
  {
    unsigned int v16 = v15[42];
    if (v16) {
      goto LABEL_10;
    }
  }
LABEL_11:
  uint64_t v18 = 0;
LABEL_12:

  return sub_9A2124(v18, a4);
}

int *sub_9EADC4@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  unint64_t v8 = *a2;
  BOOL result = (int *)sub_369B60(a1, *a2, 0);
  uint64_t v10 = (unsigned __int16 *)((char *)result - *result);
  unsigned int v11 = *v10;
  if (v11 < 5)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = v10[2];
    if (v10[2]) {
      v12 += (uint64_t)result + *(unsigned int *)((char *)result + v12);
    }
  }
  unint64_t v13 = (int *)(v12 + 4 * HIDWORD(v8) + 4 + *(unsigned int *)(v12 + 4 * HIDWORD(v8) + 4));
  unint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 < 0x29u) {
    goto LABEL_28;
  }
  uint64_t v15 = v14[20];
  if (!v15) {
    goto LABEL_28;
  }
  uint64_t v16 = *(unsigned int *)((char *)&v13[a3 + 1] + v15 + *(unsigned int *)((char *)v13 + v15));
  if (v16 == -1) {
    goto LABEL_28;
  }
  if (v11 < 0x15)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = v10[10];
    if (v17) {
      v17 += (uint64_t)result + *(unsigned int *)((char *)result + v17);
    }
  }
  uint64_t v18 = v17 + 4 * v16;
  unsigned int v21 = *(_DWORD *)(v18 + 4);
  uint64_t v19 = v18 + 4;
  uint64_t v20 = v21;
  unint64_t v22 = *a2;
  unint64_t v23 = sub_369B60(a1, v22, 0);
  uint64_t v24 = &v23[-*(int *)v23];
  if (*(unsigned __int16 *)v24 < 5u)
  {
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v25 = *((unsigned __int16 *)v24 + 2);
    if (*((_WORD *)v24 + 2)) {
      v25 += (uint64_t)&v23[*(unsigned int *)&v23[v25]];
    }
  }
  uint64_t v26 = (int *)(v25 + 4 * HIDWORD(v22) + 4 + *(unsigned int *)(v25 + 4 * HIDWORD(v22) + 4));
  unint64_t v27 = (unsigned __int16 *)((char *)v26 - *v26);
  if (*v27 >= 0xDu && (uint64_t v28 = v27[6]) != 0) {
    int v29 = *(int *)((char *)v26 + v28);
  }
  else {
    int v29 = -1;
  }
  BOOL result = (int *)sub_498D5C(a1, *(void *)&v23[24 * (v29 + a3)+ 4+ *((unsigned __int16 *)v24 + 3)+ *(unsigned int *)&v23[*((unsigned __int16 *)v24 + 3)]], 0, "stop");
  unint64_t v30 = (unsigned __int16 *)((char *)result - *result);
  if (*v30 < 0x33u
    || (uint64_t v31 = v30[25]) == 0
    || (uint64_t v32 = (unsigned __int16 *)(v19 + v20 - *(int *)(v19 + v20)), *v32 < 5u)
    || (uint64_t v33 = v32[2]) == 0
    || (uint64_t v34 = *(unsigned int *)(v19 + v20 + v33),
        uint64_t v35 = (int *)((char *)result + v31 + *(unsigned int *)((char *)result + v31)),
        v34 >= *v35))
  {
LABEL_28:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  uint64_t v36 = (_DWORD *)((char *)&v35[v34 + 1] + v35[v34 + 1]);
  unsigned int v39 = *v36;
  unint64_t v38 = v36 + 1;
  size_t v37 = v39;
  if (v39 >= 0x17)
  {
    if ((v37 | 7) == 0x17) {
      uint64_t v40 = (v37 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v40 = v37 | 7;
    }
    char v41 = operator new(v40 + 1);
    a4[1] = v37;
    a4[2] = v40 - 0x7FFFFFFFFFFFFFFFLL;
    *a4 = v41;
    a4 = v41;
  }
  else
  {
    *((unsigned char *)a4 + 23) = v37;
    if (!v37) {
      goto LABEL_34;
    }
  }
  BOOL result = (int *)memcpy(a4, v38, v37);
LABEL_34:
  *((unsigned char *)a4 + v37) = 0;
  return result;
}

BOOL sub_9EB044(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (int *)sub_8EF9B8(a1, *a2, 0, "system");
  uint64_t v3 = 0;
  uint64_t v4 = (unsigned __int16 *)((char *)v2 - *v2);
  if (*v4 >= 0x1Bu)
  {
    uint64_t v3 = v4[13];
    if (v4[13]) {
      return *((unsigned char *)v2 + v3) != 0;
    }
  }
  return v3;
}

uint64_t sub_9EB09C(uint64_t *a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a2[7];
  if (v4 == -1) {
    return 0;
  }
  if (v4 >= (uint64_t)(a3[1] - *a3) >> 5) {
    sub_66748();
  }
  uint64_t v6 = (uint64_t *)(*a3 + 32 * v4);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (*v6 == v8) {
    goto LABEL_56;
  }
  uint64_t v10 = v8 - v7;
  if (v8 - v7 == 104)
  {
    unint64_t v11 = 0;
  }
  else
  {
    uint64_t v12 = 0;
    while (*(_DWORD *)(v7 + v12))
    {
      v12 += 104;
      if (v7 + v12 == v8)
      {
        uint64_t v12 = v8 - v7;
        break;
      }
    }
    unint64_t v11 = 0x4EC4EC4EC4EC4EC5 * (v12 >> 3);
  }
  if (0x4EC4EC4EC4EC4EC5 * (v10 >> 3) <= v11) {
LABEL_56:
  }
    sub_66748();
  uint64_t v13 = v7 + 104 * v11;
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v15 = *(void *)(v13 + 16);
  if (v14 == v15) {
    return 0;
  }
  while ((*(_DWORD *)v14 - 5) < 2)
  {
    v14 += 5704;
    if (v14 == v15) {
      return 0;
    }
  }
  if (*(_DWORD *)v14 != 2) {
    return 0;
  }
  if (!*(unsigned char *)(v14 + 792)) {
    goto LABEL_55;
  }
  unint64_t v16 = *(void *)(v14 + 752);
  uint64_t v17 = a4[9];
  unint64_t v18 = 0x66FD0EB66FD0EB67 * ((a4[10] - v17) >> 3);
  if (v18 <= v16) {
    goto LABEL_58;
  }
  uint64_t v19 = a2[1];
  uint64_t v20 = a2[2];
  if (v19 != v20)
  {
    while (*(_DWORD *)v19 != 2)
    {
      v19 += 5704;
      if (v19 == v20)
      {
        uint64_t v19 = a2[2];
        break;
      }
    }
  }
  if (!*(unsigned char *)(v19 + 792))
  {
LABEL_55:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  unint64_t v21 = *(void *)(v19 + 752);
  if (v18 <= v21) {
LABEL_58:
  }
    sub_66748();
  if (*(void *)(v17 + 696 * v21 + 64) == *(void *)(v17 + 696 * v16 + 64)) {
    return 1;
  }
  sub_9EBF84(a1, a4, v21, &__s1);
  sub_9EBF84(a1, a4, v16, __p);
  unsigned __int8 v24 = v42;
  if ((v42 & 0x80u) == 0) {
    size_t v25 = v42;
  }
  else {
    size_t v25 = __n;
  }
  unint64_t v26 = v39;
  int v27 = (char)v39;
  if ((v39 & 0x80u) != 0) {
    unint64_t v26 = (unint64_t)__p[1];
  }
  if (v25 == v26)
  {
    if ((v39 & 0x80u) == 0) {
      uint64_t v28 = __p;
    }
    else {
      uint64_t v28 = (void **)__p[0];
    }
    if ((v42 & 0x80) != 0)
    {
      BOOL v22 = memcmp(__s1, v28, __n) == 0;
    }
    else if (v42)
    {
      uint64_t v29 = v42 - 1;
      p_s1 = &__s1;
      do
      {
        int v32 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v31 = v32;
        int v34 = *(unsigned __int8 *)v28;
        uint64_t v28 = (void **)((char *)v28 + 1);
        int v33 = v34;
        BOOL v36 = v29-- != 0;
        BOOL v22 = v31 == v33;
      }
      while (v31 == v33 && v36);
    }
    else
    {
      BOOL v22 = 1;
    }
  }
  else
  {
    BOOL v22 = 0;
  }
  if (v27 < 0)
  {
    operator delete(__p[0]);
    if ((v24 & 0x80) == 0) {
      return v22;
    }
  }
  else if ((v24 & 0x80) == 0)
  {
    return v22;
  }
  operator delete(__s1);
  return v22;
}

void sub_9EB3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_9EB3C0@<X0>(std::string *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a2 + 16);
  if (!*(unsigned char *)(v5 - 4912))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  int v6 = *(_DWORD *)(v5 - 5616);
  if (v6 == 0x7FFFFFFF)
  {
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_DWORD *)(a4 + 72) = 0x7FFFFFFF;
  }
  else
  {
    *(void *)(a4 + 64) = 0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_DWORD *)(a4 + 72) = v6;
    unint64_t v7 = *(void *)(v5 - 5656);
    uint64_t v8 = *a3;
    if (0xCF3CF3CF3CF3CF3DLL * ((a3[1] - *a3) >> 3) <= v7) {
      sub_66748();
    }
    uint64_t v9 = result;
    sub_97C7FC(v8 + 168 * v7, (uint64_t)a3, (uint64_t)&v13);
    uint64_t v10 = (void **)(a4 + 24);
    if (*(char *)(a4 + 47) < 0) {
      operator delete(*v10);
    }
    *(_OWORD *)uint64_t v10 = v13;
    *(void *)(a4 + 40) = v14;
    if (!*(unsigned char *)(v5 - 4912))
    {
      uint64_t v12 = __cxa_allocate_exception(8uLL);
      *uint64_t v12 = &off_2439078;
    }
    sub_9EADC4(v9->__r_.__value_.__l.__size_, (unint64_t *)(v5 - 4936), *(_DWORD *)(v5 - 4924), &v13);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(_OWORD *)a4 = v13;
    *(void *)(a4 + 16) = v14;
    return std::string::operator=((std::string *)(a4 + 48), (const std::string *)(v8 + 168 * v7 + 136));
  }
  return result;
}

void sub_9EB5A8(_Unwind_Exception *a1)
{
  sub_29D7B0(v1);
  _Unwind_Resume(a1);
}

void sub_9EB5BC(_Unwind_Exception *a1)
{
  sub_29D7B0(v1);
  _Unwind_Resume(a1);
}

void sub_9EB5D0(_Unwind_Exception *a1)
{
  sub_29D7B0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9EB5E4(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  unint64_t v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)unint64_t v7 = v8;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  return a1;
}

void sub_9EB6A0(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, unint64_t **a5@<X8>)
{
  uint64_t v5 = a4;
  long long v8 = a1;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  uint64_t __p = 0;
  while (1)
  {
    unint64_t v12 = a2[7];
    if (v12 == -1)
    {
LABEL_43:
      if (__p != v11)
      {
        int v34 = __p;
        do
        {
          sub_7A06C8((uint64_t)(v8 + 3), v34, v34);
          ++v34;
        }
        while (v34 != v11);
      }
      *a5 = __p;
      a5[1] = v11;
      a5[2] = v10;
      return;
    }
    if (v12 >= (uint64_t)(a3[1] - *a3) >> 5) {
      sub_66748();
    }
    long long v13 = (uint64_t *)(*a3 + 32 * v12);
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v13[1] - *v13) >> 3)) > 1) {
      break;
    }
    if (v11 < v10)
    {
      *v11++ = v12;
      goto LABEL_22;
    }
    uint64_t v14 = v11 - v9;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      sub_2E00();
    }
    if (((char *)v10 - (char *)v9) >> 2 > v15) {
      unint64_t v15 = ((char *)v10 - (char *)v9) >> 2;
    }
    if ((unint64_t)((char *)v10 - (char *)v9) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 >> 61) {
        sub_188D718();
      }
      uint64_t v17 = operator new(8 * v16);
      unint64_t v18 = (unint64_t *)&v17[8 * v14];
      *unint64_t v18 = v12;
      uint64_t v19 = (uint64_t)(v18 + 1);
      if (v11 == v9)
      {
LABEL_34:
        uint64_t v10 = (unint64_t *)&v17[8 * v16];
        uint64_t __p = v18;
        if (!v9) {
          goto LABEL_21;
        }
LABEL_20:
        operator delete(v9);
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v17 = 0;
      unint64_t v18 = (unint64_t *)(8 * v14);
      *(void *)(8 * v14) = v12;
      uint64_t v19 = 8 * v14 + 8;
      if (v11 == v9) {
        goto LABEL_34;
      }
    }
    unint64_t v20 = (char *)(v11 - 1) - (char *)v9;
    if (v20 < 0x168
      || &v17[(char *)v11 - (char *)v9 - 8 - (v20 & 0xFFFFFFFFFFFFFFF8)] > &v17[(char *)v11 - (char *)v9 - 8]
      || (unint64_t *)((char *)v11 - (v20 & 0xFFFFFFFFFFFFFFF8) - 8) > v11 - 1
      || (unint64_t)((char *)v9 - v17) < 0x20)
    {
      unint64_t v21 = v11;
      do
      {
LABEL_18:
        unint64_t v22 = *--v21;
        *--unint64_t v18 = v22;
      }
      while (v21 != v9);
      goto LABEL_19;
    }
    uint64_t v28 = (v20 >> 3) + 1;
    uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v21 = &v11[v29 / 0xFFFFFFFFFFFFFFF8];
    unint64_t v18 = (unint64_t *)((char *)v18 - v29);
    unint64_t v30 = &v17[8 * v14 - 16];
    int v31 = v11 - 2;
    uint64_t v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v33 = *(_OWORD *)v31;
      *(v30 - 1) = *((_OWORD *)v31 - 1);
      *unint64_t v30 = v33;
      v30 -= 2;
      v31 -= 4;
      v32 -= 4;
    }
    while (v32);
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_18;
    }
LABEL_19:
    uint64_t v10 = (unint64_t *)&v17[8 * v16];
    uint64_t __p = v18;
    if (v9) {
      goto LABEL_20;
    }
LABEL_21:
    uint64_t v9 = v18;
    unint64_t v11 = (unint64_t *)v19;
    uint64_t v5 = a4;
    long long v8 = a1;
LABEL_22:
    uint64_t v23 = *v13;
    uint64_t v24 = v13[1];
    if (*v13 == v24) {
      goto LABEL_52;
    }
    uint64_t v25 = v24 - v23;
    if (v24 - v23 == 104)
    {
      unint64_t v26 = 0;
    }
    else
    {
      uint64_t v27 = 0;
      while (*(_DWORD *)(v23 + v27))
      {
        v27 += 104;
        if (v23 + v27 == v24)
        {
          uint64_t v27 = v24 - v23;
          break;
        }
      }
      unint64_t v26 = 0x4EC4EC4EC4EC4EC5 * (v27 >> 3);
    }
    if (0x4EC4EC4EC4EC4EC5 * (v25 >> 3) <= v26) {
LABEL_52:
    }
      sub_66748();
    a2 = (void *)(v23 + 104 * v26);
    if ((sub_9EB09C(v8, a2, a3, v5) & 1) == 0) {
      goto LABEL_43;
    }
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (__p)
  {
    operator delete(__p);
  }
}

void sub_9EBA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9EBA30(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    goto LABEL_11;
  }
  uint64_t v3 = v2 - v1;
  if (v2 - v1 == 104)
  {
    unint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    while (*(_DWORD *)(v1 + v5))
    {
      v5 += 104;
      if (v1 + v5 == v2)
      {
        uint64_t v5 = v2 - v1;
        break;
      }
    }
    unint64_t v4 = 0x4EC4EC4EC4EC4EC5 * (v5 >> 3);
  }
  if (0x4EC4EC4EC4EC4EC5 * (v3 >> 3) <= v4) {
LABEL_11:
  }
    sub_66748();
  return v1 + 104 * v4;
}

std::string *sub_9EBAC8@<X0>(std::string *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  if (v7)
  {
    uint64_t v9 = result->__r_.__value_.__r.__words[2];
    uint64_t __p = operator new(0x20uLL);
    long long v39 = xmmword_20B8E90;
    strcpy((char *)__p, "Origin_Stop_to_Destination_Stop");
    uint64_t v10 = sub_8D7730(v9, (uint64_t)&__p);
    if (*((char *)v10 + 23) < 0)
    {
      sub_4200((unsigned char *)a4, (void *)*v10, v10[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)v10;
      *(void *)(a4 + 16) = v10[2];
      *(_OWORD *)a4 = v11;
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(__p);
    }
    int64_t v12 = *(unsigned __int8 *)(a4 + 23);
    unsigned __int8 v13 = v12;
    uint64_t v14 = *(std::string **)a4;
    if ((v12 & 0x80u) == 0) {
      BOOL result = (std::string *)a4;
    }
    else {
      BOOL result = *(std::string **)a4;
    }
    if (byte_25DEE8F >= 0) {
      unint64_t v15 = &qword_25DEE78;
    }
    else {
      unint64_t v15 = (uint64_t *)qword_25DEE78;
    }
    if (byte_25DEE8F >= 0) {
      int64_t v16 = byte_25DEE8F;
    }
    else {
      int64_t v16 = *(void *)&dword_25DEE80;
    }
    if (v16)
    {
      if ((v12 & 0x80u) != 0) {
        int64_t v12 = *(void *)(a4 + 8);
      }
      if (v12 >= v16)
      {
        uint64_t v17 = (std::string *)((char *)result + v12);
        int v18 = *(char *)v15;
        size_t v37 = result;
        do
        {
          uint64_t v19 = v12 - v16;
          if (v19 == -1) {
            break;
          }
          BOOL result = (std::string *)memchr(result, v18, v19 + 1);
          if (!result) {
            break;
          }
          unint64_t v20 = result;
          BOOL result = (std::string *)memcmp(result, v15, v16);
          if (!result)
          {
            if (v20 != v17)
            {
              std::string::size_type v21 = (char *)v20 - (char *)v37;
              if ((char *)v20 - (char *)v37 != -1) {
                goto LABEL_33;
              }
            }
            break;
          }
          BOOL result = (std::string *)((char *)&v20->__r_.__value_.__l.__data_ + 1);
          int64_t v12 = (char *)v17 - ((char *)&v20->__r_.__value_.__l.__data_ + 1);
        }
        while (v12 >= v16);
      }
    }
    else
    {
      std::string::size_type v21 = 0;
LABEL_33:
      int v22 = *(char *)(a2 + 23);
      if (v22 >= 0) {
        uint64_t v23 = (const std::string::value_type *)a2;
      }
      else {
        uint64_t v23 = *(const std::string::value_type **)a2;
      }
      if (v22 >= 0) {
        std::string::size_type v24 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v24 = *(void *)(a2 + 8);
      }
      BOOL result = std::string::replace((std::string *)a4, v21, v16, v23, v24);
      unsigned __int8 v13 = *(unsigned char *)(a4 + 23);
      uint64_t v14 = *(std::string **)a4;
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v25 = (std::string *)a4;
    }
    else {
      uint64_t v25 = v14;
    }
    if (byte_25DEEA7 >= 0) {
      unint64_t v26 = &xmmword_25DEE90;
    }
    else {
      unint64_t v26 = (long long *)xmmword_25DEE90;
    }
    if (byte_25DEEA7 >= 0) {
      int64_t v27 = byte_25DEEA7;
    }
    else {
      int64_t v27 = *((void *)&xmmword_25DEE90 + 1);
    }
    if (v27)
    {
      if ((v13 & 0x80u) == 0) {
        int64_t v28 = v13;
      }
      else {
        int64_t v28 = *(void *)(a4 + 8);
      }
      if (v28 >= v27)
      {
        uint64_t v29 = (std::string *)((char *)v25 + v28);
        int v30 = *(char *)v26;
        BOOL result = v25;
        do
        {
          uint64_t v31 = v28 - v27;
          if (v31 == -1) {
            break;
          }
          BOOL result = (std::string *)memchr(result, v30, v31 + 1);
          if (!result) {
            break;
          }
          uint64_t v32 = result;
          BOOL result = (std::string *)memcmp(result, v26, v27);
          if (!result)
          {
            if (v32 != v29)
            {
              std::string::size_type v33 = (char *)v32 - (char *)v25;
              if ((char *)v32 - (char *)v25 != -1) {
                goto LABEL_61;
              }
            }
            return result;
          }
          BOOL result = (std::string *)((char *)&v32->__r_.__value_.__l.__data_ + 1);
          int64_t v28 = (char *)v29 - ((char *)&v32->__r_.__value_.__l.__data_ + 1);
        }
        while (v28 >= v27);
      }
    }
    else
    {
      std::string::size_type v33 = 0;
LABEL_61:
      int v34 = *(char *)(a3 + 23);
      if (v34 >= 0) {
        uint64_t v35 = (const std::string::value_type *)a3;
      }
      else {
        uint64_t v35 = *(const std::string::value_type **)a3;
      }
      if (v34 >= 0) {
        std::string::size_type v36 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v36 = *(void *)(a3 + 8);
      }
      return std::string::replace((std::string *)a4, v33, v27, v35, v36);
    }
  }
  else
  {
LABEL_9:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  return result;
}

void sub_9EBD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_9EBDBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  unint64_t v8 = *(void *)(a2 + 88);
  if (v8 >= *(void *)(a2 + 96))
  {
    uint64_t v9 = sub_9EC19C((void **)(a2 + 80), (long long *)a3, (long long *)a4);
    *(void *)(a2 + 88) = v9;
    if (*a5 == a5[1]) {
      return;
    }
  }
  else
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_4200(&__dst, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      long long __dst = *(_OWORD *)a3;
      uint64_t v20 = *(void *)(a3 + 16);
    }
    if (*(char *)(a4 + 23) < 0)
    {
      sub_4200(&v17, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      long long v17 = *(_OWORD *)a4;
      uint64_t v18 = *(void *)(a4 + 16);
    }
    long long v10 = __dst;
    *(void *)(v8 + 16) = v20;
    *(_OWORD *)unint64_t v8 = v10;
    *(_OWORD *)(v8 + 24) = v17;
    *(void *)(v8 + 40) = v18;
    *(void *)(v8 + 48) = 0;
    *(void *)(v8 + 56) = 0;
    *(void *)(v8 + 64) = 0;
    uint64_t v9 = (char *)(v8 + 72);
    *(void *)(a2 + 88) = v8 + 72;
    *(void *)(a2 + 88) = v8 + 72;
    if (*a5 == a5[1]) {
      return;
    }
  }
  long long v11 = (void *)*((void *)v9 - 2);
  if ((unint64_t)v11 >= *((void *)v9 - 1))
  {
    int64_t v12 = sub_9EC480((void ***)v9 - 3);
    *((void *)v9 - 2) = v12;
    unsigned __int8 v13 = *a5;
    uint64_t v14 = a5[1];
    if (*a5 == v14) {
      return;
    }
  }
  else
  {
    *long long v11 = 0;
    v11[1] = 0;
    int64_t v12 = (void **)(v11 + 3);
    v11[2] = 0;
    *((void *)v9 - 2) = v11 + 3;
    unsigned __int8 v13 = *a5;
    uint64_t v14 = a5[1];
    if (*a5 == v14) {
      return;
    }
  }
  uint64_t v15 = *(v12 - 2);
  do
  {
    while (1)
    {
      uint64_t v16 = *v13;
      *(void *)&long long __dst = *v13;
      if (v15 < *(v12 - 1)) {
        break;
      }
      uint64_t v15 = sub_9EC610(v12 - 3, &__dst);
      *(v12 - 2) = v15;
      if (++v13 == v14) {
        return;
      }
    }
    *uint64_t v15 = v16;
    v15[1] = 0;
    v15[2] = 0;
    v15[3] = 0;
    v15 += 4;
    *(v12 - 2) = v15;
    ++v13;
  }
  while (v13 != v14);
}

void sub_9EBF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    *(void *)(v18 + 88) = v19;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v18 + 88) = v19;
  _Unwind_Resume(exception_object);
}

int *sub_9EBF84@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = a2[9];
  if (0x66FD0EB66FD0EB67 * ((a2[10] - v6) >> 3) <= a3) {
    sub_66748();
  }
  unint64_t v7 = *(void *)(v6 + 696 * a3 + 64);
  uint64_t v8 = a2[12];
  if (0x4EC4EC4EC4EC4EC5 * ((a2[13] - v8) >> 4) <= v7) {
    sub_66748();
  }
  uint64_t v9 = v6 + 696 * a3;
  unint64_t v11 = *(void *)(v9 + 56);
  long long v10 = (unint64_t *)(v9 + 56);
  int64_t v12 = (int *)sub_8DFD1C(a1[1], v11, 0, "line");
  unsigned __int8 v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 >= 0x55u && v13[42])
  {
    BOOL result = (int *)sub_8DFD1C(a1[1], *v10, 0, "line");
    uint64_t v15 = (unsigned __int16 *)((char *)result - *result);
    if (*v15 < 0x55u || (uint64_t v16 = v15[42]) == 0)
    {
LABEL_15:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return result;
    }
  }
  else
  {
    BOOL result = (int *)sub_8EF9B8(*a1, *(void *)(v8 + 208 * v7 + 56), 0, "system");
    long long v17 = (unsigned __int16 *)((char *)result - *result);
    if (*v17 < 0x17u) {
      goto LABEL_15;
    }
    uint64_t v16 = v17[11];
    if (!v16) {
      goto LABEL_15;
    }
  }
  uint64_t v18 = (int *)((char *)result + v16 + *(unsigned int *)((char *)result + v16));
  uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 <= 4u || (uint64_t v20 = v19[2]) == 0)
  {
    *((unsigned char *)a4 + 23) = 0;
    *(unsigned char *)a4 = 0;
    return result;
  }
  std::string::size_type v21 = (unsigned int *)((char *)v18 + v20);
  uint64_t v22 = *v21;
  std::string::size_type v24 = (char *)v21 + v22 + 4;
  size_t v23 = *(unsigned int *)((char *)v21 + v22);
  if (v23 >= 0x17)
  {
    if ((v23 | 7) == 0x17) {
      uint64_t v25 = (v23 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v25 = v23 | 7;
    }
    unint64_t v26 = operator new(v25 + 1);
    a4[1] = v23;
    a4[2] = v25 - 0x7FFFFFFFFFFFFFFFLL;
    *a4 = v26;
    a4 = v26;
  }
  else
  {
    *((unsigned char *)a4 + 23) = v23;
    if (!v23) {
      goto LABEL_22;
    }
  }
  BOOL result = (int *)memcpy(a4, v24, v23);
LABEL_22:
  *((unsigned char *)a4 + v23) = 0;
  return result;
}

char *sub_9EC19C(void **a1, long long *a2, long long *a3)
{
  unint64_t v4 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v5) {
    unint64_t v5 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v8 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v8 = v5;
  }
  uint64_t v22 = (uint64_t)(a1 + 2);
  if (v8)
  {
    if (v8 > 0x38E38E38E38E38ELL) {
      sub_188D718();
    }
    uint64_t v9 = (char *)operator new(72 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  long long v10 = &v9[72 * v4];
  unint64_t v11 = &v9[72 * v8];
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(&__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __dst = *a2;
    uint64_t v26 = *((void *)a2 + 2);
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_4200(&v23, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v23 = *a3;
    uint64_t v24 = *((void *)a3 + 2);
  }
  *(_OWORD *)long long v10 = __dst;
  *((void *)v10 + 2) = v26;
  int64_t v12 = &v9[72 * v4];
  *(_OWORD *)(v12 + 24) = v23;
  *((void *)v12 + 5) = v24;
  *((void *)v12 + 6) = 0;
  *((void *)v12 + 7) = 0;
  *((void *)v12 + 8) = 0;
  unsigned __int8 v13 = v10 + 72;
  uint64_t v20 = v10 + 72;
  uint64_t v15 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    uint64_t v18 = (char *)a1[1];
  }
  else
  {
    do
    {
      long long v16 = *(_OWORD *)(v14 - 72);
      *((void *)v10 - 7) = *((void *)v14 - 7);
      *(_OWORD *)(v10 - 72) = v16;
      *((void *)v14 - 8) = 0;
      *((void *)v14 - 7) = 0;
      *((void *)v14 - 9) = 0;
      long long v17 = *((_OWORD *)v14 - 3);
      *((void *)v10 - 4) = *((void *)v14 - 4);
      *((_OWORD *)v10 - 3) = v17;
      *((void *)v14 - 5) = 0;
      *((void *)v14 - 4) = 0;
      *((void *)v14 - 6) = 0;
      *((void *)v10 - 3) = 0;
      *((void *)v10 - 2) = 0;
      *((void *)v10 - 1) = 0;
      *(_OWORD *)(v10 - 24) = *(_OWORD *)(v14 - 24);
      *((void *)v10 - 1) = *((void *)v14 - 1);
      v10 -= 72;
      *((void *)v14 - 3) = 0;
      *((void *)v14 - 2) = 0;
      *((void *)v14 - 1) = 0;
      v14 -= 72;
    }
    while (v14 != v15);
    uint64_t v18 = (char *)*a1;
    uint64_t v14 = (char *)a1[1];
    unsigned __int8 v13 = v20;
  }
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  if (v14 != v18)
  {
    do
    {
      std::string::size_type v21 = v14 - 72;
      sub_993404(v22, (uint64_t)(v14 - 72));
      uint64_t v14 = v21;
    }
    while (v21 != v18);
    uint64_t v14 = v18;
  }
  if (v14) {
    operator delete(v14);
  }
  return v13;
}

void sub_9EC3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_9EC428((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  sub_9EC428((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_9EC428(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 72;
    sub_993404(v4, i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void **sub_9EC480(void ***a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v2 - *a1);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (a1[2] - v3) > v5) {
    unint64_t v5 = 0x5555555555555556 * (a1[2] - v3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - v3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = &v7[24 * v4];
  uint64_t v9 = &v7[24 * v6];
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  long long v10 = (void **)(v8 + 24);
  if (v2 == v3)
  {
    *a1 = (void **)v8;
    a1[1] = v10;
    a1[2] = (void **)v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_26;
  }
  do
  {
    unint64_t v11 = v8;
    *((void *)v8 - 2) = 0;
    *((void *)v8 - 1) = 0;
    long long v12 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)(v8 - 24) = v12;
    v8 -= 24;
    *((void *)v11 - 1) = v2[2];
    *uint64_t v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  while (v2 != v3);
  unsigned __int8 v13 = *a1;
  uint64_t v2 = a1[1];
  *a1 = (void **)v8;
  a1[1] = v10;
  a1[2] = (void **)v9;
  if (v2 != v13)
  {
    uint64_t v14 = v2;
    do
    {
      long long v17 = (char *)*(v14 - 3);
      v14 -= 3;
      long long v16 = v17;
      if (v17)
      {
        uint64_t v18 = (char *)*(v2 - 2);
        uint64_t v15 = v16;
        if (v18 != v16)
        {
          do
          {
            uint64_t v19 = (void *)*((void *)v18 - 3);
            if (v19)
            {
              *((void *)v18 - 2) = v19;
              operator delete(v19);
            }
            v18 -= 32;
          }
          while (v18 != v16);
          uint64_t v15 = *v14;
        }
        *(v2 - 2) = v16;
        operator delete(v15);
      }
      uint64_t v2 = v14;
    }
    while (v14 != v13);
    uint64_t v2 = v13;
  }
  if (v2) {
LABEL_26:
  }
    operator delete(v2);
  return v10;
}

void *sub_9EC610(void **a1, void *a2)
{
  unint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v5 = (v3 - (unsigned char *)*a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    long long v10 = (char *)operator new(32 * v9);
  }
  else
  {
    long long v10 = 0;
  }
  unint64_t v11 = &v10[32 * v5];
  *(void *)unint64_t v11 = *a2;
  *((void *)v11 + 1) = 0;
  long long v12 = &v10[32 * v9];
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  unsigned __int8 v13 = v11 + 32;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v3) {
      return v13;
    }
    goto LABEL_21;
  }
  uint64_t v14 = 0;
  do
  {
    uint64_t v15 = &v11[v14];
    long long v16 = &v3[v14];
    *((void *)v15 - 4) = *(void *)&v3[v14 - 32];
    *((void *)v15 - 2) = 0;
    *((void *)v15 - 1) = 0;
    *(_OWORD *)(v15 - 24) = *(_OWORD *)&v3[v14 - 24];
    *((void *)v15 - 1) = *(void *)&v3[v14 - 8];
    *((void *)v16 - 3) = 0;
    *((void *)v16 - 2) = 0;
    *((void *)v16 - 1) = 0;
    v14 -= 32;
  }
  while (&v3[v14] != v4);
  long long v17 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  *a1 = &v11[v14];
  a1[1] = v13;
  a1[2] = v12;
  if (v3 != v17)
  {
    do
    {
      uint64_t v18 = (void *)*((void *)v3 - 3);
      if (v18)
      {
        *((void *)v3 - 2) = v18;
        operator delete(v18);
      }
      v3 -= 32;
    }
    while (v3 != v17);
    uint64_t v3 = v17;
  }
  if (v3) {
LABEL_21:
  }
    operator delete(v3);
  return v13;
}

unsigned char *sub_9EC768()
{
  byte_25DEDCF = 1;
  word_25DEDB8 = 65;
  byte_25DEDE7 = 1;
  word_25DEDD0 = 65;
  char v3 = 7;
  strcpy((char *)v2, "UNKNOWN");
  int v4 = 0;
  char v6 = 14;
  strcpy((char *)v5, "ROUTES_THROUGH");
  int v7 = 1;
  char v9 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v10 = 3;
  char v12 = 11;
  strcpy((char *)v11, "ROUTES_FROM");
  int v13 = 2;
  xmmword_25DEEA8 = 0u;
  *(_OWORD *)&qword_25DEEB8 = 0u;
  dword_25DEEC8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DEEA8, (uint64_t)v2, (uint64_t)v2);
  sub_3A6EF0((uint64_t)&xmmword_25DEEA8, (uint64_t)v5, (uint64_t)v5);
  sub_3A6EF0((uint64_t)&xmmword_25DEEA8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DEEA8, (uint64_t)v11, (uint64_t)v11);
  if (v12 < 0)
  {
    operator delete(v11[0]);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v6 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v5[0]);
      if ((v3 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v2[0]);
      goto LABEL_5;
    }
  }
  else if ((v9 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v6 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v3 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DEDFF = 8;
  strcpy((char *)&qword_25DEDE8, "any_mode");
  byte_25DEE17 = 7;
  strcpy((char *)&dword_25DEE00, "cycling");
  byte_25DEE2F = 7;
  strcpy((char *)&dword_25DEE18, "driving");
  byte_25DEE47 = 7;
  strcpy((char *)&dword_25DEE30, "walking");
  qword_25DEE50 = 0;
  qword_25DEE58 = 0;
  qword_25DEE48 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DEE48 = (uint64_t)v0;
  qword_25DEE50 = (uint64_t)(v0 + 9);
  qword_25DEE58 = (uint64_t)(v0 + 9);
  qword_25DEE60 = 0;
  qword_25DEE68 = 0;
  qword_25DEE70 = 0;
  BOOL result = operator new(9uLL);
  *(void *)BOOL result = 0x604020C00010305;
  result[8] = 13;
  qword_25DEE60 = (uint64_t)result;
  qword_25DEE68 = (uint64_t)(result + 9);
  byte_25DEE8F = 12;
  qword_25DEE70 = (uint64_t)(result + 9);
  strcpy((char *)&qword_25DEE78, "{OriginStop}");
  byte_25DEEA7 = 17;
  strcpy((char *)&xmmword_25DEE90, "{DestinationStop}");
  return result;
}

void sub_9ECA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DEEB8) {
    sub_20AD9A0((void **)qword_25DEEB8);
  }
  size_t v37 = (void *)xmmword_25DEEA8;
  *(void *)&xmmword_25DEEA8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_9ECB14(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a3;
  sub_98FD2C(a2, (uint64_t)(a1 + 1));
  return a1;
}

void sub_9ECB48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  char v3 = *(void **)(a2 + 8);
  if (*(void **)a2 != v3)
  {
    uint64_t v5 = a2 + 24;
    uint64_t v6 = a2 + 288;
    do
    {
      sub_9ECBAC(a1, v2, v5, v6);
      v2 += 390;
    }
    while (v2 != v3);
  }
}

void sub_9ECBAC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_9E6208((uint64_t)v21, a2);
  while (1)
  {
    sub_9E6260((uint64_t)v21, v15);
    BOOL v7 = sub_9E6044(v21, v15);
    sub_9467EC((uint64_t)&v20);
    uint64_t v8 = __p;
    if (__p)
    {
      do
      {
        char v9 = (void *)*v8;
        operator delete(v8);
        uint64_t v8 = v9;
      }
      while (v9);
    }
    int v10 = v18;
    uint64_t v18 = 0;
    if (v10) {
      operator delete(v10);
    }
    if (v16)
    {
      long long v17 = v16;
      operator delete(v16);
    }
    if (!v7) {
      break;
    }
    if (*(_DWORD *)sub_9E6230((uint64_t)v21) == 2)
    {
      uint64_t v11 = sub_9E6230((uint64_t)v21);
      if (sub_9ECF24(v11, v11))
      {
        sub_9E5A94((uint64_t)v21, 0xFFFFFFFFFFFFFFFFLL, (char **)v15);
        *(_DWORD *)(v11 + 1008) = sub_9ECDC4(a1, v11, (void **)v15, a3, a4);
        if (v15[0])
        {
          v15[1] = v15[0];
          operator delete(v15[0]);
        }
      }
    }
    sub_9E5780(v21);
  }
  sub_9467EC((uint64_t)&v26);
  char v12 = v25;
  if (v25)
  {
    do
    {
      int v13 = (void *)*v12;
      operator delete(v12);
      char v12 = v13;
    }
    while (v13);
  }
  uint64_t v14 = v24;
  uint64_t v24 = 0;
  if (v14) {
    operator delete(v14);
  }
  if (v22)
  {
    long long v23 = v22;
    operator delete(v22);
  }
}

void sub_9ECD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (__p)
  {
    operator delete(__p);
    sub_945B38(&a28);
    _Unwind_Resume(a1);
  }
  sub_945B38(&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_9ECD80(void **a1)
{
  for (uint64_t i = *a1; i != a1[1]; ++i)
  {
    uint64_t v2 = (_DWORD *)*i;
    if (*(_DWORD *)*i == 2 && *((unsigned char *)v2 + 792) && *((unsigned char *)v2 + 744)) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_9ECDC4(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5)
{
  int v7 = *(_DWORD *)(a2 + 116);
  uint64_t result = 5;
  switch(*(unsigned char *)(*(void *)(a4 + 72) + 696 * *(void *)(a2 + 752) + 554))
  {
    case 0:
    case 1:
    case 5:
      if (!sub_BB7C((_DWORD *)(a2 + 144))) {
        goto LABEL_17;
      }
      if (sub_98EC14(*(_DWORD *)(a5 + 4), a2, *(void *)a1, (int *)(a1 + 8))) {
        uint64_t result = 4;
      }
      else {
        uint64_t result = 2;
      }
      break;
    case 2:
      if (v7 == 0x7FFFFFFF) {
        uint64_t result = 2;
      }
      else {
        uint64_t result = 1;
      }
      break;
    case 3:
      if (v7 == 0x7FFFFFFF)
      {
        uint64_t result = 2;
      }
      else
      {
        if (*(void *)(a2 + 440) == *(void *)(a2 + 448)
          || *(unsigned __int8 *)(*(void *)a1 + 1177) < 9u
          || !sub_BB7C((_DWORD *)(a2 + 144)))
        {
          goto LABEL_17;
        }
        if (sub_9ECD80(a3)) {
          uint64_t result = 1;
        }
        else {
          uint64_t result = 3;
        }
      }
      break;
    case 4:
      return result;
    default:
LABEL_17:
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t sub_9ECF24(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)(a2 + 1008))
  {
    case 1:
      if (!*(unsigned char *)(a2 + 792)) {
        goto LABEL_26;
      }
      if (*(_DWORD *)(a2 + 116) != 0x7FFFFFFF) {
        return 0;
      }
      if (!sub_723EC(1u)) {
        goto LABEL_6;
      }
      sub_6BAC((uint64_t)v6);
      sub_188FC78(v6, (uint64_t)"Encoded time display type of single departure but step is missing a departure time", 82);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_20;
    case 2:
      if (!*(unsigned char *)(a2 + 792)) {
        goto LABEL_26;
      }
      if (sub_BB7C((_DWORD *)(a2 + 144))) {
        return 0;
      }
      if (!sub_723EC(1u)) {
        goto LABEL_6;
      }
      sub_6BAC((uint64_t)v6);
      sub_188FC78(v6, (uint64_t)"Encoded time display type of frequency in route handle but step does not have a frequency", 89);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_20;
    case 3:
      if (!*(unsigned char *)(a2 + 792)) {
        goto LABEL_26;
      }
      if (*(_DWORD *)(a2 + 116) != 0x7FFFFFFF && *(void *)(a2 + 440) != *(void *)(a2 + 448)) {
        return 0;
      }
      if (!sub_723EC(1u)) {
        goto LABEL_6;
      }
      sub_6BAC((uint64_t)v6);
      sub_188FC78(v6, (uint64_t)"Encoded time display type of multiple departures in route handle but step has no future departures", 98);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
      goto LABEL_20;
    case 4:
      if (!*(unsigned char *)(a2 + 792))
      {
LABEL_26:
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      if (*(void *)(a2 + 488) == *(void *)(a2 + 496)) {
        return 0;
      }
      if (!sub_723EC(1u)) {
        goto LABEL_6;
      }
      sub_6BAC((uint64_t)v6);
      sub_188FC78(v6, (uint64_t)"Encoded time display type of countdown in route handle but step has no upcoming departures", 90);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 1u);
LABEL_20:
      if (v5 < 0) {
        operator delete(__p[0]);
      }
      if (v7 < 0) {
        operator delete((void *)v6[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      uint64_t result = 1;
      break;
    case 5:
      return 0;
    default:
LABEL_6:
      uint64_t result = 1;
      break;
  }
  return result;
}

void sub_9ED288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double sub_9ED36C()
{
  byte_25DEEE7 = 1;
  word_25DEED0 = 65;
  byte_25DEEFF = 1;
  word_25DEEE8 = 65;
  byte_25DEF17 = 6;
  strcpy((char *)&dword_25DEF00, "{Mode}");
  byte_25DEF2F = 11;
  strcpy((char *)&qword_25DEF18, "{Direction}");
  byte_25DEF47 = 6;
  strcpy((char *)&dword_25DEF30, "{Line}");
  byte_25DEF5F = 12;
  strcpy((char *)&qword_25DEF48, "{LineNumber}");
  strcpy(&byte_25DEF77, "\n{Headsign1}");
  strcpy((char *)&qword_25DEF60, "{Headsign}");
  byte_25DEF8F = 11;
  byte_25DEFA7 = 11;
  strcpy((char *)&qword_25DEF90, "{Headsign2}");
  byte_25DEFBF = 11;
  strcpy((char *)&qword_25DEFA8, "{Headsign3}");
  byte_25DEFD7 = 11;
  strcpy((char *)&qword_25DEFC0, "{Headsign4}");
  byte_25DEFEF = 11;
  strcpy((char *)&qword_25DEFD8, "{Headsign5}");
  byte_25DF007 = 6;
  strcpy((char *)&dword_25DEFF0, "{Stop}");
  byte_25DF01F = 14;
  strcpy((char *)&qword_25DF008, "{PreviousStop}");
  byte_25DF037 = 8;
  strcpy((char *)&qword_25DF020, "{System}");
  byte_25DF04F = 15;
  strcpy((char *)&qword_25DF038, "{VehicleNumber}");
  byte_25DF067 = 17;
  strcpy((char *)&xmmword_25DF050, "{AccessPointExit}");
  strcpy(&byte_25DF07F, "\n{nextBoardStation}");
  strcpy((char *)&qword_25DF068, "{Platform}");
  byte_25DF097 = 18;
  qword_25DF098 = 0;
  unk_25DF0A0 = 0;
  qword_25DF0A8 = 0;
  byte_25DF0C7 = 1;
  word_25DF0B0 = 32;
  qword_25DF0C8 = (uint64_t)operator new(0x20uLL);
  xmmword_25DF0D0 = xmmword_20B8890;
  strcpy((char *)qword_25DF0C8, "LeaveStop_Loc_Comma_Separator");
  byte_25DF0F7 = 5;
  dword_25DF0E0 = -1028144608;
  word_25DF0E4 = 160;
  byte_25DF10F = 2;
  word_25DF0F8 = -24382;
  byte_25DF0FA = 0;
  byte_25DF127 = 4;
  dword_25DF110 = 548913696;
  byte_25DF114 = 0;
  byte_25DF13F = 15;
  strcpy((char *)&qword_25DF128 + 7, "\xB7 {/s:s}");
  strcpy((char *)&qword_25DF128, "{s:s} ·");
  byte_25DF157 = 6;
  strcpy((char *)&dword_25DF140, "NoType");
  byte_25DF16F = 14;
  strcpy((char *)&qword_25DF158, "{WalkDistance}");
  strcpy(&byte_25DF187, "\n{OneMinute}");
  strcpy((char *)&qword_25DF170, "{WalkTime}");
  byte_25DF19F = 11;
  byte_25DF1B7 = 14;
  strcpy((char *)&qword_25DF1A0, "{StepDuration}");
  byte_25DF1CF = 15;
  strcpy((char *)&qword_25DF1B8, "{TripFrequency}");
  byte_25DF1E7 = 11;
  strcpy((char *)&qword_25DF1D0, "{BoardTime}");
  byte_25DF1FF = 12;
  strcpy((char *)&qword_25DF1E8, "{AlightTime}");
  byte_25DF217 = 21;
  strcpy((char *)&xmmword_25DF200, "{FutureTimestampList}");
  byte_25DF22F = 15;
  strcpy((char *)&qword_25DF218, "{DepartureTime}");
  byte_25DF247 = 13;
  strcpy((char *)&qword_25DF230, "{ArrivalTime}");
  byte_25DF25F = 19;
  strcpy((char *)&xmmword_25DF248, "{TotalWalkDistance}");
  byte_25DF277 = 14;
  strcpy((char *)&qword_25DF260, "{TripDuration}");
  byte_25DF28F = 11;
  strcpy((char *)&qword_25DF278, "{DayOfWeek}");
  byte_25DF2A7 = 6;
  strcpy((char *)&dword_25DF290, "{Date}");
  byte_25DF2BF = 16;
  strcpy((char *)&xmmword_25DF2A8, "{OutTheDoorTime}");
  qword_25DF2C0 = (uint64_t)operator new(0x20uLL);
  unk_25DF2C8 = xmmword_20B91A0;
  strcpy((char *)qword_25DF2C0, "{FirstVehicleDepartureTime}");
  byte_25DF2EF = 18;
  strcpy((char *)&xmmword_25DF2D8, "{RouteArrivalTime}");
  strcpy(&byte_25DF307, "\n{IC_Artwork}");
  strcpy((char *)&qword_25DF2F0, "{BaseFare}");
  byte_25DF31F = 12;
  byte_25DF337 = 11;
  strcpy((char *)&qword_25DF320, "{RT_Symbol}");
  byte_25DF34F = 12;
  strcpy((char *)&qword_25DF338, "{TotalPrice}");
  byte_25DF367 = 13;
  strcpy((char *)&qword_25DF350, "{CheckInTime}");
  byte_25DF37F = 19;
  strcpy((char *)&xmmword_25DF368, "{LiveDepartureTime}");
  strcpy(&byte_25DF397, "\n{LegDuration}");
  strcpy((char *)&qword_25DF380, "{TimeList}");
  byte_25DF3AF = 13;
  byte_25DF3C7 = 15;
  strcpy((char *)&qword_25DF3B0, "{CountdownList}");
  byte_25DF3DF = 3;
  byte_25DF3CA = 125;
  word_25DF3C8 = 25723;
  byte_25DF3CB = 0;
  strcpy(&byte_25DF3F7, "\t{AccessPointArt}");
  strcpy((char *)&qword_25DF3E0, "{LineArt}");
  byte_25DF40F = 16;
  byte_25DF427 = 11;
  strcpy((char *)&qword_25DF410, "{SystemArt}");
  strcpy(&byte_25DF43F, "\n{ServiceBeginTime}");
  strcpy((char *)&qword_25DF428, "{CardName}");
  byte_25DF457 = 18;
  byte_25DF46F = 16;
  strcpy((char *)&xmmword_25DF458, "{ServiceEndTime}");
  byte_25DF487 = 6;
  strcpy((char *)&dword_25DF470, "OnTime");
  byte_25DF49F = 6;
  strcpy((char *)&dword_25DF488, "Delays");
  byte_25DF4B7 = 1;
  word_25DF4A0 = 115;
  byte_25DF4CF = 2;
  strcpy((char *)&word_25DF4B8, "cs");
  byte_25DF4E7 = 1;
  word_25DF4D0 = 112;
  byte_25DF4FF = 5;
  byte_25DF4EC = 101;
  dword_25DF4E8 = 1852394591;
  byte_25DF4ED = 0;
  byte_25DF517 = 7;
  strcpy((char *)&dword_25DF500, "_System");
  strcpy(&byte_25DF52F, "\n_VehicleNumber");
  strcpy((char *)&qword_25DF518, "_Direction");
  byte_25DF547 = 14;
  byte_25DF55F = 12;
  strcpy((char *)&qword_25DF548, "_To_Headsign");
  byte_25DF577 = 16;
  strcpy((char *)&xmmword_25DF560, "_Toward_Headsign");
  strcpy(&byte_25DF58F, "\t_LineNumber");
  strcpy((char *)&qword_25DF578, "_Headsign");
  byte_25DF5A7 = 11;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DF638 = 0u;
  *(_OWORD *)&qword_25DF648 = 0u;
  dword_25DF658 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DF638, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DF638, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DF638, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DF638, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DF5BF = 8;
  strcpy((char *)&qword_25DF5A8, "any_mode");
  byte_25DF5D7 = 7;
  strcpy((char *)&dword_25DF5C0, "cycling");
  byte_25DF5EF = 7;
  strcpy((char *)&dword_25DF5D8, "driving");
  byte_25DF607 = 7;
  strcpy((char *)&dword_25DF5F0, "walking");
  qword_25DF608 = 0;
  unk_25DF610 = 0;
  qword_25DF618 = 0;
  uint64_t v0 = (char *)operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DF608 = (uint64_t)v0;
  unk_25DF610 = v0 + 9;
  qword_25DF618 = (uint64_t)(v0 + 9);
  qword_25DF620 = 0;
  qword_25DF628 = 0;
  unk_25DF630 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DF628 = (uint64_t)(v1 + 9);
  unk_25DF630 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DF620 = (uint64_t)v1;
  return result;
}

void sub_9EDF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DF648) {
    sub_20AD9E4((void **)qword_25DF648);
  }
  size_t v37 = (void *)xmmword_25DF638;
  *(void *)&xmmword_25DF638 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_9EE01C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  char v3 = *(void **)(a2 + 8);
  if (*(void **)a2 != v3)
  {
    do
    {
      sub_9EE068(a1, v2);
      v2 += 390;
    }
    while (v2 != v3);
  }
}

void sub_9EE068(uint64_t a1, void *a2)
{
  sub_9E6208((uint64_t)v16, a2);
  while (1)
  {
    sub_9E6260((uint64_t)v16, v10);
    BOOL v2 = sub_9E6044(v16, v10);
    sub_9467EC((uint64_t)&v15);
    char v3 = __p;
    if (__p)
    {
      do
      {
        char v4 = (void *)*v3;
        operator delete(v3);
        char v3 = v4;
      }
      while (v4);
    }
    int v5 = v13;
    char v13 = 0;
    if (v5) {
      operator delete(v5);
    }
    if (v11)
    {
      char v12 = v11;
      operator delete(v11);
    }
    if (!v2) {
      break;
    }
    if (*(_DWORD *)sub_9E6230((uint64_t)v16) == 2)
    {
      uint64_t v6 = sub_9E6230((uint64_t)v16);
      sub_9EE1C0(v6, v6);
    }
    sub_9E5780(v16);
  }
  sub_9467EC((uint64_t)&v21);
  char v7 = v20;
  if (v20)
  {
    do
    {
      int v8 = (void *)*v7;
      operator delete(v7);
      char v7 = v8;
    }
    while (v8);
  }
  char v9 = v19;
  uint64_t v19 = 0;
  if (v9) {
    operator delete(v9);
  }
  if (v17)
  {
    uint64_t v18 = v17;
    operator delete(v17);
  }
}

void sub_9EE17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_9EE198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_9EE1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_9EE1C0(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 792))
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_2439078;
  }
  if (*(unsigned char *)(a2 + 784))
  {
    int v3 = *(_DWORD *)(a2 + 1008);
    if ((v3 - 2) >= 3)
    {
      if (v3 == 1 && *(_DWORD *)(a2 + 116) != 0x7FFFFFFF)
      {
        if (*(_DWORD *)(a2 + 120) == 0x7FFFFFFF) {
          int v20 = *(_DWORD *)(a2 + 116);
        }
        else {
          int v20 = *(_DWORD *)(a2 + 120);
        }
        uint64_t v21 = *(char **)(a2 + 2160);
        unint64_t v22 = *(void *)(a2 + 2168);
        if ((unint64_t)v21 >= v22)
        {
          uint64_t v24 = *(char **)(a2 + 2152);
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v21 - v24) >> 2) + 1;
          if (v25 > 0x1555555555555555) {
LABEL_42:
          }
            sub_2E00();
          unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)v24) >> 2);
          if (2 * v26 > v25) {
            unint64_t v25 = 2 * v26;
          }
          if (v26 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v27 = 0x1555555555555555;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27 > 0x1555555555555555) {
LABEL_41:
          }
            sub_188D718();
          uint64_t v28 = 12 * v27;
          uint64_t v29 = (char *)operator new(12 * v27);
          int v30 = &v29[4 * ((v21 - v24) >> 2)];
          uint64_t v31 = &v29[v28];
          *(void *)int v30 = *(void *)(a2 + 128);
          *((_DWORD *)v30 + 2) = v20;
          for (uint64_t i = v30 + 12; v21 != v24; *((_DWORD *)v30 + 2) = v33)
          {
            uint64_t v32 = *(void *)(v21 - 12);
            v21 -= 12;
            int v33 = *((_DWORD *)v21 + 2);
            *(void *)(v30 - 12) = v32;
            v30 -= 12;
          }
          *(void *)(a2 + 2152) = v30;
          *(void *)(a2 + 2160) = i;
          *(void *)(a2 + 2168) = v31;
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *(void *)uint64_t v21 = *(void *)(a2 + 128);
          *((_DWORD *)v21 + 2) = v20;
          uint64_t i = v21 + 12;
        }
        *(void *)(a2 + 2160) = i;
      }
    }
    else
    {
      uint64_t v4 = *(void *)(a2 + 488);
      uint64_t v5 = *(void *)(a2 + 496);
      if (v4 != v5)
      {
        uint64_t v35 = (void **)(a2 + 2152);
        uint64_t v6 = *(char **)(a2 + 2160);
        do
        {
          int v7 = *(_DWORD *)(v4 + 4);
          unint64_t v8 = *(void *)(a2 + 2168);
          if ((unint64_t)v6 < v8)
          {
            *(void *)uint64_t v6 = *(void *)(v4 + 12);
            *((_DWORD *)v6 + 2) = v7;
            v6 += 12;
          }
          else
          {
            char v9 = (char *)*v35;
            unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)*v35) >> 2);
            unint64_t v11 = v10 + 1;
            if (v10 + 1 > 0x1555555555555555) {
              goto LABEL_42;
            }
            unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v9) >> 2);
            if (2 * v12 > v11) {
              unint64_t v11 = 2 * v12;
            }
            if (v12 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v13 = 0x1555555555555555;
            }
            else {
              unint64_t v13 = v11;
            }
            if (v13 > 0x1555555555555555) {
              goto LABEL_41;
            }
            uint64_t v14 = 12 * v13;
            uint64_t v15 = (char *)operator new(12 * v13);
            long long v16 = &v15[12 * v10];
            *(void *)long long v16 = *(void *)(v4 + 12);
            *((_DWORD *)v16 + 2) = v7;
            for (j = v16; v6 != v9; *((_DWORD *)j + 2) = v19)
            {
              uint64_t v18 = *(void *)(v6 - 12);
              v6 -= 12;
              int v19 = *((_DWORD *)v6 + 2);
              *(void *)(j - 12) = v18;
              j -= 12;
            }
            *(void *)(a2 + 2152) = j;
            uint64_t v6 = v16 + 12;
            *(void *)(a2 + 2160) = v16 + 12;
            *(void *)(a2 + 2168) = &v15[v14];
            if (v9) {
              operator delete(v9);
            }
          }
          *(void *)(a2 + 2160) = v6;
          v4 += 28;
        }
        while (v4 != v5);
      }
    }
  }
}

double sub_9EE49C()
{
  byte_25DF677 = 1;
  word_25DF660 = 65;
  byte_25DF68F = 1;
  word_25DF678 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DF720 = 0u;
  *(_OWORD *)&qword_25DF730 = 0u;
  dword_25DF740 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DF720, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DF720, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DF720, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DF720, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DF6A7 = 8;
  strcpy((char *)&qword_25DF690, "any_mode");
  byte_25DF6BF = 7;
  strcpy((char *)&dword_25DF6A8, "cycling");
  byte_25DF6D7 = 7;
  strcpy((char *)&dword_25DF6C0, "driving");
  byte_25DF6EF = 7;
  strcpy((char *)&dword_25DF6D8, "walking");
  qword_25DF6F8 = 0;
  qword_25DF700 = 0;
  qword_25DF6F0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DF6F0 = (uint64_t)v0;
  qword_25DF6F8 = (uint64_t)(v0 + 9);
  qword_25DF700 = (uint64_t)(v0 + 9);
  qword_25DF708 = 0;
  qword_25DF710 = 0;
  unk_25DF718 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DF710 = (uint64_t)(v1 + 9);
  unk_25DF718 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DF708 = (uint64_t)v1;
  return result;
}

void sub_9EE764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DF730) {
    sub_20ADA28((void **)qword_25DF730);
  }
  size_t v37 = (void *)xmmword_25DF720;
  *(void *)&xmmword_25DF720 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void *sub_9EE804(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned char *result = &off_243CBF0;
  result[1] = a2;
  result[2] = a3;
  result[3] = a4;
  return result;
}

void sub_9EE828(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      switch(*(_DWORD *)(v3 + 16))
      {
        case 0:
          sub_948898(a1[1], *(void *)(v3 + 8), v28);
          goto LABEL_9;
        case 1:
          sub_947E24(a1[1], *(void *)(v3 + 8), 0, v28);
          goto LABEL_9;
        case 2:
          sub_948350(a1[2], *(void *)(v3 + 8), v28);
          goto LABEL_9;
        case 3:
          sub_948DB8(a1[3], *(void *)(v3 + 8), v28);
LABEL_9:
          long long v7 = v28[0];
          break;
        default:
          long long v7 = 0uLL;
          break;
      }
      char v9 = (char *)*((void *)&v7 + 1);
      int v8 = (char *)v7;
      unint64_t v10 = 126 - 2 * __clz((uint64_t)(*((void *)&v7 + 1) - v7) >> 3);
      if (*((void *)&v7 + 1) == (void)v7) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = v10;
      }
      sub_9EEC6C((uint32x2_t *)v7, *((int32x2_t **)&v7 + 1), (uint64_t)v28, v11, 1);
      if (v9 != v8)
      {
        unint64_t v12 = v8;
        while (1)
        {
          char v13 = v12 + 8;
          if (v12 + 8 == v9) {
            break;
          }
          LODWORD(v14) = *(_DWORD *)v12;
          int v15 = *((_DWORD *)v12 + 1);
          int v17 = *((_DWORD *)v12 + 2);
          int v16 = *((_DWORD *)v12 + 3);
          BOOL v18 = v14 == v17 && v15 == v16;
          unint64_t v12 = v13;
          if (v18)
          {
            int v19 = v13 + 8;
            int v20 = v13 - 8;
            while (v19 != v9)
            {
              if (v14 != *(_DWORD *)v19 || *((_DWORD *)v20 + 1) != *((_DWORD *)v19 + 1))
              {
                uint64_t v14 = *(void *)v19;
                *((void *)v20 + 1) = *(void *)v19;
                v20 += 8;
              }
              v19 += 8;
            }
            if (v20 + 8 != v9) {
              char v9 = v20 + 8;
            }
            break;
          }
        }
      }
      unint64_t v22 = *(void **)(a3 + 8);
      if ((unint64_t)v22 >= *(void *)(a3 + 16))
      {
        long long v23 = sub_9EC610((void **)a3, (void *)v3);
      }
      else
      {
        *unint64_t v22 = *(void *)v3;
        v22[1] = 0;
        v22[2] = 0;
        v22[3] = 0;
        long long v23 = v22 + 4;
      }
      *(void *)(a3 + 8) = v23;
      if (v8 == v9)
      {
        if (sub_723EC(3u))
        {
          sub_6BAC((uint64_t)v28);
          sub_188FC78(v28, (uint64_t)"No style attributes for entity id: ", 35);
          std::ostream::operator<<();
          std::stringbuf::str();
          sub_7246C((uint64_t *)&__p, 3u);
          if (v27 < 0) {
            operator delete(__p);
          }
          *(void *)&v28[0] = v25;
          *(void *)((char *)v28 + *(void *)(v25 - 24)) = v24;
          if (v30 < 0) {
            operator delete(v29);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
      }
      else
      {
        sub_2A83A4((uint64_t)(v23 - 3), *(v23 - 2), v8, v9, (v9 - v8) >> 3);
      }
      if (v8) {
        operator delete(v8);
      }
      v3 += 32;
    }
    while (v3 != v4);
  }
}

void sub_9EEBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a18);
  if (v19) {
    operator delete(v19);
  }
  sub_38358(v18);
  _Unwind_Resume(a1);
}

int8x16_t sub_9EEC6C(uint32x2_t *a1, int32x2_t *a2, uint64_t a3, uint64_t a4, char a5)
{
unsigned int *sub_9EF67C(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = HIDWORD(*(void *)a1);
  unsigned int v4 = *(a2 - 2);
  BOOL v5 = v4 == *(void *)a1;
  BOOL v6 = v4 > *(void *)a1;
  if (v5) {
    BOOL v6 = *(a2 - 1) > v3;
  }
  if (v6)
  {
    long long v7 = a1;
    do
    {
      unsigned int v8 = v7[2];
      unsigned int v9 = v7[3];
      v7 += 2;
      BOOL v10 = v9 > v3;
      BOOL v5 = v8 == v2;
      BOOL v11 = v8 > v2;
      if (v5) {
        BOOL v11 = v10;
      }
    }
    while (!v11);
  }
  else
  {
    unint64_t v12 = a1 + 2;
    do
    {
      long long v7 = v12;
      if (v12 >= a2) {
        break;
      }
      unsigned int v13 = *v12;
      BOOL v14 = v7[1] > v3;
      BOOL v5 = v13 == v2;
      BOOL v15 = v13 > v2;
      if (!v5) {
        BOOL v14 = v15;
      }
      unint64_t v12 = v7 + 2;
    }
    while (!v14);
  }
  if (v7 < a2)
  {
    do
    {
      unsigned int v16 = *(a2 - 2);
      unsigned int v17 = *(a2 - 1);
      a2 -= 2;
      BOOL v18 = v17 > v3;
      BOOL v5 = v16 == v2;
      BOOL v19 = v16 > v2;
      if (v5) {
        BOOL v19 = v18;
      }
    }
    while (v19);
  }
  while (v7 < a2)
  {
    uint64_t v20 = *(void *)v7;
    *(void *)long long v7 = *(void *)a2;
    *(void *)a2 = v20;
    do
    {
      unsigned int v21 = v7[2];
      unsigned int v22 = v7[3];
      v7 += 2;
      BOOL v23 = v22 > v3;
      BOOL v5 = v21 == v2;
      BOOL v24 = v21 > v2;
      if (v5) {
        BOOL v24 = v23;
      }
    }
    while (!v24);
    do
    {
      unsigned int v25 = *(a2 - 2);
      unsigned int v26 = *(a2 - 1);
      a2 -= 2;
      BOOL v27 = v26 > v3;
      BOOL v5 = v25 == v2;
      BOOL v28 = v25 > v2;
      if (v5) {
        BOOL v28 = v27;
      }
    }
    while (v28);
  }
  if (v7 - 2 != a1) {
    *(void *)a1 = *((void *)v7 - 1);
  }
  *((void *)v7 - 1) = v2;
  return v7;
}

BOOL sub_9EF794(int8x16_t *a1, int8x16_t *a2)
{
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      unsigned __int32 v3 = a2[-1].u32[2];
      BOOL v4 = v3 < a1->i32[0];
      if (v3 == a1->i32[0]) {
        BOOL v4 = a2[-1].i32[3] < (unsigned __int32)a1->i32[1];
      }
      if (!v4) {
        return 1;
      }
      uint64_t v5 = a1->i64[0];
      goto LABEL_13;
    case 3:
      unsigned __int32 v6 = a1->u32[2];
      unsigned __int32 v7 = a1->u32[3];
      BOOL v8 = v6 < a1->i32[0];
      if (v6 == a1->i32[0]) {
        BOOL v8 = v7 < a1->i32[1];
      }
      unsigned __int32 v9 = a2[-1].u32[2];
      BOOL v10 = a2[-1].i32[3] < v7;
      BOOL v11 = v9 == v6;
      BOOL v12 = v9 < v6;
      if (v11) {
        BOOL v12 = v10;
      }
      if (v8)
      {
        uint64_t v5 = a1->i64[0];
        if (v12)
        {
LABEL_13:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v5;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v5;
        unsigned int v32 = a2[-1].u32[2];
        BOOL v33 = a2[-1].i32[3] < HIDWORD(v5);
        BOOL v11 = v32 == v5;
        BOOL v34 = v32 < v5;
        if (!v11) {
          BOOL v33 = v34;
        }
        if (v33)
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v5;
          return 1;
        }
      }
      else if (v12)
      {
        uint64_t v24 = a1->i64[1];
        a1->i64[1] = a2[-1].i64[1];
        a2[-1].i64[1] = v24;
        unsigned __int32 v25 = a1->u32[2];
        BOOL v26 = v25 == a1->i32[0] ? a1->i32[3] < (unsigned __int32)a1->i32[1] : v25 < a1->i32[0];
        if (v26)
        {
          *a1 = vextq_s8(*a1, *a1, 8uLL);
          return v26;
        }
      }
      return 1;
    case 4:
      sub_9EFB08((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a2[-1].u32[2]);
      return 1;
    case 5:
      sub_9EFC94((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a1[1].u32[2], &a2[-1].u32[2]);
      return 1;
    default:
      unsigned int v13 = a1 + 1;
      unsigned int v14 = a1[1].u32[0];
      unsigned int v15 = a1->i32[0];
      unsigned __int32 v16 = a1->u32[1];
      unsigned int v17 = a1->u32[2];
      unsigned __int32 v18 = a1->u32[3];
      BOOL v19 = v17 < a1->i32[0];
      if (v17 == a1->i32[0]) {
        BOOL v19 = v18 < v16;
      }
      unsigned __int32 v20 = a1[1].u32[1];
      BOOL v21 = v20 < v18;
      BOOL v11 = v14 == v17;
      BOOL v22 = v14 < v17;
      if (v11) {
        BOOL v22 = v21;
      }
      if (v19)
      {
        uint64_t v23 = a1->i64[0];
        if (v22)
        {
          a1->i64[0] = a1[1].i64[0];
LABEL_43:
          a1[1].i64[0] = v23;
          goto LABEL_44;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v23;
        BOOL v11 = v14 == v23;
        BOOL v35 = v14 < v23;
        if (v11) {
          BOOL v35 = v20 < HIDWORD(v23);
        }
        if (v35)
        {
          a1->i64[1] = a1[1].i64[0];
          goto LABEL_43;
        }
      }
      else if (v22)
      {
        uint64_t v28 = a1->i64[1];
        uint64_t v27 = a1[1].i64[0];
        a1->i64[1] = v27;
        a1[1].i64[0] = v28;
        BOOL v29 = v16 > HIDWORD(v27);
        BOOL v11 = v15 == v27;
        BOOL v30 = v15 > v27;
        if (v11) {
          BOOL v30 = v29;
        }
        if (v30)
        {
          uint64_t v31 = a1->i64[0];
          a1->i64[0] = v27;
          a1->i64[1] = v31;
        }
      }
LABEL_44:
      BOOL v36 = &a1[1].i32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v37 = 0;
      int v38 = 0;
      while (1)
      {
        unsigned int v39 = v13->i32[0];
        BOOL v40 = v36[1] < v13->i32[1];
        BOOL v11 = *v36 == v39;
        BOOL v41 = *v36 < v39;
        if (!v11) {
          BOOL v40 = v41;
        }
        if (v40) {
          break;
        }
LABEL_57:
        unsigned int v13 = (int8x16_t *)v36;
        v37 += 8;
        v36 += 2;
        if (v36 == (__int32 *)a2) {
          return 1;
        }
      }
      uint64_t v42 = *(void *)v36;
      uint64_t v43 = HIDWORD(*(void *)v36);
      uint64_t v44 = v37;
      do
      {
        long long v45 = &a1->i8[v44];
        *(uint64_t *)((char *)&a1[1].i64[1] + v44) = *(uint64_t *)((char *)a1[1].i64 + v44);
        if (v44 == -16)
        {
          a1->i64[0] = v42;
          if (++v38 != 8) {
            goto LABEL_57;
          }
          return v36 + 2 == (__int32 *)a2;
        }
        unsigned int v46 = *((_DWORD *)v45 + 2);
        BOOL v47 = *((_DWORD *)v45 + 3) > v43;
        BOOL v11 = v46 == v42;
        BOOL v48 = v46 > v42;
        if (!v11) {
          BOOL v47 = v48;
        }
        v44 -= 8;
      }
      while (v47);
      *(uint64_t *)((char *)&a1[1].i64[1] + v44) = v42;
      if (++v38 != 8) {
        goto LABEL_57;
      }
      return v36 + 2 == (__int32 *)a2;
  }
}

unsigned int *sub_9EFB08(unsigned int *result, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v4 = *a2;
  unsigned int v5 = a2[1];
  BOOL v6 = v5 < result[1];
  if (*a2 != *result) {
    BOOL v6 = *a2 < *result;
  }
  LODWORD(v7) = a3[1];
  BOOL v8 = v7 < v5;
  BOOL v9 = *a3 == v4;
  BOOL v10 = *a3 < v4;
  if (v9) {
    BOOL v10 = v8;
  }
  if (v6)
  {
    unint64_t v11 = *(void *)result;
    if (v10)
    {
      *(void *)int8x16_t result = *(void *)a3;
      *(void *)a3 = v11;
      unint64_t v7 = HIDWORD(v11);
    }
    else
    {
      *(void *)int8x16_t result = *(void *)a2;
      *(void *)a2 = v11;
      LODWORD(v7) = a3[1];
      BOOL v14 = *a3 < v11;
      if (*a3 == v11) {
        BOOL v14 = v7 < HIDWORD(v11);
      }
      if (v14)
      {
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v11;
        unint64_t v7 = HIDWORD(v11);
      }
    }
  }
  else if (v10)
  {
    unint64_t v12 = *(void *)a2;
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v12;
    BOOL v13 = *a2 < *result;
    if (*a2 == *result) {
      BOOL v13 = a2[1] < result[1];
    }
    if (v13)
    {
      unint64_t v7 = *(void *)result;
      *(void *)int8x16_t result = *(void *)a2;
      *(void *)a2 = v7;
      LODWORD(v7) = a3[1];
    }
    else
    {
      unint64_t v7 = HIDWORD(v12);
    }
  }
  BOOL v15 = a4[1] < v7;
  if (*a4 != *a3) {
    BOOL v15 = *a4 < *a3;
  }
  if (v15)
  {
    uint64_t v16 = *(void *)a3;
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v16;
    BOOL v17 = *a3 < *a2;
    if (*a3 == *a2) {
      BOOL v17 = a3[1] < a2[1];
    }
    if (v17)
    {
      unint64_t v18 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v18;
      BOOL v19 = *a2 < *result;
      if (*a2 == *result) {
        BOOL v19 = a2[1] < result[1];
      }
      if (v19)
      {
        unint64_t v20 = *(void *)result;
        *(void *)int8x16_t result = *(void *)a2;
        *(void *)a2 = v20;
      }
    }
  }
  return result;
}

unsigned int *sub_9EFC94(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  int8x16_t result = sub_9EFB08(a1, a2, a3, a4);
  BOOL v11 = *a5 < *a4;
  if (*a5 == *a4) {
    BOOL v11 = a5[1] < a4[1];
  }
  if (v11)
  {
    uint64_t v12 = *(void *)a4;
    *(void *)a4 = *(void *)a5;
    *(void *)a5 = v12;
    BOOL v13 = *a4 < *a3;
    if (*a4 == *a3) {
      BOOL v13 = a4[1] < a3[1];
    }
    if (v13)
    {
      uint64_t v14 = *(void *)a3;
      *(void *)a3 = *(void *)a4;
      *(void *)a4 = v14;
      BOOL v15 = *a3 < *a2;
      if (*a3 == *a2) {
        BOOL v15 = a3[1] < a2[1];
      }
      if (v15)
      {
        uint64_t v16 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v16;
        BOOL v17 = *a2 < *a1;
        if (*a2 == *a1) {
          BOOL v17 = a2[1] < a1[1];
        }
        if (v17)
        {
          uint64_t v18 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v18;
        }
      }
    }
  }
  return result;
}

int32x2_t *sub_9EFDAC(uint32x2_t *a1, int32x2_t *a2, int32x2_t *a3, uint64_t a4)
{
  if (a1 != (uint32x2_t *)a2)
  {
    unsigned int v5 = a2;
    uint64_t v7 = (char *)a2 - (char *)a1;
    uint64_t v8 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        sub_9F0164((uint64_t)a1, a4, v8, v12--);
        --v11;
      }
      while (v11);
    }
    BOOL v13 = v5;
    if (v5 != a3)
    {
      if (v7 >= 16)
      {
        uint64_t v18 = v5;
        do
        {
          BOOL v19 = v18->i32[0] < (unsigned __int32)a1->i32[0];
          if (v18->i32[0] == a1->i32[0]) {
            BOOL v19 = v18->i32[1] < (unsigned __int32)a1->i32[1];
          }
          if (v19)
          {
            uint32x2_t v20 = (uint32x2_t)*v18;
            *uint64_t v18 = (int32x2_t)*a1;
            *a1 = v20;
            unsigned int v21 = a1[1].u32[0];
            if (v7 == 16)
            {
              BOOL v22 = a1 + 1;
              uint64_t v23 = 1;
            }
            else
            {
              unsigned int v24 = a1[2].u32[0];
              BOOL v25 = a1[1].i32[1] < (unsigned __int32)a1[2].i32[1];
              if (v21 != v24) {
                BOOL v25 = v21 < v24;
              }
              BOOL v26 = !v25;
              if (v25)
              {
                unsigned int v21 = a1[2].u32[0];
                BOOL v22 = a1 + 2;
              }
              else
              {
                BOOL v22 = a1 + 1;
              }
              if (v26) {
                uint64_t v23 = 1;
              }
              else {
                uint64_t v23 = 2;
              }
            }
            BOOL v26 = v21 == v20.i32[0];
            BOOL v27 = v21 < v20.i32[0];
            if (v26) {
              BOOL v27 = v22->i32[1] < (unsigned __int32)v20.i32[1];
            }
            if (!v27)
            {
              uint64_t v28 = a1;
              do
              {
                BOOL v35 = v28;
                uint64_t v28 = v22;
                *BOOL v35 = *v22;
                if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v23) {
                  break;
                }
                uint64_t v36 = (2 * v23) | 1;
                BOOL v22 = &a1[v36];
                uint64_t v23 = 2 * v23 + 2;
                if (v23 < v8)
                {
                  uint32x2_t v29 = v22[1];
                  uint32x2_t v30 = vcgt_u32(v29, *v22);
                  unsigned int v31 = *v22;
                  __int8 v32 = v30.i8[4];
                  if (v31 != v29.i32[0]) {
                    __int8 v32 = v30.i8[0];
                  }
                  if (v32)
                  {
                    unsigned int v31 = v22[1];
                    ++v22;
                  }
                  else
                  {
                    uint64_t v23 = v36;
                  }
                }
                else
                {
                  unsigned int v31 = v22->i32[0];
                  uint64_t v23 = v36;
                }
                BOOL v33 = v22->i32[1] < (unsigned __int32)v20.i32[1];
                BOOL v26 = v31 == v20.i32[0];
                BOOL v34 = v31 < v20.i32[0];
                if (!v26) {
                  BOOL v33 = v34;
                }
              }
              while (!v33);
              *uint64_t v28 = v20;
            }
          }
          ++v18;
        }
        while (v18 != a3);
      }
      else
      {
        v14.i32[0] = a1->i32[0];
        LODWORD(v15) = a1->i32[1];
        uint64_t v16 = v5;
        do
        {
          BOOL v17 = v16->i32[0] < (unsigned __int32)v14.i32[0];
          if (v16->i32[0] == v14.i32[0]) {
            BOOL v17 = v16->i32[1] < v15;
          }
          if (v17)
          {
            uint32x2_t v14 = (uint32x2_t)*v16;
            *uint64_t v16 = (int32x2_t)*a1;
            *a1 = v14;
            uint64_t v15 = HIDWORD(*(void *)&v14);
          }
          ++v16;
        }
        while (v16 != a3);
      }
      BOOL v13 = a3;
    }
    if (v7 >= 9)
    {
      uint64_t v37 = (unint64_t)v7 >> 3;
      do
      {
        uint64_t v39 = 0;
        int32x2_t v40 = (int32x2_t)*a1;
        BOOL v41 = (int32x2_t *)a1;
        do
        {
          uint64_t v42 = &v41[v39 + 1];
          uint64_t v43 = (2 * v39) | 1;
          uint64_t v44 = 2 * v39 + 2;
          if (v44 < v37)
          {
            int32x2_t v45 = v42[1];
            unsigned __int8 v46 = vceq_s32(*v42, v45).u8[0];
            uint32x2_t v47 = vcgt_u32((uint32x2_t)v45, (uint32x2_t)*v42);
            __int8 v48 = (v46 & 1) != 0 ? v47.i8[4] : v47.i8[0];
            if (v48)
            {
              ++v42;
              uint64_t v43 = v44;
            }
          }
          *BOOL v41 = *v42;
          BOOL v41 = v42;
          uint64_t v39 = v43;
        }
        while (v43 <= (uint64_t)((unint64_t)(v37 - 2) >> 1));
        if (v42 == --v5)
        {
          int32x2_t *v42 = v40;
        }
        else
        {
          int32x2_t *v42 = *v5;
          int32x2_t *v5 = v40;
          uint64_t v49 = (char *)v42 - (char *)a1 + 8;
          if (v49 >= 9)
          {
            unint64_t v50 = (((unint64_t)v49 >> 3) - 2) >> 1;
            BOOL v51 = &a1[v50];
            uint32x2_t v52 = vcgt_u32((uint32x2_t)*v42, *v51);
            __int8 v53 = (vceq_s32((int32x2_t)*v51, *v42).u8[0] & 1) != 0 ? v52.i8[4] : v52.i8[0];
            if (v53)
            {
              int32x2_t v54 = *v42;
              unint64_t v55 = HIDWORD(*(unint64_t *)v42);
              do
              {
                uint32x2_t v56 = v42;
                uint64_t v42 = (int32x2_t *)v51;
                *uint32x2_t v56 = *v51;
                if (!v50) {
                  break;
                }
                unint64_t v50 = (v50 - 1) >> 1;
                BOOL v51 = &a1[v50];
                BOOL v57 = v51->i32[0] < (unsigned __int32)v54.i32[0];
                if (v51->i32[0] == v54.i32[0]) {
                  BOOL v57 = v51->i32[1] < v55;
                }
              }
              while (v57);
              int32x2_t *v42 = v54;
            }
          }
        }
      }
      while (v37-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_9F0164(uint64_t result, uint64_t a2, uint64_t a3, uint32x2_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (uint32x2_t *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v6 + 2 >= a3)
      {
        unsigned __int32 v12 = v8->i32[0];
      }
      else
      {
        uint32x2_t v10 = v8[1];
        uint32x2_t v11 = vcgt_u32(v10, *v8);
        unsigned __int32 v12 = (unsigned __int32)*v8;
        __int8 v13 = v11.i8[4];
        if (v12 != v10.i32[0]) {
          __int8 v13 = v11.i8[0];
        }
        if (v13)
        {
          unsigned __int32 v12 = (unsigned __int32)v8[1];
          ++v8;
          uint64_t v7 = v9;
        }
      }
      BOOL v14 = v12 == a4->i32[0];
      BOOL v15 = v12 < a4->i32[0];
      if (v14) {
        BOOL v15 = v8->i32[1] < (unsigned __int32)a4->i32[1];
      }
      if (!v15)
      {
        uint32x2_t v16 = *a4;
        unint64_t v17 = HIDWORD(*(unint64_t *)a4);
        do
        {
          unsigned int v24 = a4;
          a4 = v8;
          uint32x2_t *v24 = *v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v25 = (2 * v7) | 1;
          uint64_t v8 = (uint32x2_t *)(result + 8 * v25);
          uint64_t v7 = 2 * v7 + 2;
          if (v7 < a3)
          {
            uint32x2_t v18 = v8[1];
            uint32x2_t v19 = vcgt_u32(v18, *v8);
            unsigned int v20 = *v8;
            __int8 v21 = v19.i8[4];
            if (v20 != v18.i32[0]) {
              __int8 v21 = v19.i8[0];
            }
            if (v21)
            {
              unsigned int v20 = v8[1];
              ++v8;
            }
            else
            {
              uint64_t v7 = v25;
            }
          }
          else
          {
            unsigned int v20 = v8->i32[0];
            uint64_t v7 = v25;
          }
          BOOL v22 = v8->i32[1] < v17;
          BOOL v14 = v20 == v16.i32[0];
          BOOL v23 = v20 < v16.i32[0];
          if (!v14) {
            BOOL v22 = v23;
          }
        }
        while (!v22);
        *a4 = v16;
      }
    }
  }
  return result;
}

uint64_t *sub_9F02A0(uint64_t *a1, void *a2)
{
  *a1 = sub_3750CC(a2);
  return a1;
}

void sub_9F02D0(uint64_t *a1, uint64_t a2)
{
  long long v58 = 0u;
  long long v59 = 0u;
  int v60 = 1065353216;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  BOOL v61 = 0;
  uint64_t v2 = *(void **)a2;
  unsigned __int32 v3 = *(void **)(a2 + 8);
  if (*(void **)a2 != v3)
  {
    int64_t v5 = (void *)(a2 + 24);
    uint64_t v40 = a2;
    while (1)
    {
      sub_9E6208((uint64_t)v52, v2);
      while (1)
      {
        sub_9E6260((uint64_t)v52, &v41);
        BOOL v6 = sub_9E6044(v52, &v41);
        uint64_t v7 = v48;
        uint64_t v8 = v49;
        if (v49 == v48)
        {
          uint64_t v8 = v48;
          uint64_t v51 = 0;
          unint64_t v13 = 0;
          goto LABEL_10;
        }
        uint64_t v9 = &v48[v50 >> 7];
        uint64_t v10 = (uint64_t)*v9;
        uint64_t v11 = (uint64_t)*v9 + 32 * (v50 & 0x7F);
        uint64_t v12 = *(uint64_t *)((char *)v48 + (((v51 + v50) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v51 + v50) & 0x7F);
        if (v11 == v12)
        {
          uint64_t v51 = 0;
          unint64_t v13 = (char *)v49 - (char *)v48;
          if ((unint64_t)((char *)v49 - (char *)v48) < 0x11) {
            goto LABEL_10;
          }
          do
          {
LABEL_9:
            operator delete(*v7);
            uint64_t v8 = v49;
            uint64_t v7 = v48 + 1;
            __int8 v48 = v7;
            unint64_t v13 = (char *)v49 - (char *)v7;
          }
          while ((unint64_t)((char *)v49 - (char *)v7) > 0x10);
          goto LABEL_10;
        }
        do
        {
          uint32x2_t v16 = *(void **)v11;
          if (*(void *)v11)
          {
            *(void *)(v11 + 8) = v16;
            operator delete(v16);
            uint64_t v10 = (uint64_t)*v9;
          }
          v11 += 32;
          if (v11 - v10 == 4096)
          {
            uint64_t v17 = (uint64_t)v9[1];
            ++v9;
            uint64_t v10 = v17;
            uint64_t v11 = v17;
          }
        }
        while (v11 != v12);
        uint64_t v7 = v48;
        uint64_t v8 = v49;
        uint64_t v51 = 0;
        unint64_t v13 = (char *)v49 - (char *)v48;
        if ((unint64_t)((char *)v49 - (char *)v48) >= 0x11) {
          goto LABEL_9;
        }
LABEL_10:
        unint64_t v14 = v13 >> 3;
        if (v14 == 1)
        {
          uint64_t v15 = 64;
          goto LABEL_22;
        }
        if (v14 == 2)
        {
          uint64_t v15 = 128;
LABEL_22:
          unint64_t v50 = v15;
        }
        if (v7 != v8)
        {
          do
          {
            uint32x2_t v18 = *v7++;
            operator delete(v18);
          }
          while (v7 != v8);
          if (v49 != v48) {
            uint64_t v49 = (void **)((char *)v49 + (((char *)v48 - (char *)v49 + 7) & 0xFFFFFFFFFFFFFFF8));
          }
        }
        if (__p) {
          operator delete(__p);
        }
        uint32x2_t v19 = v46;
        if (v46)
        {
          do
          {
            unsigned int v20 = (void *)*v19;
            operator delete(v19);
            uint32x2_t v19 = v20;
          }
          while (v20);
        }
        __int8 v21 = v45;
        int32x2_t v45 = 0;
        if (v21) {
          operator delete(v21);
        }
        if (v43)
        {
          uint64_t v44 = v43;
          operator delete(v43);
        }
        if (!v6) {
          break;
        }
        if (*(_DWORD *)sub_9E6230((uint64_t)v52) == 6)
        {
          sub_9E57A8((uint64_t)v52, (uint64_t **)&v41);
          BOOL v22 = (_DWORD **)v41;
          if (v41 == v42 || **(v42 - 1) == 5) {
            goto LABEL_44;
          }
          BOOL v23 = (int *)sub_9E6230((uint64_t)v52);
          sub_9F0784(a1, v23, (uint64_t)*(v42 - 1), v5, (uint64_t)&v58);
          goto LABEL_43;
        }
        if (*(_DWORD *)sub_9E6230((uint64_t)v52) != 7) {
          goto LABEL_5;
        }
        sub_9E5A94((uint64_t)v52, 0xFFFFFFFFFFFFFFFFLL, (char **)&v41);
        BOOL v22 = (_DWORD **)v41;
        if (v41 != v42)
        {
          unsigned int v24 = (int *)sub_9E6230((uint64_t)v52);
          sub_9F0784(a1, v24, *(void *)v41, v5, (uint64_t)&v58);
LABEL_43:
          BOOL v22 = (_DWORD **)v41;
        }
LABEL_44:
        if (v22)
        {
          uint64_t v42 = v22;
          operator delete(v22);
        }
LABEL_5:
        sub_9E5780(v52);
      }
      sub_9467EC((uint64_t)&v57);
      uint64_t v25 = v56;
      if (v56)
      {
        do
        {
          BOOL v26 = (void *)*v25;
          operator delete(v25);
          uint64_t v25 = v26;
        }
        while (v26);
      }
      BOOL v27 = v55;
      unint64_t v55 = 0;
      if (v27) {
        operator delete(v27);
      }
      if (v53)
      {
        int32x2_t v54 = v53;
        operator delete(v53);
      }
      v2 += 390;
      if (v2 == v3)
      {
        uint64_t v28 = v61;
        uint64_t v29 = v62;
        a2 = v40;
        goto LABEL_54;
      }
    }
  }
  uint64_t v29 = 0;
  uint64_t v28 = 0;
LABEL_54:
  sub_9F1014((void **)(a2 + 264), *(void *)(a2 + 272), v28, v29, 0xAAAAAAAAAAAAAAABLL * ((v29 - (uint64_t)v28) >> 3));
  uint32x2_t v30 = v61;
  if (v61)
  {
    uint64_t v31 = v62;
    __int8 v32 = v61;
    if ((char **)v62 != v61)
    {
      uint64_t v33 = v62;
      do
      {
        BOOL v35 = *(void **)(v33 - 24);
        v33 -= 24;
        BOOL v34 = v35;
        if (v35)
        {
          *(void *)(v31 - 16) = v34;
          operator delete(v34);
        }
        uint64_t v31 = v33;
      }
      while ((char **)v33 != v30);
      __int8 v32 = v61;
    }
    uint64_t v62 = (uint64_t)v30;
    operator delete(v32);
  }
  uint64_t v36 = (void *)v59;
  if ((void)v59)
  {
    do
    {
      int v38 = (void *)*v36;
      uint64_t v39 = (void *)v36[2];
      if (v39)
      {
        v36[3] = v39;
        operator delete(v39);
      }
      operator delete(v36);
      uint64_t v36 = v38;
    }
    while (v38);
  }
  uint64_t v37 = (void *)v58;
  *(void *)&long long v58 = 0;
  if (v37) {
    operator delete(v37);
  }
}

void sub_9F06E0(_Unwind_Exception *a1)
{
  sub_9F0B54(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_9F06F4(_Unwind_Exception *a1)
{
  sub_9F0B54(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_9F0708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_945B38(&a30);
  sub_9F0B54(v30 - 160);
  _Unwind_Resume(a1);
}

void sub_9F0784(uint64_t *a1, int *a2, uint64_t a3, void *a4, uint64_t a5)
{
  if (*((unsigned char *)a2 + 952))
  {
    if (*((void *)a2 + 107) != -1 && *(_DWORD *)a3 == 1)
    {
      if (!*(unsigned char *)(a3 + 80)) {
        goto LABEL_19;
      }
      unint64_t v7 = *(void *)(a3 + 64);
      if (v7 == -1) {
        return;
      }
      uint64_t v10 = a4[21];
      if (0xBAA6550FFBAA6551 * ((a4[22] - v10) >> 3) <= v7) {
        sub_66748();
      }
      uint64_t v12 = sub_6467E8((void *)(v10 + 7560 * v7), 0);
      int v13 = *a2;
      unint64_t v14 = sub_9F0C0C(a1, v12, *a2 == 7);
      if (!*((unsigned char *)a2 + 952))
      {
LABEL_19:
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &off_2439078;
      }
      unint64_t v17 = v14;
      unsigned int v18 = v15;
      unint64_t v19 = HIDWORD(v14);
      unsigned int v20 = (unsigned int *)(a4[15] + 304 * *((void *)a2 + 107));
      LODWORD(v16) = v20[1];
      long double v21 = exp(3.14159265 - (double)v16 * 6.28318531 / 4294967300.0);
      long double v22 = atan((v21 - 1.0 / v21) * 0.5) * 57.2957795 * 0.0174532925;
      long double v23 = exp(3.14159265 - (double)v19 * 6.28318531 / 4294967300.0);
      unsigned int v40 = *v20;
      long double v24 = atan((v23 - 1.0 / v23) * 0.5) * 57.2957795 * 0.0174532925;
      v25.i64[0] = v40;
      v25.i64[1] = v17;
      int64x2_t v26 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v25), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
      double v41 = vsubq_f64((float64x2_t)v26, (float64x2_t)vdupq_laneq_s64(v26, 1)).f64[0];
      long double v27 = sin((v22 - v24) * 0.5);
      long double v28 = v27 * v27;
      double v29 = cos(v22);
      long double v30 = v29 * cos(v24);
      long double v31 = sin(0.5 * v41);
      long double v32 = atan2(sqrt(v28 + v30 * (v31 * v31)), sqrt(1.0 - (v28 + v30 * (v31 * v31))));
      if ((v32 + v32) * 6372797.56 <= 20.0)
      {
        BOOL v35 = a4 + 30;
        uint64_t v33 = a4[30];
        uint64_t v34 = v35[1];
        if (v13 == 7)
        {
          unint64_t v36 = *(void *)v20;
          unsigned int v44 = v20[2];
          unint64_t v43 = v36;
          unint64_t v45 = v17;
          unsigned int v46 = v18;
        }
        else
        {
          unint64_t v43 = v17;
          unsigned int v44 = v18;
          unint64_t v37 = *(void *)v20;
          unsigned int v46 = v20[2];
          unint64_t v45 = v37;
        }
        sub_9F0F70(__p, &v43, 2uLL);
        unint64_t v38 = sub_9F1498(a5, (uint64_t)__p, (const void **)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        *((void *)a2 + 238) = v38 - 0x5555555555555555 * ((v34 - v33) >> 3);
      }
    }
  }
}

void sub_9F0B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9F0B54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void **)(a1 + 40);
    if (v3 != v2)
    {
      uint64_t v5 = *(void *)(a1 + 48);
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        BOOL v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v2;
    operator delete(v4);
  }
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    do
    {
      uint64_t v11 = (void *)*v8;
      uint64_t v12 = (void *)v8[2];
      if (v12)
      {
        v8[3] = v12;
        operator delete(v12);
      }
      operator delete(v8);
      uint64_t v8 = v11;
    }
    while (v11);
  }
  uint64_t v9 = *(void **)a1;
  *(void *)a1 = 0;
  if (v9) {
    operator delete(v9);
  }
  return a1;
}

unint64_t sub_9F0C0C(uint64_t *a1, uint64_t a2, int a3)
{
  if (!a3)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = (unsigned int *)sub_470B50(a2);
    sub_2954EC(v9, (((unint64_t)(v10[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v10[1] << 32) | *v10) ^ 0x1000000000000, (uint64_t)&v15);
    unsigned int v11 = sub_46CAC4(a2);
    sub_9F0DE8((uint64_t)&v15, 1, 0, &v18, (double)v11 / 1000000000.0);
    if (__p)
    {
      unint64_t v17 = __p;
      operator delete(__p);
    }
    uint64_t v12 = v18;
    int v13 = v19;
    if (v18 == v19)
    {
      unint64_t v8 = 0;
      LODWORD(v7) = 0;
      if (!v18)
      {
LABEL_11:
        if (v12 != v13) {
          return v8 & 0xFFFFFFFF00000000 | v7;
        }
LABEL_15:
        unint64_t v8 = 0xFFFFFFFF00000000;
        LODWORD(v7) = -1;
        return v8 & 0xFFFFFFFF00000000 | v7;
      }
    }
    else
    {
      uint64_t v7 = *(void *)(v19 - 12);
      unint64_t v8 = v7 & 0xFFFFFFFF00000000;
      if (!v18) {
        goto LABEL_11;
      }
    }
    unint64_t v19 = v18;
    operator delete(v18);
    goto LABEL_11;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = (unsigned int *)sub_40EFE8(a2);
  sub_2954EC(v4, (((unint64_t)(v5[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v5[1] << 32) | *v5) ^ 0x1000000000000, (uint64_t)&v15);
  int v6 = sub_46CABC(a2);
  sub_9F0DE8((uint64_t)&v15, 0, 0, &v18, (double)(1000000000 - v6) / 1000000000.0);
  if (__p)
  {
    unint64_t v17 = __p;
    operator delete(__p);
  }
  if (v18 == v19)
  {
    if (v18)
    {
      unint64_t v19 = v18;
      operator delete(v18);
    }
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)v18;
  unint64_t v8 = *(void *)v18 & 0xFFFFFFFF00000000;
  unint64_t v19 = v18;
  operator delete(v18);
  return v8 & 0xFFFFFFFF00000000 | v7;
}

void sub_9F0DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9F0DE8(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, void *a4@<X8>, double a5@<D0>)
{
  char v24 = a3;
  uint64_t v23 = 0;
  *(_OWORD *)unint64_t v17 = 0u;
  *(_OWORD *)uint64_t __p = 0u;
  long long v19 = 0u;
  char v22 = 0;
  double v21 = sub_481994(a1, a3) * a5;
  v20[0] = &v22;
  v20[1] = v17;
  v20[2] = &v24;
  v20[3] = &v23;
  v20[4] = &v21;
  sub_481B20(a1, (uint64_t)v20);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v8 = v17[0];
  uint64_t v9 = __p[1];
  BOOL v10 = a2 == 0;
  if (a2) {
    unsigned int v11 = v17[0];
  }
  else {
    unsigned int v11 = __p[1];
  }
  uint64_t v12 = &v17[1];
  if (v10) {
    uint64_t v12 = (void **)&v19;
  }
  int v13 = *v12;
  int64_t v14 = v13 - v11;
  if (v13 != v11)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v14 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v15 = (char *)operator new(v14);
    *a4 = v15;
    unint64_t v16 = &v15[4 * (v14 >> 2)];
    a4[2] = v16;
    memcpy(v15, v11, v14);
    a4[1] = v16;
  }
  if (v9)
  {
    *(void *)&long long v19 = v9;
    operator delete(v9);
    unint64_t v8 = v17[0];
  }
  if (v8)
  {
    v17[1] = v8;
    operator delete(v8);
  }
}

void sub_9F0F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_9F0F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_3310C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_9F0F70(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x1555555555555556) {
      sub_2E00();
    }
    size_t v5 = 12 * a3;
    int v6 = (char *)operator new(12 * a3);
    *a1 = v6;
    a1[1] = v6;
    uint64_t v7 = &v6[v5];
    a1[2] = &v6[v5];
    memmove(v6, a2, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_9F0FF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9F1014(void **a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5)
{
  size_t v5 = *a1;
  uint64_t v6 = (a2 - (uint64_t)*a1) / 24;
  uint64_t v7 = (uint64_t)*a1 + 24 * v6;
  if (a5 < 1) {
    return v7;
  }
  uint64_t v9 = a3;
  int v13 = a1[2];
  uint64_t v11 = (uint64_t)(a1 + 2);
  uint64_t v12 = v13;
  unint64_t v14 = *(void *)(v11 - 8);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-v14] >> 3)) >= a5)
  {
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v7) >> 3)) >= a5)
    {
      uint64_t v19 = (uint64_t)&a3[3 * a5];
      unsigned int v20 = *(void **)(v11 - 8);
    }
    else
    {
      uint64_t v19 = (uint64_t)&a3[(uint64_t)(v14 - v7) >> 3];
      unsigned int v20 = sub_46A34(v11, v19, a4, *(void **)(v11 - 8));
      a1[1] = v20;
      if ((uint64_t)(v14 - v7) < 1) {
        return v7;
      }
    }
    double v21 = (void *)(v7 + 24 * a5);
    char v22 = &v20[-3 * a5];
    uint64_t v23 = v20;
    if ((unint64_t)v22 < v14)
    {
      uint64_t v23 = v20;
      do
      {
        *uint64_t v23 = 0;
        v23[1] = 0;
        v23[2] = 0;
        *(_OWORD *)uint64_t v23 = *(_OWORD *)v22;
        v23[2] = v22[2];
        *char v22 = 0;
        v22[1] = 0;
        v22[2] = 0;
        v23 += 3;
        v22 += 3;
      }
      while ((unint64_t)v22 < v14);
    }
    a1[1] = v23;
    if (v20 != v21)
    {
      char v24 = (void **)(v20 - 3);
      uint64_t v25 = 8 * (v20 - v21);
      do
      {
        long double v27 = *v24;
        if (*v24)
        {
          v24[1] = v27;
          operator delete(v27);
          int *v24 = 0;
          v24[1] = 0;
          v24[2] = 0;
        }
        uint64_t v26 = v7 + v25 - 24;
        *(_OWORD *)char v24 = *(_OWORD *)v26;
        v24[2] = *(void **)(v7 + v25 - 8);
        *(void *)uint64_t v26 = 0;
        *(void *)(v26 + 8) = 0;
        *(void *)(v26 + 16) = 0;
        v24 -= 3;
        v25 -= 24;
      }
      while (v25);
    }
    if ((char **)v19 != v9)
    {
      long double v28 = (char **)v7;
      do
      {
        if (v9 != v28) {
          sub_31AF54(v28, *v9, v9[1], 0xAAAAAAAAAAAAAAABLL * ((v9[1] - *v9) >> 2));
        }
        v9 += 3;
        v28 += 3;
      }
      while (v9 != (char **)v19);
    }
    return v7;
  }
  unint64_t v15 = a5 - 0x5555555555555555 * ((uint64_t)(v14 - (void)v5) >> 3);
  if (v15 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v5) >> 3);
  if (2 * v16 > v15) {
    unint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x555555555555555) {
    unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v17 = v15;
  }
  unint64_t v50 = a1;
  if (v17)
  {
    if (v17 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    unsigned int v18 = (char *)operator new(24 * v17);
  }
  else
  {
    unsigned int v18 = 0;
  }
  uint64_t v49 = v6;
  uint64_t v51 = &v18[24 * v6];
  uint64_t v30 = 24 * a5;
  uint32x2_t v52 = &v18[24 * v17];
  long double v31 = &v51[24 * a5];
  long double v32 = v51;
  do
  {
    *(void *)long double v32 = 0;
    *((void *)v32 + 1) = 0;
    *((void *)v32 + 2) = 0;
    BOOL v35 = *v9;
    uint64_t v34 = v9[1];
    int64_t v36 = v34 - *v9;
    if (v34 != *v9)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v36 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      unint64_t v37 = (char *)operator new(v36);
      *(void *)long double v32 = v37;
      *((void *)v32 + 1) = v37;
      uint64_t v33 = &v37[4 * (v36 >> 2)];
      *((void *)v32 + 2) = v33;
      memcpy(v37, v35, v36);
      *((void *)v32 + 1) = v33;
    }
    v32 += 24;
    v9 += 3;
    v30 -= 24;
  }
  while (v30);
  double v29 = v51;
  unint64_t v38 = (char *)*v50;
  uint64_t v39 = v51;
  if (*v50 != (void *)v7)
  {
    uint64_t v40 = 24 * v49;
    do
    {
      double v41 = &v18[v40];
      uint64_t v42 = &v5[v40];
      *(_OWORD *)(v41 - 24) = *(_OWORD *)&v5[v40 - 24];
      *((void *)v41 - 1) = *(void *)&v5[v40 - 8];
      *((void *)v42 - 3) = 0;
      *((void *)v42 - 2) = 0;
      *((void *)v42 - 1) = 0;
      v18 -= 24;
      v5 -= 24;
    }
    while (&v5[v40] != v38);
    uint64_t v39 = &v18[24 * v49];
  }
  unint64_t v43 = v50[1];
  if (v43 != (void *)v7)
  {
    do
    {
      *(void *)long double v31 = 0;
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = 0;
      *(_OWORD *)long double v31 = *(_OWORD *)v7;
      *((void *)v31 + 2) = *(void *)(v7 + 16);
      *(void *)uint64_t v7 = 0;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      v31 += 24;
      v7 += 24;
    }
    while ((void *)v7 != v43);
    uint64_t v7 = (uint64_t)v50[1];
  }
  unsigned int v44 = (char *)*v50;
  int8x16_t *v50 = v39;
  v50[1] = v31;
  v50[2] = v52;
  if ((char *)v7 != v44)
  {
    unint64_t v45 = (char *)v7;
    do
    {
      uint32x2_t v47 = (void *)*((void *)v45 - 3);
      v45 -= 24;
      unsigned int v46 = v47;
      if (v47)
      {
        *(void *)(v7 - 16) = v46;
        operator delete(v46);
      }
      uint64_t v7 = (uint64_t)v45;
    }
    while (v45 != v44);
  }
  if (v44) {
    operator delete(v44);
  }
  return (uint64_t)v29;
}

void sub_9F1450(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_9F1458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2A6E80((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9F1470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  unint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  a14 = v14;
  sub_2A6E80((uint64_t)&a12);
  _Unwind_Resume(a1);
}

unint64_t sub_9F1498(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v6 = sub_97A114((void *)a1, a2);
  if (v6) {
    return v6[5];
  }
  unint64_t v8 = *(void **)(a1 + 48);
  unint64_t v9 = *(void *)(a1 + 56);
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *(void *)(a1 + 40)) >> 3);
  if ((unint64_t)v8 >= v9)
  {
    uint64_t v14 = sub_97A2E4((char **)(a1 + 40), (uint64_t)a3);
  }
  else
  {
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    BOOL v10 = *a3;
    int64_t v11 = (unsigned char *)a3[1] - (unsigned char *)*a3;
    if (v11)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v11 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      uint64_t v12 = (char *)operator new(v11);
      void *v8 = v12;
      v8[1] = v12;
      int v13 = &v12[4 * (v11 >> 2)];
      v8[2] = v13;
      memcpy(v12, v10, v11);
      v8[1] = v13;
    }
    uint64_t v14 = (char *)(v8 + 3);
    *(void *)(a1 + 48) = v8 + 3;
  }
  *(void *)(a1 + 48) = v14;
  sub_9F15DC(a1, a2, a2, &v15);
  return v15;
}

void sub_9F15BC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v1 + 48) = v2;
  _Unwind_Resume(exception_object);
}

void *sub_9F15DC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = sub_3B368(a1 + 24, (unsigned int **)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      int8x16_t result = (void *)*v14;
      if (*v14)
      {
        uint64_t v16 = *(void *)(a2 + 8) - *(void *)a2;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = result[1];
            if (v21 == v11)
            {
              uint64_t v23 = (char *)result[2];
              char v22 = (char *)result[3];
              if (v22 - v23 == v16)
              {
                if (v23 == v22) {
                  return result;
                }
                for (uint64_t i = *(unsigned int **)a2;
                      *(_DWORD *)v23 == *i && *((_DWORD *)v23 + 1) == i[1] && *((_DWORD *)v23 + 2) == i[2];
                      i += 3)
                {
                  v23 += 12;
                  if (v23 == v22) {
                    return result;
                  }
                }
              }
            }
            else if ((v21 & (v12 - 1)) != v4)
            {
              goto LABEL_35;
            }
            int8x16_t result = (void *)*result;
            if (!result) {
              goto LABEL_35;
            }
          }
        }
        do
        {
          unint64_t v17 = result[1];
          if (v17 == v11)
          {
            uint64_t v19 = (char *)result[2];
            unsigned int v18 = (char *)result[3];
            if (v18 - v19 == v16)
            {
              if (v19 == v18) {
                return result;
              }
              for (j = *(unsigned int **)a2;
                    *(_DWORD *)v19 == *j && *((_DWORD *)v19 + 1) == j[1] && *((_DWORD *)v19 + 2) == j[2];
                    j += 3)
              {
                v19 += 12;
                if (v19 == v18) {
                  return result;
                }
              }
            }
          }
          else
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
            if (v17 != v4) {
              break;
            }
          }
          int8x16_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
LABEL_35:
  sub_9F19D0(a1, v11, a3, a4, (uint64_t)&v38);
  float v25 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v26 = *(float *)(a1 + 32);
  if (!v12 || (float)(v26 * (float)v12) < v25)
  {
    BOOL v28 = 1;
    if (v12 >= 3) {
      BOOL v28 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v12);
    unint64_t v30 = vcvtps_u32_f32(v25 / v26);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v32) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v32)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v32 < 3uLL || (uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime < *(void *)&v32) {
LABEL_49:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v36 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        long double v27 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v27) {
          goto LABEL_38;
        }
      }
      else
      {
        unint64_t v4 = v11;
        long double v27 = *(void **)(*(void *)a1 + 8 * v11);
        if (v27) {
          goto LABEL_38;
        }
      }
    }
    else
    {
      unint64_t v4 = v36 & v11;
      long double v27 = *(void **)(*(void *)a1 + 8 * (v36 & v11));
      if (v27) {
        goto LABEL_38;
      }
    }
LABEL_62:
    *unint64_t v38 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v38;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v38)
    {
      unint64_t v37 = *(void *)(*v38 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v37 >= v12) {
          v37 %= v12;
        }
      }
      else
      {
        v37 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v37) = v38;
    }
    goto LABEL_73;
  }
  long double v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (!v27) {
    goto LABEL_62;
  }
LABEL_38:
  *unint64_t v38 = *v27;
  *long double v27 = v38;
LABEL_73:
  int8x16_t result = v38;
  ++*v9;
  return result;
}

void sub_9F19BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_97A9FC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_9F19D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  int8x16_t result = operator new(0x30uLL);
  unint64_t v11 = result;
  *(void *)a5 = result;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  result[2] = 0;
  void *result = 0;
  result[1] = a2;
  result[3] = 0;
  result[4] = 0;
  unint64_t v12 = *(const void **)a3;
  int64_t v13 = *(void *)(a3 + 8) - *(void *)a3;
  if (v13)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v13 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    uint64_t v14 = (char *)operator new(v13);
    v11[2] = v14;
    unint64_t v11[3] = v14;
    unint64_t v15 = &v14[4 * (v13 >> 2)];
    v11[4] = v15;
    int8x16_t result = memcpy(v14, v12, v13);
    unint64_t v11[3] = v15;
  }
  v11[5] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_9F1AB0(_Unwind_Exception *a1)
{
  size_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 24) = v5;
    operator delete(v5);
  }
  sub_97A9FC(v1);
  _Unwind_Resume(a1);
}

double sub_9F1AD4()
{
  byte_25DF75F = 1;
  word_25DF748 = 65;
  byte_25DF777 = 1;
  word_25DF760 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25DF808 = 0u;
  *(_OWORD *)&qword_25DF818 = 0u;
  dword_25DF828 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25DF808, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25DF808, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25DF808, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25DF808, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25DF78F = 8;
  strcpy((char *)&qword_25DF778, "any_mode");
  byte_25DF7A7 = 7;
  strcpy((char *)&dword_25DF790, "cycling");
  byte_25DF7BF = 7;
  strcpy((char *)&dword_25DF7A8, "driving");
  byte_25DF7D7 = 7;
  strcpy((char *)&dword_25DF7C0, "walking");
  qword_25DF7E0 = 0;
  qword_25DF7E8 = 0;
  qword_25DF7D8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25DF7D8 = (uint64_t)v0;
  qword_25DF7E0 = (uint64_t)(v0 + 9);
  qword_25DF7E8 = (uint64_t)(v0 + 9);
  qword_25DF7F0 = 0;
  qword_25DF7F8 = 0;
  unk_25DF800 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25DF7F8 = (uint64_t)(v1 + 9);
  unk_25DF800 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25DF7F0 = (uint64_t)v1;
  return result;
}

void sub_9F1D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25DF818) {
    sub_20ADA6C((void **)qword_25DF818);
  }
  unint64_t v37 = (void *)xmmword_25DF808;
  *(void *)&xmmword_25DF808 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_9F1E3C(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = sub_374CDC((uint64_t)a2, a3, a4);
  sub_9FF8E0(a1, v6);
  *(void *)(a1 + 128) = a2;
  char v7 = (void *)sub_374CE4(a2);
  uint64_t v8 = v7[1];
  *(void *)&long long v24 = *v7;
  *((void *)&v24 + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (void *)sub_374DF4(*(void *)(a1 + 128));
  uint64_t v10 = v9[1];
  *(void *)&long long v15 = *v9;
  *((void *)&v15 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = v9[3];
  uint64_t v16 = v9[2];
  uint64_t v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = v9[5];
  uint64_t v18 = v9[4];
  uint64_t v19 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = v9[7];
  uint64_t v20 = v9[6];
  uint64_t v21 = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = v9[9];
  uint64_t v22 = v9[8];
  uint64_t v23 = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  sub_9F5514((uint64_t *)(a1 + 136), &v24, 1, &v15);
}

void sub_9F1FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_37D394(&a9);
  sub_14A84(v10 - 64);
  sub_9F2050(v9);
  _Unwind_Resume(a1);
}

void sub_9F2020(_Unwind_Exception *a1)
{
  sub_9F2050(v1);
  _Unwind_Resume(a1);
}

void sub_9F2034(_Unwind_Exception *a1)
{
  sub_49DA2C(v2);
  sub_9F2050(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9F2050(uint64_t a1)
{
  uint64_t v2 = a1 + 88;
  uint64_t v3 = *(void *)(a1 + 112);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
  }
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_9F2100@<X0>(uint64_t a1@<X0>, int32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_725D0((uint64_t)v133);
  if (sub_C09220(*(void **)(a1 + 128), (uint64_t)a2))
  {
    uint64_t v59 = a3;
    sub_C4A5B8(v84);
    int64x2_t v131 = 0u;
    unint64_t v132 = 0;
    uint64_t v6 = *(void *)&a2[5] - *(void *)&a2[4];
    if (v6)
    {
      uint64_t v7 = 0;
      unint64_t v60 = 0xD37A6F4DE9BD37A7 * (v6 >> 3);
      uint64_t v65 = a1 + 4368;
      do
      {
        uint64_t v8 = *(void *)&a2[8] - *(void *)&a2[7];
        if (v8)
        {
          uint64_t v9 = 0;
          unint64_t v66 = 0xD37A6F4DE9BD37A7 * (v8 >> 3);
          do
          {
            sub_9F2C38(a1, a2, v7, v9, (uint64_t)&v76);
            uint64_t v11 = sub_C0A400((uint64_t)&v76);
            if ((v11 & 1) == 0)
            {
              if (sub_723EC(3u))
              {
                unsigned __int32 v69 = v64;
                *(void **)((char *)&v69 + *((void *)v64 - 3)) = v63;
                uint64_t v12 = (std::ios_base *)((char *)&v69 + *((void *)v69 - 3));
                std::ios_base::init(v12, &v70);
                v12[1].__vftable = 0;
                v12[1].__fmtflags_ = -1;
                std::streambuf::basic_streambuf();
                long long v72 = 0u;
                long long v73 = 0u;
                int v74 = 16;
                sub_188FC78(&v69, (uint64_t)"Inconsistent solution computed in journey planner; failing response.", 68);
                std::stringbuf::str();
                sub_7246C((uint64_t *)&v67, 3u);
                if (v68 < 0) {
                  operator delete(v67);
                }
                unsigned __int32 v69 = v62;
                *(void **)((char *)&v69 + *((void *)v62 - 3)) = v61;
                if (SBYTE7(v73) < 0) {
                  operator delete((void *)v72);
                }
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                std::ios::~ios();
              }
              long long v76 = 0uLL;
              uint64_t v77 = 3;
              uint64_t v13 = (char *)__p;
              if (__p)
              {
                uint64_t v14 = __p;
                if (v79 != __p)
                {
                  uint64_t v15 = (uint64_t)(v79 - 152);
                  do
                  {
                    uint64_t v17 = *(void **)(v15 + 112);
                    if (v17)
                    {
                      *(void *)(v15 + 120) = v17;
                      operator delete(v17);
                    }
                    uint64_t v18 = *(void **)(v15 + 72);
                    if (v18)
                    {
                      *(void *)(v15 + 80) = v18;
                      operator delete(v18);
                    }
                    uint64_t v19 = *(void **)(v15 + 48);
                    if (v19)
                    {
                      *(void *)(v15 + 56) = v19;
                      operator delete(v19);
                    }
                    uint64_t v20 = *(void **)(v15 + 24);
                    if (v20)
                    {
                      *(void *)(v15 + 32) = v20;
                      operator delete(v20);
                    }
                    if (*(void *)v15)
                    {
                      sub_9F59BC(v15, *(void ***)v15);
                      operator delete(*(void **)v15);
                    }
                    uint64_t v16 = (char *)(v15 - 24);
                    v15 -= 176;
                  }
                  while (v16 != v13);
                  uint64_t v14 = __p;
                }
                unsigned int v79 = v13;
                operator delete(v14);
              }
              uint64_t __p = 0;
              unsigned int v79 = 0;
              uint64_t v80 = 0;
              uint64_t v11 = (uint64_t)v81;
              if (v81)
              {
                unsigned int v82 = v81;
                operator delete(v81);
              }
              BOOL v81 = 0;
              unsigned int v82 = 0;
              uint64_t v83 = 0;
            }
            sub_9F3B04(v11, (uint64_t)&v76);
            uint64_t v21 = v131.i64[1];
            if (v131.i64[1] >= v132)
            {
              uint64_t v36 = sub_9F71B0(&v131, &v76);
            }
            else
            {
              long long v22 = v76;
              *(void *)(v131.i64[1] + 16) = v77;
              *(_OWORD *)uint64_t v21 = v22;
              *(void *)(v21 + 24) = 0;
              *(void *)(v21 + 32) = 0;
              *(void *)(v21 + 40) = 0;
              uint64_t v23 = (char *)__p;
              long long v24 = v79;
              unsigned __int32 v69 = (void *)(v21 + 24);
              LOBYTE(v70) = 0;
              int64_t v25 = v79 - (unsigned char *)__p;
              if (v79 != __p)
              {
                uint64_t v26 = a1;
                uint64_t v27 = v7;
                BOOL v28 = a2;
                unint64_t v29 = 0x2E8BA2E8BA2E8BA3 * (v25 >> 4);
                if (v29 >= 0x1745D1745D1745ELL) {
                  sub_2E00();
                }
                unint64_t v30 = (char *)operator new(v25);
                uint64_t v31 = 0;
                *(void *)(v21 + 24) = v30;
                *(void *)(v21 + 32) = v30;
                *(void *)(v21 + 40) = &v30[176 * v29];
                a2 = v28;
                uint64_t v7 = v27;
                a1 = v26;
                do
                {
                  sub_9F761C((uint64_t)&v30[v31], (long long *)&v23[v31]);
                  v31 += 176;
                }
                while (&v23[v31] != v24);
                *(void *)(v21 + 32) = &v30[v31];
              }
              *(void *)(v21 + 48) = 0;
              *(void *)(v21 + 56) = 0;
              *(void *)(v21 + 64) = 0;
              int8x8_t v32 = v81;
              uint64_t v33 = v82 - (unsigned char *)v81;
              if (v82 != v81)
              {
                if (v33 < 0) {
                  sub_2E00();
                }
                uint8x8_t v34 = (char *)operator new(v82 - (unsigned char *)v81);
                *(void *)(v21 + 48) = v34;
                *(void *)(v21 + 56) = v34;
                uint64_t v35 = &v34[8 * (v33 >> 3)];
                *(void *)(v21 + 64) = v35;
                memcpy(v34, v32, v33 - 3);
                *(void *)(v21 + 56) = v35;
              }
              uint64_t v36 = v21 + 72;
            }
            v131.i64[1] = v36;
            *(void *)(a1 + 5552) = 0x3FF0000000000000;
            sub_C4A5BC((uint64_t)v84, v65);
            if (v81)
            {
              unsigned int v82 = v81;
              operator delete(v81);
            }
            unint64_t v37 = (char *)__p;
            if (__p)
            {
              uint64_t v10 = __p;
              if (v79 != __p)
              {
                uint64_t v38 = (uint64_t)(v79 - 152);
                do
                {
                  uint64_t v40 = *(void **)(v38 + 112);
                  if (v40)
                  {
                    *(void *)(v38 + 120) = v40;
                    operator delete(v40);
                  }
                  double v41 = *(void **)(v38 + 72);
                  if (v41)
                  {
                    *(void *)(v38 + 80) = v41;
                    operator delete(v41);
                  }
                  uint64_t v42 = *(void **)(v38 + 48);
                  if (v42)
                  {
                    *(void *)(v38 + 56) = v42;
                    operator delete(v42);
                  }
                  unint64_t v43 = *(void **)(v38 + 24);
                  if (v43)
                  {
                    *(void *)(v38 + 32) = v43;
                    operator delete(v43);
                  }
                  if (*(void *)v38)
                  {
                    sub_9F59BC(v38, *(void ***)v38);
                    operator delete(*(void **)v38);
                  }
                  uint64_t v39 = (char *)(v38 - 24);
                  v38 -= 176;
                }
                while (v39 != v37);
                uint64_t v10 = __p;
              }
              unsigned int v79 = v37;
              operator delete(v10);
            }
            ++v9;
          }
          while (v9 != v66);
        }
        ++v7;
      }
      while (v7 != v60);
    }
    *(void *)&v84[0] = sub_72688((uint64_t)v133);
    *(unsigned char *)uint64_t v59 = 1;
    long long v45 = v84[0];
    *(_OWORD *)(v59 + 24) = v84[1];
    *(_OWORD *)(v59 + 8) = v45;
    *(_OWORD *)(v59 + 40) = v84[2];
    uint64_t v46 = v99;
    *(void *)(v59 + 56) = v85;
    long long v47 = v97;
    *(_OWORD *)(v59 + 224) = v96;
    *(_OWORD *)(v59 + 240) = v47;
    *(_OWORD *)(v59 + 256) = v98;
    *(void *)(v59 + 272) = v46;
    long long v48 = v93;
    *(_OWORD *)(v59 + 160) = v92;
    *(_OWORD *)(v59 + 176) = v48;
    long long v49 = v95;
    *(_OWORD *)(v59 + 192) = v94;
    *(_OWORD *)(v59 + 208) = v49;
    long long v50 = v89;
    *(_OWORD *)(v59 + 96) = v88;
    *(_OWORD *)(v59 + 112) = v50;
    long long v51 = v91;
    *(_OWORD *)(v59 + 128) = v90;
    *(_OWORD *)(v59 + 144) = v51;
    long long v52 = v87;
    *(_OWORD *)(v59 + 64) = v86;
    *(_OWORD *)(v59 + 80) = v52;
    uint64_t v53 = v112;
    *(void *)(v59 + 296) = v101;
    *(_OWORD *)(v59 + 280) = v100;
    *(_OWORD *)(v59 + 368) = v106;
    *(_OWORD *)(v59 + 384) = v107;
    *(_OWORD *)(v59 + 400) = v108;
    *(_OWORD *)(v59 + 416) = v109;
    *(_OWORD *)(v59 + 304) = v102;
    *(_OWORD *)(v59 + 320) = v103;
    *(_OWORD *)(v59 + 336) = v104;
    *(_OWORD *)(v59 + 352) = v105;
    long long v54 = v111;
    *(_OWORD *)(v59 + 432) = v110;
    *(_OWORD *)(v59 + 448) = v54;
    *(void *)(v59 + 464) = v53;
    *(_OWORD *)(v59 + 472) = v113;
    *(void *)(v59 + 488) = v114;
    long long v55 = v120;
    *(_OWORD *)(v59 + 560) = v119;
    *(_OWORD *)(v59 + 576) = v55;
    long long v56 = v122;
    *(_OWORD *)(v59 + 592) = v121;
    *(_OWORD *)(v59 + 608) = v56;
    long long v57 = v116;
    *(_OWORD *)(v59 + 496) = v115;
    *(_OWORD *)(v59 + 512) = v57;
    long long v58 = v118;
    *(_OWORD *)(v59 + 528) = v117;
    *(_OWORD *)(v59 + 544) = v58;
    uint64_t result = (uint64_t)memcpy((void *)(v59 + 624), v123, 0x220uLL);
    *(_OWORD *)(v59 + 1168) = v124;
    *(void *)(v59 + 1184) = v125;
    *(_OWORD *)(v59 + 1208) = v127;
    *(_OWORD *)(v59 + 1224) = v128;
    *(_OWORD *)(v59 + 1240) = v129;
    *(void *)(v59 + 1256) = v130;
    *(_OWORD *)(v59 + 1192) = v126;
    *(int64x2_t *)(v59 + 1264) = v131;
    *(void *)(v59 + 1280) = v132;
  }
  else
  {
    uint64_t result = sub_723EC(3u);
    if (result)
    {
      sub_6BAC((uint64_t)v84);
      sub_188FC78(v84, (uint64_t)"Inconsistent request provided to journey planner; failing request.", 66);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v69, 3u);
      if (v71 < 0) {
        operator delete(v69);
      }
      if (SBYTE7(v88) < 0) {
        operator delete((void *)v87);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      uint64_t result = std::ios::~ios();
    }
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = 1;
    *(void *)(a3 + 16) = &off_2439090;
  }
  return result;
}

void sub_9F2A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a32 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a72);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a72);
  _Unwind_Resume(a1);
}

void sub_9F2AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_111ECAC((uint64_t)&a27);
  sub_9F3A88(&a60);
  sub_9F3F50((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void sub_9F2B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  long long v72 = *v69;
  if (*v69)
  {
    *(void *)(v70 + 56) = v72;
    operator delete(v72);
  }
  long long v73 = (void *)*a16;
  if (*a16)
  {
    int v74 = *(void **)(v70 + 32);
    int32x2_t v75 = (void *)*a16;
    if (v74 != v73)
    {
      do
      {
        v74 -= 22;
        sub_9F58F0(v70 + 40, v74);
      }
      while (v74 != v73);
      int32x2_t v75 = (void *)*a16;
    }
    *(void *)(v70 + 32) = v73;
    operator delete(v75);
  }
  STACK[0x6D0] = v70;
  sub_9F3A88(&a60);
  sub_9F3F50((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_9F2C38@<X0>(uint64_t a1@<X0>, int32x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_C4A5B8(v30);
  long long v10 = v30[1];
  *(_OWORD *)(a1 + 4368) = v30[0];
  *(_OWORD *)(a1 + 4384) = v10;
  uint64_t v11 = (void **)(a1 + 4400);
  if (*(char *)(a1 + 4423) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)uint64_t v11 = v31;
  *(void *)(a1 + 4416) = v32;
  HIBYTE(v32) = 0;
  LOBYTE(v31) = 0;
  *(void *)(a1 + 4632) = v46;
  *(_OWORD *)(a1 + 4584) = v43;
  *(_OWORD *)(a1 + 4600) = v44;
  *(_OWORD *)(a1 + 4616) = v45;
  *(_OWORD *)(a1 + 4520) = v39;
  *(_OWORD *)(a1 + 4536) = v40;
  *(_OWORD *)(a1 + 4552) = v41;
  *(_OWORD *)(a1 + 4568) = v42;
  *(_OWORD *)(a1 + 4456) = v35;
  *(_OWORD *)(a1 + 4472) = v36;
  *(_OWORD *)(a1 + 4488) = v37;
  *(_OWORD *)(a1 + 4504) = v38;
  *(_OWORD *)(a1 + 4424) = v33;
  *(_OWORD *)(a1 + 4440) = v34;
  uint64_t v12 = (void **)(a1 + 4640);
  if (*(char *)(a1 + 4663) < 0) {
    operator delete(*v12);
  }
  *(_OWORD *)uint64_t v12 = v47;
  *(void *)(a1 + 4656) = v48;
  HIBYTE(v48) = 0;
  LOBYTE(v47) = 0;
  *(_OWORD *)(a1 + 4728) = v53;
  *(_OWORD *)(a1 + 4744) = v54;
  *(_OWORD *)(a1 + 4760) = v55;
  *(_OWORD *)(a1 + 4776) = v56;
  *(_OWORD *)(a1 + 4664) = v49;
  *(_OWORD *)(a1 + 4680) = v50;
  *(_OWORD *)(a1 + 4696) = v51;
  *(_OWORD *)(a1 + 4712) = v52;
  long long v13 = v58;
  *(_OWORD *)(a1 + 4792) = v57;
  *(_OWORD *)(a1 + 4808) = v13;
  *(void *)(a1 + 4824) = v59;
  uint64_t v14 = (void **)(a1 + 4832);
  if (*(char *)(a1 + 4855) < 0) {
    operator delete(*v14);
  }
  *(_OWORD *)uint64_t v14 = v60;
  *(void *)(a1 + 4848) = v61;
  HIBYTE(v61) = 0;
  LOBYTE(v60) = 0;
  long long v15 = v67;
  *(_OWORD *)(a1 + 4920) = v66;
  *(_OWORD *)(a1 + 4936) = v15;
  long long v16 = v69;
  *(_OWORD *)(a1 + 4952) = v68;
  *(_OWORD *)(a1 + 4968) = v16;
  long long v17 = v63;
  *(_OWORD *)(a1 + 4856) = v62;
  *(_OWORD *)(a1 + 4872) = v17;
  long long v18 = v65;
  *(_OWORD *)(a1 + 4888) = v64;
  *(_OWORD *)(a1 + 4904) = v18;
  memcpy((void *)(a1 + 4984), v70, 0x220uLL);
  char v19 = 0;
  uint64_t v20 = (void **)(a1 + 5528);
  if (*(char *)(a1 + 5551) < 0)
  {
    operator delete(*v20);
    char v19 = HIBYTE(v61);
  }
  *(void *)(a1 + 5544) = v72;
  *(_OWORD *)uint64_t v20 = v71;
  HIBYTE(v72) = 0;
  LOBYTE(v71) = 0;
  *(_OWORD *)(a1 + 5568) = v74;
  *(_OWORD *)(a1 + 5584) = v75;
  *(_OWORD *)(a1 + 5600) = v76;
  *(void *)(a1 + 5616) = v77;
  *(_OWORD *)(a1 + 5552) = v73;
  if ((v19 & 0x80) == 0)
  {
    if ((SHIBYTE(v48) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_17:
    operator delete((void *)v47);
    if ((SHIBYTE(v32) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  operator delete((void *)v60);
  if (SHIBYTE(v48) < 0) {
    goto LABEL_17;
  }
LABEL_11:
  if ((SHIBYTE(v32) & 0x80000000) == 0) {
    goto LABEL_12;
  }
LABEL_18:
  operator delete((void *)v31);
LABEL_12:
  sub_C25924(a1 + 4032);
  uint64_t v21 = *(void *)(a1 + 128);
  uint64_t __p = operator new(0x40uLL);
  long long v79 = xmmword_20B9A90;
  strcpy((char *)__p, "routing/transit/journey_planning/JourneyPlannerWalking.json");
  long long v22 = sub_374CDC(v21, (uint64_t)&__p, (uint64_t *)(a1 + 5624));
  sub_BECDA4((uint64_t)v30, v21, a1 + 136, v22);
  if (SHIBYTE(v79) < 0) {
    operator delete(__p);
  }
  sub_BECDA8((uint64_t)v30, *(void *)&a2[4] + 184 * a3);
  sub_BED220((uint64_t)v30, *(void *)&a2[7] + 184 * a4);
  sub_BED560((uint64_t)v30);
  int v23 = sub_BED718((uint64_t)v30);
  sub_9F3FF8(a1, a2, v23, (uint64_t)v29);
  int v24 = sub_9F4100(a1);
  if (v24)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = v24;
    *(_OWORD *)(a5 + 20) = 0u;
    *(_OWORD *)(a5 + 36) = 0u;
    *(_OWORD *)(a5 + 52) = 0u;
    *(_DWORD *)(a5 + 68) = 0;
    return sub_9F603C((uint64_t)v30);
  }
  if (!*(unsigned char *)(a1 + 26))
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
LABEL_23:
    if (*(unsigned char *)(a1 + 24)) {
      sub_9F4224(a1, (uint64_t)a2);
    }
    sub_9F498C(a1, (uint64_t)a2, (uint64_t)v29);
  }
  sub_725A0(a1 + 4344);
  sub_497CC0(&__p, a1 + 136);
  sub_BC1AC0((uint64_t *)&__p, &v26);
  *(double *)(a1 + 4384) = sub_72688(a1 + 4344) + *(double *)(a1 + 4384);
  if (v26 == v27) {
    goto LABEL_23;
  }
  sub_A09E5C(a1 + 136, (uint64_t **)&v26, a2[10].u32[0], a3, a4, a5);
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  return sub_9F603C((uint64_t)v30);
}

void sub_9F3990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&STACK[0x908]);
  sub_9F53E0((uint64_t)&a18);
  if (a45)
  {
    a46 = a45;
    operator delete(a45);
    sub_9F603C((uint64_t)&a52);
    _Unwind_Resume(a1);
  }
  sub_9F603C((uint64_t)&a52);
  _Unwind_Resume(a1);
}

void *sub_9F3A88(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    char v4 = (void *)a1[4];
    int v5 = (void *)a1[3];
    if (v4 != v3)
    {
      do
      {
        v4 -= 22;
        sub_9F58F0((uint64_t)(a1 + 5), v4);
      }
      while (v4 != v3);
      int v5 = (void *)a1[3];
    }
    a1[4] = v3;
    operator delete(v5);
  }
  return a1;
}

void sub_9F3B04(uint64_t a1, uint64_t a2)
{
  switch(*(_DWORD *)(a2 + 16))
  {
    case 3:
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v4);
        sub_188FC78(v4, (uint64_t)"Transit journey planner produced an inconsistent solution", 57);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 3u);
        goto LABEL_12;
      }
      break;
    case 0x11:
    case 0x12:
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v4);
        sub_188FC78(v4, (uint64_t)"Transit journey planner solution aborted for being out of transit coverage", 74);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_12;
      }
      break;
    case 0x1B:
    case 0x1C:
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v4);
        sub_188FC78(v4, (uint64_t)"Transit journey planner solution aborted for the origin being out of transit coverage", 85);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_12;
      }
      break;
    case 0x22:
    case 0x23:
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v4);
        sub_188FC78(v4, (uint64_t)"Transit journey planner solution aborted for the destination being out of transit coverage", 90);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
        goto LABEL_12;
      }
      break;
    case 0x27:
      if (sub_723EC(1u))
      {
        sub_6BAC((uint64_t)v4);
        sub_188FC78(v4, (uint64_t)"Transit journey planner solution aborted for the time point being out of the validity period of the data", 104);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 1u);
LABEL_12:
        if (v3 < 0) {
          operator delete(__p[0]);
        }
        if (v5 < 0) {
          operator delete((void *)v4[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      break;
    default:
      return;
  }
}

void sub_9F3DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_9F3F50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1256);
  if (v2)
  {
    sub_9F5BC8(a1 + 1256, v2);
    operator delete(*(void **)(a1 + 1256));
  }
  if (*(char *)(a1 + 1183) < 0)
  {
    operator delete(*(void **)(a1 + 1160));
    if ((*(char *)(a1 + 487) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 295) & 0x80000000) == 0) {
        goto LABEL_6;
      }
LABEL_10:
      operator delete(*(void **)(a1 + 272));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 487) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 464));
  if (*(char *)(a1 + 295) < 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((*(char *)(a1 + 55) & 0x80000000) == 0) {
    return a1;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 32));
  return a1;
}

double sub_9F3FF8@<D0>(uint64_t a1@<X0>, int32x2_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 4344;
  sub_725A0(a1 + 4344);
  uint64_t v9 = *(void *)(a1 + 128);
  uint64_t __p = operator new(0x48uLL);
  long long v13 = xmmword_20B9A00;
  strcpy((char *)__p, "routing/transit/journey_planning/adapters/SpaRequestAdapter.json");
  long long v10 = sub_374CDC(v9, (uint64_t)&__p, (uint64_t *)(a1 + 5624));
  sub_A1863C((uint64_t)v14, v9, a1 + 136, v10);
  sub_A186F4((uint64_t)v14, a2, a3, a4);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  double result = sub_72688(v8) + *(double *)(a1 + 4392);
  *(double *)(a1 + 4392) = result;
  return result;
}

void sub_9F40E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9F4100(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 25)) {
    return 0;
  }
  uint64_t v2 = a1 + 4344;
  sub_725A0(a1 + 4344);
  uint64_t v3 = *(void *)(a1 + 128);
  uint64_t __p = operator new(0x48uLL);
  long long v8 = xmmword_20E8240;
  strcpy((char *)__p, "routing/transit/journey_planning/preprocessing/CoverageCheck.json");
  char v4 = sub_374CDC(v3, (uint64_t)&__p, (uint64_t *)(a1 + 5624));
  sub_BBFF04(v9, v3, a1 + 136, v4);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  uint64_t v5 = sub_BBFF34(v9);
  *(double *)(a1 + 4376) = sub_72688(v2) + *(double *)(a1 + 4376);
  return v5;
}

void sub_9F4208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9F4224(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 27)) {
    BOOL v2 = *(unsigned char *)(a2 + 164) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    if (!*(unsigned char *)(a1 + 29)) {
      goto LABEL_10;
    }
  }
  else if (!*(unsigned char *)(a1 + 29))
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 52)) {
    sub_37B3B8(*(uint64_t **)(a1 + 128));
  }
LABEL_10:
  operator new();
}

void sub_9F4890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::promise<void> a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::future<void> a63)
{
  sub_9F53E0(v63);
  sub_9F53E0((uint64_t)&a36);
  sub_9F5488((uint64_t)&a63);
  sub_9F83FC((uint64_t *)(v64 - 88));
  _Unwind_Resume(a1);
}

void sub_9F4948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  sub_9F5488((uint64_t)&a63);
  sub_9F83FC((uint64_t *)(v63 - 88));
  _Unwind_Resume(a1);
}

void sub_9F4964(_Unwind_Exception *a1)
{
  sub_9F83FC((uint64_t *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_9F4978(_Unwind_Exception *a1)
{
  sub_9F83FC((uint64_t *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_9F498C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v10 = 0;
  uint64_t v13 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  char v9 = 0;
  LOBYTE(__p[0]) = 0;
  sub_C50BD8((char *)&v14, (long long *)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  char v15 = 0;
  uint64_t v17 = 0;
  v16[0] = 0;
  v16[1] = 0;
  sub_9F8BC0(__p, a1, *(void *)(a1 + 128), a1 + 136, *(void *)(a1 + 4336), a1 + 5624);
  if (*(unsigned char *)(a1 + 27)) {
    BOOL v4 = *(unsigned char *)(a2 + 164) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    int v5 = 0;
    if (*(_DWORD *)(a2 + 160) != 1) {
      goto LABEL_15;
    }
  }
  else
  {
    int v5 = *(unsigned char *)(a1 + 28) == 0;
    if (*(_DWORD *)(a2 + 160) != 1) {
      goto LABEL_15;
    }
  }
  if (*(unsigned char *)(a1 + 29) && sub_37B3B8(*(uint64_t **)(a1 + 128)) && *(_DWORD *)(a1 + 52) == 2) {
    int v5 = 2;
  }
LABEL_15:
  sub_C259A4(a1 + 4032, v5);
  sub_9F8C24((uint64_t)__p, a2, a3);
}

void sub_9F527C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p)
{
}

void sub_9F5328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  sub_9F53E0(v52);
  sub_9F5488(&a52);
  sub_9F53E0(&STACK[0x680]);
  _Unwind_Resume(a1);
}

void *sub_9F5350(void *a1)
{
  BOOL v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v2) {
      (*(void (**)(void *))(*v2 + 40))(v2);
    }
    return a1;
  }
}

uint64_t sub_9F53E0(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 192);
  if (v2)
  {
    *(void *)(a1 + 200) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    uint64_t v3 = *(void **)(a1 + 8);
    if (!v3) {
      return a1;
    }
  }
  else
  {
    uint64_t v3 = *(void **)(a1 + 8);
    if (!v3) {
      return a1;
    }
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = v3;
  if ((void *)v5 != v3)
  {
    do
    {
      v5 -= 296;
      sub_9F5E28(a1 + 24, v5);
    }
    while ((void *)v5 != v3);
    uint64_t v6 = *(void **)(a1 + 8);
  }
  *(void *)(a1 + 16) = v3;
  operator delete(v6);
  return a1;
}

uint64_t sub_9F5488(uint64_t a1)
{
  if (*(char *)(a1 + 1223) < 0)
  {
    operator delete(*(void **)(a1 + 1200));
    if ((*(char *)(a1 + 527) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 335) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(*(void **)(a1 + 312));
      if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
        return a1;
      }
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 527) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 504));
  if (*(char *)(a1 + 335) < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((*(char *)(a1 + 95) & 0x80000000) == 0) {
    return a1;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 72));
  return a1;
}

void sub_9F5514(uint64_t *a1, long long *a2, char a3, long long *a4)
{
  long long v13 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v4 = *a4;
  long long v5 = a4[1];
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  long long v8 = v4;
  long long v9 = v5;
  *((void *)a4 + 2) = 0;
  *((void *)a4 + 3) = 0;
  long long v6 = a4[2];
  long long v7 = a4[3];
  *((void *)a4 + 4) = 0;
  *((void *)a4 + 5) = 0;
  long long v10 = v6;
  long long v11 = v7;
  *((void *)a4 + 6) = 0;
  *((void *)a4 + 7) = 0;
  long long v12 = a4[4];
  *((void *)a4 + 8) = 0;
  *((void *)a4 + 9) = 0;
  sub_9F5650(a1, (uint64_t)&v13, a3);
}

void sub_9F5634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_37D394(&a9);
  sub_14A84(v9 - 32);
  _Unwind_Resume(a1);
}

void sub_9F5650(uint64_t *a1, uint64_t a2, char a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *((unsigned char *)a1 + 16) = sub_2ABCE4((void **)*a1);
  *((unsigned char *)a1 + 17) = a3;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = 0;
  a1[3] = v6;
  a1[4] = v5;
  do
  {
    long long v8 = &a1[v7];
    *((_DWORD *)v8 + 10) = 0;
    *((_DWORD *)v8 + 16) = 0;
    v8[6] = 0;
    v8[9] = 0;
    v7 += 6;
  }
  while (v7 != 480);
  *(_OWORD *)(a1 + 485) = 0u;
  sub_C25818((uint64_t)(a1 + 487));
}

void sub_9F5814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_37D394(v17);
  sub_9F588C(v18);
  sub_14A84(v16);
  sub_14A84(v15);
  _Unwind_Resume(a1);
}

void sub_9F5878(_Unwind_Exception *a1)
{
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9F588C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  *(void *)(result + 24) = 0;
  if (v1)
  {
    sub_49DB44(v1, *(void **)(v1 + 16));
    BOOL v2 = *(void **)v1;
    *(void *)uint64_t v1 = 0;
    if (v2) {
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

void sub_9F58F0(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[17];
  if (v3)
  {
    a2[18] = v3;
    operator delete(v3);
  }
  long long v4 = (void *)a2[12];
  if (v4)
  {
    a2[13] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a2[9];
  if (v5)
  {
    a2[10] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a2[6];
  if (v6)
  {
    a2[7] = v6;
    operator delete(v6);
  }
  uint64_t v9 = (void **)a2[3];
  long long v8 = (void **)(a2 + 3);
  uint64_t v7 = v9;
  if (v9)
  {
    sub_9F59BC((uint64_t)v8, v7);
    long long v10 = *v8;
    operator delete(v10);
  }
}

void ***sub_9F5980(void ***a1)
{
  if (*a1)
  {
    sub_9F59BC((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

void sub_9F59BC(uint64_t a1, void **a2)
{
  long long v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      uint64_t v6 = *(v4 - 5);
      if (v6)
      {
        *(v4 - 4) = v6;
        operator delete(v6);
      }
      uint64_t v7 = v4 - 8;
      long long v8 = (char *)*(v4 - 8);
      if (v8)
      {
        uint64_t v9 = (char *)*(v4 - 7);
        uint64_t v5 = *(v4 - 8);
        if (v9 != v8)
        {
          do
          {
            long long v11 = (void *)*((void *)v9 - 5);
            if (v11)
            {
              *((void *)v9 - 4) = v11;
              operator delete(v11);
            }
            long long v12 = (void *)*((void *)v9 - 8);
            if (v12)
            {
              *((void *)v9 - 7) = v12;
              operator delete(v12);
            }
            long long v13 = (void *)*((void *)v9 - 11);
            if (v13)
            {
              *((void *)v9 - 10) = v13;
              operator delete(v13);
            }
            uint64_t v14 = (void *)*((void *)v9 - 14);
            if (v14)
            {
              *((void *)v9 - 13) = v14;
              operator delete(v14);
            }
            uint64_t v15 = *((void *)v9 - 17);
            if (v15)
            {
              uint64_t v16 = *((void *)v9 - 16);
              long long v10 = (void *)*((void *)v9 - 17);
              if (v16 != v15)
              {
                uint64_t v17 = v16 - 1064;
                do
                {
                  int v19 = *(_DWORD *)(v17 + 1056);
                  if (v19 == 3)
                  {
                    sub_3AFFFC(v17);
                  }
                  else if (v19 == 1)
                  {
                    uint64_t v20 = *(void **)(v17 + 16);
                    if (v20)
                    {
                      *(void *)(v17 + 24) = v20;
                      operator delete(v20);
                    }
                  }
                  else if (!v19 && *(unsigned char *)(v17 + 28))
                  {
                    *(unsigned char *)(v17 + 28) = 0;
                  }
                  uint64_t v18 = v17 - 32;
                  v17 -= 1096;
                }
                while (v18 != v15);
                long long v10 = (void *)*((void *)v9 - 17);
              }
              *((void *)v9 - 16) = v15;
              operator delete(v10);
            }
            v9 -= 144;
          }
          while (v9 != v8);
          uint64_t v5 = *v7;
        }
        *(v4 - 7) = v8;
        operator delete(v5);
      }
      v4 -= 8;
    }
    while (v7 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void **sub_9F5B1C(void **a1)
{
  BOOL v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (uint64_t)v3 - 1064;
      do
      {
        int v7 = *(_DWORD *)(v5 + 1056);
        if (v7 == 3)
        {
          sub_3AFFFC(v5);
        }
        else if (v7 == 1)
        {
          long long v8 = *(void **)(v5 + 16);
          if (v8)
          {
            *(void *)(v5 + 24) = v8;
            operator delete(v8);
          }
        }
        else if (!v7 && *(unsigned char *)(v5 + 28))
        {
          *(unsigned char *)(v5 + 28) = 0;
        }
        uint64_t v6 = v5 - 32;
        v5 -= 1096;
      }
      while ((void *)v6 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_9F5BC8(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 72)
  {
    uint64_t v6 = *(void **)(i - 24);
    if (v6)
    {
      *(void *)(i - 16) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void *)(i - 48);
    if (v7)
    {
      uint64_t v8 = *(void *)(i - 40);
      uint64_t v5 = *(void **)(i - 48);
      if (v8 != v7)
      {
        uint64_t v9 = v8 - 152;
        do
        {
          long long v11 = *(void **)(v9 + 112);
          if (v11)
          {
            *(void *)(v9 + 120) = v11;
            operator delete(v11);
          }
          long long v12 = *(void **)(v9 + 72);
          if (v12)
          {
            *(void *)(v9 + 80) = v12;
            operator delete(v12);
          }
          long long v13 = *(void **)(v9 + 48);
          if (v13)
          {
            *(void *)(v9 + 56) = v13;
            operator delete(v13);
          }
          uint64_t v14 = *(void **)(v9 + 24);
          if (v14)
          {
            *(void *)(v9 + 32) = v14;
            operator delete(v14);
          }
          if (*(void *)v9)
          {
            sub_9F59BC(v9, *(void ***)v9);
            operator delete(*(void **)v9);
          }
          uint64_t v10 = v9 - 24;
          v9 -= 176;
        }
        while (v10 != v7);
        uint64_t v5 = *(void **)(i - 48);
      }
      *(void *)(i - 40) = v7;
      operator delete(v5);
    }
  }
  *(void *)(a1 + 8) = a2;
}

void sub_9F5CC4()
{
}

void *sub_9F5CD8()
{
  double result = operator new(0x10uLL);
  void *result = off_243CC30;
  return result;
}

void sub_9F5D10(uint64_t a1, void *a2)
{
  *a2 = off_243CC30;
}

uint64_t sub_9F5D38()
{
  return 1;
}

uint64_t sub_9F5D40(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning16JourneyPredicate3anyEvEUlRKNS1_10SpaJourneyEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning16JourneyPredicate3anyEvEUlRKNS1_10SpaJourneyEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning16JourneyPredicate3anyEvEUlRKNS1_10SpaJourneyEE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning16JourneyPredicate3anyEvEUlRKNS1_10SpaJourneyEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_9F5DB0()
{
}

void **sub_9F5DBC(void **a1)
{
  BOOL v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 296;
        sub_9F5E28((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_9F5E28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 272);
  if (v3)
  {
    *(void *)(a2 + 280) = v3;
    operator delete(v3);
  }
  long long v4 = *(void **)(a2 + 248);
  if (v4)
  {
    *(void *)(a2 + 256) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a2 + 224);
  if (v5)
  {
    *(void *)(a2 + 232) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void ***)(a2 + 200);
  if (v6)
  {
    uint64_t v7 = *(void ***)(a2 + 208);
    uint64_t v8 = *(void **)(a2 + 200);
    if (v7 != v6)
    {
      do
      {
        v7 -= 9;
        sub_9F5F58(a2 + 216, v7);
      }
      while (v7 != v6);
      uint64_t v8 = *(void **)(a2 + 200);
    }
    *(void *)(a2 + 208) = v6;
    operator delete(v8);
  }
  if (*(char *)(a2 + 135) < 0)
  {
    uint64_t v9 = *(void **)(a2 + 112);
    operator delete(v9);
  }
}

void ***sub_9F5EEC(void ***a1)
{
  BOOL v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    long long v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 9;
        sub_9F5F58((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v2);
      long long v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_9F5F58(uint64_t a1, void **a2)
{
  uint64_t v3 = a2[4];
  if (v3)
  {
    a2[5] = v3;
    operator delete(v3);
  }
  long long v4 = (char *)*a2;
  if (*a2)
  {
    uint64_t v5 = (char *)a2[1];
    uint64_t v6 = *a2;
    if (v5 == v4)
    {
      a2[1] = v4;
    }
    else
    {
      do
      {
        if (!*((_DWORD *)v5 - 2))
        {
          uint64_t v7 = (void *)*((void *)v5 - 6);
          if (v7)
          {
            *((void *)v5 - 5) = v7;
            operator delete(v7);
          }
          uint64_t v8 = (void *)*((void *)v5 - 10);
          if (v8)
          {
            *((void *)v5 - 9) = v8;
            operator delete(v8);
          }
          uint64_t v9 = (void *)*((void *)v5 - 13);
          if (v9)
          {
            *((void *)v5 - 12) = v9;
            operator delete(v9);
          }
        }
        v5 -= 168;
      }
      while (v5 != v4);
      uint64_t v6 = *a2;
      a2[1] = v4;
    }
    operator delete(v6);
  }
}

uint64_t sub_9F603C(uint64_t a1)
{
  sub_9F6234(a1 + 1408, *(void **)(a1 + 1424));
  BOOL v2 = *(void **)(a1 + 1408);
  *(void *)(a1 + 1408) = 0;
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 1384);
  if (v3)
  {
    do
    {
      long long v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  uint64_t v5 = *(void **)(a1 + 1368);
  *(void *)(a1 + 1368) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 1344);
  if (v6)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = *(void **)(a1 + 1328);
  *(void *)(a1 + 1328) = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = *(void *)(a1 + 1304);
  if (v9)
  {
    sub_9F64C8(a1 + 1304, v9);
    operator delete(*(void **)(a1 + 1304));
  }
  uint64_t v10 = *(void **)(a1 + 1272);
  if (v10)
  {
    do
    {
      long long v11 = (void *)*v10;
      operator delete(v10);
      uint64_t v10 = v11;
    }
    while (v11);
  }
  long long v12 = *(void **)(a1 + 1256);
  *(void *)(a1 + 1256) = 0;
  if (v12) {
    operator delete(v12);
  }
  long long v13 = *(void **)(a1 + 1232);
  if (v13)
  {
    do
    {
      uint64_t v14 = (void *)*v13;
      operator delete(v13);
      long long v13 = v14;
    }
    while (v14);
  }
  uint64_t v15 = *(void **)(a1 + 1216);
  *(void *)(a1 + 1216) = 0;
  if (v15) {
    operator delete(v15);
  }
  uint64_t v16 = *(void *)(a1 + 1192);
  if (v16)
  {
    sub_9F64C8(a1 + 1192, v16);
    operator delete(*(void **)(a1 + 1192));
  }
  if (*(char *)(a1 + 1023) < 0)
  {
    operator delete(*(void **)(a1 + 1000));
    if ((*(char *)(a1 + 999) & 0x80000000) == 0)
    {
LABEL_25:
      if ((*(char *)(a1 + 975) & 0x80000000) == 0) {
        goto LABEL_26;
      }
      goto LABEL_35;
    }
  }
  else if ((*(char *)(a1 + 999) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(*(void **)(a1 + 976));
  if ((*(char *)(a1 + 975) & 0x80000000) == 0)
  {
LABEL_26:
    if ((*(char *)(a1 + 951) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete(*(void **)(a1 + 952));
  if ((*(char *)(a1 + 951) & 0x80000000) == 0)
  {
LABEL_27:
    if ((*(char *)(a1 + 927) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(*(void **)(a1 + 928));
  if ((*(char *)(a1 + 927) & 0x80000000) == 0)
  {
LABEL_28:
    if ((*(char *)(a1 + 735) & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(*(void **)(a1 + 904));
  if ((*(char *)(a1 + 735) & 0x80000000) == 0)
  {
LABEL_29:
    if ((*(char *)(a1 + 711) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(*(void **)(a1 + 712));
  if ((*(char *)(a1 + 711) & 0x80000000) == 0)
  {
LABEL_30:
    if ((*(char *)(a1 + 383) & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_40:
    operator delete(*(void **)(a1 + 360));
    if ((*(char *)(a1 + 359) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_41;
  }
LABEL_39:
  operator delete(*(void **)(a1 + 688));
  if (*(char *)(a1 + 383) < 0) {
    goto LABEL_40;
  }
LABEL_31:
  if ((*(char *)(a1 + 359) & 0x80000000) == 0) {
    return a1;
  }
LABEL_41:
  operator delete(*(void **)(a1 + 336));
  return a1;
}

void sub_9F6234(uint64_t a1, void *a2)
{
  if (a2)
  {
    BOOL v2 = a2;
    do
    {
      long long v4 = (void *)*v2;
      uint64_t v5 = v2[4];
      if (v5)
      {
        uint64_t v6 = v2[5];
        uint64_t v3 = (void *)v2[4];
        if (v6 != v5)
        {
          uint64_t v7 = v6 - 1360;
          while (1)
          {
            int v9 = *(_DWORD *)(v7 + 1352);
            if (v9 == 2) {
              break;
            }
            if (!v9)
            {
              uint64_t v10 = *(void **)(v7 + 288);
              if (v10)
              {
                *(void *)(v7 + 296) = v10;
                operator delete(v10);
              }
LABEL_16:
              if (*(_DWORD *)(v7 + 264) == 1)
              {
                long long v11 = *(void **)(v7 + 232);
                if (v11)
                {
                  *(void *)(v7 + 240) = v11;
                  operator delete(v11);
                }
                long long v12 = *(void **)(v7 + 208);
                if (v12)
                {
                  *(void *)(v7 + 216) = v12;
                  operator delete(v12);
                }
                long long v13 = *(void **)(v7 + 176);
                if (v13)
                {
                  *(void *)(v7 + 184) = v13;
                  operator delete(v13);
                }
              }
              if (*(_DWORD *)(v7 + 88) == 1)
              {
                uint64_t v14 = *(void **)(v7 + 56);
                if (v14)
                {
                  *(void *)(v7 + 64) = v14;
                  operator delete(v14);
                }
                uint64_t v15 = *(void **)(v7 + 32);
                if (v15)
                {
                  *(void *)(v7 + 40) = v15;
                  operator delete(v15);
                }
                uint64_t v16 = *(void **)v7;
                if (*(void *)v7)
                {
                  *(void *)(v7 + 8) = v16;
                  operator delete(v16);
                }
              }
            }
            uint64_t v8 = v7 - 72;
            v7 -= 1432;
            if (v8 == v5)
            {
              uint64_t v3 = (void *)v2[4];
              goto LABEL_4;
            }
          }
          if (*(unsigned char *)(v7 + 1336))
          {
            sub_3AFFFC(v7 + 280);
            *(unsigned char *)(v7 + 1336) = 0;
          }
          goto LABEL_16;
        }
LABEL_4:
        v2[5] = v5;
        operator delete(v3);
      }
      operator delete(v2);
      BOOL v2 = v4;
    }
    while (v4);
  }
}

uint64_t sub_9F636C(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 360);
  if (v2)
  {
    *(void *)(a1 + 368) = v2;
    operator delete(v2);
  }
  if (*(_DWORD *)(a1 + 336) == 1)
  {
    uint64_t v3 = *(void **)(a1 + 304);
    if (v3)
    {
      *(void *)(a1 + 312) = v3;
      operator delete(v3);
    }
    long long v4 = *(void **)(a1 + 280);
    if (v4)
    {
      *(void *)(a1 + 288) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(a1 + 248);
    if (v5)
    {
      *(void *)(a1 + 256) = v5;
      operator delete(v5);
    }
  }
  if (*(_DWORD *)(a1 + 160) == 1)
  {
    uint64_t v6 = *(void **)(a1 + 128);
    if (v6)
    {
      *(void *)(a1 + 136) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(a1 + 104);
    if (v7)
    {
      *(void *)(a1 + 112) = v7;
      operator delete(v7);
    }
    uint64_t v8 = *(void **)(a1 + 72);
    if (v8)
    {
      *(void *)(a1 + 80) = v8;
      operator delete(v8);
    }
  }
  return a1;
}

uint64_t sub_9F6418(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1408))
  {
    sub_3AFFFC(a1 + 352);
    *(unsigned char *)(a1 + 1408) = 0;
  }
  if (*(_DWORD *)(a1 + 336) == 1)
  {
    BOOL v2 = *(void **)(a1 + 304);
    if (v2)
    {
      *(void *)(a1 + 312) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 280);
    if (v3)
    {
      *(void *)(a1 + 288) = v3;
      operator delete(v3);
    }
    long long v4 = *(void **)(a1 + 248);
    if (v4)
    {
      *(void *)(a1 + 256) = v4;
      operator delete(v4);
    }
  }
  if (*(_DWORD *)(a1 + 160) == 1)
  {
    uint64_t v5 = *(void **)(a1 + 128);
    if (v5)
    {
      *(void *)(a1 + 136) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void **)(a1 + 104);
    if (v6)
    {
      *(void *)(a1 + 112) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void **)(a1 + 72);
    if (v7)
    {
      *(void *)(a1 + 80) = v7;
      operator delete(v7);
    }
  }
  return a1;
}

void sub_9F64C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 1560;
    while (1)
    {
      uint64_t v7 = v5 + 112;
      int v8 = *(_DWORD *)(v5 + 1536);
      if (v8 != 2) {
        break;
      }
      sub_9F6418(v7);
      if (*(_DWORD *)(v5 + 88) == 1) {
        goto LABEL_10;
      }
LABEL_3:
      uint64_t v6 = v5 - 72;
      v5 -= 1632;
      if (v6 == a2) {
        goto LABEL_16;
      }
    }
    if (!v8) {
      sub_9F636C(v7);
    }
    if (*(_DWORD *)(v5 + 88) != 1) {
      goto LABEL_3;
    }
LABEL_10:
    int v9 = *(void **)(v5 + 56);
    if (v9)
    {
      *(void *)(v5 + 64) = v9;
      operator delete(v9);
    }
    uint64_t v10 = *(void **)(v5 + 32);
    if (v10)
    {
      *(void *)(v5 + 40) = v10;
      operator delete(v10);
    }
    long long v11 = *(void **)v5;
    if (*(void *)v5)
    {
      *(void *)(v5 + 8) = v11;
      operator delete(v11);
    }
    goto LABEL_3;
  }
LABEL_16:
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_9F6588(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_9F6728(a1 + 8, *(void *)(a2 + 8), *(void *)(a2 + 16), 0x14C1BACF914C1BADLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  if (*(char *)(a2 + 55) < 0)
  {
    sub_4200((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 72);
  long long v7 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  long long v8 = *(_OWORD *)(a2 + 120);
  long long v9 = *(_OWORD *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 136) = v9;
  *(_OWORD *)(a1 + 120) = v8;
  char v11 = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 184) = v11;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  long long v13 = *(unsigned char **)(a2 + 192);
  long long v12 = *(unsigned char **)(a2 + 200);
  uint64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      sub_2E00();
    }
    uint64_t v15 = (char *)operator new(v12 - v13);
    *(void *)(a1 + 192) = v15;
    *(void *)(a1 + 200) = v15;
    uint64_t v16 = &v15[8 * (v14 >> 3)];
    *(void *)(a1 + 208) = v16;
    memcpy(v15, v13, v14 - 3);
    *(void *)(a1 + 200) = v16;
  }
  return a1;
}

void sub_9F66C8(_Unwind_Exception *a1)
{
  sub_9F5DBC(v1);
  _Unwind_Resume(a1);
}

void sub_9F66DC(_Unwind_Exception *a1)
{
  long long v6 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 200) = v6;
    operator delete(v6);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      sub_9F5DBC(v2);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  sub_9F5DBC(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_9F6728(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0xDD67C8A60DD67DLL) {
      sub_2E00();
    }
    double result = (uint64_t)operator new(296 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 296 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        double result = sub_9F68D4(v8 + v9, (long long *)(a2 + v9));
        v9 += 296;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_9F67F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_9F6804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v12; v12 -= 296)
    sub_9F5E28(v11, v10 - 296 + v12);
  *(void *)(v9 + 8) = v10;
  sub_9F6838(&a9);
  _Unwind_Resume(a1);
}

void ***sub_9F6838(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    BOOL v2 = *result;
    uint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **result;
      if ((void *)v4 != v3)
      {
        do
        {
          v4 -= 296;
          sub_9F5E28((uint64_t)(v2 + 2), v4);
        }
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_9F68D4(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  long long v6 = a2[3];
  long long v7 = a2[4];
  long long v8 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
  if (*((char *)a2 + 135) < 0)
  {
    sub_4200((unsigned char *)(a1 + 112), *((void **)a2 + 14), *((void *)a2 + 15));
  }
  else
  {
    long long v9 = a2[7];
    *(void *)(a1 + 128) = *((void *)a2 + 16);
    *(_OWORD *)(a1 + 112) = v9;
  }
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 34);
  long long v10 = a2[9];
  long long v11 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 144) = v10;
  *(void *)&long long v10 = *((void *)a2 + 24);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = v10;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  sub_9F6B70((void *)(a1 + 200), *((void *)a2 + 25), *((void *)a2 + 26), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 26) - *((void *)a2 + 25)) >> 3));
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  long long v13 = (unsigned char *)*((void *)a2 + 28);
  uint64_t v12 = (unsigned char *)*((void *)a2 + 29);
  uint64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0) {
      sub_2E00();
    }
    uint64_t v15 = (char *)operator new(v12 - v13);
    *(void *)(a1 + 224) = v15;
    *(void *)(a1 + 232) = v15;
    uint64_t v16 = &v15[16 * (v14 >> 4)];
    *(void *)(a1 + 240) = v16;
    memcpy(v15, v13, v14 - 3);
    *(void *)(a1 + 232) = v16;
  }
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  uint64_t v18 = (unsigned char *)*((void *)a2 + 31);
  uint64_t v17 = (unsigned char *)*((void *)a2 + 32);
  int64_t v19 = v17 - v18;
  if (v17 != v18)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v19 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    uint64_t v20 = (char *)operator new(v19);
    *(void *)(a1 + 248) = v20;
    *(void *)(a1 + 256) = v20;
    uint64_t v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a1 + 264) = v21;
    memcpy(v20, v18, v19 - 7);
    *(void *)(a1 + 256) = v21;
  }
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  int v23 = (unsigned char *)*((void *)a2 + 34);
  long long v22 = (unsigned char *)*((void *)a2 + 35);
  int64_t v24 = v22 - v23;
  if (v22 != v23)
  {
    if (v24 < 0) {
      sub_2E00();
    }
    int64_t v25 = (char *)operator new(v22 - v23);
    *(void *)(a1 + 272) = v25;
    *(void *)(a1 + 280) = v25;
    uint64_t v26 = &v25[8 * (v24 >> 3)];
    *(void *)(a1 + 288) = v26;
    memcpy(v25, v23, v24);
    *(void *)(a1 + 280) = v26;
  }
  return a1;
}

void sub_9F6AE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 135) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_9F6B40()
{
  if (*v0) {
    JUMPOUT(0x9F6B4CLL);
  }
  JUMPOUT(0x9F6AFCLL);
}

void sub_9F6B60()
{
  if (!*v0) {
    JUMPOUT(0x9F6B0CLL);
  }
  JUMPOUT(0x9F6B04);
}

void *sub_9F6B70(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x38E38E38E38E38FLL) {
      sub_2E00();
    }
    double result = operator new(72 * a4);
    long long v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[9 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        double result = sub_9F6D1C(&v8[v9 / 8], a2 + v9);
        v9 += 72;
      }
      while (a2 + v9 != a3);
      long long v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_9F6C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_9F6C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v12; v12 -= 72)
    sub_9F5F58(v11, (void **)(v10 - 72 + v12));
  *(void *)(v9 + 8) = v10;
  sub_9F6C80(&a9);
  _Unwind_Resume(a1);
}

void ***sub_9F6C80(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    BOOL v2 = *result;
    uint64_t v3 = (void **)**result;
    if (v3)
    {
      long long v4 = (void **)v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v4 -= 9;
          sub_9F5F58((uint64_t)(v2 + 2), v4);
        }
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void *sub_9F6D1C(void *a1, uint64_t a2)
{
  long long v4 = sub_9F6E10(a1, (uint64_t *)a2);
  char v5 = *(unsigned char *)(a2 + 24);
  v4[4] = 0;
  *((unsigned char *)v4 + 24) = v5;
  v4[5] = 0;
  v4[6] = 0;
  long long v7 = *(unsigned char **)(a2 + 32);
  long long v6 = *(unsigned char **)(a2 + 40);
  int64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v8 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v8);
    a1[4] = v9;
    a1[5] = v9;
    uint64_t v10 = &v9[8 * (v8 >> 3)];
    a1[6] = v10;
    memcpy(v9, v7, v8 - 7);
    a1[5] = v10;
  }
  uint64_t v11 = *(void *)(a2 + 56);
  *(void *)((char *)a1 + 63) = *(void *)(a2 + 63);
  a1[7] = v11;
  return a1;
}

void sub_9F6DEC(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  sub_20ADAB0((void **)v1);
  _Unwind_Resume(a1);
}

void *sub_9F6E10(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xCF3CF3CF3CF3CF3DLL * (v6 >> 3);
    if (v7 >= 0x186186186186187) {
      sub_2E00();
    }
    int64_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[168 * v7];
    a1[1] = sub_9F6EF4(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_9F6EC8(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    sub_20ADB40();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9F6EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v9 = (long long *)(a4 + v7);
      uint64_t v10 = (long long *)(a2 + v7);
      *(_DWORD *)(a4 + v7 + 160) = *(_DWORD *)(a2 + v7 + 160);
      int v11 = *(_DWORD *)(a2 + v7 + 160);
      if (v11 == 1)
      {
        long long v8 = *v10;
        *(long long *)((char *)v9 + 12) = *(long long *)((char *)v10 + 12);
        long long *v9 = v8;
      }
      else if (!v11)
      {
        sub_9F6FA0((uint64_t)v9, v10);
      }
      v7 += 168;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_9F6F84(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_20ADBD8();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9F6FA0(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(_OWORD *)(a1 + 44) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  long long v8 = (unsigned char *)*((void *)a2 + 8);
  uint64_t v7 = (unsigned char *)*((void *)a2 + 9);
  int64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    if (0xEEEEEEEEEEEEEEEFLL * (v9 >> 2) > 0x444444444444444) {
      sub_2E00();
    }
    uint64_t v10 = (char *)operator new(v9);
    *(void *)(a1 + 64) = v10;
    *(void *)(a1 + 72) = v10;
    int v11 = &v10[4 * (v9 >> 2)];
    *(void *)(a1 + 80) = v11;
    memcpy(v10, v8, v9 - 3);
    *(void *)(a1 + 72) = v11;
  }
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  long long v13 = (unsigned char *)*((void *)a2 + 11);
  uint64_t v12 = (unsigned char *)*((void *)a2 + 12);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (0xEEEEEEEEEEEEEEEFLL * (v14 >> 2) > 0x444444444444444) {
      sub_2E00();
    }
    uint64_t v15 = (char *)operator new(v14);
    *(void *)(a1 + 88) = v15;
    *(void *)(a1 + 96) = v15;
    uint64_t v16 = &v15[4 * (v14 >> 2)];
    *(void *)(a1 + 104) = v16;
    memcpy(v15, v13, v14 - 3);
    *(void *)(a1 + 96) = v16;
  }
  int v17 = *((_DWORD *)a2 + 28);
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 112) = v17;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  int64_t v19 = (unsigned char *)*((void *)a2 + 15);
  uint64_t v18 = (unsigned char *)*((void *)a2 + 16);
  int64_t v20 = v18 - v19;
  if (v18 != v19)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v20 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    uint64_t v21 = (char *)operator new(v20);
    *(void *)(a1 + 120) = v21;
    *(void *)(a1 + 128) = v21;
    long long v22 = &v21[8 * (v20 >> 3)];
    *(void *)(a1 + 136) = v22;
    memcpy(v21, v19, v20 - 7);
    *(void *)(a1 + 128) = v22;
  }
  *(_OWORD *)(a1 + 144) = a2[9];
  return a1;
}

void sub_9F7140(_Unwind_Exception *exception_object)
{
  long long v6 = *v4;
  if (*v4)
  {
    v1[16] = v6;
    operator delete(v6);
    uint64_t v7 = *v3;
    if (!*v3)
    {
LABEL_3:
      long long v8 = *v2;
      if (!*v2) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v7 = *v3;
    if (!*v3) {
      goto LABEL_3;
    }
  }
  v1[12] = v7;
  operator delete(v7);
  long long v8 = *v2;
  if (!*v2) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  v1[9] = v8;
  operator delete(v8);
  goto LABEL_5;
}

void sub_9F71A0()
{
  if (!*v0) {
    JUMPOUT(0x9F7164);
  }
  JUMPOUT(0x9F715CLL);
}

uint64_t sub_9F71B0(int64x2_t *a1, long long *a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0x8E38E38E38E38E39 * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v6 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x38E38E38E38E38ELL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(72 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t __p = v7;
  v20.i64[0] = (uint64_t)&v7[72 * v3];
  uint64_t v21 = &v7[72 * v6];
  sub_9F7388(v20.i64[0], a2);
  uint64_t v8 = v20.i64[0];
  uint64_t v9 = v20.i64[0] + 72;
  v20.i64[1] = v20.i64[0] + 72;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v8 + v12;
      uint64_t v14 = v10 + v12;
      uint64_t v15 = *(void *)(v10 + v12 - 56);
      *(_OWORD *)(v13 - 72) = *(_OWORD *)(v10 + v12 - 72);
      *(void *)(v13 - 56) = v15;
      *(void *)(v13 - 48) = 0;
      *(void *)(v13 - 40) = 0;
      *(void *)(v13 - 32) = 0;
      *(_OWORD *)(v13 - 48) = *(_OWORD *)(v10 + v12 - 48);
      *(void *)(v13 - 32) = *(void *)(v10 + v12 - 32);
      *(void *)(v14 - 48) = 0;
      *(void *)(v14 - 40) = 0;
      *(void *)(v14 - 32) = 0;
      *(void *)(v13 - 24) = 0;
      *(void *)(v13 - 16) = 0;
      *(void *)(v13 - 8) = 0;
      *(_OWORD *)(v13 - 24) = *(_OWORD *)(v10 + v12 - 24);
      *(void *)(v13 - 8) = *(void *)(v10 + v12 - 8);
      *(void *)(v14 - 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(void *)(v14 - 8) = 0;
      v12 -= 72;
    }
    while (v10 + v12 != v11);
    int64x2_t v16 = *a1;
    uint64_t v9 = v20.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v20 = v16;
  int v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  uint64_t v21 = v17;
  uint64_t __p = (void *)v16.i64[0];
  sub_9F8140((uint64_t)&__p, v16.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v9;
}

void sub_9F7374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9F8108((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_9F7388(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  sub_9F7470(a1 + 24, *((void *)a2 + 3), *((void *)a2 + 4), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 4));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  unint64_t v6 = (unsigned char *)*((void *)a2 + 6);
  long long v5 = (unsigned char *)*((void *)a2 + 7);
  uint64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 64) = v9;
    memcpy(v8, v6, v7 - 3);
    *(void *)(a1 + 56) = v9;
  }
  return a1;
}

void sub_9F7448(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 56) = v4;
    operator delete(v4);
  }
  sub_20ADC3C((void **)(v1 + 24));
  _Unwind_Resume(a1);
}

uint64_t sub_9F7470(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x1745D1745D1745ELL) {
      sub_2E00();
    }
    double result = (uint64_t)operator new(176 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 176 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        double result = sub_9F761C(v8 + v9, (long long *)(a2 + v9));
        v9 += 176;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_9F7538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_9F754C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v12; v12 -= 176)
    sub_9F58F0(v11, (void *)(v10 - 176 + v12));
  *(void *)(v9 + 8) = v10;
  sub_9F7580(&a9);
  _Unwind_Resume(a1);
}

void ***sub_9F7580(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    unint64_t v3 = **result;
    if (v3)
    {
      long long v4 = v2[1];
      long long v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v4 -= 22;
          sub_9F58F0((uint64_t)(v2 + 2), v4);
        }
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_9F761C(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 14) = *(void *)((char *)a2 + 14);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_9F78E4((void *)(a1 + 24), *((void *)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 6);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  unint64_t v6 = (unsigned char *)*((void *)a2 + 6);
  long long v5 = (unsigned char *)*((void *)a2 + 7);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) > 0x1555555555555555) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v7);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 64) = v9;
    memcpy(v8, v6, v7 - 2);
    *(void *)(a1 + 56) = v9;
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 9);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 10);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v12 >> 2) > 0x1555555555555555) {
      sub_2E00();
    }
    uint64_t v13 = (char *)operator new(v12);
    *(void *)(a1 + 72) = v13;
    *(void *)(a1 + 80) = v13;
    uint64_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 88) = v14;
    memcpy(v13, v11, v12 - 2);
    *(void *)(a1 + 80) = v14;
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  int64x2_t v16 = (unsigned char *)*((void *)a2 + 12);
  uint64_t v15 = (unsigned char *)*((void *)a2 + 13);
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v17 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    uint64_t v18 = (char *)operator new(v17);
    *(void *)(a1 + 96) = v18;
    *(void *)(a1 + 104) = v18;
    int64_t v19 = &v18[8 * (v17 >> 3)];
    *(void *)(a1 + 112) = v19;
    memcpy(v18, v16, v17 - 7);
    *(void *)(a1 + 104) = v19;
  }
  uint64_t v20 = *((void *)a2 + 15);
  uint64_t v21 = *(void *)((char *)a2 + 125);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 125) = v21;
  *(void *)(a1 + 120) = v20;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  int v23 = (unsigned char *)*((void *)a2 + 17);
  long long v22 = (unsigned char *)*((void *)a2 + 18);
  int64_t v24 = v22 - v23;
  if (v22 != v23)
  {
    if (v24 < 0) {
      sub_2E00();
    }
    int64_t v25 = (char *)operator new(v22 - v23);
    *(void *)(a1 + 136) = v25;
    *(void *)(a1 + 144) = v25;
    uint64_t v26 = &v25[8 * (v24 >> 3)];
    *(void *)(a1 + 152) = v26;
    memcpy(v25, v23, v24);
    *(void *)(a1 + 144) = v26;
  }
  *(_OWORD *)(a1 + 160) = a2[10];
  return a1;
}

void sub_9F7838(_Unwind_Exception *a1)
{
  uint64_t v8 = *v6;
  if (*v6)
  {
    v1[18] = v8;
    operator delete(v8);
    uint64_t v9 = *v5;
    if (!*v5)
    {
LABEL_3:
      uint64_t v10 = *v4;
      if (!*v4) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v9 = *v5;
    if (!*v5) {
      goto LABEL_3;
    }
  }
  v1[13] = v9;
  operator delete(v9);
  uint64_t v10 = *v4;
  if (!*v4)
  {
LABEL_4:
    uint64_t v11 = *v3;
    if (!*v3) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  v1[10] = v10;
  operator delete(v10);
  uint64_t v11 = *v3;
  if (!*v3)
  {
LABEL_5:
    sub_9F5980(v2);
    _Unwind_Resume(a1);
  }
LABEL_9:
  v1[7] = v11;
  operator delete(v11);
  sub_9F5980(v2);
  _Unwind_Resume(a1);
}

void *sub_9F78E4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >> 58) {
      sub_2E00();
    }
    double result = operator new(a4 << 6);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[8 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        double result = sub_9F7A40(&v8[v9 / 8], (uint64_t *)(a2 + v9));
        v9 += 64;
      }
      while (a2 + v9 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_9F79A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_9F79B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_9F7FA8(v11, (uint64_t)v12, v12, (uint64_t)v10, v10);
  *(void *)(v9 + 8) = v10;
  sub_9F79E8(&a9);
  _Unwind_Resume(a1);
}

void ***sub_9F79E8(void ***a1)
{
  if (*((unsigned char *)a1 + 8)) {
    return a1;
  }
  unint64_t v3 = *a1;
  long long v4 = (void **)**a1;
  if (!v4) {
    return a1;
  }
  sub_9F59BC((uint64_t)v3, v4);
  operator delete(**a1);
  return a1;
}

void *sub_9F7A40(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_9F7B4C((uint64_t)a1, *a2, a2[1], 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 4));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  long long v5 = (unsigned char *)a2[3];
  long long v4 = (unsigned char *)a2[4];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v6 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    int64_t v7 = (char *)operator new(v6);
    a1[3] = v7;
    a1[4] = v7;
    uint64_t v8 = &v7[8 * (v6 >> 3)];
    a1[5] = v8;
    memcpy(v7, v5, v6 - 7);
    a1[4] = v8;
  }
  uint64_t v9 = a2[6];
  *(void *)((char *)a1 + 54) = *(uint64_t *)((char *)a2 + 54);
  a1[6] = v9;
  return a1;
}

void sub_9F7B28(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_20ADCCC((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9F7B4C(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = (void *)result;
    if (a4 >= 0x1C71C71C71C71C8) {
      sub_2E00();
    }
    double result = (uint64_t)operator new(144 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = result + 144 * a4;
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        double result = sub_9F7CDC(v8 + v9, a2 + v9);
        v9 += 144;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_9F7C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_9F7C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 144)
    sub_9BEAA8((void *)(v10 - 144 + v11));
  *(void *)(v9 + 8) = v10;
  sub_9F7C54(&a9);
  _Unwind_Resume(a1);
}

void ***sub_9F7C54(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    unint64_t v3 = **result;
    if (v3)
    {
      long long v4 = v2[1];
      long long v5 = **v1;
      if (v4 != v3)
      {
        do
          long long v4 = sub_9BEAA8(v4 - 18);
        while (v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_9F7CDC(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  sub_8EC358((void *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  long long v5 = *(unsigned char **)(a2 + 32);
  long long v4 = *(unsigned char **)(a2 + 40);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v6 >> 2)) > 0x924924924924924) {
      sub_2E00();
    }
    int64_t v7 = (char *)operator new(v6);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v7;
    uint64_t v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 48) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 40) = v8;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v10 = *(unsigned char **)(a2 + 56);
  uint64_t v9 = *(unsigned char **)(a2 + 64);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v11 >> 2)) > 0x924924924924924) {
      sub_2E00();
    }
    int64_t v12 = (char *)operator new(v11);
    *(void *)(a1 + 56) = v12;
    *(void *)(a1 + 64) = v12;
    uint64_t v13 = &v12[4 * (v11 >> 2)];
    *(void *)(a1 + 72) = v13;
    memcpy(v12, v10, v11);
    *(void *)(a1 + 64) = v13;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v15 = *(unsigned char **)(a2 + 80);
  uint64_t v14 = *(unsigned char **)(a2 + 88);
  int64_t v16 = v14 - v15;
  if (v14 != v15)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v16 >> 2)) > 0x924924924924924) {
      sub_2E00();
    }
    int64_t v17 = (char *)operator new(v16);
    *(void *)(a1 + 80) = v17;
    *(void *)(a1 + 88) = v17;
    uint64_t v18 = &v17[4 * (v16 >> 2)];
    *(void *)(a1 + 96) = v18;
    memcpy(v17, v15, v16);
    *(void *)(a1 + 88) = v18;
  }
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v20 = *(unsigned char **)(a2 + 104);
  int64_t v19 = *(unsigned char **)(a2 + 112);
  int64_t v21 = v19 - v20;
  if (v19 != v20)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v21 >> 3) >= 0x666666666666667) {
      sub_2E00();
    }
    long long v22 = (char *)operator new(v21);
    *(void *)(a1 + 104) = v22;
    *(void *)(a1 + 112) = v22;
    int v23 = &v22[8 * (v21 >> 3)];
    *(void *)(a1 + 120) = v23;
    memcpy(v22, v20, v21 - 7);
    *(void *)(a1 + 112) = v23;
  }
  uint64_t v24 = *(void *)(a2 + 128);
  *(void *)(a1 + 133) = *(void *)(a2 + 133);
  *(void *)(a1 + 128) = v24;
  return a1;
}

void sub_9F7EFC(_Unwind_Exception *a1)
{
  uint64_t v8 = *v6;
  if (*v6)
  {
    v1[14] = v8;
    operator delete(v8);
    uint64_t v9 = *v5;
    if (!*v5)
    {
LABEL_3:
      uint64_t v10 = *v4;
      if (!*v4) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v9 = *v5;
    if (!*v5) {
      goto LABEL_3;
    }
  }
  v1[11] = v9;
  operator delete(v9);
  uint64_t v10 = *v4;
  if (!*v4)
  {
LABEL_4:
    int64_t v11 = *v3;
    if (!*v3) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  v1[8] = v10;
  operator delete(v10);
  int64_t v11 = *v3;
  if (!*v3)
  {
LABEL_5:
    sub_9F5B1C(v2);
    _Unwind_Resume(a1);
  }
LABEL_9:
  v1[5] = v11;
  operator delete(v11);
  sub_9F5B1C(v2);
  _Unwind_Resume(a1);
}

void sub_9F7FA8(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  if (a3 != a5)
  {
    int64_t v6 = a3;
    do
    {
      uint64_t v8 = *(v6 - 5);
      if (v8)
      {
        *(v6 - 4) = v8;
        operator delete(v8);
      }
      uint64_t v9 = v6 - 8;
      uint64_t v10 = (char *)*(v6 - 8);
      if (v10)
      {
        int64_t v11 = (char *)*(v6 - 7);
        int64_t v7 = *(v6 - 8);
        if (v11 != v10)
        {
          do
          {
            uint64_t v13 = (void *)*((void *)v11 - 5);
            if (v13)
            {
              *((void *)v11 - 4) = v13;
              operator delete(v13);
            }
            uint64_t v14 = (void *)*((void *)v11 - 8);
            if (v14)
            {
              *((void *)v11 - 7) = v14;
              operator delete(v14);
            }
            uint64_t v15 = (void *)*((void *)v11 - 11);
            if (v15)
            {
              *((void *)v11 - 10) = v15;
              operator delete(v15);
            }
            int64_t v16 = (void *)*((void *)v11 - 14);
            if (v16)
            {
              *((void *)v11 - 13) = v16;
              operator delete(v16);
            }
            uint64_t v17 = *((void *)v11 - 17);
            if (v17)
            {
              uint64_t v18 = *((void *)v11 - 16);
              int64_t v12 = (void *)*((void *)v11 - 17);
              if (v18 != v17)
              {
                uint64_t v19 = v18 - 1064;
                do
                {
                  int v21 = *(_DWORD *)(v19 + 1056);
                  switch(v21)
                  {
                    case 3:
                      sub_3AFFFC(v19);
                      break;
                    case 1:
                      long long v22 = *(void **)(v19 + 16);
                      if (v22)
                      {
                        *(void *)(v19 + 24) = v22;
                        operator delete(v22);
                      }
                      break;
                    case 0:
                      if (*(unsigned char *)(v19 + 28)) {
                        *(unsigned char *)(v19 + 28) = 0;
                      }
                      break;
                  }
                  uint64_t v20 = v19 - 32;
                  v19 -= 1096;
                }
                while (v20 != v17);
                int64_t v12 = (void *)*((void *)v11 - 17);
              }
              *((void *)v11 - 16) = v17;
              operator delete(v12);
            }
            v11 -= 144;
          }
          while (v11 != v10);
          int64_t v7 = *v9;
        }
        *(v6 - 7) = v10;
        operator delete(v7);
      }
      v6 -= 8;
    }
    while (v9 != a5);
  }
}

uint64_t sub_9F8108(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_9F8140(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    int64_t v6 = *(void **)(i - 24);
    if (v6)
    {
      *(void *)(i - 16) = v6;
      operator delete(v6);
    }
    uint64_t v7 = *(void *)(i - 48);
    if (v7)
    {
      uint64_t v8 = *(void *)(i - 40);
      long long v5 = *(void **)(i - 48);
      if (v8 != v7)
      {
        uint64_t v9 = v8 - 152;
        do
        {
          int64_t v11 = *(void **)(v9 + 112);
          if (v11)
          {
            *(void *)(v9 + 120) = v11;
            operator delete(v11);
          }
          int64_t v12 = *(void **)(v9 + 72);
          if (v12)
          {
            *(void *)(v9 + 80) = v12;
            operator delete(v12);
          }
          uint64_t v13 = *(void **)(v9 + 48);
          if (v13)
          {
            *(void *)(v9 + 56) = v13;
            operator delete(v13);
          }
          uint64_t v14 = *(void **)(v9 + 24);
          if (v14)
          {
            *(void *)(v9 + 32) = v14;
            operator delete(v14);
          }
          if (*(void *)v9)
          {
            sub_9F59BC(v9, *(void ***)v9);
            operator delete(*(void **)v9);
          }
          uint64_t v10 = v9 - 24;
          v9 -= 176;
        }
        while (v10 != v7);
        long long v5 = *(void **)(i - 48);
      }
      *(void *)(i - 40) = v7;
      operator delete(v5);
    }
  }
}

void sub_9F8240(uint64_t a1)
{
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);

  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

void sub_9F82AC(uint64_t a1)
{
  uint64_t v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);

  operator delete();
}

uint64_t sub_9F832C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v2 = *(void **)(a1 + 336);
    if (v2)
    {
      *(void *)(a1 + 344) = v2;
      operator delete(v2);
    }
    if (*(char *)(a1 + 199) < 0)
    {
      operator delete(*(void **)(a1 + 176));
      unint64_t v3 = *(void **)(a1 + 152);
      if (!v3) {
        goto LABEL_12;
      }
    }
    else
    {
      unint64_t v3 = *(void **)(a1 + 152);
      if (!v3) {
        goto LABEL_12;
      }
    }
    uint64_t v4 = *(void *)(a1 + 160);
    long long v5 = v3;
    if ((void *)v4 != v3)
    {
      do
      {
        v4 -= 296;
        sub_9F5E28(a1 + 168, v4);
      }
      while ((void *)v4 != v3);
      long long v5 = *(void **)(a1 + 152);
    }
    *(void *)(a1 + 160) = v3;
    operator delete(v5);
  }
LABEL_12:
  int64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 8);

  return v6(a1);
}

uint64_t *sub_9F83FC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!v2) {
    return a1;
  }
  if ((*(unsigned char *)(v2 + 136) & 1) == 0)
  {
    v8.__ptr_ = 0;
    uint64_t v3 = *(void *)(v2 + 16);
    std::exception_ptr::~exception_ptr(&v8);
    uint64_t v2 = *a1;
    if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
    {
      v9.__cat_ = std::future_category();
      *(void *)&v9.__val_ = 4;
      std::future_error::future_error(&v7, v9);
      exception = (std::logic_error *)__cxa_allocate_exception(0x20uLL);
      int64_t v6 = std::logic_error::logic_error(exception, &v7);
      v6[1] = (std::logic_error)v7.__ec_;
    }
  }
  if (atomic_fetch_add((atomic_ullong *volatile)(v2 + 8), 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  return a1;
}

void sub_9F8558()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v1 = *(void *)(v0 + 32);
  sub_372930(*(void *)(v1 + 128), (uint64_t)v5);
  sub_9F8858((uint64_t)v3, v1 + 136);
  v4[14] = v3;
  v4[15] = v3;
  v4[16] = v3;
  v4[17] = v3;
  v4[18] = v3;
  v4[19] = v3;
  v4[20] = v3;
  v4[21] = v3;
  v4[22] = v3;
  v4[23] = v3;
  v4[24] = v3;
  v4[25] = v3;
  v4[26] = v3;
  v4[27] = v3;
  v4[28] = v3;
  v4[29] = v3;
  v4[30] = v3;
  v4[31] = v3;
  v4[32] = v3;
  v4[33] = v3;
  v4[34] = v3;
  v4[35] = v3;
  v4[36] = v3;
  v4[37] = v3;
  std::promise<void>::set_value(*(std::promise<void> **)(v0 + 40));
  sub_C259A4((uint64_t)v4, 0);
  sub_9F8BC0(v2, v1, (uint64_t)v5, (uint64_t)v3, *(void *)(v1 + 4336), v1 + 5624);
  sub_9F8C24((uint64_t)v2, *(void *)(v0 + 48), *(void *)(v0 + 56));
}

void sub_9F8780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (SLOBYTE(STACK[0x59F]) < 0)
  {
    operator delete((void *)STACK[0x588]);
    if ((SLOBYTE(STACK[0x2E7]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((SLOBYTE(STACK[0x2E7]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x2D0]);
  if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a50 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  operator delete((void *)STACK[0x210]);
  if ((a50 & 0x80000000) == 0)
  {
LABEL_6:
    sub_49DA2C(&STACK[0x600]);
    sub_373C88(&STACK[0x1668]);
    _Unwind_Resume(a1);
  }
LABEL_5:
  operator delete(__p);
  goto LABEL_6;
}

uint64_t sub_9F8858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0xF10uLL);
  sub_C25878(a1 + 3896, (long long *)(a2 + 3896));
  *(void *)(a1 + 3928) = *(void *)(a2 + 3928);
  uint64_t v6 = *(void *)(a2 + 3936);
  *(void *)(a1 + 3936) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 3944) = *(void *)(a2 + 3944);
  uint64_t v7 = *(void *)(a2 + 3952);
  *(void *)(a1 + 3952) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 3960) = *(void *)(a2 + 3960);
  uint64_t v8 = *(void *)(a2 + 3968);
  *(void *)(a1 + 3968) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 3976) = *(void *)(a2 + 3976);
  uint64_t v9 = *(void *)(a2 + 3984);
  *(void *)(a1 + 3984) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 3992) = *(void *)(a2 + 3992);
  uint64_t v10 = *(void *)(a2 + 4000);
  *(void *)(a1 + 4000) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_9F8980(_Unwind_Exception *a1)
{
  sub_14A84(v2);
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

void sub_9F899C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, uint64_t v5 = *(void *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    sub_2E184(2u);
  }
  sub_9F6588(a1 + 144, a2);
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_9F8A30(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_9F8A44(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  uint64_t v4 = *(void *)(a1 + 16);
  v16.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v16);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v15, (const std::exception_ptr *)(a1 + 16));
    v14.__ptr_ = &v15;
    std::rethrow_exception(v14);
    __break(1u);
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 144);
    uint64_t v5 = a1 + 144;
    *(_DWORD *)a2 = v6;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v5 + 8);
    *(void *)(a2 + 24) = *(void *)(v5 + 24);
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
    long long v7 = *(_OWORD *)(v5 + 32);
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = *(void *)(v5 + 48);
    *(void *)(v5 + 40) = 0;
    *(void *)(v5 + 48) = 0;
    long long v8 = *(_OWORD *)(v5 + 56);
    long long v9 = *(_OWORD *)(v5 + 72);
    long long v10 = *(_OWORD *)(v5 + 88);
    *(_OWORD *)(a2 + 104) = *(_OWORD *)(v5 + 104);
    *(_OWORD *)(a2 + 88) = v10;
    *(_OWORD *)(a2 + 72) = v9;
    *(_OWORD *)(a2 + 56) = v8;
    long long v11 = *(_OWORD *)(v5 + 120);
    long long v12 = *(_OWORD *)(v5 + 136);
    long long v13 = *(_OWORD *)(v5 + 152);
    *(_OWORD *)(a2 + 168) = *(_OWORD *)(v5 + 168);
    *(_OWORD *)(a2 + 152) = v13;
    *(_OWORD *)(a2 + 136) = v12;
    *(_OWORD *)(a2 + 120) = v11;
    *(unsigned char *)(a2 + 184) = *(unsigned char *)(v5 + 184);
    *(_OWORD *)(a2 + 192) = *(_OWORD *)(v5 + 192);
    *(void *)(a2 + 208) = *(void *)(v5 + 208);
    *(void *)(v5 + 192) = 0;
    *(void *)(v5 + 200) = 0;
    *(void *)(v5 + 208) = 0;
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
  }
}

void sub_9F8B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(a1);
}

void sub_9F8B98()
{
  unk_25DF847 = 16641;
  word_25DF830 = 65;
  byte_25DF85F = 1;
  byte_25DF849 = 0;
}

void *sub_9F8BC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  sub_C4A5B8(a1 + 5);
  sub_725D0((uint64_t)(a1 + 162));
  return a1;
}

void sub_9F8C00(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 1223) < 0) {
    operator delete(*(void **)(v1 + 1200));
  }
  sub_20ADDD8(v1);
  _Unwind_Resume(a1);
}

void sub_9F8C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(double *)(a1 + 280) = *(double *)(a1 + 280) + 1.0;
  sub_9F9FC0((uint64_t *)a1, a3, a2);
}

void sub_9F971C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9F5350((uint64_t *)va);
  sub_9F53E0(v2);
  _Unwind_Resume(a1);
}

void sub_9F9764(_Unwind_Exception *a1)
{
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

double sub_9F9778@<D0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  a1[36] = a1[36] + 1.0;
  *(_DWORD *)a5 = *(_DWORD *)a4;
  *(_OWORD *)(a5 + 8) = *(_OWORD *)(a4 + 8);
  *(void *)(a5 + 24) = *(void *)(a4 + 24);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(a4 + 32);
  *(void *)(a5 + 48) = *(void *)(a4 + 48);
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 48) = 0;
  long long v9 = *(_OWORD *)(a4 + 56);
  long long v10 = *(_OWORD *)(a4 + 72);
  long long v11 = *(_OWORD *)(a4 + 88);
  *(_OWORD *)(a5 + 104) = *(_OWORD *)(a4 + 104);
  *(_OWORD *)(a5 + 88) = v11;
  *(_OWORD *)(a5 + 72) = v10;
  *(_OWORD *)(a5 + 56) = v9;
  long long v12 = *(_OWORD *)(a4 + 120);
  long long v13 = *(_OWORD *)(a4 + 136);
  long long v14 = *(_OWORD *)(a4 + 152);
  *(_OWORD *)(a5 + 168) = *(_OWORD *)(a4 + 168);
  *(_OWORD *)(a5 + 152) = v14;
  *(_OWORD *)(a5 + 136) = v13;
  *(_OWORD *)(a5 + 120) = v12;
  *(unsigned char *)(a5 + 184) = *(unsigned char *)(a4 + 184);
  *(_OWORD *)(a5 + 192) = *(_OWORD *)(a4 + 192);
  uint64_t v15 = a5 + 192;
  *(void *)(a5 + 208) = *(void *)(a4 + 208);
  *(void *)(a4 + 192) = 0;
  *(void *)(a4 + 200) = 0;
  *(void *)(a4 + 208) = 0;
  *(void *)&double result = sub_C50C4C(a5 + 32, a3 + 32, (uint64_t)&__p).n128_u64[0];
  if (v23 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = *(void **)(a3 + 192);
  uint64_t v18 = *(void **)(a3 + 200);
  for (v24[0] = v15; v17 != v18; ++v17)
    sub_9F9E88((uint64_t)v24, v17);
  int v19 = *(_DWORD *)(*(void *)a1 + 120);
  if ((v19 - 1) < 2)
  {
    if (v19 == 2) {
      uint64_t v20 = off_243CEA8;
    }
    else {
      uint64_t v20 = off_243CC30;
    }
    int64_t v25 = v24;
    v24[0] = v20;
    double v21 = sub_9FD168((uint64_t)a1, a3, a5, (uint64_t)v24);
    if (v25 == v24)
    {
      (*(void (**)(void *, double))(v24[0] + 32))(v24, v21);
    }
    else if (v25)
    {
      (*(void (**)(void *, double))(*v25 + 40))(v25, v21);
    }
    sub_9FB430(a1, a5);
    sub_9FADE8((uint64_t)a1, a5, 3);
    sub_9FADE8((uint64_t)a1, a5, 0);
    sub_9FADE8((uint64_t)a1, a5, 2);
    sub_9FADE8((uint64_t)a1, a5, 1);
    sub_9FADE8((uint64_t)a1, a5, 4);
    sub_9FCEF4(a1, a5);
    return sub_9FCA1C((uint64_t)a1, a2, a5);
  }
  return result;
}

void sub_9F9A34(_Unwind_Exception *a1)
{
  sub_9F5350((void *)(v2 - 104));
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_9F9A50(_Unwind_Exception *a1)
{
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_9F9A64(_Unwind_Exception *a1)
{
  sub_9F53E0(v1);
  _Unwind_Resume(a1);
}

void sub_9F9A7C()
{
}

void *sub_9F9A90()
{
  double result = operator new(0x10uLL);
  void *result = off_243CD28;
  return result;
}

void sub_9F9AC8(uint64_t a1, void *a2)
{
  *a2 = off_243CD28;
}

BOOL sub_9F9AF0(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 9) == 0;
}

uint64_t sub_9F9B00(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning16JourneyPredicate4mainEvEUlRKNS1_10SpaJourneyEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning16JourneyPredicate4mainEvEUlRKNS1_10SpaJourneyEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning16JourneyPredicate4mainEvEUlRKNS1_10SpaJourneyEE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning16JourneyPredicate4mainEvEUlRKNS1_10SpaJourneyEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_9F9B70()
{
}

void sub_9F9B80()
{
}

void *sub_9F9B94()
{
  double result = operator new(0x10uLL);
  void *result = off_243CDA8;
  return result;
}

void sub_9F9BCC(uint64_t a1, void *a2)
{
  *a2 = off_243CDA8;
}

BOOL sub_9F9BF4(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 9) == 1;
}

uint64_t sub_9F9C04(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning16JourneyPredicate7fill_inEvEUlRKNS1_10SpaJourneyEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning16JourneyPredicate7fill_inEvEUlRKNS1_10SpaJourneyEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning16JourneyPredicate7fill_inEvEUlRKNS1_10SpaJourneyEE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning16JourneyPredicate7fill_inEvEUlRKNS1_10SpaJourneyEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_9F9C74()
{
}

void sub_9F9C84()
{
}

void *sub_9F9C98()
{
  double result = operator new(0x10uLL);
  void *result = off_243CE28;
  return result;
}

void sub_9F9CD0(uint64_t a1, void *a2)
{
  *a2 = off_243CE28;
}

BOOL sub_9F9CF8(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 2;
}

uint64_t sub_9F9D08(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning16JourneyPredicate8realtimeEvEUlRKNS1_10SpaJourneyEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning16JourneyPredicate8realtimeEvEUlRKNS1_10SpaJourneyEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning16JourneyPredicate8realtimeEvEUlRKNS1_10SpaJourneyEE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning16JourneyPredicate8realtimeEvEUlRKNS1_10SpaJourneyEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_9F9D78()
{
}

void sub_9F9D88()
{
}

void *sub_9F9D9C()
{
  double result = operator new(0x10uLL);
  void *result = off_243CEA8;
  return result;
}

void sub_9F9DD4(uint64_t a1, void *a2)
{
  *a2 = off_243CEA8;
}

BOOL sub_9F9DFC(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 2) > 1u;
}

uint64_t sub_9F9E0C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning16JourneyPredicate7at_riskEvEUlRKNS1_10SpaJourneyEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning16JourneyPredicate7at_riskEvEUlRKNS1_10SpaJourneyEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning16JourneyPredicate7at_riskEvEUlRKNS1_10SpaJourneyEE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning16JourneyPredicate7at_riskEvEUlRKNS1_10SpaJourneyEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_9F9E7C()
{
}

uint64_t sub_9F9E88(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  int v6 = *(unsigned char **)(*(void *)a1 + 8);
  unint64_t v5 = *(void *)(*(void *)a1 + 16);
  if ((unint64_t)v6 >= v5)
  {
    long long v8 = (unsigned char *)*v4;
    uint64_t v9 = (uint64_t)&v6[-*v4] >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_188D718();
      }
      long long v13 = (char *)operator new(8 * v12);
    }
    else
    {
      long long v13 = 0;
    }
    long long v14 = &v13[8 * v9];
    *(void *)long long v14 = *a2;
    long long v7 = v14 + 8;
    if (v6 != v8)
    {
      do
      {
        int v15 = *((_DWORD *)v6 - 2);
        v6 -= 8;
        char v16 = v6[4];
        *((_DWORD *)v14 - 2) = v15;
        v14 -= 8;
        v14[4] = v16;
      }
      while (v6 != v8);
      int v6 = (unsigned char *)*v4;
    }
    void *v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[8 * v12];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(void *)int v6 = *a2;
    long long v7 = v6 + 8;
  }
  v4[1] = v7;
  return a1;
}

void sub_9F9F98()
{
  unk_25DF877 = 16641;
  word_25DF860 = 65;
  byte_25DF88F = 1;
  byte_25DF879 = 0;
}

void sub_9F9FC0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_725A0((uint64_t)(a1 + 162));
  uint64_t v5 = *(unsigned __int8 *)(a3 + 23);
  char v6 = v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  if (v5)
  {
    if ((v6 & 0x80) == 0)
    {
LABEL_5:
      long long v7 = *(_OWORD *)a3;
      __str.__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v7;
      goto LABEL_8;
    }
  }
  else
  {
    a3 = *a1;
    if ((*(unsigned char *)(*a1 + 23) & 0x80) == 0) {
      goto LABEL_5;
    }
  }
  sub_4200(&__str, *(void **)a3, *(void *)(a3 + 8));
LABEL_8:
  sub_A22408(a1[2], a1[1], &__str);
}

void sub_9FA130(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 88);
  *(void *)(v1 - 88) = 0;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    if ((*(char *)(v1 - 57) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 - 57) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

double sub_9FA1AC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 34))
  {
    uint64_t v4 = a1 + 1296;
    sub_725A0(a1 + 1296);
    sub_497CC0(&v6, *(void *)(a1 + 16));
    sub_B6E458((uint64_t)&v6, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 104);
    *(double *)(a1 + 104) = result;
  }
  return result;
}

double sub_9FA224(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 35))
  {
    uint64_t v4 = a1 + 1296;
    sub_725A0(a1 + 1296);
    sub_497CC0(&v6, *(void *)(a1 + 16));
    sub_BAC0B4((uint64_t)&v6, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 112);
    *(double *)(a1 + 112) = result;
  }
  return result;
}

void sub_9FA29C(double *a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 72))
  {
    uint64_t v4 = (uint64_t)(a1 + 162);
    sub_725A0((uint64_t)(a1 + 162));
    uint64_t __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    sub_BAF600((uint64_t)&__p, a2);
    a1[20] = sub_72688(v4) + a1[20];
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
}

void sub_9FA320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9FA33C(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(*(void *)a1 + 30))
  {
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x58uLL);
    long long v10 = xmmword_20B9980;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/DirectWalkingJourneyComputation.json");
    long long v8 = sub_374CDC(v7, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_B3AEDC(v11, v6, v8);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p);
    }
    sub_B3AF08(v11, a2, a3);
  }
}

void sub_9FA414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9FA430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1 + 1296;
  sub_725A0(a1 + 1296);
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t __p = operator new(0x50uLL);
  long long v17 = xmmword_20B9420;
  strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/JourneyCriteriaComputation.json");
  uint64_t v11 = sub_374CDC(v10, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
  sub_B5C6BC((uint64_t)v18, v9, v11, a4);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p);
  }
  sub_B5C708((uint64_t)v18, a2, a3);
  *(double *)(a1 + 120) = sub_72688(v8) + *(double *)(a1 + 120);
  if (v22)
  {
    char v23 = v22;
    operator delete(v22);
  }
  unint64_t v12 = (void **)v21;
  if (v21)
  {
    do
    {
      int v15 = (void **)*v12;
      if (*((char *)v12 + 39) < 0) {
        operator delete(v12[2]);
      }
      operator delete(v12);
      unint64_t v12 = v15;
    }
    while (v15);
  }
  long long v13 = v20;
  uint64_t v20 = 0;
  if (v13) {
    operator delete(v13);
  }
  uint64_t result = (uint64_t)v19;
  if (v19 == v18) {
    return (*(uint64_t (**)(void *))(v18[0] + 32))(v18);
  }
  if (v19) {
    return (*(uint64_t (**)(void))(*v19 + 40))();
  }
  return result;
}

void sub_9FA600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_9FA630((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_9FA614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_9FA630(void *a1)
{
  uint64_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)a1[7];
  if (v3)
  {
    do
    {
      uint64_t v7 = (void **)*v3;
      if (*((char *)v3 + 39) < 0) {
        operator delete(v3[2]);
      }
      operator delete(v3);
      uint64_t v3 = v7;
    }
    while (v7);
  }
  uint64_t v4 = (void *)a1[5];
  a1[5] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[3];
  if (v5 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
    return a1;
  }
  else
  {
    if (v5) {
      (*(void (**)(void *))(*v5 + 40))(v5);
    }
    return a1;
  }
}

double sub_9FA71C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)a1 + 32))
  {
    uint64_t v6 = a1 + 1296;
    sub_725A0(a1 + 1296);
    sub_9CE800(v8, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
    sub_B5E3F0(v8, (unsigned char *)(a2 + 128), a3);
    double result = sub_72688(v6) + *(double *)(a1 + 128);
    *(double *)(a1 + 128) = result;
  }
  return result;
}

double sub_9FA7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)a1 + 33)) {
    BOOL v3 = *(_DWORD *)(a2 + 160) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v6 = a1 + 1296;
    sub_725A0(a1 + 1296);
    sub_497CC0(&v8, *(void *)(a1 + 16));
    sub_B72140(&v8, a3);
    double result = sub_72688(v6) + *(double *)(a1 + 136);
    *(double *)(a1 + 136) = result;
  }
  return result;
}

void sub_9FA824(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(*(void *)a1 + 36)) {
    return;
  }
  uint64_t v4 = a1 + 1296;
  sub_725A0(a1 + 1296);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t __p = operator new(0x48uLL);
  long long v16 = xmmword_20B9AB0;
  strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/JourneyScoring.json");
  uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
  sub_B67D6C((uint64_t)v17, v6);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  sub_B67D70((uint64_t)v17, a2);
  *(double *)(a1 + 144) = sub_72688(v4) + *(double *)(a1 + 144);
  uint64_t v7 = (char *)v18;
  if (!v18) {
    return;
  }
  uint64_t v8 = v18;
  if (v19 == v18) {
    goto LABEL_18;
  }
  uint64_t v9 = v19 - 32;
  uint64_t v10 = v19 - 64;
  do
  {
    unint64_t v12 = (char *)*((void *)v9 + 3);
    if (v9 == v12)
    {
      (*(void (**)(char *))(*(void *)v9 + 32))(v9);
      long long v13 = v9 - 32;
      long long v14 = (char *)*((void *)v9 - 1);
      if (v9 - 32 == v14) {
        goto LABEL_7;
      }
    }
    else
    {
      if (v12) {
        (*(void (**)(char *))(*(void *)v12 + 40))(v12);
      }
      long long v13 = v9 - 32;
      long long v14 = (char *)*((void *)v9 - 1);
      if (v9 - 32 == v14)
      {
LABEL_7:
        (*(void (**)(char *))(*(void *)v13 + 32))(v13);
        goto LABEL_8;
      }
    }
    if (v14) {
      (*(void (**)(char *))(*(void *)v14 + 40))(v14);
    }
LABEL_8:
    uint64_t v11 = v9 - 40;
    v9 -= 72;
    v10 -= 72;
  }
  while (v11 != v7);
  uint64_t v8 = v18;
LABEL_18:
  int v19 = v7;
  operator delete(v8);
}

void sub_9FAA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_9FAA4C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9FAA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9FAA4C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2) {
    return a1;
  }
  BOOL v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 32);
  if (v3 == v2) {
    goto LABEL_15;
  }
  uint64_t v5 = v3 - 4;
  uint64_t v6 = v3 - 8;
  do
  {
    uint64_t v8 = (void *)v5[3];
    if (v5 == v8)
    {
      (*(void (**)(void *))(*v5 + 32))(v5);
      uint64_t v9 = v5 - 4;
      uint64_t v10 = (void *)*(v5 - 1);
      if (v5 - 4 == v10) {
        goto LABEL_4;
      }
    }
    else
    {
      if (v8) {
        (*(void (**)(void *))(*v8 + 40))(v8);
      }
      uint64_t v9 = v5 - 4;
      uint64_t v10 = (void *)*(v5 - 1);
      if (v5 - 4 == v10)
      {
LABEL_4:
        (*(void (**)(void *))(*v9 + 32))(v9);
        goto LABEL_5;
      }
    }
    if (v10) {
      (*(void (**)(void *))(*v10 + 40))(v10);
    }
LABEL_5:
    uint64_t v7 = v5 - 5;
    v5 -= 9;
    v6 -= 9;
  }
  while (v7 != v2);
  uint64_t v4 = *(void **)(a1 + 32);
LABEL_15:
  *(void *)(a1 + 40) = v2;
  operator delete(v4);
  return a1;
}

void sub_9FAB94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)a1 + 31)) {
    sub_B3B910((uint64_t)&v3, a2, a3);
  }
}

void sub_9FABC4(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(*(void *)a1 + 36)) {
    return;
  }
  uint64_t v4 = a1 + 1296;
  sub_725A0(a1 + 1296);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t __p = operator new(0x50uLL);
  long long v16 = xmmword_20E2340;
  strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/JourneyScoring-FillIn.json");
  uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
  sub_B67D6C((uint64_t)v17, v6);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  sub_B67D70((uint64_t)v17, a2);
  *(double *)(a1 + 144) = sub_72688(v4) + *(double *)(a1 + 144);
  uint64_t v7 = (char *)v18;
  if (!v18) {
    return;
  }
  uint64_t v8 = v18;
  if (v19 == v18) {
    goto LABEL_18;
  }
  uint64_t v9 = v19 - 32;
  uint64_t v10 = v19 - 64;
  do
  {
    unint64_t v12 = (char *)*((void *)v9 + 3);
    if (v9 == v12)
    {
      (*(void (**)(char *))(*(void *)v9 + 32))(v9);
      long long v13 = v9 - 32;
      long long v14 = (char *)*((void *)v9 - 1);
      if (v9 - 32 == v14) {
        goto LABEL_7;
      }
    }
    else
    {
      if (v12) {
        (*(void (**)(char *))(*(void *)v12 + 40))(v12);
      }
      long long v13 = v9 - 32;
      long long v14 = (char *)*((void *)v9 - 1);
      if (v9 - 32 == v14)
      {
LABEL_7:
        (*(void (**)(char *))(*(void *)v13 + 32))(v13);
        goto LABEL_8;
      }
    }
    if (v14) {
      (*(void (**)(char *))(*(void *)v14 + 40))(v14);
    }
LABEL_8:
    uint64_t v11 = v9 - 40;
    v9 -= 72;
    v10 -= 72;
  }
  while (v11 != v7);
  uint64_t v8 = v18;
LABEL_18:
  int v19 = v7;
  operator delete(v8);
}

void sub_9FADB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_9FAA4C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_9FADCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FADE8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(unsigned char **)a1;
  if (!a3 && v6[39] || a3 == 1 && v6[37] || a3 == 2 && v6[38] || a3 == 3 && v6[66] || a3 == 4 && v6[67])
  {
    sub_725A0(a1 + 1296);
    sub_BB6C(&v8, a3);
    sub_B6B19C(&v8, a2);
    double result = sub_72688(a1 + 1296) + *(double *)(a1 + 152);
    *(double *)(a1 + 152) = result;
  }
  return result;
}

double sub_9FAEA8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 76))
  {
    uint64_t v4 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t __p = operator new(0x50uLL);
    long long v9 = xmmword_20EB410;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/ScoreThresholdFilter.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_BBD62C(&v10, v6);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    sub_BBD6C8(&v10, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 160);
    *(double *)(a1 + 160) = result;
  }
  return result;
}

void sub_9FAF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9FAF9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 121))
  {
    uint64_t v4 = result;
    if (*(unsigned char *)(*(void *)result + 40))
    {
      sub_725A0(result + 1296);
      uint64_t v8 = *(void *)(v4 + 8);
      uint64_t v7 = *(void *)(v4 + 16);
      uint64_t __p = operator new(0x48uLL);
      long long v11 = xmmword_20B9270;
      strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/JourneyBundling.json");
      long long v9 = sub_374CDC(v8, (uint64_t)&__p, *(uint64_t **)(v4 + 32));
      sub_B57EB8((uint64_t)v12, v7, v9, a4);
      if (SHIBYTE(v11) < 0) {
        operator delete(__p);
      }
      sub_B5A2E0(v12, a3);
      *(double *)(v4 + 200) = sub_72688(v4 + 1296) + *(double *)(v4 + 200);
      double result = (uint64_t)v13;
      if (v13 == v12)
      {
        return (*(uint64_t (**)(uint64_t *))(v12[0] + 32))(v12);
      }
      else if (v13)
      {
        return (*(uint64_t (**)(void))(*v13 + 40))();
      }
    }
  }
  return result;
}

void sub_9FB128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_9F5350((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_9FB13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9FB158(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)result + 42))
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 1296;
    sub_725A0(result + 1296);
    sub_B55C58((uint64_t)v7, *(void *)(v5 + 16), a3);
    sub_B55D10((uint64_t)v7, a2);
    *(double *)(v5 + 208) = sub_72688(v6) + *(double *)(v5 + 208);
    double result = (uint64_t)v8;
    if (v8 == v7)
    {
      return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
    }
    else if (v8)
    {
      return (*(uint64_t (**)(void))(*v8 + 40))();
    }
  }
  return result;
}

void sub_9FB26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_9FB284(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)result + 41))
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 1296;
    sub_725A0(result + 1296);
    uint64_t v7 = *(void *)(v5 + 8);
    uint64_t __p = operator new(0x50uLL);
    long long v10 = xmmword_20B99B0;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/JourneyBundleFilter.json");
    uint64_t v8 = sub_374CDC(v7, (uint64_t)&__p, *(uint64_t **)(v5 + 32));
    sub_BB1100((uint64_t)v11, v8, a3);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p);
    }
    sub_BB1104((uint64_t)v11, a2);
    *(double *)(v5 + 160) = sub_72688(v6) + *(double *)(v5 + 160);
    double result = (uint64_t)v12;
    if (v12 == v11)
    {
      return (*(uint64_t (**)(void *))(v11[0] + 32))(v11);
    }
    else if (v12)
    {
      return (*(uint64_t (**)(void))(*v12 + 40))();
    }
  }
  return result;
}

void sub_9FB400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_9F5350((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_9FB414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double *sub_9FB430(double *result, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)result + 73))
  {
    char v3 = result;
    uint64_t v4 = (uint64_t)(result + 162);
    sub_725A0((uint64_t)(result + 162));
    uint64_t v6 = *((void *)v3 + 1);
    uint64_t v5 = *((void *)v3 + 2);
    uint64_t __p = operator new(0x50uLL);
    long long v9 = xmmword_20B9A50;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/JourneySimilarityFilter.json");
    uint64_t v7 = sub_374CDC(v6, (uint64_t)&__p, *((uint64_t **)v3 + 4));
    sub_BB717C((uint64_t)v10, v5, v7);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    sub_BB71C0((uint64_t)v10, a2);
    v3[20] = sub_72688(v4) + v3[20];
    return (double *)sub_9FD294(v10);
  }
  return result;
}

void sub_9FB51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_9FD294((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_9FB530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FB54C(double *a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 68))
  {
    uint64_t v4 = (uint64_t)(a1 + 162);
    sub_725A0((uint64_t)(a1 + 162));
    nullsub_1(&v6);
    sub_BB020C((uint64_t)&v6, a2);
    double result = sub_72688(v4) + a1[20];
    a1[20] = result;
  }
  return result;
}

void sub_9FB5C0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 71))
  {
    uint64_t v4 = a1 + 1296;
    sub_725A0(a1 + 1296);
    sub_BAEC90((uint64_t)&v11, *(void *)(a1 + 16));
    sub_BAECB4(&v11, a2);
    *(double *)(a1 + 160) = sub_72688(v4) + *(double *)(a1 + 160);
    uint64_t v5 = __p;
    if (__p)
    {
      do
      {
        char v6 = (void *)*v5;
        operator delete(v5);
        uint64_t v5 = v6;
      }
      while (v6);
    }
    uint64_t v7 = v14;
    long long v14 = 0;
    if (v7) {
      operator delete(v7);
    }
    uint64_t v8 = v13;
    if (v13)
    {
      do
      {
        long long v9 = (void *)*v8;
        operator delete(v8);
        uint64_t v8 = v9;
      }
      while (v9);
    }
    long long v10 = v12;
    unint64_t v12 = 0;
    if (v10) {
      operator delete(v10);
    }
  }
}

void sub_9FB688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9FB69C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_9FB69C(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    do
    {
      char v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)a1[6];
  a1[6] = 0;
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[3];
  if (v5)
  {
    do
    {
      char v6 = (void *)*v5;
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = (void *)a1[1];
  a1[1] = 0;
  if (v7) {
    operator delete(v7);
  }
  return a1;
}

uint64_t sub_9FB710(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(*(void *)result + 44))
  {
    uint64_t v7 = result;
    uint64_t v8 = result + 1296;
    sub_725A0(result + 1296);
    uint64_t v10 = *(void *)(v7 + 8);
    uint64_t v9 = *(void *)(v7 + 16);
    uint64_t __p = operator new(0x50uLL);
    long long v13 = xmmword_20E86E0;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/JourneyLegAlternatives.json");
    uint64_t v11 = sub_374CDC(v10, (uint64_t)&__p, *(uint64_t **)(v7 + 32));
    sub_B5F770((uint64_t)v14, v9, v11, a4);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p);
    }
    sub_B5F7A0((uint64_t)v14, a2, a3);
    *(double *)(v7 + 168) = sub_72688(v8) + *(double *)(v7 + 168);
    double result = (uint64_t)v15;
    if (v15 == v14)
    {
      return (*(uint64_t (**)(void *))(v14[0] + 32))(v14);
    }
    else if (v15)
    {
      return (*(uint64_t (**)(void))(*v15 + 40))();
    }
  }
  return result;
}

void sub_9FB8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_9F5350((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_9FB8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FB8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)a1 + 45))
  {
    uint64_t v6 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x58uLL);
    long long v12 = xmmword_20EB420;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/UniqueDirectionNameClassification.json");
    uint64_t v9 = sub_374CDC(v8, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_BAD458((uint64_t)v13, v7, v9, a3);
    sub_BAD488((uint64_t)v13, a2);
    if (v14 == v13)
    {
      (*(void (**)(void *))(v13[0] + 32))(v13);
      if ((SHIBYTE(v12) & 0x80000000) == 0)
      {
LABEL_6:
        double result = sub_72688(v6) + *(double *)(a1 + 176);
        *(double *)(a1 + 176) = result;
        return result;
      }
    }
    else
    {
      if (v14) {
        (*(void (**)(void))(*v14 + 40))();
      }
      if ((SHIBYTE(v12) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    operator delete(__p);
    goto LABEL_6;
  }
  return result;
}

void sub_9FBA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_9FBA8C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)result + 46))
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 1296;
    sub_725A0(result + 1296);
    uint64_t v8 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t __p = operator new(0x58uLL);
    long long v11 = xmmword_20EB430;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/UpcomingJourneyLegAlternatives.json");
    uint64_t v9 = sub_374CDC(v8, (uint64_t)&__p, *(uint64_t **)(v5 + 32));
    long long v13 = v12;
    v12[0] = off_243CC30;
    sub_B5F770((uint64_t)v14, v7, v9, (uint64_t)v12);
    if (v13 == v12)
    {
      (*(void (**)(void *))(v12[0] + 32))(v12);
      if ((SHIBYTE(v11) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      if (v13) {
        (*(void (**)(void))(*v13 + 40))();
      }
      if ((SHIBYTE(v11) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    operator delete(__p);
LABEL_6:
    sub_B5F7A0((uint64_t)v14, a2, a3);
    *(double *)(v5 + 168) = sub_72688(v6) + *(double *)(v5 + 168);
    double result = (uint64_t)v15;
    if (v15 == v14)
    {
      return (*(uint64_t (**)(void *))(v14[0] + 32))(v14);
    }
    else if (v15)
    {
      return (*(uint64_t (**)(void))(*v15 + 40))();
    }
  }
  return result;
}

void sub_9FBCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_9F5350((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_9FBCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_9FBCEC(uint64_t a1, uint64_t a2, double result)
{
  if (*(unsigned char *)(*(void *)a1 + 47))
  {
    uint64_t v5 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t __p = operator new(0x68uLL);
    long long v10 = xmmword_20EB440;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/UpcomingJourneyLegAlternativesDominationFilter.json");
    uint64_t v7 = sub_374CDC(v6, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_BB2364((uint64_t)v11, v7);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p);
    }
    sub_BB2368((uint64_t)v11, a2, v8);
    double result = sub_72688(v5) + *(double *)(a1 + 160);
    *(double *)(a1 + 160) = result;
  }
  return result;
}

void sub_9FBDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FBDEC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 48))
  {
    uint64_t v4 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t __p = operator new(0x60uLL);
    long long v9 = xmmword_20EB450;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/UpcomingJourneyLegAlternativesBoundsFilter.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_BB19A0(v10, v6);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    sub_BB19F0(v10, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 160);
    *(double *)(a1 + 160) = result;
  }
  return result;
}

void sub_9FBECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FBEE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)a1 + 49))
  {
    if (*(_DWORD *)(*(void *)a1 + 52) && *(_DWORD *)(a2 + 160) == 1)
    {
      uint64_t v6 = a1 + 1296;
      sub_725A0(a1 + 1296);
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t __p = operator new(0x50uLL);
      long long v12 = xmmword_20E86E0;
      strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/JourneyRealtimeUpgrade.json");
      long long v9 = sub_374CDC(v8, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
      sub_B63520(v13, v7, v9);
      sub_B6354C(v13, a3);
      if (SHIBYTE(v12) < 0) {
        operator delete(__p);
      }
      double result = sub_72688(v6) + *(double *)(a1 + 216);
      *(double *)(a1 + 216) = result;
    }
  }
  return result;
}

void sub_9FBFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FBFFC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 56))
  {
    uint64_t v4 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t __p = operator new(0x50uLL);
    long long v9 = xmmword_20B99D0;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/ServiceStatusCalculation.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_BA863C((uint64_t)v10, v6);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    sub_BA8640((uint64_t)v10, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 224);
    *(double *)(a1 + 224) = result;
  }
  return result;
}

void sub_9FC0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FC0F0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 58))
  {
    uint64_t v4 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x58uLL);
    long long v10 = xmmword_20EB460;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/ServiceFrequencyCalculation.json");
    uint64_t v7 = sub_374CDC(v6, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_B983C8((uint64_t)v11, v5, v7);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p);
    }
    sub_B983F4(v11, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 232);
    *(double *)(a1 + 232) = result;
  }
  return result;
}

void sub_9FC1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FC1F0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 59))
  {
    uint64_t v4 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t __p = operator new(0x58uLL);
    long long v9 = xmmword_20EB470;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/ServiceFrequencyBoundsFilter.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_BBDC50(v10, v6);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    sub_BBDC8C(v10, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 160);
    *(double *)(a1 + 160) = result;
  }
  return result;
}

void sub_9FC2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FC2E8(double *a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 60))
  {
    uint64_t v4 = (uint64_t)(a1 + 162);
    sub_725A0((uint64_t)(a1 + 162));
    sub_BBE358((uint64_t)&v6, a2);
    double result = sub_72688(v4) + a1[20];
    a1[20] = result;
  }
  return result;
}

void sub_9FC354(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 61))
  {
    uint64_t v4 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t __p = operator new(0x50uLL);
    long long v8 = xmmword_20B99D0;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/ServiceFrequencyRounding.json");
    char v6 = sub_374CDC(v5, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_BA6704((char **)v9, v6);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p);
    }
    sub_BA6708((unint64_t)v9, a2);
    *(double *)(a1 + 232) = sub_72688(v4) + *(double *)(a1 + 232);
    if (v9[0])
    {
      v9[1] = v9[0];
      operator delete(v9[0]);
    }
  }
}

void sub_9FC43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FC46C(double *a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 62))
  {
    uint64_t v4 = (uint64_t)(a1 + 162);
    sub_725A0((uint64_t)(a1 + 162));
    nullsub_1(&v6);
    sub_BB09E0((uint64_t)&v6, a2);
    double result = sub_72688(v4) + a1[20];
    a1[20] = result;
  }
  return result;
}

double sub_9FC4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)a1 + 57)) {
    BOOL v3 = *(_DWORD *)(a2 + 160) == 1;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v6 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x58uLL);
    long long v12 = xmmword_20EB470;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/JourneyRiskStatusCalculation.json");
    long long v9 = sub_374CDC(v8, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_B65940(v13, v7, v9);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p);
    }
    sub_B6596C((uint64_t)v13, a3);
    double result = sub_72688(v6) + *(double *)(a1 + 240);
    *(double *)(a1 + 240) = result;
  }
  return result;
}

void sub_9FC5D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FC5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)a1 + 63))
  {
    uint64_t v6 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x50uLL);
    long long v12 = xmmword_20B9990;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/OperatingHoursCalculation.json");
    long long v9 = sub_374CDC(v8, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_B6F0CC((uint64_t)v13, v7, v9, a3);
    sub_B6F154((uint64_t)v13, a2);
    if (v14 == v13)
    {
      (*(void (**)(void *))(v13[0] + 32))(v13);
      if ((SHIBYTE(v12) & 0x80000000) == 0)
      {
LABEL_6:
        double result = sub_72688(v6) + *(double *)(a1 + 248);
        *(double *)(a1 + 248) = result;
        return result;
      }
    }
    else
    {
      if (v14) {
        (*(void (**)(void))(*v14 + 40))();
      }
      if ((SHIBYTE(v12) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    operator delete(__p);
    goto LABEL_6;
  }
  return result;
}

void sub_9FC778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_9FC7A4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 43))
  {
    uint64_t v4 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x58uLL);
    long long v10 = xmmword_20EB470;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/JourneyDepartureAlternatives.json");
    uint64_t v7 = sub_374CDC(v6, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_B4CFFC((uint64_t)v11, v5, v7);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p);
    }
    sub_B4D028((uint64_t)v11, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 184);
    *(double *)(a1 + 184) = result;
  }
  return result;
}

void sub_9FC88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FC8A8(double *a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 70))
  {
    uint64_t v4 = (uint64_t)(a1 + 162);
    sub_725A0((uint64_t)(a1 + 162));
    v6[0] = xmmword_20EB480;
    v6[1] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    sub_BAE8F8((double *)v6, a2);
    double result = sub_72688(v4) + a1[20];
    a1[20] = result;
  }
  return result;
}

double sub_9FC928(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 74))
  {
    uint64_t v4 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t __p = operator new(0x50uLL);
    long long v9 = xmmword_20B9A50;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/NumFillInJourneysFilter.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_BBBC24(&v10, v6);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    sub_BBBCE0(&v10, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 160);
    *(double *)(a1 + 160) = result;
  }
  return result;
}

void sub_9FCA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FCA1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)a1 + 75))
  {
    uint64_t v6 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t __p = operator new(0x48uLL);
    long long v11 = xmmword_20B92A0;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/NumJourneysFilter.json");
    uint64_t v8 = sub_374CDC(v7, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_BBC428(&v12, v8);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p);
    }
    sub_BBC4CC(&v12, a2, a3);
    double result = sub_72688(v6) + *(double *)(a1 + 160);
    *(double *)(a1 + 160) = result;
  }
  return result;
}

void sub_9FCB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FCB20(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 64))
  {
    uint64_t v4 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x48uLL);
    long long v10 = xmmword_20B92A0;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/FillInComputation.json");
    uint64_t v7 = sub_374CDC(v6, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_B4CFFC((uint64_t)v11, v5, v7);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p);
    }
    sub_B4D028((uint64_t)v11, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 192);
    *(double *)(a1 + 192) = result;
  }
  return result;
}

void sub_9FCC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9FCC20(uint64_t result, _OWORD *a2, uint64_t a3)
{
  if (*(unsigned char *)(*(void *)result + 65))
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 1296;
    sub_725A0(result + 1296);
    uint64_t v8 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t __p = operator new(0x50uLL);
    long long v15 = xmmword_20B99D0;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/FillInJourneyCalculation.json");
    long long v9 = sub_374CDC(v8, (uint64_t)&__p, *(uint64_t **)(v5 + 32));
    sub_B3D648((uint64_t)v16, v7, v9);
    if (SHIBYTE(v15) < 0) {
      operator delete(__p);
    }
    sub_B3D64C((uint64_t)v16, a2, a3);
    long long v10 = (float64x2_t *)sub_B3D934((uint64_t)v16);
    sub_C49950(v5 + 464, v10, (uint64_t)v11);
    if (v13 < 0) {
      operator delete(v12);
    }
    *(double *)(v5 + 192) = sub_72688(v6) + *(double *)(v5 + 192);
    return sub_9FD3E0((uint64_t)v16);
  }
  return result;
}

void sub_9FCD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (a39 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FCD74(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(unsigned char *)(*(void *)a1 + 27)) {
    BOOL v3 = *(unsigned char *)(a2 + 164) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (*(unsigned char *)(*(void *)a1 + 28))
    {
      uint64_t v6 = a1 + 1296;
      sub_725A0(a1 + 1296);
      sub_B396FC(v8, *(void **)(a1 + 8), *(void *)(a1 + 16));
      sub_B39730((uint64_t)v8, a3);
      double result = sub_72688(v6) + *(double *)(a1 + 256);
      *(double *)(a1 + 256) = result;
    }
  }
  return result;
}

double sub_9FCE00(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 77))
  {
    uint64_t v4 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t __p = operator new(0x50uLL);
    long long v9 = xmmword_20B9A50;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/BlockingIncidentsFilter.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_BAE494(&v10, v6);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    sub_BAE498(&v10, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 160);
    *(double *)(a1 + 160) = result;
  }
  return result;
}

void sub_9FCED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FCEF4(double *a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 78))
  {
    uint64_t v4 = (uint64_t)(a1 + 162);
    sub_725A0((uint64_t)(a1 + 162));
    sub_BBD2E0((uint64_t)&v6, a2);
    double result = sub_72688(v4) + a1[20];
    a1[20] = result;
  }
  return result;
}

double sub_9FCF60(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 79))
  {
    uint64_t v4 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x48uLL);
    long long v10 = xmmword_20B92A0;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/PartialDataFilter.json");
    uint64_t v7 = sub_374CDC(v6, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_BBC5DC((uint64_t)v11, v5, v7);
    sub_BBC690((uint64_t)v11, a2);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p);
    }
    double result = sub_72688(v4) + *(double *)(a1 + 160);
    *(double *)(a1 + 160) = result;
  }
  return result;
}

void sub_9FD044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FD060(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(*(void *)a1 + 80))
  {
    uint64_t v4 = a1 + 1296;
    sub_725A0(a1 + 1296);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x58uLL);
    long long v9 = xmmword_20EB470;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/PaymentMethodLookupAlgorithm.json");
    sub_374CDC(v5, (uint64_t)&__p, *(uint64_t **)(a1 + 32));
    sub_B36698((uint64_t)v10, v5, v6);
    sub_B36AA4((uint64_t)v10, a2);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    double result = sub_72688(v4) + *(double *)(a1 + 264);
    *(double *)(a1 + 264) = result;
  }
  return result;
}

void sub_9FD14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_9FD168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1 + 1296;
  sub_725A0(a1 + 1296);
  sub_B5545C((uint64_t)v10, a4);
  sub_B5550C((uint64_t)v10, a2, a3);
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  double result = sub_72688(v8) + *(double *)(a1 + 272);
  *(double *)(a1 + 272) = result;
  return result;
}

void sub_9FD27C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_9F5350((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_9FD294(void *a1)
{
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  BOOL v3 = (void **)a1[6];
  if (v3)
  {
    uint64_t v4 = (void **)a1[7];
    uint64_t v5 = (void *)a1[6];
    if (v4 != v3)
    {
      uint64_t v6 = (void **)a1[7];
      do
      {
        long long v9 = (char *)*(v6 - 3);
        v6 -= 3;
        uint64_t v8 = v9;
        if (v9)
        {
          long long v10 = (char *)*(v4 - 2);
          uint64_t v7 = v8;
          if (v10 != v8)
          {
            long long v11 = (char *)*(v4 - 2);
            do
            {
              char v13 = (void *)*((void *)v11 - 3);
              v11 -= 24;
              unint64_t v12 = v13;
              if (v13)
              {
                *((void *)v10 - 2) = v12;
                operator delete(v12);
              }
              long long v10 = v11;
            }
            while (v11 != v8);
            uint64_t v7 = *v6;
          }
          *(v4 - 2) = v8;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      uint64_t v5 = (void *)a1[6];
    }
    a1[7] = v3;
    operator delete(v5);
  }
  long long v14 = (void **)a1[3];
  if (v14)
  {
    long long v15 = (void **)a1[4];
    long long v16 = (void *)a1[3];
    if (v15 != v14)
    {
      long long v17 = (void **)a1[4];
      do
      {
        uint64_t v20 = (char *)*(v17 - 3);
        v17 -= 3;
        int v19 = v20;
        if (v20)
        {
          double v21 = (char *)*(v15 - 2);
          uint64_t v18 = v19;
          if (v21 != v19)
          {
            long long v22 = (char *)*(v15 - 2);
            do
            {
              uint64_t v24 = (void *)*((void *)v22 - 3);
              v22 -= 24;
              char v23 = v24;
              if (v24)
              {
                *((void *)v21 - 2) = v23;
                operator delete(v23);
              }
              double v21 = v22;
            }
            while (v22 != v19);
            uint64_t v18 = *v17;
          }
          *(v15 - 2) = v19;
          operator delete(v18);
        }
        long long v15 = v17;
      }
      while (v17 != v14);
      long long v16 = (void *)a1[3];
    }
    a1[4] = v14;
    operator delete(v16);
  }
  return a1;
}

uint64_t sub_9FD3E0(uint64_t a1)
{
  if (*(char *)(a1 + 1103) < 0)
  {
    operator delete(*(void **)(a1 + 1080));
    sub_9FD504(a1 + 312);
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 304);
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    sub_9FD504(a1 + 312);
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 304);
    if (!v2) {
      goto LABEL_6;
    }
  }
  if (!atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    BOOL v3 = *(std::__shared_weak_count **)(a1 + 288);
    if (!v3) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
LABEL_6:
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 288);
  if (!v3) {
    goto LABEL_10;
  }
LABEL_7:
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_10:
  uint64_t v4 = *(void **)(a1 + 248);
  if (v4)
  {
    *(void *)(a1 + 256) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 240);
  if (v5) {
    free(v5);
  }
  uint64_t v6 = *(void **)(a1 + 128);
  if (v6)
  {
    *(void *)(a1 + 136) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 120);
  if (v7) {
    free(v7);
  }
  return a1;
}

uint64_t sub_9FD504(uint64_t a1)
{
  if ((*(char *)(a1 + 599) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 544);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 576));
  uint64_t v2 = *(void **)(a1 + 544);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 552) = v2;
    operator delete(v2);
  }
LABEL_4:
  BOOL v3 = *(void **)(a1 + 520);
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 496);
  if (v4) {
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 440);
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 408);
  if (v6)
  {
    *(void *)(a1 + 416) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 384);
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 360);
  if (v8)
  {
    *(void *)(a1 + 368) = v8;
    operator delete(v8);
  }
  long long v9 = *(void **)(a1 + 336);
  if (v9)
  {
    *(void *)(a1 + 344) = v9;
    operator delete(v9);
  }
  long long v10 = *(void **)(a1 + 312);
  if (v10) {
    operator delete(v10);
  }
  long long v11 = *(void **)(a1 + 288);
  if (v11)
  {
    *(void *)(a1 + 296) = v11;
    operator delete(v11);
  }
  unint64_t v12 = *(void **)(a1 + 264);
  if (v12) {
    operator delete(v12);
  }
  char v13 = *(void **)(a1 + 240);
  if (v13)
  {
    *(void *)(a1 + 248) = v13;
    operator delete(v13);
  }
  long long v14 = *(void **)(a1 + 216);
  if (v14) {
    operator delete(v14);
  }
  long long v15 = *(void **)(a1 + 192);
  if (v15)
  {
    *(void *)(a1 + 200) = v15;
    operator delete(v15);
  }
  long long v16 = *(void **)(a1 + 168);
  if (v16)
  {
    *(void *)(a1 + 176) = v16;
    operator delete(v16);
  }
  long long v17 = *(std::__shared_weak_count **)(a1 + 160);
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    uint64_t v18 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v18) {
      goto LABEL_40;
    }
  }
  else
  {
    uint64_t v18 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v18) {
      goto LABEL_40;
    }
  }
  if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
LABEL_40:
  int v19 = *(std::__shared_weak_count **)(a1 + 88);
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    uint64_t v20 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v20) {
      return a1;
    }
  }
  else
  {
    uint64_t v20 = *(std::__shared_weak_count **)(a1 + 72);
    if (!v20) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return a1;
}

void sub_9FD760()
{
  unk_25DF8A7 = 16641;
  word_25DF890 = 65;
  byte_25DF8BF = 1;
  byte_25DF8A9 = 0;
}

uint64_t sub_9FD788(uint64_t a1, void *a2)
{
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B8E90;
  strcpy(*(char **)&v93[0], "journey_planning_algorithm_name");
  uint64_t v4 = sub_561B0(a2, (uint64_t)v93);
  if (*(char *)(v4 + 23) < 0)
  {
    sub_4200((unsigned char *)a1, *(void **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    *(void *)(a1 + 16) = *(void *)(v4 + 16);
    *(_OWORD *)a1 = v5;
  }
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B8870;
  strcpy(*(char **)&v93[0], "enable_parallel_pipelines");
  BOOL v6 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 24) = v6;
  BYTE7(v93[1]) = 21;
  strcpy((char *)v93, "enable_coverage_check");
  BOOL v7 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 25) = v7;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B8870;
  strcpy(*(char **)&v93[0], "enable_stop_overlap_check");
  BOOL v8 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 26) = v8;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9280;
  strcpy(*(char **)&v93[0], "enable_blocking_incidents_handling");
  BOOL v9 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 27) = v9;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9960;
  strcpy(*(char **)&v93[0], "enable_offjourney_incidents_computation");
  BOOL v10 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 28) = v10;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B8890;
  strcpy(*(char **)&v93[0], "enable_realtime_data_handling");
  BOOL v11 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 29) = v11;
  *(void *)&v93[0] = operator new(0x30uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B93D0;
  strcpy(*(char **)&v93[0], "enable_direct_walking_journey_computation");
  BOOL v12 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 30) = v12;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20E12D0;
  strcpy(*(char **)&v93[0], "enable_direct_walking_journey_shifting");
  BOOL v13 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 31) = v13;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B8E90;
  strcpy(*(char **)&v93[0], "enable_journey_fare_calculation");
  BOOL v14 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 32) = v14;
  *(void *)&v93[0] = operator new(0x19uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9250;
  strcpy(*(char **)&v93[0], "enable_realtime_updates");
  BOOL v15 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 33) = v15;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B8870;
  strcpy(*(char **)&v93[0], "enable_journey_tightening");
  BOOL v16 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 34) = v16;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B91A0;
  strcpy(*(char **)&v93[0], "enable_transfer_preferences");
  BOOL v17 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 35) = v17;
  strcpy((char *)v93, "enable_journey_scoring");
  BYTE7(v93[1]) = 22;
  BOOL v18 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 36) = v18;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B93A0;
  strcpy(*(char **)&v93[0], "enable_main_ordering_by_avoid_types");
  BOOL v19 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 37) = v19;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B91B0;
  strcpy(*(char **)&v93[0], "enable_main_ordering_by_risk");
  BOOL v20 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 38) = v20;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B8890;
  strcpy(*(char **)&v93[0], "enable_main_ordering_by_score");
  BOOL v21 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 39) = v21;
  *(void *)&v93[0] = operator new(0x19uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9250;
  strcpy(*(char **)&v93[0], "enable_journey_bundling");
  BOOL v22 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 40) = v22;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B91B0;
  strcpy(*(char **)&v93[0], "enable_journey_bundle_filter");
  BOOL v23 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 41) = v23;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9800;
  strcpy(*(char **)&v93[0], "enable_journey_bundle_ordering");
  BOOL v24 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 42) = v24;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9240;
  strcpy(*(char **)&v93[0], "enable_journey_departure_alternatives");
  BOOL v25 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 43) = v25;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B8E90;
  strcpy(*(char **)&v93[0], "enable_journey_leg_alternatives");
  BOOL v26 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 44) = v26;
  *(void *)&v93[0] = operator new(0x30uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B93E0;
  strcpy(*(char **)&v93[0], "enable_unique_direction_name_classification");
  BOOL v27 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 45) = v27;
  *(void *)&v93[0] = operator new(0x30uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B93C0;
  strcpy(*(char **)&v93[0], "enable_upcoming_journey_leg_alternatives");
  BOOL v28 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 46) = v28;
  *(void *)&v93[0] = operator new(0x40uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9A30;
  strcpy(*(char **)&v93[0], "enable_upcoming_journey_leg_alternatives_domination_filter");
  BOOL v29 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 47) = v29;
  *(void *)&v93[0] = operator new(0x38uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B8DF0;
  strcpy(*(char **)&v93[0], "enable_upcoming_journey_leg_alternatives_bounds_filter");
  BOOL v30 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 48) = v30;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B8E90;
  strcpy(*(char **)&v93[0], "enable_journey_realtime_upgrade");
  BOOL v31 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 49) = v31;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9260;
  strcpy(*(char **)&v93[0], "enable_service_status_calculation");
  BOOL v32 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 56) = v32;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20E12D0;
  strcpy(*(char **)&v93[0], "enable_journey_risk_status_calculation");
  BOOL v33 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 57) = v33;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B8FD0;
  strcpy(*(char **)&v93[0], "enable_service_frequency_calculation");
  BOOL v34 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 58) = v34;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20E12D0;
  strcpy(*(char **)&v93[0], "enable_service_frequency_bounds_filter");
  BOOL v35 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 59) = v35;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9960;
  strcpy(*(char **)&v93[0], "enable_service_frequency_overlap_filter");
  BOOL v36 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 60) = v36;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9260;
  strcpy(*(char **)&v93[0], "enable_service_frequency_rounding");
  BOOL v37 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 61) = v37;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9960;
  strcpy(*(char **)&v93[0], "enable_invalid_service_frequency_filter");
  BOOL v38 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 62) = v38;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9280;
  strcpy(*(char **)&v93[0], "enable_operating_hours_calculation");
  BOOL v39 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 63) = v39;
  *(void *)&v93[0] = operator new(0x30uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B93D0;
  strcpy(*(char **)&v93[0], "enable_legacy_fill_in_journey_calculation");
  BOOL v40 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 64) = v40;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9280;
  strcpy(*(char **)&v93[0], "enable_fill_in_journey_calculation");
  BOOL v41 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 65) = v41;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B93A0;
  strcpy(*(char **)&v93[0], "enable_main_before_fill_in_ordering");
  BOOL v42 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 66) = v42;
  *(void *)&v93[0] = operator new(0x30uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9A40;
  strcpy(*(char **)&v93[0], "enable_fill_in_ordering_by_exp_deparr_time");
  BOOL v43 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 67) = v43;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9800;
  strcpy(*(char **)&v93[0], "enable_frequent_fill_in_filter");
  BOOL v44 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 68) = v44;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B91C0;
  strcpy(*(char **)&v93[0], "enable_journey_filtering");
  BOOL v45 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 69) = v45;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9390;
  strcpy(*(char **)&v93[0], "enable_criteria_threshold_filter");
  if (sub_29D62C(a2, (uint64_t)v93))
  {
    BOOL v46 = *(unsigned char *)(a1 + 69) != 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
  }
  else
  {
    BOOL v46 = 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_91;
    }
  }
  operator delete(*(void **)&v93[0]);
LABEL_91:
  *(unsigned char *)(a1 + 70) = v46;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B91B0;
  strcpy(*(char **)&v93[0], "enable_double_station_filter");
  if (sub_29D62C(a2, (uint64_t)v93))
  {
    BOOL v47 = *(unsigned char *)(a1 + 69) != 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_96;
    }
  }
  else
  {
    BOOL v47 = 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_96;
    }
  }
  operator delete(*(void **)&v93[0]);
LABEL_96:
  *(unsigned char *)(a1 + 71) = v47;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B8870;
  strcpy(*(char **)&v93[0], "enable_double_trip_filter");
  if (sub_29D62C(a2, (uint64_t)v93))
  {
    BOOL v48 = *(unsigned char *)(a1 + 69) != 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_101;
    }
  }
  else
  {
    BOOL v48 = 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_101;
    }
  }
  operator delete(*(void **)&v93[0]);
LABEL_101:
  *(unsigned char *)(a1 + 72) = v48;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9390;
  strcpy(*(char **)&v93[0], "enable_journey_similarity_filter");
  if (sub_29D62C(a2, (uint64_t)v93))
  {
    BOOL v49 = *(unsigned char *)(a1 + 69) != 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_106;
    }
  }
  else
  {
    BOOL v49 = 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_106;
    }
  }
  operator delete(*(void **)&v93[0]);
LABEL_106:
  *(unsigned char *)(a1 + 73) = v49;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9280;
  strcpy(*(char **)&v93[0], "enable_num_fill_in_journeys_filter");
  if (sub_29D62C(a2, (uint64_t)v93))
  {
    BOOL v50 = *(unsigned char *)(a1 + 69) != 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_111;
    }
  }
  else
  {
    BOOL v50 = 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_111;
    }
  }
  operator delete(*(void **)&v93[0]);
LABEL_111:
  *(unsigned char *)(a1 + 74) = v50;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B5EB0;
  strcpy(*(char **)&v93[0], "enable_num_journeys_filter");
  if (sub_29D62C(a2, (uint64_t)v93))
  {
    BOOL v51 = *(unsigned char *)(a1 + 69) != 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_116;
    }
  }
  else
  {
    BOOL v51 = 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_116;
    }
  }
  operator delete(*(void **)&v93[0]);
LABEL_116:
  *(unsigned char *)(a1 + 75) = v51;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B8890;
  strcpy(*(char **)&v93[0], "enable_score_threshold_filter");
  if (sub_29D62C(a2, (uint64_t)v93))
  {
    BOOL v52 = *(unsigned char *)(a1 + 69) != 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  else
  {
    BOOL v52 = 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
  }
  operator delete(*(void **)&v93[0]);
LABEL_121:
  *(unsigned char *)(a1 + 76) = v52;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B9390;
  strcpy(*(char **)&v93[0], "enable_blocking_incidents_filter");
  if (sub_29D62C(a2, (uint64_t)v93))
  {
    BOOL v53 = *(unsigned char *)(a1 + 69) != 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_126;
    }
  }
  else
  {
    BOOL v53 = 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_126;
    }
  }
  operator delete(*(void **)&v93[0]);
LABEL_126:
  *(unsigned char *)(a1 + 77) = v53;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B91A0;
  strcpy(*(char **)&v93[0], "enable_risky_journey_filter");
  if (sub_29D62C(a2, (uint64_t)v93))
  {
    BOOL v54 = *(unsigned char *)(a1 + 69) != 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_131;
    }
  }
  else
  {
    BOOL v54 = 0;
    if ((SBYTE7(v93[1]) & 0x80000000) == 0) {
      goto LABEL_131;
    }
  }
  operator delete(*(void **)&v93[0]);
LABEL_131:
  *(unsigned char *)(a1 + 78) = v54;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B5EB0;
  strcpy(*(char **)&v93[0], "enable_partial_data_filter");
  BOOL v55 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 79) = v55;
  *(void *)&v93[0] = operator new(0x28uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20E12D0;
  strcpy(*(char **)&v93[0], "enable_payment_method_lookup_algorithm");
  BOOL v56 = sub_29D62C(a2, (uint64_t)v93);
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(unsigned char *)(a1 + 80) = v56;
  *(void *)&v93[0] = operator new(0x20uLL);
  *(long long *)((char *)v93 + 8) = xmmword_20B8870;
  strcpy(*(char **)&v93[0], "journey_at_risk_predicate");
  uint64_t v57 = sub_561B0(a2, (uint64_t)v93);
  sub_9FF4F0(v57, (void *)(a1 + 88));
  if (SBYTE7(v93[1]) < 0) {
    operator delete(*(void **)&v93[0]);
  }
  *(void *)long long v91 = operator new(0x28uLL);
  *(_OWORD *)&v91[8] = xmmword_20B93A0;
  strcpy(*(char **)v91, "journey_realtime_calculation_policy");
  uint64_t v58 = sub_561B0(a2, (uint64_t)v91);
  if (*(char *)(v58 + 23) < 0)
  {
    uint64_t v63 = *(void *)(v58 + 8);
    if (v63 != 8)
    {
      if (v63 != 14)
      {
        if (v63 == 18)
        {
          BOOL v64 = **(void **)v58 == 0x5F66695F796C6E6FLL && *(void *)(*(void *)v58 + 8) == 0x6269736165666E69;
          if (v64 && *(_WORD *)(*(void *)v58 + 16) == 25964) {
            goto LABEL_160;
          }
        }
LABEL_219:
        exception = __cxa_allocate_exception(0x40uLL);
        std::operator+<char>();
        unsigned __int32 v84 = std::string::append(&v92, "\" provided in configuration");
        long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
        *(void *)&v93[1] = *((void *)&v84->__r_.__value_.__l + 2);
        v93[0] = v85;
        v84->__r_.__value_.__l.__size_ = 0;
        v84->__r_.__value_.__r.__words[2] = 0;
        v84->__r_.__value_.__r.__words[0] = 0;
        long long v86 = (void *)sub_2F404((uint64_t)exception, v93);
      }
      long long v60 = *(uint64_t **)v58;
LABEL_165:
      uint64_t v66 = *v60;
      uint64_t v67 = *(uint64_t *)((char *)v60 + 6);
      if (v66 == 0x655F737961776C61 && v67 == 0x64656C62616E655FLL)
      {
        *(_DWORD *)(a1 + 52) = 2;
        if ((v91[23] & 0x80000000) == 0) {
          goto LABEL_172;
        }
        goto LABEL_171;
      }
      goto LABEL_219;
    }
    if (**(void **)v58 != 0x64656C6261736964) {
      goto LABEL_219;
    }
  }
  else
  {
    int v59 = *(unsigned __int8 *)(v58 + 23);
    if (v59 != 8)
    {
      long long v60 = (uint64_t *)v58;
      if (v59 != 14)
      {
        if (v59 != 18) {
          goto LABEL_219;
        }
        BOOL v61 = *(void *)v58 == 0x5F66695F796C6E6FLL && *(void *)(v58 + 8) == 0x6269736165666E69;
        if (!v61 || *(_WORD *)(v58 + 16) != 25964) {
          goto LABEL_219;
        }
LABEL_160:
        *(_DWORD *)(a1 + 52) = 1;
        if ((v91[23] & 0x80000000) == 0) {
          goto LABEL_172;
        }
        goto LABEL_171;
      }
      goto LABEL_165;
    }
    if (*(void *)v58 != 0x64656C6261736964) {
      goto LABEL_219;
    }
  }
  *(_DWORD *)(a1 + 52) = 0;
  if ((v91[23] & 0x80000000) != 0) {
LABEL_171:
  }
    operator delete(*(void **)v91);
LABEL_172:
  v91[23] = 12;
  strcpy(v91, "merge_policy");
  uint64_t v69 = sub_561B0(a2, (uint64_t)v91);
  if ((*(char *)(v69 + 23) & 0x80000000) == 0)
  {
    int v70 = *(unsigned __int8 *)(v69 + 23);
    if (v70 != 14)
    {
      if (v70 != 16)
      {
        long long v71 = (uint64_t *)v69;
        if (v70 != 22) {
          goto LABEL_220;
        }
LABEL_181:
        uint64_t v73 = *v71;
        uint64_t v74 = v71[1];
        uint64_t v75 = *(uint64_t *)((char *)v71 + 14);
        if (v73 != 0x74615F646E656C62 || v74 != 0x6F6A5F6B7369725FLL || v75 != 0x7379656E72756F6ALL) {
          goto LABEL_220;
        }
        *(_DWORD *)(a1 + 120) = 2;
        if ((v91[23] & 0x80000000) != 0) {
          goto LABEL_210;
        }
        return a1;
      }
      if (*(void *)v69 != 0x5F6563616C706572 || *(void *)(v69 + 8) != 0x7379656E72756F6ALL) {
        goto LABEL_220;
      }
      goto LABEL_209;
    }
    if (*(void *)v69 != 0x6F6A5F646E656C62 || *(void *)(v69 + 6) != 0x7379656E72756F6ALL) {
      goto LABEL_220;
    }
LABEL_217:
    *(_DWORD *)(a1 + 120) = 1;
    if ((v91[23] & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_210;
  }
  uint64_t v72 = *(void *)(v69 + 8);
  if (v72 == 14)
  {
    if (**(void **)v69 != 0x6F6A5F646E656C62 || *(void *)(*(void *)v69 + 6) != 0x7379656E72756F6ALL) {
      goto LABEL_220;
    }
    goto LABEL_217;
  }
  if (v72 != 16)
  {
    if (v72 != 22) {
      goto LABEL_220;
    }
    long long v71 = *(uint64_t **)v69;
    goto LABEL_181;
  }
  if (**(void **)v69 != 0x5F6563616C706572 || *(void *)(*(void *)v69 + 8) != 0x7379656E72756F6ALL)
  {
LABEL_220:
    long long v87 = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    long long v88 = std::string::append(&v92, "\" provided in configuration");
    long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    *(void *)&v93[1] = *((void *)&v88->__r_.__value_.__l + 2);
    v93[0] = v89;
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    long long v90 = (void *)sub_2F404((uint64_t)v87, v93);
  }
LABEL_209:
  *(_DWORD *)(a1 + 120) = 0;
  if ((v91[23] & 0x80000000) != 0) {
LABEL_210:
  }
    operator delete(*(void **)v91);
  return a1;
}

void sub_9FEF50(_Unwind_Exception *a1)
{
  if (*(char *)(v3 - 57) < 0)
  {
    operator delete(*(void **)(v3 - 80));
    if ((*(char *)(v3 - 81) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(char *)(v3 - 81) & 0x80000000) == 0)
  {
LABEL_3:
    if ((*(char *)(v3 - 105) & 0x80000000) == 0)
    {
LABEL_8:
      sub_9F5350(v2);
      if (*(char *)(v1 + 23) < 0) {
        operator delete(*(void **)v1);
      }
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(*(void **)(v3 - 128));
    goto LABEL_8;
  }
  operator delete(*(void **)(v3 - 104));
  if ((*(char *)(v3 - 105) & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t sub_9FF4F0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(char *)(result + 23) < 0)
  {
    uint64_t v5 = *(void *)(result + 8);
    if (v5 == 3 && **(_WORD **)result == 28257 && *(unsigned char *)(*(void *)result + 2) == 121)
    {
LABEL_32:
      a2[3] = a2;
      *a2 = off_243CC30;
      return result;
    }
    if (v5 == 4)
    {
      if (**(_DWORD **)result == 1701736302)
      {
LABEL_26:
        a2[3] = a2;
        *a2 = off_243CF28;
        return result;
      }
      uint64_t v5 = *(void *)(result + 8);
      if (v5 == 4 && **(_DWORD **)result == 1852399981)
      {
LABEL_39:
        a2[3] = a2;
        *a2 = off_243CD28;
        return result;
      }
    }
    if (v5 != 3) {
      goto LABEL_46;
    }
    if (**(_WORD **)result == 28532 && *(unsigned char *)(*(void *)result + 2) == 112)
    {
LABEL_57:
      a2[3] = a2;
      *a2 = off_243CFA8;
      return result;
    }
  }
  else
  {
    int v2 = *(unsigned __int8 *)(result + 23);
    uint64_t v3 = (void *)result;
    switch(*(unsigned char *)(result + 23))
    {
      case 3:
        if (*(_WORD *)result != 28257 || *(unsigned char *)(result + 2) != 121) {
          goto LABEL_40;
        }
        goto LABEL_32;
      case 4:
        if (*(_DWORD *)result == 1701736302) {
          goto LABEL_26;
        }
        if (v2 != 3)
        {
          if (v2 != 4 || *(_DWORD *)result != 1852399981) {
            goto LABEL_58;
          }
          goto LABEL_39;
        }
LABEL_40:
        if (*(_WORD *)result == 28532 && *(unsigned char *)(result + 2) == 112) {
          goto LABEL_57;
        }
        if ((v2 & 0x80) == 0) {
          goto LABEL_58;
        }
        break;
      case 7:
        if (*(_DWORD *)result != 1819044198 || *(_DWORD *)(result + 3) != 1852399468) {
          goto LABEL_58;
        }
        goto LABEL_56;
      case 8:
        goto LABEL_54;
      default:
        goto LABEL_58;
    }
  }
  uint64_t v5 = *(void *)(result + 8);
LABEL_46:
  if (v5 == 7)
  {
    if (**(_DWORD **)result == 1819044198 && *(_DWORD *)(*(void *)result + 3) == 1852399468)
    {
LABEL_56:
      a2[3] = a2;
      *a2 = off_243CDA8;
      return result;
    }
    uint64_t v5 = *(void *)(result + 8);
  }
  if (v5 != 8) {
    goto LABEL_58;
  }
  uint64_t v3 = *(void **)result;
LABEL_54:
  if (*v3 != 0x656D69746C616572)
  {
LABEL_58:
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    BOOL v13 = std::string::append(&v16, "\"");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v13->__r_.__value_.__r.__words[2];
    long long v17 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    BOOL v15 = (void *)sub_2F404((uint64_t)exception, &v17);
  }
  a2[3] = a2;
  *a2 = off_243CE28;
  return result;
}

void sub_9FF870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_9FF8E8()
{
}

void *sub_9FF8FC()
{
  double result = operator new(0x10uLL);
  void *result = off_243CF28;
  return result;
}

void sub_9FF934(uint64_t a1, void *a2)
{
  *a2 = off_243CF28;
}

uint64_t sub_9FF95C()
{
  return 0;
}

uint64_t sub_9FF964(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning16JourneyPredicate4noneEvEUlRKNS1_10SpaJourneyEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning16JourneyPredicate4noneEvEUlRKNS1_10SpaJourneyEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning16JourneyPredicate4noneEvEUlRKNS1_10SpaJourneyEE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning16JourneyPredicate4noneEvEUlRKNS1_10SpaJourneyEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_9FF9D4()
{
}

void sub_9FF9E4()
{
}

void *sub_9FF9F8()
{
  double result = operator new(0x10uLL);
  void *result = off_243CFA8;
  return result;
}

void sub_9FFA30(uint64_t a1, void *a2)
{
  *a2 = off_243CFA8;
}

BOOL sub_9FFA58(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 192) == 1.0 && *(unsigned char *)(a2 + 9) == 0;
}

uint64_t sub_9FFA74(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN3msl7routing16journey_planning16JourneyPredicate3topEvEUlRKNS1_10SpaJourneyEE_") {
    return a1 + 8;
  }
  if (((v3 & (unint64_t)"ZN3msl7routing16journey_planning16JourneyPredicate3topEvEUlRKNS1_10SpaJourneyEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3msl7routing16journey_planning16JourneyPredicate3topEvEUlRKNS1_10SpaJourneyEE_")) {
    return 0;
  }
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3msl7routing16journey_planning16JourneyPredicate3topEvEUlRKNS1_10SpaJourneyEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8; {
  return 0;
  }
}

_UNKNOWN **sub_9FFAE4()
{
}

BOOL *sub_9FFAF0(BOOL *a1, void *a2)
{
  uint64_t __p = operator new(0x28uLL);
  long long v19 = xmmword_20B9280;
  strcpy((char *)__p, "enable_blocking_incidents_handling");
  BOOL v4 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  *a1 = v4;
  uint64_t __p = operator new(0x19uLL);
  long long v19 = xmmword_20B9250;
  strcpy((char *)__p, "enable_realtime_updates");
  BOOL v5 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  a1[1] = v5;
  uint64_t __p = operator new(0x28uLL);
  long long v19 = xmmword_20B9240;
  strcpy((char *)__p, "enable_journey_departure_alternatives");
  BOOL v6 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  a1[2] = v6;
  uint64_t __p = operator new(0x20uLL);
  long long v19 = xmmword_20B8E90;
  strcpy((char *)__p, "enable_journey_leg_alternatives");
  BOOL v7 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  a1[3] = v7;
  uint64_t __p = operator new(0x28uLL);
  long long v19 = xmmword_20B8FD0;
  strcpy((char *)__p, "enable_service_frequency_calculation");
  BOOL v8 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  a1[4] = v8;
  uint64_t __p = operator new(0x28uLL);
  long long v19 = xmmword_20E12D0;
  strcpy((char *)__p, "enable_service_frequency_bounds_filter");
  BOOL v9 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  a1[5] = v9;
  uint64_t __p = operator new(0x28uLL);
  long long v19 = xmmword_20B9960;
  strcpy((char *)__p, "enable_service_frequency_overlap_filter");
  BOOL v10 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  a1[6] = v10;
  uint64_t __p = operator new(0x28uLL);
  long long v19 = xmmword_20B9260;
  strcpy((char *)__p, "enable_service_frequency_rounding");
  BOOL v11 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  a1[7] = v11;
  uint64_t __p = operator new(0x28uLL);
  long long v19 = xmmword_20B9960;
  strcpy((char *)__p, "enable_invalid_service_frequency_filter");
  BOOL v12 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  a1[8] = v12;
  uint64_t __p = operator new(0x30uLL);
  long long v19 = xmmword_20B93C0;
  strcpy((char *)__p, "enable_upcoming_journey_leg_alternatives");
  BOOL v13 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  a1[9] = v13;
  uint64_t __p = operator new(0x40uLL);
  long long v19 = xmmword_20B9A30;
  strcpy((char *)__p, "enable_upcoming_journey_leg_alternatives_domination_filter");
  BOOL v14 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  a1[10] = v14;
  uint64_t __p = operator new(0x38uLL);
  long long v19 = xmmword_20B8DF0;
  strcpy((char *)__p, "enable_upcoming_journey_leg_alternatives_bounds_filter");
  BOOL v15 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  a1[11] = v15;
  uint64_t __p = operator new(0x28uLL);
  long long v19 = xmmword_20B9260;
  strcpy((char *)__p, "enable_service_status_calculation");
  BOOL v16 = sub_29D62C(a2, (uint64_t)&__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  a1[12] = v16;
  return a1;
}

void sub_9FFFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9FFFF8(uint64_t a1, void *a2, uint64_t *a3)
{
  BOOL v25 = (char *)operator new(0x28uLL);
  long long v26 = xmmword_20B93A0;
  strcpy(v25, "routing/transit/JourneyUpdater.json");
  BOOL v6 = sub_374CDC((uint64_t)a2, (uint64_t)&v25, a3);
  sub_9FFAF0((BOOL *)a1, v6);
  if (SHIBYTE(v26) < 0) {
    operator delete(v25);
  }
  *(void *)(a1 + 16) = a2;
  BOOL v7 = (void *)sub_374CE4(a2);
  uint64_t v8 = v7[1];
  *(void *)&long long v24 = *v7;
  *((void *)&v24 + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v9 = (void *)sub_374DF4(*(void *)(a1 + 16));
  uint64_t v10 = v9[1];
  *(void *)&long long v15 = *v9;
  *((void *)&v15 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = v9[3];
  uint64_t v16 = v9[2];
  uint64_t v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = v9[5];
  uint64_t v18 = v9[4];
  uint64_t v19 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = v9[7];
  uint64_t v20 = v9[6];
  uint64_t v21 = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = v9[9];
  uint64_t v22 = v9[8];
  uint64_t v23 = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  sub_9F5514((uint64_t *)(a1 + 24), &v24, 1, &v15);
}

void sub_A00204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_37D394((uint64_t *)va);
  sub_14A84(v2 - 72);
  _Unwind_Resume(a1);
}

void sub_A00220(_Unwind_Exception *a1)
{
  sub_14A84(v1 - 72);
  _Unwind_Resume(a1);
}

void sub_A00234(_Unwind_Exception *a1)
{
  sub_49DA2C(v1);
  _Unwind_Resume(a1);
}

void sub_A00248(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 33) < 0) {
    operator delete(*(void **)(v1 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_A00268(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_725D0((uint64_t)v66);
  if (sub_C0A610(a2))
  {
    *(void *)(a1 + 4320) = 0;
    *(_OWORD *)(a1 + 4304) = 0u;
    *(_OWORD *)(a1 + 4288) = 0u;
    *(_OWORD *)(a1 + 4272) = 0u;
    *(_OWORD *)(a1 + 4256) = 0u;
    *(_OWORD *)(a1 + 4240) = 0u;
    *(_OWORD *)(a1 + 4224) = 0u;
    sub_C25924(a1 + 3920);
    if (*(unsigned char *)a1) {
      unsigned __int8 v6 = *(unsigned char *)(a2 + 36);
    }
    else {
      unsigned __int8 v6 = 0;
    }
    sub_C259A4(a1 + 3920, v6);
    sub_A00F3C(a1, a2, (uint64_t)v61);
    sub_A0103C(a1, (uint64_t *)a2, (uint64_t)&__p);
    if ((sub_C13AEC((void *)(a1 + 24), (unsigned int *)&__p, 0) & 1) == 0)
    {
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v62);
        sub_188FC78(&v62, (uint64_t)"Inconsistent spa response generated from journey updater request; failing response.",
          83);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v42, 3u);
        if (SHIBYTE(v43) < 0) {
          operator delete(v42[0]);
        }
        if (v65 < 0) {
          operator delete(v64);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      *(unsigned char *)a3 = 0;
      *(void *)(a3 + 8) = 3;
      *(void *)(a3 + 16) = &off_2439090;
      goto LABEL_74;
    }
    sub_BEE264((uint64_t)&v51, a1 + 24);
    sub_BEE280(&v51, (uint64_t *)a2);
    sub_A00CF8(a1, a2, (uint64_t)v61, (uint64_t)&__p);
    if (sub_C13AEC((void *)(a1 + 24), (unsigned int *)&__p, 0))
    {
      BOOL v7 = (void *)sub_638A44((uint64_t)&v51);
      sub_A0206C(a1, (uint64_t)&__p, v7, (uint64_t)v42);
      if (sub_C0A7F8((uint64_t *)a2, (uint64_t *)v42))
      {
        uint64_t v8 = (long long *)(a1 + 4224);
        uint64_t v10 = (int *)v42[0];
        BOOL v9 = (int *)v42[1];
        double v11 = 0.0;
        double v12 = 0.0;
        int64_t v13 = (char *)v42[1] - (char *)v42[0];
        BOOL v29 = v42[1] == v42[0];
        *(double *)(a1 + 4224) = (double)(0xD37A6F4DE9BD37A7 * (((char *)v42[1] - (char *)v42[0]) >> 3));
        if (v29)
        {
LABEL_54:
          *(double *)(a1 + 4232) = v12;
          *(double *)(a1 + 4248) = sub_72688((uint64_t)v66);
          BOOL v25 = v54;
          if (v54 != v55)
          {
            unsigned int v26 = 0;
            do
            {
              while (1)
              {
                BOOL v27 = (uint64_t *)v25[25];
LABEL_59:
                if (v27 != (uint64_t *)v25[26]) {
                  break;
                }
                v25 += 37;
                if (v25 == v55) {
                  goto LABEL_70;
                }
              }
              for (uint64_t i = *v27; ; i += 168)
              {
                if (i == v27[1])
                {
                  v27 += 9;
                  goto LABEL_59;
                }
                if (!*(_DWORD *)(i + 160))
                {
                  BOOL v29 = *(unsigned char *)(i + 16) == 1 || *(unsigned char *)(i + 28) == 1;
                  if (v29) {
                    break;
                  }
                }
              }
              ++v26;
              v25 += 37;
            }
            while (v25 != v55);
LABEL_70:
            double v11 = (double)v26;
          }
          *(double *)(a1 + 4240) = v11;
          long long v30 = *(_OWORD *)(a1 + 4240);
          long long v44 = *v8;
          long long v31 = *(_OWORD *)(a1 + 4256);
          long long v47 = *(_OWORD *)(a1 + 4272);
          long long v32 = *(_OWORD *)(a1 + 4272);
          long long v48 = *(_OWORD *)(a1 + 4288);
          long long v33 = *(_OWORD *)(a1 + 4288);
          long long v49 = *(_OWORD *)(a1 + 4304);
          long long v34 = *v8;
          long long v45 = *(_OWORD *)(a1 + 4240);
          long long v46 = *(_OWORD *)(a1 + 4256);
          *(_OWORD *)(a3 + 8) = *(_OWORD *)v42;
          long long v35 = *(_OWORD *)(a1 + 4304);
          *(_OWORD *)(a3 + 96) = v33;
          *(_OWORD *)(a3 + 112) = v35;
          *(_OWORD *)(a3 + 32) = v34;
          *(_OWORD *)(a3 + 48) = v30;
          uint64_t v50 = *(void *)(a1 + 4320);
          *(unsigned char *)a3 = 1;
          *(void *)(a3 + 24) = v43;
          *(void *)(a3 + 128) = *(void *)(a1 + 4320);
          *(_OWORD *)(a3 + 64) = v31;
          *(_OWORD *)(a3 + 80) = v32;
          goto LABEL_72;
        }
        unint64_t v14 = v13 - 184;
        if (v14 >= 0xB8)
        {
          uint64_t v20 = 0;
          uint64_t v21 = 0;
          unint64_t v22 = v14 / 0xB8 + 1;
          uint64_t v16 = &v10[46 * (v22 & 0x3FFFFFFFFFFFFFELL)];
          uint64_t v23 = v22 & 0x3FFFFFFFFFFFFFELL;
          do
          {
            if (*v10) {
              ++v20;
            }
            if (v10[46]) {
              ++v21;
            }
            v10 += 92;
            v23 -= 2;
          }
          while (v23);
          uint64_t v15 = v21 + v20;
          if (v22 == (v22 & 0x3FFFFFFFFFFFFFELL)) {
            goto LABEL_53;
          }
        }
        else
        {
          uint64_t v15 = 0;
          uint64_t v16 = v10;
        }
        do
        {
          int v24 = *v16;
          v16 += 46;
          if (v24) {
            ++v15;
          }
        }
        while (v16 != v9);
LABEL_53:
        double v12 = (double)v15;
        goto LABEL_54;
      }
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v62);
        sub_188FC78(&v62, (uint64_t)"Inconsistent response computed in journey updater; failing response.", 68);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v40, 3u);
        if (v41 < 0) {
          operator delete(v40);
        }
        if (v65 < 0) {
          operator delete(v64);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      *(unsigned char *)a3 = 0;
      *(void *)(a3 + 8) = 3;
      *(void *)(a3 + 16) = &off_2439090;
      uint64_t v17 = v42[0];
      if (v42[0])
      {
        uint64_t v18 = v42[1];
        uint64_t v19 = v42[0];
        if (v42[1] != v42[0])
        {
          do
          {
            v18 -= 23;
            sub_A00E84((uint64_t)&v43, v18);
          }
          while (v18 != v17);
          uint64_t v19 = v42[0];
        }
        v42[1] = v17;
        operator delete(v19);
      }
    }
    else
    {
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v62);
        sub_188FC78(&v62, (uint64_t)"Inconsistent spa response obtained whilst processing journey updater; failing response.",
          87);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v42, 3u);
        if (SHIBYTE(v43) < 0) {
          operator delete(v42[0]);
        }
        if (v65 < 0) {
          operator delete(v64);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      *(unsigned char *)a3 = 0;
      *(void *)(a3 + 8) = 3;
      *(void *)(a3 + 16) = &off_2439090;
    }
LABEL_72:
    sub_9F6234((uint64_t)v52, (void *)v52[2]);
    BOOL v36 = v52[0];
    v52[0] = 0;
    if (v36) {
      operator delete(v36);
    }
LABEL_74:
    if (v59)
    {
      long long v60 = v59;
      operator delete(v59);
    }
    if (v58 < 0) {
      operator delete(v57);
    }
    BOOL v37 = v54;
    if (v54)
    {
      uint64_t v38 = (uint64_t)v55;
      BOOL v39 = v54;
      if (v55 != v54)
      {
        do
        {
          v38 -= 296;
          sub_9F5E28((uint64_t)&v56, v38);
        }
        while ((void *)v38 != v37);
        BOOL v39 = v54;
      }
      BOOL v55 = v37;
      operator delete(v39);
    }
    return;
  }
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v62);
    sub_188FC78(&v62, (uint64_t)"Inconsistent request provided to journey updater; failing request.", 66);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (SHIBYTE(v55) < 0) {
      operator delete(__p);
    }
    if (v65 < 0) {
      operator delete(v64);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 1;
  *(void *)(a3 + 16) = &off_2439090;
}

void sub_A00B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a70);
  sub_A00DD8(&a16);
  sub_A00E44((uint64_t)&a33);
  sub_9F53E0((uint64_t)&a39);
  _Unwind_Resume(a1);
}

void sub_A00C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a41 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a70);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a70);
  _Unwind_Resume(a1);
}

void sub_A00CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_A00CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_A00CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

uint64_t sub_A00CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_A010A0(a1, a3, a4);
  sub_A012F8(a1, a4);
  sub_A013F8(a1, a3, a4);
  sub_A01694(a1, a4);
  sub_A01790(a1, a4);
  sub_A0188C(a1, a4);
  sub_A018F8(a1, a4);
  sub_A01A14(a1, a4);
  sub_A01A88(a1, a2, a4);
  sub_A01B0C(a1, a3, a4);
  sub_A01D70(a1, a4, v8);
  sub_A01F74(a1, a4);
  sub_A01E74(a1, a4);
  return 0;
}

void *sub_A00DD8(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    unint64_t v3 = (void *)a1[1];
    BOOL v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 23;
        sub_A00E84((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v2);
      BOOL v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_A00E44(uint64_t a1)
{
  sub_9F6234(a1 + 8, *(void **)(a1 + 24));
  uint64_t v2 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_A00E84(uint64_t a1, void *a2)
{
  unint64_t v3 = (void *)a2[18];
  if (v3)
  {
    a2[19] = v3;
    operator delete(v3);
  }
  BOOL v4 = (void *)a2[13];
  if (v4)
  {
    a2[14] = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)a2[10];
  if (v5)
  {
    a2[11] = v5;
    operator delete(v5);
  }
  unsigned __int8 v6 = (void *)a2[7];
  if (v6)
  {
    a2[8] = v6;
    operator delete(v6);
  }
  BOOL v9 = (void **)a2[4];
  double v8 = (void **)(a2 + 4);
  BOOL v7 = v9;
  if (v9)
  {
    sub_9F59BC((uint64_t)v8, v7);
    uint64_t v10 = *v8;
    operator delete(v10);
  }
}

void sub_A00F14()
{
  unk_25DF8D7 = 16641;
  word_25DF8C0 = 65;
  byte_25DF8EF = 1;
  byte_25DF8D9 = 0;
}

double sub_A00F3C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 4352;
  sub_725A0(a1 + 4352);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t __p = operator new(0x48uLL);
  long long v11 = xmmword_20B9A00;
  strcpy((char *)__p, "routing/transit/journey_planning/adapters/SpaRequestAdapter.json");
  double v8 = sub_374CDC(v7, (uint64_t)&__p, (uint64_t *)(a1 + 4376));
  sub_A1863C((uint64_t)v12, v7, a1 + 24, v8);
  sub_A18BB8((uint64_t)v12, a2, a3);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  double result = sub_72688(v6) + *(double *)(a1 + 4256);
  *(double *)(a1 + 4256) = result;
  return result;
}

void sub_A01020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A0103C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 4352;
  sub_725A0(a1 + 4352);
  sub_A1A810((void *)(a1 + 24), a2, a3);
  double result = sub_72688(v6) + *(double *)(a1 + 4256);
  *(double *)(a1 + 4256) = result;
  return result;
}

uint64_t sub_A010A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(result + 3))
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 4352;
    sub_725A0(result + 4352);
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t __p = operator new(0x50uLL);
    long long v10 = xmmword_20E86E0;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/JourneyLegAlternatives.json");
    double v8 = sub_374CDC(v7, (uint64_t)&__p, (uint64_t *)(v5 + 4376));
    double v12 = v11;
    v11[0] = off_243CC30;
    sub_B5F770((uint64_t)v13, v5 + 24, v8, (uint64_t)v11);
    if (v12 == v11)
    {
      (*(void (**)(void *))(v11[0] + 32))(v11);
      if ((SHIBYTE(v10) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      if (v12) {
        (*(void (**)(void))(*v12 + 40))();
      }
      if ((SHIBYTE(v10) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    operator delete(__p);
LABEL_6:
    sub_B5F7A0((uint64_t)v13, a2, a3);
    *(double *)(v5 + 4272) = sub_72688(v6) + *(double *)(v5 + 4272);
    double result = (uint64_t)v14;
    if (v14 == v13)
    {
      return (*(uint64_t (**)(void *))(v13[0] + 32))(v13);
    }
    else if (v14)
    {
      return (*(uint64_t (**)(void))(*v14 + 40))();
    }
  }
  return result;
}

void sub_A012B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_9F5350((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_A012CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_A012F8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 2))
  {
    uint64_t v4 = a1 + 4352;
    sub_725A0(a1 + 4352);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x58uLL);
    long long v9 = xmmword_20EB470;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/JourneyDepartureAlternatives.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4376));
    sub_B4CFFC((uint64_t)v10, a1 + 24, v6);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    sub_B4D028((uint64_t)v10, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 4280);
    *(double *)(a1 + 4280) = result;
  }
  return result;
}

void sub_A013DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A013F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 4352;
  sub_725A0(a1 + 4352);
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v14 = operator new(0x50uLL);
  long long v15 = xmmword_20B9420;
  strcpy((char *)v14, "routing/transit/journey_planning/postprocessing/JourneyCriteriaComputation.json");
  double v8 = sub_374CDC(v7, (uint64_t)&v14, (uint64_t *)(a1 + 4376));
  uint64_t v17 = v16;
  v16[0] = off_243CC30;
  int32x4_t v9 = sub_B5C6BC((uint64_t)v18, a1 + 24, v8, (uint64_t)v16);
  if (v17 == v16)
  {
    (*(void (**)(void *, int32x4_t))(v16[0] + 32))(v16, v9);
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
  if (v17) {
    (*(void (**)(__n128))(*v17 + 40))((__n128)v9);
  }
  if (SHIBYTE(v15) < 0) {
LABEL_17:
  }
    operator delete(v14);
LABEL_5:
  sub_B5C708((uint64_t)v18, a2, a3);
  *(double *)(a1 + 4288) = sub_72688(v6) + *(double *)(a1 + 4288);
  if (__p)
  {
    uint64_t v23 = __p;
    operator delete(__p);
  }
  long long v10 = (void **)v21;
  if (v21)
  {
    do
    {
      int64_t v13 = (void **)*v10;
      if (*((char *)v10 + 39) < 0) {
        operator delete(v10[2]);
      }
      operator delete(v10);
      long long v10 = v13;
    }
    while (v13);
  }
  long long v11 = v20;
  uint64_t v20 = 0;
  if (v11) {
    operator delete(v11);
  }
  uint64_t result = (uint64_t)v19;
  if (v19 == v18) {
    return (*(uint64_t (**)(void *))(v18[0] + 32))(v18);
  }
  if (v19) {
    return (*(uint64_t (**)(void))(*v19 + 40))();
  }
  return result;
}

void sub_A01654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_9FA630((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_A01668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_A01694(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 4))
  {
    uint64_t v4 = a1 + 4352;
    sub_725A0(a1 + 4352);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x58uLL);
    long long v9 = xmmword_20EB460;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/ServiceFrequencyCalculation.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4376));
    sub_B983C8((uint64_t)v10, a1 + 24, v6);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    sub_B983F4(v10, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 4296);
    *(double *)(a1 + 4296) = result;
  }
  return result;
}

void sub_A01774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A01790(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 5))
  {
    uint64_t v4 = a1 + 4352;
    sub_725A0(a1 + 4352);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x58uLL);
    long long v9 = xmmword_20EB470;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/ServiceFrequencyBoundsFilter.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4376));
    sub_BBDC50(v10, v6);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    sub_BBDC8C(v10, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 4312);
    *(double *)(a1 + 4312) = result;
  }
  return result;
}

void sub_A01870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A0188C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 6))
  {
    uint64_t v4 = a1 + 4352;
    sub_725A0(a1 + 4352);
    sub_BBE358((uint64_t)&v6, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 4312);
    *(double *)(a1 + 4312) = result;
  }
  return result;
}

void sub_A018F8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 7))
  {
    uint64_t v4 = a1 + 4352;
    sub_725A0(a1 + 4352);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x50uLL);
    long long v8 = xmmword_20B99D0;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/ServiceFrequencyRounding.json");
    char v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4376));
    sub_BA6704((char **)v9, v6);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p);
    }
    sub_BA6708((unint64_t)v9, a2);
    *(double *)(a1 + 4296) = sub_72688(v4) + *(double *)(a1 + 4296);
    if (v9[0])
    {
      v9[1] = v9[0];
      operator delete(v9[0]);
    }
  }
}

void sub_A019E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A01A14(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v4 = a1 + 4352;
    sub_725A0(a1 + 4352);
    nullsub_1(&v6);
    sub_BB09E0((uint64_t)&v6, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 4312);
    *(double *)(a1 + 4312) = result;
  }
  return result;
}

double sub_A01A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 1)) {
    BOOL v3 = *(_DWORD *)(a2 + 32) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v6 = a1 + 4352;
    sub_725A0(a1 + 4352);
    sub_497CC0(&v8, a1 + 24);
    sub_B72140(&v8, a3);
    double result = sub_72688(v6) + *(double *)(a1 + 4264);
    *(double *)(a1 + 4264) = result;
  }
  return result;
}

uint64_t sub_A01B0C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(result + 9))
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 4352;
    sub_725A0(result + 4352);
    uint64_t v7 = *(void *)(v5 + 16);
    uint64_t __p = operator new(0x58uLL);
    long long v10 = xmmword_20EB430;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/UpcomingJourneyLegAlternatives.json");
    uint64_t v8 = sub_374CDC(v7, (uint64_t)&__p, (uint64_t *)(v5 + 4376));
    double v12 = v11;
    v11[0] = off_243CC30;
    sub_B5F770((uint64_t)v13, v5 + 24, v8, (uint64_t)v11);
    if (v12 == v11)
    {
      (*(void (**)(void *))(v11[0] + 32))(v11);
      if ((SHIBYTE(v10) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    else
    {
      if (v12) {
        (*(void (**)(void))(*v12 + 40))();
      }
      if ((SHIBYTE(v10) & 0x80000000) == 0) {
        goto LABEL_6;
      }
    }
    operator delete(__p);
LABEL_6:
    sub_B5F7A0((uint64_t)v13, a2, a3);
    *(double *)(v5 + 4272) = sub_72688(v6) + *(double *)(v5 + 4272);
    double result = (uint64_t)v14;
    if (v14 == v13)
    {
      return (*(uint64_t (**)(void *))(v13[0] + 32))(v13);
    }
    else if (v14)
    {
      return (*(uint64_t (**)(void))(*v14 + 40))();
    }
  }
  return result;
}

void sub_A01D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_9F5350((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_A01D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_A01D70(uint64_t a1, uint64_t a2, double result)
{
  if (*(unsigned char *)(a1 + 10))
  {
    uint64_t v5 = a1 + 4352;
    sub_725A0(a1 + 4352);
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x68uLL);
    long long v10 = xmmword_20EB440;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/UpcomingJourneyLegAlternativesDominationFilter.json");
    uint64_t v7 = sub_374CDC(v6, (uint64_t)&__p, (uint64_t *)(a1 + 4376));
    sub_BB2364((uint64_t)v11, v7);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p);
    }
    sub_BB2368((uint64_t)v11, a2, v8);
    double result = sub_72688(v5) + *(double *)(a1 + 4312);
    *(double *)(a1 + 4312) = result;
  }
  return result;
}

void sub_A01E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A01E74(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 11))
  {
    uint64_t v4 = a1 + 4352;
    sub_725A0(a1 + 4352);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x60uLL);
    long long v9 = xmmword_20EB450;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/UpcomingJourneyLegAlternativesBoundsFilter.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4376));
    sub_BB19A0(v10, v6);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    sub_BB19F0(v10, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 4312);
    *(double *)(a1 + 4312) = result;
  }
  return result;
}

void sub_A01F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A01F74(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 12))
  {
    uint64_t v4 = a1 + 4352;
    sub_725A0(a1 + 4352);
    uint64_t v5 = *(void *)(a1 + 16);
    uint64_t __p = operator new(0x50uLL);
    long long v9 = xmmword_20B99D0;
    strcpy((char *)__p, "routing/transit/journey_planning/postprocessing/ServiceStatusCalculation.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4376));
    sub_BA863C((uint64_t)v10, v6);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    sub_BA8640((uint64_t)v10, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 4304);
    *(double *)(a1 + 4304) = result;
  }
  return result;
}

void sub_A02050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A0206C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1 + 4352;
  sub_725A0(a1 + 4352);
  sub_A0A4AC(a1 + 24, a2, a3, a4);
  double result = sub_72688(v8) + *(double *)(a1 + 4320);
  *(double *)(a1 + 4320) = result;
  return result;
}

void sub_A020E0()
{
  unk_25DF907 = 16641;
  word_25DF8F0 = 65;
  byte_25DF91F = 1;
  byte_25DF909 = 0;
}

void sub_A02108(uint64_t a1, void *a2, void *a3)
{
  HIBYTE(v24[2]) = 21;
  strcpy((char *)v24, "enable_coverage_check");
  BOOL v5 = sub_29D62C(a3, (uint64_t)v24);
  if (SHIBYTE(v24[2]) < 0) {
    operator delete(v24[0]);
  }
  *(unsigned char *)a1 = v5;
  *(void *)(a1 + 8) = a2;
  uint64_t v6 = (void *)sub_374CE4(a2);
  uint64_t v7 = v6[1];
  *(void *)&long long v23 = *v6;
  *((void *)&v23 + 1) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (void *)sub_374DF4(*(void *)(a1 + 8));
  uint64_t v9 = v8[1];
  *(void *)&long long v14 = *v8;
  *((void *)&v14 + 1) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = v8[3];
  uint64_t v15 = v8[2];
  uint64_t v16 = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = v8[5];
  uint64_t v17 = v8[4];
  uint64_t v18 = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = v8[7];
  uint64_t v19 = v8[6];
  uint64_t v20 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = v8[9];
  uint64_t v21 = v8[8];
  uint64_t v22 = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  sub_9F5514((uint64_t *)(a1 + 16), &v23, 1, &v14);
}

void sub_A022DC(_Unwind_Exception *a1)
{
  sub_49DA2C(v1);
  _Unwind_Resume(a1);
}

void sub_A022F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_A0230C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A02320(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 41) < 0) {
    operator delete(*(void **)(v1 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_A02340(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_725D0((uint64_t)v26);
  if (sub_C0C334(a2))
  {
    sub_C25994(a1 + 3912, *(unsigned char *)(a2 + 5));
    char v6 = sub_375C30(*(void *)(a1 + 8));
    sub_5F3038((unsigned char *)(a1 + 3912), v6);
    *(_OWORD *)uint64_t v18 = 0u;
    memset(v19, 0, 56);
    uint64_t v7 = *(uint64_t **)(a2 + 1584);
    for (uint64_t i = *(uint64_t **)(a2 + 1592); v7 != i; v7 += 48)
    {
      sub_A028A8(a1, v7, (uint64_t)&v20);
      uint64_t v9 = (char *)v18[1];
      if (v18[1] >= (void *)*(void *)&v19[0].f64[0])
      {
        v18[1] = sub_A02D2C(v18, (uint64_t)&v20);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)v18[1] = v20;
        *((void *)v9 + 2) = 0;
        *((void *)v9 + 3) = 0;
        *((void *)v9 + 1) = 0;
        *(_OWORD *)(v9 + 8) = *(_OWORD *)__p;
        *((void *)v9 + 3) = v22;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v22 = 0;
        v9[32] = v23;
        v18[1] = v9 + 40;
      }
      sub_C4E874((float64x2_t *)&v19[0].f64[1], (float64x2_t *)(a1 + 4216));
      v19[1].f64[0] = v19[1].f64[0] + 1.0;
    }
    if (sub_C0C604(a2, v18))
    {
      v19[2].f64[0] = sub_72688((uint64_t)v26);
      *(unsigned char *)a3 = 1;
      *(_OWORD *)(a3 + 8) = *(_OWORD *)v18;
      *(float64_t *)(a3 + 24) = v19[0].f64[0];
      long long v10 = *(long long *)((char *)&v19[2] + 8);
      long long v11 = *(long long *)((char *)&v19[1] + 8);
      *(float64x2_t *)(a3 + 32) = *(float64x2_t *)((char *)v19 + 8);
      *(_OWORD *)(a3 + 48) = v11;
      *(_OWORD *)(a3 + 64) = v10;
    }
    else
    {
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v20);
        sub_188FC78(&v20, (uint64_t)"Inconsistent response computed whilst processing payment method lookup; failing solution.",
          89);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v16, 3u);
        if (v17 < 0) {
          operator delete(v16);
        }
        if (v25 < 0) {
          operator delete(v24);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      *(unsigned char *)a3 = 0;
      *(void *)(a3 + 8) = 3;
      *(void *)(a3 + 16) = &off_2439090;
      uint64_t v12 = (char *)v18[0];
      if (v18[0])
      {
        uint64_t v13 = (char *)v18[1];
        long long v14 = v18[0];
        if (v18[1] != v18[0])
        {
          do
          {
            uint64_t v15 = (void *)*((void *)v13 - 4);
            if (v15)
            {
              *((void *)v13 - 3) = v15;
              operator delete(v15);
            }
            v13 -= 40;
          }
          while (v13 != v12);
          long long v14 = v18[0];
        }
        v18[1] = v12;
        operator delete(v14);
      }
    }
  }
  else
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v20);
      sub_188FC78(&v20, (uint64_t)"Inconsistent request provided to payment method lookup module; failing request.",
        79);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v18, 3u);
      if (SHIBYTE(v19[0].f64[0]) < 0) {
        operator delete(v18[0]);
      }
      if (v25 < 0) {
        operator delete(v24);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = 1;
    *(void *)(a3 + 16) = &off_2439090;
  }
}

void sub_A027CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a26);
    sub_3EE4A4(&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a26);
  sub_3EE4A4(&a16);
  _Unwind_Resume(a1);
}

void sub_A02818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *a27,uint64_t a28)
{
}

void sub_A028A8(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a1 + 4232) = 0u;
  *(_OWORD *)(a1 + 4248) = 0u;
  *(_OWORD *)(a1 + 4216) = 0u;
  if (sub_C0C174((uint64_t)a2))
  {
    sub_A02EE4(a1, a2, (uint64_t)&__p);
    BOOL v16 = sub_A02FF4(a1, (uint64_t)a2) == 0;
    *(double *)(a1 + 4232) = *(double *)(a1 + 4232) + (double)(unint64_t)((v15 - v14) >> 3);
    if (sub_65BD8())
    {
      int v6 = (int)__p;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)a3 = v6;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = v14;
      int64_t v8 = v15 - v14;
      if (v15 != v14)
      {
        if (v8 < 0) {
          sub_2E00();
        }
        uint64_t v9 = (char *)operator new(v15 - v14);
        *(void *)(a3 + 8) = v9;
        *(void *)(a3 + 16) = v9;
        long long v10 = &v9[8 * (v8 >> 3)];
        *(void *)(a3 + 24) = v10;
        memcpy(v9, v7, v8);
        *(void *)(a3 + 16) = v10;
      }
      *(unsigned char *)(a3 + 32) = v16;
      if (v7)
      {
LABEL_7:
        uint64_t v15 = v7;
        operator delete(v7);
      }
    }
    else
    {
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v17);
        sub_188FC78(&v17, (uint64_t)"Inconsistent solution computed whilst processing payment method lookup; failing solution.",
          89);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v11, 3u);
        if (v12 < 0) {
          operator delete(v11);
        }
        if (v20 < 0) {
          operator delete(v19);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      sub_CD90D0(3, a3);
      uint64_t v7 = v14;
      if (v14) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v17);
      sub_188FC78(&v17, (uint64_t)"Inconsistent nearby payment method lookup parameters provided to payment method lookup module; failing solution.",
        112);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (SHIBYTE(v15) < 0) {
        operator delete(__p);
      }
      if (v20 < 0) {
        operator delete(v19);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    sub_CD90D0(1, a3);
  }
}

void sub_A02C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a21);
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

char *sub_A02D2C(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x333333333333333) {
    unint64_t v5 = 0x666666666666666;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x666666666666666) {
    sub_188D718();
  }
  uint64_t v7 = 40 * v5;
  int64_t v8 = (char *)operator new(40 * v5);
  uint64_t v9 = &v8[40 * v3];
  long long v10 = &v8[v7];
  *(_DWORD *)uint64_t v9 = *(_DWORD *)a2;
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v9 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  v9[32] = *(unsigned char *)(a2 + 32);
  long long v11 = v9 + 40;
  char v12 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v13) {
      return v11;
    }
    goto LABEL_18;
  }
  uint64_t v14 = 0;
  do
  {
    uint64_t v15 = &v9[v14];
    BOOL v16 = &v13[v14];
    *((_DWORD *)v15 - 10) = *(_DWORD *)&v13[v14 - 40];
    *((_OWORD *)v15 - 2) = *(_OWORD *)&v13[v14 - 32];
    *((void *)v15 - 2) = *(void *)&v13[v14 - 16];
    *((void *)v16 - 4) = 0;
    *((void *)v16 - 3) = 0;
    *((void *)v16 - 2) = 0;
    *(v15 - 8) = v13[v14 - 8];
    v14 -= 40;
  }
  while (&v13[v14] != v12);
  uint64_t v17 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  *a1 = &v9[v14];
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v17)
  {
    do
    {
      uint64_t v18 = (void *)*((void *)v13 - 4);
      if (v18)
      {
        *((void *)v13 - 3) = v18;
        operator delete(v18);
      }
      v13 -= 40;
    }
    while (v13 != v17);
    uint64_t v13 = v17;
  }
  if (v13) {
LABEL_18:
  }
    operator delete(v13);
  return v11;
}

void sub_A02EBC()
{
  unk_25DF937 = 16641;
  word_25DF920 = 65;
  byte_25DF94F = 1;
  byte_25DF939 = 0;
}

double sub_A02EE4@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 4264;
  sub_725A0(a1 + 4264);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t __p = operator new(0x58uLL);
  long long v10 = xmmword_20E21D0;
  strcpy((char *)__p, "routing/transit/payment_method_lookup/algorithms/PaymentMethodLookupAlgorithm.json");
  sub_374CDC(v7, (uint64_t)&__p, (uint64_t *)(a1 + 4288));
  sub_B36698((uint64_t)v11, v7, a1 + 16);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p);
  }
  sub_B366A0(a2, a3);
  double result = sub_72688(v6) + *(double *)(a1 + 4256);
  *(double *)(a1 + 4256) = result;
  return result;
}

void sub_A02FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A02FF4(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)a1) {
    return 0;
  }
  uint64_t v4 = a1 + 4264;
  sub_725A0(a1 + 4264);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t __p = operator new(0x48uLL);
  long long v12 = xmmword_20EB650;
  strcpy((char *)__p, "routing/transit/payment_method_lookup/postprocessing/CoverageCheck.json");
  uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4288));
  sub_BBFF04(v10, v5, a1 + 16, v6);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  int v19 = -1;
  sub_48381C((uint64_t)&__p, a2);
  int v19 = 2;
  uint64_t v7 = sub_BC00EC(v10, (uint64_t)&__p);
  switch(v19)
  {
    case 2:
      sub_402C7C((uint64_t)&__p);
      break;
    case 1:
      sub_8EB894((uint64_t)&__p);
      break;
    case 0:
      if (v17)
      {
        uint64_t v18 = v17;
        operator delete(v17);
      }
      if (v15)
      {
        BOOL v16 = v15;
        operator delete(v15);
      }
      if (v13)
      {
        uint64_t v14 = v13;
        operator delete(v13);
      }
      break;
  }
  *(double *)(a1 + 4248) = sub_72688(v4) + *(double *)(a1 + 4248);
  double v8 = 0.0;
  if (v7 == 18) {
    double v8 = 1.0;
  }
  *(double *)(a1 + 4216) = *(double *)(a1 + 4216) + v8;
  return v7;
}

void sub_A031B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_8EAFE0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A031C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2) {
    sub_58CC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_A031F4()
{
  unk_25DF967 = 16641;
  word_25DF950 = 65;
  byte_25DF97F = 1;
  byte_25DF969 = 0;
}

BOOL *sub_A0321C(BOOL *a1, void *a2)
{
  v36[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v36[1] = xmmword_20B8E90;
  strcpy(v36[0], "enable_schedule_lookup_requests");
  BOOL v4 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  *a1 = v4;
  v36[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v36[1] = xmmword_20E12D0;
  strcpy(v36[0], "enable_nearby_schedule_lookup_requests");
  BOOL v5 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[1] = v5;
  HIBYTE(v36[2]) = 21;
  strcpy((char *)v36, "enable_coverage_check");
  BOOL v6 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[2] = v6;
  v36[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v36[1] = xmmword_20B9280;
  strcpy(v36[0], "enable_blocking_incidents_handling");
  BOOL v7 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[3] = v7;
  v36[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v36[1] = xmmword_20B8890;
  strcpy(v36[0], "enable_realtime_data_handling");
  BOOL v8 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[4] = v8;
  v36[0] = (char *)operator new(0x48uLL);
  *(_OWORD *)&v36[1] = xmmword_20E8240;
  strcpy(v36[0], "enable_regular_journey_leg_alternatives_trip_deduplication_filter");
  BOOL v9 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[5] = v9;
  v36[0] = (char *)operator new(0x48uLL);
  *(_OWORD *)&v36[1] = xmmword_20B9AA0;
  strcpy(v36[0], "enable_upcoming_journey_leg_alternatives_trip_deduplication_filter");
  BOOL v10 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[6] = v10;
  v36[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v36[1] = xmmword_20B93C0;
  strcpy(v36[0], "enable_journey_leg_alternatives_grouping");
  BOOL v11 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[7] = v11;
  v36[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v36[1] = xmmword_20B99E0;
  strcpy(v36[0], "enable_regular_journey_leg_alternatives_excess_filter");
  BOOL v12 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[8] = v12;
  v36[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v36[1] = xmmword_20B8DF0;
  strcpy(v36[0], "enable_upcoming_journey_leg_alternatives_excess_filter");
  BOOL v13 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[9] = v13;
  v36[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v36[1] = xmmword_20B99E0;
  strcpy(v36[0], "enable_regular_journey_leg_alternatives_bounds_filter");
  BOOL v14 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[10] = v14;
  v36[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v36[1] = xmmword_20B8DF0;
  strcpy(v36[0], "enable_upcoming_journey_leg_alternatives_bounds_filter");
  BOOL v15 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[11] = v15;
  v36[0] = (char *)operator new(0x50uLL);
  *(_OWORD *)&v36[1] = xmmword_20E86E0;
  strcpy(v36[0], "enable_regular_journey_leg_alternatives_frequency_trip_deduplication_filter");
  BOOL v16 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[12] = v16;
  v36[0] = (char *)operator new(0x50uLL);
  *(_OWORD *)&v36[1] = xmmword_20B9A50;
  strcpy(v36[0], "enable_upcoming_journey_leg_alternatives_frequency_trip_deduplication_filter");
  BOOL v17 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[13] = v17;
  v36[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v36[1] = xmmword_20E12D0;
  strcpy(v36[0], "enable_service_frequency_bounds_filter");
  BOOL v18 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[14] = v18;
  v36[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v36[1] = xmmword_20B91B0;
  strcpy(v36[0], "enable_empty_schedule_filter");
  BOOL v19 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[15] = v19;
  v36[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v36[1] = xmmword_20B8FD0;
  strcpy(v36[0], "enable_service_frequency_calculation");
  BOOL v20 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[16] = v20;
  v36[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v36[1] = xmmword_20B9260;
  strcpy(v36[0], "enable_service_frequency_rounding");
  BOOL v21 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[17] = v21;
  v36[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v36[1] = xmmword_20B9960;
  strcpy(v36[0], "enable_invalid_service_frequency_filter");
  BOOL v22 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[18] = v22;
  v36[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v36[1] = xmmword_20B9260;
  strcpy(v36[0], "enable_service_status_calculation");
  BOOL v23 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[19] = v23;
  v36[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v36[1] = xmmword_20B91C0;
  strcpy(v36[0], "enable_schedule_grouping");
  BOOL v24 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[20] = v24;
  v36[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v36[1] = xmmword_20B91B0;
  strcpy(v36[0], "enable_schedule_cell_merging");
  BOOL v25 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[21] = v25;
  v36[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v36[1] = xmmword_20B9390;
  strcpy(v36[0], "enable_schedule_group_domination");
  BOOL v26 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[22] = v26;
  v36[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v36[1] = xmmword_20E12D0;
  strcpy(v36[0], "enable_single_schedule_category_filter");
  BOOL v27 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[23] = v27;
  v36[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v36[1] = xmmword_20B93A0;
  strcpy(v36[0], "enable_unassociated_schedule_filter");
  BOOL v28 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[24] = v28;
  v36[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v36[1] = xmmword_20B93C0;
  strcpy(v36[0], "enable_journey_leg_alternative_selection");
  BOOL v29 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[25] = v29;
  v36[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v36[1] = xmmword_20B9960;
  strcpy(v36[0], "enable_criteria_computation_and_scoring");
  BOOL v30 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[26] = v30;
  v36[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v36[1] = xmmword_20B91C0;
  strcpy(v36[0], "enable_schedule_ordering");
  BOOL v31 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[27] = v31;
  v36[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v36[1] = xmmword_20B9280;
  strcpy(v36[0], "enable_operating_hours_calculation");
  BOOL v32 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[28] = v32;
  v36[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v36[1] = xmmword_20B93B0;
  strcpy(v36[0], "enable_blocking_incidents_request_time_filter");
  BOOL v33 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[29] = v33;
  HIBYTE(v36[2]) = 17;
  strcpy((char *)v36, "enable_debug_info");
  BOOL v34 = sub_29D62C(a2, (uint64_t)v36);
  if (SHIBYTE(v36[2]) < 0) {
    operator delete(v36[0]);
  }
  a1[30] = v34;
  return a1;
}

void sub_A03D08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 41) < 0) {
    operator delete(*(void **)(v1 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_A03D9C(uint64_t a1, void *a2, void *a3)
{
  *((void *)sub_A0321C((BOOL *)a1, a3) + 4) = a2;
  BOOL v5 = (void *)sub_374CE4(a2);
  uint64_t v6 = v5[1];
  *(void *)&long long v22 = *v5;
  *((void *)&v22 + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v7 = (void *)sub_374DF4(*(void *)(a1 + 32));
  uint64_t v8 = v7[1];
  *(void *)&long long v13 = *v7;
  *((void *)&v13 + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = v7[3];
  uint64_t v14 = v7[2];
  uint64_t v15 = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = v7[5];
  uint64_t v16 = v7[4];
  uint64_t v17 = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = v7[7];
  uint64_t v18 = v7[6];
  uint64_t v19 = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = v7[9];
  uint64_t v20 = v7[8];
  uint64_t v21 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  sub_9F5514((uint64_t *)(a1 + 40), &v22, 1, &v13);
}

void sub_A03F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_37D394(&a9);
  sub_14A84(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_A03F48(_Unwind_Exception *a1)
{
  sub_14A84(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_A03F5C(_Unwind_Exception *a1)
{
  sub_49DA2C(v1);
  _Unwind_Resume(a1);
}

void sub_A03F74(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_725D0((uint64_t)v39);
  if (sub_C0FFBC(a2))
  {
    uint64_t v18 = a3;
    v36[0] = 0;
    v36[1] = 0;
    BOOL v37 = 0;
    sub_C4EBAC(v38);
    uint64_t v6 = *(unsigned int **)(a2 + 1584);
    for (uint64_t i = *(unsigned int **)(a2 + 1592); v6 != i; v6 += 96)
    {
      sub_A045AC(a1, a2, v6, (uint64_t)&__p);
      uint64_t v8 = (char *)v36[1];
      if (v36[1] >= v37)
      {
        uint64_t v14 = (void *)sub_A05E74((uint64_t *)v36, (uint64_t)&__p);
      }
      else
      {
        *(void *)v36[1] = __p;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 3) = 0;
        *((void *)v8 + 4) = 0;
        *((void *)v8 + 2) = 0;
        *(_OWORD *)(v8 + 8) = v22;
        *((void *)v8 + 3) = v23;
        long long v22 = 0uLL;
        uint64_t v23 = 0;
        *((void *)v8 + 5) = 0;
        *((void *)v8 + 6) = 0;
        *((_OWORD *)v8 + 2) = v24;
        *((void *)v8 + 6) = v25;
        *((void *)v8 + 7) = 0;
        long long v24 = 0uLL;
        uint64_t v25 = 0;
        *((void *)v8 + 8) = 0;
        *((void *)v8 + 9) = 0;
        *(_OWORD *)(v8 + 56) = v26;
        long long v26 = 0uLL;
        *((void *)v8 + 9) = v27;
        *((void *)v8 + 10) = 0;
        BOOL v27 = 0;
        *((void *)v8 + 11) = 0;
        *((void *)v8 + 12) = 0;
        *((_OWORD *)v8 + 5) = v28;
        *((void *)v8 + 12) = v29;
        long long v28 = 0uLL;
        uint64_t v29 = 0;
        *((_DWORD *)v8 + 26) = v30;
        uint64_t v9 = v31;
        uint64_t v31 = 0;
        *((void *)v8 + 14) = v9;
        *((void *)v8 + 15) = v32;
        uint64_t v32 = 0;
        uint64_t v10 = v33;
        *((void *)v8 + 16) = v33;
        uint64_t v11 = v34;
        *((void *)v8 + 17) = v34;
        *((_DWORD *)v8 + 36) = v35;
        if (v11)
        {
          unint64_t v12 = *(void *)(v10 + 8);
          unint64_t v13 = *((void *)v8 + 15);
          if ((v13 & (v13 - 1)) != 0)
          {
            if (v12 >= v13) {
              v12 %= v13;
            }
          }
          else
          {
            v12 &= v13 - 1;
          }
          *(void *)(v9 + 8 * v12) = v8 + 128;
          uint64_t v33 = 0;
          uint64_t v34 = 0;
        }
        uint64_t v14 = v8 + 152;
      }
      v36[1] = v14;
      sub_A05730(&__p);
      *(void *)(a1 + 4272) = 0x3FF0000000000000;
      sub_C4EC28(v38, (float64x2_t *)(a1 + 4240));
    }
    if (sub_C12310(a2, v36))
    {
      v38[6].f64[1] = sub_72688((uint64_t)v39);
      *(unsigned char *)uint64_t v18 = 1;
      *(_OWORD *)(v18 + 8) = *(_OWORD *)v36;
      *(void *)(v18 + 24) = v37;
      memcpy((void *)(v18 + 32), v38, 0x220uLL);
    }
    else
    {
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&__p);
        sub_188FC78(&__p, (uint64_t)"Inconsistent response computed whilst processing schedule lookup; failing solution.",
          83);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&v19, 3u);
        if (v20 < 0) {
          operator delete(v19);
        }
        if (SHIBYTE(v28) < 0) {
          operator delete(v27);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      *(unsigned char *)uint64_t v18 = 0;
      *(void *)(v18 + 8) = 3;
      *(void *)(v18 + 16) = &off_2439090;
      uint64_t v15 = v36[0];
      if (v36[0])
      {
        uint64_t v16 = v36[1];
        uint64_t v17 = v36[0];
        if (v36[1] != v36[0])
        {
          do
            uint64_t v16 = sub_A05730(v16 - 19);
          while (v16 != v15);
          uint64_t v17 = v36[0];
        }
        v36[1] = v15;
        operator delete(v17);
      }
    }
  }
  else
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v36);
      sub_188FC78(v36, (uint64_t)"Inconsistent request provided to schedule lookup module; failing request.", 73);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (SHIBYTE(v22) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v38[4].f64[0]) < 0) {
        operator delete(*(void **)&v38[3].f64[0]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 8) = 1;
    *(void *)(a3 + 16) = &off_2439090;
  }
}

void sub_A0448C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  if (a16 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a17);
    sub_A050F8(&a50);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a17);
  sub_A050F8(&a50);
  _Unwind_Resume(a1);
}

void sub_A044D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
}

void sub_A044EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a50);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void sub_A04538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a47) {
    sub_20ADE40();
  }
  _Unwind_Resume(exception_object);
}

void sub_A04554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
}

void sub_A04568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
}

void sub_A04584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
}

void sub_A04598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
}

void sub_A045AC(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  sub_C4EBAC(__src);
  memcpy((void *)(a1 + 4240), __src, 0x220uLL);
  unsigned int v8 = a3[94];
  if (v8 >= 2)
  {
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)__src);
      sub_188FC78(__src, (uint64_t)"Unknown type of place request parameters provided; skipping solution in schedule lookup module.",
        95);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 2u);
      if (SHIBYTE(v26) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(__src[5]) < 0) {
        operator delete(*((void **)&__src[4] + 1));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    sub_CDA6B0(1, a4);
    return;
  }
  if (v8 != 1)
  {
    if (*(unsigned char *)a1) {
      goto LABEL_4;
    }
LABEL_21:
    if (sub_723EC(2u))
    {
      sub_6BAC((uint64_t)__src);
      sub_188FC78(__src, (uint64_t)"Request disabled in schedule lookup configuration; skipping solution in schedule lookup module.",
        95);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 2u);
      if (SHIBYTE(v26) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(__src[5]) < 0) {
        operator delete(*((void **)&__src[4] + 1));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    goto LABEL_27;
  }
  if (!*(unsigned char *)(a1 + 1)) {
    goto LABEL_21;
  }
LABEL_4:
  sub_C12590(__src, *(void **)(a1 + 32));
  if ((sub_C125E0((void **)__src, (uint64_t)a3) & 1) == 0)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__src);
      sub_188FC78(__src, (uint64_t)"Place request parameters do not conform to partial data requirements; failing solution.",
        87);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (SHIBYTE(v26) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(__src[5]) < 0) {
        operator delete(*((void **)&__src[4] + 1));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
LABEL_27:
    sub_CDA6B0(16, a4);
    return;
  }
  if (*(unsigned char *)(a2 + 20))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x40uLL);
    long long v26 = xmmword_20B9A30;
    strcpy((char *)__p, "routing/transit/schedule_lookup/ScheduleLookupWalking.json");
    uint64_t v10 = sub_374CDC(v9, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_BF2278((uint64_t)__src, v9, a1 + 40, v10);
    if (SHIBYTE(v26) < 0) {
      operator delete(__p);
    }
    sub_BF227C((uint64_t)__src, (uint64_t)a3);
    uint64_t v11 = sub_BF2EEC((uint64_t)__src);
    sub_C556D0(a1 + 4512, v11);
    *(double *)(a1 + 4336) = *(double *)(a1 + 4336) + (double)(unint64_t)sub_BF2EFC((uint64_t)__src);
    *(double *)(a1 + 4240) = *(double *)(a1 + 4240) + (double)!sub_BF2D94((uint64_t)a3);
    *(double *)(a1 + 4248) = *(double *)(a1 + 4248) + (double)sub_BF2DC0((uint64_t)a3);
    sub_A0646C(a1, a2, a3, (uint64_t)v27);
    if (!sub_C17B7C((uint64_t)v27))
    {
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&__p);
        sub_188FC78(&__p, (uint64_t)"Inconsistent spa request provided to schedule lookup module; failing solution.",
          78);
        std::stringbuf::str();
        sub_7246C((uint64_t *)v20, 3u);
        if (v21 < 0) {
          operator delete(v20[0]);
        }
        sub_111ECAC((uint64_t)&__p);
      }
      sub_CDA6B0(1, a4);
      goto LABEL_59;
    }
    sub_C25994(a1 + 3936, v34);
    char v12 = sub_375C30(*(void *)(a1 + 32));
    sub_5F3038((unsigned char *)(a1 + 3936), v12);
    if (v35)
    {
      if (v35 != 1)
      {
        int v13 = 0;
LABEL_49:
        sub_C259A4(a1 + 3936, v13);
        int v14 = sub_A06568(a1, (uint64_t)a3);
        if (v14)
        {
          sub_CDA6B0(v14, a4);
        }
        else
        {
          uint64_t v15 = sub_BED890((uint64_t)__src);
          sub_A05154((double *)a1, v15, v27, (unint64_t *)v24);
          sub_BF2770((uint64_t)__src, (uint64_t)a3, (uint64_t)v24);
          uint64_t v16 = sub_BF2EF4((uint64_t)__src);
          sub_C556D0(a1 + 4648, v16);
          sub_BF2E88((uint64_t)__src);
          *(double *)(a1 + 4496) = sub_BF2F04((uint64_t)__src) + *(double *)(a1 + 4496);
          uint64_t v17 = (void *)sub_BF2EE4((uint64_t)__src);
          sub_A08438(a1, v27, v24, v17, (uint64_t)v20);
          if (sub_C10400((uint64_t)v20))
          {
            *(double *)(a1 + 4328) = *(double *)(a1 + 4328) + (double)(unint64_t)((v23 - v22) >> 3);
            sub_A058D0(a4, (uint64_t)v20);
          }
          else
          {
            if (sub_723EC(3u))
            {
              sub_6BAC((uint64_t)&__p);
              sub_188FC78(&__p, (uint64_t)"Inconsistent solution computed whilst processing schedule lookup; failing solution.",
                83);
              std::stringbuf::str();
              sub_7246C((uint64_t *)&v18, 3u);
              if (v19 < 0) {
                operator delete(v18);
              }
              sub_111ECAC((uint64_t)&__p);
            }
            sub_CDA6B0(3, a4);
          }
          sub_A05730(v20);
          sub_A05A3C(v24);
        }
LABEL_59:
        if (v36)
        {
          BOOL v37 = v36;
          operator delete(v36);
        }
        if (v32)
        {
          uint64_t v33 = v32;
          operator delete(v32);
        }
        if (v30)
        {
          uint64_t v31 = v30;
          operator delete(v30);
        }
        if (v28)
        {
          uint64_t v29 = v28;
          operator delete(v28);
        }
        sub_A05C78((uint64_t)__src);
        return;
      }
      if (*(unsigned char *)(a1 + 4))
      {
        int v13 = 2;
        goto LABEL_49;
      }
    }
    int v13 = *(unsigned __int8 *)(a1 + 3);
    goto LABEL_49;
  }
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)__src);
    sub_188FC78(__src, (uint64_t)"Schedule component not requested; skipping solution in schedule lookup module.", 78);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (SHIBYTE(v26) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(__src[5]) < 0) {
      operator delete(*((void **)&__src[4] + 1));
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  sub_CDA6B0(0, a4);
}

void sub_A04F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a50);
  sub_A05730(&a16);
  sub_A05A3C(&a35);
  sub_A056CC(&STACK[0x238]);
  sub_A05C78((uint64_t)&STACK[0x2D8]);
  _Unwind_Resume(a1);
}

void sub_A05014(_Unwind_Exception *a1)
{
}

void sub_A05028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_A05048(_Unwind_Exception *a1)
{
}

void sub_A0505C(_Unwind_Exception *a1)
{
}

void sub_A05070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&STACK[0x2D8]);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&STACK[0x2D8]);
  _Unwind_Resume(a1);
}

void sub_A05094(_Unwind_Exception *a1)
{
}

void sub_A050D8(_Unwind_Exception *a1)
{
}

void **sub_A050F8(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unint64_t v3 = a1[1];
    BOOL v4 = v2;
    if (v3 != v2)
    {
      do
        unint64_t v3 = sub_A05730(v3 - 19);
      while (v3 != v2);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

double sub_A05154@<D0>(double *a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, unint64_t *a4@<X8>)
{
  sub_A066B0((uint64_t)a1, (uint64_t)a3, (uint64_t)a4);
  sub_A067B4((uint64_t)a1, (uint64_t)a4);
  sub_A068B8((uint64_t)a1, (uint64_t)a4);
  sub_A069BC((uint64_t)a1, (uint64_t)a3, (uint64_t)a4);
  sub_A06A3C((uint64_t)a1, a3, (uint64_t)a4);
  sub_A06B50((uint64_t)a1, a3, (uint64_t)a4);
  sub_A07530((uint64_t)a1, a3, (uint64_t)a4);
  sub_A070A0((uint64_t)a1, (uint64_t)a4);
  sub_A0719C((uint64_t)a1, (uint64_t)a4);
  sub_A072B8((uint64_t)a1, a3, (uint64_t)a4);
  sub_A073C4((uint64_t)a1, (uint64_t)a4);
  sub_A06C64((uint64_t)a1, a3, (uint64_t)a4);
  sub_A06D78((uint64_t)a1, a3, (uint64_t)a4);
  sub_A06E8C((uint64_t)a1, (uint64_t)a4);
  sub_A06F94((uint64_t)a1, (uint64_t)a4);
  sub_A07438((uint64_t)a1, a4);
  sub_A07BD4((uint64_t)a1, (uint64_t)a3, (uint64_t)a4);
  double v8 = sub_A07C54((uint64_t)a1, (uint64_t)a4);
  sub_A07638((uint64_t)a1, (uint64_t)a3, a4, v8);
  sub_A07854((uint64_t)a1, a2, (uint64_t *)a4);
  sub_A07748((uint64_t)a1, a2, (uint64_t *)a4);
  sub_A079E4((uint64_t)a1, a4);
  sub_A07ADC((uint64_t)a1, (uint64_t *)a4);
  sub_A07CB8((uint64_t)a1, a2, a3, (uint64_t *)a4);
  sub_A0610C((uint64_t)a1, (uint64_t)a3, a4, 0);
  sub_A0619C((uint64_t)a1, (uint64_t)a3, (uint64_t *)a4, 0);
  sub_A0622C((uint64_t)a1, (uint64_t)a3, (uint64_t)a4, 0);
  sub_A062BC((uint64_t)a1, (uint64_t)a3, (uint64_t *)a4, 1);
  sub_A0634C((uint64_t)a1, (uint64_t)a3, (uint64_t *)a4, 0);
  sub_A063DC((uint64_t)a1, (uint64_t)a3, (uint64_t *)a4, 0);
  sub_A063DC((uint64_t)a1, (uint64_t)a3, (uint64_t *)a4, 1);
  sub_A08024((uint64_t)a1, (uint64_t)a4);
  sub_A082DC((uint64_t)a1, (uint64_t)a4);
  sub_A08358((uint64_t)a1, a3, (uint64_t)a4);
  sub_A083D8((uint64_t)a1, (uint64_t *)a4);
  unint64_t v10 = *a4;
  unint64_t v9 = a4[1];
  uint64_t v11 = v9 - *a4;
  BOOL v43 = v9 == *a4;
  a1[535] = a1[535] + (double)(unint64_t)(0x6DB6DB6DB6DB6DB7 * (v11 >> 4));
  if (v43)
  {
    double v15 = 0.0;
    goto LABEL_10;
  }
  unint64_t v12 = v11 - 112;
  if (v12 >= 0x70)
  {
    int v16 = 0;
    int v17 = 0;
    uint64_t v18 = (((v12 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
    unint64_t v14 = v10 + 112 * (v18 & 0x7FFFFFFFFFFFFFELL);
    char v19 = (void *)(v10 + 200);
    uint64_t v20 = v18 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      v16 -= 1227133513 * ((*(v19 - 14) - *(v19 - 15)) >> 4);
      v17 -= 1227133513 * ((*v19 - *(v19 - 1)) >> 4);
      v19 += 28;
      v20 -= 2;
    }
    while (v20);
    unsigned int v13 = v17 + v16;
    if (v18 == (v18 & 0x7FFFFFFFFFFFFFELL)) {
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v13 = 0;
    unint64_t v14 = v10;
  }
  do
  {
    v13 -= 1227133513 * ((*(void *)(v14 + 88) - *(void *)(v14 + 80)) >> 4);
    v14 += 112;
  }
  while (v14 != v9);
LABEL_9:
  double v15 = (double)v13;
LABEL_10:
  a1[536] = v15 + a1[536];
  a1[537] = a1[537] + (double)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[4] - a4[3]) >> 5));
  uint64_t v22 = (char *)a4[6];
  char v21 = (char *)a4[7];
  a1[538] = a1[538] + (double)(0xEF7BDEF7BDEF7BDFLL * ((v21 - v22) >> 3));
  if (v21 != v22)
  {
    unint64_t v23 = v21 - v22 - 248;
    if (v23 >= 0xF8)
    {
      int v27 = 0;
      int v28 = 0;
      unint64_t v29 = v23 / 0xF8 + 1;
      uint64_t v25 = &v22[248 * (v29 & 0x3FFFFFFFFFFFFFELL)];
      int v30 = v22 + 328;
      uint64_t v31 = v29 & 0x3FFFFFFFFFFFFFELL;
      do
      {
        v27 -= 286331153 * ((*(v30 - 31) - *(v30 - 32)) >> 2);
        v28 -= 286331153 * ((*v30 - *(v30 - 1)) >> 2);
        v30 += 62;
        v31 -= 2;
      }
      while (v31);
      unsigned int v24 = v28 + v27;
      if (v29 == (v29 & 0x3FFFFFFFFFFFFFELL)) {
        goto LABEL_18;
      }
    }
    else
    {
      unsigned int v24 = 0;
      uint64_t v25 = v22;
    }
    do
    {
      v24 -= 286331153 * ((*((void *)v25 + 10) - *((void *)v25 + 9)) >> 2);
      v25 += 248;
    }
    while (v25 != v21);
LABEL_18:
    unsigned int v32 = 0;
    a1[539] = a1[539] + (double)v24;
    while (1)
    {
      uint64_t v34 = *((void *)v22 + 9);
      uint64_t v35 = *((void *)v22 + 10);
      if (v34 == v35)
      {
        int v33 = 0;
      }
      else
      {
        unint64_t v36 = v35 - v34 - 60;
        if (v36 >= 0x3C)
        {
          int v38 = 0;
          int v39 = 0;
          unint64_t v40 = v36 / 0x3C + 1;
          uint64_t v37 = v34 + 60 * (v40 & 0xFFFFFFFFFFFFFFELL);
          char v41 = (unsigned char *)(v34 + 72);
          uint64_t v42 = v40 & 0xFFFFFFFFFFFFFFELL;
          do
          {
            BOOL v43 = *(v41 - 60) == 1 || *(v41 - 48) == 1;
            if (v43) {
              ++v38;
            }
            if (*v41 == 1 || v41[12] == 1) {
              ++v39;
            }
            v41 += 120;
            v42 -= 2;
          }
          while (v42);
          int v33 = v39 + v38;
          if (v40 == (v40 & 0xFFFFFFFFFFFFFFELL)) {
            goto LABEL_20;
          }
        }
        else
        {
          int v33 = 0;
          uint64_t v37 = *((void *)v22 + 9);
        }
        do
        {
          if (*(unsigned char *)(v37 + 12) == 1 || *(unsigned char *)(v37 + 24) == 1) {
            ++v33;
          }
          v37 += 60;
        }
        while (v37 != v35);
      }
LABEL_20:
      v32 += v33;
      v22 += 248;
      if (v22 == v21)
      {
        double v26 = (double)v32;
        goto LABEL_45;
      }
    }
  }
  double v26 = 0.0;
  a1[539] = a1[539] + 0.0;
LABEL_45:
  double result = v26 + a1[540];
  a1[540] = result;
  return result;
}

void sub_A056B8(_Unwind_Exception *a1)
{
  sub_A05A3C(v1);
  _Unwind_Resume(a1);
}

void *sub_A056CC(void *a1)
{
  uint64_t v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  BOOL v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  return a1;
}

void *sub_A05730(void *a1)
{
  uint64_t v2 = (char *)a1[16];
  if (v2)
  {
    do
    {
      unint64_t v12 = *(char **)v2;
      sub_57AC8((uint64_t *)v2 + 5);
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v12;
    }
    while (v12);
  }
  unint64_t v3 = (void *)a1[14];
  a1[14] = 0;
  if (v3) {
    operator delete(v3);
  }
  BOOL v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)a1[7];
  if (v5)
  {
    uint64_t v6 = (void *)a1[8];
    BOOL v7 = (void *)a1[7];
    if (v6 != v5)
    {
      do
        uint64_t v6 = sub_8EC658(v6 - 15);
      while (v6 != v5);
      BOOL v7 = (void *)a1[7];
    }
    a1[8] = v5;
    operator delete(v7);
  }
  uint64_t v8 = a1[4];
  if (v8)
  {
    uint64_t v9 = a1[5];
    unint64_t v10 = (void *)a1[4];
    if (v9 != v8)
    {
      uint64_t v11 = a1[5];
      do
      {
        unint64_t v14 = *(void **)(v11 - 48);
        v11 -= 48;
        unsigned int v13 = v14;
        if (v14)
        {
          *(void *)(v9 - 40) = v13;
          operator delete(v13);
        }
        uint64_t v9 = v11;
      }
      while (v11 != v8);
      unint64_t v10 = (void *)a1[4];
    }
    a1[5] = v8;
    operator delete(v10);
  }
  double v15 = (void **)a1[1];
  if (v15)
  {
    int v16 = (void **)a1[2];
    int v17 = (void *)a1[1];
    if (v16 != v15)
    {
      uint64_t v18 = (void **)a1[2];
      do
      {
        char v21 = (char *)*(v18 - 4);
        v18 -= 4;
        uint64_t v20 = v21;
        if (v21)
        {
          uint64_t v22 = (char *)*(v16 - 3);
          char v19 = v20;
          if (v22 != v20)
          {
            do
            {
              unint64_t v23 = (void *)*((void *)v22 - 3);
              if (v23)
              {
                *((void *)v22 - 2) = v23;
                operator delete(v23);
              }
              unsigned int v24 = (void *)*((void *)v22 - 7);
              if (v24)
              {
                *((void *)v22 - 6) = v24;
                operator delete(v24);
              }
              v22 -= 56;
            }
            while (v22 != v20);
            char v19 = *v18;
          }
          *(v16 - 3) = v20;
          operator delete(v19);
        }
        int v16 = v18;
      }
      while (v18 != v15);
      int v17 = (void *)a1[1];
    }
    a1[2] = v15;
    operator delete(v17);
  }
  return a1;
}

uint64_t sub_A058D0(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (uint64_t *)(a2 + 32);
  *(void *)a1 = *(void *)a2;
  BOOL v5 = (void *)(a1 + 32);
  sub_8EB944((void *)(a1 + 8), (uint64_t *)(a2 + 8));
  sub_8EC784(v5, v4);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_8EBD78(a1 + 56, *(void *)(a2 + 56), *(void *)(a2 + 64), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  BOOL v7 = *(unsigned char **)(a2 + 80);
  uint64_t v6 = *(unsigned char **)(a2 + 88);
  uint64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0) {
      sub_2E00();
    }
    uint64_t v9 = (char *)operator new(v6 - v7);
    *(void *)(a1 + 80) = v9;
    *(void *)(a1 + 88) = v9;
    unint64_t v10 = &v9[8 * (v8 >> 3)];
    *(void *)(a1 + 96) = v10;
    memcpy(v9, v7, v8 - 3);
    *(void *)(a1 + 88) = v10;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  sub_54214(a1 + 112, a2 + 112);
  return a1;
}

void sub_A059D4(_Unwind_Exception *a1)
{
  BOOL v7 = *v5;
  if (*v5)
  {
    *(void *)(v3 + 88) = v7;
    operator delete(v7);
  }
  sub_8EAEC0(v4);
  sub_8EAE48(v2);
  sub_8EAF1C(v1);
  _Unwind_Resume(a1);
}

char **sub_A05A3C(char **a1)
{
  uint64_t v2 = a1[12];
  if (v2)
  {
    do
    {
      BOOL v7 = *(char **)v2;
      sub_57AC8((uint64_t *)v2 + 5);
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = a1[10];
  a1[10] = 0;
  if (v3) {
    operator delete(v3);
  }
  int v17 = (void **)(a1 + 6);
  sub_A05B94(&v17);
  BOOL v4 = a1[3];
  if (v4)
  {
    BOOL v5 = a1[4];
    uint64_t v6 = a1[3];
    if (v5 != v4)
    {
      do
      {
        uint64_t v8 = (void *)*((void *)v5 - 11);
        if (v8)
        {
          *((void *)v5 - 10) = v8;
          operator delete(v8);
        }
        v5 -= 160;
      }
      while (v5 != v4);
      uint64_t v6 = a1[3];
    }
    a1[4] = v4;
    operator delete(v6);
  }
  uint64_t v9 = *a1;
  if (*a1)
  {
    unint64_t v10 = a1[1];
    uint64_t v11 = *a1;
    if (v10 != v9)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 4);
        if (v13)
        {
          uint64_t v14 = *((void *)v10 - 3);
          unint64_t v12 = (void *)*((void *)v10 - 4);
          if (v14 != v13)
          {
            do
            {
              double v15 = *(void **)(v14 - 32);
              if (v15)
              {
                *(void *)(v14 - 24) = v15;
                operator delete(v15);
              }
              v14 -= 112;
            }
            while (v14 != v13);
            unint64_t v12 = (void *)*((void *)v10 - 4);
          }
          *((void *)v10 - 3) = v13;
          operator delete(v12);
        }
        v10 -= 112;
      }
      while (v10 != v9);
      uint64_t v11 = *a1;
    }
    a1[1] = v9;
    operator delete(v11);
  }
  return a1;
}

void sub_A05B94(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    BOOL v4 = (char *)v1[1];
    BOOL v5 = **a1;
    if (v4 == v2)
    {
      v1[1] = v2;
    }
    else
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        BOOL v7 = (void *)*((void *)v4 - 8);
        if (v7)
        {
          *((void *)v4 - 7) = v7;
          operator delete(v7);
        }
        uint64_t v8 = (void *)*((void *)v4 - 19);
        if (v8)
        {
          *((void *)v4 - 18) = v8;
          operator delete(v8);
        }
        uint64_t v9 = (void *)*((void *)v4 - 22);
        if (v9)
        {
          *((void *)v4 - 21) = v9;
          operator delete(v9);
        }
        v4 -= 248;
      }
      while (v4 != v2);
      BOOL v5 = **a1;
      v1[1] = v2;
    }
    operator delete(v5);
  }
}

uint64_t sub_A05C78(uint64_t a1)
{
  sub_9F6234(a1 + 1624, *(void **)(a1 + 1640));
  uint64_t v2 = *(void **)(a1 + 1624);
  *(void *)(a1 + 1624) = 0;
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 1600);
  if (v3)
  {
    do
    {
      BOOL v4 = (void *)*v3;
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  BOOL v5 = *(void **)(a1 + 1584);
  *(void *)(a1 + 1584) = 0;
  if (v5) {
    operator delete(v5);
  }
  if (*(unsigned char *)(a1 + 1576))
  {
    sub_A05DD4((void *)(a1 + 1464));
    *(unsigned char *)(a1 + 1576) = 0;
  }
  uint64_t v6 = *(void **)(a1 + 1440);
  if (v6)
  {
    do
    {
      BOOL v7 = (void *)*v6;
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = *(void **)(a1 + 1424);
  *(void *)(a1 + 1424) = 0;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 1400);
  if (v9)
  {
    do
    {
      unint64_t v10 = (void *)*v9;
      operator delete(v9);
      uint64_t v9 = v10;
    }
    while (v10);
  }
  uint64_t v11 = *(void **)(a1 + 1384);
  *(void *)(a1 + 1384) = 0;
  if (v11) {
    operator delete(v11);
  }
  uint64_t v12 = *(void *)(a1 + 1360);
  if (v12)
  {
    sub_9F64C8(a1 + 1360, v12);
    operator delete(*(void **)(a1 + 1360));
  }
  if (*(char *)(a1 + 1055) < 0)
  {
    operator delete(*(void **)(a1 + 1032));
    if ((*(char *)(a1 + 1031) & 0x80000000) == 0)
    {
LABEL_21:
      if ((*(char *)(a1 + 399) & 0x80000000) == 0) {
        goto LABEL_22;
      }
      goto LABEL_28;
    }
  }
  else if ((*(char *)(a1 + 1031) & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(*(void **)(a1 + 1008));
  if ((*(char *)(a1 + 399) & 0x80000000) == 0)
  {
LABEL_22:
    if ((*(char *)(a1 + 375) & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_29:
    operator delete(*(void **)(a1 + 352));
    uint64_t v13 = *(void **)a1;
    if (!*(void *)a1) {
      return a1;
    }
    goto LABEL_24;
  }
LABEL_28:
  operator delete(*(void **)(a1 + 376));
  if (*(char *)(a1 + 375) < 0) {
    goto LABEL_29;
  }
LABEL_23:
  uint64_t v13 = *(void **)a1;
  if (*(void *)a1)
  {
LABEL_24:
    *(void *)(a1 + 8) = v13;
    operator delete(v13);
  }
  return a1;
}

void sub_A05DD4(void *a1)
{
  uint64_t v2 = (void *)a1[11];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  BOOL v4 = (void *)a1[9];
  a1[9] = 0;
  if (v4) {
    operator delete(v4);
  }
  BOOL v5 = (void *)a1[6];
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      BOOL v5 = v6;
    }
    while (v6);
  }
  BOOL v7 = (void *)a1[4];
  a1[4] = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a1[1];
  uint64_t v9 = (void **)(a1 + 1);
  uint64_t v8 = v10;
  if (v10)
  {
    sub_9F64C8((uint64_t)v9, v8);
    uint64_t v11 = *v9;
    operator delete(v11);
  }
}

uint64_t sub_A05E74(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1AF286BCA1AF286) {
    sub_2E00();
  }
  if (0xD79435E50D79436 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 3);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 3) >= 0xD79435E50D7943) {
    unint64_t v6 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1AF286BCA1AF286) {
      sub_188D718();
    }
    BOOL v7 = (char *)operator new(152 * v6);
  }
  else
  {
    BOOL v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[152 * v3];
  uint64_t v9 = &v7[152 * v6];
  sub_A05FE8((uint64_t)(a1 + 2), v8, a2);
  uint64_t v10 = v8 + 152;
  uint64_t v12 = (void *)*a1;
  uint64_t v11 = (void *)a1[1];
  if (v11 == (void *)*a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = (uint64_t)v9;
    if (!v11) {
      return v10;
    }
    goto LABEL_17;
  }
  do
  {
    v8 -= 152;
    v11 -= 19;
    sub_A05FE8((uint64_t)(a1 + 2), v8, (uint64_t)v11);
  }
  while (v11 != v12);
  uint64_t v13 = (void *)*a1;
  uint64_t v11 = (void *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  if (v11 != v13)
  {
    do
    {
      v11 -= 19;
      sub_A05730(v11);
    }
    while (v11 != v13);
    uint64_t v11 = v13;
  }
  if (v11) {
LABEL_17:
  }
    operator delete(v11);
  return v10;
}

void sub_A05FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a3 + 80);
  *(void *)(a2 + 96) = *(void *)(a3 + 96);
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a3 + 104);
  uint64_t v3 = *(void *)(a3 + 112);
  *(void *)(a3 + 112) = 0;
  *(void *)(a2 + 112) = v3;
  *(void *)(a2 + 120) = *(void *)(a3 + 120);
  *(void *)(a3 + 120) = 0;
  uint64_t v6 = *(void *)(a3 + 128);
  uint64_t v4 = a3 + 128;
  uint64_t v5 = v6;
  *(void *)(a2 + 128) = v6;
  uint64_t v7 = *(void *)(v4 + 8);
  *(void *)(a2 + 136) = v7;
  *(_DWORD *)(a2 + 144) = *(_DWORD *)(v4 + 16);
  if (v7)
  {
    unint64_t v8 = *(void *)(v5 + 8);
    unint64_t v9 = *(void *)(a2 + 120);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        v8 %= v9;
      }
    }
    else
    {
      v8 &= v9 - 1;
    }
    *(void *)(v3 + 8 * v8) = a2 + 128;
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
  }
}

void sub_A060E4()
{
  unk_25DF997 = 16641;
  word_25DF980 = 65;
  byte_25DF9AF = 1;
  byte_25DF999 = 0;
}

double sub_A0610C(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  if (*(unsigned char *)(a1 + 27))
  {
    uint64_t v8 = a1 + 4784;
    sub_725A0(a1 + 4784);
    sub_497CC0(&v10, a1 + 40);
    sub_B8A704((uint64_t)&v10, a2, a3, a4);
    double result = sub_72688(v8) + *(double *)(a1 + 4464);
    *(double *)(a1 + 4464) = result;
  }
  return result;
}

double sub_A0619C(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  if (*(unsigned char *)(a1 + 27))
  {
    uint64_t v8 = a1 + 4784;
    sub_725A0(a1 + 4784);
    sub_497CC0(&v10, a1 + 40);
    sub_B8ACCC((uint64_t)&v10, a2, a3, a4);
    double result = sub_72688(v8) + *(double *)(a1 + 4464);
    *(double *)(a1 + 4464) = result;
  }
  return result;
}

double sub_A0622C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 27))
  {
    uint64_t v8 = a1 + 4784;
    sub_725A0(a1 + 4784);
    sub_497CC0(&v11, a1 + 40);
    sub_B8B3F4((uint64_t)&v11, v9, a2, a3, a4);
    double result = sub_72688(v8) + *(double *)(a1 + 4464);
    *(double *)(a1 + 4464) = result;
  }
  return result;
}

double sub_A062BC(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  if (*(unsigned char *)(a1 + 27))
  {
    uint64_t v8 = a1 + 4784;
    sub_725A0(a1 + 4784);
    sub_497CC0(&v10, a1 + 40);
    sub_B8B7D4((uint64_t)&v10, a2, a3, a4);
    double result = sub_72688(v8) + *(double *)(a1 + 4464);
    *(double *)(a1 + 4464) = result;
  }
  return result;
}

double sub_A0634C(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (*(unsigned char *)(a1 + 27))
  {
    uint64_t v8 = a1 + 4784;
    sub_725A0(a1 + 4784);
    sub_497CC0(&v10, a1 + 40);
    sub_B8BD60((uint64_t)&v10, a2, a3, a4);
    double result = sub_72688(v8) + *(double *)(a1 + 4464);
    *(double *)(a1 + 4464) = result;
  }
  return result;
}

double sub_A063DC(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (*(unsigned char *)(a1 + 27))
  {
    uint64_t v8 = a1 + 4784;
    sub_725A0(a1 + 4784);
    sub_497CC0(&v10, a1 + 40);
    sub_B8C118((uint64_t)&v10, a2, a3, a4);
    double result = sub_72688(v8) + *(double *)(a1 + 4464);
    *(double *)(a1 + 4464) = result;
  }
  return result;
}

void sub_A0646C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  sub_725D0((uint64_t)v13);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t __p = operator new(0x50uLL);
  long long v11 = xmmword_20B99D0;
  strcpy((char *)__p, "routing/transit/schedule_lookup/adapters/SpaScheduleLookupRequestAdapter.json");
  __n128 v9 = sub_374CDC(v8, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
  sub_A1905C((uint64_t)v12, a1 + 40, v9);
  sub_A19110((uint64_t)v12, a2, a3, a4);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 4352) = sub_72688((uint64_t)v13);
}

void sub_A0654C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A06568(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 2)) {
    return 0;
  }
  uint64_t v4 = a1 + 4784;
  sub_725A0(a1 + 4784);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t __p = operator new(0x48uLL);
  long long v12 = xmmword_20B9A00;
  strcpy((char *)__p, "routing/transit/schedule_lookup/preprocessing/CoverageCheck.json");
  uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
  sub_BBFF04(v13, v5, a1 + 40, v6);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  uint64_t v7 = sub_BC00EC(v13, a2);
  *(double *)(a1 + 4360) = sub_72688(v4) + *(double *)(a1 + 4360);
  int8x8_t v8 = vand_s8((int8x8_t)vceq_s32(vdup_n_s32(v7), (int32x2_t)0x1200000011), (int8x8_t)0x100000001);
  v9.i64[0] = v8.u32[0];
  v9.i64[1] = v8.u32[1];
  *(float64x2_t *)(a1 + 4256) = vaddq_f64(*(float64x2_t *)(a1 + 4256), vcvtq_f64_u64(v9));
  return v7;
}

void sub_A06694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A066B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 4784;
  sub_725A0(a1 + 4784);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t __p = operator new(0x48uLL);
  long long v11 = xmmword_20EB650;
  strcpy((char *)__p, "routing/transit/schedule_lookup/algorithms/ScheduleLookupAlgorithm.json");
  int8x8_t v8 = sub_374CDC(v7, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
  sub_BC3AC0((uint64_t)v12, a1 + 40, v8);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p);
  }
  sub_BC3AEC(v12, a2, a3);
  double result = sub_72688(v6) + *(double *)(a1 + 4368);
  *(double *)(a1 + 4368) = result;
  return result;
}

void sub_A06798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A067B4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 5))
  {
    uint64_t v4 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x70uLL);
    long long v9 = xmmword_20E81E0;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/RegularJourneyLegAlternativesTripDeduplicationFilter.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_BB4910((uint64_t)v10, a1 + 40, v6);
    sub_BB49B0((uint64_t)v10, a2);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    double result = sub_72688(v4) + *(double *)(a1 + 4384);
    *(double *)(a1 + 4384) = result;
  }
  return result;
}

void sub_A0689C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A068B8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 6))
  {
    uint64_t v4 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x70uLL);
    long long v9 = xmmword_20B9440;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/UpcomingJourneyLegAlternativesTripDeduplicationFilter.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_BB4910((uint64_t)v10, a1 + 40, v6);
    sub_BB49B0((uint64_t)v10, a2);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    double result = sub_72688(v4) + *(double *)(a1 + 4384);
    *(double *)(a1 + 4384) = result;
  }
  return result;
}

void sub_A069A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A069BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 7))
  {
    uint64_t v6 = a1 + 4784;
    sub_725A0(a1 + 4784);
    sub_497CC0(&v9, a1 + 40);
    sub_B5FC44(&v9, a2, a3, v7);
    double result = sub_72688(v6) + *(double *)(a1 + 4376);
    *(double *)(a1 + 4376) = result;
  }
  return result;
}

double sub_A06A3C(uint64_t a1, int *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v6 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x60uLL);
    long long v11 = xmmword_20EB660;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/RegularJourneyLegAlternativesExcessFilter.json");
    int8x8_t v8 = sub_374CDC(v7, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_BB19A4((uint64_t)v12, v8, (uint64_t)a2);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p);
    }
    sub_BB2010((unint64_t)v12, a2, a3);
    double result = sub_72688(v6) + *(double *)(a1 + 4384);
    *(double *)(a1 + 4384) = result;
  }
  return result;
}

void sub_A06B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A06B50(uint64_t a1, int *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 9))
  {
    uint64_t v6 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x60uLL);
    long long v11 = xmmword_20EB670;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/UpcomingJourneyLegAlternativesExcessFilter.json");
    int8x8_t v8 = sub_374CDC(v7, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_BB19A4((uint64_t)v12, v8, (uint64_t)a2);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p);
    }
    sub_BB2010((unint64_t)v12, a2, a3);
    double result = sub_72688(v6) + *(double *)(a1 + 4384);
    *(double *)(a1 + 4384) = result;
  }
  return result;
}

void sub_A06C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A06C64(uint64_t a1, int *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 10))
  {
    uint64_t v6 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x60uLL);
    long long v11 = xmmword_20EB660;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/RegularJourneyLegAlternativesBoundsFilter.json");
    int8x8_t v8 = sub_374CDC(v7, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_BB19A4((uint64_t)v12, v8, (uint64_t)a2);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p);
    }
    sub_BB2010((unint64_t)v12, a2, a3);
    double result = sub_72688(v6) + *(double *)(a1 + 4384);
    *(double *)(a1 + 4384) = result;
  }
  return result;
}

void sub_A06D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A06D78(uint64_t a1, int *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 11))
  {
    uint64_t v6 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x60uLL);
    long long v11 = xmmword_20EB670;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/UpcomingJourneyLegAlternativesBoundsFilter.json");
    int8x8_t v8 = sub_374CDC(v7, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_BB19A4((uint64_t)v12, v8, (uint64_t)a2);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p);
    }
    sub_BB2010((unint64_t)v12, a2, a3);
    double result = sub_72688(v6) + *(double *)(a1 + 4384);
    *(double *)(a1 + 4384) = result;
  }
  return result;
}

void sub_A06E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A06E8C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 12))
  {
    uint64_t v4 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x78uLL);
    long long v9 = xmmword_20EB680;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/RegularJourneyLegAlternativesFrequencyTripDeduplicationFilter.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_BB3FB0((uint64_t)v10, a1 + 40, v6);
    sub_BB4050((uint64_t)v10, a2);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    double result = sub_72688(v4) + *(double *)(a1 + 4384);
    *(double *)(a1 + 4384) = result;
  }
  return result;
}

void sub_A06F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A06F94(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 13))
  {
    uint64_t v4 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x78uLL);
    long long v9 = xmmword_20EB690;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/UpcomingJourneyLegAlternativesFrequencyTripDeduplicationFilter.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_BB3FB0((uint64_t)v10, a1 + 40, v6);
    sub_BB4050((uint64_t)v10, a2);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    double result = sub_72688(v4) + *(double *)(a1 + 4384);
    *(double *)(a1 + 4384) = result;
  }
  return result;
}

void sub_A07084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A070A0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v4 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x50uLL);
    long long v9 = xmmword_20B9420;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/ServiceFrequencyCalculation.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_B983C8((uint64_t)v10, a1 + 40, v6);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    sub_B99708(v10, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 4392);
    *(double *)(a1 + 4392) = result;
  }
  return result;
}

void sub_A07180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A0719C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 17))
  {
    uint64_t v4 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x50uLL);
    long long v8 = xmmword_20B9A50;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/ServiceFrequencyRounding.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_BA6704((char **)v9, v6);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p);
    }
    sub_BA6C2C(v9, a2);
    *(double *)(a1 + 4392) = sub_72688(v4) + *(double *)(a1 + 4392);
    if (v9[0])
    {
      v9[1] = v9[0];
      operator delete(v9[0]);
    }
  }
}

void sub_A07288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A072B8(uint64_t a1, int *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 14))
  {
    uint64_t v6 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x58uLL);
    long long v11 = xmmword_20EB460;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/ServiceFrequencyBoundsFilter.json");
    long long v8 = sub_374CDC(v7, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_BBDC54((uint64_t)v12, v8, (uint64_t)a2);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p);
    }
    sub_BBE304(v12, a2, a3);
    double result = sub_72688(v6) + *(double *)(a1 + 4384);
    *(double *)(a1 + 4384) = result;
  }
  return result;
}

void sub_A073A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A073C4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 18))
  {
    uint64_t v4 = a1 + 4784;
    sub_725A0(a1 + 4784);
    nullsub_1(&v6);
    sub_BB0D20((uint64_t)&v6, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 4384);
    *(double *)(a1 + 4384) = result;
  }
  return result;
}

double sub_A07438(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 15))
  {
    uint64_t v4 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x48uLL);
    long long v9 = xmmword_20EB650;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/EmptyScheduleFilter.json");
    char v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_BAFE00(v10, v6);
    sub_BAFE04(v10, a2);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    double result = sub_72688(v4) + *(double *)(a1 + 4384);
    *(double *)(a1 + 4384) = result;
  }
  return result;
}

void sub_A07514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A07530(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 19))
  {
    uint64_t v6 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x50uLL);
    long long v11 = xmmword_20B9A50;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/ServiceStatusCalculation.json");
    long long v8 = sub_374CDC(v7, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_BA863C((uint64_t)v12, v8);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p);
    }
    sub_BA8EC0(v12, a2, a3);
    double result = sub_72688(v6) + *(double *)(a1 + 4400);
    *(double *)(a1 + 4400) = result;
  }
  return result;
}

void sub_A0761C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A07638(uint64_t a1, uint64_t a2, unint64_t *a3, double result)
{
  if (*(unsigned char *)(a1 + 20))
  {
    uint64_t v7 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x48uLL);
    long long v12 = xmmword_20B9270;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/ScheduleGrouping.json");
    long long v9 = sub_374CDC(v8, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_B7E16C((uint64_t)v13, a1 + 40, v9);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p);
    }
    sub_B7E198((uint64_t)v13, a2, a3, v10);
    double result = sub_72688(v7) + *(double *)(a1 + 4408);
    *(double *)(a1 + 4408) = result;
  }
  return result;
}

void sub_A0772C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A07748(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 21))
  {
    uint64_t v6 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x48uLL);
    long long v11 = xmmword_20EB650;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/ScheduleCellMerging.json");
    uint64_t v8 = sub_374CDC(v7, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_B72E2C((uint64_t)v12, a1 + 40, a2, v8);
    sub_B72E5C(v12, a3);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p);
    }
    double result = sub_72688(v6) + *(double *)(a1 + 4416);
    *(double *)(a1 + 4416) = result;
  }
  return result;
}

void sub_A07838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A07854(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(unsigned char *)(a1 + 22))
  {
    uint64_t v6 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v13 = operator new(0x50uLL);
    long long v14 = xmmword_20E86E0;
    strcpy((char *)v13, "routing/transit/schedule_lookup/postprocessing/ScheduleGroupDomination.json");
    uint64_t v8 = sub_374CDC(v7, (uint64_t)&v13, (uint64_t *)(a1 + 4808));
    sub_B79D9C((uint64_t)v15, a1 + 40, a2, v8);
    sub_B79DE0(v15, a3);
    long long v9 = __p;
    if (__p)
    {
      do
      {
        __n128 v10 = (void *)*v9;
        operator delete(v9);
        long long v9 = v10;
      }
      while (v10);
    }
    long long v11 = v16;
    int v16 = 0;
    if (v11) {
      operator delete(v11);
    }
    if (SHIBYTE(v14) < 0) {
      operator delete(v13);
    }
    double result = sub_72688(v6) + *(double *)(a1 + 4424);
    *(double *)(a1 + 4424) = result;
  }
  return result;
}

void sub_A0796C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_A07998(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

double sub_A079E4(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 23))
  {
    uint64_t v4 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x58uLL);
    long long v9 = xmmword_20EB460;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/SingleScheduleCategoryFilter.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_BBE9D4(&v10, v6);
    sub_BBE9D8((uint64_t)&v10, a2);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    double result = sub_72688(v4) + *(double *)(a1 + 4384);
    *(double *)(a1 + 4384) = result;
  }
  return result;
}

void sub_A07AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A07ADC(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x50uLL);
    long long v9 = xmmword_20B9990;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/UnassociatedScheduleFilter.json");
    uint64_t v6 = sub_374CDC(v5, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_BBF374(&v10, v6);
    sub_BBF434(&v10, a2);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
    double result = sub_72688(v4) + *(double *)(a1 + 4384);
    *(double *)(a1 + 4384) = result;
  }
  return result;
}

void sub_A07BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_A07BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 25))
  {
    uint64_t v6 = a1 + 4784;
    sub_725A0(a1 + 4784);
    sub_497CC0(&v8, a1 + 40);
    sub_B5E6F0((unint64_t)&v8, a2, a3);
    double result = sub_72688(v6) + *(double *)(a1 + 4432);
    *(double *)(a1 + 4432) = result;
  }
  return result;
}

double sub_A07C54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 4784;
  sub_725A0(a1 + 4784);
  sub_B72528((uint64_t)&v6, a2);
  double result = sub_72688(v4) + *(double *)(a1 + 4440);
  *(double *)(a1 + 4440) = result;
  return result;
}

void sub_A07CB8(uint64_t a1, uint64_t a2, int *a3, uint64_t *a4)
{
  if (*(unsigned char *)(a1 + 26))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t __p = operator new(0x50uLL);
    long long v18 = xmmword_20B9420;
    strcpy((char *)__p, "routing/transit/schedule_lookup/postprocessing/ScheduleCriteriaComputation.json");
    long long v9 = sub_374CDC(v8, (uint64_t)&__p, (uint64_t *)(a1 + 4808));
    sub_B758B8((uint64_t)v21, a1 + 40, a2, v9);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p);
    }
    uint64_t v10 = *(void *)(a1 + 32);
    double v15 = operator new(0x48uLL);
    long long v16 = xmmword_20B9AB0;
    strcpy((char *)v15, "routing/transit/schedule_lookup/postprocessing/ScheduleScoring.json");
    long long v11 = sub_374CDC(v10, (uint64_t)&v15, (uint64_t *)(a1 + 4808));
    sub_B869F0((uint64_t)&__p, v11);
    if (SHIBYTE(v16) < 0) {
      operator delete(v15);
    }
    sub_725A0(a1 + 4784);
    sub_B758E8((BOOL)v21, a3, (uint64_t)a4);
    *(double *)(a1 + 4448) = sub_72688(a1 + 4784) + *(double *)(a1 + 4448);
    sub_725A0(a1 + 4784);
    sub_B86A1C((uint64_t)&__p, (uint64_t)a4);
    *(double *)(a1 + 4456) = sub_72688(a1 + 4784) + *(double *)(a1 + 4456);
    sub_725A0(a1 + 4784);
    sub_B7593C((uint64_t)v21, (uint64_t)a4);
    *(double *)(a1 + 4448) = sub_72688(a1 + 4784) + *(double *)(a1 + 4448);
    sub_725A0(a1 + 4784);
    sub_B86A70((uint64_t)&__p, a4);
    *(double *)(a1 + 4456) = sub_72688(a1 + 4784) + *(double *)(a1 + 4456);
    sub_725A0(a1 + 4784);
    sub_B75990((uint64_t)v21, a4);
    *(double *)(a1 + 4448) = sub_72688(a1 + 4784) + *(double *)(a1 + 4448);
    sub_725A0(a1 + 4784);
    sub_B86AF4((uint64_t)&__p, a4);
    *(double *)(a1 + 4456) = sub_72688(a1 + 4784) + *(double *)(a1 + 4456);
    sub_725A0(a1 + 4784);
    sub_B75B14(v21, a4);
    *(double *)(a1 + 4448) = sub_72688(a1 + 4784) + *(double *)(a1 + 4448);
    sub_725A0(a1 + 4784);
    sub_B86B48((uint64_t)&__p, a4);
    *(double *)(a1 + 4456) = sub_72688(a1 + 4784) + *(double *)(a1 + 4456);
    if (v19)
    {
      uint64_t v20 = v19;
      operator delete(v19);
    }
    long long v12 = v23;
    if (v23)
    {
      do
      {
        uint64_t v13 = (void *)*v12;
        operator delete(v12);
        long long v12 = v13;
      }
      while (v13);
    }
    long long v14 = v22;
    uint64_t v22 = 0;
    if (v14) {
      operator delete(v14);
    }
  }
}

void sub_A07F7C(_Unwind_Exception *a1)
{
  sub_A07FD8(v1 - 184);
  _Unwind_Resume(a1);
}

uint64_t sub_A07FD8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

double sub_A08024(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 28))
  {
    uint64_t v4 = a1 + 4784;
    sub_725A0(a1 + 4784);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v13 = 0;
    long long v14 = operator new(0x50uLL);
    long long v15 = xmmword_20B99D0;
    strcpy((char *)v14, "routing/transit/schedule_lookup/postprocessing/OperatingHoursCalculation.json");
    uint64_t __p = 0;
    long long v12 = 0;
    char v6 = sub_374CDC(v5, (uint64_t)&v14, (uint64_t *)&__p);
    int v17 = v16;
    v16[0] = off_243CC30;
    sub_B6F0CC((uint64_t)v18, a1 + 40, v6, (uint64_t)v16);
    sub_B6F0FC((uint64_t)v18, a2);
    if (v19 == v18)
    {
      (*(void (**)(void *))(v18[0] + 32))(v18);
      uint64_t v7 = v17;
      if (v17 != v16) {
        goto LABEL_6;
      }
    }
    else
    {
      if (v19) {
        (*(void (**)(void))(*v19 + 40))();
      }
      uint64_t v7 = v17;
      if (v17 != v16)
      {
LABEL_6:
        if (v7) {
          (*(void (**)(void *))(*v7 + 40))(v7);
        }
        uint64_t v8 = (void **)__p;
        if (!__p)
        {
LABEL_9:
          if ((SHIBYTE(v15) & 0x80000000) == 0)
          {
LABEL_10:
            double result = sub_72688(v4) + *(double *)(a1 + 4472);
            *(double *)(a1 + 4472) = result;
            return result;
          }
LABEL_16:
          operator delete(v14);
          goto LABEL_10;
        }
LABEL_14:
        uint64_t v10 = v12;
        if (v12 == v8)
        {
          long long v12 = v8;
          operator delete(v8);
          if ((SHIBYTE(v15) & 0x80000000) == 0) {
            goto LABEL_10;
          }
        }
        else
        {
          do
          {
            if (*((char *)v10 - 1) < 0) {
              operator delete(*(v10 - 3));
            }
            v10 -= 3;
          }
          while (v10 != v8);
          long long v12 = v8;
          operator delete(__p);
          if ((SHIBYTE(v15) & 0x80000000) == 0) {
            goto LABEL_10;
          }
        }
        goto LABEL_16;
      }
    }
    (*(void (**)(void *))(v16[0] + 32))(v16);
    uint64_t v8 = (void **)__p;
    if (!__p) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
  return result;
}

void sub_A08298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_A082DC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 3))
  {
    uint64_t v4 = a1 + 4784;
    sub_725A0(a1 + 4784);
    sub_B396FC(v6, *(void **)(a1 + 32), a1 + 40);
    sub_B398B4((uint64_t)v6, a2);
    double result = sub_72688(v4) + *(double *)(a1 + 4480);
    *(double *)(a1 + 4480) = result;
  }
  return result;
}

double sub_A08358(uint64_t a1, int *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 29))
  {
    uint64_t v6 = a1 + 4784;
    sub_725A0(a1 + 4784);
    sub_BAE694(&v8, *(void **)(a1 + 32));
    sub_BAE6C4(&v8, a2, a3);
    double result = sub_72688(v6) + *(double *)(a1 + 4384);
    *(double *)(a1 + 4384) = result;
  }
  return result;
}

uint64_t sub_A083D8(uint64_t result, uint64_t *a2)
{
  if (*(unsigned char *)(result + 30))
  {
    sub_725A0(result + 4784);
    sub_B76AC4(a2);
  }
  return result;
}

void sub_A08438(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  sub_725D0((uint64_t)v10);
  sub_A0A728(a1 + 40, a2, a3, a4, a5);
  *(double *)(a1 + 4504) = sub_72688((uint64_t)v10);
}

void sub_A084AC()
{
  unk_25DF9C7 = 16641;
  word_25DF9B0 = 65;
  byte_25DF9DF = 1;
  byte_25DF9C9 = 0;
}

void sub_A084D4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)(a8 + 64) = 0;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_DWORD *)(a8 + 20) = *(_DWORD *)(a3 + 12);
  uint64_t v23 = 0;
  long long v24 = 0uLL;
  long long v15 = *(void **)(a4 + 192);
  long long v14 = *(void **)(a4 + 200);
  uint64_t v22 = &v23;
  if (v15 != v14)
  {
    do
      sub_9F9E88((uint64_t)&v22, v15++);
    while (v15 != v14);
    long long v16 = *(void **)(a8 + 48);
    if (v16)
    {
      *(void *)(a8 + 56) = v16;
      operator delete(v16);
      *(void *)(a8 + 48) = 0;
      *(void *)(a8 + 56) = 0;
      *(void *)(a8 + 64) = 0;
    }
  }
  *(void *)(a8 + 48) = v23;
  *(_OWORD *)(a8 + 56) = v24;
  long long v18 = *(void **)(a4 + 8);
  for (uint64_t i = *(void **)(a4 + 16); v18 != i; v18 += 37)
  {
    sub_A086D8((uint64_t)&v23, a1, a2, v18, a7);
    if (v25)
    {
      unint64_t v19 = *(void *)(a8 + 32);
      if (v19 >= *(void *)(a8 + 40))
      {
        uint64_t v20 = sub_A14AD8((uint64_t *)(a8 + 24), (long long *)&v23);
      }
      else
      {
        sub_9F761C(*(void *)(a8 + 32), (long long *)&v23);
        uint64_t v20 = v19 + 176;
        *(void *)(a8 + 32) = v19 + 176;
      }
      *(void *)(a8 + 32) = v20;
      if (v25) {
        sub_A14674(&v23);
      }
    }
  }
  *(void *)a8 = a5;
  *(void *)(a8 + 8) = a6;
  *(_DWORD *)(a8 + 16) = *(_DWORD *)a4;
}

void sub_A08670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  v34[4] = v35;
  if (a34)
  {
    sub_A14674(&__p);
    sub_9F3A88(v34);
    _Unwind_Resume(a1);
  }
  sub_9F3A88(v34);
  _Unwind_Resume(a1);
}

void sub_A086D8(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v7 = (uint64_t *)a4[25];
  uint64_t v6 = (uint64_t *)a4[26];
  if (v7 == v6)
  {
    *(void *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }
  uint64_t v8 = a4;
  uint64_t v203 = (uint64_t **)(a4 + 25);
  unint64_t v229 = 0x8000000080000000;
  __int16 v230 = 0;
  unint64_t v231 = 0x8000000080000000;
  __int16 v232 = 0;
  int64x2_t v233 = 0u;
  long long v234 = 0u;
  long long v235 = 0u;
  long long v236 = 0u;
  long long v237 = 0u;
  long long v238 = 0u;
  int v239 = -1;
  char v240 = 0;
  int v241 = 0;
  char v242 = 0;
  uint64_t v244 = 0;
  long long v243 = 0uLL;
  BOOL v245 = 0;
  uint64_t v246 = 0x3FF0000000000000;
  int v228 = 0;
  if ((char *)v6 - (char *)v7 == 72 && *((unsigned char *)v7 + 24) == 1)
  {
    uint64_t v9 = *v7;
    int v10 = *(_DWORD *)(*v7 + 160);
    uint64_t v11 = *(unsigned int *)(*v7 + 4);
    goto LABEL_16;
  }
  uint64_t v9 = *v7;
  int v10 = *(_DWORD *)(*v7 + 160);
  int v12 = *(_DWORD *)(*v7 + 20);
  uint64_t v11 = *(unsigned int *)(*v7 + 4);
  int v13 = *(_DWORD *)(*v7 + 8);
  if (v10)
  {
    int v12 = *(_DWORD *)(*v7 + 8);
    int v13 = *(_DWORD *)(*v7 + 4);
  }
  if (v12 != v13)
  {
LABEL_16:
    unint64_t v22 = *(void *)(v9 + 8);
    int v23 = *(_DWORD *)(v9 + 16);
    unint64_t v24 = v11 | (v11 << 32);
    if (v10)
    {
      __int16 v25 = 0;
    }
    else
    {
      unint64_t v24 = v22;
      __int16 v25 = v23;
    }
    unint64_t v229 = v24;
    __int16 v230 = v25;
    if (v7 != v6) {
      goto LABEL_20;
    }
LABEL_15:
    LOWORD(v19) = 0;
    unint64_t v20 = 0x7FFFFFFF00000000;
    LODWORD(v21) = 0x7FFFFFFF;
    uint64_t v7 = v6;
    goto LABEL_37;
  }
  uint64_t v14 = sub_A0D24C(v203, 1uLL);
  int v15 = *(_DWORD *)(*(void *)v14 + 160);
  BOOL v16 = v15 == 0;
  if (v15) {
    unint64_t v17 = *(unsigned int *)(*(void *)v14 + 4) | ((unint64_t)*(unsigned int *)(*(void *)v14 + 4) << 32);
  }
  else {
    unint64_t v17 = *(void *)(*(void *)v14 + 8);
  }
  if (v16) {
    __int16 v18 = *(_DWORD *)(*(void *)v14 + 16);
  }
  else {
    __int16 v18 = 0;
  }
  uint64_t v7 = (uint64_t *)v8[25];
  uint64_t v6 = (uint64_t *)v8[26];
  unint64_t v229 = v17;
  __int16 v230 = v18;
  if (v7 == v6) {
    goto LABEL_15;
  }
LABEL_20:
  uint64_t v26 = (char *)v6 - (char *)v7;
  if ((char *)v6 - (char *)v7 == 72 && *((unsigned char *)v7 + 24) == 1)
  {
    uint64_t v27 = *(v6 - 9);
    int v28 = *(_DWORD *)(v27 + 160);
    unint64_t v21 = *(void *)(v27 + 20);
    unsigned int v29 = *(_DWORD *)(v27 + 8);
  }
  else
  {
    uint64_t v27 = *(v6 - 9);
    int v28 = *(_DWORD *)(v27 + 160);
    unint64_t v21 = *(void *)(v27 + 20);
    int v30 = *(_DWORD *)(v27 + 4);
    unsigned int v29 = *(_DWORD *)(v27 + 8);
    if (v28) {
      int v31 = *(_DWORD *)(v27 + 8);
    }
    else {
      int v31 = *(void *)(v27 + 20);
    }
    if (!v28) {
      int v30 = *(_DWORD *)(v27 + 8);
    }
    if (v31 == v30)
    {
      uint64_t v32 = sub_A0D24C(v203, 0x8E38E38E38E38E39 * (v26 >> 3) - 2);
      unint64_t v21 = *(void *)(*(void *)v32 + 20);
      if (*(_DWORD *)(*(void *)v32 + 160))
      {
        unint64_t v21 = *(unsigned int *)(*(void *)v32 + 8) | ((unint64_t)*(unsigned int *)(*(void *)v32 + 8) << 32);
        LOWORD(v19) = 0;
      }
      else
      {
        LOWORD(v19) = *(_DWORD *)(*(void *)v32 + 28);
      }
      unint64_t v20 = v21 & 0xFFFFFFFF00000000;
      uint64_t v7 = *v203;
      goto LABEL_37;
    }
  }
  int v19 = *(_DWORD *)(v27 + 28);
  unint64_t v33 = v29 | ((unint64_t)v29 << 32);
  if (v28)
  {
    unint64_t v21 = v33;
    LOWORD(v19) = 0;
  }
  unint64_t v20 = v21 & 0xFFFFFFFF00000000;
LABEL_37:
  unint64_t v231 = v21 | v20;
  __int16 v232 = v19;
  std::string v209 = v8;
  if (*(_DWORD *)(*v7 + 8) != *(_DWORD *)(*v7 + 4) || (uint64_t v34 = (uint64_t *)v8[26], (char *)v34 - (char *)v7 == 72))
  {
    sub_A0BF68((uint64_t)&v251, a2, a3, *v7, a5, &v228);
    if (!BYTE8(v252))
    {
      *(void *)(a1 + 176) = 0;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      goto LABEL_326;
    }
    memset(v259, 0, 32);
    long long v258 = 0u;
    v259[32] = 1;
    *(void *)&v259[36] = 0x8000000080000000;
    *(_WORD *)&v259[44] = 0;
    int v226 = 0;
    long long v225 = 0u;
    memset(v224, 0, sizeof(v224));
    long long v223 = 0u;
    memset(v222, 0, sizeof(v222));
    *(_OWORD *)&v221[8] = 0u;
    v227[0] = 1;
    *(void *)&v227[4] = 0x8000000080000000;
    v227[12] = 0;
    *(_DWORD *)uint64_t v221 = 0;
    sub_A0EADC((uint64_t *)&v221[8], 0, v251, *((uint64_t *)&v251 + 1), 0xE21A291C077975B9 * ((uint64_t)(*((void *)&v251 + 1) - v251) >> 3));
    uint64_t v35 = (void *)*((void *)&v258 + 1);
    if (*((void *)&v258 + 1) >= *(void *)v259)
    {
      uint64_t v37 = sub_A0F354((char **)&v258, (uint64_t)v221);
    }
    else
    {
      **((_DWORD **)&v258 + 1) = *(_DWORD *)v221;
      v35[1] = 0;
      v35[2] = 0;
      v35[3] = 0;
      v35[4] = 0;
      *(_OWORD *)(v35 + 1) = *(_OWORD *)&v221[8];
      v35[3] = *(void *)&v222[0];
      *(void *)&v221[8] = 0;
      *(void *)&v221[16] = 0;
      *(void *)&v222[0] = 0;
      v35[5] = 0;
      v35[6] = 0;
      *((_OWORD *)v35 + 2) = *(_OWORD *)((char *)v222 + 8);
      *((void *)&v222[0] + 1) = 0;
      *(void *)&v222[1] = 0;
      v35[6] = *((void *)&v222[1] + 1);
      v35[7] = 0;
      v35[8] = 0;
      v35[9] = 0;
      *(_OWORD *)(v35 + 7) = v223;
      v35[9] = v224[0];
      v35[10] = 0;
      *((void *)&v222[1] + 1) = 0;
      long long v223 = 0uLL;
      v224[0] = 0;
      v35[11] = 0;
      v35[12] = 0;
      *((_OWORD *)v35 + 5) = *(_OWORD *)&v224[1];
      v224[1] = 0;
      v224[2] = 0;
      v35[12] = v224[3];
      v35[13] = 0;
      v35[14] = 0;
      unsigned char v35[15] = 0;
      *(_OWORD *)(v35 + 13) = v225;
      unsigned char v35[15] = v226;
      v224[3] = 0;
      long long v225 = 0uLL;
      int v226 = 0;
      uint64_t v36 = *(void *)v227;
      *(void *)((char *)v35 + 133) = *(void *)&v227[5];
      v35[16] = v36;
      uint64_t v37 = (char *)(v35 + 18);
    }
    *((void *)&v258 + 1) = v37;
    int v38 = (void *)v233.i64[1];
    if (v233.i64[1] >= (unint64_t)v234)
    {
      unint64_t v40 = sub_A0F620(&v233, (uint64_t)&v258);
    }
    else
    {
      *(void *)(v233.i64[1] + 16) = 0;
      v38[3] = 0;
      *int v38 = 0;
      v38[1] = 0;
      *(_OWORD *)int v38 = v258;
      long long v38[2] = *(void *)v259;
      long long v258 = 0uLL;
      v38[4] = 0;
      v38[5] = 0;
      *(_OWORD *)(v38 + 3) = *(_OWORD *)&v259[8];
      v38[5] = *(void *)&v259[24];
      memset(v259, 0, 32);
      uint64_t v39 = *(void *)&v259[32];
      *(void *)((char *)v38 + 54) = *(void *)&v259[38];
      v38[6] = v39;
      unint64_t v40 = (char *)(v38 + 8);
    }
    v233.i64[1] = (uint64_t)v40;
    sub_9BEAA8(v221);
    if (*(void *)&v259[8])
    {
      *(void *)&v259[16] = *(void *)&v259[8];
      operator delete(*(void **)&v259[8]);
    }
    char v41 = (void *)v258;
    if ((void)v258)
    {
      uint64_t v42 = (void *)*((void *)&v258 + 1);
      BOOL v43 = (void *)v258;
      if (*((void *)&v258 + 1) != (void)v258)
      {
        do
          uint64_t v42 = sub_9BEAA8(v42 - 18);
        while (v42 != v41);
        BOOL v43 = (void *)v258;
      }
      *((void *)&v258 + 1) = v41;
      operator delete(v43);
    }
    uint64_t v8 = v209;
    if (BYTE8(v252))
    {
      uint64_t v44 = v251;
      if ((void)v251)
      {
        long long v45 = (void *)v251;
        if (*((void *)&v251 + 1) != (void)v251)
        {
          uint64_t v46 = *((void *)&v251 + 1) - 1064;
          do
          {
            int v48 = *(_DWORD *)(v46 + 1056);
            if (v48 == 3)
            {
              sub_3AFFFC(v46);
            }
            else if (v48 == 1)
            {
              long long v49 = *(void **)(v46 + 16);
              if (v49)
              {
                *(void *)(v46 + 24) = v49;
                operator delete(v49);
              }
            }
            else if (!v48 && *(unsigned char *)(v46 + 28))
            {
              *(unsigned char *)(v46 + 28) = 0;
            }
            uint64_t v47 = v46 - 32;
            v46 -= 1096;
          }
          while (v47 != v44);
          long long v45 = (void *)v251;
        }
        *((void *)&v251 + 1) = v44;
        operator delete(v45);
      }
    }
    uint64_t v7 = (uint64_t *)v209[25];
    uint64_t v34 = (uint64_t *)v209[26];
  }
  uint64_t v50 = v7 + 9;
  uint64_t v206 = a1;
  if (v7 + 9 == v34)
  {
LABEL_233:
    uint64_t v140 = v8;
    BOOL v141 = (int *)v8[28];
    uint64_t v142 = (int *)v140[29];
    if (v141 == v142)
    {
LABEL_306:
      unint64_t v193 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v236 + 1) - v236) >> 2));
      if (*((void *)&v236 + 1) == (void)v236) {
        uint64_t v194 = 0;
      }
      else {
        uint64_t v194 = v193;
      }
      sub_A11BBC(v236, *((unint64_t *)&v236 + 1), v194, 1);
      unint64_t v195 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v235 - *((void *)&v234 + 1)) >> 2));
      if ((void)v235 == *((void *)&v234 + 1)) {
        uint64_t v196 = 0;
      }
      else {
        uint64_t v196 = v195;
      }
      sub_A13118(*((uint64_t *)&v234 + 1), v235, v196, 1);
      uint64_t v197 = v209[31];
      uint64_t v198 = v209[32];
      for (*(void *)&long long v258 = (char *)&v237 + 8; v197 != v198; v197 += 40)
      {
        *(_OWORD *)uint64_t v221 = *(_OWORD *)v197;
        *(_DWORD *)&v221[16] = *(_DWORD *)(v197 + 16);
        *(void *)&v222[0] = *(void *)(v197 + 24);
        BYTE8(v222[0]) = *(unsigned char *)(v197 + 32);
        sub_A0F948((char ***)&v258, (long long *)v221);
      }
      if (*((_DWORD *)v209 + 3) != -1) {
        int v239 = *((_DWORD *)v209 + 3);
      }
      int v241 = *((_DWORD *)v209 + 1);
      char v240 = *((unsigned char *)v209 + 10);
      char v242 = *((unsigned char *)v209 + 2);
      memset(v221, 0, sizeof(v221));
      uint64_t v200 = (void *)v209[34];
      BOOL v199 = (void *)v209[35];
      for (*(void *)&long long v258 = v221; v200 != v199; ++v200)
        sub_2A98DC((void ***)&v258, v200);
      if ((void)v243)
      {
        *((void *)&v243 + 1) = v243;
        operator delete((void *)v243);
      }
      long long v243 = *(_OWORD *)v221;
      uint64_t v244 = *(void *)&v221[16];
      if (*((_DWORD *)v209 + 26) == 0x7FFFFFFF)
      {
        BOOL v201 = 0;
      }
      else
      {
        uint64_t v202 = *((unsigned __int8 *)v209 + 135);
        if ((v202 & 0x80u) != 0) {
          uint64_t v202 = v209[15];
        }
        BOOL v201 = v202 != 0;
      }
      BOOL v245 = v201;
      uint64_t v246 = v209[24];
      *(unsigned char *)(v206 + 176) = 1;
      sub_9F761C(v206, (long long *)&v229);
      goto LABEL_326;
    }
    while (1)
    {
      uint64_t v145 = v209[25];
      uint64_t v146 = v209[26];
      if (v145 == v146)
      {
        int v154 = *v141;
        if (*v141 != 0x7FFFFFFF) {
          goto LABEL_254;
        }
        goto LABEL_265;
      }
      if (v146 - v145 == 72 && *(unsigned char *)(v145 + 24) == 1) {
        break;
      }
      unsigned __int32 v147 = *(_DWORD **)v145;
      int v148 = v147[40];
      int v150 = v147[5];
      int v149 = v147[1];
      int v151 = v147[2];
      if (v148)
      {
        int v150 = v147[2];
        int v151 = v147[1];
      }
      if (v150 != v151) {
        goto LABEL_250;
      }
      uint64_t v152 = sub_A0D24C(v203, 1uLL);
      if (*(_DWORD *)(*(void *)v152 + 160)) {
        LODWORD(v153) = *(_DWORD *)(*(void *)v152 + 4);
      }
      else {
        uint64_t v153 = *(void *)(*(void *)v152 + 8);
      }
      int v154 = *v141;
      if (*v141 < (int)v153)
      {
LABEL_254:
        BOOL v157 = (char *)v235;
        if ((unint64_t)v235 < *((void *)&v235 + 1))
        {
          uint64_t v143 = *(void *)v141;
          *(_DWORD *)(v235 + 8) = v141[2];
          *(void *)BOOL v157 = v143;
          uint64_t v144 = v157 + 12;
        }
        else
        {
          int32x2_t v158 = (char *)*((void *)&v234 + 1);
          unint64_t v159 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v235 - *((void *)&v234 + 1)) >> 2);
          unint64_t v160 = v159 + 1;
          if (v159 + 1 > 0x1555555555555555) {
            goto LABEL_339;
          }
          if (0x5555555555555556 * ((uint64_t)(*((void *)&v235 + 1) - *((void *)&v234 + 1)) >> 2) > v160) {
            unint64_t v160 = 0x5555555555555556 * ((uint64_t)(*((void *)&v235 + 1) - *((void *)&v234 + 1)) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v235 + 1) - *((void *)&v234 + 1)) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v161 = 0x1555555555555555;
          }
          else {
            unint64_t v161 = v160;
          }
          if (v161)
          {
            if (v161 > 0x1555555555555555) {
              goto LABEL_340;
            }
            unsigned __int32 v162 = (char *)operator new(12 * v161);
          }
          else
          {
            unsigned __int32 v162 = 0;
          }
          uint64_t v181 = *(void *)v141;
          uint64_t v182 = &v162[12 * v159];
          *((_DWORD *)v182 + 2) = v141[2];
          *(void *)uint64_t v182 = v181;
          uint64_t v183 = v182;
          if (v157 != v158)
          {
            do
            {
              uint64_t v184 = *(void *)(v157 - 12);
              v157 -= 12;
              __int16 v185 = *((_WORD *)v157 + 4);
              *(void *)(v183 - 12) = v184;
              v183 -= 12;
              *((_WORD *)v183 + 4) = v185;
            }
            while (v157 != v158);
            BOOL v157 = (char *)*((void *)&v234 + 1);
          }
          int v186 = &v162[12 * v161];
          uint64_t v144 = v182 + 12;
          *((void *)&v234 + 1) = v183;
          *(void *)&long long v235 = v182 + 12;
          *((void *)&v235 + 1) = v186;
          if (v157) {
            operator delete(v157);
          }
        }
        *(void *)&long long v235 = v144;
        goto LABEL_237;
      }
LABEL_265:
      uint64_t v163 = v209[25];
      uint64_t v164 = v209[26];
      if (v163 == v164) {
        goto LABEL_237;
      }
      if (v164 - v163 == 72 && *(unsigned char *)(v163 + 24) == 1)
      {
        BOOL v165 = *(_DWORD **)v163;
        int v166 = v165[40];
        int v167 = v165[1];
      }
      else
      {
        BOOL v165 = *(_DWORD **)v163;
        int v166 = v165[40];
        int v168 = v165[5];
        int v167 = v165[1];
        int v169 = v165[2];
        if (v166)
        {
          int v168 = v165[2];
          int v169 = v165[1];
        }
        if (v168 == v169)
        {
          uint64_t v170 = sub_A0D24C(v203, 1uLL);
          if (*(_DWORD *)(*(void *)v170 + 160)) {
            LODWORD(v171) = *(_DWORD *)(*(void *)v170 + 4);
          }
          else {
            uint64_t v171 = *(void *)(*(void *)v170 + 8);
          }
          if (*v141 <= (int)v171) {
            goto LABEL_237;
          }
          goto LABEL_282;
        }
      }
      uint64_t v172 = *((void *)v165 + 1);
      if (v166) {
        LODWORD(v172) = v167;
      }
      if (v154 <= (int)v172) {
        goto LABEL_237;
      }
LABEL_282:
      BOOL v173 = (_WORD *)*((void *)&v236 + 1);
      if (*((void *)&v236 + 1) >= (unint64_t)v237)
      {
        uint64_t v176 = (_WORD *)v236;
        unint64_t v177 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v236 + 1) - v236) >> 2);
        unint64_t v178 = v177 + 1;
        if (v177 + 1 > 0x1555555555555555) {
LABEL_339:
        }
          sub_2E00();
        if (0x5555555555555556 * ((uint64_t)(v237 - v236) >> 2) > v178) {
          unint64_t v178 = 0x5555555555555556 * ((uint64_t)(v237 - v236) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v237 - v236) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v179 = 0x1555555555555555;
        }
        else {
          unint64_t v179 = v178;
        }
        if (v179)
        {
          if (v179 > 0x1555555555555555) {
LABEL_340:
          }
            sub_188D718();
          long long v180 = (char *)operator new(12 * v179);
        }
        else
        {
          long long v180 = 0;
        }
        uint64_t v187 = *(void *)v141;
        uint64_t v188 = &v180[12 * v177];
        *((_DWORD *)v188 + 2) = v141[2];
        *(void *)uint64_t v188 = v187;
        int32x2_t v189 = v188;
        if (v173 != v176)
        {
          do
          {
            uint64_t v190 = *(void *)(v173 - 6);
            v173 -= 6;
            __int16 v191 = v173[4];
            *(void *)(v189 - 12) = v190;
            v189 -= 12;
            *((_WORD *)v189 + 4) = v191;
          }
          while (v173 != v176);
          BOOL v173 = (_WORD *)v236;
        }
        uint64_t v192 = &v180[12 * v179];
        long long v175 = v188 + 12;
        *(void *)&long long v236 = v189;
        *((void *)&v236 + 1) = v188 + 12;
        *(void *)&long long v237 = v192;
        if (v173) {
          operator delete(v173);
        }
      }
      else
      {
        uint64_t v174 = *(void *)v141;
        *(_DWORD *)(*((void *)&v236 + 1) + 8) = v141[2];
        *(void *)BOOL v173 = v174;
        long long v175 = v173 + 6;
      }
      *((void *)&v236 + 1) = v175;
LABEL_237:
      v141 += 4;
      if (v141 == v142) {
        goto LABEL_306;
      }
    }
    unsigned __int32 v147 = *(_DWORD **)v145;
    int v148 = v147[40];
    int v149 = v147[1];
LABEL_250:
    uint64_t v155 = *((void *)v147 + 1);
    if (v148) {
      int v156 = v149;
    }
    else {
      int v156 = v155;
    }
    int v154 = *v141;
    if (*v141 < v156) {
      goto LABEL_254;
    }
    goto LABEL_265;
  }
  v212 = (uint64_t *)(a2 + 4184);
  while (1)
  {
    uint64_t v51 = v50;
    if (*((unsigned char *)v7 + 96) != 1) {
      break;
    }
LABEL_75:
    uint64_t v50 = v51 + 9;
    uint64_t v7 = v51;
    if (v51 + 9 == v34) {
      goto LABEL_233;
    }
  }
  long long v252 = 0u;
  long long v253 = 0u;
  long long v251 = 0u;
  char v254 = *((unsigned char *)v7 + 128);
  uint64_t v255 = *(uint64_t *)((char *)v7 + 132);
  char v256 = *((unsigned char *)v7 + 140);
  char v257 = *((unsigned char *)v7 + 142);
  uint64_t v52 = v7[13];
  uint64_t v53 = v7[14];
  v207 = v7;
  for (*(void *)&long long v258 = (char *)&v252 + 8; v52 != v53; v52 += 40)
  {
    *(_OWORD *)uint64_t v221 = *(_OWORD *)v52;
    *(_DWORD *)&v221[16] = *(_DWORD *)(v52 + 16);
    *(void *)&v222[0] = *(void *)(v52 + 24);
    BYTE8(v222[0]) = *(unsigned char *)(v52 + 32);
    sub_A0F948((char ***)&v258, (long long *)v221);
  }
  uint64_t v54 = *v51;
  if (*v51 == v207[10])
  {
LABEL_206:
    uint64_t v128 = v233.i64[1];
    if (v233.i64[1] >= (unint64_t)v234)
    {
      v233.i64[1] = sub_A14950(&v233, (uint64_t *)&v251);
      int v129 = 1;
      uint64_t v130 = (void *)*((void *)&v252 + 1);
      if (!*((void *)&v252 + 1)) {
        goto LABEL_211;
      }
    }
    else
    {
      sub_9F7A40((void *)v233.i64[1], (uint64_t *)&v251);
      v233.i64[1] = v128 + 64;
      int v129 = 1;
      uint64_t v130 = (void *)*((void *)&v252 + 1);
      if (!*((void *)&v252 + 1)) {
        goto LABEL_211;
      }
    }
    goto LABEL_210;
  }
  char v208 = v207 + 18;
  uint64_t v210 = v51;
  while (2)
  {
    int v226 = 0;
    long long v225 = 0u;
    long long v223 = 0u;
    memset(v224, 0, sizeof(v224));
    memset(v222, 0, sizeof(v222));
    *(_OWORD *)&v221[8] = 0u;
    v227[0] = 1;
    *(void *)&v227[4] = 0x8000000080000000;
    v227[12] = 0;
    *(_DWORD *)uint64_t v221 = v54 != *v51;
    v217[0] = 0;
    v217[1] = 0;
    uint64_t v218 = 0;
    sub_A26A18(a2, v54, (char **)&v247);
    uint64_t v56 = (unsigned int *)v247;
    uint64_t v57 = v248;
    v214 = (unsigned int *)v54;
    if (v247 == v248) {
      goto LABEL_95;
    }
    uint64_t v58 = v54 + 8;
    uint64_t v59 = v54 + 20;
    int v60 = v228;
    do
    {
      while (1)
      {
        *(void *)&v259[8] = 0x8000000080000000;
        *(_WORD *)&v259[16] = 0;
        *(void *)&v259[20] = 0x8000000080000000;
        *(_WORD *)&v259[28] = 0;
        *(_DWORD *)&v259[32] = -1;
        *(_WORD *)&v259[36] = 0;
        v259[44] = 0;
        LODWORD(v258) = v60;
        *(void *)((char *)&v258 + 4) = *(void *)v56;
        HIDWORD(v258) = v56[2];
        *(void *)char v259 = *(void *)(v56 + 3);
        int v61 = *(_DWORD *)(v54 + 44);
        if (v61 != -1) {
          break;
        }
        *(void *)&v259[8] = sub_A0FAA0(v212, v56, v56[3], 0x7FFFFFFF);
        *(_WORD *)&v259[16] = v65;
        *(void *)&v259[20] = sub_A0FDF4(v212, v56, v56[4], 0x7FFFFFFF);
        *(_WORD *)&v259[28] = v66;
        uint64_t v54 = (uint64_t)v214;
        BOOL v64 = (char *)v217[1];
        if (v217[1] < v218) {
          goto LABEL_91;
        }
LABEL_86:
        v217[1] = sub_A102A8(v217, (uint64_t)&v258);
        v56 += 5;
        ++v60;
        if (v56 == v57) {
          goto LABEL_94;
        }
      }
      uint64_t v62 = *(void *)v58;
      *(_WORD *)&v259[16] = *(_WORD *)(v58 + 8);
      *(void *)&v259[8] = v62;
      uint64_t v63 = *(void *)v59;
      *(_WORD *)&v259[28] = *(_WORD *)(v59 + 8);
      *(void *)&v259[20] = v63;
      *(_DWORD *)&v259[32] = v61;
      BOOL v64 = (char *)v217[1];
      if (v217[1] >= v218) {
        goto LABEL_86;
      }
LABEL_91:
      *((_DWORD *)v64 + 272) = -1;
      long long v68 = *(_OWORD *)v259;
      long long v67 = *(_OWORD *)&v259[16];
      long long v69 = v258;
      *(void *)(v64 + 46) = *(void *)&v259[30];
      *((_OWORD *)v64 + 1) = v68;
      *((_OWORD *)v64 + 2) = v67;
      *(_OWORD *)BOOL v64 = v69;
      int v70 = v259[44];
      v64[60] = v259[44];
      if (v70) {
        *((_DWORD *)v64 + 14) = *(_DWORD *)&v259[40];
      }
      *((_DWORD *)v64 + 272) = 0;
      v217[1] = v64 + 1096;
      v56 += 5;
      ++v60;
    }
    while (v56 != v57);
LABEL_94:
    int v228 = v60;
    uint64_t v56 = (unsigned int *)v247;
LABEL_95:
    uint64_t v51 = v210;
    if (v56)
    {
      v248 = v56;
      operator delete(v56);
    }
    long long v71 = (char *)v217[0];
    if (v217[0] == v217[1])
    {
      *(_OWORD *)uint64_t __p = 0u;
      long long v250 = 0u;
      if (!v217[0]) {
        goto LABEL_114;
      }
    }
    else
    {
      BYTE8(v250) = 1;
      sub_8EC358(__p, (uint64_t *)v217);
      long long v71 = (char *)v217[0];
      if (!v217[0]) {
        goto LABEL_114;
      }
    }
    uint64_t v72 = v71;
    if (v217[1] != v71)
    {
      uint64_t v73 = (char *)v217[1] - 1064;
      do
      {
        int v75 = *((_DWORD *)v73 + 264);
        if (v75 == 3)
        {
          sub_3AFFFC((uint64_t)v73);
        }
        else if (v75 == 1)
        {
          long long v76 = (void *)*((void *)v73 + 2);
          if (v76)
          {
            *((void *)v73 + 3) = v76;
            operator delete(v76);
          }
        }
        else if (!v75 && v73[28])
        {
          unsigned char v73[28] = 0;
        }
        uint64_t v74 = v73 - 32;
        v73 -= 1096;
      }
      while (v74 != v71);
      uint64_t v72 = (char *)v217[0];
    }
    v217[1] = v71;
    operator delete(v72);
LABEL_114:
    if (!BYTE8(v250))
    {
      *(void *)(v206 + 176) = 0;
      *(_OWORD *)(v206 + 144) = 0u;
      *(_OWORD *)(v206 + 160) = 0u;
      *(_OWORD *)(v206 + 112) = 0u;
      *(_OWORD *)(v206 + 128) = 0u;
      *(_OWORD *)(v206 + 80) = 0u;
      *(_OWORD *)(v206 + 96) = 0u;
      *(_OWORD *)(v206 + 48) = 0u;
      *(_OWORD *)(v206 + 64) = 0u;
      *(_OWORD *)(v206 + 16) = 0u;
      *(_OWORD *)(v206 + 32) = 0u;
      *(_OWORD *)uint64_t v206 = 0u;
      goto LABEL_216;
    }
    uint64_t v77 = __p[0];
    uint32x2_t v78 = (char *)__p[1];
    if (__p[0] != __p[1])
    {
      char v79 = *((unsigned char *)v214 + 156);
      char v80 = *((unsigned char *)v214 + 159);
      unint64_t v81 = (char *)__p[1] - (char *)__p[0] - 1096;
      unsigned int v82 = (char *)__p[0];
      if (v81 < 0x448) {
        goto LABEL_343;
      }
      unint64_t v83 = v81 / 0x448 + 1;
      unsigned int v82 = (char *)__p[0] + 1096 * (v83 & 0x7FFFFFFFFFFFFELL);
      uint64_t v84 = v83 & 0x7FFFFFFFFFFFFELL;
      long long v85 = __p[0];
      do
      {
        v85[52] = v79;
        v85[1148] = v79;
        v85[53] = v80;
        v85[1149] = v80;
        v85 += 2192;
        v84 -= 2;
      }
      while (v84);
      if (v83 != (v83 & 0x7FFFFFFFFFFFFELL))
      {
LABEL_343:
        do
        {
          v82[52] = v79;
          v82[53] = v80;
          v82 += 1096;
        }
        while (v82 != v78);
      }
    }
    sub_A0EADC((uint64_t *)&v221[8], *(uint64_t *)&v221[16], (uint64_t)v77, (uint64_t)v78, 0xE21A291C077975B9 * ((v78 - v77) >> 3));
    if ((unint64_t)v208 >= v209[26])
    {
LABEL_161:
      sub_A0CB8C(&v258, a2, (uint64_t)v214, 0);
      sub_9C1848(&v223, (char *)v258, *((char **)&v258 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)&v258 + 1) - v258) >> 2));
      sub_9C1848((void *)v222 + 1, *(char **)&v259[8], *(char **)&v259[16], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)&v259[16] - *(void *)&v259[8]) >> 2));
      sub_A0CB8C(v217, a2, (uint64_t)v214, 1);
      if (v224[1])
      {
        v224[2] = v224[1];
        operator delete((void *)v224[1]);
      }
      *(_OWORD *)&v224[1] = *(_OWORD *)v217;
      v224[3] = v218;
      v217[1] = 0;
      uint64_t v218 = 0;
      v217[0] = 0;
      if (v219)
      {
        v220 = v219;
        operator delete(v219);
        if (v217[0])
        {
          v217[1] = v217[0];
          operator delete(v217[0]);
        }
      }
      uint64_t v101 = (int *)*((void *)v214 + 15);
      long long v100 = (int *)*((void *)v214 + 16);
      if (v101 != v100)
      {
        long long v102 = (_DWORD *)*((void *)&v225 + 1);
        char v213 = (int *)*((void *)v214 + 16);
        do
        {
          while (1)
          {
            int v104 = *v101;
            int v103 = v101[1];
            int v106 = v101[2];
            int v105 = v101[3];
            int v107 = v101[4];
            uint64_t v108 = *((void *)v101 + 3);
            char v109 = *((unsigned char *)v101 + 32);
            if (v102 >= (_DWORD *)v226) {
              break;
            }
            *long long v102 = v104;
            v102[1] = v103;
            v102[2] = v106;
            v102[3] = v105;
            v102[4] = v107;
            *((void *)v102 + 3) = v108;
            *((unsigned char *)v102 + 32) = v109;
            *(_DWORD *)((char *)v102 + 33) = v217[0];
            v102[9] = *(_DWORD *)((char *)v217 + 3);
            *((void *)&v225 + 1) = v102 + 10;
            v101 += 10;
            v102 += 10;
            if (v101 == v100) {
              goto LABEL_186;
            }
          }
          long long v110 = (_DWORD *)v225;
          unint64_t v111 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v102 - v225) >> 3);
          unint64_t v112 = v111 + 1;
          if (v111 + 1 > 0x666666666666666) {
            sub_2E00();
          }
          if (0x999999999999999ALL * ((uint64_t)&v226[-v225] >> 3) > v112) {
            unint64_t v112 = 0x999999999999999ALL * ((uint64_t)&v226[-v225] >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v226[-v225] >> 3) >= 0x333333333333333) {
            unint64_t v113 = 0x666666666666666;
          }
          else {
            unint64_t v113 = v112;
          }
          if (v113)
          {
            if (v113 > 0x666666666666666) {
              sub_188D718();
            }
            int v215 = *v101;
            int v216 = v101[1];
            unint64_t v114 = v113;
            long long v115 = (char *)operator new(40 * v113);
            unint64_t v113 = v114;
            int v104 = v215;
            int v103 = v216;
          }
          else
          {
            long long v115 = 0;
          }
          long long v116 = &v115[40 * v111];
          *(_DWORD *)long long v116 = v104;
          *((_DWORD *)v116 + 1) = v103;
          *((_DWORD *)v116 + 2) = v106;
          *((_DWORD *)v116 + 3) = v105;
          *((_DWORD *)v116 + 4) = v107;
          *((void *)v116 + 3) = v108;
          v116[32] = v109;
          long long v117 = v116;
          if (v102 != v110)
          {
            do
            {
              long long v118 = *(_OWORD *)(v102 - 10);
              long long v119 = *(_OWORD *)(v102 - 6);
              *(v117 - 8) = *((unsigned char *)v102 - 8);
              *(_OWORD *)(v117 - 24) = v119;
              *(_OWORD *)(v117 - 40) = v118;
              v117 -= 40;
              v102 -= 10;
            }
            while (v102 != v110);
            long long v102 = (_DWORD *)v225;
          }
          long long v120 = v116 + 40;
          *(void *)&long long v225 = v117;
          *((void *)&v225 + 1) = v116 + 40;
          int v226 = &v115[40 * v113];
          if (v102) {
            operator delete(v102);
          }
          long long v100 = v213;
          *((void *)&v225 + 1) = v120;
          v101 += 10;
          long long v102 = v120;
        }
        while (v101 != v213);
      }
LABEL_186:
      v227[0] = *((unsigned char *)v214 + 144);
      *(void *)&v227[4] = *(void *)(v214 + 37);
      v227[12] = *((unsigned char *)v214 + 157);
      uint64_t v121 = *((void *)&v251 + 1);
      if (*((void *)&v251 + 1) >= (unint64_t)v252)
      {
        uint64_t v122 = sub_A14704((uint64_t *)&v251, (uint64_t)v221);
        uint64_t v51 = v210;
      }
      else
      {
        sub_9F7CDC(*((uint64_t *)&v251 + 1), (uint64_t)v221);
        uint64_t v51 = v210;
        uint64_t v122 = v121 + 144;
      }
      *((void *)&v251 + 1) = v122;
      if (*(void *)&v259[8])
      {
        *(void *)&v259[16] = *(void *)&v259[8];
        operator delete(*(void **)&v259[8]);
      }
      if ((void)v258)
      {
        *((void *)&v258 + 1) = v258;
        operator delete((void *)v258);
      }
      if (BYTE8(v250))
      {
        BOOL v123 = (char *)__p[0];
        if (__p[0])
        {
          BOOL v55 = __p[0];
          if (__p[1] != __p[0])
          {
            long long v124 = (char *)__p[1] - 1064;
            do
            {
              int v126 = *((_DWORD *)v124 + 264);
              if (v126 == 3)
              {
                sub_3AFFFC((uint64_t)v124);
              }
              else if (v126 == 1)
              {
                long long v127 = (void *)*((void *)v124 + 2);
                if (v127)
                {
                  *((void *)v124 + 3) = v127;
                  operator delete(v127);
                }
              }
              else if (!v126 && v124[28])
              {
                v124[28] = 0;
              }
              uint64_t v125 = v124 - 32;
              v124 -= 1096;
            }
            while (v125 != v123);
            BOOL v55 = __p[0];
          }
          __p[1] = v123;
          operator delete(v55);
        }
      }
      sub_9BEAA8(v221);
      uint64_t v54 = (uint64_t)(v214 + 42);
      if (v214 + 42 == (unsigned int *)v207[10]) {
        goto LABEL_206;
      }
      continue;
    }
    break;
  }
  long long v86 = (_DWORD *)(*v208 + 168 * *v214);
  int v88 = v86[5];
  int v87 = v86[6];
  if (v86[4] == v87)
  {
    BOOL v91 = v88 == -3 && v87 == 1 && v86[2] <= v86[1];
    if (v86[3] == v88) {
      goto LABEL_161;
    }
  }
  else
  {
    BOOL v91 = v88 == -3 && v87 == 1 && v86[2] <= v86[1];
  }
  if (v91) {
    goto LABEL_161;
  }
  sub_A0BF68((uint64_t)&v258, a2, a3, (uint64_t)v86, a5, &v228);
  if (v259[8])
  {
    sub_A0EADC((uint64_t *)&v221[8], *(uint64_t *)&v221[16], v258, *((uint64_t *)&v258 + 1), 0xE21A291C077975B9 * ((uint64_t)(*((void *)&v258 + 1) - v258) >> 3));
    if (v259[8])
    {
      uint64_t v94 = v258;
      if ((void)v258)
      {
        if (*((void *)&v258 + 1) == (void)v258)
        {
          *((void *)&v258 + 1) = v258;
          uint64_t v99 = (void *)v258;
        }
        else
        {
          uint64_t v95 = *((void *)&v258 + 1) - 1064;
          do
          {
            int v97 = *(_DWORD *)(v95 + 1056);
            if (v97 == 3)
            {
              sub_3AFFFC(v95);
            }
            else if (v97 == 1)
            {
              long long v98 = *(void **)(v95 + 16);
              if (v98)
              {
                *(void *)(v95 + 24) = v98;
                operator delete(v98);
              }
            }
            else if (!v97 && *(unsigned char *)(v95 + 28))
            {
              *(unsigned char *)(v95 + 28) = 0;
            }
            uint64_t v96 = v95 - 32;
            v95 -= 1096;
          }
          while (v96 != v94);
          uint64_t v99 = (void *)v258;
          *((void *)&v258 + 1) = v94;
        }
        operator delete(v99);
      }
    }
    goto LABEL_161;
  }
  *(void *)(v206 + 176) = 0;
  *(_OWORD *)(v206 + 144) = 0u;
  *(_OWORD *)(v206 + 160) = 0u;
  *(_OWORD *)(v206 + 112) = 0u;
  *(_OWORD *)(v206 + 128) = 0u;
  *(_OWORD *)(v206 + 80) = 0u;
  *(_OWORD *)(v206 + 96) = 0u;
  *(_OWORD *)(v206 + 48) = 0u;
  *(_OWORD *)(v206 + 64) = 0u;
  *(_OWORD *)(v206 + 16) = 0u;
  *(_OWORD *)(v206 + 32) = 0u;
  *(_OWORD *)uint64_t v206 = 0u;
  if (BYTE8(v250))
  {
    unsigned int v134 = (char *)__p[0];
    if (__p[0])
    {
      BOOL v135 = __p[0];
      if (__p[1] != __p[0])
      {
        BOOL v136 = (char *)__p[1] - 1064;
        do
        {
          int v138 = *((_DWORD *)v136 + 264);
          if (v138 == 3)
          {
            sub_3AFFFC((uint64_t)v136);
          }
          else if (v138 == 1)
          {
            uint64_t v139 = (void *)*((void *)v136 + 2);
            if (v139)
            {
              *((void *)v136 + 3) = v139;
              operator delete(v139);
            }
          }
          else if (!v138 && v136[28])
          {
            v136[28] = 0;
          }
          unsigned __int32 v137 = v136 - 32;
          v136 -= 1096;
        }
        while (v137 != v134);
        BOOL v135 = __p[0];
      }
      __p[1] = v134;
      operator delete(v135);
    }
  }
LABEL_216:
  sub_9BEAA8(v221);
  int v129 = 0;
  uint64_t v130 = (void *)*((void *)&v252 + 1);
  if (*((void *)&v252 + 1))
  {
LABEL_210:
    *(void *)&long long v253 = v130;
    operator delete(v130);
  }
LABEL_211:
  int64x2_t v131 = (void *)v251;
  if ((void)v251)
  {
    unint64_t v132 = (void *)*((void *)&v251 + 1);
    uint32x2_t v133 = (void *)v251;
    if (*((void *)&v251 + 1) != (void)v251)
    {
      do
        unint64_t v132 = sub_9BEAA8(v132 - 18);
      while (v132 != v131);
      uint32x2_t v133 = (void *)v251;
    }
    *((void *)&v251 + 1) = v131;
    operator delete(v133);
  }
  if (v129)
  {
    uint64_t v8 = v209;
    uint64_t v34 = (uint64_t *)v209[26];
    goto LABEL_75;
  }
LABEL_326:
  if ((void)v243)
  {
    *((void *)&v243 + 1) = v243;
    operator delete((void *)v243);
  }
  if (*((void *)&v237 + 1))
  {
    *(void *)&long long v238 = *((void *)&v237 + 1);
    operator delete(*((void **)&v237 + 1));
  }
  if ((void)v236)
  {
    *((void *)&v236 + 1) = v236;
    operator delete((void *)v236);
  }
  if (*((void *)&v234 + 1))
  {
    *(void *)&long long v235 = *((void *)&v234 + 1);
    operator delete(*((void **)&v234 + 1));
  }
  if (v233.i64[0])
  {
    sub_9F59BC((uint64_t)&v233, (void **)v233.i64[0]);
    operator delete((void *)v233.i64[0]);
  }
}

void sub_A09D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
}

void *sub_A09E5C@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v76 = a3;
  uint64_t v7 = *a2;
  if (*a2 == a2[1])
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(v39, "Cannot generate self-transfer solution from an empty set of stop refs");
    uint64_t v36 = (void *)sub_2F404((uint64_t)exception, v39);
  }
  *(void *)(a6 + 64) = 0;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  int v72 = 0;
  uint64_t v73 = *v7;
  unsigned int v74 = a3;
  unsigned int v75 = a3;
  memset(v68, 0, sizeof(v68));
  char v69 = 1;
  unint64_t v70 = 0x8000000080000000;
  char v71 = 0;
  LODWORD(v67) = 0;
  v68[1] = sub_A14D9C(v68, (uint64_t)&v72);
  *(_OWORD *)uint64_t v62 = 0u;
  long long v63 = 0u;
  *(_OWORD *)int v61 = 0u;
  char v64 = 1;
  unint64_t v65 = 0x8000000080000000;
  __int16 v66 = 0;
  v61[1] = (void *)sub_A14704((uint64_t *)v61, (uint64_t)&v67);
  unint64_t v42 = 0x8000000080000000;
  __int16 v43 = 0;
  unint64_t v44 = 0x8000000080000000;
  __int16 v45 = 0;
  int64x2_t v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  int v52 = -1;
  char v53 = 0;
  int v54 = 0;
  char v55 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v56 = 0;
  char v59 = 0;
  uint64_t v60 = 0x3FF0000000000000;
  uint64_t v12 = sub_A14950(&v46, (uint64_t *)v61);
  unint64_t v14 = *(void *)(a6 + 32);
  unint64_t v13 = *(void *)(a6 + 40);
  v46.i64[1] = v12;
  unint64_t v42 = v76 | ((unint64_t)v76 << 32);
  __int16 v43 = 0;
  unint64_t v44 = v42;
  __int16 v45 = 0;
  char v59 = 0;
  uint64_t v60 = 0x3FF0000000000000;
  if (v14 >= v13)
  {
    uint64_t v15 = sub_A14FB4((uint64_t *)(a6 + 24), (long long *)&v42);
  }
  else
  {
    sub_9F761C(v14, (long long *)&v42);
    uint64_t v15 = v14 + 176;
    *(void *)(a6 + 32) = v14 + 176;
  }
  *(void *)(a6 + 32) = v15;
  *(void *)a6 = a4;
  *(void *)(a6 + 8) = a5;
  *(_DWORD *)(a6 + 16) = 0;
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)v39);
    BOOL v16 = sub_188FC78(v39, (uint64_t)"Generated self-transfer solution at stop ", 41);
    unint64_t v17 = sub_2D1500(v16, **a2);
    sub_188FC78(v17, (uint64_t)" (muid: ", 8);
    unint64_t v18 = **a2;
    if (HIDWORD(v18) != 1 || (v18 + 3) >= 2)
    {
      int v19 = (int *)sub_498D5C(*(void *)(a1 + 4120) + 24, __ROR8__(v18, 32), 0, "stop");
      unint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
      if (*v20 >= 5u && (uint64_t v21 = v20[2]) != 0) {
        uint64_t v22 = *(void *)((char *)v19 + v21);
      }
      else {
        uint64_t v22 = 0;
      }
      int v23 = sub_398020(*(void *)(a1 + 4120) + 24, 0);
      unint64_t v24 = &v23[-*(int *)v23];
      if (*(unsigned __int16 *)v24 >= 0xBu)
      {
        uint64_t v25 = *((unsigned __int16 *)v24 + 5);
        if (v25)
        {
          if (v23[v25]) {
            nullsub_1(v22);
          }
        }
      }
    }
    uint64_t v26 = (void *)std::ostream::operator<<();
    uint64_t v27 = sub_188FC78(v26, (uint64_t)") and departure time ", 21);
    int v28 = (void *)sub_266E4((uint64_t)v27);
    sub_188FC78(v28, (uint64_t)" (solution origin index: ", 25);
    unsigned int v29 = (void *)std::ostream::operator<<();
    sub_188FC78(v29, (uint64_t)"; destination index: ", 21);
    int v30 = (void *)std::ostream::operator<<();
    sub_188FC78(v30, (uint64_t)")", 1);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v38 < 0) {
      operator delete(__p);
    }
    if (v41 < 0) {
      operator delete(v40);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  if (v56)
  {
    uint64_t v57 = v56;
    operator delete(v56);
  }
  if (*((void *)&v50 + 1))
  {
    *(void *)&long long v51 = *((void *)&v50 + 1);
    operator delete(*((void **)&v50 + 1));
  }
  if ((void)v49)
  {
    *((void *)&v49 + 1) = v49;
    operator delete((void *)v49);
  }
  if (*((void *)&v47 + 1))
  {
    *(void *)&long long v48 = *((void *)&v47 + 1);
    operator delete(*((void **)&v47 + 1));
  }
  if (v46.i64[0])
  {
    sub_9F59BC((uint64_t)&v46, (void **)v46.i64[0]);
    operator delete((void *)v46.i64[0]);
  }
  if (v62[1])
  {
    *(void **)&long long v63 = v62[1];
    operator delete(v62[1]);
  }
  int v31 = v61[0];
  if (v61[0])
  {
    uint64_t v32 = v61[1];
    unint64_t v33 = v61[0];
    if (v61[1] != v61[0])
    {
      do
        uint64_t v32 = sub_9BEAA8(v32 - 18);
      while (v32 != v31);
      unint64_t v33 = v61[0];
    }
    v61[1] = v31;
    operator delete(v33);
  }
  return sub_9BEAA8(&v67);
}

void sub_A0A380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a15);
  sub_A0A42C((uint64_t)&a48);
  sub_9BB4F8(&a70);
  sub_9BEAA8(&STACK[0x218]);
  sub_9F3A88(v70);
  _Unwind_Resume(a1);
}

uint64_t sub_A0A42C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 72);
  if (v4)
  {
    *(void *)(a1 + 80) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(void *)(a1 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void ***)(a1 + 24);
  if (v6)
  {
    sub_9F59BC(a1 + 24, v6);
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_A0A4AC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  uint64_t v5 = *(void **)(a2 + 8);
  for (uint64_t i = *(void **)(a2 + 16); v5 != i; v5 += 37)
  {
    if (v5[25] == v5[26])
    {
      LODWORD(v16[0]) = 40;
      unint64_t v12 = *(void *)(a4 + 8);
      if (v12 < *(void *)(a4 + 16))
      {
        *(_DWORD *)unint64_t v12 = 40;
        *(void *)(v12 + 8) = 0x8000000080000000;
        *(_WORD *)(v12 + 16) = 0;
        *(void *)(v12 + 20) = 0x8000000080000000;
        *(_WORD *)(v12 + 28) = 0;
        *(_OWORD *)(v12 + 32) = 0u;
        *(_OWORD *)(v12 + 48) = 0u;
        *(_OWORD *)(v12 + 64) = 0u;
        *(_OWORD *)(v12 + 80) = 0u;
        *(_OWORD *)(v12 + 96) = 0u;
        *(_OWORD *)(v12 + 112) = 0u;
        *(_DWORD *)(v12 + 128) = -1;
        *(unsigned char *)(v12 + 132) = 0;
        *(_DWORD *)(v12 + 136) = 0;
        *(unsigned char *)(v12 + 140) = 0;
        *(void *)(v12 + 152) = 0;
        *(void *)(v12 + 160) = 0;
        *(void *)(v12 + 144) = 0;
        *(unsigned char *)(v12 + 168) = 0;
        *(void *)(v12 + 176) = 0x3FF0000000000000;
        uint64_t v9 = (char *)(v12 + 184);
      }
      else
      {
        uint64_t v9 = sub_A15220((char **)a4, v16);
      }
      *(void *)(a4 + 8) = v9;
    }
    else
    {
      uint64_t v15 = 0;
      sub_A086D8((uint64_t)v16, a1, a3, v5, &v15);
      if (v17)
      {
        int v10 = *(_DWORD **)(a4 + 8);
        if ((unint64_t)v10 >= *(void *)(a4 + 16))
        {
          uint64_t v11 = sub_A154CC((char **)a4, v16);
        }
        else
        {
          *int v10 = 0;
          sub_9F761C((uint64_t)(v10 + 2), v16);
          uint64_t v11 = (char *)(v10 + 46);
          *(void *)(a4 + 8) = v10 + 46;
        }
      }
      else
      {
        int v14 = 3;
        unint64_t v13 = *(void *)(a4 + 8);
        if (v13 >= *(void *)(a4 + 16))
        {
          uint64_t v11 = sub_A15220((char **)a4, &v14);
        }
        else
        {
          *(_DWORD *)unint64_t v13 = 3;
          *(void *)(v13 + 8) = 0x8000000080000000;
          *(_WORD *)(v13 + 16) = 0;
          *(void *)(v13 + 20) = 0x8000000080000000;
          *(_WORD *)(v13 + 28) = 0;
          *(_OWORD *)(v13 + 32) = 0u;
          *(_OWORD *)(v13 + 48) = 0u;
          *(_OWORD *)(v13 + 64) = 0u;
          *(_OWORD *)(v13 + 80) = 0u;
          *(_OWORD *)(v13 + 96) = 0u;
          *(_OWORD *)(v13 + 112) = 0u;
          *(_DWORD *)(v13 + 128) = -1;
          *(unsigned char *)(v13 + 132) = 0;
          *(_DWORD *)(v13 + 136) = 0;
          *(unsigned char *)(v13 + 140) = 0;
          *(void *)(v13 + 152) = 0;
          *(void *)(v13 + 160) = 0;
          *(void *)(v13 + 144) = 0;
          *(unsigned char *)(v13 + 168) = 0;
          *(void *)(v13 + 176) = 0x3FF0000000000000;
          uint64_t v11 = (char *)(v13 + 184);
        }
      }
      *(void *)(a4 + 8) = v11;
      if (v17) {
        sub_A14674(v16);
      }
    }
  }
}

void sub_A0A6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a34)
  {
    sub_A14674(&a12);
    sub_A00DD8(v34);
    _Unwind_Resume(a1);
  }
  sub_A00DD8(v34);
  _Unwind_Resume(a1);
}

void sub_A0A728(uint64_t a1@<X0>, int *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = a3;
  *(_OWORD *)(a5 + 112) = 0u;
  BOOL v201 = (void *)(a5 + 112);
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 92) = 0u;
  *(_DWORD *)(a5 + 144) = 1065353216;
  *(_DWORD *)(a5 + 4) = a2[1];
  uint64_t v6 = a3[6];
  uint64_t v207 = a3[7];
  if (v6 != v207)
  {
    std::string v209 = 0;
    uint64_t v203 = a5 + 56;
    uint64_t v204 = (void *)(a1 + 4136);
    int v226 = (uint64_t *)(a1 + 4184);
    while (1)
    {
      *(_OWORD *)int v228 = xmmword_20EB6B0;
      LODWORD(v229) = -1;
      __src = 0;
      uint64_t v236 = 0;
      long long v234 = 0;
      unint64_t v231 = 0;
      __int16 v232 = 0;
      __int16 v230 = 0;
      unsigned int v233 = 0;
      char v237 = 1;
      unint64_t v238 = 0x8000000080000000;
      v239[1] = 0;
      uint64_t v240 = 0;
      v239[0] = 0;
      if (*(_DWORD *)(v6 + 120) != -1) {
        unsigned int v233 = *(_DWORD *)(v6 + 120);
      }
      int v241 = 0;
      uint64_t v7 = *(void *)(v6 + 104) - *(void *)(v6 + 96);
      if (v7) {
        break;
      }
LABEL_100:
      sub_A15744((uint64_t)v249, a1, v6 + 124);
      *(_OWORD *)int v228 = *(_OWORD *)v249;
      LODWORD(v229) = *(_DWORD *)v250;
      uint64_t v80 = *(void *)(v6 + 184);
      uint64_t v81 = *(void *)(v6 + 192);
      if (v80 != v81)
      {
        unsigned int v82 = (__n128 *)__src;
        do
        {
          *(_OWORD *)char v249 = *(_OWORD *)v80;
          *(_DWORD *)long long v250 = *(_DWORD *)(v80 + 16);
          *(void *)&v250[8] = *(void *)(v80 + 24);
          v250[16] = *(unsigned char *)(v80 + 32);
          unsigned int v82 = (__n128 *)((char *)sub_A15B94(&v234, v82, (__n128 *)v249) + 40);
          v80 += 40;
        }
        while (v80 != v81);
      }
      char v237 = *(unsigned char *)(v6 + 208);
      unint64_t v238 = *(void *)(v6 + 212);
      unsigned int v83 = *(_DWORD *)(v6 + 172);
      uint64_t v84 = (int *)sub_A11094(v204, *(void *)(v6 + 152));
      long long v85 = (unsigned __int16 *)((char *)v84 - *v84);
      if (*v85 >= 9u && (uint64_t v86 = v85[4]) != 0) {
        int v87 = (unsigned int *)((char *)v84 + v86 + *(unsigned int *)((char *)v84 + v86));
      }
      else {
        int v87 = 0;
      }
      int v88 = (char *)__ROR8__(*(void *)sub_A10764(v87, v83), 32);
      uint64_t v244 = (void *)0x1FFFFFFFELL;
      BOOL v245 = v88;
      if (sub_A0E0A8(a4, (uint64_t *)&v244))
      {
        long long v89 = sub_A0E0A8(a4, (uint64_t *)&v244);
        if (!v89) {
          goto LABEL_250;
        }
        if (v89[4] == v89[5])
        {
          int v97 = v241++;
          int v98 = *a2;
          *(void **)((char *)v249 + 4) = v88;
          LODWORD(v249[0]) = v97;
          HIDWORD(v249[1]) = v98;
          *(_DWORD *)long long v250 = v98;
          int v252 = 4;
          sub_A15E60(__p, (uint64_t)v249, 1uLL);
          if (v252 == 3)
          {
            sub_3AFFFC((uint64_t)&v250[16]);
          }
          else if (v252 == 1 && *(void *)&v250[32])
          {
            uint64_t v251 = *(void *)&v250[32];
            operator delete(*(void **)&v250[32]);
          }
        }
        else
        {
          long long v90 = sub_A0E0A8(a4, (uint64_t *)&v244);
          if (!v90) {
LABEL_250:
          }
            sub_5AE8("unordered_map::at: key not found");
          sub_A0D4F8((uint64_t)v249, a1, (unsigned int *)v90[4], (unsigned int *)v90[5], *a2, &v241);
          *(_OWORD *)uint64_t __p = *(_OWORD *)v249;
          *(void *)&long long v248 = *(void *)v250;
        }
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v248 = 0;
      }
      BOOL v91 = (char *)v239[0];
      if (v239[0])
      {
        std::string v92 = v239[0];
        if (v239[1] != v239[0])
        {
          long long v93 = (char *)v239[1] - 1064;
          do
          {
            int v95 = *((_DWORD *)v93 + 264);
            if (v95 == 3)
            {
              sub_3AFFFC((uint64_t)v93);
            }
            else if (v95 == 1)
            {
              uint64_t v96 = (void *)*((void *)v93 + 2);
              if (v96)
              {
                *((void *)v93 + 3) = v96;
                operator delete(v96);
              }
            }
            else if (!v95 && v93[28])
            {
              v93[28] = 0;
            }
            uint64_t v94 = v93 - 32;
            v93 -= 1096;
          }
          while (v94 != v91);
          std::string v92 = v239[0];
        }
        v239[1] = v91;
        operator delete(v92);
      }
      *(_OWORD *)int v239 = *(_OWORD *)__p;
      uint64_t v240 = v248;
      std::string v209 = (char *)sub_A16000(v203, (uint64_t)v209, (uint64_t)v228) + 120;
      sub_8EC658(v228);
      v6 += 248;
      if (v6 == v207) {
        goto LABEL_134;
      }
    }
    unint64_t v8 = 0;
    unint64_t v213 = 0xEEEEEEEEEEEEEEEFLL * (v7 >> 2);
    uint64_t v215 = v6;
LABEL_10:
    uint64_t v10 = *(void *)(v6 + 96);
    uint64_t v244 = 0;
    BOOL v245 = 0;
    unint64_t v246 = 0;
    sub_A27088(a1, v10 + 60 * v8, &v242);
    unint64_t v12 = (unsigned int *)v242;
    uint64_t v11 = (unsigned int *)v243;
    unint64_t v223 = v8;
    uint64_t v220 = v10;
    unint64_t v13 = 0;
    if (v242 == v243) {
      goto LABEL_21;
    }
    uint64_t v14 = v10 + 60 * v8;
    uint64_t v15 = (int *)(v14 + 40);
    BOOL v16 = (uint64_t *)(v14 + 4);
    char v17 = (uint64_t *)(v14 + 16);
    int v18 = v241;
    while (1)
    {
      while (1)
      {
        *(void *)&v250[8] = 0x8000000080000000;
        *(_WORD *)&v250[16] = 0;
        *(void *)&v250[20] = 0x8000000080000000;
        *(_WORD *)&v250[28] = 0;
        *(_DWORD *)&v250[32] = -1;
        *(_WORD *)&v250[36] = 0;
        BYTE4(v251) = 0;
        LODWORD(v249[0]) = v18;
        *(void **)((char *)v249 + 4) = *(void **)v12;
        HIDWORD(v249[1]) = v12[2];
        *(void *)long long v250 = *(void *)(v12 + 3);
        int v19 = *v15;
        if (*v15 != -1) {
          break;
        }
        *(void *)&v250[8] = sub_A0FAA0(v226, v12, v12[3], 0x7FFFFFFF);
        *(_WORD *)&v250[16] = v26;
        *(void *)&v250[20] = sub_A0FDF4(v226, v12, v12[4], 0x7FFFFFFF);
        *(_WORD *)&v250[28] = v27;
        unint64_t v13 = v245;
        if ((unint64_t)v245 < v246) {
          goto LABEL_14;
        }
LABEL_19:
        unint64_t v13 = sub_A102A8(&v244, (uint64_t)v249);
        BOOL v245 = v13;
        v12 += 5;
        ++v18;
        if (v12 == v11) {
          goto LABEL_20;
        }
      }
      uint64_t v20 = *v16;
      *(_WORD *)&v250[16] = *((_WORD *)v16 + 4);
      *(void *)&v250[8] = v20;
      uint64_t v21 = *v17;
      *(_WORD *)&v250[28] = *((_WORD *)v17 + 4);
      *(void *)&v250[20] = v21;
      *(_DWORD *)&v250[32] = v19;
      if ((unint64_t)v13 >= v246) {
        goto LABEL_19;
      }
LABEL_14:
      *((_DWORD *)v13 + 272) = -1;
      long long v23 = *(_OWORD *)v250;
      long long v22 = *(_OWORD *)&v250[16];
      long long v24 = *(_OWORD *)v249;
      *(void *)(v13 + 46) = *(void *)&v250[30];
      *((_OWORD *)v13 + 1) = v23;
      *((_OWORD *)v13 + 2) = v22;
      *(_OWORD *)unint64_t v13 = v24;
      int v25 = BYTE4(v251);
      v13[60] = BYTE4(v251);
      if (v25) {
        *((_DWORD *)v13 + 14) = v251;
      }
      *((_DWORD *)v13 + 272) = 0;
      v13 += 1096;
      BOOL v245 = v13;
      v12 += 5;
      ++v18;
      if (v12 == v11)
      {
LABEL_20:
        int v241 = v18;
        unint64_t v12 = (unsigned int *)v242;
        unint64_t v8 = v223;
        uint64_t v10 = v220;
LABEL_21:
        if (v12)
        {
          long long v243 = (char *)v12;
          operator delete(v12);
          unint64_t v13 = v245;
        }
        int v28 = v244;
        if (v244 == v13)
        {
          *(_OWORD *)uint64_t __p = 0u;
          long long v248 = 0u;
          if (v13) {
            goto LABEL_38;
          }
          goto LABEL_54;
        }
        BYTE8(v248) = 1;
        __p[1] = 0;
        *(void *)&long long v248 = 0;
        __p[0] = 0;
        unsigned int v29 = v245;
        int64_t v30 = v245 - (unsigned char *)v244;
        if (v245 == v244)
        {
          unint64_t v13 = (char *)v244;
          unint64_t v8 = v223;
          if (v244) {
            goto LABEL_38;
          }
LABEL_54:
          if (!BYTE8(v248)) {
            goto LABEL_51;
          }
          goto LABEL_55;
        }
        unint64_t v31 = 0xE21A291C077975B9 * (v30 >> 3);
        if (v31 >= 0x3BCBADC7F10D15) {
          sub_2E00();
        }
        uint64_t v32 = (char *)operator new(v30);
        uint64_t v33 = 0;
        __p[0] = v32;
        __p[1] = v32;
        *(void *)&long long v248 = &v32[1096 * v31];
        do
        {
          uint64_t v35 = &v32[v33];
          uint64_t v36 = &v28[v33];
          *(_DWORD *)&v32[v33 + 1088] = *(_DWORD *)&v28[v33 + 1088];
          switch(*(_DWORD *)&v28[v33 + 1088])
          {
            case 0:
              long long v37 = *(_OWORD *)v36;
              long long v38 = *((_OWORD *)v36 + 1);
              long long v39 = *((_OWORD *)v36 + 2);
              *(void *)(v35 + 46) = *(void *)(v36 + 46);
              *((_OWORD *)v35 + 1) = v38;
              *((_OWORD *)v35 + 2) = v39;
              *(_OWORD *)uint64_t v35 = v37;
              int v40 = v28[v33 + 60];
              v32[v33 + 60] = v40;
              if (v40) {
                *(_DWORD *)&v32[v33 + 56] = *(_DWORD *)&v28[v33 + 56];
              }
              break;
            case 1:
              long long v42 = *(_OWORD *)v36;
              long long v43 = *((_OWORD *)v36 + 1);
              *(_OWORD *)(v35 + 28) = *(_OWORD *)(v36 + 28);
              *(_OWORD *)uint64_t v35 = v42;
              *((_OWORD *)v35 + 1) = v43;
              unint64_t v44 = &v32[v33];
              *(void *)&v32[v33 + 48] = 0;
              *((void *)v44 + 7) = 0;
              *((void *)v44 + 8) = 0;
              int64x2_t v46 = *(unsigned char **)&v28[v33 + 48];
              __int16 v45 = *(unsigned char **)&v28[v33 + 56];
              int64_t v47 = v45 - v46;
              if (v45 != v46)
              {
                if (v47 < 0) {
                  sub_2E00();
                }
                long long v48 = (char *)operator new(v45 - v46);
                *(void *)&v32[v33 + 48] = v48;
                long long v49 = &v48[8 * (v47 >> 3)];
                *((void *)v44 + 7) = v48;
                *((void *)v44 + 8) = v49;
                memcpy(v48, v46, v47);
                *((void *)v44 + 7) = v49;
              }
              v44[72] = v28[v33 + 72];
              break;
            case 2:
            case 4:
              long long v34 = *(_OWORD *)v36;
              *((_DWORD *)v35 + 4) = *((_DWORD *)v36 + 4);
              *(_OWORD *)uint64_t v35 = v34;
              break;
            case 3:
              long long v41 = *(_OWORD *)v36;
              *(_OWORD *)(v35 + 12) = *(_OWORD *)(v36 + 12);
              *(_OWORD *)uint64_t v35 = v41;
              sub_7A3ACC((uint64_t)&v32[v33 + 32], (uint64_t)&v28[v33 + 32]);
              break;
            default:
              break;
          }
          v33 += 1096;
        }
        while (&v28[v33] != v29);
        __p[1] = &v32[v33];
        unint64_t v13 = (char *)v244;
        unint64_t v8 = v223;
        uint64_t v10 = v220;
        if (!v244) {
          goto LABEL_54;
        }
LABEL_38:
        long long v50 = v13;
        if (v245 != v13)
        {
          uint64_t v51 = (uint64_t)(v245 - 1064);
          do
          {
            int v53 = *(_DWORD *)(v51 + 1056);
            if (v53 == 3)
            {
              sub_3AFFFC(v51);
            }
            else if (v53 == 1)
            {
              int v54 = *(void **)(v51 + 16);
              if (v54)
              {
                *(void *)(v51 + 24) = v54;
                operator delete(v54);
              }
            }
            else if (!v53 && *(unsigned char *)(v51 + 28))
            {
              *(unsigned char *)(v51 + 28) = 0;
            }
            int v52 = (char *)(v51 - 32);
            v51 -= 1096;
          }
          while (v52 != v13);
          long long v50 = v244;
        }
        BOOL v245 = v13;
        operator delete(v50);
        if (!BYTE8(v248))
        {
LABEL_51:
          if (v8 <= v233) {
            unsigned int v233 = 0;
          }
          goto LABEL_9;
        }
LABEL_55:
        v249[0] = 0;
        v249[1] = 0;
        *(void *)long long v250 = 0;
        v250[8] = 1;
        uint64_t v9 = __p[0];
        char v55 = __p[1];
        sub_A158F4((uint64_t)v249, (long long *)__p[0], (long long *)__p[1], 0xE21A291C077975B9 * (((char *)__p[1] - (char *)__p[0]) >> 3));
        char v56 = *(unsigned char *)(v10 + 60 * v8 + 56);
        v250[8] = v56;
        uint64_t v57 = v231;
        if (v231 >= v232)
        {
          uint64_t v58 = v230;
          uint64_t v59 = (v231 - v230) >> 5;
          unint64_t v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 59) {
            sub_2E00();
          }
          uint64_t v61 = v232 - v230;
          if ((v232 - v230) >> 4 > v60) {
            unint64_t v60 = v61 >> 4;
          }
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v62 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v62 = v60;
          }
          if (v62 >> 59) {
            sub_188D718();
          }
          long long v63 = (char *)operator new(32 * v62);
          char v64 = &v63[32 * v59];
          *(_OWORD *)char v64 = *(_OWORD *)v249;
          *((void *)v64 + 2) = *(void *)v250;
          v249[1] = 0;
          *(void *)long long v250 = 0;
          v249[0] = 0;
          unsigned char v64[24] = v56;
          unint64_t v65 = v64 + 32;
          if (v57 == v58)
          {
            __int16 v230 = &v63[32 * v59];
            unint64_t v231 = v64 + 32;
            __int16 v232 = &v63[32 * v62];
          }
          else
          {
            uint64_t v66 = 0;
            do
            {
              uint64_t v67 = &v64[v66];
              long long v68 = &v57[v66];
              *((_OWORD *)v67 - 2) = *(_OWORD *)&v57[v66 - 32];
              *((void *)v67 - 2) = *(void *)&v57[v66 - 16];
              *((void *)v68 - 4) = 0;
              *((void *)v68 - 3) = 0;
              *((void *)v68 - 2) = 0;
              *(v67 - 8) = v57[v66 - 8];
              v66 -= 32;
            }
            while (&v57[v66] != v58);
            uint64_t v57 = v230;
            char v69 = v231;
            __int16 v230 = &v64[v66];
            unint64_t v231 = v64 + 32;
            __int16 v232 = &v63[32 * v62];
            if (v69 != v57)
            {
              unint64_t v70 = v69;
              do
              {
                int v72 = (char *)*((void *)v70 - 4);
                v70 -= 32;
                char v71 = v72;
                if (v72)
                {
                  for (uint64_t i = (char *)*((void *)v69 - 3); i != v71; i -= 64)
                  {
                    if (*(i - 4)) {
                      *(i - 4) = 0;
                    }
                  }
                  *((void *)v69 - 3) = v71;
                  operator delete(v71);
                }
                char v69 = v70;
              }
              while (v70 != v57);
            }
          }
          if (v57) {
            operator delete(v57);
          }
          unsigned int v74 = (char *)v249[0];
          unint64_t v231 = v65;
          if (v249[0])
          {
            unsigned int v75 = (char *)v249[1];
            if (v249[1] != v249[0])
            {
              do
              {
                if (*(v75 - 4)) {
                  *(v75 - 4) = 0;
                }
                v75 -= 64;
              }
              while (v75 != v74);
            }
            v249[1] = v74;
            operator delete(v74);
          }
        }
        else
        {
          *(void *)unint64_t v231 = 0;
          *((void *)v57 + 1) = 0;
          *((void *)v57 + 2) = 0;
          *(_OWORD *)uint64_t v57 = *(_OWORD *)v249;
          *((void *)v57 + 2) = *(void *)v250;
          v249[0] = 0;
          v249[1] = 0;
          *(void *)long long v250 = 0;
          v57[24] = v250[8];
          unint64_t v231 = v57 + 32;
        }
        if (v9)
        {
          if (v55 != v9)
          {
            uint64_t v76 = (uint64_t)v55 - 1064;
            do
            {
              int v78 = *(_DWORD *)(v76 + 1056);
              if (v78 == 3)
              {
                sub_3AFFFC(v76);
              }
              else if (v78 == 1)
              {
                char v79 = *(void **)(v76 + 16);
                if (v79)
                {
                  *(void *)(v76 + 24) = v79;
                  operator delete(v79);
                }
              }
              else if (!v78 && *(unsigned char *)(v76 + 28))
              {
                *(unsigned char *)(v76 + 28) = 0;
              }
              uint64_t v77 = (void *)(v76 - 32);
              v76 -= 1096;
            }
            while (v77 != v9);
            uint64_t v9 = __p[0];
          }
          operator delete(v9);
        }
LABEL_9:
        ++v8;
        uint64_t v6 = v215;
        uint64_t v5 = a3;
        if (v8 == v213) {
          goto LABEL_100;
        }
        goto LABEL_10;
      }
    }
  }
LABEL_134:
  uint64_t v99 = v5[3];
  v217 = v5 + 3;
  uint64_t v100 = v5[4];
  if (v99 != v100)
  {
    uint64_t v101 = *(char **)(a5 + 40);
    do
    {
      v249[0] = 0;
      v249[1] = 0;
      *(void *)long long v250 = 0;
      *(_OWORD *)&v250[8] = xmmword_20EB6B0;
      *(_DWORD *)&v250[24] = -1;
      *(_WORD *)&v250[28] = 256;
      long long v102 = *(unsigned int **)(v99 + 72);
      int v103 = *(unsigned int **)(v99 + 80);
      if (v102 != v103)
      {
        int v104 = 0;
        do
        {
          v228[0] = (void *)*v102;
          int v104 = sub_A169A8(v249, v104, (char *)v228) + 8;
          v102 += 4;
        }
        while (v102 != v103);
      }
      sub_A15744((uint64_t)v228, a1, v99 + 96);
      *(_OWORD *)&v250[8] = *(_OWORD *)v228;
      *(_DWORD *)&v250[24] = v229;
      *(_WORD *)&v250[28] = *(_WORD *)(v99 + 156);
      int v105 = sub_A16D30((char **)(a5 + 32), v101, (uint64_t)v249);
      if (v249[0])
      {
        v249[1] = v249[0];
        operator delete(v249[0]);
      }
      uint64_t v101 = v105 + 48;
      v99 += 160;
    }
    while (v99 != v100);
  }
  int v106 = a3;
  uint64_t v107 = *a3;
  uint64_t v205 = a3[1];
  if (*a3 != v205)
  {
    uint64_t v108 = *(void ***)(a5 + 16);
    while (1)
    {
      uint64_t v208 = v107;
      uint64_t v210 = v108;
      v228[0] = 0;
      v228[1] = 0;
      uint64_t v229 = 0;
      LOBYTE(v230) = *(unsigned char *)(v107 + 104);
      uint64_t v110 = *(void *)(v107 + 80);
      uint64_t v212 = *(void *)(v107 + 88);
      if (v110 != v212) {
        break;
      }
LABEL_229:
      unint64_t v193 = sub_A17E28((void ***)(a5 + 8), v210, (__n128 *)v228);
      uint64_t v194 = (char *)v228[0];
      if (v228[0])
      {
        unint64_t v195 = (char *)v228[1];
        char v109 = v228[0];
        if (v228[1] != v228[0])
        {
          do
          {
            uint64_t v196 = (void *)*((void *)v195 - 3);
            if (v196)
            {
              *((void *)v195 - 2) = v196;
              operator delete(v196);
            }
            uint64_t v197 = (void *)*((void *)v195 - 7);
            if (v197)
            {
              *((void *)v195 - 6) = v197;
              operator delete(v197);
            }
            v195 -= 56;
          }
          while (v195 != v194);
          char v109 = v228[0];
        }
        v228[1] = v194;
        operator delete(v109);
      }
      uint64_t v108 = v193 + 4;
      uint64_t v107 = v208 + 112;
      if (v208 + 112 == v205) {
        goto LABEL_237;
      }
    }
    unint64_t v111 = 0;
    while (1)
    {
      v214 = v111;
      uint64_t v216 = v110;
      memset(&v250[16], 0, 24);
      v249[1] = 0;
      *(void *)long long v250 = 0;
      v249[0] = 0;
      v250[8] = *(unsigned char *)(v110 + 104);
      unint64_t v112 = *(unsigned int **)(v110 + 80);
      unint64_t v113 = *(unsigned int **)(v110 + 88);
      if (v112 != v113)
      {
        unint64_t v114 = 0;
        do
        {
          __p[0] = (void *)*v112;
          unint64_t v114 = sub_A169A8(v249, v114, (char *)__p) + 8;
          v112 += 4;
        }
        while (v112 != v113);
        long long v116 = *(unsigned int **)(v216 + 80);
        long long v115 = *(unsigned int **)(v216 + 88);
        unsigned __int8 v219 = v115;
LABEL_155:
        if (v116 != v115) {
          break;
        }
      }
      unint64_t v177 = 126 - 2 * __clz((uint64_t)(*(void *)&v250[24] - *(void *)&v250[16]) >> 3);
      if (*(void *)&v250[24] == *(void *)&v250[16]) {
        uint64_t v178 = 0;
      }
      else {
        uint64_t v178 = v177;
      }
      sub_9141E8(*(uint64_t *)&v250[16], *(int **)&v250[24], (uint64_t)__p, v178, 1);
      long long v180 = *(int **)&v250[16];
      unint64_t v179 = *(int **)&v250[24];
      if (*(void *)&v250[16] != *(void *)&v250[24])
      {
        do
        {
          uint64_t v181 = v180 + 2;
          if (v180 + 2 == *(int **)&v250[24]) {
            goto LABEL_225;
          }
          int v182 = *v180;
          int v183 = v180[2];
          int v184 = *((unsigned __int8 *)v180 + 4);
          int v185 = *((unsigned __int8 *)v180 + 12);
          BOOL v186 = v182 == v183 && v184 == v185;
          long long v180 = v181;
        }
        while (!v186);
        uint64_t v187 = v181 + 2;
        uint64_t v188 = v181 - 2;
        if (v181 + 2 == *(int **)&v250[24])
        {
          int32x2_t v189 = v181;
          if (v181 == *(int **)&v250[24]) {
            goto LABEL_225;
          }
LABEL_224:
          *(void *)&v250[24] = v189;
          goto LABEL_225;
        }
        do
        {
          if (*v188 != *v187 || *((unsigned __int8 *)v188 + 4) != *((unsigned __int8 *)v187 + 4))
          {
            char v191 = *((unsigned char *)v187 + 4);
            v188[2] = *v187;
            v188 += 2;
            *((unsigned char *)v188 + 4) = v191;
          }
          v187 += 2;
        }
        while (v187 != v179);
        int32x2_t v189 = v188 + 2;
        if (v188 + 2 != *(int **)&v250[24]) {
          goto LABEL_224;
        }
      }
LABEL_225:
      uint64_t v192 = sub_A175DC((char **)v228, v214, (uint64_t)v249);
      if (*(void *)&v250[16])
      {
        *(void *)&v250[24] = *(void *)&v250[16];
        operator delete(*(void **)&v250[16]);
      }
      if (v249[0])
      {
        v249[1] = v249[0];
        operator delete(v249[0]);
      }
      unint64_t v111 = v192 + 56;
      uint64_t v110 = v216 + 112;
      if (v216 + 112 == v212) {
        goto LABEL_229;
      }
    }
    uint64_t v117 = sub_A173AC(v217, *v116);
    uint64_t v221 = v116;
    long long v119 = *(unsigned int **)(v117 + 72);
    long long v118 = *(unsigned int **)(v117 + 80);
    for (j = v118; ; long long v118 = j)
    {
      if (v119 == v118)
      {
        long long v115 = v219;
        long long v116 = v221 + 4;
        goto LABEL_155;
      }
      uint64_t v120 = v106[6] + 248 * *v119;
      uint64_t v122 = *(char **)(v120 + 224);
      uint64_t v121 = *(char **)(v120 + 232);
      uint64_t v123 = v121 - v122;
      if (v121 - v122 >= 1)
      {
        uint64_t v124 = v123 >> 3;
        int64_t v125 = *(void *)&v250[16];
        int v126 = *(char **)&v250[24];
        uint64_t v127 = *(void *)&v250[24] - *(void *)&v250[16];
        uint64_t v128 = (uint64_t)(*(void *)&v250[24] - *(void *)&v250[16]) >> 3;
        int v129 = (char *)(*(void *)&v250[16] + ((*(void *)&v250[24] - *(void *)&v250[16]) & 0xFFFFFFFFFFFFFFF8));
        if (v123 >> 3 > (uint64_t)(*(void *)&v250[32] - *(void *)&v250[24]) >> 3)
        {
          unint64_t v130 = v128 + v124;
          if ((unint64_t)(v128 + v124) >> 61) {
            sub_2E00();
          }
          uint64_t v131 = *(void *)&v250[32] - *(void *)&v250[16];
          if ((uint64_t)(*(void *)&v250[32] - *(void *)&v250[16]) >> 2 > v130) {
            unint64_t v130 = v131 >> 2;
          }
          BOOL v132 = (unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8;
          unint64_t v133 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v132) {
            unint64_t v133 = v130;
          }
          unint64_t v224 = v133;
          if (v133)
          {
            if (v133 >> 61) {
              sub_188D718();
            }
            uint64_t v134 = (uint64_t)(*(void *)&v250[24] - *(void *)&v250[16]) >> 3;
            unint64_t v135 = *(void *)&v250[16] + ((*(void *)&v250[24] - *(void *)&v250[16]) & 0xFFFFFFFFFFFFFFF8);
            BOOL v136 = operator new(8 * v133);
            int v129 = (char *)v135;
            uint64_t v128 = v134;
            uint64_t v137 = (uint64_t)&v136[8 * v134];
            int v138 = (char *)(v137 + 8 * v124);
            unint64_t v139 = v123 - 8;
            if ((unint64_t)(v123 - 8) < 0x38)
            {
LABEL_169:
              uint64_t v140 = (char *)v137;
              goto LABEL_186;
            }
          }
          else
          {
            BOOL v136 = 0;
            uint64_t v137 = 8 * v128;
            int v138 = (char *)(8 * v128 + 8 * v124);
            unint64_t v139 = v123 - 8;
            if ((unint64_t)(v123 - 8) < 0x38) {
              goto LABEL_169;
            }
          }
          uint64_t v140 = (char *)v137;
          if ((unint64_t)(&v136[v127 & 0xFFFFFFFFFFFFFFF8] - v122) < 0x20) {
            goto LABEL_253;
          }
          uint64_t v155 = (v139 >> 3) + 1;
          uint64_t v156 = 8 * (v155 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v140 = (char *)(v137 + v156);
          BOOL v157 = &v122[v156];
          int32x2_t v158 = (long long *)(v122 + 16);
          unint64_t v159 = &v136[8 * v128 + 16];
          uint64_t v160 = v155 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v161 = *v158;
            *(v159 - 1) = *(v158 - 1);
            *unint64_t v159 = v161;
            v158 += 2;
            v159 += 2;
            v160 -= 4;
          }
          while (v160);
          uint64_t v122 = v157;
          if (v155 != (v155 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_253:
            do
            {
LABEL_186:
              uint64_t v162 = *(void *)v122;
              v122 += 8;
              *(void *)uint64_t v140 = v162;
              v140 += 8;
            }
            while (v140 != v138);
          }
          if (v126 != (char *)v125)
          {
            uint64_t v163 = 8 * v128;
            uint64_t v164 = v125 - 8;
            do
            {
              BOOL v165 = &v136[v163];
              int v166 = *(_DWORD *)(v164 + v163);
              *(v165 - 4) = *(unsigned char *)(v164 + v163 + 4);
              *((_DWORD *)v165 - 2) = v166;
              v163 -= 8;
            }
            while (v163);
            int v126 = *(char **)&v250[24];
            uint64_t v137 = (uint64_t)v136;
          }
          uint64_t v167 = v126 - v129;
          if (v126 != v129) {
            memmove(v138, v129, v167 - 3);
          }
          int v168 = *(void **)&v250[16];
          *(void *)&v250[16] = v137;
          *(void *)&v250[24] = &v138[v167];
          *(void *)&v250[32] = &v136[8 * v224];
          int v106 = a3;
          if (v168) {
            operator delete(v168);
          }
          goto LABEL_157;
        }
        uint64_t v141 = *(void *)&v250[24] - (void)v129;
        uint64_t v142 = (uint64_t)(*(void *)&v250[24] - (void)v129) >> 3;
        if (v142 >= v124)
        {
          uint64_t v143 = &v122[8 * v124];
          uint64_t v146 = *(char **)&v250[24];
LABEL_176:
          unsigned __int32 v147 = &v129[8 * v124];
          uint64_t v148 = v146 - v147;
          uint64_t v149 = (v146 - v147) >> 3;
          int v150 = &v146[-8 * v124];
          int v151 = v146;
          if (v150 < v126)
          {
            uint64_t v152 = (v127 & 0xFFFFFFFFFFFFFFF8) + v148;
            unint64_t v153 = v125 + v152 + 8;
            if ((unint64_t)v126 > v153) {
              unint64_t v153 = (unint64_t)v126;
            }
            unint64_t v154 = v153 + ~v125 - v152;
            if (v154 < 0x58)
            {
              int v151 = v146;
              goto LABEL_199;
            }
            int v151 = v146;
            if ((unint64_t)&v147[-(v127 & 0xFFFFFFFFFFFFFFF8) - v125] < 0x20) {
              goto LABEL_254;
            }
            uint64_t v169 = (v154 >> 3) + 1;
            uint64_t v170 = 8 * (v169 & 0x3FFFFFFFFFFFFFFCLL);
            v150 += v170;
            int v151 = &v146[v170];
            uint64_t v171 = v146 + 16;
            uint64_t v172 = (long long *)(v125 + 8 * v149 + 8 * v128 + 16);
            uint64_t v173 = v169 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v174 = *v172;
              *(v171 - 1) = *(v172 - 1);
              *uint64_t v171 = v174;
              v171 += 2;
              v172 += 2;
              v173 -= 4;
            }
            while (v173);
            if (v169 != (v169 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_254:
              do
              {
LABEL_199:
                uint64_t v175 = *(void *)v150;
                v150 += 8;
                *(void *)int v151 = v175;
                v151 += 8;
              }
              while (v150 < v126);
            }
          }
          *(void *)&v250[24] = v151;
          if (v146 != v147)
          {
            uint64_t v176 = v129;
            memmove(&v146[-8 * v149], v129, v148 - 3);
            int v129 = v176;
          }
          if (v143 != v122) {
            memmove(v129, v122, v143 - v122 - 3);
          }
          goto LABEL_157;
        }
        uint64_t v143 = &v122[8 * v142];
        int64_t v144 = v121 - v143;
        if (v121 != v143)
        {
          uint64_t v225 = (uint64_t)(*(void *)&v250[24] - *(void *)&v250[16]) >> 3;
          unint64_t v145 = *(void *)&v250[16] + ((*(void *)&v250[24] - *(void *)&v250[16]) & 0xFFFFFFFFFFFFFFF8);
          memmove(*(void **)&v250[24], &v122[8 * v142], v144 - 3);
          int v129 = (char *)v145;
          int v106 = a3;
          uint64_t v128 = v225;
        }
        uint64_t v146 = &v126[v144];
        *(void *)&v250[24] = &v126[v144];
        if (v141 >= 1) {
          goto LABEL_176;
        }
      }
LABEL_157:
      v119 += 4;
    }
  }
LABEL_237:
  int v198 = *((_DWORD *)v106 + 18);
  if (v198 != -1) {
    *(_DWORD *)(a5 + 104) = v198;
  }
  uint64_t v199 = v106[6];
  for (uint64_t k = v106[7]; v199 != k; v199 += 248)
    sub_913EAC(a5 + 80, *(void *)(a5 + 88), *(char **)(v199 + 224), *(char **)(v199 + 232), (uint64_t)(*(void *)(v199 + 232) - *(void *)(v199 + 224)) >> 3);
  sub_A0BE34((uint64_t *)(a5 + 80));
  if (v201 != v106 + 10)
  {
    *(_DWORD *)(a5 + 144) = *((_DWORD *)v106 + 28);
    sub_5A4DC(v201, (uint64_t *)v106[12], 0);
  }
}

void sub_A0B9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
}

void sub_A0B9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (LODWORD(STACK[0x5D0]) != 3)
  {
    if (LODWORD(STACK[0x5D0]) == 1)
    {
      if (__p)
      {
        a66 = (uint64_t)__p;
        operator delete(__p);
      }
    }
    sub_8EC658(&a33);
    sub_A05730(a19);
    _Unwind_Resume(a1);
  }
  sub_3AFFFC(a11);
  sub_8EC658(&a33);
  sub_A05730(a19);
  _Unwind_Resume(a1);
}

void sub_A0BD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (__p)
  {
    operator delete(__p);
    char v64 = a59;
    if (!a59)
    {
LABEL_3:
      unint64_t v65 = a33;
      if (!a33) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    char v64 = a59;
    if (!a59) {
      goto LABEL_3;
    }
  }
  operator delete(v64);
  unint64_t v65 = a33;
  if (!a33)
  {
LABEL_4:
    sub_A05730(a19);
    _Unwind_Resume(a1);
  }
LABEL_7:
  uint64_t v66 = a34;
  uint64_t v67 = v65;
  if ((void *)a34 != v65)
  {
    do
    {
      long long v68 = *(void **)(v66 - 24);
      if (v68)
      {
        *(void *)(v66 - 16) = v68;
        operator delete(v68);
      }
      char v69 = *(void **)(v66 - 56);
      if (v69)
      {
        *(void *)(v66 - 48) = v69;
        operator delete(v69);
      }
      v66 -= 56;
    }
    while ((void *)v66 != v65);
    uint64_t v67 = a33;
  }
  operator delete(v67);
  sub_A05730(a19);
  _Unwind_Resume(a1);
}

uint64_t sub_A0BE34(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (int *)a1[1];
  unint64_t v4 = 126 - 2 * __clz(((uint64_t)v3 - v2) >> 3);
  if (v3 == (int *)v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t result = sub_9141E8(v2, v3, (uint64_t)&v15, v5, 1);
  uint64_t v7 = a1[1];
  if (*a1 != v7)
  {
    uint64_t v8 = *a1 - 8;
    do
    {
      if (v8 + 16 == v7) {
        return result;
      }
      int v9 = *(_DWORD *)(v8 + 8);
      v8 += 8;
    }
    while (v9 != *(_DWORD *)(v8 + 8) || *(unsigned __int8 *)(v8 + 4) != *(unsigned __int8 *)(v8 + 12));
    uint64_t v11 = v8 + 16;
    if (v8 + 16 == v7)
    {
      uint64_t v12 = v8 + 8;
      if (v8 + 8 == v7) {
        return result;
      }
      goto LABEL_22;
    }
    do
    {
      if (*(_DWORD *)v8 != *(_DWORD *)v11 || *(unsigned __int8 *)(v8 + 4) != *(unsigned __int8 *)(v11 + 4))
      {
        char v14 = *(unsigned char *)(v11 + 4);
        *(_DWORD *)(v8 + 8) = *(_DWORD *)v11;
        v8 += 8;
        *(unsigned char *)(v8 + 4) = v14;
      }
      v11 += 8;
    }
    while (v11 != v7);
    uint64_t v12 = v8 + 8;
    if (v8 + 8 != a1[1]) {
LABEL_22:
    }
      a1[1] = v12;
  }
  return result;
}

void sub_A0BF68(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, _DWORD *a6)
{
  long long v92 = *(_OWORD *)(a4 + 12);
  if (sub_A0E0A8(a3, (uint64_t *)&v92))
  {
    uint64_t v12 = sub_A0E0A8(a3, (uint64_t *)&v92);
    if (!v12) {
      sub_5AE8("unordered_map::at: key not found");
    }
    memset(v93, 0, 24);
    int v86 = 0x7FFFFFFF;
    sub_A0D4F8((uint64_t)&v87, a2, (unsigned int *)v12[4], (unsigned int *)v12[5], *(_DWORD *)(a4 + 4), a6);
    uint64_t v13 = *(void *)v93;
    if (*(void *)v93)
    {
      char v14 = *(void **)v93;
      if (*(void *)&v93[8] != *(void *)v93)
      {
        uint64_t v15 = *(void *)&v93[8] - 1064;
        do
        {
          int v17 = *(_DWORD *)(v15 + 1056);
          if (v17 == 3)
          {
            sub_3AFFFC(v15);
          }
          else if (v17 == 1)
          {
            int v18 = *(void **)(v15 + 16);
            if (v18)
            {
              *(void *)(v15 + 24) = v18;
              operator delete(v18);
            }
          }
          else if (!v17 && *(unsigned char *)(v15 + 28))
          {
            *(unsigned char *)(v15 + 28) = 0;
          }
          uint64_t v16 = v15 - 32;
          v15 -= 1096;
        }
        while (v16 != v13);
        char v14 = *(void **)v93;
      }
      *(void *)&v93[8] = v13;
      operator delete(v14);
    }
    *(_OWORD *)long long v93 = v87;
    *(void *)&v93[16] = v88;
    int v86 = v89;
    if (v89 == 0x7FFFFFFF)
    {
      if (!sub_723EC(1u)) {
        goto LABEL_100;
      }
      sub_6BAC((uint64_t)&v87);
      sub_188FC78(&v87, (uint64_t)"Unable to unpack walking from stop ", 35);
      unint64_t v20 = *(void *)(a4 + 12);
      if (HIDWORD(v20) != 1 || (v20 + 3) >= 2)
      {
        __int16 v27 = (int *)sub_498D5C(*(void *)(a2 + 4120) + 24, __ROR8__(v20, 32), 0, "stop");
        int v28 = (unsigned __int16 *)((char *)v27 - *v27);
        if (*v28 >= 5u && (uint64_t v29 = v28[2]) != 0) {
          uint64_t v30 = *(void *)((char *)v27 + v29);
        }
        else {
          uint64_t v30 = 0;
        }
        __int16 v45 = sub_398020(*(void *)(a2 + 4120) + 24, 0);
        int64x2_t v46 = &v45[-*(int *)v45];
        if (*(unsigned __int16 *)v46 >= 0xBu)
        {
          uint64_t v47 = *((unsigned __int16 *)v46 + 5);
          if (v47)
          {
            if (v45[v47]) {
              nullsub_1(v30);
            }
          }
        }
      }
      long long v48 = (void *)std::ostream::operator<<();
      sub_188FC78(v48, (uint64_t)" to stop ", 9);
      unint64_t v49 = *(void *)(a4 + 20);
      if (HIDWORD(v49) != 1 || (v49 + 3) >= 2)
      {
        long long v50 = (int *)sub_498D5C(*(void *)(a2 + 4120) + 24, __ROR8__(v49, 32), 0, "stop");
        uint64_t v51 = (unsigned __int16 *)((char *)v50 - *v50);
        if (*v51 >= 5u && (uint64_t v52 = v51[2]) != 0) {
          uint64_t v53 = *(void *)((char *)v50 + v52);
        }
        else {
          uint64_t v53 = 0;
        }
        int v54 = sub_398020(*(void *)(a2 + 4120) + 24, 0);
        char v55 = &v54[-*(int *)v54];
        if (*(unsigned __int16 *)v55 >= 0xBu)
        {
          uint64_t v56 = *((unsigned __int16 *)v55 + 5);
          if (v56)
          {
            if (v54[v56]) {
              nullsub_1(v53);
            }
          }
        }
      }
      uint64_t v57 = (void *)std::ostream::operator<<();
      sub_188FC78(v57, (uint64_t)"; journey will be dropped from response", 39);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v84, 1u);
    }
    else
    {
      if (v89 <= *(_DWORD *)(a4 + 8))
      {
        *(unsigned char *)(a1 + 24) = 1;
        sub_8EC358((void *)a1, (uint64_t *)v93);
        long long v22 = *(void **)v93;
        if (!*(void *)v93) {
          return;
        }
LABEL_101:
        char v79 = v22;
        if (*(void **)&v93[8] != v22)
        {
          uint64_t v80 = *(void *)&v93[8] - 1064;
          do
          {
            int v82 = *(_DWORD *)(v80 + 1056);
            switch(v82)
            {
              case 3:
                sub_3AFFFC(v80);
                break;
              case 1:
                unsigned int v83 = *(void **)(v80 + 16);
                if (v83)
                {
                  *(void *)(v80 + 24) = v83;
                  operator delete(v83);
                }
                break;
              case 0:
                if (*(unsigned char *)(v80 + 28)) {
                  *(unsigned char *)(v80 + 28) = 0;
                }
                break;
            }
            uint64_t v81 = v80 - 32;
            v80 -= 1096;
          }
          while ((void *)v81 != v22);
          char v79 = *(void **)v93;
        }
        *(void *)&v93[8] = v22;
        operator delete(v79);
        return;
      }
      if (!sub_723EC(1u))
      {
LABEL_100:
        ++*a5;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        long long v22 = *(void **)v93;
        if (!*(void *)v93) {
          return;
        }
        goto LABEL_101;
      }
      sub_6BAC((uint64_t)&v87);
      sub_188FC78(&v87, (uint64_t)"Unable to unpack walking from stop ", 35);
      unint64_t v21 = *(void *)(a4 + 12);
      if (HIDWORD(v21) != 1 || (v21 + 3) >= 2)
      {
        uint64_t v58 = (int *)sub_498D5C(*(void *)(a2 + 4120) + 24, __ROR8__(v21, 32), 0, "stop");
        uint64_t v59 = (unsigned __int16 *)((char *)v58 - *v58);
        if (*v59 >= 5u && (uint64_t v60 = v59[2]) != 0) {
          uint64_t v61 = *(void *)((char *)v58 + v60);
        }
        else {
          uint64_t v61 = 0;
        }
        unint64_t v62 = sub_398020(*(void *)(a2 + 4120) + 24, 0);
        long long v63 = &v62[-*(int *)v62];
        if (*(unsigned __int16 *)v63 >= 0xBu)
        {
          uint64_t v64 = *((unsigned __int16 *)v63 + 5);
          if (v64)
          {
            if (v62[v64]) {
              nullsub_1(v61);
            }
          }
        }
      }
      unint64_t v65 = (void *)std::ostream::operator<<();
      sub_188FC78(v65, (uint64_t)" to stop ", 9);
      unint64_t v66 = *(void *)(a4 + 20);
      if (HIDWORD(v66) != 1 || (v66 + 3) >= 2)
      {
        uint64_t v67 = (int *)sub_498D5C(*(void *)(a2 + 4120) + 24, __ROR8__(v66, 32), 0, "stop");
        long long v68 = (unsigned __int16 *)((char *)v67 - *v67);
        if (*v68 >= 5u && (uint64_t v69 = v68[2]) != 0) {
          uint64_t v70 = *(void *)((char *)v67 + v69);
        }
        else {
          uint64_t v70 = 0;
        }
        char v71 = sub_398020(*(void *)(a2 + 4120) + 24, 0);
        int v72 = &v71[-*(int *)v71];
        if (*(unsigned __int16 *)v72 >= 0xBu)
        {
          uint64_t v73 = *((unsigned __int16 *)v72 + 5);
          if (v73)
          {
            if (v71[v73]) {
              nullsub_1(v70);
            }
          }
        }
      }
      unsigned int v74 = (void *)std::ostream::operator<<();
      unsigned int v75 = sub_188FC78(v74, (uint64_t)": expected arrival time ", 24);
      uint64_t v76 = (void *)sub_266E4((uint64_t)v75);
      uint64_t v77 = sub_188FC78(v76, (uint64_t)" but got ", 9);
      int v78 = (void *)sub_266E4((uint64_t)v77);
      sub_188FC78(v78, (uint64_t)"; journey will be dropped from response", 39);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v84, 1u);
    }
    if (v85 < 0) {
      operator delete(v84[0]);
    }
    if (v91 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    goto LABEL_100;
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v87);
    sub_188FC78(&v87, (uint64_t)"Unable to unpack walking from stop ", 35);
    unint64_t v19 = *(void *)(a4 + 12);
    if (HIDWORD(v19) != 1 || (v19 + 3) >= 2)
    {
      long long v23 = (int *)sub_498D5C(*(void *)(a2 + 4120) + 24, __ROR8__(v19, 32), 0, "stop");
      long long v24 = (unsigned __int16 *)((char *)v23 - *v23);
      if (*v24 >= 5u && (uint64_t v25 = v24[2]) != 0) {
        uint64_t v26 = *(void *)((char *)v23 + v25);
      }
      else {
        uint64_t v26 = 0;
      }
      unint64_t v31 = sub_398020(*(void *)(a2 + 4120) + 24, 0);
      uint64_t v32 = &v31[-*(int *)v31];
      if (*(unsigned __int16 *)v32 >= 0xBu)
      {
        uint64_t v33 = *((unsigned __int16 *)v32 + 5);
        if (v33)
        {
          if (v31[v33]) {
            nullsub_1(v26);
          }
        }
      }
    }
    long long v34 = (void *)std::ostream::operator<<();
    sub_188FC78(v34, (uint64_t)" to stop ", 9);
    unint64_t v35 = *(void *)(a4 + 20);
    if (HIDWORD(v35) != 1 || (v35 + 3) >= 2)
    {
      uint64_t v36 = (int *)sub_498D5C(*(void *)(a2 + 4120) + 24, __ROR8__(v35, 32), 0, "stop");
      long long v37 = (unsigned __int16 *)((char *)v36 - *v36);
      if (*v37 >= 5u && (uint64_t v38 = v37[2]) != 0) {
        uint64_t v39 = *(void *)((char *)v36 + v38);
      }
      else {
        uint64_t v39 = 0;
      }
      int v40 = sub_398020(*(void *)(a2 + 4120) + 24, 0);
      long long v41 = &v40[-*(int *)v40];
      if (*(unsigned __int16 *)v41 >= 0xBu)
      {
        uint64_t v42 = *((unsigned __int16 *)v41 + 5);
        if (v42)
        {
          if (v40[v42]) {
            nullsub_1(v39);
          }
        }
      }
    }
    long long v43 = (void *)std::ostream::operator<<();
    sub_188FC78(v43, (uint64_t)" (expected duration: ", 21);
    *(_OWORD *)long long v93 = *(_OWORD *)a4;
    *(_OWORD *)&v93[12] = *(_OWORD *)(a4 + 12);
    int v94 = 1;
    unint64_t v44 = (void *)std::ostream::operator<<();
    sub_188FC78(v44, (uint64_t)" dsec): no valid path found; journey will be dropped from response", 66);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v93, 1u);
    if ((v93[23] & 0x80000000) != 0) {
      operator delete(*(void **)v93);
    }
    if (v91 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  ++*a5;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
}

void sub_A0C990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    sub_9F5B1C((void **)(v16 - 240));
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  sub_9F5B1C((void **)(v16 - 240));
  _Unwind_Resume(a1);
}

uint64_t sub_A0CAD4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void **)a1;
    if (*(void *)a1)
    {
      uint64_t v3 = *(void **)(a1 + 8);
      unint64_t v4 = *(void **)a1;
      if (v3 != v2)
      {
        uint64_t v5 = (uint64_t)v3 - 1064;
        do
        {
          int v7 = *(_DWORD *)(v5 + 1056);
          if (v7 == 3)
          {
            sub_3AFFFC(v5);
          }
          else if (v7 == 1)
          {
            uint64_t v8 = *(void **)(v5 + 16);
            if (v8)
            {
              *(void *)(v5 + 24) = v8;
              operator delete(v8);
            }
          }
          else if (!v7 && *(unsigned char *)(v5 + 28))
          {
            *(unsigned char *)(v5 + 28) = 0;
          }
          uint64_t v6 = v5 - 32;
          v5 -= 1096;
        }
        while ((void *)v6 != v2);
        unint64_t v4 = *(void **)a1;
      }
      *(void *)(a1 + 8) = v2;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_A0CB8C(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v86 = 0;
  long long v87 = 0;
  uint64_t v88 = 0;
  uint64_t __p = 0;
  uint64_t v84 = 0;
  char v85 = 0;
  uint64_t v4 = a3 + 88;
  uint64_t v5 = 64;
  if (a4) {
    uint64_t v5 = 88;
  }
  else {
    uint64_t v4 = a3 + 64;
  }
  uint64_t v6 = *(void *)(a3 + v5);
  uint64_t v82 = *(void *)(v4 + 8);
  if (v6 != v82)
  {
    int v7 = (void *)(a2 + 4136);
    uint64_t v81 = (void *)(a2 + 4136);
    if ((a4 & 1) == 0)
    {
      uint64_t v8 = a3;
      while (1)
      {
        uint64_t v38 = sub_A104E8(v7, *(void *)(v6 + 28), *(_DWORD *)(v6 + 48), *(_DWORD *)(v6 + 36));
        int v40 = v39;
        int v41 = *(_DWORD *)(v6 + 4);
        int v42 = *(_DWORD *)(v6 + 8);
        char v43 = *(unsigned char *)(v6 + 12);
        char v44 = *(unsigned char *)(v6 + 13);
        unsigned int v45 = *(_DWORD *)(v6 + 48);
        int64x2_t v46 = (int *)sub_A11094(v7, *(void *)(v6 + 28));
        uint64_t v47 = (unsigned __int16 *)((char *)v46 - *v46);
        if (*v47 >= 9u && (uint64_t v48 = v47[4]) != 0) {
          unint64_t v49 = (unsigned int *)((char *)v46 + v48 + *(unsigned int *)((char *)v46 + v48));
        }
        else {
          unint64_t v49 = 0;
        }
        int v50 = *(unsigned __int16 *)(sub_A10764(v49, v45) + 12);
        int v51 = *(_DWORD *)(v6 + 4);
        int v52 = *(_DWORD *)(v8 + 8);
        if (v51 >= v52)
        {
          if (v51 <= v52) {
            goto LABEL_32;
          }
          uint64_t v60 = v84;
          if (v84 >= v85)
          {
            unint64_t v62 = __p;
            uint64_t v63 = 0x6DB6DB6DB6DB6DB7 * ((v84 - (unsigned char *)__p) >> 2);
            unint64_t v64 = v63 + 1;
            unint64_t v65 = 0x924924924924924;
            if ((unint64_t)(v63 + 1) > 0x924924924924924) {
              goto LABEL_80;
            }
            if (0xDB6DB6DB6DB6DB6ELL * ((v85 - (unsigned char *)__p) >> 2) > v64) {
              unint64_t v64 = 0xDB6DB6DB6DB6DB6ELL * ((v85 - (unsigned char *)__p) >> 2);
            }
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v85 - (unsigned char *)__p) >> 2)) < 0x492492492492492) {
              unint64_t v65 = v64;
            }
            if (v65)
            {
              int v80 = v50;
              if (v65 > 0x924924924924924) {
                goto LABEL_81;
              }
              unint64_t v75 = v65;
              unint64_t v66 = (char *)operator new(28 * v65);
              int v50 = v80;
              unint64_t v65 = v75;
            }
            else
            {
              unint64_t v66 = 0;
            }
            uint64_t v70 = &v66[4 * ((v84 - (unsigned char *)__p) >> 2)];
            *(void *)uint64_t v70 = v38;
            *((_DWORD *)v70 + 2) = v40;
            *((_DWORD *)v70 + 3) = v50;
            *((_DWORD *)v70 + 4) = v41;
            *((_DWORD *)v70 + 5) = v42;
            v70[24] = v43;
            v70[25] = v44;
            char v71 = &v66[28 * v63];
            if (v60 == v62)
            {
              uint64_t v8 = a3;
              uint64_t v61 = v70 + 28;
              uint64_t __p = v71;
              char v85 = &v66[28 * v65];
              if (!v60) {
                goto LABEL_72;
              }
            }
            else
            {
              uint64_t v8 = a3;
              do
              {
                long long v72 = *(_OWORD *)((char *)v60 - 28);
                *((_OWORD *)v71 - 1) = *((_OWORD *)v60 - 1);
                *(_OWORD *)(v71 - 28) = v72;
                v71 -= 28;
                uint64_t v60 = (void *)((char *)v60 - 28);
              }
              while (v60 != v62);
              uint64_t v60 = v62;
              uint64_t v61 = v70 + 28;
              uint64_t __p = v71;
              char v85 = &v66[28 * v65];
              if (!v60) {
                goto LABEL_72;
              }
            }
            operator delete(v60);
          }
          else
          {
            *(void *)uint64_t v84 = v38;
            *((_DWORD *)v60 + 2) = v40;
            *((_DWORD *)v60 + 3) = v50;
            *((_DWORD *)v60 + 4) = v41;
            *((_DWORD *)v60 + 5) = v42;
            *((unsigned char *)v60 + 24) = v43;
            uint64_t v61 = (char *)v60 + 28;
            *((unsigned char *)v60 + 25) = v44;
          }
LABEL_72:
          uint64_t v84 = v61;
          goto LABEL_31;
        }
        uint64_t v53 = v87;
        if (v87 < v88)
        {
          *(void *)long long v87 = v38;
          *((_DWORD *)v53 + 2) = v40;
          *((_DWORD *)v53 + 3) = v50;
          *((_DWORD *)v53 + 4) = v41;
          *((_DWORD *)v53 + 5) = v42;
          *((unsigned char *)v53 + 24) = v43;
          long long v37 = (char *)v53 + 28;
          *((unsigned char *)v53 + 25) = v44;
        }
        else
        {
          int v54 = v86;
          uint64_t v55 = 0x6DB6DB6DB6DB6DB7 * ((v87 - (unsigned char *)v86) >> 2);
          unint64_t v56 = v55 + 1;
          unint64_t v57 = 0x924924924924924;
          if ((unint64_t)(v55 + 1) > 0x924924924924924) {
            goto LABEL_80;
          }
          if (0xDB6DB6DB6DB6DB6ELL * ((v88 - (unsigned char *)v86) >> 2) > v56) {
            unint64_t v56 = 0xDB6DB6DB6DB6DB6ELL * ((v88 - (unsigned char *)v86) >> 2);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v88 - (unsigned char *)v86) >> 2)) < 0x492492492492492) {
            unint64_t v57 = v56;
          }
          if (v57)
          {
            char v74 = v44;
            int v79 = v50;
            if (v57 > 0x924924924924924) {
              goto LABEL_81;
            }
            unint64_t v58 = v57;
            uint64_t v59 = (char *)operator new(28 * v57);
            int v50 = v79;
            unint64_t v57 = v58;
            char v44 = v74;
          }
          else
          {
            uint64_t v59 = 0;
          }
          uint64_t v67 = &v59[4 * ((v87 - (unsigned char *)v86) >> 2)];
          *(void *)uint64_t v67 = v38;
          *((_DWORD *)v67 + 2) = v40;
          *((_DWORD *)v67 + 3) = v50;
          *((_DWORD *)v67 + 4) = v41;
          *((_DWORD *)v67 + 5) = v42;
          v67[24] = v43;
          v67[25] = v44;
          long long v68 = &v59[28 * v55];
          if (v53 != v54)
          {
            uint64_t v8 = a3;
            do
            {
              long long v69 = *(_OWORD *)((char *)v53 - 28);
              *((_OWORD *)v68 - 1) = *((_OWORD *)v53 - 1);
              *(_OWORD *)(v68 - 28) = v69;
              v68 -= 28;
              uint64_t v53 = (void *)((char *)v53 - 28);
            }
            while (v53 != v54);
            uint64_t v53 = v54;
            long long v37 = v67 + 28;
            int v86 = v68;
            uint64_t v88 = &v59[28 * v57];
            if (!v53) {
              goto LABEL_30;
            }
LABEL_65:
            operator delete(v53);
            goto LABEL_30;
          }
          uint64_t v8 = a3;
          long long v37 = v67 + 28;
          int v86 = v68;
          uint64_t v88 = &v59[28 * v57];
          if (v53) {
            goto LABEL_65;
          }
        }
LABEL_30:
        long long v87 = v37;
LABEL_31:
        int v7 = v81;
LABEL_32:
        v6 += 60;
        if (v6 == v82) {
          goto LABEL_75;
        }
      }
    }
    do
    {
      uint64_t v10 = sub_A104E8(v7, *(void *)(v6 + 28), *(_DWORD *)(v6 + 48), *(_DWORD *)(v6 + 36));
      int v12 = v11;
      int v13 = *(_DWORD *)(v6 + 4);
      int v14 = *(_DWORD *)(v6 + 8);
      char v15 = *(unsigned char *)(v6 + 12);
      char v16 = *(unsigned char *)(v6 + 13);
      unsigned int v17 = *(_DWORD *)(v6 + 48);
      int v18 = (int *)sub_A11094(v7, *(void *)(v6 + 28));
      unint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
      if (*v19 >= 9u && (uint64_t v20 = v19[4]) != 0) {
        unint64_t v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
      }
      else {
        unint64_t v21 = 0;
      }
      int v22 = *(unsigned __int16 *)(sub_A10764(v21, v17) + 12);
      long long v23 = v87;
      if (v87 < v88)
      {
        *(void *)long long v87 = v10;
        *((_DWORD *)v23 + 2) = v12;
        *((_DWORD *)v23 + 3) = v22;
        *((_DWORD *)v23 + 4) = v13;
        *((_DWORD *)v23 + 5) = v14;
        *((unsigned char *)v23 + 24) = v15;
        int v9 = (char *)v23 + 28;
        *((unsigned char *)v23 + 25) = v16;
      }
      else
      {
        char v78 = v16;
        long long v24 = v86;
        uint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((v87 - (unsigned char *)v86) >> 2);
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) > 0x924924924924924) {
LABEL_80:
        }
          sub_2E00();
        if (0xDB6DB6DB6DB6DB6ELL * ((v88 - (unsigned char *)v86) >> 2) > v26) {
          unint64_t v26 = 0xDB6DB6DB6DB6DB6ELL * ((v88 - (unsigned char *)v86) >> 2);
        }
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v88 - (unsigned char *)v86) >> 2)) >= 0x492492492492492) {
          unint64_t v27 = 0x924924924924924;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27)
        {
          uint64_t v77 = v10;
          if (v27 > 0x924924924924924) {
LABEL_81:
          }
            sub_188D718();
          int v28 = v12;
          int v29 = v13;
          char v30 = v15;
          int v31 = v22;
          unint64_t v32 = v27;
          uint64_t v33 = (char *)operator new(28 * v27);
          unint64_t v27 = v32;
          int v22 = v31;
          char v15 = v30;
          int v13 = v29;
          int v12 = v28;
          uint64_t v10 = v77;
        }
        else
        {
          uint64_t v33 = 0;
        }
        long long v34 = &v33[4 * ((v87 - (unsigned char *)v86) >> 2)];
        *(void *)long long v34 = v10;
        *((_DWORD *)v34 + 2) = v12;
        *((_DWORD *)v34 + 3) = v22;
        *((_DWORD *)v34 + 4) = v13;
        *((_DWORD *)v34 + 5) = v14;
        v34[24] = v15;
        v34[25] = v78;
        unint64_t v35 = &v33[28 * v25];
        if (v23 != v24)
        {
          do
          {
            long long v36 = *(_OWORD *)((char *)v23 - 28);
            *((_OWORD *)v35 - 1) = *((_OWORD *)v23 - 1);
            *(_OWORD *)(v35 - 28) = v36;
            v35 -= 28;
            long long v23 = (void *)((char *)v23 - 28);
          }
          while (v23 != v24);
          long long v23 = v24;
        }
        int v9 = v34 + 28;
        int v86 = v35;
        uint64_t v88 = &v33[28 * v27];
        int v7 = v81;
        if (v23) {
          operator delete(v23);
        }
      }
      long long v87 = v9;
      v6 += 60;
    }
    while (v6 != v82);
  }
LABEL_75:
  sub_A11A74(a1, (uint64_t)&v86, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v84 = (char *)__p;
    operator delete(__p);
  }
  if (v86)
  {
    long long v87 = (char *)v86;
    operator delete(v86);
  }
}

void sub_A0D1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v20 = a18;
    if (!a18) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v20 = a18;
    if (!a18) {
      goto LABEL_3;
    }
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_A0D24C(void *a1, unint64_t a2)
{
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 72 * a2;
}

void sub_A0D3AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_A0D48C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 160)) {
    return a1;
  }
  uint64_t v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(void *)(a1 + 128) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 88);
  if (v4)
  {
    *(void *)(a1 + 96) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 64);
  if (!v5) {
    return a1;
  }
  *(void *)(a1 + 72) = v5;
  operator delete(v5);
  return a1;
}

void sub_A0D4F8(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, int a5, _DWORD *a6)
{
  int v89 = 0;
  long long v90 = 0;
  unint64_t v91 = 0;
  if (a3 == a4)
  {
LABEL_108:
    *((_DWORD *)sub_8EC358((void *)a1, (uint64_t *)&v89) + 6) = a5;
    int v79 = (char *)v89;
    if (!v89) {
      return;
    }
    goto LABEL_109;
  }
  long long v7 = a6;
  uint64_t v8 = a4;
  long long v9 = a3;
  uint64_t v10 = a2;
  while (1)
  {
    unsigned int v13 = v9[356];
    if (v13 == 2) {
      break;
    }
    if (v13 == 1)
    {
      int v18 = (*v7)++;
      *(_DWORD *)uint64_t v176 = v18;
      *(_DWORD *)&v176[4] = a5;
      int v19 = v9[2];
      int v20 = v19 / 10;
      int v21 = v19 % 10;
      if (v19 < 0) {
        char v22 = -5;
      }
      else {
        char v22 = 5;
      }
      a5 += v20 + (((103 * (char)(v22 + v21)) >> 15) & 1) + ((103 * (char)(v22 + v21)) >> 10);
      *(_DWORD *)&v176[8] = a5;
      *(void *)&v176[12] = *(void *)v9;
      long long v23 = v90;
      if ((unint64_t)v90 < v91)
      {
        long long v11 = *(_OWORD *)v176;
        *((_DWORD *)v90 + 4) = *(_DWORD *)&v176[16];
        *(_OWORD *)long long v23 = v11;
        *((_DWORD *)v23 + 272) = 2;
        int v12 = v23 + 1096;
      }
      else
      {
        int v12 = sub_A0E678(&v89, (uint64_t)v176);
      }
      long long v90 = v12;
      goto LABEL_5;
    }
    if (v13) {
      goto LABEL_5;
    }
    *(_OWORD *)&v176[16] = xmmword_20EB6D0;
    *(void *)&v176[32] = 0xFFFFFFFF7FFFFFFFLL;
    *(_DWORD *)&v176[40] = 0;
    uint64_t v178 = 0;
    unint64_t v179 = 0;
    unint64_t v177 = 0;
    char v180 = 0;
    int v14 = (*v7)++;
    *(_DWORD *)&v176[4] = 3;
    *(_DWORD *)uint64_t v176 = v14;
    int v15 = *((unsigned __int8 *)v9 + 168);
    if (v15 == 2)
    {
      unsigned int v31 = v9[1];
      *(void *)&v176[4] = (unint64_t)*v9 << 32;
      *(_DWORD *)&v176[12] = v31;
      int v17 = *((unsigned __int8 *)v9 + 344);
      if (v17 == 2) {
        goto LABEL_34;
      }
    }
    else if (v15 == 1)
    {
      unsigned int v28 = v9[1];
      *(void *)&v176[4] = ((unint64_t)*v9 << 32) | 4;
      *(_DWORD *)&v176[12] = v28;
      int v17 = *((unsigned __int8 *)v9 + 344);
      if (v17 == 2) {
        goto LABEL_34;
      }
    }
    else if (*((unsigned char *)v9 + 168))
    {
      *(void *)&v176[4] = 0xFFFFFFFF00000003;
      *(_DWORD *)&v176[12] = 0;
      int v17 = *((unsigned __int8 *)v9 + 344);
      if (v17 == 2)
      {
LABEL_34:
        unsigned int v29 = v9[45];
        unint64_t v30 = (unint64_t)v9[44] << 32;
        goto LABEL_38;
      }
    }
    else
    {
      unsigned int v16 = v9[1];
      *(void *)&v176[4] = ((unint64_t)*v9 << 32) | 3;
      *(_DWORD *)&v176[12] = v16;
      int v17 = *((unsigned __int8 *)v9 + 344);
      if (v17 == 2) {
        goto LABEL_34;
      }
    }
    if (v17 == 1)
    {
      unsigned int v29 = v9[45];
      unint64_t v30 = ((unint64_t)v9[44] << 32) | 4;
    }
    else if (v17)
    {
      unsigned int v29 = 0;
      unint64_t v30 = 0xFFFFFFFF00000003;
    }
    else
    {
      unsigned int v29 = v9[45];
      unint64_t v30 = ((unint64_t)v9[44] << 32) | 3;
    }
LABEL_38:
    *(void *)&v176[16] = v30;
    *(_DWORD *)&v176[24] = v29;
    *(_DWORD *)&v176[28] = a5;
    int v32 = v9[96];
    int v33 = v32 / 10;
    int v34 = v32 % 10;
    if (v32 < 0) {
      char v35 = -5;
    }
    else {
      char v35 = 5;
    }
    *(_DWORD *)&v176[32] = v33
                         + a5
                         + (((103 * (char)(v35 + v34)) >> 15) & 1)
                         + ((103 * (char)(v35 + v34)) >> 10);
    long long v36 = (uint64_t *)*((void *)v9 + 45);
    *(void *)&v176[36] = *((void *)v9 + 44);
    memset(__p, 0, 24);
    long long v37 = (uint64_t *)*((void *)v9 + 46);
    if (v36 == v37)
    {
      uint64_t v38 = 0;
      uint64_t v10 = a2;
      goto LABEL_77;
    }
    uint64_t v38 = 0;
    do
    {
      while (v38 < __p[2])
      {
        uint64_t v39 = *v36++;
        *v38++ = v39;
        __p[1] = v38;
        if (v36 == v37) {
          goto LABEL_74;
        }
      }
      int v40 = __p[0];
      int64_t v41 = (char *)v38 - (char *)__p[0];
      uint64_t v42 = ((char *)v38 - (char *)__p[0]) >> 3;
      unint64_t v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 61) {
        sub_2E00();
      }
      int64_t v44 = (char *)__p[2] - (char *)__p[0];
      if (((char *)__p[2] - (char *)__p[0]) >> 2 > v43) {
        unint64_t v43 = v44 >> 2;
      }
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v43;
      }
      if (v45)
      {
        if (v45 >> 61) {
          sub_188D718();
        }
        int64x2_t v46 = operator new(8 * v45);
        uint64_t v47 = (uint64_t *)&v46[8 * v42];
        *uint64_t v47 = *v36;
        uint64_t v48 = v47 + 1;
        if (v38 == (void *)v40)
        {
LABEL_60:
          __p[0] = v47;
          __p[1] = v48;
          __p[2] = &v46[8 * v45];
          if (!v38) {
            goto LABEL_62;
          }
LABEL_61:
          operator delete(v38);
          goto LABEL_62;
        }
      }
      else
      {
        int64x2_t v46 = 0;
        uint64_t v47 = (uint64_t *)(8 * v42);
        *(void *)(8 * v42) = *v36;
        uint64_t v48 = (void *)(8 * v42 + 8);
        if (v38 == (void *)v40) {
          goto LABEL_60;
        }
      }
      unint64_t v49 = (char *)(v38 - 1) - v40;
      if (v49 < 0x168)
      {
        int v50 = v38;
        goto LABEL_56;
      }
      if (&v46[v41 - 8 - (v49 & 0xFFFFFFFFFFFFFFF8)] > &v46[v41 - 8])
      {
        int v50 = v38;
        do
        {
LABEL_56:
          uint64_t v51 = *--v50;
          *--uint64_t v47 = v51;
        }
        while (v50 != (void *)v40);
        goto LABEL_57;
      }
      if ((void *)((char *)v38 - (v49 & 0xFFFFFFFFFFFFFFF8) - 8) > v38 - 1)
      {
        int v50 = v38;
        goto LABEL_56;
      }
      if ((unint64_t)((char *)v38 - v46 - v41) < 0x20)
      {
        int v50 = v38;
        goto LABEL_56;
      }
      uint64_t v52 = (v49 >> 3) + 1;
      uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
      int v50 = &v38[v53 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v47 = (uint64_t *)((char *)v47 - v53);
      int v54 = &v46[8 * v42 - 16];
      uint64_t v55 = (long long *)(v38 - 2);
      uint64_t v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v57 = *v55;
        *(v54 - 1) = *(v55 - 1);
        *int v54 = v57;
        v54 -= 2;
        v55 -= 2;
        v56 -= 4;
      }
      while (v56);
      if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_56;
      }
LABEL_57:
      uint64_t v38 = __p[0];
      __p[0] = v47;
      __p[1] = v48;
      __p[2] = &v46[8 * v45];
      if (v38) {
        goto LABEL_61;
      }
LABEL_62:
      uint64_t v38 = v48;
      __p[1] = v48;
      ++v36;
    }
    while (v36 != v37);
LABEL_74:
    uint64_t v10 = a2;
    if (v177)
    {
      uint64_t v178 = v177;
      operator delete(v177);
    }
LABEL_77:
    unint64_t v177 = __p[0];
    uint64_t v178 = v38;
    unint64_t v179 = __p[2];
    unint64_t v58 = (void *)*((void *)v9 + 45);
    uint64_t v59 = (void *)*((void *)v9 + 46);
    if (v58 == v59)
    {
LABEL_82:
      char v180 = 0;
      a5 = *(_DWORD *)&v176[32];
      uint64_t v63 = v90;
      if ((unint64_t)v90 >= v91) {
        goto LABEL_88;
      }
    }
    else
    {
      while (1)
      {
        uint64_t v60 = (int *)sub_49B168(*(void *)(v10 + 4160) + 24, __ROR8__(*v58, 32), 0, "transfer");
        uint64_t v61 = (unsigned __int16 *)((char *)v60 - *v60);
        if (*v61 < 0xBu) {
          break;
        }
        uint64_t v62 = v61[5];
        if (!v62 || *(int *)((char *)v60 + v62) == -1) {
          break;
        }
        if (++v58 == v59) {
          goto LABEL_82;
        }
      }
      char v180 = 1;
      a5 = *(_DWORD *)&v176[32];
      uint64_t v63 = v90;
      if ((unint64_t)v90 >= v91)
      {
LABEL_88:
        uint64_t v70 = sub_A0E320(&v89, (uint64_t)v176);
        uint64_t v8 = a4;
        long long v7 = a6;
        goto LABEL_89;
      }
    }
    *((_DWORD *)v63 + 272) = -1;
    long long v64 = *(_OWORD *)&v176[28];
    long long v65 = *(_OWORD *)&v176[16];
    *(_OWORD *)uint64_t v63 = *(_OWORD *)v176;
    *((_OWORD *)v63 + 1) = v65;
    *((void *)v63 + 6) = 0;
    *(_OWORD *)(v63 + 28) = v64;
    *((void *)v63 + 7) = 0;
    *((void *)v63 + 8) = 0;
    unint64_t v66 = v177;
    int64_t v67 = v178 - (unsigned char *)v177;
    if (v178 != v177)
    {
      if (v67 < 0) {
        sub_2E00();
      }
      long long v68 = (char *)operator new(v178 - (unsigned char *)v177);
      *((void *)v63 + 6) = v68;
      *((void *)v63 + 7) = v68;
      long long v69 = &v68[8 * (v67 >> 3)];
      *((void *)v63 + 8) = v69;
      memcpy(v68, v66, v67);
      *((void *)v63 + 7) = v69;
    }
    v63[72] = v180;
    *((_DWORD *)v63 + 272) = 1;
    uint64_t v70 = v63 + 1096;
    uint64_t v8 = a4;
    long long v7 = a6;
    uint64_t v10 = a2;
LABEL_89:
    long long v90 = v70;
    if (v177)
    {
      uint64_t v178 = v177;
      operator delete(v177);
    }
LABEL_5:
    v9 += 358;
    if (v9 == v8) {
      goto LABEL_108;
    }
  }
  sub_A0E244((uint64_t)v176, (uint64_t)v9);
  if (*(unsigned char *)(v10 + 16)) {
    BOOL v24 = v185[1056] == 0;
  }
  else {
    BOOL v24 = 0;
  }
  if (!v24)
  {
    *(_OWORD *)((char *)__p + 4) = xmmword_20EB6C0;
    *(void **)((char *)&__p[2] + 4) = (void *)0xFFFFFFFFLL;
    memset(v93, 0, sizeof(v93));
    uint64_t v94 = 0;
    int v95 = -1;
    int v96 = -1;
    v97[0] = 0;
    *(void *)((char *)v97 + 6) = 0;
    int v101 = 0;
    uint64_t v102 = 0;
    int v98 = 0x7FFFFFFF;
    int v99 = 0x7FFFFFFF;
    uint64_t v100 = 0x7FFFFFFF7FFFFFFFLL;
    unint64_t v103 = 0x8000000080000000;
    char v107 = 0;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v104 = 0u;
    int v108 = 0x7FFFFFFF;
    unint64_t v109 = 0x8000000080000000;
    int v110 = -1;
    long long v111 = xmmword_20E8160;
    int v112 = -1;
    v113[0] = 0;
    *(void *)((char *)v113 + 6) = 0;
    int v114 = 0x7FFFFFFF;
    uint64_t v118 = 0;
    int v117 = 0;
    int v115 = 0x7FFFFFFF;
    uint64_t v116 = 0x7FFFFFFF7FFFFFFFLL;
    unint64_t v119 = 0x8000000080000000;
    char v123 = 0;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    int v124 = 0x7FFFFFFF;
    unint64_t v125 = 0x8000000080000000;
    int v126 = -1;
    long long v127 = xmmword_20E8160;
    int v128 = 0x7FFFFFFF;
    uint64_t v129 = 0x7FFFFFFF7FFFFFFFLL;
    uint64_t v130 = 0;
    uint64_t v131 = 0;
    uint64_t v132 = 0;
    unint64_t v133 = 0x8000000080000000;
    int v134 = 0x7FFFFFFF;
    uint64_t v135 = 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v136 = 0x8000000080000000;
    int v137 = 0x7FFFFFFF;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v140 = 0u;
    long long v141 = 0u;
    long long v142 = 0u;
    long long v143 = 0u;
    long long v144 = 0u;
    long long v145 = 0u;
    long long v146 = 0u;
    long long v147 = 0u;
    long long v148 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v151 = 0u;
    long long v152 = 0u;
    *(void *)&long long v25 = 0x8000000080000000;
    *((void *)&v25 + 1) = 0x8000000080000000;
    long long v153 = v25;
    long long v154 = v25;
    uint64_t v155 = 0;
    uint64_t v156 = 0;
    uint64_t v157 = 0;
    char v158 = 1;
    int v159 = 0;
    char v160 = 1;
    *(_DWORD *)((char *)v161 + 3) = 0;
    v161[0] = 0;
    uint64_t v175 = 0;
    long long v173 = 0u;
    long long v174 = 0u;
    long long v171 = 0u;
    long long v172 = 0u;
    long long v169 = 0u;
    long long v170 = 0u;
    long long v167 = 0u;
    long long v168 = 0u;
    long long v165 = 0u;
    long long v166 = 0u;
    long long v163 = 0u;
    long long v164 = 0u;
    long long v162 = 0u;
    int v26 = (*v7)++;
    LODWORD(__p[0]) = v26;
    if (v181 != 2)
    {
      if (v181 == 1)
      {
        *(void **)((char *)__p + 4) = (void *)(((unint64_t)*(unsigned int *)v176 << 32) | 4);
        HIDWORD(__p[1]) = *(_DWORD *)&v176[4];
        int v27 = v184;
        if (v184 == 2) {
          goto LABEL_97;
        }
        goto LABEL_92;
      }
      if (v181)
      {
        *(void **)((char *)__p + 4) = (void *)0xFFFFFFFF00000003;
        HIDWORD(__p[1]) = 0;
        int v27 = v184;
        if (v184 != 2) {
          goto LABEL_92;
        }
LABEL_97:
        int v71 = v183;
        long long v72 = (void *)((unint64_t)v182 << 32);
      }
      else
      {
        *(void **)((char *)__p + 4) = (void *)(((unint64_t)*(unsigned int *)v176 << 32) | 3);
        HIDWORD(__p[1]) = *(_DWORD *)&v176[4];
        int v27 = v184;
        if (v184 == 2) {
          goto LABEL_97;
        }
LABEL_92:
        if (v27 == 1)
        {
          int v71 = v183;
          long long v72 = (void *)(((unint64_t)v182 << 32) | 4);
        }
        else if (v27)
        {
          int v71 = 0;
          long long v72 = (void *)0xFFFFFFFF00000003;
        }
        else
        {
          int v71 = v183;
          long long v72 = (void *)(((unint64_t)v182 << 32) | 3);
        }
      }
      __p[2] = v72;
      LODWORD(__p[3]) = v71;
      sub_471250((uint64_t)v93, (uint64_t)v185);
      LODWORD(v136) = a5;
      int v73 = v186;
      if (v186 < 0) {
        char v74 = -5;
      }
      else {
        char v74 = 5;
      }
      unint64_t v75 = v90;
      if ((unint64_t)v90 >= v91)
      {
        uint64_t v77 = sub_A0E890(&v89, __p);
      }
      else
      {
        *((_DWORD *)v90 + 272) = -1;
        long long v76 = *(_OWORD *)((char *)&__p[1] + 4);
        *(_OWORD *)unint64_t v75 = *(_OWORD *)__p;
        *(_OWORD *)(v75 + 12) = v76;
        sub_7A3ACC((uint64_t)(v75 + 32), (uint64_t)v93);
        *((_DWORD *)v75 + 272) = 3;
        uint64_t v77 = v75 + 1096;
      }
      int v78 = 103 * (char)(v74 + v73 % 10);
      a5 += v73 / 10 + ((v78 >> 15) & 1) + (v78 >> 10);
      long long v90 = v77;
      sub_3AFFFC((uint64_t)v93);
      sub_9F6418((uint64_t)v176);
      goto LABEL_5;
    }
    *(void **)((char *)__p + 4) = (void *)((unint64_t)*(unsigned int *)v176 << 32);
    HIDWORD(__p[1]) = *(_DWORD *)&v176[4];
    int v27 = v184;
    if (v184 == 2) {
      goto LABEL_97;
    }
    goto LABEL_92;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0x7FFFFFFF;
  sub_9F6418((uint64_t)v176);
  int v79 = (char *)v89;
  if (v89)
  {
LABEL_109:
    int v80 = v79;
    if (v90 != v79)
    {
      uint64_t v81 = (uint64_t)(v90 - 1064);
      do
      {
        int v83 = *(_DWORD *)(v81 + 1056);
        switch(v83)
        {
          case 3:
            sub_3AFFFC(v81);
            break;
          case 1:
            uint64_t v84 = *(void **)(v81 + 16);
            if (v84)
            {
              *(void *)(v81 + 24) = v84;
              operator delete(v84);
            }
            break;
          case 0:
            if (*(unsigned char *)(v81 + 28)) {
              *(unsigned char *)(v81 + 28) = 0;
            }
            break;
        }
        uint64_t v82 = (char *)(v81 - 32);
        v81 -= 1096;
      }
      while (v82 != v79);
      int v80 = v89;
    }
    long long v90 = v79;
    operator delete(v80);
  }
}

void sub_A0E000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
}

uint64_t *sub_A0E0A8(void *a1, uint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  unint64_t v5 = 0xFF51AFD7ED558CCDLL * (*a2 ^ ((unint64_t)*a2 >> 33));
  unint64_t v6 = (((0xC4CEB9FE1A85EC53 * (v5 ^ (v5 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v5 ^ (v5 >> 33))) >> 33))
      + 0x388152A534) ^ 0xDEADBEEF;
  unint64_t v7 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v4 ^ (v4 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v4 ^ (v4 >> 33))) >> 33));
  unint64_t v8 = ((v7 ^ (v7 >> 33)) + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v2);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v8;
    if (v8 >= *(void *)&v2) {
      unint64_t v10 = v8 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v10 = v8 & (*(void *)&v2 - 1);
  }
  long long v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  uint64_t result = *v11;
  if (*v11)
  {
    if (v9.u32[0] < 2uLL)
    {
      uint64_t v13 = *(void *)&v2 - 1;
      while (1)
      {
        uint64_t v16 = result[1];
        if (v8 == v16)
        {
          BOOL v17 = *((_DWORD *)result + 5) == HIDWORD(v3) && *((_DWORD *)result + 4) == v3;
          if (v17 && result[3] == v4) {
            return result;
          }
        }
        else if ((v16 & v13) != v10)
        {
          return 0;
        }
        uint64_t result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v14 = result[1];
      if (v8 == v14)
      {
        BOOL v15 = *((_DWORD *)result + 5) == HIDWORD(v3) && *((_DWORD *)result + 4) == v3;
        if (v15 && result[3] == v4) {
          return result;
        }
      }
      else
      {
        if (v14 >= *(void *)&v2) {
          v14 %= *(void *)&v2;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      uint64_t result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_A0E244(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  int v4 = *(_DWORD *)(a2 + 160);
  if (v4 == 1)
  {
    sub_44479C(a1, a2);
  }
  else if (!v4)
  {
    *(void *)a1 = *(void *)a2;
  }
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  unint64_t v5 = (void *)(a1 + 176);
  unint64_t v6 = (void *)(a2 + 176);
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  int v7 = *(_DWORD *)(a2 + 336);
  if (v7 == 1)
  {
    sub_44479C((uint64_t)v5, (uint64_t)v6);
  }
  else if (!v7)
  {
    void *v5 = *v6;
  }
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  int v8 = *(unsigned __int8 *)(a2 + 1408);
  *(unsigned char *)(a1 + 1408) = v8;
  if (v8) {
    sub_7A3ACC(a1 + 352, a2 + 352);
  }
  *(_DWORD *)(a1 + 1416) = *(_DWORD *)(a2 + 1416);
  return a1;
}

void sub_A0E2FC(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 160) == 1) {
    sub_20ABA6C((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_A0E320(void **a1, uint64_t a2)
{
  int v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  unint64_t v5 = 0xE21A291C077975B9 * ((v3 - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x3BCBADC7F10D14) {
    sub_2E00();
  }
  if (0xC43452380EF2EB72 * (((unsigned char *)a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0xC43452380EF2EB72 * (((unsigned char *)a1[2] - v4) >> 3);
  }
  if (0xE21A291C077975B9 * (((unsigned char *)a1[2] - v4) >> 3) >= 0x1DE5D6E3F8868ALL) {
    unint64_t v8 = 0x3BCBADC7F10D14;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x3BCBADC7F10D14) {
      sub_188D718();
    }
    uint8x8_t v9 = (char *)operator new(1096 * v8);
  }
  else
  {
    uint8x8_t v9 = 0;
  }
  unint64_t v10 = &v9[1096 * v5];
  *((_DWORD *)v10 + 272) = -1;
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  long long v12 = *(_OWORD *)(a2 + 28);
  *((void *)v10 + 6) = 0;
  *(_OWORD *)(v10 + 28) = v12;
  *((void *)v10 + 7) = 0;
  *((void *)v10 + 8) = 0;
  unint64_t v14 = *(unsigned char **)(a2 + 48);
  uint64_t v13 = *(unsigned char **)(a2 + 56);
  int64_t v15 = v13 - v14;
  if (v13 != v14)
  {
    if (v15 < 0) {
      sub_2E00();
    }
    uint64_t v16 = (char *)operator new(v13 - v14);
    *((void *)v10 + 6) = v16;
    BOOL v17 = &v16[8 * (v15 >> 3)];
    *((void *)v10 + 8) = v17;
    memcpy(v16, v14, v15);
    *((void *)v10 + 7) = v17;
  }
  int v18 = &v9[1096 * v8];
  v10[72] = *(unsigned char *)(a2 + 72);
  *((_DWORD *)v10 + 272) = 1;
  int v19 = v10 + 1096;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v19;
    a1[2] = v18;
  }
  else
  {
    uint64_t v20 = 0;
    do
    {
      int v21 = (long long *)&v10[v20 - 1096];
      char v22 = (long long *)&v3[v20 - 1096];
      uint64_t v23 = *(unsigned int *)&v3[v20 - 8];
      *(_DWORD *)&v10[v20 - 8] = v23;
      if (v23)
      {
        sub_9C16F4(v23, v22, (uint64_t)v21);
      }
      else
      {
        long long v24 = *v22;
        long long v25 = *(_OWORD *)&v3[v20 - 1080];
        long long v26 = *(_OWORD *)&v3[v20 - 1064];
        *(void *)&v10[v20 - 1050] = *(void *)&v3[v20 - 1050];
        *(_OWORD *)&v10[v20 - 1080] = v25;
        *(_OWORD *)&v10[v20 - 1064] = v26;
        *int v21 = v24;
        int v27 = v3[v20 - 1036];
        v10[v20 - 1036] = v27;
        if (v27) {
          *(_DWORD *)&v10[v20 - 1040] = *(_DWORD *)&v3[v20 - 1040];
        }
      }
      v20 -= 1096;
    }
    while (&v3[v20] != v4);
    uint64_t v3 = (char *)*a1;
    unsigned int v28 = (char *)a1[1];
    *a1 = &v10[v20];
    a1[1] = v19;
    a1[2] = v18;
    if (v28 == v3)
    {
      uint64_t v3 = v28;
      if (!v28) {
        return v10 + 1096;
      }
      goto LABEL_34;
    }
    uint64_t v29 = (uint64_t)(v28 - 1064);
    do
    {
      int v31 = *(_DWORD *)(v29 + 1056);
      if (v31 == 3)
      {
        sub_3AFFFC(v29);
      }
      else if (v31 == 1)
      {
        int v32 = *(void **)(v29 + 16);
        if (v32)
        {
          *(void *)(v29 + 24) = v32;
          operator delete(v32);
        }
      }
      else if (!v31 && *(unsigned char *)(v29 + 28))
      {
        *(unsigned char *)(v29 + 28) = 0;
      }
      unint64_t v30 = (char *)(v29 - 32);
      v29 -= 1096;
    }
    while (v30 != v3);
  }
  if (v3) {
LABEL_34:
  }
    operator delete(v3);
  return v10 + 1096;
}

void sub_A0E5B4(void *a1)
{
  int v4 = *v1;
  if (*v1)
  {
    *(void *)(v2 + 56) = v4;
    operator delete(v4);
  }
  sub_58CC(a1);
}

uint64_t sub_A0E5D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 1096;
    int v4 = *(_DWORD *)(v2 - 8);
    if (v4 == 3)
    {
      sub_3AFFFC(v2 - 1064);
      goto LABEL_3;
    }
    if (v4 == 1)
    {
      unint64_t v6 = *(void **)(v2 - 1048);
      if (!v6) {
        goto LABEL_3;
      }
      *(void *)(v2 - 1040) = v6;
      operator delete(v6);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else if (v4 || (unint64_t v5 = (unsigned char *)(v2 - 1036), !*v5))
    {
LABEL_3:
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      unsigned char *v5 = 0;
      uint64_t v2 = *(void *)(a1 + 16);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_A0E678(void **a1, uint64_t a2)
{
  int v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  unint64_t v5 = 0xE21A291C077975B9 * ((v3 - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x3BCBADC7F10D14) {
    sub_2E00();
  }
  if (0xC43452380EF2EB72 * (((unsigned char *)a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0xC43452380EF2EB72 * (((unsigned char *)a1[2] - v4) >> 3);
  }
  if (0xE21A291C077975B9 * (((unsigned char *)a1[2] - v4) >> 3) >= 0x1DE5D6E3F8868ALL) {
    unint64_t v6 = 0x3BCBADC7F10D14;
  }
  if (v6 > 0x3BCBADC7F10D14) {
    sub_188D718();
  }
  uint64_t v8 = 1096 * v6;
  uint8x8_t v9 = (char *)operator new(1096 * v6);
  unint64_t v10 = &v9[1096 * v5];
  long long v11 = &v9[v8];
  *(_OWORD *)unint64_t v10 = *(_OWORD *)a2;
  *((_DWORD *)v10 + 4) = *(_DWORD *)(a2 + 16);
  *((_DWORD *)v10 + 272) = 2;
  long long v12 = v10 + 1096;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v12;
    a1[2] = v11;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      unint64_t v14 = (long long *)&v10[v13 - 1096];
      int64_t v15 = (long long *)&v3[v13 - 1096];
      uint64_t v16 = *(unsigned int *)&v3[v13 - 8];
      *(_DWORD *)&v10[v13 - 8] = v16;
      if (v16)
      {
        sub_9C16F4(v16, v15, (uint64_t)v14);
      }
      else
      {
        long long v17 = *v15;
        long long v18 = *(_OWORD *)&v3[v13 - 1080];
        long long v19 = *(_OWORD *)&v3[v13 - 1064];
        *(void *)&v10[v13 - 1050] = *(void *)&v3[v13 - 1050];
        *(_OWORD *)&v10[v13 - 1080] = v18;
        *(_OWORD *)&v10[v13 - 1064] = v19;
        long long *v14 = v17;
        int v20 = v3[v13 - 1036];
        v10[v13 - 1036] = v20;
        if (v20) {
          *(_DWORD *)&v10[v13 - 1040] = *(_DWORD *)&v3[v13 - 1040];
        }
      }
      v13 -= 1096;
    }
    while (&v3[v13] != v4);
    uint64_t v3 = (char *)*a1;
    int v21 = (char *)a1[1];
    *a1 = &v10[v13];
    a1[1] = v12;
    a1[2] = v11;
    if (v21 == v3)
    {
      uint64_t v3 = v21;
      if (!v21) {
        return v10 + 1096;
      }
      goto LABEL_27;
    }
    uint64_t v22 = (uint64_t)(v21 - 1064);
    do
    {
      int v24 = *(_DWORD *)(v22 + 1056);
      if (v24 == 3)
      {
        sub_3AFFFC(v22);
      }
      else if (v24 == 1)
      {
        long long v25 = *(void **)(v22 + 16);
        if (v25)
        {
          *(void *)(v22 + 24) = v25;
          operator delete(v25);
        }
      }
      else if (!v24 && *(unsigned char *)(v22 + 28))
      {
        *(unsigned char *)(v22 + 28) = 0;
      }
      uint64_t v23 = (char *)(v22 - 32);
      v22 -= 1096;
    }
    while (v23 != v3);
  }
  if (v3) {
LABEL_27:
  }
    operator delete(v3);
  return v10 + 1096;
}

char *sub_A0E890(void **a1, _OWORD *a2)
{
  unint64_t v3 = 0xE21A291C077975B9 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x3BCBADC7F10D14) {
    sub_2E00();
  }
  if (0xC43452380EF2EB72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xC43452380EF2EB72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xE21A291C077975B9 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x1DE5D6E3F8868ALL) {
    unint64_t v6 = 0x3BCBADC7F10D14;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x3BCBADC7F10D14) {
      sub_188D718();
    }
    int v7 = (char *)operator new(1096 * v6);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = &v7[1096 * v3];
  *((_DWORD *)v8 + 272) = -1;
  *(_OWORD *)uint64_t v8 = *a2;
  *(_OWORD *)(v8 + 12) = *(_OWORD *)((char *)a2 + 12);
  sub_7A3ACC((uint64_t)(v8 + 32), (uint64_t)(a2 + 2));
  uint8x8_t v9 = &v7[1096 * v6];
  *((_DWORD *)v8 + 272) = 3;
  unint64_t v10 = v8 + 1096;
  long long v12 = (char *)*a1;
  long long v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      unint64_t v14 = (long long *)&v8[v13 - 1096];
      int64_t v15 = (long long *)&v11[v13 - 1096];
      *(_DWORD *)&v8[v13 - 8] = *(_DWORD *)&v11[v13 - 8];
      uint64_t v16 = *(unsigned int *)&v11[v13 - 8];
      if (v16)
      {
        sub_9C16F4(v16, v15, (uint64_t)v14);
      }
      else
      {
        long long v17 = *v15;
        long long v18 = *(_OWORD *)&v11[v13 - 1080];
        long long v19 = *(_OWORD *)&v11[v13 - 1064];
        *(void *)&v8[v13 - 1050] = *(void *)&v11[v13 - 1050];
        *(_OWORD *)&v8[v13 - 1080] = v18;
        *(_OWORD *)&v8[v13 - 1064] = v19;
        long long *v14 = v17;
        int v20 = v11[v13 - 1036];
        v8[v13 - 1036] = v20;
        if (v20) {
          *(_DWORD *)&v8[v13 - 1040] = *(_DWORD *)&v11[v13 - 1040];
        }
      }
      v13 -= 1096;
    }
    while (&v11[v13] != v12);
    long long v11 = (char *)*a1;
    int v21 = (char *)a1[1];
    *a1 = &v8[v13];
    a1[1] = v10;
    a1[2] = v9;
    if (v21 == v11)
    {
      long long v11 = v21;
      if (!v21) {
        return v8 + 1096;
      }
      goto LABEL_31;
    }
    uint64_t v22 = (uint64_t)(v21 - 1064);
    do
    {
      int v24 = *(_DWORD *)(v22 + 1056);
      if (v24 == 3)
      {
        sub_3AFFFC(v22);
      }
      else if (v24 == 1)
      {
        long long v25 = *(void **)(v22 + 16);
        if (v25)
        {
          *(void *)(v22 + 24) = v25;
          operator delete(v25);
        }
      }
      else if (!v24 && *(unsigned char *)(v22 + 28))
      {
        *(unsigned char *)(v22 + 28) = 0;
      }
      uint64_t v23 = (char *)(v22 - 32);
      v22 -= 1096;
    }
    while (v23 != v11);
  }
  if (v11) {
LABEL_31:
  }
    operator delete(v11);
  return v8 + 1096;
}

uint64_t sub_A0EADC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (a2 - *a1) / 1096;
  uint64_t v7 = *a1 + 1096 * v6;
  if (a5 >= 1)
  {
    uint64_t v9 = a3;
    uint64_t v13 = a1[2];
    uint64_t v11 = (uint64_t)(a1 + 2);
    uint64_t v12 = v13;
    unint64_t v14 = *(void *)(v11 - 8);
    if ((uint64_t)(0xE21A291C077975B9 * ((uint64_t)(v13 - v14) >> 3)) >= a5)
    {
      if ((uint64_t)(0xE21A291C077975B9 * ((uint64_t)(v14 - v7) >> 3)) >= a5)
      {
        uint64_t v19 = a3 + 1096 * a5;
        uint64_t v20 = *(void *)(v11 - 8);
      }
      else
      {
        uint64_t v19 = a3 + 8 * ((uint64_t)(v14 - v7) >> 3);
        uint64_t v20 = sub_A0F090(v11, v19, a4, *(void *)(v11 - 8));
        a1[1] = v20;
        if ((uint64_t)(v14 - v7) < 1) {
          return v7;
        }
      }
      uint64_t v21 = v7 + 1096 * a5;
      unint64_t v22 = 0xE21A291C077975B9 * ((v20 - v21) >> 3);
      uint64_t v23 = v20;
      if (v20 - 1096 * a5 < v14)
      {
        uint64_t v53 = v7 + 1096 * a5;
        unint64_t v54 = 0xE21A291C077975B9 * ((v20 - v21) >> 3);
        uint64_t v24 = 0;
        uint64_t v25 = v5 + 8 * ((v20 - v21) >> 3) + 1096 * v6;
        do
        {
          uint64_t v26 = v25 + v24;
          uint64_t v27 = v20 + v24;
          *(_DWORD *)(v20 + v24 + 1088) = *(_DWORD *)(v25 + v24 + 1088);
          uint64_t v28 = *(unsigned int *)(v25 + v24 + 1088);
          if (v28)
          {
            sub_9C16F4(v28, (long long *)v26, v27);
          }
          else
          {
            long long v29 = *(_OWORD *)v26;
            long long v30 = *(_OWORD *)(v26 + 16);
            long long v31 = *(_OWORD *)(v26 + 32);
            *(void *)(v27 + 46) = *(void *)(v26 + 46);
            *(_OWORD *)(v27 + 16) = v30;
            *(_OWORD *)(v27 + 32) = v31;
            *(_OWORD *)uint64_t v27 = v29;
            int v32 = *(unsigned __int8 *)(v26 + 60);
            *(unsigned char *)(v27 + 60) = v32;
            if (v32) {
              *(_DWORD *)(v20 + v24 + 56) = *(_DWORD *)(v25 + v24 + 56);
            }
          }
          v24 += 1096;
        }
        while (v25 + v24 < v14);
        uint64_t v23 = v20 + v24;
        uint64_t v21 = v53;
        unint64_t v22 = v54;
      }
      a1[1] = v23;
      if (v20 != v21)
      {
        uint64_t v33 = v20 - 1096;
        uint64_t v34 = 1096 * v22;
        do
        {
          sub_9C14C4(v33, 1096 * v6 + v5 - 1096 + v34);
          v33 -= 1096;
          v34 -= 1096;
        }
        while (v34);
      }
      if (v19 != v9)
      {
        uint64_t v35 = v7;
        do
        {
          sub_A0F158(v35, v9);
          v9 += 1096;
          v35 += 1096;
        }
        while (v9 != v19);
      }
    }
    else
    {
      unint64_t v15 = a5 - 0x1DE5D6E3F8868A47 * ((uint64_t)(v14 - v5) >> 3);
      if (v15 > 0x3BCBADC7F10D14) {
        sub_2E00();
      }
      unint64_t v16 = 0xE21A291C077975B9 * ((v12 - v5) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x1DE5D6E3F8868ALL) {
        unint64_t v17 = 0x3BCBADC7F10D14;
      }
      else {
        unint64_t v17 = v15;
      }
      uint64_t v59 = v11;
      if (v17)
      {
        if (v17 > 0x3BCBADC7F10D14) {
          sub_188D718();
        }
        long long v18 = (char *)operator new(1096 * v17);
      }
      else
      {
        long long v18 = 0;
      }
      uint64_t v36 = 0;
      long long v37 = &v18[1096 * v6];
      uint64_t __p = v18;
      uint64_t v56 = v37;
      long long v57 = v37;
      unint64_t v58 = &v18[1096 * v17];
      uint64_t v38 = 1096 * a5;
      uint64_t v39 = &v37[1096 * a5];
      do
      {
        uint64_t v40 = (uint64_t)&v37[v36];
        uint64_t v41 = v9 + v36;
        uint64_t v42 = *(unsigned int *)(v9 + v36 + 1088);
        *(_DWORD *)&v37[v36 + 1088] = v42;
        if (v42)
        {
          sub_8EC504(v42, (long long *)v41, v40);
        }
        else
        {
          long long v43 = *(_OWORD *)v41;
          long long v44 = *(_OWORD *)(v41 + 16);
          long long v45 = *(_OWORD *)(v41 + 32);
          *(void *)(v40 + 46) = *(void *)(v41 + 46);
          *(_OWORD *)(v40 + 16) = v44;
          *(_OWORD *)(v40 + 32) = v45;
          *(_OWORD *)uint64_t v40 = v43;
          int v46 = *(unsigned __int8 *)(v41 + 60);
          *(unsigned char *)(v40 + 60) = v46;
          if (v46) {
            *(_DWORD *)&v37[v36 + 56] = *(_DWORD *)(v9 + v36 + 56);
          }
        }
        v36 += 1096;
      }
      while (v38 != v36);
      long long v57 = v39;
      uint64_t v7 = sub_A0EEE8(a1, &__p, v7);
      uint64_t v47 = v56;
      while (1)
      {
        uint64_t v48 = v57;
        if (v57 == v47) {
          break;
        }
        v57 -= 1096;
        int v49 = *((_DWORD *)v48 - 2);
        switch(v49)
        {
          case 3:
            sub_3AFFFC((uint64_t)(v48 - 1064));
            break;
          case 1:
            uint64_t v51 = (void *)*((void *)v48 - 131);
            if (v51)
            {
              *((void *)v48 - 130) = v51;
              operator delete(v51);
            }
            break;
          case 0:
            int v50 = v48 - 1036;
            if (*v50) {
              char *v50 = 0;
            }
            break;
        }
      }
      if (__p) {
        operator delete(__p);
      }
    }
  }
  return v7;
}

void sub_A0EEAC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_A0EEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_A0E5D4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_A0EECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  a14 = v15 + v14;
  sub_A0E5D4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_A0EEE8(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = *a1;
  uint64_t v8 = v6;
  if (*a1 != a3)
  {
    uint64_t v9 = 0;
    do
    {
      unint64_t v10 = (long long *)(v6 + v9 - 1096);
      uint64_t v11 = (long long *)(a3 + v9 - 1096);
      *(_DWORD *)(v6 + v9 - 8) = *(_DWORD *)(a3 + v9 - 8);
      uint64_t v12 = *(unsigned int *)(a3 + v9 - 8);
      if (v12)
      {
        sub_9C16F4(v12, v11, (uint64_t)v10);
      }
      else
      {
        long long v13 = *v11;
        long long v14 = *(_OWORD *)(a3 + v9 - 1080);
        long long v15 = *(_OWORD *)(a3 + v9 - 1064);
        *(void *)(v6 + v9 - 1050) = *(void *)(a3 + v9 - 1050);
        *(_OWORD *)(v6 + v9 - 1080) = v14;
        *(_OWORD *)(v6 + v9 - 1064) = v15;
        *unint64_t v10 = v13;
        int v16 = *(unsigned __int8 *)(a3 + v9 - 1036);
        *(unsigned char *)(v6 + v9 - 1036) = v16;
        if (v16) {
          *(_DWORD *)(v6 + v9 - 1040) = *(_DWORD *)(a3 + v9 - 1040);
        }
      }
      v9 -= 1096;
    }
    while (a3 + v9 != v7);
    uint64_t v8 = v6 + v9;
  }
  a2[1] = v8;
  uint64_t v17 = a1[1];
  uint64_t v18 = a2[2];
  if (v17 != a3)
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v20 = a3 + v19;
      uint64_t v21 = v18 + v19;
      *(_DWORD *)(v18 + v19 + 1088) = *(_DWORD *)(a3 + v19 + 1088);
      uint64_t v22 = *(unsigned int *)(a3 + v19 + 1088);
      if (v22)
      {
        sub_9C16F4(v22, (long long *)v20, v21);
      }
      else
      {
        long long v23 = *(_OWORD *)v20;
        long long v24 = *(_OWORD *)(v20 + 16);
        long long v25 = *(_OWORD *)(v20 + 32);
        *(void *)(v21 + 46) = *(void *)(v20 + 46);
        *(_OWORD *)(v21 + 16) = v24;
        *(_OWORD *)(v21 + 32) = v25;
        *(_OWORD *)uint64_t v21 = v23;
        int v26 = *(unsigned __int8 *)(v20 + 60);
        *(unsigned char *)(v21 + 60) = v26;
        if (v26) {
          *(_DWORD *)(v18 + v19 + 56) = *(_DWORD *)(a3 + v19 + 56);
        }
      }
      v19 += 1096;
    }
    while (a3 + v19 != v17);
    uint64_t v8 = a2[1];
    v18 += v19;
  }
  a2[2] = v18;
  uint64_t v27 = *a1;
  *a1 = v8;
  a2[1] = v27;
  uint64_t v28 = a1[1];
  a1[1] = a2[2];
  a2[2] = v28;
  uint64_t v29 = a1[2];
  a1[2] = a2[3];
  a2[3] = v29;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_A0F090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      uint64_t v9 = a2 + v7;
      *(_DWORD *)(a4 + v7 + 1088) = *(_DWORD *)(a2 + v7 + 1088);
      uint64_t v10 = *(unsigned int *)(a2 + v7 + 1088);
      if (v10)
      {
        sub_8EC504(v10, (long long *)v9, v8);
      }
      else
      {
        long long v11 = *(_OWORD *)v9;
        long long v12 = *(_OWORD *)(v9 + 16);
        long long v13 = *(_OWORD *)(v9 + 32);
        *(void *)(v8 + 46) = *(void *)(v9 + 46);
        *(_OWORD *)(v8 + 16) = v12;
        *(_OWORD *)(v8 + 32) = v13;
        *(_OWORD *)uint64_t v8 = v11;
        int v14 = *(unsigned __int8 *)(v9 + 60);
        *(unsigned char *)(v8 + 60) = v14;
        if (v14) {
          *(_DWORD *)(a4 + v7 + 56) = *(_DWORD *)(a2 + v7 + 56);
        }
      }
      v7 += 1096;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_A0F13C(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_20ADF04(v1 + v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A0F158(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  int v4 = *(_DWORD *)(a1 + 1088);
  uint64_t v5 = *(unsigned int *)(a2 + 1088);
  if (v4 != v5)
  {
    if (v4 == 3)
    {
      sub_3AFFFC(a1 + 32);
    }
    else if (v4 == 1)
    {
      uint64_t v8 = *(void **)(a1 + 48);
      if (v8)
      {
        *(void *)(a1 + 56) = v8;
        operator delete(v8);
      }
    }
    else
    {
      if (v4) {
        goto LABEL_15;
      }
      if (*(unsigned char *)(a1 + 60)) {
        *(unsigned char *)(a1 + 60) = 0;
      }
    }
    uint64_t v5 = *(unsigned int *)(a2 + 1088);
LABEL_15:
    if (v5)
    {
      sub_8EC504(v5, (long long *)a2, a1);
    }
    else
    {
      long long v9 = *(_OWORD *)a2;
      long long v10 = *(_OWORD *)(a2 + 16);
      long long v11 = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 46) = *(void *)(a2 + 46);
      *(_OWORD *)(a1 + 16) = v10;
      *(_OWORD *)(a1 + 32) = v11;
      *(_OWORD *)a1 = v9;
      int v12 = *(unsigned __int8 *)(a2 + 60);
      *(unsigned char *)(a1 + 60) = v12;
      if (v12)
      {
        *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
        *(_DWORD *)(a1 + 1088) = *(_DWORD *)(a2 + 1088);
        return a1;
      }
    }
    *(_DWORD *)(a1 + 1088) = *(_DWORD *)(a2 + 1088);
    return a1;
  }
  switch(v4)
  {
    case 0:
      long long v13 = *(_OWORD *)a2;
      long long v14 = *(_OWORD *)(a2 + 16);
      long long v15 = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 46) = *(void *)(a2 + 46);
      *(_OWORD *)(a1 + 16) = v14;
      *(_OWORD *)(a1 + 32) = v15;
      *(_OWORD *)a1 = v13;
      if (*(unsigned char *)(a2 + 60))
      {
        int v16 = *(_DWORD *)(a2 + 56);
        if (!*(unsigned char *)(a1 + 60)) {
          *(unsigned char *)(a1 + 60) = 1;
        }
        *(_DWORD *)(a1 + 56) = v16;
        uint64_t result = a1;
      }
      else
      {
        if (!*(unsigned char *)(a1 + 60)) {
          return a1;
        }
        *(unsigned char *)(a1 + 60) = 0;
        uint64_t result = a1;
      }
      break;
    case 1:
      long long v17 = *(_OWORD *)a2;
      long long v18 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
      *(_OWORD *)a1 = v17;
      *(_OWORD *)(a1 + 16) = v18;
      sub_326C0((void *)(a1 + 48), *(char **)(a2 + 48), *(char **)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3);
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      return a1;
    case 2:
    case 4:
      long long v6 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_OWORD *)a1 = v6;
      return a1;
    case 3:
      long long v19 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
      *(_OWORD *)a1 = v19;
      sub_471250(a1 + 32, a2 + 32);
      return a1;
    default:
      return a1;
  }
  return result;
}

char *sub_A0F354(char **a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1C71C71C71C71C7) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 4);
  }
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 4) >= 0xE38E38E38E38E3) {
    unint64_t v6 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1C71C71C71C71C7) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(144 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[144 * v3];
  *(_DWORD *)uint64_t v8 = *(_DWORD *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  long long v9 = &v7[144 * v6];
  *((void *)v8 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v8 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v8 + 8) = 0;
  *((void *)v8 + 9) = 0;
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v8 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *((void *)v8 + 11) = 0;
  *((void *)v8 + 12) = 0;
  *((_OWORD *)v8 + 5) = *(_OWORD *)(a2 + 80);
  *((void *)v8 + 12) = *(void *)(a2 + 96);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *((void *)v8 + 14) = 0;
  *((void *)v8 + 15) = 0;
  *(_OWORD *)(v8 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  uint64_t v10 = *(void *)(a2 + 120);
  uint64_t v11 = *(void *)(a2 + 128);
  *(void *)(a2 + 120) = 0;
  *(void *)(v8 + 133) = *(void *)(a2 + 133);
  *((void *)v8 + 15) = v10;
  *((void *)v8 + 16) = v11;
  int v12 = v8 + 144;
  long long v14 = *a1;
  long long v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v12;
    a1[2] = v9;
    if (!v13) {
      return v12;
    }
    goto LABEL_18;
  }
  uint64_t v15 = 0;
  do
  {
    int v16 = &v8[v15];
    long long v17 = &v13[v15];
    int v18 = *(_DWORD *)&v13[v15 - 144];
    *((void *)v16 - 16) = 0;
    *((void *)v16 - 15) = 0;
    *(_OWORD *)(v16 - 136) = *(_OWORD *)&v13[v15 - 136];
    *((_DWORD *)v16 - 36) = v18;
    *((void *)v16 - 15) = *(void *)&v13[v15 - 120];
    *((void *)v17 - 17) = 0;
    *((void *)v17 - 16) = 0;
    *((void *)v17 - 15) = 0;
    *((void *)v16 - 13) = 0;
    *((void *)v16 - 12) = 0;
    *((_OWORD *)v16 - 7) = *(_OWORD *)&v13[v15 - 112];
    *((void *)v16 - 12) = *(void *)&v13[v15 - 96];
    *((void *)v17 - 14) = 0;
    *((void *)v17 - 13) = 0;
    *((void *)v17 - 12) = 0;
    *((void *)v16 - 10) = 0;
    *((void *)v16 - 9) = 0;
    *(_OWORD *)(v16 - 88) = *(_OWORD *)&v13[v15 - 88];
    *((void *)v16 - 9) = *(void *)&v13[v15 - 72];
    *((void *)v17 - 11) = 0;
    *((void *)v17 - 10) = 0;
    *((void *)v17 - 9) = 0;
    *((void *)v16 - 7) = 0;
    *((void *)v16 - 6) = 0;
    *((_OWORD *)v16 - 4) = *(_OWORD *)&v13[v15 - 64];
    *((void *)v16 - 6) = *(void *)&v13[v15 - 48];
    *((void *)v17 - 8) = 0;
    *((void *)v17 - 7) = 0;
    *((void *)v17 - 6) = 0;
    *((void *)v16 - 4) = 0;
    *((void *)v16 - 3) = 0;
    *(_OWORD *)(v16 - 40) = *(_OWORD *)&v13[v15 - 40];
    *((void *)v16 - 3) = *(void *)&v13[v15 - 24];
    *((void *)v17 - 5) = 0;
    *((void *)v17 - 4) = 0;
    *((void *)v17 - 3) = 0;
    uint64_t v19 = *(void *)&v13[v15 - 16];
    *(void *)(v16 - 11) = *(void *)&v13[v15 - 11];
    *((void *)v16 - 2) = v19;
    v15 -= 144;
  }
  while (&v13[v15] != v14);
  uint64_t v20 = *a1;
  long long v13 = a1[1];
  *a1 = &v8[v15];
  a1[1] = v12;
  a1[2] = v9;
  if (v13 != v20)
  {
    do
      long long v13 = (char *)sub_9BEAA8((void *)v13 - 18);
    while (v13 != v20);
    long long v13 = v20;
  }
  if (v13) {
LABEL_18:
  }
    operator delete(v13);
  return v12;
}

uint64_t sub_A0F5CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 144;
    sub_9BEAA8((void *)(i - 144));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_A0F620(int64x2_t *a1, uint64_t a2)
{
  uint64_t v3 = (a1->i64[1] - a1->i64[0]) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    sub_2E00();
  }
  uint64_t v6 = a1[1].i64[0] - a1->i64[0];
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  long long v24 = a1 + 1;
  if (v7)
  {
    if (v7 >> 58) {
      sub_188D718();
    }
    uint64_t v8 = (char *)operator new(v7 << 6);
  }
  else
  {
    uint64_t v8 = 0;
  }
  long long v9 = &v8[64 * v3];
  *(_OWORD *)long long v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = *(void *)(a2 + 16);
  uint64_t v10 = &v8[64 * v7];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(v9 + 54) = *(void *)(a2 + 54);
  *((void *)v9 + 5) = v11;
  *((void *)v9 + 6) = v12;
  long long v13 = v9 + 64;
  v22.i64[1] = (uint64_t)(v9 + 64);
  long long v23 = v10;
  uint64_t v15 = a1->i64[0];
  unint64_t v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    int64x2_t v18 = vdupq_n_s64(v14);
  }
  else
  {
    do
    {
      *((void *)v9 - 8) = 0;
      *((void *)v9 - 7) = 0;
      v9 -= 64;
      *((void *)v9 + 2) = 0;
      long long v16 = *(_OWORD *)(v14 - 64);
      v14 -= 64;
      *(_OWORD *)long long v9 = v16;
      *((void *)v9 + 2) = *(void *)(v14 + 16);
      *(void *)unint64_t v14 = 0;
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0;
      *((void *)v9 + 3) = 0;
      *((void *)v9 + 4) = 0;
      *((void *)v9 + 5) = 0;
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(v14 + 24);
      *((void *)v9 + 5) = *(void *)(v14 + 40);
      *(void *)(v14 + 24) = 0;
      *(void *)(v14 + 32) = 0;
      *(void *)(v14 + 40) = 0;
      uint64_t v17 = *(void *)(v14 + 48);
      *(void *)(v9 + 54) = *(void *)(v14 + 54);
      *((void *)v9 + 6) = v17;
    }
    while (v14 != v15);
    int64x2_t v18 = *a1;
    long long v13 = (char *)v22.i64[1];
    uint64_t v10 = v23;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v13;
  int64x2_t v22 = v18;
  uint64_t v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v10;
  long long v23 = v19;
  uint64_t __p = (void *)v18.i64[0];
  sub_A0F7E4((uint64_t)&__p, v18.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

uint64_t sub_A0F7AC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_A0F7E4(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v6 = (void **)(i - 64);
    *(void *)(a1 + 16) = i - 64;
    unint64_t v7 = *(void **)(i - 40);
    if (v7)
    {
      *(void *)(i - 32) = v7;
      operator delete(v7);
    }
    uint64_t v8 = (char *)*v6;
    if (*v6)
    {
      long long v9 = *(char **)(i - 56);
      uint64_t v5 = *v6;
      if (v9 != v8)
      {
        do
        {
          uint64_t v11 = (void *)*((void *)v9 - 5);
          if (v11)
          {
            *((void *)v9 - 4) = v11;
            operator delete(v11);
          }
          uint64_t v12 = (void *)*((void *)v9 - 8);
          if (v12)
          {
            *((void *)v9 - 7) = v12;
            operator delete(v12);
          }
          long long v13 = (void *)*((void *)v9 - 11);
          if (v13)
          {
            *((void *)v9 - 10) = v13;
            operator delete(v13);
          }
          unint64_t v14 = (void *)*((void *)v9 - 14);
          if (v14)
          {
            *((void *)v9 - 13) = v14;
            operator delete(v14);
          }
          uint64_t v15 = *((void *)v9 - 17);
          if (v15)
          {
            uint64_t v16 = *((void *)v9 - 16);
            uint64_t v10 = (void *)*((void *)v9 - 17);
            if (v16 != v15)
            {
              uint64_t v17 = v16 - 1064;
              do
              {
                int v19 = *(_DWORD *)(v17 + 1056);
                switch(v19)
                {
                  case 3:
                    sub_3AFFFC(v17);
                    break;
                  case 1:
                    uint64_t v20 = *(void **)(v17 + 16);
                    if (v20)
                    {
                      *(void *)(v17 + 24) = v20;
                      operator delete(v20);
                    }
                    break;
                  case 0:
                    if (*(unsigned char *)(v17 + 28)) {
                      *(unsigned char *)(v17 + 28) = 0;
                    }
                    break;
                }
                uint64_t v18 = v17 - 32;
                v17 -= 1096;
              }
              while (v18 != v15);
              uint64_t v10 = (void *)*((void *)v9 - 17);
            }
            *((void *)v9 - 16) = v15;
            operator delete(v10);
          }
          v9 -= 144;
        }
        while (v9 != v8);
        uint64_t v5 = *v6;
      }
      *(void *)(i - 56) = v8;
      operator delete(v5);
    }
  }
}

char ***sub_A0F948(char ***a1, long long *a2)
{
  unint64_t v4 = *a1;
  uint64_t v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v10 = *v4;
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - *v4) >> 3);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (void)v10) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x333333333333333) {
      unint64_t v14 = 0x666666666666666;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x666666666666666) {
        sub_188D718();
      }
      uint64_t v15 = (char *)operator new(40 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[40 * v11];
    long long v17 = a2[1];
    *(_OWORD *)uint64_t v16 = *a2;
    *((_OWORD *)v16 + 1) = v17;
    *((void *)v16 + 4) = *((void *)a2 + 4);
    long long v9 = v16 + 40;
    if (v6 != v10)
    {
      do
      {
        long long v18 = *(_OWORD *)(v6 - 40);
        long long v19 = *(_OWORD *)(v6 - 24);
        *(v16 - 8) = *(v6 - 8);
        *(_OWORD *)(v16 - 24) = v19;
        *(_OWORD *)(v16 - 40) = v18;
        v16 -= 40;
        v6 -= 40;
      }
      while (v6 != v10);
      uint64_t v6 = *v4;
    }
    char *v4 = v16;
    v4[1] = v9;
    v4[2] = &v15[40 * v14];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    long long v7 = *a2;
    long long v8 = a2[1];
    *((void *)v6 + 4) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v6 = v7;
    *((_OWORD *)v6 + 1) = v8;
    long long v9 = v6 + 40;
  }
  v4[1] = v9;
  return a1;
}

unint64_t sub_A0FAA0(uint64_t *a1, unsigned int *a2, unsigned int a3, int a4)
{
  long long v8 = sub_369B60(*a1 + 24, a2[1] | ((unint64_t)*a2 << 32), 0);
  long long v9 = (int *)v8;
  uint64_t v10 = 0;
  uint64_t v11 = *(int *)v8;
  uint64_t v12 = -v11;
  unint64_t v13 = &v8[-v11];
  unsigned int v14 = *(unsigned __int16 *)v13;
  if (v14 >= 5)
  {
    uint64_t v10 = *((unsigned __int16 *)v13 + 2);
    if (*((_WORD *)v13 + 2)) {
      v10 += (uint64_t)&v8[*(unsigned int *)&v8[v10]];
    }
  }
  uint64_t v15 = (int *)(v10 + 4 * *a2 + 4 + *(unsigned int *)(v10 + 4 * *a2 + 4));
  if (a4 == 0x7FFFFFFF)
  {
    if (v14 >= 0xD && *((_WORD *)v13 + 6))
    {
      uint64_t v16 = (unsigned int *)&v8[*((unsigned __int16 *)v13 + 6) + *(unsigned int *)&v8[*((unsigned __int16 *)v13 + 6)]];
      long long v17 = (unsigned __int16 *)((char *)v15 - *v15);
      if (*v17 < 0x15u) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v16 = 0;
      long long v17 = (unsigned __int16 *)((char *)v15 - *v15);
      if (*v17 < 0x15u) {
        goto LABEL_12;
      }
    }
    uint64_t v18 = v17[10];
    if (v18)
    {
      int v19 = *(int *)((char *)v15 + v18);
      goto LABEL_13;
    }
LABEL_12:
    int v19 = -1;
LABEL_13:
    int v20 = *(_DWORD *)(sub_A10148(v16, a2[2] + v19) + 4);
    uint64_t v21 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v21 >= 0xBu && (uint64_t v22 = v21[5]) != 0) {
      int v23 = *(int *)((char *)v15 + v22);
    }
    else {
      int v23 = 0x7FFFFFFF;
    }
    a4 = sub_920D68((v23 + v20));
    uint64_t v12 = -(uint64_t)*v9;
  }
  long long v24 = (unsigned __int16 *)((char *)v9 + v12);
  if (*v24 >= 7u && (uint64_t v25 = v24[3]) != 0)
  {
    int v26 = (unsigned int *)((char *)v9 + v25 + *(unsigned int *)((char *)v9 + v25));
    uint64_t v27 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v27 < 0xDu) {
      goto LABEL_25;
    }
  }
  else
  {
    int v26 = 0;
    uint64_t v27 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v27 < 0xDu)
    {
LABEL_25:
      int v29 = -1;
      goto LABEL_26;
    }
  }
  uint64_t v28 = v27[6];
  if (!v28) {
    goto LABEL_25;
  }
  int v29 = *(int *)((char *)v15 + v28);
LABEL_26:
  int v30 = *(_DWORD *)(sub_36A650(v26, v29 + a3) + 12);
  char v31 = sub_51D60((unsigned __int8 *)(*a1 + 3896));
  uint64_t v32 = *a1;
  if (!sub_C259D4(*a1 + 3896)) {
    return (v30 + a4) | ((unint64_t)(v30 + a4) << 32);
  }
  if (!*(void *)(v32 + 3960)) {
    return (v30 + a4) | ((unint64_t)(v30 + a4) << 32);
  }
  uint64_t v33 = sub_367060(*(void *)(*a1 + 3960), a2[1] | ((unint64_t)*a2 << 32), a2[2], v31);
  if (!v33) {
    return (v30 + a4) | ((unint64_t)(v30 + a4) << 32);
  }
  uint64_t v34 = v33[5];
  if (0xCCCCCCCCCCCCCCCDLL * ((v33[6] - v34) >> 2) <= a3)
  {
    uint64_t v36 = (v30 + a4);
    unint64_t v37 = 0x7FFFFFFF00000000;
  }
  else
  {
    int v35 = *(_DWORD *)(v34 + 20 * a3 + 12);
    uint64_t v36 = (v30 + a4);
    if (v35 == 0x7FFFFFFF)
    {
      unint64_t v37 = 0x7FFFFFFF00000000;
    }
    else
    {
      int v39 = v35 / 10;
      int v40 = v35 % 10;
      if (v35 < 0) {
        char v41 = -5;
      }
      else {
        char v41 = 5;
      }
      unint64_t v37 = (unint64_t)(v39
                             + a4
                             + (((103 * (char)(v41 + v40)) >> 15) & 1)
                             + ((103 * (char)(v41 + v40)) >> 10)) << 32;
    }
  }
  if (*((unsigned char *)v33 + 32) == 1) {
    unint64_t v37 = 0x7FFFFFFF00000000;
  }
  return v37 | v36;
}

unint64_t sub_A0FDF4(uint64_t *a1, unsigned int *a2, unsigned int a3, int a4)
{
  long long v8 = sub_369B60(*a1 + 24, a2[1] | ((unint64_t)*a2 << 32), 0);
  long long v9 = (int *)v8;
  uint64_t v10 = 0;
  uint64_t v11 = *(int *)v8;
  uint64_t v12 = -v11;
  unint64_t v13 = &v8[-v11];
  unsigned int v14 = *(unsigned __int16 *)v13;
  if (v14 >= 5)
  {
    uint64_t v10 = *((unsigned __int16 *)v13 + 2);
    if (*((_WORD *)v13 + 2)) {
      v10 += (uint64_t)&v8[*(unsigned int *)&v8[v10]];
    }
  }
  uint64_t v15 = (int *)(v10 + 4 * *a2 + 4 + *(unsigned int *)(v10 + 4 * *a2 + 4));
  if (a4 == 0x7FFFFFFF)
  {
    if (v14 >= 0xD && *((_WORD *)v13 + 6))
    {
      uint64_t v16 = (unsigned int *)&v8[*((unsigned __int16 *)v13 + 6) + *(unsigned int *)&v8[*((unsigned __int16 *)v13 + 6)]];
      long long v17 = (unsigned __int16 *)((char *)v15 - *v15);
      if (*v17 < 0x15u) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v16 = 0;
      long long v17 = (unsigned __int16 *)((char *)v15 - *v15);
      if (*v17 < 0x15u) {
        goto LABEL_12;
      }
    }
    uint64_t v18 = v17[10];
    if (v18)
    {
      int v19 = *(int *)((char *)v15 + v18);
      goto LABEL_13;
    }
LABEL_12:
    int v19 = -1;
LABEL_13:
    int v20 = *(_DWORD *)(sub_A10148(v16, a2[2] + v19) + 4);
    uint64_t v21 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v21 >= 0xBu && (uint64_t v22 = v21[5]) != 0) {
      int v23 = *(int *)((char *)v15 + v22);
    }
    else {
      int v23 = 0x7FFFFFFF;
    }
    a4 = sub_920D68((v23 + v20));
    uint64_t v12 = -(uint64_t)*v9;
  }
  long long v24 = (unsigned __int16 *)((char *)v9 + v12);
  if (*v24 >= 7u && (uint64_t v25 = v24[3]) != 0)
  {
    int v26 = (unsigned int *)((char *)v9 + v25 + *(unsigned int *)((char *)v9 + v25));
    uint64_t v27 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v27 < 0xDu) {
      goto LABEL_25;
    }
  }
  else
  {
    int v26 = 0;
    uint64_t v27 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v27 < 0xDu)
    {
LABEL_25:
      int v29 = -1;
      goto LABEL_26;
    }
  }
  uint64_t v28 = v27[6];
  if (!v28) {
    goto LABEL_25;
  }
  int v29 = *(int *)((char *)v15 + v28);
LABEL_26:
  int v30 = *(_DWORD *)(sub_36A650(v26, v29 + a3) + 8);
  char v31 = sub_51D60((unsigned __int8 *)(*a1 + 3896));
  uint64_t v32 = *a1;
  if (!sub_C259D4(*a1 + 3896)) {
    return (v30 + a4) | ((unint64_t)(v30 + a4) << 32);
  }
  if (!*(void *)(v32 + 3960)) {
    return (v30 + a4) | ((unint64_t)(v30 + a4) << 32);
  }
  uint64_t v33 = sub_367060(*(void *)(*a1 + 3960), a2[1] | ((unint64_t)*a2 << 32), a2[2], v31);
  if (!v33) {
    return (v30 + a4) | ((unint64_t)(v30 + a4) << 32);
  }
  uint64_t v34 = v33[5];
  if (0xCCCCCCCCCCCCCCCDLL * ((v33[6] - v34) >> 2) <= a3)
  {
    uint64_t v36 = (v30 + a4);
    unint64_t v37 = 0x7FFFFFFF00000000;
  }
  else
  {
    int v35 = *(_DWORD *)(v34 + 20 * a3 + 8);
    uint64_t v36 = (v30 + a4);
    if (v35 == 0x7FFFFFFF)
    {
      unint64_t v37 = 0x7FFFFFFF00000000;
    }
    else
    {
      int v39 = v35 / 10;
      int v40 = v35 % 10;
      if (v35 < 0) {
        char v41 = -5;
      }
      else {
        char v41 = 5;
      }
      unint64_t v37 = (unint64_t)(v39
                             + a4
                             + (((103 * (char)(v41 + v40)) >> 15) & 1)
                             + ((103 * (char)(v41 + v40)) >> 10)) << 32;
    }
  }
  if (*((unsigned char *)v33 + 32) == 1) {
    unint64_t v37 = 0x7FFFFFFF00000000;
  }
  return v37 | v36;
}

uint64_t sub_A10148(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    unint64_t v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    long long v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    long long v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[2 * a2 + 1];
}

void sub_A10228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

char *sub_A102A8(void **a1, uint64_t a2)
{
  unint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  unint64_t v5 = 0xE21A291C077975B9 * ((v3 - (unsigned char *)*a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x3BCBADC7F10D14) {
    sub_2E00();
  }
  if (0xC43452380EF2EB72 * (((unsigned char *)a1[2] - v4) >> 3) > v6) {
    unint64_t v6 = 0xC43452380EF2EB72 * (((unsigned char *)a1[2] - v4) >> 3);
  }
  if (0xE21A291C077975B9 * (((unsigned char *)a1[2] - v4) >> 3) >= 0x1DE5D6E3F8868ALL) {
    unint64_t v8 = 0x3BCBADC7F10D14;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x3BCBADC7F10D14) {
      sub_188D718();
    }
    long long v9 = (char *)operator new(1096 * v8);
  }
  else
  {
    long long v9 = 0;
  }
  std::string v10 = &v9[1096 * v5];
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)std::string v10 = *(_OWORD *)a2;
  *((_OWORD *)v10 + 1) = v11;
  *((_OWORD *)v10 + 2) = *(_OWORD *)(a2 + 32);
  *(void *)(v10 + 46) = *(void *)(a2 + 46);
  int v12 = *(unsigned __int8 *)(a2 + 60);
  v10[60] = v12;
  if (v12) {
    *((_DWORD *)v10 + 14) = *(_DWORD *)(a2 + 56);
  }
  std::string::size_type v13 = &v9[1096 * v8];
  *((_DWORD *)v10 + 272) = 0;
  unsigned int v14 = v10 + 1096;
  if (v3 == v4)
  {
    *a1 = v10;
    a1[1] = v14;
    a1[2] = v13;
  }
  else
  {
    uint64_t v15 = 0;
    do
    {
      uint64_t v16 = (long long *)&v10[v15 - 1096];
      long long v17 = (long long *)&v3[v15 - 1096];
      uint64_t v18 = *(unsigned int *)&v3[v15 - 8];
      *(_DWORD *)&v10[v15 - 8] = v18;
      if (v18)
      {
        sub_9C16F4(v18, v17, (uint64_t)v16);
      }
      else
      {
        long long v19 = *v17;
        long long v20 = *(_OWORD *)&v3[v15 - 1080];
        long long v21 = *(_OWORD *)&v3[v15 - 1064];
        *(void *)&v10[v15 - 1050] = *(void *)&v3[v15 - 1050];
        *(_OWORD *)&v10[v15 - 1080] = v20;
        *(_OWORD *)&v10[v15 - 1064] = v21;
        *uint64_t v16 = v19;
        int v22 = v3[v15 - 1036];
        v10[v15 - 1036] = v22;
        if (v22) {
          *(_DWORD *)&v10[v15 - 1040] = *(_DWORD *)&v3[v15 - 1040];
        }
      }
      v15 -= 1096;
    }
    while (&v3[v15] != v4);
    uint64_t v3 = (char *)*a1;
    int v23 = (char *)a1[1];
    *a1 = &v10[v15];
    a1[1] = v14;
    a1[2] = v13;
    if (v23 == v3)
    {
      uint64_t v3 = v23;
      if (!v23) {
        return v10 + 1096;
      }
      goto LABEL_33;
    }
    uint64_t v24 = (uint64_t)(v23 - 1064);
    do
    {
      int v26 = *(_DWORD *)(v24 + 1056);
      if (v26 == 3)
      {
        sub_3AFFFC(v24);
      }
      else if (v26 == 1)
      {
        uint64_t v27 = *(void **)(v24 + 16);
        if (v27)
        {
          *(void *)(v24 + 24) = v27;
          operator delete(v27);
        }
      }
      else if (!v26 && *(unsigned char *)(v24 + 28))
      {
        *(unsigned char *)(v24 + 28) = 0;
      }
      uint64_t v25 = (char *)(v24 - 32);
      v24 -= 1096;
    }
    while (v25 != v3);
  }
  if (v3) {
LABEL_33:
  }
    operator delete(v3);
  return v10 + 1096;
}

uint64_t sub_A104E8(void *a1, unint64_t a2, unsigned int a3, int a4)
{
  unsigned int v6 = a2;
  long long v7 = sub_A10650(a1, a2);
  unint64_t v8 = (int *)v7;
  long long v9 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v9 < 5u)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = *((unsigned __int16 *)v9 + 2);
    if (v10) {
      v10 += (uint64_t)&v7[*(unsigned int *)&v7[v10]];
    }
  }
  long long v11 = (int *)(v10 + 4 * v6 + 4 + *(unsigned int *)(v10 + 4 * v6 + 4));
  int v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 9u && (uint64_t v13 = v12[4]) != 0) {
    unsigned int v14 = (unsigned int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
  }
  else {
    unsigned int v14 = 0;
  }
  uint64_t v15 = sub_A10764(v14, a3);
  uint64_t v16 = (unsigned __int16 *)((char *)v8 - *v8);
  if (*v16 >= 0xBu)
  {
    long long v17 = (unsigned int *)v16[5];
    if (v17) {
      long long v17 = (unsigned int *)((char *)v17 + (void)v8 + *(unsigned int *)((char *)v17 + (void)v8));
    }
    uint64_t v18 = (unsigned __int16 *)((char *)v11 - *v11);
    if (*v18 >= 0x11u) {
      goto LABEL_13;
    }
LABEL_16:
    LODWORD(v19) = 0;
    goto LABEL_17;
  }
  long long v17 = 0;
  uint64_t v18 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v18 < 0x11u) {
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v19 = v18[8];
  if (v18[8]) {
    LODWORD(v19) = *(int *)((char *)v11 + v19);
  }
LABEL_17:
  long long v20 = (void *)sub_A108C4(v17, v19+ *(int *)((char *)v11 + v18[2] + *(unsigned int *)((char *)v11 + v18[2])) * a4+ *(unsigned __int8 *)(v15 + 14));
  if (v20) {
    return __ROR8__(*v20, 32);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

char *sub_A10650(void *a1, unint64_t a2)
{
  unint64_t v4 = HIDWORD(a2);
  if (sub_A10E20(a1, SHIDWORD(a2)))
  {
    uint64_t v5 = *(void *)(*a1 + 3944);
    return sub_A10A28(v5);
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7308))
    {
      sub_518C8(0x3B60u, 0x7FCAu);
      dword_24F7300 = v9 | 0x40000000;
      __cxa_guard_release(&qword_24F7308);
    }
    uint64_t v7 = *a1;
    if (dword_24F7300 == v4)
    {
      uint64_t v8 = *(void *)(v7 + 3976);
      return sub_A10AD4(v8);
    }
    else
    {
      return sub_A10B80(v7 + 24, a2, 0);
    }
  }
}

void sub_A1074C(_Unwind_Exception *a1)
{
}

uint64_t sub_A10764(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    uint64_t v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    int v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[4 * a2 + 1];
}

void sub_A10844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_A108C4(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    uint64_t v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    int v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[3 * a2 + 1];
}

void sub_A109A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

char *sub_A10A28(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 72);
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v5, "Incident stop pattern quad data requested on nullptr buffer");
    unint64_t v4 = (void *)sub_2F404((uint64_t)exception, &v5);
  }
  return (char *)v1 + *v1;
}

void sub_A10AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_A10AD4(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 72);
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v5, "Realtime stop pattern quad data requested on nullptr buffer");
    unint64_t v4 = (void *)sub_2F404((uint64_t)exception, &v5);
  }
  return (char *)v1 + *v1;
}

void sub_A10B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_A10B80(uint64_t a1, unint64_t a2, int a3)
{
  unsigned int v4 = a2;
  unint64_t v5 = HIDWORD(a2);
  uint64_t result = sub_398200(a1, HIDWORD(a2), a3);
  if (result)
  {
    uint64_t v7 = &result[-*(int *)result];
    unsigned int v8 = *(unsigned __int16 *)v7;
    if (v8 >= 7)
    {
      uint64_t v9 = *((unsigned __int16 *)v7 + 3);
      if (*((_WORD *)v7 + 3))
      {
        std::string v10 = &result[v9 + *(unsigned int *)&result[v9]];
        std::string v11 = &v10[-*(int *)v10];
        if (*(unsigned __int16 *)v11 >= 5u)
        {
          uint64_t v12 = *((unsigned __int16 *)v11 + 2);
          if (v12)
          {
            if (*(_DWORD *)&v10[v12 + *(unsigned int *)&v10[v12]] > v4) {
              goto LABEL_11;
            }
          }
        }
      }
    }
    if (a3 == 1) {
      return 0;
    }
    if (!a3)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      unsigned int v14 = v5;
      uint64_t v15 = (uint64_t)exception;
      std::to_string(&v26, v14);
      uint64_t v16 = std::string::insert(&v26, 0, "Failed to acquire stop pattern in quad node ");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = std::string::append(&v27, " and position ");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v25, v4);
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v20 = &v25;
      }
      else {
        long long v20 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v25.__r_.__value_.__l.__size_;
      }
      int v22 = std::string::append(&v28, (const std::string::value_type *)v20, size);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      std::string::size_type v30 = v22->__r_.__value_.__r.__words[2];
      long long v29 = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      uint64_t v24 = (void *)sub_2F404(v15, &v29);
    }
    if (v8 >= 7 && (LODWORD(v9) = *((unsigned __int16 *)v7 + 3), *((_WORD *)v7 + 3))) {
LABEL_11:
    }
      result += v9 + (unint64_t)*(unsigned int *)&result[v9];
    else {
      return 0;
    }
  }
  return result;
}

void sub_A10D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(__p);
    if (a33 < 0)
    {
LABEL_7:
      operator delete(a28);
      if (a26 < 0)
      {
LABEL_10:
        operator delete(a21);
        if ((a20 & 0x80000000) == 0) {
          goto LABEL_14;
        }
        goto LABEL_13;
      }
LABEL_12:
      if ((a20 & 0x80000000) == 0) {
LABEL_14:
      }
        _Unwind_Resume(a1);
LABEL_13:
      operator delete(a15);
      goto LABEL_14;
    }
  }
  else if (a33 < 0)
  {
    goto LABEL_7;
  }
  if (a26 < 0) {
    goto LABEL_10;
  }
  goto LABEL_12;
}

BOOL sub_A10E20(void *a1, int a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F72F8, memory_order_acquire) & 1) == 0)
  {
    std::string v11 = a1;
    int v6 = __cxa_guard_acquire(&qword_24F72F8);
    a1 = v11;
    if (v6)
    {
      unint64_t v7 = sub_A10F80(-85.0, 0.0);
      sub_518C8(v7 >> 17, v7 >> 49);
      dword_24F72F0 = v8 | 0x40000000;
      __cxa_guard_release(&qword_24F72F8);
      a1 = v11;
    }
  }
  int v3 = dword_24F72F0;
  if (dword_24F72F0 == a2)
  {
    uint64_t v4 = *a1;
    if (!sub_C259C0(*a1 + 3896) || !*(void *)(v4 + 3944))
    {
      exception = __cxa_allocate_exception(0x40uLL);
      sub_5E5C(&v12, "Encountered reference to invalid journey planner incident data.");
      std::string v10 = (void *)sub_2F404((uint64_t)exception, &v12);
    }
  }
  return v3 == a2;
}

void sub_A10F38(_Unwind_Exception *a1)
{
}

void sub_A10F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A10F6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A10F80(double a1, double a2)
{
  uint64_t result = -1;
  if (a2 <= 180.0 && a1 >= -85.0511288 && a1 <= 85.0511288 && a2 >= -180.0)
  {
    double v4 = fmax(a1, -85.0511288);
    double v5 = v4 * 3.14159265 / 180.0;
    BOOL v6 = v4 < 85.0511288;
    double v7 = 1.48442223;
    if (v6) {
      double v7 = v5;
    }
    long double v8 = sin(v7);
    LODWORD(v9) = ((log((v8 + 1.0) / (1.0 - v8)) / -12.5663706 + 0.5) * 4294967300.0);
    if (v9 >= 0xFFFFFFFE) {
      uint64_t v9 = 4294967294;
    }
    else {
      uint64_t v9 = v9;
    }
    return ((a2 + 180.0) / 360.0 * 4294967300.0) | (unint64_t)(v9 << 32);
  }
  return result;
}

uint64_t sub_A11094(void *a1, unint64_t a2)
{
  unint64_t v4 = HIDWORD(a2);
  if (sub_A10E20(a1, SHIDWORD(a2)))
  {
    uint64_t v5 = *(void *)(*a1 + 3944);
    return sub_A1120C(v5, a2);
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7308, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7308))
    {
      sub_518C8(0x3B60u, 0x7FCAu);
      dword_24F7300 = v13 | 0x40000000;
      __cxa_guard_release(&qword_24F7308);
    }
    uint64_t v7 = *a1;
    if (dword_24F7300 == v4)
    {
      long double v8 = sub_A10AD4(*(void *)(v7 + 3976));
      uint64_t v9 = &v8[-*(int *)v8];
      if (*(unsigned __int16 *)v9 >= 5u && (uint64_t v10 = *((unsigned __int16 *)v9 + 2)) != 0)
      {
        std::string v11 = (unsigned int *)&v8[v10 + *(unsigned int *)&v8[v10]];
        unsigned int v12 = a2;
      }
      else
      {
        std::string v11 = 0;
        unsigned int v12 = a2;
      }
      return sub_A1139C(v11, v12);
    }
    else
    {
      return sub_A11500(v7 + 24, a2, 0, "stop pattern");
    }
  }
}

void sub_A111F4(_Unwind_Exception *a1)
{
}

uint64_t sub_A1120C(uint64_t a1, unsigned int a2)
{
  int v3 = sub_A10A28(a1);
  unint64_t v4 = &v3[-*(int *)v3];
  if (*(unsigned __int16 *)v4 < 5u
    || (uint64_t v5 = *((unsigned __int16 *)v4 + 2)) == 0
    || (BOOL v6 = (unsigned int *)&v3[v5 + *(unsigned int *)&v3[v5]], *v6 <= a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v14, a2);
    uint64_t v9 = std::string::insert(&v14, 0, "Requested new incident stop pattern at object id ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::string v11 = std::string::append(&v15, ", which is out of range");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v17 = v11->__r_.__value_.__r.__words[2];
    long long v16 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    int v13 = (void *)sub_2F404((uint64_t)exception, &v16);
  }
  return (uint64_t)&v6[a2 + 1] + v6[a2 + 1];
}

void sub_A1131C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_A1139C(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    uint64_t v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[a2 + 1] + a1[a2 + 1];
}

void sub_A11480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_A11500(uint64_t a1, unint64_t a2, int a3, char *a4)
{
  unsigned int v6 = a2;
  unint64_t v8 = HIDWORD(a2);
  LODWORD(v65.__r_.__value_.__l.__data_) = HIDWORD(a2);
  LODWORD(v64.__r_.__value_.__l.__data_) = a3;
  *(void *)&long long v66 = &v64;
  *((void *)&v66 + 1) = &v65;
  unint64_t v9 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v9;
  uint64_t v10 = *(void *)a1;
  if (!v10) {
    goto LABEL_38;
  }
  uint64_t v11 = a1 + 16;
  if (*(_DWORD *)(a1 + 880) == HIDWORD(a2))
  {
    unsigned int v12 = 36;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 904) == HIDWORD(a2))
  {
    unsigned int v12 = 37;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 928) == HIDWORD(a2))
  {
    unsigned int v12 = 38;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 952) == HIDWORD(a2))
  {
    unsigned int v12 = 39;
LABEL_10:
    ++*(void *)(a1 + 3864);
    uint64_t v13 = v11 + 24 * v12;
    *(void *)(v13 + 8) = v9;
    std::string v14 = *(unsigned int **)(v13 + 16);
    if (v14) {
      goto LABEL_11;
    }
LABEL_38:
    sub_398390((int **)&v66);
    long long v21 = 0;
    goto LABEL_39;
  }
  unint64_t v23 = *(void *)(a1 + 936);
  unint64_t v24 = *(void *)(a1 + 912);
  unint64_t v25 = *(void *)(a1 + 888);
  BOOL v26 = v25 >= v9;
  if (v25 < v9) {
    unint64_t v9 = *(void *)(a1 + 888);
  }
  int v27 = 36;
  if (v26) {
    int v27 = 0;
  }
  BOOL v28 = v24 >= v9;
  if (v24 < v9) {
    unint64_t v9 = *(void *)(a1 + 912);
  }
  int v29 = 37;
  if (v28) {
    int v29 = v27;
  }
  if (v23 >= v9) {
    unint64_t v30 = v9;
  }
  else {
    unint64_t v30 = *(void *)(a1 + 936);
  }
  unint64_t v31 = *(void *)(a1 + 960);
  if (v23 >= v9) {
    int v32 = v29;
  }
  else {
    int v32 = 38;
  }
  std::string v14 = (unsigned int *)sub_2AB884(v10, 9, HIDWORD(a2), 1);
  unsigned int v33 = 39;
  if (v31 >= v30) {
    unsigned int v33 = v32;
  }
  uint64_t v34 = v11 + 24 * v33;
  *(_DWORD *)uint64_t v34 = v65.__r_.__value_.__l.__data_;
  *(void *)(v34 + 8) = *(void *)(a1 + 3856);
  *(void *)(v34 + 16) = v14;
  if (!v14) {
    goto LABEL_38;
  }
LABEL_11:
  std::string v15 = (int *)((char *)v14 + *v14);
  long long v16 = (unsigned __int16 *)((char *)v15 - *v15);
  if (*v16 < 7u
    || (uint64_t v17 = v16[3]) == 0
    || (uint64_t v18 = (int *)((char *)v15 + v17 + *(unsigned int *)((char *)v15 + v17)),
        long long v19 = (unsigned __int16 *)((char *)v18 - *v18),
        *v19 < 5u)
    || (uint64_t v20 = v19[2]) == 0)
  {
    long long v21 = 0;
    if (a3 != 1) {
      goto LABEL_40;
    }
    return 0;
  }
  long long v21 = (unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20));
  if (*v21 <= v6)
  {
LABEL_39:
    if (a3 != 1)
    {
LABEL_40:
      if (!a3)
      {
        unsigned int v35 = v6;
        exception = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v59, a4);
        unint64_t v37 = std::string::insert(&v59, 0, "Failed to acquire entity \"");
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        int v39 = std::string::append(&v60, "\" in quad node ");
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v58, v8);
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v41 = &v58;
        }
        else {
          char v41 = (std::string *)v58.__r_.__value_.__r.__words[0];
        }
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v58.__r_.__value_.__l.__size_;
        }
        long long v43 = std::string::append(&v61, (const std::string::value_type *)v41, size);
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        long long v45 = std::string::append(&v62, " at position ");
        long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v63.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v57, v35);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v47 = &v57;
        }
        else {
          uint64_t v47 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v48 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v48 = v57.__r_.__value_.__l.__size_;
        }
        int v49 = std::string::append(&v63, (const std::string::value_type *)v47, v48);
        long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        uint64_t v51 = std::string::append(&v64, " on layer ");
        long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        uint64_t v53 = sub_736EC(9u);
        unint64_t v54 = std::string::append(&v65, v53);
        long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        std::string::size_type v67 = v54->__r_.__value_.__r.__words[2];
        long long v66 = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        uint64_t v56 = (void *)sub_2F404((uint64_t)exception, &v66);
      }
      return (uint64_t)&v21[v6 + 1] + v21[v6 + 1];
    }
    return 0;
  }
  return (uint64_t)&v21[v6 + 1] + v21[v6 + 1];
}

void sub_A118B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (*(char *)(v54 - 89) < 0) {
    operator delete(*(void **)(v54 - 112));
  }
  if (*(char *)(v54 - 121) < 0)
  {
    operator delete(*(void **)(v54 - 144));
    if (*(char *)(v54 - 153) < 0)
    {
LABEL_7:
      operator delete(*(void **)(v54 - 176));
      if (a15 < 0)
      {
LABEL_10:
        operator delete(__p);
        if (a54 < 0)
        {
LABEL_13:
          operator delete(a49);
          if (a47 < 0)
          {
LABEL_16:
            operator delete(a42);
            if (a21 < 0)
            {
LABEL_19:
              operator delete(a16);
              if (a40 < 0)
              {
LABEL_22:
                operator delete(a35);
                if (a33 < 0)
                {
LABEL_25:
                  operator delete(a28);
                  if ((a27 & 0x80000000) == 0) {
                    goto LABEL_29;
                  }
                  goto LABEL_28;
                }
LABEL_27:
                if ((a27 & 0x80000000) == 0) {
LABEL_29:
                }
                  _Unwind_Resume(a1);
LABEL_28:
                operator delete(a22);
                goto LABEL_29;
              }
LABEL_24:
              if (a33 < 0) {
                goto LABEL_25;
              }
              goto LABEL_27;
            }
LABEL_21:
            if (a40 < 0) {
              goto LABEL_22;
            }
            goto LABEL_24;
          }
LABEL_18:
          if (a21 < 0) {
            goto LABEL_19;
          }
          goto LABEL_21;
        }
LABEL_15:
        if (a47 < 0) {
          goto LABEL_16;
        }
        goto LABEL_18;
      }
LABEL_12:
      if (a54 < 0) {
        goto LABEL_13;
      }
      goto LABEL_15;
    }
  }
  else if (*(char *)(v54 - 153) < 0)
  {
    goto LABEL_7;
  }
  if (a15 < 0) {
    goto LABEL_10;
  }
  goto LABEL_12;
}

void *sub_A11A74(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unsigned int v6 = *(const void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  int64_t v7 = v5 - *(void *)a2;
  if (v5 != *(void *)a2)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v7 >> 2)) > 0x924924924924924) {
      sub_2E00();
    }
    unint64_t v8 = (char *)operator new(v7);
    *a1 = v8;
    a1[1] = v8;
    unint64_t v9 = &v8[4 * (v7 >> 2)];
    a1[2] = v9;
    memcpy(v8, v6, v7);
    a1[1] = v9;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  uint64_t v10 = *(const void **)a3;
  int64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v11 >> 2)) > 0x924924924924924) {
      sub_2E00();
    }
    unsigned int v12 = (char *)operator new(v11);
    a1[3] = v12;
    a1[4] = v12;
    uint64_t v13 = &v12[4 * (v11 >> 2)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  return a1;
}

void sub_A11B88(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A11BBC(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  uint64_t v10 = (int *)(a2 - 12);
  int64_t v11 = (int *)(a2 - 24);
  unsigned int v12 = (int *)(a2 - 36);
  unint64_t v13 = v9;
  while (1)
  {
    unint64_t v9 = v13;
    uint64_t v14 = a2 - v13;
    uint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v13) >> 2);
    if (v5 || !v4)
    {
      switch(v15)
      {
        case 0:
        case 1:
          return result;
        case 2:
          int v92 = *(_DWORD *)(a2 - 12);
          unint64_t v91 = (uint64_t *)(a2 - 12);
          if (v92 >= *(_DWORD *)v13) {
            return result;
          }
          goto LABEL_101;
        case 3:
          long long v93 = (uint64_t *)(v13 + 12);
          int v94 = *(_DWORD *)(v13 + 12);
          int v96 = *(_DWORD *)(a2 - 12);
          unint64_t v91 = (uint64_t *)(a2 - 12);
          int v95 = v96;
          if (v94 >= *(_DWORD *)v13)
          {
            if (v95 < v94)
            {
              uint64_t v148 = *v93;
              __int16 v149 = *(_DWORD *)(v13 + 20);
              __int16 v150 = *((_WORD *)v91 + 4);
              *long long v93 = *v91;
              *(_WORD *)(v13 + 20) = v150;
              *((_WORD *)v91 + 4) = v149;
              uint64_t *v91 = v148;
              if (*(_DWORD *)(v13 + 12) < *(_DWORD *)v13)
              {
                int v206 = *(_DWORD *)(v13 + 8);
                uint64_t v182 = *(void *)v13;
                *(void *)unint64_t v13 = *v93;
                *(_WORD *)(v13 + 8) = *(_WORD *)(v13 + 20);
                *long long v93 = v182;
                *(_WORD *)(v13 + 20) = v206;
              }
            }
          }
          else if (v95 >= v94)
          {
            int v207 = *(_DWORD *)(v13 + 8);
            uint64_t v183 = *(void *)v13;
            *(void *)unint64_t v13 = *v93;
            *(_WORD *)(v13 + 8) = *(_WORD *)(v13 + 20);
            *long long v93 = v183;
            *(_WORD *)(v13 + 20) = v207;
            if (*(_DWORD *)v91 < *(_DWORD *)(v13 + 12))
            {
              uint64_t v157 = *v93;
              int v158 = *(_DWORD *)(v13 + 20);
              __int16 v159 = *((_WORD *)v91 + 4);
              *long long v93 = *v91;
              *(_WORD *)(v13 + 20) = v159;
              *((_WORD *)v91 + 4) = v158;
              uint64_t *v91 = v157;
            }
          }
          else
          {
LABEL_101:
            int v203 = *(_DWORD *)(v13 + 8);
            uint64_t v179 = *(void *)v13;
            uint64_t v97 = *v91;
            *(_WORD *)(v13 + 8) = *((_WORD *)v91 + 4);
            *(void *)unint64_t v13 = v97;
            *((_WORD *)v91 + 4) = v203;
            uint64_t *v91 = v179;
          }
          break;
        case 4:
          return (uint64_t)sub_A12F98((uint64_t *)v13, (_DWORD *)(v13 + 12), (int *)(v13 + 24), a2 - 12);
        case 5:
          int v98 = (uint64_t *)(v13 + 12);
          int v99 = (uint64_t *)(v13 + 24);
          uint64_t v100 = (uint64_t *)(v13 + 36);
          uint64_t result = (uint64_t)sub_A12F98((uint64_t *)v13, (_DWORD *)(v13 + 12), (int *)(v13 + 24), v13 + 36);
          int v102 = *(_DWORD *)(a2 - 12);
          unint64_t v101 = a2 - 12;
          if (v102 < *(_DWORD *)(v13 + 36))
          {
            uint64_t v103 = *v100;
            __int16 v104 = *(_DWORD *)(v13 + 44);
            __int16 v105 = *(_WORD *)(v101 + 8);
            *uint64_t v100 = *(void *)v101;
            *(_WORD *)(v13 + 44) = v105;
            *(_WORD *)(v101 + 8) = v104;
            *(void *)unint64_t v101 = v103;
            if (*(_DWORD *)v100 < *(_DWORD *)v99)
            {
              __int16 v106 = *(_DWORD *)(v13 + 32);
              uint64_t v107 = *v99;
              *int v99 = *v100;
              *(_WORD *)(v13 + 32) = *(_WORD *)(v13 + 44);
              *uint64_t v100 = v107;
              *(_WORD *)(v13 + 44) = v106;
              if (*(_DWORD *)v99 < *(_DWORD *)v98)
              {
                __int16 v108 = *(_DWORD *)(v13 + 20);
                uint64_t v109 = *v98;
                *int v98 = *v99;
                *(_WORD *)(v13 + 20) = *(_WORD *)(v13 + 32);
                *int v99 = v109;
                *(_WORD *)(v13 + 32) = v108;
                if (*(_DWORD *)(v13 + 12) < *(_DWORD *)v13)
                {
                  int v204 = *(_DWORD *)(v13 + 8);
                  uint64_t v180 = *(void *)v13;
                  *(void *)unint64_t v13 = *v98;
                  *(_WORD *)(v13 + 8) = *(_WORD *)(v13 + 20);
                  *int v98 = v180;
                  *(_WORD *)(v13 + 20) = v204;
                }
              }
            }
          }
          return result;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 287) {
      break;
    }
    if (!a3)
    {
      if (v13 == a2) {
        return result;
      }
      int64_t v121 = (unint64_t)(v15 - 2) >> 1;
      int64_t v122 = v121;
      while (1)
      {
        if (v121 >= v122)
        {
          uint64_t v123 = (2 * v122) | 1;
          int v124 = (_DWORD *)(v13 + 12 * v123);
          if (2 * v122 + 2 >= v15)
          {
            long long v127 = (_DWORD *)(v13 + 12 * v122);
            int v128 = *v127;
            if (*v124 >= *v127) {
              goto LABEL_141;
            }
          }
          else
          {
            uint64_t result = (uint64_t)(v124 + 3);
            int v125 = v124[3];
            BOOL v126 = *v124 < v125;
            if (*v124 > v125) {
              int v125 = *v124;
            }
            if (v126)
            {
              v124 += 3;
              uint64_t v123 = 2 * v122 + 2;
            }
            long long v127 = (_DWORD *)(v13 + 12 * v122);
            int v128 = *v127;
            if (v125 >= *v127)
            {
LABEL_141:
              uint64_t v129 = *(void *)(v127 + 1);
              while (1)
              {
                uint64_t result = (uint64_t)v127;
                long long v127 = v124;
                uint64_t v132 = *(void *)v124;
                *(_WORD *)(result + 8) = *((_WORD *)v127 + 4);
                *(void *)uint64_t result = v132;
                if (v121 < v123) {
                  break;
                }
                uint64_t result = (2 * v123) | 1;
                int v124 = (_DWORD *)(v13 + 12 * result);
                uint64_t v123 = 2 * v123 + 2;
                if (v123 < v15)
                {
                  int v130 = *v124;
                  int v131 = v124[3];
                  if (*v124 <= v131) {
                    int v130 = v124[3];
                  }
                  if (*v124 >= v131) {
                    uint64_t v123 = result;
                  }
                  else {
                    v124 += 3;
                  }
                  if (v130 < v128) {
                    break;
                  }
                }
                else
                {
                  uint64_t v123 = result;
                  if (*v124 < v128) {
                    break;
                  }
                }
              }
              *long long v127 = v128;
              v127[1] = v129;
              *((_WORD *)v127 + 4) = WORD2(v129);
            }
          }
        }
        BOOL v126 = v122-- <= 0;
        if (v126)
        {
          int64_t v133 = v14 / 0xCuLL;
          do
          {
            uint64_t v134 = 0;
            int v205 = *(_DWORD *)(v13 + 8);
            uint64_t v181 = *(void *)v13;
            uint64_t v135 = v13;
            do
            {
              uint64_t v137 = v135 + 12 * v134 + 12;
              uint64_t v138 = (2 * v134) | 1;
              uint64_t v139 = 2 * v134 + 2;
              if (v139 < v133)
              {
                uint64_t result = *(unsigned int *)(v137 + 12);
                if (*(_DWORD *)v137 < (int)result)
                {
                  v137 += 12;
                  uint64_t v138 = v139;
                }
              }
              uint64_t v136 = *(void *)v137;
              *(_WORD *)(v135 + 8) = *(_WORD *)(v137 + 8);
              *(void *)uint64_t v135 = v136;
              uint64_t v135 = v137;
              uint64_t v134 = v138;
            }
            while (v138 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
            a2 -= 12;
            if (v137 == a2)
            {
              *(_WORD *)(v137 + 8) = v205;
              *(void *)uint64_t v137 = v181;
            }
            else
            {
              uint64_t v140 = *(void *)a2;
              *(_WORD *)(v137 + 8) = *(_WORD *)(a2 + 8);
              *(void *)uint64_t v137 = v140;
              *(_WORD *)(a2 + 8) = v205;
              *(void *)a2 = v181;
              uint64_t v141 = v137 - v13 + 12;
              if (v141 >= 13)
              {
                unint64_t v142 = (v141 / 0xCuLL - 2) >> 1;
                long long v143 = (uint64_t *)(v13 + 12 * v142);
                int v144 = *(_DWORD *)v137;
                if (*(_DWORD *)v143 < *(_DWORD *)v137)
                {
                  uint64_t v145 = *(void *)(v137 + 4);
                  do
                  {
                    uint64_t v146 = v137;
                    uint64_t v137 = (uint64_t)v143;
                    uint64_t v147 = *v143;
                    *(_WORD *)(v146 + 8) = *(_WORD *)(v137 + 8);
                    *(void *)uint64_t v146 = v147;
                    if (!v142) {
                      break;
                    }
                    unint64_t v142 = (v142 - 1) >> 1;
                    long long v143 = (uint64_t *)(v13 + 12 * v142);
                  }
                  while (*(_DWORD *)v143 < v144);
                  *(_DWORD *)uint64_t v137 = v144;
                  *(_DWORD *)(v137 + 4) = v145;
                  *(_WORD *)(v137 + 8) = WORD2(v145);
                }
              }
            }
            BOOL v126 = v133-- <= 2;
          }
          while (!v126);
          return result;
        }
      }
    }
    unint64_t v16 = (unint64_t)v15 >> 1;
    unint64_t v17 = v13 + 12 * ((unint64_t)v15 >> 1);
    int v18 = *v10;
    if ((unint64_t)v14 < 0x601)
    {
      int v21 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 < *(_DWORD *)v17)
      {
        if (v18 >= v21)
        {
          int v192 = *(_DWORD *)(v17 + 8);
          uint64_t v168 = *(void *)v17;
          uint64_t v43 = *(void *)v13;
          *(_WORD *)(v17 + 8) = *(_WORD *)(v13 + 8);
          *(void *)unint64_t v17 = v43;
          *(_WORD *)(v13 + 8) = v192;
          *(void *)unint64_t v13 = v168;
          if (*v10 >= *(_DWORD *)v13) {
            goto LABEL_33;
          }
          int v185 = *(_DWORD *)(v13 + 8);
          uint64_t v161 = *(void *)v13;
          uint64_t v44 = *(void *)v10;
          *(_WORD *)(v13 + 8) = *(_WORD *)(a2 - 4);
          *(void *)unint64_t v13 = v44;
        }
        else
        {
          int v185 = *(_DWORD *)(v17 + 8);
          uint64_t v161 = *(void *)v17;
          uint64_t v22 = *(void *)v10;
          *(_WORD *)(v17 + 8) = *(_WORD *)(a2 - 4);
          *(void *)unint64_t v17 = v22;
        }
        *(_WORD *)(a2 - 4) = v185;
        *(void *)uint64_t v10 = v161;
LABEL_33:
        --a3;
        int v27 = *(_DWORD *)v13;
        if (a4) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }
      if (v18 >= v21) {
        goto LABEL_33;
      }
      int v188 = *(_DWORD *)(v13 + 8);
      uint64_t v164 = *(void *)v13;
      uint64_t v25 = *(void *)v10;
      *(_WORD *)(v13 + 8) = *(_WORD *)(a2 - 4);
      *(void *)unint64_t v13 = v25;
      *(_WORD *)(a2 - 4) = v188;
      *(void *)uint64_t v10 = v164;
      if (*(_DWORD *)v13 >= *(_DWORD *)v17) {
        goto LABEL_33;
      }
      int v189 = *(_DWORD *)(v17 + 8);
      uint64_t v165 = *(void *)v17;
      uint64_t v26 = *(void *)v13;
      *(_WORD *)(v17 + 8) = *(_WORD *)(v13 + 8);
      *(void *)unint64_t v17 = v26;
      *(_WORD *)(v13 + 8) = v189;
      *(void *)unint64_t v13 = v165;
      --a3;
      int v27 = v165;
      if (a4) {
        goto LABEL_56;
      }
LABEL_55:
      if (*(_DWORD *)(v13 - 12) < v27) {
        goto LABEL_56;
      }
      if (v27 < *v10)
      {
        do
        {
          int v82 = *(_DWORD *)(v13 + 12);
          v13 += 12;
        }
        while (v27 >= v82);
      }
      else
      {
        unint64_t v83 = v13 + 12;
        do
        {
          unint64_t v13 = v83;
          if (v83 >= a2) {
            break;
          }
          v83 += 12;
        }
        while (v27 >= *(_DWORD *)v13);
      }
      unint64_t v84 = a2;
      if (v13 < a2)
      {
        unint64_t v84 = a2;
        do
        {
          int v85 = *(_DWORD *)(v84 - 12);
          v84 -= 12;
        }
        while (v27 < v85);
      }
      uint64_t v86 = *(void *)(v9 + 4);
      while (v13 < v84)
      {
        int v202 = *(_DWORD *)(v13 + 8);
        uint64_t v178 = *(void *)v13;
        uint64_t v87 = *(void *)v84;
        *(_WORD *)(v13 + 8) = *(_WORD *)(v84 + 8);
        *(void *)unint64_t v13 = v87;
        *(_WORD *)(v84 + 8) = v202;
        *(void *)unint64_t v84 = v178;
        do
        {
          int v88 = *(_DWORD *)(v13 + 12);
          v13 += 12;
        }
        while (v27 >= v88);
        do
        {
          int v89 = *(_DWORD *)(v84 - 12);
          v84 -= 12;
        }
        while (v27 < v89);
      }
      BOOL v4 = v13 - 12 >= v9;
      BOOL v5 = v13 - 12 == v9;
      if (v13 - 12 != v9)
      {
        uint64_t v90 = *(void *)(v13 - 12);
        *(_WORD *)(v9 + 8) = *(_WORD *)(v13 - 4);
        *(void *)unint64_t v9 = v90;
      }
      a4 = 0;
      *(_DWORD *)(v13 - 12) = v27;
      *(_DWORD *)(v13 - 8) = v86;
      *(_WORD *)(v13 - 4) = WORD2(v86);
    }
    else
    {
      int v19 = *(_DWORD *)v17;
      if (*(_DWORD *)v17 >= *(_DWORD *)v13)
      {
        if (v18 < v19)
        {
          int v186 = *(_DWORD *)(v17 + 8);
          uint64_t v162 = *(void *)v17;
          uint64_t v23 = *(void *)v10;
          *(_WORD *)(v17 + 8) = *(_WORD *)(a2 - 4);
          *(void *)unint64_t v17 = v23;
          *(_WORD *)(a2 - 4) = v186;
          *(void *)uint64_t v10 = v162;
          if (*(_DWORD *)v17 < *(_DWORD *)v13)
          {
            int v187 = *(_DWORD *)(v13 + 8);
            uint64_t v163 = *(void *)v13;
            uint64_t v24 = *(void *)v17;
            *(_WORD *)(v13 + 8) = *(_WORD *)(v17 + 8);
            *(void *)unint64_t v13 = v24;
            *(_WORD *)(v17 + 8) = v187;
            *(void *)unint64_t v17 = v163;
          }
        }
      }
      else
      {
        if (v18 >= v19)
        {
          int v190 = *(_DWORD *)(v13 + 8);
          uint64_t v166 = *(void *)v13;
          uint64_t v28 = *(void *)v17;
          *(_WORD *)(v13 + 8) = *(_WORD *)(v17 + 8);
          *(void *)unint64_t v13 = v28;
          *(_WORD *)(v17 + 8) = v190;
          *(void *)unint64_t v17 = v166;
          if (*v10 >= *(_DWORD *)v17) {
            goto LABEL_24;
          }
          int v184 = *(_DWORD *)(v17 + 8);
          uint64_t v160 = *(void *)v17;
          uint64_t v29 = *(void *)v10;
          *(_WORD *)(v17 + 8) = *(_WORD *)(a2 - 4);
          *(void *)unint64_t v17 = v29;
        }
        else
        {
          int v184 = *(_DWORD *)(v13 + 8);
          uint64_t v160 = *(void *)v13;
          uint64_t v20 = *(void *)v10;
          *(_WORD *)(v13 + 8) = *(_WORD *)(a2 - 4);
          *(void *)unint64_t v13 = v20;
        }
        *(_WORD *)(a2 - 4) = v184;
        *(void *)uint64_t v10 = v160;
      }
LABEL_24:
      unint64_t v30 = (uint64_t *)(v13 + 12);
      unint64_t v31 = v13 + 12 * v16;
      int v34 = *(_DWORD *)(v31 - 12);
      int v32 = (uint64_t *)(v31 - 12);
      int v33 = v34;
      int v35 = *v11;
      if (v34 >= *(_DWORD *)(v13 + 12))
      {
        if (v35 < v33)
        {
          int v191 = *((_DWORD *)v32 + 2);
          uint64_t v167 = *v32;
          uint64_t v39 = *(void *)v11;
          *((_WORD *)v32 + 4) = *(_WORD *)(a2 - 16);
          uint64_t *v32 = v39;
          *(_WORD *)(a2 - 16) = v191;
          *(void *)int64_t v11 = v167;
          if (*(_DWORD *)v32 < *(_DWORD *)v30)
          {
            uint64_t v40 = *v30;
            int v41 = *(_DWORD *)(v13 + 20);
            __int16 v42 = *((_WORD *)v32 + 4);
            *unint64_t v30 = *v32;
            *(_WORD *)(v13 + 20) = v42;
            *((_WORD *)v32 + 4) = v41;
            uint64_t *v32 = v40;
          }
        }
      }
      else if (v35 >= v33)
      {
        uint64_t v45 = *v30;
        int v46 = *(_DWORD *)(v13 + 20);
        __int16 v47 = *((_WORD *)v32 + 4);
        *unint64_t v30 = *v32;
        *(_WORD *)(v13 + 20) = v47;
        *((_WORD *)v32 + 4) = v46;
        uint64_t *v32 = v45;
        if (*v11 < (int)v45)
        {
          int v193 = *((_DWORD *)v32 + 2);
          uint64_t v169 = *v32;
          uint64_t v48 = *(void *)v11;
          *((_WORD *)v32 + 4) = *(_WORD *)(a2 - 16);
          uint64_t *v32 = v48;
          *(_WORD *)(a2 - 16) = v193;
          *(void *)int64_t v11 = v169;
        }
      }
      else
      {
        uint64_t v36 = *v30;
        int v37 = *(_DWORD *)(v13 + 20);
        __int16 v38 = *(_WORD *)(a2 - 16);
        *unint64_t v30 = *(void *)v11;
        *(_WORD *)(v13 + 20) = v38;
        *(_WORD *)(a2 - 16) = v37;
        *(void *)int64_t v11 = v36;
      }
      int v49 = (uint64_t *)(v13 + 24);
      unint64_t v50 = v13 + 12 * v16;
      int v53 = *(_DWORD *)(v50 + 12);
      uint64_t v51 = (uint64_t *)(v50 + 12);
      int v52 = v53;
      int v54 = *v12;
      if (v53 >= *(_DWORD *)(v13 + 24))
      {
        if (v54 < v52)
        {
          int v194 = *((_DWORD *)v51 + 2);
          uint64_t v170 = *v51;
          uint64_t v58 = *(void *)v12;
          *((_WORD *)v51 + 4) = *(_WORD *)(a2 - 28);
          uint64_t *v51 = v58;
          *(_WORD *)(a2 - 28) = v194;
          *(void *)unsigned int v12 = v170;
          if (*(_DWORD *)v51 < *(_DWORD *)v49)
          {
            uint64_t v59 = *v49;
            int v60 = *(_DWORD *)(v13 + 32);
            __int16 v61 = *((_WORD *)v51 + 4);
            *int v49 = *v51;
            *(_WORD *)(v13 + 32) = v61;
            *((_WORD *)v51 + 4) = v60;
            uint64_t *v51 = v59;
          }
        }
      }
      else if (v54 >= v52)
      {
        uint64_t v62 = *v49;
        int v63 = *(_DWORD *)(v13 + 32);
        __int16 v64 = *((_WORD *)v51 + 4);
        *int v49 = *v51;
        *(_WORD *)(v13 + 32) = v64;
        *((_WORD *)v51 + 4) = v63;
        uint64_t *v51 = v62;
        if (*v12 < (int)v62)
        {
          int v195 = *((_DWORD *)v51 + 2);
          uint64_t v171 = *v51;
          uint64_t v65 = *(void *)v12;
          *((_WORD *)v51 + 4) = *(_WORD *)(a2 - 28);
          uint64_t *v51 = v65;
          *(_WORD *)(a2 - 28) = v195;
          *(void *)unsigned int v12 = v171;
        }
      }
      else
      {
        uint64_t v55 = *v49;
        int v56 = *(_DWORD *)(v13 + 32);
        __int16 v57 = *(_WORD *)(a2 - 28);
        *int v49 = *(void *)v12;
        *(_WORD *)(v13 + 32) = v57;
        *(_WORD *)(a2 - 28) = v56;
        *(void *)unsigned int v12 = v55;
      }
      int v66 = *(_DWORD *)v17;
      int v67 = *(_DWORD *)v51;
      if (*(_DWORD *)v17 >= *(_DWORD *)v32)
      {
        if (v67 < v66)
        {
          int v197 = *(_DWORD *)(v17 + 8);
          uint64_t v173 = *(void *)v17;
          *(void *)unint64_t v17 = *v51;
          *(_WORD *)(v17 + 8) = *((_WORD *)v51 + 4);
          *((_WORD *)v51 + 4) = v197;
          uint64_t *v51 = v173;
          if (*(_DWORD *)v17 < *(_DWORD *)v32)
          {
            int v198 = *((_DWORD *)v32 + 2);
            uint64_t v174 = *v32;
            uint64_t *v32 = *(void *)v17;
            *((_WORD *)v32 + 4) = *(_WORD *)(v17 + 8);
            *(_WORD *)(v17 + 8) = v198;
            *(void *)unint64_t v17 = v174;
          }
        }
      }
      else
      {
        if (v67 >= v66)
        {
          int v199 = *((_DWORD *)v32 + 2);
          uint64_t v175 = *v32;
          uint64_t *v32 = *(void *)v17;
          *((_WORD *)v32 + 4) = *(_WORD *)(v17 + 8);
          *(_WORD *)(v17 + 8) = v199;
          *(void *)unint64_t v17 = v175;
          if (*(_DWORD *)v51 >= *(_DWORD *)v17) {
            goto LABEL_54;
          }
          int v196 = *(_DWORD *)(v17 + 8);
          uint64_t v172 = *(void *)v17;
          *(void *)unint64_t v17 = *v51;
          *(_WORD *)(v17 + 8) = *((_WORD *)v51 + 4);
        }
        else
        {
          int v196 = *((_DWORD *)v32 + 2);
          uint64_t v172 = *v32;
          uint64_t *v32 = *v51;
          *((_WORD *)v32 + 4) = *((_WORD *)v51 + 4);
        }
        *((_WORD *)v51 + 4) = v196;
        uint64_t *v51 = v172;
      }
LABEL_54:
      int v200 = *(_DWORD *)(v13 + 8);
      uint64_t v176 = *(void *)v13;
      uint64_t v68 = *(void *)v17;
      *(_WORD *)(v13 + 8) = *(_WORD *)(v17 + 8);
      *(void *)unint64_t v13 = v68;
      *(_WORD *)(v17 + 8) = v200;
      *(void *)unint64_t v17 = v176;
      --a3;
      int v27 = *(_DWORD *)v13;
      if ((a4 & 1) == 0) {
        goto LABEL_55;
      }
LABEL_56:
      uint64_t v69 = 0;
      uint64_t v70 = *(void *)(v13 + 4);
      do
      {
        int v71 = *(_DWORD *)(v13 + v69 + 12);
        v69 += 12;
      }
      while (v71 < v27);
      unint64_t v72 = v13 + v69;
      unint64_t v73 = a2;
      if (v69 == 12)
      {
        unint64_t v73 = a2;
        do
        {
          if (v72 >= v73) {
            break;
          }
          int v75 = *(_DWORD *)(v73 - 12);
          v73 -= 12;
        }
        while (v75 >= v27);
      }
      else
      {
        do
        {
          int v74 = *(_DWORD *)(v73 - 12);
          v73 -= 12;
        }
        while (v74 >= v27);
      }
      v13 += v69;
      if (v72 < v73)
      {
        unint64_t v76 = v73;
        do
        {
          int v201 = *(_DWORD *)(v13 + 8);
          uint64_t v177 = *(void *)v13;
          uint64_t v77 = *(void *)v76;
          *(_WORD *)(v13 + 8) = *(_WORD *)(v76 + 8);
          *(void *)unint64_t v13 = v77;
          *(_WORD *)(v76 + 8) = v201;
          *(void *)unint64_t v76 = v177;
          do
          {
            int v78 = *(_DWORD *)(v13 + 12);
            v13 += 12;
          }
          while (v78 < v27);
          do
          {
            int v79 = *(_DWORD *)(v76 - 12);
            v76 -= 12;
          }
          while (v79 >= v27);
        }
        while (v13 < v76);
      }
      if (v13 - 12 != v9)
      {
        uint64_t v80 = *(void *)(v13 - 12);
        *(_WORD *)(v9 + 8) = *(_WORD *)(v13 - 4);
        *(void *)unint64_t v9 = v80;
      }
      *(_DWORD *)(v13 - 12) = v27;
      *(_DWORD *)(v13 - 8) = v70;
      *(_WORD *)(v13 - 4) = WORD2(v70);
      if (v72 < v73)
      {
LABEL_75:
        uint64_t result = sub_A11BBC(v9, v13 - 12, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v81 = sub_A12AE8((uint64_t *)v9, (uint64_t *)(v13 - 12));
        uint64_t result = sub_A12AE8((uint64_t *)v13, (uint64_t *)a2);
        if (result)
        {
          a2 = v13 - 12;
          if (v81) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v81) {
          goto LABEL_75;
        }
      }
    }
  }
  unint64_t v110 = v13 + 12;
  BOOL v112 = v13 == a2 || v110 == a2;
  if (a4)
  {
    if (v112) {
      return result;
    }
    uint64_t v113 = 0;
    unint64_t v114 = v13;
    while (1)
    {
      unint64_t v116 = v110;
      int v117 = *(_DWORD *)(v114 + 12);
      if (v117 < *(_DWORD *)v114)
      {
        uint64_t v118 = *(void *)(v114 + 16);
        uint64_t v119 = v113;
        do
        {
          uint64_t v120 = v13 + v119;
          *(void *)(v120 + 12) = *(void *)(v13 + v119);
          *(_WORD *)(v120 + 20) = *(_WORD *)(v13 + v119 + 8);
          if (!v119)
          {
            uint64_t v115 = v13;
            goto LABEL_120;
          }
          v119 -= 12;
        }
        while (v117 < *(_DWORD *)(v120 - 12));
        uint64_t v115 = v13 + v119 + 12;
LABEL_120:
        *(_DWORD *)uint64_t v115 = v117;
        *(_DWORD *)(v115 + 4) = v118;
        *(_WORD *)(v115 + 8) = WORD2(v118);
      }
      unint64_t v110 = v116 + 12;
      v113 += 12;
      unint64_t v114 = v116;
      if (v116 + 12 == a2) {
        return result;
      }
    }
  }
  if (!v112)
  {
    do
    {
      unint64_t v151 = v110;
      int v152 = *(_DWORD *)(v9 + 12);
      if (v152 < *(_DWORD *)v9)
      {
        uint64_t v153 = *(void *)(v9 + 16);
        unint64_t v154 = v151;
        do
        {
          unint64_t v155 = v154;
          uint64_t v156 = *(void *)(v154 - 12);
          v154 -= 12;
          *(void *)unint64_t v155 = v156;
          *(_WORD *)(v155 + 8) = *(_WORD *)(v155 - 4);
        }
        while (v152 < *(_DWORD *)(v155 - 24));
        *(_DWORD *)unint64_t v154 = v152;
        *(_DWORD *)(v154 + 4) = v153;
        *(_WORD *)(v154 + 8) = WORD2(v153);
      }
      unint64_t v110 = v151 + 12;
      unint64_t v9 = v151;
    }
    while (v151 + 12 != a2);
  }
  return result;
}

BOOL sub_A12AE8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unsigned int v6 = (uint64_t *)((char *)a2 - 12);
      if (*((_DWORD *)a2 - 3) < *(_DWORD *)a1) {
        goto LABEL_7;
      }
      return result;
    case 3uLL:
      int64_t v7 = (uint64_t *)((char *)a1 + 12);
      int v8 = *((_DWORD *)a1 + 3);
      unsigned int v6 = (uint64_t *)((char *)a2 - 12);
      int v9 = *((_DWORD *)a2 - 3);
      if (v8 >= *(_DWORD *)a1)
      {
        if (v9 < v8)
        {
          __int16 v34 = *((_DWORD *)a1 + 5);
          uint64_t v35 = *v7;
          __int16 v36 = *((_WORD *)a2 - 2);
          *int64_t v7 = *v6;
          *((_WORD *)a1 + 10) = v36;
          *unsigned int v6 = v35;
          *((_WORD *)a2 - 2) = v34;
          if (*((_DWORD *)a1 + 3) < *(_DWORD *)a1)
          {
            int v37 = *((_DWORD *)a1 + 2);
            uint64_t v38 = *a1;
            *a1 = *v7;
            *((_WORD *)a1 + 4) = *((_WORD *)a1 + 10);
            *int64_t v7 = v38;
            *((_WORD *)a1 + 10) = v37;
          }
        }
      }
      else if (v9 >= v8)
      {
        __int16 v43 = *((_DWORD *)a1 + 2);
        uint64_t v44 = *a1;
        *a1 = *v7;
        *((_WORD *)a1 + 4) = *((_WORD *)a1 + 10);
        *int64_t v7 = v44;
        *((_WORD *)a1 + 10) = v43;
        if (*(_DWORD *)v6 < *((_DWORD *)a1 + 3))
        {
          int v45 = *((_DWORD *)a1 + 5);
          uint64_t v46 = *v7;
          __int16 v47 = *((_WORD *)a2 - 2);
          *int64_t v7 = *v6;
          *((_WORD *)a1 + 10) = v47;
          *unsigned int v6 = v46;
          *((_WORD *)a2 - 2) = v45;
        }
      }
      else
      {
LABEL_7:
        int v10 = *((_DWORD *)a1 + 2);
        uint64_t v11 = *a1;
        __int16 v12 = *((_WORD *)v6 + 4);
        *a1 = *v6;
        *((_WORD *)a1 + 4) = v12;
        *unsigned int v6 = v11;
        *((_WORD *)v6 + 4) = v10;
      }
      return result;
    case 4uLL:
      sub_A12F98(a1, (_DWORD *)a1 + 3, (int *)a1 + 6, (uint64_t)a2 - 12);
      return 1;
    case 5uLL:
      uint64_t v20 = (uint64_t *)((char *)a1 + 12);
      int v21 = a1 + 3;
      uint64_t v22 = (uint64_t *)((char *)a1 + 36);
      sub_A12F98(a1, (_DWORD *)a1 + 3, (int *)a1 + 6, (uint64_t)a1 + 36);
      int v24 = *((_DWORD *)a2 - 3);
      uint64_t v23 = (uint64_t)a2 - 12;
      if (v24 < *((_DWORD *)a1 + 9))
      {
        __int16 v25 = *((_DWORD *)a1 + 11);
        uint64_t v26 = *v22;
        __int16 v27 = *(_WORD *)(v23 + 8);
        *uint64_t v22 = *(void *)v23;
        *((_WORD *)a1 + 22) = v27;
        *(void *)uint64_t v23 = v26;
        *(_WORD *)(v23 + 8) = v25;
        if (*(_DWORD *)v22 < *(_DWORD *)v21)
        {
          __int16 v28 = *((_DWORD *)a1 + 8);
          uint64_t v29 = *v21;
          *int v21 = *v22;
          *((_WORD *)a1 + 16) = *((_WORD *)a1 + 22);
          *uint64_t v22 = v29;
          *((_WORD *)a1 + 22) = v28;
          if (*(_DWORD *)v21 < *(_DWORD *)v20)
          {
            __int16 v30 = *((_DWORD *)a1 + 5);
            uint64_t v31 = *v20;
            uint64_t *v20 = *v21;
            *((_WORD *)a1 + 10) = *((_WORD *)a1 + 16);
            *int v21 = v31;
            *((_WORD *)a1 + 16) = v30;
            if (*((_DWORD *)a1 + 3) < *(_DWORD *)a1)
            {
              int v32 = *((_DWORD *)a1 + 2);
              uint64_t v33 = *a1;
              *a1 = *v20;
              *((_WORD *)a1 + 4) = *((_WORD *)a1 + 10);
              uint64_t *v20 = v33;
              *((_WORD *)a1 + 10) = v32;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v13 = a1 + 3;
      int v14 = *((_DWORD *)a1 + 6);
      uint64_t v15 = (uint64_t *)((char *)a1 + 12);
      int v16 = *((_DWORD *)a1 + 3);
      int v17 = *(_DWORD *)a1;
      if (v16 >= *(_DWORD *)a1)
      {
        if (v14 < v16)
        {
          __int16 v39 = *((_DWORD *)a1 + 5);
          uint64_t v40 = *v15;
          *uint64_t v15 = *v13;
          *((_WORD *)a1 + 10) = *((_WORD *)a1 + 16);
          uint64_t *v13 = v40;
          *((_WORD *)a1 + 16) = v39;
          if (*(_DWORD *)v15 < v17)
          {
            int v41 = *((_DWORD *)a1 + 2);
            uint64_t v42 = *a1;
            *a1 = *v15;
            *((_WORD *)a1 + 4) = *((_WORD *)a1 + 10);
            *uint64_t v15 = v42;
            *((_WORD *)a1 + 10) = v41;
          }
        }
      }
      else if (v14 >= v16)
      {
        __int16 v48 = *((_DWORD *)a1 + 2);
        uint64_t v49 = *a1;
        *a1 = *v15;
        *((_WORD *)a1 + 4) = *((_WORD *)a1 + 10);
        *uint64_t v15 = v49;
        *((_WORD *)a1 + 10) = v48;
        if (v14 < *((_DWORD *)a1 + 3))
        {
          int v50 = *((_DWORD *)a1 + 5);
          uint64_t v51 = *v15;
          *uint64_t v15 = *v13;
          *((_WORD *)a1 + 10) = *((_WORD *)a1 + 16);
          uint64_t *v13 = v51;
          *((_WORD *)a1 + 16) = v50;
        }
      }
      else
      {
        int v18 = *((_DWORD *)a1 + 2);
        uint64_t v19 = *a1;
        *a1 = *v13;
        *((_WORD *)a1 + 4) = *((_WORD *)a1 + 16);
        uint64_t *v13 = v19;
        *((_WORD *)a1 + 16) = v18;
      }
      int v52 = (uint64_t *)((char *)a1 + 36);
      if ((uint64_t *)((char *)a1 + 36) == a2) {
        return 1;
      }
      uint64_t v53 = 0;
      int v54 = 0;
      break;
  }
  while (1)
  {
    int v55 = *(_DWORD *)v52;
    if (*(_DWORD *)v52 < *(_DWORD *)v13) {
      break;
    }
LABEL_36:
    unint64_t v13 = v52;
    v53 += 12;
    int v52 = (uint64_t *)((char *)v52 + 12);
    if (v52 == a2) {
      return 1;
    }
  }
  uint64_t v56 = *(uint64_t *)((char *)v52 + 4);
  uint64_t v57 = v53;
  do
  {
    uint64_t v58 = (uint64_t)a1 + v57;
    *(void *)(v58 + 36) = *(uint64_t *)((char *)a1 + v57 + 24);
    *(_WORD *)(v58 + 44) = *(_WORD *)((char *)a1 + v57 + 32);
    if (v57 == -24)
    {
      *(_DWORD *)a1 = v55;
      *((_DWORD *)a1 + 1) = v56;
      *((_WORD *)a1 + 4) = WORD2(v56);
      if (++v54 != 8) {
        goto LABEL_36;
      }
      return (uint64_t *)((char *)v52 + 12) == a2;
    }
    v57 -= 12;
  }
  while (v55 < *(_DWORD *)(v58 + 12));
  uint64_t v59 = (uint64_t)a1 + v57;
  *(_DWORD *)(v59 + 36) = v55;
  *(_DWORD *)(v59 + 40) = v56;
  *(_WORD *)(v59 + 44) = WORD2(v56);
  if (++v54 != 8) {
    goto LABEL_36;
  }
  return (uint64_t *)((char *)v52 + 12) == a2;
}

uint64_t *sub_A12F98(uint64_t *result, _DWORD *a2, int *a3, uint64_t a4)
{
  int v4 = *a2;
  int v5 = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if (v5 < v4)
    {
      __int16 v9 = a2[2];
      uint64_t v10 = *(void *)a2;
      __int16 v11 = *((_WORD *)a3 + 4);
      *(void *)a2 = *(void *)a3;
      *((_WORD *)a2 + 4) = v11;
      *(void *)a3 = v10;
      *((_WORD *)a3 + 4) = v9;
      if (*a2 < *(_DWORD *)result)
      {
        int v12 = *((_DWORD *)result + 2);
        uint64_t v13 = *result;
        __int16 v14 = *((_WORD *)a2 + 4);
        char *result = *(void *)a2;
        *((_WORD *)result + 4) = v14;
        *(void *)a2 = v13;
        *((_WORD *)a2 + 4) = v12;
      }
    }
  }
  else
  {
    if (v5 < v4)
    {
      int v6 = *((_DWORD *)result + 2);
      uint64_t v7 = *result;
      __int16 v8 = *((_WORD *)a3 + 4);
      char *result = *(void *)a3;
      *((_WORD *)result + 4) = v8;
LABEL_9:
      *(void *)a3 = v7;
      *((_WORD *)a3 + 4) = v6;
      goto LABEL_10;
    }
    __int16 v15 = *((_DWORD *)result + 2);
    uint64_t v16 = *result;
    __int16 v17 = *((_WORD *)a2 + 4);
    char *result = *(void *)a2;
    *((_WORD *)result + 4) = v17;
    *(void *)a2 = v16;
    *((_WORD *)a2 + 4) = v15;
    if (*a3 < (int)v16)
    {
      int v6 = a2[2];
      uint64_t v7 = *(void *)a2;
      __int16 v18 = *((_WORD *)a3 + 4);
      *(void *)a2 = *(void *)a3;
      *((_WORD *)a2 + 4) = v18;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_DWORD *)a4 < *a3)
  {
    __int16 v19 = a3[2];
    uint64_t v20 = *(void *)a3;
    __int16 v21 = *(_WORD *)(a4 + 8);
    *(void *)a3 = *(void *)a4;
    *((_WORD *)a3 + 4) = v21;
    *(void *)a4 = v20;
    *(_WORD *)(a4 + 8) = v19;
    if (*a3 < *a2)
    {
      __int16 v22 = a2[2];
      uint64_t v23 = *(void *)a2;
      __int16 v24 = *((_WORD *)a3 + 4);
      *(void *)a2 = *(void *)a3;
      *((_WORD *)a2 + 4) = v24;
      *(void *)a3 = v23;
      *((_WORD *)a3 + 4) = v22;
      if (*a2 < *(_DWORD *)result)
      {
        int v25 = *((_DWORD *)result + 2);
        uint64_t v26 = *result;
        __int16 v27 = *((_WORD *)a2 + 4);
        char *result = *(void *)a2;
        *((_WORD *)result + 4) = v27;
        *(void *)a2 = v26;
        *((_WORD *)a2 + 4) = v25;
      }
    }
  }
  return result;
}

uint64_t sub_A13118(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  uint64_t v10 = (int *)(a2 - 12);
  __int16 v11 = (int *)(a2 - 24);
  int v12 = (int *)(a2 - 36);
  unint64_t v13 = v9;
  while (1)
  {
    unint64_t v9 = v13;
    uint64_t v14 = a2 - v13;
    uint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v13) >> 2);
    if (v5 || !v4)
    {
      switch(v15)
      {
        case 0:
        case 1:
          return result;
        case 2:
          int v92 = *(_DWORD *)(a2 - 12);
          unint64_t v91 = (uint64_t *)(a2 - 12);
          if (v92 <= *(_DWORD *)v13) {
            return result;
          }
          goto LABEL_101;
        case 3:
          long long v93 = (uint64_t *)(v13 + 12);
          int v94 = *(_DWORD *)(v13 + 12);
          int v96 = *(_DWORD *)(a2 - 12);
          unint64_t v91 = (uint64_t *)(a2 - 12);
          int v95 = v96;
          if (v94 <= *(_DWORD *)v13)
          {
            if (v95 > v94)
            {
              uint64_t v148 = *v93;
              __int16 v149 = *(_DWORD *)(v13 + 20);
              __int16 v150 = *((_WORD *)v91 + 4);
              *long long v93 = *v91;
              *(_WORD *)(v13 + 20) = v150;
              *((_WORD *)v91 + 4) = v149;
              uint64_t *v91 = v148;
              if (*(_DWORD *)(v13 + 12) > *(_DWORD *)v13)
              {
                int v206 = *(_DWORD *)(v13 + 8);
                uint64_t v182 = *(void *)v13;
                *(void *)unint64_t v13 = *v93;
                *(_WORD *)(v13 + 8) = *(_WORD *)(v13 + 20);
                *long long v93 = v182;
                *(_WORD *)(v13 + 20) = v206;
              }
            }
          }
          else if (v95 <= v94)
          {
            int v207 = *(_DWORD *)(v13 + 8);
            uint64_t v183 = *(void *)v13;
            *(void *)unint64_t v13 = *v93;
            *(_WORD *)(v13 + 8) = *(_WORD *)(v13 + 20);
            *long long v93 = v183;
            *(_WORD *)(v13 + 20) = v207;
            if (*(_DWORD *)v91 > *(_DWORD *)(v13 + 12))
            {
              uint64_t v157 = *v93;
              int v158 = *(_DWORD *)(v13 + 20);
              __int16 v159 = *((_WORD *)v91 + 4);
              *long long v93 = *v91;
              *(_WORD *)(v13 + 20) = v159;
              *((_WORD *)v91 + 4) = v158;
              uint64_t *v91 = v157;
            }
          }
          else
          {
LABEL_101:
            int v203 = *(_DWORD *)(v13 + 8);
            uint64_t v179 = *(void *)v13;
            uint64_t v97 = *v91;
            *(_WORD *)(v13 + 8) = *((_WORD *)v91 + 4);
            *(void *)unint64_t v13 = v97;
            *((_WORD *)v91 + 4) = v203;
            uint64_t *v91 = v179;
          }
          break;
        case 4:
          return (uint64_t)sub_A144F4((uint64_t *)v13, (_DWORD *)(v13 + 12), (int *)(v13 + 24), a2 - 12);
        case 5:
          int v98 = (uint64_t *)(v13 + 12);
          int v99 = (uint64_t *)(v13 + 24);
          uint64_t v100 = (uint64_t *)(v13 + 36);
          BOOL result = (uint64_t)sub_A144F4((uint64_t *)v13, (_DWORD *)(v13 + 12), (int *)(v13 + 24), v13 + 36);
          int v102 = *(_DWORD *)(a2 - 12);
          unint64_t v101 = a2 - 12;
          if (v102 > *(_DWORD *)(v13 + 36))
          {
            uint64_t v103 = *v100;
            __int16 v104 = *(_DWORD *)(v13 + 44);
            __int16 v105 = *(_WORD *)(v101 + 8);
            *uint64_t v100 = *(void *)v101;
            *(_WORD *)(v13 + 44) = v105;
            *(_WORD *)(v101 + 8) = v104;
            *(void *)unint64_t v101 = v103;
            if (*(_DWORD *)v100 > *(_DWORD *)v99)
            {
              __int16 v106 = *(_DWORD *)(v13 + 32);
              uint64_t v107 = *v99;
              *int v99 = *v100;
              *(_WORD *)(v13 + 32) = *(_WORD *)(v13 + 44);
              *uint64_t v100 = v107;
              *(_WORD *)(v13 + 44) = v106;
              if (*(_DWORD *)v99 > *(_DWORD *)v98)
              {
                __int16 v108 = *(_DWORD *)(v13 + 20);
                uint64_t v109 = *v98;
                *int v98 = *v99;
                *(_WORD *)(v13 + 20) = *(_WORD *)(v13 + 32);
                *int v99 = v109;
                *(_WORD *)(v13 + 32) = v108;
                if (*(_DWORD *)(v13 + 12) > *(_DWORD *)v13)
                {
                  int v204 = *(_DWORD *)(v13 + 8);
                  uint64_t v180 = *(void *)v13;
                  *(void *)unint64_t v13 = *v98;
                  *(_WORD *)(v13 + 8) = *(_WORD *)(v13 + 20);
                  *int v98 = v180;
                  *(_WORD *)(v13 + 20) = v204;
                }
              }
            }
          }
          return result;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 287) {
      break;
    }
    if (!a3)
    {
      if (v13 == a2) {
        return result;
      }
      int64_t v121 = (unint64_t)(v15 - 2) >> 1;
      int64_t v122 = v121;
      while (1)
      {
        if (v121 >= v122)
        {
          uint64_t v123 = (2 * v122) | 1;
          int v124 = (_DWORD *)(v13 + 12 * v123);
          if (2 * v122 + 2 >= v15)
          {
            long long v127 = (_DWORD *)(v13 + 12 * v122);
            int v128 = *v127;
            if (*v124 <= *v127) {
              goto LABEL_141;
            }
          }
          else
          {
            BOOL result = (uint64_t)(v124 + 3);
            int v125 = v124[3];
            BOOL v126 = *v124 <= v125;
            if (*v124 < v125) {
              int v125 = *v124;
            }
            if (!v126)
            {
              v124 += 3;
              uint64_t v123 = 2 * v122 + 2;
            }
            long long v127 = (_DWORD *)(v13 + 12 * v122);
            int v128 = *v127;
            if (v125 <= *v127)
            {
LABEL_141:
              uint64_t v129 = *(void *)(v127 + 1);
              while (1)
              {
                BOOL result = (uint64_t)v127;
                long long v127 = v124;
                uint64_t v132 = *(void *)v124;
                *(_WORD *)(result + 8) = *((_WORD *)v127 + 4);
                *(void *)BOOL result = v132;
                if (v121 < v123) {
                  break;
                }
                BOOL result = (2 * v123) | 1;
                int v124 = (_DWORD *)(v13 + 12 * result);
                uint64_t v123 = 2 * v123 + 2;
                if (v123 < v15)
                {
                  int v130 = *v124;
                  int v131 = v124[3];
                  if (*v124 >= v131) {
                    int v130 = v124[3];
                  }
                  if (*v124 <= v131) {
                    uint64_t v123 = result;
                  }
                  else {
                    v124 += 3;
                  }
                  if (v130 > v128) {
                    break;
                  }
                }
                else
                {
                  uint64_t v123 = result;
                  if (*v124 > v128) {
                    break;
                  }
                }
              }
              *long long v127 = v128;
              v127[1] = v129;
              *((_WORD *)v127 + 4) = WORD2(v129);
            }
          }
        }
        BOOL v126 = v122-- <= 0;
        if (v126)
        {
          int64_t v133 = v14 / 0xCuLL;
          do
          {
            uint64_t v134 = 0;
            int v205 = *(_DWORD *)(v13 + 8);
            uint64_t v181 = *(void *)v13;
            uint64_t v135 = v13;
            do
            {
              uint64_t v137 = v135 + 12 * v134 + 12;
              uint64_t v138 = (2 * v134) | 1;
              uint64_t v139 = 2 * v134 + 2;
              if (v139 < v133)
              {
                BOOL result = *(unsigned int *)(v137 + 12);
                if (*(_DWORD *)v137 > (int)result)
                {
                  v137 += 12;
                  uint64_t v138 = v139;
                }
              }
              uint64_t v136 = *(void *)v137;
              *(_WORD *)(v135 + 8) = *(_WORD *)(v137 + 8);
              *(void *)uint64_t v135 = v136;
              uint64_t v135 = v137;
              uint64_t v134 = v138;
            }
            while (v138 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
            a2 -= 12;
            if (v137 == a2)
            {
              *(_WORD *)(v137 + 8) = v205;
              *(void *)uint64_t v137 = v181;
            }
            else
            {
              uint64_t v140 = *(void *)a2;
              *(_WORD *)(v137 + 8) = *(_WORD *)(a2 + 8);
              *(void *)uint64_t v137 = v140;
              *(_WORD *)(a2 + 8) = v205;
              *(void *)a2 = v181;
              uint64_t v141 = v137 - v13 + 12;
              if (v141 >= 13)
              {
                unint64_t v142 = (v141 / 0xCuLL - 2) >> 1;
                long long v143 = (uint64_t *)(v13 + 12 * v142);
                int v144 = *(_DWORD *)v137;
                if (*(_DWORD *)v143 > *(_DWORD *)v137)
                {
                  uint64_t v145 = *(void *)(v137 + 4);
                  do
                  {
                    uint64_t v146 = v137;
                    uint64_t v137 = (uint64_t)v143;
                    uint64_t v147 = *v143;
                    *(_WORD *)(v146 + 8) = *(_WORD *)(v137 + 8);
                    *(void *)uint64_t v146 = v147;
                    if (!v142) {
                      break;
                    }
                    unint64_t v142 = (v142 - 1) >> 1;
                    long long v143 = (uint64_t *)(v13 + 12 * v142);
                  }
                  while (*(_DWORD *)v143 > v144);
                  *(_DWORD *)uint64_t v137 = v144;
                  *(_DWORD *)(v137 + 4) = v145;
                  *(_WORD *)(v137 + 8) = WORD2(v145);
                }
              }
            }
            BOOL v126 = v133-- <= 2;
          }
          while (!v126);
          return result;
        }
      }
    }
    unint64_t v16 = (unint64_t)v15 >> 1;
    unint64_t v17 = v13 + 12 * ((unint64_t)v15 >> 1);
    int v18 = *v10;
    if ((unint64_t)v14 < 0x601)
    {
      int v21 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 > *(_DWORD *)v17)
      {
        if (v18 <= v21)
        {
          int v192 = *(_DWORD *)(v17 + 8);
          uint64_t v168 = *(void *)v17;
          uint64_t v43 = *(void *)v13;
          *(_WORD *)(v17 + 8) = *(_WORD *)(v13 + 8);
          *(void *)unint64_t v17 = v43;
          *(_WORD *)(v13 + 8) = v192;
          *(void *)unint64_t v13 = v168;
          if (*v10 <= *(_DWORD *)v13) {
            goto LABEL_33;
          }
          int v185 = *(_DWORD *)(v13 + 8);
          uint64_t v161 = *(void *)v13;
          uint64_t v44 = *(void *)v10;
          *(_WORD *)(v13 + 8) = *(_WORD *)(a2 - 4);
          *(void *)unint64_t v13 = v44;
        }
        else
        {
          int v185 = *(_DWORD *)(v17 + 8);
          uint64_t v161 = *(void *)v17;
          uint64_t v22 = *(void *)v10;
          *(_WORD *)(v17 + 8) = *(_WORD *)(a2 - 4);
          *(void *)unint64_t v17 = v22;
        }
        *(_WORD *)(a2 - 4) = v185;
        *(void *)uint64_t v10 = v161;
LABEL_33:
        --a3;
        int v27 = *(_DWORD *)v13;
        if (a4) {
          goto LABEL_56;
        }
        goto LABEL_55;
      }
      if (v18 <= v21) {
        goto LABEL_33;
      }
      int v188 = *(_DWORD *)(v13 + 8);
      uint64_t v164 = *(void *)v13;
      uint64_t v25 = *(void *)v10;
      *(_WORD *)(v13 + 8) = *(_WORD *)(a2 - 4);
      *(void *)unint64_t v13 = v25;
      *(_WORD *)(a2 - 4) = v188;
      *(void *)uint64_t v10 = v164;
      if (*(_DWORD *)v13 <= *(_DWORD *)v17) {
        goto LABEL_33;
      }
      int v189 = *(_DWORD *)(v17 + 8);
      uint64_t v165 = *(void *)v17;
      uint64_t v26 = *(void *)v13;
      *(_WORD *)(v17 + 8) = *(_WORD *)(v13 + 8);
      *(void *)unint64_t v17 = v26;
      *(_WORD *)(v13 + 8) = v189;
      *(void *)unint64_t v13 = v165;
      --a3;
      int v27 = v165;
      if (a4) {
        goto LABEL_56;
      }
LABEL_55:
      if (*(_DWORD *)(v13 - 12) > v27) {
        goto LABEL_56;
      }
      if (v27 > *v10)
      {
        do
        {
          int v82 = *(_DWORD *)(v13 + 12);
          v13 += 12;
        }
        while (v27 <= v82);
      }
      else
      {
        unint64_t v83 = v13 + 12;
        do
        {
          unint64_t v13 = v83;
          if (v83 >= a2) {
            break;
          }
          v83 += 12;
        }
        while (v27 <= *(_DWORD *)v13);
      }
      unint64_t v84 = a2;
      if (v13 < a2)
      {
        unint64_t v84 = a2;
        do
        {
          int v85 = *(_DWORD *)(v84 - 12);
          v84 -= 12;
        }
        while (v27 > v85);
      }
      uint64_t v86 = *(void *)(v9 + 4);
      while (v13 < v84)
      {
        int v202 = *(_DWORD *)(v13 + 8);
        uint64_t v178 = *(void *)v13;
        uint64_t v87 = *(void *)v84;
        *(_WORD *)(v13 + 8) = *(_WORD *)(v84 + 8);
        *(void *)unint64_t v13 = v87;
        *(_WORD *)(v84 + 8) = v202;
        *(void *)unint64_t v84 = v178;
        do
        {
          int v88 = *(_DWORD *)(v13 + 12);
          v13 += 12;
        }
        while (v27 <= v88);
        do
        {
          int v89 = *(_DWORD *)(v84 - 12);
          v84 -= 12;
        }
        while (v27 > v89);
      }
      BOOL v4 = v13 - 12 >= v9;
      BOOL v5 = v13 - 12 == v9;
      if (v13 - 12 != v9)
      {
        uint64_t v90 = *(void *)(v13 - 12);
        *(_WORD *)(v9 + 8) = *(_WORD *)(v13 - 4);
        *(void *)unint64_t v9 = v90;
      }
      a4 = 0;
      *(_DWORD *)(v13 - 12) = v27;
      *(_DWORD *)(v13 - 8) = v86;
      *(_WORD *)(v13 - 4) = WORD2(v86);
    }
    else
    {
      int v19 = *(_DWORD *)v17;
      if (*(_DWORD *)v17 <= *(_DWORD *)v13)
      {
        if (v18 > v19)
        {
          int v186 = *(_DWORD *)(v17 + 8);
          uint64_t v162 = *(void *)v17;
          uint64_t v23 = *(void *)v10;
          *(_WORD *)(v17 + 8) = *(_WORD *)(a2 - 4);
          *(void *)unint64_t v17 = v23;
          *(_WORD *)(a2 - 4) = v186;
          *(void *)uint64_t v10 = v162;
          if (*(_DWORD *)v17 > *(_DWORD *)v13)
          {
            int v187 = *(_DWORD *)(v13 + 8);
            uint64_t v163 = *(void *)v13;
            uint64_t v24 = *(void *)v17;
            *(_WORD *)(v13 + 8) = *(_WORD *)(v17 + 8);
            *(void *)unint64_t v13 = v24;
            *(_WORD *)(v17 + 8) = v187;
            *(void *)unint64_t v17 = v163;
          }
        }
      }
      else
      {
        if (v18 <= v19)
        {
          int v190 = *(_DWORD *)(v13 + 8);
          uint64_t v166 = *(void *)v13;
          uint64_t v28 = *(void *)v17;
          *(_WORD *)(v13 + 8) = *(_WORD *)(v17 + 8);
          *(void *)unint64_t v13 = v28;
          *(_WORD *)(v17 + 8) = v190;
          *(void *)unint64_t v17 = v166;
          if (*v10 <= *(_DWORD *)v17) {
            goto LABEL_24;
          }
          int v184 = *(_DWORD *)(v17 + 8);
          uint64_t v160 = *(void *)v17;
          uint64_t v29 = *(void *)v10;
          *(_WORD *)(v17 + 8) = *(_WORD *)(a2 - 4);
          *(void *)unint64_t v17 = v29;
        }
        else
        {
          int v184 = *(_DWORD *)(v13 + 8);
          uint64_t v160 = *(void *)v13;
          uint64_t v20 = *(void *)v10;
          *(_WORD *)(v13 + 8) = *(_WORD *)(a2 - 4);
          *(void *)unint64_t v13 = v20;
        }
        *(_WORD *)(a2 - 4) = v184;
        *(void *)uint64_t v10 = v160;
      }
LABEL_24:
      __int16 v30 = (uint64_t *)(v13 + 12);
      unint64_t v31 = v13 + 12 * v16;
      int v34 = *(_DWORD *)(v31 - 12);
      int v32 = (uint64_t *)(v31 - 12);
      int v33 = v34;
      int v35 = *v11;
      if (v34 <= *(_DWORD *)(v13 + 12))
      {
        if (v35 > v33)
        {
          int v191 = *((_DWORD *)v32 + 2);
          uint64_t v167 = *v32;
          uint64_t v39 = *(void *)v11;
          *((_WORD *)v32 + 4) = *(_WORD *)(a2 - 16);
          uint64_t *v32 = v39;
          *(_WORD *)(a2 - 16) = v191;
          *(void *)__int16 v11 = v167;
          if (*(_DWORD *)v32 > *(_DWORD *)v30)
          {
            uint64_t v40 = *v30;
            int v41 = *(_DWORD *)(v13 + 20);
            __int16 v42 = *((_WORD *)v32 + 4);
            *__int16 v30 = *v32;
            *(_WORD *)(v13 + 20) = v42;
            *((_WORD *)v32 + 4) = v41;
            uint64_t *v32 = v40;
          }
        }
      }
      else if (v35 <= v33)
      {
        uint64_t v45 = *v30;
        int v46 = *(_DWORD *)(v13 + 20);
        __int16 v47 = *((_WORD *)v32 + 4);
        *__int16 v30 = *v32;
        *(_WORD *)(v13 + 20) = v47;
        *((_WORD *)v32 + 4) = v46;
        uint64_t *v32 = v45;
        if (*v11 > (int)v45)
        {
          int v193 = *((_DWORD *)v32 + 2);
          uint64_t v169 = *v32;
          uint64_t v48 = *(void *)v11;
          *((_WORD *)v32 + 4) = *(_WORD *)(a2 - 16);
          uint64_t *v32 = v48;
          *(_WORD *)(a2 - 16) = v193;
          *(void *)__int16 v11 = v169;
        }
      }
      else
      {
        uint64_t v36 = *v30;
        int v37 = *(_DWORD *)(v13 + 20);
        __int16 v38 = *(_WORD *)(a2 - 16);
        *__int16 v30 = *(void *)v11;
        *(_WORD *)(v13 + 20) = v38;
        *(_WORD *)(a2 - 16) = v37;
        *(void *)__int16 v11 = v36;
      }
      uint64_t v49 = (uint64_t *)(v13 + 24);
      unint64_t v50 = v13 + 12 * v16;
      int v53 = *(_DWORD *)(v50 + 12);
      uint64_t v51 = (uint64_t *)(v50 + 12);
      int v52 = v53;
      int v54 = *v12;
      if (v53 <= *(_DWORD *)(v13 + 24))
      {
        if (v54 > v52)
        {
          int v194 = *((_DWORD *)v51 + 2);
          uint64_t v170 = *v51;
          uint64_t v58 = *(void *)v12;
          *((_WORD *)v51 + 4) = *(_WORD *)(a2 - 28);
          uint64_t *v51 = v58;
          *(_WORD *)(a2 - 28) = v194;
          *(void *)int v12 = v170;
          if (*(_DWORD *)v51 > *(_DWORD *)v49)
          {
            uint64_t v59 = *v49;
            int v60 = *(_DWORD *)(v13 + 32);
            __int16 v61 = *((_WORD *)v51 + 4);
            *uint64_t v49 = *v51;
            *(_WORD *)(v13 + 32) = v61;
            *((_WORD *)v51 + 4) = v60;
            uint64_t *v51 = v59;
          }
        }
      }
      else if (v54 <= v52)
      {
        uint64_t v62 = *v49;
        int v63 = *(_DWORD *)(v13 + 32);
        __int16 v64 = *((_WORD *)v51 + 4);
        *uint64_t v49 = *v51;
        *(_WORD *)(v13 + 32) = v64;
        *((_WORD *)v51 + 4) = v63;
        uint64_t *v51 = v62;
        if (*v12 > (int)v62)
        {
          int v195 = *((_DWORD *)v51 + 2);
          uint64_t v171 = *v51;
          uint64_t v65 = *(void *)v12;
          *((_WORD *)v51 + 4) = *(_WORD *)(a2 - 28);
          uint64_t *v51 = v65;
          *(_WORD *)(a2 - 28) = v195;
          *(void *)int v12 = v171;
        }
      }
      else
      {
        uint64_t v55 = *v49;
        int v56 = *(_DWORD *)(v13 + 32);
        __int16 v57 = *(_WORD *)(a2 - 28);
        *uint64_t v49 = *(void *)v12;
        *(_WORD *)(v13 + 32) = v57;
        *(_WORD *)(a2 - 28) = v56;
        *(void *)int v12 = v55;
      }
      int v66 = *(_DWORD *)v17;
      int v67 = *(_DWORD *)v51;
      if (*(_DWORD *)v17 <= *(_DWORD *)v32)
      {
        if (v67 > v66)
        {
          int v197 = *(_DWORD *)(v17 + 8);
          uint64_t v173 = *(void *)v17;
          *(void *)unint64_t v17 = *v51;
          *(_WORD *)(v17 + 8) = *((_WORD *)v51 + 4);
          *((_WORD *)v51 + 4) = v197;
          uint64_t *v51 = v173;
          if (*(_DWORD *)v17 > *(_DWORD *)v32)
          {
            int v198 = *((_DWORD *)v32 + 2);
            uint64_t v174 = *v32;
            uint64_t *v32 = *(void *)v17;
            *((_WORD *)v32 + 4) = *(_WORD *)(v17 + 8);
            *(_WORD *)(v17 + 8) = v198;
            *(void *)unint64_t v17 = v174;
          }
        }
      }
      else
      {
        if (v67 <= v66)
        {
          int v199 = *((_DWORD *)v32 + 2);
          uint64_t v175 = *v32;
          uint64_t *v32 = *(void *)v17;
          *((_WORD *)v32 + 4) = *(_WORD *)(v17 + 8);
          *(_WORD *)(v17 + 8) = v199;
          *(void *)unint64_t v17 = v175;
          if (*(_DWORD *)v51 <= *(_DWORD *)v17) {
            goto LABEL_54;
          }
          int v196 = *(_DWORD *)(v17 + 8);
          uint64_t v172 = *(void *)v17;
          *(void *)unint64_t v17 = *v51;
          *(_WORD *)(v17 + 8) = *((_WORD *)v51 + 4);
        }
        else
        {
          int v196 = *((_DWORD *)v32 + 2);
          uint64_t v172 = *v32;
          uint64_t *v32 = *v51;
          *((_WORD *)v32 + 4) = *((_WORD *)v51 + 4);
        }
        *((_WORD *)v51 + 4) = v196;
        uint64_t *v51 = v172;
      }
LABEL_54:
      int v200 = *(_DWORD *)(v13 + 8);
      uint64_t v176 = *(void *)v13;
      uint64_t v68 = *(void *)v17;
      *(_WORD *)(v13 + 8) = *(_WORD *)(v17 + 8);
      *(void *)unint64_t v13 = v68;
      *(_WORD *)(v17 + 8) = v200;
      *(void *)unint64_t v17 = v176;
      --a3;
      int v27 = *(_DWORD *)v13;
      if ((a4 & 1) == 0) {
        goto LABEL_55;
      }
LABEL_56:
      uint64_t v69 = 0;
      uint64_t v70 = *(void *)(v13 + 4);
      do
      {
        int v71 = *(_DWORD *)(v13 + v69 + 12);
        v69 += 12;
      }
      while (v71 > v27);
      unint64_t v72 = v13 + v69;
      unint64_t v73 = a2;
      if (v69 == 12)
      {
        unint64_t v73 = a2;
        do
        {
          if (v72 >= v73) {
            break;
          }
          int v75 = *(_DWORD *)(v73 - 12);
          v73 -= 12;
        }
        while (v75 <= v27);
      }
      else
      {
        do
        {
          int v74 = *(_DWORD *)(v73 - 12);
          v73 -= 12;
        }
        while (v74 <= v27);
      }
      v13 += v69;
      if (v72 < v73)
      {
        unint64_t v76 = v73;
        do
        {
          int v201 = *(_DWORD *)(v13 + 8);
          uint64_t v177 = *(void *)v13;
          uint64_t v77 = *(void *)v76;
          *(_WORD *)(v13 + 8) = *(_WORD *)(v76 + 8);
          *(void *)unint64_t v13 = v77;
          *(_WORD *)(v76 + 8) = v201;
          *(void *)unint64_t v76 = v177;
          do
          {
            int v78 = *(_DWORD *)(v13 + 12);
            v13 += 12;
          }
          while (v78 > v27);
          do
          {
            int v79 = *(_DWORD *)(v76 - 12);
            v76 -= 12;
          }
          while (v79 <= v27);
        }
        while (v13 < v76);
      }
      if (v13 - 12 != v9)
      {
        uint64_t v80 = *(void *)(v13 - 12);
        *(_WORD *)(v9 + 8) = *(_WORD *)(v13 - 4);
        *(void *)unint64_t v9 = v80;
      }
      *(_DWORD *)(v13 - 12) = v27;
      *(_DWORD *)(v13 - 8) = v70;
      *(_WORD *)(v13 - 4) = WORD2(v70);
      if (v72 < v73)
      {
LABEL_75:
        BOOL result = sub_A13118(v9, v13 - 12, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        BOOL v81 = sub_A14044((uint64_t *)v9, (uint64_t *)(v13 - 12));
        BOOL result = sub_A14044((uint64_t *)v13, (uint64_t *)a2);
        if (result)
        {
          a2 = v13 - 12;
          if (v81) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v81) {
          goto LABEL_75;
        }
      }
    }
  }
  unint64_t v110 = v13 + 12;
  BOOL v112 = v13 == a2 || v110 == a2;
  if (a4)
  {
    if (v112) {
      return result;
    }
    uint64_t v113 = 0;
    unint64_t v114 = v13;
    while (1)
    {
      unint64_t v116 = v110;
      int v117 = *(_DWORD *)(v114 + 12);
      if (v117 > *(_DWORD *)v114)
      {
        uint64_t v118 = *(void *)(v114 + 16);
        uint64_t v119 = v113;
        do
        {
          uint64_t v120 = v13 + v119;
          *(void *)(v120 + 12) = *(void *)(v13 + v119);
          *(_WORD *)(v120 + 20) = *(_WORD *)(v13 + v119 + 8);
          if (!v119)
          {
            uint64_t v115 = v13;
            goto LABEL_120;
          }
          v119 -= 12;
        }
        while (v117 > *(_DWORD *)(v120 - 12));
        uint64_t v115 = v13 + v119 + 12;
LABEL_120:
        *(_DWORD *)uint64_t v115 = v117;
        *(_DWORD *)(v115 + 4) = v118;
        *(_WORD *)(v115 + 8) = WORD2(v118);
      }
      unint64_t v110 = v116 + 12;
      v113 += 12;
      unint64_t v114 = v116;
      if (v116 + 12 == a2) {
        return result;
      }
    }
  }
  if (!v112)
  {
    do
    {
      unint64_t v151 = v110;
      int v152 = *(_DWORD *)(v9 + 12);
      if (v152 > *(_DWORD *)v9)
      {
        uint64_t v153 = *(void *)(v9 + 16);
        unint64_t v154 = v151;
        do
        {
          unint64_t v155 = v154;
          uint64_t v156 = *(void *)(v154 - 12);
          v154 -= 12;
          *(void *)unint64_t v155 = v156;
          *(_WORD *)(v155 + 8) = *(_WORD *)(v155 - 4);
        }
        while (v152 > *(_DWORD *)(v155 - 24));
        *(_DWORD *)unint64_t v154 = v152;
        *(_DWORD *)(v154 + 4) = v153;
        *(_WORD *)(v154 + 8) = WORD2(v153);
      }
      unint64_t v110 = v151 + 12;
      unint64_t v9 = v151;
    }
    while (v151 + 12 != a2);
  }
  return result;
}

BOOL sub_A14044(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 2;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = (uint64_t *)((char *)a2 - 12);
      if (*((_DWORD *)a2 - 3) > *(_DWORD *)a1) {
        goto LABEL_7;
      }
      return result;
    case 3uLL:
      uint64_t v7 = (uint64_t *)((char *)a1 + 12);
      int v8 = *((_DWORD *)a1 + 3);
      int v6 = (uint64_t *)((char *)a2 - 12);
      int v9 = *((_DWORD *)a2 - 3);
      if (v8 <= *(_DWORD *)a1)
      {
        if (v9 > v8)
        {
          __int16 v34 = *((_DWORD *)a1 + 5);
          uint64_t v35 = *v7;
          __int16 v36 = *((_WORD *)a2 - 2);
          *uint64_t v7 = *v6;
          *((_WORD *)a1 + 10) = v36;
          *int v6 = v35;
          *((_WORD *)a2 - 2) = v34;
          if (*((_DWORD *)a1 + 3) > *(_DWORD *)a1)
          {
            int v37 = *((_DWORD *)a1 + 2);
            uint64_t v38 = *a1;
            *a1 = *v7;
            *((_WORD *)a1 + 4) = *((_WORD *)a1 + 10);
            *uint64_t v7 = v38;
            *((_WORD *)a1 + 10) = v37;
          }
        }
      }
      else if (v9 <= v8)
      {
        __int16 v43 = *((_DWORD *)a1 + 2);
        uint64_t v44 = *a1;
        *a1 = *v7;
        *((_WORD *)a1 + 4) = *((_WORD *)a1 + 10);
        *uint64_t v7 = v44;
        *((_WORD *)a1 + 10) = v43;
        if (*(_DWORD *)v6 > *((_DWORD *)a1 + 3))
        {
          int v45 = *((_DWORD *)a1 + 5);
          uint64_t v46 = *v7;
          __int16 v47 = *((_WORD *)a2 - 2);
          *uint64_t v7 = *v6;
          *((_WORD *)a1 + 10) = v47;
          *int v6 = v46;
          *((_WORD *)a2 - 2) = v45;
        }
      }
      else
      {
LABEL_7:
        int v10 = *((_DWORD *)a1 + 2);
        uint64_t v11 = *a1;
        __int16 v12 = *((_WORD *)v6 + 4);
        *a1 = *v6;
        *((_WORD *)a1 + 4) = v12;
        *int v6 = v11;
        *((_WORD *)v6 + 4) = v10;
      }
      return result;
    case 4uLL:
      sub_A144F4(a1, (_DWORD *)a1 + 3, (int *)a1 + 6, (uint64_t)a2 - 12);
      return 1;
    case 5uLL:
      uint64_t v20 = (uint64_t *)((char *)a1 + 12);
      int v21 = a1 + 3;
      uint64_t v22 = (uint64_t *)((char *)a1 + 36);
      sub_A144F4(a1, (_DWORD *)a1 + 3, (int *)a1 + 6, (uint64_t)a1 + 36);
      int v24 = *((_DWORD *)a2 - 3);
      uint64_t v23 = (uint64_t)a2 - 12;
      if (v24 > *((_DWORD *)a1 + 9))
      {
        __int16 v25 = *((_DWORD *)a1 + 11);
        uint64_t v26 = *v22;
        __int16 v27 = *(_WORD *)(v23 + 8);
        *uint64_t v22 = *(void *)v23;
        *((_WORD *)a1 + 22) = v27;
        *(void *)uint64_t v23 = v26;
        *(_WORD *)(v23 + 8) = v25;
        if (*(_DWORD *)v22 > *(_DWORD *)v21)
        {
          __int16 v28 = *((_DWORD *)a1 + 8);
          uint64_t v29 = *v21;
          *int v21 = *v22;
          *((_WORD *)a1 + 16) = *((_WORD *)a1 + 22);
          *uint64_t v22 = v29;
          *((_WORD *)a1 + 22) = v28;
          if (*(_DWORD *)v21 > *(_DWORD *)v20)
          {
            __int16 v30 = *((_DWORD *)a1 + 5);
            uint64_t v31 = *v20;
            uint64_t *v20 = *v21;
            *((_WORD *)a1 + 10) = *((_WORD *)a1 + 16);
            *int v21 = v31;
            *((_WORD *)a1 + 16) = v30;
            if (*((_DWORD *)a1 + 3) > *(_DWORD *)a1)
            {
              int v32 = *((_DWORD *)a1 + 2);
              uint64_t v33 = *a1;
              *a1 = *v20;
              *((_WORD *)a1 + 4) = *((_WORD *)a1 + 10);
              uint64_t *v20 = v33;
              *((_WORD *)a1 + 10) = v32;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v13 = a1 + 3;
      int v14 = *((_DWORD *)a1 + 6);
      uint64_t v15 = (uint64_t *)((char *)a1 + 12);
      int v16 = *((_DWORD *)a1 + 3);
      int v17 = *(_DWORD *)a1;
      if (v16 <= *(_DWORD *)a1)
      {
        if (v14 > v16)
        {
          __int16 v39 = *((_DWORD *)a1 + 5);
          uint64_t v40 = *v15;
          *uint64_t v15 = *v13;
          *((_WORD *)a1 + 10) = *((_WORD *)a1 + 16);
          uint64_t *v13 = v40;
          *((_WORD *)a1 + 16) = v39;
          if (*(_DWORD *)v15 > v17)
          {
            int v41 = *((_DWORD *)a1 + 2);
            uint64_t v42 = *a1;
            *a1 = *v15;
            *((_WORD *)a1 + 4) = *((_WORD *)a1 + 10);
            *uint64_t v15 = v42;
            *((_WORD *)a1 + 10) = v41;
          }
        }
      }
      else if (v14 <= v16)
      {
        __int16 v48 = *((_DWORD *)a1 + 2);
        uint64_t v49 = *a1;
        *a1 = *v15;
        *((_WORD *)a1 + 4) = *((_WORD *)a1 + 10);
        *uint64_t v15 = v49;
        *((_WORD *)a1 + 10) = v48;
        if (v14 > *((_DWORD *)a1 + 3))
        {
          int v50 = *((_DWORD *)a1 + 5);
          uint64_t v51 = *v15;
          *uint64_t v15 = *v13;
          *((_WORD *)a1 + 10) = *((_WORD *)a1 + 16);
          uint64_t *v13 = v51;
          *((_WORD *)a1 + 16) = v50;
        }
      }
      else
      {
        int v18 = *((_DWORD *)a1 + 2);
        uint64_t v19 = *a1;
        *a1 = *v13;
        *((_WORD *)a1 + 4) = *((_WORD *)a1 + 16);
        uint64_t *v13 = v19;
        *((_WORD *)a1 + 16) = v18;
      }
      int v52 = (uint64_t *)((char *)a1 + 36);
      if ((uint64_t *)((char *)a1 + 36) == a2) {
        return 1;
      }
      uint64_t v53 = 0;
      int v54 = 0;
      break;
  }
  while (1)
  {
    int v55 = *(_DWORD *)v52;
    if (*(_DWORD *)v52 > *(_DWORD *)v13) {
      break;
    }
LABEL_36:
    unint64_t v13 = v52;
    v53 += 12;
    int v52 = (uint64_t *)((char *)v52 + 12);
    if (v52 == a2) {
      return 1;
    }
  }
  uint64_t v56 = *(uint64_t *)((char *)v52 + 4);
  uint64_t v57 = v53;
  do
  {
    uint64_t v58 = (uint64_t)a1 + v57;
    *(void *)(v58 + 36) = *(uint64_t *)((char *)a1 + v57 + 24);
    *(_WORD *)(v58 + 44) = *(_WORD *)((char *)a1 + v57 + 32);
    if (v57 == -24)
    {
      *(_DWORD *)a1 = v55;
      *((_DWORD *)a1 + 1) = v56;
      *((_WORD *)a1 + 4) = WORD2(v56);
      if (++v54 != 8) {
        goto LABEL_36;
      }
      return (uint64_t *)((char *)v52 + 12) == a2;
    }
    v57 -= 12;
  }
  while (v55 > *(_DWORD *)(v58 + 12));
  uint64_t v59 = (uint64_t)a1 + v57;
  *(_DWORD *)(v59 + 36) = v55;
  *(_DWORD *)(v59 + 40) = v56;
  *(_WORD *)(v59 + 44) = WORD2(v56);
  if (++v54 != 8) {
    goto LABEL_36;
  }
  return (uint64_t *)((char *)v52 + 12) == a2;
}