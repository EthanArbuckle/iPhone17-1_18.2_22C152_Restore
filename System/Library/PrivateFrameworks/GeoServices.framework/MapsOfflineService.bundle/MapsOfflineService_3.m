void sub_175878(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;
  uint64_t vars8;

  *(void *)a1 = off_2409D10;
  v2 = *(void *)(a1 + 8);
  if (v2) {
    v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_175914(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return 1.0 / (v2 * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_17596C()
{
  return 57;
}

uint64_t sub_175974(uint64_t a1)
{
  *(void *)a1 = off_2409D60;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1759F0(uint64_t a1)
{
  *(void *)a1 = off_2409D60;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_175A8C(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return 1.0 / (v1 * (v1 * v1) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_175AE8()
{
  return 57;
}

uint64_t sub_175AF0(uint64_t a1)
{
  *(void *)a1 = off_2409DB0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_175B6C(uint64_t a1)
{
  *(void *)a1 = off_2409DB0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_175C08(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0
       / (v1
        * v1
        * (v1
         * v1)
        * (v1
         * v1
         * (v1
          * v1)
         * (v1
          * v1
          * (v1
           * v1))
         * (v1
          * v1
          * (v1
           * v1)
          * (v1
           * v1
           * (v1
            * v1)))));
}

uint64_t sub_175C60()
{
  return 57;
}

uint64_t sub_175C68(uint64_t a1)
{
  *(void *)a1 = off_2409E00;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_175CE4(uint64_t a1)
{
  *(void *)a1 = off_2409E00;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_175D80(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return 1.0
       / (v1
        * (v1
         * v1
         * (v1
          * v1))
        * (v1
         * v1
         * (v1
          * v1)
         * (v1
          * v1
          * (v1
           * v1))
         * (v1
          * v1
          * (v1
           * v1)
          * (v1
           * v1
           * (v1
            * v1)))));
}

uint64_t sub_175DDC()
{
  return 57;
}

uint64_t sub_175DE4(uint64_t a1)
{
  *(void *)a1 = off_2409E50;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_175E60(uint64_t a1)
{
  *(void *)a1 = off_2409E50;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_175EFC(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return 1.0 / (v2 * (v2 * v2) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_175F58()
{
  return 57;
}

uint64_t sub_175F60(uint64_t a1)
{
  *(void *)a1 = off_2409EA0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_175FDC(uint64_t a1)
{
  *(void *)a1 = off_2409EA0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_176078(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return 1.0 / (v1 * (v1 * v1) * (v2 * v2) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_1760D8()
{
  return 57;
}

uint64_t sub_1760E0(uint64_t a1)
{
  *(void *)a1 = off_2409EF0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_17615C(uint64_t a1)
{
  *(void *)a1 = off_2409EF0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1761F8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return 1.0 / (v2 * (v2 * v2));
}

uint64_t sub_176250()
{
  return 57;
}

uint64_t sub_176258(uint64_t a1)
{
  *(void *)a1 = off_2409F40;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1762D4(uint64_t a1)
{
  *(void *)a1 = off_2409F40;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_176370(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return 1.0 / (v1 * v2 * (v2 * v2));
}

uint64_t sub_1763CC()
{
  return 57;
}

uint64_t sub_1763D4(uint64_t a1)
{
  *(void *)a1 = off_2409F90;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_176450(uint64_t a1)
{
  *(void *)a1 = off_2409F90;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1764EC(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return 1.0 / (v2 * (v2 * v2 * (v2 * v2)) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_176548()
{
  return 57;
}

uint64_t sub_176550(uint64_t a1)
{
  *(void *)a1 = off_2409FE0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1765CC(uint64_t a1)
{
  *(void *)a1 = off_2409FE0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_176668(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return 1.0 / (v1 * (v1 * v1) * (v2 * v2 * (v2 * v2)) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_1766C8()
{
  return 57;
}

uint64_t sub_1766D0(uint64_t a1)
{
  *(void *)a1 = off_240A030;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_17674C(uint64_t a1)
{
  *(void *)a1 = off_240A030;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1767E8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return 1.0 / (v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_176844()
{
  return 57;
}

uint64_t sub_17684C(uint64_t a1)
{
  *(void *)a1 = off_240A080;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1768C8(uint64_t a1)
{
  *(void *)a1 = off_240A080;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_176964(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return 1.0 / (v1 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_1769C4()
{
  return 57;
}

uint64_t sub_1769CC(uint64_t a1)
{
  *(void *)a1 = off_240A0D0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_176A48(uint64_t a1)
{
  *(void *)a1 = off_240A0D0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_176AE4(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return 1.0 / (v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_176B44()
{
  return 57;
}

uint64_t sub_176B4C(uint64_t a1)
{
  *(void *)a1 = off_240A120;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_176BC8(uint64_t a1)
{
  *(void *)a1 = off_240A120;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_176C64(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return 1.0 / (v1 * (v1 * v1) * (v2 * v2) * (v2 * v2 * (v2 * v2)) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_176CC8()
{
  return 57;
}

uint64_t sub_176CD0(uint64_t a1)
{
  *(void *)a1 = off_240A170;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_176D4C(uint64_t a1)
{
  *(void *)a1 = off_240A170;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_176DE8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return 1.0 / (v2 * v2 * (v2 * v2));
}

uint64_t sub_176E40()
{
  return 57;
}

uint64_t sub_176E48(uint64_t a1)
{
  *(void *)a1 = off_240A1C0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_176EC4(uint64_t a1)
{
  *(void *)a1 = off_240A1C0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_176F60(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return 1.0 / (v1 * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_176FBC()
{
  return 57;
}

uint64_t sub_176FC4(uint64_t a1)
{
  *(void *)a1 = off_240A210;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_177040(uint64_t a1)
{
  *(void *)a1 = off_240A210;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1770DC(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  double v3 = v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2));
  return 1.0 / (v2 * (v3 * v3));
}

uint64_t sub_177138()
{
  return 57;
}

uint64_t sub_177140(uint64_t a1)
{
  *(void *)a1 = off_240A260;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1771BC(uint64_t a1)
{
  *(void *)a1 = off_240A260;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_177258(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)));
  return 1.0 / (v1 * (v1 * v1) * (v2 * v2));
}

uint64_t sub_1772B8()
{
  return 57;
}

uint64_t sub_1772C0(uint64_t a1)
{
  *(void *)a1 = off_240A2B0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_17733C(uint64_t a1)
{
  *(void *)a1 = off_240A2B0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1773D8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return 1.0 / (v2 * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_177434()
{
  return 57;
}

uint64_t sub_17743C(uint64_t a1)
{
  *(void *)a1 = off_240A300;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1774B8(uint64_t a1)
{
  *(void *)a1 = off_240A300;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_177554(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return 1.0 / (v1 * v2 * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_1775B4()
{
  return 57;
}

uint64_t sub_1775BC(uint64_t a1)
{
  *(void *)a1 = off_240A350;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_177638(uint64_t a1)
{
  *(void *)a1 = off_240A350;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1776D4(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  double v3 = v2 * v2;
  return 1.0 / (v2 * (v2 * v2) * (v3 * v3 * (v3 * v3) * (v3 * v3 * (v3 * v3))));
}

uint64_t sub_177734()
{
  return 57;
}

uint64_t sub_17773C(uint64_t a1)
{
  *(void *)a1 = off_240A3A0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1777B8(uint64_t a1)
{
  *(void *)a1 = off_240A3A0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_177854(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return 1.0 / (v1 * (v1 * v1) * v2 * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_1778B8()
{
  return 57;
}

uint64_t sub_1778C0(uint64_t a1)
{
  *(void *)a1 = off_240A3F0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_17793C(uint64_t a1)
{
  *(void *)a1 = off_240A3F0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1779D8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return 1.0 / (v2 * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_177A34()
{
  return 57;
}

uint64_t sub_177A3C(uint64_t a1)
{
  *(void *)a1 = off_240A440;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_177AB8(uint64_t a1)
{
  *(void *)a1 = off_240A440;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_177B54(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return 1.0 / (v1 * v2 * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_177BB4()
{
  return 57;
}

uint64_t sub_177BBC(uint64_t a1)
{
  *(void *)a1 = off_240A490;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_177C38(uint64_t a1)
{
  *(void *)a1 = off_240A490;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_177CD4(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return 1.0
       / (v2
        * (v2
         * v2
         * (v2
          * v2))
        * (v2
         * v2
         * (v2
          * v2)
         * (v2
          * v2
          * (v2
           * v2))
         * (v2
          * v2
          * (v2
           * v2)
          * (v2
           * v2
           * (v2
            * v2)))));
}

uint64_t sub_177D34()
{
  return 57;
}

uint64_t sub_177D3C(uint64_t a1)
{
  *(void *)a1 = off_240A4E0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_177DB8(uint64_t a1)
{
  *(void *)a1 = off_240A4E0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_177E54(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  return 1.0
       / (v1
        * (v1
         * v1)
        * (v2
         * v2
         * (v2
          * v2))
        * (v2
         * v2
         * (v2
          * v2)
         * (v2
          * v2
          * (v2
           * v2))
         * (v2
          * v2
          * (v2
           * v2)
          * (v2
           * v2
           * (v2
            * v2)))));
}

uint64_t sub_177EB8()
{
  return 57;
}

uint64_t sub_177EC0(uint64_t a1)
{
  *(void *)a1 = off_240A530;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_177F3C(uint64_t a1)
{
  *(void *)a1 = off_240A530;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_177FD8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return 1.0 / (v2 * (v2 * v2) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_178038()
{
  return 57;
}

uint64_t sub_178040(uint64_t a1)
{
  *(void *)a1 = off_240A580;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1780BC(uint64_t a1)
{
  *(void *)a1 = off_240A580;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_178158(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return 1.0 / (v1 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_1781BC()
{
  return 57;
}

uint64_t sub_1781C4(uint64_t a1)
{
  *(void *)a1 = off_240A5D0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_178240(uint64_t a1)
{
  *(void *)a1 = off_240A5D0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1782DC(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  double v3 = v2 * v2;
  return 1.0 / (v2 * (v2 * v2) * (v3 * v3) * (v3 * v3 * (v3 * v3) * (v3 * v3 * (v3 * v3))));
}

uint64_t sub_178340()
{
  return 57;
}

uint64_t sub_178348(uint64_t a1)
{
  *(void *)a1 = off_240A620;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1783C4(uint64_t a1)
{
  *(void *)a1 = off_240A620;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_178460(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return 1.0 / (v1 * (v1 * v1) * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_1784C8()
{
  return 57;
}

uint64_t sub_1784D0(uint64_t a1)
{
  *(void *)a1 = off_240A670;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_17854C(uint64_t a1)
{
  *(void *)a1 = off_240A670;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1785E8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return 1.0 / (v2 * v2 * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_178644()
{
  return 57;
}

uint64_t sub_17864C(uint64_t a1)
{
  *(void *)a1 = off_240A6C0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1786C8(uint64_t a1)
{
  *(void *)a1 = off_240A6C0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_178764(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return 1.0 / (v1 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_1787C4()
{
  return 57;
}

uint64_t sub_1787CC(uint64_t a1)
{
  *(void *)a1 = off_240A710;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_178848(uint64_t a1)
{
  *(void *)a1 = off_240A710;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1788E4(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  double v3 = v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2));
  return 1.0 / (v2 * v3 * (v3 * v3));
}

uint64_t sub_178944()
{
  return 57;
}

uint64_t sub_17894C(uint64_t a1)
{
  *(void *)a1 = off_240A760;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1789C8(uint64_t a1)
{
  *(void *)a1 = off_240A760;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_178A64(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)) * (v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1)));
  return 1.0 / (v1 * (v1 * v1) * v2 * (v2 * v2));
}

uint64_t sub_178AC8()
{
  return 57;
}

uint64_t sub_178AD0(uint64_t a1)
{
  *(void *)a1 = off_240A7B0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_178B4C(uint64_t a1)
{
  *(void *)a1 = off_240A7B0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_178BE8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return 1.0 / (v2 * (v2 * v2 * (v2 * v2)) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_178C48()
{
  return 57;
}

uint64_t sub_178C50(uint64_t a1)
{
  *(void *)a1 = off_240A800;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_178CCC(uint64_t a1)
{
  *(void *)a1 = off_240A800;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_178D68(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return 1.0 / (v1 * v2 * (v2 * v2 * (v2 * v2)) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_178DCC()
{
  return 57;
}

uint64_t sub_178DD4(uint64_t a1)
{
  *(void *)a1 = off_240A850;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_178E50(uint64_t a1)
{
  *(void *)a1 = off_240A850;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_178EEC(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  double v3 = v2 * v2;
  return 1.0 / (v2 * (v2 * v2) * (v3 * v3 * (v3 * v3)) * (v3 * v3 * (v3 * v3) * (v3 * v3 * (v3 * v3))));
}

uint64_t sub_178F50()
{
  return 57;
}

uint64_t sub_178F58(uint64_t a1)
{
  *(void *)a1 = off_240A8A0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_178FD4(uint64_t a1)
{
  *(void *)a1 = off_240A8A0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_179070(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return 1.0 / (v1 * (v1 * v1) * v2 * (v2 * v2 * (v2 * v2)) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_1790D8()
{
  return 57;
}

uint64_t sub_1790E0(uint64_t a1)
{
  *(void *)a1 = off_240A8F0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_17915C(uint64_t a1)
{
  *(void *)a1 = off_240A8F0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1791F8(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return 1.0 / (v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_179258()
{
  return 57;
}

uint64_t sub_179260(uint64_t a1)
{
  *(void *)a1 = off_240A940;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1792DC(uint64_t a1)
{
  *(void *)a1 = off_240A940;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_179378(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return 1.0 / (v1 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_1793DC()
{
  return 57;
}

uint64_t sub_1793E4(uint64_t a1)
{
  *(void *)a1 = off_240A990;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_179460(uint64_t a1)
{
  *(void *)a1 = off_240A990;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_1794FC(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1;
  double v3 = v2 * v2 * (v2 * v2);
  return 1.0 / (v2 * v3 * (v3 * v3) * (v3 * v3 * (v3 * v3)));
}

uint64_t sub_179560()
{
  return 57;
}

uint64_t sub_179568(uint64_t a1)
{
  *(void *)a1 = off_240A9E0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_1795E4(uint64_t a1)
{
  *(void *)a1 = off_240A9E0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_179680(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1) * (v1 * v1 * (v1 * v1));
  return 1.0 / (v1 * (v1 * v1) * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)));
}

uint64_t sub_1796E8()
{
  return 57;
}

uint64_t sub_1796F0(uint64_t a1)
{
  *(void *)a1 = off_240AA30;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

void sub_17976C(uint64_t a1)
{
  *(void *)a1 = off_240AA30;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

double sub_179808(uint64_t a1)
{
  double v1 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  double v2 = v1 * v1 * (v1 * v1);
  return 1.0 / (v2 * (v2 * v2) * (v2 * v2 * (v2 * v2)) * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))));
}

uint64_t sub_17986C()
{
  return 57;
}

void sub_179874(uint64_t **a1@<X1>, std::string *a2@<X8>)
{
  sub_179A34(*a1, (uint64_t)&v13);
  char v12 = 1;
  strcpy(__s, "o");
  v4 = std::string::append(&v13, __s, 1uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_179A34(a1[1], (uint64_t)__p);
  if ((v10 & 0x80u) == 0) {
    v6 = __p;
  }
  else {
    v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  v8 = std::string::append(&v14, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((v12 & 0x80000000) == 0) {
        goto LABEL_10;
      }
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_15:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
LABEL_14:
  operator delete(*(void **)__s);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_15;
  }
}

void sub_1799A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v27 - 41) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v27 - 41) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v27 - 64));
  if ((a21 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a16);
  if ((a27 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_179A34(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F5FE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F5FE0))
  {
    sub_5E5C(&xmmword_24F5FC8, "(null)");
    __cxa_guard_release(&qword_24F5FE0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6000, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F6000))
  {
    sub_5E5C(&xmmword_24F5FE8, "(c)");
    __cxa_guard_release(&qword_24F6000);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6020, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F6020))
  {
    sub_5E5C(&xmmword_24F6008, "(v)");
    __cxa_guard_release(&qword_24F6020);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6040, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F6040))
  {
    sub_5E5C(&xmmword_24F6028, "(vov)");
    __cxa_guard_release(&qword_24F6040);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6060, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F6060))
  {
    sub_5E5C(&xmmword_24F6048, "(cov)");
    __cxa_guard_release(&qword_24F6060);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6080, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F6080))
  {
    sub_5E5C(&xmmword_24F6068, "(voc)");
    __cxa_guard_release(&qword_24F6080);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F60A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F60A0))
  {
    sub_5E5C(&xmmword_24F6088, "(s)");
    __cxa_guard_release(&qword_24F60A0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F60C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F60C0))
  {
    sub_5E5C(&xmmword_24F60A8, "(rngs)");
    __cxa_guard_release(&qword_24F60C0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F60E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F60E0))
  {
    sub_5E5C(&xmmword_24F60C8, "(cs)");
    __cxa_guard_release(&qword_24F60E0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6100, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F6100))
  {
    sub_5E5C(&xmmword_24F60E8, "(crngs)");
    __cxa_guard_release(&qword_24F6100);
  }
  if (a1)
  {
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 32))(a1) == 1)
    {
      if ((byte_24F5FDF & 0x80000000) == 0)
      {
        v4 = &xmmword_24F5FC8;
LABEL_58:
        *(_OWORD *)a2 = *v4;
        *(void *)(a2 + 16) = *((void *)v4 + 2);
        return;
      }
      unsigned __int8 v10 = &xmmword_24F5FC8;
      goto LABEL_69;
    }
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 32))(a1) == 2)
    {
      if ((byte_24F5FFF & 0x80000000) == 0)
      {
        v4 = &xmmword_24F5FE8;
        goto LABEL_58;
      }
      unsigned __int8 v10 = &xmmword_24F5FE8;
      goto LABEL_69;
    }
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 32))(a1) == 17)
    {
      if ((byte_24F601F & 0x80000000) == 0)
      {
        v4 = &xmmword_24F6008;
        goto LABEL_58;
      }
      unsigned __int8 v10 = &xmmword_24F6008;
      goto LABEL_69;
    }
    uint64_t v11 = *a1;
    {
      if ((byte_24F603F & 0x80000000) == 0)
      {
        v4 = &xmmword_24F6028;
        goto LABEL_58;
      }
      unsigned __int8 v10 = &xmmword_24F6028;
      goto LABEL_69;
    }
    {
      if ((byte_24F605F & 0x80000000) == 0)
      {
        v4 = &xmmword_24F6048;
        goto LABEL_58;
      }
      unsigned __int8 v10 = &xmmword_24F6048;
      goto LABEL_69;
    }
    {
      if ((byte_24F607F & 0x80000000) == 0)
      {
        v4 = &xmmword_24F6068;
        goto LABEL_58;
      }
      unsigned __int8 v10 = &xmmword_24F6068;
      goto LABEL_69;
    }
    if ((*(unsigned int (**)(uint64_t *))(v11 + 32))(a1) == 18)
    {
      if ((byte_24F609F & 0x80000000) == 0)
      {
        v4 = &xmmword_24F6088;
        goto LABEL_58;
      }
      unsigned __int8 v10 = &xmmword_24F6088;
      goto LABEL_69;
    }
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 32))(a1) == 19)
    {
      if ((byte_24F60DF & 0x80000000) == 0)
      {
        v4 = &xmmword_24F60C8;
        goto LABEL_58;
      }
      unsigned __int8 v10 = &xmmword_24F60C8;
      goto LABEL_69;
    }
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 32))(a1) == 20)
    {
      if ((byte_24F60BF & 0x80000000) == 0)
      {
        v4 = &xmmword_24F60A8;
        goto LABEL_58;
      }
      unsigned __int8 v10 = &xmmword_24F60A8;
      goto LABEL_69;
    }
    if ((*(unsigned int (**)(uint64_t *))(*a1 + 32))(a1) == 21)
    {
      if ((byte_24F60FF & 0x80000000) == 0)
      {
        v4 = &xmmword_24F60E8;
        goto LABEL_58;
      }
      unsigned __int8 v10 = &xmmword_24F60E8;
LABEL_69:
      char v12 = *(void **)v10;
      unint64_t v13 = *((void *)v10 + 1);
      sub_4200((unsigned char *)a2, v12, v13);
      return;
    }
    if (sub_17A390(a1))
    {
      goto LABEL_22;
    }
    if (sub_17A3F4(a1))
    {
LABEL_22:
      (*(void (**)(std::string *__return_ptr))(*(void *)v5 + 40))(&v14);
      v6 = std::string::insert(&v14, 0, "(");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v15.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      v8 = std::string::append(&v15, ")");
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      *(void *)(a2 + 16) = *((void *)&v8->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v15.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return;
        }
      }
      else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        return;
      }
      operator delete(v14.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    if (sub_17A390(0))
    {
      long long v5 = 0;
      goto LABEL_22;
    }
    if (sub_17A3F4(0))
    {
      long long v5 = 0;
      goto LABEL_22;
    }
  }

  sub_5E5C((void *)a2, "ERROR");
}

void sub_17A2AC(_Unwind_Exception *a1)
{
}

void sub_17A354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

const void *sub_17A390(const void *result)
{
  if (result) {
  return result;
  }
}

const void *sub_17A3F4(const void *result)
{
  if (result) {
  return result;
  }
}

void sub_17A458()
{
}

void sub_17A540()
{
}

void sub_17A564()
{
}

void sub_17A64C()
{
}

void sub_17A670()
{
}

void sub_17A758()
{
}

void sub_17A77C()
{
}

void sub_17A864()
{
}

uint64_t sub_17A888(uint64_t a1)
{
  *(void *)a1 = off_240AB10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_17A904(uint64_t a1)
{
  *(void *)a1 = off_240AB10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_17A9A0(uint64_t a1)
{
  return *(double *)(a1 + 8) / (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
}

uint64_t sub_17A9F0(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_17A9F8()
{
  return 5;
}

double sub_17AA00(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_17AA08(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_17AA10(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_17AA1C(uint64_t a1)
{
  *(void *)a1 = off_240AB80;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_17AA98(uint64_t a1)
{
  *(void *)a1 = off_240AB80;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_17AB34(uint64_t a1)
{
  return *(double *)(a1 + 8) - (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
}

uint64_t sub_17AB84(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_17AB8C()
{
  return 3;
}

double sub_17AB94(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_17AB9C(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_17ABA4(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_17ABB0(uint64_t a1)
{
  *(void *)a1 = off_240ABF0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_17AC2C(uint64_t a1)
{
  *(void *)a1 = off_240ABF0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_17ACC8(uint64_t a1)
{
  return (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) + *(double *)(a1 + 8);
}

uint64_t sub_17AD18(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_17AD20()
{
  return 2;
}

double sub_17AD28(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_17AD30(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_17AD38(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_17AD44(uint64_t a1)
{
  *(void *)a1 = off_240AC60;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_17ADC0(uint64_t a1)
{
  *(void *)a1 = off_240AC60;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_17AE5C(uint64_t a1)
{
  return (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) * *(double *)(a1 + 8);
}

uint64_t sub_17AEAC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_17AEB4()
{
  return 4;
}

double sub_17AEBC(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_17AEC4(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_17AECC(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_17AED8(uint64_t a1)
{
  *(void *)a1 = off_240ACE8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_17AF54(uint64_t a1)
{
  *(void *)a1 = off_240ACE8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_17AFF0(uint64_t a1)
{
  return (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) + *(double *)(a1 + 8);
}

uint64_t sub_17B040(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_17B048()
{
  return 2;
}

double sub_17B050(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_17B058(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_17B060(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

void sub_17B070()
{
}

double sub_17B084(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16);
}

uint64_t sub_17B098()
{
  return 34;
}

uint64_t sub_17B0A0()
{
  return 2;
}

uint64_t sub_17B0A8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_17B0B0(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_17B0BC()
{
}

double sub_17B0D0(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16);
}

uint64_t sub_17B0E4()
{
  return 35;
}

uint64_t sub_17B0EC()
{
  return 3;
}

uint64_t sub_17B0F4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_17B0FC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_17B108()
{
}

double sub_17B11C(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16);
}

uint64_t sub_17B130()
{
  return 36;
}

uint64_t sub_17B138()
{
  return 4;
}

uint64_t sub_17B140(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_17B148(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_17B154()
{
}

double sub_17B168(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16);
}

uint64_t sub_17B17C()
{
  return 37;
}

uint64_t sub_17B184()
{
  return 5;
}

uint64_t sub_17B18C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_17B194(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_17B1A0()
{
}

uint64_t sub_17B1B4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(double *, double *))(a1 + 40);
  double v5 = (*(double (**)(void))(a1 + 24))(*(void *)(a1 + 8));
  double v4 = (*(double (**)(void))(a1 + 32))(*(void *)(a1 + 16));
  return v2(&v5, &v4);
}

uint64_t sub_17B20C()
{
  return 98;
}

void *sub_17B214(uint64_t a1, uint64_t a2, _DWORD *a3, void **a4, uint64_t *a5)
{
  if ((*(unsigned int (**)(void))(*(void *)*a4 + 32))() - 106 > 4) {
    return 0;
  }
  unsigned __int8 v10 = *a4;
  switch(*a3)
  {
    case 2:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 1;
      LOWORD(v28.__r_.__value_.__l.__data_) = 43;
      break;
    case 3:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 1;
      LOWORD(v28.__r_.__value_.__l.__data_) = 45;
      break;
    case 4:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 1;
      LOWORD(v28.__r_.__value_.__l.__data_) = 42;
      break;
    case 5:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 1;
      LOWORD(v28.__r_.__value_.__l.__data_) = 47;
      break;
    case 6:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 1;
      LOWORD(v28.__r_.__value_.__l.__data_) = 37;
      break;
    case 7:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 1;
      LOWORD(v28.__r_.__value_.__l.__data_) = 94;
      break;
    case 0xE:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 1;
      LOWORD(v28.__r_.__value_.__l.__data_) = 60;
      break;
    case 0xF:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 2;
      __int16 v12 = 15676;
      goto LABEL_20;
    case 0x10:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 2;
      __int16 v12 = 15677;
      goto LABEL_20;
    case 0x12:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 2;
      __int16 v12 = 15649;
      goto LABEL_20;
    case 0x14:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 2;
      __int16 v12 = 15678;
      goto LABEL_20;
    case 0x15:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 1;
      LOWORD(v28.__r_.__value_.__l.__data_) = 62;
      break;
    case 0x16:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 3;
      LODWORD(v28.__r_.__value_.__l.__data_) = 6581857;
      break;
    case 0x17:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 4;
      int v13 = 1684955502;
      goto LABEL_24;
    case 0x18:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 2;
      __int16 v12 = 29295;
LABEL_20:
      LOWORD(v28.__r_.__value_.__l.__data_) = v12;
      v28.__r_.__value_.__s.__data_[2] = 0;
      break;
    case 0x19:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 3;
      LODWORD(v28.__r_.__value_.__l.__data_) = 7499630;
      break;
    case 0x1A:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 3;
      LODWORD(v28.__r_.__value_.__l.__data_) = 7499640;
      break;
    case 0x1B:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 4;
      int v13 = 1919905400;
LABEL_24:
      LODWORD(v28.__r_.__value_.__l.__data_) = v13;
      v28.__r_.__value_.__s.__data_[4] = 0;
      break;
    default:
      *((unsigned char *)&v28.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v28, "UNKNOWN");
      break;
  }
  std::string v14 = std::string::insert(&v28, 0, "t");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v29, "(");
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr, void *))(*(void *)v10 + 40))(__p, v10);
  if ((v27 & 0x80u) == 0) {
    v18 = __p;
  }
  else {
    v18 = (void **)__p[0];
  }
  if ((v27 & 0x80u) == 0) {
    std::string::size_type v19 = v27;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  v20 = std::string::append(&v30, (const std::string::value_type *)v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v31, ")");
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  std::string::size_type v33 = v22->__r_.__value_.__r.__words[2];
  long long v32 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v31.__r_.__value_.__l.__data_);
    if (((char)v27 & 0x80000000) == 0)
    {
LABEL_33:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_40;
    }
  }
  else if (((char)v27 & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_41:
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_42;
  }
LABEL_40:
  operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_41;
  }
LABEL_35:
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_36;
  }
LABEL_42:
  operator delete(v28.__r_.__value_.__l.__data_);
LABEL_36:
  switch((*(unsigned int (**)(void *))(*(void *)v10 + 32))(v10))
  {
    case 'j':
      v24 = sub_17C0E8(a1, &v32, a2, a4, a5);
      goto LABEL_49;
    case 'k':
      v24 = sub_17BEB0(a1, &v32, a2, a4, a5);
      goto LABEL_49;
    case 'l':
      v24 = sub_17BC78(a1, &v32, a2, a4, a5);
      goto LABEL_49;
    case 'm':
      v24 = sub_17BA40(a1, &v32, a2, a4, a5);
      goto LABEL_49;
    case 'n':
      v24 = sub_17B80C(a1, &v32, a2, a4, a5);
LABEL_49:
      uint64_t v11 = v24;
      if (SHIBYTE(v33) < 0) {
        goto LABEL_50;
      }
      return v11;
    default:
      uint64_t v11 = 0;
      if (SHIBYTE(v33) < 0) {
LABEL_50:
      }
        operator delete((void *)v32);
      break;
  }
  return v11;
}

void sub_17B6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
LABEL_12:
    }
      _Unwind_Resume(exception_object);
LABEL_11:
    operator delete(a15);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void *sub_17B80C(uint64_t a1, void *a2, uint64_t a3, void **a4, uint64_t *a5)
{
  result = *a4;
  if (*a4)
  {
    if (result)
    {
      long long v9 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v9 + 56))(v9);
      (*(void (**)(void *))(*(void *)v9 + 64))(v9);
      uint64_t v10 = *(void *)(a1 + 72);
      uint64_t v13 = *(void *)(v10 + 8);
      uint64_t v11 = v10 + 8;
      uint64_t v12 = v13;
      if (!v13) {
        return 0;
      }
      int v14 = *((char *)a2 + 23);
      if (v14 >= 0) {
        size_t v15 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v15 = a2[1];
      }
      if (v14 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v16 = v11;
      do
      {
        int v17 = *(char *)(v12 + 55);
        if (v17 >= 0) {
          size_t v18 = *(unsigned __int8 *)(v12 + 55);
        }
        else {
          size_t v18 = *(void *)(v12 + 40);
        }
        if (v17 >= 0) {
          std::string::size_type v19 = (const void *)(v12 + 32);
        }
        else {
          std::string::size_type v19 = *(const void **)(v12 + 32);
        }
        if (v15 >= v18) {
          size_t v20 = v18;
        }
        else {
          size_t v20 = v15;
        }
        int v21 = memcmp(v19, a2, v20);
        BOOL v22 = v18 < v15;
        if (v21) {
          BOOL v22 = v21 < 0;
        }
        BOOL v23 = !v22;
        if (v22) {
          v24 = (uint64_t *)(v12 + 8);
        }
        else {
          v24 = (uint64_t *)v12;
        }
        if (v23) {
          uint64_t v16 = v12;
        }
        uint64_t v12 = *v24;
      }
      while (*v24);
      if (v16 == v11) {
        return 0;
      }
      int v25 = *(char *)(v16 + 55);
      size_t v26 = v25 >= 0 ? *(unsigned __int8 *)(v16 + 55) : *(void *)(v16 + 40);
      unsigned __int8 v27 = v25 >= 0 ? (const void *)(v16 + 32) : *(const void **)(v16 + 32);
      size_t v28 = v26 >= v15 ? v15 : v26;
      int v29 = memcmp(a2, v27, v28);
      BOOL v30 = v15 < v26;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      if (v30)
      {
        return 0;
      }
      else
      {
        int v31 = *(_DWORD *)(v16 + 64);
        *a5 = sub_17C480(a1, &v31);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_17BA40(uint64_t a1, void *a2, uint64_t a3, void **a4, uint64_t *a5)
{
  result = *a4;
  if (*a4)
  {
    if (result)
    {
      long long v9 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v9 + 56))(v9);
      (*(void (**)(void *))(*(void *)v9 + 64))(v9);
      uint64_t v10 = *(void *)(a1 + 72);
      uint64_t v13 = *(void *)(v10 + 8);
      uint64_t v11 = v10 + 8;
      uint64_t v12 = v13;
      if (!v13) {
        return 0;
      }
      int v14 = *((char *)a2 + 23);
      if (v14 >= 0) {
        size_t v15 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v15 = a2[1];
      }
      if (v14 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v16 = v11;
      do
      {
        int v17 = *(char *)(v12 + 55);
        if (v17 >= 0) {
          size_t v18 = *(unsigned __int8 *)(v12 + 55);
        }
        else {
          size_t v18 = *(void *)(v12 + 40);
        }
        if (v17 >= 0) {
          std::string::size_type v19 = (const void *)(v12 + 32);
        }
        else {
          std::string::size_type v19 = *(const void **)(v12 + 32);
        }
        if (v15 >= v18) {
          size_t v20 = v18;
        }
        else {
          size_t v20 = v15;
        }
        int v21 = memcmp(v19, a2, v20);
        BOOL v22 = v18 < v15;
        if (v21) {
          BOOL v22 = v21 < 0;
        }
        BOOL v23 = !v22;
        if (v22) {
          v24 = (uint64_t *)(v12 + 8);
        }
        else {
          v24 = (uint64_t *)v12;
        }
        if (v23) {
          uint64_t v16 = v12;
        }
        uint64_t v12 = *v24;
      }
      while (*v24);
      if (v16 == v11) {
        return 0;
      }
      int v25 = *(char *)(v16 + 55);
      size_t v26 = v25 >= 0 ? *(unsigned __int8 *)(v16 + 55) : *(void *)(v16 + 40);
      unsigned __int8 v27 = v25 >= 0 ? (const void *)(v16 + 32) : *(const void **)(v16 + 32);
      size_t v28 = v26 >= v15 ? v15 : v26;
      int v29 = memcmp(a2, v27, v28);
      BOOL v30 = v15 < v26;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      if (v30)
      {
        return 0;
      }
      else
      {
        int v31 = *(_DWORD *)(v16 + 64);
        *a5 = sub_181328(a1, &v31);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_17BC78(uint64_t a1, void *a2, uint64_t a3, void **a4, uint64_t *a5)
{
  result = *a4;
  if (*a4)
  {
    if (result)
    {
      long long v9 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v9 + 56))(v9);
      (*(void (**)(void *))(*(void *)v9 + 64))(v9);
      uint64_t v10 = *(void *)(a1 + 72);
      uint64_t v13 = *(void *)(v10 + 8);
      uint64_t v11 = v10 + 8;
      uint64_t v12 = v13;
      if (!v13) {
        return 0;
      }
      int v14 = *((char *)a2 + 23);
      if (v14 >= 0) {
        size_t v15 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v15 = a2[1];
      }
      if (v14 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v16 = v11;
      do
      {
        int v17 = *(char *)(v12 + 55);
        if (v17 >= 0) {
          size_t v18 = *(unsigned __int8 *)(v12 + 55);
        }
        else {
          size_t v18 = *(void *)(v12 + 40);
        }
        if (v17 >= 0) {
          std::string::size_type v19 = (const void *)(v12 + 32);
        }
        else {
          std::string::size_type v19 = *(const void **)(v12 + 32);
        }
        if (v15 >= v18) {
          size_t v20 = v18;
        }
        else {
          size_t v20 = v15;
        }
        int v21 = memcmp(v19, a2, v20);
        BOOL v22 = v18 < v15;
        if (v21) {
          BOOL v22 = v21 < 0;
        }
        BOOL v23 = !v22;
        if (v22) {
          v24 = (uint64_t *)(v12 + 8);
        }
        else {
          v24 = (uint64_t *)v12;
        }
        if (v23) {
          uint64_t v16 = v12;
        }
        uint64_t v12 = *v24;
      }
      while (*v24);
      if (v16 == v11) {
        return 0;
      }
      int v25 = *(char *)(v16 + 55);
      size_t v26 = v25 >= 0 ? *(unsigned __int8 *)(v16 + 55) : *(void *)(v16 + 40);
      unsigned __int8 v27 = v25 >= 0 ? (const void *)(v16 + 32) : *(const void **)(v16 + 32);
      size_t v28 = v26 >= v15 ? v15 : v26;
      int v29 = memcmp(a2, v27, v28);
      BOOL v30 = v15 < v26;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      if (v30)
      {
        return 0;
      }
      else
      {
        int v31 = *(_DWORD *)(v16 + 64);
        *a5 = sub_1855B8(a1, &v31);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_17BEB0(uint64_t a1, void *a2, uint64_t a3, void **a4, uint64_t *a5)
{
  result = *a4;
  if (*a4)
  {
    if (result)
    {
      long long v9 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v9 + 56))(v9);
      (*(void (**)(void *))(*(void *)v9 + 64))(v9);
      uint64_t v10 = *(void *)(a1 + 72);
      uint64_t v13 = *(void *)(v10 + 8);
      uint64_t v11 = v10 + 8;
      uint64_t v12 = v13;
      if (!v13) {
        return 0;
      }
      int v14 = *((char *)a2 + 23);
      if (v14 >= 0) {
        size_t v15 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v15 = a2[1];
      }
      if (v14 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v16 = v11;
      do
      {
        int v17 = *(char *)(v12 + 55);
        if (v17 >= 0) {
          size_t v18 = *(unsigned __int8 *)(v12 + 55);
        }
        else {
          size_t v18 = *(void *)(v12 + 40);
        }
        if (v17 >= 0) {
          std::string::size_type v19 = (const void *)(v12 + 32);
        }
        else {
          std::string::size_type v19 = *(const void **)(v12 + 32);
        }
        if (v15 >= v18) {
          size_t v20 = v18;
        }
        else {
          size_t v20 = v15;
        }
        int v21 = memcmp(v19, a2, v20);
        BOOL v22 = v18 < v15;
        if (v21) {
          BOOL v22 = v21 < 0;
        }
        BOOL v23 = !v22;
        if (v22) {
          v24 = (uint64_t *)(v12 + 8);
        }
        else {
          v24 = (uint64_t *)v12;
        }
        if (v23) {
          uint64_t v16 = v12;
        }
        uint64_t v12 = *v24;
      }
      while (*v24);
      if (v16 == v11) {
        return 0;
      }
      int v25 = *(char *)(v16 + 55);
      size_t v26 = v25 >= 0 ? *(unsigned __int8 *)(v16 + 55) : *(void *)(v16 + 40);
      unsigned __int8 v27 = v25 >= 0 ? (const void *)(v16 + 32) : *(const void **)(v16 + 32);
      size_t v28 = v26 >= v15 ? v15 : v26;
      int v29 = memcmp(a2, v27, v28);
      BOOL v30 = v15 < v26;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      if (v30)
      {
        return 0;
      }
      else
      {
        int v31 = *(_DWORD *)(v16 + 64);
        *a5 = sub_18984C(a1, &v31);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_17C0E8(uint64_t a1, void *a2, uint64_t a3, void **a4, uint64_t *a5)
{
  result = *a4;
  if (*a4)
  {
    if (result)
    {
      long long v9 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v9 + 56))(v9);
      (*(void (**)(void *))(*(void *)v9 + 64))(v9);
      uint64_t v10 = *(void *)(a1 + 72);
      uint64_t v13 = *(void *)(v10 + 8);
      uint64_t v12 = v10 + 8;
      uint64_t v11 = v13;
      if (!v13) {
        return 0;
      }
      int v14 = *((char *)a2 + 23);
      if (v14 >= 0) {
        size_t v15 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v15 = a2[1];
      }
      if (v14 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v16 = v12;
      do
      {
        int v17 = *(char *)(v11 + 55);
        if (v17 >= 0) {
          size_t v18 = *(unsigned __int8 *)(v11 + 55);
        }
        else {
          size_t v18 = *(void *)(v11 + 40);
        }
        if (v17 >= 0) {
          std::string::size_type v19 = (const void *)(v11 + 32);
        }
        else {
          std::string::size_type v19 = *(const void **)(v11 + 32);
        }
        if (v15 >= v18) {
          size_t v20 = v18;
        }
        else {
          size_t v20 = v15;
        }
        int v21 = memcmp(v19, a2, v20);
        BOOL v22 = v18 < v15;
        if (v21) {
          BOOL v22 = v21 < 0;
        }
        BOOL v23 = !v22;
        if (v22) {
          v24 = (uint64_t *)(v11 + 8);
        }
        else {
          v24 = (uint64_t *)v11;
        }
        if (v23) {
          uint64_t v16 = v11;
        }
        uint64_t v11 = *v24;
      }
      while (*v24);
      if (v16 == v12) {
        return 0;
      }
      int v25 = *(char *)(v16 + 55);
      size_t v26 = v25 >= 0 ? *(unsigned __int8 *)(v16 + 55) : *(void *)(v16 + 40);
      unsigned __int8 v27 = v25 >= 0 ? (const void *)(v16 + 32) : *(const void **)(v16 + 32);
      size_t v28 = v26 >= v15 ? v15 : v26;
      int v29 = memcmp(a2, v27, v28);
      BOOL v30 = v15 < v26;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      if (v30)
      {
        return 0;
      }
      else
      {
        int v31 = *(_DWORD *)(v16 + 64);
        *a5 = sub_18DC40(a1, &v31);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

uint64_t sub_17C314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(v5 + 8);
  uint64_t v6 = v5 + 8;
  uint64_t v7 = v8;
  if (!v8) {
    return 0;
  }
  int v11 = *(char *)(a2 + 23);
  size_t v12 = v11 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
  uint64_t v13 = v11 >= 0 ? (const void *)a2 : *(const void **)a2;
  uint64_t v14 = v6;
  do
  {
    int v15 = *(char *)(v7 + 55);
    if (v15 >= 0) {
      size_t v16 = *(unsigned __int8 *)(v7 + 55);
    }
    else {
      size_t v16 = *(void *)(v7 + 40);
    }
    if (v15 >= 0) {
      int v17 = (const void *)(v7 + 32);
    }
    else {
      int v17 = *(const void **)(v7 + 32);
    }
    if (v12 >= v16) {
      size_t v18 = v16;
    }
    else {
      size_t v18 = v12;
    }
    int v19 = memcmp(v17, v13, v18);
    BOOL v20 = v16 < v12;
    if (v19) {
      BOOL v20 = v19 < 0;
    }
    BOOL v21 = !v20;
    if (v20) {
      BOOL v22 = (uint64_t *)(v7 + 8);
    }
    else {
      BOOL v22 = (uint64_t *)v7;
    }
    if (v21) {
      uint64_t v14 = v7;
    }
    uint64_t v7 = *v22;
  }
  while (*v22);
  if (v14 == v6) {
    return 0;
  }
  int v23 = *(char *)(v14 + 55);
  size_t v24 = v23 >= 0 ? *(unsigned __int8 *)(v14 + 55) : *(void *)(v14 + 40);
  int v25 = v23 >= 0 ? (const void *)(v14 + 32) : *(const void **)(v14 + 32);
  size_t v26 = v24 >= v12 ? v12 : v24;
  int v27 = memcmp(v13, v25, v26);
  BOOL v28 = v12 < v24;
  if (v27) {
    BOOL v28 = v27 < 0;
  }
  if (v28) {
    return 0;
  }
  int v30 = *(_DWORD *)(v14 + 64);
  *a5 = sub_17C480(a1, &v30);
  return 1;
}

uint64_t sub_17C480(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0x7D0:
      operator new();
    case 0x7D1:
      operator new();
    case 0x7D2:
      operator new();
    case 0x7D3:
      operator new();
    case 0x7D4:
      operator new();
    case 0x7D5:
      operator new();
    case 0x7D6:
      operator new();
    case 0x7D7:
      operator new();
    case 0x7D8:
      operator new();
    case 0x7D9:
      operator new();
    case 0x7DA:
      operator new();
    case 0x7DB:
      operator new();
    case 0x7DC:
      operator new();
    case 0x7DD:
      operator new();
    case 0x7DE:
      operator new();
    case 0x7DF:
      operator new();
    case 0x7E0:
      operator new();
    case 0x7E1:
      operator new();
    case 0x7E2:
      operator new();
    case 0x7E3:
      operator new();
    case 0x7E4:
      operator new();
    case 0x7E5:
      operator new();
    case 0x7E6:
      operator new();
    case 0x7E7:
      operator new();
    case 0x7E8:
      operator new();
    case 0x7E9:
      operator new();
    case 0x7EA:
      operator new();
    case 0x7EB:
      operator new();
    case 0x7EC:
      operator new();
    case 0x7ED:
      operator new();
    case 0x7EE:
      operator new();
    case 0x7EF:
      operator new();
    case 0x7F0:
      operator new();
    case 0x7F1:
      operator new();
    case 0x7F2:
      operator new();
    case 0x7F3:
      operator new();
    case 0x7F4:
      operator new();
    case 0x7F5:
      operator new();
    case 0x7F6:
      operator new();
    case 0x7F7:
      operator new();
    case 0x7F8:
      operator new();
    case 0x7F9:
      operator new();
    case 0x7FA:
      operator new();
    case 0x7FB:
      operator new();
    case 0x7FC:
      operator new();
    case 0x7FD:
      operator new();
    case 0x7FE:
      operator new();
    case 0x7FF:
      operator new();
    case 0x800:
      operator new();
    case 0x801:
      operator new();
    case 0x802:
      operator new();
    case 0x803:
      operator new();
    case 0x804:
      operator new();
    case 0x805:
      operator new();
    case 0x806:
      operator new();
    case 0x807:
      operator new();
    case 0x808:
      operator new();
    case 0x809:
      operator new();
    case 0x80A:
      operator new();
    case 0x80B:
      operator new();
    case 0x80C:
      operator new();
    case 0x80D:
      operator new();
    default:
      switch(*a2)
      {
        case 0x418:
          operator new();
        case 0x419:
          operator new();
        case 0x41A:
          operator new();
        case 0x41B:
          operator new();
        case 0x41C:
          operator new();
        case 0x41D:
          operator new();
        case 0x41E:
          operator new();
        case 0x41F:
          operator new();
        case 0x420:
          operator new();
        case 0x421:
          operator new();
        case 0x422:
          operator new();
        case 0x423:
          operator new();
        case 0x424:
          operator new();
        case 0x425:
          operator new();
        case 0x426:
          operator new();
        case 0x427:
          operator new();
        case 0x428:
          operator new();
        case 0x429:
          operator new();
        case 0x42A:
          operator new();
        case 0x42B:
          operator new();
        case 0x42C:
          operator new();
        case 0x42D:
          operator new();
        case 0x42E:
          operator new();
        case 0x42F:
          operator new();
        case 0x430:
          operator new();
        case 0x431:
          operator new();
        case 0x432:
          operator new();
        case 0x433:
          operator new();
        case 0x434:
          operator new();
        case 0x435:
          operator new();
        case 0x436:
          operator new();
        case 0x437:
          operator new();
        case 0x438:
          operator new();
        case 0x439:
          operator new();
        case 0x43A:
          operator new();
        case 0x43B:
          operator new();
        default:
          return 0;
      }
  }
}

void sub_17DAA4()
{
}

double sub_17DAB8(uint64_t a1)
{
  return **(double **)(a1 + 8) + (*(double *)(a1 + 16) + **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_17DAE0()
{
  return 117;
}

void sub_17DAE8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)/t)");
}

double sub_17DB14(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + (*a2 + *a3) / *a4;
}

void sub_17DB38()
{
}

double sub_17DB4C(uint64_t a1)
{
  return **(double **)(a1 + 8) + (*(double *)(a1 + 16) + **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_17DB74()
{
  return 117;
}

void sub_17DB7C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)*t)");
}

double sub_17DBA8(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + (*a2 + *a3) * *a4;
}

void sub_17DBCC()
{
}

double sub_17DBE0(uint64_t a1)
{
  return **(double **)(a1 + 8) + (*(double *)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_17DC08()
{
  return 117;
}

void sub_17DC10(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)/t)");
}

double sub_17DC3C(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + (*a2 - *a3) / *a4;
}

void sub_17DC60()
{
}

double sub_17DC74(uint64_t a1)
{
  return **(double **)(a1 + 8) + (*(double *)(a1 + 16) - **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_17DC9C()
{
  return 117;
}

void sub_17DCA4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)*t)");
}

double sub_17DCD0(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + (*a2 - *a3) * *a4;
}

void sub_17DCF4()
{
}

double sub_17DD08(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) * **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_17DD30()
{
  return 117;
}

void sub_17DD38(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)/t)");
}

double sub_17DD64(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + *a2 * *a3 / *a4;
}

void sub_17DD88()
{
}

double sub_17DD9C(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) * **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_17DDC4()
{
  return 117;
}

void sub_17DDCC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)*t)");
}

double sub_17DDF8(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + *a2 * *a3 * *a4;
}

void sub_17DE1C()
{
}

double sub_17DE30(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) / **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_17DE58()
{
  return 117;
}

void sub_17DE60(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)+t)");
}

double sub_17DE8C(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + *a2 / *a3 + *a4;
}

void sub_17DEB0()
{
}

double sub_17DEC4(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) / **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_17DEEC()
{
  return 117;
}

void sub_17DEF4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)/t)");
}

double sub_17DF20(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + *a2 / *a3 / *a4;
}

void sub_17DF44()
{
}

double sub_17DF58(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) / **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_17DF80()
{
  return 117;
}

void sub_17DF88(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)*t)");
}

double sub_17DFB4(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + *a2 / *a3 * *a4;
}

void sub_17DFD8()
{
}

double sub_17DFEC(uint64_t a1)
{
  return **(double **)(a1 + 8) - (*(double *)(a1 + 16) + **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_17E014()
{
  return 117;
}

void sub_17E01C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)/t)");
}

double sub_17E048(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - (*a2 + *a3) / *a4;
}

void sub_17E06C()
{
}

double sub_17E080(uint64_t a1)
{
  return **(double **)(a1 + 8) - (*(double *)(a1 + 16) + **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_17E0A8()
{
  return 117;
}

void sub_17E0B0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)*t)");
}

double sub_17E0DC(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - (*a2 + *a3) * *a4;
}

void sub_17E100()
{
}

double sub_17E114(uint64_t a1)
{
  return **(double **)(a1 + 8) - (*(double *)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_17E13C()
{
  return 117;
}

void sub_17E144(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)/t)");
}

double sub_17E170(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - (*a2 - *a3) / *a4;
}

void sub_17E194()
{
}

double sub_17E1A8(uint64_t a1)
{
  return **(double **)(a1 + 8) - (*(double *)(a1 + 16) - **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_17E1D0()
{
  return 117;
}

void sub_17E1D8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)*t)");
}

double sub_17E204(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - (*a2 - *a3) * *a4;
}

void sub_17E228()
{
}

double sub_17E23C(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) * **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_17E264()
{
  return 117;
}

void sub_17E26C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)/t)");
}

double sub_17E298(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - *a2 * *a3 / *a4;
}

void sub_17E2BC()
{
}

double sub_17E2D0(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) * **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_17E2F8()
{
  return 117;
}

void sub_17E300(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)*t)");
}

double sub_17E32C(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - *a2 * *a3 * *a4;
}

void sub_17E350()
{
}

double sub_17E364(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) / **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_17E38C()
{
  return 117;
}

void sub_17E394(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)/t)");
}

double sub_17E3C0(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - *a2 / *a3 / *a4;
}

void sub_17E3E4()
{
}

double sub_17E3F8(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) / **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_17E420()
{
  return 117;
}

void sub_17E428(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)*t)");
}

double sub_17E454(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - *a2 / *a3 * *a4;
}

void sub_17E478()
{
}

double sub_17E48C(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_17E4B4()
{
  return 117;
}

void sub_17E4BC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)*t)-t");
}

double sub_17E4E8(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 + *a2) * *a3 - *a4;
}

void sub_17E50C()
{
}

double sub_17E520(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_17E548()
{
  return 117;
}

void sub_17E550(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)*t)-t");
}

double sub_17E57C(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 - *a2) * *a3 - *a4;
}

void sub_17E5A0()
{
}

double sub_17E5B4(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_17E5DC()
{
  return 117;
}

void sub_17E5E4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)-t");
}

double sub_17E610(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 * *a3 - *a4;
}

void sub_17E634()
{
}

double sub_17E648(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_17E670()
{
  return 117;
}

void sub_17E678(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)*t)-t");
}

double sub_17E6A4(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / *a2 * *a3 - *a4;
}

void sub_17E6C8()
{
}

double sub_17E6DC(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_17E704()
{
  return 117;
}

void sub_17E70C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)/t)-t");
}

double sub_17E738(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 + *a2) / *a3 - *a4;
}

void sub_17E75C()
{
}

double sub_17E770(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_17E798()
{
  return 117;
}

void sub_17E7A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)/t)-t");
}

double sub_17E7CC(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 - *a2) / *a3 - *a4;
}

void sub_17E7F0()
{
}

double sub_17E804(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_17E82C()
{
  return 117;
}

void sub_17E834(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)/t)-t");
}

double sub_17E860(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 / *a3 - *a4;
}

void sub_17E884()
{
}

double sub_17E898(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_17E8C0()
{
  return 117;
}

void sub_17E8C8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)/t)-t");
}

double sub_17E8F4(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / *a2 / *a3 - *a4;
}

void sub_17E918()
{
}

double sub_17E92C(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_17E954()
{
  return 117;
}

void sub_17E95C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t*t)");
}

double sub_17E988(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 + *a3 * *a4;
}

void sub_17E9AC()
{
}

double sub_17E9C0(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_17E9E8()
{
  return 117;
}

void sub_17E9F0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t*t)");
}

double sub_17EA1C(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 - *a3 * *a4;
}

void sub_17EA40()
{
}

double sub_17EA54(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_17EA7C()
{
  return 117;
}

void sub_17EA84(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t/t)");
}

double sub_17EAB0(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 + *a3 / *a4;
}

void sub_17EAD4()
{
}

double sub_17EAE8(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_17EB10()
{
  return 117;
}

void sub_17EB18(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t/t)");
}

double sub_17EB44(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 - *a3 / *a4;
}

void sub_17EB68()
{
}

double sub_17EB7C(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_17EBA4()
{
  return 117;
}

void sub_17EBAC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t/t)");
}

double sub_17EBD8(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / *a2 + *a3 / *a4;
}

void sub_17EBFC()
{
}

double sub_17EC10(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_17EC38()
{
  return 117;
}

void sub_17EC40(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t/t)");
}

double sub_17EC6C(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / *a2 - *a3 / *a4;
}

void sub_17EC90()
{
}

double sub_17ECA4(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_17ECCC()
{
  return 117;
}

void sub_17ECD4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t*t)");
}

double sub_17ED00(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / *a2 - *a3 * *a4;
}

void sub_17ED24()
{
}

double sub_17ED38(uint64_t a1)
{
  return **(double **)(a1 + 8) / (*(double *)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_17ED60()
{
  return 117;
}

void sub_17ED68(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t+(t*t))");
}

double sub_17ED94(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / (*a2 + *a3 * *a4);
}

void sub_17EDB8()
{
}

double sub_17EDCC(uint64_t a1)
{
  return **(double **)(a1 + 8) / (*(double *)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_17EDF4()
{
  return 117;
}

void sub_17EDFC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t-(t*t))");
}

double sub_17EE28(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / (*a2 - *a3 * *a4);
}

void sub_17EE4C()
{
}

double sub_17EE60(uint64_t a1)
{
  return **(double **)(a1 + 8) * (*(double *)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_17EE88()
{
  return 117;
}

void sub_17EE90(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t+(t*t))");
}

double sub_17EEBC(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * (*a2 + *a3 * *a4);
}

void sub_17EEE0()
{
}

double sub_17EEF4(uint64_t a1)
{
  return **(double **)(a1 + 8) * (*(double *)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_17EF1C()
{
  return 117;
}

void sub_17EF24(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t-(t*t))");
}

double sub_17EF50(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * (*a2 - *a3 * *a4);
}

void sub_17EF74()
{
}

double sub_17EF88(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_17EFB0()
{
  return 117;
}

void sub_17EFB8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t*t)");
}

double sub_17EFE4(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + *a2 - *a3 * *a4;
}

void sub_17F008()
{
}

double sub_17F01C(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_17F044()
{
  return 117;
}

void sub_17F04C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t/t)");
}

double sub_17F078(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + *a2 - *a3 / *a4;
}

void sub_17F09C()
{
}

double sub_17F0B0(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_17F0D8()
{
  return 117;
}

void sub_17F0E0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t*t)");
}

double sub_17F10C(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + *a2 + *a3 * *a4;
}

void sub_17F130()
{
}

double sub_17F144(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_17F16C()
{
  return 117;
}

void sub_17F174(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t/t)");
}

double sub_17F1A0(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + *a2 + *a3 / *a4;
}

void sub_17F1C4()
{
}

double sub_17F1D8(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_17F200()
{
  return 117;
}

void sub_17F208(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t*t)");
}

double sub_17F234(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - *a2 + *a3 * *a4;
}

void sub_17F258()
{
}

double sub_17F26C(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_17F294()
{
  return 117;
}

void sub_17F29C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t/t)");
}

double sub_17F2C8(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - *a2 + *a3 / *a4;
}

void sub_17F2EC()
{
}

double sub_17F300(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_17F328()
{
  return 117;
}

void sub_17F330(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t*t)");
}

double sub_17F35C(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - *a2 - *a3 * *a4;
}

void sub_17F380()
{
}

double sub_17F394(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_17F3BC()
{
  return 117;
}

void sub_17F3C4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t/t)");
}

double sub_17F3F0(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - *a2 - *a3 / *a4;
}

void sub_17F414()
{
}

double sub_17F428(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_17F450()
{
  return 117;
}

void sub_17F458(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t-t)");
}

double sub_17F484(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + *a2 - (*a3 - *a4);
}

void sub_17F4A8()
{
}

double sub_17F4BC(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_17F4E4()
{
  return 117;
}

void sub_17F4EC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t-t)");
}

double sub_17F518(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + *a2 + *a3 - *a4;
}

void sub_17F53C()
{
}

double sub_17F550(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_17F578()
{
  return 117;
}

void sub_17F580(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t+t)");
}

double sub_17F5AC(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + *a2 + *a3 + *a4;
}

void sub_17F5D0()
{
}

double sub_17F5E4(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_17F60C()
{
  return 117;
}

void sub_17F614(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t-t)");
}

double sub_17F640(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 + *a2) * (*a3 - *a4);
}

void sub_17F664()
{
}

double sub_17F678(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_17F6A0()
{
  return 117;
}

void sub_17F6A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t-t)");
}

double sub_17F6D4(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 + *a2) / (*a3 - *a4);
}

void sub_17F6F8()
{
}

double sub_17F70C(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) - (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_17F734()
{
  return 117;
}

void sub_17F73C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t+t)");
}

double sub_17F768(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - *a2 - (*a3 + *a4);
}

void sub_17F78C()
{
}

double sub_17F7A0(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_17F7C8()
{
  return 117;
}

void sub_17F7D0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t+t)");
}

double sub_17F7FC(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - *a2 + *a3 + *a4;
}

void sub_17F820()
{
}

double sub_17F834(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_17F85C()
{
  return 117;
}

void sub_17F864(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t+t)");
}

double sub_17F890(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 - *a2) * (*a3 + *a4);
}

void sub_17F8B4()
{
}

double sub_17F8C8(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_17F8F0()
{
  return 117;
}

void sub_17F8F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t+t)");
}

double sub_17F924(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 - *a2) / (*a3 + *a4);
}

void sub_17F948()
{
}

double sub_17F95C(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) - (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_17F984()
{
  return 117;
}

void sub_17F98C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t+t)");
}

double sub_17F9B8(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 - (*a3 + *a4);
}

void sub_17F9DC()
{
}

double sub_17F9F0(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) - (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_17FA18()
{
  return 117;
}

void sub_17FA20(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t+t)");
}

double sub_17FA4C(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / *a2 - (*a3 + *a4);
}

void sub_17FA70()
{
}

double sub_17FA84(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_17FAAC()
{
  return 117;
}

void sub_17FAB4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t+t)");
}

double sub_17FAE0(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 + *a3 + *a4;
}

void sub_17FB04()
{
}

double sub_17FB18(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_17FB40()
{
  return 117;
}

void sub_17FB48(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t+t)");
}

double sub_17FB74(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / *a2 + *a3 + *a4;
}

void sub_17FB98()
{
}

double sub_17FBAC(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_17FBD4()
{
  return 117;
}

void sub_17FBDC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t-t)");
}

double sub_17FC08(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 + *a3 - *a4;
}

void sub_17FC2C()
{
}

double sub_17FC40(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_17FC68()
{
  return 117;
}

void sub_17FC70(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t-t)");
}

double sub_17FC9C(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / *a2 + *a3 - *a4;
}

void sub_17FCC0()
{
}

double sub_17FCD4(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_17FCFC()
{
  return 117;
}

void sub_17FD04(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t-t)");
}

double sub_17FD30(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 - (*a3 - *a4);
}

void sub_17FD54()
{
}

double sub_17FD68(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_17FD90()
{
  return 117;
}

void sub_17FD98(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t-t)");
}

double sub_17FDC4(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / *a2 - (*a3 - *a4);
}

void sub_17FDE8()
{
}

double sub_17FDFC(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_17FE24()
{
  return 117;
}

void sub_17FE2C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t*t)");
}

double sub_17FE58(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 + *a2) * (*a3 * *a4);
}

void sub_17FE7C()
{
}

double sub_17FE90(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_17FEB8()
{
  return 117;
}

void sub_17FEC0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t/t)");
}

double sub_17FEEC(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 + *a2) * (*a3 / *a4);
}

void sub_17FF10()
{
}

double sub_17FF24(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_17FF4C()
{
  return 117;
}

void sub_17FF54(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t*t)");
}

double sub_17FF80(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 + *a2) / (*a3 * *a4);
}

void sub_17FFA4()
{
}

double sub_17FFB8(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_17FFE0()
{
  return 117;
}

void sub_17FFE8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t/t)");
}

double sub_180014(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 + *a2) / (*a3 / *a4);
}

void sub_180038()
{
}

double sub_18004C(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_180074()
{
  return 117;
}

void sub_18007C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t*t)");
}

double sub_1800A8(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 - *a2) / (*a3 * *a4);
}

void sub_1800CC()
{
}

double sub_1800E0(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_180108()
{
  return 117;
}

void sub_180110(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t/t)");
}

double sub_18013C(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 - *a2) / (*a3 / *a4);
}

void sub_180160()
{
}

double sub_180174(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_18019C()
{
  return 117;
}

void sub_1801A4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t*t)");
}

double sub_1801D0(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 - *a2) * (*a3 * *a4);
}

void sub_1801F4()
{
}

double sub_180208(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_180230()
{
  return 117;
}

void sub_180238(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t/t)");
}

double sub_180264(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 - *a2) * (*a3 / *a4);
}

void sub_180288()
{
}

double sub_18029C(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1802C4()
{
  return 117;
}

void sub_1802CC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t+t)");
}

double sub_1802F8(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 * (*a3 + *a4);
}

void sub_18031C()
{
}

double sub_180330(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_180358()
{
  return 117;
}

void sub_180360(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t+t)");
}

double sub_18038C(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / *a2 * (*a3 + *a4);
}

void sub_1803B0()
{
}

double sub_1803C4(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1803EC()
{
  return 117;
}

void sub_1803F4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t+t)");
}

double sub_180420(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 / (*a3 + *a4);
}

void sub_180444()
{
}

double sub_180458(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_180480()
{
  return 117;
}

void sub_180488(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t+t)");
}

double sub_1804B4(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / *a2 / (*a3 + *a4);
}

void sub_1804D8()
{
}

double sub_1804EC(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_180514()
{
  return 117;
}

void sub_18051C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t-t)");
}

void sub_18054C()
{
}

double sub_180560(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_180588()
{
  return 117;
}

void sub_180590(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t-t)");
}

double sub_1805BC(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / *a2 / (*a3 - *a4);
}

void sub_1805E0()
{
}

double sub_1805F4(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_18061C()
{
  return 117;
}

void sub_180624(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t-t)");
}

double sub_180650(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 * (*a3 - *a4);
}

void sub_180674()
{
}

double sub_180688(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1806B0()
{
  return 117;
}

void sub_1806B8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t*t)");
}

double sub_1806E4(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 / (*a3 * *a4);
}

void sub_180708()
{
}

double sub_18071C(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_180744()
{
  return 117;
}

void sub_18074C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t/t)");
}

double sub_180778(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / *a2 * (*a3 / *a4);
}

void sub_18079C()
{
}

double sub_1807B0(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1807D8()
{
  return 117;
}

void sub_1807E0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t-t)");
}

double sub_18080C(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / *a2 * (*a3 - *a4);
}

void sub_180830()
{
}

double sub_180844(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) * (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_18086C()
{
  return 117;
}

void sub_180874(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t*t)");
}

double sub_1808A0(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 * (*a3 * *a4);
}

void sub_1808C4()
{
}

double sub_1808D8(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_180900()
{
  return 117;
}

void sub_180908(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t*(t/t))");
}

double sub_180934(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + *a2 * (*a3 / *a4);
}

void sub_180958()
{
}

double sub_18096C(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_180994()
{
  return 117;
}

void sub_18099C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t*(t/t))");
}

double sub_1809C8(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - *a2 * (*a3 / *a4);
}

void sub_1809EC()
{
}

double sub_180A00(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_180A28()
{
  return 117;
}

void sub_180A30(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t/(t*t))");
}

double sub_180A5C(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 + *a2 / (*a3 * *a4);
}

void sub_180A80()
{
}

double sub_180A94(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_180ABC()
{
  return 117;
}

void sub_180AC4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t/(t*t))");
}

double sub_180AF0(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - *a2 / (*a3 * *a4);
}

void sub_180B14()
{
}

double sub_180B28(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_180B50()
{
  return 117;
}

void sub_180B58(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)*t");
}

double sub_180B84(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 - *a2 - *a3) * *a4;
}

void sub_180BA8()
{
}

double sub_180BBC(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_180BE4()
{
  return 117;
}

void sub_180BEC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)/t");
}

double sub_180C18(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 - *a2 - *a3) / *a4;
}

void sub_180C3C()
{
}

double sub_180C50(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_180C78()
{
  return 117;
}

void sub_180C80(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)*t");
}

double sub_180CAC(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 - *a2 + *a3) * *a4;
}

void sub_180CD0()
{
}

double sub_180CE4(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_180D0C()
{
  return 117;
}

void sub_180D14(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)/t");
}

double sub_180D40(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 - *a2 + *a3) / *a4;
}

void sub_180D64()
{
}

double sub_180D78(uint64_t a1)
{
  return *(double *)(a1 + 32) * (**(double **)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24));
}

uint64_t sub_180DA0()
{
  return 117;
}

void sub_180DA8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))*t");
}

double sub_180DD4(double *a1, double *a2, double *a3, double *a4)
{
  return *a4 * (*a1 + *a2 - *a3);
}

void sub_180DF8()
{
}

double sub_180E0C(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_180E34()
{
  return 117;
}

void sub_180E3C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))/t");
}

double sub_180E68(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 + *a2 - *a3) / *a4;
}

void sub_180E8C()
{
}

double sub_180EA0(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_180EC8()
{
  return 117;
}

void sub_180ED0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t+t)");
}

double sub_180EFC(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 + *a2) / (*a3 + *a4);
}

void sub_180F20()
{
}

double sub_180F34(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_180F5C()
{
  return 117;
}

void sub_180F64(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t-t)");
}

double sub_180F90(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 - *a2) / (*a3 - *a4);
}

void sub_180FB4()
{
}

double sub_180FC8(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_180FF0()
{
  return 117;
}

void sub_180FF8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t+t)");
}

double sub_181024(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 + *a2) * (*a3 + *a4);
}

void sub_181048()
{
}

double sub_18105C(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_181084()
{
  return 117;
}

void sub_18108C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t-t)");
}

double sub_1810B8(double *a1, double *a2, double *a3, double *a4)
{
  return (*a1 - *a2) * (*a3 - *a4);
}

void sub_1810DC()
{
}

double sub_1810F0(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_181118()
{
  return 117;
}

void sub_181120(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t-t)");
}

double sub_18114C(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - *a2 + *a3 - *a4;
}

void sub_181170()
{
}

double sub_181184(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1811AC()
{
  return 117;
}

void sub_1811B4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t-t)");
}

double sub_1811E0(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 - *a2 - (*a3 - *a4);
}

void sub_181204()
{
}

double sub_181218(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_181240()
{
  return 117;
}

void sub_181248(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t*t)");
}

double sub_181274(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 / *a2 + *a3 * *a4;
}

void sub_181298()
{
}

double sub_1812AC(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) * **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1812D4()
{
  return 117;
}

void sub_1812DC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)/t");
}

double sub_181308(double *a1, double *a2, double *a3, double *a4)
{
  return *a1 * *a2 * *a3 / *a4;
}

uint64_t sub_181328(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0x7D0:
      operator new();
    case 0x7D1:
      operator new();
    case 0x7D2:
      operator new();
    case 0x7D3:
      operator new();
    case 0x7D4:
      operator new();
    case 0x7D5:
      operator new();
    case 0x7D6:
      operator new();
    case 0x7D7:
      operator new();
    case 0x7D8:
      operator new();
    case 0x7D9:
      operator new();
    case 0x7DA:
      operator new();
    case 0x7DB:
      operator new();
    case 0x7DC:
      operator new();
    case 0x7DD:
      operator new();
    case 0x7DE:
      operator new();
    case 0x7DF:
      operator new();
    case 0x7E0:
      operator new();
    case 0x7E1:
      operator new();
    case 0x7E2:
      operator new();
    case 0x7E3:
      operator new();
    case 0x7E4:
      operator new();
    case 0x7E5:
      operator new();
    case 0x7E6:
      operator new();
    case 0x7E7:
      operator new();
    case 0x7E8:
      operator new();
    case 0x7E9:
      operator new();
    case 0x7EA:
      operator new();
    case 0x7EB:
      operator new();
    case 0x7EC:
      operator new();
    case 0x7ED:
      operator new();
    case 0x7EE:
      operator new();
    case 0x7EF:
      operator new();
    case 0x7F0:
      operator new();
    case 0x7F1:
      operator new();
    case 0x7F2:
      operator new();
    case 0x7F3:
      operator new();
    case 0x7F4:
      operator new();
    case 0x7F5:
      operator new();
    case 0x7F6:
      operator new();
    case 0x7F7:
      operator new();
    case 0x7F8:
      operator new();
    case 0x7F9:
      operator new();
    case 0x7FA:
      operator new();
    case 0x7FB:
      operator new();
    case 0x7FC:
      operator new();
    case 0x7FD:
      operator new();
    case 0x7FE:
      operator new();
    case 0x7FF:
      operator new();
    case 0x800:
      operator new();
    case 0x801:
      operator new();
    case 0x802:
      operator new();
    case 0x803:
      operator new();
    case 0x804:
      operator new();
    case 0x805:
      operator new();
    case 0x806:
      operator new();
    case 0x807:
      operator new();
    case 0x808:
      operator new();
    case 0x809:
      operator new();
    case 0x80A:
      operator new();
    case 0x80B:
      operator new();
    case 0x80C:
      operator new();
    case 0x80D:
      operator new();
    default:
      switch(*a2)
      {
        case 0x418:
          operator new();
        case 0x419:
          operator new();
        case 0x41A:
          operator new();
        case 0x41B:
          operator new();
        case 0x41C:
          operator new();
        case 0x41D:
          operator new();
        case 0x41E:
          operator new();
        case 0x41F:
          operator new();
        case 0x420:
          operator new();
        case 0x421:
          operator new();
        case 0x422:
          operator new();
        case 0x423:
          operator new();
        case 0x424:
          operator new();
        case 0x425:
          operator new();
        case 0x426:
          operator new();
        case 0x427:
          operator new();
        case 0x428:
          operator new();
        case 0x429:
          operator new();
        case 0x42A:
          operator new();
        case 0x42B:
          operator new();
        case 0x42C:
          operator new();
        case 0x42D:
          operator new();
        case 0x42E:
          operator new();
        case 0x42F:
          operator new();
        case 0x430:
          operator new();
        case 0x431:
          operator new();
        case 0x432:
          operator new();
        case 0x433:
          operator new();
        case 0x434:
          operator new();
        case 0x435:
          operator new();
        case 0x436:
          operator new();
        case 0x437:
          operator new();
        case 0x438:
          operator new();
        case 0x439:
          operator new();
        case 0x43A:
          operator new();
        case 0x43B:
          operator new();
        default:
          return 0;
      }
  }
}

void sub_182954()
{
}

double sub_182968(uint64_t a1)
{
  return **(double **)(a1 + 8) + (*(double *)(a1 + 16) + **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_182990()
{
  return 114;
}

void sub_182998(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)/t)");
}

void sub_1829C8()
{
}

double sub_1829DC(uint64_t a1)
{
  return **(double **)(a1 + 8) + (*(double *)(a1 + 16) + **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_182A04()
{
  return 114;
}

void sub_182A0C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)*t)");
}

void sub_182A3C()
{
}

double sub_182A50(uint64_t a1)
{
  return **(double **)(a1 + 8) + (*(double *)(a1 + 16) - **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_182A78()
{
  return 114;
}

void sub_182A80(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)/t)");
}

void sub_182AB0()
{
}

double sub_182AC4(uint64_t a1)
{
  return **(double **)(a1 + 8) + (*(double *)(a1 + 16) - **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_182AEC()
{
  return 114;
}

void sub_182AF4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)*t)");
}

void sub_182B24()
{
}

double sub_182B38(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) * **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_182B60()
{
  return 114;
}

void sub_182B68(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)/t)");
}

void sub_182B98()
{
}

double sub_182BAC(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) * **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_182BD4()
{
  return 114;
}

void sub_182BDC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)*t)");
}

void sub_182C0C()
{
}

double sub_182C20(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) / **(double **)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_182C48()
{
  return 114;
}

void sub_182C50(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)+t)");
}

void sub_182C80()
{
}

double sub_182C94(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) / **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_182CBC()
{
  return 114;
}

void sub_182CC4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)/t)");
}

void sub_182CF4()
{
}

double sub_182D08(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) / **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_182D30()
{
  return 114;
}

void sub_182D38(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)*t)");
}

void sub_182D68()
{
}

double sub_182D7C(uint64_t a1)
{
  return **(double **)(a1 + 8) - (*(double *)(a1 + 16) + **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_182DA4()
{
  return 114;
}

void sub_182DAC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)/t)");
}

void sub_182DDC()
{
}

double sub_182DF0(uint64_t a1)
{
  return **(double **)(a1 + 8) - (*(double *)(a1 + 16) + **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_182E18()
{
  return 114;
}

void sub_182E20(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)*t)");
}

void sub_182E50()
{
}

double sub_182E64(uint64_t a1)
{
  return **(double **)(a1 + 8) - (*(double *)(a1 + 16) - **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_182E8C()
{
  return 114;
}

void sub_182E94(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)/t)");
}

void sub_182EC4()
{
}

double sub_182ED8(uint64_t a1)
{
  return **(double **)(a1 + 8) - (*(double *)(a1 + 16) - **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_182F00()
{
  return 114;
}

void sub_182F08(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)*t)");
}

void sub_182F38()
{
}

double sub_182F4C(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) * **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_182F74()
{
  return 114;
}

void sub_182F7C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)/t)");
}

void sub_182FAC()
{
}

double sub_182FC0(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) * **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_182FE8()
{
  return 114;
}

void sub_182FF0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)*t)");
}

void sub_183020()
{
}

double sub_183034(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) / **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_18305C()
{
  return 114;
}

void sub_183064(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)/t)");
}

void sub_183094()
{
}

double sub_1830A8(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) / **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1830D0()
{
  return 114;
}

void sub_1830D8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)*t)");
}

void sub_183108()
{
}

double sub_18311C(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) * **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_183144()
{
  return 114;
}

void sub_18314C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)*t)-t");
}

void sub_18317C()
{
}

double sub_183190(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) * **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1831B8()
{
  return 114;
}

void sub_1831C0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)*t)-t");
}

void sub_1831F0()
{
}

double sub_183204(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) * **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_18322C()
{
  return 114;
}

void sub_183234(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)-t");
}

void sub_183264()
{
}

double sub_183278(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) * **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1832A0()
{
  return 114;
}

void sub_1832A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)*t)-t");
}

void sub_1832D8()
{
}

double sub_1832EC(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) / **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_183314()
{
  return 114;
}

void sub_18331C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)/t)-t");
}

void sub_18334C()
{
}

double sub_183360(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) / **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_183388()
{
  return 114;
}

void sub_183390(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)/t)-t");
}

void sub_1833C0()
{
}

double sub_1833D4(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) / **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1833FC()
{
  return 114;
}

void sub_183404(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)/t)-t");
}

void sub_183434()
{
}

double sub_183448(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) / **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_183470()
{
  return 114;
}

void sub_183478(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)/t)-t");
}

void sub_1834A8()
{
}

double sub_1834BC(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1834E4()
{
  return 114;
}

void sub_1834EC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t*t)");
}

void sub_18351C()
{
}

double sub_183530(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_183558()
{
  return 114;
}

void sub_183560(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t*t)");
}

void sub_183590()
{
}

double sub_1835A4(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1835CC()
{
  return 114;
}

void sub_1835D4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t/t)");
}

void sub_183604()
{
}

double sub_183618(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) - **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_183640()
{
  return 114;
}

void sub_183648(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t/t)");
}

void sub_183678()
{
}

double sub_18368C(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1836B4()
{
  return 114;
}

void sub_1836BC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t/t)");
}

void sub_1836EC()
{
}

double sub_183700(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) - **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_183728()
{
  return 114;
}

void sub_183730(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t/t)");
}

void sub_183760()
{
}

double sub_183774(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_18379C()
{
  return 114;
}

void sub_1837A4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t*t)");
}

void sub_1837D4()
{
}

double sub_1837E8(uint64_t a1)
{
  return **(double **)(a1 + 8) / (*(double *)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_183810()
{
  return 114;
}

void sub_183818(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t+(t*t))");
}

void sub_183848()
{
}

double sub_18385C(uint64_t a1)
{
  return **(double **)(a1 + 8) / (*(double *)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_183884()
{
  return 114;
}

void sub_18388C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t-(t*t))");
}

void sub_1838BC()
{
}

double sub_1838D0(uint64_t a1)
{
  return **(double **)(a1 + 8) * (*(double *)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1838F8()
{
  return 114;
}

void sub_183900(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t+(t*t))");
}

void sub_183930()
{
}

double sub_183944(uint64_t a1)
{
  return **(double **)(a1 + 8) * (*(double *)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_18396C()
{
  return 114;
}

void sub_183974(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t-(t*t))");
}

void sub_1839A4()
{
}

double sub_1839B8(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1839E0()
{
  return 114;
}

void sub_1839E8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t*t)");
}

void sub_183A18()
{
}

double sub_183A2C(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_183A54()
{
  return 114;
}

void sub_183A5C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t/t)");
}

void sub_183A8C()
{
}

double sub_183AA0(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_183AC8()
{
  return 114;
}

void sub_183AD0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t*t)");
}

void sub_183B00()
{
}

double sub_183B14(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_183B3C()
{
  return 114;
}

void sub_183B44(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t/t)");
}

void sub_183B74()
{
}

double sub_183B88(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_183BB0()
{
  return 114;
}

void sub_183BB8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t*t)");
}

void sub_183BE8()
{
}

double sub_183BFC(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_183C24()
{
  return 114;
}

void sub_183C2C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t/t)");
}

void sub_183C5C()
{
}

double sub_183C70(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_183C98()
{
  return 114;
}

void sub_183CA0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t*t)");
}

void sub_183CD0()
{
}

double sub_183CE4(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_183D0C()
{
  return 114;
}

void sub_183D14(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t/t)");
}

void sub_183D44()
{
}

double sub_183D58(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) - (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_183D80()
{
  return 114;
}

void sub_183D88(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t-t)");
}

void sub_183DB8()
{
}

double sub_183DCC(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_183DF4()
{
  return 114;
}

void sub_183DFC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t-t)");
}

void sub_183E2C()
{
}

double sub_183E40(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_183E68()
{
  return 114;
}

void sub_183E70(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t+t)");
}

void sub_183EA0()
{
}

double sub_183EB4(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_183EDC()
{
  return 114;
}

void sub_183EE4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t-t)");
}

void sub_183F14()
{
}

double sub_183F28(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_183F50()
{
  return 114;
}

void sub_183F58(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t-t)");
}

void sub_183F88()
{
}

double sub_183F9C(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) - (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_183FC4()
{
  return 114;
}

void sub_183FCC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t+t)");
}

void sub_183FFC()
{
}

double sub_184010(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_184038()
{
  return 114;
}

void sub_184040(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t+t)");
}

void sub_184070()
{
}

double sub_184084(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1840AC()
{
  return 114;
}

void sub_1840B4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t+t)");
}

void sub_1840E4()
{
}

double sub_1840F8(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_184120()
{
  return 114;
}

void sub_184128(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t+t)");
}

void sub_184158()
{
}

double sub_18416C(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) - (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_184194()
{
  return 114;
}

void sub_18419C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t+t)");
}

void sub_1841CC()
{
}

double sub_1841E0(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) - (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_184208()
{
  return 114;
}

void sub_184210(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t+t)");
}

void sub_184240()
{
}

double sub_184254(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_18427C()
{
  return 114;
}

void sub_184284(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t+t)");
}

void sub_1842B4()
{
}

double sub_1842C8(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_1842F0()
{
  return 114;
}

void sub_1842F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t+t)");
}

void sub_184328()
{
}

double sub_18433C(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_184364()
{
  return 114;
}

void sub_18436C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t-t)");
}

void sub_18439C()
{
}

double sub_1843B0(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1843D8()
{
  return 114;
}

void sub_1843E0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t-t)");
}

void sub_184410()
{
}

double sub_184424(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) - (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_18444C()
{
  return 114;
}

void sub_184454(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t-t)");
}

void sub_184484()
{
}

double sub_184498(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) - (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1844C0()
{
  return 114;
}

void sub_1844C8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t-t)");
}

void sub_1844F8()
{
}

double sub_18450C(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_184534()
{
  return 114;
}

void sub_18453C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t*t)");
}

void sub_18456C()
{
}

double sub_184580(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_1845A8()
{
  return 114;
}

void sub_1845B0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t/t)");
}

void sub_1845E0()
{
}

double sub_1845F4(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_18461C()
{
  return 114;
}

void sub_184624(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t*t)");
}

void sub_184654()
{
}

double sub_184668(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_184690()
{
  return 114;
}

void sub_184698(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t/t)");
}

void sub_1846C8()
{
}

double sub_1846DC(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_184704()
{
  return 114;
}

void sub_18470C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t*t)");
}

void sub_18473C()
{
}

double sub_184750(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_184778()
{
  return 114;
}

void sub_184780(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t/t)");
}

void sub_1847B0()
{
}

double sub_1847C4(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1847EC()
{
  return 114;
}

void sub_1847F4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t*t)");
}

void sub_184824()
{
}

double sub_184838(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_184860()
{
  return 114;
}

void sub_184868(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t/t)");
}

void sub_184898()
{
}

double sub_1848AC(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) * (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1848D4()
{
  return 114;
}

void sub_1848DC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t+t)");
}

void sub_18490C()
{
}

double sub_184920(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) * (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_184948()
{
  return 114;
}

void sub_184950(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t+t)");
}

void sub_184980()
{
}

double sub_184994(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) / (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1849BC()
{
  return 114;
}

void sub_1849C4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t+t)");
}

void sub_1849F4()
{
}

double sub_184A08(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) / (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_184A30()
{
  return 114;
}

void sub_184A38(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t+t)");
}

void sub_184A68()
{
}

double sub_184A7C(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) / (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_184AA4()
{
  return 114;
}

void sub_184AAC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t-t)");
}

void sub_184ADC()
{
}

double sub_184AF0(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) / (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_184B18()
{
  return 114;
}

void sub_184B20(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t-t)");
}

void sub_184B50()
{
}

double sub_184B64(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) * (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_184B8C()
{
  return 114;
}

void sub_184B94(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t-t)");
}

void sub_184BC4()
{
}

double sub_184BD8(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) / (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_184C00()
{
  return 114;
}

void sub_184C08(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t*t)");
}

void sub_184C38()
{
}

double sub_184C4C(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) * (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_184C74()
{
  return 114;
}

void sub_184C7C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t/t)");
}

void sub_184CAC()
{
}

double sub_184CC0(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) * (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_184CE8()
{
  return 114;
}

void sub_184CF0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t-t)");
}

void sub_184D20()
{
}

double sub_184D34(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) * (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_184D5C()
{
  return 114;
}

void sub_184D64(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t*t)");
}

void sub_184D94()
{
}

double sub_184DA8(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) * (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_184DD0()
{
  return 114;
}

void sub_184DD8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t*(t/t))");
}

void sub_184E08()
{
}

double sub_184E1C(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) * (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_184E44()
{
  return 114;
}

void sub_184E4C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t*(t/t))");
}

void sub_184E7C()
{
}

double sub_184E90(uint64_t a1)
{
  return **(double **)(a1 + 8) + *(double *)(a1 + 16) / (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_184EB8()
{
  return 114;
}

void sub_184EC0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t/(t*t))");
}

void sub_184EF0()
{
}

double sub_184F04(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) / (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_184F2C()
{
  return 114;
}

void sub_184F34(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t/(t*t))");
}

void sub_184F64()
{
}

double sub_184F78(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_184FA0()
{
  return 114;
}

void sub_184FA8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)*t");
}

void sub_184FD8()
{
}

double sub_184FEC(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_185014()
{
  return 114;
}

void sub_18501C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)/t");
}

void sub_18504C()
{
}

double sub_185060(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_185088()
{
  return 114;
}

void sub_185090(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)*t");
}

void sub_1850C0()
{
}

double sub_1850D4(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_1850FC()
{
  return 114;
}

void sub_185104(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)/t");
}

void sub_185134()
{
}

double sub_185148(uint64_t a1)
{
  return **(double **)(a1 + 32) * (**(double **)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24));
}

uint64_t sub_185170()
{
  return 114;
}

void sub_185178(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))*t");
}

void sub_1851A8()
{
}

double sub_1851BC(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_1851E4()
{
  return 114;
}

void sub_1851EC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))/t");
}

void sub_18521C()
{
}

double sub_185230(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_185258()
{
  return 114;
}

void sub_185260(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t+t)");
}

void sub_185290()
{
}

double sub_1852A4(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1852CC()
{
  return 114;
}

void sub_1852D4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t-t)");
}

void sub_185304()
{
}

double sub_185318(uint64_t a1)
{
  return (**(double **)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_185340()
{
  return 114;
}

void sub_185348(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t+t)");
}

void sub_185378()
{
}

double sub_18538C(uint64_t a1)
{
  return (**(double **)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1853B4()
{
  return 114;
}

void sub_1853BC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t-t)");
}

void sub_1853EC()
{
}

double sub_185400(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_185428()
{
  return 114;
}

void sub_185430(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t-t)");
}

void sub_185460()
{
}

double sub_185474(uint64_t a1)
{
  return **(double **)(a1 + 8) - *(double *)(a1 + 16) - (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_18549C()
{
  return 114;
}

void sub_1854A4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t-t)");
}

void sub_1854D4()
{
}

double sub_1854E8(uint64_t a1)
{
  return **(double **)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_185510()
{
  return 114;
}

void sub_185518(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t*t)");
}

void sub_185548()
{
}

double sub_18555C(uint64_t a1)
{
  return **(double **)(a1 + 8) * *(double *)(a1 + 16) * **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_185584()
{
  return 114;
}

void sub_18558C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)/t");
}

uint64_t sub_1855B8(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0x7D0:
      operator new();
    case 0x7D1:
      operator new();
    case 0x7D2:
      operator new();
    case 0x7D3:
      operator new();
    case 0x7D4:
      operator new();
    case 0x7D5:
      operator new();
    case 0x7D6:
      operator new();
    case 0x7D7:
      operator new();
    case 0x7D8:
      operator new();
    case 0x7D9:
      operator new();
    case 0x7DA:
      operator new();
    case 0x7DB:
      operator new();
    case 0x7DC:
      operator new();
    case 0x7DD:
      operator new();
    case 0x7DE:
      operator new();
    case 0x7DF:
      operator new();
    case 0x7E0:
      operator new();
    case 0x7E1:
      operator new();
    case 0x7E2:
      operator new();
    case 0x7E3:
      operator new();
    case 0x7E4:
      operator new();
    case 0x7E5:
      operator new();
    case 0x7E6:
      operator new();
    case 0x7E7:
      operator new();
    case 0x7E8:
      operator new();
    case 0x7E9:
      operator new();
    case 0x7EA:
      operator new();
    case 0x7EB:
      operator new();
    case 0x7EC:
      operator new();
    case 0x7ED:
      operator new();
    case 0x7EE:
      operator new();
    case 0x7EF:
      operator new();
    case 0x7F0:
      operator new();
    case 0x7F1:
      operator new();
    case 0x7F2:
      operator new();
    case 0x7F3:
      operator new();
    case 0x7F4:
      operator new();
    case 0x7F5:
      operator new();
    case 0x7F6:
      operator new();
    case 0x7F7:
      operator new();
    case 0x7F8:
      operator new();
    case 0x7F9:
      operator new();
    case 0x7FA:
      operator new();
    case 0x7FB:
      operator new();
    case 0x7FC:
      operator new();
    case 0x7FD:
      operator new();
    case 0x7FE:
      operator new();
    case 0x7FF:
      operator new();
    case 0x800:
      operator new();
    case 0x801:
      operator new();
    case 0x802:
      operator new();
    case 0x803:
      operator new();
    case 0x804:
      operator new();
    case 0x805:
      operator new();
    case 0x806:
      operator new();
    case 0x807:
      operator new();
    case 0x808:
      operator new();
    case 0x809:
      operator new();
    case 0x80A:
      operator new();
    case 0x80B:
      operator new();
    case 0x80C:
      operator new();
    case 0x80D:
      operator new();
    default:
      switch(*a2)
      {
        case 0x418:
          operator new();
        case 0x419:
          operator new();
        case 0x41A:
          operator new();
        case 0x41B:
          operator new();
        case 0x41C:
          operator new();
        case 0x41D:
          operator new();
        case 0x41E:
          operator new();
        case 0x41F:
          operator new();
        case 0x420:
          operator new();
        case 0x421:
          operator new();
        case 0x422:
          operator new();
        case 0x423:
          operator new();
        case 0x424:
          operator new();
        case 0x425:
          operator new();
        case 0x426:
          operator new();
        case 0x427:
          operator new();
        case 0x428:
          operator new();
        case 0x429:
          operator new();
        case 0x42A:
          operator new();
        case 0x42B:
          operator new();
        case 0x42C:
          operator new();
        case 0x42D:
          operator new();
        case 0x42E:
          operator new();
        case 0x42F:
          operator new();
        case 0x430:
          operator new();
        case 0x431:
          operator new();
        case 0x432:
          operator new();
        case 0x433:
          operator new();
        case 0x434:
          operator new();
        case 0x435:
          operator new();
        case 0x436:
          operator new();
        case 0x437:
          operator new();
        case 0x438:
          operator new();
        case 0x439:
          operator new();
        case 0x43A:
          operator new();
        case 0x43B:
          operator new();
        default:
          return 0;
      }
  }
}

void sub_186BE8()
{
}

double sub_186BFC(uint64_t a1)
{
  return **(double **)(a1 + 8) + (**(double **)(a1 + 16) + *(double *)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_186C24()
{
  return 113;
}

void sub_186C2C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)/t)");
}

void sub_186C5C()
{
}

double sub_186C70(uint64_t a1)
{
  return **(double **)(a1 + 8) + (**(double **)(a1 + 16) + *(double *)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_186C98()
{
  return 113;
}

void sub_186CA0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)*t)");
}

void sub_186CD0()
{
}

double sub_186CE4(uint64_t a1)
{
  return **(double **)(a1 + 8) + (**(double **)(a1 + 16) - *(double *)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_186D0C()
{
  return 113;
}

void sub_186D14(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)/t)");
}

void sub_186D44()
{
}

double sub_186D58(uint64_t a1)
{
  return **(double **)(a1 + 8) + (**(double **)(a1 + 16) - *(double *)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_186D80()
{
  return 113;
}

void sub_186D88(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)*t)");
}

void sub_186DB8()
{
}

double sub_186DCC(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) * *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_186DF4()
{
  return 113;
}

void sub_186DFC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)/t)");
}

void sub_186E2C()
{
}

double sub_186E40(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) * *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_186E68()
{
  return 113;
}

void sub_186E70(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)*t)");
}

void sub_186EA0()
{
}

double sub_186EB4(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) / *(double *)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_186EDC()
{
  return 113;
}

void sub_186EE4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)+t)");
}

void sub_186F14()
{
}

double sub_186F28(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) / *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_186F50()
{
  return 113;
}

void sub_186F58(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)/t)");
}

void sub_186F88()
{
}

double sub_186F9C(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) / *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_186FC4()
{
  return 113;
}

void sub_186FCC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)*t)");
}

void sub_186FFC()
{
}

double sub_187010(uint64_t a1)
{
  return **(double **)(a1 + 8) - (**(double **)(a1 + 16) + *(double *)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_187038()
{
  return 113;
}

void sub_187040(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)/t)");
}

void sub_187070()
{
}

double sub_187084(uint64_t a1)
{
  return **(double **)(a1 + 8) - (**(double **)(a1 + 16) + *(double *)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_1870AC()
{
  return 113;
}

void sub_1870B4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)*t)");
}

void sub_1870E4()
{
}

double sub_1870F8(uint64_t a1)
{
  return **(double **)(a1 + 8) - (**(double **)(a1 + 16) - *(double *)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_187120()
{
  return 113;
}

void sub_187128(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)/t)");
}

void sub_187158()
{
}

double sub_18716C(uint64_t a1)
{
  return **(double **)(a1 + 8) - (**(double **)(a1 + 16) - *(double *)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_187194()
{
  return 113;
}

void sub_18719C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)*t)");
}

void sub_1871CC()
{
}

double sub_1871E0(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) * *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_187208()
{
  return 113;
}

void sub_187210(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)/t)");
}

void sub_187240()
{
}

double sub_187254(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) * *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_18727C()
{
  return 113;
}

void sub_187284(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)*t)");
}

void sub_1872B4()
{
}

double sub_1872C8(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) / *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1872F0()
{
  return 113;
}

void sub_1872F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)/t)");
}

void sub_187328()
{
}

double sub_18733C(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) / *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_187364()
{
  return 113;
}

void sub_18736C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)*t)");
}

void sub_18739C()
{
}

double sub_1873B0(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) * *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1873D8()
{
  return 113;
}

void sub_1873E0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)*t)-t");
}

void sub_187410()
{
}

double sub_187424(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) * *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_18744C()
{
  return 113;
}

void sub_187454(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)*t)-t");
}

void sub_187484()
{
}

double sub_187498(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) * *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1874C0()
{
  return 113;
}

void sub_1874C8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)-t");
}

void sub_1874F8()
{
}

double sub_18750C(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) * *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_187534()
{
  return 113;
}

void sub_18753C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)*t)-t");
}

void sub_18756C()
{
}

double sub_187580(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) / *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1875A8()
{
  return 113;
}

void sub_1875B0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)/t)-t");
}

void sub_1875E0()
{
}

double sub_1875F4(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) / *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_18761C()
{
  return 113;
}

void sub_187624(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)/t)-t");
}

void sub_187654()
{
}

double sub_187668(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) / *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_187690()
{
  return 113;
}

void sub_187698(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)/t)-t");
}

void sub_1876C8()
{
}

double sub_1876DC(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) / *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_187704()
{
  return 113;
}

void sub_18770C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)/t)-t");
}

void sub_18773C()
{
}

double sub_187750(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_187778()
{
  return 113;
}

void sub_187780(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t*t)");
}

void sub_1877B0()
{
}

double sub_1877C4(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) - *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1877EC()
{
  return 113;
}

void sub_1877F4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t*t)");
}

void sub_187824()
{
}

double sub_187838(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_187860()
{
  return 113;
}

void sub_187868(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t/t)");
}

void sub_187898()
{
}

double sub_1878AC(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) - *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1878D4()
{
  return 113;
}

void sub_1878DC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t/t)");
}

void sub_18790C()
{
}

double sub_187920(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_187948()
{
  return 113;
}

void sub_187950(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t/t)");
}

void sub_187980()
{
}

double sub_187994(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) - *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1879BC()
{
  return 113;
}

void sub_1879C4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t/t)");
}

void sub_1879F4()
{
}

double sub_187A08(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) - *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_187A30()
{
  return 113;
}

void sub_187A38(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t*t)");
}

void sub_187A68()
{
}

double sub_187A7C(uint64_t a1)
{
  return **(double **)(a1 + 8) / (**(double **)(a1 + 16) + *(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_187AA4()
{
  return 113;
}

void sub_187AAC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t+(t*t))");
}

void sub_187ADC()
{
}

double sub_187AF0(uint64_t a1)
{
  return **(double **)(a1 + 8) / (**(double **)(a1 + 16) - *(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_187B18()
{
  return 113;
}

void sub_187B20(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t-(t*t))");
}

void sub_187B50()
{
}

double sub_187B64(uint64_t a1)
{
  return **(double **)(a1 + 8) * (**(double **)(a1 + 16) + *(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_187B8C()
{
  return 113;
}

void sub_187B94(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t+(t*t))");
}

void sub_187BC4()
{
}

double sub_187BD8(uint64_t a1)
{
  return **(double **)(a1 + 8) * (**(double **)(a1 + 16) - *(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_187C00()
{
  return 113;
}

void sub_187C08(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t-(t*t))");
}

void sub_187C38()
{
}

double sub_187C4C(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_187C74()
{
  return 113;
}

void sub_187C7C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t*t)");
}

void sub_187CAC()
{
}

double sub_187CC0(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_187CE8()
{
  return 113;
}

void sub_187CF0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t/t)");
}

void sub_187D20()
{
}

double sub_187D34(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_187D5C()
{
  return 113;
}

void sub_187D64(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t*t)");
}

void sub_187D94()
{
}

double sub_187DA8(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_187DD0()
{
  return 113;
}

void sub_187DD8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t/t)");
}

void sub_187E08()
{
}

double sub_187E1C(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_187E44()
{
  return 113;
}

void sub_187E4C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t*t)");
}

void sub_187E7C()
{
}

double sub_187E90(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_187EB8()
{
  return 113;
}

void sub_187EC0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t/t)");
}

void sub_187EF0()
{
}

double sub_187F04(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_187F2C()
{
  return 113;
}

void sub_187F34(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t*t)");
}

void sub_187F64()
{
}

double sub_187F78(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_187FA0()
{
  return 113;
}

void sub_187FA8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t/t)");
}

void sub_187FD8()
{
}

double sub_187FEC(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) - (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_188014()
{
  return 113;
}

void sub_18801C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t-t)");
}

void sub_18804C()
{
}

double sub_188060(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_188088()
{
  return 113;
}

void sub_188090(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t-t)");
}

void sub_1880C0()
{
}

double sub_1880D4(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_1880FC()
{
  return 113;
}

void sub_188104(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t+t)");
}

void sub_188134()
{
}

double sub_188148(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_188170()
{
  return 113;
}

void sub_188178(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t-t)");
}

void sub_1881A8()
{
}

double sub_1881BC(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1881E4()
{
  return 113;
}

void sub_1881EC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t-t)");
}

void sub_18821C()
{
}

double sub_188230(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) - (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_188258()
{
  return 113;
}

void sub_188260(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t+t)");
}

void sub_188290()
{
}

double sub_1882A4(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_1882CC()
{
  return 113;
}

void sub_1882D4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t+t)");
}

void sub_188304()
{
}

double sub_188318(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_188340()
{
  return 113;
}

void sub_188348(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t+t)");
}

void sub_188378()
{
}

double sub_18838C(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1883B4()
{
  return 113;
}

void sub_1883BC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t+t)");
}

void sub_1883EC()
{
}

double sub_188400(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) - (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_188428()
{
  return 113;
}

void sub_188430(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t+t)");
}

void sub_188460()
{
}

double sub_188474(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) - (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_18849C()
{
  return 113;
}

void sub_1884A4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t+t)");
}

void sub_1884D4()
{
}

double sub_1884E8(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_188510()
{
  return 113;
}

void sub_188518(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t+t)");
}

void sub_188548()
{
}

double sub_18855C(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_188584()
{
  return 113;
}

void sub_18858C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t+t)");
}

void sub_1885BC()
{
}

double sub_1885D0(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1885F8()
{
  return 113;
}

void sub_188600(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t-t)");
}

void sub_188630()
{
}

double sub_188644(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_18866C()
{
  return 113;
}

void sub_188674(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t-t)");
}

void sub_1886A4()
{
}

double sub_1886B8(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) - (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1886E0()
{
  return 113;
}

void sub_1886E8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t-t)");
}

void sub_188718()
{
}

double sub_18872C(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) - (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_188754()
{
  return 113;
}

void sub_18875C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t-t)");
}

void sub_18878C()
{
}

double sub_1887A0(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1887C8()
{
  return 113;
}

void sub_1887D0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t*t)");
}

void sub_188800()
{
}

double sub_188814(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_18883C()
{
  return 113;
}

void sub_188844(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t/t)");
}

void sub_188874()
{
}

double sub_188888(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1888B0()
{
  return 113;
}

void sub_1888B8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t*t)");
}

void sub_1888E8()
{
}

double sub_1888FC(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_188924()
{
  return 113;
}

void sub_18892C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t/t)");
}

void sub_18895C()
{
}

double sub_188970(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_188998()
{
  return 113;
}

void sub_1889A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t*t)");
}

void sub_1889D0()
{
}

double sub_1889E4(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_188A0C()
{
  return 113;
}

void sub_188A14(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t/t)");
}

void sub_188A44()
{
}

double sub_188A58(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_188A80()
{
  return 113;
}

void sub_188A88(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t*t)");
}

void sub_188AB8()
{
}

double sub_188ACC(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_188AF4()
{
  return 113;
}

void sub_188AFC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t/t)");
}

void sub_188B2C()
{
}

double sub_188B40(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) * (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_188B68()
{
  return 113;
}

void sub_188B70(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t+t)");
}

void sub_188BA0()
{
}

double sub_188BB4(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) * (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_188BDC()
{
  return 113;
}

void sub_188BE4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t+t)");
}

void sub_188C14()
{
}

double sub_188C28(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) / (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_188C50()
{
  return 113;
}

void sub_188C58(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t+t)");
}

void sub_188C88()
{
}

double sub_188C9C(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) / (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_188CC4()
{
  return 113;
}

void sub_188CCC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t+t)");
}

void sub_188CFC()
{
}

double sub_188D10(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) / (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_188D38()
{
  return 113;
}

void sub_188D40(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t-t)");
}

void sub_188D70()
{
}

double sub_188D84(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) / (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_188DAC()
{
  return 113;
}

void sub_188DB4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t-t)");
}

void sub_188DE4()
{
}

double sub_188DF8(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) * (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_188E20()
{
  return 113;
}

void sub_188E28(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t-t)");
}

void sub_188E58()
{
}

double sub_188E6C(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) / (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_188E94()
{
  return 113;
}

void sub_188E9C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t*t)");
}

void sub_188ECC()
{
}

double sub_188EE0(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) * (*(double *)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_188F08()
{
  return 113;
}

void sub_188F10(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t/t)");
}

void sub_188F40()
{
}

double sub_188F54(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) * (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_188F7C()
{
  return 113;
}

void sub_188F84(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t-t)");
}

void sub_188FB4()
{
}

double sub_188FC8(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) * (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_188FF0()
{
  return 113;
}

void sub_188FF8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t*t)");
}

void sub_189028()
{
}

double sub_18903C(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) * (*(double *)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_189064()
{
  return 113;
}

void sub_18906C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t*(t/t))");
}

void sub_18909C()
{
}

double sub_1890B0(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) * (*(double *)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_1890D8()
{
  return 113;
}

void sub_1890E0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t*(t/t))");
}

void sub_189110()
{
}

double sub_189124(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) / (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_18914C()
{
  return 113;
}

void sub_189154(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t/(t*t))");
}

void sub_189184()
{
}

double sub_189198(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) / (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1891C0()
{
  return 113;
}

void sub_1891C8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t/(t*t))");
}

void sub_1891F8()
{
}

double sub_18920C(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_189234()
{
  return 113;
}

void sub_18923C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)*t");
}

void sub_18926C()
{
}

double sub_189280(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_1892A8()
{
  return 113;
}

void sub_1892B0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)/t");
}

void sub_1892E0()
{
}

double sub_1892F4(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_18931C()
{
  return 113;
}

void sub_189324(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)*t");
}

void sub_189354()
{
}

double sub_189368(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_189390()
{
  return 113;
}

void sub_189398(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)/t");
}

void sub_1893C8()
{
}

double sub_1893DC(uint64_t a1)
{
  return **(double **)(a1 + 32) * (**(double **)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24));
}

uint64_t sub_189404()
{
  return 113;
}

void sub_18940C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))*t");
}

void sub_18943C()
{
}

double sub_189450(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_189478()
{
  return 113;
}

void sub_189480(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))/t");
}

void sub_1894B0()
{
}

double sub_1894C4(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1894EC()
{
  return 113;
}

void sub_1894F4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t+t)");
}

void sub_189524()
{
}

double sub_189538(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_189560()
{
  return 113;
}

void sub_189568(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t-t)");
}

void sub_189598()
{
}

double sub_1895AC(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1895D4()
{
  return 113;
}

void sub_1895DC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t+t)");
}

void sub_18960C()
{
}

double sub_189620(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_189648()
{
  return 113;
}

void sub_189650(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t-t)");
}

void sub_189680()
{
}

double sub_189694(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1896BC()
{
  return 113;
}

void sub_1896C4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t-t)");
}

void sub_1896F4()
{
}

double sub_189708(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) - (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_189730()
{
  return 113;
}

void sub_189738(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t-t)");
}

void sub_189768()
{
}

double sub_18977C(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1897A4()
{
  return 113;
}

void sub_1897AC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t*t)");
}

void sub_1897DC()
{
}

double sub_1897F0(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) * *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_189818()
{
  return 113;
}

void sub_189820(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)/t");
}

uint64_t sub_18984C(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0x7D0:
      operator new();
    case 0x7D1:
      operator new();
    case 0x7D2:
      operator new();
    case 0x7D3:
      operator new();
    case 0x7D4:
      operator new();
    case 0x7D5:
      operator new();
    case 0x7D6:
      operator new();
    case 0x7D7:
      operator new();
    case 0x7D8:
      operator new();
    case 0x7D9:
      operator new();
    case 0x7DA:
      operator new();
    case 0x7DB:
      operator new();
    case 0x7DC:
      operator new();
    case 0x7DD:
      operator new();
    case 0x7DE:
      operator new();
    case 0x7DF:
      operator new();
    case 0x7E0:
      operator new();
    case 0x7E1:
      operator new();
    case 0x7E2:
      operator new();
    case 0x7E3:
      operator new();
    case 0x7E4:
      operator new();
    case 0x7E5:
      operator new();
    case 0x7E6:
      operator new();
    case 0x7E7:
      operator new();
    case 0x7E8:
      operator new();
    case 0x7E9:
      operator new();
    case 0x7EA:
      operator new();
    case 0x7EB:
      operator new();
    case 0x7EC:
      operator new();
    case 0x7ED:
      operator new();
    case 0x7EE:
      operator new();
    case 0x7EF:
      operator new();
    case 0x7F0:
      operator new();
    case 0x7F1:
      operator new();
    case 0x7F2:
      operator new();
    case 0x7F3:
      operator new();
    case 0x7F4:
      operator new();
    case 0x7F5:
      operator new();
    case 0x7F6:
      operator new();
    case 0x7F7:
      operator new();
    case 0x7F8:
      operator new();
    case 0x7F9:
      operator new();
    case 0x7FA:
      operator new();
    case 0x7FB:
      operator new();
    case 0x7FC:
      operator new();
    case 0x7FD:
      operator new();
    case 0x7FE:
      operator new();
    case 0x7FF:
      operator new();
    case 0x800:
      operator new();
    case 0x801:
      operator new();
    case 0x802:
      operator new();
    case 0x803:
      operator new();
    case 0x804:
      operator new();
    case 0x805:
      operator new();
    case 0x806:
      operator new();
    case 0x807:
      operator new();
    case 0x808:
      operator new();
    case 0x809:
      operator new();
    case 0x80A:
      operator new();
    case 0x80B:
      operator new();
    case 0x80C:
      operator new();
    case 0x80D:
      operator new();
    default:
      switch(*a2)
      {
        case 0x418:
          operator new();
        case 0x419:
          operator new();
        case 0x41A:
          operator new();
        case 0x41B:
          operator new();
        case 0x41C:
          operator new();
        case 0x41D:
          operator new();
        case 0x41E:
          operator new();
        case 0x41F:
          operator new();
        case 0x420:
          operator new();
        case 0x421:
          operator new();
        case 0x422:
          operator new();
        case 0x423:
          operator new();
        case 0x424:
          operator new();
        case 0x425:
          operator new();
        case 0x426:
          operator new();
        case 0x427:
          operator new();
        case 0x428:
          operator new();
        case 0x429:
          operator new();
        case 0x42A:
          operator new();
        case 0x42B:
          operator new();
        case 0x42C:
          operator new();
        case 0x42D:
          operator new();
        case 0x42E:
          operator new();
        case 0x42F:
          operator new();
        case 0x430:
          operator new();
        case 0x431:
          operator new();
        case 0x432:
          operator new();
        case 0x433:
          operator new();
        case 0x434:
          operator new();
        case 0x435:
          operator new();
        case 0x436:
          operator new();
        case 0x437:
          operator new();
        case 0x438:
          operator new();
        case 0x439:
          operator new();
        case 0x43A:
          operator new();
        case 0x43B:
          operator new();
        default:
          return 0;
      }
  }
}

void sub_18AE78()
{
}

double sub_18AE8C(uint64_t a1)
{
  return **(double **)(a1 + 8) + (**(double **)(a1 + 16) + **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_18AEB4()
{
  return 112;
}

void sub_18AEBC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)/t)");
}

void sub_18AEEC()
{
}

double sub_18AF00(uint64_t a1)
{
  return **(double **)(a1 + 8) + (**(double **)(a1 + 16) + **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_18AF28()
{
  return 112;
}

void sub_18AF30(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)*t)");
}

void sub_18AF60()
{
}

double sub_18AF74(uint64_t a1)
{
  return **(double **)(a1 + 8) + (**(double **)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_18AF9C()
{
  return 112;
}

void sub_18AFA4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)/t)");
}

void sub_18AFD4()
{
}

double sub_18AFE8(uint64_t a1)
{
  return **(double **)(a1 + 8) + (**(double **)(a1 + 16) - **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_18B010()
{
  return 112;
}

void sub_18B018(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)*t)");
}

void sub_18B048()
{
}

double sub_18B05C(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) * **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_18B084()
{
  return 112;
}

void sub_18B08C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)/t)");
}

void sub_18B0BC()
{
}

double sub_18B0D0(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) * **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_18B0F8()
{
  return 112;
}

void sub_18B100(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)*t)");
}

void sub_18B130()
{
}

double sub_18B144(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) / **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_18B16C()
{
  return 112;
}

void sub_18B174(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)+t)");
}

void sub_18B1A4()
{
}

double sub_18B1B8(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) / **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_18B1E0()
{
  return 112;
}

void sub_18B1E8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)/t)");
}

void sub_18B218()
{
}

double sub_18B22C(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) / **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_18B254()
{
  return 112;
}

void sub_18B25C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)*t)");
}

void sub_18B28C()
{
}

double sub_18B2A0(uint64_t a1)
{
  return **(double **)(a1 + 8) - (**(double **)(a1 + 16) + **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_18B2C8()
{
  return 112;
}

void sub_18B2D0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)/t)");
}

void sub_18B300()
{
}

double sub_18B314(uint64_t a1)
{
  return **(double **)(a1 + 8) - (**(double **)(a1 + 16) + **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_18B33C()
{
  return 112;
}

void sub_18B344(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)*t)");
}

void sub_18B374()
{
}

double sub_18B388(uint64_t a1)
{
  return **(double **)(a1 + 8) - (**(double **)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_18B3B0()
{
  return 112;
}

void sub_18B3B8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)/t)");
}

void sub_18B3E8()
{
}

double sub_18B3FC(uint64_t a1)
{
  return **(double **)(a1 + 8) - (**(double **)(a1 + 16) - **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_18B424()
{
  return 112;
}

void sub_18B42C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)*t)");
}

void sub_18B45C()
{
}

double sub_18B470(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) * **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_18B498()
{
  return 112;
}

void sub_18B4A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)/t)");
}

void sub_18B4D0()
{
}

double sub_18B4E4(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) * **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_18B50C()
{
  return 112;
}

void sub_18B514(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)*t)");
}

void sub_18B544()
{
}

double sub_18B558(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) / **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_18B580()
{
  return 112;
}

void sub_18B588(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)/t)");
}

void sub_18B5B8()
{
}

double sub_18B5CC(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) / **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_18B5F4()
{
  return 112;
}

void sub_18B5FC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)*t)");
}

void sub_18B62C()
{
}

double sub_18B640(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_18B668()
{
  return 112;
}

void sub_18B670(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)*t)-t");
}

void sub_18B6A0()
{
}

double sub_18B6B4(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_18B6DC()
{
  return 112;
}

void sub_18B6E4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)*t)-t");
}

void sub_18B714()
{
}

double sub_18B728(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_18B750()
{
  return 112;
}

void sub_18B758(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)-t");
}

void sub_18B788()
{
}

double sub_18B79C(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_18B7C4()
{
  return 112;
}

void sub_18B7CC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)*t)-t");
}

void sub_18B7FC()
{
}

double sub_18B810(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_18B838()
{
  return 112;
}

void sub_18B840(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)/t)-t");
}

void sub_18B870()
{
}

double sub_18B884(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_18B8AC()
{
  return 112;
}

void sub_18B8B4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)/t)-t");
}

void sub_18B8E4()
{
}

double sub_18B8F8(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_18B920()
{
  return 112;
}

void sub_18B928(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)/t)-t");
}

void sub_18B958()
{
}

double sub_18B96C(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_18B994()
{
  return 112;
}

void sub_18B99C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)/t)-t");
}

void sub_18B9CC()
{
}

double sub_18B9E0(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_18BA08()
{
  return 112;
}

void sub_18BA10(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t*t)");
}

void sub_18BA40()
{
}

double sub_18BA54(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_18BA7C()
{
  return 112;
}

void sub_18BA84(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t*t)");
}

void sub_18BAB4()
{
}

double sub_18BAC8(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_18BAF0()
{
  return 112;
}

void sub_18BAF8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t/t)");
}

void sub_18BB28()
{
}

double sub_18BB3C(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_18BB64()
{
  return 112;
}

void sub_18BB6C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t/t)");
}

void sub_18BB9C()
{
}

double sub_18BBB0(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_18BBD8()
{
  return 112;
}

void sub_18BBE0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t/t)");
}

void sub_18BC10()
{
}

double sub_18BC24(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_18BC4C()
{
  return 112;
}

void sub_18BC54(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t/t)");
}

void sub_18BC84()
{
}

double sub_18BC98(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_18BCC0()
{
  return 112;
}

void sub_18BCC8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t*t)");
}

void sub_18BCF8()
{
}

double sub_18BD0C(uint64_t a1)
{
  return **(double **)(a1 + 8) / (**(double **)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_18BD34()
{
  return 112;
}

void sub_18BD3C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t+(t*t))");
}

void sub_18BD6C()
{
}

double sub_18BD80(uint64_t a1)
{
  return **(double **)(a1 + 8) / (**(double **)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_18BDA8()
{
  return 112;
}

void sub_18BDB0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t-(t*t))");
}

void sub_18BDE0()
{
}

double sub_18BDF4(uint64_t a1)
{
  return **(double **)(a1 + 8) * (**(double **)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_18BE1C()
{
  return 112;
}

void sub_18BE24(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t+(t*t))");
}

void sub_18BE54()
{
}

double sub_18BE68(uint64_t a1)
{
  return **(double **)(a1 + 8) * (**(double **)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_18BE90()
{
  return 112;
}

void sub_18BE98(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t-(t*t))");
}

void sub_18BEC8()
{
}

double sub_18BEDC(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_18BF04()
{
  return 112;
}

void sub_18BF0C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t*t)");
}

void sub_18BF3C()
{
}

double sub_18BF50(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_18BF78()
{
  return 112;
}

void sub_18BF80(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t/t)");
}

void sub_18BFB0()
{
}

double sub_18BFC4(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_18BFEC()
{
  return 112;
}

void sub_18BFF4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t*t)");
}

void sub_18C024()
{
}

double sub_18C038(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_18C060()
{
  return 112;
}

void sub_18C068(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t/t)");
}

void sub_18C098()
{
}

double sub_18C0AC(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_18C0D4()
{
  return 112;
}

void sub_18C0DC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t*t)");
}

void sub_18C10C()
{
}

double sub_18C120(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_18C148()
{
  return 112;
}

void sub_18C150(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t/t)");
}

void sub_18C180()
{
}

double sub_18C194(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_18C1BC()
{
  return 112;
}

void sub_18C1C4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t*t)");
}

void sub_18C1F4()
{
}

double sub_18C208(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_18C230()
{
  return 112;
}

void sub_18C238(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t/t)");
}

void sub_18C268()
{
}

double sub_18C27C(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_18C2A4()
{
  return 112;
}

void sub_18C2AC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t-t)");
}

void sub_18C2DC()
{
}

double sub_18C2F0(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_18C318()
{
  return 112;
}

void sub_18C320(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t-t)");
}

void sub_18C350()
{
}

double sub_18C364(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_18C38C()
{
  return 112;
}

void sub_18C394(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t+t)");
}

void sub_18C3C4()
{
}

double sub_18C3D8(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_18C400()
{
  return 112;
}

void sub_18C408(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t-t)");
}

void sub_18C438()
{
}

double sub_18C44C(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_18C474()
{
  return 112;
}

void sub_18C47C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t-t)");
}

void sub_18C4AC()
{
}

double sub_18C4C0(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) - (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_18C4E8()
{
  return 112;
}

void sub_18C4F0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t+t)");
}

void sub_18C520()
{
}

double sub_18C534(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_18C55C()
{
  return 112;
}

void sub_18C564(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t+t)");
}

void sub_18C594()
{
}

double sub_18C5A8(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_18C5D0()
{
  return 112;
}

void sub_18C5D8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t+t)");
}

void sub_18C608()
{
}

double sub_18C61C(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_18C644()
{
  return 112;
}

void sub_18C64C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t+t)");
}

void sub_18C67C()
{
}

double sub_18C690(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) - (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_18C6B8()
{
  return 112;
}

void sub_18C6C0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t+t)");
}

void sub_18C6F0()
{
}

double sub_18C704(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) - (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_18C72C()
{
  return 112;
}

void sub_18C734(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t+t)");
}

void sub_18C764()
{
}

double sub_18C778(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_18C7A0()
{
  return 112;
}

void sub_18C7A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t+t)");
}

void sub_18C7D8()
{
}

double sub_18C7EC(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_18C814()
{
  return 112;
}

void sub_18C81C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t+t)");
}

void sub_18C84C()
{
}

double sub_18C860(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_18C888()
{
  return 112;
}

void sub_18C890(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t-t)");
}

void sub_18C8C0()
{
}

double sub_18C8D4(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_18C8FC()
{
  return 112;
}

void sub_18C904(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t-t)");
}

void sub_18C934()
{
}

double sub_18C948(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_18C970()
{
  return 112;
}

void sub_18C978(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t-t)");
}

void sub_18C9A8()
{
}

double sub_18C9BC(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_18C9E4()
{
  return 112;
}

void sub_18C9EC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t-t)");
}

void sub_18CA1C()
{
}

double sub_18CA30(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) * (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_18CA58()
{
  return 112;
}

void sub_18CA60(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t*t)");
}

void sub_18CA90()
{
}

double sub_18CAA4(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_18CACC()
{
  return 112;
}

void sub_18CAD4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t/t)");
}

void sub_18CB04()
{
}

double sub_18CB18(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_18CB40()
{
  return 112;
}

void sub_18CB48(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t*t)");
}

void sub_18CB78()
{
}

double sub_18CB8C(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) / (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_18CBB4()
{
  return 112;
}

void sub_18CBBC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t/t)");
}

void sub_18CBEC()
{
}

double sub_18CC00(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_18CC28()
{
  return 112;
}

void sub_18CC30(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t*t)");
}

void sub_18CC60()
{
}

double sub_18CC74(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) / (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_18CC9C()
{
  return 112;
}

void sub_18CCA4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t/t)");
}

void sub_18CCD4()
{
}

double sub_18CCE8(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) * (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_18CD10()
{
  return 112;
}

void sub_18CD18(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t*t)");
}

void sub_18CD48()
{
}

double sub_18CD5C(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_18CD84()
{
  return 112;
}

void sub_18CD8C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t/t)");
}

void sub_18CDBC()
{
}

double sub_18CDD0(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_18CDF8()
{
  return 112;
}

void sub_18CE00(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t+t)");
}

void sub_18CE30()
{
}

double sub_18CE44(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_18CE6C()
{
  return 112;
}

void sub_18CE74(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t+t)");
}

void sub_18CEA4()
{
}

double sub_18CEB8(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_18CEE0()
{
  return 112;
}

void sub_18CEE8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t+t)");
}

void sub_18CF18()
{
}

double sub_18CF2C(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_18CF54()
{
  return 112;
}

void sub_18CF5C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t+t)");
}

void sub_18CF8C()
{
}

double sub_18CFA0(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_18CFC8()
{
  return 112;
}

void sub_18CFD0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t-t)");
}

void sub_18D000()
{
}

double sub_18D014(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_18D03C()
{
  return 112;
}

void sub_18D044(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t-t)");
}

void sub_18D074()
{
}

double sub_18D088(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_18D0B0()
{
  return 112;
}

void sub_18D0B8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t-t)");
}

void sub_18D0E8()
{
}

double sub_18D0FC(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_18D124()
{
  return 112;
}

void sub_18D12C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t*t)");
}

void sub_18D15C()
{
}

double sub_18D170(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_18D198()
{
  return 112;
}

void sub_18D1A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t/t)");
}

void sub_18D1D0()
{
}

double sub_18D1E4(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_18D20C()
{
  return 112;
}

void sub_18D214(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t-t)");
}

void sub_18D244()
{
}

double sub_18D258(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) * (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_18D280()
{
  return 112;
}

void sub_18D288(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t*t)");
}

void sub_18D2B8()
{
}

double sub_18D2CC(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_18D2F4()
{
  return 112;
}

void sub_18D2FC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t*(t/t))");
}

void sub_18D32C()
{
}

double sub_18D340(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_18D368()
{
  return 112;
}

void sub_18D370(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t*(t/t))");
}

void sub_18D3A0()
{
}

double sub_18D3B4(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_18D3DC()
{
  return 112;
}

void sub_18D3E4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t/(t*t))");
}

void sub_18D414()
{
}

double sub_18D428(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_18D450()
{
  return 112;
}

void sub_18D458(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t/(t*t))");
}

void sub_18D488()
{
}

double sub_18D49C(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16) - **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_18D4C4()
{
  return 112;
}

void sub_18D4CC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)*t");
}

void sub_18D4FC()
{
}

double sub_18D510(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_18D538()
{
  return 112;
}

void sub_18D540(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)/t");
}

void sub_18D570()
{
}

double sub_18D584(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_18D5AC()
{
  return 112;
}

void sub_18D5B4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)*t");
}

void sub_18D5E4()
{
}

double sub_18D5F8(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_18D620()
{
  return 112;
}

void sub_18D628(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)/t");
}

void sub_18D658()
{
}

double sub_18D66C(uint64_t a1)
{
  return *(double *)(a1 + 32) * (**(double **)(a1 + 8) + **(double **)(a1 + 16) - **(double **)(a1 + 24));
}

uint64_t sub_18D694()
{
  return 112;
}

void sub_18D69C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))*t");
}

void sub_18D6CC()
{
}

double sub_18D6E0(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_18D708()
{
  return 112;
}

void sub_18D710(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))/t");
}

void sub_18D740()
{
}

double sub_18D754(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_18D77C()
{
  return 112;
}

void sub_18D784(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t+t)");
}

void sub_18D7B4()
{
}

double sub_18D7C8(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_18D7F0()
{
  return 112;
}

void sub_18D7F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t-t)");
}

void sub_18D828()
{
}

double sub_18D83C(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_18D864()
{
  return 112;
}

void sub_18D86C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t+t)");
}

void sub_18D89C()
{
}

double sub_18D8B0(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_18D8D8()
{
  return 112;
}

void sub_18D8E0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t-t)");
}

void sub_18D910()
{
}

double sub_18D924(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_18D94C()
{
  return 112;
}

void sub_18D954(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t-t)");
}

void sub_18D984()
{
}

double sub_18D998(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_18D9C0()
{
  return 112;
}

void sub_18D9C8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t-t)");
}

void sub_18D9F8()
{
}

double sub_18DA0C(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_18DA34()
{
  return 112;
}

void sub_18DA3C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t*t)");
}

void sub_18DA6C()
{
}

double sub_18DA80(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) * **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_18DAA8()
{
  return 112;
}

void sub_18DAB0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)/t");
}

uint64_t sub_18DADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v10 = *(void *)(v7 + 8);
  uint64_t v9 = v7 + 8;
  uint64_t v8 = v10;
  if (!v10) {
    return 0;
  }
  int v12 = *(char *)(a2 + 23);
  size_t v13 = v12 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
  uint64_t v14 = v12 >= 0 ? (const void *)a2 : *(const void **)a2;
  uint64_t v15 = v9;
  do
  {
    int v16 = *(char *)(v8 + 55);
    if (v16 >= 0) {
      size_t v17 = *(unsigned __int8 *)(v8 + 55);
    }
    else {
      size_t v17 = *(void *)(v8 + 40);
    }
    if (v16 >= 0) {
      size_t v18 = (const void *)(v8 + 32);
    }
    else {
      size_t v18 = *(const void **)(v8 + 32);
    }
    if (v13 >= v17) {
      size_t v19 = v17;
    }
    else {
      size_t v19 = v13;
    }
    int v20 = memcmp(v18, v14, v19);
    BOOL v21 = v17 < v13;
    if (v20) {
      BOOL v21 = v20 < 0;
    }
    BOOL v22 = !v21;
    if (v21) {
      int v23 = (uint64_t *)(v8 + 8);
    }
    else {
      int v23 = (uint64_t *)v8;
    }
    if (v22) {
      uint64_t v15 = v8;
    }
    uint64_t v8 = *v23;
  }
  while (*v23);
  if (v15 == v9) {
    return 0;
  }
  int v24 = *(char *)(v15 + 55);
  size_t v25 = v24 >= 0 ? *(unsigned __int8 *)(v15 + 55) : *(void *)(v15 + 40);
  size_t v26 = v24 >= 0 ? (const void *)(v15 + 32) : *(const void **)(v15 + 32);
  size_t v27 = v25 >= v13 ? v13 : v25;
  int v28 = memcmp(v14, v26, v27);
  BOOL v29 = v13 < v25;
  if (v28) {
    BOOL v29 = v28 < 0;
  }
  if (v29) {
    return 0;
  }
  int v32 = *(_DWORD *)(v15 + 64);
  *a7 = sub_18DC40(a1, &v32);
  return 1;
}

uint64_t sub_18DC40(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0x7D0:
      operator new();
    case 0x7D1:
      operator new();
    case 0x7D2:
      operator new();
    case 0x7D3:
      operator new();
    case 0x7D4:
      operator new();
    case 0x7D5:
      operator new();
    case 0x7D6:
      operator new();
    case 0x7D7:
      operator new();
    case 0x7D8:
      operator new();
    case 0x7D9:
      operator new();
    case 0x7DA:
      operator new();
    case 0x7DB:
      operator new();
    case 0x7DC:
      operator new();
    case 0x7DD:
      operator new();
    case 0x7DE:
      operator new();
    case 0x7DF:
      operator new();
    case 0x7E0:
      operator new();
    case 0x7E1:
      operator new();
    case 0x7E2:
      operator new();
    case 0x7E3:
      operator new();
    case 0x7E4:
      operator new();
    case 0x7E5:
      operator new();
    case 0x7E6:
      operator new();
    case 0x7E7:
      operator new();
    case 0x7E8:
      operator new();
    case 0x7E9:
      operator new();
    case 0x7EA:
      operator new();
    case 0x7EB:
      operator new();
    case 0x7EC:
      operator new();
    case 0x7ED:
      operator new();
    case 0x7EE:
      operator new();
    case 0x7EF:
      operator new();
    case 0x7F0:
      operator new();
    case 0x7F1:
      operator new();
    case 0x7F2:
      operator new();
    case 0x7F3:
      operator new();
    case 0x7F4:
      operator new();
    case 0x7F5:
      operator new();
    case 0x7F6:
      operator new();
    case 0x7F7:
      operator new();
    case 0x7F8:
      operator new();
    case 0x7F9:
      operator new();
    case 0x7FA:
      operator new();
    case 0x7FB:
      operator new();
    case 0x7FC:
      operator new();
    case 0x7FD:
      operator new();
    case 0x7FE:
      operator new();
    case 0x7FF:
      operator new();
    case 0x800:
      operator new();
    case 0x801:
      operator new();
    case 0x802:
      operator new();
    case 0x803:
      operator new();
    case 0x804:
      operator new();
    case 0x805:
      operator new();
    case 0x806:
      operator new();
    case 0x807:
      operator new();
    case 0x808:
      operator new();
    case 0x809:
      operator new();
    case 0x80A:
      operator new();
    case 0x80B:
      operator new();
    case 0x80C:
      operator new();
    case 0x80D:
      operator new();
    default:
      switch(*a2)
      {
        case 0x418:
          operator new();
        case 0x419:
          operator new();
        case 0x41A:
          operator new();
        case 0x41B:
          operator new();
        case 0x41C:
          operator new();
        case 0x41D:
          operator new();
        case 0x41E:
          operator new();
        case 0x41F:
          operator new();
        case 0x420:
          operator new();
        case 0x421:
          operator new();
        case 0x422:
          operator new();
        case 0x423:
          operator new();
        case 0x424:
          operator new();
        case 0x425:
          operator new();
        case 0x426:
          operator new();
        case 0x427:
          operator new();
        case 0x428:
          operator new();
        case 0x429:
          operator new();
        case 0x42A:
          operator new();
        case 0x42B:
          operator new();
        case 0x42C:
          operator new();
        case 0x42D:
          operator new();
        case 0x42E:
          operator new();
        case 0x42F:
          operator new();
        case 0x430:
          operator new();
        case 0x431:
          operator new();
        case 0x432:
          operator new();
        case 0x433:
          operator new();
        case 0x434:
          operator new();
        case 0x435:
          operator new();
        case 0x436:
          operator new();
        case 0x437:
          operator new();
        case 0x438:
          operator new();
        case 0x439:
          operator new();
        case 0x43A:
          operator new();
        case 0x43B:
          operator new();
        default:
          return 0;
      }
  }
}

void sub_18F260()
{
}

double sub_18F274(double **a1)
{
  return *a1[1] + (*a1[2] + *a1[3]) / *a1[4];
}

uint64_t sub_18F29C()
{
  return 111;
}

void sub_18F2A4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)/t)");
}

void sub_18F2D4()
{
}

double sub_18F2E8(double **a1)
{
  return *a1[1] + (*a1[2] + *a1[3]) * *a1[4];
}

uint64_t sub_18F310()
{
  return 111;
}

void sub_18F318(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)*t)");
}

void sub_18F348()
{
}

double sub_18F35C(double **a1)
{
  return *a1[1] + (*a1[2] - *a1[3]) / *a1[4];
}

uint64_t sub_18F384()
{
  return 111;
}

void sub_18F38C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)/t)");
}

void sub_18F3BC()
{
}

double sub_18F3D0(double **a1)
{
  return *a1[1] + (*a1[2] - *a1[3]) * *a1[4];
}

uint64_t sub_18F3F8()
{
  return 111;
}

void sub_18F400(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)*t)");
}

void sub_18F430()
{
}

double sub_18F444(double **a1)
{
  return *a1[1] + *a1[2] * *a1[3] / *a1[4];
}

uint64_t sub_18F46C()
{
  return 111;
}

void sub_18F474(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)/t)");
}

void sub_18F4A4()
{
}

double sub_18F4B8(double **a1)
{
  return *a1[1] + *a1[2] * *a1[3] * *a1[4];
}

uint64_t sub_18F4E0()
{
  return 111;
}

void sub_18F4E8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)*t)");
}

void sub_18F518()
{
}

double sub_18F52C(double **a1)
{
  return *a1[1] + *a1[2] / *a1[3] + *a1[4];
}

uint64_t sub_18F554()
{
  return 111;
}

void sub_18F55C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)+t)");
}

void sub_18F58C()
{
}

double sub_18F5A0(double **a1)
{
  return *a1[1] + *a1[2] / *a1[3] / *a1[4];
}

uint64_t sub_18F5C8()
{
  return 111;
}

void sub_18F5D0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)/t)");
}

void sub_18F600()
{
}

double sub_18F614(double **a1)
{
  return *a1[1] + *a1[2] / *a1[3] * *a1[4];
}

uint64_t sub_18F63C()
{
  return 111;
}

void sub_18F644(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)*t)");
}

void sub_18F674()
{
}

double sub_18F688(double **a1)
{
  return *a1[1] - (*a1[2] + *a1[3]) / *a1[4];
}

uint64_t sub_18F6B0()
{
  return 111;
}

void sub_18F6B8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)/t)");
}

void sub_18F6E8()
{
}

double sub_18F6FC(double **a1)
{
  return *a1[1] - (*a1[2] + *a1[3]) * *a1[4];
}

uint64_t sub_18F724()
{
  return 111;
}

void sub_18F72C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)*t)");
}

void sub_18F75C()
{
}

double sub_18F770(double **a1)
{
  return *a1[1] - (*a1[2] - *a1[3]) / *a1[4];
}

uint64_t sub_18F798()
{
  return 111;
}

void sub_18F7A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)/t)");
}

void sub_18F7D0()
{
}

double sub_18F7E4(double **a1)
{
  return *a1[1] - (*a1[2] - *a1[3]) * *a1[4];
}

uint64_t sub_18F80C()
{
  return 111;
}

void sub_18F814(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)*t)");
}

void sub_18F844()
{
}

double sub_18F858(double **a1)
{
  return *a1[1] - *a1[2] * *a1[3] / *a1[4];
}

uint64_t sub_18F880()
{
  return 111;
}

void sub_18F888(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)/t)");
}

void sub_18F8B8()
{
}

double sub_18F8CC(double **a1)
{
  return *a1[1] - *a1[2] * *a1[3] * *a1[4];
}

uint64_t sub_18F8F4()
{
  return 111;
}

void sub_18F8FC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)*t)");
}

void sub_18F92C()
{
}

double sub_18F940(double **a1)
{
  return *a1[1] - *a1[2] / *a1[3] / *a1[4];
}

uint64_t sub_18F968()
{
  return 111;
}

void sub_18F970(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)/t)");
}

void sub_18F9A0()
{
}

double sub_18F9B4(double **a1)
{
  return *a1[1] - *a1[2] / *a1[3] * *a1[4];
}

uint64_t sub_18F9DC()
{
  return 111;
}

void sub_18F9E4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)*t)");
}

void sub_18FA14()
{
}

double sub_18FA28(double **a1)
{
  return (*a1[1] + *a1[2]) * *a1[3] - *a1[4];
}

uint64_t sub_18FA50()
{
  return 111;
}

void sub_18FA58(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)*t)-t");
}

void sub_18FA88()
{
}

double sub_18FA9C(double **a1)
{
  return (*a1[1] - *a1[2]) * *a1[3] - *a1[4];
}

uint64_t sub_18FAC4()
{
  return 111;
}

void sub_18FACC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)*t)-t");
}

void sub_18FAFC()
{
}

double sub_18FB10(double **a1)
{
  return *a1[1] * *a1[2] * *a1[3] - *a1[4];
}

uint64_t sub_18FB38()
{
  return 111;
}

void sub_18FB40(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)-t");
}

void sub_18FB70()
{
}

double sub_18FB84(double **a1)
{
  return *a1[1] / *a1[2] * *a1[3] - *a1[4];
}

uint64_t sub_18FBAC()
{
  return 111;
}

void sub_18FBB4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)*t)-t");
}

void sub_18FBE4()
{
}

double sub_18FBF8(double **a1)
{
  return (*a1[1] + *a1[2]) / *a1[3] - *a1[4];
}

uint64_t sub_18FC20()
{
  return 111;
}

void sub_18FC28(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)/t)-t");
}

void sub_18FC58()
{
}

double sub_18FC6C(double **a1)
{
  return (*a1[1] - *a1[2]) / *a1[3] - *a1[4];
}

uint64_t sub_18FC94()
{
  return 111;
}

void sub_18FC9C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)/t)-t");
}

void sub_18FCCC()
{
}

double sub_18FCE0(double **a1)
{
  return *a1[1] * *a1[2] / *a1[3] - *a1[4];
}

uint64_t sub_18FD08()
{
  return 111;
}

void sub_18FD10(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)/t)-t");
}

void sub_18FD40()
{
}

double sub_18FD54(double **a1)
{
  return *a1[1] / *a1[2] / *a1[3] - *a1[4];
}

uint64_t sub_18FD7C()
{
  return 111;
}

void sub_18FD84(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)/t)-t");
}

void sub_18FDB4()
{
}

double sub_18FDC8(double **a1)
{
  return *a1[1] * *a1[2] + *a1[3] * *a1[4];
}

uint64_t sub_18FDF0()
{
  return 111;
}

void sub_18FDF8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t*t)");
}

void sub_18FE28()
{
}

double sub_18FE3C(double **a1)
{
  return *a1[1] * *a1[2] - *a1[3] * *a1[4];
}

uint64_t sub_18FE64()
{
  return 111;
}

void sub_18FE6C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t*t)");
}

void sub_18FE9C()
{
}

double sub_18FEB0(double **a1)
{
  return *a1[1] * *a1[2] + *a1[3] / *a1[4];
}

uint64_t sub_18FED8()
{
  return 111;
}

void sub_18FEE0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t/t)");
}

void sub_18FF10()
{
}

double sub_18FF24(double **a1)
{
  return *a1[1] * *a1[2] - *a1[3] / *a1[4];
}

uint64_t sub_18FF4C()
{
  return 111;
}

void sub_18FF54(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t/t)");
}

void sub_18FF84()
{
}

double sub_18FF98(double **a1)
{
  return *a1[1] / *a1[2] + *a1[3] / *a1[4];
}

uint64_t sub_18FFC0()
{
  return 111;
}

void sub_18FFC8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t/t)");
}

void sub_18FFF8()
{
}

double sub_19000C(double **a1)
{
  return *a1[1] / *a1[2] - *a1[3] / *a1[4];
}

uint64_t sub_190034()
{
  return 111;
}

void sub_19003C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t/t)");
}

void sub_19006C()
{
}

double sub_190080(double **a1)
{
  return *a1[1] / *a1[2] - *a1[3] * *a1[4];
}

uint64_t sub_1900A8()
{
  return 111;
}

void sub_1900B0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t*t)");
}

void sub_1900E0()
{
}

double sub_1900F4(double **a1)
{
  return *a1[1] / (*a1[2] + *a1[3] * *a1[4]);
}

uint64_t sub_19011C()
{
  return 111;
}

void sub_190124(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t+(t*t))");
}

void sub_190154()
{
}

double sub_190168(double **a1)
{
  return *a1[1] / (*a1[2] - *a1[3] * *a1[4]);
}

uint64_t sub_190190()
{
  return 111;
}

void sub_190198(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t-(t*t))");
}

void sub_1901C8()
{
}

double sub_1901DC(double **a1)
{
  return *a1[1] * (*a1[2] + *a1[3] * *a1[4]);
}

uint64_t sub_190204()
{
  return 111;
}

void sub_19020C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t+(t*t))");
}

void sub_19023C()
{
}

double sub_190250(double **a1)
{
  return *a1[1] * (*a1[2] - *a1[3] * *a1[4]);
}

uint64_t sub_190278()
{
  return 111;
}

void sub_190280(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t-(t*t))");
}

void sub_1902B0()
{
}

double sub_1902C4(double **a1)
{
  return *a1[1] + *a1[2] - *a1[3] * *a1[4];
}

uint64_t sub_1902EC()
{
  return 111;
}

void sub_1902F4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t*t)");
}

void sub_190324()
{
}

double sub_190338(double **a1)
{
  return *a1[1] + *a1[2] - *a1[3] / *a1[4];
}

uint64_t sub_190360()
{
  return 111;
}

void sub_190368(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t/t)");
}

void sub_190398()
{
}

double sub_1903AC(double **a1)
{
  return *a1[1] + *a1[2] + *a1[3] * *a1[4];
}

uint64_t sub_1903D4()
{
  return 111;
}

void sub_1903DC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t*t)");
}

void sub_19040C()
{
}

double sub_190420(double **a1)
{
  return *a1[1] + *a1[2] + *a1[3] / *a1[4];
}

uint64_t sub_190448()
{
  return 111;
}

void sub_190450(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t/t)");
}

void sub_190480()
{
}

double sub_190494(double **a1)
{
  return *a1[1] - *a1[2] + *a1[3] * *a1[4];
}

uint64_t sub_1904BC()
{
  return 111;
}

void sub_1904C4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t*t)");
}

void sub_1904F4()
{
}

double sub_190508(double **a1)
{
  return *a1[1] - *a1[2] + *a1[3] / *a1[4];
}

uint64_t sub_190530()
{
  return 111;
}

void sub_190538(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t/t)");
}

void sub_190568()
{
}

double sub_19057C(double **a1)
{
  return *a1[1] - *a1[2] - *a1[3] * *a1[4];
}

uint64_t sub_1905A4()
{
  return 111;
}

void sub_1905AC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t*t)");
}

void sub_1905DC()
{
}

double sub_1905F0(double **a1)
{
  return *a1[1] - *a1[2] - *a1[3] / *a1[4];
}

uint64_t sub_190618()
{
  return 111;
}

void sub_190620(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t/t)");
}

void sub_190650()
{
}

double sub_190664(double **a1)
{
  return *a1[1] + *a1[2] - (*a1[3] - *a1[4]);
}

uint64_t sub_19068C()
{
  return 111;
}

void sub_190694(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t-t)");
}

void sub_1906C4()
{
}

double sub_1906D8(double **a1)
{
  return *a1[1] + *a1[2] + *a1[3] - *a1[4];
}

uint64_t sub_190700()
{
  return 111;
}

void sub_190708(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t-t)");
}

void sub_190738()
{
}

double sub_19074C(double **a1)
{
  return *a1[1] + *a1[2] + *a1[3] + *a1[4];
}

uint64_t sub_190774()
{
  return 111;
}

void sub_19077C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t+t)");
}

void sub_1907AC()
{
}

double sub_1907C0(double **a1)
{
  return (*a1[1] + *a1[2]) * (*a1[3] - *a1[4]);
}

uint64_t sub_1907E8()
{
  return 111;
}

void sub_1907F0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t-t)");
}

void sub_190820()
{
}

double sub_190834(double **a1)
{
  return (*a1[1] + *a1[2]) / (*a1[3] - *a1[4]);
}

uint64_t sub_19085C()
{
  return 111;
}

void sub_190864(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t-t)");
}

void sub_190894()
{
}

double sub_1908A8(double **a1)
{
  return *a1[1] - *a1[2] - (*a1[3] + *a1[4]);
}

uint64_t sub_1908D0()
{
  return 111;
}

void sub_1908D8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t+t)");
}

void sub_190908()
{
}

double sub_19091C(double **a1)
{
  return *a1[1] - *a1[2] + *a1[3] + *a1[4];
}

uint64_t sub_190944()
{
  return 111;
}

void sub_19094C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t+t)");
}

void sub_19097C()
{
}

double sub_190990(double **a1)
{
  return (*a1[1] - *a1[2]) * (*a1[3] + *a1[4]);
}

uint64_t sub_1909B8()
{
  return 111;
}

void sub_1909C0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t+t)");
}

void sub_1909F0()
{
}

double sub_190A04(double **a1)
{
  return (*a1[1] - *a1[2]) / (*a1[3] + *a1[4]);
}

uint64_t sub_190A2C()
{
  return 111;
}

void sub_190A34(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t+t)");
}

void sub_190A64()
{
}

double sub_190A78(double **a1)
{
  return *a1[1] * *a1[2] - (*a1[3] + *a1[4]);
}

uint64_t sub_190AA0()
{
  return 111;
}

void sub_190AA8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t+t)");
}

void sub_190AD8()
{
}

double sub_190AEC(double **a1)
{
  return *a1[1] / *a1[2] - (*a1[3] + *a1[4]);
}

uint64_t sub_190B14()
{
  return 111;
}

void sub_190B1C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t+t)");
}

void sub_190B4C()
{
}

double sub_190B60(double **a1)
{
  return *a1[1] * *a1[2] + *a1[3] + *a1[4];
}

uint64_t sub_190B88()
{
  return 111;
}

void sub_190B90(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t+t)");
}

void sub_190BC0()
{
}

double sub_190BD4(double **a1)
{
  return *a1[1] / *a1[2] + *a1[3] + *a1[4];
}

uint64_t sub_190BFC()
{
  return 111;
}

void sub_190C04(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t+t)");
}

void sub_190C34()
{
}

double sub_190C48(double **a1)
{
  return *a1[1] * *a1[2] + *a1[3] - *a1[4];
}

uint64_t sub_190C70()
{
  return 111;
}

void sub_190C78(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t-t)");
}

void sub_190CA8()
{
}

double sub_190CBC(double **a1)
{
  return *a1[1] / *a1[2] + *a1[3] - *a1[4];
}

uint64_t sub_190CE4()
{
  return 111;
}

void sub_190CEC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t-t)");
}

void sub_190D1C()
{
}

double sub_190D30(double **a1)
{
  return *a1[1] * *a1[2] - (*a1[3] - *a1[4]);
}

uint64_t sub_190D58()
{
  return 111;
}

void sub_190D60(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t-t)");
}

void sub_190D90()
{
}

double sub_190DA4(double **a1)
{
  return *a1[1] / *a1[2] - (*a1[3] - *a1[4]);
}

uint64_t sub_190DCC()
{
  return 111;
}

void sub_190DD4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t-t)");
}

void sub_190E04()
{
}

double sub_190E18(double **a1)
{
  return (*a1[1] + *a1[2]) * (*a1[3] * *a1[4]);
}

uint64_t sub_190E40()
{
  return 111;
}

void sub_190E48(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t*t)");
}

void sub_190E78()
{
}

double sub_190E8C(double **a1)
{
  return (*a1[1] + *a1[2]) * (*a1[3] / *a1[4]);
}

uint64_t sub_190EB4()
{
  return 111;
}

void sub_190EBC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t/t)");
}

void sub_190EEC()
{
}

double sub_190F00(double **a1)
{
  return (*a1[1] + *a1[2]) / (*a1[3] * *a1[4]);
}

uint64_t sub_190F28()
{
  return 111;
}

void sub_190F30(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t*t)");
}

void sub_190F60()
{
}

double sub_190F74(double **a1)
{
  return (*a1[1] + *a1[2]) / (*a1[3] / *a1[4]);
}

uint64_t sub_190F9C()
{
  return 111;
}

void sub_190FA4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t/t)");
}

void sub_190FD4()
{
}

double sub_190FE8(double **a1)
{
  return (*a1[1] - *a1[2]) / (*a1[3] * *a1[4]);
}

uint64_t sub_191010()
{
  return 111;
}

void sub_191018(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t*t)");
}

void sub_191048()
{
}

double sub_19105C(double **a1)
{
  return (*a1[1] - *a1[2]) / (*a1[3] / *a1[4]);
}

uint64_t sub_191084()
{
  return 111;
}

void sub_19108C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t/t)");
}

void sub_1910BC()
{
}

double sub_1910D0(double **a1)
{
  return (*a1[1] - *a1[2]) * (*a1[3] * *a1[4]);
}

uint64_t sub_1910F8()
{
  return 111;
}

void sub_191100(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t*t)");
}

void sub_191130()
{
}

double sub_191144(double **a1)
{
  return (*a1[1] - *a1[2]) * (*a1[3] / *a1[4]);
}

uint64_t sub_19116C()
{
  return 111;
}

void sub_191174(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t/t)");
}

void sub_1911A4()
{
}

double sub_1911B8(double **a1)
{
  return *a1[1] * *a1[2] * (*a1[3] + *a1[4]);
}

uint64_t sub_1911E0()
{
  return 111;
}

void sub_1911E8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t+t)");
}

void sub_191218()
{
}

double sub_19122C(double **a1)
{
  return *a1[1] / *a1[2] * (*a1[3] + *a1[4]);
}

uint64_t sub_191254()
{
  return 111;
}

void sub_19125C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t+t)");
}

void sub_19128C()
{
}

double sub_1912A0(double **a1)
{
  return *a1[1] * *a1[2] / (*a1[3] + *a1[4]);
}

uint64_t sub_1912C8()
{
  return 111;
}

void sub_1912D0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t+t)");
}

void sub_191300()
{
}

double sub_191314(double **a1)
{
  return *a1[1] / *a1[2] / (*a1[3] + *a1[4]);
}

uint64_t sub_19133C()
{
  return 111;
}

void sub_191344(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t+t)");
}

void sub_191374()
{
}

double sub_191388(double **a1)
{
  return *a1[1] * *a1[2] / (*a1[3] - *a1[4]);
}

uint64_t sub_1913B0()
{
  return 111;
}

void sub_1913B8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t-t)");
}

void sub_1913E8()
{
}

double sub_1913FC(double **a1)
{
  return *a1[1] / *a1[2] / (*a1[3] - *a1[4]);
}

uint64_t sub_191424()
{
  return 111;
}

void sub_19142C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t-t)");
}

void sub_19145C()
{
}

double sub_191470(double **a1)
{
  return *a1[1] * *a1[2] * (*a1[3] - *a1[4]);
}

uint64_t sub_191498()
{
  return 111;
}

void sub_1914A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t-t)");
}

void sub_1914D0()
{
}

double sub_1914E4(double **a1)
{
  return *a1[1] * *a1[2] / (*a1[3] * *a1[4]);
}

uint64_t sub_19150C()
{
  return 111;
}

void sub_191514(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t*t)");
}

void sub_191544()
{
}

double sub_191558(double **a1)
{
  return *a1[1] / *a1[2] * (*a1[3] / *a1[4]);
}

uint64_t sub_191580()
{
  return 111;
}

void sub_191588(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t/t)");
}

void sub_1915B8()
{
}

double sub_1915CC(double **a1)
{
  return *a1[1] / *a1[2] * (*a1[3] - *a1[4]);
}

uint64_t sub_1915F4()
{
  return 111;
}

void sub_1915FC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t-t)");
}

void sub_19162C()
{
}

double sub_191640(double **a1)
{
  return *a1[1] * *a1[2] * (*a1[3] * *a1[4]);
}

uint64_t sub_191668()
{
  return 111;
}

void sub_191670(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t*t)");
}

void sub_1916A0()
{
}

double sub_1916B4(double **a1)
{
  return *a1[1] + *a1[2] * (*a1[3] / *a1[4]);
}

uint64_t sub_1916DC()
{
  return 111;
}

void sub_1916E4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t*(t/t))");
}

void sub_191714()
{
}

double sub_191728(double **a1)
{
  return *a1[1] - *a1[2] * (*a1[3] / *a1[4]);
}

uint64_t sub_191750()
{
  return 111;
}

void sub_191758(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t*(t/t))");
}

void sub_191788()
{
}

double sub_19179C(double **a1)
{
  return *a1[1] + *a1[2] / (*a1[3] * *a1[4]);
}

uint64_t sub_1917C4()
{
  return 111;
}

void sub_1917CC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t/(t*t))");
}

void sub_1917FC()
{
}

double sub_191810(double **a1)
{
  return *a1[1] - *a1[2] / (*a1[3] * *a1[4]);
}

uint64_t sub_191838()
{
  return 111;
}

void sub_191840(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t/(t*t))");
}

void sub_191870()
{
}

double sub_191884(double **a1)
{
  return (*a1[1] - *a1[2] - *a1[3]) * *a1[4];
}

uint64_t sub_1918AC()
{
  return 111;
}

void sub_1918B4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)*t");
}

void sub_1918E4()
{
}

double sub_1918F8(double **a1)
{
  return (*a1[1] - *a1[2] - *a1[3]) / *a1[4];
}

uint64_t sub_191920()
{
  return 111;
}

void sub_191928(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)/t");
}

void sub_191958()
{
}

double sub_19196C(double **a1)
{
  return (*a1[1] - *a1[2] + *a1[3]) * *a1[4];
}

uint64_t sub_191994()
{
  return 111;
}

void sub_19199C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)*t");
}

void sub_1919CC()
{
}

double sub_1919E0(double **a1)
{
  return (*a1[1] - *a1[2] + *a1[3]) / *a1[4];
}

uint64_t sub_191A08()
{
  return 111;
}

void sub_191A10(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)/t");
}

void sub_191A40()
{
}

double sub_191A54(double **a1)
{
  return *a1[4] * (*a1[1] + *a1[2] - *a1[3]);
}

uint64_t sub_191A7C()
{
  return 111;
}

void sub_191A84(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))*t");
}

void sub_191AB4()
{
}

double sub_191AC8(double **a1)
{
  return (*a1[1] + *a1[2] - *a1[3]) / *a1[4];
}

uint64_t sub_191AF0()
{
  return 111;
}

void sub_191AF8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))/t");
}

void sub_191B28()
{
}

double sub_191B3C(double **a1)
{
  return (*a1[1] + *a1[2]) / (*a1[3] + *a1[4]);
}

uint64_t sub_191B64()
{
  return 111;
}

void sub_191B6C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t+t)");
}

void sub_191B9C()
{
}

double sub_191BB0(double **a1)
{
  return (*a1[1] - *a1[2]) / (*a1[3] - *a1[4]);
}

uint64_t sub_191BD8()
{
  return 111;
}

void sub_191BE0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t-t)");
}

void sub_191C10()
{
}

double sub_191C24(double **a1)
{
  return (*a1[1] + *a1[2]) * (*a1[3] + *a1[4]);
}

uint64_t sub_191C4C()
{
  return 111;
}

void sub_191C54(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t+t)");
}

void sub_191C84()
{
}

double sub_191C98(double **a1)
{
  return (*a1[1] - *a1[2]) * (*a1[3] - *a1[4]);
}

uint64_t sub_191CC0()
{
  return 111;
}

void sub_191CC8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t-t)");
}

void sub_191CF8()
{
}

double sub_191D0C(double **a1)
{
  return *a1[1] - *a1[2] + *a1[3] - *a1[4];
}

uint64_t sub_191D34()
{
  return 111;
}

void sub_191D3C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t-t)");
}

void sub_191D6C()
{
}

double sub_191D80(double **a1)
{
  return *a1[1] - *a1[2] - (*a1[3] - *a1[4]);
}

uint64_t sub_191DA8()
{
  return 111;
}

void sub_191DB0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t-t)");
}

void sub_191DE0()
{
}

double sub_191DF4(double **a1)
{
  return *a1[1] / *a1[2] + *a1[3] * *a1[4];
}

uint64_t sub_191E1C()
{
  return 111;
}

void sub_191E24(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t*t)");
}

void sub_191E54()
{
}

double sub_191E68(double **a1)
{
  return *a1[1] * *a1[2] * *a1[3] / *a1[4];
}

uint64_t sub_191E90()
{
  return 111;
}

void sub_191E98(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)/t");
}

uint64_t sub_191EC4(uint64_t a1)
{
  *(void *)a1 = off_2415830;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_191F40(uint64_t a1)
{
  *(void *)a1 = off_2415830;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_191FDC(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  return (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) + *v1;
}

uint64_t sub_192028(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_192030(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_192038(uint64_t a1)
{
  *(void *)a1 = off_24158A0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1920B4(uint64_t a1)
{
  *(void *)a1 = off_24158A0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_192150(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  return *v1 - (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
}

uint64_t sub_19219C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1921A4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1921AC(uint64_t a1)
{
  *(void *)a1 = off_24158F8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_192228(uint64_t a1)
{
  *(void *)a1 = off_24158F8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1922C4(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  return (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) * *v1;
}

uint64_t sub_192310(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_192318(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_192320(uint64_t a1)
{
  *(void *)a1 = off_2415950;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19239C(uint64_t a1)
{
  *(void *)a1 = off_2415950;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_192438(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  return *v1 / (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
}

uint64_t sub_192484(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19248C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_192494(uint64_t a1)
{
  *(void *)a1 = off_24159A8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_192510(uint64_t a1)
{
  *(void *)a1 = off_24159A8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1925AC(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  long double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  long double v3 = *v1;

  return fmod(v3, v2);
}

uint64_t sub_192608(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_192610(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_192618(uint64_t a1)
{
  *(void *)a1 = off_2415A00;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_192694(uint64_t a1)
{
  *(void *)a1 = off_2415A00;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_192730(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  long double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  long double v3 = *v1;

  return pow(v3, v2);
}

uint64_t sub_19278C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_192794(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19279C(uint64_t a1)
{
  *(void *)a1 = off_2415A58;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_192818(uint64_t a1)
{
  *(void *)a1 = off_2415A58;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1928B4(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  BOOL v2 = *v1 < (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double result = 0.0;
  if (v2) {
    return 1.0;
  }
  return result;
}

uint64_t sub_19290C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_192914(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19291C(uint64_t a1)
{
  *(void *)a1 = off_2415AB0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_192998(uint64_t a1)
{
  *(void *)a1 = off_2415AB0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_192A34(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  BOOL v2 = *v1 > (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double result = 0.0;
  if (!v2) {
    return 1.0;
  }
  return result;
}

uint64_t sub_192A8C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_192A94(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_192A9C(uint64_t a1)
{
  *(void *)a1 = off_2415B08;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_192B18(uint64_t a1)
{
  *(void *)a1 = off_2415B08;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_192BB4(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  BOOL v2 = *v1 <= (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double result = 0.0;
  if (!v2) {
    return 1.0;
  }
  return result;
}

uint64_t sub_192C0C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_192C14(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_192C1C(uint64_t a1)
{
  *(void *)a1 = off_2415B60;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_192C98(uint64_t a1)
{
  *(void *)a1 = off_2415B60;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_192D34(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  BOOL v2 = *v1 < (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double result = 0.0;
  if (!v2) {
    return 1.0;
  }
  return result;
}

uint64_t sub_192D8C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_192D94(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_192D9C(uint64_t a1)
{
  *(void *)a1 = off_2415BB8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_192E18(uint64_t a1)
{
  *(void *)a1 = off_2415BB8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_192EB4(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  BOOL v2 = *v1 == (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double result = 0.0;
  if (v2) {
    return 1.0;
  }
  return result;
}

uint64_t sub_192F0C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_192F14(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_192F1C(uint64_t a1)
{
  *(void *)a1 = off_2415C10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_192F98(uint64_t a1)
{
  *(void *)a1 = off_2415C10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_193034(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  BOOL v2 = *v1 == (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double result = 0.0;
  if (!v2) {
    return 1.0;
  }
  return result;
}

uint64_t sub_19308C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_193094(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19309C(uint64_t a1)
{
  *(void *)a1 = off_2415C68;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_193118(uint64_t a1)
{
  *(void *)a1 = off_2415C68;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1931B4(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  BOOL v3 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) == 0.0;
  double result = 0.0;
  BOOL v3 = v3 || *v1 == 0.0;
  if (!v3) {
    return 1.0;
  }
  return result;
}

uint64_t sub_193210(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_193218(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_193220(uint64_t a1)
{
  *(void *)a1 = off_2415CC0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19329C(uint64_t a1)
{
  *(void *)a1 = off_2415CC0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_193338(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  BOOL v3 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) == 0.0;
  double result = 0.0;
  BOOL v3 = v3 || *v1 == 0.0;
  if (v3) {
    return 1.0;
  }
  return result;
}

uint64_t sub_193394(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19339C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1933A4(uint64_t a1)
{
  *(void *)a1 = off_2415D18;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_193420(uint64_t a1)
{
  *(void *)a1 = off_2415D18;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1934BC(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  BOOL v3 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) == 0.0;
  double result = 0.0;
  BOOL v3 = v3 && *v1 == 0.0;
  if (!v3) {
    return 1.0;
  }
  return result;
}

uint64_t sub_193518(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_193520(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_193528(uint64_t a1)
{
  *(void *)a1 = off_2415D70;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1935A4(uint64_t a1)
{
  *(void *)a1 = off_2415D70;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_193640(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  BOOL v3 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) == 0.0;
  double result = 0.0;
  BOOL v3 = v3 && *v1 == 0.0;
  if (v3) {
    return 1.0;
  }
  return result;
}

uint64_t sub_19369C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1936A4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1936AC(uint64_t a1)
{
  *(void *)a1 = off_2415DC8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_193728(uint64_t a1)
{
  *(void *)a1 = off_2415DC8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1937C4(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  BOOL v3 = v2 == 0.0;
  double result = 0.0;
  if (v3 != (*v1 == 0.0)) {
    return 1.0;
  }
  return result;
}

uint64_t sub_193830(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_193838(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_193840(uint64_t a1)
{
  *(void *)a1 = off_2415E20;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1938BC(uint64_t a1)
{
  *(void *)a1 = off_2415E20;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_193958(uint64_t a1)
{
  double v1 = *(double **)(a1 + 8);
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  BOOL v3 = v2 != 0.0;
  double result = 1.0;
  if (v3 != (*v1 != 0.0)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1939C4(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1939CC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_1939D4(uint64_t a1, uint64_t a2, _DWORD *a3, void **a4, uint64_t *a5)
{
  if ((*(unsigned int (**)(void))(*(void *)*a4 + 32))() - 106 > 4) {
    return 0;
  }
  uint64_t v10 = *a4;
  (*(void (**)(std::string *__return_ptr, void *))(*(void *)*a4 + 40))(&v27, *a4);
  int v11 = std::string::insert(&v27, 0, "(");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  size_t v13 = std::string::append(&v28, ")");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  switch(*a3)
  {
    case 2:
      std::string::size_type v15 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v15 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v15 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v15 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v15 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v15 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 0xE:
      std::string::size_type v15 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 0xF:
      std::string::size_type v15 = 2;
      char v26 = 2;
      __int16 v17 = 15676;
      goto LABEL_20;
    case 0x10:
      std::string::size_type v15 = 2;
      char v26 = 2;
      __int16 v17 = 15677;
      goto LABEL_20;
    case 0x12:
      std::string::size_type v15 = 2;
      char v26 = 2;
      __int16 v17 = 15649;
      goto LABEL_20;
    case 0x14:
      std::string::size_type v15 = 2;
      char v26 = 2;
      __int16 v17 = 15678;
      goto LABEL_20;
    case 0x15:
      std::string::size_type v15 = 1;
      char v26 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 0x16:
      std::string::size_type v15 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 0x17:
      std::string::size_type v15 = 4;
      char v26 = 4;
      int v18 = 1684955502;
      goto LABEL_24;
    case 0x18:
      std::string::size_type v15 = 2;
      char v26 = 2;
      __int16 v17 = 29295;
LABEL_20:
      LOWORD(__p[0]) = v17;
      BYTE2(__p[0]) = 0;
      break;
    case 0x19:
      std::string::size_type v15 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 0x1A:
      std::string::size_type v15 = 3;
      char v26 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 0x1B:
      std::string::size_type v15 = 4;
      char v26 = 4;
      int v18 = 1919905400;
LABEL_24:
      LODWORD(__p[0]) = v18;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v15 = 7;
      char v26 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  size_t v19 = std::string::append(&v29, (const std::string::value_type *)__p, v15);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  BOOL v21 = std::string::append(&v30, "t");
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  std::string::size_type v32 = v21->__r_.__value_.__r.__words[2];
  long long v31 = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v30.__r_.__value_.__l.__data_);
    if ((v26 & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_34;
    }
  }
  else if ((v26 & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_29;
    }
LABEL_35:
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_36;
  }
LABEL_34:
  operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_35;
  }
LABEL_29:
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_30;
  }
LABEL_36:
  operator delete(v27.__r_.__value_.__l.__data_);
LABEL_30:
  switch((*(unsigned int (**)(void *))(*(void *)v10 + 32))(v10))
  {
    case 'j':
      int v23 = sub_194880(a1, &v31, a2, a4, a5);
      goto LABEL_43;
    case 'k':
      int v23 = sub_194648(a1, &v31, a2, a4, a5);
      goto LABEL_43;
    case 'l':
      int v23 = sub_194410(a1, &v31, a2, a4, a5);
      goto LABEL_43;
    case 'm':
      int v23 = sub_1941D8(a1, &v31, a2, a4, a5);
      goto LABEL_43;
    case 'n':
      int v23 = sub_193FA4(a1, &v31, a2, a4, a5);
LABEL_43:
      int v16 = v23;
      if (SHIBYTE(v32) < 0) {
        goto LABEL_44;
      }
      return v16;
    default:
      int v16 = 0;
      if (SHIBYTE(v32) < 0) {
LABEL_44:
      }
        operator delete((void *)v31);
      break;
  }
  return v16;
}

void sub_193E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
LABEL_12:
    }
      _Unwind_Resume(exception_object);
LABEL_11:
    operator delete(a15);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void *sub_193FA4(uint64_t a1, void *a2, uint64_t a3, void **a4, uint64_t *a5)
{
  double result = *a4;
  if (*a4)
  {
    if (result)
    {
      uint64_t v9 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v9 + 56))(v9);
      (*(void (**)(void *))(*(void *)v9 + 64))(v9);
      uint64_t v10 = *(void *)(a1 + 72);
      uint64_t v13 = *(void *)(v10 + 8);
      uint64_t v11 = v10 + 8;
      uint64_t v12 = v13;
      if (!v13) {
        return 0;
      }
      int v14 = *((char *)a2 + 23);
      if (v14 >= 0) {
        size_t v15 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v15 = a2[1];
      }
      if (v14 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v16 = v11;
      do
      {
        int v17 = *(char *)(v12 + 55);
        if (v17 >= 0) {
          size_t v18 = *(unsigned __int8 *)(v12 + 55);
        }
        else {
          size_t v18 = *(void *)(v12 + 40);
        }
        if (v17 >= 0) {
          size_t v19 = (const void *)(v12 + 32);
        }
        else {
          size_t v19 = *(const void **)(v12 + 32);
        }
        if (v15 >= v18) {
          size_t v20 = v18;
        }
        else {
          size_t v20 = v15;
        }
        int v21 = memcmp(v19, a2, v20);
        BOOL v22 = v18 < v15;
        if (v21) {
          BOOL v22 = v21 < 0;
        }
        BOOL v23 = !v22;
        if (v22) {
          int v24 = (uint64_t *)(v12 + 8);
        }
        else {
          int v24 = (uint64_t *)v12;
        }
        if (v23) {
          uint64_t v16 = v12;
        }
        uint64_t v12 = *v24;
      }
      while (*v24);
      if (v16 == v11) {
        return 0;
      }
      int v25 = *(char *)(v16 + 55);
      size_t v26 = v25 >= 0 ? *(unsigned __int8 *)(v16 + 55) : *(void *)(v16 + 40);
      std::string v27 = v25 >= 0 ? (const void *)(v16 + 32) : *(const void **)(v16 + 32);
      size_t v28 = v26 >= v15 ? v15 : v26;
      int v29 = memcmp(a2, v27, v28);
      BOOL v30 = v15 < v26;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      if (v30)
      {
        return 0;
      }
      else
      {
        int v31 = *(_DWORD *)(v16 + 64);
        *a5 = sub_194AAC(a1, &v31);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_1941D8(uint64_t a1, void *a2, uint64_t a3, void **a4, uint64_t *a5)
{
  double result = *a4;
  if (*a4)
  {
    if (result)
    {
      uint64_t v9 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v9 + 56))(v9);
      (*(void (**)(void *))(*(void *)v9 + 64))(v9);
      uint64_t v10 = *(void *)(a1 + 72);
      uint64_t v13 = *(void *)(v10 + 8);
      uint64_t v11 = v10 + 8;
      uint64_t v12 = v13;
      if (!v13) {
        return 0;
      }
      int v14 = *((char *)a2 + 23);
      if (v14 >= 0) {
        size_t v15 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v15 = a2[1];
      }
      if (v14 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v16 = v11;
      do
      {
        int v17 = *(char *)(v12 + 55);
        if (v17 >= 0) {
          size_t v18 = *(unsigned __int8 *)(v12 + 55);
        }
        else {
          size_t v18 = *(void *)(v12 + 40);
        }
        if (v17 >= 0) {
          size_t v19 = (const void *)(v12 + 32);
        }
        else {
          size_t v19 = *(const void **)(v12 + 32);
        }
        if (v15 >= v18) {
          size_t v20 = v18;
        }
        else {
          size_t v20 = v15;
        }
        int v21 = memcmp(v19, a2, v20);
        BOOL v22 = v18 < v15;
        if (v21) {
          BOOL v22 = v21 < 0;
        }
        BOOL v23 = !v22;
        if (v22) {
          int v24 = (uint64_t *)(v12 + 8);
        }
        else {
          int v24 = (uint64_t *)v12;
        }
        if (v23) {
          uint64_t v16 = v12;
        }
        uint64_t v12 = *v24;
      }
      while (*v24);
      if (v16 == v11) {
        return 0;
      }
      int v25 = *(char *)(v16 + 55);
      size_t v26 = v25 >= 0 ? *(unsigned __int8 *)(v16 + 55) : *(void *)(v16 + 40);
      std::string v27 = v25 >= 0 ? (const void *)(v16 + 32) : *(const void **)(v16 + 32);
      size_t v28 = v26 >= v15 ? v15 : v26;
      int v29 = memcmp(a2, v27, v28);
      BOOL v30 = v15 < v26;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      if (v30)
      {
        return 0;
      }
      else
      {
        int v31 = *(_DWORD *)(v16 + 64);
        *a5 = sub_198D38(a1, &v31);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_194410(uint64_t a1, void *a2, uint64_t a3, void **a4, uint64_t *a5)
{
  double result = *a4;
  if (*a4)
  {
    if (result)
    {
      uint64_t v9 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v9 + 56))(v9);
      (*(void (**)(void *))(*(void *)v9 + 64))(v9);
      uint64_t v10 = *(void *)(a1 + 72);
      uint64_t v13 = *(void *)(v10 + 8);
      uint64_t v11 = v10 + 8;
      uint64_t v12 = v13;
      if (!v13) {
        return 0;
      }
      int v14 = *((char *)a2 + 23);
      if (v14 >= 0) {
        size_t v15 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v15 = a2[1];
      }
      if (v14 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v16 = v11;
      do
      {
        int v17 = *(char *)(v12 + 55);
        if (v17 >= 0) {
          size_t v18 = *(unsigned __int8 *)(v12 + 55);
        }
        else {
          size_t v18 = *(void *)(v12 + 40);
        }
        if (v17 >= 0) {
          size_t v19 = (const void *)(v12 + 32);
        }
        else {
          size_t v19 = *(const void **)(v12 + 32);
        }
        if (v15 >= v18) {
          size_t v20 = v18;
        }
        else {
          size_t v20 = v15;
        }
        int v21 = memcmp(v19, a2, v20);
        BOOL v22 = v18 < v15;
        if (v21) {
          BOOL v22 = v21 < 0;
        }
        BOOL v23 = !v22;
        if (v22) {
          int v24 = (uint64_t *)(v12 + 8);
        }
        else {
          int v24 = (uint64_t *)v12;
        }
        if (v23) {
          uint64_t v16 = v12;
        }
        uint64_t v12 = *v24;
      }
      while (*v24);
      if (v16 == v11) {
        return 0;
      }
      int v25 = *(char *)(v16 + 55);
      size_t v26 = v25 >= 0 ? *(unsigned __int8 *)(v16 + 55) : *(void *)(v16 + 40);
      std::string v27 = v25 >= 0 ? (const void *)(v16 + 32) : *(const void **)(v16 + 32);
      size_t v28 = v26 >= v15 ? v15 : v26;
      int v29 = memcmp(a2, v27, v28);
      BOOL v30 = v15 < v26;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      if (v30)
      {
        return 0;
      }
      else
      {
        int v31 = *(_DWORD *)(v16 + 64);
        *a5 = sub_181328(a1, &v31);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_194648(uint64_t a1, void *a2, uint64_t a3, void **a4, uint64_t *a5)
{
  double result = *a4;
  if (*a4)
  {
    if (result)
    {
      uint64_t v9 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v9 + 56))(v9);
      (*(void (**)(void *))(*(void *)v9 + 64))(v9);
      uint64_t v10 = *(void *)(a1 + 72);
      uint64_t v13 = *(void *)(v10 + 8);
      uint64_t v11 = v10 + 8;
      uint64_t v12 = v13;
      if (!v13) {
        return 0;
      }
      int v14 = *((char *)a2 + 23);
      if (v14 >= 0) {
        size_t v15 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v15 = a2[1];
      }
      if (v14 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v16 = v11;
      do
      {
        int v17 = *(char *)(v12 + 55);
        if (v17 >= 0) {
          size_t v18 = *(unsigned __int8 *)(v12 + 55);
        }
        else {
          size_t v18 = *(void *)(v12 + 40);
        }
        if (v17 >= 0) {
          size_t v19 = (const void *)(v12 + 32);
        }
        else {
          size_t v19 = *(const void **)(v12 + 32);
        }
        if (v15 >= v18) {
          size_t v20 = v18;
        }
        else {
          size_t v20 = v15;
        }
        int v21 = memcmp(v19, a2, v20);
        BOOL v22 = v18 < v15;
        if (v21) {
          BOOL v22 = v21 < 0;
        }
        BOOL v23 = !v22;
        if (v22) {
          int v24 = (uint64_t *)(v12 + 8);
        }
        else {
          int v24 = (uint64_t *)v12;
        }
        if (v23) {
          uint64_t v16 = v12;
        }
        uint64_t v12 = *v24;
      }
      while (*v24);
      if (v16 == v11) {
        return 0;
      }
      int v25 = *(char *)(v16 + 55);
      size_t v26 = v25 >= 0 ? *(unsigned __int8 *)(v16 + 55) : *(void *)(v16 + 40);
      std::string v27 = v25 >= 0 ? (const void *)(v16 + 32) : *(const void **)(v16 + 32);
      size_t v28 = v26 >= v15 ? v15 : v26;
      int v29 = memcmp(a2, v27, v28);
      BOOL v30 = v15 < v26;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      if (v30)
      {
        return 0;
      }
      else
      {
        int v31 = *(_DWORD *)(v16 + 64);
        *a5 = sub_1855B8(a1, &v31);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_194880(uint64_t a1, void *a2, uint64_t a3, void **a4, uint64_t *a5)
{
  double result = *a4;
  if (*a4)
  {
    if (result)
    {
      uint64_t v9 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v9 + 56))(v9);
      (*(void (**)(void *))(*(void *)v9 + 64))(v9);
      uint64_t v10 = *(void *)(a1 + 72);
      uint64_t v13 = *(void *)(v10 + 8);
      uint64_t v12 = v10 + 8;
      uint64_t v11 = v13;
      if (!v13) {
        return 0;
      }
      int v14 = *((char *)a2 + 23);
      if (v14 >= 0) {
        size_t v15 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v15 = a2[1];
      }
      if (v14 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v16 = v12;
      do
      {
        int v17 = *(char *)(v11 + 55);
        if (v17 >= 0) {
          size_t v18 = *(unsigned __int8 *)(v11 + 55);
        }
        else {
          size_t v18 = *(void *)(v11 + 40);
        }
        if (v17 >= 0) {
          size_t v19 = (const void *)(v11 + 32);
        }
        else {
          size_t v19 = *(const void **)(v11 + 32);
        }
        if (v15 >= v18) {
          size_t v20 = v18;
        }
        else {
          size_t v20 = v15;
        }
        int v21 = memcmp(v19, a2, v20);
        BOOL v22 = v18 < v15;
        if (v21) {
          BOOL v22 = v21 < 0;
        }
        BOOL v23 = !v22;
        if (v22) {
          int v24 = (uint64_t *)(v11 + 8);
        }
        else {
          int v24 = (uint64_t *)v11;
        }
        if (v23) {
          uint64_t v16 = v11;
        }
        uint64_t v11 = *v24;
      }
      while (*v24);
      if (v16 == v12) {
        return 0;
      }
      int v25 = *(char *)(v16 + 55);
      size_t v26 = v25 >= 0 ? *(unsigned __int8 *)(v16 + 55) : *(void *)(v16 + 40);
      std::string v27 = v25 >= 0 ? (const void *)(v16 + 32) : *(const void **)(v16 + 32);
      size_t v28 = v26 >= v15 ? v15 : v26;
      int v29 = memcmp(a2, v27, v28);
      BOOL v30 = v15 < v26;
      if (v29) {
        BOOL v30 = v29 < 0;
      }
      if (v30)
      {
        return 0;
      }
      else
      {
        int v31 = *(_DWORD *)(v16 + 64);
        *a5 = sub_18DC40(a1, &v31);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

uint64_t sub_194AAC(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0x7D0:
      operator new();
    case 0x7D1:
      operator new();
    case 0x7D2:
      operator new();
    case 0x7D3:
      operator new();
    case 0x7D4:
      operator new();
    case 0x7D5:
      operator new();
    case 0x7D6:
      operator new();
    case 0x7D7:
      operator new();
    case 0x7D8:
      operator new();
    case 0x7D9:
      operator new();
    case 0x7DA:
      operator new();
    case 0x7DB:
      operator new();
    case 0x7DC:
      operator new();
    case 0x7DD:
      operator new();
    case 0x7DE:
      operator new();
    case 0x7DF:
      operator new();
    case 0x7E0:
      operator new();
    case 0x7E1:
      operator new();
    case 0x7E2:
      operator new();
    case 0x7E3:
      operator new();
    case 0x7E4:
      operator new();
    case 0x7E5:
      operator new();
    case 0x7E6:
      operator new();
    case 0x7E7:
      operator new();
    case 0x7E8:
      operator new();
    case 0x7E9:
      operator new();
    case 0x7EA:
      operator new();
    case 0x7EB:
      operator new();
    case 0x7EC:
      operator new();
    case 0x7ED:
      operator new();
    case 0x7EE:
      operator new();
    case 0x7EF:
      operator new();
    case 0x7F0:
      operator new();
    case 0x7F1:
      operator new();
    case 0x7F2:
      operator new();
    case 0x7F3:
      operator new();
    case 0x7F4:
      operator new();
    case 0x7F5:
      operator new();
    case 0x7F6:
      operator new();
    case 0x7F7:
      operator new();
    case 0x7F8:
      operator new();
    case 0x7F9:
      operator new();
    case 0x7FA:
      operator new();
    case 0x7FB:
      operator new();
    case 0x7FC:
      operator new();
    case 0x7FD:
      operator new();
    case 0x7FE:
      operator new();
    case 0x7FF:
      operator new();
    case 0x800:
      operator new();
    case 0x801:
      operator new();
    case 0x802:
      operator new();
    case 0x803:
      operator new();
    case 0x804:
      operator new();
    case 0x805:
      operator new();
    case 0x806:
      operator new();
    case 0x807:
      operator new();
    case 0x808:
      operator new();
    case 0x809:
      operator new();
    case 0x80A:
      operator new();
    case 0x80B:
      operator new();
    case 0x80C:
      operator new();
    case 0x80D:
      operator new();
    default:
      switch(*a2)
      {
        case 0x418:
          operator new();
        case 0x419:
          operator new();
        case 0x41A:
          operator new();
        case 0x41B:
          operator new();
        case 0x41C:
          operator new();
        case 0x41D:
          operator new();
        case 0x41E:
          operator new();
        case 0x41F:
          operator new();
        case 0x420:
          operator new();
        case 0x421:
          operator new();
        case 0x422:
          operator new();
        case 0x423:
          operator new();
        case 0x424:
          operator new();
        case 0x425:
          operator new();
        case 0x426:
          operator new();
        case 0x427:
          operator new();
        case 0x428:
          operator new();
        case 0x429:
          operator new();
        case 0x42A:
          operator new();
        case 0x42B:
          operator new();
        case 0x42C:
          operator new();
        case 0x42D:
          operator new();
        case 0x42E:
          operator new();
        case 0x42F:
          operator new();
        case 0x430:
          operator new();
        case 0x431:
          operator new();
        case 0x432:
          operator new();
        case 0x433:
          operator new();
        case 0x434:
          operator new();
        case 0x435:
          operator new();
        case 0x436:
          operator new();
        case 0x437:
          operator new();
        case 0x438:
          operator new();
        case 0x439:
          operator new();
        case 0x43A:
          operator new();
        case 0x43B:
          operator new();
        default:
          return 0;
      }
  }
}

void sub_1960D4()
{
}

double sub_1960E8(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) + *(double *)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_196110()
{
  return 116;
}

void sub_196118(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)/t)");
}

void sub_196148()
{
}

double sub_19615C(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) + *(double *)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_196184()
{
  return 116;
}

void sub_19618C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)*t)");
}

void sub_1961BC()
{
}

double sub_1961D0(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) - *(double *)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_1961F8()
{
  return 116;
}

void sub_196200(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)/t)");
}

void sub_196230()
{
}

double sub_196244(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) - *(double *)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_19626C()
{
  return 116;
}

void sub_196274(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)*t)");
}

void sub_1962A4()
{
}

double sub_1962B8(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) * *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1962E0()
{
  return 116;
}

void sub_1962E8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)/t)");
}

void sub_196318()
{
}

double sub_19632C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) * *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_196354()
{
  return 116;
}

void sub_19635C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)*t)");
}

void sub_19638C()
{
}

double sub_1963A0(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / *(double *)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_1963C8()
{
  return 116;
}

void sub_1963D0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)+t)");
}

void sub_196400()
{
}

double sub_196414(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_19643C()
{
  return 116;
}

void sub_196444(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)/t)");
}

void sub_196474()
{
}

double sub_196488(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1964B0()
{
  return 116;
}

void sub_1964B8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)*t)");
}

void sub_1964E8()
{
}

double sub_1964FC(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) + *(double *)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_196524()
{
  return 116;
}

void sub_19652C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)/t)");
}

void sub_19655C()
{
}

double sub_196570(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) + *(double *)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_196598()
{
  return 116;
}

void sub_1965A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)*t)");
}

void sub_1965D0()
{
}

double sub_1965E4(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) - *(double *)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_19660C()
{
  return 116;
}

void sub_196614(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)/t)");
}

void sub_196644()
{
}

double sub_196658(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) - *(double *)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_196680()
{
  return 116;
}

void sub_196688(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)*t)");
}

void sub_1966B8()
{
}

double sub_1966CC(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) * *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1966F4()
{
  return 116;
}

void sub_1966FC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)/t)");
}

void sub_19672C()
{
}

double sub_196740(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) * *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_196768()
{
  return 116;
}

void sub_196770(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)*t)");
}

void sub_1967A0()
{
}

double sub_1967B4(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) / *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1967DC()
{
  return 116;
}

void sub_1967E4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)/t)");
}

void sub_196814()
{
}

double sub_196828(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) / *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_196850()
{
  return 116;
}

void sub_196858(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)*t)");
}

void sub_196888()
{
}

double sub_19689C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1968C4()
{
  return 116;
}

void sub_1968CC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)*t)-t");
}

void sub_1968FC()
{
}

double sub_196910(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_196938()
{
  return 116;
}

void sub_196940(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)*t)-t");
}

void sub_196970()
{
}

double sub_196984(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1969AC()
{
  return 116;
}

void sub_1969B4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)-t");
}

void sub_1969E4()
{
}

double sub_1969F8(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_196A20()
{
  return 116;
}

void sub_196A28(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)*t)-t");
}

void sub_196A58()
{
}

double sub_196A6C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_196A94()
{
  return 116;
}

void sub_196A9C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)/t)-t");
}

void sub_196ACC()
{
}

double sub_196AE0(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_196B08()
{
  return 116;
}

void sub_196B10(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)/t)-t");
}

void sub_196B40()
{
}

double sub_196B54(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_196B7C()
{
  return 116;
}

void sub_196B84(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)/t)-t");
}

void sub_196BB4()
{
}

double sub_196BC8(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) / *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_196BF0()
{
  return 116;
}

void sub_196BF8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)/t)-t");
}

void sub_196C28()
{
}

double sub_196C3C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_196C64()
{
  return 116;
}

void sub_196C6C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t*t)");
}

void sub_196C9C()
{
}

double sub_196CB0(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_196CD8()
{
  return 116;
}

void sub_196CE0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t*t)");
}

void sub_196D10()
{
}

double sub_196D24(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_196D4C()
{
  return 116;
}

void sub_196D54(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t/t)");
}

void sub_196D84()
{
}

double sub_196D98(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_196DC0()
{
  return 116;
}

void sub_196DC8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t/t)");
}

void sub_196DF8()
{
}

double sub_196E0C(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_196E34()
{
  return 116;
}

void sub_196E3C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t/t)");
}

void sub_196E6C()
{
}

double sub_196E80(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_196EA8()
{
  return 116;
}

void sub_196EB0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t/t)");
}

void sub_196EE0()
{
}

double sub_196EF4(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_196F1C()
{
  return 116;
}

void sub_196F24(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t*t)");
}

void sub_196F54()
{
}

double sub_196F68(uint64_t a1)
{
  return *(double *)(a1 + 8) / (**(double **)(a1 + 16) + *(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_196F90()
{
  return 116;
}

void sub_196F98(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t+(t*t))");
}

void sub_196FC8()
{
}

double sub_196FDC(uint64_t a1)
{
  return *(double *)(a1 + 8) / (**(double **)(a1 + 16) - *(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_197004()
{
  return 116;
}

void sub_19700C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t-(t*t))");
}

void sub_19703C()
{
}

double sub_197050(uint64_t a1)
{
  return *(double *)(a1 + 8) * (**(double **)(a1 + 16) + *(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_197078()
{
  return 116;
}

void sub_197080(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t+(t*t))");
}

void sub_1970B0()
{
}

double sub_1970C4(uint64_t a1)
{
  return *(double *)(a1 + 8) * (**(double **)(a1 + 16) - *(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1970EC()
{
  return 116;
}

void sub_1970F4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t-(t*t))");
}

void sub_197124()
{
}

double sub_197138(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_197160()
{
  return 116;
}

void sub_197168(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t*t)");
}

void sub_197198()
{
}

double sub_1971AC(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1971D4()
{
  return 116;
}

void sub_1971DC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t/t)");
}

void sub_19720C()
{
}

double sub_197220(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_197248()
{
  return 116;
}

void sub_197250(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t*t)");
}

void sub_197280()
{
}

double sub_197294(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1972BC()
{
  return 116;
}

void sub_1972C4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t/t)");
}

void sub_1972F4()
{
}

double sub_197308(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_197330()
{
  return 116;
}

void sub_197338(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t*t)");
}

void sub_197368()
{
}

double sub_19737C(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1973A4()
{
  return 116;
}

void sub_1973AC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t/t)");
}

void sub_1973DC()
{
}

double sub_1973F0(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_197418()
{
  return 116;
}

void sub_197420(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t*t)");
}

void sub_197450()
{
}

double sub_197464(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_19748C()
{
  return 116;
}

void sub_197494(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t/t)");
}

void sub_1974C4()
{
}

double sub_1974D8(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) - (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_197500()
{
  return 116;
}

void sub_197508(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t-t)");
}

void sub_197538()
{
}

double sub_19754C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_197574()
{
  return 116;
}

void sub_19757C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t-t)");
}

void sub_1975AC()
{
}

double sub_1975C0(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_1975E8()
{
  return 116;
}

void sub_1975F0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t+t)");
}

void sub_197620()
{
}

double sub_197634(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_19765C()
{
  return 116;
}

void sub_197664(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t-t)");
}

void sub_197694()
{
}

double sub_1976A8(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1976D0()
{
  return 116;
}

void sub_1976D8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t-t)");
}

void sub_197708()
{
}

double sub_19771C(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_197744()
{
  return 116;
}

void sub_19774C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t+t)");
}

void sub_19777C()
{
}

double sub_197790(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_1977B8()
{
  return 116;
}

void sub_1977C0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t+t)");
}

void sub_1977F0()
{
}

double sub_197804(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_19782C()
{
  return 116;
}

void sub_197834(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t+t)");
}

void sub_197864()
{
}

double sub_197878(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1978A0()
{
  return 116;
}

void sub_1978A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t+t)");
}

void sub_1978D8()
{
}

double sub_1978EC(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_197914()
{
  return 116;
}

void sub_19791C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t+t)");
}

void sub_19794C()
{
}

double sub_197960(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_197988()
{
  return 116;
}

void sub_197990(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t+t)");
}

void sub_1979C0()
{
}

double sub_1979D4(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_1979FC()
{
  return 116;
}

void sub_197A04(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t+t)");
}

void sub_197A34()
{
}

double sub_197A48(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_197A70()
{
  return 116;
}

void sub_197A78(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t+t)");
}

void sub_197AA8()
{
}

double sub_197ABC(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_197AE4()
{
  return 116;
}

void sub_197AEC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t-t)");
}

void sub_197B1C()
{
}

double sub_197B30(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_197B58()
{
  return 116;
}

void sub_197B60(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t-t)");
}

void sub_197B90()
{
}

double sub_197BA4(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_197BCC()
{
  return 116;
}

void sub_197BD4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t-t)");
}

void sub_197C04()
{
}

double sub_197C18(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_197C40()
{
  return 116;
}

void sub_197C48(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t-t)");
}

void sub_197C78()
{
}

double sub_197C8C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_197CB4()
{
  return 116;
}

void sub_197CBC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t*t)");
}

void sub_197CEC()
{
}

double sub_197D00(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_197D28()
{
  return 116;
}

void sub_197D30(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t/t)");
}

void sub_197D60()
{
}

double sub_197D74(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_197D9C()
{
  return 116;
}

void sub_197DA4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t*t)");
}

void sub_197DD4()
{
}

double sub_197DE8(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_197E10()
{
  return 116;
}

void sub_197E18(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t/t)");
}

void sub_197E48()
{
}

double sub_197E5C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_197E84()
{
  return 116;
}

void sub_197E8C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t*t)");
}

void sub_197EBC()
{
}

double sub_197ED0(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_197EF8()
{
  return 116;
}

void sub_197F00(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t/t)");
}

void sub_197F30()
{
}

double sub_197F44(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_197F6C()
{
  return 116;
}

void sub_197F74(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t*t)");
}

void sub_197FA4()
{
}

double sub_197FB8(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_197FE0()
{
  return 116;
}

void sub_197FE8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t/t)");
}

void sub_198018()
{
}

double sub_19802C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_198054()
{
  return 116;
}

void sub_19805C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t+t)");
}

void sub_19808C()
{
}

double sub_1980A0(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1980C8()
{
  return 116;
}

void sub_1980D0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t+t)");
}

void sub_198100()
{
}

double sub_198114(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_19813C()
{
  return 116;
}

void sub_198144(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t+t)");
}

void sub_198174()
{
}

double sub_198188(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) / (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1981B0()
{
  return 116;
}

void sub_1981B8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t+t)");
}

void sub_1981E8()
{
}

double sub_1981FC(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_198224()
{
  return 116;
}

void sub_19822C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t-t)");
}

void sub_19825C()
{
}

double sub_198270(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) / (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_198298()
{
  return 116;
}

void sub_1982A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t-t)");
}

void sub_1982D0()
{
}

double sub_1982E4(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_19830C()
{
  return 116;
}

void sub_198314(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t-t)");
}

void sub_198344()
{
}

double sub_198358(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_198380()
{
  return 116;
}

void sub_198388(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t*t)");
}

void sub_1983B8()
{
}

double sub_1983CC(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * (*(double *)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_1983F4()
{
  return 116;
}

void sub_1983FC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t/t)");
}

void sub_19842C()
{
}

double sub_198440(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_198468()
{
  return 116;
}

void sub_198470(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t-t)");
}

void sub_1984A0()
{
}

double sub_1984B4(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1984DC()
{
  return 116;
}

void sub_1984E4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t*t)");
}

void sub_198514()
{
}

double sub_198528(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) * (*(double *)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_198550()
{
  return 116;
}

void sub_198558(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t*(t/t))");
}

void sub_198588()
{
}

double sub_19859C(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) * (*(double *)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_1985C4()
{
  return 116;
}

void sub_1985CC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t*(t/t))");
}

void sub_1985FC()
{
}

double sub_198610(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_198638()
{
  return 116;
}

void sub_198640(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t/(t*t))");
}

void sub_198670()
{
}

double sub_198684(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) / (*(double *)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1986AC()
{
  return 116;
}

void sub_1986B4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t/(t*t))");
}

void sub_1986E4()
{
}

double sub_1986F8(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_198720()
{
  return 116;
}

void sub_198728(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)*t");
}

void sub_198758()
{
}

double sub_19876C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_198794()
{
  return 116;
}

void sub_19879C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)/t");
}

void sub_1987CC()
{
}

double sub_1987E0(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_198808()
{
  return 116;
}

void sub_198810(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)*t");
}

void sub_198840()
{
}

double sub_198854(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_19887C()
{
  return 116;
}

void sub_198884(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)/t");
}

void sub_1988B4()
{
}

double sub_1988C8(uint64_t a1)
{
  return **(double **)(a1 + 32) * (*(double *)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24));
}

uint64_t sub_1988F0()
{
  return 116;
}

void sub_1988F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))*t");
}

void sub_198928()
{
}

double sub_19893C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_198964()
{
  return 116;
}

void sub_19896C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))/t");
}

void sub_19899C()
{
}

double sub_1989B0(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1989D8()
{
  return 116;
}

void sub_1989E0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t+t)");
}

void sub_198A10()
{
}

double sub_198A24(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_198A4C()
{
  return 116;
}

void sub_198A54(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t-t)");
}

void sub_198A84()
{
}

double sub_198A98(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_198AC0()
{
  return 116;
}

void sub_198AC8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t+t)");
}

void sub_198AF8()
{
}

double sub_198B0C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_198B34()
{
  return 116;
}

void sub_198B3C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t-t)");
}

void sub_198B6C()
{
}

double sub_198B80(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_198BA8()
{
  return 116;
}

void sub_198BB0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t-t)");
}

void sub_198BE0()
{
}

double sub_198BF4(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - (*(double *)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_198C1C()
{
  return 116;
}

void sub_198C24(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t-t)");
}

void sub_198C54()
{
}

double sub_198C68(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_198C90()
{
  return 116;
}

void sub_198C98(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t*t)");
}

void sub_198CC8()
{
}

double sub_198CDC(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * *(double *)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_198D04()
{
  return 116;
}

void sub_198D0C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)/t");
}

uint64_t sub_198D38(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0x7D0:
      operator new();
    case 0x7D1:
      operator new();
    case 0x7D2:
      operator new();
    case 0x7D3:
      operator new();
    case 0x7D4:
      operator new();
    case 0x7D5:
      operator new();
    case 0x7D6:
      operator new();
    case 0x7D7:
      operator new();
    case 0x7D8:
      operator new();
    case 0x7D9:
      operator new();
    case 0x7DA:
      operator new();
    case 0x7DB:
      operator new();
    case 0x7DC:
      operator new();
    case 0x7DD:
      operator new();
    case 0x7DE:
      operator new();
    case 0x7DF:
      operator new();
    case 0x7E0:
      operator new();
    case 0x7E1:
      operator new();
    case 0x7E2:
      operator new();
    case 0x7E3:
      operator new();
    case 0x7E4:
      operator new();
    case 0x7E5:
      operator new();
    case 0x7E6:
      operator new();
    case 0x7E7:
      operator new();
    case 0x7E8:
      operator new();
    case 0x7E9:
      operator new();
    case 0x7EA:
      operator new();
    case 0x7EB:
      operator new();
    case 0x7EC:
      operator new();
    case 0x7ED:
      operator new();
    case 0x7EE:
      operator new();
    case 0x7EF:
      operator new();
    case 0x7F0:
      operator new();
    case 0x7F1:
      operator new();
    case 0x7F2:
      operator new();
    case 0x7F3:
      operator new();
    case 0x7F4:
      operator new();
    case 0x7F5:
      operator new();
    case 0x7F6:
      operator new();
    case 0x7F7:
      operator new();
    case 0x7F8:
      operator new();
    case 0x7F9:
      operator new();
    case 0x7FA:
      operator new();
    case 0x7FB:
      operator new();
    case 0x7FC:
      operator new();
    case 0x7FD:
      operator new();
    case 0x7FE:
      operator new();
    case 0x7FF:
      operator new();
    case 0x800:
      operator new();
    case 0x801:
      operator new();
    case 0x802:
      operator new();
    case 0x803:
      operator new();
    case 0x804:
      operator new();
    case 0x805:
      operator new();
    case 0x806:
      operator new();
    case 0x807:
      operator new();
    case 0x808:
      operator new();
    case 0x809:
      operator new();
    case 0x80A:
      operator new();
    case 0x80B:
      operator new();
    case 0x80C:
      operator new();
    case 0x80D:
      operator new();
    default:
      switch(*a2)
      {
        case 0x418:
          operator new();
        case 0x419:
          operator new();
        case 0x41A:
          operator new();
        case 0x41B:
          operator new();
        case 0x41C:
          operator new();
        case 0x41D:
          operator new();
        case 0x41E:
          operator new();
        case 0x41F:
          operator new();
        case 0x420:
          operator new();
        case 0x421:
          operator new();
        case 0x422:
          operator new();
        case 0x423:
          operator new();
        case 0x424:
          operator new();
        case 0x425:
          operator new();
        case 0x426:
          operator new();
        case 0x427:
          operator new();
        case 0x428:
          operator new();
        case 0x429:
          operator new();
        case 0x42A:
          operator new();
        case 0x42B:
          operator new();
        case 0x42C:
          operator new();
        case 0x42D:
          operator new();
        case 0x42E:
          operator new();
        case 0x42F:
          operator new();
        case 0x430:
          operator new();
        case 0x431:
          operator new();
        case 0x432:
          operator new();
        case 0x433:
          operator new();
        case 0x434:
          operator new();
        case 0x435:
          operator new();
        case 0x436:
          operator new();
        case 0x437:
          operator new();
        case 0x438:
          operator new();
        case 0x439:
          operator new();
        case 0x43A:
          operator new();
        case 0x43B:
          operator new();
        default:
          return 0;
      }
  }
}

void sub_19A368()
{
}

double sub_19A37C(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) + **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_19A3A4()
{
  return 115;
}

void sub_19A3AC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)/t)");
}

void sub_19A3DC()
{
}

double sub_19A3F0(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) + **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_19A418()
{
  return 115;
}

void sub_19A420(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)*t)");
}

void sub_19A450()
{
}

double sub_19A464(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) - **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_19A48C()
{
  return 115;
}

void sub_19A494(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)/t)");
}

void sub_19A4C4()
{
}

double sub_19A4D8(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) - **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_19A500()
{
  return 115;
}

void sub_19A508(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)*t)");
}

void sub_19A538()
{
}

double sub_19A54C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) * **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_19A574()
{
  return 115;
}

void sub_19A57C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)/t)");
}

void sub_19A5AC()
{
}

double sub_19A5C0(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) * **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_19A5E8()
{
  return 115;
}

void sub_19A5F0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)*t)");
}

void sub_19A620()
{
}

double sub_19A634(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / **(double **)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_19A65C()
{
  return 115;
}

void sub_19A664(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)+t)");
}

void sub_19A694()
{
}

double sub_19A6A8(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_19A6D0()
{
  return 115;
}

void sub_19A6D8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)/t)");
}

void sub_19A708()
{
}

double sub_19A71C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_19A744()
{
  return 115;
}

void sub_19A74C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)*t)");
}

void sub_19A77C()
{
}

double sub_19A790(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) + **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_19A7B8()
{
  return 115;
}

void sub_19A7C0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)/t)");
}

void sub_19A7F0()
{
}

double sub_19A804(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) + **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_19A82C()
{
  return 115;
}

void sub_19A834(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)*t)");
}

void sub_19A864()
{
}

double sub_19A878(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) - **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_19A8A0()
{
  return 115;
}

void sub_19A8A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)/t)");
}

void sub_19A8D8()
{
}

double sub_19A8EC(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) - **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_19A914()
{
  return 115;
}

void sub_19A91C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)*t)");
}

void sub_19A94C()
{
}

double sub_19A960(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) * **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_19A988()
{
  return 115;
}

void sub_19A990(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)/t)");
}

void sub_19A9C0()
{
}

double sub_19A9D4(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) * **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_19A9FC()
{
  return 115;
}

void sub_19AA04(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)*t)");
}

void sub_19AA34()
{
}

double sub_19AA48(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) / **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_19AA70()
{
  return 115;
}

void sub_19AA78(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)/t)");
}

void sub_19AAA8()
{
}

double sub_19AABC(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) / **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_19AAE4()
{
  return 115;
}

void sub_19AAEC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)*t)");
}

void sub_19AB1C()
{
}

double sub_19AB30(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_19AB58()
{
  return 115;
}

void sub_19AB60(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)*t)-t");
}

void sub_19AB90()
{
}

double sub_19ABA4(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_19ABCC()
{
  return 115;
}

void sub_19ABD4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)*t)-t");
}

void sub_19AC04()
{
}

double sub_19AC18(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_19AC40()
{
  return 115;
}

void sub_19AC48(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)-t");
}

void sub_19AC78()
{
}

double sub_19AC8C(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_19ACB4()
{
  return 115;
}

void sub_19ACBC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)*t)-t");
}

void sub_19ACEC()
{
}

double sub_19AD00(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_19AD28()
{
  return 115;
}

void sub_19AD30(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)/t)-t");
}

void sub_19AD60()
{
}

double sub_19AD74(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_19AD9C()
{
  return 115;
}

void sub_19ADA4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)/t)-t");
}

void sub_19ADD4()
{
}

double sub_19ADE8(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_19AE10()
{
  return 115;
}

void sub_19AE18(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)/t)-t");
}

void sub_19AE48()
{
}

double sub_19AE5C(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) / **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_19AE84()
{
  return 115;
}

void sub_19AE8C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)/t)-t");
}

void sub_19AEBC()
{
}

double sub_19AED0(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_19AEF8()
{
  return 115;
}

void sub_19AF00(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t*t)");
}

void sub_19AF30()
{
}

double sub_19AF44(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_19AF6C()
{
  return 115;
}

void sub_19AF74(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t*t)");
}

void sub_19AFA4()
{
}

double sub_19AFB8(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_19AFE0()
{
  return 115;
}

void sub_19AFE8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t/t)");
}

void sub_19B018()
{
}

double sub_19B02C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_19B054()
{
  return 115;
}

void sub_19B05C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t/t)");
}

void sub_19B08C()
{
}

double sub_19B0A0(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_19B0C8()
{
  return 115;
}

void sub_19B0D0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t/t)");
}

void sub_19B100()
{
}

double sub_19B114(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_19B13C()
{
  return 115;
}

void sub_19B144(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t/t)");
}

void sub_19B174()
{
}

double sub_19B188(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_19B1B0()
{
  return 115;
}

void sub_19B1B8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t*t)");
}

void sub_19B1E8()
{
}

double sub_19B1FC(uint64_t a1)
{
  return *(double *)(a1 + 8) / (**(double **)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_19B224()
{
  return 115;
}

void sub_19B22C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t+(t*t))");
}

void sub_19B25C()
{
}

double sub_19B270(uint64_t a1)
{
  return *(double *)(a1 + 8) / (**(double **)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_19B298()
{
  return 115;
}

void sub_19B2A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t-(t*t))");
}

void sub_19B2D0()
{
}

double sub_19B2E4(uint64_t a1)
{
  return *(double *)(a1 + 8) * (**(double **)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_19B30C()
{
  return 115;
}

void sub_19B314(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t+(t*t))");
}

void sub_19B344()
{
}

double sub_19B358(uint64_t a1)
{
  return *(double *)(a1 + 8) * (**(double **)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_19B380()
{
  return 115;
}

void sub_19B388(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t-(t*t))");
}

void sub_19B3B8()
{
}

double sub_19B3CC(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_19B3F4()
{
  return 115;
}

void sub_19B3FC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t*t)");
}

void sub_19B42C()
{
}

double sub_19B440(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) - **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_19B468()
{
  return 115;
}

void sub_19B470(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t/t)");
}

void sub_19B4A0()
{
}

double sub_19B4B4(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_19B4DC()
{
  return 115;
}

void sub_19B4E4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t*t)");
}

void sub_19B514()
{
}

double sub_19B528(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_19B550()
{
  return 115;
}

void sub_19B558(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t/t)");
}

void sub_19B588()
{
}

double sub_19B59C(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_19B5C4()
{
  return 115;
}

void sub_19B5CC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t*t)");
}

void sub_19B5FC()
{
}

double sub_19B610(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_19B638()
{
  return 115;
}

void sub_19B640(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t/t)");
}

void sub_19B670()
{
}

double sub_19B684(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_19B6AC()
{
  return 115;
}

void sub_19B6B4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t*t)");
}

void sub_19B6E4()
{
}

double sub_19B6F8(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_19B720()
{
  return 115;
}

void sub_19B728(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t/t)");
}

void sub_19B758()
{
}

double sub_19B76C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) - (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_19B794()
{
  return 115;
}

void sub_19B79C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t-t)");
}

void sub_19B7CC()
{
}

double sub_19B7E0(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_19B808()
{
  return 115;
}

void sub_19B810(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t-t)");
}

void sub_19B840()
{
}

double sub_19B854(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + **(double **)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_19B87C()
{
  return 115;
}

void sub_19B884(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t+t)");
}

void sub_19B8B4()
{
}

double sub_19B8C8(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_19B8F0()
{
  return 115;
}

void sub_19B8F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t-t)");
}

void sub_19B928()
{
}

double sub_19B93C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_19B964()
{
  return 115;
}

void sub_19B96C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t-t)");
}

void sub_19B99C()
{
}

double sub_19B9B0(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_19B9D8()
{
  return 115;
}

void sub_19B9E0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t+t)");
}

void sub_19BA10()
{
}

double sub_19BA24(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_19BA4C()
{
  return 115;
}

void sub_19BA54(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t+t)");
}

void sub_19BA84()
{
}

double sub_19BA98(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_19BAC0()
{
  return 115;
}

void sub_19BAC8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t+t)");
}

void sub_19BAF8()
{
}

double sub_19BB0C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_19BB34()
{
  return 115;
}

void sub_19BB3C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t+t)");
}

void sub_19BB6C()
{
}

double sub_19BB80(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_19BBA8()
{
  return 115;
}

void sub_19BBB0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t+t)");
}

void sub_19BBE0()
{
}

double sub_19BBF4(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_19BC1C()
{
  return 115;
}

void sub_19BC24(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t+t)");
}

void sub_19BC54()
{
}

double sub_19BC68(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + **(double **)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_19BC90()
{
  return 115;
}

void sub_19BC98(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t+t)");
}

void sub_19BCC8()
{
}

double sub_19BCDC(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + **(double **)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_19BD04()
{
  return 115;
}

void sub_19BD0C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t+t)");
}

void sub_19BD3C()
{
}

double sub_19BD50(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_19BD78()
{
  return 115;
}

void sub_19BD80(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t-t)");
}

void sub_19BDB0()
{
}

double sub_19BDC4(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_19BDEC()
{
  return 115;
}

void sub_19BDF4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t-t)");
}

void sub_19BE24()
{
}

double sub_19BE38(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_19BE60()
{
  return 115;
}

void sub_19BE68(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t-t)");
}

void sub_19BE98()
{
}

double sub_19BEAC(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_19BED4()
{
  return 115;
}

void sub_19BEDC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t-t)");
}

void sub_19BF0C()
{
}

double sub_19BF20(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_19BF48()
{
  return 115;
}

void sub_19BF50(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t*t)");
}

void sub_19BF80()
{
}

double sub_19BF94(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_19BFBC()
{
  return 115;
}

void sub_19BFC4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t/t)");
}

void sub_19BFF4()
{
}

double sub_19C008(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_19C030()
{
  return 115;
}

void sub_19C038(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t*t)");
}

void sub_19C068()
{
}

double sub_19C07C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_19C0A4()
{
  return 115;
}

void sub_19C0AC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t/t)");
}

void sub_19C0DC()
{
}

double sub_19C0F0(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_19C118()
{
  return 115;
}

void sub_19C120(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t*t)");
}

void sub_19C150()
{
}

double sub_19C164(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_19C18C()
{
  return 115;
}

void sub_19C194(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t/t)");
}

void sub_19C1C4()
{
}

double sub_19C1D8(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_19C200()
{
  return 115;
}

void sub_19C208(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t*t)");
}

void sub_19C238()
{
}

double sub_19C24C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_19C274()
{
  return 115;
}

void sub_19C27C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t/t)");
}

void sub_19C2AC()
{
}

double sub_19C2C0(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_19C2E8()
{
  return 115;
}

void sub_19C2F0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t+t)");
}

void sub_19C320()
{
}

double sub_19C334(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_19C35C()
{
  return 115;
}

void sub_19C364(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t+t)");
}

void sub_19C394()
{
}

double sub_19C3A8(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_19C3D0()
{
  return 115;
}

void sub_19C3D8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t+t)");
}

void sub_19C408()
{
}

double sub_19C41C(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) / (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_19C444()
{
  return 115;
}

void sub_19C44C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t+t)");
}

void sub_19C47C()
{
}

double sub_19C490(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_19C4B8()
{
  return 115;
}

void sub_19C4C0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t-t)");
}

void sub_19C4F0()
{
}

double sub_19C504(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) / (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_19C52C()
{
  return 115;
}

void sub_19C534(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t-t)");
}

void sub_19C564()
{
}

double sub_19C578(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_19C5A0()
{
  return 115;
}

void sub_19C5A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t-t)");
}

void sub_19C5D8()
{
}

double sub_19C5EC(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_19C614()
{
  return 115;
}

void sub_19C61C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t*t)");
}

void sub_19C64C()
{
}

double sub_19C660(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_19C688()
{
  return 115;
}

void sub_19C690(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t/t)");
}

void sub_19C6C0()
{
}

double sub_19C6D4(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_19C6FC()
{
  return 115;
}

void sub_19C704(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t-t)");
}

void sub_19C734()
{
}

double sub_19C748(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_19C770()
{
  return 115;
}

void sub_19C778(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t*t)");
}

void sub_19C7A8()
{
}

double sub_19C7BC(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) * (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_19C7E4()
{
  return 115;
}

void sub_19C7EC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t*(t/t))");
}

void sub_19C81C()
{
}

double sub_19C830(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) * (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_19C858()
{
  return 115;
}

void sub_19C860(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t*(t/t))");
}

void sub_19C890()
{
}

double sub_19C8A4(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_19C8CC()
{
  return 115;
}

void sub_19C8D4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t/(t*t))");
}

void sub_19C904()
{
}

double sub_19C918(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) / (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_19C940()
{
  return 115;
}

void sub_19C948(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t/(t*t))");
}

void sub_19C978()
{
}

double sub_19C98C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) - **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_19C9B4()
{
  return 115;
}

void sub_19C9BC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)*t");
}

void sub_19C9EC()
{
}

double sub_19CA00(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) - **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_19CA28()
{
  return 115;
}

void sub_19CA30(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)/t");
}

void sub_19CA60()
{
}

double sub_19CA74(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_19CA9C()
{
  return 115;
}

void sub_19CAA4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)*t");
}

void sub_19CAD4()
{
}

double sub_19CAE8(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_19CB10()
{
  return 115;
}

void sub_19CB18(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)/t");
}

void sub_19CB48()
{
}

double sub_19CB5C(uint64_t a1)
{
  return **(double **)(a1 + 32) * (*(double *)(a1 + 8) + **(double **)(a1 + 16) - **(double **)(a1 + 24));
}

uint64_t sub_19CB84()
{
  return 115;
}

void sub_19CB8C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))*t");
}

void sub_19CBBC()
{
}

double sub_19CBD0(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16) - **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_19CBF8()
{
  return 115;
}

void sub_19CC00(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))/t");
}

void sub_19CC30()
{
}

double sub_19CC44(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_19CC6C()
{
  return 115;
}

void sub_19CC74(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t+t)");
}

void sub_19CCA4()
{
}

double sub_19CCB8(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_19CCE0()
{
  return 115;
}

void sub_19CCE8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t-t)");
}

void sub_19CD18()
{
}

double sub_19CD2C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_19CD54()
{
  return 115;
}

void sub_19CD5C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t+t)");
}

void sub_19CD8C()
{
}

double sub_19CDA0(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_19CDC8()
{
  return 115;
}

void sub_19CDD0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t-t)");
}

void sub_19CE00()
{
}

double sub_19CE14(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_19CE3C()
{
  return 115;
}

void sub_19CE44(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t-t)");
}

void sub_19CE74()
{
}

double sub_19CE88(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_19CEB0()
{
  return 115;
}

void sub_19CEB8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t-t)");
}

void sub_19CEE8()
{
}

double sub_19CEFC(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_19CF24()
{
  return 115;
}

void sub_19CF2C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t*t)");
}

void sub_19CF5C()
{
}

double sub_19CF70(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_19CF98()
{
  return 115;
}

void sub_19CFA0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)/t");
}

uint64_t sub_19CFCC(uint64_t a1)
{
  *(void *)a1 = off_241A1D8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19D048(uint64_t a1)
{
  *(void *)a1 = off_241A1D8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19D0E4(uint64_t a1)
{
  return (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16))
       + **(double **)(a1 + 8);
}

uint64_t sub_19D138(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19D140(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19D148(uint64_t a1)
{
  *(void *)a1 = off_241A248;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19D1C4(uint64_t a1)
{
  *(void *)a1 = off_241A248;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19D260(uint64_t a1)
{
  return (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16))
       - **(double **)(a1 + 8);
}

uint64_t sub_19D2B4(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19D2BC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19D2C4(uint64_t a1)
{
  *(void *)a1 = off_241A2A0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19D340(uint64_t a1)
{
  *(void *)a1 = off_241A2A0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19D3DC(uint64_t a1)
{
  return (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16))
       * **(double **)(a1 + 8);
}

uint64_t sub_19D430(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19D438(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19D440(uint64_t a1)
{
  *(void *)a1 = off_241A2F8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19D4BC(uint64_t a1)
{
  *(void *)a1 = off_241A2F8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19D558(uint64_t a1)
{
  return (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16))
       / **(double **)(a1 + 8);
}

uint64_t sub_19D5AC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19D5B4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19D5BC(uint64_t a1)
{
  *(void *)a1 = off_241A350;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19D638(uint64_t a1)
{
  *(void *)a1 = off_241A350;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19D6D4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  long double v3 = **(double **)(a1 + 8);

  return fmod(v2, v3);
}

uint64_t sub_19D734(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19D73C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19D744(uint64_t a1)
{
  *(void *)a1 = off_241A3A8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19D7C0(uint64_t a1)
{
  *(void *)a1 = off_241A3A8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19D85C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  long double v3 = **(double **)(a1 + 8);

  return pow(v2, v3);
}

uint64_t sub_19D8BC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19D8C4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19D8CC(uint64_t a1)
{
  *(void *)a1 = off_241A400;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19D948(uint64_t a1)
{
  *(void *)a1 = off_241A400;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19D9E4(uint64_t a1)
{
  BOOL v1 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) < **(double **)(a1 + 8);
  double result = 0.0;
  if (v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_19DA44(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19DA4C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19DA54(uint64_t a1)
{
  *(void *)a1 = off_241A458;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19DAD0(uint64_t a1)
{
  *(void *)a1 = off_241A458;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19DB6C(uint64_t a1)
{
  BOOL v1 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) > **(double **)(a1 + 8);
  double result = 0.0;
  if (!v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_19DBCC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19DBD4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19DBDC(uint64_t a1)
{
  *(void *)a1 = off_241A4B0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19DC58(uint64_t a1)
{
  *(void *)a1 = off_241A4B0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19DCF4(uint64_t a1)
{
  BOOL v1 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) <= **(double **)(a1 + 8);
  double result = 0.0;
  if (!v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_19DD54(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19DD5C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19DD64(uint64_t a1)
{
  *(void *)a1 = off_241A508;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19DDE0(uint64_t a1)
{
  *(void *)a1 = off_241A508;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19DE7C(uint64_t a1)
{
  BOOL v1 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) < **(double **)(a1 + 8);
  double result = 0.0;
  if (!v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_19DEDC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19DEE4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19DEEC(uint64_t a1)
{
  *(void *)a1 = off_241A560;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19DF68(uint64_t a1)
{
  *(void *)a1 = off_241A560;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19E004(uint64_t a1)
{
  BOOL v1 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) == **(double **)(a1 + 8);
  double result = 0.0;
  if (v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_19E064(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19E06C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19E074(uint64_t a1)
{
  *(void *)a1 = off_241A5B8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19E0F0(uint64_t a1)
{
  *(void *)a1 = off_241A5B8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19E18C(uint64_t a1)
{
  BOOL v1 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) == **(double **)(a1 + 8);
  double result = 0.0;
  if (!v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_19E1EC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19E1F4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19E1FC(uint64_t a1)
{
  *(void *)a1 = off_241A610;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19E278(uint64_t a1)
{
  *(void *)a1 = off_241A610;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19E314(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  BOOL v3 = **(double **)(a1 + 8) == 0.0 || v2 == 0.0;
  double result = 1.0;
  if (v3) {
    return 0.0;
  }
  return result;
}

uint64_t sub_19E378(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19E380(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19E388(uint64_t a1)
{
  *(void *)a1 = off_241A668;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19E404(uint64_t a1)
{
  *(void *)a1 = off_241A668;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19E4A0(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  BOOL v3 = **(double **)(a1 + 8) == 0.0 || v2 == 0.0;
  double result = 1.0;
  if (!v3) {
    return 0.0;
  }
  return result;
}

uint64_t sub_19E504(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19E50C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19E514(uint64_t a1)
{
  *(void *)a1 = off_241A6C0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19E590(uint64_t a1)
{
  *(void *)a1 = off_241A6C0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19E62C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  BOOL v3 = **(double **)(a1 + 8) == 0.0 && v2 == 0.0;
  double result = 1.0;
  if (v3) {
    return 0.0;
  }
  return result;
}

uint64_t sub_19E690(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19E698(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19E6A0(uint64_t a1)
{
  *(void *)a1 = off_241A718;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19E71C(uint64_t a1)
{
  *(void *)a1 = off_241A718;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19E7B8(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  BOOL v3 = **(double **)(a1 + 8) == 0.0 && v2 == 0.0;
  double result = 1.0;
  if (!v3) {
    return 0.0;
  }
  return result;
}

uint64_t sub_19E81C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19E824(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19E82C(uint64_t a1)
{
  *(void *)a1 = off_241A770;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19E8A8(uint64_t a1)
{
  *(void *)a1 = off_241A770;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19E944(uint64_t a1)
{
  BOOL v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) == 0.0;
  double result = 0.0;
  if (v2 != (**(double **)(a1 + 8) == 0.0)) {
    return 1.0;
  }
  return result;
}

uint64_t sub_19E9B8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19E9C0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19E9C8(uint64_t a1)
{
  *(void *)a1 = off_241A7C8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_19EA44(uint64_t a1)
{
  *(void *)a1 = off_241A7C8;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_19EAE0(uint64_t a1)
{
  BOOL v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) != 0.0;
  double result = 1.0;
  if (v2 != (**(double **)(a1 + 8) != 0.0)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_19EB54(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19EB5C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_19EB64(uint64_t a1, _DWORD *a2, void **a3, uint64_t *a4)
{
  if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))() - 106 > 4) {
    return 0;
  }
  uint64_t v8 = *a3;
  switch(*a2)
  {
    case 2:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
      LOWORD(v26.__r_.__value_.__l.__data_) = 43;
      break;
    case 3:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
      LOWORD(v26.__r_.__value_.__l.__data_) = 45;
      break;
    case 4:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
      LOWORD(v26.__r_.__value_.__l.__data_) = 42;
      break;
    case 5:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
      LOWORD(v26.__r_.__value_.__l.__data_) = 47;
      break;
    case 6:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
      LOWORD(v26.__r_.__value_.__l.__data_) = 37;
      break;
    case 7:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
      LOWORD(v26.__r_.__value_.__l.__data_) = 94;
      break;
    case 0xE:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
      LOWORD(v26.__r_.__value_.__l.__data_) = 60;
      break;
    case 0xF:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 2;
      __int16 v10 = 15676;
      goto LABEL_20;
    case 0x10:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 2;
      __int16 v10 = 15677;
      goto LABEL_20;
    case 0x12:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 2;
      __int16 v10 = 15649;
      goto LABEL_20;
    case 0x14:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 2;
      __int16 v10 = 15678;
      goto LABEL_20;
    case 0x15:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 1;
      LOWORD(v26.__r_.__value_.__l.__data_) = 62;
      break;
    case 0x16:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 3;
      LODWORD(v26.__r_.__value_.__l.__data_) = 6581857;
      break;
    case 0x17:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 4;
      int v11 = 1684955502;
      goto LABEL_24;
    case 0x18:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 2;
      __int16 v10 = 29295;
LABEL_20:
      LOWORD(v26.__r_.__value_.__l.__data_) = v10;
      v26.__r_.__value_.__s.__data_[2] = 0;
      break;
    case 0x19:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 3;
      LODWORD(v26.__r_.__value_.__l.__data_) = 7499630;
      break;
    case 0x1A:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 3;
      LODWORD(v26.__r_.__value_.__l.__data_) = 7499640;
      break;
    case 0x1B:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 4;
      int v11 = 1919905400;
LABEL_24:
      LODWORD(v26.__r_.__value_.__l.__data_) = v11;
      v26.__r_.__value_.__s.__data_[4] = 0;
      break;
    default:
      *((unsigned char *)&v26.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v26, "UNKNOWN");
      break;
  }
  uint64_t v12 = std::string::insert(&v26, 0, "t");
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  int v14 = std::string::append(&v27, "(");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr, void *))(*(void *)v8 + 40))(__p, v8);
  if ((v25 & 0x80u) == 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (void **)__p[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v17 = v25;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)__p[1];
  }
  size_t v18 = std::string::append(&v28, (const std::string::value_type *)v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  size_t v20 = std::string::append(&v29, ")");
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v31 = v20->__r_.__value_.__r.__words[2];
  long long v30 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v29.__r_.__value_.__l.__data_);
    if (((char)v25 & 0x80000000) == 0)
    {
LABEL_33:
      if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_40;
    }
  }
  else if (((char)v25 & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_41:
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_42;
  }
LABEL_40:
  operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_41;
  }
LABEL_35:
  if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_36;
  }
LABEL_42:
  operator delete(v26.__r_.__value_.__l.__data_);
LABEL_36:
  switch((*(unsigned int (**)(void *))(*(void *)v8 + 32))(v8))
  {
    case 'j':
      BOOL v22 = sub_1A08E4(a1, &v30, a3, a4);
      goto LABEL_49;
    case 'k':
      BOOL v22 = sub_1A06B0(a1, &v30, a3, a4);
      goto LABEL_49;
    case 'l':
      BOOL v22 = sub_1A047C(a1, &v30, a3, a4);
      goto LABEL_49;
    case 'm':
      BOOL v22 = sub_1A0248(a1, &v30, a3, a4);
      goto LABEL_49;
    case 'n':
      BOOL v22 = sub_1A000C(a1, &v30, a3, a4);
LABEL_49:
      uint64_t v9 = v22;
      if (SHIBYTE(v31) < 0) {
        goto LABEL_50;
      }
      return v9;
    default:
      uint64_t v9 = 0;
      if (SHIBYTE(v31) < 0) {
LABEL_50:
      }
        operator delete((void *)v30);
      break;
  }
  return v9;
}

void sub_19F014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
LABEL_12:
    }
      _Unwind_Resume(exception_object);
LABEL_11:
    operator delete(a15);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void sub_19F164()
{
}

void sub_19F24C()
{
}

void sub_19F270()
{
}

void sub_19F358()
{
}

void sub_19F37C()
{
}

void sub_19F464()
{
}

void sub_19F488()
{
}

void sub_19F570()
{
}

void sub_19F594()
{
}

void sub_19F67C()
{
}

void sub_19F6A0()
{
}

void sub_19F788()
{
}

void sub_19F7AC()
{
}

void sub_19F894()
{
}

void sub_19F8B8()
{
}

void sub_19F9A0()
{
}

void sub_19F9C4()
{
}

void sub_19FAAC()
{
}

void sub_19FAD0()
{
}

void sub_19FBB8()
{
}

void sub_19FBDC()
{
}

void sub_19FCC4()
{
}

void sub_19FCE8()
{
}

void sub_19FDD0()
{
}

void sub_19FDF4()
{
}

void sub_19FEDC()
{
}

void sub_19FF00()
{
}

void sub_19FFE8()
{
}

void *sub_1A000C(uint64_t a1, void *a2, void **a3, uint64_t *a4)
{
  double result = *a3;
  if (*a3)
  {
    if (result)
    {
      uint64_t v8 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v8 + 56))(v8);
      (*(void (**)(void *))(*(void *)v8 + 64))(v8);
      uint64_t v9 = *(void *)(a1 + 72);
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v10 = v9 + 8;
      uint64_t v11 = v12;
      if (!v12) {
        return 0;
      }
      int v13 = *((char *)a2 + 23);
      if (v13 >= 0) {
        size_t v14 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v14 = a2[1];
      }
      if (v13 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v15 = v10;
      do
      {
        int v16 = *(char *)(v11 + 55);
        if (v16 >= 0) {
          size_t v17 = *(unsigned __int8 *)(v11 + 55);
        }
        else {
          size_t v17 = *(void *)(v11 + 40);
        }
        if (v16 >= 0) {
          size_t v18 = (const void *)(v11 + 32);
        }
        else {
          size_t v18 = *(const void **)(v11 + 32);
        }
        if (v14 >= v17) {
          size_t v19 = v17;
        }
        else {
          size_t v19 = v14;
        }
        int v20 = memcmp(v18, a2, v19);
        BOOL v21 = v17 < v14;
        if (v20) {
          BOOL v21 = v20 < 0;
        }
        BOOL v22 = !v21;
        if (v21) {
          BOOL v23 = (uint64_t *)(v11 + 8);
        }
        else {
          BOOL v23 = (uint64_t *)v11;
        }
        if (v22) {
          uint64_t v15 = v11;
        }
        uint64_t v11 = *v23;
      }
      while (*v23);
      if (v15 == v10) {
        return 0;
      }
      int v24 = *(char *)(v15 + 55);
      size_t v25 = v24 >= 0 ? *(unsigned __int8 *)(v15 + 55) : *(void *)(v15 + 40);
      std::string v26 = v24 >= 0 ? (const void *)(v15 + 32) : *(const void **)(v15 + 32);
      size_t v27 = v25 >= v14 ? v14 : v25;
      int v28 = memcmp(a2, v26, v27);
      BOOL v29 = v14 < v25;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
      if (v29)
      {
        return 0;
      }
      else
      {
        int v30 = *(_DWORD *)(v15 + 64);
        *a4 = sub_1A0B1C(a1, &v30);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_1A0248(uint64_t a1, void *a2, void **a3, uint64_t *a4)
{
  double result = *a3;
  if (*a3)
  {
    if (result)
    {
      uint64_t v8 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v8 + 56))(v8);
      (*(void (**)(void *))(*(void *)v8 + 64))(v8);
      uint64_t v9 = *(void *)(a1 + 72);
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v10 = v9 + 8;
      uint64_t v11 = v12;
      if (!v12) {
        return 0;
      }
      int v13 = *((char *)a2 + 23);
      if (v13 >= 0) {
        size_t v14 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v14 = a2[1];
      }
      if (v13 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v15 = v10;
      do
      {
        int v16 = *(char *)(v11 + 55);
        if (v16 >= 0) {
          size_t v17 = *(unsigned __int8 *)(v11 + 55);
        }
        else {
          size_t v17 = *(void *)(v11 + 40);
        }
        if (v16 >= 0) {
          size_t v18 = (const void *)(v11 + 32);
        }
        else {
          size_t v18 = *(const void **)(v11 + 32);
        }
        if (v14 >= v17) {
          size_t v19 = v17;
        }
        else {
          size_t v19 = v14;
        }
        int v20 = memcmp(v18, a2, v19);
        BOOL v21 = v17 < v14;
        if (v20) {
          BOOL v21 = v20 < 0;
        }
        BOOL v22 = !v21;
        if (v21) {
          BOOL v23 = (uint64_t *)(v11 + 8);
        }
        else {
          BOOL v23 = (uint64_t *)v11;
        }
        if (v22) {
          uint64_t v15 = v11;
        }
        uint64_t v11 = *v23;
      }
      while (*v23);
      if (v15 == v10) {
        return 0;
      }
      int v24 = *(char *)(v15 + 55);
      size_t v25 = v24 >= 0 ? *(unsigned __int8 *)(v15 + 55) : *(void *)(v15 + 40);
      std::string v26 = v24 >= 0 ? (const void *)(v15 + 32) : *(const void **)(v15 + 32);
      size_t v27 = v25 >= v14 ? v14 : v25;
      int v28 = memcmp(a2, v26, v27);
      BOOL v29 = v14 < v25;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
      if (v29)
      {
        return 0;
      }
      else
      {
        int v30 = *(_DWORD *)(v15 + 64);
        *a4 = sub_1A4AA0(a1, &v30);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_1A047C(uint64_t a1, void *a2, void **a3, uint64_t *a4)
{
  double result = *a3;
  if (*a3)
  {
    if (result)
    {
      uint64_t v8 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v8 + 56))(v8);
      (*(void (**)(void *))(*(void *)v8 + 64))(v8);
      uint64_t v9 = *(void *)(a1 + 72);
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v10 = v9 + 8;
      uint64_t v11 = v12;
      if (!v12) {
        return 0;
      }
      int v13 = *((char *)a2 + 23);
      if (v13 >= 0) {
        size_t v14 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v14 = a2[1];
      }
      if (v13 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v15 = v10;
      do
      {
        int v16 = *(char *)(v11 + 55);
        if (v16 >= 0) {
          size_t v17 = *(unsigned __int8 *)(v11 + 55);
        }
        else {
          size_t v17 = *(void *)(v11 + 40);
        }
        if (v16 >= 0) {
          size_t v18 = (const void *)(v11 + 32);
        }
        else {
          size_t v18 = *(const void **)(v11 + 32);
        }
        if (v14 >= v17) {
          size_t v19 = v17;
        }
        else {
          size_t v19 = v14;
        }
        int v20 = memcmp(v18, a2, v19);
        BOOL v21 = v17 < v14;
        if (v20) {
          BOOL v21 = v20 < 0;
        }
        BOOL v22 = !v21;
        if (v21) {
          BOOL v23 = (uint64_t *)(v11 + 8);
        }
        else {
          BOOL v23 = (uint64_t *)v11;
        }
        if (v22) {
          uint64_t v15 = v11;
        }
        uint64_t v11 = *v23;
      }
      while (*v23);
      if (v15 == v10) {
        return 0;
      }
      int v24 = *(char *)(v15 + 55);
      size_t v25 = v24 >= 0 ? *(unsigned __int8 *)(v15 + 55) : *(void *)(v15 + 40);
      std::string v26 = v24 >= 0 ? (const void *)(v15 + 32) : *(const void **)(v15 + 32);
      size_t v27 = v25 >= v14 ? v14 : v25;
      int v28 = memcmp(a2, v26, v27);
      BOOL v29 = v14 < v25;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
      if (v29)
      {
        return 0;
      }
      else
      {
        int v30 = *(_DWORD *)(v15 + 64);
        *a4 = sub_194AAC(a1, &v30);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_1A06B0(uint64_t a1, void *a2, void **a3, uint64_t *a4)
{
  double result = *a3;
  if (*a3)
  {
    if (result)
    {
      uint64_t v8 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v8 + 56))(v8);
      (*(void (**)(void *))(*(void *)v8 + 64))(v8);
      uint64_t v9 = *(void *)(a1 + 72);
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v10 = v9 + 8;
      uint64_t v11 = v12;
      if (!v12) {
        return 0;
      }
      int v13 = *((char *)a2 + 23);
      if (v13 >= 0) {
        size_t v14 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v14 = a2[1];
      }
      if (v13 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v15 = v10;
      do
      {
        int v16 = *(char *)(v11 + 55);
        if (v16 >= 0) {
          size_t v17 = *(unsigned __int8 *)(v11 + 55);
        }
        else {
          size_t v17 = *(void *)(v11 + 40);
        }
        if (v16 >= 0) {
          size_t v18 = (const void *)(v11 + 32);
        }
        else {
          size_t v18 = *(const void **)(v11 + 32);
        }
        if (v14 >= v17) {
          size_t v19 = v17;
        }
        else {
          size_t v19 = v14;
        }
        int v20 = memcmp(v18, a2, v19);
        BOOL v21 = v17 < v14;
        if (v20) {
          BOOL v21 = v20 < 0;
        }
        BOOL v22 = !v21;
        if (v21) {
          BOOL v23 = (uint64_t *)(v11 + 8);
        }
        else {
          BOOL v23 = (uint64_t *)v11;
        }
        if (v22) {
          uint64_t v15 = v11;
        }
        uint64_t v11 = *v23;
      }
      while (*v23);
      if (v15 == v10) {
        return 0;
      }
      int v24 = *(char *)(v15 + 55);
      size_t v25 = v24 >= 0 ? *(unsigned __int8 *)(v15 + 55) : *(void *)(v15 + 40);
      std::string v26 = v24 >= 0 ? (const void *)(v15 + 32) : *(const void **)(v15 + 32);
      size_t v27 = v25 >= v14 ? v14 : v25;
      int v28 = memcmp(a2, v26, v27);
      BOOL v29 = v14 < v25;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
      if (v29)
      {
        return 0;
      }
      else
      {
        int v30 = *(_DWORD *)(v15 + 64);
        *a4 = sub_1A8A14(a1, &v30);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_1A08E4(uint64_t a1, void *a2, void **a3, uint64_t *a4)
{
  double result = *a3;
  if (*a3)
  {
    if (result)
    {
      uint64_t v8 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v8 + 56))(v8);
      (*(void (**)(void *))(*(void *)v8 + 64))(v8);
      uint64_t v9 = *(void *)(a1 + 72);
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v10 = v9 + 8;
      uint64_t v11 = v12;
      if (!v12) {
        return 0;
      }
      int v13 = *((char *)a2 + 23);
      if (v13 >= 0) {
        size_t v14 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v14 = a2[1];
      }
      if (v13 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v15 = v10;
      do
      {
        int v16 = *(char *)(v11 + 55);
        if (v16 >= 0) {
          size_t v17 = *(unsigned __int8 *)(v11 + 55);
        }
        else {
          size_t v17 = *(void *)(v11 + 40);
        }
        if (v16 >= 0) {
          size_t v18 = (const void *)(v11 + 32);
        }
        else {
          size_t v18 = *(const void **)(v11 + 32);
        }
        if (v14 >= v17) {
          size_t v19 = v17;
        }
        else {
          size_t v19 = v14;
        }
        int v20 = memcmp(v18, a2, v19);
        BOOL v21 = v17 < v14;
        if (v20) {
          BOOL v21 = v20 < 0;
        }
        BOOL v22 = !v21;
        if (v21) {
          BOOL v23 = (uint64_t *)(v11 + 8);
        }
        else {
          BOOL v23 = (uint64_t *)v11;
        }
        if (v22) {
          uint64_t v15 = v11;
        }
        uint64_t v11 = *v23;
      }
      while (*v23);
      if (v15 == v10) {
        return 0;
      }
      int v24 = *(char *)(v15 + 55);
      size_t v25 = v24 >= 0 ? *(unsigned __int8 *)(v15 + 55) : *(void *)(v15 + 40);
      std::string v26 = v24 >= 0 ? (const void *)(v15 + 32) : *(const void **)(v15 + 32);
      size_t v27 = v25 >= v14 ? v14 : v25;
      int v28 = memcmp(a2, v26, v27);
      BOOL v29 = v14 < v25;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
      if (v29)
      {
        return 0;
      }
      else
      {
        int v30 = *(_DWORD *)(v15 + 64);
        *a4 = sub_198D38(a1, &v30);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

uint64_t sub_1A0B1C(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0x7D0:
      operator new();
    case 0x7D1:
      operator new();
    case 0x7D2:
      operator new();
    case 0x7D3:
      operator new();
    case 0x7D4:
      operator new();
    case 0x7D5:
      operator new();
    case 0x7D6:
      operator new();
    case 0x7D7:
      operator new();
    case 0x7D8:
      operator new();
    case 0x7D9:
      operator new();
    case 0x7DA:
      operator new();
    case 0x7DB:
      operator new();
    case 0x7DC:
      operator new();
    case 0x7DD:
      operator new();
    case 0x7DE:
      operator new();
    case 0x7DF:
      operator new();
    case 0x7E0:
      operator new();
    case 0x7E1:
      operator new();
    case 0x7E2:
      operator new();
    case 0x7E3:
      operator new();
    case 0x7E4:
      operator new();
    case 0x7E5:
      operator new();
    case 0x7E6:
      operator new();
    case 0x7E7:
      operator new();
    case 0x7E8:
      operator new();
    case 0x7E9:
      operator new();
    case 0x7EA:
      operator new();
    case 0x7EB:
      operator new();
    case 0x7EC:
      operator new();
    case 0x7ED:
      operator new();
    case 0x7EE:
      operator new();
    case 0x7EF:
      operator new();
    case 0x7F0:
      operator new();
    case 0x7F1:
      operator new();
    case 0x7F2:
      operator new();
    case 0x7F3:
      operator new();
    case 0x7F4:
      operator new();
    case 0x7F5:
      operator new();
    case 0x7F6:
      operator new();
    case 0x7F7:
      operator new();
    case 0x7F8:
      operator new();
    case 0x7F9:
      operator new();
    case 0x7FA:
      operator new();
    case 0x7FB:
      operator new();
    case 0x7FC:
      operator new();
    case 0x7FD:
      operator new();
    case 0x7FE:
      operator new();
    case 0x7FF:
      operator new();
    case 0x800:
      operator new();
    case 0x801:
      operator new();
    case 0x802:
      operator new();
    case 0x803:
      operator new();
    case 0x804:
      operator new();
    case 0x805:
      operator new();
    case 0x806:
      operator new();
    case 0x807:
      operator new();
    case 0x808:
      operator new();
    case 0x809:
      operator new();
    case 0x80A:
      operator new();
    case 0x80B:
      operator new();
    case 0x80C:
      operator new();
    case 0x80D:
      operator new();
    default:
      switch(*a2)
      {
        case 0x418:
          operator new();
        case 0x419:
          operator new();
        case 0x41A:
          operator new();
        case 0x41B:
          operator new();
        case 0x41C:
          operator new();
        case 0x41D:
          operator new();
        case 0x41E:
          operator new();
        case 0x41F:
          operator new();
        case 0x420:
          operator new();
        case 0x421:
          operator new();
        case 0x422:
          operator new();
        case 0x423:
          operator new();
        case 0x424:
          operator new();
        case 0x425:
          operator new();
        case 0x426:
          operator new();
        case 0x427:
          operator new();
        case 0x428:
          operator new();
        case 0x429:
          operator new();
        case 0x42A:
          operator new();
        case 0x42B:
          operator new();
        case 0x42C:
          operator new();
        case 0x42D:
          operator new();
        case 0x42E:
          operator new();
        case 0x42F:
          operator new();
        case 0x430:
          operator new();
        case 0x431:
          operator new();
        case 0x432:
          operator new();
        case 0x433:
          operator new();
        case 0x434:
          operator new();
        case 0x435:
          operator new();
        case 0x436:
          operator new();
        case 0x437:
          operator new();
        case 0x438:
          operator new();
        case 0x439:
          operator new();
        case 0x43A:
          operator new();
        case 0x43B:
          operator new();
        default:
          return 0;
      }
  }
}

void sub_1A214C()
{
}

double sub_1A2160(uint64_t a1)
{
  return *(double *)(a1 + 8) + (*(double *)(a1 + 16) + **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1A2180()
{
  return 0;
}

void sub_1A2188(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)/t)");
}

void sub_1A21B8()
{
}

double sub_1A21CC(uint64_t a1)
{
  return *(double *)(a1 + 8) + (*(double *)(a1 + 16) + **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1A21EC()
{
  return 0;
}

void sub_1A21F4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)*t)");
}

void sub_1A2224()
{
}

double sub_1A2238(uint64_t a1)
{
  return *(double *)(a1 + 8) + (*(double *)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1A2258()
{
  return 0;
}

void sub_1A2260(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)/t)");
}

void sub_1A2290()
{
}

double sub_1A22A4(uint64_t a1)
{
  return *(double *)(a1 + 8) + (*(double *)(a1 + 16) - **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1A22C4()
{
  return 0;
}

void sub_1A22CC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)*t)");
}

void sub_1A22FC()
{
}

double sub_1A2310(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) * **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1A2330()
{
  return 0;
}

void sub_1A2338(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)/t)");
}

void sub_1A2368()
{
}

double sub_1A237C(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) * **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1A239C()
{
  return 0;
}

void sub_1A23A4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)*t)");
}

void sub_1A23D4()
{
}

double sub_1A23E8(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) / **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1A2408()
{
  return 0;
}

void sub_1A2410(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)+t)");
}

void sub_1A2440()
{
}

double sub_1A2454(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) / **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1A2474()
{
  return 0;
}

void sub_1A247C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)/t)");
}

void sub_1A24AC()
{
}

double sub_1A24C0(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) / **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1A24E0()
{
  return 0;
}

void sub_1A24E8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)*t)");
}

void sub_1A2518()
{
}

double sub_1A252C(uint64_t a1)
{
  return *(double *)(a1 + 8) - (*(double *)(a1 + 16) + **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1A254C()
{
  return 0;
}

void sub_1A2554(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)/t)");
}

void sub_1A2584()
{
}

double sub_1A2598(uint64_t a1)
{
  return *(double *)(a1 + 8) - (*(double *)(a1 + 16) + **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1A25B8()
{
  return 0;
}

void sub_1A25C0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)*t)");
}

void sub_1A25F0()
{
}

double sub_1A2604(uint64_t a1)
{
  return *(double *)(a1 + 8) - (*(double *)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1A2624()
{
  return 0;
}

void sub_1A262C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)/t)");
}

void sub_1A265C()
{
}

double sub_1A2670(uint64_t a1)
{
  return *(double *)(a1 + 8) - (*(double *)(a1 + 16) - **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1A2690()
{
  return 0;
}

void sub_1A2698(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)*t)");
}

void sub_1A26C8()
{
}

double sub_1A26DC(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) * **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1A26FC()
{
  return 0;
}

void sub_1A2704(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)/t)");
}

void sub_1A2734()
{
}

double sub_1A2748(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) * **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1A2768()
{
  return 0;
}

void sub_1A2770(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)*t)");
}

void sub_1A27A0()
{
}

double sub_1A27B4(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) / **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1A27D4()
{
  return 0;
}

void sub_1A27DC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)/t)");
}

void sub_1A280C()
{
}

double sub_1A2820(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) / **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1A2840()
{
  return 0;
}

void sub_1A2848(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)*t)");
}

void sub_1A2878()
{
}

double sub_1A288C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1A28AC()
{
  return 0;
}

void sub_1A28B4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)*t)-t");
}

void sub_1A28E4()
{
}

double sub_1A28F8(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1A2918()
{
  return 0;
}

void sub_1A2920(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)*t)-t");
}

void sub_1A2950()
{
}

double sub_1A2964(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1A2984()
{
  return 0;
}

void sub_1A298C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)-t");
}

void sub_1A29BC()
{
}

double sub_1A29D0(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1A29F0()
{
  return 0;
}

void sub_1A29F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)*t)-t");
}

void sub_1A2A28()
{
}

double sub_1A2A3C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1A2A5C()
{
  return 0;
}

void sub_1A2A64(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)/t)-t");
}

void sub_1A2A94()
{
}

double sub_1A2AA8(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1A2AC8()
{
  return 0;
}

void sub_1A2AD0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)/t)-t");
}

void sub_1A2B00()
{
}

double sub_1A2B14(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1A2B34()
{
  return 0;
}

void sub_1A2B3C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)/t)-t");
}

void sub_1A2B6C()
{
}

double sub_1A2B80(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1A2BA0()
{
  return 0;
}

void sub_1A2BA8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)/t)-t");
}

void sub_1A2BD8()
{
}

double sub_1A2BEC(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1A2C0C()
{
  return 0;
}

void sub_1A2C14(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t*t)");
}

void sub_1A2C44()
{
}

double sub_1A2C58(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1A2C78()
{
  return 0;
}

void sub_1A2C80(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t*t)");
}

void sub_1A2CB0()
{
}

double sub_1A2CC4(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1A2CE4()
{
  return 0;
}

void sub_1A2CEC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t/t)");
}

void sub_1A2D1C()
{
}

double sub_1A2D30(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1A2D50()
{
  return 0;
}

void sub_1A2D58(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t/t)");
}

void sub_1A2D88()
{
}

double sub_1A2D9C(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1A2DBC()
{
  return 0;
}

void sub_1A2DC4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t/t)");
}

void sub_1A2DF4()
{
}

double sub_1A2E08(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1A2E28()
{
  return 0;
}

void sub_1A2E30(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t/t)");
}

void sub_1A2E60()
{
}

double sub_1A2E74(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1A2E94()
{
  return 0;
}

void sub_1A2E9C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t*t)");
}

void sub_1A2ECC()
{
}

double sub_1A2EE0(uint64_t a1)
{
  return *(double *)(a1 + 8) / (*(double *)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1A2F00()
{
  return 0;
}

void sub_1A2F08(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t+(t*t))");
}

void sub_1A2F38()
{
}

double sub_1A2F4C(uint64_t a1)
{
  return *(double *)(a1 + 8) / (*(double *)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1A2F6C()
{
  return 0;
}

void sub_1A2F74(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t-(t*t))");
}

void sub_1A2FA4()
{
}

double sub_1A2FB8(uint64_t a1)
{
  return *(double *)(a1 + 8) * (*(double *)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1A2FD8()
{
  return 0;
}

void sub_1A2FE0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t+(t*t))");
}

void sub_1A3010()
{
}

double sub_1A3024(uint64_t a1)
{
  return *(double *)(a1 + 8) * (*(double *)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1A3044()
{
  return 0;
}

void sub_1A304C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t-(t*t))");
}

void sub_1A307C()
{
}

double sub_1A3090(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1A30B0()
{
  return 0;
}

void sub_1A30B8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t*t)");
}

void sub_1A30E8()
{
}

double sub_1A30FC(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1A311C()
{
  return 0;
}

void sub_1A3124(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t/t)");
}

void sub_1A3154()
{
}

double sub_1A3168(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1A3188()
{
  return 0;
}

void sub_1A3190(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t*t)");
}

void sub_1A31C0()
{
}

double sub_1A31D4(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1A31F4()
{
  return 0;
}

void sub_1A31FC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t/t)");
}

void sub_1A322C()
{
}

double sub_1A3240(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1A3260()
{
  return 0;
}

void sub_1A3268(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t*t)");
}

void sub_1A3298()
{
}

double sub_1A32AC(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1A32CC()
{
  return 0;
}

void sub_1A32D4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t/t)");
}

void sub_1A3304()
{
}

double sub_1A3318(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1A3338()
{
  return 0;
}

void sub_1A3340(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t*t)");
}

void sub_1A3370()
{
}

double sub_1A3384(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1A33A4()
{
  return 0;
}

void sub_1A33AC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t/t)");
}

void sub_1A33DC()
{
}

double sub_1A33F0(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1A3410()
{
  return 0;
}

void sub_1A3418(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t-t)");
}

void sub_1A3448()
{
}

double sub_1A345C(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1A347C()
{
  return 0;
}

void sub_1A3484(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t-t)");
}

void sub_1A34B4()
{
}

double sub_1A34C8(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1A34E8()
{
  return 0;
}

void sub_1A34F0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t+t)");
}

void sub_1A3520()
{
}

double sub_1A3534(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1A3554()
{
  return 0;
}

void sub_1A355C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t-t)");
}

void sub_1A358C()
{
}

double sub_1A35A0(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1A35C0()
{
  return 0;
}

void sub_1A35C8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t-t)");
}

void sub_1A35F8()
{
}

double sub_1A360C(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) - (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1A362C()
{
  return 0;
}

void sub_1A3634(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t+t)");
}

void sub_1A3664()
{
}

double sub_1A3678(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1A3698()
{
  return 0;
}

void sub_1A36A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t+t)");
}

void sub_1A36D0()
{
}

double sub_1A36E4(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1A3704()
{
  return 0;
}

void sub_1A370C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t+t)");
}

void sub_1A373C()
{
}

double sub_1A3750(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1A3770()
{
  return 0;
}

void sub_1A3778(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t+t)");
}

void sub_1A37A8()
{
}

double sub_1A37BC(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) - (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1A37DC()
{
  return 0;
}

void sub_1A37E4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t+t)");
}

void sub_1A3814()
{
}

double sub_1A3828(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) - (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1A3848()
{
  return 0;
}

void sub_1A3850(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t+t)");
}

void sub_1A3880()
{
}

double sub_1A3894(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1A38B4()
{
  return 0;
}

void sub_1A38BC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t+t)");
}

void sub_1A38EC()
{
}

double sub_1A3900(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1A3920()
{
  return 0;
}

void sub_1A3928(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t+t)");
}

void sub_1A3958()
{
}

double sub_1A396C(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1A398C()
{
  return 0;
}

void sub_1A3994(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t-t)");
}

void sub_1A39C4()
{
}

double sub_1A39D8(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1A39F8()
{
  return 0;
}

void sub_1A3A00(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t-t)");
}

void sub_1A3A30()
{
}

double sub_1A3A44(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1A3A64()
{
  return 0;
}

void sub_1A3A6C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t-t)");
}

void sub_1A3A9C()
{
}

double sub_1A3AB0(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1A3AD0()
{
  return 0;
}

void sub_1A3AD8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t-t)");
}

void sub_1A3B08()
{
}

double sub_1A3B1C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1A3B3C()
{
  return 0;
}

void sub_1A3B44(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t*t)");
}

void sub_1A3B74()
{
}

double sub_1A3B88(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1A3BA8()
{
  return 0;
}

void sub_1A3BB0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t/t)");
}

void sub_1A3BE0()
{
}

double sub_1A3BF4(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1A3C14()
{
  return 0;
}

void sub_1A3C1C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t*t)");
}

void sub_1A3C4C()
{
}

double sub_1A3C60(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1A3C80()
{
  return 0;
}

void sub_1A3C88(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t/t)");
}

void sub_1A3CB8()
{
}

double sub_1A3CCC(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1A3CEC()
{
  return 0;
}

void sub_1A3CF4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t*t)");
}

void sub_1A3D24()
{
}

double sub_1A3D38(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1A3D58()
{
  return 0;
}

void sub_1A3D60(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t/t)");
}

void sub_1A3D90()
{
}

double sub_1A3DA4(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1A3DC4()
{
  return 0;
}

void sub_1A3DCC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t*t)");
}

void sub_1A3DFC()
{
}

double sub_1A3E10(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1A3E30()
{
  return 0;
}

void sub_1A3E38(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t/t)");
}

void sub_1A3E68()
{
}

double sub_1A3E7C(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1A3E9C()
{
  return 0;
}

void sub_1A3EA4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t+t)");
}

void sub_1A3ED4()
{
}

double sub_1A3EE8(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1A3F08()
{
  return 0;
}

void sub_1A3F10(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t+t)");
}

void sub_1A3F40()
{
}

double sub_1A3F54(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1A3F74()
{
  return 0;
}

void sub_1A3F7C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t+t)");
}

void sub_1A3FAC()
{
}

double sub_1A3FC0(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1A3FE0()
{
  return 0;
}

void sub_1A3FE8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t+t)");
}

void sub_1A4018()
{
}

double sub_1A402C(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1A404C()
{
  return 0;
}

void sub_1A4054(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t-t)");
}

void sub_1A4084()
{
}

double sub_1A4098(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1A40B8()
{
  return 0;
}

void sub_1A40C0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t-t)");
}

void sub_1A40F0()
{
}

double sub_1A4104(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1A4124()
{
  return 0;
}

void sub_1A412C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t-t)");
}

void sub_1A415C()
{
}

double sub_1A4170(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1A4190()
{
  return 0;
}

void sub_1A4198(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t*t)");
}

void sub_1A41C8()
{
}

double sub_1A41DC(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1A41FC()
{
  return 0;
}

void sub_1A4204(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t/t)");
}

void sub_1A4234()
{
}

double sub_1A4248(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1A4268()
{
  return 0;
}

void sub_1A4270(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t-t)");
}

void sub_1A42A0()
{
}

double sub_1A42B4(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) * (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1A42D4()
{
  return 0;
}

void sub_1A42DC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t*t)");
}

void sub_1A430C()
{
}

double sub_1A4320(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1A4340()
{
  return 0;
}

void sub_1A4348(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t*(t/t))");
}

void sub_1A4378()
{
}

double sub_1A438C(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1A43AC()
{
  return 0;
}

void sub_1A43B4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t*(t/t))");
}

void sub_1A43E4()
{
}

double sub_1A43F8(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1A4418()
{
  return 0;
}

void sub_1A4420(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t/(t*t))");
}

void sub_1A4450()
{
}

double sub_1A4464(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1A4484()
{
  return 0;
}

void sub_1A448C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t/(t*t))");
}

void sub_1A44BC()
{
}

double sub_1A44D0(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1A44F0()
{
  return 0;
}

void sub_1A44F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)*t");
}

void sub_1A4528()
{
}

double sub_1A453C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1A455C()
{
  return 0;
}

void sub_1A4564(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)/t");
}

void sub_1A4594()
{
}

double sub_1A45A8(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1A45C8()
{
  return 0;
}

void sub_1A45D0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)*t");
}

void sub_1A4600()
{
}

double sub_1A4614(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1A4634()
{
  return 0;
}

void sub_1A463C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)/t");
}

void sub_1A466C()
{
}

double sub_1A4680(uint64_t a1)
{
  return *(double *)(a1 + 32) * (*(double *)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24));
}

uint64_t sub_1A46A0()
{
  return 0;
}

void sub_1A46A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))*t");
}

void sub_1A46D8()
{
}

double sub_1A46EC(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1A470C()
{
  return 0;
}

void sub_1A4714(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))/t");
}

void sub_1A4744()
{
}

double sub_1A4758(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1A4778()
{
  return 0;
}

void sub_1A4780(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t+t)");
}

void sub_1A47B0()
{
}

double sub_1A47C4(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1A47E4()
{
  return 0;
}

void sub_1A47EC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t-t)");
}

void sub_1A481C()
{
}

double sub_1A4830(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1A4850()
{
  return 0;
}

void sub_1A4858(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t+t)");
}

void sub_1A4888()
{
}

double sub_1A489C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1A48BC()
{
  return 0;
}

void sub_1A48C4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t-t)");
}

void sub_1A48F4()
{
}

double sub_1A4908(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1A4928()
{
  return 0;
}

void sub_1A4930(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t-t)");
}

void sub_1A4960()
{
}

double sub_1A4974(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1A4994()
{
  return 0;
}

void sub_1A499C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t-t)");
}

void sub_1A49CC()
{
}

double sub_1A49E0(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1A4A00()
{
  return 0;
}

void sub_1A4A08(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t*t)");
}

void sub_1A4A38()
{
}

double sub_1A4A4C(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) * **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1A4A6C()
{
  return 0;
}

void sub_1A4A74(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)/t");
}

uint64_t sub_1A4AA0(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0x7D0:
      operator new();
    case 0x7D1:
      operator new();
    case 0x7D2:
      operator new();
    case 0x7D3:
      operator new();
    case 0x7D4:
      operator new();
    case 0x7D5:
      operator new();
    case 0x7D6:
      operator new();
    case 0x7D7:
      operator new();
    case 0x7D8:
      operator new();
    case 0x7D9:
      operator new();
    case 0x7DA:
      operator new();
    case 0x7DB:
      operator new();
    case 0x7DC:
      operator new();
    case 0x7DD:
      operator new();
    case 0x7DE:
      operator new();
    case 0x7DF:
      operator new();
    case 0x7E0:
      operator new();
    case 0x7E1:
      operator new();
    case 0x7E2:
      operator new();
    case 0x7E3:
      operator new();
    case 0x7E4:
      operator new();
    case 0x7E5:
      operator new();
    case 0x7E6:
      operator new();
    case 0x7E7:
      operator new();
    case 0x7E8:
      operator new();
    case 0x7E9:
      operator new();
    case 0x7EA:
      operator new();
    case 0x7EB:
      operator new();
    case 0x7EC:
      operator new();
    case 0x7ED:
      operator new();
    case 0x7EE:
      operator new();
    case 0x7EF:
      operator new();
    case 0x7F0:
      operator new();
    case 0x7F1:
      operator new();
    case 0x7F2:
      operator new();
    case 0x7F3:
      operator new();
    case 0x7F4:
      operator new();
    case 0x7F5:
      operator new();
    case 0x7F6:
      operator new();
    case 0x7F7:
      operator new();
    case 0x7F8:
      operator new();
    case 0x7F9:
      operator new();
    case 0x7FA:
      operator new();
    case 0x7FB:
      operator new();
    case 0x7FC:
      operator new();
    case 0x7FD:
      operator new();
    case 0x7FE:
      operator new();
    case 0x7FF:
      operator new();
    case 0x800:
      operator new();
    case 0x801:
      operator new();
    case 0x802:
      operator new();
    case 0x803:
      operator new();
    case 0x804:
      operator new();
    case 0x805:
      operator new();
    case 0x806:
      operator new();
    case 0x807:
      operator new();
    case 0x808:
      operator new();
    case 0x809:
      operator new();
    case 0x80A:
      operator new();
    case 0x80B:
      operator new();
    case 0x80C:
      operator new();
    case 0x80D:
      operator new();
    default:
      switch(*a2)
      {
        case 0x418:
          operator new();
        case 0x419:
          operator new();
        case 0x41A:
          operator new();
        case 0x41B:
          operator new();
        case 0x41C:
          operator new();
        case 0x41D:
          operator new();
        case 0x41E:
          operator new();
        case 0x41F:
          operator new();
        case 0x420:
          operator new();
        case 0x421:
          operator new();
        case 0x422:
          operator new();
        case 0x423:
          operator new();
        case 0x424:
          operator new();
        case 0x425:
          operator new();
        case 0x426:
          operator new();
        case 0x427:
          operator new();
        case 0x428:
          operator new();
        case 0x429:
          operator new();
        case 0x42A:
          operator new();
        case 0x42B:
          operator new();
        case 0x42C:
          operator new();
        case 0x42D:
          operator new();
        case 0x42E:
          operator new();
        case 0x42F:
          operator new();
        case 0x430:
          operator new();
        case 0x431:
          operator new();
        case 0x432:
          operator new();
        case 0x433:
          operator new();
        case 0x434:
          operator new();
        case 0x435:
          operator new();
        case 0x436:
          operator new();
        case 0x437:
          operator new();
        case 0x438:
          operator new();
        case 0x439:
          operator new();
        case 0x43A:
          operator new();
        case 0x43B:
          operator new();
        default:
          return 0;
      }
  }
}

void sub_1A60C0()
{
}

double sub_1A60D4(uint64_t a1)
{
  return *(double *)(a1 + 8) + (*(double *)(a1 + 16) + **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_1A60F4()
{
  return 0;
}

void sub_1A60FC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)/t)");
}

void sub_1A612C()
{
}

double sub_1A6140(uint64_t a1)
{
  return *(double *)(a1 + 8) + (*(double *)(a1 + 16) + **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_1A6160()
{
  return 0;
}

void sub_1A6168(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)*t)");
}

void sub_1A6198()
{
}

double sub_1A61AC(uint64_t a1)
{
  return *(double *)(a1 + 8) + (*(double *)(a1 + 16) - **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_1A61CC()
{
  return 0;
}

void sub_1A61D4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)/t)");
}

void sub_1A6204()
{
}

double sub_1A6218(uint64_t a1)
{
  return *(double *)(a1 + 8) + (*(double *)(a1 + 16) - **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_1A6238()
{
  return 0;
}

void sub_1A6240(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)*t)");
}

void sub_1A6270()
{
}

double sub_1A6284(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) * **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1A62A4()
{
  return 0;
}

void sub_1A62AC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)/t)");
}

void sub_1A62DC()
{
}

double sub_1A62F0(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) * **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1A6310()
{
  return 0;
}

void sub_1A6318(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)*t)");
}

void sub_1A6348()
{
}

double sub_1A635C(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) / **(double **)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_1A637C()
{
  return 0;
}

void sub_1A6384(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)+t)");
}

void sub_1A63B4()
{
}

double sub_1A63C8(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) / **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1A63E8()
{
  return 0;
}

void sub_1A63F0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)/t)");
}

void sub_1A6420()
{
}

double sub_1A6434(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) / **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1A6454()
{
  return 0;
}

void sub_1A645C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)*t)");
}

void sub_1A648C()
{
}

double sub_1A64A0(uint64_t a1)
{
  return *(double *)(a1 + 8) - (*(double *)(a1 + 16) + **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_1A64C0()
{
  return 0;
}

void sub_1A64C8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)/t)");
}

void sub_1A64F8()
{
}

double sub_1A650C(uint64_t a1)
{
  return *(double *)(a1 + 8) - (*(double *)(a1 + 16) + **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_1A652C()
{
  return 0;
}

void sub_1A6534(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)*t)");
}

void sub_1A6564()
{
}

double sub_1A6578(uint64_t a1)
{
  return *(double *)(a1 + 8) - (*(double *)(a1 + 16) - **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_1A6598()
{
  return 0;
}

void sub_1A65A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)/t)");
}

void sub_1A65D0()
{
}

double sub_1A65E4(uint64_t a1)
{
  return *(double *)(a1 + 8) - (*(double *)(a1 + 16) - **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_1A6604()
{
  return 0;
}

void sub_1A660C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)*t)");
}

void sub_1A663C()
{
}

double sub_1A6650(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) * **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1A6670()
{
  return 0;
}

void sub_1A6678(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)/t)");
}

void sub_1A66A8()
{
}

double sub_1A66BC(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) * **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1A66DC()
{
  return 0;
}

void sub_1A66E4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)*t)");
}

void sub_1A6714()
{
}

double sub_1A6728(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) / **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1A6748()
{
  return 0;
}

void sub_1A6750(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)/t)");
}

void sub_1A6780()
{
}

double sub_1A6794(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) / **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1A67B4()
{
  return 0;
}

void sub_1A67BC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)*t)");
}

void sub_1A67EC()
{
}

double sub_1A6800(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) * **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1A6820()
{
  return 0;
}

void sub_1A6828(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)*t)-t");
}

void sub_1A6858()
{
}

double sub_1A686C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) * **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1A688C()
{
  return 0;
}

void sub_1A6894(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)*t)-t");
}

void sub_1A68C4()
{
}

double sub_1A68D8(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) * **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1A68F8()
{
  return 0;
}

void sub_1A6900(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)-t");
}

void sub_1A6930()
{
}

double sub_1A6944(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) * **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1A6964()
{
  return 0;
}

void sub_1A696C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)*t)-t");
}

void sub_1A699C()
{
}

double sub_1A69B0(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) / **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1A69D0()
{
  return 0;
}

void sub_1A69D8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)/t)-t");
}

void sub_1A6A08()
{
}

double sub_1A6A1C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) / **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1A6A3C()
{
  return 0;
}

void sub_1A6A44(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)/t)-t");
}

void sub_1A6A74()
{
}

double sub_1A6A88(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) / **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1A6AA8()
{
  return 0;
}

void sub_1A6AB0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)/t)-t");
}

void sub_1A6AE0()
{
}

double sub_1A6AF4(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) / **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1A6B14()
{
  return 0;
}

void sub_1A6B1C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)/t)-t");
}

void sub_1A6B4C()
{
}

double sub_1A6B60(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1A6B80()
{
  return 0;
}

void sub_1A6B88(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t*t)");
}

void sub_1A6BB8()
{
}

double sub_1A6BCC(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1A6BEC()
{
  return 0;
}

void sub_1A6BF4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t*t)");
}

void sub_1A6C24()
{
}

double sub_1A6C38(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1A6C58()
{
  return 0;
}

void sub_1A6C60(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t/t)");
}

void sub_1A6C90()
{
}

double sub_1A6CA4(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) - **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1A6CC4()
{
  return 0;
}

void sub_1A6CCC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t/t)");
}

void sub_1A6CFC()
{
}

double sub_1A6D10(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1A6D30()
{
  return 0;
}

void sub_1A6D38(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t/t)");
}

void sub_1A6D68()
{
}

double sub_1A6D7C(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) - **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1A6D9C()
{
  return 0;
}

void sub_1A6DA4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t/t)");
}

void sub_1A6DD4()
{
}

double sub_1A6DE8(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1A6E08()
{
  return 0;
}

void sub_1A6E10(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t*t)");
}

void sub_1A6E40()
{
}

double sub_1A6E54(uint64_t a1)
{
  return *(double *)(a1 + 8) / (*(double *)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1A6E74()
{
  return 0;
}

void sub_1A6E7C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t+(t*t))");
}

void sub_1A6EAC()
{
}

double sub_1A6EC0(uint64_t a1)
{
  return *(double *)(a1 + 8) / (*(double *)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1A6EE0()
{
  return 0;
}

void sub_1A6EE8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t-(t*t))");
}

void sub_1A6F18()
{
}

double sub_1A6F2C(uint64_t a1)
{
  return *(double *)(a1 + 8) * (*(double *)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1A6F4C()
{
  return 0;
}

void sub_1A6F54(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t+(t*t))");
}

void sub_1A6F84()
{
}

double sub_1A6F98(uint64_t a1)
{
  return *(double *)(a1 + 8) * (*(double *)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1A6FB8()
{
  return 0;
}

void sub_1A6FC0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t-(t*t))");
}

void sub_1A6FF0()
{
}

double sub_1A7004(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1A7024()
{
  return 0;
}

void sub_1A702C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t*t)");
}

void sub_1A705C()
{
}

double sub_1A7070(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1A7090()
{
  return 0;
}

void sub_1A7098(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t/t)");
}

void sub_1A70C8()
{
}

double sub_1A70DC(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1A70FC()
{
  return 0;
}

void sub_1A7104(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t*t)");
}

void sub_1A7134()
{
}

double sub_1A7148(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1A7168()
{
  return 0;
}

void sub_1A7170(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t/t)");
}

void sub_1A71A0()
{
}

double sub_1A71B4(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1A71D4()
{
  return 0;
}

void sub_1A71DC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t*t)");
}

void sub_1A720C()
{
}

double sub_1A7220(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1A7240()
{
  return 0;
}

void sub_1A7248(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t/t)");
}

void sub_1A7278()
{
}

double sub_1A728C(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1A72AC()
{
  return 0;
}

void sub_1A72B4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t*t)");
}

void sub_1A72E4()
{
}

double sub_1A72F8(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1A7318()
{
  return 0;
}

void sub_1A7320(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t/t)");
}

void sub_1A7350()
{
}

double sub_1A7364(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) - (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1A7384()
{
  return 0;
}

void sub_1A738C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t-t)");
}

void sub_1A73BC()
{
}

double sub_1A73D0(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1A73F0()
{
  return 0;
}

void sub_1A73F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t-t)");
}

void sub_1A7428()
{
}

double sub_1A743C(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) + **(double **)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_1A745C()
{
  return 0;
}

void sub_1A7464(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t+t)");
}

void sub_1A7494()
{
}

double sub_1A74A8(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1A74C8()
{
  return 0;
}

void sub_1A74D0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t-t)");
}

void sub_1A7500()
{
}

double sub_1A7514(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1A7534()
{
  return 0;
}

void sub_1A753C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t-t)");
}

void sub_1A756C()
{
}

double sub_1A7580(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) - (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1A75A0()
{
  return 0;
}

void sub_1A75A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t+t)");
}

void sub_1A75D8()
{
}

double sub_1A75EC(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_1A760C()
{
  return 0;
}

void sub_1A7614(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t+t)");
}

void sub_1A7644()
{
}

double sub_1A7658(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1A7678()
{
  return 0;
}

void sub_1A7680(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t+t)");
}

void sub_1A76B0()
{
}

double sub_1A76C4(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1A76E4()
{
  return 0;
}

void sub_1A76EC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t+t)");
}

void sub_1A771C()
{
}

double sub_1A7730(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) - (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1A7750()
{
  return 0;
}

void sub_1A7758(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t+t)");
}

void sub_1A7788()
{
}

double sub_1A779C(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) - (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1A77BC()
{
  return 0;
}

void sub_1A77C4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t+t)");
}

void sub_1A77F4()
{
}

double sub_1A7808(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_1A7828()
{
  return 0;
}

void sub_1A7830(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t+t)");
}

void sub_1A7860()
{
}

double sub_1A7874(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) + **(double **)(a1 + 32);
}

uint64_t sub_1A7894()
{
  return 0;
}

void sub_1A789C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t+t)");
}

void sub_1A78CC()
{
}

double sub_1A78E0(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) + **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1A7900()
{
  return 0;
}

void sub_1A7908(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t-t)");
}

void sub_1A7938()
{
}

double sub_1A794C(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1A796C()
{
  return 0;
}

void sub_1A7974(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t-t)");
}

void sub_1A79A4()
{
}

double sub_1A79B8(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) - (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1A79D8()
{
  return 0;
}

void sub_1A79E0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t-t)");
}

void sub_1A7A10()
{
}

double sub_1A7A24(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) - (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1A7A44()
{
  return 0;
}

void sub_1A7A4C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t-t)");
}

void sub_1A7A7C()
{
}

double sub_1A7A90(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1A7AB0()
{
  return 0;
}

void sub_1A7AB8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t*t)");
}

void sub_1A7AE8()
{
}

double sub_1A7AFC(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_1A7B1C()
{
  return 0;
}

void sub_1A7B24(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t/t)");
}

void sub_1A7B54()
{
}

double sub_1A7B68(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1A7B88()
{
  return 0;
}

void sub_1A7B90(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t*t)");
}

void sub_1A7BC0()
{
}

double sub_1A7BD4(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_1A7BF4()
{
  return 0;
}

void sub_1A7BFC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t/t)");
}

void sub_1A7C2C()
{
}

double sub_1A7C40(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1A7C60()
{
  return 0;
}

void sub_1A7C68(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t*t)");
}

void sub_1A7C98()
{
}

double sub_1A7CAC(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_1A7CCC()
{
  return 0;
}

void sub_1A7CD4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t/t)");
}

void sub_1A7D04()
{
}

double sub_1A7D18(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1A7D38()
{
  return 0;
}

void sub_1A7D40(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t*t)");
}

void sub_1A7D70()
{
}

double sub_1A7D84(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_1A7DA4()
{
  return 0;
}

void sub_1A7DAC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t/t)");
}

void sub_1A7DDC()
{
}

double sub_1A7DF0(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) * (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1A7E10()
{
  return 0;
}

void sub_1A7E18(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t+t)");
}

void sub_1A7E48()
{
}

double sub_1A7E5C(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) * (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1A7E7C()
{
  return 0;
}

void sub_1A7E84(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t+t)");
}

void sub_1A7EB4()
{
}

double sub_1A7EC8(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) / (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1A7EE8()
{
  return 0;
}

void sub_1A7EF0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t+t)");
}

void sub_1A7F20()
{
}

double sub_1A7F34(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) / (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1A7F54()
{
  return 0;
}

void sub_1A7F5C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t+t)");
}

void sub_1A7F8C()
{
}

double sub_1A7FA0(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) / (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1A7FC0()
{
  return 0;
}

void sub_1A7FC8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t-t)");
}

void sub_1A7FF8()
{
}

double sub_1A800C(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) / (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1A802C()
{
  return 0;
}

void sub_1A8034(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t-t)");
}

void sub_1A8064()
{
}

double sub_1A8078(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) * (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1A8098()
{
  return 0;
}

void sub_1A80A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t-t)");
}

void sub_1A80D0()
{
}

double sub_1A80E4(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) / (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1A8104()
{
  return 0;
}

void sub_1A810C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t*t)");
}

void sub_1A813C()
{
}

double sub_1A8150(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) * (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_1A8170()
{
  return 0;
}

void sub_1A8178(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t/t)");
}

void sub_1A81A8()
{
}

double sub_1A81BC(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) * (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1A81DC()
{
  return 0;
}

void sub_1A81E4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t-t)");
}

void sub_1A8214()
{
}

double sub_1A8228(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) * (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1A8248()
{
  return 0;
}

void sub_1A8250(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t*t)");
}

void sub_1A8280()
{
}

double sub_1A8294(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) * (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_1A82B4()
{
  return 0;
}

void sub_1A82BC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t*(t/t))");
}

void sub_1A82EC()
{
}

double sub_1A8300(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) * (**(double **)(a1 + 24) / **(double **)(a1 + 32));
}

uint64_t sub_1A8320()
{
  return 0;
}

void sub_1A8328(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t*(t/t))");
}

void sub_1A8358()
{
}

double sub_1A836C(uint64_t a1)
{
  return *(double *)(a1 + 8) + *(double *)(a1 + 16) / (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1A838C()
{
  return 0;
}

void sub_1A8394(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t/(t*t))");
}

void sub_1A83C4()
{
}

double sub_1A83D8(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) / (**(double **)(a1 + 24) * **(double **)(a1 + 32));
}

uint64_t sub_1A83F8()
{
  return 0;
}

void sub_1A8400(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t/(t*t))");
}

void sub_1A8430()
{
}

double sub_1A8444(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_1A8464()
{
  return 0;
}

void sub_1A846C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)*t");
}

void sub_1A849C()
{
}

double sub_1A84B0(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16) - **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_1A84D0()
{
  return 0;
}

void sub_1A84D8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)/t");
}

void sub_1A8508()
{
}

double sub_1A851C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24)) * **(double **)(a1 + 32);
}

uint64_t sub_1A853C()
{
  return 0;
}

void sub_1A8544(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)*t");
}

void sub_1A8574()
{
}

double sub_1A8588(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_1A85A8()
{
  return 0;
}

void sub_1A85B0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)/t");
}

void sub_1A85E0()
{
}

double sub_1A85F4(uint64_t a1)
{
  return **(double **)(a1 + 32) * (*(double *)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24));
}

uint64_t sub_1A8614()
{
  return 0;
}

void sub_1A861C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))*t");
}

void sub_1A864C()
{
}

double sub_1A8660(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16) - **(double **)(a1 + 24)) / **(double **)(a1 + 32);
}

uint64_t sub_1A8680()
{
  return 0;
}

void sub_1A8688(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))/t");
}

void sub_1A86B8()
{
}

double sub_1A86CC(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) / (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1A86EC()
{
  return 0;
}

void sub_1A86F4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t+t)");
}

void sub_1A8724()
{
}

double sub_1A8738(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) / (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1A8758()
{
  return 0;
}

void sub_1A8760(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t-t)");
}

void sub_1A8790()
{
}

double sub_1A87A4(uint64_t a1)
{
  return (*(double *)(a1 + 8) + *(double *)(a1 + 16)) * (**(double **)(a1 + 24) + **(double **)(a1 + 32));
}

uint64_t sub_1A87C4()
{
  return 0;
}

void sub_1A87CC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t+t)");
}

void sub_1A87FC()
{
}

double sub_1A8810(uint64_t a1)
{
  return (*(double *)(a1 + 8) - *(double *)(a1 + 16)) * (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1A8830()
{
  return 0;
}

void sub_1A8838(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t-t)");
}

void sub_1A8868()
{
}

double sub_1A887C(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) + **(double **)(a1 + 24) - **(double **)(a1 + 32);
}

uint64_t sub_1A889C()
{
  return 0;
}

void sub_1A88A4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t-t)");
}

void sub_1A88D4()
{
}

double sub_1A88E8(uint64_t a1)
{
  return *(double *)(a1 + 8) - *(double *)(a1 + 16) - (**(double **)(a1 + 24) - **(double **)(a1 + 32));
}

uint64_t sub_1A8908()
{
  return 0;
}

void sub_1A8910(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t-t)");
}

void sub_1A8940()
{
}

double sub_1A8954(uint64_t a1)
{
  return *(double *)(a1 + 8) / *(double *)(a1 + 16) + **(double **)(a1 + 24) * **(double **)(a1 + 32);
}

uint64_t sub_1A8974()
{
  return 0;
}

void sub_1A897C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t*t)");
}

void sub_1A89AC()
{
}

double sub_1A89C0(uint64_t a1)
{
  return *(double *)(a1 + 8) * *(double *)(a1 + 16) * **(double **)(a1 + 24) / **(double **)(a1 + 32);
}

uint64_t sub_1A89E0()
{
  return 0;
}

void sub_1A89E8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)/t");
}

uint64_t sub_1A8A14(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0x7D0:
      operator new();
    case 0x7D1:
      operator new();
    case 0x7D2:
      operator new();
    case 0x7D3:
      operator new();
    case 0x7D4:
      operator new();
    case 0x7D5:
      operator new();
    case 0x7D6:
      operator new();
    case 0x7D7:
      operator new();
    case 0x7D8:
      operator new();
    case 0x7D9:
      operator new();
    case 0x7DA:
      operator new();
    case 0x7DB:
      operator new();
    case 0x7DC:
      operator new();
    case 0x7DD:
      operator new();
    case 0x7DE:
      operator new();
    case 0x7DF:
      operator new();
    case 0x7E0:
      operator new();
    case 0x7E1:
      operator new();
    case 0x7E2:
      operator new();
    case 0x7E3:
      operator new();
    case 0x7E4:
      operator new();
    case 0x7E5:
      operator new();
    case 0x7E6:
      operator new();
    case 0x7E7:
      operator new();
    case 0x7E8:
      operator new();
    case 0x7E9:
      operator new();
    case 0x7EA:
      operator new();
    case 0x7EB:
      operator new();
    case 0x7EC:
      operator new();
    case 0x7ED:
      operator new();
    case 0x7EE:
      operator new();
    case 0x7EF:
      operator new();
    case 0x7F0:
      operator new();
    case 0x7F1:
      operator new();
    case 0x7F2:
      operator new();
    case 0x7F3:
      operator new();
    case 0x7F4:
      operator new();
    case 0x7F5:
      operator new();
    case 0x7F6:
      operator new();
    case 0x7F7:
      operator new();
    case 0x7F8:
      operator new();
    case 0x7F9:
      operator new();
    case 0x7FA:
      operator new();
    case 0x7FB:
      operator new();
    case 0x7FC:
      operator new();
    case 0x7FD:
      operator new();
    case 0x7FE:
      operator new();
    case 0x7FF:
      operator new();
    case 0x800:
      operator new();
    case 0x801:
      operator new();
    case 0x802:
      operator new();
    case 0x803:
      operator new();
    case 0x804:
      operator new();
    case 0x805:
      operator new();
    case 0x806:
      operator new();
    case 0x807:
      operator new();
    case 0x808:
      operator new();
    case 0x809:
      operator new();
    case 0x80A:
      operator new();
    case 0x80B:
      operator new();
    case 0x80C:
      operator new();
    case 0x80D:
      operator new();
    default:
      switch(*a2)
      {
        case 0x418:
          operator new();
        case 0x419:
          operator new();
        case 0x41A:
          operator new();
        case 0x41B:
          operator new();
        case 0x41C:
          operator new();
        case 0x41D:
          operator new();
        case 0x41E:
          operator new();
        case 0x41F:
          operator new();
        case 0x420:
          operator new();
        case 0x421:
          operator new();
        case 0x422:
          operator new();
        case 0x423:
          operator new();
        case 0x424:
          operator new();
        case 0x425:
          operator new();
        case 0x426:
          operator new();
        case 0x427:
          operator new();
        case 0x428:
          operator new();
        case 0x429:
          operator new();
        case 0x42A:
          operator new();
        case 0x42B:
          operator new();
        case 0x42C:
          operator new();
        case 0x42D:
          operator new();
        case 0x42E:
          operator new();
        case 0x42F:
          operator new();
        case 0x430:
          operator new();
        case 0x431:
          operator new();
        case 0x432:
          operator new();
        case 0x433:
          operator new();
        case 0x434:
          operator new();
        case 0x435:
          operator new();
        case 0x436:
          operator new();
        case 0x437:
          operator new();
        case 0x438:
          operator new();
        case 0x439:
          operator new();
        case 0x43A:
          operator new();
        case 0x43B:
          operator new();
        default:
          return 0;
      }
  }
}

void sub_1AA038()
{
}

double sub_1AA04C(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) + **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1AA070()
{
  return 118;
}

void sub_1AA078(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)/t)");
}

void sub_1AA0A8()
{
}

double sub_1AA0BC(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) + **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1AA0E0()
{
  return 118;
}

void sub_1AA0E8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)*t)");
}

void sub_1AA118()
{
}

double sub_1AA12C(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1AA150()
{
  return 118;
}

void sub_1AA158(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)/t)");
}

void sub_1AA188()
{
}

double sub_1AA19C(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) - **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1AA1C0()
{
  return 118;
}

void sub_1AA1C8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)*t)");
}

void sub_1AA1F8()
{
}

double sub_1AA20C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) * **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1AA230()
{
  return 118;
}

void sub_1AA238(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)/t)");
}

void sub_1AA268()
{
}

double sub_1AA27C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) * **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1AA2A0()
{
  return 118;
}

void sub_1AA2A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)*t)");
}

void sub_1AA2D8()
{
}

double sub_1AA2EC(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1AA310()
{
  return 118;
}

void sub_1AA318(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)+t)");
}

void sub_1AA348()
{
}

double sub_1AA35C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1AA380()
{
  return 118;
}

void sub_1AA388(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)/t)");
}

void sub_1AA3B8()
{
}

double sub_1AA3CC(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1AA3F0()
{
  return 118;
}

void sub_1AA3F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)*t)");
}

void sub_1AA428()
{
}

double sub_1AA43C(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) + **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1AA460()
{
  return 118;
}

void sub_1AA468(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)/t)");
}

void sub_1AA498()
{
}

double sub_1AA4AC(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) + **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1AA4D0()
{
  return 118;
}

void sub_1AA4D8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)*t)");
}

void sub_1AA508()
{
}

double sub_1AA51C(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1AA540()
{
  return 118;
}

void sub_1AA548(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)/t)");
}

void sub_1AA578()
{
}

double sub_1AA58C(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) - **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1AA5B0()
{
  return 118;
}

void sub_1AA5B8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)*t)");
}

void sub_1AA5E8()
{
}

double sub_1AA5FC(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) * **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1AA620()
{
  return 118;
}

void sub_1AA628(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)/t)");
}

void sub_1AA658()
{
}

double sub_1AA66C(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) * **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1AA690()
{
  return 118;
}

void sub_1AA698(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)*t)");
}

void sub_1AA6C8()
{
}

double sub_1AA6DC(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) / **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1AA700()
{
  return 118;
}

void sub_1AA708(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)/t)");
}

void sub_1AA738()
{
}

double sub_1AA74C(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) / **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1AA770()
{
  return 118;
}

void sub_1AA778(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)*t)");
}

void sub_1AA7A8()
{
}

double sub_1AA7BC(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1AA7E0()
{
  return 118;
}

void sub_1AA7E8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)*t)-t");
}

void sub_1AA818()
{
}

double sub_1AA82C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1AA850()
{
  return 118;
}

void sub_1AA858(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)*t)-t");
}

void sub_1AA888()
{
}

double sub_1AA89C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1AA8C0()
{
  return 118;
}

void sub_1AA8C8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)-t");
}

void sub_1AA8F8()
{
}

double sub_1AA90C(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1AA930()
{
  return 118;
}

void sub_1AA938(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)*t)-t");
}

void sub_1AA968()
{
}

double sub_1AA97C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1AA9A0()
{
  return 118;
}

void sub_1AA9A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)/t)-t");
}

void sub_1AA9D8()
{
}

double sub_1AA9EC(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1AAA10()
{
  return 118;
}

void sub_1AAA18(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)/t)-t");
}

void sub_1AAA48()
{
}

double sub_1AAA5C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1AAA80()
{
  return 118;
}

void sub_1AAA88(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)/t)-t");
}

void sub_1AAAB8()
{
}

double sub_1AAACC(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) / **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1AAAF0()
{
  return 118;
}

void sub_1AAAF8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)/t)-t");
}

void sub_1AAB28()
{
}

double sub_1AAB3C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1AAB60()
{
  return 118;
}

void sub_1AAB68(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t*t)");
}

void sub_1AAB98()
{
}

double sub_1AABAC(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1AABD0()
{
  return 118;
}

void sub_1AABD8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t*t)");
}

void sub_1AAC08()
{
}

double sub_1AAC1C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1AAC40()
{
  return 118;
}

void sub_1AAC48(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t/t)");
}

void sub_1AAC78()
{
}

double sub_1AAC8C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1AACB0()
{
  return 118;
}

void sub_1AACB8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t/t)");
}

void sub_1AACE8()
{
}

double sub_1AACFC(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1AAD20()
{
  return 118;
}

void sub_1AAD28(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t/t)");
}

void sub_1AAD58()
{
}

double sub_1AAD6C(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1AAD90()
{
  return 118;
}

void sub_1AAD98(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t/t)");
}

void sub_1AADC8()
{
}

double sub_1AADDC(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1AAE00()
{
  return 118;
}

void sub_1AAE08(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t*t)");
}

void sub_1AAE38()
{
}

double sub_1AAE4C(uint64_t a1)
{
  return *(double *)(a1 + 8) / (**(double **)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1AAE70()
{
  return 118;
}

void sub_1AAE78(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t+(t*t))");
}

void sub_1AAEA8()
{
}

double sub_1AAEBC(uint64_t a1)
{
  return *(double *)(a1 + 8) / (**(double **)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1AAEE0()
{
  return 118;
}

void sub_1AAEE8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t-(t*t))");
}

void sub_1AAF18()
{
}

double sub_1AAF2C(uint64_t a1)
{
  return *(double *)(a1 + 8) * (**(double **)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1AAF50()
{
  return 118;
}

void sub_1AAF58(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t+(t*t))");
}

void sub_1AAF88()
{
}

double sub_1AAF9C(uint64_t a1)
{
  return *(double *)(a1 + 8) * (**(double **)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1AAFC0()
{
  return 118;
}

void sub_1AAFC8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t-(t*t))");
}

void sub_1AAFF8()
{
}

double sub_1AB00C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1AB030()
{
  return 118;
}

void sub_1AB038(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t*t)");
}

void sub_1AB068()
{
}

double sub_1AB07C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1AB0A0()
{
  return 118;
}

void sub_1AB0A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t/t)");
}

void sub_1AB0D8()
{
}

double sub_1AB0EC(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1AB110()
{
  return 118;
}

void sub_1AB118(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t*t)");
}

void sub_1AB148()
{
}

double sub_1AB15C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1AB180()
{
  return 118;
}

void sub_1AB188(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t/t)");
}

void sub_1AB1B8()
{
}

double sub_1AB1CC(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1AB1F0()
{
  return 118;
}

void sub_1AB1F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t*t)");
}

void sub_1AB228()
{
}

double sub_1AB23C(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1AB260()
{
  return 118;
}

void sub_1AB268(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t/t)");
}

void sub_1AB298()
{
}

double sub_1AB2AC(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1AB2D0()
{
  return 118;
}

void sub_1AB2D8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t*t)");
}

void sub_1AB308()
{
}

double sub_1AB31C(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1AB340()
{
  return 118;
}

void sub_1AB348(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t/t)");
}

void sub_1AB378()
{
}

double sub_1AB38C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1AB3B0()
{
  return 118;
}

void sub_1AB3B8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t-t)");
}

void sub_1AB3E8()
{
}

double sub_1AB3FC(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1AB420()
{
  return 118;
}

void sub_1AB428(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t-t)");
}

void sub_1AB458()
{
}

double sub_1AB46C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1AB490()
{
  return 118;
}

void sub_1AB498(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t+t)");
}

void sub_1AB4C8()
{
}

double sub_1AB4DC(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1AB500()
{
  return 118;
}

void sub_1AB508(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t-t)");
}

void sub_1AB538()
{
}

double sub_1AB54C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1AB570()
{
  return 118;
}

void sub_1AB578(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t-t)");
}

void sub_1AB5A8()
{
}

double sub_1AB5BC(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1AB5E0()
{
  return 118;
}

void sub_1AB5E8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t+t)");
}

void sub_1AB618()
{
}

double sub_1AB62C(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1AB650()
{
  return 118;
}

void sub_1AB658(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t+t)");
}

void sub_1AB688()
{
}

double sub_1AB69C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1AB6C0()
{
  return 118;
}

void sub_1AB6C8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t+t)");
}

void sub_1AB6F8()
{
}

double sub_1AB70C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1AB730()
{
  return 118;
}

void sub_1AB738(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t+t)");
}

void sub_1AB768()
{
}

double sub_1AB77C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1AB7A0()
{
  return 118;
}

void sub_1AB7A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t+t)");
}

void sub_1AB7D8()
{
}

double sub_1AB7EC(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1AB810()
{
  return 118;
}

void sub_1AB818(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t+t)");
}

void sub_1AB848()
{
}

double sub_1AB85C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1AB880()
{
  return 118;
}

void sub_1AB888(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t+t)");
}

void sub_1AB8B8()
{
}

double sub_1AB8CC(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + **(double **)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1AB8F0()
{
  return 118;
}

void sub_1AB8F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t+t)");
}

void sub_1AB928()
{
}

double sub_1AB93C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1AB960()
{
  return 118;
}

void sub_1AB968(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t-t)");
}

void sub_1AB998()
{
}

double sub_1AB9AC(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1AB9D0()
{
  return 118;
}

void sub_1AB9D8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t-t)");
}

void sub_1ABA08()
{
}

double sub_1ABA1C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1ABA40()
{
  return 118;
}

void sub_1ABA48(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t-t)");
}

void sub_1ABA78()
{
}

double sub_1ABA8C(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1ABAB0()
{
  return 118;
}

void sub_1ABAB8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t-t)");
}

void sub_1ABAE8()
{
}

double sub_1ABAFC(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1ABB20()
{
  return 118;
}

void sub_1ABB28(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t*t)");
}

void sub_1ABB58()
{
}

double sub_1ABB6C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1ABB90()
{
  return 118;
}

void sub_1ABB98(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t/t)");
}

void sub_1ABBC8()
{
}

double sub_1ABBDC(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1ABC00()
{
  return 118;
}

void sub_1ABC08(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t*t)");
}

void sub_1ABC38()
{
}

double sub_1ABC4C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1ABC70()
{
  return 118;
}

void sub_1ABC78(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t/t)");
}

void sub_1ABCA8()
{
}

double sub_1ABCBC(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1ABCE0()
{
  return 118;
}

void sub_1ABCE8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t*t)");
}

void sub_1ABD18()
{
}

double sub_1ABD2C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1ABD50()
{
  return 118;
}

void sub_1ABD58(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t/t)");
}

void sub_1ABD88()
{
}

double sub_1ABD9C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1ABDC0()
{
  return 118;
}

void sub_1ABDC8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t*t)");
}

void sub_1ABDF8()
{
}

double sub_1ABE0C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1ABE30()
{
  return 118;
}

void sub_1ABE38(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t/t)");
}

void sub_1ABE68()
{
}

double sub_1ABE7C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1ABEA0()
{
  return 118;
}

void sub_1ABEA8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t+t)");
}

void sub_1ABED8()
{
}

double sub_1ABEEC(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1ABF10()
{
  return 118;
}

void sub_1ABF18(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t+t)");
}

void sub_1ABF48()
{
}

double sub_1ABF5C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1ABF80()
{
  return 118;
}

void sub_1ABF88(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t+t)");
}

void sub_1ABFB8()
{
}

double sub_1ABFCC(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1ABFF0()
{
  return 118;
}

void sub_1ABFF8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t+t)");
}

void sub_1AC028()
{
}

double sub_1AC03C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1AC060()
{
  return 118;
}

void sub_1AC068(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t-t)");
}

void sub_1AC098()
{
}

double sub_1AC0AC(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1AC0D0()
{
  return 118;
}

void sub_1AC0D8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t-t)");
}

void sub_1AC108()
{
}

double sub_1AC11C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1AC140()
{
  return 118;
}

void sub_1AC148(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t-t)");
}

void sub_1AC178()
{
}

double sub_1AC18C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1AC1B0()
{
  return 118;
}

void sub_1AC1B8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t*t)");
}

void sub_1AC1E8()
{
}

double sub_1AC1FC(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1AC220()
{
  return 118;
}

void sub_1AC228(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t/t)");
}

void sub_1AC258()
{
}

double sub_1AC26C(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1AC290()
{
  return 118;
}

void sub_1AC298(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t-t)");
}

void sub_1AC2C8()
{
}

double sub_1AC2DC(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1AC300()
{
  return 118;
}

void sub_1AC308(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t*t)");
}

void sub_1AC338()
{
}

double sub_1AC34C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1AC370()
{
  return 118;
}

void sub_1AC378(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t*(t/t))");
}

void sub_1AC3A8()
{
}

double sub_1AC3BC(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) * (**(double **)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1AC3E0()
{
  return 118;
}

void sub_1AC3E8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t*(t/t))");
}

void sub_1AC418()
{
}

double sub_1AC42C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1AC450()
{
  return 118;
}

void sub_1AC458(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t/(t*t))");
}

void sub_1AC488()
{
}

double sub_1AC49C(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) / (**(double **)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1AC4C0()
{
  return 118;
}

void sub_1AC4C8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t/(t*t))");
}

void sub_1AC4F8()
{
}

double sub_1AC50C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) - **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1AC530()
{
  return 118;
}

void sub_1AC538(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)*t");
}

void sub_1AC568()
{
}

double sub_1AC57C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1AC5A0()
{
  return 118;
}

void sub_1AC5A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)/t");
}

void sub_1AC5D8()
{
}

double sub_1AC5EC(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1AC610()
{
  return 118;
}

void sub_1AC618(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)*t");
}

void sub_1AC648()
{
}

double sub_1AC65C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1AC680()
{
  return 118;
}

void sub_1AC688(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)/t");
}

void sub_1AC6B8()
{
}

double sub_1AC6CC(uint64_t a1)
{
  return *(double *)(a1 + 32) * (*(double *)(a1 + 8) + **(double **)(a1 + 16) - **(double **)(a1 + 24));
}

uint64_t sub_1AC6F0()
{
  return 118;
}

void sub_1AC6F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))*t");
}

void sub_1AC728()
{
}

double sub_1AC73C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16) - **(double **)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1AC760()
{
  return 118;
}

void sub_1AC768(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))/t");
}

void sub_1AC798()
{
}

double sub_1AC7AC(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1AC7D0()
{
  return 118;
}

void sub_1AC7D8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t+t)");
}

void sub_1AC808()
{
}

double sub_1AC81C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1AC840()
{
  return 118;
}

void sub_1AC848(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t-t)");
}

void sub_1AC878()
{
}

double sub_1AC88C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (**(double **)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1AC8B0()
{
  return 118;
}

void sub_1AC8B8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t+t)");
}

void sub_1AC8E8()
{
}

double sub_1AC8FC(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1AC920()
{
  return 118;
}

void sub_1AC928(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t-t)");
}

void sub_1AC958()
{
}

double sub_1AC96C(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + **(double **)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1AC990()
{
  return 118;
}

void sub_1AC998(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t-t)");
}

void sub_1AC9C8()
{
}

double sub_1AC9DC(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - (**(double **)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1ACA00()
{
  return 118;
}

void sub_1ACA08(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t-t)");
}

void sub_1ACA38()
{
}

double sub_1ACA4C(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + **(double **)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1ACA70()
{
  return 118;
}

void sub_1ACA78(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t*t)");
}

void sub_1ACAA8()
{
}

double sub_1ACABC(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * **(double **)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1ACAE0()
{
  return 118;
}

void sub_1ACAE8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)/t");
}

uint64_t sub_1ACB14(uint64_t a1)
{
  *(void *)a1 = off_2420D30;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1ACB90(uint64_t a1)
{
  *(void *)a1 = off_2420D30;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1ACC2C(uint64_t a1)
{
  long double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  long double v3 = *(double *)(a1 + 8);

  return fmod(v3, v2);
}

uint64_t sub_1ACC8C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1ACC94()
{
  return 6;
}

double sub_1ACC9C(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1ACCA4(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1ACCAC(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1ACCB8(uint64_t a1)
{
  *(void *)a1 = off_2420DA0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1ACD34(uint64_t a1)
{
  *(void *)a1 = off_2420DA0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1ACDD0(uint64_t a1)
{
  long double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  long double v3 = *(double *)(a1 + 8);

  return pow(v3, v2);
}

uint64_t sub_1ACE30(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1ACE38()
{
  return 7;
}

double sub_1ACE40(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1ACE48(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1ACE50(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1ACE5C(uint64_t a1)
{
  *(void *)a1 = off_2420E10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1ACED8(uint64_t a1)
{
  *(void *)a1 = off_2420E10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1ACF74(uint64_t a1)
{
  BOOL v1 = *(double *)(a1 + 8) < (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double result = 0.0;
  if (v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1ACFD0(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1ACFD8()
{
  return 14;
}

double sub_1ACFE0(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1ACFE8(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1ACFF0(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1ACFFC(uint64_t a1)
{
  *(void *)a1 = off_2420E80;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1AD078(uint64_t a1)
{
  *(void *)a1 = off_2420E80;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1AD114(uint64_t a1)
{
  BOOL v1 = *(double *)(a1 + 8) > (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double result = 0.0;
  if (!v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1AD170(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1AD178()
{
  return 15;
}

double sub_1AD180(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1AD188(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1AD190(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1AD19C(uint64_t a1)
{
  *(void *)a1 = off_2420EF0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1AD218(uint64_t a1)
{
  *(void *)a1 = off_2420EF0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1AD2B4(uint64_t a1)
{
  BOOL v1 = *(double *)(a1 + 8) <= (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double result = 0.0;
  if (!v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1AD310(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1AD318()
{
  return 21;
}

double sub_1AD320(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1AD328(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1AD330(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1AD33C(uint64_t a1)
{
  *(void *)a1 = off_2420F60;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1AD3B8(uint64_t a1)
{
  *(void *)a1 = off_2420F60;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1AD454(uint64_t a1)
{
  BOOL v1 = *(double *)(a1 + 8) < (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double result = 0.0;
  if (!v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1AD4B0(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1AD4B8()
{
  return 20;
}

double sub_1AD4C0(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1AD4C8(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1AD4D0(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1AD4DC(uint64_t a1)
{
  *(void *)a1 = off_2420FD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1AD558(uint64_t a1)
{
  *(void *)a1 = off_2420FD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1AD5F4(uint64_t a1)
{
  BOOL v1 = *(double *)(a1 + 8) == (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double result = 0.0;
  if (v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1AD650(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1AD658()
{
  return 16;
}

double sub_1AD660(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1AD668(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1AD670(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1AD67C(uint64_t a1)
{
  *(void *)a1 = off_2421040;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1AD6F8(uint64_t a1)
{
  *(void *)a1 = off_2421040;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1AD794(uint64_t a1)
{
  BOOL v1 = *(double *)(a1 + 8) == (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  double result = 0.0;
  if (!v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1AD7F0(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1AD7F8()
{
  return 18;
}

double sub_1AD800(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1AD808(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1AD810(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1AD81C(uint64_t a1)
{
  *(void *)a1 = off_24210B0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1AD898(uint64_t a1)
{
  *(void *)a1 = off_24210B0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1AD934(uint64_t a1)
{
  BOOL v3 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) == 0.0;
  double result = 0.0;
  BOOL v3 = v3 || *(double *)(a1 + 8) == 0.0;
  if (!v3) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1AD994(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1AD99C()
{
  return 22;
}

double sub_1AD9A4(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1AD9AC(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1AD9B4(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1AD9C0(uint64_t a1)
{
  *(void *)a1 = off_2421120;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1ADA3C(uint64_t a1)
{
  *(void *)a1 = off_2421120;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1ADAD8(uint64_t a1)
{
  BOOL v3 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) == 0.0;
  double result = 0.0;
  BOOL v3 = v3 || *(double *)(a1 + 8) == 0.0;
  if (v3) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1ADB38(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1ADB40()
{
  return 23;
}

double sub_1ADB48(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1ADB50(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1ADB58(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1ADB64(uint64_t a1)
{
  *(void *)a1 = off_2421190;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1ADBE0(uint64_t a1)
{
  *(void *)a1 = off_2421190;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1ADC7C(uint64_t a1)
{
  BOOL v3 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) == 0.0;
  double result = 0.0;
  BOOL v3 = v3 && *(double *)(a1 + 8) == 0.0;
  if (!v3) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1ADCDC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1ADCE4()
{
  return 24;
}

double sub_1ADCEC(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1ADCF4(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1ADCFC(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1ADD08(uint64_t a1)
{
  *(void *)a1 = off_2421200;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1ADD84(uint64_t a1)
{
  *(void *)a1 = off_2421200;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1ADE20(uint64_t a1)
{
  BOOL v3 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) == 0.0;
  double result = 0.0;
  BOOL v3 = v3 && *(double *)(a1 + 8) == 0.0;
  if (v3) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1ADE80(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1ADE88()
{
  return 25;
}

double sub_1ADE90(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1ADE98(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1ADEA0(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1ADEAC(uint64_t a1)
{
  *(void *)a1 = off_2421270;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1ADF28(uint64_t a1)
{
  *(void *)a1 = off_2421270;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1ADFC4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  BOOL v3 = v2 == 0.0;
  double result = 0.0;
  if (v3 != (*(double *)(a1 + 8) == 0.0)) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1AE034(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1AE03C()
{
  return 26;
}

double sub_1AE044(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1AE04C(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1AE054(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1AE060(uint64_t a1)
{
  *(void *)a1 = off_24212E0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1AE0DC(uint64_t a1)
{
  *(void *)a1 = off_24212E0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1AE178(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  BOOL v3 = v2 != 0.0;
  double result = 1.0;
  if (v3 != (*(double *)(a1 + 8) != 0.0)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1AE1E8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1AE1F0()
{
  return 27;
}

double sub_1AE1F8(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1AE200(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1AE208(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

void *sub_1AE214(uint64_t a1, _DWORD *a2, void **a3, uint64_t *a4)
{
  if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))() - 106 > 4) {
    return 0;
  }
  uint64_t v8 = *a3;
  (*(void (**)(std::string *__return_ptr, void *))(*(void *)*a3 + 40))(&v25, *a3);
  uint64_t v9 = std::string::insert(&v25, 0, "(");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v26, ")");
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  switch(*a2)
  {
    case 2:
      std::string::size_type v13 = 1;
      char v24 = 1;
      LOWORD(__p[0]) = 43;
      break;
    case 3:
      std::string::size_type v13 = 1;
      char v24 = 1;
      LOWORD(__p[0]) = 45;
      break;
    case 4:
      std::string::size_type v13 = 1;
      char v24 = 1;
      LOWORD(__p[0]) = 42;
      break;
    case 5:
      std::string::size_type v13 = 1;
      char v24 = 1;
      LOWORD(__p[0]) = 47;
      break;
    case 6:
      std::string::size_type v13 = 1;
      char v24 = 1;
      LOWORD(__p[0]) = 37;
      break;
    case 7:
      std::string::size_type v13 = 1;
      char v24 = 1;
      LOWORD(__p[0]) = 94;
      break;
    case 0xE:
      std::string::size_type v13 = 1;
      char v24 = 1;
      LOWORD(__p[0]) = 60;
      break;
    case 0xF:
      std::string::size_type v13 = 2;
      char v24 = 2;
      __int16 v15 = 15676;
      goto LABEL_20;
    case 0x10:
      std::string::size_type v13 = 2;
      char v24 = 2;
      __int16 v15 = 15677;
      goto LABEL_20;
    case 0x12:
      std::string::size_type v13 = 2;
      char v24 = 2;
      __int16 v15 = 15649;
      goto LABEL_20;
    case 0x14:
      std::string::size_type v13 = 2;
      char v24 = 2;
      __int16 v15 = 15678;
      goto LABEL_20;
    case 0x15:
      std::string::size_type v13 = 1;
      char v24 = 1;
      LOWORD(__p[0]) = 62;
      break;
    case 0x16:
      std::string::size_type v13 = 3;
      char v24 = 3;
      LODWORD(__p[0]) = 6581857;
      break;
    case 0x17:
      std::string::size_type v13 = 4;
      char v24 = 4;
      int v16 = 1684955502;
      goto LABEL_24;
    case 0x18:
      std::string::size_type v13 = 2;
      char v24 = 2;
      __int16 v15 = 29295;
LABEL_20:
      LOWORD(__p[0]) = v15;
      BYTE2(__p[0]) = 0;
      break;
    case 0x19:
      std::string::size_type v13 = 3;
      char v24 = 3;
      LODWORD(__p[0]) = 7499630;
      break;
    case 0x1A:
      std::string::size_type v13 = 3;
      char v24 = 3;
      LODWORD(__p[0]) = 7499640;
      break;
    case 0x1B:
      std::string::size_type v13 = 4;
      char v24 = 4;
      int v16 = 1919905400;
LABEL_24:
      LODWORD(__p[0]) = v16;
      BYTE4(__p[0]) = 0;
      break;
    default:
      std::string::size_type v13 = 7;
      char v24 = 7;
      strcpy((char *)__p, "UNKNOWN");
      break;
  }
  size_t v17 = std::string::append(&v27, (const std::string::value_type *)__p, v13);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  size_t v19 = std::string::append(&v28, "t");
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  std::string::size_type v30 = v19->__r_.__value_.__r.__words[2];
  long long v29 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v28.__r_.__value_.__l.__data_);
    if ((v24 & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_34;
    }
  }
  else if ((v24 & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_29;
    }
LABEL_35:
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_36;
  }
LABEL_34:
  operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_35;
  }
LABEL_29:
  if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_30;
  }
LABEL_36:
  operator delete(v25.__r_.__value_.__l.__data_);
LABEL_30:
  switch((*(unsigned int (**)(void *))(*(void *)v8 + 32))(v8))
  {
    case 'j':
      BOOL v21 = sub_1B042C(a1, &v29, a3, a4);
      goto LABEL_43;
    case 'k':
      BOOL v21 = sub_1B01F8(a1, &v29, a3, a4);
      goto LABEL_43;
    case 'l':
      BOOL v21 = sub_1AFFC4(a1, &v29, a3, a4);
      goto LABEL_43;
    case 'm':
      BOOL v21 = sub_1AFD90(a1, &v29, a3, a4);
      goto LABEL_43;
    case 'n':
      BOOL v21 = sub_1AFB54(a1, &v29, a3, a4);
LABEL_43:
      size_t v14 = v21;
      if (SHIBYTE(v30) < 0) {
        goto LABEL_44;
      }
      return v14;
    default:
      size_t v14 = 0;
      if (SHIBYTE(v30) < 0) {
LABEL_44:
      }
        operator delete((void *)v29);
      break;
  }
  return v14;
}

void sub_1AE6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a20 & 0x80000000) == 0) {
LABEL_12:
    }
      _Unwind_Resume(exception_object);
LABEL_11:
    operator delete(a15);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void sub_1AE7EC()
{
}

void sub_1AE8DC()
{
}

void sub_1AE900()
{
}

void sub_1AE9F0()
{
}

void sub_1AEA14()
{
}

void sub_1AEB04()
{
}

void sub_1AEB28()
{
}

void sub_1AEC18()
{
}

void sub_1AEC3C()
{
}

void sub_1AED2C()
{
}

void sub_1AED50()
{
}

void sub_1AEE40()
{
}

void sub_1AEE64()
{
}

void sub_1AEF54()
{
}

void sub_1AEF78()
{
}

void sub_1AF068()
{
}

void sub_1AF08C()
{
}

void sub_1AF17C()
{
}

void sub_1AF1A0()
{
}

void sub_1AF290()
{
}

void sub_1AF2B4()
{
}

void sub_1AF3A4()
{
}

void sub_1AF3C8()
{
}

void sub_1AF4B8()
{
}

void sub_1AF4DC()
{
}

void sub_1AF5CC()
{
}

void sub_1AF5F0()
{
}

void sub_1AF6E0()
{
}

void sub_1AF704()
{
}

void sub_1AF7F4()
{
}

void sub_1AF818()
{
}

void sub_1AF908()
{
}

void sub_1AF92C()
{
}

void sub_1AFA1C()
{
}

void sub_1AFA40()
{
}

void sub_1AFB30()
{
}

void *sub_1AFB54(uint64_t a1, void *a2, void **a3, uint64_t *a4)
{
  double result = *a3;
  if (*a3)
  {
    if (result)
    {
      uint64_t v8 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v8 + 56))(v8);
      (*(void (**)(void *))(*(void *)v8 + 64))(v8);
      uint64_t v9 = *(void *)(a1 + 72);
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v10 = v9 + 8;
      uint64_t v11 = v12;
      if (!v12) {
        return 0;
      }
      int v13 = *((char *)a2 + 23);
      if (v13 >= 0) {
        size_t v14 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v14 = a2[1];
      }
      if (v13 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v15 = v10;
      do
      {
        int v16 = *(char *)(v11 + 55);
        if (v16 >= 0) {
          size_t v17 = *(unsigned __int8 *)(v11 + 55);
        }
        else {
          size_t v17 = *(void *)(v11 + 40);
        }
        if (v16 >= 0) {
          long long v18 = (const void *)(v11 + 32);
        }
        else {
          long long v18 = *(const void **)(v11 + 32);
        }
        if (v14 >= v17) {
          size_t v19 = v17;
        }
        else {
          size_t v19 = v14;
        }
        int v20 = memcmp(v18, a2, v19);
        BOOL v21 = v17 < v14;
        if (v20) {
          BOOL v21 = v20 < 0;
        }
        BOOL v22 = !v21;
        if (v21) {
          BOOL v23 = (uint64_t *)(v11 + 8);
        }
        else {
          BOOL v23 = (uint64_t *)v11;
        }
        if (v22) {
          uint64_t v15 = v11;
        }
        uint64_t v11 = *v23;
      }
      while (*v23);
      if (v15 == v10) {
        return 0;
      }
      int v24 = *(char *)(v15 + 55);
      size_t v25 = v24 >= 0 ? *(unsigned __int8 *)(v15 + 55) : *(void *)(v15 + 40);
      std::string v26 = v24 >= 0 ? (const void *)(v15 + 32) : *(const void **)(v15 + 32);
      size_t v27 = v25 >= v14 ? v14 : v25;
      int v28 = memcmp(a2, v26, v27);
      BOOL v29 = v14 < v25;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
      if (v29)
      {
        return 0;
      }
      else
      {
        int v30 = *(_DWORD *)(v15 + 64);
        *a4 = sub_1B0664(a1, &v30);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_1AFD90(uint64_t a1, void *a2, void **a3, uint64_t *a4)
{
  double result = *a3;
  if (*a3)
  {
    if (result)
    {
      uint64_t v8 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v8 + 56))(v8);
      (*(void (**)(void *))(*(void *)v8 + 64))(v8);
      uint64_t v9 = *(void *)(a1 + 72);
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v10 = v9 + 8;
      uint64_t v11 = v12;
      if (!v12) {
        return 0;
      }
      int v13 = *((char *)a2 + 23);
      if (v13 >= 0) {
        size_t v14 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v14 = a2[1];
      }
      if (v13 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v15 = v10;
      do
      {
        int v16 = *(char *)(v11 + 55);
        if (v16 >= 0) {
          size_t v17 = *(unsigned __int8 *)(v11 + 55);
        }
        else {
          size_t v17 = *(void *)(v11 + 40);
        }
        if (v16 >= 0) {
          long long v18 = (const void *)(v11 + 32);
        }
        else {
          long long v18 = *(const void **)(v11 + 32);
        }
        if (v14 >= v17) {
          size_t v19 = v17;
        }
        else {
          size_t v19 = v14;
        }
        int v20 = memcmp(v18, a2, v19);
        BOOL v21 = v17 < v14;
        if (v20) {
          BOOL v21 = v20 < 0;
        }
        BOOL v22 = !v21;
        if (v21) {
          BOOL v23 = (uint64_t *)(v11 + 8);
        }
        else {
          BOOL v23 = (uint64_t *)v11;
        }
        if (v22) {
          uint64_t v15 = v11;
        }
        uint64_t v11 = *v23;
      }
      while (*v23);
      if (v15 == v10) {
        return 0;
      }
      int v24 = *(char *)(v15 + 55);
      size_t v25 = v24 >= 0 ? *(unsigned __int8 *)(v15 + 55) : *(void *)(v15 + 40);
      std::string v26 = v24 >= 0 ? (const void *)(v15 + 32) : *(const void **)(v15 + 32);
      size_t v27 = v25 >= v14 ? v14 : v25;
      int v28 = memcmp(a2, v26, v27);
      BOOL v29 = v14 < v25;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
      if (v29)
      {
        return 0;
      }
      else
      {
        int v30 = *(_DWORD *)(v15 + 64);
        *a4 = sub_1A8A14(a1, &v30);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_1AFFC4(uint64_t a1, void *a2, void **a3, uint64_t *a4)
{
  double result = *a3;
  if (*a3)
  {
    if (result)
    {
      uint64_t v8 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v8 + 56))(v8);
      (*(void (**)(void *))(*(void *)v8 + 64))(v8);
      uint64_t v9 = *(void *)(a1 + 72);
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v10 = v9 + 8;
      uint64_t v11 = v12;
      if (!v12) {
        return 0;
      }
      int v13 = *((char *)a2 + 23);
      if (v13 >= 0) {
        size_t v14 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v14 = a2[1];
      }
      if (v13 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v15 = v10;
      do
      {
        int v16 = *(char *)(v11 + 55);
        if (v16 >= 0) {
          size_t v17 = *(unsigned __int8 *)(v11 + 55);
        }
        else {
          size_t v17 = *(void *)(v11 + 40);
        }
        if (v16 >= 0) {
          long long v18 = (const void *)(v11 + 32);
        }
        else {
          long long v18 = *(const void **)(v11 + 32);
        }
        if (v14 >= v17) {
          size_t v19 = v17;
        }
        else {
          size_t v19 = v14;
        }
        int v20 = memcmp(v18, a2, v19);
        BOOL v21 = v17 < v14;
        if (v20) {
          BOOL v21 = v20 < 0;
        }
        BOOL v22 = !v21;
        if (v21) {
          BOOL v23 = (uint64_t *)(v11 + 8);
        }
        else {
          BOOL v23 = (uint64_t *)v11;
        }
        if (v22) {
          uint64_t v15 = v11;
        }
        uint64_t v11 = *v23;
      }
      while (*v23);
      if (v15 == v10) {
        return 0;
      }
      int v24 = *(char *)(v15 + 55);
      size_t v25 = v24 >= 0 ? *(unsigned __int8 *)(v15 + 55) : *(void *)(v15 + 40);
      std::string v26 = v24 >= 0 ? (const void *)(v15 + 32) : *(const void **)(v15 + 32);
      size_t v27 = v25 >= v14 ? v14 : v25;
      int v28 = memcmp(a2, v26, v27);
      BOOL v29 = v14 < v25;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
      if (v29)
      {
        return 0;
      }
      else
      {
        int v30 = *(_DWORD *)(v15 + 64);
        *a4 = sub_17C480(a1, &v30);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_1B01F8(uint64_t a1, void *a2, void **a3, uint64_t *a4)
{
  double result = *a3;
  if (*a3)
  {
    if (result)
    {
      uint64_t v8 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v8 + 56))(v8);
      (*(void (**)(void *))(*(void *)v8 + 64))(v8);
      uint64_t v9 = *(void *)(a1 + 72);
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v10 = v9 + 8;
      uint64_t v11 = v12;
      if (!v12) {
        return 0;
      }
      int v13 = *((char *)a2 + 23);
      if (v13 >= 0) {
        size_t v14 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v14 = a2[1];
      }
      if (v13 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v15 = v10;
      do
      {
        int v16 = *(char *)(v11 + 55);
        if (v16 >= 0) {
          size_t v17 = *(unsigned __int8 *)(v11 + 55);
        }
        else {
          size_t v17 = *(void *)(v11 + 40);
        }
        if (v16 >= 0) {
          long long v18 = (const void *)(v11 + 32);
        }
        else {
          long long v18 = *(const void **)(v11 + 32);
        }
        if (v14 >= v17) {
          size_t v19 = v17;
        }
        else {
          size_t v19 = v14;
        }
        int v20 = memcmp(v18, a2, v19);
        BOOL v21 = v17 < v14;
        if (v20) {
          BOOL v21 = v20 < 0;
        }
        BOOL v22 = !v21;
        if (v21) {
          BOOL v23 = (uint64_t *)(v11 + 8);
        }
        else {
          BOOL v23 = (uint64_t *)v11;
        }
        if (v22) {
          uint64_t v15 = v11;
        }
        uint64_t v11 = *v23;
      }
      while (*v23);
      if (v15 == v10) {
        return 0;
      }
      int v24 = *(char *)(v15 + 55);
      size_t v25 = v24 >= 0 ? *(unsigned __int8 *)(v15 + 55) : *(void *)(v15 + 40);
      std::string v26 = v24 >= 0 ? (const void *)(v15 + 32) : *(const void **)(v15 + 32);
      size_t v27 = v25 >= v14 ? v14 : v25;
      int v28 = memcmp(a2, v26, v27);
      BOOL v29 = v14 < v25;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
      if (v29)
      {
        return 0;
      }
      else
      {
        int v30 = *(_DWORD *)(v15 + 64);
        *a4 = sub_1B45E8(a1, &v30);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

void *sub_1B042C(uint64_t a1, void *a2, void **a3, uint64_t *a4)
{
  double result = *a3;
  if (*a3)
  {
    if (result)
    {
      uint64_t v8 = result;
      (*(void (**)(void *))(*(void *)result + 48))(result);
      (*(void (**)(void *))(*(void *)v8 + 56))(v8);
      (*(void (**)(void *))(*(void *)v8 + 64))(v8);
      uint64_t v9 = *(void *)(a1 + 72);
      uint64_t v12 = *(void *)(v9 + 8);
      uint64_t v10 = v9 + 8;
      uint64_t v11 = v12;
      if (!v12) {
        return 0;
      }
      int v13 = *((char *)a2 + 23);
      if (v13 >= 0) {
        size_t v14 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v14 = a2[1];
      }
      if (v13 < 0) {
        a2 = (void *)*a2;
      }
      uint64_t v15 = v10;
      do
      {
        int v16 = *(char *)(v11 + 55);
        if (v16 >= 0) {
          size_t v17 = *(unsigned __int8 *)(v11 + 55);
        }
        else {
          size_t v17 = *(void *)(v11 + 40);
        }
        if (v16 >= 0) {
          long long v18 = (const void *)(v11 + 32);
        }
        else {
          long long v18 = *(const void **)(v11 + 32);
        }
        if (v14 >= v17) {
          size_t v19 = v17;
        }
        else {
          size_t v19 = v14;
        }
        int v20 = memcmp(v18, a2, v19);
        BOOL v21 = v17 < v14;
        if (v20) {
          BOOL v21 = v20 < 0;
        }
        BOOL v22 = !v21;
        if (v21) {
          BOOL v23 = (uint64_t *)(v11 + 8);
        }
        else {
          BOOL v23 = (uint64_t *)v11;
        }
        if (v22) {
          uint64_t v15 = v11;
        }
        uint64_t v11 = *v23;
      }
      while (*v23);
      if (v15 == v10) {
        return 0;
      }
      int v24 = *(char *)(v15 + 55);
      size_t v25 = v24 >= 0 ? *(unsigned __int8 *)(v15 + 55) : *(void *)(v15 + 40);
      std::string v26 = v24 >= 0 ? (const void *)(v15 + 32) : *(const void **)(v15 + 32);
      size_t v27 = v25 >= v14 ? v14 : v25;
      int v28 = memcmp(a2, v26, v27);
      BOOL v29 = v14 < v25;
      if (v28) {
        BOOL v29 = v28 < 0;
      }
      if (v29)
      {
        return 0;
      }
      else
      {
        int v30 = *(_DWORD *)(v15 + 64);
        *a4 = sub_18984C(a1, &v30);
        return &def_332C + 1;
      }
    }
  }
  return result;
}

uint64_t sub_1B0664(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0x7D0:
      operator new();
    case 0x7D1:
      operator new();
    case 0x7D2:
      operator new();
    case 0x7D3:
      operator new();
    case 0x7D4:
      operator new();
    case 0x7D5:
      operator new();
    case 0x7D6:
      operator new();
    case 0x7D7:
      operator new();
    case 0x7D8:
      operator new();
    case 0x7D9:
      operator new();
    case 0x7DA:
      operator new();
    case 0x7DB:
      operator new();
    case 0x7DC:
      operator new();
    case 0x7DD:
      operator new();
    case 0x7DE:
      operator new();
    case 0x7DF:
      operator new();
    case 0x7E0:
      operator new();
    case 0x7E1:
      operator new();
    case 0x7E2:
      operator new();
    case 0x7E3:
      operator new();
    case 0x7E4:
      operator new();
    case 0x7E5:
      operator new();
    case 0x7E6:
      operator new();
    case 0x7E7:
      operator new();
    case 0x7E8:
      operator new();
    case 0x7E9:
      operator new();
    case 0x7EA:
      operator new();
    case 0x7EB:
      operator new();
    case 0x7EC:
      operator new();
    case 0x7ED:
      operator new();
    case 0x7EE:
      operator new();
    case 0x7EF:
      operator new();
    case 0x7F0:
      operator new();
    case 0x7F1:
      operator new();
    case 0x7F2:
      operator new();
    case 0x7F3:
      operator new();
    case 0x7F4:
      operator new();
    case 0x7F5:
      operator new();
    case 0x7F6:
      operator new();
    case 0x7F7:
      operator new();
    case 0x7F8:
      operator new();
    case 0x7F9:
      operator new();
    case 0x7FA:
      operator new();
    case 0x7FB:
      operator new();
    case 0x7FC:
      operator new();
    case 0x7FD:
      operator new();
    case 0x7FE:
      operator new();
    case 0x7FF:
      operator new();
    case 0x800:
      operator new();
    case 0x801:
      operator new();
    case 0x802:
      operator new();
    case 0x803:
      operator new();
    case 0x804:
      operator new();
    case 0x805:
      operator new();
    case 0x806:
      operator new();
    case 0x807:
      operator new();
    case 0x808:
      operator new();
    case 0x809:
      operator new();
    case 0x80A:
      operator new();
    case 0x80B:
      operator new();
    case 0x80C:
      operator new();
    case 0x80D:
      operator new();
    default:
      switch(*a2)
      {
        case 0x418:
          operator new();
        case 0x419:
          operator new();
        case 0x41A:
          operator new();
        case 0x41B:
          operator new();
        case 0x41C:
          operator new();
        case 0x41D:
          operator new();
        case 0x41E:
          operator new();
        case 0x41F:
          operator new();
        case 0x420:
          operator new();
        case 0x421:
          operator new();
        case 0x422:
          operator new();
        case 0x423:
          operator new();
        case 0x424:
          operator new();
        case 0x425:
          operator new();
        case 0x426:
          operator new();
        case 0x427:
          operator new();
        case 0x428:
          operator new();
        case 0x429:
          operator new();
        case 0x42A:
          operator new();
        case 0x42B:
          operator new();
        case 0x42C:
          operator new();
        case 0x42D:
          operator new();
        case 0x42E:
          operator new();
        case 0x42F:
          operator new();
        case 0x430:
          operator new();
        case 0x431:
          operator new();
        case 0x432:
          operator new();
        case 0x433:
          operator new();
        case 0x434:
          operator new();
        case 0x435:
          operator new();
        case 0x436:
          operator new();
        case 0x437:
          operator new();
        case 0x438:
          operator new();
        case 0x439:
          operator new();
        case 0x43A:
          operator new();
        case 0x43B:
          operator new();
        default:
          return 0;
      }
  }
}

void sub_1B1C94()
{
}

double sub_1B1CA8(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) + *(double *)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1B1CC8()
{
  return 0;
}

void sub_1B1CD0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)/t)");
}

void sub_1B1D00()
{
}

double sub_1B1D14(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) + *(double *)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1B1D34()
{
  return 0;
}

void sub_1B1D3C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)*t)");
}

void sub_1B1D6C()
{
}

double sub_1B1D80(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) - *(double *)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1B1DA0()
{
  return 0;
}

void sub_1B1DA8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)/t)");
}

void sub_1B1DD8()
{
}

double sub_1B1DEC(uint64_t a1)
{
  return *(double *)(a1 + 8) + (**(double **)(a1 + 16) - *(double *)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1B1E0C()
{
  return 0;
}

void sub_1B1E14(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)*t)");
}

void sub_1B1E44()
{
}

double sub_1B1E58(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) * *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B1E78()
{
  return 0;
}

void sub_1B1E80(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)/t)");
}

void sub_1B1EB0()
{
}

double sub_1B1EC4(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) * *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B1EE4()
{
  return 0;
}

void sub_1B1EEC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)*t)");
}

void sub_1B1F1C()
{
}

double sub_1B1F30(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / *(double *)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1B1F50()
{
  return 0;
}

void sub_1B1F58(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)+t)");
}

void sub_1B1F88()
{
}

double sub_1B1F9C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B1FBC()
{
  return 0;
}

void sub_1B1FC4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)/t)");
}

void sub_1B1FF4()
{
}

double sub_1B2008(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B2028()
{
  return 0;
}

void sub_1B2030(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)*t)");
}

void sub_1B2060()
{
}

double sub_1B2074(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) + *(double *)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1B2094()
{
  return 0;
}

void sub_1B209C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)/t)");
}

void sub_1B20CC()
{
}

double sub_1B20E0(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) + *(double *)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1B2100()
{
  return 0;
}

void sub_1B2108(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)*t)");
}

void sub_1B2138()
{
}

double sub_1B214C(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) - *(double *)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1B216C()
{
  return 0;
}

void sub_1B2174(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)/t)");
}

void sub_1B21A4()
{
}

double sub_1B21B8(uint64_t a1)
{
  return *(double *)(a1 + 8) - (**(double **)(a1 + 16) - *(double *)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1B21D8()
{
  return 0;
}

void sub_1B21E0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)*t)");
}

void sub_1B2210()
{
}

double sub_1B2224(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) * *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B2244()
{
  return 0;
}

void sub_1B224C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)/t)");
}

void sub_1B227C()
{
}

double sub_1B2290(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) * *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B22B0()
{
  return 0;
}

void sub_1B22B8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)*t)");
}

void sub_1B22E8()
{
}

double sub_1B22FC(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) / *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B231C()
{
  return 0;
}

void sub_1B2324(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)/t)");
}

void sub_1B2354()
{
}

double sub_1B2368(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) / *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B2388()
{
  return 0;
}

void sub_1B2390(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)*t)");
}

void sub_1B23C0()
{
}

double sub_1B23D4(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B23F4()
{
  return 0;
}

void sub_1B23FC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)*t)-t");
}

void sub_1B242C()
{
}

double sub_1B2440(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B2460()
{
  return 0;
}

void sub_1B2468(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)*t)-t");
}

void sub_1B2498()
{
}

double sub_1B24AC(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B24CC()
{
  return 0;
}

void sub_1B24D4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)-t");
}

void sub_1B2504()
{
}

double sub_1B2518(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B2538()
{
  return 0;
}

void sub_1B2540(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)*t)-t");
}

void sub_1B2570()
{
}

double sub_1B2584(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B25A4()
{
  return 0;
}

void sub_1B25AC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)/t)-t");
}

void sub_1B25DC()
{
}

double sub_1B25F0(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B2610()
{
  return 0;
}

void sub_1B2618(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)/t)-t");
}

void sub_1B2648()
{
}

double sub_1B265C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B267C()
{
  return 0;
}

void sub_1B2684(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)/t)-t");
}

void sub_1B26B4()
{
}

double sub_1B26C8(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) / *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B26E8()
{
  return 0;
}

void sub_1B26F0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)/t)-t");
}

void sub_1B2720()
{
}

double sub_1B2734(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B2754()
{
  return 0;
}

void sub_1B275C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t*t)");
}

void sub_1B278C()
{
}

double sub_1B27A0(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B27C0()
{
  return 0;
}

void sub_1B27C8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t*t)");
}

void sub_1B27F8()
{
}

double sub_1B280C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B282C()
{
  return 0;
}

void sub_1B2834(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t/t)");
}

void sub_1B2864()
{
}

double sub_1B2878(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B2898()
{
  return 0;
}

void sub_1B28A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t/t)");
}

void sub_1B28D0()
{
}

double sub_1B28E4(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B2904()
{
  return 0;
}

void sub_1B290C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t/t)");
}

void sub_1B293C()
{
}

double sub_1B2950(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B2970()
{
  return 0;
}

void sub_1B2978(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t/t)");
}

void sub_1B29A8()
{
}

double sub_1B29BC(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B29DC()
{
  return 0;
}

void sub_1B29E4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t*t)");
}

void sub_1B2A14()
{
}

double sub_1B2A28(uint64_t a1)
{
  return *(double *)(a1 + 8) / (**(double **)(a1 + 16) + *(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B2A48()
{
  return 0;
}

void sub_1B2A50(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t+(t*t))");
}

void sub_1B2A80()
{
}

double sub_1B2A94(uint64_t a1)
{
  return *(double *)(a1 + 8) / (**(double **)(a1 + 16) - *(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B2AB4()
{
  return 0;
}

void sub_1B2ABC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t-(t*t))");
}

void sub_1B2AEC()
{
}

double sub_1B2B00(uint64_t a1)
{
  return *(double *)(a1 + 8) * (**(double **)(a1 + 16) + *(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B2B20()
{
  return 0;
}

void sub_1B2B28(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t+(t*t))");
}

void sub_1B2B58()
{
}

double sub_1B2B6C(uint64_t a1)
{
  return *(double *)(a1 + 8) * (**(double **)(a1 + 16) - *(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B2B8C()
{
  return 0;
}

void sub_1B2B94(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t-(t*t))");
}

void sub_1B2BC4()
{
}

double sub_1B2BD8(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B2BF8()
{
  return 0;
}

void sub_1B2C00(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t*t)");
}

void sub_1B2C30()
{
}

double sub_1B2C44(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B2C64()
{
  return 0;
}

void sub_1B2C6C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t/t)");
}

void sub_1B2C9C()
{
}

double sub_1B2CB0(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B2CD0()
{
  return 0;
}

void sub_1B2CD8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t*t)");
}

void sub_1B2D08()
{
}

double sub_1B2D1C(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B2D3C()
{
  return 0;
}

void sub_1B2D44(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t/t)");
}

void sub_1B2D74()
{
}

double sub_1B2D88(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B2DA8()
{
  return 0;
}

void sub_1B2DB0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t*t)");
}

void sub_1B2DE0()
{
}

double sub_1B2DF4(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B2E14()
{
  return 0;
}

void sub_1B2E1C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t/t)");
}

void sub_1B2E4C()
{
}

double sub_1B2E60(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B2E80()
{
  return 0;
}

void sub_1B2E88(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t*t)");
}

void sub_1B2EB8()
{
}

double sub_1B2ECC(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B2EEC()
{
  return 0;
}

void sub_1B2EF4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t/t)");
}

void sub_1B2F24()
{
}

double sub_1B2F38(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) - (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B2F58()
{
  return 0;
}

void sub_1B2F60(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t-t)");
}

void sub_1B2F90()
{
}

double sub_1B2FA4(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B2FC4()
{
  return 0;
}

void sub_1B2FCC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t-t)");
}

void sub_1B2FFC()
{
}

double sub_1B3010(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1B3030()
{
  return 0;
}

void sub_1B3038(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t+t)");
}

void sub_1B3068()
{
}

double sub_1B307C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B309C()
{
  return 0;
}

void sub_1B30A4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t-t)");
}

void sub_1B30D4()
{
}

double sub_1B30E8(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B3108()
{
  return 0;
}

void sub_1B3110(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t-t)");
}

void sub_1B3140()
{
}

double sub_1B3154(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B3174()
{
  return 0;
}

void sub_1B317C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t+t)");
}

void sub_1B31AC()
{
}

double sub_1B31C0(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1B31E0()
{
  return 0;
}

void sub_1B31E8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t+t)");
}

void sub_1B3218()
{
}

double sub_1B322C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B324C()
{
  return 0;
}

void sub_1B3254(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t+t)");
}

void sub_1B3284()
{
}

double sub_1B3298(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B32B8()
{
  return 0;
}

void sub_1B32C0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t+t)");
}

void sub_1B32F0()
{
}

double sub_1B3304(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B3324()
{
  return 0;
}

void sub_1B332C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t+t)");
}

void sub_1B335C()
{
}

double sub_1B3370(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B3390()
{
  return 0;
}

void sub_1B3398(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t+t)");
}

void sub_1B33C8()
{
}

double sub_1B33DC(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1B33FC()
{
  return 0;
}

void sub_1B3404(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t+t)");
}

void sub_1B3434()
{
}

double sub_1B3448(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1B3468()
{
  return 0;
}

void sub_1B3470(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t+t)");
}

void sub_1B34A0()
{
}

double sub_1B34B4(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B34D4()
{
  return 0;
}

void sub_1B34DC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t-t)");
}

void sub_1B350C()
{
}

double sub_1B3520(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B3540()
{
  return 0;
}

void sub_1B3548(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t-t)");
}

void sub_1B3578()
{
}

double sub_1B358C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) - (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B35AC()
{
  return 0;
}

void sub_1B35B4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t-t)");
}

void sub_1B35E4()
{
}

double sub_1B35F8(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) - (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B3618()
{
  return 0;
}

void sub_1B3620(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t-t)");
}

void sub_1B3650()
{
}

double sub_1B3664(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B3684()
{
  return 0;
}

void sub_1B368C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t*t)");
}

void sub_1B36BC()
{
}

double sub_1B36D0(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1B36F0()
{
  return 0;
}

void sub_1B36F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t/t)");
}

void sub_1B3728()
{
}

double sub_1B373C(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B375C()
{
  return 0;
}

void sub_1B3764(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t*t)");
}

void sub_1B3794()
{
}

double sub_1B37A8(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1B37C8()
{
  return 0;
}

void sub_1B37D0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t/t)");
}

void sub_1B3800()
{
}

double sub_1B3814(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B3834()
{
  return 0;
}

void sub_1B383C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t*t)");
}

void sub_1B386C()
{
}

double sub_1B3880(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1B38A0()
{
  return 0;
}

void sub_1B38A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t/t)");
}

void sub_1B38D8()
{
}

double sub_1B38EC(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B390C()
{
  return 0;
}

void sub_1B3914(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t*t)");
}

void sub_1B3944()
{
}

double sub_1B3958(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1B3978()
{
  return 0;
}

void sub_1B3980(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t/t)");
}

void sub_1B39B0()
{
}

double sub_1B39C4(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B39E4()
{
  return 0;
}

void sub_1B39EC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t+t)");
}

void sub_1B3A1C()
{
}

double sub_1B3A30(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B3A50()
{
  return 0;
}

void sub_1B3A58(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t+t)");
}

void sub_1B3A88()
{
}

double sub_1B3A9C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B3ABC()
{
  return 0;
}

void sub_1B3AC4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t+t)");
}

void sub_1B3AF4()
{
}

double sub_1B3B08(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) / (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B3B28()
{
  return 0;
}

void sub_1B3B30(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t+t)");
}

void sub_1B3B60()
{
}

double sub_1B3B74(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B3B94()
{
  return 0;
}

void sub_1B3B9C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t-t)");
}

void sub_1B3BCC()
{
}

double sub_1B3BE0(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) / (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B3C00()
{
  return 0;
}

void sub_1B3C08(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t-t)");
}

void sub_1B3C38()
{
}

double sub_1B3C4C(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B3C6C()
{
  return 0;
}

void sub_1B3C74(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t-t)");
}

void sub_1B3CA4()
{
}

double sub_1B3CB8(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) / (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B3CD8()
{
  return 0;
}

void sub_1B3CE0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t*t)");
}

void sub_1B3D10()
{
}

double sub_1B3D24(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * (*(double *)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1B3D44()
{
  return 0;
}

void sub_1B3D4C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t/t)");
}

void sub_1B3D7C()
{
}

double sub_1B3D90(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) * (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B3DB0()
{
  return 0;
}

void sub_1B3DB8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t-t)");
}

void sub_1B3DE8()
{
}

double sub_1B3DFC(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B3E1C()
{
  return 0;
}

void sub_1B3E24(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t*t)");
}

void sub_1B3E54()
{
}

double sub_1B3E68(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) * (*(double *)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1B3E88()
{
  return 0;
}

void sub_1B3E90(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t*(t/t))");
}

void sub_1B3EC0()
{
}

double sub_1B3ED4(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) * (*(double *)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1B3EF4()
{
  return 0;
}

void sub_1B3EFC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t*(t/t))");
}

void sub_1B3F2C()
{
}

double sub_1B3F40(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16) / (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B3F60()
{
  return 0;
}

void sub_1B3F68(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t/(t*t))");
}

void sub_1B3F98()
{
}

double sub_1B3FAC(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) / (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B3FCC()
{
  return 0;
}

void sub_1B3FD4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t/(t*t))");
}

void sub_1B4004()
{
}

double sub_1B4018(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1B4038()
{
  return 0;
}

void sub_1B4040(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)*t");
}

void sub_1B4070()
{
}

double sub_1B4084(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1B40A4()
{
  return 0;
}

void sub_1B40AC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)/t");
}

void sub_1B40DC()
{
}

double sub_1B40F0(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1B4110()
{
  return 0;
}

void sub_1B4118(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)*t");
}

void sub_1B4148()
{
}

double sub_1B415C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1B417C()
{
  return 0;
}

void sub_1B4184(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)/t");
}

void sub_1B41B4()
{
}

double sub_1B41C8(uint64_t a1)
{
  return *(double *)(a1 + 32) * (*(double *)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24));
}

uint64_t sub_1B41E8()
{
  return 0;
}

void sub_1B41F0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))*t");
}

void sub_1B4220()
{
}

double sub_1B4234(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1B4254()
{
  return 0;
}

void sub_1B425C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))/t");
}

void sub_1B428C()
{
}

double sub_1B42A0(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B42C0()
{
  return 0;
}

void sub_1B42C8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t+t)");
}

void sub_1B42F8()
{
}

double sub_1B430C(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B432C()
{
  return 0;
}

void sub_1B4334(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t-t)");
}

void sub_1B4364()
{
}

double sub_1B4378(uint64_t a1)
{
  return (*(double *)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B4398()
{
  return 0;
}

void sub_1B43A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t+t)");
}

void sub_1B43D0()
{
}

double sub_1B43E4(uint64_t a1)
{
  return (*(double *)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B4404()
{
  return 0;
}

void sub_1B440C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t-t)");
}

void sub_1B443C()
{
}

double sub_1B4450(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B4470()
{
  return 0;
}

void sub_1B4478(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t-t)");
}

void sub_1B44A8()
{
}

double sub_1B44BC(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16) - (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B44DC()
{
  return 0;
}

void sub_1B44E4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t-t)");
}

void sub_1B4514()
{
}

double sub_1B4528(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B4548()
{
  return 0;
}

void sub_1B4550(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t*t)");
}

void sub_1B4580()
{
}

double sub_1B4594(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16) * *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B45B4()
{
  return 0;
}

void sub_1B45BC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)/t");
}

uint64_t sub_1B45E8(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0x7D0:
      operator new();
    case 0x7D1:
      operator new();
    case 0x7D2:
      operator new();
    case 0x7D3:
      operator new();
    case 0x7D4:
      operator new();
    case 0x7D5:
      operator new();
    case 0x7D6:
      operator new();
    case 0x7D7:
      operator new();
    case 0x7D8:
      operator new();
    case 0x7D9:
      operator new();
    case 0x7DA:
      operator new();
    case 0x7DB:
      operator new();
    case 0x7DC:
      operator new();
    case 0x7DD:
      operator new();
    case 0x7DE:
      operator new();
    case 0x7DF:
      operator new();
    case 0x7E0:
      operator new();
    case 0x7E1:
      operator new();
    case 0x7E2:
      operator new();
    case 0x7E3:
      operator new();
    case 0x7E4:
      operator new();
    case 0x7E5:
      operator new();
    case 0x7E6:
      operator new();
    case 0x7E7:
      operator new();
    case 0x7E8:
      operator new();
    case 0x7E9:
      operator new();
    case 0x7EA:
      operator new();
    case 0x7EB:
      operator new();
    case 0x7EC:
      operator new();
    case 0x7ED:
      operator new();
    case 0x7EE:
      operator new();
    case 0x7EF:
      operator new();
    case 0x7F0:
      operator new();
    case 0x7F1:
      operator new();
    case 0x7F2:
      operator new();
    case 0x7F3:
      operator new();
    case 0x7F4:
      operator new();
    case 0x7F5:
      operator new();
    case 0x7F6:
      operator new();
    case 0x7F7:
      operator new();
    case 0x7F8:
      operator new();
    case 0x7F9:
      operator new();
    case 0x7FA:
      operator new();
    case 0x7FB:
      operator new();
    case 0x7FC:
      operator new();
    case 0x7FD:
      operator new();
    case 0x7FE:
      operator new();
    case 0x7FF:
      operator new();
    case 0x800:
      operator new();
    case 0x801:
      operator new();
    case 0x802:
      operator new();
    case 0x803:
      operator new();
    case 0x804:
      operator new();
    case 0x805:
      operator new();
    case 0x806:
      operator new();
    case 0x807:
      operator new();
    case 0x808:
      operator new();
    case 0x809:
      operator new();
    case 0x80A:
      operator new();
    case 0x80B:
      operator new();
    case 0x80C:
      operator new();
    case 0x80D:
      operator new();
    default:
      switch(*a2)
      {
        case 0x418:
          operator new();
        case 0x419:
          operator new();
        case 0x41A:
          operator new();
        case 0x41B:
          operator new();
        case 0x41C:
          operator new();
        case 0x41D:
          operator new();
        case 0x41E:
          operator new();
        case 0x41F:
          operator new();
        case 0x420:
          operator new();
        case 0x421:
          operator new();
        case 0x422:
          operator new();
        case 0x423:
          operator new();
        case 0x424:
          operator new();
        case 0x425:
          operator new();
        case 0x426:
          operator new();
        case 0x427:
          operator new();
        case 0x428:
          operator new();
        case 0x429:
          operator new();
        case 0x42A:
          operator new();
        case 0x42B:
          operator new();
        case 0x42C:
          operator new();
        case 0x42D:
          operator new();
        case 0x42E:
          operator new();
        case 0x42F:
          operator new();
        case 0x430:
          operator new();
        case 0x431:
          operator new();
        case 0x432:
          operator new();
        case 0x433:
          operator new();
        case 0x434:
          operator new();
        case 0x435:
          operator new();
        case 0x436:
          operator new();
        case 0x437:
          operator new();
        case 0x438:
          operator new();
        case 0x439:
          operator new();
        case 0x43A:
          operator new();
        case 0x43B:
          operator new();
        default:
          return 0;
      }
  }
}

void sub_1B5C08()
{
}

double sub_1B5C1C(uint64_t a1)
{
  return **(double **)(a1 + 8) + (**(double **)(a1 + 16) + *(double *)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1B5C3C()
{
  return 0;
}

void sub_1B5C44(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)/t)");
}

void sub_1B5C74()
{
}

double sub_1B5C88(uint64_t a1)
{
  return **(double **)(a1 + 8) + (**(double **)(a1 + 16) + *(double *)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1B5CA8()
{
  return 0;
}

void sub_1B5CB0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t+t)*t)");
}

void sub_1B5CE0()
{
}

double sub_1B5CF4(uint64_t a1)
{
  return **(double **)(a1 + 8) + (**(double **)(a1 + 16) - *(double *)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1B5D14()
{
  return 0;
}

void sub_1B5D1C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)/t)");
}

void sub_1B5D4C()
{
}

double sub_1B5D60(uint64_t a1)
{
  return **(double **)(a1 + 8) + (**(double **)(a1 + 16) - *(double *)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1B5D80()
{
  return 0;
}

void sub_1B5D88(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t-t)*t)");
}

void sub_1B5DB8()
{
}

double sub_1B5DCC(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) * *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B5DEC()
{
  return 0;
}

void sub_1B5DF4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)/t)");
}

void sub_1B5E24()
{
}

double sub_1B5E38(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) * *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B5E58()
{
  return 0;
}

void sub_1B5E60(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t*t)*t)");
}

void sub_1B5E90()
{
}

double sub_1B5EA4(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) / *(double *)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1B5EC4()
{
  return 0;
}

void sub_1B5ECC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)+t)");
}

void sub_1B5EFC()
{
}

double sub_1B5F10(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) / *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B5F30()
{
  return 0;
}

void sub_1B5F38(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)/t)");
}

void sub_1B5F68()
{
}

double sub_1B5F7C(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) / *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B5F9C()
{
  return 0;
}

void sub_1B5FA4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+((t/t)*t)");
}

void sub_1B5FD4()
{
}

double sub_1B5FE8(uint64_t a1)
{
  return **(double **)(a1 + 8) - (**(double **)(a1 + 16) + *(double *)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1B6008()
{
  return 0;
}

void sub_1B6010(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)/t)");
}

void sub_1B6040()
{
}

double sub_1B6054(uint64_t a1)
{
  return **(double **)(a1 + 8) - (**(double **)(a1 + 16) + *(double *)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1B6074()
{
  return 0;
}

void sub_1B607C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t+t)*t)");
}

void sub_1B60AC()
{
}

double sub_1B60C0(uint64_t a1)
{
  return **(double **)(a1 + 8) - (**(double **)(a1 + 16) - *(double *)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1B60E0()
{
  return 0;
}

void sub_1B60E8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)/t)");
}

void sub_1B6118()
{
}

double sub_1B612C(uint64_t a1)
{
  return **(double **)(a1 + 8) - (**(double **)(a1 + 16) - *(double *)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1B614C()
{
  return 0;
}

void sub_1B6154(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t-t)*t)");
}

void sub_1B6184()
{
}

double sub_1B6198(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) * *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B61B8()
{
  return 0;
}

void sub_1B61C0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)/t)");
}

void sub_1B61F0()
{
}

double sub_1B6204(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) * *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B6224()
{
  return 0;
}

void sub_1B622C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t*t)*t)");
}

void sub_1B625C()
{
}

double sub_1B6270(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) / *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B6290()
{
  return 0;
}

void sub_1B6298(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)/t)");
}

void sub_1B62C8()
{
}

double sub_1B62DC(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) / *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B62FC()
{
  return 0;
}

void sub_1B6304(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-((t/t)*t)");
}

void sub_1B6334()
{
}

double sub_1B6348(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) * *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B6368()
{
  return 0;
}

void sub_1B6370(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)*t)-t");
}

void sub_1B63A0()
{
}

double sub_1B63B4(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) * *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B63D4()
{
  return 0;
}

void sub_1B63DC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)*t)-t");
}

void sub_1B640C()
{
}

double sub_1B6420(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) * *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B6440()
{
  return 0;
}

void sub_1B6448(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)-t");
}

void sub_1B6478()
{
}

double sub_1B648C(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) * *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B64AC()
{
  return 0;
}

void sub_1B64B4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)*t)-t");
}

void sub_1B64E4()
{
}

double sub_1B64F8(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) / *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B6518()
{
  return 0;
}

void sub_1B6520(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t+t)/t)-t");
}

void sub_1B6550()
{
}

double sub_1B6564(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) / *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B6584()
{
  return 0;
}

void sub_1B658C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)/t)-t");
}

void sub_1B65BC()
{
}

double sub_1B65D0(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) / *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B65F0()
{
  return 0;
}

void sub_1B65F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)/t)-t");
}

void sub_1B6628()
{
}

double sub_1B663C(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) / *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B665C()
{
  return 0;
}

void sub_1B6664(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t/t)/t)-t");
}

void sub_1B6694()
{
}

double sub_1B66A8(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B66C8()
{
  return 0;
}

void sub_1B66D0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t*t)");
}

void sub_1B6700()
{
}

double sub_1B6714(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) - *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B6734()
{
  return 0;
}

void sub_1B673C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t*t)");
}

void sub_1B676C()
{
}

double sub_1B6780(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B67A0()
{
  return 0;
}

void sub_1B67A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t/t)");
}

void sub_1B67D8()
{
}

double sub_1B67EC(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) - *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B680C()
{
  return 0;
}

void sub_1B6814(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t/t)");
}

void sub_1B6844()
{
}

double sub_1B6858(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B6878()
{
  return 0;
}

void sub_1B6880(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t/t)");
}

void sub_1B68B0()
{
}

double sub_1B68C4(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) - *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B68E4()
{
  return 0;
}

void sub_1B68EC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t/t)");
}

void sub_1B691C()
{
}

double sub_1B6930(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) - *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B6950()
{
  return 0;
}

void sub_1B6958(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t*t)");
}

void sub_1B6988()
{
}

double sub_1B699C(uint64_t a1)
{
  return **(double **)(a1 + 8) / (**(double **)(a1 + 16) + *(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B69BC()
{
  return 0;
}

void sub_1B69C4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t+(t*t))");
}

void sub_1B69F4()
{
}

double sub_1B6A08(uint64_t a1)
{
  return **(double **)(a1 + 8) / (**(double **)(a1 + 16) - *(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B6A28()
{
  return 0;
}

void sub_1B6A30(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t/(t-(t*t))");
}

void sub_1B6A60()
{
}

double sub_1B6A74(uint64_t a1)
{
  return **(double **)(a1 + 8) * (**(double **)(a1 + 16) + *(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B6A94()
{
  return 0;
}

void sub_1B6A9C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t+(t*t))");
}

void sub_1B6ACC()
{
}

double sub_1B6AE0(uint64_t a1)
{
  return **(double **)(a1 + 8) * (**(double **)(a1 + 16) - *(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B6B00()
{
  return 0;
}

void sub_1B6B08(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t*(t-(t*t))");
}

void sub_1B6B38()
{
}

double sub_1B6B4C(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B6B6C()
{
  return 0;
}

void sub_1B6B74(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t*t)");
}

void sub_1B6BA4()
{
}

double sub_1B6BB8(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B6BD8()
{
  return 0;
}

void sub_1B6BE0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t/t)");
}

void sub_1B6C10()
{
}

double sub_1B6C24(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B6C44()
{
  return 0;
}

void sub_1B6C4C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t*t)");
}

void sub_1B6C7C()
{
}

double sub_1B6C90(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B6CB0()
{
  return 0;
}

void sub_1B6CB8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t/t)");
}

void sub_1B6CE8()
{
}

double sub_1B6CFC(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B6D1C()
{
  return 0;
}

void sub_1B6D24(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t*t)");
}

void sub_1B6D54()
{
}

double sub_1B6D68(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B6D88()
{
  return 0;
}

void sub_1B6D90(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t/t)");
}

void sub_1B6DC0()
{
}

double sub_1B6DD4(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B6DF4()
{
  return 0;
}

void sub_1B6DFC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t*t)");
}

void sub_1B6E2C()
{
}

double sub_1B6E40(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B6E60()
{
  return 0;
}

void sub_1B6E68(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t/t)");
}

void sub_1B6E98()
{
}

double sub_1B6EAC(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) - (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B6ECC()
{
  return 0;
}

void sub_1B6ED4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)-(t-t)");
}

void sub_1B6F04()
{
}

double sub_1B6F18(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B6F38()
{
  return 0;
}

void sub_1B6F40(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t-t)");
}

void sub_1B6F70()
{
}

double sub_1B6F84(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) + *(double *)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1B6FA4()
{
  return 0;
}

void sub_1B6FAC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)+(t+t)");
}

void sub_1B6FDC()
{
}

double sub_1B6FF0(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B7010()
{
  return 0;
}

void sub_1B7018(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t-t)");
}

void sub_1B7048()
{
}

double sub_1B705C(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B707C()
{
  return 0;
}

void sub_1B7084(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t-t)");
}

void sub_1B70B4()
{
}

double sub_1B70C8(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) - (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B70E8()
{
  return 0;
}

void sub_1B70F0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t+t)");
}

void sub_1B7120()
{
}

double sub_1B7134(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1B7154()
{
  return 0;
}

void sub_1B715C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t+t)");
}

void sub_1B718C()
{
}

double sub_1B71A0(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B71C0()
{
  return 0;
}

void sub_1B71C8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t+t)");
}

void sub_1B71F8()
{
}

double sub_1B720C(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B722C()
{
  return 0;
}

void sub_1B7234(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t+t)");
}

void sub_1B7264()
{
}

double sub_1B7278(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) - (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B7298()
{
  return 0;
}

void sub_1B72A0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t+t)");
}

void sub_1B72D0()
{
}

double sub_1B72E4(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) - (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B7304()
{
  return 0;
}

void sub_1B730C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t+t)");
}

void sub_1B733C()
{
}

double sub_1B7350(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1B7370()
{
  return 0;
}

void sub_1B7378(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t+t)");
}

void sub_1B73A8()
{
}

double sub_1B73BC(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) + *(double *)(a1 + 32);
}

uint64_t sub_1B73DC()
{
  return 0;
}

void sub_1B73E4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t+t)");
}

void sub_1B7414()
{
}

double sub_1B7428(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) + *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B7448()
{
  return 0;
}

void sub_1B7450(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)+(t-t)");
}

void sub_1B7480()
{
}

double sub_1B7494(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B74B4()
{
  return 0;
}

void sub_1B74BC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t-t)");
}

void sub_1B74EC()
{
}

double sub_1B7500(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) - (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B7520()
{
  return 0;
}

void sub_1B7528(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)-(t-t)");
}

void sub_1B7558()
{
}

double sub_1B756C(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) - (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B758C()
{
  return 0;
}

void sub_1B7594(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)-(t-t)");
}

void sub_1B75C4()
{
}

double sub_1B75D8(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B75F8()
{
  return 0;
}

void sub_1B7600(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t*t)");
}

void sub_1B7630()
{
}

double sub_1B7644(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1B7664()
{
  return 0;
}

void sub_1B766C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t/t)");
}

void sub_1B769C()
{
}

double sub_1B76B0(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B76D0()
{
  return 0;
}

void sub_1B76D8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t*t)");
}

void sub_1B7708()
{
}

double sub_1B771C(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1B773C()
{
  return 0;
}

void sub_1B7744(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t/t)");
}

void sub_1B7774()
{
}

double sub_1B7788(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B77A8()
{
  return 0;
}

void sub_1B77B0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t*t)");
}

void sub_1B77E0()
{
}

double sub_1B77F4(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1B7814()
{
  return 0;
}

void sub_1B781C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t/t)");
}

void sub_1B784C()
{
}

double sub_1B7860(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B7880()
{
  return 0;
}

void sub_1B7888(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t*t)");
}

void sub_1B78B8()
{
}

double sub_1B78CC(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1B78EC()
{
  return 0;
}

void sub_1B78F4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t/t)");
}

void sub_1B7924()
{
}

double sub_1B7938(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) * (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B7958()
{
  return 0;
}

void sub_1B7960(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t+t)");
}

void sub_1B7990()
{
}

double sub_1B79A4(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) * (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B79C4()
{
  return 0;
}

void sub_1B79CC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t+t)");
}

void sub_1B79FC()
{
}

double sub_1B7A10(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) / (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B7A30()
{
  return 0;
}

void sub_1B7A38(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t+t)");
}

void sub_1B7A68()
{
}

double sub_1B7A7C(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) / (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B7A9C()
{
  return 0;
}

void sub_1B7AA4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t+t)");
}

void sub_1B7AD4()
{
}

double sub_1B7AE8(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) / (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B7B08()
{
  return 0;
}

void sub_1B7B10(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t-t)");
}

void sub_1B7B40()
{
}

double sub_1B7B54(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) / (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B7B74()
{
  return 0;
}

void sub_1B7B7C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)/(t-t)");
}

void sub_1B7BAC()
{
}

double sub_1B7BC0(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) * (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B7BE0()
{
  return 0;
}

void sub_1B7BE8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t-t)");
}

void sub_1B7C18()
{
}

double sub_1B7C2C(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) / (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B7C4C()
{
  return 0;
}

void sub_1B7C54(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)/(t*t)");
}

void sub_1B7C84()
{
}

double sub_1B7C98(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) * (*(double *)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1B7CB8()
{
  return 0;
}

void sub_1B7CC0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t/t)");
}

void sub_1B7CF0()
{
}

double sub_1B7D04(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) * (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B7D24()
{
  return 0;
}

void sub_1B7D2C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)*(t-t)");
}

void sub_1B7D5C()
{
}

double sub_1B7D70(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) * (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B7D90()
{
  return 0;
}

void sub_1B7D98(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t*t)*(t*t)");
}

void sub_1B7DC8()
{
}

double sub_1B7DDC(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) * (*(double *)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1B7DFC()
{
  return 0;
}

void sub_1B7E04(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t*(t/t))");
}

void sub_1B7E34()
{
}

double sub_1B7E48(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) * (*(double *)(a1 + 24) / *(double *)(a1 + 32));
}

uint64_t sub_1B7E68()
{
  return 0;
}

void sub_1B7E70(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t*(t/t))");
}

void sub_1B7EA0()
{
}

double sub_1B7EB4(uint64_t a1)
{
  return **(double **)(a1 + 8) + **(double **)(a1 + 16) / (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B7ED4()
{
  return 0;
}

void sub_1B7EDC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t+(t/(t*t))");
}

void sub_1B7F0C()
{
}

double sub_1B7F20(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) / (*(double *)(a1 + 24) * *(double *)(a1 + 32));
}

uint64_t sub_1B7F40()
{
  return 0;
}

void sub_1B7F48(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "t-(t/(t*t))");
}

void sub_1B7F78()
{
}

double sub_1B7F8C(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1B7FAC()
{
  return 0;
}

void sub_1B7FB4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)*t");
}

void sub_1B7FE4()
{
}

double sub_1B7FF8(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16) - *(double *)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1B8018()
{
  return 0;
}

void sub_1B8020(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)-t)/t");
}

void sub_1B8050()
{
}

double sub_1B8064(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24)) * *(double *)(a1 + 32);
}

uint64_t sub_1B8084()
{
  return 0;
}

void sub_1B808C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)*t");
}

void sub_1B80BC()
{
}

double sub_1B80D0(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1B80F0()
{
  return 0;
}

void sub_1B80F8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t-t)+t)/t");
}

void sub_1B8128()
{
}

double sub_1B813C(uint64_t a1)
{
  return *(double *)(a1 + 32) * (**(double **)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24));
}

uint64_t sub_1B815C()
{
  return 0;
}

void sub_1B8164(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))*t");
}

void sub_1B8194()
{
}

double sub_1B81A8(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16) - *(double *)(a1 + 24)) / *(double *)(a1 + 32);
}

uint64_t sub_1B81C8()
{
  return 0;
}

void sub_1B81D0(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+(t-t))/t");
}

void sub_1B8200()
{
}

double sub_1B8214(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) / (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B8234()
{
  return 0;
}

void sub_1B823C(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)/(t+t)");
}

void sub_1B826C()
{
}

double sub_1B8280(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) / (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B82A0()
{
  return 0;
}

void sub_1B82A8(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)/(t-t)");
}

void sub_1B82D8()
{
}

double sub_1B82EC(uint64_t a1)
{
  return (**(double **)(a1 + 8) + **(double **)(a1 + 16)) * (*(double *)(a1 + 24) + *(double *)(a1 + 32));
}

uint64_t sub_1B830C()
{
  return 0;
}

void sub_1B8314(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t+t)*(t+t)");
}

void sub_1B8344()
{
}

double sub_1B8358(uint64_t a1)
{
  return (**(double **)(a1 + 8) - **(double **)(a1 + 16)) * (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B8378()
{
  return 0;
}

void sub_1B8380(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)*(t-t)");
}

void sub_1B83B0()
{
}

double sub_1B83C4(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) + *(double *)(a1 + 24) - *(double *)(a1 + 32);
}

uint64_t sub_1B83E4()
{
  return 0;
}

void sub_1B83EC(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)+(t-t)");
}

void sub_1B841C()
{
}

double sub_1B8430(uint64_t a1)
{
  return **(double **)(a1 + 8) - **(double **)(a1 + 16) - (*(double *)(a1 + 24) - *(double *)(a1 + 32));
}

uint64_t sub_1B8450()
{
  return 0;
}

void sub_1B8458(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t-t)-(t-t)");
}

void sub_1B8488()
{
}

double sub_1B849C(uint64_t a1)
{
  return **(double **)(a1 + 8) / **(double **)(a1 + 16) + *(double *)(a1 + 24) * *(double *)(a1 + 32);
}

uint64_t sub_1B84BC()
{
  return 0;
}

void sub_1B84C4(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "(t/t)+(t*t)");
}

void sub_1B84F4()
{
}

double sub_1B8508(uint64_t a1)
{
  return **(double **)(a1 + 8) * **(double **)(a1 + 16) * *(double *)(a1 + 24) / *(double *)(a1 + 32);
}

uint64_t sub_1B8528()
{
  return 0;
}

void sub_1B8530(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "((t*t)*t)/t");
}

uint64_t sub_1B855C(uint64_t a1)
{
  *(void *)a1 = off_24256B0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B85D8(uint64_t a1)
{
  *(void *)a1 = off_24256B0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B8674(uint64_t a1)
{
  return (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) - *(double *)(a1 + 8);
}

uint64_t sub_1B86C4(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B86CC()
{
  return 3;
}

double sub_1B86D4(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B86DC(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B86E4(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B86F0(uint64_t a1)
{
  *(void *)a1 = off_2425720;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B876C(uint64_t a1)
{
  *(void *)a1 = off_2425720;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B8808(uint64_t a1)
{
  return (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) * *(double *)(a1 + 8);
}

uint64_t sub_1B8858(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B8860()
{
  return 4;
}

double sub_1B8868(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B8870(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B8878(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B8884(uint64_t a1)
{
  *(void *)a1 = off_2425790;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B8900(uint64_t a1)
{
  *(void *)a1 = off_2425790;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B899C(uint64_t a1)
{
  return (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) / *(double *)(a1 + 8);
}

uint64_t sub_1B89EC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B89F4()
{
  return 5;
}

double sub_1B89FC(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B8A04(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B8A0C(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B8A18(uint64_t a1)
{
  *(void *)a1 = off_2425800;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B8A94(uint64_t a1)
{
  *(void *)a1 = off_2425800;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B8B30(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  long double v3 = *(double *)(a1 + 8);

  return fmod(v2, v3);
}

uint64_t sub_1B8B8C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B8B94()
{
  return 6;
}

double sub_1B8B9C(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B8BA4(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B8BAC(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B8BB8(uint64_t a1)
{
  *(void *)a1 = off_2425870;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B8C34(uint64_t a1)
{
  *(void *)a1 = off_2425870;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B8CD0(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  long double v3 = *(double *)(a1 + 8);

  return pow(v2, v3);
}

uint64_t sub_1B8D2C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B8D34()
{
  return 7;
}

double sub_1B8D3C(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B8D44(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B8D4C(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B8D58(uint64_t a1)
{
  *(void *)a1 = off_24258E0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B8DD4(uint64_t a1)
{
  *(void *)a1 = off_24258E0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B8E70(uint64_t a1)
{
  BOOL v1 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) < *(double *)(a1 + 8);
  double result = 0.0;
  if (v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1B8ECC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B8ED4()
{
  return 14;
}

double sub_1B8EDC(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B8EE4(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B8EEC(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B8EF8(uint64_t a1)
{
  *(void *)a1 = off_2425950;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B8F74(uint64_t a1)
{
  *(void *)a1 = off_2425950;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B9010(uint64_t a1)
{
  BOOL v1 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) > *(double *)(a1 + 8);
  double result = 0.0;
  if (!v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1B906C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9074()
{
  return 15;
}

double sub_1B907C(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B9084(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B908C(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9098(uint64_t a1)
{
  *(void *)a1 = off_24259C0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B9114(uint64_t a1)
{
  *(void *)a1 = off_24259C0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B91B0(uint64_t a1)
{
  BOOL v1 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) <= *(double *)(a1 + 8);
  double result = 0.0;
  if (!v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1B920C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9214()
{
  return 21;
}

double sub_1B921C(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B9224(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B922C(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9238(uint64_t a1)
{
  *(void *)a1 = off_2425A30;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B92B4(uint64_t a1)
{
  *(void *)a1 = off_2425A30;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B9350(uint64_t a1)
{
  BOOL v1 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) < *(double *)(a1 + 8);
  double result = 0.0;
  if (!v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1B93AC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B93B4()
{
  return 20;
}

double sub_1B93BC(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B93C4(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B93CC(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B93D8(uint64_t a1)
{
  *(void *)a1 = off_2425AA0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B9454(uint64_t a1)
{
  *(void *)a1 = off_2425AA0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B94F0(uint64_t a1)
{
  BOOL v1 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) == *(double *)(a1 + 8);
  double result = 0.0;
  if (v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1B954C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9554()
{
  return 16;
}

double sub_1B955C(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B9564(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B956C(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9578(uint64_t a1)
{
  *(void *)a1 = off_2425B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B95F4(uint64_t a1)
{
  *(void *)a1 = off_2425B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B9690(uint64_t a1)
{
  BOOL v1 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) == *(double *)(a1 + 8);
  double result = 0.0;
  if (!v1) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1B96EC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B96F4()
{
  return 18;
}

double sub_1B96FC(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B9704(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B970C(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9718(uint64_t a1)
{
  *(void *)a1 = off_2425B80;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B9794(uint64_t a1)
{
  *(void *)a1 = off_2425B80;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B9830(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  BOOL v3 = *(double *)(a1 + 8) == 0.0 || v2 == 0.0;
  double result = 1.0;
  if (v3) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1B9890(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9898()
{
  return 22;
}

double sub_1B98A0(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B98A8(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B98B0(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B98BC(uint64_t a1)
{
  *(void *)a1 = off_2425BF0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B9938(uint64_t a1)
{
  *(void *)a1 = off_2425BF0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B99D4(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  BOOL v3 = *(double *)(a1 + 8) == 0.0 || v2 == 0.0;
  double result = 1.0;
  if (!v3) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1B9A34(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9A3C()
{
  return 23;
}

double sub_1B9A44(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B9A4C(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B9A54(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9A60(uint64_t a1)
{
  *(void *)a1 = off_2425C60;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B9ADC(uint64_t a1)
{
  *(void *)a1 = off_2425C60;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B9B78(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  BOOL v3 = *(double *)(a1 + 8) == 0.0 && v2 == 0.0;
  double result = 1.0;
  if (v3) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1B9BD8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9BE0()
{
  return 24;
}

double sub_1B9BE8(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B9BF0(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B9BF8(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9C04(uint64_t a1)
{
  *(void *)a1 = off_2425CD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B9C80(uint64_t a1)
{
  *(void *)a1 = off_2425CD0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B9D1C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  BOOL v3 = *(double *)(a1 + 8) == 0.0 && v2 == 0.0;
  double result = 1.0;
  if (!v3) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1B9D7C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9D84()
{
  return 25;
}

double sub_1B9D8C(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B9D94(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B9D9C(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9DA8(uint64_t a1)
{
  *(void *)a1 = off_2425D40;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B9E24(uint64_t a1)
{
  *(void *)a1 = off_2425D40;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1B9EC0(uint64_t a1)
{
  BOOL v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) == 0.0;
  double result = 0.0;
  if (v2 != (*(double *)(a1 + 8) == 0.0)) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1B9F30(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9F38()
{
  return 26;
}

double sub_1B9F40(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1B9F48(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B9F50(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

uint64_t sub_1B9F5C(uint64_t a1)
{
  *(void *)a1 = off_2425DB0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1B9FD8(uint64_t a1)
{
  *(void *)a1 = off_2425DB0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1BA074(uint64_t a1)
{
  BOOL v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) != 0.0;
  double result = 1.0;
  if (v2 != (*(double *)(a1 + 8) != 0.0)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1BA0E4(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1BA0EC()
{
  return 27;
}

double sub_1BA0F4(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA0FC(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return result;
}

uint64_t sub_1BA104(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 0;
  return *(void *)(a1 + 16);
}

void sub_1BA114()
{
}

double sub_1BA128(uint64_t a1)
{
  return *(double *)(a1 + 8) + **(double **)(a1 + 16);
}

uint64_t sub_1BA13C()
{
  return 34;
}

uint64_t sub_1BA144()
{
  return 2;
}

double sub_1BA14C(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA154(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA160()
{
}

double sub_1BA174(uint64_t a1)
{
  return *(double *)(a1 + 8) - **(double **)(a1 + 16);
}

uint64_t sub_1BA188()
{
  return 35;
}

uint64_t sub_1BA190()
{
  return 3;
}

double sub_1BA198(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA1A0(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA1AC()
{
}

double sub_1BA1C0(uint64_t a1)
{
  return *(double *)(a1 + 8) * **(double **)(a1 + 16);
}

uint64_t sub_1BA1D4()
{
  return 36;
}

uint64_t sub_1BA1DC()
{
  return 4;
}

double sub_1BA1E4(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA1EC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA1F8()
{
}

double sub_1BA20C(uint64_t a1)
{
  return *(double *)(a1 + 8) / **(double **)(a1 + 16);
}

uint64_t sub_1BA220()
{
  return 37;
}

uint64_t sub_1BA228()
{
  return 5;
}

double sub_1BA230(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA238(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA244()
{
}

double sub_1BA258(uint64_t a1)
{
  return fmod(*(long double *)(a1 + 8), **(long double **)(a1 + 16));
}

uint64_t sub_1BA268()
{
  return 38;
}

uint64_t sub_1BA270()
{
  return 6;
}

double sub_1BA278(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA280(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA28C()
{
}

double sub_1BA2A0(uint64_t a1)
{
  return pow(*(long double *)(a1 + 8), **(long double **)(a1 + 16));
}

uint64_t sub_1BA2B0()
{
  return 39;
}

uint64_t sub_1BA2B8()
{
  return 7;
}

double sub_1BA2C0(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA2C8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA2D4()
{
}

double sub_1BA2E8(uint64_t a1)
{
  double result = 0.0;
  if (*(double *)(a1 + 8) < **(double **)(a1 + 16)) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1BA308()
{
  return 40;
}

uint64_t sub_1BA310()
{
  return 14;
}

double sub_1BA318(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA320(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA32C()
{
}

double sub_1BA340(uint64_t a1)
{
  double result = 0.0;
  if (*(double *)(a1 + 8) <= **(double **)(a1 + 16)) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1BA360()
{
  return 41;
}

uint64_t sub_1BA368()
{
  return 15;
}

double sub_1BA370(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA378(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA384()
{
}

double sub_1BA398(uint64_t a1)
{
  double result = 0.0;
  if (*(double *)(a1 + 8) > **(double **)(a1 + 16)) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1BA3B8()
{
  return 42;
}

uint64_t sub_1BA3C0()
{
  return 21;
}

double sub_1BA3C8(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA3D0(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA3DC()
{
}

double sub_1BA3F0(uint64_t a1)
{
  double result = 0.0;
  if (*(double *)(a1 + 8) >= **(double **)(a1 + 16)) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1BA410()
{
  return 43;
}

uint64_t sub_1BA418()
{
  return 20;
}

double sub_1BA420(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA428(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA434()
{
}

double sub_1BA448(uint64_t a1)
{
  double result = 0.0;
  if (*(double *)(a1 + 8) == **(double **)(a1 + 16)) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1BA468()
{
  return 44;
}

uint64_t sub_1BA470()
{
  return 16;
}

double sub_1BA478(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA480(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA48C()
{
}

double sub_1BA4A0(uint64_t a1)
{
  double result = 0.0;
  if (*(double *)(a1 + 8) != **(double **)(a1 + 16)) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1BA4C0()
{
  return 45;
}

uint64_t sub_1BA4C8()
{
  return 18;
}

double sub_1BA4D0(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA4D8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA4E4()
{
}

double sub_1BA4F8(uint64_t a1)
{
  BOOL v1 = **(double **)(a1 + 16) == 0.0 || *(double *)(a1 + 8) == 0.0;
  double result = 1.0;
  if (v1) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1BA51C()
{
  return 46;
}

uint64_t sub_1BA524()
{
  return 22;
}

double sub_1BA52C(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA534(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA540()
{
}

double sub_1BA554(uint64_t a1)
{
  BOOL v1 = **(double **)(a1 + 16) == 0.0 || *(double *)(a1 + 8) == 0.0;
  double result = 1.0;
  if (!v1) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1BA578()
{
  return 47;
}

uint64_t sub_1BA580()
{
  return 23;
}

double sub_1BA588(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA590(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA59C()
{
}

double sub_1BA5B0(uint64_t a1)
{
  BOOL v1 = **(double **)(a1 + 16) == 0.0 && *(double *)(a1 + 8) == 0.0;
  double result = 1.0;
  if (v1) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1BA5D4()
{
  return 48;
}

uint64_t sub_1BA5DC()
{
  return 24;
}

double sub_1BA5E4(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA5EC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA5F8()
{
}

double sub_1BA60C(uint64_t a1)
{
  BOOL v1 = **(double **)(a1 + 16) == 0.0 && *(double *)(a1 + 8) == 0.0;
  double result = 1.0;
  if (!v1) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1BA630()
{
  return 49;
}

uint64_t sub_1BA638()
{
  return 25;
}

double sub_1BA640(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA648(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA654()
{
}

double sub_1BA668(uint64_t a1)
{
  double result = 0.0;
  if ((*(double *)(a1 + 8) == 0.0) != (**(double **)(a1 + 16) == 0.0)) {
    return 1.0;
  }
  return result;
}

uint64_t sub_1BA69C()
{
  return 49;
}

uint64_t sub_1BA6A4()
{
  return 26;
}

double sub_1BA6AC(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA6B4(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA6C0()
{
}

double sub_1BA6D4(uint64_t a1)
{
  double result = 1.0;
  if ((*(double *)(a1 + 8) != 0.0) != (**(double **)(a1 + 16) != 0.0)) {
    return 0.0;
  }
  return result;
}

uint64_t sub_1BA708()
{
  return 49;
}

uint64_t sub_1BA710()
{
  return 27;
}

double sub_1BA718(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_1BA720(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_1BA728()
{
}

void sub_1BA88C()
{
}

void sub_1BA8B0()
{
}

void sub_1BAA14()
{
}

void sub_1BAA38()
{
}

void sub_1BAB9C()
{
}

void sub_1BABC0()
{
}

void sub_1BAD24()
{
}

uint64_t sub_1BAD48(uint64_t a1)
{
  *(void *)a1 = off_2426570;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BAE24(uint64_t a1)
{
  *(void *)a1 = off_2426570;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

double sub_1BAEFC(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v2 + (*(double (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
}

uint64_t sub_1BAF7C(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BAFAC()
{
  return 5;
}

uint64_t sub_1BAFB4(uint64_t a1)
{
  *(void *)a1 = off_24265C0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BB090(uint64_t a1)
{
  *(void *)a1 = off_24265C0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

double sub_1BB168(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v2 - (*(double (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
}

uint64_t sub_1BB1E8(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BB218()
{
  return 5;
}

uint64_t sub_1BB220(uint64_t a1)
{
  *(void *)a1 = off_2426610;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BB2FC(uint64_t a1)
{
  *(void *)a1 = off_2426610;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

double sub_1BB3D4(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v2 * (*(double (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
}

uint64_t sub_1BB454(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BB484()
{
  return 5;
}

uint64_t sub_1BB48C(uint64_t a1)
{
  *(void *)a1 = off_2426660;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BB568(uint64_t a1)
{
  *(void *)a1 = off_2426660;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

double sub_1BB640(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  return v2 / (*(double (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
}

uint64_t sub_1BB6C0(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BB6F0()
{
  return 5;
}

uint64_t sub_1BB6F8(uint64_t a1)
{
  *(void *)a1 = off_24266B0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BB7D4(uint64_t a1)
{
  *(void *)a1 = off_24266B0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

double sub_1BB8AC(uint64_t a1)
{
  long double v2 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  long double v3 = (*(double (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));

  return fmod(v2, v3);
}

uint64_t sub_1BB940(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BB970()
{
  return 5;
}

uint64_t sub_1BB978(uint64_t a1)
{
  *(void *)a1 = off_2426700;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BBA54(uint64_t a1)
{
  *(void *)a1 = off_2426700;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

double sub_1BBB2C(uint64_t a1)
{
  long double v2 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  long double v3 = (*(double (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));

  return pow(v2, v3);
}

uint64_t sub_1BBBC0(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BBBF0()
{
  return 5;
}

uint64_t sub_1BBBF8(uint64_t a1)
{
  *(void *)a1 = off_2426750;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BBCD4(uint64_t a1)
{
  *(void *)a1 = off_2426750;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

void sub_1BBDAC(uint64_t a1)
{
}

uint64_t sub_1BBE38(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BBE68()
{
  return 5;
}

uint64_t sub_1BBE70(uint64_t a1)
{
  *(void *)a1 = off_24267A0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BBF4C(uint64_t a1)
{
  *(void *)a1 = off_24267A0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

void sub_1BC024(uint64_t a1)
{
}

uint64_t sub_1BC0B0(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BC0E0()
{
  return 5;
}

uint64_t sub_1BC0E8(uint64_t a1)
{
  *(void *)a1 = off_24267F0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BC1C4(uint64_t a1)
{
  *(void *)a1 = off_24267F0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

void sub_1BC29C(uint64_t a1)
{
}

uint64_t sub_1BC328(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BC358()
{
  return 5;
}

uint64_t sub_1BC360(uint64_t a1)
{
  *(void *)a1 = off_2426840;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BC43C(uint64_t a1)
{
  *(void *)a1 = off_2426840;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

void sub_1BC514(uint64_t a1)
{
}

uint64_t sub_1BC5A0(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BC5D0()
{
  return 5;
}

uint64_t sub_1BC5D8(uint64_t a1)
{
  *(void *)a1 = off_2426890;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BC6B4(uint64_t a1)
{
  *(void *)a1 = off_2426890;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

void sub_1BC78C(uint64_t a1)
{
}

uint64_t sub_1BC818(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BC848()
{
  return 5;
}

uint64_t sub_1BC850(uint64_t a1)
{
  *(void *)a1 = off_24268E0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BC92C(uint64_t a1)
{
  *(void *)a1 = off_24268E0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

void sub_1BCA04(uint64_t a1)
{
}

uint64_t sub_1BCA90(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BCAC0()
{
  return 5;
}

uint64_t sub_1BCAC8(uint64_t a1)
{
  *(void *)a1 = off_2426930;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BCBA4(uint64_t a1)
{
  *(void *)a1 = off_2426930;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

void sub_1BCC7C(uint64_t a1)
{
}

uint64_t sub_1BCD0C(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BCD3C()
{
  return 5;
}

uint64_t sub_1BCD44(uint64_t a1)
{
  *(void *)a1 = off_2426980;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BCE20(uint64_t a1)
{
  *(void *)a1 = off_2426980;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

void sub_1BCEF8(uint64_t a1)
{
}

uint64_t sub_1BCF88(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BCFB8()
{
  return 5;
}

uint64_t sub_1BCFC0(uint64_t a1)
{
  *(void *)a1 = off_24269D0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BD09C(uint64_t a1)
{
  *(void *)a1 = off_24269D0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

void sub_1BD174(uint64_t a1)
{
}

uint64_t sub_1BD204(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BD234()
{
  return 5;
}

uint64_t sub_1BD23C(uint64_t a1)
{
  *(void *)a1 = off_2426A20;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BD318(uint64_t a1)
{
  *(void *)a1 = off_2426A20;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

void sub_1BD3F0(uint64_t a1)
{
}

uint64_t sub_1BD480(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BD4B0()
{
  return 5;
}

uint64_t sub_1BD4B8(uint64_t a1)
{
  *(void *)a1 = off_2426A70;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BD594(uint64_t a1)
{
  *(void *)a1 = off_2426A70;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

uint64_t sub_1BD66C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
}

uint64_t sub_1BD70C(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BD73C()
{
  return 5;
}

uint64_t sub_1BD744(uint64_t a1)
{
  *(void *)a1 = off_2426AC0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      goto LABEL_16;
    }
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v7 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return a1;
  }
LABEL_16:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 24) = 0;
  return a1;
}

void sub_1BD820(uint64_t a1)
{
  *(void *)a1 = off_2426AC0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 16) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 32) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

uint64_t sub_1BD8F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
}

uint64_t sub_1BD998(uint64_t a1, void *a2)
{
  if (*a2 == 1) {
    return *(void *)(a1 + 24);
  }
  if (*a2) {
    return 0;
  }
  return *(void *)(a1 + 8);
}

uint64_t sub_1BD9C8()
{
  return 5;
}

uint64_t sub_1BD9D0(uint64_t a1, void *a2)
{
  if (*a2 && (*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 17)
  {
    if (!*a2)
    {
LABEL_7:
      *a2 = 0;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 18)
    {
      if (*a2) {
        (*(void (**)(void))(*(void *)*a2 + 8))(*a2);
      }
      goto LABEL_7;
    }
  }
LABEL_8:
  uint64_t v3 = a2[1];
  if (v3 && (*(unsigned int (**)(uint64_t))(*(void *)v3 + 32))(v3) != 17)
  {
    uint64_t v4 = a2[1];
    if (!v4)
    {
LABEL_14:
      a2[1] = 0;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 18)
    {
      uint64_t v5 = a2[1];
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      goto LABEL_14;
    }
  }
LABEL_15:
  uint64_t result = a2[2];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
    if (result != 17)
    {
      uint64_t result = a2[2];
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
        if (result == 18) {
          return result;
        }
        uint64_t result = a2[2];
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      a2[2] = 0;
    }
  }
  return result;
}

uint64_t sub_1BDBB8(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  int v6 = sub_115C38(*a3);
  int v7 = sub_115C38(a3[1]);
  int v8 = sub_115C38(a3[2]);
  if (v6 != v7 || ((v7 ^ v8) & 1) != 0 || (*a2 != 68 ? (int v9 = v6) : (int v9 = 0), (v9 & v7 & v8) == 1))
  {
    uint64_t v10 = *(void *)(a1 + 80);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B91C0;
    strcpy(__str.__r_.__value_.__l.__data_, "Invalid string operation");
    if (*(char *)(v10 + 871) < 0)
    {
      if (*(void *)(v10 + 856)) {
        goto LABEL_12;
      }
    }
    else if (*(unsigned char *)(v10 + 871))
    {
      goto LABEL_12;
    }
    std::string::operator=((std::string *)(v10 + 848), &__str);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 1;
    }
LABEL_12:
    operator delete(__str.__r_.__value_.__l.__data_);
    return 1;
  }
  return 0;
}

void sub_1BDCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BDCF0(uint64_t a1, _DWORD *a2, void *a3)
{
  if ((*a2 - 87) <= 2 || (*a3 ? (BOOL v3 = a3[1] == 0) : (BOOL v3 = 1), !v3 ? (v4 = a3[2] == 0) : (v4 = 1), v4))
  {
    sub_1BD9D0(*(void *)(a1 + 8), a3);
    return 0;
  }
  else
  {
    if (*a2) {
      operator new();
    }
    return 0;
  }
}

void sub_1BDF48()
{
}

uint64_t sub_1BDF6C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = off_2426B10;
  *(_DWORD *)(a1 + 8) = *a2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  if (a3)
  {
    BOOL v9 = (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18;
    *(void *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 24) = v9;
  }
  if (a4)
  {
    BOOL v10 = (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
       && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18;
    *(void *)(a1 + 32) = a4;
    *(unsigned char *)(a1 + 40) = v10;
  }
  if (a5)
  {
    BOOL v11 = (*(unsigned int (**)(uint64_t))(*(void *)a5 + 32))(a5) != 17
       && (*(unsigned int (**)(uint64_t))(*(void *)a5 + 32))(a5) != 18;
    *(void *)(a1 + 48) = a5;
    *(unsigned char *)(a1 + 56) = v11;
  }
  return a1;
}

uint64_t sub_1BE13C(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1BE268(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

uint64_t sub_1BE3A8(void **a1)
{
  return (*(uint64_t (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1BE4D4()
{
  return 6;
}

uint64_t sub_1BE4DC(uint64_t a1, _DWORD *a2, int64x2_t *a3)
{
  if ((*a2 - 87) <= 2
    || (vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(*a3), (int32x4_t)vceqzq_s64(a3[1])))) & 1) != 0)
  {
    sub_1BE7C8(*(void *)(a1 + 8), a3);
  }
  else if (*a2)
  {
    operator new();
  }
  return 0;
}

void sub_1BE7A4()
{
}

uint64_t sub_1BE7C8(uint64_t a1, void *a2)
{
  if (*a2 && (*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 17)
  {
    if (!*a2)
    {
LABEL_7:
      *a2 = 0;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 18)
    {
      if (*a2) {
        (*(void (**)(void))(*(void *)*a2 + 8))(*a2);
      }
      goto LABEL_7;
    }
  }
LABEL_8:
  uint64_t v3 = a2[1];
  if (v3 && (*(unsigned int (**)(uint64_t))(*(void *)v3 + 32))(v3) != 17)
  {
    uint64_t v4 = a2[1];
    if (!v4)
    {
LABEL_14:
      a2[1] = 0;
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 18)
    {
      uint64_t v5 = a2[1];
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      goto LABEL_14;
    }
  }
LABEL_15:
  uint64_t v6 = a2[2];
  if (v6 && (*(unsigned int (**)(uint64_t))(*(void *)v6 + 32))(v6) != 17)
  {
    uint64_t v7 = a2[2];
    if (!v7)
    {
LABEL_21:
      a2[2] = 0;
      goto LABEL_22;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 32))(v7) != 18)
    {
      uint64_t v8 = a2[2];
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      goto LABEL_21;
    }
  }
LABEL_22:
  uint64_t result = a2[3];
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
    if (result != 17)
    {
      uint64_t result = a2[3];
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
        if (result == 18) {
          return result;
        }
        uint64_t result = a2[3];
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      a2[3] = 0;
    }
  }
  return result;
}

uint64_t sub_1BEA48(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = result;
  if (a2)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
    if (result == 17)
    {
      BOOL v10 = 0;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
      BOOL v10 = result != 18;
    }
    *(void *)uint64_t v8 = a2;
    *(unsigned char *)(v8 + 8) = v10;
  }
  if (a3)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3);
    if (result == 17)
    {
      BOOL v11 = 0;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3);
      BOOL v11 = result != 18;
    }
    *(void *)(v8 + 16) = a3;
    *(unsigned char *)(v8 + 24) = v11;
  }
  if (a4)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
    if (result == 17)
    {
      BOOL v12 = 0;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
      BOOL v12 = result != 18;
    }
    *(void *)(v8 + 32) = a4;
    *(unsigned char *)(v8 + 40) = v12;
  }
  if (a5)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 32))(a5);
    if (result == 17)
    {
      BOOL v13 = 0;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 32))(a5);
      BOOL v13 = result != 18;
    }
    *(void *)(v8 + 48) = a5;
    *(unsigned char *)(v8 + 56) = v13;
  }
  return result;
}

void sub_1BEC5C(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1BEC94()
{
  return NAN;
}

uint64_t sub_1BECA0()
{
  return 7;
}

uint64_t sub_1BECA8(uint64_t a1)
{
  *(void *)a1 = off_2426B60;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_22:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v11 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11) {
        goto LABEL_26;
      }
LABEL_16:
      uint64_t v8 = *(void *)(a1 + 64);
      if (v8) {
        goto LABEL_27;
      }
      return a1;
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v10 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10) {
      goto LABEL_22;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    goto LABEL_16;
  }
LABEL_26:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  uint64_t v8 = *(void *)(a1 + 64);
  if (!v8) {
    return a1;
  }
LABEL_27:
  if (!*(unsigned char *)(a1 + 72)) {
    return a1;
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  *(void *)(a1 + 64) = 0;
  return a1;
}

uint64_t sub_1BEE14(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 104) != 44)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9AB0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR029 - Expected ',' between if-statement condition and consequent");
    memset(&v71, 0, sizeof(v71));
    std::string::push_back(&v71, 55);
    std::string::push_back(&v71, 57);
    std::string::push_back(&v71, 51);
    std::string::push_back(&v71, 49);
    std::string::push_back(&v71, 50);
    std::string::size_type size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v6 = &v71;
    }
    else {
      uint64_t v6 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v71.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      BOOL v7 = (std::string *)((char *)v6 + size - 1);
      if (v7 > v6)
      {
        uint64_t v8 = &v6->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v9 = *(v8 - 1);
          *(v8 - 1) = v7->__r_.__value_.__s.__data_[0];
          v7->__r_.__value_.__s.__data_[0] = v9;
          BOOL v7 = (std::string *)((char *)v7 - 1);
          BOOL v10 = v8++ >= (char *)v7;
        }
        while (!v10);
      }
    }
    BOOL v11 = std::string::insert(&v71, 0, "exprtk.hpp:");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v75.__r_.__value_.__s + 23) = 0;
    v75.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v76 = -1;
    *(_OWORD *)v78 = 0u;
    *(_OWORD *)v79 = 0u;
    long long v80 = 0u;
    *(_OWORD *)__p = 0u;
    long long v82 = 0u;
    uint64_t v83 = 0;
    int v77 = 1;
    int v74 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v75, (const std::string *)(a1 + 112));
    uint64_t v76 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v78, &__str);
    std::string::operator=((std::string *)&v79[1], &v72);
    uint64_t v13 = *(void *)(a1 + 568);
    uint64_t v14 = *(void *)(a1 + 560);
    uint64_t v15 = 30 * ((v13 - v14) >> 3) - 1;
    if (v13 == v14) {
      uint64_t v15 = 0;
    }
    if (v15 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v14 = *(void *)(a1 + 560);
      uint64_t v13 = *(void *)(a1 + 568);
    }
    if (v13 == v14)
    {
      uint64_t v17 = 0;
    }
    else
    {
      unint64_t v16 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v17 = *(void *)(v14 + 8 * (v16 / 0x1E)) + 136 * (v16 % 0x1E);
    }
LABEL_59:
    sub_B5158(v17, (uint64_t)&v74);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v82) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v80) & 0x80000000) == 0)
      {
LABEL_61:
        if ((SHIBYTE(v79[0]) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_69;
      }
    }
    else if ((SHIBYTE(v80) & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(v79[1]);
    if ((SHIBYTE(v79[0]) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_70;
    }
LABEL_69:
    operator delete(v78[0]);
    if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_71;
    }
LABEL_70:
    operator delete(v75.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_64:
      if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
      goto LABEL_72;
    }
LABEL_71:
    operator delete(v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_65:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_66:
        uint64_t v44 = 0;
        uint64_t v19 = 0;
        goto LABEL_121;
      }
LABEL_73:
      operator delete(__str.__r_.__value_.__l.__data_);
      goto LABEL_66;
    }
LABEL_72:
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_73;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v4) {
    uint64_t v4 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v4 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v4;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v4 + 8));
  *(void *)(a1 + 136) = *(void *)(v4 + 32);
  uint64_t v18 = sub_B7FE4(a1, 0);
  if (!v18)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9AC0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR030 - Failed to parse consequent for if-statement");
    memset(&v71, 0, sizeof(v71));
    std::string::push_back(&v71, 54);
    std::string::push_back(&v71, 48);
    std::string::push_back(&v71, 52);
    std::string::push_back(&v71, 49);
    std::string::push_back(&v71, 50);
    std::string::size_type v21 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v22 = &v71;
    }
    else {
      BOOL v22 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v21 = v71.__r_.__value_.__l.__size_;
    }
    if (v21)
    {
      BOOL v23 = (std::string *)((char *)v22 + v21 - 1);
      if (v23 > v22)
      {
        int v24 = &v22->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v25 = *(v24 - 1);
          *(v24 - 1) = v23->__r_.__value_.__s.__data_[0];
          v23->__r_.__value_.__s.__data_[0] = v25;
          BOOL v23 = (std::string *)((char *)v23 - 1);
          BOOL v10 = v24++ >= (char *)v23;
        }
        while (!v10);
      }
    }
    std::string v26 = std::string::insert(&v71, 0, "exprtk.hpp:");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v75.__r_.__value_.__s + 23) = 0;
    v75.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v76 = -1;
    *(_OWORD *)v78 = 0u;
    *(_OWORD *)v79 = 0u;
    long long v80 = 0u;
    *(_OWORD *)__p = 0u;
    long long v82 = 0u;
    uint64_t v83 = 0;
    int v77 = 1;
    int v74 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v75, (const std::string *)(a1 + 112));
    uint64_t v76 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v78, &__str);
    std::string::operator=((std::string *)&v79[1], &v72);
    uint64_t v28 = *(void *)(a1 + 568);
    uint64_t v29 = *(void *)(a1 + 560);
    uint64_t v30 = 30 * ((v28 - v29) >> 3) - 1;
    if (v28 == v29) {
      uint64_t v30 = 0;
    }
    if (v30 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v29 = *(void *)(a1 + 560);
      uint64_t v28 = *(void *)(a1 + 568);
    }
    if (v28 == v29)
    {
      uint64_t v17 = 0;
    }
    else
    {
      unint64_t v31 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v17 = *(void *)(v29 + 8 * (v31 / 0x1E)) + 136 * (v31 % 0x1E);
    }
    goto LABEL_59;
  }
  uint64_t v19 = v18;
  if (*(_DWORD *)(a1 + 104) != 44)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9820;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR031 - Expected ',' between if-statement consequent and alternative");
    memset(&v71, 0, sizeof(v71));
    std::string::push_back(&v71, 53);
    std::string::push_back(&v71, 49);
    std::string::push_back(&v71, 52);
    std::string::push_back(&v71, 49);
    std::string::push_back(&v71, 50);
    std::string::size_type v32 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v33 = &v71;
    }
    else {
      std::string::size_type v33 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v32 = v71.__r_.__value_.__l.__size_;
    }
    if (v32)
    {
      v34 = (std::string *)((char *)v33 + v32 - 1);
      if (v34 > v33)
      {
        v35 = &v33->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v36 = *(v35 - 1);
          *(v35 - 1) = v34->__r_.__value_.__s.__data_[0];
          v34->__r_.__value_.__s.__data_[0] = v36;
          v34 = (std::string *)((char *)v34 - 1);
          BOOL v10 = v35++ >= (char *)v34;
        }
        while (!v10);
      }
    }
    v37 = std::string::insert(&v71, 0, "exprtk.hpp:");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v75.__r_.__value_.__s + 23) = 0;
    v75.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v76 = -1;
    *(_OWORD *)v78 = 0u;
    *(_OWORD *)v79 = 0u;
    long long v80 = 0u;
    *(_OWORD *)__p = 0u;
    long long v82 = 0u;
    uint64_t v83 = 0;
    int v77 = 1;
    int v74 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v75, (const std::string *)(a1 + 112));
    uint64_t v76 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v78, &__str);
    std::string::operator=((std::string *)&v79[1], &v72);
    uint64_t v39 = *(void *)(a1 + 568);
    uint64_t v40 = *(void *)(a1 + 560);
    uint64_t v41 = 30 * ((v39 - v40) >> 3) - 1;
    if (v39 == v40) {
      uint64_t v41 = 0;
    }
    if (v41 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v40 = *(void *)(a1 + 560);
      uint64_t v39 = *(void *)(a1 + 568);
    }
    if (v39 == v40)
    {
      uint64_t v43 = 0;
    }
    else
    {
      unint64_t v42 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v43 = *(void *)(v40 + 8 * (v42 / 0x1E)) + 136 * (v42 % 0x1E);
    }
LABEL_113:
    sub_B5158(v43, (uint64_t)&v74);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v82) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v80) & 0x80000000) == 0)
      {
LABEL_115:
        if ((SHIBYTE(v79[0]) & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_136;
      }
    }
    else if ((SHIBYTE(v80) & 0x80000000) == 0)
    {
      goto LABEL_115;
    }
    operator delete(v79[1]);
    if ((SHIBYTE(v79[0]) & 0x80000000) == 0)
    {
LABEL_116:
      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_117;
      }
      goto LABEL_137;
    }
LABEL_136:
    operator delete(v78[0]);
    if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_117:
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_118;
      }
      goto LABEL_138;
    }
LABEL_137:
    operator delete(v75.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_118:
      if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_119;
      }
      goto LABEL_139;
    }
LABEL_138:
    operator delete(v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_119:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_120:
        uint64_t v44 = 0;
        goto LABEL_121;
      }
LABEL_140:
      operator delete(__str.__r_.__value_.__l.__data_);
      goto LABEL_120;
    }
LABEL_139:
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_120;
    }
    goto LABEL_140;
  }
  uint64_t v20 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v20) {
    uint64_t v20 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v20 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v20;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v20 + 8));
  *(void *)(a1 + 136) = *(void *)(v20 + 32);
  uint64_t v45 = sub_B7FE4(a1, 0);
  if (!v45)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B99E0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR032 - Failed to parse alternative for if-statement");
    memset(&v71, 0, sizeof(v71));
    std::string::push_back(&v71, 52);
    std::string::push_back(&v71, 50);
    std::string::push_back(&v71, 52);
    std::string::push_back(&v71, 49);
    std::string::push_back(&v71, 50);
    std::string::size_type v47 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v48 = &v71;
    }
    else {
      v48 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v47 = v71.__r_.__value_.__l.__size_;
    }
    if (v47)
    {
      v49 = (std::string *)((char *)v48 + v47 - 1);
      if (v49 > v48)
      {
        v50 = &v48->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v51 = *(v50 - 1);
          *(v50 - 1) = v49->__r_.__value_.__s.__data_[0];
          v49->__r_.__value_.__s.__data_[0] = v51;
          v49 = (std::string *)((char *)v49 - 1);
          BOOL v10 = v50++ >= (char *)v49;
        }
        while (!v10);
      }
    }
    v52 = std::string::insert(&v71, 0, "exprtk.hpp:");
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v75.__r_.__value_.__s + 23) = 0;
    v75.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v76 = -1;
    *(_OWORD *)v78 = 0u;
    *(_OWORD *)v79 = 0u;
    long long v80 = 0u;
    *(_OWORD *)__p = 0u;
    long long v82 = 0u;
    uint64_t v83 = 0;
    int v77 = 1;
    int v74 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v75, (const std::string *)(a1 + 112));
    uint64_t v76 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v78, &__str);
    std::string::operator=((std::string *)&v79[1], &v72);
    uint64_t v54 = *(void *)(a1 + 568);
    uint64_t v55 = *(void *)(a1 + 560);
    uint64_t v56 = 30 * ((v54 - v55) >> 3) - 1;
    if (v54 == v55) {
      uint64_t v56 = 0;
    }
    if (v56 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v55 = *(void *)(a1 + 560);
      uint64_t v54 = *(void *)(a1 + 568);
    }
    if (v54 == v55)
    {
      uint64_t v43 = 0;
    }
    else
    {
      unint64_t v57 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v43 = *(void *)(v55 + 8 * (v57 / 0x1E)) + 136 * (v57 % 0x1E);
    }
    goto LABEL_113;
  }
  uint64_t v44 = v45;
  if (*(_DWORD *)(a1 + 104) == 41)
  {
    uint64_t v46 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 8) == v46) {
      uint64_t v46 = a1 + 40;
    }
    else {
      *(void *)(a1 + 24) = v46 + 40;
    }
    *(_DWORD *)(a1 + 104) = *(_DWORD *)v46;
    std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v46 + 8));
    *(void *)(a1 + 136) = *(void *)(v46 + 32);
    return sub_1C1350(a1 + 344, a2, v19, v44);
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A60;
  strcpy(__str.__r_.__value_.__l.__data_, "ERR033 - Expected ')' at the end of if-statement");
  memset(&v71, 0, sizeof(v71));
  std::string::push_back(&v71, 51);
  std::string::push_back(&v71, 51);
  std::string::push_back(&v71, 52);
  std::string::push_back(&v71, 49);
  std::string::push_back(&v71, 50);
  std::string::size_type v58 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v59 = &v71;
  }
  else {
    v59 = (std::string *)v71.__r_.__value_.__r.__words[0];
  }
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v58 = v71.__r_.__value_.__l.__size_;
  }
  if (v58)
  {
    v60 = (std::string *)((char *)v59 + v58 - 1);
    if (v60 > v59)
    {
      v61 = &v59->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v62 = *(v61 - 1);
        *(v61 - 1) = v60->__r_.__value_.__s.__data_[0];
        v60->__r_.__value_.__s.__data_[0] = v62;
        v60 = (std::string *)((char *)v60 - 1);
        BOOL v10 = v61++ >= (char *)v60;
      }
      while (!v10);
    }
  }
  v63 = std::string::insert(&v71, 0, "exprtk.hpp:");
  long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
  v72.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v64;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&v75.__r_.__value_.__s + 23) = 0;
  v75.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v76 = -1;
  *(_OWORD *)v78 = 0u;
  *(_OWORD *)v79 = 0u;
  long long v80 = 0u;
  *(_OWORD *)__p = 0u;
  long long v82 = 0u;
  uint64_t v83 = 0;
  int v77 = 1;
  int v74 = *(_DWORD *)(a1 + 104);
  std::string::operator=(&v75, (const std::string *)(a1 + 112));
  uint64_t v76 = *(void *)(a1 + 136);
  std::string::operator=((std::string *)v78, &__str);
  std::string::operator=((std::string *)&v79[1], &v72);
  uint64_t v65 = *(void *)(a1 + 568);
  uint64_t v66 = *(void *)(a1 + 560);
  uint64_t v67 = 30 * ((v65 - v66) >> 3) - 1;
  if (v65 == v66) {
    uint64_t v67 = 0;
  }
  if (v67 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
  {
    sub_B4B88(a1 + 552);
    uint64_t v66 = *(void *)(a1 + 560);
    uint64_t v65 = *(void *)(a1 + 568);
  }
  if (v65 == v66)
  {
    uint64_t v69 = 0;
  }
  else
  {
    unint64_t v68 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
    uint64_t v69 = *(void *)(v66 + 8 * (v68 / 0x1E)) + 136 * (v68 % 0x1E);
  }
  sub_B5158(v69, (uint64_t)&v74);
  ++*(void *)(a1 + 592);
  if (SBYTE7(v82) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v80) & 0x80000000) == 0)
    {
LABEL_148:
      if ((SHIBYTE(v79[0]) & 0x80000000) == 0) {
        goto LABEL_149;
      }
      goto LABEL_156;
    }
  }
  else if ((SHIBYTE(v80) & 0x80000000) == 0)
  {
    goto LABEL_148;
  }
  operator delete(v79[1]);
  if ((SHIBYTE(v79[0]) & 0x80000000) == 0)
  {
LABEL_149:
    if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_150;
    }
    goto LABEL_157;
  }
LABEL_156:
  operator delete(v78[0]);
  if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_150:
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_151;
    }
    goto LABEL_158;
  }
LABEL_157:
  operator delete(v75.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_151:
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_152;
    }
LABEL_159:
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_121;
    }
    goto LABEL_160;
  }
LABEL_158:
  operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_159;
  }
LABEL_152:
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_121;
  }
LABEL_160:
  operator delete(__str.__r_.__value_.__l.__data_);
LABEL_121:
  if (a2
    && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 18)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  if (v19
    && (*(unsigned int (**)(uint64_t))(*(void *)v19 + 32))(v19) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)v19 + 32))(v19) != 18)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  if (v44
    && (*(unsigned int (**)(uint64_t))(*(void *)v44 + 32))(v44) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)v44 + 32))(v44) != 18)
  {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  return 0;
}

void sub_1BFD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a28 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a28 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a23);
  _Unwind_Resume(a1);
}

uint64_t sub_1BFE8C(std::string::size_type a1, uint64_t a2)
{
  BOOL v5 = (_DWORD *)(a1 + 104);
  int v4 = *(_DWORD *)(a1 + 104);
  if (v4 == 123)
  {
    char v105 = 15;
    strcpy(__p, "if-statement-01");
    uint64_t v6 = sub_CF240(a1, (uint64_t)__p);
    uint64_t v7 = v6;
    if (v105 < 0)
    {
      operator delete(*(void **)__p);
      if (!v7)
      {
LABEL_12:
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B99C0;
        strcpy(__str.__r_.__value_.__l.__data_, "ERR035 - Failed to parse body of consequent for if-statement");
        memset(&v101, 0, sizeof(v101));
        std::string::push_back(&v101, 48);
        std::string::push_back(&v101, 57);
        std::string::push_back(&v101, 52);
        std::string::push_back(&v101, 49);
        std::string::push_back(&v101, 50);
        std::string::size_type size = HIBYTE(v101.__r_.__value_.__r.__words[2]);
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v11 = &v101;
        }
        else {
          BOOL v11 = (std::string *)v101.__r_.__value_.__r.__words[0];
        }
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v101.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          long long v12 = (std::string *)((char *)v11 + size - 1);
          if (v12 > v11)
          {
            uint64_t v13 = &v11->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v14 = *(v13 - 1);
              *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
              v12->__r_.__value_.__s.__data_[0] = v14;
              long long v12 = (std::string *)((char *)v12 - 1);
              BOOL v15 = v13++ >= (char *)v12;
            }
            while (!v15);
          }
        }
        unint64_t v16 = std::string::insert(&v101, 0, "exprtk.hpp:");
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v102.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        char v106 = 0;
        __p[8] = 0;
        uint64_t v107 = -1;
        *(_OWORD *)v109 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v112 = 0u;
        long long v113 = 0u;
        uint64_t v114 = 0;
        int v108 = 1;
        *(_DWORD *)__p = *(_DWORD *)(a1 + 104);
        std::string::operator=((std::string *)&__p[8], (const std::string *)(a1 + 112));
        uint64_t v107 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)v109, &__str);
        std::string::operator=((std::string *)((char *)&v110 + 8), &v102);
        uint64_t v18 = *(void *)(a1 + 568);
        uint64_t v19 = *(void *)(a1 + 560);
        uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
        if (v18 == v19) {
          uint64_t v20 = 0;
        }
        if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v19 = *(void *)(a1 + 560);
          uint64_t v18 = *(void *)(a1 + 568);
        }
        if (v18 == v19)
        {
          uint64_t v22 = 0;
        }
        else
        {
          unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
        }
        goto LABEL_68;
      }
    }
    else if (!v6)
    {
      goto LABEL_12;
    }
  }
  else
  {
    if (v4 == 42 && *(unsigned char *)(a1 + 189) != 0)
    {
      std::string::size_type v9 = *(void *)(a1 + 24);
      if (*(void *)(a1 + 8) == v9) {
        std::string::size_type v9 = a1 + 40;
      }
      else {
        *(void *)(a1 + 24) = v9 + 40;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v9;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v9 + 8));
      *(void *)(a1 + 136) = *(void *)(v9 + 32);
    }
    uint64_t v23 = sub_B7FE4(a1, 0);
    if (!v23)
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B99C0;
      strcpy(__str.__r_.__value_.__l.__data_, "ERR037 - Failed to parse body of consequent for if-statement");
      memset(&v101, 0, sizeof(v101));
      std::string::push_back(&v101, 52);
      std::string::push_back(&v101, 50);
      std::string::push_back(&v101, 53);
      std::string::push_back(&v101, 49);
      std::string::push_back(&v101, 50);
      std::string::size_type v25 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
      if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v26 = &v101;
      }
      else {
        std::string v26 = (std::string *)v101.__r_.__value_.__r.__words[0];
      }
      if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v25 = v101.__r_.__value_.__l.__size_;
      }
      if (v25)
      {
        long long v27 = (std::string *)((char *)v26 + v25 - 1);
        if (v27 > v26)
        {
          uint64_t v28 = &v26->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v29 = *(v28 - 1);
            *(v28 - 1) = v27->__r_.__value_.__s.__data_[0];
            v27->__r_.__value_.__s.__data_[0] = v29;
            long long v27 = (std::string *)((char *)v27 - 1);
            BOOL v15 = v28++ >= (char *)v27;
          }
          while (!v15);
        }
      }
      uint64_t v30 = std::string::insert(&v101, 0, "exprtk.hpp:");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      char v106 = 0;
      __p[8] = 0;
      uint64_t v107 = -1;
      *(_OWORD *)v109 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      uint64_t v114 = 0;
      int v108 = 1;
      *(_DWORD *)__p = *(_DWORD *)(a1 + 104);
      std::string::operator=((std::string *)&__p[8], (const std::string *)(a1 + 112));
      uint64_t v107 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)v109, &__str);
      std::string::operator=((std::string *)((char *)&v110 + 8), &v102);
      uint64_t v32 = *(void *)(a1 + 568);
      uint64_t v33 = *(void *)(a1 + 560);
      uint64_t v34 = 30 * ((v32 - v33) >> 3) - 1;
      if (v32 == v33) {
        uint64_t v34 = 0;
      }
      if (v34 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v33 = *(void *)(a1 + 560);
        uint64_t v32 = *(void *)(a1 + 568);
      }
      if (v32 == v33)
      {
        uint64_t v22 = 0;
      }
      else
      {
        unint64_t v35 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v22 = *(void *)(v33 + 8 * (v35 / 0x1E)) + 136 * (v35 % 0x1E);
      }
LABEL_68:
      sub_B5158(v22, (uint64_t)__p);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v113) < 0)
      {
        operator delete((void *)v112);
        if ((SHIBYTE(v111) & 0x80000000) == 0)
        {
LABEL_70:
          if ((SBYTE7(v110) & 0x80000000) == 0) {
            goto LABEL_71;
          }
          goto LABEL_78;
        }
      }
      else if ((SHIBYTE(v111) & 0x80000000) == 0)
      {
        goto LABEL_70;
      }
      operator delete(*((void **)&v110 + 1));
      if ((SBYTE7(v110) & 0x80000000) == 0)
      {
LABEL_71:
        if ((v106 & 0x80000000) == 0) {
          goto LABEL_72;
        }
        goto LABEL_79;
      }
LABEL_78:
      operator delete(v109[0]);
      if ((v106 & 0x80000000) == 0)
      {
LABEL_72:
        if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_73;
        }
        goto LABEL_80;
      }
LABEL_79:
      operator delete(*(void **)&__p[8]);
      if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_73:
        if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_74;
        }
        goto LABEL_81;
      }
LABEL_80:
      operator delete(v102.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_74:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_75:
          uint64_t v7 = 0;
          goto LABEL_108;
        }
LABEL_82:
        operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_75;
      }
LABEL_81:
      operator delete(v101.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_75;
      }
      goto LABEL_82;
    }
    uint64_t v7 = v23;
    if (*v5 != 6)
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9AB0;
      strcpy(__str.__r_.__value_.__l.__data_, "ERR036 - Expected ';' at the end of the consequent for if-statement");
      memset(&v101, 0, sizeof(v101));
      std::string::push_back(&v101, 51);
      std::string::push_back(&v101, 49);
      std::string::push_back(&v101, 53);
      std::string::push_back(&v101, 49);
      std::string::push_back(&v101, 50);
      std::string::size_type v36 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
      if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v37 = &v101;
      }
      else {
        v37 = (std::string *)v101.__r_.__value_.__r.__words[0];
      }
      if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v36 = v101.__r_.__value_.__l.__size_;
      }
      if (v36)
      {
        long long v38 = (std::string *)((char *)v37 + v36 - 1);
        if (v38 > v37)
        {
          uint64_t v39 = &v37->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v40 = *(v39 - 1);
            *(v39 - 1) = v38->__r_.__value_.__s.__data_[0];
            v38->__r_.__value_.__s.__data_[0] = v40;
            long long v38 = (std::string *)((char *)v38 - 1);
            BOOL v15 = v39++ >= (char *)v38;
          }
          while (!v15);
        }
      }
      uint64_t v41 = std::string::insert(&v101, 0, "exprtk.hpp:");
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      char v106 = 0;
      __p[8] = 0;
      uint64_t v107 = -1;
      *(_OWORD *)v109 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      uint64_t v114 = 0;
      int v108 = 1;
      *(_DWORD *)__p = *(_DWORD *)(a1 + 104);
      std::string::operator=((std::string *)&__p[8], (const std::string *)(a1 + 112));
      uint64_t v107 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)v109, &__str);
      std::string::operator=((std::string *)((char *)&v110 + 8), &v102);
      uint64_t v43 = *(void *)(a1 + 568);
      uint64_t v44 = *(void *)(a1 + 560);
      uint64_t v45 = 30 * ((v43 - v44) >> 3) - 1;
      if (v43 == v44) {
        uint64_t v45 = 0;
      }
      if (v45 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v44 = *(void *)(a1 + 560);
        uint64_t v43 = *(void *)(a1 + 568);
      }
      if (v43 == v44)
      {
        uint64_t v47 = 0;
      }
      else
      {
        unint64_t v46 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v47 = *(void *)(v44 + 8 * (v46 / 0x1E)) + 136 * (v46 % 0x1E);
      }
      goto LABEL_101;
    }
    std::string::size_type v24 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 8) == v24) {
      std::string::size_type v24 = a1 + 40;
    }
    else {
      *(void *)(a1 + 24) = v24 + 40;
    }
    *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
    std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
    *(void *)(a1 + 136) = *(void *)(v24 + 32);
  }
  char v105 = 4;
  strcpy(__p, "else");
  BOOL v48 = *(char *)(a1 + 135) < 0;
  uint64_t v49 = *(unsigned __int8 *)(a1 + 135);
  if ((v49 & 0x80u) != 0) {
    uint64_t v49 = *(void *)(a1 + 120);
  }
  if (v49 != 4)
  {
LABEL_98:
    uint64_t v56 = 0;
    return sub_1C1350(a1 + 344, a2, v7, v56);
  }
  unint64_t v50 = 0;
  std::string::value_type v51 = (std::string::size_type *)(a1 + 112);
  do
  {
    if (v48) {
      std::string::size_type v52 = *v51;
    }
    else {
      std::string::size_type v52 = a1 + 112;
    }
    __darwin_ct_rune_t v53 = __tolower(*(char *)(v52 + v50));
    if (v53 != __tolower(__p[v50])) {
      goto LABEL_98;
    }
    ++v50;
    BOOL v48 = *(char *)(a1 + 135) < 0;
    unint64_t v54 = *(unsigned __int8 *)(a1 + 135);
    if ((v54 & 0x80u) != 0) {
      unint64_t v54 = *(void *)(a1 + 120);
    }
  }
  while (v50 < v54);
  std::string::size_type v55 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v55) {
    std::string::size_type v55 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v55 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v55;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v55 + 8));
  *(void *)(a1 + 136) = *(void *)(v55 + 32);
  if (*(_DWORD *)(a1 + 104) == 123)
  {
    char v105 = 17;
    strcpy(__p, "else-statement-01");
    uint64_t v56 = sub_CF240(a1, (uint64_t)__p);
    if (v105 < 0) {
      operator delete(*(void **)__p);
    }
    if (!v56)
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B99C0;
      strcpy(__str.__r_.__value_.__l.__data_, "ERR038 - Failed to parse body of the 'else' for if-statement");
      memset(&v101, 0, sizeof(v101));
      std::string::push_back(&v101, 52);
      std::string::push_back(&v101, 52);
      std::string::push_back(&v101, 53);
      std::string::push_back(&v101, 49);
      std::string::push_back(&v101, 50);
      std::string::size_type v58 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
      if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v59 = &v101;
      }
      else {
        v59 = (std::string *)v101.__r_.__value_.__r.__words[0];
      }
      if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v58 = v101.__r_.__value_.__l.__size_;
      }
      if (v58)
      {
        v60 = (std::string *)((char *)v59 + v58 - 1);
        if (v60 > v59)
        {
          v61 = &v59->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v62 = *(v61 - 1);
            *(v61 - 1) = v60->__r_.__value_.__s.__data_[0];
            v60->__r_.__value_.__s.__data_[0] = v62;
            v60 = (std::string *)((char *)v60 - 1);
            BOOL v15 = v61++ >= (char *)v60;
          }
          while (!v15);
        }
      }
      v63 = std::string::insert(&v101, 0, "exprtk.hpp:");
      long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v102.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      char v106 = 0;
      __p[8] = 0;
      uint64_t v107 = -1;
      *(_OWORD *)v109 = 0u;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v112 = 0u;
      long long v113 = 0u;
      uint64_t v114 = 0;
      int v108 = 1;
      *(_DWORD *)__p = *v5;
      std::string::operator=((std::string *)&__p[8], (const std::string *)(a1 + 112));
      uint64_t v107 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)v109, &__str);
      std::string::operator=((std::string *)((char *)&v110 + 8), &v102);
      uint64_t v65 = *(void *)(a1 + 568);
      uint64_t v66 = *(void *)(a1 + 560);
      uint64_t v67 = 30 * ((v65 - v66) >> 3) - 1;
      if (v65 == v66) {
        uint64_t v67 = 0;
      }
      if (v67 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v66 = *(void *)(a1 + 560);
        uint64_t v65 = *(void *)(a1 + 568);
      }
      if (v65 == v66)
      {
        uint64_t v47 = 0;
      }
      else
      {
        unint64_t v68 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v47 = *(void *)(v66 + 8 * (v68 / 0x1E)) + 136 * (v68 % 0x1E);
      }
      goto LABEL_101;
    }
    return sub_1C1350(a1 + 344, a2, v7, v56);
  }
  char v105 = 2;
  strcpy(__p, "if");
  BOOL v69 = *(char *)(a1 + 135) < 0;
  uint64_t v70 = *(unsigned __int8 *)(a1 + 135);
  if ((v70 & 0x80u) != 0) {
    uint64_t v70 = *(void *)(a1 + 120);
  }
  if (v70 == 2)
  {
    unint64_t v71 = 0;
    while (1)
    {
      std::string::size_type v72 = v69 ? *v51 : a1 + 112;
      __darwin_ct_rune_t v73 = __tolower(*(char *)(v72 + v71));
      if (v73 != __tolower(__p[v71])) {
        break;
      }
      ++v71;
      BOOL v69 = *(char *)(a1 + 135) < 0;
      unint64_t v74 = *(unsigned __int8 *)(a1 + 135);
      if (*(char *)(a1 + 135) < 0) {
        unint64_t v74 = *(void *)(a1 + 120);
      }
      if (v71 >= v74)
      {
        uint64_t v56 = sub_C1BF4(a1);
        if (v56) {
          return sub_1C1350(a1 + 344, a2, v7, v56);
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A20;
        strcpy(__str.__r_.__value_.__l.__data_, "ERR039 - Failed to parse body of if-else statement");
        memset(&v101, 0, sizeof(v101));
        std::string::push_back(&v101, 55);
        std::string::push_back(&v101, 53);
        std::string::push_back(&v101, 53);
        std::string::push_back(&v101, 49);
        std::string::push_back(&v101, 50);
        std::string::size_type v75 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v76 = &v101;
        }
        else {
          uint64_t v76 = (std::string *)v101.__r_.__value_.__r.__words[0];
        }
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v75 = v101.__r_.__value_.__l.__size_;
        }
        if (v75)
        {
          int v77 = (std::string *)((char *)v76 + v75 - 1);
          if (v77 > v76)
          {
            v78 = &v76->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v79 = *(v78 - 1);
              *(v78 - 1) = v77->__r_.__value_.__s.__data_[0];
              v77->__r_.__value_.__s.__data_[0] = v79;
              int v77 = (std::string *)((char *)v77 - 1);
              BOOL v15 = v78++ >= (char *)v77;
            }
            while (!v15);
          }
        }
        long long v80 = std::string::insert(&v101, 0, "exprtk.hpp:");
        long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
        v102.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v81;
        v80->__r_.__value_.__l.__size_ = 0;
        v80->__r_.__value_.__r.__words[2] = 0;
        v80->__r_.__value_.__r.__words[0] = 0;
        char v106 = 0;
        __p[8] = 0;
        uint64_t v107 = -1;
        *(_OWORD *)v109 = 0u;
        long long v110 = 0u;
        long long v111 = 0u;
        long long v112 = 0u;
        long long v113 = 0u;
        uint64_t v114 = 0;
        int v108 = 1;
        *(_DWORD *)__p = *v5;
        std::string::operator=((std::string *)&__p[8], (const std::string *)(a1 + 112));
        uint64_t v107 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)v109, &__str);
        std::string::operator=((std::string *)((char *)&v110 + 8), &v102);
        uint64_t v82 = *(void *)(a1 + 568);
        uint64_t v83 = *(void *)(a1 + 560);
        uint64_t v84 = 30 * ((v82 - v83) >> 3) - 1;
        if (v82 == v83) {
          uint64_t v84 = 0;
        }
        if (v84 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v83 = *(void *)(a1 + 560);
          uint64_t v82 = *(void *)(a1 + 568);
        }
        if (v82 == v83)
        {
          uint64_t v47 = 0;
        }
        else
        {
          unint64_t v85 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v47 = *(void *)(v83 + 8 * (v85 / 0x1E)) + 136 * (v85 % 0x1E);
        }
        goto LABEL_101;
      }
    }
  }
  uint64_t v86 = sub_B7FE4(a1, 0);
  if (v86)
  {
    uint64_t v56 = v86;
    if (*v5 == 6)
    {
      std::string::size_type v87 = *(void *)(a1 + 24);
      if (*(void *)(a1 + 8) == v87) {
        std::string::size_type v87 = a1 + 40;
      }
      else {
        *(void *)(a1 + 24) = v87 + 40;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v87;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v87 + 8));
      *(void *)(a1 + 136) = *(void *)(v87 + 32);
      return sub_1C1350(a1 + 344, a2, v7, v56);
    }
    sub_5E5C(&__str, "ERR040 - Expected ';' at the end of the 'else-if' for the if-statement");
    sub_B1D70(0x5442u, (unint64_t)&v101);
    v99 = std::string::insert(&v101, 0, "exprtk.hpp:");
    long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
    v102.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v100;
    v99->__r_.__value_.__l.__size_ = 0;
    v99->__r_.__value_.__r.__words[2] = 0;
    v99->__r_.__value_.__r.__words[0] = 0;
    sub_B49F0(1, (uint64_t)v5, &__str, &v102, (uint64_t)__p);
    sub_B1CB0((void *)a1, (uint64_t)__p);
    sub_B1ED4((uint64_t)__p);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v102.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_200:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_109;
        }
LABEL_208:
        operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_109;
      }
    }
    else if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_200;
    }
    operator delete(v101.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_109;
    }
    goto LABEL_208;
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B99C0;
  strcpy(__str.__r_.__value_.__l.__data_, "ERR041 - Failed to parse body of the 'else' for if-statement");
  memset(&v101, 0, sizeof(v101));
  std::string::push_back(&v101, 49);
  std::string::push_back(&v101, 56);
  std::string::push_back(&v101, 53);
  std::string::push_back(&v101, 49);
  std::string::push_back(&v101, 50);
  std::string::size_type v88 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
  if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v89 = &v101;
  }
  else {
    v89 = (std::string *)v101.__r_.__value_.__r.__words[0];
  }
  if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v88 = v101.__r_.__value_.__l.__size_;
  }
  if (v88)
  {
    v90 = (std::string *)((char *)v89 + v88 - 1);
    if (v90 > v89)
    {
      v91 = &v89->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v92 = *(v91 - 1);
        *(v91 - 1) = v90->__r_.__value_.__s.__data_[0];
        v90->__r_.__value_.__s.__data_[0] = v92;
        v90 = (std::string *)((char *)v90 - 1);
        BOOL v15 = v91++ >= (char *)v90;
      }
      while (!v15);
    }
  }
  v93 = std::string::insert(&v101, 0, "exprtk.hpp:");
  long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  char v106 = 0;
  __p[8] = 0;
  uint64_t v107 = -1;
  *(_OWORD *)v109 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  uint64_t v114 = 0;
  int v108 = 1;
  *(_DWORD *)__p = *v5;
  std::string::operator=((std::string *)&__p[8], (const std::string *)(a1 + 112));
  uint64_t v107 = *(void *)(a1 + 136);
  std::string::operator=((std::string *)v109, &__str);
  std::string::operator=((std::string *)((char *)&v110 + 8), &v102);
  uint64_t v95 = *(void *)(a1 + 568);
  uint64_t v96 = *(void *)(a1 + 560);
  uint64_t v97 = 30 * ((v95 - v96) >> 3) - 1;
  if (v95 == v96) {
    uint64_t v97 = 0;
  }
  if (v97 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
  {
    sub_B4B88(a1 + 552);
    uint64_t v96 = *(void *)(a1 + 560);
    uint64_t v95 = *(void *)(a1 + 568);
  }
  if (v95 == v96)
  {
    uint64_t v47 = 0;
  }
  else
  {
    unint64_t v98 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
    uint64_t v47 = *(void *)(v96 + 8 * (v98 / 0x1E)) + 136 * (v98 % 0x1E);
  }
LABEL_101:
  sub_B5158(v47, (uint64_t)__p);
  ++*(void *)(a1 + 592);
  if (SBYTE7(v113) < 0)
  {
    operator delete((void *)v112);
    if ((SHIBYTE(v111) & 0x80000000) == 0)
    {
LABEL_103:
      if ((SBYTE7(v110) & 0x80000000) == 0) {
        goto LABEL_104;
      }
      goto LABEL_124;
    }
  }
  else if ((SHIBYTE(v111) & 0x80000000) == 0)
  {
    goto LABEL_103;
  }
  operator delete(*((void **)&v110 + 1));
  if ((SBYTE7(v110) & 0x80000000) == 0)
  {
LABEL_104:
    if ((v106 & 0x80000000) == 0) {
      goto LABEL_105;
    }
    goto LABEL_125;
  }
LABEL_124:
  operator delete(v109[0]);
  if ((v106 & 0x80000000) == 0)
  {
LABEL_105:
    if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_106;
    }
    goto LABEL_126;
  }
LABEL_125:
  operator delete(*(void **)&__p[8]);
  if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_106:
    if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_107;
    }
LABEL_127:
    operator delete(v101.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_108;
    }
    goto LABEL_128;
  }
LABEL_126:
  operator delete(v102.__r_.__value_.__l.__data_);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_127;
  }
LABEL_107:
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_108;
  }
LABEL_128:
  operator delete(__str.__r_.__value_.__l.__data_);
LABEL_108:
  uint64_t v56 = 0;
LABEL_109:
  if (a2
    && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 18)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  if (v7
    && (*(unsigned int (**)(uint64_t))(*(void *)v7 + 32))(v7) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)v7 + 32))(v7) != 18)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (v56
    && (*(unsigned int (**)(uint64_t))(*(void *)v56 + 32))(v56) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)v56 + 32))(v56) != 18)
  {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  return 0;
}

void sub_1C11C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a27 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a27 & 0x80000000) == 0)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  operator delete(a22);
  goto LABEL_6;
}

uint64_t sub_1C1350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 && a3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 2)
    {
      if (a4) {
        operator new();
      }
      operator new();
    }
    double v7 = (*(double (**)(uint64_t))(*(void *)a2 + 16))(a2);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
    if (v7 != 0.0)
    {
      if (v8 != 17 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 18) {
        (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
      }
      if (a4
        && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
        && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18)
      {
        (*(void (**)(uint64_t))(*(void *)a4 + 8))(a4);
      }
      return a3;
    }
    if (v8 != 17 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 18) {
      (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18)
    {
      (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
    }
    if (!a4) {
      operator new();
    }
    return a4;
  }
  if (a2
    && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 18)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  if (a3
    && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)a3 + 32))(a3) != 18)
  {
    (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  }
  if (!a4) {
    return a4;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18)
  {
    (*(void (**)(uint64_t))(*(void *)a4 + 8))(a4);
  }
  return 0;
}

void sub_1C19C8()
{
}

void sub_1C19EC()
{
}

uint64_t sub_1C1A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_2426BB0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  if (a2)
  {
    BOOL v6 = (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 18;
    uint64_t v7 = *(void *)(a1 + 16);
    *(unsigned char *)(a1 + 32) = v6;
    if (v7)
    {
LABEL_9:
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 32))(v7) == 17)
      {
        *(unsigned char *)(a1 + 33) = 0;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          goto LABEL_11;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 33) = (*(unsigned int (**)(uint64_t))(*(void *)v7 + 32))(v7) != 18;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          goto LABEL_11;
        }
      }
LABEL_15:
      *(unsigned char *)(a1 + 34) = 1;
      return a1;
    }
  }
  else
  {
    uint64_t v7 = a3;
    *(unsigned char *)(a1 + 32) = 1;
    if (a3) {
      goto LABEL_9;
    }
  }
  *(unsigned char *)(a1 + 33) = 1;
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    goto LABEL_15;
  }
LABEL_11:
  *(unsigned char *)(a1 + 34) = (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) != 17
                     && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) != 18;
  return a1;
}

uint64_t sub_1C1C14(uint64_t a1)
{
  *(void *)a1 = off_2426BB0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 32))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(unsigned char *)(a1 + 33))
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4 && *(unsigned char *)(a1 + 34))
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1C1CFC(uint64_t a1)
{
  *(void *)a1 = off_2426BB0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 32))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(unsigned char *)(a1 + 33))
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4 && *(unsigned char *)(a1 + 34))
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }

  operator delete();
}

uint64_t sub_1C1E04(uint64_t a1)
{
  double v2 = (*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
  uint64_t v3 = 24;
  if (v2 != 0.0) {
    uint64_t v3 = 16;
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + v3) + 16);

  return v4();
}

uint64_t sub_1C1E90()
{
  return 9;
}

uint64_t sub_1C1E98(uint64_t a1)
{
  *(void *)a1 = off_2426C00;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(unsigned char *)(a1 + 25))
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1C1F48(uint64_t a1)
{
  *(void *)a1 = off_2426C00;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(unsigned char *)(a1 + 25))
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1C2018(uint64_t a1)
{
  if ((*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) == 0.0) {
    return NAN;
  }
  uint64_t v2 = *(void (**)(void))(**(void **)(a1 + 16) + 16);

  v2();
  return result;
}

uint64_t sub_1C20B0()
{
  return 9;
}

uint64_t sub_1C20B8(uint64_t a1, void *a2, void *a3, char a4)
{
  if (a4) {
    goto LABEL_8;
  }
  if (!*a2) {
    goto LABEL_20;
  }
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 2)
  {
LABEL_8:
    if (*a2 && (*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) == 1)
    {
      if (!*a2 || (*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) == 17) {
        return *a3;
      }
      if (*a2)
      {
        if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) == 18) {
          return *a3;
        }
        if (*a2) {
          (*(void (**)(void))(*(void *)*a2 + 8))(*a2);
        }
      }
      *a2 = 0;
      return *a3;
    }
    if (a4) {
      return 0;
    }
LABEL_20:
    operator new();
  }
  if ((*(double (**)(void))(*(void *)*a2 + 16))() == 0.0) {
    operator new();
  }
  uint64_t v7 = 0;
  if (*a2 && (*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 17)
  {
    if (!*a2)
    {
LABEL_27:
      *a2 = 0;
      goto LABEL_28;
    }
    if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 18)
    {
      if (*a2) {
        (*(void (**)(void))(*(void *)*a2 + 8))(*a2);
      }
      goto LABEL_27;
    }
  }
LABEL_28:
  if (!*a3 || (*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) == 17) {
    return v7;
  }
  if (*a3)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
    {
      if (*a3) {
        (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
      }
      goto LABEL_34;
    }
    return v7;
  }
LABEL_34:
  *a3 = 0;
  return 0;
}

void sub_1C2544()
{
}

void sub_1C2568(uint64_t a1)
{
  uint64_t v3 = *(char **)(a1 + 8);
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 9) - 1;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if ((unint64_t)(v4 - (*(void *)(a1 + 40) + v5)) >= 0x1000)
  {
    *(void *)(a1 + 32) = v5 + 4096;
    uint64_t v47 = (void *)*((void *)v2 - 1);
    *(void *)(a1 + 16) = v2 - 8;
    sub_224F8((void **)a1, &v47);
    return;
  }
  BOOL v6 = *(char **)(a1 + 24);
  uint64_t v7 = *(char **)a1;
  uint64_t v8 = (uint64_t)&v6[-*(void *)a1];
  if (v2 - v3 < (unint64_t)v8)
  {
    if (v3 == v7)
    {
      uint64_t v47 = operator new(0x1000uLL);
      sub_22368((char **)a1, &v47);
      uint64_t v17 = *(void *)(a1 + 16);
      uint64_t v47 = *(void **)(v17 - 8);
      *(void *)(a1 + 16) = v17 - 8;
      sub_224F8((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v47 = operator new(0x1000uLL);
      sub_224F8((void **)a1, &v47);
      if (*(void *)(a1 + 16) - *(void *)(a1 + 8) == 8)
      {
LABEL_9:
        uint64_t v9 = 2048;
LABEL_19:
        *(void *)(a1 + 32) = v9;
        return;
      }
    }
    uint64_t v9 = *(void *)(a1 + 32) + 4096;
    goto LABEL_19;
  }
  if (v6 == v7) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = v8 >> 2;
  }
  if (v10 >> 61) {
    sub_188D718();
  }
  BOOL v11 = (char *)operator new(8 * v10);
  long long v12 = operator new(0x1000uLL);
  uint64_t v13 = v12;
  if (v10)
  {
    std::string::value_type v14 = &v11[8 * v10];
    *(void *)BOOL v11 = v12;
    BOOL v15 = v11 + 8;
    unint64_t v16 = v11;
    if (v3 != v2) {
      goto LABEL_29;
    }
    goto LABEL_21;
  }
  uint64_t v18 = (char *)operator new(8uLL);
  std::string::value_type v14 = v18 + 8;
  operator delete(v11);
  uint64_t v3 = *(char **)(a1 + 8);
  uint64_t v19 = *(char **)(a1 + 16);
  BOOL v11 = v18;
  *(void *)uint64_t v18 = v13;
  BOOL v15 = v18 + 8;
  unint64_t v16 = v18;
  if (v3 != v19)
  {
    while (1)
    {
LABEL_29:
      if (v15 == v14)
      {
        if (v11 <= v16)
        {
          if (v15 == v16) {
            unint64_t v31 = 1;
          }
          else {
            unint64_t v31 = (v15 - v16) >> 2;
          }
          if (v31 >> 61) {
            sub_188D718();
          }
          uint64_t v32 = (char *)operator new(8 * v31);
          uint64_t v33 = v32;
          unint64_t v34 = v31 >> 2;
          uint64_t v20 = &v32[8 * (v31 >> 2)];
          uint64_t v23 = v20;
          int64_t v35 = v15 - v11;
          if (v15 != v11)
          {
            uint64_t v23 = &v20[v35 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v36 = v35 - 8;
            if (v36 < 0x38 || (uint64_t v37 = 8 * v34, (unint64_t)(&v32[8 * v34] - v11) < 0x20))
            {
              long long v38 = &v32[8 * (v31 >> 2)];
              uint64_t v39 = v11;
              goto LABEL_45;
            }
            uint64_t v41 = (v36 >> 3) + 1;
            uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
            long long v38 = &v20[v42];
            uint64_t v39 = &v11[v42];
            uint64_t v43 = (long long *)(v11 + 16);
            uint64_t v44 = &v32[v37 + 16];
            uint64_t v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v46 = *v43;
              *((_OWORD *)v44 - 1) = *(v43 - 1);
              *(_OWORD *)uint64_t v44 = v46;
              v43 += 2;
              v44 += 32;
              v45 -= 4;
            }
            while (v45);
            if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_45:
                uint64_t v40 = *(void *)v39;
                v39 += 8;
                *(void *)long long v38 = v40;
                v38 += 8;
              }
              while (v38 != v23);
            }
          }
          BOOL v15 = &v32[8 * v31];
          if (v16) {
            operator delete(v16);
          }
          unint64_t v16 = v33;
          goto LABEL_28;
        }
        uint64_t v25 = (v11 - v16) >> 3;
        if (v25 >= -1) {
          uint64_t v26 = v25 + 1;
        }
        else {
          uint64_t v26 = v25 + 2;
        }
        uint64_t v27 = v26 >> 1;
        uint64_t v28 = &v11[-8 * (v26 >> 1)];
        std::string::value_type v29 = v15;
        if (v15 != v11)
        {
          memmove(v28, v11, v15 - v11);
          std::string::value_type v29 = v11;
        }
        uint64_t v30 = -v27;
        uint64_t v23 = &v28[v15 - v11];
        uint64_t v20 = &v29[8 * v30];
      }
      else
      {
        uint64_t v20 = v11;
        uint64_t v23 = v15;
        BOOL v15 = v14;
      }
LABEL_28:
      std::string::value_type v14 = v15;
      uint64_t v24 = *(void *)v3;
      v3 += 8;
      *(void *)uint64_t v23 = v24;
      unint64_t v21 = v23 + 8;
      BOOL v15 = v21;
      BOOL v11 = v20;
      if (v3 == *(char **)(a1 + 16)) {
        goto LABEL_22;
      }
    }
  }
LABEL_21:
  uint64_t v20 = v11;
  unint64_t v21 = v15;
LABEL_22:
  uint64_t v22 = *(void **)a1;
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v20;
  *(void *)(a1 + 16) = v21;
  *(void *)(a1 + 24) = v14;
  if (v21 - v20 == 8)
  {
    *(void *)(a1 + 32) = 2048;
    if (!v22) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 32) += 4096;
    if (!v22) {
      return;
    }
  }

  operator delete(v22);
}

void sub_1C28F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1C292C(uint64_t a1)
{
  *(void *)a1 = off_2426C50;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(unsigned char *)(a1 + 25))
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1C29DC(uint64_t a1)
{
  *(void *)a1 = off_2426C50;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(unsigned char *)(a1 + 25))
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1C2AAC(uint64_t a1)
{
  if ((*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) == 0.0) {
    return 0.0;
  }
  do
    double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  while ((*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) != 0.0);
  return v2;
}

uint64_t sub_1C2B7C()
{
  return 10;
}

uint64_t sub_1C2B84(uint64_t a1, void *a2, void *a3, char a4)
{
  if (a4) {
    goto LABEL_16;
  }
  if (!*a2) {
    goto LABEL_27;
  }
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 2)
  {
LABEL_16:
    if (*a2 && (*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) == 1)
    {
      if (!*a2 || (*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) == 17) {
        return *a3;
      }
      if (*a2)
      {
        if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) == 18) {
          return *a3;
        }
        if (*a2) {
          (*(void (**)(void))(*(void *)*a2 + 8))(*a2);
        }
      }
      *a2 = 0;
      return *a3;
    }
    if (a4) {
      return 0;
    }
LABEL_27:
    operator new();
  }
  if ((*(double (**)(void))(*(void *)*a2 + 16))() != 0.0
    && *a3
    && (*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) == 2)
  {
    if (!*a2 || (*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) == 17) {
      return *a3;
    }
    if (*a2)
    {
      if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) == 18) {
        return *a3;
      }
      if (*a2) {
        (*(void (**)(void))(*(void *)*a2 + 8))(*a2);
      }
    }
    *a2 = 0;
    return *a3;
  }
  if (*a2 && (*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 17)
  {
    if (!*a2)
    {
LABEL_34:
      *a2 = 0;
      goto LABEL_35;
    }
    if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 18)
    {
      if (*a2) {
        (*(void (**)(void))(*(void *)*a2 + 8))(*a2);
      }
      goto LABEL_34;
    }
  }
LABEL_35:
  if (!*a3 || (*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) == 17) {
    return 0;
  }
  if (*a3)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
    {
      if (*a3) {
        (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
      }
      goto LABEL_41;
    }
    return 0;
  }
LABEL_41:
  *a3 = 0;
  return 0;
}

void sub_1C30BC()
{
}

uint64_t sub_1C30E0(uint64_t a1)
{
  *(void *)a1 = off_2426CA0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(unsigned char *)(a1 + 25))
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1C3190(uint64_t a1)
{
  *(void *)a1 = off_2426CA0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(unsigned char *)(a1 + 25))
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1C3260(uint64_t a1)
{
  do
    double v2 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  while ((*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)) == 0.0);
  return v2;
}

uint64_t sub_1C32E8()
{
  return 11;
}

void *sub_1C32F0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[1];
  if (a1[2] != v4)
  {
    unint64_t v6 = 0;
    unint64_t v7 = *(void *)(*a1 + 656);
    do
    {
      uint64_t v8 = v4 + 96 * v6;
      if (*(void *)(v8 + 40) <= v7)
      {
        BOOL v9 = *(char *)(v8 + 23) < 0;
        uint64_t v10 = *(unsigned __int8 *)(v8 + 23);
        if ((v10 & 0x80u) != 0) {
          uint64_t v10 = *(void *)(v8 + 8);
        }
        uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
        if ((v11 & 0x80u) != 0) {
          uint64_t v11 = *(void *)(a2 + 8);
        }
        if (v10 == v11)
        {
          if (v10)
          {
            unint64_t v12 = 0;
            while (1)
            {
              uint64_t v13 = v9 ? *(void *)v8 : v4 + 96 * v6;
              __darwin_ct_rune_t v14 = __tolower(*(char *)(v13 + v12));
              uint64_t v15 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
              if (v14 != __tolower(*(char *)(v15 + v12))) {
                break;
              }
              ++v12;
              BOOL v9 = *(char *)(v8 + 23) < 0;
              unint64_t v16 = *(unsigned __int8 *)(v8 + 23);
              if ((v16 & 0x80u) != 0) {
                unint64_t v16 = *(void *)(v8 + 8);
              }
              if (v12 >= v16) {
                goto LABEL_3;
              }
            }
          }
          else
          {
LABEL_3:
            if (*(void *)(v4 + 96 * v6 + 32) == a3) {
              return (void *)v8;
            }
          }
        }
      }
      ++v6;
      uint64_t v4 = a1[1];
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 5));
  }
  return a1 + 4;
}

uint64_t sub_1C344C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 == *a1) {
    return 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(v3 + 8 * v6);
    if (!v7) {
      goto LABEL_3;
    }
    uint64_t v8 = *(void *)(v7 + 8);
    if (!v8) {
      goto LABEL_3;
    }
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    if (!v9) {
      goto LABEL_3;
    }
    if ((uint64_t *)(v8 + 8) != sub_ADE40(v8, a2)) {
      return 1;
    }
    uint64_t v3 = *a1;
    uint64_t v2 = a1[1];
LABEL_3:
    if (++v6 >= (unint64_t)((v2 - v3) >> 3)) {
      return 0;
    }
  }
}

uint64_t sub_1C34F8(void *a1, uint64_t a2)
{
  uint64_t v6 = a1[1];
  unint64_t v5 = a1[2];
  uint64_t v4 = (char **)(a1 + 1);
  if (v5 != v6)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = v6 + 96 * v7;
      BOOL v9 = *(char *)(v8 + 23) < 0;
      uint64_t v10 = *(unsigned __int8 *)(v8 + 23);
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(v8 + 8);
      }
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      if (v10 == v11)
      {
        if (v10)
        {
          unint64_t v12 = 0;
          while (1)
          {
            uint64_t v13 = v9 ? *(void *)v8 : v6 + 96 * v7;
            __darwin_ct_rune_t v14 = __tolower(*(char *)(v13 + v12));
            uint64_t v15 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
            if (v14 != __tolower(*(char *)(v15 + v12))) {
              break;
            }
            ++v12;
            BOOL v9 = *(char *)(v8 + 23) < 0;
            unint64_t v16 = *(unsigned __int8 *)(v8 + 23);
            if ((v16 & 0x80u) != 0) {
              unint64_t v16 = *(void *)(v8 + 8);
            }
            if (v12 >= v16) {
              goto LABEL_21;
            }
          }
        }
        else
        {
LABEL_21:
          if (*(void *)(v6 + 96 * v7 + 40) <= *(void *)(a2 + 40)
            && *(void *)(v6 + 96 * v7 + 32) == *(void *)(a2 + 32)
            && *(void *)(v6 + 96 * v7 + 24) == *(void *)(a2 + 24))
          {
            uint64_t v17 = v6 + 96 * v7;
            int v18 = *(_DWORD *)(v17 + 64);
            int v19 = *(unsigned __int8 *)(v17 + 68);
            if (v18 == *(_DWORD *)(a2 + 64) && v19 != 0) {
              return 0;
            }
          }
        }
      }
      ++v7;
      uint64_t v6 = a1[1];
      unint64_t v5 = a1[2];
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v6) >> 5));
  }
  if (v5 >= a1[3])
  {
    uint64_t v23 = sub_1C3D30(v4, a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_4200((unsigned char *)v5, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v22 = *(_OWORD *)a2;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v5 = v22;
    }
    *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 24);
    long long v24 = *(_OWORD *)(a2 + 40);
    long long v25 = *(_OWORD *)(a2 + 56);
    long long v26 = *(_OWORD *)(a2 + 72);
    *(void *)(v5 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(v5 + 72) = v26;
    *(_OWORD *)(v5 + 56) = v25;
    *(_OWORD *)(v5 + 40) = v24;
    uint64_t v23 = (char *)(v5 + 96);
    a1[2] = v5 + 96;
  }
  uint64_t v27 = (const void **)a1[1];
  unint64_t v28 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v23 - (char *)v27) >> 5));
  a1[2] = v23;
  if (v23 == (char *)v27) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = v28;
  }
  uint64_t v21 = 1;
  sub_1C3FC4(v27, (const void **)v23, (uint64_t)&v31, v29, 1);
  return v21;
}

void sub_1C373C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1C3744(uint64_t a1, void *a2, void *a3, void *a4, void *a5, char a6)
{
  if ((a6 & 1) == 0)
  {
    if (!*a3) {
      goto LABEL_13;
    }
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) == 2)
    {
      if ((*(double (**)(void))(*(void *)*a3 + 16))() == 0.0) {
        operator new();
      }
      uint64_t v11 = 0;
      if (*a2 && (*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 17)
      {
        if (!*a2)
        {
LABEL_45:
          *a2 = 0;
          goto LABEL_46;
        }
        if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 18)
        {
          if (*a2) {
            (*(void (**)(void))(*(void *)*a2 + 8))(*a2);
          }
          goto LABEL_45;
        }
      }
LABEL_46:
      if (*a3 && (*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 17)
      {
        if (!*a3)
        {
LABEL_52:
          *a3 = 0;
          goto LABEL_53;
        }
        if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
        {
          if (*a3) {
            (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
          }
          goto LABEL_52;
        }
      }
LABEL_53:
      if (*a4 && (*(unsigned int (**)(void))(*(void *)*a4 + 32))(*a4) != 17)
      {
        if (!*a4)
        {
LABEL_59:
          *a4 = 0;
          goto LABEL_60;
        }
        if ((*(unsigned int (**)(void))(*(void *)*a4 + 32))(*a4) != 18)
        {
          if (*a4) {
            (*(void (**)(void))(*(void *)*a4 + 8))(*a4);
          }
          goto LABEL_59;
        }
      }
LABEL_60:
      if (*a5 && (*(unsigned int (**)(void))(*(void *)*a5 + 32))(*a5) != 17)
      {
        if (!*a5)
        {
LABEL_66:
          *a5 = 0;
          return 0;
        }
        if ((*(unsigned int (**)(void))(*(void *)*a5 + 32))(*a5) != 18)
        {
          if (*a5) {
            (*(void (**)(void))(*(void *)*a5 + 8))(*a5);
          }
          goto LABEL_66;
        }
      }
      return v11;
    }
  }
  if (!*a3
    || ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 1 ? (BOOL v12 = *a3 == 0) : (BOOL v12 = 1), v12))
  {
LABEL_13:
    if (*a2 && (*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 17)
    {
      if (!*a2)
      {
LABEL_19:
        *a2 = 0;
        goto LABEL_20;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a2 + 32))(*a2) != 18)
      {
        if (*a2) {
          (*(void (**)(void))(*(void *)*a2 + 8))(*a2);
        }
        goto LABEL_19;
      }
    }
LABEL_20:
    if (*a3 && (*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 17)
    {
      if (!*a3)
      {
LABEL_26:
        *a3 = 0;
        goto LABEL_27;
      }
      if ((*(unsigned int (**)(void))(*(void *)*a3 + 32))(*a3) != 18)
      {
        if (*a3) {
          (*(void (**)(void))(*(void *)*a3 + 8))(*a3);
        }
        goto LABEL_26;
      }
    }
LABEL_27:
    if (!*a4 || (*(unsigned int (**)(void))(*(void *)*a4 + 32))(*a4) == 17) {
      return *a5;
    }
    if (*a4)
    {
      if ((*(unsigned int (**)(void))(*(void *)*a4 + 32))(*a4) == 18) {
        return *a5;
      }
      if (*a4) {
        (*(void (**)(void))(*(void *)*a4 + 8))(*a4);
      }
    }
    *a4 = 0;
    return *a5;
  }
  if ((a6 & 1) == 0) {
    operator new();
  }
  return 0;
}

void sub_1C3D0C()
{
}

char *sub_1C3D30(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 5);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - v3) >> 5) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((a1[2] - v3) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5) >= 0x155555555555555) {
    unint64_t v8 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x2AAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    BOOL v9 = (char *)operator new(96 * v8);
  }
  else
  {
    BOOL v9 = 0;
  }
  uint64_t v10 = &v9[96 * v5];
  uint64_t v20 = &v9[96 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v10, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    uint64_t v10 = &v9[96 * v5];
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
  }
  uint64_t v11 = &v9[96 * v5];
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v11 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v11 + 11) = *(void *)(a2 + 88);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  BOOL v12 = v11 + 96;
  if (v4 == v3)
  {
    uint64_t v17 = v3;
  }
  else
  {
    do
    {
      long long v13 = *((_OWORD *)v4 - 6);
      *((void *)v10 - 10) = *((void *)v4 - 10);
      *((_OWORD *)v10 - 6) = v13;
      *((void *)v4 - 11) = 0;
      *((void *)v4 - 10) = 0;
      *((void *)v4 - 12) = 0;
      *(_OWORD *)(v10 - 72) = *(_OWORD *)(v4 - 72);
      long long v14 = *(_OWORD *)(v4 - 40);
      long long v15 = *(_OWORD *)(v4 - 24);
      uint64_t v16 = *((void *)v4 - 1);
      *(_OWORD *)(v10 - 56) = *(_OWORD *)(v4 - 56);
      *((void *)v10 - 1) = v16;
      *(_OWORD *)(v10 - 24) = v15;
      *(_OWORD *)(v10 - 40) = v14;
      v10 -= 96;
      v4 -= 96;
    }
    while (v4 != v3);
    uint64_t v17 = *a1;
    uint64_t v3 = a1[1];
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v20;
  if (v3 != v17)
  {
    int v18 = (void **)(v3 - 96);
    do
    {
      if (*((char *)v18 + 23) < 0) {
        operator delete(*v18);
      }
      v18 -= 12;
    }
    while (v18 + 12 != (void **)v17);
    uint64_t v3 = v17;
  }
  if (v3) {
    operator delete(v3);
  }
  return v12;
}

void sub_1C3F48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C3F5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1C3F5C(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      unint64_t v5 = v2 - 12;
      *(void *)(a1 + 16) = v2 - 12;
      if (*((char *)v2 - 73) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1C3FC4(const void **a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_1C470C(uint64_t a1, const void **a2)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v3 = (const void **)(a1 + 96);
    if ((const void **)(a1 + 96) != a2)
    {
      uint64_t v4 = 0;
      BOOL v5 = (const void **)a1;
      do
      {
        BOOL v9 = v5;
        BOOL v5 = v3;
        uint64_t v10 = v9[19];
        uint64_t v11 = v9[7];
        if (v10 < v11) {
          goto LABEL_30;
        }
        if (v10 <= v11)
        {
          uint64_t v12 = v9[17];
          uint64_t v13 = v9[5];
          if (v12 < v13) {
            goto LABEL_30;
          }
          if (v12 <= v13)
          {
            uint64_t v14 = v9[16];
            unint64_t v15 = v9[4];
            if (v14 < v15) {
              goto LABEL_30;
            }
            if (v14 <= v15)
            {
              int v16 = *((char *)v9 + 23);
              int v17 = *((char *)v9 + 119);
              if (v17 >= 0) {
                size_t v18 = *((unsigned __int8 *)v9 + 119);
              }
              else {
                size_t v18 = (size_t)v9[13];
              }
              if (v17 >= 0) {
                int v19 = v5;
              }
              else {
                int v19 = *v5;
              }
              if (v16 >= 0) {
                size_t v20 = *((unsigned __int8 *)v9 + 23);
              }
              else {
                size_t v20 = (size_t)v9[1];
              }
              if (v16 >= 0) {
                long long v21 = v9;
              }
              else {
                long long v21 = *v9;
              }
              if (v20 >= v18) {
                size_t v22 = v18;
              }
              else {
                size_t v22 = v20;
              }
              int v23 = memcmp(v19, v21, v22);
              BOOL v24 = v18 < v20;
              if (v23) {
                BOOL v24 = v23 < 0;
              }
              if (v24)
              {
LABEL_30:
                BOOL v48 = v5[2];
                long long v47 = *(_OWORD *)v5;
                v5[1] = 0;
                v5[2] = 0;
                *BOOL v5 = 0;
                unint64_t v53 = v9[23];
                long long v25 = *(_OWORD *)(v9 + 21);
                long long v51 = *(_OWORD *)(v9 + 19);
                long long v52 = v25;
                long long v26 = *(_OWORD *)(v9 + 17);
                long long v49 = *(_OWORD *)(v9 + 15);
                long long v50 = v26;
                unint64_t v27 = v51;
                unint64_t v28 = v26;
                unint64_t v46 = *((void *)&v49 + 1);
                if (SHIBYTE(v48) >= 0) {
                  unint64_t v29 = HIBYTE(v48);
                }
                else {
                  unint64_t v29 = *((void *)&v47 + 1);
                }
                uint64_t v30 = &v47;
                if (SHIBYTE(v48) < 0) {
                  uint64_t v30 = (long long *)v47;
                }
                __s1 = v30;
                for (uint64_t i = v4; ; i -= 96)
                {
                  uint64_t v32 = a1 + i;
                  uint64_t v33 = (void **)(a1 + i + 96);
                  if (*(char *)(a1 + i + 119) < 0) {
                    operator delete(*v33);
                  }
                  *(_OWORD *)uint64_t v33 = *(_OWORD *)v32;
                  *(void *)(a1 + i + 112) = *(void *)(v32 + 16);
                  *(unsigned char *)(v32 + 23) = 0;
                  *(unsigned char *)uint64_t v32 = 0;
                  *(_OWORD *)(v32 + 136) = *(_OWORD *)(v32 + 40);
                  *(_OWORD *)(v32 + 152) = *(_OWORD *)(v32 + 56);
                  *(_OWORD *)(v32 + 168) = *(_OWORD *)(v32 + 72);
                  *(void *)(v32 + 184) = *(void *)(v32 + 88);
                  *(_OWORD *)(v32 + 120) = *(_OWORD *)(v32 + 24);
                  if (!i) {
                    break;
                  }
                  unint64_t v34 = *(void *)(a1 + i - 40);
                  if (v27 >= v34)
                  {
                    if (v27 > v34) {
                      goto LABEL_58;
                    }
                    unint64_t v35 = *(void *)(a1 + i - 56);
                    if (v28 >= v35)
                    {
                      if (v28 > v35) {
                        goto LABEL_58;
                      }
                      unint64_t v36 = *(void *)(a1 + i - 64);
                      if (v46 >= v36)
                      {
                        if (v46 > v36) {
                          goto LABEL_58;
                        }
                        int v37 = *(char *)(a1 + i - 73);
                        unint64_t v38 = v37 >= 0 ? *(unsigned __int8 *)(a1 + i - 73) : *(void *)(a1 + i - 88);
                        int v39 = v37 >= 0 ? (const void *)(a1 + i - 96) : *(const void **)(a1 + i - 96);
                        size_t v40 = v38 >= v29 ? v29 : v38;
                        int v41 = memcmp(__s1, v39, v40);
                        BOOL v42 = v29 < v38;
                        if (v41) {
                          BOOL v42 = v41 < 0;
                        }
                        if (!v42)
                        {
LABEL_58:
                          uint64_t v43 = a1 + i;
                          if ((*(char *)(a1 + i + 23) & 0x80000000) == 0) {
                            goto LABEL_4;
                          }
                          goto LABEL_61;
                        }
                      }
                    }
                  }
                }
                uint64_t v43 = a1;
                if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
                  goto LABEL_4;
                }
LABEL_61:
                operator delete(*(void **)v43);
LABEL_4:
                uint64_t v6 = a1 + i + 24;
                *(_OWORD *)uint64_t v43 = v47;
                *(void *)(v43 + 16) = v48;
                long long v7 = v52;
                *(_OWORD *)(v6 + 32) = v51;
                *(_OWORD *)(v6 + 48) = v7;
                *(void *)(v6 + 64) = v53;
                long long v8 = v50;
                *(_OWORD *)uint64_t v6 = v49;
                *(_OWORD *)(v6 + 16) = v8;
              }
            }
          }
        }
        uint64_t v3 = v5 + 12;
        v4 += 96;
      }
      while (v5 + 12 != a2);
    }
  }
}

void sub_1C49E8(const void **a1, const void **a2)
{
  if (a1 != a2)
  {
    uint64_t v2 = a1;
    uint64_t v3 = a1 + 12;
    if (a1 + 12 != a2)
    {
      uint64_t v4 = a1 + 15;
      do
      {
        long long v8 = v2;
        uint64_t v2 = v3;
        BOOL v9 = v8[19];
        uint64_t v10 = v8[7];
        if (v9 < v10) {
          goto LABEL_32;
        }
        if (v9 <= v10)
        {
          uint64_t v11 = v8[17];
          uint64_t v12 = v8[5];
          if (v11 < v12) {
            goto LABEL_32;
          }
          if (v11 <= v12)
          {
            uint64_t v13 = v8[16];
            uint64_t v14 = v8[4];
            if (v13 < v14) {
              goto LABEL_32;
            }
            if (v13 <= v14)
            {
              int v15 = *((char *)v8 + 23);
              int v16 = *((char *)v8 + 119);
              if (v16 >= 0) {
                size_t v17 = *((unsigned __int8 *)v8 + 119);
              }
              else {
                size_t v17 = (size_t)v8[13];
              }
              if (v16 >= 0) {
                size_t v18 = v2;
              }
              else {
                size_t v18 = *v2;
              }
              if (v15 >= 0) {
                size_t v19 = *((unsigned __int8 *)v8 + 23);
              }
              else {
                size_t v19 = (size_t)v8[1];
              }
              if (v15 >= 0) {
                size_t v20 = v8;
              }
              else {
                size_t v20 = *v8;
              }
              if (v19 >= v17) {
                size_t v21 = v17;
              }
              else {
                size_t v21 = v19;
              }
              int v22 = memcmp(v18, v20, v21);
              BOOL v23 = v17 < v19;
              if (v22) {
                BOOL v23 = v22 < 0;
              }
              if (v23)
              {
LABEL_32:
                BOOL v48 = v2[2];
                long long v47 = *(_OWORD *)v2;
                v2[1] = 0;
                v2[2] = 0;
                *uint64_t v2 = 0;
                unint64_t v46 = v2;
                unint64_t v53 = v8[23];
                long long v24 = *(_OWORD *)(v8 + 21);
                long long v51 = *(_OWORD *)(v8 + 19);
                long long v52 = v24;
                long long v25 = *(_OWORD *)(v8 + 17);
                long long v49 = *(_OWORD *)(v8 + 15);
                long long v50 = v25;
                unint64_t v26 = v51;
                unint64_t v28 = *((void *)&v49 + 1);
                unint64_t v27 = v25;
                if (SHIBYTE(v48) >= 0) {
                  size_t v29 = HIBYTE(v48);
                }
                else {
                  size_t v29 = *((void *)&v47 + 1);
                }
                if (SHIBYTE(v48) >= 0) {
                  uint64_t v30 = &v47;
                }
                else {
                  uint64_t v30 = (long long *)v47;
                }
                for (uint64_t i = v4; ; i -= 12)
                {
                  uint64_t v32 = (void **)(i - 3);
                  if (*((char *)i - 1) < 0) {
                    operator delete(*v32);
                  }
                  uint64_t v33 = (void **)(i - 15);
                  *(_OWORD *)uint64_t v32 = *(_OWORD *)(i - 15);
                  *(i - 1) = *(i - 13);
                  *((unsigned char *)i - 97) = 0;
                  *((unsigned char *)i - 120) = 0;
                  long long v34 = *((_OWORD *)i - 3);
                  *((_OWORD *)i + 2) = *((_OWORD *)i - 4);
                  *((_OWORD *)i + 3) = v34;
                  i[8] = *(i - 4);
                  long long v35 = *((_OWORD *)i - 5);
                  *(_OWORD *)uint64_t i = *((_OWORD *)i - 6);
                  *((_OWORD *)i + 1) = v35;
                  unint64_t v36 = (unint64_t)*(i - 20);
                  if (v26 >= v36)
                  {
                    if (v26 > v36) {
                      break;
                    }
                    unint64_t v37 = (unint64_t)*(i - 22);
                    if (v27 >= v37)
                    {
                      if (v27 > v37) {
                        break;
                      }
                      unint64_t v38 = (unint64_t)*(i - 23);
                      if (v28 >= v38)
                      {
                        if (v28 > v38) {
                          break;
                        }
                        int v39 = *((char *)i - 193);
                        if (v39 >= 0) {
                          size_t v40 = *((unsigned __int8 *)i - 193);
                        }
                        else {
                          size_t v40 = (size_t)*(i - 26);
                        }
                        if (v39 >= 0) {
                          int v41 = i - 27;
                        }
                        else {
                          int v41 = (const void **)*(i - 27);
                        }
                        if (v40 >= v29) {
                          size_t v42 = v29;
                        }
                        else {
                          size_t v42 = v40;
                        }
                        int v43 = memcmp(v30, v41, v42);
                        BOOL v44 = v29 < v40;
                        if (v43) {
                          BOOL v44 = v43 < 0;
                        }
                        if (!v44) {
                          break;
                        }
                      }
                    }
                  }
                }
                if (*((char *)i - 97) < 0) {
                  operator delete(*v33);
                }
                BOOL v5 = i - 12;
                *(_OWORD *)uint64_t v33 = v47;
                *(i - 13) = v48;
                long long v6 = v52;
                *((_OWORD *)v5 + 2) = v51;
                *((_OWORD *)v5 + 3) = v6;
                v5[8] = v53;
                long long v7 = v50;
                *(_OWORD *)BOOL v5 = v49;
                *((_OWORD *)v5 + 1) = v7;
                uint64_t v2 = v46;
              }
            }
          }
        }
        uint64_t v3 = v2 + 12;
        v4 += 12;
      }
      while (v2 + 12 != a2);
    }
  }
}

uint64_t sub_1C4C80(const void **a1, const void **a2, const void **a3)
{
  long long v6 = a2[7];
  long long v7 = a1[7];
  if (v6 < v7) {
    goto LABEL_25;
  }
  if (v6 > v7) {
    goto LABEL_29;
  }
  long long v8 = a2[5];
  BOOL v9 = a1[5];
  if (v8 < v9) {
    goto LABEL_25;
  }
  if (v8 > v9) {
    goto LABEL_29;
  }
  uint64_t v10 = a2[4];
  uint64_t v11 = a1[4];
  if (v10 < v11) {
    goto LABEL_25;
  }
  if (v10 > v11) {
    goto LABEL_29;
  }
  int v12 = *((char *)a1 + 23);
  int v13 = *((char *)a2 + 23);
  if (v13 >= 0) {
    size_t v14 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v14 = (size_t)a2[1];
  }
  if (v13 >= 0) {
    int v15 = a2;
  }
  else {
    int v15 = *a2;
  }
  if (v12 >= 0) {
    size_t v16 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v16 = (size_t)a1[1];
  }
  if (v12 >= 0) {
    size_t v17 = a1;
  }
  else {
    size_t v17 = *a1;
  }
  if (v16 >= v14) {
    size_t v18 = v14;
  }
  else {
    size_t v18 = v16;
  }
  int v19 = memcmp(v15, v17, v18);
  BOOL v20 = v14 < v16;
  if (v19) {
    BOOL v20 = v19 < 0;
  }
  if (v20)
  {
LABEL_25:
    size_t v21 = a3[7];
    if (v21 < v6) {
      goto LABEL_26;
    }
    if (v21 > v6) {
      goto LABEL_60;
    }
    long long v71 = a3[5];
    long long v72 = a2[5];
    if (v71 < v72) {
      goto LABEL_26;
    }
    if (v71 > v72) {
      goto LABEL_60;
    }
    long long v73 = a3[4];
    long long v74 = a2[4];
    if (v73 < v74) {
      goto LABEL_26;
    }
    if (v73 > v74) {
      goto LABEL_60;
    }
    int v75 = *((char *)a2 + 23);
    int v76 = *((char *)a3 + 23);
    if (v76 >= 0) {
      size_t v77 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v77 = (size_t)a3[1];
    }
    if (v76 >= 0) {
      long long v78 = a3;
    }
    else {
      long long v78 = *a3;
    }
    if (v75 >= 0) {
      size_t v79 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v79 = (size_t)a2[1];
    }
    if (v75 >= 0) {
      long long v80 = a2;
    }
    else {
      long long v80 = *a2;
    }
    if (v79 >= v77) {
      size_t v81 = v77;
    }
    else {
      size_t v81 = v79;
    }
    int v82 = memcmp(v78, v80, v81);
    BOOL v83 = v77 < v79;
    if (v82) {
      BOOL v83 = v82 < 0;
    }
    if (v83)
    {
LABEL_26:
      int v22 = *a1;
      *(void *)v133 = a1[1];
      *(void *)&v133[7] = *(const void **)((char *)a1 + 15);
      char v23 = *((unsigned char *)a1 + 23);
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      long long v118 = *(_OWORD *)(a1 + 7);
      long long v123 = *(_OWORD *)(a1 + 9);
      v128 = a1[11];
      long long v108 = *(_OWORD *)(a1 + 3);
      long long v113 = *(_OWORD *)(a1 + 5);
      long long v24 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v24;
      *((unsigned char *)a3 + 23) = 0;
      *(unsigned char *)a3 = 0;
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(a3 + 3);
      long long v25 = *(_OWORD *)(a3 + 5);
      long long v26 = *(_OWORD *)(a3 + 7);
      unint64_t v27 = a3[11];
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a3 + 9);
      a1[11] = v27;
      *(_OWORD *)(a1 + 7) = v26;
      *(_OWORD *)(a1 + 5) = v25;
      if (*((char *)a3 + 23) < 0) {
        operator delete((void *)*a3);
      }
      *a3 = v22;
      a3[1] = *(const void **)v133;
      *(const void **)((char *)a3 + 15) = *(const void **)&v133[7];
      *((unsigned char *)a3 + 23) = v23;
      *(_OWORD *)(a3 + 7) = v118;
      *(_OWORD *)(a3 + 9) = v123;
      a3[11] = v128;
      uint64_t result = 1;
      *(_OWORD *)(a3 + 3) = v108;
      *(_OWORD *)(a3 + 5) = v113;
    }
    else
    {
LABEL_60:
      unint64_t v57 = (void *)*a1;
      *(void *)v136 = a1[1];
      *(void *)&v136[7] = *(const void **)((char *)a1 + 15);
      size_t v58 = *((unsigned __int8 *)a1 + 23);
      char v59 = *((unsigned char *)a1 + 23);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      long long v121 = *(_OWORD *)(a1 + 7);
      long long v126 = *(_OWORD *)(a1 + 9);
      v131 = a1[11];
      long long v111 = *(_OWORD *)(a1 + 3);
      long long v116 = *(_OWORD *)(a1 + 5);
      v60 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v60;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
      int v61 = (long long *)(a2 + 3);
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
      long long v62 = *(_OWORD *)(a2 + 5);
      long long v63 = *(_OWORD *)(a2 + 7);
      long long v64 = a2[11];
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
      a1[11] = v64;
      *(_OWORD *)(a1 + 7) = v63;
      *(_OWORD *)(a1 + 5) = v62;
      if (*((char *)a2 + 23) < 0) {
        operator delete((void *)*a2);
      }
      *a2 = v57;
      a2[1] = *(const void **)v136;
      *(const void **)((char *)a2 + 15) = *(const void **)&v136[7];
      *((unsigned char *)a2 + 23) = v59;
      *(_OWORD *)(a2 + 7) = v121;
      *(_OWORD *)(a2 + 9) = v126;
      a2[11] = v131;
      long long *v61 = v111;
      *(_OWORD *)(a2 + 5) = v116;
      size_t v65 = a3[7];
      uint64_t v66 = a2[7];
      if (v65 >= v66)
      {
        if (v65 > v66) {
          return 1;
        }
        uint64_t v97 = a3[5];
        unint64_t v98 = a2[5];
        if (v97 >= v98)
        {
          if (v97 > v98) {
            return 1;
          }
          v99 = a3[4];
          long long v100 = a2[4];
          if (v99 >= v100)
          {
            if (v99 > v100) {
              return 1;
            }
            int v101 = *((char *)a3 + 23);
            if (v101 >= 0) {
              size_t v102 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v102 = (size_t)a3[1];
            }
            if (v101 >= 0) {
              v103 = a3;
            }
            else {
              v103 = *a3;
            }
            if ((v58 & 0x80u) == 0)
            {
              v104 = a2;
            }
            else
            {
              size_t v58 = (size_t)a2[1];
              v104 = (const void **)v57;
            }
            if (v58 >= v102) {
              size_t v105 = v102;
            }
            else {
              size_t v105 = v58;
            }
            int v106 = memcmp(v103, v104, v105);
            BOOL v107 = v102 < v58;
            if (v106) {
              BOOL v107 = v106 < 0;
            }
            if (!v107) {
              return 1;
            }
          }
        }
      }
      *(void *)v137 = a2[1];
      *(void *)&v137[7] = *(const void **)((char *)a2 + 15);
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
      long long v122 = *(_OWORD *)(a2 + 7);
      long long v127 = *(_OWORD *)(a2 + 9);
      v132 = a2[11];
      long long v112 = *v61;
      long long v117 = *(_OWORD *)(a2 + 5);
      size_t v67 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v67;
      *((unsigned char *)a3 + 23) = 0;
      *(unsigned char *)a3 = 0;
      long long *v61 = *(_OWORD *)(a3 + 3);
      long long v68 = *(_OWORD *)(a3 + 5);
      BOOL v69 = a3[11];
      long long v70 = *(_OWORD *)(a3 + 9);
      *(_OWORD *)(a2 + 7) = *(_OWORD *)(a3 + 7);
      *(_OWORD *)(a2 + 9) = v70;
      a2[11] = v69;
      *(_OWORD *)(a2 + 5) = v68;
      if (*((char *)a3 + 23) < 0) {
        operator delete((void *)*a3);
      }
      *a3 = v57;
      a3[1] = *(const void **)v137;
      *(const void **)((char *)a3 + 15) = *(const void **)&v137[7];
      *((unsigned char *)a3 + 23) = v59;
      *(_OWORD *)(a3 + 7) = v122;
      *(_OWORD *)(a3 + 9) = v127;
      a3[11] = v132;
      uint64_t result = 2;
      *(_OWORD *)(a3 + 3) = v112;
      *(_OWORD *)(a3 + 5) = v117;
    }
  }
  else
  {
LABEL_29:
    size_t v29 = a3[7];
    if (v29 >= v6)
    {
      if (v29 > v6) {
        return 0;
      }
      uint64_t v30 = a3[5];
      int v31 = a2[5];
      if (v30 >= v31)
      {
        if (v30 > v31) {
          return 0;
        }
        uint64_t v32 = a3[4];
        uint64_t v33 = a2[4];
        if (v32 >= v33)
        {
          if (v32 > v33) {
            return 0;
          }
          int v34 = *((char *)a2 + 23);
          int v35 = *((char *)a3 + 23);
          if (v35 >= 0) {
            size_t v36 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v36 = (size_t)a3[1];
          }
          if (v35 >= 0) {
            unint64_t v37 = a3;
          }
          else {
            unint64_t v37 = *a3;
          }
          if (v34 >= 0) {
            size_t v38 = *((unsigned __int8 *)a2 + 23);
          }
          else {
            size_t v38 = (size_t)a2[1];
          }
          if (v34 >= 0) {
            int v39 = a2;
          }
          else {
            int v39 = *a2;
          }
          if (v38 >= v36) {
            size_t v40 = v36;
          }
          else {
            size_t v40 = v38;
          }
          int v41 = memcmp(v37, v39, v40);
          BOOL v42 = v36 < v38;
          if (v41) {
            BOOL v42 = v41 < 0;
          }
          if (!v42) {
            return 0;
          }
        }
      }
    }
    int v43 = (void *)*a2;
    *(void *)v134 = a2[1];
    *(void *)&v134[7] = *(const void **)((char *)a2 + 15);
    char v44 = *((unsigned char *)a2 + 23);
    a2[2] = 0;
    a2[1] = 0;
    *a2 = 0;
    long long v119 = *(_OWORD *)(a2 + 7);
    long long v124 = *(_OWORD *)(a2 + 9);
    v129 = a2[11];
    long long v109 = *(_OWORD *)(a2 + 3);
    long long v114 = *(_OWORD *)(a2 + 5);
    uint64_t v45 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v45;
    *((unsigned char *)a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
    *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 3);
    long long v46 = *(_OWORD *)(a3 + 5);
    long long v47 = *(_OWORD *)(a3 + 7);
    BOOL v48 = a3[11];
    *(_OWORD *)(a2 + 9) = *(_OWORD *)(a3 + 9);
    a2[11] = v48;
    *(_OWORD *)(a2 + 7) = v47;
    *(_OWORD *)(a2 + 5) = v46;
    if (*((char *)a3 + 23) < 0) {
      operator delete((void *)*a3);
    }
    *a3 = v43;
    a3[1] = *(const void **)v134;
    *(const void **)((char *)a3 + 15) = *(const void **)&v134[7];
    *((unsigned char *)a3 + 23) = v44;
    *(_OWORD *)(a3 + 7) = v119;
    *(_OWORD *)(a3 + 9) = v124;
    a3[11] = v129;
    *(_OWORD *)(a3 + 3) = v109;
    *(_OWORD *)(a3 + 5) = v114;
    long long v49 = a2[7];
    long long v50 = a1[7];
    if (v49 >= v50)
    {
      if (v49 > v50) {
        return 1;
      }
      uint64_t v84 = a2[5];
      unint64_t v85 = a1[5];
      if (v84 >= v85)
      {
        if (v84 > v85) {
          return 1;
        }
        uint64_t v86 = a2[4];
        std::string::size_type v87 = a1[4];
        if (v86 >= v87)
        {
          if (v86 > v87) {
            return 1;
          }
          int v88 = *((char *)a1 + 23);
          int v89 = *((char *)a2 + 23);
          if (v89 >= 0) {
            size_t v90 = *((unsigned __int8 *)a2 + 23);
          }
          else {
            size_t v90 = (size_t)a2[1];
          }
          if (v89 >= 0) {
            v91 = a2;
          }
          else {
            v91 = *a2;
          }
          if (v88 >= 0) {
            size_t v92 = *((unsigned __int8 *)a1 + 23);
          }
          else {
            size_t v92 = (size_t)a1[1];
          }
          if (v88 >= 0) {
            v93 = a1;
          }
          else {
            v93 = *a1;
          }
          if (v92 >= v90) {
            size_t v94 = v90;
          }
          else {
            size_t v94 = v92;
          }
          int v95 = memcmp(v91, v93, v94);
          BOOL v96 = v90 < v92;
          if (v95) {
            BOOL v96 = v95 < 0;
          }
          if (!v96) {
            return 1;
          }
        }
      }
    }
    long long v51 = *a1;
    *(void *)v135 = a1[1];
    *(void *)&v135[7] = *(const void **)((char *)a1 + 15);
    char v52 = *((unsigned char *)a1 + 23);
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    long long v120 = *(_OWORD *)(a1 + 7);
    long long v125 = *(_OWORD *)(a1 + 9);
    v130 = a1[11];
    long long v110 = *(_OWORD *)(a1 + 3);
    long long v115 = *(_OWORD *)(a1 + 5);
    unint64_t v53 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v53;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    long long v54 = *(_OWORD *)(a2 + 5);
    long long v55 = *(_OWORD *)(a2 + 7);
    uint64_t v56 = a2[11];
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    a1[11] = v56;
    *(_OWORD *)(a1 + 7) = v55;
    *(_OWORD *)(a1 + 5) = v54;
    if (*((char *)a2 + 23) < 0) {
      operator delete((void *)*a2);
    }
    *a2 = v51;
    a2[1] = *(const void **)v135;
    *(const void **)((char *)a2 + 15) = *(const void **)&v135[7];
    *((unsigned char *)a2 + 23) = v52;
    *(_OWORD *)(a2 + 7) = v120;
    *(_OWORD *)(a2 + 9) = v125;
    a2[11] = v130;
    uint64_t result = 2;
    *(_OWORD *)(a2 + 3) = v110;
    *(_OWORD *)(a2 + 5) = v115;
  }
  return result;
}

const void **sub_1C53A8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  *(_OWORD *)__p = *(_OWORD *)a1;
  long long v111 = *(const void **)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  long long v114 = *(_OWORD *)(a1 + 56);
  long long v113 = *(_OWORD *)(a1 + 40);
  long long v115 = *(_OWORD *)(a1 + 72);
  long long v116 = *(const void **)(a1 + 88);
  long long v112 = *(_OWORD *)(a1 + 24);
  unint64_t v4 = v114;
  unint64_t v5 = *(void *)(a2 - 40);
  if ((unint64_t)v114 < v5) {
    goto LABEL_25;
  }
  if ((unint64_t)v114 > v5) {
    goto LABEL_52;
  }
  unint64_t v6 = *(void *)(a2 - 56);
  if ((unint64_t)v113 < v6) {
    goto LABEL_25;
  }
  if ((unint64_t)v113 > v6) {
    goto LABEL_52;
  }
  unint64_t v7 = *(void *)(a2 - 64);
  if (*((void *)&v112 + 1) < v7) {
    goto LABEL_25;
  }
  if (*((void *)&v112 + 1) > v7) {
    goto LABEL_52;
  }
  int v8 = *(char *)(a2 - 73);
  if (SHIBYTE(v111) >= 0) {
    BOOL v9 = (void *)HIBYTE(v111);
  }
  else {
    BOOL v9 = __p[1];
  }
  if (SHIBYTE(v111) >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (v8 >= 0) {
    size_t v11 = *(unsigned __int8 *)(a2 - 73);
  }
  else {
    size_t v11 = *(void *)(a2 - 88);
  }
  if (v8 >= 0) {
    int v12 = (const void *)(a2 - 96);
  }
  else {
    int v12 = *(const void **)(a2 - 96);
  }
  if (v11 >= (unint64_t)v9) {
    size_t v13 = (size_t)v9;
  }
  else {
    size_t v13 = v11;
  }
  int v14 = memcmp(v10, v12, v13);
  BOOL v15 = (unint64_t)v9 < v11;
  if (v14) {
    BOOL v15 = v14 < 0;
  }
  if (v15)
  {
LABEL_25:
    size_t v16 = (const void **)(a1 + 96);
    unint64_t v17 = *(void *)(a1 + 152);
    if (v4 >= v17)
    {
      uint64_t v18 = a1;
      unint64_t v20 = *((void *)&v112 + 1);
      unint64_t v19 = v113;
      if (SHIBYTE(v111) >= 0) {
        size_t v21 = (void *)HIBYTE(v111);
      }
      else {
        size_t v21 = __p[1];
      }
      if (SHIBYTE(v111) >= 0) {
        int v22 = __p;
      }
      else {
        int v22 = (void **)__p[0];
      }
      char v23 = (unint64_t *)(v18 + 128);
      while (1)
      {
        if (v4 <= v17)
        {
          unint64_t v24 = v23[1];
          if (v19 < v24) {
            break;
          }
          if (v19 <= v24)
          {
            if (v20 < *v23)
            {
              size_t v16 = (const void **)(v23 - 4);
              if ((unint64_t)(v23 - 4) >= v2) {
                goto LABEL_109;
              }
              goto LABEL_81;
            }
            if (v20 <= *v23)
            {
              int v25 = *((char *)v23 - 9);
              if (v25 >= 0) {
                size_t v26 = *((unsigned __int8 *)v23 - 9);
              }
              else {
                size_t v26 = *(v23 - 3);
              }
              if (v25 >= 0) {
                unint64_t v27 = v23 - 4;
              }
              else {
                unint64_t v27 = (unint64_t *)*(v23 - 4);
              }
              if (v26 >= (unint64_t)v21) {
                size_t v28 = (size_t)v21;
              }
              else {
                size_t v28 = v26;
              }
              int v29 = memcmp(v22, v27, v28);
              BOOL v30 = (unint64_t)v21 < v26;
              if (v29) {
                BOOL v30 = v29 < 0;
              }
              if (v30) {
                break;
              }
            }
          }
        }
        v16 += 12;
        unint64_t v17 = v23[15];
        v23 += 12;
        if (v4 < v17)
        {
          size_t v16 = (const void **)(v23 - 4);
          break;
        }
      }
    }
  }
  else
  {
LABEL_52:
    size_t v16 = (const void **)(a1 + 96);
    if (a1 + 96 < v2)
    {
      unint64_t v32 = *((void *)&v112 + 1);
      unint64_t v31 = v113;
      if (SHIBYTE(v111) >= 0) {
        uint64_t v33 = (void *)HIBYTE(v111);
      }
      else {
        uint64_t v33 = __p[1];
      }
      if (SHIBYTE(v111) >= 0) {
        int v34 = __p;
      }
      else {
        int v34 = (void **)__p[0];
      }
      do
      {
        int v35 = v16[7];
        if (v4 < (unint64_t)v35) {
          break;
        }
        if (v4 <= (unint64_t)v35)
        {
          size_t v36 = v16[5];
          if (v31 < (unint64_t)v36) {
            break;
          }
          if (v31 <= (unint64_t)v36)
          {
            unint64_t v37 = v16[4];
            if (v32 < (unint64_t)v37) {
              break;
            }
            if (v32 <= (unint64_t)v37)
            {
              int v38 = *((char *)v16 + 23);
              if (v38 >= 0) {
                size_t v39 = *((unsigned __int8 *)v16 + 23);
              }
              else {
                size_t v39 = (size_t)v16[1];
              }
              if (v38 >= 0) {
                size_t v40 = v16;
              }
              else {
                size_t v40 = *v16;
              }
              if (v39 >= (unint64_t)v33) {
                size_t v41 = (size_t)v33;
              }
              else {
                size_t v41 = v39;
              }
              int v42 = memcmp(v34, v40, v41);
              BOOL v43 = (unint64_t)v33 < v39;
              if (v42) {
                BOOL v43 = v42 < 0;
              }
              if (v43) {
                break;
              }
            }
          }
        }
        v16 += 12;
      }
      while ((unint64_t)v16 < v2);
    }
  }
  if ((unint64_t)v16 >= v2) {
    goto LABEL_109;
  }
LABEL_81:
  unint64_t v45 = *((void *)&v112 + 1);
  unint64_t v44 = v113;
  if (SHIBYTE(v111) >= 0) {
    long long v46 = (void *)HIBYTE(v111);
  }
  else {
    long long v46 = __p[1];
  }
  if (SHIBYTE(v111) >= 0) {
    long long v47 = __p;
  }
  else {
    long long v47 = (void **)__p[0];
  }
  for (uint64_t i = (unint64_t *)(v2 - 64); ; i -= 12)
  {
    unint64_t v2 = (unint64_t)(i - 4);
    if (v4 >= v5)
    {
      if (v4 > v5) {
        break;
      }
      unint64_t v49 = i[1];
      if (v44 >= v49)
      {
        if (v44 > v49) {
          break;
        }
        if (v45 >= *i)
        {
          if (v45 > *i) {
            break;
          }
          int v50 = *((char *)i - 9);
          if (v50 >= 0) {
            size_t v51 = *((unsigned __int8 *)i - 9);
          }
          else {
            size_t v51 = *(i - 3);
          }
          if (v50 >= 0) {
            char v52 = i - 4;
          }
          else {
            char v52 = (unint64_t *)*(i - 4);
          }
          if (v51 >= (unint64_t)v46) {
            size_t v53 = (size_t)v46;
          }
          else {
            size_t v53 = v51;
          }
          int v54 = memcmp(v47, v52, v53);
          BOOL v55 = (unint64_t)v46 < v51;
          if (v54) {
            BOOL v55 = v54 < 0;
          }
          if (!v55) {
            break;
          }
        }
      }
    }
    unint64_t v5 = *(i - 9);
  }
LABEL_109:
  while ((unint64_t)v16 < v2)
  {
    uint64_t v56 = *v16;
    v122[0] = v16[1];
    *(void *)((char *)v122 + 7) = *(const void **)((char *)v16 + 15);
    char v57 = *((unsigned char *)v16 + 23);
    v16[1] = 0;
    v16[2] = 0;
    char *v16 = 0;
    long long v58 = *(_OWORD *)(v16 + 7);
    long long v59 = *(_OWORD *)(v16 + 5);
    long long v120 = *(_OWORD *)(v16 + 9);
    long long v117 = *(_OWORD *)(v16 + 3);
    long long v118 = v59;
    long long v119 = v58;
    long long v121 = v16[11];
    long long v60 = *(_OWORD *)v2;
    v16[2] = *(const void **)(v2 + 16);
    *(_OWORD *)size_t v16 = v60;
    *(unsigned char *)(v2 + 23) = 0;
    *(unsigned char *)unint64_t v2 = 0;
    long long v61 = *(_OWORD *)(v2 + 40);
    long long v62 = *(_OWORD *)(v2 + 56);
    long long v63 = *(const void **)(v2 + 88);
    *(_OWORD *)(v16 + 9) = *(_OWORD *)(v2 + 72);
    v16[11] = v63;
    *(_OWORD *)(v16 + 3) = *(_OWORD *)(v2 + 24);
    *(_OWORD *)(v16 + 7) = v62;
    *(_OWORD *)(v16 + 5) = v61;
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    *(void *)unint64_t v2 = v56;
    *(void *)(v2 + 15) = *(void *)((char *)v122 + 7);
    *(void *)(v2 + 8) = v122[0];
    *(unsigned char *)(v2 + 23) = v57;
    long long v65 = v119;
    long long v64 = v120;
    *(void *)(v2 + 88) = v121;
    *(_OWORD *)(v2 + 56) = v65;
    *(_OWORD *)(v2 + 72) = v64;
    long long v66 = v118;
    *(_OWORD *)(v2 + 24) = v117;
    *(_OWORD *)(v2 + 40) = v66;
    unint64_t v67 = v114;
    long long v68 = v16 + 12;
    unint64_t v69 = (unint64_t)v16[19];
    unint64_t v71 = *((void *)&v112 + 1);
    unint64_t v70 = v113;
    size_t v72 = HIBYTE(v111);
    long long v74 = (void **)__p[0];
    long long v73 = __p[1];
    if ((unint64_t)v114 >= v69)
    {
      BOOL v107 = (void **)__p[0];
      long long v108 = __p[1];
      if (SHIBYTE(v111) >= 0) {
        int v75 = (void *)HIBYTE(v111);
      }
      else {
        int v75 = __p[1];
      }
      int v76 = __p;
      if (SHIBYTE(v111) < 0) {
        int v76 = (void **)__p[0];
      }
      __s1 = v76;
      size_t v77 = (unint64_t *)(v16 + 16);
      do
      {
        if (v67 <= v69)
        {
          size_t v16 = (const void **)(v77 - 4);
          unint64_t v78 = v77[1];
          if (v70 < v78) {
            goto LABEL_142;
          }
          if (v70 <= v78)
          {
            if (v71 < *v77) {
              goto LABEL_140;
            }
            if (v71 <= *v77)
            {
              int v79 = *((char *)v77 - 9);
              if (v79 >= 0) {
                size_t v80 = *((unsigned __int8 *)v77 - 9);
              }
              else {
                size_t v80 = *(v77 - 3);
              }
              if (v79 >= 0) {
                size_t v81 = v77 - 4;
              }
              else {
                size_t v81 = (unint64_t *)*(v77 - 4);
              }
              if (v80 >= (unint64_t)v75) {
                size_t v82 = (size_t)v75;
              }
              else {
                size_t v82 = v80;
              }
              int v83 = memcmp(__s1, v81, v82);
              BOOL v84 = (unint64_t)v75 < v80;
              if (v83) {
                BOOL v84 = v83 < 0;
              }
              if (v84)
              {
LABEL_140:
                size_t v16 = v68;
                goto LABEL_142;
              }
            }
          }
        }
        v68 += 12;
        unint64_t v69 = v77[15];
        v77 += 12;
      }
      while (v67 >= v69);
      size_t v16 = (const void **)(v77 - 4);
LABEL_142:
      long long v74 = v107;
      long long v73 = v108;
    }
    else
    {
      v16 += 12;
    }
    if ((v72 & 0x80u) == 0) {
      size_t v85 = v72;
    }
    else {
      size_t v85 = (size_t)v73;
    }
    if ((v72 & 0x80u) == 0) {
      uint64_t v86 = __p;
    }
    else {
      uint64_t v86 = v74;
    }
    while (1)
    {
      do
      {
        v2 -= 96;
        unint64_t v87 = *(void *)(v2 + 56);
      }
      while (v67 < v87);
      if (v67 > v87) {
        break;
      }
      unint64_t v88 = *(void *)(v2 + 40);
      if (v70 >= v88)
      {
        if (v70 > v88) {
          break;
        }
        unint64_t v89 = *(void *)(v2 + 32);
        if (v71 >= v89)
        {
          if (v71 > v89) {
            break;
          }
          int v90 = *(char *)(v2 + 23);
          if (v90 >= 0) {
            size_t v91 = *(unsigned __int8 *)(v2 + 23);
          }
          else {
            size_t v91 = *(void *)(v2 + 8);
          }
          if (v90 >= 0) {
            size_t v92 = (const void *)v2;
          }
          else {
            size_t v92 = *(const void **)v2;
          }
          if (v91 >= v85) {
            size_t v93 = v85;
          }
          else {
            size_t v93 = v91;
          }
          int v94 = memcmp(v86, v92, v93);
          BOOL v95 = v85 < v91;
          if (v94) {
            BOOL v95 = v94 < 0;
          }
          if (!v95) {
            break;
          }
        }
      }
    }
  }
  BOOL v96 = (void **)(v16 - 12);
  if (v16 - 12 != (const void **)a1)
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v97 = *(_OWORD *)v96;
    *(void *)(a1 + 16) = *(v16 - 10);
    *(_OWORD *)a1 = v97;
    *((unsigned char *)v16 - 73) = 0;
    *((unsigned char *)v16 - 96) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v16 - 9);
    long long v98 = *(_OWORD *)(v16 - 7);
    long long v99 = *(_OWORD *)(v16 - 5);
    long long v100 = *(_OWORD *)(v16 - 3);
    *(void *)(a1 + 88) = *(v16 - 1);
    *(_OWORD *)(a1 + 56) = v99;
    *(_OWORD *)(a1 + 72) = v100;
    *(_OWORD *)(a1 + 40) = v98;
  }
  if (*((char *)v16 - 73) < 0) {
    operator delete(*v96);
  }
  long long v101 = *(_OWORD *)__p;
  *(v16 - 10) = v111;
  *(_OWORD *)BOOL v96 = v101;
  HIBYTE(v111) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(v16 - 9) = v112;
  long long v102 = v113;
  long long v103 = v114;
  long long v104 = v115;
  *(v16 - 1) = v116;
  *(_OWORD *)(v16 - 3) = v104;
  *(_OWORD *)(v16 - 5) = v103;
  *(_OWORD *)(v16 - 7) = v102;
  if (SHIBYTE(v111) < 0) {
    operator delete(__p[0]);
  }
  return v16;
}

char *sub_1C5A3C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v95 = *(void *)(a1 + 16);
  *(_OWORD *)__p = *(_OWORD *)a1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v91 = a1 + 24;
  long long v98 = *(_OWORD *)(a1 + 56);
  long long v97 = *(_OWORD *)(a1 + 40);
  long long v96 = *(_OWORD *)(a1 + 24);
  long long v99 = *(_OWORD *)(a1 + 72);
  uint64_t v100 = *(void *)(a1 + 88);
  unint64_t v5 = v98;
  unint64_t v6 = *((void *)&v96 + 1);
  unint64_t v7 = v97;
  if (v95 >= 0) {
    int v8 = (void *)HIBYTE(v95);
  }
  else {
    int v8 = __p[1];
  }
  if (v95 >= 0) {
    BOOL v9 = __p;
  }
  else {
    BOOL v9 = (void **)__p[0];
  }
  while (1)
  {
    uint64_t v10 = a1 + v4;
    unint64_t v11 = *(void *)(a1 + v4 + 152);
    if (v11 >= v5)
    {
      if (v11 > v5) {
        break;
      }
      unint64_t v12 = *(void *)(a1 + v4 + 136);
      if (v12 >= v7)
      {
        if (v12 > v7) {
          break;
        }
        unint64_t v13 = *(void *)(a1 + v4 + 128);
        if (v13 >= v6)
        {
          if (v13 > v6) {
            break;
          }
          int v14 = *(char *)(a1 + v4 + 119);
          unint64_t v17 = *(const void **)(v10 + 96);
          BOOL v15 = (const void *)(v10 + 96);
          size_t v16 = v17;
          if (v14 >= 0) {
            size_t v18 = *(unsigned __int8 *)(a1 + v4 + 119);
          }
          else {
            size_t v18 = *(void *)(a1 + v4 + 104);
          }
          if (v14 >= 0) {
            unint64_t v19 = v15;
          }
          else {
            unint64_t v19 = v16;
          }
          if ((unint64_t)v8 >= v18) {
            size_t v20 = v18;
          }
          else {
            size_t v20 = (size_t)v8;
          }
          int v21 = memcmp(v19, v9, v20);
          BOOL v22 = v18 < (unint64_t)v8;
          if (v21) {
            BOOL v22 = v21 < 0;
          }
          if (!v22) {
            break;
          }
        }
      }
    }
    v4 += 96;
  }
  unint64_t v23 = a1 + v4 + 96;
  if (v4)
  {
    unint64_t v24 = (unint64_t *)(a2 - 96);
    unint64_t v25 = *(void *)(a2 - 40);
    if (v25 < v5) {
      goto LABEL_77;
    }
    size_t v26 = (unint64_t *)(a2 - 64);
    while (1)
    {
      if (v25 <= v5)
      {
        unint64_t v27 = v26[1];
        if (v27 < v7) {
          goto LABEL_77;
        }
        if (v27 <= v7)
        {
          if (*v26 < v6)
          {
            unint64_t v24 = v26 - 4;
            goto LABEL_77;
          }
          if (*v26 <= v6)
          {
            int v28 = *((char *)v26 - 9);
            if (v28 >= 0) {
              size_t v29 = *((unsigned __int8 *)v26 - 9);
            }
            else {
              size_t v29 = *(v26 - 3);
            }
            if (v28 >= 0) {
              BOOL v30 = v26 - 4;
            }
            else {
              BOOL v30 = (unint64_t *)*(v26 - 4);
            }
            if ((unint64_t)v8 >= v29) {
              size_t v31 = v29;
            }
            else {
              size_t v31 = (size_t)v8;
            }
            int v32 = memcmp(v30, v9, v31);
            BOOL v33 = v29 < (unint64_t)v8;
            if (v32) {
              BOOL v33 = v32 < 0;
            }
            if (v33) {
              goto LABEL_77;
            }
          }
        }
      }
      v24 -= 12;
      unint64_t v25 = *(v26 - 9);
      v26 -= 12;
      if (v25 < v5) {
        goto LABEL_75;
      }
    }
  }
  if (v23 >= a2)
  {
    unint64_t v24 = (unint64_t *)a2;
    goto LABEL_77;
  }
  unint64_t v24 = (unint64_t *)(a2 - 96);
  unint64_t v34 = *(void *)(a2 - 40);
  if (v34 < v5) {
    goto LABEL_77;
  }
  size_t v26 = (unint64_t *)(a2 - 64);
  while (1)
  {
    int v35 = v26 - 4;
    if (v34 > v5) {
      goto LABEL_56;
    }
    unint64_t v36 = v26[1];
    if (v36 < v7) {
      goto LABEL_77;
    }
    if (v36 > v7)
    {
LABEL_56:
      if (v23 >= (unint64_t)v35) {
        goto LABEL_77;
      }
      goto LABEL_57;
    }
    if (*v26 < v6) {
      break;
    }
    if (*v26 > v6) {
      goto LABEL_56;
    }
    size_t v37 = *((unsigned __int8 *)v26 - 9);
    int v38 = (char)v37;
    if ((v37 & 0x80u) != 0) {
      size_t v37 = *(v26 - 3);
    }
    unint64_t v92 = v37;
    if (v38 >= 0) {
      size_t v39 = v26 - 4;
    }
    else {
      size_t v39 = (unint64_t *)*(v26 - 4);
    }
    if ((unint64_t)v8 >= v37) {
      size_t v40 = v37;
    }
    else {
      size_t v40 = (size_t)v8;
    }
    int v41 = memcmp(v39, v9, v40);
    BOOL v42 = v92 >= (unint64_t)v8;
    if (v41) {
      BOOL v42 = v41 >= 0;
    }
    if (!v42 || v23 >= (unint64_t)v35) {
      goto LABEL_77;
    }
LABEL_57:
    v24 -= 12;
    unint64_t v34 = *(v26 - 9);
    v26 -= 12;
    if (v34 < v5)
    {
LABEL_75:
      unint64_t v24 = v26 - 4;
      goto LABEL_77;
    }
  }
  unint64_t v24 = v26 - 4;
LABEL_77:
  uint64_t v93 = a1;
  if (v23 >= (unint64_t)v24)
  {
    unint64_t v44 = (char *)v23;
  }
  else
  {
    unint64_t v44 = (char *)v23;
    unint64_t v45 = (char **)v24;
    do
    {
      long long v47 = *(char **)v44;
      v106[0] = *((void *)v44 + 1);
      *(void *)((char *)v106 + 7) = *(void *)(v44 + 15);
      char v48 = v44[23];
      *((void *)v44 + 1) = 0;
      *((void *)v44 + 2) = 0;
      *(void *)unint64_t v44 = 0;
      long long v49 = *(_OWORD *)(v44 + 56);
      long long v50 = *(_OWORD *)(v44 + 40);
      long long v104 = *(_OWORD *)(v44 + 72);
      long long v101 = *(_OWORD *)(v44 + 24);
      long long v102 = v50;
      long long v103 = v49;
      size_t v105 = (char *)*((void *)v44 + 11);
      long long v51 = *(_OWORD *)v45;
      *((void *)v44 + 2) = v45[2];
      *(_OWORD *)unint64_t v44 = v51;
      *((unsigned char *)v45 + 23) = 0;
      *(unsigned char *)unint64_t v45 = 0;
      long long v52 = *(_OWORD *)(v45 + 5);
      long long v53 = *(_OWORD *)(v45 + 7);
      int v54 = v45[11];
      *(_OWORD *)(v44 + 72) = *(_OWORD *)(v45 + 9);
      *((void *)v44 + 11) = v54;
      *(_OWORD *)(v44 + 24) = *(_OWORD *)(v45 + 3);
      *(_OWORD *)(v44 + 56) = v53;
      *(_OWORD *)(v44 + 40) = v52;
      if (*((char *)v45 + 23) < 0) {
        operator delete(*v45);
      }
      *unint64_t v45 = v47;
      *(char **)((char *)v45 + 15) = *(char **)((char *)v106 + 7);
      v45[1] = (char *)v106[0];
      *((unsigned char *)v45 + 23) = v48;
      long long v56 = v103;
      long long v55 = v104;
      v45[11] = v105;
      *(_OWORD *)(v45 + 7) = v56;
      *(_OWORD *)(v45 + 9) = v55;
      long long v57 = v102;
      *(_OWORD *)(v45 + 3) = v101;
      *(_OWORD *)(v45 + 5) = v57;
      unint64_t v58 = v98;
      unint64_t v59 = *((void *)&v96 + 1);
      unint64_t v60 = v97;
      if (v95 >= 0) {
        long long v61 = (void *)HIBYTE(v95);
      }
      else {
        long long v61 = __p[1];
      }
      if (v95 >= 0) {
        long long v62 = __p;
      }
      else {
        long long v62 = (void **)__p[0];
      }
      while (1)
      {
        do
        {
          v44 += 96;
          unint64_t v63 = *((void *)v44 + 7);
        }
        while (v63 < v58);
        if (v63 > v58) {
          break;
        }
        unint64_t v64 = *((void *)v44 + 5);
        if (v64 >= v60)
        {
          if (v64 > v60) {
            break;
          }
          unint64_t v65 = *((void *)v44 + 4);
          if (v65 >= v59)
          {
            if (v65 > v59) {
              break;
            }
            int v66 = v44[23];
            if (v66 >= 0) {
              size_t v67 = v44[23];
            }
            else {
              size_t v67 = *((void *)v44 + 1);
            }
            if (v66 >= 0) {
              long long v68 = v44;
            }
            else {
              long long v68 = *(char **)v44;
            }
            if ((unint64_t)v61 >= v67) {
              size_t v69 = v67;
            }
            else {
              size_t v69 = (size_t)v61;
            }
            int v70 = memcmp(v68, v62, v69);
            BOOL v71 = v67 < (unint64_t)v61;
            if (v70) {
              BOOL v71 = v70 < 0;
            }
            if (!v71) {
              break;
            }
          }
        }
      }
      long long v46 = (unint64_t *)(v45 - 12);
      unint64_t v72 = (unint64_t)*(v45 - 5);
      if (v72 >= v58)
      {
        long long v73 = (unint64_t *)(v45 - 8);
        while (1)
        {
          if (v72 <= v58)
          {
            unint64_t v74 = v73[1];
            if (v74 < v60) {
              goto LABEL_80;
            }
            if (v74 <= v60)
            {
              if (*v73 < v59) {
                goto LABEL_80;
              }
              if (*v73 <= v59)
              {
                int v75 = *((char *)v73 - 9);
                if (v75 >= 0) {
                  size_t v76 = *((unsigned __int8 *)v73 - 9);
                }
                else {
                  size_t v76 = *(v73 - 3);
                }
                if (v75 >= 0) {
                  size_t v77 = v73 - 4;
                }
                else {
                  size_t v77 = (unint64_t *)*(v73 - 4);
                }
                if ((unint64_t)v61 >= v76) {
                  size_t v78 = v76;
                }
                else {
                  size_t v78 = (size_t)v61;
                }
                int v79 = memcmp(v77, v62, v78);
                BOOL v80 = v76 < (unint64_t)v61;
                if (v79) {
                  BOOL v80 = v79 < 0;
                }
                if (v80) {
                  break;
                }
              }
            }
          }
          v46 -= 12;
          unint64_t v72 = *(v73 - 9);
          v73 -= 12;
          if (v72 < v58)
          {
            long long v46 = v73 - 4;
            goto LABEL_80;
          }
        }
        long long v46 = v73 - 4;
      }
LABEL_80:
      unint64_t v45 = (char **)v46;
    }
    while (v44 < (char *)v46);
  }
  size_t v81 = (void **)(v44 - 96);
  if (v44 - 96 != (char *)v93)
  {
    if (*(char *)(v93 + 23) < 0) {
      operator delete(*(void **)v93);
    }
    long long v82 = *(_OWORD *)v81;
    *(void *)(v93 + 16) = *((void *)v44 - 10);
    *(_OWORD *)uint64_t v93 = v82;
    *(v44 - 73) = 0;
    *(v44 - 96) = 0;
    *(_OWORD *)uint64_t v91 = *(_OWORD *)(v44 - 72);
    long long v83 = *(_OWORD *)(v44 - 56);
    long long v84 = *(_OWORD *)(v44 - 40);
    long long v85 = *(_OWORD *)(v44 - 24);
    *(void *)(v91 + 64) = *((void *)v44 - 1);
    *(_OWORD *)(v91 + 32) = v84;
    *(_OWORD *)(v91 + 48) = v85;
    *(_OWORD *)(v91 + 16) = v83;
  }
  if (*(v44 - 73) < 0) {
    operator delete(*v81);
  }
  long long v86 = *(_OWORD *)__p;
  *((void *)v44 - 10) = v95;
  *(_OWORD *)size_t v81 = v86;
  HIBYTE(v95) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(v44 - 72) = v96;
  long long v87 = v97;
  long long v88 = v98;
  long long v89 = v99;
  *((void *)v44 - 1) = v100;
  *(_OWORD *)(v44 - 24) = v89;
  *(_OWORD *)(v44 - 40) = v88;
  *(_OWORD *)(v44 - 56) = v87;
  if (SHIBYTE(v95) < 0) {
    operator delete(__p[0]);
  }
  return v44 - 96;
}

BOOL sub_1C6040(uint64_t a1, const void **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 5;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      unint64_t v6 = (void **)(a2 - 12);
      unint64_t v7 = (unint64_t)*(a2 - 5);
      unint64_t v8 = *(void *)(a1 + 56);
      if (v7 < v8) {
        goto LABEL_3;
      }
      if (v7 > v8) {
        return result;
      }
      unint64_t v66 = (unint64_t)*(a2 - 7);
      unint64_t v67 = *(void *)(a1 + 40);
      if (v66 < v67) {
        goto LABEL_3;
      }
      if (v66 > v67) {
        return result;
      }
      unint64_t v68 = (unint64_t)*(a2 - 8);
      unint64_t v69 = *(void *)(a1 + 32);
      if (v68 < v69) {
        goto LABEL_3;
      }
      if (v68 <= v69)
      {
        int v70 = *(char *)(a1 + 23);
        int v71 = *((char *)a2 - 73);
        if (v71 >= 0) {
          size_t v72 = *((unsigned __int8 *)a2 - 73);
        }
        else {
          size_t v72 = (size_t)*(a2 - 11);
        }
        if (v71 >= 0) {
          long long v73 = a2 - 12;
        }
        else {
          long long v73 = (const void **)*(a2 - 12);
        }
        if (v70 >= 0) {
          size_t v74 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v74 = *(void *)(a1 + 8);
        }
        if (v70 >= 0) {
          int v75 = (const void *)a1;
        }
        else {
          int v75 = *(const void **)a1;
        }
        if (v74 >= v72) {
          size_t v76 = v72;
        }
        else {
          size_t v76 = v74;
        }
        int v77 = memcmp(v73, v75, v76);
        BOOL v78 = v72 < v74;
        if (v77) {
          BOOL v78 = v77 < 0;
        }
        if (!v78) {
          return 1;
        }
LABEL_3:
        BOOL v9 = *(const void **)a1;
        v83[0] = *(void *)(a1 + 8);
        *(void *)((char *)v83 + 7) = *(void *)(a1 + 15);
        char v10 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        long long v11 = *(_OWORD *)(a1 + 40);
        long long v12 = *(_OWORD *)(a1 + 72);
        *(_OWORD *)&v80[16] = *(_OWORD *)(a1 + 56);
        *(_OWORD *)&v80[32] = v12;
        *(void *)&v80[48] = *(void *)(a1 + 88);
        long long v79 = *(_OWORD *)(a1 + 24);
        *(_OWORD *)BOOL v80 = v11;
        uint64_t v13 = (uint64_t)*(a2 - 10);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(void *)(a1 + 16) = v13;
        *((unsigned char *)a2 - 73) = 0;
        *((unsigned char *)a2 - 96) = 0;
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 - 9);
        long long v14 = *(_OWORD *)(a2 - 7);
        long long v15 = *(_OWORD *)(a2 - 5);
        uint64_t v16 = (uint64_t)*(a2 - 1);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 - 3);
        *(void *)(a1 + 88) = v16;
        *(_OWORD *)(a1 + 56) = v15;
        *(_OWORD *)(a1 + 40) = v14;
        if (*((char *)a2 - 73) < 0) {
          operator delete(*v6);
        }
        unint64_t v17 = (const void *)v83[0];
        *(a2 - 12) = v9;
        *(a2 - 11) = v17;
        *(const void **)((char *)a2 - 81) = *(const void **)((char *)v83 + 7);
        *((unsigned char *)a2 - 73) = v10;
        long long v18 = *(_OWORD *)&v80[32];
        *(_OWORD *)(a2 - 5) = *(_OWORD *)&v80[16];
        *(_OWORD *)(a2 - 3) = v18;
        *(a2 - 1) = *(const void **)&v80[48];
        long long v19 = *(_OWORD *)v80;
        BOOL result = 1;
        *(_OWORD *)(a2 - 9) = v79;
        *(_OWORD *)(a2 - 7) = v19;
      }
      return result;
    case 3uLL:
      sub_1C4C80((const void **)a1, (const void **)(a1 + 96), a2 - 12);
      return 1;
    case 4uLL:
      sub_1C6570(a1, a1 + 96, a1 + 192, a2 - 12);
      return 1;
    case 5uLL:
      sub_1C6A04(a1, a1 + 96, a1 + 192, a1 + 288, a2 - 12);
      return 1;
    default:
      size_t v20 = (const void **)(a1 + 192);
      sub_1C4C80((const void **)a1, (const void **)(a1 + 96), (const void **)(a1 + 192));
      int v21 = (const void **)(a1 + 288);
      if ((const void **)(a1 + 288) == a2) {
        return 1;
      }
      uint64_t v22 = 0;
      int v23 = 0;
      break;
  }
  while (1)
  {
    unint64_t v27 = v21[7];
    int v28 = v20[7];
    if (v27 < v28) {
      goto LABEL_100;
    }
    if (v27 <= v28)
    {
      size_t v29 = v21[5];
      BOOL v30 = v20[5];
      if (v29 < v30) {
        goto LABEL_100;
      }
      if (v29 <= v30)
      {
        long long v55 = v21[4];
        long long v56 = v20[4];
        if (v55 < v56) {
          goto LABEL_100;
        }
        if (v55 <= v56)
        {
          int v57 = *((char *)v20 + 23);
          int v58 = *((char *)v21 + 23);
          if (v58 >= 0) {
            size_t v59 = *((unsigned __int8 *)v21 + 23);
          }
          else {
            size_t v59 = (size_t)v21[1];
          }
          if (v58 >= 0) {
            unint64_t v60 = v21;
          }
          else {
            unint64_t v60 = *v21;
          }
          if (v57 >= 0) {
            size_t v61 = *((unsigned __int8 *)v20 + 23);
          }
          else {
            size_t v61 = (size_t)v20[1];
          }
          if (v57 >= 0) {
            long long v62 = v20;
          }
          else {
            long long v62 = *v20;
          }
          if (v61 >= v59) {
            size_t v63 = v59;
          }
          else {
            size_t v63 = v61;
          }
          int v64 = memcmp(v60, v62, v63);
          BOOL v65 = v59 < v61;
          if (v64) {
            BOOL v65 = v64 < 0;
          }
          if (v65)
          {
LABEL_100:
            long long v79 = *(_OWORD *)v21;
            *(void *)BOOL v80 = v21[2];
            v21[1] = 0;
            v21[2] = 0;
            *int v21 = 0;
            long long v31 = *(_OWORD *)(v21 + 5);
            long long v32 = *(_OWORD *)(v21 + 9);
            *(_OWORD *)&v80[40] = *(_OWORD *)(v21 + 7);
            long long v81 = v32;
            long long v82 = v21[11];
            uint64_t v33 = v22;
            *(_OWORD *)&v80[8] = *(_OWORD *)(v21 + 3);
            *(_OWORD *)&v80[24] = v31;
            while (1)
            {
              uint64_t v34 = a1 + v33;
              int v35 = (void **)(a1 + v33 + 288);
              if (*(char *)(a1 + v33 + 311) < 0) {
                operator delete(*v35);
              }
              *(_OWORD *)int v35 = *(_OWORD *)(v34 + 192);
              *(void *)(a1 + v33 + 304) = *(void *)(v34 + 208);
              *(unsigned char *)(v34 + 215) = 0;
              *(unsigned char *)(v34 + 192) = 0;
              long long v36 = *(_OWORD *)(v34 + 232);
              long long v37 = *(_OWORD *)(v34 + 248);
              *(void *)(v34 + 376) = *(void *)(v34 + 280);
              *(_OWORD *)(v34 + 312) = *(_OWORD *)(v34 + 216);
              *(_OWORD *)(v34 + 328) = v36;
              long long v38 = *(_OWORD *)(v34 + 264);
              *(_OWORD *)(v34 + 344) = v37;
              *(_OWORD *)(v34 + 360) = v38;
              if (v33 == -192) {
                break;
              }
              uint64_t v39 = a1 + v33;
              unint64_t v40 = *(void *)(a1 + v33 + 152);
              if (*(void *)&v80[40] >= v40)
              {
                if (*(void *)&v80[40] > v40) {
                  goto LABEL_42;
                }
                unint64_t v41 = *(void *)(a1 + v33 + 136);
                if (*(void *)&v80[24] >= v41)
                {
                  if (*(void *)&v80[24] > v41) {
                    goto LABEL_42;
                  }
                  unint64_t v42 = *(void *)(a1 + v33 + 128);
                  if (*(void *)&v80[16] >= v42)
                  {
                    if (*(void *)&v80[16] > v42) {
                      goto LABEL_42;
                    }
                    int v43 = *(char *)(a1 + v33 + 119);
                    long long v46 = *(const void **)(v39 + 96);
                    unint64_t v44 = (const void *)(v39 + 96);
                    unint64_t v45 = v46;
                    if (v80[7] >= 0) {
                      size_t v47 = v80[7];
                    }
                    else {
                      size_t v47 = *((void *)&v79 + 1);
                    }
                    if (v80[7] >= 0) {
                      char v48 = &v79;
                    }
                    else {
                      char v48 = (long long *)v79;
                    }
                    if (v43 >= 0) {
                      size_t v49 = *(unsigned __int8 *)(a1 + v33 + 119);
                    }
                    else {
                      size_t v49 = *(void *)(a1 + v33 + 104);
                    }
                    if (v43 >= 0) {
                      long long v50 = v44;
                    }
                    else {
                      long long v50 = v45;
                    }
                    if (v49 >= v47) {
                      size_t v51 = v47;
                    }
                    else {
                      size_t v51 = v49;
                    }
                    int v52 = memcmp(v48, v50, v51);
                    BOOL v53 = v47 < v49;
                    if (v52) {
                      BOOL v53 = v52 < 0;
                    }
                    if (!v53)
                    {
LABEL_42:
                      uint64_t v54 = a1 + v33 + 192;
                      if ((*(char *)(a1 + v33 + 215) & 0x80000000) == 0) {
                        goto LABEL_8;
                      }
                      goto LABEL_45;
                    }
                  }
                }
              }
              v33 -= 96;
            }
            uint64_t v54 = a1;
            if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
              goto LABEL_8;
            }
LABEL_45:
            operator delete(*(void **)v54);
LABEL_8:
            uint64_t v24 = a1 + v33 + 216;
            *(_OWORD *)uint64_t v54 = v79;
            *(void *)(v54 + 16) = *(void *)v80;
            long long v25 = v81;
            *(_OWORD *)(v24 + 32) = *(_OWORD *)&v80[40];
            *(_OWORD *)(v24 + 48) = v25;
            *(void *)(v24 + 64) = v82;
            long long v26 = *(_OWORD *)&v80[24];
            ++v23;
            *(_OWORD *)uint64_t v24 = *(_OWORD *)&v80[8];
            *(_OWORD *)(v24 + 16) = v26;
            if (v23 == 8) {
              return v21 + 12 == a2;
            }
          }
        }
      }
    }
    size_t v20 = v21;
    v22 += 96;
    v21 += 12;
    if (v21 == a2) {
      return 1;
    }
  }
}

void sub_1C6570(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  sub_1C4C80((const void **)a1, (const void **)a2, (const void **)a3);
  unint64_t v8 = a4[7];
  unint64_t v9 = *(void *)(a3 + 56);
  if ((unint64_t)v8 < v9) {
    goto LABEL_25;
  }
  if ((unint64_t)v8 <= v9)
  {
    char v10 = a4[5];
    unint64_t v11 = *(void *)(a3 + 40);
    if ((unint64_t)v10 < v11) {
      goto LABEL_25;
    }
    if ((unint64_t)v10 <= v11)
    {
      long long v12 = a4[4];
      unint64_t v13 = *(void *)(a3 + 32);
      if ((unint64_t)v12 < v13) {
        goto LABEL_25;
      }
      if ((unint64_t)v12 <= v13)
      {
        int v14 = *(char *)(a3 + 23);
        int v15 = *((char *)a4 + 23);
        if (v15 >= 0) {
          size_t v16 = *((unsigned __int8 *)a4 + 23);
        }
        else {
          size_t v16 = (size_t)a4[1];
        }
        if (v15 >= 0) {
          unint64_t v17 = a4;
        }
        else {
          unint64_t v17 = *a4;
        }
        if (v14 >= 0) {
          size_t v18 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          size_t v18 = *(void *)(a3 + 8);
        }
        if (v14 >= 0) {
          long long v19 = (const void *)a3;
        }
        else {
          long long v19 = *(const void **)a3;
        }
        if (v18 >= v16) {
          size_t v20 = v16;
        }
        else {
          size_t v20 = v18;
        }
        int v21 = memcmp(v17, v19, v20);
        BOOL v22 = v16 < v18;
        if (v21) {
          BOOL v22 = v21 < 0;
        }
        if (v22)
        {
LABEL_25:
          int v23 = *(const void **)a3;
          *(void *)long long v86 = *(void *)(a3 + 8);
          *(void *)&v86[7] = *(void *)(a3 + 15);
          char v24 = *(unsigned char *)(a3 + 23);
          *(void *)(a3 + 16) = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)a3 = 0;
          long long v77 = *(_OWORD *)(a3 + 56);
          long long v80 = *(_OWORD *)(a3 + 72);
          long long v83 = *(const void **)(a3 + 88);
          long long v71 = *(_OWORD *)(a3 + 24);
          long long v74 = *(_OWORD *)(a3 + 40);
          long long v25 = a4[2];
          *(_OWORD *)a3 = *(_OWORD *)a4;
          *(void *)(a3 + 16) = v25;
          *((unsigned char *)a4 + 23) = 0;
          *(unsigned char *)a4 = 0;
          *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 3);
          long long v26 = *(_OWORD *)(a4 + 5);
          long long v27 = *(_OWORD *)(a4 + 7);
          int v28 = a4[11];
          *(_OWORD *)(a3 + 72) = *(_OWORD *)(a4 + 9);
          *(void *)(a3 + 88) = v28;
          *(_OWORD *)(a3 + 56) = v27;
          *(_OWORD *)(a3 + 40) = v26;
          if (*((char *)a4 + 23) < 0) {
            operator delete((void *)*a4);
          }
          *a4 = v23;
          a4[1] = *(const void **)v86;
          *(const void **)((char *)a4 + 15) = *(const void **)&v86[7];
          *((unsigned char *)a4 + 23) = v24;
          *(_OWORD *)(a4 + 7) = v77;
          *(_OWORD *)(a4 + 9) = v80;
          a4[11] = v83;
          *(_OWORD *)(a4 + 3) = v71;
          *(_OWORD *)(a4 + 5) = v74;
          unint64_t v29 = *(void *)(a3 + 56);
          unint64_t v30 = *(void *)(a2 + 56);
          if (v29 < v30) {
            goto LABEL_28;
          }
          if (v29 <= v30)
          {
            unint64_t v45 = *(void *)(a3 + 40);
            unint64_t v46 = *(void *)(a2 + 40);
            if (v45 < v46) {
              goto LABEL_28;
            }
            if (v45 <= v46)
            {
              unint64_t v47 = *(void *)(a3 + 32);
              unint64_t v48 = *(void *)(a2 + 32);
              if (v47 < v48) {
                goto LABEL_28;
              }
              if (v47 <= v48)
              {
                int v49 = *(char *)(a2 + 23);
                int v50 = *(char *)(a3 + 23);
                if (v50 >= 0) {
                  size_t v51 = *(unsigned __int8 *)(a3 + 23);
                }
                else {
                  size_t v51 = *(void *)(a3 + 8);
                }
                if (v50 >= 0) {
                  int v52 = (const void *)a3;
                }
                else {
                  int v52 = *(const void **)a3;
                }
                if (v49 >= 0) {
                  size_t v53 = *(unsigned __int8 *)(a2 + 23);
                }
                else {
                  size_t v53 = *(void *)(a2 + 8);
                }
                if (v49 >= 0) {
                  uint64_t v54 = (const void *)a2;
                }
                else {
                  uint64_t v54 = *(const void **)a2;
                }
                if (v53 >= v51) {
                  size_t v55 = v51;
                }
                else {
                  size_t v55 = v53;
                }
                int v56 = memcmp(v52, v54, v55);
                BOOL v57 = v51 < v53;
                if (v56) {
                  BOOL v57 = v56 < 0;
                }
                if (v57)
                {
LABEL_28:
                  long long v31 = *(const void **)a2;
                  *(void *)long long v87 = *(void *)(a2 + 8);
                  *(void *)&v87[7] = *(void *)(a2 + 15);
                  char v32 = *(unsigned char *)(a2 + 23);
                  *(void *)(a2 + 16) = 0;
                  *(void *)(a2 + 8) = 0;
                  *(void *)a2 = 0;
                  long long v78 = *(_OWORD *)(a2 + 56);
                  long long v81 = *(_OWORD *)(a2 + 72);
                  uint64_t v84 = *(void *)(a2 + 88);
                  long long v72 = *(_OWORD *)(a2 + 24);
                  long long v75 = *(_OWORD *)(a2 + 40);
                  uint64_t v33 = *(void *)(a3 + 16);
                  *(_OWORD *)a2 = *(_OWORD *)a3;
                  *(void *)(a2 + 16) = v33;
                  *(unsigned char *)(a3 + 23) = 0;
                  *(unsigned char *)a3 = 0;
                  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
                  long long v34 = *(_OWORD *)(a3 + 40);
                  long long v35 = *(_OWORD *)(a3 + 56);
                  uint64_t v36 = *(void *)(a3 + 88);
                  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
                  *(void *)(a2 + 88) = v36;
                  *(_OWORD *)(a2 + 56) = v35;
                  *(_OWORD *)(a2 + 40) = v34;
                  if (*(char *)(a3 + 23) < 0) {
                    operator delete(*(void **)a3);
                  }
                  *(void *)a3 = v31;
                  *(void *)(a3 + 8) = *(void *)v87;
                  *(void *)(a3 + 15) = *(void *)&v87[7];
                  *(unsigned char *)(a3 + 23) = v32;
                  *(_OWORD *)(a3 + 56) = v78;
                  *(_OWORD *)(a3 + 72) = v81;
                  *(void *)(a3 + 88) = v84;
                  *(_OWORD *)(a3 + 24) = v72;
                  *(_OWORD *)(a3 + 40) = v75;
                  unint64_t v37 = *(void *)(a2 + 56);
                  unint64_t v38 = *(void *)(a1 + 56);
                  if (v37 < v38) {
                    goto LABEL_31;
                  }
                  if (v37 <= v38)
                  {
                    unint64_t v58 = *(void *)(a2 + 40);
                    unint64_t v59 = *(void *)(a1 + 40);
                    if (v58 < v59) {
                      goto LABEL_31;
                    }
                    if (v58 <= v59)
                    {
                      unint64_t v60 = *(void *)(a2 + 32);
                      unint64_t v61 = *(void *)(a1 + 32);
                      if (v60 < v61) {
                        goto LABEL_31;
                      }
                      if (v60 <= v61)
                      {
                        int v62 = *(char *)(a1 + 23);
                        int v63 = *(char *)(a2 + 23);
                        if (v63 >= 0) {
                          size_t v64 = *(unsigned __int8 *)(a2 + 23);
                        }
                        else {
                          size_t v64 = *(void *)(a2 + 8);
                        }
                        if (v63 >= 0) {
                          BOOL v65 = (const void *)a2;
                        }
                        else {
                          BOOL v65 = *(const void **)a2;
                        }
                        if (v62 >= 0) {
                          size_t v66 = *(unsigned __int8 *)(a1 + 23);
                        }
                        else {
                          size_t v66 = *(void *)(a1 + 8);
                        }
                        if (v62 >= 0) {
                          unint64_t v67 = (const void *)a1;
                        }
                        else {
                          unint64_t v67 = *(const void **)a1;
                        }
                        if (v66 >= v64) {
                          size_t v68 = v64;
                        }
                        else {
                          size_t v68 = v66;
                        }
                        int v69 = memcmp(v65, v67, v68);
                        BOOL v70 = v64 < v66;
                        if (v69) {
                          BOOL v70 = v69 < 0;
                        }
                        if (v70)
                        {
LABEL_31:
                          uint64_t v39 = *(const void **)a1;
                          *(void *)long long v88 = *(void *)(a1 + 8);
                          *(void *)&v88[7] = *(void *)(a1 + 15);
                          char v40 = *(unsigned char *)(a1 + 23);
                          *(void *)(a1 + 8) = 0;
                          *(void *)(a1 + 16) = 0;
                          *(void *)a1 = 0;
                          long long v79 = *(_OWORD *)(a1 + 56);
                          long long v82 = *(_OWORD *)(a1 + 72);
                          uint64_t v85 = *(void *)(a1 + 88);
                          long long v73 = *(_OWORD *)(a1 + 24);
                          long long v76 = *(_OWORD *)(a1 + 40);
                          uint64_t v41 = *(void *)(a2 + 16);
                          *(_OWORD *)a1 = *(_OWORD *)a2;
                          *(void *)(a1 + 16) = v41;
                          *(unsigned char *)(a2 + 23) = 0;
                          *(unsigned char *)a2 = 0;
                          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
                          long long v42 = *(_OWORD *)(a2 + 40);
                          long long v43 = *(_OWORD *)(a2 + 56);
                          uint64_t v44 = *(void *)(a2 + 88);
                          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
                          *(void *)(a1 + 88) = v44;
                          *(_OWORD *)(a1 + 56) = v43;
                          *(_OWORD *)(a1 + 40) = v42;
                          if (*(char *)(a2 + 23) < 0) {
                            operator delete(*(void **)a2);
                          }
                          *(void *)a2 = v39;
                          *(void *)(a2 + 8) = *(void *)v88;
                          *(void *)(a2 + 15) = *(void *)&v88[7];
                          *(unsigned char *)(a2 + 23) = v40;
                          *(_OWORD *)(a2 + 56) = v79;
                          *(_OWORD *)(a2 + 72) = v82;
                          *(void *)(a2 + 88) = v85;
                          *(_OWORD *)(a2 + 24) = v73;
                          *(_OWORD *)(a2 + 40) = v76;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1C6A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  sub_1C6570(a1, a2, a3, (const void **)a4);
  char v10 = a5[7];
  unint64_t v11 = *(void *)(a4 + 56);
  if ((unint64_t)v10 < v11) {
    goto LABEL_25;
  }
  if ((unint64_t)v10 <= v11)
  {
    long long v12 = a5[5];
    unint64_t v13 = *(void *)(a4 + 40);
    if ((unint64_t)v12 < v13) {
      goto LABEL_25;
    }
    if ((unint64_t)v12 <= v13)
    {
      int v14 = a5[4];
      unint64_t v15 = *(void *)(a4 + 32);
      if ((unint64_t)v14 < v15) {
        goto LABEL_25;
      }
      if ((unint64_t)v14 <= v15)
      {
        int v16 = *(char *)(a4 + 23);
        int v17 = *((char *)a5 + 23);
        if (v17 >= 0) {
          size_t v18 = *((unsigned __int8 *)a5 + 23);
        }
        else {
          size_t v18 = (size_t)a5[1];
        }
        if (v17 >= 0) {
          long long v19 = a5;
        }
        else {
          long long v19 = *a5;
        }
        if (v16 >= 0) {
          size_t v20 = *(unsigned __int8 *)(a4 + 23);
        }
        else {
          size_t v20 = *(void *)(a4 + 8);
        }
        if (v16 >= 0) {
          int v21 = (const void *)a4;
        }
        else {
          int v21 = *(const void **)a4;
        }
        if (v20 >= v18) {
          size_t v22 = v18;
        }
        else {
          size_t v22 = v20;
        }
        int v23 = memcmp(v19, v21, v22);
        BOOL v24 = v18 < v20;
        if (v23) {
          BOOL v24 = v23 < 0;
        }
        if (v24)
        {
LABEL_25:
          long long v25 = *(const void **)a4;
          *(void *)long long v114 = *(void *)(a4 + 8);
          *(void *)&v114[7] = *(void *)(a4 + 15);
          char v26 = *(unsigned char *)(a4 + 23);
          *(void *)(a4 + 16) = 0;
          *(void *)(a4 + 8) = 0;
          *(void *)a4 = 0;
          long long v102 = *(_OWORD *)(a4 + 56);
          long long v106 = *(_OWORD *)(a4 + 72);
          long long v110 = *(const void **)(a4 + 88);
          long long v94 = *(_OWORD *)(a4 + 24);
          long long v98 = *(_OWORD *)(a4 + 40);
          long long v27 = a5[2];
          *(_OWORD *)a4 = *(_OWORD *)a5;
          *(void *)(a4 + 16) = v27;
          *((unsigned char *)a5 + 23) = 0;
          *(unsigned char *)a5 = 0;
          *(_OWORD *)(a4 + 24) = *(_OWORD *)(a5 + 3);
          long long v28 = *(_OWORD *)(a5 + 5);
          long long v29 = *(_OWORD *)(a5 + 7);
          unint64_t v30 = a5[11];
          *(_OWORD *)(a4 + 72) = *(_OWORD *)(a5 + 9);
          *(void *)(a4 + 88) = v30;
          *(_OWORD *)(a4 + 56) = v29;
          *(_OWORD *)(a4 + 40) = v28;
          if (*((char *)a5 + 23) < 0) {
            operator delete((void *)*a5);
          }
          *a5 = v25;
          a5[1] = *(const void **)v114;
          *(const void **)((char *)a5 + 15) = *(const void **)&v114[7];
          *((unsigned char *)a5 + 23) = v26;
          *(_OWORD *)(a5 + 7) = v102;
          *(_OWORD *)(a5 + 9) = v106;
          a5[11] = v110;
          *(_OWORD *)(a5 + 3) = v94;
          *(_OWORD *)(a5 + 5) = v98;
          unint64_t v31 = *(void *)(a4 + 56);
          unint64_t v32 = *(void *)(a3 + 56);
          if (v31 < v32) {
            goto LABEL_28;
          }
          if (v31 <= v32)
          {
            unint64_t v55 = *(void *)(a4 + 40);
            unint64_t v56 = *(void *)(a3 + 40);
            if (v55 < v56) {
              goto LABEL_28;
            }
            if (v55 <= v56)
            {
              unint64_t v57 = *(void *)(a4 + 32);
              unint64_t v58 = *(void *)(a3 + 32);
              if (v57 < v58) {
                goto LABEL_28;
              }
              if (v57 <= v58)
              {
                int v59 = *(char *)(a3 + 23);
                int v60 = *(char *)(a4 + 23);
                if (v60 >= 0) {
                  size_t v61 = *(unsigned __int8 *)(a4 + 23);
                }
                else {
                  size_t v61 = *(void *)(a4 + 8);
                }
                if (v60 >= 0) {
                  int v62 = (const void *)a4;
                }
                else {
                  int v62 = *(const void **)a4;
                }
                if (v59 >= 0) {
                  size_t v63 = *(unsigned __int8 *)(a3 + 23);
                }
                else {
                  size_t v63 = *(void *)(a3 + 8);
                }
                if (v59 >= 0) {
                  size_t v64 = (const void *)a3;
                }
                else {
                  size_t v64 = *(const void **)a3;
                }
                if (v63 >= v61) {
                  size_t v65 = v61;
                }
                else {
                  size_t v65 = v63;
                }
                int v66 = memcmp(v62, v64, v65);
                BOOL v67 = v61 < v63;
                if (v66) {
                  BOOL v67 = v66 < 0;
                }
                if (v67)
                {
LABEL_28:
                  uint64_t v33 = *(const void **)a3;
                  *(void *)long long v115 = *(void *)(a3 + 8);
                  *(void *)&v115[7] = *(void *)(a3 + 15);
                  char v34 = *(unsigned char *)(a3 + 23);
                  *(void *)(a3 + 16) = 0;
                  *(void *)(a3 + 8) = 0;
                  *(void *)a3 = 0;
                  long long v103 = *(_OWORD *)(a3 + 56);
                  long long v107 = *(_OWORD *)(a3 + 72);
                  uint64_t v111 = *(void *)(a3 + 88);
                  long long v95 = *(_OWORD *)(a3 + 24);
                  long long v99 = *(_OWORD *)(a3 + 40);
                  uint64_t v35 = *(void *)(a4 + 16);
                  *(_OWORD *)a3 = *(_OWORD *)a4;
                  *(void *)(a3 + 16) = v35;
                  *(unsigned char *)(a4 + 23) = 0;
                  *(unsigned char *)a4 = 0;
                  *(_OWORD *)(a3 + 24) = *(_OWORD *)(a4 + 24);
                  long long v36 = *(_OWORD *)(a4 + 40);
                  long long v37 = *(_OWORD *)(a4 + 56);
                  uint64_t v38 = *(void *)(a4 + 88);
                  *(_OWORD *)(a3 + 72) = *(_OWORD *)(a4 + 72);
                  *(void *)(a3 + 88) = v38;
                  *(_OWORD *)(a3 + 56) = v37;
                  *(_OWORD *)(a3 + 40) = v36;
                  if (*(char *)(a4 + 23) < 0) {
                    operator delete(*(void **)a4);
                  }
                  *(void *)a4 = v33;
                  *(void *)(a4 + 8) = *(void *)v115;
                  *(void *)(a4 + 15) = *(void *)&v115[7];
                  *(unsigned char *)(a4 + 23) = v34;
                  *(_OWORD *)(a4 + 56) = v103;
                  *(_OWORD *)(a4 + 72) = v107;
                  *(void *)(a4 + 88) = v111;
                  *(_OWORD *)(a4 + 24) = v95;
                  *(_OWORD *)(a4 + 40) = v99;
                  unint64_t v39 = *(void *)(a3 + 56);
                  unint64_t v40 = *(void *)(a2 + 56);
                  if (v39 < v40) {
                    goto LABEL_31;
                  }
                  if (v39 <= v40)
                  {
                    unint64_t v68 = *(void *)(a3 + 40);
                    unint64_t v69 = *(void *)(a2 + 40);
                    if (v68 < v69) {
                      goto LABEL_31;
                    }
                    if (v68 <= v69)
                    {
                      unint64_t v70 = *(void *)(a3 + 32);
                      unint64_t v71 = *(void *)(a2 + 32);
                      if (v70 < v71) {
                        goto LABEL_31;
                      }
                      if (v70 <= v71)
                      {
                        int v72 = *(char *)(a2 + 23);
                        int v73 = *(char *)(a3 + 23);
                        if (v73 >= 0) {
                          size_t v74 = *(unsigned __int8 *)(a3 + 23);
                        }
                        else {
                          size_t v74 = *(void *)(a3 + 8);
                        }
                        if (v73 >= 0) {
                          long long v75 = (const void *)a3;
                        }
                        else {
                          long long v75 = *(const void **)a3;
                        }
                        if (v72 >= 0) {
                          size_t v76 = *(unsigned __int8 *)(a2 + 23);
                        }
                        else {
                          size_t v76 = *(void *)(a2 + 8);
                        }
                        if (v72 >= 0) {
                          long long v77 = (const void *)a2;
                        }
                        else {
                          long long v77 = *(const void **)a2;
                        }
                        if (v76 >= v74) {
                          size_t v78 = v74;
                        }
                        else {
                          size_t v78 = v76;
                        }
                        int v79 = memcmp(v75, v77, v78);
                        BOOL v80 = v74 < v76;
                        if (v79) {
                          BOOL v80 = v79 < 0;
                        }
                        if (v80)
                        {
LABEL_31:
                          uint64_t v41 = *(const void **)a2;
                          *(void *)long long v116 = *(void *)(a2 + 8);
                          *(void *)&v116[7] = *(void *)(a2 + 15);
                          char v42 = *(unsigned char *)(a2 + 23);
                          *(void *)(a2 + 16) = 0;
                          *(void *)(a2 + 8) = 0;
                          *(void *)a2 = 0;
                          long long v104 = *(_OWORD *)(a2 + 56);
                          long long v108 = *(_OWORD *)(a2 + 72);
                          uint64_t v112 = *(void *)(a2 + 88);
                          long long v96 = *(_OWORD *)(a2 + 24);
                          long long v100 = *(_OWORD *)(a2 + 40);
                          uint64_t v43 = *(void *)(a3 + 16);
                          *(_OWORD *)a2 = *(_OWORD *)a3;
                          *(void *)(a2 + 16) = v43;
                          *(unsigned char *)(a3 + 23) = 0;
                          *(unsigned char *)a3 = 0;
                          *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
                          long long v44 = *(_OWORD *)(a3 + 40);
                          long long v45 = *(_OWORD *)(a3 + 56);
                          uint64_t v46 = *(void *)(a3 + 88);
                          *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
                          *(void *)(a2 + 88) = v46;
                          *(_OWORD *)(a2 + 56) = v45;
                          *(_OWORD *)(a2 + 40) = v44;
                          if (*(char *)(a3 + 23) < 0) {
                            operator delete(*(void **)a3);
                          }
                          *(void *)a3 = v41;
                          *(void *)(a3 + 8) = *(void *)v116;
                          *(void *)(a3 + 15) = *(void *)&v116[7];
                          *(unsigned char *)(a3 + 23) = v42;
                          *(_OWORD *)(a3 + 56) = v104;
                          *(_OWORD *)(a3 + 72) = v108;
                          *(void *)(a3 + 88) = v112;
                          *(_OWORD *)(a3 + 24) = v96;
                          *(_OWORD *)(a3 + 40) = v100;
                          unint64_t v47 = *(void *)(a2 + 56);
                          unint64_t v48 = *(void *)(a1 + 56);
                          if (v47 < v48) {
                            goto LABEL_34;
                          }
                          if (v47 <= v48)
                          {
                            unint64_t v81 = *(void *)(a2 + 40);
                            unint64_t v82 = *(void *)(a1 + 40);
                            if (v81 < v82) {
                              goto LABEL_34;
                            }
                            if (v81 <= v82)
                            {
                              unint64_t v83 = *(void *)(a2 + 32);
                              unint64_t v84 = *(void *)(a1 + 32);
                              if (v83 < v84) {
                                goto LABEL_34;
                              }
                              if (v83 <= v84)
                              {
                                int v85 = *(char *)(a1 + 23);
                                int v86 = *(char *)(a2 + 23);
                                if (v86 >= 0) {
                                  size_t v87 = *(unsigned __int8 *)(a2 + 23);
                                }
                                else {
                                  size_t v87 = *(void *)(a2 + 8);
                                }
                                if (v86 >= 0) {
                                  long long v88 = (const void *)a2;
                                }
                                else {
                                  long long v88 = *(const void **)a2;
                                }
                                if (v85 >= 0) {
                                  size_t v89 = *(unsigned __int8 *)(a1 + 23);
                                }
                                else {
                                  size_t v89 = *(void *)(a1 + 8);
                                }
                                if (v85 >= 0) {
                                  int v90 = (const void *)a1;
                                }
                                else {
                                  int v90 = *(const void **)a1;
                                }
                                if (v89 >= v87) {
                                  size_t v91 = v87;
                                }
                                else {
                                  size_t v91 = v89;
                                }
                                int v92 = memcmp(v88, v90, v91);
                                BOOL v93 = v87 < v89;
                                if (v92) {
                                  BOOL v93 = v92 < 0;
                                }
                                if (v93)
                                {
LABEL_34:
                                  int v49 = *(const void **)a1;
                                  *(void *)long long v117 = *(void *)(a1 + 8);
                                  *(void *)&v117[7] = *(void *)(a1 + 15);
                                  char v50 = *(unsigned char *)(a1 + 23);
                                  *(void *)(a1 + 8) = 0;
                                  *(void *)(a1 + 16) = 0;
                                  *(void *)a1 = 0;
                                  long long v105 = *(_OWORD *)(a1 + 56);
                                  long long v109 = *(_OWORD *)(a1 + 72);
                                  uint64_t v113 = *(void *)(a1 + 88);
                                  long long v97 = *(_OWORD *)(a1 + 24);
                                  long long v101 = *(_OWORD *)(a1 + 40);
                                  uint64_t v51 = *(void *)(a2 + 16);
                                  *(_OWORD *)a1 = *(_OWORD *)a2;
                                  *(void *)(a1 + 16) = v51;
                                  *(unsigned char *)(a2 + 23) = 0;
                                  *(unsigned char *)a2 = 0;
                                  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
                                  long long v52 = *(_OWORD *)(a2 + 40);
                                  long long v53 = *(_OWORD *)(a2 + 56);
                                  uint64_t v54 = *(void *)(a2 + 88);
                                  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
                                  *(void *)(a1 + 88) = v54;
                                  *(_OWORD *)(a1 + 56) = v53;
                                  *(_OWORD *)(a1 + 40) = v52;
                                  if (*(char *)(a2 + 23) < 0) {
                                    operator delete(*(void **)a2);
                                  }
                                  *(void *)a2 = v49;
                                  *(void *)(a2 + 8) = *(void *)v117;
                                  *(void *)(a2 + 15) = *(void *)&v117[7];
                                  *(unsigned char *)(a2 + 23) = v50;
                                  *(_OWORD *)(a2 + 56) = v105;
                                  *(_OWORD *)(a2 + 72) = v109;
                                  *(void *)(a2 + 88) = v113;
                                  *(_OWORD *)(a2 + 24) = v97;
                                  *(_OWORD *)(a2 + 40) = v101;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

double sub_1C7004(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v90 = v4;
    uint64_t v91 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 5)))
    {
      uint64_t v11 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 5)) | 1;
      long long v12 = (long long *)(a1 + 96 * v11);
      uint64_t v13 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 5) + 2;
      if (v13 < a3)
      {
        unint64_t v14 = *(void *)(a1 + 96 * v11 + 56);
        unint64_t v15 = *((void *)v12 + 19);
        if (v14 < v15) {
          goto LABEL_28;
        }
        if (v14 <= v15)
        {
          unint64_t v16 = *(void *)(a1 + 96 * v11 + 40);
          unint64_t v17 = *((void *)v12 + 17);
          if (v16 < v17) {
            goto LABEL_28;
          }
          if (v16 <= v17)
          {
            unint64_t v18 = *(void *)(a1 + 96 * v11 + 32);
            unint64_t v19 = *((void *)v12 + 16);
            if (v18 < v19) {
              goto LABEL_28;
            }
            if (v18 <= v19)
            {
              int v20 = *((char *)v12 + 119);
              int v21 = *((char *)v12 + 23);
              if (v21 >= 0) {
                size_t v22 = *((unsigned __int8 *)v12 + 23);
              }
              else {
                size_t v22 = *((void *)v12 + 1);
              }
              if (v21 >= 0) {
                int v23 = (const void *)(a1 + 96 * v11);
              }
              else {
                int v23 = *(const void **)v12;
              }
              if (v20 >= 0) {
                size_t v24 = *((unsigned __int8 *)v12 + 119);
              }
              else {
                size_t v24 = *((void *)v12 + 13);
              }
              if (v20 >= 0) {
                long long v25 = v12 + 6;
              }
              else {
                long long v25 = (const void *)*((void *)v12 + 12);
              }
              if (v24 >= v22) {
                size_t v26 = v22;
              }
              else {
                size_t v26 = v24;
              }
              int v27 = memcmp(v23, v25, v26);
              BOOL v29 = v22 < v24;
              if (v27) {
                BOOL v29 = v27 < 0;
              }
              if (v29)
              {
LABEL_28:
                v12 += 6;
                uint64_t v11 = v13;
              }
            }
          }
        }
      }
      unint64_t v30 = *((void *)v12 + 7);
      unint64_t v31 = v7[7];
      if (v30 >= (unint64_t)v31)
      {
        if (v30 > (unint64_t)v31) {
          goto LABEL_53;
        }
        unint64_t v32 = *((void *)v12 + 5);
        uint64_t v33 = v7[5];
        if (v32 >= (unint64_t)v33)
        {
          if (v32 > (unint64_t)v33) {
            goto LABEL_53;
          }
          unint64_t v34 = *((void *)v12 + 4);
          uint64_t v35 = v7[4];
          if (v34 >= (unint64_t)v35)
          {
            if (v34 > (unint64_t)v35) {
              goto LABEL_53;
            }
            int v36 = *((char *)v7 + 23);
            int v37 = *((char *)v12 + 23);
            if (v37 >= 0) {
              size_t v38 = *((unsigned __int8 *)v12 + 23);
            }
            else {
              size_t v38 = *((void *)v12 + 1);
            }
            if (v37 >= 0) {
              unint64_t v39 = v12;
            }
            else {
              unint64_t v39 = *(const void **)v12;
            }
            if (v36 >= 0) {
              size_t v40 = *((unsigned __int8 *)v7 + 23);
            }
            else {
              size_t v40 = (size_t)v7[1];
            }
            if (v36 >= 0) {
              uint64_t v41 = v7;
            }
            else {
              uint64_t v41 = *v7;
            }
            if (v40 >= v38) {
              size_t v42 = v38;
            }
            else {
              size_t v42 = v40;
            }
            int v43 = memcmp(v39, v41, v42);
            BOOL v44 = v38 < v40;
            if (v43) {
              BOOL v44 = v43 < 0;
            }
            if (!v44)
            {
LABEL_53:
              long long v83 = *(_OWORD *)v7;
              unint64_t v84 = v7[2];
              v7[1] = 0;
              v7[2] = 0;
              *unint64_t v7 = 0;
              long long v86 = *(_OWORD *)(v7 + 5);
              long long v87 = *(_OWORD *)(v7 + 7);
              long long v88 = *(_OWORD *)(v7 + 9);
              size_t v89 = v7[11];
              long long v85 = *(_OWORD *)(v7 + 3);
              while (1)
              {
                long long v45 = v12;
                if (*((char *)v7 + 23) < 0) {
                  operator delete((void *)*v7);
                }
                long long v46 = *v12;
                v7[2] = (const void *)*((void *)v12 + 2);
                *(_OWORD *)unint64_t v7 = v46;
                *((unsigned char *)v12 + 23) = 0;
                *(unsigned char *)long long v12 = 0;
                *(_OWORD *)(v7 + 3) = *(long long *)((char *)v12 + 24);
                long long v47 = *(long long *)((char *)v12 + 40);
                long long v48 = *(long long *)((char *)v12 + 56);
                long long v49 = *(long long *)((char *)v12 + 72);
                v7[11] = (const void *)*((void *)v12 + 11);
                *(_OWORD *)(v7 + 9) = v49;
                *(_OWORD *)(v7 + 7) = v48;
                *(_OWORD *)(v7 + 5) = v47;
                if (v9 < v11) {
                  break;
                }
                uint64_t v50 = (2 * v11) | 1;
                long long v12 = (long long *)(a1 + 96 * v50);
                if (2 * v11 + 2 < a3)
                {
                  unint64_t v51 = *(void *)(a1 + 96 * v50 + 56);
                  unint64_t v52 = *((void *)v12 + 19);
                  if (v51 < v52) {
                    goto LABEL_59;
                  }
                  if (v51 <= v52)
                  {
                    unint64_t v64 = *(void *)(a1 + 96 * v50 + 40);
                    unint64_t v65 = *((void *)v12 + 17);
                    if (v64 < v65) {
                      goto LABEL_59;
                    }
                    if (v64 <= v65)
                    {
                      unint64_t v66 = *(void *)(a1 + 96 * v50 + 32);
                      unint64_t v67 = *((void *)v12 + 16);
                      if (v66 < v67) {
                        goto LABEL_59;
                      }
                      if (v66 <= v67)
                      {
                        size_t v68 = *((unsigned __int8 *)v12 + 119);
                        int v69 = (char)v68;
                        size_t v70 = *((unsigned __int8 *)v12 + 23);
                        int v71 = (char)v70;
                        if ((v70 & 0x80u) != 0) {
                          size_t v70 = *((void *)v12 + 1);
                        }
                        if (v71 >= 0) {
                          int v72 = (const void *)(a1 + 96 * v50);
                        }
                        else {
                          int v72 = *(const void **)v12;
                        }
                        if ((v68 & 0x80u) != 0) {
                          size_t v68 = *((void *)v12 + 13);
                        }
                        size_t v81 = v70;
                        size_t v82 = v68;
                        if (v69 >= 0) {
                          int v73 = v12 + 6;
                        }
                        else {
                          int v73 = (const void *)*((void *)v12 + 12);
                        }
                        if (v68 >= v70) {
                          size_t v74 = v70;
                        }
                        else {
                          size_t v74 = v68;
                        }
                        int v75 = memcmp(v72, v73, v74);
                        BOOL v76 = v81 < v82;
                        if (v75) {
                          BOOL v76 = v75 < 0;
                        }
                        if (v76)
                        {
LABEL_59:
                          v12 += 6;
                          uint64_t v50 = 2 * v11 + 2;
                        }
                      }
                    }
                  }
                }
                unint64_t v53 = *((void *)v12 + 7);
                if (v53 < (unint64_t)v87) {
                  break;
                }
                unint64_t v7 = (const void **)v45;
                uint64_t v11 = v50;
                if (v53 <= (unint64_t)v87)
                {
                  unint64_t v54 = *((void *)v12 + 5);
                  if (v54 < (unint64_t)v86) {
                    break;
                  }
                  unint64_t v7 = (const void **)v45;
                  uint64_t v11 = v50;
                  if (v54 <= (unint64_t)v86)
                  {
                    unint64_t v55 = *((void *)v12 + 4);
                    if (v55 < *((void *)&v85 + 1)) {
                      break;
                    }
                    unint64_t v7 = (const void **)v45;
                    uint64_t v11 = v50;
                    if (v55 <= *((void *)&v85 + 1))
                    {
                      int v56 = *((char *)v12 + 23);
                      if (v56 >= 0) {
                        size_t v57 = *((unsigned __int8 *)v12 + 23);
                      }
                      else {
                        size_t v57 = *((void *)v12 + 1);
                      }
                      if (v56 >= 0) {
                        unint64_t v58 = v12;
                      }
                      else {
                        unint64_t v58 = *(const void **)v12;
                      }
                      if (SHIBYTE(v84) >= 0) {
                        size_t v59 = HIBYTE(v84);
                      }
                      else {
                        size_t v59 = *((void *)&v83 + 1);
                      }
                      if (SHIBYTE(v84) >= 0) {
                        int v60 = &v83;
                      }
                      else {
                        int v60 = (long long *)v83;
                      }
                      if (v59 >= v57) {
                        size_t v61 = v57;
                      }
                      else {
                        size_t v61 = v59;
                      }
                      int v62 = memcmp(v58, v60, v61);
                      BOOL v63 = v57 < v59;
                      if (v62) {
                        BOOL v63 = v62 < 0;
                      }
                      unint64_t v7 = (const void **)v45;
                      uint64_t v11 = v50;
                      if (v63) {
                        break;
                      }
                    }
                  }
                }
              }
              if (*((char *)v45 + 23) < 0) {
                operator delete(*(void **)v45);
              }
              long long v77 = v83;
              *((void *)v45 + 2) = v84;
              *long long v45 = v77;
              long long v79 = v87;
              long long v78 = v88;
              long long v80 = v86;
              *((void *)v45 + 11) = v89;
              *(long long *)((char *)v45 + 56) = v79;
              *(long long *)((char *)v45 + 72) = v78;
              *(long long *)((char *)v45 + 40) = v80;
              double result = *(double *)&v85;
              *(long long *)((char *)v45 + 24) = v85;
            }
          }
        }
      }
    }
  }
  return result;
}

__n128 sub_1C7468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = *(void *)a1;
    *(void *)size_t v24 = *(void *)(a1 + 8);
    *(void *)&v24[7] = *(void *)(a1 + 15);
    char v8 = *(unsigned char *)(a1 + 23);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    __n128 v21 = *(__n128 *)(a1 + 56);
    long long v22 = *(_OWORD *)(a1 + 72);
    uint64_t v23 = *(void *)(a1 + 88);
    long long v19 = *(_OWORD *)(a1 + 24);
    long long v20 = *(_OWORD *)(a1 + 40);
    uint64_t v9 = sub_1C7664((long long *)a1, a3, a4);
    char v10 = v9;
    uint64_t v11 = (void **)(a2 - 96);
    int v12 = *((char *)v9 + 23);
    if (v9 == (long long *)(a2 - 96))
    {
      if (v12 < 0) {
        operator delete(*(void **)v9);
      }
      *(long long *)((char *)v10 + 40) = v20;
      __n128 result = v21;
      *(long long *)((char *)v10 + 56) = (__int128)v21;
      *(long long *)((char *)v10 + 72) = v22;
      *(void *)char v10 = v7;
      *((void *)v10 + 1) = *(void *)v24;
      *(void *)((char *)v10 + 15) = *(void *)&v24[7];
      *((unsigned char *)v10 + 23) = v8;
      *((void *)v10 + 11) = v23;
      *(long long *)((char *)v10 + 24) = v19;
    }
    else
    {
      if (v12 < 0) {
        operator delete(*(void **)v9);
      }
      long long v13 = *(_OWORD *)v11;
      *((void *)v10 + 2) = *(void *)(a2 - 80);
      *char v10 = v13;
      *(unsigned char *)(a2 - 73) = 0;
      *(unsigned char *)(a2 - 96) = 0;
      *(long long *)((char *)v10 + 24) = *(_OWORD *)(a2 - 72);
      long long v14 = *(_OWORD *)(a2 - 56);
      long long v15 = *(_OWORD *)(a2 - 40);
      long long v16 = *(_OWORD *)(a2 - 24);
      *((void *)v10 + 11) = *(void *)(a2 - 8);
      *(long long *)((char *)v10 + 72) = v16;
      *(long long *)((char *)v10 + 56) = v15;
      *(long long *)((char *)v10 + 40) = v14;
      uint64_t v17 = (uint64_t)(v10 + 6);
      if (*(char *)(a2 - 73) < 0) {
        operator delete(*v11);
      }
      *(void *)(a2 - 96) = v7;
      *(void *)(a2 - 88) = *(void *)v24;
      *(void *)(a2 - 81) = *(void *)&v24[7];
      *(unsigned char *)(a2 - 73) = v8;
      *(__n128 *)(a2 - 40) = v21;
      *(_OWORD *)(a2 - 24) = v22;
      *(void *)(a2 - 8) = v23;
      *(_OWORD *)(a2 - 72) = v19;
      *(_OWORD *)(a2 - 56) = v20;
      result.n128_u64[0] = sub_1C77FC(a1, v17, a3, 0xAAAAAAAAAAAAAAABLL * ((v17 - a1) >> 5)).n128_u64[0];
    }
  }
  return result;
}

void sub_1C764C(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_1C7664(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v13 = v5 + 1;
    char v8 = &a1[6 * v5 + 6];
    uint64_t v14 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v15 = v14 + 2;
    if (v14 + 2 < a3)
    {
      unint64_t v16 = *((void *)&a1[6 * v13 + 3] + 1);
      unint64_t v17 = *((void *)v8 + 19);
      if (v16 < v17) {
        goto LABEL_4;
      }
      if (v16 <= v17)
      {
        unint64_t v18 = *((void *)&a1[6 * v13 + 2] + 1);
        unint64_t v19 = *((void *)v8 + 17);
        if (v18 < v19) {
          goto LABEL_4;
        }
        if (v18 <= v19)
        {
          unint64_t v20 = *(void *)&a1[6 * v13 + 2];
          unint64_t v21 = *((void *)v8 + 16);
          if (v20 < v21) {
            goto LABEL_4;
          }
          if (v20 <= v21)
          {
            int v22 = *((char *)v8 + 119);
            int v23 = *((char *)v8 + 23);
            if (v23 >= 0) {
              size_t v24 = *((unsigned __int8 *)v8 + 23);
            }
            else {
              size_t v24 = *((void *)v8 + 1);
            }
            if (v23 >= 0) {
              long long v25 = v8;
            }
            else {
              long long v25 = *(const void **)v8;
            }
            if (v22 >= 0) {
              size_t v26 = *((unsigned __int8 *)v8 + 119);
            }
            else {
              size_t v26 = *((void *)v8 + 13);
            }
            if (v22 >= 0) {
              int v27 = v8 + 6;
            }
            else {
              int v27 = (const void *)*((void *)v8 + 12);
            }
            if (v26 >= v24) {
              size_t v28 = v24;
            }
            else {
              size_t v28 = v26;
            }
            int v29 = memcmp(v25, v27, v28);
            BOOL v30 = v24 < v26;
            if (v29) {
              BOOL v30 = v29 < 0;
            }
            if (v30)
            {
LABEL_4:
              v8 += 6;
              uint64_t v5 = v15;
            }
          }
        }
      }
    }
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v9 = *v8;
    *((void *)a1 + 2) = *((void *)v8 + 2);
    *a1 = v9;
    *((unsigned char *)v8 + 23) = 0;
    *(unsigned char *)char v8 = 0;
    *(long long *)((char *)a1 + 24) = *(long long *)((char *)v8 + 24);
    long long v10 = *(long long *)((char *)v8 + 40);
    long long v11 = *(long long *)((char *)v8 + 56);
    long long v12 = *(long long *)((char *)v8 + 72);
    *((void *)a1 + 11) = *((void *)v8 + 11);
    *(long long *)((char *)a1 + 72) = v12;
    *(long long *)((char *)a1 + 56) = v11;
    *(long long *)((char *)a1 + 40) = v10;
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

__n128 sub_1C77FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v56 = v4;
    uint64_t v57 = v5;
    unint64_t v9 = v6 >> 1;
    long long v10 = (const void **)(a1 + 96 * (v6 >> 1));
    long long v11 = (const void **)(a2 - 96);
    long long v12 = v10[7];
    unint64_t v13 = *(void *)(a2 - 40);
    if ((unint64_t)v12 < v13) {
      goto LABEL_26;
    }
    if ((unint64_t)v12 <= v13)
    {
      unint64_t v14 = *(void *)(a1 + 96 * v9 + 40);
      unint64_t v15 = *(void *)(a2 - 56);
      if (v14 < v15) {
        goto LABEL_26;
      }
      if (v14 <= v15)
      {
        unint64_t v16 = *(void *)(a1 + 96 * v9 + 32);
        unint64_t v17 = *(void *)(a2 - 64);
        if (v16 < v17) {
          goto LABEL_26;
        }
        if (v16 <= v17)
        {
          int v18 = *(char *)(a2 - 73);
          int v19 = *((char *)v10 + 23);
          if (v19 >= 0) {
            size_t v20 = *((unsigned __int8 *)v10 + 23);
          }
          else {
            size_t v20 = (size_t)v10[1];
          }
          if (v19 >= 0) {
            unint64_t v21 = v10;
          }
          else {
            unint64_t v21 = *v10;
          }
          if (v18 >= 0) {
            size_t v22 = *(unsigned __int8 *)(a2 - 73);
          }
          else {
            size_t v22 = *(void *)(a2 - 88);
          }
          if (v18 >= 0) {
            int v23 = (const void *)(a2 - 96);
          }
          else {
            int v23 = *(const void **)(a2 - 96);
          }
          if (v22 >= v20) {
            size_t v24 = v20;
          }
          else {
            size_t v24 = v22;
          }
          int v25 = memcmp(v21, v23, v24);
          BOOL v27 = v20 < v22;
          if (v25) {
            BOOL v27 = v25 < 0;
          }
          if (v27)
          {
LABEL_26:
            uint64_t v50 = v11[2];
            long long v49 = *(_OWORD *)v11;
            v11[1] = 0;
            v11[2] = 0;
            *long long v11 = 0;
            size_t v28 = &v49;
            long long v53 = *(_OWORD *)(a2 - 40);
            __n128 v52 = *(__n128 *)(a2 - 56);
            long long v51 = *(_OWORD *)(a2 - 72);
            long long v54 = *(_OWORD *)(a2 - 24);
            unint64_t v55 = *(const void **)(a2 - 8);
            unint64_t v29 = v53;
            unint64_t v30 = v52.n128_u64[0];
            unint64_t v48 = *((void *)&v51 + 1);
            if (SHIBYTE(v50) >= 0) {
              size_t v31 = HIBYTE(v50);
            }
            else {
              size_t v31 = *((void *)&v49 + 1);
            }
            if (SHIBYTE(v50) < 0) {
              size_t v28 = (long long *)v49;
            }
            __s2 = v28;
            while (1)
            {
              unint64_t v32 = v10;
              if (*((char *)v11 + 23) < 0) {
                operator delete((void *)*v11);
              }
              long long v33 = *(_OWORD *)v10;
              v11[2] = v10[2];
              *(_OWORD *)long long v11 = v33;
              *((unsigned char *)v10 + 23) = 0;
              *(unsigned char *)long long v10 = 0;
              *(_OWORD *)(v11 + 3) = *(_OWORD *)(v10 + 3);
              long long v34 = *(_OWORD *)(v10 + 5);
              long long v35 = *(_OWORD *)(v10 + 7);
              long long v36 = *(_OWORD *)(v10 + 9);
              v11[11] = v10[11];
              *(_OWORD *)(v11 + 9) = v36;
              *(_OWORD *)(v11 + 7) = v35;
              *(_OWORD *)(v11 + 5) = v34;
              if (!v9) {
                break;
              }
              unint64_t v9 = (v9 - 1) >> 1;
              long long v10 = (const void **)(a1 + 96 * v9);
              int v37 = v10[7];
              long long v11 = v32;
              if ((unint64_t)v37 >= v29)
              {
                if ((unint64_t)v37 > v29) {
                  break;
                }
                unint64_t v38 = *(void *)(a1 + 96 * v9 + 40);
                long long v11 = v32;
                if (v38 >= v30)
                {
                  if (v38 > v30) {
                    break;
                  }
                  unint64_t v39 = *(void *)(a1 + 96 * v9 + 32);
                  long long v11 = v32;
                  if (v39 >= v48)
                  {
                    if (v39 > v48) {
                      break;
                    }
                    int v40 = *((char *)v10 + 23);
                    if (v40 >= 0) {
                      size_t v41 = *((unsigned __int8 *)v10 + 23);
                    }
                    else {
                      size_t v41 = (size_t)v10[1];
                    }
                    if (v40 >= 0) {
                      size_t v42 = (const void *)(a1 + 96 * v9);
                    }
                    else {
                      size_t v42 = *v10;
                    }
                    if (v31 >= v41) {
                      size_t v43 = v41;
                    }
                    else {
                      size_t v43 = v31;
                    }
                    int v44 = memcmp(v42, __s2, v43);
                    BOOL v45 = v41 < v31;
                    if (v44) {
                      BOOL v45 = v44 < 0;
                    }
                    long long v11 = v32;
                    if (!v45) {
                      break;
                    }
                  }
                }
              }
            }
            if (*((char *)v32 + 23) < 0) {
              operator delete((void *)*v32);
            }
            *(_OWORD *)unint64_t v32 = v49;
            v32[2] = v50;
            long long v46 = v54;
            *(_OWORD *)(v32 + 7) = v53;
            *(_OWORD *)(v32 + 9) = v46;
            v32[11] = v55;
            __n128 result = v52;
            *(_OWORD *)(v32 + 3) = v51;
            *(__n128 *)(v32 + 5) = result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C7AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = off_2426CF0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  if (a2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) == 17)
    {
      *(unsigned char *)(a1 + 40) = 0;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7)
      {
LABEL_10:
        *(unsigned char *)(a1 + 41) = 1;
        uint64_t v8 = *(void *)(a1 + 24);
        if (v8) {
          goto LABEL_11;
        }
LABEL_15:
        *(unsigned char *)(a1 + 42) = 1;
        uint64_t v9 = *(void *)(a1 + 32);
        if (v9) {
          goto LABEL_16;
        }
LABEL_20:
        *(unsigned char *)(a1 + 43) = 1;
        return a1;
      }
    }
    else
    {
      *(unsigned char *)(a1 + 40) = (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 18;
      uint64_t v7 = *(void *)(a1 + 16);
      if (!v7) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    *(unsigned char *)(a1 + 40) = 1;
    uint64_t v7 = *(void *)(a1 + 16);
    if (!v7) {
      goto LABEL_10;
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 32))(v7) == 17)
  {
    *(unsigned char *)(a1 + 41) = 0;
    uint64_t v8 = *(void *)(a1 + 24);
    if (v8) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  *(unsigned char *)(a1 + 41) = (*(unsigned int (**)(uint64_t))(*(void *)v7 + 32))(v7) != 18;
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    goto LABEL_15;
  }
LABEL_11:
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) != 17)
  {
    *(unsigned char *)(a1 + 42) = (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) != 18;
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  *(unsigned char *)(a1 + 42) = 0;
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9) {
    goto LABEL_20;
  }
LABEL_16:
  *(unsigned char *)(a1 + 43) = (*(unsigned int (**)(uint64_t))(*(void *)v9 + 32))(v9) != 17
                     && (*(unsigned int (**)(uint64_t))(*(void *)v9 + 32))(v9) != 18;
  return a1;
}

void sub_1C7D40(uint64_t a1)
{
  sub_1C7F0C(a1);

  operator delete();
}

double sub_1C7D78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  double v4 = (*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  if (v3)
  {
    if (v4 != 0.0)
    {
      do
      {
        double v5 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
        (*(void (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24));
      }
      while ((*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) != 0.0);
      return v5;
    }
  }
  else if (v4 != 0.0)
  {
    do
      double v5 = (*(double (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
    while ((*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) != 0.0);
    return v5;
  }
  return 0.0;
}

uint64_t sub_1C7F04()
{
  return 12;
}

uint64_t sub_1C7F0C(uint64_t a1)
{
  *(void *)a1 = off_2426CF0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 && *(unsigned char *)(a1 + 41))
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4 && *(unsigned char *)(a1 + 42))
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 && *(unsigned char *)(a1 + 43))
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    *(void *)(a1 + 32) = 0;
  }
  return a1;
}

uint64_t sub_1C802C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  if (*(void *)a2 == v2) {
    return 0;
  }
  unint64_t v5 = v2 - (void)v3;
  unint64_t v6 = (v2 - (uint64_t)v3) >> 3;
  if (v6 <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = (v2 - (uint64_t)v3) >> 3;
  }
  if (!*v3) {
    goto LABEL_21;
  }
  uint64_t v8 = 1;
  do
  {
    unint64_t v9 = v8;
    if (v7 == v8) {
      break;
    }
  }
  while (v3[v8++]);
  if ((v5 & 8) == 0 || v5 < 0x18 || v9 < v6)
  {
LABEL_21:
    unint64_t v14 = 0;
    while (1)
    {
      uint64_t v15 = v3[v14];
      if (!v15 || (*(unsigned int (**)(uint64_t))(*(void *)v15 + 32))(v15) == 17) {
        goto LABEL_23;
      }
      uint64_t v16 = v3[v14];
      if (v16)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 32))(v16) == 18) {
          goto LABEL_23;
        }
        uint64_t v17 = v3[v14];
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
      }
      v3[v14] = 0;
LABEL_23:
      ++v14;
      uint64_t v3 = *(uint64_t **)a2;
      if (v14 >= (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3)
      {
        uint64_t v18 = 0;
        *(void *)(a2 + 8) = v3;
        return v18;
      }
    }
  }
  uint64_t v11 = *v3;
  if (!*v3)
  {
LABEL_17:
    switch((unint64_t)(((v2 - (uint64_t)v3) >> 3) - 1) >> 1)
    {
      case 1uLL:
        sub_1C84D4();
      case 2uLL:
        sub_1C855C();
      case 3uLL:
        sub_1C85E4();
      case 4uLL:
        sub_1C866C();
      case 5uLL:
        sub_1C86F4();
      case 6uLL:
        sub_1C877C();
      case 7uLL:
        sub_1C8804();
      default:
        sub_1C888C();
    }
  }
  unint64_t v12 = 1;
  while (1)
  {
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 32))(v11);
    uint64_t v3 = *(uint64_t **)a2;
    uint64_t v2 = *(void *)(a2 + 8);
    if (v13 != 2) {
      goto LABEL_17;
    }
    if (v12 >= (v2 - (uint64_t)v3) >> 3) {
      break;
    }
    uint64_t v11 = v3[v12++];
    if (!v11) {
      goto LABEL_17;
    }
  }
  if ((unint64_t)(v2 - (void)v3) < 0x10) {
    goto LABEL_60;
  }
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  while (1)
  {
    uint64_t v18 = v3[v20 + 1];
    double v22 = (*(double (**)(uint64_t))(*(void *)v3[v20] + 16))(v3[v20]);
    uint64_t v2 = *(void *)(a2 + 8);
    if (v22 != 0.0) {
      break;
    }
    ++v21;
    uint64_t v3 = *(uint64_t **)a2;
    v20 += 2;
    if (v21 >= (unint64_t)((v2 - *(void *)a2) >> 3) >> 1) {
      goto LABEL_60;
    }
  }
  if (!v18) {
LABEL_60:
  }
    uint64_t v18 = *(void *)(v2 - 8);
  int v23 = *(uint64_t **)a2;
  if (v2 != *(void *)a2)
  {
    unint64_t v24 = 0;
    do
    {
      uint64_t v25 = v23[v24];
      if (v25) {
        BOOL v26 = v25 == v18;
      }
      else {
        BOOL v26 = 1;
      }
      if (!v26
        && (*(unsigned int (**)(uint64_t))(*(void *)v25 + 32))(v25) != 17
        && (*(unsigned int (**)(uint64_t))(*(void *)v25 + 32))(v25) != 18)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      }
      ++v24;
      int v23 = *(uint64_t **)a2;
    }
    while (v24 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return v18;
}

void sub_1C84D4()
{
}

void sub_1C8538()
{
}

void sub_1C855C()
{
}

void sub_1C85C0()
{
}

void sub_1C85E4()
{
}

void sub_1C8648()
{
}

void sub_1C866C()
{
}

void sub_1C86D0()
{
}

void sub_1C86F4()
{
}

void sub_1C8758()
{
}

void sub_1C877C()
{
}

void sub_1C87E0()
{
}

void sub_1C8804()
{
}

void sub_1C8868()
{
}

void sub_1C888C()
{
}

void sub_1C88D4()
{
}

uint64_t sub_1C88F8(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)a1 = off_2426DA8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  uint64_t v4 = a2[1] - *a2;
  if ((v4 & 8) == 0) {
    return a1;
  }
  sub_D2BFC((void **)(a1 + 8), v4 >> 3);
  unint64_t v6 = *(unsigned char **)(a1 + 32);
  uint64_t v7 = *(unsigned char **)(a1 + 40);
  uint64_t v8 = a2[1] - *a2;
  unint64_t v9 = v8 >> 3;
  unint64_t v10 = v7 - v6;
  size_t v11 = (v8 >> 3) - (v7 - v6);
  if (v8 >> 3 > (unint64_t)(v7 - v6))
  {
    uint64_t v12 = *(void *)(a1 + 48);
    if (v12 - (uint64_t)v7 >= v11)
    {
      bzero(*(void **)(a1 + 40), (v8 >> 3) - (v7 - v6));
      *(void *)(a1 + 40) = &v7[v11];
      goto LABEL_32;
    }
    if (v8 < 0) {
      sub_2E00();
    }
    unint64_t v13 = v12 - (void)v6;
    unint64_t v14 = 2 * (v12 - (void)v6);
    if (v14 <= v9) {
      unint64_t v14 = v9;
    }
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v14;
    }
    uint64_t v16 = (char *)operator new(v15);
    unint64_t v38 = &v16[v15];
    uint64_t v17 = v16;
    int v37 = &v16[v9];
    uint64_t v18 = &v16[v10];
    bzero(&v16[v10], v11);
    if (v7 == v6) {
      goto LABEL_30;
    }
    if (v10 >= 8 && (unint64_t)(v6 - v17) >= 0x20)
    {
      if (v10 < 0x20)
      {
        unint64_t v19 = 0;
        goto LABEL_22;
      }
      unint64_t v19 = v10 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v20 = (long long *)(v7 - 16);
      unint64_t v21 = &v17[v7 - 16 - v6];
      unint64_t v22 = v10 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v23 = *v20;
        *((_OWORD *)v21 - 1) = *(v20 - 1);
        *(_OWORD *)unint64_t v21 = v23;
        v21 -= 32;
        v20 -= 2;
        v22 -= 32;
      }
      while (v22);
      if (v10 == v19) {
        goto LABEL_29;
      }
      if ((v10 & 0x18) != 0)
      {
LABEL_22:
        v18 -= v10 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v24 = &v7[-v19 - 8];
        int64_t v25 = v24 - v6;
        unint64_t v26 = v19 - (v10 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v27 = *(void *)v24;
          v24 -= 8;
          *(void *)&v17[v25] = v27;
          v25 -= 8;
          v26 += 8;
        }
        while (v26);
        v7 -= v10 & 0xFFFFFFFFFFFFFFF8;
        if (v10 == (v10 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_29;
        }
        goto LABEL_27;
      }
      v18 -= v19;
      v7 -= v19;
    }
LABEL_27:
    size_t v28 = v18 - 1;
    do
    {
      char v29 = *--v7;
      *v28-- = v29;
    }
    while (v7 != v6);
LABEL_29:
    uint64_t v18 = v17;
LABEL_30:
    *(void *)(a1 + 32) = v18;
    *(void *)(a1 + 40) = v37;
    *(void *)(a1 + 48) = v38;
    if (v6) {
      operator delete(v6);
    }
    goto LABEL_32;
  }
  if (v8 >> 3 < (unint64_t)(v7 - v6)) {
    *(void *)(a1 + 40) = &v6[v9];
  }
LABEL_32:
  uint64_t v30 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v31 = 0;
    while (1)
    {
      uint64_t v33 = *(void *)(v30 + 8 * v31);
      uint64_t v34 = *v3;
      if (!v33) {
        break;
      }
      *(void *)(v34 + 8 * v31) = v33;
      uint64_t v35 = *(void *)(*v3 + 8 * v31);
      if (v35) {
        BOOL v32 = (*(unsigned int (**)(void))(*(void *)v35 + 32))(*(void *)(*v3 + 8 * v31)) != 17
      }
           && (*(unsigned int (**)(uint64_t))(*(void *)v35 + 32))(v35) != 18;
      else {
        BOOL v32 = 1;
      }
      *(unsigned char *)(*(void *)(a1 + 32) + v31++) = v32;
      uint64_t v30 = *a2;
      if (v31 >= (a2[1] - *a2) >> 3) {
        return a1;
      }
    }
    *(void *)(a1 + 16) = v34;
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
  }
  return a1;
}

void sub_1C8BFC(_Unwind_Exception *exception_object)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
    unint64_t v6 = *v2;
    if (!*v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v6 = *v2;
    if (!*v2) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 16) = v6;
  operator delete(v6);
  _Unwind_Resume(exception_object);
}

void *sub_1C8C3C(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  unint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1C8D14(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  unint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t sub_1C8E0C(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  double v2 = (*(double (**)(void))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8));
  uint64_t v3 = v1 + 1;
  uint64_t v4 = 8;
  if (v2 == 0.0) {
    uint64_t v4 = -8;
  }
  else {
    uint64_t v3 = v1;
  }
  uint64_t v5 = *(uint64_t (**)(void))(**(void **)(*v3 + v4) + 16);

  return v5();
}

uint64_t sub_1C8EA8()
{
  return 13;
}

void *sub_1C8EB0(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  double v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        double v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  unint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1C8F88(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  double v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        double v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  unint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

double sub_1C9080(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v1 == v2) {
    return NAN;
  }
  uint64_t v3 = (v2 - v1) >> 3;
  unint64_t v4 = v3 - 1;
  if (v3 == 1)
  {
LABEL_7:
    uint64_t v8 = *(void *)(v1 + 8 * v4);
  }
  else
  {
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = (void *)(*(void *)(a1 + 8) + 8 * v6);
      uint64_t v8 = v7[1];
      if ((*(double (**)(void))(*(void *)*v7 + 16))() != 0.0) {
        break;
      }
      v6 += 2;
      if (v6 >= v4)
      {
        uint64_t v1 = *(void *)(a1 + 8);
        goto LABEL_7;
      }
    }
  }
  unint64_t v9 = *(void (**)(uint64_t))(*(void *)v8 + 16);

  v9(v8);
  return result;
}

void *sub_1C9160(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  unint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1C9238(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  uint64_t v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        uint64_t v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  unint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t sub_1C9330(uint64_t a1)
{
  double v2 = (*(double (**)(void))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8));
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2 == 0.0)
  {
    if ((*(double (**)(void))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16)) == 0.0) {
      uint64_t v4 = *(void *)(a1 + 16) - 8;
    }
    else {
      uint64_t v4 = *(void *)(a1 + 8) + 24;
    }
  }
  else
  {
    uint64_t v4 = v3 + 8;
  }
  uint64_t v5 = *(uint64_t (**)(void))(**(void **)v4 + 16);

  return v5();
}

void *sub_1C9408(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  double v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        double v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  unint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1C94E0(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  double v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        double v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  unint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t sub_1C95D8(uint64_t a1)
{
  double v2 = (*(double (**)(void))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8));
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2 == 0.0)
  {
    double v5 = (*(double (**)(void))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16));
    uint64_t v6 = *(void *)(a1 + 8);
    if (v5 == 0.0)
    {
      if ((*(double (**)(void))(**(void **)(v6 + 32) + 16))(*(void *)(v6 + 32)) == 0.0) {
        uint64_t v4 = *(void *)(a1 + 16) - 8;
      }
      else {
        uint64_t v4 = *(void *)(a1 + 8) + 40;
      }
    }
    else
    {
      uint64_t v4 = v6 + 24;
    }
  }
  else
  {
    uint64_t v4 = v3 + 8;
  }
  uint64_t v7 = *(uint64_t (**)(void))(**(void **)v4 + 16);

  return v7();
}

void *sub_1C96EC(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  double v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        double v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1C97C4(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  double v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        double v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t sub_1C98BC(uint64_t a1)
{
  double v2 = (*(double (**)(void))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8));
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2 == 0.0)
  {
    double v5 = (*(double (**)(void))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16));
    uint64_t v6 = *(void *)(a1 + 8);
    if (v5 == 0.0)
    {
      double v7 = (*(double (**)(void))(**(void **)(v6 + 32) + 16))(*(void *)(v6 + 32));
      uint64_t v8 = *(void *)(a1 + 8);
      if (v7 == 0.0)
      {
        if ((*(double (**)(void))(**(void **)(v8 + 48) + 16))(*(void *)(v8 + 48)) == 0.0) {
          uint64_t v4 = *(void *)(a1 + 16) - 8;
        }
        else {
          uint64_t v4 = *(void *)(a1 + 8) + 56;
        }
      }
      else
      {
        uint64_t v4 = v8 + 40;
      }
    }
    else
    {
      uint64_t v4 = v6 + 24;
    }
  }
  else
  {
    uint64_t v4 = v3 + 8;
  }
  unint64_t v9 = *(uint64_t (**)(void))(**(void **)v4 + 16);

  return v9();
}

void *sub_1C9A0C(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  double v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        double v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1C9AE4(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  double v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        double v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t sub_1C9BDC(uint64_t a1)
{
  double v2 = (*(double (**)(void))(***(void ***)(a1 + 8) + 16))(**(void **)(a1 + 8));
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2 == 0.0)
  {
    double v5 = (*(double (**)(void))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16));
    uint64_t v6 = *(void *)(a1 + 8);
    if (v5 == 0.0)
    {
      double v7 = (*(double (**)(void))(**(void **)(v6 + 32) + 16))(*(void *)(v6 + 32));
      uint64_t v8 = *(void *)(a1 + 8);
      if (v7 == 0.0)
      {
        double v9 = (*(double (**)(void))(**(void **)(v8 + 48) + 16))(*(void *)(v8 + 48));
        uint64_t v10 = *(void *)(a1 + 8);
        if (v9 == 0.0)
        {
          if ((*(double (**)(void))(**(void **)(v10 + 64) + 16))(*(void *)(v10 + 64)) == 0.0) {
            uint64_t v4 = *(void *)(a1 + 16) - 8;
          }
          else {
            uint64_t v4 = *(void *)(a1 + 8) + 72;
          }
        }
        else
        {
          uint64_t v4 = v10 + 56;
        }
      }
      else
      {
        uint64_t v4 = v8 + 40;
      }
    }
    else
    {
      uint64_t v4 = v6 + 24;
    }
  }
  else
  {
    uint64_t v4 = v3 + 8;
  }
  size_t v11 = *(uint64_t (**)(void))(**(void **)v4 + 16);

  return v11();
}

void *sub_1C9D68(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  double v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        double v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1C9E40(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  double v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        double v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t sub_1C9F38(uint64_t a1)
{
  return sub_1C9F40((void **)(a1 + 8));
}

uint64_t sub_1C9F40(void **a1)
{
  double v2 = (*(double (**)(void))(*(void *)**a1 + 16))(**a1);
  uint64_t v3 = (uint64_t)*a1;
  if (v2 == 0.0)
  {
    double v5 = (*(double (**)(void))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16));
    uint64_t v6 = (uint64_t)*a1;
    if (v5 == 0.0)
    {
      double v7 = (*(double (**)(void))(**(void **)(v6 + 32) + 16))(*(void *)(v6 + 32));
      uint64_t v8 = (uint64_t)*a1;
      if (v7 == 0.0)
      {
        double v9 = (*(double (**)(void))(**(void **)(v8 + 48) + 16))(*(void *)(v8 + 48));
        uint64_t v10 = (uint64_t)*a1;
        if (v9 == 0.0)
        {
          double v11 = (*(double (**)(void))(**(void **)(v10 + 64) + 16))(*(void *)(v10 + 64));
          uint64_t v12 = (uint64_t)*a1;
          if (v11 == 0.0)
          {
            if ((*(double (**)(void))(**(void **)(v12 + 80) + 16))(*(void *)(v12 + 80)) == 0.0) {
              uint64_t v4 = (uint64_t)(a1[1] - 1);
            }
            else {
              uint64_t v4 = (uint64_t)(*a1 + 11);
            }
          }
          else
          {
            uint64_t v4 = v12 + 72;
          }
        }
        else
        {
          uint64_t v4 = v10 + 56;
        }
      }
      else
      {
        uint64_t v4 = v8 + 40;
      }
    }
    else
    {
      uint64_t v4 = v6 + 24;
    }
  }
  else
  {
    uint64_t v4 = v3 + 8;
  }
  unint64_t v13 = *(uint64_t (**)(void))(**(void **)v4 + 16);

  return v13();
}

void *sub_1CA108(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  double v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        double v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1CA1E0(void *a1)
{
  *a1 = off_2426DA8;
  uint64_t v3 = (void *)a1[1];
  double v2 = (unsigned char *)a1[2];
  if (v2 == (unsigned char *)v3)
  {
    uint64_t v3 = (void *)a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = v3[v4];
      if (v5 && *(unsigned char *)(a1[4] + v4))
      {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        v3[v4] = 0;
        uint64_t v3 = (void *)a1[1];
        double v2 = (unsigned char *)a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
    uint64_t v3 = (void *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  operator delete();
}

uint64_t sub_1CA2D8(uint64_t a1)
{
  return sub_1CA2E0((void **)(a1 + 8));
}

uint64_t sub_1CA2E0(void **a1)
{
  double v2 = (*(double (**)(void))(*(void *)**a1 + 16))(**a1);
  uint64_t v3 = (uint64_t)*a1;
  if (v2 == 0.0)
  {
    double v5 = (*(double (**)(void))(**(void **)(v3 + 16) + 16))(*(void *)(v3 + 16));
    uint64_t v6 = (uint64_t)*a1;
    if (v5 == 0.0)
    {
      double v7 = (*(double (**)(void))(**(void **)(v6 + 32) + 16))(*(void *)(v6 + 32));
      uint64_t v8 = (uint64_t)*a1;
      if (v7 == 0.0)
      {
        double v9 = (*(double (**)(void))(**(void **)(v8 + 48) + 16))(*(void *)(v8 + 48));
        uint64_t v10 = (uint64_t)*a1;
        if (v9 == 0.0)
        {
          double v11 = (*(double (**)(void))(**(void **)(v10 + 64) + 16))(*(void *)(v10 + 64));
          uint64_t v12 = (uint64_t)*a1;
          if (v11 == 0.0)
          {
            double v13 = (*(double (**)(void))(**(void **)(v12 + 80) + 16))(*(void *)(v12 + 80));
            uint64_t v14 = (uint64_t)*a1;
            if (v13 == 0.0)
            {
              if ((*(double (**)(void))(**(void **)(v14 + 96) + 16))(*(void *)(v14 + 96)) == 0.0) {
                uint64_t v4 = (uint64_t)(a1[1] - 1);
              }
              else {
                uint64_t v4 = (uint64_t)(*a1 + 13);
              }
            }
            else
            {
              uint64_t v4 = v14 + 88;
            }
          }
          else
          {
            uint64_t v4 = v12 + 72;
          }
        }
        else
        {
          uint64_t v4 = v10 + 56;
        }
      }
      else
      {
        uint64_t v4 = v8 + 40;
      }
    }
    else
    {
      uint64_t v4 = v6 + 24;
    }
  }
  else
  {
    uint64_t v4 = v3 + 8;
  }
  size_t v15 = *(uint64_t (**)(void))(**(void **)v4 + 16);

  return v15();
}

uint64_t sub_1CA4E4(uint64_t a1, int a2)
{
  int v71 = a2;
  int v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  v68[0] = 1;
  uint64_t v69 = a1;
  size_t v70 = &v72;
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v3) {
    uint64_t v3 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v3 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v3;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v3 + 8));
  *(void *)(a1 + 136) = *(void *)(v3 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    double v5 = std::string::append(&v56, "'");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    memset(&v54, 0, sizeof(v54));
    std::string::push_back(&v54, 56);
    std::string::push_back(&v54, 53);
    std::string::push_back(&v54, 57);
    std::string::push_back(&v54, 51);
    std::string::push_back(&v54, 50);
    std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v54;
    }
    else {
      uint64_t v8 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v54.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      double v9 = (std::string *)((char *)v8 + size - 1);
      if (v9 > v8)
      {
        uint64_t v10 = &v8->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v11 = *(v10 - 1);
          *(v10 - 1) = v9->__r_.__value_.__s.__data_[0];
          v9->__r_.__value_.__s.__data_[0] = v11;
          double v9 = (std::string *)((char *)v9 - 1);
          BOOL v12 = v10++ >= (char *)v9;
        }
        while (!v12);
      }
    }
    double v13 = std::string::insert(&v54, 0, "exprtk.hpp:");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v59.__r_.__value_.__s + 23) = 0;
    v59.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v60 = -1;
    *(_OWORD *)int v62 = 0u;
    *(_OWORD *)BOOL v63 = 0u;
    long long v64 = 0u;
    *(_OWORD *)__p = 0u;
    long long v66 = 0u;
    uint64_t v67 = 0;
    int v61 = 1;
    int v58 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v59, (const std::string *)(a1 + 112));
    uint64_t v60 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v62, &__str);
    std::string::operator=((std::string *)&v63[1], &v55);
    uint64_t v15 = *(void *)(a1 + 568);
    uint64_t v16 = *(void *)(a1 + 560);
    uint64_t v17 = 30 * ((v15 - v16) >> 3) - 1;
    if (v15 == v16) {
      uint64_t v17 = 0;
    }
    if (v17 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v16 = *(void *)(a1 + 560);
      uint64_t v15 = *(void *)(a1 + 568);
    }
    if (v15 == v16)
    {
      uint64_t v19 = 0;
    }
    else
    {
      unint64_t v18 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v19 = *(void *)(v16 + 8 * (v18 / 0x1E)) + 136 * (v18 % 0x1E);
    }
LABEL_55:
    sub_B5158(v19, (uint64_t)&v58);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v66) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v64) & 0x80000000) == 0)
      {
LABEL_57:
        if ((SHIBYTE(v63[0]) & 0x80000000) == 0) {
          goto LABEL_58;
        }
        goto LABEL_67;
      }
    }
    else if ((SHIBYTE(v64) & 0x80000000) == 0)
    {
      goto LABEL_57;
    }
    operator delete(v63[1]);
    if ((SHIBYTE(v63[0]) & 0x80000000) == 0)
    {
LABEL_58:
      if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_59;
      }
      goto LABEL_68;
    }
LABEL_67:
    operator delete(v62[0]);
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_59:
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_60;
      }
      goto LABEL_69;
    }
LABEL_68:
    operator delete(v59.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_60:
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_61;
      }
      goto LABEL_70;
    }
LABEL_69:
    operator delete(v55.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_61:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_71;
    }
LABEL_70:
    operator delete(v54.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_63:
        uint64_t v26 = 0;
        goto LABEL_64;
      }
LABEL_72:
      operator delete(v56.__r_.__value_.__l.__data_);
      goto LABEL_63;
    }
LABEL_71:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_72;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v4) {
    uint64_t v4 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v4 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v4;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v4 + 8));
  *(void *)(a1 + 136) = *(void *)(v4 + 32);
  int v72 = (void *)sub_B7FE4(a1, 0);
  if (!v72) {
    goto LABEL_63;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_37;
  }
  uint64_t v20 = a1 + 40;
  uint64_t v21 = *(void *)(a1 + 24);
  uint64_t v22 = a1 + 40;
  if (*(void *)(a1 + 8) != v21)
  {
    *(void *)(a1 + 24) = v21 + 40;
    uint64_t v22 = v21;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v22;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v22 + 8));
  *(void *)(a1 + 136) = *(void *)(v22 + 32);
  uint64_t v73 = sub_B7FE4(a1, 0);
  if (!v73) {
    goto LABEL_63;
  }
  if (*(_DWORD *)(a1 + 104) != 44)
  {
LABEL_37:
    std::operator+<char>();
    uint64_t v27 = std::string::append(&v56, "'");
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    memset(&v54, 0, sizeof(v54));
    std::string::push_back(&v54, 57);
    std::string::push_back(&v54, 55);
    std::string::push_back(&v54, 57);
    std::string::push_back(&v54, 51);
    std::string::push_back(&v54, 50);
    std::string::size_type v29 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &v54;
    }
    else {
      uint64_t v30 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v29 = v54.__r_.__value_.__l.__size_;
    }
    if (v29)
    {
      unint64_t v31 = (std::string *)((char *)v30 + v29 - 1);
      if (v31 > v30)
      {
        BOOL v32 = &v30->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v33 = *(v32 - 1);
          *(v32 - 1) = v31->__r_.__value_.__s.__data_[0];
          v31->__r_.__value_.__s.__data_[0] = v33;
          unint64_t v31 = (std::string *)((char *)v31 - 1);
          BOOL v12 = v32++ >= (char *)v31;
        }
        while (!v12);
      }
    }
    uint64_t v34 = std::string::insert(&v54, 0, "exprtk.hpp:");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v59.__r_.__value_.__s + 23) = 0;
    v59.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v60 = -1;
    *(_OWORD *)int v62 = 0u;
    *(_OWORD *)BOOL v63 = 0u;
    long long v64 = 0u;
    *(_OWORD *)__p = 0u;
    long long v66 = 0u;
    uint64_t v67 = 0;
    int v61 = 1;
    int v58 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v59, (const std::string *)(a1 + 112));
    uint64_t v60 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v62, &__str);
    std::string::operator=((std::string *)&v63[1], &v55);
    uint64_t v36 = *(void *)(a1 + 568);
    uint64_t v37 = *(void *)(a1 + 560);
    uint64_t v38 = 30 * ((v36 - v37) >> 3) - 1;
    if (v36 == v37) {
      uint64_t v38 = 0;
    }
    if (v38 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v37 = *(void *)(a1 + 560);
      uint64_t v36 = *(void *)(a1 + 568);
    }
    if (v36 == v37)
    {
      uint64_t v19 = 0;
    }
    else
    {
      unint64_t v39 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v19 = *(void *)(v37 + 8 * (v39 / 0x1E)) + 136 * (v39 % 0x1E);
    }
    goto LABEL_55;
  }
  uint64_t v23 = *(void *)(a1 + 24);
  uint64_t v24 = a1 + 40;
  if (*(void *)(a1 + 8) != v23)
  {
    *(void *)(a1 + 24) = v23 + 40;
    uint64_t v24 = v23;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
  *(void *)(a1 + 136) = *(void *)(v24 + 32);
  uint64_t v74 = sub_B7FE4(a1, 0);
  if (!v74) {
    goto LABEL_63;
  }
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    std::operator+<char>();
    size_t v41 = std::string::append(&v56, "'");
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    memset(&v54, 0, sizeof(v54));
    std::string::push_back(&v54, 50);
    std::string::push_back(&v54, 57);
    std::string::push_back(&v54, 57);
    std::string::push_back(&v54, 51);
    std::string::push_back(&v54, 50);
    std::string::size_type v43 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v44 = &v54;
    }
    else {
      int v44 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v43 = v54.__r_.__value_.__l.__size_;
    }
    if (v43)
    {
      BOOL v45 = (std::string *)((char *)v44 + v43 - 1);
      if (v45 > v44)
      {
        long long v46 = &v44->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v47 = *(v46 - 1);
          *(v46 - 1) = v45->__r_.__value_.__s.__data_[0];
          v45->__r_.__value_.__s.__data_[0] = v47;
          BOOL v45 = (std::string *)((char *)v45 - 1);
          BOOL v12 = v46++ >= (char *)v45;
        }
        while (!v12);
      }
    }
    unint64_t v48 = std::string::insert(&v54, 0, "exprtk.hpp:");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v59.__r_.__value_.__s + 23) = 0;
    v59.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v60 = -1;
    *(_OWORD *)int v62 = 0u;
    *(_OWORD *)BOOL v63 = 0u;
    long long v64 = 0u;
    *(_OWORD *)__p = 0u;
    long long v66 = 0u;
    uint64_t v67 = 0;
    int v61 = 1;
    int v58 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v59, (const std::string *)(a1 + 112));
    uint64_t v60 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v62, &__str);
    std::string::operator=((std::string *)&v63[1], &v55);
    uint64_t v50 = *(void *)(a1 + 568);
    uint64_t v51 = *(void *)(a1 + 560);
    uint64_t v52 = 30 * ((v50 - v51) >> 3) - 1;
    if (v50 == v51) {
      uint64_t v52 = 0;
    }
    if (v52 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v51 = *(void *)(a1 + 560);
      uint64_t v50 = *(void *)(a1 + 568);
    }
    if (v50 == v51)
    {
      uint64_t v19 = 0;
    }
    else
    {
      unint64_t v53 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v19 = *(void *)(v51 + 8 * (v53 / 0x1E)) + 136 * (v53 % 0x1E);
    }
    goto LABEL_55;
  }
  uint64_t v25 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) != v25)
  {
    *(void *)(a1 + 24) = v25 + 40;
    uint64_t v20 = v25;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v20;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v20 + 8));
  *(void *)(a1 + 136) = *(void *)(v20 + 32);
  uint64_t v26 = sub_1CBA38(a1 + 344, &v71, &v72);
  v68[0] = v26 == 0;
LABEL_64:
  sub_1DAA20((uint64_t)v68);
  return v26;
}

void sub_1CAE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    sub_1DAA20(v34 - 112);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a22);
  sub_1DAA20(v34 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_1CAF60(uint64_t a1, int a2)
{
  int v73 = a2;
  int64x2_t v74 = 0u;
  long long v75 = 0u;
  v70[0] = 1;
  uint64_t v71 = a1;
  int v72 = &v74;
  uint64_t v3 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v3) {
    uint64_t v3 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v3 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v3;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v3 + 8));
  *(void *)(a1 + 136) = *(void *)(v3 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    double v5 = std::string::append(&v58, "'");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    memset(&v56, 0, sizeof(v56));
    std::string::push_back(&v56, 56);
    std::string::push_back(&v56, 53);
    std::string::push_back(&v56, 57);
    std::string::push_back(&v56, 51);
    std::string::push_back(&v56, 50);
    std::string::size_type size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v56;
    }
    else {
      uint64_t v8 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v56.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      double v9 = (std::string *)((char *)v8 + size - 1);
      if (v9 > v8)
      {
        uint64_t v10 = &v8->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v11 = *(v10 - 1);
          *(v10 - 1) = v9->__r_.__value_.__s.__data_[0];
          v9->__r_.__value_.__s.__data_[0] = v11;
          double v9 = (std::string *)((char *)v9 - 1);
          BOOL v12 = v10++ >= (char *)v9;
        }
        while (!v12);
      }
    }
    double v13 = std::string::insert(&v56, 0, "exprtk.hpp:");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v61.__r_.__value_.__s + 23) = 0;
    v61.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v62 = -1;
    *(_OWORD *)long long v64 = 0u;
    *(_OWORD *)unint64_t v65 = 0u;
    long long v66 = 0u;
    *(_OWORD *)__p = 0u;
    long long v68 = 0u;
    uint64_t v69 = 0;
    int v63 = 1;
    int v60 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v61, (const std::string *)(a1 + 112));
    uint64_t v62 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v64, &__str);
    std::string::operator=((std::string *)&v65[1], &v57);
    uint64_t v15 = *(void *)(a1 + 568);
    uint64_t v16 = *(void *)(a1 + 560);
    uint64_t v17 = 30 * ((v15 - v16) >> 3) - 1;
    if (v15 == v16) {
      uint64_t v17 = 0;
    }
    if (v17 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v16 = *(void *)(a1 + 560);
      uint64_t v15 = *(void *)(a1 + 568);
    }
    if (v15 == v16)
    {
      uint64_t v19 = 0;
    }
    else
    {
      unint64_t v18 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v19 = *(void *)(v16 + 8 * (v18 / 0x1E)) + 136 * (v18 % 0x1E);
    }
LABEL_59:
    sub_B5158(v19, (uint64_t)&v60);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v68) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v66) & 0x80000000) == 0)
      {
LABEL_61:
        if ((SHIBYTE(v65[0]) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_71;
      }
    }
    else if ((SHIBYTE(v66) & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(v65[1]);
    if ((SHIBYTE(v65[0]) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_72;
    }
LABEL_71:
    operator delete(v64[0]);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_73;
    }
LABEL_72:
    operator delete(v61.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_64:
      if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
      goto LABEL_74;
    }
LABEL_73:
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_65:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
      goto LABEL_75;
    }
LABEL_74:
    operator delete(v56.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_67:
        uint64_t v28 = 0;
        goto LABEL_68;
      }
LABEL_76:
      operator delete(v58.__r_.__value_.__l.__data_);
      goto LABEL_67;
    }
LABEL_75:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_76;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v4) {
    uint64_t v4 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v4 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v4;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v4 + 8));
  *(void *)(a1 + 136) = *(void *)(v4 + 32);
  v74.i64[0] = sub_B7FE4(a1, 0);
  if (!v74.i64[0]) {
    goto LABEL_67;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_41;
  }
  uint64_t v20 = a1 + 40;
  uint64_t v21 = *(void *)(a1 + 24);
  uint64_t v22 = a1 + 40;
  if (*(void *)(a1 + 8) != v21)
  {
    *(void *)(a1 + 24) = v21 + 40;
    uint64_t v22 = v21;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v22;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v22 + 8));
  *(void *)(a1 + 136) = *(void *)(v22 + 32);
  v74.i64[1] = sub_B7FE4(a1, 0);
  if (!v74.i64[1]) {
    goto LABEL_67;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_41;
  }
  uint64_t v23 = *(void *)(a1 + 24);
  uint64_t v24 = a1 + 40;
  if (*(void *)(a1 + 8) != v23)
  {
    *(void *)(a1 + 24) = v23 + 40;
    uint64_t v24 = v23;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
  *(void *)(a1 + 136) = *(void *)(v24 + 32);
  *(void *)&long long v75 = sub_B7FE4(a1, 0);
  if (!(void)v75) {
    goto LABEL_67;
  }
  if (*(_DWORD *)(a1 + 104) != 44)
  {
LABEL_41:
    std::operator+<char>();
    std::string::size_type v29 = std::string::append(&v58, "'");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    memset(&v56, 0, sizeof(v56));
    std::string::push_back(&v56, 57);
    std::string::push_back(&v56, 55);
    std::string::push_back(&v56, 57);
    std::string::push_back(&v56, 51);
    std::string::push_back(&v56, 50);
    std::string::size_type v31 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v32 = &v56;
    }
    else {
      BOOL v32 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v31 = v56.__r_.__value_.__l.__size_;
    }
    if (v31)
    {
      std::string::value_type v33 = (std::string *)((char *)v32 + v31 - 1);
      if (v33 > v32)
      {
        uint64_t v34 = &v32->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v35 = *(v34 - 1);
          *(v34 - 1) = v33->__r_.__value_.__s.__data_[0];
          v33->__r_.__value_.__s.__data_[0] = v35;
          std::string::value_type v33 = (std::string *)((char *)v33 - 1);
          BOOL v12 = v34++ >= (char *)v33;
        }
        while (!v12);
      }
    }
    uint64_t v36 = std::string::insert(&v56, 0, "exprtk.hpp:");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v61.__r_.__value_.__s + 23) = 0;
    v61.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v62 = -1;
    *(_OWORD *)long long v64 = 0u;
    *(_OWORD *)unint64_t v65 = 0u;
    long long v66 = 0u;
    *(_OWORD *)__p = 0u;
    long long v68 = 0u;
    uint64_t v69 = 0;
    int v63 = 1;
    int v60 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v61, (const std::string *)(a1 + 112));
    uint64_t v62 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v64, &__str);
    std::string::operator=((std::string *)&v65[1], &v57);
    uint64_t v38 = *(void *)(a1 + 568);
    uint64_t v39 = *(void *)(a1 + 560);
    uint64_t v40 = 30 * ((v38 - v39) >> 3) - 1;
    if (v38 == v39) {
      uint64_t v40 = 0;
    }
    if (v40 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v39 = *(void *)(a1 + 560);
      uint64_t v38 = *(void *)(a1 + 568);
    }
    if (v38 == v39)
    {
      uint64_t v19 = 0;
    }
    else
    {
      unint64_t v41 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v19 = *(void *)(v39 + 8 * (v41 / 0x1E)) + 136 * (v41 % 0x1E);
    }
    goto LABEL_59;
  }
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t v26 = a1 + 40;
  if (*(void *)(a1 + 8) != v25)
  {
    *(void *)(a1 + 24) = v25 + 40;
    uint64_t v26 = v25;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v26;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v26 + 8));
  *(void *)(a1 + 136) = *(void *)(v26 + 32);
  *((void *)&v75 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v75 + 1)) {
    goto LABEL_67;
  }
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    std::operator+<char>();
    std::string::size_type v43 = std::string::append(&v58, "'");
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    memset(&v56, 0, sizeof(v56));
    std::string::push_back(&v56, 50);
    std::string::push_back(&v56, 57);
    std::string::push_back(&v56, 57);
    std::string::push_back(&v56, 51);
    std::string::push_back(&v56, 50);
    std::string::size_type v45 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v46 = &v56;
    }
    else {
      long long v46 = (std::string *)v56.__r_.__value_.__r.__words[0];
    }
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v45 = v56.__r_.__value_.__l.__size_;
    }
    if (v45)
    {
      std::string::value_type v47 = (std::string *)((char *)v46 + v45 - 1);
      if (v47 > v46)
      {
        unint64_t v48 = &v46->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v49 = *(v48 - 1);
          *(v48 - 1) = v47->__r_.__value_.__s.__data_[0];
          v47->__r_.__value_.__s.__data_[0] = v49;
          std::string::value_type v47 = (std::string *)((char *)v47 - 1);
          BOOL v12 = v48++ >= (char *)v47;
        }
        while (!v12);
      }
    }
    uint64_t v50 = std::string::insert(&v56, 0, "exprtk.hpp:");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v61.__r_.__value_.__s + 23) = 0;
    v61.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v62 = -1;
    *(_OWORD *)long long v64 = 0u;
    *(_OWORD *)unint64_t v65 = 0u;
    long long v66 = 0u;
    *(_OWORD *)__p = 0u;
    long long v68 = 0u;
    uint64_t v69 = 0;
    int v63 = 1;
    int v60 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v61, (const std::string *)(a1 + 112));
    uint64_t v62 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v64, &__str);
    std::string::operator=((std::string *)&v65[1], &v57);
    uint64_t v52 = *(void *)(a1 + 568);
    uint64_t v53 = *(void *)(a1 + 560);
    uint64_t v54 = 30 * ((v52 - v53) >> 3) - 1;
    if (v52 == v53) {
      uint64_t v54 = 0;
    }
    if (v54 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v53 = *(void *)(a1 + 560);
      uint64_t v52 = *(void *)(a1 + 568);
    }
    if (v52 == v53)
    {
      uint64_t v19 = 0;
    }
    else
    {
      unint64_t v55 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v19 = *(void *)(v53 + 8 * (v55 / 0x1E)) + 136 * (v55 % 0x1E);
    }
    goto LABEL_59;
  }
  uint64_t v27 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) != v27)
  {
    *(void *)(a1 + 24) = v27 + 40;
    uint64_t v20 = v27;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v20;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v20 + 8));
  *(void *)(a1 + 136) = *(void *)(v20 + 32);
  uint64_t v28 = sub_1DAC24(a1 + 344, &v73, &v74);
  v70[0] = v28 == 0;
LABEL_68:
  sub_DD4B4((uint64_t)v70);
  return v28;
}

void sub_1CB8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a27 & 0x80000000) == 0)
  {
LABEL_4:
    sub_DD4B4(v34 - 128);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a22);
  sub_DD4B4(v34 - 128);
  _Unwind_Resume(a1);
}

uint64_t sub_1CBA38(uint64_t a1, _DWORD *a2, void **a3)
{
  if (*a3) {
    BOOL v4 = a3[1] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || a3[2] == 0) {
    return 0;
  }
  if ((*(unsigned int (**)(void))(**a3 + 32))(*a3) == 2)
  {
    double v9 = a3[1];
    if (v9)
    {
      if ((*(unsigned int (**)(void *))(*v9 + 32))(v9) == 2)
      {
        uint64_t v10 = a3[2];
        if (v10)
        {
          if ((*(unsigned int (**)(void *))(*v10 + 32))(v10) == 2)
          {
            return sub_1CC53C(a1, a2);
          }
        }
      }
    }
  }
  if (!*a3
    || (*(unsigned int (**)(void))(**a3 + 32))(*a3) != 17
    || (std::string::value_type v11 = a3[1]) == 0
    || (*(unsigned int (**)(void *))(*v11 + 32))(v11) != 17
    || (BOOL v12 = a3[2]) == 0
    || (*(unsigned int (**)(void *))(*v12 + 32))(v12) != 17)
  {
    switch(*a2)
    {
      case 0x3E8:
        sub_1CE644();
      case 0x3E9:
        sub_1CE6E0();
      case 0x3EA:
        sub_1CE77C();
      case 0x3EB:
        sub_1CE818();
      case 0x3EC:
        sub_1CE8B4();
      case 0x3ED:
        sub_1CE950();
      case 0x3EE:
        sub_1CE9EC();
      case 0x3EF:
        sub_1CEA88();
      case 0x3F0:
        sub_1CEB24();
      case 0x3F1:
        sub_1CEBC0();
      case 0x3F2:
        sub_1CEC5C();
      case 0x3F3:
        sub_1CECF8();
      case 0x3F4:
        sub_1CED94();
      case 0x3F5:
        sub_1CEE30();
      case 0x3F6:
        sub_1CEECC();
      case 0x3F7:
        sub_1CEF68();
      case 0x3F8:
        sub_1CF004();
      case 0x3F9:
        sub_1CF0A0();
      case 0x3FA:
        sub_1CF13C();
      case 0x3FB:
        sub_1CF1D8();
      case 0x3FC:
        sub_1CF274();
      case 0x3FD:
        sub_1CF310();
      case 0x3FE:
        sub_1CF3AC();
      case 0x3FF:
        sub_1CF448();
      case 0x400:
        sub_1CF4E4();
      case 0x401:
        sub_1CF580();
      case 0x402:
        sub_1CF61C();
      case 0x403:
        sub_1CF6B8();
      case 0x404:
        sub_1CF754();
      case 0x405:
        sub_1CF7F0();
      case 0x406:
        sub_1CF88C();
      case 0x407:
        sub_1CF928();
      case 0x408:
        sub_1CF9C4();
      case 0x409:
        sub_1CFA60();
      case 0x40A:
        sub_1CFAFC();
      case 0x40B:
        sub_1CFB98();
      case 0x40C:
        sub_1CFC34();
      case 0x40D:
        sub_1CFCD0();
      case 0x40E:
        sub_1CFD6C();
      case 0x40F:
        sub_1CFE08();
      case 0x410:
        sub_1CFEA4();
      case 0x411:
        sub_1CFF40();
      case 0x412:
        sub_1CFFDC();
      case 0x413:
        sub_1D0078();
      case 0x414:
        sub_1D0114();
      case 0x415:
        sub_1D01B0();
      case 0x416:
        sub_1D024C();
      case 0x417:
        sub_1D02E8();
      default:
        return 0;
    }
    return 0;
  }

  return sub_1CD720(a1, a2, a3);
}

uint64_t sub_1CC53C(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0x3E8:
      operator new();
    case 0x3E9:
      operator new();
    case 0x3EA:
      operator new();
    case 0x3EB:
      operator new();
    case 0x3EC:
      operator new();
    case 0x3ED:
      operator new();
    case 0x3EE:
      operator new();
    case 0x3EF:
      operator new();
    case 0x3F0:
      operator new();
    case 0x3F1:
      operator new();
    case 0x3F2:
      operator new();
    case 0x3F3:
      operator new();
    case 0x3F4:
      operator new();
    case 0x3F5:
      operator new();
    case 0x3F6:
      operator new();
    case 0x3F7:
      operator new();
    case 0x3F8:
      operator new();
    case 0x3F9:
      operator new();
    case 0x3FA:
      operator new();
    case 0x3FB:
      operator new();
    case 0x3FC:
      operator new();
    case 0x3FD:
      operator new();
    case 0x3FE:
      operator new();
    case 0x3FF:
      operator new();
    case 0x400:
      operator new();
    case 0x401:
      operator new();
    case 0x402:
      operator new();
    case 0x403:
      operator new();
    case 0x404:
      operator new();
    case 0x405:
      operator new();
    case 0x406:
      operator new();
    case 0x407:
      operator new();
    case 0x408:
      operator new();
    case 0x409:
      operator new();
    case 0x40A:
      operator new();
    case 0x40B:
      operator new();
    case 0x40C:
      operator new();
    case 0x40D:
      operator new();
    case 0x40E:
      operator new();
    case 0x40F:
      operator new();
    case 0x410:
      operator new();
    case 0x411:
      operator new();
    case 0x412:
      operator new();
    case 0x413:
      operator new();
    case 0x414:
      operator new();
    case 0x415:
      operator new();
    case 0x416:
      operator new();
    case 0x417:
      operator new();
    default:
      return 0;
  }
}

void sub_1CD580()
{
}

uint64_t sub_1CD720(uint64_t a1, _DWORD *a2, void **a3)
{
  switch(*a2)
  {
    case 0x3E8:
      operator new();
    case 0x3E9:
      operator new();
    case 0x3EA:
      operator new();
    case 0x3EB:
      operator new();
    case 0x3EC:
      operator new();
    case 0x3ED:
      operator new();
    case 0x3EE:
      operator new();
    case 0x3EF:
      operator new();
    case 0x3F0:
      operator new();
    case 0x3F1:
      operator new();
    case 0x3F2:
      operator new();
    case 0x3F3:
      operator new();
    case 0x3F4:
      operator new();
    case 0x3F5:
      operator new();
    case 0x3F6:
      operator new();
    case 0x3F7:
      operator new();
    case 0x3F8:
      operator new();
    case 0x3F9:
      operator new();
    case 0x3FA:
      operator new();
    case 0x3FB:
      operator new();
    case 0x3FC:
      operator new();
    case 0x3FD:
      operator new();
    case 0x3FE:
      operator new();
    case 0x3FF:
      operator new();
    case 0x400:
      operator new();
    case 0x401:
      operator new();
    case 0x402:
      operator new();
    case 0x403:
      operator new();
    case 0x404:
      operator new();
    case 0x405:
      operator new();
    case 0x406:
      operator new();
    case 0x407:
      operator new();
    case 0x408:
      operator new();
    case 0x409:
      operator new();
    case 0x40A:
      operator new();
    case 0x40B:
      operator new();
    case 0x40C:
      operator new();
    case 0x40D:
      operator new();
    case 0x40E:
      operator new();
    case 0x40F:
      operator new();
    case 0x410:
      operator new();
    case 0x411:
      operator new();
    case 0x412:
      operator new();
    case 0x413:
      operator new();
    case 0x414:
      operator new();
    case 0x415:
      operator new();
    case 0x416:
      operator new();
    case 0x417:
      operator new();
    default:
      return 0;
  }
}

void sub_1CE644()
{
}

void sub_1CE6BC()
{
}

void sub_1CE6E0()
{
}

void sub_1CE758()
{
}

void sub_1CE77C()
{
}

void sub_1CE7F4()
{
}

void sub_1CE818()
{
}

void sub_1CE890()
{
}

void sub_1CE8B4()
{
}

void sub_1CE92C()
{
}

void sub_1CE950()
{
}

void sub_1CE9C8()
{
}

void sub_1CE9EC()
{
}

void sub_1CEA64()
{
}

void sub_1CEA88()
{
}

void sub_1CEB00()
{
}

void sub_1CEB24()
{
}

void sub_1CEB9C()
{
}

void sub_1CEBC0()
{
}

void sub_1CEC38()
{
}

void sub_1CEC5C()
{
}

void sub_1CECD4()
{
}

void sub_1CECF8()
{
}

void sub_1CED70()
{
}

void sub_1CED94()
{
}

void sub_1CEE0C()
{
}

void sub_1CEE30()
{
}

void sub_1CEEA8()
{
}

void sub_1CEECC()
{
}

void sub_1CEF44()
{
}

void sub_1CEF68()
{
}

void sub_1CEFE0()
{
}

void sub_1CF004()
{
}

void sub_1CF07C()
{
}

void sub_1CF0A0()
{
}

void sub_1CF118()
{
}

void sub_1CF13C()
{
}

void sub_1CF1B4()
{
}

void sub_1CF1D8()
{
}

void sub_1CF250()
{
}

void sub_1CF274()
{
}

void sub_1CF2EC()
{
}

void sub_1CF310()
{
}

void sub_1CF388()
{
}

void sub_1CF3AC()
{
}

void sub_1CF424()
{
}

void sub_1CF448()
{
}

void sub_1CF4C0()
{
}

void sub_1CF4E4()
{
}

void sub_1CF55C()
{
}

void sub_1CF580()
{
}

void sub_1CF5F8()
{
}

void sub_1CF61C()
{
}

void sub_1CF694()
{
}

void sub_1CF6B8()
{
}

void sub_1CF730()
{
}

void sub_1CF754()
{
}

void sub_1CF7CC()
{
}

void sub_1CF7F0()
{
}

void sub_1CF868()
{
}

void sub_1CF88C()
{
}

void sub_1CF904()
{
}

void sub_1CF928()
{
}

void sub_1CF9A0()
{
}

void sub_1CF9C4()
{
}

void sub_1CFA3C()
{
}

void sub_1CFA60()
{
}

void sub_1CFAD8()
{
}

void sub_1CFAFC()
{
}

void sub_1CFB74()
{
}

void sub_1CFB98()
{
}

void sub_1CFC10()
{
}

void sub_1CFC34()
{
}

void sub_1CFCAC()
{
}

void sub_1CFCD0()
{
}

void sub_1CFD48()
{
}

void sub_1CFD6C()
{
}

void sub_1CFDE4()
{
}

void sub_1CFE08()
{
}

void sub_1CFE80()
{
}

void sub_1CFEA4()
{
}

void sub_1CFF1C()
{
}

void sub_1CFF40()
{
}

void sub_1CFFB8()
{
}

void sub_1CFFDC()
{
}

void sub_1D0054()
{
}

void sub_1D0078()
{
}

void sub_1D00F0()
{
}

void sub_1D0114()
{
}

void sub_1D018C()
{
}

void sub_1D01B0()
{
}

void sub_1D0228()
{
}

void sub_1D024C()
{
}

void sub_1D02C4()
{
}

void sub_1D02E8()
{
}

void sub_1D0360()
{
}

void sub_1D0388()
{
}

double sub_1D039C(double **a1)
{
  return (*a1[1] + *a1[2]) / *a1[3];
}

uint64_t sub_1D03BC()
{
  return 6;
}

double sub_1D03C4(double *a1, double *a2, double *a3)
{
  return (*a1 + *a2) / *a3;
}

void sub_1D03E0()
{
}

double sub_1D03F4(double **a1)
{
  return (*a1[1] + *a1[2]) * *a1[3];
}

uint64_t sub_1D0414()
{
  return 6;
}

double sub_1D041C(double *a1, double *a2, double *a3)
{
  return (*a1 + *a2) * *a3;
}

void sub_1D0438()
{
}

double sub_1D044C(double **a1)
{
  return *a1[1] + *a1[2] - *a1[3];
}

uint64_t sub_1D046C()
{
  return 6;
}

double sub_1D0474(double *a1, double *a2, double *a3)
{
  return *a1 + *a2 - *a3;
}

void sub_1D0490()
{
}

double sub_1D04A4(double **a1)
{
  return *a1[1] + *a1[2] + *a1[3];
}

uint64_t sub_1D04C4()
{
  return 6;
}

double sub_1D04CC(double *a1, double *a2, double *a3)
{
  return *a1 + *a2 + *a3;
}

void sub_1D04E8()
{
}

double sub_1D04FC(double **a1)
{
  return *a1[1] - *a1[2] + *a1[3];
}

uint64_t sub_1D051C()
{
  return 6;
}

double sub_1D0524(double *a1, double *a2, double *a3)
{
  return *a1 - *a2 + *a3;
}

void sub_1D0540()
{
}

double sub_1D0554(double **a1)
{
  return (*a1[1] - *a1[2]) / *a1[3];
}

uint64_t sub_1D0574()
{
  return 6;
}

double sub_1D057C(double *a1, double *a2, double *a3)
{
  return (*a1 - *a2) / *a3;
}

void sub_1D0598()
{
}

double sub_1D05AC(double **a1)
{
  return (*a1[1] - *a1[2]) * *a1[3];
}

uint64_t sub_1D05CC()
{
  return 6;
}

double sub_1D05D4(double *a1, double *a2, double *a3)
{
  return (*a1 - *a2) * *a3;
}

void sub_1D05F0()
{
}

double sub_1D0604(double **a1)
{
  return *a1[1] * *a1[2] + *a1[3];
}

uint64_t sub_1D0624()
{
  return 6;
}

double sub_1D062C(double *a1, double *a2, double *a3)
{
  return *a1 * *a2 + *a3;
}

void sub_1D0648()
{
}

double sub_1D065C(double **a1)
{
  return *a1[1] * *a1[2] - *a1[3];
}

uint64_t sub_1D067C()
{
  return 6;
}

double sub_1D0684(double *a1, double *a2, double *a3)
{
  return *a1 * *a2 - *a3;
}

void sub_1D06A0()
{
}

double sub_1D06B4(double **a1)
{
  return *a1[1] * *a1[2] / *a1[3];
}

uint64_t sub_1D06D4()
{
  return 6;
}

double sub_1D06DC(double *a1, double *a2, double *a3)
{
  return *a1 * *a2 / *a3;
}

void sub_1D06F8()
{
}

double sub_1D070C(double **a1)
{
  return *a1[1] * *a1[2] * *a1[3];
}

uint64_t sub_1D072C()
{
  return 6;
}

double sub_1D0734(double *a1, double *a2, double *a3)
{
  return *a1 * *a2 * *a3;
}

void sub_1D0750()
{
}

double sub_1D0764(double **a1)
{
  return *a1[1] / *a1[2] + *a1[3];
}

uint64_t sub_1D0784()
{
  return 6;
}

double sub_1D078C(double *a1, double *a2, double *a3)
{
  return *a1 / *a2 + *a3;
}

void sub_1D07A8()
{
}

double sub_1D07BC(double **a1)
{
  return *a1[1] / *a1[2] - *a1[3];
}

uint64_t sub_1D07DC()
{
  return 6;
}

double sub_1D07E4(double *a1, double *a2, double *a3)
{
  return *a1 / *a2 - *a3;
}

void sub_1D0800()
{
}

double sub_1D0814(double **a1)
{
  return *a1[1] / *a1[2] / *a1[3];
}

uint64_t sub_1D0834()
{
  return 6;
}

double sub_1D083C(double *a1, double *a2, double *a3)
{
  return *a1 / *a2 / *a3;
}

void sub_1D0858()
{
}

double sub_1D086C(double **a1)
{
  return *a1[1] / *a1[2] * *a1[3];
}

uint64_t sub_1D088C()
{
  return 6;
}

double sub_1D0894(double *a1, double *a2, double *a3)
{
  return *a1 / *a2 * *a3;
}

void sub_1D08B0()
{
}

double sub_1D08C4(double **a1)
{
  return *a1[1] / (*a1[2] + *a1[3]);
}

uint64_t sub_1D08E4()
{
  return 6;
}

double sub_1D08EC(double *a1, double *a2, double *a3)
{
  return *a1 / (*a2 + *a3);
}

void sub_1D0908()
{
}

double sub_1D091C(double **a1)
{
  return *a1[1] / (*a1[2] - *a1[3]);
}

uint64_t sub_1D093C()
{
  return 6;
}

double sub_1D0944(double *a1, double *a2, double *a3)
{
  return *a1 / (*a2 - *a3);
}

void sub_1D0960()
{
}

double sub_1D0974(double **a1)
{
  return *a1[1] / (*a1[2] * *a1[3]);
}

uint64_t sub_1D0994()
{
  return 6;
}

double sub_1D099C(double *a1, double *a2, double *a3)
{
  return *a1 / (*a2 * *a3);
}

void sub_1D09B8()
{
}

double sub_1D09CC(double **a1)
{
  return *a1[1] / (*a1[2] / *a1[3]);
}

uint64_t sub_1D09EC()
{
  return 6;
}

double sub_1D09F4(double *a1, double *a2, double *a3)
{
  return *a1 / (*a2 / *a3);
}

void sub_1D0A10()
{
}

double sub_1D0A24(double **a1)
{
  return *a1[1] * (*a1[2] + *a1[3]);
}

uint64_t sub_1D0A44()
{
  return 6;
}

double sub_1D0A4C(double *a1, double *a2, double *a3)
{
  return *a1 * (*a2 + *a3);
}

void sub_1D0A68()
{
}

double sub_1D0A7C(double **a1)
{
  return *a1[1] * (*a1[2] - *a1[3]);
}

uint64_t sub_1D0A9C()
{
  return 6;
}

double sub_1D0AA4(double *a1, double *a2, double *a3)
{
  return *a1 * (*a2 - *a3);
}

void sub_1D0AC0()
{
}

double sub_1D0AD4(double **a1)
{
  return *a1[1] * (*a1[2] * *a1[3]);
}

uint64_t sub_1D0AF4()
{
  return 6;
}

double sub_1D0AFC(double *a1, double *a2, double *a3)
{
  return *a1 * (*a2 * *a3);
}

void sub_1D0B18()
{
}

double sub_1D0B2C(double **a1)
{
  return *a1[1] * (*a1[2] / *a1[3]);
}

uint64_t sub_1D0B4C()
{
  return 6;
}

double sub_1D0B54(double *a1, double *a2, double *a3)
{
  return *a1 * (*a2 / *a3);
}

void sub_1D0B70()
{
}

double sub_1D0B84(double **a1)
{
  return *a1[1] - (*a1[2] + *a1[3]);
}

uint64_t sub_1D0BA4()
{
  return 6;
}

double sub_1D0BAC(double *a1, double *a2, double *a3)
{
  return *a1 - (*a2 + *a3);
}

void sub_1D0BC8()
{
}

double sub_1D0BDC(double **a1)
{
  return *a1[1] - (*a1[2] - *a1[3]);
}

uint64_t sub_1D0BFC()
{
  return 6;
}

double sub_1D0C04(double *a1, double *a2, double *a3)
{
  return *a1 - (*a2 - *a3);
}

void sub_1D0C20()
{
}

double sub_1D0C34(double **a1)
{
  return *a1[1] - *a1[2] / *a1[3];
}

uint64_t sub_1D0C54()
{
  return 6;
}

double sub_1D0C5C(double *a1, double *a2, double *a3)
{
  return *a1 - *a2 / *a3;
}

void sub_1D0C78()
{
}

double sub_1D0C8C(double **a1)
{
  return *a1[1] - *a1[2] * *a1[3];
}

uint64_t sub_1D0CAC()
{
  return 6;
}

double sub_1D0CB4(double *a1, double *a2, double *a3)
{
  return *a1 - *a2 * *a3;
}

void sub_1D0CD0()
{
}

double sub_1D0CE4(double **a1)
{
  return *a1[1] + *a1[2] * *a1[3];
}

uint64_t sub_1D0D04()
{
  return 6;
}

double sub_1D0D0C(double *a1, double *a2, double *a3)
{
  return *a1 + *a2 * *a3;
}

void sub_1D0D28()
{
}

double sub_1D0D3C(double **a1)
{
  return *a1[1] + *a1[2] / *a1[3];
}

uint64_t sub_1D0D5C()
{
  return 6;
}

double sub_1D0D64(double *a1, double *a2, double *a3)
{
  return *a1 + *a2 / *a3;
}

void sub_1D0D80()
{
}

double sub_1D0D94(double **a1)
{
  return *a1[1] + *a1[2] + *a1[3];
}

uint64_t sub_1D0DB4()
{
  return 6;
}

double sub_1D0DBC(double *a1, double *a2, double *a3)
{
  return *a1 + *a2 + *a3;
}

void sub_1D0DD8()
{
}

double sub_1D0DEC(double **a1)
{
  return *a1[1] + *a1[2] - *a1[3];
}

uint64_t sub_1D0E0C()
{
  return 6;
}

double sub_1D0E14(double *a1, double *a2, double *a3)
{
  return *a1 + *a2 - *a3;
}

void sub_1D0E30()
{
}

double sub_1D0E44(double **a1)
{
  return *a1[3] + *a1[1] * (*a1[2] * *a1[2]);
}

uint64_t sub_1D0E68()
{
  return 6;
}

void sub_1D0E74()
{
}

double sub_1D0E88(double **a1)
{
  return *a1[3] + *a1[1] * (*a1[2] * (*a1[2] * *a1[2]));
}

uint64_t sub_1D0EB0()
{
  return 6;
}

void sub_1D0EBC()
{
}

double sub_1D0ED0(double **a1)
{
  return *a1[3] + *a1[1] * (*a1[2] * *a1[2] * (*a1[2] * *a1[2]));
}

uint64_t sub_1D0EF8()
{
  return 6;
}

void sub_1D0F04()
{
}

double sub_1D0F18(double **a1)
{
  return *a1[3] + *a1[1] * (*a1[2] * (*a1[2] * *a1[2] * (*a1[2] * *a1[2])));
}

uint64_t sub_1D0F44()
{
  return 6;
}

void sub_1D0F50()
{
}

double sub_1D0F64(double **a1)
{
  double v1 = *a1[2];
  return *a1[3] + *a1[1] * (v1 * (v1 * v1) * (v1 * (v1 * v1)));
}

uint64_t sub_1D0F90()
{
  return 6;
}

void sub_1D0F9C()
{
}

double sub_1D0FB0(double **a1)
{
  double v1 = a1[2];
  return *a1[3] + *a1[1] * (*v1 * (*v1 * (*v1 * *v1) * (*v1 * (*v1 * *v1))));
}

uint64_t sub_1D0FE0()
{
  return 6;
}

void sub_1D0FEC()
{
}

double sub_1D1000(double **a1)
{
  double v1 = *a1[2] * *a1[2] * (*a1[2] * *a1[2]);
  return *a1[3] + *a1[1] * (v1 * v1);
}

uint64_t sub_1D102C()
{
  return 6;
}

void sub_1D1038()
{
}

double sub_1D104C(double **a1)
{
  double v1 = a1[2];
  return *a1[3] + *a1[1] * (*v1 * (*v1 * *v1 * (*v1 * *v1) * (*v1 * *v1 * (*v1 * *v1))));
}

uint64_t sub_1D107C()
{
  return 6;
}

void sub_1D1088()
{
}

long double sub_1D109C(uint64_t a1)
{
  double v1 = *(double **)(a1 + 24);
  double v2 = **(double **)(a1 + 8);
  return *v1 + v2 * log(**(long double **)(a1 + 16));
}

uint64_t sub_1D10E0()
{
  return 6;
}

void sub_1D10EC()
{
}

long double sub_1D1100(uint64_t a1)
{
  double v1 = *(double **)(a1 + 24);
  double v2 = **(double **)(a1 + 8);
  return v2 * log(**(long double **)(a1 + 16)) - *v1;
}

uint64_t sub_1D1144()
{
  return 6;
}

void sub_1D1150()
{
}

long double sub_1D1164(uint64_t a1)
{
  double v1 = *(double **)(a1 + 24);
  double v2 = **(double **)(a1 + 8);
  return *v1 + v2 * log10(**(long double **)(a1 + 16));
}

uint64_t sub_1D11A8()
{
  return 6;
}

void sub_1D11B4()
{
}

long double sub_1D11C8(uint64_t a1)
{
  double v1 = *(double **)(a1 + 24);
  double v2 = **(double **)(a1 + 8);
  return v2 * log10(**(long double **)(a1 + 16)) - *v1;
}

uint64_t sub_1D120C()
{
  return 6;
}

void sub_1D1218()
{
}

long double sub_1D122C(uint64_t a1)
{
  double v1 = *(double **)(a1 + 24);
  double v2 = **(double **)(a1 + 8);
  return *v1 + v2 * sin(**(long double **)(a1 + 16));
}

uint64_t sub_1D1270()
{
  return 6;
}

void sub_1D127C()
{
}

long double sub_1D1290(uint64_t a1)
{
  double v1 = *(double **)(a1 + 24);
  double v2 = **(double **)(a1 + 8);
  return v2 * sin(**(long double **)(a1 + 16)) - *v1;
}

uint64_t sub_1D12D4()
{
  return 6;
}

void sub_1D12E0()
{
}

long double sub_1D12F4(uint64_t a1)
{
  double v1 = *(double **)(a1 + 24);
  double v2 = **(double **)(a1 + 8);
  return *v1 + v2 * cos(**(long double **)(a1 + 16));
}

uint64_t sub_1D1338()
{
  return 6;
}

void sub_1D1344()
{
}

long double sub_1D1358(uint64_t a1)
{
  double v1 = *(double **)(a1 + 24);
  double v2 = **(double **)(a1 + 8);
  return v2 * cos(**(long double **)(a1 + 16)) - *v1;
}

uint64_t sub_1D139C()
{
  return 6;
}

void sub_1D13A8()
{
}

double sub_1D13BC(uint64_t a1)
{
  if (**(double **)(a1 + 8) == 0.0) {
    uint64_t v1 = a1 + 24;
  }
  else {
    uint64_t v1 = a1 + 16;
  }
  return **(double **)v1;
}

uint64_t sub_1D13E0()
{
  return 6;
}

uint64_t sub_1D13E8(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D1514(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D1654(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return (v2 + v3) / (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D1704(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D1830(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D1970(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return (v2 + v3) * (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D1A20(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D1B4C(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D1C8C(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 + v3 - (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D1D3C(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D1E68(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D1FA8(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 + v3 + (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D2058(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D2184(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D22C4(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 - v3 + (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D2374(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D24A0(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D25E0(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return (v2 - v3) / (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D2690(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D27BC(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D28FC(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return (v2 - v3) * (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D29AC(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D2AD8(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D2C18(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * v3 + (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D2CC8(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D2DF4(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D2F34(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * v3 - (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D2FE4(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D3110(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D3250(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * v3 / (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D3300(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D342C(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D356C(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * v3 * (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D361C(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D3748(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D3888(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 / v3 + (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D3938(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D3A64(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D3BA4(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 / v3 - (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D3C54(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D3D80(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D3EC0(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 / v3 / (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D3F70(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D409C(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D41DC(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 / v3 * (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D428C(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D43B8(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D44F8(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 / (v3 + (*(double (**)(void *))(*a1[6] + 16))(a1[6]));
}

uint64_t sub_1D45A8(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D46D4(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D4814(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 / (v3 - (*(double (**)(void *))(*a1[6] + 16))(a1[6]));
}

uint64_t sub_1D48C4(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D49F0(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D4B30(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 / (v3 * (*(double (**)(void *))(*a1[6] + 16))(a1[6]));
}

uint64_t sub_1D4BE0(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D4D0C(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D4E4C(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 / (v3 / (*(double (**)(void *))(*a1[6] + 16))(a1[6]));
}

uint64_t sub_1D4EFC(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D5028(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D5168(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * (v3 + (*(double (**)(void *))(*a1[6] + 16))(a1[6]));
}

uint64_t sub_1D5218(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D5344(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D5484(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * (v3 - (*(double (**)(void *))(*a1[6] + 16))(a1[6]));
}

uint64_t sub_1D5534(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D5660(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D57A0(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * (v3 * (*(double (**)(void *))(*a1[6] + 16))(a1[6]));
}

uint64_t sub_1D5850(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D597C(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D5ABC(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * (v3 / (*(double (**)(void *))(*a1[6] + 16))(a1[6]));
}

uint64_t sub_1D5B6C(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D5C98(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D5DD8(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 - (v3 + (*(double (**)(void *))(*a1[6] + 16))(a1[6]));
}

uint64_t sub_1D5E88(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D5FB4(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D60F4(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 - (v3 - (*(double (**)(void *))(*a1[6] + 16))(a1[6]));
}

uint64_t sub_1D61A4(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D62D0(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D6410(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 - v3 / (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D64C0(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D65EC(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D672C(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 - v3 * (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D67DC(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D6908(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D6A48(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 + v3 * (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D6AF8(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D6C24(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D6D64(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 + v3 / (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D6E14(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D6F40(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D7080(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 + v3 + (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D7130(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D725C(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D739C(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 + v3 - (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D744C(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D7578(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D76B8(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * (v3 * v3) + (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D776C(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D7898(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D79D8(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * (v3 * (v3 * v3)) + (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D7A90(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D7BBC(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D7CFC(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * (v3 * v3 * (v3 * v3)) + (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D7DB4(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D7EE0(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D8020(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * (v3 * (v3 * v3 * (v3 * v3))) + (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D80DC(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D8208(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D8348(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * (v3 * (v3 * v3) * (v3 * (v3 * v3))) + (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D8404(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D8530(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D8670(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * (v3 * (v3 * (v3 * v3) * (v3 * (v3 * v3)))) + (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D8730(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D885C(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D899C(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * (v3 * v3 * (v3 * v3) * (v3 * v3 * (v3 * v3)))
       + (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D8A58(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D8B84(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

double sub_1D8CC4(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  return v2 * (v3 * (v3 * v3 * (v3 * v3) * (v3 * v3 * (v3 * v3))))
       + (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1D8D84(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D8EB0(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

long double sub_1D8FF0(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  long double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * log(v3) + v4;
}

uint64_t sub_1D90B4(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D91E0(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

long double sub_1D9320(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  long double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * log(v3) - v4;
}

uint64_t sub_1D93E4(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D9510(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

long double sub_1D9650(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  long double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * log10(v3) + v4;
}

uint64_t sub_1D9714(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D9840(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

long double sub_1D9980(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  long double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * log10(v3) - v4;
}

uint64_t sub_1D9A44(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D9B70(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

long double sub_1D9CB0(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  long double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * sin(v3) + v4;
}

uint64_t sub_1D9D74(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1D9EA0(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

long double sub_1D9FE0(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  long double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * sin(v3) - v4;
}

uint64_t sub_1DA0A4(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1DA1D0(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

long double sub_1DA310(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  long double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * cos(v3) + v4;
}

uint64_t sub_1DA3D4(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1DA500(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

long double sub_1DA640(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  long double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * cos(v3) - v4;
}

uint64_t sub_1DA704(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v9 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      goto LABEL_25;
    }
    return a1;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    goto LABEL_11;
  }
LABEL_21:
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  *(void *)(a1 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v10 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return a1;
  }
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1DA830(uint64_t a1)
{
  *(void *)a1 = off_2426B10;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    BOOL v3 = *(unsigned char *)(a1 + 24) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
LABEL_23:
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      *(void *)(a1 + 32) = 0;
      uint64_t v6 = *(void *)(a1 + 48);
      if (v6) {
        BOOL v9 = *(unsigned char *)(a1 + 56) == 0;
      }
      else {
        BOOL v9 = 1;
      }
      if (!v9)
      {
LABEL_15:
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        *(void *)(a1 + 48) = 0;
      }
LABEL_16:
      operator delete();
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      BOOL v8 = *(unsigned char *)(a1 + 40) == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      goto LABEL_23;
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    BOOL v7 = *(unsigned char *)(a1 + 56) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    goto LABEL_15;
  }
  goto LABEL_16;
}

uint64_t sub_1DA970(void **a1)
{
  return (*(uint64_t (**)(void *))(*a1[6] + 16))(a1[6]);
}

uint64_t sub_1DAA20(uint64_t a1)
{
  if (!*(unsigned char *)a1) {
    return a1;
  }
  uint64_t v2 = *(void **)(a1 + 16);
  if (*v2 && (*(unsigned int (**)(void))(*(void *)*v2 + 32))(*v2) != 17)
  {
    if (!*v2)
    {
LABEL_8:
      *uint64_t v2 = 0;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(void))(*(void *)*v2 + 32))(*v2) != 18)
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
      }
      goto LABEL_8;
    }
  }
LABEL_9:
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 32))(v4) != 17)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    if (!v5)
    {
LABEL_15:
      *(void *)(v3 + 8) = 0;
      goto LABEL_16;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) != 18)
    {
      uint64_t v6 = *(void *)(v3 + 8);
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      goto LABEL_15;
    }
  }
LABEL_16:
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) != 17)
  {
    uint64_t v9 = *(void *)(v7 + 16);
    if (!v9)
    {
LABEL_22:
      *(void *)(v7 + 16) = 0;
      return a1;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 32))(v9) != 18)
    {
      uint64_t v10 = *(void *)(v7 + 16);
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      goto LABEL_22;
    }
  }
  return a1;
}

uint64_t sub_1DAC24(uint64_t a1, _DWORD *a2, int64x2_t *a3)
{
  if (vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(*a3), (int32x4_t)vceqzq_s64(a3[1]))))) {
    return 0;
  }
  if ((*(unsigned int (**)(__n128))(*(void *)a3->i64[0] + 32))(*(__n128 *)a3) == 2
    && (uint64_t v7 = a3->i64[1]) != 0
    && (*(unsigned int (**)(uint64_t))(*(void *)v7 + 32))(v7) == 2
    && (uint64_t v8 = a3[1].i64[0]) != 0
    && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 32))(v8) == 2
    && (uint64_t v9 = a3[1].i64[1]) != 0
    && (*(unsigned int (**)(uint64_t))(*(void *)v9 + 32))(v9) == 2)
  {
    return sub_1DB85C(a1, a2);
  }
  else
  {
    if (!a3->i64[0]
      || (*(unsigned int (**)(uint64_t))(*(void *)a3->i64[0] + 32))(a3->i64[0]) != 17
      || (uint64_t v10 = a3->i64[1]) == 0
      || (*(unsigned int (**)(uint64_t))(*(void *)v10 + 32))(v10) != 17
      || (uint64_t v11 = a3[1].i64[0]) == 0
      || (*(unsigned int (**)(uint64_t))(*(void *)v11 + 32))(v11) != 17
      || (uint64_t v12 = a3[1].i64[1]) == 0
      || (*(unsigned int (**)(uint64_t))(*(void *)v12 + 32))(v12) != 17)
    {
      switch(*a2)
      {
        case 0x418:
          sub_1DE950();
        case 0x419:
          sub_1DEA48();
        case 0x41A:
          sub_1DEB40();
        case 0x41B:
          sub_1DEC38();
        case 0x41C:
          sub_1DED30();
        case 0x41D:
          sub_1DEE28();
        case 0x41E:
          sub_1DEF20();
        case 0x41F:
          sub_1DF018();
        case 0x420:
          sub_1DF110();
        case 0x421:
          sub_1DF208();
        case 0x422:
          sub_1DF300();
        case 0x423:
          sub_1DF3F8();
        case 0x424:
          sub_1DF4F0();
        case 0x425:
          sub_1DF5E8();
        case 0x426:
          sub_1DF6E0();
        case 0x427:
          sub_1DF7D8();
        case 0x428:
          sub_1DF8D0();
        case 0x429:
          sub_1DF9C8();
        case 0x42A:
          sub_1DFAC0();
        case 0x42B:
          sub_1DFBB8();
        case 0x42C:
          sub_1DFCB0();
        case 0x42D:
          sub_1DFDA8();
        case 0x42E:
          sub_1DFEA0();
        case 0x42F:
          sub_1DFF98();
        case 0x430:
          sub_1E0090();
        case 0x431:
          sub_1E0188();
        case 0x432:
          sub_1E0280();
        case 0x433:
          sub_1E0378();
        case 0x434:
          sub_1E0470();
        case 0x435:
          sub_1E0568();
        case 0x436:
          sub_1E0660();
        case 0x437:
          sub_1E0758();
        case 0x438:
          sub_1E0850();
        case 0x439:
          sub_1E0948();
        case 0x43A:
          sub_1E0A40();
        case 0x43B:
          sub_1E0B38();
        case 0x43C:
          sub_1E0C30();
        case 0x43D:
          sub_1E0D28();
        case 0x43E:
          sub_1E0E20();
        case 0x43F:
          sub_1E0F18();
        case 0x440:
          sub_1E1010();
        case 0x441:
          sub_1E1108();
        case 0x442:
          sub_1E1200();
        case 0x443:
          sub_1E12F8();
        case 0x444:
          sub_1E13F0();
        case 0x445:
          sub_1E14E8();
        case 0x446:
          sub_1E15E0();
        case 0x447:
          sub_1E16D8();
        case 0x448:
          sub_1E17D0();
        case 0x449:
          sub_1E18C8();
        case 0x44A:
          sub_1E19C0();
        case 0x44B:
          sub_1E1AB8();
        default:
          return 0;
      }
      return 0;
    }
    return sub_1DDCBC(a1, a2, a3);
  }
}

uint64_t sub_1DB85C(uint64_t a1, _DWORD *a2)
{
  switch(*a2)
  {
    case 0x418:
      operator new();
    case 0x419:
      operator new();
    case 0x41A:
      operator new();
    case 0x41B:
      operator new();
    case 0x41C:
      operator new();
    case 0x41D:
      operator new();
    case 0x41E:
      operator new();
    case 0x41F:
      operator new();
    case 0x420:
      operator new();
    case 0x421:
      operator new();
    case 0x422:
      operator new();
    case 0x423:
      operator new();
    case 0x424:
      operator new();
    case 0x425:
      operator new();
    case 0x426:
      operator new();
    case 0x427:
      operator new();
    case 0x428:
      operator new();
    case 0x429:
      operator new();
    case 0x42A:
      operator new();
    case 0x42B:
      operator new();
    case 0x42C:
      operator new();
    case 0x42D:
      operator new();
    case 0x42E:
      operator new();
    case 0x42F:
      operator new();
    case 0x430:
      operator new();
    case 0x431:
      operator new();
    case 0x432:
      operator new();
    case 0x433:
      operator new();
    case 0x434:
      operator new();
    case 0x435:
      operator new();
    case 0x436:
      operator new();
    case 0x437:
      operator new();
    case 0x438:
      operator new();
    case 0x439:
      operator new();
    case 0x43A:
      operator new();
    case 0x43B:
      operator new();
    case 0x43C:
      operator new();
    case 0x43D:
      operator new();
    case 0x43E:
      operator new();
    case 0x43F:
      operator new();
    case 0x440:
      operator new();
    case 0x441:
      operator new();
    case 0x442:
      operator new();
    case 0x443:
      operator new();
    case 0x444:
      operator new();
    case 0x445:
      operator new();
    case 0x446:
      operator new();
    case 0x447:
      operator new();
    case 0x448:
      operator new();
    case 0x449:
      operator new();
    case 0x44A:
      operator new();
    case 0x44B:
      operator new();
    default:
      return 0;
  }
}

void sub_1DDAFC()
{
}

uint64_t sub_1DDCBC(uint64_t a1, _DWORD *a2, void **a3)
{
  switch(*a2)
  {
    case 0x418:
      operator new();
    case 0x419:
      operator new();
    case 0x41A:
      operator new();
    case 0x41B:
      operator new();
    case 0x41C:
      operator new();
    case 0x41D:
      operator new();
    case 0x41E:
      operator new();
    case 0x41F:
      operator new();
    case 0x420:
      operator new();
    case 0x421:
      operator new();
    case 0x422:
      operator new();
    case 0x423:
      operator new();
    case 0x424:
      operator new();
    case 0x425:
      operator new();
    case 0x426:
      operator new();
    case 0x427:
      operator new();
    case 0x428:
      operator new();
    case 0x429:
      operator new();
    case 0x42A:
      operator new();
    case 0x42B:
      operator new();
    case 0x42C:
      operator new();
    case 0x42D:
      operator new();
    case 0x42E:
      operator new();
    case 0x42F:
      operator new();
    case 0x430:
      operator new();
    case 0x431:
      operator new();
    case 0x432:
      operator new();
    case 0x433:
      operator new();
    case 0x434:
      operator new();
    case 0x435:
      operator new();
    case 0x436:
      operator new();
    case 0x437:
      operator new();
    case 0x438:
      operator new();
    case 0x439:
      operator new();
    case 0x43A:
      operator new();
    case 0x43B:
      operator new();
    case 0x43C:
      operator new();
    case 0x43D:
      operator new();
    case 0x43E:
      operator new();
    case 0x43F:
      operator new();
    case 0x440:
      operator new();
    case 0x441:
      operator new();
    case 0x442:
      operator new();
    case 0x443:
      operator new();
    case 0x444:
      operator new();
    case 0x445:
      operator new();
    case 0x446:
      operator new();
    case 0x447:
      operator new();
    case 0x448:
      operator new();
    case 0x449:
      operator new();
    case 0x44A:
      operator new();
    case 0x44B:
      operator new();
    default:
      return 0;
  }
}

void sub_1DE950()
{
}

void sub_1DEA24()
{
}

void sub_1DEA48()
{
}

void sub_1DEB1C()
{
}

void sub_1DEB40()
{
}

void sub_1DEC14()
{
}

void sub_1DEC38()
{
}

void sub_1DED0C()
{
}

void sub_1DED30()
{
}

void sub_1DEE04()
{
}

void sub_1DEE28()
{
}

void sub_1DEEFC()
{
}

void sub_1DEF20()
{
}

void sub_1DEFF4()
{
}

void sub_1DF018()
{
}

void sub_1DF0EC()
{
}

void sub_1DF110()
{
}

void sub_1DF1E4()
{
}

void sub_1DF208()
{
}

void sub_1DF2DC()
{
}

void sub_1DF300()
{
}

void sub_1DF3D4()
{
}

void sub_1DF3F8()
{
}

void sub_1DF4CC()
{
}

void sub_1DF4F0()
{
}

void sub_1DF5C4()
{
}

void sub_1DF5E8()
{
}

void sub_1DF6BC()
{
}

void sub_1DF6E0()
{
}

void sub_1DF7B4()
{
}

void sub_1DF7D8()
{
}

void sub_1DF8AC()
{
}

void sub_1DF8D0()
{
}

void sub_1DF9A4()
{
}

void sub_1DF9C8()
{
}

void sub_1DFA9C()
{
}

void sub_1DFAC0()
{
}

void sub_1DFB94()
{
}

void sub_1DFBB8()
{
}

void sub_1DFC8C()
{
}

void sub_1DFCB0()
{
}

void sub_1DFD84()
{
}

void sub_1DFDA8()
{
}

void sub_1DFE7C()
{
}

void sub_1DFEA0()
{
}

void sub_1DFF74()
{
}

void sub_1DFF98()
{
}

void sub_1E006C()
{
}

void sub_1E0090()
{
}

void sub_1E0164()
{
}

void sub_1E0188()
{
}

void sub_1E025C()
{
}

void sub_1E0280()
{
}

void sub_1E0354()
{
}

void sub_1E0378()
{
}

void sub_1E044C()
{
}

void sub_1E0470()
{
}

void sub_1E0544()
{
}

void sub_1E0568()
{
}

void sub_1E063C()
{
}

void sub_1E0660()
{
}

void sub_1E0734()
{
}

void sub_1E0758()
{
}

void sub_1E082C()
{
}

void sub_1E0850()
{
}

void sub_1E0924()
{
}

void sub_1E0948()
{
}

void sub_1E0A1C()
{
}

void sub_1E0A40()
{
}

void sub_1E0B14()
{
}

void sub_1E0B38()
{
}

void sub_1E0C0C()
{
}

void sub_1E0C30()
{
}

void sub_1E0D04()
{
}

void sub_1E0D28()
{
}

void sub_1E0DFC()
{
}

void sub_1E0E20()
{
}

void sub_1E0EF4()
{
}

void sub_1E0F18()
{
}

void sub_1E0FEC()
{
}

void sub_1E1010()
{
}

void sub_1E10E4()
{
}

void sub_1E1108()
{
}

void sub_1E11DC()
{
}

void sub_1E1200()
{
}

void sub_1E12D4()
{
}

void sub_1E12F8()
{
}

void sub_1E13CC()
{
}

void sub_1E13F0()
{
}

void sub_1E14C4()
{
}

void sub_1E14E8()
{
}

void sub_1E15BC()
{
}

void sub_1E15E0()
{
}

void sub_1E16B4()
{
}

void sub_1E16D8()
{
}

void sub_1E17AC()
{
}

void sub_1E17D0()
{
}

void sub_1E18A4()
{
}

void sub_1E18C8()
{
}

void sub_1E199C()
{
}

void sub_1E19C0()
{
}

void sub_1E1A94()
{
}

void sub_1E1AB8()
{
}

void sub_1E1B8C()
{
}

void sub_1E1BB4()
{
}

double sub_1E1BC8(double **a1)
{
  return *a1[1] + (*a1[2] + *a1[3]) / *a1[4];
}

uint64_t sub_1E1BF0()
{
  return 6;
}

void sub_1E1BFC()
{
}

double sub_1E1C10(double **a1)
{
  return *a1[1] + (*a1[2] + *a1[3]) * *a1[4];
}

uint64_t sub_1E1C38()
{
  return 6;
}

void sub_1E1C44()
{
}

double sub_1E1C58(double **a1)
{
  return *a1[1] + (*a1[2] - *a1[3]) / *a1[4];
}

uint64_t sub_1E1C80()
{
  return 6;
}

void sub_1E1C8C()
{
}

double sub_1E1CA0(double **a1)
{
  return *a1[1] + (*a1[2] - *a1[3]) * *a1[4];
}

uint64_t sub_1E1CC8()
{
  return 6;
}

void sub_1E1CD4()
{
}

double sub_1E1CE8(double **a1)
{
  return *a1[1] + *a1[2] * *a1[3] / *a1[4];
}

uint64_t sub_1E1D10()
{
  return 6;
}

void sub_1E1D1C()
{
}

double sub_1E1D30(double **a1)
{
  return *a1[1] + *a1[2] * *a1[3] * *a1[4];
}

uint64_t sub_1E1D58()
{
  return 6;
}

void sub_1E1D64()
{
}

double sub_1E1D78(double **a1)
{
  return *a1[1] + *a1[2] / *a1[3] + *a1[4];
}

uint64_t sub_1E1DA0()
{
  return 6;
}

void sub_1E1DAC()
{
}

double sub_1E1DC0(double **a1)
{
  return *a1[1] + *a1[2] / *a1[3] / *a1[4];
}

uint64_t sub_1E1DE8()
{
  return 6;
}

void sub_1E1DF4()
{
}

double sub_1E1E08(double **a1)
{
  return *a1[1] + *a1[2] / *a1[3] * *a1[4];
}

uint64_t sub_1E1E30()
{
  return 6;
}

void sub_1E1E3C()
{
}

double sub_1E1E50(double **a1)
{
  return *a1[1] - (*a1[2] + *a1[3]) / *a1[4];
}

uint64_t sub_1E1E78()
{
  return 6;
}

void sub_1E1E84()
{
}

double sub_1E1E98(double **a1)
{
  return *a1[1] - (*a1[2] + *a1[3]) * *a1[4];
}

uint64_t sub_1E1EC0()
{
  return 6;
}

void sub_1E1ECC()
{
}

double sub_1E1EE0(double **a1)
{
  return *a1[1] - (*a1[2] - *a1[3]) / *a1[4];
}

uint64_t sub_1E1F08()
{
  return 6;
}

void sub_1E1F14()
{
}

double sub_1E1F28(double **a1)
{
  return *a1[1] - (*a1[2] - *a1[3]) * *a1[4];
}

uint64_t sub_1E1F50()
{
  return 6;
}

void sub_1E1F5C()
{
}

double sub_1E1F70(double **a1)
{
  return *a1[1] - *a1[2] * *a1[3] / *a1[4];
}

uint64_t sub_1E1F98()
{
  return 6;
}

void sub_1E1FA4()
{
}

double sub_1E1FB8(double **a1)
{
  return *a1[1] - *a1[2] * *a1[3] * *a1[4];
}

uint64_t sub_1E1FE0()
{
  return 6;
}

void sub_1E1FEC()
{
}

double sub_1E2000(double **a1)
{
  return *a1[1] - *a1[2] / *a1[3] / *a1[4];
}

uint64_t sub_1E2028()
{
  return 6;
}

void sub_1E2034()
{
}

double sub_1E2048(double **a1)
{
  return *a1[1] - *a1[2] / *a1[3] * *a1[4];
}

uint64_t sub_1E2070()
{
  return 6;
}

void sub_1E207C()
{
}

double sub_1E2090(double **a1)
{
  return (*a1[1] + *a1[2]) * *a1[3] - *a1[4];
}

uint64_t sub_1E20B8()
{
  return 6;
}

void sub_1E20C4()
{
}

double sub_1E20D8(double **a1)
{
  return (*a1[1] - *a1[2]) * *a1[3] - *a1[4];
}

uint64_t sub_1E2100()
{
  return 6;
}

void sub_1E210C()
{
}

double sub_1E2120(double **a1)
{
  return *a1[1] * *a1[2] * *a1[3] - *a1[4];
}

uint64_t sub_1E2148()
{
  return 6;
}

void sub_1E2154()
{
}

double sub_1E2168(double **a1)
{
  return *a1[1] / *a1[2] * *a1[3] - *a1[4];
}

uint64_t sub_1E2190()
{
  return 6;
}

void sub_1E219C()
{
}

double sub_1E21B0(double **a1)
{
  return (*a1[1] + *a1[2]) / *a1[3] - *a1[4];
}

uint64_t sub_1E21D8()
{
  return 6;
}

void sub_1E21E4()
{
}

double sub_1E21F8(double **a1)
{
  return (*a1[1] - *a1[2]) / *a1[3] - *a1[4];
}

uint64_t sub_1E2220()
{
  return 6;
}

void sub_1E222C()
{
}

double sub_1E2240(double **a1)
{
  return *a1[1] * *a1[2] / *a1[3] - *a1[4];
}

uint64_t sub_1E2268()
{
  return 6;
}

void sub_1E2274()
{
}

double sub_1E2288(double **a1)
{
  return *a1[1] / *a1[2] / *a1[3] - *a1[4];
}

uint64_t sub_1E22B0()
{
  return 6;
}

void sub_1E22BC()
{
}

double sub_1E22D0(double **a1)
{
  return *a1[1] * *a1[2] + *a1[3] * *a1[4];
}

uint64_t sub_1E22F8()
{
  return 6;
}

void sub_1E2304()
{
}

double sub_1E2318(double **a1)
{
  return *a1[1] * *a1[2] - *a1[3] * *a1[4];
}

uint64_t sub_1E2340()
{
  return 6;
}

void sub_1E234C()
{
}

double sub_1E2360(double **a1)
{
  return *a1[1] * *a1[2] + *a1[3] / *a1[4];
}

uint64_t sub_1E2388()
{
  return 6;
}

void sub_1E2394()
{
}

double sub_1E23A8(double **a1)
{
  return *a1[1] * *a1[2] - *a1[3] / *a1[4];
}

uint64_t sub_1E23D0()
{
  return 6;
}

void sub_1E23DC()
{
}

double sub_1E23F0(double **a1)
{
  return *a1[1] / *a1[2] + *a1[3] / *a1[4];
}

uint64_t sub_1E2418()
{
  return 6;
}

void sub_1E2424()
{
}

double sub_1E2438(double **a1)
{
  return *a1[1] / *a1[2] - *a1[3] / *a1[4];
}

uint64_t sub_1E2460()
{
  return 6;
}

void sub_1E246C()
{
}

double sub_1E2480(double **a1)
{
  return *a1[1] / *a1[2] - *a1[3] * *a1[4];
}

uint64_t sub_1E24A8()
{
  return 6;
}

void sub_1E24B4()
{
}

double sub_1E24C8(double **a1)
{
  return *a1[1] / (*a1[2] + *a1[3] * *a1[4]);
}

uint64_t sub_1E24F0()
{
  return 6;
}

void sub_1E24FC()
{
}

double sub_1E2510(double **a1)
{
  return *a1[1] / (*a1[2] - *a1[3] * *a1[4]);
}

uint64_t sub_1E2538()
{
  return 6;
}

void sub_1E2544()
{
}

double sub_1E2558(double **a1)
{
  return *a1[1] * (*a1[2] + *a1[3] * *a1[4]);
}

uint64_t sub_1E2580()
{
  return 6;
}

void sub_1E258C()
{
}

double sub_1E25A0(double **a1)
{
  return *a1[1] * (*a1[2] - *a1[3] * *a1[4]);
}

uint64_t sub_1E25C8()
{
  return 6;
}

void sub_1E25D4()
{
}

double sub_1E25E8(double **a1)
{
  return *a1[1] * (*a1[2] * *a1[2]) + *a1[3] * (*a1[4] * *a1[4]);
}

uint64_t sub_1E2618()
{
  return 6;
}

void sub_1E2624()
{
}

double sub_1E2638(double **a1)
{
  return *a1[1] * (*a1[2] * (*a1[2] * *a1[2])) + *a1[3] * (*a1[4] * (*a1[4] * *a1[4]));
}

uint64_t sub_1E2670()
{
  return 6;
}

void sub_1E267C()
{
}

double sub_1E2690(double **a1)
{
  uint64_t v1 = a1[2];
  return *a1[1] * (*v1 * *v1 * (*v1 * *v1)) + *a1[3] * (*a1[4] * *a1[4] * (*a1[4] * *a1[4]));
}

uint64_t sub_1E26C8()
{
  return 6;
}

void sub_1E26D4()
{
}

double sub_1E26E8(double **a1)
{
  uint64_t v1 = a1[2];
  return *a1[1] * (*v1 * (*v1 * *v1 * (*v1 * *v1))) + *a1[3] * (*a1[4] * (*a1[4] * *a1[4] * (*a1[4] * *a1[4])));
}

uint64_t sub_1E2728()
{
  return 6;
}

void sub_1E2734()
{
}

double sub_1E2748(double **a1)
{
  double v1 = *a1[2] * (*a1[2] * *a1[2]);
  double v2 = *a1[4];
  return *a1[1] * (v1 * v1) + *a1[3] * (v2 * (v2 * v2) * (v2 * (v2 * v2)));
}

uint64_t sub_1E2788()
{
  return 6;
}

void sub_1E2794()
{
}

double sub_1E27A8(double **a1)
{
  double v1 = a1[2];
  double v2 = a1[4];
  return *a1[1] * (*v1 * (*v1 * (*v1 * *v1) * (*v1 * (*v1 * *v1))))
       + *a1[3] * (*v2 * (*v2 * (*v2 * *v2) * (*v2 * (*v2 * *v2))));
}

uint64_t sub_1E27F0()
{
  return 6;
}

void sub_1E27FC()
{
}

double sub_1E2810(double **a1)
{
  double v1 = *a1[2] * *a1[2] * (*a1[2] * *a1[2]);
  double v2 = *a1[4] * *a1[4] * (*a1[4] * *a1[4]);
  return *a1[1] * (v1 * v1) + *a1[3] * (v2 * v2);
}

uint64_t sub_1E2850()
{
  return 6;
}

void sub_1E285C()
{
}

double sub_1E2870(double **a1)
{
  double v1 = a1[4];
  double v2 = *a1[2];
  return *a1[1] * (v2 * (v2 * v2 * (v2 * v2) * (v2 * v2 * (v2 * v2))))
       + *a1[3] * (*v1 * (*v1 * *v1 * (*v1 * *v1) * (*v1 * *v1 * (*v1 * *v1))));
}

uint64_t sub_1E28B8()
{
  return 6;
}

void sub_1E28C4()
{
}

double sub_1E28D8(uint64_t a1)
{
  BOOL v1 = **(double **)(a1 + 16) == 0.0 || **(double **)(a1 + 8) == 0.0;
  uint64_t v2 = 32;
  if (!v1) {
    uint64_t v2 = 24;
  }
  return **(double **)(a1 + v2);
}

uint64_t sub_1E2908()
{
  return 6;
}

void sub_1E2914()
{
}

double sub_1E2928(uint64_t a1)
{
  BOOL v1 = **(double **)(a1 + 16) == 0.0 && **(double **)(a1 + 8) == 0.0;
  uint64_t v2 = 32;
  if (!v1) {
    uint64_t v2 = 24;
  }
  return **(double **)(a1 + v2);
}

uint64_t sub_1E2958()
{
  return 6;
}

void sub_1E2964()
{
}

double sub_1E2978(uint64_t a1)
{
  if (**(double **)(a1 + 8) >= **(double **)(a1 + 16)) {
    uint64_t v1 = a1 + 32;
  }
  else {
    uint64_t v1 = a1 + 24;
  }
  return **(double **)v1;
}

uint64_t sub_1E29A0()
{
  return 6;
}

void sub_1E29AC()
{
}

double sub_1E29C0(uint64_t a1)
{
  if (**(double **)(a1 + 8) <= **(double **)(a1 + 16)) {
    uint64_t v1 = a1 + 24;
  }
  else {
    uint64_t v1 = a1 + 32;
  }
  return **(double **)v1;
}

uint64_t sub_1E29E8()
{
  return 6;
}

void sub_1E29F4()
{
}

double sub_1E2A08(uint64_t a1)
{
  if (**(double **)(a1 + 8) <= **(double **)(a1 + 16)) {
    uint64_t v1 = a1 + 32;
  }
  else {
    uint64_t v1 = a1 + 24;
  }
  return **(double **)v1;
}

uint64_t sub_1E2A30()
{
  return 6;
}

void sub_1E2A3C()
{
}

double sub_1E2A50(uint64_t a1)
{
  if (**(double **)(a1 + 8) >= **(double **)(a1 + 16)) {
    uint64_t v1 = a1 + 24;
  }
  else {
    uint64_t v1 = a1 + 32;
  }
  return **(double **)v1;
}

uint64_t sub_1E2A78()
{
  return 6;
}

void sub_1E2A84()
{
}

double sub_1E2A98(uint64_t a1)
{
  uint64_t v1 = *(double **)(a1 + 8);
  uint64_t v2 = *(double **)(a1 + 16);
  double v3 = *v1;
  double v4 = *v2;
  double v5 = *v1 - *v2;
  if (v5 < 0.0) {
    double v5 = -v5;
  }
  if (v3 < 0.0) {
    double v3 = -v3;
  }
  if (v4 < 0.0) {
    double v4 = -v4;
  }
  if (v3 < v4) {
    double v3 = v4;
  }
  if (v3 <= 1.0) {
    double v6 = 1.0e-10;
  }
  else {
    double v6 = v3 * 1.0e-10;
  }
  if (v5 > v6) {
    uint64_t v7 = a1 + 32;
  }
  else {
    uint64_t v7 = a1 + 24;
  }
  return **(double **)v7;
}

uint64_t sub_1E2B08()
{
  return 6;
}

void sub_1E2B14()
{
}

long double sub_1E2B28(uint64_t a1)
{
  uint64_t v1 = *(double **)(a1 + 24);
  uint64_t v2 = *(long double **)(a1 + 32);
  double v3 = **(double **)(a1 + 8);
  long double v4 = v3 * sin(**(long double **)(a1 + 16));
  double v5 = *v1;
  return v4 + v5 * cos(*v2);
}

uint64_t sub_1E2B78()
{
  return 6;
}

void sub_1E2B84(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E2BBC(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 + (v3 + v4) / (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E2CA8(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E2CE0(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 + (v3 + v4) * (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E2DCC(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E2E04(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 + (v3 - v4) / (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E2EF0(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E2F28(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 + (v3 - v4) * (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E3014(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E304C(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 + v3 * v4 / (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E3138(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E3170(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 + v3 * v4 * (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E325C(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E3294(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 + v3 / v4 + (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E3380(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E33B8(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 + v3 / v4 / (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E34A4(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E34DC(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 + v3 / v4 * (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E35C8(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E3600(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 - (v3 + v4) / (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E36EC(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E3724(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 - (v3 + v4) * (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E3810(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E3848(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 - (v3 - v4) / (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E3934(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E396C(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 - (v3 - v4) * (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E3A58(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E3A90(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 - v3 * v4 / (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E3B7C(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E3BB4(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 - v3 * v4 * (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E3CA0(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E3CD8(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 - v3 / v4 / (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E3DC4(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E3DFC(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 - v3 / v4 * (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E3EE8(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E3F20(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return (v2 + v3) * v4 - (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E400C(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E4044(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return (v2 - v3) * v4 - (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E4130(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E4168(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * v3 * v4 - (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E4254(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E428C(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 / v3 * v4 - (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E4378(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E43B0(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return (v2 + v3) / v4 - (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E449C(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E44D4(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return (v2 - v3) / v4 - (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E45C0(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E45F8(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * v3 / v4 - (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E46E4(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E471C(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 / v3 / v4 - (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E4808(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E4840(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * v3 + v4 * (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E492C(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E4964(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * v3 - v4 * (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E4A50(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E4A88(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * v3 + v4 / (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E4B74(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E4BAC(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * v3 - v4 / (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E4C98(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E4CD0(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 / v3 + v4 / (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E4DBC(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E4DF4(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 / v3 - v4 / (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E4EE0(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E4F18(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 / v3 - v4 * (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E5004(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E503C(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 / (v3 + v4 * (*(double (**)(void *))(*a1[8] + 16))(a1[8]));
}

void sub_1E5128(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E5160(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 / (v3 - v4 * (*(double (**)(void *))(*a1[8] + 16))(a1[8]));
}

void sub_1E524C(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E5284(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * (v3 + v4 * (*(double (**)(void *))(*a1[8] + 16))(a1[8]));
}

void sub_1E5370(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E53A8(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  return v2 * (v3 - v4 * (*(double (**)(void *))(*a1[8] + 16))(a1[8]));
}

void sub_1E5494(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E54CC(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  double v5 = (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
  return v2 * (v3 * v3) + v4 * (v5 * v5);
}

void sub_1E55C0(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E55F8(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  double v5 = (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
  return v2 * (v3 * (v3 * v3)) + v4 * (v5 * (v5 * v5));
}

void sub_1E56F4(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E572C(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  double v5 = (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
  return v2 * (v3 * v3 * (v3 * v3)) + v4 * (v5 * v5 * (v5 * v5));
}

void sub_1E5828(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E5860(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  double v5 = (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
  return v2 * (v3 * (v3 * v3 * (v3 * v3))) + v4 * (v5 * (v5 * v5 * (v5 * v5)));
}

void sub_1E5964(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E599C(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  double v5 = (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
  return v2 * (v3 * (v3 * v3) * (v3 * (v3 * v3))) + v4 * (v5 * (v5 * v5) * (v5 * (v5 * v5)));
}

void sub_1E5AA0(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E5AD8(void **a1)
{
  double v9 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v8 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v7 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  double v2 = (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
  v3.f64[0] = v8;
  v3.f64[1] = v2;
  float64x2_t v4 = vmulq_f64(v3, vmulq_f64(v3, v3));
  float64x2_t v5 = vmulq_f64(v3, vmulq_f64(v4, v4));
  v3.f64[0] = v9;
  v3.f64[1] = v7;
  return vaddvq_f64(vmulq_f64(v3, v5));
}

void sub_1E5BD8(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E5C10(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  double v5 = (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
  return v2 * (v3 * v3 * (v3 * v3) * (v3 * v3 * (v3 * v3))) + v4 * (v5 * v5 * (v5 * v5) * (v5 * v5 * (v5 * v5)));
}

void sub_1E5D14(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

double sub_1E5D4C(void **a1)
{
  double v10 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  double v9 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v8 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  double v2 = (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
  v3.f64[0] = v9;
  v3.f64[1] = v2;
  float64x2_t v4 = vmulq_f64(v3, v3);
  float64x2_t v5 = vmulq_f64(v4, v4);
  float64x2_t v6 = vmulq_f64(v3, vmulq_f64(v5, v5));
  v3.f64[0] = v10;
  v3.f64[1] = v8;
  return vaddvq_f64(vmulq_f64(v3, v6));
}

void sub_1E5E4C(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

uint64_t sub_1E5E84(void **a1)
{
  return (*(uint64_t (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E5F74(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

uint64_t sub_1E5FAC(void **a1)
{
  return (*(uint64_t (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E609C(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

uint64_t sub_1E60D4(void **a1)
{
  return (*(uint64_t (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E61BC(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

uint64_t sub_1E61F4(void **a1)
{
  return (*(uint64_t (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E62DC(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

uint64_t sub_1E6314(void **a1)
{
  return (*(uint64_t (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E63FC(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

uint64_t sub_1E6434(void **a1)
{
  return (*(uint64_t (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E651C(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

uint64_t sub_1E6554(void **a1)
{
  return (*(uint64_t (**)(void *))(*a1[8] + 16))(a1[8]);
}

void sub_1E6684(uint64_t a1)
{
  sub_1BECA8(a1);

  operator delete();
}

long double sub_1E66BC(void **a1)
{
  double v2 = (*(double (**)(void *))(*a1[2] + 16))(a1[2]);
  long double v3 = (*(double (**)(void *))(*a1[4] + 16))(a1[4]);
  double v4 = (*(double (**)(void *))(*a1[6] + 16))(a1[6]);
  long double v5 = (*(double (**)(void *))(*a1[8] + 16))(a1[8]);
  long double v6 = v2 * sin(v3);
  return v6 + v4 * cos(v5);
}

BOOL sub_1E67B8(uint64_t a1)
{
  unint64_t v2 = 0;
  BOOL v3 = 1;
  while (1)
  {
    double v4 = &word_25559A8[12 * v2];
    BOOL v5 = *(char *)(a1 + 23) < 0;
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a1 + 8);
    }
    uint64_t v7 = *((unsigned __int8 *)v4 + 23);
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *((void *)v4 + 1);
    }
    if (v6 == v7) {
      break;
    }
LABEL_2:
    BOOL v3 = v2++ < 0x56;
    if (v2 == 87) {
      return v3;
    }
  }
  if (v6)
  {
    unint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = v5 ? *(void *)a1 : a1;
      __darwin_ct_rune_t v10 = __tolower(*(char *)(v9 + v8));
      uint64_t v11 = *((char *)v4 + 23) >= 0 ? &word_25559A8[12 * v2] : *(__int16 **)v4;
      if (v10 != __tolower(*((char *)v11 + v8))) {
        break;
      }
      ++v8;
      BOOL v5 = *(char *)(a1 + 23) < 0;
      unint64_t v12 = *(unsigned __int8 *)(a1 + 23);
      if ((v12 & 0x80u) != 0) {
        unint64_t v12 = *(void *)(a1 + 8);
      }
      if (v8 >= v12) {
        return v3;
      }
    }
    goto LABEL_2;
  }
  return v3;
}

BOOL sub_1E68C0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(void *)(a1 + 880);
  if (*(void *)(a1 + 888) != v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = *(void *)(*(void *)(a1 + 872) + 656);
    do
    {
      unint64_t v8 = (unsigned __int8 *)(v4 + 96 * v5);
      if (*((void *)v8 + 5) <= v6)
      {
        int v9 = (char)v8[23];
        uint64_t v10 = v8[23];
        BOOL v11 = v9 < 0;
        size_t v12 = *((void *)v8 + 1);
        if (v9 < 0) {
          uint64_t v10 = *((void *)v8 + 1);
        }
        uint64_t v13 = a2[23];
        if ((v13 & 0x80u) != 0) {
          uint64_t v13 = *((void *)a2 + 1);
        }
        if (v10 == v13)
        {
          if (v10)
          {
            unint64_t v14 = 0;
            while (1)
            {
              uint64_t v15 = v11 ? *(void *)v8 : v4 + 96 * v5;
              __darwin_ct_rune_t v16 = __tolower(*(char *)(v15 + v14));
              uint64_t v17 = (a2[23] & 0x80u) == 0 ? a2 : *(unsigned __int8 **)a2;
              if (v16 != __tolower((char)v17[v14])) {
                break;
              }
              ++v14;
              int v9 = (char)v8[23];
              unint64_t v18 = v8[23];
              BOOL v11 = v9 < 0;
              size_t v12 = *((void *)v8 + 1);
              if (v9 < 0) {
                unint64_t v18 = *((void *)v8 + 1);
              }
              if (v14 >= v18) {
                goto LABEL_3;
              }
            }
          }
          else
          {
LABEL_3:
            unsigned int v7 = v9;
            if (*(void *)(v4 + 96 * v5 + 32) == -1) {
              goto LABEL_25;
            }
          }
        }
      }
      ++v5;
      uint64_t v4 = *(void *)(a1 + 880);
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 888) - v4) >> 5));
  }
  unint64_t v8 = (unsigned __int8 *)(a1 + 904);
  unsigned int v7 = *(unsigned __int8 *)(a1 + 927);
  size_t v12 = *(void *)(a1 + 912);
LABEL_25:
  if ((v7 & 0x80u) == 0) {
    size_t v19 = v7;
  }
  else {
    size_t v19 = v12;
  }
  uint64_t v20 = a2[23];
  int v21 = (char)v20;
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = *((void *)a2 + 1);
  }
  if (v19 == v20)
  {
    if (v21 >= 0) {
      uint64_t v22 = a2;
    }
    else {
      uint64_t v22 = *(unsigned __int8 **)a2;
    }
    if ((v7 & 0x80) != 0)
    {
      BOOL v32 = memcmp(*(const void **)v8, v22, v12) == 0;
    }
    else if (v7)
    {
      uint64_t v23 = v7 - 1;
      uint64_t v24 = v8;
      do
      {
        int v26 = *v24++;
        int v25 = v26;
        int v28 = *v22++;
        int v27 = v28;
        BOOL v30 = v23-- != 0;
        BOOL v31 = v25 == v27;
        BOOL v32 = v25 == v27;
      }
      while (v31 && v30);
    }
    else
    {
      BOOL v32 = 1;
    }
  }
  else
  {
    BOOL v32 = 0;
  }
  return v8[68] && v32;
}

uint64_t sub_1E6AB4(std::string::size_type a1, std::string *a2)
{
  BOOL v3 = (_DWORD *)(a1 + 104);
  if (*(_DWORD *)(a1 + 104) != 91)
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9AD0;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR139 - Expected '[' as part of vector size definition");
    memset(&v114, 0, sizeof(v114));
    std::string::push_back(&v114, 54);
    std::string::push_back(&v114, 53);
    std::string::push_back(&v114, 49);
    std::string::push_back(&v114, 52);
    std::string::push_back(&v114, 50);
    std::string::size_type size = HIBYTE(v114.__r_.__value_.__r.__words[2]);
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v7 = &v114;
    }
    else {
      unsigned int v7 = (std::string *)v114.__r_.__value_.__r.__words[0];
    }
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v114.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      unint64_t v8 = (std::string *)((char *)v7 + size - 1);
      if (v8 > v7)
      {
        int v9 = &v7->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v10 = *(v9 - 1);
          *(v9 - 1) = v8->__r_.__value_.__s.__data_[0];
          v8->__r_.__value_.__s.__data_[0] = v10;
          unint64_t v8 = (std::string *)((char *)v8 - 1);
          BOOL v11 = v9++ >= (char *)v8;
        }
        while (!v11);
      }
    }
    size_t v12 = std::string::insert(&v114, 0, "exprtk.hpp:");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v115.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v117.__r_.__value_.__s + 23) = 0;
    v117.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v118 = -1;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    uint64_t v125 = 0;
    int v119 = 1;
    LODWORD(v116) = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v117, (const std::string *)(a1 + 112));
    uint64_t v118 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v120, &__str);
    std::string::operator=((std::string *)((char *)&v121 + 8), &v115);
    uint64_t v14 = *(void *)(a1 + 568);
    uint64_t v15 = *(void *)(a1 + 560);
    uint64_t v16 = 30 * ((v14 - v15) >> 3) - 1;
    if (v14 == v15) {
      uint64_t v16 = 0;
    }
    if (v16 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v15 = *(void *)(a1 + 560);
      uint64_t v14 = *(void *)(a1 + 568);
    }
    if (v14 == v15)
    {
      uint64_t v18 = 0;
    }
    else
    {
      unint64_t v17 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v18 = *(void *)(v15 + 8 * (v17 / 0x1E)) + 136 * (v17 % 0x1E);
    }
    sub_B5158(v18, (uint64_t)&v116);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v124) < 0)
    {
      operator delete((void *)v123);
      if ((SHIBYTE(v122) & 0x80000000) == 0)
      {
LABEL_65:
        if ((SBYTE7(v121) & 0x80000000) == 0) {
          goto LABEL_66;
        }
        goto LABEL_73;
      }
    }
    else if ((SHIBYTE(v122) & 0x80000000) == 0)
    {
      goto LABEL_65;
    }
    operator delete(*((void **)&v121 + 1));
    if ((SBYTE7(v121) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_67;
      }
      goto LABEL_74;
    }
LABEL_73:
    operator delete((void *)v120);
    if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_67:
      if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_68;
      }
      goto LABEL_75;
    }
LABEL_74:
    operator delete(v117.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_68:
      if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_69;
      }
      goto LABEL_76;
    }
LABEL_75:
    operator delete(v115.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_69:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
      goto LABEL_77;
    }
LABEL_76:
    operator delete(v114.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
LABEL_77:
    uint64_t v52 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_124:
    operator delete(v52);
    return 0;
  }
  std::string::size_type v5 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v5) {
    std::string::size_type v5 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v5 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v5;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v5 + 8));
  *(void *)(a1 + 136) = *(void *)(v5 + 32);
  uint64_t v19 = sub_B7FE4(a1, 0);
  if (!v19)
  {
    std::operator+<char>();
    uint64_t v39 = std::string::append(&v115, "'");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    memset(&v113, 0, sizeof(v113));
    std::string::push_back(&v113, 54);
    std::string::push_back(&v113, 54);
    std::string::push_back(&v113, 49);
    std::string::push_back(&v113, 52);
    std::string::push_back(&v113, 50);
    std::string::size_type v41 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v42 = &v113;
    }
    else {
      long long v42 = (std::string *)v113.__r_.__value_.__r.__words[0];
    }
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v41 = v113.__r_.__value_.__l.__size_;
    }
    if (v41)
    {
      std::string::size_type v43 = (std::string *)((char *)v42 + v41 - 1);
      if (v43 > v42)
      {
        long long v44 = &v42->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v45 = *(v44 - 1);
          *(v44 - 1) = v43->__r_.__value_.__s.__data_[0];
          v43->__r_.__value_.__s.__data_[0] = v45;
          std::string::size_type v43 = (std::string *)((char *)v43 - 1);
          BOOL v11 = v44++ >= (char *)v43;
        }
        while (!v11);
      }
    }
    long long v46 = std::string::insert(&v113, 0, "exprtk.hpp:");
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v114.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v117.__r_.__value_.__s + 23) = 0;
    v117.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v118 = -1;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    uint64_t v125 = 0;
    int v119 = 1;
    LODWORD(v116) = *v3;
    std::string::operator=(&v117, (const std::string *)(a1 + 112));
    uint64_t v118 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v120, &__str);
    std::string::operator=((std::string *)((char *)&v121 + 8), &v114);
    uint64_t v48 = *(void *)(a1 + 568);
    uint64_t v49 = *(void *)(a1 + 560);
    uint64_t v50 = 30 * ((v48 - v49) >> 3) - 1;
    if (v48 == v49) {
      uint64_t v50 = 0;
    }
    if (v50 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v49 = *(void *)(a1 + 560);
      uint64_t v48 = *(void *)(a1 + 568);
    }
    if (v48 == v49)
    {
      uint64_t v38 = 0;
    }
    else
    {
      unint64_t v51 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v38 = *(void *)(v49 + 8 * (v51 / 0x1E)) + 136 * (v51 % 0x1E);
    }
LABEL_107:
    sub_B5158(v38, (uint64_t)&v116);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v124) < 0)
    {
      operator delete((void *)v123);
      if ((SHIBYTE(v122) & 0x80000000) == 0)
      {
LABEL_109:
        if ((SBYTE7(v121) & 0x80000000) == 0) {
          goto LABEL_110;
        }
        goto LABEL_118;
      }
    }
    else if ((SHIBYTE(v122) & 0x80000000) == 0)
    {
      goto LABEL_109;
    }
    operator delete(*((void **)&v121 + 1));
    if ((SBYTE7(v121) & 0x80000000) == 0)
    {
LABEL_110:
      if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_111;
      }
      goto LABEL_119;
    }
LABEL_118:
    operator delete((void *)v120);
    if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_111:
      if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_112;
      }
      goto LABEL_120;
    }
LABEL_119:
    operator delete(v117.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_112:
      if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_113;
      }
      goto LABEL_121;
    }
LABEL_120:
    operator delete(v114.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_113:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_114;
      }
      goto LABEL_122;
    }
LABEL_121:
    operator delete(v113.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_114:
      if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
      goto LABEL_123;
    }
LABEL_122:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
LABEL_123:
    uint64_t v52 = (void *)v115.__r_.__value_.__r.__words[0];
    goto LABEL_124;
  }
  uint64_t v20 = v19;
  int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 32))(v19);
  uint64_t v22 = *(void *)v20;
  if (v21 != 2)
  {
    if ((*(unsigned int (**)(uint64_t))(v22 + 32))(v20) != 17
      && (*(unsigned int (**)(uint64_t))(*(void *)v20 + 32))(v20) != 18)
    {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    std::operator+<char>();
    uint64_t v53 = std::string::append(&v115, "'");
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    memset(&v113, 0, sizeof(v113));
    std::string::push_back(&v113, 56);
    std::string::push_back(&v113, 55);
    std::string::push_back(&v113, 49);
    std::string::push_back(&v113, 52);
    std::string::push_back(&v113, 50);
    std::string::size_type v55 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v56 = &v113;
    }
    else {
      std::string v56 = (std::string *)v113.__r_.__value_.__r.__words[0];
    }
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v55 = v113.__r_.__value_.__l.__size_;
    }
    if (v55)
    {
      std::string v57 = (std::string *)((char *)v56 + v55 - 1);
      if (v57 > v56)
      {
        std::string v58 = &v56->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v59 = *(v58 - 1);
          *(v58 - 1) = v57->__r_.__value_.__s.__data_[0];
          v57->__r_.__value_.__s.__data_[0] = v59;
          std::string v57 = (std::string *)((char *)v57 - 1);
          BOOL v11 = v58++ >= (char *)v57;
        }
        while (!v11);
      }
    }
    int v60 = std::string::insert(&v113, 0, "exprtk.hpp:");
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v114.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v117.__r_.__value_.__s + 23) = 0;
    v117.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v118 = -1;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    uint64_t v125 = 0;
    int v119 = 1;
    LODWORD(v116) = *v3;
    std::string::operator=(&v117, (const std::string *)(a1 + 112));
    uint64_t v118 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v120, &__str);
    std::string::operator=((std::string *)((char *)&v121 + 8), &v114);
    uint64_t v62 = *(void *)(a1 + 568);
    uint64_t v63 = *(void *)(a1 + 560);
    uint64_t v64 = 30 * ((v62 - v63) >> 3) - 1;
    if (v62 == v63) {
      uint64_t v64 = 0;
    }
    if (v64 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v63 = *(void *)(a1 + 560);
      uint64_t v62 = *(void *)(a1 + 568);
    }
    if (v62 == v63)
    {
      uint64_t v38 = 0;
    }
    else
    {
      unint64_t v65 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v38 = *(void *)(v63 + 8 * (v65 / 0x1E)) + 136 * (v65 % 0x1E);
    }
    goto LABEL_107;
  }
  double v23 = (*(double (**)(uint64_t))(v22 + 16))(v20);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v20 + 32))(v20) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)v20 + 32))(v20) != 18)
  {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  BOOL v24 = v23 > 0.0 && v23 <= 2000000000.0;
  if (!v24 || v23 - (double)(uint64_t)v23 != 0.0)
  {
    sub_B1D70((int)v23, (unint64_t)&v115);
    int v25 = std::string::insert(&v115, 0, "ERR142 - Invalid vector size. Must be an integer in the range [0,2e9], size: ");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    memset(&v113, 0, sizeof(v113));
    std::string::push_back(&v113, 49);
    std::string::push_back(&v113, 48);
    std::string::push_back(&v113, 50);
    std::string::push_back(&v113, 52);
    std::string::push_back(&v113, 50);
    std::string::size_type v27 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v28 = &v113;
    }
    else {
      int v28 = (std::string *)v113.__r_.__value_.__r.__words[0];
    }
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v27 = v113.__r_.__value_.__l.__size_;
    }
    if (v27)
    {
      std::string::size_type v29 = (std::string *)((char *)v28 + v27 - 1);
      if (v29 > v28)
      {
        BOOL v30 = &v28->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v31 = *(v30 - 1);
          *(v30 - 1) = v29->__r_.__value_.__s.__data_[0];
          v29->__r_.__value_.__s.__data_[0] = v31;
          std::string::size_type v29 = (std::string *)((char *)v29 - 1);
          BOOL v11 = v30++ >= (char *)v29;
        }
        while (!v11);
      }
    }
    BOOL v32 = std::string::insert(&v113, 0, "exprtk.hpp:");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v114.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v117.__r_.__value_.__s + 23) = 0;
    v117.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v118 = -1;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    uint64_t v125 = 0;
    int v119 = 1;
    LODWORD(v116) = *v3;
    std::string::operator=(&v117, (const std::string *)(a1 + 112));
    uint64_t v118 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v120, &__str);
    std::string::operator=((std::string *)((char *)&v121 + 8), &v114);
    uint64_t v34 = *(void *)(a1 + 568);
    uint64_t v35 = *(void *)(a1 + 560);
    uint64_t v36 = 30 * ((v34 - v35) >> 3) - 1;
    if (v34 == v35) {
      uint64_t v36 = 0;
    }
    if (v36 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v35 = *(void *)(a1 + 560);
      uint64_t v34 = *(void *)(a1 + 568);
    }
    if (v34 == v35)
    {
      uint64_t v38 = 0;
    }
    else
    {
      unint64_t v37 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v38 = *(void *)(v35 + 8 * (v37 / 0x1E)) + 136 * (v37 % 0x1E);
    }
    goto LABEL_107;
  }
  memset(&v115, 0, sizeof(v115));
  v114.__r_.__value_.__s.__data_[0] = 1;
  v114.__r_.__value_.__l.__size_ = a1;
  v114.__r_.__value_.__r.__words[2] = (std::string::size_type)&v115;
  char v112 = 0;
  LODWORD(v116) = 93;
  if (!sub_BA4D0(a1, (int *)&v116, 1))
  {
    sub_5E5C(&__str, "ERR143 - Expected ']' as part of vector size definition");
    sub_B1D70(0x5E9Cu, (unint64_t)&v111);
    int64x2_t v74 = std::string::insert(&v111, 0, "exprtk.hpp:");
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v113.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    sub_B49F0(1, (uint64_t)v3, &__str, &v113, (uint64_t)&v116);
    sub_B1CB0((void *)a1, (uint64_t)&v116);
    goto LABEL_127;
  }
  LODWORD(v116) = 6;
  if (sub_BA4D0(a1, (int *)&v116, 1))
  {
    BOOL v66 = 0;
    BOOL v67 = 0;
    goto LABEL_102;
  }
  LODWORD(v116) = 10;
  if (!sub_BA4D0(a1, (int *)&v116, 1))
  {
    sub_5E5C(&__str, "ERR144 - Expected ':=' as part of vector definition");
    sub_B1D70(0x5EA8u, (unint64_t)&v111);
    long long v77 = std::string::insert(&v111, 0, "exprtk.hpp:");
    long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
    v113.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v78;
    v77->__r_.__value_.__l.__size_ = 0;
    v77->__r_.__value_.__r.__words[2] = 0;
    v77->__r_.__value_.__r.__words[0] = 0;
    sub_B49F0(1, (uint64_t)v3, &__str, &v113, (uint64_t)&v116);
    sub_B1CB0((void *)a1, (uint64_t)&v116);
    goto LABEL_127;
  }
  LODWORD(v116) = 91;
  if (sub_BA4D0(a1, (int *)&v116, 1))
  {
    v110.__r_.__value_.__r.__words[0] = sub_B7FE4(a1, 0);
    if (!v110.__r_.__value_.__r.__words[0])
    {
      sub_5E5C(&__str, "ERR145 - Failed to parse single vector initialiser");
      sub_B1D70(0x5EB6u, (unint64_t)&v111);
      size_t v82 = std::string::insert(&v111, 0, "exprtk.hpp:");
      long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      v113.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      sub_B49F0(1, (uint64_t)v3, &__str, &v113, (uint64_t)&v116);
      sub_B1CB0((void *)a1, (uint64_t)&v116);
      goto LABEL_127;
    }
    sub_BA194((void **)&v115.__r_.__value_.__l.__data_, &v110);
    LODWORD(v116) = 93;
    if (!sub_BA4D0(a1, (int *)&v116, 1))
    {
      sub_5E5C(&__str, "ERR146 - Expected ']' to close single value vector initialiser");
      sub_B1D70(0x5EC3u, (unint64_t)&v111);
      unint64_t v84 = std::string::insert(&v111, 0, "exprtk.hpp:");
      long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      v113.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v85;
      v84->__r_.__value_.__l.__size_ = 0;
      v84->__r_.__value_.__r.__words[2] = 0;
      v84->__r_.__value_.__r.__words[0] = 0;
      sub_B49F0(1, (uint64_t)v3, &__str, &v113, (uint64_t)&v116);
      sub_B1CB0((void *)a1, (uint64_t)&v116);
      goto LABEL_127;
    }
    BOOL v66 = 0;
    int v76 = 0;
    char v112 = 1;
    goto LABEL_180;
  }
  LODWORD(v116) = 123;
  if (!sub_BA4D0(a1, (int *)&v116, 1))
  {
    v110.__r_.__value_.__r.__words[0] = 0;
    if (*v3 == 8)
    {
      if (*((_DWORD *)sub_1E9738((void *)(a1 + 872), a1 + 112, -1) + 16) == 2)
      {
        uint64_t v81 = sub_B7FE4(a1, 0);
      }
      else
      {
        if (!sub_1E98BC((uint64_t *)(a1 + 440), a1 + 112))
        {
          LODWORD(__str.__r_.__value_.__l.__data_) = 8;
          sub_5E5C(&v116, "null");
          int v76 = sub_1E996C(a1, &__str, (uint64_t)&v116, 1);
          if (v117.__r_.__value_.__s.__data_[15] < 0) {
            operator delete(v116);
          }
LABEL_177:
          BOOL v66 = v76 == 0;
          if (!v76 && !v110.__r_.__value_.__r.__words[0])
          {
            sub_5E5C(&__str, "ERR147 - Expected '{' as part of vector initialiser list");
            sub_B1D70(0x5EF2u, (unint64_t)&v111);
            uint64_t v90 = std::string::insert(&v111, 0, "exprtk.hpp:");
            long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
            v113.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v91;
            v90->__r_.__value_.__l.__size_ = 0;
            v90->__r_.__value_.__r.__words[2] = 0;
            v90->__r_.__value_.__r.__words[0] = 0;
            sub_B49F0(1, (uint64_t)v3, &__str, &v113, (uint64_t)&v116);
            sub_B1CB0((void *)a1, (uint64_t)&v116);
            goto LABEL_127;
          }
          goto LABEL_180;
        }
        sub_D2DB0(a1 + 464, a1 + 112, 2u);
        uint64_t v81 = sub_B7FE4(a1, 0);
      }
      v110.__r_.__value_.__r.__words[0] = v81;
      if (!v81) {
        goto LABEL_190;
      }
      sub_BA194((void **)&v115.__r_.__value_.__l.__data_, &v110);
    }
    int v76 = 0;
    goto LABEL_177;
  }
  LODWORD(v116) = 125;
  if (!sub_BA4D0(a1, (int *)&v116, 1))
  {
    while (1)
    {
      v110.__r_.__value_.__r.__words[0] = 0;
      v110.__r_.__value_.__r.__words[0] = sub_B7FE4(a1, 0);
      if (!v110.__r_.__value_.__r.__words[0])
      {
        sub_5E5C(&__str, "ERR148 - Expected '{' as part of vector initialiser list");
        sub_B1D70(0x5F06u, (unint64_t)&v111);
        long long v99 = std::string::insert(&v111, 0, "exprtk.hpp:");
        long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
        v113.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v100;
        v99->__r_.__value_.__l.__size_ = 0;
        v99->__r_.__value_.__r.__words[2] = 0;
        v99->__r_.__value_.__r.__words[0] = 0;
        sub_B49F0(1, (uint64_t)v3, &__str, &v113, (uint64_t)&v116);
        sub_B1CB0((void *)a1, (uint64_t)&v116);
        goto LABEL_127;
      }
      sub_BA194((void **)&v115.__r_.__value_.__l.__data_, &v110);
      LODWORD(v116) = 125;
      if (sub_BA4D0(a1, (int *)&v116, 1)) {
        goto LABEL_142;
      }
      long long v86 = *(void *)(a1 + 8) == *(void *)(a1 + 24) ? (int *)(a1 + 40) : *(int **)(a1 + 24);
      int v87 = *v86;
      LODWORD(v116) = 44;
      BOOL v88 = sub_BA4D0(a1, (int *)&v116, 1);
      if (v87 == 125 && !v88) {
        break;
      }
      LODWORD(v116) = 125;
      if (sub_BA4D0(a1, (int *)&v116, 1)) {
        goto LABEL_142;
      }
    }
    sub_5E5C(&__str, "ERR149 - Expected ',' between vector initialisers");
    sub_B1D70(0x5F18u, (unint64_t)&v111);
    long long v101 = std::string::insert(&v111, 0, "exprtk.hpp:");
    long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
    v113.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v102;
    v101->__r_.__value_.__l.__size_ = 0;
    v101->__r_.__value_.__r.__words[2] = 0;
    v101->__r_.__value_.__r.__words[0] = 0;
    sub_B49F0(1, (uint64_t)v3, &__str, &v113, (uint64_t)&v116);
    sub_B1CB0((void *)a1, (uint64_t)&v116);
LABEL_127:
    sub_B1ED4((uint64_t)&v116);
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v113.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_129:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_190;
        }
LABEL_133:
        operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_190;
      }
    }
    else if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_129;
    }
    operator delete(v111.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_190;
    }
    goto LABEL_133;
  }
LABEL_142:
  BOOL v66 = 0;
  int v76 = 0;
LABEL_180:
  int v92 = *v3;
  if (*v3 != 41 && v92 != 93 && v92 != 125)
  {
    LODWORD(v116) = 6;
    if (!sub_BA4D0(a1, (int *)&v116, 1))
    {
      sub_5E5C(&__str, "ERR150 - Expected ';' at end of vector definition");
      sub_B1D70(0x5F2Eu, (unint64_t)&v111);
      long long v97 = std::string::insert(&v111, 0, "exprtk.hpp:");
      long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
      v113.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v98;
      v97->__r_.__value_.__l.__size_ = 0;
      v97->__r_.__value_.__r.__words[2] = 0;
      v97->__r_.__value_.__r.__words[0] = 0;
      sub_B49F0(1, (uint64_t)v3, &__str, &v113, (uint64_t)&v116);
      sub_B1CB0((void *)a1, (uint64_t)&v116);
      goto LABEL_127;
    }
  }
  BOOL v67 = v76 != 0;
  if (v23 >= (double)(unint64_t)((uint64_t)(v115.__r_.__value_.__l.__size_ - v115.__r_.__value_.__r.__words[0]) >> 3))
  {
LABEL_102:
    v108[5] = (int)v23;
    long long v109 = 0;
    long long v68 = sub_1C32F0((void *)(a1 + 872), (uint64_t)a2, -1);
    if (sub_A938C((unsigned __int8 *)v68, (unsigned __int8 *)a2))
    {
      if (*((unsigned char *)v68 + 68))
      {
        std::operator+<char>();
        uint64_t v69 = std::string::append(&v113, "'");
        long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v70;
        v69->__r_.__value_.__l.__size_ = 0;
        v69->__r_.__value_.__r.__words[2] = 0;
        v69->__r_.__value_.__r.__words[0] = 0;
        sub_B1D70(0x5F4Eu, (unint64_t)&v110);
        uint64_t v71 = std::string::insert(&v110, 0, "exprtk.hpp:");
        long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        v111.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        sub_B49F0(1, (uint64_t)v3, &__str, &v111, (uint64_t)&v116);
        sub_B1CB0((void *)a1, (uint64_t)&v116);
        goto LABEL_186;
      }
      if (v68[3] == (int)v23 && *((_DWORD *)v68 + 16) == 2)
      {
        long long v109 = (void *)v68[11];
        long long v79 = v109;
        *((unsigned char *)v68 + 68) = 1;
        uint64_t v80 = v68[6] + 1;
        v68[5] = *(void *)(a1 + 656);
        v68[6] = v80;
        if (v79)
        {
          sub_5E5C(&v116, "parse_define_vector_statement()");
          if (!*(unsigned char *)(a1 + 651)) {
            *(unsigned char *)(a1 + 651) = 1;
          }
          if (v117.__r_.__value_.__s.__data_[15] < 0) {
            operator delete(v116);
          }
          sub_D2DB0(a1 + 464, (uint64_t)a2, 7u);
          if (v67) {
            operator new();
          }
          if (v66) {
            sub_1E9AB0();
          }
          __str.__r_.__value_.__r.__words[0] = 0;
          long long v116 = (void *)(*(uint64_t (**)(void, std::string *))(*(void *)*v79 + 32))(*v79, &__str);
          sub_1E9B1C();
        }
      }
    }
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = 3;
    LODWORD(__str.__r_.__value_.__l.__data_) = 4144959;
    uint64_t v104 = -1;
    uint64_t v105 = -1;
    uint64_t v106 = -1;
    uint64_t v107 = 0;
    memset(v108, 0, 13);
    memset(&v108[2], 0, 24);
    std::string::operator=(&__str, a2);
    BYTE4(v108[1]) = 1;
    uint64_t v107 = 1;
    LODWORD(v108[1]) = 2;
    uint64_t v106 = *(void *)(a1 + 656);
    uint64_t v104 = (int)v23;
    operator new[]();
  }
  std::operator+<char>();
  BOOL v93 = std::string::append(&v113, "'");
  long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v94;
  v93->__r_.__value_.__l.__size_ = 0;
  v93->__r_.__value_.__r.__words[2] = 0;
  v93->__r_.__value_.__r.__words[0] = 0;
  sub_B1D70(0x5F3Au, (unint64_t)&v110);
  long long v95 = std::string::insert(&v110, 0, "exprtk.hpp:");
  long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
  v111.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v96;
  v95->__r_.__value_.__l.__size_ = 0;
  v95->__r_.__value_.__r.__words[2] = 0;
  v95->__r_.__value_.__r.__words[0] = 0;
  sub_B49F0(1, (uint64_t)v3, &__str, &v111, (uint64_t)&v116);
  sub_B1CB0((void *)a1, (uint64_t)&v116);
LABEL_186:
  sub_B1ED4((uint64_t)&v116);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v111.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_188:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_189;
      }
LABEL_194:
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_190;
      }
      goto LABEL_195;
    }
  }
  else if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_188;
  }
  operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_194;
  }
LABEL_189:
  if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_190;
  }
LABEL_195:
  operator delete(v113.__r_.__value_.__l.__data_);
LABEL_190:
  sub_22094C((uint64_t)&v114);
  if (v115.__r_.__value_.__r.__words[0])
  {
    v115.__r_.__value_.__l.__size_ = v115.__r_.__value_.__r.__words[0];
    operator delete(v115.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1E8294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  sub_B1ED4(v53 - 248);
  if (a46 < 0)
  {
    operator delete(__p);
    if (a39 < 0) {
      goto LABEL_7;
    }
  }
  else if (a39 < 0)
  {
LABEL_7:
    operator delete(a34);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if ((a18 & 0x80000000) == 0)
  {
LABEL_9:
    sub_22094C((uint64_t)&a48);
    if (a52)
    {
      a53 = (uint64_t)a52;
      operator delete(a52);
    }
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(a13);
  goto LABEL_9;
}

uint64_t sub_1E8834(uint64_t a1, const std::string *a2)
{
  BOOL v3 = (_DWORD *)(a1 + 104);
  if (*(_DWORD *)(a1 + 104) == 123
    && ((uint64_t v5 = *(void *)(a1 + 24), *(void *)(a1 + 8) == v5) ? (uint64_t v5 = a1 + 40) : (*(void *)(a1 + 24) = v5 + 40),
        *(_DWORD *)(a1 + 104) = *(_DWORD *)v5,
        std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v5 + 8)),
        *(void *)(a1 + 136) = *(void *)(v5 + 32),
        *(_DWORD *)(a1 + 104) == 125))
  {
    uint64_t v6 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 8) == v6) {
      uint64_t v6 = a1 + 40;
    }
    else {
      *(void *)(a1 + 24) = v6 + 40;
    }
    *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
    std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
    *(void *)(a1 + 136) = *(void *)(v6 + 32);
    if (*(_DWORD *)(a1 + 104) == 6)
    {
      int v73 = v3;
      uint64_t v22 = *(void *)(a1 + 880);
      if (*(void *)(a1 + 888) != v22)
      {
        unint64_t v23 = 0;
        unint64_t v24 = *(void *)(*(void *)(a1 + 872) + 656);
        do
        {
          long long v26 = (unsigned __int8 *)(v22 + 96 * v23);
          if (*((void *)v26 + 5) <= v24)
          {
            int v27 = (char)v26[23];
            uint64_t v28 = v26[23];
            BOOL v29 = v27 < 0;
            size_t v30 = *((void *)v26 + 1);
            if (v27 < 0) {
              uint64_t v28 = *((void *)v26 + 1);
            }
            std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
            if ((size & 0x80u) != 0) {
              std::string::size_type size = a2->__r_.__value_.__l.__size_;
            }
            if (v28 == size)
            {
              if (v28)
              {
                unint64_t v32 = 0;
                while (1)
                {
                  uint64_t v33 = v29 ? *(void *)v26 : v22 + 96 * v23;
                  __darwin_ct_rune_t v34 = __tolower(*(char *)(v33 + v32));
                  uint64_t v35 = (a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                      ? (unsigned __int8 *)a2
                      : (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
                  if (v34 != __tolower((char)v35[v32])) {
                    break;
                  }
                  ++v32;
                  int v27 = (char)v26[23];
                  unint64_t v36 = v26[23];
                  BOOL v29 = v27 < 0;
                  size_t v30 = *((void *)v26 + 1);
                  if (v27 < 0) {
                    unint64_t v36 = *((void *)v26 + 1);
                  }
                  if (v32 >= v36) {
                    goto LABEL_46;
                  }
                }
              }
              else
              {
LABEL_46:
                LODWORD(v25) = v27;
                if (*(void *)(v22 + 96 * v23 + 32) == -1) {
                  goto LABEL_84;
                }
              }
            }
          }
          ++v23;
          uint64_t v22 = *(void *)(a1 + 880);
        }
        while (v23 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 888) - v22) >> 5));
      }
      long long v26 = (unsigned __int8 *)(a1 + 904);
      LODWORD(v25) = *(unsigned __int8 *)(a1 + 927);
      size_t v30 = *(void *)(a1 + 912);
LABEL_84:
      uint64_t v25 = v25;
      if ((v25 & 0x80u) == 0) {
        size_t v48 = v25;
      }
      else {
        size_t v48 = v30;
      }
      std::string::size_type v49 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      int v50 = (char)v49;
      if ((v49 & 0x80u) != 0) {
        std::string::size_type v49 = a2->__r_.__value_.__l.__size_;
      }
      if (v48 != v49)
      {
LABEL_120:
        *((unsigned char *)&__str.__r_.__value_.__s + 23) = 3;
        LODWORD(__str.__r_.__value_.__l.__data_) = 4144959;
        uint64_t v75 = -1;
        uint64_t v76 = -1;
        uint64_t v77 = -1;
        uint64_t v78 = 0;
        memset(v79, 0, 13);
        memset(&v79[2], 0, 24);
        std::string::operator=(&__str, a2);
        BYTE4(v79[1]) = 1;
        LODWORD(v79[1]) = 1;
        uint64_t v77 = *(void *)(a1 + 656);
        uint64_t v78 = 1;
        uint64_t v68 = *(void *)(a1 + 1000) + 1;
        *(void *)(a1 + 1000) = v68;
        v79[0] = v68;
        operator new();
      }
      if (v50 >= 0) {
        unint64_t v51 = a2;
      }
      else {
        unint64_t v51 = (const std::string *)a2->__r_.__value_.__r.__words[0];
      }
      if ((v25 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v26, v51, v30)) {
          goto LABEL_120;
        }
      }
      else if (v25)
      {
        uint64_t v52 = v26;
        while (*v52 == v51->__r_.__value_.__s.__data_[0])
        {
          ++v52;
          unint64_t v51 = (const std::string *)((char *)v51 + 1);
          if (!--v25) {
            goto LABEL_101;
          }
        }
        goto LABEL_120;
      }
LABEL_101:
      if (v26[68])
      {
        std::operator+<char>();
        uint64_t v53 = std::string::append(&v82, "'");
        long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v54;
        v53->__r_.__value_.__l.__size_ = 0;
        v53->__r_.__value_.__r.__words[2] = 0;
        v53->__r_.__value_.__r.__words[0] = 0;
        memset(&v80, 0, sizeof(v80));
        std::string::push_back(&v80, 50);
        std::string::push_back(&v80, 56);
        std::string::push_back(&v80, 55);
        std::string::push_back(&v80, 52);
        std::string::push_back(&v80, 50);
        std::string::size_type v55 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v56 = &v80;
        }
        else {
          std::string v56 = (std::string *)v80.__r_.__value_.__r.__words[0];
        }
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v55 = v80.__r_.__value_.__l.__size_;
        }
        if (v55)
        {
          std::string v57 = (std::string *)((char *)v56 + v55 - 1);
          if (v57 > v56)
          {
            std::string v58 = &v56->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v59 = *(v58 - 1);
              *(v58 - 1) = v57->__r_.__value_.__s.__data_[0];
              v57->__r_.__value_.__s.__data_[0] = v59;
              std::string v57 = (std::string *)((char *)v57 - 1);
              BOOL v12 = v58++ >= (char *)v57;
            }
            while (!v12);
          }
        }
        int v60 = std::string::insert(&v80, 0, "exprtk.hpp:");
        long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v81.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        char v86 = 0;
        BYTE8(__dst) = 0;
        uint64_t v87 = -1;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        long long __p = 0u;
        long long v93 = 0u;
        uint64_t v94 = 0;
        int v88 = 1;
        LODWORD(__dst) = *v73;
        std::string::operator=((std::string *)((char *)&__dst + 8), (const std::string *)(a1 + 112));
        uint64_t v87 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)&v89, &__str);
        std::string::operator=((std::string *)((char *)&v90 + 8), &v81);
        uint64_t v62 = *(void *)(a1 + 568);
        uint64_t v63 = *(void *)(a1 + 560);
        uint64_t v64 = 30 * ((v62 - v63) >> 3) - 1;
        if (v62 == v63) {
          uint64_t v64 = 0;
        }
        if (v64 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v63 = *(void *)(a1 + 560);
          uint64_t v62 = *(void *)(a1 + 568);
        }
        if (v62 == v63)
        {
          uint64_t v66 = 0;
        }
        else
        {
          unint64_t v65 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v66 = *(void *)(v63 + 8 * (v65 / 0x1E)) + 136 * (v65 % 0x1E);
        }
        sub_B5158(v66, (uint64_t)&__dst);
        ++*(void *)(a1 + 592);
        if (SBYTE7(v93) < 0)
        {
          operator delete((void *)__p);
          if ((SHIBYTE(v91) & 0x80000000) == 0)
          {
LABEL_134:
            if ((SBYTE7(v90) & 0x80000000) == 0) {
              goto LABEL_135;
            }
            goto LABEL_143;
          }
        }
        else if ((SHIBYTE(v91) & 0x80000000) == 0)
        {
          goto LABEL_134;
        }
        operator delete(*((void **)&v90 + 1));
        if ((SBYTE7(v90) & 0x80000000) == 0)
        {
LABEL_135:
          if ((v86 & 0x80000000) == 0) {
            goto LABEL_136;
          }
          goto LABEL_144;
        }
LABEL_143:
        operator delete((void *)v89);
        if ((v86 & 0x80000000) == 0)
        {
LABEL_136:
          if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_137;
          }
          goto LABEL_145;
        }
LABEL_144:
        operator delete(*((void **)&__dst + 1));
        if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_137:
          if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_138;
          }
          goto LABEL_146;
        }
LABEL_145:
        operator delete(v81.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_138:
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_139;
          }
          goto LABEL_147;
        }
LABEL_146:
        operator delete(v80.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_139:
          if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return 0;
          }
          goto LABEL_148;
        }
LABEL_147:
        operator delete(__str.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
LABEL_148:
        uint64_t v20 = (void *)v82.__r_.__value_.__r.__words[0];
        goto LABEL_40;
      }
      if (*((_DWORD *)v26 + 16) != 1) {
        goto LABEL_120;
      }
      uint64_t v67 = *((void *)v26 + 10);
      v26[68] = 1;
      ++*((void *)v26 + 6);
      if (!v67) {
        goto LABEL_120;
      }
      if (*(unsigned char *)(a1 + 472))
      {
        if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
        {
          sub_4200(&__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
          int v85 = 6;
          unint64_t v69 = *(void *)(a1 + 488);
          if (v69 < *(void *)(a1 + 496)) {
            goto LABEL_124;
          }
        }
        else
        {
          long long __dst = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
          std::string::size_type v84 = a2->__r_.__value_.__r.__words[2];
          int v85 = 6;
          unint64_t v69 = *(void *)(a1 + 488);
          if (v69 < *(void *)(a1 + 496))
          {
LABEL_124:
            long long v70 = __dst;
            *(void *)(v69 + 16) = v84;
            *(_OWORD *)unint64_t v69 = v70;
            *(_DWORD *)(v69 + 24) = v85;
            *(void *)(a1 + 488) = v69 + 32;
            goto LABEL_128;
          }
        }
        uint64_t v71 = sub_D2F30((void **)(a1 + 480), (uint64_t)&__dst);
        int v72 = SHIBYTE(v84);
        *(void *)(a1 + 488) = v71;
        if (v72 < 0) {
          operator delete((void *)__dst);
        }
      }
LABEL_128:
      if (!*(unsigned char *)(a1 + 651)) {
        *(unsigned char *)(a1 + 651) = 1;
      }
      operator new();
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9810;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR166 - Expected ';' after uninitialised variable definition");
    memset(&v81, 0, sizeof(v81));
    std::string::push_back(&v81, 53);
    std::string::push_back(&v81, 54);
    std::string::push_back(&v81, 55);
    std::string::push_back(&v81, 52);
    std::string::push_back(&v81, 50);
    std::string::size_type v37 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v38 = &v81;
    }
    else {
      uint64_t v38 = (std::string *)v81.__r_.__value_.__r.__words[0];
    }
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v37 = v81.__r_.__value_.__l.__size_;
    }
    if (v37)
    {
      uint64_t v39 = (std::string *)((char *)v38 + v37 - 1);
      if (v39 > v38)
      {
        long long v40 = &v38->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v41 = *(v40 - 1);
          *(v40 - 1) = v39->__r_.__value_.__s.__data_[0];
          v39->__r_.__value_.__s.__data_[0] = v41;
          uint64_t v39 = (std::string *)((char *)v39 - 1);
          BOOL v12 = v40++ >= (char *)v39;
        }
        while (!v12);
      }
    }
    long long v42 = std::string::insert(&v81, 0, "exprtk.hpp:");
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    char v86 = 0;
    BYTE8(__dst) = 0;
    uint64_t v87 = -1;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long __p = 0u;
    long long v93 = 0u;
    uint64_t v94 = 0;
    int v88 = 1;
    LODWORD(__dst) = *v3;
    std::string::operator=((std::string *)((char *)&__dst + 8), (const std::string *)(a1 + 112));
    uint64_t v87 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v89, &__str);
    std::string::operator=((std::string *)((char *)&v90 + 8), &v82);
    uint64_t v44 = *(void *)(a1 + 568);
    uint64_t v45 = *(void *)(a1 + 560);
    uint64_t v46 = 30 * ((v44 - v45) >> 3) - 1;
    if (v44 == v45) {
      uint64_t v46 = 0;
    }
    if (v46 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v45 = *(void *)(a1 + 560);
      uint64_t v44 = *(void *)(a1 + 568);
    }
    if (v44 == v45)
    {
      uint64_t v19 = 0;
    }
    else
    {
      unint64_t v47 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v19 = *(void *)(v45 + 8 * (v47 / 0x1E)) + 136 * (v47 % 0x1E);
    }
  }
  else
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_20B9A70;
    strcpy(__str.__r_.__value_.__l.__data_, "ERR165 - Expected a '{}' for uninitialised var definition");
    memset(&v81, 0, sizeof(v81));
    std::string::push_back(&v81, 53);
    std::string::push_back(&v81, 53);
    std::string::push_back(&v81, 55);
    std::string::push_back(&v81, 52);
    std::string::push_back(&v81, 50);
    std::string::size_type v7 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v8 = &v81;
    }
    else {
      unint64_t v8 = (std::string *)v81.__r_.__value_.__r.__words[0];
    }
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v7 = v81.__r_.__value_.__l.__size_;
    }
    if (v7)
    {
      int v9 = (std::string *)((char *)v8 + v7 - 1);
      if (v9 > v8)
      {
        std::string::value_type v10 = &v8->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v11 = *(v10 - 1);
          *(v10 - 1) = v9->__r_.__value_.__s.__data_[0];
          v9->__r_.__value_.__s.__data_[0] = v11;
          int v9 = (std::string *)((char *)v9 - 1);
          BOOL v12 = v10++ >= (char *)v9;
        }
        while (!v12);
      }
    }
    long long v13 = std::string::insert(&v81, 0, "exprtk.hpp:");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    char v86 = 0;
    BYTE8(__dst) = 0;
    uint64_t v87 = -1;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long __p = 0u;
    long long v93 = 0u;
    uint64_t v94 = 0;
    int v88 = 1;
    LODWORD(__dst) = *(_DWORD *)(a1 + 104);
    std::string::operator=((std::string *)((char *)&__dst + 8), (const std::string *)(a1 + 112));
    uint64_t v87 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v89, &__str);
    std::string::operator=((std::string *)((char *)&v90 + 8), &v82);
    uint64_t v15 = *(void *)(a1 + 568);
    uint64_t v16 = *(void *)(a1 + 560);
    uint64_t v17 = 30 * ((v15 - v16) >> 3) - 1;
    if (v15 == v16) {
      uint64_t v17 = 0;
    }
    if (v17 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v16 = *(void *)(a1 + 560);
      uint64_t v15 = *(void *)(a1 + 568);
    }
    if (v15 == v16)
    {
      uint64_t v19 = 0;
    }
    else
    {
      unint64_t v18 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v19 = *(void *)(v16 + 8 * (v18 / 0x1E)) + 136 * (v18 % 0x1E);
    }
  }
  sub_B5158(v19, (uint64_t)&__dst);
  ++*(void *)(a1 + 592);
  if (SBYTE7(v93) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v91) & 0x80000000) == 0)
    {
LABEL_27:
      if ((SBYTE7(v90) & 0x80000000) == 0) {
        goto LABEL_28;
      }
      goto LABEL_35;
    }
  }
  else if ((SHIBYTE(v91) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(*((void **)&v90 + 1));
  if ((SBYTE7(v90) & 0x80000000) == 0)
  {
LABEL_28:
    if ((v86 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_36;
  }
LABEL_35:
  operator delete((void *)v89);
  if ((v86 & 0x80000000) == 0)
  {
LABEL_29:
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_37;
  }
LABEL_36:
  operator delete(*((void **)&__dst + 1));
  if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_30:
    if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v82.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_31:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_39;
    }
    return 0;
  }
LABEL_38:
  operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_39:
    uint64_t v20 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_40:
    operator delete(v20);
  }
  return 0;
}

void sub_1E9544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a59 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1E9738(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (v4 != v5)
  {
    unint64_t v8 = 0;
    unint64_t v9 = *(void *)(*a1 + 656);
    do
    {
      uint64_t v10 = v5 + 96 * v8;
      if (*(void *)(v10 + 40) <= v9)
      {
        BOOL v11 = *(char *)(v10 + 23) < 0;
        uint64_t v12 = *(unsigned __int8 *)(v10 + 23);
        if ((v12 & 0x80u) != 0) {
          uint64_t v12 = *(void *)(v10 + 8);
        }
        uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
        if ((v13 & 0x80u) != 0) {
          uint64_t v13 = *(void *)(a2 + 8);
        }
        if (v12 == v13)
        {
          if (!v12) {
            goto LABEL_27;
          }
          unint64_t v14 = 0;
          while (1)
          {
            uint64_t v15 = v11 ? *(void *)v10 : v5 + 96 * v8;
            __darwin_ct_rune_t v16 = __tolower(*(char *)(v15 + v14));
            uint64_t v17 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
            __darwin_ct_rune_t v18 = __tolower(*(char *)(v17 + v14));
            BOOL v19 = v16 != v18;
            if (v16 != v18) {
              break;
            }
            ++v14;
            BOOL v11 = *(char *)(v10 + 23) < 0;
            unint64_t v20 = *(unsigned __int8 *)(v10 + 23);
            if ((v20 & 0x80u) != 0) {
              unint64_t v20 = *(void *)(v10 + 8);
            }
            if (v14 >= v20)
            {
              BOOL v19 = 0;
              break;
            }
          }
          if (!v19)
          {
LABEL_27:
            uint64_t v21 = v5 + 96 * v8;
            uint64_t v22 = *(void *)(v21 + 32);
            int v23 = *(unsigned __int8 *)(v21 + 68);
            if (v22 == a3 && v23 != 0) {
              return (void *)v10;
            }
          }
        }
        uint64_t v5 = a1[1];
        uint64_t v4 = a1[2];
      }
      ++v8;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 5));
  }
  return a1 + 4;
}

uint64_t sub_1E98BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 == *a1) {
    return 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(v3 + 8 * v6);
    if (!v7) {
      goto LABEL_3;
    }
    uint64_t v8 = *(void *)(v7 + 8);
    if (!v8) {
      goto LABEL_3;
    }
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    if (!v9) {
      goto LABEL_3;
    }
    if ((uint64_t *)(v8 + 200) != sub_ADE40(v8 + 192, a2)) {
      return 1;
    }
    uint64_t v3 = *a1;
    uint64_t v2 = a1[1];
LABEL_3:
    if (++v6 >= (unint64_t)((v2 - v3) >> 3)) {
      return 0;
    }
  }
}

uint64_t sub_1E996C(uint64_t a1, _DWORD *a2, uint64_t a3, int a4)
{
  if (*(_DWORD *)(a1 + 104) != *a2) {
    return 0;
  }
  BOOL v6 = *(char *)(a3 + 23) < 0;
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 135);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 120);
  }
  if (v7 != v8) {
    return 0;
  }
  if (v7)
  {
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = v6 ? *(void *)a3 : a3;
      __darwin_ct_rune_t v12 = __tolower(*(char *)(v11 + v10));
      uint64_t v13 = *(char *)(a1 + 135) >= 0 ? a1 + 112 : *(void *)(a1 + 112);
      if (v12 != __tolower(*(char *)(v13 + v10))) {
        return 0;
      }
      ++v10;
      BOOL v6 = *(char *)(a3 + 23) < 0;
      unint64_t v14 = *(unsigned __int8 *)(a3 + 23);
      if ((v14 & 0x80u) != 0) {
        unint64_t v14 = *(void *)(a3 + 8);
      }
    }
    while (v10 < v14);
  }
  if (a4 == 1)
  {
    uint64_t v15 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 8) == v15) {
      uint64_t v15 = a1 + 40;
    }
    else {
      *(void *)(a1 + 24) = v15 + 40;
    }
    *(_DWORD *)(a1 + 104) = *(_DWORD *)v15;
    std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v15 + 8));
    *(void *)(a1 + 136) = *(void *)(v15 + 32);
  }
  return 1;
}

void sub_1E9AB0()
{
}

void sub_1E9AF8()
{
}

void sub_1E9B1C()
{
}

void sub_1E9BF8()
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    *(void *)(v0 + 24) = v2;
    operator delete(v2);
  }
  operator delete();
}

void sub_1E9C2C(void *a1, uint64_t a2)
{
  *a1 = off_2400CA8;
  a1[1] = off_2400D08;
  a1[2] = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)a2 + 40))();
  uint64_t v4 = (void *)a1[2];
  uint64_t v5 = 0;
  (*(void (**)(void, uint64_t *))(*(void *)*v4 + 32))(*v4, &v5);
  if (v3) {
    operator new();
  }
  operator new();
}

void sub_1E9DD8()
{
}

void sub_1E9DFC(_Unwind_Exception *a1)
{
  sub_E26D8(v1);
  _Unwind_Resume(a1);
}

void sub_1E9E18(void *a1)
{
  sub_1E9F70(a1);

  operator delete();
}

double sub_1E9E50(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(void *)(a1 + 40))
    {
      unint64_t v2 = 0;
      do
        *(double *)(*(void *)(a1 + 8) + 8 * v2++) = (*(double (**)(void))(***(void ***)(a1 + 16) + 16))(**(void **)(a1 + 16));
      while (v2 < *(void *)(a1 + 40));
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v5 = v3 - v4;
    unint64_t v6 = (v3 - v4) >> 3;
    if (v3 != v4)
    {
      uint64_t v7 = 0;
      if (v6 <= 1) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = (v3 - v4) >> 3;
      }
      do
      {
        uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 8 * v7);
        *(double *)(*(void *)(a1 + 8) + 8 * v7++) = (*(double (**)(uint64_t))(*(void *)v9 + 16))(v9);
      }
      while (v8 != v7);
    }
    unint64_t v10 = *(void *)(a1 + 40);
    if (v6 < v10) {
      bzero((void *)(*(void *)(a1 + 8) + (v5 & 0xFFFFFFFFFFFFFFF8)), 8 * v10 - (v5 & 0xFFFFFFFFFFFFFFF8));
    }
  }
  return **(double **)(a1 + 8);
}

uint64_t sub_1E9F68()
{
  return 128;
}

void *sub_1E9F70(void *a1)
{
  *a1 = off_242AE40;
  unint64_t v2 = (char *)a1[3];
  if (v2 != (char *)a1[2])
  {
    unint64_t v3 = 0;
    unint64_t v2 = (char *)a1[2];
    do
    {
      uint64_t v4 = &v2[8 * v3];
      uint64_t v5 = *(void *)v4;
      if (*(void *)v4)
      {
        if ((*(unsigned int (**)(void))(*(void *)v5 + 32))(*(void *)v4) == 17
          || (*(unsigned int (**)(uint64_t))(*(void *)v5 + 32))(v5) == 18)
        {
          goto LABEL_4;
        }
        uint64_t v4 = (char *)(a1[2] + 8 * v3);
        if (*(void *)v4) {
          (*(void (**)(void))(**(void **)v4 + 8))(*(void *)v4);
        }
      }
      *(void *)uint64_t v4 = 0;
LABEL_4:
      ++v3;
      unint64_t v2 = (char *)a1[2];
    }
    while (v3 < (uint64_t)(a1[3] - (void)v2) >> 3);
  }
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1EA0A0(uint64_t a1)
{
  unint64_t v2 = (std::string *)(a1 + 112);
  if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    long long __dst = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    uint64_t v129 = *(void *)(a1 + 128);
    uint64_t v106 = (std::string *)(a1 + 112);
    uint64_t v3 = *(void *)(a1 + 888);
    uint64_t v4 = *(void *)(a1 + 880);
    if (v3 == v4) {
      goto LABEL_34;
    }
    goto LABEL_5;
  }
  sub_4200(&__dst, *(void **)(a1 + 112), *(void *)(a1 + 120));
  uint64_t v106 = v2;
  uint64_t v3 = *(void *)(a1 + 888);
  uint64_t v4 = *(void *)(a1 + 880);
  if (v3 != v4)
  {
LABEL_5:
    unint64_t v5 = 0;
    unint64_t v6 = *(void *)(*(void *)(a1 + 872) + 656);
    do
    {
      uint64_t v7 = v4 + 96 * v5;
      if (*(void *)(v7 + 40) > v6) {
        goto LABEL_7;
      }
      BOOL v8 = *(char *)(v7 + 23) < 0;
      uint64_t v9 = *(unsigned __int8 *)(v7 + 23);
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *(void *)(v7 + 8);
      }
      uint64_t v10 = HIBYTE(v129);
      if (v129 < 0) {
        uint64_t v10 = *((void *)&__dst + 1);
      }
      if (v9 == v10)
      {
        if (!v9) {
          goto LABEL_29;
        }
        unint64_t v11 = 0;
        while (1)
        {
          uint64_t v12 = v8 ? *(void *)v7 : v4 + 96 * v5;
          __darwin_ct_rune_t v13 = __tolower(*(char *)(v12 + v11));
          unint64_t v14 = v129 >= 0 ? &__dst : (long long *)__dst;
          __darwin_ct_rune_t v15 = __tolower(*((char *)v14 + v11));
          BOOL v16 = v13 != v15;
          if (v13 != v15) {
            break;
          }
          ++v11;
          BOOL v8 = *(char *)(v7 + 23) < 0;
          unint64_t v17 = *(unsigned __int8 *)(v7 + 23);
          if ((v17 & 0x80u) != 0) {
            unint64_t v17 = *(void *)(v7 + 8);
          }
          if (v11 >= v17) {
            goto LABEL_29;
          }
        }
      }
      else
      {
        BOOL v16 = 1;
      }
      if (!v16)
      {
LABEL_29:
        uint64_t v18 = v4 + 96 * v5;
        uint64_t v19 = *(void *)(v18 + 32);
        int v20 = *(unsigned __int8 *)(v18 + 68);
        if (v19 == -1 && v20 != 0) {
          goto LABEL_35;
        }
      }
      uint64_t v3 = *(void *)(a1 + 888);
      uint64_t v4 = *(void *)(a1 + 880);
LABEL_7:
      ++v5;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((v3 - v4) >> 5));
  }
LABEL_34:
  uint64_t v7 = a1 + 904;
LABEL_35:
  uint64_t v22 = (int *)(a1 + 104);
  BOOL v23 = *(char *)(v7 + 23) < 0;
  uint64_t v24 = *(unsigned __int8 *)(v7 + 23);
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *(void *)(v7 + 8);
  }
  uint64_t v25 = HIBYTE(v129);
  if (v129 < 0) {
    uint64_t v25 = *((void *)&__dst + 1);
  }
  if (v24 == v25)
  {
    if (v24)
    {
      unint64_t v26 = 0;
      while (1)
      {
        uint64_t v27 = v23 ? *(void *)v7 : v7;
        __darwin_ct_rune_t v28 = __tolower(*(char *)(v27 + v26));
        BOOL v29 = v129 >= 0 ? &__dst : (long long *)__dst;
        if (v28 != __tolower(*((char *)v29 + v26))) {
          break;
        }
        ++v26;
        BOOL v23 = *(char *)(v7 + 23) < 0;
        unint64_t v30 = *(unsigned __int8 *)(v7 + 23);
        if ((v30 & 0x80u) != 0) {
          unint64_t v30 = *(void *)(v7 + 8);
        }
        if (v26 >= v30) {
          goto LABEL_52;
        }
      }
    }
    else
    {
LABEL_52:
      if (*(void *)(v7 + 40) <= *(void *)(a1 + 656) && *(_DWORD *)(v7 + 64) == 2)
      {
        std::string::value_type v31 = *(void **)(v7 + 88);
        unint64_t v32 = v106;
        goto LABEL_55;
      }
    }
  }
  uint64_t v34 = *(void *)(a1 + 440);
  unint64_t v32 = v106;
  if (v34 == *(void *)(a1 + 448)
    || !sub_AD9E4(v34, (uint64_t *)&__dst, 1)
    || (uint64_t v35 = *(void *)(a1 + 440), *(void *)(a1 + 448) == v35))
  {
LABEL_67:
    std::operator+<char>();
    long long v40 = std::string::append(&v116, " not a vector");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    memset(&v114, 0, sizeof(v114));
    std::string::push_back(&v114, 52);
    std::string::push_back(&v114, 57);
    std::string::push_back(&v114, 49);
    std::string::push_back(&v114, 51);
    std::string::push_back(&v114, 50);
    std::string::size_type size = HIBYTE(v114.__r_.__value_.__r.__words[2]);
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v43 = &v114;
    }
    else {
      long long v43 = (std::string *)v114.__r_.__value_.__r.__words[0];
    }
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v114.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v44 = (std::string *)((char *)v43 + size - 1);
      if (v44 > v43)
      {
        uint64_t v45 = &v43->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v46 = *(v45 - 1);
          *(v45 - 1) = v44->__r_.__value_.__s.__data_[0];
          v44->__r_.__value_.__s.__data_[0] = v46;
          uint64_t v44 = (std::string *)((char *)v44 - 1);
          BOOL v47 = v45++ >= (char *)v44;
        }
        while (!v47);
      }
    }
    size_t v48 = std::string::insert(&v114, 0, "exprtk.hpp:");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v115.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v119.__r_.__value_.__s + 23) = 0;
    v119.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v120 = -1;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    long long __p = 0u;
    long long v126 = 0u;
    uint64_t v127 = 0;
    int v121 = 1;
    int v118 = *v22;
    std::string::operator=(&v119, v106);
    uint64_t v120 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v122, &__str);
    std::string::operator=((std::string *)((char *)&v123 + 8), &v115);
    uint64_t v50 = *(void *)(a1 + 568);
    uint64_t v51 = *(void *)(a1 + 560);
    uint64_t v52 = 30 * ((v50 - v51) >> 3) - 1;
    if (v50 == v51) {
      uint64_t v52 = 0;
    }
    if (v52 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v51 = *(void *)(a1 + 560);
      uint64_t v50 = *(void *)(a1 + 568);
    }
    if (v50 == v51)
    {
      uint64_t v54 = 0;
    }
    else
    {
      unint64_t v53 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v54 = *(void *)(v51 + 8 * (v53 / 0x1E)) + 136 * (v53 % 0x1E);
    }
LABEL_84:
    sub_B5158(v54, (uint64_t)&v118);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v126) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v124) & 0x80000000) == 0)
      {
LABEL_86:
        if ((SBYTE7(v123) & 0x80000000) == 0) {
          goto LABEL_87;
        }
        goto LABEL_95;
      }
    }
    else if ((SHIBYTE(v124) & 0x80000000) == 0)
    {
      goto LABEL_86;
    }
    operator delete(*((void **)&v123 + 1));
    if ((SBYTE7(v123) & 0x80000000) == 0)
    {
LABEL_87:
      if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_88;
      }
      goto LABEL_96;
    }
LABEL_95:
    operator delete((void *)v122);
    if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_88:
      if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_89;
      }
      goto LABEL_97;
    }
LABEL_96:
    operator delete(v119.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_89:
      if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_90;
      }
      goto LABEL_98;
    }
LABEL_97:
    operator delete(v115.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_90:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_91;
      }
      goto LABEL_99;
    }
LABEL_98:
    operator delete(v114.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_91:
      if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_101;
      }
LABEL_100:
      operator delete(v116.__r_.__value_.__l.__data_);
      goto LABEL_101;
    }
LABEL_99:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
  unint64_t v36 = 0;
  while (1)
  {
    uint64_t v37 = *(void *)(v35 + 8 * v36);
    if (v37)
    {
      uint64_t v38 = *(void *)(v37 + 8);
      if (v38)
      {
        uint64_t v39 = sub_ADE40(v38 + 192, (uint64_t)&__dst);
        if ((uint64_t *)(v38 + 200) != v39)
        {
          std::string::value_type v31 = (void *)v39[8];
          if (v31) {
            break;
          }
        }
      }
    }
    ++v36;
    uint64_t v35 = *(void *)(a1 + 440);
    if (v36 >= (*(void *)(a1 + 448) - v35) >> 3) {
      goto LABEL_67;
    }
  }
LABEL_55:
  uint64_t v113 = 0;
  uint64_t v33 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v33) {
    uint64_t v33 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v33 + 40;
  }
  int *v22 = *(_DWORD *)v33;
  std::string::operator=(v32, (const std::string *)(v33 + 8));
  *(void *)(a1 + 136) = *(void *)(v33 + 32);
  if (*(_DWORD *)(a1 + 104) != 91) {
    operator new();
  }
  uint64_t v57 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v57) {
    uint64_t v57 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v57 + 40;
  }
  int *v22 = *(_DWORD *)v57;
  std::string::operator=(v32, (const std::string *)(v57 + 8));
  *(void *)(a1 + 136) = *(void *)(v57 + 32);
  if (*(_DWORD *)(a1 + 104) == 93)
  {
    uint64_t v58 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 8) == v58) {
      uint64_t v58 = a1 + 40;
    }
    else {
      *(void *)(a1 + 24) = v58 + 40;
    }
    int *v22 = *(_DWORD *)v58;
    std::string::operator=(v32, (const std::string *)(v58 + 8));
    *(void *)(a1 + 136) = *(void *)(v58 + 32);
    (*(void (**)(void))(*(void *)*v31 + 40))();
    operator new();
  }
  uint64_t v113 = sub_B7FE4(a1, 0);
  if (!v113)
  {
    std::operator+<char>();
    int v60 = std::string::append(&v116, "'");
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    memset(&v114, 0, sizeof(v114));
    std::string::push_back(&v114, 48);
    std::string::push_back(&v114, 50);
    std::string::push_back(&v114, 50);
    std::string::push_back(&v114, 51);
    std::string::push_back(&v114, 50);
    std::string::size_type v62 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v63 = &v114;
    }
    else {
      uint64_t v63 = (std::string *)v114.__r_.__value_.__r.__words[0];
    }
    if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v62 = v114.__r_.__value_.__l.__size_;
    }
    if (v62)
    {
      uint64_t v64 = (std::string *)((char *)v63 + v62 - 1);
      if (v64 > v63)
      {
        unint64_t v65 = &v63->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v66 = *(v65 - 1);
          *(v65 - 1) = v64->__r_.__value_.__s.__data_[0];
          v64->__r_.__value_.__s.__data_[0] = v66;
          uint64_t v64 = (std::string *)((char *)v64 - 1);
          BOOL v47 = v65++ >= (char *)v64;
        }
        while (!v47);
      }
    }
    uint64_t v67 = std::string::insert(&v114, 0, "exprtk.hpp:");
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v115.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v119.__r_.__value_.__s + 23) = 0;
    v119.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v120 = -1;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    long long __p = 0u;
    long long v126 = 0u;
    uint64_t v127 = 0;
    int v121 = 1;
    int v118 = *v22;
    std::string::operator=(&v119, v32);
    uint64_t v120 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v122, &__str);
    std::string::operator=((std::string *)((char *)&v123 + 8), &v115);
    uint64_t v69 = *(void *)(a1 + 568);
    uint64_t v70 = *(void *)(a1 + 560);
    uint64_t v71 = 30 * ((v69 - v70) >> 3) - 1;
    if (v69 == v70) {
      uint64_t v71 = 0;
    }
    if (v71 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v70 = *(void *)(a1 + 560);
      uint64_t v69 = *(void *)(a1 + 568);
    }
    if (v69 == v70)
    {
      uint64_t v54 = 0;
    }
    else
    {
      unint64_t v72 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v54 = *(void *)(v70 + 8 * (v72 / 0x1E)) + 136 * (v72 % 0x1E);
    }
    goto LABEL_84;
  }
  if (*v22 == 93)
  {
    uint64_t v59 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 8) == v59) {
      uint64_t v59 = a1 + 40;
    }
    else {
      *(void *)(a1 + 24) = v59 + 40;
    }
    int *v22 = *(_DWORD *)v59;
    std::string::operator=(v32, (const std::string *)(v59 + 8));
    *(void *)(a1 + 136) = *(void *)(v59 + 32);
    if (!v113
      || (*(unsigned int (**)(uint64_t))(*(void *)v113 + 32))(v113) != 2
      || (double v87 = (*(double (**)(uint64_t))(*(void *)v113 + 16))(v113),
          unint64_t v88 = (*(uint64_t (**)(void))(*(void *)*v31 + 40))(),
          v88 > (int)v87))
    {
      uint64_t v55 = sub_1EB4BC(a1 + 344, (uint64_t)&__dst, v31, v113);
      goto LABEL_102;
    }
    sub_B1D70((int)v87, (unint64_t)&v111);
    long long v90 = std::string::insert(&v111, 0, "ERR109 - Index of ");
    long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
    v112.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v91;
    v90->__r_.__value_.__l.__size_ = 0;
    v90->__r_.__value_.__r.__words[2] = 0;
    v90->__r_.__value_.__r.__words[0] = 0;
    int v92 = std::string::append(&v112, " out of range for vector '");
    long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    v114.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    if (v129 >= 0) {
      p_dst = (const std::string::value_type *)&__dst;
    }
    else {
      p_dst = (const std::string::value_type *)__dst;
    }
    if (v129 >= 0) {
      std::string::size_type v95 = HIBYTE(v129);
    }
    else {
      std::string::size_type v95 = *((void *)&__dst + 1);
    }
    long long v96 = std::string::append(&v114, p_dst, v95);
    long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
    v115.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v97;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    long long v98 = std::string::append(&v115, "' of size ");
    long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
    v116.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v99;
    v98->__r_.__value_.__l.__size_ = 0;
    v98->__r_.__value_.__r.__words[2] = 0;
    v98->__r_.__value_.__r.__words[0] = 0;
    sub_B1D70(v88, (unint64_t)v109);
    if ((v110 & 0x80u) == 0) {
      long long v100 = v109;
    }
    else {
      long long v100 = (void **)v109[0];
    }
    if ((v110 & 0x80u) == 0) {
      std::string::size_type v101 = v110;
    }
    else {
      std::string::size_type v101 = (std::string::size_type)v109[1];
    }
    long long v102 = std::string::append(&v116, (const std::string::value_type *)v100, v101);
    long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v103;
    v102->__r_.__value_.__l.__size_ = 0;
    v102->__r_.__value_.__r.__words[2] = 0;
    v102->__r_.__value_.__r.__words[0] = 0;
    sub_B1D70(0x5AD2u, (unint64_t)&v107);
    uint64_t v104 = std::string::insert(&v107, 0, "exprtk.hpp:");
    long long v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
    v108.__r_.__value_.__r.__words[2] = v104->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v105;
    v104->__r_.__value_.__l.__size_ = 0;
    v104->__r_.__value_.__r.__words[2] = 0;
    v104->__r_.__value_.__r.__words[0] = 0;
    sub_B49F0(1, a1 + 104, &__str, &v108, (uint64_t)&v118);
    sub_B1CB0((void *)a1, (uint64_t)&v118);
    sub_B1ED4((uint64_t)&v118);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v108.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_194:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_195;
        }
        goto LABEL_204;
      }
    }
    else if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_194;
    }
    operator delete(v107.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_195:
      if (((char)v110 & 0x80000000) == 0) {
        goto LABEL_196;
      }
      goto LABEL_205;
    }
LABEL_204:
    operator delete(__str.__r_.__value_.__l.__data_);
    if (((char)v110 & 0x80000000) == 0)
    {
LABEL_196:
      if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_197;
      }
      goto LABEL_206;
    }
LABEL_205:
    operator delete(v109[0]);
    if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_197:
      if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_198;
      }
      goto LABEL_207;
    }
LABEL_206:
    operator delete(v116.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_198:
      if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_199;
      }
      goto LABEL_208;
    }
LABEL_207:
    operator delete(v115.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_199:
      if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_200;
      }
      goto LABEL_209;
    }
LABEL_208:
    operator delete(v114.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v112.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_200:
      if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_201:
        sub_BBE90(a1 + 432, &v113, 0);
        goto LABEL_101;
      }
LABEL_210:
      operator delete(v111.__r_.__value_.__l.__data_);
      goto LABEL_201;
    }
LABEL_209:
    operator delete(v112.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_201;
    }
    goto LABEL_210;
  }
  std::operator+<char>();
  int v73 = std::string::append(&v116, "'");
  long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v74;
  v73->__r_.__value_.__l.__size_ = 0;
  v73->__r_.__value_.__r.__words[2] = 0;
  v73->__r_.__value_.__r.__words[0] = 0;
  memset(&v114, 0, sizeof(v114));
  std::string::push_back(&v114, 48);
  std::string::push_back(&v114, 51);
  std::string::push_back(&v114, 50);
  std::string::push_back(&v114, 51);
  std::string::push_back(&v114, 50);
  std::string::size_type v75 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
  if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v76 = &v114;
  }
  else {
    uint64_t v76 = (std::string *)v114.__r_.__value_.__r.__words[0];
  }
  if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v75 = v114.__r_.__value_.__l.__size_;
  }
  if (v75)
  {
    uint64_t v77 = (std::string *)((char *)v76 + v75 - 1);
    if (v77 > v76)
    {
      uint64_t v78 = &v76->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v79 = *(v78 - 1);
        *(v78 - 1) = v77->__r_.__value_.__s.__data_[0];
        v77->__r_.__value_.__s.__data_[0] = v79;
        uint64_t v77 = (std::string *)((char *)v77 - 1);
        BOOL v47 = v78++ >= (char *)v77;
      }
      while (!v47);
    }
  }
  std::string v80 = std::string::insert(&v114, 0, "exprtk.hpp:");
  long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
  v115.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v81;
  v80->__r_.__value_.__l.__size_ = 0;
  v80->__r_.__value_.__r.__words[2] = 0;
  v80->__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&v119.__r_.__value_.__s + 23) = 0;
  v119.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v120 = -1;
  long long v122 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long __p = 0u;
  long long v126 = 0u;
  uint64_t v127 = 0;
  int v121 = 1;
  int v118 = *v22;
  std::string::operator=(&v119, v32);
  uint64_t v120 = *(void *)(a1 + 136);
  std::string::operator=((std::string *)&v122, &__str);
  std::string::operator=((std::string *)((char *)&v123 + 8), &v115);
  uint64_t v82 = *(void *)(a1 + 568);
  uint64_t v83 = *(void *)(a1 + 560);
  uint64_t v84 = 30 * ((v82 - v83) >> 3) - 1;
  if (v82 == v83) {
    uint64_t v84 = 0;
  }
  if (v84 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
  {
    sub_B4B88(a1 + 552);
    uint64_t v83 = *(void *)(a1 + 560);
    uint64_t v82 = *(void *)(a1 + 568);
  }
  if (v82 == v83)
  {
    uint64_t v86 = 0;
  }
  else
  {
    unint64_t v85 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
    uint64_t v86 = *(void *)(v83 + 8 * (v85 / 0x1E)) + 136 * (v85 % 0x1E);
  }
  sub_B5158(v86, (uint64_t)&v118);
  ++*(void *)(a1 + 592);
  if (SBYTE7(v126) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v124) & 0x80000000) == 0)
    {
LABEL_161:
      if ((SBYTE7(v123) & 0x80000000) == 0) {
        goto LABEL_162;
      }
      goto LABEL_171;
    }
  }
  else if ((SHIBYTE(v124) & 0x80000000) == 0)
  {
    goto LABEL_161;
  }
  operator delete(*((void **)&v123 + 1));
  if ((SBYTE7(v123) & 0x80000000) == 0)
  {
LABEL_162:
    if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_163;
    }
    goto LABEL_172;
  }
LABEL_171:
  operator delete((void *)v122);
  if ((SHIBYTE(v119.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_163:
    if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_164;
    }
    goto LABEL_173;
  }
LABEL_172:
  operator delete(v119.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v115.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_164:
    if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_165;
    }
    goto LABEL_174;
  }
LABEL_173:
  operator delete(v115.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v114.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_165:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_166;
    }
    goto LABEL_175;
  }
LABEL_174:
  operator delete(v114.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_166:
    if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_167;
    }
    goto LABEL_176;
  }
LABEL_175:
  operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_176:
    operator delete(v116.__r_.__value_.__l.__data_);
    uint64_t v89 = v113;
    if (v113) {
      goto LABEL_177;
    }
LABEL_101:
    uint64_t v55 = 0;
    goto LABEL_102;
  }
LABEL_167:
  uint64_t v89 = v113;
  if (!v113) {
    goto LABEL_101;
  }
LABEL_177:
  if ((*(unsigned int (**)(uint64_t))(*(void *)v89 + 32))(v89) == 17
    || (*(unsigned int (**)(uint64_t))(*(void *)v89 + 32))(v89) == 18)
  {
    goto LABEL_101;
  }
  (*(void (**)(uint64_t))(*(void *)v89 + 8))(v89);
  uint64_t v55 = 0;
  uint64_t v113 = 0;
LABEL_102:
  if (SHIBYTE(v129) < 0) {
    operator delete((void *)__dst);
  }
  return v55;
}

void sub_1EB118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,void *a63)
{
  sub_B1ED4((uint64_t)&a69);
  if (a21 < 0)
  {
    operator delete(__p);
    if (a15 < 0)
    {
LABEL_5:
      operator delete(a10);
      if ((a68 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if (a15 < 0)
  {
    goto LABEL_5;
  }
  if ((a68 & 0x80000000) == 0)
  {
LABEL_6:
    if (a28 < 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a63);
  if (a28 < 0)
  {
LABEL_7:
    operator delete(a23);
    if ((a61 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  if ((a61 & 0x80000000) == 0)
  {
LABEL_8:
    if (a54 < 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  operator delete(a56);
  if (a54 < 0)
  {
LABEL_9:
    operator delete(a49);
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  if ((a47 & 0x80000000) == 0)
  {
LABEL_10:
    if (a40 < 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a42);
  if (a40 < 0)
  {
LABEL_11:
    operator delete(a35);
    if ((a34 & 0x80000000) == 0)
    {
LABEL_21:
      if (*(char *)(v69 - 121) < 0) {
        operator delete(*(void **)(v69 - 144));
      }
      _Unwind_Resume(a1);
    }
LABEL_20:
    operator delete(a29);
    goto LABEL_21;
  }
LABEL_19:
  if ((a34 & 0x80000000) == 0) {
    goto LABEL_21;
  }
  goto LABEL_20;
}

uint64_t sub_1EB408(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (v3 == a1[1]) {
    return 0;
  }
  if (!sub_AD9E4(v3, a2, 1)) {
    return 0;
  }
  uint64_t v5 = *a1;
  if (a1[1] == *a1) {
    return 0;
  }
  unint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(v5 + 8 * v6);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        uint64_t v9 = sub_ADE40(*(void *)(v7 + 8), (uint64_t)a2);
        if ((uint64_t *)(v8 + 8) != v9)
        {
          uint64_t result = v9[8];
          if (result) {
            break;
          }
        }
      }
    }
    ++v6;
    uint64_t v5 = *a1;
    if (v6 >= (a1[1] - *a1) >> 3) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1EB4BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (!a4 || (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 2)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 16))()) {
      operator new();
    }
    operator new();
  }
  uint64_t v24 = (uint64_t)(*(double (**)(uint64_t))(*(void *)a4 + 16))(a4);
  uint64_t v34 = v24;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 17
    && (*(unsigned int (**)(uint64_t))(*(void *)a4 + 32))(a4) != 18)
  {
    (*(void (**)(uint64_t))(*(void *)a4 + 8))(a4);
  }
  if ((*(unsigned int (**)(void))(*(void *)*a3 + 16))()) {
    operator new();
  }
  BOOL v23 = a3;
  uint64_t v8 = *(void **)(a1 + 80);
  uint64_t v9 = v8[110];
  if (v8[111] != v9)
  {
    unint64_t v10 = 0;
    unint64_t v11 = *(void *)(v8[109] + 656);
    do
    {
      uint64_t v12 = (void *)(v9 + 96 * v10);
      if (v12[5] <= v11)
      {
        BOOL v13 = *((char *)v12 + 23) < 0;
        uint64_t v14 = *((unsigned __int8 *)v12 + 23);
        if ((v14 & 0x80u) != 0) {
          uint64_t v14 = v12[1];
        }
        uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
        if ((v15 & 0x80u) != 0) {
          uint64_t v15 = *(void *)(a2 + 8);
        }
        if (v14 == v15)
        {
          if (v14)
          {
            unint64_t v16 = 0;
            while (1)
            {
              uint64_t v17 = v13 ? *v12 : v9 + 96 * v10;
              __darwin_ct_rune_t v18 = __tolower(*(char *)(v17 + v16));
              uint64_t v19 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
              if (v18 != __tolower(*(char *)(v19 + v16))) {
                break;
              }
              ++v16;
              BOOL v13 = *((char *)v12 + 23) < 0;
              unint64_t v20 = *((unsigned __int8 *)v12 + 23);
              if ((v20 & 0x80u) != 0) {
                unint64_t v20 = v12[1];
              }
              if (v16 >= v20) {
                goto LABEL_13;
              }
            }
          }
          else
          {
LABEL_13:
            if (*(void *)(v9 + 96 * v10 + 32) == v24) {
              goto LABEL_35;
            }
          }
        }
      }
      ++v10;
      uint64_t v9 = v8[110];
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * ((v8[111] - v9) >> 5));
  }
  uint64_t v12 = v8 + 113;
LABEL_35:
  if (v12[4] != v24)
  {
    *((unsigned char *)&v25.__r_.__value_.__s + 23) = 3;
    LODWORD(v25.__r_.__value_.__l.__data_) = 4144959;
    uint64_t v26 = -1;
    uint64_t v27 = -1;
    uint64_t v28 = -1;
    uint64_t v29 = 0;
    memset(v30, 0, 13);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    std::string::operator=(&v25, (const std::string *)a2);
    BYTE4(v30[1]) = 1;
    uint64_t v29 = 1;
    LODWORD(v30[1]) = 3;
    uint64_t v22 = *(void *)(*(void *)(a1 + 80) + 656);
    uint64_t v27 = v34;
    uint64_t v28 = v22;
    uint64_t v31 = 0;
    (*(void (**)(void, uint64_t *))(*(void *)*v23 + 32))(*v23, &v34);
    operator new();
  }
  return v12[10];
}

void sub_1EBB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_1EBBE4()
{
}

void sub_1EBC08()
{
}

void sub_1EBC2C(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_242AE90;
  a1[1] = off_242AED8;
  a1[2] = a2;
  a1[3] = a3;
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)a3 + 40))();
  uint64_t v5 = (void *)a1[3];
  uint64_t v6 = 0;
  (*(void (**)(void, uint64_t *))(*(void *)*v5 + 32))(*v5, &v6);
  if (v4) {
    operator new();
  }
  operator new();
}

void sub_1EBDDC()
{
}

void sub_1EBE00(_Unwind_Exception *a1)
{
  sub_E26D8(v1);
  _Unwind_Resume(a1);
}

void *sub_1EBE18(void *result)
{
  void *result = off_242AE90;
  result[1] = off_242AED8;
  uint64_t v1 = result[4];
  if (v1)
  {
    if (*(void *)v1)
    {
      uint64_t v2 = *(void *)v1 - 1;
      *(void *)uint64_t v1 = v2;
      if (!v2)
      {
        if (*(void *)(v1 + 16))
        {
          if (*(unsigned char *)(v1 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    result[4] = 0;
  }
  return result;
}

void sub_1EBED8(void *a1)
{
  *a1 = off_242AE90;
  a1[1] = off_242AED8;
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (*(void *)v1)
    {
      uint64_t v2 = *(void *)v1 - 1;
      *(void *)uint64_t v1 = v2;
      if (!v2)
      {
        if (*(void *)(v1 + 16))
        {
          if (*(unsigned char *)(v1 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[4] = 0;
  }

  operator delete();
}

double sub_1EBFB8(uint64_t a1)
{
  return *(double *)(*(void *)(*(void *)(a1 + 32) + 16) + 8 * *(void *)(a1 + 16));
}

uint64_t sub_1EBFCC()
{
  return 127;
}

uint64_t sub_1EBFD4(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 32) + 16) + 8 * *(void *)(a1 + 16);
}

uint64_t sub_1EBFE8(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 32) + 16) + 8 * *(void *)(a1 + 16);
}

void *sub_1EBFFC(void *result)
{
  *(result - 1) = off_242AE90;
  void *result = off_242AED8;
  uint64_t v1 = result[3];
  if (v1)
  {
    if (*(void *)v1)
    {
      uint64_t v2 = *(void *)v1 - 1;
      *(void *)uint64_t v1 = v2;
      if (!v2)
      {
        if (*(void *)(v1 + 16))
        {
          if (*(unsigned char *)(v1 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    result[3] = 0;
  }
  return result;
}

void sub_1EC0B8(void *a1)
{
  *(a1 - 1) = off_242AE90;
  *a1 = off_242AED8;
  uint64_t v1 = a1[3];
  if (v1)
  {
    if (*(void *)v1)
    {
      uint64_t v2 = *(void *)v1 - 1;
      *(void *)uint64_t v1 = v2;
      if (!v2)
      {
        if (*(void *)(v1 + 16))
        {
          if (*(unsigned char *)(v1 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    a1[3] = 0;
  }

  operator delete();
}

uint64_t sub_1EC1A0(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 24) + 16) + 8 * *(void *)(a1 + 8);
}

uint64_t sub_1EC1B4(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 24) + 16) + 8 * *(void *)(a1 + 8);
}

void sub_1EC1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_242AF40;
  *(void *)(a1 + 8) = off_242AF88;
  *(void *)(a1 + 16) = a2;
  if (a2) {
    BOOL v6 = (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 17
  }
      && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 32))(a2) != 18;
  else {
    BOOL v6 = 1;
  }
  *(unsigned char *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = a3;
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a3 + 40))();
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = 0;
  (*(void (**)(void, uint64_t *))(*(void *)*v8 + 32))(*v8, &v9);
  if (v7) {
    operator new();
  }
  operator new();
}

void sub_1EC3F8()
{
}

void sub_1EC41C(_Unwind_Exception *a1)
{
  sub_E26D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1EC434(uint64_t a1)
{
  *(void *)a1 = off_242AF40;
  *(void *)(a1 + 8) = off_242AF88;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 40) = 0;
  }
  return a1;
}

void sub_1EC52C(uint64_t a1)
{
  *(void *)a1 = off_242AF40;
  *(void *)(a1 + 8) = off_242AF88;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 24))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 40) = 0;
  }

  operator delete();
}

double sub_1EC644(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 40) + 16);
  return *(double *)(v1
                   + 8
                   * (uint64_t)(*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)));
}

uint64_t sub_1EC698()
{
  return 126;
}

uint64_t sub_1EC6A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 40) + 16);
  return v1 + 8 * (uint64_t)(*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
}

uint64_t sub_1EC6F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 40) + 16);
  return v1 + 8 * (uint64_t)(*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
}

uint64_t sub_1EC748(uint64_t a1)
{
  *(void *)(a1 - 8) = off_242AF40;
  *(void *)a1 = off_242AF88;
  uint64_t result = *(void *)(a1 + 8);
  if (result && *(unsigned char *)(a1 + 16))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    if (*(void *)v3)
    {
      uint64_t v4 = *(void *)v3 - 1;
      *(void *)uint64_t v3 = v4;
      if (!v4)
      {
        if (*(void *)(v3 + 16))
        {
          if (*(unsigned char *)(v3 + 24)) {
            operator delete[]();
          }
        }
        operator delete();
      }
    }
    *(void *)(a1 + 32) = 0;
  }
  return result;
}

void sub_1EC83C(uint64_t a1)
{
}

uint64_t sub_1EC844(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 16);
  return v1 + 8 * (uint64_t)(*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
}

uint64_t sub_1EC898(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 16);
  return v1 + 8 * (uint64_t)(*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
}

uint64_t sub_1EC8EC(uint64_t a1)
{
  *(void *)a1 = off_242AFF0;
  *(void *)(a1 + 8) = off_242B038;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }
  return a1;
}

void sub_1EC984(uint64_t a1)
{
  *(void *)a1 = off_242AFF0;
  *(void *)(a1 + 8) = off_242B038;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 && *(unsigned char *)(a1 + 40))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 16) = 0;
  }

  operator delete();
}

double sub_1ECA3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  return *(double *)(v1
                   + 8
                   * (uint64_t)(*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)));
}

uint64_t sub_1ECA8C()
{
  return 125;
}

uint64_t sub_1ECA94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  return v1 + 8 * (uint64_t)(*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
}

uint64_t sub_1ECAE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  return v1 + 8 * (uint64_t)(*(double (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
}

uint64_t sub_1ECB34(uint64_t a1)
{
  *(void *)(a1 - 8) = off_242AFF0;
  *(void *)a1 = off_242B038;
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    if (*(unsigned char *)(a1 + 32))
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      *(void *)(a1 + 8) = 0;
    }
  }
  return result;
}

void sub_1ECBC8(uint64_t a1)
{
  *(void *)(a1 - 8) = off_242AFF0;
  *(void *)a1 = off_242B038;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 && *(unsigned char *)(a1 + 32))
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    *(void *)(a1 + 8) = 0;
  }

  operator delete();
}

uint64_t sub_1ECC80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  return v1 + 8 * (uint64_t)(*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
}

uint64_t sub_1ECCD0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  return v1 + 8 * (uint64_t)(*(double (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
}

BOOL sub_1ECD20(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (v3 == a1[1]) {
    return 0;
  }
  BOOL result = sub_AD9E4(v3, (uint64_t *)a2, 1);
  if (!result) {
    return result;
  }
  uint64_t v6 = *a1;
  if (a1[1] == *a1) {
    return 0;
  }
  unint64_t v7 = 0;
  while (1)
  {
    uint64_t v8 = *(void *)(v6 + 8 * v7);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9)
      {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
        if ((v10 & 0x80u) != 0) {
          uint64_t v10 = *(void *)(a2 + 8);
        }
        if (v10)
        {
          unint64_t v11 = sub_ADE40(v9, a2);
          if ((uint64_t *)(v9 + 8) != v11)
          {
            if (*((unsigned char *)v11 + 56)) {
              break;
            }
          }
        }
      }
    }
    ++v7;
    uint64_t v6 = *a1;
    if (v7 >= (a1[1] - *a1) >> 3) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1ECDF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = (int *)(a1 + 40);
  if (v2 != v3) {
    uint64_t v4 = *(int **)(a1 + 24);
  }
  int v5 = *v4;
  if (v5 != 40 && v5 != 123 && v5 != 91) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 189))
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v27, "' and bracket");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    memset(&v25, 0, sizeof(v25));
    std::string::push_back(&v25, 57);
    std::string::push_back(&v25, 57);
    std::string::push_back(&v25, 49);
    std::string::push_back(&v25, 53);
    std::string::push_back(&v25, 50);
    std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v25;
    }
    else {
      uint64_t v12 = (std::string *)v25.__r_.__value_.__r.__words[0];
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v25.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      BOOL v13 = (std::string *)((char *)v12 + size - 1);
      if (v13 > v12)
      {
        uint64_t v14 = &v12->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v15 = *(v14 - 1);
          *(v14 - 1) = v13->__r_.__value_.__s.__data_[0];
          v13->__r_.__value_.__s.__data_[0] = v15;
          BOOL v13 = (std::string *)((char *)v13 - 1);
        }
        while (v14++ < (char *)v13);
      }
    }
    uint64_t v17 = std::string::insert(&v25, 0, "exprtk.hpp:");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v30.__r_.__value_.__s + 23) = 0;
    v30.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v31 = -1;
    *(_OWORD *)uint64_t v33 = 0u;
    *(_OWORD *)uint64_t v34 = 0u;
    long long v35 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v37 = 0u;
    uint64_t v38 = 0;
    int v32 = 1;
    int v29 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v30, (const std::string *)(a1 + 112));
    uint64_t v31 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v33, &__str);
    std::string::operator=((std::string *)&v34[1], &v26);
    uint64_t v19 = *(void *)(a1 + 568);
    uint64_t v20 = *(void *)(a1 + 560);
    uint64_t v21 = 30 * ((v19 - v20) >> 3) - 1;
    if (v19 == v20) {
      uint64_t v21 = 0;
    }
    if (v21 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v20 = *(void *)(a1 + 560);
      uint64_t v19 = *(void *)(a1 + 568);
    }
    if (v19 == v20)
    {
      uint64_t v23 = 0;
    }
    else
    {
      unint64_t v22 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v23 = *(void *)(v20 + 8 * (v22 / 0x1E)) + 136 * (v22 % 0x1E);
    }
    sub_B5158(v23, (uint64_t)&v29);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v37) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v35) & 0x80000000) == 0)
      {
LABEL_32:
        if ((SHIBYTE(v34[0]) & 0x80000000) == 0) {
          goto LABEL_33;
        }
        goto LABEL_41;
      }
    }
    else if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(v34[1]);
    if ((SHIBYTE(v34[0]) & 0x80000000) == 0)
    {
LABEL_33:
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_42;
    }
LABEL_41:
    operator delete(v33[0]);
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_34:
      if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_35;
      }
      goto LABEL_43;
    }
LABEL_42:
    operator delete(v30.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_35:
      if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_44;
    }
LABEL_43:
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v25.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_36:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_37;
      }
      goto LABEL_45;
    }
LABEL_44:
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_37:
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
LABEL_46:
      operator delete(v27.__r_.__value_.__l.__data_);
      return 0;
    }
LABEL_45:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return 0;
    }
    goto LABEL_46;
  }
  if (v2 == v3 || *(void *)a1 == v2) {
    return 1;
  }
  int v29 = *(_DWORD *)v3;
  if (*(char *)(v3 + 31) < 0)
  {
    sub_4200(&v30, *(void **)(v3 + 8), *(void *)(v3 + 16));
    uint64_t v8 = *(void *)(a1 + 24);
  }
  else
  {
    long long v7 = *(_OWORD *)(v3 + 8);
    v30.__r_.__value_.__r.__words[2] = *(void *)(v3 + 24);
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v7;
    uint64_t v8 = v3;
  }
  uint64_t v31 = *(void *)(v3 + 32);
  int v29 = 42;
  *(void *)(a1 + 24) = sub_1F0CDC((char **)a1, v8, (unint64_t)&v29);
  if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    return 1;
  }
  operator delete(v30.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1ED1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1ED29C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1 == a1[1]) {
    return 0;
  }
  char v5 = *(unsigned char *)(a2 + 23);
  if (v5 < 0)
  {
    unint64_t v6 = *(void *)(a2 + 8);
    if (v6 && (**(unsigned char **)a2 & 0xDFu) - 65 < 0x1A) {
      goto LABEL_8;
    }
    return 0;
  }
  if (!*(unsigned char *)(a2 + 23) || (*(unsigned char *)a2 & 0xDFu) - 65 >= 0x1A) {
    return 0;
  }
  unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
LABEL_8:
  if (v6 >= 2)
  {
    unint64_t v7 = v5 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
    if (v7 >= 2)
    {
      if (v5 >= 0) {
        uint64_t v8 = (unsigned char *)a2;
      }
      else {
        uint64_t v8 = *(unsigned char **)a2;
      }
      unint64_t v9 = 1;
      do
      {
        int v10 = v8[v9];
        BOOL v11 = (v10 - 48) >= 0xA && (v10 & 0xFFFFFFDF) - 65 >= 0x1A;
        if (v11 && v10 != 95)
        {
          if ((*(unsigned char *)(a2 + 23) & 0x80) != 0)
          {
            uint64_t v12 = *(void *)(a2 + 8);
            if (*(unsigned char *)(*(void *)a2 + v9) != 46) {
              return 0;
            }
          }
          else
          {
            uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
            if (*(unsigned char *)(a2 + v9) != 46) {
              return 0;
            }
          }
          if (v9 >= v12 - 1) {
            return 0;
          }
        }
      }
      while (v7 != ++v9);
    }
  }
  unint64_t v14 = 0;
  while (1)
  {
    uint64_t v15 = *(void *)(v2 + 8 * v14);
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + 8);
      if (v16)
      {
        uint64_t v17 = sub_ADE40(v16 + 32, a2);
        if ((uint64_t *)(v16 + 40) != v17)
        {
          uint64_t result = v17[8];
          if (result) {
            break;
          }
        }
      }
    }
    ++v14;
    uint64_t v2 = *a1;
    if (v14 >= (a1[1] - *a1) >> 3) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1ED410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(*(void *)(a2 + 32))
  {
    case 0:
      sub_1F1324();
    case 1:
      uint64_t result = sub_1F1884(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 2:
      uint64_t result = sub_1F266C(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 3:
      uint64_t result = sub_1F357C(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 4:
      uint64_t result = sub_1F45A0(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 5:
      uint64_t result = sub_1F559C(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 6:
      uint64_t result = sub_1F669C(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 7:
      uint64_t result = sub_1F7808(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 8:
      uint64_t result = sub_1F89E4(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 9:
      uint64_t result = sub_1F9BB4(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 0xALL:
      uint64_t result = sub_1FADEC(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 0xBLL:
      uint64_t result = sub_1FC088(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 0xCLL:
      uint64_t result = sub_1FD38C(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 0xDLL:
      uint64_t result = sub_1FE310(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 0xELL:
      uint64_t result = sub_1FF298(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 0xFLL:
      uint64_t result = sub_200220(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 0x10:
      uint64_t result = sub_2011AC(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 0x11:
      uint64_t result = sub_202134(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 0x12:
      uint64_t result = sub_2030C0(a1, a2, a3);
      if (result) {
        return result;
      }
      goto LABEL_58;
    case 0x13:
      uint64_t result = sub_20404C(a1, a2, a3);
      if (!result) {
        goto LABEL_58;
      }
      return result;
    case 0x14:
      uint64_t result = sub_204FDC(a1, a2, a3);
      if (result) {
        return result;
      }
LABEL_58:
      std::operator+<char>();
      uint64_t v20 = std::string::append(&v35, "'");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      memset(&v33, 0, sizeof(v33));
      std::string::push_back(&v33, 49);
      std::string::push_back(&v33, 50);
      std::string::push_back(&v33, 49);
      std::string::push_back(&v33, 49);
      std::string::push_back(&v33, 50);
      std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v33;
      }
      else {
        uint64_t v23 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v33.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        uint64_t v24 = (std::string *)((char *)v23 + size - 1);
        if (v24 > v23)
        {
          std::string v25 = &v23->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v26 = *(v25 - 1);
            *(v25 - 1) = v24->__r_.__value_.__s.__data_[0];
            v24->__r_.__value_.__s.__data_[0] = v26;
            uint64_t v24 = (std::string *)((char *)v24 - 1);
            BOOL v11 = v25++ >= (char *)v24;
          }
          while (!v11);
        }
      }
      std::string v27 = std::string::insert(&v33, 0, "exprtk.hpp:");
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v38.__r_.__value_.__s + 23) = 0;
      v38.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v39 = -1;
      *(_OWORD *)long long v41 = 0u;
      *(_OWORD *)long long v42 = 0u;
      long long v43 = 0u;
      *(_OWORD *)long long __p = 0u;
      long long v45 = 0u;
      uint64_t v46 = 0;
      int v40 = 1;
      int v37 = *(_DWORD *)(a1 + 104);
      std::string::operator=(&v38, (const std::string *)(a1 + 112));
      uint64_t v39 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)v41, &__str);
      std::string::operator=((std::string *)&v42[1], &v34);
      uint64_t v29 = *(void *)(a1 + 568);
      uint64_t v30 = *(void *)(a1 + 560);
      uint64_t v31 = 30 * ((v29 - v30) >> 3) - 1;
      if (v29 == v30) {
        uint64_t v31 = 0;
      }
      if (v31 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v30 = *(void *)(a1 + 560);
        uint64_t v29 = *(void *)(a1 + 568);
      }
      if (v29 == v30)
      {
        uint64_t v18 = 0;
      }
      else
      {
        unint64_t v32 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v18 = *(void *)(v30 + 8 * (v32 / 0x1E)) + 136 * (v32 % 0x1E);
      }
LABEL_75:
      sub_B5158(v18, (uint64_t)&v37);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v45) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v43) & 0x80000000) == 0)
        {
LABEL_77:
          if ((SHIBYTE(v42[0]) & 0x80000000) == 0) {
            goto LABEL_78;
          }
          goto LABEL_86;
        }
      }
      else if ((SHIBYTE(v43) & 0x80000000) == 0)
      {
        goto LABEL_77;
      }
      operator delete(v42[1]);
      if ((SHIBYTE(v42[0]) & 0x80000000) == 0)
      {
LABEL_78:
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_79;
        }
        goto LABEL_87;
      }
LABEL_86:
      operator delete(v41[0]);
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_79:
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_80;
        }
        goto LABEL_88;
      }
LABEL_87:
      operator delete(v38.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_80:
        if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_81;
        }
        goto LABEL_89;
      }
LABEL_88:
      operator delete(v34.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_81:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_82;
        }
LABEL_90:
        operator delete(__str.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          return 0;
        }
        goto LABEL_91;
      }
LABEL_89:
      operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_90;
      }
LABEL_82:
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return 0;
      }
LABEL_91:
      operator delete(v35.__r_.__value_.__l.__data_);
      return 0;
    default:
      std::operator+<char>();
      uint64_t v4 = std::string::append(&v35, "'");
      long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      memset(&v33, 0, sizeof(v33));
      std::string::push_back(&v33, 55);
      std::string::push_back(&v33, 48);
      std::string::push_back(&v33, 49);
      std::string::push_back(&v33, 49);
      std::string::push_back(&v33, 50);
      std::string::size_type v6 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v7 = &v33;
      }
      else {
        unint64_t v7 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v6 = v33.__r_.__value_.__l.__size_;
      }
      if (v6)
      {
        uint64_t v8 = (std::string *)((char *)v7 + v6 - 1);
        if (v8 > v7)
        {
          unint64_t v9 = &v7->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v10 = *(v9 - 1);
            *(v9 - 1) = v8->__r_.__value_.__s.__data_[0];
            v8->__r_.__value_.__s.__data_[0] = v10;
            uint64_t v8 = (std::string *)((char *)v8 - 1);
            BOOL v11 = v9++ >= (char *)v8;
          }
          while (!v11);
        }
      }
      uint64_t v12 = std::string::insert(&v33, 0, "exprtk.hpp:");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v38.__r_.__value_.__s + 23) = 0;
      v38.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v39 = -1;
      *(_OWORD *)long long v41 = 0u;
      *(_OWORD *)long long v42 = 0u;
      long long v43 = 0u;
      *(_OWORD *)long long __p = 0u;
      long long v45 = 0u;
      uint64_t v46 = 0;
      int v40 = 1;
      int v37 = *(_DWORD *)(a1 + 104);
      std::string::operator=(&v38, (const std::string *)(a1 + 112));
      uint64_t v39 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)v41, &__str);
      std::string::operator=((std::string *)&v42[1], &v34);
      uint64_t v14 = *(void *)(a1 + 568);
      uint64_t v15 = *(void *)(a1 + 560);
      uint64_t v16 = 30 * ((v14 - v15) >> 3) - 1;
      if (v14 == v15) {
        uint64_t v16 = 0;
      }
      if (v16 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v15 = *(void *)(a1 + 560);
        uint64_t v14 = *(void *)(a1 + 568);
      }
      if (v14 == v15)
      {
        uint64_t v18 = 0;
      }
      else
      {
        unint64_t v17 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v18 = *(void *)(v15 + 8 * (v17 / 0x1E)) + 136 * (v17 % 0x1E);
      }
      goto LABEL_75;
  }
}

void sub_1EDB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1EDC38(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1 == a1[1]) {
    return 0;
  }
  char v5 = *(unsigned char *)(a2 + 23);
  if (v5 < 0)
  {
    unint64_t v6 = *(void *)(a2 + 8);
    if (v6 && (**(unsigned char **)a2 & 0xDFu) - 65 < 0x1A) {
      goto LABEL_8;
    }
    return 0;
  }
  if (!*(unsigned char *)(a2 + 23) || (*(unsigned char *)a2 & 0xDFu) - 65 >= 0x1A) {
    return 0;
  }
  unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
LABEL_8:
  if (v6 >= 2)
  {
    unint64_t v7 = v5 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
    if (v7 >= 2)
    {
      if (v5 >= 0) {
        uint64_t v8 = (unsigned char *)a2;
      }
      else {
        uint64_t v8 = *(unsigned char **)a2;
      }
      unint64_t v9 = 1;
      do
      {
        int v10 = v8[v9];
        BOOL v11 = (v10 - 48) >= 0xA && (v10 & 0xFFFFFFDF) - 65 >= 0x1A;
        if (v11 && v10 != 95)
        {
          if ((*(unsigned char *)(a2 + 23) & 0x80) != 0)
          {
            uint64_t v12 = *(void *)(a2 + 8);
            if (*(unsigned char *)(*(void *)a2 + v9) != 46) {
              return 0;
            }
          }
          else
          {
            uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
            if (*(unsigned char *)(a2 + v9) != 46) {
              return 0;
            }
          }
          if (v9 >= v12 - 1) {
            return 0;
          }
        }
      }
      while (v7 != ++v9);
    }
  }
  unint64_t v14 = 0;
  while (1)
  {
    uint64_t v15 = *(void *)(v2 + 8 * v14);
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + 8);
      if (v16)
      {
        unint64_t v17 = sub_ADE40(v16 + 64, a2);
        if ((uint64_t *)(v16 + 72) != v17)
        {
          uint64_t result = v17[8];
          if (result) {
            break;
          }
        }
      }
    }
    ++v14;
    uint64_t v2 = *a1;
    if (v14 >= (a1[1] - *a1) >> 3) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1EDDAC(uint64_t a1, uint64_t a2)
{
  v139 = 0;
  v140 = 0;
  v141 = 0;
  v136[0] = 1;
  uint64_t v137 = a1;
  v138 = &v139;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v4) {
    uint64_t v4 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v4 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v4;
  std::string __str = (std::string *)(a1 + 112);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v4 + 8));
  *(void *)(a1 + 136) = *(void *)(v4 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    if (*(unsigned char *)(a2 + 8)) {
      goto LABEL_62;
    }
    std::operator+<char>();
    unint64_t v6 = std::string::append(&v124, " not allowed");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v125.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    memset(&v122, 0, sizeof(v122));
    std::string::push_back(&v122, 49);
    std::string::push_back(&v122, 50);
    std::string::push_back(&v122, 51);
    std::string::push_back(&v122, 51);
    std::string::push_back(&v122, 50);
    std::string::size_type size = HIBYTE(v122.__r_.__value_.__r.__words[2]);
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v9 = &v122;
    }
    else {
      unint64_t v9 = (std::string *)v122.__r_.__value_.__r.__words[0];
    }
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v122.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      int v10 = (std::string *)((char *)v9 + size - 1);
      if (v10 > v9)
      {
        BOOL v11 = &v9->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v12 = *(v11 - 1);
          *(v11 - 1) = v10->__r_.__value_.__s.__data_[0];
          v10->__r_.__value_.__s.__data_[0] = v12;
          int v10 = (std::string *)((char *)v10 - 1);
          BOOL v13 = v11++ >= (char *)v10;
        }
        while (!v13);
      }
    }
    unint64_t v14 = std::string::insert(&v122, 0, "exprtk.hpp:");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v123.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v127.__r_.__value_.__s + 23) = 0;
    v127.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v128 = -1;
    long long v130 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long __p = 0u;
    long long v134 = 0u;
    uint64_t v135 = 0;
    int v129 = 1;
    int v126 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v127, __str);
    uint64_t v128 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v130, &v125);
    std::string::operator=((std::string *)((char *)&v131 + 8), &v123);
    uint64_t v16 = *(void *)(a1 + 568);
    uint64_t v17 = *(void *)(a1 + 560);
    uint64_t v18 = 30 * ((v16 - v17) >> 3) - 1;
    if (v16 == v17) {
      uint64_t v18 = 0;
    }
    if (v18 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v17 = *(void *)(a1 + 560);
      uint64_t v16 = *(void *)(a1 + 568);
    }
    if (v16 == v17)
    {
      uint64_t v20 = 0;
    }
    else
    {
      unint64_t v19 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v20 = *(void *)(v17 + 8 * (v19 / 0x1E)) + 136 * (v19 % 0x1E);
    }
    sub_B5158(v20, (uint64_t)&v126);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v134) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v132) & 0x80000000) == 0)
      {
LABEL_146:
        if ((SBYTE7(v131) & 0x80000000) == 0) {
          goto LABEL_147;
        }
        goto LABEL_155;
      }
    }
    else if ((SHIBYTE(v132) & 0x80000000) == 0)
    {
      goto LABEL_146;
    }
    operator delete(*((void **)&v131 + 1));
    if ((SBYTE7(v131) & 0x80000000) == 0)
    {
LABEL_147:
      if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_148;
      }
      goto LABEL_156;
    }
LABEL_155:
    operator delete((void *)v130);
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_148:
      if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_149;
      }
      goto LABEL_157;
    }
LABEL_156:
    operator delete(v127.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_149:
      if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_150;
      }
      goto LABEL_158;
    }
LABEL_157:
    operator delete(v123.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_150:
      if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_151;
      }
      goto LABEL_159;
    }
LABEL_158:
    operator delete(v122.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_151:
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_212;
      }
LABEL_160:
      operator delete(v124.__r_.__value_.__l.__data_);
      goto LABEL_212;
    }
LABEL_159:
    operator delete(v125.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_212;
    }
    goto LABEL_160;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v5) {
    uint64_t v5 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v5 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v5;
  std::string::operator=(__str, (const std::string *)(v5 + 8));
  *(void *)(a1 + 136) = *(void *)(v5 + 32);
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    uint64_t v22 = a1 + 40;
    while (1)
    {
      uint64_t v23 = sub_B7FE4(a1, 0);
      uint64_t v24 = v23;
      if (!v23) {
        goto LABEL_212;
      }
      std::string v25 = v140;
      if (v140 < v141)
      {
        *(void *)v140 = v23;
        uint64_t v26 = (uint64_t)(v25 + 8);
        goto LABEL_52;
      }
      std::string v27 = (char *)v139;
      uint64_t v28 = (v140 - (char *)v139) >> 3;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v30 = v141 - (char *)v139;
      if ((v141 - (char *)v139) >> 2 > v29) {
        unint64_t v29 = v30 >> 2;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31)
      {
        if (v31 >> 61) {
          sub_188D718();
        }
        unint64_t v32 = (char *)operator new(8 * v31);
        std::string v33 = (uint64_t *)&v32[8 * v28];
        *std::string v33 = v24;
        uint64_t v26 = (uint64_t)(v33 + 1);
        if (v25 == v27)
        {
LABEL_50:
          v139 = v33;
          v140 = (char *)v26;
          v141 = &v32[8 * v31];
          if (!v25) {
            goto LABEL_52;
          }
LABEL_51:
          operator delete(v25);
          goto LABEL_52;
        }
      }
      else
      {
        unint64_t v32 = 0;
        std::string v33 = (uint64_t *)(8 * v28);
        *(void *)(8 * v28) = v24;
        uint64_t v26 = 8 * v28 + 8;
        if (v25 == v27) {
          goto LABEL_50;
        }
      }
      unint64_t v34 = v25 - 8 - v27;
      if (v34 < 0x58) {
        goto LABEL_227;
      }
      if ((unint64_t)(v27 - v32) < 0x20) {
        goto LABEL_227;
      }
      uint64_t v35 = (v34 >> 3) + 1;
      uint64_t v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
      int v37 = &v25[-v36];
      std::string v33 = (uint64_t *)((char *)v33 - v36);
      std::string v38 = &v32[8 * v28 - 16];
      uint64_t v39 = v25 - 16;
      uint64_t v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v41 = *(_OWORD *)v39;
        *((_OWORD *)v38 - 1) = *((_OWORD *)v39 - 1);
        *(_OWORD *)std::string v38 = v41;
        v38 -= 32;
        v39 -= 32;
        v40 -= 4;
      }
      while (v40);
      std::string v25 = v37;
      if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_227:
        do
        {
          uint64_t v42 = *((void *)v25 - 1);
          v25 -= 8;
          *--std::string v33 = v42;
        }
        while (v25 != v27);
      }
      std::string v25 = (char *)v139;
      v139 = v33;
      v140 = (char *)v26;
      v141 = &v32[8 * v31];
      if (v25) {
        goto LABEL_51;
      }
LABEL_52:
      v140 = (char *)v26;
      int v43 = *(_DWORD *)(a1 + 104);
      if (v43 != 44)
      {
        if (v43 == 41)
        {
          uint64_t v46 = *(void *)(a1 + 24);
          if (*(void *)(a1 + 8) != v46)
          {
            *(void *)(a1 + 24) = v46 + 40;
            uint64_t v22 = v46;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)v22;
          std::string::operator=(__str, (const std::string *)(v22 + 8));
          *(void *)(a1 + 136) = *(void *)(v22 + 32);
          goto LABEL_62;
        }
        std::operator+<char>();
        memset(&v123, 0, sizeof(v123));
        std::string::push_back(&v123, 55);
        std::string::push_back(&v123, 48);
        std::string::push_back(&v123, 51);
        std::string::push_back(&v123, 51);
        std::string::push_back(&v123, 50);
        std::string::size_type v103 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
        if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v104 = &v123;
        }
        else {
          uint64_t v104 = (std::string *)v123.__r_.__value_.__r.__words[0];
        }
        if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v103 = v123.__r_.__value_.__l.__size_;
        }
        if (v103)
        {
          long long v105 = (std::string *)((char *)v104 + v103 - 1);
          if (v105 > v104)
          {
            uint64_t v106 = &v104->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v107 = *(v106 - 1);
              *(v106 - 1) = v105->__r_.__value_.__s.__data_[0];
              v105->__r_.__value_.__s.__data_[0] = v107;
              long long v105 = (std::string *)((char *)v105 - 1);
              BOOL v13 = v106++ >= (char *)v105;
            }
            while (!v13);
          }
        }
        std::string v108 = std::string::insert(&v123, 0, "exprtk.hpp:");
        long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
        v124.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v109;
        v108->__r_.__value_.__l.__size_ = 0;
        v108->__r_.__value_.__r.__words[2] = 0;
        v108->__r_.__value_.__r.__words[0] = 0;
        *((unsigned char *)&v127.__r_.__value_.__s + 23) = 0;
        v127.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v128 = -1;
        long long v130 = 0u;
        long long v131 = 0u;
        long long v132 = 0u;
        long long __p = 0u;
        long long v134 = 0u;
        uint64_t v135 = 0;
        int v129 = 1;
        int v126 = *(_DWORD *)(a1 + 104);
        std::string::operator=(&v127, __str);
        uint64_t v128 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)&v130, &v125);
        std::string::operator=((std::string *)((char *)&v131 + 8), &v124);
        uint64_t v110 = *(void *)(a1 + 568);
        uint64_t v111 = *(void *)(a1 + 560);
        uint64_t v112 = 30 * ((v110 - v111) >> 3) - 1;
        if (v110 == v111) {
          uint64_t v112 = 0;
        }
        if (v112 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v111 = *(void *)(a1 + 560);
          uint64_t v110 = *(void *)(a1 + 568);
        }
        if (v110 == v111)
        {
          uint64_t v114 = 0;
        }
        else
        {
          unint64_t v113 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v114 = *(void *)(v111 + 8 * (v113 / 0x1E)) + 136 * (v113 % 0x1E);
        }
        sub_B5158(v114, (uint64_t)&v126);
        ++*(void *)(a1 + 592);
        if (SBYTE7(v134) < 0)
        {
          operator delete((void *)__p);
          if (SHIBYTE(v132) < 0) {
            goto LABEL_216;
          }
LABEL_207:
          if ((SBYTE7(v131) & 0x80000000) == 0) {
            goto LABEL_208;
          }
LABEL_217:
          operator delete((void *)v130);
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_218;
          }
LABEL_209:
          if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_210;
          }
LABEL_219:
          operator delete(v124.__r_.__value_.__l.__data_);
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_220;
          }
LABEL_211:
          if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_212;
          }
        }
        else
        {
          if ((SHIBYTE(v132) & 0x80000000) == 0) {
            goto LABEL_207;
          }
LABEL_216:
          operator delete(*((void **)&v131 + 1));
          if (SBYTE7(v131) < 0) {
            goto LABEL_217;
          }
LABEL_208:
          if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_209;
          }
LABEL_218:
          operator delete(v127.__r_.__value_.__l.__data_);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_219;
          }
LABEL_210:
          if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_211;
          }
LABEL_220:
          operator delete(v123.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_212;
          }
        }
        operator delete(v125.__r_.__value_.__l.__data_);
        uint64_t v87 = 0;
        sub_22094C((uint64_t)v136);
        unint64_t v88 = v139;
        if (v139) {
          goto LABEL_213;
        }
        return v87;
      }
      uint64_t v44 = *(void *)(a1 + 24);
      uint64_t v45 = a1 + 40;
      if (*(void *)(a1 + 8) != v44)
      {
        *(void *)(a1 + 24) = v44 + 40;
        uint64_t v45 = v44;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v45;
      std::string::operator=(__str, (const std::string *)(v45 + 8));
      *(void *)(a1 + 136) = *(void *)(v45 + 32);
    }
  }
  uint64_t v21 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v21) {
    uint64_t v21 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v21 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v21;
  std::string::operator=(__str, (const std::string *)(v21 + 8));
  *(void *)(a1 + 136) = *(void *)(v21 + 32);
  if (*(unsigned char *)(a2 + 8))
  {
LABEL_62:
    unint64_t v47 = (v140 - (char *)v139) >> 3;
    if (v47 >= *(void *)(a2 + 16))
    {
      if (v47 <= *(void *)(a2 + 24))
      {
        uint64_t v87 = sub_21C504(a1 + 344, a2, (uint64_t)&v139);
        v136[0] = v87 == 0;
        sub_22094C((uint64_t)v136);
        unint64_t v88 = v139;
        if (!v139) {
          return v87;
        }
        goto LABEL_213;
      }
      std::operator+<char>();
      long long v68 = std::string::append(&v122, ", require no more than ");
      long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      v123.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      sub_B1D70(*(_DWORD *)(a2 + 24), (unint64_t)&v119);
      if ((v121 & 0x80u) == 0) {
        uint64_t v70 = (const std::string::value_type *)&v119;
      }
      else {
        uint64_t v70 = (const std::string::value_type *)v119;
      }
      if ((v121 & 0x80u) == 0) {
        std::string::size_type v71 = v121;
      }
      else {
        std::string::size_type v71 = v120;
      }
      unint64_t v72 = std::string::append(&v123, v70, v71);
      long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      v124.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      long long v74 = std::string::append(&v124, " parameters");
      long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      v125.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      memset(&v117, 0, sizeof(v117));
      std::string::push_back(&v117, 54);
      std::string::push_back(&v117, 52);
      std::string::push_back(&v117, 51);
      std::string::push_back(&v117, 51);
      std::string::push_back(&v117, 50);
      std::string::size_type v76 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v77 = &v117;
      }
      else {
        uint64_t v77 = (std::string *)v117.__r_.__value_.__r.__words[0];
      }
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v76 = v117.__r_.__value_.__l.__size_;
      }
      if (v76)
      {
        uint64_t v78 = (std::string *)((char *)v77 + v76 - 1);
        if (v78 > v77)
        {
          std::string::value_type v79 = &v77->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v80 = *(v79 - 1);
            *(v79 - 1) = v78->__r_.__value_.__s.__data_[0];
            v78->__r_.__value_.__s.__data_[0] = v80;
            uint64_t v78 = (std::string *)((char *)v78 - 1);
            BOOL v13 = v79++ >= (char *)v78;
          }
          while (!v13);
        }
      }
      long long v81 = std::string::insert(&v117, 0, "exprtk.hpp:");
      long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v118.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v127.__r_.__value_.__s + 23) = 0;
      v127.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v128 = -1;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      long long __p = 0u;
      long long v134 = 0u;
      uint64_t v135 = 0;
      int v129 = 1;
      int v126 = *(_DWORD *)(a1 + 104);
      std::string::operator=(&v127, __str);
      uint64_t v128 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v130, &v125);
      std::string::operator=((std::string *)((char *)&v131 + 8), &v118);
      uint64_t v83 = *(void *)(a1 + 568);
      uint64_t v84 = *(void *)(a1 + 560);
      uint64_t v85 = 30 * ((v83 - v84) >> 3) - 1;
      if (v83 == v84) {
        uint64_t v85 = 0;
      }
      if (v85 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v84 = *(void *)(a1 + 560);
        uint64_t v83 = *(void *)(a1 + 568);
      }
      if (v83 == v84)
      {
        uint64_t v67 = 0;
      }
      else
      {
        unint64_t v86 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v67 = *(void *)(v84 + 8 * (v86 / 0x1E)) + 136 * (v86 % 0x1E);
      }
    }
    else
    {
      std::operator+<char>();
      size_t v48 = std::string::append(&v122, ", require at least ");
      long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v123.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      sub_B1D70(*(_DWORD *)(a2 + 16), (unint64_t)&v119);
      if ((v121 & 0x80u) == 0) {
        uint64_t v50 = (const std::string::value_type *)&v119;
      }
      else {
        uint64_t v50 = (const std::string::value_type *)v119;
      }
      if ((v121 & 0x80u) == 0) {
        std::string::size_type v51 = v121;
      }
      else {
        std::string::size_type v51 = v120;
      }
      uint64_t v52 = std::string::append(&v123, v50, v51);
      long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
      v124.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v53;
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      uint64_t v54 = std::string::append(&v124, " parameters");
      long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v125.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      memset(&v117, 0, sizeof(v117));
      std::string::push_back(&v117, 52);
      std::string::push_back(&v117, 51);
      std::string::push_back(&v117, 51);
      std::string::push_back(&v117, 51);
      std::string::push_back(&v117, 50);
      std::string::size_type v56 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v57 = &v117;
      }
      else {
        uint64_t v57 = (std::string *)v117.__r_.__value_.__r.__words[0];
      }
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v56 = v117.__r_.__value_.__l.__size_;
      }
      if (v56)
      {
        uint64_t v58 = (std::string *)((char *)v57 + v56 - 1);
        if (v58 > v57)
        {
          uint64_t v59 = &v57->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v60 = *(v59 - 1);
            *(v59 - 1) = v58->__r_.__value_.__s.__data_[0];
            v58->__r_.__value_.__s.__data_[0] = v60;
            uint64_t v58 = (std::string *)((char *)v58 - 1);
            BOOL v13 = v59++ >= (char *)v58;
          }
          while (!v13);
        }
      }
      long long v61 = std::string::insert(&v117, 0, "exprtk.hpp:");
      long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v118.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v127.__r_.__value_.__s + 23) = 0;
      v127.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v128 = -1;
      long long v130 = 0u;
      long long v131 = 0u;
      long long v132 = 0u;
      long long __p = 0u;
      long long v134 = 0u;
      uint64_t v135 = 0;
      int v129 = 1;
      int v126 = *(_DWORD *)(a1 + 104);
      std::string::operator=(&v127, __str);
      uint64_t v128 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v130, &v125);
      std::string::operator=((std::string *)((char *)&v131 + 8), &v118);
      uint64_t v63 = *(void *)(a1 + 568);
      uint64_t v64 = *(void *)(a1 + 560);
      uint64_t v65 = 30 * ((v63 - v64) >> 3) - 1;
      if (v63 == v64) {
        uint64_t v65 = 0;
      }
      if (v65 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v64 = *(void *)(a1 + 560);
        uint64_t v63 = *(void *)(a1 + 568);
      }
      if (v63 == v64)
      {
        uint64_t v67 = 0;
      }
      else
      {
        unint64_t v66 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v67 = *(void *)(v64 + 8 * (v66 / 0x1E)) + 136 * (v66 % 0x1E);
      }
    }
    sub_B5158(v67, (uint64_t)&v126);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v134) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v132) & 0x80000000) == 0)
      {
LABEL_164:
        if ((SBYTE7(v131) & 0x80000000) == 0) {
          goto LABEL_165;
        }
        goto LABEL_176;
      }
    }
    else if ((SHIBYTE(v132) & 0x80000000) == 0)
    {
      goto LABEL_164;
    }
    operator delete(*((void **)&v131 + 1));
    if ((SBYTE7(v131) & 0x80000000) == 0)
    {
LABEL_165:
      if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_166;
      }
      goto LABEL_177;
    }
LABEL_176:
    operator delete((void *)v130);
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_166:
      if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_167;
      }
      goto LABEL_178;
    }
LABEL_177:
    operator delete(v127.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_167:
      if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_168;
      }
      goto LABEL_179;
    }
LABEL_178:
    operator delete(v118.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_168:
      if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_169;
      }
      goto LABEL_180;
    }
LABEL_179:
    operator delete(v117.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_169:
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_170;
      }
      goto LABEL_181;
    }
LABEL_180:
    operator delete(v125.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_170:
      if (((char)v121 & 0x80000000) == 0) {
        goto LABEL_171;
      }
      goto LABEL_182;
    }
LABEL_181:
    operator delete(v124.__r_.__value_.__l.__data_);
    if (((char)v121 & 0x80000000) == 0)
    {
LABEL_171:
      if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_172;
      }
      goto LABEL_183;
    }
LABEL_182:
    operator delete(v119);
    if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_172:
      if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_212;
      }
LABEL_184:
      operator delete(v122.__r_.__value_.__l.__data_);
      goto LABEL_212;
    }
LABEL_183:
    operator delete(v123.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_212;
    }
    goto LABEL_184;
  }
  std::operator+<char>();
  uint64_t v89 = std::string::append(&v124, " not allowed");
  long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
  v125.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v90;
  v89->__r_.__value_.__l.__size_ = 0;
  v89->__r_.__value_.__r.__words[2] = 0;
  v89->__r_.__value_.__r.__words[0] = 0;
  memset(&v122, 0, sizeof(v122));
  std::string::push_back(&v122, 50);
  std::string::push_back(&v122, 56);
  std::string::push_back(&v122, 50);
  std::string::push_back(&v122, 51);
  std::string::push_back(&v122, 50);
  std::string::size_type v91 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
  if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v92 = &v122;
  }
  else {
    int v92 = (std::string *)v122.__r_.__value_.__r.__words[0];
  }
  if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v91 = v122.__r_.__value_.__l.__size_;
  }
  if (v91)
  {
    long long v93 = (std::string *)((char *)v92 + v91 - 1);
    if (v93 > v92)
    {
      uint64_t v94 = &v92->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v95 = *(v94 - 1);
        *(v94 - 1) = v93->__r_.__value_.__s.__data_[0];
        v93->__r_.__value_.__s.__data_[0] = v95;
        long long v93 = (std::string *)((char *)v93 - 1);
        BOOL v13 = v94++ >= (char *)v93;
      }
      while (!v13);
    }
  }
  long long v96 = std::string::insert(&v122, 0, "exprtk.hpp:");
  long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
  v123.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v97;
  v96->__r_.__value_.__l.__size_ = 0;
  v96->__r_.__value_.__r.__words[2] = 0;
  v96->__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&v127.__r_.__value_.__s + 23) = 0;
  v127.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v128 = -1;
  long long v130 = 0u;
  long long v131 = 0u;
  long long v132 = 0u;
  long long __p = 0u;
  long long v134 = 0u;
  uint64_t v135 = 0;
  int v129 = 1;
  int v126 = *(_DWORD *)(a1 + 104);
  std::string::operator=(&v127, __str);
  uint64_t v128 = *(void *)(a1 + 136);
  std::string::operator=((std::string *)&v130, &v125);
  std::string::operator=((std::string *)((char *)&v131 + 8), &v123);
  uint64_t v98 = *(void *)(a1 + 568);
  uint64_t v99 = *(void *)(a1 + 560);
  uint64_t v100 = 30 * ((v98 - v99) >> 3) - 1;
  if (v98 == v99) {
    uint64_t v100 = 0;
  }
  if (v100 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
  {
    sub_B4B88(a1 + 552);
    uint64_t v99 = *(void *)(a1 + 560);
    uint64_t v98 = *(void *)(a1 + 568);
  }
  if (v98 == v99)
  {
    uint64_t v102 = 0;
  }
  else
  {
    unint64_t v101 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
    uint64_t v102 = *(void *)(v99 + 8 * (v101 / 0x1E)) + 136 * (v101 % 0x1E);
  }
  sub_B5158(v102, (uint64_t)&v126);
  ++*(void *)(a1 + 592);
  if (SBYTE7(v134) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v132) & 0x80000000) == 0)
    {
LABEL_188:
      if ((SBYTE7(v131) & 0x80000000) == 0) {
        goto LABEL_189;
      }
      goto LABEL_197;
    }
  }
  else if ((SHIBYTE(v132) & 0x80000000) == 0)
  {
    goto LABEL_188;
  }
  operator delete(*((void **)&v131 + 1));
  if ((SBYTE7(v131) & 0x80000000) == 0)
  {
LABEL_189:
    if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_190;
    }
    goto LABEL_198;
  }
LABEL_197:
  operator delete((void *)v130);
  if ((SHIBYTE(v127.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_190:
    if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_191;
    }
    goto LABEL_199;
  }
LABEL_198:
  operator delete(v127.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v123.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_191:
    if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_192;
    }
    goto LABEL_200;
  }
LABEL_199:
  operator delete(v123.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v122.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_192:
    if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_193;
    }
LABEL_201:
    operator delete(v125.__r_.__value_.__l.__data_);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_202;
    }
    goto LABEL_212;
  }
LABEL_200:
  operator delete(v122.__r_.__value_.__l.__data_);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_201;
  }
LABEL_193:
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_202:
    operator delete(v124.__r_.__value_.__l.__data_);
    uint64_t v87 = 0;
    sub_22094C((uint64_t)v136);
    unint64_t v88 = v139;
    if (!v139) {
      return v87;
    }
    goto LABEL_213;
  }
LABEL_212:
  uint64_t v87 = 0;
  sub_22094C((uint64_t)v136);
  unint64_t v88 = v139;
  if (v139)
  {
LABEL_213:
    v140 = (char *)v88;
    operator delete(v88);
  }
  return v87;
}

void sub_1EF024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57)
{
  if (a42 < 0)
  {
    operator delete(__p);
    if ((a56 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((a56 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a51);
LABEL_6:
  sub_22094C(v57 - 144);
  uint64_t v59 = *(void **)(v57 - 120);
  if (v59)
  {
    *(void *)(v57 - 112) = v59;
    operator delete(v59);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1EF344(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1 == a1[1]) {
    return 0;
  }
  char v5 = *(unsigned char *)(a2 + 23);
  if (v5 < 0)
  {
    unint64_t v6 = *(void *)(a2 + 8);
    if (v6 && (**(unsigned char **)a2 & 0xDFu) - 65 < 0x1A) {
      goto LABEL_8;
    }
    return 0;
  }
  if (!*(unsigned char *)(a2 + 23) || (*(unsigned char *)a2 & 0xDFu) - 65 >= 0x1A) {
    return 0;
  }
  unint64_t v6 = *(unsigned __int8 *)(a2 + 23);
LABEL_8:
  if (v6 >= 2)
  {
    unint64_t v7 = v5 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(void *)(a2 + 8);
    if (v7 >= 2)
    {
      if (v5 >= 0) {
        uint64_t v8 = (unsigned char *)a2;
      }
      else {
        uint64_t v8 = *(unsigned char **)a2;
      }
      unint64_t v9 = 1;
      do
      {
        int v10 = v8[v9];
        BOOL v11 = (v10 - 48) >= 0xA && (v10 & 0xFFFFFFDF) - 65 >= 0x1A;
        if (v11 && v10 != 95)
        {
          if ((*(unsigned char *)(a2 + 23) & 0x80) != 0)
          {
            uint64_t v12 = *(void *)(a2 + 8);
            if (*(unsigned char *)(*(void *)a2 + v9) != 46) {
              return 0;
            }
          }
          else
          {
            uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
            if (*(unsigned char *)(a2 + v9) != 46) {
              return 0;
            }
          }
          if (v9 >= v12 - 1) {
            return 0;
          }
        }
      }
      while (v7 != ++v9);
    }
  }
  unint64_t v14 = 0;
  while (1)
  {
    uint64_t v15 = *(void *)(v2 + 8 * v14);
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + 8);
      if (v16)
      {
        uint64_t v17 = sub_ADE40(v16 + 96, a2);
        if ((uint64_t *)(v16 + 104) != v17)
        {
          uint64_t result = v17[8];
          if (result) {
            break;
          }
        }
      }
    }
    ++v14;
    uint64_t v2 = *a1;
    if (v14 >= (a1[1] - *a1) >> 3) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1EF4B8(uint64_t a1, uint64_t a2, long long *a3)
{
  v162 = 0;
  v163 = 0;
  v164 = 0;
  v159[0] = 1;
  uint64_t v160 = a1;
  v161 = &v162;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  unint64_t v7 = (const std::string *)(a1 + 112);
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  memset(&v158, 0, sizeof(v158));
  sub_21CB54((uint64_t)v154, a1, a3, a2 + 32, 83);
  if (!LOBYTE(v154[0]))
  {
    std::operator+<char>();
    memset(&v141, 0, sizeof(v141));
    std::string::push_back(&v141, 54);
    std::string::push_back(&v141, 52);
    std::string::push_back(&v141, 54);
    std::string::push_back(&v141, 51);
    std::string::push_back(&v141, 50);
    std::string::size_type size = HIBYTE(v141.__r_.__value_.__r.__words[2]);
    if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v10 = &v141;
    }
    else {
      int v10 = (std::string *)v141.__r_.__value_.__r.__words[0];
    }
    if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v141.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      BOOL v11 = (std::string *)((char *)v10 + size - 1);
      if (v11 > v10)
      {
        uint64_t v12 = &v10->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v13 = *(v12 - 1);
          *(v12 - 1) = v11->__r_.__value_.__s.__data_[0];
          v11->__r_.__value_.__s.__data_[0] = v13;
          BOOL v11 = (std::string *)((char *)v11 - 1);
          BOOL v14 = v12++ >= (char *)v11;
        }
        while (!v14);
      }
    }
    uint64_t v15 = std::string::insert(&v141, 0, "exprtk.hpp:");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v142.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v145.__r_.__value_.__s + 23) = 0;
    v145.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v146 = -1;
    *(_OWORD *)v148 = 0u;
    *(_OWORD *)v149 = 0u;
    long long v150 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v152 = 0u;
    uint64_t v153 = 0;
    int v147 = 1;
    LODWORD(v144) = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v145, (const std::string *)(a1 + 112));
    uint64_t v146 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v148, &__str);
    std::string::operator=((std::string *)&v149[1], &v142);
    uint64_t v17 = *(void *)(a1 + 568);
    uint64_t v18 = *(void *)(a1 + 560);
    uint64_t v19 = 30 * ((v17 - v18) >> 3) - 1;
    if (v17 == v18) {
      uint64_t v19 = 0;
    }
    if (v19 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v18 = *(void *)(a1 + 560);
      uint64_t v17 = *(void *)(a1 + 568);
    }
    if (v17 == v18)
    {
      uint64_t v21 = 0;
    }
    else
    {
      unint64_t v20 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v21 = *(void *)(v18 + 8 * (v20 / 0x1E)) + 136 * (v20 % 0x1E);
    }
    sub_B5158(v21, (uint64_t)&v144);
    goto LABEL_184;
  }
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    if (*(char *)(a2 + 55) < 0)
    {
      if (!*(void *)(a2 + 40)) {
        goto LABEL_109;
      }
    }
    else if (!*(unsigned char *)(a2 + 55))
    {
      goto LABEL_109;
    }
    if (!*(unsigned char *)(a2 + 8)) {
      goto LABEL_109;
    }
    uint64_t v50 = v156;
    uint64_t v51 = (char *)v157 - (char *)v156;
    if (v157 != v156)
    {
      uint64_t v139 = a2;
      uint64_t v52 = 0;
      unint64_t v53 = v51 >> 5;
      if ((unint64_t)(v51 >> 5) <= 1) {
        uint64_t v54 = 1;
      }
      else {
        uint64_t v54 = v51 >> 5;
      }
      BOOL v55 = 1;
      while (1)
      {
        std::string::size_type v56 = &v50[4 * v52];
        uint64_t v57 = v56 + 1;
        int v58 = *((char *)v56 + 31);
        if (v58 < 0)
        {
          std::string::value_type v60 = v57;
          uint64_t v57 = (void *)*v57;
          int64_t v59 = v60[1];
          if (v59 < 1) {
            goto LABEL_74;
          }
        }
        else
        {
          int64_t v59 = v58;
          if (!(_BYTE)v58) {
            goto LABEL_74;
          }
        }
        long long v61 = (char *)v57 + v59;
        long long v62 = v57;
        while (1)
        {
          uint64_t v63 = memchr(v62, 90, v59);
          if (!v63) {
            goto LABEL_74;
          }
          if (*v63 == 90) {
            break;
          }
          long long v62 = v63 + 1;
          int64_t v59 = v61 - (unsigned char *)v62;
          if (v61 - (unsigned char *)v62 < 1) {
            goto LABEL_74;
          }
        }
        if (v63 != v61 && v63 - (unsigned char *)v57 != -1)
        {
LABEL_86:
          a2 = v139;
          if (v55) {
            goto LABEL_109;
          }
          break;
        }
LABEL_74:
        BOOL v55 = ++v52 < v53;
        if (v52 == v54) {
          goto LABEL_86;
        }
      }
    }
    std::operator+<char>();
    uint64_t v64 = std::string::append(&v142, " not allowed");
    long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    memset(&v140, 0, sizeof(v140));
    std::string::push_back(&v140, 52);
    std::string::push_back(&v140, 49);
    std::string::push_back(&v140, 55);
    std::string::push_back(&v140, 51);
    std::string::push_back(&v140, 50);
    std::string::size_type v66 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v67 = &v140;
    }
    else {
      uint64_t v67 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v66 = v140.__r_.__value_.__l.__size_;
    }
    if (v66)
    {
      long long v68 = (std::string *)((char *)v67 + v66 - 1);
      if (v68 > v67)
      {
        long long v69 = &v67->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v70 = *(v69 - 1);
          *(v69 - 1) = v68->__r_.__value_.__s.__data_[0];
          v68->__r_.__value_.__s.__data_[0] = v70;
          long long v68 = (std::string *)((char *)v68 - 1);
          BOOL v14 = v69++ >= (char *)v68;
        }
        while (!v14);
      }
    }
    std::string::size_type v71 = std::string::insert(&v140, 0, "exprtk.hpp:");
    long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
    v141.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v72;
    v71->__r_.__value_.__l.__size_ = 0;
    v71->__r_.__value_.__r.__words[2] = 0;
    v71->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v145.__r_.__value_.__s + 23) = 0;
    v145.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v146 = -1;
    *(_OWORD *)v148 = 0u;
    *(_OWORD *)v149 = 0u;
    long long v150 = 0u;
    *(_OWORD *)long long __p = 0u;
    long long v152 = 0u;
    uint64_t v153 = 0;
    int v147 = 1;
    LODWORD(v144) = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v145, (const std::string *)(a1 + 112));
    uint64_t v146 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v148, &__str);
    std::string::operator=((std::string *)&v149[1], &v141);
    uint64_t v73 = *(void *)(a1 + 568);
    uint64_t v74 = *(void *)(a1 + 560);
    uint64_t v75 = 30 * ((v73 - v74) >> 3) - 1;
    if (v73 == v74) {
      uint64_t v75 = 0;
    }
    if (v75 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v74 = *(void *)(a1 + 560);
      uint64_t v73 = *(void *)(a1 + 568);
    }
    if (v73 == v74)
    {
      uint64_t v77 = 0;
    }
    else
    {
      unint64_t v76 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v77 = *(void *)(v74 + 8 * (v76 / 0x1E)) + 136 * (v76 % 0x1E);
    }
    sub_B5158(v77, (uint64_t)&v144);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v152) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v150) & 0x80000000) == 0)
      {
LABEL_202:
        if ((SHIBYTE(v149[0]) & 0x80000000) == 0) {
          goto LABEL_203;
        }
        goto LABEL_211;
      }
    }
    else if ((SHIBYTE(v150) & 0x80000000) == 0)
    {
      goto LABEL_202;
    }
    operator delete(v149[1]);
    if ((SHIBYTE(v149[0]) & 0x80000000) == 0)
    {
LABEL_203:
      if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_204;
      }
      goto LABEL_212;
    }
LABEL_211:
    operator delete(v148[0]);
    if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_204:
      if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_205;
      }
      goto LABEL_213;
    }
LABEL_212:
    operator delete(v145.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_205:
      if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_206;
      }
      goto LABEL_214;
    }
LABEL_213:
    operator delete(v141.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_206:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_207;
      }
      goto LABEL_215;
    }
LABEL_214:
    operator delete(v140.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_207:
      if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_243;
      }
LABEL_216:
      operator delete(v142.__r_.__value_.__l.__data_);
      goto LABEL_243;
    }
LABEL_215:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_243;
    }
    goto LABEL_216;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v8) {
    uint64_t v8 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v8 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v8;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v8 + 8));
  *(void *)(a1 + 136) = *(void *)(v8 + 32);
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    uint64_t v139 = a2;
    uint64_t v23 = (std::string *)(a1 + 112);
    uint64_t v24 = a1 + 40;
    while (1)
    {
      uint64_t v25 = sub_B7FE4(a1, 0);
      uint64_t v26 = v25;
      if (!v25) {
        goto LABEL_243;
      }
      unsigned int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v25 + 32))(v25) - 124;
      if (v27 <= 0x11 && ((0x3C5E1u >> v27) & 1) != 0)
      {
        std::string::value_type v28 = 86;
      }
      else if (sub_115C38(v26))
      {
        std::string::value_type v28 = 83;
      }
      else
      {
        std::string::value_type v28 = 84;
      }
      std::string::push_back(&v158, v28);
      unint64_t v29 = v163;
      if (v163 < (uint64_t *)v164)
      {
        uint64_t *v163 = v26;
        uint64_t v30 = (uint64_t)(v29 + 1);
        goto LABEL_63;
      }
      unint64_t v31 = v162;
      uint64_t v32 = v163 - v162;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v34 = v164 - (char *)v162;
      if ((v164 - (char *)v162) >> 2 > v33) {
        unint64_t v33 = v34 >> 2;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35)
      {
        if (v35 >> 61) {
          sub_188D718();
        }
        uint64_t v36 = (char *)operator new(8 * v35);
        int v37 = (uint64_t *)&v36[8 * v32];
        uint64_t *v37 = v26;
        uint64_t v30 = (uint64_t)(v37 + 1);
        if (v29 == v31)
        {
LABEL_61:
          v162 = v37;
          v163 = (uint64_t *)v30;
          v164 = &v36[8 * v35];
          if (!v29) {
            goto LABEL_63;
          }
LABEL_62:
          operator delete(v29);
          goto LABEL_63;
        }
      }
      else
      {
        uint64_t v36 = 0;
        int v37 = (uint64_t *)(8 * v32);
        *(void *)(8 * v32) = v26;
        uint64_t v30 = 8 * v32 + 8;
        if (v29 == v31) {
          goto LABEL_61;
        }
      }
      unint64_t v38 = (char *)(v29 - 1) - (char *)v31;
      if (v38 < 0x58) {
        goto LABEL_272;
      }
      if ((unint64_t)((char *)v31 - v36) < 0x20) {
        goto LABEL_272;
      }
      uint64_t v39 = (v38 >> 3) + 1;
      uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
      long long v41 = (char *)&v29[v40 / 0xFFFFFFFFFFFFFFF8];
      int v37 = (uint64_t *)((char *)v37 - v40);
      uint64_t v42 = &v36[8 * v32 - 16];
      int v43 = (char *)(v29 - 2);
      uint64_t v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v45 = *(_OWORD *)v43;
        *((_OWORD *)v42 - 1) = *((_OWORD *)v43 - 1);
        *(_OWORD *)uint64_t v42 = v45;
        v42 -= 32;
        v43 -= 32;
        v44 -= 4;
      }
      while (v44);
      unint64_t v29 = (uint64_t *)v41;
      if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_272:
        do
        {
          uint64_t v46 = *--v29;
          *--int v37 = v46;
        }
        while (v29 != v31);
      }
      unint64_t v29 = v162;
      v162 = v37;
      v163 = (uint64_t *)v30;
      v164 = &v36[8 * v35];
      if (v29) {
        goto LABEL_62;
      }
LABEL_63:
      unint64_t v7 = (const std::string *)(a1 + 112);
      v163 = (uint64_t *)v30;
      int v47 = *(_DWORD *)(a1 + 104);
      if (v47 != 44)
      {
        if (v47 == 41)
        {
          uint64_t v78 = *(void *)(a1 + 24);
          if (*(void *)(a1 + 8) != v78)
          {
            *(void *)(a1 + 24) = v78 + 40;
            uint64_t v24 = v78;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
          std::string::operator=(v23, (const std::string *)(v24 + 8));
          *(void *)(a1 + 136) = *(void *)(v24 + 32);
          a2 = v139;
LABEL_109:
          v140.__r_.__value_.__r.__words[0] = 0;
          if (!*(unsigned char *)(a1 + 652) || (sub_21CC0C(v154, (uint64_t)&v158, (unint64_t *)&v140) & 1) != 0)
          {
            uint64_t v79 = a1 + 344;
            if ((unint64_t)((char *)v157 - (char *)v156) > 0x3F)
            {
              uint64_t v80 = sub_21D714(v79, a2, (uint64_t)&v162, &v140);
            }
            else
            {
              uint64_t v144 = -1;
              uint64_t v80 = sub_21D714(v79, a2, (uint64_t)&v162, &v144);
            }
            uint64_t v81 = v80;
            v159[0] = v80 == 0;
            long long v82 = v156;
            if (!v156) {
              goto LABEL_251;
            }
            goto LABEL_244;
          }
          std::operator+<char>();
          memset(&v141, 0, sizeof(v141));
          std::string::push_back(&v141, 48);
          std::string::push_back(&v141, 51);
          std::string::push_back(&v141, 55);
          std::string::push_back(&v141, 51);
          std::string::push_back(&v141, 50);
          std::string::size_type v83 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
          if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v84 = &v141;
          }
          else {
            uint64_t v84 = (std::string *)v141.__r_.__value_.__r.__words[0];
          }
          if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v83 = v141.__r_.__value_.__l.__size_;
          }
          if (v83)
          {
            uint64_t v85 = (std::string *)((char *)v84 + v83 - 1);
            if (v85 > v84)
            {
              unint64_t v86 = &v84->__r_.__value_.__s.__data_[1];
              do
              {
                std::string::value_type v87 = *(v86 - 1);
                *(v86 - 1) = v85->__r_.__value_.__s.__data_[0];
                v85->__r_.__value_.__s.__data_[0] = v87;
                uint64_t v85 = (std::string *)((char *)v85 - 1);
                BOOL v14 = v86++ >= (char *)v85;
              }
              while (!v14);
            }
          }
          unint64_t v88 = std::string::insert(&v141, 0, "exprtk.hpp:");
          long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          v142.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          *((unsigned char *)&v145.__r_.__value_.__s + 23) = 0;
          v145.__r_.__value_.__s.__data_[0] = 0;
          uint64_t v146 = -1;
          *(_OWORD *)v148 = 0u;
          *(_OWORD *)v149 = 0u;
          long long v150 = 0u;
          *(_OWORD *)long long __p = 0u;
          long long v152 = 0u;
          uint64_t v153 = 0;
          int v147 = 1;
          LODWORD(v144) = *(_DWORD *)(a1 + 104);
          std::string::operator=(&v145, v7);
          uint64_t v146 = *(void *)(a1 + 136);
          std::string::operator=((std::string *)v148, &__str);
          std::string::operator=((std::string *)&v149[1], &v142);
          uint64_t v90 = *(void *)(a1 + 568);
          uint64_t v91 = *(void *)(a1 + 560);
          uint64_t v92 = 30 * ((v90 - v91) >> 3) - 1;
          if (v90 == v91) {
            uint64_t v92 = 0;
          }
          if (v92 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
          {
            sub_B4B88(a1 + 552);
            uint64_t v91 = *(void *)(a1 + 560);
            uint64_t v90 = *(void *)(a1 + 568);
          }
          if (v90 == v91)
          {
            uint64_t v94 = 0;
          }
          else
          {
            unint64_t v93 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
            uint64_t v94 = *(void *)(v91 + 8 * (v93 / 0x1E)) + 136 * (v93 % 0x1E);
          }
          sub_B5158(v94, (uint64_t)&v144);
LABEL_184:
          ++*(void *)(a1 + 592);
          if (SBYTE7(v152) < 0)
          {
            operator delete(__p[0]);
            if (SHIBYTE(v150) < 0) {
              goto LABEL_193;
            }
LABEL_186:
            if ((SHIBYTE(v149[0]) & 0x80000000) == 0) {
              goto LABEL_187;
            }
LABEL_194:
            operator delete(v148[0]);
            if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_195;
            }
LABEL_188:
            if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_189;
            }
LABEL_196:
            operator delete(v142.__r_.__value_.__l.__data_);
            if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_197;
            }
LABEL_190:
            if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_243;
            }
          }
          else
          {
            if ((SHIBYTE(v150) & 0x80000000) == 0) {
              goto LABEL_186;
            }
LABEL_193:
            operator delete(v149[1]);
            if (SHIBYTE(v149[0]) < 0) {
              goto LABEL_194;
            }
LABEL_187:
            if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_188;
            }
LABEL_195:
            operator delete(v145.__r_.__value_.__l.__data_);
            if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
              goto LABEL_196;
            }
LABEL_189:
            if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_190;
            }
LABEL_197:
            operator delete(v141.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_243;
            }
          }
          operator delete(__str.__r_.__value_.__l.__data_);
          goto LABEL_243;
        }
        std::operator+<char>();
        memset(&v141, 0, sizeof(v141));
        std::string::push_back(&v141, 54);
        std::string::push_back(&v141, 57);
        std::string::push_back(&v141, 54);
        std::string::push_back(&v141, 51);
        std::string::push_back(&v141, 50);
        std::string::size_type v123 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v124 = &v141;
        }
        else {
          std::string v124 = (std::string *)v141.__r_.__value_.__r.__words[0];
        }
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v123 = v141.__r_.__value_.__l.__size_;
        }
        if (v123)
        {
          std::string v125 = (std::string *)((char *)v124 + v123 - 1);
          if (v125 > v124)
          {
            int v126 = &v124->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v127 = *(v126 - 1);
              *(v126 - 1) = v125->__r_.__value_.__s.__data_[0];
              v125->__r_.__value_.__s.__data_[0] = v127;
              std::string v125 = (std::string *)((char *)v125 - 1);
              BOOL v14 = v126++ >= (char *)v125;
            }
            while (!v14);
          }
        }
        uint64_t v128 = std::string::insert(&v141, 0, "exprtk.hpp:");
        long long v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
        v142.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v129;
        v128->__r_.__value_.__l.__size_ = 0;
        v128->__r_.__value_.__r.__words[2] = 0;
        v128->__r_.__value_.__r.__words[0] = 0;
        *((unsigned char *)&v145.__r_.__value_.__s + 23) = 0;
        v145.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v146 = -1;
        *(_OWORD *)v148 = 0u;
        *(_OWORD *)v149 = 0u;
        long long v150 = 0u;
        *(_OWORD *)long long __p = 0u;
        long long v152 = 0u;
        uint64_t v153 = 0;
        int v147 = 1;
        LODWORD(v144) = *(_DWORD *)(a1 + 104);
        std::string::operator=(&v145, v23);
        uint64_t v146 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)v148, &__str);
        std::string::operator=((std::string *)&v149[1], &v142);
        uint64_t v130 = *(void *)(a1 + 568);
        uint64_t v131 = *(void *)(a1 + 560);
        uint64_t v132 = 30 * ((v130 - v131) >> 3) - 1;
        if (v130 == v131) {
          uint64_t v132 = 0;
        }
        if (v132 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v131 = *(void *)(a1 + 560);
          uint64_t v130 = *(void *)(a1 + 568);
        }
        if (v130 == v131)
        {
          uint64_t v134 = 0;
        }
        else
        {
          unint64_t v133 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v134 = *(void *)(v131 + 8 * (v133 / 0x1E)) + 136 * (v133 % 0x1E);
        }
        sub_B5158(v134, (uint64_t)&v144);
        ++*(void *)(a1 + 592);
        if (SBYTE7(v152) < 0)
        {
          operator delete(__p[0]);
          if (SHIBYTE(v150) < 0) {
            goto LABEL_227;
          }
LABEL_220:
          if ((SHIBYTE(v149[0]) & 0x80000000) == 0) {
            goto LABEL_221;
          }
LABEL_228:
          operator delete(v148[0]);
          if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_229;
          }
LABEL_222:
          if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_223;
          }
LABEL_230:
          operator delete(v142.__r_.__value_.__l.__data_);
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_231;
          }
LABEL_224:
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_243;
          }
        }
        else
        {
          if ((SHIBYTE(v150) & 0x80000000) == 0) {
            goto LABEL_220;
          }
LABEL_227:
          operator delete(v149[1]);
          if (SHIBYTE(v149[0]) < 0) {
            goto LABEL_228;
          }
LABEL_221:
          if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_222;
          }
LABEL_229:
          operator delete(v145.__r_.__value_.__l.__data_);
          if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_230;
          }
LABEL_223:
          if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_224;
          }
LABEL_231:
          operator delete(v141.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_243;
          }
        }
        operator delete(__str.__r_.__value_.__l.__data_);
        uint64_t v81 = 0;
        long long v82 = v156;
        if (!v156) {
          goto LABEL_251;
        }
        goto LABEL_244;
      }
      uint64_t v48 = *(void *)(a1 + 24);
      uint64_t v49 = a1 + 40;
      if (*(void *)(a1 + 8) != v48)
      {
        *(void *)(a1 + 24) = v48 + 40;
        uint64_t v49 = v48;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v49;
      std::string::operator=(v23, (const std::string *)(v49 + 8));
      *(void *)(a1 + 136) = *(void *)(v49 + 32);
    }
  }
  uint64_t v22 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v22) {
    uint64_t v22 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v22 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v22;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v22 + 8));
  *(void *)(a1 + 136) = *(void *)(v22 + 32);
  if (*(unsigned char *)(a2 + 8)) {
    goto LABEL_109;
  }
  std::string::value_type v95 = v156;
  uint64_t v96 = (char *)v157 - (char *)v156;
  if (v157 == v156) {
    goto LABEL_150;
  }
  uint64_t v139 = a2;
  uint64_t v97 = 0;
  unint64_t v98 = v96 >> 5;
  if ((unint64_t)(v96 >> 5) <= 1) {
    uint64_t v99 = 1;
  }
  else {
    uint64_t v99 = v96 >> 5;
  }
  BOOL v100 = 1;
  do
  {
    unint64_t v101 = &v95[4 * v97];
    uint64_t v102 = v101 + 1;
    int v103 = *((char *)v101 + 31);
    if (v103 < 0)
    {
      long long v105 = v102;
      uint64_t v102 = (void *)*v102;
      int64_t v104 = v105[1];
      if (v104 < 1) {
        goto LABEL_137;
      }
    }
    else
    {
      int64_t v104 = v103;
      if (!(_BYTE)v103) {
        goto LABEL_137;
      }
    }
    uint64_t v106 = (char *)v102 + v104;
    std::string::value_type v107 = v102;
    do
    {
      std::string v108 = memchr(v107, 90, v104);
      if (!v108) {
        break;
      }
      if (*v108 == 90)
      {
        if (v108 == v106 || v108 - (unsigned char *)v102 == -1) {
          break;
        }
        goto LABEL_149;
      }
      std::string::value_type v107 = v108 + 1;
      int64_t v104 = v106 - (unsigned char *)v107;
    }
    while (v106 - (unsigned char *)v107 >= 1);
LABEL_137:
    BOOL v100 = ++v97 < v98;
  }
  while (v97 != v99);
LABEL_149:
  a2 = v139;
  if (v100) {
    goto LABEL_109;
  }
LABEL_150:
  std::operator+<char>();
  long long v109 = std::string::append(&v142, " not allowed");
  long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v110;
  v109->__r_.__value_.__l.__size_ = 0;
  v109->__r_.__value_.__r.__words[2] = 0;
  v109->__r_.__value_.__r.__words[0] = 0;
  memset(&v140, 0, sizeof(v140));
  std::string::push_back(&v140, 53);
  std::string::push_back(&v140, 54);
  std::string::push_back(&v140, 54);
  std::string::push_back(&v140, 51);
  std::string::push_back(&v140, 50);
  std::string::size_type v111 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
  if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v112 = &v140;
  }
  else {
    uint64_t v112 = (std::string *)v140.__r_.__value_.__r.__words[0];
  }
  if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v111 = v140.__r_.__value_.__l.__size_;
  }
  if (v111)
  {
    unint64_t v113 = (std::string *)((char *)v112 + v111 - 1);
    if (v113 > v112)
    {
      uint64_t v114 = &v112->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v115 = *(v114 - 1);
        *(v114 - 1) = v113->__r_.__value_.__s.__data_[0];
        v113->__r_.__value_.__s.__data_[0] = v115;
        unint64_t v113 = (std::string *)((char *)v113 - 1);
        BOOL v14 = v114++ >= (char *)v113;
      }
      while (!v14);
    }
  }
  std::string v116 = std::string::insert(&v140, 0, "exprtk.hpp:");
  long long v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
  v141.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v117;
  v116->__r_.__value_.__l.__size_ = 0;
  v116->__r_.__value_.__r.__words[2] = 0;
  v116->__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&v145.__r_.__value_.__s + 23) = 0;
  v145.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v146 = -1;
  *(_OWORD *)v148 = 0u;
  *(_OWORD *)v149 = 0u;
  long long v150 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v152 = 0u;
  uint64_t v153 = 0;
  int v147 = 1;
  LODWORD(v144) = *(_DWORD *)(a1 + 104);
  std::string::operator=(&v145, (const std::string *)(a1 + 112));
  uint64_t v146 = *(void *)(a1 + 136);
  std::string::operator=((std::string *)v148, &__str);
  std::string::operator=((std::string *)&v149[1], &v141);
  uint64_t v118 = *(void *)(a1 + 568);
  uint64_t v119 = *(void *)(a1 + 560);
  uint64_t v120 = 30 * ((v118 - v119) >> 3) - 1;
  if (v118 == v119) {
    uint64_t v120 = 0;
  }
  if (v120 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
  {
    sub_B4B88(a1 + 552);
    uint64_t v119 = *(void *)(a1 + 560);
    uint64_t v118 = *(void *)(a1 + 568);
  }
  if (v118 == v119)
  {
    uint64_t v122 = 0;
  }
  else
  {
    unint64_t v121 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
    uint64_t v122 = *(void *)(v119 + 8 * (v121 / 0x1E)) + 136 * (v121 % 0x1E);
  }
  sub_B5158(v122, (uint64_t)&v144);
  ++*(void *)(a1 + 592);
  if ((SBYTE7(v152) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v150) & 0x80000000) == 0) {
      goto LABEL_237;
    }
LABEL_260:
    operator delete(v149[1]);
    if (SHIBYTE(v149[0]) < 0) {
      goto LABEL_261;
    }
LABEL_238:
    if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_239;
    }
LABEL_262:
    operator delete(v145.__r_.__value_.__l.__data_);
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_263;
    }
LABEL_240:
    if ((SHIBYTE(v140.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_241;
    }
LABEL_264:
    operator delete(v140.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_265;
    }
LABEL_242:
    if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_243;
    }
LABEL_266:
    operator delete(v142.__r_.__value_.__l.__data_);
    uint64_t v81 = 0;
    long long v82 = v156;
    if (!v156) {
      goto LABEL_251;
    }
LABEL_244:
    uint64_t v135 = v157;
    v136 = v82;
    if (v157 != v82)
    {
      do
      {
        if (*((char *)v135 - 1) < 0) {
          operator delete(*(v135 - 3));
        }
        v135 -= 4;
      }
      while (v135 != v82);
      v136 = v156;
    }
    v157 = v82;
    operator delete(v136);
    goto LABEL_251;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v150) < 0) {
    goto LABEL_260;
  }
LABEL_237:
  if ((SHIBYTE(v149[0]) & 0x80000000) == 0) {
    goto LABEL_238;
  }
LABEL_261:
  operator delete(v148[0]);
  if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_262;
  }
LABEL_239:
  if ((SHIBYTE(v141.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_240;
  }
LABEL_263:
  operator delete(v141.__r_.__value_.__l.__data_);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_264;
  }
LABEL_241:
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_242;
  }
LABEL_265:
  operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_266;
  }
LABEL_243:
  uint64_t v81 = 0;
  long long v82 = v156;
  if (v156) {
    goto LABEL_244;
  }
LABEL_251:
  if ((v155 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v158.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_253;
    }
LABEL_257:
    operator delete(v158.__r_.__value_.__l.__data_);
    sub_22094C((uint64_t)v159);
    uint64_t v137 = v162;
    if (!v162) {
      return v81;
    }
LABEL_254:
    v163 = v137;
    operator delete(v137);
    return v81;
  }
  operator delete((void *)v154[2]);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_257;
  }
LABEL_253:
  sub_22094C((uint64_t)v159);
  uint64_t v137 = v162;
  if (v162) {
    goto LABEL_254;
  }
  return v81;
}

void sub_1F07CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a30 & 0x80000000) == 0)
    {
LABEL_8:
      sub_21DCBC(v39 - 232);
      if (*(char *)(v39 - 137) < 0)
      {
        operator delete(*(void **)(v39 - 160));
        sub_22094C(v39 - 136);
        long long v41 = *(void **)(v39 - 112);
        if (v41) {
          goto LABEL_10;
        }
      }
      else
      {
        sub_22094C(v39 - 136);
        long long v41 = *(void **)(v39 - 112);
        if (v41)
        {
LABEL_10:
          *(void *)(v39 - 104) = v41;
          operator delete(v41);
          _Unwind_Resume(a1);
        }
      }
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a25);
    goto LABEL_8;
  }
  operator delete(a32);
  if ((a30 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

BOOL sub_1F0A14(uint64_t a1)
{
  unint64_t v2 = 0;
  BOOL v3 = 1;
  while (1)
  {
    uint64_t v4 = (char *)&xmmword_25561D0 + 24 * v2;
    BOOL v5 = *(char *)(a1 + 23) < 0;
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a1 + 8);
    }
    uint64_t v7 = v4[1631];
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *((void *)v4 + 202);
    }
    if (v6 == v7) {
      break;
    }
LABEL_2:
    BOOL v3 = v2++ < 0x39;
    if (v2 == 58) {
      return v3;
    }
  }
  if (v6)
  {
    unint64_t v8 = 0;
    unint64_t v9 = v4 + 1608;
    while (1)
    {
      uint64_t v10 = v5 ? *(void *)a1 : a1;
      __darwin_ct_rune_t v11 = __tolower(*(char *)(v10 + v8));
      uint64_t v12 = v9[23] >= 0 ? v9 : *(char **)v9;
      if (v11 != __tolower(v12[v8])) {
        break;
      }
      ++v8;
      BOOL v5 = *(char *)(a1 + 23) < 0;
      unint64_t v13 = *(unsigned __int8 *)(a1 + 23);
      if ((v13 & 0x80u) != 0) {
        unint64_t v13 = *(void *)(a1 + 8);
      }
      if (v8 >= v13) {
        return v3;
      }
    }
    goto LABEL_2;
  }
  return v3;
}

BOOL sub_1F0B20(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (!*(void *)a1 || !*(void *)(*(void *)a1 + 8)) {
    return 0;
  }
  BOOL result = sub_AD9E4(a1, a2, 1);
  if (result)
  {
    if (sub_ADC14(a1, (uint64_t)a2, 1)) {
      return 0;
    }
    uint64_t v7 = *(void **)(*(void *)a1 + 8);
    unint64_t v8 = operator new(0x18uLL);
    uint64_t v9 = *a3;
    uint64_t v10 = v7[28];
    v7 += 28;
    void *v8 = v10;
    v8[1] = v7;
    *(void *)(v10 + 8) = v8;
    *uint64_t v7 = v8;
    v8[2] = v9;
    ++v7[2];
    BOOL result = sub_AD9E4(a1, a2, 1);
    if (result)
    {
      if (sub_ADC14(a1, (uint64_t)a2, 1)) {
        return 0;
      }
      uint64_t v11 = *(void *)(*(void *)a1 + 8);
      if ((uint64_t *)(v11 + 8) == sub_ADE40(v11, (uint64_t)a2)) {
        operator new();
      }
      return 1;
    }
  }
  return result;
}

char *sub_1F0CDC(char **a1, uint64_t a2, unint64_t a3)
{
  BOOL v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 40;
  unint64_t v8 = &(*a1)[40 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v21 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (void)v5) >> 3);
    if (2 * v22 > v21) {
      unint64_t v21 = 2 * v22;
    }
    if (v22 >= 0x333333333333333) {
      unint64_t v23 = 0x666666666666666;
    }
    else {
      unint64_t v23 = v21;
    }
    uint64_t v48 = a1 + 2;
    if (v23)
    {
      if (v23 > 0x666666666666666) {
        sub_188D718();
      }
      uint64_t v24 = (char *)operator new(40 * v23);
    }
    else
    {
      uint64_t v24 = 0;
    }
    uint64_t v44 = v24;
    long long v45 = &v24[40 * v7];
    uint64_t v46 = v45;
    int v47 = &v24[40 * v23];
    sub_1F10D0((uint64_t)&v44, a3);
    unint64_t v29 = v45;
    uint64_t v30 = *a1;
    unint64_t v31 = v45;
    if (*a1 != v8)
    {
      uint64_t v32 = 0;
      do
      {
        unint64_t v33 = &v29[v32];
        uint64_t v34 = &v8[v32];
        *((_DWORD *)v33 - 10) = *(_DWORD *)&v8[v32 - 40];
        long long v35 = *(_OWORD *)&v8[v32 - 32];
        *((void *)v33 - 2) = *(void *)&v8[v32 - 16];
        *((_OWORD *)v33 - 2) = v35;
        *((void *)v34 - 3) = 0;
        *((void *)v34 - 2) = 0;
        *((void *)v34 - 4) = 0;
        *((void *)v33 - 1) = *(void *)&v8[v32 - 8];
        v32 -= 40;
      }
      while (&v8[v32] != v30);
      unint64_t v31 = &v29[v32];
    }
    long long v45 = v31;
    uint64_t v36 = a1[1];
    int v37 = v46;
    if (v36 != v8)
    {
      do
      {
        *(_DWORD *)int v37 = *(_DWORD *)v8;
        long long v38 = *(_OWORD *)(v8 + 8);
        *((void *)v37 + 3) = *((void *)v8 + 3);
        *(_OWORD *)(v37 + 8) = v38;
        *((void *)v8 + 2) = 0;
        *((void *)v8 + 3) = 0;
        *((void *)v8 + 1) = 0;
        *((void *)v37 + 4) = *((void *)v8 + 4);
        v37 += 40;
        v8 += 40;
      }
      while (v8 != v36);
      unint64_t v31 = v45;
      unint64_t v8 = a1[1];
    }
    uint64_t v39 = *a1;
    *a1 = v31;
    a1[1] = v37;
    uint64_t v40 = a1[2];
    a1[2] = v47;
    uint64_t v46 = v8;
    int v47 = v40;
    uint64_t v44 = v39;
    long long v45 = v39;
    if (v8 == v39)
    {
      if (!v8) {
        return v29;
      }
    }
    else
    {
      do
      {
        long long v41 = v8 - 40;
        uint64_t v46 = v8 - 40;
        if (*(v8 - 9) < 0)
        {
          operator delete(*((void **)v8 - 4));
          long long v41 = v46;
        }
        unint64_t v8 = v41;
      }
      while (v41 != v39);
      unint64_t v8 = v44;
      if (!v44) {
        return v29;
      }
    }
    operator delete(v8);
    return v29;
  }
  if (v8 == (char *)v6)
  {
    *(_DWORD *)unint64_t v8 = *(_DWORD *)a3;
    unsigned int v27 = &v5[40 * v7 + 8];
    if (*(char *)(a3 + 31) < 0)
    {
      sub_4200(v27, *(void **)(a3 + 8), *(void *)(a3 + 16));
    }
    else
    {
      long long v28 = *(_OWORD *)(a3 + 8);
      *(void *)&v5[40 * v7 + 24] = *(void *)(a3 + 24);
      *(_OWORD *)unsigned int v27 = v28;
    }
    *(void *)&v5[40 * v7 + 32] = *(void *)(a3 + 32);
    a1[1] = v8 + 40;
  }
  else
  {
    uint64_t v10 = v8 + 40;
    unint64_t v11 = v6 - 40;
    uint64_t v12 = a1[1];
    if (v6 >= 0x28)
    {
      do
      {
        *(_DWORD *)uint64_t v12 = *(_DWORD *)v11;
        long long v13 = *(_OWORD *)(v11 + 8);
        *((void *)v12 + 3) = *(void *)(v11 + 24);
        *(_OWORD *)(v12 + 8) = v13;
        *(void *)(v11 + 16) = 0;
        *(void *)(v11 + 24) = 0;
        *(void *)(v11 + 8) = 0;
        *((void *)v12 + 4) = *(void *)(v11 + 32);
        v12 += 40;
        v11 += 40;
      }
      while (v11 < v6);
    }
    a1[1] = v12;
    if ((char *)v6 != v10)
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v10) >> 3);
      long long v16 = &v5[40 * v7 + 40 * v15];
      uint64_t v17 = -40 * v15;
      do
      {
        uint64_t v19 = &v16[v14];
        *(_DWORD *)(v6 + v14 - 40) = *(_DWORD *)&v16[v14 - 40];
        unint64_t v20 = (void **)(v6 + v14 - 32);
        if (*(char *)(v6 + v14 - 9) < 0) {
          operator delete(*v20);
        }
        long long v18 = *((_OWORD *)v19 - 2);
        *(void *)(v6 + v14 - 16) = *((void *)v19 - 2);
        *(_OWORD *)unint64_t v20 = v18;
        *(v19 - 9) = 0;
        *(v19 - 32) = 0;
        *(void *)(v6 + v14 - 8) = *((void *)v19 - 1);
        v14 -= 40;
      }
      while (v17 != v14);
    }
    unint64_t v25 = a3;
    if ((unint64_t)v8 <= a3) {
      unint64_t v25 = a3 + 40 * ((unint64_t)a1[1] > a3);
    }
    *(_DWORD *)unint64_t v8 = *(_DWORD *)v25;
    uint64_t v26 = &v5[40 * v7];
    std::string::operator=((std::string *)(v26 + 8), (const std::string *)(v25 + 8));
    *((void *)v26 + 4) = *(void *)(v25 + 32);
  }
  return v8;
}

void sub_1F10B4(_Unwind_Exception *a1)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_1F10BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_B79D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1F10D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 16);
  if (v4 == *(void **)(a1 + 24))
  {
    BOOL v5 = *(unsigned char **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      unint64_t v14 = 0x999999999999999ALL * (((char *)v4 - v5) >> 3);
      if (v4 == (void *)v5) {
        unint64_t v14 = 1;
      }
      if (v14 >= 0x666666666666667) {
        sub_188D718();
      }
      unint64_t v15 = v14 >> 2;
      uint64_t v16 = 40 * v14;
      uint64_t v17 = (char *)operator new(40 * v14);
      long long v18 = &v17[40 * v15];
      uint64_t v19 = &v17[v16];
      if (v4 == (void *)v6)
      {
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v18;
        *(void *)(a1 + 24) = v19;
      }
      else
      {
        unint64_t v20 = (char *)v4 + (void)v18 - v6;
        uint64_t v21 = 40 * v15;
        do
        {
          unint64_t v22 = &v17[v21];
          *(_DWORD *)unint64_t v22 = *(_DWORD *)v6;
          long long v23 = *(_OWORD *)(v6 + 8);
          *((void *)v22 + 3) = *(void *)(v6 + 24);
          *(_OWORD *)(v22 + 8) = v23;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
          *(void *)(v6 + 8) = 0;
          *((void *)v22 + 4) = *(void *)(v6 + 32);
          v21 += 40;
          v6 += 40;
        }
        while (v22 + 40 != v20);
        BOOL v5 = *(unsigned char **)a1;
        uint64_t v24 = *(void *)(a1 + 8);
        uint64_t v25 = *(void *)(a1 + 16);
        *(void *)a1 = v17;
        *(void *)(a1 + 8) = v18;
        *(void *)(a1 + 16) = v20;
        *(void *)(a1 + 24) = v19;
        while (v25 != v24)
        {
          if (*(char *)(v25 - 9) < 0) {
            operator delete(*(void **)(v25 - 32));
          }
          v25 -= 40;
        }
      }
      if (v5) {
        operator delete(v5);
      }
      uint64_t v4 = *(void **)(a1 + 16);
      *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
      BOOL result = v4 + 1;
      if ((*(char *)(a2 + 31) & 0x80000000) == 0) {
        goto LABEL_26;
      }
LABEL_31:
      BOOL result = sub_4200(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
      goto LABEL_32;
    }
    int64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *(void *)a1) >> 3);
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    if ((void *)v6 == v4)
    {
      uint64_t v26 = (void *)(v6 - 40 * v9);
    }
    else
    {
      uint64_t v11 = -40 * v9;
      do
      {
        *(_DWORD *)(v6 + 40 * v10) = *(_DWORD *)v6;
        long long v13 = (void **)(v6 + v11 + 8);
        if (*(char *)(v6 + v11 + 31) < 0) {
          operator delete(*v13);
        }
        long long v12 = *(_OWORD *)(v6 + 8);
        *(void *)(v6 + v11 + 24) = *(void *)(v6 + 24);
        *(_OWORD *)long long v13 = v12;
        *(unsigned char *)(v6 + 31) = 0;
        *(unsigned char *)(v6 + 8) = 0;
        *(void *)(v6 + v11 + 32) = *(void *)(v6 + 32);
        v6 += 40;
      }
      while ((void *)v6 != v4);
      uint64_t v4 = *(void **)(a1 + 8);
      uint64_t v26 = (void *)(v6 + 40 * v10);
    }
    *(void *)(a1 + 8) = &v4[5 * v10];
    *(void *)(a1 + 16) = v26;
    uint64_t v4 = v26;
  }
  *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
  BOOL result = v4 + 1;
  if (*(char *)(a2 + 31) < 0) {
    goto LABEL_31;
  }
LABEL_26:
  long long v28 = *(_OWORD *)(a2 + 8);
  result[2] = *(void *)(a2 + 24);
  *(_OWORD *)BOOL result = v28;
LABEL_32:
  v4[4] = *(void *)(a2 + 32);
  *(void *)(a1 + 16) += 40;
  return result;
}

void sub_1F1324()
{
}

void sub_1F17DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a27 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a27 & 0x80000000) == 0) {
LABEL_4:
  }
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1F1884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v85 = 1;
  uint64_t v86 = a1;
  std::string::value_type v87 = &v88;
  uint64_t v88 = 0;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v73, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v71, 0, sizeof(v71));
    std::string::push_back(&v71, 51);
    std::string::push_back(&v71, 54);
    std::string::push_back(&v71, 49);
    std::string::push_back(&v71, 49);
    std::string::push_back(&v71, 50);
    std::string::size_type size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v71;
    }
    else {
      uint64_t v11 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v71.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v71, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v76.__r_.__value_.__s + 23) = 0;
    v76.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v77 = -1;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long __p = 0u;
    long long v83 = 0u;
    uint64_t v84 = 0;
    int v78 = 1;
    int v75 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v76, (const std::string *)(a1 + 112));
    uint64_t v77 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v79, &__str);
    std::string::operator=((std::string *)((char *)&v80 + 8), &v72);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
LABEL_100:
    sub_B5158(v22, (uint64_t)&v75);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v83) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v81) & 0x80000000) == 0)
      {
LABEL_102:
        if ((SBYTE7(v80) & 0x80000000) == 0) {
          goto LABEL_103;
        }
        goto LABEL_112;
      }
    }
    else if ((SHIBYTE(v81) & 0x80000000) == 0)
    {
      goto LABEL_102;
    }
    operator delete(*((void **)&v80 + 1));
    if ((SBYTE7(v80) & 0x80000000) == 0)
    {
LABEL_103:
      if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_104;
      }
      goto LABEL_113;
    }
LABEL_112:
    operator delete((void *)v79);
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_104:
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_105;
      }
      goto LABEL_114;
    }
LABEL_113:
    operator delete(v76.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_105:
      if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_106;
      }
      goto LABEL_115;
    }
LABEL_114:
    operator delete(v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_106:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_107;
      }
      goto LABEL_116;
    }
LABEL_115:
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_107:
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_108;
      }
LABEL_117:
      operator delete(v73.__r_.__value_.__l.__data_);
      if (!v85) {
        return 0;
      }
LABEL_118:
      std::string::size_type v66 = v87;
      if (!*v87 || (*(unsigned int (**)(uint64_t))(*(void *)*v87 + 32))(*v87) == 17) {
        return 0;
      }
      if (*v66)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)*v66 + 32))(*v66) == 18) {
          return 0;
        }
        if (*v66) {
          (*(void (**)(uint64_t))(*(void *)*v66 + 8))(*v66);
        }
      }
      uint64_t v61 = 0;
      *std::string::size_type v66 = 0;
      return v61;
    }
LABEL_116:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_108:
      if (!v85) {
        return 0;
      }
      goto LABEL_118;
    }
    goto LABEL_117;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v88 = sub_B7FE4(a1, 0);
  if (!v88)
  {
    *((unsigned char *)&v70.__r_.__value_.__s + 23) = 1;
    LOWORD(v70.__r_.__value_.__l.__data_) = 48;
    uint64_t v24 = std::string::insert(&v70, 0, "ERR019 - Failed to parse argument ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    uint64_t v26 = std::string::append(&v71, " for function: '");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    int v28 = *(char *)(a3 + 23);
    if (v28 >= 0) {
      unint64_t v29 = (const std::string::value_type *)a3;
    }
    else {
      unint64_t v29 = *(const std::string::value_type **)a3;
    }
    if (v28 >= 0) {
      std::string::size_type v30 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v30 = *(void *)(a3 + 8);
    }
    unint64_t v31 = std::string::append(&v72, v29, v30);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    unint64_t v33 = std::string::append(&v73, "'");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    memset(&v68, 0, sizeof(v68));
    std::string::push_back(&v68, 56);
    std::string::push_back(&v68, 55);
    std::string::push_back(&v68, 49);
    std::string::push_back(&v68, 49);
    std::string::push_back(&v68, 50);
    std::string::size_type v35 = HIBYTE(v68.__r_.__value_.__r.__words[2]);
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v36 = &v68;
    }
    else {
      uint64_t v36 = (std::string *)v68.__r_.__value_.__r.__words[0];
    }
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v35 = v68.__r_.__value_.__l.__size_;
    }
    if (v35)
    {
      int v37 = (std::string *)((char *)v36 + v35 - 1);
      if (v37 > v36)
      {
        long long v38 = &v36->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v39 = *(v38 - 1);
          *(v38 - 1) = v37->__r_.__value_.__s.__data_[0];
          v37->__r_.__value_.__s.__data_[0] = v39;
          int v37 = (std::string *)((char *)v37 - 1);
          BOOL v15 = v38++ >= (char *)v37;
        }
        while (!v15);
      }
    }
    uint64_t v40 = std::string::insert(&v68, 0, "exprtk.hpp:");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v76.__r_.__value_.__s + 23) = 0;
    v76.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v77 = -1;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long __p = 0u;
    long long v83 = 0u;
    uint64_t v84 = 0;
    int v78 = 1;
    int v75 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v76, (const std::string *)(a1 + 112));
    uint64_t v77 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v79, &__str);
    std::string::operator=((std::string *)((char *)&v80 + 8), &v69);
    uint64_t v42 = *(void *)(a1 + 568);
    uint64_t v43 = *(void *)(a1 + 560);
    uint64_t v44 = 30 * ((v42 - v43) >> 3) - 1;
    if (v42 == v43) {
      uint64_t v44 = 0;
    }
    if (v44 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v43 = *(void *)(a1 + 560);
      uint64_t v42 = *(void *)(a1 + 568);
    }
    if (v42 == v43)
    {
      uint64_t v46 = 0;
    }
    else
    {
      unint64_t v45 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v46 = *(void *)(v43 + 8 * (v45 / 0x1E)) + 136 * (v45 % 0x1E);
    }
    sub_B5158(v46, (uint64_t)&v75);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v83) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v81) & 0x80000000) == 0)
      {
LABEL_70:
        if ((SBYTE7(v80) & 0x80000000) == 0) {
          goto LABEL_71;
        }
        goto LABEL_82;
      }
    }
    else if ((SHIBYTE(v81) & 0x80000000) == 0)
    {
      goto LABEL_70;
    }
    operator delete(*((void **)&v80 + 1));
    if ((SBYTE7(v80) & 0x80000000) == 0)
    {
LABEL_71:
      if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_72;
      }
      goto LABEL_83;
    }
LABEL_82:
    operator delete((void *)v79);
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_72:
      if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_84;
    }
LABEL_83:
    operator delete(v76.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_73:
      if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_74;
      }
      goto LABEL_85;
    }
LABEL_84:
    operator delete(v69.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_74:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_75;
      }
      goto LABEL_86;
    }
LABEL_85:
    operator delete(v68.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_75:
      if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_76;
      }
      goto LABEL_87;
    }
LABEL_86:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_76:
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_77;
      }
      goto LABEL_88;
    }
LABEL_87:
    operator delete(v73.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_77:
      if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_78;
      }
      goto LABEL_89;
    }
LABEL_88:
    operator delete(v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_78:
      if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_108;
      }
LABEL_90:
      operator delete(v70.__r_.__value_.__l.__data_);
      if (!v85) {
        return 0;
      }
      goto LABEL_118;
    }
LABEL_89:
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_108;
    }
    goto LABEL_90;
  }
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    std::operator+<char>();
    int v47 = std::string::append(&v73, "'");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    memset(&v71, 0, sizeof(v71));
    std::string::push_back(&v71, 51);
    std::string::push_back(&v71, 48);
    std::string::push_back(&v71, 50);
    std::string::push_back(&v71, 49);
    std::string::push_back(&v71, 50);
    std::string::size_type v49 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v50 = &v71;
    }
    else {
      uint64_t v50 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v49 = v71.__r_.__value_.__l.__size_;
    }
    if (v49)
    {
      uint64_t v51 = (std::string *)((char *)v50 + v49 - 1);
      if (v51 > v50)
      {
        uint64_t v52 = &v50->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v53 = *(v52 - 1);
          *(v52 - 1) = v51->__r_.__value_.__s.__data_[0];
          v51->__r_.__value_.__s.__data_[0] = v53;
          uint64_t v51 = (std::string *)((char *)v51 - 1);
          BOOL v15 = v52++ >= (char *)v51;
        }
        while (!v15);
      }
    }
    uint64_t v54 = std::string::insert(&v71, 0, "exprtk.hpp:");
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v72.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v76.__r_.__value_.__s + 23) = 0;
    v76.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v77 = -1;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long __p = 0u;
    long long v83 = 0u;
    uint64_t v84 = 0;
    int v78 = 1;
    int v75 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v76, (const std::string *)(a1 + 112));
    uint64_t v77 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v79, &__str);
    std::string::operator=((std::string *)((char *)&v80 + 8), &v72);
    uint64_t v56 = *(void *)(a1 + 568);
    uint64_t v57 = *(void *)(a1 + 560);
    uint64_t v58 = 30 * ((v56 - v57) >> 3) - 1;
    if (v56 == v57) {
      uint64_t v58 = 0;
    }
    if (v58 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v57 = *(void *)(a1 + 560);
      uint64_t v56 = *(void *)(a1 + 568);
    }
    if (v56 == v57)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v59 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v57 + 8 * (v59 / 0x1E)) + 136 * (v59 % 0x1E);
    }
    goto LABEL_100;
  }
  uint64_t v23 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v23) {
    uint64_t v23 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v23 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v23;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v23 + 8));
  *(void *)(a1 + 136) = *(void *)(v23 + 32);
  uint64_t v60 = sub_20608C(a1 + 344, a2, &v88);
  uint64_t v61 = v60;
  if (v60 && (*(unsigned int (**)(uint64_t))(*(void *)v60 + 32))(v60) != 2)
  {
    uint64_t v62 = v88;
    if (v88)
    {
      uint64_t v63 = *(void *)(a2 + 32);
      int v64 = (*(uint64_t (**)(uint64_t))(*(void *)v88 + 32))(v88);
      if (v63 == 1)
      {
        BOOL v65 = v64 != 17 && (*(unsigned int (**)(uint64_t))(*(void *)v62 + 32))(v62) != 18;
        *(void *)(v61 + 24) = v88;
        *(unsigned char *)(v61 + 32) = v65;
        return v61;
      }
      if (v64 != 17 && v88 && (*(unsigned int (**)(uint64_t))(*(void *)v88 + 32))(v88) != 18 && v88) {
        (*(void (**)(uint64_t))(*(void *)v88 + 8))(v88);
      }
    }
    return 0;
  }
  return v61;
}

void sub_1F2448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  sub_205FC0(v56 - 104);
  _Unwind_Resume(a1);
}

uint64_t sub_1F266C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  v97[0] = 1;
  uint64_t v98 = a1;
  uint64_t v99 = &v100;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v85, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v83, 0, sizeof(v83));
    std::string::push_back(&v83, 51);
    std::string::push_back(&v83, 54);
    std::string::push_back(&v83, 49);
    std::string::push_back(&v83, 49);
    std::string::push_back(&v83, 50);
    std::string::size_type size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v83;
    }
    else {
      uint64_t v11 = (std::string *)v83.__r_.__value_.__r.__words[0];
    }
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v83.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v83, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v88.__r_.__value_.__s + 23) = 0;
    v88.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v89 = -1;
    *(_OWORD *)uint64_t v91 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long __p = 0u;
    long long v95 = 0u;
    uint64_t v96 = 0;
    int v90 = 1;
    int v87 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v88, (const std::string *)(a1 + 112));
    uint64_t v89 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v91, &__str);
    std::string::operator=((std::string *)((char *)&v92 + 8), &v84);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
LABEL_115:
    sub_B5158(v22, (uint64_t)&v87);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v95) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v93) & 0x80000000) == 0)
      {
LABEL_117:
        if ((SBYTE7(v92) & 0x80000000) == 0) {
          goto LABEL_118;
        }
        goto LABEL_126;
      }
    }
    else if ((SHIBYTE(v93) & 0x80000000) == 0)
    {
      goto LABEL_117;
    }
    operator delete(*((void **)&v92 + 1));
    if ((SBYTE7(v92) & 0x80000000) == 0)
    {
LABEL_118:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_119;
      }
      goto LABEL_127;
    }
LABEL_126:
    operator delete(v91[0]);
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_119:
      if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_120;
      }
      goto LABEL_128;
    }
LABEL_127:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_120:
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_121;
      }
      goto LABEL_129;
    }
LABEL_128:
    operator delete(v84.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_121:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_122;
      }
      goto LABEL_130;
    }
LABEL_129:
    operator delete(v83.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_122:
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_131;
      }
      goto LABEL_133;
    }
LABEL_130:
    operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_131:
      BOOL v65 = (void *)v85.__r_.__value_.__r.__words[0];
      goto LABEL_132;
    }
LABEL_133:
    uint64_t v28 = 0;
    goto LABEL_134;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v23 = sub_B7FE4(a1, 0);
  uint64_t v100 = v23;
  if (!v23)
  {
LABEL_51:
    sub_B1D70(v23, (unint64_t)&v82);
    uint64_t v42 = std::string::insert(&v82, 0, "ERR019 - Failed to parse argument ");
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    uint64_t v44 = std::string::append(&v83, " for function: '");
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    int v46 = *(char *)(a3 + 23);
    if (v46 >= 0) {
      int v47 = (const std::string::value_type *)a3;
    }
    else {
      int v47 = *(const std::string::value_type **)a3;
    }
    if (v46 >= 0) {
      std::string::size_type v48 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v48 = *(void *)(a3 + 8);
    }
    std::string::size_type v49 = std::string::append(&v84, v47, v48);
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    uint64_t v51 = std::string::append(&v85, "'");
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    memset(&v80, 0, sizeof(v80));
    std::string::push_back(&v80, 56);
    std::string::push_back(&v80, 55);
    std::string::push_back(&v80, 49);
    std::string::push_back(&v80, 49);
    std::string::push_back(&v80, 50);
    std::string::size_type v53 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v54 = &v80;
    }
    else {
      uint64_t v54 = (std::string *)v80.__r_.__value_.__r.__words[0];
    }
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v53 = v80.__r_.__value_.__l.__size_;
    }
    if (v53)
    {
      long long v55 = (std::string *)((char *)v54 + v53 - 1);
      if (v55 > v54)
      {
        uint64_t v56 = &v54->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v57 = *(v56 - 1);
          *(v56 - 1) = v55->__r_.__value_.__s.__data_[0];
          v55->__r_.__value_.__s.__data_[0] = v57;
          long long v55 = (std::string *)((char *)v55 - 1);
          BOOL v15 = v56++ >= (char *)v55;
        }
        while (!v15);
      }
    }
    uint64_t v58 = std::string::insert(&v80, 0, "exprtk.hpp:");
    long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v88.__r_.__value_.__s + 23) = 0;
    v88.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v89 = -1;
    *(_OWORD *)uint64_t v91 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long __p = 0u;
    long long v95 = 0u;
    uint64_t v96 = 0;
    int v90 = 1;
    int v87 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v88, (const std::string *)(a1 + 112));
    uint64_t v89 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v91, &__str);
    std::string::operator=((std::string *)((char *)&v92 + 8), &v81);
    uint64_t v60 = *(void *)(a1 + 568);
    uint64_t v61 = *(void *)(a1 + 560);
    uint64_t v62 = 30 * ((v60 - v61) >> 3) - 1;
    if (v60 == v61) {
      uint64_t v62 = 0;
    }
    if (v62 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v61 = *(void *)(a1 + 560);
      uint64_t v60 = *(void *)(a1 + 568);
    }
    if (v60 == v61)
    {
      uint64_t v64 = 0;
    }
    else
    {
      unint64_t v63 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v64 = *(void *)(v61 + 8 * (v63 / 0x1E)) + 136 * (v63 % 0x1E);
    }
    sub_B5158(v64, (uint64_t)&v87);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v95) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v93) & 0x80000000) == 0)
      {
LABEL_76:
        if ((SBYTE7(v92) & 0x80000000) == 0) {
          goto LABEL_77;
        }
        goto LABEL_88;
      }
    }
    else if ((SHIBYTE(v93) & 0x80000000) == 0)
    {
      goto LABEL_76;
    }
    operator delete(*((void **)&v92 + 1));
    if ((SBYTE7(v92) & 0x80000000) == 0)
    {
LABEL_77:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_78;
      }
      goto LABEL_89;
    }
LABEL_88:
    operator delete(v91[0]);
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_78:
      if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_79;
      }
      goto LABEL_90;
    }
LABEL_89:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_79:
      if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_80;
      }
      goto LABEL_91;
    }
LABEL_90:
    operator delete(v81.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_80:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_81;
      }
      goto LABEL_92;
    }
LABEL_91:
    operator delete(v80.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_81:
      if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_82;
      }
      goto LABEL_93;
    }
LABEL_92:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_83;
      }
      goto LABEL_94;
    }
LABEL_93:
    operator delete(v85.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_83:
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_84;
      }
      goto LABEL_95;
    }
LABEL_94:
    operator delete(v84.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_133;
      }
LABEL_96:
      BOOL v65 = (void *)v82.__r_.__value_.__r.__words[0];
LABEL_132:
      operator delete(v65);
      goto LABEL_133;
    }
LABEL_95:
    operator delete(v83.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_133;
    }
    goto LABEL_96;
  }
  if (*(_DWORD *)(a1 + 104) != 44)
  {
    std::operator+<char>();
    unint64_t v29 = std::string::append(&v85, "'");
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    memset(&v83, 0, sizeof(v83));
    std::string::push_back(&v83, 48);
    std::string::push_back(&v83, 57);
    std::string::push_back(&v83, 49);
    std::string::push_back(&v83, 49);
    std::string::push_back(&v83, 50);
    std::string::size_type v31 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v32 = &v83;
    }
    else {
      long long v32 = (std::string *)v83.__r_.__value_.__r.__words[0];
    }
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v31 = v83.__r_.__value_.__l.__size_;
    }
    if (v31)
    {
      unint64_t v33 = (std::string *)((char *)v32 + v31 - 1);
      if (v33 > v32)
      {
        long long v34 = &v32->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v35 = *(v34 - 1);
          *(v34 - 1) = v33->__r_.__value_.__s.__data_[0];
          v33->__r_.__value_.__s.__data_[0] = v35;
          unint64_t v33 = (std::string *)((char *)v33 - 1);
          BOOL v15 = v34++ >= (char *)v33;
        }
        while (!v15);
      }
    }
    uint64_t v36 = std::string::insert(&v83, 0, "exprtk.hpp:");
    long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v88.__r_.__value_.__s + 23) = 0;
    v88.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v89 = -1;
    *(_OWORD *)uint64_t v91 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long __p = 0u;
    long long v95 = 0u;
    uint64_t v96 = 0;
    int v90 = 1;
    int v87 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v88, (const std::string *)(a1 + 112));
    uint64_t v89 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v91, &__str);
    std::string::operator=((std::string *)((char *)&v92 + 8), &v84);
    uint64_t v38 = *(void *)(a1 + 568);
    uint64_t v39 = *(void *)(a1 + 560);
    uint64_t v40 = 30 * ((v38 - v39) >> 3) - 1;
    if (v38 == v39) {
      uint64_t v40 = 0;
    }
    if (v40 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v39 = *(void *)(a1 + 560);
      uint64_t v38 = *(void *)(a1 + 568);
    }
    if (v38 == v39)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v41 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v39 + 8 * (v41 / 0x1E)) + 136 * (v41 % 0x1E);
    }
    goto LABEL_115;
  }
  uint64_t v24 = a1 + 40;
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t v26 = a1 + 40;
  if (*(void *)(a1 + 8) != v25)
  {
    *(void *)(a1 + 24) = v25 + 40;
    uint64_t v26 = v25;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v26;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v26 + 8));
  *(void *)(a1 + 136) = *(void *)(v26 + 32);
  uint64_t v101 = sub_B7FE4(a1, 0);
  if (!v101)
  {
    LODWORD(v23) = 1;
    goto LABEL_51;
  }
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    std::operator+<char>();
    std::string::size_type v66 = std::string::append(&v85, "'");
    long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    memset(&v83, 0, sizeof(v83));
    std::string::push_back(&v83, 51);
    std::string::push_back(&v83, 48);
    std::string::push_back(&v83, 50);
    std::string::push_back(&v83, 49);
    std::string::push_back(&v83, 50);
    std::string::size_type v68 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v69 = &v83;
    }
    else {
      std::string v69 = (std::string *)v83.__r_.__value_.__r.__words[0];
    }
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v68 = v83.__r_.__value_.__l.__size_;
    }
    if (v68)
    {
      std::string v70 = (std::string *)((char *)v69 + v68 - 1);
      if (v70 > v69)
      {
        std::string v71 = &v69->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v72 = *(v71 - 1);
          *(v71 - 1) = v70->__r_.__value_.__s.__data_[0];
          v70->__r_.__value_.__s.__data_[0] = v72;
          std::string v70 = (std::string *)((char *)v70 - 1);
          BOOL v15 = v71++ >= (char *)v70;
        }
        while (!v15);
      }
    }
    std::string v73 = std::string::insert(&v83, 0, "exprtk.hpp:");
    long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v74;
    v73->__r_.__value_.__l.__size_ = 0;
    v73->__r_.__value_.__r.__words[2] = 0;
    v73->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v88.__r_.__value_.__s + 23) = 0;
    v88.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v89 = -1;
    *(_OWORD *)uint64_t v91 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long __p = 0u;
    long long v95 = 0u;
    uint64_t v96 = 0;
    int v90 = 1;
    int v87 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v88, (const std::string *)(a1 + 112));
    uint64_t v89 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)v91, &__str);
    std::string::operator=((std::string *)((char *)&v92 + 8), &v84);
    uint64_t v75 = *(void *)(a1 + 568);
    uint64_t v76 = *(void *)(a1 + 560);
    uint64_t v77 = 30 * ((v75 - v76) >> 3) - 1;
    if (v75 == v76) {
      uint64_t v77 = 0;
    }
    if (v77 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v76 = *(void *)(a1 + 560);
      uint64_t v75 = *(void *)(a1 + 568);
    }
    if (v75 == v76)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v78 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v76 + 8 * (v78 / 0x1E)) + 136 * (v78 % 0x1E);
    }
    goto LABEL_115;
  }
  uint64_t v27 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) != v27)
  {
    *(void *)(a1 + 24) = v27 + 40;
    uint64_t v24 = v27;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
  *(void *)(a1 + 136) = *(void *)(v24 + 32);
  uint64_t v28 = sub_2065BC(a1 + 344, a2, &v100);
  v97[0] = 0;
LABEL_134:
  sub_20721C((uint64_t)v97);
  return v28;
}

void sub_1F3308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55)
{
  if (a33 < 0)
  {
    operator delete(a28);
    if ((a54 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a47 & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((a54 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_5:
    sub_20721C(v55 - 112);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

uint64_t sub_1F357C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  v100[0] = 1;
  uint64_t v101 = a1;
  uint64_t v102 = &v103;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v88, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v86, 0, sizeof(v86));
    std::string::push_back(&v86, 51);
    std::string::push_back(&v86, 54);
    std::string::push_back(&v86, 49);
    std::string::push_back(&v86, 49);
    std::string::push_back(&v86, 50);
    std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v86;
    }
    else {
      uint64_t v11 = (std::string *)v86.__r_.__value_.__r.__words[0];
    }
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v86.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v86, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v91.__r_.__value_.__s + 23) = 0;
    v91.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v92 = -1;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long __p = 0u;
    long long v98 = 0u;
    uint64_t v99 = 0;
    int v93 = 1;
    int v90 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v91, (const std::string *)(a1 + 112));
    uint64_t v92 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v94, &__str);
    std::string::operator=((std::string *)((char *)&v95 + 8), &v87);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
    goto LABEL_57;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v23 = sub_B7FE4(a1, 0);
  uint64_t v103 = v23;
  if (!v23)
  {
LABEL_76:
    sub_B1D70(v23, (unint64_t)&v85);
    int v46 = std::string::insert(&v85, 0, "ERR019 - Failed to parse argument ");
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v48 = std::string::append(&v86, " for function: '");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    int v50 = *(char *)(a3 + 23);
    if (v50 >= 0) {
      uint64_t v51 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v51 = *(const std::string::value_type **)a3;
    }
    if (v50 >= 0) {
      std::string::size_type v52 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v52 = *(void *)(a3 + 8);
    }
    std::string::size_type v53 = std::string::append(&v87, v51, v52);
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    uint64_t v55 = std::string::append(&v88, "'");
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    memset(&v83, 0, sizeof(v83));
    std::string::push_back(&v83, 56);
    std::string::push_back(&v83, 55);
    std::string::push_back(&v83, 49);
    std::string::push_back(&v83, 49);
    std::string::push_back(&v83, 50);
    std::string::size_type v57 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v58 = &v83;
    }
    else {
      uint64_t v58 = (std::string *)v83.__r_.__value_.__r.__words[0];
    }
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v57 = v83.__r_.__value_.__l.__size_;
    }
    if (v57)
    {
      long long v59 = (std::string *)((char *)v58 + v57 - 1);
      if (v59 > v58)
      {
        uint64_t v60 = &v58->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v61 = *(v60 - 1);
          *(v60 - 1) = v59->__r_.__value_.__s.__data_[0];
          v59->__r_.__value_.__s.__data_[0] = v61;
          long long v59 = (std::string *)((char *)v59 - 1);
          BOOL v15 = v60++ >= (char *)v59;
        }
        while (!v15);
      }
    }
    uint64_t v62 = std::string::insert(&v83, 0, "exprtk.hpp:");
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v91.__r_.__value_.__s + 23) = 0;
    v91.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v92 = -1;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long __p = 0u;
    long long v98 = 0u;
    uint64_t v99 = 0;
    int v93 = 1;
    int v90 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v91, (const std::string *)(a1 + 112));
    uint64_t v92 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v94, &__str);
    std::string::operator=((std::string *)((char *)&v95 + 8), &v84);
    uint64_t v64 = *(void *)(a1 + 568);
    uint64_t v65 = *(void *)(a1 + 560);
    uint64_t v66 = 30 * ((v64 - v65) >> 3) - 1;
    if (v64 == v65) {
      uint64_t v66 = 0;
    }
    if (v66 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v65 = *(void *)(a1 + 560);
      uint64_t v64 = *(void *)(a1 + 568);
    }
    if (v64 == v65)
    {
      uint64_t v68 = 0;
    }
    else
    {
      unint64_t v67 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v68 = *(void *)(v65 + 8 * (v67 / 0x1E)) + 136 * (v67 % 0x1E);
    }
    sub_B5158(v68, (uint64_t)&v90);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v98) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v96) & 0x80000000) == 0)
      {
LABEL_101:
        if ((SBYTE7(v95) & 0x80000000) == 0) {
          goto LABEL_102;
        }
        goto LABEL_114;
      }
    }
    else if ((SHIBYTE(v96) & 0x80000000) == 0)
    {
      goto LABEL_101;
    }
    operator delete(*((void **)&v95 + 1));
    if ((SBYTE7(v95) & 0x80000000) == 0)
    {
LABEL_102:
      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_103;
      }
      goto LABEL_115;
    }
LABEL_114:
    operator delete((void *)v94);
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_103:
      if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_104;
      }
      goto LABEL_116;
    }
LABEL_115:
    operator delete(v91.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_104:
      if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_105;
      }
      goto LABEL_117;
    }
LABEL_116:
    operator delete(v84.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_105:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_106;
      }
      goto LABEL_118;
    }
LABEL_117:
    operator delete(v83.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_106:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_107;
      }
      goto LABEL_119;
    }
LABEL_118:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_107:
      if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_108;
      }
      goto LABEL_120;
    }
LABEL_119:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_108:
      if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_109;
      }
      goto LABEL_121;
    }
LABEL_120:
    operator delete(v87.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_109:
      if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_110;
      }
LABEL_122:
      operator delete(v85.__r_.__value_.__l.__data_);
      goto LABEL_110;
    }
LABEL_121:
    operator delete(v86.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_110;
    }
    goto LABEL_122;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_39;
  }
  uint64_t v24 = a1 + 40;
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t v26 = a1 + 40;
  if (*(void *)(a1 + 8) != v25)
  {
    *(void *)(a1 + 24) = v25 + 40;
    uint64_t v26 = v25;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v26;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v26 + 8));
  *(void *)(a1 + 136) = *(void *)(v26 + 32);
  uint64_t v104 = sub_B7FE4(a1, 0);
  if (!v104)
  {
    LODWORD(v23) = 1;
    goto LABEL_76;
  }
  if (*(_DWORD *)(a1 + 104) != 44)
  {
LABEL_39:
    std::operator+<char>();
    unint64_t v33 = std::string::append(&v88, "'");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    memset(&v86, 0, sizeof(v86));
    std::string::push_back(&v86, 48);
    std::string::push_back(&v86, 57);
    std::string::push_back(&v86, 49);
    std::string::push_back(&v86, 49);
    std::string::push_back(&v86, 50);
    std::string::size_type v35 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v36 = &v86;
    }
    else {
      uint64_t v36 = (std::string *)v86.__r_.__value_.__r.__words[0];
    }
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v35 = v86.__r_.__value_.__l.__size_;
    }
    if (v35)
    {
      long long v37 = (std::string *)((char *)v36 + v35 - 1);
      if (v37 > v36)
      {
        uint64_t v38 = &v36->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v39 = *(v38 - 1);
          *(v38 - 1) = v37->__r_.__value_.__s.__data_[0];
          v37->__r_.__value_.__s.__data_[0] = v39;
          long long v37 = (std::string *)((char *)v37 - 1);
          BOOL v15 = v38++ >= (char *)v37;
        }
        while (!v15);
      }
    }
    uint64_t v40 = std::string::insert(&v86, 0, "exprtk.hpp:");
    long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v91.__r_.__value_.__s + 23) = 0;
    v91.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v92 = -1;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long __p = 0u;
    long long v98 = 0u;
    uint64_t v99 = 0;
    int v93 = 1;
    int v90 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v91, (const std::string *)(a1 + 112));
    uint64_t v92 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v94, &__str);
    std::string::operator=((std::string *)((char *)&v95 + 8), &v87);
    uint64_t v42 = *(void *)(a1 + 568);
    uint64_t v43 = *(void *)(a1 + 560);
    uint64_t v44 = 30 * ((v42 - v43) >> 3) - 1;
    if (v42 == v43) {
      uint64_t v44 = 0;
    }
    if (v44 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v43 = *(void *)(a1 + 560);
      uint64_t v42 = *(void *)(a1 + 568);
    }
    if (v42 == v43)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v45 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v43 + 8 * (v45 / 0x1E)) + 136 * (v45 % 0x1E);
    }
    goto LABEL_57;
  }
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = a1 + 40;
  if (*(void *)(a1 + 8) != v27)
  {
    *(void *)(a1 + 24) = v27 + 40;
    uint64_t v28 = v27;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v28;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v28 + 8));
  *(void *)(a1 + 136) = *(void *)(v28 + 32);
  uint64_t v105 = sub_B7FE4(a1, 0);
  if (!v105)
  {
    LODWORD(v23) = 2;
    goto LABEL_76;
  }
  if (*(_DWORD *)(a1 + 104) == 41)
  {
    uint64_t v29 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 8) != v29)
    {
      *(void *)(a1 + 24) = v29 + 40;
      uint64_t v24 = v29;
    }
    *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
    std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
    *(void *)(a1 + 136) = *(void *)(v24 + 32);
    uint64_t v30 = sub_207384(a1 + 344, a2, &v103);
    uint64_t v31 = v30;
    if (v30)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v30 + 32))(v30) == 2)
      {
        uint64_t v32 = v31;
LABEL_147:
        v100[0] = 0;
        goto LABEL_111;
      }
      uint64_t v32 = 0;
      if (!v103) {
        goto LABEL_147;
      }
      if (!v104) {
        goto LABEL_147;
      }
      if (!v105) {
        goto LABEL_147;
      }
      if (*(void *)(a2 + 32) == 3)
      {
        uint64_t v32 = v31;
        if (sub_207658(v31, &v103)) {
          goto LABEL_147;
        }
      }
      sub_1BD9D0(*(void *)(a1 + 352), &v103);
    }
    uint64_t v32 = 0;
    goto LABEL_147;
  }
  std::operator+<char>();
  std::string v70 = std::string::append(&v88, "'");
  long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  memset(&v86, 0, sizeof(v86));
  std::string::push_back(&v86, 51);
  std::string::push_back(&v86, 48);
  std::string::push_back(&v86, 50);
  std::string::push_back(&v86, 49);
  std::string::push_back(&v86, 50);
  std::string::size_type v72 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v73 = &v86;
  }
  else {
    std::string v73 = (std::string *)v86.__r_.__value_.__r.__words[0];
  }
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v72 = v86.__r_.__value_.__l.__size_;
  }
  if (v72)
  {
    long long v74 = (std::string *)((char *)v73 + v72 - 1);
    if (v74 > v73)
    {
      uint64_t v75 = &v73->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v76 = *(v75 - 1);
        *(v75 - 1) = v74->__r_.__value_.__s.__data_[0];
        v74->__r_.__value_.__s.__data_[0] = v76;
        long long v74 = (std::string *)((char *)v74 - 1);
        BOOL v15 = v75++ >= (char *)v74;
      }
      while (!v15);
    }
  }
  uint64_t v77 = std::string::insert(&v86, 0, "exprtk.hpp:");
  long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
  v87.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v78;
  v77->__r_.__value_.__l.__size_ = 0;
  v77->__r_.__value_.__r.__words[2] = 0;
  v77->__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&v91.__r_.__value_.__s + 23) = 0;
  v91.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v92 = -1;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long __p = 0u;
  long long v98 = 0u;
  uint64_t v99 = 0;
  int v93 = 1;
  int v90 = *(_DWORD *)(a1 + 104);
  std::string::operator=(&v91, (const std::string *)(a1 + 112));
  uint64_t v92 = *(void *)(a1 + 136);
  std::string::operator=((std::string *)&v94, &__str);
  std::string::operator=((std::string *)((char *)&v95 + 8), &v87);
  uint64_t v79 = *(void *)(a1 + 568);
  uint64_t v80 = *(void *)(a1 + 560);
  uint64_t v81 = 30 * ((v79 - v80) >> 3) - 1;
  if (v79 == v80) {
    uint64_t v81 = 0;
  }
  if (v81 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
  {
    sub_B4B88(a1 + 552);
    uint64_t v80 = *(void *)(a1 + 560);
    uint64_t v79 = *(void *)(a1 + 568);
  }
  if (v79 == v80)
  {
    uint64_t v22 = 0;
  }
  else
  {
    unint64_t v82 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
    uint64_t v22 = *(void *)(v80 + 8 * (v82 / 0x1E)) + 136 * (v82 % 0x1E);
  }
LABEL_57:
  sub_B5158(v22, (uint64_t)&v90);
  ++*(void *)(a1 + 592);
  if (SBYTE7(v98) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v96) & 0x80000000) == 0)
    {
LABEL_59:
      if ((SBYTE7(v95) & 0x80000000) == 0) {
        goto LABEL_60;
      }
      goto LABEL_68;
    }
  }
  else if ((SHIBYTE(v96) & 0x80000000) == 0)
  {
    goto LABEL_59;
  }
  operator delete(*((void **)&v95 + 1));
  if ((SBYTE7(v95) & 0x80000000) == 0)
  {
LABEL_60:
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_69;
  }
LABEL_68:
  operator delete((void *)v94);
  if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_61:
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_70;
  }
LABEL_69:
  operator delete(v91.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_62:
    if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_71;
  }
LABEL_70:
  operator delete(v87.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_63:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_72;
  }
LABEL_71:
  operator delete(v86.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_64:
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_73;
    }
    goto LABEL_110;
  }
LABEL_72:
  operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
LABEL_73:
  }
    operator delete(v88.__r_.__value_.__l.__data_);
LABEL_110:
  uint64_t v32 = 0;
LABEL_111:
  sub_1DAA20((uint64_t)v100);
  return v32;
}

void sub_1F42AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a54 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_5:
    sub_1DAA20(v56 - 120);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(a42);
  goto LABEL_5;
}

uint64_t sub_1F45A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64x2_t v105 = 0u;
  int64x2_t v106 = 0u;
  v102[0] = 1;
  uint64_t v103 = a1;
  uint64_t v104 = &v105;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v90, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v88, 0, sizeof(v88));
    std::string::push_back(&v88, 51);
    std::string::push_back(&v88, 54);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 50);
    std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v88;
    }
    else {
      uint64_t v11 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v88.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v88, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
LABEL_66:
    sub_B5158(v22, (uint64_t)&v92);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v100) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v98) & 0x80000000) == 0)
      {
LABEL_68:
        if ((SBYTE7(v97) & 0x80000000) == 0) {
          goto LABEL_69;
        }
        goto LABEL_77;
      }
    }
    else if ((SHIBYTE(v98) & 0x80000000) == 0)
    {
      goto LABEL_68;
    }
    operator delete(*((void **)&v97 + 1));
    if ((SBYTE7(v97) & 0x80000000) == 0)
    {
LABEL_69:
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_70;
      }
      goto LABEL_78;
    }
LABEL_77:
    operator delete((void *)v96);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_70:
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_71;
      }
      goto LABEL_79;
    }
LABEL_78:
    operator delete(v93.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_71:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_72;
      }
      goto LABEL_80;
    }
LABEL_79:
    operator delete(v89.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_72:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_81;
    }
LABEL_80:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_73:
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_82;
      }
      goto LABEL_133;
    }
LABEL_81:
    operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_82:
      long long v47 = (void *)v90.__r_.__value_.__r.__words[0];
LABEL_132:
      operator delete(v47);
    }
LABEL_133:
    uint64_t v33 = 0;
    goto LABEL_134;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v23 = sub_B7FE4(a1, 0);
  v105.i64[0] = v23;
  if (!v23)
  {
LABEL_86:
    sub_B1D70(v23, (unint64_t)&v87);
    std::string::size_type v48 = std::string::insert(&v87, 0, "ERR019 - Failed to parse argument ");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    int v50 = std::string::append(&v88, " for function: '");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    int v52 = *(char *)(a3 + 23);
    if (v52 >= 0) {
      std::string::size_type v53 = (const std::string::value_type *)a3;
    }
    else {
      std::string::size_type v53 = *(const std::string::value_type **)a3;
    }
    if (v52 >= 0) {
      std::string::size_type v54 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v54 = *(void *)(a3 + 8);
    }
    uint64_t v55 = std::string::append(&v89, v53, v54);
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v57 = std::string::append(&v90, "'");
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    memset(&v85, 0, sizeof(v85));
    std::string::push_back(&v85, 56);
    std::string::push_back(&v85, 55);
    std::string::push_back(&v85, 49);
    std::string::push_back(&v85, 49);
    std::string::push_back(&v85, 50);
    std::string::size_type v59 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v60 = &v85;
    }
    else {
      uint64_t v60 = (std::string *)v85.__r_.__value_.__r.__words[0];
    }
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v59 = v85.__r_.__value_.__l.__size_;
    }
    if (v59)
    {
      std::string::value_type v61 = (std::string *)((char *)v60 + v59 - 1);
      if (v61 > v60)
      {
        uint64_t v62 = &v60->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v63 = *(v62 - 1);
          *(v62 - 1) = v61->__r_.__value_.__s.__data_[0];
          v61->__r_.__value_.__s.__data_[0] = v63;
          std::string::value_type v61 = (std::string *)((char *)v61 - 1);
          BOOL v15 = v62++ >= (char *)v61;
        }
        while (!v15);
      }
    }
    uint64_t v64 = std::string::insert(&v85, 0, "exprtk.hpp:");
    long long v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v86);
    uint64_t v66 = *(void *)(a1 + 568);
    uint64_t v67 = *(void *)(a1 + 560);
    uint64_t v68 = 30 * ((v66 - v67) >> 3) - 1;
    if (v66 == v67) {
      uint64_t v68 = 0;
    }
    if (v68 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v67 = *(void *)(a1 + 560);
      uint64_t v66 = *(void *)(a1 + 568);
    }
    if (v66 == v67)
    {
      uint64_t v70 = 0;
    }
    else
    {
      unint64_t v69 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v70 = *(void *)(v67 + 8 * (v69 / 0x1E)) + 136 * (v69 % 0x1E);
    }
    sub_B5158(v70, (uint64_t)&v92);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v100) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v98) & 0x80000000) == 0)
      {
LABEL_111:
        if ((SBYTE7(v97) & 0x80000000) == 0) {
          goto LABEL_112;
        }
        goto LABEL_123;
      }
    }
    else if ((SHIBYTE(v98) & 0x80000000) == 0)
    {
      goto LABEL_111;
    }
    operator delete(*((void **)&v97 + 1));
    if ((SBYTE7(v97) & 0x80000000) == 0)
    {
LABEL_112:
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_113;
      }
      goto LABEL_124;
    }
LABEL_123:
    operator delete((void *)v96);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_113:
      if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_114;
      }
      goto LABEL_125;
    }
LABEL_124:
    operator delete(v93.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_114:
      if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_115;
      }
      goto LABEL_126;
    }
LABEL_125:
    operator delete(v86.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_115:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_116;
      }
      goto LABEL_127;
    }
LABEL_126:
    operator delete(v85.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_116:
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_117;
      }
      goto LABEL_128;
    }
LABEL_127:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_117:
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_118;
      }
      goto LABEL_129;
    }
LABEL_128:
    operator delete(v90.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_118:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_119;
      }
      goto LABEL_130;
    }
LABEL_129:
    operator delete(v89.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_119:
      if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_133;
      }
LABEL_131:
      long long v47 = (void *)v87.__r_.__value_.__r.__words[0];
      goto LABEL_132;
    }
LABEL_130:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_133;
    }
    goto LABEL_131;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_48;
  }
  uint64_t v24 = a1 + 40;
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t v26 = a1 + 40;
  if (*(void *)(a1 + 8) != v25)
  {
    *(void *)(a1 + 24) = v25 + 40;
    uint64_t v26 = v25;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v26;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v26 + 8));
  *(void *)(a1 + 136) = *(void *)(v26 + 32);
  v105.i64[1] = sub_B7FE4(a1, 0);
  if (!v105.i64[1])
  {
    LODWORD(v23) = 1;
    goto LABEL_86;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_48;
  }
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = a1 + 40;
  if (*(void *)(a1 + 8) != v27)
  {
    *(void *)(a1 + 24) = v27 + 40;
    uint64_t v28 = v27;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v28;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v28 + 8));
  *(void *)(a1 + 136) = *(void *)(v28 + 32);
  v106.i64[0] = sub_B7FE4(a1, 0);
  if (!v106.i64[0])
  {
    LODWORD(v23) = 2;
    goto LABEL_86;
  }
  if (*(_DWORD *)(a1 + 104) != 44)
  {
LABEL_48:
    std::operator+<char>();
    long long v34 = std::string::append(&v90, "'");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    memset(&v88, 0, sizeof(v88));
    std::string::push_back(&v88, 48);
    std::string::push_back(&v88, 57);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 50);
    std::string::size_type v36 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v37 = &v88;
    }
    else {
      long long v37 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v36 = v88.__r_.__value_.__l.__size_;
    }
    if (v36)
    {
      uint64_t v38 = (std::string *)((char *)v37 + v36 - 1);
      if (v38 > v37)
      {
        std::string::value_type v39 = &v37->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v40 = *(v39 - 1);
          *(v39 - 1) = v38->__r_.__value_.__s.__data_[0];
          v38->__r_.__value_.__s.__data_[0] = v40;
          uint64_t v38 = (std::string *)((char *)v38 - 1);
          BOOL v15 = v39++ >= (char *)v38;
        }
        while (!v15);
      }
    }
    long long v41 = std::string::insert(&v88, 0, "exprtk.hpp:");
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    uint64_t v43 = *(void *)(a1 + 568);
    uint64_t v44 = *(void *)(a1 + 560);
    uint64_t v45 = 30 * ((v43 - v44) >> 3) - 1;
    if (v43 == v44) {
      uint64_t v45 = 0;
    }
    if (v45 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v44 = *(void *)(a1 + 560);
      uint64_t v43 = *(void *)(a1 + 568);
    }
    if (v43 == v44)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v46 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v44 + 8 * (v46 / 0x1E)) + 136 * (v46 % 0x1E);
    }
    goto LABEL_66;
  }
  uint64_t v29 = *(void *)(a1 + 24);
  uint64_t v30 = a1 + 40;
  if (*(void *)(a1 + 8) != v29)
  {
    *(void *)(a1 + 24) = v29 + 40;
    uint64_t v30 = v29;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v30;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v30 + 8));
  *(void *)(a1 + 136) = *(void *)(v30 + 32);
  v106.i64[1] = sub_B7FE4(a1, 0);
  if (!v106.i64[1])
  {
    LODWORD(v23) = 3;
    goto LABEL_86;
  }
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    std::operator+<char>();
    std::string::size_type v72 = std::string::append(&v90, "'");
    long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    memset(&v88, 0, sizeof(v88));
    std::string::push_back(&v88, 51);
    std::string::push_back(&v88, 48);
    std::string::push_back(&v88, 50);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 50);
    std::string::size_type v74 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v75 = &v88;
    }
    else {
      uint64_t v75 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v74 = v88.__r_.__value_.__l.__size_;
    }
    if (v74)
    {
      std::string::value_type v76 = (std::string *)((char *)v75 + v74 - 1);
      if (v76 > v75)
      {
        uint64_t v77 = &v75->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v78 = *(v77 - 1);
          *(v77 - 1) = v76->__r_.__value_.__s.__data_[0];
          v76->__r_.__value_.__s.__data_[0] = v78;
          std::string::value_type v76 = (std::string *)((char *)v76 - 1);
          BOOL v15 = v77++ >= (char *)v76;
        }
        while (!v15);
      }
    }
    uint64_t v79 = std::string::insert(&v88, 0, "exprtk.hpp:");
    long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    uint64_t v81 = *(void *)(a1 + 568);
    uint64_t v82 = *(void *)(a1 + 560);
    uint64_t v83 = 30 * ((v81 - v82) >> 3) - 1;
    if (v81 == v82) {
      uint64_t v83 = 0;
    }
    if (v83 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v82 = *(void *)(a1 + 560);
      uint64_t v81 = *(void *)(a1 + 568);
    }
    if (v81 == v82)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v84 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v82 + 8 * (v84 / 0x1E)) + 136 * (v84 % 0x1E);
    }
    goto LABEL_66;
  }
  uint64_t v31 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) != v31)
  {
    *(void *)(a1 + 24) = v31 + 40;
    uint64_t v24 = v31;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
  *(void *)(a1 + 136) = *(void *)(v24 + 32);
  uint64_t v32 = sub_207BEC(a1 + 344, a2, &v105);
  uint64_t v33 = v32;
  if (!v32 || (*(unsigned int (**)(uint64_t))(*(void *)v32 + 32))(v32) == 2) {
    goto LABEL_47;
  }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v105), (int32x4_t)vceqzq_s64(v106)))) & 1) == 0)
  {
    if (*(void *)(a2 + 32) == 4 && (sub_207EEC(v33, &v105) & 1) != 0) {
      goto LABEL_47;
    }
    sub_1BE7C8(*(void *)(a1 + 352), &v105);
  }
  uint64_t v33 = 0;
LABEL_47:
  v102[0] = 0;
LABEL_134:
  sub_DD4B4((uint64_t)v102);
  return v33;
}

void sub_1F5328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  if (a33 < 0)
  {
    operator delete(a28);
    if ((a54 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a47 & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((a54 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_5:
    sub_DD4B4(v56 - 136);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

uint64_t sub_1F559C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v109 = 0;
  int64x2_t v107 = 0u;
  int64x2_t v108 = 0u;
  v104[0] = 1;
  uint64_t v105 = a1;
  int64x2_t v106 = &v107;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v92, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v90, 0, sizeof(v90));
    std::string::push_back(&v90, 51);
    std::string::push_back(&v90, 54);
    std::string::push_back(&v90, 49);
    std::string::push_back(&v90, 49);
    std::string::push_back(&v90, 50);
    std::string::size_type size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v90;
    }
    else {
      uint64_t v11 = (std::string *)v90.__r_.__value_.__r.__words[0];
    }
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v90.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v90, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v95.__r_.__value_.__s + 23) = 0;
    v95.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v96 = -1;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long __p = 0u;
    long long v102 = 0u;
    uint64_t v103 = 0;
    int v97 = 1;
    int v94 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v95, (const std::string *)(a1 + 112));
    uint64_t v96 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v98, &__str);
    std::string::operator=((std::string *)((char *)&v99 + 8), &v91);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
    goto LABEL_65;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v23 = sub_B7FE4(a1, 0);
  v107.i64[0] = v23;
  if (!v23)
  {
LABEL_86:
    sub_B1D70(v23, (unint64_t)&v89);
    int v50 = std::string::insert(&v89, 0, "ERR019 - Failed to parse argument ");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    int v52 = std::string::append(&v90, " for function: '");
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    int v54 = *(char *)(a3 + 23);
    if (v54 >= 0) {
      uint64_t v55 = (const std::string::value_type *)a3;
    }
    else {
      uint64_t v55 = *(const std::string::value_type **)a3;
    }
    if (v54 >= 0) {
      std::string::size_type v56 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v56 = *(void *)(a3 + 8);
    }
    std::string::size_type v57 = std::string::append(&v91, v55, v56);
    long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v59 = std::string::append(&v92, "'");
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    memset(&v87, 0, sizeof(v87));
    std::string::push_back(&v87, 56);
    std::string::push_back(&v87, 55);
    std::string::push_back(&v87, 49);
    std::string::push_back(&v87, 49);
    std::string::push_back(&v87, 50);
    std::string::size_type v61 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v62 = &v87;
    }
    else {
      uint64_t v62 = (std::string *)v87.__r_.__value_.__r.__words[0];
    }
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v61 = v87.__r_.__value_.__l.__size_;
    }
    if (v61)
    {
      std::string::value_type v63 = (std::string *)((char *)v62 + v61 - 1);
      if (v63 > v62)
      {
        uint64_t v64 = &v62->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v65 = *(v64 - 1);
          *(v64 - 1) = v63->__r_.__value_.__s.__data_[0];
          v63->__r_.__value_.__s.__data_[0] = v65;
          std::string::value_type v63 = (std::string *)((char *)v63 - 1);
          BOOL v15 = v64++ >= (char *)v63;
        }
        while (!v15);
      }
    }
    uint64_t v66 = std::string::insert(&v87, 0, "exprtk.hpp:");
    long long v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v95.__r_.__value_.__s + 23) = 0;
    v95.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v96 = -1;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long __p = 0u;
    long long v102 = 0u;
    uint64_t v103 = 0;
    int v97 = 1;
    int v94 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v95, (const std::string *)(a1 + 112));
    uint64_t v96 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v98, &__str);
    std::string::operator=((std::string *)((char *)&v99 + 8), &v88);
    uint64_t v68 = *(void *)(a1 + 568);
    uint64_t v69 = *(void *)(a1 + 560);
    uint64_t v70 = 30 * ((v68 - v69) >> 3) - 1;
    if (v68 == v69) {
      uint64_t v70 = 0;
    }
    if (v70 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v69 = *(void *)(a1 + 560);
      uint64_t v68 = *(void *)(a1 + 568);
    }
    if (v68 == v69)
    {
      uint64_t v72 = 0;
    }
    else
    {
      unint64_t v71 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v72 = *(void *)(v69 + 8 * (v71 / 0x1E)) + 136 * (v71 % 0x1E);
    }
    sub_B5158(v72, (uint64_t)&v94);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v102) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v100) & 0x80000000) == 0)
      {
LABEL_111:
        if ((SBYTE7(v99) & 0x80000000) == 0) {
          goto LABEL_112;
        }
        goto LABEL_124;
      }
    }
    else if ((SHIBYTE(v100) & 0x80000000) == 0)
    {
      goto LABEL_111;
    }
    operator delete(*((void **)&v99 + 1));
    if ((SBYTE7(v99) & 0x80000000) == 0)
    {
LABEL_112:
      if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_113;
      }
      goto LABEL_125;
    }
LABEL_124:
    operator delete((void *)v98);
    if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_113:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_114;
      }
      goto LABEL_126;
    }
LABEL_125:
    operator delete(v95.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_114:
      if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_115;
      }
      goto LABEL_127;
    }
LABEL_126:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_115:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_116;
      }
      goto LABEL_128;
    }
LABEL_127:
    operator delete(v87.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_116:
      if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_117;
      }
      goto LABEL_129;
    }
LABEL_128:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_117:
      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_118;
      }
      goto LABEL_130;
    }
LABEL_129:
    operator delete(v92.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_118:
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_119;
      }
      goto LABEL_131;
    }
LABEL_130:
    operator delete(v91.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_119:
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_120;
      }
LABEL_132:
      operator delete(v89.__r_.__value_.__l.__data_);
      goto LABEL_120;
    }
LABEL_131:
    operator delete(v90.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_120;
    }
    goto LABEL_132;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_47;
  }
  uint64_t v24 = a1 + 40;
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t v26 = a1 + 40;
  if (*(void *)(a1 + 8) != v25)
  {
    *(void *)(a1 + 24) = v25 + 40;
    uint64_t v26 = v25;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v26;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v26 + 8));
  *(void *)(a1 + 136) = *(void *)(v26 + 32);
  v107.i64[1] = sub_B7FE4(a1, 0);
  if (!v107.i64[1])
  {
    LODWORD(v23) = 1;
    goto LABEL_86;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_47;
  }
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = a1 + 40;
  if (*(void *)(a1 + 8) != v27)
  {
    *(void *)(a1 + 24) = v27 + 40;
    uint64_t v28 = v27;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v28;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v28 + 8));
  *(void *)(a1 + 136) = *(void *)(v28 + 32);
  v108.i64[0] = sub_B7FE4(a1, 0);
  if (!v108.i64[0])
  {
    LODWORD(v23) = 2;
    goto LABEL_86;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_47;
  }
  uint64_t v29 = *(void *)(a1 + 24);
  uint64_t v30 = a1 + 40;
  if (*(void *)(a1 + 8) != v29)
  {
    *(void *)(a1 + 24) = v29 + 40;
    uint64_t v30 = v29;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v30;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v30 + 8));
  *(void *)(a1 + 136) = *(void *)(v30 + 32);
  v108.i64[1] = sub_B7FE4(a1, 0);
  if (!v108.i64[1])
  {
    LODWORD(v23) = 3;
    goto LABEL_86;
  }
  if (*(_DWORD *)(a1 + 104) != 44)
  {
LABEL_47:
    std::operator+<char>();
    long long v37 = std::string::append(&v92, "'");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    memset(&v90, 0, sizeof(v90));
    std::string::push_back(&v90, 48);
    std::string::push_back(&v90, 57);
    std::string::push_back(&v90, 49);
    std::string::push_back(&v90, 49);
    std::string::push_back(&v90, 50);
    std::string::size_type v39 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::value_type v40 = &v90;
    }
    else {
      std::string::value_type v40 = (std::string *)v90.__r_.__value_.__r.__words[0];
    }
    if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v39 = v90.__r_.__value_.__l.__size_;
    }
    if (v39)
    {
      long long v41 = (std::string *)((char *)v40 + v39 - 1);
      if (v41 > v40)
      {
        long long v42 = &v40->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v43 = *(v42 - 1);
          *(v42 - 1) = v41->__r_.__value_.__s.__data_[0];
          v41->__r_.__value_.__s.__data_[0] = v43;
          long long v41 = (std::string *)((char *)v41 - 1);
          BOOL v15 = v42++ >= (char *)v41;
        }
        while (!v15);
      }
    }
    uint64_t v44 = std::string::insert(&v90, 0, "exprtk.hpp:");
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v91.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v95.__r_.__value_.__s + 23) = 0;
    v95.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v96 = -1;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long __p = 0u;
    long long v102 = 0u;
    uint64_t v103 = 0;
    int v97 = 1;
    int v94 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v95, (const std::string *)(a1 + 112));
    uint64_t v96 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v98, &__str);
    std::string::operator=((std::string *)((char *)&v99 + 8), &v91);
    uint64_t v46 = *(void *)(a1 + 568);
    uint64_t v47 = *(void *)(a1 + 560);
    uint64_t v48 = 30 * ((v46 - v47) >> 3) - 1;
    if (v46 == v47) {
      uint64_t v48 = 0;
    }
    if (v48 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v47 = *(void *)(a1 + 560);
      uint64_t v46 = *(void *)(a1 + 568);
    }
    if (v46 == v47)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v49 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v47 + 8 * (v49 / 0x1E)) + 136 * (v49 % 0x1E);
    }
    goto LABEL_65;
  }
  uint64_t v31 = *(void *)(a1 + 24);
  uint64_t v32 = a1 + 40;
  if (*(void *)(a1 + 8) != v31)
  {
    *(void *)(a1 + 24) = v31 + 40;
    uint64_t v32 = v31;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v32;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v32 + 8));
  *(void *)(a1 + 136) = *(void *)(v32 + 32);
  uint64_t v109 = sub_B7FE4(a1, 0);
  if (!v109)
  {
    LODWORD(v23) = 4;
    goto LABEL_86;
  }
  if (*(_DWORD *)(a1 + 104) == 41)
  {
    uint64_t v33 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 8) != v33)
    {
      *(void *)(a1 + 24) = v33 + 40;
      uint64_t v24 = v33;
    }
    *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
    std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
    *(void *)(a1 + 136) = *(void *)(v24 + 32);
    uint64_t v34 = sub_208480(a1 + 344, a2, &v107);
    uint64_t v35 = v34;
    if (v34)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v34 + 32))(v34) == 2)
      {
        uint64_t v36 = v35;
LABEL_156:
        v104[0] = 0;
        goto LABEL_121;
      }
      uint64_t v36 = 0;
      if (vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v107), (int32x4_t)vceqzq_s64(v108))))) {
        goto LABEL_156;
      }
      if (!v109) {
        goto LABEL_156;
      }
      if (*(void *)(a2 + 32) == 5)
      {
        uint64_t v36 = v35;
        if (sub_208AF4(v35, &v107)) {
          goto LABEL_156;
        }
      }
      sub_2087DC(*(void *)(a1 + 352), &v107);
    }
    uint64_t v36 = 0;
    goto LABEL_156;
  }
  std::operator+<char>();
  std::string::size_type v74 = std::string::append(&v92, "'");
  long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v75;
  v74->__r_.__value_.__l.__size_ = 0;
  v74->__r_.__value_.__r.__words[2] = 0;
  v74->__r_.__value_.__r.__words[0] = 0;
  memset(&v90, 0, sizeof(v90));
  std::string::push_back(&v90, 51);
  std::string::push_back(&v90, 48);
  std::string::push_back(&v90, 50);
  std::string::push_back(&v90, 49);
  std::string::push_back(&v90, 50);
  std::string::size_type v76 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v77 = &v90;
  }
  else {
    uint64_t v77 = (std::string *)v90.__r_.__value_.__r.__words[0];
  }
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v76 = v90.__r_.__value_.__l.__size_;
  }
  if (v76)
  {
    std::string::value_type v78 = (std::string *)((char *)v77 + v76 - 1);
    if (v78 > v77)
    {
      uint64_t v79 = &v77->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v80 = *(v79 - 1);
        *(v79 - 1) = v78->__r_.__value_.__s.__data_[0];
        v78->__r_.__value_.__s.__data_[0] = v80;
        std::string::value_type v78 = (std::string *)((char *)v78 - 1);
        BOOL v15 = v79++ >= (char *)v78;
      }
      while (!v15);
    }
  }
  uint64_t v81 = std::string::insert(&v90, 0, "exprtk.hpp:");
  long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
  v91.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v82;
  v81->__r_.__value_.__l.__size_ = 0;
  v81->__r_.__value_.__r.__words[2] = 0;
  v81->__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&v95.__r_.__value_.__s + 23) = 0;
  v95.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v96 = -1;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long __p = 0u;
  long long v102 = 0u;
  uint64_t v103 = 0;
  int v97 = 1;
  int v94 = *(_DWORD *)(a1 + 104);
  std::string::operator=(&v95, (const std::string *)(a1 + 112));
  uint64_t v96 = *(void *)(a1 + 136);
  std::string::operator=((std::string *)&v98, &__str);
  std::string::operator=((std::string *)((char *)&v99 + 8), &v91);
  uint64_t v83 = *(void *)(a1 + 568);
  uint64_t v84 = *(void *)(a1 + 560);
  uint64_t v85 = 30 * ((v83 - v84) >> 3) - 1;
  if (v83 == v84) {
    uint64_t v85 = 0;
  }
  if (v85 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
  {
    sub_B4B88(a1 + 552);
    uint64_t v84 = *(void *)(a1 + 560);
    uint64_t v83 = *(void *)(a1 + 568);
  }
  if (v83 == v84)
  {
    uint64_t v22 = 0;
  }
  else
  {
    unint64_t v86 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
    uint64_t v22 = *(void *)(v84 + 8 * (v86 / 0x1E)) + 136 * (v86 % 0x1E);
  }
LABEL_65:
  sub_B5158(v22, (uint64_t)&v94);
  ++*(void *)(a1 + 592);
  if (SBYTE7(v102) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v100) & 0x80000000) == 0)
    {
LABEL_67:
      if ((SBYTE7(v99) & 0x80000000) == 0) {
        goto LABEL_68;
      }
      goto LABEL_76;
    }
  }
  else if ((SHIBYTE(v100) & 0x80000000) == 0)
  {
    goto LABEL_67;
  }
  operator delete(*((void **)&v99 + 1));
  if ((SBYTE7(v99) & 0x80000000) == 0)
  {
LABEL_68:
    if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_77;
  }
LABEL_76:
  operator delete((void *)v98);
  if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_69:
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_78;
  }
LABEL_77:
  operator delete(v95.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_70:
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_79;
  }
LABEL_78:
  operator delete(v91.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_71:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_80;
  }
LABEL_79:
  operator delete(v90.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_72:
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_81;
    }
    goto LABEL_120;
  }
LABEL_80:
  operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
LABEL_81:
  }
    operator delete(v92.__r_.__value_.__l.__data_);
LABEL_120:
  uint64_t v36 = 0;
LABEL_121:
  sub_209180((uint64_t)v104);
  return v36;
}

void sub_1F63A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a54 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_5:
    sub_209180(v56 - 136);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(a42);
  goto LABEL_5;
}

uint64_t sub_1F669C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64x2_t v110 = 0u;
  long long v111 = 0u;
  int64x2_t v109 = 0u;
  v106[0] = 1;
  uint64_t v107 = a1;
  int64x2_t v108 = &v109;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v94, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v92, 0, sizeof(v92));
    std::string::push_back(&v92, 51);
    std::string::push_back(&v92, 54);
    std::string::push_back(&v92, 49);
    std::string::push_back(&v92, 49);
    std::string::push_back(&v92, 50);
    std::string::size_type size = HIBYTE(v92.__r_.__value_.__r.__words[2]);
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v92;
    }
    else {
      uint64_t v11 = (std::string *)v92.__r_.__value_.__r.__words[0];
    }
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v92.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v92, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v97.__r_.__value_.__s + 23) = 0;
    v97.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v98 = -1;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long __p = 0u;
    long long v104 = 0u;
    uint64_t v105 = 0;
    int v99 = 1;
    int v96 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v97, (const std::string *)(a1 + 112));
    uint64_t v98 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v100, &__str);
    std::string::operator=((std::string *)((char *)&v101 + 8), &v93);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
    goto LABEL_69;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v23 = sub_B7FE4(a1, 0);
  v109.i64[0] = v23;
  if (!v23)
  {
LABEL_91:
    sub_B1D70(v23, (unint64_t)&v91);
    int v52 = std::string::insert(&v91, 0, "ERR019 - Failed to parse argument ");
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    int v54 = std::string::append(&v92, " for function: '");
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    int v56 = *(char *)(a3 + 23);
    if (v56 >= 0) {
      std::string::size_type v57 = (const std::string::value_type *)a3;
    }
    else {
      std::string::size_type v57 = *(const std::string::value_type **)a3;
    }
    if (v56 >= 0) {
      std::string::size_type v58 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v58 = *(void *)(a3 + 8);
    }
    std::string::size_type v59 = std::string::append(&v93, v57, v58);
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v94.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v61 = std::string::append(&v94, "'");
    long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    memset(&v89, 0, sizeof(v89));
    std::string::push_back(&v89, 56);
    std::string::push_back(&v89, 55);
    std::string::push_back(&v89, 49);
    std::string::push_back(&v89, 49);
    std::string::push_back(&v89, 50);
    std::string::size_type v63 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v64 = &v89;
    }
    else {
      uint64_t v64 = (std::string *)v89.__r_.__value_.__r.__words[0];
    }
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v63 = v89.__r_.__value_.__l.__size_;
    }
    if (v63)
    {
      std::string::value_type v65 = (std::string *)((char *)v64 + v63 - 1);
      if (v65 > v64)
      {
        uint64_t v66 = &v64->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v67 = *(v66 - 1);
          *(v66 - 1) = v65->__r_.__value_.__s.__data_[0];
          v65->__r_.__value_.__s.__data_[0] = v67;
          std::string::value_type v65 = (std::string *)((char *)v65 - 1);
          BOOL v15 = v66++ >= (char *)v65;
        }
        while (!v15);
      }
    }
    uint64_t v68 = std::string::insert(&v89, 0, "exprtk.hpp:");
    long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v97.__r_.__value_.__s + 23) = 0;
    v97.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v98 = -1;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long __p = 0u;
    long long v104 = 0u;
    uint64_t v105 = 0;
    int v99 = 1;
    int v96 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v97, (const std::string *)(a1 + 112));
    uint64_t v98 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v100, &__str);
    std::string::operator=((std::string *)((char *)&v101 + 8), &v90);
    uint64_t v70 = *(void *)(a1 + 568);
    uint64_t v71 = *(void *)(a1 + 560);
    uint64_t v72 = 30 * ((v70 - v71) >> 3) - 1;
    if (v70 == v71) {
      uint64_t v72 = 0;
    }
    if (v72 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v71 = *(void *)(a1 + 560);
      uint64_t v70 = *(void *)(a1 + 568);
    }
    if (v70 == v71)
    {
      uint64_t v74 = 0;
    }
    else
    {
      unint64_t v73 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v74 = *(void *)(v71 + 8 * (v73 / 0x1E)) + 136 * (v73 % 0x1E);
    }
    sub_B5158(v74, (uint64_t)&v96);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v104) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v102) & 0x80000000) == 0)
      {
LABEL_116:
        if ((SBYTE7(v101) & 0x80000000) == 0) {
          goto LABEL_117;
        }
        goto LABEL_129;
      }
    }
    else if ((SHIBYTE(v102) & 0x80000000) == 0)
    {
      goto LABEL_116;
    }
    operator delete(*((void **)&v101 + 1));
    if ((SBYTE7(v101) & 0x80000000) == 0)
    {
LABEL_117:
      if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_118;
      }
      goto LABEL_130;
    }
LABEL_129:
    operator delete((void *)v100);
    if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_118:
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_119;
      }
      goto LABEL_131;
    }
LABEL_130:
    operator delete(v97.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_119:
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_120;
      }
      goto LABEL_132;
    }
LABEL_131:
    operator delete(v90.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_120:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_121;
      }
      goto LABEL_133;
    }
LABEL_132:
    operator delete(v89.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_121:
      if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_122;
      }
      goto LABEL_134;
    }
LABEL_133:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_122:
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_123;
      }
      goto LABEL_135;
    }
LABEL_134:
    operator delete(v94.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_123:
      if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_124;
      }
      goto LABEL_136;
    }
LABEL_135:
    operator delete(v93.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_124:
      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_125;
      }
LABEL_137:
      operator delete(v91.__r_.__value_.__l.__data_);
      goto LABEL_125;
    }
LABEL_136:
    operator delete(v92.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_137;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_51;
  }
  uint64_t v24 = a1 + 40;
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t v26 = a1 + 40;
  if (*(void *)(a1 + 8) != v25)
  {
    *(void *)(a1 + 24) = v25 + 40;
    uint64_t v26 = v25;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v26;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v26 + 8));
  *(void *)(a1 + 136) = *(void *)(v26 + 32);
  v109.i64[1] = sub_B7FE4(a1, 0);
  if (!v109.i64[1])
  {
    LODWORD(v23) = 1;
    goto LABEL_91;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_51;
  }
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = a1 + 40;
  if (*(void *)(a1 + 8) != v27)
  {
    *(void *)(a1 + 24) = v27 + 40;
    uint64_t v28 = v27;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v28;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v28 + 8));
  *(void *)(a1 + 136) = *(void *)(v28 + 32);
  v110.i64[0] = sub_B7FE4(a1, 0);
  if (!v110.i64[0])
  {
    LODWORD(v23) = 2;
    goto LABEL_91;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_51;
  }
  uint64_t v29 = *(void *)(a1 + 24);
  uint64_t v30 = a1 + 40;
  if (*(void *)(a1 + 8) != v29)
  {
    *(void *)(a1 + 24) = v29 + 40;
    uint64_t v30 = v29;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v30;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v30 + 8));
  *(void *)(a1 + 136) = *(void *)(v30 + 32);
  v110.i64[1] = sub_B7FE4(a1, 0);
  if (!v110.i64[1])
  {
    LODWORD(v23) = 3;
    goto LABEL_91;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_51;
  }
  uint64_t v31 = *(void *)(a1 + 24);
  uint64_t v32 = a1 + 40;
  if (*(void *)(a1 + 8) != v31)
  {
    *(void *)(a1 + 24) = v31 + 40;
    uint64_t v32 = v31;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v32;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v32 + 8));
  *(void *)(a1 + 136) = *(void *)(v32 + 32);
  *(void *)&long long v111 = sub_B7FE4(a1, 0);
  if (!(void)v111)
  {
    LODWORD(v23) = 4;
    goto LABEL_91;
  }
  if (*(_DWORD *)(a1 + 104) != 44)
  {
LABEL_51:
    std::operator+<char>();
    std::string::size_type v39 = std::string::append(&v94, "'");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    memset(&v92, 0, sizeof(v92));
    std::string::push_back(&v92, 48);
    std::string::push_back(&v92, 57);
    std::string::push_back(&v92, 49);
    std::string::push_back(&v92, 49);
    std::string::push_back(&v92, 50);
    std::string::size_type v41 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v42 = &v92;
    }
    else {
      long long v42 = (std::string *)v92.__r_.__value_.__r.__words[0];
    }
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v41 = v92.__r_.__value_.__l.__size_;
    }
    if (v41)
    {
      std::string::value_type v43 = (std::string *)((char *)v42 + v41 - 1);
      if (v43 > v42)
      {
        uint64_t v44 = &v42->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v45 = *(v44 - 1);
          *(v44 - 1) = v43->__r_.__value_.__s.__data_[0];
          v43->__r_.__value_.__s.__data_[0] = v45;
          std::string::value_type v43 = (std::string *)((char *)v43 - 1);
          BOOL v15 = v44++ >= (char *)v43;
        }
        while (!v15);
      }
    }
    uint64_t v46 = std::string::insert(&v92, 0, "exprtk.hpp:");
    long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v93.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v97.__r_.__value_.__s + 23) = 0;
    v97.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v98 = -1;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long __p = 0u;
    long long v104 = 0u;
    uint64_t v105 = 0;
    int v99 = 1;
    int v96 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v97, (const std::string *)(a1 + 112));
    uint64_t v98 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v100, &__str);
    std::string::operator=((std::string *)((char *)&v101 + 8), &v93);
    uint64_t v48 = *(void *)(a1 + 568);
    uint64_t v49 = *(void *)(a1 + 560);
    uint64_t v50 = 30 * ((v48 - v49) >> 3) - 1;
    if (v48 == v49) {
      uint64_t v50 = 0;
    }
    if (v50 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v49 = *(void *)(a1 + 560);
      uint64_t v48 = *(void *)(a1 + 568);
    }
    if (v48 == v49)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v51 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v49 + 8 * (v51 / 0x1E)) + 136 * (v51 % 0x1E);
    }
    goto LABEL_69;
  }
  uint64_t v33 = *(void *)(a1 + 24);
  uint64_t v34 = a1 + 40;
  if (*(void *)(a1 + 8) != v33)
  {
    *(void *)(a1 + 24) = v33 + 40;
    uint64_t v34 = v33;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v34;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v34 + 8));
  *(void *)(a1 + 136) = *(void *)(v34 + 32);
  *((void *)&v111 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v111 + 1))
  {
    LODWORD(v23) = 5;
    goto LABEL_91;
  }
  if (*(_DWORD *)(a1 + 104) == 41)
  {
    uint64_t v35 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 8) != v35)
    {
      *(void *)(a1 + 24) = v35 + 40;
      uint64_t v24 = v35;
    }
    *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
    std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
    *(void *)(a1 + 136) = *(void *)(v24 + 32);
    uint64_t v36 = sub_2094BC(a1 + 344, a2, &v109);
    uint64_t v37 = v36;
    if (v36)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v36 + 32))(v36) == 2)
      {
        uint64_t v38 = v37;
LABEL_162:
        v106[0] = 0;
        goto LABEL_126;
      }
      uint64_t v38 = 0;
      if (vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v109), (int32x4_t)vceqzq_s64(v110))))) {
        goto LABEL_162;
      }
      if (!(void)v111) {
        goto LABEL_162;
      }
      if (!*((void *)&v111 + 1)) {
        goto LABEL_162;
      }
      if (*(void *)(a2 + 32) == 6)
      {
        uint64_t v38 = v37;
        if (sub_209C0C(v37, &v109)) {
          goto LABEL_162;
        }
      }
      sub_20985C(*(void *)(a1 + 352), &v109);
    }
    uint64_t v38 = 0;
    goto LABEL_162;
  }
  std::operator+<char>();
  std::string::size_type v76 = std::string::append(&v94, "'");
  long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  memset(&v92, 0, sizeof(v92));
  std::string::push_back(&v92, 51);
  std::string::push_back(&v92, 48);
  std::string::push_back(&v92, 50);
  std::string::push_back(&v92, 49);
  std::string::push_back(&v92, 50);
  std::string::size_type v78 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v79 = &v92;
  }
  else {
    uint64_t v79 = (std::string *)v92.__r_.__value_.__r.__words[0];
  }
  if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v78 = v92.__r_.__value_.__l.__size_;
  }
  if (v78)
  {
    std::string::value_type v80 = (std::string *)((char *)v79 + v78 - 1);
    if (v80 > v79)
    {
      uint64_t v81 = &v79->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v82 = *(v81 - 1);
        *(v81 - 1) = v80->__r_.__value_.__s.__data_[0];
        v80->__r_.__value_.__s.__data_[0] = v82;
        std::string::value_type v80 = (std::string *)((char *)v80 - 1);
        BOOL v15 = v81++ >= (char *)v80;
      }
      while (!v15);
    }
  }
  uint64_t v83 = std::string::insert(&v92, 0, "exprtk.hpp:");
  long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
  v93.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v84;
  v83->__r_.__value_.__l.__size_ = 0;
  v83->__r_.__value_.__r.__words[2] = 0;
  v83->__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&v97.__r_.__value_.__s + 23) = 0;
  v97.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v98 = -1;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v102 = 0u;
  long long __p = 0u;
  long long v104 = 0u;
  uint64_t v105 = 0;
  int v99 = 1;
  int v96 = *(_DWORD *)(a1 + 104);
  std::string::operator=(&v97, (const std::string *)(a1 + 112));
  uint64_t v98 = *(void *)(a1 + 136);
  std::string::operator=((std::string *)&v100, &__str);
  std::string::operator=((std::string *)((char *)&v101 + 8), &v93);
  uint64_t v85 = *(void *)(a1 + 568);
  uint64_t v86 = *(void *)(a1 + 560);
  uint64_t v87 = 30 * ((v85 - v86) >> 3) - 1;
  if (v85 == v86) {
    uint64_t v87 = 0;
  }
  if (v87 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
  {
    sub_B4B88(a1 + 552);
    uint64_t v86 = *(void *)(a1 + 560);
    uint64_t v85 = *(void *)(a1 + 568);
  }
  if (v85 == v86)
  {
    uint64_t v22 = 0;
  }
  else
  {
    unint64_t v88 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
    uint64_t v22 = *(void *)(v86 + 8 * (v88 / 0x1E)) + 136 * (v88 % 0x1E);
  }
LABEL_69:
  sub_B5158(v22, (uint64_t)&v96);
  ++*(void *)(a1 + 592);
  if (SBYTE7(v104) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v102) & 0x80000000) == 0)
    {
LABEL_71:
      if ((SBYTE7(v101) & 0x80000000) == 0) {
        goto LABEL_72;
      }
      goto LABEL_80;
    }
  }
  else if ((SHIBYTE(v102) & 0x80000000) == 0)
  {
    goto LABEL_71;
  }
  operator delete(*((void **)&v101 + 1));
  if ((SBYTE7(v101) & 0x80000000) == 0)
  {
LABEL_72:
    if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_81;
  }
LABEL_80:
  operator delete((void *)v100);
  if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_73:
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_82;
  }
LABEL_81:
  operator delete(v97.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_74:
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_83;
  }
LABEL_82:
  operator delete(v93.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_75:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_84;
  }
LABEL_83:
  operator delete(v92.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_76:
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_85;
    }
    goto LABEL_125;
  }
LABEL_84:
  operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
LABEL_85:
  }
    operator delete(v94.__r_.__value_.__l.__data_);
LABEL_125:
  uint64_t v38 = 0;
LABEL_126:
  sub_20A3E0((uint64_t)v106);
  return v38;
}

void sub_1F7514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a54 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_5:
    sub_20A3E0(v56 - 152);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(a42);
  goto LABEL_5;
}

uint64_t sub_1F7808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v114 = 0;
  int64x2_t v112 = 0u;
  long long v113 = 0u;
  int64x2_t v111 = 0u;
  v108[0] = 1;
  uint64_t v109 = a1;
  int64x2_t v110 = &v111;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v96, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v94, 0, sizeof(v94));
    std::string::push_back(&v94, 51);
    std::string::push_back(&v94, 54);
    std::string::push_back(&v94, 49);
    std::string::push_back(&v94, 49);
    std::string::push_back(&v94, 50);
    std::string::size_type size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v94;
    }
    else {
      uint64_t v11 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v94.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v94, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v99.__r_.__value_.__s + 23) = 0;
    v99.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v100 = -1;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long __p = 0u;
    long long v106 = 0u;
    uint64_t v107 = 0;
    int v101 = 1;
    int v98 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v99, (const std::string *)(a1 + 112));
    uint64_t v100 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v102, &__str);
    std::string::operator=((std::string *)((char *)&v103 + 8), &v95);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
    goto LABEL_73;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v23 = sub_B7FE4(a1, 0);
  v111.i64[0] = v23;
  if (!v23)
  {
LABEL_96:
    sub_B1D70(v23, (unint64_t)&v93);
    int v54 = std::string::insert(&v93, 0, "ERR019 - Failed to parse argument ");
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v94.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    uint64_t v56 = std::string::append(&v94, " for function: '");
    long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    int v58 = *(char *)(a3 + 23);
    if (v58 >= 0) {
      std::string::size_type v59 = (const std::string::value_type *)a3;
    }
    else {
      std::string::size_type v59 = *(const std::string::value_type **)a3;
    }
    if (v58 >= 0) {
      std::string::size_type v60 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v60 = *(void *)(a3 + 8);
    }
    std::string::size_type v61 = std::string::append(&v95, v59, v60);
    long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v63 = std::string::append(&v96, "'");
    long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    memset(&v91, 0, sizeof(v91));
    std::string::push_back(&v91, 56);
    std::string::push_back(&v91, 55);
    std::string::push_back(&v91, 49);
    std::string::push_back(&v91, 49);
    std::string::push_back(&v91, 50);
    std::string::size_type v65 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
    if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v66 = &v91;
    }
    else {
      uint64_t v66 = (std::string *)v91.__r_.__value_.__r.__words[0];
    }
    if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v65 = v91.__r_.__value_.__l.__size_;
    }
    if (v65)
    {
      std::string::value_type v67 = (std::string *)((char *)v66 + v65 - 1);
      if (v67 > v66)
      {
        uint64_t v68 = &v66->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v69 = *(v68 - 1);
          *(v68 - 1) = v67->__r_.__value_.__s.__data_[0];
          v67->__r_.__value_.__s.__data_[0] = v69;
          std::string::value_type v67 = (std::string *)((char *)v67 - 1);
          BOOL v15 = v68++ >= (char *)v67;
        }
        while (!v15);
      }
    }
    uint64_t v70 = std::string::insert(&v91, 0, "exprtk.hpp:");
    long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    v92.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v99.__r_.__value_.__s + 23) = 0;
    v99.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v100 = -1;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long __p = 0u;
    long long v106 = 0u;
    uint64_t v107 = 0;
    int v101 = 1;
    int v98 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v99, (const std::string *)(a1 + 112));
    uint64_t v100 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v102, &__str);
    std::string::operator=((std::string *)((char *)&v103 + 8), &v92);
    uint64_t v72 = *(void *)(a1 + 568);
    uint64_t v73 = *(void *)(a1 + 560);
    uint64_t v74 = 30 * ((v72 - v73) >> 3) - 1;
    if (v72 == v73) {
      uint64_t v74 = 0;
    }
    if (v74 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v73 = *(void *)(a1 + 560);
      uint64_t v72 = *(void *)(a1 + 568);
    }
    if (v72 == v73)
    {
      uint64_t v76 = 0;
    }
    else
    {
      unint64_t v75 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v76 = *(void *)(v73 + 8 * (v75 / 0x1E)) + 136 * (v75 % 0x1E);
    }
    sub_B5158(v76, (uint64_t)&v98);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v106) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v104) & 0x80000000) == 0)
      {
LABEL_121:
        if ((SBYTE7(v103) & 0x80000000) == 0) {
          goto LABEL_122;
        }
        goto LABEL_134;
      }
    }
    else if ((SHIBYTE(v104) & 0x80000000) == 0)
    {
      goto LABEL_121;
    }
    operator delete(*((void **)&v103 + 1));
    if ((SBYTE7(v103) & 0x80000000) == 0)
    {
LABEL_122:
      if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_123;
      }
      goto LABEL_135;
    }
LABEL_134:
    operator delete((void *)v102);
    if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_123:
      if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_124;
      }
      goto LABEL_136;
    }
LABEL_135:
    operator delete(v99.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_124:
      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_125;
      }
      goto LABEL_137;
    }
LABEL_136:
    operator delete(v92.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_125:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_126;
      }
      goto LABEL_138;
    }
LABEL_137:
    operator delete(v91.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_126:
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_127;
      }
      goto LABEL_139;
    }
LABEL_138:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_127:
      if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_128;
      }
      goto LABEL_140;
    }
LABEL_139:
    operator delete(v96.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_128:
      if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_129;
      }
      goto LABEL_141;
    }
LABEL_140:
    operator delete(v95.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_129:
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_130;
      }
LABEL_142:
      operator delete(v93.__r_.__value_.__l.__data_);
      goto LABEL_130;
    }
LABEL_141:
    operator delete(v94.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_130;
    }
    goto LABEL_142;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_55;
  }
  uint64_t v24 = a1 + 40;
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t v26 = a1 + 40;
  if (*(void *)(a1 + 8) != v25)
  {
    *(void *)(a1 + 24) = v25 + 40;
    uint64_t v26 = v25;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v26;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v26 + 8));
  *(void *)(a1 + 136) = *(void *)(v26 + 32);
  v111.i64[1] = sub_B7FE4(a1, 0);
  if (!v111.i64[1])
  {
    LODWORD(v23) = 1;
    goto LABEL_96;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_55;
  }
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = a1 + 40;
  if (*(void *)(a1 + 8) != v27)
  {
    *(void *)(a1 + 24) = v27 + 40;
    uint64_t v28 = v27;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v28;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v28 + 8));
  *(void *)(a1 + 136) = *(void *)(v28 + 32);
  v112.i64[0] = sub_B7FE4(a1, 0);
  if (!v112.i64[0])
  {
    LODWORD(v23) = 2;
    goto LABEL_96;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_55;
  }
  uint64_t v29 = *(void *)(a1 + 24);
  uint64_t v30 = a1 + 40;
  if (*(void *)(a1 + 8) != v29)
  {
    *(void *)(a1 + 24) = v29 + 40;
    uint64_t v30 = v29;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v30;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v30 + 8));
  *(void *)(a1 + 136) = *(void *)(v30 + 32);
  v112.i64[1] = sub_B7FE4(a1, 0);
  if (!v112.i64[1])
  {
    LODWORD(v23) = 3;
    goto LABEL_96;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_55;
  }
  uint64_t v31 = *(void *)(a1 + 24);
  uint64_t v32 = a1 + 40;
  if (*(void *)(a1 + 8) != v31)
  {
    *(void *)(a1 + 24) = v31 + 40;
    uint64_t v32 = v31;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v32;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v32 + 8));
  *(void *)(a1 + 136) = *(void *)(v32 + 32);
  *(void *)&long long v113 = sub_B7FE4(a1, 0);
  if (!(void)v113)
  {
    LODWORD(v23) = 4;
    goto LABEL_96;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_55;
  }
  uint64_t v33 = *(void *)(a1 + 24);
  uint64_t v34 = a1 + 40;
  if (*(void *)(a1 + 8) != v33)
  {
    *(void *)(a1 + 24) = v33 + 40;
    uint64_t v34 = v33;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v34;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v34 + 8));
  *(void *)(a1 + 136) = *(void *)(v34 + 32);
  *((void *)&v113 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v113 + 1))
  {
    LODWORD(v23) = 5;
    goto LABEL_96;
  }
  if (*(_DWORD *)(a1 + 104) != 44)
  {
LABEL_55:
    std::operator+<char>();
    std::string::size_type v41 = std::string::append(&v96, "'");
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    memset(&v94, 0, sizeof(v94));
    std::string::push_back(&v94, 48);
    std::string::push_back(&v94, 57);
    std::string::push_back(&v94, 49);
    std::string::push_back(&v94, 49);
    std::string::push_back(&v94, 50);
    std::string::size_type v43 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v44 = &v94;
    }
    else {
      uint64_t v44 = (std::string *)v94.__r_.__value_.__r.__words[0];
    }
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v43 = v94.__r_.__value_.__l.__size_;
    }
    if (v43)
    {
      std::string::value_type v45 = (std::string *)((char *)v44 + v43 - 1);
      if (v45 > v44)
      {
        uint64_t v46 = &v44->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v47 = *(v46 - 1);
          *(v46 - 1) = v45->__r_.__value_.__s.__data_[0];
          v45->__r_.__value_.__s.__data_[0] = v47;
          std::string::value_type v45 = (std::string *)((char *)v45 - 1);
          BOOL v15 = v46++ >= (char *)v45;
        }
        while (!v15);
      }
    }
    uint64_t v48 = std::string::insert(&v94, 0, "exprtk.hpp:");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v95.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v99.__r_.__value_.__s + 23) = 0;
    v99.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v100 = -1;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long __p = 0u;
    long long v106 = 0u;
    uint64_t v107 = 0;
    int v101 = 1;
    int v98 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v99, (const std::string *)(a1 + 112));
    uint64_t v100 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v102, &__str);
    std::string::operator=((std::string *)((char *)&v103 + 8), &v95);
    uint64_t v50 = *(void *)(a1 + 568);
    uint64_t v51 = *(void *)(a1 + 560);
    uint64_t v52 = 30 * ((v50 - v51) >> 3) - 1;
    if (v50 == v51) {
      uint64_t v52 = 0;
    }
    if (v52 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v51 = *(void *)(a1 + 560);
      uint64_t v50 = *(void *)(a1 + 568);
    }
    if (v50 == v51)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v53 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v51 + 8 * (v53 / 0x1E)) + 136 * (v53 % 0x1E);
    }
    goto LABEL_73;
  }
  uint64_t v35 = *(void *)(a1 + 24);
  uint64_t v36 = a1 + 40;
  if (*(void *)(a1 + 8) != v35)
  {
    *(void *)(a1 + 24) = v35 + 40;
    uint64_t v36 = v35;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v36;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v36 + 8));
  *(void *)(a1 + 136) = *(void *)(v36 + 32);
  uint64_t v114 = sub_B7FE4(a1, 0);
  if (!v114)
  {
    LODWORD(v23) = 6;
    goto LABEL_96;
  }
  if (*(_DWORD *)(a1 + 104) == 41)
  {
    uint64_t v37 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 8) != v37)
    {
      *(void *)(a1 + 24) = v37 + 40;
      uint64_t v24 = v37;
    }
    *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
    std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
    *(void *)(a1 + 136) = *(void *)(v24 + 32);
    uint64_t v38 = sub_20A7B8(a1 + 344, a2, &v111);
    uint64_t v39 = v38;
    if (v38)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v38 + 32))(v38) == 2)
      {
        uint64_t v40 = v39;
LABEL_168:
        v108[0] = 0;
        goto LABEL_131;
      }
      uint64_t v40 = 0;
      if (vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vceqzq_s64(v111), (int32x4_t)vceqzq_s64(v112))))) {
        goto LABEL_168;
      }
      if (!(void)v113) {
        goto LABEL_168;
      }
      if (!*((void *)&v113 + 1)) {
        goto LABEL_168;
      }
      if (!v114) {
        goto LABEL_168;
      }
      if (*(void *)(a2 + 32) == 7)
      {
        uint64_t v40 = v39;
        if (sub_20AE88(v39, &v111)) {
          goto LABEL_168;
        }
      }
      sub_20AA40(*(void *)(a1 + 352), &v111);
    }
    uint64_t v40 = 0;
    goto LABEL_168;
  }
  std::operator+<char>();
  std::string::size_type v78 = std::string::append(&v96, "'");
  long long v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  memset(&v94, 0, sizeof(v94));
  std::string::push_back(&v94, 51);
  std::string::push_back(&v94, 48);
  std::string::push_back(&v94, 50);
  std::string::push_back(&v94, 49);
  std::string::push_back(&v94, 50);
  std::string::size_type v80 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v81 = &v94;
  }
  else {
    uint64_t v81 = (std::string *)v94.__r_.__value_.__r.__words[0];
  }
  if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v80 = v94.__r_.__value_.__l.__size_;
  }
  if (v80)
  {
    std::string::value_type v82 = (std::string *)((char *)v81 + v80 - 1);
    if (v82 > v81)
    {
      uint64_t v83 = &v81->__r_.__value_.__s.__data_[1];
      do
      {
        std::string::value_type v84 = *(v83 - 1);
        *(v83 - 1) = v82->__r_.__value_.__s.__data_[0];
        v82->__r_.__value_.__s.__data_[0] = v84;
        std::string::value_type v82 = (std::string *)((char *)v82 - 1);
        BOOL v15 = v83++ >= (char *)v82;
      }
      while (!v15);
    }
  }
  uint64_t v85 = std::string::insert(&v94, 0, "exprtk.hpp:");
  long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
  v95.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v86;
  v85->__r_.__value_.__l.__size_ = 0;
  v85->__r_.__value_.__r.__words[2] = 0;
  v85->__r_.__value_.__r.__words[0] = 0;
  *((unsigned char *)&v99.__r_.__value_.__s + 23) = 0;
  v99.__r_.__value_.__s.__data_[0] = 0;
  uint64_t v100 = -1;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  long long __p = 0u;
  long long v106 = 0u;
  uint64_t v107 = 0;
  int v101 = 1;
  int v98 = *(_DWORD *)(a1 + 104);
  std::string::operator=(&v99, (const std::string *)(a1 + 112));
  uint64_t v100 = *(void *)(a1 + 136);
  std::string::operator=((std::string *)&v102, &__str);
  std::string::operator=((std::string *)((char *)&v103 + 8), &v95);
  uint64_t v87 = *(void *)(a1 + 568);
  uint64_t v88 = *(void *)(a1 + 560);
  uint64_t v89 = 30 * ((v87 - v88) >> 3) - 1;
  if (v87 == v88) {
    uint64_t v89 = 0;
  }
  if (v89 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
  {
    sub_B4B88(a1 + 552);
    uint64_t v88 = *(void *)(a1 + 560);
    uint64_t v87 = *(void *)(a1 + 568);
  }
  if (v87 == v88)
  {
    uint64_t v22 = 0;
  }
  else
  {
    unint64_t v90 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
    uint64_t v22 = *(void *)(v88 + 8 * (v90 / 0x1E)) + 136 * (v90 % 0x1E);
  }
LABEL_73:
  sub_B5158(v22, (uint64_t)&v98);
  ++*(void *)(a1 + 592);
  if (SBYTE7(v106) < 0)
  {
    operator delete((void *)__p);
    if ((SHIBYTE(v104) & 0x80000000) == 0)
    {
LABEL_75:
      if ((SBYTE7(v103) & 0x80000000) == 0) {
        goto LABEL_76;
      }
      goto LABEL_84;
    }
  }
  else if ((SHIBYTE(v104) & 0x80000000) == 0)
  {
    goto LABEL_75;
  }
  operator delete(*((void **)&v103 + 1));
  if ((SBYTE7(v103) & 0x80000000) == 0)
  {
LABEL_76:
    if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_85;
  }
LABEL_84:
  operator delete((void *)v102);
  if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_77:
    if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_86;
  }
LABEL_85:
  operator delete(v99.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_78:
    if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_87;
  }
LABEL_86:
  operator delete(v95.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v94.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_79:
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_88;
  }
LABEL_87:
  operator delete(v94.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_80:
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_89;
    }
    goto LABEL_130;
  }
LABEL_88:
  operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
LABEL_89:
  }
    operator delete(v96.__r_.__value_.__l.__data_);
LABEL_130:
  uint64_t v40 = 0;
LABEL_131:
  sub_20B8FC((uint64_t)v108);
  return v40;
}

void sub_1F86F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a54 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  operator delete(a49);
  if ((a47 & 0x80000000) == 0)
  {
LABEL_5:
    sub_20B8FC(v56 - 152);
    _Unwind_Resume(a1);
  }
LABEL_4:
  operator delete(a42);
  goto LABEL_5;
}

uint64_t sub_1F89E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v117 = 0u;
  long long v118 = 0u;
  int64x2_t v115 = 0u;
  long long v116 = 0u;
  char v112 = 1;
  uint64_t v113 = a1;
  uint64_t v114 = &v115;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v100, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v98, 0, sizeof(v98));
    std::string::push_back(&v98, 51);
    std::string::push_back(&v98, 54);
    std::string::push_back(&v98, 49);
    std::string::push_back(&v98, 49);
    std::string::push_back(&v98, 50);
    std::string::size_type size = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v98;
    }
    else {
      uint64_t v11 = (std::string *)v98.__r_.__value_.__r.__words[0];
    }
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v98.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v98, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v103.__r_.__value_.__s + 23) = 0;
    v103.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v104 = -1;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long __p = 0u;
    long long v110 = 0u;
    uint64_t v111 = 0;
    int v105 = 1;
    int v102 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v103, (const std::string *)(a1 + 112));
    uint64_t v104 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v106, &__str);
    std::string::operator=((std::string *)((char *)&v107 + 8), &v99);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
LABEL_75:
    sub_B5158(v22, (uint64_t)&v102);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v110) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v108) & 0x80000000) == 0)
      {
LABEL_77:
        if ((SBYTE7(v107) & 0x80000000) == 0) {
          goto LABEL_78;
        }
        goto LABEL_86;
      }
    }
    else if ((SHIBYTE(v108) & 0x80000000) == 0)
    {
      goto LABEL_77;
    }
    operator delete(*((void **)&v107 + 1));
    if ((SBYTE7(v107) & 0x80000000) == 0)
    {
LABEL_78:
      if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_79;
      }
      goto LABEL_87;
    }
LABEL_86:
    operator delete((void *)v106);
    if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_79:
      if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_80;
      }
      goto LABEL_88;
    }
LABEL_87:
    operator delete(v103.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_80:
      if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_81;
      }
      goto LABEL_89;
    }
LABEL_88:
    operator delete(v99.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_81:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_82;
      }
      goto LABEL_90;
    }
LABEL_89:
    operator delete(v98.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_82:
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_91:
        operator delete(v100.__r_.__value_.__l.__data_);
        if (!v112) {
          return 0;
        }
        goto LABEL_135;
      }
LABEL_134:
      if (v112)
      {
LABEL_135:
        uint64_t v77 = 0;
        std::string::size_type v78 = v114;
        do
        {
          uint64_t v79 = v78->i64[v77];
          if (!v79 || (*(unsigned int (**)(uint64_t))(*(void *)v79 + 32))(v79) == 17) {
            goto LABEL_137;
          }
          uint64_t v80 = v78->i64[v77];
          if (v80)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v80 + 32))(v80) == 18) {
              goto LABEL_137;
            }
            uint64_t v81 = v78->i64[v77];
            if (v81) {
              (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
            }
          }
          v78->i64[v77] = 0;
LABEL_137:
          ++v77;
        }
        while (v77 != 8);
      }
      return 0;
    }
LABEL_90:
    operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_91;
    }
    goto LABEL_134;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v23 = sub_B7FE4(a1, 0);
  v115.i64[0] = v23;
  if (!v23)
  {
LABEL_100:
    sub_B1D70(v23, (unint64_t)&v97);
    int v54 = std::string::insert(&v97, 0, "ERR019 - Failed to parse argument ");
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    uint64_t v56 = std::string::append(&v98, " for function: '");
    long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    int v58 = *(char *)(a3 + 23);
    if (v58 >= 0) {
      std::string::size_type v59 = (const std::string::value_type *)a3;
    }
    else {
      std::string::size_type v59 = *(const std::string::value_type **)a3;
    }
    if (v58 >= 0) {
      std::string::size_type v60 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v60 = *(void *)(a3 + 8);
    }
    std::string::size_type v61 = std::string::append(&v99, v59, v60);
    long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v100.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v63 = std::string::append(&v100, "'");
    long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    memset(&v95, 0, sizeof(v95));
    std::string::push_back(&v95, 56);
    std::string::push_back(&v95, 55);
    std::string::push_back(&v95, 49);
    std::string::push_back(&v95, 49);
    std::string::push_back(&v95, 50);
    std::string::size_type v65 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
    if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v66 = &v95;
    }
    else {
      uint64_t v66 = (std::string *)v95.__r_.__value_.__r.__words[0];
    }
    if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v65 = v95.__r_.__value_.__l.__size_;
    }
    if (v65)
    {
      std::string::value_type v67 = (std::string *)((char *)v66 + v65 - 1);
      if (v67 > v66)
      {
        uint64_t v68 = &v66->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v69 = *(v68 - 1);
          *(v68 - 1) = v67->__r_.__value_.__s.__data_[0];
          v67->__r_.__value_.__s.__data_[0] = v69;
          std::string::value_type v67 = (std::string *)((char *)v67 - 1);
          BOOL v15 = v68++ >= (char *)v67;
        }
        while (!v15);
      }
    }
    uint64_t v70 = std::string::insert(&v95, 0, "exprtk.hpp:");
    long long v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v103.__r_.__value_.__s + 23) = 0;
    v103.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v104 = -1;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long __p = 0u;
    long long v110 = 0u;
    uint64_t v111 = 0;
    int v105 = 1;
    int v102 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v103, (const std::string *)(a1 + 112));
    uint64_t v104 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v106, &__str);
    std::string::operator=((std::string *)((char *)&v107 + 8), &v96);
    uint64_t v72 = *(void *)(a1 + 568);
    uint64_t v73 = *(void *)(a1 + 560);
    uint64_t v74 = 30 * ((v72 - v73) >> 3) - 1;
    if (v72 == v73) {
      uint64_t v74 = 0;
    }
    if (v74 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v73 = *(void *)(a1 + 560);
      uint64_t v72 = *(void *)(a1 + 568);
    }
    if (v72 == v73)
    {
      uint64_t v76 = 0;
    }
    else
    {
      unint64_t v75 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v76 = *(void *)(v73 + 8 * (v75 / 0x1E)) + 136 * (v75 % 0x1E);
    }
    sub_B5158(v76, (uint64_t)&v102);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v110) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v108) & 0x80000000) == 0)
      {
LABEL_125:
        if ((SBYTE7(v107) & 0x80000000) == 0) {
          goto LABEL_126;
        }
        goto LABEL_146;
      }
    }
    else if ((SHIBYTE(v108) & 0x80000000) == 0)
    {
      goto LABEL_125;
    }
    operator delete(*((void **)&v107 + 1));
    if ((SBYTE7(v107) & 0x80000000) == 0)
    {
LABEL_126:
      if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_127;
      }
      goto LABEL_147;
    }
LABEL_146:
    operator delete((void *)v106);
    if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_127:
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_128;
      }
      goto LABEL_148;
    }
LABEL_147:
    operator delete(v103.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_128:
      if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_129;
      }
      goto LABEL_149;
    }
LABEL_148:
    operator delete(v96.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v95.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_129:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_130;
      }
      goto LABEL_150;
    }
LABEL_149:
    operator delete(v95.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_130:
      if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_131;
      }
      goto LABEL_151;
    }
LABEL_150:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_131:
      if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_132;
      }
      goto LABEL_152;
    }
LABEL_151:
    operator delete(v100.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_132:
      if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_133;
      }
      goto LABEL_153;
    }
LABEL_152:
    operator delete(v99.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_133:
      if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_134;
      }
      goto LABEL_154;
    }
LABEL_153:
    operator delete(v98.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_134;
    }
LABEL_154:
    operator delete(v97.__r_.__value_.__l.__data_);
    if (v112) {
      goto LABEL_135;
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_57;
  }
  uint64_t v24 = a1 + 40;
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t v26 = a1 + 40;
  if (*(void *)(a1 + 8) != v25)
  {
    *(void *)(a1 + 24) = v25 + 40;
    uint64_t v26 = v25;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v26;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v26 + 8));
  *(void *)(a1 + 136) = *(void *)(v26 + 32);
  v115.i64[1] = sub_B7FE4(a1, 0);
  if (!v115.i64[1])
  {
    LODWORD(v23) = 1;
    goto LABEL_100;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_57;
  }
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = a1 + 40;
  if (*(void *)(a1 + 8) != v27)
  {
    *(void *)(a1 + 24) = v27 + 40;
    uint64_t v28 = v27;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v28;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v28 + 8));
  *(void *)(a1 + 136) = *(void *)(v28 + 32);
  *(void *)&long long v116 = sub_B7FE4(a1, 0);
  if (!(void)v116)
  {
    LODWORD(v23) = 2;
    goto LABEL_100;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_57;
  }
  uint64_t v29 = *(void *)(a1 + 24);
  uint64_t v30 = a1 + 40;
  if (*(void *)(a1 + 8) != v29)
  {
    *(void *)(a1 + 24) = v29 + 40;
    uint64_t v30 = v29;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v30;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v30 + 8));
  *(void *)(a1 + 136) = *(void *)(v30 + 32);
  *((void *)&v116 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v116 + 1))
  {
    LODWORD(v23) = 3;
    goto LABEL_100;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_57;
  }
  uint64_t v31 = *(void *)(a1 + 24);
  uint64_t v32 = a1 + 40;
  if (*(void *)(a1 + 8) != v31)
  {
    *(void *)(a1 + 24) = v31 + 40;
    uint64_t v32 = v31;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v32;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v32 + 8));
  *(void *)(a1 + 136) = *(void *)(v32 + 32);
  *(void *)&long long v117 = sub_B7FE4(a1, 0);
  if (!(void)v117)
  {
    LODWORD(v23) = 4;
    goto LABEL_100;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_57;
  }
  uint64_t v33 = *(void *)(a1 + 24);
  uint64_t v34 = a1 + 40;
  if (*(void *)(a1 + 8) != v33)
  {
    *(void *)(a1 + 24) = v33 + 40;
    uint64_t v34 = v33;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v34;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v34 + 8));
  *(void *)(a1 + 136) = *(void *)(v34 + 32);
  *((void *)&v117 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v117 + 1))
  {
    LODWORD(v23) = 5;
    goto LABEL_100;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_57;
  }
  uint64_t v35 = *(void *)(a1 + 24);
  uint64_t v36 = a1 + 40;
  if (*(void *)(a1 + 8) != v35)
  {
    *(void *)(a1 + 24) = v35 + 40;
    uint64_t v36 = v35;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v36;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v36 + 8));
  *(void *)(a1 + 136) = *(void *)(v36 + 32);
  *(void *)&long long v118 = sub_B7FE4(a1, 0);
  if (!(void)v118)
  {
    LODWORD(v23) = 6;
    goto LABEL_100;
  }
  if (*(_DWORD *)(a1 + 104) != 44)
  {
LABEL_57:
    std::operator+<char>();
    std::string::size_type v41 = std::string::append(&v100, "'");
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    memset(&v98, 0, sizeof(v98));
    std::string::push_back(&v98, 48);
    std::string::push_back(&v98, 57);
    std::string::push_back(&v98, 49);
    std::string::push_back(&v98, 49);
    std::string::push_back(&v98, 50);
    std::string::size_type v43 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v44 = &v98;
    }
    else {
      uint64_t v44 = (std::string *)v98.__r_.__value_.__r.__words[0];
    }
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v43 = v98.__r_.__value_.__l.__size_;
    }
    if (v43)
    {
      std::string::value_type v45 = (std::string *)((char *)v44 + v43 - 1);
      if (v45 > v44)
      {
        uint64_t v46 = &v44->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v47 = *(v46 - 1);
          *(v46 - 1) = v45->__r_.__value_.__s.__data_[0];
          v45->__r_.__value_.__s.__data_[0] = v47;
          std::string::value_type v45 = (std::string *)((char *)v45 - 1);
          BOOL v15 = v46++ >= (char *)v45;
        }
        while (!v15);
      }
    }
    uint64_t v48 = std::string::insert(&v98, 0, "exprtk.hpp:");
    long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v103.__r_.__value_.__s + 23) = 0;
    v103.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v104 = -1;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long __p = 0u;
    long long v110 = 0u;
    uint64_t v111 = 0;
    int v105 = 1;
    int v102 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v103, (const std::string *)(a1 + 112));
    uint64_t v104 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v106, &__str);
    std::string::operator=((std::string *)((char *)&v107 + 8), &v99);
    uint64_t v50 = *(void *)(a1 + 568);
    uint64_t v51 = *(void *)(a1 + 560);
    uint64_t v52 = 30 * ((v50 - v51) >> 3) - 1;
    if (v50 == v51) {
      uint64_t v52 = 0;
    }
    if (v52 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v51 = *(void *)(a1 + 560);
      uint64_t v50 = *(void *)(a1 + 568);
    }
    if (v50 == v51)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v53 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v51 + 8 * (v53 / 0x1E)) + 136 * (v53 % 0x1E);
    }
    goto LABEL_75;
  }
  uint64_t v37 = *(void *)(a1 + 24);
  uint64_t v38 = a1 + 40;
  if (*(void *)(a1 + 8) != v37)
  {
    *(void *)(a1 + 24) = v37 + 40;
    uint64_t v38 = v37;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v38;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v38 + 8));
  *(void *)(a1 + 136) = *(void *)(v38 + 32);
  *((void *)&v118 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v118 + 1))
  {
    LODWORD(v23) = 7;
    goto LABEL_100;
  }
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    std::operator+<char>();
    std::string::value_type v82 = std::string::append(&v100, "'");
    long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    memset(&v98, 0, sizeof(v98));
    std::string::push_back(&v98, 51);
    std::string::push_back(&v98, 48);
    std::string::push_back(&v98, 50);
    std::string::push_back(&v98, 49);
    std::string::push_back(&v98, 50);
    std::string::size_type v84 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v85 = &v98;
    }
    else {
      uint64_t v85 = (std::string *)v98.__r_.__value_.__r.__words[0];
    }
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v84 = v98.__r_.__value_.__l.__size_;
    }
    if (v84)
    {
      long long v86 = (std::string *)((char *)v85 + v84 - 1);
      if (v86 > v85)
      {
        uint64_t v87 = &v85->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v88 = *(v87 - 1);
          *(v87 - 1) = v86->__r_.__value_.__s.__data_[0];
          v86->__r_.__value_.__s.__data_[0] = v88;
          long long v86 = (std::string *)((char *)v86 - 1);
          BOOL v15 = v87++ >= (char *)v86;
        }
        while (!v15);
      }
    }
    uint64_t v89 = std::string::insert(&v98, 0, "exprtk.hpp:");
    long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v103.__r_.__value_.__s + 23) = 0;
    v103.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v104 = -1;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long __p = 0u;
    long long v110 = 0u;
    uint64_t v111 = 0;
    int v105 = 1;
    int v102 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v103, (const std::string *)(a1 + 112));
    uint64_t v104 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v106, &__str);
    std::string::operator=((std::string *)((char *)&v107 + 8), &v99);
    uint64_t v91 = *(void *)(a1 + 568);
    uint64_t v92 = *(void *)(a1 + 560);
    uint64_t v93 = 30 * ((v91 - v92) >> 3) - 1;
    if (v91 == v92) {
      uint64_t v93 = 0;
    }
    if (v93 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v92 = *(void *)(a1 + 560);
      uint64_t v91 = *(void *)(a1 + 568);
    }
    if (v91 == v92)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v94 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v92 + 8 * (v94 / 0x1E)) + 136 * (v94 % 0x1E);
    }
    goto LABEL_75;
  }
  uint64_t v39 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) != v39)
  {
    *(void *)(a1 + 24) = v39 + 40;
    uint64_t v24 = v39;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
  *(void *)(a1 + 136) = *(void *)(v24 + 32);
  return sub_20BD70(a1 + 344, a2, &v115);
}

void sub_1F9938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a54 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_7:
    operator delete(a42);
LABEL_8:
    sub_20BFAC(v56 - 168);
    _Unwind_Resume(a1);
  }
  operator delete(a49);
  if ((a47 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_1F9B9C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

uint64_t sub_1F9BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v121 = 0;
  long long v119 = 0u;
  long long v120 = 0u;
  int64x2_t v117 = 0u;
  long long v118 = 0u;
  char v114 = 1;
  uint64_t v115 = a1;
  long long v116 = &v117;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v102, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v100, 0, sizeof(v100));
    std::string::push_back(&v100, 51);
    std::string::push_back(&v100, 54);
    std::string::push_back(&v100, 49);
    std::string::push_back(&v100, 49);
    std::string::push_back(&v100, 50);
    std::string::size_type size = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v100;
    }
    else {
      uint64_t v11 = (std::string *)v100.__r_.__value_.__r.__words[0];
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v100.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v100, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v105.__r_.__value_.__s + 23) = 0;
    v105.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v106 = -1;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long __p = 0u;
    long long v112 = 0u;
    uint64_t v113 = 0;
    int v107 = 1;
    int v104 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v105, (const std::string *)(a1 + 112));
    uint64_t v106 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v108, &__str);
    std::string::operator=((std::string *)((char *)&v109 + 8), &v101);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
LABEL_79:
    sub_B5158(v22, (uint64_t)&v104);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v112) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v110) & 0x80000000) == 0)
      {
LABEL_81:
        if ((SBYTE7(v109) & 0x80000000) == 0) {
          goto LABEL_82;
        }
        goto LABEL_90;
      }
    }
    else if ((SHIBYTE(v110) & 0x80000000) == 0)
    {
      goto LABEL_81;
    }
    operator delete(*((void **)&v109 + 1));
    if ((SBYTE7(v109) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_83;
      }
      goto LABEL_91;
    }
LABEL_90:
    operator delete((void *)v108);
    if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_83:
      if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_84;
      }
      goto LABEL_92;
    }
LABEL_91:
    operator delete(v105.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_85;
      }
      goto LABEL_93;
    }
LABEL_92:
    operator delete(v101.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_85:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_86;
      }
      goto LABEL_94;
    }
LABEL_93:
    operator delete(v100.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_86:
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_95:
        operator delete(v102.__r_.__value_.__l.__data_);
        if (!v114) {
          return 0;
        }
        goto LABEL_140;
      }
LABEL_139:
      if (v114)
      {
LABEL_140:
        uint64_t v79 = 0;
        uint64_t v80 = v116;
        do
        {
          uint64_t v81 = v80->i64[v79];
          if (!v81 || (*(unsigned int (**)(uint64_t))(*(void *)v81 + 32))(v81) == 17) {
            goto LABEL_142;
          }
          uint64_t v82 = v80->i64[v79];
          if (v82)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v82 + 32))(v82) == 18) {
              goto LABEL_142;
            }
            uint64_t v83 = v80->i64[v79];
            if (v83) {
              (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
            }
          }
          v80->i64[v79] = 0;
LABEL_142:
          ++v79;
        }
        while (v79 != 9);
      }
      return 0;
    }
LABEL_94:
    operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_95;
    }
    goto LABEL_139;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v23 = sub_B7FE4(a1, 0);
  v117.i64[0] = v23;
  if (!v23)
  {
LABEL_105:
    sub_B1D70(v23, (unint64_t)&v99);
    uint64_t v56 = std::string::insert(&v99, 0, "ERR019 - Failed to parse argument ");
    long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v100.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    int v58 = std::string::append(&v100, " for function: '");
    long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    int v60 = *(char *)(a3 + 23);
    if (v60 >= 0) {
      std::string::size_type v61 = (const std::string::value_type *)a3;
    }
    else {
      std::string::size_type v61 = *(const std::string::value_type **)a3;
    }
    if (v60 >= 0) {
      std::string::size_type v62 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v62 = *(void *)(a3 + 8);
    }
    std::string::size_type v63 = std::string::append(&v101, v61, v62);
    long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v102.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v65 = std::string::append(&v102, "'");
    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    memset(&v97, 0, sizeof(v97));
    std::string::push_back(&v97, 56);
    std::string::push_back(&v97, 55);
    std::string::push_back(&v97, 49);
    std::string::push_back(&v97, 49);
    std::string::push_back(&v97, 50);
    std::string::size_type v67 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v68 = &v97;
    }
    else {
      uint64_t v68 = (std::string *)v97.__r_.__value_.__r.__words[0];
    }
    if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v67 = v97.__r_.__value_.__l.__size_;
    }
    if (v67)
    {
      std::string::value_type v69 = (std::string *)((char *)v68 + v67 - 1);
      if (v69 > v68)
      {
        uint64_t v70 = &v68->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v71 = *(v70 - 1);
          *(v70 - 1) = v69->__r_.__value_.__s.__data_[0];
          v69->__r_.__value_.__s.__data_[0] = v71;
          std::string::value_type v69 = (std::string *)((char *)v69 - 1);
          BOOL v15 = v70++ >= (char *)v69;
        }
        while (!v15);
      }
    }
    uint64_t v72 = std::string::insert(&v97, 0, "exprtk.hpp:");
    long long v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v105.__r_.__value_.__s + 23) = 0;
    v105.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v106 = -1;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long __p = 0u;
    long long v112 = 0u;
    uint64_t v113 = 0;
    int v107 = 1;
    int v104 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v105, (const std::string *)(a1 + 112));
    uint64_t v106 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v108, &__str);
    std::string::operator=((std::string *)((char *)&v109 + 8), &v98);
    uint64_t v74 = *(void *)(a1 + 568);
    uint64_t v75 = *(void *)(a1 + 560);
    uint64_t v76 = 30 * ((v74 - v75) >> 3) - 1;
    if (v74 == v75) {
      uint64_t v76 = 0;
    }
    if (v76 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v75 = *(void *)(a1 + 560);
      uint64_t v74 = *(void *)(a1 + 568);
    }
    if (v74 == v75)
    {
      uint64_t v78 = 0;
    }
    else
    {
      unint64_t v77 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v78 = *(void *)(v75 + 8 * (v77 / 0x1E)) + 136 * (v77 % 0x1E);
    }
    sub_B5158(v78, (uint64_t)&v104);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v112) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v110) & 0x80000000) == 0)
      {
LABEL_130:
        if ((SBYTE7(v109) & 0x80000000) == 0) {
          goto LABEL_131;
        }
        goto LABEL_151;
      }
    }
    else if ((SHIBYTE(v110) & 0x80000000) == 0)
    {
      goto LABEL_130;
    }
    operator delete(*((void **)&v109 + 1));
    if ((SBYTE7(v109) & 0x80000000) == 0)
    {
LABEL_131:
      if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_132;
      }
      goto LABEL_152;
    }
LABEL_151:
    operator delete((void *)v108);
    if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_132:
      if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_133;
      }
      goto LABEL_153;
    }
LABEL_152:
    operator delete(v105.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v98.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_133:
      if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_134;
      }
      goto LABEL_154;
    }
LABEL_153:
    operator delete(v98.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_134:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_135;
      }
      goto LABEL_155;
    }
LABEL_154:
    operator delete(v97.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_135:
      if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_136;
      }
      goto LABEL_156;
    }
LABEL_155:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_136:
      if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_137;
      }
      goto LABEL_157;
    }
LABEL_156:
    operator delete(v102.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_137:
      if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_138;
      }
      goto LABEL_158;
    }
LABEL_157:
    operator delete(v101.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_138:
      if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_139;
      }
      goto LABEL_159;
    }
LABEL_158:
    operator delete(v100.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_139;
    }
LABEL_159:
    operator delete(v99.__r_.__value_.__l.__data_);
    if (v114) {
      goto LABEL_140;
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_61;
  }
  uint64_t v24 = a1 + 40;
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t v26 = a1 + 40;
  if (*(void *)(a1 + 8) != v25)
  {
    *(void *)(a1 + 24) = v25 + 40;
    uint64_t v26 = v25;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v26;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v26 + 8));
  *(void *)(a1 + 136) = *(void *)(v26 + 32);
  v117.i64[1] = sub_B7FE4(a1, 0);
  if (!v117.i64[1])
  {
    LODWORD(v23) = 1;
    goto LABEL_105;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_61;
  }
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = a1 + 40;
  if (*(void *)(a1 + 8) != v27)
  {
    *(void *)(a1 + 24) = v27 + 40;
    uint64_t v28 = v27;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v28;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v28 + 8));
  *(void *)(a1 + 136) = *(void *)(v28 + 32);
  *(void *)&long long v118 = sub_B7FE4(a1, 0);
  if (!(void)v118)
  {
    LODWORD(v23) = 2;
    goto LABEL_105;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_61;
  }
  uint64_t v29 = *(void *)(a1 + 24);
  uint64_t v30 = a1 + 40;
  if (*(void *)(a1 + 8) != v29)
  {
    *(void *)(a1 + 24) = v29 + 40;
    uint64_t v30 = v29;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v30;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v30 + 8));
  *(void *)(a1 + 136) = *(void *)(v30 + 32);
  *((void *)&v118 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v118 + 1))
  {
    LODWORD(v23) = 3;
    goto LABEL_105;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_61;
  }
  uint64_t v31 = *(void *)(a1 + 24);
  uint64_t v32 = a1 + 40;
  if (*(void *)(a1 + 8) != v31)
  {
    *(void *)(a1 + 24) = v31 + 40;
    uint64_t v32 = v31;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v32;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v32 + 8));
  *(void *)(a1 + 136) = *(void *)(v32 + 32);
  *(void *)&long long v119 = sub_B7FE4(a1, 0);
  if (!(void)v119)
  {
    LODWORD(v23) = 4;
    goto LABEL_105;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_61;
  }
  uint64_t v33 = *(void *)(a1 + 24);
  uint64_t v34 = a1 + 40;
  if (*(void *)(a1 + 8) != v33)
  {
    *(void *)(a1 + 24) = v33 + 40;
    uint64_t v34 = v33;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v34;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v34 + 8));
  *(void *)(a1 + 136) = *(void *)(v34 + 32);
  *((void *)&v119 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v119 + 1))
  {
    LODWORD(v23) = 5;
    goto LABEL_105;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_61;
  }
  uint64_t v35 = *(void *)(a1 + 24);
  uint64_t v36 = a1 + 40;
  if (*(void *)(a1 + 8) != v35)
  {
    *(void *)(a1 + 24) = v35 + 40;
    uint64_t v36 = v35;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v36;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v36 + 8));
  *(void *)(a1 + 136) = *(void *)(v36 + 32);
  *(void *)&long long v120 = sub_B7FE4(a1, 0);
  if (!(void)v120)
  {
    LODWORD(v23) = 6;
    goto LABEL_105;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_61;
  }
  uint64_t v37 = *(void *)(a1 + 24);
  uint64_t v38 = a1 + 40;
  if (*(void *)(a1 + 8) != v37)
  {
    *(void *)(a1 + 24) = v37 + 40;
    uint64_t v38 = v37;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v38;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v38 + 8));
  *(void *)(a1 + 136) = *(void *)(v38 + 32);
  *((void *)&v120 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v120 + 1))
  {
    LODWORD(v23) = 7;
    goto LABEL_105;
  }
  if (*(_DWORD *)(a1 + 104) != 44)
  {
LABEL_61:
    std::operator+<char>();
    std::string::size_type v43 = std::string::append(&v102, "'");
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    memset(&v100, 0, sizeof(v100));
    std::string::push_back(&v100, 48);
    std::string::push_back(&v100, 57);
    std::string::push_back(&v100, 49);
    std::string::push_back(&v100, 49);
    std::string::push_back(&v100, 50);
    std::string::size_type v45 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v46 = &v100;
    }
    else {
      uint64_t v46 = (std::string *)v100.__r_.__value_.__r.__words[0];
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v45 = v100.__r_.__value_.__l.__size_;
    }
    if (v45)
    {
      std::string::value_type v47 = (std::string *)((char *)v46 + v45 - 1);
      if (v47 > v46)
      {
        uint64_t v48 = &v46->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v49 = *(v48 - 1);
          *(v48 - 1) = v47->__r_.__value_.__s.__data_[0];
          v47->__r_.__value_.__s.__data_[0] = v49;
          std::string::value_type v47 = (std::string *)((char *)v47 - 1);
          BOOL v15 = v48++ >= (char *)v47;
        }
        while (!v15);
      }
    }
    uint64_t v50 = std::string::insert(&v100, 0, "exprtk.hpp:");
    long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v105.__r_.__value_.__s + 23) = 0;
    v105.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v106 = -1;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long __p = 0u;
    long long v112 = 0u;
    uint64_t v113 = 0;
    int v107 = 1;
    int v104 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v105, (const std::string *)(a1 + 112));
    uint64_t v106 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v108, &__str);
    std::string::operator=((std::string *)((char *)&v109 + 8), &v101);
    uint64_t v52 = *(void *)(a1 + 568);
    uint64_t v53 = *(void *)(a1 + 560);
    uint64_t v54 = 30 * ((v52 - v53) >> 3) - 1;
    if (v52 == v53) {
      uint64_t v54 = 0;
    }
    if (v54 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v53 = *(void *)(a1 + 560);
      uint64_t v52 = *(void *)(a1 + 568);
    }
    if (v52 == v53)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v55 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v53 + 8 * (v55 / 0x1E)) + 136 * (v55 % 0x1E);
    }
    goto LABEL_79;
  }
  uint64_t v39 = *(void *)(a1 + 24);
  uint64_t v40 = a1 + 40;
  if (*(void *)(a1 + 8) != v39)
  {
    *(void *)(a1 + 24) = v39 + 40;
    uint64_t v40 = v39;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v40;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v40 + 8));
  *(void *)(a1 + 136) = *(void *)(v40 + 32);
  uint64_t v121 = sub_B7FE4(a1, 0);
  if (!v121)
  {
    LODWORD(v23) = 8;
    goto LABEL_105;
  }
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    std::operator+<char>();
    std::string::size_type v84 = std::string::append(&v102, "'");
    long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    memset(&v100, 0, sizeof(v100));
    std::string::push_back(&v100, 51);
    std::string::push_back(&v100, 48);
    std::string::push_back(&v100, 50);
    std::string::push_back(&v100, 49);
    std::string::push_back(&v100, 50);
    std::string::size_type v86 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v87 = &v100;
    }
    else {
      uint64_t v87 = (std::string *)v100.__r_.__value_.__r.__words[0];
    }
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v86 = v100.__r_.__value_.__l.__size_;
    }
    if (v86)
    {
      std::string::value_type v88 = (std::string *)((char *)v87 + v86 - 1);
      if (v88 > v87)
      {
        uint64_t v89 = &v87->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v90 = *(v89 - 1);
          *(v89 - 1) = v88->__r_.__value_.__s.__data_[0];
          v88->__r_.__value_.__s.__data_[0] = v90;
          std::string::value_type v88 = (std::string *)((char *)v88 - 1);
          BOOL v15 = v89++ >= (char *)v88;
        }
        while (!v15);
      }
    }
    uint64_t v91 = std::string::insert(&v100, 0, "exprtk.hpp:");
    long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v92;
    v91->__r_.__value_.__l.__size_ = 0;
    v91->__r_.__value_.__r.__words[2] = 0;
    v91->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v105.__r_.__value_.__s + 23) = 0;
    v105.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v106 = -1;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    long long __p = 0u;
    long long v112 = 0u;
    uint64_t v113 = 0;
    int v107 = 1;
    int v104 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v105, (const std::string *)(a1 + 112));
    uint64_t v106 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v108, &__str);
    std::string::operator=((std::string *)((char *)&v109 + 8), &v101);
    uint64_t v93 = *(void *)(a1 + 568);
    uint64_t v94 = *(void *)(a1 + 560);
    uint64_t v95 = 30 * ((v93 - v94) >> 3) - 1;
    if (v93 == v94) {
      uint64_t v95 = 0;
    }
    if (v95 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v94 = *(void *)(a1 + 560);
      uint64_t v93 = *(void *)(a1 + 568);
    }
    if (v93 == v94)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v96 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v94 + 8 * (v96 / 0x1E)) + 136 * (v96 % 0x1E);
    }
    goto LABEL_79;
  }
  uint64_t v41 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) != v41)
  {
    *(void *)(a1 + 24) = v41 + 40;
    uint64_t v24 = v41;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
  *(void *)(a1 + 136) = *(void *)(v24 + 32);
  return sub_20D014(a1 + 344, a2, &v117);
}

void sub_1FAB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a54 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_7:
    operator delete(a42);
LABEL_8:
    sub_20D254(v56 - 168);
    _Unwind_Resume(a1);
  }
  operator delete(a49);
  if ((a47 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_1FADD4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

uint64_t sub_1FADEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v122 = 0u;
  long long v123 = 0u;
  long long v120 = 0u;
  long long v121 = 0u;
  int64x2_t v119 = 0u;
  char v116 = 1;
  uint64_t v117 = a1;
  long long v118 = &v119;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v104, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v102, 0, sizeof(v102));
    std::string::push_back(&v102, 51);
    std::string::push_back(&v102, 54);
    std::string::push_back(&v102, 49);
    std::string::push_back(&v102, 49);
    std::string::push_back(&v102, 50);
    std::string::size_type size = HIBYTE(v102.__r_.__value_.__r.__words[2]);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v102;
    }
    else {
      uint64_t v11 = (std::string *)v102.__r_.__value_.__r.__words[0];
    }
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v102.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v102, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v107.__r_.__value_.__s + 23) = 0;
    v107.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v108 = -1;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long __p = 0u;
    long long v114 = 0u;
    uint64_t v115 = 0;
    int v109 = 1;
    int v106 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v107, (const std::string *)(a1 + 112));
    uint64_t v108 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v110, &__str);
    std::string::operator=((std::string *)((char *)&v111 + 8), &v103);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
LABEL_83:
    sub_B5158(v22, (uint64_t)&v106);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v114) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v112) & 0x80000000) == 0)
      {
LABEL_85:
        if ((SBYTE7(v111) & 0x80000000) == 0) {
          goto LABEL_86;
        }
        goto LABEL_94;
      }
    }
    else if ((SHIBYTE(v112) & 0x80000000) == 0)
    {
      goto LABEL_85;
    }
    operator delete(*((void **)&v111 + 1));
    if ((SBYTE7(v111) & 0x80000000) == 0)
    {
LABEL_86:
      if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_87;
      }
      goto LABEL_95;
    }
LABEL_94:
    operator delete((void *)v110);
    if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_87:
      if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_88;
      }
      goto LABEL_96;
    }
LABEL_95:
    operator delete(v107.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_88:
      if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_89;
      }
      goto LABEL_97;
    }
LABEL_96:
    operator delete(v103.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_89:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_90;
      }
      goto LABEL_98;
    }
LABEL_97:
    operator delete(v102.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_90:
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_99:
        operator delete(v104.__r_.__value_.__l.__data_);
        if (!v116) {
          return 0;
        }
        goto LABEL_145;
      }
LABEL_144:
      if (v116)
      {
LABEL_145:
        uint64_t v81 = 0;
        uint64_t v82 = v118;
        do
        {
          uint64_t v83 = v82->i64[v81];
          if (!v83 || (*(unsigned int (**)(uint64_t))(*(void *)v83 + 32))(v83) == 17) {
            goto LABEL_147;
          }
          uint64_t v84 = v82->i64[v81];
          if (v84)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v84 + 32))(v84) == 18) {
              goto LABEL_147;
            }
            uint64_t v85 = v82->i64[v81];
            if (v85) {
              (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
            }
          }
          v82->i64[v81] = 0;
LABEL_147:
          ++v81;
        }
        while (v81 != 10);
      }
      return 0;
    }
LABEL_98:
    operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_99;
    }
    goto LABEL_144;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v23 = sub_B7FE4(a1, 0);
  v119.i64[0] = v23;
  if (!v23)
  {
LABEL_110:
    sub_B1D70(v23, (unint64_t)&v101);
    int v58 = std::string::insert(&v101, 0, "ERR019 - Failed to parse argument ");
    long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v102.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    int v60 = std::string::append(&v102, " for function: '");
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    int v62 = *(char *)(a3 + 23);
    if (v62 >= 0) {
      std::string::size_type v63 = (const std::string::value_type *)a3;
    }
    else {
      std::string::size_type v63 = *(const std::string::value_type **)a3;
    }
    if (v62 >= 0) {
      std::string::size_type v64 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v64 = *(void *)(a3 + 8);
    }
    std::string::size_type v65 = std::string::append(&v103, v63, v64);
    long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v67 = std::string::append(&v104, "'");
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    memset(&v99, 0, sizeof(v99));
    std::string::push_back(&v99, 56);
    std::string::push_back(&v99, 55);
    std::string::push_back(&v99, 49);
    std::string::push_back(&v99, 49);
    std::string::push_back(&v99, 50);
    std::string::size_type v69 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v70 = &v99;
    }
    else {
      uint64_t v70 = (std::string *)v99.__r_.__value_.__r.__words[0];
    }
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v69 = v99.__r_.__value_.__l.__size_;
    }
    if (v69)
    {
      std::string::value_type v71 = (std::string *)((char *)v70 + v69 - 1);
      if (v71 > v70)
      {
        uint64_t v72 = &v70->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v73 = *(v72 - 1);
          *(v72 - 1) = v71->__r_.__value_.__s.__data_[0];
          v71->__r_.__value_.__s.__data_[0] = v73;
          std::string::value_type v71 = (std::string *)((char *)v71 - 1);
          BOOL v15 = v72++ >= (char *)v71;
        }
        while (!v15);
      }
    }
    uint64_t v74 = std::string::insert(&v99, 0, "exprtk.hpp:");
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v100.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v107.__r_.__value_.__s + 23) = 0;
    v107.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v108 = -1;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long __p = 0u;
    long long v114 = 0u;
    uint64_t v115 = 0;
    int v109 = 1;
    int v106 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v107, (const std::string *)(a1 + 112));
    uint64_t v108 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v110, &__str);
    std::string::operator=((std::string *)((char *)&v111 + 8), &v100);
    uint64_t v76 = *(void *)(a1 + 568);
    uint64_t v77 = *(void *)(a1 + 560);
    uint64_t v78 = 30 * ((v76 - v77) >> 3) - 1;
    if (v76 == v77) {
      uint64_t v78 = 0;
    }
    if (v78 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v77 = *(void *)(a1 + 560);
      uint64_t v76 = *(void *)(a1 + 568);
    }
    if (v76 == v77)
    {
      uint64_t v80 = 0;
    }
    else
    {
      unint64_t v79 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v80 = *(void *)(v77 + 8 * (v79 / 0x1E)) + 136 * (v79 % 0x1E);
    }
    sub_B5158(v80, (uint64_t)&v106);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v114) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v112) & 0x80000000) == 0)
      {
LABEL_135:
        if ((SBYTE7(v111) & 0x80000000) == 0) {
          goto LABEL_136;
        }
        goto LABEL_156;
      }
    }
    else if ((SHIBYTE(v112) & 0x80000000) == 0)
    {
      goto LABEL_135;
    }
    operator delete(*((void **)&v111 + 1));
    if ((SBYTE7(v111) & 0x80000000) == 0)
    {
LABEL_136:
      if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_137;
      }
      goto LABEL_157;
    }
LABEL_156:
    operator delete((void *)v110);
    if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_137:
      if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_138;
      }
      goto LABEL_158;
    }
LABEL_157:
    operator delete(v107.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_138:
      if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_139;
      }
      goto LABEL_159;
    }
LABEL_158:
    operator delete(v100.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v99.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_139:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_140;
      }
      goto LABEL_160;
    }
LABEL_159:
    operator delete(v99.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_140:
      if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_141;
      }
      goto LABEL_161;
    }
LABEL_160:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_141:
      if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_142;
      }
      goto LABEL_162;
    }
LABEL_161:
    operator delete(v104.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_142:
      if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_143;
      }
      goto LABEL_163;
    }
LABEL_162:
    operator delete(v103.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_143:
      if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_144;
      }
      goto LABEL_164;
    }
LABEL_163:
    operator delete(v102.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_144;
    }
LABEL_164:
    operator delete(v101.__r_.__value_.__l.__data_);
    if (v116) {
      goto LABEL_145;
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_65;
  }
  uint64_t v24 = a1 + 40;
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t v26 = a1 + 40;
  if (*(void *)(a1 + 8) != v25)
  {
    *(void *)(a1 + 24) = v25 + 40;
    uint64_t v26 = v25;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v26;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v26 + 8));
  *(void *)(a1 + 136) = *(void *)(v26 + 32);
  v119.i64[1] = sub_B7FE4(a1, 0);
  if (!v119.i64[1])
  {
    LODWORD(v23) = 1;
    goto LABEL_110;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_65;
  }
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = a1 + 40;
  if (*(void *)(a1 + 8) != v27)
  {
    *(void *)(a1 + 24) = v27 + 40;
    uint64_t v28 = v27;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v28;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v28 + 8));
  *(void *)(a1 + 136) = *(void *)(v28 + 32);
  *(void *)&long long v120 = sub_B7FE4(a1, 0);
  if (!(void)v120)
  {
    LODWORD(v23) = 2;
    goto LABEL_110;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_65;
  }
  uint64_t v29 = *(void *)(a1 + 24);
  uint64_t v30 = a1 + 40;
  if (*(void *)(a1 + 8) != v29)
  {
    *(void *)(a1 + 24) = v29 + 40;
    uint64_t v30 = v29;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v30;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v30 + 8));
  *(void *)(a1 + 136) = *(void *)(v30 + 32);
  *((void *)&v120 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v120 + 1))
  {
    LODWORD(v23) = 3;
    goto LABEL_110;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_65;
  }
  uint64_t v31 = *(void *)(a1 + 24);
  uint64_t v32 = a1 + 40;
  if (*(void *)(a1 + 8) != v31)
  {
    *(void *)(a1 + 24) = v31 + 40;
    uint64_t v32 = v31;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v32;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v32 + 8));
  *(void *)(a1 + 136) = *(void *)(v32 + 32);
  *(void *)&long long v121 = sub_B7FE4(a1, 0);
  if (!(void)v121)
  {
    LODWORD(v23) = 4;
    goto LABEL_110;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_65;
  }
  uint64_t v33 = *(void *)(a1 + 24);
  uint64_t v34 = a1 + 40;
  if (*(void *)(a1 + 8) != v33)
  {
    *(void *)(a1 + 24) = v33 + 40;
    uint64_t v34 = v33;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v34;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v34 + 8));
  *(void *)(a1 + 136) = *(void *)(v34 + 32);
  *((void *)&v121 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v121 + 1))
  {
    LODWORD(v23) = 5;
    goto LABEL_110;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_65;
  }
  uint64_t v35 = *(void *)(a1 + 24);
  uint64_t v36 = a1 + 40;
  if (*(void *)(a1 + 8) != v35)
  {
    *(void *)(a1 + 24) = v35 + 40;
    uint64_t v36 = v35;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v36;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v36 + 8));
  *(void *)(a1 + 136) = *(void *)(v36 + 32);
  *(void *)&long long v122 = sub_B7FE4(a1, 0);
  if (!(void)v122)
  {
    LODWORD(v23) = 6;
    goto LABEL_110;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_65;
  }
  uint64_t v37 = *(void *)(a1 + 24);
  uint64_t v38 = a1 + 40;
  if (*(void *)(a1 + 8) != v37)
  {
    *(void *)(a1 + 24) = v37 + 40;
    uint64_t v38 = v37;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v38;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v38 + 8));
  *(void *)(a1 + 136) = *(void *)(v38 + 32);
  *((void *)&v122 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v122 + 1))
  {
    LODWORD(v23) = 7;
    goto LABEL_110;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_65;
  }
  uint64_t v39 = *(void *)(a1 + 24);
  uint64_t v40 = a1 + 40;
  if (*(void *)(a1 + 8) != v39)
  {
    *(void *)(a1 + 24) = v39 + 40;
    uint64_t v40 = v39;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v40;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v40 + 8));
  *(void *)(a1 + 136) = *(void *)(v40 + 32);
  *(void *)&long long v123 = sub_B7FE4(a1, 0);
  if (!(void)v123)
  {
    LODWORD(v23) = 8;
    goto LABEL_110;
  }
  if (*(_DWORD *)(a1 + 104) != 44)
  {
LABEL_65:
    std::operator+<char>();
    std::string::size_type v45 = std::string::append(&v104, "'");
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    memset(&v102, 0, sizeof(v102));
    std::string::push_back(&v102, 48);
    std::string::push_back(&v102, 57);
    std::string::push_back(&v102, 49);
    std::string::push_back(&v102, 49);
    std::string::push_back(&v102, 50);
    std::string::size_type v47 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v48 = &v102;
    }
    else {
      uint64_t v48 = (std::string *)v102.__r_.__value_.__r.__words[0];
    }
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v47 = v102.__r_.__value_.__l.__size_;
    }
    if (v47)
    {
      std::string::value_type v49 = (std::string *)((char *)v48 + v47 - 1);
      if (v49 > v48)
      {
        uint64_t v50 = &v48->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v51 = *(v50 - 1);
          *(v50 - 1) = v49->__r_.__value_.__s.__data_[0];
          v49->__r_.__value_.__s.__data_[0] = v51;
          std::string::value_type v49 = (std::string *)((char *)v49 - 1);
          BOOL v15 = v50++ >= (char *)v49;
        }
        while (!v15);
      }
    }
    uint64_t v52 = std::string::insert(&v102, 0, "exprtk.hpp:");
    long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v107.__r_.__value_.__s + 23) = 0;
    v107.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v108 = -1;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long __p = 0u;
    long long v114 = 0u;
    uint64_t v115 = 0;
    int v109 = 1;
    int v106 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v107, (const std::string *)(a1 + 112));
    uint64_t v108 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v110, &__str);
    std::string::operator=((std::string *)((char *)&v111 + 8), &v103);
    uint64_t v54 = *(void *)(a1 + 568);
    uint64_t v55 = *(void *)(a1 + 560);
    uint64_t v56 = 30 * ((v54 - v55) >> 3) - 1;
    if (v54 == v55) {
      uint64_t v56 = 0;
    }
    if (v56 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v55 = *(void *)(a1 + 560);
      uint64_t v54 = *(void *)(a1 + 568);
    }
    if (v54 == v55)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v57 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v55 + 8 * (v57 / 0x1E)) + 136 * (v57 % 0x1E);
    }
    goto LABEL_83;
  }
  uint64_t v41 = *(void *)(a1 + 24);
  uint64_t v42 = a1 + 40;
  if (*(void *)(a1 + 8) != v41)
  {
    *(void *)(a1 + 24) = v41 + 40;
    uint64_t v42 = v41;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v42;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v42 + 8));
  *(void *)(a1 + 136) = *(void *)(v42 + 32);
  *((void *)&v123 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v123 + 1))
  {
    LODWORD(v23) = 9;
    goto LABEL_110;
  }
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    std::operator+<char>();
    std::string::size_type v86 = std::string::append(&v104, "'");
    long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    memset(&v102, 0, sizeof(v102));
    std::string::push_back(&v102, 51);
    std::string::push_back(&v102, 48);
    std::string::push_back(&v102, 50);
    std::string::push_back(&v102, 49);
    std::string::push_back(&v102, 50);
    std::string::size_type v88 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v89 = &v102;
    }
    else {
      uint64_t v89 = (std::string *)v102.__r_.__value_.__r.__words[0];
    }
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v88 = v102.__r_.__value_.__l.__size_;
    }
    if (v88)
    {
      std::string::value_type v90 = (std::string *)((char *)v89 + v88 - 1);
      if (v90 > v89)
      {
        uint64_t v91 = &v89->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v92 = *(v91 - 1);
          *(v91 - 1) = v90->__r_.__value_.__s.__data_[0];
          v90->__r_.__value_.__s.__data_[0] = v92;
          std::string::value_type v90 = (std::string *)((char *)v90 - 1);
          BOOL v15 = v91++ >= (char *)v90;
        }
        while (!v15);
      }
    }
    uint64_t v93 = std::string::insert(&v102, 0, "exprtk.hpp:");
    long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v107.__r_.__value_.__s + 23) = 0;
    v107.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v108 = -1;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    long long __p = 0u;
    long long v114 = 0u;
    uint64_t v115 = 0;
    int v109 = 1;
    int v106 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v107, (const std::string *)(a1 + 112));
    uint64_t v108 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v110, &__str);
    std::string::operator=((std::string *)((char *)&v111 + 8), &v103);
    uint64_t v95 = *(void *)(a1 + 568);
    uint64_t v96 = *(void *)(a1 + 560);
    uint64_t v97 = 30 * ((v95 - v96) >> 3) - 1;
    if (v95 == v96) {
      uint64_t v97 = 0;
    }
    if (v97 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v96 = *(void *)(a1 + 560);
      uint64_t v95 = *(void *)(a1 + 568);
    }
    if (v95 == v96)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v98 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v96 + 8 * (v98 / 0x1E)) + 136 * (v98 % 0x1E);
    }
    goto LABEL_83;
  }
  uint64_t v43 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) != v43)
  {
    *(void *)(a1 + 24) = v43 + 40;
    uint64_t v24 = v43;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
  *(void *)(a1 + 136) = *(void *)(v24 + 32);
  return sub_20E3E8(a1 + 344, a2, &v119);
}

void sub_1FBE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a54 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_7:
    operator delete(a42);
LABEL_8:
    sub_20E630(v56 - 184);
    _Unwind_Resume(a1);
  }
  operator delete(a49);
  if ((a47 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_1FC070(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

uint64_t sub_1FC088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v126 = 0;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v122 = 0u;
  long long v123 = 0u;
  int64x2_t v121 = 0u;
  char v118 = 1;
  uint64_t v119 = a1;
  long long v120 = &v121;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v106, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v104, 0, sizeof(v104));
    std::string::push_back(&v104, 51);
    std::string::push_back(&v104, 54);
    std::string::push_back(&v104, 49);
    std::string::push_back(&v104, 49);
    std::string::push_back(&v104, 50);
    std::string::size_type size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v104;
    }
    else {
      uint64_t v11 = (std::string *)v104.__r_.__value_.__r.__words[0];
    }
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v104.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v104, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v109.__r_.__value_.__s + 23) = 0;
    v109.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v110 = -1;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long __p = 0u;
    long long v116 = 0u;
    uint64_t v117 = 0;
    int v111 = 1;
    int v108 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v109, (const std::string *)(a1 + 112));
    uint64_t v110 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v112, &__str);
    std::string::operator=((std::string *)((char *)&v113 + 8), &v105);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
LABEL_87:
    sub_B5158(v22, (uint64_t)&v108);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v116) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v114) & 0x80000000) == 0)
      {
LABEL_89:
        if ((SBYTE7(v113) & 0x80000000) == 0) {
          goto LABEL_90;
        }
        goto LABEL_98;
      }
    }
    else if ((SHIBYTE(v114) & 0x80000000) == 0)
    {
      goto LABEL_89;
    }
    operator delete(*((void **)&v113 + 1));
    if ((SBYTE7(v113) & 0x80000000) == 0)
    {
LABEL_90:
      if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_91;
      }
      goto LABEL_99;
    }
LABEL_98:
    operator delete((void *)v112);
    if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_91:
      if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_92;
      }
      goto LABEL_100;
    }
LABEL_99:
    operator delete(v109.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_92:
      if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_93;
      }
      goto LABEL_101;
    }
LABEL_100:
    operator delete(v105.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_93:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_94;
      }
      goto LABEL_102;
    }
LABEL_101:
    operator delete(v104.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_94:
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_103:
        operator delete(v106.__r_.__value_.__l.__data_);
        if (!v118) {
          return 0;
        }
        goto LABEL_150;
      }
LABEL_149:
      if (v118)
      {
LABEL_150:
        uint64_t v83 = 0;
        uint64_t v84 = v120;
        do
        {
          uint64_t v85 = v84->i64[v83];
          if (!v85 || (*(unsigned int (**)(uint64_t))(*(void *)v85 + 32))(v85) == 17) {
            goto LABEL_152;
          }
          uint64_t v86 = v84->i64[v83];
          if (v86)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v86 + 32))(v86) == 18) {
              goto LABEL_152;
            }
            uint64_t v87 = v84->i64[v83];
            if (v87) {
              (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
            }
          }
          v84->i64[v83] = 0;
LABEL_152:
          ++v83;
        }
        while (v83 != 11);
      }
      return 0;
    }
LABEL_102:
    operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_103;
    }
    goto LABEL_149;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v23 = sub_B7FE4(a1, 0);
  v121.i64[0] = v23;
  if (!v23)
  {
LABEL_115:
    sub_B1D70(v23, (unint64_t)&v103);
    int v60 = std::string::insert(&v103, 0, "ERR019 - Failed to parse argument ");
    long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    int v62 = std::string::append(&v104, " for function: '");
    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    int v64 = *(char *)(a3 + 23);
    if (v64 >= 0) {
      std::string::size_type v65 = (const std::string::value_type *)a3;
    }
    else {
      std::string::size_type v65 = *(const std::string::value_type **)a3;
    }
    if (v64 >= 0) {
      std::string::size_type v66 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v66 = *(void *)(a3 + 8);
    }
    std::string::size_type v67 = std::string::append(&v105, v65, v66);
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v106.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v69 = std::string::append(&v106, "'");
    long long v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    memset(&v101, 0, sizeof(v101));
    std::string::push_back(&v101, 56);
    std::string::push_back(&v101, 55);
    std::string::push_back(&v101, 49);
    std::string::push_back(&v101, 49);
    std::string::push_back(&v101, 50);
    std::string::size_type v71 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v72 = &v101;
    }
    else {
      uint64_t v72 = (std::string *)v101.__r_.__value_.__r.__words[0];
    }
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v71 = v101.__r_.__value_.__l.__size_;
    }
    if (v71)
    {
      std::string::value_type v73 = (std::string *)((char *)v72 + v71 - 1);
      if (v73 > v72)
      {
        uint64_t v74 = &v72->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v75 = *(v74 - 1);
          *(v74 - 1) = v73->__r_.__value_.__s.__data_[0];
          v73->__r_.__value_.__s.__data_[0] = v75;
          std::string::value_type v73 = (std::string *)((char *)v73 - 1);
          BOOL v15 = v74++ >= (char *)v73;
        }
        while (!v15);
      }
    }
    uint64_t v76 = std::string::insert(&v101, 0, "exprtk.hpp:");
    long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v102.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v109.__r_.__value_.__s + 23) = 0;
    v109.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v110 = -1;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long __p = 0u;
    long long v116 = 0u;
    uint64_t v117 = 0;
    int v111 = 1;
    int v108 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v109, (const std::string *)(a1 + 112));
    uint64_t v110 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v112, &__str);
    std::string::operator=((std::string *)((char *)&v113 + 8), &v102);
    uint64_t v78 = *(void *)(a1 + 568);
    uint64_t v79 = *(void *)(a1 + 560);
    uint64_t v80 = 30 * ((v78 - v79) >> 3) - 1;
    if (v78 == v79) {
      uint64_t v80 = 0;
    }
    if (v80 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v79 = *(void *)(a1 + 560);
      uint64_t v78 = *(void *)(a1 + 568);
    }
    if (v78 == v79)
    {
      uint64_t v82 = 0;
    }
    else
    {
      unint64_t v81 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v82 = *(void *)(v79 + 8 * (v81 / 0x1E)) + 136 * (v81 % 0x1E);
    }
    sub_B5158(v82, (uint64_t)&v108);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v116) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v114) & 0x80000000) == 0)
      {
LABEL_140:
        if ((SBYTE7(v113) & 0x80000000) == 0) {
          goto LABEL_141;
        }
        goto LABEL_161;
      }
    }
    else if ((SHIBYTE(v114) & 0x80000000) == 0)
    {
      goto LABEL_140;
    }
    operator delete(*((void **)&v113 + 1));
    if ((SBYTE7(v113) & 0x80000000) == 0)
    {
LABEL_141:
      if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_142;
      }
      goto LABEL_162;
    }
LABEL_161:
    operator delete((void *)v112);
    if ((SHIBYTE(v109.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_142:
      if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_143;
      }
      goto LABEL_163;
    }
LABEL_162:
    operator delete(v109.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_143:
      if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_144;
      }
      goto LABEL_164;
    }
LABEL_163:
    operator delete(v102.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v101.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_144:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_145;
      }
      goto LABEL_165;
    }
LABEL_164:
    operator delete(v101.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_145:
      if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_146;
      }
      goto LABEL_166;
    }
LABEL_165:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v106.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_146:
      if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_147;
      }
      goto LABEL_167;
    }
LABEL_166:
    operator delete(v106.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v105.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_147:
      if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_148;
      }
      goto LABEL_168;
    }
LABEL_167:
    operator delete(v105.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_148:
      if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_149;
      }
      goto LABEL_169;
    }
LABEL_168:
    operator delete(v104.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_149;
    }
LABEL_169:
    operator delete(v103.__r_.__value_.__l.__data_);
    if (v118) {
      goto LABEL_150;
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_69;
  }
  uint64_t v24 = a1 + 40;
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t v26 = a1 + 40;
  if (*(void *)(a1 + 8) != v25)
  {
    *(void *)(a1 + 24) = v25 + 40;
    uint64_t v26 = v25;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v26;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v26 + 8));
  *(void *)(a1 + 136) = *(void *)(v26 + 32);
  v121.i64[1] = sub_B7FE4(a1, 0);
  if (!v121.i64[1])
  {
    LODWORD(v23) = 1;
    goto LABEL_115;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_69;
  }
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = a1 + 40;
  if (*(void *)(a1 + 8) != v27)
  {
    *(void *)(a1 + 24) = v27 + 40;
    uint64_t v28 = v27;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v28;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v28 + 8));
  *(void *)(a1 + 136) = *(void *)(v28 + 32);
  *(void *)&long long v122 = sub_B7FE4(a1, 0);
  if (!(void)v122)
  {
    LODWORD(v23) = 2;
    goto LABEL_115;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_69;
  }
  uint64_t v29 = *(void *)(a1 + 24);
  uint64_t v30 = a1 + 40;
  if (*(void *)(a1 + 8) != v29)
  {
    *(void *)(a1 + 24) = v29 + 40;
    uint64_t v30 = v29;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v30;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v30 + 8));
  *(void *)(a1 + 136) = *(void *)(v30 + 32);
  *((void *)&v122 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v122 + 1))
  {
    LODWORD(v23) = 3;
    goto LABEL_115;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_69;
  }
  uint64_t v31 = *(void *)(a1 + 24);
  uint64_t v32 = a1 + 40;
  if (*(void *)(a1 + 8) != v31)
  {
    *(void *)(a1 + 24) = v31 + 40;
    uint64_t v32 = v31;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v32;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v32 + 8));
  *(void *)(a1 + 136) = *(void *)(v32 + 32);
  *(void *)&long long v123 = sub_B7FE4(a1, 0);
  if (!(void)v123)
  {
    LODWORD(v23) = 4;
    goto LABEL_115;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_69;
  }
  uint64_t v33 = *(void *)(a1 + 24);
  uint64_t v34 = a1 + 40;
  if (*(void *)(a1 + 8) != v33)
  {
    *(void *)(a1 + 24) = v33 + 40;
    uint64_t v34 = v33;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v34;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v34 + 8));
  *(void *)(a1 + 136) = *(void *)(v34 + 32);
  *((void *)&v123 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v123 + 1))
  {
    LODWORD(v23) = 5;
    goto LABEL_115;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_69;
  }
  uint64_t v35 = *(void *)(a1 + 24);
  uint64_t v36 = a1 + 40;
  if (*(void *)(a1 + 8) != v35)
  {
    *(void *)(a1 + 24) = v35 + 40;
    uint64_t v36 = v35;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v36;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v36 + 8));
  *(void *)(a1 + 136) = *(void *)(v36 + 32);
  *(void *)&long long v124 = sub_B7FE4(a1, 0);
  if (!(void)v124)
  {
    LODWORD(v23) = 6;
    goto LABEL_115;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_69;
  }
  uint64_t v37 = *(void *)(a1 + 24);
  uint64_t v38 = a1 + 40;
  if (*(void *)(a1 + 8) != v37)
  {
    *(void *)(a1 + 24) = v37 + 40;
    uint64_t v38 = v37;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v38;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v38 + 8));
  *(void *)(a1 + 136) = *(void *)(v38 + 32);
  *((void *)&v124 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v124 + 1))
  {
    LODWORD(v23) = 7;
    goto LABEL_115;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_69;
  }
  uint64_t v39 = *(void *)(a1 + 24);
  uint64_t v40 = a1 + 40;
  if (*(void *)(a1 + 8) != v39)
  {
    *(void *)(a1 + 24) = v39 + 40;
    uint64_t v40 = v39;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v40;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v40 + 8));
  *(void *)(a1 + 136) = *(void *)(v40 + 32);
  *(void *)&long long v125 = sub_B7FE4(a1, 0);
  if (!(void)v125)
  {
    LODWORD(v23) = 8;
    goto LABEL_115;
  }
  if (*(_DWORD *)(a1 + 104) != 44) {
    goto LABEL_69;
  }
  uint64_t v41 = *(void *)(a1 + 24);
  uint64_t v42 = a1 + 40;
  if (*(void *)(a1 + 8) != v41)
  {
    *(void *)(a1 + 24) = v41 + 40;
    uint64_t v42 = v41;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v42;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v42 + 8));
  *(void *)(a1 + 136) = *(void *)(v42 + 32);
  *((void *)&v125 + 1) = sub_B7FE4(a1, 0);
  if (!*((void *)&v125 + 1))
  {
    LODWORD(v23) = 9;
    goto LABEL_115;
  }
  if (*(_DWORD *)(a1 + 104) != 44)
  {
LABEL_69:
    std::operator+<char>();
    std::string::size_type v47 = std::string::append(&v106, "'");
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    memset(&v104, 0, sizeof(v104));
    std::string::push_back(&v104, 48);
    std::string::push_back(&v104, 57);
    std::string::push_back(&v104, 49);
    std::string::push_back(&v104, 49);
    std::string::push_back(&v104, 50);
    std::string::size_type v49 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v50 = &v104;
    }
    else {
      uint64_t v50 = (std::string *)v104.__r_.__value_.__r.__words[0];
    }
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v49 = v104.__r_.__value_.__l.__size_;
    }
    if (v49)
    {
      std::string::value_type v51 = (std::string *)((char *)v50 + v49 - 1);
      if (v51 > v50)
      {
        uint64_t v52 = &v50->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v53 = *(v52 - 1);
          *(v52 - 1) = v51->__r_.__value_.__s.__data_[0];
          v51->__r_.__value_.__s.__data_[0] = v53;
          std::string::value_type v51 = (std::string *)((char *)v51 - 1);
          BOOL v15 = v52++ >= (char *)v51;
        }
        while (!v15);
      }
    }
    uint64_t v54 = std::string::insert(&v104, 0, "exprtk.hpp:");
    long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v109.__r_.__value_.__s + 23) = 0;
    v109.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v110 = -1;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long __p = 0u;
    long long v116 = 0u;
    uint64_t v117 = 0;
    int v111 = 1;
    int v108 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v109, (const std::string *)(a1 + 112));
    uint64_t v110 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v112, &__str);
    std::string::operator=((std::string *)((char *)&v113 + 8), &v105);
    uint64_t v56 = *(void *)(a1 + 568);
    uint64_t v57 = *(void *)(a1 + 560);
    uint64_t v58 = 30 * ((v56 - v57) >> 3) - 1;
    if (v56 == v57) {
      uint64_t v58 = 0;
    }
    if (v58 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v57 = *(void *)(a1 + 560);
      uint64_t v56 = *(void *)(a1 + 568);
    }
    if (v56 == v57)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v59 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v57 + 8 * (v59 / 0x1E)) + 136 * (v59 % 0x1E);
    }
    goto LABEL_87;
  }
  uint64_t v43 = *(void *)(a1 + 24);
  uint64_t v44 = a1 + 40;
  if (*(void *)(a1 + 8) != v43)
  {
    *(void *)(a1 + 24) = v43 + 40;
    uint64_t v44 = v43;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v44;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v44 + 8));
  *(void *)(a1 + 136) = *(void *)(v44 + 32);
  uint64_t v126 = sub_B7FE4(a1, 0);
  if (!v126)
  {
    LODWORD(v23) = 10;
    goto LABEL_115;
  }
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    std::operator+<char>();
    std::string::size_type v88 = std::string::append(&v106, "'");
    long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    memset(&v104, 0, sizeof(v104));
    std::string::push_back(&v104, 51);
    std::string::push_back(&v104, 48);
    std::string::push_back(&v104, 50);
    std::string::push_back(&v104, 49);
    std::string::push_back(&v104, 50);
    std::string::size_type v90 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v91 = &v104;
    }
    else {
      uint64_t v91 = (std::string *)v104.__r_.__value_.__r.__words[0];
    }
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v90 = v104.__r_.__value_.__l.__size_;
    }
    if (v90)
    {
      std::string::value_type v92 = (std::string *)((char *)v91 + v90 - 1);
      if (v92 > v91)
      {
        uint64_t v93 = &v91->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v94 = *(v93 - 1);
          *(v93 - 1) = v92->__r_.__value_.__s.__data_[0];
          v92->__r_.__value_.__s.__data_[0] = v94;
          std::string::value_type v92 = (std::string *)((char *)v92 - 1);
          BOOL v15 = v93++ >= (char *)v92;
        }
        while (!v15);
      }
    }
    uint64_t v95 = std::string::insert(&v104, 0, "exprtk.hpp:");
    long long v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v109.__r_.__value_.__s + 23) = 0;
    v109.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v110 = -1;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long __p = 0u;
    long long v116 = 0u;
    uint64_t v117 = 0;
    int v111 = 1;
    int v108 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v109, (const std::string *)(a1 + 112));
    uint64_t v110 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v112, &__str);
    std::string::operator=((std::string *)((char *)&v113 + 8), &v105);
    uint64_t v97 = *(void *)(a1 + 568);
    uint64_t v98 = *(void *)(a1 + 560);
    uint64_t v99 = 30 * ((v97 - v98) >> 3) - 1;
    if (v97 == v98) {
      uint64_t v99 = 0;
    }
    if (v99 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v98 = *(void *)(a1 + 560);
      uint64_t v97 = *(void *)(a1 + 568);
    }
    if (v97 == v98)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v100 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v98 + 8 * (v100 / 0x1E)) + 136 * (v100 % 0x1E);
    }
    goto LABEL_87;
  }
  uint64_t v45 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) != v45)
  {
    *(void *)(a1 + 24) = v45 + 40;
    uint64_t v24 = v45;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
  *(void *)(a1 + 136) = *(void *)(v24 + 32);
  return sub_20F8F0(a1 + 344, a2, &v121);
}

void sub_1FD110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a54 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a54 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a47 & 0x80000000) == 0) {
      goto LABEL_8;
    }
LABEL_7:
    operator delete(a42);
LABEL_8:
    sub_2100A0(v56 - 184);
    _Unwind_Resume(a1);
  }
  operator delete(a49);
  if ((a47 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_1FD374(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

uint64_t sub_1FD38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(&v105, 0, 96);
  char v102 = 1;
  uint64_t v103 = a1;
  std::string v104 = &v105;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v90, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v88, 0, sizeof(v88));
    std::string::push_back(&v88, 51);
    std::string::push_back(&v88, 54);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 50);
    std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v88;
    }
    else {
      uint64_t v11 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v88.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v88, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
LABEL_59:
    sub_B5158(v22, (uint64_t)&v92);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v100) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v98) & 0x80000000) == 0)
      {
LABEL_61:
        if ((SBYTE7(v97) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_70;
      }
    }
    else if ((SHIBYTE(v98) & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(*((void **)&v97 + 1));
    if ((SBYTE7(v97) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_71;
    }
LABEL_70:
    operator delete((void *)v96);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_72;
    }
LABEL_71:
    operator delete(v93.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_64:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
      goto LABEL_73;
    }
LABEL_72:
    operator delete(v89.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_65:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
      goto LABEL_74;
    }
LABEL_73:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_120;
      }
LABEL_75:
      std::string::value_type v53 = (void *)v90.__r_.__value_.__r.__words[0];
      goto LABEL_133;
    }
LABEL_74:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_120;
    }
    goto LABEL_75;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  unint64_t v23 = 0;
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v24 = a1 + 40;
  do
  {
    uint64_t v25 = sub_B7FE4(a1, 0);
    v105.i64[v23] = v25;
    if (!v25)
    {
      sub_B1D70(v23, (unint64_t)&v87);
      uint64_t v28 = std::string::insert(&v87, 0, "ERR019 - Failed to parse argument ");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = std::string::append(&v88, " for function: '");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      int v32 = *(char *)(a3 + 23);
      if (v32 >= 0) {
        uint64_t v33 = (const std::string::value_type *)a3;
      }
      else {
        uint64_t v33 = *(const std::string::value_type **)a3;
      }
      if (v32 >= 0) {
        std::string::size_type v34 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v34 = *(void *)(a3 + 8);
      }
      uint64_t v35 = std::string::append(&v89, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      uint64_t v37 = std::string::append(&v90, "'");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      memset(&v85, 0, sizeof(v85));
      std::string::push_back(&v85, 56);
      std::string::push_back(&v85, 55);
      std::string::push_back(&v85, 49);
      std::string::push_back(&v85, 49);
      std::string::push_back(&v85, 50);
      std::string::size_type v39 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v40 = &v85;
      }
      else {
        uint64_t v40 = (std::string *)v85.__r_.__value_.__r.__words[0];
      }
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v39 = v85.__r_.__value_.__l.__size_;
      }
      if (v39)
      {
        uint64_t v41 = (std::string *)((char *)v40 + v39 - 1);
        if (v41 > v40)
        {
          uint64_t v42 = &v40->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v43 = *(v42 - 1);
            *(v42 - 1) = v41->__r_.__value_.__s.__data_[0];
            v41->__r_.__value_.__s.__data_[0] = v43;
            uint64_t v41 = (std::string *)((char *)v41 - 1);
            BOOL v15 = v42++ >= (char *)v41;
          }
          while (!v15);
        }
      }
      uint64_t v44 = std::string::insert(&v85, 0, "exprtk.hpp:");
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
      v93.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v94 = -1;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long __p = 0u;
      long long v100 = 0u;
      uint64_t v101 = 0;
      int v95 = 1;
      int v92 = *(_DWORD *)(a1 + 104);
      std::string::operator=(&v93, (const std::string *)(a1 + 112));
      uint64_t v94 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v96, &__str);
      std::string::operator=((std::string *)((char *)&v97 + 8), &v86);
      uint64_t v46 = *(void *)(a1 + 568);
      uint64_t v47 = *(void *)(a1 + 560);
      uint64_t v48 = 30 * ((v46 - v47) >> 3) - 1;
      if (v46 == v47) {
        uint64_t v48 = 0;
      }
      if (v48 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v47 = *(void *)(a1 + 560);
        uint64_t v46 = *(void *)(a1 + 568);
      }
      if (v46 == v47)
      {
        uint64_t v50 = 0;
      }
      else
      {
        unint64_t v49 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v50 = *(void *)(v47 + 8 * (v49 / 0x1E)) + 136 * (v49 % 0x1E);
      }
      sub_B5158(v50, (uint64_t)&v92);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v100) < 0)
      {
        operator delete((void *)__p);
        if ((SHIBYTE(v98) & 0x80000000) == 0)
        {
LABEL_111:
          if ((SBYTE7(v97) & 0x80000000) == 0) {
            goto LABEL_112;
          }
          goto LABEL_124;
        }
      }
      else if ((SHIBYTE(v98) & 0x80000000) == 0)
      {
        goto LABEL_111;
      }
      operator delete(*((void **)&v97 + 1));
      if ((SBYTE7(v97) & 0x80000000) == 0)
      {
LABEL_112:
        if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_113;
        }
        goto LABEL_125;
      }
LABEL_124:
      operator delete((void *)v96);
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_113:
        if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_114;
        }
        goto LABEL_126;
      }
LABEL_125:
      operator delete(v93.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_114:
        if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_115;
        }
        goto LABEL_127;
      }
LABEL_126:
      operator delete(v86.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_115:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_128;
      }
LABEL_127:
      operator delete(v85.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_116:
        if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_117;
        }
        goto LABEL_129;
      }
LABEL_128:
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_117:
        if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_118;
        }
        goto LABEL_130;
      }
LABEL_129:
      operator delete(v90.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_118:
        if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_119;
        }
        goto LABEL_131;
      }
LABEL_130:
      operator delete(v89.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_119:
        if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_120;
        }
LABEL_132:
        std::string::value_type v53 = (void *)v87.__r_.__value_.__r.__words[0];
LABEL_133:
        operator delete(v53);
        if (!v102) {
          return 0;
        }
        goto LABEL_134;
      }
LABEL_131:
      operator delete(v88.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_120:
        if (!v102) {
          return 0;
        }
LABEL_134:
        uint64_t v80 = 0;
        unint64_t v81 = v104;
        while (1)
        {
          uint64_t v82 = v81->i64[v80];
          if (!v82 || (*(unsigned int (**)(uint64_t))(*(void *)v82 + 32))(v82) == 17) {
            goto LABEL_136;
          }
          uint64_t v83 = v81->i64[v80];
          if (v83)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v83 + 32))(v83) == 18) {
              goto LABEL_136;
            }
            uint64_t v84 = v81->i64[v80];
            if (v84) {
              (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
            }
          }
          v81->i64[v80] = 0;
LABEL_136:
          if (++v80 == 12) {
            return 0;
          }
        }
      }
      goto LABEL_132;
    }
    if (v23 <= 0xA)
    {
      if (*(_DWORD *)(a1 + 104) != 44)
      {
        std::operator+<char>();
        uint64_t v54 = std::string::append(&v90, "'");
        long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        memset(&v88, 0, sizeof(v88));
        std::string::push_back(&v88, 48);
        std::string::push_back(&v88, 57);
        std::string::push_back(&v88, 49);
        std::string::push_back(&v88, 49);
        std::string::push_back(&v88, 50);
        std::string::size_type v56 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v57 = &v88;
        }
        else {
          uint64_t v57 = (std::string *)v88.__r_.__value_.__r.__words[0];
        }
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v56 = v88.__r_.__value_.__l.__size_;
        }
        if (v56)
        {
          uint64_t v58 = (std::string *)((char *)v57 + v56 - 1);
          if (v58 > v57)
          {
            unint64_t v59 = &v57->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v60 = *(v59 - 1);
              *(v59 - 1) = v58->__r_.__value_.__s.__data_[0];
              v58->__r_.__value_.__s.__data_[0] = v60;
              uint64_t v58 = (std::string *)((char *)v58 - 1);
              BOOL v15 = v59++ >= (char *)v58;
            }
            while (!v15);
          }
        }
        long long v61 = std::string::insert(&v88, 0, "exprtk.hpp:");
        long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
        v93.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v94 = -1;
        long long v96 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long __p = 0u;
        long long v100 = 0u;
        uint64_t v101 = 0;
        int v95 = 1;
        int v92 = *(_DWORD *)(a1 + 104);
        std::string::operator=(&v93, (const std::string *)(a1 + 112));
        uint64_t v94 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)&v96, &__str);
        std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
        uint64_t v63 = *(void *)(a1 + 568);
        uint64_t v64 = *(void *)(a1 + 560);
        uint64_t v65 = 30 * ((v63 - v64) >> 3) - 1;
        if (v63 == v64) {
          uint64_t v65 = 0;
        }
        if (v65 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v64 = *(void *)(a1 + 560);
          uint64_t v63 = *(void *)(a1 + 568);
        }
        if (v63 == v64)
        {
          uint64_t v22 = 0;
        }
        else
        {
          unint64_t v66 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v22 = *(void *)(v64 + 8 * (v66 / 0x1E)) + 136 * (v66 % 0x1E);
        }
        goto LABEL_59;
      }
      uint64_t v26 = *(void *)(a1 + 24);
      uint64_t v27 = a1 + 40;
      if (*(void *)(a1 + 8) != v26)
      {
        *(void *)(a1 + 24) = v26 + 40;
        uint64_t v27 = v26;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v27;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v27 + 8));
      *(void *)(a1 + 136) = *(void *)(v27 + 32);
    }
    ++v23;
  }
  while (v23 != 12);
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    std::operator+<char>();
    std::string::size_type v67 = std::string::append(&v90, "'");
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    memset(&v88, 0, sizeof(v88));
    std::string::push_back(&v88, 51);
    std::string::push_back(&v88, 48);
    std::string::push_back(&v88, 50);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 50);
    std::string::size_type v69 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v70 = &v88;
    }
    else {
      long long v70 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v69 = v88.__r_.__value_.__l.__size_;
    }
    if (v69)
    {
      std::string::size_type v71 = (std::string *)((char *)v70 + v69 - 1);
      if (v71 > v70)
      {
        uint64_t v72 = &v70->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v73 = *(v72 - 1);
          *(v72 - 1) = v71->__r_.__value_.__s.__data_[0];
          v71->__r_.__value_.__s.__data_[0] = v73;
          std::string::size_type v71 = (std::string *)((char *)v71 - 1);
          BOOL v15 = v72++ >= (char *)v71;
        }
        while (!v15);
      }
    }
    uint64_t v74 = std::string::insert(&v88, 0, "exprtk.hpp:");
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    uint64_t v76 = *(void *)(a1 + 568);
    uint64_t v77 = *(void *)(a1 + 560);
    uint64_t v78 = 30 * ((v76 - v77) >> 3) - 1;
    if (v76 == v77) {
      uint64_t v78 = 0;
    }
    if (v78 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v77 = *(void *)(a1 + 560);
      uint64_t v76 = *(void *)(a1 + 568);
    }
    if (v76 == v77)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v79 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v77 + 8 * (v79 / 0x1E)) + 136 * (v79 % 0x1E);
    }
    goto LABEL_59;
  }
  uint64_t v51 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) != v51)
  {
    *(void *)(a1 + 24) = v51 + 40;
    uint64_t v24 = v51;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
  *(void *)(a1 + 136) = *(void *)(v24 + 32);
  return sub_2113C4(a1 + 344, a2, &v105);
}

void sub_1FE09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a54 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a47 & 0x80000000) == 0)
      {
LABEL_8:
        sub_211708(v56 - 216);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a42);
      goto LABEL_8;
    }
  }
  else if ((a54 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a49);
  if ((a47 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_1FE2F8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

uint64_t sub_1FE310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v106 = 0;
  memset(&v105, 0, 96);
  char v102 = 1;
  uint64_t v103 = a1;
  std::string v104 = &v105;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v90, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v88, 0, sizeof(v88));
    std::string::push_back(&v88, 51);
    std::string::push_back(&v88, 54);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 50);
    std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v88;
    }
    else {
      uint64_t v11 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v88.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v88, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
LABEL_59:
    sub_B5158(v22, (uint64_t)&v92);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v100) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v98) & 0x80000000) == 0)
      {
LABEL_61:
        if ((SBYTE7(v97) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_70;
      }
    }
    else if ((SHIBYTE(v98) & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(*((void **)&v97 + 1));
    if ((SBYTE7(v97) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_71;
    }
LABEL_70:
    operator delete((void *)v96);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_72;
    }
LABEL_71:
    operator delete(v93.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_64:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
      goto LABEL_73;
    }
LABEL_72:
    operator delete(v89.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_65:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
      goto LABEL_74;
    }
LABEL_73:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_120;
      }
LABEL_75:
      std::string::value_type v53 = (void *)v90.__r_.__value_.__r.__words[0];
      goto LABEL_133;
    }
LABEL_74:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_120;
    }
    goto LABEL_75;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  unint64_t v23 = 0;
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v24 = a1 + 40;
  do
  {
    uint64_t v25 = sub_B7FE4(a1, 0);
    v105.i64[v23] = v25;
    if (!v25)
    {
      sub_B1D70(v23, (unint64_t)&v87);
      uint64_t v28 = std::string::insert(&v87, 0, "ERR019 - Failed to parse argument ");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = std::string::append(&v88, " for function: '");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      int v32 = *(char *)(a3 + 23);
      if (v32 >= 0) {
        uint64_t v33 = (const std::string::value_type *)a3;
      }
      else {
        uint64_t v33 = *(const std::string::value_type **)a3;
      }
      if (v32 >= 0) {
        std::string::size_type v34 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v34 = *(void *)(a3 + 8);
      }
      uint64_t v35 = std::string::append(&v89, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      uint64_t v37 = std::string::append(&v90, "'");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      memset(&v85, 0, sizeof(v85));
      std::string::push_back(&v85, 56);
      std::string::push_back(&v85, 55);
      std::string::push_back(&v85, 49);
      std::string::push_back(&v85, 49);
      std::string::push_back(&v85, 50);
      std::string::size_type v39 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v40 = &v85;
      }
      else {
        uint64_t v40 = (std::string *)v85.__r_.__value_.__r.__words[0];
      }
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v39 = v85.__r_.__value_.__l.__size_;
      }
      if (v39)
      {
        uint64_t v41 = (std::string *)((char *)v40 + v39 - 1);
        if (v41 > v40)
        {
          uint64_t v42 = &v40->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v43 = *(v42 - 1);
            *(v42 - 1) = v41->__r_.__value_.__s.__data_[0];
            v41->__r_.__value_.__s.__data_[0] = v43;
            uint64_t v41 = (std::string *)((char *)v41 - 1);
            BOOL v15 = v42++ >= (char *)v41;
          }
          while (!v15);
        }
      }
      uint64_t v44 = std::string::insert(&v85, 0, "exprtk.hpp:");
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
      v93.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v94 = -1;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long __p = 0u;
      long long v100 = 0u;
      uint64_t v101 = 0;
      int v95 = 1;
      int v92 = *(_DWORD *)(a1 + 104);
      std::string::operator=(&v93, (const std::string *)(a1 + 112));
      uint64_t v94 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v96, &__str);
      std::string::operator=((std::string *)((char *)&v97 + 8), &v86);
      uint64_t v46 = *(void *)(a1 + 568);
      uint64_t v47 = *(void *)(a1 + 560);
      uint64_t v48 = 30 * ((v46 - v47) >> 3) - 1;
      if (v46 == v47) {
        uint64_t v48 = 0;
      }
      if (v48 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v47 = *(void *)(a1 + 560);
        uint64_t v46 = *(void *)(a1 + 568);
      }
      if (v46 == v47)
      {
        uint64_t v50 = 0;
      }
      else
      {
        unint64_t v49 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v50 = *(void *)(v47 + 8 * (v49 / 0x1E)) + 136 * (v49 % 0x1E);
      }
      sub_B5158(v50, (uint64_t)&v92);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v100) < 0)
      {
        operator delete((void *)__p);
        if ((SHIBYTE(v98) & 0x80000000) == 0)
        {
LABEL_111:
          if ((SBYTE7(v97) & 0x80000000) == 0) {
            goto LABEL_112;
          }
          goto LABEL_124;
        }
      }
      else if ((SHIBYTE(v98) & 0x80000000) == 0)
      {
        goto LABEL_111;
      }
      operator delete(*((void **)&v97 + 1));
      if ((SBYTE7(v97) & 0x80000000) == 0)
      {
LABEL_112:
        if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_113;
        }
        goto LABEL_125;
      }
LABEL_124:
      operator delete((void *)v96);
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_113:
        if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_114;
        }
        goto LABEL_126;
      }
LABEL_125:
      operator delete(v93.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_114:
        if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_115;
        }
        goto LABEL_127;
      }
LABEL_126:
      operator delete(v86.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_115:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_128;
      }
LABEL_127:
      operator delete(v85.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_116:
        if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_117;
        }
        goto LABEL_129;
      }
LABEL_128:
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_117:
        if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_118;
        }
        goto LABEL_130;
      }
LABEL_129:
      operator delete(v90.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_118:
        if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_119;
        }
        goto LABEL_131;
      }
LABEL_130:
      operator delete(v89.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_119:
        if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_120;
        }
LABEL_132:
        std::string::value_type v53 = (void *)v87.__r_.__value_.__r.__words[0];
LABEL_133:
        operator delete(v53);
        if (!v102) {
          return 0;
        }
        goto LABEL_134;
      }
LABEL_131:
      operator delete(v88.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_120:
        if (!v102) {
          return 0;
        }
LABEL_134:
        uint64_t v80 = 0;
        unint64_t v81 = v104;
        while (1)
        {
          uint64_t v82 = v81->i64[v80];
          if (!v82 || (*(unsigned int (**)(uint64_t))(*(void *)v82 + 32))(v82) == 17) {
            goto LABEL_136;
          }
          uint64_t v83 = v81->i64[v80];
          if (v83)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v83 + 32))(v83) == 18) {
              goto LABEL_136;
            }
            uint64_t v84 = v81->i64[v80];
            if (v84) {
              (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
            }
          }
          v81->i64[v80] = 0;
LABEL_136:
          if (++v80 == 13) {
            return 0;
          }
        }
      }
      goto LABEL_132;
    }
    if (v23 <= 0xB)
    {
      if (*(_DWORD *)(a1 + 104) != 44)
      {
        std::operator+<char>();
        uint64_t v54 = std::string::append(&v90, "'");
        long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        memset(&v88, 0, sizeof(v88));
        std::string::push_back(&v88, 48);
        std::string::push_back(&v88, 57);
        std::string::push_back(&v88, 49);
        std::string::push_back(&v88, 49);
        std::string::push_back(&v88, 50);
        std::string::size_type v56 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v57 = &v88;
        }
        else {
          uint64_t v57 = (std::string *)v88.__r_.__value_.__r.__words[0];
        }
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v56 = v88.__r_.__value_.__l.__size_;
        }
        if (v56)
        {
          uint64_t v58 = (std::string *)((char *)v57 + v56 - 1);
          if (v58 > v57)
          {
            unint64_t v59 = &v57->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v60 = *(v59 - 1);
              *(v59 - 1) = v58->__r_.__value_.__s.__data_[0];
              v58->__r_.__value_.__s.__data_[0] = v60;
              uint64_t v58 = (std::string *)((char *)v58 - 1);
              BOOL v15 = v59++ >= (char *)v58;
            }
            while (!v15);
          }
        }
        long long v61 = std::string::insert(&v88, 0, "exprtk.hpp:");
        long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
        v93.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v94 = -1;
        long long v96 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long __p = 0u;
        long long v100 = 0u;
        uint64_t v101 = 0;
        int v95 = 1;
        int v92 = *(_DWORD *)(a1 + 104);
        std::string::operator=(&v93, (const std::string *)(a1 + 112));
        uint64_t v94 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)&v96, &__str);
        std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
        uint64_t v63 = *(void *)(a1 + 568);
        uint64_t v64 = *(void *)(a1 + 560);
        uint64_t v65 = 30 * ((v63 - v64) >> 3) - 1;
        if (v63 == v64) {
          uint64_t v65 = 0;
        }
        if (v65 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v64 = *(void *)(a1 + 560);
          uint64_t v63 = *(void *)(a1 + 568);
        }
        if (v63 == v64)
        {
          uint64_t v22 = 0;
        }
        else
        {
          unint64_t v66 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v22 = *(void *)(v64 + 8 * (v66 / 0x1E)) + 136 * (v66 % 0x1E);
        }
        goto LABEL_59;
      }
      uint64_t v26 = *(void *)(a1 + 24);
      uint64_t v27 = a1 + 40;
      if (*(void *)(a1 + 8) != v26)
      {
        *(void *)(a1 + 24) = v26 + 40;
        uint64_t v27 = v26;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v27;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v27 + 8));
      *(void *)(a1 + 136) = *(void *)(v27 + 32);
    }
    ++v23;
  }
  while (v23 != 13);
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    std::operator+<char>();
    std::string::size_type v67 = std::string::append(&v90, "'");
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    memset(&v88, 0, sizeof(v88));
    std::string::push_back(&v88, 51);
    std::string::push_back(&v88, 48);
    std::string::push_back(&v88, 50);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 50);
    std::string::size_type v69 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v70 = &v88;
    }
    else {
      long long v70 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v69 = v88.__r_.__value_.__l.__size_;
    }
    if (v69)
    {
      std::string::size_type v71 = (std::string *)((char *)v70 + v69 - 1);
      if (v71 > v70)
      {
        uint64_t v72 = &v70->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v73 = *(v72 - 1);
          *(v72 - 1) = v71->__r_.__value_.__s.__data_[0];
          v71->__r_.__value_.__s.__data_[0] = v73;
          std::string::size_type v71 = (std::string *)((char *)v71 - 1);
          BOOL v15 = v72++ >= (char *)v71;
        }
        while (!v15);
      }
    }
    uint64_t v74 = std::string::insert(&v88, 0, "exprtk.hpp:");
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    uint64_t v76 = *(void *)(a1 + 568);
    uint64_t v77 = *(void *)(a1 + 560);
    uint64_t v78 = 30 * ((v76 - v77) >> 3) - 1;
    if (v76 == v77) {
      uint64_t v78 = 0;
    }
    if (v78 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v77 = *(void *)(a1 + 560);
      uint64_t v76 = *(void *)(a1 + 568);
    }
    if (v76 == v77)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v79 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v77 + 8 * (v79 / 0x1E)) + 136 * (v79 % 0x1E);
    }
    goto LABEL_59;
  }
  uint64_t v51 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) != v51)
  {
    *(void *)(a1 + 24) = v51 + 40;
    uint64_t v24 = v51;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
  *(void *)(a1 + 136) = *(void *)(v24 + 32);
  return sub_212624(a1 + 344, a2, &v105);
}

void sub_1FF024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a54 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a47 & 0x80000000) == 0)
      {
LABEL_8:
        sub_212974(v56 - 216);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a42);
      goto LABEL_8;
    }
  }
  else if ((a54 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a49);
  if ((a47 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_1FF280(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

uint64_t sub_1FF298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(&v105, 0, 112);
  char v102 = 1;
  uint64_t v103 = a1;
  std::string v104 = &v105;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v90, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v88, 0, sizeof(v88));
    std::string::push_back(&v88, 51);
    std::string::push_back(&v88, 54);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 50);
    std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v88;
    }
    else {
      uint64_t v11 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v88.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v88, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
LABEL_59:
    sub_B5158(v22, (uint64_t)&v92);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v100) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v98) & 0x80000000) == 0)
      {
LABEL_61:
        if ((SBYTE7(v97) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_70;
      }
    }
    else if ((SHIBYTE(v98) & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(*((void **)&v97 + 1));
    if ((SBYTE7(v97) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_71;
    }
LABEL_70:
    operator delete((void *)v96);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_72;
    }
LABEL_71:
    operator delete(v93.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_64:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
      goto LABEL_73;
    }
LABEL_72:
    operator delete(v89.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_65:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
      goto LABEL_74;
    }
LABEL_73:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_120;
      }
LABEL_75:
      std::string::value_type v53 = (void *)v90.__r_.__value_.__r.__words[0];
      goto LABEL_133;
    }
LABEL_74:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_120;
    }
    goto LABEL_75;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  unint64_t v23 = 0;
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v24 = a1 + 40;
  do
  {
    uint64_t v25 = sub_B7FE4(a1, 0);
    v105.i64[v23] = v25;
    if (!v25)
    {
      sub_B1D70(v23, (unint64_t)&v87);
      uint64_t v28 = std::string::insert(&v87, 0, "ERR019 - Failed to parse argument ");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = std::string::append(&v88, " for function: '");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      int v32 = *(char *)(a3 + 23);
      if (v32 >= 0) {
        uint64_t v33 = (const std::string::value_type *)a3;
      }
      else {
        uint64_t v33 = *(const std::string::value_type **)a3;
      }
      if (v32 >= 0) {
        std::string::size_type v34 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v34 = *(void *)(a3 + 8);
      }
      uint64_t v35 = std::string::append(&v89, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      uint64_t v37 = std::string::append(&v90, "'");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      memset(&v85, 0, sizeof(v85));
      std::string::push_back(&v85, 56);
      std::string::push_back(&v85, 55);
      std::string::push_back(&v85, 49);
      std::string::push_back(&v85, 49);
      std::string::push_back(&v85, 50);
      std::string::size_type v39 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v40 = &v85;
      }
      else {
        uint64_t v40 = (std::string *)v85.__r_.__value_.__r.__words[0];
      }
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v39 = v85.__r_.__value_.__l.__size_;
      }
      if (v39)
      {
        uint64_t v41 = (std::string *)((char *)v40 + v39 - 1);
        if (v41 > v40)
        {
          uint64_t v42 = &v40->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v43 = *(v42 - 1);
            *(v42 - 1) = v41->__r_.__value_.__s.__data_[0];
            v41->__r_.__value_.__s.__data_[0] = v43;
            uint64_t v41 = (std::string *)((char *)v41 - 1);
            BOOL v15 = v42++ >= (char *)v41;
          }
          while (!v15);
        }
      }
      uint64_t v44 = std::string::insert(&v85, 0, "exprtk.hpp:");
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
      v93.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v94 = -1;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long __p = 0u;
      long long v100 = 0u;
      uint64_t v101 = 0;
      int v95 = 1;
      int v92 = *(_DWORD *)(a1 + 104);
      std::string::operator=(&v93, (const std::string *)(a1 + 112));
      uint64_t v94 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v96, &__str);
      std::string::operator=((std::string *)((char *)&v97 + 8), &v86);
      uint64_t v46 = *(void *)(a1 + 568);
      uint64_t v47 = *(void *)(a1 + 560);
      uint64_t v48 = 30 * ((v46 - v47) >> 3) - 1;
      if (v46 == v47) {
        uint64_t v48 = 0;
      }
      if (v48 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v47 = *(void *)(a1 + 560);
        uint64_t v46 = *(void *)(a1 + 568);
      }
      if (v46 == v47)
      {
        uint64_t v50 = 0;
      }
      else
      {
        unint64_t v49 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v50 = *(void *)(v47 + 8 * (v49 / 0x1E)) + 136 * (v49 % 0x1E);
      }
      sub_B5158(v50, (uint64_t)&v92);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v100) < 0)
      {
        operator delete((void *)__p);
        if ((SHIBYTE(v98) & 0x80000000) == 0)
        {
LABEL_111:
          if ((SBYTE7(v97) & 0x80000000) == 0) {
            goto LABEL_112;
          }
          goto LABEL_124;
        }
      }
      else if ((SHIBYTE(v98) & 0x80000000) == 0)
      {
        goto LABEL_111;
      }
      operator delete(*((void **)&v97 + 1));
      if ((SBYTE7(v97) & 0x80000000) == 0)
      {
LABEL_112:
        if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_113;
        }
        goto LABEL_125;
      }
LABEL_124:
      operator delete((void *)v96);
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_113:
        if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_114;
        }
        goto LABEL_126;
      }
LABEL_125:
      operator delete(v93.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_114:
        if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_115;
        }
        goto LABEL_127;
      }
LABEL_126:
      operator delete(v86.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_115:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_128;
      }
LABEL_127:
      operator delete(v85.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_116:
        if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_117;
        }
        goto LABEL_129;
      }
LABEL_128:
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_117:
        if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_118;
        }
        goto LABEL_130;
      }
LABEL_129:
      operator delete(v90.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_118:
        if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_119;
        }
        goto LABEL_131;
      }
LABEL_130:
      operator delete(v89.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_119:
        if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_120;
        }
LABEL_132:
        std::string::value_type v53 = (void *)v87.__r_.__value_.__r.__words[0];
LABEL_133:
        operator delete(v53);
        if (!v102) {
          return 0;
        }
        goto LABEL_134;
      }
LABEL_131:
      operator delete(v88.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_120:
        if (!v102) {
          return 0;
        }
LABEL_134:
        uint64_t v80 = 0;
        unint64_t v81 = v104;
        while (1)
        {
          uint64_t v82 = v81->i64[v80];
          if (!v82 || (*(unsigned int (**)(uint64_t))(*(void *)v82 + 32))(v82) == 17) {
            goto LABEL_136;
          }
          uint64_t v83 = v81->i64[v80];
          if (v83)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v83 + 32))(v83) == 18) {
              goto LABEL_136;
            }
            uint64_t v84 = v81->i64[v80];
            if (v84) {
              (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
            }
          }
          v81->i64[v80] = 0;
LABEL_136:
          if (++v80 == 14) {
            return 0;
          }
        }
      }
      goto LABEL_132;
    }
    if (v23 <= 0xC)
    {
      if (*(_DWORD *)(a1 + 104) != 44)
      {
        std::operator+<char>();
        uint64_t v54 = std::string::append(&v90, "'");
        long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        memset(&v88, 0, sizeof(v88));
        std::string::push_back(&v88, 48);
        std::string::push_back(&v88, 57);
        std::string::push_back(&v88, 49);
        std::string::push_back(&v88, 49);
        std::string::push_back(&v88, 50);
        std::string::size_type v56 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v57 = &v88;
        }
        else {
          uint64_t v57 = (std::string *)v88.__r_.__value_.__r.__words[0];
        }
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v56 = v88.__r_.__value_.__l.__size_;
        }
        if (v56)
        {
          uint64_t v58 = (std::string *)((char *)v57 + v56 - 1);
          if (v58 > v57)
          {
            unint64_t v59 = &v57->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v60 = *(v59 - 1);
              *(v59 - 1) = v58->__r_.__value_.__s.__data_[0];
              v58->__r_.__value_.__s.__data_[0] = v60;
              uint64_t v58 = (std::string *)((char *)v58 - 1);
              BOOL v15 = v59++ >= (char *)v58;
            }
            while (!v15);
          }
        }
        long long v61 = std::string::insert(&v88, 0, "exprtk.hpp:");
        long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
        v93.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v94 = -1;
        long long v96 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long __p = 0u;
        long long v100 = 0u;
        uint64_t v101 = 0;
        int v95 = 1;
        int v92 = *(_DWORD *)(a1 + 104);
        std::string::operator=(&v93, (const std::string *)(a1 + 112));
        uint64_t v94 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)&v96, &__str);
        std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
        uint64_t v63 = *(void *)(a1 + 568);
        uint64_t v64 = *(void *)(a1 + 560);
        uint64_t v65 = 30 * ((v63 - v64) >> 3) - 1;
        if (v63 == v64) {
          uint64_t v65 = 0;
        }
        if (v65 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v64 = *(void *)(a1 + 560);
          uint64_t v63 = *(void *)(a1 + 568);
        }
        if (v63 == v64)
        {
          uint64_t v22 = 0;
        }
        else
        {
          unint64_t v66 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v22 = *(void *)(v64 + 8 * (v66 / 0x1E)) + 136 * (v66 % 0x1E);
        }
        goto LABEL_59;
      }
      uint64_t v26 = *(void *)(a1 + 24);
      uint64_t v27 = a1 + 40;
      if (*(void *)(a1 + 8) != v26)
      {
        *(void *)(a1 + 24) = v26 + 40;
        uint64_t v27 = v26;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v27;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v27 + 8));
      *(void *)(a1 + 136) = *(void *)(v27 + 32);
    }
    ++v23;
  }
  while (v23 != 14);
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    std::operator+<char>();
    std::string::size_type v67 = std::string::append(&v90, "'");
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    memset(&v88, 0, sizeof(v88));
    std::string::push_back(&v88, 51);
    std::string::push_back(&v88, 48);
    std::string::push_back(&v88, 50);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 50);
    std::string::size_type v69 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v70 = &v88;
    }
    else {
      long long v70 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v69 = v88.__r_.__value_.__l.__size_;
    }
    if (v69)
    {
      std::string::size_type v71 = (std::string *)((char *)v70 + v69 - 1);
      if (v71 > v70)
      {
        uint64_t v72 = &v70->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v73 = *(v72 - 1);
          *(v72 - 1) = v71->__r_.__value_.__s.__data_[0];
          v71->__r_.__value_.__s.__data_[0] = v73;
          std::string::size_type v71 = (std::string *)((char *)v71 - 1);
          BOOL v15 = v72++ >= (char *)v71;
        }
        while (!v15);
      }
    }
    uint64_t v74 = std::string::insert(&v88, 0, "exprtk.hpp:");
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    uint64_t v76 = *(void *)(a1 + 568);
    uint64_t v77 = *(void *)(a1 + 560);
    uint64_t v78 = 30 * ((v76 - v77) >> 3) - 1;
    if (v76 == v77) {
      uint64_t v78 = 0;
    }
    if (v78 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v77 = *(void *)(a1 + 560);
      uint64_t v76 = *(void *)(a1 + 568);
    }
    if (v76 == v77)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v79 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v77 + 8 * (v79 / 0x1E)) + 136 * (v79 % 0x1E);
    }
    goto LABEL_59;
  }
  uint64_t v51 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) != v51)
  {
    *(void *)(a1 + 24) = v51 + 40;
    uint64_t v24 = v51;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
  *(void *)(a1 + 136) = *(void *)(v24 + 32);
  return sub_213944(a1 + 344, a2, &v105);
}

void sub_1FFFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a54 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a47 & 0x80000000) == 0)
      {
LABEL_8:
        sub_213C98(v56 - 232);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a42);
      goto LABEL_8;
    }
  }
  else if ((a54 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a49);
  if ((a47 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_200208(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

uint64_t sub_200220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v106 = 0;
  memset(&v105, 0, 112);
  char v102 = 1;
  uint64_t v103 = a1;
  std::string v104 = &v105;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v90, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v88, 0, sizeof(v88));
    std::string::push_back(&v88, 51);
    std::string::push_back(&v88, 54);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 50);
    std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v88;
    }
    else {
      uint64_t v11 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v88.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v88, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
LABEL_59:
    sub_B5158(v22, (uint64_t)&v92);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v100) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v98) & 0x80000000) == 0)
      {
LABEL_61:
        if ((SBYTE7(v97) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_70;
      }
    }
    else if ((SHIBYTE(v98) & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(*((void **)&v97 + 1));
    if ((SBYTE7(v97) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_71;
    }
LABEL_70:
    operator delete((void *)v96);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_72;
    }
LABEL_71:
    operator delete(v93.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_64:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
      goto LABEL_73;
    }
LABEL_72:
    operator delete(v89.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_65:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
      goto LABEL_74;
    }
LABEL_73:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_120;
      }
LABEL_75:
      std::string::value_type v53 = (void *)v90.__r_.__value_.__r.__words[0];
      goto LABEL_133;
    }
LABEL_74:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_120;
    }
    goto LABEL_75;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  unint64_t v23 = 0;
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v24 = a1 + 40;
  do
  {
    uint64_t v25 = sub_B7FE4(a1, 0);
    v105.i64[v23] = v25;
    if (!v25)
    {
      sub_B1D70(v23, (unint64_t)&v87);
      uint64_t v28 = std::string::insert(&v87, 0, "ERR019 - Failed to parse argument ");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = std::string::append(&v88, " for function: '");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      int v32 = *(char *)(a3 + 23);
      if (v32 >= 0) {
        uint64_t v33 = (const std::string::value_type *)a3;
      }
      else {
        uint64_t v33 = *(const std::string::value_type **)a3;
      }
      if (v32 >= 0) {
        std::string::size_type v34 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v34 = *(void *)(a3 + 8);
      }
      uint64_t v35 = std::string::append(&v89, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      uint64_t v37 = std::string::append(&v90, "'");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      memset(&v85, 0, sizeof(v85));
      std::string::push_back(&v85, 56);
      std::string::push_back(&v85, 55);
      std::string::push_back(&v85, 49);
      std::string::push_back(&v85, 49);
      std::string::push_back(&v85, 50);
      std::string::size_type v39 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v40 = &v85;
      }
      else {
        uint64_t v40 = (std::string *)v85.__r_.__value_.__r.__words[0];
      }
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v39 = v85.__r_.__value_.__l.__size_;
      }
      if (v39)
      {
        uint64_t v41 = (std::string *)((char *)v40 + v39 - 1);
        if (v41 > v40)
        {
          uint64_t v42 = &v40->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v43 = *(v42 - 1);
            *(v42 - 1) = v41->__r_.__value_.__s.__data_[0];
            v41->__r_.__value_.__s.__data_[0] = v43;
            uint64_t v41 = (std::string *)((char *)v41 - 1);
            BOOL v15 = v42++ >= (char *)v41;
          }
          while (!v15);
        }
      }
      uint64_t v44 = std::string::insert(&v85, 0, "exprtk.hpp:");
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
      v93.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v94 = -1;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long __p = 0u;
      long long v100 = 0u;
      uint64_t v101 = 0;
      int v95 = 1;
      int v92 = *(_DWORD *)(a1 + 104);
      std::string::operator=(&v93, (const std::string *)(a1 + 112));
      uint64_t v94 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v96, &__str);
      std::string::operator=((std::string *)((char *)&v97 + 8), &v86);
      uint64_t v46 = *(void *)(a1 + 568);
      uint64_t v47 = *(void *)(a1 + 560);
      uint64_t v48 = 30 * ((v46 - v47) >> 3) - 1;
      if (v46 == v47) {
        uint64_t v48 = 0;
      }
      if (v48 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v47 = *(void *)(a1 + 560);
        uint64_t v46 = *(void *)(a1 + 568);
      }
      if (v46 == v47)
      {
        uint64_t v50 = 0;
      }
      else
      {
        unint64_t v49 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v50 = *(void *)(v47 + 8 * (v49 / 0x1E)) + 136 * (v49 % 0x1E);
      }
      sub_B5158(v50, (uint64_t)&v92);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v100) < 0)
      {
        operator delete((void *)__p);
        if ((SHIBYTE(v98) & 0x80000000) == 0)
        {
LABEL_111:
          if ((SBYTE7(v97) & 0x80000000) == 0) {
            goto LABEL_112;
          }
          goto LABEL_124;
        }
      }
      else if ((SHIBYTE(v98) & 0x80000000) == 0)
      {
        goto LABEL_111;
      }
      operator delete(*((void **)&v97 + 1));
      if ((SBYTE7(v97) & 0x80000000) == 0)
      {
LABEL_112:
        if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_113;
        }
        goto LABEL_125;
      }
LABEL_124:
      operator delete((void *)v96);
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_113:
        if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_114;
        }
        goto LABEL_126;
      }
LABEL_125:
      operator delete(v93.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_114:
        if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_115;
        }
        goto LABEL_127;
      }
LABEL_126:
      operator delete(v86.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_115:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_128;
      }
LABEL_127:
      operator delete(v85.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_116:
        if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_117;
        }
        goto LABEL_129;
      }
LABEL_128:
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_117:
        if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_118;
        }
        goto LABEL_130;
      }
LABEL_129:
      operator delete(v90.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_118:
        if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_119;
        }
        goto LABEL_131;
      }
LABEL_130:
      operator delete(v89.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_119:
        if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_120;
        }
LABEL_132:
        std::string::value_type v53 = (void *)v87.__r_.__value_.__r.__words[0];
LABEL_133:
        operator delete(v53);
        if (!v102) {
          return 0;
        }
        goto LABEL_134;
      }
LABEL_131:
      operator delete(v88.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_120:
        if (!v102) {
          return 0;
        }
LABEL_134:
        uint64_t v80 = 0;
        unint64_t v81 = v104;
        while (1)
        {
          uint64_t v82 = v81->i64[v80];
          if (!v82 || (*(unsigned int (**)(uint64_t))(*(void *)v82 + 32))(v82) == 17) {
            goto LABEL_136;
          }
          uint64_t v83 = v81->i64[v80];
          if (v83)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v83 + 32))(v83) == 18) {
              goto LABEL_136;
            }
            uint64_t v84 = v81->i64[v80];
            if (v84) {
              (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
            }
          }
          v81->i64[v80] = 0;
LABEL_136:
          if (++v80 == 15) {
            return 0;
          }
        }
      }
      goto LABEL_132;
    }
    if (v23 <= 0xD)
    {
      if (*(_DWORD *)(a1 + 104) != 44)
      {
        std::operator+<char>();
        uint64_t v54 = std::string::append(&v90, "'");
        long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        memset(&v88, 0, sizeof(v88));
        std::string::push_back(&v88, 48);
        std::string::push_back(&v88, 57);
        std::string::push_back(&v88, 49);
        std::string::push_back(&v88, 49);
        std::string::push_back(&v88, 50);
        std::string::size_type v56 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v57 = &v88;
        }
        else {
          uint64_t v57 = (std::string *)v88.__r_.__value_.__r.__words[0];
        }
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v56 = v88.__r_.__value_.__l.__size_;
        }
        if (v56)
        {
          uint64_t v58 = (std::string *)((char *)v57 + v56 - 1);
          if (v58 > v57)
          {
            unint64_t v59 = &v57->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v60 = *(v59 - 1);
              *(v59 - 1) = v58->__r_.__value_.__s.__data_[0];
              v58->__r_.__value_.__s.__data_[0] = v60;
              uint64_t v58 = (std::string *)((char *)v58 - 1);
              BOOL v15 = v59++ >= (char *)v58;
            }
            while (!v15);
          }
        }
        long long v61 = std::string::insert(&v88, 0, "exprtk.hpp:");
        long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
        v93.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v94 = -1;
        long long v96 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long __p = 0u;
        long long v100 = 0u;
        uint64_t v101 = 0;
        int v95 = 1;
        int v92 = *(_DWORD *)(a1 + 104);
        std::string::operator=(&v93, (const std::string *)(a1 + 112));
        uint64_t v94 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)&v96, &__str);
        std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
        uint64_t v63 = *(void *)(a1 + 568);
        uint64_t v64 = *(void *)(a1 + 560);
        uint64_t v65 = 30 * ((v63 - v64) >> 3) - 1;
        if (v63 == v64) {
          uint64_t v65 = 0;
        }
        if (v65 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v64 = *(void *)(a1 + 560);
          uint64_t v63 = *(void *)(a1 + 568);
        }
        if (v63 == v64)
        {
          uint64_t v22 = 0;
        }
        else
        {
          unint64_t v66 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v22 = *(void *)(v64 + 8 * (v66 / 0x1E)) + 136 * (v66 % 0x1E);
        }
        goto LABEL_59;
      }
      uint64_t v26 = *(void *)(a1 + 24);
      uint64_t v27 = a1 + 40;
      if (*(void *)(a1 + 8) != v26)
      {
        *(void *)(a1 + 24) = v26 + 40;
        uint64_t v27 = v26;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v27;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v27 + 8));
      *(void *)(a1 + 136) = *(void *)(v27 + 32);
    }
    ++v23;
  }
  while (v23 != 15);
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    std::operator+<char>();
    std::string::size_type v67 = std::string::append(&v90, "'");
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    memset(&v88, 0, sizeof(v88));
    std::string::push_back(&v88, 51);
    std::string::push_back(&v88, 48);
    std::string::push_back(&v88, 50);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 50);
    std::string::size_type v69 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v70 = &v88;
    }
    else {
      long long v70 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v69 = v88.__r_.__value_.__l.__size_;
    }
    if (v69)
    {
      std::string::size_type v71 = (std::string *)((char *)v70 + v69 - 1);
      if (v71 > v70)
      {
        uint64_t v72 = &v70->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v73 = *(v72 - 1);
          *(v72 - 1) = v71->__r_.__value_.__s.__data_[0];
          v71->__r_.__value_.__s.__data_[0] = v73;
          std::string::size_type v71 = (std::string *)((char *)v71 - 1);
          BOOL v15 = v72++ >= (char *)v71;
        }
        while (!v15);
      }
    }
    uint64_t v74 = std::string::insert(&v88, 0, "exprtk.hpp:");
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    uint64_t v76 = *(void *)(a1 + 568);
    uint64_t v77 = *(void *)(a1 + 560);
    uint64_t v78 = 30 * ((v76 - v77) >> 3) - 1;
    if (v76 == v77) {
      uint64_t v78 = 0;
    }
    if (v78 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v77 = *(void *)(a1 + 560);
      uint64_t v76 = *(void *)(a1 + 568);
    }
    if (v76 == v77)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v79 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v77 + 8 * (v79 / 0x1E)) + 136 * (v79 % 0x1E);
    }
    goto LABEL_59;
  }
  uint64_t v51 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) != v51)
  {
    *(void *)(a1 + 24) = v51 + 40;
    uint64_t v24 = v51;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
  *(void *)(a1 + 136) = *(void *)(v24 + 32);
  return sub_214D04(a1 + 344, a2, &v105);
}

void sub_200F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a54 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a47 & 0x80000000) == 0)
      {
LABEL_8:
        sub_215060(v56 - 232);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a42);
      goto LABEL_8;
    }
  }
  else if ((a54 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a49);
  if ((a47 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_201194(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

uint64_t sub_2011AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(&v105, 0, 128);
  char v102 = 1;
  uint64_t v103 = a1;
  std::string v104 = &v105;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v90, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v88, 0, sizeof(v88));
    std::string::push_back(&v88, 51);
    std::string::push_back(&v88, 54);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 50);
    std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v88;
    }
    else {
      uint64_t v11 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v88.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v88, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
LABEL_59:
    sub_B5158(v22, (uint64_t)&v92);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v100) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v98) & 0x80000000) == 0)
      {
LABEL_61:
        if ((SBYTE7(v97) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_70;
      }
    }
    else if ((SHIBYTE(v98) & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(*((void **)&v97 + 1));
    if ((SBYTE7(v97) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_71;
    }
LABEL_70:
    operator delete((void *)v96);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_72;
    }
LABEL_71:
    operator delete(v93.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_64:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
      goto LABEL_73;
    }
LABEL_72:
    operator delete(v89.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_65:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
      goto LABEL_74;
    }
LABEL_73:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_120;
      }
LABEL_75:
      std::string::value_type v53 = (void *)v90.__r_.__value_.__r.__words[0];
      goto LABEL_133;
    }
LABEL_74:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_120;
    }
    goto LABEL_75;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  unint64_t v23 = 0;
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v24 = a1 + 40;
  do
  {
    uint64_t v25 = sub_B7FE4(a1, 0);
    v105.i64[v23] = v25;
    if (!v25)
    {
      sub_B1D70(v23, (unint64_t)&v87);
      uint64_t v28 = std::string::insert(&v87, 0, "ERR019 - Failed to parse argument ");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = std::string::append(&v88, " for function: '");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      int v32 = *(char *)(a3 + 23);
      if (v32 >= 0) {
        uint64_t v33 = (const std::string::value_type *)a3;
      }
      else {
        uint64_t v33 = *(const std::string::value_type **)a3;
      }
      if (v32 >= 0) {
        std::string::size_type v34 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v34 = *(void *)(a3 + 8);
      }
      uint64_t v35 = std::string::append(&v89, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      uint64_t v37 = std::string::append(&v90, "'");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      memset(&v85, 0, sizeof(v85));
      std::string::push_back(&v85, 56);
      std::string::push_back(&v85, 55);
      std::string::push_back(&v85, 49);
      std::string::push_back(&v85, 49);
      std::string::push_back(&v85, 50);
      std::string::size_type v39 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v40 = &v85;
      }
      else {
        uint64_t v40 = (std::string *)v85.__r_.__value_.__r.__words[0];
      }
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v39 = v85.__r_.__value_.__l.__size_;
      }
      if (v39)
      {
        uint64_t v41 = (std::string *)((char *)v40 + v39 - 1);
        if (v41 > v40)
        {
          uint64_t v42 = &v40->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v43 = *(v42 - 1);
            *(v42 - 1) = v41->__r_.__value_.__s.__data_[0];
            v41->__r_.__value_.__s.__data_[0] = v43;
            uint64_t v41 = (std::string *)((char *)v41 - 1);
            BOOL v15 = v42++ >= (char *)v41;
          }
          while (!v15);
        }
      }
      uint64_t v44 = std::string::insert(&v85, 0, "exprtk.hpp:");
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
      v93.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v94 = -1;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long __p = 0u;
      long long v100 = 0u;
      uint64_t v101 = 0;
      int v95 = 1;
      int v92 = *(_DWORD *)(a1 + 104);
      std::string::operator=(&v93, (const std::string *)(a1 + 112));
      uint64_t v94 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v96, &__str);
      std::string::operator=((std::string *)((char *)&v97 + 8), &v86);
      uint64_t v46 = *(void *)(a1 + 568);
      uint64_t v47 = *(void *)(a1 + 560);
      uint64_t v48 = 30 * ((v46 - v47) >> 3) - 1;
      if (v46 == v47) {
        uint64_t v48 = 0;
      }
      if (v48 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v47 = *(void *)(a1 + 560);
        uint64_t v46 = *(void *)(a1 + 568);
      }
      if (v46 == v47)
      {
        uint64_t v50 = 0;
      }
      else
      {
        unint64_t v49 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v50 = *(void *)(v47 + 8 * (v49 / 0x1E)) + 136 * (v49 % 0x1E);
      }
      sub_B5158(v50, (uint64_t)&v92);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v100) < 0)
      {
        operator delete((void *)__p);
        if ((SHIBYTE(v98) & 0x80000000) == 0)
        {
LABEL_111:
          if ((SBYTE7(v97) & 0x80000000) == 0) {
            goto LABEL_112;
          }
          goto LABEL_124;
        }
      }
      else if ((SHIBYTE(v98) & 0x80000000) == 0)
      {
        goto LABEL_111;
      }
      operator delete(*((void **)&v97 + 1));
      if ((SBYTE7(v97) & 0x80000000) == 0)
      {
LABEL_112:
        if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_113;
        }
        goto LABEL_125;
      }
LABEL_124:
      operator delete((void *)v96);
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_113:
        if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_114;
        }
        goto LABEL_126;
      }
LABEL_125:
      operator delete(v93.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_114:
        if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_115;
        }
        goto LABEL_127;
      }
LABEL_126:
      operator delete(v86.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_115:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_128;
      }
LABEL_127:
      operator delete(v85.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_116:
        if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_117;
        }
        goto LABEL_129;
      }
LABEL_128:
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_117:
        if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_118;
        }
        goto LABEL_130;
      }
LABEL_129:
      operator delete(v90.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_118:
        if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_119;
        }
        goto LABEL_131;
      }
LABEL_130:
      operator delete(v89.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_119:
        if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_120;
        }
LABEL_132:
        std::string::value_type v53 = (void *)v87.__r_.__value_.__r.__words[0];
LABEL_133:
        operator delete(v53);
        if (!v102) {
          return 0;
        }
        goto LABEL_134;
      }
LABEL_131:
      operator delete(v88.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_120:
        if (!v102) {
          return 0;
        }
LABEL_134:
        uint64_t v80 = 0;
        unint64_t v81 = v104;
        while (1)
        {
          uint64_t v82 = v81->i64[v80];
          if (!v82 || (*(unsigned int (**)(uint64_t))(*(void *)v82 + 32))(v82) == 17) {
            goto LABEL_136;
          }
          uint64_t v83 = v81->i64[v80];
          if (v83)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v83 + 32))(v83) == 18) {
              goto LABEL_136;
            }
            uint64_t v84 = v81->i64[v80];
            if (v84) {
              (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
            }
          }
          v81->i64[v80] = 0;
LABEL_136:
          if (++v80 == 16) {
            return 0;
          }
        }
      }
      goto LABEL_132;
    }
    if (v23 <= 0xE)
    {
      if (*(_DWORD *)(a1 + 104) != 44)
      {
        std::operator+<char>();
        uint64_t v54 = std::string::append(&v90, "'");
        long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        memset(&v88, 0, sizeof(v88));
        std::string::push_back(&v88, 48);
        std::string::push_back(&v88, 57);
        std::string::push_back(&v88, 49);
        std::string::push_back(&v88, 49);
        std::string::push_back(&v88, 50);
        std::string::size_type v56 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v57 = &v88;
        }
        else {
          uint64_t v57 = (std::string *)v88.__r_.__value_.__r.__words[0];
        }
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v56 = v88.__r_.__value_.__l.__size_;
        }
        if (v56)
        {
          uint64_t v58 = (std::string *)((char *)v57 + v56 - 1);
          if (v58 > v57)
          {
            unint64_t v59 = &v57->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v60 = *(v59 - 1);
              *(v59 - 1) = v58->__r_.__value_.__s.__data_[0];
              v58->__r_.__value_.__s.__data_[0] = v60;
              uint64_t v58 = (std::string *)((char *)v58 - 1);
              BOOL v15 = v59++ >= (char *)v58;
            }
            while (!v15);
          }
        }
        long long v61 = std::string::insert(&v88, 0, "exprtk.hpp:");
        long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
        v93.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v94 = -1;
        long long v96 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long __p = 0u;
        long long v100 = 0u;
        uint64_t v101 = 0;
        int v95 = 1;
        int v92 = *(_DWORD *)(a1 + 104);
        std::string::operator=(&v93, (const std::string *)(a1 + 112));
        uint64_t v94 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)&v96, &__str);
        std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
        uint64_t v63 = *(void *)(a1 + 568);
        uint64_t v64 = *(void *)(a1 + 560);
        uint64_t v65 = 30 * ((v63 - v64) >> 3) - 1;
        if (v63 == v64) {
          uint64_t v65 = 0;
        }
        if (v65 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v64 = *(void *)(a1 + 560);
          uint64_t v63 = *(void *)(a1 + 568);
        }
        if (v63 == v64)
        {
          uint64_t v22 = 0;
        }
        else
        {
          unint64_t v66 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v22 = *(void *)(v64 + 8 * (v66 / 0x1E)) + 136 * (v66 % 0x1E);
        }
        goto LABEL_59;
      }
      uint64_t v26 = *(void *)(a1 + 24);
      uint64_t v27 = a1 + 40;
      if (*(void *)(a1 + 8) != v26)
      {
        *(void *)(a1 + 24) = v26 + 40;
        uint64_t v27 = v26;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v27;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v27 + 8));
      *(void *)(a1 + 136) = *(void *)(v27 + 32);
    }
    ++v23;
  }
  while (v23 != 16);
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    std::operator+<char>();
    std::string::size_type v67 = std::string::append(&v90, "'");
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    memset(&v88, 0, sizeof(v88));
    std::string::push_back(&v88, 51);
    std::string::push_back(&v88, 48);
    std::string::push_back(&v88, 50);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 50);
    std::string::size_type v69 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v70 = &v88;
    }
    else {
      long long v70 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v69 = v88.__r_.__value_.__l.__size_;
    }
    if (v69)
    {
      std::string::size_type v71 = (std::string *)((char *)v70 + v69 - 1);
      if (v71 > v70)
      {
        uint64_t v72 = &v70->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v73 = *(v72 - 1);
          *(v72 - 1) = v71->__r_.__value_.__s.__data_[0];
          v71->__r_.__value_.__s.__data_[0] = v73;
          std::string::size_type v71 = (std::string *)((char *)v71 - 1);
          BOOL v15 = v72++ >= (char *)v71;
        }
        while (!v15);
      }
    }
    uint64_t v74 = std::string::insert(&v88, 0, "exprtk.hpp:");
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    uint64_t v76 = *(void *)(a1 + 568);
    uint64_t v77 = *(void *)(a1 + 560);
    uint64_t v78 = 30 * ((v76 - v77) >> 3) - 1;
    if (v76 == v77) {
      uint64_t v78 = 0;
    }
    if (v78 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v77 = *(void *)(a1 + 560);
      uint64_t v76 = *(void *)(a1 + 568);
    }
    if (v76 == v77)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v79 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v77 + 8 * (v79 / 0x1E)) + 136 * (v79 % 0x1E);
    }
    goto LABEL_59;
  }
  uint64_t v51 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) != v51)
  {
    *(void *)(a1 + 24) = v51 + 40;
    uint64_t v24 = v51;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
  *(void *)(a1 + 136) = *(void *)(v24 + 32);
  return sub_216178(a1 + 344, a2, &v105);
}

void sub_201EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,char a56)
{
  if (a33 < 0)
  {
    operator delete(__p);
    if ((a54 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a47 & 0x80000000) == 0)
      {
LABEL_8:
        sub_216478(v56 - 248);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a42);
      goto LABEL_8;
    }
  }
  else if ((a54 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a49);
  if ((a47 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_20211C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_58CC(exception_object);
}

uint64_t sub_202134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v106 = 0;
  memset(&v105, 0, 128);
  char v102 = 1;
  uint64_t v103 = a1;
  std::string v104 = &v105;
  uint64_t v6 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v6) {
    uint64_t v6 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v6 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v6;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v6 + 8));
  *(void *)(a1 + 136) = *(void *)(v6 + 32);
  if (*(_DWORD *)(a1 + 104) != 40)
  {
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v90, "'");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    memset(&v88, 0, sizeof(v88));
    std::string::push_back(&v88, 51);
    std::string::push_back(&v88, 54);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 50);
    std::string::size_type size = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v88;
    }
    else {
      uint64_t v11 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v88.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      long long v12 = (std::string *)((char *)v11 + size - 1);
      if (v12 > v11)
      {
        long long v13 = &v11->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v14 = *(v13 - 1);
          *(v13 - 1) = v12->__r_.__value_.__s.__data_[0];
          v12->__r_.__value_.__s.__data_[0] = v14;
          long long v12 = (std::string *)((char *)v12 - 1);
          BOOL v15 = v13++ >= (char *)v12;
        }
        while (!v15);
      }
    }
    uint64_t v16 = std::string::insert(&v88, 0, "exprtk.hpp:");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    uint64_t v18 = *(void *)(a1 + 568);
    uint64_t v19 = *(void *)(a1 + 560);
    uint64_t v20 = 30 * ((v18 - v19) >> 3) - 1;
    if (v18 == v19) {
      uint64_t v20 = 0;
    }
    if (v20 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v19 = *(void *)(a1 + 560);
      uint64_t v18 = *(void *)(a1 + 568);
    }
    if (v18 == v19)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v21 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v19 + 8 * (v21 / 0x1E)) + 136 * (v21 % 0x1E);
    }
LABEL_59:
    sub_B5158(v22, (uint64_t)&v92);
    ++*(void *)(a1 + 592);
    if (SBYTE7(v100) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v98) & 0x80000000) == 0)
      {
LABEL_61:
        if ((SBYTE7(v97) & 0x80000000) == 0) {
          goto LABEL_62;
        }
        goto LABEL_70;
      }
    }
    else if ((SHIBYTE(v98) & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
    operator delete(*((void **)&v97 + 1));
    if ((SBYTE7(v97) & 0x80000000) == 0)
    {
LABEL_62:
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_71;
    }
LABEL_70:
    operator delete((void *)v96);
    if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_63:
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_64;
      }
      goto LABEL_72;
    }
LABEL_71:
    operator delete(v93.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_64:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
      goto LABEL_73;
    }
LABEL_72:
    operator delete(v89.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_65:
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_66;
      }
      goto LABEL_74;
    }
LABEL_73:
    operator delete(v88.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_120;
      }
LABEL_75:
      std::string::value_type v53 = (void *)v90.__r_.__value_.__r.__words[0];
      goto LABEL_133;
    }
LABEL_74:
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_120;
    }
    goto LABEL_75;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) == v7) {
    uint64_t v7 = a1 + 40;
  }
  else {
    *(void *)(a1 + 24) = v7 + 40;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v7;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v7 + 8));
  unint64_t v23 = 0;
  *(void *)(a1 + 136) = *(void *)(v7 + 32);
  uint64_t v24 = a1 + 40;
  do
  {
    uint64_t v25 = sub_B7FE4(a1, 0);
    v105.i64[v23] = v25;
    if (!v25)
    {
      sub_B1D70(v23, (unint64_t)&v87);
      uint64_t v28 = std::string::insert(&v87, 0, "ERR019 - Failed to parse argument ");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = std::string::append(&v88, " for function: '");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      int v32 = *(char *)(a3 + 23);
      if (v32 >= 0) {
        uint64_t v33 = (const std::string::value_type *)a3;
      }
      else {
        uint64_t v33 = *(const std::string::value_type **)a3;
      }
      if (v32 >= 0) {
        std::string::size_type v34 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v34 = *(void *)(a3 + 8);
      }
      uint64_t v35 = std::string::append(&v89, v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v90.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      uint64_t v37 = std::string::append(&v90, "'");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      memset(&v85, 0, sizeof(v85));
      std::string::push_back(&v85, 56);
      std::string::push_back(&v85, 55);
      std::string::push_back(&v85, 49);
      std::string::push_back(&v85, 49);
      std::string::push_back(&v85, 50);
      std::string::size_type v39 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v40 = &v85;
      }
      else {
        uint64_t v40 = (std::string *)v85.__r_.__value_.__r.__words[0];
      }
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v39 = v85.__r_.__value_.__l.__size_;
      }
      if (v39)
      {
        uint64_t v41 = (std::string *)((char *)v40 + v39 - 1);
        if (v41 > v40)
        {
          uint64_t v42 = &v40->__r_.__value_.__s.__data_[1];
          do
          {
            std::string::value_type v43 = *(v42 - 1);
            *(v42 - 1) = v41->__r_.__value_.__s.__data_[0];
            v41->__r_.__value_.__s.__data_[0] = v43;
            uint64_t v41 = (std::string *)((char *)v41 - 1);
            BOOL v15 = v42++ >= (char *)v41;
          }
          while (!v15);
        }
      }
      uint64_t v44 = std::string::insert(&v85, 0, "exprtk.hpp:");
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
      v93.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v94 = -1;
      long long v96 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long __p = 0u;
      long long v100 = 0u;
      uint64_t v101 = 0;
      int v95 = 1;
      int v92 = *(_DWORD *)(a1 + 104);
      std::string::operator=(&v93, (const std::string *)(a1 + 112));
      uint64_t v94 = *(void *)(a1 + 136);
      std::string::operator=((std::string *)&v96, &__str);
      std::string::operator=((std::string *)((char *)&v97 + 8), &v86);
      uint64_t v46 = *(void *)(a1 + 568);
      uint64_t v47 = *(void *)(a1 + 560);
      uint64_t v48 = 30 * ((v46 - v47) >> 3) - 1;
      if (v46 == v47) {
        uint64_t v48 = 0;
      }
      if (v48 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
      {
        sub_B4B88(a1 + 552);
        uint64_t v47 = *(void *)(a1 + 560);
        uint64_t v46 = *(void *)(a1 + 568);
      }
      if (v46 == v47)
      {
        uint64_t v50 = 0;
      }
      else
      {
        unint64_t v49 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
        uint64_t v50 = *(void *)(v47 + 8 * (v49 / 0x1E)) + 136 * (v49 % 0x1E);
      }
      sub_B5158(v50, (uint64_t)&v92);
      ++*(void *)(a1 + 592);
      if (SBYTE7(v100) < 0)
      {
        operator delete((void *)__p);
        if ((SHIBYTE(v98) & 0x80000000) == 0)
        {
LABEL_111:
          if ((SBYTE7(v97) & 0x80000000) == 0) {
            goto LABEL_112;
          }
          goto LABEL_124;
        }
      }
      else if ((SHIBYTE(v98) & 0x80000000) == 0)
      {
        goto LABEL_111;
      }
      operator delete(*((void **)&v97 + 1));
      if ((SBYTE7(v97) & 0x80000000) == 0)
      {
LABEL_112:
        if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_113;
        }
        goto LABEL_125;
      }
LABEL_124:
      operator delete((void *)v96);
      if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_113:
        if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_114;
        }
        goto LABEL_126;
      }
LABEL_125:
      operator delete(v93.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_114:
        if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_115;
        }
        goto LABEL_127;
      }
LABEL_126:
      operator delete(v86.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_115:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_116;
        }
        goto LABEL_128;
      }
LABEL_127:
      operator delete(v85.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_116:
        if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_117;
        }
        goto LABEL_129;
      }
LABEL_128:
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_117:
        if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_118;
        }
        goto LABEL_130;
      }
LABEL_129:
      operator delete(v90.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v89.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_118:
        if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_119;
        }
        goto LABEL_131;
      }
LABEL_130:
      operator delete(v89.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_119:
        if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_120;
        }
LABEL_132:
        std::string::value_type v53 = (void *)v87.__r_.__value_.__r.__words[0];
LABEL_133:
        operator delete(v53);
        if (!v102) {
          return 0;
        }
        goto LABEL_134;
      }
LABEL_131:
      operator delete(v88.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_120:
        if (!v102) {
          return 0;
        }
LABEL_134:
        uint64_t v80 = 0;
        unint64_t v81 = v104;
        while (1)
        {
          uint64_t v82 = v81->i64[v80];
          if (!v82 || (*(unsigned int (**)(uint64_t))(*(void *)v82 + 32))(v82) == 17) {
            goto LABEL_136;
          }
          uint64_t v83 = v81->i64[v80];
          if (v83)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v83 + 32))(v83) == 18) {
              goto LABEL_136;
            }
            uint64_t v84 = v81->i64[v80];
            if (v84) {
              (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
            }
          }
          v81->i64[v80] = 0;
LABEL_136:
          if (++v80 == 17) {
            return 0;
          }
        }
      }
      goto LABEL_132;
    }
    if (v23 <= 0xF)
    {
      if (*(_DWORD *)(a1 + 104) != 44)
      {
        std::operator+<char>();
        uint64_t v54 = std::string::append(&v90, "'");
        long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v55;
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        memset(&v88, 0, sizeof(v88));
        std::string::push_back(&v88, 48);
        std::string::push_back(&v88, 57);
        std::string::push_back(&v88, 49);
        std::string::push_back(&v88, 49);
        std::string::push_back(&v88, 50);
        std::string::size_type v56 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v57 = &v88;
        }
        else {
          uint64_t v57 = (std::string *)v88.__r_.__value_.__r.__words[0];
        }
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v56 = v88.__r_.__value_.__l.__size_;
        }
        if (v56)
        {
          uint64_t v58 = (std::string *)((char *)v57 + v56 - 1);
          if (v58 > v57)
          {
            unint64_t v59 = &v57->__r_.__value_.__s.__data_[1];
            do
            {
              std::string::value_type v60 = *(v59 - 1);
              *(v59 - 1) = v58->__r_.__value_.__s.__data_[0];
              v58->__r_.__value_.__s.__data_[0] = v60;
              uint64_t v58 = (std::string *)((char *)v58 - 1);
              BOOL v15 = v59++ >= (char *)v58;
            }
            while (!v15);
          }
        }
        long long v61 = std::string::insert(&v88, 0, "exprtk.hpp:");
        long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
        v89.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v62;
        v61->__r_.__value_.__l.__size_ = 0;
        v61->__r_.__value_.__r.__words[2] = 0;
        v61->__r_.__value_.__r.__words[0] = 0;
        *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
        v93.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v94 = -1;
        long long v96 = 0u;
        long long v97 = 0u;
        long long v98 = 0u;
        long long __p = 0u;
        long long v100 = 0u;
        uint64_t v101 = 0;
        int v95 = 1;
        int v92 = *(_DWORD *)(a1 + 104);
        std::string::operator=(&v93, (const std::string *)(a1 + 112));
        uint64_t v94 = *(void *)(a1 + 136);
        std::string::operator=((std::string *)&v96, &__str);
        std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
        uint64_t v63 = *(void *)(a1 + 568);
        uint64_t v64 = *(void *)(a1 + 560);
        uint64_t v65 = 30 * ((v63 - v64) >> 3) - 1;
        if (v63 == v64) {
          uint64_t v65 = 0;
        }
        if (v65 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
        {
          sub_B4B88(a1 + 552);
          uint64_t v64 = *(void *)(a1 + 560);
          uint64_t v63 = *(void *)(a1 + 568);
        }
        if (v63 == v64)
        {
          uint64_t v22 = 0;
        }
        else
        {
          unint64_t v66 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
          uint64_t v22 = *(void *)(v64 + 8 * (v66 / 0x1E)) + 136 * (v66 % 0x1E);
        }
        goto LABEL_59;
      }
      uint64_t v26 = *(void *)(a1 + 24);
      uint64_t v27 = a1 + 40;
      if (*(void *)(a1 + 8) != v26)
      {
        *(void *)(a1 + 24) = v26 + 40;
        uint64_t v27 = v26;
      }
      *(_DWORD *)(a1 + 104) = *(_DWORD *)v27;
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v27 + 8));
      *(void *)(a1 + 136) = *(void *)(v27 + 32);
    }
    ++v23;
  }
  while (v23 != 17);
  if (*(_DWORD *)(a1 + 104) != 41)
  {
    std::operator+<char>();
    std::string::size_type v67 = std::string::append(&v90, "'");
    long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    memset(&v88, 0, sizeof(v88));
    std::string::push_back(&v88, 51);
    std::string::push_back(&v88, 48);
    std::string::push_back(&v88, 50);
    std::string::push_back(&v88, 49);
    std::string::push_back(&v88, 50);
    std::string::size_type v69 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v70 = &v88;
    }
    else {
      long long v70 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v69 = v88.__r_.__value_.__l.__size_;
    }
    if (v69)
    {
      std::string::size_type v71 = (std::string *)((char *)v70 + v69 - 1);
      if (v71 > v70)
      {
        uint64_t v72 = &v70->__r_.__value_.__s.__data_[1];
        do
        {
          std::string::value_type v73 = *(v72 - 1);
          *(v72 - 1) = v71->__r_.__value_.__s.__data_[0];
          v71->__r_.__value_.__s.__data_[0] = v73;
          std::string::size_type v71 = (std::string *)((char *)v71 - 1);
          BOOL v15 = v72++ >= (char *)v71;
        }
        while (!v15);
      }
    }
    uint64_t v74 = std::string::insert(&v88, 0, "exprtk.hpp:");
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    *((unsigned char *)&v93.__r_.__value_.__s + 23) = 0;
    v93.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v94 = -1;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v98 = 0u;
    long long __p = 0u;
    long long v100 = 0u;
    uint64_t v101 = 0;
    int v95 = 1;
    int v92 = *(_DWORD *)(a1 + 104);
    std::string::operator=(&v93, (const std::string *)(a1 + 112));
    uint64_t v94 = *(void *)(a1 + 136);
    std::string::operator=((std::string *)&v96, &__str);
    std::string::operator=((std::string *)((char *)&v97 + 8), &v89);
    uint64_t v76 = *(void *)(a1 + 568);
    uint64_t v77 = *(void *)(a1 + 560);
    uint64_t v78 = 30 * ((v76 - v77) >> 3) - 1;
    if (v76 == v77) {
      uint64_t v78 = 0;
    }
    if (v78 == *(void *)(a1 + 592) + *(void *)(a1 + 584))
    {
      sub_B4B88(a1 + 552);
      uint64_t v77 = *(void *)(a1 + 560);
      uint64_t v76 = *(void *)(a1 + 568);
    }
    if (v76 == v77)
    {
      uint64_t v22 = 0;
    }
    else
    {
      unint64_t v79 = *(void *)(a1 + 592) + *(void *)(a1 + 584);
      uint64_t v22 = *(void *)(v77 + 8 * (v79 / 0x1E)) + 136 * (v79 % 0x1E);
    }
    goto LABEL_59;
  }
  uint64_t v51 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 8) != v51)
  {
    *(void *)(a1 + 24) = v51 + 40;
    uint64_t v24 = v51;
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)v24;
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v24 + 8));
  *(void *)(a1 + 136) = *(void *)(v24 + 32);
  return sub_21760C(a1 + 344, a2, &v105);
}