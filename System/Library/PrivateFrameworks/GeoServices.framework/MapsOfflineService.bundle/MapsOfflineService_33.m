uint64_t *sub_E5CE50(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  void **v4;
  void **v5;
  void *v6;
  void *v8;
  void **v9;
  uint64_t v10;
  void *v11[3];
  void *__p;
  long long v13;

  *a1 = a2;
  HIBYTE(v11[2]) = 20;
  strcpy((char *)v11, "PlaceResponseBuilder");
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v3 = sub_374CDC(a2, (uint64_t)v11, (uint64_t *)&v8);
  __p = operator new(0x30uLL);
  v13 = xmmword_20B93C0;
  strcpy((char *)__p, "hike_geometry_simplification_tolerance_m");
  a1[1] = sub_5CDE0(v3, &__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p);
  }
  v4 = (void **)v8;
  if (v8)
  {
    v5 = v9;
    v6 = v8;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v5 - 1) < 0) {
          operator delete(*(v5 - 3));
        }
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = v8;
    }
    v9 = v4;
    operator delete(v6);
  }
  if (SHIBYTE(v11[2]) < 0) {
    operator delete(v11[0]);
  }
  return a1;
}

void sub_E5CF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
  {
    operator delete(__p);
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668(&a10);
    if ((a18 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(a13);
  _Unwind_Resume(a1);
}

void sub_E5CFFC(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_182E158(a3, 0, 0);
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  if (*(void *)a2 != v7)
  {
    do
    {
      v8 = *(_DWORD **)(a3 + 64);
      if (v8 && (uint64_t v9 = *(int *)(a3 + 56), (int)v9 < *v8))
      {
        *(_DWORD *)(a3 + 56) = v9 + 1;
        uint64_t v10 = *(void *)&v8[2 * v9 + 2];
      }
      else
      {
        uint64_t v11 = sub_178CDA8(*(void *)(a3 + 48));
        uint64_t v10 = sub_188CDC8(a3 + 48, v11);
      }
      _X8 = v6 + 2448;
      __asm { PRFM            #0, [X8] }
      int v18 = sub_E12498(*(_DWORD *)v6);
      int v19 = *(_DWORD *)(v10 + 40);
      *(_DWORD *)(v10 + 128) = v18;
      *(_DWORD *)(v10 + 40) = v19 | 0x11;
      uint64_t v20 = *(void *)(v10 + 96);
      if (!v20)
      {
        uint64_t v21 = *(void *)(v10 + 8);
        v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
        if (v21) {
          v22 = (void *)*v22;
        }
        uint64_t v20 = sub_185089C((uint64_t)v22);
        *(void *)(v10 + 96) = v20;
      }
      _X8 = v6 + 4888;
      __asm { PRFM            #0, [X8] }
      uint64_t v25 = *(void *)(v6 + 2440);
      uint64_t v41 = -1;
      int v42 = 0x7FFFFFFF;
      sub_E6C4D8(v25, &v41, v20, NAN);
      uint64_t v26 = *(void *)(v6 + 2440);
      if (v26 != -1)
      {
        uint64_t v26 = nullsub_1(v26);
        *(_DWORD *)(v10 + 40) |= 4u;
        *(void *)(v10 + 112) = v26;
      }
      if (!*(_DWORD *)v6)
      {
        sub_E5D2B0(v26, a2, v6, v10);
        sub_E5D538(v27, a2, v6, v10);
        sub_E5D888(v28, a2, v6, v10);
        sub_E5DAD4(a1, a2, v6, v10);
        sub_E5DD58(v30, v29, a2, v6, v10);
        sub_E5E4A0(v32, v31, a2, v6, v10);
        sub_E5E890(v33, a2, v6, v10);
        sub_E5F1A8(v34, a2, v6, v10);
        sub_E5F48C((uint64_t)a1, a2, v6, v10);
        sub_E5F894((uint64_t)a1, a2, v6, v10);
        sub_E5FADC((uint64_t)a1, a2, v6, v10, v35);
        sub_E5FCA8(v36, a2, v6, v10);
        sub_E5FF98(a1, a2, v6, v10);
        sub_E606C0(v37, a2, v6, v10);
        sub_E60B18(v38, a2, v6, v10);
        sub_E60E48((uint64_t)a1, a2, v6, v10);
      }
      v6 += 2448;
    }
    while (v6 != v7);
  }
  int v39 = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a3 + 40) = v39 | 0x20;
  *(_DWORD *)(a3 + 208) = 0;
  int v40 = *(_DWORD *)(a2 + 24);
  if (v40)
  {
    *(_DWORD *)(a3 + 40) = v39 | 0x60;
    *(_DWORD *)(a3 + 212) = v40;
  }
}

void sub_E5D29C(_Unwind_Exception *a1)
{
  sub_182E7B8(v1);
  _Unwind_Resume(a1);
}

void sub_E5D2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 30))
  {
    v5 = *(_DWORD **)(a4 + 64);
    if (v5 && (uint64_t v6 = *(int *)(a4 + 56), (int)v6 < *v5))
    {
      *(_DWORD *)(a4 + 56) = v6 + 1;
      uint64_t v7 = *(void *)&v5[2 * v6 + 2];
    }
    else
    {
      uint64_t v8 = a4 + 48;
      uint64_t v9 = sub_178B458(*(void *)(a4 + 48));
      uint64_t v7 = sub_188CDC8(v8, v9);
    }
    uint64_t v10 = *(int *)(v7 + 56);
    int v11 = *(_DWORD *)(v7 + 40);
    *(_DWORD *)(v7 + 160) = v10;
    int v12 = v11 | 0x84;
    *(_DWORD *)(v7 + 40) = v11 | 0x84;
    *(_DWORD *)(v7 + 136) = 24;
    int v13 = *(_DWORD *)(a3 + 1456);
    if (v13 != 0x7FFFFFFF)
    {
      int v14 = v13 / 10;
      int v15 = v13 % 10;
      if (v13 < 0) {
        char v16 = -5;
      }
      else {
        char v16 = 5;
      }
      unsigned int v17 = v14 + (((103 * (char)(v16 + v15)) >> 15) & 1) + ((103 * (char)(v16 + v15)) >> 10);
      int v12 = v11 | 0xA4;
      *(_DWORD *)(v7 + 152) = v17;
    }
    *(_DWORD *)(v7 + 168) = *(_DWORD *)(a3 + 1460);
    int v18 = v12 | 0x208;
    *(_DWORD *)(v7 + 40) = v12 | 0x208;
    *(_DWORD *)(v7 + 140) = 0;
    if (*(void *)(a3 + 1464) != *(void *)(a3 + 1472))
    {
      int v19 = *(_DWORD **)(v7 + 64);
      if (v19 && (int)v10 < *v19)
      {
        int v20 = v10 + 1;
        *(_DWORD *)(v7 + 56) = v10 + 1;
        uint64_t v21 = *(void *)&v19[2 * v10 + 2];
      }
      else
      {
        uint64_t v22 = sub_178B3A0(*(void *)(v7 + 48));
        uint64_t v21 = sub_188CDC8(v7 + 48, v22);
        int v20 = *(_DWORD *)(v7 + 56);
        int v18 = *(_DWORD *)(v7 + 40);
      }
      *(_DWORD *)(v7 + 40) = v18 | 0x80;
      *(_DWORD *)(v7 + 160) = v20;
      *(_DWORD *)(v21 + 40) |= 0x100000u;
      uint64_t v23 = *(void *)(v21 + 224);
      if (!v23)
      {
        uint64_t v24 = *(void *)(v21 + 8);
        uint64_t v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
        if (v24) {
          uint64_t v25 = (void *)*v25;
        }
        uint64_t v23 = sub_1787A04((uint64_t)v25);
        *(void *)(v21 + 224) = v23;
      }
      uint64_t v26 = *(const std::string **)(a3 + 1464);
      uint64_t v27 = *(const std::string **)(a3 + 1472);
      if (v26 != v27)
      {
        uint64_t v28 = (uint64_t **)(v23 + 40);
        do
        {
          while (1)
          {
            uint64_t v29 = *(_DWORD **)(v23 + 56);
            if (!v29) {
              break;
            }
            uint64_t v30 = *(int *)(v23 + 48);
            if ((int)v30 >= *v29) {
              break;
            }
            *(_DWORD *)(v23 + 48) = v30 + 1;
            std::string::operator=(*(std::string **)&v29[2 * v30 + 2], v26++);
            if (v26 == v27) {
              return;
            }
          }
          if (!*v28) {
            operator new();
          }
          *double v32 = v31;
          v32[1] = sub_3A6EDC;
          *uint64_t v31 = 0;
          v31[1] = 0;
          v31[2] = 0;
          uint64_t v33 = (std::string *)sub_188CDC8(v23 + 40, (uint64_t)v31);
          std::string::operator=(v33, v26++);
        }
        while (v26 != v27);
      }
    }
  }
}

void sub_E5D538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 39))
  {
    uint64_t v5 = a3 + 8;
    uint64_t v6 = *(_DWORD **)(a4 + 64);
    if (v6 && (uint64_t v7 = *(int *)(a4 + 56), (int)v7 < *v6))
    {
      *(_DWORD *)(a4 + 56) = v7 + 1;
      uint64_t v8 = *(void *)&v6[2 * v7 + 2];
    }
    else
    {
      uint64_t v9 = a4 + 48;
      uint64_t v10 = sub_178B458(*(void *)(a4 + 48));
      uint64_t v8 = sub_188CDC8(v9, v10);
    }
    int v11 = *(_DWORD *)(v8 + 40);
    *(_DWORD *)(v8 + 160) = *(_DWORD *)(v8 + 56);
    int v12 = v11 | 0x84;
    *(_DWORD *)(v8 + 40) = v11 | 0x84;
    *(_DWORD *)(v8 + 136) = 4;
    int v13 = *(_DWORD *)(a3 + 16);
    if (v13 != 0x7FFFFFFF)
    {
      int v14 = v13 / 10;
      int v15 = v13 % 10;
      if (v13 < 0) {
        char v16 = -5;
      }
      else {
        char v16 = 5;
      }
      unsigned int v17 = v14 + (((103 * (char)(v16 + v15)) >> 15) & 1) + ((103 * (char)(v16 + v15)) >> 10);
      int v12 = v11 | 0xA4;
      *(_DWORD *)(v8 + 152) = v17;
    }
    *(_DWORD *)(v8 + 168) = *(_DWORD *)(a3 + 20);
    *(_DWORD *)(v8 + 40) = v12 | 0x208;
    *(_DWORD *)(v8 + 140) = 0;
    if ((**(unsigned int (***)(uint64_t))(a3 + 8))(v5))
    {
      int v19 = *(_DWORD **)(v8 + 64);
      if (v19 && (uint64_t v20 = *(int *)(v8 + 56), (int)v20 < *v19))
      {
        int v21 = v20 + 1;
        *(_DWORD *)(v8 + 56) = v20 + 1;
        uint64_t v22 = *(void *)&v19[2 * v20 + 2];
      }
      else
      {
        uint64_t v23 = sub_178B3A0(*(void *)(v8 + 48));
        uint64_t v22 = sub_188CDC8(v8 + 48, v23);
        int v21 = *(_DWORD *)(v8 + 56);
      }
      *(_DWORD *)(v8 + 40) |= 0x80u;
      *(_DWORD *)(v8 + 160) = v21;
      *(_DWORD *)(v22 + 40) |= 8u;
      uint64_t v24 = *(void *)(v22 + 88);
      if (v24)
      {
        *(_DWORD *)(v24 + 40) |= 2u;
        uint64_t v25 = *(void *)(v24 + 56);
        if (v25)
        {
LABEL_25:
          LODWORD(v18) = *(_DWORD *)(a3 + 36);
          double v30 = (double)v18 * 360.0 / 4294967300.0 + -180.0;
          int v31 = *(_DWORD *)(v25 + 16);
          *(_DWORD *)(v25 + 16) = v31 | 8;
          *(double *)(v25 + 72) = v30;
          LODWORD(v30) = *(_DWORD *)(a3 + 40);
          long double v32 = exp(3.14159265 - (double)*(unint64_t *)&v30 * 6.28318531 / 4294967300.0);
          long double v33 = atan((v32 - 1.0 / v32) * 0.5) * 57.2957795;
          *(_DWORD *)(v25 + 16) = v31 | 0xC;
          *(long double *)(v25 + 64) = v33;
          LODWORD(v33) = *(_DWORD *)(a3 + 28);
          long double v34 = exp(3.14159265 - (double)*(unint64_t *)&v33 * 6.28318531 / 4294967300.0);
          long double v35 = atan((v34 - 1.0 / v34) * 0.5);
          *(_DWORD *)(v25 + 16) = v31 | 0xD;
          LODWORD(v36) = *(_DWORD *)(a3 + 24);
          *(_DWORD *)(v25 + 16) = v31 | 0xF;
          *(long double *)(v25 + 48) = v35 * 57.2957795;
          *(double *)(v25 + 56) = (double)v36 * 360.0 / 4294967300.0 + -180.0;
          return;
        }
      }
      else
      {
        uint64_t v26 = *(void *)(v22 + 8);
        uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if (v26) {
          uint64_t v27 = (void *)*v27;
        }
        uint64_t v24 = sub_17868E0((uint64_t)v27);
        *(void *)(v22 + 88) = v24;
        *(_DWORD *)(v24 + 40) |= 2u;
        uint64_t v25 = *(void *)(v24 + 56);
        if (v25) {
          goto LABEL_25;
        }
      }
      uint64_t v28 = *(void *)(v24 + 8);
      uint64_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFCLL);
      if (v28) {
        uint64_t v29 = (void *)*v29;
      }
      uint64_t v25 = sub_15C19EC((uint64_t)v29);
      *(void *)(v24 + 56) = v25;
      goto LABEL_25;
    }
  }
}

void sub_E5D888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a2 + 40)) {
    return;
  }
  uint64_t v5 = *(_DWORD **)(a4 + 64);
  if (v5 && (uint64_t v6 = *(int *)(a4 + 56), (int)v6 < *v5))
  {
    *(_DWORD *)(a4 + 56) = v6 + 1;
    uint64_t v7 = *(void *)&v5[2 * v6 + 2];
  }
  else
  {
    uint64_t v8 = a4 + 48;
    uint64_t v9 = sub_178B458(*(void *)(a4 + 48));
    uint64_t v7 = sub_188CDC8(v8, v9);
  }
  uint64_t v10 = *(int *)(v7 + 56);
  int v11 = *(_DWORD *)(v7 + 40);
  *(_DWORD *)(v7 + 160) = v10;
  int v12 = v11 | 0x84;
  *(_DWORD *)(v7 + 40) = v11 | 0x84;
  *(_DWORD *)(v7 + 136) = 1;
  int v13 = *(_DWORD *)(a3 + 56);
  if (v13 != 0x7FFFFFFF)
  {
    int v14 = v13 / 10;
    int v15 = v13 % 10;
    if (v13 < 0) {
      char v16 = -5;
    }
    else {
      char v16 = 5;
    }
    unsigned int v17 = v14 + (((103 * (char)(v16 + v15)) >> 15) & 1) + ((103 * (char)(v16 + v15)) >> 10);
    int v12 = v11 | 0xA4;
    *(_DWORD *)(v7 + 152) = v17;
  }
  *(_DWORD *)(v7 + 168) = *(_DWORD *)(a3 + 60);
  int v18 = v12 | 0x208;
  *(_DWORD *)(v7 + 40) = v12 | 0x208;
  *(_DWORD *)(v7 + 140) = 0;
  int v19 = *(_DWORD **)(v7 + 64);
  if (v19 && (int)v10 < *v19)
  {
    int v20 = v10 + 1;
    *(_DWORD *)(v7 + 56) = v10 + 1;
    uint64_t v21 = *(void *)&v19[2 * v10 + 2];
  }
  else
  {
    uint64_t v22 = sub_178B3A0(*(void *)(v7 + 48));
    uint64_t v21 = sub_188CDC8(v7 + 48, v22);
    int v20 = *(_DWORD *)(v7 + 56);
    int v18 = *(_DWORD *)(v7 + 40);
  }
  *(_DWORD *)(v7 + 40) = v18 | 0x80;
  *(_DWORD *)(v7 + 160) = v20;
  *(_DWORD *)(v21 + 40) |= 1u;
  uint64_t v23 = *(void *)(v21 + 64);
  if (v23)
  {
    uint64_t v24 = a3 + 64;
    if (!sub_76538(v24)) {
      return;
    }
    goto LABEL_17;
  }
  uint64_t v29 = *(void *)(v21 + 8);
  double v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
  if (v29) {
    double v30 = (void *)*v30;
  }
  uint64_t v23 = sub_1786348((uint64_t)v30);
  *(void *)(v21 + 64) = v23;
  uint64_t v24 = a3 + 64;
  if (sub_76538(v24))
  {
LABEL_17:
    uint64_t v25 = *(_DWORD **)(v23 + 136);
    if (v25 && (uint64_t v26 = *(int *)(v23 + 128), (int)v26 < *v25))
    {
      *(_DWORD *)(v23 + 128) = v26 + 1;
      uint64_t v27 = *(void *)&v25[2 * v26 + 2];
      uint64_t v28 = (long long *)v24;
    }
    else
    {
      int v31 = sub_15C1B30(*(void *)(v23 + 120));
      uint64_t v27 = sub_188CDC8(v23 + 120, (uint64_t)v31);
      uint64_t v28 = (long long *)v24;
    }
    sub_E15EC8(v28, v27);
  }
}

void sub_E5DAD4(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 31))
  {
    uint64_t v7 = a3 + 1528;
    uint64_t v8 = *(_DWORD **)(a4 + 64);
    if (v8 && (uint64_t v9 = *(int *)(a4 + 56), (int)v9 < *v8))
    {
      *(_DWORD *)(a4 + 56) = v9 + 1;
      uint64_t v10 = *(void *)&v8[2 * v9 + 2];
    }
    else
    {
      uint64_t v11 = a4 + 48;
      uint64_t v12 = sub_178B458(*(void *)(a4 + 48));
      uint64_t v10 = sub_188CDC8(v11, v12);
    }
    int v13 = *(_DWORD *)(v10 + 40);
    *(_DWORD *)(v10 + 160) = *(_DWORD *)(v10 + 56);
    int v14 = v13 | 0x84;
    *(_DWORD *)(v10 + 40) = v13 | 0x84;
    *(_DWORD *)(v10 + 136) = 20;
    int v15 = *(_DWORD *)(a3 + 1536);
    if (v15 != 0x7FFFFFFF)
    {
      int v16 = v15 / 10;
      int v17 = v15 % 10;
      if (v15 < 0) {
        char v18 = -5;
      }
      else {
        char v18 = 5;
      }
      unsigned int v19 = v16 + (((103 * (char)(v18 + v17)) >> 15) & 1) + ((103 * (char)(v18 + v17)) >> 10);
      int v14 = v13 | 0xA4;
      *(_DWORD *)(v10 + 152) = v19;
    }
    *(_DWORD *)(v10 + 168) = *(_DWORD *)(a3 + 1540);
    *(_DWORD *)(v10 + 40) = v14 | 0x208;
    *(_DWORD *)(v10 + 140) = 0;
    if ((**(unsigned int (***)(uint64_t))(a3 + 1528))(v7))
    {
      int v20 = *(_DWORD **)(v10 + 64);
      if (v20 && (uint64_t v21 = *(int *)(v10 + 56), (int)v21 < *v20))
      {
        int v22 = v21 + 1;
        *(_DWORD *)(v10 + 56) = v21 + 1;
        uint64_t v23 = *(void *)&v20[2 * v21 + 2];
      }
      else
      {
        uint64_t v24 = sub_178B3A0(*(void *)(v10 + 48));
        uint64_t v23 = sub_188CDC8(v10 + 48, v24);
        int v22 = *(_DWORD *)(v10 + 56);
      }
      *(_DWORD *)(v10 + 40) |= 0x80u;
      *(_DWORD *)(v10 + 160) = v22;
      *(_DWORD *)(v23 + 40) |= 0x10000u;
      uint64_t v25 = *(void *)(v23 + 192);
      if (!v25)
      {
        uint64_t v26 = *(void *)(v23 + 8);
        uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if (v26) {
          uint64_t v27 = (void *)*v27;
        }
        uint64_t v25 = sub_17878EC((uint64_t)v27);
        *(void *)(v23 + 192) = v25;
      }
      uint64_t v28 = *(void *)(a3 + 1544);
      uint64_t v29 = *(void *)(a3 + 1552);
      if (v28 != v29)
      {
        uint64_t v30 = a2 + 1016;
        do
        {
          long double v33 = *a1;
          long double v34 = *(_DWORD **)(v25 + 32);
          if (v34 && (uint64_t v35 = *(int *)(v25 + 24), (int)v35 < *v34))
          {
            *(_DWORD *)(v25 + 24) = v35 + 1;
            uint64_t v32 = *(void *)&v34[2 * v35 + 2];
          }
          else
          {
            uint64_t v31 = sub_13324AC(*(void *)(v25 + 16));
            uint64_t v32 = sub_188CDC8(v25 + 16, v31);
          }
          sub_E69384(v28, v30, v33, v32);
          v28 += 456;
        }
        while (v28 != v29);
      }
    }
  }
}

void sub_E5DD58(uint8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a3 + 28))
  {
    uint64_t v6 = *(_DWORD **)(a5 + 64);
    if (v6 && (uint64_t v7 = *(int *)(a5 + 56), (int)v7 < *v6))
    {
      *(_DWORD *)(a5 + 56) = v7 + 1;
      uint64_t v8 = *(void *)&v6[2 * v7 + 2];
    }
    else
    {
      uint64_t v9 = a5 + 48;
      uint64_t v10 = sub_178B458(*(void *)(a5 + 48));
      uint64_t v8 = sub_188CDC8(v9, v10);
    }
    uint64_t v11 = *(int *)(v8 + 56);
    int v12 = *(_DWORD *)(v8 + 40);
    *(_DWORD *)(v8 + 160) = v11;
    int v13 = v12 | 0x84;
    *(_DWORD *)(v8 + 40) = v12 | 0x84;
    *(_DWORD *)(v8 + 136) = 10;
    int v14 = *(_DWORD *)(a4 + 1576);
    if (v14 != 0x7FFFFFFF)
    {
      int v15 = v14 / 10;
      int v16 = v14 % 10;
      if (v14 < 0) {
        char v17 = -5;
      }
      else {
        char v17 = 5;
      }
      unsigned int v18 = v15 + (((103 * (char)(v17 + v16)) >> 15) & 1) + ((103 * (char)(v17 + v16)) >> 10);
      int v13 = v12 | 0xA4;
      *(_DWORD *)(v8 + 152) = v18;
    }
    *(_DWORD *)(v8 + 168) = *(_DWORD *)(a4 + 1580);
    int v19 = v13 | 0x208;
    *(_DWORD *)(v8 + 40) = v13 | 0x208;
    *(_DWORD *)(v8 + 140) = 0;
    int v20 = *(_DWORD **)(v8 + 64);
    if (v20 && (int)v11 < *v20)
    {
      int v21 = v11 + 1;
      *(_DWORD *)(v8 + 56) = v11 + 1;
      uint64_t v22 = *(void *)&v20[2 * v11 + 2];
    }
    else
    {
      uint64_t v23 = sub_178B3A0(*(void *)(v8 + 48));
      uint64_t v22 = sub_188CDC8(v8 + 48, v23);
      int v21 = *(_DWORD *)(v8 + 56);
      int v19 = *(_DWORD *)(v8 + 40);
    }
    *(_DWORD *)(v8 + 40) = v19 | 0x80;
    *(_DWORD *)(v8 + 160) = v21;
    *(_DWORD *)(v22 + 40) |= 0x200u;
    uint64_t v24 = *(void **)(v22 + 136);
    if (!v24)
    {
      uint64_t v25 = *(void *)(v22 + 8);
      uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if (v25) {
        uint64_t v26 = (void *)*v26;
      }
      uint64_t v24 = sub_1787760((uint64_t)v26);
      *(void *)(v22 + 136) = v24;
    }
    uint64_t v27 = *(void *)(a4 + 1584);
    for (uint64_t i = *(void *)(a4 + 1592); v27 != i; v27 += 696)
    {
      uint64_t v32 = (_DWORD *)v24[8];
      if (v32 && (uint64_t v33 = *((int *)v24 + 14), (int)v33 < *v32))
      {
        int v31 = v33 + 1;
        *((_DWORD *)v24 + 14) = v33 + 1;
        uint64_t v30 = *(void *)&v32[2 * v33 + 2];
      }
      else
      {
        uint64_t v29 = sub_13321CC(v24[6]);
        uint64_t v30 = sub_188CDC8((uint64_t)(v24 + 6), v29);
        int v31 = *((_DWORD *)v24 + 14);
      }
      *(_DWORD *)(v30 + 40) |= 0x4000u;
      *(_DWORD *)(v30 + 164) = v31 - 1;
      sub_E6B1CC(v27, v30);
    }
    uint64_t v34 = *(void *)(a4 + 1608);
    for (uint64_t j = *(void *)(a4 + 1616); v34 != j; v34 += 208)
    {
      int v39 = (_DWORD *)v24[11];
      if (v39 && (uint64_t v40 = *((int *)v24 + 20), (int)v40 < *v39))
      {
        int v38 = v40 + 1;
        *((_DWORD *)v24 + 20) = v40 + 1;
        uint64_t v37 = *(void *)&v39[2 * v40 + 2];
      }
      else
      {
        uint64_t v36 = sub_13322E0(v24[9]);
        uint64_t v37 = sub_188CDC8((uint64_t)(v24 + 9), v36);
        int v38 = *((_DWORD *)v24 + 20);
      }
      *(_DWORD *)(v37 + 40) |= 0x40u;
      *(_DWORD *)(v37 + 92) = v38 - 1;
      sub_E6B5C4(v34, v37);
    }
    uint64_t v41 = *(void *)(a4 + 1632);
    uint64_t v100 = a4;
    uint64_t v42 = *(void *)(a4 + 1640);
    if (v41 != v42)
    {
      do
      {
        v43 = (_DWORD *)v24[20];
        if (v43 && (uint64_t v44 = *((int *)v24 + 38), (int)v44 < *v43))
        {
          *((_DWORD *)v24 + 38) = v44 + 1;
          uint64_t v45 = *(void *)&v43[2 * v44 + 2];
        }
        else
        {
          uint64_t v46 = sub_17876E0(v24[18]);
          uint64_t v45 = sub_188CDC8((uint64_t)(v24 + 18), v46);
        }
        uint64_t v47 = nullsub_1(*(void *)v41);
        int v48 = *(_DWORD *)(v45 + 16);
        *(void *)(v45 + 32) = v47;
        *(_DWORD *)(v45 + 16) = v48 | 3;
        v49 = *(void **)(v45 + 24);
        if (!v49)
        {
          uint64_t v50 = *(void *)(v45 + 8);
          v51 = (void *)(v50 & 0xFFFFFFFFFFFFFFFCLL);
          if (v50) {
            v51 = (void *)*v51;
          }
          v49 = sub_15C221C((uint64_t)v51);
          *(void *)(v45 + 24) = v49;
        }
        *((_DWORD *)v49 + 4) |= 1u;
        uint64_t v52 = v49[1];
        v53 = (uint64_t *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
        if (v52) {
          v53 = (uint64_t *)*v53;
        }
        uint64_t v54 = v41 + 32;
        sub_1881DF4((std::string **)v49 + 3, (long long *)(v41 + 32), v53);
        int v55 = *(_DWORD *)(v41 + 144);
        if (v55 != 0x7FFFFFFF)
        {
          int v56 = v55 / 10;
          int v57 = v55 % 10;
          if (v55 < 0) {
            char v58 = -5;
          }
          else {
            char v58 = 5;
          }
          *(_DWORD *)(v45 + 16) |= 4u;
          *(_DWORD *)(v45 + 40) = v56
                                + (((103 * (char)(v58 + v57)) >> 15) & 1)
                                + ((103 * (char)(v58 + v57)) >> 10);
        }
        v41 += 152;
      }
      while (v54 + 120 != v42);
    }
    v59 = *(int **)(v100 + 1656);
    for (k = *(int **)(v100 + 1664); v59 != k; v59 += 36)
    {
      while (1)
      {
        v64 = (_DWORD *)v24[14];
        if (v64)
        {
          uint64_t v65 = *((int *)v24 + 26);
          if ((int)v65 < *v64) {
            break;
          }
        }
        uint64_t v61 = sub_1787818(v24[12]);
        uint64_t v62 = sub_188CDC8((uint64_t)(v24 + 12), v61);
        sub_E6B75C(v59, v62, v63);
        v59 += 36;
        if (v59 == k) {
          goto LABEL_57;
        }
      }
      *((_DWORD *)v24 + 26) = v65 + 1;
      sub_E6B75C(v59, *(void *)&v64[2 * v65 + 2], a1);
    }
LABEL_57:
    v66 = *(void **)(v100 + 1680);
    for (m = *(void **)(v100 + 1688); v66 != m; v66 += 9)
    {
      while (1)
      {
        v68 = (_DWORD *)v24[17];
        if (v68 && (uint64_t v69 = *((int *)v24 + 32), (int)v69 < *v68))
        {
          *((_DWORD *)v24 + 32) = v69 + 1;
          uint64_t v70 = *(void *)&v68[2 * v69 + 2];
          v72 = (int *)v66[3];
          for (n = (int *)v66[4]; v72 != n; v72 += 36)
          {
LABEL_65:
            while (1)
            {
              v77 = *(_DWORD **)(v70 + 64);
              if (v77)
              {
                uint64_t v78 = *(int *)(v70 + 56);
                if ((int)v78 < *v77) {
                  break;
                }
              }
              uint64_t v74 = sub_1787818(*(void *)(v70 + 48));
              uint64_t v75 = sub_188CDC8(v70 + 48, v74);
              sub_E6B75C(v72, v75, v76);
              v72 += 36;
              if (v72 == n) {
                goto LABEL_68;
              }
            }
            *(_DWORD *)(v70 + 56) = v78 + 1;
            sub_E6B75C(v72, *(void *)&v77[2 * v78 + 2], a1);
          }
        }
        else
        {
          v73 = sub_17877BC(v24[15]);
          uint64_t v70 = sub_188CDC8((uint64_t)(v24 + 15), (uint64_t)v73);
          v72 = (int *)v66[3];
          n = (int *)v66[4];
          if (v72 != n) {
            goto LABEL_65;
          }
        }
LABEL_68:
        uint64_t v79 = nullsub_1(*v66);
        int v81 = *(_DWORD *)(v70 + 40);
        *(void *)(v70 + 88) = v79;
        *(_DWORD *)(v70 + 40) = v81 | 6;
        uint64_t v82 = *(void *)(v70 + 80);
        if (!v82)
        {
          uint64_t v83 = *(void *)(v70 + 8);
          v84 = (void *)(v83 & 0xFFFFFFFFFFFFFFFCLL);
          if (v83) {
            v84 = (void *)*v84;
          }
          uint64_t v82 = sub_185089C((uint64_t)v84);
          *(void *)(v70 + 80) = v82;
        }
        sub_E6C4D8(*v66, (_DWORD *)v66 + 2, v82, v80);
        *(_DWORD *)(v70 + 40) |= 1u;
        uint64_t v85 = *(void *)(v70 + 8);
        v86 = (uint64_t *)(v85 & 0xFFFFFFFFFFFFFFFCLL);
        if (v85) {
          break;
        }
        sub_1881DF4((std::string **)(v70 + 72), (long long *)v66 + 3, v86);
        v66 += 9;
        if (v66 == m) {
          goto LABEL_76;
        }
      }
      sub_1881DF4((std::string **)(v70 + 72), (long long *)v66 + 3, (uint64_t *)*v86);
    }
LABEL_76:
    uint64_t v87 = *(unsigned __int8 *)(v100 + 1727);
    if ((v87 & 0x80u) != 0) {
      uint64_t v87 = *(void *)(v100 + 1712);
    }
    if (v87)
    {
      *((_DWORD *)v24 + 10) |= 2u;
      uint64_t v88 = v24[1];
      v89 = (uint64_t *)(v88 & 0xFFFFFFFFFFFFFFFCLL);
      if (v88) {
        v89 = (uint64_t *)*v89;
      }
      sub_1881DF4((std::string **)v24 + 22, (long long *)(v100 + 1704), v89);
    }
    uint64_t v90 = *(unsigned __int8 *)(v100 + 1751);
    if ((v90 & 0x80u) != 0) {
      uint64_t v90 = *(void *)(v100 + 1736);
    }
    if (v90)
    {
      *((_DWORD *)v24 + 10) |= 4u;
      uint64_t v91 = v24[1];
      v92 = (uint64_t *)(v91 & 0xFFFFFFFFFFFFFFFCLL);
      if (v91) {
        v92 = (uint64_t *)*v92;
      }
      sub_1881DF4((std::string **)v24 + 23, (long long *)(v100 + 1728), v92);
    }
    uint64_t v93 = *(unsigned __int8 *)(v100 + 1775);
    if ((v93 & 0x80u) != 0) {
      uint64_t v93 = *(void *)(v100 + 1760);
    }
    if (v93)
    {
      *((_DWORD *)v24 + 10) |= 1u;
      uint64_t v94 = v24[1];
      v95 = (uint64_t *)(v94 & 0xFFFFFFFFFFFFFFFCLL);
      if (v94) {
        v95 = (uint64_t *)*v95;
      }
      sub_1881DF4((std::string **)v24 + 21, (long long *)(v100 + 1752), v95);
    }
    uint64_t v96 = *(void *)(v100 + 1776);
    if (v96 != -1)
    {
      *((_DWORD *)v24 + 10) |= 8u;
      uint64_t v97 = v24[24];
      if (!v97)
      {
        uint64_t v98 = v24[1];
        v99 = (void *)(v98 & 0xFFFFFFFFFFFFFFFCLL);
        if (v98) {
          v99 = (void *)*v99;
        }
        uint64_t v97 = sub_185089C((uint64_t)v99);
        v24[24] = v97;
        uint64_t v96 = *(void *)(v100 + 1776);
      }
      uint64_t v101 = -1;
      int v102 = 0x7FFFFFFF;
      sub_E6C4D8(v96, &v101, v97, NAN);
    }
  }
}

void sub_E5E4A0(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(unsigned char *)(a3 + 29))
  {
    uint64_t v6 = *(_DWORD **)(a5 + 64);
    if (v6 && (uint64_t v7 = *(int *)(a5 + 56), (int)v7 < *v6))
    {
      *(_DWORD *)(a5 + 56) = v7 + 1;
      uint64_t v8 = *(void *)&v6[2 * v7 + 2];
    }
    else
    {
      uint64_t v9 = a5 + 48;
      uint64_t v10 = sub_178B458(*(void *)(a5 + 48));
      uint64_t v8 = sub_188CDC8(v9, v10);
    }
    uint64_t v11 = *(int *)(v8 + 56);
    int v12 = *(_DWORD *)(v8 + 40);
    *(_DWORD *)(v8 + 160) = v11;
    int v13 = v12 | 0x84;
    *(_DWORD *)(v8 + 40) = v12 | 0x84;
    *(_DWORD *)(v8 + 136) = 27;
    int v14 = *(_DWORD *)(a4 + 1792);
    if (v14 != 0x7FFFFFFF)
    {
      int v15 = v14 / 10;
      int v16 = v14 % 10;
      if (v14 < 0) {
        char v17 = -5;
      }
      else {
        char v17 = 5;
      }
      unsigned int v18 = v15 + (((103 * (char)(v17 + v16)) >> 15) & 1) + ((103 * (char)(v17 + v16)) >> 10);
      int v13 = v12 | 0xA4;
      *(_DWORD *)(v8 + 152) = v18;
    }
    *(_DWORD *)(v8 + 168) = *(_DWORD *)(a4 + 1796);
    int v19 = v13 | 0x208;
    *(_DWORD *)(v8 + 40) = v13 | 0x208;
    *(_DWORD *)(v8 + 140) = 0;
    int v20 = *(_DWORD **)(v8 + 64);
    if (v20 && (int)v11 < *v20)
    {
      int v21 = v11 + 1;
      *(_DWORD *)(v8 + 56) = v11 + 1;
      uint64_t v22 = *(void *)&v20[2 * v11 + 2];
    }
    else
    {
      uint64_t v23 = sub_178B3A0(*(void *)(v8 + 48));
      uint64_t v22 = sub_188CDC8(v8 + 48, v23);
      int v21 = *(_DWORD *)(v8 + 56);
      int v19 = *(_DWORD *)(v8 + 40);
    }
    *(_DWORD *)(v8 + 40) = v19 | 0x80;
    *(_DWORD *)(v8 + 160) = v21;
    *(_DWORD *)(v22 + 40) |= 0x800000u;
    uint64_t v24 = *(void *)(v22 + 248);
    if (!v24)
    {
      uint64_t v25 = *(void *)(v22 + 8);
      uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if (v25) {
        uint64_t v26 = (void *)*v26;
      }
      uint64_t v24 = sub_178760C((uint64_t)v26);
      *(void *)(v22 + 248) = v24;
    }
    uint64_t v27 = *(void *)(a4 + 1800);
    if (v27 != -1)
    {
      uint64_t v28 = nullsub_1(v27);
      *(_DWORD *)(v24 + 40) |= 0x20u;
      *(void *)(v24 + 160) = v28;
    }
    uint64_t v29 = *(unsigned __int8 *)(a4 + 1943);
    if ((v29 & 0x80u) != 0) {
      uint64_t v29 = *(void *)(a4 + 1928);
    }
    if (v29)
    {
      *(_DWORD *)(v24 + 40) |= 1u;
      uint64_t v30 = *(void *)(v24 + 8);
      int v31 = (uint64_t *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
      if (v30) {
        int v31 = (uint64_t *)*v31;
      }
      sub_1881DF4((std::string **)(v24 + 120), (long long *)(a4 + 1920), v31);
    }
    uint64_t v32 = *(unsigned __int8 *)(a4 + 1831);
    if ((v32 & 0x80u) != 0) {
      uint64_t v32 = *(void *)(a4 + 1816);
    }
    if (v32)
    {
      *(_DWORD *)(v24 + 40) |= 2u;
      uint64_t v33 = *(void *)(v24 + 8);
      uint64_t v34 = (uint64_t *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
      if (v33) {
        uint64_t v34 = (uint64_t *)*v34;
      }
      sub_1881DF4((std::string **)(v24 + 128), (long long *)(a4 + 1808), v34);
    }
    uint64_t v35 = *(unsigned __int8 *)(a4 + 1855);
    if ((v35 & 0x80u) != 0) {
      uint64_t v35 = *(void *)(a4 + 1840);
    }
    if (v35)
    {
      *(_DWORD *)(v24 + 40) |= 4u;
      uint64_t v36 = *(void **)(v24 + 136);
      if (!v36)
      {
        uint64_t v37 = *(void *)(v24 + 8);
        int v38 = (void *)(v37 & 0xFFFFFFFFFFFFFFFCLL);
        if (v37) {
          int v38 = (void *)*v38;
        }
        uint64_t v36 = sub_15C221C((uint64_t)v38);
        *(void *)(v24 + 136) = v36;
      }
      *((_DWORD *)v36 + 4) |= 1u;
      int v39 = (std::string **)(v36 + 3);
      uint64_t v40 = v36[1];
      uint64_t v41 = (uint64_t *)(v40 & 0xFFFFFFFFFFFFFFFCLL);
      if (v40) {
        uint64_t v41 = (uint64_t *)*v41;
      }
      sub_1881DF4(v39, (long long *)(a4 + 1832), v41);
    }
    if (*(_DWORD *)(a4 + 1856) != -1 || *(_DWORD *)(a4 + 1860) != -1)
    {
      *(_DWORD *)(v24 + 40) |= 8u;
      uint64_t v42 = *(void *)(v24 + 144);
      if (!v42)
      {
        uint64_t v43 = *(void *)(v24 + 8);
        uint64_t v44 = (void *)(v43 & 0xFFFFFFFFFFFFFFFCLL);
        if (v43) {
          uint64_t v44 = (void *)*v44;
        }
        uint64_t v42 = sub_15C1918((uint64_t)v44);
        *(void *)(v24 + 144) = v42;
      }
      a1 = sub_E112BC((_DWORD *)(a4 + 1856), v42, a1);
    }
    if (*(void *)(a4 + 1872) != *(void *)(a4 + 1880))
    {
      *(_DWORD *)(v24 + 40) |= 0x10u;
      uint64_t v45 = *(void **)(v24 + 152);
      if (!v45)
      {
        uint64_t v46 = *(void *)(v24 + 8);
        uint64_t v47 = (void *)(v46 & 0xFFFFFFFFFFFFFFFCLL);
        if (v46) {
          uint64_t v47 = (void *)*v47;
        }
        uint64_t v45 = sub_1478C60((uint64_t)v47);
        *(void *)(v24 + 152) = v45;
      }
      sub_3E9CB0(a4 + 1872, (uint64_t)v45);
    }
    int v48 = *(int **)(a4 + 1896);
    for (uint64_t i = *(int **)(a4 + 1904); v48 != i; v48 += 36)
    {
      while (1)
      {
        v53 = *(_DWORD **)(v24 + 112);
        if (v53)
        {
          uint64_t v54 = *(int *)(v24 + 104);
          if ((int)v54 < *v53) {
            break;
          }
        }
        uint64_t v50 = sub_1787818(*(void *)(v24 + 96));
        uint64_t v51 = sub_188CDC8(v24 + 96, v50);
        sub_E6B75C(v48, v51, v52);
        v48 += 36;
        if (v48 == i) {
          return;
        }
      }
      *(_DWORD *)(v24 + 104) = v54 + 1;
      sub_E6B75C(v48, *(void *)&v53[2 * v54 + 2], *(uint8x8_t *)&a1);
    }
  }
}

void sub_E5E890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 32))
  {
    uint64_t v5 = a3 + 1952;
    uint64_t v6 = *(_DWORD **)(a4 + 64);
    if (v6 && (uint64_t v7 = *(int *)(a4 + 56), (int)v7 < *v6))
    {
      *(_DWORD *)(a4 + 56) = v7 + 1;
      uint64_t v8 = *(void *)&v6[2 * v7 + 2];
    }
    else
    {
      uint64_t v9 = a4 + 48;
      uint64_t v10 = sub_178B458(*(void *)(a4 + 48));
      uint64_t v8 = sub_188CDC8(v9, v10);
    }
    int v11 = *(_DWORD *)(v8 + 40);
    *(_DWORD *)(v8 + 160) = *(_DWORD *)(v8 + 56);
    int v12 = v11 | 0x84;
    *(_DWORD *)(v8 + 40) = v11 | 0x84;
    *(_DWORD *)(v8 + 136) = 79;
    int v13 = *(_DWORD *)(a3 + 1960);
    if (v13 != 0x7FFFFFFF)
    {
      int v14 = v13 / 10;
      int v15 = v13 % 10;
      if (v13 < 0) {
        char v16 = -5;
      }
      else {
        char v16 = 5;
      }
      unsigned int v17 = v14 + (((103 * (char)(v16 + v15)) >> 15) & 1) + ((103 * (char)(v16 + v15)) >> 10);
      int v12 = v11 | 0xA4;
      *(_DWORD *)(v8 + 152) = v17;
    }
    *(_DWORD *)(v8 + 168) = *(_DWORD *)(a3 + 1964);
    *(_DWORD *)(v8 + 40) = v12 | 0x208;
    *(_DWORD *)(v8 + 140) = 0;
    if ((**(unsigned int (***)(uint64_t))(a3 + 1952))(v5))
    {
      unsigned int v18 = *(_DWORD **)(v8 + 64);
      if (v18 && (uint64_t v19 = *(int *)(v8 + 56), (int)v19 < *v18))
      {
        int v20 = v19 + 1;
        *(_DWORD *)(v8 + 56) = v19 + 1;
        uint64_t v21 = *(void *)&v18[2 * v19 + 2];
      }
      else
      {
        uint64_t v22 = sub_178B3A0(*(void *)(v8 + 48));
        uint64_t v21 = sub_188CDC8(v8 + 48, v22);
        int v20 = *(_DWORD *)(v8 + 56);
      }
      *(_DWORD *)(v8 + 40) |= 0x80u;
      *(_DWORD *)(v8 + 160) = v20;
      *(_DWORD *)(v21 + 48) |= 0x200u;
      uint64_t v23 = *(void *)(v21 + 648);
      if (!v23)
      {
        uint64_t v24 = *(void *)(v21 + 8);
        uint64_t v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
        if (v24) {
          uint64_t v25 = (void *)*v25;
        }
        uint64_t v23 = sub_1787C70((uint64_t)v25);
        *(void *)(v21 + 648) = v23;
      }
      uint64_t v26 = *(void *)(a3 + 1968);
      v95 = (void *)a3;
      for (uint64_t i = *(void *)(a3 + 1976); v26 != i; v26 += 160)
      {
        uint64_t v27 = *(_DWORD **)(v23 + 56);
        if (v27 && (uint64_t v28 = *(int *)(v23 + 48), (int)v28 < *v27))
        {
          *(_DWORD *)(v23 + 48) = v28 + 1;
          uint64_t v29 = *(void *)&v27[2 * v28 + 2];
        }
        else
        {
          uint64_t v30 = sub_1787CCC(*(void *)(v23 + 40));
          uint64_t v29 = sub_188CDC8(v23 + 40, (uint64_t)v30);
        }
        *(_DWORD *)(v29 + 40) |= 1u;
        uint64_t v31 = *(void *)(v29 + 8);
        uint64_t v32 = (uint64_t *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
        if (v31) {
          uint64_t v32 = (uint64_t *)*v32;
        }
        sub_1881DF4((std::string **)(v29 + 64), (long long *)v26, v32);
        uint64_t v34 = (_DWORD *)(v26 + 24);
        int v35 = *(_DWORD *)(v26 + 56);
        if (v35 == 1)
        {
          if (*(_DWORD *)(v26 + 28) != -1 || *v34 != -1 || *(void *)(v26 + 32) != *(void *)(v26 + 40))
          {
LABEL_36:
            *(_DWORD *)(v29 + 40) |= 2u;
            uint64_t v36 = *(void *)(v29 + 72);
            if (!v36)
            {
              uint64_t v37 = *(void *)(v29 + 8);
              int v38 = (void *)(v37 & 0xFFFFFFFFFFFFFFFCLL);
              if (v37) {
                int v38 = (void *)*v38;
              }
              uint64_t v36 = sub_13DAB08((uint64_t)v38);
              *(void *)(v29 + 72) = v36;
            }
            sub_523A2C(v26 + 24, v36, v33);
          }
        }
        else if (!v35 && *v34 != -1)
        {
          goto LABEL_36;
        }
        int v39 = *(unint64_t **)(v26 + 136);
        uint64_t v40 = *(unint64_t **)(v26 + 144);
        if (v39 != v40)
        {
          uint64_t v41 = (_DWORD *)(v29 + 48);
          do
          {
            while (1)
            {
              int v42 = sub_2D0F10(*v39);
              int v43 = v42;
              uint64_t v44 = *(unsigned int *)(v29 + 48);
              if (v44 == *(_DWORD *)(v29 + 52)) {
                break;
              }
              *(_DWORD *)(*(void *)(v29 + 56) + 4 * v44) = v42;
              *uint64_t v41 = v44 + 1;
              if (++v39 == v40) {
                goto LABEL_22;
              }
            }
            sub_188C80C((unsigned int *)(v29 + 48), v44 + 1);
            *(_DWORD *)(*(void *)(v29 + 56) + 4 * v44) = v43;
            *uint64_t v41 = v44 + 1;
            ++v39;
          }
          while (v39 != v40);
        }
LABEL_22:
        ;
      }
      uint64_t v45 = v95[249];
      uint64_t v97 = v95[250];
      while (v45 != v97)
      {
        uint64_t v46 = *(_DWORD **)(v23 + 80);
        if (v46 && (uint64_t v47 = *(int *)(v23 + 72), (int)v47 < *v46))
        {
          *(_DWORD *)(v23 + 72) = v47 + 1;
          uint64_t v48 = *(void *)&v46[2 * v47 + 2];
        }
        else
        {
          uint64_t v49 = sub_1787D28(*(void *)(v23 + 64));
          uint64_t v48 = sub_188CDC8(v23 + 64, v49);
        }
        *(_DWORD *)(v48 + 40) |= 1u;
        uint64_t v50 = *(void *)(v48 + 8);
        uint64_t v51 = (uint64_t **)(v50 & 0xFFFFFFFFFFFFFFFCLL);
        if (v50)
        {
          sub_1881DF4((std::string **)(v48 + 96), (long long *)v45, *v51);
          int v52 = *(char *)(v45 + 47);
          if ((v52 & 0x80000000) == 0)
          {
LABEL_56:
            if (!(_BYTE)v52) {
              goto LABEL_57;
            }
            goto LABEL_66;
          }
        }
        else
        {
          sub_1881DF4((std::string **)(v48 + 96), (long long *)v45, (uint64_t *)v51);
          int v52 = *(char *)(v45 + 47);
          if ((v52 & 0x80000000) == 0) {
            goto LABEL_56;
          }
        }
        if (!*(void *)(v45 + 32))
        {
LABEL_57:
          uint64_t v53 = *(void *)(v45 + 48);
          if (v53 == 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_58;
          }
          goto LABEL_69;
        }
LABEL_66:
        *(_DWORD *)(v48 + 40) |= 2u;
        uint64_t v60 = *(void *)(v48 + 8);
        uint64_t v61 = (uint64_t *)(v60 & 0xFFFFFFFFFFFFFFFCLL);
        if (v60) {
          uint64_t v61 = (uint64_t *)*v61;
        }
        sub_1881DF4((std::string **)(v48 + 104), (long long *)(v45 + 24), v61);
        uint64_t v53 = *(void *)(v45 + 48);
        if (v53 == 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_58:
          uint64_t v54 = *(void *)(v45 + 56);
          if (v54 == 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_59;
          }
          goto LABEL_73;
        }
LABEL_69:
        int v62 = (int)v53 / 100;
        int v63 = (int)v53 % 100;
        if (v53 < 0) {
          __int16 v64 = -50;
        }
        else {
          __int16 v64 = 50;
        }
        *(_DWORD *)(v48 + 40) |= 4u;
        *(_DWORD *)(v48 + 112) = v62
                               + ((5243 * (__int16)(v64 + v63)) >> 19)
                               + ((5243 * (__int16)(v64 + v63)) >> 31);
        uint64_t v54 = *(void *)(v45 + 56);
        if (v54 == 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_59:
          int v55 = *(_DWORD *)(v45 + 64);
          if (v55 == 0x7FFFFFFF) {
            goto LABEL_60;
          }
          goto LABEL_77;
        }
LABEL_73:
        int v65 = (int)v54 / 100;
        int v66 = (int)v54 % 100;
        if (v54 < 0) {
          __int16 v67 = -50;
        }
        else {
          __int16 v67 = 50;
        }
        *(_DWORD *)(v48 + 40) |= 8u;
        *(_DWORD *)(v48 + 116) = v65
                               + ((5243 * (__int16)(v67 + v66)) >> 19)
                               + ((5243 * (__int16)(v67 + v66)) >> 31);
        int v55 = *(_DWORD *)(v45 + 64);
        if (v55 == 0x7FFFFFFF)
        {
LABEL_60:
          int v56 = *(_DWORD *)(v45 + 68);
          if (v56 == 0x7FFFFFFF) {
            goto LABEL_61;
          }
          goto LABEL_81;
        }
LABEL_77:
        int v68 = v55 / 10;
        int v69 = v55 % 10;
        if (v55 < 0) {
          char v70 = -5;
        }
        else {
          char v70 = 5;
        }
        *(_DWORD *)(v48 + 40) |= 0x10u;
        *(_DWORD *)(v48 + 120) = v68
                               + (((103 * (char)(v70 + v69)) >> 15) & 1)
                               + ((103 * (char)(v70 + v69)) >> 10);
        int v56 = *(_DWORD *)(v45 + 68);
        if (v56 == 0x7FFFFFFF)
        {
LABEL_61:
          unsigned int v57 = *(unsigned __int8 *)(v45 + 144);
          if (v57 > 3) {
            goto LABEL_62;
          }
          goto LABEL_85;
        }
LABEL_81:
        int v71 = v56 / 10;
        int v72 = v56 % 10;
        if (v56 < 0) {
          char v73 = -5;
        }
        else {
          char v73 = 5;
        }
        *(_DWORD *)(v48 + 40) |= 0x20u;
        *(_DWORD *)(v48 + 124) = v71
                               + (((103 * (char)(v73 + v72)) >> 15) & 1)
                               + ((103 * (char)(v73 + v72)) >> 10);
        unsigned int v57 = *(unsigned __int8 *)(v45 + 144);
        if (v57 > 3)
        {
LABEL_62:
          v59 = *(unint64_t **)(v45 + 72);
          char v58 = *(unint64_t **)(v45 + 80);
          if (v59 != v58) {
            goto LABEL_86;
          }
          goto LABEL_90;
        }
LABEL_85:
        *(_DWORD *)(v48 + 40) |= 0x40u;
        *(_DWORD *)(v48 + 128) = v57 + 1;
        v59 = *(unint64_t **)(v45 + 72);
        char v58 = *(unint64_t **)(v45 + 80);
        if (v59 != v58)
        {
LABEL_86:
          uint64_t v74 = (_DWORD *)(v48 + 64);
          do
          {
            while (1)
            {
              int v75 = sub_2D0F10(*v59);
              int v76 = v75;
              uint64_t v77 = *(unsigned int *)(v48 + 64);
              if (v77 == *(_DWORD *)(v48 + 68)) {
                break;
              }
              *(_DWORD *)(*(void *)(v48 + 72) + 4 * v77) = v75;
              *uint64_t v74 = v77 + 1;
              if (++v59 == v58) {
                goto LABEL_90;
              }
            }
            sub_188C80C((unsigned int *)(v48 + 64), v77 + 1);
            *(_DWORD *)(*(void *)(v48 + 72) + 4 * v77) = v76;
            *uint64_t v74 = v77 + 1;
            ++v59;
          }
          while (v59 != v58);
        }
LABEL_90:
        uint64_t v79 = *(unint64_t **)(v45 + 96);
        uint64_t v78 = *(unint64_t **)(v45 + 104);
        if (v79 != v78)
        {
          double v80 = (_DWORD *)(v48 + 48);
          do
          {
            while (1)
            {
              int v81 = sub_2D0F10(*v79);
              int v82 = v81;
              uint64_t v83 = *(unsigned int *)(v48 + 48);
              if (v83 == *(_DWORD *)(v48 + 52)) {
                break;
              }
              *(_DWORD *)(*(void *)(v48 + 56) + 4 * v83) = v81;
              *double v80 = v83 + 1;
              if (++v79 == v78) {
                goto LABEL_95;
              }
            }
            sub_188C80C((unsigned int *)(v48 + 48), v83 + 1);
            *(_DWORD *)(*(void *)(v48 + 56) + 4 * v83) = v82;
            *double v80 = v83 + 1;
            ++v79;
          }
          while (v79 != v78);
        }
LABEL_95:
        uint64_t v85 = *(void **)(v45 + 120);
        v84 = *(void **)(v45 + 128);
        if (v85 != v84)
        {
          v86 = (_DWORD *)(v48 + 80);
          do
          {
            while (1)
            {
              uint64_t v87 = nullsub_1(*v85);
              uint64_t v88 = v87;
              uint64_t v89 = *(unsigned int *)(v48 + 80);
              if (v89 == *(_DWORD *)(v48 + 84)) {
                break;
              }
              *(void *)(*(void *)(v48 + 88) + 8 * v89) = v87;
              _DWORD *v86 = v89 + 1;
              if (++v85 == v84) {
                goto LABEL_49;
              }
            }
            sub_188CA54((unsigned int *)(v48 + 80), v89 + 1);
            *(void *)(*(void *)(v48 + 88) + 8 * v89) = v88;
            _DWORD *v86 = v89 + 1;
            ++v85;
          }
          while (v85 != v84);
        }
LABEL_49:
        v45 += 152;
      }
      if (v95[255])
      {
        sub_58E3C((uint64_t)(v95 + 252));
        uint64_t v90 = dword_254EB68;
        if (SHIBYTE(v99) < 0)
        {
          sub_4200(&__dst, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          long long __dst = *(_OWORD *)__p;
          uint64_t v101 = v99;
        }
        uint64_t v91 = sub_1883D14((uint64_t **)(v23 + 16), v90, 9, 0);
        v92 = v91;
        if ((*((char *)v91 + 23) & 0x80000000) == 0)
        {
          long long v93 = __dst;
          v91[2] = v101;
          *(_OWORD *)uint64_t v91 = v93;
          if ((SHIBYTE(v99) & 0x80000000) == 0) {
            return;
          }
LABEL_109:
          operator delete(__p[0]);
          return;
        }
        operator delete((void *)*v91);
        long long v94 = __dst;
        v92[2] = v101;
        *(_OWORD *)v92 = v94;
        if (SHIBYTE(v99) < 0) {
          goto LABEL_109;
        }
      }
    }
  }
}

void sub_E5F15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a17 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_E5F1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 41))
  {
    uint64_t v5 = a3 + 1392;
    uint64_t v6 = *(_DWORD **)(a4 + 64);
    if (v6 && (uint64_t v7 = *(int *)(a4 + 56), (int)v7 < *v6))
    {
      *(_DWORD *)(a4 + 56) = v7 + 1;
      uint64_t v8 = *(void *)&v6[2 * v7 + 2];
    }
    else
    {
      uint64_t v9 = a4 + 48;
      uint64_t v10 = sub_178B458(*(void *)(a4 + 48));
      uint64_t v8 = sub_188CDC8(v9, v10);
    }
    int v11 = *(_DWORD *)(v8 + 40);
    *(_DWORD *)(v8 + 160) = *(_DWORD *)(v8 + 56);
    int v12 = v11 | 0x84;
    *(_DWORD *)(v8 + 40) = v11 | 0x84;
    *(_DWORD *)(v8 + 136) = 2;
    int v13 = *(_DWORD *)(a3 + 1400);
    if (v13 != 0x7FFFFFFF)
    {
      int v14 = v13 / 10;
      int v15 = v13 % 10;
      if (v13 < 0) {
        char v16 = -5;
      }
      else {
        char v16 = 5;
      }
      unsigned int v17 = v14 + (((103 * (char)(v16 + v15)) >> 15) & 1) + ((103 * (char)(v16 + v15)) >> 10);
      int v12 = v11 | 0xA4;
      *(_DWORD *)(v8 + 152) = v17;
    }
    *(_DWORD *)(v8 + 168) = *(_DWORD *)(a3 + 1404);
    *(_DWORD *)(v8 + 40) = v12 | 0x208;
    *(_DWORD *)(v8 + 140) = 0;
    if ((**(unsigned int (***)(uint64_t))(a3 + 1392))(v5))
    {
      uint64_t v19 = *(_DWORD **)(v8 + 64);
      if (v19 && (uint64_t v20 = *(int *)(v8 + 56), (int)v20 < *v19))
      {
        int v21 = v20 + 1;
        *(_DWORD *)(v8 + 56) = v20 + 1;
        uint64_t v22 = *(void *)&v19[2 * v20 + 2];
      }
      else
      {
        uint64_t v23 = sub_178B3A0(*(void *)(v8 + 48));
        uint64_t v22 = sub_188CDC8(v8 + 48, v23);
        int v21 = *(_DWORD *)(v8 + 56);
      }
      *(_DWORD *)(v8 + 40) |= 0x80u;
      *(_DWORD *)(v8 + 160) = v21;
      *(_DWORD *)(v22 + 40) |= 2u;
      uint64_t v24 = *(void *)(v22 + 72);
      if (v24)
      {
        uint64_t v25 = (_DWORD *)(a3 + 1408);
        *(_DWORD *)(v24 + 40) |= 1u;
        uint64_t v26 = *(void *)(v24 + 48);
        if (v26)
        {
LABEL_26:
          sub_E112BC(v25, v26, v18);
          *(_DWORD *)(v24 + 40) |= 2u;
          uint64_t v31 = *(void **)(v24 + 56);
          if (!v31)
          {
            uint64_t v32 = *(void *)(v24 + 8);
            uint8x8_t v33 = (void *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
            if (v32) {
              uint8x8_t v33 = (void *)*v33;
            }
            uint64_t v31 = sub_15C221C((uint64_t)v33);
            *(void *)(v24 + 56) = v31;
          }
          *((_DWORD *)v31 + 4) |= 1u;
          uint64_t v34 = v31[1];
          int v35 = (uint64_t *)(v34 & 0xFFFFFFFFFFFFFFFCLL);
          if (v34)
          {
            int v35 = (uint64_t *)*v35;
            uint64_t v36 = (std::string **)(v31 + 3);
          }
          else
          {
            uint64_t v36 = (std::string **)(v31 + 3);
          }
          sub_1881DF4(v36, (long long *)(a3 + 1424), v35);
          return;
        }
      }
      else
      {
        uint64_t v27 = *(void *)(v22 + 8);
        uint64_t v28 = (void *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
        if (v27) {
          uint64_t v28 = (void *)*v28;
        }
        uint64_t v24 = sub_178672C((uint64_t)v28);
        *(void *)(v22 + 72) = v24;
        uint64_t v25 = (_DWORD *)(a3 + 1408);
        *(_DWORD *)(v24 + 40) |= 1u;
        uint64_t v26 = *(void *)(v24 + 48);
        if (v26) {
          goto LABEL_26;
        }
      }
      uint64_t v29 = *(void *)(v24 + 8);
      uint64_t v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
      if (v29) {
        uint64_t v30 = (void *)*v30;
      }
      uint64_t v26 = sub_15C1918((uint64_t)v30);
      *(void *)(v24 + 48) = v26;
      goto LABEL_26;
    }
  }
}

void sub_E5F48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 36))
  {
    uint64_t v5 = a3 + 2056;
    uint64_t v6 = *(_DWORD **)(a4 + 64);
    if (v6 && (uint64_t v7 = *(int *)(a4 + 56), (int)v7 < *v6))
    {
      *(_DWORD *)(a4 + 56) = v7 + 1;
      uint64_t v8 = *(void *)&v6[2 * v7 + 2];
    }
    else
    {
      uint64_t v9 = a4 + 48;
      uint64_t v10 = sub_178B458(*(void *)(a4 + 48));
      uint64_t v8 = sub_188CDC8(v9, v10);
    }
    int v11 = *(_DWORD *)(v8 + 40);
    *(_DWORD *)(v8 + 160) = *(_DWORD *)(v8 + 56);
    int v12 = v11 | 0x84;
    *(_DWORD *)(v8 + 40) = v11 | 0x84;
    *(_DWORD *)(v8 + 136) = 11;
    int v13 = *(_DWORD *)(a3 + 2064);
    if (v13 != 0x7FFFFFFF)
    {
      int v14 = v13 / 10;
      int v15 = v13 % 10;
      if (v13 < 0) {
        char v16 = -5;
      }
      else {
        char v16 = 5;
      }
      unsigned int v17 = v14 + (((103 * (char)(v16 + v15)) >> 15) & 1) + ((103 * (char)(v16 + v15)) >> 10);
      int v12 = v11 | 0xA4;
      *(_DWORD *)(v8 + 152) = v17;
    }
    *(_DWORD *)(v8 + 168) = *(_DWORD *)(a3 + 2068);
    *(_DWORD *)(v8 + 40) = v12 | 0x208;
    *(_DWORD *)(v8 + 140) = 0;
    uint64_t v18 = (**(uint64_t (***)(uint64_t))(a3 + 2056))(v5);
    if (v18)
    {
      uint64_t v20 = *(_DWORD **)(v8 + 64);
      if (v20 && (uint64_t v21 = *(int *)(v8 + 56), (int)v21 < *v20))
      {
        int v22 = v21 + 1;
        *(_DWORD *)(v8 + 56) = v21 + 1;
        uint64_t v23 = *(void *)&v20[2 * v21 + 2];
      }
      else
      {
        uint64_t v24 = sub_178B3A0(*(void *)(v8 + 48));
        uint64_t v18 = sub_188CDC8(v8 + 48, v24);
        uint64_t v23 = v18;
        int v22 = *(_DWORD *)(v8 + 56);
      }
      *(_DWORD *)(v8 + 40) |= 0x80u;
      *(_DWORD *)(v8 + 160) = v22;
      *(_DWORD *)(v23 + 40) |= 0x400u;
      uint64_t v25 = *(void *)(v23 + 144);
      if (!v25)
      {
        uint64_t v26 = *(void *)(v23 + 8);
        uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if (v26) {
          uint64_t v27 = (void *)*v27;
        }
        uint64_t v18 = sub_178734C((uint64_t)v27);
        uint64_t v25 = v18;
        *(void *)(v23 + 144) = v18;
      }
      uint64_t v28 = *(void *)(a3 + 2072);
      for (uint64_t i = *(void *)(a3 + 2080); v28 != i; v28 += 312)
        uint64_t v18 = (uint64_t)sub_E61284(v18, v28, v25);
      uint64_t v30 = *(void *)(a3 + 2096);
      for (uint64_t j = *(void *)(a3 + 2104); v30 != j; v30 += 80)
        uint64_t v18 = (uint64_t)sub_E61990(v19, v18, v30, v25);
      *(_DWORD *)(v25 + 40) |= 1u;
      uint64_t v32 = *(void **)(v25 + 96);
      if (v32)
      {
        *((_DWORD *)v32 + 4) |= 1u;
        uint8x8_t v33 = (_DWORD *)v32[3];
        if (v33)
        {
LABEL_33:
          int v38 = *(_DWORD *)(a3 + 2124);
          int v39 = v38 / 10;
          int v40 = v38 % 10;
          if (v38 < 0) {
            char v41 = -5;
          }
          else {
            char v41 = 5;
          }
          unsigned int v42 = v39 + (((103 * (char)(v41 + v40)) >> 15) & 1) + ((103 * (char)(v41 + v40)) >> 10);
          int v43 = v33[4];
          v33[4] = v43 | 2;
          v33[7] = v42;
          int v44 = *(_DWORD *)(a3 + 2120) - 978307200;
          v33[4] = v43 | 3;
          v33[6] = v44;
          int v45 = *(_DWORD *)(a3 + 2128);
          *((_DWORD *)v32 + 4) |= 2u;
          *((_DWORD *)v32 + 8) = v45;
          *(_DWORD *)(v25 + 40) |= 2u;
          uint64_t v46 = *(std::string **)(v25 + 104);
          if (!v46)
          {
            uint64_t v47 = *(void *)(v25 + 8);
            uint64_t v48 = (void *)(v47 & 0xFFFFFFFFFFFFFFFCLL);
            if (v47) {
              uint64_t v48 = (void *)*v48;
            }
            uint64_t v46 = (std::string *)sub_1786034((uint64_t)v48);
            *(void *)(v25 + 104) = v46;
          }
          if (*(void *)(v25 + 96)) {
            uint64_t v49 = *(uint64_t (****)())(v25 + 96);
          }
          else {
            uint64_t v49 = &off_2544448;
          }
          sub_16B64FC(v46, (uint64_t)v49);
          int v50 = *(_DWORD *)(a3 + 2128);
          LODWORD(v46->__r_.__value_.__r.__words[2]) |= 2u;
          LODWORD(v46[1].__r_.__value_.__r.__words[1]) = v50;
          int v51 = *(_DWORD *)(a3 + 2132);
          int v52 = v51 / 10;
          int v53 = v51 % 10;
          if (v51 < 0) {
            char v54 = -5;
          }
          else {
            char v54 = 5;
          }
          *(_DWORD *)(v25 + 40) |= 8u;
          *(void *)(v25 + 120) = (int)(v52
                                       + (((103 * (char)(v54 + v53)) >> 15) & 1)
                                       + ((103 * (char)(v54 + v53)) >> 10));
          return;
        }
      }
      else
      {
        uint64_t v34 = *(void *)(v25 + 8);
        int v35 = (void *)(v34 & 0xFFFFFFFFFFFFFFFCLL);
        if (v34) {
          int v35 = (void *)*v35;
        }
        uint64_t v32 = sub_1786034((uint64_t)v35);
        *(void *)(v25 + 96) = v32;
        *((_DWORD *)v32 + 4) |= 1u;
        uint8x8_t v33 = (_DWORD *)v32[3];
        if (v33) {
          goto LABEL_33;
        }
      }
      uint64_t v36 = v32[1];
      uint64_t v37 = (void *)(v36 & 0xFFFFFFFFFFFFFFFCLL);
      if (v36) {
        uint64_t v37 = (void *)*v37;
      }
      uint8x8_t v33 = sub_17860B0((uint64_t)v37);
      v32[3] = v33;
      goto LABEL_33;
    }
  }
}

uint64_t sub_E5F894(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 37))
  {
    uint64_t v5 = result;
    uint64_t v6 = *(_DWORD **)(a4 + 64);
    if (v6 && (uint64_t v7 = *(int *)(a4 + 56), (int)v7 < *v6))
    {
      *(_DWORD *)(a4 + 56) = v7 + 1;
      uint64_t v8 = *(void *)&v6[2 * v7 + 2];
    }
    else
    {
      uint64_t v9 = a4 + 48;
      uint64_t v10 = sub_178B458(*(void *)(a4 + 48));
      result = sub_188CDC8(v9, v10);
      uint64_t v8 = result;
    }
    uint64_t v11 = *(int *)(v8 + 56);
    int v12 = *(_DWORD *)(v8 + 40);
    *(_DWORD *)(v8 + 160) = v11;
    int v13 = v12 | 0x84;
    *(_DWORD *)(v8 + 40) = v12 | 0x84;
    *(_DWORD *)(v8 + 136) = 69;
    int v14 = *(_DWORD *)(a3 + 1496);
    if (v14 != 0x7FFFFFFF)
    {
      int v15 = v14 / 10;
      int v16 = v14 % 10;
      if (v14 < 0) {
        char v17 = -5;
      }
      else {
        char v17 = 5;
      }
      unsigned int v18 = v15 + (((103 * (char)(v17 + v16)) >> 15) & 1) + ((103 * (char)(v17 + v16)) >> 10);
      int v13 = v12 | 0xA4;
      *(_DWORD *)(v8 + 152) = v18;
    }
    *(_DWORD *)(v8 + 168) = *(_DWORD *)(a3 + 1500);
    int v19 = v13 | 0x208;
    *(_DWORD *)(v8 + 40) = v13 | 0x208;
    *(_DWORD *)(v8 + 140) = 0;
    uint64_t v20 = *(_DWORD **)(v8 + 64);
    if (v20 && (int)v11 < *v20)
    {
      int v21 = v11 + 1;
      *(_DWORD *)(v8 + 56) = v11 + 1;
      uint64_t v22 = *(void *)&v20[2 * v11 + 2];
    }
    else
    {
      uint64_t v23 = sub_178B3A0(*(void *)(v8 + 48));
      result = sub_188CDC8(v8 + 48, v23);
      uint64_t v22 = result;
      int v21 = *(_DWORD *)(v8 + 56);
      int v19 = *(_DWORD *)(v8 + 40);
    }
    *(_DWORD *)(v8 + 40) = v19 | 0x80;
    *(_DWORD *)(v8 + 160) = v21;
    *(_DWORD *)(v22 + 48) |= 1u;
    uint64_t v24 = *(void *)(v22 + 576);
    if (!v24)
    {
      uint64_t v25 = *(void *)(v22 + 8);
      uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if (v25) {
        uint64_t v26 = (void *)*v26;
      }
      result = sub_1787C14((uint64_t)v26);
      uint64_t v24 = result;
      *(void *)(v22 + 576) = result;
    }
    uint64_t v27 = *(uint64_t **)(a3 + 1504);
    for (i = *(uint64_t **)(a3 + 1512); v27 != i; uint64_t v27 = (uint64_t *)((char *)v27 + 12))
    {
      uint64_t v30 = *v27;
      int v34 = *((_DWORD *)v27 + 2);
      uint64_t v33 = v30;
      if (!(_BYTE)v34)
      {
        int v31 = *(_DWORD *)(v24 + 48);
        uint64_t v32 = *(unsigned int *)(v24 + 64);
        if (v32 == *(_DWORD *)(v24 + 68))
        {
          int v29 = v32 + 1;
          sub_188C80C((unsigned int *)(v24 + 64), v32 + 1);
          *(_DWORD *)(*(void *)(v24 + 72) + 4 * v32) = v31;
        }
        else
        {
          *(_DWORD *)(*(void *)(v24 + 72) + 4 * v32) = v31;
          int v29 = v32 + 1;
        }
        *(_DWORD *)(v24 + 64) = v29;
      }
      result = sub_E61B48(v5, (uint64_t)&v33, v24);
    }
  }
  return result;
}

void sub_E5FADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long double a5)
{
  if (*(unsigned char *)(a2 + 34))
  {
    uint64_t v6 = *(_DWORD **)(a4 + 64);
    if (v6 && (uint64_t v7 = *(int *)(a4 + 56), (int)v7 < *v6))
    {
      *(_DWORD *)(a4 + 56) = v7 + 1;
      uint64_t v8 = *(void *)&v6[2 * v7 + 2];
    }
    else
    {
      uint64_t v9 = a4 + 48;
      uint64_t v10 = sub_178B458(*(void *)(a4 + 48));
      a1 = sub_188CDC8(v9, v10);
      uint64_t v8 = a1;
    }
    uint64_t v11 = *(int *)(v8 + 56);
    int v12 = *(_DWORD *)(v8 + 40);
    *(_DWORD *)(v8 + 160) = v11;
    int v13 = v12 | 0x84;
    *(_DWORD *)(v8 + 40) = v12 | 0x84;
    *(_DWORD *)(v8 + 136) = 67;
    int v14 = *(_DWORD *)(a3 + 2144);
    if (v14 != 0x7FFFFFFF)
    {
      int v15 = v14 / 10;
      int v16 = v14 % 10;
      if (v14 < 0) {
        char v17 = -5;
      }
      else {
        char v17 = 5;
      }
      unsigned int v18 = v15 + (((103 * (char)(v17 + v16)) >> 15) & 1) + ((103 * (char)(v17 + v16)) >> 10);
      int v13 = v12 | 0xA4;
      *(_DWORD *)(v8 + 152) = v18;
    }
    *(_DWORD *)(v8 + 168) = *(_DWORD *)(a3 + 2148);
    int v19 = v13 | 0x208;
    *(_DWORD *)(v8 + 40) = v13 | 0x208;
    *(_DWORD *)(v8 + 140) = 0;
    uint64_t v20 = *(_DWORD **)(v8 + 64);
    if (v20 && (int)v11 < *v20)
    {
      int v21 = v11 + 1;
      *(_DWORD *)(v8 + 56) = v11 + 1;
      uint64_t v22 = *(void *)&v20[2 * v11 + 2];
    }
    else
    {
      uint64_t v23 = sub_178B3A0(*(void *)(v8 + 48));
      a1 = sub_188CDC8(v8 + 48, v23);
      uint64_t v22 = a1;
      int v21 = *(_DWORD *)(v8 + 56);
      int v19 = *(_DWORD *)(v8 + 40);
    }
    *(_DWORD *)(v8 + 40) = v19 | 0x80;
    *(_DWORD *)(v8 + 160) = v21;
    *(_DWORD *)(v22 + 44) |= 0x40000000u;
    uint64_t v24 = *(void *)(v22 + 560);
    if (!v24)
    {
      uint64_t v25 = *(void *)(v22 + 8);
      uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
      if (v25) {
        uint64_t v26 = (void *)*v26;
      }
      a1 = sub_1787AD8((uint64_t)v26);
      uint64_t v24 = a1;
      *(void *)(v22 + 560) = a1;
    }
    uint64_t v27 = *(void *)(a3 + 2152);
    for (uint64_t i = *(void *)(a3 + 2160); v27 != i; v27 += 152)
      sub_E61E34(a5, a1, v27, v24);
  }
}

void sub_E5FCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 35))
  {
    uint64_t v5 = *(_DWORD **)(a4 + 64);
    if (v5 && (uint64_t v6 = *(int *)(a4 + 56), (int)v6 < *v5))
    {
      *(_DWORD *)(a4 + 56) = v6 + 1;
      uint64_t v7 = *(void *)&v5[2 * v6 + 2];
    }
    else
    {
      uint64_t v8 = a4 + 48;
      uint64_t v9 = sub_178B458(*(void *)(a4 + 48));
      uint64_t v7 = sub_188CDC8(v8, v9);
    }
    uint64_t v10 = *(int *)(v7 + 56);
    int v11 = *(_DWORD *)(v7 + 40);
    *(_DWORD *)(v7 + 160) = v10;
    int v12 = v11 | 0x84;
    *(_DWORD *)(v7 + 40) = v11 | 0x84;
    *(_DWORD *)(v7 + 136) = 68;
    int v13 = *(_DWORD *)(a3 + 2184);
    if (v13 != 0x7FFFFFFF)
    {
      int v14 = v13 / 10;
      int v15 = v13 % 10;
      if (v13 < 0) {
        char v16 = -5;
      }
      else {
        char v16 = 5;
      }
      unsigned int v17 = v14 + (((103 * (char)(v16 + v15)) >> 15) & 1) + ((103 * (char)(v16 + v15)) >> 10);
      int v12 = v11 | 0xA4;
      *(_DWORD *)(v7 + 152) = v17;
    }
    *(_DWORD *)(v7 + 168) = *(_DWORD *)(a3 + 2188);
    int v18 = v12 | 0x208;
    *(_DWORD *)(v7 + 40) = v12 | 0x208;
    *(_DWORD *)(v7 + 140) = 0;
    int v19 = *(_DWORD **)(v7 + 64);
    if (v19 && (int)v10 < *v19)
    {
      int v20 = v10 + 1;
      *(_DWORD *)(v7 + 56) = v10 + 1;
      uint64_t v21 = *(void *)&v19[2 * v10 + 2];
    }
    else
    {
      uint64_t v22 = sub_178B3A0(*(void *)(v7 + 48));
      uint64_t v21 = sub_188CDC8(v7 + 48, v22);
      int v20 = *(_DWORD *)(v7 + 56);
      int v18 = *(_DWORD *)(v7 + 40);
    }
    *(_DWORD *)(v7 + 40) = v18 | 0x80;
    *(_DWORD *)(v7 + 160) = v20;
    *(_DWORD *)(v21 + 44) |= 0x80000000;
    uint64_t v23 = *(void *)(v21 + 568);
    if (!v23)
    {
      uint64_t v24 = *(void *)(v21 + 8);
      uint64_t v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
      if (v24) {
        uint64_t v25 = (void *)*v25;
      }
      uint64_t v23 = sub_1787B34((uint64_t)v25);
      *(void *)(v21 + 568) = v23;
    }
    uint64_t v26 = *(uint64_t **)(a3 + 2192);
    uint64_t v27 = *(uint64_t **)(a3 + 2200);
    if (v26 != v27)
    {
      while (1)
      {
        uint64_t v28 = *(_DWORD **)(v23 + 56);
        if (v28)
        {
          uint64_t v29 = *(int *)(v23 + 48);
          if ((int)v29 < *v28) {
            break;
          }
        }
        uint64_t v32 = sub_17874D8(*(void *)(v23 + 40));
        uint64_t v30 = sub_188CDC8(v23 + 40, v32);
        uint64_t v31 = *v26;
        if (*v26 != -1) {
          goto LABEL_27;
        }
LABEL_28:
        if (*((_DWORD *)v26 + 2) != 0x7FFFFFFF)
        {
          int v34 = *(_DWORD **)(v30 + 64);
          if (v34 && (uint64_t v35 = *(int *)(v30 + 56), (int)v35 < *v34))
          {
            *(_DWORD *)(v30 + 56) = v35 + 1;
            uint64_t v36 = *(void *)&v34[2 * v35 + 2];
          }
          else
          {
            uint64_t v37 = sub_1787534(*(void *)(v30 + 48));
            uint64_t v36 = sub_188CDC8(v30 + 48, v37);
          }
          double v38 = (double)*((int *)v26 + 2) + -978307200.0;
          int v39 = *(_DWORD *)(v36 + 40);
          *(_DWORD *)(v36 + 40) = v39 | 8;
          *(double *)(v36 + 72) = v38;
          int v40 = *((_DWORD *)v26 + 3);
          if (v40 != 0x7FFFFFFF && *((unsigned char *)v26 + 16) == 1)
          {
            *(_DWORD *)(v36 + 40) = v39 | 0x18;
            *(double *)(v36 + 80) = (double)v40 + -978307200.0;
          }
        }
        v26 += 3;
        if (v26 == v27) {
          return;
        }
      }
      *(_DWORD *)(v23 + 48) = v29 + 1;
      uint64_t v30 = *(void *)&v28[2 * v29 + 2];
      uint64_t v31 = *v26;
      if (*v26 == -1) {
        goto LABEL_28;
      }
LABEL_27:
      uint64_t v33 = nullsub_1(v31);
      *(_DWORD *)(v30 + 40) |= 0x40u;
      *(void *)(v30 + 184) = v33;
      goto LABEL_28;
    }
  }
}

void sub_E5FF98(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a2 + 33)) {
    return;
  }
  uint64_t v7 = a3 + 2216;
  uint64_t v8 = *(_DWORD **)(a4 + 64);
  if (v8 && (uint64_t v9 = *(int *)(a4 + 56), (int)v9 < *v8))
  {
    *(_DWORD *)(a4 + 56) = v9 + 1;
    uint64_t v10 = *(void *)&v8[2 * v9 + 2];
  }
  else
  {
    uint64_t v11 = a4 + 48;
    uint64_t v12 = sub_178B458(*(void *)(a4 + 48));
    uint64_t v10 = sub_188CDC8(v11, v12);
  }
  int v13 = *(_DWORD *)(v10 + 40);
  *(_DWORD *)(v10 + 160) = *(_DWORD *)(v10 + 56);
  int v14 = v13 | 0x84;
  *(_DWORD *)(v10 + 40) = v13 | 0x84;
  *(_DWORD *)(v10 + 136) = 91;
  int v15 = *(_DWORD *)(a3 + 2224);
  if (v15 != 0x7FFFFFFF)
  {
    int v16 = v15 / 10;
    int v17 = v15 % 10;
    if (v15 < 0) {
      char v18 = -5;
    }
    else {
      char v18 = 5;
    }
    unsigned int v19 = v16 + (((103 * (char)(v18 + v17)) >> 15) & 1) + ((103 * (char)(v18 + v17)) >> 10);
    int v14 = v13 | 0xA4;
    *(_DWORD *)(v10 + 152) = v19;
  }
  *(_DWORD *)(v10 + 168) = *(_DWORD *)(a3 + 2228);
  *(_DWORD *)(v10 + 40) = v14 | 0x208;
  *(_DWORD *)(v10 + 140) = 0;
  if (!(**(unsigned int (***)(uint64_t))(a3 + 2216))(v7)) {
    return;
  }
  int v20 = *(_DWORD **)(v10 + 64);
  if (v20 && (uint64_t v21 = *(int *)(v10 + 56), (int)v21 < *v20))
  {
    int v22 = v21 + 1;
    *(_DWORD *)(v10 + 56) = v21 + 1;
    uint64_t v23 = *(void *)&v20[2 * v21 + 2];
  }
  else
  {
    uint64_t v24 = sub_178B3A0(*(void *)(v10 + 48));
    uint64_t v23 = sub_188CDC8(v10 + 48, v24);
    int v22 = *(_DWORD *)(v10 + 56);
  }
  *(_DWORD *)(v10 + 40) |= 0x80u;
  *(_DWORD *)(v10 + 160) = v22;
  *(_DWORD *)(v23 + 48) |= 0x100000u;
  __int16 v67 = *(void **)(v23 + 736);
  if (!v67)
  {
    uint64_t v25 = *(void *)(v23 + 8);
    uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
    if (v25) {
      uint64_t v26 = (void *)*v26;
    }
    __int16 v67 = sub_1787D84((uint64_t)v26);
    *(void *)(v23 + 736) = v67;
  }
  uint64_t v27 = *(void *)(a3 + 2256);
  if (v27 != 0x7FFFFFFFFFFFFFFFLL)
  {
    *((_DWORD *)v67 + 10) |= 1u;
    *((double *)v67 + 12) = (double)v27 / 100.0;
  }
  *(_OWORD *)int v72 = 0u;
  *(_OWORD *)char v73 = 0u;
  int v74 = 1065353216;
  int v76 = 0;
  unint64_t v77 = 0;
  int v75 = 0;
  uint64_t v28 = *(unint64_t ***)(a3 + 2232);
  int v66 = *(unint64_t ***)(a3 + 2240);
  if (v28 == v66) {
    goto LABEL_90;
  }
  uint64_t v29 = a2 + 1016;
  int v68 = v67 + 9;
  while (2)
  {
    uint64_t v30 = *v28;
    uint64_t v31 = v28[1];
    int v69 = 0;
    char v70 = 0;
    int v71 = 0;
    uint64_t v32 = (char *)v31 - (char *)v30;
    if (v31 == v30) {
      goto LABEL_66;
    }
    if (v32 < 0) {
      sub_2E00();
    }
    uint64_t v33 = (char *)operator new((char *)v31 - (char *)v30);
    int v69 = v33;
    char v70 = v33;
    int v71 = &v33[8 * (v32 >> 3)];
    do
    {
      unint64_t v34 = *v30;
      unint64_t v78 = *v30;
      if (!v72[1]) {
        goto LABEL_54;
      }
      unint64_t v35 = __ROR8__(v34, 32);
      unint64_t v36 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v35 ^ (v35 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v35 ^ (v35 >> 33))) >> 33));
      unint64_t v37 = v36 ^ (v36 >> 33);
      uint8x8_t v38 = (uint8x8_t)vcnt_s8((int8x8_t)v72[1]);
      v38.i16[0] = vaddlv_u8(v38);
      if (v38.u32[0] > 1uLL)
      {
        unint64_t v39 = v37;
        if ((void *)v37 >= v72[1]) {
          unint64_t v39 = v37 % (unint64_t)v72[1];
        }
      }
      else
      {
        unint64_t v39 = v37 & ((unint64_t)v72[1] - 1);
      }
      int v40 = (uint64_t **)*((void *)v72[0] + v39);
      if (!v40 || (char v41 = *v40) == 0)
      {
LABEL_54:
        unint64_t v86 = 0x8E38E38E38E38E39 * ((v76 - (unsigned char *)v75) >> 3);
        uint64_t v46 = sub_3757C8(*a1);
        sub_4A0180(v34, v46, v29, (uint64_t)&v79);
        uint64_t v47 = v76;
        if ((unint64_t)v76 >= v77)
        {
          int v76 = sub_E62180(&v75, (uint64_t)&v79);
          if (SHIBYTE(v84) < 0)
          {
            operator delete((void *)v83);
            if (SHIBYTE(v81) < 0) {
LABEL_59:
            }
              operator delete((void *)__p);
          }
          else if (SHIBYTE(v81) < 0)
          {
            goto LABEL_59;
          }
        }
        else
        {
          *(void *)int v76 = v79;
          long long v48 = __p;
          *((void *)v47 + 3) = v81;
          *(_OWORD *)(v47 + 8) = v48;
          uint64_t v81 = 0;
          long long __p = 0uLL;
          v47[32] = v82;
          long long v49 = v83;
          *((void *)v47 + 7) = v84;
          *(_OWORD *)(v47 + 40) = v49;
          uint64_t v84 = 0;
          long long v83 = 0uLL;
          v47[64] = v85;
          int v76 = v47 + 72;
          if (SHIBYTE(v81) < 0) {
            goto LABEL_59;
          }
        }
        sub_E62384((uint64_t)v72, &v78, &v78, (uint64_t *)&v86);
        unint64_t v50 = v86;
        goto LABEL_61;
      }
      if (v38.u32[0] < 2uLL)
      {
        while (1)
        {
          unint64_t v45 = v41[1];
          if (v45 == v37)
          {
            if (*((_DWORD *)v41 + 4) == v34 && *((_DWORD *)v41 + 5) == HIDWORD(v34)) {
              goto LABEL_65;
            }
          }
          else if ((v45 & ((unint64_t)v72[1] - 1)) != v39)
          {
            goto LABEL_54;
          }
          char v41 = (uint64_t *)*v41;
          if (!v41) {
            goto LABEL_54;
          }
        }
      }
      while (1)
      {
        unint64_t v43 = v41[1];
        if (v43 == v37) {
          break;
        }
        if ((void *)v43 >= v72[1]) {
          v43 %= (unint64_t)v72[1];
        }
        if (v43 != v39) {
          goto LABEL_54;
        }
LABEL_41:
        char v41 = (uint64_t *)*v41;
        if (!v41) {
          goto LABEL_54;
        }
      }
      if (*((_DWORD *)v41 + 4) != v34 || *((_DWORD *)v41 + 5) != HIDWORD(v34)) {
        goto LABEL_41;
      }
LABEL_65:
      unint64_t v50 = v41[3];
LABEL_61:
      unint64_t v79 = v50;
      uint64_t v33 = sub_E626E8(&v69, v33, &v79) + 8;
      ++v30;
    }
    while (v30 != v31);
LABEL_66:
    int v51 = (_DWORD *)v67[11];
    if (v51 && (uint64_t v52 = *((int *)v67 + 20), (int)v52 < *v51))
    {
      *((_DWORD *)v67 + 20) = v52 + 1;
      uint64_t v53 = *(void *)&v51[2 * v52 + 2];
    }
    else
    {
      char v54 = sub_133276C(*v68);
      uint64_t v53 = sub_188CDC8((uint64_t)v68, (uint64_t)v54);
    }
    sub_E6BF30((uint64_t)v28, (int **)&v69, v53);
    if (v69)
    {
      char v70 = v69;
      operator delete(v69);
    }
    v28 += 71;
    if (v28 != v66) {
      continue;
    }
    break;
  }
  int v55 = (char *)v75;
  int v56 = v76;
  if (v75 != v76)
  {
    do
    {
      unsigned int v57 = (_DWORD *)v67[8];
      if (v57 && (uint64_t v58 = *((int *)v67 + 14), (int)v58 < *v57))
      {
        *((_DWORD *)v67 + 14) = v58 + 1;
        uint64_t v59 = *(void *)&v57[2 * v58 + 2];
      }
      else
      {
        uint64_t v60 = sub_133280C(v67[6]);
        uint64_t v59 = sub_188CDC8((uint64_t)(v67 + 6), (uint64_t)v60);
      }
      sub_E6BD9C((uint64_t)v55, v59);
      v55 += 72;
    }
    while (v55 != v56);
    int v56 = (char *)v75;
  }
  if (v56)
  {
    uint64_t v61 = v76;
    int v62 = v56;
    if (v76 == v56)
    {
LABEL_89:
      int v76 = v56;
      operator delete(v62);
      goto LABEL_90;
    }
    while (2)
    {
      if (*(v61 - 9) < 0)
      {
        operator delete(*((void **)v61 - 4));
        if (*(v61 - 41) < 0) {
          goto LABEL_87;
        }
      }
      else if (*(v61 - 41) < 0)
      {
LABEL_87:
        operator delete(*((void **)v61 - 8));
      }
      v61 -= 72;
      if (v61 == v56)
      {
        int v62 = v75;
        goto LABEL_89;
      }
      continue;
    }
  }
LABEL_90:
  int v63 = v73[0];
  if (v73[0])
  {
    do
    {
      __int16 v64 = (void *)*v63;
      operator delete(v63);
      int v63 = v64;
    }
    while (v64);
  }
  int v65 = v72[0];
  v72[0] = 0;
  if (v65) {
    operator delete(v65);
  }
}

void sub_E6062C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (__p)
  {
    operator delete(__p);
    sub_E620C8((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  sub_E620C8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_E606C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(unsigned char *)(a2 + 38)) {
    return;
  }
  uint64_t v5 = a3 + 2264;
  uint64_t v6 = *(_DWORD **)(a4 + 64);
  if (v6 && (uint64_t v7 = *(int *)(a4 + 56), (int)v7 < *v6))
  {
    *(_DWORD *)(a4 + 56) = v7 + 1;
    uint64_t v8 = *(void *)&v6[2 * v7 + 2];
  }
  else
  {
    uint64_t v9 = a4 + 48;
    uint64_t v10 = sub_178B458(*(void *)(a4 + 48));
    uint64_t v8 = sub_188CDC8(v9, v10);
  }
  int v11 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 160) = *(_DWORD *)(v8 + 56);
  int v12 = v11 | 0x84;
  *(_DWORD *)(v8 + 40) = v11 | 0x84;
  *(_DWORD *)(v8 + 136) = 62;
  int v13 = *(_DWORD *)(a3 + 2272);
  if (v13 != 0x7FFFFFFF)
  {
    int v14 = v13 / 10;
    int v15 = v13 % 10;
    if (v13 < 0) {
      char v16 = -5;
    }
    else {
      char v16 = 5;
    }
    unsigned int v17 = v14 + (((103 * (char)(v16 + v15)) >> 15) & 1) + ((103 * (char)(v16 + v15)) >> 10);
    int v12 = v11 | 0xA4;
    *(_DWORD *)(v8 + 152) = v17;
  }
  *(_DWORD *)(v8 + 168) = *(_DWORD *)(a3 + 2276);
  *(_DWORD *)(v8 + 40) = v12 | 0x208;
  *(_DWORD *)(v8 + 140) = 0;
  if (!(**(unsigned int (***)(uint64_t))(a3 + 2264))(v5)) {
    return;
  }
  char v18 = *(_DWORD **)(v8 + 64);
  if (v18 && (uint64_t v19 = *(int *)(v8 + 56), (int)v19 < *v18))
  {
    int v20 = v19 + 1;
    *(_DWORD *)(v8 + 56) = v19 + 1;
    uint64_t v21 = *(void *)&v18[2 * v19 + 2];
  }
  else
  {
    uint64_t v22 = sub_178B3A0(*(void *)(v8 + 48));
    uint64_t v21 = sub_188CDC8(v8 + 48, v22);
    int v20 = *(_DWORD *)(v8 + 56);
  }
  *(_DWORD *)(v8 + 40) |= 0x80u;
  *(_DWORD *)(v8 + 160) = v20;
  *(_DWORD *)(v21 + 44) |= 0x2000000u;
  uint64_t v23 = *(void *)(v21 + 520);
  if (!v23)
  {
    uint64_t v24 = *(void *)(v21 + 8);
    uint64_t v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
    if (v24) {
      uint64_t v25 = (void *)*v25;
    }
    sub_13325F8((uint64_t)v25);
    uint64_t v23 = v26;
    *(void *)(v21 + 520) = v26;
  }
  uint64_t v27 = nullsub_1(*(void *)(a3 + 2280));
  int v29 = *(_DWORD *)(v23 + 16);
  *(_DWORD *)(v23 + 16) = v29 | 0x80;
  *(void *)(v23 + 80) = v27;
  if (*(_DWORD *)(a3 + 2288) == -1 && *(_DWORD *)(a3 + 2292) == -1)
  {
    uint64_t v30 = *(int *)(a3 + 2300);
    if (v30 == 0x7FFFFFFF) {
      goto LABEL_23;
    }
LABEL_51:
    *(_DWORD *)(v23 + 16) |= 0x100u;
    *(void *)(v23 + 88) = v30 - 978307200;
    unsigned int v31 = *(unsigned __int16 *)(a3 + 2304);
    if (v31 >> 5 > 0x464) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  *(_DWORD *)(v23 + 16) = v29 | 0x88;
  uint64_t v41 = *(void *)(v23 + 48);
  if (!v41)
  {
    uint64_t v42 = *(void *)(v23 + 8);
    unint64_t v43 = (void *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
    if (v42) {
      unint64_t v43 = (void *)*v43;
    }
    uint64_t v41 = sub_15C1918((uint64_t)v43);
    *(void *)(v23 + 48) = v41;
  }
  sub_E112BC((_DWORD *)(a3 + 2288), v41, v28);
  uint64_t v30 = *(int *)(a3 + 2300);
  if (v30 != 0x7FFFFFFF) {
    goto LABEL_51;
  }
LABEL_23:
  unsigned int v31 = *(unsigned __int16 *)(a3 + 2304);
  if (v31 >> 5 <= 0x464)
  {
LABEL_24:
    float v32 = (double)v31 / 100.0;
    *(_DWORD *)(v23 + 16) |= 0x200u;
    *(float *)(v23 + 96) = v32;
  }
LABEL_25:
  double v33 = *(double *)(a3 + 2312);
  if (*(uint64_t *)&v33 > -1 && ((*(void *)&v33 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
    || (unint64_t)(*(void *)&v33 - 1) < 0xFFFFFFFFFFFFFLL
    || (*(void *)&v33 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    double v33 = v33 / 3.6;
    *(float *)&double v33 = v33;
    *(_DWORD *)(v23 + 16) |= 0x400u;
    *(_DWORD *)(v23 + 100) = LODWORD(v33);
  }
  LODWORD(v33) = *(_DWORD *)(a3 + 2320);
  uint8x8_t v37 = (uint8x8_t)vmovn_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)&v33));
  if (v37.i32[0] != 0xFFFFFF)
  {
    sub_523E70((unsigned __int8 *)(a3 + 2320), &__p);
    *(_DWORD *)(v23 + 16) |= 4u;
    uint64_t v38 = *(void *)(v23 + 8);
    unint64_t v39 = (uint64_t *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
    if (v38) {
      unint64_t v39 = (uint64_t *)*v39;
    }
    sub_1881E08((uint64_t *)(v23 + 40), (long long *)&__p, v39);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  int v40 = *(_DWORD *)(a3 + 2360);
  if (v40 == 1)
  {
    if (*(_DWORD *)(a3 + 2332) == -1
      && *(_DWORD *)(a3 + 2328) == -1
      && *(void *)(a3 + 2336) == *(void *)(a3 + 2344))
    {
      return;
    }
  }
  else if (v40 || *(_DWORD *)(a3 + 2328) == -1)
  {
    return;
  }
  *(_DWORD *)(v23 + 16) |= 0x40u;
  uint64_t v44 = *(void *)(v23 + 72);
  if (!v44)
  {
    uint64_t v45 = *(void *)(v23 + 8);
    uint64_t v46 = (void *)(v45 & 0xFFFFFFFFFFFFFFFCLL);
    if (v45) {
      uint64_t v46 = (void *)*v46;
    }
    uint64_t v44 = sub_13DAB08((uint64_t)v46);
    *(void *)(v23 + 72) = v44;
  }
  sub_523A2C(a3 + 2328, v44, v37);
}

void sub_E60AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E60B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 42))
  {
    uint64_t v5 = a3 + 1184;
    uint64_t v6 = *(_DWORD **)(a4 + 64);
    if (v6 && (uint64_t v7 = *(int *)(a4 + 56), (int)v7 < *v6))
    {
      *(_DWORD *)(a4 + 56) = v7 + 1;
      uint64_t v8 = *(void *)&v6[2 * v7 + 2];
    }
    else
    {
      uint64_t v9 = a4 + 48;
      uint64_t v10 = sub_178B458(*(void *)(a4 + 48));
      uint64_t v8 = sub_188CDC8(v9, v10);
    }
    int v11 = *(_DWORD *)(v8 + 40);
    *(_DWORD *)(v8 + 160) = *(_DWORD *)(v8 + 56);
    int v12 = v11 | 0x84;
    *(_DWORD *)(v8 + 40) = v11 | 0x84;
    *(_DWORD *)(v8 + 136) = 105;
    int v13 = *(_DWORD *)(a3 + 1192);
    if (v13 != 0x7FFFFFFF)
    {
      int v14 = v13 / 10;
      int v15 = v13 % 10;
      if (v13 < 0) {
        char v16 = -5;
      }
      else {
        char v16 = 5;
      }
      unsigned int v17 = v14 + (((103 * (char)(v16 + v15)) >> 15) & 1) + ((103 * (char)(v16 + v15)) >> 10);
      int v12 = v11 | 0xA4;
      *(_DWORD *)(v8 + 152) = v17;
    }
    *(_DWORD *)(v8 + 168) = *(_DWORD *)(a3 + 1196);
    *(_DWORD *)(v8 + 40) = v12 | 0x208;
    *(_DWORD *)(v8 + 140) = 0;
    if ((**(unsigned int (***)(uint64_t))(a3 + 1184))(v5))
    {
      char v18 = *(_DWORD **)(v8 + 64);
      if (v18 && (uint64_t v19 = *(int *)(v8 + 56), (int)v19 < *v18))
      {
        int v20 = v19 + 1;
        *(_DWORD *)(v8 + 56) = v19 + 1;
        uint64_t v21 = *(void *)&v18[2 * v19 + 2];
      }
      else
      {
        uint64_t v22 = sub_178B3A0(*(void *)(v8 + 48));
        uint64_t v21 = sub_188CDC8(v8 + 48, v22);
        int v20 = *(_DWORD *)(v8 + 56);
      }
      *(_DWORD *)(v8 + 40) |= 0x80u;
      *(_DWORD *)(v8 + 160) = v20;
      *(_DWORD *)(v21 + 52) |= 4u;
      uint64_t v23 = *(int32x2_t **)(v21 + 848);
      if (!v23)
      {
        uint64_t v24 = *(void *)(v21 + 8);
        uint64_t v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
        if (v24) {
          uint64_t v25 = (void *)*v25;
        }
        uint64_t v23 = (int32x2_t *)sub_178BC20((uint64_t)v25);
        *(void *)(v21 + 848) = v23;
      }
      uint64_t v26 = *(void *)(a3 + 1200);
      int v27 = (int)v26 / 100;
      int v28 = (int)v26 % 100;
      if (v26 < 0) {
        __int16 v29 = -50;
      }
      else {
        __int16 v29 = 50;
      }
      unsigned int v30 = v27 + ((5243 * (__int16)(v29 + v28)) >> 19) + ((5243 * (__int16)(v29 + v28)) >> 31);
      __int32 v31 = v23[5].i32[0];
      v23[5].i32[0] = v31 | 2;
      int v32 = *(_DWORD *)(a3 + 1208);
      int v33 = v32 / 10;
      int v34 = v32 % 10;
      if (v32 < 0) {
        char v35 = -5;
      }
      else {
        char v35 = 5;
      }
      v23[7].i32[0] = v30;
      v23[7].i32[1] = v33 + (((103 * (char)(v35 + v34)) >> 15) & 1) + ((103 * (char)(v35 + v34)) >> 10);
      v23[8] = vmovn_s64(*(int64x2_t *)(a3 + 1216));
      unint64_t v36 = (const std::string **)(a3 + 1232);
      v23[5].i32[0] = v31 | 0x1F;
      uint64_t v37 = (uint64_t)v23[6];
      if (v37)
      {
        uint64_t v38 = v36;
      }
      else
      {
        int32x2_t v39 = v23[1];
        int v40 = (void *)(*(void *)&v39 & 0xFFFFFFFFFFFFFFFCLL);
        if (v39.i8[0]) {
          int v40 = (void *)*v40;
        }
        sub_13D6A1C((uint64_t)v40);
        uint64_t v37 = v41;
        v23[6] = (int32x2_t)v41;
        uint64_t v38 = v36;
      }
      sub_5F4D30(v38, v37);
    }
  }
}

void sub_E60E48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(a2 + 43))
  {
    uint64_t v6 = a3 + 112;
    uint64_t v7 = *(_DWORD **)(a4 + 64);
    if (v7 && (uint64_t v8 = *(int *)(a4 + 56), (int)v8 < *v7))
    {
      *(_DWORD *)(a4 + 56) = v8 + 1;
      uint64_t v9 = *(void *)&v7[2 * v8 + 2];
    }
    else
    {
      uint64_t v10 = a4 + 48;
      uint64_t v11 = sub_178B458(*(void *)(a4 + 48));
      uint64_t v9 = sub_188CDC8(v10, v11);
    }
    int v12 = *(_DWORD *)(v9 + 40);
    *(_DWORD *)(v9 + 160) = *(_DWORD *)(v9 + 56);
    int v13 = v12 | 0x84;
    *(_DWORD *)(v9 + 40) = v12 | 0x84;
    *(_DWORD *)(v9 + 136) = 106;
    int v14 = *(_DWORD *)(a3 + 120);
    if (v14 != 0x7FFFFFFF)
    {
      int v15 = v14 / 10;
      int v16 = v14 % 10;
      if (v14 < 0) {
        char v17 = -5;
      }
      else {
        char v17 = 5;
      }
      unsigned int v18 = v15 + (((103 * (char)(v17 + v16)) >> 15) & 1) + ((103 * (char)(v17 + v16)) >> 10);
      int v13 = v12 | 0xA4;
      *(_DWORD *)(v9 + 152) = v18;
    }
    *(_DWORD *)(v9 + 168) = *(_DWORD *)(a3 + 124);
    *(_DWORD *)(v9 + 40) = v13 | 0x208;
    *(_DWORD *)(v9 + 140) = 0;
    if ((**(unsigned int (***)(uint64_t))(a3 + 112))(v6))
    {
      uint64_t v19 = *(_DWORD **)(v9 + 64);
      if (v19 && (uint64_t v20 = *(int *)(v9 + 56), (int)v20 < *v19))
      {
        int v21 = v20 + 1;
        *(_DWORD *)(v9 + 56) = v20 + 1;
        uint64_t v22 = *(void *)&v19[2 * v20 + 2];
      }
      else
      {
        uint64_t v23 = sub_178B3A0(*(void *)(v9 + 48));
        uint64_t v22 = sub_188CDC8(v9 + 48, v23);
        int v21 = *(_DWORD *)(v9 + 56);
      }
      *(_DWORD *)(v9 + 40) |= 0x80u;
      *(_DWORD *)(v9 + 160) = v21;
      *(_DWORD *)(v22 + 52) |= 8u;
      uint64_t v24 = *(void **)(v22 + 856);
      if (!v24)
      {
        uint64_t v25 = *(void *)(v22 + 8);
        uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
        if (v25) {
          uint64_t v26 = (void *)*v26;
        }
        uint64_t v24 = sub_178BCD8((uint64_t)v26);
        *(void *)(v22 + 856) = v24;
      }
      sub_42438C((uint64_t)v48, *(void **)a1, *(void *)(a1 + 8));
      sub_427A28((uint64_t)v48, (void *)(a3 + 128), 1, 0, v47);
      uint64_t v40 = 0;
      *(void *)&long long __p = 0x4039000000000000;
      *((void *)&__p + 1) = 5000;
      long long v38 = xmmword_20E7C10;
      long long v39 = xmmword_20E7C20;
      uint64_t v41 = 20000000;
      uint64_t v42 = 0x3FF199999999999ALL;
      uint64_t v43 = 0x3E800002710;
      uint64_t v44 = 0xA00002710;
      long long v45 = xmmword_20E7C00;
      long long v46 = 0x3FE6147AE147AE14uLL;
      sub_1109790((uint64_t)&__p, (uint64_t)v47);
      sub_188B428((uint64_t)v47, (uint64_t)&__p);
      *((_DWORD *)v24 + 10) |= 1u;
      uint64_t v27 = v24[1];
      int v28 = (uint64_t *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
      if (v27) {
        int v28 = (uint64_t *)*v28;
      }
      sub_1881E08(v24 + 6, &__p, v28);
      if (SBYTE7(v38) < 0) {
        operator delete((void *)__p);
      }
      sub_1116458(v47);
      sub_423E54((uint64_t)&v52);
      long long v49 = off_24397A0;
      __int16 v29 = &v51;
      do
      {
        unsigned int v30 = v29 - 6;
        uint64_t v31 = *(v29 - 3);
        if (v31)
        {
          uint64_t v32 = 0;
          uint64_t v33 = 0;
          int v34 = v29 - 5;
          do
          {
            if ((*(char *)(*v30 + v33) & 0x80000000) == 0)
            {
              uint64_t v35 = *v34 + v32;
              unint64_t v36 = *(void **)(v35 + 8);
              if (v36)
              {
                *(void *)(v35 + 16) = v36;
                operator delete(v36);
                uint64_t v31 = *(v29 - 3);
              }
            }
            ++v33;
            v32 += 32;
          }
          while (v33 != v31);
          operator delete((void *)*(v29 - 6));
          *(v29 - 6) = (uint64_t)&unk_20E1710;
          *(v29 - 1) = 0;
          *(v29 - 4) = 0;
          *(v29 - 3) = 0;
          *int v34 = 0;
        }
        v29 -= 6;
      }
      while (v30 != &v50);
    }
  }
}

void sub_E61224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_1116458(&a28);
    sub_CB998C((uint64_t)&a36);
    _Unwind_Resume(a1);
  }
  sub_1116458(&a28);
  sub_CB998C((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_E61270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

std::string *sub_E61284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4 = *(_DWORD **)(a3 + 64);
  if (v4 && (uint64_t v5 = *(int *)(a3 + 56), (int)v5 < *v4))
  {
    *(_DWORD *)(a3 + 56) = v5 + 1;
    uint64_t v6 = *(void *)&v4[2 * v5 + 2];
  }
  else
  {
    uint64_t v7 = a3 + 48;
    uint64_t v8 = sub_17874D8(*(void *)(a3 + 48));
    uint64_t v6 = sub_188CDC8(v7, v8);
  }
  uint64_t v9 = nullsub_1(*(void *)(a2 + 56));
  *(_DWORD *)(v6 + 40) |= 0x20u;
  *(void *)(v6 + 176) = v9;
  uint64_t v10 = nullsub_1(*(void *)(a2 + 64));
  *(_DWORD *)(v6 + 40) |= 0x40u;
  *(void *)(v6 + 184) = v10;
  uint64_t v12 = *(void *)(a2 + 8);
  if (*(void *)a2 != v12)
  {
    uint64_t v13 = *(void *)a2 + 208;
    do
    {
      int v15 = *(_DWORD **)(v6 + 64);
      if (v15 && (uint64_t v16 = *(int *)(v6 + 56), (int)v16 < *v15))
      {
        *(_DWORD *)(v6 + 56) = v16 + 1;
        uint64_t v17 = *(void *)&v15[2 * v16 + 2];
      }
      else
      {
        uint64_t v18 = sub_1787534(*(void *)(v6 + 48));
        uint64_t v17 = sub_188CDC8(v6 + 48, v18);
      }
      uint64_t v19 = nullsub_1(*(void *)(v13 - 168));
      int v20 = *(_DWORD *)(v17 + 40);
      *(_DWORD *)(v17 + 40) = v20 | 0x20;
      *(void *)(v17 + 88) = v19;
      if (*(char *)(v13 - 169) < 0)
      {
        if (!*(void *)(v13 - 184))
        {
LABEL_15:
          int v21 = *(_DWORD *)(v13 - 208);
          if (v21 != 0x7FFFFFFF) {
            goto LABEL_16;
          }
          goto LABEL_17;
        }
      }
      else if (!*(unsigned char *)(v13 - 169))
      {
        goto LABEL_15;
      }
      *(_DWORD *)(v17 + 40) = v20 | 0x21;
      uint64_t v32 = *(void *)(v17 + 8);
      uint64_t v33 = (uint64_t *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
      if (v32) {
        uint64_t v33 = (uint64_t *)*v33;
      }
      sub_1881DF4((std::string **)(v17 + 48), (long long *)(v13 - 192), v33);
      int v21 = *(_DWORD *)(v13 - 208);
      if (v21 != 0x7FFFFFFF)
      {
LABEL_16:
        *(_DWORD *)(v17 + 40) |= 8u;
        *(double *)(v17 + 72) = (double)v21 + -978307200.0;
      }
LABEL_17:
      int v22 = *(_DWORD *)(v13 - 204);
      if (v22 != 0x7FFFFFFF && *(unsigned char *)(v13 - 200) == 1)
      {
        *(_DWORD *)(v17 + 40) |= 0x10u;
        *(double *)(v17 + 80) = (double)v22 + -978307200.0;
      }
      if (*(unsigned __int8 *)(v13 - 199) - 1 <= 1)
      {
        *(_DWORD *)(v17 + 40) |= 0x40u;
        *(unsigned char *)(v17 + 96) = 1;
        uint64_t v23 = (const std::string **)(v13 - 160);
        if (sub_45FB38((void *)(v13 - 160)))
        {
LABEL_22:
          int v24 = *(_DWORD *)v13;
          if ((*(_DWORD *)v13 - 1) > 2) {
            goto LABEL_23;
          }
          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v23 = (const std::string **)(v13 - 160);
        if (sub_45FB38((void *)(v13 - 160))) {
          goto LABEL_22;
        }
      }
      *(_DWORD *)(v17 + 40) |= 4u;
      uint64_t v26 = *(void *)(v17 + 64);
      if (!v26)
      {
        uint64_t v27 = *(void *)(v17 + 8);
        int v28 = (void *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
        if (v27) {
          int v28 = (void *)*v28;
        }
        sub_13D6A1C((uint64_t)v28);
        uint64_t v26 = v29;
        *(void *)(v17 + 64) = v29;
      }
      sub_5F4D30(v23, v26);
      int v24 = *(_DWORD *)v13;
      if ((*(_DWORD *)v13 - 1) > 2)
      {
LABEL_23:
        int v25 = *(char *)(v13 + 31);
        if ((v25 & 0x80000000) == 0) {
          goto LABEL_24;
        }
        goto LABEL_33;
      }
LABEL_32:
      *(_DWORD *)(v17 + 40) |= 0x80u;
      *(_DWORD *)(v17 + 100) = v24;
      int v25 = *(char *)(v13 + 31);
      if ((v25 & 0x80000000) == 0)
      {
LABEL_24:
        if ((_BYTE)v25) {
          goto LABEL_34;
        }
        goto LABEL_8;
      }
LABEL_33:
      if (*(void *)(v13 + 16))
      {
LABEL_34:
        *(_DWORD *)(v17 + 40) |= 2u;
        uint64_t v30 = *(void *)(v17 + 8);
        uint64_t v31 = (uint64_t *)(v30 & 0xFFFFFFFFFFFFFFFCLL);
        if (v30) {
          uint64_t v31 = (uint64_t *)*v31;
        }
        sub_1881DF4((std::string **)(v17 + 56), (long long *)(v13 + 8), v31);
      }
LABEL_8:
      uint64_t v14 = v13 + 32;
      v13 += 240;
    }
    while (v14 != v12);
  }
  int v34 = *(_DWORD **)(a2 + 24);
  for (uint64_t i = *(_DWORD **)(a2 + 32); v34 != i; v34 += 10)
  {
    while (1)
    {
      unint64_t v36 = *(_DWORD **)(v6 + 88);
      if (v36 && (uint64_t v37 = *(int *)(v6 + 80), (int)v37 < *v36))
      {
        *(_DWORD *)(v6 + 80) = v37 + 1;
        long long v38 = *(_DWORD **)&v36[2 * v37 + 2];
      }
      else
      {
        sub_1787590(*(void *)(v6 + 72));
        long long v38 = (_DWORD *)sub_188CDC8(v6 + 72, v39);
      }
      int v40 = *v34 - 978307200;
      int v41 = v38[4];
      v38[4] = v41 | 4;
      v38[8] = v40;
      int v42 = v34[1] - 978307200;
      v38[4] = v41 | 0xC;
      v38[9] = v42;
      int v43 = v34[3];
      if (v43 == v34[2]) {
        break;
      }
      v38[4] = v41 | 0xE;
      double v11 = (double)(int)v34[2] / 10.0;
      v38[6] = v11;
      v38[7] = ((double)v43 / 10.0);
      v38[4] = v41 | 0xF;
      v34 += 10;
      if (v34 == i) {
        goto LABEL_50;
      }
    }
    double v11 = (double)(int)v34[4] / 10.0;
    v38[11] = v11;
    v38[4] = v41 | 0x2C;
  }
LABEL_50:
  if (*(_DWORD *)(a2 + 48) != 0x7FFFFFFF && *(_DWORD *)(a2 + 52) != 0x7FFFFFFF)
  {
    uint64_t v44 = *(_DWORD **)(v6 + 112);
    if (v44 && (uint64_t v45 = *(int *)(v6 + 104), (int)v45 < *v44))
    {
      *(_DWORD *)(v6 + 104) = v45 + 1;
      long long v46 = *(_DWORD **)&v44[2 * v45 + 2];
    }
    else
    {
      uint64_t v47 = sub_17860B0(*(void *)(v6 + 96));
      long long v46 = (_DWORD *)sub_188CDC8(v6 + 96, (uint64_t)v47);
    }
    int v48 = *(_DWORD *)(a2 + 48) - 978307200;
    int v49 = v46[4];
    v46[4] = v49 | 1;
    v46[6] = v48;
    int v50 = *(_DWORD *)(a2 + 52);
    int v51 = 0x7FFFFFFF;
    if (v50 != 0x7FFFFFFF)
    {
      int v52 = *(_DWORD *)(a2 + 48);
      int v53 = 10 * (v50 - v52);
      if (v52 == 0x7FFFFFFF) {
        int v51 = 0x7FFFFFFF;
      }
      else {
        int v51 = v53;
      }
    }
    double v11 = (double)v51 / 10.0;
    v46[4] = v49 | 3;
    v46[7] = v11;
  }
  uint64_t v54 = *(unsigned __int8 *)(a2 + 95);
  if ((v54 & 0x80u) != 0) {
    uint64_t v54 = *(void *)(a2 + 80);
  }
  if (v54)
  {
    *(_DWORD *)(v6 + 40) |= 1u;
    uint64_t v55 = *(void *)(v6 + 8);
    int v56 = (uint64_t *)(v55 & 0xFFFFFFFFFFFFFFFCLL);
    if (v55) {
      int v56 = (uint64_t *)*v56;
    }
    sub_1881DF4((std::string **)(v6 + 136), (long long *)(a2 + 72), v56);
  }
  uint64_t v57 = *(unsigned __int8 *)(a2 + 119);
  if ((v57 & 0x80u) != 0) {
    uint64_t v57 = *(void *)(a2 + 104);
  }
  if (v57)
  {
    *(_DWORD *)(v6 + 40) |= 2u;
    uint64_t v58 = *(void *)(v6 + 8);
    uint64_t v59 = (uint64_t *)(v58 & 0xFFFFFFFFFFFFFFFCLL);
    if (v58) {
      uint64_t v59 = (uint64_t *)*v59;
    }
    sub_1881DF4((std::string **)(v6 + 144), (long long *)(a2 + 96), v59);
  }
  uint64_t v60 = *(unsigned __int8 *)(a2 + 143);
  if ((v60 & 0x80u) != 0) {
    uint64_t v60 = *(void *)(a2 + 128);
  }
  if (v60)
  {
    *(_DWORD *)(v6 + 40) |= 4u;
    uint64_t v61 = *(void *)(v6 + 8);
    int v62 = (uint64_t *)(v61 & 0xFFFFFFFFFFFFFFFCLL);
    if (v61) {
      int v62 = (uint64_t *)*v62;
    }
    sub_1881DF4((std::string **)(v6 + 152), (long long *)(a2 + 120), v62);
  }
  int v63 = *(void **)(a2 + 144);
  __int16 v64 = *(void **)(a2 + 152);
  if (v63 != v64)
  {
    int v65 = (_DWORD *)(v6 + 120);
    do
    {
      while (1)
      {
        uint64_t v66 = nullsub_1(*v63);
        uint64_t v67 = v66;
        uint64_t v68 = *(unsigned int *)(v6 + 120);
        if (v68 == *(_DWORD *)(v6 + 124)) {
          break;
        }
        *(void *)(*(void *)(v6 + 128) + 8 * v68) = v66;
        *int v65 = v68 + 1;
        if (++v63 == v64) {
          goto LABEL_84;
        }
      }
      sub_188CA54((unsigned int *)(v6 + 120), v68 + 1);
      *(void *)(*(void *)(v6 + 128) + 8 * v68) = v67;
      *int v65 = v68 + 1;
      ++v63;
    }
    while (v63 != v64);
  }
LABEL_84:
  int v69 = *(_DWORD *)(a2 + 200);
  if (v69 == 1)
  {
    if (*(_DWORD *)(a2 + 172) == -1 && *(_DWORD *)(a2 + 168) == -1 && *(void *)(a2 + 176) == *(void *)(a2 + 184)) {
      goto LABEL_96;
    }
  }
  else if (v69 || *(_DWORD *)(a2 + 168) == -1)
  {
    goto LABEL_96;
  }
  *(_DWORD *)(v6 + 40) |= 0x10u;
  uint64_t v70 = *(void *)(v6 + 168);
  if (!v70)
  {
    uint64_t v71 = *(void *)(v6 + 8);
    int v72 = (void *)(v71 & 0xFFFFFFFFFFFFFFFCLL);
    if (v71) {
      int v72 = (void *)*v72;
    }
    uint64_t v70 = sub_13DAB08((uint64_t)v72);
    *(void *)(v6 + 168) = v70;
  }
  sub_523A2C(a2 + 168, v70, *(uint8x8_t *)&v11);
LABEL_96:
  result = *(std::string **)(a2 + 280);
  if (result != (std::string *)-1)
  {
    result = (std::string *)nullsub_1(result);
    *(_DWORD *)(v6 + 40) |= 0x80u;
    *(void *)(v6 + 192) = result;
  }
  uint64_t v74 = *(unsigned __int8 *)(a2 + 311);
  if ((v74 & 0x80u) != 0) {
    uint64_t v74 = *(void *)(a2 + 296);
  }
  if (v74)
  {
    *(_DWORD *)(v6 + 40) |= 8u;
    uint64_t v75 = *(void *)(v6 + 8);
    int v76 = (uint64_t *)(v75 & 0xFFFFFFFFFFFFFFFCLL);
    if (v75) {
      int v76 = (uint64_t *)*v76;
    }
    return sub_1881DF4((std::string **)(v6 + 160), (long long *)(a2 + 288), v76);
  }
  return result;
}

std::string *sub_E61990(uint8x8_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(_DWORD **)(a4 + 88);
  if (v5 && (uint64_t v6 = *(int *)(a4 + 80), (int)v6 < *v5))
  {
    *(_DWORD *)(a4 + 80) = v6 + 1;
    uint64_t v7 = *(void *)&v5[2 * v6 + 2];
    uint64_t v8 = *(unint64_t **)a3;
    uint64_t v9 = *(unint64_t **)(a3 + 8);
    if (*(unint64_t **)a3 == v9) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v10 = a4 + 72;
    uint64_t v11 = sub_1787428(*(void *)(a4 + 72));
    uint64_t v7 = sub_188CDC8(v10, v11);
    uint64_t v8 = *(unint64_t **)a3;
    uint64_t v9 = *(unint64_t **)(a3 + 8);
    if (*(unint64_t **)a3 == v9) {
      goto LABEL_10;
    }
  }
  uint64_t v12 = (_DWORD *)(v7 + 24);
  do
  {
    while (1)
    {
      unsigned int v13 = sub_2D0F10(*v8);
      uint64_t v14 = v13;
      uint64_t v15 = *(unsigned int *)(v7 + 24);
      if (v15 == *(_DWORD *)(v7 + 28)) {
        break;
      }
      *(void *)(*(void *)(v7 + 32) + 8 * v15) = v13;
      *uint64_t v12 = v15 + 1;
      if (++v8 == v9) {
        goto LABEL_10;
      }
    }
    sub_188CA54((unsigned int *)(v7 + 24), v15 + 1);
    *(void *)(*(void *)(v7 + 32) + 8 * v15) = v14;
    *uint64_t v12 = v15 + 1;
    ++v8;
  }
  while (v8 != v9);
LABEL_10:
  uint64_t v16 = *(int **)(a3 + 24);
  for (uint64_t i = *(int **)(a3 + 32); v16 != i; v16 += 36)
  {
    while (1)
    {
      int v21 = *(_DWORD **)(v7 + 56);
      if (v21)
      {
        uint64_t v22 = *(int *)(v7 + 48);
        if ((int)v22 < *v21) {
          break;
        }
      }
      uint64_t v18 = sub_1787818(*(void *)(v7 + 40));
      uint64_t v19 = sub_188CDC8(v7 + 40, v18);
      sub_E6B75C(v16, v19, v20);
      v16 += 36;
      if (v16 == i) {
        goto LABEL_16;
      }
    }
    *(_DWORD *)(v7 + 48) = v22 + 1;
    sub_E6B75C(v16, *(void *)&v21[2 * v22 + 2], a1);
  }
LABEL_16:
  *(_DWORD *)(v7 + 16) |= 1u;
  uint64_t v23 = *(void *)(v7 + 8);
  int v24 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
  if (v23) {
    int v24 = (uint64_t *)*v24;
  }
  result = sub_1881DF4((std::string **)(v7 + 64), (long long *)(a3 + 56), v24);
  char v26 = *(unsigned char *)(a3 + 48);
  *(_DWORD *)(v7 + 16) |= 2u;
  *(unsigned char *)(v7 + 72) = v26;
  return result;
}

uint64_t sub_E61B48(uint64_t result, uint64_t a2, uint64_t a3)
{
  v4 = (void **)result;
  uint64_t v5 = *(_DWORD **)(a3 + 56);
  if (v5 && (int v6 = *(_DWORD *)(a3 + 48), v6 < *v5))
  {
    *(_DWORD *)(a3 + 48) = v6 + 1;
    if (!*(unsigned char *)(a2 + 9))
    {
LABEL_6:
      uint64_t v9 = sub_3755E4(*v4);
      sub_49BC10(v9, (unint64_t *)a2, (char **)&v22);
      int v24 = 0;
      int v25 = 0;
      char v26 = 0;
      uint64_t v11 = (uint64_t *)v22;
      uint64_t v10 = v23;
      int64_t v12 = (char *)v23 - (unsigned char *)v22;
      if (v23 != v22)
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 2);
        if (v13 >= 0x1555555555555556) {
          sub_2E00();
        }
        int v24 = operator new(v12);
        int v25 = v24;
        char v26 = (char *)v24 + 12 * v13;
        long long __p = &v24;
        do
        {
          sub_3BDEE8((char ***)&__p, v11);
          uint64_t v11 = (uint64_t *)((char *)v11 + 12);
        }
        while (v11 != v10);
        uint64_t v10 = (uint64_t *)v22;
      }
      if (v10)
      {
        uint64_t v23 = v10;
        operator delete(v10);
      }
      long long __p = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      sub_426D8((uint64_t *)&v24, 0xAAAAAAAAAAAAAAABLL * ((v25 - (unsigned char *)v24) >> 2), 0, 1, &__p, (uint64_t)&v22, 1.0);
      if (__p) {
        operator delete(__p);
      }
      long long __p = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v14 = v23;
      if (v23)
      {
        unint64_t v15 = 0;
        do
        {
          uint64_t v16 = (void *)sub_5BF948(&v22, v15);
          if ((*v16 & v17) != 0)
          {
            uint64_t v18 = (uint64_t *)sub_413C0(&v24, v15);
            sub_30C0C((char **)&__p, v18);
          }
          ++v15;
        }
        while (v14 != (uint64_t *)v15);
      }
      sub_E691C0();
    }
  }
  else
  {
    uint64_t v7 = a3 + 40;
    uint64_t v8 = sub_1787B90(*(void *)(a3 + 40));
    result = sub_188CDC8(v7, (uint64_t)v8);
    if (!*(unsigned char *)(a2 + 9)) {
      goto LABEL_6;
    }
  }
  return result;
}

void sub_E61DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_E61E34(long double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(_DWORD **)(a4 + 56);
  if (v5)
  {
    uint64_t v6 = *(int *)(a4 + 48);
    if ((int)v6 < *v5)
    {
      *(_DWORD *)(a4 + 48) = v6 + 1;
      uint64_t v7 = *(void *)&v5[2 * v6 + 2];
      uint64_t v8 = *(unsigned __int8 *)(a3 + 31);
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = *(void *)(a3 + 16);
      }
      if (!v8) {
        goto LABEL_13;
      }
LABEL_10:
      *(_DWORD *)(v7 + 40) |= 2u;
      uint64_t v12 = *(void *)(v7 + 8);
      unint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      if (v12) {
        unint64_t v13 = (uint64_t *)*v13;
      }
      sub_1881DF4((std::string **)(v7 + 128), (long long *)(a3 + 8), v13);
      goto LABEL_13;
    }
  }
  uint64_t v9 = a4 + 40;
  uint64_t v10 = sub_178760C(*(void *)(a4 + 40));
  uint64_t v7 = sub_188CDC8(v9, v10);
  uint64_t v11 = *(unsigned __int8 *)(a3 + 31);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a3 + 16);
  }
  if (v11) {
    goto LABEL_10;
  }
LABEL_13:
  if (*(void *)a3 != -1)
  {
    uint64_t v14 = nullsub_1(*(void *)a3);
    *(_DWORD *)(v7 + 40) |= 0x20u;
    *(void *)(v7 + 160) = v14;
  }
  uint64_t v15 = *(unsigned __int8 *)(a3 + 55);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a3 + 40);
  }
  if (v15)
  {
    *(_DWORD *)(v7 + 40) |= 4u;
    uint64_t v16 = *(void **)(v7 + 136);
    if (!v16)
    {
      uint64_t v17 = *(void *)(v7 + 8);
      uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (v17) {
        uint64_t v18 = (void *)*v18;
      }
      uint64_t v16 = sub_15C221C((uint64_t)v18);
      *(void *)(v7 + 136) = v16;
    }
    *((_DWORD *)v16 + 4) |= 1u;
    uint64_t v19 = (std::string **)(v16 + 3);
    uint64_t v20 = v16[1];
    uint64_t v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
    if (v20) {
      uint64_t v21 = (uint64_t *)*v21;
    }
    sub_1881DF4(v19, (long long *)(a3 + 32), v21);
    *(_DWORD *)(v7 + 40) |= 8u;
    uint64_t v23 = *(void *)(v7 + 144);
    if (!v23)
    {
      uint64_t v24 = *(void *)(v7 + 8);
      int v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
      if (v24) {
        int v25 = (void *)*v25;
      }
      uint64_t v23 = sub_15C1918((uint64_t)v25);
      *(void *)(v7 + 144) = v23;
    }
    a1 = sub_E112BC((_DWORD *)(a3 + 56), v23, v22);
  }
  if (*(void *)(a3 + 72) != *(void *)(a3 + 80))
  {
    *(_DWORD *)(v7 + 40) |= 0x10u;
    char v26 = *(void **)(v7 + 152);
    if (!v26)
    {
      uint64_t v27 = *(void *)(v7 + 8);
      int v28 = (void *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
      if (v27) {
        int v28 = (void *)*v28;
      }
      char v26 = sub_1478C60((uint64_t)v28);
      *(void *)(v7 + 152) = v26;
    }
    sub_3E9CB0(a3 + 72, (uint64_t)v26);
  }
  uint64_t v29 = *(int **)(a3 + 96);
  for (uint64_t i = *(int **)(a3 + 104); v29 != i; v29 += 36)
  {
    while (1)
    {
      int v34 = *(_DWORD **)(v7 + 112);
      if (v34)
      {
        uint64_t v35 = *(int *)(v7 + 104);
        if ((int)v35 < *v34) {
          break;
        }
      }
      uint64_t v31 = sub_1787818(*(void *)(v7 + 96));
      uint64_t v32 = sub_188CDC8(v7 + 96, v31);
      sub_E6B75C(v29, v32, v33);
      v29 += 36;
      if (v29 == i) {
        goto LABEL_41;
      }
    }
    *(_DWORD *)(v7 + 104) = v35 + 1;
    sub_E6B75C(v29, *(void *)&v34[2 * v35 + 2], *(uint8x8_t *)&a1);
  }
LABEL_41:
  if (*(unsigned char *)(a3 + 148))
  {
    *(_DWORD *)(v7 + 40) |= 0x40u;
    *(unsigned char *)(v7 + 168) = 1;
  }
}

uint64_t sub_E620C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    v4 = *(void **)(a1 + 40);
    if (v3 == v2)
    {
LABEL_11:
      *(void *)(a1 + 48) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*(char *)(v3 - 9) < 0)
      {
        operator delete(*(void **)(v3 - 32));
        if (*(char *)(v3 - 41) < 0) {
LABEL_9:
        }
          operator delete(*(void **)(v3 - 64));
      }
      else if (*(char *)(v3 - 41) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 72;
      if (v3 == v2)
      {
        v4 = *(void **)(a1 + 40);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  uint64_t v5 = *(void **)(a1 + 16);
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = 0;
  if (v7) {
    operator delete(v7);
  }
  return a1;
}

char *sub_E62180(void **a1, uint64_t a2)
{
  unint64_t v3 = 0x8E38E38E38E38E39 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    sub_2E00();
  }
  if (0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x1C71C71C71C71C72 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0x8E38E38E38E38E39 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x1C71C71C71C71C7) {
    unint64_t v5 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x38E38E38E38E38ELL) {
    sub_188D718();
  }
  uint64_t v7 = 72 * v5;
  uint64_t v8 = (char *)operator new(72 * v5);
  uint64_t v9 = &v8[72 * v3];
  *(void *)uint64_t v9 = *(void *)a2;
  uint64_t v10 = &v8[v7];
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v9 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  v9[32] = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(a2 + 40);
  *((void *)v9 + 7) = *(void *)(a2 + 56);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  v9[64] = *(unsigned char *)(a2 + 64);
  uint64_t v11 = v9 + 72;
  uint64_t v12 = (void **)*a1;
  unint64_t v13 = (void **)a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v13) {
      return v11;
    }
    goto LABEL_21;
  }
  uint64_t v14 = 0;
  do
  {
    uint64_t v15 = &v9[v14 * 8];
    uint64_t v16 = &v13[v14];
    *((void *)v15 - 9) = v13[v14 - 9];
    long long v17 = *(_OWORD *)&v13[v14 - 8];
    *((void *)v15 - 6) = v13[v14 - 6];
    *((_OWORD *)v15 - 4) = v17;
    *(v16 - 7) = 0;
    *(v16 - 6) = 0;
    *(v16 - 8) = 0;
    *(v15 - 40) = (char)v13[v14 - 5];
    long long v18 = *(_OWORD *)&v13[v14 - 4];
    *((void *)v15 - 2) = v13[v14 - 2];
    *((_OWORD *)v15 - 2) = v18;
    *(v16 - 3) = 0;
    *(v16 - 2) = 0;
    *(v16 - 4) = 0;
    *(v15 - 8) = (char)v13[v14 - 1];
    v14 -= 9;
  }
  while (&v13[v14] != v12);
  uint64_t v19 = (void **)*a1;
  unint64_t v13 = (void **)a1[1];
  *a1 = &v9[v14 * 8];
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v19)
  {
    while (1)
    {
      if (*((char *)v13 - 9) < 0)
      {
        operator delete(*(v13 - 4));
        if (*((char *)v13 - 41) < 0) {
LABEL_18:
        }
          operator delete(*(v13 - 8));
      }
      else if (*((char *)v13 - 41) < 0)
      {
        goto LABEL_18;
      }
      v13 -= 9;
      if (v13 == v19)
      {
        unint64_t v13 = v19;
        break;
      }
    }
  }
  if (v13) {
LABEL_21:
  }
    operator delete(v13);
  return v11;
}

void *sub_E62384(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  unint64_t v9 = __ROR8__(*a2, 32);
  unint64_t v10 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
  unint64_t v11 = v10 ^ (v10 >> 33);
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10 ^ (v10 >> 33);
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = v11 & (v12 - 1);
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v18 = v15[1];
            if (v18 == v11)
            {
              if (*((_DWORD *)v15 + 4) == v8 && *((_DWORD *)v15 + 5) == HIDWORD(v8)) {
                return v15;
              }
            }
            else if ((v18 & (v12 - 1)) != v4)
            {
              goto LABEL_31;
            }
            uint64_t v15 = (void *)*v15;
            if (!v15) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 4) == v8 && *((_DWORD *)v15 + 5) == HIDWORD(v8)) {
              return v15;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_31:
  uint64_t v15 = operator new(0x20uLL);
  *uint64_t v15 = 0;
  v15[1] = v11;
  uint64_t v20 = *a4;
  v15[2] = *a3;
  v15[3] = v20;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v12 && (float)(v22 * (float)v12) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_34:
      *uint64_t v15 = *v24;
LABEL_69:
      *uint64_t v24 = v15;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v12 >= 3) {
      BOOL v25 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v12);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 8);
    }
    if (prime > v12) {
      goto LABEL_45;
    }
    if (prime < v12)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v12) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v32 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v24) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v4 = v11;
        uint64_t v23 = *(void *)a1;
        uint64_t v24 = *(void **)(*(void *)a1 + 8 * v11);
        if (v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v4 = v32 & v11;
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = *(void **)(*(void *)a1 + 8 * (v32 & v11));
      if (v24) {
        goto LABEL_34;
      }
    }
  }
  *uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v33 = *(void *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v33 >= v12) {
        v33 %= v12;
      }
    }
    else
    {
      v33 &= v12 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_E626D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_E626E8(void **a1, unsigned char *a2, void *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 3;
  unint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)unint64_t v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint8x8_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint8x8_t v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          float v22 = (_OWORD *)(v5 + 16);
          uint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)unint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint8x8_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    unint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint8x8_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    unint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 2;
    }
    if (v52 >> 61) {
      sub_188D718();
    }
    int v53 = (char *)operator new(8 * v52);
    uint64_t v31 = &v53[8 * (v52 >> 2)];
    unint64_t v32 = &v53[8 * v52];
    if (v30)
    {
      uint64_t v54 = &v53[8 * v52];
      operator delete(v30);
      unint64_t v32 = v54;
      int v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      uint64_t v35 = v31 + 8;
      unint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  int v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  uint64_t v35 = v31 + 8;
  unint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    uint64_t v39 = v9;
    unint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    uint64_t v39 = v9;
    unint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v39 = &v9[-v41];
    unint64_t v36 = &v31[-v41];
    int v42 = v31 - 16;
    int v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)int v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    int v49 = v9;
    size_t v50 = v47 - v9;
    int v51 = v32;
    memmove(v35, v49, v50);
    unint64_t v32 = v51;
    int v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_E62A40(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_E62A58(std::string **a1, void *__src, size_t __n, uint64_t *a4)
{
  if (__n >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  if (__n >= 0x17)
  {
    size_t v9 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17) {
      size_t v9 = __n | 7;
    }
    size_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = __n;
    unint64_t v12 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __n;
  p_dst = &__dst;
  if (__n) {
LABEL_8:
  }
    memcpy(p_dst, __src, __n);
  *((unsigned char *)p_dst + __n) = 0;
  sub_1881DF4(a1, &__dst, a4);
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_E62B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_E62B60()
{
  byte_25FBD57 = 1;
  word_25FBD40 = 65;
  byte_25FBD6F = 1;
  word_25FBD58 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25FBE00 = 0u;
  *(_OWORD *)&qword_25FBE10 = 0u;
  dword_25FBE20 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25FBE00, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25FBE00, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25FBE00, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25FBE00, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25FBD87 = 8;
  strcpy((char *)&qword_25FBD70, "any_mode");
  byte_25FBD9F = 7;
  strcpy((char *)&dword_25FBD88, "cycling");
  byte_25FBDB7 = 7;
  strcpy((char *)&dword_25FBDA0, "driving");
  byte_25FBDCF = 7;
  strcpy((char *)&dword_25FBDB8, "walking");
  qword_25FBDD8 = 0;
  qword_25FBDE0 = 0;
  qword_25FBDD0 = 0;
  v0 = operator new(9uLL);
  *(void *)v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25FBDD0 = (uint64_t)v0;
  qword_25FBDD8 = (uint64_t)(v0 + 9);
  qword_25FBDE0 = (uint64_t)(v0 + 9);
  qword_25FBDE8 = 0;
  qword_25FBDF0 = 0;
  unk_25FBDF8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25FBDF0 = (uint64_t)(v1 + 9);
  unk_25FBDF8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25FBDE8 = (uint64_t)v1;
  return result;
}

void sub_E62E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25FBE10) {
    sub_20B0E4C((void **)qword_25FBE10);
  }
  uint64_t v37 = (void *)xmmword_25FBE00;
  *(void *)&xmmword_25FBE00 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_E62EC8(uint64_t a1, uint64_t a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v4 = (size_t)a3[1];
  }
  size_t v5 = qword_25FBE30;
  if (byte_25FBE3F >= 0) {
    size_t v5 = byte_25FBE3F;
  }
  if (v5 > v4)
  {
    char v6 = 0;
    return v6 & 1;
  }
  if (byte_25FBE3F >= 0) {
    size_t v9 = &qword_25FBE28;
  }
  else {
    size_t v9 = (uint64_t *)qword_25FBE28;
  }
  if (v3 >= 0) {
    char v10 = a3;
  }
  else {
    char v10 = *a3;
  }
  uint64_t v11 = memcmp(v9, v10, v5);
  if (!v11)
  {
    uint64_t v12 = *(void *)(a2 + 296);
    uint64_t v13 = v12 ? v12 + 8 : 0;
    uint64_t v14 = *(int *)(a2 + 288);
    if (v14)
    {
      char v6 = 0;
      uint64_t v15 = 8 * v14;
      do
      {
        uint64_t v16 = *(void *)v13;
        int v17 = *(_DWORD *)(*(void *)v13 + 40);
        if ((v17 & 2) != 0)
        {
          uint64_t v18 = *(void *)(v16 + 56);
          *(_DWORD *)(v16 + 40) = v17 | 2;
          uint64_t v11 = sub_E62FC8(v11, v18);
          v6 |= v11;
        }
        v13 += 8;
        v15 -= 8;
      }
      while (v15);
      return v6 & 1;
    }
  }
  return 0;
}

uint64_t sub_E62FC8(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 48);
  unint64_t v4 = *(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    if (!*(void *)(v4 + 8)) {
      return 0;
    }
  }
  else if (!*(unsigned char *)(v4 + 23))
  {
    return 0;
  }
  unint64_t v5 = sub_40CC((uint64_t *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL));
  unint64_t v6 = v5;
  if ((*(char *)(v4 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned __int8 *)(v4 + 23) == v5) {
      goto LABEL_7;
    }
LABEL_12:
    if (v5 >= 4)
    {
      sub_1881FE4(v3);
      *(_DWORD *)(a2 + 40) &= ~1u;
      return 1;
    }
    return 0;
  }
  if (*(void *)(v4 + 8) != v5) {
    goto LABEL_12;
  }
LABEL_7:
  if (v5 < 6) {
    return 0;
  }
  *(_DWORD *)(a2 + 40) |= 1u;
  uint64_t v7 = *(void *)(a2 + 8);
  int v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
  if (v7) {
    int v8 = (uint64_t *)*v8;
  }
  size_t v9 = (std::string *)sub_1880F84(v3, v8);
  std::string::erase(v9, 5uLL, v6 - 5);
  return 1;
}

void sub_E630C8()
{
  byte_25FBE3F = 3;
  LODWORD(qword_25FBE28) = 3157561;
}

void sub_E630E8(uint64_t a1, int *a2)
{
  uint64_t v3 = sub_1883FB0((void *)(a1 + 16), dword_254E9B0, 11, (uint64_t)&off_252C740, 0);
  *(_DWORD *)(v3 + 16) |= 8u;
  uint64_t v4 = *(void *)(v3 + 72);
  if (v4)
  {
    uint64_t v5 = *a2;
    if (v5 == 0x7FFFFFFF) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v9 = v3;
    uint64_t v10 = *(void *)(v3 + 8);
    uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
    if (v10) {
      uint64_t v11 = (void *)*v11;
    }
    sub_11BEE5C((uint64_t)v11);
    uint64_t v4 = v12;
    *(void *)(v9 + 72) = v12;
    uint64_t v5 = *a2;
    if (v5 == 0x7FFFFFFF)
    {
LABEL_3:
      uint64_t v6 = *((unsigned __int8 *)a2 + 31);
      if ((v6 & 0x80u) != 0) {
        uint64_t v6 = *((void *)a2 + 2);
      }
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  *(_DWORD *)(v4 + 16) |= 0x10u;
  *(void *)(v4 + 216) = v5;
  uint64_t v13 = *((unsigned __int8 *)a2 + 31);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *((void *)a2 + 2);
  }
  if (!v13)
  {
LABEL_6:
    uint64_t v7 = (unsigned __int8 *)*((void *)a2 + 4);
    int v8 = (unsigned __int8 *)*((void *)a2 + 5);
    if (v7 == v8) {
      return;
    }
    goto LABEL_19;
  }
LABEL_14:
  uint64_t v14 = (long long *)(a2 + 2);
  *(_DWORD *)(v4 + 16) |= 1u;
  uint64_t v15 = (std::string **)(v4 + 184);
  uint64_t v16 = *(void *)(v4 + 8);
  int v17 = (uint64_t **)(v16 & 0xFFFFFFFFFFFFFFFCLL);
  if (v16)
  {
    sub_1881DF4(v15, v14, *v17);
    uint64_t v7 = (unsigned __int8 *)*((void *)a2 + 4);
    int v8 = (unsigned __int8 *)*((void *)a2 + 5);
    if (v7 == v8) {
      return;
    }
  }
  else
  {
    sub_1881DF4(v15, v14, (uint64_t *)v17);
    uint64_t v7 = (unsigned __int8 *)*((void *)a2 + 4);
    int v8 = (unsigned __int8 *)*((void *)a2 + 5);
    if (v7 == v8) {
      return;
    }
  }
  do
  {
LABEL_19:
    int v22 = *v7;
    int v23 = v7[1];
    uint64_t v24 = *(_DWORD **)(v4 + 176);
    if (v24 && (uint64_t v25 = *(int *)(v4 + 168), (int)v25 < *v24))
    {
      *(_DWORD *)(v4 + 168) = v25 + 1;
      uint64_t v19 = *(void *)&v24[2 * v25 + 2];
    }
    else
    {
      uint64_t v18 = sub_11BECE0(*(void *)(v4 + 160));
      uint64_t v19 = sub_188CDC8(v4 + 160, v18);
    }
    int v20 = *(_DWORD *)(v19 + 16);
    *(unsigned char *)(v19 + 24) = (v22 | v23) != 0;
    unsigned __int8 v21 = v7[2];
    *(_DWORD *)(v19 + 16) = v20 | 3;
    *(unsigned char *)(v19 + 25) = v21;
    v7 += 3;
  }
  while (v7 != v8);
}

void sub_E632A8()
{
  unk_25FBE57 = 16641;
  word_25FBE40 = 65;
  byte_25FBE6F = 1;
  byte_25FBE59 = 0;
}

uint64_t sub_E632D0(uint64_t a1, void *a2)
{
  *(void *)a1 = a2;
  sub_E22548((void *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = 65792;
  *(unsigned char *)(a1 + 52) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_WORD *)(a1 + 88) = 256;
  *(_DWORD *)(a1 + 92) = 0;
  *(unsigned char *)(a1 + 96) = 1;
  *(_OWORD *)(a1 + 100) = xmmword_20F0E00;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 144) = 11;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = 0;
  uint64_t v3 = operator new(8uLL);
  *(void *)(a1 + 152) = v3;
  *v3++ = 0x200000001;
  *(void *)(a1 + 160) = v3;
  *(void *)(a1 + 168) = v3;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  nullsub_1(a1 + 224);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(void *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  return a1;
}

void sub_E633BC(_Unwind_Exception *a1)
{
  sub_CF1EE4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_E633D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v8 = *(unsigned char *)(a3 + 4);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)a3;
  *(unsigned char *)(a1 + 52) = v8;
  if (a1 + 48 == a3)
  {
    long long v10 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a1 + 96) = v10;
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a3 + 64);
  }
  else
  {
    sub_147D0((void *)(a1 + 56), *(char **)(a3 + 8), *(char **)(a3 + 16), (uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2);
    long long v9 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a1 + 96) = v9;
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a3 + 64);
    sub_326C0((void *)(a1 + 120), *(char **)(a3 + 72), *(char **)(a3 + 80), (uint64_t)(*(void *)(a3 + 80) - *(void *)(a3 + 72)) >> 3);
    *(_DWORD *)(a1 + 144) = *(_DWORD *)(a3 + 96);
    sub_147D0((void *)(a1 + 152), *(char **)(a3 + 104), *(char **)(a3 + 112), (uint64_t)(*(void *)(a3 + 112) - *(void *)(a3 + 104)) >> 2);
  }
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)(a3 + 128));
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a3 + 152);
  uint64_t v11 = *(void *)(a3 + 160);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a3 + 168);
  *(void *)(a1 + 208) = v11;
  sub_162C594(a4, 0, 0);
  uint64_t v12 = (uint64_t *)sub_374CE4(*(void **)a1);
  char v13 = sub_2ABCBC(*v12);
  *(_DWORD *)(a4 + 40) |= 0x2000000u;
  *(unsigned char *)(a4 + 550) = v13;
  uint64_t v15 = *(void *)a2;
  uint64_t v16 = *(void *)(a2 + 8);
  if (*(void *)a2 != v16)
  {
    do
    {
      int v17 = *(_DWORD **)(a4 + 368);
      if (v17 && (uint64_t v18 = *(int *)(a4 + 360), (int)v18 < *v17))
      {
        *(_DWORD *)(a4 + 360) = v18 + 1;
        uint64_t v19 = *(void *)&v17[2 * v18 + 2];
        *(_DWORD *)(a4 + 40) |= 0x80000u;
        uint64_t v20 = *(void *)(a4 + 528);
        if (!v20) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v21 = sub_134E188(*(void *)(a4 + 352));
        uint64_t v19 = sub_188CDC8(a4 + 352, v21);
        *(_DWORD *)(a4 + 40) |= 0x80000u;
        uint64_t v20 = *(void *)(a4 + 528);
        if (!v20)
        {
LABEL_10:
          uint64_t v22 = *(void *)(a4 + 8);
          int v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
          if (v22) {
            int v23 = (void *)*v23;
          }
          uint64_t v20 = sub_134EC50((uint64_t)v23);
          *(void *)(a4 + 528) = v20;
        }
      }
      sub_E63AB8(a1, v15, v19, v20, v14);
      v15 += 3120;
    }
    while (v15 != v16);
  }
  sub_E63FBC(a1, (uint64_t *)(a2 + 472), a4);
  *(_DWORD *)(a4 + 40) |= 0x80000u;
  uint64_t v25 = *(void *)(a4 + 528);
  if (!v25)
  {
    uint64_t v26 = *(void *)(a4 + 8);
    unint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if (v26) {
      unint64_t v27 = (void *)*v27;
    }
    uint64_t v25 = sub_134EC50((uint64_t)v27);
    *(void *)(a4 + 528) = v25;
  }
  sub_E645DC(a1, (uint64_t *)(a2 + 24), v25, v24);
  if (*(_DWORD *)(a2 + 496))
  {
    v64.n128_u64[0] = *(unsigned int *)(a2 + 496);
    v64.n128_u64[1] = (unint64_t)&off_2439090;
    sub_3E7814(&v65, &v64);
    sub_DF90F0();
    uint64_t v28 = (void **)__p;
    if (__p)
    {
      unint64_t v29 = v67;
      uint8x8_t v30 = __p;
      if (v67 != __p)
      {
        do
        {
          if (*((char *)v29 - 1) < 0) {
            operator delete(*(v29 - 3));
          }
          v29 -= 4;
        }
        while (v29 != v28);
        uint8x8_t v30 = __p;
      }
      uint64_t v67 = v28;
      operator delete(v30);
      if (*(void *)(a2 + 376) == *(void *)(a2 + 384)) {
        goto LABEL_44;
      }
      goto LABEL_30;
    }
  }
  else
  {
    *(_DWORD *)(a4 + 40) |= 0x100000u;
    *(_DWORD *)(a4 + 536) = 0;
  }
  if (*(void *)(a2 + 376) == *(void *)(a2 + 384)) {
    goto LABEL_44;
  }
LABEL_30:
  uint64_t v31 = *(unsigned __int8 *)(a2 + 375);
  if ((v31 & 0x80u) != 0) {
    uint64_t v31 = *(void *)(a2 + 360);
  }
  if (v31)
  {
    *(_DWORD *)(a4 + 40) |= 0x80u;
    uint64_t v32 = *(void *)(a4 + 432);
    if (!v32)
    {
      uint64_t v33 = *(void *)(a4 + 8);
      int v34 = (void *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
      if (v33) {
        int v34 = (void *)*v34;
      }
      uint64_t v32 = sub_1332450((uint64_t)v34);
      *(void *)(a4 + 432) = v32;
    }
    *(_DWORD *)(v32 + 40) |= 1u;
    uint64_t v35 = *(void *)(v32 + 8);
    unint64_t v36 = (uint64_t *)(v35 & 0xFFFFFFFFFFFFFFFCLL);
    if (v35) {
      unint64_t v36 = (uint64_t *)*v36;
    }
    sub_1881DF4((std::string **)(v32 + 64), (long long *)(a2 + 352), v36);
    uint64_t v37 = *(int **)(a2 + 376);
    unint64_t v38 = *(int **)(a2 + 384);
    if (v37 != v38)
    {
      uint64_t v39 = (unsigned int *)(v32 + 48);
      unsigned int v40 = *(_DWORD *)(v32 + 48);
      do
      {
        while (1)
        {
          int v41 = *v37;
          if (v40 == *(_DWORD *)(v32 + 52)) {
            break;
          }
          *(_DWORD *)(*(void *)(v32 + 56) + 4 * v40++) = v41;
          *uint64_t v39 = v40;
          v37 += 2;
          if (v37 == v38) {
            goto LABEL_44;
          }
        }
        sub_188C80C((unsigned int *)(v32 + 48), v40 + 1);
        *(_DWORD *)(*(void *)(v32 + 56) + 4 * v40++) = v41;
        *uint64_t v39 = v40;
        v37 += 2;
      }
      while (v37 != v38);
    }
  }
LABEL_44:
  *(_DWORD *)(a4 + 40) |= 0x40000u;
  uint64_t v42 = *(void *)(a4 + 520);
  if (v42)
  {
    int v43 = *(_DWORD *)(a2 + 288);
    if (v43 == 0x7FFFFFFF) {
      goto LABEL_52;
    }
    goto LABEL_50;
  }
  uint64_t v44 = *(void *)(a4 + 8);
  long long v45 = (void *)(v44 & 0xFFFFFFFFFFFFFFFCLL);
  if (v44) {
    long long v45 = (void *)*v45;
  }
  uint64_t v42 = sub_13D8EE0((uint64_t)v45);
  *(void *)(a4 + 520) = v42;
  int v43 = *(_DWORD *)(a2 + 288);
  if (v43 != 0x7FFFFFFF)
  {
LABEL_50:
    double v46 = (double)v43 + -978307200.0;
    int v47 = *(_DWORD *)(v42 + 16);
    *(_DWORD *)(v42 + 16) = v47 | 1;
    *(double *)(v42 + 24) = v46;
    unsigned int v48 = *(_DWORD *)(a2 + 296);
    if (v48 <= 1)
    {
      *(_DWORD *)(v42 + 16) = v47 | 5;
      *(_DWORD *)(v42 + 40) = v48;
    }
  }
LABEL_52:
  uint64_t v49 = sub_1883FB0((void *)(a4 + 16), dword_254E9B0, 11, (uint64_t)&off_252C740, 0);
  *(_DWORD *)(v49 + 16) |= 1u;
  size_t v50 = (std::string **)(v49 + 48);
  uint64_t v51 = *(void *)(v49 + 8);
  unint64_t v52 = (uint64_t *)(v51 & 0xFFFFFFFFFFFFFFFCLL);
  if (v51) {
    unint64_t v52 = (uint64_t *)*v52;
  }
  sub_1881DF4(v50, (long long *)(a2 + 304), v52);
  *(_DWORD *)(a4 + 40) |= 0x40u;
  uint64_t v53 = *(void *)(a4 + 8);
  uint64_t v54 = (uint64_t *)(v53 & 0xFFFFFFFFFFFFFFFCLL);
  if (v53) {
    uint64_t v54 = (uint64_t *)*v54;
  }
  uint64_t v55 = (uint64_t)sub_1881DF4((std::string **)(a4 + 424), (long long *)(a2 + 328), v54);
  *(_DWORD *)(a4 + 40) |= 0x1000000u;
  *(unsigned char *)(a4 + 549) = 1;
  uint64_t v56 = *(void *)(a2 + 8);
  uint64_t v57 = *(void *)a2;
  if (*(void *)a2 != v56)
  {
    while (!*(unsigned char *)(v57 + 1128))
    {
      v57 += 3120;
      if (v57 == v56) {
        goto LABEL_62;
      }
    }
  }
  if (v57 != v56)
  {
    uint64_t v55 = sub_2E2964(0xAFEAFEAFEAFEAFEBLL * ((v57 - *(void *)a2) >> 4));
    *(_DWORD *)(a4 + 40) |= 0x400000u;
    *(_DWORD *)(a4 + 544) = v55;
  }
LABEL_62:
  sub_E649C8(v55, (unsigned __int8 **)(a2 + 400), a4);
  sub_51C5C((uint64_t)&v64);
  sub_51D74((uint64_t)&v64, (uint64_t)&v65);
  *(_DWORD *)(a4 + 40) |= 1u;
  uint64_t v58 = *(void *)(a4 + 8);
  uint64_t v59 = (uint64_t *)(v58 & 0xFFFFFFFFFFFFFFFCLL);
  if (v58) {
    uint64_t v59 = (uint64_t *)*v59;
  }
  sub_1881E08((uint64_t *)(a4 + 376), (long long *)&v65, v59);
  if (SHIBYTE(__p) < 0)
  {
    operator delete((void *)v65.n128_u64[0]);
    *(_DWORD *)(a4 + 40) |= 0x2000u;
    uint64_t v60 = *(void **)(a4 + 480);
    if (v60) {
      return sub_E6B1B4((uint64_t *)(a2 + 464), (uint64_t)v60);
    }
  }
  else
  {
    *(_DWORD *)(a4 + 40) |= 0x2000u;
    uint64_t v60 = *(void **)(a4 + 480);
    if (v60) {
      return sub_E6B1B4((uint64_t *)(a2 + 464), (uint64_t)v60);
    }
  }
  uint64_t v61 = *(void *)(a4 + 8);
  int v62 = (void *)(v61 & 0xFFFFFFFFFFFFFFFCLL);
  if (v61) {
    int v62 = (void *)*v62;
  }
  uint64_t v60 = sub_134ECAC((uint64_t)v62);
  *(void *)(a4 + 480) = v60;
  return sub_E6B1B4((uint64_t *)(a2 + 464), (uint64_t)v60);
}

void sub_E639D8(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E639EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_C7E3C8((uint64_t)va);
  sub_162D64C(v5);
  _Unwind_Resume(a1);
}

void sub_E63A08(_Unwind_Exception *a1)
{
  sub_162D64C(v1);
  _Unwind_Resume(a1);
}

void sub_E63A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    sub_162D64C(v18);
    _Unwind_Resume(a1);
  }
  sub_162D64C(v18);
  _Unwind_Resume(a1);
}

void sub_E63AB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v7 = *(uint64_t **)a2;
  uint64_t v60 = *(uint64_t **)(a2 + 8);
  if (*(uint64_t **)a2 != v60)
  {
    uint64_t v59 = (uint64_t *)(a3 + 112);
    do
    {
      char v8 = *(_DWORD **)(a3 + 128);
      if (v8 && (uint64_t v9 = *(int *)(a3 + 120), (int)v9 < *v8))
      {
        *(_DWORD *)(a3 + 120) = v9 + 1;
        uint64_t v10 = *(void *)&v8[2 * v9 + 2];
        uint64_t v12 = *v7;
        uint64_t v11 = v7[1];
        uint64_t v61 = v7;
        if (*v7 != v11) {
          goto LABEL_10;
        }
      }
      else
      {
        char v13 = sub_134E058(*v59);
        uint64_t v10 = sub_188CDC8((uint64_t)v59, (uint64_t)v13);
        uint64_t v12 = *v7;
        uint64_t v11 = v7[1];
        uint64_t v61 = v7;
        if (*v7 != v11)
        {
LABEL_10:
          if (v11 - v12 == 104)
          {
            int v14 = 0;
          }
          else
          {
            unint64_t v15 = 0;
            while (*(_DWORD *)(v12 + v15))
            {
              v15 += 104;
              if (v12 + v15 == v11)
              {
                unint64_t v15 = v11 - v12;
                break;
              }
            }
            int v14 = -991146299 * (v15 >> 3);
          }
          *(_DWORD *)(v10 + 40) |= 1u;
          *(_DWORD *)(v10 + 68) = v14;
          uint64_t v16 = (_DWORD *)(v10 + 48);
          do
          {
            while (1)
            {
              int v17 = *(_DWORD **)(a3 + 152);
              if (v17 && (uint64_t v18 = *(int *)(a3 + 144), (int)v18 < *v17))
              {
                *(_DWORD *)(a3 + 144) = v18 + 1;
                uint64_t v19 = *(void *)&v17[2 * v18 + 2];
              }
              else
              {
                uint64_t v20 = sub_134E0B4(*(void *)(a3 + 136));
                uint64_t v19 = sub_188CDC8(a3 + 136, v20);
              }
              sub_E64C68((std::string *)a1, v12, a2, v19, a4, a5);
              int v21 = *(_DWORD *)(a3 + 144) - 1;
              uint64_t v22 = *(unsigned int *)(v10 + 48);
              if (v22 == *(_DWORD *)(v10 + 52)) {
                break;
              }
              *(_DWORD *)(*(void *)(v10 + 56) + 4 * v22) = v21;
              *uint64_t v16 = v22 + 1;
              v12 += 104;
              if (v12 == v11) {
                goto LABEL_4;
              }
            }
            sub_188C80C((unsigned int *)(v10 + 48), v22 + 1);
            *(_DWORD *)(*(void *)(v10 + 56) + 4 * v22) = v21;
            *uint64_t v16 = v22 + 1;
            v12 += 104;
          }
          while (v12 != v11);
          goto LABEL_4;
        }
      }
      *(_DWORD *)(v10 + 40) |= 1u;
      *(_DWORD *)(v10 + 68) = -1;
LABEL_4:
      uint64_t v7 = v61 + 4;
    }
    while (v61 + 4 != v60);
  }
  int v23 = *(_DWORD *)(a2 + 1208);
  uint64_t v24 = 28;
  if (*(_DWORD *)(a2 + 28) == 0x7FFFFFFF) {
    uint64_t v24 = 24;
  }
  if (v23 != 2) {
    uint64_t v24 = 24;
  }
  int v25 = *(_DWORD *)(a2 + v24) - 978307200;
  int v26 = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a3 + 40) = v26 | 0x20;
  *(_DWORD *)(a3 + 200) = v25;
  uint64_t v27 = 40;
  if (*(_DWORD *)(a2 + 40) == 0x7FFFFFFF) {
    uint64_t v27 = 36;
  }
  if (v23 == 2) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 36;
  }
  int v29 = *(_DWORD *)(a2 + v28) - 978307200;
  *(_DWORD *)(a3 + 40) = v26 | 0x60;
  *(_DWORD *)(a3 + 204) = v29;
  *(_DWORD *)(a3 + 208) = *(_DWORD *)(a2 + 1016);
  *(_DWORD *)(a3 + 40) = v26 | 0xE8;
  uint8x8_t v30 = *(void **)(a3 + 184);
  if (!v30)
  {
    uint64_t v31 = *(void *)(a3 + 8);
    uint64_t v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
    if (v31) {
      uint64_t v32 = (void *)*v32;
    }
    uint8x8_t v30 = sub_134E110((uint64_t)v32);
    *(void *)(a3 + 184) = v30;
  }
  uint64_t v33 = *(void *)(a2 + 1224);
  *((_DWORD *)v30 + 4) |= 1u;
  v30[3] = v33;
  if (*(unsigned char *)(a2 + 1024))
  {
    unsigned int v34 = *(_DWORD *)(a2 + 1020);
    if (v34 < 4) {
      unsigned int v35 = v34 + 1;
    }
    else {
      unsigned int v35 = 0;
    }
    uint64_t v36 = *(unsigned int *)(a3 + 96);
    if (v36 == *(_DWORD *)(a3 + 100))
    {
      int v37 = v36 + 1;
      sub_188C80C((unsigned int *)(a3 + 96), v36 + 1);
      *(_DWORD *)(*(void *)(a3 + 104) + 4 * v36) = v35;
    }
    else
    {
      *(_DWORD *)(*(void *)(a3 + 104) + 4 * v36) = v35;
      int v37 = v36 + 1;
    }
    *(_DWORD *)(a3 + 96) = v37;
  }
  sub_E64EFC((uint64_t)v30, (uint64_t *)(a2 + 1032), a3);
  *(_DWORD *)(a3 + 40) |= 4u;
  uint64_t v38 = *(void *)(a3 + 176);
  if (!v38)
  {
    uint64_t v39 = *(void *)(a3 + 8);
    unsigned int v40 = (void *)(v39 & 0xFFFFFFFFFFFFFFFCLL);
    if (v39) {
      unsigned int v40 = (void *)*v40;
    }
    uint64_t v38 = sub_134DDF0((uint64_t)v40);
    *(void *)(a3 + 176) = v38;
  }
  sub_E6A030((const std::string **)(a2 + 56), v38);
  sub_E6A2AC(a2 + 1232, v38);
  if (*(_DWORD *)(a1 + 100) > 1u)
  {
    sub_E68F08(a2 + 1232, a3);
    goto LABEL_57;
  }
  uint64_t v41 = *(void *)(a2 + 2296);
  uint64_t v42 = *(void *)(a2 + 2304);
  if (v41 == v42) {
    goto LABEL_57;
  }
  while (*(_DWORD *)(v41 + 488) != 2)
  {
    v41 += 496;
    if (v41 == v42) {
      goto LABEL_57;
    }
  }
  *(_DWORD *)(a3 + 40) |= 2u;
  uint64_t v47 = *(void *)(a3 + 168);
  if (!v47)
  {
    uint64_t v48 = *(void *)(a3 + 8);
    uint64_t v49 = (void *)(v48 & 0xFFFFFFFFFFFFFFFCLL);
    if (v48) {
      uint64_t v49 = (void *)*v49;
    }
    uint64_t v47 = sub_1332450((uint64_t)v49);
    *(void *)(a3 + 168) = v47;
  }
  size_t v50 = *(long long **)v41;
  *(_DWORD *)(v47 + 40) |= 1u;
  uint64_t v51 = (std::string **)(v47 + 64);
  uint64_t v52 = *(void *)(v47 + 8);
  uint64_t v53 = (uint64_t **)(v52 & 0xFFFFFFFFFFFFFFFCLL);
  if (v52)
  {
    sub_1881DF4(v51, v50, *v53);
    uint64_t v55 = *(int **)(v41 + 168);
    uint64_t v54 = *(int **)(v41 + 176);
    if (v55 == v54) {
      goto LABEL_57;
    }
  }
  else
  {
    sub_1881DF4(v51, v50, (uint64_t *)v53);
    uint64_t v55 = *(int **)(v41 + 168);
    uint64_t v54 = *(int **)(v41 + 176);
    if (v55 == v54) {
      goto LABEL_57;
    }
  }
  uint64_t v56 = (unsigned int *)(v47 + 48);
  unsigned int v57 = *(_DWORD *)(v47 + 48);
  do
  {
    while (1)
    {
      int v58 = *v55;
      if (v57 == *(_DWORD *)(v47 + 52)) {
        break;
      }
      *(_DWORD *)(*(void *)(v47 + 56) + 4 * v57++) = v58;
      *uint64_t v56 = v57;
      v55 += 200;
      if (v55 == v54) {
        goto LABEL_57;
      }
    }
    sub_188C80C((unsigned int *)(v47 + 48), v57 + 1);
    *(_DWORD *)(*(void *)(v47 + 56) + 4 * v57++) = v58;
    *uint64_t v56 = v57;
    v55 += 200;
  }
  while (v55 != v54);
LABEL_57:
  uint64_t v43 = *(unsigned __int8 *)(a2 + 1127);
  if ((v43 & 0x80u) != 0) {
    uint64_t v43 = *(void *)(a2 + 1112);
  }
  if (v43)
  {
    *(_DWORD *)(a3 + 40) |= 1u;
    uint64_t v44 = *(void *)(a3 + 8);
    long long v45 = (uint64_t *)(v44 & 0xFFFFFFFFFFFFFFFCLL);
    if (v44) {
      long long v45 = (uint64_t *)*v45;
    }
    sub_1881DF4((std::string **)(a3 + 160), (long long *)(a2 + 1104), v45);
  }
  char v46 = *(unsigned char *)(a2 + 1200);
  *(_DWORD *)(a3 + 40) |= 0x400u;
  *(unsigned char *)(a3 + 220) = v46;
}

void sub_E63FBC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v55 = a2[1];
  if (*a2 != v55)
  {
    uint64_t v5 = (void *)(a1 + 296);
    uint64_t v6 = a1 + 112;
    int v58 = (void **)(a1 + 336);
    uint64_t v56 = (uint64_t *)(a3 + 304);
    do
    {
      char v8 = *(unint64_t **)v3;
      uint64_t v7 = *(unint64_t **)(v3 + 8);
      uint64_t v57 = v3;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      uint64_t v9 = (char *)v7 - (char *)v8;
      if (v7 == v8) {
        goto LABEL_66;
      }
      if (v9 < 0) {
        sub_2E00();
      }
      uint64_t v10 = (char *)operator new((char *)v7 - (char *)v8);
      uint64_t v59 = v10;
      uint64_t v60 = v10;
      uint64_t v61 = &v10[8 * (v9 >> 3)];
      do
      {
        unint64_t v11 = *v8;
        unint64_t v62 = *v8;
        int8x8_t v12 = *(int8x8_t *)(a1 + 304);
        if (!*(void *)&v12) {
          goto LABEL_33;
        }
        unint64_t v13 = __ROR8__(v11, 32);
        unint64_t v14 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v13 ^ (v13 >> 33))) >> 33));
        unint64_t v15 = v14 ^ (v14 >> 33);
        uint8x8_t v16 = (uint8x8_t)vcnt_s8(v12);
        v16.i16[0] = vaddlv_u8(v16);
        if (v16.u32[0] > 1uLL)
        {
          unint64_t v17 = v15;
          if (v15 >= *(void *)&v12) {
            unint64_t v17 = v15 % *(void *)&v12;
          }
        }
        else
        {
          unint64_t v17 = v15 & (*(void *)&v12 - 1);
        }
        uint64_t v18 = *(uint64_t ***)(*v5 + 8 * v17);
        if (!v18 || (uint64_t v19 = *v18) == 0)
        {
LABEL_33:
          unint64_t v70 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 344) - *(void *)(a1 + 336)) >> 3);
          uint64_t v25 = sub_3757C8(*(void **)a1);
          sub_4A0180(v11, v25, v6, (uint64_t)&v63);
          uint64_t v27 = *(void ***)(a1 + 344);
          unint64_t v26 = *(void *)(a1 + 352);
          if ((unint64_t)v27 < v26)
          {
            *uint64_t v27 = (void *)v63;
            long long v28 = __p;
            v27[3] = v65;
            *(_OWORD *)(v27 + 1) = v28;
            __n128 v65 = 0;
            long long __p = 0uLL;
            *((unsigned char *)v27 + 32) = v66;
            long long v29 = v67;
            v27[7] = v68;
            *(_OWORD *)(v27 + 5) = v29;
            uint64_t v68 = 0;
            long long v67 = 0uLL;
            *((unsigned char *)v27 + 64) = v69;
            *(void *)(a1 + 344) = v27 + 9;
            if (SHIBYTE(v65) < 0) {
              goto LABEL_59;
            }
            goto LABEL_60;
          }
          uint8x8_t v30 = v5;
          uint64_t v31 = v6;
          uint64_t v32 = (char *)*v58;
          unint64_t v33 = 0x8E38E38E38E38E39 * (((char *)v27 - (unsigned char *)*v58) >> 3);
          unint64_t v34 = v33 + 1;
          if (v33 + 1 > 0x38E38E38E38E38ELL) {
            sub_2E00();
          }
          unint64_t v35 = 0x8E38E38E38E38E39 * ((uint64_t)(v26 - (void)v32) >> 3);
          if (2 * v35 > v34) {
            unint64_t v34 = 2 * v35;
          }
          if (v35 >= 0x1C71C71C71C71C7) {
            unint64_t v36 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36 > 0x38E38E38E38E38ELL) {
            sub_188D718();
          }
          int v37 = (char *)operator new(72 * v36);
          uint64_t v38 = &v37[72 * v33];
          *(void *)uint64_t v38 = v63;
          *(_OWORD *)(v38 + 8) = __p;
          uint64_t v39 = &v37[72 * v36];
          *((void *)v38 + 3) = v65;
          long long __p = 0uLL;
          __n128 v65 = 0;
          v38[32] = v66;
          *(_OWORD *)(v38 + 40) = v67;
          *((void *)v38 + 7) = v68;
          *((void *)&v67 + 1) = 0;
          uint64_t v68 = 0;
          v38[64] = v69;
          unsigned int v40 = v38 + 72;
          *(void *)&long long v67 = 0;
          if (v27 == (void **)v32)
          {
            *(void *)(a1 + 336) = v38;
            *(void *)(a1 + 344) = v40;
            *(void *)(a1 + 352) = v39;
LABEL_55:
            if (v27) {
              operator delete(v27);
            }
            int v47 = SHIBYTE(v68);
            *(void *)(a1 + 344) = v40;
            uint64_t v6 = v31;
            uint64_t v5 = v30;
            if (v47 < 0)
            {
              operator delete((void *)v67);
              if (SHIBYTE(v65) < 0) {
LABEL_59:
              }
                operator delete((void *)__p);
            }
            else if (SHIBYTE(v65) < 0)
            {
              goto LABEL_59;
            }
LABEL_60:
            sub_E62384((uint64_t)v5, &v62, &v62, (uint64_t *)&v70);
            unint64_t v48 = v70;
            goto LABEL_61;
          }
          uint64_t v41 = 0;
          do
          {
            uint64_t v42 = &v38[v41 * 8];
            uint64_t v43 = (char *)&v27[v41];
            *((void *)v42 - 9) = v27[v41 - 9];
            long long v44 = *(_OWORD *)&v27[v41 - 8];
            *((void *)v42 - 6) = v27[v41 - 6];
            *((_OWORD *)v42 - 4) = v44;
            *((void *)v43 - 7) = 0;
            *((void *)v43 - 6) = 0;
            *((void *)v43 - 8) = 0;
            *(v42 - 40) = (char)v27[v41 - 5];
            long long v45 = *(_OWORD *)&v27[v41 - 4];
            *((void *)v42 - 2) = v27[v41 - 2];
            *((_OWORD *)v42 - 2) = v45;
            *((void *)v43 - 3) = 0;
            *((void *)v43 - 2) = 0;
            *((void *)v43 - 4) = 0;
            *(v42 - 8) = (char)v27[v41 - 1];
            v41 -= 9;
          }
          while (&v27[v41] != (void **)v32);
          uint64_t v27 = *(void ***)(a1 + 336);
          char v46 = *(void ***)(a1 + 344);
          *(void *)(a1 + 336) = &v38[v41 * 8];
          *(void *)(a1 + 344) = v40;
          *(void *)(a1 + 352) = v39;
          while (2)
          {
            if (v46 == v27) {
              goto LABEL_55;
            }
            if (*((char *)v46 - 9) < 0)
            {
              operator delete(*(v46 - 4));
              if (*((char *)v46 - 41) < 0) {
                goto LABEL_53;
              }
            }
            else if (*((char *)v46 - 41) < 0)
            {
LABEL_53:
              operator delete(*(v46 - 8));
            }
            v46 -= 9;
            continue;
          }
        }
        if (v16.u32[0] < 2uLL)
        {
          uint64_t v20 = *(void *)&v12 - 1;
          while (1)
          {
            uint64_t v24 = v19[1];
            if (v24 == v15)
            {
              if (*((_DWORD *)v19 + 4) == v11 && *((_DWORD *)v19 + 5) == HIDWORD(v11)) {
                goto LABEL_65;
              }
            }
            else if ((v24 & v20) != v17)
            {
              goto LABEL_33;
            }
            uint64_t v19 = (uint64_t *)*v19;
            if (!v19) {
              goto LABEL_33;
            }
          }
        }
        while (1)
        {
          unint64_t v22 = v19[1];
          if (v22 == v15) {
            break;
          }
          if (v22 >= *(void *)&v12) {
            v22 %= *(void *)&v12;
          }
          if (v22 != v17) {
            goto LABEL_33;
          }
LABEL_20:
          uint64_t v19 = (uint64_t *)*v19;
          if (!v19) {
            goto LABEL_33;
          }
        }
        if (*((_DWORD *)v19 + 4) != v11 || *((_DWORD *)v19 + 5) != HIDWORD(v11)) {
          goto LABEL_20;
        }
LABEL_65:
        unint64_t v48 = v19[3];
LABEL_61:
        unint64_t v63 = v48;
        uint64_t v10 = sub_E626E8(&v59, v10, &v63) + 8;
        ++v8;
      }
      while (v8 != v7);
LABEL_66:
      uint64_t v49 = *(_DWORD **)(a3 + 320);
      if (v49 && (uint64_t v50 = *(int *)(a3 + 312), (int)v50 < *v49))
      {
        *(_DWORD *)(a3 + 312) = v50 + 1;
        uint64_t v51 = *(void *)&v49[2 * v50 + 2];
        uint64_t v52 = v57;
      }
      else
      {
        uint64_t v53 = sub_133276C(*v56);
        uint64_t v52 = v57;
        uint64_t v51 = sub_188CDC8((uint64_t)v56, (uint64_t)v53);
      }
      sub_E6BF30(v52, (int **)&v59, v51);
      if (v59)
      {
        uint64_t v60 = v59;
        operator delete(v59);
      }
      uint64_t v3 = v52 + 568;
    }
    while (v3 != v55);
  }
}

void sub_E64568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_E645DC(uint64_t a1, uint64_t *a2, uint64_t a3, uint8x8_t a4)
{
  uint64_t v6 = a1;
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      sub_E67194(v6, v7, a3);
      v7 += 168;
    }
    while (v7 != v8);
  }
  uint64_t v9 = a2[6];
  for (uint64_t i = a2[7]; v9 != i; v9 += 136)
    sub_E67324(v6, v9, a3);
  uint64_t v11 = a2[3];
  for (uint64_t j = a2[4]; v11 != j; v11 += 144)
    sub_E67478(v6, v11, a3);
  uint64_t v13 = a2[9];
  for (uint64_t k = a2[10]; v13 != k; v13 += 696)
  {
    uint64_t v18 = *(int **)(a3 + 104);
    if (v18 && (int v17 = *(_DWORD *)(a3 + 96), v17 < *v18))
    {
      *(_DWORD *)(a3 + 96) = v17 + 1;
      uint64_t v16 = *(void *)&v18[2 * v17 + 2];
    }
    else
    {
      uint64_t v15 = sub_13321CC(*(void *)(a3 + 88));
      uint64_t v16 = sub_188CDC8(a3 + 88, v15);
      int v17 = *(_DWORD *)(a3 + 96) - 1;
    }
    *(_DWORD *)(v16 + 40) |= 0x4000u;
    *(_DWORD *)(v16 + 164) = v17;
    sub_E6B1CC(v13, v16);
  }
  uint64_t v19 = a2[12];
  for (uint64_t m = a2[13]; v19 != m; v19 += 208)
  {
    uint64_t v24 = *(int **)(a3 + 224);
    if (v24 && (int v23 = *(_DWORD *)(a3 + 216), v23 < *v24))
    {
      *(_DWORD *)(a3 + 216) = v23 + 1;
      uint64_t v22 = *(void *)&v24[2 * v23 + 2];
    }
    else
    {
      uint64_t v21 = sub_13322E0(*(void *)(a3 + 208));
      uint64_t v22 = sub_188CDC8(a3 + 208, v21);
      int v23 = *(_DWORD *)(a3 + 216) - 1;
    }
    *(_DWORD *)(v22 + 40) |= 0x40u;
    *(_DWORD *)(v22 + 92) = v23;
    sub_E6B5C4(v19, v22);
  }
  uint64_t v25 = a2[15];
  for (uint64_t n = a2[16]; v25 != n; v25 += 304)
    sub_E675E8(a1, v25, a3);
  if (a2[30] != a2[31]) {
    sub_E67918();
  }
  uint64_t v27 = a2[18];
  for (iuint64_t i = a2[19]; v27 != ii; v27 += 112)
  {
    while (1)
    {
      uint64_t v32 = *(_DWORD **)(a3 + 296);
      if (v32)
      {
        uint64_t v33 = *(int *)(a3 + 288);
        if ((int)v33 < *v32) {
          break;
        }
      }
      uint64_t v29 = sub_13DAB08(*(void *)(a3 + 280));
      uint64_t v30 = sub_188CDC8(a3 + 280, v29);
      sub_523A2C(v27, v30, v31);
      v27 += 112;
      if (v27 == ii) {
        goto LABEL_31;
      }
    }
    *(_DWORD *)(a3 + 288) = v33 + 1;
    sub_523A2C(v27, *(void *)&v32[2 * v33 + 2], a4);
  }
LABEL_31:
  uint64_t v34 = a2[21];
  for (juint64_t j = a2[22]; v34 != jj; v34 += 7560)
    a1 = sub_E66064();
  uint64_t v36 = a2[24];
  for (kuint64_t k = a2[25]; v36 != kk; v36 += 456)
  {
    uint64_t v41 = *(int **)(a3 + 248);
    if (v41 && (int v40 = *(_DWORD *)(a3 + 240), v40 < *v41))
    {
      *(_DWORD *)(a3 + 240) = v40 + 1;
      uint64_t v39 = *(void *)&v41[2 * v40 + 2];
    }
    else
    {
      uint64_t v38 = sub_13324AC(*(void *)(a3 + 232));
      uint64_t v39 = sub_188CDC8(a3 + 232, v38);
      int v40 = *(_DWORD *)(a3 + 240) - 1;
    }
    *(_DWORD *)(v39 + 40) |= 0x4000u;
    *(_DWORD *)(v39 + 160) = v40;
    sub_E69384(v36, v6 + 112, *(void **)v6, v39);
  }
  uint64_t v42 = *(void *)(v6 + 272);
  for (muint64_t m = *(void *)(v6 + 280); v42 != mm; v42 += 496)
    sub_E67A20(a1, v42, a3);
  if (*(unsigned char *)(v6 + 106))
  {
    uint64_t v44 = *(void *)(v6 + 336);
    for (nuint64_t n = *(void *)(v6 + 344); v44 != nn; v44 += 72)
    {
      while (1)
      {
        unint64_t v48 = *(_DWORD **)(a3 + 368);
        if (v48)
        {
          uint64_t v49 = *(int *)(a3 + 360);
          if ((int)v49 < *v48) {
            break;
          }
        }
        char v46 = sub_133280C(*(void *)(a3 + 352));
        uint64_t v47 = sub_188CDC8(a3 + 352, (uint64_t)v46);
        sub_E6BD9C(v44, v47);
        v44 += 72;
        if (v44 == nn) {
          return;
        }
      }
      *(_DWORD *)(a3 + 360) = v49 + 1;
      sub_E6BD9C(v44, *(void *)&v48[2 * v49 + 2]);
    }
  }
}

void sub_E649C8(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  while (v5 != v6)
  {
    *(_DWORD *)(a3 + 40) |= 0x100u;
    uint64_t v8 = *(void *)(a3 + 440);
    if (!v8)
    {
      uint64_t v9 = *(void *)(a3 + 8);
      uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (v9) {
        uint64_t v10 = (void *)*v10;
      }
      uint64_t v8 = sub_16333F0((uint64_t)v10);
      *(void *)(a3 + 440) = v8;
    }
    BOOL v11 = *v5 == 1;
    uint64_t v12 = *(unsigned int *)(v8 + 48);
    if (v12 == *(_DWORD *)(v8 + 52))
    {
      int v7 = v12 + 1;
      sub_188C80C((unsigned int *)(v8 + 48), v12 + 1);
      *(_DWORD *)(*(void *)(v8 + 56) + 4 * v12) = v11;
    }
    else
    {
      *(_DWORD *)(*(void *)(v8 + 56) + 4 * v12) = v11;
      int v7 = v12 + 1;
    }
    *(_DWORD *)(v8 + 48) = v7;
    ++v5;
  }
  if (a2[3] == a2[4]) {
    goto LABEL_34;
  }
  *(_DWORD *)(a3 + 40) |= 0x100u;
  uint64_t v13 = *(void *)(a3 + 440);
  if (v13)
  {
    *(_DWORD *)(v13 + 16) |= 1u;
    uint64_t v14 = *(void *)(v13 + 64);
    if (v14) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v18 = *(void *)(a3 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    uint64_t v13 = sub_16333F0((uint64_t)v19);
    *(void *)(a3 + 440) = v13;
    *(_DWORD *)(v13 + 16) |= 1u;
    uint64_t v14 = *(void *)(v13 + 64);
    if (v14)
    {
LABEL_14:
      int v15 = *((_DWORD *)a2 + 12);
      if (v15 == 0x7FFFFFFF) {
        goto LABEL_15;
      }
      goto LABEL_23;
    }
  }
  uint64_t v20 = *(void *)(v13 + 8);
  uint64_t v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
  if (v20) {
    uint64_t v21 = (void *)*v21;
  }
  uint64_t v14 = sub_13DA124((uint64_t)v21);
  *(void *)(v13 + 64) = v14;
  int v15 = *((_DWORD *)a2 + 12);
  if (v15 == 0x7FFFFFFF)
  {
LABEL_15:
    uint64_t v16 = a2[3];
    int v17 = a2[4];
    if (v16 == v17) {
      goto LABEL_34;
    }
    goto LABEL_27;
  }
LABEL_23:
  *(_DWORD *)(v14 + 16) |= 1u;
  *(_DWORD *)(v14 + 48) = v15;
  uint64_t v16 = a2[3];
  int v17 = a2[4];
  if (v16 == v17) {
    goto LABEL_34;
  }
  do
  {
LABEL_27:
    uint64_t v24 = *(_DWORD **)(v14 + 40);
    if (v24 && (uint64_t v25 = *(int *)(v14 + 32), (int)v25 < *v24))
    {
      *(_DWORD *)(v14 + 32) = v25 + 1;
      uint64_t v26 = *(void *)&v24[2 * v25 + 2];
    }
    else
    {
      uint64_t v27 = sub_13DA0A8(*(void *)(v14 + 24));
      uint64_t v26 = sub_188CDC8(v14 + 24, v27);
    }
    int v28 = *(_DWORD *)(v26 + 16);
    *(_DWORD *)(v26 + 32) = *(_DWORD *)v16;
    *(_DWORD *)(v26 + 16) = v28 | 3;
    uint64_t v23 = *(void *)(v26 + 24);
    if (!v23)
    {
      uint64_t v29 = *(void *)(v26 + 8);
      uint64_t v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
      if (v29) {
        uint64_t v30 = (void *)*v30;
      }
      sub_13D6A1C((uint64_t)v30);
      uint64_t v23 = v22;
      *(void *)(v26 + 24) = v22;
    }
    sub_5F4D30((const std::string **)v16 + 1, v23);
    v16 += 168;
  }
  while (v16 != v17);
LABEL_34:
  int v31 = *((unsigned __int8 *)a2 + 56);
  if (v31 != byte_2541FB0)
  {
    *(_DWORD *)(a3 + 40) |= 0x100u;
    uint64_t v32 = *(void *)(a3 + 440);
    if (!v32)
    {
      uint64_t v33 = *(void *)(a3 + 8);
      uint64_t v34 = (void *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
      if (v33) {
        uint64_t v34 = (void *)*v34;
      }
      uint64_t v32 = sub_16333F0((uint64_t)v34);
      *(void *)(a3 + 440) = v32;
      LOBYTE(v31) = *((unsigned char *)a2 + 56);
    }
    *(_DWORD *)(v32 + 16) |= 2u;
    *(unsigned char *)(v32 + 72) = v31;
  }
}

void sub_E64C68(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v8 = a1;
  uint64_t v9 = *(void *)(a2 + 56);
  if (v9 != -1)
  {
    *(_DWORD *)(a4 + 40) |= 4u;
    *(_DWORD *)(a4 + 156) = v9;
  }
  uint64_t v10 = *(int32x4_t **)(a2 + 8);
  BOOL v11 = *(int32x4_t **)(a2 + 16);
  if (v10 != v11)
  {
    uint64_t v12 = (uint64_t *)(a5 + 328);
    uint64_t v13 = (_DWORD *)(a4 + 48);
    do
    {
      while (1)
      {
        uint64_t v14 = *(_DWORD **)(a5 + 344);
        if (v14 && (uint64_t v15 = *(int *)(a5 + 336), (int)v15 < *v14))
        {
          *(_DWORD *)(a5 + 336) = v15 + 1;
          uint64_t v16 = *(void *)&v14[2 * v15 + 2];
        }
        else
        {
          uint64_t v17 = sub_134EBF4(*v12);
          uint64_t v16 = sub_188CDC8(a5 + 328, v17);
        }
        sub_E651B4(v8, v10, a3, v16, a6);
        int v18 = *(_DWORD *)(a5 + 336) - 1;
        uint64_t v19 = *(unsigned int *)(a4 + 48);
        if (v19 == *(_DWORD *)(a4 + 52)) {
          break;
        }
        *(_DWORD *)(*(void *)(a4 + 56) + 4 * v19) = v18;
        *uint64_t v13 = v19 + 1;
        uint64_t v10 = (int32x4_t *)((char *)v10 + 5704);
        if (v10 == v11) {
          goto LABEL_12;
        }
      }
      sub_188C80C((unsigned int *)(a4 + 48), v19 + 1);
      *(_DWORD *)(*(void *)(a4 + 56) + 4 * v19) = v18;
      *uint64_t v13 = v19 + 1;
      uint64_t v10 = (int32x4_t *)((char *)v10 + 5704);
    }
    while (v10 != v11);
  }
LABEL_12:
  uint64_t v20 = *(unsigned __int8 *)(a2 + 55);
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = *(void *)(a2 + 40);
  }
  if (v20)
  {
    *(_DWORD *)(a4 + 40) |= 1u;
    uint64_t v21 = *(void *)(a4 + 8);
    uint64_t v22 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
    if (v21) {
      uint64_t v22 = (uint64_t *)*v22;
    }
    a1 = sub_1881DF4((std::string **)(a4 + 144), (long long *)(a2 + 32), v22);
  }
  uint64_t v23 = *(void *)(a2 + 64);
  if (v23 != -1)
  {
    uint64_t v24 = *(unsigned int *)(a4 + 72);
    if (v24 == *(_DWORD *)(a4 + 76))
    {
      int v25 = v24 + 1;
      sub_188C80C((unsigned int *)(a4 + 72), v24 + 1);
      *(_DWORD *)(*(void *)(a4 + 80) + 4 * v24) = v23;
    }
    else
    {
      *(_DWORD *)(*(void *)(a4 + 80) + 4 * v24) = v23;
      int v25 = v24 + 1;
    }
    *(_DWORD *)(a4 + 72) = v25;
  }
  uint64_t v26 = *(void *)(a2 + 72);
  if (v26 != -1)
  {
    uint64_t v27 = *(unsigned int *)(a4 + 96);
    if (v27 == *(_DWORD *)(a4 + 100))
    {
      int v28 = v27 + 1;
      sub_188C80C((unsigned int *)(a4 + 96), v27 + 1);
      *(_DWORD *)(*(void *)(a4 + 104) + 4 * v27) = v26;
    }
    else
    {
      *(_DWORD *)(*(void *)(a4 + 104) + 4 * v27) = v26;
      int v28 = v27 + 1;
    }
    *(_DWORD *)(a4 + 96) = v28;
  }
  uint64_t v29 = *(void *)(a2 + 80);
  for (uint64_t i = *(void *)(a2 + 88); v29 != i; v29 += 72)
  {
    while (1)
    {
      uint64_t v33 = *(_DWORD **)(a4 + 136);
      if (v33)
      {
        uint64_t v34 = *(int *)(a4 + 128);
        if ((int)v34 < *v33) {
          break;
        }
      }
      int v31 = sub_134E320(*(void *)(a4 + 120));
      uint64_t v32 = sub_188CDC8(a4 + 120, (uint64_t)v31);
      sub_E65E2C(v32, v29, v32);
      v29 += 72;
      if (v29 == i) {
        return;
      }
    }
    *(_DWORD *)(a4 + 128) = v34 + 1;
    sub_E65E2C((uint64_t)a1, v29, *(void *)&v33[2 * v34 + 2]);
  }
}

void sub_E64EFC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (const std::string ****)*a2;
  uint64_t v33 = (const std::string ****)a2[1];
  if ((const std::string ****)*a2 != v33)
  {
    int v31 = (uint64_t *)(a3 + 72);
    uint64_t v32 = a3;
    while (1)
    {
      uint64_t v4 = *(_DWORD **)(a3 + 88);
      if (!v4) {
        break;
      }
      uint64_t v5 = *(int *)(a3 + 80);
      if ((int)v5 >= *v4) {
        break;
      }
      *(_DWORD *)(a3 + 80) = v5 + 1;
      uint64_t v6 = *(void *)&v4[2 * v5 + 2];
      int v7 = *v3;
      uint64_t v34 = v3;
      uint64_t v36 = v3[1];
      if (*v3 != v36) {
        goto LABEL_9;
      }
LABEL_3:
      uint64_t v3 = v34 + 3;
      a3 = v32;
      if (v34 + 3 == v33) {
        return;
      }
    }
    uint64_t v8 = sub_134DFB4(*v31);
    uint64_t v6 = sub_188CDC8((uint64_t)v31, v8);
    int v7 = *v3;
    uint64_t v34 = v3;
    uint64_t v36 = v3[1];
    if (*v3 == v36) {
      goto LABEL_3;
    }
LABEL_9:
    unint64_t v35 = (uint64_t *)(v6 + 32);
    while (1)
    {
      uint64_t v9 = *(_DWORD **)(v6 + 48);
      if (!v9) {
        break;
      }
      uint64_t v10 = *(int *)(v6 + 40);
      if ((int)v10 >= *v9) {
        break;
      }
      *(_DWORD *)(v6 + 40) = v10 + 1;
      uint64_t v11 = *(void *)&v9[2 * v10 + 2];
      uint64_t v12 = *v7;
      uint64_t v13 = (int *)v7[1];
      if (*v7 != (const std::string **)v13) {
        goto LABEL_16;
      }
LABEL_10:
      v7 += 3;
      if (v7 == v36) {
        goto LABEL_3;
      }
    }
    uint64_t v14 = sub_134DF10(*v35);
    uint64_t v11 = sub_188CDC8((uint64_t)v35, v14);
    uint64_t v12 = *v7;
    uint64_t v13 = (int *)v7[1];
    if (*v7 == (const std::string **)v13) {
      goto LABEL_10;
    }
LABEL_16:
    uint64_t v15 = (uint64_t *)(v11 + 32);
    while (1)
    {
      int v18 = *((_DWORD *)v12 + 40);
      if (v18 == 1) {
        break;
      }
      if (!v18)
      {
        int v19 = *(_DWORD *)v12;
        uint64_t v20 = *(unsigned int *)(v11 + 16);
        if (v20 == *(_DWORD *)(v11 + 20))
        {
          sub_188C80C((unsigned int *)(v11 + 16), v20 + 1);
          *(_DWORD *)(*(void *)(v11 + 24) + 4 * v20) = v19;
          *(_DWORD *)(v11 + 16) = v20 + 1;
          uint64_t v21 = *(_DWORD **)(v11 + 48);
          if (!v21)
          {
LABEL_35:
            uint64_t v30 = sub_134DE94(*v15);
            uint64_t v29 = sub_188CDC8(v11 + 32, v30);
            goto LABEL_36;
          }
        }
        else
        {
          *(_DWORD *)(*(void *)(v11 + 24) + 4 * v20) = v19;
          *(_DWORD *)(v11 + 16) = v20 + 1;
          uint64_t v21 = *(_DWORD **)(v11 + 48);
          if (!v21) {
            goto LABEL_35;
          }
        }
        uint64_t v28 = *(int *)(v11 + 40);
        if ((int)v28 >= *v21) {
          goto LABEL_35;
        }
        *(_DWORD *)(v11 + 40) = v28 + 1;
        uint64_t v29 = *(void *)&v21[2 * v28 + 2];
LABEL_36:
        *(_DWORD *)(v29 + 16) |= 2u;
        *(_DWORD *)(v29 + 32) = v19;
      }
LABEL_19:
      v12 += 21;
      if (v12 == (const std::string **)v13) {
        goto LABEL_10;
      }
    }
    uint64_t v22 = *(_DWORD **)(v11 + 48);
    if (v22 && (uint64_t v23 = *(int *)(v11 + 40), (int)v23 < *v22))
    {
      *(_DWORD *)(v11 + 40) = v23 + 1;
      uint64_t v24 = *(void *)&v22[2 * v23 + 2];
      *(_DWORD *)(v24 + 16) |= 1u;
      uint64_t v17 = *(void *)(v24 + 24);
      if (!v17) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v25 = sub_134DE94(*v15);
      uint64_t v24 = sub_188CDC8(v11 + 32, v25);
      *(_DWORD *)(v24 + 16) |= 1u;
      uint64_t v17 = *(void *)(v24 + 24);
      if (!v17)
      {
LABEL_30:
        uint64_t v26 = *(void *)(v24 + 8);
        uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
        if (v26) {
          uint64_t v27 = (void *)*v27;
        }
        sub_13D6A1C((uint64_t)v27);
        uint64_t v17 = v16;
        *(void *)(v24 + 24) = v16;
      }
    }
    sub_5F4D30(v12, v17);
    goto LABEL_19;
  }
}

void sub_E651B4(void **a1, int32x4_t *a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v9 = a2->i32[0];
  if (v9 > 0xA) {
    int v10 = 0;
  }
  else {
    int v10 = dword_20F0E20[v9];
  }
  int v11 = *(_DWORD *)(a4 + 40);
  *(_DWORD *)(a4 + 40) = v11 | 0x400;
  *(_DWORD *)(a4 + 280) = v10;
  *(_DWORD *)(a4 + 300) = a2[2].i32[2] - 978307200;
  *(_DWORD *)(a4 + 40) = v11 | 0x18400;
  uint64_t v12 = (uint64_t)&a2->i64[1];
  __int32 v13 = a2->i32[2];
  __int32 v14 = a2[123].i32[2];
  if ((v14 - 1) >= 5) {
    __int32 v14 = 0;
  }
  *(_DWORD *)(a4 + 304) = v14;
  if (v13 == -1) {
    goto LABEL_13;
  }
  uint64_t v15 = a2[2].u8[7];
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = a2[1].i64[1];
  }
  if (!v15) {
    goto LABEL_13;
  }
  sub_E6627C(v12, (std::string *)v125);
  *(_DWORD *)(a4 + 40) |= 1u;
  uint64_t v16 = *(void *)(a4 + 8);
  uint64_t v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
  if (v16) {
    uint64_t v17 = (uint64_t *)*v17;
  }
  sub_1881E08((uint64_t *)(a4 + 200), (long long *)v125, v17);
  if (SBYTE7(v126) < 0)
  {
    operator delete(v125[0]);
    uint64_t v18 = a2[118].i64[0];
    if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_18;
    }
  }
  else
  {
LABEL_13:
    uint64_t v18 = a2[118].i64[0];
    if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_18;
    }
  }
  int v19 = (int)v18 / 100;
  int v20 = (int)v18 % 100;
  if (v18 < 0) {
    __int16 v21 = -50;
  }
  else {
    __int16 v21 = 50;
  }
  *(_DWORD *)(a4 + 40) |= 0x40000u;
  *(_DWORD *)(a4 + 312) = v19
                        + ((5243 * (__int16)(v21 + v20)) >> 19)
                        + ((5243 * (__int16)(v21 + v20)) >> 31);
LABEL_18:
  uint64_t v22 = a2[3].i64[0];
  if (v22 != -1)
  {
    *(_DWORD *)(a4 + 40) |= 0x800u;
    *(_DWORD *)(a4 + 284) = v22;
  }
  uint64_t v23 = a2[3].i64[1];
  if (v23 != -1)
  {
    *(_DWORD *)(a4 + 40) |= 0x1000u;
    *(_DWORD *)(a4 + 288) = v23;
  }
  if (a2[49].i8[8])
  {
    uint64_t v24 = *(_DWORD **)(a4 + 64);
    if (v24 && (uint64_t v25 = *(int *)(a4 + 56), (int)v25 < *v24))
    {
      *(_DWORD *)(a4 + 56) = v25 + 1;
      uint64_t v26 = *(void *)&v24[2 * v25 + 2];
    }
    else
    {
      uint64_t v27 = sub_134E554(*(void *)(a4 + 48));
      uint64_t v12 = sub_188CDC8(a4 + 48, v27);
      uint64_t v26 = v12;
    }
    sub_E6639C(v12, (uint64_t)&a2[5].i64[1], v26);
  }
  if (a2[59].i8[8])
  {
    uint64_t v28 = *(_DWORD **)(a4 + 88);
    if (v28 && (uint64_t v29 = *(int *)(a4 + 80), (int)v29 < *v28))
    {
      *(_DWORD *)(a4 + 80) = v29 + 1;
      uint64_t v30 = *(void *)&v28[2 * v29 + 2];
    }
    else
    {
      int v31 = sub_134E3C4(*(void *)(a4 + 72));
      uint64_t v30 = sub_188CDC8(a4 + 72, (uint64_t)v31);
    }
    int v32 = *(_DWORD *)(v30 + 40);
    *(_WORD *)(v30 + 60) = a2[54].i16[4];
    *(_DWORD *)(v30 + 40) = v32 | 0x18;
    int v33 = a2[53].i32[0];
    int v34 = v33 / 10;
    int v35 = v33 % 10;
    char v36 = v33 < 0 ? -5 : 5;
    *(_DWORD *)(v30 + 56) = v34
                          + (((103 * (char)(v36 + v35)) >> 15) & 1)
                          + ((103 * (char)(v36 + v35)) >> 10);
    uint64_t v37 = a2[54].i64[0];
    *(_DWORD *)(v30 + 40) = v32 | 0x1E;
    *(_DWORD *)(v30 + 52) = v37;
    uint64_t v38 = a2[53].i64[1];
    if (v38 != -1)
    {
      *(_DWORD *)(v30 + 40) = v32 | 0x1F;
      *(_DWORD *)(v30 + 48) = v38;
    }
  }
  if (a2[62].i8[8])
  {
    uint64_t v39 = *(_DWORD **)(a4 + 112);
    if (v39 && (uint64_t v40 = *(int *)(a4 + 104), (int)v40 < *v39))
    {
      *(_DWORD *)(a4 + 104) = v40 + 1;
      uint64_t v41 = *(void *)&v39[2 * v40 + 2];
    }
    else
    {
      uint64_t v42 = sub_134E420(*(void *)(a4 + 96));
      uint64_t v41 = sub_188CDC8(a4 + 96, (uint64_t)v42);
      if (!a2[62].i8[8]) {
        goto LABEL_169;
      }
    }
    int v43 = a2[60].i32[0];
    int v44 = v43 / 10;
    int v45 = v43 % 10;
    if (v43 < 0) {
      char v46 = -5;
    }
    else {
      char v46 = 5;
    }
    *(_DWORD *)(v41 + 40) |= 1u;
    *(_DWORD *)(v41 + 48) = v44
                          + (((103 * (char)(v46 + v45)) >> 15) & 1)
                          + ((103 * (char)(v46 + v45)) >> 10);
  }
  if (!a2[119].i8[12]) {
    goto LABEL_54;
  }
  *(_DWORD *)(a4 + 40) |= 2u;
  uint64_t v47 = *(void *)(a4 + 208);
  if (!v47)
  {
    uint64_t v48 = *(void *)(a4 + 8);
    uint64_t v49 = (uint64_t *)(v48 & 0xFFFFFFFFFFFFFFFCLL);
    if (v48)
    {
      uint64_t v47 = sub_134E47C(*v49);
      *(void *)(a4 + 208) = v47;
      if (a2[119].i8[12]) {
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v47 = sub_134E47C((uint64_t)v49);
      *(void *)(a4 + 208) = v47;
      if (a2[119].i8[12]) {
        goto LABEL_51;
      }
    }
LABEL_169:
    exceptiouint64_t n = __cxa_allocate_exception(8uLL);
    *exceptiouint64_t n = &off_2439078;
  }
LABEL_51:
  unsigned int v50 = a2[119].u32[2];
  if (v50 >= 3) {
    unsigned int v50 = 0;
  }
  *(_DWORD *)(v47 + 16) |= 1u;
  *(_DWORD *)(v47 + 24) = v50;
LABEL_54:
  if (a2[52].i8[8])
  {
    *(_DWORD *)(a4 + 40) |= 4u;
    uint64_t v51 = *(void *)(a4 + 216);
    if (!v51)
    {
      uint64_t v52 = *(void *)(a4 + 8);
      uint64_t v53 = (void *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
      if (v52) {
        uint64_t v53 = (void *)*v53;
      }
      uint64_t v51 = sub_15C1918((uint64_t)v53);
      *(void *)(a4 + 216) = v51;
    }
    sub_E112BC((int32x4_t *)a2[50].i32, v51, a5);
  }
  if (a2[139].i64[0] != a2[139].i64[1])
  {
    *(_DWORD *)(a4 + 40) |= 0x100u;
    uint64_t v54 = *(void *)(a4 + 264);
    if (!v54)
    {
      uint64_t v55 = *(void *)(a4 + 8);
      uint64_t v56 = (void *)(v55 & 0xFFFFFFFFFFFFFFFCLL);
      if (v55) {
        uint64_t v56 = (void *)*v56;
      }
      uint64_t v54 = sub_134EAD8((uint64_t)v56);
      *(void *)(a4 + 264) = v54;
    }
    sub_E6BB64((uint64_t)a2[139].i64, v54);
  }
  uint64_t v57 = a2[118].i64[1];
  if (v57 != -1)
  {
    *(_DWORD *)(a4 + 40) |= 0x20000u;
    *(_DWORD *)(a4 + 308) = v57;
  }
  uint64_t v58 = a2[119].i64[0];
  if (v58 != -1)
  {
    *(_DWORD *)(a4 + 40) |= 0x100000u;
    *(_DWORD *)(a4 + 320) = v58;
  }
  if (a2[5].i8[0])
  {
    uint64_t v59 = a2[4].i64[0];
    if (v59 != -1)
    {
      *(_DWORD *)(a4 + 40) |= 0x4000u;
      *(_DWORD *)(a4 + 296) = v59;
    }
  }
  uint64_t v60 = sub_980A20(&a2[63].i64[1]);
  if (v60)
  {
    *(_DWORD *)(a4 + 40) |= 8u;
    uint64_t v61 = *(void *)(a4 + 224);
    if (!v61)
    {
      uint64_t v62 = *(void *)(a4 + 8);
      unint64_t v63 = (void *)(v62 & 0xFFFFFFFFFFFFFFFCLL);
      if (v62) {
        unint64_t v63 = (void *)*v63;
      }
      uint64_t v61 = sub_13D7014((uint64_t)v63);
      *(void *)(a4 + 224) = v61;
    }
    sub_E6A64C((uint64_t)&a2[63].i64[1], v61);
  }
  __n128 v64 = (int *)a2[121].i64[1];
  __n128 v65 = (int *)a2[122].i64[0];
  if (v64 != v65)
  {
    char v66 = (unsigned int *)(a4 + 120);
    unsigned int v67 = *(_DWORD *)(a4 + 120);
    do
    {
      while (1)
      {
        int v68 = *v64;
        if (v67 == *(_DWORD *)(a4 + 124)) {
          break;
        }
        *(_DWORD *)(*(void *)(a4 + 128) + 4 * v67++) = v68;
        unsigned int *v66 = v67;
        v64 += 2;
        if (v64 == v65) {
          goto LABEL_84;
        }
      }
      sub_188C80C((unsigned int *)(a4 + 120), v67 + 1);
      *(_DWORD *)(*(void *)(a4 + 128) + 4 * v67++) = v68;
      unsigned int *v66 = v67;
      v64 += 2;
    }
    while (v64 != v65);
  }
LABEL_84:
  char v69 = (int *)a2[120].i64[0];
  unint64_t v70 = (int *)a2[120].i64[1];
  if (v69 != v70)
  {
    uint64_t v71 = (unsigned int *)(a4 + 136);
    unsigned int v72 = *(_DWORD *)(a4 + 136);
    do
    {
      while (1)
      {
        int v73 = *v69;
        if (v72 == *(_DWORD *)(a4 + 140)) {
          break;
        }
        *(_DWORD *)(*(void *)(a4 + 144) + 4 * v72++) = v73;
        *uint64_t v71 = v72;
        v69 += 2;
        if (v69 == v70) {
          goto LABEL_89;
        }
      }
      sub_188C80C((unsigned int *)(a4 + 136), v72 + 1);
      *(_DWORD *)(*(void *)(a4 + 144) + 4 * v72++) = v73;
      *uint64_t v71 = v72;
      v69 += 2;
    }
    while (v69 != v70);
  }
LABEL_89:
  uint64_t v74 = a2[123].i64[0];
  if (v74 != -1)
  {
    *(_DWORD *)(a4 + 40) |= 0x80000u;
    *(_DWORD *)(a4 + 316) = v74;
  }
  if (a2[123].i8[12])
  {
    *(_DWORD *)(a4 + 40) |= 0x2000u;
    *(unsigned char *)(a4 + 292) = 1;
  }
  if (*((_DWORD *)a1 + 25) > 1u)
  {
    sub_E68D98((uint64_t)&a2[218].i64[1], a4);
    goto LABEL_99;
  }
  uint64_t v75 = a2[285].i64[0];
  uint64_t v76 = a2[285].i64[1];
  if (v75 != v76)
  {
    while (*(_DWORD *)(v75 + 488) != 2)
    {
      v75 += 496;
      if (v75 == v76) {
        goto LABEL_144;
      }
    }
    long long v126 = 0u;
    long long v127 = 0u;
    *(_OWORD *)v125 = 0u;
    std::string::operator=((std::string *)v125, *(const std::string **)v75);
    v106 = *(unint64_t **)(v75 + 168);
    v107 = *(unint64_t **)(v75 + 176);
    if (v106 != v107)
    {
      v108 = (char *)v127;
      do
      {
        unint64_t v128 = *v106;
        v108 = sub_E67D74((void **)&v126 + 1, v108, &v128) + 8;
        v106 += 100;
      }
      while (v106 != v107);
    }
    v109 = sub_E68208(a1 + 29, (uint64_t)v125);
    if (v109)
    {
      uint64_t v110 = v109[8];
      *(_DWORD *)(a4 + 40) |= 0x1000000u;
      *(_DWORD *)(a4 + 336) = v110;
      uint64_t v60 = *((void *)&v126 + 1);
      if (!*((void *)&v126 + 1)) {
        goto LABEL_142;
      }
    }
    else
    {
      unint64_t v118 = (unint64_t)a1[35];
      unint64_t v128 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v118 - (void)a1[34]) >> 4);
      if (v118 >= (unint64_t)a1[36])
      {
        uint64_t v119 = sub_95A724((uint64_t *)a1 + 34, v75);
      }
      else
      {
        sub_598F14(v118, v75);
        uint64_t v119 = v118 + 496;
        a1[35] = (void *)(v118 + 496);
      }
      a1[35] = (void *)v119;
      sub_E68494((uint64_t)(a1 + 29), (uint64_t)v125, (long long *)v125, &v128);
      int v122 = v128;
      *(_DWORD *)(a4 + 40) |= 0x1000000u;
      *(_DWORD *)(a4 + 336) = v122;
      uint64_t v60 = *((void *)&v126 + 1);
      if (!*((void *)&v126 + 1))
      {
LABEL_142:
        if (SBYTE7(v126) < 0) {
          operator delete(v125[0]);
        }
        goto LABEL_144;
      }
    }
    *(void *)&long long v127 = v60;
    operator delete((void *)v60);
    goto LABEL_142;
  }
LABEL_144:
  uint64_t v111 = a2[353].i64[0];
  uint64_t v112 = a2[353].i64[1];
  if (v111 == v112) {
    goto LABEL_99;
  }
  while (*(_DWORD *)(v111 + 488) != 2)
  {
    v111 += 496;
    if (v111 == v112) {
      goto LABEL_99;
    }
  }
  long long v126 = 0u;
  long long v127 = 0u;
  *(_OWORD *)v125 = 0u;
  std::string::operator=((std::string *)v125, *(const std::string **)v111);
  v113 = *(unint64_t **)(v111 + 168);
  v114 = *(unint64_t **)(v111 + 176);
  if (v113 != v114)
  {
    v115 = (char *)v127;
    do
    {
      unint64_t v128 = *v113;
      v115 = sub_E67D74((void **)&v126 + 1, v115, &v128) + 8;
      v113 += 100;
    }
    while (v113 != v114);
  }
  v116 = sub_E68208(a1 + 29, (uint64_t)v125);
  if (v116)
  {
    uint64_t v117 = v116[8];
    *(_DWORD *)(a4 + 40) |= 0x800000u;
    *(_DWORD *)(a4 + 332) = v117;
    uint64_t v60 = *((void *)&v126 + 1);
    if (!*((void *)&v126 + 1)) {
      goto LABEL_154;
    }
    goto LABEL_153;
  }
  unint64_t v120 = (unint64_t)a1[35];
  unint64_t v128 = 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(v120 - (void)a1[34]) >> 4);
  if (v120 >= (unint64_t)a1[36])
  {
    uint64_t v121 = sub_95A724((uint64_t *)a1 + 34, v111);
  }
  else
  {
    sub_598F14(v120, v111);
    uint64_t v121 = v120 + 496;
    a1[35] = (void *)(v120 + 496);
  }
  a1[35] = (void *)v121;
  sub_E68494((uint64_t)(a1 + 29), (uint64_t)v125, (long long *)v125, &v128);
  int v123 = v128;
  *(_DWORD *)(a4 + 40) |= 0x800000u;
  *(_DWORD *)(a4 + 332) = v123;
  uint64_t v60 = *((void *)&v126 + 1);
  if (*((void *)&v126 + 1))
  {
LABEL_153:
    *(void *)&long long v127 = v60;
    operator delete((void *)v60);
  }
LABEL_154:
  if (SBYTE7(v126) < 0) {
    operator delete(v125[0]);
  }
LABEL_99:
  if (a2[131].u8[8] | a2[134].u8[0]) {
    sub_E66674(v60, (uint64_t)a2, a4);
  }
  sub_E66844((uint64_t)a1, (uint64_t)a2, a3, a4);
  if (a2[134].i64[1] != a2[135].i64[0])
  {
    uint64_t v78 = sub_3755E4(*a1);
    *(_DWORD *)(a4 + 40) |= 0x40u;
    uint64_t v79 = *(void *)(a4 + 248);
    if (!v79)
    {
      uint64_t v80 = *(void *)(a4 + 8);
      uint64_t v81 = (void *)(v80 & 0xFFFFFFFFFFFFFFFCLL);
      if (v80) {
        uint64_t v81 = (void *)*v81;
      }
      uint64_t v79 = sub_134E79C((uint64_t)v81);
      *(void *)(a4 + 248) = v79;
    }
    uint64_t v77 = sub_E6AC94(v78, &a2[134].i64[1], v79);
  }
  uint16x4_t v82 = (uint16x4_t)vmovn_s32(vceqq_s32(a2[136], (int32x4_t)xmmword_20F0E10));
  v82.i16[0] = vmaxv_u16(v82);
  if ((v82.i8[0] & 1) == 0 && a2[137].i64[0] != -1)
  {
    uint64_t v83 = sub_3755E4(*a1);
    *(_DWORD *)(a4 + 40) |= 0x80u;
    uint64_t v84 = *(void **)(a4 + 256);
    if (!v84)
    {
      uint64_t v85 = *(void *)(a4 + 8);
      unint64_t v86 = (void *)(v85 & 0xFFFFFFFFFFFFFFFCLL);
      if (v85) {
        unint64_t v86 = (void *)*v86;
      }
      uint64_t v84 = sub_134E8C4((uint64_t)v86);
      *(void *)(a4 + 256) = v84;
    }
    uint64_t v77 = sub_E6ADF4(v83, (uint64_t)a2[136].i64, (uint64_t)v84);
  }
  uint64_t v87 = a2[116].i64[1];
  for (uint64_t i = a2[117].i64[0]; v87 != i; v87 += 272)
  {
    uint64_t v91 = *(_DWORD **)(a4 + 168);
    if (v91 && (uint64_t v92 = *(int *)(a4 + 160), (int)v92 < *v91))
    {
      *(_DWORD *)(a4 + 160) = v92 + 1;
      uint64_t v93 = *(void *)&v91[2 * v92 + 2];
      *(_DWORD *)(v93 + 16) |= 1u;
      uint64_t v94 = *(void *)(v93 + 24);
      if (!v94) {
        goto LABEL_123;
      }
    }
    else
    {
      v95 = sub_134EB78(*(void *)(a4 + 152));
      uint64_t v93 = sub_188CDC8(a4 + 152, (uint64_t)v95);
      *(_DWORD *)(v93 + 16) |= 1u;
      uint64_t v94 = *(void *)(v93 + 24);
      if (!v94)
      {
LABEL_123:
        uint64_t v96 = *(void *)(v93 + 8);
        uint64_t v97 = (void *)(v96 & 0xFFFFFFFFFFFFFFFCLL);
        if (v96) {
          uint64_t v97 = (void *)*v97;
        }
        uint64_t v94 = sub_13DAB08((uint64_t)v97);
        *(void *)(v93 + 24) = v94;
      }
    }
    sub_523A2C(v87, v94, (uint8x8_t)v82);
    *(_DWORD *)(v93 + 16) |= 2u;
    uint64_t v90 = *(void *)(v93 + 32);
    if (!v90)
    {
      uint64_t v98 = *(void *)(v93 + 8);
      uint64_t v99 = (void *)(v98 & 0xFFFFFFFFFFFFFFFCLL);
      if (v98) {
        uint64_t v99 = (void *)*v99;
      }
      sub_13D6A1C((uint64_t)v99);
      uint64_t v90 = v89;
      *(void *)(v93 + 32) = v89;
    }
    sub_5F4D30((const std::string **)(v87 + 112), v90);
  }
  uint64_t v100 = a2[214].i64[0];
  for (uint64_t j = a2[214].i64[1]; v100 != j; v100 += 464)
  {
    while (1)
    {
      v104 = *(_DWORD **)(a4 + 192);
      if (v104)
      {
        uint64_t v105 = *(int *)(a4 + 184);
        if ((int)v105 < *v104) {
          break;
        }
      }
      int v102 = sub_134EDA0(*(void *)(a4 + 176));
      uint64_t v103 = sub_188CDC8(a4 + 176, (uint64_t)v102);
      sub_E66E3C(v103, v100, v103);
      v100 += 464;
      if (v100 == j) {
        return;
      }
    }
    *(_DWORD *)(a4 + 184) = v105 + 1;
    sub_E66E3C(v77, v100, *(void *)&v104[2 * v105 + 2]);
  }
}

void sub_E65DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  *(void *)(v14 + 280) = v15;
  sub_A9338((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_E65E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = (long long *)(a2 + 24);
  *(_DWORD *)(a3 + 16) |= 2u;
  uint64_t v6 = (std::string **)(a3 + 56);
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v8 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
  if (v7) {
    uint64_t v8 = (uint64_t *)*v8;
  }
  sub_1881DF4(v6, v5, v8);
  *(_DWORD *)(v3 + 16) |= 1u;
  uint64_t v9 = (std::string **)(v3 + 48);
  uint64_t v10 = *(void *)(v3 + 8);
  int v11 = (uint64_t **)(v10 & 0xFFFFFFFFFFFFFFFCLL);
  if (v10)
  {
    sub_1881DF4(v9, (long long *)a2, *v11);
    uint64_t v12 = *(unint64_t ***)(a2 + 48);
    int v31 = *(unint64_t ***)(a2 + 56);
    if (v12 != v31) {
      goto LABEL_5;
    }
  }
  else
  {
    sub_1881DF4(v9, (long long *)a2, (uint64_t *)v11);
    uint64_t v12 = *(unint64_t ***)(a2 + 48);
    int v31 = *(unint64_t ***)(a2 + 56);
    if (v12 != v31)
    {
LABEL_5:
      uint64_t v29 = (uint64_t *)(v3 + 24);
      uint64_t v30 = v3;
      do
      {
        __int32 v13 = *(_DWORD **)(v3 + 40);
        if (v13 && (uint64_t v14 = *(int *)(v3 + 32), (int)v14 < *v13))
        {
          *(_DWORD *)(v3 + 32) = v14 + 1;
          uint64_t v15 = *(void *)&v13[2 * v14 + 2];
          uint64_t v16 = *v12;
          int v32 = v12;
          int v33 = v12[1];
          if (*v12 != v33) {
            goto LABEL_14;
          }
        }
        else
        {
          uint64_t v17 = sub_134E280(*v29);
          uint64_t v15 = sub_188CDC8((uint64_t)v29, v17);
          uint64_t v16 = *v12;
          int v32 = v12;
          int v33 = v12[1];
          if (*v12 != v33)
          {
            do
            {
LABEL_14:
              uint64_t v18 = *(_DWORD **)(v15 + 32);
              if (v18 && (uint64_t v19 = *(int *)(v15 + 24), (int)v19 < *v18))
              {
                *(_DWORD *)(v15 + 24) = v19 + 1;
                uint64_t v20 = *(void *)&v18[2 * v19 + 2];
              }
              else
              {
                uint64_t v21 = sub_134E1E4(*(void *)(v15 + 16));
                uint64_t v20 = sub_188CDC8(v15 + 16, v21);
              }
              int v22 = sub_9CD338(*v16);
              *(_DWORD *)(v20 + 16) |= 1u;
              *(_DWORD *)(v20 + 40) = v22;
              uint64_t v23 = (unint64_t *)v16[1];
              uint64_t v24 = (unint64_t *)v16[2];
              if (v23 != v24)
              {
                uint64_t v25 = (_DWORD *)(v20 + 24);
                do
                {
                  while (1)
                  {
                    int v26 = sub_9CD338(*v23);
                    int v27 = v26;
                    uint64_t v28 = *(unsigned int *)(v20 + 24);
                    if (v28 == *(_DWORD *)(v20 + 28)) {
                      break;
                    }
                    *(_DWORD *)(*(void *)(v20 + 32) + 4 * v28) = v26;
                    *uint64_t v25 = v28 + 1;
                    if (++v23 == v24) {
                      goto LABEL_13;
                    }
                  }
                  sub_188C80C((unsigned int *)(v20 + 24), v28 + 1);
                  *(_DWORD *)(*(void *)(v20 + 32) + 4 * v28) = v27;
                  *uint64_t v25 = v28 + 1;
                  ++v23;
                }
                while (v23 != v24);
              }
LABEL_13:
              v16 += 4;
            }
            while (v16 != v33);
          }
        }
        uint64_t v12 = v32 + 3;
        uint64_t v3 = v30;
      }
      while (v32 + 3 != v31);
    }
  }
}

uint64_t sub_E66064()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  sub_7A1FB0((uint64_t)v25, v4);
  sub_E680E4(&v19, (uint64_t)v25, 1uLL);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_E2254C((unsigned char *)(v3 + 8), (uint64_t **)&v19, v3 + 48, (uint64_t *)&v16, (uint64_t)v21);
  uint64_t v5 = v16;
  if (v16)
  {
    uint64_t v6 = (uint64_t)v17;
    uint64_t v7 = v16;
    if (v17 != v16)
    {
      do
        uint64_t v6 = sub_3A6B94(v6 - 1120);
      while ((void *)v6 != v5);
      uint64_t v7 = v16;
    }
    uint64_t v17 = v5;
    operator delete(v7);
  }
  uint64_t v8 = v19;
  if (v19)
  {
    uint64_t v9 = (uint64_t)v20;
    uint64_t v10 = v19;
    if (v20 != v19)
    {
      do
        uint64_t v9 = sub_574D4C(v9 - 7560);
      while ((void *)v9 != v8);
      uint64_t v10 = v19;
    }
    uint64_t v20 = v8;
    operator delete(v10);
  }
  sub_574D4C((uint64_t)v25);
  if (!v24 && v22 == 1)
  {
    int v11 = *(_DWORD **)(v2 + 152);
    if (v11 && (uint64_t v12 = *(int *)(v2 + 144), (int)v12 < *v11))
    {
      *(_DWORD *)(v2 + 144) = v12 + 1;
      uint64_t v13 = *(void *)&v11[2 * v12 + 2];
    }
    else
    {
      uint64_t v14 = sub_13D8E84(*(void *)(v2 + 136));
      uint64_t v13 = sub_188CDC8(v2 + 136, v14);
    }
    sub_13AD5E8(v13, *(void *)(v23 + 8));
  }
  return sub_162D64C(v21);
}

void sub_E6621C(_Unwind_Exception *a1, void *__p, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (__p) {
    operator delete(__p);
  }
  sub_50E790((void **)va);
  sub_574530((void **)va1);
  sub_574D4C((uint64_t)&STACK[0x280]);
  _Unwind_Resume(a1);
}

void sub_E66250(_Unwind_Exception *a1)
{
}

void sub_E66268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_162D64C(va);
  _Unwind_Resume(a1);
}

void sub_E6627C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v13, *(_DWORD *)a1);
  uint64_t v4 = std::string::append(&v13, ".");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v8 = *(const std::string::value_type **)(a1 + 8);
  uint64_t v7 = a1 + 8;
  uint64_t v6 = v8;
  int v9 = *(char *)(v7 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (const std::string::value_type *)v7;
  }
  else {
    uint64_t v10 = v6;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(v7 + 8);
  }
  uint64_t v12 = std::string::append(&v14, v10, v11);
  *a2 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_11:
    operator delete(v13.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_11;
  }
}

void sub_E66350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_E6639C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 664);
  int v6 = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a3 + 40) = v6 | 8;
  *(_DWORD *)(a3 + 96) = v5;
  if (*(_DWORD *)a2 == 0x7FFFFFFF)
  {
    if (*(_DWORD *)(a2 + 28) == 0x7FFFFFFF) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_DWORD *)(a3 + 40) = v6 | 0xA;
    uint64_t v8 = *(void *)(a3 + 80);
    if (!v8)
    {
      uint64_t v9 = *(void *)(a3 + 8);
      uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (v9) {
        uint64_t v10 = (void *)*v10;
      }
      uint64_t v8 = sub_134E4F8((uint64_t)v10);
      *(void *)(a3 + 80) = v8;
    }
    int v11 = *(_DWORD *)a2 - 978307200;
    *(_DWORD *)(v8 + 40) |= 1u;
    *(_DWORD *)(v8 + 48) = v11;
    if (*(_DWORD *)(a2 + 28) == 0x7FFFFFFF)
    {
LABEL_3:
      uint64_t v7 = a2 + 56;
      if (!sub_BB7C((_DWORD *)(a2 + 56))) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
  }
  *(_DWORD *)(a3 + 40) |= 4u;
  uint64_t v12 = *(void *)(a3 + 88);
  if (!v12)
  {
    uint64_t v13 = *(void *)(a3 + 8);
    std::string v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
    if (v13) {
      std::string v14 = (void *)*v14;
    }
    uint64_t v12 = sub_134E4F8((uint64_t)v14);
    *(void *)(a3 + 88) = v12;
  }
  int v15 = *(_DWORD *)(a2 + 28) - 978307200;
  *(_DWORD *)(v12 + 40) |= 1u;
  *(_DWORD *)(v12 + 48) = v15;
  uint64_t v7 = a2 + 56;
  if (sub_BB7C((_DWORD *)(a2 + 56)))
  {
LABEL_15:
    if (*(unsigned char *)(a2 + 657))
    {
      uint64_t v16 = (int *)nullsub_1(v7);
      int v17 = *v16 / 10;
      int v18 = *v16 % 10;
      if (*v16 < 0) {
        char v19 = -5;
      }
      else {
        char v19 = 5;
      }
      *(_DWORD *)(a3 + 40) |= 0x80u;
      *(_DWORD *)(a3 + 112) = v17
                            + (((103 * (char)(v19 + v18)) >> 15) & 1)
                            + ((103 * (char)(v19 + v18)) >> 10);
      uint64_t v20 = (int *)sub_BBB4(v7);
      int v21 = *v20 / 10;
      int v22 = *v20 % 10;
      if (*v20 < 0) {
        char v23 = -5;
      }
      else {
        char v23 = 5;
      }
      *(_DWORD *)(a3 + 40) |= 0x20u;
      *(_DWORD *)(a3 + 104) = v21
                            + (((103 * (char)(v23 + v22)) >> 15) & 1)
                            + ((103 * (char)(v23 + v22)) >> 10);
    }
  }
LABEL_23:
  uint64_t v24 = *(void *)(a2 + 672);
  if (v24 != -1)
  {
    uint64_t v25 = nullsub_1(v24);
    *(_DWORD *)(a3 + 40) |= 0x100u;
    *(void *)(a3 + 120) = v25;
  }
  if (*(unsigned char *)(a2 + 69))
  {
    int v26 = 100;
  }
  else if (*(unsigned __int8 *)(a2 + 68) - 1 <= 2)
  {
    int v26 = (*(unsigned char *)(a2 + 68) - 1) + 1;
  }
  else
  {
    int v26 = 0;
  }
  int v27 = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a3 + 40) = v27 | 0x40;
  *(_DWORD *)(a3 + 108) = v26;
  uint64_t v28 = *(void *)(a2 + 624);
  if (v28 != -1)
  {
    *(_DWORD *)(a3 + 40) = v27 | 0x50;
    *(_DWORD *)(a3 + 100) = v28;
  }
  uint64_t v29 = *(int **)(a2 + 632);
  uint64_t v30 = *(int **)(a2 + 640);
  if (v29 != v30)
  {
    int v31 = (unsigned int *)(a3 + 48);
    unsigned int v32 = *(_DWORD *)(a3 + 48);
    do
    {
      while (1)
      {
        int v33 = *v29;
        if (v32 == *(_DWORD *)(a3 + 52)) {
          break;
        }
        *(_DWORD *)(*(void *)(a3 + 56) + 4 * v32++) = v33;
        *int v31 = v32;
        v29 += 2;
        if (v29 == v30) {
          return;
        }
      }
      sub_188C80C((unsigned int *)(a3 + 48), v32 + 1);
      *(_DWORD *)(*(void *)(a3 + 56) + 4 * v32++) = v33;
      *int v31 = v32;
      v29 += 2;
    }
    while (v29 != v30);
  }
}

void sub_E66674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 2104))
  {
    *(_DWORD *)(a3 + 40) |= 0x10u;
    uint64_t v5 = *(void *)(a3 + 232);
    if (!v5)
    {
      uint64_t v6 = *(void *)(a3 + 8);
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
      uint64_t v5 = sub_134E60C((uint64_t)v7);
      *(void *)(a3 + 232) = v5;
    }
    sub_E67C78((std::string *)(a2 + 2024), v5);
  }
  if (*(unsigned char *)(a2 + 2144))
  {
    *(_DWORD *)(a3 + 40) |= 0x20u;
    uint64_t v8 = *(void **)(a3 + 240);
    if (!v8)
    {
      uint64_t v9 = *(void *)(a3 + 8);
      uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (v9) {
        uint64_t v10 = (void *)*v10;
      }
      uint64_t v8 = sub_134E6C4((uint64_t)v10);
      *(void *)(a3 + 240) = v8;
    }
    int v11 = *(_DWORD *)(a2 + 2140);
    BOOL v12 = *(unsigned __int8 *)(a2 + 2136) == 1;
    *((_DWORD *)v8 + 10) |= 3u;
    *((_DWORD *)v8 + 18) = v12;
    *((_DWORD *)v8 + 19) = v11;
    uint64_t v13 = *(void *)(a2 + 2112);
    for (uint64_t i = *(void *)(a2 + 2120); v13 != i; v13 += 48)
    {
      int v15 = (_DWORD *)v8[8];
      if (v15 && (uint64_t v16 = *((int *)v8 + 14), (int)v16 < *v15))
      {
        *((_DWORD *)v8 + 14) = v16 + 1;
        uint64_t v17 = *(void *)&v15[2 * v16 + 2];
        *(_DWORD *)(v17 + 40) |= 1u;
        int v18 = *(void **)(v17 + 48);
        if (!v18) {
          goto LABEL_18;
        }
      }
      else
      {
        char v19 = sub_134E668(v8[6]);
        uint64_t v17 = sub_188CDC8((uint64_t)(v8 + 6), (uint64_t)v19);
        *(_DWORD *)(v17 + 40) |= 1u;
        int v18 = *(void **)(v17 + 48);
        if (!v18)
        {
LABEL_18:
          uint64_t v20 = *(void *)(v17 + 8);
          int v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
          if (v20) {
            int v21 = (void *)*v21;
          }
          int v18 = sub_134E5B0((uint64_t)v21);
          *(void *)(v17 + 48) = v18;
        }
      }
      int v22 = *((_DWORD *)v18 + 10);
      *((_DWORD *)v18 + 14) = *(_DWORD *)v13;
      *((_DWORD *)v18 + 10) = v22 | 3;
      uint64_t v23 = v18[1];
      uint64_t v24 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
      if (v23) {
        uint64_t v24 = (uint64_t *)*v24;
      }
      sub_1881DF4((std::string **)v18 + 6, (long long *)(v13 + 8), v24);
      int v25 = *(_DWORD *)(v13 + 32);
      *((_DWORD *)v18 + 10) |= 4u;
      *((_DWORD *)v18 + 15) = v25;
    }
  }
}

void sub_E66844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a3 + 1136) == 0x7FFFFFFF)
  {
    int v6 = *(unsigned __int8 *)(a2 + 2104);
  }
  else
  {
    if (*(char *)(a3 + 1167) >= 0) {
      uint64_t v7 = *(unsigned __int8 *)(a3 + 1167);
    }
    else {
      uint64_t v7 = *(void *)(a3 + 1152);
    }
    int v6 = *(unsigned __int8 *)(a2 + 2104);
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8) {
      return;
    }
  }
  if (v6)
  {
    uint64_t v9 = (unint64_t **)(a2 + 2072);
    uint64_t v10 = (unint64_t **)(a2 + 2080);
  }
  else
  {
    uint64_t v9 = (unint64_t **)(a2 + 5680);
    uint64_t v10 = (unint64_t **)(a2 + 5688);
    if (*(void *)(a2 + 5680) != *(void *)(a2 + 5688))
    {
      LODWORD(v58.__r_.__value_.__l.__data_) = 0x7FFFFFFF;
      uint64_t v59 = 0;
      *(_OWORD *)&v58.__r_.__value_.__r.__words[1] = 0uLL;
      int v60 = 100;
      LOBYTE(v61) = 0;
      DWORD1(v61) = 1;
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      *((void *)&v61 + 1) = 0;
      __int16 v64 = 0;
      *(_DWORD *)(a4 + 40) |= 0x10u;
      uint64_t v34 = *(void *)(a4 + 232);
      if (!v34)
      {
        uint64_t v35 = *(void *)(a4 + 8);
        char v36 = (void *)(v35 & 0xFFFFFFFFFFFFFFFCLL);
        if (v35) {
          char v36 = (void *)*v36;
        }
        uint64_t v34 = sub_134E60C((uint64_t)v36);
        *(void *)(a4 + 232) = v34;
      }
      sub_E67C78(&v58, v34);
      if (*((void *)&v61 + 1))
      {
        uint64_t v62 = *((void *)&v61 + 1);
        operator delete(*((void **)&v61 + 1));
      }
      if (SHIBYTE(v59) < 0) {
        operator delete((void *)v58.__r_.__value_.__l.__size_);
      }
    }
  }
  int v53 = *(unsigned __int8 *)(a1 + 106);
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  unint64_t v57 = 0;
  int v11 = *v9;
  BOOL v12 = *v10;
  if (v11 == *v10)
  {
    int v33 = 0;
    unsigned int v32 = 0;
    goto LABEL_52;
  }
  do
  {
    unint64_t v54 = *v11;
    uint64_t v13 = sub_3FAA8C((void *)(a1 + 296), &v54);
    if (v13)
    {
      unint64_t v14 = v13[3];
      if (v53) {
        goto LABEL_18;
      }
      goto LABEL_32;
    }
    unint64_t v65 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 344) - *(void *)(a1 + 336)) >> 3);
    unint64_t v21 = v54;
    uint64_t v22 = sub_3757C8(*(void **)a1);
    sub_4A0180(v21, v22, a1 + 112, (uint64_t)&v58);
    unint64_t v23 = *(void *)(a1 + 344);
    if (v23 < *(void *)(a1 + 352))
    {
      *(void *)unint64_t v23 = v58.__r_.__value_.__r.__words[0];
      long long v24 = *(_OWORD *)&v58.__r_.__value_.__r.__words[1];
      *(void *)(v23 + 24) = v59;
      *(_OWORD *)(v23 + 8) = v24;
      uint64_t v59 = 0;
      *(_OWORD *)&v58.__r_.__value_.__r.__words[1] = 0uLL;
      *(unsigned char *)(v23 + 32) = v60;
      long long v25 = v61;
      *(void *)(v23 + 56) = v62;
      *(_OWORD *)(v23 + 40) = v25;
      uint64_t v62 = 0;
      long long v61 = 0uLL;
      *(unsigned char *)(v23 + 64) = v63;
      *(void *)(a1 + 344) = v23 + 72;
      if ((SHIBYTE(v59) & 0x80000000) == 0) {
        goto LABEL_31;
      }
LABEL_30:
      operator delete((void *)v58.__r_.__value_.__l.__size_);
      goto LABEL_31;
    }
    int v26 = sub_E62180((void **)(a1 + 336), (uint64_t)&v58);
    int v27 = SHIBYTE(v62);
    *(void *)(a1 + 344) = v26;
    if ((v27 & 0x80000000) == 0)
    {
      if ((SHIBYTE(v59) & 0x80000000) == 0) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    operator delete((void *)v61);
    if (SHIBYTE(v59) < 0) {
      goto LABEL_30;
    }
LABEL_31:
    sub_E62384(a1 + 296, &v54, &v54, (uint64_t *)&v65);
    unint64_t v14 = v65;
    if (v53)
    {
LABEL_18:
      *(_DWORD *)(a4 + 40) |= 0x10u;
      uint64_t v15 = *(void *)(a4 + 232);
      if (!v15)
      {
        uint64_t v16 = *(void *)(a4 + 8);
        uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
        if (v16) {
          uint64_t v17 = (void *)*v17;
        }
        uint64_t v15 = sub_134E60C((uint64_t)v17);
        *(void *)(a4 + 232) = v15;
      }
      int v18 = sub_2D0F10(v14);
      int v19 = v18;
      uint64_t v20 = *(unsigned int *)(v15 + 72);
      if (v20 == *(_DWORD *)(v15 + 76))
      {
        sub_188C80C((unsigned int *)(v15 + 72), v20 + 1);
        *(_DWORD *)(*(void *)(v15 + 80) + 4 * v20) = v19;
      }
      else
      {
        *(_DWORD *)(*(void *)(v15 + 80) + 4 * v20) = v18;
      }
      *(_DWORD *)(v15 + 72) = v20 + 1;
      goto LABEL_15;
    }
LABEL_32:
    uint64_t v28 = *(void *)(a1 + 336);
    if (0x8E38E38E38E38E39 * ((*(void *)(a1 + 344) - v28) >> 3) <= v14) {
      sub_66748();
    }
    uint64_t v29 = v28 + 72 * v14 + 8;
    uint64_t v30 = v56;
    if ((unint64_t)v56 >= v57)
    {
      uint64_t v56 = sub_6E6EC((char **)&v55, v29);
    }
    else
    {
      if (*(char *)(v29 + 23) < 0)
      {
        sub_4200(v56, *(void **)v29, *(void *)(v29 + 8));
      }
      else
      {
        long long v31 = *(_OWORD *)v29;
        *((void *)v56 + 2) = *(void *)(v29 + 16);
        *(_OWORD *)uint64_t v30 = v31;
      }
      uint64_t v56 = v30 + 24;
    }
LABEL_15:
    ++v11;
  }
  while (v11 != v12);
  unsigned int v32 = (const void **)v55;
  int v33 = (const void **)v56;
LABEL_52:
  unint64_t v37 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v33 - v32));
  if (v33 == v32) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = v37;
  }
  sub_6EA30((uint64_t)v32, v33, (uint64_t)&v58, v38, 1);
  uint64_t v39 = (long long *)v55;
  uint64_t v40 = v56;
  if (v55 == v56) {
    goto LABEL_69;
  }
  while (2)
  {
    *(_DWORD *)(a4 + 40) |= 0x10u;
    uint64_t v41 = *(void *)(a4 + 232);
    if (v41)
    {
      uint64_t v42 = *(_DWORD **)(v41 + 64);
      if (!v42) {
        goto LABEL_64;
      }
LABEL_62:
      uint64_t v45 = *(int *)(v41 + 56);
      if ((int)v45 >= *v42) {
        goto LABEL_64;
      }
      *(_DWORD *)(v41 + 56) = v45 + 1;
      uint64_t v46 = *(void *)&v42[2 * v45 + 2];
    }
    else
    {
      uint64_t v43 = *(void *)(a4 + 8);
      int v44 = (void *)(v43 & 0xFFFFFFFFFFFFFFFCLL);
      if (v43) {
        int v44 = (void *)*v44;
      }
      uint64_t v41 = sub_134E60C((uint64_t)v44);
      *(void *)(a4 + 232) = v41;
      uint64_t v42 = *(_DWORD **)(v41 + 64);
      if (v42) {
        goto LABEL_62;
      }
LABEL_64:
      uint64_t v47 = v41 + 48;
      uint64_t v48 = sub_133280C(*(void *)(v41 + 48));
      uint64_t v46 = sub_188CDC8(v47, (uint64_t)v48);
    }
    *(_DWORD *)(v46 + 40) |= 1u;
    uint64_t v49 = *(void *)(v46 + 8);
    unsigned int v50 = (uint64_t *)(v49 & 0xFFFFFFFFFFFFFFFCLL);
    if (v49) {
      unsigned int v50 = (uint64_t *)*v50;
    }
    sub_1881DF4((std::string **)(v46 + 48), v39, v50);
    uint64_t v39 = (long long *)((char *)v39 + 24);
    if (v39 != (long long *)v40) {
      continue;
    }
    break;
  }
  uint64_t v39 = (long long *)v55;
LABEL_69:
  if (v39)
  {
    uint64_t v51 = v56;
    uint64_t v52 = v39;
    if (v56 != (char *)v39)
    {
      do
      {
        if (*(v51 - 1) < 0) {
          operator delete(*((void **)v51 - 3));
        }
        v51 -= 24;
      }
      while (v51 != (char *)v39);
      uint64_t v52 = v55;
    }
    uint64_t v56 = (char *)v39;
    operator delete(v52);
  }
}

void sub_E66D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_49FBD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E66D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_E66DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_E66DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_E66DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void *);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_E689D4((uint64_t)va1);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_E66DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_E66E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_E66E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_E66E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1A668((void **)va);
  _Unwind_Resume(a1);
}

void sub_E66E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_45FB38((void *)a2)) {
    goto LABEL_40;
  }
  int v6 = (_DWORD *)(a2 + 320);
  int v7 = *(_DWORD *)(a2 + 352);
  if (v7 == 1)
  {
    BOOL v8 = *(_DWORD *)(a2 + 324) == -1 && *(_DWORD *)(a2 + 320) == -1;
    if (v8 && *(void *)(a2 + 328) == *(void *)(a2 + 336)) {
      goto LABEL_40;
    }
  }
  else if (v7 || *v6 == -1)
  {
    goto LABEL_40;
  }
  *(_DWORD *)(a3 + 16) |= 1u;
  uint64_t v9 = *(void *)(a3 + 48);
  if (v9)
  {
    if (sub_45FB38((void *)a2)) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a3 + 8);
    uint64_t v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v12) {
      uint64_t v13 = (void *)*v13;
    }
    sub_134ED24((uint64_t)v13);
    uint64_t v9 = v14;
    *(void *)(a3 + 48) = v14;
    if (sub_45FB38((void *)a2))
    {
LABEL_14:
      uint64_t v10 = (const std::string **)(a2 + 160);
      if (sub_45FB38((void *)(a2 + 160))) {
        goto LABEL_15;
      }
      goto LABEL_27;
    }
  }
  *(_DWORD *)(v9 + 16) |= 1u;
  uint64_t v15 = *(void *)(v9 + 24);
  if (!v15)
  {
    uint64_t v16 = *(void *)(v9 + 8);
    uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    if (v16) {
      uint64_t v17 = (void *)*v17;
    }
    sub_13D6A1C((uint64_t)v17);
    uint64_t v15 = v18;
    *(void *)(v9 + 24) = v18;
  }
  sub_5F4D30((const std::string **)a2, v15);
  uint64_t v10 = (const std::string **)(a2 + 160);
  if (sub_45FB38((void *)(a2 + 160)))
  {
LABEL_15:
    int v11 = *(_DWORD *)(a2 + 352);
    if (v11 != 1) {
      goto LABEL_16;
    }
LABEL_32:
    if (*(_DWORD *)(a2 + 324) == -1 && *(_DWORD *)(a2 + 320) == -1 && *(void *)(a2 + 328) == *(void *)(a2 + 336)) {
      goto LABEL_40;
    }
    goto LABEL_35;
  }
LABEL_27:
  *(_DWORD *)(v9 + 16) |= 2u;
  uint64_t v19 = *(void *)(v9 + 32);
  if (!v19)
  {
    uint64_t v20 = *(void *)(v9 + 8);
    unint64_t v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
    if (v20) {
      unint64_t v21 = (void *)*v21;
    }
    sub_13D6A1C((uint64_t)v21);
    uint64_t v19 = v22;
    *(void *)(v9 + 32) = v22;
  }
  sub_5F4D30(v10, v19);
  int v11 = *(_DWORD *)(a2 + 352);
  if (v11 == 1) {
    goto LABEL_32;
  }
LABEL_16:
  if (v11 || *v6 == -1) {
    goto LABEL_40;
  }
LABEL_35:
  *(_DWORD *)(v9 + 16) |= 4u;
  uint64_t v23 = *(void *)(v9 + 40);
  if (!v23)
  {
    uint64_t v24 = *(void *)(v9 + 8);
    long long v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
    if (v24) {
      long long v25 = (void *)*v25;
    }
    uint64_t v23 = sub_13DAB08((uint64_t)v25);
    *(void *)(v9 + 40) = v23;
  }
  sub_523A2C(a2 + 320, v23, *(uint8x8_t *)&v5);
LABEL_40:
  uint64_t v26 = *(void *)(a2 + 432);
  for (uint64_t i = *(void *)(a2 + 440); v26 != i; v26 += 40)
  {
    uint64_t v28 = *(_DWORD **)(a3 + 40);
    if (v28 && (uint64_t v29 = *(int *)(a3 + 32), (int)v29 < *v28))
    {
      *(_DWORD *)(a3 + 32) = v29 + 1;
      uint64_t v30 = *(void *)&v28[2 * v29 + 2];
      *(_DWORD *)(v30 + 16) |= 1u;
      uint64_t v31 = *(void *)(v30 + 24);
      if (!v31) {
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v32 = sub_13326EC(*(void *)(a3 + 24));
      uint64_t v30 = sub_188CDC8(a3 + 24, v32);
      *(_DWORD *)(v30 + 16) |= 1u;
      uint64_t v31 = *(void *)(v30 + 24);
      if (!v31)
      {
LABEL_48:
        uint64_t v33 = *(void *)(v30 + 8);
        uint64_t v34 = (void *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
        if (v33) {
          uint64_t v34 = (void *)*v34;
        }
        uint64_t v31 = sub_15C1918((uint64_t)v34);
        *(void *)(v30 + 24) = v31;
      }
    }
    double v5 = sub_E112BC((_DWORD *)v26, v31, v5);
    if (*(unsigned char *)(v26 + 12) == 1) {
      int v35 = 1;
    }
    else {
      int v35 = 2;
    }
    int v36 = *(_DWORD *)(v30 + 16);
    int v37 = *(unsigned __int8 *)(v26 + 32);
    if (v37 == 2) {
      int v38 = 2;
    }
    else {
      int v38 = v37 == 1;
    }
    *(_DWORD *)(v30 + 16) = v36 | 6;
    *(_DWORD *)(v30 + 32) = v38;
    *(_DWORD *)(v30 + 36) = v35;
    int v39 = *(_DWORD *)(v26 + 16);
    if (v39 != 0x7FFFFFFF)
    {
      int v40 = v39 / 10;
      int v41 = v39 % 10;
      if (v39 < 0) {
        char v42 = -5;
      }
      else {
        char v42 = 5;
      }
      *(_DWORD *)(v30 + 16) = v36 | 0xE;
      *(_DWORD *)(v30 + 40) = v40
                            + (((103 * (char)(v42 + v41)) >> 15) & 1)
                            + ((103 * (char)(v42 + v41)) >> 10);
    }
  }
}

void sub_E67194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(int **)(a3 + 176);
  if (v6 && (int v7 = *(_DWORD *)(a3 + 168), v7 < *v6))
  {
    *(_DWORD *)(a3 + 168) = v7 + 1;
    uint64_t v8 = *(void *)&v6[2 * v7 + 2];
  }
  else
  {
    uint64_t v9 = sub_1332398(*(void *)(a3 + 160));
    uint64_t v8 = sub_188CDC8(a3 + 160, v9);
    int v7 = *(_DWORD *)(a3 + 168) - 1;
  }
  *(_DWORD *)(v8 + 40) |= 0x40u;
  *(_DWORD *)(v8 + 116) = v7;
  uint64_t v10 = nullsub_1(*(void *)(a2 + 88));
  int v12 = *(_DWORD *)(v8 + 40);
  *(void *)(v8 + 104) = v10;
  *(_DWORD *)(v8 + 40) = v12 | 0x14;
  uint64_t v13 = *(void *)(v8 + 88);
  if (!v13)
  {
    uint64_t v14 = *(void *)(v8 + 8);
    uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14) {
      uint64_t v15 = (void *)*v15;
    }
    uint64_t v13 = sub_15C1918((uint64_t)v15);
    *(void *)(v8 + 88) = v13;
  }
  sub_E112BC((_DWORD *)a2, v13, v11);
  sub_E6911C((void *)(a2 + 112), v8);
  uint64_t v16 = *(void *)(a2 + 104);
  int v17 = *(_DWORD *)(v8 + 40);
  if (v16 != -1)
  {
    v17 |= 0x20u;
    *(_DWORD *)(v8 + 40) = v17;
    *(_DWORD *)(v8 + 112) = v16;
  }
  uint64_t v18 = *(unsigned __int8 *)(a2 + 63);
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(a2 + 48);
  }
  if (v18)
  {
    *(_DWORD *)(v8 + 40) = v17 | 2;
    uint64_t v19 = *(void *)(v8 + 8);
    uint64_t v20 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if (v19) {
      uint64_t v20 = (uint64_t *)*v20;
    }
    sub_1881DF4((std::string **)(v8 + 80), (long long *)(a2 + 40), v20);
    int v17 = *(_DWORD *)(v8 + 40);
  }
  *(_DWORD *)(v8 + 40) = v17 | 1;
  uint64_t v21 = *(void *)(v8 + 8);
  uint64_t v22 = (uint64_t *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
  if (v21) {
    uint64_t v22 = (uint64_t *)*v22;
  }
  sub_1881DF4((std::string **)(v8 + 72), (long long *)(a2 + 136), v22);

  sub_E67B68(a1, a2, v8);
}

void sub_E67324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(int **)(a3 + 56);
  if (v6 && (int v7 = *(_DWORD *)(a3 + 48), v7 < *v6))
  {
    *(_DWORD *)(a3 + 48) = v7 + 1;
    uint64_t v8 = *(void *)&v6[2 * v7 + 2];
  }
  else
  {
    uint64_t v9 = sub_1332228(*(void *)(a3 + 40));
    uint64_t v8 = sub_188CDC8(a3 + 40, (uint64_t)v9);
    int v7 = *(_DWORD *)(a3 + 48) - 1;
  }
  *(_DWORD *)(v8 + 40) |= 8u;
  *(_DWORD *)(v8 + 96) = v7;
  uint64_t v10 = nullsub_1(*(void *)(a2 + 88));
  int v12 = *(_DWORD *)(v8 + 40);
  *(void *)(v8 + 88) = v10;
  *(_DWORD *)(v8 + 40) = v12 | 6;
  uint64_t v13 = *(void *)(v8 + 80);
  if (!v13)
  {
    uint64_t v14 = *(void *)(v8 + 8);
    uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14) {
      uint64_t v15 = (void *)*v15;
    }
    uint64_t v13 = sub_15C1918((uint64_t)v15);
    *(void *)(v8 + 80) = v13;
  }
  sub_E112BC((_DWORD *)a2, v13, v11);
  uint64_t v16 = *(unsigned __int8 *)(a2 + 63);
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *(void *)(a2 + 48);
  }
  if (v16)
  {
    *(_DWORD *)(v8 + 40) |= 1u;
    uint64_t v17 = *(void *)(v8 + 8);
    uint64_t v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      uint64_t v18 = (uint64_t *)*v18;
    }
    sub_1881DF4((std::string **)(v8 + 72), (long long *)(a2 + 40), v18);
  }
  sub_E67B68(a1, a2, v8);
  if (((*(unsigned char *)(a2 + 104) - 1) & 0xFC) != 0) {
    int v19 = 0;
  }
  else {
    int v19 = (*(unsigned char *)(a2 + 104) - 1) + 1;
  }
  *(_DWORD *)(v8 + 40) |= 0x10u;
  *(_DWORD *)(v8 + 100) = v19;
}

void sub_E67478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(int **)(a3 + 272);
  if (v6 && (int v7 = *(_DWORD *)(a3 + 264), v7 < *v6))
  {
    *(_DWORD *)(a3 + 264) = v7 + 1;
    uint64_t v8 = *(void *)&v6[2 * v7 + 2];
  }
  else
  {
    uint64_t v9 = sub_13323F4(*(void *)(a3 + 256));
    uint64_t v8 = sub_188CDC8(a3 + 256, v9);
    int v7 = *(_DWORD *)(a3 + 264) - 1;
  }
  *(_DWORD *)(v8 + 40) |= 0x20u;
  *(_DWORD *)(v8 + 108) = v7;
  uint64_t v10 = nullsub_1(*(void *)(a2 + 88));
  *(_DWORD *)(v8 + 40) |= 8u;
  *(void *)(v8 + 96) = v10;
  sub_E69078((void *)(a2 + 120), v8);
  *(_DWORD *)(v8 + 40) |= 2u;
  uint64_t v12 = *(void *)(v8 + 80);
  if (!v12)
  {
    uint64_t v13 = *(void *)(v8 + 8);
    uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
    if (v13) {
      uint64_t v14 = (void *)*v14;
    }
    uint64_t v12 = sub_15C1918((uint64_t)v14);
    *(void *)(v8 + 80) = v12;
  }
  sub_E112BC((_DWORD *)a2, v12, v11);
  uint64_t v15 = *(unsigned __int8 *)(a2 + 63);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a2 + 48);
  }
  if (v15)
  {
    *(_DWORD *)(v8 + 40) |= 1u;
    uint64_t v16 = *(void *)(v8 + 8);
    uint64_t v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    if (v16) {
      uint64_t v17 = (uint64_t *)*v17;
    }
    sub_1881DF4((std::string **)(v8 + 72), (long long *)(a2 + 40), v17);
  }
  uint64_t v18 = *(void *)(a2 + 104);
  if (v18 != -1)
  {
    *(_DWORD *)(v8 + 40) |= 0x10u;
    *(_DWORD *)(v8 + 104) = v18;
  }

  sub_E67B68(a1, a2, v8);
}

void sub_E675E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = *(int **)(a3 + 128);
  if (v5 && (int v6 = *(_DWORD *)(a3 + 120), v6 < *v5))
  {
    *(_DWORD *)(a3 + 120) = v6 + 1;
    uint64_t v7 = *(void *)&v5[2 * v6 + 2];
  }
  else
  {
    uint64_t v8 = sub_133233C(*(void *)(a3 + 112));
    uint64_t v7 = sub_188CDC8(a3 + 112, (uint64_t)v8);
    int v6 = *(_DWORD *)(a3 + 120) - 1;
  }
  *(_DWORD *)(v7 + 40) |= 0x20u;
  *(_DWORD *)(v7 + 132) = v6;
  uint64_t v9 = nullsub_1(*(void *)(a2 + 160));
  int v11 = *(_DWORD *)(v7 + 40);
  *(void *)(v7 + 120) = v9;
  *(_DWORD *)(v7 + 40) = v11 | 0xC;
  uint64_t v12 = *(void *)(v7 + 112);
  if (!v12)
  {
    uint64_t v13 = *(void *)(v7 + 8);
    uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
    if (v13) {
      uint64_t v14 = (void *)*v14;
    }
    uint64_t v12 = sub_15C1918((uint64_t)v14);
    *(void *)(v7 + 112) = v12;
  }
  sub_E112BC((_DWORD *)a2, v12, v10);
  uint64_t v15 = *(void *)(a2 + 176);
  if (*(void *)(a2 + 168) != v15)
  {
    uint64_t v16 = *(void *)(v15 - 8);
    *(_DWORD *)(v7 + 40) |= 0x10u;
    *(_DWORD *)(v7 + 128) = v16;
  }
  uint64_t v17 = *(unsigned __int8 *)(a2 + 87);
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *(void *)(a2 + 72);
  }
  if (v17)
  {
    *(_DWORD *)(v7 + 40) |= 1u;
    uint64_t v18 = *(void *)(v7 + 8);
    int v19 = (uint64_t *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    if (v18) {
      int v19 = (uint64_t *)*v19;
    }
    sub_1881DF4((std::string **)(v7 + 96), (long long *)(a2 + 64), v19);
  }
  if (*(void *)(a2 + 40) != *(void *)(a2 + 48))
  {
    *(_DWORD *)(v7 + 40) |= 2u;
    uint64_t v20 = *(void *)(v7 + 8);
    uint64_t v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
    if (v20) {
      uint64_t v21 = (uint64_t *)*v21;
    }
    sub_1881DF4((std::string **)(v7 + 104), (long long *)(a2 + 88), v21);
  }
  uint64_t v22 = *(_DWORD **)(a2 + 112);
  for (i = *(_DWORD **)(a2 + 120); v22 != i; uint64_t v22 = (_DWORD *)v31 + 6)
  {
    uint64_t v24 = *(_DWORD **)(v7 + 64);
    if (v24 && (uint64_t v25 = *(int *)(v7 + 56), (int)v25 < *v24))
    {
      *(_DWORD *)(v7 + 56) = v25 + 1;
      uint64_t v26 = *(void *)&v24[2 * v25 + 2];
    }
    else
    {
      uint64_t v27 = sub_1332050(*(void *)(v7 + 48));
      uint64_t v26 = sub_188CDC8(v7 + 48, v27);
    }
    int v28 = *(_DWORD *)(v26 + 16);
    *(_DWORD *)(v26 + 40) = *v22;
    *(_DWORD *)(v26 + 16) = v28 | 5;
    uint64_t v29 = *(void *)(v26 + 8);
    uint64_t v30 = (uint64_t *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
    if (v29) {
      uint64_t v30 = (uint64_t *)*v30;
    }
    uint64_t v31 = (long long *)(v22 + 10);
    sub_1881DF4((std::string **)(v26 + 24), v31, v30);
    *(_DWORD *)(v26 + 16) |= 2u;
    uint64_t v32 = *(void *)(v26 + 8);
    uint64_t v33 = (uint64_t *)(v32 & 0xFFFFFFFFFFFFFFFCLL);
    if (v32) {
      uint64_t v33 = (uint64_t *)*v33;
    }
    sub_1881DF4((std::string **)(v26 + 32), v31 - 2, v33);
  }
  uint64_t v34 = *(_DWORD **)(a2 + 136);
  for (j = *(_DWORD **)(a2 + 144); v34 != j; uint64_t v34 = (_DWORD *)v43 + 6)
  {
    while (1)
    {
      int v36 = *(_DWORD **)(v7 + 88);
      if (v36 && (uint64_t v37 = *(int *)(v7 + 80), (int)v37 < *v36))
      {
        *(_DWORD *)(v7 + 80) = v37 + 1;
        uint64_t v38 = *(void *)&v36[2 * v37 + 2];
      }
      else
      {
        uint64_t v39 = sub_1332050(*(void *)(v7 + 72));
        uint64_t v38 = sub_188CDC8(v7 + 72, v39);
      }
      int v40 = *(_DWORD *)(v38 + 16);
      *(_DWORD *)(v38 + 40) = *v34;
      *(_DWORD *)(v38 + 16) = v40 | 5;
      uint64_t v41 = *(void *)(v38 + 8);
      char v42 = (uint64_t *)(v41 & 0xFFFFFFFFFFFFFFFCLL);
      if (v41) {
        char v42 = (uint64_t *)*v42;
      }
      uint64_t v43 = (long long *)(v34 + 10);
      sub_1881DF4((std::string **)(v38 + 24), v43, v42);
      *(_DWORD *)(v38 + 16) |= 2u;
      uint64_t v44 = *(void *)(v38 + 8);
      uint64_t v45 = (uint64_t *)(v44 & 0xFFFFFFFFFFFFFFFCLL);
      if (v44) {
        break;
      }
      sub_1881DF4((std::string **)(v38 + 32), v43 - 2, v45);
      uint64_t v34 = (_DWORD *)v43 + 6;
      if (v34 == j) {
        return;
      }
    }
    sub_1881DF4((std::string **)(v38 + 32), v43 - 2, (uint64_t *)*v45);
  }
}

void sub_E67918()
{
}

void sub_E67A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1108FEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E67A20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = *(_DWORD **)(a3 + 320);
  if (v5 && (uint64_t v6 = *(int *)(a3 + 312), (int)v6 < *v5))
  {
    *(_DWORD *)(a3 + 312) = v6 + 1;
    uint64_t v7 = *(void *)&v5[2 * v6 + 2];
  }
  else
  {
    uint64_t v8 = sub_1332450(*(void *)(a3 + 304));
    uint64_t v7 = sub_188CDC8(a3 + 304, v8);
  }
  uint64_t v9 = *(long long **)a2;
  *(_DWORD *)(v7 + 40) |= 1u;
  double v10 = (std::string **)(v7 + 64);
  uint64_t v11 = *(void *)(v7 + 8);
  uint64_t v12 = (uint64_t **)(v11 & 0xFFFFFFFFFFFFFFFCLL);
  if (v11)
  {
    sub_1881DF4(v10, v9, *v12);
    uint64_t v13 = *(int **)(a2 + 168);
    uint64_t v14 = *(int **)(a2 + 176);
    if (v13 == v14) {
      goto LABEL_11;
    }
  }
  else
  {
    sub_1881DF4(v10, v9, (uint64_t *)v12);
    uint64_t v13 = *(int **)(a2 + 168);
    uint64_t v14 = *(int **)(a2 + 176);
    if (v13 == v14) {
      goto LABEL_11;
    }
  }
  uint64_t v15 = (unsigned int *)(v7 + 48);
  unsigned int v16 = *(_DWORD *)(v7 + 48);
  do
  {
    while (1)
    {
      int v17 = *v13;
      if (v16 == *(_DWORD *)(v7 + 52)) {
        break;
      }
      *(_DWORD *)(*(void *)(v7 + 56) + 4 * v16++) = v17;
      *uint64_t v15 = v16;
      v13 += 200;
      if (v13 == v14) {
        goto LABEL_11;
      }
    }
    sub_188C80C((unsigned int *)(v7 + 48), v16 + 1);
    *(_DWORD *)(*(void *)(v7 + 56) + 4 * v16++) = v17;
    *uint64_t v15 = v16;
    v13 += 200;
  }
  while (v13 != v14);
LABEL_11:
  int v18 = *(_DWORD *)(a3 + 312) - 1;
  *(_DWORD *)(v7 + 40) |= 2u;
  *(_DWORD *)(v7 + 72) = v18;
}

void sub_E67B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(_DWORD **)(a2 + 64);
  uint64_t v4 = *(_DWORD **)(a2 + 72);
  if (v3 != v4)
  {
    uint64_t v6 = (uint64_t *)(a3 + 48);
    do
    {
      while (1)
      {
        uint64_t v7 = *(_DWORD **)(a3 + 64);
        if (v7 && (uint64_t v8 = *(int *)(a3 + 56), (int)v8 < *v7))
        {
          *(_DWORD *)(a3 + 56) = v8 + 1;
          uint64_t v9 = *(void *)&v7[2 * v8 + 2];
        }
        else
        {
          uint64_t v10 = sub_1332050(*v6);
          uint64_t v9 = sub_188CDC8((uint64_t)v6, v10);
        }
        int v11 = *(_DWORD *)(v9 + 16);
        *(_DWORD *)(v9 + 40) = *v3;
        *(_DWORD *)(v9 + 16) = v11 | 5;
        uint64_t v12 = *(void *)(v9 + 8);
        uint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12) {
          uint64_t v13 = (uint64_t *)*v13;
        }
        uint64_t v14 = (long long *)(v3 + 10);
        sub_1881DF4((std::string **)(v9 + 24), v14, v13);
        *(_DWORD *)(v9 + 16) |= 2u;
        uint64_t v15 = *(void *)(v9 + 8);
        unsigned int v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
        if (v15) {
          break;
        }
        sub_1881DF4((std::string **)(v9 + 32), v14 - 2, v16);
        uint64_t v3 = (_DWORD *)v14 + 6;
        if (v3 == v4) {
          return;
        }
      }
      sub_1881DF4((std::string **)(v9 + 32), v14 - 2, (uint64_t *)*v16);
      uint64_t v3 = (_DWORD *)v14 + 6;
    }
    while (v3 != v4);
  }
}

std::string *sub_E67C78(std::string *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (LODWORD(result->__r_.__value_.__l.__data_) != 0x7FFFFFFF)
  {
    std::string::size_type v4 = result[1].__r_.__value_.__s.__data_[7];
    if ((v4 & 0x80u) != 0) {
      std::string::size_type v4 = result->__r_.__value_.__r.__words[2];
    }
    if (v4)
    {
      *(_DWORD *)(a2 + 40) |= 1u;
      double v5 = *(void **)(a2 + 88);
      if (!v5)
      {
        uint64_t v6 = *(void *)(a2 + 8);
        uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
        if (v6) {
          uint64_t v7 = (void *)*v7;
        }
        double v5 = sub_134E5B0((uint64_t)v7);
        *(void *)(a2 + 88) = v5;
      }
      int v8 = *((_DWORD *)v5 + 10);
      *((_DWORD *)v5 + 14) = v3->__r_.__value_.__l.__data_;
      *((_DWORD *)v5 + 10) = v8 | 3;
      uint64_t v9 = v5[1];
      uint64_t v10 = (uint64_t *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (v9) {
        uint64_t v10 = (uint64_t *)*v10;
      }
      double result = sub_1881DF4((std::string **)v5 + 6, (long long *)&v3->__r_.__value_.__r.__words[1], v10);
      int v11 = v3[1].__r_.__value_.__r.__words[1];
      *((_DWORD *)v5 + 10) |= 4u;
      *((_DWORD *)v5 + 15) = v11;
    }
  }
  int v12 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 104) = HIDWORD(v3[1].__r_.__value_.__r.__words[2]);
  *(unsigned char *)(a2 + 100) = v3[3].__r_.__value_.__s.__data_[0];
  BOOL v13 = v3[1].__r_.__value_.__s.__data_[16] == 1;
  *(_DWORD *)(a2 + 40) = v12 | 0xE;
  *(_DWORD *)(a2 + 96) = v13;
  return result;
}

char *sub_E67D74(void **a1, unsigned char *a2, void *a3)
{
  unint64_t v6 = (unint64_t)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (unsigned char *)*a1;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)uint64_t v9 = *a3;
      a1[1] = v9 + 8;
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    BOOL v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      int v19 = a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = (unint64_t)a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        int v19 = a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        int v19 = a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          BOOL v13 = (uint64_t *)((char *)v13 + v21);
          int v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          uint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v55 = *v13++;
        *v19++ = v55;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)uint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((unsigned char *)v6 == a2) {
      unint64_t v52 = 1;
    }
    else {
      unint64_t v52 = v7 >> 2;
    }
    if (v52 >> 61) {
      sub_188D718();
    }
    int v53 = (char *)operator new(8 * v52);
    uint64_t v31 = &v53[8 * (v52 >> 2)];
    uint64_t v32 = &v53[8 * v52];
    if (v30)
    {
      unint64_t v54 = &v53[8 * v52];
      operator delete(v30);
      uint64_t v32 = v54;
      uint64_t v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      int v35 = v31 + 8;
      int v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  int v35 = v31 + 8;
  int v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    uint64_t v39 = v9;
    int v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    uint64_t v39 = v9;
    int v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v39 = &v9[-v41];
    int v36 = &v31[-v41];
    char v42 = v31 - 16;
    uint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)char v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
    uint64_t v34 = (char *)*a1;
  }
  *a1 = v36;
  a1[1] = &v35[v48];
  a1[2] = v32;
  if (v34) {
    operator delete(v34);
  }
  return v31;
}

void sub_E680CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_E680E4(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x8AB355E008AB4) {
      sub_2E00();
    }
    unint64_t v6 = (char *)operator new(7560 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    uint64_t v8 = 7560 * a3;
    a1[2] = &v6[v8];
    do
    {
      sub_7A1FB0((uint64_t)&v6[v7], a2 + v7);
      v7 += 7560;
    }
    while (v8 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_E68198(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_574D4C(v4 - 7560);
      while ((void *)v4 != v3);
      unint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_E68208(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_E683B8((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  int64_t v11 = *v10;
  if (*v10)
  {
    char v12 = *(unsigned char *)(a2 + 23);
    if (v12 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    if (v12 >= 0) {
      unint64_t v14 = (unsigned __int8 *)a2;
    }
    else {
      unint64_t v14 = *(unsigned __int8 **)a2;
    }
    uint64_t v16 = a2 + 24;
    uint64_t v15 = *(void **)(a2 + 24);
    uint64_t v17 = *(void *)(v16 + 8) - (void)v15;
    do
    {
      unint64_t v18 = v11[1];
      if (v18 == v6)
      {
        uint64_t v19 = *((unsigned __int8 *)v11 + 39);
        if ((v19 & 0x80u) == 0) {
          uint64_t v20 = *((unsigned __int8 *)v11 + 39);
        }
        else {
          uint64_t v20 = v11[3];
        }
        if (v20 != v13) {
          goto LABEL_17;
        }
        uint64_t v21 = (const void **)(v11 + 2);
        if ((v19 & 0x80) != 0)
        {
          if (memcmp(*v21, v14, v11[3])) {
            goto LABEL_17;
          }
        }
        else if (*((unsigned char *)v11 + 39))
        {
          uint64_t v22 = v14;
          while (*(unsigned __int8 *)v21 == *v22)
          {
            uint64_t v21 = (const void **)((char *)v21 + 1);
            ++v22;
            if (!--v19) {
              goto LABEL_33;
            }
          }
          goto LABEL_17;
        }
LABEL_33:
        uint64_t v24 = (char *)v11[5];
        uint64_t v23 = (char *)v11[6];
        if (v23 - v24 == v17)
        {
          if (v24 == v23) {
            return v11;
          }
          for (uint64_t i = v15; *(void *)v24 == *i; ++i)
          {
            v24 += 8;
            if (v24 == v23) {
              return v11;
            }
          }
        }
      }
      else
      {
        if (v8 <= 1)
        {
          v18 &= *(void *)&v5 - 1;
        }
        else if (v18 >= *(void *)&v5)
        {
          v18 %= *(void *)&v5;
        }
        if (v18 != v9) {
          return 0;
        }
      }
LABEL_17:
      int64_t v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t sub_E683B8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v11 = *(void *)(a2 + 16);
  }
  if (v11 >= 0) {
    uint64_t v3 = (uint64_t *)__p;
  }
  else {
    uint64_t v3 = (uint64_t *)__p[0];
  }
  if (v11 >= 0) {
    unint64_t v4 = HIBYTE(v11);
  }
  else {
    unint64_t v4 = (unint64_t)__p[1];
  }
  unint64_t v5 = (sub_B128((uint64_t)&v12, v3, v4) + 0x388152A534) ^ 0xDEADBEEF;
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v6 = *(uint64_t **)(a2 + 24);
  for (uint64_t i = *(uint64_t **)(a2 + 32); v6 != i; v5 ^= (v5 << 6) + (v5 >> 2) + 2654435769u + v8)
    uint64_t v8 = *v6++;
  return v5;
}

void *sub_E68494(uint64_t a1, uint64_t a2, long long *a3, void *a4)
{
  unint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = sub_E683B8(a1 + 24, a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(void **)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = (void *)*v15;
      if (*v15)
      {
        uint64_t v51 = a3;
        unint64_t v52 = a4;
        unint64_t v17 = v12 - 1;
        char v18 = *(unsigned char *)(a2 + 23);
        if (v18 >= 0) {
          uint64_t v19 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v19 = *(void *)(a2 + 8);
        }
        if (v18 >= 0) {
          uint64_t v20 = (unsigned __int8 *)a2;
        }
        else {
          uint64_t v20 = *(unsigned __int8 **)a2;
        }
        int v53 = *(void **)(a2 + 24);
        unint64_t v54 = v10;
        uint64_t v21 = *(void *)(a2 + 32) - (void)v53;
        while (1)
        {
          unint64_t v22 = v16[1];
          if (v22 == v11)
          {
            uint64_t v23 = *((unsigned __int8 *)v16 + 39);
            if ((v23 & 0x80u) == 0) {
              uint64_t v24 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v24 = v16[3];
            }
            if (v24 == v19)
            {
              long long v25 = (const void **)(v16 + 2);
              if ((v23 & 0x80) != 0)
              {
                unint64_t v27 = v17;
                uint64_t v28 = v9;
                uint64_t v29 = v21;
                unint64_t v30 = v4;
                unint64_t v31 = v14;
                int v32 = memcmp(*v25, v20, v16[3]);
                unint64_t v14 = v31;
                unint64_t v4 = v30;
                unint64_t v11 = v54;
                uint64_t v21 = v29;
                unint64_t v9 = v28;
                unint64_t v17 = v27;
                if (!v32)
                {
LABEL_34:
                  uint64_t v34 = (char *)v16[5];
                  unint64_t v33 = (char *)v16[6];
                  if (v33 - v34 == v21)
                  {
                    if (v34 == v33) {
                      return v16;
                    }
                    for (uint64_t i = v53; *(void *)v34 == *i; ++i)
                    {
                      v34 += 8;
                      if (v34 == v33) {
                        return v16;
                      }
                    }
                  }
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  goto LABEL_34;
                }
                unint64_t v26 = v20;
                while (*(unsigned __int8 *)v25 == *v26)
                {
                  long long v25 = (const void **)((char *)v25 + 1);
                  ++v26;
                  if (!--v23) {
                    goto LABEL_34;
                  }
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v22 &= v17;
            }
            else if (v22 >= v12)
            {
              v22 %= v12;
            }
            if (v22 != v4)
            {
LABEL_40:
              a3 = v51;
              a4 = v52;
              break;
            }
          }
          uint64_t v16 = (void *)*v16;
          if (!v16) {
            goto LABEL_40;
          }
        }
      }
    }
  }
  uint64_t v55 = operator new(0x48uLL);
  *uint64_t v55 = 0;
  v55[1] = v11;
  sub_E688E0(v55 + 2, a3);
  v55[8] = *a4;
  float v36 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v37 = *(float *)(a1 + 32);
  if (!v12 || (float)(v37 * (float)v12) < v36)
  {
    BOOL v40 = 1;
    if (v12 >= 3) {
      BOOL v40 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v41 = v40 | (2 * v12);
    unint64_t v42 = vcvtps_u32_f32(v36 / v37);
    if (v41 <= v42) {
      size_t prime = v42;
    }
    else {
      size_t prime = v41;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v44 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v44) {
      goto LABEL_55;
    }
    if (prime < *(void *)&v44)
    {
      unint64_t v45 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v44 < 3uLL || (uint8x8_t v46 = (uint8x8_t)vcnt_s8(v44), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
      {
        unint64_t v45 = std::__next_prime(v45);
      }
      else
      {
        uint64_t v47 = 1 << -(char)__clz(v45 - 1);
        if (v45 >= 2) {
          unint64_t v45 = v47;
        }
      }
      if (prime <= v45) {
        size_t prime = v45;
      }
      if (prime < *(void *)&v44) {
LABEL_55:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v48 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        unint64_t v4 = v11 % v12;
        unint64_t v38 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        uint64_t v39 = v55;
        if (v38) {
          goto LABEL_44;
        }
      }
      else
      {
        unint64_t v4 = v11;
        unint64_t v38 = *(void **)(*(void *)a1 + 8 * v11);
        uint64_t v39 = v55;
        if (v38) {
          goto LABEL_44;
        }
      }
    }
    else
    {
      unint64_t v4 = v48 & v11;
      unint64_t v38 = *(void **)(*(void *)a1 + 8 * (v48 & v11));
      uint64_t v39 = v55;
      if (v38) {
        goto LABEL_44;
      }
    }
LABEL_68:
    *uint64_t v39 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v55;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v55)
    {
      unint64_t v49 = *(void *)(*v55 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v49 >= v12) {
          v49 %= v12;
        }
      }
      else
      {
        v49 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v49) = v55;
    }
    goto LABEL_79;
  }
  unint64_t v38 = *(void **)(*(void *)a1 + 8 * v4);
  uint64_t v39 = v55;
  if (!v38) {
    goto LABEL_68;
  }
LABEL_44:
  *uint64_t v39 = *v38;
  *unint64_t v38 = v55;
LABEL_79:
  uint64_t v16 = v55;
  ++*v9;
  return v16;
}

void sub_E688B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2AC37C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E688CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2AC37C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_E688E0(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_4200(__dst, *(void **)a2, *((void *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    unint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    unint64_t v9 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v9 - v6;
    if (v9 == v6) {
      return __dst;
    }
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    unint64_t v6 = (unsigned char *)*((void *)a2 + 3);
    unint64_t v5 = (unsigned char *)*((void *)a2 + 4);
    int64_t v7 = v5 - v6;
    if (v5 == v6) {
      return __dst;
    }
  }
  if (v7 < 0) {
    sub_2E00();
  }
  unint64_t v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  unint64_t v11 = &v10[8 * (v7 >> 3)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_E689B0(_Unwind_Exception *a1)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_20A6E54((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_E689D4(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0) {
      return a1;
    }
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

double sub_E68A30()
{
  byte_25FBE87 = 1;
  word_25FBE70 = 65;
  byte_25FBE9F = 1;
  word_25FBE88 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25FBF30 = 0u;
  *(_OWORD *)&qword_25FBF40 = 0u;
  dword_25FBF50 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25FBF30, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25FBF30, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25FBF30, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25FBF30, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25FBEB7 = 8;
  strcpy((char *)&qword_25FBEA0, "any_mode");
  byte_25FBECF = 7;
  strcpy((char *)&dword_25FBEB8, "cycling");
  byte_25FBEE7 = 7;
  strcpy((char *)&dword_25FBED0, "driving");
  byte_25FBEFF = 7;
  strcpy((char *)&dword_25FBEE8, "walking");
  qword_25FBF08 = 0;
  qword_25FBF10 = 0;
  qword_25FBF00 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25FBF00 = (uint64_t)v0;
  qword_25FBF08 = (uint64_t)(v0 + 9);
  qword_25FBF10 = (uint64_t)(v0 + 9);
  qword_25FBF18 = 0;
  qword_25FBF20 = 0;
  unk_25FBF28 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25FBF20 = (uint64_t)(v1 + 9);
  unk_25FBF28 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25FBF18 = (uint64_t)v1;
  return result;
}

void sub_E68CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25FBF40) {
    sub_20B0E90((void **)qword_25FBF40);
  }
  float v37 = (void *)xmmword_25FBF30;
  *(void *)&xmmword_25FBF30 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_E68D98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 1064);
  uint64_t i = *(void *)(a1 + 1072);
  if (v2 == i) {
    return;
  }
  *(_DWORD *)(a2 + 40) |= 0x200u;
  uint64_t v5 = *(void *)(a2 + 272);
  if (v5)
  {
    if (v2 == i) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  int v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
  if (v7) {
    int v8 = (void *)*v8;
  }
  uint64_t v5 = sub_13D8978((uint64_t)v8);
  *(void *)(a2 + 272) = v5;
  uint64_t v2 = *(void *)(a1 + 1064);
  for (uint64_t i = *(void *)(a1 + 1072); v2 != i; v2 += 496)
  {
LABEL_10:
    *(_OWORD *)long long __p = 0u;
    *(_OWORD *)unint64_t v17 = 0u;
    int v18 = 1065353216;
    unint64_t v9 = *(_DWORD **)(v5 + 88);
    if (v9 && (uint64_t v10 = *(int *)(v5 + 80), (int)v10 < *v9))
    {
      *(_DWORD *)(v5 + 80) = v10 + 1;
      uint64_t v11 = *(void *)&v9[2 * v10 + 2];
    }
    else
    {
      uint64_t v12 = sub_13D88C0(*(void *)(v5 + 72));
      uint64_t v11 = sub_188CDC8(v5 + 72, v12);
    }
    sub_E11C8C(v2, __p, v11);
    char v13 = (void **)v17[0];
    if (v17[0])
    {
      do
      {
        uint64_t v15 = (void **)*v13;
        if (*((char *)v13 + 39) < 0) {
          operator delete(v13[2]);
        }
        operator delete(v13);
        char v13 = v15;
      }
      while (v15);
    }
    int v14 = __p[0];
    __p[0] = 0;
    if (v14) {
      operator delete(v14);
    }
  }
}

void sub_E68EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E68F08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 1064);
  uint64_t i = *(void *)(a1 + 1072);
  if (v2 == i) {
    return;
  }
  *(_DWORD *)(a2 + 40) |= 0x10u;
  uint64_t v5 = *(void *)(a2 + 192);
  if (v5)
  {
    if (v2 == i) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  int v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
  if (v7) {
    int v8 = (void *)*v8;
  }
  uint64_t v5 = sub_13D8978((uint64_t)v8);
  *(void *)(a2 + 192) = v5;
  uint64_t v2 = *(void *)(a1 + 1064);
  for (uint64_t i = *(void *)(a1 + 1072); v2 != i; v2 += 496)
  {
LABEL_10:
    *(_OWORD *)long long __p = 0u;
    *(_OWORD *)unint64_t v17 = 0u;
    int v18 = 1065353216;
    unint64_t v9 = *(_DWORD **)(v5 + 88);
    if (v9 && (uint64_t v10 = *(int *)(v5 + 80), (int)v10 < *v9))
    {
      *(_DWORD *)(v5 + 80) = v10 + 1;
      uint64_t v11 = *(void *)&v9[2 * v10 + 2];
    }
    else
    {
      uint64_t v12 = sub_13D88C0(*(void *)(v5 + 72));
      uint64_t v11 = sub_188CDC8(v5 + 72, v12);
    }
    sub_E11C8C(v2, __p, v11);
    char v13 = (void **)v17[0];
    if (v17[0])
    {
      do
      {
        uint64_t v15 = (void **)*v13;
        if (*((char *)v13 + 39) < 0) {
          operator delete(v13[2]);
        }
        operator delete(v13);
        char v13 = v15;
      }
      while (v15);
    }
    int v14 = __p[0];
    __p[0] = 0;
    if (v14) {
      operator delete(v14);
    }
  }
}

void sub_E69064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_E69078(void *result, uint64_t a2)
{
  if (*result != result[1])
  {
    uint64_t v3 = result;
    *(_DWORD *)(a2 + 40) |= 4u;
    char v4 = *(void **)(a2 + 88);
    if (v4)
    {
    }
    else
    {
      uint64_t v5 = *(void *)(a2 + 8);
      unint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
      if (v5) {
        unint64_t v6 = (void *)*v6;
      }
      char v4 = sub_1478C60((uint64_t)v6);
      *(void *)(a2 + 88) = v4;
      double result = v3;
    }
    return (void *)sub_3E9CB0((uint64_t)result, (uint64_t)v4);
  }
  return result;
}

void *sub_E6911C(void *result, uint64_t a2)
{
  if (*result != result[1])
  {
    uint64_t v3 = result;
    *(_DWORD *)(a2 + 40) |= 8u;
    char v4 = *(void **)(a2 + 96);
    if (v4)
    {
    }
    else
    {
      uint64_t v5 = *(void *)(a2 + 8);
      unint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
      if (v5) {
        unint64_t v6 = (void *)*v6;
      }
      char v4 = sub_1478C60((uint64_t)v6);
      *(void *)(a2 + 96) = v4;
      double result = v3;
    }
    return (void *)sub_3E9CB0((uint64_t)result, (uint64_t)v4);
  }
  return result;
}

void sub_E691C0()
{
}

void sub_E6932C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1106CAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E69340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1108FEC(v8);
  sub_1106CAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E6935C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1106CAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E69370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1106CAC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E69384(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = nullsub_1(*(void *)a1);
  int v9 = *(_DWORD *)(a4 + 40);
  *(void *)(a4 + 128) = v8;
  *(unsigned char *)(a4 + 156) = *(unsigned char *)(a1 + 448);
  BOOL v10 = *(unsigned __int8 *)(a1 + 400) == 1;
  int v11 = v9 | 0x2180;
  *(_DWORD *)(a4 + 40) = v9 | 0x2180;
  *(_DWORD *)(a4 + 136) = v10;
  int v12 = *(_DWORD *)(a1 + 412);
  if (v12 == 0x7FFFFFFF)
  {
    int v13 = *(_DWORD *)(a1 + 404);
    if (v13 == 0x7FFFFFFF) {
      goto LABEL_3;
    }
  }
  else
  {
    int v11 = v9 | 0x2980;
    *(_DWORD *)(a4 + 40) = v9 | 0x2980;
    *(_DWORD *)(a4 + 148) = v12 - 978307200;
    int v13 = *(_DWORD *)(a1 + 404);
    if (v13 == 0x7FFFFFFF)
    {
LABEL_3:
      int v14 = *(_DWORD *)(a1 + 408);
      if (v14 == 0x7FFFFFFF) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  v11 |= 0x200u;
  *(_DWORD *)(a4 + 40) = v11;
  *(_DWORD *)(a4 + 140) = v13 - 978307200;
  int v14 = *(_DWORD *)(a1 + 408);
  if (v14 == 0x7FFFFFFF)
  {
LABEL_4:
    int v15 = *(_DWORD *)(a1 + 416);
    if (v15 == 0x7FFFFFFF) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_25:
  v11 |= 0x400u;
  *(_DWORD *)(a4 + 40) = v11;
  *(_DWORD *)(a4 + 144) = v14 - 978307200;
  int v15 = *(_DWORD *)(a1 + 416);
  if (v15 != 0x7FFFFFFF)
  {
LABEL_5:
    *(_DWORD *)(a4 + 40) = v11 | 0x1000;
    *(_DWORD *)(a4 + 152) = v15 - 978307200;
  }
LABEL_6:
  nullsub_1(&v40);
  uint64_t v16 = *(unsigned __int8 *)(a1 + 167);
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *(void *)(a1 + 152);
  }
  if (v16)
  {
    v36[0] = (void *)sub_1133328();
    if (sub_1132FF4(a1 + 176, (uint64_t)v36))
    {
      sub_997840(a1 + 144, a2, (uint64_t)v36);
      *(_DWORD *)(a4 + 40) |= 4u;
      uint64_t v17 = *(void *)(a4 + 8);
      int v18 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (v17) {
        int v18 = (uint64_t *)*v18;
      }
      sub_1881E08((uint64_t *)(a4 + 88), (long long *)v36, v18);
      if ((v39 & 0x80000000) == 0)
      {
        if ((v37 & 0x80000000) == 0) {
          goto LABEL_14;
        }
LABEL_28:
        operator delete(v36[0]);
        uint64_t v22 = *(unsigned __int8 *)(a1 + 39);
        if ((v22 & 0x80u) != 0) {
          uint64_t v22 = *(void *)(a1 + 24);
        }
        if (!v22) {
          goto LABEL_34;
        }
        goto LABEL_17;
      }
      operator delete(__p);
      if (v37 < 0) {
        goto LABEL_28;
      }
    }
  }
LABEL_14:
  uint64_t v19 = *(unsigned __int8 *)(a1 + 39);
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *(void *)(a1 + 24);
  }
  if (!v19) {
    goto LABEL_34;
  }
LABEL_17:
  v36[0] = (void *)sub_1133328();
  if (!sub_1132FF4(a1 + 48, (uint64_t)v36)) {
    goto LABEL_34;
  }
  sub_997840(a1 + 16, a2, (uint64_t)v36);
  *(_DWORD *)(a4 + 40) |= 1u;
  uint64_t v20 = *(void *)(a4 + 8);
  uint64_t v21 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
  if (v20) {
    uint64_t v21 = (uint64_t *)*v21;
  }
  sub_1881E08((uint64_t *)(a4 + 72), (long long *)v36, v21);
  if (v39 < 0)
  {
    operator delete(__p);
    if ((v37 & 0x80000000) == 0) {
      goto LABEL_34;
    }
  }
  else if ((v37 & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(v36[0]);
LABEL_34:
  uint64_t v23 = *(unsigned __int8 *)(a1 + 359);
  if ((v23 & 0x80u) != 0) {
    uint64_t v23 = *(void *)(a1 + 344);
  }
  if (v23)
  {
    v36[0] = (void *)sub_1133328();
    if (sub_1132FF4(a1 + 368, (uint64_t)v36))
    {
      sub_997840(a1 + 336, a2, (uint64_t)v36);
      *(_DWORD *)(a4 + 40) |= 0x20u;
      uint64_t v24 = *(void *)(a4 + 8);
      long long v25 = (uint64_t *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
      if (v24) {
        long long v25 = (uint64_t *)*v25;
      }
      sub_1881E08((uint64_t *)(a4 + 112), (long long *)v36, v25);
      if ((v39 & 0x80000000) == 0)
      {
        if ((v37 & 0x80000000) == 0) {
          goto LABEL_42;
        }
LABEL_52:
        operator delete(v36[0]);
        uint64_t v29 = *(unsigned __int8 *)(a1 + 231);
        if ((v29 & 0x80u) != 0) {
          uint64_t v29 = *(void *)(a1 + 216);
        }
        if (!v29) {
          goto LABEL_58;
        }
        goto LABEL_45;
      }
      operator delete(__p);
      if (v37 < 0) {
        goto LABEL_52;
      }
    }
  }
LABEL_42:
  uint64_t v26 = *(unsigned __int8 *)(a1 + 231);
  if ((v26 & 0x80u) != 0) {
    uint64_t v26 = *(void *)(a1 + 216);
  }
  if (!v26) {
    goto LABEL_58;
  }
LABEL_45:
  v36[0] = (void *)sub_1133328();
  if (!sub_1132FF4(a1 + 240, (uint64_t)v36)) {
    goto LABEL_58;
  }
  sub_997840(a1 + 208, a2, (uint64_t)v36);
  *(_DWORD *)(a4 + 40) |= 8u;
  uint64_t v27 = *(void *)(a4 + 8);
  uint64_t v28 = (uint64_t *)(v27 & 0xFFFFFFFFFFFFFFFCLL);
  if (v27) {
    uint64_t v28 = (uint64_t *)*v28;
  }
  sub_1881E08((uint64_t *)(a4 + 96), (long long *)v36, v28);
  if (v39 < 0)
  {
    operator delete(__p);
    if ((v37 & 0x80000000) == 0) {
      goto LABEL_58;
    }
  }
  else if ((v37 & 0x80000000) == 0)
  {
    goto LABEL_58;
  }
  operator delete(v36[0]);
LABEL_58:
  uint64_t v30 = *(unsigned __int8 *)(a1 + 103);
  if ((v30 & 0x80u) != 0) {
    uint64_t v30 = *(void *)(a1 + 88);
  }
  if (!v30) {
    goto LABEL_66;
  }
  v36[0] = (void *)sub_1133328();
  if (!sub_1132FF4(a1 + 112, (uint64_t)v36)) {
    goto LABEL_66;
  }
  sub_997840(a1 + 80, a2, (uint64_t)v36);
  *(_DWORD *)(a4 + 40) |= 2u;
  uint64_t v31 = *(void *)(a4 + 8);
  int v32 = (uint64_t *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
  if (v31) {
    int v32 = (uint64_t *)*v32;
  }
  sub_1881E08((uint64_t *)(a4 + 80), (long long *)v36, v32);
  if (v39 < 0)
  {
    operator delete(__p);
    if (v37 < 0) {
      goto LABEL_77;
    }
LABEL_66:
    if (!*(unsigned char *)(a1 + 448)) {
      goto LABEL_81;
    }
    goto LABEL_67;
  }
  if ((v37 & 0x80000000) == 0) {
    goto LABEL_66;
  }
LABEL_77:
  operator delete(v36[0]);
  if (!*(unsigned char *)(a1 + 448)) {
    goto LABEL_81;
  }
LABEL_67:
  uint64_t v33 = *(unsigned __int8 *)(a1 + 295);
  if ((v33 & 0x80u) != 0) {
    uint64_t v33 = *(void *)(a1 + 280);
  }
  if (v33)
  {
    v36[0] = (void *)sub_1133328();
    if (sub_1132FF4(a1 + 304, (uint64_t)v36))
    {
      sub_997840(a1 + 272, a2, (uint64_t)v36);
      *(_DWORD *)(a4 + 40) |= 0x10u;
      uint64_t v34 = *(void *)(a4 + 8);
      int v35 = (uint64_t *)(v34 & 0xFFFFFFFFFFFFFFFCLL);
      if (v34) {
        int v35 = (uint64_t *)*v35;
      }
      sub_1881E08((uint64_t *)(a4 + 104), (long long *)v36, v35);
      if (v39 < 0)
      {
        operator delete(__p);
        if (v37 < 0) {
LABEL_80:
        }
          operator delete(v36[0]);
      }
      else if (v37 < 0)
      {
        goto LABEL_80;
      }
    }
  }
LABEL_81:
  sub_E6993C((uint64_t *)(a1 + 424), a3, a4);
}

void sub_E698C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E698D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E698EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E69900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E69914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E69928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_E6993C(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 == v4) {
    return;
  }
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  uint64_t v7 = (uint64_t *)(a3 + 48);
  long long v61 = (uint64_t *)(a3 + 48);
  uint64_t v62 = a1[1];
  while (2)
  {
    switch(*(_DWORD *)(v3 + 8))
    {
      case 0:
        uint64_t v8 = sub_375500(v6);
        int v9 = (int *)sub_8ED928(v8, *(void *)v3, 0, "station");
        BOOL v10 = (unsigned __int16 *)((char *)v9 - *v9);
        if (*v10 < 5u) {
          goto LABEL_21;
        }
        goto LABEL_19;
      case 1:
        uint64_t v8 = sub_375500(v6);
        int v9 = (int *)sub_8ED3D4(v8, *(void *)v3, 0, "hall");
        BOOL v10 = (unsigned __int16 *)((char *)v9 - *v9);
        if (*v10 < 5u) {
          goto LABEL_21;
        }
        goto LABEL_19;
      case 2:
        uint64_t v8 = sub_375500(v6);
        int v9 = (int *)sub_498D5C(v8, *(void *)v3, 0, "stop");
        BOOL v10 = (unsigned __int16 *)((char *)v9 - *v9);
        if (*v10 < 5u) {
          goto LABEL_21;
        }
        goto LABEL_19;
      case 3:
        uint64_t v8 = sub_3757C8(v6);
        int v9 = (int *)sub_8F4388(v8, *(void *)v3, 0, "market");
        BOOL v10 = (unsigned __int16 *)((char *)v9 - *v9);
        if (*v10 < 5u) {
          goto LABEL_21;
        }
        goto LABEL_19;
      case 4:
        uint64_t v8 = sub_3757C8(v6);
        int v9 = (int *)sub_8EF9B8(v8, *(void *)v3, 0, "system");
        BOOL v10 = (unsigned __int16 *)((char *)v9 - *v9);
        if (*v10 < 5u) {
          goto LABEL_21;
        }
        goto LABEL_19;
      case 5:
        uint64_t v8 = sub_3755E4(v6);
        int v9 = (int *)sub_8DFD1C(v8, *(void *)v3, 0, "line");
        BOOL v10 = (unsigned __int16 *)((char *)v9 - *v9);
        if (*v10 < 5u) {
          goto LABEL_21;
        }
        goto LABEL_19;
      case 6:
        uint64_t v8 = sub_375500(v6);
        int v9 = (int *)sub_499804(v8, *(void *)v3, 0, "access point");
        BOOL v10 = (unsigned __int16 *)((char *)v9 - *v9);
        if (*v10 < 5u) {
          goto LABEL_21;
        }
LABEL_19:
        uint64_t v12 = v10[2];
        if (v12) {
          uint64_t v11 = *(void *)((char *)v9 + v12);
        }
        else {
LABEL_21:
        }
          uint64_t v11 = 0;
        int v13 = sub_398020(v8, 0);
        int v14 = &v13[-*(int *)v13];
        if (*(unsigned __int16 *)v14 >= 0xBu)
        {
          uint64_t v15 = *((unsigned __int16 *)v14 + 5);
          if (v15)
          {
            if (v13[v15]) {
              uint64_t v11 = nullsub_1(v11);
            }
          }
        }
LABEL_26:
        uint64_t v16 = *(_DWORD **)(v5 + 64);
        if (v16 && (uint64_t v17 = *(int *)(v5 + 56), (int)v17 < *v16))
        {
          *(_DWORD *)(v5 + 56) = v17 + 1;
          uint64_t v18 = *(void *)&v16[2 * v17 + 2];
        }
        else
        {
          uint64_t v19 = sub_133259C(*v7);
          uint64_t v18 = sub_188CDC8((uint64_t)v7, (uint64_t)v19);
        }
        uint64_t v20 = nullsub_1(v11);
        *(_DWORD *)(v18 + 40) |= 2u;
        *(void *)(v18 + 56) = v20;
        if (*(_DWORD *)(v3 + 8) != 5 || !*(unsigned char *)(v3 + 96) || *(void *)(v3 + 48) == *(void *)(v3 + 56)) {
          goto LABEL_3;
        }
        *(_OWORD *)unsigned int v67 = 0u;
        *(_OWORD *)long long __p = 0u;
        int v69 = 1065353216;
        sub_5DC3C((uint64_t)&v70, (uint64_t)v67, (void *)(v3 + 48));
        uint64_t v21 = *(void *)(v3 + 48);
        for (uint64_t i = *(void *)(v3 + 56); v21 != i; v21 += 16)
        {
          unint64_t v70 = *(char **)(v21 + 8);
          sub_E6C660((uint64_t)v67, &v70, &v70);
        }
        *(_DWORD *)(v18 + 40) |= 1u;
        uint64_t v23 = *(void *)(v18 + 48);
        if (!v23)
        {
          uint64_t v24 = *(void *)(v18 + 8);
          long long v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFFCLL);
          if (v24) {
            long long v25 = (void *)*v25;
          }
          uint64_t v23 = sub_1332508((uint64_t)v25);
          *(void *)(v18 + 48) = v23;
        }
        uint64_t v26 = sub_375500(v6);
        uint64_t v27 = __p[0];
        if (!__p[0]) {
          goto LABEL_82;
        }
        uint64_t v28 = v26;
        uint64_t v65 = v3;
        uint64_t v29 = (_DWORD *)(v23 + 16);
        uint64_t v66 = v26 + 16;
        break;
      default:
        uint64_t v11 = -1;
        goto LABEL_26;
    }
    do
    {
      while (1)
      {
        uint64_t v30 = (int *)sub_498D5C(v28, v27[2], 0, "stop");
        uint64_t v31 = (unsigned __int16 *)((char *)v30 - *v30);
        if (*v31 >= 5u && (uint64_t v32 = v31[2]) != 0) {
          uint64_t v33 = *(void *)((char *)v30 + v32);
        }
        else {
          uint64_t v33 = 0;
        }
        int v72 = 0;
        int v73 = 1;
        unint64_t v70 = (char *)&v72;
        *(void *)&long long v71 = &v73;
        unint64_t v34 = *(void *)(v28 + 3856) + 1;
        *(void *)(v28 + 3856) = v34;
        if (!*(void *)v28)
        {
LABEL_85:
          sub_2A54B4((int **)&v70);
LABEL_86:
          exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
          unint64_t v70 = (char *)operator new(0x48uLL);
          long long v71 = xmmword_20B9270;
          strcpy(v70, "Root quad node of transit network layer does not contain info object");
          int v60 = (void *)sub_2F404((uint64_t)exception, (long long *)&v70);
        }
        if (*(_DWORD *)(v28 + 592) == 1)
        {
          unsigned int v35 = 24;
          goto LABEL_55;
        }
        if (*(_DWORD *)(v28 + 616) == 1)
        {
          unsigned int v35 = 25;
          goto LABEL_55;
        }
        if (*(_DWORD *)(v28 + 640) == 1)
        {
          unsigned int v35 = 26;
          goto LABEL_55;
        }
        if (*(_DWORD *)(v28 + 664) == 1)
        {
          unsigned int v35 = 27;
LABEL_55:
          ++*(void *)(v28 + 3864);
          uint64_t v36 = v66 + 24 * v35;
          *(void *)(v36 + 8) = v34;
          char v37 = *(unsigned int **)(v36 + 16);
          if (!v37) {
            goto LABEL_85;
          }
          goto LABEL_56;
        }
        unint64_t v47 = *(void *)(v28 + 648);
        unint64_t v48 = *(void *)(v28 + 624);
        unint64_t v49 = *(void *)(v28 + 600);
        unint64_t v50 = *(void *)(v28 + 672);
        char v37 = (unsigned int *)sub_2AB884(*(void *)v28, 6, 1u, 1);
        if (v49 >= v34) {
          unint64_t v51 = v34;
        }
        else {
          unint64_t v51 = v49;
        }
        if (v49 >= v34) {
          int v52 = 0;
        }
        else {
          int v52 = 24;
        }
        if (v48 < v51)
        {
          unint64_t v51 = v48;
          int v52 = 25;
        }
        if (v47 < v51)
        {
          int v52 = 26;
          unint64_t v51 = v47;
        }
        BOOL v53 = v50 >= v51;
        unsigned int v54 = 27;
        if (v53) {
          unsigned int v54 = v52;
        }
        uint64_t v55 = v66 + 24 * v54;
        *(_DWORD *)uint64_t v55 = v73;
        *(void *)(v55 + 8) = *(void *)(v28 + 3856);
        *(void *)(v55 + 16) = v37;
        if (!v37) {
          goto LABEL_85;
        }
LABEL_56:
        unint64_t v38 = (int *)((char *)v37 + *v37);
        char v39 = (unsigned __int16 *)((char *)v38 - *v38);
        if (*v39 < 0xDu) {
          goto LABEL_86;
        }
        uint64_t v40 = v39[6];
        if (!v40) {
          goto LABEL_86;
        }
        unint64_t v41 = (int *)((char *)v38 + v40 + *(unsigned int *)((char *)v38 + v40));
        unint64_t v42 = (unsigned __int16 *)((char *)v41 - *v41);
        if (*v42 >= 0xBu)
        {
          uint64_t v43 = v42[5];
          if (v43)
          {
            if (*((unsigned char *)v41 + v43)) {
              uint64_t v33 = nullsub_1(v33);
            }
          }
        }
        uint64_t v44 = nullsub_1(v33);
        uint64_t v45 = v44;
        uint64_t v46 = *(unsigned int *)(v23 + 16);
        if (v46 == *(_DWORD *)(v23 + 20)) {
          break;
        }
        *(void *)(*(void *)(v23 + 24) + 8 * v46) = v44;
        *uint64_t v29 = v46 + 1;
        uint64_t v27 = (void *)*v27;
        if (!v27) {
          goto LABEL_80;
        }
      }
      sub_188CA54((unsigned int *)(v23 + 16), v46 + 1);
      *(void *)(*(void *)(v23 + 24) + 8 * v46) = v45;
      *uint64_t v29 = v46 + 1;
      uint64_t v27 = (void *)*v27;
    }
    while (v27);
LABEL_80:
    uint64_t v56 = __p[0];
    unint64_t v6 = a2;
    uint64_t v5 = a3;
    uint64_t v3 = v65;
    uint64_t v7 = v61;
    uint64_t v4 = v62;
    if (__p[0])
    {
      do
      {
        unint64_t v57 = (void *)*v56;
        operator delete(v56);
        uint64_t v56 = v57;
      }
      while (v57);
    }
LABEL_82:
    std::string v58 = v67[0];
    v67[0] = 0;
    if (v58) {
      operator delete(v58);
    }
LABEL_3:
    v3 += 104;
    if (v3 != v4) {
      continue;
    }
    break;
  }
}

void sub_E69FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void sub_E6A030(const std::string **a1, uint64_t a2)
{
  if (sub_45FB38(a1))
  {
    uint64_t v4 = a1 + 20;
    if (sub_45FB38(a1 + 20)) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 16) |= 2u;
    uint64_t v9 = *(void *)(a2 + 56);
    if (!v9)
    {
      uint64_t v10 = *(void *)(a2 + 8);
      uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if (v10) {
        uint64_t v11 = (void *)*v11;
      }
      sub_13D6A1C((uint64_t)v11);
      uint64_t v9 = v12;
      *(void *)(a2 + 56) = v12;
    }
    sub_5F4D30(a1, v9);
    uint64_t v4 = a1 + 20;
    if (sub_45FB38(a1 + 20))
    {
LABEL_3:
      uint64_t v5 = a1 + 40;
      if (sub_45FB38(a1 + 40)) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  *(_DWORD *)(a2 + 16) |= 1u;
  uint64_t v13 = *(void *)(a2 + 48);
  if (!v13)
  {
    uint64_t v14 = *(void *)(a2 + 8);
    uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14) {
      uint64_t v15 = (void *)*v15;
    }
    sub_13D6A1C((uint64_t)v15);
    uint64_t v13 = v16;
    *(void *)(a2 + 48) = v16;
  }
  sub_5F4D30(v4, v13);
  uint64_t v5 = a1 + 40;
  if (sub_45FB38(a1 + 40))
  {
LABEL_4:
    unint64_t v6 = a1 + 80;
    if (sub_45FB38(a1 + 80)) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_18:
  *(_DWORD *)(a2 + 16) |= 4u;
  uint64_t v17 = *(void *)(a2 + 64);
  if (!v17)
  {
    uint64_t v18 = *(void *)(a2 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFCLL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    sub_13D6A1C((uint64_t)v19);
    uint64_t v17 = v20;
    *(void *)(a2 + 64) = v20;
  }
  sub_5F4D30(v5, v17);
  unint64_t v6 = a1 + 80;
  if (sub_45FB38(a1 + 80))
  {
LABEL_5:
    uint64_t v7 = a1 + 100;
    if (sub_45FB38(a1 + 100)) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_23:
  *(_DWORD *)(a2 + 16) |= 0x20u;
  uint64_t v21 = *(void *)(a2 + 88);
  if (!v21)
  {
    uint64_t v22 = *(void *)(a2 + 8);
    uint64_t v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
    if (v22) {
      uint64_t v23 = (void *)*v23;
    }
    sub_13D6A1C((uint64_t)v23);
    uint64_t v21 = v24;
    *(void *)(a2 + 88) = v24;
  }
  sub_5F4D30(v6, v21);
  uint64_t v7 = a1 + 100;
  if (sub_45FB38(a1 + 100))
  {
LABEL_6:
    uint64_t v8 = a1 + 60;
    if (sub_45FB38(v8)) {
      return;
    }
    goto LABEL_33;
  }
LABEL_28:
  *(_DWORD *)(a2 + 16) |= 0x40u;
  uint64_t v25 = *(void *)(a2 + 96);
  if (!v25)
  {
    uint64_t v26 = *(void *)(a2 + 8);
    uint64_t v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if (v26) {
      uint64_t v27 = (void *)*v27;
    }
    sub_13D6A1C((uint64_t)v27);
    uint64_t v25 = v28;
    *(void *)(a2 + 96) = v28;
  }
  sub_5F4D30(v7, v25);
  uint64_t v8 = a1 + 60;
  if (!sub_45FB38(v8))
  {
LABEL_33:
    *(_DWORD *)(a2 + 16) |= 0x10u;
    uint64_t v29 = *(void *)(a2 + 80);
    if (v29)
    {
      uint64_t v30 = v8;
    }
    else
    {
      uint64_t v31 = *(void *)(a2 + 8);
      uint64_t v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
      if (v31) {
        uint64_t v32 = (void *)*v32;
      }
      sub_13D6A1C((uint64_t)v32);
      uint64_t v29 = v33;
      *(void *)(a2 + 80) = v33;
      uint64_t v30 = v8;
    }
    sub_5F4D30(v30, v29);
  }
}

void sub_E6A2AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 1064);
  uint64_t v3 = *(void *)(a1 + 1072);
  if (v2 == v3) {
    return;
  }
  unint64_t v6 = (uint64_t *)(a2 + 24);
  do
  {
    int v9 = *(_DWORD *)(v2 + 488);
    if (v9 == 4 || v9 == 1)
    {
      uint64_t v11 = *(_DWORD **)(a2 + 40);
      if (v11 && (uint64_t v12 = *(int *)(a2 + 32), (int)v12 < *v11))
      {
        *(_DWORD *)(a2 + 32) = v12 + 1;
        uint64_t v13 = *(void *)&v11[2 * v12 + 2];
        *(_DWORD *)(v13 + 16) |= 1u;
        uint64_t v8 = *(void *)(v13 + 24);
        if (!v8) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v14 = sub_134DD78(*v6);
        uint64_t v13 = sub_188CDC8((uint64_t)v6, (uint64_t)v14);
        *(_DWORD *)(v13 + 16) |= 1u;
        uint64_t v8 = *(void *)(v13 + 24);
        if (!v8)
        {
LABEL_16:
          uint64_t v15 = *(void *)(v13 + 8);
          uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
          if (v15) {
            uint64_t v16 = (void *)*v16;
          }
          sub_13D6A1C((uint64_t)v16);
          uint64_t v8 = v7;
          *(void *)(v13 + 24) = v7;
        }
      }
      sub_5F4D30((const std::string **)v2, v8);
    }
    v2 += 496;
  }
  while (v2 != v3);
  uint64_t v17 = *(void *)(a1 + 1064);
  uint64_t v18 = *(void *)(a1 + 1072);
  if (v17 != v18)
  {
    while (*(_DWORD *)(v17 + 488) != 4)
    {
      v17 += 496;
      if (v17 == v18) {
        return;
      }
    }
    if (v17 != v18)
    {
      *(_DWORD *)(a2 + 16) |= 8u;
      uint64_t v19 = *(void *)(a2 + 72);
      if (!v19)
      {
        uint64_t v20 = *(void *)(a2 + 8);
        uint64_t v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
        if (v20) {
          uint64_t v21 = (void *)*v21;
        }
        sub_13D6A1C((uint64_t)v21);
        uint64_t v19 = v22;
        *(void *)(a2 + 72) = v22;
      }
      sub_5F4D30((const std::string **)v17, v19);
    }
  }
}

void sub_E6A434(uint64_t a1, uint64_t a2)
{
  if (!sub_45FB38((void *)a1))
  {
    *(_DWORD *)(a2 + 16) |= 1u;
    uint64_t v4 = *(void *)(a2 + 24);
    if (!v4)
    {
      uint64_t v5 = *(void *)(a2 + 8);
      unint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
      if (v5) {
        unint64_t v6 = (void *)*v6;
      }
      sub_13D6A1C((uint64_t)v6);
      uint64_t v4 = v7;
      *(void *)(a2 + 24) = v7;
    }
    sub_5F4D30((const std::string **)a1, v4);
    if (*(unsigned char *)(a1 + 320))
    {
      *(_DWORD *)(a2 + 16) |= 4u;
      *(unsigned char *)(a2 + 40) = 1;
    }
  }
  uint64_t v8 = (const std::string **)(a1 + 160);
  if (!sub_45FB38(v8))
  {
    *(_DWORD *)(a2 + 16) |= 2u;
    uint64_t v9 = *(void *)(a2 + 32);
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      uint64_t v11 = *(void *)(a2 + 8);
      uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (void *)*v12;
      }
      sub_13D6A1C((uint64_t)v12);
      uint64_t v9 = v13;
      *(void *)(a2 + 32) = v13;
      uint64_t v10 = v8;
    }
    sub_5F4D30(v10, v9);
  }
}

void sub_E6A53C(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)(a1 + 32);
  if (!sub_45FB38(a1 + 32) || !sub_45FB38(a1 + 52))
  {
    *(_DWORD *)(a2 + 40) |= 2u;
    uint64_t v5 = *(void *)(a2 + 176);
    if (!v5)
    {
      uint64_t v6 = *(void *)(a2 + 8);
      uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
      if (v6) {
        uint64_t v7 = (void *)*v7;
      }
      uint64_t v5 = sub_13D6EDC((uint64_t)v7);
      *(void *)(a2 + 176) = v5;
    }
    sub_E6A434(v4, v5);
  }
  uint64_t v8 = (const std::string **)(a1 + 12);
  if (!sub_45FB38(v8))
  {
    *(_DWORD *)(a2 + 40) |= 1u;
    uint64_t v9 = *(void *)(a2 + 168);
    if (v9)
    {
      uint64_t v10 = v8;
    }
    else
    {
      uint64_t v11 = *(void *)(a2 + 8);
      uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (void *)*v12;
      }
      sub_13D6A1C((uint64_t)v12);
      uint64_t v9 = v13;
      *(void *)(a2 + 168) = v13;
      uint64_t v10 = v8;
    }
    sub_5F4D30(v10, v9);
  }
}

void sub_E6A64C(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)(a1 + 8)
    || *(void *)(a1 + 24) != *(void *)(a1 + 32)
    || *(void *)(a1 + 48) != *(void *)(a1 + 56)
    || *(void *)(a1 + 72) != *(void *)(a1 + 80)
    || !sub_45FB38((void *)(a1 + 96))
    || !sub_45FB38((void *)(a1 + 256))
    || !sub_45FB38((void *)(a1 + 416)))
  {
    *(_DWORD *)(a2 + 40) |= 2u;
    uint64_t v4 = *(void *)(a2 + 56);
    if (!v4)
    {
      uint64_t v5 = *(void *)(a2 + 8);
      uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
      if (v5) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v4 = sub_13D6F5C((uint64_t)v6);
      *(void *)(a2 + 56) = v4;
    }
    sub_E6A84C((const std::string ***)a1, v4);
    *(_DWORD *)(a2 + 40) |= 2u;
    uint64_t v7 = *(void *)(a2 + 56);
    if (!v7)
    {
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        uint64_t v9 = (void *)*v9;
      }
      uint64_t v7 = sub_13D6F5C((uint64_t)v9);
      *(void *)(a2 + 56) = v7;
    }
    sub_E6A53C((void *)a1, v7);
  }
  if (*(void *)(a1 + 584) != *(void *)(a1 + 592)
    || *(void *)(a1 + 608) != *(void *)(a1 + 616)
    || *(void *)(a1 + 632) != *(void *)(a1 + 640)
    || *(void *)(a1 + 656) != *(void *)(a1 + 664))
  {
    *(_DWORD *)(a2 + 40) |= 1u;
    uint64_t v10 = *(void *)(a2 + 48);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a2 + 8);
      uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (void *)*v12;
      }
      uint64_t v10 = sub_13D6FB8((uint64_t)v12);
      *(void *)(a2 + 48) = v10;
    }
    sub_E6AA70((const std::string ***)(a1 + 584), v10);
  }
  if (!sub_45FB38((void *)(a1 + 680)))
  {
    *(_DWORD *)(a2 + 40) |= 8u;
    uint64_t v13 = *(void *)(a2 + 72);
    if (v13)
    {
      sub_5F4D30((const std::string **)(a1 + 680), v13);
      int v14 = *(unsigned __int8 *)(a1 + 840);
      if (v14 == 1)
      {
LABEL_34:
        *(_DWORD *)(a2 + 40) |= 0x100u;
        *(_DWORD *)(a2 + 112) = v14;
        return;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(a2 + 8);
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
      sub_13D6A1C((uint64_t)v16);
      *(void *)(a2 + 72) = v17;
      sub_5F4D30((const std::string **)(a1 + 680), v17);
      int v14 = *(unsigned __int8 *)(a1 + 840);
      if (v14 == 1) {
        goto LABEL_34;
      }
    }
    if (v14 != 2) {
      return;
    }
    goto LABEL_34;
  }
}

void sub_E6A84C(const std::string ***a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    uint64_t v6 = (uint64_t *)(a2 + 72);
    do
    {
      while (1)
      {
        uint64_t v9 = *(_DWORD **)(a2 + 88);
        if (v9)
        {
          uint64_t v10 = *(int *)(a2 + 80);
          if ((int)v10 < *v9) {
            break;
          }
        }
        sub_13D6A1C(*v6);
        uint64_t v8 = sub_188CDC8(a2 + 72, v7);
        sub_5F4D30(v4, v8);
        v4 += 20;
        if (v4 == v5) {
          goto LABEL_7;
        }
      }
      *(_DWORD *)(a2 + 80) = v10 + 1;
      sub_5F4D30(v4, *(void *)&v9[2 * v10 + 2]);
      v4 += 20;
    }
    while (v4 != v5);
  }
LABEL_7:
  uint64_t v11 = a1[3];
  for (uint64_t i = a1[4]; v11 != i; v11 += 20)
  {
    while (1)
    {
      uint64_t v15 = *(_DWORD **)(a2 + 112);
      if (v15)
      {
        uint64_t v16 = *(int *)(a2 + 104);
        if ((int)v16 < *v15) {
          break;
        }
      }
      sub_13D6A1C(*(void *)(a2 + 96));
      uint64_t v14 = sub_188CDC8(a2 + 96, v13);
      sub_5F4D30(v11, v14);
      v11 += 20;
      if (v11 == i) {
        goto LABEL_13;
      }
    }
    *(_DWORD *)(a2 + 104) = v16 + 1;
    sub_5F4D30(v11, *(void *)&v15[2 * v16 + 2]);
  }
LABEL_13:
  uint64_t v17 = a1[6];
  for (uint64_t j = a1[7]; v17 != j; v17 += 20)
  {
    while (1)
    {
      uint64_t v21 = *(_DWORD **)(a2 + 64);
      if (v21)
      {
        uint64_t v22 = *(int *)(a2 + 56);
        if ((int)v22 < *v21) {
          break;
        }
      }
      sub_13D6A1C(*(void *)(a2 + 48));
      uint64_t v20 = sub_188CDC8(a2 + 48, v19);
      sub_5F4D30(v17, v20);
      v17 += 20;
      if (v17 == j) {
        goto LABEL_19;
      }
    }
    *(_DWORD *)(a2 + 56) = v22 + 1;
    sub_5F4D30(v17, *(void *)&v21[2 * v22 + 2]);
  }
LABEL_19:
  uint64_t v23 = a1[9];
  for (uint64_t k = a1[10]; v23 != k; v23 += 20)
  {
    while (1)
    {
      uint64_t v27 = *(_DWORD **)(a2 + 136);
      if (v27)
      {
        uint64_t v28 = *(int *)(a2 + 128);
        if ((int)v28 < *v27) {
          break;
        }
      }
      sub_13D6A1C(*(void *)(a2 + 120));
      uint64_t v26 = sub_188CDC8(a2 + 120, v25);
      sub_5F4D30(v23, v26);
      v23 += 20;
      if (v23 == k) {
        return;
      }
    }
    *(_DWORD *)(a2 + 128) = v28 + 1;
    sub_5F4D30(v23, *(void *)&v27[2 * v28 + 2]);
  }
}

void sub_E6AA70(const std::string ***a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    uint64_t v6 = (uint64_t *)(a2 + 64);
    do
    {
      while (1)
      {
        uint64_t v9 = *(_DWORD **)(a2 + 80);
        if (v9)
        {
          uint64_t v10 = *(int *)(a2 + 72);
          if ((int)v10 < *v9) {
            break;
          }
        }
        sub_13D6A1C(*v6);
        uint64_t v8 = sub_188CDC8(a2 + 64, v7);
        sub_5F4D30(v4, v8);
        v4 += 20;
        if (v4 == v5) {
          goto LABEL_7;
        }
      }
      *(_DWORD *)(a2 + 72) = v10 + 1;
      sub_5F4D30(v4, *(void *)&v9[2 * v10 + 2]);
      v4 += 20;
    }
    while (v4 != v5);
  }
LABEL_7:
  uint64_t v11 = a1[3];
  for (uint64_t i = a1[4]; v11 != i; v11 += 20)
  {
    while (1)
    {
      uint64_t v15 = *(_DWORD **)(a2 + 104);
      if (v15)
      {
        uint64_t v16 = *(int *)(a2 + 96);
        if ((int)v16 < *v15) {
          break;
        }
      }
      sub_13D6A1C(*(void *)(a2 + 88));
      uint64_t v14 = sub_188CDC8(a2 + 88, v13);
      sub_5F4D30(v11, v14);
      v11 += 20;
      if (v11 == i) {
        goto LABEL_13;
      }
    }
    *(_DWORD *)(a2 + 96) = v16 + 1;
    sub_5F4D30(v11, *(void *)&v15[2 * v16 + 2]);
  }
LABEL_13:
  uint64_t v17 = a1[6];
  for (uint64_t j = a1[7]; v17 != j; v17 += 20)
  {
    while (1)
    {
      uint64_t v21 = *(_DWORD **)(a2 + 56);
      if (v21)
      {
        uint64_t v22 = *(int *)(a2 + 48);
        if ((int)v22 < *v21) {
          break;
        }
      }
      sub_13D6A1C(*(void *)(a2 + 40));
      uint64_t v20 = sub_188CDC8(a2 + 40, v19);
      sub_5F4D30(v17, v20);
      v17 += 20;
      if (v17 == j) {
        goto LABEL_19;
      }
    }
    *(_DWORD *)(a2 + 48) = v22 + 1;
    sub_5F4D30(v17, *(void *)&v21[2 * v22 + 2]);
  }
LABEL_19:
  uint64_t v23 = a1[9];
  for (uint64_t k = a1[10]; v23 != k; v23 += 20)
  {
    while (1)
    {
      uint64_t v27 = *(_DWORD **)(a2 + 128);
      if (v27)
      {
        uint64_t v28 = *(int *)(a2 + 120);
        if ((int)v28 < *v27) {
          break;
        }
      }
      sub_13D6A1C(*(void *)(a2 + 112));
      uint64_t v26 = sub_188CDC8(a2 + 112, v25);
      sub_5F4D30(v23, v26);
      v23 += 20;
      if (v23 == k) {
        return;
      }
    }
    *(_DWORD *)(a2 + 120) = v28 + 1;
    sub_5F4D30(v23, *(void *)&v27[2 * v28 + 2]);
  }
}

uint64_t sub_E6AC94(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v6 = result;
    uint64_t v7 = (uint64_t *)(a3 + 16);
    do
    {
      uint64_t v10 = *(_DWORD **)(a3 + 32);
      if (v10 && (uint64_t v11 = *(int *)(a3 + 24), (int)v11 < *v10))
      {
        *(_DWORD *)(a3 + 24) = v11 + 1;
        uint64_t v12 = *(void *)&v10[2 * v11 + 2];
      }
      else
      {
        uint64_t v13 = sub_134E720(*v7);
        uint64_t v12 = sub_188CDC8((uint64_t)v7, v13);
      }
      uint64_t v14 = (int *)sub_369F8C(v6, *(void *)v3, 0, "trip");
      uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v15 >= 5u && (uint64_t v16 = v15[2]) != 0) {
        uint64_t v17 = *(void *)((char *)v14 + v16);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = sub_398020(v6, 0);
      uint64_t v19 = &v18[-*(int *)v18];
      if (*(unsigned __int16 *)v19 >= 0xBu)
      {
        uint64_t v20 = *((unsigned __int16 *)v19 + 5);
        if (v20)
        {
          if (v18[v20]) {
            uint64_t v17 = nullsub_1(v17);
          }
        }
      }
      double result = nullsub_1(v17);
      int v8 = *(_DWORD *)(v12 + 16);
      *(_DWORD *)(v12 + 16) = v8 | 1;
      *(void *)(v12 + 24) = result;
      int v9 = *(_DWORD *)(v3 + 8) - 978307200;
      *(_DWORD *)(v12 + 16) = v8 | 3;
      *(_DWORD *)(v12 + 32) = v9;
      v3 += 12;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_E6ADF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a3 + 16) |= 1u;
  uint64_t v5 = *(void **)(a3 + 24);
  if (!v5)
  {
    uint64_t v7 = *(void *)(a3 + 8);
    int v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
    if (v7) {
      int v8 = (void *)*v8;
    }
    uint64_t v5 = sub_134E83C((uint64_t)v8);
    *(void *)(a3 + 24) = v5;
  }
  int v9 = (int *)sub_369F8C(a1, *(void *)a2, 0, "trip");
  uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v10 >= 5u && (uint64_t v11 = v10[2]) != 0) {
    uint64_t v12 = *(void *)((char *)v9 + v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = sub_398020(a1, 0);
  uint64_t v14 = &v13[-*(int *)v13];
  if (*(unsigned __int16 *)v14 >= 0xBu)
  {
    uint64_t v15 = *((unsigned __int16 *)v14 + 5);
    if (v15)
    {
      if (v13[v15]) {
        uint64_t v12 = nullsub_1(v12);
      }
    }
  }
  uint64_t v16 = nullsub_1(v12);
  *((_DWORD *)v5 + 4) |= 2u;
  v5[4] = v16;
  uint64_t v17 = (int *)sub_369F8C(a1, *(void *)a2, 0, "trip");
  uint64_t v18 = (int *)sub_8DFD1C(a1, *(void *)((char *)v17 + *(unsigned __int16 *)((char *)v17 - *v17 + 6)), 0, "line");
  uint64_t v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 >= 5u && (uint64_t v20 = v19[2]) != 0) {
    uint64_t v21 = *(void *)((char *)v18 + v20);
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = sub_398020(a1, 0);
  uint64_t v23 = &v22[-*(int *)v22];
  if (*(unsigned __int16 *)v23 >= 0xBu)
  {
    uint64_t v24 = *((unsigned __int16 *)v23 + 5);
    if (v24)
    {
      if (v22[v24]) {
        uint64_t v21 = nullsub_1(v21);
      }
    }
  }
  uint64_t v25 = nullsub_1(v21);
  int v26 = *((_DWORD *)v5 + 4);
  *((_DWORD *)v5 + 4) = v26 | 4;
  v5[5] = v25;
  int v27 = *(_DWORD *)(a2 + 8) - 978307200;
  *((_DWORD *)v5 + 4) = v26 | 0xC;
  *((_DWORD *)v5 + 12) = v27;
  int v28 = *(_DWORD *)(a2 + 12) - 978307200;
  *((_DWORD *)v5 + 4) = v26 | 0x1C;
  *((_DWORD *)v5 + 13) = v28;
  sub_10FB35C((uint64_t)v38, 0, 0);
  uint64_t v29 = nullsub_1(*(void *)(a2 + 16));
  uint64_t v30 = v29;
  uint64_t v31 = v39[0];
  if (v39[0] == v39[1])
  {
    unsigned int v32 = v39[0] + 1;
    sub_188CA54(v39, v39[0] + 1);
    *(void *)(v40 + 8 * v31) = v30;
  }
  else
  {
    *(void *)(v40 + 8 * v39[0]) = v29;
    unsigned int v32 = v31 + 1;
  }
  v39[0] = v32;
  sub_188B428((uint64_t)v38, (uint64_t)__p);
  *((_DWORD *)v5 + 4) |= 1u;
  uint64_t v33 = v5[1];
  unint64_t v34 = (uint64_t *)(v33 & 0xFFFFFFFFFFFFFFFCLL);
  if (v33) {
    unint64_t v34 = (uint64_t *)*v34;
  }
  sub_1881E08(v5 + 3, (long long *)__p, v34);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  return sub_10FB430(v38);
}

void sub_E6B088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_10FB430(&a15);
    _Unwind_Resume(a1);
  }
  sub_10FB430(&a15);
  _Unwind_Resume(a1);
}

std::string *sub_E6B0D4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) |= 2u;
  uint64_t v4 = *(void *)(a2 + 32);
  if (!v4)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
    if (v5) {
      uint64_t v6 = (void *)*v6;
    }
    sub_13D6A1C((uint64_t)v6);
    uint64_t v4 = v7;
    *(void *)(a2 + 32) = v7;
  }
  sub_5F4D30((const std::string **)a1, v4);
  *(_DWORD *)(a2 + 16) |= 4u;
  uint64_t v8 = *(void *)(a2 + 40);
  if (!v8)
  {
    uint64_t v9 = *(void *)(a2 + 8);
    uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      uint64_t v10 = (void *)*v10;
    }
    sub_13D6A1C((uint64_t)v10);
    uint64_t v8 = v11;
    *(void *)(a2 + 40) = v11;
  }
  sub_5F4D30((const std::string **)(a1 + 160), v8);
  *(_DWORD *)(a2 + 16) |= 1u;
  uint64_t v12 = *(void *)(a2 + 8);
  uint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
  if (v12) {
    uint64_t v13 = (uint64_t *)*v13;
  }

  return sub_1881DF4((std::string **)(a2 + 24), (long long *)(a1 + 320), v13);
}

uint64_t *sub_E6B1B4(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *(_DWORD *)(a2 + 16) |= 1u;
  *(void *)(a2 + 24) = v2;
  return result;
}

void sub_E6B1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = nullsub_1(*(void *)(a1 + 48));
  *(_DWORD *)(a2 + 40) |= 0x100u;
  *(void *)(a2 + 136) = v4;
  sub_523E70((unsigned __int8 *)(a1 + 96), &__p);
  *(_DWORD *)(a2 + 40) |= 1u;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
  if (v5) {
    uint64_t v6 = (uint64_t *)*v6;
  }
  sub_1881E08((uint64_t *)(a2 + 72), (long long *)&__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(void *)(a1 + 72) != *(void *)(a1 + 80))
  {
    *(_DWORD *)(a2 + 40) |= 0x10u;
    uint64_t v8 = *(void **)(a2 + 104);
    if (!v8)
    {
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      if (v9) {
        uint64_t v10 = (void *)*v10;
      }
      uint64_t v8 = sub_1478C60((uint64_t)v10);
      *(void *)(a2 + 104) = v8;
    }
    sub_3E9CB0(a1 + 72, (uint64_t)v8);
  }
  uint64_t v11 = *(unsigned __int8 *)(a1 + 47);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a1 + 32);
  }
  if (v11)
  {
    *(_DWORD *)(a2 + 40) |= 2u;
    uint64_t v12 = *(void *)(a2 + 8);
    uint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
    if (v12) {
      uint64_t v13 = (uint64_t *)*v13;
    }
    sub_1881DF4((std::string **)(a2 + 80), (long long *)(a1 + 24), v13);
  }
  uint64_t v14 = *(void *)(a1 + 64);
  if (v14 != -1)
  {
    *(_DWORD *)(a2 + 40) |= 0x400u;
    *(_DWORD *)(a2 + 148) = v14;
  }
  int v15 = *(_DWORD *)(a1 + 136);
  if (v15 == 1)
  {
    if (*(_DWORD *)(a1 + 108) == -1 && *(_DWORD *)(a1 + 104) == -1 && *(void *)(a1 + 112) == *(void *)(a1 + 120)) {
      goto LABEL_31;
    }
  }
  else if (v15 || *(_DWORD *)(a1 + 104) == -1)
  {
    goto LABEL_31;
  }
  *(_DWORD *)(a2 + 40) |= 4u;
  uint64_t v16 = *(void *)(a2 + 88);
  if (!v16)
  {
    uint64_t v17 = *(void *)(a2 + 8);
    uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      uint64_t v18 = (void *)*v18;
    }
    uint64_t v16 = sub_13DAB08((uint64_t)v18);
    *(void *)(a2 + 88) = v16;
  }
  sub_523A2C(a1 + 104, v16, v7);
LABEL_31:
  int v19 = *(_DWORD *)(a1 + 248);
  if (v19 == 1)
  {
    if (*(_DWORD *)(a1 + 220) == -1 && *(_DWORD *)(a1 + 216) == -1 && *(void *)(a1 + 224) == *(void *)(a1 + 232)) {
      goto LABEL_43;
    }
  }
  else if (v19 || *(_DWORD *)(a1 + 216) == -1)
  {
    goto LABEL_43;
  }
  *(_DWORD *)(a2 + 40) |= 8u;
  uint64_t v20 = *(void *)(a2 + 96);
  if (!v20)
  {
    uint64_t v21 = *(void *)(a2 + 8);
    uint64_t v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
    if (v21) {
      uint64_t v22 = (void *)*v22;
    }
    uint64_t v20 = sub_13DAB08((uint64_t)v22);
    *(void *)(a2 + 96) = v20;
  }
  sub_523A2C(a1 + 216, v20, v7);
LABEL_43:
  int v23 = *(_DWORD *)(a1 + 360);
  if (v23 == 1)
  {
    if (*(_DWORD *)(a1 + 332) == -1 && *(_DWORD *)(a1 + 328) == -1 && *(void *)(a1 + 336) == *(void *)(a1 + 344)) {
      goto LABEL_55;
    }
  }
  else if (v23 || *(_DWORD *)(a1 + 328) == -1)
  {
    goto LABEL_55;
  }
  *(_DWORD *)(a2 + 40) |= 0x40u;
  uint64_t v24 = *(void *)(a2 + 120);
  if (!v24)
  {
    uint64_t v25 = *(void *)(a2 + 8);
    int v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
    if (v25) {
      int v26 = (void *)*v26;
    }
    uint64_t v24 = sub_13DAB08((uint64_t)v26);
    *(void *)(a2 + 120) = v24;
  }
  sub_523A2C(a1 + 328, v24, v7);
LABEL_55:
  int v27 = *(_DWORD *)(a1 + 472);
  if (v27 == 1)
  {
    if (*(_DWORD *)(a1 + 444) == -1 && *(_DWORD *)(a1 + 440) == -1 && *(void *)(a1 + 448) == *(void *)(a1 + 456)) {
      goto LABEL_67;
    }
  }
  else if (v27 || *(_DWORD *)(a1 + 440) == -1)
  {
    goto LABEL_67;
  }
  *(_DWORD *)(a2 + 40) |= 0x80u;
  uint64_t v28 = *(void *)(a2 + 128);
  if (!v28)
  {
    uint64_t v29 = *(void *)(a2 + 8);
    uint64_t v30 = (void *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
    if (v29) {
      uint64_t v30 = (void *)*v30;
    }
    uint64_t v28 = sub_13DAB08((uint64_t)v30);
    *(void *)(a2 + 128) = v28;
  }
  sub_523A2C(a1 + 440, v28, v7);
LABEL_67:
  int v31 = *(unsigned __int16 *)(a1 + 552);
  if (v31 != 0x7FFF)
  {
    *(_DWORD *)(a2 + 40) |= 0x800u;
    *(_DWORD *)(a2 + 152) = v31;
  }
  unsigned int v32 = *(unsigned __int8 *)(a1 + 554) - 1;
  if (v32 > 4) {
    int v33 = 0;
  }
  else {
    int v33 = dword_20F0E4C[(char)v32];
  }
  int v34 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 156) = v33;
  int v35 = *(unsigned __int8 *)(a1 + 555);
  if (v35 == 2) {
    int v36 = 2;
  }
  else {
    int v36 = v35 == 1;
  }
  *(_DWORD *)(a2 + 144) = v36;
  int v37 = *(unsigned __int8 *)(a1 + 558);
  if (v37 == 2) {
    int v38 = 2;
  }
  else {
    int v38 = v37 == 1;
  }
  *(_DWORD *)(a2 + 40) = v34 | 0x3200;
  *(_DWORD *)(a2 + 160) = v38;
}

void sub_E6B5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E6B5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = nullsub_1(*(void *)(a1 + 48));
  int v6 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v6 | 0x10;
  *(void *)(a2 + 80) = v4;
  if (*(void *)(a1 + 64) != *(void *)(a1 + 72))
  {
    *(_DWORD *)(a2 + 40) = v6 | 0x14;
    uint8x8_t v7 = *(void **)(a2 + 64);
    if (!v7)
    {
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        uint64_t v9 = (void *)*v9;
      }
      uint8x8_t v7 = sub_1478C60((uint64_t)v9);
      *(void *)(a2 + 64) = v7;
    }
    sub_3E9CB0(a1 + 64, (uint64_t)v7);
  }
  uint64_t v10 = *(unsigned __int8 *)(a1 + 47);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a1 + 32);
  }
  if (v10)
  {
    *(_DWORD *)(a2 + 40) |= 2u;
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (uint64_t *)*v12;
    }
    sub_1881DF4((std::string **)(a2 + 56), (long long *)(a1 + 24), v12);
  }
  int v13 = *(_DWORD *)(a1 + 120);
  if (v13 == 1)
  {
    if (*(_DWORD *)(a1 + 92) == -1 && *(_DWORD *)(a1 + 88) == -1 && *(void *)(a1 + 96) == *(void *)(a1 + 104)) {
      return;
    }
  }
  else if (v13 || *(_DWORD *)(a1 + 88) == -1)
  {
    return;
  }
  *(_DWORD *)(a2 + 40) |= 8u;
  uint64_t v14 = *(void *)(a2 + 72);
  if (v14)
  {
    uint64_t v15 = a1 + 88;
  }
  else
  {
    uint64_t v16 = *(void *)(a2 + 8);
    uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    if (v16) {
      uint64_t v17 = (void *)*v17;
    }
    uint64_t v14 = sub_13DAB08((uint64_t)v17);
    *(void *)(a2 + 72) = v14;
    uint64_t v15 = a1 + 88;
  }
  sub_523A2C(v15, v14, v5);
}

void sub_E6B75C(int *a1, uint64_t a2, uint8x8_t a3)
{
  int v5 = *a1;
  int v6 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v6 | 4;
  *(_DWORD *)(a2 + 64) = v5;
  uint8x8_t v7 = a1 + 2;
  int v8 = a1[10];
  if (v8 == 1)
  {
    BOOL v9 = a1[3] == -1 && a1[2] == -1;
    if (v9 && *((void *)a1 + 2) == *((void *)a1 + 3)) {
      goto LABEL_16;
    }
  }
  else if (v8 || *v7 == -1)
  {
    goto LABEL_16;
  }
  *(_DWORD *)(a2 + 40) = v6 | 6;
  uint64_t v10 = *(void *)(a2 + 56);
  if (!v10)
  {
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
    if (v11) {
      uint64_t v12 = (void *)*v12;
    }
    uint64_t v10 = sub_13DAB08((uint64_t)v12);
    *(void *)(a2 + 56) = v10;
  }
  sub_523A2C((uint64_t)v7, v10, a3);
LABEL_16:
  uint64_t v13 = *((unsigned __int8 *)a1 + 143);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *((void *)a1 + 16);
  }
  if (v13)
  {
    *(_DWORD *)(a2 + 40) |= 1u;
    uint64_t v14 = *(void *)(a2 + 8);
    uint64_t v15 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFFCLL);
    if (v14)
    {
      uint64_t v15 = (uint64_t *)*v15;
    }
    else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
    {
      __break(0xC471u);
    }
    sub_1881DF4((std::string **)(a2 + 48), (long long *)(a1 + 30), v15);
  }
}

void sub_E6B890(void *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) |= 2u;
  uint64_t v4 = (int *)a1[1];
  *(_DWORD *)(a2 + 48) = *a1;
  int v5 = (int *)a1[2];
  if (v4 != v5)
  {
    int v6 = (unsigned int *)(a2 + 24);
    unsigned int v7 = *(_DWORD *)(a2 + 24);
    do
    {
      while (1)
      {
        int v8 = *v4;
        if (v7 == *(_DWORD *)(a2 + 28)) {
          break;
        }
        *(_DWORD *)(*(void *)(a2 + 32) + 4 * v7++) = v8;
        *int v6 = v7;
        v4 += 2;
        if (v4 == v5) {
          goto LABEL_6;
        }
      }
      sub_188C80C((unsigned int *)(a2 + 24), v7 + 1);
      *(_DWORD *)(*(void *)(a2 + 32) + 4 * v7++) = v8;
      *int v6 = v7;
      v4 += 2;
    }
    while (v4 != v5);
  }
LABEL_6:
  BOOL v9 = (const std::string **)(a1 + 4);
  if (!sub_45FB38(v9))
  {
    *(_DWORD *)(a2 + 16) |= 1u;
    uint64_t v10 = *(void *)(a2 + 40);
    if (!v10)
    {
      uint64_t v11 = *(void *)(a2 + 8);
      uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
      if (v11) {
        uint64_t v12 = (void *)*v12;
      }
      sub_13D6A1C((uint64_t)v12);
      uint64_t v10 = v13;
      *(void *)(a2 + 40) = v13;
    }
    sub_5F4D30(v9, v10);
  }
}

void sub_E6B9C0(int *a1, uint64_t a2)
{
  int v4 = a1[1];
  if (v4 == 0x7FFFFFFF) {
    int v4 = *a1;
  }
  int v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5 | 0x40;
  *(_DWORD *)(a2 + 72) = v4 - 978307200;
  char v6 = *((unsigned char *)a1 + 688);
  if (v6)
  {
    *(_DWORD *)(a2 + 16) = v5 | 0x44;
    uint64_t v7 = *(void *)(a2 + 40);
    if (!v7)
    {
      uint64_t v8 = *(void *)(a2 + 8);
      BOOL v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
      if (v8) {
        BOOL v9 = (void *)*v9;
      }
      uint64_t v7 = sub_134E93C((uint64_t)v9);
      *(void *)(a2 + 40) = v7;
      char v6 = *((unsigned char *)a1 + 688);
    }
    unsigned __int8 v10 = v6 - 1;
    if ((v10 & 0xFC) != 0) {
      int v11 = 0;
    }
    else {
      int v11 = v10 + 1;
    }
    *(_DWORD *)(v7 + 16) |= 1u;
    *(_DWORD *)(v7 + 24) = v11;
  }
  if (!sub_45FB38((void *)a1 + 4) || !sub_45FB38((void *)a1 + 24))
  {
    *(_DWORD *)(a2 + 16) |= 0x10u;
    uint64_t v12 = *(void *)(a2 + 56);
    if (!v12)
    {
      uint64_t v13 = *(void *)(a2 + 8);
      uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
      if (v13) {
        uint64_t v14 = (void *)*v14;
      }
      uint64_t v12 = sub_13D6EDC((uint64_t)v14);
      *(void *)(a2 + 56) = v12;
    }
    sub_E6A434((uint64_t)(a1 + 8), v12);
  }
  if (!sub_45FB38((void *)a1 + 45) || !sub_45FB38((void *)a1 + 65))
  {
    *(_DWORD *)(a2 + 16) |= 0x20u;
    uint64_t v15 = *(void *)(a2 + 64);
    if (v15)
    {
      uint64_t v16 = (uint64_t)(a1 + 90);
    }
    else
    {
      uint64_t v17 = *(void *)(a2 + 8);
      uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (v17) {
        uint64_t v18 = (void *)*v18;
      }
      uint64_t v15 = sub_13D6EDC((uint64_t)v18);
      *(void *)(a2 + 64) = v15;
      uint64_t v16 = (uint64_t)(a1 + 90);
    }
    sub_E6A434(v16, v15);
  }
}

void sub_E6BB64(uint64_t a1, uint64_t a2)
{
  int v4 = *(int **)a1;
  int v5 = *(int **)(a1 + 8);
  if (*(int **)a1 != v5)
  {
    char v6 = (uint64_t *)(a2 + 24);
    do
    {
      while (1)
      {
        BOOL v9 = *(_DWORD **)(a2 + 40);
        if (v9)
        {
          uint64_t v10 = *(int *)(a2 + 32);
          if ((int)v10 < *v9) {
            break;
          }
        }
        sub_134EA54(*v6);
        uint64_t v8 = sub_188CDC8(a2 + 24, v7);
        sub_E6B9C0(v4, v8);
        v4 += 174;
        if (v4 == v5) {
          goto LABEL_7;
        }
      }
      *(_DWORD *)(a2 + 32) = v10 + 1;
      sub_E6B9C0(v4, *(void *)&v9[2 * v10 + 2]);
      v4 += 174;
    }
    while (v4 != v5);
  }
LABEL_7:
  BOOL v11 = *(void *)(a1 + 32) == *(void *)(a1 + 40) || *(void *)(a1 + 24) == 0;
  if (!v11 && !sub_45FB38((void *)(a1 + 56)))
  {
    *(_DWORD *)(a2 + 16) |= 1u;
    uint64_t v12 = *(void *)(a2 + 48);
    if (!v12)
    {
      uint64_t v13 = *(void *)(a2 + 8);
      uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
      if (v13) {
        uint64_t v14 = (void *)*v14;
      }
      uint64_t v12 = sub_134E9B8((uint64_t)v14);
      *(void *)(a2 + 48) = v12;
    }
    sub_E6B890((void *)(a1 + 24), v12);
  }
  if (!sub_45FB38((void *)(a1 + 216)) || !sub_45FB38((void *)(a1 + 376)))
  {
    *(_DWORD *)(a2 + 16) |= 2u;
    uint64_t v15 = *(void *)(a2 + 56);
    if (!v15)
    {
      uint64_t v16 = *(void *)(a2 + 8);
      uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
      if (v16) {
        uint64_t v17 = (void *)*v17;
      }
      uint64_t v15 = sub_13D6EDC((uint64_t)v17);
      *(void *)(a2 + 56) = v15;
    }
    sub_E6A434(a1 + 216, v15);
  }
  if (!sub_45FB38((void *)(a1 + 544)) || !sub_45FB38((void *)(a1 + 704)))
  {
    *(_DWORD *)(a2 + 16) |= 4u;
    uint64_t v18 = *(void *)(a2 + 64);
    if (!v18)
    {
      uint64_t v19 = *(void *)(a2 + 8);
      uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
      if (v19) {
        uint64_t v20 = (void *)*v20;
      }
      uint64_t v18 = sub_13D6EDC((uint64_t)v20);
      *(void *)(a2 + 64) = v18;
    }
    sub_E6A434(a1 + 544, v18);
  }
  if (!sub_45FB38((void *)(a1 + 872)) || !sub_45FB38((void *)(a1 + 1032)))
  {
    *(_DWORD *)(a2 + 16) |= 8u;
    uint64_t v21 = *(void *)(a2 + 72);
    if (!v21)
    {
      uint64_t v22 = *(void *)(a2 + 8);
      int v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFCLL);
      if (v22) {
        int v23 = (void *)*v23;
      }
      uint64_t v21 = sub_13D6EDC((uint64_t)v23);
      *(void *)(a2 + 72) = v21;
    }
    sub_E6A434(a1 + 872, v21);
  }
}

std::string *sub_E6BD9C(uint64_t a1, uint64_t a2)
{
  double result = *(std::string **)a1;
  if (result != (std::string *)-1)
  {
    double result = (std::string *)nullsub_1(result);
    *(_DWORD *)(a2 + 40) |= 4u;
    *(void *)(a2 + 64) = result;
  }
  uint64_t v5 = *(unsigned __int8 *)(a1 + 31);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  if (v5)
  {
    *(_DWORD *)(a2 + 40) |= 1u;
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
    if (v6) {
      uint64_t v7 = (uint64_t *)*v7;
    }
    double result = sub_1881DF4((std::string **)(a2 + 48), (long long *)(a1 + 8), v7);
  }
  switch(*(unsigned char *)(a1 + 32))
  {
    case 0:
      goto LABEL_16;
    case 1:
      int v8 = 1;
      goto LABEL_15;
    case 2:
      int v8 = 2;
      goto LABEL_15;
    case 3:
      int v8 = 3;
      goto LABEL_15;
    case 4:
      int v8 = 4;
      goto LABEL_15;
    default:
      int v8 = 0;
LABEL_15:
      *(_DWORD *)(a2 + 40) |= 8u;
      *(_DWORD *)(a2 + 72) = v8;
LABEL_16:
      if (*(unsigned __int8 *)(a1 + 64) - 1 < 3) {
        int v9 = (*(unsigned char *)(a1 + 64) - 1) + 1;
      }
      else {
        int v9 = 0;
      }
      int v10 = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a2 + 40) = v10 | 0x10;
      *(_DWORD *)(a2 + 76) = v9;
      uint64_t v11 = *(unsigned __int8 *)(a1 + 63);
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a1 + 48);
      }
      if (v11)
      {
        *(_DWORD *)(a2 + 40) = v10 | 0x12;
        uint64_t v12 = *(void *)(a2 + 8);
        uint64_t v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (v12)
        {
          uint64_t v13 = (uint64_t *)*v13;
        }
        else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
        }
        return sub_1881DF4((std::string **)(a2 + 56), (long long *)(a1 + 40), v13);
      }
      return result;
  }
}

void sub_E6BF30(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    uint64_t v7 = (unsigned int *)(a3 + 24);
    unsigned int v8 = *(_DWORD *)(a3 + 24);
    do
    {
      while (1)
      {
        int v9 = *v5;
        if (v8 == *(_DWORD *)(a3 + 28)) {
          break;
        }
        *(_DWORD *)(*(void *)(a3 + 32) + 4 * v8++) = v9;
        *uint64_t v7 = v8;
        v5 += 2;
        if (v5 == v6) {
          goto LABEL_6;
        }
      }
      sub_188C80C((unsigned int *)(a3 + 24), v8 + 1);
      *(_DWORD *)(*(void *)(a3 + 32) + 4 * v8++) = v9;
      *uint64_t v7 = v8;
      v5 += 2;
    }
    while (v5 != v6);
  }
LABEL_6:
  int v10 = *(unsigned __int8 *)(a1 + 560);
  if (*(unsigned char *)(a1 + 560))
  {
    if (v10 == 2) {
      int v11 = 2;
    }
    else {
      int v11 = v10 == 1;
    }
    *(_DWORD *)(a3 + 16) |= 2u;
    *(_DWORD *)(a3 + 48) = v11;
  }
  int v12 = *(_DWORD *)(a1 + 564);
  switch(v12)
  {
    case 0:
      if (*(void *)(a1 + 24) != -1) {
        goto LABEL_19;
      }
      goto LABEL_13;
    case 1:
    case 2:
    case 3:
    case 4:
      break;
    default:
      int v12 = 0;
      break;
  }
  *(_DWORD *)(a3 + 16) |= 4u;
  *(_DWORD *)(a3 + 52) = v12;
  if (*(void *)(a1 + 24) == -1)
  {
LABEL_13:
    uint64_t v13 = (const std::string **)(a1 + 216);
    if (!sub_45FB38((void *)(a1 + 216))) {
      goto LABEL_24;
    }
LABEL_14:
    uint64_t v14 = (const std::string **)(a1 + 376);
    if (!sub_45FB38((void *)(a1 + 376))) {
      goto LABEL_34;
    }
    goto LABEL_15;
  }
LABEL_19:
  *(_DWORD *)(a3 + 16) |= 1u;
  uint64_t v16 = *(void *)(a3 + 40);
  if (!v16)
  {
    uint64_t v17 = *(void *)(a3 + 8);
    uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
    if (v17) {
      uint64_t v18 = (void *)*v18;
    }
    sub_1332868((uint64_t)v18);
    uint64_t v16 = v19;
    *(void *)(a3 + 40) = v19;
  }
  uint64_t v20 = nullsub_1(*(void *)(a1 + 24));
  *(_DWORD *)(v16 + 16) |= 8u;
  *(void *)(v16 + 96) = v20;
  uint64_t v13 = (const std::string **)(a1 + 216);
  if (sub_45FB38((void *)(a1 + 216))) {
    goto LABEL_14;
  }
LABEL_24:
  *(_DWORD *)(a3 + 16) |= 1u;
  uint64_t v21 = *(void *)(a3 + 40);
  if (v21)
  {
    *(_DWORD *)(v21 + 16) |= 2u;
    uint64_t v22 = *(void *)(v21 + 80);
    if (v22) {
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  uint64_t v23 = *(void *)(a3 + 8);
  uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
  if (v23) {
    uint64_t v24 = (void *)*v24;
  }
  sub_1332868((uint64_t)v24);
  uint64_t v21 = v25;
  *(void *)(a3 + 40) = v25;
  *(_DWORD *)(v25 + 16) |= 2u;
  uint64_t v22 = *(void *)(v25 + 80);
  if (!v22)
  {
LABEL_30:
    uint64_t v26 = *(void *)(v21 + 8);
    int v27 = (void *)(v26 & 0xFFFFFFFFFFFFFFFCLL);
    if (v26) {
      int v27 = (void *)*v27;
    }
    sub_13D6A1C((uint64_t)v27);
    uint64_t v22 = v28;
    *(void *)(v21 + 80) = v28;
  }
LABEL_33:
  sub_5F4D30(v13, v22);
  uint64_t v14 = (const std::string **)(a1 + 376);
  if (!sub_45FB38((void *)(a1 + 376)))
  {
LABEL_34:
    *(_DWORD *)(a3 + 16) |= 1u;
    uint64_t v29 = *(void *)(a3 + 40);
    if (v29)
    {
      *(_DWORD *)(v29 + 16) |= 4u;
      uint64_t v30 = *(void *)(v29 + 88);
      if (v30) {
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v31 = *(void *)(a3 + 8);
      unsigned int v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
      if (v31) {
        unsigned int v32 = (void *)*v32;
      }
      sub_1332868((uint64_t)v32);
      uint64_t v29 = v33;
      *(void *)(a3 + 40) = v33;
      *(_DWORD *)(v33 + 16) |= 4u;
      uint64_t v30 = *(void *)(v33 + 88);
      if (v30)
      {
LABEL_43:
        sub_5F4D30(v14, v30);
        uint64_t v15 = (const std::string **)(a1 + 32);
        if (sub_45FB38((void *)(a1 + 32))) {
          goto LABEL_54;
        }
LABEL_44:
        *(_DWORD *)(a3 + 16) |= 1u;
        uint64_t v37 = *(void *)(a3 + 40);
        if (v37)
        {
          *(_DWORD *)(v37 + 16) |= 1u;
          uint64_t v38 = *(void *)(v37 + 72);
          if (v38)
          {
LABEL_53:
            sub_5F4D30(v15, v38);
            goto LABEL_54;
          }
        }
        else
        {
          uint64_t v39 = *(void *)(a3 + 8);
          uint64_t v40 = (void *)(v39 & 0xFFFFFFFFFFFFFFFCLL);
          if (v39) {
            uint64_t v40 = (void *)*v40;
          }
          sub_1332868((uint64_t)v40);
          uint64_t v37 = v41;
          *(void *)(a3 + 40) = v41;
          *(_DWORD *)(v41 + 16) |= 1u;
          uint64_t v38 = *(void *)(v41 + 72);
          if (v38) {
            goto LABEL_53;
          }
        }
        uint64_t v42 = *(void *)(v37 + 8);
        uint64_t v43 = (void *)(v42 & 0xFFFFFFFFFFFFFFFCLL);
        if (v42) {
          uint64_t v43 = (void *)*v43;
        }
        sub_13D6A1C((uint64_t)v43);
        uint64_t v38 = v44;
        *(void *)(v37 + 72) = v44;
        goto LABEL_53;
      }
    }
    uint64_t v34 = *(void *)(v29 + 8);
    int v35 = (void *)(v34 & 0xFFFFFFFFFFFFFFFCLL);
    if (v34) {
      int v35 = (void *)*v35;
    }
    sub_13D6A1C((uint64_t)v35);
    uint64_t v30 = v36;
    *(void *)(v29 + 88) = v36;
    goto LABEL_43;
  }
LABEL_15:
  uint64_t v15 = (const std::string **)(a1 + 32);
  if (!sub_45FB38((void *)(a1 + 32))) {
    goto LABEL_44;
  }
LABEL_54:
  uint64_t v45 = *(const std::string ***)(a1 + 192);
  uint64_t v46 = *(const std::string ***)(a1 + 200);
  while (v45 != v46)
  {
    *(_DWORD *)(a3 + 16) |= 1u;
    uint64_t v50 = *(void *)(a3 + 40);
    if (v50)
    {
      unint64_t v51 = *(_DWORD **)(v50 + 40);
      if (!v51) {
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v52 = *(void *)(a3 + 8);
      BOOL v53 = (uint64_t *)(v52 & 0xFFFFFFFFFFFFFFFCLL);
      if (v52)
      {
        sub_1332868(*v53);
        *(void *)(a3 + 40) = v50;
        unint64_t v51 = *(_DWORD **)(v50 + 40);
        if (!v51)
        {
LABEL_55:
          uint64_t v47 = v50 + 24;
          sub_13D6A1C(*(void *)(v50 + 24));
          uint64_t v49 = sub_188CDC8(v47, v48);
          goto LABEL_56;
        }
      }
      else
      {
        sub_1332868((uint64_t)v53);
        *(void *)(a3 + 40) = v50;
        unint64_t v51 = *(_DWORD **)(v50 + 40);
        if (!v51) {
          goto LABEL_55;
        }
      }
    }
    uint64_t v54 = *(int *)(v50 + 32);
    if ((int)v54 >= *v51) {
      goto LABEL_55;
    }
    *(_DWORD *)(v50 + 32) = v54 + 1;
    uint64_t v49 = *(void *)&v51[2 * v54 + 2];
LABEL_56:
    sub_5F4D30(v45, v49);
    v45 += 20;
  }
  uint64_t v55 = *(void *)(a1 + 536);
  uint64_t v56 = *(void *)(a1 + 544);
  while (v55 != v56)
  {
    *(_DWORD *)(a3 + 16) |= 1u;
    uint64_t v58 = *(void *)(a3 + 40);
    if (v58)
    {
      uint64_t v59 = *(_DWORD **)(v58 + 64);
      if (!v59) {
        goto LABEL_83;
      }
    }
    else
    {
      uint64_t v60 = *(void *)(a3 + 8);
      long long v61 = (uint64_t *)(v60 & 0xFFFFFFFFFFFFFFFCLL);
      if (v60)
      {
        sub_1332868(*v61);
        *(void *)(a3 + 40) = v58;
        uint64_t v59 = *(_DWORD **)(v58 + 64);
        if (!v59)
        {
LABEL_83:
          uint64_t v65 = v58 + 48;
          uint64_t v66 = sub_1479A1C(*(void *)(v58 + 48));
          uint64_t v63 = sub_188CDC8(v65, v66);
          uint64_t v67 = *(unsigned __int8 *)(v55 + 23);
          if ((v67 & 0x80u) != 0) {
            uint64_t v67 = *(void *)(v55 + 8);
          }
          if (v67) {
            goto LABEL_86;
          }
          goto LABEL_89;
        }
      }
      else
      {
        sub_1332868((uint64_t)v61);
        *(void *)(a3 + 40) = v58;
        uint64_t v59 = *(_DWORD **)(v58 + 64);
        if (!v59) {
          goto LABEL_83;
        }
      }
    }
    uint64_t v62 = *(int *)(v58 + 56);
    if ((int)v62 >= *v59) {
      goto LABEL_83;
    }
    *(_DWORD *)(v58 + 56) = v62 + 1;
    uint64_t v63 = *(void *)&v59[2 * v62 + 2];
    uint64_t v64 = *(unsigned __int8 *)(v55 + 23);
    if ((v64 & 0x80u) != 0) {
      uint64_t v64 = *(void *)(v55 + 8);
    }
    if (v64)
    {
LABEL_86:
      *(_DWORD *)(v63 + 16) |= 1u;
      uint64_t v68 = *(void *)(v63 + 8);
      int v69 = (uint64_t *)(v68 & 0xFFFFFFFFFFFFFFFCLL);
      if (v68) {
        int v69 = (uint64_t *)*v69;
      }
      sub_1881DF4((std::string **)(v63 + 24), (long long *)v55, v69);
    }
LABEL_89:
    switch(*(unsigned char *)(v55 + 24))
    {
      case 0:
        goto LABEL_70;
      case 1:
        int v57 = 1;
        goto LABEL_69;
      case 2:
        int v57 = 2;
        goto LABEL_69;
      case 3:
        int v57 = 3;
        goto LABEL_69;
      default:
        int v57 = 0;
LABEL_69:
        *(_DWORD *)(v63 + 16) |= 2u;
        *(_DWORD *)(v63 + 32) = v57;
LABEL_70:
        v55 += 32;
        break;
    }
  }
}

void sub_E6C4D8(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  *(_DWORD *)(a3 + 40) |= 1u;
  uint64_t v6 = *(void *)(a3 + 48);
  if (!v6)
  {
    uint64_t v8 = *(void *)(a3 + 8);
    int v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      int v9 = (void *)*v9;
    }
    a4 = sub_1850814((uint64_t)v9);
    uint64_t v6 = v10;
    *(void *)(a3 + 48) = v10;
  }
  int v11 = *(_DWORD *)(v6 + 16);
  *(_DWORD *)(v6 + 60) = 1;
  int v12 = v11 | 0x48;
  *(_DWORD *)(v6 + 16) = v12;
  *(_DWORD *)(v6 + 48) = 9902;
  if (a1 != -1)
  {
    uint64_t v13 = nullsub_1(a1);
    int v12 = *(_DWORD *)(v6 + 16) | 2;
    *(_DWORD *)(v6 + 16) = v12;
    *(void *)(v6 + 32) = v13;
  }
  if (*a2 != -1 || a2[1] != -1)
  {
    *(_DWORD *)(v6 + 16) = v12 | 1;
    uint64_t v15 = *(void *)(v6 + 24);
    if (!v15)
    {
      uint64_t v16 = *(void *)(v6 + 8);
      uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
      if (v16) {
        uint64_t v17 = (void *)*v17;
      }
      uint64_t v15 = sub_15C1918((uint64_t)v17);
      *(void *)(v6 + 24) = v15;
    }
    LODWORD(a4) = a2[1];
    long double v18 = exp((double)*(unint64_t *)&a4 * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v19 = atan((v18 + -1.0 / v18) * 0.5);
    HIDWORD(v20) = 1078765020;
    int v21 = *(_DWORD *)(v15 + 40);
    *(_DWORD *)(v15 + 40) = v21 | 1;
    LODWORD(v20) = *a2;
    *(_DWORD *)(v15 + 40) = v21 | 3;
    *(long double *)(v15 + 48) = v19 * 57.2957795;
    *(double *)(v15 + 56) = (double)v20 * 360.0 / 4294967300.0 + -180.0;
  }
}

uint64_t *sub_E6C660(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = __ROR8__(*a2, 32);
  unint64_t v8 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) >> 33));
  unint64_t v9 = v8 ^ (v8 >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8 ^ (v8 >> 33);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    int v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  long double v19 = operator new(0x18uLL);
  *long double v19 = 0;
  v19[1] = v9;
  v19[2] = *a3;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
    if (v23)
    {
LABEL_34:
      *long double v19 = *v23;
LABEL_69:
      *uint64_t v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *long double v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_E6C9B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_E6C9C8()
{
  byte_25FBF6F = 1;
  word_25FBF58 = 65;
  byte_25FBF87 = 1;
  word_25FBF70 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25FC018 = 0u;
  *(_OWORD *)&qword_25FC028 = 0u;
  dword_25FC038 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25FC018, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25FC018, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25FC018, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25FC018, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25FBF9F = 8;
  strcpy((char *)&qword_25FBF88, "any_mode");
  byte_25FBFB7 = 7;
  strcpy((char *)&dword_25FBFA0, "cycling");
  byte_25FBFCF = 7;
  strcpy((char *)&dword_25FBFB8, "driving");
  byte_25FBFE7 = 7;
  strcpy((char *)&dword_25FBFD0, "walking");
  qword_25FBFF0 = 0;
  qword_25FBFF8 = 0;
  qword_25FBFE8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25FBFE8 = (uint64_t)v0;
  qword_25FBFF0 = (uint64_t)(v0 + 9);
  qword_25FBFF8 = (uint64_t)(v0 + 9);
  qword_25FC000 = 0;
  qword_25FC008 = 0;
  unk_25FC010 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25FC008 = (uint64_t)(v1 + 9);
  unk_25FC010 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25FC000 = (uint64_t)v1;
  return result;
}

void sub_E6CC90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25FC028) {
    sub_20B0ED4((void **)qword_25FC028);
  }
  uint64_t v37 = (void *)xmmword_25FC018;
  *(void *)&xmmword_25FC018 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_E6CD30(uint64_t a1)
{
  *(_DWORD *)(a1 + 40) |= 0x80000u;
  uint64_t i = *(void *)(a1 + 528);
  if (!i)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    char v4 = (void *)(v3 & 0xFFFFFFFFFFFFFFFCLL);
    if (v3) {
      char v4 = (void *)*v4;
    }
    uint64_t i = sub_134EC50((uint64_t)v4);
    *(void *)(a1 + 528) = i;
  }
  uint64_t v5 = *(void *)(a1 + 368);
  uint64_t v6 = (uint64_t *)(v5 + 8);
  if (!v5) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(int *)(a1 + 360);
  if (v7)
  {
    uint64_t v50 = &v6[v7];
    uint64_t v51 = i;
    do
    {
      uint64_t v52 = v6;
      uint64_t v8 = *v6;
      uint64_t v9 = *(void *)(*v6 + 88);
      char v10 = (uint64_t *)(v9 + 8);
      if (!v9) {
        char v10 = 0;
      }
      uint64_t v11 = *(int *)(v8 + 80);
      if (v11)
      {
        BOOL v53 = &v10[v11];
        do
        {
          uint64_t v54 = v10;
          uint64_t v12 = *v10;
          uint64_t v13 = *(void *)(*v10 + 48);
          if (v13) {
            uint64_t v14 = v13 + 8;
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v15 = *(int *)(v12 + 40);
          if (v15)
          {
            uint64_t v16 = v14 + 8 * v15;
            uint64_t v17 = (unsigned int *)(v12 + 16);
            do
            {
              uint64_t v18 = *(int *)(*(void *)v14 + 16);
              if (v18)
              {
                long double v19 = *(int **)(*(void *)v14 + 24);
                unsigned int v20 = *v17;
                uint64_t v21 = 4 * v18;
                do
                {
                  while (1)
                  {
                    int v22 = *v19;
                    if (v20 == *(_DWORD *)(v12 + 20)) {
                      break;
                    }
                    *(_DWORD *)(*(void *)(v12 + 24) + 4 * v20++) = v22;
                    *uint64_t v17 = v20;
                    ++v19;
                    v21 -= 4;
                    if (!v21) {
                      goto LABEL_20;
                    }
                  }
                  sub_188C80C((unsigned int *)(v12 + 16), v20 + 1);
                  *(_DWORD *)(*(void *)(v12 + 24) + 4 * v20++) = v22;
                  *uint64_t v17 = v20;
                  ++v19;
                  v21 -= 4;
                }
                while (v21);
              }
LABEL_20:
              v14 += 8;
            }
            while (v14 != v16);
          }
          char v10 = v54 + 1;
        }
        while (v54 + 1 != v53);
      }
      uint64_t v23 = *(void *)(*(void *)(v8 + 128) + 8);
      for (i = v51; v23; uint64_t v23 = *(void *)(*(void *)(v8 + 128) + 8 * *(int *)(v24 + 156) + 8))
      {
        uint64_t v24 = *(void *)(*(void *)(v8 + 152) + 8 * *(int *)(*(void *)(v23 + 56) + 4 * *(int *)(v23 + 68)) + 8);
        uint64_t v25 = *(int *)(v24 + 48);
        if (v25)
        {
          unint64_t v26 = *(int **)(v24 + 56);
          uint64_t v27 = 4 * v25;
          do
          {
            uint64_t v30 = *v26;
            unint64_t v31 = *(_DWORD **)(v8 + 64);
            if (v31 && (uint64_t v32 = *(int *)(v8 + 56), (int)v32 < *v31))
            {
              *(_DWORD *)(v8 + 56) = v32 + 1;
              uint64_t v29 = *(void *)&v31[2 * v32 + 2];
            }
            else
            {
              uint64_t v28 = sub_134EBF4(*(void *)(v8 + 48));
              uint64_t v29 = sub_188CDC8(v8 + 48, v28);
            }
            sub_134947C(v29, *(void *)(*(void *)(v51 + 344) + 8 * v30 + 8));
            ++v26;
            v27 -= 4;
          }
          while (v27);
        }
        if ((*(unsigned char *)(v24 + 40) & 4) == 0) {
          break;
        }
      }
      uint64_t v33 = *(unsigned int *)(v8 + 144);
      if ((int)v33 >= 1)
      {
        uint64_t v34 = (uint64_t *)(*(void *)(v8 + 152) + 8);
        do
        {
          uint64_t v35 = *v34++;
          sub_1336B5C(v35);
          --v33;
        }
        while (v33);
        *(_DWORD *)(v8 + 144) = 0;
      }
      uint64_t v36 = *(unsigned int *)(v8 + 120);
      if ((int)v36 >= 1)
      {
        uint64_t v37 = (uint64_t *)(*(void *)(v8 + 128) + 8);
        do
        {
          uint64_t v38 = *v37++;
          sub_13362F8(v38);
          --v36;
        }
        while (v36);
        *(_DWORD *)(v8 + 120) = 0;
      }
      uint64_t v39 = *(void *)(v8 + 64);
      if (v39) {
        uint64_t v40 = (uint64_t *)(v39 + 8);
      }
      else {
        uint64_t v40 = 0;
      }
      uint64_t v41 = *(int *)(v8 + 56);
      if (v41)
      {
        uint64_t v42 = 0;
        uint64_t v43 = 8 * v41;
        do
        {
          uint64_t v44 = *v40;
          int v45 = *(_DWORD *)(*v40 + 280);
          if (v45 == 8)
          {
            if (v42 && (*(unsigned char *)(v44 + 42) & 8) != 0)
            {
              int v46 = *(_DWORD *)(v44 + 316);
              *(_DWORD *)(v42 + 40) |= 0x80000u;
              *(_DWORD *)(v42 + 316) = v46;
            }
          }
          else if (v45 != 6)
          {
            uint64_t v42 = *v40;
            if (v45 != 5) {
              uint64_t v42 = 0;
            }
          }
          ++v40;
          v43 -= 8;
        }
        while (v43);
      }
      uint64_t v6 = v52 + 1;
    }
    while (v52 + 1 != v50);
  }
  uint64_t v47 = *(unsigned int *)(i + 336);
  if ((int)v47 >= 1)
  {
    uint64_t v48 = (uint64_t *)(*(void *)(i + 344) + 8);
    do
    {
      uint64_t v49 = *v48++;
      sub_1345E0C(v49);
      --v47;
    }
    while (v47);
    *(_DWORD *)(i + 336) = 0;
  }
}

void sub_E6D084(void **a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  sub_1353BF0(a3, 0, 0);
  *(_DWORD *)(a3 + 40) |= 0x20u;
  *(_DWORD *)(a3 + 112) = 0;
  sub_E6D9B4(a2[1], (uint64_t)(a2 + 2), a3);
  uint64_t v6 = *a2;
  *(_DWORD *)(a3 + 40) |= 0x10u;
  uint64_t v7 = *(void **)(a3 + 104);
  if (!v7)
  {
    uint64_t v8 = *(void *)(a3 + 8);
    uint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFFCLL);
    if (v8) {
      uint64_t v9 = (void *)*v9;
    }
    uint64_t v7 = sub_134ECAC((uint64_t)v9);
    *(void *)(a3 + 104) = v7;
  }
  sub_E6B1B4(v6 + 3, (uint64_t)v7);
  char v10 = *a2;
  uint64_t v11 = **a2;
  for (uint64_t i = v10[1]; v11 != i; v11 += 1064)
  {
    uint64_t v13 = *(_DWORD **)(a3 + 64);
    if (v13 && (uint64_t v14 = *(int *)(a3 + 56), (int)v14 < *v13))
    {
      *(_DWORD *)(a3 + 56) = v14 + 1;
      uint64_t v15 = *(void *)&v13[2 * v14 + 2];
    }
    else
    {
      uint64_t v16 = sub_13552E0(*(void *)(a3 + 48));
      uint64_t v15 = sub_188CDC8(a3 + 48, v16);
    }
    sub_E6D1C4(a1, v11, v15);
  }
}

void sub_E6D19C(_Unwind_Exception *a1)
{
  sub_1354024(v1);
  _Unwind_Resume(a1);
}

void sub_E6D1B0(_Unwind_Exception *a1)
{
  sub_1354024(v1);
  _Unwind_Resume(a1);
}

void sub_E6D1C4(void **a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2) {
    int v6 = 2;
  }
  else {
    int v6 = 1;
  }
  int v7 = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a3 + 112) = v6;
  *(_DWORD *)(a3 + 40) = v7 | 5;
  uint64_t v8 = *(void **)(a3 + 96);
  if (!v8)
  {
    uint64_t v9 = *(void *)(a3 + 8);
    char v10 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
    if (v9) {
      char v10 = (void *)*v10;
    }
    uint64_t v8 = sub_13551A0((uint64_t)v10);
    *(void *)(a3 + 96) = v8;
  }
  *((_DWORD *)v8 + 10) |= 1u;
  uint64_t v11 = v8[1];
  uint64_t v12 = (uint64_t *)(v11 & 0xFFFFFFFFFFFFFFFCLL);
  if (v11) {
    uint64_t v12 = (uint64_t *)*v12;
  }
  sub_1881DF4((std::string **)v8 + 6, (long long *)(a2 + 8), v12);
  uint64_t v13 = (long long *)(a2 + 32);
  *((_DWORD *)v8 + 10) |= 2u;
  uint64_t v14 = (std::string **)(v8 + 7);
  uint64_t v15 = v8[1];
  uint64_t v16 = (uint64_t **)(v15 & 0xFFFFFFFFFFFFFFFCLL);
  if (v15)
  {
    sub_1881DF4(v14, v13, *v16);
    uint64_t v17 = (const std::string **)(a2 + 56);
    if (sub_45FB38((void *)(a2 + 56))) {
      goto LABEL_12;
    }
  }
  else
  {
    sub_1881DF4(v14, v13, (uint64_t *)v16);
    uint64_t v17 = (const std::string **)(a2 + 56);
    if (sub_45FB38((void *)(a2 + 56)))
    {
LABEL_12:
      if (sub_45FB38((void *)(a2 + 216))
        && sub_45FB38((void *)(a2 + 376))
        && sub_45FB38((void *)(a2 + 536))
        && sub_45FB38((void *)(a2 + 696))
        && sub_45FB38((void *)(a2 + 856)))
      {
        goto LABEL_22;
      }
    }
  }
  *(_DWORD *)(a3 + 40) |= 2u;
  uint64_t v18 = *(void *)(a3 + 104);
  if (!v18)
  {
    uint64_t v19 = *(void *)(a3 + 8);
    unsigned int v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
    if (v19) {
      unsigned int v20 = (void *)*v20;
    }
    uint64_t v18 = sub_134DDF0((uint64_t)v20);
    *(void *)(a3 + 104) = v18;
  }
  sub_E6A030(v17, v18);
LABEL_22:
  uint64_t v21 = *(void *)(a2 + 1016);
  for (uint64_t i = *(void *)(a2 + 1024); v21 != i; v21 += 2128)
  {
    uint64_t v25 = *(_DWORD **)(a3 + 64);
    if (v25 && (uint64_t v26 = *(int *)(a3 + 56), (int)v26 < *v25))
    {
      *(_DWORD *)(a3 + 56) = v26 + 1;
      uint64_t v24 = *(void *)&v25[2 * v26 + 2];
    }
    else
    {
      uint64_t v23 = sub_1355284(*(void *)(a3 + 48));
      uint64_t v24 = sub_188CDC8(a3 + 48, v23);
    }
    sub_E6D430(a1, v21, v24);
  }
  uint64_t v27 = *(void *)(a2 + 1040);
  for (uint64_t j = *(void *)(a2 + 1048); v27 != j; v27 += 344)
  {
    while (1)
    {
      unint64_t v31 = *(_DWORD **)(a3 + 88);
      if (v31)
      {
        uint64_t v32 = *(int *)(a3 + 80);
        if ((int)v32 < *v31) {
          break;
        }
      }
      uint64_t v29 = sub_13551FC(*(void *)(a3 + 72));
      uint64_t v30 = sub_188CDC8(a3 + 72, (uint64_t)v29);
      sub_E6B0D4(v27, v30);
      v27 += 344;
      if (v27 == j) {
        return;
      }
    }
    *(_DWORD *)(a3 + 80) = v32 + 1;
    sub_E6B0D4(v27, *(void *)&v31[2 * v32 + 2]);
  }
}

void sub_E6D430(void **a1, uint64_t a2, uint64_t a3)
{
  sub_E6627C(a2, &__p);
  *(_DWORD *)(a3 + 40) |= 1u;
  uint64_t v6 = *(void *)(a3 + 8);
  int v7 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFFCLL);
  if (v6) {
    int v7 = (uint64_t *)*v7;
  }
  sub_1881E08((uint64_t *)(a3 + 48), (long long *)&__p, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(void *)(a2 + 880) != *(void *)(a2 + 888))
  {
    uint64_t v8 = sub_3755E4(*a1);
    *(_DWORD *)(a3 + 40) |= 4u;
    uint64_t v9 = *(void *)(a3 + 64);
    if (!v9)
    {
      uint64_t v10 = *(void *)(a3 + 8);
      uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      if (v10) {
        uint64_t v11 = (void *)*v11;
      }
      uint64_t v9 = sub_134E79C((uint64_t)v11);
      *(void *)(a3 + 64) = v9;
    }
    sub_E6AC94(v8, (uint64_t *)(a2 + 880), v9);
  }
  if (sub_980A20((void *)(a2 + 32)))
  {
    *(_DWORD *)(a3 + 40) |= 2u;
    uint64_t v12 = *(void *)(a3 + 56);
    if (!v12)
    {
      uint64_t v13 = *(void *)(a3 + 8);
      uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFCLL);
      if (v13) {
        uint64_t v14 = (void *)*v14;
      }
      uint64_t v12 = sub_13D7014((uint64_t)v14);
      *(void *)(a3 + 56) = v12;
    }
    sub_E6A64C(a2 + 32, v12);
  }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32(*(int32x4_t *)(a2 + 904), (int32x4_t)xmmword_20F0E10))) & 1) == 0
    && *(void *)(a2 + 920) != -1)
  {
    uint64_t v15 = sub_3755E4(*a1);
    *(_DWORD *)(a3 + 40) |= 8u;
    uint64_t v16 = *(void **)(a3 + 72);
    if (!v16)
    {
      uint64_t v17 = *(void *)(a3 + 8);
      uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFFCLL);
      if (v17) {
        uint64_t v18 = (void *)*v18;
      }
      uint64_t v16 = sub_134E8C4((uint64_t)v18);
      *(void *)(a3 + 72) = v16;
    }
    sub_E6ADF4(v15, a2 + 904, (uint64_t)v16);
  }
  if (*(void *)(a2 + 928) != *(void *)(a2 + 936))
  {
    uint64_t v19 = a2 + 928;
    *(_DWORD *)(a3 + 40) |= 0x10u;
    uint64_t v20 = *(void *)(a3 + 80);
    if (!v20)
    {
      uint64_t v21 = *(void *)(a3 + 8);
      int v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFCLL);
      if (v21) {
        int v22 = (void *)*v22;
      }
      uint64_t v20 = sub_134EAD8((uint64_t)v22);
      *(void *)(a3 + 80) = v20;
    }
    sub_E6BB64(v19, v20);
  }
}

void sub_E6D630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_E6D64C()
{
  byte_25FC057 = 1;
  word_25FC040 = 65;
  byte_25FC06F = 1;
  word_25FC058 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25FC100 = 0u;
  *(_OWORD *)&qword_25FC110 = 0u;
  dword_25FC120 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25FC100, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25FC100, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25FC100, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25FC100, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25FC087 = 8;
  strcpy((char *)&qword_25FC070, "any_mode");
  byte_25FC09F = 7;
  strcpy((char *)&dword_25FC088, "cycling");
  byte_25FC0B7 = 7;
  strcpy((char *)&dword_25FC0A0, "driving");
  byte_25FC0CF = 7;
  strcpy((char *)&dword_25FC0B8, "walking");
  qword_25FC0D8 = 0;
  qword_25FC0E0 = 0;
  qword_25FC0D0 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25FC0D0 = (uint64_t)v0;
  qword_25FC0D8 = (uint64_t)(v0 + 9);
  qword_25FC0E0 = (uint64_t)(v0 + 9);
  qword_25FC0E8 = 0;
  qword_25FC0F0 = 0;
  unk_25FC0F8 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25FC0F0 = (uint64_t)(v1 + 9);
  unk_25FC0F8 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25FC0E8 = (uint64_t)v1;
  return result;
}

void sub_E6D914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25FC110) {
    sub_20B0F18((void **)qword_25FC110);
  }
  uint64_t v37 = (void *)xmmword_25FC100;
  *(void *)&xmmword_25FC100 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_E6D9B4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_3757C8(a1);
  char v7 = sub_398020(v6, 0);
  int v8 = &v7[-*(int *)v7];
  if (*(unsigned __int16 *)v8 < 5u || (uint64_t v9 = *((unsigned __int16 *)v8 + 2)) == 0)
  {
    HIBYTE(v29) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_13;
  }
  char v10 = &v7[v9];
  uint64_t v11 = *(unsigned int *)v10;
  char v13 = &v10[v11 + 4];
  size_t v12 = *(unsigned int *)&v10[v11];
  if (v12 >= 0x17)
  {
    if ((v12 | 7) == 0x17) {
      uint64_t v15 = (v12 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v15 = v12 | 7;
    }
    p_dst = (long long *)operator new(v15 + 1);
    *((void *)&__dst + 1) = v12;
    uint64_t v29 = v15 - 0x7FFFFFFFFFFFFFFFLL;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v29) = *(_DWORD *)&v10[v11];
    p_dst = &__dst;
    if (!v12) {
      goto LABEL_12;
    }
  }
  memcpy(p_dst, v13, v12);
LABEL_12:
  *((unsigned char *)p_dst + v12) = 0;
LABEL_13:
  *(_DWORD *)(a3 + 40) |= 2u;
  uint64_t v16 = *(void *)(a3 + 8);
  uint64_t v17 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
  if (v16) {
    uint64_t v17 = (uint64_t *)*v17;
  }
  sub_1881E08((uint64_t *)(a3 + 80), &__dst, v17);
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v18 = (int *)sub_37B3A8((uint64_t)a1);
  *(_DWORD *)(a3 + 40) |= 8u;
  uint64_t v19 = *(std::string **)(a3 + 96);
  if (!v19)
  {
    uint64_t v20 = *(void *)(a3 + 8);
    uint64_t v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFFCLL);
    if (v20) {
      uint64_t v21 = (void *)*v21;
    }
    uint64_t v19 = (std::string *)sub_13D8EE0((uint64_t)v21);
    *(void *)(a3 + 96) = v19;
  }
  sub_E126C8(v18, (uint64_t)&__dst);
  sub_13AE040(v19, (uint64_t)&__dst);
  sub_13ADB2C(&__dst);
  uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
  if ((v22 & 0x80u) != 0) {
    uint64_t v22 = *(void *)(a2 + 8);
  }
  if (v22)
  {
    *(_DWORD *)(a3 + 40) |= 1u;
    uint64_t v23 = *(void *)(a3 + 8);
    uint64_t v24 = (uint64_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
    if (v23) {
      uint64_t v24 = (uint64_t *)*v24;
    }
    sub_1881DF4((std::string **)(a3 + 72), (long long *)a2, v24);
  }
  else
  {
    sub_51C5C((uint64_t)v27);
    sub_51D74((uint64_t)v27, (uint64_t)&__dst);
    *(_DWORD *)(a3 + 40) |= 1u;
    uint64_t v25 = *(void *)(a3 + 8);
    uint64_t v26 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFFCLL);
    if (v25) {
      uint64_t v26 = (uint64_t *)*v26;
    }
    sub_1881E08((uint64_t *)(a3 + 72), &__dst, v26);
    if (SHIBYTE(v29) < 0) {
      operator delete((void *)__dst);
    }
  }
}

void sub_E6DBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E6DC04()
{
  byte_25FC13F = 1;
  word_25FC128 = 65;
  byte_25FC157 = 1;
  word_25FC140 = 65;
  char v1 = 7;
  strcpy((char *)v0, "UNKNOWN");
  int v2 = 0;
  char v4 = 14;
  strcpy((char *)v3, "ROUTES_THROUGH");
  int v5 = 1;
  char v7 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v8 = 3;
  char v10 = 11;
  strcpy((char *)v9, "ROUTES_FROM");
  int v11 = 2;
  xmmword_25FC1B8 = 0u;
  *(_OWORD *)&qword_25FC1C8 = 0u;
  dword_25FC1D8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25FC1B8, (uint64_t)v0, (uint64_t)v0);
  sub_3A6EF0((uint64_t)&xmmword_25FC1B8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25FC1B8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25FC1B8, (uint64_t)v9, (uint64_t)v9);
  if (v10 < 0)
  {
    operator delete(v9[0]);
    if ((v7 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v3[0]);
      if ((v1 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v0[0]);
      goto LABEL_5;
    }
  }
  else if ((v7 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v4 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v1 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25FC16F = 8;
  strcpy((char *)&qword_25FC158, "any_mode");
  byte_25FC187 = 7;
  strcpy((char *)&dword_25FC170, "cycling");
  byte_25FC19F = 7;
  strcpy((char *)&dword_25FC188, "driving");
  byte_25FC1B7 = 7;
  strcpy((char *)&dword_25FC1A0, "walking");
}

void sub_E6DE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25FC1C8) {
    sub_20B0F5C((void **)qword_25FC1C8);
  }
  uint64_t v37 = (void *)xmmword_25FC1B8;
  *(void *)&xmmword_25FC1B8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_E6DF00(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(void *)(a1 + 88) = sub_3750CC(a2);
  uint64_t v6 = (void *)sub_37746C(a2);
  *(void *)(a1 + 96) = *v6;
  uint64_t v7 = v6[1];
  *(void *)(a1 + 104) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  memcpy((void *)(a1 + 112), v6 + 2, 0xF18uLL);
  uint64_t v8 = v6[485];
  *(void *)(a1 + 3976) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (void *)sub_377648(a2);
  *(void *)(a1 + 3984) = *v9;
  uint64_t v10 = v9[1];
  *(void *)(a1 + 3992) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  memcpy((void *)(a1 + 4000), v9 + 2, 0xF18uLL);
  uint64_t v11 = v9[485];
  *(void *)(a1 + 7864) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = 0;
  uint64_t v21 = operator new(0x20uLL);
  long long v22 = xmmword_20B91B0;
  strcpy((char *)v21, "RouteGeometryAnomalyDetector");
  std::string __p = 0;
  uint64_t v19 = 0;
  size_t v12 = sub_374CDC((uint64_t)a2, (uint64_t)&v21, (uint64_t *)&__p);
  *(void *)(a1 + 7880) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 7888) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 7928) = 0x7FFFFFFFFFFFFFFFLL;
  int64x2_t v13 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 7936) = v13;
  *(int64x2_t *)(a1 + 7952) = v13;
  *(int64x2_t *)(a1 + 7968) = v13;
  *(int64x2_t *)(a1 + 7984) = v13;
  *(void *)(a1 + 8000) = 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)(a1 + 8016) = v13;
  *(void *)(a1 + 8056) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8080) = 0x3FC999999999999ALL;
  *(_DWORD *)(a1 + 8088) = 6;
  *(void *)(a1 + 8096) = 50;
  sub_E6EB6C(a1 + 7872, v12);
  int v14 = (void **)__p;
  if (__p)
  {
    uint64_t v15 = v19;
    uint64_t v16 = __p;
    if (v19 != __p)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = __p;
    }
    uint64_t v19 = v14;
    operator delete(v16);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21);
  }
  sub_4BBDC0(a1 + 8104, a3);
  sub_3CCE64((uint64_t *)(a1 + 9640), a2);
  return a1;
}

void sub_E6E14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_4BCED0(v19);
  sub_368744(v17 + 3984);
  sub_368744(v17 + 96);
  sub_591F30(v18);
  uint64_t v21 = *(void **)(v17 + 24);
  if (v21)
  {
    *(void *)(v17 + 32) = v21;
    operator delete(v21);
    long long v22 = *(void **)v17;
    if (!*(void *)v17) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    long long v22 = *(void **)v17;
    if (!*(void *)v17) {
      goto LABEL_3;
    }
  }
  *(void *)(v17 + 8) = v22;
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_E6E1EC(uint64_t a1)
{
  sub_4BCED0(a1 + 8104);
  int v2 = *(std::__shared_weak_count **)(a1 + 7864);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 3992);
    if (!v3) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 3992);
    if (!v3) {
      goto LABEL_7;
    }
  }
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_7:
  char v4 = *(std::__shared_weak_count **)(a1 + 3976);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    int v5 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v5) {
      goto LABEL_13;
    }
  }
  else
  {
    int v5 = *(std::__shared_weak_count **)(a1 + 104);
    if (!v5) {
      goto LABEL_13;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_13:
  uint64_t v6 = *(void **)(a1 + 64);
  if (v6)
  {
    do
    {
      uint64_t v11 = (void *)*v6;
      size_t v12 = (void *)v6[4];
      if (v12)
      {
        v6[5] = v12;
        operator delete(v12);
      }
      operator delete(v6);
      uint64_t v6 = v11;
    }
    while (v11);
  }
  uint64_t v7 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(void *)(a1 + 32) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

void sub_E6E3C0(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = a1;
  sub_E79B48(a1, (uint64_t)v75);
  uint64_t v7 = 0;
  __int16 v74 = 1;
  uint64_t v58 = v6;
  uint64_t v54 = a2;
  do
  {
    int v8 = *((unsigned __int8 *)&v74 + v7);
    sub_E79C2C((char *)a2, (uint64_t)&v72);
    sub_3BF0C((uint64_t)v62, v75, (char **)&v72, v8 != 0);
    uint64_t v9 = sub_3C270((uint64_t *)v62);
    if (v9)
    {
      int v56 = v8;
      uint64_t v57 = v7;
      *(void *)long long v61 = 0;
      a3[1] = *a3;
      int v60 = 0;
      sub_2EBAD4((uint64_t)a3, &v60);
      uint64_t v10 = (char *)v65;
      uint64_t v59 = v66;
      if (v65 != v66)
      {
        uint64_t v11 = 0;
        do
        {
          if (v10[16])
          {
            size_t v12 = a3;
            uint64_t v13 = v9;
            uint64_t v14 = *(void *)sub_E6E93C(v6, *(void *)v10 - 1);
            if (v14 != v11)
            {
              uint64_t v16 = (char *)a3[1];
              unint64_t v15 = a3[2];
              if ((unint64_t)v16 < v15)
              {
                *(void *)uint64_t v16 = *(void *)v61;
                uint64_t v17 = (uint64_t)(v16 + 8);
LABEL_31:
                a3[1] = v17;
                uint64_t v11 = v14;
                uint64_t v6 = v58;
                goto LABEL_6;
              }
              uint64_t v18 = (char *)*a3;
              uint64_t v19 = (uint64_t)&v16[-*a3];
              uint64_t v20 = v19 >> 3;
              unint64_t v21 = (v19 >> 3) + 1;
              if (v21 >> 61) {
                sub_2E00();
              }
              uint64_t v22 = v15 - (void)v18;
              if (v22 >> 2 > v21) {
                unint64_t v21 = v22 >> 2;
              }
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v23 = v21;
              }
              if (v23)
              {
                if (v23 >> 61) {
                  sub_188D718();
                }
                uint64_t v24 = operator new(8 * v23);
                uint64_t v25 = &v24[8 * v20];
                *uint64_t v25 = *(void *)v61;
                uint64_t v17 = (uint64_t)(v25 + 1);
                if (v16 == v18) {
                  goto LABEL_28;
                }
LABEL_22:
                unint64_t v26 = v16 - 8 - v18;
                if (v26 < 0x58) {
                  goto LABEL_77;
                }
                if ((unint64_t)(v16 - &v24[v19]) < 0x20) {
                  goto LABEL_77;
                }
                uint64_t v27 = (v26 >> 3) + 1;
                uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v29 = &v16[-v28];
                uint64_t v25 = (void *)((char *)v25 - v28);
                uint64_t v30 = &v24[8 * v20 - 16];
                unint64_t v31 = v16 - 16;
                uint64_t v32 = v27 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v33 = *(_OWORD *)v31;
                  *(v30 - 1) = *((_OWORD *)v31 - 1);
                  *uint64_t v30 = v33;
                  v30 -= 2;
                  v31 -= 32;
                  v32 -= 4;
                }
                while (v32);
                uint64_t v16 = v29;
                if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_77:
                  do
                  {
                    uint64_t v34 = *((void *)v16 - 1);
                    v16 -= 8;
                    *--uint64_t v25 = v34;
                  }
                  while (v16 != v18);
                }
              }
              else
              {
                uint64_t v24 = 0;
                uint64_t v25 = (void *)(8 * v20);
                *(void *)(8 * v20) = *(void *)v61;
                uint64_t v17 = 8 * v20 + 8;
                if (v16 != v18) {
                  goto LABEL_22;
                }
              }
LABEL_28:
              a3 = v12;
              *size_t v12 = v25;
              v12[1] = v17;
              v12[2] = &v24[8 * v23];
              if (v18) {
                operator delete(v18);
              }
              uint64_t v9 = v13;
              goto LABEL_31;
            }
          }
          else
          {
            ++*(void *)v61;
          }
LABEL_6:
          v10 += 24;
        }
        while (v10 != v59);
      }
      char v35 = v9;
      sub_A4710((uint64_t)a3, v61);
      double v45 = v71;
      if (v71 == 0.0) {
        double v45 = 1.0;
      }
      uint64_t v46 = v69;
      double v47 = v70 / v45;
      a2 = v54;
      *(void *)a4 = v68;
      *(double *)(a4 + 8) = v47;
      *(void *)(a4 + 16) = v46;
      *(unsigned char *)(a4 + 24) = v56 == 0;
      uint64_t v7 = v57;
    }
    else
    {
      sub_3D224(v62, 0, (uint64_t)v61);
      if ((void)v72)
      {
        *((void *)&v72 + 1) = v72;
        operator delete((void *)v72);
      }
      long long v72 = *(_OWORD *)v61;
      uint64_t v73 = *(void *)&v61[16];
      sub_E79D10((double **)&v72, (uint64_t)v61);
      char v35 = v9;
      uint64_t v36 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v36;
        operator delete(v36);
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
      }
      uint64_t v37 = *(unsigned int **)v61;
      *(void *)a2 = *(void *)v61;
      uint64_t v38 = *(unsigned int **)&v61[8];
      *(_OWORD *)(a2 + 8) = *(_OWORD *)&v61[8];
      if (v37 != v38)
      {
        uint64_t v39 = v37 + 3;
        if (v37 + 3 != v38)
        {
          unsigned int v40 = *v37;
          while (1)
          {
            unsigned int v41 = v40;
            unsigned int v40 = *v39;
            if (__PAIR64__(*(v39 - 2), v41) == *(void *)v39 && *(v39 - 1) == v39[2]) {
              break;
            }
            v39 += 3;
            if (v39 == v38) {
              goto LABEL_49;
            }
          }
          uint64_t v42 = v39 - 3;
          if (v39 - 3 != v38)
          {
            uint64_t v43 = v39 + 3;
            if (v43 == v38)
            {
              uint64_t v44 = v42 + 3;
              if (v42 + 3 != v38) {
                goto LABEL_69;
              }
            }
            else
            {
              do
              {
                if (*v42 != *v43 || v42[1] != v43[1] || v42[2] != v43[2])
                {
                  unsigned int v48 = v43[2];
                  *(void *)(v42 + 3) = *(void *)v43;
                  v42 += 3;
                  v42[2] = v48;
                }
                v43 += 3;
              }
              while (v43 != v38);
              uint64_t v44 = v42 + 3;
              if (v42 + 3 != *(unsigned int **)(a2 + 8)) {
LABEL_69:
              }
                *(void *)(a2 + 8) = v44;
            }
          }
        }
      }
    }
LABEL_49:
    if (__p) {
      operator delete(__p);
    }
    if (v65)
    {
      uint64_t v66 = (char *)v65;
      operator delete(v65);
    }
    if (v63)
    {
      uint64_t v64 = v63;
      operator delete(v63);
    }
    if (v62[0])
    {
      v62[1] = v62[0];
      operator delete(v62[0]);
    }
    if ((void)v72)
    {
      *((void *)&v72 + 1) = v72;
      operator delete((void *)v72);
    }
    if (v35) {
      goto LABEL_70;
    }
    ++v7;
  }
  while (v7 != 2);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)a4 = _Q0;
  *(void *)(a4 + 16) = 0xBFF0000000000000;
  *(unsigned char *)(a4 + 24) = 0;
LABEL_70:
  if (v75[0])
  {
    v75[1] = v75[0];
    operator delete(v75[0]);
  }
}

void sub_E6E8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_3BF98((uint64_t)va);
  uint64_t v14 = (void *)v12[17];
  if (v14)
  {
    v12[18] = v14;
    operator delete(v14);
    unint64_t v15 = (void *)v12[22];
    if (!v15) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    unint64_t v15 = (void *)v12[22];
    if (!v15) {
      goto LABEL_3;
    }
  }
  v12[23] = v15;
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_E6E93C(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    size_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 24 * a2;
}

void sub_E6EA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_E6EB6C(uint64_t a1, void *a2)
{
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20E12D0;
  strcpy(v41[0], "enable_route_geometry_anomaly_detector");
  char v4 = sub_58070(a2, (uint64_t)v41);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)a1 = v5 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_6;
    }
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a1 != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_6:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9260;
  strcpy(v41[0], "enable_self_intersection_detector");
  uint64_t v6 = sub_58070(a2, (uint64_t)v41);
  if (v6 && (int v7 = *((_DWORD *)v6 + 12), (v7 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1) = v7 == 4;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1) = *(unsigned char *)(a1 + 1) != 0;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  operator delete(v41[0]);
LABEL_13:
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9260;
  strcpy(v41[0], "self_intersection_search_radius_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 8));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9960;
  strcpy(v41[0], "self_intersection_elevation_threshold_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 16));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A70;
  strcpy(v41[0], "enable_opposite_travel_direction_geometry_points_detector");
  int v8 = sub_58070(a2, (uint64_t)v41);
  if (v8 && (int v9 = *((_DWORD *)v8 + 12), (v9 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 24) = v9 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_22;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_22:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9260;
  strcpy(v41[0], "enable_route_line_jagged_detector");
  uint64_t v10 = sub_58070(a2, (uint64_t)v41);
  if (v10 && (int v11 = *((_DWORD *)v10 + 12), (v11 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 25) = v11 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_28;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 25) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_28:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v41[1] = xmmword_20B99C0;
  strcpy(v41[0], "enable_route_line_differs_from_center_line_bearings_detector");
  size_t v12 = sub_58070(a2, (uint64_t)v41);
  if (v12 && (int v13 = *((_DWORD *)v12 + 12), (v13 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 26) = v13 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_34;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 26) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_34:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v41[1] = xmmword_20B99E0;
  strcpy(v41[0], "enable_adjacent_bluelines_bearing_difference_detector");
  uint64_t v14 = sub_58070(a2, (uint64_t)v41);
  if (v14 && (int v15 = *((_DWORD *)v14 + 12), (v15 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 27) = v15 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_40;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 27) = *(unsigned char *)(a1 + 27) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_40:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v41[1] = xmmword_20B99E0;
  strcpy(v41[0], "enable_outside_of_transport_network_polygons_detector");
  std::string v16 = sub_58070(a2, (uint64_t)v41);
  if (v16 && (int v17 = *((_DWORD *)v16 + 12), (v17 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 28) = v17 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_46;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 28) = *(unsigned char *)(a1 + 28) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_46:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8FD0;
  strcpy(v41[0], "enable_excessive_tortuosity_detector");
  std::string v18 = sub_58070(a2, (uint64_t)v41);
  if (v18 && (int v19 = *((_DWORD *)v18 + 12), (v19 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 29) = v19 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_52;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 29) = *(unsigned char *)(a1 + 29) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_52:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9800;
  strcpy(v41[0], "enable_bad_elevations_detector");
  std::string::size_type v20 = sub_58070(a2, (uint64_t)v41);
  if (v20 && (int v21 = *((_DWORD *)v20 + 12), (v21 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 30) = v21 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_58;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 30) = *(unsigned char *)(a1 + 30) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_58:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A70;
  strcpy(v41[0], "enable_excessive_segment_geometry_distribution_diff_ratio");
  uint64_t v22 = sub_58070(a2, (uint64_t)v41);
  if (v22 && (int v23 = *((_DWORD *)v22 + 12), (v23 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 32) = v23 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_64;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a1 + 32) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_64:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "max_in_range_segment_search");
  uint64_t v24 = sub_58070(a2, (uint64_t)v41);
  if (v24 && *((_DWORD *)v24 + 12) == 1)
  {
    *(void *)(a1 + 40) = (unint64_t)*((double *)v24 + 5);
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_70;
    }
  }
  else
  {
    *(void *)(a1 + 40) = *(void *)(a1 + 40);
    if (SHIBYTE(v41[2]) < 0) {
LABEL_70:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "min_in_range_segment_search");
  uint64_t v25 = sub_58070(a2, (uint64_t)v41);
  if (v25 && *((_DWORD *)v25 + 12) == 1)
  {
    *(void *)(a1 + 48) = (unint64_t)*((double *)v25 + 5);
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
  }
  else
  {
    *(void *)(a1 + 48) = *(void *)(a1 + 48);
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
  }
  operator delete(v41[0]);
LABEL_77:
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9240;
  strcpy(v41[0], "fast_or_slow_check_threshold_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 56));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9260;
  strcpy(v41[0], "enable_high_acceleration_detector");
  unint64_t v26 = sub_58070(a2, (uint64_t)v41);
  if (v26 && (int v27 = *((_DWORD *)v26 + 12), (v27 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 31) = v27 == 4;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_85;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 31) = *(unsigned char *)(a1 + 31) != 0;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_85;
    }
  }
  operator delete(v41[0]);
LABEL_85:
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "drivable_lane_width_freeway");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 64));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9280;
  strcpy(v41[0], "drivable_lane_width_major_arterial");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 72));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9280;
  strcpy(v41[0], "drivable_lane_width_minor_arterial");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 80));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8870;
  strcpy(v41[0], "drivable_lane_width_local");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 88));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 19;
  strcpy((char *)v41, "cyclable_lane_width");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 96));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9240;
  strcpy(v41[0], "min_distance_offset_tolerance_freeway");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 104));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20E1380;
  strcpy(v41[0], "min_distance_offset_tolerance_major_arterial");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 112));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20E1380;
  strcpy(v41[0], "min_distance_offset_tolerance_minor_arterial");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 120));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B93A0;
  strcpy(v41[0], "min_distance_offset_tolerance_local");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 128));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9240;
  strcpy(v41[0], "distance_threshold_since_last_big_jag");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 144));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20B93D0;
  strcpy(v41[0], "distance_threshold_for_heading_difference");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 152));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A20;
  strcpy(v41[0], "distance_threshold_for_adjacent_bearing_difference");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 184));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "angle_threshold_for_big_jag");
  uint64_t v28 = sub_58070(a2, (uint64_t)v41);
  uint64_t v29 = (void *)(a1 + 160);
  if (v28)
  {
    uint64_t v29 = v28 + 5;
    if (*((_DWORD *)v28 + 12) != 1) {
      uint64_t v29 = (void *)(a1 + 160);
    }
  }
  *(void *)(a1 + 160) = *v29;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9240;
  strcpy(v41[0], "angle_threshold_for_adjacent_flowline");
  uint64_t v30 = sub_58070(a2, (uint64_t)v41);
  unint64_t v31 = (void *)(a1 + 168);
  if (v30)
  {
    unint64_t v31 = v30 + 5;
    if (*((_DWORD *)v30 + 12) != 1) {
      unint64_t v31 = (void *)(a1 + 168);
    }
  }
  *(void *)(a1 + 168) = *v31;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A40;
  strcpy(v41[0], "angle_threshold_for_big_heading_difference");
  uint64_t v32 = sub_58070(a2, (uint64_t)v41);
  uint64_t v33 = (void *)(a1 + 176);
  if (v32)
  {
    uint64_t v33 = v32 + 5;
    if (*((_DWORD *)v32 + 12) != 1) {
      uint64_t v33 = (void *)(a1 + 176);
    }
  }
  *(void *)(a1 + 176) = *v33;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91B0;
  strcpy(v41[0], "width_offset_tolerance_ratio");
  uint64_t v34 = sub_58070(a2, (uint64_t)v41);
  char v35 = (void *)(a1 + 136);
  if (v34)
  {
    char v35 = v34 + 5;
    if (*((_DWORD *)v34 + 12) != 1) {
      char v35 = (void *)(a1 + 136);
    }
  }
  *(void *)(a1 + 136) = *v35;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9260;
  strcpy(v41[0], "max_backward_segment_search_index");
  uint64_t v36 = sub_58070(a2, (uint64_t)v41);
  if (v36 && *((_DWORD *)v36 + 12) == 1)
  {
    *(void *)(a1 + 192) = (unint64_t)*((double *)v36 + 5);
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_134;
    }
  }
  else
  {
    *(void *)(a1 + 192) = *(void *)(a1 + 192);
    if (SHIBYTE(v41[2]) < 0) {
LABEL_134:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9390;
  strcpy(v41[0], "max_forward_segment_search_index");
  uint64_t v37 = sub_58070(a2, (uint64_t)v41);
  if (v37 && *((_DWORD *)v37 + 12) == 1)
  {
    *(void *)(a1 + 200) = (unint64_t)*((double *)v37 + 5);
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_140;
    }
  }
  else
  {
    *(void *)(a1 + 200) = *(void *)(a1 + 200);
    if (SHIBYTE(v41[2]) < 0) {
LABEL_140:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "excess_tortuosity_threshold");
  uint64_t v38 = sub_58070(a2, (uint64_t)v41);
  uint64_t v39 = (void *)(a1 + 208);
  if (v38)
  {
    uint64_t v39 = v38 + 5;
    if (*((_DWORD *)v38 + 12) != 1) {
      uint64_t v39 = (void *)(a1 + 208);
    }
  }
  *(void *)(a1 + 208) = *v39;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 20;
  strcpy((char *)v41, "max_divison_line_frc");
  unsigned int v40 = sub_58070(a2, (uint64_t)v41);
  if (v40 && *((_DWORD *)v40 + 12) == 1)
  {
    *(_DWORD *)(a1 + 216) = *((double *)v40 + 5);
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_152;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 216) = *(_DWORD *)(a1 + 216);
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_152;
    }
  }
  operator delete(v41[0]);
LABEL_152:
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20B93E0;
  strcpy(v41[0], "min_anomaly_distance_across_division_line_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 224));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
}

void sub_E6FB94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 25) < 0) {
    operator delete(*(void **)(v1 - 48));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E6FC40(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 4);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    size_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 16 * a2;
}

void sub_E6FD70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_E6FE50(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(void *)(a1 + 88) = sub_3750CC(a2);
  uint64_t v6 = (void *)sub_37746C(a2);
  *(void *)(a1 + 96) = *v6;
  uint64_t v7 = v6[1];
  *(void *)(a1 + 104) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  memcpy((void *)(a1 + 112), v6 + 2, 0xF18uLL);
  uint64_t v8 = v6[485];
  *(void *)(a1 + 3976) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  long long v9 = (void *)sub_377648(a2);
  *(void *)(a1 + 3984) = *v9;
  uint64_t v10 = v9[1];
  *(void *)(a1 + 3992) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  memcpy((void *)(a1 + 4000), v9 + 2, 0xF18uLL);
  uint64_t v11 = v9[485];
  *(void *)(a1 + 7864) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = 0;
  int v21 = operator new(0x20uLL);
  long long v22 = xmmword_20B91B0;
  strcpy((char *)v21, "RouteGeometryAnomalyDetector");
  std::string __p = 0;
  long long v19 = 0;
  size_t v12 = sub_374CDC((uint64_t)a2, (uint64_t)&v21, (uint64_t *)&__p);
  *(void *)(a1 + 7880) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 7888) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 7928) = 0x7FFFFFFFFFFFFFFFLL;
  int64x2_t v13 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 7936) = v13;
  *(int64x2_t *)(a1 + 7952) = v13;
  *(int64x2_t *)(a1 + 7968) = v13;
  *(int64x2_t *)(a1 + 7984) = v13;
  *(void *)(a1 + 8000) = 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)(a1 + 8016) = v13;
  *(void *)(a1 + 8056) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8080) = 0x3FC999999999999ALL;
  *(_DWORD *)(a1 + 8088) = 6;
  *(void *)(a1 + 8096) = 50;
  sub_E75DB4(a1 + 7872, v12);
  uint64_t v14 = (void **)__p;
  if (__p)
  {
    std::string v15 = v19;
    std::string v16 = __p;
    if (v19 != __p)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      std::string v16 = __p;
    }
    long long v19 = v14;
    operator delete(v16);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21);
  }
  sub_4BBDC0(a1 + 8104, a3);
  sub_3CCE64((uint64_t *)(a1 + 9640), a2);
  return a1;
}

void sub_E7009C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_4BCED0(v19);
  sub_368744(v17 + 3984);
  sub_368744(v17 + 96);
  sub_591F30(v18);
  int v21 = *(void **)(v17 + 24);
  if (v21)
  {
    *(void *)(v17 + 32) = v21;
    operator delete(v21);
    long long v22 = *(void **)v17;
    if (!*(void *)v17) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    long long v22 = *(void **)v17;
    if (!*(void *)v17) {
      goto LABEL_3;
    }
  }
  *(void *)(v17 + 8) = v22;
  operator delete(v22);
  _Unwind_Resume(a1);
}

void **sub_E7013C(void **a1, void *a2)
{
  if (*a1 == a1[1])
  {
    char v4 = a2;
    int v5 = sub_E70764(a1, a2);
    unint64_t v98 = sub_46C760(v4);
    if (v98)
    {
      uint64_t v6 = 0;
      uint64_t v97 = v4;
      uint64_t v96 = v5;
      do
      {
        uint64_t v7 = sub_46C8EC(v4, v6);
        sub_2954EC((uint64_t)a1[11], *(void *)(v7 + 32), (uint64_t)v100);
        sub_2E4B5C((uint64_t)v100, &__dst);
        if (__p)
        {
          int v102 = __p;
          operator delete(__p);
        }
        if (!v6)
        {
          unint64_t v12 = sub_450B4C((uint64_t *)&__dst, 0, -1 - 0x5555555555555555 * ((v104 - (unsigned char *)__dst) >> 2), (_DWORD *)*v5 + 2, 1, 0x7FFFFFFFFFFFFFFFLL, 1, v8, v9, v10, v11);
          uint64_t v18 = __dst;
          if (v12)
          {
            uint64_t v19 = (char *)__dst + 12 * v12;
            uint64_t v20 = v104 - v19;
            if (v104 != v19) {
              memmove(__dst, v19, v104 - v19);
            }
            v104 = (char *)v18 + v20;
            uint64_t v18 = __dst;
            int v5 = v96;
            char v4 = v97;
          }
          LODWORD(v13) = *v18;
          LODWORD(v14) = v18[1];
          double v21 = (double)v13;
          double v22 = (double)v14;
          LODWORD(v14) = v18[3];
          LODWORD(v15) = v18[4];
          LODWORD(v16) = *((_DWORD *)*v5 + 2);
          LODWORD(v17) = *((_DWORD *)*v5 + 3);
          double v23 = (double)v14 - v21;
          double v24 = (double)v15 - v22;
          double v25 = v23 * ((double)v16 - v21) + v24 * ((double)v17 - v22);
          double v26 = v23 * v23 + v24 * v24;
          BOOL v27 = fabs(v26) < 2.22044605e-16 || v26 == 0.0;
          double v28 = v25 / v26;
          if (v27) {
            double v28 = 1.79769313e308;
          }
          if (v28 <= 0.0)
          {
            uint64_t v32 = *(void *)v18;
            unsigned int v33 = v18[2];
          }
          else if (v28 >= 1.0)
          {
            uint64_t v32 = *(void *)(v18 + 3);
            unsigned int v33 = v18[5];
          }
          else
          {
            int v29 = v18[2];
            if (v29 == 0x7FFFFFFF)
            {
              BOOL v30 = 0;
              double v31 = 0.0;
            }
            else
            {
              double v34 = (double)v29;
              int v35 = v18[5];
              BOOL v27 = v35 == 0x7FFFFFFF;
              double v31 = v28 * ((double)v35 - v34) + v34;
              BOOL v30 = v35 != 0x7FFFFFFF;
              if (v27) {
                double v31 = 0.0;
              }
            }
            double v36 = v24 * v28;
            double v37 = v23 * v28 + v21;
            if (v37 < 0.0) {
              double v38 = -0.5;
            }
            else {
              double v38 = 0.5;
            }
            uint64_t v39 = (v37 + v38);
            double v40 = v36 + v22;
            if (v40 < 0.0) {
              double v41 = -0.5;
            }
            else {
              double v41 = 0.5;
            }
            LODWORD(v42) = (v40 + v41);
            if (v31 < 0.0) {
              double v43 = -0.5;
            }
            else {
              double v43 = 0.5;
            }
            if (v30) {
              unsigned int v33 = (v31 + v43);
            }
            else {
              unsigned int v33 = 0x7FFFFFFF;
            }
            if (v42 >= 0xFFFFFFFE) {
              uint64_t v42 = 4294967294;
            }
            else {
              uint64_t v42 = v42;
            }
            uint64_t v32 = v39 | (v42 << 32);
          }
          *(void *)uint64_t v18 = v32;
          v18[2] = v33;
        }
        if (v6 + 1 == sub_46C760(v4))
        {
          unint64_t v48 = sub_450B4C((uint64_t *)&__dst, 0, -1 - 0x5555555555555555 * ((v104 - (unsigned char *)__dst) >> 2), (_DWORD *)v5[1] - 4, 1, 0x7FFFFFFFFFFFFFFFLL, 1, v44, v45, v46, v47);
          if ((char *)__dst + 12 * v48 + 24 != v104) {
            v104 = (char *)__dst + 12 * v48 + 24;
          }
          uint64_t v54 = (char *)__dst + 12 * v48;
          uint64_t v55 = v54 + 3;
          int v56 = v5[1];
          LODWORD(v49) = *v54;
          LODWORD(v50) = v54[1];
          double v57 = (double)v49;
          double v58 = (double)v50;
          LODWORD(v51) = v54[4];
          LODWORD(v52) = *(v56 - 4);
          LODWORD(v53) = *(v56 - 3);
          double v59 = (double)v54[3] - v57;
          double v60 = (double)v51 - v58;
          double v61 = v59 * ((double)v52 - v57) + v60 * ((double)v53 - v58);
          double v62 = v59 * v59 + v60 * v60;
          BOOL v63 = fabs(v62) < 2.22044605e-16 || v62 == 0.0;
          double v64 = v61 / v62;
          if (v63) {
            double v64 = 1.79769313e308;
          }
          if (v64 <= 0.0)
          {
            uint64_t v68 = *(void *)v54;
            unsigned int v69 = v54[2];
          }
          else if (v64 >= 1.0)
          {
            uint64_t v68 = *(void *)v55;
            unsigned int v69 = v54[5];
          }
          else
          {
            int v65 = *((_DWORD *)__dst + 3 * v48 + 2);
            if (v65 == 0x7FFFFFFF)
            {
              BOOL v66 = 0;
              double v67 = 0.0;
            }
            else
            {
              int v70 = *((_DWORD *)__dst + 3 * v48 + 5);
              BOOL v27 = v70 == 0x7FFFFFFF;
              double v67 = v64 * ((double)v70 - (double)v65) + (double)v65;
              BOOL v66 = v70 != 0x7FFFFFFF;
              if (v27) {
                double v67 = 0.0;
              }
            }
            double v71 = v60 * v64;
            double v72 = v59 * v64 + v57;
            if (v72 < 0.0) {
              double v73 = -0.5;
            }
            else {
              double v73 = 0.5;
            }
            uint64_t v74 = (v72 + v73);
            double v75 = v71 + v58;
            if (v75 < 0.0) {
              double v76 = -0.5;
            }
            else {
              double v76 = 0.5;
            }
            LODWORD(v77) = (v75 + v76);
            if (v67 < 0.0) {
              double v78 = -0.5;
            }
            else {
              double v78 = 0.5;
            }
            if (v66) {
              unsigned int v69 = (v67 + v78);
            }
            else {
              unsigned int v69 = 0x7FFFFFFF;
            }
            if (v77 >= 0xFFFFFFFE) {
              uint64_t v77 = 4294967294;
            }
            else {
              uint64_t v77 = v77;
            }
            uint64_t v68 = v74 | (v77 << 32);
          }
          *(void *)uint64_t v55 = v68;
          v55[2] = v69;
        }
        uint64_t v99 = v6 + 1;
        uint64_t v80 = (char *)__dst;
        uint64_t v79 = v104;
        if (__dst != v104)
        {
          uint64_t v81 = (char *)a1[1];
          do
          {
            unint64_t v84 = (unint64_t)a1[2];
            if ((unint64_t)v81 < v84)
            {
              *(void *)uint64_t v81 = v6;
              uint64_t v82 = *(void *)v80;
              *((_DWORD *)v81 + 4) = *((_DWORD *)v80 + 2);
              *((void *)v81 + 1) = v82;
              uint64_t v83 = v81 + 24;
            }
            else
            {
              uint64_t v85 = (char *)*a1;
              unint64_t v86 = 0xAAAAAAAAAAAAAAABLL * ((v81 - (unsigned char *)*a1) >> 3);
              unint64_t v87 = v86 + 1;
              if (v86 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_2E00();
              }
              unint64_t v88 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v84 - (void)v85) >> 3);
              if (2 * v88 > v87) {
                unint64_t v87 = 2 * v88;
              }
              if (v88 >= 0x555555555555555) {
                unint64_t v89 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v89 = v87;
              }
              if (v89)
              {
                if (v89 > 0xAAAAAAAAAAAAAAALL) {
                  sub_188D718();
                }
                uint64_t v90 = (char *)operator new(24 * v89);
              }
              else
              {
                uint64_t v90 = 0;
              }
              uint64_t v91 = &v90[24 * v86];
              *(void *)uint64_t v91 = v6;
              uint64_t v92 = *(void *)v80;
              *((_DWORD *)v91 + 4) = *((_DWORD *)v80 + 2);
              *((void *)v91 + 1) = v92;
              uint64_t v93 = v91;
              if (v81 != v85)
              {
                do
                {
                  long long v94 = *(_OWORD *)(v81 - 24);
                  *((void *)v93 - 1) = *((void *)v81 - 1);
                  *(_OWORD *)(v93 - 24) = v94;
                  v93 -= 24;
                  v81 -= 24;
                }
                while (v81 != v85);
                uint64_t v81 = (char *)*a1;
              }
              v95 = &v90[24 * v89];
              uint64_t v83 = v91 + 24;
              *a1 = v93;
              a1[1] = v91 + 24;
              a1[2] = v95;
              if (v81) {
                operator delete(v81);
              }
            }
            a1[1] = v83;
            v80 += 12;
            uint64_t v81 = v83;
          }
          while (v80 != v79);
          uint64_t v80 = (char *)__dst;
          int v5 = v96;
          char v4 = v97;
        }
        if (v80)
        {
          v104 = v80;
          operator delete(v80);
        }
        ++v6;
      }
      while (v99 != v98);
    }
  }
  return a1;
}

void sub_E70724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **sub_E70764(void *a1, void *a2)
{
  int v2 = (void **)(a1 + 3);
  if (a1[3] == a1[4])
  {
    char v4 = a2;
    unint64_t v29 = sub_46C760(a2);
    if (v29)
    {
      uint64_t v6 = 0;
      double v28 = v4;
      do
      {
        uint64_t v7 = sub_650EEC((uint64_t)v4, v6);
        if (v6) {
          unsigned int v8 = 0;
        }
        else {
          unsigned int v8 = 1000000000 - sub_46CABC((uint64_t)v4);
        }
        uint64_t v9 = v6 + 1;
        unint64_t v10 = sub_46C760(v4);
        unsigned int v11 = 1000000000;
        if (v6 + 1 == v10) {
          unsigned int v11 = sub_46CAC4((uint64_t)v4);
        }
        sub_31854(v7, 0, &v30, (double)v8 / 1000000000.0, (double)v11 / 1000000000.0);
        unint64_t v13 = v30;
        unint64_t v12 = v31;
        if (v30 != v31)
        {
          unint64_t v14 = (_DWORD *)a1[4];
          do
          {
            while (1)
            {
              unint64_t v16 = a1[5];
              if ((unint64_t)v14 >= v16) {
                break;
              }
              *(void *)unint64_t v14 = v6;
              uint64_t v15 = *(void *)v13;
              v14[4] = v13[2];
              *((void *)v14 + 1) = v15;
              a1[4] = v14 + 6;
              v13 += 3;
              v14 += 6;
              if (v13 == v12) {
                goto LABEL_31;
              }
            }
            unint64_t v17 = *v2;
            unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (unsigned char *)*v2) >> 3);
            unint64_t v19 = v18 + 1;
            if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_2E00();
            }
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)v17) >> 3);
            if (2 * v20 > v19) {
              unint64_t v19 = 2 * v20;
            }
            if (v20 >= 0x555555555555555) {
              unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21)
            {
              if (v21 > 0xAAAAAAAAAAAAAAALL) {
                sub_188D718();
              }
              double v22 = (char *)operator new(24 * v21);
            }
            else
            {
              double v22 = 0;
            }
            double v23 = &v22[24 * v18];
            *(void *)double v23 = v6;
            uint64_t v24 = *(void *)v13;
            *((_DWORD *)v23 + 4) = v13[2];
            *((void *)v23 + 1) = v24;
            double v25 = v23;
            if (v14 != v17)
            {
              do
              {
                long long v26 = *(_OWORD *)(v14 - 6);
                *((void *)v25 - 1) = *((void *)v14 - 1);
                *(_OWORD *)(v25 - 24) = v26;
                v25 -= 24;
                v14 -= 6;
              }
              while (v14 != v17);
              unint64_t v14 = *v2;
            }
            BOOL v27 = v23 + 24;
            a1[3] = v25;
            a1[4] = v23 + 24;
            a1[5] = &v22[24 * v21];
            if (v14) {
              operator delete(v14);
            }
            a1[4] = v27;
            v13 += 3;
            unint64_t v14 = v27;
          }
          while (v13 != v12);
LABEL_31:
          uint64_t v9 = v6 + 1;
          unint64_t v13 = v30;
          char v4 = v28;
        }
        if (v13)
        {
          double v31 = v13;
          operator delete(v13);
        }
        uint64_t v6 = v9;
      }
      while (v9 != v29);
    }
  }
  return v2;
}

void sub_E709F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E70A14(uint64_t a1, void *a2)
{
  unsigned int v3 = sub_63BD44(0, 1.0);
  unsigned int v4 = sub_63BD44(1, 1.0);
  unsigned int v5 = sub_63BD44(2, 1.0);
  unsigned int v6 = sub_63BD44(3, 1.0);
  unsigned int v7 = sub_63BD44(4, 1.0);
  unsigned int v8 = (double *)operator new(0x50uLL);
  *(void *)&__p.f64[1] = v8 + 10;
  v150 = v8 + 10;
  double *v8 = 0.0;
  v8[1] = (double)v3;
  v8[2] = 1.0;
  v8[3] = (double)v4;
  v8[4] = 4.0;
  v8[5] = (double)v5;
  v8[6] = 10.0;
  v8[7] = (double)v6;
  v8[8] = 20.0;
  v8[9] = (double)v7;
  *(void *)&__p.f64[0] = v8;
  sub_65DB8((uint64_t)&__p, 1, (uint64_t *)v148);
  if (*(void *)&__p.f64[0])
  {
    __p.f64[1] = __p.f64[0];
    operator delete(*(void **)&__p.f64[0]);
  }
  uint64_t v145 = a1 + 3984;
  long long v146 = xmmword_20F0E60;
  int64x2_t v147 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  unint64_t v116 = sub_46C760(a2);
  if (v116)
  {
    uint64_t v9 = 0;
    uint64_t v120 = (uint64_t)(a2 + 1510);
    v115 = a2;
    while (1)
    {
      uint64_t v118 = v9;
      unint64_t v10 = (int **)sub_46C8EC(a2, v9);
      unsigned int v11 = v10;
      unint64_t v12 = (unsigned __int16 *)((char *)*v10 - **v10);
      if (*v12 >= 0xBu && (uint64_t v13 = v12[5]) != 0) {
        int v124 = *((unsigned __int8 *)*v10 + v13 + 1) >> 7;
      }
      else {
        int v124 = 0;
      }
      unint64_t v14 = (int *)sub_E79854(*(void *)(a1 + 88), *((unsigned int *)v10 + 8) | ((unint64_t)*((unsigned __int16 *)v10 + 18) << 32));
      uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
      if (*v15 >= 0x11u)
      {
        uint64_t v16 = v15[8];
        if (v16)
        {
          if ((*(_WORD *)((unsigned char *)v14 + v16) & 0x40) != 0)
          {
            unint64_t v17 = (unsigned __int16 *)((char *)*v11 - **v11);
            if (*v17 < 0x1Bu
              || (uint64_t v18 = v17[13]) == 0
              || *(_DWORD *)(a1 + 8088) >= *((unsigned __int8 *)*v11 + v18))
            {
              unint64_t v19 = (void *)sub_46C8EC(a2, v118);
              unint64_t v20 = (unsigned __int16 *)(*v19 - *(int *)*v19);
              if (*v20 < 0xBu
                || (uint64_t v21 = v20[5]) == 0
                || ((*(_DWORD *)(*v19 + v21) ^ ((*(_DWORD *)(*v19 + v21) & 2u) >> 1)) & 1) == 0)
              {
                double v22 = (void *)sub_46C8EC(a2, v118);
                double v23 = (unsigned __int16 *)(*v22 - *(int *)*v22);
                if (*v23 < 0xBu) {
                  break;
                }
                uint64_t v24 = v23[5];
                if (!v24 || (*(unsigned char *)(*v22 + v24) & 4) == 0) {
                  break;
                }
              }
            }
          }
        }
      }
LABEL_5:
      uint64_t v9 = v118 + 1;
      if (v118 + 1 == v116) {
        goto LABEL_155;
      }
    }
    double v25 = sub_650EEC((uint64_t)a2, v118);
    double v26 = 0.0;
    if (!v118) {
      double v26 = (double)(1000000000 - sub_46CABC((uint64_t)a2)) / 1000000000.0;
    }
    unint64_t v27 = sub_46C760(a2);
    double v28 = 1.0;
    if (v118 + 1 == v27) {
      double v28 = (double)sub_46CAC4((uint64_t)a2) / 1000000000.0;
    }
    sub_31854(v25, 0, &v143, v26, v28);
    v140 = 0;
    v141 = 0;
    uint64_t v142 = 0;
    unint64_t v29 = v143;
    BOOL v30 = v144;
    v137 = (char **)&v140;
    if (v143 != v144)
    {
      do
      {
        v31.i64[0] = *v29;
        v31.i64[1] = HIDWORD(*v29);
        float64x2_t __p = vcvtq_f64_u64(v31);
        sub_343E08(&v137, &__p);
        unint64_t v29 = (void *)((char *)v29 + 12);
      }
      while (v29 != v30);
    }
    sub_2954EC(*(void *)(a1 + 88), (uint64_t)v11[4], (uint64_t)&v137);
    sub_2E4B5C((uint64_t)&v137, v133);
    LOBYTE(v151) = 1;
    float64x2_t __p = *(float64x2_t *)v133;
    v150 = v134;
    v133[0] = 0;
    v133[1] = 0;
    v134 = 0;
    sub_717DA4(&v145, (uint64_t *)&v143, (uint64_t)&__p, &v135);
    if ((_BYTE)v151)
    {
      if (*(void *)&__p.f64[0])
      {
        __p.f64[1] = __p.f64[0];
        operator delete(*(void **)&__p.f64[0]);
      }
      LOBYTE(v151) = 0;
    }
    if (v133[0])
    {
      v133[1] = v133[0];
      operator delete(v133[0]);
    }
    double v34 = v136;
    if (v136 == v135)
    {
LABEL_141:
      if (v34)
      {
        uint64_t v112 = v136;
        v113 = v34;
        if (v136 != v34)
        {
          do
          {
            v114 = (void *)*((void *)v112 - 3);
            if (v114)
            {
              *((void *)v112 - 2) = v114;
              operator delete(v114);
            }
            v112 -= 32;
          }
          while (v112 != v34);
          v113 = v135;
        }
        v136 = v34;
        operator delete(v113);
      }
      if (v138)
      {
        v139 = v138;
        operator delete(v138);
      }
      a2 = v115;
      if (v140)
      {
        v141 = v140;
        operator delete(v140);
      }
      if (v143)
      {
        v144 = v143;
        operator delete(v143);
      }
      goto LABEL_5;
    }
    uint64_t v35 = 0;
    uint64_t v117 = (v136 - (unsigned char *)v135) >> 5;
    while (1)
    {
      v133[0] = 0;
      v133[1] = 0;
      v134 = 0;
      v130 = 0;
      v131 = 0;
      v132 = 0;
      double v36 = (char *)v135;
      uint64_t v119 = v35 + 1;
      if (v35 + 1 >= (unint64_t)((v136 - (unsigned char *)v135) >> 5))
      {
        uint64_t v37 = (v141 - (unsigned char *)v140) >> 4;
        double v45 = (char *)v135 + 32 * v35;
        uint64_t v39 = (char *)*((void *)v45 + 1);
        double v41 = (char *)*((void *)v45 + 2);
        double v40 = v45 + 8;
        uint64_t v42 = v41 - v39;
        if (v41 == v39)
        {
LABEL_43:
          double v44 = 0;
          if (v39 == v41) {
            goto LABEL_44;
          }
LABEL_48:
          while (2)
          {
            LODWORD(v32) = *(_DWORD *)v39;
            LODWORD(v33) = *((_DWORD *)v39 + 1);
            double v50 = (double)(unint64_t)v32;
            double v51 = (double)*(unint64_t *)&v33;
            if (v44 < v134)
            {
              *double v44 = v50;
              v44[1] = v51;
              unint64_t v49 = v44 + 2;
              goto LABEL_47;
            }
            unint64_t v52 = (double *)v133[0];
            uint64_t v53 = ((char *)v44 - (char *)v133[0]) >> 4;
            unint64_t v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 60) {
              sub_2E00();
            }
            uint64_t v55 = (char *)v134 - (char *)v133[0];
            if (((char *)v134 - (char *)v133[0]) >> 3 > v54) {
              unint64_t v54 = v55 >> 3;
            }
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v56 = v54;
            }
            if (v56)
            {
              if (v56 >> 60) {
                sub_188D718();
              }
              double v57 = (char *)operator new(16 * v56);
              double v58 = (double *)&v57[16 * v53];
              *double v58 = v50;
              v58[1] = v51;
              double v59 = v58;
              if (v44 == v52)
              {
LABEL_63:
                double v61 = (double *)&v57[16 * v56];
                unint64_t v49 = v58 + 2;
                v133[0] = v59;
                v133[1] = v58 + 2;
                v134 = v61;
                if (v44) {
                  goto LABEL_64;
                }
                goto LABEL_47;
              }
            }
            else
            {
              double v57 = 0;
              double v58 = (double *)(16 * v53);
              *double v58 = v50;
              v58[1] = v51;
              double v59 = (double *)(16 * v53);
              if (v44 == v52) {
                goto LABEL_63;
              }
            }
            do
            {
              long long v32 = *((_OWORD *)v44 - 1);
              *((_OWORD *)v59 - 1) = v32;
              v59 -= 2;
              v44 -= 2;
            }
            while (v44 != v52);
            double v44 = (double *)v133[0];
            double v60 = (double *)&v57[16 * v56];
            unint64_t v49 = v58 + 2;
            v133[0] = v59;
            v133[1] = v58 + 2;
            v134 = v60;
            if (v44) {
LABEL_64:
            }
              operator delete(v44);
LABEL_47:
            v133[1] = v49;
            v39 += 12;
            double v44 = (double *)v49;
            if (v39 == v41)
            {
              double v46 = v130;
              double v47 = &v36[32 * v35];
              unint64_t v48 = v37 - *(void *)v47;
              if (v48 <= (v132 - (unsigned char *)v130) >> 4) {
                goto LABEL_72;
              }
LABEL_66:
              if (!(v48 >> 60))
              {
                double v62 = v131;
                BOOL v63 = (char *)operator new(16 * v48);
                double v64 = &v63[(v62 - v46) & 0xFFFFFFFFFFFFFFF0];
                int v65 = v64;
                if (v62 != v46)
                {
                  BOOL v66 = &v63[(v62 - v46) & 0xFFFFFFFFFFFFFFF0];
                  do
                  {
                    int v65 = v66 - 16;
                    *((_OWORD *)v66 - 1) = *((_OWORD *)v62 - 1);
                    v62 -= 16;
                    v66 -= 16;
                  }
                  while (v62 != v46);
                }
                v130 = v65;
                v131 = v64;
                v132 = &v63[16 * v48];
                if (v46) {
                  operator delete(v46);
                }
                goto LABEL_72;
              }
LABEL_162:
              sub_2E00();
            }
            continue;
          }
        }
      }
      else
      {
        uint64_t v37 = *((void *)v135 + 4 * v35 + 4);
        double v38 = (char *)v135 + 32 * v35;
        uint64_t v39 = (char *)*((void *)v38 + 1);
        double v41 = (char *)*((void *)v38 + 2);
        double v40 = v38 + 8;
        uint64_t v42 = v41 - v39;
        if (v41 == v39) {
          goto LABEL_43;
        }
      }
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (v42 >> 2);
      if (v43 >> 60) {
        goto LABEL_162;
      }
      double v44 = (double *)operator new(0xAAAAAAAAAAAAAAB0 * (v42 >> 2));
      v133[0] = v44;
      v133[1] = v44;
      v134 = &v44[2 * v43];
      uint64_t v39 = *(char **)v40;
      double v41 = (char *)*((void *)v40 + 1);
      if (*(char **)v40 != v41) {
        goto LABEL_48;
      }
LABEL_44:
      double v46 = 0;
      double v47 = &v36[32 * v35];
      unint64_t v48 = v37 - *(void *)v47;
      if (v37 != *(void *)v47) {
        goto LABEL_66;
      }
LABEL_72:
      if (*(void *)v47 != v37)
      {
        uint64_t v100 = (char *)v140 + 16 * v37;
        uint64_t v101 = (char *)v140 + 16 * *(void *)v47;
        int v102 = (char *)v131;
        do
        {
          if (v102 < v132)
          {
            *(_OWORD *)int v102 = *(_OWORD *)v101;
            uint64_t v103 = v102 + 16;
          }
          else
          {
            v104 = (char *)v130;
            uint64_t v105 = (v102 - (unsigned char *)v130) >> 4;
            unint64_t v106 = v105 + 1;
            if ((unint64_t)(v105 + 1) >> 60) {
              sub_2E00();
            }
            uint64_t v107 = v132 - (unsigned char *)v130;
            if ((v132 - (unsigned char *)v130) >> 3 > v106) {
              unint64_t v106 = v107 >> 3;
            }
            if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v108 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v108 = v106;
            }
            if (v108)
            {
              if (v108 >> 60) {
                sub_188D718();
              }
              v109 = (char *)operator new(16 * v108);
              uint64_t v110 = &v109[16 * v105];
              *(_OWORD *)uint64_t v110 = *(_OWORD *)v101;
              uint64_t v111 = v110;
              if (v102 != v104)
              {
                do
                {
LABEL_135:
                  *((_OWORD *)v111 - 1) = *((_OWORD *)v102 - 1);
                  v111 -= 16;
                  v102 -= 16;
                }
                while (v102 != v104);
                int v102 = (char *)v130;
                uint64_t v103 = v110 + 16;
                v130 = v111;
                v131 = v110 + 16;
                v132 = &v109[16 * v108];
                if (!v102) {
                  goto LABEL_122;
                }
LABEL_139:
                operator delete(v102);
                goto LABEL_122;
              }
            }
            else
            {
              v109 = 0;
              uint64_t v110 = (char *)(16 * v105);
              *(_OWORD *)(16 * v105) = *(_OWORD *)v101;
              uint64_t v111 = (char *)(16 * v105);
              if (v102 != v104) {
                goto LABEL_135;
              }
            }
            uint64_t v103 = v110 + 16;
            v130 = v111;
            v131 = v110 + 16;
            v132 = &v109[16 * v108];
            if (v102) {
              goto LABEL_139;
            }
          }
LABEL_122:
          v131 = v103;
          v101 += 16;
          int v102 = (char *)v103;
        }
        while (v101 != v100);
      }
      sub_3BF0C((uint64_t)&__p, (char **)v133, (char **)&v130, 0);
      if (sub_3C270((uint64_t *)&__p))
      {
        double v67 = v153;
        if (v154 != v153)
        {
          char v68 = 0;
          unint64_t v69 = 0;
          unint64_t v70 = 0;
          unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((v154 - (unsigned char *)v153) >> 3);
          do
          {
            while (1)
            {
              uint64_t v74 = (uint64_t)v67 + 24 * v70;
              int v75 = *(unsigned __int8 *)(v74 + 16);
              if (*(unsigned char *)(v74 + 16))
              {
                if (v68) {
                  break;
                }
              }
              BOOL v72 = v75 == 0;
              BOOL v73 = v75 != 0;
              if (!v72) {
                unint64_t v69 = v70;
              }
              v68 |= v73;
              if (++v70 == v71) {
                goto LABEL_108;
              }
            }
            double v76 = sub_3C100(&__p, (uint64_t)v67 + 24 * v69);
            double v78 = v77;
            *(double *)&long long v32 = sub_3C100(&__p, v74);
            double v126 = v33;
            double v127 = *(double *)&v32;
            unint64_t v79 = v69 + 1;
            if (v69 + 1 < v70)
            {
              unsigned int v80 = v76;
              unsigned int v81 = v78;
              if (v78 >= 0xFFFFFFFE) {
                unsigned int v81 = -2;
              }
              unsigned int v82 = v33;
              if (v33 >= 0xFFFFFFFE) {
                unsigned int v82 = -2;
              }
              double v83 = (double)v80;
              double v84 = (double)v81;
              double v85 = (double)*(double *)&v32 - (double)v80;
              double v86 = (double)v82 - (double)v81;
              double v122 = v76 - *(double *)&v32;
              double v123 = v78 - v33;
              double v121 = sqrt(v122 * v122 + v123 * v123);
              uint64_t v87 = 24 * v69 + 24;
              if (v70 > v79) {
                unint64_t v79 = v70;
              }
              unint64_t v88 = ~v69 + v79;
              do
              {
                *(double *)&long long v32 = sub_3C1B8(&__p, (uint64_t)v153 + v87);
                if (v33 >= 0xFFFFFFFE) {
                  uint64_t v89 = 4294967294;
                }
                else {
                  uint64_t v89 = v33;
                }
                uint64_t v90 = *(double *)&v32;
                double v91 = v85 * ((double)v90 - v83) + v86 * ((double)v89 - v84);
                if (v91 >= 0.0 && v91 <= v85 * v85 + v86 * v86)
                {
                  double v93 = (v123 * (*(double *)&v32 - v127) - v122 * (v33 - v126)) / v121;
                  long double v94 = exp((double)v89 * -6.28318531 / 4294967300.0 + 3.14159265);
                  long double v95 = atan((v94 - 1.0 / v94) * 0.5);
                  double v96 = cos(v95 * 57.2957795 / 180.0 * 3.14159265);
                  double v97 = v124 ? v93 * (0.00932288077 / (1.0 / v96)) : -(v93 * (0.00932288077 / (1.0 / v96)));
                  HIDWORD(v33) = 1079574528;
                  *(double *)&long long v32 = (double)*(uint64_t *)(a1 + 8096) / 100.0;
                  if (v97 > *(double *)&v32)
                  {
                    uint64_t v128 = v90 | (v89 << 32);
                    int v129 = 0x7FFFFFFF;
                    sub_66188((uint64_t)v148, v97);
                    sub_63BF60(v120, 1, (unsigned int *)&v128, v98, 5000, v97);
                  }
                }
                v87 += 24;
                --v88;
              }
              while (v88);
            }
            double v67 = v153;
            uint64_t v99 = (char *)v153 + 24 * v70;
            if (v99 != v154)
            {
              while (!v99[16])
              {
                v99 += 24;
                if (v99 == v154) {
                  goto LABEL_108;
                }
              }
            }
            if (v99 == v154) {
              break;
            }
            char v68 = 1;
            unint64_t v69 = v70++;
          }
          while (v70 != v71);
        }
      }
LABEL_108:
      if (v155) {
        operator delete(v155);
      }
      if (v153)
      {
        v154 = (char *)v153;
        operator delete(v153);
      }
      if (v151)
      {
        v152 = v151;
        operator delete(v151);
      }
      if (*(void *)&__p.f64[0])
      {
        __p.f64[1] = __p.f64[0];
        operator delete(*(void **)&__p.f64[0]);
      }
      if (v130)
      {
        v131 = v130;
        operator delete(v130);
      }
      if (v133[0])
      {
        v133[1] = v133[0];
        operator delete(v133[0]);
      }
      uint64_t v35 = v119;
      if (v119 == v117)
      {
        double v34 = (char *)v135;
        goto LABEL_141;
      }
    }
  }
LABEL_155:
  if (v148[0])
  {
    v148[1] = v148[0];
    operator delete(v148[0]);
  }
}

void sub_E71644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_E718F0(void **a1, void *a2)
{
  unsigned int v4 = sub_E7013C(a1, a2);
  v113 = 0;
  v114 = 0;
  uint64_t v115 = 0;
  double v96 = a2;
  unint64_t v5 = sub_46C760(a2);
  if (v5) {
    sub_E7B0E0((void **)&v113, v5);
  }
  unsigned int v6 = sub_E70764(a1, a2);
  unsigned int v7 = v6[1];
  uint64_t v8 = (uint64_t)*v6 + 24;
  if (*v6 != v7 && v8 != (void)v7)
  {
    do
    {
      uint64_t v86 = *(void *)(v8 - 24);
      if (v86 != *(void *)v8)
      {
        uint64_t v87 = &v113[24 * v86];
        uint64_t v88 = *(void *)(v8 - 16);
        *((_DWORD *)v87 + 5) = *(_DWORD *)(v8 - 8);
        *(void *)(v87 + 12) = v88;
        uint64_t v89 = *(void *)(v8 + 8);
        uint64_t v90 = &v113[24 * *(void *)v8];
        *((_DWORD *)v90 + 2) = *(_DWORD *)(v8 + 16);
        *(void *)uint64_t v90 = v89;
      }
      v8 += 24;
    }
    while ((void *)v8 != v7);
  }
  long double v94 = (char *)v4;
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  uint64_t v112 = 0;
  *(_OWORD *)uint64_t v107 = 0u;
  *(_OWORD *)unint64_t v108 = 0u;
  int v109 = 1065353216;
  unint64_t v10 = sub_E70764(a1, a2);
  unsigned int v11 = v10[1];
  if (*v10 != v11)
  {
    unint64_t v12 = (uint64_t *)((char *)*v10 + 8);
    do
    {
      if (v110 == v111 || *((_DWORD *)v111 - 3) != *(_DWORD *)v12 || *((_DWORD *)v111 - 2) != *((_DWORD *)v12 + 1)) {
        sub_30C0C(&v110, v12);
      }
      uint64_t v15 = *(v12 - 1);
      uint64_t v16 = v113;
      if (!v15
        || (unint64_t v17 = &v113[24 * v15],
            uint64_t v18 = *((unsigned int *)v17 + 1),
            uint64_t v19 = *((unsigned int *)v12 + 1),
            long double v20 = exp((double)((v19 >> 1) + (v18 >> 1)) * -6.28318531 / 4294967300.0+ 3.14159265), v21 = atan((v20 - 1.0 / v20) * 0.5), v22 = cos(v21 * 57.2957795 / 180.0 * 3.14159265), v23 = *(unsigned int *)v17 - (unint64_t)*(unsigned int *)v12, v22 * 0.00932288077 * (sqrt((double)((v18 - v19) * (v18 - v19) + v23 * v23)) / 100.0 * 100.0) >= 1.0))
      {
        if (v15 + 1 >= sub_46C760(v96)
          || (uint64_t v24 = *((unsigned int *)v12 + 1),
              uint64_t v25 = *(unsigned int *)&v16[24 * v15 + 16],
              long double v26 = exp((double)((v25 >> 1) + (v24 >> 1)) * -6.28318531 / 4294967300.0+ 3.14159265), v27 = atan((v26 - 1.0 / v26) * 0.5), v28 = cos(v27 * 57.2957795 / 180.0 * 3.14159265), v29 = *(unsigned int *)v12 - (unint64_t)*(unsigned int *)&v16[24 * v15 + 12], v28 * 0.00932288077 * (sqrt((double)((v24 - v25) * (v24 - v25) + v29 * v29)) / 100.0 * 100.0) >= 1.0))
        {
          uint64_t v13 = *(v12 - 1);
          v101[0] = v12;
          sub_E7B39C((uint64_t)v107, (unsigned int *)v12, (uint64_t)&unk_20F06E0, (uint64_t **)v101)[4] = v13;
        }
      }
      unint64_t v14 = (unsigned int *)(v12 + 2);
      v12 += 3;
    }
    while (v14 != v11);
  }
  v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0;
  sub_E6E3C0(v94, (uint64_t)&v110, &v104, (uint64_t)v101);
  *(_OWORD *)uint64_t v101 = 0u;
  *(_OWORD *)int v102 = 0u;
  int v103 = 1065353216;
  uint64_t v30 = (v105 - (unsigned char *)v104) >> 3;
  uint64_t v31 = v30 - 1;
  if (v30 != 1)
  {
    unint64_t v32 = 0;
    uint64_t v93 = v30 - 1;
    do
    {
      unint64_t v33 = *((void *)v104 + v32);
      unint64_t v34 = v32 + 1;
      unint64_t v35 = *((void *)v104 + v32 + 1);
      if (v33 <= v35) {
        uint64_t v36 = *((void *)v104 + v32 + 1);
      }
      else {
        uint64_t v36 = *((void *)v104 + v32);
      }
      if (v33 < v35 && v107[1] != 0)
      {
        do
        {
          if (v107[1])
          {
            double v40 = &v110[12 * v33];
            uint64_t v41 = *(unsigned int *)v40;
            uint64_t v42 = *((unsigned int *)v40 + 1);
            unint64_t v43 = (v42
                 + 2654435769
                 + (((v41 + 0x388152A534) ^ 0xDEADBEEFLL) << 6)
                 + (((v41 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2)) ^ (v41 + 0x388152A534) ^ 0xDEADBEEFLL;
            uint64_t v44 = *((int *)v40 + 2);
            unint64_t v45 = (v44 + 2654435769 + (v43 << 6) + (v43 >> 2)) ^ v43;
            uint8x8_t v46 = (uint8x8_t)vcnt_s8((int8x8_t)v107[1]);
            v46.i16[0] = vaddlv_u8(v46);
            if (v46.u32[0] > 1uLL)
            {
              unint64_t v47 = v45;
              if ((void *)v45 >= v107[1]) {
                unint64_t v47 = v45 % (unint64_t)v107[1];
              }
            }
            else
            {
              unint64_t v47 = v45 & ((unint64_t)v107[1] - 1);
            }
            unint64_t v48 = (uint64_t **)*((void *)v107[0] + v47);
            if (v48)
            {
              unint64_t v49 = *v48;
              if (v49)
              {
                if (v46.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v50 = v49[1];
                    if (v50 == v45)
                    {
                      if (*((_DWORD *)v49 + 4) == v41 && *(uint64_t *)((char *)v49 + 20) == __PAIR64__(v44, v42)) {
                        goto LABEL_50;
                      }
                    }
                    else if ((v50 & ((uint64_t)v107[1] - 1)) != v47)
                    {
                      goto LABEL_35;
                    }
                    unint64_t v49 = (uint64_t *)*v49;
                    if (!v49) {
                      goto LABEL_35;
                    }
                  }
                }
                do
                {
                  unint64_t v64 = v49[1];
                  if (v64 == v45)
                  {
                    if (*((_DWORD *)v49 + 4) == v41 && *(uint64_t *)((char *)v49 + 20) == __PAIR64__(v44, v42))
                    {
LABEL_50:
                      unint64_t v95 = v34;
                      unint64_t v51 = v49[4];
                      if (v32 >= v51) {
                        unint64_t v52 = v49[4];
                      }
                      else {
                        unint64_t v52 = v32;
                      }
                      if (v32 > v51) {
                        unint64_t v51 = v32;
                      }
                      float64x2_t __p = (void *)(v51 - v52);
                      v100[0] = &__p;
                      uint64_t v53 = sub_E7B748((uint64_t)v101, (unint64_t *)&__p, (uint64_t)&unk_20F06E0, (uint64_t **)v100);
                      unint64_t v54 = v53;
                      unint64_t v56 = (char *)v53[4];
                      unint64_t v55 = v53[5];
                      if ((unint64_t)v56 < v55)
                      {
                        uint64_t v38 = *(void *)v40;
                        *((_DWORD *)v56 + 2) = *((_DWORD *)v40 + 2);
                        *(void *)unint64_t v56 = v38;
                        uint64_t v39 = v56 + 12;
                      }
                      else
                      {
                        double v57 = (void **)(v53 + 3);
                        double v58 = (unsigned char *)v53[3];
                        unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v58) >> 2);
                        unint64_t v60 = v59 + 1;
                        if (v59 + 1 > 0x1555555555555555) {
                          sub_2E00();
                        }
                        unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - (void)v58) >> 2);
                        if (2 * v61 > v60) {
                          unint64_t v60 = 2 * v61;
                        }
                        if (v61 >= 0xAAAAAAAAAAAAAAALL) {
                          unint64_t v62 = 0x1555555555555555;
                        }
                        else {
                          unint64_t v62 = v60;
                        }
                        if (v62)
                        {
                          uint64_t v92 = (void **)(v53 + 3);
                          if (v62 > 0x1555555555555555) {
                            sub_188D718();
                          }
                          unint64_t v91 = v62;
                          BOOL v63 = (char *)operator new(12 * v62);
                          unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v58) >> 2);
                          double v57 = v92;
                          unint64_t v62 = v91;
                        }
                        else
                        {
                          BOOL v63 = 0;
                        }
                        uint64_t v65 = *(void *)v40;
                        BOOL v66 = &v63[12 * v59];
                        *((_DWORD *)v66 + 2) = *((_DWORD *)v40 + 2);
                        *(void *)BOOL v66 = v65;
                        double v67 = v66;
                        if (v56 != v58)
                        {
                          do
                          {
                            uint64_t v68 = *(void *)(v56 - 12);
                            v56 -= 12;
                            int v69 = *((_DWORD *)v56 + 2);
                            *(void *)(v67 - 12) = v68;
                            v67 -= 12;
                            *((_DWORD *)v67 + 2) = v69;
                          }
                          while (v56 != v58);
                          unint64_t v56 = (char *)*v57;
                        }
                        uint64_t v39 = v66 + 12;
                        v54[3] = v67;
                        v54[4] = v66 + 12;
                        v54[5] = &v63[12 * v62];
                        if (v56) {
                          operator delete(v56);
                        }
                      }
                      uint64_t v31 = v93;
                      unint64_t v34 = v95;
                      v54[4] = v39;
                      break;
                    }
                  }
                  else
                  {
                    if ((void *)v64 >= v107[1]) {
                      v64 %= (unint64_t)v107[1];
                    }
                    if (v64 != v47) {
                      break;
                    }
                  }
                  unint64_t v49 = (uint64_t *)*v49;
                }
                while (v49);
              }
            }
          }
LABEL_35:
          ++v33;
        }
        while (v33 != v36);
      }
      unint64_t v32 = v34;
    }
    while (v34 != v31);
  }
  unsigned int v70 = sub_63BD44(0, 1.0);
  unsigned int v71 = sub_63BD44(1, 1.0);
  unsigned int v72 = sub_63BD44(2, 1.0);
  unsigned int v73 = sub_63BD44(3, 1.0);
  unsigned int v74 = sub_63BD44(4, 1.0);
  int v75 = (double *)operator new(0x50uLL);
  double v98 = v75 + 10;
  uint64_t v99 = (char *)(v75 + 10);
  *int v75 = 0.0;
  v75[1] = (double)v70;
  v75[2] = 1.0;
  v75[3] = (double)v71;
  v75[4] = 2.0;
  v75[5] = (double)v72;
  v75[6] = 3.0;
  v75[7] = (double)v73;
  v75[8] = 4.0;
  v75[9] = (double)v74;
  float64x2_t __p = v75;
  sub_65DB8((uint64_t)&__p, 1, (uint64_t *)v100);
  if (__p)
  {
    double v98 = __p;
    operator delete(__p);
  }
  double v76 = v102[0];
  if (v102[0])
  {
    do
    {
      sub_66188((uint64_t)v100, (double)(unint64_t)v76[2]);
      unsigned int v78 = v77;
      if ((int)sub_63BD14(v77) >= 1) {
        sub_63C1CC((uint64_t)(v96 + 1510), 9, (uint64_t)(v76 + 3), v78, 0, (double)(unint64_t)v76[2]);
      }
      double v76 = (void *)*v76;
    }
    while (v76);
  }
  if (v100[0])
  {
    v100[1] = v100[0];
    operator delete(v100[0]);
  }
  unint64_t v79 = v102[0];
  if (v102[0])
  {
    do
    {
      double v84 = (void *)*v79;
      double v85 = (void *)v79[3];
      if (v85)
      {
        v79[4] = v85;
        operator delete(v85);
      }
      operator delete(v79);
      unint64_t v79 = v84;
    }
    while (v84);
  }
  unsigned int v80 = v101[0];
  v101[0] = 0;
  if (v80) {
    operator delete(v80);
  }
  if (v104)
  {
    uint64_t v105 = v104;
    operator delete(v104);
  }
  unsigned int v81 = v108[0];
  if (v108[0])
  {
    do
    {
      unsigned int v82 = (void *)*v81;
      operator delete(v81);
      unsigned int v81 = v82;
    }
    while (v82);
  }
  double v83 = v107[0];
  v107[0] = 0;
  if (v83) {
    operator delete(v83);
  }
  if (v110)
  {
    uint64_t v111 = v110;
    operator delete(v110);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
}

void sub_E72164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,char a31)
{
  if (__p) {
    operator delete(__p);
  }
  sub_3AB00((uint64_t)&a23);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
    sub_12168((uint64_t)&a31);
    unint64_t v33 = *(void **)(v31 - 192);
    if (!v33)
    {
LABEL_5:
      unint64_t v34 = *(void **)(v31 - 168);
      if (!v34) {
        goto LABEL_6;
      }
      goto LABEL_9;
    }
  }
  else
  {
    sub_12168((uint64_t)&a31);
    unint64_t v33 = *(void **)(v31 - 192);
    if (!v33) {
      goto LABEL_5;
    }
  }
  *(void *)(v31 - 184) = v33;
  operator delete(v33);
  unint64_t v34 = *(void **)(v31 - 168);
  if (!v34) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_9:
  *(void *)(v31 - 160) = v34;
  operator delete(v34);
  _Unwind_Resume(a1);
}

void sub_E72298(void *a1, void *a2)
{
  unsigned int v4 = sub_63BD44(0, 1.0);
  unsigned int v5 = sub_63BD44(1, 1.0);
  unsigned int v6 = sub_63BD44(2, 1.0);
  unsigned int v7 = sub_63BD44(3, 1.0);
  unsigned int v8 = sub_63BD44(4, 1.0);
  uint64_t v9 = (double *)operator new(0x50uLL);
  unint64_t v91 = v9 + 10;
  uint64_t v92 = v9 + 10;
  *uint64_t v9 = 0.0;
  v9[1] = (double)v4;
  v9[2] = 50.0;
  v9[3] = (double)v5;
  v9[4] = 250.0;
  v9[5] = (double)v6;
  v9[6] = 1000.0;
  v9[7] = (double)v7;
  v9[8] = 10000.0;
  v9[9] = (double)v8;
  float64x2_t __p = v9;
  sub_65DB8((uint64_t)&__p, 1, (uint64_t *)v89);
  if (__p)
  {
    unint64_t v91 = __p;
    operator delete(__p);
  }
  unsigned int v10 = sub_63BD44(0, 1.0);
  unsigned int v11 = sub_63BD44(1, 1.0);
  unsigned int v12 = sub_63BD44(2, 1.0);
  unsigned int v13 = sub_63BD44(3, 1.0);
  unsigned int v14 = sub_63BD44(4, 1.0);
  uint64_t v15 = (double *)operator new(0x50uLL);
  unint64_t v91 = v15 + 10;
  uint64_t v92 = v15 + 10;
  *uint64_t v15 = 0.0;
  v15[1] = (double)v10;
  v15[2] = 1.0;
  v15[3] = (double)v11;
  v15[4] = 3.0;
  v15[5] = (double)v12;
  v15[6] = 5.0;
  v15[7] = (double)v13;
  v15[8] = 7.0;
  v15[9] = (double)v14;
  float64x2_t __p = v15;
  sub_65DB8((uint64_t)&__p, 1, (uint64_t *)v88);
  if (__p)
  {
    unint64_t v91 = __p;
    operator delete(__p);
  }
  unint64_t v16 = sub_46C760(a2);
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v84 = (uint64_t)(a2 + 1510);
    do
    {
      uint64_t v86 = sub_650EEC((uint64_t)a2, v17);
      unint64_t v18 = 0;
      for (unint64_t i = ++v17; i < sub_46C760(a2) && i <= a1[989] + v17; ++i)
      {
        uint64_t v87 = sub_650EEC((uint64_t)a2, i);
        unint64_t v20 = v16;
        long double v21 = a1;
        uint64_t v22 = a1[11];
        unint64_t v23 = a2;
        uint64_t v24 = (int **)sub_46C8EC(a2, i);
        uint64_t v25 = (char *)*v24;
        long double v26 = (unsigned __int16 *)((char *)*v24 - **v24);
        if (!*((unsigned char *)v24 + 38))
        {
          if (v26[3])
          {
            unint64_t v28 = __ROR8__(*(void *)&v25[v26[3]], 32);
            unint64_t v29 = HIDWORD(v28);
          }
          else
          {
            unsigned int v30 = *((_DWORD *)v24 + 8);
            unint64_t v85 = *(unsigned int *)&v25[v26[60]];
            unsigned int v31 = sub_511FC(v30);
            unsigned int v32 = v30 & ~(-1 << (v31 & 0xFE));
            int v33 = sub_51938(v32);
            int v34 = sub_51938(v32 >> 1);
            int v35 = 1 << (v31 >> 1);
            int v36 = v33 + (char)v85;
            int v37 = v34 + ((__int16)v85 >> 8);
            unsigned int v38 = (int)((((((v36 & ~(v36 >> 31)) - v36 + (v36 >> 31)) >> (v31 >> 1))
                        + (v36 >> 31)) << (v31 >> 1))
                      + v36)
                % v35;
            unsigned int v39 = (int)((((((v37 & ~(v37 >> 31)) - v37 + (v37 >> 31)) >> (v31 >> 1))
                        + (v37 >> 31)) << (v31 >> 1))
                      + v37)
                % v35;
            int v40 = -1 << (v31 >> 1);
            if (~v40 < v38) {
              unsigned int v41 = ~v40;
            }
            else {
              unsigned int v41 = v38;
            }
            if (~v40 < v39) {
              unsigned int v42 = ~v40;
            }
            else {
              unsigned int v42 = v39;
            }
            sub_518C8(v41, v42);
            unint64_t v28 = v85 >> 16;
            LODWORD(v29) = v43 | (1 << (v31 & 0xFE));
          }
          goto LABEL_30;
        }
        unsigned int v27 = *v26;
        if (v27 < 5) {
          goto LABEL_28;
        }
        if (!v26[2])
        {
          if (v27 >= 0x77 && (uint64_t v44 = v26[59]) != 0) {
            unint64_t v28 = *(unsigned __int16 *)&v25[v44];
          }
          else {
LABEL_28:
          }
            unint64_t v28 = 0;
          LODWORD(v29) = *((_DWORD *)v24 + 8);
          goto LABEL_30;
        }
        unint64_t v28 = __ROR8__(*(void *)&v25[v26[2]], 32);
        unint64_t v29 = HIDWORD(v28);
LABEL_30:
        sub_2D5904(v22, (unsigned int *)(v29 | (v28 << 32)), 0, (char **)(v22 + 7800));
        unint64_t v45 = *(uint64_t **)(v22 + 7800);
        if (v45 == *(uint64_t **)(v22 + 7808))
        {
          unint64_t v46 = -1;
        }
        else
        {
          sub_2954EC(v22, *v45, (uint64_t)&__p);
          unint64_t v46 = sub_2E1AA4((uint64_t)&__p);
          if (v91)
          {
            uint64_t v92 = v91;
            operator delete(v91);
          }
        }
        uint64_t v47 = v86[1];
        unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((v47 - *v86) >> 2);
        double v49 = (double)v46;
        double v50 = (double)HIDWORD(v46);
        unsigned int v51 = *(_DWORD *)*v86;
        unsigned int v53 = *(_DWORD *)(*v86 + 4);
        unint64_t v52 = (_DWORD *)(*v86 + 28);
        unint64_t v54 = 2;
        a1 = v21;
        a2 = v23;
        unint64_t v16 = v20;
        while (1)
        {
          double v56 = (double)v51;
          double v57 = (double)v53;
          unsigned int v51 = *(v52 - 4);
          unsigned int v53 = *(v52 - 3);
          double v58 = (double)v51;
          double v59 = (double)v53;
          double v60 = (double)v51 - v56;
          double v61 = (double)v53 - v57;
          double v62 = v49 - v56;
          double v63 = v50 - v57;
          double v64 = (v49 - v56) * v60 + (v50 - v57) * v61;
          double v65 = v61 * v61;
          double v66 = v60 * v60 + v65;
          if (v64 >= 0.0 && v64 <= v66) {
            break;
          }
          if (v54 < v48)
          {
            LODWORD(v66) = *(v52 - 1);
            LODWORD(v65) = *v52;
            double v68 = (double)*(unint64_t *)&v66;
            double v69 = (double)*(unint64_t *)&v65;
            double v70 = v69 - v59;
            double v71 = (v49 - v58) * (v68 - v58) + (v50 - v59) * (v69 - v59);
            double v72 = (v68 - v58) * (v68 - v58) + v70 * v70;
            if (v71 >= 0.0 && v71 <= v72) {
              break;
            }
            double v74 = v68 - v56;
            double v75 = v69 - v57;
            double v76 = v62 * v74 + v63 * v75;
            double v77 = v74 * v74 + v75 * v75;
            if (v76 >= 0.0 && v76 <= v77) {
              break;
            }
          }
          v52 += 3;
          unint64_t v55 = v54++ - 1;
          if (v55 > v48 - 2) {
            goto LABEL_9;
          }
        }
        uint64_t v79 = v87[1];
        if (*(_DWORD *)(v79 - 12) == *(_DWORD *)(v47 - 12)) {
          v18 += *(_DWORD *)(v79 - 8) == *(_DWORD *)(v47 - 8);
        }
LABEL_9:
        ;
      }
      if (v18 >= a1[990])
      {
        unsigned int v80 = (unsigned int *)*v86;
        sub_66188((uint64_t)v88, (double)v18);
        sub_63BF60(v84, 9, v80, v81, 5000, (double)v18);
        uint64_t v82 = v86[1];
        sub_66188((uint64_t)v88, (double)v18);
        sub_63BF60(v84, 9, (unsigned int *)(v82 - 12), v83, 5000, (double)v18);
      }
    }
    while (v17 != v16);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
  if (v89[0])
  {
    v89[1] = v89[0];
    operator delete(v89[0]);
  }
}

void sub_E728E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_E72994(void *a1, void *a2)
{
  long long v241 = 0u;
  *(_OWORD *)v240 = 0u;
  int v242 = 1065353216;
  *(_OWORD *)v237 = 0u;
  *(_OWORD *)v238 = 0u;
  int v239 = 1065353216;
  unint64_t v222 = sub_46C760(a2);
  if (v222)
  {
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t v229 = v2;
      uint64_t v3 = sub_46C8EC(a2, v2);
      unint64_t v247 = *(void *)(v3 + 32);
      if (sub_E7BA7C(v237, &v247)) {
        break;
      }
      *(void *)float64x2_t __p = v247 ^ 0x1000000000000;
      if (sub_E7BA7C(v237, (unint64_t *)__p)) {
        break;
      }
LABEL_182:
      sub_2DC0DC((uint64_t)v237, &v247, &v247);
      uint64_t v2 = v229 + 1;
      if (v229 + 1 == v222) {
        goto LABEL_183;
      }
    }
    sub_2954EC(a1[11], *(void *)(v3 + 32), (uint64_t)&v260);
    sub_2E51EC((uint64_t)&v260, (uint64_t)__p);
    unsigned int v4 = (void *)v261;
    if (v263)
    {
      if ((void)v261 == *((void *)&v261 + 1)) {
        int v5 = 0;
      }
      else {
        int v5 = -1;
      }
      int v230 = v5;
      LODWORD(v6) = v5;
      unsigned int v7 = v258;
      if (v257 != v5) {
        goto LABEL_16;
      }
LABEL_15:
      if (v7 == v230) {
        goto LABEL_180;
      }
      goto LABEL_16;
    }
    if ((void)v261 == *((void *)&v261 + 1))
    {
      int v230 = 0;
      LODWORD(v6) = 0;
      unsigned int v7 = v258;
      if (!v257) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v8 = *(void *)(*((void *)&v261 + 1) - 8);
      uint64_t v9 = sub_2964C4(v260, v8, 1);
      unsigned int v10 = &v9[*(unsigned __int16 *)&v9[-*(int *)v9 + 4]];
      uint64_t v11 = (uint64_t)&v10[4 * HIDWORD(v8) + *(unsigned int *)v10];
      unsigned int v12 = (int *)(v11 + 4 + *(unsigned int *)(v11 + 4));
      unsigned int v4 = (void *)v261;
      uint64_t v6 = (*((void *)&v261 + 1) - (void)v261) >> 3;
      unsigned int v13 = (unsigned int *)((char *)v12 + *(unsigned __int16 *)((char *)v12 - *v12 + 6));
      int v230 = *(unsigned int *)((char *)v13 + *v13);
      unsigned int v7 = v258;
      if (v257 == v6) {
        goto LABEL_15;
      }
    }
LABEL_16:
    uint64_t v14 = *(void *)&__p[24];
    while (1)
    {
      while (1)
      {
        uint64_t v15 = v14 + 4 * v7;
        int v16 = *(unsigned __int16 *)(v15 + 4);
        int v17 = *(unsigned __int16 *)(v15 + 6);
        unsigned int v18 = sub_511FC(DWORD2(v256));
        unsigned int v19 = DWORD2(v256) & ~(-1 << (v18 & 0xFE));
        int v20 = sub_51938(v19);
        int v21 = sub_51938(v19 >> 1);
        int v22 = 1 << -(v18 >> 1);
        if (v18 < 2) {
          int v22 = -2;
        }
        LODWORD(v23) = v21 * v22 + 4 * v17;
        uint64_t v23 = v23 >= 0xFFFFFFFE ? 4294967294 : v23;
        v251 = (void **)((v20 * v22 + 4 * v16) | (unint64_t)(v23 << 32));
        *(_DWORD *)v252 = 0x7FFFFFFF;
        sub_BC3454((uint64_t)v240, (unsigned int *)&v251, (uint64_t)&v251);
        uint64_t v24 = v258;
        if (!v259) {
          break;
        }
        unsigned int v7 = --v258;
        uint64_t v14 = *(void *)&__p[24];
        if ((v24 - 1) >= **(_DWORD **)&__p[24])
        {
          uint64_t v27 = **(void **)&__p[8];
          uint64_t v35 = *(void *)(*(void *)&__p[8] + 8) - **(void **)&__p[8];
          unsigned int v29 = --v257;
          if (v257 < (unint64_t)(v35 >> 3)) {
            goto LABEL_40;
          }
          goto LABEL_17;
        }
        uint64_t v25 = (unsigned __int16 *)(*(void *)&__p[24] + 4 + 4 * v24);
        long double v26 = (unsigned __int16 *)(*(void *)&__p[24] + 4 + 4 * v7);
        if (*v25 == *v26 && v25[1] == v26[1])
        {
          uint64_t v27 = **(void **)&__p[8];
          uint64_t v28 = *(void *)(*(void *)&__p[8] + 8) - **(void **)&__p[8];
          if (**(_DWORD **)&__p[24] != 2 || v28 != 8)
          {
            unsigned int v7 = v24 - 2;
            unsigned int v258 = v24 - 2;
            unsigned int v29 = --v257;
            if (v257 < (unint64_t)(v28 >> 3))
            {
              while (1)
              {
LABEL_40:
                unint64_t v36 = *(void *)(v27 + 8 * v29);
                DWORD2(v256) = v36;
                uint64_t v37 = *(void *)__p;
                LODWORD(v243) = v36;
                LODWORD(v234[0]) = 1;
                v251 = v234;
                *(void *)v252 = &v243;
                unint64_t v38 = *(void *)(*(void *)__p + 3856) + 1;
                *(void *)(*(void *)__p + 3856) = v38;
                if (!*(void *)v37)
                {
LABEL_64:
                  sub_296654((int **)&v251);
                  int v43 = 0;
                  uint64_t v44 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
                    goto LABEL_67;
                  }
                  goto LABEL_65;
                }
                uint64_t v39 = v37 + 16;
                if (*(_DWORD *)(v37 + 112) == v36)
                {
                  unsigned int v40 = 4;
                  goto LABEL_49;
                }
                if (*(_DWORD *)(v37 + 136) == v36)
                {
                  unsigned int v40 = 5;
                  goto LABEL_49;
                }
                if (*(_DWORD *)(v37 + 160) == v36) {
                  break;
                }
                if (*(_DWORD *)(v37 + 184) == v36)
                {
                  unsigned int v40 = 7;
LABEL_49:
                  ++*(void *)(v37 + 3864);
                  uint64_t v41 = v39 + 24 * v40;
                  *(void *)(v41 + 8) = v38;
                  unsigned int v42 = *(unsigned int **)(v41 + 16);
                  if (!v42) {
                    goto LABEL_64;
                  }
                  goto LABEL_50;
                }
                unint64_t v45 = *(void *)(v37 + 168);
                unint64_t v46 = *(void *)(v37 + 144);
                unint64_t v47 = *(void *)(v37 + 120);
                unint64_t v48 = *(void *)(v37 + 192);
                unsigned int v42 = (unsigned int *)sub_2AB884(*(void *)v37, 1, v36, 1);
                if (v47 >= v38) {
                  unint64_t v49 = v38;
                }
                else {
                  unint64_t v49 = v47;
                }
                BOOL v50 = v46 >= v49;
                if (v46 < v49) {
                  unint64_t v49 = v46;
                }
                unsigned int v51 = 4 * (v47 < v38);
                if (!v50) {
                  unsigned int v51 = 5;
                }
                if (v45 < v49)
                {
                  unsigned int v51 = 6;
                  unint64_t v49 = v45;
                }
                if (v48 < v49) {
                  unsigned int v51 = 7;
                }
                uint64_t v52 = v39 + 24 * v51;
                *(_DWORD *)uint64_t v52 = v243;
                *(void *)(v52 + 8) = *(void *)(v37 + 3856);
                *(void *)(v52 + 16) = v42;
                if (!v42) {
                  goto LABEL_64;
                }
LABEL_50:
                int v43 = (int *)((char *)v42 + *v42);
                uint64_t v44 = (unsigned __int16 *)((char *)v43 - *v43);
                if (*v44 < 7u) {
                  goto LABEL_67;
                }
LABEL_65:
                uint64_t v53 = v44[3];
                if (v53)
                {
                  int v54 = *(int *)((char *)v43 + v53);
                  goto LABEL_68;
                }
LABEL_67:
                int v54 = 0;
LABEL_68:
                HIDWORD(v256) = v54;
                uint64_t v55 = *(void *)__p;
                unsigned int v56 = DWORD2(v256);
                LODWORD(v243) = DWORD2(v256);
                LODWORD(v234[0]) = 1;
                v251 = v234;
                *(void *)v252 = &v243;
                unint64_t v57 = *(void *)(*(void *)__p + 3856) + 1;
                *(void *)(*(void *)__p + 3856) = v57;
                if (!*(void *)v55) {
                  goto LABEL_92;
                }
                uint64_t v58 = v55 + 16;
                if (*(_DWORD *)(v55 + 112) == v56)
                {
                  unsigned int v59 = 4;
                  goto LABEL_77;
                }
                if (*(_DWORD *)(v55 + 136) == v56)
                {
                  unsigned int v59 = 5;
                  goto LABEL_77;
                }
                if (*(_DWORD *)(v55 + 160) == v56)
                {
                  unsigned int v59 = 6;
                  goto LABEL_77;
                }
                if (*(_DWORD *)(v55 + 184) == v56)
                {
                  unsigned int v59 = 7;
LABEL_77:
                  ++*(void *)(v55 + 3864);
                  uint64_t v60 = v58 + 24 * v59;
                  *(void *)(v60 + 8) = v57;
                  double v61 = *(unsigned int **)(v60 + 16);
                  if (v61) {
                    goto LABEL_78;
                  }
                  goto LABEL_92;
                }
                unint64_t v64 = *(void *)(v55 + 168);
                unint64_t v65 = *(void *)(v55 + 144);
                unint64_t v66 = *(void *)(v55 + 120);
                unint64_t v67 = *(void *)(v55 + 192);
                double v61 = (unsigned int *)sub_2AB884(*(void *)v55, 1, v56, 1);
                if (v66 >= v57) {
                  unint64_t v68 = v57;
                }
                else {
                  unint64_t v68 = v66;
                }
                BOOL v69 = v65 >= v68;
                if (v65 < v68) {
                  unint64_t v68 = v65;
                }
                unsigned int v70 = 4 * (v66 < v57);
                if (!v69) {
                  unsigned int v70 = 5;
                }
                if (v64 < v68)
                {
                  unsigned int v70 = 6;
                  unint64_t v68 = v64;
                }
                if (v67 < v68) {
                  unsigned int v70 = 7;
                }
                uint64_t v71 = v58 + 24 * v70;
                *(_DWORD *)uint64_t v71 = v243;
                *(void *)(v71 + 8) = *(void *)(v55 + 3856);
                *(void *)(v71 + 16) = v61;
                if (v61)
                {
LABEL_78:
                  double v62 = (int *)((char *)v61 + *v61);
                  double v63 = (unsigned __int16 *)((char *)v62 - *v62);
                  if (*v63 < 5u) {
                    goto LABEL_95;
                  }
                  goto LABEL_93;
                }
LABEL_92:
                sub_296654((int **)&v251);
                double v62 = 0;
                double v63 = (_WORD *)(&loc_1120530 + 1);
                if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                  goto LABEL_95;
                }
LABEL_93:
                uint64_t v72 = v63[2];
                if (!v72)
                {
LABEL_95:
                  unsigned int v73 = 0;
                  goto LABEL_96;
                }
                unsigned int v73 = (char *)v62 + v72 + *(unsigned int *)((char *)v62 + v72);
LABEL_96:
                double v74 = &v73[4 * HIDWORD(v36) + 4 + *(unsigned int *)&v73[4 * HIDWORD(v36) + 4]];
                *(void *)&__p[16] = v74;
                double v75 = &v74[-*(int *)v74];
                unsigned int v76 = *(unsigned __int16 *)v75;
                if (v76 <= 6)
                {
                  uint64_t v14 = 0;
                  unsigned int v78 = 0;
                  *(void *)&__p[24] = 0;
                }
                else
                {
                  uint64_t v14 = *((unsigned __int16 *)v75 + 3);
                  if (*((_WORD *)v75 + 3)) {
                    v14 += (uint64_t)&v74[*(unsigned int *)&v74[v14]];
                  }
                  *(void *)&__p[24] = v14;
                  if (v76 >= 0xB && (uint64_t v77 = *((unsigned __int16 *)v75 + 5)) != 0) {
                    unsigned int v78 = &v74[v77 + *(unsigned int *)&v74[v77]];
                  }
                  else {
                    unsigned int v78 = 0;
                  }
                }
                *(void *)&long long v256 = v78;
                int v79 = *(_DWORD *)v14;
                unsigned int v7 = *(_DWORD *)v14 - 2;
                unsigned int v258 = v7;
                unsigned int v80 = (unsigned __int16 *)(v14 + 4 + 4 * (v79 - 1));
                double v81 = (unsigned __int16 *)(v14 + 4 + 4 * v7);
                if (*v80 == *v81 && v80[1] == v81[1])
                {
                  unsigned int v7 = v79 - 3;
                  unsigned int v258 = v79 - 3;
                  unsigned int v29 = --v257;
                  uint64_t v27 = **(void **)&__p[8];
                  if (v257 < (unint64_t)((uint64_t)(*(void *)(*(void *)&__p[8] + 8) - **(void **)&__p[8]) >> 3)) {
                    continue;
                  }
                }
                goto LABEL_17;
              }
              unsigned int v40 = 6;
              goto LABEL_49;
            }
          }
        }
LABEL_17:
        if (v257 == v6)
        {
LABEL_18:
          if (v7 == v230)
          {
            unsigned int v4 = (void *)v261;
LABEL_180:
            if (v4)
            {
              *((void *)&v261 + 1) = v4;
              operator delete(v4);
            }
            goto LABEL_182;
          }
        }
      }
      unsigned int v7 = ++v258;
      uint64_t v14 = *(void *)&__p[24];
      if ((v24 + 1) >= **(_DWORD **)&__p[24])
      {
        uint64_t v32 = **(void **)&__p[8];
        uint64_t v82 = *(void *)(*(void *)&__p[8] + 8) - **(void **)&__p[8];
        unsigned int v34 = ++v257;
        if (v257 < (unint64_t)(v82 >> 3)) {
          goto LABEL_109;
        }
        goto LABEL_17;
      }
      unsigned int v30 = (unsigned __int16 *)(*(void *)&__p[24] + 4 + 4 * v24);
      unsigned int v31 = (unsigned __int16 *)(*(void *)&__p[24] + 4 + 4 * v7);
      if (*v30 != *v31) {
        goto LABEL_17;
      }
      if (v30[1] != v31[1]) {
        goto LABEL_17;
      }
      uint64_t v32 = **(void **)&__p[8];
      uint64_t v33 = *(void *)(*(void *)&__p[8] + 8) - **(void **)&__p[8];
      if (**(_DWORD **)&__p[24] == 2 && v33 == 8) {
        goto LABEL_17;
      }
      unsigned int v7 = v24 + 2;
      unsigned int v258 = v24 + 2;
      unsigned int v34 = ++v257;
      if (v257 >= (unint64_t)(v33 >> 3)) {
        goto LABEL_17;
      }
      while (1)
      {
LABEL_109:
        unint64_t v83 = *(void *)(v32 + 8 * v34);
        DWORD2(v256) = v83;
        uint64_t v84 = *(void *)__p;
        LODWORD(v243) = v83;
        LODWORD(v234[0]) = 1;
        v251 = v234;
        *(void *)v252 = &v243;
        unint64_t v85 = *(void *)(*(void *)__p + 3856) + 1;
        *(void *)(*(void *)__p + 3856) = v85;
        if (!*(void *)v84)
        {
LABEL_133:
          sub_296654((int **)&v251);
          uint64_t v90 = 0;
          unint64_t v91 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
            goto LABEL_136;
          }
          goto LABEL_134;
        }
        uint64_t v86 = v84 + 16;
        if (*(_DWORD *)(v84 + 112) == v83)
        {
          unsigned int v87 = 4;
          goto LABEL_118;
        }
        if (*(_DWORD *)(v84 + 136) == v83)
        {
          unsigned int v87 = 5;
          goto LABEL_118;
        }
        if (*(_DWORD *)(v84 + 160) == v83)
        {
          unsigned int v87 = 6;
          goto LABEL_118;
        }
        if (*(_DWORD *)(v84 + 184) == v83)
        {
          unsigned int v87 = 7;
LABEL_118:
          ++*(void *)(v84 + 3864);
          uint64_t v88 = v86 + 24 * v87;
          *(void *)(v88 + 8) = v85;
          uint64_t v89 = *(unsigned int **)(v88 + 16);
          if (!v89) {
            goto LABEL_133;
          }
          goto LABEL_119;
        }
        unint64_t v92 = *(void *)(v84 + 168);
        unint64_t v93 = *(void *)(v84 + 144);
        unint64_t v94 = *(void *)(v84 + 120);
        unint64_t v95 = *(void *)(v84 + 192);
        uint64_t v89 = (unsigned int *)sub_2AB884(*(void *)v84, 1, v83, 1);
        if (v94 >= v85) {
          unint64_t v96 = v85;
        }
        else {
          unint64_t v96 = v94;
        }
        BOOL v97 = v93 >= v96;
        if (v93 < v96) {
          unint64_t v96 = v93;
        }
        unsigned int v98 = 4 * (v94 < v85);
        if (!v97) {
          unsigned int v98 = 5;
        }
        if (v92 < v96)
        {
          unsigned int v98 = 6;
          unint64_t v96 = v92;
        }
        if (v95 < v96) {
          unsigned int v98 = 7;
        }
        uint64_t v99 = v86 + 24 * v98;
        *(_DWORD *)uint64_t v99 = v243;
        *(void *)(v99 + 8) = *(void *)(v84 + 3856);
        *(void *)(v99 + 16) = v89;
        if (!v89) {
          goto LABEL_133;
        }
LABEL_119:
        uint64_t v90 = (int *)((char *)v89 + *v89);
        unint64_t v91 = (unsigned __int16 *)((char *)v90 - *v90);
        if (*v91 < 7u) {
          goto LABEL_136;
        }
LABEL_134:
        uint64_t v100 = v91[3];
        if (v100)
        {
          int v101 = *(int *)((char *)v90 + v100);
          goto LABEL_137;
        }
LABEL_136:
        int v101 = 0;
LABEL_137:
        HIDWORD(v256) = v101;
        uint64_t v102 = *(void *)__p;
        unsigned int v103 = DWORD2(v256);
        LODWORD(v243) = DWORD2(v256);
        LODWORD(v234[0]) = 1;
        v251 = v234;
        *(void *)v252 = &v243;
        unint64_t v104 = *(void *)(*(void *)__p + 3856) + 1;
        *(void *)(*(void *)__p + 3856) = v104;
        if (!*(void *)v102) {
          goto LABEL_161;
        }
        uint64_t v105 = v102 + 16;
        if (*(_DWORD *)(v102 + 112) == v103)
        {
          unsigned int v106 = 4;
          goto LABEL_146;
        }
        if (*(_DWORD *)(v102 + 136) == v103)
        {
          unsigned int v106 = 5;
          goto LABEL_146;
        }
        if (*(_DWORD *)(v102 + 160) == v103)
        {
          unsigned int v106 = 6;
          goto LABEL_146;
        }
        if (*(_DWORD *)(v102 + 184) == v103)
        {
          unsigned int v106 = 7;
LABEL_146:
          ++*(void *)(v102 + 3864);
          uint64_t v107 = v105 + 24 * v106;
          *(void *)(v107 + 8) = v104;
          unint64_t v108 = *(unsigned int **)(v107 + 16);
          if (!v108) {
            goto LABEL_161;
          }
          goto LABEL_147;
        }
        unint64_t v111 = *(void *)(v102 + 168);
        unint64_t v112 = *(void *)(v102 + 144);
        unint64_t v113 = *(void *)(v102 + 120);
        unint64_t v114 = *(void *)(v102 + 192);
        unint64_t v108 = (unsigned int *)sub_2AB884(*(void *)v102, 1, v103, 1);
        if (v113 >= v104) {
          unint64_t v115 = v104;
        }
        else {
          unint64_t v115 = v113;
        }
        BOOL v116 = v112 >= v115;
        if (v112 < v115) {
          unint64_t v115 = v112;
        }
        unsigned int v117 = 4 * (v113 < v104);
        if (!v116) {
          unsigned int v117 = 5;
        }
        if (v111 < v115)
        {
          unsigned int v117 = 6;
          unint64_t v115 = v111;
        }
        if (v114 < v115) {
          unsigned int v117 = 7;
        }
        uint64_t v118 = v105 + 24 * v117;
        *(_DWORD *)uint64_t v118 = v243;
        *(void *)(v118 + 8) = *(void *)(v102 + 3856);
        *(void *)(v118 + 16) = v108;
        if (!v108)
        {
LABEL_161:
          sub_296654((int **)&v251);
          int v109 = 0;
          uint64_t v110 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
            goto LABEL_164;
          }
          goto LABEL_162;
        }
LABEL_147:
        int v109 = (int *)((char *)v108 + *v108);
        uint64_t v110 = (unsigned __int16 *)((char *)v109 - *v109);
        if (*v110 < 5u) {
          goto LABEL_164;
        }
LABEL_162:
        uint64_t v119 = v110[2];
        if (v119)
        {
          uint64_t v120 = (char *)v109 + v119 + *(unsigned int *)((char *)v109 + v119);
          goto LABEL_165;
        }
LABEL_164:
        uint64_t v120 = 0;
LABEL_165:
        double v121 = &v120[4 * HIDWORD(v83) + 4 + *(unsigned int *)&v120[4 * HIDWORD(v83) + 4]];
        *(void *)&__p[16] = v121;
        double v122 = &v121[-*(int *)v121];
        unsigned int v123 = *(unsigned __int16 *)v122;
        if (v123 <= 6)
        {
          uint64_t v14 = 0;
          v125 = 0;
          *(void *)&__p[24] = 0;
        }
        else
        {
          uint64_t v14 = *((unsigned __int16 *)v122 + 3);
          if (*((_WORD *)v122 + 3)) {
            v14 += (uint64_t)&v121[*(unsigned int *)&v121[v14]];
          }
          *(void *)&__p[24] = v14;
          if (v123 >= 0xB && (uint64_t v124 = *((unsigned __int16 *)v122 + 5)) != 0) {
            v125 = &v121[v124 + *(unsigned int *)&v121[v124]];
          }
          else {
            v125 = 0;
          }
        }
        *(void *)&long long v256 = v125;
        unsigned int v7 = 1;
        unsigned int v258 = 1;
        if (*(unsigned __int16 *)(v14 + 4) != *(unsigned __int16 *)(v14 + 8)) {
          goto LABEL_17;
        }
        if (*(unsigned __int16 *)(v14 + 6) != *(unsigned __int16 *)(v14 + 10)) {
          break;
        }
        unsigned int v7 = 2;
        unsigned int v258 = 2;
        unsigned int v34 = ++v257;
        uint64_t v32 = **(void **)&__p[8];
        if (v257 >= (unint64_t)((uint64_t)(*(void *)(*(void *)&__p[8] + 8) - **(void **)&__p[8]) >> 3)) {
          goto LABEL_17;
        }
      }
      unsigned int v7 = 1;
      if (v257 == v6) {
        goto LABEL_18;
      }
    }
  }
LABEL_183:
  double v126 = (uint64_t *)sub_E70764(a1, a2);
  uint64_t v128 = v126[1];
  uint64_t v260 = *v126;
  uint64_t v127 = v260;
  char v262 = 0;
  if (v260 != v128)
  {
    uint64_t v219 = (uint64_t)(a2 + 1510);
    double v129 = -1.0;
    double v130 = 0.5;
    uint64_t v228 = v128;
    while (v262)
    {
      *(void *)&v252[4] = *(void *)((char *)&v261 + 4);
      int v253 = HIDWORD(v261);
      unint64_t v131 = v127 + 24;
      v251 = (void **)v131;
      char v254 = v262;
      uint64_t v132 = a1[985];
      unint64_t v247 = v131;
      char v250 = v262;
      unint64_t v248 = *(void *)((char *)&v261 + 4);
      int v249 = HIDWORD(v261);
      double v133 = (double)v132 / 100.0;
      if (v133 > 0.0 && v131 != v128) {
        goto LABEL_191;
      }
LABEL_185:
      uint64_t v127 = v260 + 24;
      uint64_t v260 = v127;
      if (v127 == v128) {
        goto LABEL_279;
      }
    }
    unint64_t v131 = v127 + 24;
    v251 = (void **)v131;
    char v254 = 0;
    uint64_t v211 = a1[985];
    unint64_t v247 = v131;
    char v250 = 0;
    double v133 = (double)v211 / 100.0;
    if (v133 <= 0.0 || v131 == v128) {
      goto LABEL_185;
    }
LABEL_191:
    double v135 = 0.0;
    while (!v250)
    {
      unint64_t v243 = v131 + 24;
      char v246 = 0;
      if (v131 + 24 != v128)
      {
        unint64_t v208 = *(void *)(v131 + 8);
        unint64_t v137 = v131 + 8;
        unint64_t v136 = v208;
        v140 = (int *)(v137 + 8);
        int v209 = *(_DWORD *)(v137 + 8);
        unint64_t v248 = v208;
        int v249 = v209;
        char v250 = 1;
        v141 = (uint64_t *)(v137 + 24);
        unint64_t v142 = *(void *)(v137 + 24);
        v144 = (int *)(v137 + 32);
        int v210 = *(_DWORD *)(v137 + 32);
        unint64_t v244 = v142;
        int v245 = v210;
        char v246 = 1;
        goto LABEL_195;
      }
LABEL_268:
      unint64_t v131 = v247 + 24;
      v247 += 24;
      if (v135 >= v133 || v131 == v128) {
        goto LABEL_185;
      }
    }
    unint64_t v244 = v248;
    int v245 = v249;
    unint64_t v243 = v131 + 24;
    char v246 = v250;
    if (v131 + 24 == v128) {
      goto LABEL_268;
    }
    unint64_t v138 = *(void *)(v131 + 8);
    unint64_t v137 = v131 + 8;
    unint64_t v136 = v138;
    v140 = (int *)(v137 + 8);
    int v139 = *(_DWORD *)(v137 + 8);
    unint64_t v248 = v138;
    v141 = (uint64_t *)(v137 + 24);
    unint64_t v142 = *(void *)(v137 + 24);
    int v249 = v139;
    v144 = (int *)(v137 + 32);
    int v143 = *(_DWORD *)(v137 + 32);
    unint64_t v244 = v142;
    int v245 = v143;
LABEL_195:
    long double v145 = exp((double)((v142 >> 33) + (v136 >> 33)) * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v146 = atan((v145 + v129 / v145) * v130);
    double v147 = cos(v146 * 57.2957795 / 180.0 * 3.14159265);
    uint64_t v235 = -1;
    int v236 = 0x7FFFFFFF;
    int v148 = *(_DWORD *)(v260 + 16);
    *(void *)((char *)&v261 + 4) = *(void *)(v260 + 8);
    HIDWORD(v261) = v148;
    if (!v262) {
      char v262 = 1;
    }
    int v149 = *((_DWORD *)v251 + 4);
    *(void *)&v252[4] = v251[1];
    int v253 = v149;
    if (!v254) {
      char v254 = 1;
    }
    int v150 = *v140;
    unint64_t v248 = *(void *)v137;
    int v249 = v150;
    int v151 = *v144;
    unint64_t v244 = *v141;
    int v245 = v151;
    if (sub_3B83C((uint64_t)&v261 + 4, (uint64_t)&v252[4], &v248, &v244, (uint64_t)&v235))
    {
      uint64_t v152 = *(void *)(v260 + 8);
      int v153 = *(_DWORD *)(v260 + 16);
      *(void *)((char *)&v261 + 4) = v152;
      HIDWORD(v261) = v153;
      if (!v262) {
        char v262 = 1;
      }
      if (v235 != v152)
      {
        v154 = v251[1];
        int v155 = *((_DWORD *)v251 + 4);
        *(void *)&v252[4] = v154;
        int v253 = v155;
        if (!v254) {
          char v254 = 1;
        }
        if ((void *)v235 != v154)
        {
          unint64_t v156 = *(void *)(v247 + 8);
          int v157 = *(_DWORD *)(v247 + 16);
          unint64_t v248 = v156;
          int v249 = v157;
          if (!v250) {
            char v250 = 1;
          }
          if (v235 != v156)
          {
            unint64_t v158 = *(void *)(v243 + 8);
            int v159 = *(_DWORD *)(v243 + 16);
            unint64_t v244 = v158;
            int v245 = v159;
            if (!v246) {
              char v246 = 1;
            }
            if (v235 != v158)
            {
              uint64_t v160 = HIDWORD(v235) >= 0xFFFFFFFE ? 4294967294 : HIDWORD(v235);
              *(void *)float64x2_t __p = v235 | (unint64_t)(v160 << 32);
              *(_DWORD *)&__p[8] = 0x7FFFFFFF;
              if (!sub_47290(v240, (unsigned int *)__p))
              {
                int v161 = *(_DWORD *)(v260 + 16);
                *(void *)((char *)&v261 + 4) = *(void *)(v260 + 8);
                HIDWORD(v261) = v161;
                if (!v262) {
                  char v262 = 1;
                }
                v162 = v251;
                unint64_t v163 = (unint64_t)v251[1];
                int v164 = *((_DWORD *)v251 + 4);
                *(void *)&v252[4] = v163;
                int v253 = v164;
                if (v161 == 0x7FFFFFFF)
                {
                  if (!v254) {
                    char v254 = 1;
                  }
                }
                else
                {
                  if (!v254) {
                    char v254 = 1;
                  }
                  if (v164 != 0x7FFFFFFF)
                  {
                    int v165 = *(_DWORD *)(v247 + 16);
                    unint64_t v248 = *(void *)(v247 + 8);
                    int v249 = v165;
                    if (!v250) {
                      char v250 = 1;
                    }
                    if (v165 != 0x7FFFFFFF)
                    {
                      int v166 = *(_DWORD *)(v243 + 16);
                      unint64_t v244 = *(void *)(v243 + 8);
                      int v245 = v166;
                      if (!v246) {
                        char v246 = 1;
                      }
                      if (v166 != 0x7FFFFFFF)
                      {
                        int v167 = *(_DWORD *)(v260 + 16);
                        *(void *)((char *)&v261 + 4) = *(void *)(v260 + 8);
                        HIDWORD(v261) = v167;
                        double v168 = (double)v167 / 100.0;
                        int v169 = *((_DWORD *)v251 + 4);
                        *(void *)&v252[4] = v251[1];
                        int v253 = v169;
                        double v170 = (double)v169 / 100.0;
                        if (v168 >= v170) {
                          double v171 = (double)v169 / 100.0;
                        }
                        else {
                          double v171 = (double)v167 / 100.0;
                        }
                        if (v168 >= v170) {
                          double v170 = (double)v167 / 100.0;
                        }
                        int v172 = *(_DWORD *)(v247 + 16);
                        unint64_t v248 = *(void *)(v247 + 8);
                        int v249 = v172;
                        double v173 = (double)v172 / 100.0;
                        int v174 = *(_DWORD *)(v243 + 16);
                        unint64_t v244 = *(void *)(v243 + 8);
                        int v245 = v174;
                        double v175 = (double)v174 / 100.0;
                        if (v173 >= v175) {
                          double v176 = (double)v174 / 100.0;
                        }
                        else {
                          double v176 = v173;
                        }
                        if (v173 < v175) {
                          double v173 = (double)v174 / 100.0;
                        }
                        double v177 = (double)(uint64_t)a1[986] / 100.0;
                        if (v170 + v177 < v176 || v177 + v173 < v171) {
                          goto LABEL_267;
                        }
                      }
                    }
                  }
                  unint64_t v163 = (unint64_t)v251[1];
                  int v178 = *((_DWORD *)v251 + 4);
                  *(void *)&v252[4] = v163;
                  int v253 = v178;
                }
                uint64_t v179 = HIDWORD(v235);
                int v223 = HIDWORD(v235) >> 1;
                long double v180 = exp((double)((HIDWORD(v235) >> 1) + (v163 >> 33)) * -6.28318531 / 4294967300.0 + 3.14159265);
                long double v181 = atan((v180 + v129 / v180) * 0.5);
                long double v182 = cos(v181 * 57.2957795 / 180.0 * 3.14159265);
                uint64_t v220 = v235;
                uint64_t v221 = v179;
                double v183 = v182
                     * 0.00932288077
                     * (sqrt((double)((v179 - HIDWORD(v163)) * (v179 - HIDWORD(v163))
                                    + (v235 - (unint64_t)v163)
                                    * (v235 - (unint64_t)v163)))
                      / 100.0
                      * 100.0)
                     + 0.0;
                unint64_t v184 = v247;
                if ((void **)v247 != v162)
                {
                  do
                  {
                    unint64_t v185 = (unint64_t)v162[1];
                    v186 = v162 + 3;
                    unint64_t v187 = (unint64_t)v162[4];
                    long double v188 = exp((double)((v187 >> 33) + (v185 >> 33)) * -6.28318531 / 4294967300.0 + 3.14159265);
                    long double v189 = atan((v188 + -1.0 / v188) * 0.5);
                    double v183 = v183
                         + cos(v189 * 57.2957795 / 180.0 * 3.14159265)
                         * 0.00932288077
                         * (sqrt((double)((HIDWORD(v185) - HIDWORD(v187)) * (HIDWORD(v185) - HIDWORD(v187))
                                        + (v185 - (unint64_t)v187)
                                        * (v185 - (unint64_t)v187)))
                          / 100.0
                          * 100.0);
                    v162 = v186;
                  }
                  while (v186 != (void **)v184);
                }
                unint64_t v190 = *(void *)(v184 + 8);
                int v191 = *(_DWORD *)(v184 + 16);
                unint64_t v248 = v190;
                int v249 = v191;
                if (!v250) {
                  char v250 = 1;
                }
                long double v192 = exp((double)(v223 + (v190 >> 33)) * -6.28318531 / 4294967300.0 + 3.14159265);
                long double v193 = atan((v192 - 1.0 / v192) * 0.5);
                double v224 = cos(v193 * 57.2957795 / 180.0 * 3.14159265);
                unsigned int v194 = sub_63BD44(4, 1.0);
                unsigned int v195 = sub_63BD44(0, 0.0);
                v196 = (double *)operator new(0x20uLL);
                *(void *)&__p[8] = v196 + 4;
                *(void *)&__p[16] = v196 + 4;
                double *v196 = 0.0;
                v196[1] = (double)v194;
                v196[2] = v133;
                v196[3] = (double)v195;
                *(void *)float64x2_t __p = v196;
                sub_65DB8((uint64_t)__p, 1, (uint64_t *)v234);
                if (*(void *)__p)
                {
                  *(void *)&__p[8] = *(void *)__p;
                  operator delete(*(void **)__p);
                }
                double v197 = v224
                     * 0.00932288077
                     * (sqrt((double)((HIDWORD(v190) - v221) * (HIDWORD(v190) - v221)
                                    + (v190 - v220) * (v190 - v220)))
                      / 100.0
                      * 100.0);
                double v198 = v183 + v197;
                if (v133 >= v183 + v197) {
                  double v199 = v183 + v197;
                }
                else {
                  double v199 = v133;
                }
                double v225 = v198;
                if (v198 < 0.0) {
                  double v199 = 0.0;
                }
                sub_66188((uint64_t)v234, v199);
                unsigned int v201 = v200;
                double v129 = -1.0;
                if ((int)sub_63BD14(v200) >= 1)
                {
                  int v202 = *(_DWORD *)(v260 + 16);
                  *(void *)((char *)&v261 + 4) = *(void *)(v260 + 8);
                  HIDWORD(v261) = v202;
                  if (!v262) {
                    char v262 = 1;
                  }
                  *(void *)float64x2_t __p = *(void *)((char *)&v261 + 4);
                  *(_DWORD *)&__p[8] = HIDWORD(v261);
                  int v203 = *((_DWORD *)v251 + 4);
                  *(void *)&v252[4] = v251[1];
                  int v253 = v203;
                  if (!v254) {
                    char v254 = 1;
                  }
                  *(void *)&__p[12] = *(void *)&v252[4];
                  *(_DWORD *)&__p[20] = v253;
                  int v204 = *(_DWORD *)(v247 + 16);
                  unint64_t v248 = *(void *)(v247 + 8);
                  int v249 = v204;
                  if (!v250) {
                    char v250 = 1;
                  }
                  *(void *)&__p[24] = v248;
                  LODWORD(v256) = v249;
                  int v205 = *(_DWORD *)(v243 + 16);
                  unint64_t v244 = *(void *)(v243 + 8);
                  int v245 = v205;
                  if (!v246) {
                    char v246 = 1;
                  }
                  *(void *)((char *)&v256 + 4) = v244;
                  HIDWORD(v256) = v245;
                  v206 = operator new(0x30uLL);
                  v232 = v206 + 3;
                  v233 = v206 + 3;
                  long long v207 = *(_OWORD *)&__p[16];
                  _OWORD *v206 = *(_OWORD *)__p;
                  v206[1] = v207;
                  v206[2] = v256;
                  v231 = v206;
                  sub_63C1CC(v219, 2, (uint64_t)&v231, v201, 5000, v225);
                  if (v231)
                  {
                    v232 = v231;
                    operator delete(v231);
                  }
                }
                if (v234[0])
                {
                  v234[1] = v234[0];
                  operator delete(v234[0]);
                }
              }
            }
          }
        }
      }
    }
LABEL_267:
    double v135 = v135
         + v147
         * 0.00932288077
         * (sqrt((double)((HIDWORD(v136) - HIDWORD(v142)) * (HIDWORD(v136) - HIDWORD(v142))
                        + (v136 - (unint64_t)v142)
                        * (v136 - (unint64_t)v142)))
          / 100.0
          * 100.0);
    double v130 = 0.5;
    uint64_t v128 = v228;
    goto LABEL_268;
  }
LABEL_279:
  v213 = v238[0];
  if (v238[0])
  {
    do
    {
      v214 = (void *)*v213;
      operator delete(v213);
      v213 = v214;
    }
    while (v214);
  }
  v215 = v237[0];
  v237[0] = 0;
  if (v215) {
    operator delete(v215);
  }
  v216 = (void *)v241;
  if ((void)v241)
  {
    do
    {
      v217 = (void *)*v216;
      operator delete(v216);
      v216 = v217;
    }
    while (v217);
  }
  v218 = v240[0];
  v240[0] = 0;
  if (v218) {
    operator delete(v218);
  }
}

void sub_E73FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
}

void sub_E74090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v37 = *(void **)(v35 - 200);
  if (v37)
  {
    *(void *)(v35 - 192) = v37;
    operator delete(v37);
  }
  sub_12168((uint64_t)&a29);
  sub_12168((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_E740BC(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  unint64_t v67 = 0;
  unint64_t v68 = 0;
  BOOL v69 = 0;
  uint64_t v57 = (uint64_t)(a2 + 1510);
  double v5 = 0.0;
  int v59 = 0x7FFFFFFF;
  int v6 = -1;
  uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
  int v62 = -1;
  while (v3 < (int)sub_46C760(v2))
  {
    uint64_t v9 = sub_650EEC((uint64_t)v2, v3);
    uint64_t v10 = *v9;
    uint64_t v61 = v3;
    if ((v6 != -1 || v62 != -1) && (v6 != *(_DWORD *)v10 || v62 != *(_DWORD *)(v10 + 4) || v59 != *(_DWORD *)(v10 + 8)))
    {
      int v11 = v6;
      *(void *)unsigned int v70 = *(void *)v10;
      *(_DWORD *)&v70[8] = *(_DWORD *)(v10 + 8);
      unsigned int v12 = v68;
      if (v68 >= v69)
      {
        uint64_t v14 = (char *)v67;
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v68 - (unsigned char *)v67) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_2E00();
        }
        if (0x5555555555555556 * ((v69 - (unsigned char *)v67) >> 3) > v16) {
          unint64_t v16 = 0x5555555555555556 * ((v69 - (unsigned char *)v67) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v69 - (unsigned char *)v67) >> 3) >= 0x555555555555555) {
          unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17)
        {
          if (v17 > 0xAAAAAAAAAAAAAAALL) {
            sub_188D718();
          }
          unsigned int v18 = (char *)operator new(24 * v17);
        }
        else
        {
          unsigned int v18 = 0;
        }
        unsigned int v19 = (int *)&v18[24 * v15];
        *unsigned int v19 = v11;
        v19[1] = v62;
        v19[2] = v59;
        *(void *)(v19 + 3) = *(void *)v70;
        v19[5] = *(_DWORD *)&v70[8];
        int v20 = (char *)v19;
        if (v12 != v14)
        {
          do
          {
            long long v21 = *(_OWORD *)(v12 - 24);
            *((void *)v20 - 1) = *((void *)v12 - 1);
            *(_OWORD *)(v20 - 24) = v21;
            v20 -= 24;
            v12 -= 24;
          }
          while (v12 != v14);
          unsigned int v12 = (char *)v67;
        }
        unsigned int v13 = (char *)(v19 + 6);
        unint64_t v67 = v20;
        unint64_t v68 = (char *)(v19 + 6);
        BOOL v69 = &v18[24 * v17];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v68 = v6;
        *((_DWORD *)v12 + 1) = v62;
        *((_DWORD *)v12 + 2) = v59;
        *(void *)(v12 + 12) = *(void *)v70;
        *((_DWORD *)v12 + 5) = *(_DWORD *)&v70[8];
        unsigned int v13 = v12 + 24;
      }
      unint64_t v68 = v13;
      uint64_t v10 = *v9;
    }
    uint64_t v22 = v9[1];
    int v62 = *(_DWORD *)(v22 - 8);
    int v59 = *(_DWORD *)(v22 - 4);
    int v60 = *(_DWORD *)(v22 - 12);
    if (v10 != v22)
    {
      for (uint64_t i = v10 + 12; i != v22; i += 12)
      {
        if (*(_DWORD *)v10 != *(_DWORD *)i
          || *(_DWORD *)(v10 + 4) != *(_DWORD *)(i + 4)
          || *(_DWORD *)(v10 + 8) != *(_DWORD *)(i + 8))
        {
          *(void *)unsigned int v70 = *(void *)v10;
          *(_DWORD *)&v70[8] = *(_DWORD *)(v10 + 8);
          *(void *)&v70[12] = *(void *)i;
          *(_DWORD *)&v70[20] = *(_DWORD *)(i + 8);
          uint64_t v25 = v68;
          if (v68 < v69)
          {
            *(_OWORD *)unint64_t v68 = *(_OWORD *)v70;
            *((void *)v25 + 2) = *(void *)&v70[16];
            uint64_t v24 = v25 + 24;
          }
          else
          {
            long double v26 = (char *)v67;
            unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v68 - (unsigned char *)v67) >> 3);
            unint64_t v28 = v27 + 1;
            if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_2E00();
            }
            if (0x5555555555555556 * ((v69 - (unsigned char *)v67) >> 3) > v28) {
              unint64_t v28 = 0x5555555555555556 * ((v69 - (unsigned char *)v67) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v69 - (unsigned char *)v67) >> 3) >= 0x555555555555555) {
              unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v29 = v28;
            }
            if (v29)
            {
              if (v29 > 0xAAAAAAAAAAAAAAALL) {
                sub_188D718();
              }
              unsigned int v30 = (char *)operator new(24 * v29);
            }
            else
            {
              unsigned int v30 = 0;
            }
            unsigned int v31 = &v30[24 * v27];
            *(_OWORD *)unsigned int v31 = *(_OWORD *)v70;
            *((void *)v31 + 2) = *(void *)&v70[16];
            uint64_t v32 = v31;
            if (v25 != v26)
            {
              do
              {
                long long v33 = *(_OWORD *)(v25 - 24);
                *((void *)v32 - 1) = *((void *)v25 - 1);
                *(_OWORD *)(v32 - 24) = v33;
                v32 -= 24;
                v25 -= 24;
              }
              while (v25 != v26);
              uint64_t v25 = (char *)v67;
            }
            uint64_t v24 = v31 + 24;
            unint64_t v67 = v32;
            unint64_t v68 = v31 + 24;
            BOOL v69 = &v30[24 * v29];
            if (v25) {
              operator delete(v25);
            }
          }
          unint64_t v68 = v24;
        }
        v10 += 12;
      }
    }
    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((v68 - (unsigned char *)v67) >> 3);
    if (v4 + 1 > v34) {
      unint64_t v35 = v4 + 1;
    }
    else {
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v68 - (unsigned char *)v67) >> 3);
    }
    if (v4 + 1 < v34)
    {
      uint64_t v36 = 24 * v4;
      unint64_t v37 = v35 - 1;
      while (1)
      {
        unint64_t v38 = (char *)v67 + v36;
        uint64_t v39 = (unsigned int *)((char *)v67 + v36 + 12);
        unint64_t v40 = *(unsigned int *)((char *)v67 + v36 + 4) - (unint64_t)*(unsigned int *)((char *)v67 + v36 + 16);
        unint64_t v41 = *(unsigned int *)((char *)v67 + v36) - (unint64_t)*v39;
        double v42 = sqrt((double)(v41 * v41 + v40 * v40)) / 100.0;
        if (v42 <= 1.0)
        {
          double v8 = v5;
        }
        else
        {
          int v43 = v38 + 24;
          uint64_t v44 = v38 + 36;
          unint64_t v45 = *((unsigned int *)v38 + 7) - (unint64_t)*((unsigned int *)v38 + 10);
          if (sqrt((double)((*((unsigned int *)v38 + 6) - (unint64_t)*((unsigned int *)v38 + 9))
                           * (*((unsigned int *)v38 + 6) - (unint64_t)*((unsigned int *)v38 + 9))
                           + v45 * v45))
             / 100.0 > 1.0)
          {
            uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
            if (v7 != 0x7FFFFFFFFFFFFFFFLL)
            {
              double v47 = ((double)v7 / 100.0 + v42) * 100.0;
              if (v47 >= 0.0)
              {
                double v48 = v47;
                if (v47 < 4.50359963e15)
                {
                  uint64_t v49 = (uint64_t)(v47 + v47) + 1;
                  goto LABEL_72;
                }
              }
              else
              {
                double v48 = v47;
                if (v47 > -4.50359963e15)
                {
                  uint64_t v49 = (uint64_t)(v47 + v47);
                  if (v49 >= 1) {
                    --v49;
                  }
LABEL_72:
                  double v48 = (double)(v49 >> 1);
                }
              }
              if (v48 >= 9.22337204e18)
              {
                uint64_t v46 = 0x7FFFFFFFFFFFFFFELL;
              }
              else
              {
                if (v47 >= 0.0)
                {
                  if (v47 < 4.50359963e15)
                  {
                    uint64_t v50 = (uint64_t)(v47 + v47) + 1;
                    goto LABEL_82;
                  }
                }
                else if (v47 > -4.50359963e15)
                {
                  uint64_t v50 = (uint64_t)(v47 + v47);
                  if (v50 >= 1) {
                    --v50;
                  }
LABEL_82:
                  double v47 = (double)(v50 >> 1);
                }
                uint64_t v46 = (uint64_t)v47;
              }
            }
            *(void *)unsigned int v73 = *(void *)v38;
            *(_DWORD *)&v73[8] = *((_DWORD *)v38 + 2);
            *(void *)&v73[12] = *(void *)v39;
            *(_DWORD *)&v73[20] = *(_DWORD *)((char *)v67 + v36 + 20);
            unsigned int v51 = operator new(0x18uLL);
            *(void *)&v70[8] = v51 + 3;
            *(void *)&v70[16] = v51 + 3;
            *(_OWORD *)unsigned int v51 = *(_OWORD *)v73;
            v51[2] = *(void *)&v73[16];
            *(void *)unsigned int v70 = v51;
            *(void *)uint64_t v72 = *v43;
            *(_DWORD *)&v72[8] = *((_DWORD *)v38 + 8);
            *(void *)&v72[12] = *v44;
            *(_DWORD *)&v72[20] = *((_DWORD *)v38 + 11);
            uint64_t v52 = operator new(0x18uLL);
            unint64_t v65 = v52 + 3;
            unint64_t v66 = (char *)(v52 + 3);
            *(_OWORD *)uint64_t v52 = *(_OWORD *)v72;
            v52[2] = *(void *)&v72[16];
            float64x2_t __p = v52;
            sub_4413C(v70, &__p);
            double v8 = v53;
            if (__p)
            {
              unint64_t v65 = __p;
              operator delete(__p);
            }
            if (*(void *)v70)
            {
              *(void *)&v70[8] = *(void *)v70;
              operator delete(*(void **)v70);
            }
            double v54 = *(double *)(a1 + 8032);
            if (v8 <= v54)
            {
              uint64_t v7 = v46;
              double v8 = v5;
            }
            else if (v46 == 0x7FFFFFFFFFFFFFFFLL || v46 >= *(void *)(a1 + 8016) || vabdd_f64(v8, v5) <= v54)
            {
              uint64_t v7 = 0;
            }
            else
            {
              *(void *)unsigned int v70 = *(void *)v38;
              *(_DWORD *)&v70[8] = *((_DWORD *)v38 + 2);
              *(void *)&v70[12] = *(void *)v39;
              *(_DWORD *)&v70[20] = v39[2];
              *(void *)&v70[24] = *v43;
              LODWORD(v71) = *((_DWORD *)v38 + 8);
              HIDWORD(v71) = *((_DWORD *)v38 + 11);
              *(void *)((char *)&v71 + 4) = *v44;
              uint64_t v55 = operator new(0x30uLL);
              *(void *)&v73[8] = v55 + 3;
              *(void *)&v73[16] = v55 + 3;
              long long v56 = *(_OWORD *)&v70[16];
              *uint64_t v55 = *(_OWORD *)v70;
              v55[1] = v56;
              v55[2] = v71;
              *(void *)unsigned int v73 = v55;
              sub_63C1CC(v57, 3, (uint64_t)v73, 0, 5000, 0.0);
              if (*(void *)v73)
              {
                *(void *)&v73[8] = *(void *)v73;
                operator delete(*(void **)v73);
              }
              uint64_t v7 = 0;
            }
            goto LABEL_60;
          }
          double v8 = v5;
        }
LABEL_60:
        ++v4;
        v36 += 24;
        double v5 = v8;
        if (v37 == v4) {
          goto LABEL_3;
        }
      }
    }
    double v8 = v5;
LABEL_3:
    uint64_t v3 = v61 + 1;
    double v5 = v8;
    uint64_t v2 = a2;
    int v6 = v60;
  }
  if (v67)
  {
    unint64_t v68 = (char *)v67;
    operator delete(v67);
  }
}

void sub_E748C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_E74948(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  unint64_t result = sub_46C760(a2);
  if ((int)result >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v65 = (uint64_t)(v2 + 1510);
    uint64_t v5 = 0xFFFFFFFFLL;
    int v6 = 0x7FFFFFFF;
    uint64_t v7 = 0xFFFFFFFFLL;
    uint64_t v8 = 0xFFFFFFFFLL;
    uint64_t v9 = 0xFFFFFFFFLL;
    uint64_t v10 = 0x7FFFFFFFLL;
    unsigned int v70 = v2;
    while (1)
    {
      uint64_t v14 = (int **)sub_46C8EC(v2, v4);
      unint64_t v15 = v14;
      unint64_t v16 = *v14;
      unint64_t v17 = (unsigned __int16 *)((char *)*v14 - **v14);
      unsigned int v18 = *v17;
      uint64_t v72 = v4;
      if (v18 >= 0xB && v17[5] && (*((unsigned char *)v16 + v17[5] + 3) & 4) != 0
        || (unsigned int v19 = v14[1]) != 0
        && (int v20 = (unsigned __int16 *)((char *)v19 - *v19), *v20 >= 0x11u)
        && (uint64_t v21 = v20[8]) != 0
        && (*(_WORD *)((unsigned char *)v19 + v21) & 4) != 0
        || v18 >= 0xB && (uint64_t v22 = v17[5]) != 0 && (*((unsigned char *)v16 + v22 + 2) & 1) != 0
        || (unsigned int v76 = (void *)sub_2E4738(v14), (sub_3CCE68(a1 + 9640, (unsigned int **)&v76) & 1) != 0))
      {
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        uint64_t v13 = v5;
        goto LABEL_4;
      }
      double v74 = sub_650EEC((uint64_t)v70, v4);
      sub_2954EC(*(void *)(a1 + 88), (uint64_t)v15[4], (uint64_t)&v76);
      sub_2E4B5C((uint64_t)&v76, &v79);
      if (__p)
      {
        unsigned int v78 = __p;
        operator delete(__p);
      }
      uint64_t v23 = v74[1] - *v74;
      if (v23) {
        break;
      }
      uint64_t v26 = v10;
      uint64_t v25 = v9;
      uint64_t v11 = v8;
      uint64_t v12 = v7;
      uint64_t v13 = v5;
LABEL_97:
      uint64_t v10 = v26;
      uint64_t v9 = v25;
      unint64_t v64 = v79;
      if (v79)
      {
LABEL_100:
        unsigned int v80 = v64;
        operator delete(v64);
      }
LABEL_4:
      uint64_t v2 = v70;
      unint64_t result = sub_46C760(v70);
      uint64_t v5 = v13;
      uint64_t v7 = v12;
      uint64_t v4 = v72 + 1;
      uint64_t v8 = v11;
      if (v72 + 1 >= (int)result) {
        return result;
      }
    }
    int v75 = v6;
    unint64_t v24 = 0;
    unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * (v23 >> 2);
    while (1)
    {
      if (v24 >= 0xAAAAAAAAAAAAAAABLL * ((v80 - (unsigned char *)v79) >> 2))
      {
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        uint64_t v13 = v5;
        int v6 = v75;
        unint64_t v64 = v79;
        if (v79) {
          goto LABEL_100;
        }
        goto LABEL_4;
      }
      if (v7 == -1 && v5 == -1 || v9 == -1 && v8 == -1)
      {
        unint64_t v27 = (unsigned int *)sub_413C0(v74, v24);
        uint64_t v12 = *v27;
        uint64_t v13 = v27[1];
        int v6 = v27[2];
        unint64_t v28 = (unsigned int *)sub_413C0(&v79, v24);
        uint64_t v9 = *v28;
        uint64_t v11 = v28[1];
        uint64_t v10 = v28[2];
        goto LABEL_21;
      }
      unint64_t v29 = (unsigned int *)sub_413C0(v74, v24);
      uint64_t v12 = *v29;
      uint64_t v13 = v29[1];
      int v6 = v29[2];
      unsigned int v30 = (unsigned int *)sub_413C0(&v79, v24);
      if (sqrt((double)((v7 - v12) * (v7 - v12)
                       + (v5 - v13) * ((unint64_t)v5 - v13)))
         / 100.0 >= (double)*(uint64_t *)(a1 + 8024) / 100.0)
        break;
LABEL_20:
      uint64_t v11 = v8;
      uint64_t v12 = v7;
      uint64_t v13 = v5;
      int v6 = v75;
LABEL_21:
      ++v24;
      int v75 = v6;
      uint64_t v5 = v13;
      uint64_t v7 = v12;
      uint64_t v8 = v11;
      uint64_t v25 = v9;
      uint64_t v26 = v10;
      if (v24 == v73) {
        goto LABEL_97;
      }
    }
    unsigned int v31 = v30[1];
    double v32 = (double)v9;
    double v33 = (double)v8;
    double v34 = (double)v31;
    int v69 = v30[2];
    double v35 = (double)*v30 - (double)v9;
    double v36 = (double)v31 - (double)v8;
    double v37 = v35 * v35 + v36 * v36;
    double v38 = fabs(v37);
    BOOL v39 = v37 == 0.0 || v38 < 2.22044605e-16;
    double v40 = (double)v13;
    if (!v39)
    {
      double v44 = (((double)v12 - v32) * v35 + (v40 - v33) * v36) / v37;
      if (v44 <= 0.0)
      {
        double v34 = (double)v8;
        int v69 = v10;
        unsigned int v68 = v9;
        unsigned int j = 0;
        uint64_t v11 = v8;
        char v43 = 1;
LABEL_76:
        if (v69 != v10) {
          goto LABEL_77;
        }
        goto LABEL_20;
      }
      if (v44 < 1.0)
      {
        BOOL v45 = v10 == 0x7FFFFFFF || v69 == 0x7FFFFFFF;
        int v46 = !v45;
        double v47 = ((double)v69 - (double)(int)v10) * v44 + (double)(int)v10;
        if (v45) {
          double v47 = 0.0;
        }
        double v48 = v36 * v44;
        double v49 = v35 * v44 + v32;
        if (v49 < 0.0) {
          double v50 = -0.5;
        }
        else {
          double v50 = 0.5;
        }
        unsigned int v51 = (v49 + v50);
        if (v48 + v33 < 0.0) {
          double v52 = -0.5;
        }
        else {
          double v52 = 0.5;
        }
        unsigned int v53 = (v48 + v33 + v52);
        if (v47 < 0.0) {
          double v54 = -0.5;
        }
        else {
          double v54 = 0.5;
        }
        if (v46) {
          unsigned int v55 = (v47 + v54);
        }
        else {
          unsigned int v55 = 0x7FFFFFFF;
        }
        int v69 = v55;
        if (v53 >= 0xFFFFFFFE) {
          uint64_t v56 = 4294967294;
        }
        else {
          uint64_t v56 = v53;
        }
        double v34 = (double)v56;
        unsigned int v68 = v51;
        unsigned int j = v51 - v9;
        uint64_t v11 = v56;
        BOOL v57 = v51 == v9 && v56 == v8;
        char v43 = v57;
        if (!v57)
        {
LABEL_77:
          if (v12 != v7 || (double i = 0.0, v5 != v13))
          {
            char v66 = v43;
            unsigned int v67 = j;
            double v59 = (double)(v12 - v7);
            if ((int)v12 - (int)v7 >= (v7 - v12)) {
              double v59 = -(double)(v7 - v12);
            }
            for (double i = (atan2(v40 - (double)v5, v59) + 1.57079633) * 180.0 / 3.14159265;
                  i >= 180.0;
            char v43 = v66;
            for (j = v67; i < -180.0; double i = i + 360.0)
              ;
          }
          double k = 0.0;
          if ((v43 & 1) == 0)
          {
            double v61 = -(double)-j;
            if (j < -j) {
              double v61 = (double)j;
            }
            for (double k = (atan2(v34 - v33, v61) + 1.57079633) * 180.0 / 3.14159265; k >= 180.0; double k = k + -360.0)
              ;
            while (k < -180.0)
              double k = k + 360.0;
          }
          sub_440F0(i, k);
          uint64_t v9 = v68;
          uint64_t v10 = v69;
          if (v62 > *(double *)(a1 + 8048))
          {
            double v63 = operator new(0x18uLL);
            float64x2_t __p = v63 + 6;
            unsigned int v78 = v63 + 6;
            *double v63 = v7;
            v63[1] = v5;
            v63[2] = v75;
            v63[3] = v12;
            v63[4] = v13;
            v63[5] = v6;
            unsigned int v76 = v63;
            sub_63C1CC(v65, 4, (uint64_t)&v76, 0, 5000, 0.0);
            if (v76)
            {
              float64x2_t __p = v76;
              operator delete(v76);
            }
          }
          goto LABEL_21;
        }
        goto LABEL_76;
      }
    }
    unsigned int v68 = *v30;
    unsigned int j = *v30 - v9;
    uint64_t v11 = v30[1];
    if (j) {
      BOOL v42 = 0;
    }
    else {
      BOOL v42 = v31 == v8;
    }
    char v43 = v42;
    if (!v42) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  return result;
}

void sub_E74FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a25) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

void sub_E75030(void **a1, void *a2)
{
  uint64_t v3 = sub_E7013C(a1, a2);
  uint64_t v119 = 0;
  uint64_t v120 = 0;
  uint64_t v118 = 0;
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  int64_t v6 = v4 - (unsigned char *)*v3;
  if (v4 != *v3)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    uint64_t v118 = operator new(v6);
    uint64_t v120 = (char *)v118 + 8 * (v6 >> 3);
    size_t v7 = 24 * ((v6 - 24) / 0x18uLL) + 24;
    memcpy(v118, v5, v7);
    uint64_t v119 = (char *)v118 + v7;
  }
  uint64_t v8 = sub_E70764(a1, a2);
  unint64_t v115 = 0;
  BOOL v116 = 0;
  unsigned int v117 = 0;
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  int64_t v11 = v9 - (unsigned char *)*v8;
  if (v9 == *v8)
  {
    uint64_t v14 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v11 >> 3) > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(v11);
    unint64_t v115 = v12;
    unsigned int v117 = &v12[8 * (v11 >> 3)];
    size_t v13 = 24 * ((v11 - 24) / 0x18uLL) + 24;
    memcpy(v12, v10, v13);
    uint64_t v14 = &v12[v13];
    BOOL v116 = &v12[v13];
  }
  unint64_t v15 = (char *)v118;
  unint64_t v16 = (unsigned int *)v119;
  unint64_t v114 = (unsigned int **)&v118;
  unsigned int v17 = sub_63BD44(4, 0.0);
  unsigned int v18 = sub_63BD44(4, 1.0);
  unsigned int v19 = (char *)operator new(0x20uLL);
  uint64_t v124 = v19 + 32;
  v125 = v19 + 32;
  *(void *)unsigned int v19 = 0;
  *((double *)v19 + 1) = (double)v17;
  *((void *)v19 + 2) = 0x3FF0000000000000;
  *((double *)v19 + 3) = (double)v18;
  unsigned int v123 = v19;
  sub_65DB8((uint64_t)&v123, 1, (uint64_t *)v113);
  if (v123)
  {
    uint64_t v124 = v123;
    operator delete(v123);
  }
  unsigned int v20 = sub_63BD44(0, 0.0);
  unsigned int v21 = sub_63BD44(0, 1.0);
  unsigned int v22 = sub_63BD44(1, 1.0);
  uint64_t v23 = (char *)operator new(0x30uLL);
  uint64_t v124 = v23 + 48;
  v125 = v23 + 48;
  *(void *)uint64_t v23 = 0;
  *((double *)v23 + 1) = (double)v20;
  *((void *)v23 + 2) = 0x3F9C71C71C71C71CLL;
  *((double *)v23 + 3) = (double)v21;
  *((void *)v23 + 4) = 0x3FAC71C71C71C71CLL;
  *((double *)v23 + 5) = (double)v22;
  unsigned int v123 = v23;
  sub_65DB8((uint64_t)&v123, 1, (uint64_t *)__p);
  if (v123)
  {
    uint64_t v124 = v123;
    operator delete(v123);
  }
  uint64_t v110 = 0;
  uint64_t v111 = 0;
  int v109 = &v110;
  if (v15 != (char *)v16 && v12 != v14)
  {
    unint64_t v24 = v12;
    uint64_t v25 = (unsigned int *)v15;
    while (1)
    {
      uint64_t v26 = v12;
      unint64_t v27 = v24;
      unint64_t v28 = v25;
      while (1)
      {
        uint64_t v25 = v28;
        unint64_t v24 = v27;
        if (v28 != (unsigned int *)v15)
        {
          uint64_t v29 = 0;
          unsigned int v30 = v15;
          while (v30 != (char *)v25)
          {
            int v31 = *((_DWORD *)v30 + 2);
            int v32 = *((_DWORD *)v30 + 3);
            double v33 = (unsigned int *)v30;
            do
            {
              double v34 = v16;
              if (v33 != v16)
              {
                uint64_t v37 = *(void *)v33;
                double v36 = v33 + 6;
                uint64_t v35 = v37;
                while (v36 != v16)
                {
                  uint64_t v38 = *(void *)v36;
                  v36 += 6;
                  if (v38 != v35)
                  {
                    unsigned int v30 = (char *)(v36 - 6);
                    double v34 = v36 - 6;
                    goto LABEL_31;
                  }
                }
                unsigned int v30 = (char *)v16;
                double v34 = v16;
              }
LABEL_31:
              if (v34 == v25) {
                break;
              }
              BOOL v39 = v34[2] == v31 && v34[3] == v32;
              double v33 = v34;
            }
            while (v39);
            ++v29;
            if (v30 == (char *)v25) {
              goto LABEL_38;
            }
          }
          ++v29;
LABEL_38:
          if (v29 > 14) {
            break;
          }
        }
        unint64_t v28 = v16;
        if (v25 != v16)
        {
          uint64_t v42 = *(void *)v25;
          unint64_t v41 = v25 + 6;
          uint64_t v40 = v42;
          while (v41 != v16)
          {
            uint64_t v43 = *(void *)v41;
            v41 += 6;
            if (v43 != v40)
            {
              unint64_t v28 = v41 - 6;
              goto LABEL_44;
            }
          }
          unint64_t v28 = v16;
          unint64_t v27 = v14;
          if (v24 == v14) {
            goto LABEL_19;
          }
LABEL_47:
          uint64_t v46 = *(void *)v24;
          BOOL v45 = v24 + 24;
          uint64_t v44 = v46;
          do
          {
            if (v45 == v14)
            {
              unint64_t v27 = v14;
              goto LABEL_19;
            }
            uint64_t v47 = *(void *)v45;
            v45 += 24;
          }
          while (v47 == v44);
          unint64_t v27 = v45 - 24;
          goto LABEL_19;
        }
LABEL_44:
        unint64_t v27 = v14;
        if (v24 != v14) {
          goto LABEL_47;
        }
LABEL_19:
        if (v28 == v16)
        {
          uint64_t v25 = v16;
          unint64_t v24 = v27;
          break;
        }
      }
      if (v25 == (unsigned int *)v15) {
        break;
      }
      uint64_t v48 = 0;
      double v49 = v15;
      while (v49 != (char *)v25)
      {
        int v50 = *((_DWORD *)v49 + 2);
        int v51 = *((_DWORD *)v49 + 3);
        double v52 = (unsigned int *)v49;
        do
        {
          unsigned int v53 = v16;
          if (v52 != v16)
          {
            uint64_t v56 = *(void *)v52;
            unsigned int v55 = v52 + 6;
            uint64_t v54 = v56;
            while (v55 != v16)
            {
              uint64_t v57 = *(void *)v55;
              v55 += 6;
              if (v57 != v54)
              {
                double v49 = (char *)(v55 - 6);
                unsigned int v53 = v55 - 6;
                goto LABEL_63;
              }
            }
            double v49 = (char *)v16;
            unsigned int v53 = v16;
          }
LABEL_63:
          if (v53 == v25) {
            break;
          }
          BOOL v58 = v53[2] == v50 && v53[3] == v51;
          double v52 = v53;
        }
        while (v58);
        ++v48;
        if (v49 == (char *)v25) {
          goto LABEL_70;
        }
      }
      ++v48;
LABEL_70:
      if (v48 < 15) {
        break;
      }
      if (sub_E75AD4(&v114, (unsigned int *)v15) && sub_E75AD4(&v114, v25))
      {
        unsigned int v123 = v15;
        char v126 = 0;
        v121[0] = (uint64_t)v25;
        char v122 = 0;
        double v59 = sub_E7CFB8((uint64_t *)&v123, v121, 30);
        unsigned int v123 = v12;
        char v126 = 0;
        v121[0] = (uint64_t)v24;
        char v122 = 0;
        double v60 = sub_E7D6A0((uint64_t *)&v123, v121, 30);
        if (v59 > 0.0)
        {
          double v61 = v60;
          if (v60 > v59)
          {
            sub_66188((uint64_t)v113, v60 / v59);
            double v63 = v62;
            sub_66188((uint64_t)__p, v61 - v59);
            double v65 = v64;
            double v66 = v64 >= v63 ? v63 : v64;
            int v67 = sub_63BD14(v63);
            int v68 = sub_63BD14(v65);
            int v69 = v68 >= v67 ? v67 : v68;
            BOOL v70 = v69 < 1 || v26 == v24;
            long long v71 = v26;
            if (!v70)
            {
              while (1)
              {
                unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((v71 - (unsigned char *)v115) >> 3);
                unsigned int v78 = v110;
                int v79 = &v110;
                unsigned int v80 = &v110;
                if (!v110)
                {
LABEL_108:
                  uint64_t v84 = (uint64_t *)operator new(0x30uLL);
                  v84[4] = v77;
                  v84[5] = 0;
                  uint64_t *v84 = 0;
                  v84[1] = 0;
                  v84[2] = (uint64_t)v79;
                  *unsigned int v80 = v84;
                  unint64_t v85 = *v109;
                  double v86 = v66;
                  int v79 = (uint64_t **)v84;
                  if (*v109) {
                    goto LABEL_133;
                  }
                  goto LABEL_95;
                }
                double v81 = v110;
                while (1)
                {
                  unint64_t v82 = v81[4];
                  if (v77 >= v82) {
                    break;
                  }
LABEL_99:
                  double v81 = (uint64_t *)*v81;
                  if (!v81)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        int v79 = (uint64_t **)v78;
                        unint64_t v83 = v78[4];
                        if (v77 >= v83) {
                          break;
                        }
                        unsigned int v78 = *v79;
                        unsigned int v80 = v79;
                        if (!*v79) {
                          goto LABEL_108;
                        }
                      }
                      if (v83 >= v77) {
                        break;
                      }
                      unsigned int v78 = v79[1];
                      if (!v78)
                      {
                        unsigned int v80 = v79 + 1;
                        goto LABEL_108;
                      }
                    }
                    double v86 = v66;
                    goto LABEL_96;
                  }
                }
                if (v82 < v77) {
                  break;
                }
                unsigned int v87 = v110;
                do
                {
                  while (1)
                  {
                    uint64_t v88 = v87;
                    unint64_t v89 = v87[4];
                    if (v77 < v89) {
                      break;
                    }
                    if (v89 >= v77)
                    {
                      uint64_t v90 = v88;
                      goto LABEL_122;
                    }
                    unsigned int v87 = (uint64_t *)v88[1];
                    if (!v87)
                    {
                      unint64_t v108 = (uint64_t **)(v88 + 1);
                      goto LABEL_118;
                    }
                  }
                  unsigned int v87 = (uint64_t *)*v88;
                }
                while (*v88);
                unint64_t v108 = (uint64_t **)v88;
LABEL_118:
                uint64_t v90 = operator new(0x30uLL);
                v90[4] = v77;
                v90[5] = 0;
                *uint64_t v90 = 0;
                v90[1] = 0;
                v90[2] = v88;
                unsigned int *v108 = v90;
                unint64_t v91 = v90;
                if (*v109)
                {
                  int v109 = (uint64_t **)*v109;
                  unint64_t v91 = *v108;
                }
                sub_2F250(v110, v91);
                unsigned int v78 = v110;
                ++v111;
LABEL_122:
                if (*((double *)v90 + 5) >= v66) {
                  double v86 = *((double *)v90 + 5);
                }
                else {
                  double v86 = v66;
                }
                int v79 = &v110;
LABEL_127:
                unsigned int v80 = v79;
                if (v78)
                {
                  do
                  {
                    int v79 = (uint64_t **)v78;
                    unint64_t v92 = v78[4];
                    if (v77 < v92)
                    {
                      unsigned int v78 = *v79;
                      goto LABEL_127;
                    }
                    if (v92 >= v77) {
                      goto LABEL_96;
                    }
                    unsigned int v78 = v79[1];
                  }
                  while (v78);
                  unsigned int v80 = v79 + 1;
                }
                uint64_t v84 = (uint64_t *)operator new(0x30uLL);
                v84[4] = v77;
                v84[5] = 0;
                uint64_t *v84 = 0;
                v84[1] = 0;
                v84[2] = (uint64_t)v79;
                *unsigned int v80 = v84;
                unint64_t v85 = *v109;
                int v79 = (uint64_t **)v84;
                if (*v109)
                {
LABEL_133:
                  int v79 = (uint64_t **)v84;
                  int v109 = (uint64_t **)v85;
                  uint64_t v84 = *v80;
                }
LABEL_95:
                sub_2F250(v110, v84);
                ++v111;
LABEL_96:
                *((double *)v79 + 5) = v86;
                v71 += 24;
                if (v71 == v24) {
                  goto LABEL_86;
                }
              }
              ++v81;
              goto LABEL_99;
            }
          }
        }
      }
LABEL_86:
      if (v25 == v16 || v24 == v14) {
        break;
      }
      uint64_t v72 = (char *)v16;
      if (v15 == (char *)v16)
      {
LABEL_93:
        uint64_t v12 = v14;
        unint64_t v15 = v72;
        if (v26 == v14) {
          continue;
        }
LABEL_135:
        uint64_t v95 = *(void *)v26;
        unint64_t v94 = v26 + 24;
        uint64_t v93 = v95;
        do
        {
          if (v94 == v14)
          {
            uint64_t v12 = v14;
            goto LABEL_16;
          }
          uint64_t v96 = *(void *)v94;
          v94 += 24;
        }
        while (v96 == v93);
        uint64_t v12 = v94 - 24;
LABEL_16:
        unint64_t v15 = v72;
        continue;
      }
      uint64_t v75 = *(void *)v15;
      double v74 = (unsigned int *)(v15 + 24);
      uint64_t v73 = v75;
      while (v74 != v16)
      {
        uint64_t v76 = *(void *)v74;
        v74 += 6;
        if (v76 != v73)
        {
          uint64_t v72 = (char *)(v74 - 6);
          goto LABEL_93;
        }
      }
      uint64_t v72 = (char *)v16;
      uint64_t v12 = v14;
      unint64_t v15 = (char *)v16;
      if (v26 != v14) {
        goto LABEL_135;
      }
    }
    BOOL v97 = v109;
    unsigned int v123 = 0;
    uint64_t v124 = 0;
    v125 = 0;
    if (v109 != &v110)
    {
      unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * ((v116 - (unsigned char *)v115) >> 3);
      uint64_t v99 = (uint64_t)(a2 + 1510);
      double v100 = -1.0;
      do
      {
        unint64_t v101 = (unint64_t)v97[4];
        if ((v101 != v98 + 1 || *((double *)v97 + 5) != v100) && v123 != v124)
        {
          sub_63C1CC(v99, 7, (uint64_t)&v123, v100, 5000, v100);
          uint64_t v124 = v123;
          unint64_t v101 = (unint64_t)v97[4];
        }
        uint64_t v102 = sub_E6E93C(&v115, v101);
        sub_30C0C(&v123, (uint64_t *)(v102 + 8));
        unsigned int v103 = v97[1];
        unint64_t v104 = v97;
        if (v103)
        {
          do
          {
            uint64_t v105 = (uint64_t **)v103;
            unsigned int v103 = (uint64_t *)*v103;
          }
          while (v103);
        }
        else
        {
          do
          {
            uint64_t v105 = (uint64_t **)v104[2];
            BOOL v39 = *v105 == (uint64_t *)v104;
            unint64_t v104 = v105;
          }
          while (!v39);
        }
        unint64_t v98 = (unint64_t)v97[4];
        double v100 = *((double *)v97 + 5);
        BOOL v97 = v105;
      }
      while (v105 != &v110);
      unsigned int v106 = v124;
      if (v123 != v124)
      {
        sub_63C1CC(v99, 7, (uint64_t)&v123, v100, 5000, v100);
        unsigned int v106 = v123;
      }
      if (v106)
      {
        uint64_t v124 = v106;
        operator delete(v106);
      }
    }
  }
  sub_22EFF4((uint64_t)&v109, v110);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v113[0])
  {
    v113[1] = v113[0];
    operator delete(v113[0]);
  }
  if (v115)
  {
    BOOL v116 = (char *)v115;
    operator delete(v115);
  }
  if (v118)
  {
    uint64_t v119 = (char *)v118;
    operator delete(v118);
  }
}

void sub_E759A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  int v31 = *(void **)(v29 - 160);
  if (v31)
  {
    *(void *)(v29 - 152) = v31;
    operator delete(v31);
  }
  sub_22EFF4((uint64_t)&a13, a14);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  _Unwind_Resume(a1);
}

BOOL sub_E75AD4(unsigned int ***a1, unsigned int *a2)
{
  uint64_t v2 = **a1;
  if (v2 == a2) {
    return 0;
  }
  uint64_t v4 = (*a1)[1];
  if (v4 == a2) {
    return 0;
  }
  uint64_t v5 = a2 + 6;
  double v6 = 0.0;
  do
  {
    size_t v7 = v5;
    if (v5 == v4) {
      break;
    }
    uint64_t v9 = *(v5 - 4);
    uint64_t v8 = *(v5 - 3);
    uint64_t v10 = v5[3];
    long double v11 = exp((double)((v10 >> 1) + (v8 >> 1)) * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v12 = atan((v11 + -1.0 / v11) * 0.5);
    double v6 = v6
       + cos(v12 * 57.2957795 / 180.0 * 3.14159265)
       * 0.00932288077
       * (sqrt((double)((v8 - v10) * (v8 - v10) + (v9 - v7[2]) * (v9 - (unint64_t)v7[2])))
        / 100.0
        * 100.0);
    uint64_t v5 = v7 + 6;
  }
  while (v6 < 10.0);
  if (v6 < 10.0) {
    return 0;
  }
  size_t v13 = a2 - 6;
  double v14 = 0.0;
  do
  {
    uint64_t v16 = v13[8];
    uint64_t v15 = v13[9];
    uint64_t v17 = v13[3];
    long double v18 = exp((double)((v17 >> 1) + (v15 >> 1)) * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v19 = atan((v18 + -1.0 / v18) * 0.5);
    long double v20 = cos(v19 * 57.2957795 / 180.0 * 3.14159265);
    uint64_t v21 = v13[2];
    double v14 = v14
        + v20
        * 0.00932288077
        * (sqrt((double)(unint64_t)((v15 - v17) * (v15 - v17) + (v16 - v21) * (v16 - v21)))
         / 100.0
         * 100.0);
    if (v13 == v2) {
      break;
    }
    v13 -= 6;
  }
  while (v14 < 10.0);
  if (v14 < 10.0) {
    return 0;
  }
  uint64_t v23 = v7[3];
  long double v24 = exp((double)((v17 >> 1) + (v23 >> 1)) * -6.28318531 / 4294967300.0 + 3.14159265);
  long double v25 = atan((v24 + -1.0 / v24) * 0.5);
  return (v6 + v14)
       / (cos(v25 * 57.2957795 / 180.0 * 3.14159265)
        * 0.00932288077
        * (sqrt((double)((v17 - v23) * (v17 - v23) + (v21 - v7[2]) * (v21 - (unint64_t)v7[2])))
         / 100.0
         * 100.0)) < 1.1;
}

void sub_E75DB4(uint64_t a1, void *a2)
{
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20E12D0;
  strcpy(v41[0], "enable_route_geometry_anomaly_detector");
  uint64_t v4 = sub_58070(a2, (uint64_t)v41);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)a1 = v5 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_6;
    }
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a1 != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_6:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9260;
  strcpy(v41[0], "enable_self_intersection_detector");
  double v6 = sub_58070(a2, (uint64_t)v41);
  if (v6 && (int v7 = *((_DWORD *)v6 + 12), (v7 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1) = v7 == 4;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1) = *(unsigned char *)(a1 + 1) != 0;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  operator delete(v41[0]);
LABEL_13:
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9260;
  strcpy(v41[0], "self_intersection_search_radius_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 8));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9960;
  strcpy(v41[0], "self_intersection_elevation_threshold_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 16));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A70;
  strcpy(v41[0], "enable_opposite_travel_direction_geometry_points_detector");
  uint64_t v8 = sub_58070(a2, (uint64_t)v41);
  if (v8 && (int v9 = *((_DWORD *)v8 + 12), (v9 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 24) = v9 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_22;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_22:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9260;
  strcpy(v41[0], "enable_route_line_jagged_detector");
  uint64_t v10 = sub_58070(a2, (uint64_t)v41);
  if (v10 && (int v11 = *((_DWORD *)v10 + 12), (v11 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 25) = v11 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_28;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 25) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_28:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v41[1] = xmmword_20B99C0;
  strcpy(v41[0], "enable_route_line_differs_from_center_line_bearings_detector");
  long double v12 = sub_58070(a2, (uint64_t)v41);
  if (v12 && (int v13 = *((_DWORD *)v12 + 12), (v13 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 26) = v13 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_34;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 26) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_34:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v41[1] = xmmword_20B99E0;
  strcpy(v41[0], "enable_adjacent_bluelines_bearing_difference_detector");
  double v14 = sub_58070(a2, (uint64_t)v41);
  if (v14 && (int v15 = *((_DWORD *)v14 + 12), (v15 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 27) = v15 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_40;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 27) = *(unsigned char *)(a1 + 27) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_40:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v41[1] = xmmword_20B99E0;
  strcpy(v41[0], "enable_outside_of_transport_network_polygons_detector");
  uint64_t v16 = sub_58070(a2, (uint64_t)v41);
  if (v16 && (int v17 = *((_DWORD *)v16 + 12), (v17 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 28) = v17 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_46;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 28) = *(unsigned char *)(a1 + 28) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_46:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8FD0;
  strcpy(v41[0], "enable_excessive_tortuosity_detector");
  long double v18 = sub_58070(a2, (uint64_t)v41);
  if (v18 && (int v19 = *((_DWORD *)v18 + 12), (v19 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 29) = v19 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_52;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 29) = *(unsigned char *)(a1 + 29) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_52:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9800;
  strcpy(v41[0], "enable_bad_elevations_detector");
  long double v20 = sub_58070(a2, (uint64_t)v41);
  if (v20 && (int v21 = *((_DWORD *)v20 + 12), (v21 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 30) = v21 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_58;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 30) = *(unsigned char *)(a1 + 30) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_58:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A70;
  strcpy(v41[0], "enable_excessive_segment_geometry_distribution_diff_ratio");
  unsigned int v22 = sub_58070(a2, (uint64_t)v41);
  if (v22 && (int v23 = *((_DWORD *)v22 + 12), (v23 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 32) = v23 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_64;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a1 + 32) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_64:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "max_in_range_segment_search");
  long double v24 = sub_58070(a2, (uint64_t)v41);
  if (v24 && *((_DWORD *)v24 + 12) == 1)
  {
    *(void *)(a1 + 40) = (unint64_t)*((double *)v24 + 5);
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_70;
    }
  }
  else
  {
    *(void *)(a1 + 40) = *(void *)(a1 + 40);
    if (SHIBYTE(v41[2]) < 0) {
LABEL_70:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "min_in_range_segment_search");
  long double v25 = sub_58070(a2, (uint64_t)v41);
  if (v25 && *((_DWORD *)v25 + 12) == 1)
  {
    *(void *)(a1 + 48) = (unint64_t)*((double *)v25 + 5);
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
  }
  else
  {
    *(void *)(a1 + 48) = *(void *)(a1 + 48);
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
  }
  operator delete(v41[0]);
LABEL_77:
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9240;
  strcpy(v41[0], "fast_or_slow_check_threshold_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 56));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9260;
  strcpy(v41[0], "enable_high_acceleration_detector");
  uint64_t v26 = sub_58070(a2, (uint64_t)v41);
  if (v26 && (int v27 = *((_DWORD *)v26 + 12), (v27 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 31) = v27 == 4;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_85;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 31) = *(unsigned char *)(a1 + 31) != 0;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_85;
    }
  }
  operator delete(v41[0]);
LABEL_85:
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "drivable_lane_width_freeway");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 64));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9280;
  strcpy(v41[0], "drivable_lane_width_major_arterial");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 72));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9280;
  strcpy(v41[0], "drivable_lane_width_minor_arterial");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 80));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8870;
  strcpy(v41[0], "drivable_lane_width_local");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 88));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 19;
  strcpy((char *)v41, "cyclable_lane_width");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 96));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9240;
  strcpy(v41[0], "min_distance_offset_tolerance_freeway");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 104));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20E1380;
  strcpy(v41[0], "min_distance_offset_tolerance_major_arterial");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 112));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20E1380;
  strcpy(v41[0], "min_distance_offset_tolerance_minor_arterial");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 120));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B93A0;
  strcpy(v41[0], "min_distance_offset_tolerance_local");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 128));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9240;
  strcpy(v41[0], "distance_threshold_since_last_big_jag");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 144));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20B93D0;
  strcpy(v41[0], "distance_threshold_for_heading_difference");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 152));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A20;
  strcpy(v41[0], "distance_threshold_for_adjacent_bearing_difference");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 184));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "angle_threshold_for_big_jag");
  unint64_t v28 = sub_58070(a2, (uint64_t)v41);
  uint64_t v29 = (void *)(a1 + 160);
  if (v28)
  {
    uint64_t v29 = v28 + 5;
    if (*((_DWORD *)v28 + 12) != 1) {
      uint64_t v29 = (void *)(a1 + 160);
    }
  }
  *(void *)(a1 + 160) = *v29;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9240;
  strcpy(v41[0], "angle_threshold_for_adjacent_flowline");
  unsigned int v30 = sub_58070(a2, (uint64_t)v41);
  int v31 = (void *)(a1 + 168);
  if (v30)
  {
    int v31 = v30 + 5;
    if (*((_DWORD *)v30 + 12) != 1) {
      int v31 = (void *)(a1 + 168);
    }
  }
  *(void *)(a1 + 168) = *v31;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A40;
  strcpy(v41[0], "angle_threshold_for_big_heading_difference");
  int v32 = sub_58070(a2, (uint64_t)v41);
  double v33 = (void *)(a1 + 176);
  if (v32)
  {
    double v33 = v32 + 5;
    if (*((_DWORD *)v32 + 12) != 1) {
      double v33 = (void *)(a1 + 176);
    }
  }
  *(void *)(a1 + 176) = *v33;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91B0;
  strcpy(v41[0], "width_offset_tolerance_ratio");
  double v34 = sub_58070(a2, (uint64_t)v41);
  uint64_t v35 = (void *)(a1 + 136);
  if (v34)
  {
    uint64_t v35 = v34 + 5;
    if (*((_DWORD *)v34 + 12) != 1) {
      uint64_t v35 = (void *)(a1 + 136);
    }
  }
  *(void *)(a1 + 136) = *v35;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9260;
  strcpy(v41[0], "max_backward_segment_search_index");
  double v36 = sub_58070(a2, (uint64_t)v41);
  if (v36 && *((_DWORD *)v36 + 12) == 1)
  {
    *(void *)(a1 + 192) = (unint64_t)*((double *)v36 + 5);
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_134;
    }
  }
  else
  {
    *(void *)(a1 + 192) = *(void *)(a1 + 192);
    if (SHIBYTE(v41[2]) < 0) {
LABEL_134:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9390;
  strcpy(v41[0], "max_forward_segment_search_index");
  uint64_t v37 = sub_58070(a2, (uint64_t)v41);
  if (v37 && *((_DWORD *)v37 + 12) == 1)
  {
    *(void *)(a1 + 200) = (unint64_t)*((double *)v37 + 5);
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_140;
    }
  }
  else
  {
    *(void *)(a1 + 200) = *(void *)(a1 + 200);
    if (SHIBYTE(v41[2]) < 0) {
LABEL_140:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "excess_tortuosity_threshold");
  uint64_t v38 = sub_58070(a2, (uint64_t)v41);
  BOOL v39 = (void *)(a1 + 208);
  if (v38)
  {
    BOOL v39 = v38 + 5;
    if (*((_DWORD *)v38 + 12) != 1) {
      BOOL v39 = (void *)(a1 + 208);
    }
  }
  *(void *)(a1 + 208) = *v39;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 20;
  strcpy((char *)v41, "max_divison_line_frc");
  uint64_t v40 = sub_58070(a2, (uint64_t)v41);
  if (v40 && *((_DWORD *)v40 + 12) == 1)
  {
    *(_DWORD *)(a1 + 216) = *((double *)v40 + 5);
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_152;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 216) = *(_DWORD *)(a1 + 216);
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_152;
    }
  }
  operator delete(v41[0]);
LABEL_152:
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20B93E0;
  strcpy(v41[0], "min_anomaly_distance_across_division_line_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 224));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
}

void sub_E76DDC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 25) < 0) {
    operator delete(*(void **)(v1 - 48));
  }
  _Unwind_Resume(exception_object);
}

void sub_E76E88(int8x8_t *a1, void *a2)
{
  unsigned int v2 = sub_63BD44(0, 1.0);
  unsigned int v3 = sub_63BD44(1, 1.0);
  unsigned int v4 = sub_63BD44(2, 1.0);
  unsigned int v5 = sub_63BD44(3, 1.0);
  unsigned int v6 = sub_63BD44(4, 1.0);
  int v7 = (double *)operator new(0x50uLL);
  double v130 = (int8x8_t *)(v7 + 10);
  unint64_t v131 = (int8x8_t **)(v7 + 10);
  *int v7 = 0.0;
  v7[1] = (double)v2;
  v7[2] = 0.5;
  v7[3] = (double)v3;
  v7[4] = 2.0;
  v7[5] = (double)v4;
  v7[6] = 5.0;
  v7[7] = (double)v5;
  v7[8] = 10.0;
  v7[9] = (double)v6;
  float64x2_t __p = v7;
  sub_65DB8((uint64_t)&__p, 1, (uint64_t *)v128);
  if (__p)
  {
    double v130 = (int8x8_t *)__p;
    operator delete(__p);
  }
  v125 = 0;
  char v126 = 0;
  uint64_t v127 = 0;
  unint64_t v8 = sub_46C760(a2);
  int v9 = a1;
  if (v8)
  {
    unint64_t v10 = 0;
    int v11 = a1 + 6;
    uint64_t v12 = (uint64_t)&a1[498];
    unint64_t v113 = v8;
    while (1)
    {
      uint64_t v115 = v10;
      uint64_t v13 = sub_651310(a2, v10);
      if (!*(unsigned char *)(v13 + 328) || *(unsigned char *)(v13 + 328) == 5) {
        break;
      }
LABEL_5:
      unint64_t v10 = v115 + 1;
      if (v115 + 1 == v113) {
        goto LABEL_144;
      }
    }
    int v15 = sub_650EEC((uint64_t)a2, v115);
    int v17 = (unsigned int *)*v15;
    uint64_t v16 = (unsigned int *)v15[1];
    for (i = v16; ; uint64_t v16 = i)
    {
      if (v17 == v16) {
        goto LABEL_5;
      }
      LOBYTE(v122) = 1;
      float64x2_t __p = &v122;
      double v130 = a1 + 12;
      if ((sub_E79E0C((uint64_t)&a1[12], v17, (uint64_t)&__p) & 1) == 0)
      {
        int v27 = v126;
        if (v126 < v127)
        {
          *(void *)char v126 = 0;
          uint64_t v18 = (uint64_t)(v27 + 8);
          goto LABEL_13;
        }
        unint64_t v28 = v125;
        int64_t v29 = v126 - (unsigned char *)v125;
        uint64_t v30 = (v126 - (unsigned char *)v125) >> 3;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v32 = v127 - (unsigned char *)v125;
        if ((v127 - (unsigned char *)v125) >> 2 > v31) {
          unint64_t v31 = v32 >> 2;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          if (v33 >> 61) {
            sub_188D718();
          }
          double v34 = operator new(8 * v33);
          uint64_t v35 = &v34[8 * v30];
          *uint64_t v35 = 0;
          uint64_t v18 = (uint64_t)(v35 + 1);
          if (v27 != v28)
          {
LABEL_30:
            unint64_t v36 = v27 - 8 - v28;
            if (v36 < 0x58) {
              goto LABEL_167;
            }
            if ((unint64_t)(v27 - &v34[v29]) < 0x20) {
              goto LABEL_167;
            }
            uint64_t v37 = (v36 >> 3) + 1;
            uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
            BOOL v39 = &v27[-v38];
            uint64_t v35 = (void *)((char *)v35 - v38);
            uint64_t v40 = &v34[8 * v30 - 16];
            unint64_t v41 = (long long *)(v27 - 16);
            uint64_t v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v43 = *v41;
              *(v40 - 1) = *(v41 - 1);
              *uint64_t v40 = v43;
              v40 -= 2;
              v41 -= 2;
              v42 -= 4;
            }
            while (v42);
            int v27 = v39;
            if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_167:
              do
              {
                uint64_t v44 = *((void *)v27 - 1);
                v27 -= 8;
                *--uint64_t v35 = v44;
              }
              while (v27 != v28);
            }
            int v27 = v125;
            v125 = v35;
            char v126 = (char *)v18;
            uint64_t v127 = &v34[8 * v33];
            if (!v27) {
              goto LABEL_13;
            }
LABEL_98:
            operator delete(v27);
LABEL_13:
            char v126 = (char *)v18;
            goto LABEL_14;
          }
        }
        else
        {
          double v34 = 0;
          uint64_t v35 = (void *)(8 * v30);
          *(void *)(8 * v30) = 0;
          uint64_t v18 = 8 * v30 + 8;
          if (v27 != v28) {
            goto LABEL_30;
          }
        }
        v125 = v35;
        char v126 = (char *)v18;
        uint64_t v127 = &v34[8 * v33];
        if (v27) {
          goto LABEL_98;
        }
        goto LABEL_13;
      }
      int8x8_t v19 = v9[7];
      if (v19)
      {
        uint64_t v20 = *v17;
        uint64_t v21 = v17[1];
        unint64_t v22 = (v21
             + 2654435769
             + (((v20 + 0x388152A534) ^ 0xDEADBEEFLL) << 6)
             + (((v20 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2)) ^ (v20 + 0x388152A534) ^ 0xDEADBEEFLL;
        uint64_t v23 = (int)v17[2];
        unint64_t v24 = (v23 + 2654435769 + (v22 << 6) + (v22 >> 2)) ^ v22;
        uint8x8_t v25 = (uint8x8_t)vcnt_s8(v19);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          unint64_t v26 = v24;
          if (v24 >= *(void *)&v19) {
            unint64_t v26 = v24 % *(void *)&v19;
          }
        }
        else
        {
          unint64_t v26 = v24 & (*(void *)&v19 - 1);
        }
        BOOL v45 = *(void **)(*(void *)v11 + 8 * v26);
        if (v45)
        {
          uint64_t v46 = (void *)*v45;
          if (*v45)
          {
            if (v25.u32[0] < 2uLL)
            {
              uint64_t v47 = *(void *)&v19 - 1;
              while (1)
              {
                uint64_t v49 = v46[1];
                if (v49 == v24)
                {
                  if (*((_DWORD *)v46 + 4) == v20 && *(void *)((char *)v46 + 20) == __PAIR64__(v23, v21)) {
                    goto LABEL_59;
                  }
                }
                else if ((v49 & v47) != v26)
                {
                  goto LABEL_58;
                }
                uint64_t v46 = (void *)*v46;
                if (!v46) {
                  goto LABEL_58;
                }
              }
            }
            do
            {
              unint64_t v48 = v46[1];
              if (v48 == v24)
              {
                if (*((_DWORD *)v46 + 4) == v20 && *(void *)((char *)v46 + 20) == __PAIR64__(v23, v21)) {
                  goto LABEL_59;
                }
              }
              else
              {
                if (v48 >= *(void *)&v19) {
                  v48 %= *(void *)&v19;
                }
                if (v48 != v26) {
                  break;
                }
              }
              uint64_t v46 = (void *)*v46;
            }
            while (v46);
          }
        }
      }
LABEL_58:
      float64x2_t __p = v17;
      int v50 = sub_E7BBE0((uint64_t)v11, v17, (uint64_t)&unk_20F06E0, (uint64_t **)&__p);
      sub_E7BF98(v12, v17, (uint64_t)&__p, (uint64_t)(v50 + 4));
      float64x2_t __p = v17;
      uint64_t v46 = sub_E7BBE0((uint64_t)v11, v17, (uint64_t)&unk_20F06E0, (uint64_t **)&__p);
LABEL_59:
      char v122 = 0;
      unsigned int v123 = 0;
      uint64_t v124 = 0;
      double v52 = (unsigned char *)v46[4];
      int v51 = (unsigned char *)v46[5];
      int64_t v53 = v51 - v52;
      if (v51 != v52)
      {
        if (v53 < 0) {
          sub_2E00();
        }
        uint64_t v54 = (unint64_t *)operator new(v51 - v52);
        uint64_t v55 = v53 >> 3;
        uint64_t v56 = 8 * (v53 >> 3);
        uint64_t v57 = &v54[(unint64_t)v56 / 8];
        char v122 = v54;
        uint64_t v124 = &v54[(unint64_t)v56 / 8];
        memcpy(v54, v52, v53);
        unint64_t v58 = 0;
        unsigned int v123 = &v54[(unint64_t)v56 / 8];
        uint64_t v59 = v56 - 8;
        while (sub_2A5F28(v12, v54[v58 / 8]))
        {
          v58 += 8;
          v59 -= 8;
          if (v56 == v58) {
            goto LABEL_71;
          }
        }
        if (v58 == 8 * v55)
        {
LABEL_71:
          int v9 = a1;
          int v11 = a1 + 6;
          if (v54 == v57) {
            goto LABEL_72;
          }
          goto LABEL_120;
        }
        double v60 = &v54[v58 / 8];
        int v11 = a1 + 6;
        if (v56 - 8 == v58)
        {
          int v9 = a1;
          if (v60 == v57) {
            goto LABEL_119;
          }
LABEL_100:
          unsigned int v123 = v60;
          if (v54 == v60) {
            goto LABEL_72;
          }
        }
        else
        {
          double v61 = v60 + 1;
          int v9 = a1;
          do
          {
            if (sub_2A5F28(v12, *v61)) {
              *v60++ = *v61;
            }
            ++v61;
            v59 -= 8;
          }
          while (v59);
          uint64_t v54 = (unint64_t *)v122;
          uint64_t v57 = v123;
          if (v60 != v123) {
            goto LABEL_100;
          }
LABEL_119:
          if (v54 == v57) {
            goto LABEL_72;
          }
        }
LABEL_120:
        unint64_t v85 = v126;
        if (v126 < v127)
        {
          *(void *)char v126 = 0;
          uint64_t v86 = (uint64_t)(v85 + 8);
          goto LABEL_142;
        }
        unsigned int v87 = v125;
        int64_t v88 = v126 - (unsigned char *)v125;
        uint64_t v89 = (v126 - (unsigned char *)v125) >> 3;
        unint64_t v90 = v89 + 1;
        if ((unint64_t)(v89 + 1) >> 61) {
          sub_2E00();
        }
        uint64_t v91 = v127 - (unsigned char *)v125;
        if ((v127 - (unsigned char *)v125) >> 2 > v90) {
          unint64_t v90 = v91 >> 2;
        }
        if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v92 = v90;
        }
        if (v92)
        {
          if (v92 >> 61) {
            sub_188D718();
          }
          uint64_t v93 = operator new(8 * v92);
          unint64_t v94 = &v93[8 * v89];
          *unint64_t v94 = 0;
          uint64_t v86 = (uint64_t)(v94 + 1);
          if (v85 != v87)
          {
LABEL_131:
            unint64_t v95 = v85 - 8 - v87;
            if (v95 < 0x58) {
              goto LABEL_168;
            }
            if ((unint64_t)(v85 - &v93[v88]) < 0x20) {
              goto LABEL_168;
            }
            uint64_t v96 = (v95 >> 3) + 1;
            uint64_t v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v98 = &v85[-v97];
            unint64_t v94 = (void *)((char *)v94 - v97);
            uint64_t v99 = &v93[8 * v89 - 16];
            double v100 = (long long *)(v85 - 16);
            uint64_t v101 = v96 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v102 = *v100;
              *(v99 - 1) = *(v100 - 1);
              _OWORD *v99 = v102;
              v99 -= 2;
              v100 -= 2;
              v101 -= 4;
            }
            while (v101);
            unint64_t v85 = v98;
            if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_168:
              do
              {
                uint64_t v103 = *((void *)v85 - 1);
                v85 -= 8;
                *--unint64_t v94 = v103;
              }
              while (v85 != v87);
            }
            unint64_t v85 = v125;
            v125 = v94;
            char v126 = (char *)v86;
            uint64_t v127 = &v93[8 * v92];
            if (!v85)
            {
LABEL_142:
              char v126 = (char *)v86;
              uint64_t v84 = v122;
              if (!v122) {
                goto LABEL_14;
              }
LABEL_143:
              operator delete(v84);
              goto LABEL_14;
            }
LABEL_141:
            operator delete(v85);
            goto LABEL_142;
          }
        }
        else
        {
          uint64_t v93 = 0;
          unint64_t v94 = (void *)(8 * v89);
          *(void *)(8 * v89) = 0;
          uint64_t v86 = 8 * v89 + 8;
          if (v85 != v87) {
            goto LABEL_131;
          }
        }
        v125 = v94;
        char v126 = (char *)v86;
        uint64_t v127 = &v93[8 * v92];
        if (!v85) {
          goto LABEL_142;
        }
        goto LABEL_141;
      }
LABEL_72:
      uint64_t v118 = v9;
      float64x2_t __p = &a1[498];
      double v130 = (int8x8_t *)v17;
      unint64_t v131 = &v118;
      long long v132 = xmmword_20F0E70;
      char v133 = 0;
      unint64_t v137 = 0;
      uint64_t v138 = 0;
      unint64_t v136 = 0;
      v140 = 0;
      uint64_t v141 = 0;
      int v139 = 0;
      int v143 = 0;
      uint64_t v144 = 0;
      unint64_t v142 = 0;
      long long v134 = 0u;
      long long v135 = 0u;
      if (*v17 == -1 && v17[1] == -1)
      {
        uint64_t v119 = 0;
        uint64_t v120 = 0;
        uint64_t v121 = 0;
      }
      else
      {
        sub_E7DC0C(&__p);
        sub_E7E82C(&__p, &v119);
        if (v142)
        {
          int v143 = v142;
          operator delete(v142);
        }
      }
      if (v139)
      {
        v140 = v139;
        operator delete(v139);
      }
      if (v136)
      {
        unint64_t v137 = v136;
        operator delete(v136);
      }
      if (*((void *)&v134 + 1))
      {
        *(void *)&long long v135 = *((void *)&v134 + 1);
        operator delete(*((void **)&v134 + 1));
      }
      uint64_t v62 = *(void *)(sub_E6FC40(&v119, 0) + 8);
      double v63 = v126;
      if (v126 < v127)
      {
        *(void *)char v126 = v62;
        uint64_t v64 = (uint64_t)(v63 + 8);
        int v11 = a1 + 6;
        goto LABEL_112;
      }
      double v65 = v125;
      int64_t v66 = v126 - (unsigned char *)v125;
      uint64_t v67 = (v126 - (unsigned char *)v125) >> 3;
      unint64_t v68 = v67 + 1;
      if ((unint64_t)(v67 + 1) >> 61) {
        sub_2E00();
      }
      uint64_t v69 = v127 - (unsigned char *)v125;
      if ((v127 - (unsigned char *)v125) >> 2 > v68) {
        unint64_t v68 = v69 >> 2;
      }
      if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v70 = v68;
      }
      if (v70)
      {
        if (v70 >> 61) {
          sub_188D718();
        }
        long long v71 = operator new(8 * v70);
        uint64_t v72 = (uint64_t *)&v71[8 * v67];
        uint64_t *v72 = v62;
        uint64_t v64 = (uint64_t)(v72 + 1);
        if (v63 != v65)
        {
LABEL_94:
          unint64_t v73 = v63 - 8 - v65;
          if (v73 < 0x58)
          {
            int v11 = a1 + 6;
            goto LABEL_109;
          }
          unint64_t v74 = v63 - &v71[v66];
          int v11 = a1 + 6;
          if (v74 < 0x20) {
            goto LABEL_169;
          }
          uint64_t v75 = (v73 >> 3) + 1;
          uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v77 = &v63[-v76];
          uint64_t v72 = (uint64_t *)((char *)v72 - v76);
          unsigned int v78 = &v71[8 * v67 - 16];
          int v79 = (long long *)(v63 - 16);
          uint64_t v80 = v75 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v81 = *v79;
            *(v78 - 1) = *(v79 - 1);
            *unsigned int v78 = v81;
            v78 -= 2;
            v79 -= 2;
            v80 -= 4;
          }
          while (v80);
          double v63 = v77;
          if (v75 != (v75 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_169:
            do
            {
LABEL_109:
              uint64_t v82 = *((void *)v63 - 1);
              v63 -= 8;
              *--uint64_t v72 = v82;
            }
            while (v63 != v65);
          }
          double v63 = v125;
          v125 = v72;
          char v126 = (char *)v64;
          uint64_t v127 = &v71[8 * v70];
          if (!v63) {
            goto LABEL_112;
          }
LABEL_111:
          operator delete(v63);
          goto LABEL_112;
        }
      }
      else
      {
        long long v71 = 0;
        uint64_t v72 = (uint64_t *)(8 * v67);
        *(void *)(8 * v67) = v62;
        uint64_t v64 = 8 * v67 + 8;
        if (v63 != v65) {
          goto LABEL_94;
        }
      }
      int v11 = a1 + 6;
      v125 = v72;
      char v126 = (char *)v64;
      uint64_t v127 = &v71[8 * v70];
      if (v63) {
        goto LABEL_111;
      }
LABEL_112:
      char v126 = (char *)v64;
      sub_66188((uint64_t)v128, (double)v62 / 100.0);
      if (v83 > 0.0) {
        sub_63BF60((uint64_t)(a2 + 1510), 6, v17, v83, 5000, (double)v62 / 100.0);
      }
      if (v119)
      {
        uint64_t v120 = v119;
        operator delete(v119);
      }
      uint64_t v84 = v122;
      if (v122) {
        goto LABEL_143;
      }
LABEL_14:
      v17 += 3;
    }
  }
LABEL_144:
  unint64_t v104 = (uint64_t *)v125;
  if (v125 != v126)
  {
    uint64_t v105 = (uint64_t *)((char *)v125 + 8);
    if ((char *)v125 + 8 != v126)
    {
      uint64_t v106 = *(void *)v125;
      uint64_t v107 = (uint64_t *)((char *)v125 + 8);
      do
      {
        uint64_t v109 = *v107++;
        uint64_t v108 = v109;
        BOOL v110 = v106 < v109;
        if (v106 <= v109) {
          uint64_t v106 = v108;
        }
        if (v110) {
          unint64_t v104 = v105;
        }
        uint64_t v105 = v107;
      }
      while (v107 != (uint64_t *)v126);
    }
    double v111 = (double)*v104 / 100.0;
    sub_66188((uint64_t)v128, v111);
    sub_63C7FC((uint64_t)(a2 + 1510), 6, v112, v111);
    unint64_t v104 = (uint64_t *)v125;
  }
  if (v104)
  {
    char v126 = (char *)v104;
    operator delete(v104);
  }
  if (v128[0])
  {
    v128[1] = v128[0];
    operator delete(v128[0]);
  }
}

void sub_E77960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }
  if (a33) {
    operator delete(a33);
  }
  _Unwind_Resume(exception_object);
}

void sub_E77A24(int8x8_t *a1, void *a2)
{
  unsigned int v2 = sub_63BD44(0, 1.0);
  unsigned int v3 = sub_63BD44(1, 1.0);
  unsigned int v4 = sub_63BD44(2, 1.0);
  unsigned int v5 = sub_63BD44(3, 1.0);
  unsigned int v6 = sub_63BD44(4, 1.0);
  int v7 = (double *)operator new(0x50uLL);
  uint64_t v64 = v7 + 10;
  double v65 = (char *)(v7 + 10);
  *int v7 = 0.5;
  v7[1] = (double)v2;
  v7[2] = 1.0;
  v7[3] = (double)v3;
  v7[4] = 2.0;
  v7[5] = (double)v4;
  v7[6] = 5.0;
  v7[7] = (double)v5;
  v7[8] = 10.0;
  v7[9] = (double)v6;
  float64x2_t __p = v7;
  sub_65DB8((uint64_t)&__p, 1, (uint64_t *)v66);
  if (__p)
  {
    uint64_t v64 = __p;
    operator delete(__p);
  }
  unint64_t v8 = sub_46C760(a2);
  if (!v8)
  {
    double v12 = 2.22507386e-308;
LABEL_73:
    sub_66188((uint64_t)v66, v12);
    sub_63C7FC((uint64_t)(a2 + 1510), 8, v53, v12);
    goto LABEL_74;
  }
  unint64_t v9 = 0;
  unint64_t v10 = a1 + 6;
  uint64_t v11 = (uint64_t)&a1[498];
  unint64_t v54 = v8;
  double v12 = 2.22507386e-308;
  do
  {
    uint64_t v13 = sub_651310(a2, v9);
    if (*(unsigned char *)(v13 + 328)) {
      BOOL v14 = *(unsigned char *)(v13 + 328) == 5;
    }
    else {
      BOOL v14 = 1;
    }
    unint64_t v56 = v9;
    if (v14)
    {
      int v15 = sub_650EEC((uint64_t)a2, v9);
      int v17 = (unsigned int *)*v15;
      uint64_t v16 = (unsigned int *)v15[1];
      unint64_t v58 = v16;
      if ((unsigned int *)*v15 != v16)
      {
        do
        {
          uint64_t v18 = (int)v17[2];
          if (v18 != 0x7FFFFFFF)
          {
            int8x8_t v19 = a1[7];
            if (v19)
            {
              uint64_t v20 = *v17;
              uint64_t v21 = v17[1];
              unint64_t v22 = (v21
                   + 2654435769
                   + (((v20 + 0x388152A534) ^ 0xDEADBEEFLL) << 6)
                   + (((v20 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2)) ^ (v20 + 0x388152A534) ^ 0xDEADBEEFLL;
              unint64_t v23 = (v18 + 2654435769 + (v22 << 6) + (v22 >> 2)) ^ v22;
              uint8x8_t v24 = (uint8x8_t)vcnt_s8(v19);
              v24.i16[0] = vaddlv_u8(v24);
              if (v24.u32[0] > 1uLL)
              {
                unint64_t v25 = v23;
                if (v23 >= *(void *)&v19) {
                  unint64_t v25 = v23 % *(void *)&v19;
                }
              }
              else
              {
                unint64_t v25 = v23 & (*(void *)&v19 - 1);
              }
              unint64_t v26 = *(void **)(*(void *)v10 + 8 * v25);
              if (v26)
              {
                int v27 = (void *)*v26;
                if (*v26)
                {
                  if (v24.u32[0] < 2uLL)
                  {
                    uint64_t v28 = *(void *)&v19 - 1;
                    while (1)
                    {
                      uint64_t v30 = v27[1];
                      if (v30 == v23)
                      {
                        if (*((_DWORD *)v27 + 4) == v20
                          && *(void *)((char *)v27 + 20) == __PAIR64__(v18, v21))
                        {
                          goto LABEL_40;
                        }
                      }
                      else if ((v30 & v28) != v25)
                      {
                        goto LABEL_39;
                      }
                      int v27 = (void *)*v27;
                      if (!v27) {
                        goto LABEL_39;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v29 = v27[1];
                    if (v29 == v23)
                    {
                      if (*((_DWORD *)v27 + 4) == v20 && *(void *)((char *)v27 + 20) == __PAIR64__(v18, v21)) {
                        goto LABEL_40;
                      }
                    }
                    else
                    {
                      if (v29 >= *(void *)&v19) {
                        v29 %= *(void *)&v19;
                      }
                      if (v29 != v25) {
                        break;
                      }
                    }
                    int v27 = (void *)*v27;
                  }
                  while (v27);
                }
              }
            }
LABEL_39:
            double v61 = v17;
            unint64_t v31 = sub_E7BBE0((uint64_t)v10, v17, (uint64_t)&unk_20F06E0, (uint64_t **)&v61);
            sub_E7BF98(v11, v17, (uint64_t)&v61, (uint64_t)(v31 + 4));
            double v61 = v17;
            int v27 = sub_E7BBE0((uint64_t)v10, v17, (uint64_t)&unk_20F06E0, (uint64_t **)&v61);
LABEL_40:
            float64x2_t __p = 0;
            uint64_t v64 = 0;
            double v65 = 0;
            unint64_t v33 = (unsigned char *)v27[4];
            uint64_t v32 = (unsigned char *)v27[5];
            int64_t v34 = v32 - v33;
            if (v32 == v33)
            {
              uint64_t v16 = v58;
            }
            else
            {
              if (v34 < 0) {
                sub_2E00();
              }
              uint64_t v35 = (char *)operator new(v32 - v33);
              unint64_t v36 = (unint64_t *)&v35[8 * (v34 >> 3)];
              float64x2_t __p = v35;
              double v65 = (char *)v36;
              memcpy(v35, v33, v34);
              uint64_t v64 = v36;
              double v37 = 1.79769313e308;
              uint64_t v38 = (unint64_t *)v35;
              do
              {
                if (!sub_2A63A0(v11, *v38))
                {
                  unint64_t v10 = a1 + 6;
                  uint64_t v16 = v58;
                  goto LABEL_69;
                }
                sub_2A64C4(v11, *v38, (uint64_t *)&v61);
                LODWORD(v40) = v17[1];
                if (v40 >= 0xFFFFFFFE) {
                  uint64_t v40 = 4294967294;
                }
                else {
                  uint64_t v40 = v40;
                }
                unint64_t v59 = *v17 | (unint64_t)(v40 << 32);
                int v60 = 0x7FFFFFFF;
                double v41 = vabdd_f64((double)(int)v17[2] / 100.0, (double)(int)sub_44B30((unsigned int ****)&v61, &v59) / 100.0);
                if (v41 < v37) {
                  double v37 = v41;
                }
                uint64_t v42 = (void **)v61;
                if (v61)
                {
                  long long v43 = v62;
                  if (v62 == v61)
                  {
                    uint64_t v62 = (char *)v61;
                    BOOL v39 = v61;
                  }
                  else
                  {
                    do
                    {
                      BOOL v45 = (void **)(v43 - 24);
                      uint64_t v46 = *((void *)v43 - 3);
                      if (v46)
                      {
                        uint64_t v47 = *((void *)v43 - 2);
                        uint64_t v44 = (void *)*((void *)v43 - 3);
                        if (v47 != v46)
                        {
                          uint64_t v48 = *((void *)v43 - 2);
                          do
                          {
                            int v50 = *(void **)(v48 - 24);
                            v48 -= 24;
                            uint64_t v49 = v50;
                            if (v50)
                            {
                              *(void *)(v47 - 16) = v49;
                              operator delete(v49);
                            }
                            uint64_t v47 = v48;
                          }
                          while (v48 != v46);
                          uint64_t v44 = *v45;
                        }
                        *((void *)v43 - 2) = v46;
                        operator delete(v44);
                      }
                      v43 -= 24;
                    }
                    while (v45 != v42);
                    BOOL v39 = v61;
                    uint64_t v62 = (char *)v42;
                  }
                  operator delete(v39);
                }
                ++v38;
              }
              while (v38 != v36);
              if (v12 < v37) {
                double v12 = v37;
              }
              sub_66188((uint64_t)v66, v37);
              unint64_t v10 = a1 + 6;
              uint64_t v16 = v58;
              if (v51 > 0.0)
              {
                sub_66188((uint64_t)v66, v37);
                sub_63BF60((uint64_t)(a2 + 1510), 8, v17, v52, 5000, v37);
              }
LABEL_69:
              operator delete(v35);
            }
          }
          v17 += 3;
        }
        while (v17 != v16);
      }
    }
    unint64_t v9 = v56 + 1;
  }
  while (v56 + 1 != v54);
  if (v12 >= 0.0) {
    goto LABEL_73;
  }
LABEL_74:
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
}

void sub_E77FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E78040(void *a1, void *a2)
{
  unsigned int v4 = sub_63BD44(0, 1.0);
  unsigned int v5 = sub_63BD44(1, 1.0);
  unsigned int v6 = sub_63BD44(2, 1.0);
  unsigned int v7 = sub_63BD44(3, 1.0);
  unsigned int v8 = sub_63BD44(4, 1.0);
  unint64_t v9 = (char *)operator new(0x50uLL);
  uint64_t v18 = v9 + 80;
  *(void *)unint64_t v9 = 0x3F747AE147AE147BLL;
  *((double *)v9 + 1) = (double)v4;
  *((void *)v9 + 2) = 0x3F7EB851EB851EB8;
  *((double *)v9 + 3) = (double)v5;
  *((void *)v9 + 4) = 0x3F870A3D70A3D70ALL;
  *((double *)v9 + 5) = (double)v6;
  *((void *)v9 + 6) = 0x3F9147AE147AE148;
  *((double *)v9 + 7) = (double)v7;
  *((void *)v9 + 8) = 0x3F99EB851EB851ECLL;
  *((double *)v9 + 9) = (double)v8;
  float64x2_t __p = v9;
  int v17 = v9 + 80;
  sub_65DB8((uint64_t)&__p, 1, (uint64_t *)v22);
  if (__p)
  {
    int v17 = __p;
    operator delete(__p);
  }
  double v20 = 0.0;
  unint64_t v10 = (uint64_t *)sub_E70764(a1, a2);
  float64x2_t __p = a2;
  int v17 = v22;
  uint64_t v18 = &v21;
  int8x8_t v19 = &v20;
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  double v13 = 0.0;
  if (v12 != *v10 && v11 + 24 != v12 && v11 + 48 != v12)
  {
    do
    {
      sub_E7FC24((uint64_t)&__p, v11, v11 + 24, v11 + 48);
      uint64_t v14 = v11 + 72;
      v11 += 24;
    }
    while (v14 != v12);
    double v13 = v20;
  }
  double v15 = 4294967300.0;
  if (v13 <= 4294967300.0) {
    double v15 = v13;
  }
  if (v13 < 0.0) {
    double v15 = 0.0;
  }
  sub_63C7FC((uint64_t)(a2 + 1510), 10, vcvtad_u64_f64(v15), v13);
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
}

void sub_E78258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E7828C(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(void *)(a1 + 88) = sub_3750CC(a2);
  unsigned int v6 = (void *)sub_37746C(a2);
  *(void *)(a1 + 96) = *v6;
  uint64_t v7 = v6[1];
  *(void *)(a1 + 104) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  memcpy((void *)(a1 + 112), v6 + 2, 0xF18uLL);
  uint64_t v8 = v6[485];
  *(void *)(a1 + 3976) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v9 = (void *)sub_377648(a2);
  *(void *)(a1 + 3984) = *v9;
  uint64_t v10 = v9[1];
  *(void *)(a1 + 3992) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  memcpy((void *)(a1 + 4000), v9 + 2, 0xF18uLL);
  uint64_t v11 = v9[485];
  *(void *)(a1 + 7864) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = 0;
  char v21 = operator new(0x20uLL);
  long long v22 = xmmword_20B91B0;
  strcpy((char *)v21, "RouteGeometryAnomalyDetector");
  float64x2_t __p = 0;
  int8x8_t v19 = 0;
  uint64_t v12 = sub_374CDC((uint64_t)a2, (uint64_t)&v21, (uint64_t *)&__p);
  *(void *)(a1 + 7880) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 7888) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 7928) = 0x7FFFFFFFFFFFFFFFLL;
  int64x2_t v13 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)(a1 + 7936) = v13;
  *(int64x2_t *)(a1 + 7952) = v13;
  *(int64x2_t *)(a1 + 7968) = v13;
  *(int64x2_t *)(a1 + 7984) = v13;
  *(void *)(a1 + 8000) = 0x7FFFFFFFFFFFFFFFLL;
  *(int64x2_t *)(a1 + 8016) = v13;
  *(void *)(a1 + 8056) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8080) = 0x3FC999999999999ALL;
  *(_DWORD *)(a1 + 8088) = 6;
  *(void *)(a1 + 8096) = 50;
  sub_E78578(a1 + 7872, v12);
  uint64_t v14 = (void **)__p;
  if (__p)
  {
    double v15 = v19;
    uint64_t v16 = __p;
    if (v19 != __p)
    {
      do
      {
        if (*((char *)v15 - 1) < 0) {
          operator delete(*(v15 - 3));
        }
        v15 -= 3;
      }
      while (v15 != v14);
      uint64_t v16 = __p;
    }
    int8x8_t v19 = v14;
    operator delete(v16);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21);
  }
  sub_4BBDC0(a1 + 8104, a3);
  sub_3CCE64((uint64_t *)(a1 + 9640), a2);
  return a1;
}

void sub_E784D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_4BCED0(v19);
  sub_368744(v17 + 3984);
  sub_368744(v17 + 96);
  sub_591F30(v18);
  char v21 = *(void **)(v17 + 24);
  if (v21)
  {
    *(void *)(v17 + 32) = v21;
    operator delete(v21);
    long long v22 = *(void **)v17;
    if (!*(void *)v17) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    long long v22 = *(void **)v17;
    if (!*(void *)v17) {
      goto LABEL_3;
    }
  }
  *(void *)(v17 + 8) = v22;
  operator delete(v22);
  _Unwind_Resume(a1);
}

void sub_E78578(uint64_t a1, void *a2)
{
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20E12D0;
  strcpy(v41[0], "enable_route_geometry_anomaly_detector");
  unsigned int v4 = sub_58070(a2, (uint64_t)v41);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)a1 = v5 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_6;
    }
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a1 != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_6:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9260;
  strcpy(v41[0], "enable_self_intersection_detector");
  unsigned int v6 = sub_58070(a2, (uint64_t)v41);
  if (v6 && (int v7 = *((_DWORD *)v6 + 12), (v7 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 1) = v7 == 4;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1) = *(unsigned char *)(a1 + 1) != 0;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  operator delete(v41[0]);
LABEL_13:
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9260;
  strcpy(v41[0], "self_intersection_search_radius_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 8));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9960;
  strcpy(v41[0], "self_intersection_elevation_threshold_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 16));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A70;
  strcpy(v41[0], "enable_opposite_travel_direction_geometry_points_detector");
  uint64_t v8 = sub_58070(a2, (uint64_t)v41);
  if (v8 && (int v9 = *((_DWORD *)v8 + 12), (v9 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 24) = v9 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_22;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a1 + 24) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_22:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9260;
  strcpy(v41[0], "enable_route_line_jagged_detector");
  uint64_t v10 = sub_58070(a2, (uint64_t)v41);
  if (v10 && (int v11 = *((_DWORD *)v10 + 12), (v11 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 25) = v11 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_28;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 25) = *(unsigned char *)(a1 + 25) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_28:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v41[1] = xmmword_20B99C0;
  strcpy(v41[0], "enable_route_line_differs_from_center_line_bearings_detector");
  uint64_t v12 = sub_58070(a2, (uint64_t)v41);
  if (v12 && (int v13 = *((_DWORD *)v12 + 12), (v13 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 26) = v13 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_34;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 26) = *(unsigned char *)(a1 + 26) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_34:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v41[1] = xmmword_20B99E0;
  strcpy(v41[0], "enable_adjacent_bluelines_bearing_difference_detector");
  uint64_t v14 = sub_58070(a2, (uint64_t)v41);
  if (v14 && (int v15 = *((_DWORD *)v14 + 12), (v15 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 27) = v15 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_40;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 27) = *(unsigned char *)(a1 + 27) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_40:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v41[1] = xmmword_20B99E0;
  strcpy(v41[0], "enable_outside_of_transport_network_polygons_detector");
  uint64_t v16 = sub_58070(a2, (uint64_t)v41);
  if (v16 && (int v17 = *((_DWORD *)v16 + 12), (v17 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 28) = v17 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_46;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 28) = *(unsigned char *)(a1 + 28) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_46:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8FD0;
  strcpy(v41[0], "enable_excessive_tortuosity_detector");
  uint64_t v18 = sub_58070(a2, (uint64_t)v41);
  if (v18 && (int v19 = *((_DWORD *)v18 + 12), (v19 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 29) = v19 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_52;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 29) = *(unsigned char *)(a1 + 29) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_52:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9800;
  strcpy(v41[0], "enable_bad_elevations_detector");
  uint64_t v20 = sub_58070(a2, (uint64_t)v41);
  if (v20 && (int v21 = *((_DWORD *)v20 + 12), (v21 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 30) = v21 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_58;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 30) = *(unsigned char *)(a1 + 30) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_58:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A70;
  strcpy(v41[0], "enable_excessive_segment_geometry_distribution_diff_ratio");
  long long v22 = sub_58070(a2, (uint64_t)v41);
  if (v22 && (int v23 = *((_DWORD *)v22 + 12), (v23 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 32) = v23 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_64;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a1 + 32) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_64:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "max_in_range_segment_search");
  uint8x8_t v24 = sub_58070(a2, (uint64_t)v41);
  if (v24 && *((_DWORD *)v24 + 12) == 1)
  {
    *(void *)(a1 + 40) = (unint64_t)*((double *)v24 + 5);
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_70;
    }
  }
  else
  {
    *(void *)(a1 + 40) = *(void *)(a1 + 40);
    if (SHIBYTE(v41[2]) < 0) {
LABEL_70:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "min_in_range_segment_search");
  unint64_t v25 = sub_58070(a2, (uint64_t)v41);
  if (v25 && *((_DWORD *)v25 + 12) == 1)
  {
    *(void *)(a1 + 48) = (unint64_t)*((double *)v25 + 5);
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
  }
  else
  {
    *(void *)(a1 + 48) = *(void *)(a1 + 48);
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_77;
    }
  }
  operator delete(v41[0]);
LABEL_77:
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9240;
  strcpy(v41[0], "fast_or_slow_check_threshold_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 56));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9260;
  strcpy(v41[0], "enable_high_acceleration_detector");
  unint64_t v26 = sub_58070(a2, (uint64_t)v41);
  if (v26 && (int v27 = *((_DWORD *)v26 + 12), (v27 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 31) = v27 == 4;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_85;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 31) = *(unsigned char *)(a1 + 31) != 0;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_85;
    }
  }
  operator delete(v41[0]);
LABEL_85:
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "drivable_lane_width_freeway");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 64));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9280;
  strcpy(v41[0], "drivable_lane_width_major_arterial");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 72));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9280;
  strcpy(v41[0], "drivable_lane_width_minor_arterial");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 80));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8870;
  strcpy(v41[0], "drivable_lane_width_local");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 88));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 19;
  strcpy((char *)v41, "cyclable_lane_width");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 96));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9240;
  strcpy(v41[0], "min_distance_offset_tolerance_freeway");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 104));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20E1380;
  strcpy(v41[0], "min_distance_offset_tolerance_major_arterial");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 112));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20E1380;
  strcpy(v41[0], "min_distance_offset_tolerance_minor_arterial");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 120));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B93A0;
  strcpy(v41[0], "min_distance_offset_tolerance_local");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 128));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9240;
  strcpy(v41[0], "distance_threshold_since_last_big_jag");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 144));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20B93D0;
  strcpy(v41[0], "distance_threshold_for_heading_difference");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 152));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x38uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A20;
  strcpy(v41[0], "distance_threshold_for_adjacent_bearing_difference");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 184));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "angle_threshold_for_big_jag");
  uint64_t v28 = sub_58070(a2, (uint64_t)v41);
  unint64_t v29 = (void *)(a1 + 160);
  if (v28)
  {
    unint64_t v29 = v28 + 5;
    if (*((_DWORD *)v28 + 12) != 1) {
      unint64_t v29 = (void *)(a1 + 160);
    }
  }
  *(void *)(a1 + 160) = *v29;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9240;
  strcpy(v41[0], "angle_threshold_for_adjacent_flowline");
  uint64_t v30 = sub_58070(a2, (uint64_t)v41);
  unint64_t v31 = (void *)(a1 + 168);
  if (v30)
  {
    unint64_t v31 = v30 + 5;
    if (*((_DWORD *)v30 + 12) != 1) {
      unint64_t v31 = (void *)(a1 + 168);
    }
  }
  *(void *)(a1 + 168) = *v31;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A40;
  strcpy(v41[0], "angle_threshold_for_big_heading_difference");
  uint64_t v32 = sub_58070(a2, (uint64_t)v41);
  unint64_t v33 = (void *)(a1 + 176);
  if (v32)
  {
    unint64_t v33 = v32 + 5;
    if (*((_DWORD *)v32 + 12) != 1) {
      unint64_t v33 = (void *)(a1 + 176);
    }
  }
  *(void *)(a1 + 176) = *v33;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91B0;
  strcpy(v41[0], "width_offset_tolerance_ratio");
  int64_t v34 = sub_58070(a2, (uint64_t)v41);
  uint64_t v35 = (void *)(a1 + 136);
  if (v34)
  {
    uint64_t v35 = v34 + 5;
    if (*((_DWORD *)v34 + 12) != 1) {
      uint64_t v35 = (void *)(a1 + 136);
    }
  }
  *(void *)(a1 + 136) = *v35;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9260;
  strcpy(v41[0], "max_backward_segment_search_index");
  unint64_t v36 = sub_58070(a2, (uint64_t)v41);
  if (v36 && *((_DWORD *)v36 + 12) == 1)
  {
    *(void *)(a1 + 192) = (unint64_t)*((double *)v36 + 5);
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_134;
    }
  }
  else
  {
    *(void *)(a1 + 192) = *(void *)(a1 + 192);
    if (SHIBYTE(v41[2]) < 0) {
LABEL_134:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9390;
  strcpy(v41[0], "max_forward_segment_search_index");
  double v37 = sub_58070(a2, (uint64_t)v41);
  if (v37 && *((_DWORD *)v37 + 12) == 1)
  {
    *(void *)(a1 + 200) = (unint64_t)*((double *)v37 + 5);
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_140;
    }
  }
  else
  {
    *(void *)(a1 + 200) = *(void *)(a1 + 200);
    if (SHIBYTE(v41[2]) < 0) {
LABEL_140:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "excess_tortuosity_threshold");
  uint64_t v38 = sub_58070(a2, (uint64_t)v41);
  BOOL v39 = (void *)(a1 + 208);
  if (v38)
  {
    BOOL v39 = v38 + 5;
    if (*((_DWORD *)v38 + 12) != 1) {
      BOOL v39 = (void *)(a1 + 208);
    }
  }
  *(void *)(a1 + 208) = *v39;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 20;
  strcpy((char *)v41, "max_divison_line_frc");
  uint64_t v40 = sub_58070(a2, (uint64_t)v41);
  if (v40 && *((_DWORD *)v40 + 12) == 1)
  {
    *(_DWORD *)(a1 + 216) = *((double *)v40 + 5);
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_152;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 216) = *(_DWORD *)(a1 + 216);
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_152;
    }
  }
  operator delete(v41[0]);
LABEL_152:
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20B93E0;
  strcpy(v41[0], "min_anomaly_distance_across_division_line_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 224));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
}

void sub_E795A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 25) < 0) {
    operator delete(*(void **)(v1 - 48));
  }
  _Unwind_Resume(exception_object);
}

void sub_E7964C(int8x8_t *a1, uint64_t a2)
{
  unsigned int v4 = a1 + 984;
  if (!a1[984].i8[0] && !a1[1188].i8[4] || !*(unsigned char *)(a2 + 9976) || *(unsigned char *)(a2 + 9977)) {
    return;
  }
  if (a1[984].i8[1]) {
    sub_E72994(a1, (void *)a2);
  }
  if (v4[3].i8[1]) {
    sub_E740BC((uint64_t)a1, (void *)a2);
  }
  if (v4[3].i8[2]) {
    sub_E74948((uint64_t)a1, (void *)a2);
  }
  if (v4[3].i8[5]) {
    sub_E75030((void **)a1, (void *)a2);
  }
  if (v4[3].i8[0]) {
    sub_E70A14((uint64_t)a1, (void *)a2);
  }
  if (v4[4].i8[0])
  {
    if (*(void *)(a2 + 504) >= *(void *)&a1[991])
    {
      sub_E72298(a1, (void *)a2);
      if (!v4[3].i8[4]) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    sub_E718F0((void **)a1, (void *)a2);
  }
  if (v4[3].i8[4]) {
LABEL_20:
  }
    sub_E76E88(a1, (void *)a2);
LABEL_21:
  if (v4[3].i8[6]) {
    sub_E77A24(a1, (void *)a2);
  }
  if (v4[3].i8[7]) {
    sub_E78040(a1, (void *)a2);
  }
  if (a1[9])
  {
    int v5 = (void *)a1[8];
    if (v5)
    {
      do
      {
        uint64_t v8 = (void *)*v5;
        int v9 = (void *)v5[4];
        if (v9)
        {
          v5[5] = v9;
          operator delete(v9);
        }
        operator delete(v5);
        int v5 = v8;
      }
      while (v8);
    }
    a1[8] = 0;
    int8x8_t v6 = a1[7];
    if (v6)
    {
      uint64_t v7 = 0;
      do
        *(void *)(*(void *)&a1[6] + 8 * v7++) = 0;
      while (*(void *)&v6 != v7);
    }
    a1[9] = 0;
  }
  a1[4] = a1[3];
  a1[1] = *a1;
}

void sub_E797FC(int8x8_t *a1, uint64_t a2)
{
  unsigned int v3 = (uint64_t *)nullsub_1(a2);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 != v5)
  {
    do
    {
      sub_E7964C(a1, v4);
      v4 += 12328;
    }
    while (v4 != v5);
  }
}

uint64_t sub_E79854(uint64_t a1, unint64_t a2)
{
  unint64_t v16 = a2;
  if (!*(unsigned char *)(a1 + 7772)) {
    return 0;
  }
  unsigned int v3 = sub_2DB8E0(a1 + 3896, a2, 1);
  if (!v3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_296D50((unsigned int *)&v16, &v13);
    uint64_t v10 = std::string::insert(&v13, 0, "Road access could not find quad node for ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    std::string::size_type v15 = v10->__r_.__value_.__r.__words[2];
    long long v14 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v14);
  }
  uint64_t v4 = &v3[-*(int *)v3];
  if (*(unsigned __int16 *)v4 >= 5u && (uint64_t v5 = *((unsigned __int16 *)v4 + 2)) != 0)
  {
    int8x8_t v6 = &v3[v5 + *(unsigned int *)&v3[v5]];
    unint64_t v7 = a2;
  }
  else
  {
    int8x8_t v6 = 0;
    unint64_t v7 = a2;
  }
  return sub_E799E0(v6, v7);
}

void sub_E79988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E799E0(_DWORD *a1, unint64_t a2)
{
  unint64_t v13 = a2;
  if (!a1 || *a1 <= HIDWORD(a2))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_296D50((unsigned int *)&v13, &v9);
    uint64_t v4 = std::string::insert(&v9, 0, "Flatbuffer vector requested index (object_index)");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    int8x8_t v6 = std::string::append(&v10, " is out of range");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v6->__r_.__value_.__r.__words[2];
    long long v11 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v11);
  }
  return (uint64_t)&a1[HIDWORD(a2) + 1] + a1[HIDWORD(a2) + 1];
}

void sub_E79AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

char *sub_E79B48@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = *(void *)result;
  uint64_t v3 = *((void *)result + 1);
  if (v3 != *(void *)result)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *(void *)result) >> 3);
    if (v5 >> 60) {
      sub_2E00();
    }
    unint64_t result = (char *)operator new(0xAAAAAAAAAAAAAAB0 * ((v3 - *(void *)result) >> 3));
    int8x8_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v4 != v3; v4 += 24)
    {
      uint64_t v7 = *(void *)(v4 + 8);
      v8.i64[0] = v7;
      v8.i64[1] = HIDWORD(v7);
      float64x2_t v9 = vcvtq_f64_u64(v8);
      unint64_t result = sub_478E8((char **)a2, v6, &v9);
      int8x8_t v6 = result + 16;
    }
  }
  return result;
}

void sub_E79C0C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_E79C2C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = *(void **)result;
  uint64_t v3 = (void *)*((void *)result + 1);
  if (v3 != *(void **)result)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(void *)result) >> 2);
    if (v5 >> 60) {
      sub_2E00();
    }
    unint64_t result = (char *)operator new(0xAAAAAAAAAAAAAAB0 * (((uint64_t)v3 - *(void *)result) >> 2));
    int8x8_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v4 != v3; uint64_t v4 = (void *)((char *)v4 + 12))
    {
      v7.i64[0] = *v4;
      v7.i64[1] = HIDWORD(*v4);
      float64x2_t v8 = vcvtq_f64_u64(v7);
      unint64_t result = sub_478E8((char **)a2, v6, &v8);
      int8x8_t v6 = result + 16;
    }
  }
  return result;
}

void sub_E79CF0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double **sub_E79D10@<X0>(double **result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = *result;
  uint64_t v3 = result[1];
  uint64_t v5 = (char *)v3 - (char *)*result;
  if (v3 != *result)
  {
    if (v5 < 0) {
      sub_2E00();
    }
    uint64_t v6 = v5 >> 4;
    unint64_t result = (double **)operator new(12 * (v5 >> 4));
    uint64_t v7 = (uint64_t)result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = (char *)result + 12 * v6; v4 != v3; v4 += 2)
    {
      LODWORD(v8) = v4[1];
      if (v8 >= 0xFFFFFFFE) {
        uint64_t v8 = 4294967294;
      }
      else {
        uint64_t v8 = v8;
      }
      unint64_t v9 = *v4 | (unint64_t)(v8 << 32);
      int v10 = 0x7FFFFFFF;
      unint64_t result = (double **)sub_32ACC((char **)a2, v7, (uint64_t)&v9);
      uint64_t v7 = (uint64_t)result + 12;
    }
  }
  return result;
}

void sub_E79DEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E79E0C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  sub_518C8(*a2 >> 17, a2[1] >> 17);
  unsigned int v7 = v6 | 0x40000000;
  while (1)
  {
    unsigned int v8 = v7;
    unint64_t v9 = sub_E7A294(a1, v7, 1);
    if (v9)
    {
      int v10 = &v9[-*(int *)v9];
      if (*(unsigned __int16 *)v10 >= 5u)
      {
        if (*((_WORD *)v10 + 2)) {
          break;
        }
      }
    }
LABEL_3:
    unsigned int v7 = v8 >> 2;
    if (v8 <= 3) {
      return 0;
    }
  }
  sub_E7A034(a1, v8, (uint64_t)&__p);
  long long v11 = (unint64_t *)__p;
  std::string::size_type v12 = v29;
  if (__p == v29)
  {
LABEL_14:
    sub_E7A164(a1, v8, (uint64_t)&v26);
    uint64_t v18 = v26;
    int v19 = v27;
    if (v26 == v27)
    {
      int v24 = 0;
      if (!v26) {
        goto LABEL_28;
      }
    }
    else
    {
      while (1)
      {
        unint64_t v20 = *v18;
        unint64_t v30 = *v18;
        if (**(unsigned char **)a3
          || (int v21 = sub_E7A650(*(void *)(a3 + 8), v20), v22 = &v21[-*(int *)v21], *(unsigned __int16 *)v22 < 9u)
          || (uint64_t v23 = *((unsigned __int16 *)v22 + 4)) == 0
          || !v21[v23])
        {
          if (sub_E7AAE0(a1, &v30, a2)) {
            break;
          }
        }
        if (++v18 == v19)
        {
          int v24 = 0;
          goto LABEL_26;
        }
      }
      int v24 = 1;
LABEL_26:
      uint64_t v18 = v26;
      if (!v26) {
        goto LABEL_28;
      }
    }
    int v27 = v18;
    operator delete(v18);
    goto LABEL_28;
  }
  long long v14 = *(unsigned char **)a3;
  uint64_t v13 = *(void *)(a3 + 8);
  while (!*v14)
  {
    std::string::size_type v15 = sub_E7A650(v13, *v11);
    unint64_t v16 = &v15[-*(int *)v15];
    if (*(unsigned __int16 *)v16 < 9u) {
      break;
    }
    uint64_t v17 = *((unsigned __int16 *)v16 + 4);
    if (!v17 || !v15[v17]) {
      break;
    }
    if (++v11 == v12) {
      goto LABEL_14;
    }
  }
  int v24 = 1;
LABEL_28:
  if (__p)
  {
    unint64_t v29 = (unint64_t *)__p;
    operator delete(__p);
  }
  if (!v24) {
    goto LABEL_3;
  }
  return 1;
}

void sub_E79FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_E7A034@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_E7A294(a1, a2, 1);
  if (result
    && (uint64_t v5 = &result[-*(int *)result], *(unsigned __int16 *)v5 >= 5u)
    && (uint64_t v6 = *((unsigned __int16 *)v5 + 2)) != 0)
  {
    unsigned int v7 = &result[v6 + *(unsigned int *)&result[v6]];
    unsigned int v8 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v8 >= 7u
      && (uint64_t v9 = *((unsigned __int16 *)v8 + 3)) != 0
      && (int v10 = &v7[v9 + *(unsigned int *)&v7[v9]], v11 = *(unsigned int *)v10, v11))
    {
      uint64_t v12 = v11;
      uint64_t v13 = operator new(8 * v11);
      *(void *)&long long v17 = v13;
      *((void *)&v17 + 1) = v13;
      uint64_t v18 = &v13[v12];
      long long v14 = (uint64_t *)(v10 + 4);
      do
      {
        uint64_t v19 = *v14;
        unint64_t result = sub_2A8034((unint64_t *)&v17, v13, &v19);
        uint64_t v13 = result + 8;
        ++v14;
        --v12;
      }
      while (v12 * 8);
      long long v15 = v17;
      unint64_t v16 = v18;
    }
    else
    {
      unint64_t v16 = 0;
      long long v15 = 0uLL;
    }
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 16) = v16;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_E7A148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_E7A164@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_E7A294(a1, a2, 1);
  if (result
    && (uint64_t v5 = &result[-*(int *)result], *(unsigned __int16 *)v5 >= 5u)
    && (uint64_t v6 = *((unsigned __int16 *)v5 + 2)) != 0)
  {
    unsigned int v7 = &result[v6 + *(unsigned int *)&result[v6]];
    unsigned int v8 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v8 >= 9u
      && (uint64_t v9 = *((unsigned __int16 *)v8 + 4)) != 0
      && (int v10 = &v7[v9 + *(unsigned int *)&v7[v9]], v11 = *(unsigned int *)v10, v11))
    {
      uint64_t v12 = v11;
      uint64_t v13 = operator new(8 * v11);
      *(void *)&long long v17 = v13;
      *((void *)&v17 + 1) = v13;
      uint64_t v18 = &v13[v12];
      long long v14 = (uint64_t *)(v10 + 4);
      do
      {
        uint64_t v19 = *v14;
        unint64_t result = sub_2A8034((unint64_t *)&v17, v13, &v19);
        uint64_t v13 = result + 8;
        ++v14;
        --v12;
      }
      while (v12 * 8);
      long long v15 = v17;
      unint64_t v16 = v18;
    }
    else
    {
      unint64_t v16 = 0;
      long long v15 = 0uLL;
    }
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 16) = v16;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_E7A278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_E7A294(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 2896) == a2)
    {
      unsigned int v7 = 120;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2920) == a2)
    {
      unsigned int v7 = 121;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2944) == a2)
    {
      unsigned int v7 = 122;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 2968) == a2)
    {
      unsigned int v7 = 123;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 2952);
    unint64_t v12 = *(void *)(a1 + 2928);
    unint64_t v13 = *(void *)(a1 + 2904);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 2904);
    }
    int v15 = 120;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 2928);
    }
    int v17 = 121;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 2952);
    }
    unint64_t v19 = *(void *)(a1 + 2976);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 122;
    }
    int v21 = (unsigned int *)sub_2AB884(v5, 30, a2, 1);
    unsigned int v22 = 123;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_E7A424(v24);
  return 0;
}

uint64_t sub_E7A424(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = sub_736EC(0x1Eu);
      int v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_E7A57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

char *sub_E7A650(uint64_t a1, unint64_t a2)
{
  unint64_t v26 = a2;
  uint64_t v3 = sub_E7A294(a1, a2, 1);
  if (!v3
    || (unint64_t v4 = &v3[-*(int *)v3], *(unsigned __int16 *)v4 < 5u)
    || (uint64_t v5 = *((unsigned __int16 *)v4 + 2)) == 0
    || (long long v6 = &v3[v5 + *(unsigned int *)&v3[v5]], v7 = &v6[-*(int *)v6], *(unsigned __int16 *)v7 < 5u)
    || !*((_WORD *)v7 + 2)
    || (long long v8 = &v6[*((unsigned __int16 *)v7 + 2) + *(unsigned int *)&v6[*((unsigned __int16 *)v7 + 2)]],
        *(_DWORD *)v8 <= HIDWORD(a2)))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_2A746C((unsigned int *)&v26, &v24);
    std::string::size_type v19 = std::string::insert(&v24, 0, "Referenced polygon ");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    int v21 = std::string::append(&v25, " does not exist.");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    uint64_t v28 = v21->__r_.__value_.__r.__words[2];
    long long v27 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    uint64_t v23 = (void *)sub_2F404((uint64_t)exception, &v27);
  }
  uint64_t v9 = &v8[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v8[4 * HIDWORD(a2) + 4]];
  int v10 = &v9[-*(int *)v9];
  if (*(unsigned __int16 *)v10 < 9u) {
    return 0;
  }
  uint64_t v11 = *((unsigned __int16 *)v10 + 4);
  if (!v11) {
    return 0;
  }
  unint64_t result = 0;
  unint64_t v13 = (unsigned int *)&v9[v11 + *(unsigned int *)&v9[v11]];
  unsigned int v16 = *v13;
  std::string v15 = v13 + 1;
  uint64_t v14 = v16;
  *((void *)&v27 + 1) = v16;
  uint64_t v28 = 0xF424000000040;
  int v29 = 257;
  *(void *)&long long v27 = v15;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v30 = 0;
  if (v16 < 0xC) {
    return result;
  }
  unint64_t v17 = *v15;
  if ((int)v17 < 1) {
    return 0;
  }
  if (v14 - 1 >= v17)
  {
    if (sub_E7A8D4((int *)((char *)v15 + v17), (uint64_t *)&v27)) {
      return (char *)v15 + *v15;
    }
    return 0;
  }
  return 0;
}

void sub_E7A854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_E7A8D4(int *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (char *)a1 - *a2;
  int v4 = *((unsigned __int8 *)a2 + 24);
  if ((v3 & 3) != 0 && v4 != 0) {
    return 0;
  }
  unint64_t v6 = a2[1];
  unint64_t v7 = v6 - 4;
  BOOL v8 = v6 >= 5 && v7 >= (unint64_t)v3;
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *a1;
  int v10 = *((_DWORD *)a2 + 10);
  unsigned int v11 = *((_DWORD *)a2 + 11) + 1;
  *((_DWORD *)a2 + 10) = v10 + 1;
  *((_DWORD *)a2 + 11) = v11;
  if ((v10 + 1) > *((_DWORD *)a2 + 4) || v11 > *((_DWORD *)a2 + 5)) {
    return 0;
  }
  unint64_t v14 = (unint64_t)&v3[-v9];
  if ((v3 - v9))
  {
    uint64_t v15 = 0;
    if (v4 || v6 - 2 < v14) {
      return v15;
    }
  }
  else if (v6 - 2 < v14)
  {
    return 0;
  }
  unint64_t v16 = *(unsigned __int16 *)(v2 + v14);
  if ((v16 & 1) != 0 && v4 | v16 & 1) {
    return 0;
  }
  BOOL v8 = v6 >= v16;
  unint64_t v17 = v6 - v16;
  if (v17 == 0 || !v8 || v17 < v14) {
    return 0;
  }
  std::string::size_type v19 = (unsigned __int16 *)((char *)a1 - *a1);
  unsigned int v20 = *v19;
  if (v20 < 5) {
    goto LABEL_73;
  }
  uint64_t v21 = v19[2];
  if (v19[2])
  {
    unint64_t v22 = (unint64_t)&v3[v21];
    if (((unint64_t)&v3[v21] & 7) != 0 && v4) {
      return 0;
    }
    uint64_t v15 = 0;
    if (v6 < 9 || v6 - 8 < v22) {
      return v15;
    }
  }
  if (v20 < 7) {
    goto LABEL_73;
  }
  uint64_t v23 = v19[3];
  if (v19[3])
  {
    uint64_t v15 = 0;
    std::string v24 = &v3[v23];
    BOOL v25 = ((unint64_t)&v3[v23] & 3) == 0 || v4 == 0;
    BOOL v26 = v25;
    if (v7 < (unint64_t)v24 || !v26) {
      return v15;
    }
  }
  if (v20 < 9) {
    goto LABEL_73;
  }
  if (v19[4] && v6 - 1 < (unint64_t)&v3[v19[4]]) {
    return 0;
  }
  if (v20 < 0xB || (uint64_t v27 = v19[5]) == 0)
  {
LABEL_73:
    *((_DWORD *)a2 + 10) = v10;
    return 1;
  }
  uint64_t v15 = 0;
  unint64_t v28 = (unint64_t)&v3[v27];
  BOOL v30 = (v28 & 3) == 0 || v4 == 0;
  if (v7 >= v28 && v30)
  {
    uint64_t v31 = *(unsigned int *)(v2 + v28);
    if ((int)v31 < 1 || v6 - 1 < v28 + v31) {
      return 0;
    }
    uint64_t v15 = 0;
    uint64_t v32 = (unsigned int *)((char *)a1 + v27 + *(unsigned int *)((char *)a1 + v27));
    unint64_t v33 = (char *)v32 - v2;
    BOOL v34 = (((unint64_t)v32 - v2) & 3) == 0 || v4 == 0;
    BOOL v35 = v34;
    if (v7 >= (unint64_t)v33 && v35)
    {
      uint64_t v36 = *v32;
      if (v36 > 0x7FFFFFFE) {
        return 0;
      }
      uint64_t v15 = 0;
      unint64_t v37 = v36 + 4;
      unint64_t v38 = (unint64_t)&v33[v36 + 4];
      if (v6 - 1 < v38 || v6 <= v37 || v6 - v37 < (unint64_t)v33) {
        return v15;
      }
      if (*(unsigned char *)(v2 + v38)) {
        return 0;
      }
      goto LABEL_73;
    }
  }
  return v15;
}

uint64_t sub_E7AAE0(uint64_t a1, unint64_t *a2, _DWORD *a3)
{
  sub_E7ACC4(a1, *a2, (uint64_t)v35);
  if (!sub_34554(v35, a3)) {
    return 0;
  }
  sub_E7AEE8(a1, *a2, &__p);
  uint64_t v9 = (void **)__p;
  int v10 = v34;
  if (__p == v34)
  {
    uint64_t v22 = 0;
    uint64_t v23 = __p;
    if (!__p) {
      return v22;
    }
  }
  else
  {
    unsigned int v11 = a3[1];
    LODWORD(v6) = *a3;
    double v12 = (double)v6;
    unint64_t v13 = (void **)__p;
    while (1)
    {
      unint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (*v13 != v15)
      {
        int v16 = 0;
        do
        {
          unint64_t v17 = (_DWORD *)v14[1];
          long long v18 = (_DWORD *)(*v14 + 12);
          if ((_DWORD *)*v14 != v17 && v18 != v17)
          {
            do
            {
              unsigned int v20 = *(v18 - 2);
              unsigned int v21 = v18[1];
              if (v20 >= v11)
              {
                if (v21 < v11)
                {
LABEL_20:
                  LODWORD(v7) = *v18;
                  LODWORD(v8) = *(v18 - 3);
                  double v8 = (double)*(unint64_t *)&v8;
                  double v7 = ((double)v11 - (double)v20)
                     / ((double)v21 - (double)v20)
                     * ((double)*(unint64_t *)&v7 - v8)
                     + v8;
                  if (v7 < v12) {
                    v16 ^= 1u;
                  }
                }
              }
              else if (v21 >= v11)
              {
                goto LABEL_20;
              }
              v18 += 3;
            }
            while (v18 != v17);
          }
          v14 += 3;
        }
        while (v14 != v15);
        if (v16) {
          break;
        }
      }
      v13 += 3;
      if (v13 == v34)
      {
        uint64_t v22 = 0;
        if (!__p) {
          return v22;
        }
        goto LABEL_28;
      }
    }
    uint64_t v22 = 1;
    if (!__p) {
      return v22;
    }
LABEL_28:
    std::string v24 = v34;
    do
    {
      uint64_t v27 = (char *)*(v24 - 3);
      v24 -= 3;
      BOOL v26 = v27;
      if (v27)
      {
        unint64_t v28 = (char *)*(v10 - 2);
        BOOL v25 = v26;
        if (v28 != v26)
        {
          int v29 = (char *)*(v10 - 2);
          do
          {
            uint64_t v31 = (void *)*((void *)v29 - 3);
            v29 -= 24;
            BOOL v30 = v31;
            if (v31)
            {
              *((void *)v28 - 2) = v30;
              operator delete(v30);
            }
            unint64_t v28 = v29;
          }
          while (v29 != v26);
          BOOL v25 = *v24;
        }
        *(v10 - 2) = v26;
        operator delete(v25);
      }
      int v10 = v24;
    }
    while (v24 != v9);
    uint64_t v23 = __p;
  }
  BOOL v34 = v9;
  operator delete(v23);
  return v22;
}

uint64_t sub_E7ACC4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v26 = a2;
  uint64_t v5 = sub_E7A294(a1, a2, 1);
  if (!v5
    || (unint64_t v6 = &v5[-*(int *)v5], *(unsigned __int16 *)v6 < 5u)
    || (uint64_t v7 = *((unsigned __int16 *)v6 + 2)) == 0
    || (v8 = &v5[v7 + *(unsigned int *)&v5[v7]], uint64_t v9 = &v8[-*(int *)v8], *(unsigned __int16 *)v9 < 5u)
    || !*((_WORD *)v9 + 2)
    || (int v10 = &v8[*((unsigned __int16 *)v9 + 2) + *(unsigned int *)&v8[*((unsigned __int16 *)v9 + 2)]],
        *(_DWORD *)v10 <= HIDWORD(a2)))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_2A746C((unsigned int *)&v26, &v22);
    unint64_t v17 = std::string::insert(&v22, 0, "Referenced polygon ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v19 = std::string::append(&v23, " does not exist.");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v19->__r_.__value_.__r.__words[2];
    long long v24 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    unsigned int v21 = (void *)sub_2F404((uint64_t)exception, &v24);
  }
  unsigned int v11 = &v10[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v10[4 * HIDWORD(a2) + 4]];
  uint64_t v12 = (uint64_t)&v11[*(unsigned __int16 *)&v11[-*(int *)v11 + 6]];
  LODWORD(v13) = *(_DWORD *)(v12 + 4);
  if (v13 >= 0xFFFFFFFE) {
    uint64_t v13 = 4294967294;
  }
  else {
    uint64_t v13 = v13;
  }
  *(void *)&long long v24 = *(unsigned int *)v12 | (unint64_t)(v13 << 32);
  DWORD2(v24) = 0x7FFFFFFF;
  uint64_t v14 = *(unsigned int *)(v12 + 8);
  LODWORD(v12) = *(_DWORD *)(v12 + 12);
  if (v12 >= 0xFFFFFFFE) {
    uint64_t v12 = 4294967294;
  }
  else {
    uint64_t v12 = v12;
  }
  v23.__r_.__value_.__r.__words[0] = v14 | (v12 << 32);
  LODWORD(v23.__r_.__value_.__r.__words[1]) = 0x7FFFFFFF;
  return sub_3392C(a3, (unsigned int *)&v24, (unsigned int *)&v23);
}

void sub_E7AE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_E7AEE8(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v24 = a2;
  uint64_t v5 = sub_E7A294(a1, a2, 1);
  if (!v5
    || (unint64_t v6 = &v5[-*(int *)v5], *(unsigned __int16 *)v6 < 5u)
    || (uint64_t v7 = *((unsigned __int16 *)v6 + 2)) == 0
    || (v8 = &v5[v7 + *(unsigned int *)&v5[v7]], uint64_t v9 = &v8[-*(int *)v8], *(unsigned __int16 *)v9 < 5u)
    || !*((_WORD *)v9 + 2)
    || (int v10 = &v8[*((unsigned __int16 *)v9 + 2) + *(unsigned int *)&v8[*((unsigned __int16 *)v9 + 2)]],
        *(_DWORD *)v10 <= HIDWORD(a2)))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_2A746C((unsigned int *)&v24, &v20);
    uint64_t v15 = std::string::insert(&v20, 0, "Referenced polygon ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    unint64_t v17 = std::string::append(&v21, " does not exist.");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v23 = v17->__r_.__value_.__r.__words[2];
    long long v22 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v19 = (void *)sub_2F404((uint64_t)exception, &v22);
  }
  unsigned int v11 = &v10[4 * HIDWORD(a2) + 4 + *(unsigned int *)&v10[4 * HIDWORD(a2) + 4]];
  uint64_t v12 = &v11[*(unsigned __int16 *)&v11[-*(int *)v11 + 4]];
  uint64_t v13 = (int *)&v12[*(unsigned int *)v12];

  sub_2A9A54(v13, a3);
}

void sub_E7B060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void sub_E7B0E0(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  int v4 = a1[2];
  unint64_t v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      unint64_t v13 = 24 * a2 - 24;
      if (v13 < 0x18) {
        goto LABEL_37;
      }
      unint64_t v14 = v13 / 0x18 + 1;
      unint64_t v6 = &v5[24 * (v14 & 0x1FFFFFFFFFFFFFFELL)];
      uint64_t v15 = v5 + 32;
      uint64_t v16 = v14 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v15 - 2) = xmmword_20B8E30;
        *(v15 - 1) = xmmword_20B8EB0;
        *uint64_t v15 = xmmword_20B8EA0;
        v15 += 3;
        v16 -= 2;
      }
      while (v16);
      if (v14 != (v14 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_37:
        do
        {
          *(_OWORD *)unint64_t v6 = xmmword_20B8E30;
          *((void *)v6 + 2) = 0x7FFFFFFFFFFFFFFFLL;
          v6 += 24;
        }
        while (v6 != &v5[24 * a2]);
      }
      unint64_t v6 = &v5[24 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = (char *)*a1;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v7) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      uint64_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    unint64_t v17 = &v12[24 * v8];
    long long v18 = &v17[24 * a2];
    unint64_t v19 = 24 * a2 - 24;
    std::string v20 = v17;
    if (v19 < 0x18) {
      goto LABEL_38;
    }
    unint64_t v21 = v19 / 0x18 + 1;
    std::string v20 = &v17[24 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    long long v22 = &v12[24 * v8 + 32];
    uint64_t v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *((_OWORD *)v22 - 2) = xmmword_20B8E30;
      *((_OWORD *)v22 - 1) = xmmword_20B8EB0;
      *(_OWORD *)long long v22 = xmmword_20B8EA0;
      v22 += 48;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_38:
      do
      {
        *(_OWORD *)std::string v20 = xmmword_20B8E30;
        *((void *)v20 + 2) = 0x7FFFFFFFFFFFFFFFLL;
        v20 += 24;
      }
      while (v20 != v18);
    }
    unint64_t v24 = &v12[24 * v11];
    if (v5 == v7)
    {
      uint64_t v27 = *a1;
      *a1 = v17;
      a1[1] = v18;
      a1[2] = v24;
      if (!v27) {
        return;
      }
      goto LABEL_28;
    }
    do
    {
      std::string::size_type v25 = v17 - 24;
      long long v26 = *(_OWORD *)(v6 - 24);
      *((void *)v17 - 1) = *((void *)v6 - 1);
      *(_OWORD *)(v17 - 24) = v26;
      v6 -= 24;
      v17 -= 24;
    }
    while (v6 != v7);
    uint64_t v27 = *a1;
    *a1 = v25;
    a1[1] = v18;
    a1[2] = v24;
    if (v27)
    {
LABEL_28:
      operator delete(v27);
    }
  }
}

uint64_t *sub_E7B39C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = (v8 + (((v7 + 0x388152A534) ^ 0xDEADBEEFLL) << 6) + (((v7 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2) + 2654435769u) ^ (v7 + 0x388152A534) ^ 0xDEADBEEFLL;
  uint64_t v10 = (int)a2[2];
  unint64_t v11 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      uint64_t v4 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
      if (v11 >= v12) {
        uint64_t v4 = v11 % v12;
      }
    }
    else
    {
      uint64_t v4 = v11 & (v12 - 1);
    }
    unint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v15[1];
            if (v17 == v11)
            {
              if (*((_DWORD *)v15 + 4) == v7 && *(uint64_t *)((char *)v15 + 20) == __PAIR64__(v10, v8)) {
                return v15;
              }
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_25;
            }
            uint64_t v15 = (uint64_t *)*v15;
            if (!v15) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 4) == v7 && *(uint64_t *)((char *)v15 + 20) == __PAIR64__(v10, v8)) {
              return v15;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_25:
  unint64_t v19 = operator new(0x28uLL);
  *unint64_t v19 = 0;
  v19[1] = v11;
  uint64_t v20 = **a4;
  *((_DWORD *)v19 + 6) = *((_DWORD *)*a4 + 2);
  v19[2] = v20;
  v19[4] = 0;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (v12 && (float)(v22 * (float)v12) >= v21)
  {
    uint64_t v23 = *(void *)a1;
    unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
    if (v24)
    {
LABEL_28:
      *unint64_t v19 = *v24;
LABEL_63:
      *unint64_t v24 = v19;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v25 = 1;
    if (v12 >= 3) {
      BOOL v25 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v12);
    unint64_t v27 = vcvtps_u32_f32(v21 / v22);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 8);
    }
    if (prime > v12) {
      goto LABEL_39;
    }
    if (prime < v12)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < v12) {
LABEL_39:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v32 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        uint64_t v4 = v11 % v12;
        uint64_t v23 = *(void *)a1;
        unint64_t v24 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v24) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v4 = v11;
        uint64_t v23 = *(void *)a1;
        unint64_t v24 = *(void **)(*(void *)a1 + 8 * v11);
        if (v24) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      uint64_t v4 = v32 & v11;
      uint64_t v23 = *(void *)a1;
      unint64_t v24 = *(void **)(*(void *)a1 + 8 * (v32 & v11));
      if (v24) {
        goto LABEL_28;
      }
    }
  }
  *unint64_t v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*v19)
  {
    unint64_t v33 = *(void *)(*v19 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v33 >= v12) {
        v33 %= v12;
      }
    }
    else
    {
      v33 &= v12 - 1;
    }
    unint64_t v24 = (void *)(*(void *)a1 + 8 * v33);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_E7B734(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_E7B748(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (v11[2] == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            unint64_t v11 = (void *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  unint64_t v14 = (void *)(a1 + 16);
  unint64_t v11 = operator new(0x30uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  uint64_t v15 = **a4;
  v11[4] = 0;
  v11[5] = 0;
  v11[2] = v15;
  v11[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    uint64_t v18 = *(void *)a1;
    unint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
    if (v19)
    {
LABEL_26:
      *unint64_t v11 = *v19;
LABEL_61:
      *unint64_t v19 = v11;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v20 = 1;
    if (v8 >= 3) {
      BOOL v20 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v8);
    unint64_t v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_37;
    }
    if (prime < v8)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < v8) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    unint64_t v27 = v8 - 1;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
      {
        unint64_t v4 = v7 % v8;
        uint64_t v18 = *(void *)a1;
        unint64_t v19 = *(void **)(*(void *)a1 + 8 * (v7 % v8));
        if (v19) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v4 = v7;
        uint64_t v18 = *(void *)a1;
        unint64_t v19 = *(void **)(*(void *)a1 + 8 * v7);
        if (v19) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v4 = v27 & v7;
      uint64_t v18 = *(void *)a1;
      unint64_t v19 = *(void **)(*(void *)a1 + 8 * (v27 & v7));
      if (v19) {
        goto LABEL_26;
      }
    }
  }
  *unint64_t v11 = *v14;
  *unint64_t v14 = v11;
  *(void *)(v18 + 8 * v4) = v14;
  if (*v11)
  {
    unint64_t v28 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8) {
        v28 %= v8;
      }
    }
    else
    {
      v28 &= v8 - 1;
    }
    unint64_t v19 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_E7BA68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3AEA0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_E7BA7C(void *a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  int8x8_t v3 = (int8x8_t)a1[1];
  if (!*(void *)&v3) {
    return 0;
  }
  unint64_t v4 = 0x2127599BF4325C37
     * (((v2 >> 16) & 0xFFFF0000 | (v2 << 32) | ((*a2 & 0xFF000000000000) == 0)) ^ (((v2 >> 16) & 0xFFFF0000 | (v2 << 32)) >> 23));
  unint64_t v5 = v4 ^ (v4 >> 47);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v3) {
      unint64_t v7 = v5 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v3 - 1);
  }
  unint64_t v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  unint64_t result = *v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v3 - 1;
      while (1)
      {
        uint64_t v11 = result[1];
        if (v5 == v11)
        {
          if (__PAIR64__(*((unsigned __int16 *)result + 10), *((_DWORD *)result + 4)) == __PAIR64__(WORD2(v2), v2)
            && (HIWORD(v2) & 1) != (*((unsigned char *)result + 22) == 0))
          {
            return result;
          }
        }
        else if ((v11 & v10) != v7)
        {
          return 0;
        }
        unint64_t result = (uint64_t *)*result;
        if (!result) {
          return result;
        }
      }
    }
    do
    {
      unint64_t v12 = result[1];
      if (v5 == v12)
      {
        if (__PAIR64__(*((unsigned __int16 *)result + 10), *((_DWORD *)result + 4)) == __PAIR64__(WORD2(v2), v2)
          && (HIWORD(v2) & 1) != (*((unsigned char *)result + 22) == 0))
        {
          return result;
        }
      }
      else
      {
        if (v12 >= *(void *)&v3) {
          v12 %= *(void *)&v3;
        }
        if (v12 != v7) {
          return 0;
        }
      }
      unint64_t result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_E7BBE0(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v9 = (v8 + (((v7 + 0x388152A534) ^ 0xDEADBEEFLL) << 6) + (((v7 + 0x388152A534) ^ 0xDEADBEEFuLL) >> 2) + 2654435769u) ^ (v7 + 0x388152A534) ^ 0xDEADBEEFLL;
  uint64_t v10 = (int)a2[2];
  unint64_t v11 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      uint64_t v4 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
      if (v11 >= v12) {
        uint64_t v4 = v11 % v12;
      }
    }
    else
    {
      uint64_t v4 = v11 & (v12 - 1);
    }
    unint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v17 = v15[1];
            if (v17 == v11)
            {
              if (*((_DWORD *)v15 + 4) == v7 && *(void *)((char *)v15 + 20) == __PAIR64__(v10, v8)) {
                return v15;
              }
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_25;
            }
            uint64_t v15 = (void *)*v15;
            if (!v15) {
              goto LABEL_25;
            }
          }
        }
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 4) == v7 && *(void *)((char *)v15 + 20) == __PAIR64__(v10, v8)) {
              return v15;
            }
          }
          else
          {
            if (v16 >= v12) {
              v16 %= v12;
            }
            if (v16 != v4) {
              break;
            }
          }
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_25:
  uint64_t v18 = (void *)(a1 + 16);
  uint64_t v15 = operator new(0x38uLL);
  *uint64_t v15 = 0;
  v15[1] = v11;
  uint64_t v19 = **a4;
  *((_DWORD *)v15 + 6) = *((_DWORD *)*a4 + 2);
  v15[2] = v19;
  v15[5] = 0;
  v15[6] = 0;
  v15[4] = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v12 && (float)(v21 * (float)v12) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
    if (v23)
    {
LABEL_28:
      *uint64_t v15 = *v23;
LABEL_63:
      *uint64_t v23 = v15;
      goto LABEL_64;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v12 >= 3) {
      BOOL v24 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v12);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v12 = *(void *)(a1 + 8);
    }
    if (prime > v12) {
      goto LABEL_39;
    }
    if (prime < v12)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v12 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v12) {
LABEL_39:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    unint64_t v31 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        uint64_t v4 = v11 % v12;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v11 % v12));
        if (v23) {
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v4 = v11;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v11);
        if (v23) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      uint64_t v4 = v31 & v11;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v11));
      if (v23) {
        goto LABEL_28;
      }
    }
  }
  *uint64_t v15 = *v18;
  *uint64_t v18 = v15;
  *(void *)(v22 + 8 * v4) = v18;
  if (*v15)
  {
    unint64_t v32 = *(void *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v32 >= v12) {
        v32 %= v12;
      }
    }
    else
    {
      v32 &= v12 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_E7BF84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_59B5F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E7BF98(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a4 + 8) = *(void *)a4;
  sub_518C8(*a2 >> 17, a2[1] >> 17);
  unsigned int v7 = v6 | 0x40000000;
  while (2)
  {
    unsigned int v8 = v7;
    unint64_t v9 = sub_2A75D8(a1, v7, 1);
    if (!v9) {
      goto LABEL_2;
    }
    uint64_t v10 = &v9[-*(int *)v9];
    if (*(unsigned __int16 *)v10 < 5u || !*((_WORD *)v10 + 2)) {
      goto LABEL_2;
    }
    unsigned int v55 = v8;
    sub_E7C47C(a1, v8, (uint64_t)&__p);
    unint64_t v11 = __p;
    unint64_t v12 = v60;
    if (__p != v60)
    {
      uint8x8_t v13 = *(void **)(a4 + 8);
      while (1)
      {
        unint64_t v15 = *(void *)(a4 + 16);
        if ((unint64_t)v13 < v15)
        {
          *uint8x8_t v13 = *v11;
          uint64_t v14 = (uint64_t)(v13 + 1);
          goto LABEL_9;
        }
        unint64_t v16 = *(char **)a4;
        uint64_t v17 = (uint64_t)v13 - *(void *)a4;
        uint64_t v18 = v17 >> 3;
        unint64_t v19 = (v17 >> 3) + 1;
        if (v19 >> 61) {
          sub_2E00();
        }
        uint64_t v20 = v15 - (void)v16;
        if (v20 >> 2 > v19) {
          unint64_t v19 = v20 >> 2;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          if (v21 >> 61) {
            sub_188D718();
          }
          uint64_t v22 = operator new(8 * v21);
          uint64_t v23 = &v22[8 * v18];
          *uint64_t v23 = *v11;
          uint64_t v14 = (uint64_t)(v23 + 1);
          if (v13 == (void *)v16)
          {
LABEL_20:
            *(void *)a4 = v23;
            *(void *)(a4 + 8) = v14;
            *(void *)(a4 + 16) = &v22[8 * v21];
            if (!v13) {
              goto LABEL_9;
            }
LABEL_27:
            operator delete(v13);
            goto LABEL_9;
          }
        }
        else
        {
          uint64_t v22 = 0;
          uint64_t v23 = (void *)(8 * v18);
          *(void *)(8 * v18) = *v11;
          uint64_t v14 = 8 * v18 + 8;
          if (v13 == (void *)v16) {
            goto LABEL_20;
          }
        }
        unint64_t v24 = (char *)(v13 - 1) - v16;
        if (v24 < 0x168)
        {
          unint64_t v25 = (char *)v13;
          goto LABEL_25;
        }
        if (&v22[v17 - 8 - (v24 & 0xFFFFFFFFFFFFFFF8)] > &v22[v17 - 8]) {
          break;
        }
        if ((void *)((char *)v13 - (v24 & 0xFFFFFFFFFFFFFFF8) - 8) > v13 - 1)
        {
          unint64_t v25 = (char *)v13;
          goto LABEL_25;
        }
        if ((unint64_t)((char *)v13 - v22 - v17) < 0x20)
        {
          unint64_t v25 = (char *)v13;
          goto LABEL_25;
        }
        uint64_t v27 = (v24 >> 3) + 1;
        uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v25 = (char *)&v13[v28 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v23 = (void *)((char *)v23 - v28);
        uint8x8_t v29 = &v22[8 * v18 - 16];
        uint64_t v30 = (long long *)(v13 - 2);
        uint64_t v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v32 = *v30;
          *(v29 - 1) = *(v30 - 1);
          *uint8x8_t v29 = v32;
          v29 -= 2;
          v30 -= 2;
          v31 -= 4;
        }
        while (v31);
        if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_25;
        }
LABEL_26:
        uint8x8_t v13 = *(void **)a4;
        *(void *)a4 = v23;
        *(void *)(a4 + 8) = v14;
        *(void *)(a4 + 16) = &v22[8 * v21];
        if (v13) {
          goto LABEL_27;
        }
LABEL_9:
        *(void *)(a4 + 8) = v14;
        ++v11;
        uint8x8_t v13 = (void *)v14;
        if (v11 == v12) {
          goto LABEL_38;
        }
      }
      unint64_t v25 = (char *)v13;
      do
      {
LABEL_25:
        uint64_t v26 = *((void *)v25 - 1);
        v25 -= 8;
        *--uint64_t v23 = v26;
      }
      while (v25 != v16);
      goto LABEL_26;
    }
LABEL_38:
    unsigned int v8 = v55;
    sub_E7C5AC(a1, v55, (uint64_t)&v57);
    unint64_t v33 = v57;
    BOOL v34 = v58;
    if (v57 == v58)
    {
      if (v57) {
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    do
    {
      unint64_t v61 = *v33;
      if (sub_71A67C(a1, &v61, a2))
      {
        unint64_t v37 = *(unint64_t **)(a4 + 8);
        unint64_t v36 = *(void *)(a4 + 16);
        if ((unint64_t)v37 < v36)
        {
          *unint64_t v37 = *v33;
          uint64_t v35 = (uint64_t)(v37 + 1);
LABEL_44:
          *(void *)(a4 + 8) = v35;
          goto LABEL_45;
        }
        unint64_t v38 = *(unint64_t **)a4;
        uint64_t v39 = (uint64_t)v37 - *(void *)a4;
        uint64_t v40 = v39 >> 3;
        unint64_t v41 = (v39 >> 3) + 1;
        if (v41 >> 61) {
          sub_2E00();
        }
        uint64_t v42 = v36 - (void)v38;
        if (v42 >> 2 > v41) {
          unint64_t v41 = v42 >> 2;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          if (v43 >> 61) {
            sub_188D718();
          }
          uint64_t v44 = operator new(8 * v43);
          BOOL v45 = (unint64_t *)&v44[8 * v40];
          *BOOL v45 = *v33;
          uint64_t v35 = (uint64_t)(v45 + 1);
          if (v37 == v38)
          {
LABEL_57:
            *(void *)a4 = v45;
            *(void *)(a4 + 8) = v35;
            *(void *)(a4 + 16) = &v44[8 * v43];
            if (!v37) {
              goto LABEL_44;
            }
            goto LABEL_67;
          }
        }
        else
        {
          uint64_t v44 = 0;
          BOOL v45 = (unint64_t *)(8 * v40);
          *(void *)(8 * v40) = *v33;
          uint64_t v35 = 8 * v40 + 8;
          if (v37 == v38) {
            goto LABEL_57;
          }
        }
        unint64_t v46 = (char *)(v37 - 1) - (char *)v38;
        if (v46 < 0x58) {
          goto LABEL_77;
        }
        if ((unint64_t)((char *)v37 - &v44[v39]) < 0x20) {
          goto LABEL_77;
        }
        uint64_t v47 = (v46 >> 3) + 1;
        uint64_t v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v49 = &v37[v48 / 0xFFFFFFFFFFFFFFF8];
        BOOL v45 = (unint64_t *)((char *)v45 - v48);
        int v50 = &v44[8 * v40 - 16];
        double v51 = v37 - 2;
        uint64_t v52 = v47 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v53 = *(_OWORD *)v51;
          *(v50 - 1) = *((_OWORD *)v51 - 1);
          *int v50 = v53;
          v50 -= 2;
          v51 -= 4;
          v52 -= 4;
        }
        while (v52);
        unint64_t v37 = v49;
        if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_77:
          do
          {
            unint64_t v54 = *--v37;
            *--BOOL v45 = v54;
          }
          while (v37 != v38);
        }
        unint64_t v37 = *(unint64_t **)a4;
        *(void *)a4 = v45;
        *(void *)(a4 + 8) = v35;
        *(void *)(a4 + 16) = &v44[8 * v43];
        if (!v37) {
          goto LABEL_44;
        }
LABEL_67:
        operator delete(v37);
        goto LABEL_44;
      }
LABEL_45:
      ++v33;
    }
    while (v33 != v34);
    unint64_t v33 = v57;
    unsigned int v8 = v55;
    if (!v57) {
      goto LABEL_41;
    }
LABEL_40:
    unint64_t v58 = v33;
    operator delete(v33);
LABEL_41:
    if (__p)
    {
      int v60 = __p;
      operator delete(__p);
    }
LABEL_2:
    unsigned int v7 = v8 >> 2;
    if (v8 >= 4) {
      continue;
    }
    break;
  }
  sub_71A55C((int8x16_t **)a4);
}

void sub_E7C40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_E7C47C@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_2A75D8(a1, a2, 1);
  if (result
    && (unint64_t v5 = &result[-*(int *)result], *(unsigned __int16 *)v5 >= 5u)
    && (uint64_t v6 = *((unsigned __int16 *)v5 + 2)) != 0)
  {
    unsigned int v7 = &result[v6 + *(unsigned int *)&result[v6]];
    unsigned int v8 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v8 >= 7u
      && (uint64_t v9 = *((unsigned __int16 *)v8 + 3)) != 0
      && (uint64_t v10 = &v7[v9 + *(unsigned int *)&v7[v9]], v11 = *(unsigned int *)v10, v11))
    {
      uint64_t v12 = v11;
      uint8x8_t v13 = operator new(8 * v11);
      *(void *)&long long v17 = v13;
      *((void *)&v17 + 1) = v13;
      uint64_t v18 = &v13[v12];
      uint64_t v14 = (uint64_t *)(v10 + 4);
      do
      {
        uint64_t v19 = *v14;
        unint64_t result = sub_2A8034((unint64_t *)&v17, v13, &v19);
        uint8x8_t v13 = result + 8;
        ++v14;
        --v12;
      }
      while (v12 * 8);
      long long v15 = v17;
      unint64_t v16 = v18;
    }
    else
    {
      unint64_t v16 = 0;
      long long v15 = 0uLL;
    }
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 16) = v16;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_E7C590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_E7C5AC@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result = sub_2A75D8(a1, a2, 1);
  if (result
    && (unint64_t v5 = &result[-*(int *)result], *(unsigned __int16 *)v5 >= 5u)
    && (uint64_t v6 = *((unsigned __int16 *)v5 + 2)) != 0)
  {
    unsigned int v7 = &result[v6 + *(unsigned int *)&result[v6]];
    unsigned int v8 = &v7[-*(int *)v7];
    if (*(unsigned __int16 *)v8 >= 9u
      && (uint64_t v9 = *((unsigned __int16 *)v8 + 4)) != 0
      && (uint64_t v10 = &v7[v9 + *(unsigned int *)&v7[v9]], v11 = *(unsigned int *)v10, v11))
    {
      uint64_t v12 = v11;
      uint8x8_t v13 = operator new(8 * v11);
      *(void *)&long long v17 = v13;
      *((void *)&v17 + 1) = v13;
      uint64_t v18 = &v13[v12];
      uint64_t v14 = (uint64_t *)(v10 + 4);
      do
      {
        uint64_t v19 = *v14;
        unint64_t result = sub_2A8034((unint64_t *)&v17, v13, &v19);
        uint8x8_t v13 = result + 8;
        ++v14;
        --v12;
      }
      while (v12 * 8);
      long long v15 = v17;
      unint64_t v16 = v18;
    }
    else
    {
      unint64_t v16 = 0;
      long long v15 = 0uLL;
    }
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 16) = v16;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  return result;
}

void sub_E7C6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E7C6DC(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2 = a1[1];
  unsigned int v3 = a2[1];
  if (*a2 != *a1 || v2 != v3)
  {
    long double v5 = exp(3.14159265 - (double)v2 * 6.28318531 / 4294967300.0);
    long double v6 = atan((v5 - 1.0 / v5) * 0.5) * 57.2957795 * 3.14159265 / 180.0;
    long double v7 = exp(3.14159265 - (double)v3 * 6.28318531 / 4294967300.0);
    long double v8 = atan((v7 - 1.0 / v7) * 0.5) * 57.2957795 * 3.14159265 / 180.0;
    double v9 = tan(v8 * 0.5 + 0.785398163);
    long double v10 = tan(v6 * 0.5 + 0.785398163);
    if (log(v9 / v10) == 0.0) {
      cos(v6);
    }
  }
}

double sub_E7C844@<D0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v88 = *a1;
  uint64_t v4 = a1[1] - *a1;
  if (v4)
  {
    unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    uint64_t v5 = a2[1];
    double v6 = (double)v5;
    uint64_t v102 = *a2;
    double v7 = (double)v102;
    int v86 = a2[2];
    double v12 = exp((double)v5 * -6.28318531 / 4294967300.0 + 3.14159265);
    uint64_t v8 = 0;
    double __x = (v12 + -1.0 / v12) * 0.5;
    HIDWORD(v9) = 1066524486;
    double v103 = ((double)v102 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
    uint64_t v10 = -1;
    int v93 = -1;
    double v92 = 1.79769313e308;
    double v11 = 1.0;
    HIDWORD(v12) = 1096306543;
    int v90 = 0x7FFFFFFF;
    int v91 = -1;
    while (1)
    {
      uint64_t v20 = (void *)(v88 + 24 * v8);
      uint64_t v22 = (void *)*v20;
      unint64_t v21 = (void *)v20[1];
      uint64_t v89 = v10;
      if (v22 == v21)
      {
        int v13 = 0x7FFFFFFF;
        int v14 = -1;
        double v15 = 1.79769313e308;
        int v16 = -1;
      }
      else
      {
        int v23 = 0;
        unint64_t v24 = v22;
        do
        {
          unint64_t v25 = (_DWORD *)v24[1];
          uint64_t v26 = (_DWORD *)(*v24 + 12);
          BOOL v27 = (_DWORD *)*v24 == v25 || v26 == v25;
          if (!v27)
          {
            do
            {
              unsigned int v28 = *(v26 - 2);
              unsigned int v29 = v26[1];
              if (v28 >= v5)
              {
                if (v29 < v5)
                {
LABEL_28:
                  LODWORD(v12) = *v26;
                  LODWORD(v9) = *(v26 - 3);
                  double v9 = (double)*(unint64_t *)&v9;
                  double v12 = (v6 - (double)v28) / ((double)v29 - (double)v28) * ((double)*(unint64_t *)&v12 - v9) + v9;
                  if (v12 < v7) {
                    v23 ^= 1u;
                  }
                }
              }
              else if (v29 >= v5)
              {
                goto LABEL_28;
              }
              v26 += 3;
            }
            while (v26 != v25);
          }
          v24 += 3;
        }
        while (v24 != v21);
        double v15 = 0.0;
        int v14 = v102;
        int v16 = v5;
        int v13 = v86;
        if (!v23)
        {
          uint64_t v30 = 0;
          unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * (v21 - v22);
          unint64_t v95 = v22;
          int v16 = -1;
          int v13 = 0x7FFFFFFF;
          double v15 = 1.79769313e308;
          int v14 = -1;
          uint64_t v96 = v8;
          do
          {
            BOOL v45 = (unsigned int **)&v22[3 * v30];
            unint64_t v46 = *v45;
            uint64_t v47 = (char *)v45[1] - (char *)*v45;
            int v101 = v13;
            double v100 = v15;
            int v98 = v14;
            int v99 = v16;
            uint64_t v97 = v30;
            if (v47 == 12)
            {
              unsigned int v105 = v46[1];
              long double v31 = exp((double)v105 * -6.28318531 / 4294967300.0 + 3.14159265);
              long double v32 = atan((v31 - 1.0 / v31) * 0.5) * 57.2957795 * 0.0174532925;
              unsigned int v33 = *v46;
              double v34 = ((double)*v46 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925;
              long double v35 = atan(__x) * 57.2957795 * 0.0174532925;
              long double v36 = sin((v32 - v35) * 0.5);
              long double v37 = v36 * v36;
              double v38 = cos(v32);
              long double v39 = v38 * cos(v35);
              long double v40 = sin((v34 - v103) * 0.5);
              double v41 = v37 + v39 * (v40 * v40);
              double v11 = 1.0;
              long double v42 = atan2(sqrt(v41), sqrt(1.0 - v41));
              double v43 = (v42 + v42) * 6372797.56;
              int v44 = v46[2];
            }
            else
            {
              uint64_t v48 = -1 - 0x5555555555555555 * (v47 >> 2);
              if (v48)
              {
                LODWORD(v49) = *v46;
                LODWORD(v50) = v46[1];
                double v51 = v46 + 3;
                unsigned int v105 = -1;
                int v44 = 0x7FFFFFFF;
                double v43 = 1.79769313e308;
                unsigned int v33 = -1;
                while (1)
                {
                  double v52 = (double)v49;
                  double v53 = (double)v50;
                  LODWORD(v49) = *v51;
                  LODWORD(v50) = v51[1];
                  double v54 = (double)*v51 - v52;
                  double v55 = (double)v50 - v53;
                  double v56 = v54 * v54 + v55 * v55;
                  double v57 = fabs(v56);
                  if (v56 == 0.0 || v57 < 2.22044605e-16) {
                    break;
                  }
                  double v59 = ((v7 - v52) * v54 + (v6 - v53) * v55) / v56;
                  if (v59 <= 0.0)
                  {
                    unint64_t v64 = *(void *)(v51 - 3);
                    unint64_t v65 = HIDWORD(v64);
                    unsigned int v63 = *(v51 - 1);
                    if (a3) {
                      goto LABEL_55;
                    }
                  }
                  else
                  {
                    if (v59 >= v11) {
                      break;
                    }
                    int v60 = *(v51 - 1);
                    if (v60 == 0x7FFFFFFF)
                    {
                      BOOL v61 = 0;
                      double v62 = 0.0;
                    }
                    else
                    {
                      double v67 = (double)v60;
                      int v68 = v51[2];
                      BOOL v27 = v68 == 0x7FFFFFFF;
                      double v62 = v59 * ((double)v68 - v67) + v67;
                      BOOL v61 = v68 != 0x7FFFFFFF;
                      if (v27) {
                        double v62 = 0.0;
                      }
                    }
                    double v69 = v55 * v59 + v53;
                    double v70 = v54 * v59 + v52;
                    if (v70 < 0.0) {
                      double v71 = -0.5;
                    }
                    else {
                      double v71 = 0.5;
                    }
                    LODWORD(v64) = (v70 + v71);
                    if (v69 < 0.0) {
                      double v72 = -0.5;
                    }
                    else {
                      double v72 = 0.5;
                    }
                    unsigned int v73 = (v69 + v72);
                    if (v62 < 0.0) {
                      double v74 = -0.5;
                    }
                    else {
                      double v74 = 0.5;
                    }
                    if (v61) {
                      unsigned int v63 = (v62 + v74);
                    }
                    else {
                      unsigned int v63 = 0x7FFFFFFF;
                    }
                    if (v73 >= 0xFFFFFFFE) {
                      LODWORD(v65) = -2;
                    }
                    else {
                      LODWORD(v65) = v73;
                    }
                    if (a3)
                    {
LABEL_55:
                      double v66 = sqrt((double)((v102 - v64) * (v102 - v64)
                                        + (v5 - v65) * (v5 - (unint64_t)v65)))
                          / 100.0;
                      if (v66 < v43) {
                        goto LABEL_76;
                      }
                      goto LABEL_43;
                    }
                  }
LABEL_75:
                  long double v75 = atan(__x) * 57.2957795 * 0.0174532925;
                  long double v76 = exp((double)v65 * -6.28318531 / 4294967300.0 + 3.14159265);
                  long double v77 = atan((v76 - 1.0 / v76) * 0.5) * 57.2957795 * 0.0174532925;
                  long double v78 = sin((v75 - v77) * 0.5);
                  long double v79 = v78 * v78;
                  double v80 = cos(v75);
                  long double v81 = v80 * cos(v77);
                  long double v82 = sin((v103 - ((double)v64 * 360.0 / 4294967300.0 + -180.0) * 0.0174532925) * 0.5);
                  double v11 = 1.0;
                  long double v83 = atan2(sqrt(v82 * v82 * v81 + v79), sqrt(1.0 - (v82 * v82 * v81 + v79)));
                  double v66 = (v83 + v83) * 6372797.56;
                  if (v66 < v43)
                  {
LABEL_76:
                    unsigned int v33 = v64;
                    unsigned int v105 = v65;
                    int v44 = v63;
                    double v43 = v66;
                  }
LABEL_43:
                  v51 += 3;
                  if (!--v48) {
                    goto LABEL_33;
                  }
                }
                uint64_t v49 = *(void *)v51;
                uint64_t v50 = HIDWORD(*(void *)v51);
                unsigned int v63 = v51[2];
                unint64_t v64 = *(void *)v51;
                LODWORD(v65) = v50;
                if (a3) {
                  goto LABEL_55;
                }
                goto LABEL_75;
              }
              int v44 = 0x7FFFFFFF;
              unsigned int v33 = -1;
              double v43 = 1.79769313e308;
              unsigned int v105 = -1;
            }
LABEL_33:
            double v15 = v100;
            if (v43 < v100) {
              double v15 = v43;
            }
            int v14 = v98;
            int v16 = v99;
            if (v43 < v100)
            {
              int v14 = v33;
              int v16 = v105;
            }
            int v13 = v101;
            if (v43 < v100) {
              int v13 = v44;
            }
            uint64_t v8 = v96;
            uint64_t v30 = v97 + 1;
            uint64_t v22 = v95;
          }
          while (v97 + 1 != v94);
        }
      }
      double v9 = v15;
      double v12 = v92;
      uint64_t v10 = v89;
      if (v9 >= v92)
      {
        int v17 = v91;
      }
      else
      {
        uint64_t v10 = v8;
        int v17 = v14;
      }
      int v18 = v93;
      if (v9 < v92) {
        int v18 = v16;
      }
      int v93 = v18;
      int v19 = v90;
      if (v9 < v92) {
        int v19 = v13;
      }
      int v90 = v19;
      int v91 = v17;
      if (v9 < v92) {
        double v12 = v9;
      }
      double v92 = v12;
      if (++v8 == v87) {
        goto LABEL_79;
      }
    }
  }
  uint64_t v10 = -1;
  double v92 = 1.79769313e308;
  int v93 = -1;
  int v90 = 0x7FFFFFFF;
  int v91 = -1;
LABEL_79:
  double result = v92;
  *(double *)a4 = v92;
  *(_DWORD *)(a4 + 8) = v91;
  *(_DWORD *)(a4 + 12) = v93;
  *(_DWORD *)(a4 + 16) = v90;
  *(void *)(a4 + 24) = v10;
  return result;
}

double sub_E7CFB8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v10 = a3;
  int v9 = 0;
  double v8 = 0.0;
  int v3 = *((unsigned __int8 *)a1 + 24);
  if (*((unsigned char *)a1 + 24))
  {
    *(void *)&v43[4] = *(uint64_t *)((char *)a1 + 12);
    LODWORD(v44) = *((_DWORD *)a1 + 5);
  }
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (*((unsigned char *)a2 + 24))
  {
    *(void *)&v30[4] = *(uint64_t *)((char *)a2 + 12);
    LODWORD(v31) = *((_DWORD *)a2 + 5);
  }
  if (v3)
  {
    *(void *)((char *)&v29 + 4) = *(uint64_t *)((char *)a1 + 12);
    HIDWORD(v29) = *((_DWORD *)a1 + 5);
    uint64_t v27 = *(uint64_t *)((char *)a1 + 12);
    int v28 = *((_DWORD *)a1 + 5);
  }
  if (v4)
  {
    uint64_t v25 = *(uint64_t *)((char *)a2 + 12);
    int v26 = *((_DWORD *)a2 + 5);
    uint64_t v23 = v25;
    int v24 = v26;
  }
  if (v3)
  {
    uint64_t v21 = *(void *)&v43[4];
    int v22 = v44;
  }
  if (v4)
  {
    uint64_t v19 = *(void *)&v30[4];
    int v20 = v31;
  }
  if (v3)
  {
    uint64_t v17 = *(void *)((char *)&v29 + 4);
    int v18 = HIDWORD(v29);
    uint64_t v15 = v27;
    int v16 = v28;
  }
  uint64_t v5 = *a1;
  if (v4)
  {
    uint64_t v13 = v25;
    int v14 = v26;
    uint64_t v11 = v23;
    int v12 = v24;
  }
  uint64_t v6 = *a2;
  *(void *)&long long v29 = &v8;
  *((void *)&v29 + 1) = &v9;
  *(void *)double v43 = v5;
  char v46 = v3;
  if (v3)
  {
    uint64_t v44 = v21;
    int v45 = v22;
  }
  uint64_t v47 = v6;
  char v50 = v4;
  if (v4)
  {
    uint64_t v48 = v19;
    int v49 = v20;
  }
  double v51 = &v10;
  uint64_t v52 = v5;
  char v55 = v3;
  if (v3)
  {
    uint64_t v53 = v17;
    int v54 = v18;
    uint64_t v31 = v15;
    int v32 = v16;
  }
  *(void *)uint64_t v30 = v5;
  char v33 = v3;
  uint64_t v34 = v6;
  char v37 = v4;
  if (v4)
  {
    uint64_t v35 = v13;
    uint64_t v40 = v11;
    int v36 = v14;
    int v41 = v12;
  }
  double v38 = &v10;
  uint64_t v39 = v6;
  char v42 = v4;
  sub_E7D1F8((uint64_t)v43, (uint64_t)v30, (uint64_t)&v29);
  if (v9) {
    return v8 / (double)v9;
  }
  else {
    return 0.0;
  }
}

uint64_t sub_E7D1F8(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(result + 24);
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v52 = *(void *)(result + 12);
    int v53 = *(_DWORD *)(result + 20);
  }
  int v6 = *(unsigned __int8 *)(result + 56);
  if (*(unsigned char *)(result + 56))
  {
    uint64_t v50 = *(void *)(result + 44);
    int v51 = *(_DWORD *)(result + 52);
  }
  uint64_t v7 = *(void *)(result + 72);
  if (*(void *)(a2 + 72) != v7)
  {
    uint64_t v8 = *(void *)(result + 32);
    uint64_t v9 = *(void *)(result + 64);
    int v10 = *(unsigned __int8 *)(result + 96);
    uint64_t v11 = *(void *)(result + 84);
    int v12 = *(_DWORD *)(result + 92);
    uint64_t v37 = *(void *)result;
    char v40 = v5;
    if (v5)
    {
      uint64_t v38 = v52;
      int v39 = v53;
    }
    uint64_t v41 = v8;
    char v44 = v6;
    if (v6)
    {
      uint64_t v42 = v50;
      int v43 = v51;
    }
    uint64_t v45 = v9;
    uint64_t v46 = v7;
    char v49 = v10;
    if (v10)
    {
      uint64_t v47 = v11;
      int v48 = v12;
    }
    double result = sub_E7D4C0((uint64_t)&v37);
    if (v46 != *(void *)(a2 + 72))
    {
      *(void *)int v26 = v37;
      char v27 = v40;
      if (v40)
      {
        *(void *)&v26[3] = v38;
        v26[5] = v39;
      }
      uint64_t v28 = v41;
      char v31 = v44;
      if (v44)
      {
        uint64_t v29 = v42;
        int v30 = v43;
      }
      uint64_t v32 = v45;
      uint64_t v33 = v46;
      char v36 = v49;
      if (v49)
      {
        uint64_t v34 = v47;
        int v35 = v48;
      }
      for (double result = sub_E7D4C0((uint64_t)v26); ; double result = sub_E7D4C0((uint64_t)v26))
      {
        uint64_t v13 = v33;
        if (v33 == *(void *)(a2 + 72)) {
          break;
        }
        unsigned int v14 = *(_DWORD *)(v7 + 8);
        unsigned int v15 = *(_DWORD *)(v7 + 12);
        uint64_t v7 = v46;
        uint64_t v16 = *(void *)(v46 + 8);
        int v17 = *(_DWORD *)(v46 + 16);
        uint64_t v47 = v16;
        int v48 = v17;
        if (!v49) {
          char v49 = 1;
        }
        uint64_t v18 = *(void *)(v33 + 8);
        int v19 = *(_DWORD *)(v33 + 16);
        uint64_t v34 = v18;
        int v35 = v19;
        if (!v36) {
          char v36 = 1;
        }
        long double v20 = (double)v18 - (double)v16;
        long double v21 = (double)HIDWORD(v18) - (double)HIDWORD(v16);
        double v22 = atan2((double)v14 - (double)v16, (double)v15 - (double)HIDWORD(v16));
        double v23 = atan2(v20, v21);
        if (v22 >= v23) {
          double v24 = v23;
        }
        else {
          double v24 = v22;
        }
        if (v22 >= v23) {
          double v23 = v22;
        }
        double v25 = v23 - v24;
        if (6.28318531 - v25 < v25) {
          double v25 = 6.28318531 - v25;
        }
        **(double **)a3 = **(double **)a3 + fabs(v25 + -3.14159265) / 3.14159265;
        ++**(_DWORD **)(a3 + 8);
        uint64_t v46 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_E7D4C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2 != v3)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    int v5 = *(_DWORD *)(v2 + 16);
    int v6 = *(unsigned __int8 *)(a1 + 96);
    *(void *)(a1 + 84) = v4;
    *(_DWORD *)(a1 + 92) = v5;
    if (!v6) {
      *(unsigned char *)(a1 + 96) = 1;
    }
    long double v7 = exp((double)HIDWORD(v4) * -6.28318531 / 4294967300.0 + 3.14159265);
    double v8 = (v7 + -1.0 / v7) * 0.5;
    uint64_t v9 = v2 + 24;
    do
    {
      *(void *)(a1 + 72) = v9;
      if (v9 == v3) {
        break;
      }
      uint64_t v10 = *(void *)(v9 + 8);
      int v11 = *(_DWORD *)(v9 + 16);
      *(void *)(a1 + 84) = v10;
      *(_DWORD *)(a1 + 92) = v11;
      int v12 = v10 >= v4 ? v4 : v10;
      int v13 = v10 <= v4 ? v4 : v10;
      int v14 = HIDWORD(v10) >= HIDWORD(v4) ? HIDWORD(v4) : HIDWORD(v10);
      int v15 = HIDWORD(v10) <= HIDWORD(v4) ? HIDWORD(v4) : HIDWORD(v10);
      double v16 = (double)**(uint64_t **)(a1 + 64) / 100.0;
      long double v17 = exp((double)HIDWORD(v10) * -6.28318531 / 4294967300.0 + 3.14159265);
      double v18 = atan((v17 - 1.0 / v17) * 0.5) * 57.2957795;
      double v19 = atan(v8) * 57.2957795;
      if (v19 >= v18) {
        double v19 = v18;
      }
      v9 += 24;
    }
    while (sqrt((double)(v13 - v12) * (double)(v13 - v12)+ (double)(v15 - v14) * (double)(v15 - v14)) <= v16/ (0.00932288077/ (1.0/ cos(v19 / 180.0 * 3.14159265))));
  }
  return a1;
}

double sub_E7D6A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v10 = a3;
  int v9 = 0;
  double v8 = 0.0;
  int v3 = *((unsigned __int8 *)a1 + 24);
  if (*((unsigned char *)a1 + 24))
  {
    *(void *)&v43[4] = *(uint64_t *)((char *)a1 + 12);
    LODWORD(v44) = *((_DWORD *)a1 + 5);
  }
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (*((unsigned char *)a2 + 24))
  {
    *(void *)&v30[4] = *(uint64_t *)((char *)a2 + 12);
    LODWORD(v31) = *((_DWORD *)a2 + 5);
  }
  if (v3)
  {
    *(void *)((char *)&v29 + 4) = *(uint64_t *)((char *)a1 + 12);
    HIDWORD(v29) = *((_DWORD *)a1 + 5);
    uint64_t v27 = *(uint64_t *)((char *)a1 + 12);
    int v28 = *((_DWORD *)a1 + 5);
  }
  if (v4)
  {
    uint64_t v25 = *(uint64_t *)((char *)a2 + 12);
    int v26 = *((_DWORD *)a2 + 5);
    uint64_t v23 = v25;
    int v24 = v26;
  }
  if (v3)
  {
    uint64_t v21 = *(void *)&v43[4];
    int v22 = v44;
  }
  if (v4)
  {
    uint64_t v19 = *(void *)&v30[4];
    int v20 = v31;
  }
  if (v3)
  {
    uint64_t v17 = *(void *)((char *)&v29 + 4);
    int v18 = HIDWORD(v29);
    uint64_t v15 = v27;
    int v16 = v28;
  }
  uint64_t v5 = *a1;
  if (v4)
  {
    uint64_t v13 = v25;
    int v14 = v26;
    uint64_t v11 = v23;
    int v12 = v24;
  }
  uint64_t v6 = *a2;
  *(void *)&long long v29 = &v8;
  *((void *)&v29 + 1) = &v9;
  *(void *)int v43 = v5;
  char v46 = v3;
  if (v3)
  {
    uint64_t v44 = v21;
    int v45 = v22;
  }
  uint64_t v47 = v6;
  char v50 = v4;
  if (v4)
  {
    uint64_t v48 = v19;
    int v49 = v20;
  }
  int v51 = &v10;
  uint64_t v52 = v5;
  char v55 = v3;
  if (v3)
  {
    uint64_t v53 = v17;
    int v54 = v18;
    uint64_t v31 = v15;
    int v32 = v16;
  }
  *(void *)int v30 = v5;
  char v33 = v3;
  uint64_t v34 = v6;
  char v37 = v4;
  if (v4)
  {
    uint64_t v35 = v13;
    uint64_t v40 = v11;
    int v36 = v14;
    int v41 = v12;
  }
  uint64_t v38 = &v10;
  uint64_t v39 = v6;
  char v42 = v4;
  sub_E7D8E0((uint64_t)v43, (uint64_t)v30, (uint64_t)&v29);
  if (v9) {
    return v8 / (double)v9;
  }
  else {
    return 0.0;
  }
}

uint64_t sub_E7D8E0(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(result + 24);
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v52 = *(void *)(result + 12);
    int v53 = *(_DWORD *)(result + 20);
  }
  int v6 = *(unsigned __int8 *)(result + 56);
  if (*(unsigned char *)(result + 56))
  {
    uint64_t v50 = *(void *)(result + 44);
    int v51 = *(_DWORD *)(result + 52);
  }
  uint64_t v7 = *(void *)(result + 72);
  if (*(void *)(a2 + 72) != v7)
  {
    uint64_t v8 = *(void *)(result + 32);
    uint64_t v9 = *(void *)(result + 64);
    int v10 = *(unsigned __int8 *)(result + 96);
    uint64_t v11 = *(void *)(result + 84);
    int v12 = *(_DWORD *)(result + 92);
    uint64_t v37 = *(void *)result;
    char v40 = v5;
    if (v5)
    {
      uint64_t v38 = v52;
      int v39 = v53;
    }
    uint64_t v41 = v8;
    char v44 = v6;
    if (v6)
    {
      uint64_t v42 = v50;
      int v43 = v51;
    }
    uint64_t v45 = v9;
    uint64_t v46 = v7;
    char v49 = v10;
    if (v10)
    {
      uint64_t v47 = v11;
      int v48 = v12;
    }
    double result = sub_E7D4C0((uint64_t)&v37);
    if (v46 != *(void *)(a2 + 72))
    {
      *(void *)int v26 = v37;
      char v27 = v40;
      if (v40)
      {
        *(void *)&v26[3] = v38;
        v26[5] = v39;
      }
      uint64_t v28 = v41;
      char v31 = v44;
      if (v44)
      {
        uint64_t v29 = v42;
        int v30 = v43;
      }
      uint64_t v32 = v45;
      uint64_t v33 = v46;
      char v36 = v49;
      if (v49)
      {
        uint64_t v34 = v47;
        int v35 = v48;
      }
      for (double result = sub_E7D4C0((uint64_t)v26); ; double result = sub_E7D4C0((uint64_t)v26))
      {
        uint64_t v13 = v33;
        if (v33 == *(void *)(a2 + 72)) {
          break;
        }
        unsigned int v14 = *(_DWORD *)(v7 + 8);
        unsigned int v15 = *(_DWORD *)(v7 + 12);
        uint64_t v7 = v46;
        uint64_t v16 = *(void *)(v46 + 8);
        int v17 = *(_DWORD *)(v46 + 16);
        uint64_t v47 = v16;
        int v48 = v17;
        if (!v49) {
          char v49 = 1;
        }
        uint64_t v18 = *(void *)(v33 + 8);
        int v19 = *(_DWORD *)(v33 + 16);
        uint64_t v34 = v18;
        int v35 = v19;
        if (!v36) {
          char v36 = 1;
        }
        long double v20 = (double)v18 - (double)v16;
        long double v21 = (double)HIDWORD(v18) - (double)HIDWORD(v16);
        double v22 = atan2((double)v14 - (double)v16, (double)v15 - (double)HIDWORD(v16));
        double v23 = atan2(v20, v21);
        if (v22 >= v23) {
          double v24 = v23;
        }
        else {
          double v24 = v22;
        }
        if (v22 >= v23) {
          double v23 = v22;
        }
        double v25 = v23 - v24;
        if (6.28318531 - v25 < v25) {
          double v25 = 6.28318531 - v25;
        }
        **(double **)a3 = **(double **)a3 + fabs(v25 + -3.14159265) / 3.14159265;
        ++**(_DWORD **)(a3 + 8);
        uint64_t v46 = v13;
      }
    }
  }
  return result;
}

void *sub_E7DBA8(void *a1)
{
  uint64_t v2 = (void *)a1[19];
  if (v2)
  {
    a1[20] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[15];
  if (v3)
  {
    a1[16] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  int v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_E7DC0C(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 7);
  LODWORD(v172) = 0;
  sub_E7EE60((uint64_t)(a1 + 7), &v172, a1 + 4);
  LODWORD(v170) = 1;
  *(void *)&long long v172 = 0;
  sub_E7EE60(v2, &v170, (uint64_t *)&v172);
  int v3 = (long long *)a1[7];
  int v4 = (long long *)a1[8];
  if (v3 != v4)
  {
    uint64_t v5 = a1[11];
    double v168 = (void **)(a1 + 11);
    int v169 = a1 + 15;
    uint64_t v6 = a1[12];
    unint64_t v7 = a1[3];
    while (0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3) < v7)
    {
      unsigned int v8 = *(_DWORD *)v3;
      uint64_t v9 = *((void *)v3 + 1);
      uint64_t v10 = (char *)v4 - (char *)v3;
      if ((char *)v4 - (char *)v3 >= 17)
      {
        uint64_t v11 = 0;
        uint64_t v12 = v10 >> 4;
        long long v172 = *v3;
        int64_t v13 = (unint64_t)((v10 >> 4) - 2) >> 1;
        unsigned int v14 = v3;
        do
        {
          unsigned int v15 = &v14[v11 + 1];
          uint64_t v16 = (2 * v11) | 1;
          uint64_t v17 = 2 * v11 + 2;
          if (v17 < v12)
          {
            uint64_t v18 = *((void *)v15 + 1);
            uint64_t v19 = *((void *)v15 + 3);
            v15 += v18 > v19;
            if (v18 > v19) {
              uint64_t v16 = v17;
            }
          }
          *unsigned int v14 = *v15;
          unsigned int v14 = v15;
          uint64_t v11 = v16;
        }
        while (v16 <= v13);
        long double v20 = v4 - 1;
        if (v15 == v20)
        {
          *unsigned int v15 = v172;
        }
        else
        {
          *unsigned int v15 = *v20;
          *long double v20 = v172;
          uint64_t v21 = (char *)v15 - (char *)v3 + 16;
          if (v21 >= 17)
          {
            unint64_t v22 = (((unint64_t)v21 >> 4) - 2) >> 1;
            uint64_t v23 = *((void *)v15 + 1);
            if (*((void *)&v3[v22] + 1) > v23)
            {
              uint64_t v24 = *(void *)v15;
              do
              {
                double v25 = v15;
                unsigned int v15 = &v3[v22];
                *double v25 = *v15;
                if (!v22) {
                  break;
                }
                unint64_t v22 = (v22 - 1) >> 1;
              }
              while (*((void *)&v3[v22] + 1) > v23);
              *(void *)unsigned int v15 = v24;
              *((void *)v15 + 1) = v23;
            }
          }
        }
        int v4 = (long long *)a1[8];
      }
      a1[8] = v4 - 1;
      a1[6] = v9;
      if (v8) {
        sub_E7EFF0((uint64_t)a1, v8);
      }
      while (1)
      {
        int v26 = (char *)a1[19];
        char v27 = (char *)a1[20];
        if (v26 == v27) {
          break;
        }
        uint64_t v28 = *((void *)v26 + 1);
        if (v28 > a1[6]) {
          break;
        }
        uint64_t v29 = *(void *)v26;
        uint64_t v30 = *((void *)v26 + 2);
        if (v27 - v26 >= 25)
        {
          uint64_t v31 = 0;
          int64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v26) >> 3);
          long long v172 = *(_OWORD *)v26;
          uint64_t v173 = *((void *)v26 + 2);
          uint64_t v33 = v26;
          do
          {
            uint64_t v35 = v31 + 1;
            char v36 = &v33[24 * v31 + 24];
            uint64_t v37 = (2 * v31) | 1;
            uint64_t v38 = 2 * v31 + 2;
            if (v38 < v32)
            {
              uint64_t v39 = *(void *)&v33[24 * v35 + 8];
              uint64_t v40 = *((void *)v36 + 4);
              v36 += 24 * (v39 > v40);
              if (v39 > v40) {
                uint64_t v37 = v38;
              }
            }
            long long v34 = *(_OWORD *)v36;
            *((void *)v33 + 2) = *((void *)v36 + 2);
            *(_OWORD *)uint64_t v33 = v34;
            uint64_t v33 = v36;
            uint64_t v31 = v37;
          }
          while (v37 <= (uint64_t)((unint64_t)(v32 - 2) >> 1));
          uint64_t v41 = v27 - 24;
          if (v36 == v41)
          {
            long long v50 = v172;
            *((void *)v36 + 2) = v173;
            *(_OWORD *)char v36 = v50;
          }
          else
          {
            long long v42 = *(_OWORD *)v41;
            *((void *)v36 + 2) = *((void *)v41 + 2);
            *(_OWORD *)char v36 = v42;
            *(_OWORD *)uint64_t v41 = v172;
            *((void *)v41 + 2) = v173;
            uint64_t v43 = v36 - v26 + 24;
            if (v43 >= 25)
            {
              unint64_t v44 = (v43 / 0x18uLL - 2) >> 1;
              uint64_t v45 = *((void *)v36 + 1);
              if (*(void *)&v26[24 * v44 + 8] > v45)
              {
                uint64_t v46 = *(void *)v36;
                uint64_t v47 = *((void *)v36 + 2);
                do
                {
                  int v48 = v36;
                  char v36 = &v26[24 * v44];
                  long long v49 = *(_OWORD *)v36;
                  *((void *)v48 + 2) = *((void *)v36 + 2);
                  *(_OWORD *)int v48 = v49;
                  if (!v44) {
                    break;
                  }
                  unint64_t v44 = (v44 - 1) >> 1;
                }
                while (*(void *)&v26[24 * v44 + 8] > v45);
                *(void *)char v36 = v46;
                *((void *)v36 + 1) = v45;
                *((void *)v36 + 2) = v47;
              }
            }
          }
          char v27 = (char *)a1[20];
        }
        a1[20] = v27 - 24;
        uint64_t v52 = (void *)a1[16];
        unint64_t v51 = a1[17];
        if ((unint64_t)v52 >= v51)
        {
          double v56 = (void *)*v169;
          unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v52 - *v169) >> 3);
          unint64_t v58 = v57 + 1;
          if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - (void)v56) >> 3);
          if (2 * v59 > v58) {
            unint64_t v58 = 2 * v59;
          }
          if (v59 >= 0x555555555555555) {
            unint64_t v60 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v60 = v58;
          }
          if (v60 > 0xAAAAAAAAAAAAAAALL) {
LABEL_157:
          }
            sub_188D718();
          uint64_t v61 = 24 * v60;
          double v62 = (char *)operator new(24 * v60);
          unsigned int v63 = &v62[24 * v57];
          *(void *)unsigned int v63 = v29;
          *((void *)v63 + 1) = v28;
          *((void *)v63 + 2) = v30;
          if (v52 == v56)
          {
            int v53 = v63 + 24;
            a1[15] = v63;
            a1[16] = v63 + 24;
            a1[17] = &v62[v61];
            if (!v56) {
              goto LABEL_57;
            }
          }
          else
          {
            unint64_t v64 = &v62[24 * v57];
            do
            {
              long long v65 = *(_OWORD *)(v52 - 3);
              double v66 = v64 - 24;
              *((void *)v64 - 1) = *(v52 - 1);
              *(_OWORD *)(v64 - 24) = v65;
              v52 -= 3;
              v64 -= 24;
            }
            while (v52 != v56);
            int v53 = v63 + 24;
            a1[15] = v66;
            a1[16] = v63 + 24;
            a1[17] = &v62[v61];
            if (!v56) {
              goto LABEL_57;
            }
          }
          operator delete(v56);
LABEL_57:
          a1[16] = v53;
          uint64_t v54 = a1[15];
          uint64_t v55 = (uint64_t)v53 - v54;
          if ((uint64_t)v53 - v54 >= 25)
          {
LABEL_58:
            unint64_t v67 = (v55 / 0x18uLL - 2) >> 1;
            uint64_t v68 = *(v53 - 1);
            if (*(void *)(v54 + 24 * v67 + 16) > v68)
            {
              double v69 = v53 - 3;
              long long v172 = *(_OWORD *)(v53 - 3);
              do
              {
                double v70 = v69;
                double v69 = (void *)(v54 + 24 * v67);
                long long v71 = *(_OWORD *)v69;
                v70[2] = v69[2];
                *(_OWORD *)double v70 = v71;
                if (!v67) {
                  break;
                }
                unint64_t v67 = (v67 - 1) >> 1;
              }
              while (*(void *)(v54 + 24 * v67 + 16) > v68);
              *(_OWORD *)double v69 = v172;
              v69[2] = v68;
            }
          }
        }
        else
        {
          *uint64_t v52 = v29;
          v52[1] = v28;
          int v53 = v52 + 3;
          v52[2] = v30;
          a1[16] = v52 + 3;
          uint64_t v54 = a1[15];
          uint64_t v55 = (uint64_t)v52 - v54 + 24;
          if (v55 >= 25) {
            goto LABEL_58;
          }
        }
      }
      double v72 = (char *)a1[15];
      unsigned int v73 = (char *)a1[16];
      if (v72 != v73)
      {
        while (1)
        {
          uint64_t v75 = *((void *)v72 + 2);
          if (v75 >= a1[6])
          {
            double v74 = v73;
            goto LABEL_112;
          }
          uint64_t v77 = *(void *)v72;
          uint64_t v76 = *((void *)v72 + 1);
          if (v73 - v72 >= 25)
          {
            uint64_t v78 = 0;
            int64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((v73 - v72) >> 3);
            long long v172 = *(_OWORD *)v72;
            uint64_t v173 = *((void *)v72 + 2);
            double v80 = v72;
            do
            {
              uint64_t v82 = v78 + 1;
              long double v83 = &v80[24 * v78 + 24];
              uint64_t v84 = (2 * v78) | 1;
              uint64_t v85 = 2 * v78 + 2;
              if (v85 < v79)
              {
                uint64_t v86 = *(void *)&v80[24 * v82 + 16];
                uint64_t v87 = *((void *)v83 + 5);
                v83 += 24 * (v86 > v87);
                if (v86 > v87) {
                  uint64_t v84 = v85;
                }
              }
              long long v81 = *(_OWORD *)v83;
              *((void *)v80 + 2) = *((void *)v83 + 2);
              *(_OWORD *)double v80 = v81;
              double v80 = v83;
              uint64_t v78 = v84;
            }
            while (v84 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
            uint64_t v88 = v73 - 24;
            if (v83 == v88)
            {
              long long v95 = v172;
              *((void *)v83 + 2) = v173;
              *(_OWORD *)long double v83 = v95;
            }
            else
            {
              long long v89 = *(_OWORD *)v88;
              *((void *)v83 + 2) = *((void *)v88 + 2);
              *(_OWORD *)long double v83 = v89;
              *(_OWORD *)uint64_t v88 = v172;
              *((void *)v88 + 2) = v173;
              uint64_t v90 = v83 - v72 + 24;
              if (v90 >= 25)
              {
                unint64_t v91 = (v90 / 0x18uLL - 2) >> 1;
                uint64_t v92 = *((void *)v83 + 2);
                if (*(void *)&v72[24 * v91 + 16] > v92)
                {
                  long long v170 = *(_OWORD *)v83;
                  do
                  {
                    int v93 = v83;
                    long double v83 = &v72[24 * v91];
                    long long v94 = *(_OWORD *)v83;
                    *((void *)v93 + 2) = *((void *)v83 + 2);
                    *(_OWORD *)int v93 = v94;
                    if (!v91) {
                      break;
                    }
                    unint64_t v91 = (v91 - 1) >> 1;
                  }
                  while (*(void *)&v72[24 * v91 + 16] > v92);
                  *(_OWORD *)long double v83 = v170;
                  *((void *)v83 + 2) = v92;
                }
              }
            }
            unsigned int v73 = (char *)a1[16];
          }
          a1[16] = v73 - 24;
          uint64_t v97 = (char *)a1[12];
          unint64_t v96 = a1[13];
          if ((unint64_t)v97 < v96)
          {
            *(void *)uint64_t v97 = v77;
            *((void *)v97 + 1) = v76;
            int v98 = v97 + 24;
            *((void *)v97 + 2) = v75;
            a1[12] = v97 + 24;
            uint64_t v99 = a1[11];
            uint64_t v100 = (uint64_t)&v97[-v99 + 24];
            if (v100 >= 25) {
              goto LABEL_102;
            }
            goto LABEL_68;
          }
          int v101 = (char *)*v168;
          unint64_t v102 = 0xAAAAAAAAAAAAAAABLL * ((v97 - (unsigned char *)*v168) >> 3);
          unint64_t v103 = v102 + 1;
          if (v102 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_158:
          }
            sub_2E00();
          unint64_t v104 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - (void)v101) >> 3);
          if (2 * v104 > v103) {
            unint64_t v103 = 2 * v104;
          }
          if (v104 >= 0x555555555555555) {
            unint64_t v105 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v105 = v103;
          }
          if (v105 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_157;
          }
          uint64_t v106 = 24 * v105;
          uint64_t v107 = (char *)operator new(24 * v105);
          uint64_t v108 = &v107[24 * v102];
          *(void *)uint64_t v108 = v77;
          *((void *)v108 + 1) = v76;
          *((void *)v108 + 2) = v75;
          if (v97 == v101)
          {
            int v98 = v108 + 24;
            a1[11] = v108;
            a1[12] = v108 + 24;
            a1[13] = &v107[v106];
            if (v101) {
              goto LABEL_100;
            }
          }
          else
          {
            uint64_t v109 = &v107[24 * v102];
            do
            {
              long long v110 = *(_OWORD *)(v97 - 24);
              double v111 = v109 - 24;
              *((void *)v109 - 1) = *((void *)v97 - 1);
              *(_OWORD *)(v109 - 24) = v110;
              v97 -= 24;
              v109 -= 24;
            }
            while (v97 != v101);
            int v98 = v108 + 24;
            a1[11] = v111;
            a1[12] = v108 + 24;
            a1[13] = &v107[v106];
            if (v101) {
LABEL_100:
            }
              operator delete(v101);
          }
          a1[12] = v98;
          uint64_t v99 = a1[11];
          uint64_t v100 = (uint64_t)v98 - v99;
          if ((uint64_t)v98 - v99 >= 25)
          {
LABEL_102:
            unint64_t v112 = (v100 / 0x18uLL - 2) >> 1;
            uint64_t v113 = *(v98 - 2);
            if (*(void *)(v99 + 24 * v112 + 8) > v113)
            {
              uint64_t v116 = *(v98 - 3);
              uint64_t v115 = v98 - 3;
              uint64_t v114 = v116;
              uint64_t v117 = v115[2];
              do
              {
                uint64_t v118 = v115;
                uint64_t v115 = (void *)(v99 + 24 * v112);
                long long v119 = *(_OWORD *)v115;
                v118[2] = v115[2];
                *(_OWORD *)uint64_t v118 = v119;
                if (!v112) {
                  break;
                }
                unint64_t v112 = (v112 - 1) >> 1;
              }
              while (*(void *)(v99 + 24 * v112 + 8) > v113);
              void *v115 = v114;
              v115[1] = v113;
              v115[2] = v117;
            }
          }
LABEL_68:
          double v72 = (char *)a1[15];
          unsigned int v73 = (char *)a1[16];
          double v74 = v72;
          if (v72 == v73) {
            goto LABEL_112;
          }
        }
      }
      double v74 = (char *)a1[15];
LABEL_112:
      while (2)
      {
        uint64_t v5 = a1[11];
        uint64_t v6 = a1[12];
        unint64_t v7 = a1[3];
        uint64_t v120 = v74 - v72;
        if (v74 != v72)
        {
          int64_t v121 = 0xAAAAAAAAAAAAAAABLL * (v120 >> 3);
          if (v121 - 0x5555555555555555 * ((v6 - v5) >> 3) >= v7 && *((void *)v72 + 1) < *((void *)v72 + 2))
          {
            long long v122 = *(_OWORD *)v72;
            uint64_t v171 = *((void *)v72 + 2);
            long long v170 = v122;
            if (v120 >= 25)
            {
              uint64_t v123 = 0;
              long long v124 = *(_OWORD *)v72;
              uint64_t v173 = *((void *)v72 + 2);
              long long v172 = v124;
              v125 = v72;
              do
              {
                uint64_t v127 = v123 + 1;
                uint64_t v128 = &v125[24 * v123 + 24];
                uint64_t v129 = (2 * v123) | 1;
                uint64_t v130 = 2 * v123 + 2;
                if (v130 < v121)
                {
                  uint64_t v131 = *(void *)&v125[24 * v127 + 16];
                  uint64_t v132 = *((void *)v128 + 5);
                  v128 += 24 * (v131 > v132);
                  if (v131 > v132) {
                    uint64_t v129 = v130;
                  }
                }
                long long v126 = *(_OWORD *)v128;
                *((void *)v125 + 2) = *((void *)v128 + 2);
                *(_OWORD *)v125 = v126;
                v125 = v128;
                uint64_t v123 = v129;
              }
              while (v129 <= (uint64_t)((unint64_t)(v121 - 2) >> 1));
              char v133 = v74 - 24;
              if (v128 == v133)
              {
                long long v141 = v172;
                *((void *)v128 + 2) = v173;
                *(_OWORD *)uint64_t v128 = v141;
              }
              else
              {
                long long v134 = *(_OWORD *)v133;
                *((void *)v128 + 2) = *((void *)v133 + 2);
                *(_OWORD *)uint64_t v128 = v134;
                long long v135 = v172;
                *((void *)v133 + 2) = v173;
                *(_OWORD *)char v133 = v135;
                uint64_t v136 = v128 - v72 + 24;
                if (v136 >= 25)
                {
                  unint64_t v137 = (v136 / 0x18uLL - 2) >> 1;
                  uint64_t v138 = *((void *)v128 + 2);
                  if (*(void *)&v72[24 * v137 + 16] > v138)
                  {
                    long long v174 = *(_OWORD *)v128;
                    do
                    {
                      int v139 = v128;
                      uint64_t v128 = &v72[24 * v137];
                      long long v140 = *(_OWORD *)v128;
                      *((void *)v139 + 2) = *((void *)v128 + 2);
                      *(_OWORD *)int v139 = v140;
                      if (!v137) {
                        break;
                      }
                      unint64_t v137 = (v137 - 1) >> 1;
                    }
                    while (*(void *)&v72[24 * v137 + 16] > v138);
                    *(_OWORD *)uint64_t v128 = v174;
                    *((void *)v128 + 2) = v138;
                  }
                }
              }
              double v74 = (char *)a1[16];
            }
            a1[16] = v74 - 24;
            uint64_t v142 = sub_E7F7C4((uint64_t)a1, (unint64_t *)&v170);
            *(void *)&long long v172 = v142;
            *(void *)&long long v174 = v142;
            uint64_t v143 = a1[6];
            if (v143 <= v142)
            {
              if (v143 < v142) {
                sub_E7F5D8((uint64_t)(a1 + 19), &v170, (uint64_t *)&v172, (uint64_t *)&v174);
              }
              else {
                sub_E7F3DC((uint64_t)v169, &v170, (uint64_t *)&v172, (uint64_t *)&v174);
              }
            }
            else
            {
              unint64_t v144 = v142;
              long double v146 = (char *)a1[12];
              unint64_t v145 = a1[13];
              if ((unint64_t)v146 < v145)
              {
                *(void *)long double v146 = v170;
                *((void *)v146 + 1) = v142;
                *((void *)v146 + 2) = v142;
                double v147 = v146 + 24;
                goto LABEL_148;
              }
              int v148 = (char *)*v168;
              unint64_t v149 = 0xAAAAAAAAAAAAAAABLL * ((v146 - (unsigned char *)*v168) >> 3);
              unint64_t v150 = v149 + 1;
              if (v149 + 1 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_158;
              }
              unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v145 - (void)v148) >> 3);
              if (2 * v151 > v150) {
                unint64_t v150 = 2 * v151;
              }
              if (v151 >= 0x555555555555555) {
                unint64_t v152 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v152 = v150;
              }
              if (v152 > 0xAAAAAAAAAAAAAAALL) {
                goto LABEL_157;
              }
              uint64_t v153 = 24 * v152;
              v154 = (char *)operator new(24 * v152);
              int v155 = &v154[24 * v149];
              *(void *)int v155 = v170;
              *(int64x2_t *)(v155 + 8) = vdupq_n_s64(v144);
              if (v146 == v148)
              {
                double v147 = v155 + 24;
                a1[11] = v155;
                a1[12] = v155 + 24;
                a1[13] = &v154[v153];
                if (v148) {
                  goto LABEL_147;
                }
              }
              else
              {
                unint64_t v156 = &v154[24 * v149];
                do
                {
                  long long v157 = *(_OWORD *)(v146 - 24);
                  unint64_t v158 = v156 - 24;
                  *((void *)v156 - 1) = *((void *)v146 - 1);
                  *(_OWORD *)(v156 - 24) = v157;
                  v146 -= 24;
                  v156 -= 24;
                }
                while (v146 != v148);
                double v147 = v155 + 24;
                a1[11] = v158;
                a1[12] = v155 + 24;
                a1[13] = &v154[v153];
                if (!v148) {
                  goto LABEL_148;
                }
LABEL_147:
                operator delete(v148);
              }
LABEL_148:
              a1[12] = v147;
              uint64_t v159 = a1[11];
              if ((uint64_t)v147 - v159 >= 25)
              {
                unint64_t v160 = (((unint64_t)v147 - v159) / 0x18 - 2) >> 1;
                uint64_t v161 = *(v147 - 2);
                if (*(void *)(v159 + 24 * v160 + 8) > v161)
                {
                  uint64_t v164 = *(v147 - 3);
                  unint64_t v163 = v147 - 3;
                  uint64_t v162 = v164;
                  uint64_t v165 = v163[2];
                  do
                  {
                    int v166 = v163;
                    unint64_t v163 = (void *)(v159 + 24 * v160);
                    long long v167 = *(_OWORD *)v163;
                    v166[2] = v163[2];
                    *(_OWORD *)int v166 = v167;
                    if (!v160) {
                      break;
                    }
                    unint64_t v160 = (v160 - 1) >> 1;
                  }
                  while (*(void *)(v159 + 24 * v160 + 8) > v161);
                  *unint64_t v163 = v162;
                  v163[1] = v161;
                  v163[2] = v165;
                }
              }
            }
            double v72 = (char *)a1[15];
            double v74 = (char *)a1[16];
            continue;
          }
        }
        break;
      }
      int v3 = (long long *)a1[7];
      int v4 = (long long *)a1[8];
      if (v3 == v4) {
        return;
      }
    }
  }
}

void sub_E7E82C(void *a1@<X0>, void *a2@<X8>)
{
  int v4 = (long long *)a1[15];
  for (double i = (long long *)a1[16]; v4 != i; double i = (long long *)a1[16])
  {
    long long v6 = *v4;
    uint64_t v73 = *((void *)v4 + 2);
    long long v72 = v6;
    if ((char *)i - (char *)v4 >= 25)
    {
      uint64_t v7 = 0;
      int64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)i - (char *)v4) >> 3);
      long long v75 = *v4;
      uint64_t v76 = *((void *)v4 + 2);
      uint64_t v9 = v4;
      do
      {
        uint64_t v11 = v7 + 1;
        uint64_t v12 = (long long *)((char *)v9 + 24 * v7 + 24);
        uint64_t v13 = (2 * v7) | 1;
        uint64_t v14 = 2 * v7 + 2;
        if (v14 < v8)
        {
          uint64_t v15 = *((void *)v9 + 3 * v11 + 2);
          uint64_t v16 = *((void *)v12 + 5);
          uint64_t v12 = (long long *)((char *)v12 + 24 * (v15 > v16));
          if (v15 > v16) {
            uint64_t v13 = v14;
          }
        }
        long long v10 = *v12;
        *((void *)v9 + 2) = *((void *)v12 + 2);
        *uint64_t v9 = v10;
        uint64_t v9 = v12;
        uint64_t v7 = v13;
      }
      while (v13 <= (uint64_t)((unint64_t)(v8 - 2) >> 1));
      uint64_t v17 = (long long *)((char *)i - 24);
      if (v12 == v17)
      {
        long long v24 = v75;
        *((void *)v12 + 2) = v76;
        *uint64_t v12 = v24;
      }
      else
      {
        long long v18 = *v17;
        *((void *)v12 + 2) = *((void *)v17 + 2);
        *uint64_t v12 = v18;
        *uint64_t v17 = v75;
        *((void *)v17 + 2) = v76;
        uint64_t v19 = (char *)v12 - (char *)v4 + 24;
        if (v19 >= 25)
        {
          unint64_t v20 = (v19 / 0x18uLL - 2) >> 1;
          uint64_t v21 = *((void *)v12 + 2);
          if (*((void *)v4 + 3 * v20 + 2) > v21)
          {
            long long v74 = *v12;
            do
            {
              unint64_t v22 = v12;
              uint64_t v12 = (long long *)((char *)v4 + 24 * v20);
              long long v23 = *v12;
              *((void *)v22 + 2) = *((void *)v12 + 2);
              long long *v22 = v23;
              if (!v20) {
                break;
              }
              unint64_t v20 = (v20 - 1) >> 1;
            }
            while (*((void *)v4 + 3 * v20 + 2) > v21);
            *uint64_t v12 = v74;
            *((void *)v12 + 2) = v21;
          }
        }
      }
      double i = (long long *)a1[16];
    }
    a1[16] = (char *)i - 24;
    *(void *)&long long v75 = sub_E7F7C4((uint64_t)a1, (unint64_t *)&v72);
    if ((uint64_t)v75 <= a1[4]) {
      sub_E7F5D8((uint64_t)(a1 + 11), &v72, (uint64_t *)&v75, (uint64_t *)&v75);
    }
    int v4 = (long long *)a1[15];
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1[3])
  {
    uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
    do
    {
      int v26 = (long long *)a1[11];
      char v27 = (long long *)a1[12];
      if (v26 == v27) {
        break;
      }
      long long v28 = *v26;
      uint64_t v73 = *((void *)v26 + 2);
      long long v72 = v28;
      if ((char *)v27 - (char *)v26 >= 25)
      {
        uint64_t v29 = 0;
        int64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v26) >> 3);
        long long v75 = *v26;
        uint64_t v76 = *((void *)v26 + 2);
        uint64_t v31 = v26;
        do
        {
          uint64_t v33 = v29 + 1;
          long long v34 = (long long *)((char *)v31 + 24 * v29 + 24);
          uint64_t v35 = (2 * v29) | 1;
          uint64_t v36 = 2 * v29 + 2;
          if (v36 < v30)
          {
            uint64_t v37 = *((void *)v31 + 3 * v33 + 1);
            uint64_t v38 = *((void *)v34 + 4);
            long long v34 = (long long *)((char *)v34 + 24 * (v37 > v38));
            if (v37 > v38) {
              uint64_t v35 = v36;
            }
          }
          long long v32 = *v34;
          *((void *)v31 + 2) = *((void *)v34 + 2);
          *uint64_t v31 = v32;
          uint64_t v31 = v34;
          uint64_t v29 = v35;
        }
        while (v35 <= (uint64_t)((unint64_t)(v30 - 2) >> 1));
        uint64_t v39 = (long long *)((char *)v27 - 24);
        if (v34 == v39)
        {
          long long v48 = v75;
          *((void *)v34 + 2) = v76;
          *long long v34 = v48;
        }
        else
        {
          long long v40 = *v39;
          *((void *)v34 + 2) = *((void *)v39 + 2);
          *long long v34 = v40;
          *uint64_t v39 = v75;
          *((void *)v39 + 2) = v76;
          uint64_t v41 = (char *)v34 - (char *)v26 + 24;
          if (v41 >= 25)
          {
            unint64_t v42 = (v41 / 0x18uLL - 2) >> 1;
            uint64_t v43 = *((void *)v34 + 1);
            if (*((void *)v26 + 3 * v42 + 1) > v43)
            {
              uint64_t v44 = *(void *)v34;
              uint64_t v45 = *((void *)v34 + 2);
              do
              {
                uint64_t v46 = v34;
                long long v34 = (long long *)((char *)v26 + 24 * v42);
                long long v47 = *v34;
                *((void *)v46 + 2) = *((void *)v34 + 2);
                *uint64_t v46 = v47;
                if (!v42) {
                  break;
                }
                unint64_t v42 = (v42 - 1) >> 1;
              }
              while (*((void *)v26 + 3 * v42 + 1) > v43);
              *(void *)long long v34 = v44;
              *((void *)v34 + 1) = v43;
              *((void *)v34 + 2) = v45;
            }
          }
        }
        char v27 = (long long *)a1[12];
      }
      a1[12] = (char *)v27 - 24;
      if (*((void *)&v72 + 1) == v73)
      {
        sub_29AC28((uint64_t)a2, &v72, (uint64_t *)&v72 + 1);
        uint64_t v25 = v73;
      }
      else
      {
        *(void *)&long long v75 = sub_E7F7C4((uint64_t)a1, (unint64_t *)&v72);
        sub_E7F5D8((uint64_t)(a1 + 11), &v72, (uint64_t *)&v75, (uint64_t *)&v75);
      }
    }
    while (a1[3] > (unint64_t)((uint64_t)(a2[1] - *a2) >> 4));
  }
  else
  {
    uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
  }
  long long v49 = (long long *)a1[11];
  for (unsigned int j = (long long *)a1[12]; v49 != j; unsigned int j = (long long *)a1[12])
  {
    if (*((void *)v49 + 1) != v25) {
      break;
    }
    long long v51 = *v49;
    uint64_t v73 = *((void *)v49 + 2);
    long long v72 = v51;
    if ((char *)j - (char *)v49 >= 25)
    {
      uint64_t v52 = 0;
      int64_t v53 = 0xAAAAAAAAAAAAAAABLL * (((char *)j - (char *)v49) >> 3);
      long long v75 = *v49;
      uint64_t v76 = *((void *)v49 + 2);
      uint64_t v54 = v49;
      do
      {
        uint64_t v56 = v52 + 1;
        unint64_t v57 = (long long *)((char *)v54 + 24 * v52 + 24);
        uint64_t v58 = (2 * v52) | 1;
        uint64_t v59 = 2 * v52 + 2;
        if (v59 < v53)
        {
          uint64_t v60 = *((void *)v54 + 3 * v56 + 1);
          uint64_t v61 = *((void *)v57 + 4);
          unint64_t v57 = (long long *)((char *)v57 + 24 * (v60 > v61));
          if (v60 > v61) {
            uint64_t v58 = v59;
          }
        }
        long long v55 = *v57;
        *((void *)v54 + 2) = *((void *)v57 + 2);
        *uint64_t v54 = v55;
        uint64_t v54 = v57;
        uint64_t v52 = v58;
      }
      while (v58 <= (uint64_t)((unint64_t)(v53 - 2) >> 1));
      double v62 = (long long *)((char *)j - 24);
      if (v57 == v62)
      {
        long long v71 = v75;
        *((void *)v57 + 2) = v76;
        *unint64_t v57 = v71;
      }
      else
      {
        long long v63 = *v62;
        *((void *)v57 + 2) = *((void *)v62 + 2);
        *unint64_t v57 = v63;
        *double v62 = v75;
        *((void *)v62 + 2) = v76;
        uint64_t v64 = (char *)v57 - (char *)v49 + 24;
        if (v64 >= 25)
        {
          unint64_t v65 = (v64 / 0x18uLL - 2) >> 1;
          uint64_t v66 = *((void *)v57 + 1);
          if (*((void *)v49 + 3 * v65 + 1) > v66)
          {
            uint64_t v67 = *(void *)v57;
            uint64_t v68 = *((void *)v57 + 2);
            do
            {
              double v69 = v57;
              unint64_t v57 = (long long *)((char *)v49 + 24 * v65);
              long long v70 = *v57;
              *((void *)v69 + 2) = *((void *)v57 + 2);
              *double v69 = v70;
              if (!v65) {
                break;
              }
              unint64_t v65 = (v65 - 1) >> 1;
            }
            while (*((void *)v49 + 3 * v65 + 1) > v66);
            *(void *)unint64_t v57 = v67;
            *((void *)v57 + 1) = v66;
            *((void *)v57 + 2) = v68;
          }
        }
      }
      unsigned int j = (long long *)a1[12];
    }
    a1[12] = (char *)j - 24;
    if (*((void *)&v72 + 1) == v73)
    {
      sub_29AC28((uint64_t)a2, &v72, (uint64_t *)&v72 + 1);
    }
    else
    {
      *(void *)&long long v75 = sub_E7F7C4((uint64_t)a1, (unint64_t *)&v72);
      sub_E7F5D8((uint64_t)(a1 + 11), &v72, (uint64_t *)&v75, (uint64_t *)&v75);
    }
    long long v49 = (long long *)a1[11];
  }
}

void sub_E7EE38(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_E7EE60(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v7 = *(char **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 < v6)
  {
    uint64_t v8 = *a3;
    *(_DWORD *)uint64_t v7 = *a2;
    *((void *)v7 + 1) = v8;
    uint64_t v9 = v7 + 16;
    goto LABEL_13;
  }
  long long v10 = *(char **)a1;
  uint64_t v11 = (uint64_t)&v7[-*(void *)a1] >> 4;
  unint64_t v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v13 = v6 - (void)v10;
  if (v13 >> 3 > v12) {
    unint64_t v12 = v13 >> 3;
  }
  BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
  if (!v14) {
    unint64_t v15 = v12;
  }
  if (v15 >> 60) {
    sub_188D718();
  }
  uint64_t v16 = 16 * v15;
  uint64_t v17 = (char *)operator new(16 * v15);
  uint64_t v18 = *a3;
  uint64_t v19 = &v17[16 * v11];
  unint64_t v20 = &v17[v16];
  *(_DWORD *)uint64_t v19 = *a2;
  *((void *)v19 + 1) = v18;
  uint64_t v9 = v19 + 16;
  if (v7 == v10)
  {
    *(void *)a1 = v19;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v20;
    if (!v10) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    uint64_t v21 = v19 - 16;
    *((_OWORD *)v19 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 16;
    v19 -= 16;
  }
  while (v7 != v10);
  *(void *)a1 = v21;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v20;
  if (v10) {
LABEL_12:
  }
    operator delete(v10);
LABEL_13:
  *(void *)(a1 + 8) = v9;
  unint64_t v22 = *(char **)a1;
  uint64_t v23 = (uint64_t)&v9[-*(void *)a1];
  if (v23 >= 17)
  {
    unint64_t v24 = (((unint64_t)v23 >> 4) - 2) >> 1;
    uint64_t v25 = *((void *)v9 - 1);
    if (*(void *)&v22[16 * v24 + 8] > v25)
    {
      uint64_t v28 = *((void *)v9 - 2);
      char v27 = v9 - 16;
      uint64_t v26 = v28;
      do
      {
        uint64_t v29 = v27;
        char v27 = &v22[16 * v24];
        *(_OWORD *)uint64_t v29 = *(_OWORD *)v27;
        if (!v24) {
          break;
        }
        unint64_t v24 = (v24 - 1) >> 1;
      }
      while (*(void *)&v22[16 * v24 + 8] > v25);
      *(void *)char v27 = v26;
      *((void *)v27 + 1) = v25;
    }
  }
}

void sub_E7EFF0(uint64_t a1, unsigned int a2)
{
  if (sub_511FC(a2) <= 0x1D)
  {
    unsigned int v4 = sub_511FC(a2);
    unsigned int v5 = sub_511FC(a2);
    if (v4 <= 0x1D)
    {
      unsigned int v6 = v4 >> 1;
      if (v5 >> 1 <= v6)
      {
        unsigned int v7 = sub_511FC(a2);
        unsigned int v8 = 2 * (v6 - (v7 >> 1)) + 2;
        uint64_t v9 = (1 << (2 * (v6 - (v7 >> 1)) + 2));
        long long v10 = (int32x4_t *)operator new(4 * v9);
        bzero(v10, 4 * v9);
        unsigned int v11 = a2 << v8;
        if (v8 < 3) {
          goto LABEL_8;
        }
        int32x4_t v12 = vdupq_n_s32(v11);
        int32x4_t v13 = vdupq_n_s32(v11 + 4);
        int32x4_t v14 = (int32x4_t)xmmword_20B5E90;
        unint64_t v15 = v10 + 1;
        v16.i64[0] = 0x800000008;
        v16.i64[1] = 0x800000008;
        uint64_t v17 = v9 & 0x55555550;
        do
        {
          v15[-1] = vaddq_s32(v12, v14);
          *unint64_t v15 = vaddq_s32(v13, v14);
          int32x4_t v14 = vaddq_s32(v14, v16);
          v15 += 2;
          v17 -= 8;
        }
        while (v17);
        if ((v9 & 0x55555550) == 0)
        {
LABEL_8:
          uint64_t v18 = v10;
          int v19 = v9;
          do
          {
            v18->i32[0] = v11;
            uint64_t v18 = (int32x4_t *)((char *)v18 + 4);
            ++v11;
            --v19;
          }
          while (v19);
        }
        uint64_t v20 = 0;
        while (1)
        {
          uint64_t v21 = sub_2A75D8(*(void *)a1, v10->u32[v20], 1);
          if (!v21) {
            goto LABEL_11;
          }
          unint64_t v22 = &v21[-*(int *)v21];
          if (*(unsigned __int16 *)v22 < 5u || !*((_WORD *)v22 + 2)) {
            goto LABEL_11;
          }
          sub_383CC(&v10->u32[v20], (uint64_t)v42);
          double v24 = sub_35C04((unsigned int *)v42, *(unsigned int **)(a1 + 8), *(unsigned __int8 *)(a1 + 40), v23) * 100.0;
          if (v24 >= 0.0)
          {
            double v25 = v24;
            if (v24 >= 4.50359963e15) {
              goto LABEL_23;
            }
            uint64_t v26 = (uint64_t)(v24 + v24) + 1;
          }
          else
          {
            double v25 = v24;
            if (v24 <= -4.50359963e15) {
              goto LABEL_23;
            }
            uint64_t v26 = (uint64_t)(v24 + v24);
            if (v26 >= 1) {
              --v26;
            }
          }
          double v25 = (double)(v26 >> 1);
LABEL_23:
          if (v25 >= 9.22337204e18)
          {
            uint64_t v43 = 0x7FFFFFFFFFFFFFFELL;
            if (*(void *)(a1 + 32) != 0x7FFFFFFFFFFFFFFFLL && *(void *)(a1 + 32) != 0x7FFFFFFFFFFFFFFELL) {
              goto LABEL_11;
            }
LABEL_36:
            sub_E7EE60(a1 + 56, &v10->i32[v20], &v43);
            goto LABEL_11;
          }
          if (v24 >= 0.0)
          {
            if (v24 >= 4.50359963e15) {
              goto LABEL_35;
            }
            uint64_t v27 = (uint64_t)(v24 + v24) + 1;
          }
          else
          {
            if (v24 <= -4.50359963e15) {
              goto LABEL_35;
            }
            uint64_t v27 = (uint64_t)(v24 + v24);
            if (v27 >= 1) {
              --v27;
            }
          }
          double v24 = (double)(v27 >> 1);
LABEL_35:
          uint64_t v43 = (uint64_t)v24;
          if ((uint64_t)v24 <= *(void *)(a1 + 32)) {
            goto LABEL_36;
          }
LABEL_11:
          if (v9 == ++v20)
          {
            operator delete(v10);
            break;
          }
        }
      }
    }
  }
  uint64_t v28 = sub_2A75D8(*(void *)a1, a2, 1);
  if (v28)
  {
    uint64_t v29 = &v28[-*(int *)v28];
    if (*(unsigned __int16 *)v29 >= 5u)
    {
      uint64_t v30 = *((unsigned __int16 *)v29 + 2);
      if (v30)
      {
        uint64_t v31 = &v28[v30 + *(unsigned int *)&v28[v30]];
        long long v32 = &v31[-*(int *)v31];
        if (*(unsigned __int16 *)v32 >= 5u)
        {
          uint64_t v33 = *((unsigned __int16 *)v32 + 2);
          if (v33)
          {
            int v34 = *(_DWORD *)&v31[v33 + *(unsigned int *)&v31[v33]];
            if (v34)
            {
              for (unsigned int i = 0; v34 != i; ++i)
              {
                unint64_t v41 = __PAIR64__(i, a2);
                if (sub_2A5F28(**(void **)(a1 + 16) + 3984, __PAIR64__(i, a2)))
                {
                  sub_71A860(*(void *)a1, v41, (uint64_t)v42);
                  uint64_t v38 = sub_E7F998(a1, (unsigned int *)v42, v37);
                  v42[0] = v38;
                  uint64_t v43 = v39;
                  uint64_t v40 = *(void *)(a1 + 48);
                  if (v40 > v39)
                  {
                    uint64_t v36 = a1 + 88;
                  }
                  else
                  {
                    if (v40 >= v38)
                    {
                      sub_E7F3DC(a1 + 120, &v41, v42, &v43);
                      continue;
                    }
                    uint64_t v36 = a1 + 152;
                  }
                  sub_E7F5D8(v36, &v41, v42, &v43);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_E7F3A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_E7F3B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_E7F3C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_E7F3DC(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = *(void **)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if ((unint64_t)v9 < v8)
  {
    uint64_t v10 = *a3;
    uint64_t v11 = *a4;
    *uint64_t v9 = *a2;
    v9[1] = v10;
    v9[2] = v11;
    int32x4_t v12 = v9 + 3;
    goto LABEL_14;
  }
  int32x4_t v13 = *(void **)a1;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(void *)a1) >> 3);
  unint64_t v15 = v14 + 1;
  if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v13) >> 3);
  if (2 * v16 > v15) {
    unint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x555555555555555) {
    unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v17 = v15;
  }
  if (v17 > 0xAAAAAAAAAAAAAAALL) {
    sub_188D718();
  }
  uint64_t v18 = 24 * v17;
  int v19 = (char *)operator new(24 * v17);
  uint64_t v21 = &v19[24 * v14];
  unint64_t v22 = &v19[v18];
  uint64_t v23 = *a3;
  uint64_t v24 = *a4;
  *(void *)uint64_t v21 = *a2;
  *((void *)v21 + 1) = v23;
  *((void *)v21 + 2) = v24;
  int32x4_t v12 = v21 + 24;
  if (v9 == v13)
  {
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v22;
    if (!v13) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  do
  {
    __n128 result = *(__n128 *)(v9 - 3);
    double v25 = v21 - 24;
    *((void *)v21 - 1) = *(v9 - 1);
    *(__n128 *)(v21 - 24) = result;
    v9 -= 3;
    v21 -= 24;
  }
  while (v9 != v13);
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = v22;
  if (v13) {
LABEL_13:
  }
    operator delete(v13);
LABEL_14:
  *(void *)(a1 + 8) = v12;
  uint64_t v26 = *(void **)a1;
  uint64_t v27 = (uint64_t)v12 - *(void *)a1;
  if (v27 >= 25)
  {
    unint64_t v28 = (v27 / 0x18uLL - 2) >> 1;
    int64_t v29 = *(v12 - 1);
    if (v26[3 * v28 + 2] > v29)
    {
      uint64_t v30 = (__n128 *)(v12 - 3);
      __n128 v33 = *(__n128 *)(v12 - 3);
      do
      {
        uint64_t v31 = v30;
        uint64_t v30 = (__n128 *)&v26[3 * v28];
        __n128 v32 = *v30;
        v31[1].n128_u64[0] = v30[1].n128_u64[0];
        *uint64_t v31 = v32;
        if (!v28) {
          break;
        }
        unint64_t v28 = (v28 - 1) >> 1;
      }
      while (v26[3 * v28 + 2] > v29);
      __n128 result = v33;
      *uint64_t v30 = v33;
      v30[1].n128_u64[0] = v29;
    }
  }
  return result;
}

void sub_E7F5D8(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v9 = *(void **)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  if ((unint64_t)v9 < v8)
  {
    uint64_t v10 = *a3;
    uint64_t v11 = *a4;
    *uint64_t v9 = *a2;
    v9[1] = v10;
    v9[2] = v11;
    int32x4_t v12 = v9 + 3;
    goto LABEL_14;
  }
  int32x4_t v13 = *(void **)a1;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(void *)a1) >> 3);
  unint64_t v15 = v14 + 1;
  if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v13) >> 3);
  if (2 * v16 > v15) {
    unint64_t v15 = 2 * v16;
  }
  if (v16 >= 0x555555555555555) {
    unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v17 = v15;
  }
  if (v17 > 0xAAAAAAAAAAAAAAALL) {
    sub_188D718();
  }
  uint64_t v18 = 24 * v17;
  int v19 = (char *)operator new(24 * v17);
  uint64_t v20 = &v19[24 * v14];
  uint64_t v21 = &v19[v18];
  uint64_t v22 = *a3;
  uint64_t v23 = *a4;
  *(void *)uint64_t v20 = *a2;
  *((void *)v20 + 1) = v22;
  *((void *)v20 + 2) = v23;
  int32x4_t v12 = v20 + 24;
  if (v9 == v13)
  {
    *(void *)a1 = v20;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v21;
    if (!v13) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  do
  {
    long long v24 = *(_OWORD *)(v9 - 3);
    double v25 = v20 - 24;
    *((void *)v20 - 1) = *(v9 - 1);
    *(_OWORD *)(v20 - 24) = v24;
    v9 -= 3;
    v20 -= 24;
  }
  while (v9 != v13);
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = v21;
  if (v13) {
LABEL_13:
  }
    operator delete(v13);
LABEL_14:
  *(void *)(a1 + 8) = v12;
  uint64_t v26 = *(void **)a1;
  uint64_t v27 = (uint64_t)v12 - *(void *)a1;
  if (v27 >= 25)
  {
    unint64_t v28 = (v27 / 0x18uLL - 2) >> 1;
    uint64_t v29 = *(v12 - 2);
    if (v26[3 * v28 + 1] > v29)
    {
      uint64_t v32 = *(v12 - 3);
      uint64_t v31 = v12 - 3;
      uint64_t v30 = v32;
      uint64_t v33 = v31[2];
      do
      {
        int v34 = v31;
        uint64_t v31 = &v26[3 * v28];
        long long v35 = *(_OWORD *)v31;
        v34[2] = v31[2];
        *(_OWORD *)int v34 = v35;
        if (!v28) {
          break;
        }
        unint64_t v28 = (v28 - 1) >> 1;
      }
      while (v26[3 * v28 + 1] > v29);
      *uint64_t v31 = v30;
      v31[1] = v29;
      v31[2] = v33;
    }
  }
}

uint64_t sub_E7F7C4(uint64_t a1, unint64_t *a2)
{
  sub_2A65AC(*(void *)a1, *a2, &__p);
  sub_E7C844((uint64_t *)&__p, *(unsigned int **)(a1 + 8), *(unsigned __int8 *)(a1 + 40), (uint64_t)v20);
  double v3 = v20[0] * 100.0;
  if (v20[0] * 100.0 >= 0.0)
  {
    double v4 = v20[0] * 100.0;
    if (v3 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v5 = (uint64_t)(v3 + v3) + 1;
  }
  else
  {
    double v4 = v20[0] * 100.0;
    if (v3 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v5 = (uint64_t)(v3 + v3);
    if (v5 >= 1) {
      --v5;
    }
  }
  double v4 = (double)(v5 >> 1);
LABEL_9:
  if (v4 < 9.22337204e18)
  {
    if (v3 >= 0.0)
    {
      if (v3 >= 4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v6 = (uint64_t)(v3 + v3) + 1;
    }
    else
    {
      if (v3 <= -4.50359963e15) {
        goto LABEL_20;
      }
      uint64_t v6 = (uint64_t)(v3 + v3);
      if (v6 >= 1) {
        --v6;
      }
    }
    double v3 = (double)(v6 >> 1);
LABEL_20:
    uint64_t v7 = (uint64_t)v3;
    unint64_t v8 = (void **)__p;
    if (!__p) {
      return v7;
    }
    goto LABEL_21;
  }
  uint64_t v7 = 0x7FFFFFFFFFFFFFFELL;
  unint64_t v8 = (void **)__p;
  if (!__p) {
    return v7;
  }
LABEL_21:
  uint64_t v9 = v22;
  uint64_t v10 = v8;
  if (v22 != v8)
  {
    uint64_t v11 = v22;
    do
    {
      unint64_t v14 = (char *)*(v11 - 3);
      v11 -= 3;
      int32x4_t v13 = v14;
      if (v14)
      {
        unint64_t v15 = (char *)*(v9 - 2);
        int32x4_t v12 = v13;
        if (v15 != v13)
        {
          unint64_t v16 = (char *)*(v9 - 2);
          do
          {
            uint64_t v18 = (void *)*((void *)v16 - 3);
            v16 -= 24;
            unint64_t v17 = v18;
            if (v18)
            {
              *((void *)v15 - 2) = v17;
              operator delete(v17);
            }
            unint64_t v15 = v16;
          }
          while (v16 != v13);
          int32x4_t v12 = *v11;
        }
        *(v9 - 2) = v13;
        operator delete(v12);
      }
      uint64_t v9 = v11;
    }
    while (v11 != v8);
    uint64_t v10 = __p;
  }
  uint64_t v22 = v8;
  operator delete(v10);
  return v7;
}

void sub_E7F984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_4CBF8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E7F998(uint64_t a1, unsigned int *a2, long double a3)
{
  double v5 = sub_35C04(a2, *(unsigned int **)(a1 + 8), *(unsigned __int8 *)(a1 + 40), a3);
  if (*(unsigned char *)(a1 + 40))
  {
    double v6 = v5 * 100.0;
    if (v5 * 100.0 < 0.0)
    {
LABEL_3:
      uint64_t v7 = (uint64_t)(v6 + v6);
      if (v7 >= 1) {
        --v7;
      }
      uint64_t v8 = v7 >> 1;
      if (v6 > -4.50359963e15) {
        double v9 = (double)v8;
      }
      else {
        double v9 = v6;
      }
      goto LABEL_11;
    }
  }
  else
  {
    sub_E7C6DC(a2, a2 + 3);
    double v6 = v5 * 100.0;
    if (v5 * 100.0 < 0.0) {
      goto LABEL_3;
    }
  }
  double v9 = v6;
  if (v6 < 4.50359963e15) {
    double v9 = (double)(((uint64_t)(v6 + v6) + 1) >> 1);
  }
LABEL_11:
  if (v9 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v6 >= 0.0)
  {
    if (v6 < 4.50359963e15)
    {
      uint64_t v10 = (uint64_t)(v6 + v6) + 1;
      return (uint64_t)(double)(v10 >> 1);
    }
  }
  else if (v6 > -4.50359963e15)
  {
    uint64_t v10 = (uint64_t)(v6 + v6);
    if (v10 >= 1) {
      --v10;
    }
    return (uint64_t)(double)(v10 >> 1);
  }
  return (uint64_t)v6;
}

void sub_E7FC24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  uint64_t v9 = *(unsigned int *)(a3 + 12);
  long double v10 = exp((double)((v9 >> 1) + (v8 >> 1)) * -6.28318531 / 4294967300.0 + 3.14159265);
  long double v11 = atan((v10 - 1.0 / v10) * 0.5);
  uint64_t v12 = *(unsigned int *)(a3 + 8);
  if (cos(v11 * 57.2957795 / 180.0 * 3.14159265)
     * 0.00932288077
     * (sqrt((double)((v8 - v9) * (v8 - v9)
                    + (*(unsigned int *)(a2 + 8) - v12) * ((unint64_t)*(unsigned int *)(a2 + 8) - v12)))
      / 100.0
      * 100.0) >= 1.0)
  {
    uint64_t v13 = *(unsigned int *)(a4 + 12);
    long double v14 = exp((double)((v9 >> 1) + (v13 >> 1)) * -6.28318531 / 4294967300.0 + 3.14159265);
    long double v15 = atan((v14 - 1.0 / v14) * 0.5);
    if (cos(v15 * 57.2957795 / 180.0 * 3.14159265)
       * 0.00932288077
       * (sqrt((double)((v9 - v13) * (v9 - v13)
                      + (v12 - *(unsigned int *)(a4 + 8)) * (v12 - (unint64_t)*(unsigned int *)(a4 + 8))))
        / 100.0
        * 100.0) >= 1.0)
    {
      unint64_t v16 = *(int8x8_t **)a1;
      unint64_t v17 = *(void *)a2;
      int v18 = sub_650D74(*(int8x8_t **)a1, *(void *)a2);
      int v19 = sub_650C98(v16, v17);
      if ((v18 - 3) < 2 || v19 == 2)
      {
        unint64_t v20 = *(void *)a3;
        int v21 = sub_650D74(v16, *(void *)a3);
        int v22 = sub_650C98(v16, v20);
        if ((v21 - 3) < 2 || v22 == 2)
        {
          unint64_t v23 = *(void *)a4;
          int v24 = sub_650D74(v16, *(void *)a4);
          int v25 = sub_650C98(v16, v23);
          if ((v24 - 3) < 2 || v25 == 2)
          {
            LODWORD(v26) = *(_DWORD *)(a2 + 8);
            LODWORD(v27) = *(_DWORD *)(a2 + 12);
            LODWORD(v28) = *(_DWORD *)(a3 + 8);
            LODWORD(v29) = *(_DWORD *)(a3 + 12);
            double v30 = (double)v28;
            double v31 = (double)v29;
            LODWORD(v28) = *(_DWORD *)(a4 + 8);
            LODWORD(v29) = *(_DWORD *)(a4 + 12);
            double v32 = ((double)v27 + v31) * 0.5;
            double v51 = ((double)v26 + v30) * 0.5;
            double v33 = (v30 + (double)v28) * 0.5 - v30;
            double v34 = (v31 + (double)v29) * 0.5 - v31;
            double v35 = atan2(v51 - v30, v32 - v31);
            double v36 = atan2(v33, v34);
            if (v35 >= v36) {
              double v37 = v36;
            }
            else {
              double v37 = v35;
            }
            if (v35 >= v36) {
              double v36 = v35;
            }
            double v38 = v36 - v37;
            if (6.28318531 - v38 < v38) {
              double v38 = 6.28318531 - v38;
            }
            double v39 = INFINITY;
            if (v38 != 0.0 && fabs(v38) >= 2.22044605e-16)
            {
              double v39 = 0.0;
              if (v38 != 3.14159265 && fabs(v38 + -3.14159265) >= 2.22044605e-16)
              {
                double v40 = sqrt((v30 - v51) * (v30 - v51) + (v31 - v32) * (v31 - v32));
                double v41 = sqrt(v33 * v33 + v34 * v34);
                if (v41 >= v40) {
                  double v42 = v40;
                }
                else {
                  double v42 = v41;
                }
                double v43 = v38 * 0.5;
                long double v44 = tan(v38 * 0.5);
                double v39 = v42
                    * v44
                    * ((1.57079633 - v43 + 1.57079633 - v43)
                     / ((1.57079633 - v43 + 1.57079633 - v43)
                      / 6.28318531
                      * (v42
                       * v44
                       * 6.28318531))
                     * ((1.57079633 - v43 + 1.57079633 - v43)
                      / ((1.57079633 - v43 + 1.57079633 - v43)
                       / 6.28318531
                       * (v42
                        * v44
                        * 6.28318531))));
              }
            }
            sub_66188(*(void *)(a1 + 8), v39);
            if (v45 > 0.0)
            {
              double v46 = 4294967300.0;
              if (v45 <= 4294967300.0) {
                double v46 = v45;
              }
              BOOL v47 = v45 < 0.0;
              double v48 = 0.0;
              if (!v47) {
                double v48 = v46;
              }
              sub_63BF60(*(void *)a1 + 12080, 10, (unsigned int *)(a3 + 8), vcvtad_u64_f64(v48), 5000, v39);
            }
            long long v49 = *(double **)(a1 + 24);
            double v50 = *v49;
            if (*v49 < v39) {
              double v50 = v39;
            }
            double *v49 = v50;
          }
        }
      }
    }
  }
}

double sub_E80050()
{
  byte_25FC1F7 = 1;
  word_25FC1E0 = 65;
  byte_25FC20F = 1;
  word_25FC1F8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25FC2A0 = 0u;
  *(_OWORD *)&qword_25FC2B0 = 0u;
  dword_25FC2C0 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25FC2A0, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25FC2A0, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25FC2A0, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25FC2A0, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25FC227 = 8;
  strcpy((char *)&qword_25FC210, "any_mode");
  byte_25FC23F = 7;
  strcpy((char *)&dword_25FC228, "cycling");
  byte_25FC257 = 7;
  strcpy((char *)&dword_25FC240, "driving");
  byte_25FC26F = 7;
  strcpy((char *)&dword_25FC258, "walking");
  qword_25FC278 = 0;
  qword_25FC280 = 0;
  qword_25FC270 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25FC270 = (uint64_t)v0;
  qword_25FC278 = (uint64_t)(v0 + 9);
  qword_25FC280 = (uint64_t)(v0 + 9);
  qword_25FC288 = 0;
  qword_25FC290 = 0;
  unk_25FC298 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25FC290 = (uint64_t)(v1 + 9);
  unk_25FC298 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25FC288 = (uint64_t)v1;
  return result;
}

void sub_E80318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25FC2B0) {
    sub_20B0FA0((void **)qword_25FC2B0);
  }
  double v37 = (void *)xmmword_25FC2A0;
  *(void *)&xmmword_25FC2A0 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_E803B8(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = sub_3750CC(a2);
  *(void *)(a1 + 8) = sub_375238(a2);
  uint64_t v30 = 0;
  double v31 = (char *)operator new(0x20uLL);
  long long v32 = xmmword_20B5EB0;
  strcpy(v31, "RouteLineGeometryGenerator");
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  double v6 = sub_374CDC((uint64_t)a2, (uint64_t)&v31, (uint64_t *)&v28);
  char v25 = 8;
  uint64_t v23 = 0;
  strcpy((char *)v24, "Guidance");
  int v21 = 0;
  int v22 = 0;
  char v7 = sub_374CDC((uint64_t)a2, (uint64_t)v24, (uint64_t *)&v21);
  sub_3CB370(v7, 0, 0, v26);
  float64x2_t __p = operator new(0x28uLL);
  long long v20 = xmmword_20B9960;
  strcpy((char *)__p, "activate_springfield_preflight_polygons");
  BOOL v8 = sub_29D62C(v26, (uint64_t)&__p);
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 1500;
  *(_WORD *)(a1 + 48) = 50;
  *(_OWORD *)(a1 + 56) = xmmword_20F0E90;
  *(unsigned char *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 6;
  *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_WORD *)(a1 + 136) = -1;
  *(unsigned char *)(a1 + 138) = 1;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = xmmword_20F0EA0;
  *(_OWORD *)(a1 + 176) = xmmword_20F0EB0;
  *(void *)(a1 + 192) = 0x3FC999999999999ALL;
  *(unsigned char *)(a1 + 200) = v8;
  *(unsigned char *)(a1 + 201) = 1;
  *(int64x2_t *)(a1 + 208) = vdupq_n_s64(0x3FF3333333333333uLL);
  *(void *)(a1 + 224) = 0x3FE3333333333333;
  *(unsigned char *)(a1 + 232) = 1;
  *(_OWORD *)(a1 + 240) = xmmword_20F0EC0;
  *(_OWORD *)(a1 + 256) = xmmword_20F0ED0;
  *(unsigned char *)(a1 + 272) = 1;
  *(void *)(a1 + 280) = 10000;
  sub_E8A4A0(a1 + 16, v6);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  uint64_t v9 = v27;
  if (v27)
  {
    do
    {
      int v14 = *(char **)v9;
      sub_57AC8((uint64_t *)v9 + 5);
      if (v9[39] < 0) {
        operator delete(*((void **)v9 + 2));
      }
      operator delete(v9);
      uint64_t v9 = v14;
    }
    while (v14);
  }
  char v10 = v26[0];
  v26[0] = 0;
  if (v10) {
    operator delete(v10);
  }
  int v11 = (void **)v21;
  if (v21)
  {
    uint64_t v12 = v22;
    char v13 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      char v13 = v21;
    }
    int v22 = v11;
    operator delete(v13);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  uint64_t v15 = (uint64_t)v28;
  if (v28)
  {
    uint64_t v16 = v29;
    unint64_t v17 = v28;
    if ((void *)v29 != v28)
    {
      do
      {
        if (*(char *)(v16 - 1) < 0) {
          operator delete(*(void **)(v16 - 24));
        }
        v16 -= 24;
      }
      while (v16 != v15);
      unint64_t v17 = v28;
    }
    uint64_t v29 = v15;
    operator delete(v17);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v31);
  }
  *(void *)(a1 + 288) = a3;
  return a1;
}

void sub_E806BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  sub_5450C((uint64_t)&a24);
  sub_1A668(&a15);
  if (a23 < 0)
  {
    operator delete(__p);
    sub_1A668((void **)(v24 - 80));
    if ((*(char *)(v24 - 33) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668((void **)(v24 - 80));
    if ((*(char *)(v24 - 33) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*(void **)(v24 - 56));
  _Unwind_Resume(a1);
}

void sub_E80754(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_E80E14(a1, a2, &v54);
  double v40 = a3;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v45);
    sub_188FC78(v45, (uint64_t)"Checkpoints: ", 13);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 2u);
    if (v44 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v52[1]) < 0) {
      operator delete(v51);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  double v6 = v54;
  char v7 = v55;
  if (v54 != v55)
  {
    do
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)v45);
        sub_188FC78(v45, (uint64_t)"For segment: ", 13);
        BOOL v8 = (void *)std::ostream::operator<<();
        uint64_t v9 = sub_188FC78(v8, (uint64_t)" road", 5);
        uint64_t v10 = sub_46C8EC(a2, *((void *)v6 + 1));
        int v11 = sub_2DD928(v9, *(void *)(v10 + 32));
        uint64_t v12 = sub_188FC78(v11, (uint64_t)" ", 1);
        char v13 = sub_51960(v12, *(void *)v6);
        sub_188FC78(v13, (uint64_t)".", 1);
        std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
        int v14 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v44 < 0) {
          operator delete(__p[0]);
        }
        *(void *)&v45[0] = v42;
        *(void *)((char *)v45 + *(void *)(v42 - 24)) = v41;
        if (SHIBYTE(v52[1]) < 0) {
          operator delete(v51);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      ++v6;
    }
    while (v6 != v7);
  }
  sub_E80F54(a1, a2, &v54, (uint64_t)v40);
  uint64_t v15 = *v40;
  uint64_t v16 = v40[1];
  if (*v40 != v16)
  {
    do
    {
      sub_E81364(a1, v15);
      v15 += 104;
    }
    while (v15 != v16);
  }
  unint64_t v17 = (long long **)v40;
  sub_E81764(a1, (uint64_t)a2, v40);
  int v18 = sub_E945EC(*v17, v17[1]);
  sub_E944E0((uint64_t)v17, (uint64_t)v18, v17[1]);
  if (*v17 == v17[1] && sub_46C760(a2) >= 2)
  {
    uint64_t v19 = sub_46C760(a2) - 1;
    long long v20 = (void *)sub_46C8EC(a2, v19);
    int v21 = (unsigned __int16 *)(*v20 - *(int *)*v20);
    if (*v21 >= 9u && (uint64_t v22 = v21[4]) != 0) {
      uint64_t v23 = *(unsigned int *)(*v20 + v22);
    }
    else {
      uint64_t v23 = 0;
    }
    sub_E81D40(a1, a2, 0, 0, v19, v23, 1, (uint64_t)v45);
    unint64_t v24 = v40[1];
    if (v24 >= v40[2])
    {
      long long v32 = sub_E92854((void **)v40, (uint64_t)v45);
      double v33 = (char *)v52[0];
      v40[1] = (uint64_t)v32;
      if (v33)
      {
        double v34 = (char *)v52[1];
        double v35 = v33;
        if (v52[1] != v33)
        {
          do
          {
            double v36 = (void *)*((void *)v34 - 8);
            if (v36)
            {
              *((void *)v34 - 7) = v36;
              operator delete(v36);
            }
            v34 -= 96;
          }
          while (v34 != v33);
          double v35 = (char *)v52[0];
        }
        v52[1] = v33;
        operator delete(v35);
      }
    }
    else
    {
      long long v25 = v45[0];
      long long v26 = v45[1];
      *(_DWORD *)(v24 + 32) = v46;
      *(_OWORD *)unint64_t v24 = v25;
      *(_OWORD *)(v24 + 16) = v26;
      unint64_t v27 = v47;
      BOOL v47 = 0;
      *(void *)(v24 + 40) = v27;
      *(void *)(v24 + 48) = v48;
      uint64_t v48 = 0;
      unint64_t v28 = v49;
      *(void *)(v24 + 56) = v49;
      uint64_t v29 = v50;
      *(void *)(v24 + 64) = v50;
      *(_DWORD *)(v24 + 72) = v51;
      if (v29)
      {
        unint64_t v30 = v28[1];
        unint64_t v31 = *(void *)(v24 + 48);
        if ((v31 & (v31 - 1)) != 0)
        {
          if (v30 >= v31) {
            v30 %= v31;
          }
        }
        else
        {
          v30 &= v31 - 1;
        }
        v27[v30] = v24 + 56;
        long long v49 = 0;
        uint64_t v50 = 0;
      }
      *(void *)(v24 + 80) = 0;
      *(void *)(v24 + 88) = 0;
      *(void *)(v24 + 96) = 0;
      *(_OWORD *)(v24 + 80) = *(_OWORD *)v52;
      *(void *)(v24 + 96) = v53;
      v52[0] = 0;
      v52[1] = 0;
      uint64_t v53 = 0;
      v40[1] = v24 + 104;
    }
    double v37 = v49;
    if (v49)
    {
      do
      {
        double v38 = (void *)*v37;
        operator delete(v37);
        double v37 = v38;
      }
      while (v38);
    }
    double v39 = v47;
    BOOL v47 = 0;
    if (v39) {
      operator delete(v39);
    }
  }
  if (v54)
  {
    long long v55 = v54;
    operator delete(v54);
  }
}

void sub_E80D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  sub_E832B4(&a19);
  sub_E83350(a10);
  int v21 = *(void **)(v19 - 112);
  if (v21)
  {
    *(void *)(v19 - 104) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_E80E14@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t result = sub_46C760(a2);
  if (!result)
  {
    LODWORD(v14) = 0;
    goto LABEL_16;
  }
  unint64_t v7 = result;
  for (uint64_t i = 0; i != v7; ++i)
  {
    uint64_t v17 = i;
    unint64_t result = sub_46C8EC(a2, i);
    uint64_t v9 = *(int **)(result + 8);
    uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
    if (*v10 >= 0x11u)
    {
      uint64_t v11 = v10[8];
      if (v11)
      {
        __int16 v12 = *(_WORD *)((char *)v9 + v11);
        if (!*(unsigned char *)(a1 + 200) || (v12 & 0x40) != 0)
        {
          if ((v12 & 0x40) == 0) {
            continue;
          }
        }
        else if ((v12 & 0x80) == 0)
        {
          continue;
        }
        uint64_t v13 = *(void *)(a1 + 8);
        uint64_t v15 = *(void *)(result + 32);
        unint64_t result = sub_2DFE6C(v13, (unsigned int *)&v15);
        unint64_t v16 = result;
        if (result && result < 0xFFFFFFFF00000000) {
          unint64_t result = (unint64_t)sub_29AC28((uint64_t)a3, &v16, &v17);
        }
      }
    }
  }
  uint64_t v14 = (a3[1] - *a3) >> 4;
LABEL_16:
  *(_DWORD *)(*(void *)(a1 + 288) + 24) += v14;
  return result;
}

void sub_E80F30(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_E80F54(uint64_t a1@<X0>, void *a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  unint64_t v8 = sub_46C760(a2);
  if (*a3 == a3[1])
  {
    uint64_t v15 = v8 - 1;
    unint64_t v16 = (void *)sub_46C8EC(a2, v8 - 1);
    uint64_t v17 = (unsigned __int16 *)(*v16 - *(int *)*v16);
    if (*v17 >= 9u && (uint64_t v18 = v17[4]) != 0) {
      uint64_t v19 = *(unsigned int *)(*v16 + v18);
    }
    else {
      uint64_t v19 = 0;
    }
    sub_E81D40(a1, a2, 0, 0, v15, v19, 0, (uint64_t)&v49);
    unint64_t v20 = *(void *)(a4 + 8);
    if (v20 >= *(void *)(a4 + 16))
    {
      double v37 = sub_E92854((void **)a4, (uint64_t)&v49);
      double v38 = (char *)__p[0];
      *(void *)(a4 + 8) = v37;
      if (v38)
      {
        double v39 = (char *)__p[1];
        double v40 = v38;
        if (__p[1] != v38)
        {
          do
          {
            uint64_t v41 = (void *)*((void *)v39 - 8);
            if (v41)
            {
              *((void *)v39 - 7) = v41;
              operator delete(v41);
            }
            v39 -= 96;
          }
          while (v39 != v38);
          double v40 = (char *)__p[0];
        }
        __p[1] = v38;
        operator delete(v40);
      }
    }
    else
    {
      long long v21 = v49;
      long long v22 = v50;
      *(_DWORD *)(v20 + 32) = v51;
      *(_OWORD *)unint64_t v20 = v21;
      *(_OWORD *)(v20 + 16) = v22;
      uint64_t v23 = v52;
      uint64_t v52 = 0;
      *(void *)(v20 + 40) = v23;
      *(void *)(v20 + 48) = v53;
      uint64_t v53 = 0;
      unint64_t v24 = v54;
      *(void *)(v20 + 56) = v54;
      uint64_t v25 = v55;
      *(void *)(v20 + 64) = v55;
      *(_DWORD *)(v20 + 72) = v56;
      if (v25)
      {
        unint64_t v26 = v24[1];
        unint64_t v27 = *(void *)(v20 + 48);
        if ((v27 & (v27 - 1)) != 0)
        {
          if (v26 >= v27) {
            v26 %= v27;
          }
        }
        else
        {
          v26 &= v27 - 1;
        }
        v23[v26] = v20 + 56;
        uint64_t v54 = 0;
        uint64_t v55 = 0;
      }
      *(void *)(v20 + 80) = 0;
      *(void *)(v20 + 88) = 0;
      *(void *)(v20 + 96) = 0;
      *(_OWORD *)(v20 + 80) = *(_OWORD *)__p;
      *(void *)(v20 + 96) = v58;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v58 = 0;
      *(void *)(a4 + 8) = v20 + 104;
    }
    uint64_t v42 = v54;
    if (v54)
    {
      do
      {
        double v43 = (void *)*v42;
        operator delete(v42);
        uint64_t v42 = v43;
      }
      while (v43);
    }
    char v44 = v52;
    uint64_t v52 = 0;
    if (v44) {
      operator delete(v44);
    }
  }
  else
  {
    sub_E8338C(a1, a2, (uint64_t)a3, a4);
    uint64_t v9 = *a3;
    uint64_t v10 = (char *)a3[1] - (char *)*a3;
    uint64_t v11 = v10 >> 4;
    uint64_t v12 = (v10 >> 4) - 1;
    if (v10 >> 4 != 1)
    {
      if (v10 == 32)
      {
        uint64_t v13 = 0;
        unint64_t v14 = 0xFFFFFFFF00000000;
      }
      else
      {
        unint64_t v14 = *((void *)v9 + 4);
        uint64_t v13 = *((void *)v9 + 5);
      }
      long long v45 = v9[1];
      long long v47 = *v9;
      unint64_t v28 = operator new(0x40uLL);
      *((void *)&v49 + 1) = v28 + 8;
      *(void *)&long long v50 = v28 + 8;
      *unint64_t v28 = 0xFFFFFFFF00000000;
      v28[1] = 0;
      *((_OWORD *)v28 + 1) = v47;
      *((_OWORD *)v28 + 2) = v45;
      v28[6] = v14;
      v28[7] = v13;
      *(void *)&long long v49 = v28;
      sub_E86D24(a1, a2, (int **)&v49, a4);
      operator delete(v28);
      if (v12 != 1)
      {
        uint64_t v29 = 0;
        uint64_t v30 = 2;
        do
        {
          unint64_t v31 = &(*a3)[v29];
          if (v30 - 1 >= (unint64_t)(a3[1] - *a3 - 2))
          {
            uint64_t v33 = 0;
            unint64_t v32 = 0xFFFFFFFF00000000;
          }
          else
          {
            unint64_t v32 = *((void *)v31 + 6);
            uint64_t v33 = *((void *)v31 + 7);
          }
          uint64_t v34 = *(void *)v31;
          uint64_t v35 = *((void *)v31 + 1);
          long long v46 = v31[2];
          long long v48 = v31[1];
          double v36 = operator new(0x40uLL);
          *((void *)&v49 + 1) = v36 + 8;
          *(void *)&long long v50 = v36 + 8;
          *double v36 = v34;
          v36[1] = v35;
          *((_OWORD *)v36 + 1) = v48;
          *((_OWORD *)v36 + 2) = v46;
          v36[6] = v32;
          v36[7] = v33;
          *(void *)&long long v49 = v36;
          sub_E86D24(a1, a2, (int **)&v49, a4);
          operator delete(v36);
          ++v30;
          ++v29;
        }
        while (v11 != v30);
      }
    }
    sub_E8602C(a1, a2, a3, a4);
  }
}

void sub_E812D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_E832B4((uint64_t *)va);
  sub_E83350(v5);
  _Unwind_Resume(a1);
}

void sub_E812F4(_Unwind_Exception *a1)
{
  operator delete(v2);
  sub_E83350(v1);
  _Unwind_Resume(a1);
}

void sub_E81350(_Unwind_Exception *a1)
{
  sub_E83350(v1);
  _Unwind_Resume(a1);
}

void sub_E81364(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 80))
  {
    if (sub_638A18(a2) != 1)
    {
      char v4 = (uint64_t **)sub_68EA4(a2);
      int v5 = *v4;
      double v6 = v4[1];
      if (*v4 != v6)
      {
        double v7 = 0.25;
        double v8 = 1.0;
        float64x2_t v37 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
        float64x2_t v38 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
        float64x2_t v35 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
        float64x2_t v36 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
        while (1)
        {
          double v9 = fmin((double)*(uint64_t *)(a1 + 80) / 100.0 / ((double)v5[9] / 100.0), v7);
          sub_31854(v5 + 4, 0, &v40, v9, v8 - v9);
          uint64_t v10 = (void *)v5[4];
          if (v10)
          {
            v5[5] = (uint64_t)v10;
            operator delete(v10);
          }
          uint64_t v11 = (unsigned int *)v40;
          v5[4] = v40;
          uint64_t v12 = (unsigned int *)v41;
          *(_OWORD *)(v5 + 5) = v41;
          uint64_t v13 = v12;
          double v14 = 0.0;
          if (v11 == v13) {
            goto LABEL_20;
          }
          uint64_t v15 = v11 + 3;
          if (v11 + 3 == v13) {
            goto LABEL_20;
          }
          double v16 = 0.0;
          do
          {
            LODWORD(v14) = *(v15 - 2);
            long double v17 = exp(3.14159265 - (double)*(unint64_t *)&v14 * 6.28318531 / 4294967300.0);
            *(double *)&unint64_t v18 = atan((v17 - 1.0 / v17) * 0.5) * 57.2957795;
            long double v19 = *(double *)&v18 * 0.0174532925;
            unsigned int v20 = *(v15 - 3);
            LODWORD(v18) = v15[1];
            long double v21 = exp(3.14159265 - (double)v18 * 6.28318531 / 4294967300.0);
            long double v22 = atan((v21 - 1.0 / v21) * 0.5) * 57.2957795 * 0.0174532925;
            v23.i64[0] = v20;
            v23.i64[1] = *v15;
            int64x2_t v24 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v23), v38), v36), v37), v35);
            double v39 = vsubq_f64((float64x2_t)v24, (float64x2_t)vdupq_laneq_s64(v24, 1)).f64[0];
            long double v25 = sin((v19 - v22) * 0.5);
            long double v26 = v25 * v25;
            double v27 = cos(v19);
            long double v28 = v27 * cos(v22);
            long double v29 = sin(0.5 * v39);
            double v8 = 1.0;
            long double v30 = atan2(sqrt(v26 + v28 * (v29 * v29)), sqrt(1.0 - (v26 + v28 * (v29 * v29))));
            double v14 = (v30 + v30) * 6372797.56;
            double v16 = v16 + v14;
            v15 += 3;
          }
          while (v15 != v13);
          double v14 = v16 * 100.0;
          if (v16 * 100.0 >= 0.0) {
            break;
          }
          if (v14 <= -4.50359963e15)
          {
            char v33 = 1;
            double v7 = 0.25;
            if (v14 < 9.22337204e18) {
              goto LABEL_25;
            }
LABEL_5:
            v5[9] = 0x7FFFFFFFFFFFFFFELL;
            v5 += 12;
            if (v5 == v6) {
              return;
            }
          }
          else
          {
            uint64_t v31 = (uint64_t)(v14 + v14);
            if (v31 >= 1) {
              --v31;
            }
            double v32 = (double)(v31 >> 1);
            char v33 = 1;
            double v7 = 0.25;
            if (v32 >= 9.22337204e18) {
              goto LABEL_5;
            }
LABEL_25:
            if (v33)
            {
              if (v14 > -4.50359963e15)
              {
                uint64_t v34 = (uint64_t)(v14 + v14);
                if (v34 >= 1) {
                  --v34;
                }
                goto LABEL_32;
              }
            }
            else if (v14 < 4.50359963e15)
            {
              uint64_t v34 = (uint64_t)(v14 + v14) + 1;
LABEL_32:
              double v14 = (double)(v34 >> 1);
            }
            v5[9] = (uint64_t)v14;
            v5 += 12;
            if (v5 == v6) {
              return;
            }
          }
        }
        if (v14 >= 4.50359963e15)
        {
          char v33 = 0;
          double v7 = 0.25;
          if (v14 < 9.22337204e18) {
            goto LABEL_25;
          }
          goto LABEL_5;
        }
        double v7 = 0.25;
LABEL_20:
        char v33 = 0;
        if ((double)(((uint64_t)(v14 + v14) + 1) >> 1) < 9.22337204e18) {
          goto LABEL_25;
        }
        goto LABEL_5;
      }
    }
  }
}

void sub_E81764(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  uint64_t v6 = v5 - *a3;
  if (v6 == 104)
  {
    sub_E9AD3C(v4, 1uLL);
    return;
  }
  uint64_t v90 = 0;
  uint64_t v91 = a1;
  uint64_t v8 = 0x4EC4EC4EC4EC4EC5 * (v6 >> 3);
  float64x2_t __p = 0;
  long long v89 = 0;
  if (v5 != v4)
  {
    sub_4467FC((uint64_t)&__p, 0x4EC4EC4EC4EC4EC5 * (v6 >> 3));
    uint64_t v4 = *a3;
    uint64_t v5 = a3[1];
    uint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a3) >> 3);
  }
  if (v5 != v4)
  {
    uint64_t v9 = 0;
    uint64_t v86 = a1;
    uint64_t v85 = v8;
    while (1)
    {
      uint64_t v10 = (char *)__p;
      uint64_t v11 = (void *)sub_68EA4(*a3 + 104 * v9);
      uint64_t v12 = &v10[24 * v9];
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11[1] - *v11) >> 5);
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v12 + 1) - *(void *)v12) >> 3);
      if (v13 <= v14)
      {
        if (v13 < v14) {
          *((void *)v12 + 1) = *(void *)v12 + 40 * v13;
        }
      }
      else
      {
        sub_E94AFC((void **)v12, v13 - v14);
      }
      if (!v9) {
        break;
      }
      uint64_t v15 = (void *)sub_68EA4(*a3 + 104 * v9);
      uint64_t v16 = v15[1] - *v15;
      if (v16)
      {
        uint64_t v17 = 0;
        unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 5);
        uint64_t v18 = v9 - 1;
        do
        {
          long double v19 = (uint64_t *)sub_68EA4(*a3 + 104 * v9);
          uint64_t v20 = *v19;
          unsigned int v21 = *(unsigned __int16 *)(*v19 + 96 * v17 + 56);
          unsigned int v22 = *(unsigned __int16 *)(a1 + 48);
          double v23 = 0.0;
          double v24 = 0.0;
          BOOL v25 = v22 >= v21;
          unsigned __int16 v26 = v22 - v21;
          if (v25)
          {
            double v24 = *(double *)(a1 + 56) * (double)v26;
            if (*(unsigned char *)(v20 + 96 * v17 + 89))
            {
LABEL_20:
              double v27 = 0.0;
              if (!*(unsigned char *)(v20 + 96 * v17 + 88)) {
                goto LABEL_33;
              }
              goto LABEL_21;
            }
          }
          else if (*(unsigned char *)(v20 + 96 * v17 + 89))
          {
            goto LABEL_20;
          }
          double v23 = *(double *)(a1 + 64);
          double v27 = 0.0;
          if (!*(unsigned char *)(v20 + 96 * v17 + 88)) {
LABEL_33:
          }
            double v27 = *(double *)(a1 + 64);
LABEL_21:
          long double v28 = (void *)sub_68EA4(*a3 + 104 * v18);
          uint64_t v29 = v28[1] - *v28;
          if (v29)
          {
            uint64_t v30 = 0;
            uint64_t v31 = 0;
            uint64_t v32 = 0;
            double v33 = v24 + v23 + v27;
            uint64_t v34 = v29 / 96;
            do
            {
              uint64_t v35 = *(void *)sub_68EA4(*a3 + 104 * v18);
              float64x2_t v36 = (void *)sub_68EA4(*a3 + 104 * v9);
              double v41 = sub_E891F4(&v91, v35 + v31, *v36 + 96 * v17, v37, v38, v39, v40);
              uint64_t v42 = *((void *)__p + 3 * v18) + v30;
              double v43 = v33 + v41 + *(double *)(v42 + 32);
              if (*(double *)(v42 + 24) >= v41) {
                double v41 = *(double *)(v42 + 24);
              }
              uint64_t v44 = *((void *)__p + 3 * v9);
              uint64_t v45 = v44 + 40 * v17;
              double v46 = *(double *)(v45 + 32);
              BOOL v47 = v43 < v46;
              if (v43 == v46) {
                BOOL v47 = v41 < *(double *)(v44 + 40 * v17 + 24);
              }
              if (v47)
              {
                *(void *)uint64_t v45 = v17;
                *(void *)(v45 + 8) = v9;
                *(void *)(v45 + 16) = v32;
                *(double *)(v45 + 24) = v41;
                *(double *)(v45 + 32) = v43;
              }
              ++v32;
              v31 += 96;
              v30 += 40;
            }
            while (v34 != v32);
          }
          ++v17;
          a1 = v86;
        }
        while (v17 != v87);
      }
LABEL_9:
      if (++v9 == v85) {
        goto LABEL_44;
      }
    }
    uint64_t v48 = *((void *)__p + 1);
    if (v48 == *(void *)__p) {
      goto LABEL_9;
    }
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = (v48 - *(void *)__p) / 40;
    while (1)
    {
      uint64_t v56 = *(void *)sub_68EA4(*a3);
      uint64_t v57 = v56 + v49;
      unsigned int v58 = *(unsigned __int16 *)(v56 + v49 + 56);
      unsigned int v59 = *(unsigned __int16 *)(a1 + 48);
      double v53 = 0.0;
      double v60 = 0.0;
      BOOL v25 = v59 >= v58;
      unsigned __int16 v61 = v59 - v58;
      if (v25)
      {
        double v60 = *(double *)(a1 + 56) * (double)v61;
        if (!*(unsigned char *)(v57 + 89))
        {
LABEL_36:
          double v53 = *(double *)(a1 + 64);
          double v54 = 0.0;
          if (!*(unsigned char *)(v56 + v49 + 88)) {
            goto LABEL_43;
          }
          goto LABEL_37;
        }
      }
      else if (!*(unsigned char *)(v57 + 89))
      {
        goto LABEL_36;
      }
      double v54 = 0.0;
      if (!*(unsigned char *)(v56 + v49 + 88)) {
LABEL_43:
      }
        double v54 = *(double *)(a1 + 64);
LABEL_37:
      uint64_t v55 = *(void *)__p + v50;
      *(void *)uint64_t v55 = v51;
      *(_OWORD *)(v55 + 8) = xmmword_20B93F0;
      *(void *)(v55 + 24) = 0;
      *(double *)(v55 + 32) = v60 + v53 + v54;
      ++v51;
      v50 += 40;
      v49 += 96;
      if (v52 == v51) {
        goto LABEL_9;
      }
    }
  }
LABEL_44:
  uint64_t v62 = *((void *)v89 - 3);
  uint64_t v63 = *((void *)v89 - 2);
  uint64_t v64 = v62 + 40;
  if (v62 != v63 && v64 != v63)
  {
    do
    {
      double v66 = *(double *)(v64 + 32);
      double v67 = *(double *)(v62 + 32);
      BOOL v68 = *(double *)(v64 + 24) < *(double *)(v62 + 24);
      if (v66 != v67) {
        BOOL v68 = v66 < v67;
      }
      if (v68) {
        uint64_t v62 = v64;
      }
      v64 += 40;
    }
    while (v64 != v63);
  }
  while (1)
  {
    uint64_t v70 = *(void *)v62;
    uint64_t v69 = *(void *)(v62 + 8);
    uint64_t v71 = *(void *)(v62 + 16);
    uint64_t v72 = *a3 + 104 * v69;
    uint64_t v73 = *(void *)sub_68EA4(v72);
    long long v74 = (_OWORD *)(v73 + 96 * v70);
    long long v75 = v74[1];
    *(_OWORD *)uint64_t v73 = *v74;
    *(_OWORD *)(v73 + 16) = v75;
    if (v70) {
      sub_31AF54((void *)(v73 + 32), *(char **)(v73 + 96 * v70 + 32), *(char **)(v73 + 96 * v70 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v73 + 96 * v70 + 40) - *(void *)(v73 + 96 * v70 + 32)) >> 2));
    }
    uint64_t v76 = v73 + 96 * v70;
    long long v77 = *(_OWORD *)(v76 + 56);
    long long v78 = *(_OWORD *)(v76 + 72);
    *(_DWORD *)(v73 + 87) = *(_DWORD *)(v76 + 87);
    *(_OWORD *)(v73 + 72) = v78;
    *(_OWORD *)(v73 + 56) = v77;
    sub_E9AD3C(v72, 1uLL);
    if (!v69) {
      break;
    }
    uint64_t v62 = *((void *)__p + 3 * v69 - 3) + 40 * v71;
  }
  int64_t v79 = (char *)__p;
  if (__p)
  {
    double v80 = v89;
    long long v81 = __p;
    if (v89 != __p)
    {
      uint64_t v82 = v89;
      do
      {
        uint64_t v84 = (void *)*((void *)v82 - 3);
        v82 -= 24;
        long double v83 = v84;
        if (v84)
        {
          *((void *)v80 - 2) = v83;
          operator delete(v83);
        }
        double v80 = v82;
      }
      while (v82 != v79);
      long long v81 = __p;
    }
    long long v89 = v79;
    operator delete(v81);
  }
}

void sub_E81D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, void *a16)
{
  if (a15) {
    sub_20B0FE4(&a16, a15, (void **)&a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_E81D40(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v227);
    sub_188FC78(&v227, (uint64_t)"Using center line between ", 26);
    unint64_t v14 = (void *)std::ostream::operator<<();
    sub_188FC78(v14, (uint64_t)" and ", 5);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 2u);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v233) < 0) {
      operator delete(v232);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(void *)&long long v227 = a3;
  *((void *)&v227 + 1) = a4;
  *(void *)&long long v228 = a5;
  *((void *)&v228 + 1) = a6;
  long long v230 = 0u;
  long long v231 = 0u;
  int v229 = 3;
  LODWORD(v232) = 1065353216;
  uint64_t v234 = 0;
  long long v233 = 0uLL;
  sub_63841C((uint64_t)&v227, 1);
  uint64_t v15 = sub_68EA4((uint64_t)&v227);
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 + 8);
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *(void *)v15) >> 5);
  if (v17 == *(void *)v15)
  {
    sub_E94CBC((void **)v15, 1 - v18);
  }
  else if (v18 >= 2)
  {
    uint64_t v19 = *(void *)v15 + 96;
    while (v17 != v19)
    {
      uint64_t v20 = *(void **)(v17 - 64);
      if (v20)
      {
        *(void *)(v17 - 56) = v20;
        operator delete(v20);
      }
      v17 -= 96;
    }
    *(void *)(v16 + 8) = v19;
  }
  unsigned int v21 = *(void **)sub_68EA4((uint64_t)&v227);
  unsigned int v22 = v21 + 4;
  if (a3 == a5)
  {
    double v23 = (int **)sub_46C8EC(a2, a3);
    sub_2954EC(*(void *)a1, (uint64_t)v23[4], (uint64_t)__p);
    uint64_t v24 = sub_52058((uint64_t)&v227);
    BOOL v25 = (unsigned __int16 *)((char *)*v23 - **v23);
    if (*v25 >= 9u && (uint64_t v26 = v25[4]) != 0) {
      uint64_t v27 = *(unsigned int *)((char *)*v23 + v26);
    }
    else {
      uint64_t v27 = 0;
    }
    uint64_t v179 = sub_3C80F8((uint64_t)&v227);
    long double v180 = (unsigned __int16 *)((char *)*v23 - **v23);
    double v181 = 0.0;
    if (*v180 >= 9u)
    {
      uint64_t v182 = v180[4];
      if (v182)
      {
        LODWORD(v181) = *(int *)((char *)*v23 + v182);
        double v181 = (double)*(unint64_t *)&v181;
      }
    }
    sub_E8979C((uint64_t)__p, 0, v220, (double)v24 / (double)v27, (double)v179 / v181);
    double v183 = (void *)*v22;
    if (*v22)
    {
      v21[5] = v183;
      operator delete(v183);
      uint64_t *v22 = 0;
      v21[5] = 0;
      v21[6] = 0;
    }
    *((_OWORD *)v21 + 2) = *(_OWORD *)v220;
    v21[6] = v221[0];
    ++*(_DWORD *)(*(void *)(a1 + 288) + 12);
    long long v184 = v228;
    *(_OWORD *)a8 = v227;
    *(_OWORD *)(a8 + 16) = v184;
    *(_DWORD *)(a8 + 32) = v229;
    long long v185 = v230;
    *(_OWORD *)(a8 + 40) = v230;
    long long v230 = 0uLL;
    long long v186 = v231;
    *(_OWORD *)(a8 + 56) = v231;
    *(_DWORD *)(a8 + 72) = v232;
    if (*((void *)&v186 + 1))
    {
      unint64_t v187 = *(void *)(v186 + 8);
      if ((*((void *)&v185 + 1) & (*((void *)&v185 + 1) - 1)) != 0)
      {
        if (v187 >= *((void *)&v185 + 1)) {
          v187 %= *((void *)&v185 + 1);
        }
      }
      else
      {
        v187 &= *((void *)&v185 + 1) - 1;
      }
      *(void *)(v185 + 8 * v187) = a8 + 56;
      long long v231 = 0uLL;
    }
    *(_OWORD *)(a8 + 80) = v233;
    *(void *)(a8 + 96) = v234;
    uint64_t v234 = 0;
    long long v233 = 0uLL;
    if (__p[1])
    {
      __p[2] = __p[1];
      operator delete(__p[1]);
    }
    goto LABEL_173;
  }
  uint64_t v211 = sub_40EFE8((uint64_t)&v227);
  unint64_t v28 = sub_40EFE8((uint64_t)&v227);
  uint64_t v29 = sub_52060((uint64_t)&v227);
  if (v28 <= v29 + 1) {
    unint64_t v30 = v29 + 1;
  }
  else {
    unint64_t v30 = v28;
  }
  if (v28 < v29 + 1)
  {
    double v31 = 0.45;
    double v32 = 0.55;
    double v33 = 1.0;
    *(double *)&uint64_t v34 = 6.28318531;
    float64x2_t v214 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
    float64x2_t v215 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
    float64x2_t v213 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
    float64x2_t v212 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
    while (1)
    {
      uint64_t v35 = (int **)sub_46C8EC(a2, v28);
      float64x2_t v36 = v35;
      double v37 = (unsigned __int16 *)((char *)*v35 - **v35);
      if (*v37 >= 9u && (uint64_t v38 = v37[4]) != 0) {
        uint64_t v39 = *(unsigned int *)((char *)*v35 + v38);
      }
      else {
        uint64_t v39 = 0;
      }
      sub_2954EC(*(void *)a1, (uint64_t)v35[4], (uint64_t)__p);
      sub_2E4B5C((uint64_t)__p, &v225);
      if (__p[1])
      {
        __p[2] = __p[1];
        operator delete(__p[1]);
      }
      double v40 = v36[1];
      double v41 = (unsigned __int16 *)((char *)v40 - *v40);
      if (*v41 < 0x11u) {
        break;
      }
      uint64_t v42 = v41[8];
      if (!v42) {
        break;
      }
      __int16 v43 = *(_WORD *)((char *)v40 + v42);
      if (!*(unsigned char *)(a1 + 200) || (v43 & 0x40) != 0)
      {
        if ((v43 & 0x40) == 0) {
          break;
        }
      }
      else if ((v43 & 0x80) == 0)
      {
        break;
      }
      uint64_t v44 = (char *)*v36;
      uint64_t v45 = (unsigned __int16 *)((char *)*v36 - **v36);
      unsigned int v46 = *v45;
      if (*((unsigned char *)v36 + 38))
      {
        if (v46 < 0xB) {
          break;
        }
        unsigned int v47 = v45[5];
        if (!v47 || (*(_DWORD *)&v44[v47] & 2) == 0) {
          break;
        }
      }
      else
      {
        if (v46 < 0xB) {
          break;
        }
        unsigned int v48 = v45[5];
        if (!v48 || (*(_DWORD *)&v44[v48] & 1) == 0) {
          break;
        }
      }
      uint64_t v49 = sub_E898F0(a1, a2, (uint64_t)&v227, v28, 1);
      uint64_t v50 = sub_E89B28(a1, a2, (uint64_t)&v227, v28, 1);
      double v51 = (double)v39 / 100.0;
      double v52 = (double)v49 / 100.0 / v51;
      double v53 = (double)v50 / 100.0 / v51;
      double v54 = fmin(v52, v31);
      double v55 = fmax(v53, v32);
      if (a7)
      {
        double v53 = v55;
        double v52 = v54;
      }
      if (v52 >= v53) {
        goto LABEL_62;
      }
      sub_31854((uint64_t *)&v225, 0, __p, v52, v53);
      if (v225)
      {
        *(void *)&long long v226 = v225;
        operator delete(v225);
      }
      uint64_t v56 = (int *)__p[0];
      double v225 = __p[0];
      long long v226 = *(_OWORD *)&__p[1];
      uint64_t v57 = (int *)__p[1];
      if (__p[0] != __p[1])
      {
        while (1)
        {
          unsigned int v58 = v56 + 3;
          if (v56 + 3 == __p[1]) {
            break;
          }
          int v59 = *v56;
          int v60 = v56[1];
          int v62 = v56[3];
          int v61 = v56[4];
          BOOL v63 = v59 == v62 && v60 == v61;
          uint64_t v56 = v58;
          if (v63)
          {
            uint64_t v64 = v58 + 3;
            unint64_t v65 = v58 - 3;
            if (v58 + 3 != __p[1])
            {
              do
              {
                if (*v65 != *v64 || v65[1] != v64[1])
                {
                  int v67 = v64[2];
                  *(void *)(v65 + 3) = *(void *)v64;
                  v65 += 3;
                  v65[2] = v67;
                }
                v64 += 3;
              }
              while (v64 != v57);
              uint64_t v57 = (int *)v226;
            }
            if (v65 + 3 != v57) {
              *(void *)&long long v226 = v65 + 3;
            }
            break;
          }
        }
      }
      uint64_t v68 = sub_E89D74(a1, a2, v28);
      uint64_t v69 = v68;
      if (v68 >= 1 && v39)
      {
        uint64_t v70 = (unsigned __int16 *)((char *)*v36 - **v36);
        if (*v70 >= 0xBu)
        {
          uint64_t v71 = v70[5];
          if (v71)
          {
            if ((*((unsigned char *)*v36 + v71 + 1) & 0x80) != 0) {
              uint64_t v69 = -v68;
            }
          }
        }
        __p[0] = v225;
        v220[0] = (void *)v226;
        sub_E942B8((unint64_t **)__p, (unint64_t **)v220, v69, v69);
      }
      sub_E9AA14((int8x8_t *)&v227, v28);
      if (v28 != sub_40EFE8((uint64_t)&v227))
      {
        uint64_t v72 = (int **)sub_46C8EC(a2, v211);
        uint64_t v73 = (unsigned __int16 *)((char *)*v72 - **v72);
        unsigned int v74 = *v73;
        if (*((unsigned char *)v72 + 38))
        {
          if (v74 < 0x49) {
            goto LABEL_90;
          }
          unsigned int v75 = v73[36];
          if (!v75) {
            goto LABEL_90;
          }
LABEL_89:
          __int16 v76 = *(_WORD *)((char *)*v72 + v75);
        }
        else
        {
          if (v74 >= 0x4B)
          {
            unsigned int v75 = v73[37];
            if (v75) {
              goto LABEL_89;
            }
          }
LABEL_90:
          __int16 v76 = -1;
        }
        long long v77 = (unsigned __int16 *)((char *)*v36 - **v36);
        unsigned int v78 = *v77;
        if (*((unsigned char *)v36 + 38))
        {
          if (v78 < 0x4B) {
            goto LABEL_98;
          }
          unsigned int v79 = v77[37];
          if (!v79) {
            goto LABEL_98;
          }
LABEL_97:
          int v80 = *(unsigned __int16 *)((char *)*v36 + v79);
        }
        else
        {
          if (v78 >= 0x49)
          {
            unsigned int v79 = v77[36];
            if (v79) {
              goto LABEL_97;
            }
          }
LABEL_98:
          int v80 = 0xFFFF;
        }
        unsigned __int16 v81 = v76 + 18000;
        unsigned __int16 v82 = v76 - 18000;
        if ((unsigned __int16)(v81 >> 5) < 0x465u) {
          unsigned __int16 v82 = v81;
        }
        int v83 = v80 - v82;
        if (v83 > 18000) {
          v83 -= 36000;
        }
        if (v83 < -17999) {
          v83 += 36000;
        }
        uint64_t v84 = (unsigned int *)v21[5];
        if (!*(unsigned char *)(a1 + 138)
          || (uint64_t v85 = *v22, (unsigned int *)*v22 == v84)
          || fabs((double)v83 / 100.0) <= *(double *)(a1 + 144))
        {
          sub_46C6C((uint64_t)v22, v21[5], (char *)v225, (char *)v226, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v226 - (void)v225) >> 2));
          uint64_t v211 = v28;
        }
        else
        {
          double v210 = *(double *)&v34;
          double v197 = v32;
          double v198 = v31;
          double v86 = *(double *)(a1 + 152);
          uint64_t v199 = *(void *)&v86;
          unint64_t v87 = (unsigned int *)(v85 + 12);
          long long v207 = (unsigned int *)v21[5];
          uint64_t v202 = v85 + 12;
          double v88 = 0.0;
          if ((unsigned int *)(v85 + 12) != v84)
          {
            do
            {
              LODWORD(v86) = *(v87 - 2);
              long double v89 = exp(3.14159265 - (double)*(unint64_t *)&v86 * v210 / 4294967300.0);
              *(double *)&unint64_t v90 = atan((v89 - 1.0 / v89) * 0.5) * 57.2957795;
              long double v91 = *(double *)&v90 * 0.0174532925;
              unsigned int v92 = *(v87 - 3);
              LODWORD(v90) = v87[1];
              long double v93 = exp(3.14159265 - (double)v90 * v210 / 4294967300.0);
              long double v94 = atan((v93 - 1.0 / v93) * 0.5);
              unsigned int v95 = v92;
              uint64_t v84 = v207;
              long double v96 = v94 * 57.2957795 * 0.0174532925;
              v97.i64[0] = v95;
              v97.i64[1] = *v87;
              int64x2_t v98 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v97), v215), v213), v214), v212);
              double v204 = vsubq_f64((float64x2_t)v98, (float64x2_t)vdupq_laneq_s64(v98, 1)).f64[0];
              long double v99 = sin((v91 - v96) * 0.5);
              long double v100 = v99 * v99;
              double v101 = cos(v91);
              long double v102 = v101 * cos(v96);
              long double v103 = sin(0.5 * v204);
              double v104 = v100 + v102 * (v103 * v103);
              double v33 = 1.0;
              long double v105 = atan2(sqrt(v104), sqrt(1.0 - v104));
              double v86 = (v105 + v105) * 6372797.56;
              double v88 = v88 + v86;
              v87 += 3;
            }
            while (v87 != v207);
          }
          double v200 = (double)v199 / 100.0;
          LOBYTE(v240) = 0;
          uint64_t v235 = 0;
          memset(__p, 0, sizeof(__p));
          double v106 = fmax(v33 - v200 / v88, 0.0);
          long long v224 = 0u;
          HIBYTE(v241[0]) = 0;
          uint64_t v107 = (unsigned int *)(v85 + 12);
          if ((unsigned int *)v202 == v84)
          {
            double v124 = v106 * 0.0;
            *(double *)&v218 = v124;
            v220[0] = (char *)v241 + 1;
            v220[1] = __p;
            v221[0] = &v240;
            v221[1] = &v235;
            *(void *)&long long v222 = &v218;
          }
          else
          {
            double v195 = v106;
            double v108 = 0.0;
            do
            {
              LODWORD(v106) = *(v107 - 2);
              long double v109 = exp(3.14159265 - (double)*(unint64_t *)&v106 * v210 / 4294967300.0);
              *(double *)&unint64_t v110 = atan((v109 - 1.0 / v109) * 0.5) * 57.2957795;
              long double v111 = *(double *)&v110 * 0.0174532925;
              unsigned int v112 = *(v107 - 3);
              LODWORD(v110) = v107[1];
              long double v113 = exp(3.14159265 - (double)v110 * v210 / 4294967300.0);
              long double v114 = atan((v113 - 1.0 / v113) * 0.5) * 57.2957795 * 0.0174532925;
              v115.i64[0] = v112;
              v115.i64[1] = *v107;
              int64x2_t v116 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v115), v215), v213), v214), v212);
              double v205 = vsubq_f64((float64x2_t)v116, (float64x2_t)vdupq_laneq_s64(v116, 1)).f64[0];
              long double v117 = sin((v111 - v114) * 0.5);
              long double v118 = v117 * v117;
              double v119 = cos(v111);
              long double v120 = v119 * cos(v114);
              long double v121 = sin(0.5 * v205);
              double v122 = v118 + v120 * (v121 * v121);
              double v33 = 1.0;
              long double v123 = atan2(sqrt(v122), sqrt(1.0 - v122));
              double v106 = (v123 + v123) * 6372797.56;
              double v108 = v108 + v106;
              v107 += 3;
            }
            while (v107 != v207);
            double v124 = v195 * v108;
            *(double *)&v218 = v195 * v108;
            v220[0] = (char *)v241 + 1;
            v220[1] = __p;
            v221[0] = &v240;
            v221[1] = &v235;
            *(void *)&long long v222 = &v218;
            if ((unsigned int *)v202 != v207)
            {
              do
              {
                sub_33350((uint64_t)v220, v85, (unsigned int *)(v85 + 12));
                uint64_t v125 = v85 + 24;
                v85 += 12;
              }
              while ((unsigned int *)v125 != v207);
              double v124 = (double)*(uint64_t *)(a1 + 152) / 100.0;
              double v200 = v124;
            }
          }
          unint64_t v203 = v30;
          long long v126 = (unsigned int *)v226;
          v196 = v225;
          uint64_t v127 = (unsigned int *)((char *)v225 + 12);
          BOOL v128 = v225 == (void *)v226 || v127 == (unsigned int *)v226;
          char v129 = v128;
          char v206 = v129;
          double v130 = 0.0;
          double v131 = 0.5;
          if (!v128)
          {
            uint64_t v132 = (unsigned int *)((char *)v225 + 12);
            do
            {
              LODWORD(v124) = *(v132 - 2);
              long double v133 = exp(3.14159265 - (double)*(unint64_t *)&v124 * v210 / 4294967300.0);
              *(double *)&unint64_t v134 = atan((v133 - 1.0 / v133) * v131) * 57.2957795;
              long double v135 = *(double *)&v134 * 0.0174532925;
              unsigned int v136 = *(v132 - 3);
              LODWORD(v134) = v132[1];
              long double v137 = exp(3.14159265 - (double)v134 * v210 / 4294967300.0);
              long double v138 = atan((v137 - 1.0 / v137) * 0.5) * 57.2957795 * 0.0174532925;
              v139.i64[0] = v136;
              v139.i64[1] = *v132;
              int64x2_t v140 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v139), v215), v213), v214), v212);
              double v208 = vsubq_f64((float64x2_t)v140, (float64x2_t)vdupq_laneq_s64(v140, 1)).f64[0];
              long double v141 = sin((v135 - v138) * 0.5);
              long double v142 = v141 * v141;
              double v143 = cos(v135);
              long double v144 = v143 * cos(v138);
              long double v145 = sin(0.5 * v208);
              long double v146 = v144 * (v145 * v145);
              double v131 = 0.5;
              long double v147 = v142 + v146;
              long double v148 = sqrt(v142 + v146);
              double v33 = 1.0;
              long double v149 = atan2(v148, sqrt(1.0 - v147));
              double v124 = (v149 + v149) * 6372797.56;
              double v130 = v130 + v124;
              v132 += 3;
            }
            while (v132 != v126);
          }
          double v150 = v200 / v130;
          v241[0] = 0;
          *(double *)&v218 = 0.0;
          *(_OWORD *)uint64_t v220 = 0u;
          *(_OWORD *)uint64_t v221 = 0u;
          double v151 = fmin(v200 / v130, v33);
          long long v222 = 0u;
          if (v206)
          {
            double v240 = v151 * 0.0;
            uint64_t v235 = (void **)v241;
            int v236 = v220;
            v237 = (void **)((char *)v241 + 1);
            v238 = &v218;
            int v239 = &v240;
            double v32 = v197;
            double v31 = v198;
            *(double *)&uint64_t v34 = v210;
          }
          else
          {
            double v201 = v151;
            double v152 = 0.0;
            uint64_t v153 = v126;
            do
            {
              LODWORD(v150) = *(v127 - 2);
              long double v154 = exp(3.14159265 - (double)*(unint64_t *)&v150 * v210 / 4294967300.0);
              *(double *)&unint64_t v155 = atan((v154 - 1.0 / v154) * 0.5) * 57.2957795;
              long double v156 = *(double *)&v155 * 0.0174532925;
              unsigned int v157 = *(v127 - 3);
              LODWORD(v155) = v127[1];
              long double v158 = exp(3.14159265 - (double)v155 * v210 / 4294967300.0);
              long double v159 = atan((v158 - 1.0 / v158) * 0.5) * 57.2957795 * 0.0174532925;
              v160.i64[0] = v157;
              v160.i64[1] = *v127;
              int64x2_t v161 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v160), v215), v213), v214), v212);
              double v209 = vsubq_f64((float64x2_t)v161, (float64x2_t)vdupq_laneq_s64(v161, 1)).f64[0];
              long double v162 = sin((v156 - v159) * 0.5);
              long double v163 = v162 * v162;
              double v164 = cos(v156);
              long double v165 = v164 * cos(v159);
              long double v166 = sin(0.5 * v209);
              double v167 = v163 + v165 * (v166 * v166);
              double v33 = 1.0;
              long double v168 = atan2(sqrt(v167), sqrt(1.0 - v167));
              double v150 = (v168 + v168) * 6372797.56;
              double v152 = v152 + v150;
              v127 += 3;
            }
            while (v127 != v126);
            double v31 = v198;
            double v240 = v201 * v152;
            uint64_t v235 = (void **)v241;
            int v236 = v220;
            v237 = (void **)((char *)v241 + 1);
            v238 = &v218;
            int v239 = &v240;
            double v32 = v197;
            *(double *)&uint64_t v34 = v210;
            uint64_t v169 = (uint64_t)v196;
            if ((v206 & 1) == 0)
            {
              do
              {
                sub_33350((uint64_t)&v235, v169, (unsigned int *)(v169 + 12));
                uint64_t v170 = v169 + 24;
                v169 += 12;
              }
              while ((unsigned int *)v170 != v153);
            }
          }
          uint64_t v235 = 0;
          int v236 = 0;
          v237 = 0;
          int64_t v171 = v224 - (unint64_t)__p[3];
          if ((void *)v224 == __p[3])
          {
            uint64_t v173 = 0;
            unint64_t v30 = v203;
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * (v171 >> 2) >= 0x1555555555555556) {
              sub_2E00();
            }
            long long v172 = __p[3];
            unint64_t v30 = v203;
            uint64_t v235 = (void **)operator new(v224 - (unint64_t)__p[3]);
            int v236 = v235;
            uint64_t v173 = (void **)((char *)v235 + 4 * (v171 >> 2));
            v237 = v173;
            memcpy(v235, v172, v171);
            int v236 = v173;
          }
          sub_46C6C((uint64_t)&v235, (uint64_t)v173, (char *)v220[0], (char *)v220[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v220[1] - (char *)v220[0]) >> 2));
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v236 - (char *)v235) >> 2) > 1)
          {
            double v174 = ceil((double)*(uint64_t *)(a1 + 152) / 100.0);
            sub_43F48((uint64_t *)&v235, (v174 + v174), (uint64_t)&v218, 1.0, *(double *)(a1 + 168), *(double *)(a1 + 184));
            if (v22 != (uint64_t *)__p) {
              sub_31AF54(v22, (char *)__p[0], (char *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 2));
            }
            sub_46C6C((uint64_t)v22, v21[5], (char *)v218, v219, 0xAAAAAAAAAAAAAAABLL * ((v219 - (unsigned char *)v218) >> 2));
            sub_46C6C((uint64_t)v22, v21[5], (char *)v221[1], (char *)v222, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v222 - (unint64_t)v221[1]) >> 2));
            sub_E9AB38((int8x8_t *)&v227, v28);
            if (*(double *)&v218 != 0.0)
            {
              uint64_t v219 = (char *)v218;
              operator delete(v218);
            }
          }
          else
          {
            sub_46C6C((uint64_t)v22, v21[5], (char *)v225, (char *)v226, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v226 - (void)v225) >> 2));
          }
          if (v235)
          {
            int v236 = v235;
            operator delete(v235);
          }
          if (v221[1])
          {
            *(void **)&long long v222 = v221[1];
            operator delete(v221[1]);
          }
          if (v220[0])
          {
            v220[1] = v220[0];
            operator delete(v220[0]);
          }
          if (__p[3])
          {
            *(void **)&long long v224 = __p[3];
            operator delete(__p[3]);
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          uint64_t v211 = v28;
        }
        goto LABEL_62;
      }
      if (v22 != (uint64_t *)&v225) {
        sub_31AF54(v22, (char *)v225, (char *)v226, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v226 - (void)v225) >> 2));
      }
LABEL_62:
      if (v225)
      {
        *(void *)&long long v226 = v225;
        operator delete(v225);
      }
      if (++v28 == v30) {
        goto LABEL_154;
      }
    }
    sub_46C6C((uint64_t)v22, v21[5], (char *)v225, (char *)v226, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v226 - (void)v225) >> 2));
    goto LABEL_62;
  }
LABEL_154:
  if (v21[4] != v21[5])
  {
    ++*(_DWORD *)(*(void *)(a1 + 288) + 12);
    long long v175 = v228;
    *(_OWORD *)a8 = v227;
    *(_OWORD *)(a8 + 16) = v175;
    *(_DWORD *)(a8 + 32) = v229;
    long long v176 = v230;
    *(_OWORD *)(a8 + 40) = v230;
    long long v230 = 0uLL;
    long long v177 = v231;
    *(_OWORD *)(a8 + 56) = v231;
    *(_DWORD *)(a8 + 72) = v232;
    if (*((void *)&v177 + 1))
    {
      unint64_t v178 = *(void *)(v177 + 8);
      if ((*((void *)&v176 + 1) & (*((void *)&v176 + 1) - 1)) != 0)
      {
        if (v178 >= *((void *)&v176 + 1)) {
          v178 %= *((void *)&v176 + 1);
        }
      }
      else
      {
        v178 &= *((void *)&v176 + 1) - 1;
      }
      *(void *)(v176 + 8 * v178) = a8 + 56;
      long long v231 = 0uLL;
    }
    *(_OWORD *)(a8 + 80) = v233;
    *(void *)(a8 + 96) = v234;
    uint64_t v234 = 0;
    long long v233 = 0uLL;
    long double v192 = (void *)v231;
    if ((void)v231) {
      goto LABEL_182;
    }
    goto LABEL_183;
  }
  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(void *)(a8 + 8) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a8 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a8 + 32) = 3;
  *(_OWORD *)(a8 + 40) = 0u;
  *(_OWORD *)(a8 + 56) = 0u;
  *(_DWORD *)(a8 + 72) = 1065353216;
  *(void *)(a8 + 88) = 0;
  *(void *)(a8 + 96) = 0;
  *(void *)(a8 + 80) = 0;
LABEL_173:
  uint64_t v188 = v233;
  if ((void)v233)
  {
    uint64_t v189 = *((void *)&v233 + 1);
    unint64_t v190 = (void *)v233;
    if (*((void *)&v233 + 1) != (void)v233)
    {
      do
      {
        int v191 = *(void **)(v189 - 64);
        if (v191)
        {
          *(void *)(v189 - 56) = v191;
          operator delete(v191);
        }
        v189 -= 96;
      }
      while (v189 != v188);
      unint64_t v190 = (void *)v233;
    }
    *((void *)&v233 + 1) = v188;
    operator delete(v190);
  }
  long double v192 = (void *)v231;
  if ((void)v231)
  {
    do
    {
LABEL_182:
      long double v193 = (void *)*v192;
      operator delete(v192);
      long double v192 = v193;
    }
    while (v193);
  }
LABEL_183:
  unsigned int v194 = (void *)v230;
  *(void *)&long long v230 = 0;
  if (v194) {
    operator delete(v194);
  }
}

void sub_E83164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,uint64_t a55)
{
  uint64_t v57 = *(void **)(v55 - 216);
  if (v57)
  {
    *(void *)(v55 - 208) = v57;
    operator delete(v57);
  }
  sub_3310C((uint64_t)&a39);
  sub_3310C((uint64_t)&a45);
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
    sub_E832B4(&a55);
    _Unwind_Resume(a1);
  }
  sub_E832B4(&a55);
  _Unwind_Resume(a1);
}

void *sub_E832B4(void *a1)
{
  uint64_t v2 = a1[10];
  if (v2)
  {
    uint64_t v3 = a1[11];
    uint64_t v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 64);
        if (v5)
        {
          *(void *)(v3 - 56) = v5;
          operator delete(v5);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6)
  {
    do
    {
      double v7 = (void *)*v6;
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  uint64_t v8 = (void *)a1[5];
  a1[5] = 0;
  if (v8) {
    operator delete(v8);
  }
  return a1;
}

uint64_t *sub_E83350(uint64_t *a1)
{
  if (*a1)
  {
    sub_E921B8((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void sub_E8338C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(unint64_t **)a3;
  if (*(void *)(a3 + 8) - (void)v8 < 0x11uLL) {
    long long v108 = 0xFFFFFFFF00000000;
  }
  else {
    long long v108 = *((_OWORD *)v8 + 1);
  }
  sub_E83BE0(a1, a2, (uint64_t)v8, (int *)&v108, 1, (uint64_t)&v98);
  if (*((void *)&v98 + 1) != 0x7FFFFFFFFFFFFFFFLL && *((void *)&v99 + 1) != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v11 = v106;
    if ((void)v106 != *((void *)&v106 + 1))
    {
      while (*(void *)(v11 + 32) != *(void *)(v11 + 40))
      {
        v11 += 96;
        if (v11 == *((void *)&v106 + 1))
        {
          if (sub_40EFE8((uint64_t)&v98))
          {
            uint64_t v12 = sub_40EFE8((uint64_t)&v98);
            uint64_t v13 = sub_52058((uint64_t)&v98);
            sub_E81D40(a1, a2, 0, 0, v12, v13, 0, (uint64_t)&v88);
            if (*((void *)&v88 + 1) != 0x7FFFFFFFFFFFFFFFLL && *((void *)&v89 + 1) != 0x7FFFFFFFFFFFFFFFLL)
            {
              unint64_t v14 = __p[0];
              if (__p[0] != __p[1])
              {
                while (v14[4] != v14[5])
                {
                  v14 += 12;
                  if (v14 == __p[1])
                  {
                    sub_E85C50(a1, (uint64_t)&v98, (uint64_t)&v88);
                    unint64_t v15 = *(void *)(a4 + 8);
                    if (v15 >= *(void *)(a4 + 16))
                    {
                      int v80 = sub_E92854((void **)a4, (uint64_t)&v88);
                    }
                    else
                    {
                      long long v16 = v88;
                      long long v17 = v89;
                      *(_DWORD *)(v15 + 32) = v90;
                      *(_OWORD *)unint64_t v15 = v16;
                      *(_OWORD *)(v15 + 16) = v17;
                      unint64_t v18 = v91;
                      long double v91 = 0;
                      *(void *)(v15 + 40) = v18;
                      *(void *)(v15 + 48) = v92;
                      uint64_t v92 = 0;
                      uint64_t v19 = v93;
                      *(void *)(v15 + 56) = v93;
                      uint64_t v20 = v94;
                      *(void *)(v15 + 64) = v94;
                      *(_DWORD *)(v15 + 72) = v95;
                      if (v20)
                      {
                        unint64_t v21 = v19[1];
                        unint64_t v22 = *(void *)(v15 + 48);
                        if ((v22 & (v22 - 1)) != 0)
                        {
                          if (v21 >= v22) {
                            v21 %= v22;
                          }
                        }
                        else
                        {
                          v21 &= v22 - 1;
                        }
                        v18[v21] = v15 + 56;
                        long double v93 = 0;
                        uint64_t v94 = 0;
                      }
                      *(void *)(v15 + 80) = 0;
                      *(void *)(v15 + 88) = 0;
                      *(void *)(v15 + 96) = 0;
                      *(_OWORD *)(v15 + 80) = *(_OWORD *)__p;
                      *(void *)(v15 + 96) = v97;
                      __p[0] = 0;
                      __p[1] = 0;
                      uint64_t v97 = 0;
                      int v80 = (char *)(v15 + 104);
                    }
                    *(void *)(a4 + 8) = v80;
                    if ((unint64_t)v80 < *(void *)(a4 + 16))
                    {
                      long long v81 = v98;
                      long long v82 = v99;
                      *((_DWORD *)v80 + 8) = v100;
                      *(_OWORD *)int v80 = v81;
                      *((_OWORD *)v80 + 1) = v82;
                      int v83 = v101;
                      double v101 = 0;
                      *((void *)v80 + 5) = v83;
                      *((void *)v80 + 6) = v102;
                      uint64_t v102 = 0;
                      uint64_t v84 = v103;
                      *((void *)v80 + 7) = v103;
                      uint64_t v85 = v104;
                      *((void *)v80 + 8) = v104;
                      *((_DWORD *)v80 + 18) = v105;
                      if (v85)
                      {
                        unint64_t v86 = v84[1];
                        unint64_t v87 = *((void *)v80 + 6);
                        if ((v87 & (v87 - 1)) != 0)
                        {
                          if (v86 >= v87) {
                            v86 %= v87;
                          }
                        }
                        else
                        {
                          v86 &= v87 - 1;
                        }
                        v83[v86] = v80 + 56;
                        long double v103 = 0;
                        uint64_t v104 = 0;
                      }
                      *((void *)v80 + 10) = 0;
                      *((void *)v80 + 11) = 0;
                      *((void *)v80 + 12) = 0;
                      *((_OWORD *)v80 + 5) = v106;
                      *((void *)v80 + 12) = v107;
                      long long v106 = 0uLL;
                      uint64_t v107 = 0;
                      uint64_t v72 = v80 + 104;
                      goto LABEL_85;
                    }
                    goto LABEL_73;
                  }
                }
              }
            }
            unint64_t v42 = *(void *)(a4 + 8);
            if (v42 >= *(void *)(a4 + 16))
            {
LABEL_73:
              uint64_t v72 = sub_E92854((void **)a4, (uint64_t)&v98);
            }
            else
            {
              long long v43 = v98;
              long long v44 = v99;
              *(_DWORD *)(v42 + 32) = v100;
              *(_OWORD *)unint64_t v42 = v43;
              *(_OWORD *)(v42 + 16) = v44;
              uint64_t v45 = v101;
              double v101 = 0;
              *(void *)(v42 + 40) = v45;
              *(void *)(v42 + 48) = v102;
              uint64_t v102 = 0;
              unsigned int v46 = v103;
              *(void *)(v42 + 56) = v103;
              uint64_t v47 = v104;
              *(void *)(v42 + 64) = v104;
              *(_DWORD *)(v42 + 72) = v105;
              if (v47)
              {
                unint64_t v48 = v46[1];
                unint64_t v49 = *(void *)(v42 + 48);
                if ((v49 & (v49 - 1)) != 0)
                {
                  if (v48 >= v49) {
                    v48 %= v49;
                  }
                }
                else
                {
                  v48 &= v49 - 1;
                }
                v45[v48] = v42 + 56;
                long double v103 = 0;
                uint64_t v104 = 0;
              }
              *(void *)(v42 + 80) = 0;
              *(void *)(v42 + 88) = 0;
              *(void *)(v42 + 96) = 0;
              *(_OWORD *)(v42 + 80) = v106;
              *(void *)(v42 + 96) = v107;
              long long v106 = 0uLL;
              uint64_t v107 = 0;
              uint64_t v72 = (char *)(v42 + 104);
            }
LABEL_85:
            *(void *)(a4 + 8) = v72;
            ++*(_DWORD *)(*(void *)(a1 + 288) + 8);
            unsigned int v74 = (char *)__p[0];
            if (__p[0])
            {
              unsigned int v75 = (char *)__p[1];
              __int16 v76 = __p[0];
              if (__p[1] != __p[0])
              {
                do
                {
                  long long v77 = (void *)*((void *)v75 - 8);
                  if (v77)
                  {
                    *((void *)v75 - 7) = v77;
                    operator delete(v77);
                  }
                  v75 -= 96;
                }
                while (v75 != v74);
                __int16 v76 = __p[0];
              }
              __p[1] = v74;
              operator delete(v76);
            }
            unsigned int v78 = v93;
            if (v93)
            {
              do
              {
                unsigned int v79 = (void *)*v78;
                operator delete(v78);
                unsigned int v78 = v79;
              }
              while (v79);
            }
            goto LABEL_54;
          }
          unint64_t v64 = *(void *)(a4 + 8);
          if (v64 >= *(void *)(a4 + 16))
          {
            uint64_t v73 = sub_E92854((void **)a4, (uint64_t)&v98);
          }
          else
          {
            long long v65 = v98;
            long long v66 = v99;
            *(_DWORD *)(v64 + 32) = v100;
            *(_OWORD *)unint64_t v64 = v65;
            *(_OWORD *)(v64 + 16) = v66;
            int v67 = v101;
            double v101 = 0;
            *(void *)(v64 + 40) = v67;
            *(void *)(v64 + 48) = v102;
            uint64_t v102 = 0;
            uint64_t v68 = v103;
            *(void *)(v64 + 56) = v103;
            uint64_t v69 = v104;
            *(void *)(v64 + 64) = v104;
            *(_DWORD *)(v64 + 72) = v105;
            if (v69)
            {
              unint64_t v70 = v68[1];
              unint64_t v71 = *(void *)(v64 + 48);
              if ((v71 & (v71 - 1)) != 0)
              {
                if (v70 >= v71) {
                  v70 %= v71;
                }
              }
              else
              {
                v70 &= v71 - 1;
              }
              v67[v70] = v64 + 56;
              long double v103 = 0;
              uint64_t v104 = 0;
            }
            *(void *)(v64 + 80) = 0;
            *(void *)(v64 + 88) = 0;
            *(void *)(v64 + 96) = 0;
            *(_OWORD *)(v64 + 80) = v106;
            *(void *)(v64 + 96) = v107;
            long long v106 = 0uLL;
            uint64_t v107 = 0;
            uint64_t v73 = (char *)(v64 + 104);
          }
          *(void *)(a4 + 8) = v73;
          ++*(_DWORD *)(*(void *)(a1 + 288) + 8);
          uint64_t v57 = (char *)v106;
          if ((void)v106) {
            goto LABEL_57;
          }
          goto LABEL_64;
        }
      }
    }
  }
  unint64_t v24 = **(void **)a3;
  uint64_t v23 = *(void *)(*(void *)a3 + 8);
  BOOL v25 = sub_2E157C(*(void *)(a1 + 8), v24, 1);
  if (v25
    && (uint64_t v26 = &v25[-*(int *)v25], *(unsigned __int16 *)v26 >= 5u)
    && (uint64_t v27 = *((unsigned __int16 *)v26 + 2)) != 0
    && (unint64_t v28 = &v25[v27 + *(unsigned int *)&v25[v27]], *(_DWORD *)v28 > HIDWORD(v24))
    && (uint64_t v29 = (int *)sub_2E2690(v28, v24)) != 0)
  {
    unint64_t v30 = (unsigned __int16 *)((char *)v29 - *v29);
    if (*v30 >= 7u && (uint64_t v31 = v30[3]) != 0) {
      uint64_t v32 = *(unsigned int *)((char *)v29 + v31);
    }
    else {
      uint64_t v32 = 0;
    }
  }
  else
  {
    uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
  }
  sub_E81D40(a1, a2, 0, 0, v23, v32, 0, (uint64_t)&v88);
  if (*((void *)&v88 + 1) != 0x7FFFFFFFFFFFFFFFLL && *((void *)&v89 + 1) != 0x7FFFFFFFFFFFFFFFLL)
  {
    double v33 = __p[0];
    if (__p[0] != __p[1])
    {
      while (v33[4] != v33[5])
      {
        v33 += 12;
        if (v33 == __p[1])
        {
          unint64_t v34 = *(void *)(a4 + 8);
          if (v34 >= *(void *)(a4 + 16))
          {
            *(void *)(a4 + 8) = sub_E92854((void **)a4, (uint64_t)&v88);
            break;
          }
          long long v35 = v88;
          long long v36 = v89;
          *(_DWORD *)(v34 + 32) = v90;
          *(_OWORD *)unint64_t v34 = v35;
          *(_OWORD *)(v34 + 16) = v36;
          double v37 = v91;
          long double v91 = 0;
          *(void *)(v34 + 40) = v37;
          *(void *)(v34 + 48) = v92;
          uint64_t v92 = 0;
          uint64_t v38 = v93;
          *(void *)(v34 + 56) = v93;
          uint64_t v39 = v94;
          *(void *)(v34 + 64) = v94;
          *(_DWORD *)(v34 + 72) = v95;
          if (v39)
          {
            unint64_t v40 = v38[1];
            unint64_t v41 = *(void *)(v34 + 48);
            if ((v41 & (v41 - 1)) != 0)
            {
              if (v40 >= v41) {
                v40 %= v41;
              }
            }
            else
            {
              v40 &= v41 - 1;
            }
            v37[v40] = v34 + 56;
            long double v93 = 0;
            uint64_t v94 = 0;
          }
          *(void *)(v34 + 80) = 0;
          *(void *)(v34 + 88) = 0;
          *(void *)(v34 + 96) = 0;
          *(_OWORD *)(v34 + 80) = *(_OWORD *)__p;
          *(void *)(v34 + 96) = v97;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v97 = 0;
          *(void *)(a4 + 8) = v34 + 104;
          ++*(_DWORD *)(*(void *)(a1 + 288) + 28);
          uint64_t v50 = (char *)__p[0];
          if (__p[0]) {
            goto LABEL_45;
          }
          goto LABEL_52;
        }
      }
    }
  }
  ++*(_DWORD *)(*(void *)(a1 + 288) + 28);
  uint64_t v50 = (char *)__p[0];
  if (__p[0])
  {
LABEL_45:
    double v51 = (char *)__p[1];
    double v52 = v50;
    if (__p[1] != v50)
    {
      do
      {
        double v53 = (void *)*((void *)v51 - 8);
        if (v53)
        {
          *((void *)v51 - 7) = v53;
          operator delete(v53);
        }
        v51 -= 96;
      }
      while (v51 != v50);
      double v52 = (char *)__p[0];
    }
    __p[1] = v50;
    operator delete(v52);
  }
LABEL_52:
  double v54 = v93;
  if (v93)
  {
    do
    {
      uint64_t v55 = (void *)*v54;
      operator delete(v54);
      double v54 = v55;
    }
    while (v55);
  }
LABEL_54:
  uint64_t v56 = v91;
  long double v91 = 0;
  if (v56) {
    operator delete(v56);
  }
  uint64_t v57 = (char *)v106;
  if ((void)v106)
  {
LABEL_57:
    unsigned int v58 = (char *)*((void *)&v106 + 1);
    int v59 = v57;
    if (*((char **)&v106 + 1) != v57)
    {
      do
      {
        int v60 = (void *)*((void *)v58 - 8);
        if (v60)
        {
          *((void *)v58 - 7) = v60;
          operator delete(v60);
        }
        v58 -= 96;
      }
      while (v58 != v57);
      int v59 = (char *)v106;
    }
    *((void *)&v106 + 1) = v57;
    operator delete(v59);
  }
LABEL_64:
  int v61 = v103;
  if (v103)
  {
    do
    {
      int v62 = (void *)*v61;
      operator delete(v61);
      int v61 = v62;
    }
    while (v62);
  }
  BOOL v63 = v101;
  double v101 = 0;
  if (v63) {
    operator delete(v63);
  }
}

void sub_E83B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

void sub_E83BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_E832B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E83BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_E832B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E83BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_E832B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E83BE0(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  long long v386 = xmmword_20E8160;
  long long v387 = xmmword_20E8160;
  long long v389 = 0u;
  long long v390 = 0u;
  int v388 = 3;
  int v391 = 1065353216;
  uint64_t v393 = 0;
  v392[0] = 0;
  v392[1] = 0;
  sub_63841C((uint64_t)&v386, 4);
  uint64_t v7 = *(void *)(a3 + 8);
  if (a5)
  {
    sub_E9A9FC((uint64_t)&v386, v7);
    unint64_t v8 = *(void *)a3;
    uint64_t v9 = sub_2E157C(*(void *)(a1 + 8), *(void *)a3, 1);
    if (v9
      && (uint64_t v10 = &v9[-*(int *)v9], *(unsigned __int16 *)v10 >= 5u)
      && (uint64_t v11 = *((unsigned __int16 *)v10 + 2)) != 0
      && (uint64_t v12 = &v9[v11 + *(unsigned int *)&v9[v11]], *(_DWORD *)v12 > HIDWORD(v8))
      && (uint64_t v13 = (int *)sub_2E2690(v12, v8)) != 0)
    {
      unint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
      if (*v14 >= 7u && (uint64_t v15 = v14[3]) != 0) {
        uint64_t v16 = *(unsigned int *)((char *)v13 + v15);
      }
      else {
        uint64_t v16 = 0;
      }
    }
    else
    {
      uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_E9AA0C((uint64_t)&v386, v16);
  }
  else
  {
    sub_497CC0(&v386, v7);
    unint64_t v17 = *(void *)a3;
    unint64_t v18 = sub_2E157C(*(void *)(a1 + 8), *(void *)a3, 1);
    if (v18
      && (uint64_t v19 = &v18[-*(int *)v18], *(unsigned __int16 *)v19 >= 5u)
      && (uint64_t v20 = *((unsigned __int16 *)v19 + 2)) != 0
      && (unint64_t v21 = &v18[v20 + *(unsigned int *)&v18[v20]], *(_DWORD *)v21 > HIDWORD(v17))
      && (unint64_t v22 = (int *)sub_2E2690(v21, v17)) != 0)
    {
      uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
      if (*v23 >= 7u && (uint64_t v24 = v23[3]) != 0) {
        uint64_t v25 = *(unsigned int *)((char *)v22 + v24);
      }
      else {
        uint64_t v25 = 0;
      }
    }
    else
    {
      uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_E9AA04((uint64_t)&v386, v25);
  }
  sub_E88650(*(void *)(a1 + 8), *(void *)a3, a5, (uint64_t)&v384);
  v382 = 0;
  v381 = 0;
  v383 = 0;
  uint64_t v26 = (char *)v384;
  uint64_t v27 = v385;
  uint64_t v339 = a1;
  uint64_t v28 = 0;
  if (v384 != v385)
  {
    while (1)
    {
      BOOL v29 = sub_E889B0(a1, (long long *)v26);
      uint64_t v30 = *(void *)(a1 + 288);
      if (v29) {
        break;
      }
      ++*(_DWORD *)(v30 + 20);
LABEL_25:
      v26 += 32;
      if (v26 == v27) {
        goto LABEL_50;
      }
    }
    ++*(_DWORD *)(v30 + 16);
    uint64_t v31 = (void *)sub_2E03F8(*(void *)(a1 + 8), *((void *)v26 + 1), *((void *)v26 + 2));
    __p[0] = v31;
    if (v31) {
      BOOL v32 = (unint64_t)v31 >= 0xFFFFFFFF00000000;
    }
    else {
      BOOL v32 = 1;
    }
    if (v32) {
      goto LABEL_25;
    }
    uint64_t v33 = sub_E88B98(a1, (unint64_t *)__p, a2, *(void *)(a3 + 8), a5, 0);
    uint64_t v35 = v33;
    int v36 = v34;
    if (v28 <= v33) {
      uint64_t v28 = v33;
    }
    double v37 = v382;
    if (v382 >= v383)
    {
      unint64_t v40 = (char *)v381;
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((v382 - (unsigned char *)v381) >> 4);
      unint64_t v42 = v41 + 1;
      if (v41 + 1 > 0x555555555555555) {
        sub_2E00();
      }
      if (0x5555555555555556 * ((v383 - (unsigned char *)v381) >> 4) > v42) {
        unint64_t v42 = 0x5555555555555556 * ((v383 - (unsigned char *)v381) >> 4);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v383 - (unsigned char *)v381) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v43 = 0x555555555555555;
      }
      else {
        unint64_t v43 = v42;
      }
      if (v43 > 0x555555555555555) {
        sub_188D718();
      }
      long long v44 = (char *)operator new(48 * v43);
      long long v45 = *((_OWORD *)v26 + 1);
      unsigned int v46 = &v44[48 * v41];
      *(_OWORD *)unsigned int v46 = *(_OWORD *)v26;
      *((_OWORD *)v46 + 1) = v45;
      *((void *)v46 + 4) = v35;
      *((_DWORD *)v46 + 10) = v36;
      v46[44] = 0;
      if (v37 == v40)
      {
        uint64_t v39 = v46 + 48;
        v381 = &v44[48 * v41];
        v383 = &v44[48 * v43];
        if (!v40) {
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t v47 = &v44[48 * v41];
        do
        {
          long long v48 = *((_OWORD *)v37 - 3);
          long long v49 = *((_OWORD *)v37 - 2);
          uint64_t v50 = v47 - 48;
          *(_OWORD *)(v47 - 19) = *(_OWORD *)(v37 - 19);
          *((_OWORD *)v47 - 3) = v48;
          *((_OWORD *)v47 - 2) = v49;
          v37 -= 48;
          v47 -= 48;
        }
        while (v37 != v40);
        uint64_t v39 = v46 + 48;
        v381 = v50;
        v383 = &v44[48 * v43];
        if (!v40) {
          goto LABEL_47;
        }
      }
      operator delete(v40);
    }
    else
    {
      long long v38 = *((_OWORD *)v26 + 1);
      *(_OWORD *)v382 = *(_OWORD *)v26;
      *((_OWORD *)v37 + 1) = v38;
      *((void *)v37 + 4) = v33;
      *((_DWORD *)v37 + 10) = v34;
      v37[44] = 0;
      uint64_t v39 = v37 + 48;
    }
LABEL_47:
    a1 = v339;
    v382 = v39;
    goto LABEL_25;
  }
LABEL_50:
  double v51 = (char *)v381;
  double v52 = v382;
  if (v381 != v382)
  {
    v379 = 0;
    v378 = 0;
    unsigned int v53 = -1;
    uint64_t v380 = 0;
    do
    {
      if (*(void *)(v339 + 32) + *((void *)v51 + 4) >= v28)
      {
        sub_E88E14((char **)&v378, v51);
        if (*((_DWORD *)v51 + 10) < v53) {
          unsigned int v53 = *((_DWORD *)v51 + 10);
        }
      }
      v51 += 48;
    }
    while (v51 != v52);
    uint64_t v54 = *(void *)(a3 + 8);
    if (a5)
    {
      uint64_t v55 = v54 - v53;
      sub_497CC0(&v386, v55);
      uint64_t v56 = v339;
      sub_E9AA04((uint64_t)&v386, 0);
    }
    else
    {
      uint64_t v55 = v54 + v53;
      sub_E9A9FC((uint64_t)&v386, v55);
      uint64_t v56 = v339;
      uint64_t v57 = sub_52060((uint64_t)&v386);
      unsigned int v58 = (void *)sub_46C8EC(a2, v57);
      int v59 = (unsigned __int16 *)(*v58 - *(int *)*v58);
      if (*v59 >= 9u && (uint64_t v60 = v59[4]) != 0) {
        uint64_t v61 = *(unsigned int *)(*v58 + v60);
      }
      else {
        uint64_t v61 = 0;
      }
      sub_E9AA0C((uint64_t)&v386, v61);
    }
    uint64_t v62 = sub_46C8EC(a2, v55);
    uint64_t v63 = *(void *)v56;
    if (a5)
    {
      sub_2954EC(v63, *(void *)(v62 + 32), (uint64_t)__p);
      unint64_t v64 = __p[1];
      if (__p[1] != (void *)v350)
      {
        unint64_t v65 = sub_2E1AA4((uint64_t)__p);
        goto LABEL_71;
      }
    }
    else
    {
      sub_2954EC(v63, *(void *)(v62 + 32), (uint64_t)__p);
      unint64_t v64 = __p[1];
      if (__p[1] != (void *)v350)
      {
        unint64_t v65 = sub_2E40A4((uint64_t)__p);
LABEL_71:
        unsigned int v67 = v65;
        unint64_t v68 = v65 & 0xFFFFFFFF00000000;
        unint64_t v64 = __p[1];
        uint64_t v69 = v67;
        int v70 = v66;
        if (!__p[1])
        {
LABEL_73:
          unint64_t v376 = v68 | v69;
          int v377 = v70;
          unint64_t v71 = v378;
          v327 = v379;
          if (v378 == v379) {
            goto LABEL_431;
          }
          int v325 = *a4;
          int v324 = a4[1];
          if (*a4) {
            BOOL v72 = a4[1] == -1;
          }
          else {
            BOOL v72 = 1;
          }
          int v73 = !v72;
          int v326 = v73;
          double v74 = 1.0;
          float64x2_t v337 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
          float64x2_t v338 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
          float64x2_t v335 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
          float64x2_t v336 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
          while (1)
          {
            if (a5)
            {
              if (!v326 || v71[6] != v325) {
                goto LABEL_89;
              }
              BOOL v75 = 0;
              BOOL v76 = v71[7] == v324;
            }
            else
            {
              if (!v326 || *v71 != v325)
              {
LABEL_89:
                BOOL v75 = 0;
                BOOL v76 = 0;
                goto LABEL_90;
              }
              BOOL v76 = 0;
              BOOL v75 = v71[1] == v324;
            }
LABEL_90:
            sub_2E0724(*(void *)(v56 + 8), v71, (uint64_t)&v374);
            if (*((unsigned char *)v71 + 44))
            {
              if (v374 != v375)
              {
                long long v77 = v375 - 12;
                if (v375 - 12 > v374)
                {
                  unsigned int v78 = (char *)v374 + 12;
                  do
                  {
                    int v79 = *((_DWORD *)v78 - 1);
                    uint64_t v80 = *(void *)(v78 - 12);
                    int v81 = *((_DWORD *)v77 + 2);
                    *(void *)(v78 - 12) = *(void *)v77;
                    *((_DWORD *)v78 - 1) = v81;
                    *(void *)long long v77 = v80;
                    *((_DWORD *)v77 + 2) = v79;
                    v77 -= 12;
                    BOOL v32 = v78 >= v77;
                    v78 += 12;
                  }
                  while (!v32);
                }
              }
            }
            uint64_t v82 = *(void *)(v56 + 8);
            long long v83 = *((_OWORD *)v71 + 1);
            *(_OWORD *)float64x2_t __p = *(_OWORD *)v71;
            long long v350 = v83;
            uint64_t v84 = (int *)sub_2E2ED4(v82, (int32x2_t *)__p);
            v340 = v71;
            if (v84 && (long long v88 = (unsigned __int16 *)((char *)v84 - *v84), *v88 >= 0x15u) && (v89 = v88[10]) != 0)
            {
              uint64_t v90 = *(int *)((char *)v84 + v89);
              double v91 = 0.0;
              if (v90)
              {
                if (sub_40EFE8((uint64_t)&v386))
                {
                  uint64_t v92 = sub_52060((uint64_t)&v386);
                  if (v92 != sub_46C760(a2) - 1)
                  {
                    double v86 = (double)(int)v90;
                    double v85 = (double)(int)v90 / 100.0;
                    double v91 = (double)*(uint64_t *)(v56 + 24) / 100.0 / v85;
                  }
                }
              }
              else
              {
                uint64_t v90 = 0;
              }
            }
            else
            {
              uint64_t v90 = 0;
              double v91 = 0.0;
            }
            uint64_t v394 = 0x7FEFFFFFFFFFFFFFLL;
            double v93 = NAN;
            *(void *)v395 = -1;
            *(_DWORD *)&v395[8] = 0x7FFFFFFF;
            __p[0] = &v376;
            __p[1] = &v394;
            *(void *)&long long v350 = v395;
            uint64_t v94 = v374;
            int v95 = v375;
            if (v374 != v375 && (char *)v374 + 12 != v375)
            {
              do
              {
                sub_457FB8((uint64_t)__p, v94, v94 + 3, v93, v85, v86, v87);
                long double v96 = v94 + 6;
                v94 += 3;
              }
              while (v96 != v95);
              uint64_t v94 = v374;
              int v95 = v375;
            }
            double v367 = 0.0;
            double v371 = 0.0;
            uint64_t v401 = 0x7FEFFFFFFFFFFFFFLL;
            __p[0] = v395;
            __p[1] = &v401;
            *(void *)&long long v350 = &v371;
            *((void *)&v350 + 1) = &v367;
            BOOL v328 = v76;
            BOOL v329 = v75;
            if (v94 == v95 || v94 + 3 == v95)
            {
              double v98 = 0.0;
              uint64_t v56 = v339;
              if (!*(unsigned char *)(v339 + 201)) {
                goto LABEL_118;
              }
            }
            else
            {
              do
              {
                double v93 = sub_4582C8((double **)__p, (uint64_t)v94, v94 + 3, v93);
                uint64_t v97 = v94 + 6;
                v94 += 3;
              }
              while (v97 != v95);
              double v98 = 0.0;
              if (v367 == 0.0)
              {
                uint64_t v56 = v339;
                if (!*(unsigned char *)(v339 + 201)) {
                  goto LABEL_118;
                }
              }
              else
              {
                double v74 = 1.0;
                if (v371 / v367 <= 1.0) {
                  double v98 = v371 / v367;
                }
                else {
                  double v98 = 1.0;
                }
                uint64_t v56 = v339;
                if (!*(unsigned char *)(v339 + 201))
                {
LABEL_118:
                  double v101 = v340;
                  goto LABEL_322;
                }
              }
            }
            double v99 = (double)v90;
            if (a5)
            {
              double v100 = (v74 - v98) * v99;
              double v101 = v340;
              if (v100 >= 0.0) {
                goto LABEL_115;
              }
            }
            else
            {
              double v100 = v98 * v99;
              double v101 = v340;
              if (v100 >= 0.0)
              {
LABEL_115:
                if (v100 >= 4.50359963e15) {
                  goto LABEL_124;
                }
                uint64_t v102 = (uint64_t)(v100 + v100) + 1;
                goto LABEL_123;
              }
            }
            if (v100 <= -4.50359963e15) {
              goto LABEL_124;
            }
            uint64_t v102 = (uint64_t)(v100 + v100);
            if (v102 >= 1) {
              --v102;
            }
LABEL_123:
            double v100 = (double)(v102 >> 1);
LABEL_124:
            uint64_t v103 = *((void *)v101 + 4);
            double v104 = 1.0;
            if (!v103
              || v103 == 0x7FFFFFFFFFFFFFFFLL
              || ((uint64_t v105 = (uint64_t)v100) != 0 ? (v106 = v105 == 0x7FFFFFFFFFFFFFFFLL) : (v106 = 1), v106))
            {
              if (*(double *)(v56 + 216) < 1.0) {
                goto LABEL_132;
              }
            }
            else
            {
              double v104 = (double)v105 / (double)v103;
              if (v104 > *(double *)(v56 + 216))
              {
LABEL_132:
                double v107 = *(double *)(v56 + 208) * (double)v103;
                if (v107 >= 0.0)
                {
                  double v108 = 4.50359963e15;
                  if (v107 < 4.50359963e15)
                  {
                    uint64_t v109 = (uint64_t)(v107 + v107) + 1;
                    goto LABEL_144;
                  }
                }
                else
                {
                  double v108 = -4.50359963e15;
                  if (v107 > -4.50359963e15)
                  {
                    uint64_t v109 = (uint64_t)(v107 + v107);
                    if (v109 >= 1) {
                      --v109;
                    }
LABEL_144:
                    double v107 = (double)(v109 >> 1);
                  }
                }
                __p[0] = (void *)(uint64_t)v107;
                double v110 = sub_E88F54(&v376, (uint64_t *)&v374, (uint64_t *)__p, a5 ^ 1u, v107, v108, v86, v87);
                if (v110 < v98) {
                  double v98 = v110;
                }
                goto LABEL_322;
              }
            }
            if (*(unsigned char *)(v56 + 232) && v104 < *(double *)(v56 + 224))
            {
              v372 = 0;
              double v371 = 0.0;
              uint64_t v373 = 0;
              unint64_t v111 = sub_40EFE8((uint64_t)&v386);
              unint64_t v112 = sub_52060((uint64_t)&v386);
              if (v111 <= v112) {
                unint64_t v113 = v112;
              }
              else {
                unint64_t v113 = v111;
              }
              unint64_t v330 = v113;
              if (v111 >= v112)
              {
LABEL_156:
                if (a5)
                {
                  double v114 = 1.0;
                  double v115 = fmin(v91 + v98, 1.0);
                  double v116 = vabdd_f64(v115, 1.0);
                  if (v115 != 1.0 && v116 >= 2.22044605e-16) {
                    goto LABEL_382;
                  }
LABEL_427:
                  char v263 = *(char **)&v371;
                  if (v371 == 0.0) {
                    goto LABEL_376;
                  }
                  v372 = *(char **)&v371;
LABEL_375:
                  operator delete(v263);
                  goto LABEL_376;
                }
                double v115 = 0.0;
                double v114 = fmax(v98 - v91, 0.0);
                double v264 = vabdd_f64(0.0, v114);
                if (v114 == 0.0 || v264 < 2.22044605e-16) {
                  goto LABEL_427;
                }
LABEL_382:
                sub_31854((uint64_t *)&v374, 0, &v367, v115, v114);
                v266 = *(char **)&v367;
                if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v368 - *(void *)&v367) >> 2) < 2) {
                  goto LABEL_425;
                }
                double v267 = sub_455F0((char **)&v367, (char **)&v371, 0, 2.0);
                v266 = *(char **)&v367;
                if (v267 > (double)*(uint64_t *)(v56 + 240) / 100.0) {
                  goto LABEL_425;
                }
                v268 = (char *)v368;
                double v269 = 0.0;
                if (*(void **)&v367 != v368)
                {
                  v270 = (char *)(*(void *)&v367 + 12);
                  if ((void *)(*(void *)&v367 + 12) != v368)
                  {
                    double v271 = 0.0;
                    do
                    {
                      LODWORD(v269) = *((_DWORD *)v270 - 2);
                      long double v272 = exp(3.14159265 - (double)*(unint64_t *)&v269 * 6.28318531 / 4294967300.0);
                      *(double *)&unint64_t v273 = atan((v272 - 1.0 / v272) * 0.5) * 57.2957795;
                      long double v274 = *(double *)&v273 * 0.0174532925;
                      unsigned int v275 = *((_DWORD *)v270 - 3);
                      LODWORD(v273) = *((_DWORD *)v270 + 1);
                      long double v276 = exp(3.14159265 - (double)v273 * 6.28318531 / 4294967300.0);
                      long double v277 = atan((v276 - 1.0 / v276) * 0.5) * 57.2957795 * 0.0174532925;
                      v278.i64[0] = v275;
                      v278.i64[1] = *(unsigned int *)v270;
                      int64x2_t v279 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v278), v338), v337), v336), v335);
                      double v348 = vsubq_f64((float64x2_t)v279, (float64x2_t)vdupq_laneq_s64(v279, 1)).f64[0];
                      long double v280 = sin((v274 - v277) * 0.5);
                      long double v281 = v280 * v280;
                      double v282 = cos(v274);
                      long double v283 = v282 * cos(v277);
                      long double v284 = sin(0.5 * v348);
                      double v285 = v281 + v283 * (v284 * v284);
                      double v74 = 1.0;
                      long double v286 = atan2(sqrt(v285), sqrt(1.0 - v285));
                      double v269 = (v286 + v286) * 6372797.56;
                      double v271 = v271 + v269;
                      v270 += 12;
                    }
                    while (v270 != v268);
                    double v269 = v271 * 100.0;
                    if (v271 * 100.0 < 0.0)
                    {
                      if (v269 <= -4.50359963e15)
                      {
                        char v289 = 1;
                        double v288 = v271 * 100.0;
                      }
                      else
                      {
                        uint64_t v287 = (uint64_t)(v269 + v269);
                        if (v287 >= 1) {
                          --v287;
                        }
                        double v288 = (double)(v287 >> 1);
                        char v289 = 1;
                      }
LABEL_397:
                      if (v288 >= 9.22337204e18)
                      {
                        uint64_t v291 = 0x7FFFFFFFFFFFFFFELL;
                      }
                      else
                      {
                        if (v289)
                        {
                          if (v269 > -4.50359963e15)
                          {
                            uint64_t v290 = (uint64_t)(v269 + v269);
                            if (v290 >= 1) {
                              --v290;
                            }
LABEL_406:
                            double v269 = (double)(v290 >> 1);
                          }
                        }
                        else if (v269 < 4.50359963e15)
                        {
                          uint64_t v290 = (uint64_t)(v269 + v269) + 1;
                          goto LABEL_406;
                        }
                        uint64_t v291 = (uint64_t)v269;
                      }
                      v292 = v369;
                      v368 = 0;
                      v369 = 0;
                      double v367 = 0.0;
                      uint64_t v293 = *(void *)(v56 + 8);
                      long long v294 = v340[1];
                      *(_OWORD *)v395 = *v340;
                      *(_OWORD *)&v395[16] = v294;
                      v295 = (int *)sub_2E2ED4(v293, (int32x2_t *)v395);
                      if (v295
                        && (v296 = (unsigned __int16 *)((char *)v295 - *v295), *v296 >= 0xFu)
                        && (uint64_t v297 = v296[7]) != 0)
                      {
                        int v298 = *(int *)((char *)v295 + v297);
                      }
                      else
                      {
                        LOWORD(v298) = 0;
                      }
                      uint64_t v299 = *(void *)(v56 + 8);
                      long long v300 = v340[1];
                      *(_OWORD *)v395 = *v340;
                      *(_OWORD *)&v395[16] = v300;
                      v301 = (int *)sub_2E2ED4(v299, (int32x2_t *)v395);
                      if (v301
                        && (v302 = (unsigned __int16 *)((char *)v301 - *v301), *v302 >= 0x13u)
                        && (uint64_t v303 = v302[9]) != 0)
                      {
                        uint64_t v304 = *(int *)((char *)v301 + v303);
                      }
                      else
                      {
                        uint64_t v304 = 0;
                      }
                      uint64_t v305 = *(void *)(v56 + 8);
                      long long v306 = v340[1];
                      *(_OWORD *)v395 = *v340;
                      *(_OWORD *)&v395[16] = v306;
                      v307 = (int *)sub_2E2ED4(v305, (int32x2_t *)v395);
                      double v308 = 0.0;
                      if (v307)
                      {
                        v309 = (unsigned __int16 *)((char *)v307 - *v307);
                        if (*v309 >= 0x19u)
                        {
                          uint64_t v310 = v309[12];
                          if (v310) {
                            double v308 = *(float *)((char *)v307 + v310);
                          }
                        }
                      }
                      long long v311 = v340[1];
                      *(_OWORD *)float64x2_t __p = *v340;
                      long long v350 = v311;
                      v351[0] = v266;
                      v351[1] = v268;
                      *(void *)&long long v352 = v292;
                      WORD4(v352) = v298;
                      uint64_t v353 = v304;
                      uint64_t v354 = v291;
                      double v355 = v308;
                      BOOL v356 = v329;
                      BOOL v357 = v328;
                      char v358 = 0;
                      sub_E9AC1C((uint64_t)&v386, (uint64_t)__p);
                      if (v351[0])
                      {
                        v351[1] = v351[0];
                        operator delete(v351[0]);
                      }
                      v266 = *(char **)&v367;
                      double v101 = v340;
LABEL_425:
                      if (v266)
                      {
                        v368 = v266;
                        operator delete(v266);
                      }
                      goto LABEL_427;
                    }
                    if (v269 >= 4.50359963e15)
                    {
                      char v289 = 0;
                      double v288 = v271 * 100.0;
                      goto LABEL_397;
                    }
                  }
                }
                char v289 = 0;
                double v288 = (double)(((uint64_t)(v269 + v269) + 1) >> 1);
                goto LABEL_397;
              }
LABEL_164:
              uint64_t v118 = *(void *)v56;
              uint64_t v119 = sub_46C8EC(a2, v111);
              sub_2954EC(v118, *(void *)(v119 + 32), (uint64_t)&v367);
              uint64_t v120 = (uint64_t)v372;
              sub_2E51EC((uint64_t)&v367, (uint64_t)&v363);
              uint64_t v332 = v120;
              unint64_t v333 = v111;
              if (v370)
              {
                if (v368 != v369)
                {
                  double v121 = v367;
                  long long v360 = 0u;
                  long long v361 = 0u;
                  char v122 = 1;
                  LODWORD(v123) = -1;
                  int v124 = -1;
                  goto LABEL_169;
                }
LABEL_170:
                double v121 = 0.0;
                LODWORD(v123) = 0;
                int v124 = 0;
                char v122 = 0;
                uint64_t v362 = 0;
                long long v360 = 0u;
                long long v361 = 0u;
                v359[0] = 0;
                *(_DWORD *)((char *)v359 + 3) = 0;
              }
              else
              {
                if (v368 == v369) {
                  goto LABEL_170;
                }
                unint64_t v125 = *(v369 - 1);
                long long v126 = sub_2964C4(*(uint64_t *)&v367, v125, 1);
                char v122 = 0;
                uint64_t v127 = &v126[*(unsigned __int16 *)&v126[-*(int *)v126 + 4]];
                uint64_t v128 = (uint64_t)&v127[4 * HIDWORD(v125) + *(unsigned int *)v127];
                char v129 = (int *)(v128 + 4 + *(unsigned int *)(v128 + 4));
                double v121 = v367;
                double v130 = (unsigned int *)((char *)v129 + *(unsigned __int16 *)((char *)v129 - *v129 + 6));
                int v124 = *(unsigned int *)((char *)v130 + *v130);
                unint64_t v123 = (unint64_t)((char *)v369 - (unsigned char *)v368) >> 3;
                long long v360 = 0u;
                long long v361 = 0u;
LABEL_169:
                uint64_t v362 = 0;
              }
              *(_OWORD *)float64x2_t __p = v363;
              long long v350 = v364;
              *(_OWORD *)v351 = v365;
              long long v352 = v366;
              *(double *)v395 = v121;
              *(_OWORD *)&v395[8] = v360;
              *(_OWORD *)&v395[24] = v361;
              uint64_t v396 = v362;
              int v397 = v123;
              int v398 = v124;
              char v399 = v122;
              *(_DWORD *)((char *)v400 + 3) = *(_DWORD *)((char *)v359 + 3);
              v400[0] = v359[0];
              long long v131 = v363;
              LODWORD(v132) = v366;
              unsigned int v133 = DWORD1(v366);
              int v342 = v123;
              if ((void)v366 == __PAIR64__(v124, v123))
              {
                sub_6CFD9C((const void **)&v371, v120, (long long *)__p, (long long *)v395, 0);
                goto LABEL_320;
              }
              int v341 = v124;
              unint64_t v134 = (char *)*((void *)&v364 + 1);
              uint64_t v346 = v363 + 16;
              if (BYTE8(v366))
              {
                uint64_t v344 = 0;
                unsigned int v135 = **((_DWORD **)&v364 + 1);
                while (1)
                {
                  unsigned int v136 = v133 - 1;
                  if (v133 - 1 >= v135)
                  {
                    uint64_t v139 = **((void **)&v131 + 1);
                    unint64_t v132 = (v132 - 1);
                    if (v132 < (uint64_t)(*(void *)(*((void *)&v131 + 1) + 8) - **((void **)&v131 + 1)) >> 3) {
                      goto LABEL_182;
                    }
                    goto LABEL_243;
                  }
                  long double v137 = &v134[4 * v133 + 4];
                  long double v138 = &v134[4 * v136 + 4];
                  if (*(unsigned __int16 *)v137 != *(unsigned __int16 *)v138
                    || *((unsigned __int16 *)v137 + 1) != *((unsigned __int16 *)v138 + 1))
                  {
                    goto LABEL_243;
                  }
                  uint64_t v139 = **((void **)&v131 + 1);
                  uint64_t v140 = *(void *)(*((void *)&v131 + 1) + 8) - **((void **)&v131 + 1);
                  if (v135 == 2 && v140 == 8)
                  {
                    unsigned int v135 = 2;
LABEL_243:
                    unsigned int v133 = v136;
                    goto LABEL_244;
                  }
                  unsigned int v136 = v133 - 2;
                  unint64_t v132 = (v132 - 1);
                  if (v132 >= v140 >> 3) {
                    goto LABEL_243;
                  }
                  do
                  {
LABEL_182:
                    unint64_t v141 = *(void *)(v139 + 8 * v132);
                    LODWORD(v394) = v141;
                    v403[0] = 1;
                    uint64_t v401 = (uint64_t)v403;
                    v402 = &v394;
                    unint64_t v142 = *(void *)(v131 + 3856) + 1;
                    *(void *)(v131 + 3856) = v142;
                    if (!*(void *)v131) {
                      goto LABEL_192;
                    }
                    if (*(_DWORD *)(v131 + 112) == v141)
                    {
                      unsigned int v143 = 4;
                      goto LABEL_191;
                    }
                    if (*(_DWORD *)(v131 + 136) == v141)
                    {
                      unsigned int v143 = 5;
                      goto LABEL_191;
                    }
                    if (*(_DWORD *)(v131 + 160) == v141)
                    {
                      unsigned int v143 = 6;
                      goto LABEL_191;
                    }
                    if (*(_DWORD *)(v131 + 184) == v141)
                    {
                      unsigned int v143 = 7;
LABEL_191:
                      ++*(void *)(v131 + 3864);
                      uint64_t v144 = v346 + 24 * v143;
                      *(void *)(v144 + 8) = v142;
                      if (*(void *)(v144 + 16)) {
                        goto LABEL_193;
                      }
LABEL_192:
                      sub_296654((int **)&v401);
                      goto LABEL_193;
                    }
                    unint64_t v151 = *(void *)(v131 + 168);
                    unint64_t v152 = *(void *)(v131 + 144);
                    unint64_t v153 = *(void *)(v131 + 120);
                    unint64_t v154 = *(void *)(v131 + 192);
                    uint64_t v155 = sub_2AB884(*(void *)v131, 1, v141, 1);
                    if (v153 >= v142) {
                      unint64_t v156 = v142;
                    }
                    else {
                      unint64_t v156 = v153;
                    }
                    BOOL v157 = v152 >= v156;
                    if (v152 < v156) {
                      unint64_t v156 = v152;
                    }
                    unsigned int v158 = 4 * (v153 < v142);
                    if (!v157) {
                      unsigned int v158 = 5;
                    }
                    if (v151 < v156)
                    {
                      unsigned int v158 = 6;
                      unint64_t v156 = v151;
                    }
                    if (v154 < v156) {
                      unsigned int v158 = 7;
                    }
                    uint64_t v159 = v346 + 24 * v158;
                    *(_DWORD *)uint64_t v159 = v394;
                    *(void *)(v159 + 8) = *(void *)(v131 + 3856);
                    *(void *)(v159 + 16) = v155;
                    if (!v155) {
                      goto LABEL_192;
                    }
LABEL_193:
                    LODWORD(v394) = v141;
                    v403[0] = 1;
                    uint64_t v401 = (uint64_t)v403;
                    v402 = &v394;
                    unint64_t v145 = *(void *)(v131 + 3856) + 1;
                    *(void *)(v131 + 3856) = v145;
                    if (!*(void *)v131) {
                      goto LABEL_230;
                    }
                    if (*(_DWORD *)(v131 + 112) == v141)
                    {
                      unsigned int v146 = 4;
                      goto LABEL_202;
                    }
                    if (*(_DWORD *)(v131 + 136) == v141)
                    {
                      unsigned int v146 = 5;
                      goto LABEL_202;
                    }
                    if (*(_DWORD *)(v131 + 160) == v141)
                    {
                      unsigned int v146 = 6;
                      goto LABEL_202;
                    }
                    if (*(_DWORD *)(v131 + 184) == v141)
                    {
                      unsigned int v146 = 7;
LABEL_202:
                      ++*(void *)(v131 + 3864);
                      uint64_t v147 = v346 + 24 * v146;
                      *(void *)(v147 + 8) = v145;
                      long double v148 = *(unsigned int **)(v147 + 16);
                      if (v148) {
                        goto LABEL_203;
                      }
                      goto LABEL_230;
                    }
                    unint64_t v160 = *(void *)(v131 + 168);
                    unint64_t v161 = *(void *)(v131 + 144);
                    unint64_t v162 = *(void *)(v131 + 120);
                    unint64_t v163 = *(void *)(v131 + 192);
                    long double v148 = (unsigned int *)sub_2AB884(*(void *)v131, 1, v141, 1);
                    if (v162 >= v145) {
                      unint64_t v164 = v145;
                    }
                    else {
                      unint64_t v164 = v162;
                    }
                    BOOL v165 = v161 >= v164;
                    if (v161 < v164) {
                      unint64_t v164 = v161;
                    }
                    unsigned int v166 = 4 * (v162 < v145);
                    if (!v165) {
                      unsigned int v166 = 5;
                    }
                    if (v160 < v164)
                    {
                      unsigned int v166 = 6;
                      unint64_t v164 = v160;
                    }
                    if (v163 < v164) {
                      unsigned int v166 = 7;
                    }
                    uint64_t v167 = v346 + 24 * v166;
                    *(_DWORD *)uint64_t v167 = v394;
                    *(void *)(v167 + 8) = *(void *)(v131 + 3856);
                    *(void *)(v167 + 16) = v148;
                    if (v148)
                    {
LABEL_203:
                      long double v149 = (int *)((char *)v148 + *v148);
                      double v150 = (unsigned __int16 *)((char *)v149 - *v149);
                      if (*v150 < 5u) {
                        goto LABEL_233;
                      }
                      goto LABEL_231;
                    }
LABEL_230:
                    sub_296654((int **)&v401);
                    long double v149 = 0;
                    double v150 = (_WORD *)(&loc_1120530 + 1);
                    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                      goto LABEL_233;
                    }
LABEL_231:
                    uint64_t v168 = v150[2];
                    if (!v168)
                    {
LABEL_233:
                      uint64_t v169 = 0;
                      goto LABEL_234;
                    }
                    uint64_t v169 = (char *)v149 + v168 + *(unsigned int *)((char *)v149 + v168);
LABEL_234:
                    uint64_t v170 = &v169[4 * HIDWORD(v141) + 4 + *(unsigned int *)&v169[4 * HIDWORD(v141) + 4]];
                    int64_t v171 = &v170[-*(int *)v170];
                    if (*(unsigned __int16 *)v171 >= 7u && (uint64_t v172 = *((unsigned __int16 *)v171 + 3)) != 0) {
                      unint64_t v134 = &v170[v172 + *(unsigned int *)&v170[v172]];
                    }
                    else {
                      unint64_t v134 = 0;
                    }
                    unsigned int v135 = *(_DWORD *)v134;
                    unsigned int v133 = *(_DWORD *)v134 - 2;
                    uint64_t v173 = &v134[4 * (*(_DWORD *)v134 - 1) + 4];
                    double v174 = &v134[4 * v133 + 4];
                    if (*(unsigned __int16 *)v173 != *(unsigned __int16 *)v174
                      || *((unsigned __int16 *)v173 + 1) != *((unsigned __int16 *)v174 + 1))
                    {
                      goto LABEL_244;
                    }
                    unint64_t v132 = (v132 - 1);
                    uint64_t v139 = **((void **)&v131 + 1);
                  }
                  while (v132 < (uint64_t)(*(void *)(*((void *)&v131 + 1) + 8) - **((void **)&v131 + 1)) >> 3);
                  unsigned int v133 = v135 - 3;
LABEL_244:
                  ++v344;
                  if (v132 == v342 && v133 == v341)
                  {
LABEL_319:
                    sub_6CFD9C((const void **)&v371, v332, (long long *)__p, (long long *)v395, v344);
LABEL_320:
                    uint64_t v56 = v339;
                    if (v368)
                    {
                      v369 = v368;
                      operator delete(v368);
                    }
                    unint64_t v111 = v333 + 1;
                    double v101 = v340;
                    if (v333 + 1 == v330) {
                      goto LABEL_156;
                    }
                    goto LABEL_164;
                  }
                }
              }
              uint64_t v344 = 0;
LABEL_248:
              unsigned int v175 = v133 + 1;
              if (v133 + 1 >= *(_DWORD *)v134)
              {
                uint64_t v178 = **((void **)&v131 + 1);
                unint64_t v132 = (v132 + 1);
                if (v132 < (uint64_t)(*(void *)(*((void *)&v131 + 1) + 8) - **((void **)&v131 + 1)) >> 3) {
                  goto LABEL_256;
                }
LABEL_254:
                unsigned int v133 = v175;
                goto LABEL_317;
              }
              long long v176 = &v134[4 * v133 + 4];
              long long v177 = &v134[4 * v175 + 4];
              if (*(unsigned __int16 *)v176 != *(unsigned __int16 *)v177) {
                goto LABEL_254;
              }
              if (*((unsigned __int16 *)v176 + 1) != *((unsigned __int16 *)v177 + 1)) {
                goto LABEL_254;
              }
              uint64_t v178 = **((void **)&v131 + 1);
              uint64_t v179 = *(void *)(*((void *)&v131 + 1) + 8) - **((void **)&v131 + 1);
              if (*(_DWORD *)v134 == 2 && v179 == 8) {
                goto LABEL_254;
              }
              unsigned int v175 = v133 + 2;
              unint64_t v132 = (v132 + 1);
              if (v132 >= v179 >> 3) {
                goto LABEL_254;
              }
              while (1)
              {
LABEL_256:
                unint64_t v180 = *(void *)(v178 + 8 * v132);
                LODWORD(v394) = v180;
                v403[0] = 1;
                uint64_t v401 = (uint64_t)v403;
                v402 = &v394;
                unint64_t v181 = *(void *)(v131 + 3856) + 1;
                *(void *)(v131 + 3856) = v181;
                if (!*(void *)v131) {
                  goto LABEL_266;
                }
                if (*(_DWORD *)(v131 + 112) == v180)
                {
                  unsigned int v182 = 4;
                  goto LABEL_265;
                }
                if (*(_DWORD *)(v131 + 136) == v180)
                {
                  unsigned int v182 = 5;
                  goto LABEL_265;
                }
                if (*(_DWORD *)(v131 + 160) == v180) {
                  break;
                }
                if (*(_DWORD *)(v131 + 184) == v180)
                {
                  unsigned int v182 = 7;
LABEL_265:
                  ++*(void *)(v131 + 3864);
                  uint64_t v183 = v346 + 24 * v182;
                  *(void *)(v183 + 8) = v181;
                  if (*(void *)(v183 + 16)) {
                    goto LABEL_267;
                  }
LABEL_266:
                  sub_296654((int **)&v401);
                  goto LABEL_267;
                }
                unint64_t v190 = *(void *)(v131 + 168);
                unint64_t v191 = *(void *)(v131 + 144);
                unint64_t v192 = *(void *)(v131 + 120);
                unint64_t v193 = *(void *)(v131 + 192);
                uint64_t v194 = sub_2AB884(*(void *)v131, 1, v180, 1);
                if (v192 >= v181) {
                  unint64_t v195 = v181;
                }
                else {
                  unint64_t v195 = v192;
                }
                BOOL v196 = v191 >= v195;
                if (v191 < v195) {
                  unint64_t v195 = v191;
                }
                unsigned int v197 = 4 * (v192 < v181);
                if (!v196) {
                  unsigned int v197 = 5;
                }
                if (v190 < v195)
                {
                  unsigned int v197 = 6;
                  unint64_t v195 = v190;
                }
                if (v193 < v195) {
                  unsigned int v197 = 7;
                }
                uint64_t v198 = v346 + 24 * v197;
                *(_DWORD *)uint64_t v198 = v394;
                *(void *)(v198 + 8) = *(void *)(v131 + 3856);
                *(void *)(v198 + 16) = v194;
                if (!v194) {
                  goto LABEL_266;
                }
LABEL_267:
                LODWORD(v394) = v180;
                v403[0] = 1;
                uint64_t v401 = (uint64_t)v403;
                v402 = &v394;
                unint64_t v184 = *(void *)(v131 + 3856) + 1;
                *(void *)(v131 + 3856) = v184;
                if (!*(void *)v131) {
                  goto LABEL_304;
                }
                if (*(_DWORD *)(v131 + 112) == v180)
                {
                  unsigned int v185 = 4;
                  goto LABEL_276;
                }
                if (*(_DWORD *)(v131 + 136) == v180)
                {
                  unsigned int v185 = 5;
                  goto LABEL_276;
                }
                if (*(_DWORD *)(v131 + 160) == v180)
                {
                  unsigned int v185 = 6;
                  goto LABEL_276;
                }
                if (*(_DWORD *)(v131 + 184) == v180)
                {
                  unsigned int v185 = 7;
LABEL_276:
                  ++*(void *)(v131 + 3864);
                  uint64_t v186 = v346 + 24 * v185;
                  *(void *)(v186 + 8) = v184;
                  unint64_t v187 = *(unsigned int **)(v186 + 16);
                  if (v187) {
                    goto LABEL_277;
                  }
                  goto LABEL_304;
                }
                unint64_t v199 = *(void *)(v131 + 168);
                unint64_t v200 = *(void *)(v131 + 144);
                unint64_t v201 = *(void *)(v131 + 120);
                unint64_t v202 = *(void *)(v131 + 192);
                unint64_t v187 = (unsigned int *)sub_2AB884(*(void *)v131, 1, v180, 1);
                if (v201 >= v184) {
                  unint64_t v203 = v184;
                }
                else {
                  unint64_t v203 = v201;
                }
                BOOL v204 = v200 >= v203;
                if (v200 < v203) {
                  unint64_t v203 = v200;
                }
                unsigned int v205 = 4 * (v201 < v184);
                if (!v204) {
                  unsigned int v205 = 5;
                }
                if (v199 < v203)
                {
                  unsigned int v205 = 6;
                  unint64_t v203 = v199;
                }
                if (v202 < v203) {
                  unsigned int v205 = 7;
                }
                uint64_t v206 = v346 + 24 * v205;
                *(_DWORD *)uint64_t v206 = v394;
                *(void *)(v206 + 8) = *(void *)(v131 + 3856);
                *(void *)(v206 + 16) = v187;
                if (v187)
                {
LABEL_277:
                  uint64_t v188 = (int *)((char *)v187 + *v187);
                  uint64_t v189 = (unsigned __int16 *)((char *)v188 - *v188);
                  if (*v189 < 5u) {
                    goto LABEL_307;
                  }
                  goto LABEL_305;
                }
LABEL_304:
                sub_296654((int **)&v401);
                uint64_t v188 = 0;
                uint64_t v189 = (_WORD *)(&loc_1120530 + 1);
                if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                  goto LABEL_307;
                }
LABEL_305:
                uint64_t v207 = v189[2];
                if (!v207)
                {
LABEL_307:
                  double v208 = 0;
                  goto LABEL_308;
                }
                double v208 = (char *)v188 + v207 + *(unsigned int *)((char *)v188 + v207);
LABEL_308:
                double v209 = &v208[4 * HIDWORD(v180) + 4 + *(unsigned int *)&v208[4 * HIDWORD(v180) + 4]];
                double v210 = &v209[-*(int *)v209];
                if (*(unsigned __int16 *)v210 < 7u || (uint64_t v211 = *((unsigned __int16 *)v210 + 3)) == 0)
                {
                  unint64_t v134 = 0;
LABEL_316:
                  unsigned int v133 = 1;
LABEL_317:
                  ++v344;
                  if (v132 == v342 && v133 == v341) {
                    goto LABEL_319;
                  }
                  goto LABEL_248;
                }
                unint64_t v134 = &v209[v211 + *(unsigned int *)&v209[v211]];
                if (*((unsigned __int16 *)v134 + 2) != *((unsigned __int16 *)v134 + 4)
                  || *((unsigned __int16 *)v134 + 3) != *((unsigned __int16 *)v134 + 5))
                {
                  goto LABEL_316;
                }
                unint64_t v132 = (v132 + 1);
                uint64_t v178 = **((void **)&v131 + 1);
                if (v132 >= (uint64_t)(*(void *)(*((void *)&v131 + 1) + 8) - **((void **)&v131 + 1)) >> 3)
                {
                  unsigned int v133 = 2;
                  goto LABEL_317;
                }
              }
              unsigned int v182 = 6;
              goto LABEL_265;
            }
LABEL_322:
            if (a5)
            {
              double v212 = 1.0;
              double v213 = fmin(v91 + v98, 1.0);
              double v214 = vabdd_f64(v213, 1.0);
              if (v213 == 1.0 || v214 < 2.22044605e-16) {
                goto LABEL_376;
              }
            }
            else
            {
              double v213 = 0.0;
              double v212 = fmax(v98 - v91, 0.0);
              double v216 = vabdd_f64(0.0, v212);
              if (v212 == 0.0 || v216 < 2.22044605e-16) {
                goto LABEL_376;
              }
            }
            sub_31854((uint64_t *)&v374, 0, &v367, v213, v212);
            uint64_t v219 = *(char **)&v367;
            v218 = (char *)v368;
            if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v368 - *(void *)&v367) >> 2) >= 2)
            {
              double v220 = 0.0;
              if (*(void **)&v367 != v368)
              {
                uint64_t v221 = (char *)(*(void *)&v367 + 12);
                if ((void *)(*(void *)&v367 + 12) != v368)
                {
                  double v222 = 0.0;
                  do
                  {
                    LODWORD(v220) = *((_DWORD *)v221 - 2);
                    long double v223 = exp(3.14159265 - (double)*(unint64_t *)&v220 * 6.28318531 / 4294967300.0);
                    *(double *)&unint64_t v224 = atan((v223 - 1.0 / v223) * 0.5) * 57.2957795;
                    long double v225 = *(double *)&v224 * 0.0174532925;
                    unsigned int v226 = *((_DWORD *)v221 - 3);
                    LODWORD(v224) = *((_DWORD *)v221 + 1);
                    long double v227 = exp(3.14159265 - (double)v224 * 6.28318531 / 4294967300.0);
                    long double v228 = atan((v227 - 1.0 / v227) * 0.5) * 57.2957795 * 0.0174532925;
                    v229.i64[0] = v226;
                    v229.i64[1] = *(unsigned int *)v221;
                    int64x2_t v230 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v229), v338), v337), v336), v335);
                    double v347 = vsubq_f64((float64x2_t)v230, (float64x2_t)vdupq_laneq_s64(v230, 1)).f64[0];
                    long double v231 = sin((v225 - v228) * 0.5);
                    long double v232 = v231 * v231;
                    double v233 = cos(v225);
                    long double v234 = v233 * cos(v228);
                    long double v235 = sin(0.5 * v347);
                    double v236 = v232 + v234 * (v235 * v235);
                    double v74 = 1.0;
                    long double v237 = atan2(sqrt(v236), sqrt(1.0 - v236));
                    double v220 = (v237 + v237) * 6372797.56;
                    double v222 = v222 + v220;
                    v221 += 12;
                  }
                  while (v221 != v218);
                  double v220 = v222 * 100.0;
                  if (v222 * 100.0 < 0.0)
                  {
                    if (v220 <= -4.50359963e15)
                    {
                      char v240 = 1;
                      double v239 = v222 * 100.0;
                    }
                    else
                    {
                      uint64_t v238 = (uint64_t)(v220 + v220);
                      if (v238 >= 1) {
                        --v238;
                      }
                      double v239 = (double)(v238 >> 1);
                      char v240 = 1;
                    }
LABEL_345:
                    if (v239 >= 9.22337204e18)
                    {
                      uint64_t v242 = 0x7FFFFFFFFFFFFFFELL;
                    }
                    else
                    {
                      if (v240)
                      {
                        if (v220 > -4.50359963e15)
                        {
                          uint64_t v241 = (uint64_t)(v220 + v220);
                          if (v241 >= 1) {
                            --v241;
                          }
LABEL_354:
                          double v220 = (double)(v241 >> 1);
                        }
                      }
                      else if (v220 < 4.50359963e15)
                      {
                        uint64_t v241 = (uint64_t)(v220 + v220) + 1;
                        goto LABEL_354;
                      }
                      uint64_t v242 = (uint64_t)v220;
                    }
                    unint64_t v243 = v369;
                    v368 = 0;
                    v369 = 0;
                    double v367 = 0.0;
                    uint64_t v244 = *(void *)(v56 + 8);
                    long long v245 = v340[1];
                    *(_OWORD *)v395 = *v340;
                    *(_OWORD *)&v395[16] = v245;
                    char v246 = (int *)sub_2E2ED4(v244, (int32x2_t *)v395);
                    if (v246
                      && (unint64_t v247 = (unsigned __int16 *)((char *)v246 - *v246), *v247 >= 0xFu)
                      && (uint64_t v248 = v247[7]) != 0)
                    {
                      int v249 = *(int *)((char *)v246 + v248);
                    }
                    else
                    {
                      LOWORD(v249) = 0;
                    }
                    uint64_t v250 = *(void *)(v56 + 8);
                    long long v251 = v340[1];
                    *(_OWORD *)v395 = *v340;
                    *(_OWORD *)&v395[16] = v251;
                    v252 = (int *)sub_2E2ED4(v250, (int32x2_t *)v395);
                    if (v252
                      && (int v253 = (unsigned __int16 *)((char *)v252 - *v252), *v253 >= 0x13u)
                      && (uint64_t v254 = v253[9]) != 0)
                    {
                      uint64_t v255 = *(int *)((char *)v252 + v254);
                    }
                    else
                    {
                      uint64_t v255 = 0;
                    }
                    uint64_t v256 = *(void *)(v56 + 8);
                    long long v257 = v340[1];
                    *(_OWORD *)v395 = *v340;
                    *(_OWORD *)&v395[16] = v257;
                    unsigned int v258 = (int *)sub_2E2ED4(v256, (int32x2_t *)v395);
                    double v259 = 0.0;
                    if (v258)
                    {
                      uint64_t v260 = (unsigned __int16 *)((char *)v258 - *v258);
                      if (*v260 >= 0x19u)
                      {
                        uint64_t v261 = v260[12];
                        if (v261) {
                          double v259 = *(float *)((char *)v258 + v261);
                        }
                      }
                    }
                    long long v262 = v340[1];
                    *(_OWORD *)float64x2_t __p = *v340;
                    long long v350 = v262;
                    v351[0] = v219;
                    v351[1] = v218;
                    *(void *)&long long v352 = v243;
                    WORD4(v352) = v249;
                    uint64_t v353 = v255;
                    uint64_t v354 = v242;
                    double v355 = v259;
                    BOOL v356 = v329;
                    BOOL v357 = v328;
                    char v358 = 0;
                    sub_E9AC1C((uint64_t)&v386, (uint64_t)__p);
                    if (v351[0])
                    {
                      v351[1] = v351[0];
                      operator delete(v351[0]);
                    }
                    uint64_t v219 = *(char **)&v367;
                    goto LABEL_373;
                  }
                  if (v220 >= 4.50359963e15)
                  {
                    char v240 = 0;
                    double v239 = v222 * 100.0;
                    goto LABEL_345;
                  }
                }
              }
              char v240 = 0;
              double v239 = (double)(((uint64_t)(v220 + v220) + 1) >> 1);
              goto LABEL_345;
            }
LABEL_373:
            double v101 = v340;
            if (v219)
            {
              v368 = v219;
              char v263 = v219;
              goto LABEL_375;
            }
LABEL_376:
            if (v374)
            {
              v375 = (char *)v374;
              operator delete(v374);
            }
            unint64_t v71 = v101 + 3;
            if (v71 == v327)
            {
LABEL_431:
              long long v312 = v387;
              *(_OWORD *)a6 = v386;
              *(_OWORD *)(a6 + 16) = v312;
              *(_DWORD *)(a6 + 32) = v388;
              long long v313 = v389;
              long long v389 = 0uLL;
              *(_OWORD *)(a6 + 40) = v313;
              long long v314 = v390;
              *(_OWORD *)(a6 + 56) = v390;
              *(_DWORD *)(a6 + 72) = v391;
              if (*((void *)&v314 + 1))
              {
                unint64_t v315 = *(void *)(v314 + 8);
                if ((*((void *)&v313 + 1) & (*((void *)&v313 + 1) - 1)) != 0)
                {
                  if (v315 >= *((void *)&v313 + 1)) {
                    v315 %= *((void *)&v313 + 1);
                  }
                }
                else
                {
                  v315 &= *((void *)&v313 + 1) - 1;
                }
                *(void *)(v313 + 8 * v315) = a6 + 56;
                long long v390 = 0uLL;
              }
              *(_OWORD *)(a6 + 80) = *(_OWORD *)v392;
              *(void *)(a6 + 96) = v393;
              v392[1] = 0;
              uint64_t v393 = 0;
              v392[0] = 0;
              if (v378)
              {
                v379 = v378;
                operator delete(v378);
              }
              double v51 = (char *)v381;
              if (v381) {
                goto LABEL_442;
              }
              goto LABEL_443;
            }
          }
        }
LABEL_72:
        *(void *)&long long v350 = v64;
        operator delete(v64);
        goto LABEL_73;
      }
    }
    unint64_t v68 = 0xFFFFFFFF00000000;
    int v70 = 0x7FFFFFFF;
    uint64_t v69 = 0xFFFFFFFFLL;
    if (!v64) {
      goto LABEL_73;
    }
    goto LABEL_72;
  }
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(void *)(a6 + 8) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a6 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a6 + 32) = 3;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(_DWORD *)(a6 + 72) = 1065353216;
  *(void *)(a6 + 88) = 0;
  *(void *)(a6 + 96) = 0;
  *(void *)(a6 + 80) = 0;
  if (v51) {
LABEL_442:
  }
    operator delete(v51);
LABEL_443:
  if (v384)
  {
    v385 = (char *)v384;
    operator delete(v384);
  }
  v316 = (char *)v392[0];
  if (v392[0])
  {
    v317 = (char *)v392[1];
    v318 = v392[0];
    if (v392[1] != v392[0])
    {
      do
      {
        v319 = (void *)*((void *)v317 - 8);
        if (v319)
        {
          *((void *)v317 - 7) = v319;
          operator delete(v319);
        }
        v317 -= 96;
      }
      while (v317 != v316);
      v318 = v392[0];
    }
    v392[1] = v316;
    operator delete(v318);
  }
  v320 = (void *)v390;
  if ((void)v390)
  {
    do
    {
      v321 = (void *)*v320;
      operator delete(v320);
      v320 = v321;
    }
    while (v321);
  }
  v322 = (void *)v389;
  *(void *)&long long v389 = 0;
  if (v322) {
    operator delete(v322);
  }
}

void sub_E85A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a71) {
    operator delete(a71);
  }
  BOOL v72 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v72;
    operator delete(v72);
  }
  int v73 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v73;
    operator delete(v73);
  }
  double v74 = (void *)STACK[0x258];
  if (STACK[0x258])
  {
    STACK[0x260] = (unint64_t)v74;
    operator delete(v74);
    BOOL v75 = (void *)STACK[0x270];
    if (!STACK[0x270])
    {
LABEL_11:
      BOOL v76 = (void *)STACK[0x288];
      if (!STACK[0x288]) {
        goto LABEL_12;
      }
      goto LABEL_15;
    }
  }
  else
  {
    BOOL v75 = (void *)STACK[0x270];
    if (!STACK[0x270]) {
      goto LABEL_11;
    }
  }
  STACK[0x278] = (unint64_t)v75;
  operator delete(v75);
  BOOL v76 = (void *)STACK[0x288];
  if (!STACK[0x288])
  {
LABEL_12:
    sub_E832B4(&STACK[0x2A0]);
    _Unwind_Resume(a1);
  }
LABEL_15:
  STACK[0x290] = (unint64_t)v76;
  operator delete(v76);
  sub_E832B4(&STACK[0x2A0]);
  _Unwind_Resume(a1);
}

void sub_E85C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)sub_68EA4(a2);
  if (*v6 == v6[1]) {
    return;
  }
  uint64_t v7 = *(void *)sub_68EA4(a3);
  unint64_t v8 = (uint64_t *)(v7 + 32);
  uint64_t v9 = (uint64_t *)sub_68EA4(a2);
  uint64_t v14 = *v9;
  uint64_t v15 = v9[1];
  if (*v9 == v15)
  {
    double v17 = 1.0;
    goto LABEL_10;
  }
  uint64_t v16 = (uint64_t *)(a1 + 280);
  double v17 = 1.0;
  do
  {
    double v10 = sub_E88F54(*(_DWORD **)(v14 + 32), v8, v16, 0, v10, v11, v12, v13);
    if (v10 < v17) {
      double v17 = v10;
    }
    v14 += 96;
  }
  while (v14 != v15);
  if (v17 >= 0.0)
  {
LABEL_10:
    double v18 = 0.0;
    sub_31854(v8, 0, &v50, 0.0, v17);
    uint64_t v19 = (void *)*v8;
    if (*v8)
    {
      *(void *)(v7 + 40) = v19;
      operator delete(v19);
    }
    uint64_t v20 = v50;
    *(void *)(v7 + 32) = v50;
    unint64_t v21 = (unsigned int *)v51;
    *(_OWORD *)(v7 + 40) = v51;
    unint64_t v22 = v21;
    if (v20 != v21)
    {
      uint64_t v23 = v20 + 3;
      if (v20 + 3 != v21)
      {
        double v24 = 0.0;
        float64x2_t v47 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
        float64x2_t v48 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
        float64x2_t v46 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
        float64x2_t v45 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
        HIDWORD(v25) = 1096306543;
        do
        {
          LODWORD(v25) = *(v23 - 2);
          long double v26 = exp(3.14159265 - (double)*(unint64_t *)&v25 * 6.28318531 / 4294967300.0);
          *(double *)&unint64_t v27 = atan((v26 - 1.0 / v26) * 0.5) * 57.2957795;
          long double v28 = *(double *)&v27 * 0.0174532925;
          unsigned int v29 = *(v23 - 3);
          LODWORD(v27) = v23[1];
          long double v30 = exp(3.14159265 - (double)v27 * 6.28318531 / 4294967300.0);
          long double v31 = atan((v30 - 1.0 / v30) * 0.5) * 57.2957795 * 0.0174532925;
          v32.i64[0] = v29;
          v32.i64[1] = *v23;
          int64x2_t v33 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v32), v48), v46), v47), v45);
          double v49 = vsubq_f64((float64x2_t)v33, (float64x2_t)vdupq_laneq_s64(v33, 1)).f64[0];
          long double v34 = sin((v28 - v31) * 0.5);
          long double v35 = v34 * v34;
          double v36 = cos(v28);
          long double v37 = v36 * cos(v31);
          long double v38 = sin(0.5 * v49);
          long double v39 = atan2(sqrt(v35 + v37 * (v38 * v38)), sqrt(1.0 - (v35 + v37 * (v38 * v38))));
          double v25 = (v39 + v39) * 6372797.56;
          double v24 = v24 + v25;
          v23 += 3;
        }
        while (v23 != v22);
        double v18 = v24 * 100.0;
        if (v24 * 100.0 < 0.0)
        {
          if (v18 <= -4.50359963e15)
          {
            char v42 = 1;
            double v41 = v24 * 100.0;
          }
          else
          {
            uint64_t v40 = (uint64_t)(v18 + v18);
            if (v40 >= 1) {
              --v40;
            }
            double v41 = (double)(v40 >> 1);
            char v42 = 1;
          }
LABEL_23:
          if (v41 >= 9.22337204e18)
          {
            uint64_t v44 = 0x7FFFFFFFFFFFFFFELL;
LABEL_34:
            *(void *)(*(void *)sub_68EA4(a3) + 72) = v44;
            return;
          }
          if (v42)
          {
            if (v18 > -4.50359963e15)
            {
              uint64_t v43 = (uint64_t)(v18 + v18);
              if (v43 >= 1) {
                --v43;
              }
              goto LABEL_32;
            }
          }
          else if (v18 < 4.50359963e15)
          {
            uint64_t v43 = (uint64_t)(v18 + v18) + 1;
LABEL_32:
            double v18 = (double)(v43 >> 1);
          }
          uint64_t v44 = (uint64_t)v18;
          goto LABEL_34;
        }
        if (v18 >= 4.50359963e15)
        {
          char v42 = 0;
          double v41 = v24 * 100.0;
          goto LABEL_23;
        }
      }
    }
    char v42 = 0;
    double v41 = (double)(((uint64_t)(v18 + v18) + 1) >> 1);
    goto LABEL_23;
  }
}

void sub_E8602C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = sub_46C760(a2) - 1;
  uint64_t v9 = a3[1];
  if ((unint64_t)(v9 - *a3) < 0x11) {
    long long v117 = 0xFFFFFFFF00000000;
  }
  else {
    long long v117 = *(_OWORD *)(v9 - 32);
  }
  sub_E83BE0(a1, a2, v9 - 16, (int *)&v117, 0, (uint64_t)&v107);
  if (*((void *)&v107 + 1) != 0x7FFFFFFFFFFFFFFFLL && *((void *)&v108 + 1) != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v11 = v115;
    if ((void)v115 != *((void *)&v115 + 1))
    {
      while (*(void *)(v11 + 32) != *(void *)(v11 + 40))
      {
        v11 += 96;
        if (v11 == *((void *)&v115 + 1))
        {
          if (sub_52060((uint64_t)&v107) != v8)
          {
            uint64_t v44 = sub_52060((uint64_t)&v107);
            uint64_t v45 = sub_3C80F8((uint64_t)&v107);
            float64x2_t v46 = (void *)sub_46C8EC(a2, v8);
            float64x2_t v47 = (unsigned __int16 *)(*v46 - *(int *)*v46);
            if (*v47 >= 9u && (uint64_t v48 = v47[4]) != 0) {
              uint64_t v49 = *(unsigned int *)(*v46 + v48);
            }
            else {
              uint64_t v49 = 0;
            }
            sub_E81D40(a1, a2, v44, v45, v8, v49, 0, (uint64_t)&v97);
            if (*((void *)&v97 + 1) != 0x7FFFFFFFFFFFFFFFLL && *((void *)&v98 + 1) != 0x7FFFFFFFFFFFFFFFLL)
            {
              unint64_t v64 = __p[0];
              if (__p[0] != __p[1])
              {
                while (v64[4] != v64[5])
                {
                  v64 += 12;
                  if (v64 == __p[1])
                  {
                    sub_E86910(a1, (uint64_t)&v107, (uint64_t)&v97);
                    unint64_t v65 = *(void *)(a4 + 8);
                    if (v65 >= *(void *)(a4 + 16))
                    {
                      uint64_t v89 = sub_E92854((void **)a4, (uint64_t)&v107);
                    }
                    else
                    {
                      long long v66 = v107;
                      long long v67 = v108;
                      *(_DWORD *)(v65 + 32) = v109;
                      *(_OWORD *)unint64_t v65 = v66;
                      *(_OWORD *)(v65 + 16) = v67;
                      unint64_t v68 = v110;
                      double v110 = 0;
                      *(void *)(v65 + 40) = v68;
                      *(void *)(v65 + 48) = v111;
                      uint64_t v111 = 0;
                      uint64_t v69 = v112;
                      *(void *)(v65 + 56) = v112;
                      uint64_t v70 = v113;
                      *(void *)(v65 + 64) = v113;
                      *(_DWORD *)(v65 + 72) = v114;
                      if (v70)
                      {
                        unint64_t v71 = v69[1];
                        unint64_t v72 = *(void *)(v65 + 48);
                        if ((v72 & (v72 - 1)) != 0)
                        {
                          if (v71 >= v72) {
                            v71 %= v72;
                          }
                        }
                        else
                        {
                          v71 &= v72 - 1;
                        }
                        v68[v71] = v65 + 56;
                        unint64_t v112 = 0;
                        uint64_t v113 = 0;
                      }
                      *(void *)(v65 + 80) = 0;
                      *(void *)(v65 + 88) = 0;
                      *(void *)(v65 + 96) = 0;
                      *(_OWORD *)(v65 + 80) = v115;
                      *(void *)(v65 + 96) = v116;
                      long long v115 = 0uLL;
                      uint64_t v116 = 0;
                      uint64_t v89 = (char *)(v65 + 104);
                    }
                    *(void *)(a4 + 8) = v89;
                    if ((unint64_t)v89 >= *(void *)(a4 + 16))
                    {
                      uint64_t v82 = sub_E92854((void **)a4, (uint64_t)&v97);
                    }
                    else
                    {
                      long long v90 = v97;
                      long long v91 = v98;
                      *((_DWORD *)v89 + 8) = v99;
                      *(_OWORD *)uint64_t v89 = v90;
                      *((_OWORD *)v89 + 1) = v91;
                      uint64_t v92 = v100;
                      double v100 = 0;
                      *((void *)v89 + 5) = v92;
                      *((void *)v89 + 6) = v101;
                      uint64_t v101 = 0;
                      double v93 = v102;
                      *((void *)v89 + 7) = v102;
                      uint64_t v94 = v103;
                      *((void *)v89 + 8) = v103;
                      *((_DWORD *)v89 + 18) = v104;
                      if (v94)
                      {
                        unint64_t v95 = v93[1];
                        unint64_t v96 = *((void *)v89 + 6);
                        if ((v96 & (v96 - 1)) != 0)
                        {
                          if (v95 >= v96) {
                            v95 %= v96;
                          }
                        }
                        else
                        {
                          v95 &= v96 - 1;
                        }
                        v92[v95] = v89 + 56;
                        uint64_t v102 = 0;
                        uint64_t v103 = 0;
                      }
                      *((void *)v89 + 10) = 0;
                      *((void *)v89 + 11) = 0;
                      *((void *)v89 + 12) = 0;
                      *((_OWORD *)v89 + 5) = *(_OWORD *)__p;
                      *((void *)v89 + 12) = v106;
                      __p[0] = 0;
                      __p[1] = 0;
                      uint64_t v106 = 0;
                      uint64_t v82 = v89 + 104;
                    }
                    goto LABEL_99;
                  }
                }
              }
            }
            unint64_t v73 = *(void *)(a4 + 8);
            if (v73 >= *(void *)(a4 + 16))
            {
              uint64_t v82 = sub_E92854((void **)a4, (uint64_t)&v107);
            }
            else
            {
              long long v74 = v107;
              long long v75 = v108;
              *(_DWORD *)(v73 + 32) = v109;
              *(_OWORD *)unint64_t v73 = v74;
              *(_OWORD *)(v73 + 16) = v75;
              BOOL v76 = v110;
              double v110 = 0;
              *(void *)(v73 + 40) = v76;
              *(void *)(v73 + 48) = v111;
              uint64_t v111 = 0;
              long long v77 = v112;
              *(void *)(v73 + 56) = v112;
              uint64_t v78 = v113;
              *(void *)(v73 + 64) = v113;
              *(_DWORD *)(v73 + 72) = v114;
              if (v78)
              {
                unint64_t v79 = v77[1];
                unint64_t v80 = *(void *)(v73 + 48);
                if ((v80 & (v80 - 1)) != 0)
                {
                  if (v79 >= v80) {
                    v79 %= v80;
                  }
                }
                else
                {
                  v79 &= v80 - 1;
                }
                v76[v79] = v73 + 56;
                unint64_t v112 = 0;
                uint64_t v113 = 0;
              }
              *(void *)(v73 + 80) = 0;
              *(void *)(v73 + 88) = 0;
              *(void *)(v73 + 96) = 0;
              *(_OWORD *)(v73 + 80) = v115;
              *(void *)(v73 + 96) = v116;
              long long v115 = 0uLL;
              uint64_t v116 = 0;
              uint64_t v82 = (char *)(v73 + 104);
            }
LABEL_99:
            *(void *)(a4 + 8) = v82;
            ++*(_DWORD *)(*(void *)(a1 + 288) + 8);
            long long v83 = (char *)__p[0];
            if (__p[0])
            {
              uint64_t v84 = (char *)__p[1];
              double v85 = __p[0];
              if (__p[1] != __p[0])
              {
                do
                {
                  double v86 = (void *)*((void *)v84 - 8);
                  if (v86)
                  {
                    *((void *)v84 - 7) = v86;
                    operator delete(v86);
                  }
                  v84 -= 96;
                }
                while (v84 != v83);
                double v85 = __p[0];
              }
              __p[1] = v83;
              operator delete(v85);
            }
            double v87 = v102;
            if (v102)
            {
              do
              {
                long long v88 = (void *)*v87;
                operator delete(v87);
                double v87 = v88;
              }
              while (v88);
            }
            goto LABEL_52;
          }
          unint64_t v12 = *(void *)(a4 + 8);
          if (v12 >= *(void *)(a4 + 16))
          {
            int v81 = sub_E92854((void **)a4, (uint64_t)&v107);
          }
          else
          {
            long long v13 = v107;
            long long v14 = v108;
            *(_DWORD *)(v12 + 32) = v109;
            *(_OWORD *)unint64_t v12 = v13;
            *(_OWORD *)(v12 + 16) = v14;
            uint64_t v15 = v110;
            double v110 = 0;
            *(void *)(v12 + 40) = v15;
            *(void *)(v12 + 48) = v111;
            uint64_t v111 = 0;
            uint64_t v16 = v112;
            *(void *)(v12 + 56) = v112;
            uint64_t v17 = v113;
            *(void *)(v12 + 64) = v113;
            *(_DWORD *)(v12 + 72) = v114;
            if (v17)
            {
              unint64_t v18 = v16[1];
              unint64_t v19 = *(void *)(v12 + 48);
              if ((v19 & (v19 - 1)) != 0)
              {
                if (v18 >= v19) {
                  v18 %= v19;
                }
              }
              else
              {
                v18 &= v19 - 1;
              }
              v15[v18] = v12 + 56;
              unint64_t v112 = 0;
              uint64_t v113 = 0;
            }
            *(void *)(v12 + 80) = 0;
            *(void *)(v12 + 88) = 0;
            *(void *)(v12 + 96) = 0;
            *(_OWORD *)(v12 + 80) = v115;
            *(void *)(v12 + 96) = v116;
            long long v115 = 0uLL;
            uint64_t v116 = 0;
            int v81 = (char *)(v12 + 104);
          }
          *(void *)(a4 + 8) = v81;
          ++*(_DWORD *)(*(void *)(a1 + 288) + 8);
          uint64_t v57 = (char *)v115;
          if ((void)v115) {
            goto LABEL_55;
          }
          goto LABEL_62;
        }
      }
    }
  }
  uint64_t v20 = a3[1];
  unint64_t v22 = *(void *)(v20 - 16);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v23 = sub_2E157C(*(void *)(a1 + 8), v22, 1);
  if (v23
    && (double v24 = &v23[-*(int *)v23], *(unsigned __int16 *)v24 >= 5u)
    && (uint64_t v25 = *((unsigned __int16 *)v24 + 2)) != 0
    && (long double v26 = &v23[v25 + *(unsigned int *)&v23[v25]], *(_DWORD *)v26 > HIDWORD(v22))
    && (unint64_t v27 = (int *)sub_2E2690(v26, v22)) != 0)
  {
    long double v28 = (unsigned __int16 *)((char *)v27 - *v27);
    if (*v28 >= 7u && (uint64_t v29 = v28[3]) != 0) {
      uint64_t v30 = *(unsigned int *)((char *)v27 + v29);
    }
    else {
      uint64_t v30 = 0;
    }
  }
  else
  {
    uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  }
  long double v31 = (void *)sub_46C8EC(a2, v8);
  uint64x2_t v32 = (unsigned __int16 *)(*v31 - *(int *)*v31);
  if (*v32 >= 9u && (uint64_t v33 = v32[4]) != 0) {
    uint64_t v34 = *(unsigned int *)(*v31 + v33);
  }
  else {
    uint64_t v34 = 0;
  }
  sub_E81D40(a1, a2, v21, v30, v8, v34, 0, (uint64_t)&v97);
  if (*((void *)&v97 + 1) != 0x7FFFFFFFFFFFFFFFLL && *((void *)&v98 + 1) != 0x7FFFFFFFFFFFFFFFLL)
  {
    long double v35 = __p[0];
    if (__p[0] != __p[1])
    {
      while (v35[4] != v35[5])
      {
        v35 += 12;
        if (v35 == __p[1])
        {
          unint64_t v36 = *(void *)(a4 + 8);
          if (v36 >= *(void *)(a4 + 16))
          {
            *(void *)(a4 + 8) = sub_E92854((void **)a4, (uint64_t)&v97);
            break;
          }
          long long v37 = v97;
          long long v38 = v98;
          *(_DWORD *)(v36 + 32) = v99;
          *(_OWORD *)unint64_t v36 = v37;
          *(_OWORD *)(v36 + 16) = v38;
          long double v39 = v100;
          double v100 = 0;
          *(void *)(v36 + 40) = v39;
          *(void *)(v36 + 48) = v101;
          uint64_t v101 = 0;
          uint64_t v40 = v102;
          *(void *)(v36 + 56) = v102;
          uint64_t v41 = v103;
          *(void *)(v36 + 64) = v103;
          *(_DWORD *)(v36 + 72) = v104;
          if (v41)
          {
            unint64_t v42 = v40[1];
            unint64_t v43 = *(void *)(v36 + 48);
            if ((v43 & (v43 - 1)) != 0)
            {
              if (v42 >= v43) {
                v42 %= v43;
              }
            }
            else
            {
              v42 &= v43 - 1;
            }
            v39[v42] = v36 + 56;
            uint64_t v102 = 0;
            uint64_t v103 = 0;
          }
          *(void *)(v36 + 80) = 0;
          *(void *)(v36 + 88) = 0;
          *(void *)(v36 + 96) = 0;
          *(_OWORD *)(v36 + 80) = *(_OWORD *)__p;
          *(void *)(v36 + 96) = v106;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v106 = 0;
          *(void *)(a4 + 8) = v36 + 104;
          ++*(_DWORD *)(*(void *)(a1 + 288) + 28);
          uint64_t v50 = (char *)__p[0];
          if (__p[0]) {
            goto LABEL_43;
          }
          goto LABEL_50;
        }
      }
    }
  }
  ++*(_DWORD *)(*(void *)(a1 + 288) + 28);
  uint64_t v50 = (char *)__p[0];
  if (__p[0])
  {
LABEL_43:
    long long v51 = (char *)__p[1];
    double v52 = v50;
    if (__p[1] != v50)
    {
      do
      {
        unsigned int v53 = (void *)*((void *)v51 - 8);
        if (v53)
        {
          *((void *)v51 - 7) = v53;
          operator delete(v53);
        }
        v51 -= 96;
      }
      while (v51 != v50);
      double v52 = (char *)__p[0];
    }
    __p[1] = v50;
    operator delete(v52);
  }
LABEL_50:
  uint64_t v54 = v102;
  if (v102)
  {
    do
    {
      uint64_t v55 = (void *)*v54;
      operator delete(v54);
      uint64_t v54 = v55;
    }
    while (v55);
  }
LABEL_52:
  uint64_t v56 = v100;
  double v100 = 0;
  if (v56) {
    operator delete(v56);
  }
  uint64_t v57 = (char *)v115;
  if ((void)v115)
  {
LABEL_55:
    unsigned int v58 = (char *)*((void *)&v115 + 1);
    int v59 = v57;
    if (*((char **)&v115 + 1) != v57)
    {
      do
      {
        uint64_t v60 = (void *)*((void *)v58 - 8);
        if (v60)
        {
          *((void *)v58 - 7) = v60;
          operator delete(v60);
        }
        v58 -= 96;
      }
      while (v58 != v57);
      int v59 = (char *)v115;
    }
    *((void *)&v115 + 1) = v57;
    operator delete(v59);
  }
LABEL_62:
  uint64_t v61 = v112;
  if (v112)
  {
    do
    {
      uint64_t v62 = (void *)*v61;
      operator delete(v61);
      uint64_t v61 = v62;
    }
    while (v62);
  }
  uint64_t v63 = v110;
  double v110 = 0;
  if (v63) {
    operator delete(v63);
  }
}

void sub_E868B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

void sub_E868D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_E832B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E868E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_E832B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E868FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_E832B4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E86910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)sub_68EA4(a3);
  uint64_t v7 = v6 + 4;
  uint64_t v8 = (uint64_t *)sub_68EA4(a2);
  uint64_t v13 = *v8;
  uint64_t v14 = v8[1];
  if (*v8 == v14)
  {
    double v16 = 0.0;
  }
  else
  {
    uint64_t v15 = (uint64_t *)(a1 + 280);
    double v16 = 0.0;
    do
    {
      double v9 = sub_E88F54((_DWORD *)(*(void *)(v13 + 40) - 12), v7, v15, 1, v9, v10, v11, v12);
      if (v16 < v9) {
        double v16 = v9;
      }
      v13 += 96;
    }
    while (v13 != v14);
  }
  sub_32F08(v7, 1, 0, v52, 1.0);
  sub_32F08((uint64_t *)v52, 0, 0, &v50, fmin(v16, 1.0));
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  uint64_t v17 = (void *)*v7;
  if (*v7)
  {
    v6[5] = v17;
    operator delete(v17);
    *uint64_t v7 = 0;
    v6[5] = 0;
    v6[6] = 0;
  }
  unint64_t v18 = v50;
  v6[4] = v50;
  unint64_t v19 = (unsigned int *)v51;
  *(_OWORD *)(v6 + 5) = v51;
  uint64_t v20 = v19;
  double v21 = 0.0;
  if (v18 == v20) {
    goto LABEL_22;
  }
  unint64_t v22 = v18 + 3;
  if (v18 + 3 == v20) {
    goto LABEL_22;
  }
  double v23 = 0.0;
  float64x2_t v47 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  float64x2_t v48 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v46 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v45 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  HIDWORD(v24) = 1096306543;
  do
  {
    LODWORD(v24) = *(v22 - 2);
    long double v25 = exp(3.14159265 - (double)*(unint64_t *)&v24 * 6.28318531 / 4294967300.0);
    *(double *)&unint64_t v26 = atan((v25 - 1.0 / v25) * 0.5) * 57.2957795;
    long double v27 = *(double *)&v26 * 0.0174532925;
    unsigned int v28 = *(v22 - 3);
    LODWORD(v26) = v22[1];
    long double v29 = exp(3.14159265 - (double)v26 * 6.28318531 / 4294967300.0);
    long double v30 = atan((v29 - 1.0 / v29) * 0.5) * 57.2957795 * 0.0174532925;
    v31.i64[0] = v28;
    v31.i64[1] = *v22;
    int64x2_t v32 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v31), v48), v46), v47), v45);
    double v49 = vsubq_f64((float64x2_t)v32, (float64x2_t)vdupq_laneq_s64(v32, 1)).f64[0];
    long double v33 = sin((v27 - v30) * 0.5);
    long double v34 = v33 * v33;
    double v35 = cos(v27);
    long double v36 = v35 * cos(v30);
    long double v37 = sin(0.5 * v49);
    long double v38 = atan2(sqrt(v34 + v36 * (v37 * v37)), sqrt(1.0 - (v34 + v36 * (v37 * v37))));
    double v24 = (v38 + v38) * 6372797.56;
    double v23 = v23 + v24;
    v22 += 3;
  }
  while (v22 != v20);
  double v21 = v23 * 100.0;
  if (v23 * 100.0 >= 0.0)
  {
    if (v21 >= 4.50359963e15)
    {
      char v41 = 0;
      double v40 = v23 * 100.0;
      goto LABEL_23;
    }
LABEL_22:
    char v41 = 0;
    double v40 = (double)(((uint64_t)(v21 + v21) + 1) >> 1);
    goto LABEL_23;
  }
  if (v21 <= -4.50359963e15)
  {
    char v41 = 1;
    double v40 = v23 * 100.0;
  }
  else
  {
    uint64_t v39 = (uint64_t)(v21 + v21);
    if (v39 >= 1) {
      --v39;
    }
    double v40 = (double)(v39 >> 1);
    char v41 = 1;
  }
LABEL_23:
  if (v40 < 9.22337204e18)
  {
    if (v41)
    {
      if (v21 > -4.50359963e15)
      {
        uint64_t v42 = (uint64_t)(v21 + v21);
        if (v42 >= 1) {
          --v42;
        }
        goto LABEL_32;
      }
    }
    else if (v21 < 4.50359963e15)
    {
      uint64_t v42 = (uint64_t)(v21 + v21) + 1;
LABEL_32:
      double v21 = (double)(v42 >> 1);
    }
    uint64_t v43 = (uint64_t)v21;
    goto LABEL_34;
  }
  uint64_t v43 = 0x7FFFFFFFFFFFFFFELL;
LABEL_34:
  uint64_t result = sub_68EA4(a3);
  *(void *)(*(void *)result + 72) = v43;
  return result;
}

void sub_E86D08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 152);
  if (v3)
  {
    *(void *)(v1 - 144) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_E86D24(uint64_t a1, void *a2, int **a3, uint64_t a4)
{
  uint64_t v8 = *a3;
  unint64_t v9 = *((void *)*a3 + 2);
  *(void *)&long long v306 = *(void *)*a3;
  *((void *)&v306 + 1) = v9;
  *((void *)&v307 + 1) = *((void *)v8 + 6);
  uint64_t v10 = *((void *)v8 + 3);
  *(void *)&long long v307 = *((void *)v8 + 4);
  double v11 = sub_2E157C(*(void *)(a1 + 8), v9, 1);
  if (v11
    && (double v12 = &v11[-*(int *)v11], *(unsigned __int16 *)v12 >= 5u)
    && (uint64_t v13 = *((unsigned __int16 *)v12 + 2)) != 0
    && (uint64_t v14 = &v11[v13 + *(unsigned int *)&v11[v13]], *(_DWORD *)v14 > HIDWORD(v9))
    && (uint64_t v15 = (int *)sub_2E2690(v14, v9)) != 0)
  {
    double v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 >= 7u && (uint64_t v17 = v16[3]) != 0) {
      uint64_t v18 = *(unsigned int *)((char *)v15 + v17);
    }
    else {
      uint64_t v18 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v19 = *((void *)*a3 + 4);
  uint64_t v20 = *((void *)*a3 + 5);
  double v21 = sub_2E157C(*(void *)(a1 + 8), v19, 1);
  if (v21
    && (unint64_t v22 = &v21[-*(int *)v21], *(unsigned __int16 *)v22 >= 5u)
    && (uint64_t v23 = *((unsigned __int16 *)v22 + 2)) != 0
    && (double v24 = &v21[v23 + *(unsigned int *)&v21[v23]], *(_DWORD *)v24 > HIDWORD(v19))
    && (long double v25 = (int *)sub_2E2690(v24, v19)) != 0)
  {
    unint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
    if (*v26 < 7u)
    {
      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v27 = v26[3];
      if (v27) {
        uint64_t v27 = *(unsigned int *)((char *)v25 + v27);
      }
    }
  }
  else
  {
    uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *(void *)&long long v298 = v10;
  *((void *)&v298 + 1) = v18;
  *(void *)&long long v299 = v20;
  *((void *)&v299 + 1) = v27;
  long long v301 = 0u;
  long long v302 = 0u;
  int v300 = 3;
  int v303 = 1065353216;
  uint64_t v305 = 0;
  long long v304 = 0uLL;
  BOOL v28 = (unint64_t)v306 >= 0xFFFFFFFF00000000 || v306 == 0;
  BOOL v29 = !v28;
  if (!v28)
  {
    BOOL v30 = *((void *)&v306 + 1) >= 0xFFFFFFFF00000000 || DWORD2(v306) == 0;
    BOOL v29 = !v30;
    if (!v30)
    {
      BOOL v31 = (unint64_t)v307 >= 0xFFFFFFFF00000000 || v307 == 0;
      BOOL v29 = !v31;
      if (!v31) {
        BOOL v29 = *((void *)&v307 + 1) < 0xFFFFFFFF00000000 && DWORD2(v307) != 0;
      }
    }
  }
  if (v29)
  {
    uint64_t v33 = *(void *)(a1 + 8);
    long long v289 = v306;
    long long v290 = v307;
    long double v34 = (int *)sub_2E2ED4(v33, (int32x2_t *)&v289);
    if (v34)
    {
      double v35 = (unsigned __int16 *)((char *)v34 - *v34);
      if (*v35 >= 0xDu)
      {
        uint64_t v36 = v35[6];
        if (v36)
        {
          long double v37 = (int *)((char *)v34 + v36 + *(unsigned int *)((char *)v34 + v36));
          long double v38 = (unsigned __int16 *)((char *)v37 - *v37);
          if (*v38 >= 5u)
          {
            uint64_t v39 = v38[2];
            if (v39)
            {
              if (*(int *)((char *)v37 + v39 + *(unsigned int *)((char *)v37 + v39)))
              {
                if (!*(unsigned char *)(a1 + 72)) {
                  goto LABEL_362;
                }
                uint64_t v40 = *(void *)(a1 + 8);
                long long v289 = v306;
                long long v290 = v307;
                char v41 = (int *)sub_2E2ED4(v40, (int32x2_t *)&v289);
                if (v41 && (uint64_t v42 = (unsigned __int16 *)((char *)v41 - *v41), *v42 >= 0xFu))
                {
                  uint64_t v43 = v42[7];
                  if (v43) {
                    LODWORD(v43) = *(unsigned __int16 *)((char *)v41 + v43);
                  }
                }
                else
                {
                  LODWORD(v43) = 0;
                }
                if (v43 >= *(unsigned __int16 *)(a1 + 48))
                {
LABEL_362:
                  if ((!*(unsigned char *)(a1 + 272)
                     || sub_E8A0AC(a1, (uint64_t)a2, *((void *)*a3 + 1), *((void *)*a3 + 7), (uint64_t)&v306))&& sub_E889B0(a1, &v306))
                  {
                    ++*(_DWORD *)(*(void *)(a1 + 288) + 16);
                    sub_E90878(a1, &v306, 1, 1, 0, (uint64_t)&v289);
                    sub_E9AC1C((uint64_t)&v298, (uint64_t)&v289);
                    if (__p)
                    {
                      v292 = __p;
                      operator delete(__p);
                    }
                    unint64_t v44 = *(void *)(a4 + 8);
                    if (v44 >= *(void *)(a4 + 16))
                    {
                      *(void *)(a4 + 8) = sub_E92854((void **)a4, (uint64_t)&v298);
                    }
                    else
                    {
                      long long v45 = v298;
                      long long v46 = v299;
                      *(_DWORD *)(v44 + 32) = v300;
                      *(_OWORD *)unint64_t v44 = v45;
                      *(_OWORD *)(v44 + 16) = v46;
                      unint64_t v47 = v301;
                      *(void *)&long long v301 = 0;
                      *(_OWORD *)(v44 + 40) = __PAIR128__(*((unint64_t *)&v301 + 1), v47);
                      *((void *)&v301 + 1) = 0;
                      uint64_t v48 = v302;
                      *(void *)(v44 + 56) = v302;
                      uint64_t v49 = *((void *)&v302 + 1);
                      *(void *)(v44 + 64) = *((void *)&v302 + 1);
                      *(_DWORD *)(v44 + 72) = v303;
                      if (v49)
                      {
                        unint64_t v50 = *(void *)(v48 + 8);
                        unint64_t v51 = *(void *)(v44 + 48);
                        if ((v51 & (v51 - 1)) != 0)
                        {
                          if (v50 >= v51) {
                            v50 %= v51;
                          }
                        }
                        else
                        {
                          v50 &= v51 - 1;
                        }
                        *(void *)(v47 + 8 * v50) = v44 + 56;
                        long long v302 = 0uLL;
                      }
                      *(void *)(v44 + 80) = 0;
                      *(void *)(v44 + 88) = 0;
                      *(void *)(v44 + 96) = 0;
                      *(_OWORD *)(v44 + 80) = v304;
                      *(void *)(v44 + 96) = v305;
                      long long v304 = 0uLL;
                      uint64_t v305 = 0;
                      *(void *)(a4 + 8) = v44 + 104;
                    }
                    goto LABEL_237;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  BOOL v52 = (unint64_t)v306 >= 0xFFFFFFFF00000000 || v306 == 0;
  BOOL v53 = !v52;
  if (!v52)
  {
    BOOL v54 = *((void *)&v306 + 1) >= 0xFFFFFFFF00000000 || DWORD2(v306) == 0;
    BOOL v53 = !v54;
    if (!v54)
    {
      BOOL v55 = (unint64_t)v307 >= 0xFFFFFFFF00000000 || v307 == 0;
      BOOL v53 = !v55;
      if (!v55) {
        BOOL v53 = *((void *)&v307 + 1) < 0xFFFFFFFF00000000 && DWORD2(v307) != 0;
      }
    }
  }
  if (v53)
  {
    uint64_t v57 = *(void *)(a1 + 8);
    long long v289 = v306;
    long long v290 = v307;
    unsigned int v58 = (int *)sub_2E2ED4(v57, (int32x2_t *)&v289);
    if (v58)
    {
      int v59 = (unsigned __int16 *)((char *)v58 - *v58);
      if (*v59 >= 0xDu)
      {
        uint64_t v60 = v59[6];
        if (v60)
        {
          uint64_t v61 = (int *)((char *)v58 + v60 + *(unsigned int *)((char *)v58 + v60));
          uint64_t v62 = (unsigned __int16 *)((char *)v61 - *v61);
          if (*v62 >= 5u)
          {
            uint64_t v63 = v62[2];
            if (v63)
            {
              if (*(int *)((char *)v61 + v63 + *(unsigned int *)((char *)v61 + v63)) && !sub_E889B0(a1, &v306)) {
                ++*(_DWORD *)(*(void *)(a1 + 288) + 20);
              }
            }
          }
        }
      }
    }
  }
  sub_E90C28(*(void *)(a1 + 8), *((void *)*a3 + 2), *((void *)*a3 + 4), (uint64_t)&v296);
  unint64_t v64 = (long long *)v296;
  unint64_t v65 = v297;
  if (v296 != v297)
  {
    do
    {
      while (1)
      {
        if (sub_E889B0(a1, v64))
        {
          if (!*(unsigned char *)(a1 + 272)) {
            break;
          }
          uint64_t v66 = *((void *)*a3 + 3);
          uint64_t v67 = *((void *)*a3 + 5);
          *(void *)&long long v289 = sub_2E03F8(*(void *)(a1 + 8), *((void *)v64 + 1), *((void *)v64 + 2));
          if (sub_E8A34C(a1, (uint64_t)a2, v66, v67, (unint64_t *)&v289)) {
            break;
          }
        }
        ++*(_DWORD *)(*(void *)(a1 + 288) + 20);
        v64 += 2;
        if (v64 == v65) {
          goto LABEL_126;
        }
      }
      ++*(_DWORD *)(*(void *)(a1 + 288) + 16);
      unint64_t v68 = *a3;
      int v69 = **a3;
      if (v69 && (int v70 = v68[1], v70 != -1) && *(_DWORD *)v64 == v69)
      {
        char v71 = *((_DWORD *)v64 + 1) == v70;
        int v72 = v68[12];
        if (!v72) {
          goto LABEL_122;
        }
      }
      else
      {
        char v71 = 0;
        int v72 = v68[12];
        if (!v72) {
          goto LABEL_122;
        }
      }
      int v73 = v68[13];
      if (v73 == -1 || *((_DWORD *)v64 + 6) != v72)
      {
LABEL_122:
        char v74 = 0;
        goto LABEL_123;
      }
      char v74 = *((_DWORD *)v64 + 7) == v73;
LABEL_123:
      sub_E90878(a1, v64, v71, v74, 0, (uint64_t)&v289);
      sub_E9AC1C((uint64_t)&v298, (uint64_t)&v289);
      if (__p)
      {
        v292 = __p;
        operator delete(__p);
      }
      v64 += 2;
    }
    while (v64 != v65);
  }
LABEL_126:
  long long v75 = (void *)sub_68EA4((uint64_t)&v298);
  if (*v75 == v75[1])
  {
    sub_E83BE0(a1, a2, (uint64_t)(*a3 + 4), *a3, 0, (uint64_t)&v289);
    sub_E83BE0(a1, a2, (uint64_t)(*a3 + 8), *a3 + 12, 1, (uint64_t)&v279);
    if (*((void *)&v289 + 1) == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_149;
    }
    if (*((void *)&v290 + 1) == 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_149;
    }
    uint64_t v84 = (char *)v294;
    if (v294 == v295) {
      goto LABEL_149;
    }
    do
    {
      if (*((void *)v84 + 4) == *((void *)v84 + 5)) {
        goto LABEL_149;
      }
      v84 += 96;
    }
    while (v84 != v295);
    BOOL v85 = *((void *)&v279 + 1) == 0x7FFFFFFFFFFFFFFFLL || *((void *)&v280 + 1) == 0x7FFFFFFFFFFFFFFFLL;
    if (v85 || (uint64_t v86 = v287, (void)v287 == *((void *)&v287 + 1)))
    {
LABEL_149:
      unint64_t v93 = *((void *)*a3 + 2);
      uint64_t v92 = *((void *)*a3 + 3);
      uint64_t v94 = sub_2E157C(*(void *)(a1 + 8), v93, 1);
      if (v94
        && (unint64_t v95 = &v94[-*(int *)v94], *(unsigned __int16 *)v95 >= 5u)
        && (uint64_t v96 = *((unsigned __int16 *)v95 + 2)) != 0
        && (long long v97 = &v94[v96 + *(unsigned int *)&v94[v96]], *(_DWORD *)v97 > HIDWORD(v93))
        && (long long v98 = (int *)sub_2E2690(v97, v93)) != 0)
      {
        int v99 = (unsigned __int16 *)((char *)v98 - *v98);
        if (*v99 >= 7u && (uint64_t v100 = v99[3]) != 0) {
          uint64_t v101 = *(unsigned int *)((char *)v98 + v100);
        }
        else {
          uint64_t v101 = 0;
        }
      }
      else
      {
        uint64_t v101 = 0x7FFFFFFFFFFFFFFFLL;
      }
      unint64_t v103 = *((void *)*a3 + 4);
      uint64_t v102 = *((void *)*a3 + 5);
      int v104 = sub_2E157C(*(void *)(a1 + 8), v103, 1);
      if (v104
        && (uint64_t v105 = &v104[-*(int *)v104], *(unsigned __int16 *)v105 >= 5u)
        && (uint64_t v106 = *((unsigned __int16 *)v105 + 2)) != 0
        && (long long v107 = &v104[v106 + *(unsigned int *)&v104[v106]], *(_DWORD *)v107 > HIDWORD(v103))
        && (long long v108 = (int *)sub_2E2690(v107, v103)) != 0)
      {
        int v109 = (unsigned __int16 *)((char *)v108 - *v108);
        if (*v109 >= 7u && (uint64_t v110 = v109[3]) != 0) {
          uint64_t v111 = *(unsigned int *)((char *)v108 + v110);
        }
        else {
          uint64_t v111 = 0;
        }
      }
      else
      {
        uint64_t v111 = 0x7FFFFFFFFFFFFFFFLL;
      }
      sub_E81D40(a1, a2, v92, v101, v102, v111, 0, (uint64_t)v270);
      if (*(void *)&v270[8] != 0x7FFFFFFFFFFFFFFFLL && *(void *)&v270[24] != 0x7FFFFFFFFFFFFFFFLL)
      {
        unint64_t v112 = v277[0];
        if (v277[0] != v277[1])
        {
          while (v112[4] != v112[5])
          {
            v112 += 12;
            if (v112 == v277[1])
            {
              unint64_t v113 = *(void *)(a4 + 8);
              if (v113 >= *(void *)(a4 + 16))
              {
                uint64_t v127 = sub_E92854((void **)a4, (uint64_t)v270);
              }
              else
              {
                long long v114 = *(_OWORD *)v270;
                long long v115 = *(_OWORD *)&v270[16];
                *(_DWORD *)(v113 + 32) = v271;
                *(_OWORD *)unint64_t v113 = v114;
                *(_OWORD *)(v113 + 16) = v115;
                uint64_t v116 = v272;
                long double v272 = 0;
                *(void *)(v113 + 40) = v116;
                *(void *)(v113 + 48) = v273;
                uint64_t v273 = 0;
                long long v117 = v274;
                *(void *)(v113 + 56) = v274;
                uint64_t v118 = v275;
                *(void *)(v113 + 64) = v275;
                *(_DWORD *)(v113 + 72) = v276;
                if (v118)
                {
                  unint64_t v119 = v117[1];
                  unint64_t v120 = *(void *)(v113 + 48);
                  if ((v120 & (v120 - 1)) != 0)
                  {
                    if (v119 >= v120) {
                      v119 %= v120;
                    }
                  }
                  else
                  {
                    v119 &= v120 - 1;
                  }
                  v116[v119] = v113 + 56;
                  long double v274 = 0;
                  uint64_t v275 = 0;
                }
                *(void *)(v113 + 80) = 0;
                *(void *)(v113 + 88) = 0;
                *(void *)(v113 + 96) = 0;
                *(_OWORD *)(v113 + 80) = *(_OWORD *)v277;
                *(void *)(v113 + 96) = v278;
                v277[0] = 0;
                v277[1] = 0;
                uint64_t v278 = 0;
                uint64_t v127 = (char *)(v113 + 104);
              }
              *(void *)(a4 + 8) = v127;
              break;
            }
          }
        }
      }
      ++*(_DWORD *)(*(void *)(a1 + 288) + 28);
      uint64_t v128 = (char *)v277[0];
      if (v277[0])
      {
        char v129 = (char *)v277[1];
        double v130 = v277[0];
        if (v277[1] != v277[0])
        {
          do
          {
            long long v131 = (void *)*((void *)v129 - 8);
            if (v131)
            {
              *((void *)v129 - 7) = v131;
              operator delete(v131);
            }
            v129 -= 96;
          }
          while (v129 != v128);
          double v130 = v277[0];
        }
        v277[1] = v128;
        operator delete(v130);
      }
      unint64_t v132 = v274;
      if (v274)
      {
        do
        {
          unsigned int v133 = (void *)*v132;
          operator delete(v132);
          unint64_t v132 = v133;
        }
        while (v133);
      }
      unint64_t v134 = v272;
      long double v272 = 0;
      if (v134) {
        operator delete(v134);
      }
      unsigned int v135 = (char *)v287;
      if (!(void)v287) {
        goto LABEL_219;
      }
LABEL_212:
      unsigned int v136 = (char *)*((void *)&v287 + 1);
      long double v137 = v135;
      if (*((char **)&v287 + 1) != v135)
      {
        do
        {
          long double v138 = (void *)*((void *)v136 - 8);
          if (v138)
          {
            *((void *)v136 - 7) = v138;
            operator delete(v138);
          }
          v136 -= 96;
        }
        while (v136 != v135);
        long double v137 = (char *)v287;
      }
      *((void *)&v287 + 1) = v135;
      operator delete(v137);
LABEL_219:
      uint64_t v139 = v284;
      if (v284)
      {
        do
        {
          uint64_t v140 = (void *)*v139;
          operator delete(v139);
          uint64_t v139 = v140;
        }
        while (v140);
      }
      unint64_t v141 = v282;
      double v282 = 0;
      if (v141) {
        operator delete(v141);
      }
      unint64_t v142 = (char *)v294;
      if (v294)
      {
        unsigned int v143 = v295;
        uint64_t v144 = v294;
        if (v295 != v294)
        {
          do
          {
            unint64_t v145 = (void *)*((void *)v143 - 8);
            if (v145)
            {
              *((void *)v143 - 7) = v145;
              operator delete(v145);
            }
            v143 -= 96;
          }
          while (v143 != v142);
          uint64_t v144 = v294;
        }
        v295 = v142;
        operator delete(v144);
      }
      unsigned int v146 = v293;
      if (v293)
      {
        do
        {
          uint64_t v147 = (void *)*v146;
          operator delete(v146);
          unsigned int v146 = v147;
        }
        while (v147);
      }
      long double v148 = v292;
      v292 = 0;
      if (v148) {
        operator delete(v148);
      }
      goto LABEL_235;
    }
    do
    {
      if (*(void *)(v86 + 32) == *(void *)(v86 + 40)) {
        goto LABEL_149;
      }
      v86 += 96;
    }
    while (v86 != *((void *)&v287 + 1));
    unint64_t v87 = sub_52060((uint64_t)&v289);
    if (v87 < sub_40EFE8((uint64_t)&v279))
    {
LABEL_317:
      sub_E90DD0(a4, (uint64_t)&v289);
      uint64_t v226 = sub_52060((uint64_t)&v289);
      if (v226 + 1 < (unint64_t)sub_40EFE8((uint64_t)&v279))
      {
        uint64_t v227 = sub_52060((uint64_t)&v289);
        uint64_t v228 = sub_3C80F8((uint64_t)&v289);
        uint64_t v229 = sub_40EFE8((uint64_t)&v279);
        uint64_t v230 = sub_52058((uint64_t)&v279);
        sub_E81D40(a1, a2, v227, v228, v229, v230, 0, (uint64_t)v270);
        if (*(void *)&v270[8] != 0x7FFFFFFFFFFFFFFFLL && *(void *)&v270[24] != 0x7FFFFFFFFFFFFFFFLL)
        {
          long double v231 = v277[0];
          if (v277[0] != v277[1])
          {
            while (v231[4] != v231[5])
            {
              v231 += 12;
              if (v231 == v277[1])
              {
                sub_E86910(a1, *(void *)(a4 + 8) - 104, (uint64_t)v270);
                sub_E85C50(a1, (uint64_t)&v279, (uint64_t)v270);
                unint64_t v232 = *(void *)(a4 + 8);
                if (v232 >= *(void *)(a4 + 16))
                {
                  char v240 = sub_E92854((void **)a4, (uint64_t)v270);
                }
                else
                {
                  long long v233 = *(_OWORD *)v270;
                  long long v234 = *(_OWORD *)&v270[16];
                  *(_DWORD *)(v232 + 32) = v271;
                  *(_OWORD *)unint64_t v232 = v233;
                  *(_OWORD *)(v232 + 16) = v234;
                  long double v235 = v272;
                  long double v272 = 0;
                  *(void *)(v232 + 40) = v235;
                  *(void *)(v232 + 48) = v273;
                  uint64_t v273 = 0;
                  double v236 = v274;
                  *(void *)(v232 + 56) = v274;
                  uint64_t v237 = v275;
                  *(void *)(v232 + 64) = v275;
                  *(_DWORD *)(v232 + 72) = v276;
                  if (v237)
                  {
                    unint64_t v238 = v236[1];
                    unint64_t v239 = *(void *)(v232 + 48);
                    if ((v239 & (v239 - 1)) != 0)
                    {
                      if (v238 >= v239) {
                        v238 %= v239;
                      }
                    }
                    else
                    {
                      v238 &= v239 - 1;
                    }
                    v235[v238] = v232 + 56;
                    long double v274 = 0;
                    uint64_t v275 = 0;
                  }
                  *(void *)(v232 + 80) = 0;
                  *(void *)(v232 + 88) = 0;
                  *(void *)(v232 + 96) = 0;
                  *(_OWORD *)(v232 + 80) = *(_OWORD *)v277;
                  *(void *)(v232 + 96) = v278;
                  v277[0] = 0;
                  v277[1] = 0;
                  uint64_t v278 = 0;
                  char v240 = (char *)(v232 + 104);
                }
                *(void *)(a4 + 8) = v240;
                break;
              }
            }
          }
        }
        uint64_t v241 = (char *)v277[0];
        if (v277[0])
        {
          uint64_t v242 = (char *)v277[1];
          unint64_t v243 = v277[0];
          if (v277[1] != v277[0])
          {
            do
            {
              uint64_t v244 = (void *)*((void *)v242 - 8);
              if (v244)
              {
                *((void *)v242 - 7) = v244;
                operator delete(v244);
              }
              v242 -= 96;
            }
            while (v242 != v241);
            unint64_t v243 = v277[0];
          }
          v277[1] = v241;
          operator delete(v243);
        }
        long long v245 = v274;
        if (v274)
        {
          do
          {
            char v246 = (void *)*v245;
            operator delete(v245);
            long long v245 = v246;
          }
          while (v246);
        }
        unint64_t v247 = v272;
        long double v272 = 0;
        if (v247) {
          operator delete(v247);
        }
      }
      unint64_t v248 = *(void *)(a4 + 8);
      if (v248 >= *(void *)(a4 + 16))
      {
        uint64_t v256 = sub_E92854((void **)a4, (uint64_t)&v279);
      }
      else
      {
        long long v249 = v279;
        long long v250 = v280;
        *(_DWORD *)(v248 + 32) = v281;
        *(_OWORD *)unint64_t v248 = v249;
        *(_OWORD *)(v248 + 16) = v250;
        long long v251 = v282;
        double v282 = 0;
        *(void *)(v248 + 40) = v251;
        *(void *)(v248 + 48) = v283;
        uint64_t v283 = 0;
        v252 = v284;
        *(void *)(v248 + 56) = v284;
        uint64_t v253 = v285;
        *(void *)(v248 + 64) = v285;
        *(_DWORD *)(v248 + 72) = v286;
        if (v253)
        {
          unint64_t v254 = v252[1];
          unint64_t v255 = *(void *)(v248 + 48);
          if ((v255 & (v255 - 1)) != 0)
          {
            if (v254 >= v255) {
              v254 %= v255;
            }
          }
          else
          {
            v254 &= v255 - 1;
          }
          v251[v254] = v248 + 56;
          long double v284 = 0;
          uint64_t v285 = 0;
        }
        *(void *)(v248 + 80) = 0;
        *(void *)(v248 + 88) = 0;
        *(void *)(v248 + 96) = 0;
        *(_OWORD *)(v248 + 80) = v287;
        *(void *)(v248 + 96) = v288;
        long long v287 = 0uLL;
        uint64_t v288 = 0;
        uint64_t v256 = (char *)(v248 + 104);
      }
      *(void *)(a4 + 8) = v256;
      ++*(_DWORD *)(*(void *)(a1 + 288) + 8);
      unsigned int v135 = (char *)v287;
      if (!(void)v287) {
        goto LABEL_219;
      }
      goto LABEL_212;
    }
    unint64_t v88 = sub_40EFE8((uint64_t)&v279);
    uint64_t v89 = sub_52060((uint64_t)&v289);
    if (v88 <= v89 + 1) {
      unint64_t v90 = v89 + 1;
    }
    else {
      unint64_t v90 = v88;
    }
    uint64_t v91 = 0;
    if (v88 < v89 + 1)
    {
      do
      {
        while (1)
        {
          char v122 = (void *)sub_46C8EC(a2, v88);
          unint64_t v123 = (unsigned __int16 *)(*v122 - *(int *)*v122);
          if (*v123 >= 9u)
          {
            uint64_t v124 = v123[4];
            if (v124) {
              break;
            }
          }
          if (v90 == ++v88) {
            goto LABEL_186;
          }
        }
        v91 += *(unsigned int *)(*v122 + v124);
        ++v88;
      }
      while (v90 != v88);
    }
LABEL_186:
    double v125 = (double)v91 * 0.5;
    if (v125 >= 0.0)
    {
      if (v125 < 4.50359963e15)
      {
        uint64_t v126 = (uint64_t)(v125 + v125) + 1;
LABEL_253:
        double v125 = (double)(v126 >> 1);
      }
    }
    else if (v125 > -4.50359963e15)
    {
      uint64_t v126 = (uint64_t)(v125 + v125);
      if (v126 >= 1) {
        --v126;
      }
      goto LABEL_253;
    }
    uint64_t v156 = *(void *)(a1 + 80);
    BOOL v157 = (uint64_t **)sub_68EA4((uint64_t)&v289);
    uint64_t v257 = v156 + (uint64_t)v125;
    unsigned int v158 = *v157;
    uint64_t v159 = v157[1];
    if (*v157 != v159)
    {
      double v160 = (double)v257 / 100.0;
      double v161 = 1.0;
      float64x2_t v261 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
      float64x2_t v263 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
      float64x2_t v258 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
      float64x2_t v259 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
      while (1)
      {
        double v162 = v160 / ((double)v158[9] / 100.0);
        double v163 = v161 - v162;
        unint64_t v164 = (void **)(v158 + 4);
        if (v162 >= 0.9) {
          double v163 = 0.1;
        }
        sub_31854(v158 + 4, 0, v270, 0.0, v163);
        BOOL v165 = *v164;
        if (*v164)
        {
          v158[5] = (uint64_t)v165;
          operator delete(v165);
          *unint64_t v164 = 0;
          v158[5] = 0;
          v158[6] = 0;
        }
        unsigned int v166 = *(unsigned int **)v270;
        v158[4] = *(void *)v270;
        uint64_t v167 = *(unsigned int **)&v270[8];
        *(_OWORD *)(v158 + 5) = *(_OWORD *)&v270[8];
        uint64_t v168 = v167;
        double v169 = 0.0;
        if (v166 == v168) {
          goto LABEL_271;
        }
        uint64_t v170 = v166 + 3;
        if (v166 + 3 == v168) {
          goto LABEL_271;
        }
        double v171 = 0.0;
        do
        {
          LODWORD(v169) = *(v170 - 2);
          long double v172 = exp(3.14159265 - (double)*(unint64_t *)&v169 * 6.28318531 / 4294967300.0);
          *(double *)&unint64_t v173 = atan((v172 - 1.0 / v172) * 0.5) * 57.2957795;
          long double v174 = *(double *)&v173 * 0.0174532925;
          unsigned int v175 = *(v170 - 3);
          LODWORD(v173) = v170[1];
          long double v176 = exp(3.14159265 - (double)v173 * 6.28318531 / 4294967300.0);
          long double v177 = atan((v176 - 1.0 / v176) * 0.5) * 57.2957795 * 0.0174532925;
          v178.i64[0] = v175;
          v178.i64[1] = *v170;
          int64x2_t v179 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v178), v263), v261), v259), v258);
          double v266 = vsubq_f64((float64x2_t)v179, (float64x2_t)vdupq_laneq_s64(v179, 1)).f64[0];
          long double v180 = sin((v174 - v177) * 0.5);
          long double v181 = v180 * v180;
          double v182 = cos(v174);
          long double v183 = v182 * cos(v177);
          long double v184 = sin(0.5 * v266);
          double v161 = 1.0;
          long double v185 = atan2(sqrt(v181 + v183 * (v184 * v184)), sqrt(1.0 - (v181 + v183 * (v184 * v184))));
          double v169 = (v185 + v185) * 6372797.56;
          double v171 = v171 + v169;
          v170 += 3;
        }
        while (v170 != v168);
        double v169 = v171 * 100.0;
        if (v171 * 100.0 < 0.0)
        {
          double v160 = (double)v257 / 100.0;
          if (v169 <= -4.50359963e15)
          {
            char v188 = 1;
            double v187 = v171 * 100.0;
          }
          else
          {
            uint64_t v186 = (uint64_t)(v169 + v169);
            if (v186 >= 1) {
              --v186;
            }
            double v187 = (double)(v186 >> 1);
            char v188 = 1;
          }
          goto LABEL_272;
        }
        double v160 = (double)v257 / 100.0;
        if (v169 < 4.50359963e15)
        {
LABEL_271:
          char v188 = 0;
          double v187 = (double)(((uint64_t)(v169 + v169) + 1) >> 1);
        }
        else
        {
          char v188 = 0;
          double v187 = v171 * 100.0;
        }
LABEL_272:
        if (v187 >= 9.22337204e18)
        {
          v158[9] = 0x7FFFFFFFFFFFFFFELL;
          v158 += 12;
          if (v158 == v159) {
            break;
          }
        }
        else
        {
          if (v188)
          {
            if (v169 > -4.50359963e15)
            {
              uint64_t v189 = (uint64_t)(v169 + v169);
              if (v189 >= 1) {
                --v189;
              }
              goto LABEL_280;
            }
          }
          else if (v169 < 4.50359963e15)
          {
            uint64_t v189 = (uint64_t)(v169 + v169) + 1;
LABEL_280:
            double v169 = (double)(v189 >> 1);
          }
          v158[9] = (uint64_t)v169;
          v158 += 12;
          if (v158 == v159) {
            break;
          }
        }
      }
    }
    unint64_t v190 = (uint64_t **)sub_68EA4((uint64_t)&v279);
    unint64_t v191 = *v190;
    unint64_t v192 = v190[1];
    if (*v190 != v192)
    {
      double v193 = (double)v257 / 100.0;
      double v194 = 1.0;
      float64x2_t v264 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
      float64x2_t v265 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
      float64x2_t v260 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
      float64x2_t v262 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
      while (1)
      {
        uint64_t v195 = v191[9];
        BOOL v196 = (void **)(v191 + 4);
        sub_32F08(v191 + 4, 1, 0, v270, 1.0);
        sub_32F08((uint64_t *)v270, 0, 0, &v268, fmin(fmin(v193 / ((double)v195 / 100.0), 0.9), v194));
        if (*(void *)v270)
        {
          *(void *)&v270[8] = *(void *)v270;
          operator delete(*(void **)v270);
        }
        unsigned int v197 = *v196;
        if (*v196)
        {
          v191[5] = (uint64_t)v197;
          operator delete(v197);
          void *v196 = 0;
          v191[5] = 0;
          v191[6] = 0;
        }
        uint64_t v198 = (unsigned int *)v268;
        v191[4] = v268;
        unint64_t v199 = (unsigned int *)v269;
        *(_OWORD *)(v191 + 5) = v269;
        unint64_t v200 = v199;
        double v201 = 0.0;
        if (v198 == v200) {
          goto LABEL_302;
        }
        unint64_t v202 = v198 + 3;
        if (v198 + 3 == v200) {
          goto LABEL_302;
        }
        double v203 = 0.0;
        do
        {
          LODWORD(v201) = *(v202 - 2);
          long double v204 = exp(3.14159265 - (double)*(unint64_t *)&v201 * 6.28318531 / 4294967300.0);
          *(double *)&unint64_t v205 = atan((v204 - 1.0 / v204) * 0.5) * 57.2957795;
          long double v206 = *(double *)&v205 * 0.0174532925;
          unsigned int v207 = *(v202 - 3);
          LODWORD(v205) = v202[1];
          long double v208 = exp(3.14159265 - (double)v205 * 6.28318531 / 4294967300.0);
          long double v209 = atan((v208 - 1.0 / v208) * 0.5) * 57.2957795 * 0.0174532925;
          v210.i64[0] = v207;
          v210.i64[1] = *v202;
          int64x2_t v211 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v210), v265), v264), v262), v260);
          double v267 = vsubq_f64((float64x2_t)v211, (float64x2_t)vdupq_laneq_s64(v211, 1)).f64[0];
          long double v212 = sin((v206 - v209) * 0.5);
          long double v213 = v212 * v212;
          double v214 = cos(v206);
          long double v215 = v214 * cos(v209);
          long double v216 = sin(0.5 * v267);
          double v194 = 1.0;
          long double v217 = atan2(sqrt(v213 + v215 * (v216 * v216)), sqrt(1.0 - (v213 + v215 * (v216 * v216))));
          double v201 = (v217 + v217) * 6372797.56;
          double v203 = v203 + v201;
          v202 += 3;
        }
        while (v202 != v200);
        double v201 = v203 * 100.0;
        if (v203 * 100.0 < 0.0)
        {
          double v193 = (double)v257 / 100.0;
          if (v201 <= -4.50359963e15)
          {
            char v220 = 1;
            double v219 = v203 * 100.0;
          }
          else
          {
            uint64_t v218 = (uint64_t)(v201 + v201);
            if (v218 >= 1) {
              --v218;
            }
            double v219 = (double)(v218 >> 1);
            char v220 = 1;
          }
          goto LABEL_303;
        }
        double v193 = (double)v257 / 100.0;
        if (v201 < 4.50359963e15)
        {
LABEL_302:
          char v220 = 0;
          double v219 = (double)(((uint64_t)(v201 + v201) + 1) >> 1);
        }
        else
        {
          char v220 = 0;
          double v219 = v203 * 100.0;
        }
LABEL_303:
        if (v219 >= 9.22337204e18)
        {
          v191[9] = 0x7FFFFFFFFFFFFFFELL;
          v191 += 12;
          if (v191 == v192) {
            break;
          }
        }
        else
        {
          if (v220)
          {
            if (v201 > -4.50359963e15)
            {
              uint64_t v221 = (uint64_t)(v201 + v201);
              if (v221 >= 1) {
                --v221;
              }
              goto LABEL_311;
            }
          }
          else if (v201 < 4.50359963e15)
          {
            uint64_t v221 = (uint64_t)(v201 + v201) + 1;
LABEL_311:
            double v201 = (double)(v221 >> 1);
          }
          v191[9] = (uint64_t)v201;
          v191 += 12;
          if (v191 == v192) {
            break;
          }
        }
      }
    }
    uint64_t v222 = sub_52060((uint64_t)&v289);
    uint64_t v223 = sub_40EFE8((uint64_t)&v279);
    uint64_t v224 = sub_52060((uint64_t)&v289);
    sub_E9A9FC((uint64_t)&v289, v224 - ((unint64_t)(v222 - v223) >> 1));
    uint64_t v225 = sub_52060((uint64_t)&v289);
    sub_497CC0(&v279, v225 + 1);
    goto LABEL_317;
  }
  unint64_t v76 = *(void *)(a4 + 8);
  if (v76 >= *(void *)(a4 + 16))
  {
    double v121 = sub_E92854((void **)a4, (uint64_t)&v298);
  }
  else
  {
    long long v77 = v298;
    long long v78 = v299;
    *(_DWORD *)(v76 + 32) = v300;
    *(_OWORD *)unint64_t v76 = v77;
    *(_OWORD *)(v76 + 16) = v78;
    unint64_t v79 = v301;
    *(void *)&long long v301 = 0;
    *(_OWORD *)(v76 + 40) = __PAIR128__(*((unint64_t *)&v301 + 1), v79);
    *((void *)&v301 + 1) = 0;
    uint64_t v80 = v302;
    *(void *)(v76 + 56) = v302;
    uint64_t v81 = *((void *)&v302 + 1);
    *(void *)(v76 + 64) = *((void *)&v302 + 1);
    *(_DWORD *)(v76 + 72) = v303;
    if (v81)
    {
      unint64_t v82 = *(void *)(v80 + 8);
      unint64_t v83 = *(void *)(v76 + 48);
      if ((v83 & (v83 - 1)) != 0)
      {
        if (v82 >= v83) {
          v82 %= v83;
        }
      }
      else
      {
        v82 &= v83 - 1;
      }
      *(void *)(v79 + 8 * v82) = v76 + 56;
      long long v302 = 0uLL;
    }
    *(void *)(v76 + 80) = 0;
    *(void *)(v76 + 88) = 0;
    *(void *)(v76 + 96) = 0;
    *(_OWORD *)(v76 + 80) = v304;
    *(void *)(v76 + 96) = v305;
    long long v304 = 0uLL;
    uint64_t v305 = 0;
    double v121 = (char *)(v76 + 104);
  }
  *(void *)(a4 + 8) = v121;
  ++*(_DWORD *)(*(void *)(a1 + 288) + 8);
LABEL_235:
  if (v296)
  {
    uint64_t v297 = (long long *)v296;
    operator delete(v296);
  }
LABEL_237:
  uint64_t v149 = v304;
  if ((void)v304)
  {
    uint64_t v150 = *((void *)&v304 + 1);
    unint64_t v151 = (void *)v304;
    if (*((void *)&v304 + 1) != (void)v304)
    {
      do
      {
        unint64_t v152 = *(void **)(v150 - 64);
        if (v152)
        {
          *(void *)(v150 - 56) = v152;
          operator delete(v152);
        }
        v150 -= 96;
      }
      while (v150 != v149);
      unint64_t v151 = (void *)v304;
    }
    *((void *)&v304 + 1) = v149;
    operator delete(v151);
  }
  unint64_t v153 = (void *)v302;
  if ((void)v302)
  {
    do
    {
      unint64_t v154 = (void *)*v153;
      operator delete(v153);
      unint64_t v153 = v154;
    }
    while (v154);
  }
  uint64_t v155 = (void *)v301;
  *(void *)&long long v301 = 0;
  if (v155) {
    operator delete(v155);
  }
}

void sub_E88544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  sub_E832B4(&a35);
  sub_E832B4(&a48);
  sub_E832B4(&a61);
  uint64_t v62 = (void *)STACK[0x210];
  if (STACK[0x210])
  {
    STACK[0x218] = (unint64_t)v62;
    operator delete(v62);
  }
  sub_E832B4(&STACK[0x228]);
  _Unwind_Resume(a1);
}

char *sub_E88650@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v8 = HIDWORD(a2);
  uint64_t result = sub_2E157C(a1, a2, 1);
  if (a3)
  {
    if (result
      && (uint64_t v10 = &result[-*(int *)result], *(unsigned __int16 *)v10 >= 5u)
      && (uint64_t v11 = *((unsigned __int16 *)v10 + 2)) != 0
      && (result += v11 + *(unsigned int *)&result[v11], *(_DWORD *)result > v8)
      && (uint64_t result = (char *)sub_2E2690(result, a2)) != 0
      && (double v12 = &result[-*(int *)result], *(unsigned __int16 *)v12 >= 0xFu)
      && *((_WORD *)v12 + 7))
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      uint64_t v13 = &result[*(unsigned __int16 *)&result[-*(int *)result + 14]];
      uint64_t v14 = *(unsigned int *)v13;
      double v16 = (unsigned int *)&v13[v14 + 4];
      uint64_t v15 = *(unsigned int *)&v13[v14];
      if (v15)
      {
        uint64_t v17 = &v16[2 * v15];
        do
        {
          uint64_t v24 = *v16;
          uint64_t v25 = v16[1];
          unint64_t v26 = sub_2E157C(a1, *v16, 1);
          if (v26
            && (uint64_t v27 = &v26[-*(int *)v26], *(unsigned __int16 *)v27 >= 9u)
            && (uint64_t v28 = *((unsigned __int16 *)v27 + 4)) != 0
            && (BOOL v29 = &v26[v28 + *(unsigned int *)&v26[v28]], *(_DWORD *)v29 > v25)
            && (BOOL v30 = (int *)sub_2E1414(v29, v24 | (v25 << 32))) != 0)
          {
            BOOL v31 = (unsigned int *)((char *)v30 + *(unsigned __int16 *)((char *)v30 - *v30 + 4));
            unsigned int v32 = *v31;
            uint64_t v33 = v31[1];
          }
          else
          {
            unsigned int v32 = 0;
            uint64_t v33 = 0xFFFFFFFFLL;
          }
          uint64_t result = sub_2E157C(a1, v32, 1);
          if (result)
          {
            long double v34 = &result[-*(int *)result];
            if (*(unsigned __int16 *)v34 >= 7u)
            {
              uint64_t v35 = *((unsigned __int16 *)v34 + 3);
              if (v35)
              {
                uint64_t v36 = *(unsigned int *)&result[v35];
                long double v37 = &result[v35 + v36];
                if (*(_DWORD *)v37 > v33)
                {
                  uint64_t v38 = 4 * v33;
                  uint64_t v39 = &v37[4 * v33];
                  uint64_t v40 = *((unsigned int *)v39 + 1);
                  char v41 = &v39[v40 + 4];
                  uint64_t v42 = &v41[-*(int *)v41];
                  if (*(unsigned __int16 *)v42 >= 5u)
                  {
                    uint64_t v43 = *((unsigned __int16 *)v42 + 2);
                    if (v43)
                    {
                      unint64_t v44 = &v41[v43];
                      uint64_t v45 = *(unsigned int *)&v41[v43];
                      uint64_t v46 = *(unsigned int *)&v44[v45];
                      unsigned int v58 = (char **)a4;
                      if (v46)
                      {
                        uint64_t v47 = 0;
                        uint64_t v48 = 4 * v46;
                        uint64_t v49 = &result[v43 + v40 + v36 + v35 + v38 + v45];
                        do
                        {
                          unint64_t v50 = &v49[v47];
                          uint64_t v51 = *(unsigned int *)&v49[v47 + 8];
                          BOOL v52 = (unsigned __int16 *)&v49[v47 + v51 - *(int *)&v49[v47 + 8 + v51]];
                          if (*(void *)&v49[v47 + 8 + v51 + v52[8]] == a2)
                          {
                            *(void *)&long long v53 = *(void *)&v50[v51 + 8 + v52[6]];
                            *((void *)&v53 + 1) = *(void *)&v50[v51 + 8 + v52[7]];
                            long long v54 = v53;
                            int v55 = a2;
                            int v56 = v8;
                            uint64_t v57 = *(void *)&v50[v51 + 8 + v52[9]];
                            uint64_t result = (char *)sub_29E380(&v58, &v54);
                          }
                          v47 += 4;
                        }
                        while (v48 != v47);
                      }
                    }
                  }
                }
              }
            }
          }
          v16 += 2;
        }
        while (v16 != v17);
      }
    }
    else
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
    }
  }
  else
  {
    if (result)
    {
      uint64_t v18 = &result[-*(int *)result];
      if (*(unsigned __int16 *)v18 >= 7u
        && (uint64_t v19 = *((unsigned __int16 *)v18 + 3)) != 0
        && (uint64_t v20 = &result[v19 + *(unsigned int *)&result[v19]], *(_DWORD *)v20 > v8)
        && (double v21 = &v20[4 * v8 + 4 + *(unsigned int *)&v20[4 * v8 + 4]],
            unint64_t v22 = &v21[-*(int *)v21],
            *(unsigned __int16 *)v22 >= 5u)
        && (uint64_t v23 = *((unsigned __int16 *)v22 + 2)) != 0)
      {
        uint64_t result = &v21[v23 + *(unsigned int *)&v21[v23]];
      }
      else
      {
        uint64_t result = 0;
      }
    }
    *(void *)&long long v54 = a1;
    return sub_E9478C(result, a4);
  }
  return result;
}

void sub_E88990(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_E889B0(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = a2[1];
  long long v27 = *a2;
  long long v28 = v5;
  uint64_t v6 = (int *)sub_2E2ED4(v4, (int32x2_t *)&v27);
  if (!v6)
  {
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  uint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
  if (*v7 < 0x13u)
  {
    if (*(uint64_t *)(a1 + 120) >= 0) {
      goto LABEL_11;
    }
    return 0;
  }
  uint64_t v8 = v7[9];
  if (!v8)
  {
LABEL_7:
    if (v8 <= *(void *)(a1 + 120)) {
      goto LABEL_11;
    }
    return 0;
  }
  if (*(int *)((char *)v6 + v8) > *(void *)(a1 + 120)) {
    return 0;
  }
LABEL_11:
  uint64_t v10 = *(void *)(a1 + 8);
  long long v11 = a2[1];
  long long v27 = *a2;
  long long v28 = v11;
  double v12 = (int *)sub_2E2ED4(v10, (int32x2_t *)&v27);
  if (!v12)
  {
    LODWORD(v14) = 0;
    goto LABEL_17;
  }
  uint64_t v13 = (unsigned __int16 *)((char *)v12 - *v12);
  if (*v13 < 0xFu)
  {
    if (!*(_WORD *)(a1 + 136)) {
      goto LABEL_20;
    }
    return 0;
  }
  uint64_t v14 = v13[7];
  if (!v14)
  {
LABEL_17:
    if (v14 >= *(unsigned __int16 *)(a1 + 136)) {
      goto LABEL_20;
    }
    return 0;
  }
  if (*(unsigned __int16 *)((char *)v12 + v14) < *(unsigned __int16 *)(a1 + 136)) {
    return 0;
  }
LABEL_20:
  uint64_t v15 = *(void *)(a1 + 8);
  long long v16 = a2[1];
  long long v27 = *a2;
  long long v28 = v16;
  uint64_t v17 = (int *)sub_2E2ED4(v15, (int32x2_t *)&v27);
  double v18 = 0.0;
  if (v17)
  {
    uint64_t v19 = (unsigned __int16 *)((char *)v17 - *v17);
    if (*v19 >= 0x19u)
    {
      uint64_t v20 = v19[12];
      if (v20) {
        double v18 = *(float *)((char *)v17 + v20);
      }
    }
  }
  if (v18 > *(double *)(a1 + 192)) {
    return 0;
  }
  unint64_t v21 = sub_2E03F8(*(void *)(a1 + 8), *((void *)a2 + 1), *((void *)a2 + 2));
  BOOL result = 0;
  if (v21 <= 0xFFFFFFFEFFFFFFFFLL && v21)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    long long v23 = a2[1];
    long long v27 = *a2;
    long long v28 = v23;
    uint64_t v24 = (int *)sub_2E2ED4(v22, (int32x2_t *)&v27);
    if (v24 && (uint64_t v25 = (unsigned __int16 *)((char *)v24 - *v24), *v25 >= 0x1Bu))
    {
      uint64_t v26 = v25[13];
      if (v26) {
        uint64_t v26 = *(unsigned int *)((char *)v24 + v26);
      }
    }
    else
    {
      uint64_t v26 = 0;
    }
    return v26 <= *(void *)(a1 + 128);
  }
  return result;
}

uint64_t sub_E88B98(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4, char a5, int a6)
{
  sub_2E05C4(*(void *)(a1 + 8), *a2, (uint64_t)&__p);
  uint64_t v10 = __p;
  long long v11 = v31;
  if (__p == v31)
  {
    uint64_t v20 = 0;
    if (!__p) {
      return v20;
    }
    goto LABEL_28;
  }
  if (a6)
  {
    double v12 = v31 - 8;
    if (v31 - 8 > __p)
    {
      uint64_t v13 = (char *)__p + 8;
      do
      {
        uint64_t v14 = *((void *)v13 - 1);
        int v15 = *(_DWORD *)v12;
        *(_DWORD *)(v13 - 5) = *(_DWORD *)(v12 + 3);
        *((_DWORD *)v13 - 2) = v15;
        *(_DWORD *)double v12 = v14;
        v12[6] = BYTE6(v14);
        *((_WORD *)v12 + 2) = WORD2(v14);
        v12 -= 8;
        BOOL v16 = v13 >= v12;
        v13 += 8;
      }
      while (!v16);
      uint64_t v10 = __p;
      long long v11 = v31;
    }
  }
  unint64_t v17 = (unint64_t)(v11 - v10) >> 3;
  if (!v17)
  {
LABEL_25:
    uint64_t v20 = 0;
    uint64_t v10 = __p;
    if (!__p) {
      return v20;
    }
    goto LABEL_28;
  }
  if (a5)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    while (1)
    {
      uint64_t v21 = *(void *)(sub_46C8EC(a3, a4 + v18) + 32);
      uint64_t v22 = *(void *)sub_E89E9C(&__p, v18 + ((v31 - (unsigned char *)__p) >> 3) - 1);
      if ((v21 & 0xFFFFFFFFFFFFLL) != (v22 & 0xFFFFFFFFFFFFLL)) {
        break;
      }
      if (((v21 & 0xFF000000000000) == 0) != ((v22 & 0x1000000000000) == 0)) {
        break;
      }
      v20 += sub_46CCC8(a3, a4 + v18, v23);
      if (a4 == v19 || a4 + v18 == sub_46C760(a3) - 1) {
        break;
      }
      ++v19;
      --v18;
      if (v17 == v19) {
        goto LABEL_25;
      }
    }
  }
  else
  {
    unint64_t v24 = 0;
    uint64_t v20 = 0;
    while (1)
    {
      uint64_t v25 = a4 + v24;
      uint64_t v26 = *(void *)(sub_46C8EC(a3, a4 + v24) + 32);
      uint64_t v27 = *(void *)sub_E89E9C(&__p, v24);
      if ((v26 & 0xFFFFFFFFFFFFLL) != (v27 & 0xFFFFFFFFFFFFLL)
        || ((v26 & 0xFF000000000000) == 0) != ((v27 & 0x1000000000000) == 0))
      {
        break;
      }
      v20 += sub_46CCC8(a3, a4 + v24, v28);
      if (!v25 || v25 == sub_46C760(a3) - 1)
      {
        uint64_t v10 = __p;
        if (__p) {
          goto LABEL_28;
        }
        return v20;
      }
      if (v17 == ++v24) {
        goto LABEL_25;
      }
    }
  }
  uint64_t v10 = __p;
  if (__p)
  {
LABEL_28:
    BOOL v31 = v10;
    operator delete(v10);
  }
  return v20;
}

void sub_E88DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_E88E14(char **a1, _OWORD *a2)
{
  long long v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v9 = *a1;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v9) >> 4);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 > 0x555555555555555) {
        sub_188D718();
      }
      uint64_t v14 = (char *)operator new(48 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    int v15 = &v14[48 * v10];
    long long v16 = a2[1];
    *(_OWORD *)int v15 = *a2;
    *((_OWORD *)v15 + 1) = v16;
    *((_OWORD *)v15 + 2) = a2[2];
    uint64_t v8 = v15 + 48;
    if (v5 != v9)
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 3);
        long long v18 = *((_OWORD *)v5 - 2);
        *(_OWORD *)(v15 - 19) = *(_OWORD *)(v5 - 19);
        *((_OWORD *)v15 - 3) = v17;
        *((_OWORD *)v15 - 2) = v18;
        v15 -= 48;
        v5 -= 48;
      }
      while (v5 != v9);
      long long v5 = *a1;
    }
    *a1 = v15;
    a1[1] = v8;
    a1[2] = &v14[48 * v13];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[2];
    *((_OWORD *)v5 + 1) = a2[1];
    *((_OWORD *)v5 + 2) = v7;
    *(_OWORD *)long long v5 = v6;
    uint64_t v8 = v5 + 48;
  }
  a1[1] = v8;
  return v8 - 48;
}

double sub_E88F54(_DWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  unint64_t v10 = sub_450B4C(a2, 0, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2) - 1, a1, 0, *a3, a4, a5, a6, a7, a8);
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2) - 2 >= v10) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2) - 2;
  }
  unint64_t v12 = (_DWORD *)sub_413C0(a2, v11);
  unint64_t v13 = (_DWORD *)sub_413C0(a2, v11 + 1);
  LODWORD(v14) = *v12;
  LODWORD(v15) = v12[1];
  double v16 = (double)v14;
  double v17 = (double)v15;
  LODWORD(v15) = *v13;
  LODWORD(v18) = v13[1];
  LODWORD(v19) = *a1;
  LODWORD(v20) = a1[1];
  double v21 = (double)v15 - v16;
  double v22 = (double)v18 - v17;
  double v23 = v21 * ((double)v19 - v16) + v22 * ((double)v20 - v17);
  double v24 = v21 * v21 + v22 * v22;
  BOOL v25 = fabs(v24) < 2.22044605e-16 || v24 == 0.0;
  double v26 = v23 / v24;
  if (v25) {
    double v26 = 1.79769313e308;
  }
  if (v26 <= 0.0)
  {
    uint64_t v30 = *(void *)v12;
    unsigned int v31 = v12[2];
  }
  else if (v26 >= 1.0)
  {
    uint64_t v30 = *(void *)v13;
    unsigned int v31 = v13[2];
  }
  else
  {
    int v27 = v12[2];
    if (v27 == 0x7FFFFFFF)
    {
      BOOL v28 = 0;
      double v29 = 0.0;
    }
    else
    {
      double v32 = (double)v27;
      int v33 = v13[2];
      BOOL v25 = v33 == 0x7FFFFFFF;
      double v29 = v26 * ((double)v33 - v32) + v32;
      BOOL v28 = v33 != 0x7FFFFFFF;
      if (v25) {
        double v29 = 0.0;
      }
    }
    double v34 = v22 * v26;
    double v35 = v21 * v26 + v16;
    if (v35 < 0.0) {
      double v36 = -0.5;
    }
    else {
      double v36 = 0.5;
    }
    uint64_t v37 = (v35 + v36);
    double v38 = v34 + v17;
    if (v38 < 0.0) {
      double v39 = -0.5;
    }
    else {
      double v39 = 0.5;
    }
    unsigned int v40 = (v38 + v39);
    if (v29 < 0.0) {
      double v41 = -0.5;
    }
    else {
      double v41 = 0.5;
    }
    double v17 = v29 + v41;
    if (v28) {
      unsigned int v31 = v17;
    }
    else {
      unsigned int v31 = 0x7FFFFFFF;
    }
    if (v40 >= 0xFFFFFFFE) {
      uint64_t v42 = 4294967294;
    }
    else {
      uint64_t v42 = v40;
    }
    uint64_t v30 = v37 | (v42 << 32);
  }
  uint64_t v47 = v30;
  unsigned int v48 = v31;
  double v51 = 0.0;
  double v52 = 0.0;
  v49[0] = (double *)&v47;
  v49[1] = (double *)&v50;
  v49[2] = &v51;
  v49[3] = &v52;
  uint64_t v50 = 0x7FEFFFFFFFFFFFFFLL;
  uint64_t v43 = *a2;
  uint64_t v44 = a2[1];
  if (*a2 == v44 || v43 + 12 == v44) {
    return 0.0;
  }
  do
  {
    double v17 = sub_4582C8(v49, v43, (unsigned int *)(v43 + 12), v17);
    uint64_t v45 = v43 + 24;
    v43 += 12;
  }
  while (v45 != v44);
  double result = 0.0;
  if (v52 != 0.0)
  {
    double result = v51 / v52;
    if (v51 / v52 > 1.0) {
      return 1.0;
    }
  }
  return result;
}

long double sub_E891F4(uint64_t *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v9 = *a1;
  sub_E9227C((char *)(a2 + 32), *(void *)(*a1 + 40), 0, 0, 0, (uint64_t)&v76, *(unint64_t *)&a7);
  unint64_t v10 = (unsigned int **)(a3 + 32);
  sub_E9227C((char *)(a3 + 32), *(void *)(v9 + 40), 1, 0, 0, (uint64_t)&__p, v11);
  sub_46C6C((uint64_t)&v76, (uint64_t)v77, (char *)__p, v75, 0xAAAAAAAAAAAAAAABLL * ((v75 - (unsigned char *)__p) >> 2));
  if (__p)
  {
    long long v75 = (char *)__p;
    operator delete(__p);
  }
  unint64_t v12 = v76;
  uint64_t v13 = (uint64_t)v77;
  unsigned int v14 = *v76;
  unsigned int v15 = v76[1];
  unsigned int v16 = *(v77 - 2);
  unsigned int v62 = *(v77 - 3);
  double v17 = 0.0;
  if (v76 != v77)
  {
    unint64_t v18 = v76 + 3;
    if (v76 + 3 != v77)
    {
      float64x2_t v65 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
      float64x2_t v66 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
      float64x2_t v63 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
      float64x2_t v64 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
      HIDWORD(v19) = 1096306543;
      do
      {
        LODWORD(v19) = *(v18 - 2);
        long double v20 = exp(3.14159265 - (double)*(unint64_t *)&v19 * 6.28318531 / 4294967300.0);
        *(double *)&unint64_t v21 = atan((v20 - 1.0 / v20) * 0.5) * 57.2957795;
        long double v22 = *(double *)&v21 * 0.0174532925;
        unsigned int v23 = *(v18 - 3);
        LODWORD(v21) = v18[1];
        long double v24 = exp(3.14159265 - (double)v21 * 6.28318531 / 4294967300.0);
        long double v25 = atan((v24 - 1.0 / v24) * 0.5) * 57.2957795 * 0.0174532925;
        v26.i64[0] = v23;
        v26.i64[1] = *v18;
        int64x2_t v27 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v26), v66), v65), v64), v63);
        double v72 = vsubq_f64((float64x2_t)v27, (float64x2_t)vdupq_laneq_s64(v27, 1)).f64[0];
        long double v28 = sin((v22 - v25) * 0.5);
        long double v29 = v28 * v28;
        double v30 = cos(v22);
        long double v31 = v30 * cos(v25);
        long double v32 = sin(0.5 * v72);
        long double v33 = atan2(sqrt(v29 + v31 * (v32 * v32)), sqrt(1.0 - (v29 + v31 * (v32 * v32))));
        double v19 = (v33 + v33) * 6372797.56;
        double v17 = v17 + v19;
        v18 += 3;
      }
      while (v18 != (unsigned int *)v13);
    }
  }
  long double v34 = exp(3.14159265 - (double)v15 * 6.28318531 / 4294967300.0);
  long double v35 = atan((v34 - 1.0 / v34) * 0.5) * 57.2957795 * 0.0174532925;
  long double v36 = exp(3.14159265 - (double)v16 * 6.28318531 / 4294967300.0);
  long double v37 = atan((v36 - 1.0 / v36) * 0.5) * 57.2957795 * 0.0174532925;
  long double v38 = sin((v35 - v37) * 0.5);
  long double v73 = v38 * v38;
  double v39 = cos(v35);
  long double v40 = v39 * cos(v37);
  v41.i64[0] = v14;
  v41.i64[1] = v62;
  float64x2_t v71 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v70 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v68 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  float64x2_t v69 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  int64x2_t v42 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v41), v71), v70), v68), v69);
  long double v43 = sin(0.5 * vsubq_f64((float64x2_t)v42, (float64x2_t)vdupq_laneq_s64(v42, 1)).f64[0]);
  long double v44 = atan2(sqrt(v43 * v43 * v40 + v73), sqrt(1.0 - (v43 * v43 * v40 + v73)));
  *(double *)&unint64_t v45 = fmax(v17 - (v44 + v44) * 6372797.56, 0.0);
  double v67 = *(double *)&v45;
  uint64_t v46 = *(void *)(a2 + 40);
  uint64_t v47 = *v10;
  LODWORD(v45) = *(_DWORD *)(v46 - 8);
  long double v48 = exp(3.14159265 - (double)v45 * 6.28318531 / 4294967300.0);
  *(double *)&unint64_t v49 = atan((v48 - 1.0 / v48) * 0.5) * 57.2957795;
  long double v50 = *(double *)&v49 * 0.0174532925;
  LODWORD(v46) = *(_DWORD *)(v46 - 12);
  LODWORD(v49) = v47[1];
  long double v51 = exp(3.14159265 - (double)v49 * 6.28318531 / 4294967300.0);
  long double v52 = atan((v51 - 1.0 / v51) * 0.5) * 57.2957795 * 0.0174532925;
  v41.i64[0] = v46;
  v41.i64[1] = *v47;
  int64x2_t v53 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v41), v71), v70), v68), v69);
  v71.f64[0] = vsubq_f64((float64x2_t)v53, (float64x2_t)vdupq_laneq_s64(v53, 1)).f64[0];
  long double v54 = sin((v50 - v52) * 0.5);
  long double v55 = v54 * v54;
  double v56 = cos(v50);
  long double v57 = v56 * cos(v52);
  long double v58 = sin(0.5 * v71.f64[0]);
  long double v59 = atan2(sqrt(v55 + v57 * (v58 * v58)), sqrt(1.0 - (v55 + v57 * (v58 * v58))));
  long double v60 = v67 + (v59 + v59) * 6372797.56;
  long long v77 = v12;
  operator delete(v12);
  return v60;
}

void sub_E89750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p)
  {
    operator delete(__p);
    long double v33 = *(void **)(v31 - 176);
    if (!v33) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long double v33 = *(void **)(v31 - 176);
    if (!v33) {
      goto LABEL_3;
    }
  }
  *(void *)(v31 - 168) = v33;
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

void sub_E8979C(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  sub_9F0DE8(a1, 1, a2, &v13, a5);
  if (a5 == 0.0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    uint64_t v9 = v13;
    int64_t v10 = v14 - v13;
    if (v14 != v13)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v10 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      unint64_t v11 = (char *)operator new(v14 - v13);
      *a3 = v11;
      a3[1] = v11;
      unint64_t v12 = &v11[4 * (v10 >> 2)];
      a3[2] = v12;
      memcpy(v11, v9, v10);
      a3[1] = v12;
    }
    if (v9) {
      goto LABEL_6;
    }
  }
  else
  {
    sub_32F08((uint64_t *)&v13, 0, a2, a3, fmin(a4 / a5, 1.0));
    uint64_t v9 = v13;
    if (v13)
    {
LABEL_6:
      unsigned int v14 = v9;
      operator delete(v9);
    }
  }
}

void sub_E898A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_E898F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (sub_40EFE8(a3) == a4)
  {
    return sub_52058(a3);
  }
  if (!a5) {
    return 0;
  }
  unint64_t v11 = (int **)sub_46C8EC(a2, a4);
  unint64_t v12 = (int **)sub_46C8EC(a2, a4 - 1);
  uint64_t v13 = (unsigned __int16 *)((char *)*v12 - **v12);
  unsigned int v14 = *v13;
  if (*((unsigned char *)v12 + 38))
  {
    if (v14 < 0x49) {
      goto LABEL_17;
    }
    unsigned int v15 = v13[36];
    if (!v15) {
      goto LABEL_17;
    }
  }
  else if (v14 < 0x4B || (unsigned int v15 = v13[37]) == 0)
  {
LABEL_17:
    __int16 v16 = -1;
    double v17 = (char *)*v11;
    unint64_t v18 = (unsigned __int16 *)((char *)*v11 - **v11);
    unsigned int v19 = *v18;
    if (*((unsigned char *)v11 + 38)) {
      goto LABEL_18;
    }
LABEL_14:
    if (v19 >= 0x49)
    {
      unsigned int v20 = v18[36];
      if (v18[36]) {
        goto LABEL_20;
      }
    }
    goto LABEL_21;
  }
  __int16 v16 = *(_WORD *)((char *)*v12 + v15);
  double v17 = (char *)*v11;
  unint64_t v18 = (unsigned __int16 *)((char *)*v11 - **v11);
  unsigned int v19 = *v18;
  if (!*((unsigned char *)v11 + 38)) {
    goto LABEL_14;
  }
LABEL_18:
  if (v19 >= 0x4B)
  {
    unsigned int v20 = v18[37];
    if (v18[37])
    {
LABEL_20:
      int v21 = *(unsigned __int16 *)&v17[v20];
      goto LABEL_22;
    }
  }
LABEL_21:
  int v21 = 0xFFFF;
LABEL_22:
  unsigned __int16 v22 = v16 + 18000;
  unsigned __int16 v23 = v16 - 18000;
  if ((unsigned __int16)(v22 >> 5) < 0x465u) {
    unsigned __int16 v23 = v22;
  }
  int v24 = v21 - v23;
  if (v24 > 18000) {
    v24 -= 36000;
  }
  if (v24 < -17999) {
    v24 += 36000;
  }
  double v25 = (double)v24 / 100.0;
  if (v19 < 0xB || !v18[5])
  {
    int v26 = 0;
    uint64_t v27 = *(void *)(a1 + 96);
    int v28 = v25 >= 0.0;
    if (!*(unsigned char *)(a1 + 138)) {
      goto LABEL_38;
    }
LABEL_33:
    double v29 = fabs(v25);
    if (v28 != v26 && v29 > *(double *)(a1 + 144)) {
      v27 += *(void *)(a1 + 104);
    }
    goto LABEL_38;
  }
  int v26 = v17[v18[5] + 1] >> 7;
  uint64_t v27 = *(void *)(a1 + 96);
  int v28 = v25 >= 0.0;
  if (*(unsigned char *)(a1 + 138)) {
    goto LABEL_33;
  }
LABEL_38:
  if (v19 >= 9 && (uint64_t v31 = v18[4]) != 0) {
    uint64_t v32 = *(unsigned int *)&v17[v31];
  }
  else {
    uint64_t v32 = 0;
  }
  if (v27 >= v32) {
    return v32;
  }
  else {
    return v27;
  }
}

uint64_t sub_E89B28(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  int64_t v10 = (void *)sub_46C8EC(a2, a4);
  unint64_t v11 = (unsigned __int16 *)(*v10 - *(int *)*v10);
  if (*v11 >= 9u && (uint64_t v12 = v11[4]) != 0)
  {
    uint64_t v13 = *(unsigned int *)(*v10 + v12);
    if (sub_52060(a3) != a4) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v13 = 0;
    if (sub_52060(a3) != a4)
    {
LABEL_4:
      if (!a5) {
        return v13;
      }
      unsigned int v14 = (int **)sub_46C8EC(a2, a4);
      unsigned int v15 = (int **)sub_46C8EC(a2, a4 + 1);
      __int16 v16 = (char *)*v14;
      double v17 = (unsigned __int16 *)((char *)*v14 - **v14);
      unsigned int v18 = *v17;
      if (*((unsigned char *)v14 + 38))
      {
        if (v18 < 0x49) {
          goto LABEL_20;
        }
        unsigned int v19 = v17[36];
        if (!v17[36]) {
          goto LABEL_20;
        }
      }
      else if (v18 < 0x4B || (unsigned int v19 = v17[37]) == 0)
      {
LABEL_20:
        __int16 v21 = -1;
        unsigned __int16 v22 = (char *)*v15;
        unsigned __int16 v23 = (unsigned __int16 *)((char *)*v15 - **v15);
        unsigned int v24 = *v23;
        if (*((unsigned char *)v15 + 38)) {
          goto LABEL_21;
        }
        goto LABEL_17;
      }
      __int16 v21 = *(_WORD *)&v16[v19];
      unsigned __int16 v22 = (char *)*v15;
      unsigned __int16 v23 = (unsigned __int16 *)((char *)*v15 - **v15);
      unsigned int v24 = *v23;
      if (*((unsigned char *)v15 + 38))
      {
LABEL_21:
        if (v24 >= 0x4B)
        {
          unsigned int v25 = v23[37];
          if (v25)
          {
LABEL_23:
            int v26 = *(unsigned __int16 *)&v22[v25];
LABEL_25:
            unsigned __int16 v27 = v21 + 18000;
            unsigned __int16 v28 = v21 - 18000;
            if ((unsigned __int16)(v27 >> 5) < 0x465u) {
              unsigned __int16 v28 = v27;
            }
            int v29 = v26 - v28;
            if (v29 > 18000) {
              v29 -= 36000;
            }
            if (v29 < -17999) {
              v29 += 36000;
            }
            double v30 = (double)v29 / 100.0;
            if (v18 < 0xB)
            {
              LODWORD(v31) = 0;
            }
            else
            {
              uint64_t v31 = v17[5];
              if (v31) {
                LODWORD(v31) = v16[v31 + 1] >> 7;
              }
            }
            uint64_t v32 = *(void *)(a1 + 96);
            int v33 = v30 >= 0.0;
            if (*(unsigned char *)(a1 + 138))
            {
              double v34 = fabs(v30);
              if (v33 != v31 && v34 > *(double *)(a1 + 144)) {
                v32 += *(void *)(a1 + 104);
              }
            }
            return (v13 - v32) & ~((v13 - v32) >> 63);
          }
        }
LABEL_24:
        int v26 = 0xFFFF;
        goto LABEL_25;
      }
LABEL_17:
      if (v24 >= 0x49)
      {
        unsigned int v25 = v23[36];
        if (v25) {
          goto LABEL_23;
        }
      }
      goto LABEL_24;
    }
  }

  return sub_3C80F8(a3);
}

uint64_t sub_E89D74(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = sub_46C8EC(a2, a3);
  if (!*(void *)(a1 + 88)) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 32);
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
  uint64_t v7 = v5 & 0xFF000000000000;
  uint64_t v8 = (int *)sub_2D5D58(*(void *)a1, v5 & 0xFFFFFFFFFFFFLL);
  uint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8);
  unsigned int v10 = *v9;
  if (v7)
  {
    if (v10 < 0xB) {
      return 0;
    }
    unsigned int v11 = v9[5];
    if (!v11 || (*(int *)((char *)v8 + v11) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (v10 < 0xB) {
      return 0;
    }
    unsigned int v12 = v9[5];
    if (!v12 || (*(int *)((char *)v8 + v12) & 2) == 0) {
      return 0;
    }
  }
  uint64_t v13 = (int *)sub_2D5D58(*(void *)a1, v6);
  unsigned int v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 0x2Fu)
  {
    uint64_t v15 = v14[23];
    if (v15)
    {
      if (*((unsigned char *)v13 + v15) != 32) {
        return 0;
      }
    }
  }
  __int16 v16 = (int *)sub_2D5D58(*(void *)a1, v6);
  double v17 = (unsigned __int16 *)((char *)v16 - *v16);
  if (*v17 >= 0x1Bu)
  {
    uint64_t v18 = v17[13];
    if (v18)
    {
      if (*(_DWORD *)(a1 + 112) < *((unsigned __int8 *)v16 + v18)) {
        return 0;
      }
    }
  }
  return *(void *)(a1 + 88);
}

uint64_t sub_E89E9C(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 3)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 3);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v10 = &v15;
    }
    else {
      unsigned int v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unsigned int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unsigned int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 8 * a2;
}

void sub_E89FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_E8A0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_E8A200(*(void *)(a1 + 8), a5, &__p);
  sub_46B058();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  sub_46B058();
  unsigned int v12 = v11;
  unint64_t v14 = a4 + v13 + 1;
  sub_E951F4((unint64_t)__p, (unint64_t)v27, v8, v10 + a3, v11, v14, (unint64_t *)&v23);
  if (v23 != v27)
  {
    uint64_t v15 = 0;
    goto LABEL_13;
  }
  if (v24)
  {
    unint64_t v16 = v25;
    BOOL v17 = v16 < sub_46C760(v24);
    if (v12) {
      goto LABEL_5;
    }
LABEL_11:
    BOOL v19 = 0;
    goto LABEL_12;
  }
  BOOL v17 = 0;
  if (!v12) {
    goto LABEL_11;
  }
LABEL_5:
  unint64_t v18 = sub_46C760(v12);
  BOOL v19 = v14 < v18;
  if (v14 < v18 && v17)
  {
    uint64_t v21 = sub_46C8EC(v24, v25);
    uint64_t v15 = v21 == sub_46C8EC(v12, v14);
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v15 = v17 ^ v19 ^ 1u;
LABEL_13:
  if (__p)
  {
    unsigned __int16 v27 = __p;
    operator delete(__p);
  }
  return v15;
}

void sub_E8A1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E8A200(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v14 = 1;
  unsigned int v11 = 0;
  unsigned int v12 = 0;
  uint64_t v13 = 0;
  v10[0] = a1;
  v10[1] = &v14;
  uint64_t v5 = (unint64_t *)(a2 + 8);
  v10[2] = &v11;
  sub_E94F24((uint64_t)v10, (unint64_t *)a2, (uint64_t *)(a2 + 8));
  sub_E94F24((uint64_t)v10, v5, (uint64_t *)(a2 + 16));
  sub_E94F24((uint64_t)v10, (unint64_t *)(a2 + 16), (uint64_t *)(a2 + 24));
  if (v14)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v6 = v11;
    uint64_t v7 = v12 - v11;
    if (v12 != v11)
    {
      if (v7 < 0) {
        sub_2E00();
      }
      uint64_t v8 = (char *)operator new(v12 - v11);
      *a3 = v8;
      uint64_t v9 = &v8[8 * (v7 >> 3)];
      a3[2] = v9;
      memcpy(v8, v6, v7 - 1);
      a3[1] = v9;
    }
    if (v6) {
      goto LABEL_6;
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    unint64_t v6 = v11;
    if (v11)
    {
LABEL_6:
      unsigned int v12 = v6;
      operator delete(v6);
    }
  }
}

void sub_E8A300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  unint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
    BOOL v17 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    BOOL v17 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  operator delete(v17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_E8A34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  sub_2E05C4(*(void *)(a1 + 8), *a5, (uint64_t)&__p);
  sub_46B058();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  sub_46B058();
  unsigned int v12 = v11;
  unint64_t v14 = a4 + v13 + 1;
  sub_E951F4((unint64_t)__p, (unint64_t)v27, v8, v10 + a3, v11, v14, (unint64_t *)&v23);
  if (v23 != v27)
  {
    uint64_t v15 = 0;
    goto LABEL_13;
  }
  if (v24)
  {
    unint64_t v16 = v25;
    BOOL v17 = v16 < sub_46C760(v24);
    if (v12) {
      goto LABEL_5;
    }
LABEL_11:
    BOOL v19 = 0;
    goto LABEL_12;
  }
  BOOL v17 = 0;
  if (!v12) {
    goto LABEL_11;
  }
LABEL_5:
  unint64_t v18 = sub_46C760(v12);
  BOOL v19 = v14 < v18;
  if (v14 < v18 && v17)
  {
    uint64_t v21 = sub_46C8EC(v24, v25);
    uint64_t v15 = v21 == sub_46C8EC(v12, v14);
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v15 = v17 ^ v19 ^ 1u;
LABEL_13:
  if (__p)
  {
    unsigned __int16 v27 = __p;
    operator delete(__p);
  }
  return v15;
}

void sub_E8A478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E8A4A0(uint64_t a1, void *a2)
{
  HIBYTE(v41[2]) = 6;
  strcpy((char *)v41, "enable");
  uint64_t v4 = sub_58070(a2, (uint64_t)v41);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)a1 = v5 == 4;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a1 != 0;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  operator delete(v41[0]);
LABEL_7:
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8E90;
  strcpy(v41[0], "partial_probeline_trim_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 8));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8870;
  strcpy(v41[0], "partial_probeline_slack_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 16));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91B0;
  strcpy(v41[0], "connection_pullback_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 24));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20E12D0;
  strcpy(v41[0], "high_quality_num_observation_threshold");
  unint64_t v6 = sub_58070(a2, (uint64_t)v41);
  if (v6 && *((_DWORD *)v6 + 12) == 1)
  {
    *(_WORD *)(a1 + 32) = (int)*((double *)v6 + 5);
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_18;
    }
  }
  else
  {
    *(_WORD *)(a1 + 32) = *(_WORD *)(a1 + 32);
    if (SHIBYTE(v41[2]) < 0) {
LABEL_18:
    }
      operator delete(v41[0]);
  }
  strcpy((char *)v41, "affix_mismatch_penalty");
  HIBYTE(v41[2]) = 22;
  uint64_t v7 = sub_58070(a2, (uint64_t)v41);
  uint64_t v8 = (void *)(a1 + 48);
  if (v7)
  {
    uint64_t v8 = v7 + 5;
    if (*((_DWORD *)v7 + 12) != 1) {
      uint64_t v8 = (void *)(a1 + 48);
    }
  }
  *(void *)(a1 + 48) = *v8;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B5EB0;
  strcpy(v41[0], "observation_penalty_factor");
  uint64_t v9 = sub_58070(a2, (uint64_t)v41);
  uint64_t v10 = (void *)(a1 + 40);
  if (v9)
  {
    uint64_t v10 = v9 + 5;
    if (*((_DWORD *)v9 + 12) != 1) {
      uint64_t v10 = (void *)(a1 + 40);
    }
  }
  *(void *)(a1 + 40) = *v10;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9250;
  strcpy(v41[0], "consider_all_probelines");
  unsigned int v11 = sub_58070(a2, (uint64_t)v41);
  if (v11 && (int v12 = *((_DWORD *)v11 + 12), (v12 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 56) = v12 == 4;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a1 + 56) != 0;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
  }
  operator delete(v41[0]);
LABEL_35:
  v41[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9250;
  strcpy(v41[0], "probeline_trim_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 64));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B5EB0;
  strcpy(v41[0], "center_line_shift_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 72));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 21;
  strcpy((char *)v41, "segment_trim_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 80));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A40;
  strcpy(v41[0], "additional_smooth_transition_trim_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 88));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 13;
  strcpy((char *)v41, "max_shift_frc");
  uint64_t v13 = sub_58070(a2, (uint64_t)v41);
  if (v13 && *((_DWORD *)v13 + 12) == 1)
  {
    *(_DWORD *)(a1 + 96) = *((double *)v13 + 5);
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_48;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a1 + 96);
    if (SHIBYTE(v41[2]) < 0) {
LABEL_48:
    }
      operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 20;
  strcpy((char *)v41, "min_num_observations");
  unint64_t v14 = sub_58070(a2, (uint64_t)v41);
  if (v14 && *((_DWORD *)v14 + 12) == 1)
  {
    *(_WORD *)(a1 + 120) = (int)*((double *)v14 + 5);
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_54;
    }
  }
  else
  {
    *(_WORD *)(a1 + 120) = *(_WORD *)(a1 + 120);
    if (SHIBYTE(v41[2]) < 0) {
LABEL_54:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8890;
  strcpy(v41[0], "smooth_centerline_transitions");
  uint64_t v15 = sub_58070(a2, (uint64_t)v41);
  if (v15 && (int v16 = *((_DWORD *)v15 + 12), (v16 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 122) = v16 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_60;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 122) = *(unsigned char *)(a1 + 122) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_60:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "min_deviation_from_straight");
  BOOL v17 = sub_58070(a2, (uint64_t)v41);
  unint64_t v18 = (void *)(a1 + 128);
  if (v17)
  {
    unint64_t v18 = v17 + 5;
    if (*((_DWORD *)v17 + 12) != 1) {
      unint64_t v18 = (void *)(a1 + 128);
    }
  }
  *(void *)(a1 + 128) = *v18;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 18;
  strcpy((char *)v41, "pull_back_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 136));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9250;
  strcpy(v41[0], "max_distance_from_tnp_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 104));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8E90;
  strcpy(v41[0], "max_distance_from_center_line_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 112));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 16;
  strcpy((char *)v41, "bezier_point_gap");
  BOOL v19 = sub_58070(a2, (uint64_t)v41);
  std::string::size_type v20 = (void *)(a1 + 144);
  if (v19)
  {
    std::string::size_type v20 = v19 + 5;
    if (*((_DWORD *)v19 + 12) != 1) {
      std::string::size_type v20 = (void *)(a1 + 144);
    }
  }
  *(void *)(a1 + 144) = *v20;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 12;
  strcpy((char *)v41, "bezier_error");
  uint64_t v21 = sub_58070(a2, (uint64_t)v41);
  unsigned __int16 v22 = (void *)(a1 + 152);
  if (v21)
  {
    unsigned __int16 v22 = v21 + 5;
    if (*((_DWORD *)v21 + 12) != 1) {
      unsigned __int16 v22 = (void *)(a1 + 152);
    }
  }
  *(void *)(a1 + 152) = *v22;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 13;
  strcpy((char *)v41, "bezier_window");
  unsigned __int16 v23 = sub_58070(a2, (uint64_t)v41);
  unsigned int v24 = (void *)(a1 + 160);
  if (v23)
  {
    unsigned int v24 = v23 + 5;
    if (*((_DWORD *)v23 + 12) != 1) {
      unsigned int v24 = (void *)(a1 + 160);
    }
  }
  *(void *)(a1 + 160) = *v24;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8E90;
  strcpy(v41[0], "bezier_simplification_tolerance");
  unint64_t v25 = sub_58070(a2, (uint64_t)v41);
  int v26 = (void *)(a1 + 168);
  if (v25)
  {
    int v26 = v25 + 5;
    if (*((_DWORD *)v25 + 12) != 1) {
      int v26 = (void *)(a1 + 168);
    }
  }
  *(void *)(a1 + 168) = *v26;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 20;
  strcpy((char *)v41, "max_added_tortuosity");
  unsigned __int16 v27 = sub_58070(a2, (uint64_t)v41);
  unsigned __int16 v28 = (void *)(a1 + 176);
  if (v27)
  {
    unsigned __int16 v28 = v27 + 5;
    if (*((_DWORD *)v27 + 12) != 1) {
      unsigned __int16 v28 = (void *)(a1 + 176);
    }
  }
  *(void *)(a1 + 176) = *v28;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B93A0;
  strcpy(v41[0], "enable_ratio_from_segment_start_fix");
  int v29 = sub_58070(a2, (uint64_t)v41);
  if (v29 && (int v30 = *((_DWORD *)v29 + 12), (v30 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 185) = v30 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_102;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 185) = *(unsigned char *)(a1 + 185) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_102:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20E12D0;
  strcpy(v41[0], "ratio_from_start_max_search_multiplier");
  uint64_t v31 = sub_58070(a2, (uint64_t)v41);
  uint64_t v32 = (void *)(a1 + 192);
  if (v31)
  {
    uint64_t v32 = v31 + 5;
    if (*((_DWORD *)v31 + 12) != 1) {
      uint64_t v32 = (void *)(a1 + 192);
    }
  }
  *(void *)(a1 + 192) = *v32;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A30;
  strcpy(v41[0], "engage_alternate_ratio_from_geometry_start_logic_threshold");
  uint64_t v33 = sub_58070(a2, (uint64_t)v41);
  double v34 = (void *)(a1 + 200);
  if (v33)
  {
    double v34 = v33 + 5;
    if (*((_DWORD *)v33 + 12) != 1) {
      double v34 = (void *)(a1 + 200);
    }
  }
  *(void *)(a1 + 200) = *v34;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20B93C0;
  strcpy(v41[0], "minimum_probeline_candidate_length_ratio");
  long double v35 = sub_58070(a2, (uint64_t)v41);
  long double v36 = (void *)(a1 + 208);
  if (v35)
  {
    long double v36 = v35 + 5;
    if (*((_DWORD *)v35 + 12) != 1) {
      long double v36 = (void *)(a1 + 208);
    }
  }
  *(void *)(a1 + 208) = *v36;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8870;
  strcpy(v41[0], "skip_short_cut_probelines");
  long double v37 = sub_58070(a2, (uint64_t)v41);
  if (v37 && (int v38 = *((_DWORD *)v37 + 12), (v38 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 216) = v38 == 4;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_124;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a1 + 216) != 0;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_124;
    }
  }
  operator delete(v41[0]);
LABEL_124:
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20E1380;
  strcpy(v41[0], "max_allowed_frechet_distance_from_centerline");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 224));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8890;
  strcpy(v41[0], "walking_partial_geometry_trim");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 232));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 20;
  strcpy((char *)v41, "walking_pathway_trim");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 240));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 14;
  strcpy((char *)v41, "walking_trim_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 248));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A40;
  strcpy(v41[0], "require_geometry_path_is_continuous_subset");
  double v39 = sub_58070(a2, (uint64_t)v41);
  if (v39 && (int v40 = *((_DWORD *)v39 + 12), (v40 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 256) = v40 == 4;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_138;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(a1 + 256) != 0;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_138;
    }
  }
  operator delete(v41[0]);
LABEL_138:
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8FD0;
  strcpy(v41[0], "max_ratio_at_point_search_distance_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 264));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
}

void sub_E8B2D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 25) < 0) {
    operator delete(*(void **)(v1 - 48));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E8B378(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = sub_3750CC(a2);
  *(void *)(a1 + 8) = sub_375328(a2);
  uint64_t v30 = 0;
  uint64_t v31 = (char *)operator new(0x20uLL);
  long long v32 = xmmword_20B5EB0;
  strcpy(v31, "RouteLineGeometryGenerator");
  unsigned __int16 v28 = 0;
  uint64_t v29 = 0;
  unint64_t v6 = sub_374CDC((uint64_t)a2, (uint64_t)&v31, (uint64_t *)&v28);
  char v25 = 8;
  uint64_t v23 = 0;
  strcpy((char *)v24, "Guidance");
  uint64_t v21 = 0;
  unsigned __int16 v22 = 0;
  uint64_t v7 = sub_374CDC((uint64_t)a2, (uint64_t)v24, (uint64_t *)&v21);
  sub_3CB370(v7, 0, 0, v26);
  float64x2_t __p = operator new(0x28uLL);
  long long v20 = xmmword_20B9960;
  strcpy((char *)__p, "activate_springfield_preflight_polygons");
  BOOL v8 = sub_29D62C(v26, (uint64_t)&__p);
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 1500;
  *(_WORD *)(a1 + 48) = 50;
  *(_OWORD *)(a1 + 56) = xmmword_20F0E90;
  *(unsigned char *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 6;
  *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(_WORD *)(a1 + 136) = -1;
  *(unsigned char *)(a1 + 138) = 1;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = xmmword_20F0EA0;
  *(_OWORD *)(a1 + 176) = xmmword_20F0EB0;
  *(void *)(a1 + 192) = 0x3FC999999999999ALL;
  *(unsigned char *)(a1 + 200) = v8;
  *(unsigned char *)(a1 + 201) = 1;
  *(int64x2_t *)(a1 + 208) = vdupq_n_s64(0x3FF3333333333333uLL);
  *(void *)(a1 + 224) = 0x3FE3333333333333;
  *(unsigned char *)(a1 + 232) = 1;
  *(_OWORD *)(a1 + 240) = xmmword_20F0EC0;
  *(_OWORD *)(a1 + 256) = xmmword_20F0ED0;
  *(unsigned char *)(a1 + 272) = 1;
  *(void *)(a1 + 280) = 10000;
  sub_E8F9A0(a1 + 16, v6);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
  uint64_t v9 = v27;
  if (v27)
  {
    do
    {
      unint64_t v14 = *(char **)v9;
      sub_57AC8((uint64_t *)v9 + 5);
      if (v9[39] < 0) {
        operator delete(*((void **)v9 + 2));
      }
      operator delete(v9);
      uint64_t v9 = v14;
    }
    while (v14);
  }
  uint64_t v10 = v26[0];
  v26[0] = 0;
  if (v10) {
    operator delete(v10);
  }
  unsigned int v11 = (void **)v21;
  if (v21)
  {
    int v12 = v22;
    uint64_t v13 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = v21;
    }
    unsigned __int16 v22 = v11;
    operator delete(v13);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  uint64_t v15 = (uint64_t)v28;
  if (v28)
  {
    uint64_t v16 = v29;
    BOOL v17 = v28;
    if ((void *)v29 != v28)
    {
      do
      {
        if (*(char *)(v16 - 1) < 0) {
          operator delete(*(void **)(v16 - 24));
        }
        v16 -= 24;
      }
      while (v16 != v15);
      BOOL v17 = v28;
    }
    uint64_t v29 = v15;
    operator delete(v17);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v31);
  }
  *(void *)(a1 + 288) = a3;
  return a1;
}

void sub_E8B67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  sub_5450C((uint64_t)&a24);
  sub_1A668(&a15);
  if (a23 < 0)
  {
    operator delete(__p);
    sub_1A668((void **)(v24 - 80));
    if ((*(char *)(v24 - 33) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_1A668((void **)(v24 - 80));
    if ((*(char *)(v24 - 33) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  operator delete(*(void **)(v24 - 56));
  _Unwind_Resume(a1);
}

void sub_E8B714(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_E8BE44((uint64_t)a1, a2, &v64);
  long double v50 = a3;
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)v55);
    sub_188FC78(v55, (uint64_t)"Checkpoints: ", 13);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 2u);
    if (v54 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v62[1]) < 0) {
      operator delete(v61);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  int v5 = v64;
  uint64_t v4 = v65;
  if (v64 != v65)
  {
    do
    {
      if (sub_723EC(2u))
      {
        sub_6BAC((uint64_t)v55);
        sub_188FC78(v55, (uint64_t)"For segment: ", 13);
        uint64_t v7 = (void *)std::ostream::operator<<();
        BOOL v8 = sub_188FC78(v7, (uint64_t)" road", 5);
        unsigned int v9 = *(_DWORD *)(sub_470B40(a2, v5[1]) + 4);
        uint64_t v10 = (void *)std::ostream::operator<<();
        sub_188FC78(v10, (uint64_t)".", 1);
        unsigned int v11 = (void *)std::ostream::operator<<();
        int v12 = sub_188FC78(v11, (uint64_t)" ", 1);
        uint64_t v13 = sub_670B8(v12, (v9 & 0x20000000) == 0);
        unint64_t v14 = sub_188FC78(v13, (uint64_t)" ", 1);
        if ((v9 & 0x40000000) != 0) {
          int v15 = 2;
        }
        else {
          int v15 = v9 >> 31;
        }
        sub_670FC(v14, v15);
        uint64_t v16 = sub_188FC78(v8, (uint64_t)" ", 1);
        BOOL v17 = sub_51960(v16, *v5);
        sub_188FC78(v17, (uint64_t)".", 1);
        std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24)));
        unint64_t v18 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
        std::locale::~locale((std::locale *)__p);
        std::ostream::put();
        std::ostream::flush();
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 2u);
        if (v54 < 0) {
          operator delete(__p[0]);
        }
        *(void *)&v55[0] = v51;
        *(void *)((char *)v55 + *(void *)(v51 - 24)) = v6;
        if (SHIBYTE(v62[1]) < 0) {
          operator delete(v61);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      v5 += 2;
    }
    while (v5 != v4);
  }
  sub_E8BF84(a1, a2, (uint64_t)&v64, (uint64_t)a3);
  uint64_t v19 = *a3;
  if (*v50 == v50[1])
  {
    uint64_t v24 = (long long *)*v50;
    long long v20 = a2;
  }
  else
  {
    long long v20 = a2;
    uint64_t v21 = (unsigned int *)sub_64EFB8((uint64_t)a2);
    sub_E91BF4(v19, v21);
    uint64_t v22 = v50[1];
    uint64_t v23 = (unsigned int *)sub_64EFC4((uint64_t)a2);
    sub_E91BF4(v22 - 104, v23);
    uint64_t v24 = (long long *)*v50;
    uint64_t v19 = v50[1];
  }
  char v25 = (long long *)v19;
  uint64_t v26 = (uint64_t)v50;
  unsigned __int16 v27 = sub_E954F8(v24, v25);
  sub_E953EC(v26, (uint64_t)v27, *(long long **)(v26 + 8));
  if (*(void *)v26 == *(void *)(v26 + 8) && sub_470ADC(v20) >= 2)
  {
    uint64_t v28 = sub_470ADC(v20) - 1;
    uint64_t v29 = *(int **)(sub_470B40(v20, v28) + 8);
    uint64_t v30 = (unsigned __int16 *)((char *)v29 - *v29);
    if (*v30 >= 9u && (uint64_t v31 = v30[4]) != 0) {
      uint64_t v32 = *(unsigned int *)((char *)v29 + v31);
    }
    else {
      uint64_t v32 = 0;
    }
    sub_E8C2C4(a1, v20, 0, 0, v28, v32, (uint64_t)v55);
    unint64_t v33 = v50[1];
    if (v33 >= v50[2])
    {
      uint64x2_t v41 = sub_E9367C((void **)v50, (uint64_t)v55);
      int64x2_t v42 = (char *)v62[0];
      v50[1] = (uint64_t)v41;
      if (v42)
      {
        long double v43 = (char *)v62[1];
        long double v44 = v42;
        if (v62[1] != v42)
        {
          do
          {
            unint64_t v45 = (void *)*((void *)v43 - 8);
            if (v45)
            {
              *((void *)v43 - 7) = v45;
              operator delete(v45);
            }
            v43 -= 80;
          }
          while (v43 != v42);
          long double v44 = (char *)v62[0];
        }
        v62[1] = v42;
        operator delete(v44);
      }
    }
    else
    {
      long long v34 = v55[0];
      long long v35 = v55[1];
      *(_DWORD *)(v33 + 32) = v56;
      *(_OWORD *)unint64_t v33 = v34;
      *(_OWORD *)(v33 + 16) = v35;
      long double v36 = v57;
      long double v57 = 0;
      *(void *)(v33 + 40) = v36;
      *(void *)(v33 + 48) = v58;
      uint64_t v58 = 0;
      long double v37 = v59;
      *(void *)(v33 + 56) = v59;
      uint64_t v38 = v60;
      *(void *)(v33 + 64) = v60;
      *(_DWORD *)(v33 + 72) = v61;
      if (v38)
      {
        unint64_t v39 = v37[1];
        unint64_t v40 = *(void *)(v33 + 48);
        if ((v40 & (v40 - 1)) != 0)
        {
          if (v39 >= v40) {
            v39 %= v40;
          }
        }
        else
        {
          v39 &= v40 - 1;
        }
        v36[v39] = v33 + 56;
        long double v59 = 0;
        uint64_t v60 = 0;
      }
      *(void *)(v33 + 80) = 0;
      *(void *)(v33 + 88) = 0;
      *(void *)(v33 + 96) = 0;
      *(_OWORD *)(v33 + 80) = *(_OWORD *)v62;
      *(void *)(v33 + 96) = v63;
      v62[0] = 0;
      v62[1] = 0;
      uint64_t v63 = 0;
      v50[1] = v33 + 104;
    }
    uint64_t v46 = v59;
    if (v59)
    {
      do
      {
        uint64_t v47 = (void *)*v46;
        operator delete(v46);
        uint64_t v46 = v47;
      }
      while (v47);
    }
    long double v48 = v57;
    long double v57 = 0;
    if (v48) {
      operator delete(v48);
    }
  }
  if (v64)
  {
    float64x2_t v65 = v64;
    operator delete(v64);
  }
}

void sub_E8BD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  sub_E8CCE4(&a19);
  sub_E8CD80(a10);
  uint64_t v21 = *(void **)(v19 - 112);
  if (v21)
  {
    *(void *)(v19 - 104) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

void *sub_E8BE44@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  double result = (void *)sub_470ADC(a2);
  if (!result)
  {
    LODWORD(v14) = 0;
    goto LABEL_16;
  }
  uint64_t v7 = result;
  for (uint64_t i = 0; (void *)i != v7; ++i)
  {
    uint64_t v17 = i;
    double result = (void *)sub_470B40(a2, i);
    unsigned int v9 = (int *)result[2];
    uint64_t v10 = (unsigned __int16 *)((char *)v9 - *v9);
    if (*v10 >= 0x11u)
    {
      uint64_t v11 = v10[8];
      if (v11)
      {
        __int16 v12 = *(_WORD *)((char *)v9 + v11);
        if (!*(unsigned char *)(a1 + 200) || (v12 & 0x40) != 0)
        {
          if ((v12 & 0x40) == 0) {
            continue;
          }
        }
        else if ((v12 & 0x80) == 0)
        {
          continue;
        }
        uint64_t v13 = *(void *)(a1 + 8);
        uint64_t v15 = *result;
        double result = (void *)sub_2E0194(v13, (unsigned int *)&v15);
        uint64_t v16 = result;
        if (result && (unint64_t)result < 0xFFFFFFFF00000000) {
          double result = sub_29AC28((uint64_t)a3, &v16, &v17);
        }
      }
    }
  }
  uint64_t v14 = (a3[1] - *a3) >> 4;
LABEL_16:
  *(_DWORD *)(*(void *)(a1 + 288) + 24) += v14;
  return result;
}

void sub_E8BF60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_E8BF84(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  unint64_t v8 = sub_470ADC(a2);
  if (*(void *)a3 == *(void *)(a3 + 8))
  {
    uint64_t v14 = v8 - 1;
    uint64_t v15 = *(int **)(sub_470B40(a2, v8 - 1) + 8);
    uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 >= 9u && (uint64_t v17 = v16[4]) != 0) {
      uint64_t v18 = *(unsigned int *)((char *)v15 + v17);
    }
    else {
      uint64_t v18 = 0;
    }
    sub_E8C2C4(a1, a2, 0, 0, v14, v18, (uint64_t)&v36);
    unint64_t v19 = *(void *)(a4 + 8);
    if (v19 >= *(void *)(a4 + 16))
    {
      unsigned __int16 v27 = sub_E9367C((void **)a4, (uint64_t)&v36);
      uint64_t v28 = (char *)__p[0];
      *(void *)(a4 + 8) = v27;
      if (v28)
      {
        uint64_t v29 = (char *)__p[1];
        uint64_t v30 = v28;
        if (__p[1] != v28)
        {
          do
          {
            uint64_t v31 = (void *)*((void *)v29 - 8);
            if (v31)
            {
              *((void *)v29 - 7) = v31;
              operator delete(v31);
            }
            v29 -= 80;
          }
          while (v29 != v28);
          uint64_t v30 = (char *)__p[0];
        }
        __p[1] = v28;
        operator delete(v30);
      }
    }
    else
    {
      long long v20 = v36;
      long long v21 = v37;
      *(_DWORD *)(v19 + 32) = v38;
      *(_OWORD *)unint64_t v19 = v20;
      *(_OWORD *)(v19 + 16) = v21;
      uint64_t v22 = v39;
      unint64_t v39 = 0;
      *(void *)(v19 + 40) = v22;
      *(void *)(v19 + 48) = v40;
      uint64_t v40 = 0;
      uint64_t v23 = v41;
      *(void *)(v19 + 56) = v41;
      uint64_t v24 = v42;
      *(void *)(v19 + 64) = v42;
      *(_DWORD *)(v19 + 72) = v43;
      if (v24)
      {
        unint64_t v25 = v23[1];
        unint64_t v26 = *(void *)(v19 + 48);
        if ((v26 & (v26 - 1)) != 0)
        {
          if (v25 >= v26) {
            v25 %= v26;
          }
        }
        else
        {
          v25 &= v26 - 1;
        }
        v22[v25] = v19 + 56;
        uint64x2_t v41 = 0;
        uint64_t v42 = 0;
      }
      *(void *)(v19 + 80) = 0;
      *(void *)(v19 + 88) = 0;
      *(void *)(v19 + 96) = 0;
      *(_OWORD *)(v19 + 80) = *(_OWORD *)__p;
      *(void *)(v19 + 96) = v45;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v45 = 0;
      *(void *)(a4 + 8) = v19 + 104;
    }
    uint64_t v32 = v41;
    if (v41)
    {
      do
      {
        unint64_t v33 = (void *)*v32;
        operator delete(v32);
        uint64_t v32 = v33;
      }
      while (v33);
    }
    long long v34 = v39;
    unint64_t v39 = 0;
    if (v34) {
      operator delete(v34);
    }
  }
  else
  {
    sub_E8CDBC(a1, a2, (unint64_t **)a3, a4);
    unsigned int v9 = *(long long **)(a3 + 8);
    uint64_t v10 = (long long *)(*(void *)a3 + 16);
    if (*(long long **)a3 != v9 && v10 != v9)
    {
      do
      {
        long long v36 = *(v10 - 1);
        long long v37 = *v10;
        __int16 v12 = (char *)operator new(0x20uLL);
        v35[1] = (unint64_t *)(v12 + 32);
        v35[2] = (unint64_t *)(v12 + 32);
        long long v13 = v37;
        *(_OWORD *)__int16 v12 = v36;
        *((_OWORD *)v12 + 1) = v13;
        v35[0] = (unint64_t *)v12;
        sub_E90EB0(a1, a2, v35, a4);
        operator delete(v12);
        ++v10;
      }
      while (v10 != v9);
    }
    sub_E8ECD4(a1, a2, a3, a4);
  }
}

void sub_E8C250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_E8CCE4((uint64_t *)va);
  sub_E8CD80(v5);
  _Unwind_Resume(a1);
}

void sub_E8C26C(_Unwind_Exception *a1)
{
  sub_E8CD80(v1);
  _Unwind_Resume(a1);
}

void sub_E8C280(_Unwind_Exception *a1)
{
  sub_E8CD80(v1);
  _Unwind_Resume(a1);
}

void sub_E8C294(_Unwind_Exception *a1)
{
  operator delete(v2);
  sub_E8CD80(v1);
  _Unwind_Resume(a1);
}

void sub_E8C2B0(_Unwind_Exception *a1)
{
  sub_E8CD80(v1);
  _Unwind_Resume(a1);
}

void sub_E8C2C4(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  if (sub_723EC(2u))
  {
    sub_6BAC((uint64_t)&v98);
    sub_188FC78(&v98, (uint64_t)"Falling back to center-line geometry for segments [", 51);
    long long v13 = (void *)std::ostream::operator<<();
    sub_188FC78(v13, (uint64_t)", ", 2);
    uint64_t v14 = (void *)std::ostream::operator<<();
    sub_188FC78(v14, (uint64_t)"].", 2);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 2u);
    if (v97 < 0) {
      operator delete(__p);
    }
    if (v102 < 0) {
      operator delete(v101);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(void *)a7 = a3;
  *(void *)(a7 + 8) = a4;
  *(void *)(a7 + 16) = a5;
  *(void *)(a7 + 24) = a6;
  *(_DWORD *)(a7 + 32) = 3;
  *(_OWORD *)(a7 + 40) = 0u;
  *(_OWORD *)(a7 + 56) = 0u;
  *(_DWORD *)(a7 + 72) = 1065353216;
  *(void *)(a7 + 88) = 0;
  *(void *)(a7 + 96) = 0;
  *(void *)(a7 + 80) = 0;
  sub_63841C(a7, 1);
  uint64_t v15 = sub_68EA4(a7);
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 + 8);
  unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((v17 - *(void *)v15) >> 4);
  if (v17 == *(void *)v15)
  {
    sub_E93980((void **)v15, 1 - v18);
  }
  else if (v18 >= 2)
  {
    uint64_t v19 = *(void *)v15 + 80;
    while (v17 != v19)
    {
      long long v20 = *(void **)(v17 - 64);
      if (v20)
      {
        *(void *)(v17 - 56) = v20;
        operator delete(v20);
      }
      v17 -= 80;
    }
    *(void *)(v16 + 8) = v19;
  }
  uint64_t v21 = *(void *)sub_68EA4(a7);
  uint64_t v22 = *(int **)(sub_470B40(a2, a3) + 8);
  uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 >= 9u && (uint64_t v24 = v23[4]) != 0) {
    uint64_t v25 = *(unsigned int *)((char *)v22 + v24);
  }
  else {
    uint64_t v25 = 0;
  }
  unint64_t v26 = *(int **)(sub_470B40(a2, a5) + 8);
  unsigned __int16 v27 = (unsigned __int16 *)((char *)v26 - *v26);
  uint64_t v92 = a6;
  if (*v27 >= 9u && (uint64_t v28 = v27[4]) != 0) {
    uint64_t v29 = *(unsigned int *)((char *)v26 + v28);
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v30 = (unsigned int **)(v21 + 16);
  uint64_t v93 = a5;
  if (a3 <= a5 + 1) {
    unint64_t v31 = a5 + 1;
  }
  else {
    unint64_t v31 = a3;
  }
  if (a5 + 1 > a3)
  {
    uint64_t v32 = 0;
    unint64_t v33 = a3 - v31;
    double v34 = (double)v92 / (double)v29;
    do
    {
      long long v35 = (unsigned int *)sub_470B40(a2, a3 + v32);
      sub_2954EC(*a1, (((unint64_t)(v35[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v35[1] << 32) | *v35) ^ 0x1000000000000, (uint64_t)&v98);
      if (v32) {
        double v36 = 0.0;
      }
      else {
        double v36 = (double)a4 / (double)v25;
      }
      if (a3 - v93 + v32) {
        double v37 = 1.0;
      }
      else {
        double v37 = v34;
      }
      sub_E8979C((uint64_t)&v98, 0, &__p, v36, v37);
      sub_46C6C(v21 + 16, *(void *)(v21 + 24), (char *)__p, v96, 0xAAAAAAAAAAAAAAABLL * ((v96 - (unsigned char *)__p) >> 2));
      if (__p)
      {
        uint64_t v96 = (char *)__p;
        operator delete(__p);
      }
      if (v99)
      {
        uint64_t v100 = v99;
        operator delete(v99);
      }
      ++v32;
    }
    while (v33 + v32);
  }
  unint64_t v39 = *(_DWORD **)(v21 + 16);
  int v38 = *(_DWORD **)(v21 + 24);
  if (v39 != v38)
  {
    uint64_t v40 = v39 - 3;
    do
    {
      if (v40 + 6 == v38) {
        goto LABEL_59;
      }
      int v41 = v40[3];
      int v42 = v40[4];
      v40 += 3;
    }
    while (v41 != v40[3] || v42 != v40[4]);
    long double v44 = v40 + 6;
    if (v40 + 6 == v38)
    {
      uint64_t v45 = v40 + 3;
      if (v40 + 3 == v38) {
        goto LABEL_59;
      }
      goto LABEL_58;
    }
    do
    {
      if (*v40 != *v44 || v40[1] != v44[1])
      {
        int v47 = v44[2];
        *(void *)(v40 + 3) = *(void *)v44;
        v40 += 3;
        v40[2] = v47;
      }
      v44 += 3;
    }
    while (v44 != v38);
    uint64_t v45 = v40 + 3;
    if (v40 + 3 != *(_DWORD **)(v21 + 24)) {
LABEL_58:
    }
      *(void *)(v21 + 24) = v45;
  }
LABEL_59:
  uint64_t v48 = a1[1];
  long long v98 = *(unint64_t **)sub_470B40(a2, a3);
  unint64_t v49 = sub_2E0194(v48, (unsigned int *)&v98);
  if (v49 > 0xFFFFFFFEFFFFFFFFLL || v49 == 0) {
    goto LABEL_76;
  }
  uint64_t v51 = sub_2E1FA4(a1[1], v49, 1);
  if (v51
    && (long double v52 = &v51[-*(int *)v51], *(unsigned __int16 *)v52 >= 5u)
    && (uint64_t v53 = *((unsigned __int16 *)v52 + 2)) != 0
    && (char v54 = &v51[v53 + *(unsigned int *)&v51[v53]], *(_DWORD *)v54 > HIDWORD(v49))
    && (long double v55 = (int *)sub_2E2AB8(v54, v49)) != 0)
  {
    int v56 = (unsigned __int16 *)((char *)v55 - *v55);
    if (*v56 < 7u)
    {
      if (a4) {
        goto LABEL_76;
      }
      goto LABEL_74;
    }
    uint64_t v57 = v56[3];
    if (v57)
    {
      if (*(int *)((char *)v55 + v57) == a4) {
        goto LABEL_74;
      }
LABEL_76:
      uint64_t v58 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_77;
    }
  }
  else
  {
    uint64_t v57 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v57 != a4) {
    goto LABEL_76;
  }
LABEL_74:
  uint64_t v58 = sub_E91F40(a1[1], v49, *v30, *v30 + 3);
LABEL_77:
  uint64_t v59 = a1[1];
  long long v98 = *(unint64_t **)sub_470B40(a2, v93);
  unint64_t v60 = sub_2E0194(v59, (unsigned int *)&v98);
  uint64_t v61 = 0x7FFFFFFFFFFFFFFFLL;
  if (v60 > 0xFFFFFFFEFFFFFFFFLL || !v60) {
    goto LABEL_91;
  }
  unsigned int v62 = sub_2E1FA4(a1[1], v60, 1);
  if (v62
    && (uint64_t v63 = &v62[-*(int *)v62], *(unsigned __int16 *)v63 >= 5u)
    && (uint64_t v64 = *((unsigned __int16 *)v63 + 2)) != 0
    && (float64x2_t v65 = &v62[v64 + *(unsigned int *)&v62[v64]], *(_DWORD *)v65 > HIDWORD(v60))
    && (float64x2_t v66 = (int *)sub_2E2AB8(v65, v60)) != 0)
  {
    double v67 = (unsigned __int16 *)((char *)v66 - *v66);
    if (*v67 < 7u)
    {
      if (v92) {
        goto LABEL_91;
      }
      goto LABEL_90;
    }
    uint64_t v68 = v67[3];
    if (v68)
    {
      if (*(int *)((char *)v66 + v68) == v92) {
        goto LABEL_90;
      }
      goto LABEL_91;
    }
  }
  else
  {
    uint64_t v68 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v68 == v92) {
LABEL_90:
  }
    uint64_t v61 = -sub_E91F40(a1[1], v60, (unsigned int *)(*(void *)(v21 + 24) - 12), (unsigned int *)(*(void *)(v21 + 24) - 24));
LABEL_91:
  if (v58 != 0x7FFFFFFFFFFFFFFFLL || v61 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v58 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v69 = v61;
    }
    else {
      uint64_t v69 = v58;
    }
    float64x2_t v70 = *(void **)(v21 + 24);
    if (v61 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v71 = v58;
    }
    else {
      uint64_t v71 = v61;
    }
    long long v98 = *(unint64_t **)(v21 + 16);
    float64x2_t __p = v70;
    sub_E942B8(&v98, (unint64_t **)&__p, v69, v71);
    if (v58 != 0x7FFFFFFFFFFFFFFFLL)
    {
      double v72 = sub_2E1FA4(a1[1], v49, 1);
      if (v72
        && (long double v73 = &v72[-*(int *)v72], *(unsigned __int16 *)v73 >= 5u)
        && (uint64_t v74 = *((unsigned __int16 *)v73 + 2)) != 0
        && (long long v75 = &v72[v74 + *(unsigned int *)&v72[v74]], *(_DWORD *)v75 > HIDWORD(v49))
        && (unint64_t v76 = (int *)sub_2E2AB8(v75, v49)) != 0)
      {
        uint64_t v77 = (uint64_t)v76 + *(unsigned __int16 *)((char *)v76 - *v76 + 8);
        uint64_t v78 = *(unsigned int *)v77;
        LODWORD(v77) = *(_DWORD *)(v77 + 4);
        if (v77 >= 0xFFFFFFFE) {
          uint64_t v77 = 4294967294;
        }
        else {
          uint64_t v77 = v77;
        }
        unint64_t v79 = v77 << 32;
      }
      else
      {
        unint64_t v79 = 0xFFFFFFFF00000000;
        uint64_t v78 = 0xFFFFFFFFLL;
      }
      unint64_t v80 = v79 | v78;
      uint64_t v81 = *v30;
      *(void *)uint64_t v81 = v80;
      v81[2] = 0x7FFFFFFF;
    }
    if (v61 != 0x7FFFFFFFFFFFFFFFLL)
    {
      unint64_t v82 = sub_2E1FA4(a1[1], v60, 1);
      if (v82
        && (unint64_t v83 = &v82[-*(int *)v82], *(unsigned __int16 *)v83 >= 5u)
        && (uint64_t v84 = *((unsigned __int16 *)v83 + 2)) != 0
        && (BOOL v85 = &v82[v84 + *(unsigned int *)&v82[v84]], *(_DWORD *)v85 > HIDWORD(v60))
        && (uint64_t v86 = (int *)sub_2E2AB8(v85, v60)) != 0)
      {
        uint64_t v87 = (uint64_t)v86 + *(unsigned __int16 *)((char *)v86 - *v86 + 8);
        uint64_t v88 = *(unsigned int *)v87;
        LODWORD(v87) = *(_DWORD *)(v87 + 4);
        if (v87 >= 0xFFFFFFFE) {
          uint64_t v87 = 4294967294;
        }
        else {
          uint64_t v87 = v87;
        }
        unint64_t v89 = v87 << 32;
      }
      else
      {
        unint64_t v89 = 0xFFFFFFFF00000000;
        uint64_t v88 = 0xFFFFFFFFLL;
      }
      unint64_t v90 = v89 | v88;
      uint64_t v91 = *(void *)(v21 + 24);
      *(void *)(v91 - 12) = v90;
      *(_DWORD *)(v91 - 4) = 0x7FFFFFFF;
    }
  }
}

void sub_E8CB24(_Unwind_Exception *a1)
{
  sub_E8CCE4(v1);
  _Unwind_Resume(a1);
}

void sub_E8CB38(_Unwind_Exception *a1)
{
  sub_E8CCE4(v1);
  _Unwind_Resume(a1);
}

void sub_E8CB4C(_Unwind_Exception *a1)
{
  sub_E8CCE4(v1);
  _Unwind_Resume(a1);
}

void sub_E8CB60(_Unwind_Exception *a1)
{
  sub_E8CCE4(v1);
  _Unwind_Resume(a1);
}

void sub_E8CB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_E8CC60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v19 = a16;
    if (!a16)
    {
LABEL_3:
      sub_E8CCE4(v17);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v19 = a16;
    if (!a16) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  sub_E8CCE4(v17);
  _Unwind_Resume(a1);
}

void sub_E8CCBC(_Unwind_Exception *a1)
{
  sub_E8CCE4(v1);
  _Unwind_Resume(a1);
}

void sub_E8CCD0(_Unwind_Exception *a1)
{
  sub_E8CCE4(v1);
  _Unwind_Resume(a1);
}

void *sub_E8CCE4(void *a1)
{
  uint64_t v2 = a1[10];
  if (v2)
  {
    uint64_t v3 = a1[11];
    uint64_t v4 = (void *)a1[10];
    if (v3 != v2)
    {
      do
      {
        int v5 = *(void **)(v3 - 64);
        if (v5)
        {
          *(void *)(v3 - 56) = v5;
          operator delete(v5);
        }
        v3 -= 80;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[10];
    }
    a1[11] = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)a1[7];
  if (v6)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  unint64_t v8 = (void *)a1[5];
  a1[5] = 0;
  if (v8) {
    operator delete(v8);
  }
  return a1;
}

uint64_t *sub_E8CD80(uint64_t *a1)
{
  if (*a1)
  {
    sub_E92790((uint64_t)a1, *a1);
    operator delete((void *)*a1);
  }
  return a1;
}

void sub_E8CDBC(uint64_t *a1, void *a2, unint64_t **a3, uint64_t a4)
{
  sub_E8D5E0(a1, a2, *a3, 1, (uint64_t)&v96);
  if (*((void *)&v96 + 1) != 0x7FFFFFFFFFFFFFFFLL && *((void *)&v97 + 1) != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v9 = v104;
    if ((void)v104 != *((void *)&v104 + 1))
    {
      while (*(void *)(v9 + 16) != *(void *)(v9 + 24))
      {
        v9 += 80;
        if (v9 == *((void *)&v104 + 1))
        {
          if (sub_40EFE8((uint64_t)&v96))
          {
            uint64_t v10 = sub_40EFE8((uint64_t)&v96);
            uint64_t v11 = sub_52058((uint64_t)&v96);
            sub_E8C2C4(a1, a2, 0, 0, v10, v11, (uint64_t)&v86);
            if (*((void *)&v86 + 1) != 0x7FFFFFFFFFFFFFFFLL && *((void *)&v87 + 1) != 0x7FFFFFFFFFFFFFFFLL)
            {
              __int16 v12 = __p[0];
              if (__p[0] != __p[1])
              {
                while (v12[2] != v12[3])
                {
                  v12 += 10;
                  if (v12 == __p[1])
                  {
                    sub_E8E8F8((uint64_t)a1, (uint64_t)&v96, (uint64_t)&v86);
                    unint64_t v13 = *(void *)(a4 + 8);
                    if (v13 >= *(void *)(a4 + 16))
                    {
                      uint64_t v78 = sub_E9367C((void **)a4, (uint64_t)&v86);
                    }
                    else
                    {
                      long long v14 = v86;
                      long long v15 = v87;
                      *(_DWORD *)(v13 + 32) = v88;
                      *(_OWORD *)unint64_t v13 = v14;
                      *(_OWORD *)(v13 + 16) = v15;
                      uint64_t v16 = v89;
                      unint64_t v89 = 0;
                      *(void *)(v13 + 40) = v16;
                      *(void *)(v13 + 48) = v90;
                      uint64_t v90 = 0;
                      uint64_t v17 = v91;
                      *(void *)(v13 + 56) = v91;
                      uint64_t v18 = v92;
                      *(void *)(v13 + 64) = v92;
                      *(_DWORD *)(v13 + 72) = v93;
                      if (v18)
                      {
                        unint64_t v19 = v17[1];
                        unint64_t v20 = *(void *)(v13 + 48);
                        if ((v20 & (v20 - 1)) != 0)
                        {
                          if (v19 >= v20) {
                            v19 %= v20;
                          }
                        }
                        else
                        {
                          v19 &= v20 - 1;
                        }
                        v16[v19] = v13 + 56;
                        uint64_t v91 = 0;
                        uint64_t v92 = 0;
                      }
                      *(void *)(v13 + 80) = 0;
                      *(void *)(v13 + 88) = 0;
                      *(void *)(v13 + 96) = 0;
                      *(_OWORD *)(v13 + 80) = *(_OWORD *)__p;
                      *(void *)(v13 + 96) = v95;
                      __p[0] = 0;
                      __p[1] = 0;
                      uint64_t v95 = 0;
                      uint64_t v78 = (char *)(v13 + 104);
                    }
                    *(void *)(a4 + 8) = v78;
                    if ((unint64_t)v78 < *(void *)(a4 + 16))
                    {
                      long long v79 = v96;
                      long long v80 = v97;
                      *((_DWORD *)v78 + 8) = v98;
                      *(_OWORD *)uint64_t v78 = v79;
                      *((_OWORD *)v78 + 1) = v80;
                      uint64_t v81 = v99;
                      int v99 = 0;
                      *((void *)v78 + 5) = v81;
                      *((void *)v78 + 6) = v100;
                      uint64_t v100 = 0;
                      unint64_t v82 = v101;
                      *((void *)v78 + 7) = v101;
                      uint64_t v83 = v102;
                      *((void *)v78 + 8) = v102;
                      *((_DWORD *)v78 + 18) = v103;
                      if (v83)
                      {
                        unint64_t v84 = v82[1];
                        unint64_t v85 = *((void *)v78 + 6);
                        if ((v85 & (v85 - 1)) != 0)
                        {
                          if (v84 >= v85) {
                            v84 %= v85;
                          }
                        }
                        else
                        {
                          v84 &= v85 - 1;
                        }
                        v81[v84] = v78 + 56;
                        uint64_t v101 = 0;
                        uint64_t v102 = 0;
                      }
                      *((void *)v78 + 10) = 0;
                      *((void *)v78 + 11) = 0;
                      *((void *)v78 + 12) = 0;
                      *((_OWORD *)v78 + 5) = v104;
                      *((void *)v78 + 12) = v105;
                      long long v104 = 0uLL;
                      uint64_t v105 = 0;
                      float64x2_t v70 = v78 + 104;
                      goto LABEL_82;
                    }
                    goto LABEL_70;
                  }
                }
              }
            }
            unint64_t v40 = *(void *)(a4 + 8);
            if (v40 >= *(void *)(a4 + 16))
            {
LABEL_70:
              float64x2_t v70 = sub_E9367C((void **)a4, (uint64_t)&v96);
            }
            else
            {
              long long v41 = v96;
              long long v42 = v97;
              *(_DWORD *)(v40 + 32) = v98;
              *(_OWORD *)unint64_t v40 = v41;
              *(_OWORD *)(v40 + 16) = v42;
              int v43 = v99;
              int v99 = 0;
              *(void *)(v40 + 40) = v43;
              *(void *)(v40 + 48) = v100;
              uint64_t v100 = 0;
              long double v44 = v101;
              *(void *)(v40 + 56) = v101;
              uint64_t v45 = v102;
              *(void *)(v40 + 64) = v102;
              *(_DWORD *)(v40 + 72) = v103;
              if (v45)
              {
                unint64_t v46 = v44[1];
                unint64_t v47 = *(void *)(v40 + 48);
                if ((v47 & (v47 - 1)) != 0)
                {
                  if (v46 >= v47) {
                    v46 %= v47;
                  }
                }
                else
                {
                  v46 &= v47 - 1;
                }
                v43[v46] = v40 + 56;
                uint64_t v101 = 0;
                uint64_t v102 = 0;
              }
              *(void *)(v40 + 80) = 0;
              *(void *)(v40 + 88) = 0;
              *(void *)(v40 + 96) = 0;
              *(_OWORD *)(v40 + 80) = v104;
              *(void *)(v40 + 96) = v105;
              long long v104 = 0uLL;
              uint64_t v105 = 0;
              float64x2_t v70 = (char *)(v40 + 104);
            }
LABEL_82:
            *(void *)(a4 + 8) = v70;
            ++*(_DWORD *)(a1[36] + 8);
            double v72 = (char *)__p[0];
            if (__p[0])
            {
              long double v73 = (char *)__p[1];
              uint64_t v74 = __p[0];
              if (__p[1] != __p[0])
              {
                do
                {
                  long long v75 = (void *)*((void *)v73 - 8);
                  if (v75)
                  {
                    *((void *)v73 - 7) = v75;
                    operator delete(v75);
                  }
                  v73 -= 80;
                }
                while (v73 != v72);
                uint64_t v74 = __p[0];
              }
              __p[1] = v72;
              operator delete(v74);
            }
            unint64_t v76 = v91;
            if (v91)
            {
              do
              {
                uint64_t v77 = (void *)*v76;
                operator delete(v76);
                unint64_t v76 = v77;
              }
              while (v77);
            }
            goto LABEL_51;
          }
          unint64_t v62 = *(void *)(a4 + 8);
          if (v62 >= *(void *)(a4 + 16))
          {
            uint64_t v71 = sub_E9367C((void **)a4, (uint64_t)&v96);
          }
          else
          {
            long long v63 = v96;
            long long v64 = v97;
            *(_DWORD *)(v62 + 32) = v98;
            *(_OWORD *)unint64_t v62 = v63;
            *(_OWORD *)(v62 + 16) = v64;
            float64x2_t v65 = v99;
            int v99 = 0;
            *(void *)(v62 + 40) = v65;
            *(void *)(v62 + 48) = v100;
            uint64_t v100 = 0;
            float64x2_t v66 = v101;
            *(void *)(v62 + 56) = v101;
            uint64_t v67 = v102;
            *(void *)(v62 + 64) = v102;
            *(_DWORD *)(v62 + 72) = v103;
            if (v67)
            {
              unint64_t v68 = v66[1];
              unint64_t v69 = *(void *)(v62 + 48);
              if ((v69 & (v69 - 1)) != 0)
              {
                if (v68 >= v69) {
                  v68 %= v69;
                }
              }
              else
              {
                v68 &= v69 - 1;
              }
              v65[v68] = v62 + 56;
              uint64_t v101 = 0;
              uint64_t v102 = 0;
            }
            *(void *)(v62 + 80) = 0;
            *(void *)(v62 + 88) = 0;
            *(void *)(v62 + 96) = 0;
            *(_OWORD *)(v62 + 80) = v104;
            *(void *)(v62 + 96) = v105;
            long long v104 = 0uLL;
            uint64_t v105 = 0;
            uint64_t v71 = (char *)(v62 + 104);
          }
          *(void *)(a4 + 8) = v71;
          ++*(_DWORD *)(a1[36] + 8);
          long double v55 = (char *)v104;
          if ((void)v104) {
            goto LABEL_54;
          }
          goto LABEL_61;
        }
      }
    }
  }
  unint64_t v22 = **a3;
  uint64_t v21 = (*a3)[1];
  uint64_t v23 = sub_2E1FA4(a1[1], v22, 1);
  if (v23
    && (uint64_t v24 = &v23[-*(int *)v23], *(unsigned __int16 *)v24 >= 5u)
    && (uint64_t v25 = *((unsigned __int16 *)v24 + 2)) != 0
    && (unint64_t v26 = &v23[v25 + *(unsigned int *)&v23[v25]], *(_DWORD *)v26 > HIDWORD(v22))
    && (unsigned __int16 v27 = (int *)sub_2E2AB8(v26, v22)) != 0)
  {
    uint64_t v28 = (unsigned __int16 *)((char *)v27 - *v27);
    if (*v28 >= 7u && (uint64_t v29 = v28[3]) != 0) {
      uint64_t v30 = *(unsigned int *)((char *)v27 + v29);
    }
    else {
      uint64_t v30 = 0;
    }
  }
  else
  {
    uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
  }
  sub_E8C2C4(a1, a2, 0, 0, v21, v30, (uint64_t)&v86);
  if (*((void *)&v86 + 1) != 0x7FFFFFFFFFFFFFFFLL && *((void *)&v87 + 1) != 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v31 = __p[0];
    if (__p[0] != __p[1])
    {
      while (v31[2] != v31[3])
      {
        v31 += 10;
        if (v31 == __p[1])
        {
          unint64_t v32 = *(void *)(a4 + 8);
          if (v32 >= *(void *)(a4 + 16))
          {
            *(void *)(a4 + 8) = sub_E9367C((void **)a4, (uint64_t)&v86);
            break;
          }
          long long v33 = v86;
          long long v34 = v87;
          *(_DWORD *)(v32 + 32) = v88;
          *(_OWORD *)unint64_t v32 = v33;
          *(_OWORD *)(v32 + 16) = v34;
          long long v35 = v89;
          unint64_t v89 = 0;
          *(void *)(v32 + 40) = v35;
          *(void *)(v32 + 48) = v90;
          uint64_t v90 = 0;
          double v36 = v91;
          *(void *)(v32 + 56) = v91;
          uint64_t v37 = v92;
          *(void *)(v32 + 64) = v92;
          *(_DWORD *)(v32 + 72) = v93;
          if (v37)
          {
            unint64_t v38 = v36[1];
            unint64_t v39 = *(void *)(v32 + 48);
            if ((v39 & (v39 - 1)) != 0)
            {
              if (v38 >= v39) {
                v38 %= v39;
              }
            }
            else
            {
              v38 &= v39 - 1;
            }
            v35[v38] = v32 + 56;
            uint64_t v91 = 0;
            uint64_t v92 = 0;
          }
          *(void *)(v32 + 80) = 0;
          *(void *)(v32 + 88) = 0;
          *(void *)(v32 + 96) = 0;
          *(_OWORD *)(v32 + 80) = *(_OWORD *)__p;
          *(void *)(v32 + 96) = v95;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v95 = 0;
          *(void *)(a4 + 8) = v32 + 104;
          ++*(_DWORD *)(a1[36] + 28);
          uint64_t v48 = (char *)__p[0];
          if (__p[0]) {
            goto LABEL_42;
          }
          goto LABEL_49;
        }
      }
    }
  }
  ++*(_DWORD *)(a1[36] + 28);
  uint64_t v48 = (char *)__p[0];
  if (__p[0])
  {
LABEL_42:
    unint64_t v49 = (char *)__p[1];
    long double v50 = v48;
    if (__p[1] != v48)
    {
      do
      {
        uint64_t v51 = (void *)*((void *)v49 - 8);
        if (v51)
        {
          *((void *)v49 - 7) = v51;
          operator delete(v51);
        }
        v49 -= 80;
      }
      while (v49 != v48);
      long double v50 = (char *)__p[0];
    }
    __p[1] = v48;
    operator delete(v50);
  }
LABEL_49:
  long double v52 = v91;
  if (v91)
  {
    do
    {
      uint64_t v53 = (void *)*v52;
      operator delete(v52);
      long double v52 = v53;
    }
    while (v53);
  }
LABEL_51:
  char v54 = v89;
  unint64_t v89 = 0;
  if (v54) {
    operator delete(v54);
  }
  long double v55 = (char *)v104;
  if ((void)v104)
  {
LABEL_54:
    int v56 = (char *)*((void *)&v104 + 1);
    uint64_t v57 = v55;
    if (*((char **)&v104 + 1) != v55)
    {
      do
      {
        uint64_t v58 = (void *)*((void *)v56 - 8);
        if (v58)
        {
          *((void *)v56 - 7) = v58;
          operator delete(v58);
        }
        v56 -= 80;
      }
      while (v56 != v55);
      uint64_t v57 = (char *)v104;
    }
    *((void *)&v104 + 1) = v55;
    operator delete(v57);
  }
LABEL_61:
  uint64_t v59 = v101;
  if (v101)
  {
    do
    {
      unint64_t v60 = (void *)*v59;
      operator delete(v59);
      uint64_t v59 = v60;
    }
    while (v60);
  }
  uint64_t v61 = v99;
  int v99 = 0;
  if (v61) {
    operator delete(v61);
  }
}

void sub_E8D584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

void sub_E8D5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_E8CCE4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E8D5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_E8CCE4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E8D5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_E8CCE4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E8D5E0(uint64_t *a1@<X0>, void *a2@<X1>, unint64_t *a3@<X2>, int a4@<W4>, uint64_t a5@<X8>)
{
  unint64_t v8 = (void *)a5;
  *(_OWORD *)a5 = xmmword_20E8160;
  *(_OWORD *)(a5 + 16) = xmmword_20E8160;
  *(_DWORD *)(a5 + 32) = 3;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(_DWORD *)(a5 + 72) = 1065353216;
  *(void *)(a5 + 88) = 0;
  *(void *)(a5 + 96) = 0;
  *(void *)(a5 + 80) = 0;
  sub_63841C(a5, 4);
  if (a4) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = a3[1];
  }
  sub_497CC0(v8, v9);
  if (a4) {
    goto LABEL_5;
  }
  unint64_t v11 = *a3;
  __int16 v12 = sub_2E1FA4(a1[1], *a3, 1);
  if (v12
    && (unint64_t v13 = &v12[-*(int *)v12], *(unsigned __int16 *)v13 >= 5u)
    && (uint64_t v14 = *((unsigned __int16 *)v13 + 2)) != 0
    && (long long v15 = &v12[v14 + *(unsigned int *)&v12[v14]], *(_DWORD *)v15 > HIDWORD(v11))
    && (uint64_t v16 = (int *)sub_2E2AB8(v15, v11)) != 0)
  {
    uint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
    if (*v17 < 7u || (uint64_t v18 = v17[3]) == 0)
    {
LABEL_5:
      uint64_t v10 = 0;
      goto LABEL_15;
    }
    uint64_t v10 = *(unsigned int *)((char *)v16 + v18);
  }
  else
  {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_15:
  sub_E9AA04((uint64_t)v8, v10);
  if (a4) {
    uint64_t v19 = a3[1];
  }
  else {
    uint64_t v19 = sub_470ADC(a2) - 1;
  }
  sub_E9A9FC((uint64_t)v8, v19);
  if (a4)
  {
    unint64_t v20 = *a3;
    uint64_t v21 = sub_2E1FA4(a1[1], *a3, 1);
    if (!v21
      || (unint64_t v22 = &v21[-*(int *)v21], *(unsigned __int16 *)v22 < 5u)
      || (uint64_t v23 = *((unsigned __int16 *)v22 + 2)) == 0
      || (uint64_t v24 = &v21[v23 + *(unsigned int *)&v21[v23]], *(_DWORD *)v24 <= HIDWORD(v20))
      || (uint64_t v25 = (int *)sub_2E2AB8(v24, v20)) == 0)
    {
      uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_32;
    }
    unint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
    if (*v26 < 7u || (unsigned int v27 = v26[3]) == 0)
    {
LABEL_31:
      uint64_t v30 = 0;
      goto LABEL_32;
    }
  }
  else
  {
    unint64_t v28 = sub_470ADC(a2);
    uint64_t v25 = *(int **)(sub_470B40(a2, v28 - 1) + 8);
    uint64_t v29 = (unsigned __int16 *)((char *)v25 - *v25);
    if (*v29 < 9u) {
      goto LABEL_31;
    }
    unsigned int v27 = v29[4];
    if (!v27) {
      goto LABEL_31;
    }
  }
  uint64_t v30 = *(unsigned int *)((char *)v25 + v27);
LABEL_32:
  sub_E9AA0C((uint64_t)v8, v30);
  unint64_t v31 = sub_40EFE8((uint64_t)v8);
  uint64_t v32 = sub_52060((uint64_t)v8);
  if (v31 <= v32 + 1) {
    unint64_t v33 = v32 + 1;
  }
  else {
    unint64_t v33 = v31;
  }
  uint64_t v229 = 0;
  uint64_t v230 = 0;
  long double v231 = 0;
  unsigned int v197 = v8;
  unsigned int v207 = a1;
  if (v31 < v32 + 1)
  {
    unint64_t v34 = v33 - v31;
    if ((v33 - v31) >> 61) {
      sub_2E00();
    }
    long long v35 = (char *)operator new(8 * v34);
    uint64_t v229 = v35;
    uint64_t v230 = v35;
    long double v231 = &v35[8 * v34];
    a1 = v207;
    do
    {
      *(void *)&long long v210 = *(void *)sub_470B40(a2, v31);
      long long v35 = sub_E93BD8((unint64_t *)&v229, v35, &v210) + 8;
      ++v31;
    }
    while (v33 != v31);
  }
  if (a4)
  {
    double v36 = (unsigned int *)v229;
    uint64_t v37 = (unsigned int *)v230;
    if (v229 != v230)
    {
      unint64_t v38 = v230 - 8;
      if (v230 - 8 > v229)
      {
        unint64_t v39 = v229 + 8;
        do
        {
          uint64_t v40 = *((void *)v39 - 1);
          *((void *)v39 - 1) = *(void *)v38;
          *(void *)unint64_t v38 = v40;
          v38 -= 8;
          BOOL v41 = v39 >= v38;
          v39 += 8;
        }
        while (!v41);
        double v36 = (unsigned int *)v229;
        uint64_t v37 = (unsigned int *)v230;
      }
    }
    while (v36 != v37)
    {
      *(void *)double v36 = *v36 | ((unint64_t)((v36[1] & 0x7FFFFFFF | ((v36[1] >> 30 == 0) << 31)) ^ 0x20000000) << 32);
      v36 += 2;
    }
  }
  uint64_t v42 = 0;
  __int16 v228 = 256;
  float64x2_t v204 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v205 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v203 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  float64x2_t v202 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  unint64_t v199 = a3;
  do
  {
    int v43 = *((unsigned __int8 *)&v228 + v42);
    unint64_t v44 = sub_2DFFF4(a1[1], *a3);
    int v206 = v43;
    int v45 = v43 != 0;
    int v198 = v45 ^ a4;
    if (v45 != a4) {
      unint64_t v46 = v44;
    }
    else {
      unint64_t v46 = *a3;
    }
    sub_E91DD4(a1[1], v46, v45, &v226);
    unint64_t v47 = v226;
    unint64_t v200 = v227;
    if (v226 != v227)
    {
      uint64_t v191 = v42;
      while (1)
      {
        unint64_t v48 = *v47;
        uint64_t v49 = a1[1];
        unint64_t v208 = HIDWORD(*v47);
        unsigned int v201 = *v47;
        LODWORD(v220) = v201;
        LODWORD(v222) = 1;
        *(void *)&long long v210 = &v222;
        *((void *)&v210 + 1) = &v220;
        unint64_t v50 = *(void *)(v49 + 3856) + 1;
        *(void *)(v49 + 3856) = v50;
        if (!*(void *)v49)
        {
LABEL_123:
          sub_2E2134((int **)&v210);
LABEL_124:
          unint64_t v97 = 0;
          float64x2_t v65 = 0;
          uint64_t v223 = 0;
          uint64_t v224 = 0;
          uint64_t v225 = 0;
          goto LABEL_125;
        }
        uint64_t v51 = v49 + 16;
        if (*(_DWORD *)(v49 + 3184) == v48)
        {
          unsigned int v52 = 132;
          goto LABEL_66;
        }
        if (*(_DWORD *)(v49 + 3208) == v48)
        {
          unsigned int v52 = 133;
          goto LABEL_66;
        }
        if (*(_DWORD *)(v49 + 3232) == v48) {
          break;
        }
        if (*(_DWORD *)(v49 + 3256) == v48)
        {
          unsigned int v52 = 135;
LABEL_66:
          ++*(void *)(v49 + 3864);
          uint64_t v53 = v51 + 24 * v52;
          *(void *)(v53 + 8) = v50;
          char v54 = *(unsigned int **)(v53 + 16);
          if (!v54) {
            goto LABEL_123;
          }
          goto LABEL_67;
        }
        unint64_t v89 = *(void *)(v49 + 3240);
        unint64_t v90 = *(void *)(v49 + 3216);
        unint64_t v91 = *(void *)(v49 + 3192);
        unint64_t v92 = *(void *)(v49 + 3264);
        char v54 = (unsigned int *)sub_2AB884(*(void *)v49, 33, v201, 1);
        if (v91 >= v50) {
          unint64_t v93 = v50;
        }
        else {
          unint64_t v93 = v91;
        }
        int v94 = 132;
        if (v91 >= v50) {
          int v94 = 0;
        }
        if (v90 < v93)
        {
          unint64_t v93 = v90;
          int v94 = 133;
        }
        if (v89 < v93)
        {
          int v94 = 134;
          unint64_t v93 = v89;
        }
        BOOL v41 = v92 >= v93;
        unsigned int v95 = 135;
        if (v41) {
          unsigned int v95 = v94;
        }
        uint64_t v96 = v51 + 24 * v95;
        *(_DWORD *)uint64_t v96 = v220;
        *(void *)(v96 + 8) = *(void *)(v49 + 3856);
        *(void *)(v96 + 16) = v54;
        if (!v54) {
          goto LABEL_123;
        }
LABEL_67:
        long double v55 = (int *)((char *)v54 + *v54);
        int v56 = (unsigned __int16 *)((char *)v55 - *v55);
        if (*v56 < 9u) {
          goto LABEL_124;
        }
        uint64_t v57 = v56[4];
        if (!v57) {
          goto LABEL_124;
        }
        uint64_t v58 = (int *)((char *)v55 + v57 + *(unsigned int *)((char *)v55 + v57));
        if (*v58 <= v208) {
          goto LABEL_124;
        }
        uint64_t v59 = (int *)sub_2E1E3C(v58, v48);
        if (!v59) {
          goto LABEL_124;
        }
        unint64_t v60 = (unsigned __int16 *)((char *)v59 - *v59);
        unsigned int v61 = *v60;
        if (v61 < 9) {
          goto LABEL_124;
        }
        uint64_t v62 = v60[4];
        BOOL v63 = v61 < 0xF || v62 == 0;
        if (v63 || !v60[7]) {
          goto LABEL_124;
        }
        uint64_t v223 = 0;
        uint64_t v224 = 0;
        uint64_t v225 = 0;
        uint64_t v64 = *(unsigned int *)((char *)v59 + v62 + *(unsigned int *)((char *)v59 + v62));
        if (v64)
        {
          float64x2_t v65 = 0;
          uint64_t v66 = 0;
          unint64_t v192 = v59;
          uint64_t v193 = *(unsigned int *)((char *)v59 + v62 + *(unsigned int *)((char *)v59 + v62));
          while (1)
          {
            while (1)
            {
              uint64_t v67 = (char *)v59 - *v59;
              int v68 = *((unsigned __int8 *)v59
                    + *((unsigned __int16 *)v67 + 7)
                    + v66
                    + *(unsigned int *)((char *)v59 + *((unsigned __int16 *)v67 + 7))
                    + 4);
              if (v68 == 1)
              {
                int v69 = 0;
                unsigned int v70 = 0x80000000;
              }
              else
              {
                int v69 = v68 == 3 ? 0x40000000 : 0;
                unsigned int v70 = 0;
              }
              uint64_t v71 = *(void *)((char *)&v59[2 * v66 + 1]
                              + *((unsigned __int16 *)v67 + 4)
                              + *(unsigned int *)((char *)v59 + *((unsigned __int16 *)v67 + 4)));
              uint64_t v72 = v71 & 0xFF000000000000;
              if (v65 >= (unsigned int *)v225) {
                break;
              }
              *float64x2_t v65 = v71;
              v65[1] = WORD2(v71) | ((v72 != 0) << 29) | v69 | v70;
              v65 += 2;
              uint64_t v224 = v65;
              if (++v66 == v64) {
                goto LABEL_268;
              }
            }
            long double v73 = (unsigned int *)v223;
            double v194 = (char *)((char *)v65 - v223);
            uint64_t v74 = ((char *)v65 - v223) >> 3;
            unint64_t v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 61) {
              sub_2E00();
            }
            uint64_t v76 = v225 - v223;
            if ((v225 - v223) >> 2 > v75) {
              unint64_t v75 = v76 >> 2;
            }
            if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
            }
            if (v75 >> 61) {
              sub_188D718();
            }
            unint64_t v195 = v75;
            uint64_t v77 = operator new(8 * v75);
            uint64_t v78 = &v77[8 * v74];
            *uint64_t v78 = v71;
            v78[1] = WORD2(v71) | ((v72 != 0) << 29) | v69 | v70;
            if (v65 == v73)
            {
              float64x2_t v65 = v78 + 2;
              uint64_t v223 = &v77[8 * v74];
              uint64_t v225 = &v77[8 * v195];
              if (!v73) {
                goto LABEL_99;
              }
LABEL_98:
              operator delete(v73);
              goto LABEL_99;
            }
            unint64_t v79 = (char *)(v65 - 2) - (char *)v73;
            if (v79 < 0x168
              || &v194[(void)v77 - 8 - (v79 & 0xFFFFFFFFFFFFFFF8)] > &v194[(void)v77 - 8]
              || (unsigned int *)((char *)v65 - (v79 & 0xFFFFFFFFFFFFFFF8) - 8) > v65 - 2
              || (unint64_t)((char *)v65 - v194 - (void)v77) < 0x20)
            {
              break;
            }
            uint64_t v83 = (v79 >> 3) + 1;
            uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
            long long v80 = &v65[v84 / 0xFFFFFFFFFFFFFFFCLL];
            uint64_t v81 = (char *)&v78[v84 / 0xFFFFFFFFFFFFFFFCLL];
            unint64_t v85 = &v77[8 * v74 - 16];
            long long v86 = (long long *)(v65 - 4);
            uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v88 = *v86;
              *(v85 - 1) = *(v86 - 1);
              *unint64_t v85 = v88;
              v85 -= 2;
              v86 -= 2;
              v87 -= 4;
            }
            while (v87);
            if (v83 != (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_96;
            }
LABEL_97:
            float64x2_t v65 = v78 + 2;
            uint64_t v223 = v81;
            uint64_t v225 = &v77[8 * v195];
            if (v73) {
              goto LABEL_98;
            }
LABEL_99:
            unint64_t v8 = v197;
            uint64_t v59 = v192;
            uint64_t v64 = v193;
            uint64_t v224 = v65;
            if (++v66 == v193)
            {
LABEL_268:
              unint64_t v97 = (unint64_t)v223;
              goto LABEL_125;
            }
          }
          long long v80 = v65;
          uint64_t v81 = &v77[8 * v74];
          do
          {
LABEL_96:
            uint64_t v82 = *((void *)v80 - 1);
            v80 -= 2;
            *((void *)v81 - 1) = v82;
            v81 -= 8;
          }
          while (v80 != v73);
          goto LABEL_97;
        }
        unint64_t v97 = 0;
        float64x2_t v65 = 0;
LABEL_125:
        a1 = v207;
        if (v206)
        {
          if ((unsigned int *)v97 != v65)
          {
            int v98 = v65 - 2;
            if ((unint64_t)(v65 - 2) > v97)
            {
              unint64_t v99 = v97 + 8;
              do
              {
                uint64_t v100 = *(void *)(v99 - 8);
                *(void *)(v99 - 8) = *(void *)v98;
                *(void *)int v98 = v100;
                v98 -= 2;
                BOOL v41 = v99 >= (unint64_t)v98;
                v99 += 8;
              }
              while (!v41);
              unint64_t v97 = (unint64_t)v223;
              float64x2_t v65 = v224;
            }
          }
          uint64_t v101 = (unsigned int *)v97;
          if ((unsigned int *)v97 == v65)
          {
            long long v104 = v229;
            int v103 = v230;
LABEL_149:
            if (v104 == v103) {
              goto LABEL_153;
            }
LABEL_150:
            if (!v65) {
              goto LABEL_56;
            }
            goto LABEL_55;
          }
          do
          {
            *(void *)uint64_t v101 = *v101 | ((unint64_t)((v101[1] & 0x7FFFFFFF | ((v101[1] >> 30 == 0) << 31)) ^ 0x20000000) << 32);
            v101 += 2;
          }
          while (v101 != v65);
        }
        uint64_t v102 = v65;
        float64x2_t v65 = (unsigned int *)v97;
        long long v104 = v229;
        int v103 = v230;
        if (v229 == v230 || v65 == v102) {
          goto LABEL_149;
        }
        unint64_t v106 = 0;
        do
        {
          if (*(_DWORD *)&v229[v106] != v65[v106 / 4] || *(_DWORD *)&v229[v106 + 4] != v65[v106 / 4 + 1])
          {
            if (&v229[v106] == v230) {
              goto LABEL_153;
            }
            goto LABEL_150;
          }
          v106 += 8;
        }
        while (&v229[v106] != v230 && &v65[v106 / 4] != v102);
        if (&v229[v106] != v230) {
          goto LABEL_150;
        }
LABEL_153:
        uint64_t v108 = v207[1];
        LODWORD(v220) = v48;
        LODWORD(v222) = 1;
        *(void *)&long long v210 = &v222;
        *((void *)&v210 + 1) = &v220;
        unint64_t v109 = *(void *)(v108 + 3856) + 1;
        *(void *)(v108 + 3856) = v109;
        if (!*(void *)v108) {
          goto LABEL_182;
        }
        uint64_t v110 = v108 + 16;
        if (*(_DWORD *)(v108 + 3184) == v48)
        {
          unsigned int v111 = 132;
          goto LABEL_162;
        }
        if (*(_DWORD *)(v108 + 3208) == v48)
        {
          unsigned int v111 = 133;
          goto LABEL_162;
        }
        if (*(_DWORD *)(v108 + 3232) == v48)
        {
          unsigned int v111 = 134;
          goto LABEL_162;
        }
        if (*(_DWORD *)(v108 + 3256) != v48)
        {
          unint64_t v123 = *(void *)(v108 + 3240);
          unint64_t v124 = *(void *)(v108 + 3216);
          unint64_t v125 = *(void *)(v108 + 3192);
          unint64_t v126 = *(void *)(v108 + 3264);
          unint64_t v113 = (unsigned int *)sub_2AB884(*(void *)v108, 33, v201, 1);
          if (v125 >= v109) {
            unint64_t v127 = v109;
          }
          else {
            unint64_t v127 = v125;
          }
          int v128 = 132;
          if (v125 >= v109) {
            int v128 = 0;
          }
          if (v124 < v127)
          {
            unint64_t v127 = v124;
            int v128 = 133;
          }
          if (v123 < v127)
          {
            int v128 = 134;
            unint64_t v127 = v123;
          }
          BOOL v41 = v126 >= v127;
          unsigned int v129 = 135;
          if (v41) {
            unsigned int v129 = v128;
          }
          uint64_t v130 = v110 + 24 * v129;
          *(_DWORD *)uint64_t v130 = v220;
          *(void *)(v130 + 8) = *(void *)(v108 + 3856);
          *(void *)(v130 + 16) = v113;
          if (v113) {
            goto LABEL_163;
          }
LABEL_182:
          sub_2E2134((int **)&v210);
          goto LABEL_183;
        }
        unsigned int v111 = 135;
LABEL_162:
        ++*(void *)(v108 + 3864);
        uint64_t v112 = v110 + 24 * v111;
        *(void *)(v112 + 8) = v109;
        unint64_t v113 = *(unsigned int **)(v112 + 16);
        if (!v113) {
          goto LABEL_182;
        }
LABEL_163:
        long long v114 = (int *)((char *)v113 + *v113);
        long long v115 = (unsigned __int16 *)((char *)v114 - *v114);
        if (*v115 < 9u) {
          goto LABEL_183;
        }
        uint64_t v116 = v115[4];
        long long v117 = v207;
        if (v116
          && (uint64_t v118 = (int *)((char *)v114 + v116 + *(unsigned int *)((char *)v114 + v116)), *v118 > v208))
        {
          unint64_t v119 = (int *)sub_2E1E3C(v118, v48);
          if (v119)
          {
            unint64_t v120 = (unsigned int *)((char *)v119 + *(unsigned __int16 *)((char *)v119 - *v119 + 4));
            uint64_t v121 = *v120;
            unint64_t v122 = (unint64_t)v120[1] << 32;
            goto LABEL_184;
          }
LABEL_183:
          uint64_t v121 = 0;
          unint64_t v122 = 0xFFFFFFFF00000000;
LABEL_184:
          long long v117 = v207;
        }
        else
        {
          uint64_t v121 = 0;
          unint64_t v122 = 0xFFFFFFFF00000000;
        }
        uint64_t v131 = v117[1];
        LODWORD(v220) = v48;
        LODWORD(v222) = 1;
        *(void *)&long long v210 = &v222;
        *((void *)&v210 + 1) = &v220;
        unint64_t v132 = *(void *)(v131 + 3856) + 1;
        *(void *)(v131 + 3856) = v132;
        if (!*(void *)v131) {
          goto LABEL_217;
        }
        uint64_t v133 = v131 + 16;
        if (*(_DWORD *)(v131 + 3184) == v48)
        {
          unsigned int v134 = 132;
          goto LABEL_194;
        }
        if (*(_DWORD *)(v131 + 3208) == v48)
        {
          unsigned int v134 = 133;
          goto LABEL_194;
        }
        if (*(_DWORD *)(v131 + 3232) == v48)
        {
          unsigned int v134 = 134;
          goto LABEL_194;
        }
        if (*(_DWORD *)(v131 + 3256) != v48)
        {
          unint64_t v148 = *(void *)(v131 + 3240);
          unint64_t v149 = *(void *)(v131 + 3216);
          unint64_t v150 = *(void *)(v131 + 3192);
          unint64_t v196 = *(void *)(v131 + 3264);
          unsigned int v136 = (unsigned int *)sub_2AB884(*(void *)v131, 33, v201, 1);
          if (v150 >= v132) {
            unint64_t v151 = v132;
          }
          else {
            unint64_t v151 = v150;
          }
          int v152 = 132;
          if (v150 >= v132) {
            int v152 = 0;
          }
          if (v149 < v151)
          {
            unint64_t v151 = v149;
            int v152 = 133;
          }
          if (v148 < v151)
          {
            int v152 = 134;
            unint64_t v151 = v148;
          }
          unint64_t v8 = v197;
          BOOL v41 = v196 >= v151;
          unsigned int v153 = 135;
          if (v41) {
            unsigned int v153 = v152;
          }
          uint64_t v154 = v133 + 24 * v153;
          *(_DWORD *)uint64_t v154 = v220;
          *(void *)(v154 + 8) = *(void *)(v131 + 3856);
          *(void *)(v154 + 16) = v136;
          if (v136) {
            goto LABEL_195;
          }
LABEL_217:
          sub_2E2134((int **)&v210);
          goto LABEL_218;
        }
        unsigned int v134 = 135;
LABEL_194:
        ++*(void *)(v131 + 3864);
        uint64_t v135 = v133 + 24 * v134;
        *(void *)(v135 + 8) = v132;
        unsigned int v136 = *(unsigned int **)(v135 + 16);
        if (!v136) {
          goto LABEL_217;
        }
LABEL_195:
        long double v137 = (int *)((char *)v136 + *v136);
        long double v138 = (unsigned __int16 *)((char *)v137 - *v137);
        if (*v138 < 9u)
        {
          uint64_t v140 = v207;
          *(void *)&long long v222 = v121 | v122;
          *((void *)&v222 + 1) = 0xFFFFFFFF00000000;
          if (v206) {
            goto LABEL_220;
          }
LABEL_201:
          uint64_t v146 = 0;
          uint64_t v147 = (v230 - v229) >> 3;
          goto LABEL_221;
        }
        uint64_t v139 = v138[4];
        uint64_t v140 = v207;
        if (!v139
          || (unint64_t v141 = (int *)((char *)v137 + v139 + *(unsigned int *)((char *)v137 + v139)), *v141 <= v208))
        {
          *(void *)&long long v222 = v121 | v122;
          *((void *)&v222 + 1) = 0xFFFFFFFF00000000;
          if (v206) {
            goto LABEL_220;
          }
          goto LABEL_201;
        }
        unint64_t v142 = (int *)sub_2E1E3C(v141, v48);
        if (v142)
        {
          unsigned int v143 = (unsigned int *)((char *)v142 + *(unsigned __int16 *)((char *)v142 - *v142 + 6));
          uint64_t v144 = *v143;
          unint64_t v145 = (unint64_t)v143[1] << 32;
          goto LABEL_219;
        }
LABEL_218:
        uint64_t v144 = 0;
        unint64_t v145 = 0xFFFFFFFF00000000;
LABEL_219:
        unint64_t v8 = v197;
        uint64_t v140 = v207;
        *(void *)&long long v222 = v121 | v122;
        *((void *)&v222 + 1) = v144 | v145;
        if (!v206) {
          goto LABEL_201;
        }
LABEL_220:
        uint64_t v147 = ((char *)v224 - v223) >> 3;
        uint64_t v146 = v147 - ((v230 - v229) >> 3);
LABEL_221:
        sub_2E0940(v140[1], *v140, (uint64_t)&v222, v146, v147, &v220);
        uint64_t v155 = (unsigned int *)v220;
        uint64_t v156 = v221;
        int64_t v157 = (char *)v221 - (unsigned char *)v220;
        if (v221 == v220)
        {
          uint64_t v159 = 0;
          unsigned int v158 = 0;
        }
        else
        {
          if (0xAAAAAAAAAAAAAAABLL * (v157 >> 2) >= 0x1555555555555556) {
            sub_2E00();
          }
          unsigned int v158 = (char *)operator new((char *)v221 - (unsigned char *)v220);
          uint64_t v159 = &v158[4 * (v157 >> 2)];
          memcpy(v158, v155, v157);
          double v160 = v155 + 3;
          if (v160 != v156)
          {
            uint64_t v161 = 0;
            while (1)
            {
              unsigned int v164 = *(v160 - 3);
              unsigned int v163 = *(v160 - 2);
              BOOL v165 = v164 == -1 && v163 == -1;
              if (v165 || ((unsigned int v166 = *v160, *v160 == -1) ? (v167 = v160[1] == -1) : (v167 = 0), v167))
              {
                uint64_t v162 = 0x7FFFFFFFFFFFFFFFLL;
                goto LABEL_226;
              }
              long double v168 = exp(3.14159265 - (double)v163 * 6.28318531 / 4294967300.0);
              long double v169 = atan((v168 - 1.0 / v168) * 0.5) * 57.2957795 * 0.0174532925;
              v170.i64[0] = v164;
              v170.i64[1] = v166;
              float64x2_t v171 = vcvtq_f64_u64(v170);
              float64x2_t v209 = v171;
              LODWORD(v171.f64[0]) = v160[1];
              long double v172 = exp(3.14159265 - (double)*(unint64_t *)&v171.f64[0] * 6.28318531 / 4294967300.0);
              long double v173 = atan((v172 - 1.0 / v172) * 0.5) * 57.2957795 * 0.0174532925;
              int64x2_t v174 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(v209, v205), v204), v203), v202);
              v209.f64[0] = vsubq_f64((float64x2_t)v174, (float64x2_t)vdupq_laneq_s64(v174, 1)).f64[0];
              long double v175 = sin((v169 - v173) * 0.5);
              long double v176 = v175 * v175;
              double v177 = cos(v169);
              long double v178 = v177 * cos(v173);
              long double v179 = sin(0.5 * v209.f64[0]);
              long double v180 = atan2(sqrt(v179 * v179 * v178 + v176), sqrt(1.0 - (v179 * v179 * v178 + v176)));
              double v181 = (v180 + v180) * 6372797.56 * 100.0;
              if (v181 >= 0.0)
              {
                double v182 = v181;
                if (v181 < 4.50359963e15)
                {
                  uint64_t v183 = (uint64_t)(v181 + v181) + 1;
LABEL_242:
                  double v182 = (double)(v183 >> 1);
                }
              }
              else
              {
                double v182 = v181;
                if (v181 > -4.50359963e15)
                {
                  uint64_t v183 = (uint64_t)(v181 + v181);
                  if (v183 >= 1) {
                    --v183;
                  }
                  goto LABEL_242;
                }
              }
              if (v182 < 9.22337204e18)
              {
                if (v181 >= 0.0)
                {
                  if (v181 < 4.50359963e15)
                  {
                    uint64_t v184 = (uint64_t)(v181 + v181) + 1;
                    goto LABEL_252;
                  }
                }
                else if (v181 > -4.50359963e15)
                {
                  uint64_t v184 = (uint64_t)(v181 + v181);
                  if (v184 >= 1) {
                    --v184;
                  }
LABEL_252:
                  double v181 = (double)(v184 >> 1);
                }
                uint64_t v162 = (uint64_t)v181;
                goto LABEL_226;
              }
              uint64_t v162 = 0x7FFFFFFFFFFFFFFELL;
LABEL_226:
              v161 += v162;
              v160 += 3;
              if (v160 == v156) {
                goto LABEL_256;
              }
            }
          }
        }
        uint64_t v161 = 0;
LABEL_256:
        long long v210 = v222;
        float64x2_t __p = v158;
        long double v212 = v159;
        long double v213 = v159;
        __int16 v214 = -1;
        uint64_t v215 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v216 = v161;
        uint64_t v217 = 0x7FF8000000000000;
        __int16 v218 = 257;
        char v219 = v198;
        if (v198)
        {
          if (v158 != v159)
          {
            long double v185 = v159 - 12;
            if (v159 - 12 > v158)
            {
              uint64_t v186 = v158 + 12;
              do
              {
                uint64_t v187 = *(void *)(v186 - 12);
                int v233 = *((_DWORD *)v186 - 1);
                uint64_t v232 = v187;
                uint64_t v188 = *(void *)v185;
                *((_DWORD *)v186 - 1) = *((_DWORD *)v185 + 2);
                *(void *)(v186 - 12) = v188;
                uint64_t v189 = v232;
                *((_DWORD *)v185 + 2) = v233;
                *(void *)long double v185 = v189;
                v185 -= 12;
                BOOL v41 = v186 >= v185;
                v186 += 12;
              }
              while (!v41);
            }
          }
        }
        sub_E9ADB4((uint64_t)v8, (uint64_t)&v210);
        a1 = v207;
        if (__p)
        {
          long double v212 = __p;
          operator delete(__p);
        }
        if (v220)
        {
          uint64_t v221 = (unsigned int *)v220;
          operator delete(v220);
        }
        float64x2_t v65 = (unsigned int *)v223;
        if (!v223) {
          goto LABEL_56;
        }
LABEL_55:
        uint64_t v224 = v65;
        operator delete(v65);
LABEL_56:
        ++v47;
        a3 = v199;
        if (v47 == v200)
        {
          unint64_t v47 = v226;
          uint64_t v42 = v191;
          goto LABEL_271;
        }
      }
      unsigned int v52 = 134;
      goto LABEL_66;
    }
LABEL_271:
    if (v47)
    {
      uint64_t v227 = v47;
      operator delete(v47);
    }
    ++v42;
  }
  while (v42 != 2);
  if (v229)
  {
    uint64_t v230 = v229;
    operator delete(v229);
  }
}

void sub_E8E724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  uint64_t v17 = *(void **)(v15 - 192);
  if (!v17)
  {
    sub_E8CCE4(a15);
    _Unwind_Resume(a1);
  }
  *(void *)(v15 - 184) = v17;
  operator delete(v17);
  sub_E8CCE4(a15);
  _Unwind_Resume(a1);
}

void sub_E8E7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50)
{
  if (v50)
  {
    *(void *)(v51 - 240) = v50;
    operator delete(v50);
    uint64_t v53 = a15;
    char v54 = *(void **)(v51 - 224);
    if (v54) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v53 = a15;
    char v54 = *(void **)(v51 - 224);
    if (v54)
    {
LABEL_5:
      *(void *)(v51 - 216) = v54;
      operator delete(v54);
      long double v55 = *(void **)(v51 - 192);
      if (v55) {
        goto LABEL_6;
      }
      goto LABEL_8;
    }
  }
  long double v55 = *(void **)(v51 - 192);
  if (v55)
  {
LABEL_6:
    *(void *)(v51 - 184) = v55;
    operator delete(v55);
    sub_E8CCE4(v53);
    _Unwind_Resume(a1);
  }
LABEL_8:
  sub_E8CCE4(v53);
  _Unwind_Resume(a1);
}

void sub_E8E84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a49) {
    JUMPOUT(0xE8E808);
  }
  JUMPOUT(0xE8E8ACLL);
}

void sub_E8E85C()
{
  if (*(void *)(v0 - 248)) {
    JUMPOUT(0xE8E818);
  }
  JUMPOUT(0xE8E8B4);
}

void sub_E8E870()
{
  if (*(void *)(v0 - 248)) {
    JUMPOUT(0xE8E818);
  }
  JUMPOUT(0xE8E8B4);
}

void sub_E8E880()
{
  if (*(void *)(v0 - 248)) {
    JUMPOUT(0xE8E818);
  }
  JUMPOUT(0xE8E8B4);
}

void sub_E8E890(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (__p)
  {
    operator delete(__p);
    if (!a36)
    {
LABEL_3:
      if (!a49)
      {
        if (!*(void *)(v49 - 248))
        {
          if (!*(void *)(v49 - 224))
          {
            if (!*(void *)(v49 - 192)) {
              JUMPOUT(0xE8E8C4);
            }
            JUMPOUT(0xE8E834);
          }
          JUMPOUT(0xE8E824);
        }
        JUMPOUT(0xE8E818);
      }
      JUMPOUT(0xE8E808);
    }
  }
  else if (!a36)
  {
    goto LABEL_3;
  }
  JUMPOUT(0xE8E7F8);
}

void sub_E8E8E8()
{
  if (*(void *)(v0 - 224)) {
    JUMPOUT(0xE8E824);
  }
  JUMPOUT(0xE8E8BCLL);
}

void sub_E8E8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)sub_68EA4(a2);
  if (*v6 == v6[1]) {
    return;
  }
  uint64_t v7 = *(void *)sub_68EA4(a3);
  unint64_t v8 = (uint64_t *)(v7 + 16);
  uint64_t v9 = (uint64_t *)sub_68EA4(a2);
  uint64_t v14 = *v9;
  uint64_t v15 = v9[1];
  if (*v9 == v15)
  {
    double v17 = 1.0;
    goto LABEL_10;
  }
  uint64_t v16 = (uint64_t *)(a1 + 280);
  double v17 = 1.0;
  do
  {
    double v10 = sub_E88F54(*(_DWORD **)(v14 + 16), v8, v16, 0, v10, v11, v12, v13);
    if (v10 < v17) {
      double v17 = v10;
    }
    v14 += 80;
  }
  while (v14 != v15);
  if (v17 >= 0.0)
  {
LABEL_10:
    double v18 = 0.0;
    sub_31854(v8, 0, &v50, 0.0, v17);
    uint64_t v19 = (void *)*v8;
    if (*v8)
    {
      *(void *)(v7 + 24) = v19;
      operator delete(v19);
    }
    unint64_t v20 = v50;
    *(void *)(v7 + 16) = v50;
    uint64_t v21 = (unsigned int *)v51;
    *(_OWORD *)(v7 + 24) = v51;
    unint64_t v22 = v21;
    if (v20 != v21)
    {
      uint64_t v23 = v20 + 3;
      if (v20 + 3 != v21)
      {
        double v24 = 0.0;
        float64x2_t v47 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
        float64x2_t v48 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
        float64x2_t v46 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
        float64x2_t v45 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
        HIDWORD(v25) = 1096306543;
        do
        {
          LODWORD(v25) = *(v23 - 2);
          long double v26 = exp(3.14159265 - (double)*(unint64_t *)&v25 * 6.28318531 / 4294967300.0);
          *(double *)&unint64_t v27 = atan((v26 - 1.0 / v26) * 0.5) * 57.2957795;
          long double v28 = *(double *)&v27 * 0.0174532925;
          unsigned int v29 = *(v23 - 3);
          LODWORD(v27) = v23[1];
          long double v30 = exp(3.14159265 - (double)v27 * 6.28318531 / 4294967300.0);
          long double v31 = atan((v30 - 1.0 / v30) * 0.5) * 57.2957795 * 0.0174532925;
          v32.i64[0] = v29;
          v32.i64[1] = *v23;
          int64x2_t v33 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v32), v48), v46), v47), v45);
          double v49 = vsubq_f64((float64x2_t)v33, (float64x2_t)vdupq_laneq_s64(v33, 1)).f64[0];
          long double v34 = sin((v28 - v31) * 0.5);
          long double v35 = v34 * v34;
          double v36 = cos(v28);
          long double v37 = v36 * cos(v31);
          long double v38 = sin(0.5 * v49);
          long double v39 = atan2(sqrt(v35 + v37 * (v38 * v38)), sqrt(1.0 - (v35 + v37 * (v38 * v38))));
          double v25 = (v39 + v39) * 6372797.56;
          double v24 = v24 + v25;
          v23 += 3;
        }
        while (v23 != v22);
        double v18 = v24 * 100.0;
        if (v24 * 100.0 < 0.0)
        {
          if (v18 <= -4.50359963e15)
          {
            char v42 = 1;
            double v41 = v24 * 100.0;
          }
          else
          {
            uint64_t v40 = (uint64_t)(v18 + v18);
            if (v40 >= 1) {
              --v40;
            }
            double v41 = (double)(v40 >> 1);
            char v42 = 1;
          }
LABEL_23:
          if (v41 >= 9.22337204e18)
          {
            uint64_t v44 = 0x7FFFFFFFFFFFFFFELL;
LABEL_34:
            *(void *)(*(void *)sub_68EA4(a3) + 56) = v44;
            return;
          }
          if (v42)
          {
            if (v18 > -4.50359963e15)
            {
              uint64_t v43 = (uint64_t)(v18 + v18);
              if (v43 >= 1) {
                --v43;
              }
              goto LABEL_32;
            }
          }
          else if (v18 < 4.50359963e15)
          {
            uint64_t v43 = (uint64_t)(v18 + v18) + 1;
LABEL_32:
            double v18 = (double)(v43 >> 1);
          }
          uint64_t v44 = (uint64_t)v18;
          goto LABEL_34;
        }
        if (v18 >= 4.50359963e15)
        {
          char v42 = 0;
          double v41 = v24 * 100.0;
          goto LABEL_23;
        }
      }
    }
    char v42 = 0;
    double v41 = (double)(((uint64_t)(v18 + v18) + 1) >> 1);
    goto LABEL_23;
  }
}

void sub_E8ECD4(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_470ADC(a2) - 1;
  sub_E8D5E0(a1, a2, (unint64_t *)(*(void *)(a3 + 8) - 16), 0, (uint64_t)&v106);
  if (*((void *)&v106 + 1) != 0x7FFFFFFFFFFFFFFFLL && *((void *)&v107 + 1) != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v10 = v114;
    if ((void)v114 != *((void *)&v114 + 1))
    {
      while (*(void *)(v10 + 16) != *(void *)(v10 + 24))
      {
        v10 += 80;
        if (v10 == *((void *)&v114 + 1))
        {
          if (sub_52060((uint64_t)&v106) != v8)
          {
            unint64_t v43 = sub_52060((uint64_t)&v106);
            uint64_t v44 = sub_3C80F8((uint64_t)&v106);
            float64x2_t v45 = *(int **)(sub_470B40(a2, v8) + 8);
            float64x2_t v46 = (unsigned __int16 *)((char *)v45 - *v45);
            if (*v46 >= 9u && (uint64_t v47 = v46[4]) != 0) {
              uint64_t v48 = *(unsigned int *)((char *)v45 + v47);
            }
            else {
              uint64_t v48 = 0;
            }
            sub_E8C2C4(a1, a2, v43, v44, v8, v48, (uint64_t)&v96);
            if (*((void *)&v96 + 1) != 0x7FFFFFFFFFFFFFFFLL && *((void *)&v97 + 1) != 0x7FFFFFFFFFFFFFFFLL)
            {
              BOOL v63 = __p[0];
              if (__p[0] != __p[1])
              {
                while (v63[2] != v63[3])
                {
                  v63 += 10;
                  if (v63 == __p[1])
                  {
                    sub_E8F58C((uint64_t)a1, (uint64_t)&v106, (uint64_t)&v96);
                    unint64_t v64 = *(void *)(a4 + 8);
                    if (v64 >= *(void *)(a4 + 16))
                    {
                      long long v88 = sub_E9367C((void **)a4, (uint64_t)&v106);
                    }
                    else
                    {
                      long long v65 = v106;
                      long long v66 = v107;
                      *(_DWORD *)(v64 + 32) = v108;
                      *(_OWORD *)unint64_t v64 = v65;
                      *(_OWORD *)(v64 + 16) = v66;
                      uint64_t v67 = v109;
                      unint64_t v109 = 0;
                      *(void *)(v64 + 40) = v67;
                      *(void *)(v64 + 48) = v110;
                      uint64_t v110 = 0;
                      int v68 = v111;
                      *(void *)(v64 + 56) = v111;
                      uint64_t v69 = v112;
                      *(void *)(v64 + 64) = v112;
                      *(_DWORD *)(v64 + 72) = v113;
                      if (v69)
                      {
                        unint64_t v70 = v68[1];
                        unint64_t v71 = *(void *)(v64 + 48);
                        if ((v71 & (v71 - 1)) != 0)
                        {
                          if (v70 >= v71) {
                            v70 %= v71;
                          }
                        }
                        else
                        {
                          v70 &= v71 - 1;
                        }
                        v67[v70] = v64 + 56;
                        unsigned int v111 = 0;
                        uint64_t v112 = 0;
                      }
                      *(void *)(v64 + 80) = 0;
                      *(void *)(v64 + 88) = 0;
                      *(void *)(v64 + 96) = 0;
                      *(_OWORD *)(v64 + 80) = v114;
                      *(void *)(v64 + 96) = v115;
                      long long v114 = 0uLL;
                      uint64_t v115 = 0;
                      long long v88 = (char *)(v64 + 104);
                    }
                    *(void *)(a4 + 8) = v88;
                    if ((unint64_t)v88 >= *(void *)(a4 + 16))
                    {
                      uint64_t v81 = sub_E9367C((void **)a4, (uint64_t)&v96);
                    }
                    else
                    {
                      long long v89 = v96;
                      long long v90 = v97;
                      *((_DWORD *)v88 + 8) = v98;
                      *(_OWORD *)long long v88 = v89;
                      *((_OWORD *)v88 + 1) = v90;
                      unint64_t v91 = v99;
                      unint64_t v99 = 0;
                      *((void *)v88 + 5) = v91;
                      *((void *)v88 + 6) = v100;
                      uint64_t v100 = 0;
                      unint64_t v92 = v101;
                      *((void *)v88 + 7) = v101;
                      uint64_t v93 = v102;
                      *((void *)v88 + 8) = v102;
                      *((_DWORD *)v88 + 18) = v103;
                      if (v93)
                      {
                        unint64_t v94 = v92[1];
                        unint64_t v95 = *((void *)v88 + 6);
                        if ((v95 & (v95 - 1)) != 0)
                        {
                          if (v94 >= v95) {
                            v94 %= v95;
                          }
                        }
                        else
                        {
                          v94 &= v95 - 1;
                        }
                        v91[v94] = v88 + 56;
                        uint64_t v101 = 0;
                        uint64_t v102 = 0;
                      }
                      *((void *)v88 + 10) = 0;
                      *((void *)v88 + 11) = 0;
                      *((void *)v88 + 12) = 0;
                      *((_OWORD *)v88 + 5) = *(_OWORD *)__p;
                      *((void *)v88 + 12) = v105;
                      __p[0] = 0;
                      __p[1] = 0;
                      uint64_t v105 = 0;
                      uint64_t v81 = v88 + 104;
                    }
                    goto LABEL_96;
                  }
                }
              }
            }
            unint64_t v72 = *(void *)(a4 + 8);
            if (v72 >= *(void *)(a4 + 16))
            {
              uint64_t v81 = sub_E9367C((void **)a4, (uint64_t)&v106);
            }
            else
            {
              long long v73 = v106;
              long long v74 = v107;
              *(_DWORD *)(v72 + 32) = v108;
              *(_OWORD *)unint64_t v72 = v73;
              *(_OWORD *)(v72 + 16) = v74;
              unint64_t v75 = v109;
              unint64_t v109 = 0;
              *(void *)(v72 + 40) = v75;
              *(void *)(v72 + 48) = v110;
              uint64_t v110 = 0;
              uint64_t v76 = v111;
              *(void *)(v72 + 56) = v111;
              uint64_t v77 = v112;
              *(void *)(v72 + 64) = v112;
              *(_DWORD *)(v72 + 72) = v113;
              if (v77)
              {
                unint64_t v78 = v76[1];
                unint64_t v79 = *(void *)(v72 + 48);
                if ((v79 & (v79 - 1)) != 0)
                {
                  if (v78 >= v79) {
                    v78 %= v79;
                  }
                }
                else
                {
                  v78 &= v79 - 1;
                }
                v75[v78] = v72 + 56;
                unsigned int v111 = 0;
                uint64_t v112 = 0;
              }
              *(void *)(v72 + 80) = 0;
              *(void *)(v72 + 88) = 0;
              *(void *)(v72 + 96) = 0;
              *(_OWORD *)(v72 + 80) = v114;
              *(void *)(v72 + 96) = v115;
              long long v114 = 0uLL;
              uint64_t v115 = 0;
              uint64_t v81 = (char *)(v72 + 104);
            }
LABEL_96:
            *(void *)(a4 + 8) = v81;
            ++*(_DWORD *)(a1[36] + 8);
            uint64_t v82 = (char *)__p[0];
            if (__p[0])
            {
              uint64_t v83 = (char *)__p[1];
              uint64_t v84 = __p[0];
              if (__p[1] != __p[0])
              {
                do
                {
                  unint64_t v85 = (void *)*((void *)v83 - 8);
                  if (v85)
                  {
                    *((void *)v83 - 7) = v85;
                    operator delete(v85);
                  }
                  v83 -= 80;
                }
                while (v83 != v82);
                uint64_t v84 = __p[0];
              }
              __p[1] = v82;
              operator delete(v84);
            }
            long long v86 = v101;
            if (v101)
            {
              do
              {
                uint64_t v87 = (void *)*v86;
                operator delete(v86);
                long long v86 = v87;
              }
              while (v87);
            }
            goto LABEL_49;
          }
          unint64_t v11 = *(void *)(a4 + 8);
          if (v11 >= *(void *)(a4 + 16))
          {
            long long v80 = sub_E9367C((void **)a4, (uint64_t)&v106);
          }
          else
          {
            long long v12 = v106;
            long long v13 = v107;
            *(_DWORD *)(v11 + 32) = v108;
            *(_OWORD *)unint64_t v11 = v12;
            *(_OWORD *)(v11 + 16) = v13;
            uint64_t v14 = v109;
            unint64_t v109 = 0;
            *(void *)(v11 + 40) = v14;
            *(void *)(v11 + 48) = v110;
            uint64_t v110 = 0;
            uint64_t v15 = v111;
            *(void *)(v11 + 56) = v111;
            uint64_t v16 = v112;
            *(void *)(v11 + 64) = v112;
            *(_DWORD *)(v11 + 72) = v113;
            if (v16)
            {
              unint64_t v17 = v15[1];
              unint64_t v18 = *(void *)(v11 + 48);
              if ((v18 & (v18 - 1)) != 0)
              {
                if (v17 >= v18) {
                  v17 %= v18;
                }
              }
              else
              {
                v17 &= v18 - 1;
              }
              v14[v17] = v11 + 56;
              unsigned int v111 = 0;
              uint64_t v112 = 0;
            }
            *(void *)(v11 + 80) = 0;
            *(void *)(v11 + 88) = 0;
            *(void *)(v11 + 96) = 0;
            *(_OWORD *)(v11 + 80) = v114;
            *(void *)(v11 + 96) = v115;
            long long v114 = 0uLL;
            uint64_t v115 = 0;
            long long v80 = (char *)(v11 + 104);
          }
          *(void *)(a4 + 8) = v80;
          ++*(_DWORD *)(a1[36] + 8);
          int v56 = (char *)v114;
          if ((void)v114) {
            goto LABEL_52;
          }
          goto LABEL_59;
        }
      }
    }
  }
  uint64_t v19 = *(void *)(a3 + 8);
  unint64_t v21 = *(void *)(v19 - 16);
  unint64_t v20 = *(void *)(v19 - 8);
  unint64_t v22 = sub_2E1FA4(a1[1], v21, 1);
  if (v22
    && (uint64_t v23 = &v22[-*(int *)v22], *(unsigned __int16 *)v23 >= 5u)
    && (uint64_t v24 = *((unsigned __int16 *)v23 + 2)) != 0
    && (double v25 = &v22[v24 + *(unsigned int *)&v22[v24]], *(_DWORD *)v25 > HIDWORD(v21))
    && (long double v26 = (int *)sub_2E2AB8(v25, v21)) != 0)
  {
    unint64_t v27 = (unsigned __int16 *)((char *)v26 - *v26);
    if (*v27 >= 7u && (uint64_t v28 = v27[3]) != 0) {
      uint64_t v29 = *(unsigned int *)((char *)v26 + v28);
    }
    else {
      uint64_t v29 = 0;
    }
  }
  else
  {
    uint64_t v29 = 0x7FFFFFFFFFFFFFFFLL;
  }
  long double v30 = *(int **)(sub_470B40(a2, v8) + 8);
  long double v31 = (unsigned __int16 *)((char *)v30 - *v30);
  if (*v31 >= 9u && (uint64_t v32 = v31[4]) != 0) {
    uint64_t v33 = *(unsigned int *)((char *)v30 + v32);
  }
  else {
    uint64_t v33 = 0;
  }
  sub_E8C2C4(a1, a2, v20, v29, v8, v33, (uint64_t)&v96);
  if (*((void *)&v96 + 1) != 0x7FFFFFFFFFFFFFFFLL && *((void *)&v97 + 1) != 0x7FFFFFFFFFFFFFFFLL)
  {
    long double v34 = __p[0];
    if (__p[0] != __p[1])
    {
      while (v34[2] != v34[3])
      {
        v34 += 10;
        if (v34 == __p[1])
        {
          unint64_t v35 = *(void *)(a4 + 8);
          if (v35 >= *(void *)(a4 + 16))
          {
            *(void *)(a4 + 8) = sub_E9367C((void **)a4, (uint64_t)&v96);
            break;
          }
          long long v36 = v96;
          long long v37 = v97;
          *(_DWORD *)(v35 + 32) = v98;
          *(_OWORD *)unint64_t v35 = v36;
          *(_OWORD *)(v35 + 16) = v37;
          long double v38 = v99;
          unint64_t v99 = 0;
          *(void *)(v35 + 40) = v38;
          *(void *)(v35 + 48) = v100;
          uint64_t v100 = 0;
          long double v39 = v101;
          *(void *)(v35 + 56) = v101;
          uint64_t v40 = v102;
          *(void *)(v35 + 64) = v102;
          *(_DWORD *)(v35 + 72) = v103;
          if (v40)
          {
            unint64_t v41 = v39[1];
            unint64_t v42 = *(void *)(v35 + 48);
            if ((v42 & (v42 - 1)) != 0)
            {
              if (v41 >= v42) {
                v41 %= v42;
              }
            }
            else
            {
              v41 &= v42 - 1;
            }
            v38[v41] = v35 + 56;
            uint64_t v101 = 0;
            uint64_t v102 = 0;
          }
          *(void *)(v35 + 80) = 0;
          *(void *)(v35 + 88) = 0;
          *(void *)(v35 + 96) = 0;
          *(_OWORD *)(v35 + 80) = *(_OWORD *)__p;
          *(void *)(v35 + 96) = v105;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v105 = 0;
          *(void *)(a4 + 8) = v35 + 104;
          ++*(_DWORD *)(a1[36] + 28);
          double v49 = (char *)__p[0];
          if (__p[0]) {
            goto LABEL_40;
          }
          goto LABEL_47;
        }
      }
    }
  }
  ++*(_DWORD *)(a1[36] + 28);
  double v49 = (char *)__p[0];
  if (__p[0])
  {
LABEL_40:
    unint64_t v50 = (char *)__p[1];
    long long v51 = v49;
    if (__p[1] != v49)
    {
      do
      {
        unsigned int v52 = (void *)*((void *)v50 - 8);
        if (v52)
        {
          *((void *)v50 - 7) = v52;
          operator delete(v52);
        }
        v50 -= 80;
      }
      while (v50 != v49);
      long long v51 = (char *)__p[0];
    }
    __p[1] = v49;
    operator delete(v51);
  }
LABEL_47:
  uint64_t v53 = v101;
  if (v101)
  {
    do
    {
      char v54 = (void *)*v53;
      operator delete(v53);
      uint64_t v53 = v54;
    }
    while (v54);
  }
LABEL_49:
  long double v55 = v99;
  unint64_t v99 = 0;
  if (v55) {
    operator delete(v55);
  }
  int v56 = (char *)v114;
  if ((void)v114)
  {
LABEL_52:
    uint64_t v57 = (char *)*((void *)&v114 + 1);
    uint64_t v58 = v56;
    if (*((char **)&v114 + 1) != v56)
    {
      do
      {
        uint64_t v59 = (void *)*((void *)v57 - 8);
        if (v59)
        {
          *((void *)v57 - 7) = v59;
          operator delete(v59);
        }
        v57 -= 80;
      }
      while (v57 != v56);
      uint64_t v58 = (char *)v114;
    }
    *((void *)&v114 + 1) = v56;
    operator delete(v58);
  }
LABEL_59:
  unint64_t v60 = v111;
  if (v111)
  {
    do
    {
      unsigned int v61 = (void *)*v60;
      operator delete(v60);
      unint64_t v60 = v61;
    }
    while (v61);
  }
  uint64_t v62 = v109;
  unint64_t v109 = 0;
  if (v62) {
    operator delete(v62);
  }
}

void sub_E8F530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

void sub_E8F550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_E8CCE4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E8F564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_E8CCE4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E8F578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_E8CCE4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E8F58C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)sub_68EA4(a3);
  uint64_t v7 = v6 + 2;
  uint64_t v8 = (uint64_t *)sub_68EA4(a2);
  uint64_t v13 = *v8;
  uint64_t v14 = v8[1];
  if (*v8 == v14)
  {
    double v16 = 0.0;
  }
  else
  {
    uint64_t v15 = (uint64_t *)(a1 + 280);
    double v16 = 0.0;
    do
    {
      double v9 = sub_E88F54((_DWORD *)(*(void *)(v13 + 24) - 12), v7, v15, 1, v9, v10, v11, v12);
      if (v16 < v9) {
        double v16 = v9;
      }
      v13 += 80;
    }
    while (v13 != v14);
  }
  sub_32F08(v7, 1, 0, v52, 1.0);
  sub_32F08((uint64_t *)v52, 0, 0, &v50, fmin(v16, 1.0));
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  unint64_t v17 = (void *)*v7;
  if (*v7)
  {
    v6[3] = v17;
    operator delete(v17);
    *uint64_t v7 = 0;
    v6[3] = 0;
    v6[4] = 0;
  }
  unint64_t v18 = v50;
  v6[2] = v50;
  uint64_t v19 = (unsigned int *)v51;
  *(_OWORD *)(v6 + 3) = v51;
  unint64_t v20 = v19;
  double v21 = 0.0;
  if (v18 == v20) {
    goto LABEL_22;
  }
  unint64_t v22 = v18 + 3;
  if (v18 + 3 == v20) {
    goto LABEL_22;
  }
  double v23 = 0.0;
  float64x2_t v47 = (float64x2_t)vdupq_n_s64(0xC066800000000000);
  float64x2_t v48 = (float64x2_t)vdupq_n_s64(0x4076800000000000uLL);
  float64x2_t v46 = (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL);
  float64x2_t v45 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
  HIDWORD(v24) = 1096306543;
  do
  {
    LODWORD(v24) = *(v22 - 2);
    long double v25 = exp(3.14159265 - (double)*(unint64_t *)&v24 * 6.28318531 / 4294967300.0);
    *(double *)&unint64_t v26 = atan((v25 - 1.0 / v25) * 0.5) * 57.2957795;
    long double v27 = *(double *)&v26 * 0.0174532925;
    unsigned int v28 = *(v22 - 3);
    LODWORD(v26) = v22[1];
    long double v29 = exp(3.14159265 - (double)v26 * 6.28318531 / 4294967300.0);
    long double v30 = atan((v29 - 1.0 / v29) * 0.5) * 57.2957795 * 0.0174532925;
    v31.i64[0] = v28;
    v31.i64[1] = *v22;
    int64x2_t v32 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v31), v48), v46), v47), v45);
    double v49 = vsubq_f64((float64x2_t)v32, (float64x2_t)vdupq_laneq_s64(v32, 1)).f64[0];
    long double v33 = sin((v27 - v30) * 0.5);
    long double v34 = v33 * v33;
    double v35 = cos(v27);
    long double v36 = v35 * cos(v30);
    long double v37 = sin(0.5 * v49);
    long double v38 = atan2(sqrt(v34 + v36 * (v37 * v37)), sqrt(1.0 - (v34 + v36 * (v37 * v37))));
    double v24 = (v38 + v38) * 6372797.56;
    double v23 = v23 + v24;
    v22 += 3;
  }
  while (v22 != v20);
  double v21 = v23 * 100.0;
  if (v23 * 100.0 >= 0.0)
  {
    if (v21 >= 4.50359963e15)
    {
      char v41 = 0;
      double v40 = v23 * 100.0;
      goto LABEL_23;
    }
LABEL_22:
    char v41 = 0;
    double v40 = (double)(((uint64_t)(v21 + v21) + 1) >> 1);
    goto LABEL_23;
  }
  if (v21 <= -4.50359963e15)
  {
    char v41 = 1;
    double v40 = v23 * 100.0;
  }
  else
  {
    uint64_t v39 = (uint64_t)(v21 + v21);
    if (v39 >= 1) {
      --v39;
    }
    double v40 = (double)(v39 >> 1);
    char v41 = 1;
  }
LABEL_23:
  if (v40 < 9.22337204e18)
  {
    if (v41)
    {
      if (v21 > -4.50359963e15)
      {
        uint64_t v42 = (uint64_t)(v21 + v21);
        if (v42 >= 1) {
          --v42;
        }
        goto LABEL_32;
      }
    }
    else if (v21 < 4.50359963e15)
    {
      uint64_t v42 = (uint64_t)(v21 + v21) + 1;
LABEL_32:
      double v21 = (double)(v42 >> 1);
    }
    uint64_t v43 = (uint64_t)v21;
    goto LABEL_34;
  }
  uint64_t v43 = 0x7FFFFFFFFFFFFFFELL;
LABEL_34:
  uint64_t result = sub_68EA4(a3);
  *(void *)(*(void *)result + 56) = v43;
  return result;
}

void sub_E8F984(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 152);
  if (v3)
  {
    *(void *)(v1 - 144) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_E8F9A0(uint64_t a1, void *a2)
{
  HIBYTE(v41[2]) = 6;
  strcpy((char *)v41, "enable");
  uint64_t v4 = sub_58070(a2, (uint64_t)v41);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)a1 = v5 == 4;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a1 != 0;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
  }
  operator delete(v41[0]);
LABEL_7:
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8E90;
  strcpy(v41[0], "partial_probeline_trim_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 8));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8870;
  strcpy(v41[0], "partial_probeline_slack_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 16));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91B0;
  strcpy(v41[0], "connection_pullback_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 24));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20E12D0;
  strcpy(v41[0], "high_quality_num_observation_threshold");
  uint64_t v6 = sub_58070(a2, (uint64_t)v41);
  if (v6 && *((_DWORD *)v6 + 12) == 1)
  {
    *(_WORD *)(a1 + 32) = (int)*((double *)v6 + 5);
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_18;
    }
  }
  else
  {
    *(_WORD *)(a1 + 32) = *(_WORD *)(a1 + 32);
    if (SHIBYTE(v41[2]) < 0) {
LABEL_18:
    }
      operator delete(v41[0]);
  }
  strcpy((char *)v41, "affix_mismatch_penalty");
  HIBYTE(v41[2]) = 22;
  uint64_t v7 = sub_58070(a2, (uint64_t)v41);
  uint64_t v8 = (void *)(a1 + 48);
  if (v7)
  {
    uint64_t v8 = v7 + 5;
    if (*((_DWORD *)v7 + 12) != 1) {
      uint64_t v8 = (void *)(a1 + 48);
    }
  }
  *(void *)(a1 + 48) = *v8;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B5EB0;
  strcpy(v41[0], "observation_penalty_factor");
  double v9 = sub_58070(a2, (uint64_t)v41);
  double v10 = (void *)(a1 + 40);
  if (v9)
  {
    double v10 = v9 + 5;
    if (*((_DWORD *)v9 + 12) != 1) {
      double v10 = (void *)(a1 + 40);
    }
  }
  *(void *)(a1 + 40) = *v10;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9250;
  strcpy(v41[0], "consider_all_probelines");
  double v11 = sub_58070(a2, (uint64_t)v41);
  if (v11 && (int v12 = *((_DWORD *)v11 + 12), (v12 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 56) = v12 == 4;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a1 + 56) != 0;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_35;
    }
  }
  operator delete(v41[0]);
LABEL_35:
  v41[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9250;
  strcpy(v41[0], "probeline_trim_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 64));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B5EB0;
  strcpy(v41[0], "center_line_shift_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 72));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 21;
  strcpy((char *)v41, "segment_trim_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 80));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A40;
  strcpy(v41[0], "additional_smooth_transition_trim_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 88));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 13;
  strcpy((char *)v41, "max_shift_frc");
  uint64_t v13 = sub_58070(a2, (uint64_t)v41);
  if (v13 && *((_DWORD *)v13 + 12) == 1)
  {
    *(_DWORD *)(a1 + 96) = *((double *)v13 + 5);
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_48;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a1 + 96);
    if (SHIBYTE(v41[2]) < 0) {
LABEL_48:
    }
      operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 20;
  strcpy((char *)v41, "min_num_observations");
  uint64_t v14 = sub_58070(a2, (uint64_t)v41);
  if (v14 && *((_DWORD *)v14 + 12) == 1)
  {
    *(_WORD *)(a1 + 120) = (int)*((double *)v14 + 5);
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_54;
    }
  }
  else
  {
    *(_WORD *)(a1 + 120) = *(_WORD *)(a1 + 120);
    if (SHIBYTE(v41[2]) < 0) {
LABEL_54:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8890;
  strcpy(v41[0], "smooth_centerline_transitions");
  uint64_t v15 = sub_58070(a2, (uint64_t)v41);
  if (v15 && (int v16 = *((_DWORD *)v15 + 12), (v16 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 122) = v16 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_60;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 122) = *(unsigned char *)(a1 + 122) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_60:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B91A0;
  strcpy(v41[0], "min_deviation_from_straight");
  unint64_t v17 = sub_58070(a2, (uint64_t)v41);
  unint64_t v18 = (void *)(a1 + 128);
  if (v17)
  {
    unint64_t v18 = v17 + 5;
    if (*((_DWORD *)v17 + 12) != 1) {
      unint64_t v18 = (void *)(a1 + 128);
    }
  }
  *(void *)(a1 + 128) = *v18;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 18;
  strcpy((char *)v41, "pull_back_length_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 136));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9250;
  strcpy(v41[0], "max_distance_from_tnp_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 104));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8E90;
  strcpy(v41[0], "max_distance_from_center_line_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 112));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 16;
  strcpy((char *)v41, "bezier_point_gap");
  uint64_t v19 = sub_58070(a2, (uint64_t)v41);
  unint64_t v20 = (void *)(a1 + 144);
  if (v19)
  {
    unint64_t v20 = v19 + 5;
    if (*((_DWORD *)v19 + 12) != 1) {
      unint64_t v20 = (void *)(a1 + 144);
    }
  }
  *(void *)(a1 + 144) = *v20;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 12;
  strcpy((char *)v41, "bezier_error");
  double v21 = sub_58070(a2, (uint64_t)v41);
  unint64_t v22 = (void *)(a1 + 152);
  if (v21)
  {
    unint64_t v22 = v21 + 5;
    if (*((_DWORD *)v21 + 12) != 1) {
      unint64_t v22 = (void *)(a1 + 152);
    }
  }
  *(void *)(a1 + 152) = *v22;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 13;
  strcpy((char *)v41, "bezier_window");
  double v23 = sub_58070(a2, (uint64_t)v41);
  double v24 = (void *)(a1 + 160);
  if (v23)
  {
    double v24 = v23 + 5;
    if (*((_DWORD *)v23 + 12) != 1) {
      double v24 = (void *)(a1 + 160);
    }
  }
  *(void *)(a1 + 160) = *v24;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8E90;
  strcpy(v41[0], "bezier_simplification_tolerance");
  long double v25 = sub_58070(a2, (uint64_t)v41);
  unint64_t v26 = (void *)(a1 + 168);
  if (v25)
  {
    unint64_t v26 = v25 + 5;
    if (*((_DWORD *)v25 + 12) != 1) {
      unint64_t v26 = (void *)(a1 + 168);
    }
  }
  *(void *)(a1 + 168) = *v26;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 20;
  strcpy((char *)v41, "max_added_tortuosity");
  long double v27 = sub_58070(a2, (uint64_t)v41);
  unsigned int v28 = (void *)(a1 + 176);
  if (v27)
  {
    unsigned int v28 = v27 + 5;
    if (*((_DWORD *)v27 + 12) != 1) {
      unsigned int v28 = (void *)(a1 + 176);
    }
  }
  *(void *)(a1 + 176) = *v28;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B93A0;
  strcpy(v41[0], "enable_ratio_from_segment_start_fix");
  long double v29 = sub_58070(a2, (uint64_t)v41);
  if (v29 && (int v30 = *((_DWORD *)v29 + 12), (v30 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 185) = v30 == 4;
    if (SHIBYTE(v41[2]) < 0) {
      goto LABEL_102;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 185) = *(unsigned char *)(a1 + 185) != 0;
    if (SHIBYTE(v41[2]) < 0) {
LABEL_102:
    }
      operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20E12D0;
  strcpy(v41[0], "ratio_from_start_max_search_multiplier");
  uint64x2_t v31 = sub_58070(a2, (uint64_t)v41);
  int64x2_t v32 = (void *)(a1 + 192);
  if (v31)
  {
    int64x2_t v32 = v31 + 5;
    if (*((_DWORD *)v31 + 12) != 1) {
      int64x2_t v32 = (void *)(a1 + 192);
    }
  }
  *(void *)(a1 + 192) = *v32;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x40uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A30;
  strcpy(v41[0], "engage_alternate_ratio_from_geometry_start_logic_threshold");
  long double v33 = sub_58070(a2, (uint64_t)v41);
  long double v34 = (void *)(a1 + 200);
  if (v33)
  {
    long double v34 = v33 + 5;
    if (*((_DWORD *)v33 + 12) != 1) {
      long double v34 = (void *)(a1 + 200);
    }
  }
  *(void *)(a1 + 200) = *v34;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20B93C0;
  strcpy(v41[0], "minimum_probeline_candidate_length_ratio");
  double v35 = sub_58070(a2, (uint64_t)v41);
  long double v36 = (void *)(a1 + 208);
  if (v35)
  {
    long double v36 = v35 + 5;
    if (*((_DWORD *)v35 + 12) != 1) {
      long double v36 = (void *)(a1 + 208);
    }
  }
  *(void *)(a1 + 208) = *v36;
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8870;
  strcpy(v41[0], "skip_short_cut_probelines");
  long double v37 = sub_58070(a2, (uint64_t)v41);
  if (v37 && (int v38 = *((_DWORD *)v37 + 12), (v38 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 216) = v38 == 4;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_124;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a1 + 216) != 0;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_124;
    }
  }
  operator delete(v41[0]);
LABEL_124:
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20E1380;
  strcpy(v41[0], "max_allowed_frechet_distance_from_centerline");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 224));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8890;
  strcpy(v41[0], "walking_partial_geometry_trim");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 232));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 20;
  strcpy((char *)v41, "walking_pathway_trim");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 240));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  HIBYTE(v41[2]) = 14;
  strcpy((char *)v41, "walking_trim_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 248));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
  v41[0] = (char *)operator new(0x30uLL);
  *(_OWORD *)&v41[1] = xmmword_20B9A40;
  strcpy(v41[0], "require_geometry_path_is_continuous_subset");
  uint64_t v39 = sub_58070(a2, (uint64_t)v41);
  if (v39 && (int v40 = *((_DWORD *)v39 + 12), (v40 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 256) = v40 == 4;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_138;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(a1 + 256) != 0;
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0) {
      goto LABEL_138;
    }
  }
  operator delete(v41[0]);
LABEL_138:
  v41[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v41[1] = xmmword_20B8FD0;
  strcpy(v41[0], "max_ratio_at_point_search_distance_m");
  sub_5C8A4(a2, (uint64_t)v41, (uint64_t *)(a1 + 264));
  if (SHIBYTE(v41[2]) < 0) {
    operator delete(v41[0]);
  }
}

void sub_E907D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 25) < 0) {
    operator delete(*(void **)(v1 - 48));
  }
  _Unwind_Resume(exception_object);
}

void sub_E90878(uint64_t a1@<X0>, long long *a2@<X1>, char a3@<W2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  sub_2E0724(*(void *)(a1 + 8), a2, (uint64_t)&__p);
  uint64_t v12 = *(void *)(a1 + 8);
  long long v13 = a2[1];
  long long v47 = *a2;
  long long v48 = v13;
  uint64_t v14 = (int *)sub_2E2ED4(v12, (int32x2_t *)&v47);
  if (v14 && (uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14), *v15 >= 0xFu) && (v16 = v15[7]) != 0) {
    int v17 = *(int *)((char *)v14 + v16);
  }
  else {
    LOWORD(v17) = 0;
  }
  uint64_t v18 = *(void *)(a1 + 8);
  long long v19 = a2[1];
  long long v47 = *a2;
  long long v48 = v19;
  unint64_t v20 = (int *)sub_2E2ED4(v18, (int32x2_t *)&v47);
  if (v20 && (double v21 = (unsigned __int16 *)((char *)v20 - *v20), *v21 >= 0x13u) && (v22 = v21[9]) != 0) {
    uint64_t v23 = *(int *)((char *)v20 + v22);
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = *(void *)(a1 + 8);
  long long v25 = a2[1];
  long long v47 = *a2;
  long long v48 = v25;
  unint64_t v26 = (int *)sub_2E2ED4(v24, (int32x2_t *)&v47);
  if (v26 && (long double v27 = (unsigned __int16 *)((char *)v26 - *v26), *v27 >= 0x15u) && (v28 = v27[10]) != 0) {
    uint64_t v29 = *(int *)((char *)v26 + v28);
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v30 = *(void *)(a1 + 8);
  long long v31 = a2[1];
  long long v47 = *a2;
  long long v48 = v31;
  int64x2_t v32 = (int *)sub_2E2ED4(v30, (int32x2_t *)&v47);
  double v33 = 0.0;
  if (v32)
  {
    long double v34 = (unsigned __int16 *)((char *)v32 - *v32);
    if (*v34 >= 0x19u)
    {
      uint64_t v35 = v34[12];
      if (v35) {
        double v33 = *(float *)((char *)v32 + v35);
      }
    }
  }
  long long v36 = a2[1];
  *(_OWORD *)a6 = *a2;
  *(_OWORD *)(a6 + 16) = v36;
  long double v37 = (char *)__p;
  *(void *)(a6 + 32) = __p;
  int v38 = (char *)v46;
  *(_OWORD *)(a6 + 40) = v46;
  float64x2_t __p = 0;
  long long v46 = 0uLL;
  *(_WORD *)(a6 + 56) = v17;
  *(void *)(a6 + 64) = v23;
  *(void *)(a6 + 72) = v29;
  *(double *)(a6 + 80) = v33;
  *(unsigned char *)(a6 + 88) = a3;
  *(unsigned char *)(a6 + 89) = a4;
  *(unsigned char *)(a6 + 90) = a5;
  if (a5)
  {
    if (v37 != v38)
    {
      uint64_t v39 = v38 - 12;
      if (v38 - 12 > v37)
      {
        int v40 = v37 + 12;
        do
        {
          *(void *)&long long v47 = *(void *)(v40 - 12);
          uint64_t v41 = v47;
          DWORD2(v47) = *((_DWORD *)v40 - 1);
          int v42 = DWORD2(v47);
          int v43 = *((_DWORD *)v39 + 2);
          *(void *)(v40 - 12) = *(void *)v39;
          *((_DWORD *)v40 - 1) = v43;
          *((_DWORD *)v39 + 2) = v42;
          *(void *)uint64_t v39 = v41;
          v39 -= 12;
          BOOL v44 = v40 >= v39;
          v40 += 12;
        }
        while (!v44);
        if (__p)
        {
          *(void *)&long long v46 = __p;
          operator delete(__p);
        }
      }
    }
  }
}

void sub_E90A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E90A9C(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  sub_2E11B0(*(void *)(a1 + 8), a2, (uint64_t)&__p);
  uint64_t v12 = (int *)sub_2E3418(*(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
  if (v12 && (long long v13 = (unsigned __int16 *)((char *)v12 - *v12), *v13 >= 0xFu) && (v14 = v13[7]) != 0) {
    int v15 = *(int *)((char *)v12 + v14);
  }
  else {
    LOWORD(v15) = 0;
  }
  uint64_t v16 = (int *)sub_2E3418(*(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
  if (v16 && (int v17 = (unsigned __int16 *)((char *)v16 - *v16), *v17 >= 0x15u))
  {
    uint64_t v18 = v17[10];
    if (v18) {
      uint64_t v18 = *(int *)((char *)v16 + v18);
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  *(_OWORD *)a6 = *(_OWORD *)a2;
  long long v19 = (char *)__p;
  *(void *)(a6 + 16) = __p;
  unint64_t v20 = (char *)v28;
  *(_OWORD *)(a6 + 24) = v28;
  float64x2_t __p = 0;
  long long v28 = 0uLL;
  *(_WORD *)(a6 + 40) = v15;
  *(void *)(a6 + 48) = 0;
  *(void *)(a6 + 56) = v18;
  *(void *)(a6 + 64) = 0;
  *(unsigned char *)(a6 + 72) = a3;
  *(unsigned char *)(a6 + 73) = a4;
  *(unsigned char *)(a6 + 74) = a5;
  if (a5)
  {
    if (v19 != v20)
    {
      double v21 = v20 - 12;
      if (v20 - 12 > v19)
      {
        uint64_t v22 = v19 + 12;
        do
        {
          uint64_t v29 = *(void *)(v22 - 12);
          uint64_t v23 = v29;
          int v30 = *((_DWORD *)v22 - 1);
          int v24 = v30;
          int v25 = *((_DWORD *)v21 + 2);
          *(void *)(v22 - 12) = *(void *)v21;
          *((_DWORD *)v22 - 1) = v25;
          *((_DWORD *)v21 + 2) = v24;
          *(void *)double v21 = v23;
          v21 -= 12;
          BOOL v26 = v22 >= v21;
          v22 += 12;
        }
        while (!v26);
        if (__p)
        {
          *(void *)&long long v28 = __p;
          operator delete(__p);
        }
      }
    }
  }
}

void sub_E90C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_E90C28@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = (int *)sub_2E157C(a1, a2, 1);
  if (!result) {
    goto LABEL_9;
  }
  uint64_t v8 = (unsigned __int16 *)((char *)result - *result);
  if (*v8 < 7u) {
    goto LABEL_9;
  }
  uint64_t v9 = v8[3];
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = *(unsigned int *)((char *)result + v9);
  double v11 = (int *)((char *)result + v9 + v10);
  if (*v11 <= HIDWORD(a2)) {
    goto LABEL_9;
  }
  uint64_t v12 = HIDWORD(a2);
  uint64_t v14 = &v11[v12 + 1];
  uint64_t v13 = *v14;
  int v15 = (char *)v14 + v13;
  uint64_t v16 = (unsigned __int16 *)((char *)v14 + v13 - *(int *)((char *)v14 + v13));
  if (*v16 >= 5u && (uint64_t v17 = v16[2]) != 0)
  {
    uint64_t v18 = &v15[v17];
    uint64_t v19 = *(unsigned int *)&v15[v17];
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    uint64_t v20 = *(unsigned int *)&v18[v19];
    long long v31 = (char **)a4;
    if (v20)
    {
      uint64_t v21 = 0;
      uint64_t v22 = 4 * v20;
      uint64_t v23 = (char *)result + v17 + v13 + v10 + v9 + v12 * 4 + v19;
      do
      {
        int v24 = &v23[v21];
        uint64_t v25 = *(unsigned int *)&v23[v21 + 8];
        BOOL v26 = (unsigned __int16 *)&v23[v21 + v25 - *(int *)&v23[v21 + 8 + v25]];
        if (*(void *)&v23[v21 + 8 + v25 + v26[8]] == a3)
        {
          *(void *)&long long v27 = *(void *)&v24[v25 + 8 + v26[6]];
          *((void *)&v27 + 1) = *(void *)&v24[v25 + 8 + v26[7]];
          long long v28 = v27;
          uint64_t v29 = a3;
          uint64_t v30 = *(void *)&v24[v25 + 8 + v26[9]];
          uint64_t result = (int *)sub_29E380(&v31, &v28);
        }
        v21 += 4;
      }
      while (v22 != v21);
    }
  }
  else
  {
LABEL_9:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  return result;
}

void sub_E90DB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_E90DD0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= *(void *)(a1 + 16))
  {
    uint64_t v7 = sub_E92C5C((void **)a1, a2);
  }
  else
  {
    long long v5 = *(_OWORD *)a2;
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)unint64_t v4 = v5;
    *(_OWORD *)(v4 + 16) = v6;
    sub_E92F94(v4 + 40, a2 + 40);
    sub_E933FC((void *)(v4 + 80), (uint64_t *)(a2 + 80));
    uint64_t v7 = (char *)(v4 + 104);
    *(void *)(a1 + 8) = v4 + 104;
  }
  *(void *)(a1 + 8) = v7;
  return v7 - 104;
}

void sub_E90E68(_Unwind_Exception *exception_object)
{
  long long v5 = *(void **)(v3 + 56);
  if (v5)
  {
    do
    {
      long long v6 = (void *)*v5;
      operator delete(v5);
      long long v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = *v2;
  *uint64_t v2 = 0;
  if (v7)
  {
    operator delete(v7);
    *(void *)(v1 + 8) = v3;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void sub_E90EB0(uint64_t *a1, void *a2, unint64_t **a3, uint64_t a4)
{
  uint64_t v8 = *a3;
  unint64_t v9 = **a3;
  unint64_t v10 = (*a3)[2];
  unint64_t v159 = v9;
  unint64_t v160 = v10;
  unint64_t v136 = v8[1];
  double v11 = sub_2E1FA4(a1[1], v9, 1);
  if (v11
    && (uint64_t v12 = &v11[-*(int *)v11], *(unsigned __int16 *)v12 >= 5u)
    && (uint64_t v13 = *((unsigned __int16 *)v12 + 2)) != 0
    && (uint64_t v14 = &v11[v13 + *(unsigned int *)&v11[v13]], *(_DWORD *)v14 > HIDWORD(v9))
    && (int v15 = (int *)sub_2E2AB8(v14, v9)) != 0)
  {
    uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
    if (*v16 >= 7u && (uint64_t v17 = v16[3]) != 0) {
      uint64_t v18 = *(unsigned int *)((char *)v15 + v17);
    }
    else {
      uint64_t v18 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  unint64_t v20 = (*a3)[2];
  unint64_t v19 = (*a3)[3];
  uint64_t v21 = sub_2E1FA4(a1[1], v20, 1);
  if (!v21
    || (uint64_t v22 = &v21[-*(int *)v21], *(unsigned __int16 *)v22 < 5u)
    || (uint64_t v23 = *((unsigned __int16 *)v22 + 2)) == 0
    || (int v24 = &v21[v23 + *(unsigned int *)&v21[v23]], *(_DWORD *)v24 <= HIDWORD(v20))
    || (uint64_t v25 = (int *)sub_2E2AB8(v24, v20)) == 0)
  {
    uint64_t v28 = 0x7FFFFFFFFFFFFFFFLL;
    long long v27 = a3;
LABEL_19:
    unint64_t v29 = v136;
    goto LABEL_20;
  }
  BOOL v26 = (unsigned __int16 *)((char *)v25 - *v25);
  long long v27 = a3;
  if (*v26 < 7u)
  {
    uint64_t v28 = 0;
    goto LABEL_19;
  }
  uint64_t v28 = v26[3];
  unint64_t v29 = v136;
  if (v28) {
    uint64_t v28 = *(unsigned int *)((char *)v25 + v28);
  }
LABEL_20:
  *(void *)&long long v151 = v29;
  *((void *)&v151 + 1) = v18;
  *(void *)&long long v152 = v19;
  *((void *)&v152 + 1) = v28;
  long long v154 = 0u;
  long long v155 = 0u;
  int v153 = 3;
  int v156 = 1065353216;
  uint64_t v158 = 0;
  long long v157 = 0uLL;
  unint64_t v149 = sub_2E0364(a1[1], v9, v10);
  unint64_t v150 = v30;
  BOOL v31 = v159 >= 0xFFFFFFFF00000000 || v159 == 0;
  BOOL v32 = !v31;
  if (!v31) {
    BOOL v32 = v160 < 0xFFFFFFFF00000000 && v160 != 0;
  }
  if (v32)
  {
    long double v34 = (int *)sub_2E3418(a1[1], v159, v160);
    if (v34)
    {
      uint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
      if (*v35 >= 0xDu)
      {
        uint64_t v36 = v35[6];
        if (v36)
        {
          long double v37 = (int *)((char *)v34 + v36 + *(unsigned int *)((char *)v34 + v36));
          int v38 = (unsigned __int16 *)((char *)v37 - *v37);
          if (*v38 >= 5u)
          {
            uint64_t v39 = v38[2];
            if (v39)
            {
              if (*(int *)((char *)v37 + v39 + *(unsigned int *)((char *)v37 + v39)))
              {
                sub_E90A9C((uint64_t)a1, (uint64_t)&v159, 1, 1, 0, (uint64_t)&v139);
                sub_E9ADB4((uint64_t)&v151, (uint64_t)&v139);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                unint64_t v40 = *(void *)(a4 + 8);
                if (v40 >= *(void *)(a4 + 16))
                {
                  uint64_t v41 = sub_E9367C((void **)a4, (uint64_t)&v151);
LABEL_157:
                  *(void *)(a4 + 8) = v41;
                  goto LABEL_143;
                }
LABEL_79:
                long long v69 = v151;
                long long v70 = v152;
                *(_DWORD *)(v40 + 32) = v153;
                *(_OWORD *)unint64_t v40 = v69;
                *(_OWORD *)(v40 + 16) = v70;
                unint64_t v71 = v154;
                *(void *)&long long v154 = 0;
                *(_OWORD *)(v40 + 40) = __PAIR128__(*((unint64_t *)&v154 + 1), v71);
                *((void *)&v154 + 1) = 0;
                uint64_t v72 = v155;
                *(void *)(v40 + 56) = v155;
                uint64_t v73 = *((void *)&v155 + 1);
                *(void *)(v40 + 64) = *((void *)&v155 + 1);
                *(_DWORD *)(v40 + 72) = v156;
                if (v73)
                {
                  unint64_t v74 = *(void *)(v72 + 8);
                  unint64_t v75 = *(void *)(v40 + 48);
                  if ((v75 & (v75 - 1)) != 0)
                  {
                    if (v74 >= v75) {
                      v74 %= v75;
                    }
                  }
                  else
                  {
                    v74 &= v75 - 1;
                  }
                  *(void *)(v71 + 8 * v74) = v40 + 56;
                  long long v155 = 0uLL;
                }
                *(void *)(v40 + 80) = 0;
                *(void *)(v40 + 88) = 0;
                *(void *)(v40 + 96) = 0;
                *(_OWORD *)(v40 + 80) = v157;
                *(void *)(v40 + 96) = v158;
                long long v157 = 0uLL;
                uint64_t v158 = 0;
                *(void *)(a4 + 8) = v40 + 104;
                goto LABEL_143;
              }
            }
          }
        }
      }
    }
  }
  BOOL v42 = v149 >= 0xFFFFFFFF00000000 || v149 == 0;
  BOOL v43 = !v42;
  if (!v42) {
    BOOL v43 = v150 < 0xFFFFFFFF00000000 && v150 != 0;
  }
  if (v43)
  {
    float64x2_t v45 = (int *)sub_2E3418(a1[1], v149, v150);
    if (v45)
    {
      long long v46 = (unsigned __int16 *)((char *)v45 - *v45);
      if (*v46 >= 0xDu)
      {
        uint64_t v47 = v46[6];
        if (v47)
        {
          long long v48 = (int *)((char *)v45 + v47 + *(unsigned int *)((char *)v45 + v47));
          double v49 = (unsigned __int16 *)((char *)v48 - *v48);
          if (*v49 >= 5u)
          {
            uint64_t v50 = v49[2];
            if (v50)
            {
              if (*(int *)((char *)v48 + v50 + *(unsigned int *)((char *)v48 + v50)))
              {
                if (sub_723EC(1u))
                {
                  sub_6BAC((uint64_t)&v139);
                  long long v51 = sub_188FC78(&v139, (uint64_t)"Found geometry in reverse between segments ", 43);
                  unsigned int v52 = *(_DWORD *)(sub_470B40(a2, (*v27)[1]) + 4);
                  uint64_t v53 = (void *)std::ostream::operator<<();
                  sub_188FC78(v53, (uint64_t)".", 1);
                  char v54 = (void *)std::ostream::operator<<();
                  long double v55 = sub_188FC78(v54, (uint64_t)" ", 1);
                  int v56 = sub_670B8(v55, (v52 & 0x20000000) == 0);
                  uint64_t v57 = sub_188FC78(v56, (uint64_t)" ", 1);
                  if ((v52 & 0x40000000) != 0) {
                    int v58 = 2;
                  }
                  else {
                    int v58 = v52 >> 31;
                  }
                  sub_670FC(v57, v58);
                  sub_188FC78(v51, (uint64_t)" (", 2);
                  uint64_t v59 = (void *)std::ostream::operator<<();
                  unint64_t v60 = sub_188FC78(v59, (uint64_t)") and ", 6);
                  unsigned int v61 = *(_DWORD *)(sub_470B40(a2, (*v27)[3]) + 4);
                  uint64_t v62 = (void *)std::ostream::operator<<();
                  sub_188FC78(v62, (uint64_t)".", 1);
                  BOOL v63 = (void *)std::ostream::operator<<();
                  unint64_t v64 = sub_188FC78(v63, (uint64_t)" ", 1);
                  long long v65 = sub_670B8(v64, (v61 & 0x20000000) == 0);
                  long long v66 = sub_188FC78(v65, (uint64_t)" ", 1);
                  if ((v61 & 0x40000000) != 0) {
                    int v67 = 2;
                  }
                  else {
                    int v67 = v61 >> 31;
                  }
                  sub_670FC(v66, v67);
                  sub_188FC78(v60, (uint64_t)" (", 2);
                  int v68 = (void *)std::ostream::operator<<();
                  sub_188FC78(v68, (uint64_t)")", 1);
                  std::stringbuf::str();
                  sub_7246C((uint64_t *)v137, 1u);
                  if (v138 < 0) {
                    operator delete(v137[0]);
                  }
                  if (SHIBYTE(v147[1]) < 0) {
                    operator delete(v146);
                  }
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  std::ios::~ios();
                }
                sub_E90A9C((uint64_t)a1, (uint64_t)&v149, 1, 1, 1, (uint64_t)&v139);
                sub_E9ADB4((uint64_t)&v151, (uint64_t)&v139);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                unint64_t v40 = *(void *)(a4 + 8);
                if (v40 >= *(void *)(a4 + 16))
                {
                  uint64_t v41 = sub_E9367C((void **)a4, (uint64_t)&v151);
                  goto LABEL_157;
                }
                goto LABEL_79;
              }
            }
          }
        }
      }
    }
  }
  if (sub_723EC(1u))
  {
    sub_6BAC((uint64_t)&v139);
    uint64_t v76 = sub_188FC78(&v139, (uint64_t)"Missing expected geometry between segments ", 43);
    unsigned int v77 = *(_DWORD *)(sub_470B40(a2, (*v27)[1]) + 4);
    unint64_t v78 = (void *)std::ostream::operator<<();
    sub_188FC78(v78, (uint64_t)".", 1);
    unint64_t v79 = (void *)std::ostream::operator<<();
    long long v80 = sub_188FC78(v79, (uint64_t)" ", 1);
    uint64_t v81 = sub_670B8(v80, (v77 & 0x20000000) == 0);
    uint64_t v82 = sub_188FC78(v81, (uint64_t)" ", 1);
    if ((v77 & 0x40000000) != 0) {
      int v83 = 2;
    }
    else {
      int v83 = v77 >> 31;
    }
    sub_670FC(v82, v83);
    sub_188FC78(v76, (uint64_t)" and ", 5);
    unsigned int v84 = *(_DWORD *)(sub_470B40(a2, (*v27)[3]) + 4);
    unint64_t v85 = (void *)std::ostream::operator<<();
    sub_188FC78(v85, (uint64_t)".", 1);
    long long v86 = (void *)std::ostream::operator<<();
    uint64_t v87 = sub_188FC78(v86, (uint64_t)" ", 1);
    long long v88 = sub_670B8(v87, (v84 & 0x20000000) == 0);
    long long v89 = sub_188FC78(v88, (uint64_t)" ", 1);
    if ((v84 & 0x40000000) != 0) {
      int v90 = 2;
    }
    else {
      int v90 = v84 >> 31;
    }
    sub_670FC(v89, v90);
    std::stringbuf::str();
    sub_7246C((uint64_t *)v137, 1u);
    if (v138 < 0) {
      operator delete(v137[0]);
    }
    if (SHIBYTE(v147[1]) < 0) {
      operator delete(v146);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v92 = **v27;
  unint64_t v91 = (*v27)[1];
  uint64_t v93 = sub_2E1FA4(a1[1], v92, 1);
  if (v93
    && (unint64_t v94 = &v93[-*(int *)v93], *(unsigned __int16 *)v94 >= 5u)
    && (uint64_t v95 = *((unsigned __int16 *)v94 + 2)) != 0
    && (long long v96 = &v93[v95 + *(unsigned int *)&v93[v95]], *(_DWORD *)v96 > HIDWORD(v92))
    && (long long v97 = (int *)sub_2E2AB8(v96, v92)) != 0)
  {
    int v98 = (unsigned __int16 *)((char *)v97 - *v97);
    if (*v98 >= 7u && (uint64_t v99 = v98[3]) != 0) {
      uint64_t v100 = *(unsigned int *)((char *)v97 + v99);
    }
    else {
      uint64_t v100 = 0;
    }
  }
  else
  {
    uint64_t v100 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v101 = *v27;
  unint64_t v103 = (*v27)[2];
  uint64_t v102 = v101[3];
  long long v104 = sub_2E1FA4(a1[1], v103, 1);
  if (v104
    && (uint64_t v105 = &v104[-*(int *)v104], *(unsigned __int16 *)v105 >= 5u)
    && (uint64_t v106 = *((unsigned __int16 *)v105 + 2)) != 0
    && (long long v107 = &v104[v106 + *(unsigned int *)&v104[v106]], *(_DWORD *)v107 > HIDWORD(v103))
    && (int v108 = (int *)sub_2E2AB8(v107, v103)) != 0)
  {
    unint64_t v109 = (unsigned __int16 *)((char *)v108 - *v108);
    if (*v109 >= 7u && (uint64_t v110 = v109[3]) != 0) {
      uint64_t v111 = *(unsigned int *)((char *)v108 + v110);
    }
    else {
      uint64_t v111 = 0;
    }
  }
  else
  {
    uint64_t v111 = 0x7FFFFFFFFFFFFFFFLL;
  }
  sub_E8C2C4(a1, a2, v91, v100, v102, v111, (uint64_t)&v139);
  if (*((void *)&v139 + 1) != 0x7FFFFFFFFFFFFFFFLL && __p[1] != (void *)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v112 = v147[0];
    if (v147[0] != v147[1])
    {
      while (v112[2] != v112[3])
      {
        v112 += 10;
        if (v112 == v147[1])
        {
          unint64_t v113 = *(void *)(a4 + 8);
          if (v113 >= *(void *)(a4 + 16))
          {
            uint64_t v121 = sub_E9367C((void **)a4, (uint64_t)&v139);
          }
          else
          {
            long long v114 = v139;
            long long v115 = *(_OWORD *)__p;
            *(_DWORD *)(v113 + 32) = v141;
            *(_OWORD *)unint64_t v113 = v114;
            *(_OWORD *)(v113 + 16) = v115;
            uint64_t v116 = v142;
            unint64_t v142 = 0;
            *(void *)(v113 + 40) = v116;
            *(void *)(v113 + 48) = v143;
            uint64_t v143 = 0;
            long long v117 = v144;
            *(void *)(v113 + 56) = v144;
            uint64_t v118 = v145;
            *(void *)(v113 + 64) = v145;
            *(_DWORD *)(v113 + 72) = v146;
            if (v118)
            {
              unint64_t v119 = v117[1];
              unint64_t v120 = *(void *)(v113 + 48);
              if ((v120 & (v120 - 1)) != 0)
              {
                if (v119 >= v120) {
                  v119 %= v120;
                }
              }
              else
              {
                v119 &= v120 - 1;
              }
              v116[v119] = v113 + 56;
              uint64_t v144 = 0;
              uint64_t v145 = 0;
            }
            *(void *)(v113 + 80) = 0;
            *(void *)(v113 + 88) = 0;
            *(void *)(v113 + 96) = 0;
            *(_OWORD *)(v113 + 80) = *(_OWORD *)v147;
            *(void *)(v113 + 96) = v148;
            v147[0] = 0;
            v147[1] = 0;
            uint64_t v148 = 0;
            uint64_t v121 = (char *)(v113 + 104);
          }
          *(void *)(a4 + 8) = v121;
          break;
        }
      }
    }
  }
  unint64_t v122 = (char *)v147[0];
  if (v147[0])
  {
    unint64_t v123 = (char *)v147[1];
    unint64_t v124 = v147[0];
    if (v147[1] != v147[0])
    {
      do
      {
        unint64_t v125 = (void *)*((void *)v123 - 8);
        if (v125)
        {
          *((void *)v123 - 7) = v125;
          operator delete(v125);
        }
        v123 -= 80;
      }
      while (v123 != v122);
      unint64_t v124 = v147[0];
    }
    v147[1] = v122;
    operator delete(v124);
  }
  unint64_t v126 = v144;
  if (v144)
  {
    do
    {
      unint64_t v127 = (void *)*v126;
      operator delete(v126);
      unint64_t v126 = v127;
    }
    while (v127);
  }
  int v128 = v142;
  unint64_t v142 = 0;
  if (v128) {
    operator delete(v128);
  }
LABEL_143:
  uint64_t v129 = v157;
  if ((void)v157)
  {
    uint64_t v130 = *((void *)&v157 + 1);
    uint64_t v131 = (void *)v157;
    if (*((void *)&v157 + 1) != (void)v157)
    {
      do
      {
        unint64_t v132 = *(void **)(v130 - 64);
        if (v132)
        {
          *(void *)(v130 - 56) = v132;
          operator delete(v132);
        }
        v130 -= 80;
      }
      while (v130 != v129);
      uint64_t v131 = (void *)v157;
    }
    *((void *)&v157 + 1) = v129;
    operator delete(v131);
  }
  uint64_t v133 = (void *)v155;
  if ((void)v155)
  {
    do
    {
      unsigned int v134 = (void *)*v133;
      operator delete(v133);
      uint64_t v133 = v134;
    }
    while (v134);
  }
  uint64_t v135 = (void *)v154;
  *(void *)&long long v154 = 0;
  if (v135) {
    operator delete(v135);
  }
}

void sub_E91AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a17);
  sub_E8CCE4((void *)(v20 - 208));
  _Unwind_Resume(a1);
}

void sub_E91BF4(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = (void **)sub_68EA4(a1);
  uint64_t v8 = v3;
  unint64_t v9 = (char *)v3[1];
  uint64_t v10 = 0;
  if (v9 != *v3)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (v9 - (unsigned char *)*v3) / 80;
    double v13 = INFINITY;
    uint64_t v14 = 16;
    do
    {
      sub_3B8BC4((unsigned int **)((char *)*v8 + v14), a2, 0, 0, (uint64_t)&v28, v4, v5, v6, v7);
      unint64_t v4 = v28;
      if (*(double *)&v28 < v13)
      {
        uint64_t v10 = v11;
        double v13 = *(double *)&v28;
      }
      ++v11;
      v14 += 80;
    }
    while (v12 != v11);
    unint64_t v9 = (char *)*v8;
  }
  int v15 = &v9[80 * v10];
  long long v16 = *((_OWORD *)v9 + 1);
  long long v30 = *(_OWORD *)v9;
  uint64_t v17 = *((void *)v9 + 4);
  *((void *)v9 + 3) = 0;
  *((void *)v9 + 4) = 0;
  *((void *)v9 + 2) = 0;
  long long v18 = *(_OWORD *)(v9 + 56);
  long long v28 = *(_OWORD *)(v9 + 40);
  v29[0] = v18;
  *(_DWORD *)((char *)v29 + 15) = *(_DWORD *)(v9 + 71);
  long long v19 = *((_OWORD *)v15 + 1);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v15;
  *((_OWORD *)v9 + 1) = v19;
  *((void *)v9 + 4) = *((void *)v15 + 4);
  *((void *)v15 + 3) = 0;
  *((void *)v15 + 4) = 0;
  long long v20 = *(_OWORD *)(v15 + 40);
  long long v21 = *(_OWORD *)(v15 + 56);
  *(_DWORD *)(v9 + 71) = *(_DWORD *)(v15 + 71);
  *(_OWORD *)(v9 + 56) = v21;
  *(_OWORD *)(v9 + 40) = v20;
  *(_OWORD *)int v15 = v30;
  *((_OWORD *)v15 + 1) = v16;
  *((void *)v15 + 4) = v17;
  long long v22 = v28;
  long long v23 = v29[0];
  *(_DWORD *)(v15 + 71) = *(_DWORD *)((char *)v29 + 15);
  *(_OWORD *)(v15 + 56) = v23;
  *(_OWORD *)(v15 + 40) = v22;
  int v24 = v8[1];
  unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((v24 - (unsigned char *)*v8) >> 4);
  if (v24 == *v8)
  {
    sub_E93980(v8, 1 - v25);
  }
  else if (v25 >= 2)
  {
    uint64_t v26 = (uint64_t)*v8 + 80;
    while (v24 != (unsigned char *)v26)
    {
      long long v27 = (void *)*((void *)v24 - 8);
      if (v27)
      {
        *((void *)v24 - 7) = v27;
        operator delete(v27);
      }
      v24 -= 80;
    }
    v8[1] = (void *)v26;
  }
}

int *sub_E91DD4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t result = (int *)sub_2E1FA4(a1, a2, 1);
  if (!result
    || (uint64_t v8 = (unsigned __int16 *)((char *)result - *result), *v8 < 5u)
    || (uint64_t v9 = v8[2]) == 0
    || (uint64_t result = (int *)((char *)result + v9 + *(unsigned int *)((char *)result + v9)), *result <= HIDWORD(a2))
    || (uint64_t result = (int *)sub_2E2AB8(result, a2)) == 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  uint64_t v10 = (unsigned __int16 *)((char *)result - *result);
  unsigned int v11 = *v10;
  if (a3)
  {
    if (v11 < 0xF) {
      goto LABEL_17;
    }
    unsigned int v12 = v10[7];
    if (!v12) {
      goto LABEL_17;
    }
  }
  else
  {
    if (v11 < 0xD) {
      goto LABEL_17;
    }
    unsigned int v12 = v10[6];
    if (!v12) {
      goto LABEL_17;
    }
  }
  double v13 = (unsigned int *)((char *)result + v12 + *(int *)((char *)result + v12));
  uint64_t v14 = *v13;
  if (v14)
  {
    uint64_t v15 = v14;
    long long v16 = operator new(8 * v14);
    *(void *)&long long v20 = v16;
    *((void *)&v20 + 1) = v16;
    long long v21 = &v16[v15];
    uint64_t v17 = (uint64_t *)(v13 + 1);
    do
    {
      uint64_t v22 = *v17;
      uint64_t result = (int *)sub_E93F48((unint64_t *)&v20, v16, &v22);
      long long v16 = result + 2;
      ++v17;
      --v15;
    }
    while (v15 * 8);
    long long v18 = v20;
    long long v19 = v21;
    goto LABEL_18;
  }
LABEL_17:
  long long v19 = 0;
  long long v18 = 0uLL;
LABEL_18:
  *(_OWORD *)a4 = v18;
  a4[2] = v19;
  return result;
}

void sub_E91F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E91F40(uint64_t a1, unint64_t a2, unsigned int *a3, unsigned int *a4)
{
  double v7 = sub_2E1FA4(a1, a2, 1);
  if (v7
    && (uint64_t v8 = &v7[-*(int *)v7], *(unsigned __int16 *)v8 >= 5u)
    && (uint64_t v9 = *((unsigned __int16 *)v8 + 2)) != 0
    && (uint64_t v10 = &v7[v9 + *(unsigned int *)&v7[v9]], *(_DWORD *)v10 > HIDWORD(a2))
    && (unsigned int v11 = (int *)sub_2E2AB8(v10, a2)) != 0)
  {
    unsigned int v12 = (unsigned int *)((char *)v11 + *(unsigned __int16 *)((char *)v11 - *v11 + 8));
    unsigned int v14 = *v12;
    unsigned int v13 = v12[1];
    if (v13 >= 0xFFFFFFFE) {
      unsigned int v15 = -2;
    }
    else {
      unsigned int v15 = v13;
    }
  }
  else
  {
    unsigned int v14 = -1;
    unsigned int v15 = -1;
  }
  unsigned int v16 = *a4;
  unsigned int v17 = a4[1];
  uint64_t v19 = *a3;
  uint64_t v18 = a3[1];
  long double v20 = exp((double)((v18 >> 1) + (v15 >> 1)) * -6.28318531 / 4294967300.0 + 3.14159265);
  long double v21 = atan((v20 + -1.0 / v20) * 0.5);
  double v22 = cos(v21 * 57.2957795 / 180.0 * 3.14159265)
      * 0.00932288077
      * (sqrt((double)((v19 - v14) * (v19 - v14) + (v18 - v15) * (v18 - (unint64_t)v15)))
       / 100.0
       * 100.0)
      * 100.0;
  if (v22 >= 0.0)
  {
    double v23 = v22;
    if (v22 >= 4.50359963e15) {
      goto LABEL_18;
    }
    uint64_t v24 = (uint64_t)(v22 + v22) + 1;
  }
  else
  {
    double v23 = v22;
    if (v22 <= -4.50359963e15) {
      goto LABEL_18;
    }
    uint64_t v24 = (uint64_t)(v22 + v22);
    if (v24 >= 1) {
      --v24;
    }
  }
  double v23 = (double)(v24 >> 1);
LABEL_18:
  if (v23 >= 9.22337204e18)
  {
    uint64_t v26 = 0x7FFFFFFFFFFFFFFELL;
    goto LABEL_29;
  }
  if (v22 >= 0.0)
  {
    if (v22 < 4.50359963e15)
    {
      uint64_t v25 = (uint64_t)(v22 + v22) + 1;
LABEL_27:
      double v22 = (double)(v25 >> 1);
    }
  }
  else if (v22 > -4.50359963e15)
  {
    uint64_t v25 = (uint64_t)(v22 + v22);
    if (v25 >= 1) {
      --v25;
    }
    goto LABEL_27;
  }
  uint64_t v26 = (uint64_t)v22;
LABEL_29:
  if (((double)v14 - (double)v16) * ((double)v18 - (double)v17)
     - ((double)v15 - (double)v17) * ((double)v19 - (double)v16) > 0.0)
    return v26;
  else {
    return -v26;
  }
}

void sub_E921B8(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 104)
  {
    uint64_t v5 = *(void *)(i - 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(i - 16);
      double v7 = *(void **)(i - 24);
      if (v6 != v5)
      {
        do
        {
          uint64_t v8 = *(void **)(v6 - 64);
          if (v8)
          {
            *(void *)(v6 - 56) = v8;
            operator delete(v8);
          }
          v6 -= 96;
        }
        while (v6 != v5);
        double v7 = *(void **)(i - 24);
      }
      *(void *)(i - 16) = v5;
      operator delete(v7);
    }
    uint64_t v9 = *(void **)(i - 48);
    if (v9)
    {
      do
      {
        uint64_t v10 = (void *)*v9;
        operator delete(v9);
        uint64_t v9 = v10;
      }
      while (v10);
    }
    unsigned int v11 = *(void **)(i - 64);
    *(void *)(i - 64) = 0;
    if (v11) {
      operator delete(v11);
    }
  }
  *(void *)(a1 + 8) = a2;
}

char *sub_E9227C@<X0>(char *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>, unint64_t a7@<D3>)
{
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  uint64_t v8 = *(void *)result;
  uint64_t v9 = *((void *)result + 1) - *(void *)result;
  if (!v9) {
    goto LABEL_71;
  }
  double v10 = (double)a2;
  double v11 = (double)a2 / 100.0;
  if (v11 <= 0.0) {
    goto LABEL_71;
  }
  unsigned int v13 = result;
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 2);
  if (a4)
  {
    uint64_t v15 = -1;
    unint64_t v16 = 1;
    double v17 = 0.0;
    while (1)
    {
      if (a3) {
        unint64_t v20 = v16 - 1;
      }
      else {
        unint64_t v20 = v14 + v15;
      }
      long double v21 = (_DWORD *)(v8 + 12 * v20);
      uint64_t v22 = *(void *)(a6 + 8);
      if (*(void *)a6 == v22)
      {
        uint64_t result = sub_30C0C((char **)a6, (uint64_t *)(v8 + 12 * v20));
      }
      else
      {
        uint64_t v23 = *(void *)(v22 - 12);
        int v65 = *(_DWORD *)(v22 - 4);
        uint64_t v64 = v23;
        if (!a5 || v65 == 0x7FFFFFFF || (int v24 = *(_DWORD *)(v8 + 12 * v20 + 8), v24 == 0x7FFFFFFF)) {
          int v25 = 0;
        }
        else {
          int v25 = (int)fabs((double)(v65 - v24));
        }
        unint64_t v26 = HIDWORD(v64) - (unint64_t)*(unsigned int *)(v8 + 12 * v20 + 4);
        double v27 = sqrt((double)((v23 - (unint64_t)*v21)
                          * (v23 - (unint64_t)*v21)
                          + v26 * v26
                          + v25 * (uint64_t)v25))
            / 100.0;
        double v28 = v17 + v27;
        if (v17 + v27 > v11) {
          goto LABEL_44;
        }
        uint64_t result = sub_30C0C((char **)a6, (uint64_t *)(v8 + 12 * v20));
        double v17 = v28;
      }
      uint64_t v8 = *(void *)v13;
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 + 1) - *(void *)v13) >> 2);
      BOOL v18 = v16++ >= v14;
      --v15;
      if (v18 || v17 >= v11) {
        goto LABEL_71;
      }
    }
  }
  if ((a3 & 1) == 0)
  {
    double v17 = 0.0;
    uint64_t v34 = -1;
    unint64_t v35 = 1;
    do
    {
      long double v21 = (_DWORD *)(v8 + 12 * (v14 + v34));
      uint64_t v37 = *(void *)(a6 + 8);
      if (*(void *)a6 == v37)
      {
        uint64_t result = sub_30C0C((char **)a6, (uint64_t *)(v8 + 12 * (v14 + v34)));
      }
      else
      {
        uint64_t v38 = *(void *)(v37 - 12);
        int v65 = *(_DWORD *)(v37 - 4);
        uint64_t v64 = v38;
        sub_33150((uint64_t)&v64, (unsigned int *)(v8 + 12 * (v14 + v34)), v10);
        double v39 = v17 + v27;
        if (v17 + v27 > v11)
        {
          unint64_t v20 = v14 + v34;
          double v40 = 0.0;
          if (v27 > 0.0) {
            goto LABEL_45;
          }
          goto LABEL_46;
        }
        uint64_t result = sub_30C0C((char **)a6, (uint64_t *)(v8 + 12 * (v14 + v34)));
        double v17 = v39;
      }
      uint64_t v8 = *(void *)v13;
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 + 1) - *(void *)v13) >> 2);
      BOOL v18 = v35++ >= v14;
      --v34;
    }
    while (!v18 && v17 < v11);
    goto LABEL_71;
  }
  uint64_t v29 = 0;
  unint64_t v20 = 0;
  double v17 = 0.0;
  while (1)
  {
    uint64_t v31 = *(void *)(a6 + 8);
    if (*(void *)a6 != v31) {
      break;
    }
    uint64_t result = sub_30C0C((char **)a6, (uint64_t *)(v8 + v29));
LABEL_25:
    ++v20;
    uint64_t v8 = *(void *)v13;
    v29 += 12;
    if (v20 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 + 1) - *(void *)v13) >> 2) || v17 >= v11) {
      goto LABEL_71;
    }
  }
  uint64_t v32 = *(void *)(v31 - 12);
  int v65 = *(_DWORD *)(v31 - 4);
  uint64_t v64 = v32;
  sub_33150((uint64_t)&v64, (unsigned int *)(v8 + v29), v10);
  double v33 = v17 + v27;
  if (v17 + v27 <= v11)
  {
    uint64_t result = sub_30C0C((char **)a6, (uint64_t *)(v8 + v29));
    double v17 = v33;
    goto LABEL_25;
  }
  long double v21 = (_DWORD *)(v8 + v29);
LABEL_44:
  double v40 = 0.0;
  if (v27 > 0.0) {
LABEL_45:
  }
    double v40 = (v11 - v17) / v27;
LABEL_46:
  LODWORD(v27) = *v21;
  *(double *)&unint64_t v41 = (double)*(unint64_t *)&v27;
  double v42 = v40 * *(double *)&v41;
  LODWORD(a7) = HIDWORD(v64);
  LODWORD(v41) = v64;
  double v43 = (double)v41;
  double v44 = 1.0 - v40;
  *(double *)&unint64_t v45 = v42 + (1.0 - v40) * v43 + 0.5;
  uint64_t v46 = *(double *)&v45;
  LODWORD(v45) = *(_DWORD *)(v8 + 12 * v20 + 4);
  LODWORD(v47) = (v40 * (double)v45 + (1.0 - v40) * (double)a7 + 0.5);
  int v48 = 0x7FFFFFFF;
  if (v65 != 0x7FFFFFFF)
  {
    int v49 = *(_DWORD *)(v8 + 12 * v20 + 8);
    if (v49 != 0x7FFFFFFF)
    {
      double v50 = v40 * (double)v49;
      if (v50 >= 0.0)
      {
        if (v50 < 4.50359963e15)
        {
          uint64_t v51 = (uint64_t)(v50 + v50) + 1;
          goto LABEL_57;
        }
      }
      else if (v50 > -4.50359963e15)
      {
        uint64_t v51 = (uint64_t)(v50 + v50);
        if (v51 >= 1) {
          --v51;
        }
LABEL_57:
        double v50 = (double)(v51 >> 1);
      }
      double v52 = v44 * (double)v65;
      if (v52 >= 0.0)
      {
        if (v52 < 4.50359963e15)
        {
          uint64_t v53 = (uint64_t)(v52 + v52) + 1;
          goto LABEL_65;
        }
      }
      else if (v52 > -4.50359963e15)
      {
        uint64_t v53 = (uint64_t)(v52 + v52);
        if (v53 >= 1) {
          --v53;
        }
LABEL_65:
        double v52 = (double)(v53 >> 1);
      }
      int v48 = (int)v52 + (int)v50;
    }
  }
  if (v47 >= 0xFFFFFFFE) {
    uint64_t v47 = 4294967294;
  }
  else {
    uint64_t v47 = v47;
  }
  uint64_t v62 = v46 | (v47 << 32);
  int v63 = v48;
  uint64_t result = sub_30C0C((char **)a6, &v62);
LABEL_71:
  if ((a3 & 1) == 0)
  {
    long double v55 = *(char **)a6;
    uint64_t v54 = *(void *)(a6 + 8);
    if (*(void *)a6 != v54)
    {
      unint64_t v56 = v54 - 12;
      if (v56 > (unint64_t)v55)
      {
        uint64_t v57 = v55 + 12;
        do
        {
          int v58 = *((_DWORD *)v57 - 1);
          uint64_t v59 = *(void *)(v57 - 12);
          int v60 = *(_DWORD *)(v56 + 8);
          *(void *)(v57 - 12) = *(void *)v56;
          *((_DWORD *)v57 - 1) = v60;
          *(void *)unint64_t v56 = v59;
          *(_DWORD *)(v56 + 8) = v58;
          v56 -= 12;
          BOOL v18 = (unint64_t)v57 >= v56;
          v57 += 12;
        }
        while (!v18);
      }
    }
  }
  return result;
}

void sub_E9275C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_E92790(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 104)
  {
    uint64_t v5 = *(void *)(i - 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(i - 16);
      double v7 = *(void **)(i - 24);
      if (v6 != v5)
      {
        do
        {
          uint64_t v8 = *(void **)(v6 - 64);
          if (v8)
          {
            *(void *)(v6 - 56) = v8;
            operator delete(v8);
          }
          v6 -= 80;
        }
        while (v6 != v5);
        double v7 = *(void **)(i - 24);
      }
      *(void *)(i - 16) = v5;
      operator delete(v7);
    }
    uint64_t v9 = *(void **)(i - 48);
    if (v9)
    {
      do
      {
        double v10 = (void *)*v9;
        operator delete(v9);
        uint64_t v9 = v10;
      }
      while (v10);
    }
    double v11 = *(void **)(i - 64);
    *(void *)(i - 64) = 0;
    if (v11) {
      operator delete(v11);
    }
  }
  *(void *)(a1 + 8) = a2;
}

char *sub_E92854(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  if (0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v6 = 0x276276276276276;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x276276276276276) {
      sub_188D718();
    }
    double v7 = (char *)operator new(104 * v6);
  }
  else
  {
    double v7 = 0;
  }
  uint64_t v8 = &v7[104 * v3];
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
  *((_OWORD *)v8 + 1) = v9;
  *((_DWORD *)v8 + 8) = *(_DWORD *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v8 + 5) = v10;
  *((void *)v8 + 6) = v11;
  uint64_t v12 = *(void *)(a2 + 56);
  *((void *)v8 + 7) = v12;
  uint64_t v13 = *(void *)(a2 + 64);
  *((void *)v8 + 8) = v13;
  *((_DWORD *)v8 + 18) = *(_DWORD *)(a2 + 72);
  if (v13)
  {
    unint64_t v14 = *(void *)(v12 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      BOOL v16 = v14 >= v11;
      unint64_t v15 = v14 % v11;
      if (!v16) {
        unint64_t v15 = v14;
      }
    }
    else
    {
      unint64_t v15 = v14 & (v11 - 1);
    }
    *(void *)(v10 + 8 * v15) = v8 + 56;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  double v17 = &v7[104 * v6];
  BOOL v18 = &v7[104 * v3];
  *((_OWORD *)v18 + 5) = *(_OWORD *)(a2 + 80);
  *((void *)v18 + 12) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  uint64_t v19 = v8 + 104;
  unint64_t v20 = (char *)*a1;
  long double v21 = (char *)a1[1];
  if (v21 == *a1)
  {
    *a1 = v8;
    a1[1] = v19;
    a1[2] = v17;
    if (!v21) {
      return v19;
    }
    goto LABEL_43;
  }
  uint64_t v22 = 0;
  do
  {
    int v24 = &v8[v22];
    int v25 = &v21[v22];
    long long v26 = *(_OWORD *)&v21[v22 - 104];
    long long v27 = *(_OWORD *)&v21[v22 - 88];
    *((_DWORD *)v24 - 18) = *(_DWORD *)&v21[v22 - 72];
    *(_OWORD *)(v24 - 88) = v27;
    *(_OWORD *)(v24 - 104) = v26;
    uint64_t v28 = *(void *)&v21[v22 - 64];
    *((void *)v25 - 8) = 0;
    *((void *)v24 - 8) = v28;
    *((void *)v24 - 7) = *(void *)&v21[v22 - 56];
    *((void *)v25 - 7) = 0;
    uint64_t v29 = *(void *)&v21[v22 - 48];
    *(void *)&v8[v22 - 48] = v29;
    uint64_t v30 = *(void *)&v21[v22 - 40];
    *((void *)v24 - 5) = v30;
    *((_DWORD *)v24 - 8) = *(_DWORD *)&v21[v22 - 32];
    if (v30)
    {
      unint64_t v23 = *(void *)(v29 + 8);
      unint64_t v31 = *((void *)v24 - 7);
      if ((v31 & (v31 - 1)) != 0)
      {
        if (v23 >= v31) {
          v23 %= v31;
        }
      }
      else
      {
        v23 &= v31 - 1;
      }
      *(void *)(v28 + 8 * v23) = &v8[v22 - 48];
      *(void *)&v21[v22 - 48] = 0;
      *(void *)&v21[v22 - 40] = 0;
    }
    *((void *)v24 - 3) = 0;
    *((void *)v24 - 2) = 0;
    *((void *)v24 - 1) = 0;
    *(_OWORD *)(v24 - 24) = *(_OWORD *)(v25 - 24);
    *((void *)v24 - 1) = *((void *)v25 - 1);
    *((void *)v25 - 3) = 0;
    *((void *)v25 - 2) = 0;
    *((void *)v25 - 1) = 0;
    v22 -= 104;
  }
  while (&v21[v22] != v20);
  uint64_t v32 = (char *)*a1;
  long double v21 = (char *)a1[1];
  *a1 = &v8[v22];
  a1[1] = v19;
  a1[2] = v17;
  if (v21 != v32)
  {
    do
    {
      uint64_t v33 = *((void *)v21 - 3);
      if (v33)
      {
        uint64_t v34 = *((void *)v21 - 2);
        unint64_t v35 = (void *)*((void *)v21 - 3);
        if (v34 != v33)
        {
          do
          {
            uint64_t v36 = *(void **)(v34 - 64);
            if (v36)
            {
              *(void *)(v34 - 56) = v36;
              operator delete(v36);
            }
            v34 -= 96;
          }
          while (v34 != v33);
          unint64_t v35 = (void *)*((void *)v21 - 3);
        }
        *((void *)v21 - 2) = v33;
        operator delete(v35);
      }
      uint64_t v37 = (void *)*((void *)v21 - 6);
      if (v37)
      {
        do
        {
          uint64_t v38 = (void *)*v37;
          operator delete(v37);
          uint64_t v37 = v38;
        }
        while (v38);
      }
      double v39 = (void *)*((void *)v21 - 8);
      *((void *)v21 - 8) = 0;
      if (v39) {
        operator delete(v39);
      }
      v21 -= 104;
    }
    while (v21 != v32);
    long double v21 = v32;
  }
  if (v21) {
LABEL_43:
  }
    operator delete(v21);
  return v19;
}

uint64_t sub_E92B58(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_E92B90(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 104;
    uint64_t v5 = *(void *)(i - 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(i - 16);
      double v7 = *(void **)(i - 24);
      if (v6 != v5)
      {
        do
        {
          uint64_t v8 = *(void **)(v6 - 64);
          if (v8)
          {
            *(void *)(v6 - 56) = v8;
            operator delete(v8);
          }
          v6 -= 96;
        }
        while (v6 != v5);
        double v7 = *(void **)(i - 24);
      }
      *(void *)(i - 16) = v5;
      operator delete(v7);
    }
    long long v9 = *(void **)(i - 48);
    if (v9)
    {
      do
      {
        uint64_t v10 = (void *)*v9;
        operator delete(v9);
        long long v9 = v10;
      }
      while (v10);
    }
    unint64_t v11 = *(void **)(i - 64);
    *(void *)(i - 64) = 0;
    if (v11) {
      operator delete(v11);
    }
  }
}

char *sub_E92C5C(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  if (0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v6 = 0x276276276276276;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x276276276276276) {
      sub_188D718();
    }
    double v7 = (char *)operator new(104 * v6);
  }
  else
  {
    double v7 = 0;
  }
  unint64_t v31 = &v7[104 * v3];
  uint64_t v33 = &v7[104 * v6];
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v31 = *(_OWORD *)a2;
  *((_OWORD *)v31 + 1) = v8;
  *((_DWORD *)v31 + 8) = *(_DWORD *)(a2 + 32);
  sub_E92F94((uint64_t)(v31 + 40), a2 + 40);
  sub_E933FC((void *)v31 + 10, (uint64_t *)(a2 + 80));
  long long v9 = v31;
  uint64_t v10 = (char *)*a1;
  unint64_t v11 = (char *)a1[1];
  if (v11 == *a1)
  {
    uint64_t v22 = (char *)a1[1];
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      unint64_t v14 = &v31[v12];
      unint64_t v15 = &v11[v12];
      long long v16 = *(_OWORD *)&v11[v12 - 104];
      long long v17 = *(_OWORD *)&v11[v12 - 88];
      *((_DWORD *)v14 - 18) = *(_DWORD *)&v11[v12 - 72];
      *(_OWORD *)(v14 - 88) = v17;
      *(_OWORD *)(v14 - 104) = v16;
      uint64_t v18 = *(void *)&v11[v12 - 64];
      *((void *)v15 - 8) = 0;
      *((void *)v14 - 8) = v18;
      *((void *)v14 - 7) = *(void *)&v11[v12 - 56];
      *((void *)v15 - 7) = 0;
      uint64_t v19 = *(void *)&v11[v12 - 48];
      *(void *)&v31[v12 - 48] = v19;
      uint64_t v20 = *(void *)&v11[v12 - 40];
      *((void *)v14 - 5) = v20;
      *((_DWORD *)v14 - 8) = *(_DWORD *)&v11[v12 - 32];
      if (v20)
      {
        unint64_t v13 = *(void *)(v19 + 8);
        unint64_t v21 = *((void *)v14 - 7);
        if ((v21 & (v21 - 1)) != 0)
        {
          if (v13 >= v21) {
            v13 %= v21;
          }
        }
        else
        {
          v13 &= v21 - 1;
        }
        *(void *)(v18 + 8 * v13) = &v31[v12 - 48];
        *(void *)&v11[v12 - 48] = 0;
        *(void *)&v11[v12 - 40] = 0;
      }
      *((void *)v14 - 3) = 0;
      *((void *)v14 - 2) = 0;
      *((void *)v14 - 1) = 0;
      *(_OWORD *)(v14 - 24) = *(_OWORD *)(v15 - 24);
      *((void *)v14 - 1) = *((void *)v15 - 1);
      *((void *)v15 - 3) = 0;
      *((void *)v15 - 2) = 0;
      *((void *)v15 - 1) = 0;
      v12 -= 104;
    }
    while (&v11[v12] != v10);
    uint64_t v22 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    long long v9 = &v31[v12];
  }
  *a1 = v9;
  a1[1] = v31 + 104;
  a1[2] = v33;
  if (v11 == v22)
  {
    if (v11) {
LABEL_24:
    }
      operator delete(v11);
  }
  else
  {
    do
    {
      uint64_t v32 = v11 - 104;
      uint64_t v24 = *((void *)v11 - 3);
      if (v24)
      {
        uint64_t v25 = *((void *)v11 - 2);
        long long v26 = (void *)*((void *)v11 - 3);
        if (v25 != v24)
        {
          do
          {
            long long v27 = *(void **)(v25 - 64);
            if (v27)
            {
              *(void *)(v25 - 56) = v27;
              operator delete(v27);
            }
            v25 -= 96;
          }
          while (v25 != v24);
          long long v26 = (void *)*((void *)v11 - 3);
        }
        *((void *)v11 - 2) = v24;
        operator delete(v26);
      }
      uint64_t v28 = (void *)*((void *)v11 - 6);
      if (v28)
      {
        do
        {
          uint64_t v29 = (void *)*v28;
          operator delete(v28);
          uint64_t v28 = v29;
        }
        while (v29);
      }
      uint64_t v30 = (void *)*((void *)v11 - 8);
      *((void *)v11 - 8) = 0;
      if (v30) {
        operator delete(v30);
      }
      v11 -= 104;
    }
    while (v32 != v22);
    unint64_t v11 = v22;
    if (v22) {
      goto LABEL_24;
    }
  }
  return v31 + 104;
}

uint64_t sub_E92F94(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_B6C0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_E930D8(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_E930B0(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_E930C4(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void *sub_E930D8(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            uint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  unint64_t v14 = operator new(0x20uLL);
  *unint64_t v14 = 0;
  v14[1] = v6;
  *((_OWORD *)v14 + 1) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *unint64_t v14 = *v18;
LABEL_61:
      *uint64_t v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *unint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_E933E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_E933FC(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 5);
    if (v7 >= 0x2AAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint8x8_t v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[96 * v7];
    a1[1] = sub_E934D4(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_E934A8(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  if (*(void *)v1) {
    sub_20B1050((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E934D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      long long v10 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)a4 = *(_OWORD *)v6;
      *(_OWORD *)(a4 + 16) = v10;
      *(void *)(a4 + 40) = 0;
      *(void *)(a4 + 48) = 0;
      *(void *)(a4 + 32) = 0;
      uint64_t v12 = *(unsigned char **)(v6 + 32);
      unint64_t v11 = *(unsigned char **)(v6 + 40);
      int64_t v13 = v11 - v12;
      if (v11 != v12)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v13 >> 2) >= 0x1555555555555556) {
          sub_2E00();
        }
        unint64_t v14 = (char *)operator new(v13);
        *(void *)(a4 + 32) = v14;
        *(void *)(a4 + 40) = v14;
        unint64_t v7 = &v14[4 * (v13 >> 2)];
        *(void *)(a4 + 48) = v7;
        memcpy(v14, v12, v13);
        *(void *)(a4 + 40) = v7;
      }
      long long v8 = *(_OWORD *)(v6 + 56);
      long long v9 = *(_OWORD *)(v6 + 72);
      *(_DWORD *)(a4 + 87) = *(_DWORD *)(v6 + 87);
      *(_OWORD *)(a4 + 72) = v9;
      *(_OWORD *)(a4 + 56) = v8;
      a4 += 96;
      v6 += 96;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_E935F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v11 = *(void **)(v9 + 32);
  if (v11)
  {
    *(void *)(v9 + 40) = v11;
    operator delete(v11);
  }
  sub_E93618((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_E93618(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 64);
      if (v5)
      {
        *(void *)(v3 - 56) = v5;
        operator delete(v5);
      }
      v3 -= 96;
    }
  }
  return a1;
}

char *sub_E9367C(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276) {
    sub_2E00();
  }
  if (0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x9D89D89D89D89D8ALL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x13B13B13B13B13BLL) {
    unint64_t v6 = 0x276276276276276;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x276276276276276) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(104 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  long long v8 = &v7[104 * v3];
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long v8 = *(_OWORD *)a2;
  *((_OWORD *)v8 + 1) = v9;
  *((_DWORD *)v8 + 8) = *(_DWORD *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = *(void *)(a2 + 48);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v8 + 5) = v10;
  *((void *)v8 + 6) = v11;
  uint64_t v12 = *(void *)(a2 + 56);
  *((void *)v8 + 7) = v12;
  uint64_t v13 = *(void *)(a2 + 64);
  *((void *)v8 + 8) = v13;
  *((_DWORD *)v8 + 18) = *(_DWORD *)(a2 + 72);
  if (v13)
  {
    unint64_t v14 = *(void *)(v12 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      BOOL v16 = v14 >= v11;
      unint64_t v15 = v14 % v11;
      if (!v16) {
        unint64_t v15 = v14;
      }
    }
    else
    {
      unint64_t v15 = v14 & (v11 - 1);
    }
    *(void *)(v10 + 8 * v15) = v8 + 56;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  uint64_t v17 = &v7[104 * v6];
  uint64_t v18 = &v7[104 * v3];
  *((_OWORD *)v18 + 5) = *(_OWORD *)(a2 + 80);
  *((void *)v18 + 12) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  BOOL v19 = v8 + 104;
  unint64_t v20 = (char *)*a1;
  unint64_t v21 = (char *)a1[1];
  if (v21 == *a1)
  {
    *a1 = v8;
    a1[1] = v19;
    a1[2] = v17;
    if (!v21) {
      return v19;
    }
    goto LABEL_43;
  }
  uint64_t v22 = 0;
  do
  {
    uint8x8_t v24 = &v8[v22];
    uint64_t v25 = &v21[v22];
    long long v26 = *(_OWORD *)&v21[v22 - 104];
    long long v27 = *(_OWORD *)&v21[v22 - 88];
    *((_DWORD *)v24 - 18) = *(_DWORD *)&v21[v22 - 72];
    *(_OWORD *)(v24 - 88) = v27;
    *(_OWORD *)(v24 - 104) = v26;
    uint64_t v28 = *(void *)&v21[v22 - 64];
    *((void *)v25 - 8) = 0;
    *((void *)v24 - 8) = v28;
    *((void *)v24 - 7) = *(void *)&v21[v22 - 56];
    *((void *)v25 - 7) = 0;
    uint64_t v29 = *(void *)&v21[v22 - 48];
    *(void *)&v8[v22 - 48] = v29;
    uint64_t v30 = *(void *)&v21[v22 - 40];
    *((void *)v24 - 5) = v30;
    *((_DWORD *)v24 - 8) = *(_DWORD *)&v21[v22 - 32];
    if (v30)
    {
      unint64_t v23 = *(void *)(v29 + 8);
      unint64_t v31 = *((void *)v24 - 7);
      if ((v31 & (v31 - 1)) != 0)
      {
        if (v23 >= v31) {
          v23 %= v31;
        }
      }
      else
      {
        v23 &= v31 - 1;
      }
      *(void *)(v28 + 8 * v23) = &v8[v22 - 48];
      *(void *)&v21[v22 - 48] = 0;
      *(void *)&v21[v22 - 40] = 0;
    }
    *((void *)v24 - 3) = 0;
    *((void *)v24 - 2) = 0;
    *((void *)v24 - 1) = 0;
    *(_OWORD *)(v24 - 24) = *(_OWORD *)(v25 - 24);
    *((void *)v24 - 1) = *((void *)v25 - 1);
    *((void *)v25 - 3) = 0;
    *((void *)v25 - 2) = 0;
    *((void *)v25 - 1) = 0;
    v22 -= 104;
  }
  while (&v21[v22] != v20);
  uint64_t v32 = (char *)*a1;
  unint64_t v21 = (char *)a1[1];
  *a1 = &v8[v22];
  a1[1] = v19;
  a1[2] = v17;
  if (v21 != v32)
  {
    do
    {
      uint64_t v33 = *((void *)v21 - 3);
      if (v33)
      {
        uint64_t v34 = *((void *)v21 - 2);
        unint64_t v35 = (void *)*((void *)v21 - 3);
        if (v34 != v33)
        {
          do
          {
            uint64_t v36 = *(void **)(v34 - 64);
            if (v36)
            {
              *(void *)(v34 - 56) = v36;
              operator delete(v36);
            }
            v34 -= 80;
          }
          while (v34 != v33);
          unint64_t v35 = (void *)*((void *)v21 - 3);
        }
        *((void *)v21 - 2) = v33;
        operator delete(v35);
      }
      uint64_t v37 = (void *)*((void *)v21 - 6);
      if (v37)
      {
        do
        {
          uint64_t v38 = (void *)*v37;
          operator delete(v37);
          uint64_t v37 = v38;
        }
        while (v38);
      }
      double v39 = (void *)*((void *)v21 - 8);
      *((void *)v21 - 8) = 0;
      if (v39) {
        operator delete(v39);
      }
      v21 -= 104;
    }
    while (v21 != v32);
    unint64_t v21 = v32;
  }
  if (v21) {
LABEL_43:
  }
    operator delete(v21);
  return v19;
}

void sub_E93980(void **a1, unint64_t a2)
{
  unint64_t v4 = (char *)a1[1];
  uint64_t v5 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v5 - v4) >> 4) >= a2)
  {
    if (a2)
    {
      unint64_t v11 = &v4[80 * a2];
      do
      {
        *(_OWORD *)unint64_t v4 = 0uLL;
        *((_OWORD *)v4 + 1) = 0uLL;
        *((_OWORD *)v4 + 2) = 0uLL;
        *((_OWORD *)v4 + 3) = 0uLL;
        *((_OWORD *)v4 + 4) = 0uLL;
        *((_DWORD *)v4 + 1) = -1;
        *((_DWORD *)v4 + 3) = -1;
        *((void *)v4 + 2) = 0;
        *((void *)v4 + 3) = 0;
        *((void *)v4 + 4) = 0;
        *((_WORD *)v4 + 20) = 0;
        *((void *)v4 + 6) = 0;
        *((void *)v4 + 7) = 0;
        *((void *)v4 + 8) = 0;
        *(_DWORD *)(v4 + 71) = 0;
        v4 += 80;
      }
      while (v4 != v11);
      unint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 4);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x333333333333333) {
      sub_2E00();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x199999999999999) {
      unint64_t v9 = 0x333333333333333;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x333333333333333) {
        sub_188D718();
      }
      uint64_t v10 = (char *)operator new(80 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v12 = &v10[80 * v6];
    uint64_t v13 = &v10[80 * v9];
    unint64_t v14 = &v12[80 * a2];
    unint64_t v15 = v12;
    do
    {
      *(_OWORD *)unint64_t v15 = 0uLL;
      *((_OWORD *)v15 + 1) = 0uLL;
      *((_OWORD *)v15 + 2) = 0uLL;
      *((_OWORD *)v15 + 3) = 0uLL;
      *((_OWORD *)v15 + 4) = 0uLL;
      *((_DWORD *)v15 + 1) = -1;
      *((_DWORD *)v15 + 3) = -1;
      *((void *)v15 + 2) = 0;
      *((void *)v15 + 3) = 0;
      *((void *)v15 + 4) = 0;
      *((_WORD *)v15 + 20) = 0;
      *((void *)v15 + 6) = 0;
      *((void *)v15 + 7) = 0;
      *((void *)v15 + 8) = 0;
      *(_DWORD *)(v15 + 71) = 0;
      v15 += 80;
    }
    while (v15 != v14);
    BOOL v16 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
      if (!v17) {
        return;
      }
      goto LABEL_29;
    }
    uint64_t v18 = 0;
    do
    {
      BOOL v19 = &v12[v18];
      unint64_t v20 = &v17[v18];
      *((_OWORD *)v19 - 5) = *(_OWORD *)&v17[v18 - 80];
      *((void *)v19 - 7) = 0;
      *((void *)v19 - 6) = 0;
      *((void *)v19 - 8) = 0;
      *((_OWORD *)v19 - 4) = *(_OWORD *)&v17[v18 - 64];
      *((void *)v19 - 6) = *(void *)&v17[v18 - 48];
      *((void *)v20 - 8) = 0;
      *((void *)v20 - 7) = 0;
      *((void *)v20 - 6) = 0;
      long long v21 = *(_OWORD *)&v17[v18 - 40];
      long long v22 = *(_OWORD *)&v17[v18 - 24];
      *(_DWORD *)(v19 - 9) = *(_DWORD *)&v17[v18 - 9];
      *(_OWORD *)(v19 - 24) = v22;
      *(_OWORD *)(v19 - 40) = v21;
      v18 -= 80;
    }
    while (&v17[v18] != v16);
    unint64_t v23 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    *a1 = &v12[v18];
    a1[1] = v14;
    a1[2] = v13;
    if (v17 != v23)
    {
      do
      {
        uint8x8_t v24 = (void *)*((void *)v17 - 8);
        if (v24)
        {
          *((void *)v17 - 7) = v24;
          operator delete(v24);
        }
        v17 -= 80;
      }
      while (v17 != v23);
      uint64_t v17 = v23;
    }
    if (v17)
    {
LABEL_29:
      operator delete(v17);
    }
  }
}

char *sub_E93BD8(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  unint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)unint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      BOOL v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        BOOL v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        BOOL v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          BOOL v19 = (void *)(v5 + v21);
          long long v22 = (_OWORD *)(v5 + 16);
          unint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)unint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    unint64_t v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    unint64_t v31 = (char *)(8 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    unint64_t v31 = &v54[8 * (v53 >> 2)];
    uint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      long double v55 = &v54[8 * v53];
      operator delete(v30);
      uint64_t v32 = v55;
      uint64_t v34 = (char *)*a1;
      *(void *)unint64_t v31 = *a3;
      unint64_t v35 = v31 + 8;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(void *)unint64_t v31 = *a3;
  unint64_t v35 = v31 + 8;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    double v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    double v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    double v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    double v42 = v31 - 16;
    double v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)double v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    int v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
  }
  double v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_E93F30(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_E93F48(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  unint64_t v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)unint64_t v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      BOOL v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        BOOL v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        BOOL v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          BOOL v19 = (void *)(v5 + v21);
          long long v22 = (_OWORD *)(v5 + 16);
          unint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)unint64_t v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    unint64_t v31 = &v30[8 * v8];
    uint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    unint64_t v31 = (char *)(8 * v8);
    uint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    unint64_t v31 = &v54[8 * (v53 >> 2)];
    uint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      long double v55 = &v54[8 * v53];
      operator delete(v30);
      uint64_t v32 = v55;
      uint64_t v34 = (char *)*a1;
      *(void *)unint64_t v31 = *a3;
      unint64_t v35 = v31 + 8;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(void *)unint64_t v31 = *a3;
  unint64_t v35 = v31 + 8;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    double v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    double v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    double v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    double v42 = v31 - 16;
    double v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)double v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  uint64_t v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    int v49 = v9;
    size_t v50 = v47 - v9;
    uint64_t v51 = v32;
    memmove(v35, v49, v50);
    uint64_t v32 = v51;
  }
  double v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_E942A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_E942B8(unint64_t **a1, unint64_t **a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (*a1 != *a2 && v4 != (unint64_t *)((char *)*a2 - 12))
  {
    float64x2_t __p = 0;
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    p_p = (char **)&__p;
    do
    {
      v11.i64[0] = *v4;
      v11.i64[1] = HIDWORD(*v4);
      float64x2_t v28 = vcvtq_f64_u64(v11);
      sub_343E08(&p_p, &v28);
      unint64_t v4 = (unint64_t *)((char *)v4 + 12);
    }
    while (v4 != v5);
    *(double *)&unint64_t v12 = (double)a3;
    LODWORD(v12) = *((_DWORD *)*a1 + 1);
    long double v13 = exp(3.14159265 - (double)v12 * 6.28318531 / 4294967300.0);
    long double v14 = atan((v13 - 1.0 / v13) * 0.5);
    *(double *)&unint64_t v15 = 1.0 / cos(v14 * 57.2957795 / 180.0 * 3.14159265);
    double v16 = 0.00932288077 / *(double *)&v15;
    LODWORD(v15) = *((_DWORD *)v5 - 2);
    long double v17 = exp(3.14159265 - (double)v15 * 6.28318531 / 4294967300.0);
    long double v18 = atan((v17 - 1.0 / v17) * 0.5);
    long double v19 = cos(v18 * 57.2957795 / 180.0 * 3.14159265);
    sub_4607C((double **)&__p, (double)a3 / -100.0 / v16, (double)a4 / -100.0 / (0.00932288077 / (1.0 / v19)));
    uint64_t v20 = *a1;
    uint64_t v21 = (double *)__p;
    if (*a1 != *a2)
    {
      do
      {
        double v22 = *v21;
        double v23 = v21[1];
        v21 += 2;
        LODWORD(v24) = v23;
        if (v23 >= 0xFFFFFFFE) {
          uint64_t v24 = 4294967294;
        }
        else {
          uint64_t v24 = v24;
        }
        *uint64_t v20 = v22 | (unint64_t)(v24 << 32);
        uint64_t v20 = (unint64_t *)((char *)v20 + 12);
      }
      while (v20 != *a2);
      uint64_t v21 = (double *)__p;
    }
    if (v21)
    {
      unint64_t v26 = v21;
      operator delete(v21);
    }
  }
}

void sub_E944C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E944E0(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    unint64_t v5 = a3;
    unint64_t v6 = *(long long **)(a1 + 8);
    uint64_t v7 = a2;
    if (a3 != v6)
    {
      uint64_t v7 = a2;
      do
      {
        long long v9 = *v5;
        long long v10 = v5[1];
        *(_DWORD *)(v7 + 32) = *((_DWORD *)v5 + 8);
        *(_OWORD *)uint64_t v7 = v9;
        *(_OWORD *)(v7 + 16) = v10;
        sub_67501C(v7 + 40, (uint64_t *)v5 + 5);
        uint64x2_t v11 = (void **)(v7 + 80);
        uint64_t v12 = *(void *)(v7 + 80);
        if (v12)
        {
          uint64_t v13 = *(void *)(v7 + 88);
          uint64_t v8 = *(void **)(v7 + 80);
          if (v13 != v12)
          {
            do
            {
              long double v14 = *(void **)(v13 - 64);
              if (v14)
              {
                *(void *)(v13 - 56) = v14;
                operator delete(v14);
              }
              v13 -= 96;
            }
            while (v13 != v12);
            uint64_t v8 = *v11;
          }
          *(void *)(v7 + 88) = v12;
          operator delete(v8);
          *uint64x2_t v11 = 0;
          *(void *)(v7 + 88) = 0;
          *(void *)(v7 + 96) = 0;
        }
        *(_OWORD *)(v7 + 80) = v5[5];
        *(void *)(v7 + 96) = *((void *)v5 + 12);
        *((void *)v5 + 10) = 0;
        *((void *)v5 + 11) = 0;
        *((void *)v5 + 12) = 0;
        unint64_t v5 = (long long *)((char *)v5 + 104);
        v7 += 104;
      }
      while (v5 != v6);
    }
    sub_E921B8(a1, v7);
  }
  return a2;
}

long long *sub_E945EC(long long *a1, long long *a2)
{
  if (a1 == a2) {
    return a2;
  }
  uint64_t v3 = a1;
LABEL_3:
  if (*((void *)v3 + 1) != 0x7FFFFFFFFFFFFFFFLL && *((void *)v3 + 3) != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v5 = *((void *)v3 + 10);
    uint64_t v6 = *((void *)v3 + 11);
    if (v5 != v6)
    {
      while (*(void *)(v5 + 32) != *(void *)(v5 + 40))
      {
        v5 += 96;
        if (v5 == v6)
        {
          uint64_t v3 = (long long *)((char *)v3 + 104);
          if (v3 != a2) {
            goto LABEL_3;
          }
          return a2;
        }
      }
    }
  }
  if (v3 == a2) {
    return v3;
  }
  uint64_t v8 = (long long *)((char *)v3 + 104);
  if ((long long *)((char *)v3 + 104) == a2) {
    return v3;
  }
  uint64_t v7 = v3;
  do
  {
    long long v10 = v3;
    uint64_t v3 = v8;
    if (*((void *)v10 + 14) != 0x7FFFFFFFFFFFFFFFLL && *((void *)v10 + 16) != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v12 = *((void *)v10 + 23);
      uint64_t v13 = *((void *)v10 + 24);
      if (v12 != v13)
      {
        while (*(void *)(v12 + 32) != *(void *)(v12 + 40))
        {
          v12 += 96;
          if (v12 == v13)
          {
            long long v14 = *v3;
            long long v15 = v3[1];
            *((_DWORD *)v7 + 8) = *((_DWORD *)v3 + 8);
            *uint64_t v7 = v14;
            v7[1] = v15;
            sub_67501C((uint64_t)v7 + 40, (uint64_t *)v10 + 18);
            double v16 = (void **)(v7 + 5);
            uint64_t v17 = *((void *)v7 + 10);
            if (v17)
            {
              uint64_t v18 = *((void *)v7 + 11);
              long long v9 = (void *)*((void *)v7 + 10);
              if (v18 != v17)
              {
                do
                {
                  long double v19 = *(void **)(v18 - 64);
                  if (v19)
                  {
                    *(void *)(v18 - 56) = v19;
                    operator delete(v19);
                  }
                  v18 -= 96;
                }
                while (v18 != v17);
                long long v9 = *v16;
              }
              *((void *)v7 + 11) = v17;
              operator delete(v9);
              *double v16 = 0;
              *((void *)v7 + 11) = 0;
              *((void *)v7 + 12) = 0;
            }
            v7[5] = *(long long *)((char *)v10 + 184);
            *((void *)v7 + 12) = *((void *)v10 + 25);
            *((void *)v10 + 23) = 0;
            *((void *)v10 + 24) = 0;
            *((void *)v10 + 25) = 0;
            uint64_t v7 = (long long *)((char *)v7 + 104);
            break;
          }
        }
      }
    }
    uint64_t v8 = (long long *)((char *)v3 + 104);
  }
  while ((long long *)((char *)v3 + 104) != a2);
  return v7;
}

char *sub_E9478C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  long long v3 = 0uLL;
  if (result && (v4 = result, uint64_t v5 = *(unsigned int *)result, v5))
  {
    uint64_t v6 = (char *)operator new(32 * v5);
    uint64_t v7 = 0;
    *(void *)&long long v13 = v6;
    *((void *)&v13 + 1) = v6;
    long long v14 = &v6[32 * v5];
    do
    {
      uint64_t v8 = *(unsigned int *)&v4[v7 + 4];
      long long v9 = (unsigned __int16 *)&v4[v7 + v8 - *(int *)&v4[v7 + 4 + v8]];
      *(void *)&long long v10 = *(void *)&v4[v7 + 4 + v8 + v9[4]];
      *((void *)&v10 + 1) = *(void *)&v4[v7 + 4 + v8 + v9[5]];
      *(void *)&long long v11 = *(void *)&v4[v7 + 4 + v8 + v9[6]];
      *((void *)&v11 + 1) = *(void *)&v4[v7 + 4 + v8 + v9[7]];
      v15[0] = v10;
      v15[1] = v11;
      uint64_t result = sub_E948B0((char **)&v13, v6, v15);
      uint64_t v6 = result + 32;
      v7 += 4;
    }
    while (4 * v5 != v7);
    long long v3 = v13;
    uint64_t v12 = v14;
  }
  else
  {
    uint64_t v12 = 0;
  }
  *(_OWORD *)a2 = v3;
  *(void *)(a2 + 16) = v12;
  return result;
}

void sub_E94894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_E948B0(char **a1, char *a2, _OWORD *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFE0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      long long v24 = a3[1];
      *(_OWORD *)uint64_t v8 = *a3;
      *((_OWORD *)v8 + 1) = v24;
      a1[1] = v8 + 32;
    }
    else
    {
      long long v10 = v8 + 32;
      long long v11 = (long long *)(v5 - 32);
      uint64_t v12 = a1[1];
      if (v5 >= 0x20)
      {
        do
        {
          long long v13 = *v11;
          long long v14 = v11[1];
          v11 += 2;
          *(_OWORD *)uint64_t v12 = v13;
          *((_OWORD *)v12 + 1) = v14;
          v12 += 32;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10) {
        memmove((void *)(v5 - 32 * ((uint64_t)(v5 - (void)v10) >> 5)), v8, v5 - (void)v10);
      }
      long long v15 = a3[1];
      *(_OWORD *)uint64_t v8 = *a3;
      *((_OWORD *)v8 + 1) = v15;
    }
    return v8;
  }
  unint64_t v16 = ((uint64_t)(v5 - (void)v6) >> 5) + 1;
  if (v16 >> 59) {
    sub_2E00();
  }
  uint64_t v18 = v9 - (void)v6;
  if (v18 >> 4 > v16) {
    unint64_t v16 = v18 >> 4;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v16;
  }
  if (v19)
  {
    if (v19 >> 59) {
      sub_188D718();
    }
    uint64_t v20 = (char *)operator new(32 * v19);
    uint64_t v21 = v7 >> 5;
    double v22 = &v20[32 * (v7 >> 5)];
    double v23 = &v20[32 * v19];
    if (v7 >> 5 != v19) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  uint64_t v20 = 0;
  uint64_t v21 = v7 >> 5;
  double v22 = (char *)(32 * (v7 >> 5));
  double v23 = 0;
  if (!(v7 >> 5))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v26 = 1;
      }
      else {
        unint64_t v26 = v7 >> 4;
      }
      if (v26 >> 59) {
        sub_188D718();
      }
      uint64_t v27 = (char *)operator new(32 * v26);
      double v22 = &v27[32 * (v26 >> 2)];
      double v23 = &v27[32 * v26];
      if (v20)
      {
        operator delete(v20);
        uint64_t v6 = *a1;
      }
    }
    else
    {
      if (v21 >= -1) {
        unint64_t v25 = v21 + 1;
      }
      else {
        unint64_t v25 = v21 + 2;
      }
      v22 -= 32 * (v25 >> 1);
    }
  }
LABEL_31:
  long long v28 = a3[1];
  *(_OWORD *)double v22 = *a3;
  *((_OWORD *)v22 + 1) = v28;
  unint64_t v29 = v22;
  if (v6 != v8)
  {
    uint64_t v30 = v8;
    unint64_t v31 = v22;
    do
    {
      long long v32 = *((_OWORD *)v30 - 1);
      unint64_t v29 = v31 - 32;
      *((_OWORD *)v31 - 2) = *((_OWORD *)v30 - 2);
      *((_OWORD *)v31 - 1) = v32;
      v30 -= 32;
      v31 -= 32;
    }
    while (v30 != v6);
  }
  unint64_t v33 = a1[1];
  int64_t v34 = v33 - v8;
  if (v33 != v8) {
    memmove(v22 + 32, v8, v33 - v8);
  }
  unint64_t v35 = *a1;
  *a1 = v29;
  a1[1] = &v22[v34 + 32];
  a1[2] = v23;
  if (v35) {
    operator delete(v35);
  }
  return v22;
}

void sub_E94AE4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_E94AFC(void **a1, unint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      long long v11 = &v5[40 * a2];
      int64x2_t v12 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      do
      {
        *(void *)unint64_t v5 = 0;
        *((void *)v5 + 1) = 0;
        *((void *)v5 + 2) = -1;
        *(int64x2_t *)(v5 + 24) = v12;
        v5 += 40;
      }
      while (v5 != v11);
      unint64_t v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x333333333333333) {
      unint64_t v9 = 0x666666666666666;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x666666666666666) {
        sub_188D718();
      }
      long long v10 = (char *)operator new(40 * v9);
    }
    else
    {
      long long v10 = 0;
    }
    long long v13 = &v10[40 * v6];
    long long v14 = &v13[40 * a2];
    int64x2_t v15 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    unint64_t v16 = v13;
    do
    {
      *(void *)unint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = -1;
      *(int64x2_t *)(v16 + 24) = v15;
      v16 += 40;
    }
    while (v16 != v14);
    uint64_t v17 = (char *)*a1;
    if (v5 != *a1)
    {
      do
      {
        long long v18 = *(_OWORD *)(v5 - 40);
        long long v19 = *(_OWORD *)(v5 - 24);
        *((void *)v13 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v13 - 24) = v19;
        *(_OWORD *)(v13 - 40) = v18;
        v13 -= 40;
        v5 -= 40;
      }
      while (v5 != v17);
      unint64_t v5 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v14;
    a1[2] = &v10[40 * v9];
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void sub_E94CBC(void **a1, unint64_t a2)
{
  unint64_t v4 = (char *)a1[1];
  unint64_t v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 5) >= a2)
  {
    if (a2)
    {
      long long v11 = &v4[96 * a2];
      do
      {
        *(_OWORD *)unint64_t v4 = 0uLL;
        *((_OWORD *)v4 + 1) = 0uLL;
        *((_OWORD *)v4 + 2) = 0uLL;
        *((_OWORD *)v4 + 3) = 0uLL;
        *((_OWORD *)v4 + 4) = 0uLL;
        *((_OWORD *)v4 + 5) = 0uLL;
        *((_DWORD *)v4 + 1) = -1;
        *((_DWORD *)v4 + 3) = -1;
        *((_DWORD *)v4 + 5) = -1;
        *((_DWORD *)v4 + 7) = -1;
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 5) = 0;
        *((void *)v4 + 6) = 0;
        *((_WORD *)v4 + 28) = 0;
        *((void *)v4 + 8) = 0;
        *((void *)v4 + 9) = 0;
        *((void *)v4 + 10) = 0;
        *(_DWORD *)(v4 + 87) = 0;
        v4 += 96;
      }
      while (v4 != v11);
      unint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 5);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x2AAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 5);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x155555555555555) {
      unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x2AAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      long long v10 = (char *)operator new(96 * v9);
    }
    else
    {
      long long v10 = 0;
    }
    int64x2_t v12 = &v10[96 * v6];
    long long v13 = &v10[96 * v9];
    long long v14 = &v12[96 * a2];
    int64x2_t v15 = v12;
    do
    {
      *(_OWORD *)int64x2_t v15 = 0uLL;
      *((_OWORD *)v15 + 1) = 0uLL;
      *((_OWORD *)v15 + 2) = 0uLL;
      *((_OWORD *)v15 + 3) = 0uLL;
      *((_OWORD *)v15 + 4) = 0uLL;
      *((_OWORD *)v15 + 5) = 0uLL;
      *((_DWORD *)v15 + 1) = -1;
      *((_DWORD *)v15 + 3) = -1;
      *((_DWORD *)v15 + 5) = -1;
      *((_DWORD *)v15 + 7) = -1;
      *((void *)v15 + 4) = 0;
      *((void *)v15 + 5) = 0;
      *((void *)v15 + 6) = 0;
      *((_WORD *)v15 + 28) = 0;
      *((void *)v15 + 8) = 0;
      *((void *)v15 + 9) = 0;
      *((void *)v15 + 10) = 0;
      *(_DWORD *)(v15 + 87) = 0;
      v15 += 96;
    }
    while (v15 != v14);
    unint64_t v16 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
      if (!v17) {
        return;
      }
      goto LABEL_29;
    }
    uint64_t v18 = 0;
    do
    {
      long long v19 = &v12[v18];
      uint64_t v20 = &v17[v18];
      long long v21 = *(_OWORD *)&v17[v18 - 80];
      *((_OWORD *)v19 - 6) = *(_OWORD *)&v17[v18 - 96];
      *((_OWORD *)v19 - 5) = v21;
      *((void *)v19 - 7) = 0;
      *((void *)v19 - 6) = 0;
      *((void *)v19 - 8) = 0;
      *((_OWORD *)v19 - 4) = *(_OWORD *)&v17[v18 - 64];
      *((void *)v19 - 6) = *(void *)&v17[v18 - 48];
      *((void *)v20 - 8) = 0;
      *((void *)v20 - 7) = 0;
      *((void *)v20 - 6) = 0;
      long long v22 = *(_OWORD *)&v17[v18 - 40];
      long long v23 = *(_OWORD *)&v17[v18 - 24];
      *(_DWORD *)(v19 - 9) = *(_DWORD *)&v17[v18 - 9];
      *(_OWORD *)(v19 - 24) = v23;
      *(_OWORD *)(v19 - 40) = v22;
      v18 -= 96;
    }
    while (&v17[v18] != v16);
    long long v24 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    *a1 = &v12[v18];
    a1[1] = v14;
    a1[2] = v13;
    if (v17 != v24)
    {
      do
      {
        unint64_t v25 = (void *)*((void *)v17 - 8);
        if (v25)
        {
          *((void *)v17 - 7) = v25;
          operator delete(v25);
        }
        v17 -= 96;
      }
      while (v17 != v24);
      uint64_t v17 = v24;
    }
    if (v17)
    {
LABEL_29:
      operator delete(v17);
    }
  }
}

void sub_E94F24(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = sub_2E03F8(*(void *)a1, *a2, *a3);
  if (v7 > 0xFFFFFFFEFFFFFFFFLL || v7 == 0)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v15);
      unint64_t v9 = sub_188FC78(&v15, (uint64_t)"Invalid checkpoint connection ", 30);
      long long v10 = sub_51960(v9, *a2);
      sub_188FC78(v10, (uint64_t)".", 1);
      std::ostream::operator<<();
      long long v11 = sub_188FC78(v9, (uint64_t)" --> ", 5);
      int64x2_t v12 = sub_51960(v11, *a3);
      sub_188FC78(v12, (uint64_t)".", 1);
      std::ostream::operator<<();
      sub_188FC78(v11, (uint64_t)".", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (v14 < 0) {
        operator delete(__p);
      }
      if (v18 < 0) {
        operator delete(v17);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    **(unsigned char **)(a1 + 8) = 0;
  }
  else
  {
    sub_2E05C4(v6, v7, (uint64_t)&v15);
    sub_3455C4(*(void *)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8), (unint64_t)v15, v16, (v16 - (unsigned char *)v15) >> 3);
    if (v15)
    {
      unint64_t v16 = (char *)v15;
      operator delete(v15);
    }
  }
}

void sub_E9518C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

unint64_t sub_E951F4@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, void *a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, unint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  unint64_t v9 = result;
  if (result != a2)
  {
    if (a3)
    {
      if (a5)
      {
        while (1)
        {
          unint64_t v14 = sub_46C760(a3);
          uint64_t result = sub_46C760(a5);
          if (a4 >= v14 || a6 >= result)
          {
            if (a4 < v14 == a6 < result) {
              break;
            }
          }
          else
          {
            uint64_t v15 = sub_46C8EC(a3, a4);
            uint64_t result = sub_46C8EC(a5, a6);
            if (v15 == result) {
              break;
            }
          }
          uint64_t result = sub_46C8EC(a3, a4);
          unint64_t v16 = *(void *)(result + 32);
          if (__PAIR64__(*(unsigned __int16 *)(v9 + 4), *(_DWORD *)v9) != __PAIR64__(WORD2(v16), v16)
            || (HIWORD(v16) & 1) == (*(unsigned char *)(v9 + 6) == 0))
          {
            break;
          }
          v9 += 8;
          ++a4;
          if (v9 == a2) {
            goto LABEL_23;
          }
        }
      }
      else
      {
        while (1)
        {
          uint64_t result = sub_46C760(a3);
          if (a4 >= result) {
            break;
          }
          uint64_t result = sub_46C8EC(a3, a4);
          unint64_t v17 = *(void *)(result + 32);
          if (__PAIR64__(*(unsigned __int16 *)(v9 + 4), *(_DWORD *)v9) != __PAIR64__(WORD2(v17), v17)
            || (HIWORD(v17) & 1) == (*(unsigned char *)(v9 + 6) == 0))
          {
            break;
          }
          v9 += 8;
          ++a4;
          if (v9 == a2) {
            goto LABEL_23;
          }
        }
      }
    }
    else if (a5)
    {
      while (1)
      {
        uint64_t result = sub_46C760(a5);
        if (a6 >= result) {
          break;
        }
        uint64_t result = sub_46C8EC(0, a4);
        unint64_t v18 = *(void *)(result + 32);
        if (__PAIR64__(*(unsigned __int16 *)(v9 + 4), *(_DWORD *)v9) != __PAIR64__(WORD2(v18), v18)
          || (HIWORD(v18) & 1) == (*(unsigned char *)(v9 + 6) == 0))
        {
          break;
        }
        v9 += 8;
        ++a4;
        if (v9 == a2)
        {
LABEL_23:
          unint64_t v9 = a2;
          break;
        }
      }
    }
  }
  *a7 = v9;
  a7[1] = (unint64_t)a3;
  a7[2] = a4;
  return result;
}

uint64_t sub_E953EC(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    unint64_t v5 = a3;
    uint64_t v6 = *(long long **)(a1 + 8);
    uint64_t v7 = a2;
    if (a3 != v6)
    {
      uint64_t v7 = a2;
      do
      {
        long long v9 = *v5;
        long long v10 = v5[1];
        *(_DWORD *)(v7 + 32) = *((_DWORD *)v5 + 8);
        *(_OWORD *)uint64_t v7 = v9;
        *(_OWORD *)(v7 + 16) = v10;
        sub_67501C(v7 + 40, (uint64_t *)v5 + 5);
        long long v11 = (void **)(v7 + 80);
        uint64_t v12 = *(void *)(v7 + 80);
        if (v12)
        {
          uint64_t v13 = *(void *)(v7 + 88);
          unint64_t v8 = *(void **)(v7 + 80);
          if (v13 != v12)
          {
            do
            {
              unint64_t v14 = *(void **)(v13 - 64);
              if (v14)
              {
                *(void *)(v13 - 56) = v14;
                operator delete(v14);
              }
              v13 -= 80;
            }
            while (v13 != v12);
            unint64_t v8 = *v11;
          }
          *(void *)(v7 + 88) = v12;
          operator delete(v8);
          *long long v11 = 0;
          *(void *)(v7 + 88) = 0;
          *(void *)(v7 + 96) = 0;
        }
        *(_OWORD *)(v7 + 80) = v5[5];
        *(void *)(v7 + 96) = *((void *)v5 + 12);
        *((void *)v5 + 10) = 0;
        *((void *)v5 + 11) = 0;
        *((void *)v5 + 12) = 0;
        unint64_t v5 = (long long *)((char *)v5 + 104);
        v7 += 104;
      }
      while (v5 != v6);
    }
    sub_E92790(a1, v7);
  }
  return a2;
}

long long *sub_E954F8(long long *a1, long long *a2)
{
  if (a1 == a2) {
    return a2;
  }
  long long v3 = a1;
LABEL_3:
  if (*((void *)v3 + 1) != 0x7FFFFFFFFFFFFFFFLL && *((void *)v3 + 3) != 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v5 = *((void *)v3 + 10);
    uint64_t v6 = *((void *)v3 + 11);
    if (v5 != v6)
    {
      while (*(void *)(v5 + 16) != *(void *)(v5 + 24))
      {
        v5 += 80;
        if (v5 == v6)
        {
          long long v3 = (long long *)((char *)v3 + 104);
          if (v3 != a2) {
            goto LABEL_3;
          }
          return a2;
        }
      }
    }
  }
  if (v3 == a2) {
    return v3;
  }
  unint64_t v8 = (long long *)((char *)v3 + 104);
  if ((long long *)((char *)v3 + 104) == a2) {
    return v3;
  }
  uint64_t v7 = v3;
  do
  {
    long long v10 = v3;
    long long v3 = v8;
    if (*((void *)v10 + 14) != 0x7FFFFFFFFFFFFFFFLL && *((void *)v10 + 16) != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v12 = *((void *)v10 + 23);
      uint64_t v13 = *((void *)v10 + 24);
      if (v12 != v13)
      {
        while (*(void *)(v12 + 16) != *(void *)(v12 + 24))
        {
          v12 += 80;
          if (v12 == v13)
          {
            long long v14 = *v3;
            long long v15 = v3[1];
            *((_DWORD *)v7 + 8) = *((_DWORD *)v3 + 8);
            *uint64_t v7 = v14;
            v7[1] = v15;
            sub_67501C((uint64_t)v7 + 40, (uint64_t *)v10 + 18);
            unint64_t v16 = (void **)(v7 + 5);
            uint64_t v17 = *((void *)v7 + 10);
            if (v17)
            {
              uint64_t v18 = *((void *)v7 + 11);
              long long v9 = (void *)*((void *)v7 + 10);
              if (v18 != v17)
              {
                do
                {
                  long long v19 = *(void **)(v18 - 64);
                  if (v19)
                  {
                    *(void *)(v18 - 56) = v19;
                    operator delete(v19);
                  }
                  v18 -= 80;
                }
                while (v18 != v17);
                long long v9 = *v16;
              }
              *((void *)v7 + 11) = v17;
              operator delete(v9);
              *unint64_t v16 = 0;
              *((void *)v7 + 11) = 0;
              *((void *)v7 + 12) = 0;
            }
            v7[5] = *(long long *)((char *)v10 + 184);
            *((void *)v7 + 12) = *((void *)v10 + 25);
            *((void *)v10 + 23) = 0;
            *((void *)v10 + 24) = 0;
            *((void *)v10 + 25) = 0;
            uint64_t v7 = (long long *)((char *)v7 + 104);
            break;
          }
        }
      }
    }
    unint64_t v8 = (long long *)((char *)v3 + 104);
  }
  while ((long long *)((char *)v3 + 104) != a2);
  return v7;
}

double sub_E95698()
{
  byte_25FC2DF = 1;
  word_25FC2C8 = 65;
  byte_25FC2F7 = 1;
  word_25FC2E0 = 65;
  byte_25FC30F = 8;
  strcpy((char *)&qword_25FC2F8, "any_mode");
  byte_25FC327 = 7;
  strcpy((char *)&dword_25FC310, "cycling");
  byte_25FC33F = 7;
  strcpy((char *)&dword_25FC328, "driving");
  byte_25FC357 = 7;
  strcpy((char *)&dword_25FC340, "walking");
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25FC388 = 0u;
  *(_OWORD *)&qword_25FC398 = 0u;
  dword_25FC3A8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25FC388, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25FC388, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25FC388, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25FC388, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25FC360 = 0;
  qword_25FC368 = 0;
  qword_25FC358 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25FC358 = (uint64_t)v0;
  qword_25FC360 = (uint64_t)(v0 + 9);
  qword_25FC368 = (uint64_t)(v0 + 9);
  qword_25FC370 = 0;
  qword_25FC378 = 0;
  unk_25FC380 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25FC378 = (uint64_t)(v1 + 9);
  unk_25FC380 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25FC370 = (uint64_t)v1;
  return result;
}

void sub_E95954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25FC398) {
    sub_20B10C4((void **)qword_25FC398);
  }
  uint64_t v37 = (void *)xmmword_25FC388;
  *(void *)&xmmword_25FC388 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_E959F4(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = sub_3750CC(a2);
  sub_4BBDC0(a1 + 8, a3);
  memset(&__p, 0, sizeof(__p));
  sub_62B9C4(a1 + 1544, (int)a2, 0, 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_E80750(a1 + 3584, a2, a1 + 4048);
  sub_E96EC8(a1 + 3880, a2);
  sub_E9DF04(a1 + 4000, a2);
  *(_OWORD *)(a1 + 4048) = 0u;
  *(_OWORD *)(a1 + 4064) = 0u;
  return a1;
}

void sub_E95AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4BCED0(v15);
  _Unwind_Resume(a1);
}

void sub_E95AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  char v4 = *(int8x8_t **)v3;
  int v5 = *(int8x8_t **)(v3 + 8);
  if (*(int8x8_t **)v3 != v5)
  {
    do
    {
      sub_E95B44(a1, v4);
      v4 += 1541;
    }
    while (v4 != v5);
  }
}

void sub_E95B44(uint64_t a1, int8x8_t *a2)
{
  a2[1247].i8[0] = sub_E95E44((unsigned char *)a1, a2);
  if (sub_30301C(a1 + 3584) && a2[1247].i8[0])
  {
    ++*(_DWORD *)(a1 + 4048);
    sub_E80754(a1 + 3584, a2, (uint64_t *)&v28);
    char v4 = (int8x8_t *)v28;
    int v5 = v29;
    while (v4 != v5)
    {
      unint64_t v6 = sub_40EFE8((uint64_t)v4);
      unint64_t v7 = sub_52060((uint64_t)v4);
      if (v6 <= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v6;
      }
      if (v6 < v7)
      {
        do
        {
          if (sub_E9AB40(v4, v6))
          {
            unsigned int v9 = sub_E9AB40(v4, v6);
            sub_65111C(a2, v6, v9);
          }
          ++v6;
        }
        while (v8 != v6);
      }
      v4 += 13;
    }
    sub_E96054((uint64_t *)&v28, (uint64_t *)&v26);
    sub_E99C9C(a1 + 3880, a2, (char *)&v26);
    sub_E9B1EC((char *)&v26, __p);
    sub_E9DF08(a1 + 4000, (char **)__p, a2);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    char v10 = (char *)v26;
    if (v26)
    {
      int v11 = v27;
      uint64_t v12 = v26;
      if (v27 != v26)
      {
        do
        {
          char v13 = (void *)*((void *)v11 - 3);
          if (v13)
          {
            *((void *)v11 - 2) = v13;
            operator delete(v13);
          }
          int v14 = (void *)*((void *)v11 - 17);
          if (v14)
          {
            *((void *)v11 - 16) = v14;
            operator delete(v14);
          }
          v11 -= 136;
        }
        while (v11 != v10);
        uint64_t v12 = v26;
      }
      uint64_t v27 = v10;
      operator delete(v12);
    }
    uint64_t v15 = (int8x8_t *)v28;
    if (v28)
    {
      unint64_t v16 = v29;
      uint64_t v17 = v28;
      if (v29 != v28)
      {
        do
        {
          int8x8_t v18 = v16[-3];
          if (v18)
          {
            int8x8_t v19 = v16[-2];
            uint64_t v20 = (void *)v16[-3];
            if (*(void *)&v19 != *(void *)&v18)
            {
              do
              {
                long long v21 = *(void **)(*(void *)&v19 - 64);
                if (v21)
                {
                  *(void *)(*(void *)&v19 - 56) = v21;
                  operator delete(v21);
                }
                *(void *)&v19 -= 96;
              }
              while (*(void *)&v19 != *(void *)&v18);
              uint64_t v20 = (void *)v16[-3];
            }
            v16[-2] = v18;
            operator delete(v20);
          }
          long long v22 = (void *)v16[-6];
          if (v22)
          {
            do
            {
              long long v23 = (void *)*v22;
              operator delete(v22);
              long long v22 = v23;
            }
            while (v23);
          }
          long long v24 = (void *)v16[-8];
          v16[-8] = 0;
          if (v24) {
            operator delete(v24);
          }
          v16 -= 13;
        }
        while (v16 != v15);
        uint64_t v17 = v28;
      }
      unint64_t v29 = v15;
      operator delete(v17);
    }
  }
  else
  {
    sub_4802AC(*(void *)a1, (uint64_t)a2);
    ++*(_DWORD *)(a1 + 4052);
  }
}

void sub_E95DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
  {
    operator delete(__p);
    sub_E96114(&a13);
    sub_E83350(&a16);
    _Unwind_Resume(a1);
  }
  sub_E96114(&a13);
  sub_E83350(&a16);
  _Unwind_Resume(a1);
}

void sub_E95E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_E83350((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E95E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_E83350((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E95E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_E83350((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E95E3C(uint64_t a1)
{
  return a1 + 4048;
}

uint64_t sub_E95E44(unsigned char *a1, void *a2)
{
  if (!a1[1423] || !a1[1424]) {
    return 0;
  }
  sub_46C77C(a2, v23);
  uint64_t v3 = v23[0];
  char v4 = v23[1];
  int v5 = v24;
  unint64_t v6 = v25;
  if (v23[0])
  {
    if (v24)
    {
      while (1)
      {
        unint64_t v7 = sub_46C760(v3);
        unint64_t v8 = sub_46C760(v5);
        if ((unint64_t)v4 >= v7 || v6 >= v8)
        {
          if ((unint64_t)v4 < v7 == v6 < v8) {
            return 0;
          }
        }
        else
        {
          uint64_t v9 = sub_46C8EC(v3, (uint64_t)v4);
          if (v9 == sub_46C8EC(v5, v6)) {
            return 0;
          }
        }
        char v10 = *(int **)(sub_46C8EC(v3, (uint64_t)v4) + 8);
        int v11 = (unsigned __int16 *)((char *)v10 - *v10);
        if (*v11 >= 0x11u)
        {
          uint64_t v12 = v11[8];
          if (v12)
          {
            __int16 v13 = *(_WORD *)((char *)v10 + v12);
            if (!a1[3569] || (v13 & 0x40) != 0)
            {
              if ((v13 & 0x40) != 0) {
                return 1;
              }
            }
            else if ((v13 & 0x80) != 0)
            {
              return 1;
            }
          }
        }
        char v4 = (void *)((char *)v4 + 1);
      }
    }
    if ((unint64_t)v4 < sub_46C760(v23[0]))
    {
      while (1)
      {
        int v14 = *(int **)(sub_46C8EC(v3, (uint64_t)v4) + 8);
        uint64_t v15 = (unsigned __int16 *)((char *)v14 - *v14);
        if (*v15 >= 0x11u)
        {
          uint64_t v16 = v15[8];
          if (v16)
          {
            __int16 v17 = *(_WORD *)((char *)v14 + v16);
            if (!a1[3569] || (v17 & 0x40) != 0)
            {
              if ((v17 & 0x40) != 0) {
                return 1;
              }
            }
            else if ((v17 & 0x80) != 0)
            {
              return 1;
            }
          }
        }
        char v4 = (void *)((char *)v4 + 1);
        if ((unint64_t)v4 >= sub_46C760(v3)) {
          return 0;
        }
      }
    }
    return 0;
  }
  if (!v24 || v6 >= sub_46C760(v24)) {
    return 0;
  }
  while (1)
  {
    int8x8_t v19 = *(int **)(sub_46C8EC(0, (uint64_t)v4) + 8);
    uint64_t v20 = (unsigned __int16 *)((char *)v19 - *v19);
    if (*v20 < 0x11u) {
      goto LABEL_32;
    }
    uint64_t v21 = v20[8];
    if (!v21) {
      goto LABEL_32;
    }
    __int16 v22 = *(_WORD *)((char *)v19 + v21);
    if (a1[3569])
    {
      if ((v22 & 0x40) == 0) {
        break;
      }
    }
    if ((v22 & 0x40) != 0) {
      return 1;
    }
LABEL_32:
    char v4 = (void *)((char *)v4 + 1);
    if (v6 >= sub_46C760(v5)) {
      return 0;
    }
  }
  if ((v22 & 0x80) == 0) {
    goto LABEL_32;
  }
  return 1;
}

void sub_E96054(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      sub_E9AFC4((uint64_t)v5, v2);
      sub_E9B160(a2, (uint64_t)v5);
      if (__p)
      {
        unint64_t v7 = __p;
        operator delete(__p);
      }
      if (v5[0])
      {
        v5[1] = v5[0];
        operator delete(v5[0]);
      }
      v2 += 104;
    }
    while (v2 != v3);
  }
}

void sub_E960E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_E96198((uint64_t)va);
  sub_E96114(v2);
  _Unwind_Resume(a1);
}

void sub_E96100(_Unwind_Exception *a1)
{
  sub_E96114(v1);
  _Unwind_Resume(a1);
}

void **sub_E96114(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        int v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        unint64_t v6 = (void *)*((void *)v3 - 17);
        if (v6)
        {
          *((void *)v3 - 16) = v6;
          operator delete(v6);
        }
        v3 -= 136;
      }
      while (v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_E96198(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_E961DC(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = sub_3750CC(a2);
  sub_4BBDC0(a1 + 8, a3);
  memset(&__p, 0, sizeof(__p));
  sub_62B9C4(a1 + 1544, (int)a2, 2, 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_E8B710(a1 + 3584, a2, a1 + 4048);
  sub_E99398(a1 + 3880, a2);
  sub_EA284C(a1 + 4000, a2);
  *(_OWORD *)(a1 + 4048) = 0u;
  *(_OWORD *)(a1 + 4064) = 0u;
  return a1;
}

void sub_E96298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_4BCED0(v15);
  _Unwind_Resume(a1);
}

void sub_E962D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = nullsub_1(a2);
  char v4 = *(int8x8_t **)v3;
  int v5 = *(int8x8_t **)(v3 + 8);
  if (*(int8x8_t **)v3 != v5)
  {
    do
    {
      while (*(unsigned char *)(a1 + 3571))
      {
        sub_E96350(a1, v4);
        v4 += 1541;
        if (v4 == v5) {
          return;
        }
      }
      sub_480108(*(void *)a1, (uint64_t)v4);
      v4 += 1541;
    }
    while (v4 != v5);
  }
}

void sub_E96350(uint64_t a1, int8x8_t *a2)
{
  a2[1247].i8[0] = sub_E96648(a1);
  if (sub_30301C(a1 + 3584) && a2[1247].i8[0])
  {
    ++*(_DWORD *)(a1 + 4048);
    sub_E8B714((uint64_t *)(a1 + 3584), a2, (uint64_t *)&v28);
    char v4 = (int8x8_t *)v28;
    int v5 = v29;
    while (v4 != v5)
    {
      unint64_t v6 = sub_40EFE8((uint64_t)v4);
      unint64_t v7 = sub_52060((uint64_t)v4);
      if (v6 <= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = v6;
      }
      if (v6 < v7)
      {
        do
        {
          if (sub_E9AB40(v4, v6))
          {
            unsigned int v9 = sub_E9AB40(v4, v6);
            sub_65111C(a2, v6, v9);
          }
          ++v6;
        }
        while (v8 != v6);
      }
      v4 += 13;
    }
    sub_E96854((uint64_t **)&v28, (uint64_t *)&v26);
    sub_E9A498(a1 + 3880, (uint64_t)a2, (char *)&v26);
    sub_E9B8C4((char *)&v26, __p);
    sub_EA2850(a1 + 4000, (char **)__p, a2);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    char v10 = (char *)v26;
    if (v26)
    {
      int v11 = v27;
      uint64_t v12 = v26;
      if (v27 != v26)
      {
        do
        {
          __int16 v13 = (void *)*((void *)v11 - 3);
          if (v13)
          {
            *((void *)v11 - 2) = v13;
            operator delete(v13);
          }
          int v14 = (void *)*((void *)v11 - 15);
          if (v14)
          {
            *((void *)v11 - 14) = v14;
            operator delete(v14);
          }
          v11 -= 120;
        }
        while (v11 != v10);
        uint64_t v12 = v26;
      }
      uint64_t v27 = v10;
      operator delete(v12);
    }
    uint64_t v15 = (int8x8_t *)v28;
    if (v28)
    {
      uint64_t v16 = v29;
      __int16 v17 = v28;
      if (v29 != v28)
      {
        do
        {
          int8x8_t v18 = v16[-3];
          if (v18)
          {
            int8x8_t v19 = v16[-2];
            uint64_t v20 = (void *)v16[-3];
            if (*(void *)&v19 != *(void *)&v18)
            {
              do
              {
                uint64_t v21 = *(void **)(*(void *)&v19 - 64);
                if (v21)
                {
                  *(void *)(*(void *)&v19 - 56) = v21;
                  operator delete(v21);
                }
                *(void *)&v19 -= 80;
              }
              while (*(void *)&v19 != *(void *)&v18);
              uint64_t v20 = (void *)v16[-3];
            }
            v16[-2] = v18;
            operator delete(v20);
          }
          __int16 v22 = (void *)v16[-6];
          if (v22)
          {
            do
            {
              long long v23 = (void *)*v22;
              operator delete(v22);
              __int16 v22 = v23;
            }
            while (v23);
          }
          long long v24 = (void *)v16[-8];
          v16[-8] = 0;
          if (v24) {
            operator delete(v24);
          }
          v16 -= 13;
        }
        while (v16 != v15);
        __int16 v17 = v28;
      }
      unint64_t v29 = v15;
      operator delete(v17);
    }
  }
  else
  {
    sub_480108(*(void *)a1, (uint64_t)a2);
    ++*(_DWORD *)(a1 + 4052);
  }
}

void sub_E965C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
  {
    operator delete(__p);
    sub_E96914(&a13);
    sub_E8CD80(&a16);
    _Unwind_Resume(a1);
  }
  sub_E96914(&a13);
  sub_E8CD80(&a16);
  _Unwind_Resume(a1);
}

void sub_E9660C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_E8CD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E96620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_E8CD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_E96634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_E8CD80((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E96648(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1423)) {
    return 0;
  }
  sub_46B058();
  uint64_t v3 = v2;
  unint64_t v5 = v4;
  sub_46FF18();
  unint64_t v8 = v6;
  unint64_t v9 = v7;
  if (v3)
  {
    if (v6)
    {
      while (1)
      {
        unint64_t v10 = sub_470ADC(v3);
        unint64_t v11 = sub_470ADC(v8);
        if (v5 >= v10 || v9 >= v11)
        {
          if (v5 < v10 == v9 < v11) {
            return 0;
          }
        }
        else
        {
          uint64_t v12 = sub_470B40(v3, v5);
          if (v12 == sub_470B40(v8, v9)) {
            return 0;
          }
        }
        __int16 v13 = *(int **)(sub_470B40(v3, v5) + 16);
        int v14 = (unsigned __int16 *)((char *)v13 - *v13);
        if (*v14 >= 0x11u)
        {
          uint64_t v15 = v14[8];
          if (v15)
          {
            __int16 v16 = *(_WORD *)((char *)v13 + v15);
            if (!*(unsigned char *)(a1 + 3569) || (v16 & 0x40) != 0)
            {
              if ((v16 & 0x40) != 0) {
                return 1;
              }
            }
            else if ((v16 & 0x80) != 0)
            {
              return 1;
            }
          }
        }
        ++v5;
      }
    }
    if (v5 < sub_470ADC(v3))
    {
      while (1)
      {
        __int16 v17 = *(int **)(sub_470B40(v3, v5) + 16);
        int8x8_t v18 = (unsigned __int16 *)((char *)v17 - *v17);
        if (*v18 >= 0x11u)
        {
          uint64_t v19 = v18[8];
          if (v19)
          {
            __int16 v20 = *(_WORD *)((char *)v17 + v19);
            if (!*(unsigned char *)(a1 + 3569) || (v20 & 0x40) != 0)
            {
              if ((v20 & 0x40) != 0) {
                return 1;
              }
            }
            else if ((v20 & 0x80) != 0)
            {
              return 1;
            }
          }
        }
        if (++v5 >= sub_470ADC(v3)) {
          return 0;
        }
      }
    }
    return 0;
  }
  if (!v6 || v7 >= sub_470ADC(v6)) {
    return 0;
  }
  while (1)
  {
    __int16 v22 = *(int **)(sub_470B40(0, v5) + 16);
    long long v23 = (unsigned __int16 *)((char *)v22 - *v22);
    if (*v23 < 0x11u) {
      goto LABEL_31;
    }
    uint64_t v24 = v23[8];
    if (!v24) {
      goto LABEL_31;
    }
    __int16 v25 = *(_WORD *)((char *)v22 + v24);
    if (*(unsigned char *)(a1 + 3569))
    {
      if ((v25 & 0x40) == 0) {
        break;
      }
    }
    if ((v25 & 0x40) != 0) {
      return 1;
    }
LABEL_31:
    ++v5;
    if (v9 >= sub_470ADC(v8)) {
      return 0;
    }
  }
  if ((v25 & 0x80) == 0) {
    goto LABEL_31;
  }
  return 1;
}

void sub_E96854(uint64_t **a1@<X1>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      sub_E9B048((uint64_t)v5, v2);
      sub_E9B838(a2, (uint64_t)v5);
      if (__p)
      {
        unint64_t v7 = __p;
        operator delete(__p);
      }
      if (v5[0])
      {
        v5[1] = v5[0];
        operator delete(v5[0]);
      }
      v2 += 13;
    }
    while (v2 != v3);
  }
}

void sub_E968E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_E96998((uint64_t)va);
  sub_E96914(v2);
  _Unwind_Resume(a1);
}

void sub_E96900(_Unwind_Exception *a1)
{
  sub_E96914(v1);
  _Unwind_Resume(a1);
}

void **sub_E96914(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (void *)*((void *)v3 - 3);
        if (v5)
        {
          *((void *)v3 - 2) = v5;
          operator delete(v5);
        }
        unint64_t v6 = (void *)*((void *)v3 - 15);
        if (v6)
        {
          *((void *)v3 - 14) = v6;
          operator delete(v6);
        }
        v3 -= 120;
      }
      while (v3 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_E96998(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

double sub_E969DC()
{
  byte_25FC3C7 = 1;
  word_25FC3B0 = 65;
  byte_25FC3DF = 1;
  word_25FC3C8 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25FC470 = 0u;
  *(_OWORD *)&qword_25FC480 = 0u;
  dword_25FC490 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25FC470, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25FC470, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25FC470, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25FC470, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  byte_25FC3F7 = 8;
  strcpy((char *)&qword_25FC3E0, "any_mode");
  byte_25FC40F = 7;
  strcpy((char *)&dword_25FC3F8, "cycling");
  byte_25FC427 = 7;
  strcpy((char *)&dword_25FC410, "driving");
  byte_25FC43F = 7;
  strcpy((char *)&dword_25FC428, "walking");
  qword_25FC448 = 0;
  qword_25FC450 = 0;
  qword_25FC440 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25FC440 = (uint64_t)v0;
  qword_25FC448 = (uint64_t)(v0 + 9);
  qword_25FC450 = (uint64_t)(v0 + 9);
  qword_25FC458 = 0;
  qword_25FC460 = 0;
  unk_25FC468 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25FC460 = (uint64_t)(v1 + 9);
  unk_25FC468 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25FC458 = (uint64_t)v1;
  return result;
}

void sub_E96CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25FC480) {
    sub_20B1108((void **)qword_25FC480);
  }
  uint64_t v37 = (void *)xmmword_25FC470;
  *(void *)&xmmword_25FC470 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_E96D44(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = operator new(0x20uLL);
  long long v13 = xmmword_20B8870;
  strcpy((char *)v12, "RouteLineGeometrySmoother");
  std::string __p = 0;
  char v10 = 0;
  char v4 = sub_374CDC(a2, (uint64_t)&v12, (uint64_t *)&__p);
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 8) = 0x3FA47AE147AE147BLL;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0x4044000000000000;
  *(void *)(a1 + 32) = 5000;
  *(void *)(a1 + 40) = 0x3FE0000000000000;
  *(_OWORD *)(a1 + 48) = xmmword_20F0EF0;
  *(_OWORD *)(a1 + 64) = xmmword_20F0F00;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  *(_OWORD *)(a1 + 96) = xmmword_20F0F10;
  *(void *)(a1 + 112) = 0x4010000000000000;
  sub_E96ECC(a1, v4);
  int v5 = (void **)__p;
  if (__p)
  {
    unint64_t v6 = v10;
    char v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      char v7 = __p;
    }
    char v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  return a1;
}

void sub_E96EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_E96ECC(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "enable_route_line_geometry_smoother");
  char v4 = sub_58070(a2, (uint64_t)__p);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)a1 = v5 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_6;
    }
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a1 != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_6:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "enable_intersecting_line_cleanup");
  unint64_t v6 = sub_58070(a2, (uint64_t)__p);
  if (v6 && (int v7 = *((_DWORD *)v6 + 12), (v7 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 16) = v7 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_12;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 16) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_12:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "shift_attenuation_per_meter");
  int v8 = sub_58070(a2, (uint64_t)__p);
  unint64_t v9 = (void *)(a1 + 8);
  if (v8)
  {
    unint64_t v9 = v8 + 5;
    if (*((_DWORD *)v8 + 12) != 1) {
      unint64_t v9 = (void *)(a1 + 8);
    }
  }
  *(void *)(a1 + 8) = *v9;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "minimum_gap_distance_for_smoothing_m");
  char v10 = sub_58070(a2, (uint64_t)__p);
  uint64_t v11 = (void *)(a1 + 40);
  if (v10)
  {
    uint64_t v11 = v10 + 5;
    if (*((_DWORD *)v10 + 12) != 1) {
      uint64_t v11 = (void *)(a1 + 40);
    }
  }
  *(void *)(a1 + 40) = *v11;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "unique_point_threshold_meters");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 72));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "self_intersection_search_distance_m");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 32));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "max_attenuated_shift_bearing_change");
  uint64_t v12 = sub_58070(a2, (uint64_t)__p);
  long long v13 = (void *)(a1 + 24);
  if (v12)
  {
    long long v13 = v12 + 5;
    if (*((_DWORD *)v12 + 12) != 1) {
      long long v13 = (void *)(a1 + 24);
    }
  }
  *(void *)(a1 + 24) = *v13;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "max_smoothing_gap_distance");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 64));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "upsample_min_points_per_meter");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 48));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "upsample_max_gap");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 56));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "simplification_tolerance");
  int v14 = sub_58070(a2, (uint64_t)__p);
  uint64_t v15 = (void *)(a1 + 80);
  if (v14)
  {
    uint64_t v15 = v14 + 5;
    if (*((_DWORD *)v14 + 12) != 1) {
      uint64_t v15 = (void *)(a1 + 80);
    }
  }
  *(void *)(a1 + 80) = *v15;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9380;
  strcpy((char *)__p[0], "enable_center_line_section_transition_smoothing");
  __int16 v16 = sub_58070(a2, (uint64_t)__p);
  if (v16 && (int v17 = *((_DWORD *)v16 + 12), (v17 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 88) = v17 == 4;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_49;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a1 + 88) != 0;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_49;
    }
  }
  operator delete(__p[0]);
LABEL_49:
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "trim_length_m");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 96));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "smooth_length_m");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 104));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "bezier_error");
  int8x8_t v18 = sub_58070(a2, (uint64_t)__p);
  uint64_t v19 = (void *)(a1 + 112);
  if (v18)
  {
    uint64_t v19 = v18 + 5;
    if (*((_DWORD *)v18 + 12) != 1) {
      uint64_t v19 = (void *)(a1 + 112);
    }
  }
  *(void *)(a1 + 112) = *v19;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_E974FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E97550(double *a1, int a2, void *a3, double a4)
{
  if (sub_E9B02C(a3) >= 2)
  {
    if (!sub_E9C25C((uint64_t)a3)) {
      sub_E9C210(a3, *((void *)a1 + 6), *((void *)a1 + 7));
    }
    double v8 = a1[1];
    unint64_t v9 = sub_E9B02C(a3);
    char v10 = (int **)nullsub_1(a3);
    double v11 = (double)*((uint64_t *)a1 + 9) / 100.0;
    double v12 = a1[3];
    sub_6F0868(a2, v9, v10, a4, v8, v11, v12);
  }
}

void sub_E97620(uint64_t a1, void *a2)
{
  sub_E97790(a2, *(void *)(a1 + 32), (uint64_t)&v15);
  std::string __p = 0;
  long long v13 = 0;
  uint64_t v14 = 0;
  uint64_t v3 = (char *)v15;
  char v4 = v16;
  if (v15 != v16)
  {
    do
    {
      unint64_t v5 = *((void *)v3 + 4);
      uint64_t v6 = *((void *)v3 + 5);
      if (sub_E9B1C0(a2) > v5)
      {
        int v7 = (void *)sub_E9B1DC(a2, v5);
        if (v6 == sub_E9B02C(v7))
        {
          do
          {
            if (++v5 >= sub_E9B1C0(a2)) {
              break;
            }
            double v8 = (void *)sub_E9B1DC(a2, v5);
          }
          while (!sub_E9B02C(v8));
          uint64_t v6 = 0;
        }
      }
      unint64_t v9 = (void *)sub_E9B1DC(a2, v5);
      uint64_t v10 = sub_E9A9EC(v9, v6);
      uint64_t v11 = *((void *)v3 + 6);
      *(_DWORD *)(v10 + 8) = *((_DWORD *)v3 + 14);
      *(void *)uint64_t v10 = v11;
      sub_E97E68((char **)&__p, (long long *)v3, (long long *)(v3 + 24));
      v3 += 64;
    }
    while (v3 != v4);
  }
  sub_E9B4E0(a2, &__p);
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    __int16 v16 = (char *)v15;
    operator delete(v15);
  }
}

void sub_E97748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

unint64_t sub_E97790@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_E97FD8(a1, &v73);
  while (1)
  {
    unint64_t result = sub_E9807C(a1, &v64);
    unint64_t v7 = v74;
    if (v74 == (void)v65)
    {
      uint64_t v8 = v75;
      if (v75 == *((void *)&v65 + 1)) {
        return result;
      }
    }
    else
    {
      uint64_t v8 = v75;
    }
    unint64_t v9 = v73;
    if (v7 < sub_E9B1C0(v73))
    {
      uint64_t v10 = (void *)sub_E9B1DC(v9, v7);
      unint64_t v11 = sub_E9B02C(v10);
      unint64_t v12 = v8 + 1;
      if (v8 + 1 < v11) {
        goto LABEL_23;
      }
      ++v7;
      if (v8 - v11 <= 0x7FFFFFFFFFFFFFFELL)
      {
        unint64_t v12 = v8 - v11 + 1;
        do
        {
          if (v7 >= sub_E9B1C0(v9)) {
            break;
          }
          long long v13 = (void *)sub_E9B1DC(v9, v7);
          unint64_t v14 = sub_E9B02C(v13);
          uint64_t v15 = v12 - v14;
          if (v12 < v14) {
            goto LABEL_23;
          }
          ++v7;
          v12 -= v14;
        }
        while (v15 > 0);
      }
      uint64_t v8 = 0;
    }
    if (v7 < sub_E9B1C0(v9) && (__int16 v16 = (void *)sub_E9B1DC(v9, v7), v8 == sub_E9B02C(v16)))
    {
      do
      {
        if (++v7 >= sub_E9B1C0(v9)) {
          break;
        }
        int v17 = (void *)sub_E9B1DC(v9, v7);
      }
      while (!sub_E9B02C(v17));
      unint64_t v12 = 0;
    }
    else
    {
      unint64_t v12 = v8;
    }
LABEL_23:
    unint64_t result = sub_E9807C(a1, &v64);
    if (__PAIR128__(v12, v7) == v65) {
      return result;
    }
    uint64_t v60 = v12;
    uint64_t v61 = v7;
    if (a2 >= 1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = v60;
      unint64_t v20 = v7;
      while (1)
      {
        unint64_t v21 = v20;
        unint64_t v22 = v19;
        if (v20 < sub_E9B1C0(v9))
        {
          long long v23 = (void *)sub_E9B1DC(v9, v20);
          unint64_t v24 = sub_E9B02C(v23);
          unint64_t v22 = v19 + 1;
          unint64_t v21 = v20;
          if (v19 + 1 < v24) {
            goto LABEL_40;
          }
          unint64_t v21 = v20 + 1;
          if (v19 - v24 <= 0x7FFFFFFFFFFFFFFELL)
          {
            unint64_t v22 = v19 - v24 + 1;
            do
            {
              if (v21 >= sub_E9B1C0(v9)) {
                break;
              }
              __int16 v25 = (void *)sub_E9B1DC(v9, v21);
              unint64_t v26 = sub_E9B02C(v25);
              uint64_t v27 = v22 - v26;
              if (v22 < v26) {
                goto LABEL_40;
              }
              ++v21;
              v22 -= v26;
            }
            while (v27 > 0);
          }
          unint64_t v22 = 0;
        }
        if (v21 < sub_E9B1C0(v9))
        {
          long long v28 = (void *)sub_E9B1DC(v9, v21);
          if (v22 == sub_E9B02C(v28))
          {
            do
            {
              if (++v21 >= sub_E9B1C0(v9)) {
                break;
              }
              unint64_t v29 = (void *)sub_E9B1DC(v9, v21);
            }
            while (!sub_E9B02C(v29));
            unint64_t v22 = 0;
          }
        }
LABEL_40:
        unint64_t v30 = sub_E9B1C0(a1);
        if (sub_E9B1C0(a1) > v30)
        {
          unint64_t v31 = (void *)sub_E9B1DC(a1, v30);
          if (!sub_E9B02C(v31))
          {
            do
            {
              if (++v30 >= sub_E9B1C0(a1)) {
                break;
              }
              long double v55 = (void *)sub_E9B1DC(a1, v30);
            }
            while (!sub_E9B02C(v55));
          }
        }
        if (v21 == v30 && !v22) {
          break;
        }
        uint64_t v71 = -1;
        int v72 = 0x7FFFFFFF;
        long long v32 = (void *)sub_E9B1DC(v73, v74);
        unint64_t v33 = (unsigned int *)sub_E9A9EC(v32, v75);
        int64_t v34 = (void *)sub_E9B1DC(v9, v61);
        unint64_t v35 = (unsigned int *)sub_E9A9EC(v34, v60);
        uint64_t v36 = (void *)sub_E9B1DC(v9, v20);
        uint64_t v37 = (unsigned int *)sub_E9A9EC(v36, v19);
        unint64_t v38 = (void *)sub_E9B1DC(v9, v21);
        double v39 = (unsigned int *)sub_E9A9EC(v38, v22);
        if (sub_E980F4(v33, v35, v37, v39, (unsigned int *)&v71))
        {
          uint64_t v40 = *(void *)(a3 + 8);
          if (*(void *)a3 != v40 && *(void *)(v40 - 56) == v61 && *(void *)(v40 - 48) == v60) {
            *(void *)(a3 + 8) = v40 - 64;
          }
          uint64_t v64 = v9;
          *(void *)&long long v65 = v61;
          *((void *)&v65 + 1) = v60;
          long long v66 = v9;
          unint64_t v67 = v20;
          uint64_t v68 = v19;
          uint64_t v69 = v71;
          int v70 = v72;
          sub_E98534((char **)a3, &v64);
        }
        uint64_t v41 = (void *)sub_E9B1DC(v9, v20);
        double v42 = (unsigned int *)sub_E9A9EC(v41, v19);
        double v43 = (void *)sub_E9B1DC(v9, v21);
        uint64_t v44 = (unsigned int *)sub_E9A9EC(v43, v22);
        uint64_t v45 = v42[1];
        uint64_t v46 = v44[1];
        long double v47 = exp((double)((v46 >> 1) + (v45 >> 1)) * -6.28318531 / 4294967300.0 + 3.14159265);
        long double v48 = atan((v47 + -1.0 / v47) * 0.5);
        long double v49 = cos(v48 * 57.2957795 / 180.0 * 3.14159265);
        unint64_t v50 = *v42 - (unint64_t)*v44;
        double v51 = v49 * 0.00932288077 * (sqrt((double)((v45 - v46) * (v45 - v46) + v50 * v50)) / 100.0 * 100.0) * 100.0;
        if (v51 >= 0.0)
        {
          double v52 = v51;
          if (v51 < 4.50359963e15)
          {
            uint64_t v53 = (uint64_t)(v51 + v51) + 1;
LABEL_57:
            double v52 = (double)(v53 >> 1);
          }
        }
        else
        {
          double v52 = v51;
          if (v51 > -4.50359963e15)
          {
            uint64_t v53 = (uint64_t)(v51 + v51);
            if (v53 >= 1) {
              --v53;
            }
            goto LABEL_57;
          }
        }
        if (v52 >= 9.22337204e18)
        {
          v18 += 0x7FFFFFFFFFFFFFFELL;
          uint64_t v19 = v22;
          unint64_t v20 = v21;
          if (v18 >= a2) {
            break;
          }
        }
        else
        {
          if (v51 >= 0.0)
          {
            if (v51 < 4.50359963e15)
            {
              uint64_t v54 = (uint64_t)(v51 + v51) + 1;
LABEL_66:
              double v51 = (double)(v54 >> 1);
            }
          }
          else if (v51 > -4.50359963e15)
          {
            uint64_t v54 = (uint64_t)(v51 + v51);
            if (v54 >= 1) {
              --v54;
            }
            goto LABEL_66;
          }
          v18 += (uint64_t)v51;
          uint64_t v19 = v22;
          unint64_t v20 = v21;
          if (v18 >= a2) {
            break;
          }
        }
      }
    }
    uint64_t v56 = *(void *)(a3 + 8);
    if (*(void *)a3 == v56)
    {
      uint64_t v5 = v60;
      uint64_t v4 = v61;
    }
    else
    {
      uint64_t v5 = v60;
      uint64_t v4 = v61;
      if (*(void *)(v56 - 56) == v61 && *(void *)(v56 - 48) == v60)
      {
        long long v57 = *(_OWORD *)(v56 - 40);
        uint64_t v63 = *(void *)(v56 - 24);
        long long v62 = v57;
        sub_E9A4A0((void **)&v62, 1);
        uint64_t v4 = *((void *)&v62 + 1);
        uint64_t v5 = v63;
      }
    }
    uint64_t v74 = v4;
    uint64_t v75 = v5;
  }
}

void sub_E97E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  long long v13 = *(void **)a12;
  if (*(void *)a12)
  {
    *(void *)(a12 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

char *sub_E97E68(char **a1, long long *a2, long long *a3)
{
  unint64_t v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v11 = *a1;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v11) >> 4);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v15 = 0x555555555555555;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 > 0x555555555555555) {
        sub_188D718();
      }
      __int16 v16 = (char *)operator new(48 * v15);
    }
    else
    {
      __int16 v16 = 0;
    }
    int v17 = &v16[48 * v12];
    *(_OWORD *)int v17 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)(v17 + 24) = *a3;
    *((void *)v17 + 5) = *((void *)a3 + 2);
    uint64_t v10 = v17 + 48;
    if (v7 != v11)
    {
      do
      {
        long long v18 = *((_OWORD *)v7 - 3);
        long long v19 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v17 - 2) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v17 - 1) = v19;
        *((_OWORD *)v17 - 3) = v18;
        v17 -= 48;
        v7 -= 48;
      }
      while (v7 != v11);
      unint64_t v7 = *a1;
    }
    *a1 = v17;
    a1[1] = v10;
    a1[2] = &v16[48 * v15];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    long long v8 = *a2;
    *((void *)v7 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    long long v9 = *a3;
    *((void *)v7 + 5) = *((void *)a3 + 2);
    *(_OWORD *)(v7 + 24) = v9;
    uint64_t v10 = v7 + 48;
  }
  a1[1] = v10;
  return v10 - 48;
}

unint64_t sub_E97FD8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  a2[1] = 0;
  uint64_t v4 = a2 + 1;
  a2[2] = 0;
  unint64_t result = sub_E9B1C0(a1);
  if (result)
  {
    unint64_t v6 = (void *)sub_E9B1DC(a1, 0);
    unint64_t result = sub_E9B02C(v6);
    if (!result)
    {
      _OWORD *v4 = xmmword_20E7B20;
      unint64_t result = sub_E9B1C0(a1);
      if (result >= 2)
      {
        unint64_t v7 = 1;
        do
        {
          long long v8 = (void *)sub_E9B1DC(a1, v7);
          unint64_t result = sub_E9B02C(v8);
          if (result) {
            break;
          }
          a2[1] = ++v7;
          a2[2] = 0;
          unint64_t result = sub_E9B1C0(a1);
        }
        while (v7 < result);
      }
    }
  }
  return result;
}

unint64_t sub_E9807C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = sub_E9B1C0(a1);
  *a2 = a1;
  a2[1] = v4;
  a2[2] = 0;
  for (unint64_t result = sub_E9B1C0(a1); v4 < result; unint64_t result = sub_E9B1C0(a1))
  {
    unint64_t v6 = (void *)sub_E9B1DC(a1, v4);
    unint64_t result = sub_E9B02C(v6);
    if (result) {
      break;
    }
    a2[1] = ++v4;
    a2[2] = 0;
  }
  return result;
}

uint64_t sub_E980F4(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result = sub_3B83C((uint64_t)a1, (uint64_t)a2, a3, a4, (uint64_t)a5);
  if (result)
  {
    if (*a2 == *a3)
    {
      unsigned int v11 = a2[1];
      BOOL v12 = v11 == a3[1] && *a2 == *a5;
      if (v12 && v11 == a5[1]) {
        return 0;
      }
    }
    *(void *)uint64_t v36 = *(void *)a1;
    *(_DWORD *)&v36[8] = a1[2];
    *(void *)&v36[12] = *(void *)a2;
    *(_DWORD *)&v36[20] = a2[2];
    *(void *)&v36[24] = *(void *)a3;
    LODWORD(v37) = a3[2];
    HIDWORD(v37) = a4[2];
    *(void *)((char *)&v37 + 4) = *(void *)a4;
    unint64_t v14 = operator new(0x30uLL);
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v36;
    *((_OWORD *)v14 + 1) = *(_OWORD *)&v36[16];
    *((_OWORD *)v14 + 2) = v37;
    if (v14[2] == 0x7FFFFFFF || v14[5] == 0x7FFFFFFF || v14[8] == 0x7FFFFFFF || v14[11] == 0x7FFFFFFF)
    {
      operator delete(v14);
      return 1;
    }
    operator delete(v14);
    uint64_t v15 = *a1;
    uint64_t v16 = a1[1];
    uint64_t v17 = *a5;
    uint64_t v18 = a5[1];
    double v19 = sqrt((double)((v15 - *a2) * (v15 - *a2) + (v16 - a2[1]) * (v16 - (unint64_t)a2[1]))) / 100.0;
    double v20 = 0.5;
    if (v19 > 0.0) {
      double v20 = sqrt((double)(unint64_t)((v15 - v17) * (v15 - v17) + (v16 - v18) * (v16 - v18))) / 100.0 / v19;
    }
    if (v20 > 1.0) {
      double v20 = 1.0;
    }
    double v21 = (1.0 - v20) * (double)(int)a1[2];
    if (v21 >= 0.0)
    {
      if (v21 >= 4.50359963e15) {
        goto LABEL_30;
      }
      uint64_t v22 = (uint64_t)(v21 + v21) + 1;
    }
    else
    {
      if (v21 <= -4.50359963e15) {
        goto LABEL_30;
      }
      uint64_t v22 = (uint64_t)(v21 + v21);
      if (v22 >= 1) {
        --v22;
      }
    }
    double v21 = (double)(v22 >> 1);
LABEL_30:
    double v23 = v20 * (double)(int)a2[2];
    if (v23 >= 0.0)
    {
      if (v23 >= 4.50359963e15) {
        goto LABEL_38;
      }
      uint64_t v24 = (uint64_t)(v23 + v23) + 1;
    }
    else
    {
      if (v23 <= -4.50359963e15) {
        goto LABEL_38;
      }
      uint64_t v24 = (uint64_t)(v23 + v23);
      if (v24 >= 1) {
        --v24;
      }
    }
    double v23 = (double)(v24 >> 1);
LABEL_38:
    uint64_t v25 = *a3;
    uint64_t v26 = a3[1];
    double v27 = sqrt((double)((v25 - *a4) * (v25 - *a4) + (v26 - a4[1]) * (v26 - (unint64_t)a4[1]))) / 100.0;
    double v28 = 0.5;
    if (v27 > 0.0) {
      double v28 = sqrt((double)(unint64_t)((v25 - v17) * (v25 - v17) + (v26 - v18) * (v26 - v18))) / 100.0 / v27;
    }
    if (v28 > 1.0) {
      double v28 = 1.0;
    }
    double v29 = (1.0 - v28) * (double)(int)a3[2];
    if (v29 >= 0.0)
    {
      if (v29 >= 4.50359963e15) {
        goto LABEL_50;
      }
      uint64_t v30 = (uint64_t)(v29 + v29) + 1;
    }
    else
    {
      if (v29 <= -4.50359963e15) {
        goto LABEL_50;
      }
      uint64_t v30 = (uint64_t)(v29 + v29);
      if (v30 >= 1) {
        --v30;
      }
    }
    double v29 = (double)(v30 >> 1);
LABEL_50:
    int v31 = (int)v21;
    double v32 = v28 * (double)(int)a4[2];
    if (v32 >= 0.0)
    {
      if (v32 >= 4.50359963e15) {
        goto LABEL_58;
      }
      uint64_t v33 = (uint64_t)(v32 + v32) + 1;
    }
    else
    {
      if (v32 <= -4.50359963e15) {
        goto LABEL_58;
      }
      uint64_t v33 = (uint64_t)(v32 + v32);
      if (v33 >= 1) {
        --v33;
      }
    }
    double v32 = (double)(v33 >> 1);
LABEL_58:
    double v34 = (double)((int)v23 + v31 + (int)v29 + (int)v32) * 0.5;
    if (v34 >= 0.0)
    {
      if (v34 < 4.50359963e15)
      {
        uint64_t v35 = (uint64_t)(v34 + v34) + 1;
LABEL_65:
        double v34 = (double)(v35 >> 1);
      }
    }
    else if (v34 > -4.50359963e15)
    {
      uint64_t v35 = (uint64_t)(v34 + v34);
      if (v35 >= 1) {
        --v35;
      }
      goto LABEL_65;
    }
    a5[2] = (int)v34;
    return 1;
  }
  return result;
}

char *sub_E98534(char **a1, _OWORD *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = (v5 - *a1) >> 6;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 58) {
      sub_2E00();
    }
    uint64_t v13 = v4 - (void)v10;
    if (v13 >> 5 > v12) {
      unint64_t v12 = v13 >> 5;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 58) {
        sub_188D718();
      }
      uint64_t v15 = (char *)operator new(v14 << 6);
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[64 * v11];
    long long v17 = a2[1];
    *(_OWORD *)uint64_t v16 = *a2;
    *((_OWORD *)v16 + 1) = v17;
    long long v18 = a2[3];
    *((_OWORD *)v16 + 2) = a2[2];
    *((_OWORD *)v16 + 3) = v18;
    long long v9 = v16 + 64;
    if (v5 != v10)
    {
      do
      {
        long long v19 = *((_OWORD *)v5 - 4);
        long long v20 = *((_OWORD *)v5 - 3);
        long long v21 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v16 - 1) = v21;
        *((_OWORD *)v16 - 4) = v19;
        *((_OWORD *)v16 - 3) = v20;
        v16 -= 64;
        v5 -= 64;
      }
      while (v5 != v10);
      uint64_t v5 = *a1;
    }
    *a1 = v16;
    a1[1] = v9;
    a1[2] = &v15[64 * v14];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    long long v8 = a2[3];
    *((_OWORD *)v5 + 2) = a2[2];
    *((_OWORD *)v5 + 3) = v8;
    *(_OWORD *)uint64_t v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    long long v9 = v5 + 64;
  }
  a1[1] = v9;
  return v9 - 64;
}

void sub_E98650(uint64_t a1, char *a2)
{
  if (*(double *)(a1 + 80) > 0.0)
  {
    sub_E9B1EC(a2, &v19);
    unint64_t v4 = v19;
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
    if (v5 >= 2)
    {
      double v6 = *(double *)(a1 + 80);
      std::string __p = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      sub_426D8((uint64_t *)&v19, v5, 1, 1, &__p, (uint64_t)&v17, v6);
      if (__p) {
        operator delete(__p);
      }
      std::string __p = 0;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      sub_E97FD8(a2, &v12);
      sub_E97FD8(a2, &v10);
      if (v18 <= 1) {
        uint64_t v7 = 1;
      }
      else {
        uint64_t v7 = v18;
      }
      if (v18 >= 2)
      {
        unint64_t v8 = 1;
        do
        {
          sub_E9A4A0(&v10, 1);
          uint64_t v9 = *(void *)((unsigned char *)v17 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v8);
          if ((*(void *)((char *)v17 + (((v8 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 - 1)))
          {
            if (!v9) {
              long long v13 = v11;
            }
          }
          else if (v9)
          {
            sub_E97E68((char **)&__p, (long long *)&v12, (long long *)&v10);
          }
          ++v8;
        }
        while (v7 != v8);
      }
      sub_E9B4E0(a2, &__p);
      if (__p)
      {
        uint64_t v15 = __p;
        operator delete(__p);
      }
      if (v17) {
        operator delete(v17);
      }
      unint64_t v4 = v19;
    }
    if (v4)
    {
      long long v20 = v4;
      operator delete(v4);
    }
  }
}

void sub_E987D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  long long v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(void *)(v19 - 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_E98828(uint64_t a1, int8x8_t *a2, void *a3)
{
  unint64_t v6 = sub_E9B1C0(a3);
  if (v6)
  {
    unint64_t v7 = v6;
    for (uint64_t i = 0; i != v7; ++i)
    {
      uint64_t v9 = (void *)sub_E9B1DC(a3, i);
      int v10 = sub_E9A9D4((uint64_t)v9);
      if (v10 == 3) {
        continue;
      }
      int v11 = v10;
      if (i)
      {
        uint64_t v12 = sub_E9B1DC(a3, i - 1);
        int v13 = sub_E9A9D4(v12);
        if (v11 != 1 || v13 == 1)
        {
          BOOL v14 = v11 == 4 && v13 == 4;
          unint64_t v15 = sub_E9B1C0(a3);
          BOOL v16 = 0;
          if (v11 != 1) {
            goto LABEL_20;
          }
        }
        else
        {
          BOOL v14 = 1;
          unint64_t v15 = sub_E9B1C0(a3);
          BOOL v16 = 0;
        }
      }
      else
      {
        BOOL v14 = 0;
        unint64_t v15 = sub_E9B1C0(a3);
        BOOL v16 = 0;
        if (v11 != 1) {
          goto LABEL_20;
        }
      }
      if (i != v15 - 1)
      {
        uint64_t v18 = sub_E9B1DC(a3, i + 1);
        BOOL v16 = sub_E9A9D4(v18) != 1;
      }
LABEL_20:
      if (v14 || v16)
      {
        double v19 = (double)*(uint64_t *)(a1 + 96) / 100.0;
        double v20 = v19 / ((double)sub_3C80F8((uint64_t)v9) / 100.0);
        long long v21 = (uint64_t *)nullsub_1(v9);
        if (v20 <= 0.25) {
          double v22 = v20;
        }
        else {
          double v22 = 0.25;
        }
        if (!v14) {
          double v22 = 0.0;
        }
        double v23 = 1.0 - v20;
        if (1.0 - v20 < 0.75) {
          double v23 = 0.75;
        }
        if (!v16) {
          double v23 = 1.0;
        }
        sub_31854(v21, 0, v73, v22, v23);
        sub_E9C270(v9);
        sub_E9C190((uint64_t)v9, (char **)v73, v24);
        uint64_t v25 = sub_3C80F8((uint64_t)v9);
        if (v16 && v14)
        {
          uint64_t v26 = v25;
          uint64_t v27 = sub_3C80F8((uint64_t)v9);
          uint64_t v28 = *(void *)(a1 + 104);
          double v29 = (double)v28 * 3.0;
          if (v29 >= 0.0)
          {
            if (v29 < 4.50359963e15)
            {
              uint64_t v30 = (uint64_t)(v29 + v29) + 1;
              goto LABEL_38;
            }
          }
          else if (v29 > -4.50359963e15)
          {
            uint64_t v30 = (uint64_t)(v29 + v29);
            if (v30 >= 1) {
              --v30;
            }
LABEL_38:
            double v29 = (double)(v30 >> 1);
          }
          if (v27 < (uint64_t)v29)
          {
            int v31 = (void *)sub_E9B1DC(a3, i - 1);
            sub_E990E0(v28, 0, v31, &v71);
            uint64_t v32 = *(void *)v72;
            uint64_t v33 = *(char **)nullsub_1(v9);
            uint64_t v34 = nullsub_1(v9);
            sub_46C6C((uint64_t)&v71, v32, v33, *(char **)(v34 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v34 + 8) - (void)v33) >> 2));
            uint64_t v35 = *(void *)(a1 + 104);
            uint64_t v36 = (void *)sub_E9B1DC(a3, i + 1);
            sub_E990E0(v35, 1, v36, &v69);
            sub_46C6C((uint64_t)&v71, *(uint64_t *)v72, (char *)v69, v70, 0xAAAAAAAAAAAAAAABLL * ((v70 - (unsigned char *)v69) >> 2));
            sub_E9C270(v9);
            sub_43F48((uint64_t *)&v71, ((double)v26 / 100.0 + (double)*(uint64_t *)(a1 + 104) / 100.0), (uint64_t)&__p, 1.0, *(double *)(a1 + 112), 0.1);
            sub_E9C190((uint64_t)v9, (char **)&__p, v37);
            if (__p)
            {
              *(void *)uint64_t v68 = __p;
              operator delete(__p);
            }
            unint64_t v38 = sub_E9A9DC((uint64_t)v9);
            unint64_t v39 = sub_E9A9E4((uint64_t)v9);
            if (v38 <= v39) {
              unint64_t v40 = v39;
            }
            else {
              unint64_t v40 = v38;
            }
            if (v38 < v39)
            {
              do
                sub_65111C(a2, v38++, 2u);
              while (v40 != v38);
            }
            goto LABEL_80;
          }
        }
        if (v16)
        {
          sub_E990E0(*(void *)(a1 + 104), 0, v9, &v71);
          uint64_t v41 = *(void *)(a1 + 104);
          double v42 = (void *)sub_E9B1DC(a3, i + 1);
          sub_E990E0(v41, 1, v42, &v69);
          sub_46C6C((uint64_t)&v71, *(uint64_t *)v72, (char *)v69, v70, 0xAAAAAAAAAAAAAAABLL * ((v70 - (unsigned char *)v69) >> 2));
          sub_43F48((uint64_t *)&v71, ((double)*(uint64_t *)(a1 + 104) / 100.0), (uint64_t)&__p, 1.0, *(double *)(a1 + 112), 0.1);
          uint64_t v43 = nullsub_1(v9);
          uint64_t v64 = 0;
          long long v65 = 0;
          long long v66 = 0;
          uint64_t v45 = *(const void **)v43;
          uint64_t v44 = *(void *)(v43 + 8);
          int64_t v46 = v44 - *(void *)v43;
          if (v44 == *(void *)v43)
          {
            long double v47 = 0;
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * (v46 >> 2) > 0x1555555555555555) {
              sub_2E00();
            }
            uint64_t v64 = operator new(v46);
            long long v65 = v64;
            long double v47 = (char *)v64 + 4 * (v46 >> 2);
            long long v66 = v47;
            memcpy(v64, v45, v46);
            long long v65 = v47;
          }
          sub_46C6C((uint64_t)&v64, (uint64_t)v47, (char *)__p, *(char **)v68, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v68 - (void)__p) >> 2));
          sub_E9C270(v9);
          sub_E9C190((uint64_t)v9, (char **)&v64, v48);
          unint64_t v49 = sub_E9A9DC((uint64_t)v9);
          unint64_t v50 = sub_E9A9E4((uint64_t)v9);
          if (v49 <= v50) {
            unint64_t v51 = v50;
          }
          else {
            unint64_t v51 = v49;
          }
          if (v49 < v50)
          {
            do
              sub_65111C(a2, v49++, 2u);
            while (v51 != v49);
          }
          if (v64)
          {
            long long v65 = v64;
            operator delete(v64);
          }
          if (__p)
          {
            *(void *)uint64_t v68 = __p;
            operator delete(__p);
          }
          if (v69)
          {
            int v70 = (char *)v69;
            operator delete(v69);
          }
          if (v71)
          {
            *(void *)int v72 = v71;
            operator delete(v71);
          }
        }
        if (v14)
        {
          uint64_t v52 = *(void *)(a1 + 104);
          uint64_t v53 = (void *)sub_E9B1DC(a3, i - 1);
          sub_E990E0(v52, 0, v53, &v71);
          sub_E990E0(*(void *)(a1 + 104), 1, v9, &v69);
          sub_46C6C((uint64_t)&v71, *(uint64_t *)v72, (char *)v69, v70, 0xAAAAAAAAAAAAAAABLL * ((v70 - (unsigned char *)v69) >> 2));
          sub_43F48((uint64_t *)&v71, ((double)*(uint64_t *)(a1 + 104) / 100.0), (uint64_t)&__p, 1.0, *(double *)(a1 + 112), 0.1);
          uint64_t v54 = nullsub_1(v9);
          uint64_t v64 = 0;
          long long v65 = 0;
          long long v66 = 0;
          uint64_t v56 = *(const void **)v54;
          uint64_t v55 = *(void *)(v54 + 8);
          int64_t v57 = v55 - *(void *)v54;
          if (v55 == *(void *)v54)
          {
            uint64_t v59 = 0;
            int v58 = 0;
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * (v57 >> 2) > 0x1555555555555555) {
              sub_2E00();
            }
            int v58 = (char *)operator new(v57);
            uint64_t v59 = &v58[4 * (v57 >> 2)];
            memcpy(v58, v56, v57);
          }
          sub_46C6C((uint64_t)&__p, *(uint64_t *)v68, v58, v59, 0xAAAAAAAAAAAAAAABLL * ((v59 - v58) >> 2));
          sub_E9C270(v9);
          sub_E9C190((uint64_t)v9, (char **)&__p, v60);
          unint64_t v61 = sub_E9A9DC((uint64_t)v9);
          unint64_t v62 = sub_E9A9E4((uint64_t)v9);
          if (v61 <= v62) {
            unint64_t v63 = v62;
          }
          else {
            unint64_t v63 = v61;
          }
          if (v61 < v62)
          {
            do
              sub_65111C(a2, v61++, 2u);
            while (v63 != v61);
          }
          if (v58) {
            operator delete(v58);
          }
          if (__p)
          {
            *(void *)uint64_t v68 = __p;
            operator delete(__p);
          }
LABEL_80:
          if (v69)
          {
            int v70 = (char *)v69;
            operator delete(v69);
          }
          if (v71)
          {
            *(void *)int v72 = v71;
            operator delete(v71);
          }
        }
        if (v73[0])
        {
          v73[1] = v73[0];
          operator delete(v73[0]);
        }
      }
    }
  }
}

void sub_E98F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12)
  {
    operator delete(a12);
    double v23 = a15;
    if (!a15)
    {
LABEL_5:
      double v24 = a18;
      if (!a18) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else
  {
    double v23 = a15;
    if (!a15) {
      goto LABEL_5;
    }
  }
  operator delete(v23);
  double v24 = a18;
  if (!a18)
  {
LABEL_6:
    uint64_t v25 = a21;
    if (!a21) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v24);
  uint64_t v25 = a21;
  if (!a21) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_11:
  operator delete(v25);
  _Unwind_Resume(exception_object);
}

void sub_E990E0(uint64_t a1@<X1>, int a2@<W2>, void *a3@<X3>, void *a4@<X8>)
{
  unint64_t v8 = (uint64_t *)nullsub_1(a3);
  double v9 = fmin((double)a1 / 100.0 / ((double)sub_3C80F8((uint64_t)a3) / 100.0), 0.5);
  if (a2) {
    double v10 = v9;
  }
  else {
    double v10 = 1.0 - v9;
  }
  sub_32F08(v8, a2, 0, a4, v10);
  sub_32F08(v8, a2 ^ 1, 0, __p, v10);
  sub_E9C270(a3);
  sub_E9C190((uint64_t)a3, (char **)__p, v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_E991C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  int v13 = *(void **)v11;
  if (!*(void *)v11) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v11 + 8) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_E99214(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = operator new(0x20uLL);
  long long v13 = xmmword_20B8870;
  strcpy((char *)v12, "RouteLineGeometrySmoother");
  std::string __p = 0;
  double v10 = 0;
  unint64_t v4 = sub_374CDC(a2, (uint64_t)&v12, (uint64_t *)&__p);
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 8) = 0x3FA47AE147AE147BLL;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0x4044000000000000;
  *(void *)(a1 + 32) = 5000;
  *(void *)(a1 + 40) = 0x3FE0000000000000;
  *(_OWORD *)(a1 + 48) = xmmword_20F0EF0;
  *(_OWORD *)(a1 + 64) = xmmword_20F0F00;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  *(_OWORD *)(a1 + 96) = xmmword_20F0F10;
  *(void *)(a1 + 112) = 0x4010000000000000;
  sub_E9939C(a1, v4);
  unint64_t v5 = (void **)__p;
  if (__p)
  {
    unint64_t v6 = v10;
    unint64_t v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      unint64_t v7 = __p;
    }
    double v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  return a1;
}

void sub_E99374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_E9939C(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "enable_route_line_geometry_smoother");
  unint64_t v4 = sub_58070(a2, (uint64_t)__p);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)a1 = v5 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_6;
    }
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a1 != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_6:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "enable_intersecting_line_cleanup");
  unint64_t v6 = sub_58070(a2, (uint64_t)__p);
  if (v6 && (int v7 = *((_DWORD *)v6 + 12), (v7 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 16) = v7 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_12;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a1 + 16) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_12:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91A0;
  strcpy((char *)__p[0], "shift_attenuation_per_meter");
  unint64_t v8 = sub_58070(a2, (uint64_t)__p);
  double v9 = (void *)(a1 + 8);
  if (v8)
  {
    double v9 = v8 + 5;
    if (*((_DWORD *)v8 + 12) != 1) {
      double v9 = (void *)(a1 + 8);
    }
  }
  *(void *)(a1 + 8) = *v9;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8FD0;
  strcpy((char *)__p[0], "minimum_gap_distance_for_smoothing_m");
  double v10 = sub_58070(a2, (uint64_t)__p);
  uint64_t v11 = (void *)(a1 + 40);
  if (v10)
  {
    uint64_t v11 = v10 + 5;
    if (*((_DWORD *)v10 + 12) != 1) {
      uint64_t v11 = (void *)(a1 + 40);
    }
  }
  *(void *)(a1 + 40) = *v11;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "unique_point_threshold_meters");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 72));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "self_intersection_search_distance_m");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 32));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93A0;
  strcpy((char *)__p[0], "max_attenuated_shift_bearing_change");
  uint64_t v12 = sub_58070(a2, (uint64_t)__p);
  long long v13 = (void *)(a1 + 24);
  if (v12)
  {
    long long v13 = v12 + 5;
    if (*((_DWORD *)v12 + 12) != 1) {
      long long v13 = (void *)(a1 + 24);
    }
  }
  *(void *)(a1 + 24) = *v13;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B5EB0;
  strcpy((char *)__p[0], "max_smoothing_gap_distance");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 64));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B8890;
  strcpy((char *)__p[0], "upsample_min_points_per_meter");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 48));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 16;
  strcpy((char *)__p, "upsample_max_gap");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 56));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "simplification_tolerance");
  BOOL v14 = sub_58070(a2, (uint64_t)__p);
  unint64_t v15 = (void *)(a1 + 80);
  if (v14)
  {
    unint64_t v15 = v14 + 5;
    if (*((_DWORD *)v14 + 12) != 1) {
      unint64_t v15 = (void *)(a1 + 80);
    }
  }
  *(void *)(a1 + 80) = *v15;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9380;
  strcpy((char *)__p[0], "enable_center_line_section_transition_smoothing");
  BOOL v16 = sub_58070(a2, (uint64_t)__p);
  if (v16 && (int v17 = *((_DWORD *)v16 + 12), (v17 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 88) = v17 == 4;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_49;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a1 + 88) != 0;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_49;
    }
  }
  operator delete(__p[0]);
LABEL_49:
  HIBYTE(__p[2]) = 13;
  strcpy((char *)__p, "trim_length_m");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 96));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 15;
  strcpy((char *)__p, "smooth_length_m");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 104));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 12;
  strcpy((char *)__p, "bezier_error");
  uint64_t v18 = sub_58070(a2, (uint64_t)__p);
  double v19 = (void *)(a1 + 112);
  if (v18)
  {
    double v19 = v18 + 5;
    if (*((_DWORD *)v18 + 12) != 1) {
      double v19 = (void *)(a1 + 112);
    }
  }
  *(void *)(a1 + 112) = *v19;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_E999CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_E99A20@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  a2[1] = 0;
  unint64_t v4 = a2 + 1;
  a2[2] = 0;
  unint64_t result = sub_E9B898(a1);
  if (result)
  {
    unint64_t v6 = (void *)sub_E9B8B4(a1, 0);
    unint64_t result = sub_E9B02C(v6);
    if (!result)
    {
      _OWORD *v4 = xmmword_20E7B20;
      unint64_t result = sub_E9B898(a1);
      if (result >= 2)
      {
        unint64_t v7 = 1;
        do
        {
          unint64_t v8 = (void *)sub_E9B8B4(a1, v7);
          unint64_t result = sub_E9B02C(v8);
          if (result) {
            break;
          }
          a2[1] = ++v7;
          a2[2] = 0;
          unint64_t result = sub_E9B898(a1);
        }
        while (v7 < result);
      }
    }
  }
  return result;
}

void sub_E99AC4(uint64_t a1, char *a2)
{
  if (*(double *)(a1 + 80) > 0.0)
  {
    sub_E9B8C4(a2, &v19);
    unint64_t v4 = v19;
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 2);
    if (v5 >= 2)
    {
      double v6 = *(double *)(a1 + 80);
      std::string __p = 0;
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      sub_426D8((uint64_t *)&v19, v5, 1, 1, &__p, (uint64_t)&v17, v6);
      if (__p) {
        operator delete(__p);
      }
      std::string __p = 0;
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      sub_E99A20(a2, &v12);
      sub_E99A20(a2, &v10);
      if (v18 <= 1) {
        uint64_t v7 = 1;
      }
      else {
        uint64_t v7 = v18;
      }
      if (v18 >= 2)
      {
        unint64_t v8 = 1;
        do
        {
          sub_E9A5CC(&v10, 1);
          uint64_t v9 = *(void *)((unsigned char *)v17 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v8);
          if ((*(void *)((char *)v17 + (((v8 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v8 - 1)))
          {
            if (!v9) {
              long long v13 = v11;
            }
          }
          else if (v9)
          {
            sub_E97E68((char **)&__p, (long long *)&v12, (long long *)&v10);
          }
          ++v8;
        }
        while (v7 != v8);
      }
      sub_E9BA30(a2, &__p);
      if (__p)
      {
        unint64_t v15 = __p;
        operator delete(__p);
      }
      if (v17) {
        operator delete(v17);
      }
      unint64_t v4 = v19;
    }
    if (v4)
    {
      double v20 = v4;
      operator delete(v4);
    }
  }
}

void sub_E99C48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  long long v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(void *)(v19 - 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_E99C9C(uint64_t a1, int8x8_t *a2, char *a3)
{
  if (*(unsigned char *)a1)
  {
    sub_E97FD8(a3, &v77);
    sub_E9807C(a3, v76);
    if (v78 != (char *)v76[1] || v79 != v76[2])
    {
      unint64_t v6 = sub_E9B1C0(a3);
      if (v6 <= 1) {
        uint64_t v7 = 1;
      }
      else {
        uint64_t v7 = v6;
      }
      if (v6 >= 2)
      {
        uint64_t v18 = 1;
        double v19 = -6.28318531;
        double v20 = 1.0;
        uint64_t v68 = v7;
        do
        {
          long long v21 = (void *)sub_E9B1DC(a3, v18 - 1);
          if (sub_E9B02C(v21) >= 2)
          {
            uint64_t v22 = sub_E9B1DC(a3, v18);
            double v23 = (void *)nullsub_1(v21);
            uint64_t v24 = v23[1];
            uint64_t v25 = -2 - 0x5555555555555555 * ((v24 - *v23) >> 2);
            for (uint64_t i = (unsigned int *)sub_413C0(v23, v25); v25; uint64_t i = (unsigned int *)sub_413C0(v23, v25--))
            {
              unint64_t v27 = *(unsigned int *)(v24 - 8) - (unint64_t)i[1];
              if (sqrt((double)((*(unsigned int *)(v24 - 12) - (unint64_t)*i)
                               * (*(unsigned int *)(v24 - 12) - (unint64_t)*i)
                               + v27 * v27))
                 / 100.0 >= (double)*(uint64_t *)(a1 + 72) / 100.0)
                break;
            }
            uint64_t v28 = (void *)nullsub_1(v21);
            double v29 = (unsigned int *)sub_413C0(v28, v25);
            unsigned int v69 = v29[1];
            unsigned int v70 = *v29;
            uint64_t v30 = *(void *)(nullsub_1(v21) + 8);
            uint64_t v74 = *(unsigned int *)(v30 - 12);
            uint64_t v72 = *(unsigned int *)(v30 - 8);
            int v71 = *(_DWORD *)(v30 - 4);
            int v31 = (unsigned int **)nullsub_1(v22);
            uint64_t v75 = **v31;
            unsigned int v32 = (*v31)[2];
            uint64_t v73 = (*v31)[1];
            uint64_t v33 = (unsigned int **)nullsub_1(v22);
            uint64_t v34 = *v33;
            uint64_t v35 = (unsigned int *)sub_413C0(v33, 1uLL);
            unint64_t v36 = 1;
            if ((unint64_t)(-3 - 0x5555555555555555 * (v33[1] - *v33)) <= 0xFFFFFFFFFFFFFFFDLL)
            {
              unint64_t v36 = 1;
              do
              {
                unint64_t v37 = v34[1] - (unint64_t)v35[1];
                if (sqrt((double)((*v34 - (unint64_t)*v35) * (*v34 - (unint64_t)*v35) + v37 * v37))
                   / 100.0 >= (double)*(uint64_t *)(a1 + 72) / 100.0)
                  break;
                uint64_t v35 = (unsigned int *)sub_413C0(v33, v36++);
              }
              while (v36 < -1 - 0x5555555555555555 * (v33[1] - *v33));
            }
            unint64_t v38 = (void *)nullsub_1(v22);
            unint64_t v39 = (int *)sub_413C0(v38, v36);
            int v41 = *v39;
            unsigned int v40 = v39[1];
            uint64_t v7 = v68;
            if (v74 != v75 || v72 != v73 || v71 != v32)
            {
              double v42 = (((double)v69 - (double)v72) * ((double)v75 - (double)v74)
                   - ((double)v70 - (double)v74) * ((double)v73 - (double)v72))
                  / sqrt(((double)v70 - (double)v74) * ((double)v70 - (double)v74)+ ((double)v69 - (double)v72) * ((double)v69 - (double)v72));
              unsigned int v43 = v73 >= 0xFFFFFFFE ? -2 : v73;
              long double v44 = exp((double)v43 * v19 / 4294967300.0 + 3.14159265);
              long double v45 = atan((v44 - v20 / v44) * 0.5);
              double v46 = v42 * (0.00932288077 / (v20 / cos(v45 * 57.2957795 / 180.0 * 3.14159265)));
              double v47 = fabs(v46);
              if (v47 >= *(double *)(a1 + 40)
                && sqrt((double)(unint64_t)((v74 - v75) * (v74 - v75) + (v72 - v73) * (v72 - v73))) / 100.0 - v47 < (double)*(uint64_t *)(a1 + 64) / 100.0)
              {
                double v48 = v19;
                if (v74 != v70 || (double j = 0.0, v69 != v72))
                {
                  double v50 = -(double)(v70 - v74);
                  if (v74 - v70 < v70 - v74) {
                    double v50 = (double)(v74 - v70);
                  }
                  for (double j = (atan2((double)v72 - (double)v69, v50) + 1.57079633) * 180.0 / 3.14159265;
                        j >= 180.0;
                  for (; j < -180.0; double j = j + 360.0)
                    ;
                }
                if (v41 != v75 || (double k = 0.0, v73 != v40))
                {
                  double v52 = -(double)(v75 - v41);
                  if (v41 - (int)v75 < (v75 - v41)) {
                    double v52 = (double)(v41 - v75);
                  }
                  for (double k = (atan2((double)v40 - (double)v73, v52) + 1.57079633) * 180.0 / 3.14159265;
                        k >= 180.0;
                  for (; k < -180.0; double k = k + 360.0)
                    ;
                }
                sub_440F0(j, k);
                double v19 = v48;
                double v20 = 1.0;
                if (v53 < *(double *)(a1 + 24))
                {
                  uint64_t v54 = sub_E9B1DC(a3, v18 - 1);
                  uint64_t v55 = nullsub_1(v54);
                  unint64_t v78 = 0;
                  uint64_t v79 = 0;
                  unsigned int v77 = 0;
                  int64_t v57 = *(const void **)v55;
                  uint64_t v56 = *(void *)(v55 + 8);
                  int64_t v58 = v56 - *(void *)v55;
                  if (v56 == *(void *)v55)
                  {
                    uint64_t v59 = 0;
                    double v60 = 0;
                  }
                  else
                  {
                    if (0xAAAAAAAAAAAAAAABLL * (v58 >> 2) >= 0x1555555555555556) {
                      sub_2E00();
                    }
                    uint64_t v59 = (char *)operator new(v58);
                    unsigned int v77 = v59;
                    unint64_t v78 = v59;
                    double v60 = &v59[4 * (v58 >> 2)];
                    memcpy(v59, v57, v58);
                  }
                  uint64_t v61 = v18 - 1;
                  if (0xAAAAAAAAAAAAAAABLL * ((v60 - v59) >> 2) >= 2)
                  {
                    do
                    {
                      if (v47 <= 0.0) {
                        break;
                      }
                      uint64_t v62 = v61;
                      unint64_t v63 = (void *)sub_E9B1DC(a3, v61);
                      sub_E97550((double *)a1, v46 >= 0.0, v63, v47);
                      double v47 = v64;
                      unint64_t v65 = sub_E9A9DC((uint64_t)v63);
                      uint64_t v66 = sub_E9A9E4((uint64_t)v63);
                      if (v65 <= v66 + 1) {
                        unint64_t v67 = v66 + 1;
                      }
                      else {
                        unint64_t v67 = v65;
                      }
                      if (v65 < v66 + 1)
                      {
                        do
                          sub_65111C(a2, v65++, 1u);
                        while (v67 != v65);
                      }
                      uint64_t v61 = v62 - 1;
                    }
                    while (v62);
                  }
                  if (v59) {
                    operator delete(v59);
                  }
                }
              }
            }
          }
          ++v18;
        }
        while (v18 != v7);
      }
      if (*(unsigned char *)(a1 + 88)) {
        sub_E98828(a1, a2, a3);
      }
      unint64_t v8 = sub_E9B1C0(a3);
      if (v8)
      {
        unint64_t v9 = v8;
        for (uint64_t m = 0; m != v9; ++m)
        {
          uint64_t v11 = sub_E9B1DC(a3, m);
          unint64_t v12 = sub_E9A9DC(v11);
          uint64_t v13 = sub_E9B1DC(a3, m);
          unint64_t v14 = sub_E9A9E4(v13);
          if (v12 <= v14) {
            unint64_t v15 = v14;
          }
          else {
            unint64_t v15 = v12;
          }
          if (v12 < v14)
          {
            do
            {
              uint64_t v16 = sub_E9B1DC(a3, m);
              int v17 = sub_E9A9D4(v16);
              sub_650FAC((uint64_t)a2, v12++, v17);
            }
            while (v15 != v12);
          }
        }
      }
      if (*(unsigned char *)(a1 + 16)) {
        sub_E97620(a1, a3);
      }
      sub_E98650(a1, a3);
    }
  }
}

void sub_E9A464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E9A498(uint64_t a1, uint64_t a2, char *a3)
{
}

void **sub_E9A4A0(void **a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a2 < 0)
  {
    uint64_t v14 = -a2;
    unint64_t v15 = (unint64_t)a1[2];
    while (v15 < v14)
    {
      v14 -= v15;
      uint64_t v16 = *a1;
      uint64_t v17 = (uint64_t)a1[1] - 1;
      a1[1] = (void *)v17;
      uint64_t v18 = (void *)sub_E9B1DC(v16, v17);
      unint64_t v15 = sub_E9B02C(v18);
      a1[2] = (void *)v15;
      if (v14 <= 0) {
        return a1;
      }
    }
    a1[2] = (void *)(v15 - v14);
    return a1;
  }
  else
  {
    if (a2)
    {
      unint64_t v4 = (unint64_t)a1[1];
      while (v4 < sub_E9B1C0(*a1))
      {
        unint64_t v5 = (void *)sub_E9B1DC(*a1, (uint64_t)a1[1]);
        unint64_t v6 = sub_E9B02C(v5);
        uint64_t v7 = a1[2];
        if ((unint64_t)v7 + v2 < v6)
        {
          a1[2] = (void *)((char *)v7 + v2);
          return a1;
        }
        unint64_t v4 = (unint64_t)a1[1] + 1;
        uint64_t v2 = (uint64_t)v7 + v2 - v6;
        a1[1] = (void *)v4;
        a1[2] = 0;
        if (v2 <= 0) {
          break;
        }
      }
    }
    unint64_t v8 = (unint64_t)a1[1];
    if (v8 < sub_E9B1C0(*a1))
    {
      do
      {
        unint64_t v9 = a1[2];
        double v10 = (void *)sub_E9B1DC(*a1, (uint64_t)a1[1]);
        if (v9 != (void *)sub_E9B02C(v10)) {
          break;
        }
        uint64_t v11 = *a1;
        unint64_t v12 = (unint64_t)a1[1] + 1;
        a1[1] = (void *)v12;
        a1[2] = 0;
      }
      while (v12 < sub_E9B1C0(v11));
    }
    return a1;
  }
}

void **sub_E9A5CC(void **a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a2 < 0)
  {
    uint64_t v14 = -a2;
    unint64_t v15 = (unint64_t)a1[2];
    while (v15 < v14)
    {
      v14 -= v15;
      uint64_t v16 = *a1;
      uint64_t v17 = (uint64_t)a1[1] - 1;
      a1[1] = (void *)v17;
      uint64_t v18 = (void *)sub_E9B8B4(v16, v17);
      unint64_t v15 = sub_E9B02C(v18);
      a1[2] = (void *)v15;
      if (v14 <= 0) {
        return a1;
      }
    }
    a1[2] = (void *)(v15 - v14);
    return a1;
  }
  else
  {
    if (a2)
    {
      unint64_t v4 = (unint64_t)a1[1];
      while (v4 < sub_E9B898(*a1))
      {
        unint64_t v5 = (void *)sub_E9B8B4(*a1, (uint64_t)a1[1]);
        unint64_t v6 = sub_E9B02C(v5);
        uint64_t v7 = a1[2];
        if ((unint64_t)v7 + v2 < v6)
        {
          a1[2] = (void *)((char *)v7 + v2);
          return a1;
        }
        unint64_t v4 = (unint64_t)a1[1] + 1;
        uint64_t v2 = (uint64_t)v7 + v2 - v6;
        a1[1] = (void *)v4;
        a1[2] = 0;
        if (v2 <= 0) {
          break;
        }
      }
    }
    unint64_t v8 = (unint64_t)a1[1];
    if (v8 < sub_E9B898(*a1))
    {
      do
      {
        unint64_t v9 = a1[2];
        double v10 = (void *)sub_E9B8B4(*a1, (uint64_t)a1[1]);
        if (v9 != (void *)sub_E9B02C(v10)) {
          break;
        }
        uint64_t v11 = *a1;
        unint64_t v12 = (unint64_t)a1[1] + 1;
        a1[1] = (void *)v12;
        a1[2] = 0;
      }
      while (v12 < sub_E9B898(v11));
    }
    return a1;
  }
}

double sub_E9A6F8()
{
  byte_25FC4AF = 1;
  word_25FC498 = 65;
  byte_25FC4C7 = 1;
  word_25FC4B0 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25FC4F8 = 0u;
  *(_OWORD *)&qword_25FC508 = 0u;
  dword_25FC518 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25FC4F8, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25FC4F8, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25FC4F8, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25FC4F8, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25FC4D0 = 0;
  qword_25FC4D8 = 0;
  qword_25FC4C8 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25FC4C8 = (uint64_t)v0;
  qword_25FC4D0 = (uint64_t)(v0 + 9);
  qword_25FC4D8 = (uint64_t)(v0 + 9);
  qword_25FC4E0 = 0;
  qword_25FC4E8 = 0;
  unk_25FC4F0 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25FC4E8 = (uint64_t)(v1 + 9);
  unk_25FC4F0 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25FC4E0 = (uint64_t)v1;
  return result;
}

void sub_E9A934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25FC508) {
    sub_20B114C((void **)qword_25FC508);
  }
  unint64_t v37 = (void *)xmmword_25FC4F8;
  *(void *)&xmmword_25FC4F8 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

uint64_t sub_E9A9D4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_E9A9DC(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_E9A9E4(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t sub_E9A9EC(void *a1, uint64_t a2)
{
  return *a1 + 12 * a2;
}

uint64_t sub_E9A9FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t sub_E9AA04(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

uint64_t sub_E9AA0C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

int8x8_t *sub_E9AA14(int8x8_t *a1, unint64_t a2)
{
  return sub_E9AA1C(a1, a2, 1u);
}

int8x8_t *sub_E9AA1C(int8x8_t *a1, unint64_t a2, unsigned int a3)
{
  double result = a1 + 5;
  int8x8_t v5 = a1[6];
  if (!*(void *)&v5) {
    goto LABEL_21;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = a2;
    if (*(void *)&v5 <= a2) {
      unint64_t v7 = a2 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & a2;
  }
  int v8 = *(uint64_t ***)(*(void *)result + 8 * v7);
  if (!v8 || (unint64_t v9 = *v8) == 0)
  {
LABEL_21:
    v13[0] = a2;
    v13[1] = a3;
    return (int8x8_t *)sub_E9C6F0((uint64_t)result, v13, (uint64_t)v13);
  }
  if (v6.u32[0] < 2uLL)
  {
    uint64_t v10 = *(void *)&v5 - 1;
    while (1)
    {
      uint64_t v12 = v9[1];
      if (v12 == a2)
      {
        if (v9[2] == a2) {
          goto LABEL_22;
        }
      }
      else if ((v12 & v10) != v7)
      {
        goto LABEL_21;
      }
      unint64_t v9 = (uint64_t *)*v9;
      if (!v9) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v11 = v9[1];
    if (v11 == a2) {
      break;
    }
    if (v11 >= *(void *)&v5) {
      v11 %= *(void *)&v5;
    }
    if (v11 != v7) {
      goto LABEL_21;
    }
LABEL_11:
    unint64_t v9 = (uint64_t *)*v9;
    if (!v9) {
      goto LABEL_21;
    }
  }
  if (v9[2] != a2) {
    goto LABEL_11;
  }
LABEL_22:
  *((_DWORD *)v9 + 6) |= a3;
  return result;
}

int8x8_t *sub_E9AB38(int8x8_t *a1, unint64_t a2)
{
  return sub_E9AA1C(a1, a2, 2u);
}

uint64_t sub_E9AB40(int8x8_t *a1, unint64_t a2)
{
  int8x8_t v2 = a1[6];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  int8x8_t v5 = *(uint64_t ****)(*(void *)&a1[5] + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint8x8_t v6 = *v5;
  if (!v6) {
    return 0;
  }
  if (v3.u32[0] < 2uLL)
  {
    uint64_t v7 = *(void *)&v2 - 1;
    while (1)
    {
      unint64_t v9 = v6[1];
      if (v9 == (uint64_t *)a2)
      {
        if (v6[2] == (uint64_t *)a2) {
          return *((unsigned int *)v6 + 6);
        }
      }
      else if (((unint64_t)v9 & v7) != v4)
      {
        return 0;
      }
      uint8x8_t v6 = (uint64_t **)*v6;
      if (!v6) {
        return 0;
      }
    }
  }
  while (1)
  {
    unint64_t v8 = (unint64_t)v6[1];
    if (v8 == a2) {
      break;
    }
    if (v8 >= *(void *)&v2) {
      v8 %= *(void *)&v2;
    }
    if (v8 != v4) {
      return 0;
    }
LABEL_11:
    uint8x8_t v6 = (uint64_t **)*v6;
    if (!v6) {
      return 0;
    }
  }
  if (v6[2] != (uint64_t *)a2) {
    goto LABEL_11;
  }
  return *((unsigned int *)v6 + 6);
}

char *sub_E9AC1C(uint64_t a1, uint64_t a2)
{
  return sub_E9AC24(a1 + 80, a2);
}

char *sub_E9AC24(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= *(void *)(a1 + 16))
  {
    int v14 = sub_E9CA1C((void **)a1, a2);
  }
  else
  {
    long long v5 = *(_OWORD *)a2;
    long long v6 = *(_OWORD *)(a2 + 16);
    *(void *)(v4 + 32) = 0;
    *(_OWORD *)unint64_t v4 = v5;
    *(_OWORD *)(v4 + 16) = v6;
    *(void *)(v4 + 40) = 0;
    *(void *)(v4 + 48) = 0;
    unint64_t v8 = *(unsigned char **)(a2 + 32);
    uint64_t v7 = *(unsigned char **)(a2 + 40);
    int64_t v9 = v7 - v8;
    if (v7 != v8)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v9 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      uint64_t v10 = (char *)operator new(v9);
      *(void *)(v4 + 32) = v10;
      *(void *)(v4 + 40) = v10;
      unint64_t v11 = &v10[4 * (v9 >> 2)];
      *(void *)(v4 + 48) = v11;
      memcpy(v10, v8, v9);
      *(void *)(v4 + 40) = v11;
    }
    long long v12 = *(_OWORD *)(a2 + 56);
    long long v13 = *(_OWORD *)(a2 + 72);
    *(_DWORD *)(v4 + 87) = *(_DWORD *)(a2 + 87);
    *(_OWORD *)(v4 + 72) = v13;
    *(_OWORD *)(v4 + 56) = v12;
    int v14 = (char *)(v4 + 96);
    *(void *)(a1 + 8) = v4 + 96;
  }
  *(void *)(a1 + 8) = v14;
  return v14 - 96;
}

void sub_E9AD1C(_Unwind_Exception *exception_object)
{
  long long v5 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 40) = v5;
    operator delete(v5);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

void sub_E9AD3C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 88);
  if (0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 5) > a2)
  {
    uint64_t v5 = v2 + 96 * a2;
    while (v3 != v5)
    {
      long long v6 = *(void **)(v3 - 64);
      if (v6)
      {
        *(void *)(v3 - 56) = v6;
        operator delete(v6);
      }
      v3 -= 96;
    }
    *(void *)(a1 + 88) = v5;
  }
}

char *sub_E9ADB4(uint64_t a1, uint64_t a2)
{
  return sub_E9ADBC(a1 + 80, a2);
}

char *sub_E9ADBC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >= *(void *)(a1 + 16))
  {
    long long v13 = sub_E9CD2C((void **)a1, a2);
  }
  else
  {
    long long v5 = *(_OWORD *)a2;
    *(void *)(v4 + 16) = 0;
    *(_OWORD *)unint64_t v4 = v5;
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 32) = 0;
    uint64_t v7 = *(unsigned char **)(a2 + 16);
    long long v6 = *(unsigned char **)(a2 + 24);
    int64_t v8 = v6 - v7;
    if (v6 != v7)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v8 >> 2) >= 0x1555555555555556) {
        sub_2E00();
      }
      int64_t v9 = (char *)operator new(v8);
      *(void *)(v4 + 16) = v9;
      *(void *)(v4 + 24) = v9;
      uint64_t v10 = &v9[4 * (v8 >> 2)];
      *(void *)(v4 + 32) = v10;
      memcpy(v9, v7, v8);
      *(void *)(v4 + 24) = v10;
    }
    long long v11 = *(_OWORD *)(a2 + 40);
    long long v12 = *(_OWORD *)(a2 + 56);
    *(_DWORD *)(v4 + 71) = *(_DWORD *)(a2 + 71);
    *(_OWORD *)(v4 + 56) = v12;
    *(_OWORD *)(v4 + 40) = v11;
    long long v13 = (char *)(v4 + 80);
    *(void *)(a1 + 8) = v4 + 80;
  }
  *(void *)(a1 + 8) = v13;
  return v13 - 80;
}

void sub_E9AEB4(_Unwind_Exception *exception_object)
{
  long long v5 = *v2;
  if (*v2)
  {
    *(void *)(v3 + 24) = v5;
    operator delete(v5);
  }
  *(void *)(v1 + 8) = v3;
  _Unwind_Resume(exception_object);
}

uint64_t sub_E9AED4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, char **a5)
{
  double v9 = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  if ((char **)a1 == a5)
  {
    long long v11 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    sub_31AF54((void *)a1, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 2));
    uint64_t v10 = *(unsigned int **)a1;
    long long v11 = *(unsigned int **)(a1 + 8);
  }
  char v15 = 1;
  uint64_t v16 = 0;
  v14[0] = &v16;
  v14[1] = &v15;
  sub_E9C280(v10, v11, v14, v9);
  *(void *)(a1 + 24) = v16;
  *(_DWORD *)(a1 + 40) = *a2;
  *(void *)&long long v12 = 0xFFFFFFFF00000000;
  *((void *)&v12 + 1) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 44) = v12;
  *(_OWORD *)(a1 + 60) = v12;
  *(void *)(a1 + 80) = a3;
  *(void *)(a1 + 88) = a4;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  return a1;
}

void sub_E9AFA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_E9AFC4(uint64_t a1, uint64_t a2)
{
  int v6 = *(_DWORD *)(a2 + 32);
  uint64_t v3 = sub_E9AED4(a1, &v6, *(void *)a2, *(void *)(a2 + 16), (char **)(*(void *)(a2 + 80) + 32));
  *(void *)(v3 + 96) = *(void *)(a2 + 8);
  *(void *)(v3 + 104) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 80);
  __n128 result = *(__n128 *)v4;
  *(_OWORD *)(v3 + 60) = *(_OWORD *)(v4 + 16);
  *(__n128 *)(v3 + 44) = result;
  return result;
}

unint64_t sub_E9B02C(void *a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
}

uint64_t sub_E9B048(uint64_t a1, uint64_t *a2)
{
  int v4 = *((_DWORD *)a2 + 8);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[10];
  double v8 = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  if (v7 + 16 == a1)
  {
    uint64_t v10 = 0;
    double v9 = 0;
  }
  else
  {
    sub_31AF54((void *)a1, *(char **)(v7 + 16), *(char **)(v7 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 24) - *(void *)(v7 + 16)) >> 2));
    double v9 = *(unsigned int **)a1;
    uint64_t v10 = *(unsigned int **)(a1 + 8);
  }
  char v14 = 1;
  uint64_t v15 = 0;
  v13[0] = &v15;
  v13[1] = &v14;
  sub_E9C280(v9, v10, v13, v8);
  *(void *)(a1 + 24) = v15;
  *(_DWORD *)(a1 + 40) = v4;
  *(void *)&long long v11 = 0xFFFFFFFF00000000;
  *((void *)&v11 + 1) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 44) = v11;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 80) = a2[1];
  *(void *)(a1 + 88) = a2[3];
  *(_OWORD *)(a1 + 44) = *(_OWORD *)a2[10];
  return a1;
}

void sub_E9B144(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E9B160(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_E9D03C(a1, a2);
    a1[1] = result;
  }
  else
  {
    sub_E9D21C(a1[1], a2);
    uint64_t result = v3 + 136;
    a1[1] = v3 + 136;
    a1[1] = v3 + 136;
  }
  return result;
}

void sub_E9B1B8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

unint64_t sub_E9B1C0(void *a1)
{
  return 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(a1[1] - *a1) >> 3);
}

uint64_t sub_E9B1DC(void *a1, uint64_t a2)
{
  return *a1 + 136 * a2;
}

char *sub_E9B1EC@<X0>(char *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(char ***)result;
  unint64_t v3 = (char *)*((void *)result + 1);
  if (*(char **)result == v3) {
    return result;
  }
  unint64_t v5 = v3 - (char *)v2 - 136;
  if (v5 >= 0x88)
  {
    int v8 = 0;
    int v9 = 0;
    unint64_t v10 = v5 / 0x88 + 1;
    uint64_t v7 = &v2[17 * (v10 & 0x3FFFFFFFFFFFFFELL)];
    long long v11 = (uint64_t *)(v2 + 17);
    uint64_t v12 = v10 & 0x3FFFFFFFFFFFFFELL;
    do
    {
      uint64_t v14 = *(v11 - 17);
      uint64_t v13 = *(v11 - 16);
      uint64_t v16 = *v11;
      uint64_t v15 = v11[1];
      v11 += 34;
      v8 -= 1431655765 * ((unint64_t)(v13 - v14) >> 2);
      v9 -= 1431655765 * ((unint64_t)(v15 - v16) >> 2);
      v12 -= 2;
    }
    while (v12);
    int v6 = v9 + v8;
    if (v10 == (v10 & 0x3FFFFFFFFFFFFFELL)) {
      goto LABEL_8;
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = *(char ***)result;
  }
  do
  {
    uint64_t v18 = *v7;
    uint64_t v17 = v7[1];
    v7 += 17;
    v6 -= 1431655765 * ((unint64_t)(v17 - v18) >> 2);
  }
  while (v7 != (char **)v3);
LABEL_8:
  if (v6)
  {
    int v19 = v6;
    if (v6 < 0) {
      sub_2E00();
    }
    double v20 = (char *)operator new(12 * v6);
    *a2 = v20;
    a2[1] = v20;
    a2[2] = &v20[12 * v19];
  }
  do
  {
    uint64_t result = sub_46C6C((uint64_t)a2, a2[1], *v2, v2[1], 0xAAAAAAAAAAAAAAABLL * ((v2[1] - *v2) >> 2));
    v2 += 17;
  }
  while (v2 != (char **)v3);
  return result;
}

void sub_E9B334(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_E9B354(void *a1, char **a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  int v19 = 0;
  double v20 = 0;
  std::string __p = 0;
  uint64_t v4 = v3 - v2;
  if (v3 != v2)
  {
    if (v4 < 0) {
      sub_2E00();
    }
    int v6 = (__n128 *)operator new(v3 - v2);
    std::string __p = v6;
    int v19 = v6;
    double v20 = &v6[v4 >> 4];
    do
    {
      uint64_t v7 = *a1 + 12 * *((void *)v2 + 1);
      v21.n128_u64[0] = *a1 + 12 * *(void *)v2;
      v21.n128_u64[1] = v7;
      int v6 = sub_E9C400((__n128 **)&__p, (uint64_t)v6, &v21) + 1;
      v2 += 16;
    }
    while (v2 != v3);
    int v9 = (__n128 *)__p;
    int v8 = v19;
    if (__p != v19)
    {
      unint64_t v10 = *(char **)__p;
      long long v11 = (char *)*((void *)__p + 1);
      if ((char *)a1[1] != v11)
      {
        uint64_t v12 = (char *)*((void *)__p + 1);
        long long v11 = (char *)a1[1];
        do
        {
          while (1)
          {
            if (v9 != v19 && (unint64_t)v12 >= v9->n128_u64[0])
            {
              uint64_t v14 = (char *)v9->n128_u64[1];
              if (v14 >= v12) {
                break;
              }
            }
            uint64_t v13 = *(void *)v12;
            *((_DWORD *)v10 + 2) = *((_DWORD *)v12 + 2);
            *(void *)unint64_t v10 = v13;
            v10 += 12;
            long long v11 = (char *)a1[1];
            v12 += 12;
            if (v12 == v11) {
              goto LABEL_13;
            }
          }
          ++v9;
          uint64_t v12 = v14;
        }
        while (v14 != v11);
      }
LABEL_13:
      if (v10 != v11)
      {
        uint64_t v15 = v10;
        int64_t v16 = v11 - v10;
        int64_t v17 = v11 - &v15[v16];
        if (v11 != &v15[v16]) {
          memmove(v15, &v15[v16], v11 - &v15[v16]);
        }
        a1[1] = &v15[v17];
      }
      int v8 = (__n128 *)__p;
    }
    if (v8)
    {
      int v19 = v8;
      operator delete(v8);
    }
  }
}

void sub_E9B4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E9B4E0(void *a1, void *a2)
{
  if (*a2 != a2[1])
  {
    unint64_t v4 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(a1[1] - *a1) >> 3);
    std::string __p = 0;
    unint64_t v38 = 0;
    uint64_t v39 = 0;
    sub_E9D3CC(&v35, v4, (uint64_t)&__p);
    if (__p)
    {
      unint64_t v38 = __p;
      operator delete(__p);
    }
    unint64_t v5 = (void *)*a2;
    uint64_t v33 = (void *)a2[1];
    if ((void *)*a2 != v33)
    {
      while (1)
      {
        unint64_t v6 = v5[1];
        uint64_t v7 = v5[4];
        uint64_t v8 = v6 <= v7 + 1 ? v7 + 1 : v5[1];
        uint64_t v34 = v5;
        if (v6 < v7 + 1) {
          break;
        }
LABEL_6:
        v5 += 6;
        if (v5 == v33) {
          goto LABEL_37;
        }
      }
      while (1)
      {
        if (v6 >= 0xAAAAAAAAAAAAAAABLL * ((v36 - (unsigned char *)v35) >> 3)) {
          goto LABEL_14;
        }
        if (v6 == v5[1])
        {
          uint64_t v10 = v5[2];
          if (v6 != v5[4]) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v10 = 0;
          if (v6 != v5[4])
          {
LABEL_18:
            unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*a1 + 136 * v6 + 8) - *(void *)(*a1 + 136 * v6)) >> 2);
            uint64_t v12 = (char *)v35 + 24 * v6;
            uint64_t v14 = (void *)*((void *)v12 + 1);
            unint64_t v13 = *((void *)v12 + 2);
            if ((unint64_t)v14 >= v13) {
              goto LABEL_22;
            }
            goto LABEL_12;
          }
        }
        unint64_t v11 = v5[5];
        uint64_t v12 = (char *)v35 + 24 * v6;
        uint64_t v14 = (void *)*((void *)v12 + 1);
        unint64_t v13 = *((void *)v12 + 2);
        if ((unint64_t)v14 >= v13)
        {
LABEL_22:
          uint64_t v15 = *(void **)v12;
          uint64_t v16 = ((uint64_t)v14 - *(void *)v12) >> 4;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 60) {
            sub_2E00();
          }
          uint64_t v18 = v13 - (void)v15;
          if (v18 >> 3 > v17) {
            unint64_t v17 = v18 >> 3;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19 >> 60) {
            sub_188D718();
          }
          double v20 = (char *)operator new(16 * v19);
          __n128 v21 = &v20[16 * v16];
          *(void *)__n128 v21 = v10;
          *((void *)v21 + 1) = v11;
          if (v14 == v15)
          {
            int v9 = v21 + 16;
            *(void *)uint64_t v12 = v21;
            *((void *)v12 + 1) = v21 + 16;
            *((void *)v12 + 2) = &v20[16 * v19];
            if (v15) {
              goto LABEL_33;
            }
          }
          else
          {
            uint64_t v22 = &v20[16 * v16];
            do
            {
              double v23 = v22 - 16;
              *((_OWORD *)v22 - 1) = *((_OWORD *)v14 - 1);
              v14 -= 2;
              v22 -= 16;
            }
            while (v14 != v15);
            int v9 = v21 + 16;
            *(void *)uint64_t v12 = v23;
            *((void *)v12 + 1) = v21 + 16;
            *((void *)v12 + 2) = &v20[16 * v19];
            if (v15) {
LABEL_33:
            }
              operator delete(v15);
          }
          unint64_t v5 = v34;
          goto LABEL_13;
        }
LABEL_12:
        *uint64_t v14 = v10;
        v14[1] = v11;
        int v9 = v14 + 2;
LABEL_13:
        *((void *)v12 + 1) = v9;
LABEL_14:
        if (++v6 == v8) {
          goto LABEL_6;
        }
      }
    }
LABEL_37:
    uint64_t v24 = v36;
    if (v36 != v35)
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = (v36 - (unsigned char *)v35) / 24;
      do
      {
        sub_E9B354((void *)(*a1 + v26), (char **)((char *)v35 + v25));
        v26 += 136;
        v25 += 24;
        --v27;
      }
      while (v27);
      uint64_t v24 = (char *)v35;
    }
    if (v24)
    {
      uint64_t v28 = v36;
      double v29 = v24;
      if (v36 != v24)
      {
        uint64_t v30 = v36;
        do
        {
          unsigned int v32 = (void *)*((void *)v30 - 3);
          v30 -= 24;
          int v31 = v32;
          if (v32)
          {
            *((void *)v28 - 2) = v31;
            operator delete(v31);
          }
          uint64_t v28 = v30;
        }
        while (v30 != v24);
        double v29 = v35;
      }
      unint64_t v36 = v24;
      operator delete(v29);
    }
  }
}

void sub_E9B7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E9B7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_E9B810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_E9B824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E9B838(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_E9D538(a1, a2);
    a1[1] = result;
  }
  else
  {
    sub_E9D718(a1[1], a2);
    uint64_t result = v3 + 120;
    a1[1] = v3 + 120;
    a1[1] = v3 + 120;
  }
  return result;
}

void sub_E9B890(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

unint64_t sub_E9B898(void *a1)
{
  return 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 3);
}

uint64_t sub_E9B8B4(void *a1, uint64_t a2)
{
  return *a1 + 120 * a2;
}

char *sub_E9B8C4@<X0>(char *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(char ***)result;
  unint64_t v3 = (char *)*((void *)result + 1);
  if (*(char **)result == v3) {
    return result;
  }
  unint64_t v5 = v3 - (char *)v2 - 120;
  if (v5 >= 0x78)
  {
    int v8 = 0;
    int v9 = 0;
    unint64_t v10 = v5 / 0x78 + 1;
    uint64_t v7 = &v2[15 * (v10 & 0x7FFFFFFFFFFFFFELL)];
    unint64_t v11 = v2 + 16;
    uint64_t v12 = v10 & 0x7FFFFFFFFFFFFFELL;
    do
    {
      v8 -= 1431655765 * ((*(v11 - 15) - *(v11 - 16)) >> 2);
      v9 -= 1431655765 * ((*v11 - *(v11 - 1)) >> 2);
      v11 += 30;
      v12 -= 2;
    }
    while (v12);
    int v6 = v9 + v8;
    if (v10 == (v10 & 0x7FFFFFFFFFFFFFELL)) {
      goto LABEL_8;
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v7 = *(char ***)result;
  }
  do
  {
    uint64_t v14 = *v7;
    unint64_t v13 = v7[1];
    v7 += 15;
    v6 -= 1431655765 * ((unint64_t)(v13 - v14) >> 2);
  }
  while (v7 != (char **)v3);
LABEL_8:
  if (v6)
  {
    int v15 = v6;
    if (v6 < 0) {
      sub_2E00();
    }
    uint64_t v16 = (char *)operator new(12 * v6);
    *a2 = v16;
    a2[1] = v16;
    a2[2] = &v16[12 * v15];
  }
  do
  {
    uint64_t result = sub_46C6C((uint64_t)a2, a2[1], *v2, v2[1], 0xAAAAAAAAAAAAAAABLL * ((v2[1] - *v2) >> 2));
    v2 += 15;
  }
  while (v2 != (char **)v3);
  return result;
}

void sub_E9BA10(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_E9BA30(void *a1, void *a2)
{
  if (*a2 != a2[1])
  {
    unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 3);
    std::string __p = 0;
    unint64_t v38 = 0;
    uint64_t v39 = 0;
    sub_E9D3CC(&v35, v4, (uint64_t)&__p);
    if (__p)
    {
      unint64_t v38 = __p;
      operator delete(__p);
    }
    unint64_t v5 = (void *)*a2;
    uint64_t v33 = (void *)a2[1];
    if ((void *)*a2 != v33)
    {
      while (1)
      {
        unint64_t v6 = v5[1];
        uint64_t v7 = v5[4];
        uint64_t v8 = v6 <= v7 + 1 ? v7 + 1 : v5[1];
        uint64_t v34 = v5;
        if (v6 < v7 + 1) {
          break;
        }
LABEL_6:
        v5 += 6;
        if (v5 == v33) {
          goto LABEL_37;
        }
      }
      while (1)
      {
        if (v6 >= 0xAAAAAAAAAAAAAAABLL * ((v36 - (unsigned char *)v35) >> 3)) {
          goto LABEL_14;
        }
        if (v6 == v5[1])
        {
          uint64_t v10 = v5[2];
          if (v6 != v5[4]) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v10 = 0;
          if (v6 != v5[4])
          {
LABEL_18:
            unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*a1 + 120 * v6 + 8) - *(void *)(*a1 + 120 * v6)) >> 2);
            uint64_t v12 = (char *)v35 + 24 * v6;
            uint64_t v14 = (void *)*((void *)v12 + 1);
            unint64_t v13 = *((void *)v12 + 2);
            if ((unint64_t)v14 >= v13) {
              goto LABEL_22;
            }
            goto LABEL_12;
          }
        }
        unint64_t v11 = v5[5];
        uint64_t v12 = (char *)v35 + 24 * v6;
        uint64_t v14 = (void *)*((void *)v12 + 1);
        unint64_t v13 = *((void *)v12 + 2);
        if ((unint64_t)v14 >= v13)
        {
LABEL_22:
          int v15 = *(void **)v12;
          uint64_t v16 = ((uint64_t)v14 - *(void *)v12) >> 4;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 60) {
            sub_2E00();
          }
          uint64_t v18 = v13 - (void)v15;
          if (v18 >> 3 > v17) {
            unint64_t v17 = v18 >> 3;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19 >> 60) {
            sub_188D718();
          }
          double v20 = (char *)operator new(16 * v19);
          __n128 v21 = &v20[16 * v16];
          *(void *)__n128 v21 = v10;
          *((void *)v21 + 1) = v11;
          if (v14 == v15)
          {
            int v9 = v21 + 16;
            *(void *)uint64_t v12 = v21;
            *((void *)v12 + 1) = v21 + 16;
            *((void *)v12 + 2) = &v20[16 * v19];
            if (v15) {
              goto LABEL_33;
            }
          }
          else
          {
            uint64_t v22 = &v20[16 * v16];
            do
            {
              double v23 = v22 - 16;
              *((_OWORD *)v22 - 1) = *((_OWORD *)v14 - 1);
              v14 -= 2;
              v22 -= 16;
            }
            while (v14 != v15);
            int v9 = v21 + 16;
            *(void *)uint64_t v12 = v23;
            *((void *)v12 + 1) = v21 + 16;
            *((void *)v12 + 2) = &v20[16 * v19];
            if (v15) {
LABEL_33:
            }
              operator delete(v15);
          }
          unint64_t v5 = v34;
          goto LABEL_13;
        }
LABEL_12:
        *uint64_t v14 = v10;
        v14[1] = v11;
        int v9 = v14 + 2;
LABEL_13:
        *((void *)v12 + 1) = v9;
LABEL_14:
        if (++v6 == v8) {
          goto LABEL_6;
        }
      }
    }
LABEL_37:
    uint64_t v24 = v36;
    if (v36 != v35)
    {
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = (v36 - (unsigned char *)v35) / 24;
      do
      {
        sub_E9B354((void *)(*a1 + v26), (char **)((char *)v35 + v25));
        v26 += 120;
        v25 += 24;
        --v27;
      }
      while (v27);
      uint64_t v24 = (char *)v35;
    }
    if (v24)
    {
      uint64_t v28 = v36;
      double v29 = v24;
      if (v36 != v24)
      {
        uint64_t v30 = v36;
        do
        {
          unsigned int v32 = (void *)*((void *)v30 - 3);
          v30 -= 24;
          int v31 = v32;
          if (v32)
          {
            *((void *)v28 - 2) = v31;
            operator delete(v31);
          }
          uint64_t v28 = v30;
        }
        while (v30 != v24);
        double v29 = v35;
      }
      unint64_t v36 = v24;
      operator delete(v29);
    }
  }
}

void sub_E9BD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_E9BD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_E9BD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

void sub_E9BD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_36094((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E9BD88(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  if (a1 != a2) {
    sub_31AF54((void *)a1, *(char **)a2, *(char **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

void sub_E9BDF8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_E9BE14(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    sub_31AF54(a1, *(char **)a2, *(char **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    a1[3] = *(void *)(a2 + 24);
    a1[4] = *(void *)(a2 + 32);
  }
  return a1;
}

char *sub_E9BE78(char *result, unsigned int *a2, int a3)
{
  unint64_t v4 = result;
  uint64_t v5 = *((void *)result + 1);
  if (*(void *)result != v5)
  {
    unsigned int v6 = *a2;
    unsigned int v8 = *(_DWORD *)(v5 - 12);
    unsigned int v7 = *(_DWORD *)(v5 - 8);
    if (v8 == *a2 && a3 && v7 == a2[1]) {
      return result;
    }
    BOOL v9 = v8 == -1 && v7 == -1;
    if (v9 || ((unsigned int v10 = a2[1], v6 == -1) ? (v11 = v10 == -1) : (v11 = 0), v11))
    {
      uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_19;
    }
    long double v12 = exp(3.14159265 - (double)v7 * 6.28318531 / 4294967300.0);
    long double v13 = atan((v12 - 1.0 / v12) * 0.5) * 57.2957795 * 0.0174532925;
    v14.i64[0] = v8;
    v14.i64[1] = v6;
    long double v15 = exp(3.14159265 - (double)v10 * 6.28318531 / 4294967300.0);
    long double v16 = atan((v15 - 1.0 / v15) * 0.5) * 57.2957795 * 0.0174532925;
    int64x2_t v17 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v14), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    double v29 = vsubq_f64((float64x2_t)v17, (float64x2_t)vdupq_laneq_s64(v17, 1)).f64[0];
    long double v18 = sin((v13 - v16) * 0.5);
    long double v19 = v18 * v18;
    double v20 = cos(v13);
    long double v21 = v20 * cos(v16);
    long double v22 = sin(0.5 * v29);
    long double v23 = atan2(sqrt(v22 * v22 * v21 + v19), sqrt(1.0 - (v22 * v22 * v21 + v19)));
    double v24 = (v23 + v23) * 6372797.56 * 100.0;
    if (v24 >= 0.0)
    {
      double v25 = v24;
      if (v24 < 4.50359963e15)
      {
        uint64_t v26 = (uint64_t)(v24 + v24) + 1;
LABEL_25:
        double v25 = (double)(v26 >> 1);
      }
    }
    else
    {
      double v25 = v24;
      if (v24 > -4.50359963e15)
      {
        uint64_t v26 = (uint64_t)(v24 + v24);
        if (v26 >= 1) {
          --v26;
        }
        goto LABEL_25;
      }
    }
    if (v25 < 9.22337204e18)
    {
      if (v24 >= 0.0)
      {
        if (v24 < 4.50359963e15)
        {
          uint64_t v28 = (uint64_t)(v24 + v24) + 1;
LABEL_35:
          double v24 = (double)(v28 >> 1);
        }
      }
      else if (v24 > -4.50359963e15)
      {
        uint64_t v28 = (uint64_t)(v24 + v24);
        if (v28 >= 1) {
          --v28;
        }
        goto LABEL_35;
      }
      uint64_t v27 = (uint64_t)v24;
      goto LABEL_19;
    }
    uint64_t v27 = 0x7FFFFFFFFFFFFFFELL;
LABEL_19:
    *((void *)v4 + 3) += v27;
  }

  return sub_30C0C((char **)v4, (uint64_t *)a2);
}

void sub_E9C190(uint64_t a1, char **a2, double a3)
{
  if ((char **)a1 != a2) {
    sub_31AF54((void *)a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 2));
  }
  char v5 = 1;
  uint64_t v6 = 0;
  v4[0] = &v6;
  v4[1] = &v5;
  sub_E9C280(*(unsigned int **)a1, *(unsigned int **)(a1 + 8), v4, a3);
  *(void *)(a1 + 24) = v6;
}

void sub_E9C210(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[4];
  if (v3 == 0x7FFFFFFFFFFFFFFFLL || v3 > a3)
  {
    sub_443A4(a2, a3, a1);
    a1[4] = a3;
  }
}

BOOL sub_E9C25C(uint64_t a1)
{
  return *(void *)(a1 + 32) != 0x7FFFFFFFFFFFFFFFLL;
}

void *sub_E9C270(void *result)
{
  result[1] = *result;
  result[3] = 0;
  return result;
}

void sub_E9C280(unsigned int *a1, unsigned int *a2, void **a3, double a4)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1 + 3; i != a2; i += 3)
    {
      BOOL v8 = *(i - 3) == -1 && *(i - 2) == -1;
      if (v8 || (*i == -1 ? (BOOL v9 = i[1] == -1) : (BOOL v9 = 0), v9))
      {
        uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_5;
      }
      sub_33150((uint64_t)(i - 3), i, a4);
      a4 = v10 * 100.0;
      if (a4 >= 0.0)
      {
        double v11 = a4;
        if (a4 < 4.50359963e15)
        {
          uint64_t v12 = (uint64_t)(a4 + a4) + 1;
LABEL_21:
          double v11 = (double)(v12 >> 1);
        }
      }
      else
      {
        double v11 = a4;
        if (a4 > -4.50359963e15)
        {
          uint64_t v12 = (uint64_t)(a4 + a4);
          if (v12 >= 1) {
            --v12;
          }
          goto LABEL_21;
        }
      }
      if (v11 < 9.22337204e18)
      {
        if (a4 >= 0.0)
        {
          if (a4 < 4.50359963e15)
          {
            uint64_t v13 = (uint64_t)(a4 + a4) + 1;
            goto LABEL_31;
          }
        }
        else if (a4 > -4.50359963e15)
        {
          uint64_t v13 = (uint64_t)(a4 + a4);
          if (v13 >= 1) {
            --v13;
          }
LABEL_31:
          a4 = (double)(v13 >> 1);
        }
        uint64_t v7 = (uint64_t)a4;
        goto LABEL_5;
      }
      uint64_t v7 = 0x7FFFFFFFFFFFFFFELL;
LABEL_5:
      **a3 += v7;
    }
  }
}

__n128 *sub_E9C400(__n128 **a1, uint64_t a2, __n128 *a3)
{
  char v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 4;
  BOOL v9 = (__n128 *)((char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  unint64_t v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    unint64_t v29 = ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v29 >> 60) {
      sub_2E00();
    }
    uint64_t v30 = v10 - (void)v5;
    if (v30 >> 3 > v29) {
      unint64_t v29 = v30 >> 3;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v29;
    }
    double v48 = a1 + 2;
    if (v31)
    {
      if (v31 >> 60) {
        sub_188D718();
      }
      unsigned int v32 = (__n128 *)operator new(16 * v31);
    }
    else
    {
      unsigned int v32 = 0;
    }
    long double v44 = v32;
    long double v45 = &v32[v8];
    double v46 = v45;
    double v47 = (char *)&v32[v31];
    sub_8F6DD0((uint64_t)&v44, a3);
    uint64_t v33 = v45;
    uint64_t v34 = *a1;
    uint64_t v35 = v45;
    if (*a1 != v9)
    {
      unint64_t v36 = v9;
      unint64_t v37 = v45;
      do
      {
        uint64_t v35 = v37 - 1;
        v37[-1] = v36[-1];
        --v36;
        --v37;
      }
      while (v36 != v34);
    }
    long double v45 = v35;
    unint64_t v38 = a1[1];
    uint64_t v39 = v46;
    if (v38 != v9)
    {
      do
      {
        __n128 v40 = *v9++;
        *v39++ = v40;
      }
      while (v9 != v38);
      uint64_t v35 = v45;
      BOOL v9 = a1[1];
    }
    int v41 = *a1;
    *a1 = v35;
    a1[1] = v39;
    double v42 = (char *)a1[2];
    a1[2] = (__n128 *)v47;
    double v46 = v9;
    double v47 = v42;
    long double v44 = v41;
    long double v45 = v41;
    if (v9 != v41) {
      double v46 = (__n128 *)((char *)v9 + (((char *)v41 - (char *)v9 + 15) & 0xFFFFFFFFFFFFFFF0));
    }
    if (v41) {
      operator delete(v41);
    }
    return v33;
  }
  else if (v9 == (__n128 *)v6)
  {
    *BOOL v9 = *a3;
    a1[1] = v9 + 1;
  }
  else
  {
    double v11 = v9 + 1;
    unint64_t v12 = v6 - 16;
    uint64_t v13 = a1[1];
    if (v6 >= 0x10)
    {
      uint64x2_t v14 = (long long *)(v6 - 16);
      uint64_t v13 = a1[1];
      do
      {
        __n128 v15 = (__n128)*v14++;
        *v13++ = v15;
      }
      while ((unint64_t)v14 < v6);
    }
    a1[1] = v13;
    if ((__n128 *)v6 != v11)
    {
      unint64_t v16 = v6 - (void)v11;
      unint64_t v17 = v6 - (void)v11 - 16;
      if (v17 < 0xD0
        || v6 - (v16 & 0xFFFFFFFFFFFFFFF0) < v12
        && (unint64_t)v5->n128_u64 + v16 + (v7 & 0xFFFFFFFFFFFFFFF0) - (v16 & 0xFFFFFFFFFFFFFFF0) < v6)
      {
        goto LABEL_13;
      }
      uint64_t v18 = (v17 >> 4) + 1;
      uint64_t v19 = 16 * (v18 & 0x1FFFFFFFFFFFFFFCLL);
      unint64_t v20 = v6 - v19;
      unint64_t v21 = v12 - v19;
      long double v22 = (const double *)(v6 - 48);
      long double v23 = (double *)(v6 - 32);
      uint64_t v24 = v18 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        float64x2x2_t v49 = vld2q_f64(v22);
        double v25 = v22 - 4;
        float64x2x2_t v50 = vld2q_f64(v25);
        vst2q_f64(v23, v49);
        uint64_t v26 = v23 - 4;
        vst2q_f64(v26, v50);
        v23 -= 8;
        v22 -= 8;
        v24 -= 4;
      }
      while (v24);
      unint64_t v6 = v20;
      unint64_t v12 = v21;
      if (v18 != (v18 & 0x1FFFFFFFFFFFFFFCLL))
      {
LABEL_13:
        uint64_t v27 = (void *)(v6 - 8);
        do
        {
          uint64_t v28 = *(void *)(v12 - 16);
          v12 -= 16;
          *(v27 - 1) = v28;
          *uint64_t v27 = *(void *)(v12 + 8);
          v27 -= 2;
        }
        while ((__n128 *)v12 != v9);
      }
    }
    v9->n128_u64[0] = a3->n128_u64[0];
    v5[v8].n128_u64[1] = a3->n128_u64[1];
  }
  return v9;
}

void sub_E9C6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    uint64_t v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void *sub_E9C6F0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    BOOL v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (void *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == v6)
            {
              if (v10[2] == v6) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            unint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  uint64x2_t v14 = operator new(0x20uLL);
  *uint64x2_t v14 = 0;
  v14[1] = v6;
  v14[2] = *(void *)a3;
  *((_DWORD *)v14 + 6) = *(_DWORD *)(a3 + 8);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (v7 && (float)(v16 * (float)v7) >= v15)
  {
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
    if (v18)
    {
LABEL_26:
      *uint64x2_t v14 = *v18;
LABEL_61:
      *uint64_t v18 = v14;
      goto LABEL_62;
    }
  }
  else
  {
    BOOL v19 = 1;
    if (v7 >= 3) {
      BOOL v19 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v7);
    unint64_t v21 = vcvtps_u32_f32(v15 / v16);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_37;
    }
    if (prime < v7)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < v7) {
LABEL_37:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    unint64_t v26 = v7 - 1;
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
      {
        unint64_t v3 = v6 % v7;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v6 % v7));
        if (v18) {
          goto LABEL_26;
        }
      }
      else
      {
        unint64_t v3 = v6;
        uint64_t v17 = *(void *)a1;
        uint64_t v18 = *(void **)(*(void *)a1 + 8 * v6);
        if (v18) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      unint64_t v3 = v26 & v6;
      uint64_t v17 = *(void *)a1;
      uint64_t v18 = *(void **)(*(void *)a1 + 8 * (v26 & v6));
      if (v18) {
        goto LABEL_26;
      }
    }
  }
  *uint64x2_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v27 = *(void *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v27 >= v7) {
        v27 %= v7;
      }
    }
    else
    {
      v27 &= v7 - 1;
    }
    uint64_t v18 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_E9CA08(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_E9CA1C(void **a1, uint64_t a2)
{
  unint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (unsigned char *)*a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 5) > v5) {
    unint64_t v5 = 0x5555555555555556 * (((unsigned char *)a1[2] - v3) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - v3) >> 5) >= 0x155555555555555) {
    unint64_t v7 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v5;
  }
  if (v7)
  {
    if (v7 > 0x2AAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint8x8_t v8 = (char *)operator new(96 * v7);
  }
  else
  {
    uint8x8_t v8 = 0;
  }
  BOOL v9 = &v8[96 * v4];
  uint64_t v30 = &v8[96 * v7];
  unint64_t v28 = v4;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)BOOL v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v10;
  *((void *)v9 + 4) = 0;
  *((void *)v9 + 5) = 0;
  unint64_t v11 = (char **)(v9 + 40);
  *((void *)v9 + 6) = 0;
  uint64_t v13 = *(unsigned char **)(a2 + 32);
  uint64_t v12 = *(unsigned char **)(a2 + 40);
  int64_t v14 = v12 - v13;
  if (v12 != v13)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v14 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    float v15 = (char *)operator new(v14);
    *((void *)v9 + 4) = v15;
    *unint64_t v11 = v15;
    float v16 = &v15[4 * (v14 >> 2)];
    *((void *)v9 + 6) = v16;
    memcpy(v15, v13, v14);
    *unint64_t v11 = v16;
  }
  uint64_t v17 = &v8[96 * v28];
  *(_OWORD *)(v17 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v17 + 72) = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(v17 + 87) = *(_DWORD *)(a2 + 87);
  uint64_t v18 = v9 + 96;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v18;
    a1[2] = &v8[96 * v7];
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      unint64_t v20 = &v9[v19];
      unint64_t v21 = &v2[v19];
      long long v22 = *(_OWORD *)&v2[v19 - 80];
      *((_OWORD *)v20 - 6) = *(_OWORD *)&v2[v19 - 96];
      *((_OWORD *)v20 - 5) = v22;
      *((void *)v20 - 7) = 0;
      *((void *)v20 - 6) = 0;
      *((_OWORD *)v20 - 4) = *(_OWORD *)&v2[v19 - 64];
      *((void *)v20 - 6) = *(void *)&v2[v19 - 48];
      *((void *)v21 - 8) = 0;
      *((void *)v21 - 7) = 0;
      *((void *)v21 - 6) = 0;
      long long v23 = *(_OWORD *)&v2[v19 - 40];
      long long v24 = *(_OWORD *)&v2[v19 - 24];
      *(_DWORD *)(v20 - 9) = *(_DWORD *)&v2[v19 - 9];
      *(_OWORD *)(v20 - 24) = v24;
      *(_OWORD *)(v20 - 40) = v23;
      v19 -= 96;
    }
    while (&v2[v19] != v3);
    uint64_t v25 = (char *)*a1;
    uint64_t v2 = (char *)a1[1];
    uint64_t v18 = v9 + 96;
    *a1 = &v9[v19];
    a1[1] = v9 + 96;
    a1[2] = v30;
    if (v2 != v25)
    {
      do
      {
        unint64_t v26 = (void *)*((void *)v2 - 8);
        if (v26)
        {
          *((void *)v2 - 7) = v26;
          operator delete(v26);
        }
        v2 -= 96;
      }
      while (v2 != v25);
      uint64_t v2 = v25;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v18;
}

void sub_E9CC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  BOOL v9 = *v6;
  if (*v6)
  {
    *unint64_t v7 = v9;
    operator delete(v9);
  }
  sub_E9CCBC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E9CCBC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 96;
        *(void *)(a1 + 16) = v2 - 96;
        unint64_t v5 = *(void **)(v2 - 64);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 56) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 96;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_E9CD2C(void **a1, uint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (unsigned char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 4) > v5) {
    unint64_t v5 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v3) >> 4) >= 0x199999999999999) {
    unint64_t v7 = 0x333333333333333;
  }
  else {
    unint64_t v7 = v5;
  }
  if (v7)
  {
    if (v7 > 0x333333333333333) {
      sub_188D718();
    }
    uint8x8_t v8 = (char *)operator new(80 * v7);
  }
  else
  {
    uint8x8_t v8 = 0;
  }
  BOOL v9 = &v8[80 * v4];
  unint64_t v28 = &v8[80 * v7];
  unint64_t v26 = v4;
  *(_OWORD *)BOOL v9 = *(_OWORD *)a2;
  *((void *)v9 + 2) = 0;
  *((void *)v9 + 3) = 0;
  long long v10 = (char **)(v9 + 24);
  *((void *)v9 + 4) = 0;
  uint64_t v12 = *(unsigned char **)(a2 + 16);
  unint64_t v11 = *(unsigned char **)(a2 + 24);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v13 >> 2) >= 0x1555555555555556) {
      sub_2E00();
    }
    int64_t v14 = (char *)operator new(v13);
    *((void *)v9 + 2) = v14;
    *long long v10 = v14;
    float v15 = &v14[4 * (v13 >> 2)];
    *((void *)v9 + 4) = v15;
    memcpy(v14, v12, v13);
    *long long v10 = v15;
  }
  float v16 = &v8[80 * v26];
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v16 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(v16 + 71) = *(_DWORD *)(a2 + 71);
  uint64_t v17 = v9 + 80;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v17;
    a1[2] = &v8[80 * v7];
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = &v9[v18];
      unint64_t v20 = &v2[v18];
      *((_OWORD *)v19 - 5) = *(_OWORD *)&v2[v18 - 80];
      *((void *)v19 - 7) = 0;
      *((void *)v19 - 6) = 0;
      *((_OWORD *)v19 - 4) = *(_OWORD *)&v2[v18 - 64];
      *((void *)v19 - 6) = *(void *)&v2[v18 - 48];
      *((void *)v20 - 8) = 0;
      *((void *)v20 - 7) = 0;
      *((void *)v20 - 6) = 0;
      long long v21 = *(_OWORD *)&v2[v18 - 40];
      long long v22 = *(_OWORD *)&v2[v18 - 24];
      *(_DWORD *)(v19 - 9) = *(_DWORD *)&v2[v18 - 9];
      *(_OWORD *)(v19 - 24) = v22;
      *(_OWORD *)(v19 - 40) = v21;
      v18 -= 80;
    }
    while (&v2[v18] != v3);
    long long v23 = (char *)*a1;
    uint64_t v2 = (char *)a1[1];
    uint64_t v17 = v9 + 80;
    *a1 = &v9[v18];
    a1[1] = v9 + 80;
    a1[2] = v28;
    if (v2 != v23)
    {
      do
      {
        long long v24 = (void *)*((void *)v2 - 8);
        if (v24)
        {
          *((void *)v2 - 7) = v24;
          operator delete(v24);
        }
        v2 -= 80;
      }
      while (v2 != v23);
      uint64_t v2 = v23;
    }
  }
  if (v2) {
    operator delete(v2);
  }
  return v17;
}

void sub_E9CFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  BOOL v9 = *v6;
  if (*v6)
  {
    *unint64_t v7 = v9;
    operator delete(v9);
  }
  sub_E9CFCC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E9CFCC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = v2 - 80;
        *(void *)(a1 + 16) = v2 - 80;
        unint64_t v5 = *(void **)(v2 - 64);
        if (!v5) {
          break;
        }
        *(void *)(v2 - 56) = v5;
        operator delete(v5);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 80;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_E9D03C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1) {
    sub_2E00();
  }
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 3);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 3) >= 0xF0F0F0F0F0F0F0) {
    unint64_t v6 = 0x1E1E1E1E1E1E1E1;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x1E1E1E1E1E1E1E1) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(136 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v17 = (uint64_t)&v7[136 * v3];
  uint64_t v18 = &v7[136 * v6];
  sub_E9D21C(v17, a2);
  uint64_t v8 = v17 + 136;
  long long v10 = (char *)*a1;
  BOOL v9 = (char *)a1[1];
  if (v9 == (char *)*a1)
  {
    *a1 = v17;
    a1[1] = v8;
    a1[2] = (uint64_t)v18;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      sub_E9D21C(v17 + v11 - 136, (uint64_t)&v9[v11 - 136]);
      v11 -= 136;
    }
    while (&v9[v11] != v10);
    uint64_t v12 = (char *)*a1;
    BOOL v9 = (char *)a1[1];
    uint64_t v13 = v17 + v11;
    uint64_t v8 = v17 + 136;
    *a1 = v13;
    a1[1] = v17 + 136;
    a1[2] = (uint64_t)v18;
    if (v9 != v12)
    {
      do
      {
        int64_t v14 = (void *)*((void *)v9 - 3);
        if (v14)
        {
          *((void *)v9 - 2) = v14;
          operator delete(v14);
        }
        float v15 = (void *)*((void *)v9 - 17);
        if (v15)
        {
          *((void *)v9 - 16) = v15;
          operator delete(v15);
        }
        v9 -= 136;
      }
      while (v9 != v12);
      BOOL v9 = v12;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v8;
}

void sub_E9D1E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_E9D354((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E9D1F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_20B1190(v3 + v2, v3);
  }
  sub_E9D354((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E9D21C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  if (a1 != a2) {
    sub_31AF54((void *)a1, *(char **)a2, *(char **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 56);
  long long v5 = *(_OWORD *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 40) = v8;
  *(void *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  long long v10 = *(unsigned char **)(a2 + 112);
  BOOL v9 = *(unsigned char **)(a2 + 120);
  uint64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      sub_2E00();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    *(void *)(a1 + 112) = v12;
    *(void *)(a1 + 120) = v12;
    *(void *)(a1 + 128) = &v12[16 * (v11 >> 4)];
    size_t v13 = v11 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v12, v10, v13);
    *(void *)(a1 + 120) = &v12[v13];
  }
  return a1;
}

void sub_E9D320(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E9D354(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    long long v4 = (void **)(i - 136);
    *(void *)(a1 + 16) = i - 136;
    long long v5 = *(void **)(i - 24);
    if (v5)
    {
      *(void *)(i - 16) = v5;
      operator delete(v5);
    }
    long long v6 = *v4;
    if (*v4)
    {
      *(void *)(i - 128) = v6;
      operator delete(v6);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_E9D3CC(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v6 = 3 * a2;
    uint64_t v7 = operator new(24 * a2);
    long long v8 = v7;
    *a1 = v7;
    a1[1] = v7;
    BOOL v9 = &v7[v6];
    a1[2] = &v7[v6];
    long long v10 = *(const void **)a3;
    int64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
    if (v11)
    {
      if (v11 < 0)
      {
        *uint64_t v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        sub_2E00();
      }
      uint64_t v12 = 24 * a2;
      do
      {
        void *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        size_t v13 = (char *)operator new(v11);
        void *v8 = v13;
        v8[1] = v13;
        v8[2] = &v13[16 * (v11 >> 4)];
        memcpy(v13, v10, v11 & 0xFFFFFFFFFFFFFFF0);
        v8[1] = &v13[16 * ((unint64_t)v11 >> 4)];
        v8 += 3;
        v12 -= 24;
      }
      while (v12);
    }
    else
    {
      bzero(v7, 24 * ((v6 * 8 - 24) / 0x18uLL) + 24);
    }
    a1[1] = v9;
  }
  return a1;
}

void sub_E9D508(_Unwind_Exception *exception_object)
{
  long long v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_E9D538(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x222222222222222) {
    sub_2E00();
  }
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3);
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) >= 0x111111111111111) {
    unint64_t v6 = 0x222222222222222;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x222222222222222) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(120 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v17 = (uint64_t)&v7[120 * v3];
  uint64_t v18 = &v7[120 * v6];
  sub_E9D718(v17, a2);
  uint64_t v8 = v17 + 120;
  long long v10 = (char *)*a1;
  BOOL v9 = (char *)a1[1];
  if (v9 == (char *)*a1)
  {
    *a1 = v17;
    a1[1] = v8;
    a1[2] = (uint64_t)v18;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      sub_E9D718(v17 + v11 - 120, (uint64_t)&v9[v11 - 120]);
      v11 -= 120;
    }
    while (&v9[v11] != v10);
    uint64_t v12 = (char *)*a1;
    BOOL v9 = (char *)a1[1];
    uint64_t v13 = v17 + v11;
    uint64_t v8 = v17 + 120;
    *a1 = v13;
    a1[1] = v17 + 120;
    a1[2] = (uint64_t)v18;
    if (v9 != v12)
    {
      do
      {
        int64_t v14 = (void *)*((void *)v9 - 3);
        if (v14)
        {
          *((void *)v9 - 2) = v14;
          operator delete(v14);
        }
        float v15 = (void *)*((void *)v9 - 15);
        if (v15)
        {
          *((void *)v9 - 14) = v15;
          operator delete(v15);
        }
        v9 -= 120;
      }
      while (v9 != v12);
      BOOL v9 = v12;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v8;
}

void sub_E9D6E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_E9D848((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_E9D6F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_20B11E0(v3 + v2, v3);
  }
  sub_E9D848((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E9D718(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0x7FFFFFFFFFFFFFFFLL;
  if (a1 != a2) {
    sub_31AF54((void *)a1, *(char **)a2, *(char **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 72);
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = v7;
  *(_OWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  BOOL v9 = *(unsigned char **)(a2 + 96);
  uint64_t v8 = *(unsigned char **)(a2 + 104);
  uint64_t v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0) {
      sub_2E00();
    }
    uint64_t v11 = (char *)operator new(v8 - v9);
    *(void *)(a1 + 96) = v11;
    *(void *)(a1 + 104) = v11;
    *(void *)(a1 + 112) = &v11[16 * (v10 >> 4)];
    size_t v12 = v10 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v11, v9, v12);
    *(void *)(a1 + 104) = &v11[v12];
  }
  return a1;
}

void sub_E9D814(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E9D848(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    long long v4 = (void **)(i - 120);
    *(void *)(a1 + 16) = i - 120;
    long long v5 = *(void **)(i - 24);
    if (v5)
    {
      *(void *)(i - 16) = v5;
      operator delete(v5);
    }
    long long v6 = *v4;
    if (*v4)
    {
      *(void *)(i - 112) = v6;
      operator delete(v6);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_E9D8C0()
{
  byte_25FC537 = 1;
  word_25FC520 = 65;
}

void sub_E9D8DC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(char **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      sub_2E00();
    }
    long long v4 = *(char **)(a1 + 8);
    uint64_t v5 = 40 * a2;
    long long v6 = (char *)operator new(40 * a2);
    uint64_t v7 = &v6[v4 - v2];
    uint64_t v13 = &v6[v5];
    if (v4 == v2)
    {
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = &v6[v5];
    }
    else
    {
      uint64_t v8 = 0;
      do
      {
        sub_E9BD88((uint64_t)&v7[v8 - 40], (uint64_t)&v4[v8 - 40]);
        v8 -= 40;
      }
      while (&v4[v8] != v2);
      BOOL v9 = *(char **)a1;
      uint64_t v2 = *(char **)(a1 + 8);
      *(void *)a1 = &v7[v8];
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v13;
      if (v2 != v9)
      {
        uint64_t v10 = v2;
        do
        {
          size_t v12 = (void *)*((void *)v10 - 5);
          v10 -= 40;
          uint64_t v11 = v12;
          if (v12)
          {
            *((void *)v2 - 4) = v11;
            operator delete(v11);
          }
          uint64_t v2 = v10;
        }
        while (v10 != v9);
        uint64_t v2 = v9;
      }
    }
    if (v2) {
      operator delete(v2);
    }
  }
}

uint64_t sub_E9DA58(void *a1, unint64_t a2)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    long long v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v15;
    }
    else {
      uint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    size_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 40 * a2;
}

void sub_E9DBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

char *sub_E9DC88(char **a1, int *a2, void *a3)
{
  long long v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 < v6)
  {
    *(double *)long long v7 = (double)*a2;
    *((void *)v7 + 1) = *a3;
    uint64_t v8 = v7 + 16;
    goto LABEL_13;
  }
  long long v9 = *a1;
  uint64_t v10 = (v7 - *a1) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
  if (!v13) {
    unint64_t v14 = v11;
  }
  if (v14 >> 60) {
    sub_188D718();
  }
  uint64_t v15 = 16 * v14;
  std::string v16 = (char *)operator new(16 * v14);
  std::string v17 = &v16[16 * v10];
  std::string v18 = &v16[v15];
  uint64_t v19 = *a3;
  *(double *)std::string v17 = (double)*a2;
  *((void *)v17 + 1) = v19;
  uint64_t v8 = v17 + 16;
  if (v7 == v9)
  {
    *a1 = v17;
    a1[1] = v8;
    a1[2] = v18;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    std::string::size_type v20 = v17 - 16;
    *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 16;
    v17 -= 16;
  }
  while (v7 != v9);
  *a1 = v20;
  a1[1] = v8;
  a1[2] = v18;
  if (v9) {
LABEL_12:
  }
    operator delete(v9);
LABEL_13:
  a1[1] = v8;
  return v8 - 16;
}

int64x2_t *sub_E9DDC4(int64x2_t *a1, void *a2)
{
  a1->i64[0] = sub_3750CC(a2);
  uint64_t v11 = 0;
  uint64_t v12 = operator new(0x28uLL);
  long long v13 = xmmword_20B93A0;
  strcpy((char *)v12, "RouteLineSegmentGeometryDistributor");
  std::string __p = 0;
  uint64_t v10 = 0;
  long long v4 = sub_374CDC((uint64_t)a2, (uint64_t)&v12, (uint64_t *)&__p);
  a1[1] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  a1[2].i64[0] = 0x7FFFFFFFFFFFFFFFLL;
  sub_EA2444((uint64_t)&a1->i64[1], v4);
  uint64_t v5 = (void **)__p;
  if (__p)
  {
    unint64_t v6 = v10;
    long long v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      long long v7 = __p;
    }
    uint64_t v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  return a1;
}

void sub_E9DEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_E9DF08(uint64_t a1, char **a2, void *a3)
{
  sub_E9DF94(a1, a3);
  sub_E9E088(a1, a2, a3);
  if (*(unsigned char *)(a1 + 41)) {
    sub_E9F844((uint64_t *)a1, a3);
  }
  if (*(unsigned char *)(a1 + 40))
  {
    sub_E9F988();
  }
}

void sub_E9DF94(uint64_t a1, void *a2)
{
  uint64_t v3 = a2 + 1248;
  unint64_t v4 = sub_46C760(a2);
  sub_E9D8DC((uint64_t)v3, v4);
  *(_OWORD *)std::string __p = 0u;
  long long v8 = 0u;
  uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v5 = sub_46C760(a2);
  if (v5)
  {
    unint64_t v6 = a2[1249];
    do
    {
      if (v6 >= a2[1250])
      {
        unint64_t v6 = sub_EA6FEC(v3, (uint64_t)__p);
      }
      else
      {
        sub_E9BD88(v6, (uint64_t)__p);
        v6 += 40;
        a2[1249] = v6;
      }
      a2[1249] = v6;
      --v5;
    }
    while (v5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_E9E05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_E9E088(uint64_t a1, char **a2, void *a3)
{
  unint64_t v4 = a2;
  unint64_t v5 = *a2;
  unint64_t v6 = v4[1];
  if (v5 == v6)
  {
    unint64_t v6 = v5;
  }
  else
  {
    long long v7 = v5 - 12;
    do
    {
      if (v7 + 24 == v6) {
        goto LABEL_21;
      }
      int v8 = *((_DWORD *)v7 + 3);
      int v9 = *((_DWORD *)v7 + 4);
      v7 += 12;
      BOOL v10 = v8 == *((_DWORD *)v7 + 3) && v9 == *((_DWORD *)v7 + 4);
    }
    while (!v10);
    uint64_t v11 = v7 + 24;
    if (v7 + 24 == v6)
    {
      uint64_t v12 = v7 + 12;
      if (v7 + 12 == v6) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    do
    {
      if (*(_DWORD *)v7 != *(_DWORD *)v11 || *((_DWORD *)v7 + 1) != *((_DWORD *)v11 + 1))
      {
        int v14 = *((_DWORD *)v11 + 2);
        *(void *)(v7 + 12) = *(void *)v11;
        v7 += 12;
        *((_DWORD *)v7 + 2) = v14;
      }
      v11 += 12;
    }
    while (v11 != v6);
    unint64_t v5 = *v4;
    unint64_t v6 = v4[1];
    uint64_t v12 = v7 + 12;
    if (v7 + 12 != v6)
    {
LABEL_20:
      unint64_t v6 = v12;
      v4[1] = v12;
    }
  }
LABEL_21:
  if (v6 - v5 == 12) {
    sub_30C0C(v4, (uint64_t *)v5);
  }
  unint64_t result = sub_46C760(a3);
  if (result)
  {
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    long long v294 = v4;
    long long v287 = a3;
    while (1)
    {
      uint64_t v18 = a3[1248];
      uint64_t v19 = *(void *)a1;
      uint64_t v20 = sub_46C8EC(a3, v17);
      sub_2954EC(v19, *(void *)(v20 + 32), (uint64_t)&v300);
      sub_2E4B5C((uint64_t)&v300, &v303);
      if (__p)
      {
        long long v302 = (char *)__p;
        operator delete(__p);
      }
      long long v21 = (void *)sub_46C8EC(a3, v17);
      long long v22 = (unsigned __int16 *)(*v21 - *(int *)*v21);
      if (*v22 >= 9u && (uint64_t v23 = v22[4]) != 0) {
        uint64_t v285 = *(unsigned int *)(*v21 + v23);
      }
      else {
        uint64_t v285 = 0;
      }
      uint64_t v290 = v18 + 40 * v17;
      long long v24 = v303;
      uint64_t v286 = v17;
      if (0xAAAAAAAAAAAAAAABLL * ((v304 - v303) >> 2) >= 2) {
        break;
      }
LABEL_350:
      a3 = v287;
      uint64_t v262 = *(void *)(nullsub_1(v290) + 8);
      int v263 = *(_DWORD *)(v262 - 4);
      int v300 = *(void **)(v262 - 12);
      LODWORD(__p) = v263;
      float64x2_t v264 = (int **)nullsub_1(v290);
      double v266 = *v264;
      float64x2_t v265 = v264[1];
      if (*v264 != v265)
      {
        do
        {
          double v267 = v266 + 3;
          if (v266 + 3 == v265) {
            goto LABEL_368;
          }
          int v268 = *v266;
          int v269 = v266[1];
          int v271 = v266[3];
          int v270 = v266[4];
          BOOL v272 = v268 == v271 && v269 == v270;
          double v266 = v267;
        }
        while (!v272);
        uint64_t v273 = v267 + 3;
        long double v274 = v267 - 3;
        if (v267 + 3 == v265)
        {
          uint64_t v275 = v267;
          if (v267 == v265) {
            goto LABEL_368;
          }
LABEL_367:
          v264[1] = v275;
          goto LABEL_368;
        }
        do
        {
          if (*v274 != *v273 || v274[1] != v273[1])
          {
            int v277 = v273[2];
            *(void *)(v274 + 3) = *(void *)v273;
            v274 += 3;
            v274[2] = v277;
          }
          v273 += 3;
        }
        while (v273 != v265);
        uint64_t v275 = v274 + 3;
        if (v274 + 3 != v264[1]) {
          goto LABEL_367;
        }
      }
LABEL_368:
      uint64_t v278 = (void *)nullsub_1(v290);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v278[1] - *v278) >> 2) < 2)
      {
        int v281 = (char **)nullsub_1(v290);
        sub_30C0C(v281, (uint64_t *)&v300);
      }
      else
      {
        uint64_t v279 = *(void *)(nullsub_1(v290) + 8);
        long long v280 = v300;
        *(_DWORD *)(v279 - 4) = __p;
        *(void *)(v279 - 12) = v280;
      }
      if (v303)
      {
        long long v304 = v303;
        operator delete(v303);
      }
      uint64_t v17 = v286 + 1;
      unint64_t result = sub_46C760(v287);
      if (v286 + 1 >= result) {
        return result;
      }
    }
    double v25 = (double)v285;
    uint64_t v282 = v17 - 1;
    unint64_t v26 = v16;
    uint64_t v27 = 1;
    while (1)
    {
      unint64_t v28 = &v24[12 * v27];
      uint64_t v298 = *(void *)(v28 - 12);
      uint64_t v29 = *(unsigned int *)v28;
      int v299 = *((_DWORD *)v28 - 1);
      double v30 = *(double *)(a1 + 8) * v25;
      uint64_t v31 = (uint64_t)(v30 + v30);
      uint64_t v32 = v31 - 1;
      if (v31 < 1) {
        uint64_t v32 = (uint64_t)(v30 + v30);
      }
      uint64_t v33 = v32 >> 1;
      double v34 = v30 > -4.50359963e15 ? (double)v33 : *(double *)(a1 + 8) * v25;
      uint64_t v35 = (v31 + 1) >> 1;
      double v36 = (double)v35;
      double v37 = v30 < 4.50359963e15 ? (double)v35 : *(double *)(a1 + 8) * v25;
      double v38 = v30 >= 0.0 ? v37 : v34;
      uint64_t v39 = *(void *)(v28 + 4);
      uint64_t v40 = *(void *)(a1 + 16) + v285 >= (uint64_t)v38 ? (uint64_t)v38 : *(void *)(a1 + 16) + v285;
      int v41 = *v4;
      unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((v4[1] - *v4) >> 2);
      unint64_t v43 = v42 - 1;
      unint64_t v292 = v26;
      uint64_t v293 = v39;
      if (v40 != 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      unint64_t v16 = v26;
      if (v26 < v43)
      {
        double v38 = (double)v29;
        double v44 = (double)v39;
        long double v45 = &v41[12 * v26];
        LODWORD(v46) = *(_DWORD *)v45;
        LODWORD(v48) = *((_DWORD *)v45 + 1);
        double v47 = v45 + 12;
        double v37 = 1.79769313e308;
        unint64_t v16 = v26;
        unint64_t v49 = v26;
        do
        {
          double v53 = (double)v46;
          double v54 = (double)v48;
          LODWORD(v46) = *v47;
          LODWORD(v48) = v47[1];
          double v55 = (double)*v47 - v53;
          double v56 = (double)v48 - v54;
          double v57 = v55 * v55 + v56 * v56;
          double v58 = fabs(v57);
          if (v57 != 0.0 && v58 >= 2.22044605e-16)
          {
            double v60 = ((v38 - v53) * v55 + (v44 - v54) * v56) / v57;
            if (v60 <= 0.0)
            {
              unint64_t v50 = *(void *)(v47 - 3);
              unint64_t v51 = HIDWORD(v50);
              goto LABEL_53;
            }
            if (v60 < 1.0)
            {
              double v61 = v56 * v60 + v54;
              double v62 = v55 * v60 + v53;
              if (v62 < 0.0) {
                double v63 = -0.5;
              }
              else {
                double v63 = 0.5;
              }
              LODWORD(v50) = (v62 + v63);
              if (v61 < 0.0) {
                double v64 = -0.5;
              }
              else {
                double v64 = 0.5;
              }
              LODWORD(v51) = (v61 + v64);
              if (v51 >= 0xFFFFFFFE) {
                LODWORD(v51) = -2;
              }
              goto LABEL_53;
            }
          }
          uint64_t v46 = *(void *)v47;
          uint64_t v48 = HIDWORD(*(void *)v47);
          unint64_t v50 = *(void *)v47;
          LODWORD(v51) = v48;
LABEL_53:
          double v36 = sqrt((double)((v29 - v50) * (v29 - v50)
                            + (v293 - (unint64_t)v51)
                            * (v293 - (unint64_t)v51)))
              / 100.0;
          if (v36 < v37) {
            unint64_t v16 = v49;
          }
          unint64_t v52 = v49 + 1;
          v47 += 3;
          if (v36 < v37) {
            double v37 = v36;
          }
          ++v49;
        }
        while (v43 != v52);
      }
LABEL_115:
      int v300 = 0;
      std::string __p = 0;
      long long v302 = 0;
      unint64_t v92 = v16 + 1;
      uint64_t v291 = v27;
      if (v16 + 1 >= v42)
      {
        uint64_t v106 = (uint64_t *)nullsub_1(v290);
        uint64_t v107 = *v106;
        uint64_t v108 = v106[1];
        uint64_t v109 = v290;
        if (v107 == v108) {
          uint64_t v109 = v287[1248] + 40 * v282;
        }
        uint64_t v110 = nullsub_1(v109);
        uint64_t v111 = *(void *)(v110 + 8) - 12;
        uint64_t v112 = (char *)__p;
        if (__p >= v302)
        {
          long long v117 = (char *)v300;
          unint64_t v118 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__p - (unsigned char *)v300) >> 2);
          unint64_t v119 = v118 + 1;
          if (v118 + 1 > 0x1555555555555555) {
            goto LABEL_376;
          }
          if (0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2) > v119) {
            unint64_t v119 = 0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v302 - (unsigned char *)v300) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v120 = 0x1555555555555555;
          }
          else {
            unint64_t v120 = v119;
          }
          if (v120)
          {
            if (v120 > 0x1555555555555555) {
              goto LABEL_377;
            }
            uint64_t v121 = (char *)operator new(12 * v120);
          }
          else
          {
            uint64_t v121 = 0;
          }
          uint64_t v122 = *(void *)v111;
          unint64_t v123 = &v121[12 * v118];
          *((_DWORD *)v123 + 2) = *(_DWORD *)(v111 + 8);
          *(void *)unint64_t v123 = v122;
          unint64_t v124 = v123;
          if (v112 != v117)
          {
            do
            {
              uint64_t v125 = *(void *)(v112 - 12);
              v112 -= 12;
              int v126 = *((_DWORD *)v112 + 2);
              *(void *)(v124 - 12) = v125;
              v124 -= 12;
              *((_DWORD *)v124 + 2) = v126;
            }
            while (v112 != v117);
            uint64_t v112 = (char *)v300;
          }
          long long v114 = v123 + 12;
          int v300 = v124;
          std::string __p = v123 + 12;
          long long v302 = &v121[12 * v120];
          if (v112) {
            operator delete(v112);
          }
        }
        else
        {
          uint64_t v113 = *(void *)v111;
          *((_DWORD *)__p + 2) = *(_DWORD *)(*(void *)(v110 + 8) - 4);
          *(void *)uint64_t v112 = v113;
          long long v114 = v112 + 12;
        }
        std::string __p = v114;
        uint64_t v127 = (uint64_t)(v4[1] - 12);
        if (v114 >= v302)
        {
          uint64_t v130 = (char *)v300;
          unint64_t v131 = 0xAAAAAAAAAAAAAAABLL * ((v114 - (unsigned char *)v300) >> 2);
          unint64_t v132 = v131 + 1;
          if (v131 + 1 > 0x1555555555555555) {
LABEL_376:
          }
            sub_2E00();
          if (0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2) > v132) {
            unint64_t v132 = 0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v302 - (unsigned char *)v300) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v133 = 0x1555555555555555;
          }
          else {
            unint64_t v133 = v132;
          }
          if (v133)
          {
            if (v133 > 0x1555555555555555) {
LABEL_377:
            }
              sub_188D718();
            unsigned int v134 = (char *)operator new(12 * v133);
          }
          else
          {
            unsigned int v134 = 0;
          }
          uint64_t v135 = &v134[12 * v131];
          uint64_t v136 = *(void *)v127;
          *((_DWORD *)v135 + 2) = *(_DWORD *)(v127 + 8);
          *(void *)uint64_t v135 = v136;
          uint64_t v129 = v135 + 12;
          if (v114 == v130)
          {
            int v300 = &v134[12 * v131];
            std::string __p = v135 + 12;
            long long v302 = &v134[12 * v133];
          }
          else
          {
            do
            {
              uint64_t v137 = *(void *)(v114 - 12);
              v114 -= 12;
              int v138 = *((_DWORD *)v114 + 2);
              *(void *)(v135 - 12) = v137;
              v135 -= 12;
              *((_DWORD *)v135 + 2) = v138;
            }
            while (v114 != v130);
            long long v114 = (char *)v300;
            int v300 = v135;
            std::string __p = v129;
            long long v302 = &v134[12 * v133];
            if (!v114) {
              goto LABEL_172;
            }
          }
          operator delete(v114);
        }
        else
        {
          uint64_t v128 = *(void *)v127;
          *((_DWORD *)v114 + 2) = *((_DWORD *)v4[1] - 1);
          *(void *)long long v114 = v128;
          uint64_t v129 = v114 + 12;
        }
LABEL_172:
        unint64_t v16 = v292;
        std::string __p = v129;
        goto LABEL_276;
      }
      uint64_t v93 = &v41[12 * v16];
      unint64_t v94 = &v41[12 * v92];
      LODWORD(v38) = *(_DWORD *)v93;
      LODWORD(v37) = *((_DWORD *)v93 + 1);
      double v95 = (double)*(unint64_t *)&v38;
      double v96 = (double)*(unint64_t *)&v37;
      LODWORD(v37) = *(_DWORD *)v94;
      LODWORD(v36) = *((_DWORD *)v94 + 1);
      double v97 = (double)*(unint64_t *)&v37 - v95;
      double v98 = (double)*(unint64_t *)&v36 - v96;
      double v99 = v97 * v97 + v98 * v98;
      BOOL v100 = fabs(v99) < 2.22044605e-16 || v99 == 0.0;
      double v101 = (((double)v29 - v95) * v97 + ((double)v293 - v96) * v98) / v99;
      if (v100) {
        double v101 = 1.79769313e308;
      }
      unint64_t v102 = v292;
      if (v101 <= 0.0)
      {
        uint64_t v288 = *(void *)v93;
        unsigned int v284 = *((_DWORD *)v93 + 2);
        unint64_t v283 = v16 + 1;
        if (v292 <= v92) {
          unint64_t v115 = v16 + 1;
        }
        else {
          unint64_t v115 = v292;
        }
        uint64_t v116 = 0;
        if (v292 < v92) {
          goto LABEL_197;
        }
      }
      else
      {
        if (v101 < 1.0)
        {
          int v103 = *(_DWORD *)&v41[12 * v16 + 8];
          if (v103 == 0x7FFFFFFF)
          {
            BOOL v104 = 0;
            double v105 = 0.0;
          }
          else
          {
            double v139 = (double)v103;
            int v140 = *(_DWORD *)&v41[12 * v92 + 8];
            BOOL v10 = v140 == 0x7FFFFFFF;
            double v105 = v101 * ((double)v140 - v139) + v139;
            BOOL v104 = v140 != 0x7FFFFFFF;
            if (v10) {
              double v105 = 0.0;
            }
          }
          double v141 = v98 * v101;
          double v142 = v97 * v101 + v95;
          if (v142 < 0.0) {
            double v143 = -0.5;
          }
          else {
            double v143 = 0.5;
          }
          uint64_t v144 = (v142 + v143);
          double v145 = v141 + v96;
          if (v145 < 0.0) {
            double v146 = -0.5;
          }
          else {
            double v146 = 0.5;
          }
          unsigned int v147 = (v145 + v146);
          if (v105 < 0.0) {
            double v148 = -0.5;
          }
          else {
            double v148 = 0.5;
          }
          if (v104) {
            unsigned int v149 = (v105 + v148);
          }
          else {
            unsigned int v149 = 0x7FFFFFFF;
          }
          unsigned int v284 = v149;
          if (v147 >= 0xFFFFFFFE) {
            uint64_t v150 = 4294967294;
          }
          else {
            uint64_t v150 = v147;
          }
          uint64_t v288 = v144 | (v150 << 32);
          unint64_t v283 = v16 + 1;
          if (v292 <= v92) {
            unint64_t v115 = v16 + 1;
          }
          else {
            unint64_t v115 = v292;
          }
          uint64_t v116 = 0;
          if (v292 >= v92) {
            goto LABEL_216;
          }
LABEL_197:
          while (2)
          {
            uint64_t v152 = (uint64_t)&(*v4)[12 * v102];
            if (v116 < v302)
            {
              uint64_t v151 = *(void *)v152;
              *((_DWORD *)v116 + 2) = *(_DWORD *)(v152 + 8);
              *(void *)uint64_t v116 = v151;
              v116 += 12;
              goto LABEL_196;
            }
            int v153 = (char *)v300;
            unint64_t v154 = 0xAAAAAAAAAAAAAAABLL * ((v116 - (unsigned char *)v300) >> 2);
            unint64_t v155 = v154 + 1;
            if (v154 + 1 > 0x1555555555555555) {
              sub_2E00();
            }
            if (0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2) > v155) {
              unint64_t v155 = 0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v302 - (unsigned char *)v300) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v156 = 0x1555555555555555;
            }
            else {
              unint64_t v156 = v155;
            }
            if (v156)
            {
              if (v156 > 0x1555555555555555) {
                sub_188D718();
              }
              long long v157 = (char *)operator new(12 * v156);
            }
            else
            {
              long long v157 = 0;
            }
            uint64_t v158 = *(void *)v152;
            unint64_t v159 = &v157[12 * v154];
            *((_DWORD *)v159 + 2) = *(_DWORD *)(v152 + 8);
            *(void *)unint64_t v159 = v158;
            if (v116 == v153)
            {
              unsigned int v163 = v116;
              unint64_t v4 = v294;
              uint64_t v116 = v159 + 12;
              int v300 = v159;
              std::string __p = v159 + 12;
              long long v302 = &v157[12 * v156];
              if (!v163) {
                goto LABEL_196;
              }
            }
            else
            {
              unint64_t v160 = &v157[12 * v154];
              unint64_t v4 = v294;
              do
              {
                uint64_t v161 = *(void *)(v116 - 12);
                v116 -= 12;
                int v162 = *((_DWORD *)v116 + 2);
                *(void *)(v160 - 12) = v161;
                v160 -= 12;
                *((_DWORD *)v160 + 2) = v162;
              }
              while (v116 != v153);
              unsigned int v163 = v300;
              uint64_t v116 = v159 + 12;
              int v300 = v160;
              std::string __p = v159 + 12;
              long long v302 = &v157[12 * v156];
              if (!v163)
              {
LABEL_196:
                std::string __p = v116;
                if (++v102 == v115)
                {
                  int v41 = *v4;
                  unint64_t v102 = v292;
                  goto LABEL_216;
                }
                continue;
              }
            }
            break;
          }
          operator delete(v163);
          goto LABEL_196;
        }
        uint64_t v288 = *(void *)v94;
        unsigned int v284 = *((_DWORD *)v94 + 2);
        unint64_t v283 = v16 + 1;
        if (v292 <= v92) {
          unint64_t v115 = v16 + 1;
        }
        else {
          unint64_t v115 = v292;
        }
        uint64_t v116 = 0;
        if (v292 < v92) {
          goto LABEL_197;
        }
      }
LABEL_216:
      if (*(void *)&v41[12 * v16] == v288)
      {
        if (v102 == v16)
        {
          unsigned int v164 = (char *)v300;
          if (v116 >= v302)
          {
            unint64_t v190 = 0xAAAAAAAAAAAAAAABLL * ((v116 - (unsigned char *)v300) >> 2) + 1;
            if (v190 > 0x1555555555555555) {
LABEL_379:
            }
              sub_2E00();
            if (0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2) > v190) {
              unint64_t v190 = 0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v302 - (unsigned char *)v300) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v191 = 0x1555555555555555;
            }
            else {
              unint64_t v191 = v190;
            }
            if (v191)
            {
              if (v191 > 0x1555555555555555) {
LABEL_381:
              }
                sub_188D718();
              unint64_t v192 = (char *)operator new(12 * v191);
            }
            else
            {
              unint64_t v192 = 0;
            }
            uint64_t v198 = *(void *)v164;
            unint64_t v199 = &v192[4 * ((v116 - v164) >> 2)];
            *((_DWORD *)v199 + 2) = *((_DWORD *)v164 + 2);
            *(void *)unint64_t v199 = v198;
            unint64_t v200 = v199;
            if (v116 != v164)
            {
              do
              {
                uint64_t v201 = *(void *)(v116 - 12);
                v116 -= 12;
                int v202 = *((_DWORD *)v116 + 2);
                *(void *)(v200 - 12) = v201;
                v200 -= 12;
                *((_DWORD *)v200 + 2) = v202;
              }
              while (v116 != v164);
              uint64_t v116 = (char *)v300;
            }
            unsigned int v166 = v199 + 12;
            int v300 = v200;
            std::string __p = v199 + 12;
            long long v302 = &v192[12 * v191];
            if (v116) {
              operator delete(v116);
            }
          }
          else
          {
            uint64_t v165 = *(void *)v300;
            *((_DWORD *)v116 + 2) = *((_DWORD *)v300 + 2);
            *(void *)uint64_t v116 = v165;
            unsigned int v166 = v116 + 12;
          }
          std::string __p = v166;
          unint64_t v16 = v292;
        }
      }
      else
      {
        BOOL v167 = &v41[12 * v283];
        uint64_t v168 = v288;
        if (*(_DWORD *)v167 != v288)
        {
          uint64x2_t v170 = v302;
LABEL_225:
          if (v116 >= v170)
          {
            int64x2_t v174 = (char *)v300;
            unint64_t v175 = 0xAAAAAAAAAAAAAAABLL * ((v116 - (unsigned char *)v300) >> 2);
            unint64_t v176 = v175 + 1;
            if (v175 + 1 > 0x1555555555555555) {
              goto LABEL_379;
            }
            unint64_t v177 = 0xAAAAAAAAAAAAAAABLL * ((v170 - (unsigned char *)v300) >> 2);
            if (2 * v177 > v176) {
              unint64_t v176 = 2 * v177;
            }
            if (v177 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v178 = 0x1555555555555555;
            }
            else {
              unint64_t v178 = v176;
            }
            if (v178)
            {
              if (v178 > 0x1555555555555555) {
                goto LABEL_381;
              }
              long double v179 = (char *)operator new(12 * v178);
            }
            else
            {
              long double v179 = 0;
            }
            long double v180 = &v179[12 * v175];
            *(void *)long double v180 = v288;
            *((_DWORD *)v180 + 2) = v284;
            double v181 = v180;
            if (v116 != v174)
            {
              do
              {
                uint64_t v182 = *(void *)(v116 - 12);
                v116 -= 12;
                int v183 = *((_DWORD *)v116 + 2);
                *(void *)(v181 - 12) = v182;
                v181 -= 12;
                *((_DWORD *)v181 + 2) = v183;
              }
              while (v116 != v174);
              uint64_t v116 = (char *)v300;
            }
            long double v173 = v180 + 12;
            int v300 = v181;
            std::string __p = v180 + 12;
            long long v302 = &v179[12 * v178];
            if (v116) {
              operator delete(v116);
            }
            uint64_t v168 = v288;
          }
          else
          {
            *(void *)uint64_t v116 = v288;
            *((_DWORD *)v116 + 2) = v284;
            long double v173 = v116 + 12;
          }
          std::string __p = v173;
          uint64_t v184 = (uint64_t)&(*v4)[12 * v16];
          *(void *)uint64_t v184 = v168;
          *(_DWORD *)(v184 + 8) = v284;
          goto LABEL_276;
        }
        int v169 = *(_DWORD *)&v41[12 * v283 + 4];
        uint64x2_t v170 = v302;
        if (v169 != HIDWORD(v288)) {
          goto LABEL_225;
        }
        if (v116 >= v302)
        {
          long double v185 = (char *)v300;
          unint64_t v186 = 0xAAAAAAAAAAAAAAABLL * ((v116 - (unsigned char *)v300) >> 2);
          unint64_t v187 = v186 + 1;
          if (v186 + 1 > 0x1555555555555555) {
            goto LABEL_379;
          }
          if (0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2) > v187) {
            unint64_t v187 = 0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v302 - (unsigned char *)v300) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v188 = 0x1555555555555555;
          }
          else {
            unint64_t v188 = v187;
          }
          if (v188)
          {
            if (v188 > 0x1555555555555555) {
              goto LABEL_381;
            }
            uint64_t v189 = (char *)operator new(12 * v188);
          }
          else
          {
            uint64_t v189 = 0;
          }
          uint64_t v193 = *(void *)v167;
          double v194 = &v189[12 * v186];
          *((_DWORD *)v194 + 2) = *((_DWORD *)v167 + 2);
          *(void *)double v194 = v193;
          unint64_t v195 = v194;
          if (v116 != v185)
          {
            do
            {
              uint64_t v196 = *(void *)(v116 - 12);
              v116 -= 12;
              int v197 = *((_DWORD *)v116 + 2);
              *(void *)(v195 - 12) = v196;
              v195 -= 12;
              *((_DWORD *)v195 + 2) = v197;
            }
            while (v116 != v185);
            uint64_t v116 = (char *)v300;
          }
          long double v172 = v194 + 12;
          int v300 = v195;
          std::string __p = v194 + 12;
          long long v302 = &v189[12 * v188];
          if (v116) {
            operator delete(v116);
          }
        }
        else
        {
          uint64_t v171 = *(void *)v167;
          *((_DWORD *)v116 + 2) = *((_DWORD *)v167 + 2);
          *(void *)uint64_t v116 = v171;
          long double v172 = v116 + 12;
        }
        std::string __p = v172;
        unint64_t v16 = v283;
      }
LABEL_276:
      if (v286 != sub_46C760(v287) - 1) {
        goto LABEL_312;
      }
      if (v291 != 0xAAAAAAAAAAAAAAABLL * ((v304 - v303) >> 2) - 1) {
        goto LABEL_312;
      }
      float64x2_t v203 = v294[1];
      float64x2_t v204 = &(*v294)[12 * v16];
      if (v203 - v204 < 1) {
        goto LABEL_312;
      }
      uint64_t v205 = (v203 - v204) / 12;
      int v206 = (char *)__p;
      int64_t v207 = ((unsigned char *)__p - (unsigned char *)v300) / 12;
      unint64_t v208 = (char *)v300 + 12 * v207;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v302 - (unsigned char *)__p) >> 2)) < v205)
      {
        unint64_t v209 = v207 + v205;
        if ((unint64_t)(v207 + v205) > 0x1555555555555555) {
          sub_2E00();
        }
        if (0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2) > v209) {
          unint64_t v209 = 0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v302 - (unsigned char *)v300) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v210 = 0x1555555555555555;
        }
        else {
          unint64_t v210 = v209;
        }
        if (v210)
        {
          if (v210 > 0x1555555555555555) {
            sub_188D718();
          }
          int64x2_t v211 = (char *)operator new(12 * v210);
        }
        else
        {
          int64x2_t v211 = 0;
        }
        uint64_t v221 = &v211[12 * v207];
        uint64_t v222 = 12 * v205;
        uint64_t v223 = &v221[12 * v205];
        uint64_t v224 = v221;
        do
        {
          uint64_t v225 = *(void *)v204;
          *((_DWORD *)v224 + 2) = *((_DWORD *)v204 + 2);
          *(void *)uint64_t v224 = v225;
          v224 += 12;
          v204 += 12;
          v222 -= 12;
        }
        while (v222);
        uint64_t v226 = v300;
        if (v300 != v208)
        {
          uint64_t v227 = v208;
          do
          {
            uint64_t v228 = *(void *)(v227 - 3);
            v227 -= 3;
            int v229 = v227[2];
            *(void *)(v221 - 12) = v228;
            v221 -= 12;
            *((_DWORD *)v221 + 2) = v229;
          }
          while (v227 != v226);
          int v206 = (char *)__p;
        }
        if (v206 != v208) {
          memmove(v223, v208, v206 - v208);
        }
        uint64_t v230 = v300;
        int v300 = v221;
        std::string __p = &v223[v206 - v208];
        long long v302 = &v211[12 * v210];
        if (v230) {
          operator delete(v230);
        }
        goto LABEL_312;
      }
      long double v212 = (char *)((unsigned char *)__p - v208);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__p - v208) >> 2)) >= v205)
      {
        long double v213 = &v204[12 * v205];
        uint64_t v215 = (char *)__p;
        uint64_t v216 = 12 * v205;
        uint64_t v217 = (char *)__p - 12 * v205;
        __int16 v218 = (char *)__p;
        if (v217 < __p)
        {
          do
          {
LABEL_294:
            uint64_t v219 = *(void *)v217;
            *((_DWORD *)v218 + 2) = *((_DWORD *)v217 + 2);
            *(void *)__int16 v218 = v219;
            v218 += 12;
            v217 += 12;
          }
          while (v217 < v206);
        }
LABEL_295:
        char v220 = &v208[v216];
        std::string __p = v218;
        if (v215 != v220) {
          memmove(v220, v208, v215 - v220);
        }
        if (v213 != v204) {
          memmove(v208, v204, v213 - v204);
        }
        goto LABEL_312;
      }
      long double v213 = &v204[4 * (((unsigned char *)__p - v208) >> 2)];
      int64_t v214 = v203 - v213;
      if (v203 != v213) {
        memmove(__p, &v204[4 * (((unsigned char *)__p - v208) >> 2)], v203 - v213);
      }
      uint64_t v215 = &v206[v214];
      std::string __p = &v206[v214];
      if ((uint64_t)v212 >= 1)
      {
        uint64_t v216 = 12 * v205;
        uint64_t v217 = &v215[-12 * v205];
        __int16 v218 = &v206[v214];
        if (v217 < v206) {
          goto LABEL_294;
        }
        goto LABEL_295;
      }
LABEL_312:
      long double v231 = operator new(0x18uLL);
      v296 = v231 + 6;
      uint64_t v297 = (char *)(v231 + 6);
      *(void *)long double v231 = v298;
      v231[2] = v299;
      v231[3] = v29;
      *((void *)v231 + 2) = v293;
      v295 = v231;
      sub_EA0754(a1, &v295, (unsigned int **)&v300);
      if (v295)
      {
        v296 = v295;
        operator delete(v295);
      }
      uint64_t v232 = nullsub_1(v290);
      int v233 = (char *)v300;
      int64_t v234 = (unsigned char *)__p - (unsigned char *)v300;
      if ((unsigned char *)__p - (unsigned char *)v300 < 1) {
        goto LABEL_348;
      }
      long double v235 = (void **)v232;
      uint64_t v236 = v234 / 12;
      unint64_t v237 = *(void *)(v232 + 8);
      uint64_t v238 = (uint64_t)(v237 - *(void *)v232) / 12;
      unint64_t v239 = (char *)(*(void *)v232 + 12 * v238);
      uint64_t v240 = *(void *)(v232 + 16);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v240 - v237) >> 2)) >= v234 / 12)
      {
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v237 - (void)v239) >> 2)) >= v236)
        {
          uint64_t v244 = (char *)v300 + 12 * v236;
          char v246 = *(char **)(v232 + 8);
          uint64_t v247 = 12 * v236;
          unint64_t v248 = (char *)(v237 - 12 * v236);
          long long v249 = v246;
          if ((unint64_t)v248 >= v237)
          {
LABEL_331:
            long long v251 = &v239[v247];
            v235[1] = v249;
            if (v246 != v251) {
              memmove(v251, v239, v246 - v251);
            }
            if (v244 != v233) {
              memmove(v239, v233, v244 - v233);
            }
            goto LABEL_348;
          }
        }
        else
        {
          uint64_t v244 = (char *)v300 + 4 * ((uint64_t)(v237 - (void)v239) >> 2);
          long long v245 = (char *)((unsigned char *)__p - v244);
          if (__p != v244) {
            memmove(*(void **)(v232 + 8), (char *)v300 + 4 * ((uint64_t)(v237 - (void)v239) >> 2), (unsigned char *)__p - v244);
          }
          char v246 = &v245[v237];
          v235[1] = &v245[v237];
          if ((uint64_t)(v237 - (void)v239) < 1) {
            goto LABEL_348;
          }
          uint64_t v247 = 12 * v236;
          unint64_t v248 = &v246[-12 * v236];
          long long v249 = &v245[v237];
          if ((unint64_t)v248 >= v237) {
            goto LABEL_331;
          }
        }
        do
        {
          uint64_t v250 = *(void *)v248;
          *((_DWORD *)v249 + 2) = *((_DWORD *)v248 + 2);
          *(void *)long long v249 = v250;
          v249 += 12;
          v248 += 12;
        }
        while ((unint64_t)v248 < v237);
        goto LABEL_331;
      }
      unint64_t v241 = v238 + v236;
      if ((unint64_t)(v238 + v236) > 0x1555555555555555) {
        sub_2E00();
      }
      if (0x5555555555555556 * ((v240 - *(void *)v232) >> 2) > v241) {
        unint64_t v241 = 0x5555555555555556 * ((v240 - *(void *)v232) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v240 - *(void *)v232) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v242 = 0x1555555555555555;
      }
      else {
        unint64_t v242 = v241;
      }
      if (v242)
      {
        if (v242 > 0x1555555555555555) {
          sub_188D718();
        }
        unint64_t v243 = (char *)operator new(12 * v242);
      }
      else
      {
        unint64_t v243 = 0;
      }
      v252 = &v243[12 * v238];
      uint64_t v253 = 12 * v236;
      unint64_t v254 = &v252[12 * v236];
      unint64_t v255 = v252;
      do
      {
        uint64_t v256 = *(void *)v233;
        *((_DWORD *)v255 + 2) = *((_DWORD *)v233 + 2);
        *(void *)unint64_t v255 = v256;
        v255 += 12;
        v233 += 12;
        v253 -= 12;
      }
      while (v253);
      uint64_t v257 = (char *)*v235;
      if (*v235 != v239)
      {
        float64x2_t v258 = v239;
        do
        {
          uint64_t v259 = *(void *)(v258 - 12);
          v258 -= 12;
          int v260 = *((_DWORD *)v258 + 2);
          *(void *)(v252 - 12) = v259;
          v252 -= 12;
          *((_DWORD *)v252 + 2) = v260;
        }
        while (v258 != v257);
        unint64_t v237 = (unint64_t)v235[1];
      }
      if ((char *)v237 != v239) {
        memmove(v254, v239, v237 - (void)v239);
      }
      float64x2_t v261 = *v235;
      *long double v235 = v252;
      v235[1] = &v254[v237 - (void)v239];
      v235[2] = &v243[12 * v242];
      if (v261) {
        operator delete(v261);
      }
LABEL_348:
      if (v300)
      {
        std::string __p = v300;
        operator delete(v300);
      }
      uint64_t v27 = v291 + 1;
      long long v24 = v303;
      unint64_t v26 = v16;
      unint64_t v4 = v294;
      if (v291 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((v304 - v303) >> 2)) {
        goto LABEL_350;
      }
    }
    uint64_t v65 = 0;
    double v38 = (double)v29;
    uint64_t v66 = v39;
    double v67 = (double)v39;
    if (v26 > v43) {
      unint64_t v43 = v26;
    }
    uint64_t v68 = &v41[12 * v26 + 12];
    double v37 = 1.79769313e308;
    unint64_t v69 = v26;
    unint64_t v16 = v26;
    while (1)
    {
      if (v43 == v69) {
        goto LABEL_115;
      }
      uint64_t v71 = *((unsigned int *)v68 - 3);
      LODWORD(v70) = *((_DWORD *)v68 - 2);
      double v72 = (double)v71;
      double v73 = (double)v70;
      uint64_t v75 = *(unsigned int *)v68;
      LODWORD(v74) = *((_DWORD *)v68 + 1);
      double v76 = (double)v75 - (double)v71;
      double v77 = (double)v74 - (double)v70;
      double v78 = v76 * v76 + v77 * v77;
      double v79 = fabs(v78);
      if (v78 == 0.0 || v79 < 2.22044605e-16) {
        break;
      }
      double v83 = ((v38 - v72) * v76 + (v67 - v73) * v77) / v78;
      if (v83 <= 0.0)
      {
        unint64_t v81 = *(void *)(v68 - 12);
        unint64_t v70 = HIDWORD(v81);
        unint64_t v82 = HIDWORD(v81);
      }
      else
      {
        if (v83 >= 1.0) {
          break;
        }
        double v84 = v77 * v83 + v73;
        double v85 = v76 * v83 + v72;
        if (v85 < 0.0) {
          double v86 = -0.5;
        }
        else {
          double v86 = 0.5;
        }
        LODWORD(v81) = (v85 + v86);
        if (v84 < 0.0) {
          double v87 = -0.5;
        }
        else {
          double v87 = 0.5;
        }
        LODWORD(v82) = (v84 + v87);
        if (v82 >= 0xFFFFFFFE) {
          LODWORD(v82) = -2;
        }
      }
LABEL_95:
      double v88 = sqrt((double)((v29 - v81) * (v29 - v81)
                        + (v66 - v82) * (v66 - (unint64_t)v82)))
          / 100.0;
      if (v88 < v37)
      {
        unint64_t v16 = v69;
        double v37 = v88;
      }
      double v36 = sqrt((double)((v71 - v75) * (v71 - v75)
                        + (v70 - (unint64_t)v74)
                        * (v70 - (unint64_t)v74)))
          / 100.0
          * 100.0;
      if (v36 >= 0.0)
      {
        double v89 = v36;
        if (v36 < 4.50359963e15)
        {
          uint64_t v90 = (uint64_t)(v36 + v36) + 1;
LABEL_104:
          double v89 = (double)(v90 >> 1);
        }
      }
      else
      {
        double v89 = v36;
        if (v36 > -4.50359963e15)
        {
          uint64_t v90 = (uint64_t)(v36 + v36);
          if (v90 >= 1) {
            --v90;
          }
          goto LABEL_104;
        }
      }
      if (v89 >= 9.22337204e18)
      {
        v65 += 0x7FFFFFFFFFFFFFFELL;
        v68 += 12;
        ++v69;
        if (v65 > v40) {
          goto LABEL_115;
        }
      }
      else
      {
        if (v36 >= 0.0)
        {
          if (v36 < 4.50359963e15)
          {
            uint64_t v91 = (uint64_t)(v36 + v36) + 1;
LABEL_113:
            double v36 = (double)(v91 >> 1);
          }
        }
        else if (v36 > -4.50359963e15)
        {
          uint64_t v91 = (uint64_t)(v36 + v36);
          if (v91 >= 1) {
            --v91;
          }
          goto LABEL_113;
        }
        v65 += (uint64_t)v36;
        v68 += 12;
        ++v69;
        if (v65 > v40) {
          goto LABEL_115;
        }
      }
    }
    unint64_t v81 = *(void *)v68;
    uint64_t v74 = HIDWORD(*(void *)v68);
    LODWORD(v82) = v74;
    goto LABEL_95;
  }
  return result;
}

void sub_E9F71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32)
{
  if (__p)
  {
    operator delete(__p);
    double v34 = *(void **)(v32 - 160);
    if (!v34) {
      goto LABEL_6;
    }
  }
  else
  {
    double v34 = *(void **)(v32 - 160);
    if (!v34) {
LABEL_6:
    }
      _Unwind_Resume(exception_object);
  }
  *(void *)(v32 - 152) = v34;
  operator delete(v34);
  goto LABEL_6;
}

void sub_E9F844(uint64_t *a1, void *a2)
{
  unint64_t v4 = sub_46C760(a2);
  if (!v4) {
    return;
  }
  unint64_t v5 = v4;
  uint64_t v6 = 0;
  int v7 = 0;
  unint64_t v8 = 0;
  for (uint64_t i = 0; i != v5; ++i)
  {
    uint64_t v10 = nullsub_1(a2[1248] + v6);
    uint64_t v12 = *(_DWORD **)v10;
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11 - *(void *)v10 != 24 || *v12 != *(_DWORD *)(v11 - 12)) {
      goto LABEL_12;
    }
    BOOL v13 = v12[1] == *(_DWORD *)(v11 - 8);
    int v14 = !v13;
    if (((v14 | v7) & 1) == 0)
    {
      unint64_t v8 = i - (i != 0);
      int v7 = 1;
      goto LABEL_4;
    }
    if (!v13)
    {
LABEL_12:
      if (((v7 ^ 1) & 1) == 0)
      {
        sub_EA0EF0(a1, a2, v8, i + 1);
        int v7 = 0;
      }
    }
LABEL_4:
    v6 += 40;
  }
  if (v7)
  {
    unint64_t v15 = sub_46C760(a2);
    sub_EA0EF0(a1, a2, v8, v15);
  }
}

void sub_E9F988()
{
  sub_557BC((uint64_t)v0);
}

void sub_EA0470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_5450C((uint64_t)va);
  sub_3BDE2C(v9 - 184);
  _Unwind_Resume(a1);
}

void sub_EA04A4(_Unwind_Exception *a1)
{
  sub_3BDE2C(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_EA04B8(_Unwind_Exception *a1)
{
  sub_3BDE2C(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_EA04CC(_Unwind_Exception *a1)
{
  sub_3BDE2C(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_EA04E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  sub_111ECAC((uint64_t)&a20);
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  if (a64 < 0)
  {
    operator delete(a59);
    if ((*(char *)(v64 - 217) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v64 - 217) & 0x80000000) == 0)
  {
LABEL_9:
    uint64_t v66 = *(void **)(v64 - 208);
    if (!v66) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  operator delete(*(void **)(v64 - 240));
  uint64_t v66 = *(void **)(v64 - 208);
  if (!v66)
  {
LABEL_11:
    sub_3BDE2C(v64 - 184);
    _Unwind_Resume(a1);
  }
LABEL_10:
  *(void *)(v64 - 200) = v66;
  operator delete(v66);
  goto LABEL_11;
}

void sub_EA0754(uint64_t a1, void *a2, unsigned int **a3)
{
  unint64_t v4 = (_DWORD *)*a2;
  uint64_t v3 = (_DWORD *)a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a2) >> 2) < 2) {
    return;
  }
  int v6 = v4[2];
  if (v4 == v3)
  {
LABEL_11:
    uint64_t v11 = (char *)a3[1] - (char *)*a3;
    if (v11)
    {
      uint64_t v12 = v11 / 12;
      uint64_t v13 = 2;
      do
      {
        (*a3)[v13] = v6;
        v13 += 3;
        --v12;
      }
      while (v12);
    }
    return;
  }
  int v8 = *(v3 - 1);
  uint64_t v9 = (_DWORD *)*a2;
  do
  {
    if (v9[2] == 0x7FFFFFFF)
    {
      (*a3)[2] = v6;
      if (v6 == 0x7FFFFFFF) {
        int v14 = v8;
      }
      else {
        int v14 = v6;
      }
      unint64_t v15 = a3[1];
      uint64_t v16 = v15 - *a3;
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * v16 - 1;
      if (v17 <= 1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * v16 - 1;
      }
      if (v17 >= 2)
      {
        unint64_t v19 = v18 - 1;
        uint64_t v20 = 5;
        do
        {
          (*a3)[v20] = v14;
          v20 += 3;
          --v19;
        }
        while (v19);
        unint64_t v15 = a3[1];
      }
      *(v15 - 1) = v8;
      return;
    }
    v9 += 3;
  }
  while (v9 != v3);
  uint64_t v10 = (_DWORD *)*a2;
  while (*v10 == *v4 && v10[1] == v4[1] && v10[2] == v6)
  {
    v10 += 3;
    if (v10 == v3) {
      goto LABEL_11;
    }
  }
  double v79 = 0;
  long long v80 = 0;
  uint64_t v81 = 0;
  int v78 = 0;
  *(double *)std::string __p = (double)v6 / 100.0;
  sub_E9DC88((char **)&v79, &v78, __p);
  __p[0] = &v79;
  sub_EA2160(a2, (uint64_t *)__p);
  sub_65DB8((uint64_t)&v79, 1, (uint64_t *)__p);
  double v21 = *(v80 - 2);
  long long v22 = *a3;
  uint64_t v23 = (char *)a3[1];
  if (*a3 == (unsigned int *)v23 || (long long v24 = (char *)(v22 + 3), v22 + 3 == (unsigned int *)v23))
  {
    if (v21 == 0.0)
    {
LABEL_43:
      int64_t v43 = v23 - (char *)v22;
      if (!v43) {
        goto LABEL_88;
      }
      unint64_t v44 = 0;
      double v45 = (double)v8;
      uint64_t v46 = v43 / 12;
      while (1)
      {
        unint64_t v49 = *a3;
        uint64_t v48 = a3[1];
        uint64_t v50 = sub_38128(a3, v44);
        double v51 = (double)v44 / (double)(unint64_t)(-1 - 0x5555555555555555 * (v48 - v49));
        double v52 = (1.0 - v51) * (double)v6;
        if (v52 >= 0.0)
        {
          if (v52 >= 4.50359963e15) {
            goto LABEL_55;
          }
          uint64_t v53 = (uint64_t)(v52 + v52) + 1;
        }
        else
        {
          if (v52 <= -4.50359963e15) {
            goto LABEL_55;
          }
          uint64_t v53 = (uint64_t)(v52 + v52);
          if (v53 >= 1) {
            --v53;
          }
        }
        double v52 = (double)(v53 >> 1);
LABEL_55:
        double v47 = v51 * v45;
        if (v47 >= 0.0)
        {
          if (v47 >= 4.50359963e15) {
            goto LABEL_46;
          }
          uint64_t v54 = (uint64_t)(v47 + v47) + 1;
        }
        else
        {
          if (v47 <= -4.50359963e15) {
            goto LABEL_46;
          }
          uint64_t v54 = (uint64_t)(v47 + v47);
          if (v54 >= 1) {
            --v54;
          }
        }
        double v47 = (double)(v54 >> 1);
LABEL_46:
        *(_DWORD *)(v50 + 8) = (int)v47 + (int)v52;
        if (v46 == ++v44) {
          goto LABEL_88;
        }
      }
    }
    goto LABEL_63;
  }
  unint64_t v25 = v23 - (char *)v22 - 24;
  if (v25 < 0xC)
  {
    double v26 = 0.0;
    uint64_t v27 = *a3;
    goto LABEL_35;
  }
  unint64_t v28 = v25 / 0xC + 1;
  uint64_t v29 = 3 * (v28 & 0x3FFFFFFFFFFFFFFELL);
  v24 += v29 * 4;
  uint64_t v27 = &v22[v29];
  double v30 = v22 + 4;
  double v26 = 0.0;
  uint64_t v31 = v28 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    uint64_t v33 = *(v30 - 1);
    uint64_t v32 = *v30;
    double v26 = v26
        + sqrt((double)((*(v30 - 4) - v33) * (*(v30 - 4) - v33)
                      + (*(v30 - 3) - v32) * ((unint64_t)*(v30 - 3) - v32)))
        / 100.0
        + sqrt((double)((v33 - v30[2]) * (v33 - v30[2]) + (v32 - v30[3]) * (v32 - (unint64_t)v30[3]))) / 100.0;
    v30 += 6;
    v31 -= 2;
  }
  while (v31);
  if (v28 != (v28 & 0x3FFFFFFFFFFFFFFELL))
  {
    do
    {
LABEL_35:
      unsigned int v34 = *(_DWORD *)v24;
      v24 += 12;
      unint64_t v35 = v27[1] - (unint64_t)v27[4];
      double v26 = v26 + sqrt((double)((*v27 - (unint64_t)v34) * (*v27 - (unint64_t)v34) + v35 * v35)) / 100.0;
      v27 += 3;
    }
    while (v24 != v23);
  }
  if (v21 <= 0.0 || v26 <= 0.0)
  {
    if (v21 == 0.0) {
      goto LABEL_43;
    }
    if (v26 != 0.0) {
      goto LABEL_88;
    }
LABEL_63:
    int64_t v55 = v23 - (char *)v22;
    if (!v55) {
      goto LABEL_88;
    }
    unint64_t v56 = 0;
    uint64_t v57 = v55 / 12;
    while (1)
    {
      sub_66188((uint64_t)__p, v21 * ((double)v56 / (double)(unint64_t)(-1 - 0x5555555555555555 * (a3[1] - *a3))));
      double v60 = v59;
      uint64_t v61 = sub_38128(a3, v56);
      double v58 = v60 * 100.0;
      if (v60 * 100.0 >= 0.0)
      {
        if (v58 >= 4.50359963e15) {
          goto LABEL_66;
        }
        uint64_t v62 = (uint64_t)(v58 + v58) + 1;
      }
      else
      {
        if (v58 <= -4.50359963e15) {
          goto LABEL_66;
        }
        uint64_t v62 = (uint64_t)(v58 + v58);
        if (v62 >= 1) {
          --v62;
        }
      }
      double v58 = (double)(v62 >> 1);
LABEL_66:
      *(_DWORD *)(v61 + 8) = (int)v58;
      if (v57 == ++v56) {
        goto LABEL_88;
      }
    }
  }
  v22[2] = v6;
  double v36 = *a3;
  double v37 = a3[1];
  if (v36 != v37)
  {
    double v38 = v36 + 3;
    if (v36 + 3 != v37)
    {
      unint64_t v39 = (char *)v37 - (char *)v36 - 24;
      if (v39 < 0xC)
      {
        double v40 = 0.0;
        int v41 = v36 + 3;
        unint64_t v42 = v36;
        goto LABEL_77;
      }
      unint64_t v63 = v39 / 0xC + 1;
      uint64_t v64 = 3 * (v63 & 0x3FFFFFFFFFFFFFFELL);
      int v41 = &v38[v64];
      unint64_t v42 = &v36[v64];
      uint64_t v65 = v36 + 4;
      double v40 = 0.0;
      uint64_t v66 = v63 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v68 = *(v65 - 1);
        uint64_t v67 = *v65;
        double v40 = v40
            + sqrt((double)((*(v65 - 4) - v68) * (*(v65 - 4) - v68)
                          + (*(v65 - 3) - v67) * ((unint64_t)*(v65 - 3) - v67)))
            / 100.0
            + sqrt((double)((v68 - v65[2]) * (v68 - v65[2]) + (v67 - v65[3]) * (v67 - (unint64_t)v65[3])))
            / 100.0;
        v65 += 6;
        v66 -= 2;
      }
      while (v66);
      if (v63 != (v63 & 0x3FFFFFFFFFFFFFFELL))
      {
        do
        {
LABEL_77:
          unsigned int v69 = *v41;
          v41 += 3;
          unint64_t v70 = v42[1] - (unint64_t)v42[4];
          double v40 = v40
              + sqrt((double)((*v42 - (unint64_t)v69) * (*v42 - (unint64_t)v69) + v70 * v70)) / 100.0;
          v42 += 3;
        }
        while (v41 != v37);
      }
      double v71 = 0.0;
      double v72 = *(v80 - 2) / v40;
      while (2)
      {
        unint64_t v74 = *(v38 - 2) - (unint64_t)v38[1];
        double v71 = v71
            + sqrt((double)((*(v38 - 3) - (unint64_t)*v38) * (*(v38 - 3) - (unint64_t)*v38) + v74 * v74))
            / 100.0;
        sub_66188((uint64_t)__p, v72 * v71);
        double v73 = v75 * 100.0;
        if (v73 >= 0.0)
        {
          if (v73 < 4.50359963e15)
          {
            uint64_t v76 = (uint64_t)(v73 + v73) + 1;
            goto LABEL_79;
          }
        }
        else if (v73 > -4.50359963e15)
        {
          uint64_t v76 = (uint64_t)(v73 + v73);
          if (v76 >= 1) {
            --v76;
          }
LABEL_79:
          double v73 = (double)(v76 >> 1);
        }
        v38[2] = (int)v73;
        v38 += 3;
        if (v38 == v37) {
          break;
        }
        continue;
      }
    }
  }
LABEL_88:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v79)
  {
    long long v80 = (double *)v79;
    operator delete(v79);
  }
}

void sub_EA0E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_EA0EF0(uint64_t *a1, void *a2, unint64_t a3, unint64_t a4)
{
  if (a3 == a4) {
    return;
  }
  unint64_t v5 = a3;
  int v8 = a2 + 1248;
  uint64_t v9 = sub_E9DA58(a2 + 1248, a3);
  nullsub_1(v9);
  uint64_t v221 = v8;
  uint64_t v10 = sub_E9DA58(v8, a4 - 1);
  nullsub_1(v10);
  uint64_t v247 = 0;
  unint64_t v248 = 0;
  long long v249 = 0;
  uint64_t v244 = 0;
  long long v245 = 0;
  char v246 = 0;
  unint64_t v241 = 0;
  unint64_t v242 = 0;
  uint64_t v243 = 0;
  if (v5 <= a4) {
    unint64_t v11 = a4;
  }
  else {
    unint64_t v11 = v5;
  }
  uint64_t v219 = a2;
  unint64_t v220 = v11;
  __int16 v218 = a1;
  if (v5 >= a4) {
    goto LABEL_256;
  }
  unint64_t v217 = v5;
  uint64_t v12 = v5;
  do
  {
    uint64_t v13 = *a1;
    unint64_t v223 = v12;
    uint64_t v14 = sub_46C8EC(v219, v12);
    sub_2954EC(v13, *(void *)(v14 + 32), (uint64_t)&v237);
    sub_2E51EC((uint64_t)&v237, (uint64_t)v226);
    if (v240)
    {
      if (v238 == v239) {
        int v15 = 0;
      }
      else {
        int v15 = -1;
      }
      LODWORD(v16) = v15;
      unsigned int v17 = v233;
      int v222 = v15;
      if (v232 != v15 || v233 != v15) {
        goto LABEL_29;
      }
      goto LABEL_233;
    }
    if (v238 == v239)
    {
      LODWORD(v16) = 0;
      unsigned int v17 = v233;
      int v222 = 0;
      if (v232) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = v233 == 0;
      }
      if (v26) {
        goto LABEL_233;
      }
LABEL_29:
      uint64_t v27 = (unsigned __int16 *)v228;
      while (1)
      {
        unint64_t v28 = &v27[2 * v17];
        int v29 = v28[2];
        int v30 = v28[3];
        unsigned int v31 = sub_511FC(v230);
        unsigned int v32 = v230 & ~(-1 << (v31 & 0xFE));
        int v33 = sub_51938(v32);
        int v34 = sub_51938(v32 >> 1);
        int v35 = 1 << -(v31 >> 1);
        if (v31 < 2) {
          int v35 = -2;
        }
        if ((v34 * v35 + 4 * v30) >= 0xFFFFFFFE) {
          unsigned int v36 = -2;
        }
        else {
          unsigned int v36 = v34 * v35 + 4 * v30;
        }
        unsigned int v37 = v33 * v35 + 4 * v29;
        double v38 = v248;
        if (v248 < v249)
        {
          *unint64_t v248 = (double)v37;
          v38[1] = (double)v36;
          unint64_t v39 = v38 + 2;
          goto LABEL_51;
        }
        double v40 = v247;
        uint64_t v41 = ((char *)v248 - v247) >> 4;
        unint64_t v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v43 = (char *)v249 - v247;
        if (((char *)v249 - v247) >> 3 > v42) {
          unint64_t v42 = v43 >> 3;
        }
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v42;
        }
        if (v44 >> 60) {
LABEL_313:
        }
          sub_188D718();
        double v45 = (char *)operator new(16 * v44);
        uint64_t v46 = (double *)&v45[16 * v41];
        *uint64_t v46 = (double)v37;
        v46[1] = (double)v36;
        if (v38 == (double *)v40)
        {
          unint64_t v39 = v46 + 2;
          uint64_t v247 = &v45[16 * v41];
          unint64_t v248 = v46 + 2;
          long long v249 = (double *)&v45[16 * v44];
          if (v40) {
            goto LABEL_50;
          }
        }
        else
        {
          double v47 = &v45[16 * v41];
          do
          {
            uint64_t v48 = v47 - 16;
            *((_OWORD *)v47 - 1) = *((_OWORD *)v38 - 1);
            v38 -= 2;
            v47 -= 16;
          }
          while (v38 != (double *)v40);
          unint64_t v39 = v46 + 2;
          uint64_t v247 = v48;
          unint64_t v248 = v46 + 2;
          long long v249 = (double *)&v45[16 * v44];
          if (v40) {
LABEL_50:
          }
            operator delete(v40);
        }
LABEL_51:
        unint64_t v248 = v39;
        unint64_t v49 = v245;
        if (v245 >= v246)
        {
          double v51 = v244;
          uint64_t v52 = v245 - v244;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v54 = (char *)v246 - (char *)v244;
          if (((char *)v246 - (char *)v244) >> 2 > v53) {
            unint64_t v53 = v54 >> 2;
          }
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v55 = v53;
          }
          if (v55)
          {
            if (v55 >> 61) {
              goto LABEL_313;
            }
            unint64_t v56 = operator new(8 * v55);
            uint64_t v57 = (unint64_t *)&v56[8 * v52];
            *uint64_t v57 = v223;
            uint64_t v50 = (uint64_t)(v57 + 1);
            if (v49 == v51) {
              goto LABEL_70;
            }
LABEL_64:
            unint64_t v58 = (char *)(v49 - 1) - (char *)v51;
            if (v58 < 0x58) {
              goto LABEL_318;
            }
            if ((unint64_t)((char *)v51 - v56) < 0x20) {
              goto LABEL_318;
            }
            uint64_t v59 = (v58 >> 3) + 1;
            uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v61 = &v49[v60 / 0xFFFFFFFFFFFFFFF8];
            uint64_t v57 = (unint64_t *)((char *)v57 - v60);
            uint64_t v62 = &v56[8 * v52 - 16];
            unint64_t v63 = v49 - 2;
            uint64_t v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v65 = *(_OWORD *)v63;
              *(v62 - 1) = *((_OWORD *)v63 - 1);
              *uint64_t v62 = v65;
              v62 -= 2;
              v63 -= 4;
              v64 -= 4;
            }
            while (v64);
            unint64_t v49 = v61;
            if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_318:
              do
              {
                unint64_t v66 = *--v49;
                *--uint64_t v57 = v66;
              }
              while (v49 != v51);
            }
          }
          else
          {
            unint64_t v56 = 0;
            uint64_t v57 = (unint64_t *)(8 * v52);
            *(void *)(8 * v52) = v223;
            uint64_t v50 = 8 * v52 + 8;
            if (v49 != v51) {
              goto LABEL_64;
            }
          }
LABEL_70:
          uint64_t v244 = v57;
          long long v245 = (unint64_t *)v50;
          char v246 = (unint64_t *)&v56[8 * v55];
          if (v51) {
            operator delete(v51);
          }
          goto LABEL_72;
        }
        *long long v245 = v223;
        uint64_t v50 = (uint64_t)(v49 + 1);
LABEL_72:
        long long v245 = (unint64_t *)v50;
        uint64_t v67 = v233;
        if ((_BYTE)v234)
        {
          unsigned int v17 = --v233;
          uint64_t v27 = (unsigned __int16 *)v228;
          if ((v67 - 1) >= *(_DWORD *)v228)
          {
            uint64_t v70 = *(void *)v226[1];
            uint64_t v80 = *((void *)v226[1] + 1) - *(void *)v226[1];
            unsigned int v73 = --v232;
            if (v232 < (unint64_t)(v80 >> 3)) {
              goto LABEL_92;
            }
            goto LABEL_30;
          }
          uint64_t v68 = (unsigned __int16 *)((char *)v228 + 4 * v67 + 4);
          unsigned int v69 = (unsigned __int16 *)((char *)v228 + 4 * v17 + 4);
          if (*v68 != *v69 || v68[1] != v69[1]) {
            goto LABEL_30;
          }
          uint64_t v70 = *(void *)v226[1];
          uint64_t v71 = *((void *)v226[1] + 1) - *(void *)v226[1];
          if (*(_DWORD *)v228 == 2 && v71 == 8) {
            goto LABEL_30;
          }
          unsigned int v17 = v67 - 2;
          unsigned int v73 = --v232;
          unsigned int v233 = v17;
          if (v232 >= (unint64_t)(v71 >> 3)) {
            goto LABEL_30;
          }
LABEL_92:
          while (2)
          {
            unint64_t v81 = *(void *)(v70 + 8 * v73);
            unsigned int v230 = v81;
            unint64_t v82 = v226[0];
            int v250 = 1;
            v251[0] = v81;
            uint64_t v224 = &v250;
            uint64_t v225 = v251;
            unint64_t v83 = *((void *)v226[0] + 482) + 1;
            *((void *)v226[0] + 482) = v83;
            if (*(void *)v82)
            {
              double v84 = (char *)(v82 + 4);
              if (v82[28] == v81)
              {
                unsigned int v85 = 4;
                goto LABEL_101;
              }
              if (v82[34] == v81)
              {
                unsigned int v85 = 5;
                goto LABEL_101;
              }
              if (v82[40] == v81)
              {
                unsigned int v85 = 6;
                goto LABEL_101;
              }
              if (v82[46] == v81)
              {
                unsigned int v85 = 7;
LABEL_101:
                ++*((void *)v82 + 483);
                double v86 = &v84[24 * v85];
                *((void *)v86 + 1) = v83;
                double v87 = (unsigned int *)*((void *)v86 + 2);
                if (v87)
                {
LABEL_102:
                  double v88 = (int *)((char *)v87 + *v87);
                  double v89 = (unsigned __int16 *)((char *)v88 - *v88);
                  if (*v89 < 7u)
                  {
LABEL_119:
                    int v99 = 0;
                    goto LABEL_120;
                  }
LABEL_117:
                  uint64_t v98 = v89[3];
                  if (!v98) {
                    goto LABEL_119;
                  }
                  int v99 = *(int *)((char *)v88 + v98);
LABEL_120:
                  int v231 = v99;
                  BOOL v100 = v226[0];
                  unsigned int v101 = v230;
                  int v250 = 1;
                  v251[0] = v230;
                  uint64_t v224 = &v250;
                  uint64_t v225 = v251;
                  unint64_t v102 = *((void *)v226[0] + 482) + 1;
                  *((void *)v226[0] + 482) = v102;
                  if (*(void *)v100)
                  {
                    int v103 = (char *)(v100 + 4);
                    if (v100[28] == v101)
                    {
                      unsigned int v104 = 4;
                      goto LABEL_129;
                    }
                    if (v100[34] == v101)
                    {
                      unsigned int v104 = 5;
                      goto LABEL_129;
                    }
                    if (v100[40] == v101)
                    {
                      unsigned int v104 = 6;
                      goto LABEL_129;
                    }
                    if (v100[46] == v101)
                    {
                      unsigned int v104 = 7;
LABEL_129:
                      ++*((void *)v100 + 483);
                      double v105 = &v103[24 * v104];
                      *((void *)v105 + 1) = v102;
                      uint64_t v106 = (unsigned int *)*((void *)v105 + 2);
                      if (v106)
                      {
LABEL_130:
                        uint64_t v107 = (int *)((char *)v106 + *v106);
                        uint64_t v108 = (unsigned __int16 *)((char *)v107 - *v107);
                        if (*v108 < 5u)
                        {
LABEL_147:
                          unint64_t v118 = 0;
                          goto LABEL_148;
                        }
LABEL_145:
                        uint64_t v117 = v108[2];
                        if (!v117) {
                          goto LABEL_147;
                        }
                        unint64_t v118 = (char *)v107 + v117 + *(unsigned int *)((char *)v107 + v117);
LABEL_148:
                        unint64_t v119 = &v118[4 * HIDWORD(v81) + 4 + *(unsigned int *)&v118[4 * HIDWORD(v81) + 4]];
                        uint64_t v227 = v119;
                        unint64_t v120 = &v119[-*(int *)v119];
                        unsigned int v121 = *(unsigned __int16 *)v120;
                        if (v121 <= 6)
                        {
                          uint64_t v27 = 0;
                          unint64_t v123 = 0;
                          uint64_t v228 = 0;
                        }
                        else
                        {
                          uint64_t v27 = (unsigned __int16 *)*((unsigned __int16 *)v120 + 3);
                          if (*((_WORD *)v120 + 3)) {
                            uint64_t v27 = (unsigned __int16 *)((char *)v27
                          }
                                                     + (void)v119
                                                     + *(unsigned int *)((char *)v27 + (void)v119));
                          uint64_t v228 = v27;
                          if (v121 >= 0xB && (uint64_t v122 = *((unsigned __int16 *)v120 + 5)) != 0) {
                            unint64_t v123 = &v119[v122 + *(unsigned int *)&v119[v122]];
                          }
                          else {
                            unint64_t v123 = 0;
                          }
                        }
                        int v229 = v123;
                        int v124 = *(_DWORD *)v27;
                        unsigned int v17 = *(_DWORD *)v27 - 2;
                        unsigned int v233 = v17;
                        uint64_t v125 = &v27[2 * (v124 - 1) + 2];
                        int v126 = &v27[2 * v17 + 2];
                        if (*v125 != *v126) {
                          goto LABEL_30;
                        }
                        if (v125[1] != v126[1]) {
                          goto LABEL_30;
                        }
                        unsigned int v17 = v124 - 3;
                        unsigned int v73 = --v232;
                        unsigned int v233 = v17;
                        uint64_t v70 = *(void *)v226[1];
                        if (v232 >= (unint64_t)((uint64_t)(*((void *)v226[1] + 1) - *(void *)v226[1]) >> 3)) {
                          goto LABEL_30;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      unint64_t v109 = *((void *)v100 + 21);
                      unint64_t v110 = *((void *)v100 + 18);
                      unint64_t v111 = *((void *)v100 + 15);
                      unint64_t v112 = *((void *)v100 + 24);
                      uint64_t v106 = (unsigned int *)sub_2AB884(*(void *)v100, 1, v101, 1);
                      if (v111 >= v102) {
                        unint64_t v113 = v102;
                      }
                      else {
                        unint64_t v113 = v111;
                      }
                      BOOL v114 = v110 >= v113;
                      if (v110 < v113) {
                        unint64_t v113 = v110;
                      }
                      unsigned int v115 = 4 * (v111 < v102);
                      if (!v114) {
                        unsigned int v115 = 5;
                      }
                      if (v109 < v113)
                      {
                        unsigned int v115 = 6;
                        unint64_t v113 = v109;
                      }
                      if (v112 < v113) {
                        unsigned int v115 = 7;
                      }
                      uint64_t v116 = &v103[24 * v115];
                      *(_DWORD *)uint64_t v116 = v251[0];
                      *((void *)v116 + 1) = *((void *)v100 + 482);
                      *((void *)v116 + 2) = v106;
                      if (v106) {
                        goto LABEL_130;
                      }
                    }
                  }
                  sub_296654((int **)&v224);
                  uint64_t v107 = 0;
                  uint64_t v108 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                    goto LABEL_147;
                  }
                  goto LABEL_145;
                }
              }
              else
              {
                unint64_t v90 = *((void *)v82 + 21);
                unint64_t v91 = *((void *)v82 + 18);
                unint64_t v92 = *((void *)v82 + 15);
                unint64_t v93 = *((void *)v82 + 24);
                double v87 = (unsigned int *)sub_2AB884(*(void *)v82, 1, v81, 1);
                if (v92 >= v83) {
                  unint64_t v94 = v83;
                }
                else {
                  unint64_t v94 = v92;
                }
                BOOL v95 = v91 >= v94;
                if (v91 < v94) {
                  unint64_t v94 = v91;
                }
                unsigned int v96 = 4 * (v92 < v83);
                if (!v95) {
                  unsigned int v96 = 5;
                }
                if (v90 < v94)
                {
                  unsigned int v96 = 6;
                  unint64_t v94 = v90;
                }
                if (v93 < v94) {
                  unsigned int v96 = 7;
                }
                double v97 = &v84[24 * v96];
                *(_DWORD *)double v97 = v251[0];
                *((void *)v97 + 1) = *((void *)v82 + 482);
                *((void *)v97 + 2) = v87;
                if (v87) {
                  goto LABEL_102;
                }
              }
            }
            break;
          }
          sub_296654((int **)&v224);
          double v88 = 0;
          double v89 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
            goto LABEL_119;
          }
          goto LABEL_117;
        }
        unsigned int v17 = ++v233;
        uint64_t v27 = (unsigned __int16 *)v228;
        if ((v67 + 1) >= *(_DWORD *)v228)
        {
          uint64_t v76 = *(void *)v226[1];
          uint64_t v127 = *((void *)v226[1] + 1) - *(void *)v226[1];
          unsigned int v79 = ++v232;
          if (v232 < (unint64_t)(v127 >> 3)) {
            goto LABEL_161;
          }
LABEL_30:
          if (v232 != v16) {
            continue;
          }
          goto LABEL_31;
        }
        unint64_t v74 = (unsigned __int16 *)((char *)v228 + 4 * v67 + 4);
        double v75 = (unsigned __int16 *)((char *)v228 + 4 * v17 + 4);
        if (*v74 != *v75 || v74[1] != v75[1]) {
          goto LABEL_30;
        }
        uint64_t v76 = *(void *)v226[1];
        uint64_t v77 = *((void *)v226[1] + 1) - *(void *)v226[1];
        if (*(_DWORD *)v228 == 2 && v77 == 8) {
          goto LABEL_30;
        }
        unsigned int v17 = v67 + 2;
        unsigned int v79 = ++v232;
        unsigned int v233 = v17;
        if (v232 >= (unint64_t)(v77 >> 3)) {
          goto LABEL_30;
        }
        while (1)
        {
LABEL_161:
          unint64_t v128 = *(void *)(v76 + 8 * v79);
          unsigned int v230 = v128;
          uint64_t v129 = v226[0];
          int v250 = 1;
          v251[0] = v128;
          uint64_t v224 = &v250;
          uint64_t v225 = v251;
          unint64_t v130 = *((void *)v226[0] + 482) + 1;
          *((void *)v226[0] + 482) = v130;
          if (!*(void *)v129)
          {
LABEL_185:
            sub_296654((int **)&v224);
            uint64_t v135 = 0;
            uint64_t v136 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
              goto LABEL_188;
            }
            goto LABEL_186;
          }
          unint64_t v131 = (char *)(v129 + 4);
          if (v129[28] == v128)
          {
            unsigned int v132 = 4;
            goto LABEL_170;
          }
          if (v129[34] == v128)
          {
            unsigned int v132 = 5;
            goto LABEL_170;
          }
          if (v129[40] == v128)
          {
            unsigned int v132 = 6;
            goto LABEL_170;
          }
          if (v129[46] == v128)
          {
            unsigned int v132 = 7;
LABEL_170:
            ++*((void *)v129 + 483);
            unint64_t v133 = &v131[24 * v132];
            *((void *)v133 + 1) = v130;
            unsigned int v134 = (unsigned int *)*((void *)v133 + 2);
            if (!v134) {
              goto LABEL_185;
            }
            goto LABEL_171;
          }
          unint64_t v137 = *((void *)v129 + 21);
          unint64_t v138 = *((void *)v129 + 18);
          unint64_t v139 = *((void *)v129 + 15);
          unint64_t v140 = *((void *)v129 + 24);
          unsigned int v134 = (unsigned int *)sub_2AB884(*(void *)v129, 1, v128, 1);
          if (v139 >= v130) {
            unint64_t v141 = v130;
          }
          else {
            unint64_t v141 = v139;
          }
          BOOL v142 = v138 >= v141;
          if (v138 < v141) {
            unint64_t v141 = v138;
          }
          unsigned int v143 = 4 * (v139 < v130);
          if (!v142) {
            unsigned int v143 = 5;
          }
          if (v137 < v141)
          {
            unsigned int v143 = 6;
            unint64_t v141 = v137;
          }
          if (v140 < v141) {
            unsigned int v143 = 7;
          }
          uint64_t v144 = &v131[24 * v143];
          *(_DWORD *)uint64_t v144 = v251[0];
          *((void *)v144 + 1) = *((void *)v129 + 482);
          *((void *)v144 + 2) = v134;
          if (!v134) {
            goto LABEL_185;
          }
LABEL_171:
          uint64_t v135 = (int *)((char *)v134 + *v134);
          uint64_t v136 = (unsigned __int16 *)((char *)v135 - *v135);
          if (*v136 < 7u) {
            goto LABEL_188;
          }
LABEL_186:
          uint64_t v145 = v136[3];
          if (v145)
          {
            int v146 = *(int *)((char *)v135 + v145);
            goto LABEL_189;
          }
LABEL_188:
          int v146 = 0;
LABEL_189:
          int v231 = v146;
          unsigned int v147 = v226[0];
          unsigned int v148 = v230;
          int v250 = 1;
          v251[0] = v230;
          uint64_t v224 = &v250;
          uint64_t v225 = v251;
          unint64_t v149 = *((void *)v226[0] + 482) + 1;
          *((void *)v226[0] + 482) = v149;
          if (!*(void *)v147) {
            goto LABEL_213;
          }
          uint64_t v150 = (char *)(v147 + 4);
          if (v147[28] == v148)
          {
            unsigned int v151 = 4;
            goto LABEL_198;
          }
          if (v147[34] == v148)
          {
            unsigned int v151 = 5;
            goto LABEL_198;
          }
          if (v147[40] == v148)
          {
            unsigned int v151 = 6;
            goto LABEL_198;
          }
          if (v147[46] == v148)
          {
            unsigned int v151 = 7;
LABEL_198:
            ++*((void *)v147 + 483);
            uint64_t v152 = &v150[24 * v151];
            *((void *)v152 + 1) = v149;
            int v153 = (unsigned int *)*((void *)v152 + 2);
            if (!v153) {
              goto LABEL_213;
            }
            goto LABEL_199;
          }
          unint64_t v156 = *((void *)v147 + 21);
          unint64_t v157 = *((void *)v147 + 18);
          unint64_t v158 = *((void *)v147 + 15);
          unint64_t v159 = *((void *)v147 + 24);
          int v153 = (unsigned int *)sub_2AB884(*(void *)v147, 1, v148, 1);
          if (v158 >= v149) {
            unint64_t v160 = v149;
          }
          else {
            unint64_t v160 = v158;
          }
          BOOL v161 = v157 >= v160;
          if (v157 < v160) {
            unint64_t v160 = v157;
          }
          unsigned int v162 = 4 * (v158 < v149);
          if (!v161) {
            unsigned int v162 = 5;
          }
          if (v156 < v160)
          {
            unsigned int v162 = 6;
            unint64_t v160 = v156;
          }
          if (v159 < v160) {
            unsigned int v162 = 7;
          }
          unsigned int v163 = &v150[24 * v162];
          *(_DWORD *)unsigned int v163 = v251[0];
          *((void *)v163 + 1) = *((void *)v147 + 482);
          *((void *)v163 + 2) = v153;
          if (!v153)
          {
LABEL_213:
            sub_296654((int **)&v224);
            unint64_t v154 = 0;
            unint64_t v155 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
              goto LABEL_216;
            }
            goto LABEL_214;
          }
LABEL_199:
          unint64_t v154 = (int *)((char *)v153 + *v153);
          unint64_t v155 = (unsigned __int16 *)((char *)v154 - *v154);
          if (*v155 < 5u) {
            goto LABEL_216;
          }
LABEL_214:
          uint64_t v164 = v155[2];
          if (v164)
          {
            uint64_t v165 = (char *)v154 + v164 + *(unsigned int *)((char *)v154 + v164);
            goto LABEL_217;
          }
LABEL_216:
          uint64_t v165 = 0;
LABEL_217:
          unsigned int v166 = &v165[4 * HIDWORD(v128) + 4 + *(unsigned int *)&v165[4 * HIDWORD(v128) + 4]];
          uint64_t v227 = v166;
          BOOL v167 = &v166[-*(int *)v166];
          unsigned int v168 = *(unsigned __int16 *)v167;
          if (v168 <= 6)
          {
            uint64_t v27 = 0;
            uint64x2_t v170 = 0;
            uint64_t v228 = 0;
          }
          else
          {
            uint64_t v27 = (unsigned __int16 *)*((unsigned __int16 *)v167 + 3);
            if (*((_WORD *)v167 + 3)) {
              uint64_t v27 = (unsigned __int16 *)((char *)v27 + (void)v166 + *(unsigned int *)((char *)v27 + (void)v166));
            }
            uint64_t v228 = v27;
            if (v168 >= 0xB && (uint64_t v169 = *((unsigned __int16 *)v167 + 5)) != 0) {
              uint64x2_t v170 = &v166[v169 + *(unsigned int *)&v166[v169]];
            }
            else {
              uint64x2_t v170 = 0;
            }
          }
          int v229 = v170;
          unsigned int v17 = 1;
          unsigned int v233 = 1;
          if (v27[2] != v27[4]) {
            goto LABEL_30;
          }
          if (v27[3] != v27[5]) {
            break;
          }
          unsigned int v17 = 2;
          unsigned int v79 = ++v232;
          unsigned int v233 = 2;
          uint64_t v76 = *(void *)v226[1];
          if (v232 >= (unint64_t)((uint64_t)(*((void *)v226[1] + 1) - *(void *)v226[1]) >> 3)) {
            goto LABEL_30;
          }
        }
        unsigned int v17 = 1;
        if (v232 != v16) {
          continue;
        }
LABEL_31:
        if (v17 == v222) {
          goto LABEL_233;
        }
      }
    }
    unint64_t v19 = *((void *)v239 - 1);
    uint64_t v20 = sub_2964C4(v237, v19, 1);
    double v21 = &v20[*(unsigned __int16 *)&v20[-*(int *)v20 + 4]];
    uint64_t v22 = (uint64_t)&v21[4 * HIDWORD(v19) + *(unsigned int *)v21];
    uint64_t v23 = (int *)(v22 + 4 + *(unsigned int *)(v22 + 4));
    unint64_t v16 = (unint64_t)(v239 - v238) >> 3;
    long long v24 = (unsigned int *)((char *)v23 + *(unsigned __int16 *)((char *)v23 - *v23 + 6));
    unsigned int v17 = v233;
    int v222 = *(unsigned int *)((char *)v24 + *v24);
    if (v232 != v16 || v233 != *(unsigned int *)((char *)v24 + *v24)) {
      goto LABEL_29;
    }
LABEL_233:
    uint64_t v171 = sub_E9DA58(v221, v223);
    uint64_t v172 = nullsub_1(v171);
    long double v173 = *(void **)v172;
    int64x2_t v174 = *(void **)(v172 + 8);
    if (*(void **)v172 != v174)
    {
      unint64_t v175 = v242;
      do
      {
        v176.i64[0] = *v173;
        v176.i64[1] = HIDWORD(*v173);
        *(float64x2_t *)uint64_t v226 = vcvtq_f64_u64(v176);
        unint64_t v175 = sub_478E8(&v241, v175, v226) + 16;
        long double v173 = (void *)((char *)v173 + 12);
      }
      while (v173 != v174);
    }
    unint64_t v177 = (void *)sub_E9DA58(v221, v223);
    sub_E9C270(v177);
    if (v238)
    {
      unint64_t v239 = v238;
      operator delete(v238);
    }
    uint64_t v12 = v223 + 1;
    a1 = v218;
  }
  while (v223 + 1 != v220);
  unint64_t v178 = (double *)v242;
  unint64_t v5 = v217;
  if (v241 != v242)
  {
    long double v179 = (double *)(v241 - 16);
    while (v179 + 4 != (double *)v242)
    {
      double v180 = v179[2];
      v179 += 2;
      if (v180 == v179[2] && v179[1] == v179[3])
      {
        for (uint64_t i = v179 + 4; i != v178; i += 2)
        {
          if (*v179 != *i || v179[1] != i[1])
          {
            *((_OWORD *)v179 + 1) = *(_OWORD *)i;
            v179 += 2;
          }
        }
        if (v179 + 2 != v178) {
          unint64_t v242 = (char *)(v179 + 2);
        }
        break;
      }
    }
  }
LABEL_256:
  sub_3BF0C((uint64_t)v226, &v247, &v241, 0);
  sub_3C270((uint64_t *)v226);
  long double v185 = (char *)v234;
  uint64_t v184 = v235;
  if (v234 != v235)
  {
    unint64_t v186 = *v244;
    do
    {
      if (v185[16])
      {
        unint64_t v187 = *(void *)sub_6546E8(&v244, *(void *)v185 - 1);
        if (v187 != v186)
        {
          double v188 = sub_3C1B8(v226, (uint64_t)v185);
          LODWORD(v190) = v189;
          if (v189 >= 0xFFFFFFFE) {
            uint64_t v190 = 4294967294;
          }
          else {
            uint64_t v190 = v190;
          }
          unint64_t v237 = v188 | (unint64_t)(v190 << 32);
          LODWORD(v238) = 0x7FFFFFFF;
          unint64_t v191 = (char *)sub_E9DA58(v221, v186);
          sub_E9BE78(v191, (unsigned int *)&v237, 0);
          unint64_t v192 = (char *)sub_E9DA58(v221, v187);
          sub_E9BE78(v192, (unsigned int *)&v237, 0);
          goto LABEL_259;
        }
      }
      else
      {
        uint64_t v193 = (char *)sub_E9DA58(v221, v186);
        double v194 = sub_3C1B8(v226, (uint64_t)v185);
        LODWORD(v196) = v195;
        if (v195 >= 0xFFFFFFFE) {
          uint64_t v196 = 4294967294;
        }
        else {
          uint64_t v196 = v196;
        }
        unint64_t v237 = v194 | (unint64_t)(v196 << 32);
        LODWORD(v238) = 0x7FFFFFFF;
        sub_E9BE78(v193, (unsigned int *)&v237, 0);
      }
      unint64_t v187 = v186;
LABEL_259:
      v185 += 24;
      unint64_t v186 = v187;
    }
    while (v185 != v184);
  }
  int v197 = v219;
  if (v5 < a4)
  {
    do
    {
      uint64_t v198 = *v218;
      uint64_t v199 = sub_46C8EC(v197, v5);
      sub_2954EC(v198, *(void *)(v199 + 32), (uint64_t)&v237);
      uint64_t v200 = sub_E9DA58(v221, v5);
      uint64_t v201 = nullsub_1(v200);
      int v202 = (unsigned int **)v201;
      float64x2_t v204 = *(char **)v201;
      float64x2_t v203 = *(char **)(v201 + 8);
      if (*(char **)v201 == v203)
      {
        float64x2_t v203 = *(char **)v201;
      }
      else
      {
        uint64_t v205 = *(char **)v201;
        do
        {
          int v206 = v205 + 12;
          if (v205 + 12 == v203) {
            goto LABEL_307;
          }
          int v207 = *(_DWORD *)v205;
          int v208 = *((_DWORD *)v205 + 1);
          int v210 = *((_DWORD *)v205 + 3);
          int v209 = *((_DWORD *)v205 + 4);
          BOOL v211 = v207 == v210 && v208 == v209;
          uint64_t v205 = v206;
        }
        while (!v211);
        long double v212 = v206 + 12;
        long double v213 = v206 - 12;
        if (v212 == v203)
        {
          int64_t v214 = v213 + 12;
          if (v213 + 12 == v203) {
            goto LABEL_307;
          }
LABEL_306:
          float64x2_t v203 = v214;
          *(void *)(v201 + 8) = v214;
          int v197 = v219;
          goto LABEL_307;
        }
        do
        {
          if (*(_DWORD *)v213 != *(_DWORD *)v212 || *((_DWORD *)v213 + 1) != *((_DWORD *)v212 + 1))
          {
            int v216 = *((_DWORD *)v212 + 2);
            *(void *)(v213 + 12) = *(void *)v212;
            v213 += 12;
            *((_DWORD *)v213 + 2) = v216;
          }
          v212 += 12;
        }
        while (v212 != v203);
        float64x2_t v204 = *(char **)v201;
        float64x2_t v203 = *(char **)(v201 + 8);
        int64_t v214 = v213 + 12;
        if (v213 + 12 != v203) {
          goto LABEL_306;
        }
      }
LABEL_307:
      if (v203 - v204 == 12) {
        sub_30C0C((char **)v201, (uint64_t *)(v203 - 12));
      }
      sub_2E4B5C((uint64_t)&v237, &v224);
      sub_EA0754((uint64_t)v218, &v224, v202);
      if (v224)
      {
        uint64_t v225 = v224;
        operator delete(v224);
      }
      if (v238)
      {
        unint64_t v239 = v238;
        operator delete(v238);
      }
      ++v5;
    }
    while (v5 != v220);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v234)
  {
    long double v235 = (char *)v234;
    operator delete(v234);
  }
  if (v228)
  {
    int v229 = v228;
    operator delete(v228);
  }
  if (v226[0])
  {
    v226[1] = v226[0];
    operator delete(v226[0]);
  }
  if (v241)
  {
    unint64_t v242 = v241;
    operator delete(v241);
  }
  if (v244)
  {
    long long v245 = v244;
    operator delete(v244);
  }
  if (v247)
  {
    unint64_t v248 = (double *)v247;
    operator delete(v247);
  }
}

void sub_EA2050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  sub_3BF98((uint64_t)&a21);
  uint64_t v23 = *(void **)(v21 - 168);
  if (v23)
  {
    *(void *)(v21 - 160) = v23;
    operator delete(v23);
    long long v24 = *(void **)(v21 - 144);
    if (!v24)
    {
LABEL_3:
      unint64_t v25 = *(void **)(v21 - 120);
      if (!v25) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    long long v24 = *(void **)(v21 - 144);
    if (!v24) {
      goto LABEL_3;
    }
  }
  *(void *)(v21 - 136) = v24;
  operator delete(v24);
  unint64_t v25 = *(void **)(v21 - 120);
  if (!v25) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  *(void *)(v21 - 112) = v25;
  operator delete(v25);
  _Unwind_Resume(a1);
}

void *sub_EA2160(void *result, uint64_t *a2)
{
  uint64_t v2 = (unsigned int *)result[1];
  uint64_t v3 = (unsigned int *)(*result + 12);
  if ((unsigned int *)*result != v2 && v3 != v2)
  {
    do
    {
      uint64_t v9 = *(v3 - 3);
      uint64_t v10 = *(v3 - 2);
      uint64_t v11 = *v3;
      uint64_t v12 = v3[1];
      if (v9 == v11 && v10 == v12)
      {
        int v14 = *(v3 - 1);
        int v15 = v3[2];
        if (v14 == v15) {
          goto LABEL_9;
        }
        uint64_t v12 = *(v3 - 2);
        if (v14 != 0x7FFFFFFF)
        {
LABEL_18:
          if (v15 == 0x7FFFFFFF)
          {
            int v6 = 0;
            int v15 = 0x7FFFFFFF;
          }
          else
          {
            int v6 = (int)fabs((double)(v14 - v15));
          }
          goto LABEL_8;
        }
      }
      else
      {
        int v14 = *(v3 - 1);
        int v15 = v3[2];
        if (v14 != 0x7FFFFFFF) {
          goto LABEL_18;
        }
      }
      int v6 = 0;
LABEL_8:
      uint64_t v7 = *a2;
      double v8 = *(double *)(*(void *)(*a2 + 8) - 16)
         + sqrt((double)(unint64_t)((v9 - v11) * (v9 - v11) + (v10 - v12) * (v10 - v12) + v6 * (uint64_t)v6))
         / 100.0;
      double v16 = (double)v15 / 100.0;
      double v17 = v8;
      unint64_t result = sub_D4EC6C(v7, &v17, &v16);
LABEL_9:
      v3 += 3;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t sub_EA2288@<X0>(int a1@<W1>, unsigned char *a2@<X8>)
{
  if (a1)
  {
    char v2 = a1;
    sub_6BAC((uint64_t)v4);
    char v6 = 40;
    sub_188FC78(v4, (uint64_t)&v6, 1);
    if (v2) {
      sub_188FC78(v4, (uint64_t)" Shifted", 8);
    }
    if ((v2 & 2) != 0) {
      sub_188FC78(v4, (uint64_t)" Bezier Curve", 13);
    }
    char v6 = 41;
    sub_188FC78(v4, (uint64_t)&v6, 1);
    std::stringbuf::str();
    if (v5 < 0) {
      operator delete((void *)v4[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  else
  {
    a2[23] = 0;
    *a2 = 0;
  }
  return result;
}

void sub_EA2430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_EA2444(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "print_geo_json_segment_geometries");
  unint64_t v4 = sub_58070(a2, (uint64_t)__p);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 32) = v5 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_6;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a1 + 32) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_6:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20E1380;
  strcpy((char *)__p[0], "max_route_line_to_center_line_distance_ratio");
  char v6 = sub_58070(a2, (uint64_t)__p);
  uint64_t v7 = (void *)a1;
  if (v6)
  {
    uint64_t v7 = v6 + 5;
    if (*((_DWORD *)v6 + 12) != 1) {
      uint64_t v7 = (void *)a1;
    }
  }
  *(void *)a1 = *v7;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "max_route_line_search_distance_beyond_segment");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 8));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "max_adjacent_geometry_points_gap");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 16));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "min_adjacent_geometry_points_gap");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 24));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  strcpy((char *)__p, "enable_post_processing");
  HIBYTE(__p[2]) = 22;
  double v8 = sub_58070(a2, (uint64_t)__p);
  if (v8 && (int v9 = *((_DWORD *)v8 + 12), (v9 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 33) = v9 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_24;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 33) = *(unsigned char *)(a1 + 33) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_24:
    }
      operator delete(__p[0]);
  }
}

void sub_EA26DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t *sub_EA270C(int64x2_t *a1, void *a2)
{
  a1->i64[0] = sub_3750CC(a2);
  uint64_t v11 = 0;
  uint64_t v12 = operator new(0x28uLL);
  long long v13 = xmmword_20B93A0;
  strcpy((char *)v12, "RouteLineSegmentGeometryDistributor");
  std::string __p = 0;
  uint64_t v10 = 0;
  unint64_t v4 = sub_374CDC((uint64_t)a2, (uint64_t)&v12, (uint64_t *)&__p);
  a1[1] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  a1[2].i64[0] = 0x7FFFFFFFFFFFFFFFLL;
  sub_EA6D24((uint64_t)&a1->i64[1], v4);
  int v5 = (void **)__p;
  if (__p)
  {
    char v6 = v10;
    uint64_t v7 = __p;
    if (v10 != __p)
    {
      do
      {
        if (*((char *)v6 - 1) < 0) {
          operator delete(*(v6 - 3));
        }
        v6 -= 3;
      }
      while (v6 != v5);
      uint64_t v7 = __p;
    }
    uint64_t v10 = v5;
    operator delete(v7);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12);
  }
  return a1;
}

void sub_EA2828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_EA2850(uint64_t a1, char **a2, void *a3)
{
  sub_EA28DC(a1, a3);
  sub_EA29D0(a1, a2, a3);
  if (*(unsigned char *)(a1 + 41)) {
    sub_EA41A4((uint64_t *)a1, a3);
  }
  if (*(unsigned char *)(a1 + 40))
  {
    sub_EA42E8();
  }
}

void sub_EA28DC(uint64_t a1, void *a2)
{
  uint64_t v3 = a2 + 1248;
  unint64_t v4 = sub_470ADC(a2);
  sub_E9D8DC((uint64_t)v3, v4);
  *(_OWORD *)std::string __p = 0u;
  long long v8 = 0u;
  uint64_t v9 = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v5 = sub_470ADC(a2);
  if (v5)
  {
    unint64_t v6 = a2[1249];
    do
    {
      if (v6 >= a2[1250])
      {
        unint64_t v6 = sub_EA6FEC(v3, (uint64_t)__p);
      }
      else
      {
        sub_E9BD88(v6, (uint64_t)__p);
        v6 += 40;
        a2[1249] = v6;
      }
      a2[1249] = v6;
      --v5;
    }
    while (v5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_EA29A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_EA29D0(uint64_t a1, char **a2, void *a3)
{
  unint64_t v4 = a2;
  unint64_t v5 = *a2;
  unint64_t v6 = v4[1];
  if (v5 == v6)
  {
    unint64_t v6 = v5;
  }
  else
  {
    uint64_t v7 = v5 - 12;
    do
    {
      if (v7 + 24 == v6) {
        goto LABEL_21;
      }
      int v8 = *((_DWORD *)v7 + 3);
      int v9 = *((_DWORD *)v7 + 4);
      v7 += 12;
      BOOL v10 = v8 == *((_DWORD *)v7 + 3) && v9 == *((_DWORD *)v7 + 4);
    }
    while (!v10);
    uint64_t v11 = v7 + 24;
    if (v7 + 24 == v6)
    {
      uint64_t v12 = v7 + 12;
      if (v7 + 12 == v6) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    do
    {
      if (*(_DWORD *)v7 != *(_DWORD *)v11 || *((_DWORD *)v7 + 1) != *((_DWORD *)v11 + 1))
      {
        int v14 = *((_DWORD *)v11 + 2);
        *(void *)(v7 + 12) = *(void *)v11;
        v7 += 12;
        *((_DWORD *)v7 + 2) = v14;
      }
      v11 += 12;
    }
    while (v11 != v6);
    unint64_t v5 = *v4;
    unint64_t v6 = v4[1];
    uint64_t v12 = v7 + 12;
    if (v7 + 12 != v6)
    {
LABEL_20:
      unint64_t v6 = v12;
      v4[1] = v12;
    }
  }
LABEL_21:
  if (v6 - v5 == 12) {
    sub_30C0C(v4, (uint64_t *)v5);
  }
  unint64_t result = sub_470ADC(a3);
  if (result)
  {
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    long long v294 = v4;
    long long v287 = a3;
    while (1)
    {
      uint64_t v18 = a3[1248];
      uint64_t v19 = *(void *)a1;
      uint64_t v20 = (unsigned int *)sub_470B40(a3, v17);
      sub_2954EC(v19, (((unint64_t)(v20[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v20[1] << 32) | *v20) ^ 0x1000000000000, (uint64_t)&v300);
      sub_2E4B5C((uint64_t)&v300, &v303);
      if (__p)
      {
        long long v302 = (char *)__p;
        operator delete(__p);
      }
      uint64_t v21 = *(int **)(sub_470B40(a3, v17) + 8);
      uint64_t v22 = (unsigned __int16 *)((char *)v21 - *v21);
      if (*v22 >= 9u && (uint64_t v23 = v22[4]) != 0) {
        uint64_t v285 = *(unsigned int *)((char *)v21 + v23);
      }
      else {
        uint64_t v285 = 0;
      }
      uint64_t v290 = v18 + 40 * v17;
      long long v24 = v303;
      uint64_t v286 = v17;
      if (0xAAAAAAAAAAAAAAABLL * ((v304 - v303) >> 2) >= 2) {
        break;
      }
LABEL_350:
      a3 = v287;
      uint64_t v262 = *(void *)(nullsub_1(v290) + 8);
      int v263 = *(_DWORD *)(v262 - 4);
      int v300 = *(void **)(v262 - 12);
      LODWORD(__p) = v263;
      float64x2_t v264 = (int **)nullsub_1(v290);
      double v266 = *v264;
      float64x2_t v265 = v264[1];
      if (*v264 != v265)
      {
        do
        {
          double v267 = v266 + 3;
          if (v266 + 3 == v265) {
            goto LABEL_368;
          }
          int v268 = *v266;
          int v269 = v266[1];
          int v271 = v266[3];
          int v270 = v266[4];
          BOOL v272 = v268 == v271 && v269 == v270;
          double v266 = v267;
        }
        while (!v272);
        uint64_t v273 = v267 + 3;
        long double v274 = v267 - 3;
        if (v267 + 3 == v265)
        {
          uint64_t v275 = v267;
          if (v267 == v265) {
            goto LABEL_368;
          }
LABEL_367:
          v264[1] = v275;
          goto LABEL_368;
        }
        do
        {
          if (*v274 != *v273 || v274[1] != v273[1])
          {
            int v277 = v273[2];
            *(void *)(v274 + 3) = *(void *)v273;
            v274 += 3;
            v274[2] = v277;
          }
          v273 += 3;
        }
        while (v273 != v265);
        uint64_t v275 = v274 + 3;
        if (v274 + 3 != v264[1]) {
          goto LABEL_367;
        }
      }
LABEL_368:
      uint64_t v278 = (void *)nullsub_1(v290);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v278[1] - *v278) >> 2) < 2)
      {
        int v281 = (char **)nullsub_1(v290);
        sub_30C0C(v281, (uint64_t *)&v300);
      }
      else
      {
        uint64_t v279 = *(void *)(nullsub_1(v290) + 8);
        long long v280 = v300;
        *(_DWORD *)(v279 - 4) = __p;
        *(void *)(v279 - 12) = v280;
      }
      if (v303)
      {
        long long v304 = v303;
        operator delete(v303);
      }
      uint64_t v17 = v286 + 1;
      unint64_t result = sub_470ADC(v287);
      if (v286 + 1 >= result) {
        return result;
      }
    }
    double v25 = (double)v285;
    uint64_t v282 = v17 - 1;
    unint64_t v26 = v16;
    uint64_t v27 = 1;
    while (1)
    {
      unint64_t v28 = &v24[12 * v27];
      uint64_t v298 = *(void *)(v28 - 12);
      uint64_t v29 = *(unsigned int *)v28;
      int v299 = *((_DWORD *)v28 - 1);
      double v30 = *(double *)(a1 + 8) * v25;
      uint64_t v31 = (uint64_t)(v30 + v30);
      uint64_t v32 = v31 - 1;
      if (v31 < 1) {
        uint64_t v32 = (uint64_t)(v30 + v30);
      }
      uint64_t v33 = v32 >> 1;
      double v34 = v30 > -4.50359963e15 ? (double)v33 : *(double *)(a1 + 8) * v25;
      uint64_t v35 = (v31 + 1) >> 1;
      double v36 = (double)v35;
      double v37 = v30 < 4.50359963e15 ? (double)v35 : *(double *)(a1 + 8) * v25;
      double v38 = v30 >= 0.0 ? v37 : v34;
      uint64_t v39 = *(void *)(v28 + 4);
      uint64_t v40 = *(void *)(a1 + 16) + v285 >= (uint64_t)v38 ? (uint64_t)v38 : *(void *)(a1 + 16) + v285;
      uint64_t v41 = *v4;
      unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((v4[1] - *v4) >> 2);
      unint64_t v43 = v42 - 1;
      unint64_t v292 = v26;
      uint64_t v293 = v39;
      if (v40 != 0x7FFFFFFFFFFFFFFFLL) {
        break;
      }
      unint64_t v16 = v26;
      if (v26 < v43)
      {
        double v38 = (double)v29;
        double v44 = (double)v39;
        double v45 = &v41[12 * v26];
        LODWORD(v46) = *(_DWORD *)v45;
        LODWORD(v48) = *((_DWORD *)v45 + 1);
        double v47 = v45 + 12;
        double v37 = 1.79769313e308;
        unint64_t v16 = v26;
        unint64_t v49 = v26;
        do
        {
          double v53 = (double)v46;
          double v54 = (double)v48;
          LODWORD(v46) = *v47;
          LODWORD(v48) = v47[1];
          double v55 = (double)*v47 - v53;
          double v56 = (double)v48 - v54;
          double v57 = v55 * v55 + v56 * v56;
          double v58 = fabs(v57);
          if (v57 != 0.0 && v58 >= 2.22044605e-16)
          {
            double v60 = ((v38 - v53) * v55 + (v44 - v54) * v56) / v57;
            if (v60 <= 0.0)
            {
              unint64_t v50 = *(void *)(v47 - 3);
              unint64_t v51 = HIDWORD(v50);
              goto LABEL_53;
            }
            if (v60 < 1.0)
            {
              double v61 = v56 * v60 + v54;
              double v62 = v55 * v60 + v53;
              if (v62 < 0.0) {
                double v63 = -0.5;
              }
              else {
                double v63 = 0.5;
              }
              LODWORD(v50) = (v62 + v63);
              if (v61 < 0.0) {
                double v64 = -0.5;
              }
              else {
                double v64 = 0.5;
              }
              LODWORD(v51) = (v61 + v64);
              if (v51 >= 0xFFFFFFFE) {
                LODWORD(v51) = -2;
              }
              goto LABEL_53;
            }
          }
          uint64_t v46 = *(void *)v47;
          uint64_t v48 = HIDWORD(*(void *)v47);
          unint64_t v50 = *(void *)v47;
          LODWORD(v51) = v48;
LABEL_53:
          double v36 = sqrt((double)((v29 - v50) * (v29 - v50)
                            + (v293 - (unint64_t)v51)
                            * (v293 - (unint64_t)v51)))
              / 100.0;
          if (v36 < v37) {
            unint64_t v16 = v49;
          }
          unint64_t v52 = v49 + 1;
          v47 += 3;
          if (v36 < v37) {
            double v37 = v36;
          }
          ++v49;
        }
        while (v43 != v52);
      }
LABEL_115:
      int v300 = 0;
      std::string __p = 0;
      long long v302 = 0;
      unint64_t v92 = v16 + 1;
      uint64_t v291 = v27;
      if (v16 + 1 >= v42)
      {
        uint64_t v106 = (uint64_t *)nullsub_1(v290);
        uint64_t v107 = *v106;
        uint64_t v108 = v106[1];
        uint64_t v109 = v290;
        if (v107 == v108) {
          uint64_t v109 = v287[1248] + 40 * v282;
        }
        uint64_t v110 = nullsub_1(v109);
        uint64_t v111 = *(void *)(v110 + 8) - 12;
        unint64_t v112 = (char *)__p;
        if (__p >= v302)
        {
          uint64_t v117 = (char *)v300;
          unint64_t v118 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__p - (unsigned char *)v300) >> 2);
          unint64_t v119 = v118 + 1;
          if (v118 + 1 > 0x1555555555555555) {
            goto LABEL_376;
          }
          if (0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2) > v119) {
            unint64_t v119 = 0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v302 - (unsigned char *)v300) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v120 = 0x1555555555555555;
          }
          else {
            unint64_t v120 = v119;
          }
          if (v120)
          {
            if (v120 > 0x1555555555555555) {
              goto LABEL_377;
            }
            unsigned int v121 = (char *)operator new(12 * v120);
          }
          else
          {
            unsigned int v121 = 0;
          }
          uint64_t v122 = *(void *)v111;
          unint64_t v123 = &v121[12 * v118];
          *((_DWORD *)v123 + 2) = *(_DWORD *)(v111 + 8);
          *(void *)unint64_t v123 = v122;
          int v124 = v123;
          if (v112 != v117)
          {
            do
            {
              uint64_t v125 = *(void *)(v112 - 12);
              v112 -= 12;
              int v126 = *((_DWORD *)v112 + 2);
              *(void *)(v124 - 12) = v125;
              v124 -= 12;
              *((_DWORD *)v124 + 2) = v126;
            }
            while (v112 != v117);
            unint64_t v112 = (char *)v300;
          }
          BOOL v114 = v123 + 12;
          int v300 = v124;
          std::string __p = v123 + 12;
          long long v302 = &v121[12 * v120];
          if (v112) {
            operator delete(v112);
          }
        }
        else
        {
          uint64_t v113 = *(void *)v111;
          *((_DWORD *)__p + 2) = *(_DWORD *)(*(void *)(v110 + 8) - 4);
          *(void *)unint64_t v112 = v113;
          BOOL v114 = v112 + 12;
        }
        std::string __p = v114;
        uint64_t v127 = (uint64_t)(v4[1] - 12);
        if (v114 >= v302)
        {
          unint64_t v130 = (char *)v300;
          unint64_t v131 = 0xAAAAAAAAAAAAAAABLL * ((v114 - (unsigned char *)v300) >> 2);
          unint64_t v132 = v131 + 1;
          if (v131 + 1 > 0x1555555555555555) {
LABEL_376:
          }
            sub_2E00();
          if (0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2) > v132) {
            unint64_t v132 = 0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v302 - (unsigned char *)v300) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v133 = 0x1555555555555555;
          }
          else {
            unint64_t v133 = v132;
          }
          if (v133)
          {
            if (v133 > 0x1555555555555555) {
LABEL_377:
            }
              sub_188D718();
            unsigned int v134 = (char *)operator new(12 * v133);
          }
          else
          {
            unsigned int v134 = 0;
          }
          uint64_t v135 = &v134[12 * v131];
          uint64_t v136 = *(void *)v127;
          *((_DWORD *)v135 + 2) = *(_DWORD *)(v127 + 8);
          *(void *)uint64_t v135 = v136;
          uint64_t v129 = v135 + 12;
          if (v114 == v130)
          {
            int v300 = &v134[12 * v131];
            std::string __p = v135 + 12;
            long long v302 = &v134[12 * v133];
          }
          else
          {
            do
            {
              uint64_t v137 = *(void *)(v114 - 12);
              v114 -= 12;
              int v138 = *((_DWORD *)v114 + 2);
              *(void *)(v135 - 12) = v137;
              v135 -= 12;
              *((_DWORD *)v135 + 2) = v138;
            }
            while (v114 != v130);
            BOOL v114 = (char *)v300;
            int v300 = v135;
            std::string __p = v129;
            long long v302 = &v134[12 * v133];
            if (!v114) {
              goto LABEL_172;
            }
          }
          operator delete(v114);
        }
        else
        {
          uint64_t v128 = *(void *)v127;
          *((_DWORD *)v114 + 2) = *((_DWORD *)v4[1] - 1);
          *(void *)BOOL v114 = v128;
          uint64_t v129 = v114 + 12;
        }
LABEL_172:
        unint64_t v16 = v292;
        std::string __p = v129;
        goto LABEL_276;
      }
      unint64_t v93 = &v41[12 * v16];
      unint64_t v94 = &v41[12 * v92];
      LODWORD(v38) = *(_DWORD *)v93;
      LODWORD(v37) = *((_DWORD *)v93 + 1);
      double v95 = (double)*(unint64_t *)&v38;
      double v96 = (double)*(unint64_t *)&v37;
      LODWORD(v37) = *(_DWORD *)v94;
      LODWORD(v36) = *((_DWORD *)v94 + 1);
      double v97 = (double)*(unint64_t *)&v37 - v95;
      double v98 = (double)*(unint64_t *)&v36 - v96;
      double v99 = v97 * v97 + v98 * v98;
      BOOL v100 = fabs(v99) < 2.22044605e-16 || v99 == 0.0;
      double v101 = (((double)v29 - v95) * v97 + ((double)v293 - v96) * v98) / v99;
      if (v100) {
        double v101 = 1.79769313e308;
      }
      unint64_t v102 = v292;
      if (v101 <= 0.0)
      {
        uint64_t v288 = *(void *)v93;
        unsigned int v284 = *((_DWORD *)v93 + 2);
        unint64_t v283 = v16 + 1;
        if (v292 <= v92) {
          unint64_t v115 = v16 + 1;
        }
        else {
          unint64_t v115 = v292;
        }
        uint64_t v116 = 0;
        if (v292 < v92) {
          goto LABEL_197;
        }
      }
      else
      {
        if (v101 < 1.0)
        {
          int v103 = *(_DWORD *)&v41[12 * v16 + 8];
          if (v103 == 0x7FFFFFFF)
          {
            BOOL v104 = 0;
            double v105 = 0.0;
          }
          else
          {
            double v139 = (double)v103;
            int v140 = *(_DWORD *)&v41[12 * v92 + 8];
            BOOL v10 = v140 == 0x7FFFFFFF;
            double v105 = v101 * ((double)v140 - v139) + v139;
            BOOL v104 = v140 != 0x7FFFFFFF;
            if (v10) {
              double v105 = 0.0;
            }
          }
          double v141 = v98 * v101;
          double v142 = v97 * v101 + v95;
          if (v142 < 0.0) {
            double v143 = -0.5;
          }
          else {
            double v143 = 0.5;
          }
          uint64_t v144 = (v142 + v143);
          double v145 = v141 + v96;
          if (v145 < 0.0) {
            double v146 = -0.5;
          }
          else {
            double v146 = 0.5;
          }
          unsigned int v147 = (v145 + v146);
          if (v105 < 0.0) {
            double v148 = -0.5;
          }
          else {
            double v148 = 0.5;
          }
          if (v104) {
            unsigned int v149 = (v105 + v148);
          }
          else {
            unsigned int v149 = 0x7FFFFFFF;
          }
          unsigned int v284 = v149;
          if (v147 >= 0xFFFFFFFE) {
            uint64_t v150 = 4294967294;
          }
          else {
            uint64_t v150 = v147;
          }
          uint64_t v288 = v144 | (v150 << 32);
          unint64_t v283 = v16 + 1;
          if (v292 <= v92) {
            unint64_t v115 = v16 + 1;
          }
          else {
            unint64_t v115 = v292;
          }
          uint64_t v116 = 0;
          if (v292 >= v92) {
            goto LABEL_216;
          }
LABEL_197:
          while (2)
          {
            uint64_t v152 = (uint64_t)&(*v4)[12 * v102];
            if (v116 < v302)
            {
              uint64_t v151 = *(void *)v152;
              *((_DWORD *)v116 + 2) = *(_DWORD *)(v152 + 8);
              *(void *)uint64_t v116 = v151;
              v116 += 12;
              goto LABEL_196;
            }
            int v153 = (char *)v300;
            unint64_t v154 = 0xAAAAAAAAAAAAAAABLL * ((v116 - (unsigned char *)v300) >> 2);
            unint64_t v155 = v154 + 1;
            if (v154 + 1 > 0x1555555555555555) {
              sub_2E00();
            }
            if (0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2) > v155) {
              unint64_t v155 = 0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v302 - (unsigned char *)v300) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v156 = 0x1555555555555555;
            }
            else {
              unint64_t v156 = v155;
            }
            if (v156)
            {
              if (v156 > 0x1555555555555555) {
                sub_188D718();
              }
              unint64_t v157 = (char *)operator new(12 * v156);
            }
            else
            {
              unint64_t v157 = 0;
            }
            uint64_t v158 = *(void *)v152;
            unint64_t v159 = &v157[12 * v154];
            *((_DWORD *)v159 + 2) = *(_DWORD *)(v152 + 8);
            *(void *)unint64_t v159 = v158;
            if (v116 == v153)
            {
              unsigned int v163 = v116;
              unint64_t v4 = v294;
              uint64_t v116 = v159 + 12;
              int v300 = v159;
              std::string __p = v159 + 12;
              long long v302 = &v157[12 * v156];
              if (!v163) {
                goto LABEL_196;
              }
            }
            else
            {
              unint64_t v160 = &v157[12 * v154];
              unint64_t v4 = v294;
              do
              {
                uint64_t v161 = *(void *)(v116 - 12);
                v116 -= 12;
                int v162 = *((_DWORD *)v116 + 2);
                *(void *)(v160 - 12) = v161;
                v160 -= 12;
                *((_DWORD *)v160 + 2) = v162;
              }
              while (v116 != v153);
              unsigned int v163 = v300;
              uint64_t v116 = v159 + 12;
              int v300 = v160;
              std::string __p = v159 + 12;
              long long v302 = &v157[12 * v156];
              if (!v163)
              {
LABEL_196:
                std::string __p = v116;
                if (++v102 == v115)
                {
                  uint64_t v41 = *v4;
                  unint64_t v102 = v292;
                  goto LABEL_216;
                }
                continue;
              }
            }
            break;
          }
          operator delete(v163);
          goto LABEL_196;
        }
        uint64_t v288 = *(void *)v94;
        unsigned int v284 = *((_DWORD *)v94 + 2);
        unint64_t v283 = v16 + 1;
        if (v292 <= v92) {
          unint64_t v115 = v16 + 1;
        }
        else {
          unint64_t v115 = v292;
        }
        uint64_t v116 = 0;
        if (v292 < v92) {
          goto LABEL_197;
        }
      }
LABEL_216:
      if (*(void *)&v41[12 * v16] == v288)
      {
        if (v102 == v16)
        {
          uint64_t v164 = (char *)v300;
          if (v116 >= v302)
          {
            unint64_t v190 = 0xAAAAAAAAAAAAAAABLL * ((v116 - (unsigned char *)v300) >> 2) + 1;
            if (v190 > 0x1555555555555555) {
LABEL_379:
            }
              sub_2E00();
            if (0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2) > v190) {
              unint64_t v190 = 0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v302 - (unsigned char *)v300) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v191 = 0x1555555555555555;
            }
            else {
              unint64_t v191 = v190;
            }
            if (v191)
            {
              if (v191 > 0x1555555555555555) {
LABEL_381:
              }
                sub_188D718();
              unint64_t v192 = (char *)operator new(12 * v191);
            }
            else
            {
              unint64_t v192 = 0;
            }
            uint64_t v198 = *(void *)v164;
            uint64_t v199 = &v192[4 * ((v116 - v164) >> 2)];
            *((_DWORD *)v199 + 2) = *((_DWORD *)v164 + 2);
            *(void *)uint64_t v199 = v198;
            uint64_t v200 = v199;
            if (v116 != v164)
            {
              do
              {
                uint64_t v201 = *(void *)(v116 - 12);
                v116 -= 12;
                int v202 = *((_DWORD *)v116 + 2);
                *(void *)(v200 - 12) = v201;
                v200 -= 12;
                *((_DWORD *)v200 + 2) = v202;
              }
              while (v116 != v164);
              uint64_t v116 = (char *)v300;
            }
            unsigned int v166 = v199 + 12;
            int v300 = v200;
            std::string __p = v199 + 12;
            long long v302 = &v192[12 * v191];
            if (v116) {
              operator delete(v116);
            }
          }
          else
          {
            uint64_t v165 = *(void *)v300;
            *((_DWORD *)v116 + 2) = *((_DWORD *)v300 + 2);
            *(void *)uint64_t v116 = v165;
            unsigned int v166 = v116 + 12;
          }
          std::string __p = v166;
          unint64_t v16 = v292;
        }
      }
      else
      {
        BOOL v167 = &v41[12 * v283];
        uint64_t v168 = v288;
        if (*(_DWORD *)v167 != v288)
        {
          uint64x2_t v170 = v302;
LABEL_225:
          if (v116 >= v170)
          {
            int64x2_t v174 = (char *)v300;
            unint64_t v175 = 0xAAAAAAAAAAAAAAABLL * ((v116 - (unsigned char *)v300) >> 2);
            unint64_t v176 = v175 + 1;
            if (v175 + 1 > 0x1555555555555555) {
              goto LABEL_379;
            }
            unint64_t v177 = 0xAAAAAAAAAAAAAAABLL * ((v170 - (unsigned char *)v300) >> 2);
            if (2 * v177 > v176) {
              unint64_t v176 = 2 * v177;
            }
            if (v177 >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v178 = 0x1555555555555555;
            }
            else {
              unint64_t v178 = v176;
            }
            if (v178)
            {
              if (v178 > 0x1555555555555555) {
                goto LABEL_381;
              }
              long double v179 = (char *)operator new(12 * v178);
            }
            else
            {
              long double v179 = 0;
            }
            double v180 = &v179[12 * v175];
            *(void *)double v180 = v288;
            *((_DWORD *)v180 + 2) = v284;
            double v181 = v180;
            if (v116 != v174)
            {
              do
              {
                uint64_t v182 = *(void *)(v116 - 12);
                v116 -= 12;
                int v183 = *((_DWORD *)v116 + 2);
                *(void *)(v181 - 12) = v182;
                v181 -= 12;
                *((_DWORD *)v181 + 2) = v183;
              }
              while (v116 != v174);
              uint64_t v116 = (char *)v300;
            }
            long double v173 = v180 + 12;
            int v300 = v181;
            std::string __p = v180 + 12;
            long long v302 = &v179[12 * v178];
            if (v116) {
              operator delete(v116);
            }
            uint64_t v168 = v288;
          }
          else
          {
            *(void *)uint64_t v116 = v288;
            *((_DWORD *)v116 + 2) = v284;
            long double v173 = v116 + 12;
          }
          std::string __p = v173;
          uint64_t v184 = (uint64_t)&(*v4)[12 * v16];
          *(void *)uint64_t v184 = v168;
          *(_DWORD *)(v184 + 8) = v284;
          goto LABEL_276;
        }
        int v169 = *(_DWORD *)&v41[12 * v283 + 4];
        uint64x2_t v170 = v302;
        if (v169 != HIDWORD(v288)) {
          goto LABEL_225;
        }
        if (v116 >= v302)
        {
          long double v185 = (char *)v300;
          unint64_t v186 = 0xAAAAAAAAAAAAAAABLL * ((v116 - (unsigned char *)v300) >> 2);
          unint64_t v187 = v186 + 1;
          if (v186 + 1 > 0x1555555555555555) {
            goto LABEL_379;
          }
          if (0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2) > v187) {
            unint64_t v187 = 0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v302 - (unsigned char *)v300) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v188 = 0x1555555555555555;
          }
          else {
            unint64_t v188 = v187;
          }
          if (v188)
          {
            if (v188 > 0x1555555555555555) {
              goto LABEL_381;
            }
            double v189 = (char *)operator new(12 * v188);
          }
          else
          {
            double v189 = 0;
          }
          uint64_t v193 = *(void *)v167;
          double v194 = &v189[12 * v186];
          *((_DWORD *)v194 + 2) = *((_DWORD *)v167 + 2);
          *(void *)double v194 = v193;
          double v195 = v194;
          if (v116 != v185)
          {
            do
            {
              uint64_t v196 = *(void *)(v116 - 12);
              v116 -= 12;
              int v197 = *((_DWORD *)v116 + 2);
              *(void *)(v195 - 12) = v196;
              v195 -= 12;
              *((_DWORD *)v195 + 2) = v197;
            }
            while (v116 != v185);
            uint64_t v116 = (char *)v300;
          }
          uint64_t v172 = v194 + 12;
          int v300 = v195;
          std::string __p = v194 + 12;
          long long v302 = &v189[12 * v188];
          if (v116) {
            operator delete(v116);
          }
        }
        else
        {
          uint64_t v171 = *(void *)v167;
          *((_DWORD *)v116 + 2) = *((_DWORD *)v167 + 2);
          *(void *)uint64_t v116 = v171;
          uint64_t v172 = v116 + 12;
        }
        std::string __p = v172;
        unint64_t v16 = v283;
      }
LABEL_276:
      if (v286 != sub_470ADC(v287) - 1) {
        goto LABEL_312;
      }
      if (v291 != 0xAAAAAAAAAAAAAAABLL * ((v304 - v303) >> 2) - 1) {
        goto LABEL_312;
      }
      float64x2_t v203 = v294[1];
      float64x2_t v204 = &(*v294)[12 * v16];
      if (v203 - v204 < 1) {
        goto LABEL_312;
      }
      uint64_t v205 = (v203 - v204) / 12;
      int v206 = (char *)__p;
      int64_t v207 = ((unsigned char *)__p - (unsigned char *)v300) / 12;
      int v208 = (char *)v300 + 12 * v207;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v302 - (unsigned char *)__p) >> 2)) < v205)
      {
        unint64_t v209 = v207 + v205;
        if ((unint64_t)(v207 + v205) > 0x1555555555555555) {
          sub_2E00();
        }
        if (0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2) > v209) {
          unint64_t v209 = 0x5555555555555556 * ((v302 - (unsigned char *)v300) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v302 - (unsigned char *)v300) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v210 = 0x1555555555555555;
        }
        else {
          unint64_t v210 = v209;
        }
        if (v210)
        {
          if (v210 > 0x1555555555555555) {
            sub_188D718();
          }
          BOOL v211 = (char *)operator new(12 * v210);
        }
        else
        {
          BOOL v211 = 0;
        }
        uint64_t v221 = &v211[12 * v207];
        uint64_t v222 = 12 * v205;
        unint64_t v223 = &v221[12 * v205];
        uint64_t v224 = v221;
        do
        {
          uint64_t v225 = *(void *)v204;
          *((_DWORD *)v224 + 2) = *((_DWORD *)v204 + 2);
          *(void *)uint64_t v224 = v225;
          v224 += 12;
          v204 += 12;
          v222 -= 12;
        }
        while (v222);
        uint64_t v226 = v300;
        if (v300 != v208)
        {
          uint64_t v227 = v208;
          do
          {
            uint64_t v228 = *(void *)(v227 - 3);
            v227 -= 3;
            int v229 = v227[2];
            *(void *)(v221 - 12) = v228;
            v221 -= 12;
            *((_DWORD *)v221 + 2) = v229;
          }
          while (v227 != v226);
          int v206 = (char *)__p;
        }
        if (v206 != v208) {
          memmove(v223, v208, v206 - v208);
        }
        unsigned int v230 = v300;
        int v300 = v221;
        std::string __p = &v223[v206 - v208];
        long long v302 = &v211[12 * v210];
        if (v230) {
          operator delete(v230);
        }
        goto LABEL_312;
      }
      long double v212 = (char *)((unsigned char *)__p - v208);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__p - v208) >> 2)) >= v205)
      {
        long double v213 = &v204[12 * v205];
        uint64_t v215 = (char *)__p;
        uint64_t v216 = 12 * v205;
        unint64_t v217 = (char *)__p - 12 * v205;
        __int16 v218 = (char *)__p;
        if (v217 < __p)
        {
          do
          {
LABEL_294:
            uint64_t v219 = *(void *)v217;
            *((_DWORD *)v218 + 2) = *((_DWORD *)v217 + 2);
            *(void *)__int16 v218 = v219;
            v218 += 12;
            v217 += 12;
          }
          while (v217 < v206);
        }
LABEL_295:
        unint64_t v220 = &v208[v216];
        std::string __p = v218;
        if (v215 != v220) {
          memmove(v220, v208, v215 - v220);
        }
        if (v213 != v204) {
          memmove(v208, v204, v213 - v204);
        }
        goto LABEL_312;
      }
      long double v213 = &v204[4 * (((unsigned char *)__p - v208) >> 2)];
      int64_t v214 = v203 - v213;
      if (v203 != v213) {
        memmove(__p, &v204[4 * (((unsigned char *)__p - v208) >> 2)], v203 - v213);
      }
      uint64_t v215 = &v206[v214];
      std::string __p = &v206[v214];
      if ((uint64_t)v212 >= 1)
      {
        uint64_t v216 = 12 * v205;
        unint64_t v217 = &v215[-12 * v205];
        __int16 v218 = &v206[v214];
        if (v217 < v206) {
          goto LABEL_294;
        }
        goto LABEL_295;
      }
LABEL_312:
      int v231 = operator new(0x18uLL);
      v296 = v231 + 6;
      uint64_t v297 = (char *)(v231 + 6);
      *(void *)int v231 = v298;
      v231[2] = v299;
      v231[3] = v29;
      *((void *)v231 + 2) = v293;
      v295 = v231;
      sub_EA512C(a1, &v295, (unsigned int **)&v300);
      if (v295)
      {
        v296 = v295;
        operator delete(v295);
      }
      uint64_t v232 = nullsub_1(v290);
      unsigned int v233 = (char *)v300;
      int64_t v234 = (unsigned char *)__p - (unsigned char *)v300;
      if ((unsigned char *)__p - (unsigned char *)v300 < 1) {
        goto LABEL_348;
      }
      long double v235 = (void **)v232;
      uint64_t v236 = v234 / 12;
      unint64_t v237 = *(void *)(v232 + 8);
      uint64_t v238 = (uint64_t)(v237 - *(void *)v232) / 12;
      unint64_t v239 = (char *)(*(void *)v232 + 12 * v238);
      uint64_t v240 = *(void *)(v232 + 16);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v240 - v237) >> 2)) >= v234 / 12)
      {
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v237 - (void)v239) >> 2)) >= v236)
        {
          uint64_t v244 = (char *)v300 + 12 * v236;
          char v246 = *(char **)(v232 + 8);
          uint64_t v247 = 12 * v236;
          unint64_t v248 = (char *)(v237 - 12 * v236);
          long long v249 = v246;
          if ((unint64_t)v248 >= v237)
          {
LABEL_331:
            long long v251 = &v239[v247];
            v235[1] = v249;
            if (v246 != v251) {
              memmove(v251, v239, v246 - v251);
            }
            if (v244 != v233) {
              memmove(v239, v233, v244 - v233);
            }
            goto LABEL_348;
          }
        }
        else
        {
          uint64_t v244 = (char *)v300 + 4 * ((uint64_t)(v237 - (void)v239) >> 2);
          long long v245 = (char *)((unsigned char *)__p - v244);
          if (__p != v244) {
            memmove(*(void **)(v232 + 8), (char *)v300 + 4 * ((uint64_t)(v237 - (void)v239) >> 2), (unsigned char *)__p - v244);
          }
          char v246 = &v245[v237];
          v235[1] = &v245[v237];
          if ((uint64_t)(v237 - (void)v239) < 1) {
            goto LABEL_348;
          }
          uint64_t v247 = 12 * v236;
          unint64_t v248 = &v246[-12 * v236];
          long long v249 = &v245[v237];
          if ((unint64_t)v248 >= v237) {
            goto LABEL_331;
          }
        }
        do
        {
          uint64_t v250 = *(void *)v248;
          *((_DWORD *)v249 + 2) = *((_DWORD *)v248 + 2);
          *(void *)long long v249 = v250;
          v249 += 12;
          v248 += 12;
        }
        while ((unint64_t)v248 < v237);
        goto LABEL_331;
      }
      unint64_t v241 = v238 + v236;
      if ((unint64_t)(v238 + v236) > 0x1555555555555555) {
        sub_2E00();
      }
      if (0x5555555555555556 * ((v240 - *(void *)v232) >> 2) > v241) {
        unint64_t v241 = 0x5555555555555556 * ((v240 - *(void *)v232) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v240 - *(void *)v232) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v242 = 0x1555555555555555;
      }
      else {
        unint64_t v242 = v241;
      }
      if (v242)
      {
        if (v242 > 0x1555555555555555) {
          sub_188D718();
        }
        uint64_t v243 = (char *)operator new(12 * v242);
      }
      else
      {
        uint64_t v243 = 0;
      }
      v252 = &v243[12 * v238];
      uint64_t v253 = 12 * v236;
      unint64_t v254 = &v252[12 * v236];
      unint64_t v255 = v252;
      do
      {
        uint64_t v256 = *(void *)v233;
        *((_DWORD *)v255 + 2) = *((_DWORD *)v233 + 2);
        *(void *)unint64_t v255 = v256;
        v255 += 12;
        v233 += 12;
        v253 -= 12;
      }
      while (v253);
      uint64_t v257 = (char *)*v235;
      if (*v235 != v239)
      {
        float64x2_t v258 = v239;
        do
        {
          uint64_t v259 = *(void *)(v258 - 12);
          v258 -= 12;
          int v260 = *((_DWORD *)v258 + 2);
          *(void *)(v252 - 12) = v259;
          v252 -= 12;
          *((_DWORD *)v252 + 2) = v260;
        }
        while (v258 != v257);
        unint64_t v237 = (unint64_t)v235[1];
      }
      if ((char *)v237 != v239) {
        memmove(v254, v239, v237 - (void)v239);
      }
      float64x2_t v261 = *v235;
      *long double v235 = v252;
      v235[1] = &v254[v237 - (void)v239];
      v235[2] = &v243[12 * v242];
      if (v261) {
        operator delete(v261);
      }
LABEL_348:
      if (v300)
      {
        std::string __p = v300;
        operator delete(v300);
      }
      uint64_t v27 = v291 + 1;
      long long v24 = v303;
      unint64_t v26 = v16;
      unint64_t v4 = v294;
      if (v291 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((v304 - v303) >> 2)) {
        goto LABEL_350;
      }
    }
    uint64_t v65 = 0;
    double v38 = (double)v29;
    uint64_t v66 = v39;
    double v67 = (double)v39;
    if (v26 > v43) {
      unint64_t v43 = v26;
    }
    uint64_t v68 = &v41[12 * v26 + 12];
    double v37 = 1.79769313e308;
    unint64_t v69 = v26;
    unint64_t v16 = v26;
    while (1)
    {
      if (v43 == v69) {
        goto LABEL_115;
      }
      uint64_t v71 = *((unsigned int *)v68 - 3);
      LODWORD(v70) = *((_DWORD *)v68 - 2);
      double v72 = (double)v71;
      double v73 = (double)v70;
      uint64_t v75 = *(unsigned int *)v68;
      LODWORD(v74) = *((_DWORD *)v68 + 1);
      double v76 = (double)v75 - (double)v71;
      double v77 = (double)v74 - (double)v70;
      double v78 = v76 * v76 + v77 * v77;
      double v79 = fabs(v78);
      if (v78 == 0.0 || v79 < 2.22044605e-16) {
        break;
      }
      double v83 = ((v38 - v72) * v76 + (v67 - v73) * v77) / v78;
      if (v83 <= 0.0)
      {
        unint64_t v81 = *(void *)(v68 - 12);
        unint64_t v70 = HIDWORD(v81);
        unint64_t v82 = HIDWORD(v81);
      }
      else
      {
        if (v83 >= 1.0) {
          break;
        }
        double v84 = v77 * v83 + v73;
        double v85 = v76 * v83 + v72;
        if (v85 < 0.0) {
          double v86 = -0.5;
        }
        else {
          double v86 = 0.5;
        }
        LODWORD(v81) = (v85 + v86);
        if (v84 < 0.0) {
          double v87 = -0.5;
        }
        else {
          double v87 = 0.5;
        }
        LODWORD(v82) = (v84 + v87);
        if (v82 >= 0xFFFFFFFE) {
          LODWORD(v82) = -2;
        }
      }
LABEL_95:
      double v88 = sqrt((double)((v29 - v81) * (v29 - v81)
                        + (v66 - v82) * (v66 - (unint64_t)v82)))
          / 100.0;
      if (v88 < v37)
      {
        unint64_t v16 = v69;
        double v37 = v88;
      }
      double v36 = sqrt((double)((v71 - v75) * (v71 - v75)
                        + (v70 - (unint64_t)v74)
                        * (v70 - (unint64_t)v74)))
          / 100.0
          * 100.0;
      if (v36 >= 0.0)
      {
        double v89 = v36;
        if (v36 < 4.50359963e15)
        {
          uint64_t v90 = (uint64_t)(v36 + v36) + 1;
LABEL_104:
          double v89 = (double)(v90 >> 1);
        }
      }
      else
      {
        double v89 = v36;
        if (v36 > -4.50359963e15)
        {
          uint64_t v90 = (uint64_t)(v36 + v36);
          if (v90 >= 1) {
            --v90;
          }
          goto LABEL_104;
        }
      }
      if (v89 >= 9.22337204e18)
      {
        v65 += 0x7FFFFFFFFFFFFFFELL;
        v68 += 12;
        ++v69;
        if (v65 > v40) {
          goto LABEL_115;
        }
      }
      else
      {
        if (v36 >= 0.0)
        {
          if (v36 < 4.50359963e15)
          {
            uint64_t v91 = (uint64_t)(v36 + v36) + 1;
LABEL_113:
            double v36 = (double)(v91 >> 1);
          }
        }
        else if (v36 > -4.50359963e15)
        {
          uint64_t v91 = (uint64_t)(v36 + v36);
          if (v91 >= 1) {
            --v91;
          }
          goto LABEL_113;
        }
        v65 += (uint64_t)v36;
        v68 += 12;
        ++v69;
        if (v65 > v40) {
          goto LABEL_115;
        }
      }
    }
    unint64_t v81 = *(void *)v68;
    uint64_t v74 = HIDWORD(*(void *)v68);
    LODWORD(v82) = v74;
    goto LABEL_95;
  }
  return result;
}

void sub_EA407C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32)
{
  if (__p)
  {
    operator delete(__p);
    double v34 = *(void **)(v32 - 160);
    if (!v34) {
      goto LABEL_6;
    }
  }
  else
  {
    double v34 = *(void **)(v32 - 160);
    if (!v34) {
LABEL_6:
    }
      _Unwind_Resume(exception_object);
  }
  *(void *)(v32 - 152) = v34;
  operator delete(v34);
  goto LABEL_6;
}

void sub_EA41A4(uint64_t *a1, void *a2)
{
  unint64_t v4 = sub_470ADC(a2);
  if (!v4) {
    return;
  }
  unint64_t v5 = v4;
  uint64_t v6 = 0;
  int v7 = 0;
  unint64_t v8 = 0;
  for (uint64_t i = 0; i != v5; ++i)
  {
    uint64_t v10 = nullsub_1(a2[1248] + v6);
    uint64_t v12 = *(_DWORD **)v10;
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11 - *(void *)v10 != 24 || *v12 != *(_DWORD *)(v11 - 12)) {
      goto LABEL_12;
    }
    BOOL v13 = v12[1] == *(_DWORD *)(v11 - 8);
    int v14 = !v13;
    if (((v14 | v7) & 1) == 0)
    {
      unint64_t v8 = i - (i != 0);
      int v7 = 1;
      goto LABEL_4;
    }
    if (!v13)
    {
LABEL_12:
      if (((v7 ^ 1) & 1) == 0)
      {
        sub_EA58C8(a1, a2, v8, i + 1);
        int v7 = 0;
      }
    }
LABEL_4:
    v6 += 40;
  }
  if (v7)
  {
    unint64_t v15 = sub_470ADC(a2);
    sub_EA58C8(a1, a2, v8, v15);
  }
}

void sub_EA42E8()
{
  sub_557BC((uint64_t)v0);
}

void sub_EA4E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_5450C((uint64_t)va);
  sub_3BDE2C(v9 - 184);
  _Unwind_Resume(a1);
}

void sub_EA4E7C(_Unwind_Exception *a1)
{
  sub_3BDE2C(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_EA4E90(_Unwind_Exception *a1)
{
  sub_3BDE2C(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_EA4EA4(_Unwind_Exception *a1)
{
  sub_3BDE2C(v1 - 184);
  _Unwind_Resume(a1);
}

void sub_EA4EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  sub_111ECAC((uint64_t)&a20);
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  if (a64 < 0)
  {
    operator delete(a59);
    if ((*(char *)(v64 - 217) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v64 - 217) & 0x80000000) == 0)
  {
LABEL_9:
    uint64_t v66 = *(void **)(v64 - 208);
    if (!v66) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  operator delete(*(void **)(v64 - 240));
  uint64_t v66 = *(void **)(v64 - 208);
  if (!v66)
  {
LABEL_11:
    sub_3BDE2C(v64 - 184);
    _Unwind_Resume(a1);
  }
LABEL_10:
  *(void *)(v64 - 200) = v66;
  operator delete(v66);
  goto LABEL_11;
}

void sub_EA512C(uint64_t a1, void *a2, unsigned int **a3)
{
  unint64_t v4 = (_DWORD *)*a2;
  uint64_t v3 = (_DWORD *)a2[1];
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a2) >> 2) < 2) {
    return;
  }
  int v6 = v4[2];
  if (v4 == v3)
  {
LABEL_11:
    uint64_t v11 = (char *)a3[1] - (char *)*a3;
    if (v11)
    {
      uint64_t v12 = v11 / 12;
      uint64_t v13 = 2;
      do
      {
        (*a3)[v13] = v6;
        v13 += 3;
        --v12;
      }
      while (v12);
    }
    return;
  }
  int v8 = *(v3 - 1);
  uint64_t v9 = (_DWORD *)*a2;
  do
  {
    if (v9[2] == 0x7FFFFFFF)
    {
      (*a3)[2] = v6;
      if (v6 == 0x7FFFFFFF) {
        int v14 = v8;
      }
      else {
        int v14 = v6;
      }
      unint64_t v15 = a3[1];
      uint64_t v16 = v15 - *a3;
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * v16 - 1;
      if (v17 <= 1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * v16 - 1;
      }
      if (v17 >= 2)
      {
        unint64_t v19 = v18 - 1;
        uint64_t v20 = 5;
        do
        {
          (*a3)[v20] = v14;
          v20 += 3;
          --v19;
        }
        while (v19);
        unint64_t v15 = a3[1];
      }
      *(v15 - 1) = v8;
      return;
    }
    v9 += 3;
  }
  while (v9 != v3);
  uint64_t v10 = (_DWORD *)*a2;
  while (*v10 == *v4 && v10[1] == v4[1] && v10[2] == v6)
  {
    v10 += 3;
    if (v10 == v3) {
      goto LABEL_11;
    }
  }
  double v79 = 0;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  int v78 = 0;
  *(double *)std::string __p = (double)v6 / 100.0;
  sub_E9DC88((char **)&v79, &v78, __p);
  __p[0] = &v79;
  sub_EA2160(a2, (uint64_t *)__p);
  sub_65DB8((uint64_t)&v79, 1, (uint64_t *)__p);
  double v21 = *(v80 - 2);
  uint64_t v22 = *a3;
  uint64_t v23 = (char *)a3[1];
  if (*a3 == (unsigned int *)v23 || (long long v24 = (char *)(v22 + 3), v22 + 3 == (unsigned int *)v23))
  {
    if (v21 == 0.0)
    {
LABEL_43:
      int64_t v43 = v23 - (char *)v22;
      if (!v43) {
        goto LABEL_88;
      }
      unint64_t v44 = 0;
      double v45 = (double)v8;
      uint64_t v46 = v43 / 12;
      while (1)
      {
        unint64_t v49 = *a3;
        uint64_t v48 = a3[1];
        uint64_t v50 = sub_38128(a3, v44);
        double v51 = (double)v44 / (double)(unint64_t)(-1 - 0x5555555555555555 * (v48 - v49));
        double v52 = (1.0 - v51) * (double)v6;
        if (v52 >= 0.0)
        {
          if (v52 >= 4.50359963e15) {
            goto LABEL_55;
          }
          uint64_t v53 = (uint64_t)(v52 + v52) + 1;
        }
        else
        {
          if (v52 <= -4.50359963e15) {
            goto LABEL_55;
          }
          uint64_t v53 = (uint64_t)(v52 + v52);
          if (v53 >= 1) {
            --v53;
          }
        }
        double v52 = (double)(v53 >> 1);
LABEL_55:
        double v47 = v51 * v45;
        if (v47 >= 0.0)
        {
          if (v47 >= 4.50359963e15) {
            goto LABEL_46;
          }
          uint64_t v54 = (uint64_t)(v47 + v47) + 1;
        }
        else
        {
          if (v47 <= -4.50359963e15) {
            goto LABEL_46;
          }
          uint64_t v54 = (uint64_t)(v47 + v47);
          if (v54 >= 1) {
            --v54;
          }
        }
        double v47 = (double)(v54 >> 1);
LABEL_46:
        *(_DWORD *)(v50 + 8) = (int)v47 + (int)v52;
        if (v46 == ++v44) {
          goto LABEL_88;
        }
      }
    }
    goto LABEL_63;
  }
  unint64_t v25 = v23 - (char *)v22 - 24;
  if (v25 < 0xC)
  {
    double v26 = 0.0;
    uint64_t v27 = *a3;
    goto LABEL_35;
  }
  unint64_t v28 = v25 / 0xC + 1;
  uint64_t v29 = 3 * (v28 & 0x3FFFFFFFFFFFFFFELL);
  v24 += v29 * 4;
  uint64_t v27 = &v22[v29];
  double v30 = v22 + 4;
  double v26 = 0.0;
  uint64_t v31 = v28 & 0x3FFFFFFFFFFFFFFELL;
  do
  {
    uint64_t v33 = *(v30 - 1);
    uint64_t v32 = *v30;
    double v26 = v26
        + sqrt((double)((*(v30 - 4) - v33) * (*(v30 - 4) - v33)
                      + (*(v30 - 3) - v32) * ((unint64_t)*(v30 - 3) - v32)))
        / 100.0
        + sqrt((double)((v33 - v30[2]) * (v33 - v30[2]) + (v32 - v30[3]) * (v32 - (unint64_t)v30[3]))) / 100.0;
    v30 += 6;
    v31 -= 2;
  }
  while (v31);
  if (v28 != (v28 & 0x3FFFFFFFFFFFFFFELL))
  {
    do
    {
LABEL_35:
      unsigned int v34 = *(_DWORD *)v24;
      v24 += 12;
      unint64_t v35 = v27[1] - (unint64_t)v27[4];
      double v26 = v26 + sqrt((double)((*v27 - (unint64_t)v34) * (*v27 - (unint64_t)v34) + v35 * v35)) / 100.0;
      v27 += 3;
    }
    while (v24 != v23);
  }
  if (v21 <= 0.0 || v26 <= 0.0)
  {
    if (v21 == 0.0) {
      goto LABEL_43;
    }
    if (v26 != 0.0) {
      goto LABEL_88;
    }
LABEL_63:
    int64_t v55 = v23 - (char *)v22;
    if (!v55) {
      goto LABEL_88;
    }
    unint64_t v56 = 0;
    uint64_t v57 = v55 / 12;
    while (1)
    {
      sub_66188((uint64_t)__p, v21 * ((double)v56 / (double)(unint64_t)(-1 - 0x5555555555555555 * (a3[1] - *a3))));
      double v60 = v59;
      uint64_t v61 = sub_38128(a3, v56);
      double v58 = v60 * 100.0;
      if (v60 * 100.0 >= 0.0)
      {
        if (v58 >= 4.50359963e15) {
          goto LABEL_66;
        }
        uint64_t v62 = (uint64_t)(v58 + v58) + 1;
      }
      else
      {
        if (v58 <= -4.50359963e15) {
          goto LABEL_66;
        }
        uint64_t v62 = (uint64_t)(v58 + v58);
        if (v62 >= 1) {
          --v62;
        }
      }
      double v58 = (double)(v62 >> 1);
LABEL_66:
      *(_DWORD *)(v61 + 8) = (int)v58;
      if (v57 == ++v56) {
        goto LABEL_88;
      }
    }
  }
  v22[2] = v6;
  double v36 = *a3;
  double v37 = a3[1];
  if (v36 != v37)
  {
    double v38 = v36 + 3;
    if (v36 + 3 != v37)
    {
      unint64_t v39 = (char *)v37 - (char *)v36 - 24;
      if (v39 < 0xC)
      {
        double v40 = 0.0;
        uint64_t v41 = v36 + 3;
        unint64_t v42 = v36;
        goto LABEL_77;
      }
      unint64_t v63 = v39 / 0xC + 1;
      uint64_t v64 = 3 * (v63 & 0x3FFFFFFFFFFFFFFELL);
      uint64_t v41 = &v38[v64];
      unint64_t v42 = &v36[v64];
      uint64_t v65 = v36 + 4;
      double v40 = 0.0;
      uint64_t v66 = v63 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        uint64_t v68 = *(v65 - 1);
        uint64_t v67 = *v65;
        double v40 = v40
            + sqrt((double)((*(v65 - 4) - v68) * (*(v65 - 4) - v68)
                          + (*(v65 - 3) - v67) * ((unint64_t)*(v65 - 3) - v67)))
            / 100.0
            + sqrt((double)((v68 - v65[2]) * (v68 - v65[2]) + (v67 - v65[3]) * (v67 - (unint64_t)v65[3])))
            / 100.0;
        v65 += 6;
        v66 -= 2;
      }
      while (v66);
      if (v63 != (v63 & 0x3FFFFFFFFFFFFFFELL))
      {
        do
        {
LABEL_77:
          unsigned int v69 = *v41;
          v41 += 3;
          unint64_t v70 = v42[1] - (unint64_t)v42[4];
          double v40 = v40
              + sqrt((double)((*v42 - (unint64_t)v69) * (*v42 - (unint64_t)v69) + v70 * v70)) / 100.0;
          v42 += 3;
        }
        while (v41 != v37);
      }
      double v71 = 0.0;
      double v72 = *(v80 - 2) / v40;
      while (2)
      {
        unint64_t v74 = *(v38 - 2) - (unint64_t)v38[1];
        double v71 = v71
            + sqrt((double)((*(v38 - 3) - (unint64_t)*v38) * (*(v38 - 3) - (unint64_t)*v38) + v74 * v74))
            / 100.0;
        sub_66188((uint64_t)__p, v72 * v71);
        double v73 = v75 * 100.0;
        if (v73 >= 0.0)
        {
          if (v73 < 4.50359963e15)
          {
            uint64_t v76 = (uint64_t)(v73 + v73) + 1;
            goto LABEL_79;
          }
        }
        else if (v73 > -4.50359963e15)
        {
          uint64_t v76 = (uint64_t)(v73 + v73);
          if (v76 >= 1) {
            --v76;
          }
LABEL_79:
          double v73 = (double)(v76 >> 1);
        }
        v38[2] = (int)v73;
        v38 += 3;
        if (v38 == v37) {
          break;
        }
        continue;
      }
    }
  }
LABEL_88:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v79)
  {
    uint64_t v80 = (double *)v79;
    operator delete(v79);
  }
}

void sub_EA5854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (!__p) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_EA58C8(uint64_t *a1, void *a2, unint64_t a3, unint64_t a4)
{
  if (a3 == a4) {
    return;
  }
  unint64_t v5 = a3;
  int v8 = a2 + 1248;
  uint64_t v9 = sub_E9DA58(a2 + 1248, a3);
  nullsub_1(v9);
  uint64_t v221 = v8;
  uint64_t v10 = sub_E9DA58(v8, a4 - 1);
  nullsub_1(v10);
  uint64_t v247 = 0;
  unint64_t v248 = 0;
  long long v249 = 0;
  uint64_t v244 = 0;
  long long v245 = 0;
  char v246 = 0;
  unint64_t v241 = 0;
  unint64_t v242 = 0;
  uint64_t v243 = 0;
  if (v5 <= a4) {
    unint64_t v11 = a4;
  }
  else {
    unint64_t v11 = v5;
  }
  uint64_t v219 = a2;
  unint64_t v220 = v11;
  __int16 v218 = a1;
  if (v5 >= a4) {
    goto LABEL_256;
  }
  unint64_t v217 = v5;
  uint64_t v12 = v5;
  do
  {
    uint64_t v13 = *a1;
    unint64_t v223 = v12;
    int v14 = (unsigned int *)sub_470B40(v219, v12);
    sub_2954EC(v13, (((unint64_t)(v14[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v14[1] << 32) | *v14) ^ 0x1000000000000, (uint64_t)&v237);
    sub_2E51EC((uint64_t)&v237, (uint64_t)v226);
    if (v240)
    {
      if (v238 == v239) {
        int v15 = 0;
      }
      else {
        int v15 = -1;
      }
      LODWORD(v16) = v15;
      unsigned int v17 = v233;
      int v222 = v15;
      if (v232 != v15 || v233 != v15) {
        goto LABEL_29;
      }
      goto LABEL_233;
    }
    if (v238 == v239)
    {
      LODWORD(v16) = 0;
      unsigned int v17 = v233;
      int v222 = 0;
      if (v232) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = v233 == 0;
      }
      if (v26) {
        goto LABEL_233;
      }
LABEL_29:
      uint64_t v27 = (unsigned __int16 *)v228;
      while (1)
      {
        unint64_t v28 = &v27[2 * v17];
        int v29 = v28[2];
        int v30 = v28[3];
        unsigned int v31 = sub_511FC(v230);
        unsigned int v32 = v230 & ~(-1 << (v31 & 0xFE));
        int v33 = sub_51938(v32);
        int v34 = sub_51938(v32 >> 1);
        int v35 = 1 << -(v31 >> 1);
        if (v31 < 2) {
          int v35 = -2;
        }
        if ((v34 * v35 + 4 * v30) >= 0xFFFFFFFE) {
          unsigned int v36 = -2;
        }
        else {
          unsigned int v36 = v34 * v35 + 4 * v30;
        }
        unsigned int v37 = v33 * v35 + 4 * v29;
        double v38 = v248;
        if (v248 < v249)
        {
          *unint64_t v248 = (double)v37;
          v38[1] = (double)v36;
          unint64_t v39 = v38 + 2;
          goto LABEL_51;
        }
        double v40 = v247;
        uint64_t v41 = ((char *)v248 - v247) >> 4;
        unint64_t v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 60) {
          sub_2E00();
        }
        uint64_t v43 = (char *)v249 - v247;
        if (((char *)v249 - v247) >> 3 > v42) {
          unint64_t v42 = v43 >> 3;
        }
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v42;
        }
        if (v44 >> 60) {
LABEL_313:
        }
          sub_188D718();
        double v45 = (char *)operator new(16 * v44);
        uint64_t v46 = (double *)&v45[16 * v41];
        *uint64_t v46 = (double)v37;
        v46[1] = (double)v36;
        if (v38 == (double *)v40)
        {
          unint64_t v39 = v46 + 2;
          uint64_t v247 = &v45[16 * v41];
          unint64_t v248 = v46 + 2;
          long long v249 = (double *)&v45[16 * v44];
          if (v40) {
            goto LABEL_50;
          }
        }
        else
        {
          double v47 = &v45[16 * v41];
          do
          {
            uint64_t v48 = v47 - 16;
            *((_OWORD *)v47 - 1) = *((_OWORD *)v38 - 1);
            v38 -= 2;
            v47 -= 16;
          }
          while (v38 != (double *)v40);
          unint64_t v39 = v46 + 2;
          uint64_t v247 = v48;
          unint64_t v248 = v46 + 2;
          long long v249 = (double *)&v45[16 * v44];
          if (v40) {
LABEL_50:
          }
            operator delete(v40);
        }
LABEL_51:
        unint64_t v248 = v39;
        unint64_t v49 = v245;
        if (v245 >= v246)
        {
          double v51 = v244;
          uint64_t v52 = v245 - v244;
          unint64_t v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 61) {
            sub_2E00();
          }
          uint64_t v54 = (char *)v246 - (char *)v244;
          if (((char *)v246 - (char *)v244) >> 2 > v53) {
            unint64_t v53 = v54 >> 2;
          }
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v55 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v55 = v53;
          }
          if (v55)
          {
            if (v55 >> 61) {
              goto LABEL_313;
            }
            unint64_t v56 = operator new(8 * v55);
            uint64_t v57 = (unint64_t *)&v56[8 * v52];
            *uint64_t v57 = v223;
            uint64_t v50 = (uint64_t)(v57 + 1);
            if (v49 == v51) {
              goto LABEL_70;
            }
LABEL_64:
            unint64_t v58 = (char *)(v49 - 1) - (char *)v51;
            if (v58 < 0x58) {
              goto LABEL_318;
            }
            if ((unint64_t)((char *)v51 - v56) < 0x20) {
              goto LABEL_318;
            }
            uint64_t v59 = (v58 >> 3) + 1;
            uint64_t v60 = 8 * (v59 & 0x3FFFFFFFFFFFFFFCLL);
            uint64_t v61 = &v49[v60 / 0xFFFFFFFFFFFFFFF8];
            uint64_t v57 = (unint64_t *)((char *)v57 - v60);
            uint64_t v62 = &v56[8 * v52 - 16];
            unint64_t v63 = v49 - 2;
            uint64_t v64 = v59 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v65 = *(_OWORD *)v63;
              *(v62 - 1) = *((_OWORD *)v63 - 1);
              *uint64_t v62 = v65;
              v62 -= 2;
              v63 -= 4;
              v64 -= 4;
            }
            while (v64);
            unint64_t v49 = v61;
            if (v59 != (v59 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_318:
              do
              {
                unint64_t v66 = *--v49;
                *--uint64_t v57 = v66;
              }
              while (v49 != v51);
            }
          }
          else
          {
            unint64_t v56 = 0;
            uint64_t v57 = (unint64_t *)(8 * v52);
            *(void *)(8 * v52) = v223;
            uint64_t v50 = 8 * v52 + 8;
            if (v49 != v51) {
              goto LABEL_64;
            }
          }
LABEL_70:
          uint64_t v244 = v57;
          long long v245 = (unint64_t *)v50;
          char v246 = (unint64_t *)&v56[8 * v55];
          if (v51) {
            operator delete(v51);
          }
          goto LABEL_72;
        }
        *long long v245 = v223;
        uint64_t v50 = (uint64_t)(v49 + 1);
LABEL_72:
        long long v245 = (unint64_t *)v50;
        uint64_t v67 = v233;
        if ((_BYTE)v234)
        {
          unsigned int v17 = --v233;
          uint64_t v27 = (unsigned __int16 *)v228;
          if ((v67 - 1) >= *(_DWORD *)v228)
          {
            uint64_t v70 = *(void *)v226[1];
            uint64_t v80 = *((void *)v226[1] + 1) - *(void *)v226[1];
            unsigned int v73 = --v232;
            if (v232 < (unint64_t)(v80 >> 3)) {
              goto LABEL_92;
            }
            goto LABEL_30;
          }
          uint64_t v68 = (unsigned __int16 *)((char *)v228 + 4 * v67 + 4);
          unsigned int v69 = (unsigned __int16 *)((char *)v228 + 4 * v17 + 4);
          if (*v68 != *v69 || v68[1] != v69[1]) {
            goto LABEL_30;
          }
          uint64_t v70 = *(void *)v226[1];
          uint64_t v71 = *((void *)v226[1] + 1) - *(void *)v226[1];
          if (*(_DWORD *)v228 == 2 && v71 == 8) {
            goto LABEL_30;
          }
          unsigned int v17 = v67 - 2;
          unsigned int v73 = --v232;
          unsigned int v233 = v17;
          if (v232 >= (unint64_t)(v71 >> 3)) {
            goto LABEL_30;
          }
LABEL_92:
          while (2)
          {
            unint64_t v81 = *(void *)(v70 + 8 * v73);
            unsigned int v230 = v81;
            unint64_t v82 = v226[0];
            int v250 = 1;
            v251[0] = v81;
            uint64_t v224 = &v250;
            uint64_t v225 = v251;
            unint64_t v83 = *((void *)v226[0] + 482) + 1;
            *((void *)v226[0] + 482) = v83;
            if (*(void *)v82)
            {
              double v84 = (char *)(v82 + 4);
              if (v82[28] == v81)
              {
                unsigned int v85 = 4;
                goto LABEL_101;
              }
              if (v82[34] == v81)
              {
                unsigned int v85 = 5;
                goto LABEL_101;
              }
              if (v82[40] == v81)
              {
                unsigned int v85 = 6;
                goto LABEL_101;
              }
              if (v82[46] == v81)
              {
                unsigned int v85 = 7;
LABEL_101:
                ++*((void *)v82 + 483);
                double v86 = &v84[24 * v85];
                *((void *)v86 + 1) = v83;
                double v87 = (unsigned int *)*((void *)v86 + 2);
                if (v87)
                {
LABEL_102:
                  double v88 = (int *)((char *)v87 + *v87);
                  double v89 = (unsigned __int16 *)((char *)v88 - *v88);
                  if (*v89 < 7u)
                  {
LABEL_119:
                    int v99 = 0;
                    goto LABEL_120;
                  }
LABEL_117:
                  uint64_t v98 = v89[3];
                  if (!v98) {
                    goto LABEL_119;
                  }
                  int v99 = *(int *)((char *)v88 + v98);
LABEL_120:
                  int v231 = v99;
                  BOOL v100 = v226[0];
                  unsigned int v101 = v230;
                  int v250 = 1;
                  v251[0] = v230;
                  uint64_t v224 = &v250;
                  uint64_t v225 = v251;
                  unint64_t v102 = *((void *)v226[0] + 482) + 1;
                  *((void *)v226[0] + 482) = v102;
                  if (*(void *)v100)
                  {
                    int v103 = (char *)(v100 + 4);
                    if (v100[28] == v101)
                    {
                      unsigned int v104 = 4;
                      goto LABEL_129;
                    }
                    if (v100[34] == v101)
                    {
                      unsigned int v104 = 5;
                      goto LABEL_129;
                    }
                    if (v100[40] == v101)
                    {
                      unsigned int v104 = 6;
                      goto LABEL_129;
                    }
                    if (v100[46] == v101)
                    {
                      unsigned int v104 = 7;
LABEL_129:
                      ++*((void *)v100 + 483);
                      double v105 = &v103[24 * v104];
                      *((void *)v105 + 1) = v102;
                      uint64_t v106 = (unsigned int *)*((void *)v105 + 2);
                      if (v106)
                      {
LABEL_130:
                        uint64_t v107 = (int *)((char *)v106 + *v106);
                        uint64_t v108 = (unsigned __int16 *)((char *)v107 - *v107);
                        if (*v108 < 5u)
                        {
LABEL_147:
                          unint64_t v118 = 0;
                          goto LABEL_148;
                        }
LABEL_145:
                        uint64_t v117 = v108[2];
                        if (!v117) {
                          goto LABEL_147;
                        }
                        unint64_t v118 = (char *)v107 + v117 + *(unsigned int *)((char *)v107 + v117);
LABEL_148:
                        unint64_t v119 = &v118[4 * HIDWORD(v81) + 4 + *(unsigned int *)&v118[4 * HIDWORD(v81) + 4]];
                        uint64_t v227 = v119;
                        unint64_t v120 = &v119[-*(int *)v119];
                        unsigned int v121 = *(unsigned __int16 *)v120;
                        if (v121 <= 6)
                        {
                          uint64_t v27 = 0;
                          unint64_t v123 = 0;
                          uint64_t v228 = 0;
                        }
                        else
                        {
                          uint64_t v27 = (unsigned __int16 *)*((unsigned __int16 *)v120 + 3);
                          if (*((_WORD *)v120 + 3)) {
                            uint64_t v27 = (unsigned __int16 *)((char *)v27
                          }
                                                     + (void)v119
                                                     + *(unsigned int *)((char *)v27 + (void)v119));
                          uint64_t v228 = v27;
                          if (v121 >= 0xB && (uint64_t v122 = *((unsigned __int16 *)v120 + 5)) != 0) {
                            unint64_t v123 = &v119[v122 + *(unsigned int *)&v119[v122]];
                          }
                          else {
                            unint64_t v123 = 0;
                          }
                        }
                        int v229 = v123;
                        int v124 = *(_DWORD *)v27;
                        unsigned int v17 = *(_DWORD *)v27 - 2;
                        unsigned int v233 = v17;
                        uint64_t v125 = &v27[2 * (v124 - 1) + 2];
                        int v126 = &v27[2 * v17 + 2];
                        if (*v125 != *v126) {
                          goto LABEL_30;
                        }
                        if (v125[1] != v126[1]) {
                          goto LABEL_30;
                        }
                        unsigned int v17 = v124 - 3;
                        unsigned int v73 = --v232;
                        unsigned int v233 = v17;
                        uint64_t v70 = *(void *)v226[1];
                        if (v232 >= (unint64_t)((uint64_t)(*((void *)v226[1] + 1) - *(void *)v226[1]) >> 3)) {
                          goto LABEL_30;
                        }
                        continue;
                      }
                    }
                    else
                    {
                      unint64_t v109 = *((void *)v100 + 21);
                      unint64_t v110 = *((void *)v100 + 18);
                      unint64_t v111 = *((void *)v100 + 15);
                      unint64_t v112 = *((void *)v100 + 24);
                      uint64_t v106 = (unsigned int *)sub_2AB884(*(void *)v100, 1, v101, 1);
                      if (v111 >= v102) {
                        unint64_t v113 = v102;
                      }
                      else {
                        unint64_t v113 = v111;
                      }
                      BOOL v114 = v110 >= v113;
                      if (v110 < v113) {
                        unint64_t v113 = v110;
                      }
                      unsigned int v115 = 4 * (v111 < v102);
                      if (!v114) {
                        unsigned int v115 = 5;
                      }
                      if (v109 < v113)
                      {
                        unsigned int v115 = 6;
                        unint64_t v113 = v109;
                      }
                      if (v112 < v113) {
                        unsigned int v115 = 7;
                      }
                      uint64_t v116 = &v103[24 * v115];
                      *(_DWORD *)uint64_t v116 = v251[0];
                      *((void *)v116 + 1) = *((void *)v100 + 482);
                      *((void *)v116 + 2) = v106;
                      if (v106) {
                        goto LABEL_130;
                      }
                    }
                  }
                  sub_296654((int **)&v224);
                  uint64_t v107 = 0;
                  uint64_t v108 = (_WORD *)(&loc_1120530 + 1);
                  if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
                    goto LABEL_147;
                  }
                  goto LABEL_145;
                }
              }
              else
              {
                unint64_t v90 = *((void *)v82 + 21);
                unint64_t v91 = *((void *)v82 + 18);
                unint64_t v92 = *((void *)v82 + 15);
                unint64_t v93 = *((void *)v82 + 24);
                double v87 = (unsigned int *)sub_2AB884(*(void *)v82, 1, v81, 1);
                if (v92 >= v83) {
                  unint64_t v94 = v83;
                }
                else {
                  unint64_t v94 = v92;
                }
                BOOL v95 = v91 >= v94;
                if (v91 < v94) {
                  unint64_t v94 = v91;
                }
                unsigned int v96 = 4 * (v92 < v83);
                if (!v95) {
                  unsigned int v96 = 5;
                }
                if (v90 < v94)
                {
                  unsigned int v96 = 6;
                  unint64_t v94 = v90;
                }
                if (v93 < v94) {
                  unsigned int v96 = 7;
                }
                double v97 = &v84[24 * v96];
                *(_DWORD *)double v97 = v251[0];
                *((void *)v97 + 1) = *((void *)v82 + 482);
                *((void *)v97 + 2) = v87;
                if (v87) {
                  goto LABEL_102;
                }
              }
            }
            break;
          }
          sub_296654((int **)&v224);
          double v88 = 0;
          double v89 = (_WORD *)(&loc_1120530 + 1);
          if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
            goto LABEL_119;
          }
          goto LABEL_117;
        }
        unsigned int v17 = ++v233;
        uint64_t v27 = (unsigned __int16 *)v228;
        if ((v67 + 1) >= *(_DWORD *)v228)
        {
          uint64_t v76 = *(void *)v226[1];
          uint64_t v127 = *((void *)v226[1] + 1) - *(void *)v226[1];
          unsigned int v79 = ++v232;
          if (v232 < (unint64_t)(v127 >> 3)) {
            goto LABEL_161;
          }
LABEL_30:
          if (v232 != v16) {
            continue;
          }
          goto LABEL_31;
        }
        unint64_t v74 = (unsigned __int16 *)((char *)v228 + 4 * v67 + 4);
        double v75 = (unsigned __int16 *)((char *)v228 + 4 * v17 + 4);
        if (*v74 != *v75 || v74[1] != v75[1]) {
          goto LABEL_30;
        }
        uint64_t v76 = *(void *)v226[1];
        uint64_t v77 = *((void *)v226[1] + 1) - *(void *)v226[1];
        if (*(_DWORD *)v228 == 2 && v77 == 8) {
          goto LABEL_30;
        }
        unsigned int v17 = v67 + 2;
        unsigned int v79 = ++v232;
        unsigned int v233 = v17;
        if (v232 >= (unint64_t)(v77 >> 3)) {
          goto LABEL_30;
        }
        while (1)
        {
LABEL_161:
          unint64_t v128 = *(void *)(v76 + 8 * v79);
          unsigned int v230 = v128;
          uint64_t v129 = v226[0];
          int v250 = 1;
          v251[0] = v128;
          uint64_t v224 = &v250;
          uint64_t v225 = v251;
          unint64_t v130 = *((void *)v226[0] + 482) + 1;
          *((void *)v226[0] + 482) = v130;
          if (!*(void *)v129)
          {
LABEL_185:
            sub_296654((int **)&v224);
            uint64_t v135 = 0;
            uint64_t v136 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 7u) {
              goto LABEL_188;
            }
            goto LABEL_186;
          }
          unint64_t v131 = (char *)(v129 + 4);
          if (v129[28] == v128)
          {
            unsigned int v132 = 4;
            goto LABEL_170;
          }
          if (v129[34] == v128)
          {
            unsigned int v132 = 5;
            goto LABEL_170;
          }
          if (v129[40] == v128)
          {
            unsigned int v132 = 6;
            goto LABEL_170;
          }
          if (v129[46] == v128)
          {
            unsigned int v132 = 7;
LABEL_170:
            ++*((void *)v129 + 483);
            unint64_t v133 = &v131[24 * v132];
            *((void *)v133 + 1) = v130;
            unsigned int v134 = (unsigned int *)*((void *)v133 + 2);
            if (!v134) {
              goto LABEL_185;
            }
            goto LABEL_171;
          }
          unint64_t v137 = *((void *)v129 + 21);
          unint64_t v138 = *((void *)v129 + 18);
          unint64_t v139 = *((void *)v129 + 15);
          unint64_t v140 = *((void *)v129 + 24);
          unsigned int v134 = (unsigned int *)sub_2AB884(*(void *)v129, 1, v128, 1);
          if (v139 >= v130) {
            unint64_t v141 = v130;
          }
          else {
            unint64_t v141 = v139;
          }
          BOOL v142 = v138 >= v141;
          if (v138 < v141) {
            unint64_t v141 = v138;
          }
          unsigned int v143 = 4 * (v139 < v130);
          if (!v142) {
            unsigned int v143 = 5;
          }
          if (v137 < v141)
          {
            unsigned int v143 = 6;
            unint64_t v141 = v137;
          }
          if (v140 < v141) {
            unsigned int v143 = 7;
          }
          uint64_t v144 = &v131[24 * v143];
          *(_DWORD *)uint64_t v144 = v251[0];
          *((void *)v144 + 1) = *((void *)v129 + 482);
          *((void *)v144 + 2) = v134;
          if (!v134) {
            goto LABEL_185;
          }
LABEL_171:
          uint64_t v135 = (int *)((char *)v134 + *v134);
          uint64_t v136 = (unsigned __int16 *)((char *)v135 - *v135);
          if (*v136 < 7u) {
            goto LABEL_188;
          }
LABEL_186:
          uint64_t v145 = v136[3];
          if (v145)
          {
            int v146 = *(int *)((char *)v135 + v145);
            goto LABEL_189;
          }
LABEL_188:
          int v146 = 0;
LABEL_189:
          int v231 = v146;
          unsigned int v147 = v226[0];
          unsigned int v148 = v230;
          int v250 = 1;
          v251[0] = v230;
          uint64_t v224 = &v250;
          uint64_t v225 = v251;
          unint64_t v149 = *((void *)v226[0] + 482) + 1;
          *((void *)v226[0] + 482) = v149;
          if (!*(void *)v147) {
            goto LABEL_213;
          }
          uint64_t v150 = (char *)(v147 + 4);
          if (v147[28] == v148)
          {
            unsigned int v151 = 4;
            goto LABEL_198;
          }
          if (v147[34] == v148)
          {
            unsigned int v151 = 5;
            goto LABEL_198;
          }
          if (v147[40] == v148)
          {
            unsigned int v151 = 6;
            goto LABEL_198;
          }
          if (v147[46] == v148)
          {
            unsigned int v151 = 7;
LABEL_198:
            ++*((void *)v147 + 483);
            uint64_t v152 = &v150[24 * v151];
            *((void *)v152 + 1) = v149;
            int v153 = (unsigned int *)*((void *)v152 + 2);
            if (!v153) {
              goto LABEL_213;
            }
            goto LABEL_199;
          }
          unint64_t v156 = *((void *)v147 + 21);
          unint64_t v157 = *((void *)v147 + 18);
          unint64_t v158 = *((void *)v147 + 15);
          unint64_t v159 = *((void *)v147 + 24);
          int v153 = (unsigned int *)sub_2AB884(*(void *)v147, 1, v148, 1);
          if (v158 >= v149) {
            unint64_t v160 = v149;
          }
          else {
            unint64_t v160 = v158;
          }
          BOOL v161 = v157 >= v160;
          if (v157 < v160) {
            unint64_t v160 = v157;
          }
          unsigned int v162 = 4 * (v158 < v149);
          if (!v161) {
            unsigned int v162 = 5;
          }
          if (v156 < v160)
          {
            unsigned int v162 = 6;
            unint64_t v160 = v156;
          }
          if (v159 < v160) {
            unsigned int v162 = 7;
          }
          unsigned int v163 = &v150[24 * v162];
          *(_DWORD *)unsigned int v163 = v251[0];
          *((void *)v163 + 1) = *((void *)v147 + 482);
          *((void *)v163 + 2) = v153;
          if (!v153)
          {
LABEL_213:
            sub_296654((int **)&v224);
            unint64_t v154 = 0;
            unint64_t v155 = (_WORD *)(&loc_1120530 + 1);
            if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
              goto LABEL_216;
            }
            goto LABEL_214;
          }
LABEL_199:
          unint64_t v154 = (int *)((char *)v153 + *v153);
          unint64_t v155 = (unsigned __int16 *)((char *)v154 - *v154);
          if (*v155 < 5u) {
            goto LABEL_216;
          }
LABEL_214:
          uint64_t v164 = v155[2];
          if (v164)
          {
            uint64_t v165 = (char *)v154 + v164 + *(unsigned int *)((char *)v154 + v164);
            goto LABEL_217;
          }
LABEL_216:
          uint64_t v165 = 0;
LABEL_217:
          unsigned int v166 = &v165[4 * HIDWORD(v128) + 4 + *(unsigned int *)&v165[4 * HIDWORD(v128) + 4]];
          uint64_t v227 = v166;
          BOOL v167 = &v166[-*(int *)v166];
          unsigned int v168 = *(unsigned __int16 *)v167;
          if (v168 <= 6)
          {
            uint64_t v27 = 0;
            uint64x2_t v170 = 0;
            uint64_t v228 = 0;
          }
          else
          {
            uint64_t v27 = (unsigned __int16 *)*((unsigned __int16 *)v167 + 3);
            if (*((_WORD *)v167 + 3)) {
              uint64_t v27 = (unsigned __int16 *)((char *)v27 + (void)v166 + *(unsigned int *)((char *)v27 + (void)v166));
            }
            uint64_t v228 = v27;
            if (v168 >= 0xB && (uint64_t v169 = *((unsigned __int16 *)v167 + 5)) != 0) {
              uint64x2_t v170 = &v166[v169 + *(unsigned int *)&v166[v169]];
            }
            else {
              uint64x2_t v170 = 0;
            }
          }
          int v229 = v170;
          unsigned int v17 = 1;
          unsigned int v233 = 1;
          if (v27[2] != v27[4]) {
            goto LABEL_30;
          }
          if (v27[3] != v27[5]) {
            break;
          }
          unsigned int v17 = 2;
          unsigned int v79 = ++v232;
          unsigned int v233 = 2;
          uint64_t v76 = *(void *)v226[1];
          if (v232 >= (unint64_t)((uint64_t)(*((void *)v226[1] + 1) - *(void *)v226[1]) >> 3)) {
            goto LABEL_30;
          }
        }
        unsigned int v17 = 1;
        if (v232 != v16) {
          continue;
        }
LABEL_31:
        if (v17 == v222) {
          goto LABEL_233;
        }
      }
    }
    unint64_t v19 = *((void *)v239 - 1);
    uint64_t v20 = sub_2964C4(v237, v19, 1);
    double v21 = &v20[*(unsigned __int16 *)&v20[-*(int *)v20 + 4]];
    uint64_t v22 = (uint64_t)&v21[4 * HIDWORD(v19) + *(unsigned int *)v21];
    uint64_t v23 = (int *)(v22 + 4 + *(unsigned int *)(v22 + 4));
    unint64_t v16 = (unint64_t)(v239 - v238) >> 3;
    long long v24 = (unsigned int *)((char *)v23 + *(unsigned __int16 *)((char *)v23 - *v23 + 6));
    unsigned int v17 = v233;
    int v222 = *(unsigned int *)((char *)v24 + *v24);
    if (v232 != v16 || v233 != *(unsigned int *)((char *)v24 + *v24)) {
      goto LABEL_29;
    }
LABEL_233:
    uint64_t v171 = sub_E9DA58(v221, v223);
    uint64_t v172 = nullsub_1(v171);
    long double v173 = *(void **)v172;
    int64x2_t v174 = *(void **)(v172 + 8);
    if (*(void **)v172 != v174)
    {
      unint64_t v175 = v242;
      do
      {
        v176.i64[0] = *v173;
        v176.i64[1] = HIDWORD(*v173);
        *(float64x2_t *)uint64_t v226 = vcvtq_f64_u64(v176);
        unint64_t v175 = sub_478E8(&v241, v175, v226) + 16;
        long double v173 = (void *)((char *)v173 + 12);
      }
      while (v173 != v174);
    }
    unint64_t v177 = (void *)sub_E9DA58(v221, v223);
    sub_E9C270(v177);
    if (v238)
    {
      unint64_t v239 = v238;
      operator delete(v238);
    }
    uint64_t v12 = v223 + 1;
    a1 = v218;
  }
  while (v223 + 1 != v220);
  unint64_t v178 = (double *)v242;
  unint64_t v5 = v217;
  if (v241 != v242)
  {
    long double v179 = (double *)(v241 - 16);
    while (v179 + 4 != (double *)v242)
    {
      double v180 = v179[2];
      v179 += 2;
      if (v180 == v179[2] && v179[1] == v179[3])
      {
        for (uint64_t i = v179 + 4; i != v178; i += 2)
        {
          if (*v179 != *i || v179[1] != i[1])
          {
            *((_OWORD *)v179 + 1) = *(_OWORD *)i;
            v179 += 2;
          }
        }
        if (v179 + 2 != v178) {
          unint64_t v242 = (char *)(v179 + 2);
        }
        break;
      }
    }
  }
LABEL_256:
  sub_3BF0C((uint64_t)v226, &v247, &v241, 0);
  sub_3C270((uint64_t *)v226);
  long double v185 = (char *)v234;
  uint64_t v184 = v235;
  if (v234 != v235)
  {
    unint64_t v186 = *v244;
    do
    {
      if (v185[16])
      {
        unint64_t v187 = *(void *)sub_6546E8(&v244, *(void *)v185 - 1);
        if (v187 != v186)
        {
          double v188 = sub_3C1B8(v226, (uint64_t)v185);
          LODWORD(v190) = v189;
          if (v189 >= 0xFFFFFFFE) {
            uint64_t v190 = 4294967294;
          }
          else {
            uint64_t v190 = v190;
          }
          unint64_t v237 = v188 | (unint64_t)(v190 << 32);
          LODWORD(v238) = 0x7FFFFFFF;
          unint64_t v191 = (char *)sub_E9DA58(v221, v186);
          sub_E9BE78(v191, (unsigned int *)&v237, 0);
          unint64_t v192 = (char *)sub_E9DA58(v221, v187);
          sub_E9BE78(v192, (unsigned int *)&v237, 0);
          goto LABEL_259;
        }
      }
      else
      {
        uint64_t v193 = (char *)sub_E9DA58(v221, v186);
        double v194 = sub_3C1B8(v226, (uint64_t)v185);
        LODWORD(v196) = v195;
        if (v195 >= 0xFFFFFFFE) {
          uint64_t v196 = 4294967294;
        }
        else {
          uint64_t v196 = v196;
        }
        unint64_t v237 = v194 | (unint64_t)(v196 << 32);
        LODWORD(v238) = 0x7FFFFFFF;
        sub_E9BE78(v193, (unsigned int *)&v237, 0);
      }
      unint64_t v187 = v186;
LABEL_259:
      v185 += 24;
      unint64_t v186 = v187;
    }
    while (v185 != v184);
  }
  int v197 = v219;
  if (v5 < a4)
  {
    do
    {
      uint64_t v198 = *v218;
      uint64_t v199 = (unsigned int *)sub_470B40(v197, v5);
      sub_2954EC(v198, (((unint64_t)(v199[1] & 0x20000000) << 19) | ((unint64_t)(unsigned __int16)v199[1] << 32) | *v199) ^ 0x1000000000000, (uint64_t)&v237);
      uint64_t v200 = sub_E9DA58(v221, v5);
      uint64_t v201 = nullsub_1(v200);
      int v202 = (unsigned int **)v201;
      float64x2_t v204 = *(char **)v201;
      float64x2_t v203 = *(char **)(v201 + 8);
      if (*(char **)v201 == v203)
      {
        float64x2_t v203 = *(char **)v201;
      }
      else
      {
        uint64_t v205 = *(char **)v201;
        do
        {
          int v206 = v205 + 12;
          if (v205 + 12 == v203) {
            goto LABEL_307;
          }
          int v207 = *(_DWORD *)v205;
          int v208 = *((_DWORD *)v205 + 1);
          int v210 = *((_DWORD *)v205 + 3);
          int v209 = *((_DWORD *)v205 + 4);
          BOOL v211 = v207 == v210 && v208 == v209;
          uint64_t v205 = v206;
        }
        while (!v211);
        long double v212 = v206 + 12;
        long double v213 = v206 - 12;
        if (v212 == v203)
        {
          int64_t v214 = v213 + 12;
          if (v213 + 12 == v203) {
            goto LABEL_307;
          }
LABEL_306:
          float64x2_t v203 = v214;
          *(void *)(v201 + 8) = v214;
          int v197 = v219;
          goto LABEL_307;
        }
        do
        {
          if (*(_DWORD *)v213 != *(_DWORD *)v212 || *((_DWORD *)v213 + 1) != *((_DWORD *)v212 + 1))
          {
            int v216 = *((_DWORD *)v212 + 2);
            *(void *)(v213 + 12) = *(void *)v212;
            v213 += 12;
            *((_DWORD *)v213 + 2) = v216;
          }
          v212 += 12;
        }
        while (v212 != v203);
        float64x2_t v204 = *(char **)v201;
        float64x2_t v203 = *(char **)(v201 + 8);
        int64_t v214 = v213 + 12;
        if (v213 + 12 != v203) {
          goto LABEL_306;
        }
      }
LABEL_307:
      if (v203 - v204 == 12) {
        sub_30C0C((char **)v201, (uint64_t *)(v203 - 12));
      }
      sub_2E4B5C((uint64_t)&v237, &v224);
      sub_EA512C((uint64_t)v218, &v224, v202);
      if (v224)
      {
        uint64_t v225 = v224;
        operator delete(v224);
      }
      if (v238)
      {
        unint64_t v239 = v238;
        operator delete(v238);
      }
      ++v5;
    }
    while (v5 != v220);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v234)
  {
    long double v235 = (char *)v234;
    operator delete(v234);
  }
  if (v228)
  {
    int v229 = v228;
    operator delete(v228);
  }
  if (v226[0])
  {
    v226[1] = v226[0];
    operator delete(v226[0]);
  }
  if (v241)
  {
    unint64_t v242 = v241;
    operator delete(v241);
  }
  if (v244)
  {
    long long v245 = v244;
    operator delete(v244);
  }
  if (v247)
  {
    unint64_t v248 = (double *)v247;
    operator delete(v247);
  }
}

void sub_EA6A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  sub_3BF98((uint64_t)&a21);
  uint64_t v23 = *(void **)(v21 - 168);
  if (v23)
  {
    *(void *)(v21 - 160) = v23;
    operator delete(v23);
    long long v24 = *(void **)(v21 - 144);
    if (!v24)
    {
LABEL_3:
      unint64_t v25 = *(void **)(v21 - 120);
      if (!v25) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    long long v24 = *(void **)(v21 - 144);
    if (!v24) {
      goto LABEL_3;
    }
  }
  *(void *)(v21 - 136) = v24;
  operator delete(v24);
  unint64_t v25 = *(void **)(v21 - 120);
  if (!v25) {
LABEL_4:
  }
    _Unwind_Resume(a1);
LABEL_7:
  *(void *)(v21 - 112) = v25;
  operator delete(v25);
  _Unwind_Resume(a1);
}

uint64_t sub_EA6B68@<X0>(int a1@<W1>, unsigned char *a2@<X8>)
{
  if (a1)
  {
    char v2 = a1;
    sub_6BAC((uint64_t)v4);
    char v6 = 40;
    sub_188FC78(v4, (uint64_t)&v6, 1);
    if (v2) {
      sub_188FC78(v4, (uint64_t)" Shifted", 8);
    }
    if ((v2 & 2) != 0) {
      sub_188FC78(v4, (uint64_t)" Bezier Curve", 13);
    }
    char v6 = 41;
    sub_188FC78(v4, (uint64_t)&v6, 1);
    std::stringbuf::str();
    if (v5 < 0) {
      operator delete((void *)v4[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return std::ios::~ios();
  }
  else
  {
    a2[23] = 0;
    *a2 = 0;
  }
  return result;
}

void sub_EA6D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_EA6D24(uint64_t a1, void *a2)
{
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9260;
  strcpy((char *)__p[0], "print_geo_json_segment_geometries");
  unint64_t v4 = sub_58070(a2, (uint64_t)__p);
  if (v4 && (int v5 = *((_DWORD *)v4 + 12), (v5 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 32) = v5 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_6;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a1 + 32) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_6:
    }
      operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20E1380;
  strcpy((char *)__p[0], "max_route_line_to_center_line_distance_ratio");
  char v6 = sub_58070(a2, (uint64_t)__p);
  int v7 = (void *)a1;
  if (v6)
  {
    int v7 = v6 + 5;
    if (*((_DWORD *)v6 + 12) != 1) {
      int v7 = (void *)a1;
    }
  }
  *(void *)a1 = *v7;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93B0;
  strcpy((char *)__p[0], "max_route_line_search_distance_beyond_segment");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 8));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "max_adjacent_geometry_points_gap");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 16));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "min_adjacent_geometry_points_gap");
  sub_5C8A4(a2, (uint64_t)__p, (uint64_t *)(a1 + 24));
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  strcpy((char *)__p, "enable_post_processing");
  HIBYTE(__p[2]) = 22;
  int v8 = sub_58070(a2, (uint64_t)__p);
  if (v8 && (int v9 = *((_DWORD *)v8 + 12), (v9 & 0xFFFFFFFE) == 4))
  {
    *(unsigned char *)(a1 + 33) = v9 == 4;
    if (SHIBYTE(__p[2]) < 0) {
      goto LABEL_24;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 33) = *(unsigned char *)(a1 + 33) != 0;
    if (SHIBYTE(__p[2]) < 0) {
LABEL_24:
    }
      operator delete(__p[0]);
  }
}

void sub_EA6FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EA6FEC(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      sub_188D718();
    }
    int v7 = (char *)operator new(40 * v6);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v18 = (uint64_t)&v7[40 * v3];
  unint64_t v19 = &v7[40 * v6];
  sub_E9BD88(v18, a2);
  uint64_t v8 = v18 + 40;
  uint64_t v10 = (char *)*a1;
  int v9 = (char *)a1[1];
  if (v9 == (char *)*a1)
  {
    *a1 = v18;
    a1[1] = v8;
    a1[2] = (uint64_t)v19;
  }
  else
  {
    uint64_t v11 = 0;
    do
    {
      sub_E9BD88(v18 + v11 - 40, (uint64_t)&v9[v11 - 40]);
      v11 -= 40;
    }
    while (&v9[v11] != v10);
    uint64_t v12 = (char *)*a1;
    int v9 = (char *)a1[1];
    uint64_t v13 = v18 + v11;
    uint64_t v8 = v18 + 40;
    *a1 = v13;
    a1[1] = v18 + 40;
    a1[2] = (uint64_t)v19;
    if (v9 != v12)
    {
      int v14 = v9;
      do
      {
        unint64_t v16 = (void *)*((void *)v14 - 5);
        v14 -= 40;
        int v15 = v16;
        if (v16)
        {
          *((void *)v9 - 4) = v15;
          operator delete(v15);
        }
        int v9 = v14;
      }
      while (v14 != v12);
      int v9 = v12;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  return v8;
}

void sub_EA7188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_481FD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_EA719C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  for (; v2; v2 += 40)
  {
    int v5 = *(void **)(v3 + v2);
    if (v5)
    {
      *(void *)(v3 + v2 + 8) = v5;
      operator delete(v5);
    }
  }
  sub_481FD4((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_EA71D4()
{
  byte_25FC54F = 1;
  word_25FC538 = 65;
  byte_25FC567 = 1;
  word_25FC550 = 65;
  char v4 = 7;
  strcpy((char *)v3, "UNKNOWN");
  int v5 = 0;
  char v7 = 14;
  strcpy((char *)v6, "ROUTES_THROUGH");
  int v8 = 1;
  char v10 = 9;
  strcpy((char *)__p, "ROUTES_TO");
  int v11 = 3;
  char v13 = 11;
  strcpy((char *)v12, "ROUTES_FROM");
  int v14 = 2;
  xmmword_25FC598 = 0u;
  *(_OWORD *)&qword_25FC5A8 = 0u;
  dword_25FC5B8 = 1065353216;
  sub_3A6EF0((uint64_t)&xmmword_25FC598, (uint64_t)v3, (uint64_t)v3);
  sub_3A6EF0((uint64_t)&xmmword_25FC598, (uint64_t)v6, (uint64_t)v6);
  sub_3A6EF0((uint64_t)&xmmword_25FC598, (uint64_t)__p, (uint64_t)__p);
  sub_3A6EF0((uint64_t)&xmmword_25FC598, (uint64_t)v12, (uint64_t)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if ((v10 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(v6[0]);
      if ((v4 & 0x80000000) == 0) {
        goto LABEL_5;
      }
LABEL_9:
      operator delete(v3[0]);
      goto LABEL_5;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p[0]);
  if (v7 < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (v4 < 0) {
    goto LABEL_9;
  }
LABEL_5:
  qword_25FC570 = 0;
  qword_25FC578 = 0;
  qword_25FC568 = 0;
  uint64_t v0 = operator new(9uLL);
  *(void *)uint64_t v0 = 0x4020C000103050DLL;
  v0[8] = 6;
  qword_25FC568 = (uint64_t)v0;
  qword_25FC570 = (uint64_t)(v0 + 9);
  qword_25FC578 = (uint64_t)(v0 + 9);
  qword_25FC580 = 0;
  qword_25FC588 = 0;
  unk_25FC590 = 0;
  uint64_t v1 = (char *)operator new(9uLL);
  qword_25FC588 = (uint64_t)(v1 + 9);
  unk_25FC590 = v1 + 9;
  double result = 1.10224369e-279;
  *(void *)uint64_t v1 = 0x604020C00010305;
  v1[8] = 13;
  qword_25FC580 = (uint64_t)v1;
  return result;
}

void sub_EA7410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (qword_25FC5A8) {
    sub_20B1230((void **)qword_25FC5A8);
  }
  unsigned int v37 = (void *)xmmword_25FC598;
  *(void *)&xmmword_25FC598 = 0;
  if (v37)
  {
    operator delete(v37);
    if ((a36 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a29 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else if ((a36 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  if ((a29 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a22 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a24);
  if ((a22 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a15 & 0x80000000) == 0) {
LABEL_14:
    }
      _Unwind_Resume(exception_object);
LABEL_13:
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  operator delete(a17);
  if ((a15 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

BOOL sub_EA74B0(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)sub_40EFE8(a1);
  uint64_t v3 = sub_52058(a1);
  if (v2 == (uint64_t *)v3) {
    return 1;
  }
  char v4 = (uint64_t *)v3;
  do
  {
    int v5 = sub_EA8190(v2);
    if (!v5) {
      break;
    }
    v2 += 6;
  }
  while (v2 != v4);
  if (v5) {
    return 1;
  }
  BOOL result = sub_723EC(1u);
  if (result)
  {
    sub_6BAC((uint64_t)v9);
    sub_188FC78(v9, (uint64_t)"Found inconsistent Path(s) in the PathSet.", 42);
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 1u);
    if (v8 < 0) {
      operator delete(__p);
    }
    if (v10 < 0) {
      operator delete((void *)v9[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  return result;
}

void sub_EA767C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_EA76C8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  do
  {
    BOOL result = sub_EA74B0(v1);
    if (!result) {
      break;
    }
    v1 += 24;
  }
  while (v1 != v2);
  return result;
}

void sub_EA7718()
{
  unk_25FC5D7 = 16641;
  word_25FC5C0 = 65;
  byte_25FC5EF = 1;
  byte_25FC5D9 = 0;
}

std::string *sub_EA7740(std::string *a1, uint64_t *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  sub_444C18(a1, *a2, a2[1], 0xCBEEA4E1A08AD8F3 * ((a2[1] - *a2) >> 3));
  sub_1081268((long long **)a2, a1 + 1);
  return a1;
}

void sub_EA77A4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20A8534((uint64_t)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EA77C0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_1081268((long long **)a1, (std::string *)(a1 + 24));
  return a1;
}

void sub_EA780C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20B1274((uint64_t)(v1 + 1));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EA782C(uint64_t a1, uint64_t a2)
{
  sub_444D20(__dst, (long long *)a2);
  sub_EA9DBC((char **)a1, (uint64_t)__dst, 1uLL);
  sub_405F44((uint64_t)__dst);
  char v4 = (unsigned char *)(a1 + 24);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v4, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)a2;
    *(void *)(a1 + 40) = *(void *)(a2 + 16);
    *(_OWORD *)char v4 = v5;
  }
  return a1;
}

void sub_EA78DC(_Unwind_Exception *a1)
{
  sub_4323C0(v1);
  _Unwind_Resume(a1);
}

void sub_EA78F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_405F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_EA790C(uint64_t a1, long long *a2)
{
  long long v17 = *a2;
  uint64_t v18 = *((void *)a2 + 2);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v19 = *(long long *)((char *)a2 + 24);
  uint64_t v20 = *((void *)a2 + 5);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  long long v3 = a2[4];
  long long v21 = a2[3];
  long long v22 = v3;
  long long v4 = *(long long *)((char *)a2 + 94);
  long long v5 = a2[7];
  v23[0] = a2[5];
  *(_OWORD *)((char *)v23 + 14) = v4;
  v23[2] = v5;
  uint64_t v24 = *((void *)a2 + 16);
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v25 = *(long long *)((char *)a2 + 136);
  uint64_t v26 = *((void *)a2 + 19);
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  long long v27 = a2[10];
  uint64_t v28 = *((void *)a2 + 22);
  *((void *)a2 + 20) = 0;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  long long v6 = *(long long *)((char *)a2 + 184);
  long long v7 = *(long long *)((char *)a2 + 200);
  uint64_t v31 = *((void *)a2 + 27);
  long long v30 = v7;
  long long v29 = v6;
  long long v32 = a2[14];
  uint64_t v33 = *((void *)a2 + 30);
  *((void *)a2 + 28) = 0;
  *((void *)a2 + 29) = 0;
  long long v34 = *(long long *)((char *)a2 + 248);
  uint64_t v35 = *((void *)a2 + 33);
  *((void *)a2 + 30) = 0;
  *((void *)a2 + 31) = 0;
  *((void *)a2 + 32) = 0;
  *((void *)a2 + 33) = 0;
  long long v36 = a2[17];
  unsigned int v38 = *((_DWORD *)a2 + 74);
  if (v38 <= 1) {
    uint64_t v37 = *((void *)a2 + 36);
  }
  *(void *)&v48[15] = *(void *)((char *)a2 + 463);
  long long v8 = a2[28];
  long long v47 = a2[27];
  *(_OWORD *)uint64_t v48 = v8;
  long long v9 = a2[24];
  long long v43 = a2[23];
  long long v44 = v9;
  long long v10 = a2[26];
  long long v45 = a2[25];
  long long v46 = v10;
  long long v11 = a2[20];
  long long v39 = a2[19];
  long long v40 = v11;
  long long v12 = a2[22];
  long long v41 = a2[21];
  long long v42 = v12;
  sub_EA9DBC((char **)a1, (uint64_t)&v17, 1uLL);
  sub_405F44((uint64_t)&v17);
  char v13 = (unsigned char *)(a1 + 24);
  int v14 = *(char **)a1;
  if (*(char *)(*(void *)a1 + 23) < 0)
  {
    sub_4200(v13, *(void **)v14, *((void *)v14 + 1));
  }
  else
  {
    long long v15 = *(_OWORD *)v14;
    *(void *)(a1 + 40) = *((void *)v14 + 2);
    *(_OWORD *)char v13 = v15;
  }
  return a1;
}

void sub_EA7ADC(_Unwind_Exception *a1)
{
  sub_4323C0(v1);
  _Unwind_Resume(a1);
}

void sub_EA7AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_405F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_EA7B08(char *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_EA7B30(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EA9ED8(a1, (uint64_t)v5);
  sub_EAA218(a1, (uint64_t)__p);
  sub_EAA30C(a2, (uint64_t)v5, (uint64_t)__p, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_EA7BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    int v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

__n128 sub_EA7C00@<Q0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EAA500(a1, (uint64_t)&v11);
  sub_EAA5F4(a1, (uint64_t)&v9);
  *(void *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_20E7D40;
  uint64_t v4 = v11;
  *(void *)(a2 + 24) = v11;
  uint64_t v5 = v12;
  *(_OWORD *)(a2 + 32) = v12;
  uint64_t v11 = 0;
  long long v12 = 0uLL;
  uint64_t v6 = v9;
  *(void *)(a2 + 48) = v9;
  result.n128_u64[0] = v10;
  *(_OWORD *)(a2 + 56) = v10;
  uint64_t v9 = 0;
  long long v10 = 0uLL;
  if (v4 != v5)
  {
    uint64_t v8 = ((int64_t)(result.n128_u64[0] - v6) >> 4) - 1;
    *(void *)(a2 + 16) = v8;
    __n128 result = *(__n128 *)(v6 + 16 * v8);
    *(__n128 *)a2 = result;
  }
  return result;
}

void sub_EA7CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_EA7CCC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EAA6E8(a1, &v14);
  __n128 result = sub_EAA7DC(a1, (unint64_t *)&v12);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v6 = v13;
  unint64_t v5 = v14;
  *(void *)(a2 + 16) = v14;
  uint64_t v7 = v15;
  *(_OWORD *)(a2 + 24) = v15;
  unint64_t v14 = 0;
  long long v15 = 0uLL;
  uint64_t v8 = v12;
  *(_OWORD *)(a2 + 40) = v12;
  *(void *)(a2 + 56) = v6;
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  if (v5 != v7)
  {
    uint64_t v9 = (uint64_t)(v7 - v5) >> 3;
    uint64_t v10 = v9 - 1;
    if (v9 == 1)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      while (*(void *)(v5 + 8 * v11) == *(void *)(v8 + 8 * v11))
      {
        *(void *)(a2 + 8) = ++v11;
        if (v10 == v11)
        {
          uint64_t v11 = v10;
          break;
        }
      }
    }
    *(void *)a2 = *(void *)(v5 + 8 * v11);
  }
  return result;
}

void sub_EA7DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_EA7DBC(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EA7B30(a1, (uint64_t)&v13);
  sub_EAA500(a1, (uint64_t)&v20);
  sub_EAA5F4(a1, (uint64_t)&v18);
  *(void *)uint64_t v8 = 0;
  *(_OWORD *)&v8[8] = xmmword_20E7D40;
  uint64_t v9 = v20;
  uint64_t v4 = v20;
  long long v10 = v21;
  unint64_t v5 = (void *)v21;
  uint64_t v20 = 0;
  long long v21 = 0uLL;
  uint64_t v6 = v18;
  std::string __p = v18;
  uint64_t v7 = v19;
  long long v12 = v19;
  uint64_t v18 = 0;
  long long v19 = 0uLL;
  if (v4 != v5)
  {
    *(void *)&v8[16] = ((v7 - (uint64_t)v6) >> 4) - 1;
    *(_OWORD *)uint64_t v8 = v6[*(void *)&v8[16]];
  }
  sub_EA9A68(a2, &v13);
  sub_EA9A68(a2 + 72, (long long *)v8);
  if (__p)
  {
    *(void *)&long long v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    *(void *)&long long v10 = v9;
    operator delete(v9);
  }
  if (v16)
  {
    long long v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    long long v15 = v14;
    operator delete(v14);
  }
}

void sub_EA7EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  long long v13 = *(void **)(v11 - 40);
  if (v13)
  {
    *(void *)(v11 - 32) = v13;
    operator delete(v13);
    sub_39EB70((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_EA7F18(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EA7CCC(a1, (uint64_t)&v13);
  sub_EAA8D0(a1, (unint64_t *)&v20);
  sub_EAA9C4(a1, (unint64_t *)&v18);
  long long v8 = 0uLL;
  uint64_t v9 = v20;
  uint64_t v4 = v20;
  long long v10 = v21;
  unint64_t v5 = (void *)v21;
  uint64_t v20 = 0;
  long long v21 = 0uLL;
  uint64_t v6 = v18;
  std::string __p = v18;
  uint64_t v7 = v19;
  long long v12 = v19;
  uint64_t v18 = 0;
  long long v19 = 0uLL;
  if (v4 != v5)
  {
    *((void *)&v8 + 1) = ((v7 - (uint64_t)v6) >> 3) - 1;
    *(void *)&long long v8 = v6[*((void *)&v8 + 1)];
  }
  sub_460E84(a2, &v13);
  sub_460E84(a2 + 64, &v8);
  if (__p)
  {
    *(void *)&long long v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    *(void *)&long long v10 = v9;
    operator delete(v9);
  }
  if (v16)
  {
    long long v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    long long v15 = v14;
    operator delete(v14);
  }
}

void sub_EA8024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  long long v12 = *(void **)(v10 - 40);
  if (v12)
  {
    *(void *)(v10 - 32) = v12;
    operator delete(v12);
    sub_2FC938((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_2FC938((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_EA8060(void *a1, uint64_t a2)
{
  return *a1 + 472 * a2;
}

BOOL sub_EA8070(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(void **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    BOOL result = sub_EB1870(v2, v4);
    if (!result) {
      break;
    }
    v2 += 472;
    v4 += 59;
  }
  while (v2 != v3);
  return result;
}

BOOL sub_EA80FC(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (v2 == v3) {
    return 1;
  }
  if (v3 - v2 == 472) {
    return sub_EAE144(v2);
  }
  return 0;
}

std::string *sub_EA8130(std::string *a1)
{
  uint64_t size = a1->__r_.__value_.__l.__size_;
  for (std::string::size_type i = a1->__r_.__value_.__r.__words[0]; size != i; size = sub_405F44(size - 472))
    ;
  a1->__r_.__value_.__l.__size_ = i;

  return std::string::assign(a1 + 1, 0, 0);
}

uint64_t sub_EA8190(uint64_t *a1)
{
  uint64_t v1 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  if ((char *)*a1 == v2) {
    return 1;
  }
  if (v2 - v1 == 472)
  {
    if (sub_EAE144((void *)*a1)) {
      return 1;
    }
    uint64_t v1 = (char *)*a1;
    uint64_t v2 = (char *)a1[1];
  }
  if (v1 == v2) {
    return 1;
  }
  do
  {
    uint64_t result = sub_EAAAB8((uint64_t)&v12, v1);
    LODWORD(v5) = result;
    if (!result) {
      break;
    }
    v1 += 472;
  }
  while (v1 != v2);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  char v11 = 1;
  uint64_t v10 = &v11;
  if (v6 != v7 && v6 + 472 != v7)
  {
    do
    {
      sub_EAAD10((uint64_t)&v10, v6, v6 + 472);
      uint64_t v9 = v6 + 944;
      v6 += 472;
    }
    while (v9 != v7);
    if (v11) {
      return v5;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_EA82B8(uint64_t *a1)
{
  *(void *)&v14[2] = 0;
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2)
  {
    char v7 = 0;
    char v6 = 0;
  }
  else
  {
    char v3 = 0;
    char v4 = 0;
    char v5 = 0;
    char v6 = 0;
    char v7 = 0;
    int16x8_t v8 = 0uLL;
    do
    {
      int16x8_t v13 = v8;
      uint64_t v9 = sub_EAD918(v1);
      v6 |= *(unsigned char *)v9;
      v7 |= *(unsigned char *)(v9 + 2);
      v10.i32[0] = *(_DWORD *)(v9 + 3);
      v11.i64[1] = v13.i64[1];
      *(int8x8_t *)v11.i8 = vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vmovl_u8(v10));
      int16x8_t v8 = v11;
      v5 |= *(unsigned char *)(v9 + 7);
      v4 |= *(unsigned char *)(v9 + 8);
      v3 |= *(unsigned char *)(v9 + 9);
      v1 += 472;
    }
    while (v1 != v2);
    *(_DWORD *)&v14[3] = vmovn_s16(v11).u32[0];
    v14[7] = v5;
  }
  v14[0] = v6;
  v14[1] = 1;
  v14[2] = v7;
  return *(void *)v14;
}

uint64_t sub_EA83B0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v3 = *(_DWORD *)sub_45FE5C(v1) | v3;
    v1 += 472;
  }
  while (v1 != v2);
  return v3;
}

uint64_t sub_EA841C(uint64_t *a1)
{
  return sub_69134(*a1);
}

uint64_t sub_EA8424(uint64_t a1)
{
  return sub_EADAD0(*(void *)(a1 + 8) - 472);
}

unint64_t sub_EA8430(uint64_t *a1)
{
  return sub_EAFECC(*a1);
}

uint64_t sub_EA8438(uint64_t *a1)
{
  return sub_EADD1C(*a1);
}

unint64_t sub_EA8440(void *a1)
{
  return 0xCBEEA4E1A08AD8F3 * ((uint64_t)(a1[1] - *a1) >> 3);
}

uint64_t sub_EA8464(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  if (*(void **)a1 == v2) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v3 = v3 + sub_EB04C4(v1);
    v1 += 59;
  }
  while (v1 != v2);
  return v3;
}

std::string *sub_EA84CC(std::string *a1, uint64_t *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  sub_445528(a1, *a2, a2[1], 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 5));
  sub_10814A8((long long **)a2, a1 + 1);
  return a1;
}

void sub_EA8528(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20A8648((uint64_t)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EA8544(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_10814A8((long long **)a1, (std::string *)(a1 + 24));
  return a1;
}

void sub_EA8590(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20B12D0((uint64_t)(v1 + 1));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EA85B0(uint64_t a1, uint64_t a2)
{
  sub_4456B4(__dst, (long long *)a2);
  sub_EAAF00((char **)a1, (uint64_t)__dst, 1uLL);
  sub_4451C0((uint64_t)__dst);
  char v4 = (unsigned char *)(a1 + 24);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v4, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)a2;
    *(void *)(a1 + 40) = *(void *)(a2 + 16);
    *(_OWORD *)char v4 = v5;
  }
  return a1;
}

void sub_EA8660(_Unwind_Exception *a1)
{
  sub_44106C(v1);
  _Unwind_Resume(a1);
}

void sub_EA8674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4451C0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_EA8690(uint64_t a1, long long *a2)
{
  long long v15 = *a2;
  uint64_t v16 = *((void *)a2 + 2);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v17 = *(long long *)((char *)a2 + 24);
  uint64_t v18 = *((void *)a2 + 5);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *(void *)&v22[14] = *(void *)((char *)a2 + 110);
  long long v3 = a2[6];
  long long v21 = a2[5];
  *(_OWORD *)long long v22 = v3;
  long long v4 = a2[4];
  long long v19 = a2[3];
  long long v20 = v4;
  long long v23 = *(long long *)((char *)a2 + 120);
  uint64_t v24 = *((void *)a2 + 17);
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  long long v25 = a2[9];
  uint64_t v26 = *((void *)a2 + 20);
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 20) = 0;
  long long v27 = *(long long *)((char *)a2 + 168);
  uint64_t v28 = *((void *)a2 + 23);
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  long long v5 = a2[12];
  long long v6 = a2[13];
  uint64_t v31 = *((void *)a2 + 28);
  long long v29 = v5;
  long long v30 = v6;
  long long v32 = *(long long *)((char *)a2 + 232);
  uint64_t v33 = *((void *)a2 + 31);
  *((void *)a2 + 29) = 0;
  *((void *)a2 + 30) = 0;
  long long v34 = a2[16];
  uint64_t v35 = *((void *)a2 + 34);
  *((void *)a2 + 31) = 0;
  *((void *)a2 + 32) = 0;
  *((void *)a2 + 33) = 0;
  *((void *)a2 + 34) = 0;
  long long v36 = *(long long *)((char *)a2 + 280);
  unsigned int v38 = *((_DWORD *)a2 + 76);
  if (v38 <= 1) {
    uint64_t v37 = *((void *)a2 + 37);
  }
  long long v39 = *(long long *)((char *)a2 + 312);
  long long v7 = *(long long *)((char *)a2 + 440);
  long long v46 = *(long long *)((char *)a2 + 424);
  long long v47 = v7;
  v48[0] = *(long long *)((char *)a2 + 456);
  *(void *)((char *)v48 + 15) = *(void *)((char *)a2 + 471);
  long long v8 = *(long long *)((char *)a2 + 376);
  long long v42 = *(long long *)((char *)a2 + 360);
  long long v43 = v8;
  long long v9 = *(long long *)((char *)a2 + 408);
  long long v44 = *(long long *)((char *)a2 + 392);
  long long v45 = v9;
  long long v10 = *(long long *)((char *)a2 + 344);
  long long v40 = *(long long *)((char *)a2 + 328);
  long long v41 = v10;
  sub_EAAF00((char **)a1, (uint64_t)&v15, 1uLL);
  sub_4451C0((uint64_t)&v15);
  int16x8_t v11 = (unsigned char *)(a1 + 24);
  char v12 = *(char **)a1;
  if (*(char *)(*(void *)a1 + 23) < 0)
  {
    sub_4200(v11, *(void **)v12, *((void *)v12 + 1));
  }
  else
  {
    long long v13 = *(_OWORD *)v12;
    *(void *)(a1 + 40) = *((void *)v12 + 2);
    *(_OWORD *)int16x8_t v11 = v13;
  }
  return a1;
}

void sub_EA8870(_Unwind_Exception *a1)
{
  sub_44106C(v1);
  _Unwind_Resume(a1);
}

void sub_EA8884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_4451C0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_EA889C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EAB010(a1, &v14);
  uint64_t result = sub_EAB470(a1, (unint64_t *)&v12);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v6 = v13;
  unint64_t v5 = v14;
  *(void *)(a2 + 16) = v14;
  uint64_t v7 = v15;
  *(_OWORD *)(a2 + 24) = v15;
  unint64_t v14 = 0;
  long long v15 = 0uLL;
  uint64_t v8 = v12;
  *(_OWORD *)(a2 + 40) = v12;
  *(void *)(a2 + 56) = v6;
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  if (v5 != v7)
  {
    uint64_t v9 = (uint64_t)(v7 - v5) >> 3;
    uint64_t v10 = v9 - 1;
    if (v9 == 1)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      while (*(void *)(v5 + 8 * v11) == *(void *)(v8 + 8 * v11))
      {
        *(void *)(a2 + 8) = ++v11;
        if (v10 == v11)
        {
          uint64_t v11 = v10;
          break;
        }
      }
    }
    *(void *)a2 = *(void *)(v5 + 8 * v11);
  }
  return result;
}

void sub_EA8970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_EA898C(char *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_EA89B4(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EAB740(a1, (uint64_t)v5);
  sub_EABA78(a1, (uint64_t)__p);
  sub_EABB64(a2, (uint64_t)v5, (uint64_t)__p, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_EA8A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

__n128 sub_EA8A84@<Q0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EABD58(a1, (uint64_t)&v11);
  sub_EABE44(a1, (uint64_t)&v9);
  *(void *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_20E7D40;
  uint64_t v4 = v11;
  *(void *)(a2 + 24) = v11;
  uint64_t v5 = v12;
  *(_OWORD *)(a2 + 32) = v12;
  uint64_t v11 = 0;
  long long v12 = 0uLL;
  uint64_t v6 = v9;
  *(void *)(a2 + 48) = v9;
  result.n128_u64[0] = v10;
  *(_OWORD *)(a2 + 56) = v10;
  uint64_t v9 = 0;
  long long v10 = 0uLL;
  if (v4 != v5)
  {
    uint64_t v8 = ((int64_t)(result.n128_u64[0] - v6) >> 4) - 1;
    *(void *)(a2 + 16) = v8;
    __n128 result = *(__n128 *)(v6 + 16 * v8);
    *(__n128 *)a2 = result;
  }
  return result;
}

void sub_EA8B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_EA8B50(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EA889C(a1, (uint64_t)&v13);
  sub_EAB560(a1, (unint64_t *)&v20);
  sub_EAB650(a1, (unint64_t *)&v18);
  long long v8 = 0uLL;
  uint64_t v9 = v20;
  uint64_t v4 = v20;
  long long v10 = v21;
  uint64_t v5 = (void *)v21;
  long long v20 = 0;
  long long v21 = 0uLL;
  uint64_t v6 = v18;
  std::string __p = v18;
  uint64_t v7 = v19;
  long long v12 = v19;
  uint64_t v18 = 0;
  long long v19 = 0uLL;
  if (v4 != v5)
  {
    *((void *)&v8 + 1) = ((v7 - (uint64_t)v6) >> 3) - 1;
    *(void *)&long long v8 = v6[*((void *)&v8 + 1)];
  }
  sub_3D6680(a2, &v13);
  sub_3D6680(a2 + 64, &v8);
  if (__p)
  {
    *(void *)&long long v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    *(void *)&long long v10 = v9;
    operator delete(v9);
  }
  if (v16)
  {
    long long v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    long long v15 = v14;
    operator delete(v14);
  }
}

void sub_EA8C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  long long v12 = *(void **)(v10 - 40);
  if (v12)
  {
    *(void *)(v10 - 32) = v12;
    operator delete(v12);
    sub_2FC938((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_2FC938((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_EA8C98(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EA89B4(a1, (uint64_t)&v13);
  sub_EABD58(a1, (uint64_t)&v20);
  sub_EABE44(a1, (uint64_t)&v18);
  *(void *)long long v8 = 0;
  *(_OWORD *)&v8[8] = xmmword_20E7D40;
  uint64_t v9 = v20;
  uint64_t v4 = v20;
  long long v10 = v21;
  uint64_t v5 = (void *)v21;
  long long v20 = 0;
  long long v21 = 0uLL;
  uint64_t v6 = v18;
  std::string __p = v18;
  uint64_t v7 = v19;
  long long v12 = v19;
  uint64_t v18 = 0;
  long long v19 = 0uLL;
  if (v4 != v5)
  {
    *(void *)&v8[16] = ((v7 - (uint64_t)v6) >> 4) - 1;
    *(_OWORD *)long long v8 = v6[*(void *)&v8[16]];
  }
  sub_EA9B84(a2, &v13);
  sub_EA9B84(a2 + 72, (long long *)v8);
  if (__p)
  {
    *(void *)&long long v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    *(void *)&long long v10 = v9;
    operator delete(v9);
  }
  if (v16)
  {
    long long v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    long long v15 = v14;
    operator delete(v14);
  }
}

void sub_EA8DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  long long v13 = *(void **)(v11 - 40);
  if (v13)
  {
    *(void *)(v11 - 32) = v13;
    operator delete(v13);
    sub_39EB70((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_EA8DF4(void *a1, uint64_t a2)
{
  return *a1 + 480 * a2;
}

uint64_t sub_EA8E04(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  if (v3 - *a1 != a2[1] - *a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    uint64_t result = sub_EB4344(v2, v4);
    if (!result) {
      break;
    }
    v2 += 480;
    v4 += 480;
  }
  while (v2 != v3);
  return result;
}

BOOL sub_EA8E90(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (v2 == v3) {
    return 1;
  }
  if (v3 - v2 == 480) {
    return sub_EB2EC4(v2);
  }
  return 0;
}

std::string *sub_EA8EC4(std::string *a1)
{
  uint64_t size = a1->__r_.__value_.__l.__size_;
  for (std::string::size_type i = a1->__r_.__value_.__r.__words[0]; size != i; size = sub_4451C0(size - 480))
    ;
  a1->__r_.__value_.__l.__size_ = i;

  return std::string::assign(a1 + 1, 0, 0);
}

uint64_t sub_EA8F24(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 1;
  }
  if (v2 - v1 == 480)
  {
    if (sub_EB2EC4(*a1)) {
      return 1;
    }
    uint64_t v1 = *a1;
    uint64_t v2 = a1[1];
  }
  if (v1 == v2) {
    return 1;
  }
  do
  {
    uint64_t result = sub_EABF30((uint64_t)&v12, v1);
    LODWORD(v5) = result;
    if (!result) {
      break;
    }
    v1 += 480;
  }
  while (v1 != v2);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  char v11 = 1;
  long long v10 = &v11;
  if (v6 != v7 && v6 + 480 != v7)
  {
    do
    {
      sub_EAC188((uint64_t)&v10, v6, v6 + 480);
      uint64_t v9 = v6 + 960;
      v6 += 480;
    }
    while (v9 != v7);
    if (v11) {
      return v5;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_EA904C(uint64_t *a1)
{
  return sub_EB22DC(*a1);
}

uint64_t sub_EA9054(uint64_t a1)
{
  return sub_486CB4(*(void *)(a1 + 8) - 480);
}

unint64_t sub_EA9060(uint64_t *a1)
{
  return sub_EB29EC(*a1);
}

unint64_t sub_EA9068(uint64_t a1)
{
  return sub_EB2A48(*(void *)(a1 + 8) - 480);
}

uint64_t sub_EA9074(uint64_t *a1)
{
  return sub_EB2AA4(*a1);
}

uint64_t sub_EA907C(uint64_t a1)
{
  return sub_EB2ABC(*(void *)(a1 + 8) - 480);
}

unint64_t sub_EA9088(void *a1)
{
  return 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 5);
}

uint64_t sub_EA90A4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v3 = v3 + sub_EB2E84(v1);
    v1 += 480;
  }
  while (v1 != v2);
  return v3;
}

uint64_t sub_EA910C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    v3 += sub_EB40C0(v1);
    v1 += 480;
  }
  while (v1 != v2);
  return v3;
}

uint64_t sub_EA9174(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_1081388((long long **)a1, (std::string *)(a1 + 24));
  return a1;
}

void sub_EA91C0(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_20B1274((uint64_t)(v1 + 1));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EA91E0(uint64_t a1, uint64_t a2)
{
  sub_443EFC(__dst, (long long *)a2);
  sub_EAC378((char **)a1, (uint64_t)__dst, 1uLL);
  sub_405F44((uint64_t)__dst);
  uint64_t v4 = (unsigned char *)(a1 + 24);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v4, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)a2;
    *(void *)(a1 + 40) = *(void *)(a2 + 16);
    *(_OWORD *)uint64_t v4 = v5;
  }
  return a1;
}

void sub_EA9290(_Unwind_Exception *a1)
{
  sub_4323C0(v1);
  _Unwind_Resume(a1);
}

void sub_EA92A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_405F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_EA92C0(uint64_t a1, long long *a2)
{
  long long v17 = *a2;
  uint64_t v18 = *((void *)a2 + 2);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v19 = *(long long *)((char *)a2 + 24);
  uint64_t v20 = *((void *)a2 + 5);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  long long v3 = a2[4];
  long long v21 = a2[3];
  long long v22 = v3;
  long long v4 = *(long long *)((char *)a2 + 94);
  long long v5 = a2[7];
  v23[0] = a2[5];
  *(_OWORD *)((char *)v23 + 14) = v4;
  v23[2] = v5;
  uint64_t v24 = *((void *)a2 + 16);
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v25 = *(long long *)((char *)a2 + 136);
  uint64_t v26 = *((void *)a2 + 19);
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *((void *)a2 + 19) = 0;
  long long v27 = a2[10];
  uint64_t v28 = *((void *)a2 + 22);
  *((void *)a2 + 20) = 0;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  long long v6 = *(long long *)((char *)a2 + 184);
  long long v7 = *(long long *)((char *)a2 + 200);
  uint64_t v31 = *((void *)a2 + 27);
  long long v30 = v7;
  long long v29 = v6;
  long long v32 = a2[14];
  uint64_t v33 = *((void *)a2 + 30);
  *((void *)a2 + 28) = 0;
  *((void *)a2 + 29) = 0;
  long long v34 = *(long long *)((char *)a2 + 248);
  uint64_t v35 = *((void *)a2 + 33);
  *((void *)a2 + 30) = 0;
  *((void *)a2 + 31) = 0;
  *((void *)a2 + 32) = 0;
  *((void *)a2 + 33) = 0;
  long long v36 = a2[17];
  unsigned int v38 = *((_DWORD *)a2 + 74);
  if (v38 <= 1) {
    uint64_t v37 = *((void *)a2 + 36);
  }
  *(void *)&v48[15] = *(void *)((char *)a2 + 463);
  long long v8 = a2[28];
  long long v47 = a2[27];
  *(_OWORD *)uint64_t v48 = v8;
  long long v9 = a2[24];
  long long v43 = a2[23];
  long long v44 = v9;
  long long v10 = a2[26];
  long long v45 = a2[25];
  long long v46 = v10;
  long long v11 = a2[20];
  long long v39 = a2[19];
  long long v40 = v11;
  long long v12 = a2[22];
  long long v41 = a2[21];
  long long v42 = v12;
  sub_EAC378((char **)a1, (uint64_t)&v17, 1uLL);
  sub_405F44((uint64_t)&v17);
  long long v13 = (unsigned char *)(a1 + 24);
  unint64_t v14 = *(char **)a1;
  if (*(char *)(*(void *)a1 + 23) < 0)
  {
    sub_4200(v13, *(void **)v14, *((void *)v14 + 1));
  }
  else
  {
    long long v15 = *(_OWORD *)v14;
    *(void *)(a1 + 40) = *((void *)v14 + 2);
    *(_OWORD *)long long v13 = v15;
  }
  return a1;
}

void sub_EA9490(_Unwind_Exception *a1)
{
  sub_4323C0(v1);
  _Unwind_Resume(a1);
}

void sub_EA94A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_405F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_EA94BC(char *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_EA94E4(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EAC494(a1, (uint64_t)v5);
  sub_EAC7D4(a1, (uint64_t)__p);
  sub_EAC8C8(a2, (uint64_t)v5, (uint64_t)__p, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_EA9568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v14 = a12;
    if (!a12) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v14 = a12;
    if (!a12) {
      goto LABEL_3;
    }
  }
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

__n128 sub_EA95B4@<Q0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EACABC(a1, (uint64_t)&v11);
  sub_EACBB0(a1, (uint64_t)&v9);
  *(void *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_20E7D40;
  uint64_t v4 = v11;
  *(void *)(a2 + 24) = v11;
  uint64_t v5 = v12;
  *(_OWORD *)(a2 + 32) = v12;
  uint64_t v11 = 0;
  long long v12 = 0uLL;
  uint64_t v6 = v9;
  *(void *)(a2 + 48) = v9;
  result.n128_u64[0] = v10;
  *(_OWORD *)(a2 + 56) = v10;
  uint64_t v9 = 0;
  long long v10 = 0uLL;
  if (v4 != v5)
  {
    uint64_t v8 = ((int64_t)(result.n128_u64[0] - v6) >> 4) - 1;
    *(void *)(a2 + 16) = v8;
    __n128 result = *(__n128 *)(v6 + 16 * v8);
    *(__n128 *)a2 = result;
  }
  return result;
}

void sub_EA9664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_EA9680(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EA94E4(a1, (uint64_t)&v13);
  sub_EACABC(a1, (uint64_t)&v20);
  sub_EACBB0(a1, (uint64_t)&v18);
  *(void *)uint64_t v8 = 0;
  *(_OWORD *)&v8[8] = xmmword_20E7D40;
  uint64_t v9 = v20;
  uint64_t v4 = v20;
  long long v10 = v21;
  uint64_t v5 = (void *)v21;
  uint64_t v20 = 0;
  long long v21 = 0uLL;
  uint64_t v6 = v18;
  std::string __p = v18;
  uint64_t v7 = v19;
  long long v12 = v19;
  uint64_t v18 = 0;
  long long v19 = 0uLL;
  if (v4 != v5)
  {
    *(void *)&v8[16] = ((v7 - (uint64_t)v6) >> 4) - 1;
    *(_OWORD *)uint64_t v8 = v6[*(void *)&v8[16]];
  }
  sub_EA9CA0(a2, &v13);
  sub_EA9CA0(a2 + 72, (long long *)v8);
  if (__p)
  {
    *(void *)&long long v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    *(void *)&long long v10 = v9;
    operator delete(v9);
  }
  if (v16)
  {
    long long v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    long long v15 = v14;
    operator delete(v14);
  }
}

void sub_EA97A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  long long v13 = *(void **)(v11 - 40);
  if (v13)
  {
    *(void *)(v11 - 32) = v13;
    operator delete(v13);
    sub_39EB70((uint64_t *)va);
    _Unwind_Resume(a1);
  }
  sub_39EB70((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_EA97DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(void **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    BOOL result = sub_EAF7CC(v2, v4);
    if (!result) {
      break;
    }
    v2 += 472;
    v4 += 59;
  }
  while (v2 != v3);
  return result;
}

uint64_t sub_EA9868(uint64_t *a1)
{
  uint64_t v1 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  if ((char *)*a1 == v2) {
    return 1;
  }
  if (v2 - v1 == 472)
  {
    if (sub_EAE144((void *)*a1)) {
      return 1;
    }
    uint64_t v1 = (char *)*a1;
    uint64_t v2 = (char *)a1[1];
  }
  if (v1 == v2) {
    return 1;
  }
  do
  {
    uint64_t result = sub_EACCA4((uint64_t)&v12, v1);
    LODWORD(v5) = result;
    if (!result) {
      break;
    }
    v1 += 472;
  }
  while (v1 != v2);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  char v11 = 1;
  long long v10 = &v11;
  if (v6 != v7 && v6 + 472 != v7)
  {
    do
    {
      sub_EACEFC((uint64_t)&v10, v6, v6 + 472);
      uint64_t v9 = v6 + 944;
      v6 += 472;
    }
    while (v9 != v7);
    if (v11) {
      return v5;
    }
    else {
      return 0;
    }
  }
  return result;
}

unint64_t sub_EA9990(uint64_t *a1)
{
  return sub_EADC88(*a1);
}

uint64_t sub_EA9998(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  if (*(void **)a1 == v2) {
    return 0;
  }
  LODWORD(v3) = 0;
  do
  {
    uint64_t v3 = v3 + sub_EAE104(v1);
    v1 += 59;
  }
  while (v1 != v2);
  return v3;
}

uint64_t sub_EA9A00(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  uint64_t v3 = 0;
  do
  {
    v3 += sub_EAF548(v1);
    v1 += 472;
  }
  while (v1 != v2);
  return v3;
}

uint64_t sub_EA9A68(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 4);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = &v8[16 * (v7 >> 4)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  char v11 = (unsigned char *)*((void *)a2 + 6);
  long long v10 = (unsigned char *)*((void *)a2 + 7);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    long long v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v13;
    unint64_t v14 = &v13[16 * (v12 >> 4)];
    *(void *)(a1 + 64) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 56) = v14;
  }
  return a1;
}

void sub_EA9B50(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EA9B84(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 4);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = &v8[16 * (v7 >> 4)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  char v11 = (unsigned char *)*((void *)a2 + 6);
  long long v10 = (unsigned char *)*((void *)a2 + 7);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    long long v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v13;
    unint64_t v14 = &v13[16 * (v12 >> 4)];
    *(void *)(a1 + 64) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 56) = v14;
  }
  return a1;
}

void sub_EA9C6C(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EA9CA0(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 3);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 4);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v8;
    uint64_t v9 = &v8[16 * (v7 >> 4)];
    *(void *)(a1 + 40) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 32) = v9;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  char v11 = (unsigned char *)*((void *)a2 + 6);
  long long v10 = (unsigned char *)*((void *)a2 + 7);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    long long v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 48) = v13;
    *(void *)(a1 + 56) = v13;
    unint64_t v14 = &v13[16 * (v12 >> 4)];
    *(void *)(a1 + 64) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 56) = v14;
  }
  return a1;
}

void sub_EA9D88(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

char **sub_EA9DBC(char **a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x8AD8F2FBA93869) {
      sub_2E00();
    }
    uint64_t v6 = (char *)operator new(472 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    uint64_t v8 = 472 * a3;
    a1[2] = &v6[v8];
    do
    {
      sub_444D20(&v6[v7], (long long *)(a2 + v7));
      v7 += 472;
    }
    while (v8 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_EA9E70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_405F44(v4 - 472);
      while ((void *)v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EA9ED8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xCBEEA4E1A08AD8F3 * ((v4 - *(void *)result) >> 3);
    if (v5 >> 60) {
      sub_2E00();
    }
    uint64_t result = (char *)operator new(0xBEEA4E1A08AD8F30 * ((v4 - *(void *)result) >> 3));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 472)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      uint64_t result = sub_EA9FCC((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_EA9FAC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EA9FCC(char **a1, char *a2, _OWORD *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      *(_OWORD *)uint64_t v8 = *a3;
      a1[1] = v8 + 16;
    }
    else
    {
      long long v10 = v8 + 16;
      char v11 = (long long *)(v5 - 16);
      int64_t v12 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          long long v13 = *v11++;
          *(_OWORD *)int64_t v12 = v13;
          v12 += 16;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10) {
        memmove((void *)(v5 - 16 * ((uint64_t)(v5 - (void)v10) >> 4)), v8, v5 - (void)v10);
      }
      *(_OWORD *)uint64_t v8 = *a3;
    }
    return v8;
  }
  unint64_t v14 = ((uint64_t)(v5 - (void)v6) >> 4) + 1;
  if (v14 >> 60) {
    sub_2E00();
  }
  uint64_t v16 = v9 - (void)v6;
  if (v16 >> 3 > v14) {
    unint64_t v14 = v16 >> 3;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v14;
  }
  if (v17)
  {
    if (v17 >> 60) {
      sub_188D718();
    }
    uint64_t v18 = (char *)operator new(16 * v17);
    uint64_t v19 = v7 >> 4;
    uint64_t v20 = &v18[16 * (v7 >> 4)];
    long long v21 = &v18[16 * v17];
    if (v7 >> 4 != v17) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  uint64_t v18 = 0;
  uint64_t v19 = v7 >> 4;
  uint64_t v20 = (char *)(16 * (v7 >> 4));
  long long v21 = 0;
  if (!(v7 >> 4))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v7 >> 3;
      }
      if (v23 >> 60) {
        sub_188D718();
      }
      uint64_t v24 = (char *)operator new(16 * v23);
      uint64_t v20 = &v24[16 * (v23 >> 2)];
      long long v21 = &v24[16 * v23];
      if (v18)
      {
        operator delete(v18);
        uint64_t v6 = *a1;
      }
    }
    else
    {
      if (v19 >= -1) {
        unint64_t v22 = v19 + 1;
      }
      else {
        unint64_t v22 = v19 + 2;
      }
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)uint64_t v20 = *a3;
  long long v25 = v20;
  if (v6 != v8)
  {
    uint64_t v26 = v8;
    long long v27 = v20;
    do
    {
      long long v25 = v27 - 16;
      *((_OWORD *)v27 - 1) = *((_OWORD *)v26 - 1);
      v26 -= 16;
      v27 -= 16;
    }
    while (v26 != v6);
  }
  uint64_t v28 = a1[1];
  int64_t v29 = v28 - v8;
  if (v28 != v8) {
    memmove(v20 + 16, v8, v28 - v8);
  }
  long long v30 = *a1;
  *a1 = v25;
  a1[1] = &v20[v29 + 16];
  a1[2] = v21;
  if (v30) {
    operator delete(v30);
  }
  return v20;
}

void sub_EAA200(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EAA218@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xCBEEA4E1A08AD8F3 * ((v4 - *(void *)result) >> 3);
    if (v5 >> 60) {
      sub_2E00();
    }
    uint64_t result = (char *)operator new(0xBEEA4E1A08AD8F30 * ((v4 - *(void *)result) >> 3));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 472)
    {
      sub_EAFC0C();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      uint64_t result = sub_EA9FCC((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_EAA2EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EAA30C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  *(void *)(a1 + 40) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  unint64_t v5 = (uint64_t *)(a1 + 48);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a3;
  *(void *)(a1 + 64) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v7 != v6)
  {
    if (a4)
    {
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = ((*(void *)(a1 + 56) - v8) >> 4) - 1;
      *(void *)(a1 + 16) = v9;
      long long v10 = (_OWORD *)(v8 + 16 * v9);
LABEL_21:
      *(_OWORD *)a1 = *v10;
      return a1;
    }
    unint64_t v11 = *(void *)(a1 + 16);
    if (v11 >= ((v6 - v7) >> 4) - 1)
    {
LABEL_20:
      long long v10 = (_OWORD *)(v7 + 16 * v11);
      goto LABEL_21;
    }
    while (1)
    {
      int64_t v12 = (void **)(v7 + 16 * v11);
      uint64_t v13 = *v5;
      unint64_t v14 = (void **)(*v5 + 16 * v11);
      if (*v12)
      {
        unint64_t v15 = *(void *)(v7 + 16 * v11 + 8);
        unint64_t v16 = sub_EB04C4(*v12);
        BOOL v17 = v15 < v16;
        uint64_t v18 = *v14;
        if (!*v14)
        {
          if (v15 < v16) {
            goto LABEL_19;
          }
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v18 = *v14;
        if (!*v14) {
          goto LABEL_7;
        }
        BOOL v17 = 0;
      }
      uint64_t v19 = v13 + 16 * v11;
      unint64_t v22 = *(void *)(v19 + 8);
      uint64_t v20 = (unint64_t *)(v19 + 8);
      unint64_t v21 = v22;
      unint64_t v23 = sub_EB04C4(v18);
      if (v22 < v23 && v17)
      {
        uint64_t v25 = sub_EB0624(*v12, *(void *)(v7 + 16 * v11 + 8));
        if (v25 != sub_EB0624(*v14, *v20))
        {
LABEL_19:
          unint64_t v11 = *(void *)(a1 + 16);
          uint64_t v7 = *(void *)(a1 + 24);
          goto LABEL_20;
        }
      }
      else if ((v17 ^ (v21 < v23)))
      {
        goto LABEL_19;
      }
LABEL_7:
      uint64_t v7 = *(void *)(a1 + 24);
      unint64_t v11 = *(void *)(a1 + 16) + 1;
      *(void *)(a1 + 16) = v11;
      if (v11 >= ((*(void *)(a1 + 32) - v7) >> 4) - 1) {
        goto LABEL_19;
      }
    }
  }
  return a1;
}

void sub_EAA4C4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[7] = v4;
    operator delete(v4);
    unint64_t v5 = (void *)v1[3];
    if (!v5) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v5 = (void *)v1[3];
    if (!v5) {
      goto LABEL_3;
    }
  }
  v1[4] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

char *sub_EAA500@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xCBEEA4E1A08AD8F3 * ((v4 - *(void *)result) >> 3);
    if (v5 >> 60) {
      sub_2E00();
    }
    uint64_t result = (char *)operator new(0xBEEA4E1A08AD8F30 * ((v4 - *(void *)result) >> 3));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 472)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      uint64_t result = sub_EA9FCC((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_EAA5D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EAA5F4@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xCBEEA4E1A08AD8F3 * ((v4 - *(void *)result) >> 3);
    if (v5 >> 60) {
      sub_2E00();
    }
    uint64_t result = (char *)operator new(0xBEEA4E1A08AD8F30 * ((v4 - *(void *)result) >> 3));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 472)
    {
      sub_EAFC0C();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      uint64_t result = sub_EA9FCC((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_EAA6C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_EAA6E8@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if (v4 != *result)
  {
    unint64_t v5 = 0xCBEEA4E1A08AD8F3 * ((v4 - *result) >> 3);
    if (v5 >> 61) {
      sub_2E00();
    }
    uint64_t result = (uint64_t *)operator new(0x5F75270D0456C798 * ((v4 - *result) >> 3));
    uint64_t v6 = result;
    *a2 = (unint64_t)result;
    a2[1] = (unint64_t)result;
    for (a2[2] = (unint64_t)&result[v5]; v3 != v4; v3 += 472)
    {
      uint64_t v7 = sub_EB0608(v3);
      uint64_t result = (uint64_t *)sub_461E94(a2, v6, &v7);
      uint64_t v6 = result + 1;
    }
  }
  return result;
}

void sub_EAA7BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_EAA7DC@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if (v4 != *result)
  {
    unint64_t v5 = 0xCBEEA4E1A08AD8F3 * ((v4 - *result) >> 3);
    if (v5 >> 61) {
      sub_2E00();
    }
    uint64_t result = (uint64_t *)operator new(0x5F75270D0456C798 * ((v4 - *result) >> 3));
    uint64_t v6 = result;
    *a2 = (unint64_t)result;
    a2[1] = (unint64_t)result;
    for (a2[2] = (unint64_t)&result[v5]; v3 != v4; v3 += 472)
    {
      uint64_t v7 = sub_EB0610(v3);
      uint64_t result = (uint64_t *)sub_461E94(a2, v6, &v7);
      uint64_t v6 = result + 1;
    }
  }
  return result;
}

void sub_EAA8B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_EAA8D0@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if (v4 != *result)
  {
    unint64_t v5 = 0xCBEEA4E1A08AD8F3 * ((v4 - *result) >> 3);
    if (v5 >> 61) {
      sub_2E00();
    }
    uint64_t result = (uint64_t *)operator new(0x5F75270D0456C798 * ((v4 - *result) >> 3));
    uint64_t v6 = result;
    *a2 = (unint64_t)result;
    a2[1] = (unint64_t)result;
    for (a2[2] = (unint64_t)&result[v5]; v3 != v4; v3 += 472)
    {
      uint64_t v7 = sub_EB0608(v3);
      uint64_t result = (uint64_t *)sub_461E94(a2, v6, &v7);
      uint64_t v6 = result + 1;
    }
  }
  return result;
}

void sub_EAA9A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_EAA9C4@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if (v4 != *result)
  {
    unint64_t v5 = 0xCBEEA4E1A08AD8F3 * ((v4 - *result) >> 3);
    if (v5 >> 61) {
      sub_2E00();
    }
    uint64_t result = (uint64_t *)operator new(0x5F75270D0456C798 * ((v4 - *result) >> 3));
    uint64_t v6 = result;
    *a2 = (unint64_t)result;
    a2[1] = (unint64_t)result;
    for (a2[2] = (unint64_t)&result[v5]; v3 != v4; v3 += 472)
    {
      uint64_t v7 = sub_EB0610(v3);
      uint64_t result = (uint64_t *)sub_461E94(a2, v6, &v7);
      uint64_t v6 = result + 1;
    }
  }
  return result;
}

void sub_EAAA98(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_EAAAB8(uint64_t a1, void *a2)
{
  if (!sub_EAE43C(a2))
  {
    BOOL result = sub_723EC(3u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v6);
    sub_188FC78(v6, (uint64_t)"Path has an empty PathLeg.", 26);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    goto LABEL_9;
  }
  if (sub_EB086C((uint64_t)a2)) {
    return 1;
  }
  BOOL result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v6);
    sub_188FC78(v6, (uint64_t)"Path has an inconsistent PathLeg.", 33);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
LABEL_9:
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  return result;
}

void sub_EAAC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_EAAD10(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (**(unsigned char **)result)
  {
    uint64_t v4 = (unsigned char **)result;
    char v5 = (_DWORD *)sub_EADD58(a2);
    BOOL result = sub_EADD50(a3);
    if (*v5 != *(_DWORD *)result)
    {
      BOOL result = sub_723EC(3u);
      if (result)
      {
        sub_6BAC((uint64_t)v8);
        sub_188FC78(v8, (uint64_t)"Path has inconsistent WaypointInfo.", 35);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 3u);
        if (v7 < 0) {
          operator delete(__p);
        }
        if (v9 < 0) {
          operator delete((void *)v8[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        BOOL result = std::ios::~ios();
      }
      *void *v4 = 0;
    }
  }
  return result;
}

void sub_EAAEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

char **sub_EAAF00(char **a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x88888888888889) {
      sub_2E00();
    }
    uint64_t v5 = 480 * a3;
    uint64_t v6 = (char *)operator new(480 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      sub_4456B4(&v6[v7], (long long *)(a2 + v7));
      v7 += 480;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_EAAFA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_4451C0(v4 - 480);
      while ((void *)v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_EAB010@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if (v4 != *result)
  {
    unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *result) >> 5);
    if (v5 >> 61) {
      sub_2E00();
    }
    BOOL result = (uint64_t *)operator new(0x7777777777777778 * ((v4 - *result) >> 5));
    uint64_t v6 = result;
    *a2 = (unint64_t)result;
    a2[1] = (unint64_t)result;
    for (a2[2] = (unint64_t)&result[v5]; v3 != v4; v3 += 480)
    {
      uint64_t v7 = *(void *)sub_5231C(v3);
      BOOL result = (uint64_t *)sub_EAB100(a2, v6, &v7);
      uint64_t v6 = result + 1;
    }
  }
  return result;
}

void sub_EAB0E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EAB100(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  char v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)char v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      unint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          unint64_t v22 = (_OWORD *)(v5 + 16);
          unint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            _OWORD *v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)char v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    long long v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    long long v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    long long v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    long long v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    uint64_t v31 = &v54[8 * (v53 >> 2)];
    long long v32 = &v54[8 * v53];
    if (v30)
    {
      unint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      long long v32 = v55;
      long long v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      uint64_t v35 = v31 + 8;
      long long v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  long long v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  uint64_t v35 = v31 + 8;
  long long v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    long long v39 = v9;
    long long v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    long long v39 = v9;
    long long v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    long long v39 = &v9[-v41];
    long long v36 = &v31[-v41];
    long long v42 = v31 - 16;
    long long v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)long long v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  long long v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    unint64_t v49 = v9;
    size_t v50 = v47 - v9;
    double v51 = v32;
    memmove(v35, v49, v50);
    long long v32 = v51;
  }
  uint64_t v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_EAB458(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_EAB470@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if (v4 != *result)
  {
    unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *result) >> 5);
    if (v5 >> 61) {
      sub_2E00();
    }
    BOOL result = (uint64_t *)operator new(0x7777777777777778 * ((v4 - *result) >> 5));
    unint64_t v6 = result;
    *a2 = (unint64_t)result;
    a2[1] = (unint64_t)result;
    for (a2[2] = (unint64_t)&result[v5]; v3 != v4; v3 += 480)
    {
      uint64_t v7 = *(void *)(sub_5231C(v3) + 8);
      BOOL result = (uint64_t *)sub_EAB100(a2, v6, &v7);
      unint64_t v6 = result + 1;
    }
  }
  return result;
}

void sub_EAB540(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_EAB560@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if (v4 != *result)
  {
    unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *result) >> 5);
    if (v5 >> 61) {
      sub_2E00();
    }
    BOOL result = (uint64_t *)operator new(0x7777777777777778 * ((v4 - *result) >> 5));
    unint64_t v6 = result;
    *a2 = (unint64_t)result;
    a2[1] = (unint64_t)result;
    for (a2[2] = (unint64_t)&result[v5]; v3 != v4; v3 += 480)
    {
      uint64_t v7 = *(void *)sub_5231C(v3);
      BOOL result = (uint64_t *)sub_EAB100(a2, v6, &v7);
      unint64_t v6 = result + 1;
    }
  }
  return result;
}

void sub_EAB630(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_EAB650@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  if (v4 != *result)
  {
    unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *result) >> 5);
    if (v5 >> 61) {
      sub_2E00();
    }
    BOOL result = (uint64_t *)operator new(0x7777777777777778 * ((v4 - *result) >> 5));
    unint64_t v6 = result;
    *a2 = (unint64_t)result;
    a2[1] = (unint64_t)result;
    for (a2[2] = (unint64_t)&result[v5]; v3 != v4; v3 += 480)
    {
      uint64_t v7 = *(void *)(sub_5231C(v3) + 8);
      BOOL result = (uint64_t *)sub_EAB100(a2, v6, &v7);
      unint64_t v6 = result + 1;
    }
  }
  return result;
}

void sub_EAB720(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EAB740@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xEEEEEEEEEEEEEEF0 * ((v4 - *(void *)result) >> 5));
    unint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 480)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_EAB82C((char **)a2, v6, &v9);
      unint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_EAB80C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EAB82C(char **a1, char *a2, _OWORD *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      *(_OWORD *)uint64_t v8 = *a3;
      a1[1] = v8 + 16;
    }
    else
    {
      unint64_t v10 = v8 + 16;
      int64_t v11 = (long long *)(v5 - 16);
      uint64_t v12 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          long long v13 = *v11++;
          *(_OWORD *)uint64_t v12 = v13;
          v12 += 16;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10) {
        memmove((void *)(v5 - 16 * ((uint64_t)(v5 - (void)v10) >> 4)), v8, v5 - (void)v10);
      }
      *(_OWORD *)uint64_t v8 = *a3;
    }
    return v8;
  }
  unint64_t v14 = ((uint64_t)(v5 - (void)v6) >> 4) + 1;
  if (v14 >> 60) {
    sub_2E00();
  }
  uint64_t v16 = v9 - (void)v6;
  if (v16 >> 3 > v14) {
    unint64_t v14 = v16 >> 3;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v14;
  }
  if (v17)
  {
    if (v17 >> 60) {
      sub_188D718();
    }
    unint64_t v18 = (char *)operator new(16 * v17);
    uint64_t v19 = v7 >> 4;
    uint64_t v20 = &v18[16 * (v7 >> 4)];
    uint64_t v21 = &v18[16 * v17];
    if (v7 >> 4 != v17) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  unint64_t v18 = 0;
  uint64_t v19 = v7 >> 4;
  uint64_t v20 = (char *)(16 * (v7 >> 4));
  uint64_t v21 = 0;
  if (!(v7 >> 4))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v7 >> 3;
      }
      if (v23 >> 60) {
        sub_188D718();
      }
      uint64_t v24 = (char *)operator new(16 * v23);
      uint64_t v20 = &v24[16 * (v23 >> 2)];
      uint64_t v21 = &v24[16 * v23];
      if (v18)
      {
        operator delete(v18);
        unint64_t v6 = *a1;
      }
    }
    else
    {
      if (v19 >= -1) {
        unint64_t v22 = v19 + 1;
      }
      else {
        unint64_t v22 = v19 + 2;
      }
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)uint64_t v20 = *a3;
  long long v25 = v20;
  if (v6 != v8)
  {
    unint64_t v26 = v8;
    long long v27 = v20;
    do
    {
      long long v25 = v27 - 16;
      *((_OWORD *)v27 - 1) = *((_OWORD *)v26 - 1);
      v26 -= 16;
      v27 -= 16;
    }
    while (v26 != v6);
  }
  uint64_t v28 = a1[1];
  int64_t v29 = v28 - v8;
  if (v28 != v8) {
    memmove(v20 + 16, v8, v28 - v8);
  }
  long long v30 = *a1;
  *a1 = v25;
  a1[1] = &v20[v29 + 16];
  a1[2] = v21;
  if (v30) {
    operator delete(v30);
  }
  return v20;
}

void sub_EABA60(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EABA78@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xEEEEEEEEEEEEEEF0 * ((v4 - *(void *)result) >> 5));
    unint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 480)
    {
      sub_EB23DC();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_EAB82C((char **)a2, v6, &v9);
      unint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_EABB44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EABB64(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  *(void *)(a1 + 40) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  unint64_t v5 = (uint64_t *)(a1 + 48);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a3;
  *(void *)(a1 + 64) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v7 != v6)
  {
    if (a4)
    {
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = ((*(void *)(a1 + 56) - v8) >> 4) - 1;
      *(void *)(a1 + 16) = v9;
      unint64_t v10 = (_OWORD *)(v8 + 16 * v9);
LABEL_21:
      *(_OWORD *)a1 = *v10;
      return a1;
    }
    unint64_t v11 = *(void *)(a1 + 16);
    if (v11 >= ((v6 - v7) >> 4) - 1)
    {
LABEL_20:
      unint64_t v10 = (_OWORD *)(v7 + 16 * v11);
      goto LABEL_21;
    }
    while (1)
    {
      uint64_t v12 = (uint64_t *)(v7 + 16 * v11);
      uint64_t v13 = *v5;
      unint64_t v14 = (uint64_t *)(*v5 + 16 * v11);
      if (*v12)
      {
        unint64_t v15 = *(void *)(v7 + 16 * v11 + 8);
        unint64_t v16 = sub_EB2E84(*v12);
        BOOL v17 = v15 < v16;
        uint64_t v18 = *v14;
        if (!*v14)
        {
          if (v15 < v16) {
            goto LABEL_19;
          }
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v18 = *v14;
        if (!*v14) {
          goto LABEL_7;
        }
        BOOL v17 = 0;
      }
      uint64_t v19 = v13 + 16 * v11;
      unint64_t v22 = *(void *)(v19 + 8);
      uint64_t v20 = (unint64_t *)(v19 + 8);
      unint64_t v21 = v22;
      unint64_t v23 = sub_EB2E84(v18);
      if (v22 < v23 && v17)
      {
        uint64_t v25 = sub_EB2F38(*v12, *(void *)(v7 + 16 * v11 + 8));
        if (v25 != sub_EB2F38(*v14, *v20))
        {
LABEL_19:
          unint64_t v11 = *(void *)(a1 + 16);
          uint64_t v7 = *(void *)(a1 + 24);
          goto LABEL_20;
        }
      }
      else if ((v17 ^ (v21 < v23)))
      {
        goto LABEL_19;
      }
LABEL_7:
      uint64_t v7 = *(void *)(a1 + 24);
      unint64_t v11 = *(void *)(a1 + 16) + 1;
      *(void *)(a1 + 16) = v11;
      if (v11 >= ((*(void *)(a1 + 32) - v7) >> 4) - 1) {
        goto LABEL_19;
      }
    }
  }
  return a1;
}

void sub_EABD1C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[7] = v4;
    operator delete(v4);
    unint64_t v5 = (void *)v1[3];
    if (!v5) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v5 = (void *)v1[3];
    if (!v5) {
      goto LABEL_3;
    }
  }
  v1[4] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

char *sub_EABD58@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xEEEEEEEEEEEEEEF0 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 480)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_EAB82C((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_EABE24(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EABE44@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *(void *)result) >> 5);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xEEEEEEEEEEEEEEF0 * ((v4 - *(void *)result) >> 5));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 480)
    {
      sub_EB23DC();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_EAB82C((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_EABF10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_EABF30(uint64_t a1, uint64_t a2)
{
  if (!sub_EB3230(a2))
  {
    BOOL result = sub_723EC(3u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v6);
    sub_188FC78(v6, (uint64_t)"Path has an empty PathLeg.", 26);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    goto LABEL_9;
  }
  if (sub_EB3254(a2)) {
    return 1;
  }
  BOOL result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v6);
    sub_188FC78(v6, (uint64_t)"Path has an inconsistent PathLeg.", 33);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
LABEL_9:
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  return result;
}

void sub_EAC110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_EAC188(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (**(unsigned char **)result)
  {
    uint64_t v4 = (unsigned char **)result;
    char v5 = (_DWORD *)sub_EB2AD8(a2);
    BOOL result = sub_69134(a3);
    if (*v5 != *(_DWORD *)result)
    {
      BOOL result = sub_723EC(3u);
      if (result)
      {
        sub_6BAC((uint64_t)v8);
        sub_188FC78(v8, (uint64_t)"Path has inconsistent WaypointInfo.", 35);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 3u);
        if (v7 < 0) {
          operator delete(__p);
        }
        if (v9 < 0) {
          operator delete((void *)v8[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        BOOL result = std::ios::~ios();
      }
      *void *v4 = 0;
    }
  }
  return result;
}

void sub_EAC32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

char **sub_EAC378(char **a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x8AD8F2FBA93869) {
      sub_2E00();
    }
    uint64_t v6 = (char *)operator new(472 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    uint64_t v8 = 472 * a3;
    a1[2] = &v6[v8];
    do
    {
      sub_443EFC(&v6[v7], (long long *)(a2 + v7));
      v7 += 472;
    }
    while (v8 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_EAC42C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  if (*v1)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = *v1;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_405F44(v4 - 472);
      while ((void *)v4 != v3);
      char v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EAC494@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xCBEEA4E1A08AD8F3 * ((v4 - *(void *)result) >> 3);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xBEEA4E1A08AD8F30 * ((v4 - *(void *)result) >> 3));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 472)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_EAC588((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_EAC568(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EAC588(char **a1, char *a2, _OWORD *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      *(_OWORD *)uint64_t v8 = *a3;
      a1[1] = v8 + 16;
    }
    else
    {
      unint64_t v10 = v8 + 16;
      unint64_t v11 = (long long *)(v5 - 16);
      uint64_t v12 = a1[1];
      if (v5 >= 0x10)
      {
        do
        {
          long long v13 = *v11++;
          *(_OWORD *)uint64_t v12 = v13;
          v12 += 16;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10) {
        memmove((void *)(v5 - 16 * ((uint64_t)(v5 - (void)v10) >> 4)), v8, v5 - (void)v10);
      }
      *(_OWORD *)uint64_t v8 = *a3;
    }
    return v8;
  }
  unint64_t v14 = ((uint64_t)(v5 - (void)v6) >> 4) + 1;
  if (v14 >> 60) {
    sub_2E00();
  }
  uint64_t v16 = v9 - (void)v6;
  if (v16 >> 3 > v14) {
    unint64_t v14 = v16 >> 3;
  }
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v17 = v14;
  }
  if (v17)
  {
    if (v17 >> 60) {
      sub_188D718();
    }
    uint64_t v18 = (char *)operator new(16 * v17);
    uint64_t v19 = v7 >> 4;
    uint64_t v20 = &v18[16 * (v7 >> 4)];
    unint64_t v21 = &v18[16 * v17];
    if (v7 >> 4 != v17) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  uint64_t v18 = 0;
  uint64_t v19 = v7 >> 4;
  uint64_t v20 = (char *)(16 * (v7 >> 4));
  unint64_t v21 = 0;
  if (!(v7 >> 4))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v23 = 1;
      }
      else {
        unint64_t v23 = v7 >> 3;
      }
      if (v23 >> 60) {
        sub_188D718();
      }
      uint64_t v24 = (char *)operator new(16 * v23);
      uint64_t v20 = &v24[16 * (v23 >> 2)];
      unint64_t v21 = &v24[16 * v23];
      if (v18)
      {
        operator delete(v18);
        uint64_t v6 = *a1;
      }
    }
    else
    {
      if (v19 >= -1) {
        unint64_t v22 = v19 + 1;
      }
      else {
        unint64_t v22 = v19 + 2;
      }
      v20 -= 16 * (v22 >> 1);
    }
  }
LABEL_31:
  *(_OWORD *)uint64_t v20 = *a3;
  uint64_t v25 = v20;
  if (v6 != v8)
  {
    unint64_t v26 = v8;
    long long v27 = v20;
    do
    {
      uint64_t v25 = v27 - 16;
      *((_OWORD *)v27 - 1) = *((_OWORD *)v26 - 1);
      v26 -= 16;
      v27 -= 16;
    }
    while (v26 != v6);
  }
  uint64_t v28 = a1[1];
  int64_t v29 = v28 - v8;
  if (v28 != v8) {
    memmove(v20 + 16, v8, v28 - v8);
  }
  long long v30 = *a1;
  *a1 = v25;
  a1[1] = &v20[v29 + 16];
  a1[2] = v21;
  if (v30) {
    operator delete(v30);
  }
  return v20;
}

void sub_EAC7BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EAC7D4@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xCBEEA4E1A08AD8F3 * ((v4 - *(void *)result) >> 3);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xBEEA4E1A08AD8F30 * ((v4 - *(void *)result) >> 3));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 472)
    {
      sub_EADA68();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_EAC588((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_EAC8A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EAC8C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a2;
  *(void *)(a1 + 40) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  unint64_t v5 = (uint64_t *)(a1 + 48);
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a3;
  *(void *)(a1 + 64) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  if (v7 != v6)
  {
    if (a4)
    {
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = ((*(void *)(a1 + 56) - v8) >> 4) - 1;
      *(void *)(a1 + 16) = v9;
      unint64_t v10 = (_OWORD *)(v8 + 16 * v9);
LABEL_21:
      *(_OWORD *)a1 = *v10;
      return a1;
    }
    unint64_t v11 = *(void *)(a1 + 16);
    if (v11 >= ((v6 - v7) >> 4) - 1)
    {
LABEL_20:
      unint64_t v10 = (_OWORD *)(v7 + 16 * v11);
      goto LABEL_21;
    }
    while (1)
    {
      uint64_t v12 = (void **)(v7 + 16 * v11);
      uint64_t v13 = *v5;
      unint64_t v14 = (void **)(*v5 + 16 * v11);
      if (*v12)
      {
        unint64_t v15 = *(void *)(v7 + 16 * v11 + 8);
        unint64_t v16 = sub_EAE104(*v12);
        BOOL v17 = v15 < v16;
        uint64_t v18 = *v14;
        if (!*v14)
        {
          if (v15 < v16) {
            goto LABEL_19;
          }
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v18 = *v14;
        if (!*v14) {
          goto LABEL_7;
        }
        BOOL v17 = 0;
      }
      uint64_t v19 = v13 + 16 * v11;
      unint64_t v22 = *(void *)(v19 + 8);
      uint64_t v20 = (unint64_t *)(v19 + 8);
      unint64_t v21 = v22;
      unint64_t v23 = sub_EAE104(v18);
      if (v22 < v23 && v17)
      {
        uint64_t v25 = sub_EAE1B8(*v12, *(void *)(v7 + 16 * v11 + 8));
        if (v25 != sub_EAE1B8(*v14, *v20))
        {
LABEL_19:
          unint64_t v11 = *(void *)(a1 + 16);
          uint64_t v7 = *(void *)(a1 + 24);
          goto LABEL_20;
        }
      }
      else if ((v17 ^ (v21 < v23)))
      {
        goto LABEL_19;
      }
LABEL_7:
      uint64_t v7 = *(void *)(a1 + 24);
      unint64_t v11 = *(void *)(a1 + 16) + 1;
      *(void *)(a1 + 16) = v11;
      if (v11 >= ((*(void *)(a1 + 32) - v7) >> 4) - 1) {
        goto LABEL_19;
      }
    }
  }
  return a1;
}

void sub_EACA80(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[7] = v4;
    operator delete(v4);
    unint64_t v5 = (void *)v1[3];
    if (!v5) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v5 = (void *)v1[3];
    if (!v5) {
      goto LABEL_3;
    }
  }
  v1[4] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

char *sub_EACABC@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xCBEEA4E1A08AD8F3 * ((v4 - *(void *)result) >> 3);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xBEEA4E1A08AD8F30 * ((v4 - *(void *)result) >> 3));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 472)
    {
      sub_46B058();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_EAC588((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_EACB90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EACBB0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *((void *)result + 1);
  if (v4 != *(void *)result)
  {
    unint64_t v5 = 0xCBEEA4E1A08AD8F3 * ((v4 - *(void *)result) >> 3);
    if (v5 >> 60) {
      sub_2E00();
    }
    BOOL result = (char *)operator new(0xBEEA4E1A08AD8F30 * ((v4 - *(void *)result) >> 3));
    uint64_t v6 = result;
    *(void *)a2 = result;
    *(void *)(a2 + 8) = result;
    for (*(void *)(a2 + 16) = &result[16 * v5]; v3 != v4; v3 += 472)
    {
      sub_EADA68();
      *(void *)&long long v9 = v7;
      *((void *)&v9 + 1) = v8;
      BOOL result = sub_EAC588((char **)a2, v6, &v9);
      uint64_t v6 = result + 16;
    }
  }
  return result;
}

void sub_EACC84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_EACCA4(uint64_t a1, void *a2)
{
  if (!sub_EAE43C(a2))
  {
    BOOL result = sub_723EC(3u);
    if (!result) {
      return result;
    }
    sub_6BAC((uint64_t)v6);
    sub_188FC78(v6, (uint64_t)"Path has an empty PathLeg.", 26);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    goto LABEL_9;
  }
  if (sub_EAE460((uint64_t)a2)) {
    return 1;
  }
  BOOL result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)v6);
    sub_188FC78(v6, (uint64_t)"Path has an inconsistent PathLeg.", 33);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
LABEL_9:
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    if (v7 < 0) {
      operator delete((void *)v6[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    return 0;
  }
  return result;
}

void sub_EACE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_EACEFC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (**(unsigned char **)result)
  {
    uint64_t v4 = (unsigned char **)result;
    char v5 = (_DWORD *)sub_EADD58(a2);
    BOOL result = sub_EADD50(a3);
    if (*v5 != *(_DWORD *)result)
    {
      BOOL result = sub_723EC(3u);
      if (result)
      {
        sub_6BAC((uint64_t)v8);
        sub_188FC78(v8, (uint64_t)"Path has inconsistent WaypointInfo.", 35);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 3u);
        if (v7 < 0) {
          operator delete(__p);
        }
        if (v9 < 0) {
          operator delete((void *)v8[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        BOOL result = std::ios::~ios();
      }
      *void *v4 = 0;
    }
  }
  return result;
}

void sub_EAD0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_EAD0EC()
{
  unk_25FC607 = 16641;
  word_25FC5F0 = 65;
  byte_25FC61F = 1;
  byte_25FC609 = 0;
}

uint64_t sub_EAD114(uint64_t a1)
{
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 92) = -1;
  *(unsigned char *)(a1 + 94) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 256;
  *(void *)(a1 + 102) = 0;
  *(_DWORD *)(a1 + 184) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 192) = 0x7FFFFFFF;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 196) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 216) = 0x8000000080000000;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(unsigned char *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 276) = 0x7FFFFFFF;
  *(void *)(a1 + 280) = 0x8000000080000000;
  *(_DWORD *)(a1 + 296) = -1;
  *(_OWORD *)(a1 + 304) = xmmword_20E8160;
  *(void *)(a1 + 320) = -1;
  *(_DWORD *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 360) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 368) = 1;
  *(unsigned char *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 394) = 36000;
  *(unsigned char *)(a1 + 398) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 424) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 432) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 440) = 1;
  *(unsigned char *)(a1 + 464) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 466) = 36000;
  *(unsigned char *)(a1 + 470) = 0;
  sub_EAD268(a1);
  return a1;
}

void sub_EAD230(_Unwind_Exception *a1)
{
  sub_45E914(v2);
  uint64_t v4 = *(void **)(v1 + 160);
  if (v4)
  {
    *(void *)(v1 + 168) = v4;
    operator delete(v4);
  }
  sub_20B132C(v1 + 136);
  _Unwind_Resume(a1);
}

double sub_EAD268(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  for (uint64_t i = *(void *)(a1 + 120); i != v2; i -= 56)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  *(void *)(a1 + 120) = v2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = *(void *)(a1 + 24);
  *(_DWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 92) = -1;
  *(unsigned char *)(a1 + 94) = 0;
  *(_WORD *)(a1 + 100) = 256;
  *(void *)(a1 + 102) = 0;
  *(void *)(a1 + 184) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 192) = 0x7FFFFFFF;
  *(void *)(a1 + 196) = 0x7FFFFFFF7FFFFFFFLL;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0x8000000080000000;
  uint64_t v6 = (void *)(a1 + 224);
  char v5 = *(void **)(a1 + 224);
  if (v5)
  {
    *(void *)(a1 + 232) = v5;
    operator delete(v5);
    *uint64_t v6 = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
  }
  char v7 = *(void **)(a1 + 248);
  *uint64_t v6 = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  if (v7)
  {
    *(void *)(a1 + 256) = v7;
    operator delete(v7);
  }
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 276) = 0x7FFFFFFF;
  *(void *)(a1 + 280) = 0x8000000080000000;
  if (*(_DWORD *)(a1 + 296) != -1) {
    *(_DWORD *)(a1 + 296) = -1;
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 304) = xmmword_20E8160;
  uint64_t v9 = *(void *)(a1 + 160);
  uint64_t v10 = *(void *)(a1 + 136);
  *(_DWORD *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(unsigned char *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 368) = 1;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 394) = 36000;
  *(unsigned char *)(a1 + 398) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 424) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 432) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 440) = 1;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 466) = 36000;
  *(unsigned char *)(a1 + 470) = 0;
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 168) = v9;
  return result;
}

uint64_t sub_EAD404@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (sub_EAD708(a1, a2))
  {
    return sub_EAD114(a3);
  }
  uint64_t v7 = *a1;
  sub_EAD114(a3);
  uint64_t v8 = *(void *)(v7 + 100);
  *(_WORD *)(a3 + 108) = *(_WORD *)(v7 + 108);
  *(void *)(a3 + 100) = v8;
  uint64_t v35 = v7;
  uint64_t v36 = 0;
  if (sub_EAD708(a1, &v35))
  {
    *(_OWORD *)(a3 + 328) = *(_OWORD *)(v7 + 328);
    long long v9 = *(_OWORD *)(v7 + 344);
    long long v10 = *(_OWORD *)(v7 + 360);
    long long v11 = *(_OWORD *)(v7 + 376);
    *(void *)(a3 + 391) = *(void *)(v7 + 391);
    *(_OWORD *)(a3 + 360) = v10;
    *(_OWORD *)(a3 + 376) = v11;
    *(_OWORD *)(a3 + 344) = v9;
    sub_EAD948(a3, (long long *)(v7 + 184));
  }
  uint64_t v12 = *(void *)(v7 + 24);
  uint64_t v13 = *(void *)(v7 + 32);
  unint64_t v14 = (void *)(v7 + 24);
  if (v12 == v13 && !*(void *)(v7 + 48)) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((v13 - v12) >> 3) + 1;
  }
  uint64_t v35 = v7;
  uint64_t v36 = v15;
  uint64_t result = sub_EAD708(a2, &v35);
  if (result)
  {
    *(_OWORD *)(a3 + 400) = *(_OWORD *)(v7 + 400);
    long long v16 = *(_OWORD *)(v7 + 416);
    long long v17 = *(_OWORD *)(v7 + 432);
    long long v18 = *(_OWORD *)(v7 + 448);
    *(void *)(a3 + 463) = *(void *)(v7 + 463);
    *(_OWORD *)(a3 + 432) = v17;
    *(_OWORD *)(a3 + 448) = v18;
    *(_OWORD *)(a3 + 416) = v16;
    unint64_t v19 = a1[1];
    uint64_t v20 = a2[1];
    if (v20 - v19 != 1) {
      goto LABEL_12;
    }
LABEL_19:
    unint64_t v24 = sub_EADB30((void *)v7, v19);
    uint64_t v26 = *a1;
    unint64_t v25 = a1[1];
    uint64_t v27 = *(void *)(*a1 + 24);
    uint64_t v28 = *(void *)(*a1 + 32);
    if (v27 == v28 && !*(void *)(v26 + 48))
    {
      uint64_t v29 = -1;
      if (v25)
      {
LABEL_22:
        if (v29 == v25)
        {
          if (*(void *)(v26 + 48)) {
            uint64_t v30 = v26 + 56;
          }
          else {
            uint64_t v30 = v28 - 48;
          }
        }
        else
        {
          uint64_t v30 = sub_EADEA0((void *)(*a1 + 24), v25);
        }
LABEL_32:
        *(void *)(a3 + 48) = v24;
        long long v33 = *(_OWORD *)v30;
        long long v34 = *(_OWORD *)(v30 + 16);
        *(void *)(a3 + 88) = *(void *)(v30 + 32);
        *(_OWORD *)(a3 + 72) = v34;
        *(_OWORD *)(a3 + 56) = v33;
        *(void *)(a3 + 32) = *(void *)(a3 + 24);
        uint64_t result = sub_F1E4E4((int **)v30);
        *(_DWORD *)(a3 + 96) = result;
        *(_WORD *)(a3 + 100) = 256;
        *(void *)(a3 + 102) = 0;
        return result;
      }
    }
    else
    {
      uint64_t v29 = 0x2E8BA2E8BA2E8BA3 * ((v28 - v27) >> 3);
      if (v25) {
        goto LABEL_22;
      }
    }
    uint64_t v31 = *(void *)(v26 + 48);
    uint64_t v32 = v26 + 56;
    if (v31) {
      uint64_t v30 = v32;
    }
    else {
      uint64_t v30 = *(void *)(*a1 + 24);
    }
    goto LABEL_32;
  }
  *(_DWORD *)(a3 + 400) = 1000000000;
  unint64_t v19 = a1[1];
  uint64_t v20 = a2[1];
  if (v20 - v19 == 1) {
    goto LABEL_19;
  }
LABEL_12:
  unint64_t v21 = v20 - 1;
  if (v19 <= v21) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = v19;
  }
  if (v19 < v21)
  {
    do
    {
      unint64_t v23 = (int **)sub_EADEA0(v14, v19);
      sub_3DB530((char **)(a3 + 24), (uint64_t)v23);
      uint64_t result = sub_F1E7EC(v23);
      *(_DWORD *)(a3 + 96) |= result;
      ++v19;
    }
    while (v22 != v19);
  }
  return result;
}

void sub_EAD6B8(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

void sub_EAD6CC(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

void sub_EAD6E0(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

void sub_EAD6F4(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

BOOL sub_EAD708(void *a1, void *a2)
{
  uint64_t v3 = (void *)*a1;
  if (!*a1)
  {
    BOOL v6 = 0;
    uint64_t v7 = (void *)*a2;
    if (*a2) {
      goto LABEL_7;
    }
LABEL_23:
    BOOL v13 = 0;
    return v6 ^ v13 ^ 1;
  }
  uint64_t v4 = v3[3];
  uint64_t v5 = v3[4];
  if (v4 == v5 && !v3[6])
  {
    BOOL v6 = 0;
    uint64_t v7 = (void *)*a2;
    if (*a2) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
  BOOL v6 = a1[1] < (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v5 - v4) >> 3) + 1);
  uint64_t v7 = (void *)*a2;
  if (!*a2) {
    goto LABEL_23;
  }
LABEL_7:
  unint64_t v8 = a2[1];
  long long v9 = (void *)v7[3];
  long long v10 = (void *)v7[4];
  if (v9 == v10 && !v7[6]) {
    goto LABEL_23;
  }
  unint64_t v11 = 0x2E8BA2E8BA2E8BA3 * (v10 - v9) + 1;
  BOOL v12 = v8 >= v11;
  BOOL v13 = v8 < v11;
  if (v12 || !v6) {
    return v6 ^ v13 ^ 1;
  }
  unint64_t v15 = a1[1];
  uint64_t v17 = v3[3];
  uint64_t v16 = v3[4];
  if (v17 != v16 || v3[6])
  {
    uint64_t v18 = 0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3);
    if (v15) {
      goto LABEL_16;
    }
LABEL_28:
    uint64_t v24 = v3[6];
    unint64_t v25 = v3 + 7;
    if (v24) {
      uint64_t v22 = (uint64_t)v25;
    }
    else {
      uint64_t v22 = v17;
    }
    if (v9 != v10) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  uint64_t v18 = -1;
  if (!v15) {
    goto LABEL_28;
  }
LABEL_16:
  if (v18 == v15)
  {
    uint64_t v19 = v3[6];
    uint64_t v20 = v16 - 48;
    unint64_t v21 = v3 + 7;
    if (v19) {
      uint64_t v22 = (uint64_t)v21;
    }
    else {
      uint64_t v22 = v20;
    }
    if (v9 != v10) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v22 = sub_EADEA0(v3 + 3, v15);
    uint64_t v7 = (void *)*a2;
    unint64_t v8 = a2[1];
    long long v9 = *(void **)(*a2 + 24);
    long long v10 = *(void **)(*a2 + 32);
    if (v9 != v10) {
      goto LABEL_33;
    }
  }
LABEL_32:
  if (!v7[6])
  {
    uint64_t v26 = -1;
    if (v8) {
      goto LABEL_34;
    }
LABEL_38:
    uint64_t v27 = v7[6];
    goto LABEL_39;
  }
LABEL_33:
  uint64_t v26 = 0x2E8BA2E8BA2E8BA3 * (v10 - v9);
  if (!v8) {
    goto LABEL_38;
  }
LABEL_34:
  if (v26 != v8) {
    return v22 == sub_EADEA0(v7 + 3, v8);
  }
  uint64_t v27 = v7[6];
  long long v9 = v10 - 6;
LABEL_39:
  uint64_t v28 = v7 + 7;
  if (v27) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = v9;
  }
  return v22 == (void)v29;
}

uint64_t sub_EAD918(uint64_t a1)
{
  return a1 + 100;
}

__n128 sub_EAD920(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 328) = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 391) = *(void *)(a2 + 63);
  *(_OWORD *)(a1 + 360) = v3;
  *(_OWORD *)(a1 + 376) = v4;
  *(__n128 *)(a1 + 344) = result;
  return result;
}

__n128 sub_EAD948(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 216) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 200) = v5;
  *(_OWORD *)(a1 + 184) = v4;
  if ((long long *)(a1 + 184) == a2)
  {
    *(_OWORD *)(a1 + 272) = *(long long *)((char *)a2 + 88);
    __n128 result = *(__n128 *)((char *)a2 + 120);
    *(__n128 *)(a1 + 304) = result;
  }
  else
  {
    sub_472BC8((void *)(a1 + 224), *((char **)a2 + 5), *((char **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2));
    sub_472BC8((void *)(a1 + 248), *((char **)a2 + 8), *((char **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 2));
    *(_OWORD *)(a1 + 272) = *(long long *)((char *)a2 + 88);
    unsigned int v6 = *(_DWORD *)(a1 + 296);
    int v7 = *((_DWORD *)a2 + 28);
    if (v6 == v7)
    {
      if (v6 <= 1) {
        *(void *)(a1 + 288) = *((void *)a2 + 13);
      }
      __n128 result = *(__n128 *)((char *)a2 + 120);
      *(__n128 *)(a1 + 304) = result;
    }
    else
    {
      if (v7 == 1)
      {
        *(void *)(a1 + 288) = *((void *)a2 + 13);
        int v7 = *((_DWORD *)a2 + 28);
      }
      else if (!v7)
      {
        *(void *)(a1 + 288) = *((void *)a2 + 13);
      }
      *(_DWORD *)(a1 + 296) = v7;
      __n128 result = *(__n128 *)((char *)a2 + 120);
      *(__n128 *)(a1 + 304) = result;
    }
  }
  return result;
}

uint64_t sub_EADA60(uint64_t a1)
{
  return a1 + 184;
}

__n128 sub_EADAA8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 400) = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 463) = *(void *)(a2 + 63);
  *(_OWORD *)(a1 + 432) = v3;
  *(_OWORD *)(a1 + 448) = v4;
  *(__n128 *)(a1 + 416) = result;
  return result;
}

uint64_t sub_EADAD0(uint64_t a1)
{
  return a1 + 400;
}

uint64_t sub_EADAD8(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)(a1 + 48) = a2;
  long long v4 = *a3;
  long long v5 = a3[1];
  *(void *)(a1 + 88) = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 32) = *(void *)(a1 + 24);
  uint64_t result = sub_F1E4E4((int **)a3);
  *(_DWORD *)(a1 + 96) = result;
  *(_WORD *)(a1 + 100) = 256;
  *(void *)(a1 + 102) = 0;
  return result;
}

unint64_t sub_EADB30(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = a1[4];
  if (v3 != v2 || a1[6])
  {
    uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((v2 - v3) >> 3);
    if (a2) {
      goto LABEL_4;
    }
LABEL_9:
    unint64_t result = a1[6];
    if (result) {
      return result;
    }
    unint64_t v7 = *(void *)(v3 + 32);
    int v8 = *(_DWORD *)(v3 + 80);
    char v9 = *(unsigned char *)(v3 + 84);
    return (((v7 >> 16) & 0xFFFF0000 | (v7 << 32) | (2 * ((v7 & 0xFF000000000000) == 0)))
          + 4 * (unsigned __int16)v8) & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  }
  uint64_t v4 = -1;
  if (!a2) {
    goto LABEL_9;
  }
LABEL_4:
  if (v4 != a2)
  {
    uint64_t v6 = sub_EADEA0(a1 + 3, a2);
    unint64_t v7 = *(void *)(v6 + 32);
    int v8 = *(_DWORD *)(v6 + 80);
    char v9 = *(unsigned char *)(v6 + 84);
    return (((v7 >> 16) & 0xFFFF0000 | (v7 << 32) | (2 * ((v7 & 0xFF000000000000) == 0)))
          + 4 * (unsigned __int16)v8) & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  }
  unint64_t result = a1[6];
  if (!result) {
    return (((*(void *)(v2 - 16) >> 16) & 0xFFFF0000 | (*(void *)(v2 - 16) << 32) | (2
  }
                                                                                         * ((*(void *)(v2 - 16) & 0xFF000000000000) == 0)))
          + (((unint64_t)*(unsigned int *)(v2 - 8) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v2 - 4) >> 1) & 1;
  return result;
}

uint64_t sub_EADC28(uint64_t a1, int **a2)
{
  sub_3DB530((char **)(a1 + 24), (uint64_t)a2);
  uint64_t result = sub_F1E7EC(a2);
  *(_DWORD *)(a1 + 96) |= result;
  return result;
}

uint64_t sub_EADC68(uint64_t a1, unint64_t a2)
{
  return sub_EADEA0((void *)(a1 + 24), a2);
}

uint64_t sub_EADC70(uint64_t result, char a2)
{
  *(unsigned char *)(result + 105) = a2;
  return result;
}

BOOL sub_EADC78(uint64_t a1)
{
  return *(void *)(a1 + 48) != 0;
}

unint64_t sub_EADC88(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 48);
  if (!result)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    return (((*(void *)(v3 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v3 + 32) << 32) | (2
                                                                                         * ((*(void *)(v3 + 32) & 0xFF000000000000) == 0)))
          + 4 * (unsigned __int16)*(_DWORD *)(v3 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v3 + 84) & 1;
  }
  return result;
}

unint64_t sub_EADCD0(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 48);
  if (!result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    return (((*(void *)(v3 - 16) >> 16) & 0xFFFF0000 | (*(void *)(v3 - 16) << 32) | (2
                                                                                         * ((*(void *)(v3 - 16) & 0xFF000000000000) == 0)))
          + (((unint64_t)*(unsigned int *)(v3 - 8) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v3 - 4) >> 1) & 1;
  }
  return result;
}

uint64_t sub_EADD1C(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    return a1 + 56;
  }
  else {
    return *(void *)(a1 + 24);
  }
}

uint64_t sub_EADD34(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    return a1 + 56;
  }
  else {
    return *(void *)(a1 + 32) - 48;
  }
}

uint64_t sub_EADD50(uint64_t a1)
{
  return a1 + 320;
}

uint64_t sub_EADD58(uint64_t a1)
{
  return a1 + 324;
}

uint64_t sub_EADD60(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 320) = *a2;
  return result;
}

uint64_t sub_EADD6C(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 324) = *a2;
  return result;
}

char *sub_EADD78@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = (__n128 *)a1[3];
  long long v5 = (__n128 *)a1[4];
  uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * (((char *)v5 - (char *)v6) >> 3);
  unint64_t v8 = v7 + 1;
  if (v7 != -1)
  {
    if (v8 >= 0x666666666666667) {
      sub_2E00();
    }
    uint64_t v4 = (__int8 *)operator new(40 * v8);
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v4;
    *(void *)(a2 + 16) = &v4[40 * v8];
  }
  while (v6 != v5)
  {
    __n128 v9 = *v6;
    __n128 v10 = v6[1];
    unint64_t v14 = v6[2].n128_u64[0];
    v13[0] = v9;
    v13[1] = v10;
    uint64_t v4 = &sub_2E7FC8((char **)a2, (uint64_t)v4, v13)[2].n128_i8[8];
    uint64_t v6 = (__n128 *)((char *)v6 + 88);
  }
  if (a1[6]) {
    unint64_t v11 = (long long *)(a1 + 7);
  }
  else {
    unint64_t v11 = (long long *)(a1[4] - 48);
  }
  return sub_64F484((char **)a2, v11);
}

void sub_EADE78(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EADE98(uint64_t a1)
{
  return a1 + 160;
}

uint64_t sub_EADEA0(void *a1, unint64_t a2)
{
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __n128 v10 = &v15;
    }
    else {
      __n128 v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    BOOL v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 88 * a2;
}

void sub_EAE000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_EAE0E0(uint64_t a1)
{
  return 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
}

uint64_t sub_EAE104(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  if (v1 == v2 && !a1[6]) {
    return 0;
  }
  else {
    return 0x2E8BA2E8BA2E8BA3 * ((v2 - v1) >> 3) + 1;
  }
}

BOOL sub_EAE144(void *a1)
{
  return a1[3] == a1[4] && a1[6] == 0;
}

void *sub_EAE168@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[3];
  uint64_t v3 = result[4];
  if (v2 == v3 && !result[6])
  {
    *a2 = result;
    a2[1] = 0;
    a2[2] = result;
    a2[3] = 0;
  }
  else
  {
    *a2 = result;
    a2[1] = 0;
    a2[2] = result;
    a2[3] = 0x2E8BA2E8BA2E8BA3 * ((v3 - v2) >> 3) + 1;
  }
  return result;
}

uint64_t sub_EAE1B8(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = a1[4];
  if (v3 == v2 && !a1[6])
  {
    uint64_t v4 = -1;
    if (a2)
    {
LABEL_4:
      if (v4 != a2) {
        return sub_EADEA0(a1 + 3, a2);
      }
      uint64_t v5 = v2 - 48;
      if (a1[6]) {
        return (uint64_t)(a1 + 7);
      }
      else {
        return v5;
      }
    }
  }
  else
  {
    uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((v2 - v3) >> 3);
    if (a2) {
      goto LABEL_4;
    }
  }
  if (a1[6]) {
    return (uint64_t)(a1 + 7);
  }
  else {
    return a1[3];
  }
}

uint64_t sub_EAE234(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    uint64_t v3 = *(void *)(a1 + 32);
    if (v2 == v3 && !*(void *)(a1 + 48))
    {
      if (a2 == -1)
      {
LABEL_5:
        unsigned int v4 = *(_DWORD *)(a1 + 400);
        long long v7 = *(void **)(a1 + 24);
        uint64_t v6 = *(void **)(a1 + 32);
        uint64_t v5 = (void *)(a1 + 24);
        if (v7 != v6) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
    }
    else if (0x2E8BA2E8BA2E8BA3 * ((v3 - v2) >> 3) == a2)
    {
      goto LABEL_5;
    }
    unsigned int v4 = 1000000000;
    long long v7 = *(void **)(a1 + 24);
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v5 = (void *)(a1 + 24);
    if (v7 != v6) {
      goto LABEL_15;
    }
  }
  else if (*(void *)(a1 + 48))
  {
    unsigned int v4 = *(_DWORD *)(a1 + 400) - *(_DWORD *)(a1 + 328);
    long long v7 = *(void **)(a1 + 24);
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v5 = (void *)(a1 + 24);
    if (v7 != v6) {
      goto LABEL_15;
    }
  }
  else
  {
    unsigned int v4 = 1000000000 - *(_DWORD *)(a1 + 328);
    long long v7 = *(void **)(a1 + 24);
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v5 = (void *)(a1 + 24);
    if (v7 != v6) {
      goto LABEL_15;
    }
  }
LABEL_14:
  if (*(void *)(a1 + 48))
  {
LABEL_15:
    uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * (v6 - v7);
    if (a2) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }
  uint64_t v8 = -1;
  if (a2)
  {
LABEL_16:
    if (v8 == a2)
    {
      long long v9 = v6 - 6;
      if (*(void *)(a1 + 48)) {
        __n128 v10 = (void *)(a1 + 56);
      }
      else {
        __n128 v10 = v9;
      }
    }
    else
    {
      __n128 v10 = (void *)sub_EADEA0(v5, a2);
    }
    goto LABEL_25;
  }
LABEL_22:
  if (*(void *)(a1 + 48)) {
    __n128 v10 = (void *)(a1 + 56);
  }
  else {
    __n128 v10 = v7;
  }
LABEL_25:
  unint64_t v11 = (unsigned __int16 *)(*v10 - *(int *)*v10);
  double v12 = 0.0;
  if (*v11 >= 9u)
  {
    uint64_t v13 = v11[4];
    if (v13)
    {
      LODWORD(v12) = *(_DWORD *)(*v10 + v13);
      double v12 = (double)*(unint64_t *)&v12;
    }
  }
  double v14 = (double)v4 / 1000000000.0 * v12;
  if (v14 >= 0.0)
  {
    if (v14 < 4.50359963e15)
    {
      uint64_t v15 = (uint64_t)(v14 + v14) + 1;
      return (uint64_t)(double)(v15 >> 1);
    }
  }
  else if (v14 > -4.50359963e15)
  {
    uint64_t v15 = (uint64_t)(v14 + v14);
    if (v15 >= 1) {
      --v15;
    }
    return (uint64_t)(double)(v15 >> 1);
  }
  return (uint64_t)v14;
}

uint64_t sub_EAE418(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 400) - *(_DWORD *)(a1 + 328));
}

uint64_t sub_EAE428(uint64_t a1)
{
  return (1000000000 - *(_DWORD *)(a1 + 328));
}

BOOL sub_EAE43C(void *a1)
{
  return a1[3] != a1[4] || a1[6] != 0;
}

uint64_t sub_EAE460(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    return *(_DWORD *)(a1 + 328) <= *(_DWORD *)(a1 + 400)
        && *(_DWORD *)(a1 + 96) == sub_F1E4E4((int **)(a1 + 56));
  }
  else
  {
    char v16 = 1;
    uint64_t v15 = &v16;
    uint64_t v3 = *(int ***)(a1 + 24);
    unsigned int v4 = *(int ***)(a1 + 32);
    if (v3 != v4 && v3 + 11 != v4)
    {
      do
      {
        sub_EB48D4((uint64_t)&v15, (uint64_t)v3, (uint64_t)(v3 + 11));
        uint64_t v6 = v3 + 22;
        v3 += 11;
      }
      while (v6 != v4);
      uint64_t v3 = *(int ***)(a1 + 24);
      unsigned int v4 = *(int ***)(a1 + 32);
    }
    int v14 = 0;
    v12[0] = &v14;
    if (v3 == v4)
    {
      int v8 = 0;
      LOBYTE(v7) = 1;
    }
    else
    {
      do
      {
        BOOL v7 = sub_EB4B90(v12, v3);
        if (!v7) {
          break;
        }
        v3 += 11;
      }
      while (v3 != v4);
      int v8 = v14;
    }
    if (v16) {
      BOOL v9 = v7;
    }
    else {
      BOOL v9 = 0;
    }
    char v16 = v9;
    if (*(_DWORD *)(a1 + 96) != v8)
    {
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v12);
        sub_188FC78(v12, (uint64_t)"PathLeg has inconsistent cost features.", 39);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 3u);
        if (v11 < 0) {
          operator delete(__p);
        }
        if (v13 < 0) {
          operator delete(v12[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      char v16 = 0;
    }
    LODWORD(result) = sub_EAE734(a1 + 184);
    if (v16) {
      return result;
    }
    else {
      return 0;
    }
  }
}

void sub_EAE6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_EAE734(uint64_t a1)
{
  if (*(_DWORD *)a1 == 0x7FFFFFFF) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 36) == 0x7FFFFFFF) {
    return 1;
  }
  if (!sub_40A45C((int *)(a1 + 8))) {
    return 1;
  }
  int v3 = *(_DWORD *)(a1 + 112);
  if (v3 == -1) {
    return 1;
  }
  if (v3 == 1)
  {
    BOOL result = 1;
    if (*(void *)(a1 + 104) > 0xFFFFFFFEFFFFFFFFLL || !*(void *)(a1 + 104)) {
      return result;
    }
  }
  else
  {
    if (v3)
    {
      exceptiouint64_t n = __cxa_allocate_exception(8uLL);
      *exceptiouint64_t n = &off_23FDF58;
    }
    if (*(void *)(a1 + 104) == -1) {
      return 1;
    }
  }
  if (*(_DWORD *)a1 == 0x7FFFFFFF || (int v4 = *(_DWORD *)(a1 + 36), v4 != 0x7FFFFFFF) && *(_DWORD *)a1 >= v4)
  {
    if (*(void *)(a1 + 40) == *(void *)(a1 + 48) && sub_723EC(3u))
    {
      sub_6BAC((uint64_t)&v20);
      sub_188FC78(&v20, (uint64_t)"ChargeInfo without any suggested connectors set.", 48);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    uint64_t v5 = *(unsigned __int8 **)(a1 + 40);
    uint64_t v6 = *(unsigned __int8 **)(a1 + 48);
    if (v5 != v6)
    {
      BOOL v7 = *(unsigned __int8 **)(a1 + 72);
      if (*(unsigned __int8 **)(a1 + 64) != v7)
      {
        while (1)
        {
          int v8 = *(unsigned __int8 **)(a1 + 64);
          if (v8 == v7) {
            break;
          }
          while (!sub_87ECC(v8, v5))
          {
            v8 += 12;
            if (v8 == v7)
            {
              int v8 = v7;
              break;
            }
          }
          BOOL v7 = *(unsigned __int8 **)(a1 + 72);
          if (v8 == v7) {
            break;
          }
          v5 += 12;
          if (v5 == v6)
          {
            uint64_t v11 = *(void *)(a1 + 40);
            uint64_t v12 = *(void *)(a1 + 48);
            if (v11 == v12) {
              goto LABEL_46;
            }
            do
            {
              BOOL v13 = sub_87E78(v11);
              if (!v13) {
                break;
              }
              v11 += 12;
            }
            while (v11 != v12);
            if (v13) {
              goto LABEL_46;
            }
            BOOL result = sub_723EC(3u);
            if (!result) {
              return result;
            }
            sub_6BAC((uint64_t)&v20);
            sub_188FC78(&v20, (uint64_t)"Got an invalid suggested connector (type UNKNOWN or invalid power).", 67);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 3u);
            goto LABEL_37;
          }
        }
      }
      BOOL result = sub_723EC(3u);
      if (result)
      {
        sub_6BAC((uint64_t)&v20);
        sub_188FC78(&v20, (uint64_t)"Suggested connector not part of the list of supported connectors.", 65);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 3u);
LABEL_37:
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v23 < 0) {
          operator delete(v22);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        return 0;
      }
      return result;
    }
LABEL_46:
    uint64_t v14 = *(void *)(a1 + 64);
    uint64_t v15 = *(void *)(a1 + 72);
    if (v14 != v15)
    {
      do
      {
        BOOL v16 = sub_87E78(v14);
        if (!v16) {
          break;
        }
        v14 += 12;
      }
      while (v14 != v15);
      if (!v16)
      {
        BOOL result = sub_723EC(3u);
        if (!result) {
          return result;
        }
        sub_6BAC((uint64_t)&v20);
        sub_188FC78(&v20, (uint64_t)"Got an invalid supported connector (type UNKNOWN or invalid power).", 67);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 3u);
LABEL_56:
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        sub_111ECAC((uint64_t)&v20);
        return 0;
      }
    }
    if (*(void *)(a1 + 128) == 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL result = sub_723EC(3u);
      if (!result) {
        return result;
      }
      sub_6BAC((uint64_t)&v20);
      sub_188FC78(&v20, (uint64_t)"ChargeInfo has an invalid POI neighborhood info.", 48);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      goto LABEL_56;
    }
    return 1;
  }
  BOOL result = sub_723EC(3u);
  if (result)
  {
    sub_6BAC((uint64_t)&v20);
    sub_188FC78(&v20, (uint64_t)"ChargeInfo has charging time ", 29);
    BOOL v9 = (void *)std::ostream::operator<<();
    sub_188FC78(v9, (uint64_t)" minutes, which is less than the minimum charging time (", 56);
    __n128 v10 = (void *)std::ostream::operator<<();
    sub_188FC78(v10, (uint64_t)" minutes).", 10);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    goto LABEL_37;
  }
  return result;
}

void sub_EAED50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_EAEE78(uint64_t a1, int ***a2)
{
  uint64_t v5 = *(unsigned char **)(a1 + 24);
  uint64_t v6 = *(unsigned char **)(a1 + 32);
  int v4 = (char **)(a1 + 24);
  uint64_t v7 = (char *)a2[1] - (char *)*a2;
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((v6 - v5) >> 3) + 0x2E8BA2E8BA2E8BA3 * (v7 >> 3);
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 40) - (void)v5) >> 3) < v8)
  {
    if (v8 >= 0x2E8BA2E8BA2E8BBLL) {
      sub_2E00();
    }
    BOOL v9 = (char *)operator new(v7 + v6 - v5);
    __n128 v10 = &v9[8 * ((v6 - v5) >> 3)];
    uint64_t v11 = v10;
    if (v6 != v5)
    {
      uint64_t v12 = &v9[8 * ((v6 - v5) >> 3)];
      do
      {
        long long v13 = *(_OWORD *)(v6 - 88);
        *(_OWORD *)(v12 - 72) = *(_OWORD *)(v6 - 72);
        *(_OWORD *)(v12 - 88) = v13;
        long long v14 = *(_OWORD *)(v6 - 56);
        long long v15 = *(_OWORD *)(v6 - 40);
        long long v16 = *(_OWORD *)(v6 - 24);
        uint64_t v11 = v12 - 88;
        *((void *)v12 - 1) = *((void *)v6 - 1);
        *(_OWORD *)(v12 - 24) = v16;
        *(_OWORD *)(v12 - 40) = v15;
        *(_OWORD *)(v12 - 56) = v14;
        v6 -= 88;
        v12 -= 88;
      }
      while (v6 != v5);
    }
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = &v9[88 * v8];
    if (v5) {
      operator delete(v5);
    }
  }
  std::string v18 = *a2;
  for (uint64_t i = a2[1]; v18 != i; v18 += 11)
  {
    sub_3DB530(v4, (uint64_t)v18);
    *(_DWORD *)(a1 + 96) |= sub_F1E7EC(v18);
  }
}

__n128 sub_EAEFD8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 48)) {
    BOOL v4 = *(void *)(a2 + 48) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 96) = 0;
  }
  sub_EAEE78(a1, (int ***)(a2 + 24));
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  __n128 result = *(__n128 *)(a2 + 416);
  long long v6 = *(_OWORD *)(a2 + 432);
  long long v7 = *(_OWORD *)(a2 + 448);
  *(void *)(a1 + 463) = *(void *)(a2 + 463);
  *(_OWORD *)(a1 + 432) = v6;
  *(_OWORD *)(a1 + 448) = v7;
  *(__n128 *)(a1 + 416) = result;
  return result;
}

char *sub_EAF04C(char **a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 88;
  unint64_t v8 = &(*a1)[88 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - (void)v6) >> 3) + 1;
    if (v19 > 0x2E8BA2E8BA2E8BALL) {
      sub_2E00();
    }
    unint64_t v20 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v9 - (void)v6) >> 3);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x1745D1745D1745DLL) {
      unint64_t v21 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v21 = v19;
    }
    *(void *)&long long v44 = a1 + 2;
    if (v21)
    {
      if (v21 > 0x2E8BA2E8BA2E8BALL) {
        sub_188D718();
      }
      uint64_t v22 = (char *)operator new(88 * v21);
    }
    else
    {
      uint64_t v22 = 0;
    }
    *(void *)&long long v42 = v22;
    *((void *)&v42 + 1) = &v22[88 * v7];
    __dst[0] = *((void **)&v42 + 1);
    __dst[1] = &v22[88 * v21];
    sub_EB4E08((uint64_t)&v42, a3);
    uint64_t v27 = *((void *)&v42 + 1);
    uint64_t v28 = *a1;
    uint64_t v29 = (char *)*((void *)&v42 + 1);
    if (*a1 != v8)
    {
      uint64_t v30 = v8;
      uint64_t v31 = *((void *)&v42 + 1);
      do
      {
        long long v32 = *(_OWORD *)((char *)v30 - 88);
        *(_OWORD *)(v31 - 72) = *(_OWORD *)((char *)v30 - 72);
        *(_OWORD *)(v31 - 88) = v32;
        long long v33 = *(_OWORD *)((char *)v30 - 56);
        long long v34 = *(_OWORD *)((char *)v30 - 40);
        long long v35 = *(_OWORD *)((char *)v30 - 24);
        uint64_t v29 = (char *)(v31 - 88);
        *(void *)(v31 - 8) = *((void *)v30 - 1);
        *(_OWORD *)(v31 - 24) = v35;
        *(_OWORD *)(v31 - 40) = v34;
        *(_OWORD *)(v31 - 56) = v33;
        uint64_t v30 = (_OWORD *)((char *)v30 - 88);
        v31 -= 88;
      }
      while (v30 != (_OWORD *)v28);
    }
    *((void *)&v42 + 1) = v29;
    uint64_t v36 = a1[1];
    uint64_t v37 = (char *)__dst[0];
    int64_t v38 = v36 - v8;
    if (v36 != v8)
    {
      memmove(__dst[0], v8, v36 - v8);
      uint64_t v29 = (char *)*((void *)&v42 + 1);
      unint64_t v8 = a1[1];
    }
    long long v39 = *a1;
    *a1 = v29;
    a1[1] = &v37[v38];
    uint64_t v40 = a1[2];
    a1[2] = (char *)__dst[1];
    __dst[0] = v8;
    __dst[1] = v40;
    *(void *)&long long v42 = v39;
    *((void *)&v42 + 1) = v39;
    if (v8 != v39) {
      __dst[0] = &v39[(v8 - v39 - 88) % 0x58uLL];
    }
    if (v39) {
      operator delete(v39);
    }
    return (char *)v27;
  }
  else if (v8 == (char *)v5)
  {
    long long v23 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)unint64_t v8 = *(_OWORD *)a3;
    *((_OWORD *)v8 + 1) = v23;
    long long v24 = *(_OWORD *)(a3 + 32);
    long long v25 = *(_OWORD *)(a3 + 48);
    long long v26 = *(_OWORD *)(a3 + 64);
    *((void *)v8 + 10) = *(void *)(a3 + 80);
    *((_OWORD *)v8 + 3) = v25;
    *((_OWORD *)v8 + 4) = v26;
    *((_OWORD *)v8 + 2) = v24;
    a1[1] = v8 + 88;
  }
  else
  {
    long long v10 = *(_OWORD *)(a3 + 48);
    long long v44 = *(_OWORD *)(a3 + 32);
    long long v45 = v10;
    long long v46 = *(_OWORD *)(a3 + 64);
    uint64_t v47 = *(void *)(a3 + 80);
    long long v11 = *(_OWORD *)(a3 + 16);
    uint64_t v12 = v8 + 88;
    unint64_t v13 = v5 - 88;
    long long v42 = *(_OWORD *)a3;
    *(_OWORD *)long long __dst = v11;
    unint64_t v14 = v5;
    if (v5 >= 0x58)
    {
      do
      {
        long long v15 = *(_OWORD *)(v13 + 16);
        *(_OWORD *)unint64_t v14 = *(_OWORD *)v13;
        *(_OWORD *)(v14 + 16) = v15;
        long long v16 = *(_OWORD *)(v13 + 32);
        long long v17 = *(_OWORD *)(v13 + 48);
        long long v18 = *(_OWORD *)(v13 + 64);
        *(void *)(v14 + 80) = *(void *)(v13 + 80);
        *(_OWORD *)(v14 + 48) = v17;
        *(_OWORD *)(v14 + 64) = v18;
        *(_OWORD *)(v14 + 32) = v16;
        v13 += 88;
        v14 += 88;
      }
      while (v13 < v5);
    }
    a1[1] = (char *)v14;
    if ((char *)v5 != v12) {
      memmove(v8 + 88, v8, v5 - (void)v12);
    }
    *((_OWORD *)v8 + 2) = v44;
    *((_OWORD *)v8 + 3) = v45;
    *((_OWORD *)v8 + 4) = v46;
    *((void *)v8 + 10) = v47;
    *(_OWORD *)unint64_t v8 = v42;
    *((_OWORD *)v8 + 1) = *(_OWORD *)__dst;
  }
  return v8;
}

void sub_EAF35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  if (a11 == a10)
  {
    uint64_t v12 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v12 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

__n128 sub_EAF3C0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 48)) {
    BOOL v4 = *(void *)(a2 + 48) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 96) = 0;
  }
  long long v6 = *(int ***)(a2 + 24);
  for (uint64_t i = *(int ***)(a2 + 32); i != v6; *(_DWORD *)(a1 + 96) |= sub_F1E7EC(i))
  {
    i -= 11;
    sub_EAF04C((char **)(a1 + 24), *(void *)(a1 + 24), (uint64_t)i);
  }
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  __n128 result = *(__n128 *)(a2 + 344);
  long long v8 = *(_OWORD *)(a2 + 360);
  long long v9 = *(_OWORD *)(a2 + 376);
  *(void *)(a1 + 391) = *(void *)(a2 + 391);
  *(_OWORD *)(a1 + 360) = v8;
  *(_OWORD *)(a1 + 376) = v9;
  *(__n128 *)(a1 + 344) = result;
  return result;
}

int **sub_EAF478(uint64_t a1, int **__dst, int **a3, int a4)
{
  long long v6 = *(int ***)(a1 + 24);
  if (v6 != __dst || *(int ***)(a1 + 32) != a3)
  {
    if (v6 != __dst && a4 != 0)
    {
      long long v8 = *((_OWORD *)a3 - 3);
      long long v9 = *((_OWORD *)a3 - 2);
      *(__dst - 2) = *(a3 - 2);
      *((_OWORD *)__dst - 3) = v8;
      *((_OWORD *)__dst - 2) = v9;
      long long v6 = *(int ***)(a1 + 24);
    }
    if (__dst == a3)
    {
      uint64_t v12 = *(int ***)(a1 + 32);
      *(_DWORD *)(a1 + 96) = 0;
    }
    else
    {
      long long v10 = *(int ***)(a1 + 32);
      int64_t v11 = (char *)v10 - (char *)a3;
      if (v10 != a3)
      {
        memmove(__dst, a3, (char *)v10 - (char *)a3);
        long long v6 = *(int ***)(a1 + 24);
      }
      uint64_t v12 = (int **)((char *)__dst + v11);
      *(void *)(a1 + 32) = v12;
      *(_DWORD *)(a1 + 96) = 0;
    }
    while (v6 != v12)
    {
      *(_DWORD *)(a1 + 96) |= sub_F1E7EC(v6);
      v6 += 11;
    }
  }
  return __dst;
}

uint64_t sub_EAF548(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    uint64_t v1 = *(int **)(a1 + 56);
    uint64_t v2 = (unsigned __int16 *)((char *)v1 - *v1);
    double v3 = 0.0;
    if (*v2 >= 9u)
    {
      uint64_t v4 = v2[4];
      if (v4)
      {
        LODWORD(v3) = *(int *)((char *)v1 + v4);
        double v3 = (double)*(unint64_t *)&v3;
      }
    }
    double v5 = v3 * ((double)(*(_DWORD *)(a1 + 400) - *(_DWORD *)(a1 + 328)) / 1000000000.0);
    if (v5 >= 0.0)
    {
      if (v5 < 4.50359963e15)
      {
        uint64_t v6 = (uint64_t)(v5 + v5) + 1;
        return (uint64_t)(double)(v6 >> 1);
      }
    }
    else if (v5 > -4.50359963e15)
    {
      uint64_t v6 = (uint64_t)(v5 + v5);
      if (v6 >= 1) {
        --v6;
      }
      return (uint64_t)(double)(v6 >> 1);
    }
    return (uint64_t)v5;
  }
  uint64_t v7 = *(void **)(a1 + 24);
  long long v8 = (unsigned __int16 *)(*v7 - *(int *)*v7);
  double v9 = 0.0;
  if (*v8 >= 9u)
  {
    uint64_t v10 = v8[4];
    if (v10)
    {
      LODWORD(v9) = *(_DWORD *)(*v7 + v10);
      double v9 = (double)*(unint64_t *)&v9;
    }
  }
  double v11 = v9 * ((double)(1000000000 - *(_DWORD *)(a1 + 328)) / 1000000000.0);
  if (v11 >= 0.0)
  {
    HIDWORD(v12) = 1127219200;
    if (v11 >= 4.50359963e15) {
      goto LABEL_25;
    }
    uint64_t v13 = (uint64_t)(v11 + v11) + 1;
  }
  else
  {
    HIDWORD(v12) = -1020264448;
    if (v11 <= -4.50359963e15) {
      goto LABEL_25;
    }
    uint64_t v13 = (uint64_t)(v11 + v11);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v11 = (double)(v13 >> 1);
LABEL_25:
  uint64_t v15 = (uint64_t)v11;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = (v16 - (uint64_t)v7) >> 3;
  unint64_t v18 = 0x2E8BA2E8BA2E8BA3 * v17;
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * v17) <= 1) {
    uint64_t v19 = 1;
  }
  else {
    uint64_t v19 = 0x2E8BA2E8BA2E8BA3 * v17;
  }
  if (v18 >= 2)
  {
    unint64_t v20 = v7 + 11;
    uint64_t v21 = v19 - 1;
    do
    {
      while (1)
      {
        uint64_t v22 = (unsigned __int16 *)(*v20 - *(int *)*v20);
        if (*v22 >= 9u)
        {
          uint64_t v23 = v22[4];
          if (v23) {
            break;
          }
        }
        v20 += 11;
        if (!--v21) {
          goto LABEL_34;
        }
      }
      v15 += *(unsigned int *)(*v20 + v23);
      v20 += 11;
      --v21;
    }
    while (v21);
  }
LABEL_34:
  long long v24 = *(int **)(v16 - 48);
  long long v25 = (unsigned __int16 *)((char *)v24 - *v24);
  double v26 = 0.0;
  if (*v25 >= 9u)
  {
    uint64_t v27 = v25[4];
    if (v27)
    {
      LODWORD(v26) = *(int *)((char *)v24 + v27);
      double v26 = (double)*(unint64_t *)&v26;
    }
  }
  LODWORD(v12) = *(_DWORD *)(a1 + 400);
  double v28 = v26 * ((double)v12 / 1000000000.0);
  if (v28 >= 0.0)
  {
    if (v28 < 4.50359963e15)
    {
      uint64_t v29 = (uint64_t)(v28 + v28) + 1;
LABEL_44:
      double v28 = (double)(v29 >> 1);
    }
  }
  else if (v28 > -4.50359963e15)
  {
    uint64_t v29 = (uint64_t)(v28 + v28);
    if (v29 >= 1) {
      --v29;
    }
    goto LABEL_44;
  }
  return v15 + (uint64_t)v28;
}

BOOL sub_EAF7CC(uint64_t a1, void *a2)
{
  if ((*(void *)(a1 + 48) != 0) != (a2[6] != 0)) {
    return 0;
  }
  BOOL result = sub_EB45A4(a1 + 328, (uint64_t)(a2 + 41));
  if (result)
  {
    BOOL result = sub_EB45A4(a1 + 400, (uint64_t)(a2 + 50));
    if (result)
    {
      if (*(void *)(a1 + 48) && a2[6])
      {
        unint64_t v5 = a2[11];
        if (__PAIR64__(*(unsigned __int16 *)(a1 + 92), *(_DWORD *)(a1 + 88)) == __PAIR64__(WORD2(v5), v5)) {
          return HIWORD(v5) & 1 ^ (*(unsigned char *)(a1 + 94) == 0);
        }
        return 0;
      }
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v8 = a2[3];
      if (v6 - v7 != a2[4] - v8) {
        return 0;
      }
      if (v7 != v6)
      {
        uint64_t v9 = 0;
        BOOL result = 1;
        while (1)
        {
          unint64_t v10 = *(void *)(v8 + v9 + 32);
          if (__PAIR64__(*(unsigned __int16 *)(v7 + v9 + 36), *(_DWORD *)(v7 + v9 + 32)) != __PAIR64__(WORD2(v10), v10)) {
            break;
          }
          if ((HIWORD(v10) & 1) == (*(unsigned char *)(v7 + v9 + 38) == 0)) {
            break;
          }
          unint64_t v11 = *(void *)(v8 + v9 + 72);
          if (__PAIR64__(*(unsigned __int16 *)(v7 + v9 + 76), *(_DWORD *)(v7 + v9 + 72)) != __PAIR64__(WORD2(v11), v11)
            || (HIWORD(v11) & 1) == (*(unsigned char *)(v7 + v9 + 78) == 0)
            || *(_DWORD *)(v7 + v9 + 80) != *(_DWORD *)(v8 + v9 + 80)
            || ((*(unsigned char *)(v8 + v9 + 84) ^ *(unsigned char *)(v7 + v9 + 84)) & 7) != 0)
          {
            break;
          }
          v9 += 88;
          if (v7 + v9 == v6) {
            return result;
          }
        }
        return 0;
      }
      return 1;
    }
  }
  return result;
}

BOOL sub_EAF998(uint64_t a1, void *a2)
{
  return !sub_EAF7CC(a1, a2);
}

uint64_t sub_EAF9B4(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 120);
  uint64_t v6 = (void **)(a1 + 112);
  uint64_t v9 = v7;
  if (v7 != v8)
  {
    uint64_t v9 = v7;
    while (1)
    {
      int v10 = *(_DWORD *)(v9 + 12);
      if (v10 != -1 && *(_DWORD *)v9 == a2)
      {
        BOOL v11 = *(unsigned __int8 *)(v9 + 4) == a3 && v10 == a4;
        if (v11 && *(_DWORD *)(v9 + 8) == a5) {
          break;
        }
      }
      v9 += 56;
      if (v9 == v8) {
        goto LABEL_14;
      }
    }
  }
  if (v9 != v8) {
    return v9;
  }
LABEL_14:
  if (v8 - v7 == -56)
  {
    for (; v8 != v7; v8 -= 56)
    {
      uint64_t v13 = *(void **)(v8 - 24);
      if (v13)
      {
        *(void *)(v8 - 16) = v13;
        operator delete(v13);
      }
    }
    *(void *)(a1 + 120) = v7;
    return v7 - 56;
  }
  else
  {
    sub_EB4FC8(v6, 1uLL);
    return *(void *)(a1 + 120) - 56;
  }
}

uint64_t sub_EAFAB4(uint64_t a1)
{
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 92) = -1;
  *(unsigned char *)(a1 + 94) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = 256;
  *(void *)(a1 + 102) = 0;
  *(_DWORD *)(a1 + 184) = 0x7FFFFFFF;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 192) = 0x7FFFFFFF;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 196) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 216) = 0x8000000080000000;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(unsigned char *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 276) = 0x7FFFFFFF;
  *(void *)(a1 + 280) = 0x8000000080000000;
  *(_DWORD *)(a1 + 296) = -1;
  *(_OWORD *)(a1 + 304) = xmmword_20E8160;
  *(void *)(a1 + 320) = -1;
  *(_DWORD *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 360) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 368) = 1;
  *(unsigned char *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 394) = 36000;
  *(unsigned char *)(a1 + 398) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  *(unsigned char *)(a1 + 424) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 432) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 440) = 1;
  *(unsigned char *)(a1 + 464) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 466) = 36000;
  *(unsigned char *)(a1 + 470) = 0;
  sub_EAD268(a1);
  return a1;
}

void sub_EAFBD0(_Unwind_Exception *a1)
{
  sub_45E914(v2);
  uint64_t v4 = *(void **)(v1 + 160);
  if (v4)
  {
    *(void *)(v1 + 168) = v4;
    operator delete(v4);
  }
  sub_20B132C(v1 + 136);
  _Unwind_Resume(a1);
}

uint64_t sub_EAFC44(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)(a1 + 48) = a2;
  long long v4 = *a3;
  long long v5 = a3[1];
  *(void *)(a1 + 88) = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 32) = *(void *)(a1 + 24);
  uint64_t result = sub_C73DB0((int **)a3);
  *(_DWORD *)(a1 + 96) = result;
  *(_WORD *)(a1 + 100) = 256;
  *(void *)(a1 + 102) = 0;
  return result;
}

unint64_t sub_EAFC9C(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = a1[4];
  if (v3 != v2 || a1[6])
  {
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 5);
    if (a2) {
      goto LABEL_4;
    }
LABEL_9:
    unint64_t result = a1[6];
    if (result) {
      return result;
    }
    unint64_t v7 = *(void *)(v3 + 32);
    int v8 = *(_DWORD *)(v3 + 80);
    char v9 = *(unsigned char *)(v3 + 88);
    return (((v7 >> 16) & 0xFFFF0000 | (v7 << 32) | (2 * ((v7 & 0xFF000000000000) == 0)))
          + 4 * (unsigned __int16)v8) & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  }
  unint64_t v4 = -1;
  if (!a2) {
    goto LABEL_9;
  }
LABEL_4:
  if (v4 != a2)
  {
    uint64_t v6 = sub_EB0278(a1 + 3, a2);
    unint64_t v7 = *(void *)(v6 + 32);
    int v8 = *(_DWORD *)(v6 + 80);
    char v9 = *(unsigned char *)(v6 + 88);
    return (((v7 >> 16) & 0xFFFF0000 | (v7 << 32) | (2 * ((v7 & 0xFF000000000000) == 0)))
          + 4 * (unsigned __int16)v8) & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
  }
  unint64_t result = a1[6];
  if (!result) {
    return (((*(void *)(v2 - 24) >> 16) & 0xFFFF0000 | (*(void *)(v2 - 24) << 32) | (2
  }
                                                                                         * ((*(void *)(v2 - 24) & 0xFF000000000000) == 0)))
          + (((unint64_t)*(unsigned int *)(v2 - 16) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v2 - 8) >> 1) & 1;
  return result;
}

uint64_t sub_EAFD8C(uint64_t a1, int **a2)
{
  sub_3DEE84((char **)(a1 + 24), a2);
  uint64_t result = sub_EB0B40(a2);
  *(_DWORD *)(a1 + 96) |= result;
  return result;
}

uint64_t sub_EAFDCC(uint64_t a1, unint64_t a2)
{
  return sub_EB0278((void *)(a1 + 24), a2);
}

void sub_EAFDD4(void *a1, unint64_t a2)
{
  uint64_t v3 = (unsigned char *)a1[3];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[5] - (void)v3) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    unint64_t v4 = (unsigned char *)a1[4];
    uint64_t v5 = 96 * a2;
    uint64_t v6 = (char *)operator new(96 * a2);
    unint64_t v7 = &v6[v4 - v3];
    int v8 = v7;
    if (v4 != v3)
    {
      char v9 = &v6[v4 - v3];
      do
      {
        long long v10 = *((_OWORD *)v4 - 5);
        *((_OWORD *)v9 - 6) = *((_OWORD *)v4 - 6);
        *((_OWORD *)v9 - 5) = v10;
        long long v11 = *((_OWORD *)v4 - 4);
        long long v12 = *((_OWORD *)v4 - 3);
        long long v13 = *((_OWORD *)v4 - 2);
        int v8 = v9 - 96;
        *(_OWORD *)(v9 - 20) = *(_OWORD *)(v4 - 20);
        *((_OWORD *)v9 - 3) = v12;
        *((_OWORD *)v9 - 2) = v13;
        *((_OWORD *)v9 - 4) = v11;
        v4 -= 96;
        v9 -= 96;
      }
      while (v4 != v3);
    }
    a1[3] = v8;
    a1[4] = v7;
    a1[5] = &v6[v5];
    if (v3)
    {
      operator delete(v3);
    }
  }
}

unint64_t sub_EAFECC(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 48);
  if (!result)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    return (((*(void *)(v3 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v3 + 32) << 32) | (2
                                                                                         * ((*(void *)(v3 + 32) & 0xFF000000000000) == 0)))
          + 4 * (unsigned __int16)*(_DWORD *)(v3 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v3 + 88) & 1;
  }
  return result;
}

unint64_t sub_EAFF14(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 48);
  if (!result)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    return (((*(void *)(v3 - 24) >> 16) & 0xFFFF0000 | (*(void *)(v3 - 24) << 32) | (2
                                                                                         * ((*(void *)(v3 - 24) & 0xFF000000000000) == 0)))
          + (((unint64_t)*(unsigned int *)(v3 - 16) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v3 - 8) >> 1) & 1;
  }
  return result;
}

uint64_t sub_EAFF60(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    return a1 + 56;
  }
  else {
    return *(void *)(a1 + 32) - 56;
  }
}

__n128 sub_EAFF7C(uint64_t a1, long long *a2)
{
  uint64_t v5 = (void *)(a1 + 224);
  unint64_t v4 = *(void **)(a1 + 224);
  long long v6 = *a2;
  long long v7 = a2[1];
  *(v5 - 1) = *((void *)a2 + 4);
  *(_OWORD *)(v5 - 3) = v7;
  *(_OWORD *)(v5 - 5) = v6;
  int v8 = (void *)a2 + 5;
  if (v4)
  {
    *(void *)(a1 + 232) = v4;
    operator delete(v4);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  char v9 = (long long *)(v5 - 5);
  *(_OWORD *)(a1 + 224) = *(long long *)((char *)a2 + 40);
  *(void *)(a1 + 240) = *((void *)a2 + 7);
  void *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  long long v10 = *(void **)(a1 + 248);
  if (v10)
  {
    *(void *)(a1 + 256) = v10;
    operator delete(v10);
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 264) = 0;
  }
  *(_OWORD *)(a1 + 248) = a2[4];
  *(void *)(a1 + 264) = *((void *)a2 + 10);
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *(_OWORD *)(a1 + 272) = *(long long *)((char *)a2 + 88);
  if (v9 != a2)
  {
    unsigned int v11 = *(_DWORD *)(a1 + 296);
    int v12 = *((_DWORD *)a2 + 28);
    if (v11 == v12)
    {
      if (v11 <= 1) {
        *(void *)(a1 + 288) = *((void *)a2 + 13);
      }
    }
    else
    {
      if (v12 == 1)
      {
        *(void *)(a1 + 288) = *((void *)a2 + 13);
        int v12 = *((_DWORD *)a2 + 28);
      }
      else if (!v12)
      {
        *(void *)(a1 + 288) = *((void *)a2 + 13);
      }
      *(_DWORD *)(a1 + 296) = v12;
    }
  }
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *(__n128 *)(a1 + 304) = result;
  return result;
}

char *sub_EB00A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v6 = (__n128 *)a1[3];
  uint64_t v5 = (__n128 *)a1[4];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v6) >> 5);
  unint64_t v8 = v7 + 1;
  if (v7 != -1)
  {
    if (v8 >= 0x666666666666667) {
      sub_2E00();
    }
    unint64_t v4 = (__int8 *)operator new(40 * v8);
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v4;
    *(void *)(a2 + 16) = &v4[40 * v8];
  }
  while (v6 != v5)
  {
    __n128 v9 = *v6;
    __n128 v10 = v6[1];
    unint64_t v14 = v6[2].n128_u64[0];
    v13[0] = v9;
    v13[1] = v10;
    unint64_t v4 = &sub_2E7FC8((char **)a2, (uint64_t)v4, v13)[2].n128_i8[8];
    v6 += 6;
  }
  if (a1[6]) {
    unsigned int v11 = (long long *)(a1 + 7);
  }
  else {
    unsigned int v11 = (long long *)(a1[4] - 56);
  }
  return sub_64F484((char **)a2, v11);
}

void sub_EB0198(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_EB01B8(void *a1, __n128 *a2)
{
  uint64_t v5 = a1 + 17;
  unint64_t v4 = (void *)a1[17];
  if (v4)
  {
    a1[18] = v4;
    operator delete(v4);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  __n128 result = *a2;
  *(__n128 *)(a1 + 17) = *a2;
  a1[19] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

__n128 sub_EB0218(__n128 *a1, __n128 *a2)
{
  uint64_t v5 = a1 + 10;
  unint64_t v4 = (void *)a1[10].n128_u64[0];
  if (v4)
  {
    a1[10].n128_u64[1] = (unint64_t)v4;
    operator delete(v4);
    v5->n128_u64[0] = 0;
    v5->n128_u64[1] = 0;
    v5[1].n128_u64[0] = 0;
  }
  __n128 result = *a2;
  a1[10] = *a2;
  a1[11].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_EB0278(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 5) <= a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    long long v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 5));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __n128 v10 = &v15;
    }
    else {
      __n128 v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 96 * a2;
}

void sub_EB03C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

unint64_t sub_EB04A8(uint64_t a1)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 5);
}

unint64_t sub_EB04C4(void *a1)
{
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  if (v1 == v2 && !a1[6]) {
    return 0;
  }
  else {
    return 0xAAAAAAAAAAAAAAABLL * ((v2 - v1) >> 5) + 1;
  }
}

void *sub_EB04FC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[3];
  uint64_t v3 = result[4];
  if (v2 == v3 && !result[6])
  {
    *a2 = result;
    a2[1] = 0;
    a2[2] = result;
    a2[3] = 0;
  }
  else
  {
    *a2 = result;
    a2[1] = 0;
    a2[2] = result;
    a2[3] = 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 5) + 1;
  }
  return result;
}

void *sub_EB0544@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[3];
  uint64_t v3 = result[4];
  if (v2 == v3 && !result[6])
  {
    *a2 = result;
    a2[1] = 0;
    a2[2] = result;
    a2[3] = 0;
  }
  else
  {
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 5) + 1;
    *a2 = result;
    a2[1] = v4;
    a2[2] = result;
    a2[3] = v4;
  }
  return result;
}

void *sub_EB058C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[3];
  uint64_t v3 = result[4];
  if (v2 == v3 && !result[6])
  {
    *a2 = result;
    a2[1] = 0;
    a2[2] = result;
    a2[3] = 0;
    a2[4] = result;
    a2[5] = 0;
    a2[6] = result;
    a2[7] = 0;
  }
  else
  {
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 5) + 1;
    *a2 = result;
    a2[1] = v4;
    a2[2] = result;
    a2[3] = v4;
    a2[4] = result;
    a2[5] = 0;
    a2[6] = result;
    a2[7] = 0;
  }
  return result;
}

uint64_t sub_EB05E4(uint64_t a1)
{
  return 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 144) - *(void *)(a1 + 136)) >> 3);
}

uint64_t sub_EB0608(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

uint64_t sub_EB0610(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

__n128 sub_EB0618@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 136);
  *a2 = result;
  return result;
}

uint64_t sub_EB0624(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = a1[4];
  if (v3 == v2 && !a1[6])
  {
    unint64_t v4 = -1;
    if (a2)
    {
LABEL_4:
      if (v4 != a2) {
        return sub_EB0278(a1 + 3, a2);
      }
      uint64_t v5 = v2 - 56;
      if (a1[6]) {
        return (uint64_t)(a1 + 7);
      }
      else {
        return v5;
      }
    }
  }
  else
  {
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v2 - v3) >> 5);
    if (a2) {
      goto LABEL_4;
    }
  }
  if (a1[6]) {
    return (uint64_t)(a1 + 7);
  }
  else {
    return a1[3];
  }
}

uint64_t sub_EB0698(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    uint64_t v3 = *(void *)(a1 + 32);
    if (v2 == v3 && !*(void *)(a1 + 48))
    {
      if (a2 == -1)
      {
LABEL_5:
        unsigned int v4 = *(_DWORD *)(a1 + 400);
        long long v7 = *(char **)(a1 + 24);
        long long v6 = *(char **)(a1 + 32);
        uint64_t v5 = (void *)(a1 + 24);
        if (v7 != v6) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
    }
    else if (0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 5) == a2)
    {
      goto LABEL_5;
    }
    unsigned int v4 = 1000000000;
    long long v7 = *(char **)(a1 + 24);
    long long v6 = *(char **)(a1 + 32);
    uint64_t v5 = (void *)(a1 + 24);
    if (v7 != v6) {
      goto LABEL_15;
    }
  }
  else if (*(void *)(a1 + 48))
  {
    unsigned int v4 = *(_DWORD *)(a1 + 400) - *(_DWORD *)(a1 + 328);
    long long v7 = *(char **)(a1 + 24);
    long long v6 = *(char **)(a1 + 32);
    uint64_t v5 = (void *)(a1 + 24);
    if (v7 != v6) {
      goto LABEL_15;
    }
  }
  else
  {
    unsigned int v4 = 1000000000 - *(_DWORD *)(a1 + 328);
    long long v7 = *(char **)(a1 + 24);
    long long v6 = *(char **)(a1 + 32);
    uint64_t v5 = (void *)(a1 + 24);
    if (v7 != v6) {
      goto LABEL_15;
    }
  }
LABEL_14:
  if (*(void *)(a1 + 48))
  {
LABEL_15:
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5);
    if (a2) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }
  unint64_t v8 = -1;
  if (a2)
  {
LABEL_16:
    if (v8 == a2)
    {
      long long v9 = v6 - 56;
      if (*(void *)(a1 + 48)) {
        __n128 v10 = (void *)(a1 + 56);
      }
      else {
        __n128 v10 = v9;
      }
    }
    else
    {
      __n128 v10 = (void *)sub_EB0278(v5, a2);
    }
    goto LABEL_25;
  }
LABEL_22:
  if (*(void *)(a1 + 48)) {
    __n128 v10 = (void *)(a1 + 56);
  }
  else {
    __n128 v10 = v7;
  }
LABEL_25:
  unsigned int v11 = (unsigned __int16 *)(*v10 - *(int *)*v10);
  double v12 = 0.0;
  if (*v11 >= 9u)
  {
    uint64_t v13 = v11[4];
    if (v13)
    {
      LODWORD(v12) = *(_DWORD *)(*v10 + v13);
      double v12 = (double)*(unint64_t *)&v12;
    }
  }
  double v14 = (double)v4 / 1000000000.0 * v12;
  if (v14 >= 0.0)
  {
    if (v14 < 4.50359963e15)
    {
      uint64_t v15 = (uint64_t)(v14 + v14) + 1;
      return (uint64_t)(double)(v15 >> 1);
    }
  }
  else if (v14 > -4.50359963e15)
  {
    uint64_t v15 = (uint64_t)(v14 + v14);
    if (v15 >= 1) {
      --v15;
    }
    return (uint64_t)(double)(v15 >> 1);
  }
  return (uint64_t)v14;
}

uint64_t sub_EB086C(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    return *(_DWORD *)(a1 + 328) <= *(_DWORD *)(a1 + 400)
        && *(_DWORD *)(a1 + 96) == sub_C73DB0((int **)(a1 + 56));
  }
  else
  {
    char v16 = 1;
    uint64_t v15 = &v16;
    uint64_t v3 = *(int ***)(a1 + 24);
    unsigned int v4 = *(int ***)(a1 + 32);
    if (v3 != v4 && v3 + 12 != v4)
    {
      do
      {
        sub_EB51F4((uint64_t)&v15, (uint64_t)v3, (uint64_t)(v3 + 12));
        long long v6 = v3 + 24;
        v3 += 12;
      }
      while (v6 != v4);
      uint64_t v3 = *(int ***)(a1 + 24);
      unsigned int v4 = *(int ***)(a1 + 32);
    }
    int v14 = 0;
    v12[0] = &v14;
    if (v3 == v4)
    {
      int v8 = 0;
      LOBYTE(v7) = 1;
    }
    else
    {
      do
      {
        BOOL v7 = sub_EB54B0(v12, v3);
        if (!v7) {
          break;
        }
        v3 += 12;
      }
      while (v3 != v4);
      int v8 = v14;
    }
    if (v16) {
      BOOL v9 = v7;
    }
    else {
      BOOL v9 = 0;
    }
    char v16 = v9;
    if (*(_DWORD *)(a1 + 96) != v8)
    {
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v12);
        sub_188FC78(v12, (uint64_t)"PathLeg has inconsistent cost features.", 39);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 3u);
        if (v11 < 0) {
          operator delete(__p);
        }
        if (v13 < 0) {
          operator delete(v12[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      char v16 = 0;
    }
    LODWORD(result) = sub_EAE734(a1 + 184);
    if (v16) {
      return result;
    }
    else {
      return 0;
    }
  }
}

void sub_EB0AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_EB0B40(int **a1)
{
  int v2 = sub_C73DB0(a1);
  uint64_t v3 = *a1;
  unsigned int v4 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v5 = *v4;
  if ((v5 < 0xB || !v4[5] || (*((unsigned char *)v3 + v4[5] + 1) & 1) == 0)
    && (long long v6 = a1[5], v7 = (unsigned __int16 *)((char *)v6 - *v6), *v7 >= 0xBu)
    && (uint64_t v8 = v7[5]) != 0
    && (*((unsigned char *)v6 + v8 + 1) & 1) != 0)
  {
    int v9 = 65;
    if (v5 < 0x2F) {
      goto LABEL_12;
    }
  }
  else
  {
    int v9 = 64;
    if (v5 < 0x2F) {
      goto LABEL_12;
    }
  }
  if (!v4[23] || *((unsigned char *)v3 + v4[23]))
  {
LABEL_12:
    __n128 v10 = a1[5];
    char v11 = (unsigned __int16 *)((char *)v10 - *v10);
    if (*v11 >= 0x2Fu)
    {
      uint64_t v12 = v11[23];
      if (v12)
      {
        if (!*((unsigned char *)v10 + v12)) {
          v9 |= 2u;
        }
      }
    }
    if (v5 < 0xB) {
      goto LABEL_19;
    }
  }
  if (v4[5] && (*((unsigned char *)v3 + v4[5]) & 8) != 0)
  {
    char v13 = a1[5];
    uint64_t v15 = -(uint64_t)*v13;
    goto LABEL_25;
  }
LABEL_19:
  char v13 = a1[5];
  uint64_t v14 = *v13;
  uint64_t v15 = -v14;
  char v16 = (unsigned __int16 *)((char *)v13 - v14);
  if (*v16 >= 0xBu)
  {
    uint64_t v17 = v16[5];
    if (v17)
    {
      if ((*((unsigned char *)v13 + v17) & 8) != 0)
      {
        unsigned int v18 = v9 | 4;
        long long v19 = (unsigned __int16 *)((char *)v13 + v15);
        unsigned int v20 = *v19;
        if (v20 < 0x2F) {
          goto LABEL_31;
        }
        goto LABEL_26;
      }
    }
  }
LABEL_25:
  unsigned int v18 = v9 & 0xFFFFFFFB;
  long long v19 = (unsigned __int16 *)((char *)v13 + v15);
  unsigned int v20 = *v19;
  if (v20 < 0x2F) {
    goto LABEL_31;
  }
LABEL_26:
  if (v19[23] && *((unsigned char *)v13 + v19[23]) == 21 && (v5 < 0x2F || !v4[23] || *((unsigned char *)v3 + v4[23]) != 21))
  {
    unsigned int v21 = v18 | 0x400000;
    if (*((unsigned char *)a1 + 38)) {
      goto LABEL_32;
    }
LABEL_38:
    if (v5 >= 0x4F)
    {
      uint64_t v23 = v4[39];
      if (v23)
      {
        if ((*(_WORD *)((unsigned char *)v3 + v23) & 0x80) != 0 || (*(_WORD *)((unsigned char *)v3 + v23) & 0x40) != 0) {
          goto LABEL_52;
        }
      }
    }
    goto LABEL_42;
  }
LABEL_31:
  unsigned int v21 = v18 & 0xFFBFFFFF;
  if (!*((unsigned char *)a1 + 38)) {
    goto LABEL_38;
  }
LABEL_32:
  if (v5 >= 0x4F)
  {
    uint64_t v22 = v4[39];
    if (v22)
    {
      if ((*(_WORD *)((unsigned char *)v3 + v22) & 8) != 0 || (*(_WORD *)((unsigned char *)v3 + v22) & 4) != 0) {
        goto LABEL_52;
      }
    }
  }
LABEL_42:
  if (!*((unsigned char *)a1 + 78))
  {
    if (v20 < 0x4F
      || !v19[39]
      || (*(_WORD *)((unsigned char *)v13 + v19[39]) & 2) == 0 && (*(_WORD *)((unsigned char *)v13 + v19[39]) & 1) == 0)
    {
      goto LABEL_53;
    }
LABEL_52:
    unsigned int v24 = v21 | 8;
    goto LABEL_54;
  }
  if (v20 >= 0x4F
    && v19[39]
    && ((*(_WORD *)((unsigned char *)v13 + v19[39]) & 0x20) != 0 || (*(_WORD *)((unsigned char *)v13 + v19[39]) & 0x10) != 0))
  {
    goto LABEL_52;
  }
LABEL_53:
  unsigned int v24 = v21 & 0xFFFFFFF7;
LABEL_54:
  if (sub_C75140(a1)) {
    int v25 = 1024;
  }
  else {
    int v25 = 0;
  }
  unsigned int v26 = v25 | v24 & 0xFFFFFBFF;
  uint64_t v27 = a1[5];
  double v28 = (unsigned __int16 *)((char *)v27 - *v27);
  unsigned int v29 = *v28;
  if (v29 < 0x2F)
  {
    if (v29 < 0x1B)
    {
      unsigned int v34 = v26 & 0xFFFFEFFF;
      if (v29 < 0xB) {
        goto LABEL_76;
      }
      uint64_t v35 = v28[5];
      if (!v35) {
        goto LABEL_76;
      }
      goto LABEL_74;
    }
  }
  else if (v28[23])
  {
    unsigned int v30 = *((unsigned __int8 *)v27 + v28[23]);
    BOOL v31 = v30 > 0x2D;
    uint64_t v32 = (1 << v30) & 0x208040000000;
    if (!v31 && v32 != 0) {
      goto LABEL_63;
    }
  }
  if (!v28[13] || *((unsigned __int8 *)v27 + v28[13]) < 8u || !v28[5] || (*((unsigned char *)v27 + v28[5] + 3) & 2) == 0)
  {
    unsigned int v34 = v26 & 0xFFFFEFFF;
    uint64_t v35 = v28[5];
    if (!v35) {
      goto LABEL_76;
    }
    goto LABEL_74;
  }
LABEL_63:
  unsigned int v34 = v26 | 0x1000;
  uint64_t v35 = v28[5];
  if (!v35) {
    goto LABEL_76;
  }
LABEL_74:
  if ((*(int *)((char *)v27 + v35) & 0x600000) == 0)
  {
LABEL_76:
    unsigned int v36 = v34 & 0xFFF7FFFF;
    goto LABEL_77;
  }
  unsigned int v36 = v34 | 0x80000;
LABEL_77:
  unsigned int v37 = v36 & 0xFFFF7FFF | ((((_BYTE)a1[11] & 3) == 1) << 15);
  int64_t v38 = a1[6];
  long long v39 = (unsigned __int16 *)((char *)v38 - *v38);
  if (*v39 < 0x11u || (uint64_t v40 = v39[8]) == 0)
  {
    unsigned int v41 = v37 & 0xFFFEFFFF;
    goto LABEL_83;
  }
  if ((*(_WORD *)((unsigned char *)v38 + v40) & 0x20) == 0
    || (long long v44 = a1[1], v45 = (unsigned __int16 *)((char *)v44 - *v44), *v45 >= 0x11u)
    && (uint64_t v46 = v45[8]) != 0
    && (*(_WORD *)((unsigned char *)v44 + v46) & 0x20) != 0)
  {
    unsigned int v41 = v37 & 0xFFFEFFFF;
    if ((*(_WORD *)((unsigned char *)v38 + v40) & 0x10) == 0) {
      goto LABEL_83;
    }
  }
  else
  {
    unsigned int v41 = v37 | 0x10000;
    if ((*(_WORD *)((unsigned char *)v38 + v40) & 0x10) == 0) {
      goto LABEL_83;
    }
  }
  uint64_t v47 = a1[1];
  int64_t v48 = (unsigned __int16 *)((char *)v47 - *v47);
  if (*v48 < 0x11u || (uint64_t v49 = v48[8]) == 0 || (*(_WORD *)((unsigned char *)v47 + v49) & 0x10) == 0)
  {
    unsigned int v42 = v41 | 0x20000;
    if (sub_EB46A0(a1)) {
      goto LABEL_94;
    }
    goto LABEL_84;
  }
LABEL_83:
  unsigned int v42 = v41 & 0xFFFDFFFF;
  if (sub_EB46A0(a1))
  {
LABEL_94:
    unsigned int v43 = v42 | 0x40000;
    return v43 & 0xFFEFFFFF | (((((_BYTE)a1[11] & 0x10) >> 4) & 1) << 20) | v2;
  }
LABEL_84:
  if (sub_EB4794(a1)) {
    goto LABEL_94;
  }
  unsigned int v43 = v42 & 0xFFFBFFFF;
  return v43 & 0xFFEFFFFF | (((((_BYTE)a1[11] & 0x10) >> 4) & 1) << 20) | v2;
}

void sub_EB0F78(uint64_t a1, int ***a2)
{
  unsigned int v5 = *(unsigned char **)(a1 + 24);
  long long v6 = *(unsigned char **)(a1 + 32);
  unsigned int v4 = (char **)(a1 + 24);
  uint64_t v7 = (char *)a2[1] - (char *)*a2;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 5) - 0x5555555555555555 * (v7 >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 40) - (void)v5) >> 5) < v8)
  {
    if (v8 >= 0x2AAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    int v9 = (char *)operator new(v7 + v6 - v5);
    __n128 v10 = &v9[32 * ((v6 - v5) >> 5)];
    char v11 = v10;
    if (v6 != v5)
    {
      uint64_t v12 = &v9[32 * ((v6 - v5) >> 5)];
      do
      {
        long long v13 = *((_OWORD *)v6 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v6 - 6);
        *((_OWORD *)v12 - 5) = v13;
        long long v14 = *((_OWORD *)v6 - 4);
        long long v15 = *((_OWORD *)v6 - 3);
        long long v16 = *((_OWORD *)v6 - 2);
        char v11 = v12 - 96;
        *(_OWORD *)(v12 - 20) = *(_OWORD *)(v6 - 20);
        *((_OWORD *)v12 - 3) = v15;
        *((_OWORD *)v12 - 2) = v16;
        *((_OWORD *)v12 - 4) = v14;
        v6 -= 96;
        v12 -= 96;
      }
      while (v6 != v5);
    }
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = &v9[96 * v8];
    if (v5) {
      operator delete(v5);
    }
  }
  unsigned int v18 = *a2;
  for (uint64_t i = a2[1]; v18 != i; v18 += 12)
  {
    sub_3DEE84(v4, v18);
    *(_DWORD *)(a1 + 96) |= sub_EB0B40(v18);
  }
}

__n128 sub_EB10BC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 48)) {
    BOOL v4 = *(void *)(a2 + 48) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 96) = 0;
  }
  sub_EB0F78(a1, (int ***)(a2 + 24));
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  __n128 result = *(__n128 *)(a2 + 416);
  long long v6 = *(_OWORD *)(a2 + 432);
  long long v7 = *(_OWORD *)(a2 + 448);
  *(void *)(a1 + 463) = *(void *)(a2 + 463);
  *(_OWORD *)(a1 + 432) = v6;
  *(_OWORD *)(a1 + 448) = v7;
  *(__n128 *)(a1 + 416) = result;
  return result;
}

char *sub_EB1130(void *a1, char *__src, _OWORD *a3)
{
  BOOL v4 = __src;
  long long v6 = (char *)a1[1];
  unint64_t v7 = a1[2];
  if ((unint64_t)v6 >= v7)
  {
    unsigned int v18 = (char *)*a1;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*a1] >> 5) + 1;
    if (v19 > 0x2AAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v18) >> 5);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x155555555555555) {
      unint64_t v21 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v21 = v19;
    }
    *(void *)&long long v44 = a1 + 2;
    if (v21)
    {
      if (v21 > 0x2AAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      uint64_t v22 = (char *)operator new(96 * v21);
    }
    else
    {
      uint64_t v22 = 0;
    }
    *(void *)&long long v42 = v22;
    *((void *)&v42 + 1) = &v22[32 * ((v4 - v18) >> 5)];
    __dst[0] = *((void **)&v42 + 1);
    __dst[1] = &v22[96 * v21];
    sub_EB5728((uint64_t)&v42, (uint64_t)a3);
    uint64_t v27 = *((void *)&v42 + 1);
    double v28 = (char *)*a1;
    uint64_t v29 = *((void *)&v42 + 1);
    if ((char *)*a1 != v4)
    {
      unsigned int v30 = v4;
      uint64_t v31 = *((void *)&v42 + 1);
      do
      {
        long long v32 = *(v30 - 5);
        *(_OWORD *)(v31 - 96) = *(v30 - 6);
        *(_OWORD *)(v31 - 80) = v32;
        long long v33 = *(v30 - 4);
        long long v34 = *(v30 - 3);
        long long v35 = *(v30 - 2);
        uint64_t v29 = v31 - 96;
        *(_OWORD *)(v31 - 20) = *(_OWORD *)((char *)v30 - 20);
        *(_OWORD *)(v31 - 48) = v34;
        *(_OWORD *)(v31 - 32) = v35;
        *(_OWORD *)(v31 - 64) = v33;
        v30 -= 6;
        v31 -= 96;
      }
      while (v30 != (_OWORD *)v28);
    }
    *((void *)&v42 + 1) = v29;
    unsigned int v36 = (char *)a1[1];
    unsigned int v37 = (char *)__dst[0];
    int64_t v38 = v36 - v4;
    if (v36 != v4)
    {
      memmove(__dst[0], v4, v38 - 4);
      uint64_t v29 = *((void *)&v42 + 1);
      BOOL v4 = (char *)a1[1];
    }
    long long v39 = (char *)*a1;
    *a1 = v29;
    a1[1] = &v37[v38];
    uint64_t v40 = (void *)a1[2];
    a1[2] = __dst[1];
    __dst[0] = v4;
    __dst[1] = v40;
    *(void *)&long long v42 = v39;
    *((void *)&v42 + 1) = v39;
    if (v4 != v39) {
      __dst[0] = &v39[(v4 - v39 - 96) % 0x60uLL];
    }
    if (v39) {
      operator delete(v39);
    }
    return (char *)v27;
  }
  else if (__src == v6)
  {
    long long v23 = a3[1];
    *(_OWORD *)__src = *a3;
    *((_OWORD *)__src + 1) = v23;
    long long v24 = a3[2];
    long long v25 = a3[3];
    long long v26 = a3[5];
    *((_OWORD *)__src + 4) = a3[4];
    *((_OWORD *)__src + 5) = v26;
    *((_OWORD *)__src + 2) = v24;
    *((_OWORD *)__src + 3) = v25;
    a1[1] = __src + 96;
  }
  else
  {
    long long v8 = a3[3];
    long long v44 = a3[2];
    long long v45 = v8;
    long long v9 = a3[5];
    *(_OWORD *)uint64_t v46 = a3[4];
    *(_OWORD *)&v46[16] = v9;
    long long v10 = a3[1];
    char v11 = __src + 96;
    uint64_t v12 = v6 - 96;
    long long v42 = *a3;
    *(_OWORD *)long long __dst = v10;
    long long v13 = v6;
    if ((unint64_t)v6 >= 0x60)
    {
      do
      {
        long long v14 = *((_OWORD *)v12 + 1);
        *(_OWORD *)long long v13 = *(_OWORD *)v12;
        *((_OWORD *)v13 + 1) = v14;
        long long v15 = *((_OWORD *)v12 + 2);
        long long v16 = *((_OWORD *)v12 + 3);
        long long v17 = *((_OWORD *)v12 + 5);
        *((_OWORD *)v13 + 4) = *((_OWORD *)v12 + 4);
        *((_OWORD *)v13 + 5) = v17;
        *((_OWORD *)v13 + 2) = v15;
        *((_OWORD *)v13 + 3) = v16;
        v12 += 96;
        v13 += 96;
      }
      while (v12 < v6);
    }
    a1[1] = v13;
    if (v6 != v11) {
      memmove(v11, __src, v6 - v11 - 4);
    }
    *((_OWORD *)v4 + 2) = v44;
    *((_OWORD *)v4 + 3) = v45;
    *((_OWORD *)v4 + 4) = *(_OWORD *)v46;
    *(_OWORD *)(v4 + 76) = *(_OWORD *)&v46[12];
    *(_OWORD *)BOOL v4 = v42;
    *((_OWORD *)v4 + 1) = *(_OWORD *)__dst;
  }
  return v4;
}

void sub_EB13F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  if (a11 == a10)
  {
    uint64_t v12 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v12 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

__n128 sub_EB144C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 48)) {
    BOOL v4 = *(void *)(a2 + 48) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    *(void *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 96) = 0;
  }
  long long v6 = *(int ***)(a2 + 24);
  for (uint64_t i = *(int ***)(a2 + 32); i != v6; *(_DWORD *)(a1 + 96) |= sub_EB0B40(i))
  {
    i -= 12;
    sub_EB1130((void *)(a1 + 24), *(char **)(a1 + 24), i);
  }
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  __n128 result = *(__n128 *)(a2 + 344);
  long long v8 = *(_OWORD *)(a2 + 360);
  long long v9 = *(_OWORD *)(a2 + 376);
  *(void *)(a1 + 391) = *(void *)(a2 + 391);
  *(_OWORD *)(a1 + 360) = v8;
  *(_OWORD *)(a1 + 376) = v9;
  *(__n128 *)(a1 + 344) = result;
  return result;
}

int **sub_EB1504(uint64_t a1, int **__dst, int **a3, int a4)
{
  long long v6 = *(int ***)(a1 + 24);
  if (v6 != __dst || *(int ***)(a1 + 32) != a3)
  {
    if (v6 != __dst && a4 != 0)
    {
      long long v8 = *(_OWORD *)(a3 - 7);
      long long v9 = *(_OWORD *)(a3 - 5);
      *(__dst - 3) = *(a3 - 3);
      *(_OWORD *)(__dst - 5) = v9;
      *(_OWORD *)(__dst - 7) = v8;
      long long v6 = *(int ***)(a1 + 24);
    }
    if (__dst == a3)
    {
      uint64_t v12 = *(int ***)(a1 + 32);
      *(_DWORD *)(a1 + 96) = 0;
    }
    else
    {
      long long v10 = *(int ***)(a1 + 32);
      int64_t v11 = (char *)v10 - (char *)a3;
      if (v10 != a3)
      {
        memmove(__dst, a3, v11 - 4);
        long long v6 = *(int ***)(a1 + 24);
      }
      uint64_t v12 = (int **)((char *)__dst + v11);
      *(void *)(a1 + 32) = v12;
      *(_DWORD *)(a1 + 96) = 0;
    }
    while (v6 != v12)
    {
      *(_DWORD *)(a1 + 96) |= sub_EB0B40(v6);
      v6 += 12;
    }
  }
  return __dst;
}

uint64_t sub_EB15DC(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    uint64_t v1 = *(int **)(a1 + 56);
    int v2 = (unsigned __int16 *)((char *)v1 - *v1);
    double v3 = 0.0;
    if (*v2 >= 9u)
    {
      uint64_t v4 = v2[4];
      if (v4)
      {
        LODWORD(v3) = *(int *)((char *)v1 + v4);
        double v3 = (double)*(unint64_t *)&v3;
      }
    }
    double v5 = v3 * ((double)(*(_DWORD *)(a1 + 400) - *(_DWORD *)(a1 + 328)) / 1000000000.0);
    if (v5 >= 0.0)
    {
      if (v5 < 4.50359963e15)
      {
        uint64_t v6 = (uint64_t)(v5 + v5) + 1;
        return (uint64_t)(double)(v6 >> 1);
      }
    }
    else if (v5 > -4.50359963e15)
    {
      uint64_t v6 = (uint64_t)(v5 + v5);
      if (v6 >= 1) {
        --v6;
      }
      return (uint64_t)(double)(v6 >> 1);
    }
    return (uint64_t)v5;
  }
  unint64_t v7 = *(void **)(a1 + 24);
  long long v8 = (unsigned __int16 *)(*v7 - *(int *)*v7);
  double v9 = 0.0;
  if (*v8 >= 9u)
  {
    uint64_t v10 = v8[4];
    if (v10)
    {
      LODWORD(v9) = *(_DWORD *)(*v7 + v10);
      double v9 = (double)*(unint64_t *)&v9;
    }
  }
  double v11 = v9 * ((double)(1000000000 - *(_DWORD *)(a1 + 328)) / 1000000000.0);
  if (v11 >= 0.0)
  {
    HIDWORD(v12) = 1127219200;
    if (v11 >= 4.50359963e15) {
      goto LABEL_25;
    }
    uint64_t v13 = (uint64_t)(v11 + v11) + 1;
  }
  else
  {
    HIDWORD(v12) = -1020264448;
    if (v11 <= -4.50359963e15) {
      goto LABEL_25;
    }
    uint64_t v13 = (uint64_t)(v11 + v11);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v11 = (double)(v13 >> 1);
LABEL_25:
  uint64_t v15 = (uint64_t)v11;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = (v16 - (uint64_t)v7) >> 5;
  unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * v17;
  if (0xAAAAAAAAAAAAAAABLL * v17 <= 1) {
    unint64_t v19 = 1;
  }
  else {
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * v17;
  }
  if (v18 >= 2)
  {
    unint64_t v20 = v7 + 12;
    unint64_t v21 = v19 - 1;
    do
    {
      while (1)
      {
        uint64_t v22 = (unsigned __int16 *)(*v20 - *(int *)*v20);
        if (*v22 >= 9u)
        {
          uint64_t v23 = v22[4];
          if (v23) {
            break;
          }
        }
        v20 += 12;
        if (!--v21) {
          goto LABEL_34;
        }
      }
      v15 += *(unsigned int *)(*v20 + v23);
      v20 += 12;
      --v21;
    }
    while (v21);
  }
LABEL_34:
  long long v24 = *(int **)(v16 - 56);
  long long v25 = (unsigned __int16 *)((char *)v24 - *v24);
  double v26 = 0.0;
  if (*v25 >= 9u)
  {
    uint64_t v27 = v25[4];
    if (v27)
    {
      LODWORD(v26) = *(int *)((char *)v24 + v27);
      double v26 = (double)*(unint64_t *)&v26;
    }
  }
  LODWORD(v12) = *(_DWORD *)(a1 + 400);
  double v28 = v26 * ((double)v12 / 1000000000.0);
  if (v28 >= 0.0)
  {
    if (v28 < 4.50359963e15)
    {
      uint64_t v29 = (uint64_t)(v28 + v28) + 1;
LABEL_44:
      double v28 = (double)(v29 >> 1);
    }
  }
  else if (v28 > -4.50359963e15)
  {
    uint64_t v29 = (uint64_t)(v28 + v28);
    if (v29 >= 1) {
      --v29;
    }
    goto LABEL_44;
  }
  return v15 + (uint64_t)v28;
}

uint64_t sub_EB1858(uint64_t a1)
{
  return *(void *)(a1 + 336);
}

double sub_EB1860(uint64_t a1)
{
  return *(double *)(a1 + 344);
}

uint64_t sub_EB1868(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 392);
}

BOOL sub_EB1870(uint64_t a1, void *a2)
{
  if ((*(void *)(a1 + 48) != 0) != (a2[6] != 0)) {
    return 0;
  }
  BOOL result = sub_EB45A4(a1 + 328, (uint64_t)(a2 + 41));
  if (result)
  {
    BOOL result = sub_EB45A4(a1 + 400, (uint64_t)(a2 + 50));
    if (result)
    {
      if (*(void *)(a1 + 48) && a2[6])
      {
        unint64_t v5 = a2[11];
        if (__PAIR64__(*(unsigned __int16 *)(a1 + 92), *(_DWORD *)(a1 + 88)) == __PAIR64__(WORD2(v5), v5)) {
          return HIWORD(v5) & 1 ^ (*(unsigned char *)(a1 + 94) == 0);
        }
        return 0;
      }
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v8 = a2[3];
      if (v6 - v7 != a2[4] - v8) {
        return 0;
      }
      if (v7 != v6)
      {
        uint64_t v9 = 0;
        while (1)
        {
          unint64_t v10 = *(void *)(v8 + v9 + 32);
          if (__PAIR64__(*(unsigned __int16 *)(v7 + v9 + 36), *(_DWORD *)(v7 + v9 + 32)) != __PAIR64__(WORD2(v10), v10)) {
            break;
          }
          if ((HIWORD(v10) & 1) == (*(unsigned char *)(v7 + v9 + 38) == 0)) {
            break;
          }
          unint64_t v11 = *(void *)(v8 + v9 + 72);
          if (__PAIR64__(*(unsigned __int16 *)(v7 + v9 + 76), *(_DWORD *)(v7 + v9 + 72)) != __PAIR64__(WORD2(v11), v11)
            || (HIWORD(v11) & 1) == (*(unsigned char *)(v7 + v9 + 78) == 0))
          {
            break;
          }
          BOOL result = 0;
          unsigned int v12 = *(_DWORD *)(v7 + v9 + 80);
          if ((unsigned __int16)*(_DWORD *)(v8 + v9 + 80) != (unsigned __int16)v12
            || (*(_DWORD *)(v8 + v9 + 80) ^ v12) >> 16)
          {
            return result;
          }
          if (((*(unsigned char *)(v8 + v9 + 88) ^ *(unsigned char *)(v7 + v9 + 88)) & 3) != 0
            || ((*(_WORD *)(v8 + v9 + 84) ^ *(_WORD *)(v7 + v9 + 84)) & 0x7FFF) != 0)
          {
            return 0;
          }
          BOOL result = 0;
          if (((*(unsigned char *)(v8 + v9 + 88) ^ *(unsigned char *)(v7 + v9 + 88)) & 0x1C) == 0
            && *(unsigned __int16 *)(v8 + v9 + 86) == *(unsigned __int16 *)(v7 + v9 + 86))
          {
            v9 += 96;
            BOOL result = 1;
            if (v7 + v9 != v6) {
              continue;
            }
          }
          return result;
        }
        return 0;
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_EB1A90(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = -1610547201;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 102) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 108) = 256;
  *(void *)(a1 + 110) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 192) = 0x7FFFFFFF;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 200) = 0x7FFFFFFF;
  *(void *)(a1 + 204) = 0x7FFFFFFF7FFFFFFFLL;
  *(void *)(a1 + 224) = 0x8000000080000000;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(unsigned char *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 284) = 0x7FFFFFFF;
  *(void *)(a1 + 288) = 0x8000000080000000;
  *(_DWORD *)(a1 + 304) = -1;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 328) = -1;
  *(_DWORD *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 368) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 376) = 1;
  *(unsigned char *)(a1 + 400) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 402) = 36000;
  *(unsigned char *)(a1 + 406) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(unsigned char *)(a1 + 432) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 440) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 448) = 1;
  *(unsigned char *)(a1 + 472) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 474) = 36000;
  *(unsigned char *)(a1 + 478) = 0;
  sub_EB1BF8(a1);
  return a1;
}

void sub_EB1BC0(_Unwind_Exception *a1)
{
  sub_45E914(v2);
  uint64_t v4 = *(void **)(v1 + 168);
  if (v4)
  {
    *(void *)(v1 + 176) = v4;
    operator delete(v4);
  }
  sub_20B13A4(v1 + 144);
  _Unwind_Resume(a1);
}

void sub_EB1BF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  for (uint64_t i = *(void *)(a1 + 128); i != v2; i -= 56)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  *(void *)(a1 + 128) = v2;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = *(void *)(a1 + 24);
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 56) = 0xA000FFFF00000000;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 102) = 0;
  *(_WORD *)(a1 + 108) = 256;
  *(void *)(a1 + 110) = 0;
  *(void *)(a1 + 192) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 200) = 0x7FFFFFFF;
  *(void *)(a1 + 204) = 0x7FFFFFFF7FFFFFFFLL;
  *(_DWORD *)(a1 + 212) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0x8000000080000000;
  uint64_t v6 = (void *)(a1 + 232);
  unint64_t v5 = *(void **)(a1 + 232);
  if (v5)
  {
    *(void *)(a1 + 240) = v5;
    operator delete(v5);
    *uint64_t v6 = 0;
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
  }
  *uint64_t v6 = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  uint64_t v7 = *(void **)(a1 + 256);
  if (v7)
  {
    *(void *)(a1 + 264) = v7;
    operator delete(v7);
  }
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(void *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 284) = 0x7FFFFFFF;
  *(void *)(a1 + 288) = 0x8000000080000000;
  if (*(_DWORD *)(a1 + 304) != -1) {
    *(_DWORD *)(a1 + 304) = -1;
  }
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v8 = *(void *)(a1 + 168);
  uint64_t v9 = *(void *)(a1 + 144);
  *(_DWORD *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 376) = 1;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  *(_DWORD *)(a1 + 402) = 36000;
  *(unsigned char *)(a1 + 406) = 0;
  *(_DWORD *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 448) = 1;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(unsigned char *)(a1 + 472) = 0;
  *(_DWORD *)(a1 + 474) = 36000;
  *(unsigned char *)(a1 + 478) = 0;
  *(void *)(a1 + 152) = v9;
  *(void *)(a1 + 176) = v8;
}

uint64_t sub_EB1D98@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  if (sub_EB209C(a1, a2))
  {
    return sub_EB1A90(a3);
  }
  uint64_t v7 = *a1;
  sub_EB1A90(a3);
  uint64_t v8 = *(void *)(v7 + 108);
  *(_WORD *)(a3 + 116) = *(_WORD *)(v7 + 116);
  *(void *)(a3 + 108) = v8;
  uint64_t v35 = v7;
  uint64_t v36 = 0;
  if (sub_EB209C(a1, &v35))
  {
    *(_OWORD *)(a3 + 336) = *(_OWORD *)(v7 + 336);
    long long v9 = *(_OWORD *)(v7 + 352);
    long long v10 = *(_OWORD *)(v7 + 368);
    long long v11 = *(_OWORD *)(v7 + 384);
    *(void *)(a3 + 399) = *(void *)(v7 + 399);
    *(_OWORD *)(a3 + 368) = v10;
    *(_OWORD *)(a3 + 384) = v11;
    *(_OWORD *)(a3 + 352) = v9;
    sub_EB22E4(a3, (long long *)(v7 + 192));
  }
  uint64_t v12 = *(void *)(v7 + 24);
  uint64_t v13 = *(void *)(v7 + 32);
  long long v14 = (void *)(v7 + 24);
  if (v12 == v13 && !*(_DWORD *)(v7 + 48)) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = 0x4EC4EC4EC4EC4EC5 * ((v13 - v12) >> 3) + 1;
  }
  uint64_t v35 = v7;
  uint64_t v36 = v15;
  uint64_t result = sub_EB209C(a2, &v35);
  if (result)
  {
    *(_OWORD *)(a3 + 408) = *(_OWORD *)(v7 + 408);
    long long v16 = *(_OWORD *)(v7 + 424);
    long long v17 = *(_OWORD *)(v7 + 440);
    long long v18 = *(_OWORD *)(v7 + 456);
    *(void *)(a3 + 471) = *(void *)(v7 + 471);
    *(_OWORD *)(a3 + 440) = v17;
    *(_OWORD *)(a3 + 456) = v18;
    *(_OWORD *)(a3 + 424) = v16;
    unint64_t v19 = a1[1];
    uint64_t v20 = a2[1];
    if (v20 - v19 != 1) {
      goto LABEL_12;
    }
LABEL_19:
    unint64_t v24 = sub_EB249C((void *)v7, v19);
    uint64_t v26 = *a1;
    unint64_t v25 = a1[1];
    uint64_t v27 = *(void *)(*a1 + 24);
    uint64_t v28 = *(void *)(*a1 + 32);
    if (v27 == v28 && !*(_DWORD *)(v26 + 48))
    {
      uint64_t v29 = -1;
      if (v25)
      {
LABEL_22:
        if (v29 == v25)
        {
          if (*(_DWORD *)(v26 + 48)) {
            unsigned int v30 = (long long *)(v26 + 56);
          }
          else {
            unsigned int v30 = (long long *)(v28 - 56);
          }
        }
        else
        {
          unsigned int v30 = (long long *)sub_EB2C20((void *)(*a1 + 24), v25);
        }
LABEL_32:
        *(void *)(a3 + 48) = v24;
        long long v33 = *v30;
        long long v34 = v30[1];
        *(_OWORD *)(a3 + 88) = v30[2];
        *(_OWORD *)(a3 + 72) = v34;
        *(_OWORD *)(a3 + 56) = v33;
        *(void *)(a3 + 32) = *(void *)(a3 + 24);
        uint64_t result = sub_EB26F0((uint64_t)v30);
        *(_DWORD *)(a3 + 104) = result;
        *(_WORD *)(a3 + 108) = 256;
        *(void *)(a3 + 110) = 0;
        return result;
      }
    }
    else
    {
      uint64_t v29 = 0x4EC4EC4EC4EC4EC5 * ((v28 - v27) >> 3);
      if (v25) {
        goto LABEL_22;
      }
    }
    int v31 = *(_DWORD *)(v26 + 48);
    long long v32 = (long long *)(v26 + 56);
    if (v31) {
      unsigned int v30 = v32;
    }
    else {
      unsigned int v30 = *(long long **)(*a1 + 24);
    }
    goto LABEL_32;
  }
  *(_DWORD *)(a3 + 408) = 1000000000;
  unint64_t v19 = a1[1];
  uint64_t v20 = a2[1];
  if (v20 - v19 == 1) {
    goto LABEL_19;
  }
LABEL_12:
  unint64_t v21 = v20 - 1;
  if (v19 <= v21) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = v19;
  }
  if (v19 < v21)
  {
    do
    {
      uint64_t v23 = (long long *)sub_EB2C20(v14, v19);
      sub_EB3528((char **)(a3 + 24), v23);
      uint64_t result = sub_EB36D4((uint64_t)v23);
      *(_DWORD *)(a3 + 104) |= result;
      ++v19;
    }
    while (v22 != v19);
  }
  return result;
}

void sub_EB204C(_Unwind_Exception *a1)
{
  sub_4451C0(v1);
  _Unwind_Resume(a1);
}

void sub_EB2060(_Unwind_Exception *a1)
{
  sub_4451C0(v1);
  _Unwind_Resume(a1);
}

void sub_EB2074(_Unwind_Exception *a1)
{
  sub_4451C0(v1);
  _Unwind_Resume(a1);
}

void sub_EB2088(_Unwind_Exception *a1)
{
  sub_4451C0(v1);
  _Unwind_Resume(a1);
}

BOOL sub_EB209C(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (!*a1)
  {
    BOOL v6 = 0;
    uint64_t v7 = *a2;
    if (*a2) {
      goto LABEL_7;
    }
LABEL_23:
    BOOL v13 = 0;
    return v6 ^ v13 ^ 1;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  if (v4 == v5 && !*(_DWORD *)(v3 + 48))
  {
    BOOL v6 = 0;
    uint64_t v7 = *a2;
    if (*a2) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
  BOOL v6 = a1[1] < (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v5 - v4) >> 3) + 1);
  uint64_t v7 = *a2;
  if (!*a2) {
    goto LABEL_23;
  }
LABEL_7:
  unint64_t v8 = a2[1];
  uint64_t v9 = *(void *)(v7 + 24);
  uint64_t v10 = *(void *)(v7 + 32);
  if (v9 == v10 && !*(_DWORD *)(v7 + 48)) {
    goto LABEL_23;
  }
  unint64_t v11 = 0x4EC4EC4EC4EC4EC5 * ((v10 - v9) >> 3) + 1;
  BOOL v12 = v8 >= v11;
  BOOL v13 = v8 < v11;
  if (v12 || !v6) {
    return v6 ^ v13 ^ 1;
  }
  unint64_t v15 = a1[1];
  uint64_t v17 = *(void *)(v3 + 24);
  uint64_t v16 = *(void *)(v3 + 32);
  if (v17 != v16 || *(_DWORD *)(v3 + 48))
  {
    uint64_t v18 = 0x4EC4EC4EC4EC4EC5 * ((v16 - v17) >> 3);
    if (v15) {
      goto LABEL_16;
    }
LABEL_28:
    int v24 = *(_DWORD *)(v3 + 48);
    uint64_t v25 = v3 + 56;
    if (v24) {
      uint64_t v22 = v25;
    }
    else {
      uint64_t v22 = v17;
    }
    if (v9 != v10) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  uint64_t v18 = -1;
  if (!v15) {
    goto LABEL_28;
  }
LABEL_16:
  if (v18 == v15)
  {
    int v19 = *(_DWORD *)(v3 + 48);
    uint64_t v20 = v16 - 56;
    uint64_t v21 = v3 + 56;
    if (v19) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = v20;
    }
    if (v9 != v10) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v22 = sub_EB2C20((void *)(v3 + 24), v15);
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    uint64_t v9 = *(void *)(*a2 + 24);
    uint64_t v10 = *(void *)(*a2 + 32);
    if (v9 != v10) {
      goto LABEL_33;
    }
  }
LABEL_32:
  if (!*(_DWORD *)(v7 + 48))
  {
    uint64_t v26 = -1;
    if (v8) {
      goto LABEL_34;
    }
LABEL_38:
    int v27 = *(_DWORD *)(v7 + 48);
    goto LABEL_39;
  }
LABEL_33:
  uint64_t v26 = 0x4EC4EC4EC4EC4EC5 * ((v10 - v9) >> 3);
  if (!v8) {
    goto LABEL_38;
  }
LABEL_34:
  if (v26 != v8) {
    return v22 == sub_EB2C20((void *)(v7 + 24), v8);
  }
  int v27 = *(_DWORD *)(v7 + 48);
  uint64_t v9 = v10 - 56;
LABEL_39:
  uint64_t v28 = v7 + 56;
  if (v27) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = v9;
  }
  return v22 == v29;
}

uint64_t sub_EB22AC(uint64_t a1)
{
  return a1 + 108;
}

__n128 sub_EB22B4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 336) = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 399) = *(void *)(a2 + 63);
  *(_OWORD *)(a1 + 368) = v3;
  *(_OWORD *)(a1 + 384) = v4;
  *(__n128 *)(a1 + 352) = result;
  return result;
}

uint64_t sub_EB22DC(uint64_t a1)
{
  return a1 + 336;
}

__n128 sub_EB22E4(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 224) = *((void *)a2 + 4);
  *(_OWORD *)(a1 + 192) = v4;
  *(_OWORD *)(a1 + 208) = v5;
  if ((long long *)(a1 + 192) == a2)
  {
    *(_OWORD *)(a1 + 280) = *(long long *)((char *)a2 + 88);
  }
  else
  {
    sub_472BC8((void *)(a1 + 232), *((char **)a2 + 5), *((char **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 2));
    sub_472BC8((void *)(a1 + 256), *((char **)a2 + 8), *((char **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 2));
    *(_OWORD *)(a1 + 280) = *(long long *)((char *)a2 + 88);
    unsigned int v6 = *(_DWORD *)(a1 + 304);
    int v7 = *((_DWORD *)a2 + 28);
    if (v6 == v7)
    {
      if (v6 <= 1) {
        *(void *)(a1 + 296) = *((void *)a2 + 13);
      }
    }
    else
    {
      if (v7 == 1)
      {
        *(void *)(a1 + 296) = *((void *)a2 + 13);
        int v7 = *((_DWORD *)a2 + 28);
      }
      else if (!v7)
      {
        *(void *)(a1 + 296) = *((void *)a2 + 13);
      }
      *(_DWORD *)(a1 + 304) = v7;
    }
  }
  __n128 result = *(__n128 *)((char *)a2 + 120);
  *(__n128 *)(a1 + 312) = result;
  return result;
}

__n128 sub_EB241C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 408) = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 471) = *(void *)(a2 + 63);
  *(_OWORD *)(a1 + 440) = v3;
  *(_OWORD *)(a1 + 456) = v4;
  *(__n128 *)(a1 + 424) = result;
  return result;
}

uint64_t sub_EB2444(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)(a1 + 48) = a2;
  long long v4 = *a3;
  long long v5 = a3[1];
  *(_OWORD *)(a1 + 88) = a3[2];
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 32) = *(void *)(a1 + 24);
  uint64_t result = sub_EB26F0((uint64_t)a3);
  *(_DWORD *)(a1 + 104) = result;
  *(_WORD *)(a1 + 108) = 256;
  *(void *)(a1 + 110) = 0;
  return result;
}

unint64_t sub_EB249C(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = a1[4];
  if (v3 == v2 && !*((_DWORD *)a1 + 12))
  {
    uint64_t v4 = -1;
    if (a2) {
      goto LABEL_4;
    }
LABEL_9:
    if (*((_DWORD *)a1 + 12)) {
      return a1[6];
    }
    uint64_t v7 = *(void *)v3;
    unsigned int v8 = *(_DWORD *)(v3 + 96);
    goto LABEL_12;
  }
  uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((v2 - v3) >> 3);
  if (!a2) {
    goto LABEL_9;
  }
LABEL_4:
  if (v4 == a2)
  {
    if (*((_DWORD *)a1 + 12)) {
      return a1[6];
    }
    uint64_t v7 = *(void *)(v2 - 56);
    int v9 = *(_DWORD *)(v2 - 8) >> 28;
    goto LABEL_14;
  }
  uint64_t v6 = sub_EB2C20(a1 + 3, a2);
  uint64_t v7 = *(void *)v6;
  unsigned int v8 = *(_DWORD *)(v6 + 96);
LABEL_12:
  int v9 = v8 >> 27;
LABEL_14:
  unsigned int v10 = HIDWORD(v7) & 0x40000000;
  if (v7 < 0 && v10 == 0) {
    int v12 = 0x40000000;
  }
  else {
    int v12 = 0;
  }
  return v7 | ((HIDWORD(v7) & 0xFFFFFFF | (v9 << 31) | ((unint64_t)v7 >> 33) & 0x10000000 | (v10 >> 1) | v12) << 32);
}

uint64_t sub_EB258C(uint64_t a1, long long *a2)
{
  sub_EB3528((char **)(a1 + 24), a2);
  uint64_t result = sub_EB36D4((uint64_t)a2);
  *(_DWORD *)(a1 + 104) |= result;
  return result;
}

uint64_t sub_EB25CC(uint64_t a1, unint64_t a2)
{
  return sub_EB2C20((void *)(a1 + 24), a2);
}

void sub_EB25D4(void *a1, unint64_t a2)
{
  uint64_t v3 = (unsigned char *)a1[3];
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[5] - (void)v3) >> 3) < a2)
  {
    if (a2 >= 0x276276276276277) {
      sub_2E00();
    }
    uint64_t v4 = (unsigned char *)a1[4];
    uint64_t v5 = 104 * a2;
    uint64_t v6 = (char *)operator new(104 * a2);
    uint64_t v7 = &v6[v4 - v3];
    unsigned int v8 = v7;
    if (v4 != v3)
    {
      int v9 = &v6[v4 - v3];
      do
      {
        long long v10 = *(_OWORD *)(v4 - 104);
        long long v11 = *(_OWORD *)(v4 - 88);
        *(_OWORD *)(v9 - 72) = *(_OWORD *)(v4 - 72);
        *(_OWORD *)(v9 - 88) = v11;
        *(_OWORD *)(v9 - 104) = v10;
        long long v12 = *(_OWORD *)(v4 - 56);
        long long v13 = *(_OWORD *)(v4 - 40);
        long long v14 = *(_OWORD *)(v4 - 24);
        unsigned int v8 = v9 - 104;
        *((_DWORD *)v9 - 2) = *((_DWORD *)v4 - 2);
        *(_OWORD *)(v9 - 24) = v14;
        *(_OWORD *)(v9 - 40) = v13;
        *(_OWORD *)(v9 - 56) = v12;
        v4 -= 104;
        v9 -= 104;
      }
      while (v4 != v3);
    }
    a1[3] = v8;
    a1[4] = v7;
    a1[5] = &v6[v5];
    if (v3)
    {
      operator delete(v3);
    }
  }
}

uint64_t sub_EB26F0(uint64_t a1)
{
  uint64_t v1 = *(int **)(a1 + 8);
  uint64_t v2 = (unsigned __int16 *)((char *)v1 - *v1);
  unsigned int v3 = *v2;
  if (v3 < 0xB)
  {
    int v5 = 0;
    goto LABEL_13;
  }
  uint64_t v4 = v2[5];
  if (!v2[5] || (*((unsigned char *)v1 + v4) & 8) == 0)
  {
    int v5 = 0;
    if (v3 <= 0x38) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  int v5 = 1;
  if (v3 >= 0x39)
  {
LABEL_8:
    if (v2[28]) {
      v5 |= (*(unsigned int *)((char *)v1 + v2[28]) >> 7) & 2;
    }
LABEL_10:
    if (!v2[5]) {
      goto LABEL_13;
    }
  }
  if (*((unsigned char *)v1 + v4 + 3)) {
    v5 |= 4u;
  }
LABEL_13:
  if (v3 >= 0x2F && v2[23])
  {
    unsigned int v6 = *((unsigned __int8 *)v1 + v2[23]);
    BOOL v7 = v6 > 0x2F;
    uint64_t v8 = (1 << v6) & 0xE2E040048000;
    if (!v7 && v8 != 0) {
      v5 |= 0x20u;
    }
  }
  if (*(unsigned char *)(a1 + 46))
  {
    double v10 = 0.0;
    if (v3 < 0x57) {
      goto LABEL_37;
    }
    if (v2[43])
    {
      long long v11 = (int *)((char *)v1 + v2[43] + *(unsigned int *)((char *)v1 + v2[43]));
      long long v12 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v12 < 7u) {
        goto LABEL_37;
      }
      unsigned int v13 = v12[3];
      if (!v13) {
        goto LABEL_37;
      }
LABEL_36:
      LOWORD(v10) = *(_WORD *)((char *)v11 + v13);
      double v10 = (double)*(unint64_t *)&v10 + (double)*(unint64_t *)&v10;
      goto LABEL_37;
    }
    if (v3 >= 0x7D)
    {
      unsigned int v13 = v2[62];
      long long v11 = *(int **)(a1 + 8);
      if (v2[62]) {
        goto LABEL_36;
      }
    }
  }
  else
  {
    double v10 = 0.0;
    if (v3 < 0x57) {
      goto LABEL_37;
    }
    if (v2[43])
    {
      long long v11 = (int *)((char *)v1 + v2[43] + *(unsigned int *)((char *)v1 + v2[43]));
      long long v14 = (unsigned __int16 *)((char *)v11 - *v11);
      if (*v14 >= 5u)
      {
        unsigned int v13 = v14[2];
        if (v13) {
          goto LABEL_36;
        }
      }
    }
    else if (v3 >= 0x7B)
    {
      unsigned int v13 = v2[61];
      long long v11 = *(int **)(a1 + 8);
      if (v2[61]) {
        goto LABEL_36;
      }
    }
  }
LABEL_37:
  if (v10 / 65535.0 <= 0.0)
  {
    double v15 = 0.0;
    if (*(unsigned char *)(a1 + 46))
    {
      if (v3 < 0x57) {
        goto LABEL_55;
      }
      if (v2[43])
      {
        uint64_t v16 = (int *)((char *)v1 + v2[43] + *(unsigned int *)((char *)v1 + v2[43]));
        uint64_t v17 = (unsigned __int16 *)((char *)v16 - *v16);
        if (*v17 < 5u) {
          goto LABEL_55;
        }
        unsigned int v18 = v17[2];
        if (!v18) {
          goto LABEL_55;
        }
        goto LABEL_54;
      }
      if (v3 < 0x7B) {
        goto LABEL_55;
      }
      unsigned int v18 = v2[61];
    }
    else
    {
      if (v3 < 0x57) {
        goto LABEL_55;
      }
      if (v2[43])
      {
        uint64_t v16 = (int *)((char *)v1 + v2[43] + *(unsigned int *)((char *)v1 + v2[43]));
        int v19 = (unsigned __int16 *)((char *)v16 - *v16);
        if (*v19 < 7u || (unsigned int v18 = v19[3]) == 0)
        {
LABEL_55:
          if (v15 / 65535.0 <= 0.0) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }
LABEL_54:
        LOWORD(v15) = *(_WORD *)((char *)v16 + v18);
        double v15 = (double)*(unint64_t *)&v15 + (double)*(unint64_t *)&v15;
        goto LABEL_55;
      }
      if (v3 < 0x7D) {
        goto LABEL_55;
      }
      unsigned int v18 = v2[62];
    }
    uint64_t v16 = *(int **)(a1 + 8);
    if (!v18) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_56:
  v5 |= 0x40u;
LABEL_57:
  unsigned int v20 = v5 & 0xFFFFFFF7;
  if (!*(unsigned char *)(a1 + 46))
  {
    if (v3 < 0xB) {
      return v20 & 0xFFFFFEEF | 0x10;
    }
    if (!v2[5] || (*((unsigned char *)v1 + v2[5]) & 1) == 0 && (*(int *)((char *)v1 + v2[5]) & 2) == 0) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  if (v3 < 0xB) {
    return v20 & 0xFFFFFEEF | 0x10;
  }
  if (v2[5] && ((*((unsigned char *)v1 + v2[5]) & 2) != 0 || (*(int *)((char *)v1 + v2[5]) & 1) != 0)) {
LABEL_67:
  }
    v20 |= 0x80u;
LABEL_68:
  if (v3 >= 0x2F)
  {
    uint64_t v21 = v2[23];
    if (v21)
    {
      if (*((unsigned char *)v1 + v21) == 9) {
        return v20 | 0x110;
      }
    }
  }
  return v20 & 0xFFFFFEEF | 0x10;
}

uint64_t sub_EB29D4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 113) = a2;
  return result;
}

BOOL sub_EB29DC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) != 0;
}

unint64_t sub_EB29EC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48)) {
    return *(void *)(a1 + 48);
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)v2;
  int v4 = *(_DWORD *)(v2 + 96) >> 27;
  unsigned int v5 = HIDWORD(v3) & 0x40000000;
  if (v3 < 0 && v5 == 0) {
    int v7 = 0x40000000;
  }
  else {
    int v7 = 0;
  }
  return v3 | ((HIDWORD(v3) & 0xFFFFFFF | (v4 << 31) | ((unint64_t)v3 >> 33) & 0x10000000 | (v5 >> 1) | v7) << 32);
}

unint64_t sub_EB2A48(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48)) {
    return *(void *)(a1 + 48);
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 - 56);
  int v4 = *(_DWORD *)(v2 - 8) >> 28;
  unsigned int v5 = HIDWORD(v3) & 0x40000000;
  if (v3 < 0 && v5 == 0) {
    int v7 = 0x40000000;
  }
  else {
    int v7 = 0;
  }
  return v3 | ((HIDWORD(v3) & 0xFFFFFFF | (v4 << 31) | ((unint64_t)v3 >> 33) & 0x10000000 | (v5 >> 1) | v7) << 32);
}

uint64_t sub_EB2AA4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48)) {
    return a1 + 56;
  }
  else {
    return *(void *)(a1 + 24);
  }
}

uint64_t sub_EB2ABC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48)) {
    return a1 + 56;
  }
  else {
    return *(void *)(a1 + 32) - 56;
  }
}

uint64_t sub_EB2AD8(uint64_t a1)
{
  return a1 + 332;
}

uint64_t sub_EB2AE0(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 328) = *a2;
  return result;
}

uint64_t sub_EB2AEC(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 332) = *a2;
  return result;
}

char *sub_EB2AF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unsigned int v6 = *(__n128 **)(a1 + 24);
  unsigned int v5 = *(__n128 **)(a1 + 32);
  uint64_t v7 = 0x4EC4EC4EC4EC4EC5 * (((char *)v5 - (char *)v6) >> 3);
  unint64_t v8 = v7 + 1;
  if (v7 != -1)
  {
    if (v8 >= 0x555555555555556) {
      sub_2E00();
    }
    int v4 = (__n128 *)operator new(48 * v8);
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v4;
    *(void *)(a2 + 16) = &v4[3 * v8];
  }
  while (v6 != v5)
  {
    __n128 v9 = *v6;
    __n128 v10 = v6[2];
    v13[1] = v6[1];
    __n128 v13[2] = v10;
    v13[0] = v9;
    int v4 = sub_EB58C4((char **)a2, (uint64_t)v4, v13) + 3;
    unsigned int v6 = (__n128 *)((char *)v6 + 104);
  }
  if (*(_DWORD *)(a1 + 48)) {
    long long v11 = (_OWORD *)(a1 + 56);
  }
  else {
    long long v11 = (_OWORD *)(*(void *)(a1 + 32) - 56);
  }
  return sub_652DE4((char **)a2, v11);
}

void sub_EB2BF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EB2C18(uint64_t a1)
{
  return a1 + 144;
}

uint64_t sub_EB2C20(void *a1, unint64_t a2)
{
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unsigned int v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __n128 v10 = &v15;
    }
    else {
      __n128 v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    long long v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    long long v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 104 * a2;
}

void sub_EB2D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_EB2E60(uint64_t a1)
{
  return 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
}

uint64_t sub_EB2E84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v1 == v2 && !*(_DWORD *)(a1 + 48)) {
    return 0;
  }
  else {
    return 0x4EC4EC4EC4EC4EC5 * ((v2 - v1) >> 3) + 1;
  }
}

BOOL sub_EB2EC4(uint64_t a1)
{
  return *(void *)(a1 + 24) == *(void *)(a1 + 32) && *(_DWORD *)(a1 + 48) == 0;
}

uint64_t sub_EB2EE8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)(result + 32);
  if (v2 == v3 && !*(_DWORD *)(result + 48))
  {
    *a2 = result;
    a2[1] = 0;
    a2[2] = result;
    a2[3] = 0;
  }
  else
  {
    *a2 = result;
    a2[1] = 0;
    a2[2] = result;
    a2[3] = 0x4EC4EC4EC4EC4EC5 * ((v3 - v2) >> 3) + 1;
  }
  return result;
}

uint64_t sub_EB2F38(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v3 == v2 && !*(_DWORD *)(a1 + 48))
  {
    uint64_t v4 = -1;
    if (a2)
    {
LABEL_4:
      if (v4 != a2) {
        return sub_EB2C20((void *)(a1 + 24), a2);
      }
      uint64_t v5 = v2 - 56;
      if (*(_DWORD *)(a1 + 48)) {
        return a1 + 56;
      }
      else {
        return v5;
      }
    }
  }
  else
  {
    uint64_t v4 = 0x4EC4EC4EC4EC4EC5 * ((v2 - v3) >> 3);
    if (a2) {
      goto LABEL_4;
    }
  }
  if (*(_DWORD *)(a1 + 48)) {
    return a1 + 56;
  }
  else {
    return *(void *)(a1 + 24);
  }
}

uint64_t sub_EB2FB4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return 0;
  }
  else {
    return *(unsigned int *)(a1 + 336);
  }
}

uint64_t sub_EB2FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2 == v3 && !*(_DWORD *)(a1 + 48))
  {
    if (a2 == -1) {
      return *(unsigned int *)(a1 + 408);
    }
  }
  else if (0x4EC4EC4EC4EC4EC5 * ((v3 - v2) >> 3) == a2)
  {
    return *(unsigned int *)(a1 + 408);
  }
  return 1000000000;
}

uint64_t sub_EB3020(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    uint64_t v3 = *(void *)(a1 + 32);
    if (v2 == v3 && !*(_DWORD *)(a1 + 48))
    {
      if (a2 == -1)
      {
LABEL_5:
        unsigned int v4 = *(_DWORD *)(a1 + 408);
        uint64_t v7 = *(void *)(a1 + 24);
        uint64_t v6 = *(void *)(a1 + 32);
        uint64_t v5 = (void *)(a1 + 24);
        if (v7 != v6) {
          goto LABEL_15;
        }
        goto LABEL_14;
      }
    }
    else if (0x4EC4EC4EC4EC4EC5 * ((v3 - v2) >> 3) == a2)
    {
      goto LABEL_5;
    }
    unsigned int v4 = 1000000000;
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v5 = (void *)(a1 + 24);
    if (v7 != v6) {
      goto LABEL_15;
    }
  }
  else if (*(_DWORD *)(a1 + 48))
  {
    unsigned int v4 = *(_DWORD *)(a1 + 408) - *(_DWORD *)(a1 + 336);
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v5 = (void *)(a1 + 24);
    if (v7 != v6) {
      goto LABEL_15;
    }
  }
  else
  {
    unsigned int v4 = 1000000000 - *(_DWORD *)(a1 + 336);
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v5 = (void *)(a1 + 24);
    if (v7 != v6) {
      goto LABEL_15;
    }
  }
LABEL_14:
  if (*(_DWORD *)(a1 + 48))
  {
LABEL_15:
    uint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((v6 - v7) >> 3);
    if (a2) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }
  uint64_t v8 = -1;
  if (a2)
  {
LABEL_16:
    if (v8 == a2)
    {
      uint64_t v9 = v6 - 56;
      if (*(_DWORD *)(a1 + 48)) {
        uint64_t v10 = a1 + 56;
      }
      else {
        uint64_t v10 = v9;
      }
    }
    else
    {
      uint64_t v10 = sub_EB2C20(v5, a2);
    }
    goto LABEL_25;
  }
LABEL_22:
  if (*(_DWORD *)(a1 + 48)) {
    uint64_t v10 = a1 + 56;
  }
  else {
    uint64_t v10 = v7;
  }
LABEL_25:
  long long v11 = *(int **)(v10 + 8);
  long long v12 = (unsigned __int16 *)((char *)v11 - *v11);
  double v13 = 0.0;
  if (*v12 >= 9u)
  {
    uint64_t v14 = v12[4];
    if (v14)
    {
      LODWORD(v13) = *(int *)((char *)v11 + v14);
      double v13 = (double)*(unint64_t *)&v13;
    }
  }
  double v15 = (double)v4 / 1000000000.0 * v13;
  if (v15 >= 0.0)
  {
    if (v15 < 4.50359963e15)
    {
      uint64_t v16 = (uint64_t)(v15 + v15) + 1;
      return (uint64_t)(double)(v16 >> 1);
    }
  }
  else if (v15 > -4.50359963e15)
  {
    uint64_t v16 = (uint64_t)(v15 + v15);
    if (v16 >= 1) {
      --v16;
    }
    return (uint64_t)(double)(v16 >> 1);
  }
  return (uint64_t)v15;
}

uint64_t sub_EB3204(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 408) - *(_DWORD *)(a1 + 336));
}

uint64_t sub_EB3214(uint64_t a1)
{
  return (1000000000 - *(_DWORD *)(a1 + 336));
}

uint64_t sub_EB3228(uint64_t a1)
{
  return *(unsigned int *)(a1 + 408);
}

BOOL sub_EB3230(uint64_t a1)
{
  return *(void *)(a1 + 24) != *(void *)(a1 + 32) || *(_DWORD *)(a1 + 48) != 0;
}

uint64_t sub_EB3254(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48))
  {
    return *(_DWORD *)(a1 + 336) <= *(_DWORD *)(a1 + 408) && *(_DWORD *)(a1 + 104) == sub_EB26F0(a1 + 56);
  }
  else
  {
    char v16 = 1;
    double v15 = &v16;
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
    if (v3 != v4 && v3 + 104 != v4)
    {
      do
      {
        sub_EB5D10((uint64_t)&v15, v3, v3 + 104);
        uint64_t v6 = v3 + 208;
        v3 += 104;
      }
      while (v6 != v4);
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v4 = *(void *)(a1 + 32);
    }
    int v14 = 0;
    v12[0] = &v14;
    if (v3 == v4)
    {
      int v8 = 0;
      LOBYTE(v7) = 1;
    }
    else
    {
      do
      {
        BOOL v7 = sub_EB6024(v12, v3);
        if (!v7) {
          break;
        }
        v3 += 104;
      }
      while (v3 != v4);
      int v8 = v14;
    }
    if (v16) {
      BOOL v9 = v7;
    }
    else {
      BOOL v9 = 0;
    }
    char v16 = v9;
    if (*(_DWORD *)(a1 + 104) != v8)
    {
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v12);
        sub_188FC78(v12, (uint64_t)"PathLeg has inconsistent cost features.", 39);
        std::stringbuf::str();
        sub_7246C((uint64_t *)&__p, 3u);
        if (v11 < 0) {
          operator delete(__p);
        }
        if (v13 < 0) {
          operator delete(v12[9]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      char v16 = 0;
    }
    LODWORD(result) = sub_EAE734(a1 + 192);
    if (v16) {
      return result;
    }
    else {
      return 0;
    }
  }
}

void sub_EB34DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

char *sub_EB3528(char **a1, long long *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    long long v12 = *a1;
    uint64_t v13 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 3);
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) > 0x276276276276276) {
      sub_2E00();
    }
    unint64_t v15 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v4 - (void)v12) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x13B13B13B13B13BLL) {
      unint64_t v16 = 0x276276276276276;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 > 0x276276276276276) {
        sub_188D718();
      }
      std::string v17 = (char *)operator new(104 * v16);
    }
    else
    {
      std::string v17 = 0;
    }
    long long v18 = a2[5];
    long long v19 = &v17[104 * v13];
    *((_OWORD *)v19 + 4) = a2[4];
    *((_OWORD *)v19 + 5) = v18;
    *((void *)v19 + 12) = *((void *)a2 + 12);
    long long v20 = a2[1];
    *(_OWORD *)long long v19 = *a2;
    *((_OWORD *)v19 + 1) = v20;
    long long v21 = a2[3];
    *((_OWORD *)v19 + 2) = a2[2];
    *((_OWORD *)v19 + 3) = v21;
    char v11 = v19 + 104;
    if (v5 != v12)
    {
      do
      {
        long long v22 = *(_OWORD *)(v5 - 104);
        long long v23 = *(_OWORD *)(v5 - 88);
        *(_OWORD *)(v19 - 72) = *(_OWORD *)(v5 - 72);
        *(_OWORD *)(v19 - 88) = v23;
        *(_OWORD *)(v19 - 104) = v22;
        long long v24 = *(_OWORD *)(v5 - 56);
        long long v25 = *(_OWORD *)(v5 - 40);
        long long v26 = *(_OWORD *)(v5 - 24);
        *((_DWORD *)v19 - 2) = *((_DWORD *)v5 - 2);
        *(_OWORD *)(v19 - 24) = v26;
        *(_OWORD *)(v19 - 40) = v25;
        *(_OWORD *)(v19 - 56) = v24;
        v19 -= 104;
        v5 -= 104;
      }
      while (v5 != v12);
      uint64_t v5 = *a1;
    }
    *a1 = v19;
    a1[1] = v11;
    a1[2] = &v17[104 * v16];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[2];
    *((_OWORD *)v5 + 1) = a2[1];
    *((_OWORD *)v5 + 2) = v7;
    *(_OWORD *)uint64_t v5 = v6;
    long long v8 = a2[3];
    long long v9 = a2[4];
    long long v10 = a2[5];
    *((void *)v5 + 12) = *((void *)a2 + 12);
    *((_OWORD *)v5 + 4) = v9;
    *((_OWORD *)v5 + 5) = v10;
    *((_OWORD *)v5 + 3) = v8;
    char v11 = v5 + 104;
  }
  a1[1] = v11;
  return v11 - 104;
}

uint64_t sub_EB36D4(uint64_t a1)
{
  unsigned int v2 = sub_EB26F0(a1);
  uint64_t v3 = *(int **)(a1 + 8);
  unint64_t v4 = (unsigned __int16 *)((char *)v3 - *v3);
  unsigned int v5 = *v4;
  if ((v5 < 0xB || !v4[5] || (*((unsigned char *)v3 + v4[5]) & 8) == 0)
    && (long long v6 = *(int **)(a1 + 56), v7 = (unsigned __int16 *)((char *)v6 - *v6), *v7 >= 0xBu)
    && (uint64_t v8 = v7[5]) != 0
    && (*((unsigned char *)v6 + v8) & 8) != 0)
  {
    int v9 = 1;
    if (v5 < 0x39) {
      goto LABEL_12;
    }
  }
  else
  {
    int v9 = 0;
    if (v5 < 0x39) {
      goto LABEL_12;
    }
  }
  if (v4[28] && (*((unsigned char *)v3 + v4[28] + 1) & 1) != 0) {
    goto LABEL_16;
  }
LABEL_12:
  long long v10 = *(int **)(a1 + 56);
  char v11 = (unsigned __int16 *)((char *)v10 - *v10);
  if (*v11 >= 0x39u)
  {
    uint64_t v12 = v11[28];
    if (v12) {
      v9 |= (*(unsigned int *)((char *)v10 + v12) >> 7) & 2;
    }
  }
  if (v5 >= 0xB)
  {
LABEL_16:
    if (v4[5] && (*((unsigned char *)v3 + v4[5] + 3) & 1) != 0) {
      goto LABEL_22;
    }
  }
  uint64_t v13 = *(int **)(a1 + 56);
  unint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 >= 0xBu)
  {
    uint64_t v15 = v14[5];
    if (v15)
    {
      if (*((unsigned char *)v13 + v15 + 3)) {
        v9 |= 4u;
      }
    }
  }
LABEL_22:
  if (*(unsigned char *)(a1 + 46))
  {
    if (v5 < 0x51 || !v4[40] || (*(_WORD *)((unsigned char *)v3 + v4[40]) & 4) == 0) {
      goto LABEL_31;
    }
LABEL_30:
    unint64_t v16 = *(int **)(a1 + 56);
    int v17 = *(unsigned __int8 *)(a1 + 94);
    uint64_t v18 = -(uint64_t)*v16;
    goto LABEL_55;
  }
  if (v5 >= 0x51 && v4[40] && (*(_WORD *)((unsigned char *)v3 + v4[40]) & 0x40) != 0) {
    goto LABEL_30;
  }
LABEL_31:
  int v17 = *(unsigned __int8 *)(a1 + 94);
  unint64_t v16 = *(int **)(a1 + 56);
  uint64_t v19 = *v16;
  uint64_t v18 = -v19;
  long long v20 = (unsigned __int16 *)((char *)v16 - v19);
  unsigned int v21 = *v20;
  if (*(unsigned char *)(a1 + 94))
  {
    if (v21 >= 0x51 && v20[40] && (*(_WORD *)((unsigned char *)v16 + v20[40]) & 0x10) != 0) {
      goto LABEL_55;
    }
  }
  else if (v21 >= 0x51 && v20[40] && (*(_WORD *)((unsigned char *)v16 + v20[40]) & 1) != 0)
  {
    goto LABEL_55;
  }
  if (*(unsigned char *)(a1 + 46))
  {
    if (v5 >= 0x51)
    {
      unsigned int v22 = v4[40];
      if (v22)
      {
        if ((*(_WORD *)((unsigned char *)v3 + v22) & 8) != 0) {
          goto LABEL_55;
        }
      }
    }
  }
  else if (v5 >= 0x51)
  {
    unsigned int v23 = v4[40];
    if (v23)
    {
      if ((*(_WORD *)((unsigned char *)v3 + v23) & 0x80) != 0) {
        goto LABEL_55;
      }
    }
  }
  if (*(unsigned char *)(a1 + 94))
  {
    if (v21 < 0x51 || !v20[40] || (*(_WORD *)((unsigned char *)v16 + v20[40]) & 0x20) == 0) {
      goto LABEL_56;
    }
LABEL_55:
    v9 |= 8u;
    goto LABEL_56;
  }
  if (v21 >= 0x51 && v20[40] && (*(_WORD *)((unsigned char *)v16 + v20[40]) & 2) != 0) {
    goto LABEL_55;
  }
LABEL_56:
  long long v24 = (char *)v16 + v18;
  unsigned int v25 = *(unsigned __int16 *)((char *)v16 + v18);
  if (v17)
  {
    if (v25 < 0xB
      || !*((_WORD *)v24 + 5)
      || (*((unsigned char *)v16 + *((unsigned __int16 *)v24 + 5)) & 2) == 0
      && (*(int *)((char *)v16 + *((unsigned __int16 *)v24 + 5)) & 1) == 0)
    {
      goto LABEL_67;
    }
LABEL_66:
    v9 |= 0x80u;
    goto LABEL_67;
  }
  if (v25 >= 0xB
    && *((_WORD *)v24 + 5)
    && ((*((unsigned char *)v16 + *((unsigned __int16 *)v24 + 5)) & 1) != 0
     || (*(int *)((char *)v16 + *((unsigned __int16 *)v24 + 5)) & 2) != 0))
  {
    goto LABEL_66;
  }
LABEL_67:
  if (v25 >= 0x2F)
  {
    uint64_t v26 = *((unsigned __int16 *)v24 + 23);
    if (v26)
    {
      if (*((unsigned char *)v16 + v26) == 9) {
        v9 |= 0x100u;
      }
    }
  }
  return v9 | v2;
}

void sub_EB39C0(uint64_t a1, long long **a2)
{
  unsigned int v5 = *(unsigned char **)(a1 + 24);
  long long v6 = *(unsigned char **)(a1 + 32);
  unint64_t v4 = (char **)(a1 + 24);
  uint64_t v7 = (char *)a2[1] - (char *)*a2;
  unint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((v6 - v5) >> 3) + 0x4EC4EC4EC4EC4EC5 * (v7 >> 3);
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 40) - (void)v5) >> 3) < v8)
  {
    if (v8 >= 0x276276276276277) {
      sub_2E00();
    }
    int v9 = (char *)operator new(v7 + v6 - v5);
    long long v10 = &v9[8 * ((v6 - v5) >> 3)];
    char v11 = v10;
    if (v6 != v5)
    {
      uint64_t v12 = &v9[8 * ((v6 - v5) >> 3)];
      do
      {
        long long v13 = *(_OWORD *)(v6 - 104);
        long long v14 = *(_OWORD *)(v6 - 88);
        *(_OWORD *)(v12 - 72) = *(_OWORD *)(v6 - 72);
        *(_OWORD *)(v12 - 88) = v14;
        *(_OWORD *)(v12 - 104) = v13;
        long long v15 = *(_OWORD *)(v6 - 56);
        long long v16 = *(_OWORD *)(v6 - 40);
        long long v17 = *(_OWORD *)(v6 - 24);
        char v11 = v12 - 104;
        *((_DWORD *)v12 - 2) = *((_DWORD *)v6 - 2);
        *(_OWORD *)(v12 - 24) = v17;
        *(_OWORD *)(v12 - 40) = v16;
        *(_OWORD *)(v12 - 56) = v15;
        v6 -= 104;
        v12 -= 104;
      }
      while (v6 != v5);
    }
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = &v9[104 * v8];
    if (v5) {
      operator delete(v5);
    }
  }
  uint64_t v19 = *a2;
  for (i = a2[1]; v19 != i; uint64_t v19 = (long long *)((char *)v19 + 104))
  {
    sub_EB3528(v4, v19);
    *(_DWORD *)(a1 + 104) |= sub_EB36D4((uint64_t)v19);
  }
}

__n128 sub_EB3B28(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 48)) {
    BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 104) = 0;
  }
  sub_EB39C0(a1, (long long **)(a2 + 24));
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  __n128 result = *(__n128 *)(a2 + 424);
  long long v6 = *(_OWORD *)(a2 + 440);
  long long v7 = *(_OWORD *)(a2 + 456);
  *(void *)(a1 + 471) = *(void *)(a2 + 471);
  *(_OWORD *)(a1 + 440) = v6;
  *(_OWORD *)(a1 + 456) = v7;
  *(__n128 *)(a1 + 424) = result;
  return result;
}

long long *sub_EB3B9C(long long **a1, long long *__src, uint64_t a3)
{
  BOOL v4 = __src;
  long long v6 = a1[1];
  unint64_t v7 = (unint64_t)a1[2];
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v19 = *a1;
    unint64_t v20 = 0x4EC4EC4EC4EC4EC5 * (((char *)v6 - (char *)*a1) >> 3) + 1;
    if (v20 > 0x276276276276276) {
      sub_2E00();
    }
    unint64_t v21 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v7 - (void)v19) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x13B13B13B13B13BLL) {
      unint64_t v22 = 0x276276276276276;
    }
    else {
      unint64_t v22 = v20;
    }
    *(void *)&long long v47 = a1 + 2;
    if (v22)
    {
      if (v22 > 0x276276276276276) {
        sub_188D718();
      }
      unsigned int v23 = (char *)operator new(104 * v22);
    }
    else
    {
      unsigned int v23 = 0;
    }
    *(void *)&long long v45 = v23;
    *((void *)&v45 + 1) = &v23[8 * (((char *)v4 - (char *)v19) >> 3)];
    __dst[0] = *((void **)&v45 + 1);
    __dst[1] = &v23[104 * v22];
    sub_EB62A0((uint64_t)&v45, (long long *)a3);
    uint64_t v29 = *((void *)&v45 + 1);
    unsigned int v30 = *a1;
    int v31 = (long long *)*((void *)&v45 + 1);
    if (*a1 != v4)
    {
      long long v32 = v4;
      uint64_t v33 = *((void *)&v45 + 1);
      do
      {
        long long v34 = *(long long *)((char *)v32 - 104);
        long long v35 = *(long long *)((char *)v32 - 88);
        *(_OWORD *)(v33 - 72) = *(long long *)((char *)v32 - 72);
        *(_OWORD *)(v33 - 88) = v35;
        *(_OWORD *)(v33 - 104) = v34;
        long long v36 = *(long long *)((char *)v32 - 56);
        long long v37 = *(long long *)((char *)v32 - 40);
        long long v38 = *(long long *)((char *)v32 - 24);
        int v31 = (long long *)(v33 - 104);
        *(_DWORD *)(v33 - 8) = *((_DWORD *)v32 - 2);
        *(_OWORD *)(v33 - 24) = v38;
        *(_OWORD *)(v33 - 40) = v37;
        *(_OWORD *)(v33 - 56) = v36;
        long long v32 = (long long *)((char *)v32 - 104);
        v33 -= 104;
      }
      while (v32 != v30);
    }
    *((void *)&v45 + 1) = v31;
    long long v39 = a1[1];
    uint64_t v40 = (char *)__dst[0];
    int64_t v41 = (char *)v39 - (char *)v4;
    if (v39 != v4)
    {
      memmove(__dst[0], v4, v41 - 4);
      int v31 = (long long *)*((void *)&v45 + 1);
      BOOL v4 = a1[1];
    }
    long long v42 = *a1;
    *a1 = v31;
    a1[1] = (long long *)&v40[v41];
    unsigned int v43 = a1[2];
    a1[2] = (long long *)__dst[1];
    __dst[0] = v4;
    __dst[1] = v43;
    *(void *)&long long v45 = v42;
    *((void *)&v45 + 1) = v42;
    if (v4 != v42) {
      __dst[0] = (char *)v42 + ((char *)v4 - (char *)v42 - 104) % 0x68uLL;
    }
    if (v42) {
      operator delete(v42);
    }
    return (long long *)v29;
  }
  else if (__src == v6)
  {
    long long v24 = *(_OWORD *)a3;
    long long v25 = *(_OWORD *)(a3 + 32);
    __src[1] = *(_OWORD *)(a3 + 16);
    __src[2] = v25;
    *__src = v24;
    long long v26 = *(_OWORD *)(a3 + 48);
    long long v27 = *(_OWORD *)(a3 + 64);
    long long v28 = *(_OWORD *)(a3 + 80);
    *((void *)__src + 12) = *(void *)(a3 + 96);
    __src[4] = v27;
    __src[5] = v28;
    __src[3] = v26;
    a1[1] = (long long *)((char *)__src + 104);
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 80);
    long long v49 = *(_OWORD *)(a3 + 64);
    long long v50 = v8;
    uint64_t v51 = *(void *)(a3 + 96);
    long long v9 = *(_OWORD *)(a3 + 16);
    long long v45 = *(_OWORD *)a3;
    *(_OWORD *)long long __dst = v9;
    long long v10 = *(_OWORD *)(a3 + 48);
    char v11 = (char *)__src + 104;
    uint64_t v12 = (long long *)((char *)v6 - 104);
    long long v47 = *(_OWORD *)(a3 + 32);
    long long v48 = v10;
    long long v13 = v6;
    if ((unint64_t)v6 >= 0x68)
    {
      do
      {
        long long v14 = *v12;
        long long v15 = v12[2];
        v13[1] = v12[1];
        __n128 v13[2] = v15;
        *long long v13 = v14;
        long long v16 = v12[3];
        long long v17 = v12[4];
        long long v18 = v12[5];
        *((void *)v13 + 12) = *((void *)v12 + 12);
        v13[4] = v17;
        v13[5] = v18;
        __n128 v13[3] = v16;
        uint64_t v12 = (long long *)((char *)v12 + 104);
        long long v13 = (long long *)((char *)v13 + 104);
      }
      while (v12 < v6);
    }
    a1[1] = v13;
    if (v6 != (long long *)v11) {
      memmove(v11, __src, (char *)v6 - v11 - 4);
    }
    v4[3] = v48;
    v4[4] = v49;
    v4[5] = v50;
    *((_DWORD *)v4 + 24) = v51;
    long long *v4 = v45;
    v4[1] = *(_OWORD *)__dst;
    v4[2] = v47;
  }
  return v4;
}

void sub_EB3ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  if (a11 == a10)
  {
    uint64_t v12 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v12 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

__n128 sub_EB3F30(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 48)) {
    BOOL v4 = *(_DWORD *)(a2 + 48) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    *(_DWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 104) = 0;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  for (uint64_t i = *(void *)(a2 + 32); i != v6; *(_DWORD *)(a1 + 104) |= sub_EB36D4(i))
  {
    i -= 104;
    sub_EB3B9C((long long **)(a1 + 24), *(long long **)(a1 + 24), i);
  }
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  __n128 result = *(__n128 *)(a2 + 352);
  long long v8 = *(_OWORD *)(a2 + 368);
  long long v9 = *(_OWORD *)(a2 + 384);
  *(void *)(a1 + 399) = *(void *)(a2 + 399);
  *(_OWORD *)(a1 + 368) = v8;
  *(_OWORD *)(a1 + 384) = v9;
  *(__n128 *)(a1 + 352) = result;
  return result;
}

char *sub_EB3FE8(uint64_t a1, char *__dst, char *a3, int a4)
{
  uint64_t v6 = *(char **)(a1 + 24);
  if (v6 != __dst || *(char **)(a1 + 32) != a3)
  {
    if (v6 != __dst && a4 != 0)
    {
      long long v8 = *(_OWORD *)(a3 - 56);
      long long v9 = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(__dst - 24) = *(_OWORD *)(a3 - 24);
      *(_OWORD *)(__dst - 40) = v9;
      *(_OWORD *)(__dst - 56) = v8;
      uint64_t v6 = *(char **)(a1 + 24);
    }
    if (__dst == a3)
    {
      uint64_t v12 = *(char **)(a1 + 32);
      *(_DWORD *)(a1 + 104) = 0;
    }
    else
    {
      long long v10 = *(unsigned char **)(a1 + 32);
      uint64_t v11 = v10 - a3;
      if (v10 != a3)
      {
        memmove(__dst, a3, v11 - 4);
        uint64_t v6 = *(char **)(a1 + 24);
      }
      uint64_t v12 = &__dst[v11];
      *(void *)(a1 + 32) = v12;
      *(_DWORD *)(a1 + 104) = 0;
    }
    while (v6 != v12)
    {
      *(_DWORD *)(a1 + 104) |= sub_EB36D4((uint64_t)v6);
      v6 += 104;
    }
  }
  return __dst;
}

uint64_t sub_EB40C0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48))
  {
    uint64_t v1 = *(int **)(a1 + 64);
    unsigned int v2 = (unsigned __int16 *)((char *)v1 - *v1);
    double v3 = 0.0;
    if (*v2 >= 9u)
    {
      uint64_t v4 = v2[4];
      if (v4)
      {
        LODWORD(v3) = *(int *)((char *)v1 + v4);
        double v3 = (double)*(unint64_t *)&v3;
      }
    }
    double v5 = v3 * ((double)(*(_DWORD *)(a1 + 408) - *(_DWORD *)(a1 + 336)) / 1000000000.0);
    if (v5 >= 0.0)
    {
      if (v5 < 4.50359963e15)
      {
        uint64_t v6 = (uint64_t)(v5 + v5) + 1;
        return (uint64_t)(double)(v6 >> 1);
      }
    }
    else if (v5 > -4.50359963e15)
    {
      uint64_t v6 = (uint64_t)(v5 + v5);
      if (v6 >= 1) {
        --v6;
      }
      return (uint64_t)(double)(v6 >> 1);
    }
    return (uint64_t)v5;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(int **)(v7 + 8);
  long long v9 = (unsigned __int16 *)((char *)v8 - *v8);
  double v10 = 0.0;
  if (*v9 >= 9u)
  {
    uint64_t v11 = v9[4];
    if (v11)
    {
      LODWORD(v10) = *(int *)((char *)v8 + v11);
      double v10 = (double)*(unint64_t *)&v10;
    }
  }
  double v12 = v10 * ((double)(1000000000 - *(_DWORD *)(a1 + 336)) / 1000000000.0);
  if (v12 >= 0.0)
  {
    HIDWORD(v13) = 1127219200;
    if (v12 >= 4.50359963e15) {
      goto LABEL_25;
    }
    uint64_t v14 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    HIDWORD(v13) = -1020264448;
    if (v12 <= -4.50359963e15) {
      goto LABEL_25;
    }
    uint64_t v14 = (uint64_t)(v12 + v12);
    if (v14 >= 1) {
      --v14;
    }
  }
  double v12 = (double)(v14 >> 1);
LABEL_25:
  uint64_t v16 = (uint64_t)v12;
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = (v17 - v7) >> 3;
  unint64_t v19 = 0x4EC4EC4EC4EC4EC5 * v18;
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * v18) <= 1) {
    uint64_t v20 = 1;
  }
  else {
    uint64_t v20 = 0x4EC4EC4EC4EC4EC5 * v18;
  }
  if (v19 >= 2)
  {
    uint64_t v21 = v20 - 1;
    unint64_t v22 = (void *)(v7 + 112);
    do
    {
      while (1)
      {
        unsigned int v23 = (unsigned __int16 *)(*v22 - *(int *)*v22);
        if (*v23 >= 9u)
        {
          uint64_t v24 = v23[4];
          if (v24) {
            break;
          }
        }
        v22 += 13;
        if (!--v21) {
          goto LABEL_34;
        }
      }
      v16 += *(unsigned int *)(*v22 + v24);
      v22 += 13;
      --v21;
    }
    while (v21);
  }
LABEL_34:
  long long v25 = *(int **)(v17 - 48);
  long long v26 = (unsigned __int16 *)((char *)v25 - *v25);
  double v27 = 0.0;
  if (*v26 >= 9u)
  {
    uint64_t v28 = v26[4];
    if (v28)
    {
      LODWORD(v27) = *(int *)((char *)v25 + v28);
      double v27 = (double)*(unint64_t *)&v27;
    }
  }
  LODWORD(v13) = *(_DWORD *)(a1 + 408);
  double v29 = v27 * ((double)v13 / 1000000000.0);
  if (v29 >= 0.0)
  {
    if (v29 < 4.50359963e15)
    {
      uint64_t v30 = (uint64_t)(v29 + v29) + 1;
LABEL_44:
      double v29 = (double)(v30 >> 1);
    }
  }
  else if (v29 > -4.50359963e15)
  {
    uint64_t v30 = (uint64_t)(v29 + v29);
    if (v30 >= 1) {
      --v30;
    }
    goto LABEL_44;
  }
  return v16 + (uint64_t)v29;
}

uint64_t sub_EB4344(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a1 + 48) != 0) != (*(_DWORD *)(a2 + 48) != 0)) {
    return 0;
  }
  uint64_t result = sub_EB45A4(a1 + 336, a2 + 336);
  if (result)
  {
    uint64_t result = sub_EB45A4(a1 + 408, a2 + 408);
    if (result)
    {
      if (*(_DWORD *)(a1 + 48) && *(_DWORD *)(a2 + 48))
      {
        uint64_t v5 = *(void *)(a2 + 56);
        if (*(_DWORD *)(a1 + 56) == v5) {
          return *(_DWORD *)(a1 + 60) == HIDWORD(v5);
        }
        return 0;
      }
      uint64_t v7 = *(void *)(a1 + 24);
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a2 + 24);
      if (v6 - v7 != *(void *)(a2 + 32) - v8) {
        return 0;
      }
      uint64_t result = 1;
      if (v7 != v6)
      {
        while (*(void *)v7 == *(void *)v8
             && *(void *)(v7 + 48) == *(void *)(v8 + 48)
             && *(_DWORD *)(v7 + 96) == *(_DWORD *)(v8 + 96))
        {
          v7 += 104;
          v8 += 104;
          if (v7 == v6) {
            return result;
          }
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_EB4488(uint64_t a1, uint64_t a2)
{
  return sub_EB4344(a1, a2) ^ 1;
}

uint64_t sub_EB44A4(uint64_t a1, int a2, int a3, int a4, int a5)
{
  uint64_t v7 = *(void *)(a1 + 120);
  uint64_t v8 = *(void *)(a1 + 128);
  uint64_t v6 = (void **)(a1 + 120);
  uint64_t v9 = v7;
  if (v7 != v8)
  {
    uint64_t v9 = v7;
    while (1)
    {
      int v10 = *(_DWORD *)(v9 + 12);
      if (v10 != -1 && *(_DWORD *)v9 == a2)
      {
        BOOL v11 = *(unsigned __int8 *)(v9 + 4) == a3 && v10 == a4;
        if (v11 && *(_DWORD *)(v9 + 8) == a5) {
          break;
        }
      }
      v9 += 56;
      if (v9 == v8) {
        goto LABEL_14;
      }
    }
  }
  if (v9 != v8) {
    return v9;
  }
LABEL_14:
  if (v8 - v7 == -56)
  {
    for (; v8 != v7; v8 -= 56)
    {
      unint64_t v13 = *(void **)(v8 - 24);
      if (v13)
      {
        *(void *)(v8 - 16) = v13;
        operator delete(v13);
      }
    }
    *(void *)(a1 + 128) = v7;
    return v7 - 56;
  }
  else
  {
    sub_EB4FC8(v6, 1uLL);
    return *(void *)(a1 + 128) - 56;
  }
}

BOOL sub_EB45A4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(void *)(a1 + 8) == *(void *)(a2 + 8)
    && ((double v2 = *(double *)(a1 + 16), v3 = *(double *)(a2 + 16), v4 = vabdd_f64(v2, v3), v2 != v3)
      ? (BOOL v5 = v4 < 2.22044605e-16)
      : (BOOL v5 = 1),
        v5
     && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24)
     && *(double *)(a1 + 32) == *(double *)(a2 + 32)
     && *(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40)
     && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
     && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52)
     && *(void *)(a1 + 56) == *(void *)(a2 + 56)
     && *(unsigned __int8 *)(a1 + 64) == *(unsigned __int8 *)(a2 + 64)
     && *(unsigned __int16 *)(a1 + 66) == *(unsigned __int16 *)(a2 + 66)
     && *(unsigned __int8 *)(a1 + 68) == *(unsigned __int8 *)(a2 + 68)
     && *(unsigned __int8 *)(a1 + 69) == *(unsigned __int8 *)(a2 + 69)))
  {
    return *(unsigned __int8 *)(a1 + 70) == *(unsigned __int8 *)(a2 + 70);
  }
  else
  {
    return 0;
  }
}

BOOL sub_EB46A0(int **a1)
{
  if ((*((_WORD *)a1 + 42) & 0x38) == 0) {
    return 0;
  }
  uint64_t v1 = (char *)*a1;
  double v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 >= 0x4D)
    {
      if (v2[38] && (*(_DWORD *)&v1[v2[38]] & 8) != 0) {
        return 0;
      }
      goto LABEL_12;
    }
  }
  else if (v3 >= 0x4D)
  {
    if (v2[38] && (*(_DWORD *)&v1[v2[38]] & 4) != 0) {
      return 0;
    }
    goto LABEL_12;
  }
  if (v3 < 0xB) {
    return 0;
  }
LABEL_12:
  if (!v2[5]) {
    return 0;
  }
  int v4 = *(_DWORD *)&v1[v2[5]];
  if ((v4 & 0x2000000) == 0) {
    return 0;
  }
  BOOL v5 = a1[1];
  if (!v5 || (uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5), *v6 < 0x11u) || (v7 = v6[8]) == 0)
  {
    if ((v4 & 0x10000) == 0) {
      goto LABEL_20;
    }
    return 0;
  }
  if (*(_WORD *)((unsigned char *)v5 + v7) & 4 | v4 & 0x10000) {
    return 0;
  }
LABEL_20:
  if ((v4 & 0x4000000) != 0) {
    return 0;
  }
  return v3 < 0x2F || (uint64_t v8 = v2[23]) == 0 || v1[v8] == 32;
}

BOOL sub_EB4794(int **a1)
{
  if ((*((_WORD *)a1 + 42) & 0x3F) == 0) {
    return 0;
  }
  uint64_t v1 = (char *)*a1;
  double v2 = (unsigned __int16 *)((char *)*a1 - **a1);
  unsigned int v3 = *v2;
  if (v3 < 0xB) {
    return 0;
  }
  if (!v2[5]) {
    return 0;
  }
  int v4 = *(_DWORD *)&v1[v2[5]];
  if ((v4 & 0x2000000) == 0 || v3 >= 0x1B && v2[13] && v1[v2[13]] > 4u) {
    return 0;
  }
  BOOL v5 = a1[5];
  uint64_t v6 = (unsigned __int16 *)((char *)v5 - *v5);
  if (*v6 < 0x1Bu) {
    return 0;
  }
  uint64_t v7 = v6[13];
  if (!v7 || *((unsigned __int8 *)v5 + v7) < 6u) {
    return 0;
  }
  if (*((unsigned char *)a1 + 38))
  {
    if (v3 < 0x4D) {
      goto LABEL_21;
    }
    uint64_t v8 = v2[38];
    if (!v2[38]) {
      goto LABEL_21;
    }
    if ((v1[v8] & 8) != 0) {
      return 0;
    }
    int v9 = 2;
  }
  else
  {
    if (v3 < 0x4D) {
      goto LABEL_21;
    }
    uint64_t v8 = v2[38];
    if (!v2[38]) {
      goto LABEL_21;
    }
    if ((v1[v8] & 4) != 0) {
      return 0;
    }
    int v9 = 1;
  }
  if ((*(_DWORD *)&v1[v8] & v9) != 0) {
    return 0;
  }
LABEL_21:
  int v10 = a1[1];
  if (!v10 || (BOOL v11 = (unsigned __int16 *)((char *)v10 - *v10), *v11 < 0x11u) || (v12 = v11[8]) == 0)
  {
    if ((v4 & 0x10000) == 0) {
      goto LABEL_27;
    }
    return 0;
  }
  if (*(_WORD *)((unsigned char *)v10 + v12) & 4 | v4 & 0x10000) {
    return 0;
  }
LABEL_27:
  if ((v4 & 0x4000000) != 0) {
    return 0;
  }
  return v3 < 0x2F || (uint64_t v13 = v2[23]) == 0 || v1[v13] == 32;
}

uint64_t sub_EB48D4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (((((*(void *)(a2 + 72) >> 16) & 0xFFFF0000 | (*(void *)(a2 + 72) << 32) | (2
                                                                                      * ((*(void *)(a2 + 72) & 0xFF000000000000) == 0)))
       + (((unint64_t)*(unsigned int *)(a2 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(a2 + 84) >> 1) & 1) != ((((*(void *)(a3 + 32) >> 16) & 0xFFFF0000 | (*(void *)(a3 + 32) << 32) | (2 * ((*(void *)(a3 + 32) & 0xFF000000000000) == 0))) + 4 * (unsigned __int16)*(_DWORD *)(a3 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(a3 + 84) & 1))
  {
    BOOL v5 = (unsigned char **)result;
    uint64_t result = sub_723EC(3u);
    if (result)
    {
      sub_6BAC((uint64_t)v12);
      uint64_t v6 = sub_188FC78(v12, (uint64_t)"PathLeg inconsistency found, head and subsequent tail node id do not match: ", 76);
      uint64_t v7 = sub_3D1870(v6, (((*(void *)(a2 + 72) >> 16) & 0xFFFF0000 | (*(void *)(a2 + 72) << 32) | (2* ((*(void *)(a2 + 72) & 0xFF000000000000) == 0)))+ (((unint64_t)*(unsigned int *)(a2 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(a2 + 84) >> 1) & 1);
      uint64_t v8 = sub_188FC78(v7, (uint64_t)" != ", 4);
      int v9 = sub_3D1870(v8, (((*(void *)(a3 + 32) >> 16) & 0xFFFF0000 | (*(void *)(a3 + 32) << 32) | (2* ((*(void *)(a3 + 32) & 0xFF000000000000) == 0)))+ 4 * (unsigned __int16)*(_DWORD *)(a3 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(a3 + 84) & 1);
      sub_188FC78(v9, (uint64_t)".", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v11 < 0) {
        operator delete(__p);
      }
      if (v13 < 0) {
        operator delete((void *)v12[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      uint64_t result = std::ios::~ios();
    }
    *int *v5 = 0;
  }
  return result;
}

void sub_EB4B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_EB4B90(_DWORD **a1, int **a2)
{
  **a1 |= sub_F1E7EC(a2);
  unint64_t v3 = sub_2E4738(a2);
  unint64_t v4 = sub_2E48C4(a2 + 5);
  if (v3 != v4 && sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v14);
    BOOL v5 = sub_188FC78(v14, (uint64_t)"PathLeg inconsistency found on junction level, ", 47);
    int v6 = sub_2E4738(a2);
    uint64_t v7 = sub_51960(v5, v6);
    sub_188FC78(v7, (uint64_t)".", 1);
    std::ostream::operator<<();
    uint64_t v8 = sub_188FC78(v5, (uint64_t)" != ", 4);
    int v9 = sub_2E48C4(a2 + 5);
    int v10 = sub_51960(v8, v9);
    sub_188FC78(v10, (uint64_t)".", 1);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v15 < 0) {
      operator delete((void *)v14[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v3 == v4;
}

void sub_EB4DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

__n128 sub_EB4E08(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    int v6 = *(char **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      unint64_t v15 = 0x5D1745D1745D1746 * ((v4 - v6) >> 3);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x2E8BA2E8BA2E8BBLL) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 88 * v15;
      uint64_t v18 = (char *)operator new(88 * v15);
      unint64_t v19 = &v18[88 * v16];
      uint64_t v21 = (uint64_t)&v4[-v5];
      BOOL v20 = v4 == (char *)v5;
      unint64_t v4 = v19;
      if (!v20)
      {
        uint64_t v22 = v21 / 88;
        unint64_t v4 = &v19[88 * v22];
        uint64_t v23 = 88 * v22;
        uint64_t v24 = &v18[88 * v16];
        do
        {
          long long v25 = *(_OWORD *)(v5 + 16);
          *(_OWORD *)uint64_t v24 = *(_OWORD *)v5;
          *((_OWORD *)v24 + 1) = v25;
          long long v26 = *(_OWORD *)(v5 + 32);
          long long v27 = *(_OWORD *)(v5 + 48);
          long long v28 = *(_OWORD *)(v5 + 64);
          *((void *)v24 + 10) = *(void *)(v5 + 80);
          *((_OWORD *)v24 + 3) = v27;
          *((_OWORD *)v24 + 4) = v28;
          *((_OWORD *)v24 + 2) = v26;
          v24 += 88;
          v5 += 88;
          v23 -= 88;
        }
        while (v23);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        unint64_t v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -88 * v9;
      unint64_t v12 = v5 + v11;
      char v13 = &v4[-v5];
      if (v4 != (char *)v5)
      {
        memmove((void *)(v5 + v11), *(const void **)(a1 + 8), (size_t)&v4[-v5]);
        unint64_t v4 = *(char **)(a1 + 8);
      }
      uint64_t v14 = &v4[88 * v10];
      unint64_t v4 = &v13[v12];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v13[v12];
    }
  }
  long long v29 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = v29;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v31 = *(_OWORD *)(a2 + 48);
  long long v32 = *(_OWORD *)(a2 + 64);
  *((void *)v4 + 10) = *(void *)(a2 + 80);
  *((_OWORD *)v4 + 3) = v31;
  *((_OWORD *)v4 + 4) = v32;
  *((__n128 *)v4 + 2) = result;
  *(void *)(a1 + 16) += 88;
  return result;
}

void sub_EB4FC8(void **a1, unint64_t a2)
{
  unint64_t v4 = (char *)a1[1];
  unint64_t v5 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = &v4[56 * a2];
      do
      {
        *(void *)unint64_t v4 = 0x7FFFFFFFLL;
        *(_OWORD *)(v4 + 8) = xmmword_20E22B0;
        *((void *)v4 + 3) = 0x7FFFFFFFFFFFFFFFLL;
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 5) = 0;
        *((void *)v4 + 6) = 0;
        v4 += 56;
      }
      while (v4 != v11);
      unint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x492492492492492) {
      sub_2E00();
    }
    unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x249249249249249) {
      unint64_t v9 = 0x492492492492492;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x492492492492492) {
        sub_188D718();
      }
      uint64_t v10 = (char *)operator new(56 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    unint64_t v12 = &v10[56 * v6];
    char v13 = &v10[56 * v9];
    uint64_t v14 = &v12[56 * a2];
    unint64_t v15 = v12;
    do
    {
      *(void *)unint64_t v15 = 0x7FFFFFFFLL;
      *(_OWORD *)(v15 + 8) = xmmword_20E22B0;
      *((void *)v15 + 3) = 0x7FFFFFFFFFFFFFFFLL;
      *((void *)v15 + 4) = 0;
      *((void *)v15 + 5) = 0;
      *((void *)v15 + 6) = 0;
      v15 += 56;
    }
    while (v15 != v14);
    unint64_t v16 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
      if (!v17) {
        return;
      }
      goto LABEL_28;
    }
    do
    {
      long long v18 = *(_OWORD *)(v17 - 56);
      *(_OWORD *)(v12 - 40) = *(_OWORD *)(v17 - 40);
      *(_OWORD *)(v12 - 56) = v18;
      *((void *)v12 - 2) = 0;
      *((void *)v12 - 1) = 0;
      *((void *)v12 - 3) = 0;
      *(_OWORD *)(v12 - 24) = *(_OWORD *)(v17 - 24);
      *((void *)v12 - 1) = *((void *)v17 - 1);
      v12 -= 56;
      *((void *)v17 - 3) = 0;
      *((void *)v17 - 2) = 0;
      *((void *)v17 - 1) = 0;
      v17 -= 56;
    }
    while (v17 != v16);
    unint64_t v19 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (v17 != v19)
    {
      do
      {
        BOOL v20 = (void *)*((void *)v17 - 3);
        if (v20)
        {
          *((void *)v17 - 2) = v20;
          operator delete(v20);
        }
        v17 -= 56;
      }
      while (v17 != v19);
      uint64_t v17 = v19;
    }
    if (v17)
    {
LABEL_28:
      operator delete(v17);
    }
  }
}

uint64_t sub_EB51F4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (((((*(void *)(a2 + 72) >> 16) & 0xFFFF0000 | (*(void *)(a2 + 72) << 32) | (2
                                                                                      * ((*(void *)(a2 + 72) & 0xFF000000000000) == 0)))
       + (((unint64_t)*(unsigned int *)(a2 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(a2 + 88) >> 1) & 1) != ((((*(void *)(a3 + 32) >> 16) & 0xFFFF0000 | (*(void *)(a3 + 32) << 32) | (2 * ((*(void *)(a3 + 32) & 0xFF000000000000) == 0))) + 4 * (unsigned __int16)*(_DWORD *)(a3 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(a3 + 88) & 1))
  {
    unint64_t v5 = (unsigned char **)result;
    __n128 result = sub_723EC(3u);
    if (result)
    {
      sub_6BAC((uint64_t)v12);
      uint64_t v6 = sub_188FC78(v12, (uint64_t)"PathLeg inconsistency found, head and subsequent tail node id do not match: ", 76);
      unint64_t v7 = sub_3D1870(v6, (((*(void *)(a2 + 72) >> 16) & 0xFFFF0000 | (*(void *)(a2 + 72) << 32) | (2* ((*(void *)(a2 + 72) & 0xFF000000000000) == 0)))+ (((unint64_t)*(unsigned int *)(a2 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(a2 + 88) >> 1) & 1);
      unint64_t v8 = sub_188FC78(v7, (uint64_t)" != ", 4);
      unint64_t v9 = sub_3D1870(v8, (((*(void *)(a3 + 32) >> 16) & 0xFFFF0000 | (*(void *)(a3 + 32) << 32) | (2* ((*(void *)(a3 + 32) & 0xFF000000000000) == 0)))+ 4 * (unsigned __int16)*(_DWORD *)(a3 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(a3 + 88) & 1);
      sub_188FC78(v9, (uint64_t)".", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v11 < 0) {
        operator delete(__p);
      }
      if (v13 < 0) {
        operator delete((void *)v12[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      __n128 result = std::ios::~ios();
    }
    *unsigned char *v5 = 0;
  }
  return result;
}

void sub_EB5464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_EB54B0(_DWORD **a1, int **a2)
{
  **a1 |= sub_EB0B40(a2);
  unint64_t v3 = sub_2E4738(a2);
  unint64_t v4 = sub_2E48C4(a2 + 5);
  if (v3 != v4 && sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v14);
    unint64_t v5 = sub_188FC78(v14, (uint64_t)"PathLeg inconsistency found on junction level, ", 47);
    int v6 = sub_2E4738(a2);
    unint64_t v7 = sub_51960(v5, v6);
    sub_188FC78(v7, (uint64_t)".", 1);
    std::ostream::operator<<();
    unint64_t v8 = sub_188FC78(v5, (uint64_t)" != ", 4);
    int v9 = sub_2E48C4(a2 + 5);
    uint64_t v10 = sub_51960(v8, v9);
    sub_188FC78(v10, (uint64_t)".", 1);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v15 < 0) {
      operator delete((void *)v14[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v3 == v4;
}

void sub_EB56DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

__n128 sub_EB5728(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    int v6 = *(char **)a1;
    unint64_t v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      unint64_t v15 = 0x5555555555555556 * ((v4 - v6) >> 5);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x2AAAAAAAAAAAAABLL) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 96 * v15;
      long long v18 = (char *)operator new(96 * v15);
      unint64_t v19 = &v18[96 * v16];
      int64_t v21 = v4 - v5;
      BOOL v20 = v4 == v5;
      unint64_t v4 = v19;
      if (!v20)
      {
        uint64_t v22 = v21 / 96;
        unint64_t v4 = &v19[96 * v22];
        uint64_t v23 = 96 * v22;
        uint64_t v24 = &v18[96 * v16];
        do
        {
          long long v25 = *((_OWORD *)v5 + 1);
          *(_OWORD *)uint64_t v24 = *(_OWORD *)v5;
          *((_OWORD *)v24 + 1) = v25;
          long long v26 = *((_OWORD *)v5 + 2);
          long long v27 = *((_OWORD *)v5 + 3);
          long long v28 = *((_OWORD *)v5 + 5);
          *((_OWORD *)v24 + 4) = *((_OWORD *)v5 + 4);
          *((_OWORD *)v24 + 5) = v28;
          *((_OWORD *)v24 + 2) = v26;
          *((_OWORD *)v24 + 3) = v27;
          v24 += 96;
          v5 += 96;
          v23 -= 96;
        }
        while (v23);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        unint64_t v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v5[-*(void *)a1] >> 5);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -96 * v9;
      unint64_t v12 = &v5[v11];
      int64_t v13 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[v11], *(const void **)(a1 + 8), v13 - 4);
        unint64_t v4 = *(char **)(a1 + 8);
      }
      uint64_t v14 = &v4[96 * v10];
      unint64_t v4 = &v12[v13];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v12[v13];
    }
  }
  long long v29 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = v29;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v31 = *(_OWORD *)(a2 + 48);
  long long v32 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v4 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v4 + 5) = v32;
  *((__n128 *)v4 + 2) = result;
  *((_OWORD *)v4 + 3) = v31;
  *(void *)(a1 + 16) += 96;
  return result;
}

__n128 *sub_EB58C4(char **a1, uint64_t a2, __n128 *a3)
{
  int v6 = (__n128 *)*a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 48;
  uint64_t v8 = (__n128 *)&(*a1)[48 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)v6) >> 4) + 1;
    if (v17 > 0x555555555555555) {
      sub_2E00();
    }
    unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v6) >> 4);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v19 = 0x555555555555555;
    }
    else {
      unint64_t v19 = v17;
    }
    uint64_t v40 = a1 + 2;
    if (v19)
    {
      if (v19 > 0x555555555555555) {
        sub_188D718();
      }
      BOOL v20 = (__n128 *)operator new(48 * v19);
    }
    else
    {
      BOOL v20 = 0;
    }
    long long v36 = v20;
    long long v37 = (char *)&v20[3 * v7];
    long long __dst = v37;
    long long v39 = (char *)&v20[3 * v19];
    sub_EB5B88((uint64_t)&v36, a3);
    uint64_t v23 = v37;
    uint64_t v24 = (__n128 *)*a1;
    long long v25 = v37;
    if (*a1 != (char *)v8)
    {
      long long v26 = v8;
      long long v27 = (__n128 *)v37;
      do
      {
        __n128 v28 = v26[-3];
        __n128 v29 = v26[-1];
        long long v25 = (char *)&v27[-3];
        v27[-2] = v26[-2];
        v27[-1] = v29;
        v27[-3] = v28;
        v26 -= 3;
        v27 -= 3;
      }
      while (v26 != v24);
    }
    long long v37 = v25;
    uint64_t v30 = (__n128 *)a1[1];
    long long v31 = (char *)__dst;
    int64_t v32 = (char *)v30 - (char *)v8;
    if (v30 != v8)
    {
      memmove(__dst, v8, (char *)v30 - (char *)v8);
      long long v25 = v37;
      uint64_t v8 = (__n128 *)a1[1];
    }
    uint64_t v33 = (__n128 *)*a1;
    *a1 = v25;
    a1[1] = &v31[v32];
    long long v34 = a1[2];
    a1[2] = v39;
    long long __dst = v8;
    long long v39 = v34;
    long long v36 = v33;
    long long v37 = (char *)v33;
    if (v8 != v33) {
      long long __dst = (char *)v33 + ((char *)v8 - (char *)v33 - 48) % 0x30uLL;
    }
    if (v33) {
      operator delete(v33);
    }
    return (__n128 *)v23;
  }
  else if (v8 == (__n128 *)v5)
  {
    __n128 v21 = *a3;
    __n128 v22 = a3[2];
    v8[1] = a3[1];
    v8[2] = v22;
    __n128 *v8 = v21;
    a1[1] = (char *)&v8[3];
  }
  else
  {
    uint64_t v10 = v8 + 3;
    uint64_t v11 = (long long *)(v5 - 48);
    unint64_t v12 = a1[1];
    if (v5 >= 0x30)
    {
      do
      {
        long long v13 = *v11;
        long long v14 = v11[2];
        *((_OWORD *)v12 + 1) = v11[1];
        *((_OWORD *)v12 + 2) = v14;
        *(_OWORD *)unint64_t v12 = v13;
        v12 += 48;
        v11 += 3;
      }
      while ((unint64_t)v11 < v5);
    }
    a1[1] = v12;
    if ((__n128 *)v5 != v10) {
      memmove(&v8[3], v8, v5 - (void)v10);
    }
    __n128 v15 = *a3;
    __n128 v16 = a3[2];
    v8[1] = a3[1];
    v8[2] = v16;
    __n128 *v8 = v15;
  }
  return v8;
}

void sub_EB5B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    long long v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_EB5B88(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    int v6 = *(__n128 **)a1;
    unint64_t v5 = *(__n128 **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      unint64_t v15 = 0x5555555555555556 * (v4 - v6);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x555555555555556) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 48 * v15;
      unint64_t v18 = (char *)operator new(48 * v15);
      unint64_t v19 = (__n128 *)&v18[48 * v16];
      int64_t v21 = (char *)v4 - (char *)v5;
      BOOL v20 = v4 == v5;
      unint64_t v4 = v19;
      if (!v20)
      {
        uint64_t v22 = v21 / 48;
        unint64_t v4 = &v19[3 * v22];
        uint64_t v23 = 48 * v22;
        uint64_t v24 = &v18[48 * v16];
        do
        {
          __n128 v25 = *v5;
          __n128 v26 = v5[2];
          *((__n128 *)v24 + 1) = v5[1];
          *((__n128 *)v24 + 2) = v26;
          *(__n128 *)uint64_t v24 = v25;
          v24 += 48;
          v5 += 3;
          v23 -= 48;
        }
        while (v23);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        unint64_t v4 = *(__n128 **)(a1 + 16);
      }
    }
    else
    {
      int64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 4);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -3 * v9;
      unint64_t v12 = &v5[v11];
      int64_t v13 = (char *)v4 - (char *)v5;
      if (v4 != v5)
      {
        memmove(&v5[v11], *(const void **)(a1 + 8), (char *)v4 - (char *)v5);
        unint64_t v4 = *(__n128 **)(a1 + 8);
      }
      long long v14 = &v4[3 * v10];
      unint64_t v4 = (__n128 *)((char *)v12 + v13);
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = (char *)v12 + v13;
    }
  }
  __n128 result = *a2;
  __n128 v28 = a2[2];
  v4[1] = a2[1];
  v4[2] = v28;
  __n128 *v4 = result;
  *(void *)(a1 + 16) += 48;
  return result;
}

uint64_t sub_EB5D10(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char **)result;
  uint64_t v6 = *(void *)(a2 + 48);
  unsigned int v7 = HIDWORD(v6) & 0x40000000;
  if (v6 < 0 && v7 == 0) {
    int v9 = 0x40000000;
  }
  else {
    int v9 = 0;
  }
  uint64_t v10 = *(void *)a3;
  if ((*(void *)a3 & 0x4000000000000000) == 0 && v10 < 0) {
    int v12 = 0x40000000;
  }
  else {
    int v12 = 0;
  }
  if (v6 != v10
    || (HIDWORD(v6) & 0xFFFFFFF | (*(_DWORD *)(a2 + 96) >> 28 << 31) | ((unint64_t)v6 >> 33) & 0x10000000 | (v7 >> 1) | v9) != (HIDWORD(v10) & 0xFFFFFFF | (*(_DWORD *)(a3 + 96) >> 27 << 31) | ((unint64_t)v10 >> 33) & 0x10000000 | ((HIDWORD(*(void *)a3) & 0x40000000) >> 1) | v12))
  {
    __n128 result = sub_723EC(3u);
    if (result)
    {
      sub_6BAC((uint64_t)v26);
      int64_t v13 = sub_188FC78(v26, (uint64_t)"PathLeg inconsistency found, head and subsequent tail node id do not match: ", 76);
      uint64_t v14 = *(void *)(a2 + 48);
      unsigned int v15 = HIDWORD(v14) & 0x40000000;
      if (v14 < 0 && v15 == 0) {
        int v17 = 0x40000000;
      }
      else {
        int v17 = 0;
      }
      unint64_t v18 = sub_3F8738(v13, *(void *)(a2 + 48) | ((HIDWORD(v14) & 0xFFFFFFF | (*(_DWORD *)(a2 + 96) >> 28 << 31) | ((unint64_t)v14 >> 33) & 0x10000000 | (v15 >> 1) | v17) << 32));
      unint64_t v19 = sub_188FC78(v18, (uint64_t)" != ", 4);
      unsigned int v20 = HIDWORD(*(void *)a3) & 0x40000000;
      if (*(uint64_t *)a3 < 0 && v20 == 0) {
        int v22 = 0x40000000;
      }
      else {
        int v22 = 0;
      }
      uint64_t v23 = sub_3F8738(v19, *(void *)a3 | ((HIDWORD(*(void *)a3) & 0xFFFFFFF | ((*(_DWORD *)(a3 + 96) >> 27) << 31) | (*(void *)a3 >> 33) & 0x10000000 | (v20 >> 1) | v22) << 32));
      sub_188FC78(v23, (uint64_t)".", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (v25 < 0) {
        operator delete(__p);
      }
      if (v27 < 0) {
        operator delete((void *)v26[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      __n128 result = std::ios::~ios();
    }
    *__n128 *v5 = 0;
  }
  return result;
}

void sub_EB5FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_EB6024(_DWORD **a1, uint64_t a2)
{
  **a1 |= sub_EB36D4(a2);
  unint64_t v3 = (int **)(a2 + 8);
  unint64_t v4 = sub_2E4738((int **)(a2 + 8));
  unint64_t v5 = (int **)(a2 + 56);
  unint64_t v6 = sub_2E48C4((int **)(a2 + 56));
  if (v4 != v6 && sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v16);
    unsigned int v7 = sub_188FC78(v16, (uint64_t)"PathLeg inconsistency found on junction level, ", 47);
    int v8 = sub_2E4738(v3);
    int v9 = sub_51960(v7, v8);
    sub_188FC78(v9, (uint64_t)".", 1);
    std::ostream::operator<<();
    uint64_t v10 = sub_188FC78(v7, (uint64_t)" != ", 4);
    int v11 = sub_2E48C4(v5);
    int v12 = sub_51960(v10, v11);
    sub_188FC78(v12, (uint64_t)".", 1);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)&__p, 3u);
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v17 < 0) {
      operator delete((void *)v16[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  return v4 == v6;
}

void sub_EB6254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

__n128 sub_EB62A0(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    unint64_t v6 = *(char **)a1;
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= *(void *)a1)
    {
      unint64_t v15 = 0x9D89D89D89D89D8ALL * ((v4 - v6) >> 3);
      if (v4 == v6) {
        unint64_t v15 = 1;
      }
      if (v15 >= 0x276276276276277) {
        sub_188D718();
      }
      unint64_t v16 = v15 >> 2;
      uint64_t v17 = 104 * v15;
      unint64_t v18 = (char *)operator new(104 * v15);
      unint64_t v19 = &v18[104 * v16];
      uint64_t v21 = (uint64_t)&v4[-v5];
      BOOL v20 = v4 == (char *)v5;
      unint64_t v4 = v19;
      if (!v20)
      {
        uint64_t v22 = v21 / 104;
        unint64_t v4 = &v19[104 * v22];
        uint64_t v23 = 104 * v22;
        uint64_t v24 = &v18[104 * v16];
        do
        {
          long long v25 = *(_OWORD *)v5;
          long long v26 = *(_OWORD *)(v5 + 32);
          *((_OWORD *)v24 + 1) = *(_OWORD *)(v5 + 16);
          *((_OWORD *)v24 + 2) = v26;
          *(_OWORD *)uint64_t v24 = v25;
          long long v27 = *(_OWORD *)(v5 + 48);
          long long v28 = *(_OWORD *)(v5 + 64);
          long long v29 = *(_OWORD *)(v5 + 80);
          *((void *)v24 + 12) = *(void *)(v5 + 96);
          *((_OWORD *)v24 + 4) = v28;
          *((_OWORD *)v24 + 5) = v29;
          *((_OWORD *)v24 + 3) = v27;
          v24 += 104;
          v5 += 104;
          v23 -= 104;
        }
        while (v23);
      }
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v18[v17];
      if (v6)
      {
        operator delete(v6);
        unint64_t v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      uint64_t v7 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v5 - *(void *)a1) >> 3);
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -v9;
      uint64_t v11 = -104 * v9;
      unint64_t v12 = v5 + v11;
      int64_t v13 = &v4[-v5];
      if (v4 != (char *)v5)
      {
        memmove((void *)(v5 + v11), *(const void **)(a1 + 8), (size_t)(v13 - 4));
        unint64_t v4 = *(char **)(a1 + 8);
      }
      uint64_t v14 = &v4[104 * v10];
      unint64_t v4 = &v13[v12];
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = &v13[v12];
    }
  }
  long long v30 = *a2;
  long long v31 = a2[2];
  *((_OWORD *)v4 + 1) = a2[1];
  *((_OWORD *)v4 + 2) = v31;
  *(_OWORD *)unint64_t v4 = v30;
  __n128 result = (__n128)a2[3];
  long long v33 = a2[4];
  long long v34 = a2[5];
  *((void *)v4 + 12) = *((void *)a2 + 12);
  *((_OWORD *)v4 + 4) = v33;
  *((_OWORD *)v4 + 5) = v34;
  *((__n128 *)v4 + 3) = result;
  *(void *)(a1 + 16) += 104;
  return result;
}

uint64_t sub_EB6470(uint64_t a1)
{
  return *(void *)a1;
}

void sub_EB6484()
{
  unk_25FC637 = 16641;
  word_25FC620 = 65;
  byte_25FC64F = 1;
  byte_25FC639 = 0;
}

unint64_t sub_EB64AC(uint64_t a1, long long *a2, int a3)
{
  unint64_t result = sub_EAE144(a2);
  if (result) {
    return result;
  }
  if ((a3 - 2) >= 2)
  {
    if (a3)
    {
      if (a3 == 1)
      {
        uint64_t v7 = *(long long **)a1;
        uint64_t v8 = *(long long **)(a1 + 8);
        if (*(long long **)a1 != v8)
        {
          while (1)
          {
            unint64_t result = sub_EAF7CC((uint64_t)v7, a2);
            if (result) {
              break;
            }
            uint64_t v7 = (long long *)((char *)v7 + 472);
            if (v7 == v8)
            {
              uint64_t v7 = v8;
              uint64_t v9 = (unint64_t *)(a1 + 8);
              if (v7 != *(long long **)(a1 + 8)) {
                goto LABEL_16;
              }
              goto LABEL_23;
            }
          }
        }
        goto LABEL_15;
      }
      uint64_t v7 = *(long long **)(a1 + 8);
      uint64_t v9 = (unint64_t *)(a1 + 8);
    }
    else
    {
      uint64_t v9 = (unint64_t *)(a1 + 8);
      uint64_t v7 = *(long long **)(a1 + 8);
    }
LABEL_23:
    if ((unint64_t)v7 >= *(void *)(a1 + 16))
    {
      unint64_t result = (unint64_t)sub_EB7754((long long **)a1, a2);
      *uint64_t v9 = result;
    }
    else
    {
      unint64_t result = (unint64_t)sub_443EFC((char *)v7, a2);
      *uint64_t v9 = (unint64_t)v7 + 472;
      *uint64_t v9 = (unint64_t)v7 + 472;
    }
    return result;
  }
  uint64_t v7 = *(long long **)a1;
  uint64_t v10 = *(long long **)(a1 + 8);
  if (*(long long **)a1 != v10)
  {
    while (1)
    {
      unint64_t result = sub_107D5FC(a2, v7);
      if (result) {
        break;
      }
      uint64_t v7 = (long long *)((char *)v7 + 472);
      if (v7 == v10)
      {
        uint64_t v7 = v10;
        break;
      }
    }
  }
LABEL_15:
  uint64_t v9 = (unint64_t *)(a1 + 8);
  if (v7 == *(long long **)(a1 + 8)) {
    goto LABEL_23;
  }
LABEL_16:
  if (a3 == 3)
  {
    unint64_t v11 = sub_EAE104(a2);
    unint64_t result = sub_EAE104(v7);
    if (v11 < result)
    {
      return sub_D5AC24((uint64_t)v7, (uint64_t)a2);
    }
  }
  return result;
}

void sub_EB6650(_Unwind_Exception *a1)
{
  *double v2 = v1;
  _Unwind_Resume(a1);
}

uint64_t sub_EB6658(void *a1)
{
  return -1601513229 * ((a1[1] - *a1) >> 3);
}

unint64_t sub_EB6674(unint64_t result, long long **a2, int a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v6 = result;
    do
    {
      unint64_t result = sub_EB64AC(v6, v3, a3);
      unint64_t v3 = (long long *)((char *)v3 + 472);
    }
    while (v3 != v4);
  }
  return result;
}

unint64_t sub_EB66C8(uint64_t a1, long long *a2, int a3)
{
  unint64_t result = sub_EAE144(a2);
  if (result) {
    return result;
  }
  if ((a3 - 2) >= 2)
  {
    if (a3)
    {
      if (a3 == 1)
      {
        uint64_t v7 = *(long long **)a1;
        uint64_t v8 = *(long long **)(a1 + 8);
        if (*(long long **)a1 != v8)
        {
          while (1)
          {
            unint64_t result = sub_EB1870((uint64_t)v7, a2);
            if (result) {
              break;
            }
            uint64_t v7 = (long long *)((char *)v7 + 472);
            if (v7 == v8)
            {
              uint64_t v7 = v8;
              uint64_t v9 = (unint64_t *)(a1 + 8);
              if (v7 != *(long long **)(a1 + 8)) {
                goto LABEL_16;
              }
              goto LABEL_23;
            }
          }
        }
        goto LABEL_15;
      }
      uint64_t v7 = *(long long **)(a1 + 8);
      uint64_t v9 = (unint64_t *)(a1 + 8);
    }
    else
    {
      uint64_t v9 = (unint64_t *)(a1 + 8);
      uint64_t v7 = *(long long **)(a1 + 8);
    }
LABEL_23:
    if ((unint64_t)v7 >= *(void *)(a1 + 16))
    {
      unint64_t result = (unint64_t)sub_EB7A9C((long long **)a1, a2);
      *uint64_t v9 = result;
    }
    else
    {
      unint64_t result = (unint64_t)sub_444D20((char *)v7, a2);
      *uint64_t v9 = (unint64_t)v7 + 472;
      *uint64_t v9 = (unint64_t)v7 + 472;
    }
    return result;
  }
  uint64_t v7 = *(long long **)a1;
  uint64_t v10 = *(long long **)(a1 + 8);
  if (*(long long **)a1 != v10)
  {
    while (1)
    {
      unint64_t result = sub_107DCA8(a2, v7);
      if (result) {
        break;
      }
      uint64_t v7 = (long long *)((char *)v7 + 472);
      if (v7 == v10)
      {
        uint64_t v7 = v10;
        break;
      }
    }
  }
LABEL_15:
  uint64_t v9 = (unint64_t *)(a1 + 8);
  if (v7 == *(long long **)(a1 + 8)) {
    goto LABEL_23;
  }
LABEL_16:
  if (a3 == 3)
  {
    unint64_t v11 = sub_EB04C4(a2);
    unint64_t result = sub_EB04C4(v7);
    if (v11 < result)
    {
      return sub_448838((uint64_t)v7, a2);
    }
  }
  return result;
}

void sub_EB686C(_Unwind_Exception *a1)
{
  *double v2 = v1;
  _Unwind_Resume(a1);
}

unint64_t sub_EB6874(unint64_t result, long long **a2, int a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v6 = result;
    do
    {
      unint64_t result = sub_EB66C8(v6, v3, a3);
      unint64_t v3 = (long long *)((char *)v3 + 472);
    }
    while (v3 != v4);
  }
  return result;
}

unint64_t sub_EB68C8(uint64_t a1, long long *a2, int a3)
{
  unint64_t result = sub_EB2EC4((uint64_t)a2);
  if (result) {
    return result;
  }
  if ((a3 - 2) >= 2)
  {
    if (a3)
    {
      if (a3 == 1)
      {
        uint64_t v7 = *(long long **)a1;
        uint64_t v8 = *(long long **)(a1 + 8);
        if (*(long long **)a1 != v8)
        {
          while (1)
          {
            unint64_t result = sub_EB4344((uint64_t)v7, (uint64_t)a2);
            if (result) {
              break;
            }
            v7 += 30;
            if (v7 == v8)
            {
              uint64_t v7 = v8;
              uint64_t v9 = (unint64_t *)(a1 + 8);
              if (v7 != *(long long **)(a1 + 8)) {
                goto LABEL_16;
              }
              goto LABEL_23;
            }
          }
        }
        goto LABEL_15;
      }
      uint64_t v7 = *(long long **)(a1 + 8);
      uint64_t v9 = (unint64_t *)(a1 + 8);
    }
    else
    {
      uint64_t v9 = (unint64_t *)(a1 + 8);
      uint64_t v7 = *(long long **)(a1 + 8);
    }
LABEL_23:
    if ((unint64_t)v7 >= *(void *)(a1 + 16))
    {
      unint64_t result = (unint64_t)sub_EB7DCC((long long **)a1, a2);
      *uint64_t v9 = result;
    }
    else
    {
      unint64_t result = (unint64_t)sub_4456B4((char *)v7, a2);
      *uint64_t v9 = (unint64_t)(v7 + 30);
      *uint64_t v9 = (unint64_t)(v7 + 30);
    }
    return result;
  }
  uint64_t v7 = *(long long **)a1;
  uint64_t v10 = *(long long **)(a1 + 8);
  if (*(long long **)a1 != v10)
  {
    while (1)
    {
      unint64_t result = sub_107E2B0((uint64_t)a2, (uint64_t)v7);
      if (result) {
        break;
      }
      v7 += 30;
      if (v7 == v10)
      {
        uint64_t v7 = v10;
        break;
      }
    }
  }
LABEL_15:
  uint64_t v9 = (unint64_t *)(a1 + 8);
  if (v7 == *(long long **)(a1 + 8)) {
    goto LABEL_23;
  }
LABEL_16:
  if (a3 == 3)
  {
    unint64_t v11 = sub_EB2E84((uint64_t)a2);
    unint64_t result = sub_EB2E84((uint64_t)v7);
    if (v11 < result)
    {
      return sub_4495AC((uint64_t)v7, a2);
    }
  }
  return result;
}

void sub_EB6A6C(_Unwind_Exception *a1)
{
  *double v2 = v1;
  _Unwind_Resume(a1);
}

uint64_t sub_EB6A74(void *a1)
{
  return -286331153 * ((a1[1] - *a1) >> 5);
}

unint64_t sub_EB6A90(unint64_t result, long long **a2, int a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v6 = result;
    do
    {
      unint64_t result = sub_EB68C8(v6, v3, a3);
      v3 += 30;
    }
    while (v3 != v4);
  }
  return result;
}

unint64_t sub_EB6AE4(int64x2_t *a1, std::string *a2, int a3)
{
  unint64_t result = sub_EA80FC(&a2->__r_.__value_.__l.__data_);
  if (result) {
    return result;
  }
  if ((a3 - 2) >= 2)
  {
    if (a3)
    {
      if (a3 == 1)
      {
        uint64_t v7 = (std::string *)a1->i64[0];
        uint64_t v8 = (std::string *)a1->i64[1];
        if ((std::string *)a1->i64[0] != v8)
        {
          while (1)
          {
            unint64_t result = sub_EA97DC((uint64_t *)v7, (uint64_t)a2);
            if (result) {
              break;
            }
            v7 += 2;
            if (v7 == v8)
            {
              uint64_t v7 = v8;
              uint64_t v9 = &a1->u64[1];
              if (v7 != (std::string *)a1->i64[1]) {
                goto LABEL_16;
              }
              goto LABEL_25;
            }
          }
        }
        goto LABEL_15;
      }
      uint64_t v7 = (std::string *)a1->i64[1];
      uint64_t v9 = &a1->u64[1];
    }
    else
    {
      uint64_t v9 = &a1->u64[1];
      uint64_t v7 = (std::string *)a1->i64[1];
    }
LABEL_25:
    if ((unint64_t)v7 >= a1[1].i64[0])
    {
      unint64_t result = sub_EB8034(a1, (uint64_t)a2);
      *uint64_t v9 = result;
    }
    else
    {
      unint64_t result = (unint64_t)sub_EB7F58((uint64_t)a1, (uint64_t)a2);
      *uint64_t v9 = (unint64_t)&v7[2];
    }
    return result;
  }
  uint64_t v7 = (std::string *)a1->i64[0];
  uint64_t v10 = (std::string *)a1->i64[1];
  if ((std::string *)a1->i64[0] != v10)
  {
    while (1)
    {
      unint64_t result = sub_107E940(a2, v7);
      if (result) {
        break;
      }
      v7 += 2;
      if (v7 == v10)
      {
        uint64_t v7 = v10;
        break;
      }
    }
  }
LABEL_15:
  uint64_t v9 = &a1->u64[1];
  if (v7 == (std::string *)a1->i64[1]) {
    goto LABEL_25;
  }
LABEL_16:
  if (a3 == 3)
  {
    unint64_t v11 = sub_EA9998((uint64_t)a2);
    unint64_t result = sub_EA9998((uint64_t)v7);
    if (v11 < result)
    {
      if (v7 != a2) {
        sub_D5A97C((uint64_t *)v7, a2->__r_.__value_.__r.__words[0], a2->__r_.__value_.__l.__size_, 0xCBEEA4E1A08AD8F3 * ((uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 3));
      }
      return (unint64_t)std::string::operator=(v7 + 1, a2 + 1);
    }
  }
  return result;
}

void sub_EB6CAC(int64x2_t *a1, uint64_t a2, int a3)
{
  if (sub_EA80FC((char **)a2)) {
    return;
  }
  if ((a3 - 2) >= 2)
  {
    if (a3)
    {
      if (a3 == 1)
      {
        unint64_t v6 = a1->i64[0];
        unint64_t v7 = a1->u64[1];
        if (a1->i64[0] != v7)
        {
          while (!sub_EA97DC((uint64_t *)v6, a2))
          {
            v6 += 48;
            if (v6 == v7)
            {
              unint64_t v6 = v7;
              uint64_t v8 = &a1->i64[1];
              if (v6 != a1->i64[1]) {
                goto LABEL_16;
              }
              goto LABEL_28;
            }
          }
        }
        goto LABEL_15;
      }
      unint64_t v6 = a1->u64[1];
      uint64_t v8 = &a1->i64[1];
    }
    else
    {
      uint64_t v8 = &a1->i64[1];
      unint64_t v6 = a1->u64[1];
    }
LABEL_28:
    if (v6 >= a1[1].i64[0])
    {
      uint64_t *v8 = sub_EB832C(a1, a2);
    }
    else
    {
      sub_EB8250((uint64_t)a1, a2);
      uint64_t *v8 = v6 + 48;
    }
    return;
  }
  unint64_t v6 = a1->i64[0];
  unint64_t v9 = a1->u64[1];
  if (a1->i64[0] != v9)
  {
    while (!sub_107E940((void *)a2, (void *)v6))
    {
      v6 += 48;
      if (v6 == v9)
      {
        unint64_t v6 = v9;
        break;
      }
    }
  }
LABEL_15:
  uint64_t v8 = &a1->i64[1];
  if (v6 == a1->i64[1]) {
    goto LABEL_28;
  }
LABEL_16:
  if (a3 == 3)
  {
    unint64_t v10 = sub_EA9998(a2);
    if (v10 < sub_EA9998(v6))
    {
      uint64_t v11 = *(void *)v6;
      if (*(void *)v6)
      {
        uint64_t v12 = *(void *)(v6 + 8);
        int64_t v13 = *(void **)v6;
        if (v12 != v11)
        {
          do
            uint64_t v12 = sub_405F44(v12 - 472);
          while (v12 != v11);
          int64_t v13 = *(void **)v6;
        }
        *(void *)(v6 + 8) = v11;
        operator delete(v13);
        *(void *)unint64_t v6 = 0;
        *(void *)(v6 + 8) = 0;
        *(void *)(v6 + 16) = 0;
      }
      *(_OWORD *)unint64_t v6 = *(_OWORD *)a2;
      *(void *)(v6 + 16) = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      uint64_t v14 = (void **)(v6 + 24);
      if (*(char *)(v6 + 47) < 0) {
        operator delete(*v14);
      }
      long long v15 = *(_OWORD *)(a2 + 24);
      *(void *)(v6 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)uint64_t v14 = v15;
      *(unsigned char *)(a2 + 47) = 0;
      *(unsigned char *)(a2 + 24) = 0;
    }
  }
}

uint64_t sub_EB6EB0(void *a1)
{
  return -1431655765 * ((a1[1] - *a1) >> 4);
}

uint64_t sub_EB6ECC(uint64_t a1, uint64_t a2)
{
  sub_C641BC((uint64_t)&v6, a2 + 48, *(void *)(a1 + 8), a2);
  sub_C64384(a1, v4);
  return a2;
}

uint64_t sub_EB6F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_C641BC((uint64_t)&v7, a3, *(void *)(a1 + 8), a2);
    sub_C64384(a1, v5);
  }
  return a2;
}

unint64_t sub_EB6F70(int64x2_t *a1, std::string *a2, int a3)
{
  unint64_t result = sub_EA80FC(&a2->__r_.__value_.__l.__data_);
  if (result) {
    return result;
  }
  if ((a3 - 2) >= 2)
  {
    if (a3)
    {
      if (a3 == 1)
      {
        char v7 = (std::string *)a1->i64[0];
        uint64_t v8 = (std::string *)a1->i64[1];
        if ((std::string *)a1->i64[0] != v8)
        {
          while (1)
          {
            unint64_t result = sub_EA8070((uint64_t *)v7, (uint64_t)a2);
            if (result) {
              break;
            }
            v7 += 2;
            if (v7 == v8)
            {
              char v7 = v8;
              unint64_t v9 = &a1->u64[1];
              if (v7 != (std::string *)a1->i64[1]) {
                goto LABEL_16;
              }
              goto LABEL_25;
            }
          }
        }
        goto LABEL_15;
      }
      char v7 = (std::string *)a1->i64[1];
      unint64_t v9 = &a1->u64[1];
    }
    else
    {
      unint64_t v9 = &a1->u64[1];
      char v7 = (std::string *)a1->i64[1];
    }
LABEL_25:
    if ((unint64_t)v7 >= a1[1].i64[0])
    {
      unint64_t result = sub_EB8624(a1, (uint64_t)a2);
      *unint64_t v9 = result;
    }
    else
    {
      unint64_t result = (unint64_t)sub_EB8548((uint64_t)a1, (uint64_t)a2);
      *unint64_t v9 = (unint64_t)&v7[2];
    }
    return result;
  }
  char v7 = (std::string *)a1->i64[0];
  unint64_t v10 = (std::string *)a1->i64[1];
  if ((std::string *)a1->i64[0] != v10)
  {
    while (1)
    {
      unint64_t result = sub_107EA00(a2, v7);
      if (result) {
        break;
      }
      v7 += 2;
      if (v7 == v10)
      {
        char v7 = v10;
        break;
      }
    }
  }
LABEL_15:
  unint64_t v9 = &a1->u64[1];
  if (v7 == (std::string *)a1->i64[1]) {
    goto LABEL_25;
  }
LABEL_16:
  if (a3 == 3)
  {
    unint64_t v11 = sub_EA8464((uint64_t)a2);
    unint64_t result = sub_EA8464((uint64_t)v7);
    if (v11 < result)
    {
      if (v7 != a2) {
        sub_D5C258((uint64_t *)v7, a2->__r_.__value_.__r.__words[0], a2->__r_.__value_.__l.__size_, 0xCBEEA4E1A08AD8F3 * ((uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 3));
      }
      return (unint64_t)std::string::operator=(v7 + 1, a2 + 1);
    }
  }
  return result;
}

void sub_EB7138(int64x2_t *a1, uint64_t a2, int a3)
{
  if (sub_EA80FC((char **)a2)) {
    return;
  }
  if ((a3 - 2) >= 2)
  {
    if (a3)
    {
      if (a3 == 1)
      {
        unint64_t v6 = a1->i64[0];
        unint64_t v7 = a1->u64[1];
        if (a1->i64[0] != v7)
        {
          while (!sub_EA8070((uint64_t *)v6, a2))
          {
            v6 += 48;
            if (v6 == v7)
            {
              unint64_t v6 = v7;
              uint64_t v8 = &a1->i64[1];
              if (v6 != a1->i64[1]) {
                goto LABEL_16;
              }
              goto LABEL_28;
            }
          }
        }
        goto LABEL_15;
      }
      unint64_t v6 = a1->u64[1];
      uint64_t v8 = &a1->i64[1];
    }
    else
    {
      uint64_t v8 = &a1->i64[1];
      unint64_t v6 = a1->u64[1];
    }
LABEL_28:
    if (v6 >= a1[1].i64[0])
    {
      uint64_t *v8 = sub_EB891C(a1, a2);
    }
    else
    {
      sub_EB8840((uint64_t)a1, a2);
      uint64_t *v8 = v6 + 48;
    }
    return;
  }
  unint64_t v6 = a1->i64[0];
  unint64_t v9 = a1->u64[1];
  if (a1->i64[0] != v9)
  {
    while (!sub_107EA00((void *)a2, (void *)v6))
    {
      v6 += 48;
      if (v6 == v9)
      {
        unint64_t v6 = v9;
        break;
      }
    }
  }
LABEL_15:
  uint64_t v8 = &a1->i64[1];
  if (v6 == a1->i64[1]) {
    goto LABEL_28;
  }
LABEL_16:
  if (a3 == 3)
  {
    unint64_t v10 = sub_EA8464(a2);
    if (v10 < sub_EA8464(v6))
    {
      uint64_t v11 = *(void *)v6;
      if (*(void *)v6)
      {
        uint64_t v12 = *(void *)(v6 + 8);
        int64_t v13 = *(void **)v6;
        if (v12 != v11)
        {
          do
            uint64_t v12 = sub_405F44(v12 - 472);
          while (v12 != v11);
          int64_t v13 = *(void **)v6;
        }
        *(void *)(v6 + 8) = v11;
        operator delete(v13);
        *(void *)unint64_t v6 = 0;
        *(void *)(v6 + 8) = 0;
        *(void *)(v6 + 16) = 0;
      }
      *(_OWORD *)unint64_t v6 = *(_OWORD *)a2;
      *(void *)(v6 + 16) = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      uint64_t v14 = (void **)(v6 + 24);
      if (*(char *)(v6 + 47) < 0) {
        operator delete(*v14);
      }
      long long v15 = *(_OWORD *)(a2 + 24);
      *(void *)(v6 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)uint64_t v14 = v15;
      *(unsigned char *)(a2 + 47) = 0;
      *(unsigned char *)(a2 + 24) = 0;
    }
  }
}

unint64_t sub_EB733C(int64x2_t *a1, std::string *a2, int a3)
{
  unint64_t result = sub_EA8E90((uint64_t *)a2);
  if (result) {
    return result;
  }
  if ((a3 - 2) >= 2)
  {
    if (a3)
    {
      if (a3 == 1)
      {
        unint64_t v7 = (std::string *)a1->i64[0];
        uint64_t v8 = (std::string *)a1->i64[1];
        if ((std::string *)a1->i64[0] != v8)
        {
          while (1)
          {
            unint64_t result = sub_EA8E04((uint64_t *)v7, (uint64_t *)a2);
            if (result) {
              break;
            }
            v7 += 2;
            if (v7 == v8)
            {
              unint64_t v7 = v8;
              unint64_t v9 = &a1->u64[1];
              if (v7 != (std::string *)a1->i64[1]) {
                goto LABEL_16;
              }
              goto LABEL_25;
            }
          }
        }
        goto LABEL_15;
      }
      unint64_t v7 = (std::string *)a1->i64[1];
      unint64_t v9 = &a1->u64[1];
    }
    else
    {
      unint64_t v9 = &a1->u64[1];
      unint64_t v7 = (std::string *)a1->i64[1];
    }
LABEL_25:
    if ((unint64_t)v7 >= a1[1].i64[0])
    {
      unint64_t result = sub_EB8C0C(a1, (uint64_t)a2);
      *unint64_t v9 = result;
    }
    else
    {
      unint64_t result = (unint64_t)sub_EB8B38((uint64_t)a1, (uint64_t)a2);
      *unint64_t v9 = (unint64_t)&v7[2];
    }
    return result;
  }
  unint64_t v7 = (std::string *)a1->i64[0];
  unint64_t v10 = (std::string *)a1->i64[1];
  if ((std::string *)a1->i64[0] != v10)
  {
    while (1)
    {
      unint64_t result = sub_107EAC0(a2, v7);
      if (result) {
        break;
      }
      v7 += 2;
      if (v7 == v10)
      {
        unint64_t v7 = v10;
        break;
      }
    }
  }
LABEL_15:
  unint64_t v9 = &a1->u64[1];
  if (v7 == (std::string *)a1->i64[1]) {
    goto LABEL_25;
  }
LABEL_16:
  if (a3 == 3)
  {
    unint64_t v11 = sub_EA90A4((uint64_t *)a2);
    unint64_t result = sub_EA90A4((uint64_t *)v7);
    if (v11 < result)
    {
      if (v7 != a2) {
        sub_D5D9A0((uint64_t *)v7, a2->__r_.__value_.__r.__words[0], a2->__r_.__value_.__l.__size_, 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 5));
      }
      return (unint64_t)std::string::operator=(v7 + 1, a2 + 1);
    }
  }
  return result;
}

void sub_EB74FC(int64x2_t *a1, uint64_t a2, int a3)
{
  if (sub_EA8E90((uint64_t *)a2)) {
    return;
  }
  if ((a3 - 2) >= 2)
  {
    if (a3)
    {
      if (a3 == 1)
      {
        unint64_t v6 = a1->i64[0];
        uint64_t v7 = a1->i64[1];
        if (a1->i64[0] != v7)
        {
          while ((sub_EA8E04((uint64_t *)v6, (uint64_t *)a2) & 1) == 0)
          {
            v6 += 48;
            if (v6 == v7)
            {
              unint64_t v6 = v7;
              uint64_t v8 = &a1->i64[1];
              if (v6 != a1->i64[1]) {
                goto LABEL_16;
              }
              goto LABEL_28;
            }
          }
        }
        goto LABEL_15;
      }
      unint64_t v6 = a1->u64[1];
      uint64_t v8 = &a1->i64[1];
    }
    else
    {
      uint64_t v8 = &a1->i64[1];
      unint64_t v6 = a1->u64[1];
    }
LABEL_28:
    if (v6 >= a1[1].i64[0])
    {
      uint64_t *v8 = sub_EB8EF4(a1, a2);
    }
    else
    {
      sub_EB8E20((uint64_t)a1, a2);
      uint64_t *v8 = v6 + 48;
    }
    return;
  }
  unint64_t v6 = a1->i64[0];
  uint64_t v9 = a1->i64[1];
  if (a1->i64[0] != v9)
  {
    while ((sub_107EAC0((void *)a2, (void *)v6) & 1) == 0)
    {
      v6 += 48;
      if (v6 == v9)
      {
        unint64_t v6 = v9;
        break;
      }
    }
  }
LABEL_15:
  uint64_t v8 = &a1->i64[1];
  if (v6 == a1->i64[1]) {
    goto LABEL_28;
  }
LABEL_16:
  if (a3 == 3)
  {
    unint64_t v10 = sub_EA90A4((uint64_t *)a2);
    if (v10 < sub_EA90A4((uint64_t *)v6))
    {
      uint64_t v11 = *(void *)v6;
      if (*(void *)v6)
      {
        uint64_t v12 = *(void *)(v6 + 8);
        int64_t v13 = *(void **)v6;
        if (v12 != v11)
        {
          do
            uint64_t v12 = sub_4451C0(v12 - 480);
          while (v12 != v11);
          int64_t v13 = *(void **)v6;
        }
        *(void *)(v6 + 8) = v11;
        operator delete(v13);
        *(void *)unint64_t v6 = 0;
        *(void *)(v6 + 8) = 0;
        *(void *)(v6 + 16) = 0;
      }
      *(_OWORD *)unint64_t v6 = *(_OWORD *)a2;
      *(void *)(v6 + 16) = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      uint64_t v14 = (void **)(v6 + 24);
      if (*(char *)(v6 + 47) < 0) {
        operator delete(*v14);
      }
      long long v15 = *(_OWORD *)(a2 + 24);
      *(void *)(v6 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)uint64_t v14 = v15;
      *(unsigned char *)(a2 + 47) = 0;
      *(unsigned char *)(a2 + 24) = 0;
    }
  }
}

void sub_EB7700(int64x2_t *a1, uint64_t *a2, int a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      sub_EB74FC(a1, v3, a3);
      v3 += 48;
    }
    while (v3 != v4);
  }
}

char *sub_EB7754(long long **a1, long long *a2)
{
  unint64_t v3 = 0xCBEEA4E1A08AD8F3 * (((char *)a1[1] - (char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x8AD8F2FBA93868) {
    sub_2E00();
  }
  if (0x97DD49C34115B1E6 * (((char *)a1[2] - (char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x97DD49C34115B1E6 * (((char *)a1[2] - (char *)*a1) >> 3);
  }
  if (0xCBEEA4E1A08AD8F3 * (((char *)a1[2] - (char *)*a1) >> 3) >= 0x456C797DD49C34) {
    unint64_t v6 = 0x8AD8F2FBA93868;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x8AD8F2FBA93868) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(472 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v14 = &v7[472 * v3];
  long long v15 = (long long *)&v7[472 * v6];
  sub_443EFC(v14, a2);
  uint64_t v8 = (uint64_t)v14;
  uint64_t v9 = v14 + 472;
  uint64_t v11 = *a1;
  unint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = (long long *)v14;
    a1[1] = (long long *)v9;
    a1[2] = v15;
  }
  else
  {
    do
    {
      v8 -= 472;
      unint64_t v10 = (long long *)((char *)v10 - 472);
      sub_446D30((uint64_t)(a1 + 2), v8, v10);
    }
    while (v10 != v11);
    uint64_t v12 = *a1;
    unint64_t v10 = a1[1];
    *a1 = (long long *)v8;
    a1[1] = (long long *)v9;
    a1[2] = v15;
    if (v10 != v12)
    {
      do
      {
        unint64_t v10 = (long long *)((char *)v10 - 472);
        sub_405F44((uint64_t)v10);
      }
      while (v10 != v12);
      unint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 472;
}

void sub_EB78E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_446EA0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_EB78F8(long long **a1, long long *a2)
{
  unint64_t v3 = 0xCBEEA4E1A08AD8F3 * (((char *)a1[1] - (char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x8AD8F2FBA93868) {
    sub_2E00();
  }
  if (0x97DD49C34115B1E6 * (((char *)a1[2] - (char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x97DD49C34115B1E6 * (((char *)a1[2] - (char *)*a1) >> 3);
  }
  if (0xCBEEA4E1A08AD8F3 * (((char *)a1[2] - (char *)*a1) >> 3) >= 0x456C797DD49C34) {
    unint64_t v6 = 0x8AD8F2FBA93868;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x8AD8F2FBA93868) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(472 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v14 = &v7[472 * v3];
  long long v15 = (long long *)&v7[472 * v6];
  sub_444D20(v14, a2);
  uint64_t v8 = (uint64_t)v14;
  uint64_t v9 = v14 + 472;
  uint64_t v11 = *a1;
  unint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = (long long *)v14;
    a1[1] = (long long *)v9;
    a1[2] = v15;
  }
  else
  {
    do
    {
      v8 -= 472;
      unint64_t v10 = (long long *)((char *)v10 - 472);
      sub_446D30((uint64_t)(a1 + 2), v8, v10);
    }
    while (v10 != v11);
    uint64_t v12 = *a1;
    unint64_t v10 = a1[1];
    *a1 = (long long *)v8;
    a1[1] = (long long *)v9;
    a1[2] = v15;
    if (v10 != v12)
    {
      do
      {
        unint64_t v10 = (long long *)((char *)v10 - 472);
        sub_405F44((uint64_t)v10);
      }
      while (v10 != v12);
      unint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 472;
}

void sub_EB7A88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_446EA0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_EB7A9C(long long **a1, long long *a2)
{
  unint64_t v3 = 0xCBEEA4E1A08AD8F3 * (((char *)a1[1] - (char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x8AD8F2FBA93868) {
    sub_2E00();
  }
  if (0x97DD49C34115B1E6 * (((char *)a1[2] - (char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x97DD49C34115B1E6 * (((char *)a1[2] - (char *)*a1) >> 3);
  }
  if (0xCBEEA4E1A08AD8F3 * (((char *)a1[2] - (char *)*a1) >> 3) >= 0x456C797DD49C34) {
    unint64_t v6 = 0x8AD8F2FBA93868;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x8AD8F2FBA93868) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(472 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v14 = &v7[472 * v3];
  long long v15 = (long long *)&v7[472 * v6];
  sub_444D20(v14, a2);
  uint64_t v8 = (uint64_t)v14;
  uint64_t v9 = v14 + 472;
  uint64_t v11 = *a1;
  unint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = (long long *)v14;
    a1[1] = (long long *)v9;
    a1[2] = v15;
  }
  else
  {
    do
    {
      v8 -= 472;
      unint64_t v10 = (long long *)((char *)v10 - 472);
      sub_446D30((uint64_t)(a1 + 2), v8, v10);
    }
    while (v10 != v11);
    uint64_t v12 = *a1;
    unint64_t v10 = a1[1];
    *a1 = (long long *)v8;
    a1[1] = (long long *)v9;
    a1[2] = v15;
    if (v10 != v12)
    {
      do
      {
        unint64_t v10 = (long long *)((char *)v10 - 472);
        sub_405F44((uint64_t)v10);
      }
      while (v10 != v12);
      unint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 472;
}

void sub_EB7C2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_446EA0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_EB7C40(long long **a1, long long *a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * (((char *)a1[1] - (char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x88888888888888) {
    sub_2E00();
  }
  if (0xDDDDDDDDDDDDDDDELL * (((char *)a1[2] - (char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * (((char *)a1[2] - (char *)*a1) >> 5);
  }
  if (0xEEEEEEEEEEEEEEEFLL * (((char *)a1[2] - (char *)*a1) >> 5) >= 0x44444444444444) {
    unint64_t v6 = 0x88888888888888;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x88888888888888) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(480 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v14 = &v7[480 * v3];
  long long v15 = (long long *)&v7[480 * v6];
  sub_4456B4(v14, a2);
  uint64_t v8 = (uint64_t)v14;
  uint64_t v9 = v14 + 480;
  uint64_t v11 = *a1;
  unint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = (long long *)v14;
    a1[1] = (long long *)v9;
    a1[2] = v15;
  }
  else
  {
    do
    {
      v8 -= 480;
      v10 -= 30;
      sub_CE3918((uint64_t)(a1 + 2), v8, v10);
    }
    while (v10 != v11);
    uint64_t v12 = *a1;
    unint64_t v10 = a1[1];
    *a1 = (long long *)v8;
    a1[1] = (long long *)v9;
    a1[2] = v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 30;
        sub_4451C0((uint64_t)v10);
      }
      while (v10 != v12);
      unint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 480;
}

void sub_EB7DB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_449164((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_EB7DCC(long long **a1, long long *a2)
{
  unint64_t v3 = 0xEEEEEEEEEEEEEEEFLL * (((char *)a1[1] - (char *)*a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x88888888888888) {
    sub_2E00();
  }
  if (0xDDDDDDDDDDDDDDDELL * (((char *)a1[2] - (char *)*a1) >> 5) > v4) {
    unint64_t v4 = 0xDDDDDDDDDDDDDDDELL * (((char *)a1[2] - (char *)*a1) >> 5);
  }
  if (0xEEEEEEEEEEEEEEEFLL * (((char *)a1[2] - (char *)*a1) >> 5) >= 0x44444444444444) {
    unint64_t v6 = 0x88888888888888;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x88888888888888) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(480 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v14 = &v7[480 * v3];
  long long v15 = (long long *)&v7[480 * v6];
  sub_4456B4(v14, a2);
  uint64_t v8 = (uint64_t)v14;
  uint64_t v9 = v14 + 480;
  uint64_t v11 = *a1;
  unint64_t v10 = a1[1];
  if (v10 == *a1)
  {
    *a1 = (long long *)v14;
    a1[1] = (long long *)v9;
    a1[2] = v15;
  }
  else
  {
    do
    {
      v8 -= 480;
      v10 -= 30;
      sub_CE3918((uint64_t)(a1 + 2), v8, v10);
    }
    while (v10 != v11);
    uint64_t v12 = *a1;
    unint64_t v10 = a1[1];
    *a1 = (long long *)v8;
    a1[1] = (long long *)v9;
    a1[2] = v15;
    if (v10 != v12)
    {
      do
      {
        v10 -= 30;
        sub_4451C0((uint64_t)v10);
      }
      while (v10 != v12);
      unint64_t v10 = v12;
    }
  }
  if (v10) {
    operator delete(v10);
  }
  return v14 + 480;
}

void sub_EB7F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_449164((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_EB7F58(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  void *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  sub_443D6C(v4, *(void *)a2, *(void *)(a2 + 8), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  unint64_t result = v4 + 3;
  if (*(char *)(a2 + 47) < 0)
  {
    unint64_t result = sub_4200(result, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    v4[5] = *(void *)(a2 + 40);
    *(_OWORD *)unint64_t result = v6;
  }
  *(void *)(a1 + 8) = v4 + 6;
  return result;
}

void sub_EB8004(_Unwind_Exception *exception_object)
{
  if (*v2)
  {
    sub_20B141C((uint64_t)v2);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_EB8034(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[48 * v3];
  std::string __p = v7;
  v20.i64[0] = (uint64_t)v8;
  v20.i64[1] = (uint64_t)v8;
  uint64_t v21 = &v7[48 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  sub_443D6C(v8, *(void *)a2, *(void *)(a2 + 8), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  uint64_t v9 = v8 + 24;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_4200(v9, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + 24);
    *(void *)&v7[48 * v3 + 40] = *(void *)(a2 + 40);
  }
  uint64_t v10 = v20.i64[0];
  uint64_t v11 = v20.i64[1] + 48;
  v20.i64[1] += 48;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v12);
  }
  else
  {
    do
    {
      *(void *)(v10 - 48) = 0;
      *(void *)(v10 - 40) = 0;
      v10 -= 48;
      *(void *)(v10 + 16) = 0;
      long long v14 = *(_OWORD *)(v12 - 48);
      v12 -= 48;
      *(_OWORD *)uint64_t v10 = v14;
      *(void *)(v10 + 16) = *(void *)(v12 + 16);
      *(void *)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      long long v15 = *(_OWORD *)(v12 + 24);
      *(void *)(v10 + 40) = *(void *)(v12 + 40);
      *(_OWORD *)(v10 + 24) = v15;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 40) = 0;
      *(void *)(v12 + 24) = 0;
    }
    while (v12 != v13);
    int64x2_t v16 = *a1;
    uint64_t v11 = v20.i64[1];
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v20 = v16;
  uint64_t v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  uint64_t v21 = v17;
  std::string __p = (void *)v16.i64[0];
  sub_C63730((uint64_t)&__p, v16.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_EB8218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*v2)
  {
    sub_20B141C((uint64_t)v2);
    sub_C636F8((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_C636F8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_EB8250(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  void *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  sub_443D6C(v4, *(void *)a2, *(void *)(a2 + 8), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  unint64_t result = v4 + 3;
  if (*(char *)(a2 + 47) < 0)
  {
    unint64_t result = sub_4200(result, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    v4[5] = *(void *)(a2 + 40);
    *(_OWORD *)unint64_t result = v6;
  }
  *(void *)(a1 + 8) = v4 + 6;
  return result;
}

void sub_EB82FC(_Unwind_Exception *exception_object)
{
  if (*v2)
  {
    sub_20B141C((uint64_t)v2);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_EB832C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[48 * v3];
  std::string __p = v7;
  v20.i64[0] = (uint64_t)v8;
  v20.i64[1] = (uint64_t)v8;
  uint64_t v21 = &v7[48 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  sub_443D6C(v8, *(void *)a2, *(void *)(a2 + 8), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  uint64_t v9 = v8 + 24;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_4200(v9, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + 24);
    *(void *)&v7[48 * v3 + 40] = *(void *)(a2 + 40);
  }
  uint64_t v10 = v20.i64[0];
  uint64_t v11 = v20.i64[1] + 48;
  v20.i64[1] += 48;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v12);
  }
  else
  {
    do
    {
      *(void *)(v10 - 48) = 0;
      *(void *)(v10 - 40) = 0;
      v10 -= 48;
      *(void *)(v10 + 16) = 0;
      long long v14 = *(_OWORD *)(v12 - 48);
      v12 -= 48;
      *(_OWORD *)uint64_t v10 = v14;
      *(void *)(v10 + 16) = *(void *)(v12 + 16);
      *(void *)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      long long v15 = *(_OWORD *)(v12 + 24);
      *(void *)(v10 + 40) = *(void *)(v12 + 40);
      *(_OWORD *)(v10 + 24) = v15;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 40) = 0;
      *(void *)(v12 + 24) = 0;
    }
    while (v12 != v13);
    int64x2_t v16 = *a1;
    uint64_t v11 = v20.i64[1];
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v20 = v16;
  uint64_t v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  uint64_t v21 = v17;
  std::string __p = (void *)v16.i64[0];
  sub_C63730((uint64_t)&__p, v16.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_EB8510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*v2)
  {
    sub_20B141C((uint64_t)v2);
    sub_C636F8((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_C636F8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_EB8548(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  void *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  sub_444C18(v4, *(void *)a2, *(void *)(a2 + 8), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  unint64_t result = v4 + 3;
  if (*(char *)(a2 + 47) < 0)
  {
    unint64_t result = sub_4200(result, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    v4[5] = *(void *)(a2 + 40);
    *(_OWORD *)unint64_t result = v6;
  }
  *(void *)(a1 + 8) = v4 + 6;
  return result;
}

void sub_EB85F4(_Unwind_Exception *exception_object)
{
  if (*v2)
  {
    sub_20B141C((uint64_t)v2);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_EB8624(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[48 * v3];
  std::string __p = v7;
  v20.i64[0] = (uint64_t)v8;
  v20.i64[1] = (uint64_t)v8;
  uint64_t v21 = &v7[48 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  sub_444C18(v8, *(void *)a2, *(void *)(a2 + 8), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  uint64_t v9 = v8 + 24;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_4200(v9, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + 24);
    *(void *)&v7[48 * v3 + 40] = *(void *)(a2 + 40);
  }
  uint64_t v10 = v20.i64[0];
  uint64_t v11 = v20.i64[1] + 48;
  v20.i64[1] += 48;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v12);
  }
  else
  {
    do
    {
      *(void *)(v10 - 48) = 0;
      *(void *)(v10 - 40) = 0;
      v10 -= 48;
      *(void *)(v10 + 16) = 0;
      long long v14 = *(_OWORD *)(v12 - 48);
      v12 -= 48;
      *(_OWORD *)uint64_t v10 = v14;
      *(void *)(v10 + 16) = *(void *)(v12 + 16);
      *(void *)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      long long v15 = *(_OWORD *)(v12 + 24);
      *(void *)(v10 + 40) = *(void *)(v12 + 40);
      *(_OWORD *)(v10 + 24) = v15;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 40) = 0;
      *(void *)(v12 + 24) = 0;
    }
    while (v12 != v13);
    int64x2_t v16 = *a1;
    uint64_t v11 = v20.i64[1];
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v20 = v16;
  uint64_t v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  uint64_t v21 = v17;
  std::string __p = (void *)v16.i64[0];
  sub_C63730((uint64_t)&__p, v16.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_EB8808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*v2)
  {
    sub_20B141C((uint64_t)v2);
    sub_C636F8((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_C636F8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_EB8840(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  void *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  sub_444C18(v4, *(void *)a2, *(void *)(a2 + 8), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  unint64_t result = v4 + 3;
  if (*(char *)(a2 + 47) < 0)
  {
    unint64_t result = sub_4200(result, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    v4[5] = *(void *)(a2 + 40);
    *(_OWORD *)unint64_t result = v6;
  }
  *(void *)(a1 + 8) = v4 + 6;
  return result;
}

void sub_EB88EC(_Unwind_Exception *exception_object)
{
  if (*v2)
  {
    sub_20B141C((uint64_t)v2);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_EB891C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[48 * v3];
  std::string __p = v7;
  v20.i64[0] = (uint64_t)v8;
  v20.i64[1] = (uint64_t)v8;
  uint64_t v21 = &v7[48 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  sub_444C18(v8, *(void *)a2, *(void *)(a2 + 8), 0xCBEEA4E1A08AD8F3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  uint64_t v9 = v8 + 24;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_4200(v9, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + 24);
    *(void *)&v7[48 * v3 + 40] = *(void *)(a2 + 40);
  }
  uint64_t v10 = v20.i64[0];
  uint64_t v11 = v20.i64[1] + 48;
  v20.i64[1] += 48;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v12);
  }
  else
  {
    do
    {
      *(void *)(v10 - 48) = 0;
      *(void *)(v10 - 40) = 0;
      v10 -= 48;
      *(void *)(v10 + 16) = 0;
      long long v14 = *(_OWORD *)(v12 - 48);
      v12 -= 48;
      *(_OWORD *)uint64_t v10 = v14;
      *(void *)(v10 + 16) = *(void *)(v12 + 16);
      *(void *)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      long long v15 = *(_OWORD *)(v12 + 24);
      *(void *)(v10 + 40) = *(void *)(v12 + 40);
      *(_OWORD *)(v10 + 24) = v15;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 40) = 0;
      *(void *)(v12 + 24) = 0;
    }
    while (v12 != v13);
    int64x2_t v16 = *a1;
    uint64_t v11 = v20.i64[1];
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v20 = v16;
  uint64_t v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  uint64_t v21 = v17;
  std::string __p = (void *)v16.i64[0];
  sub_C63730((uint64_t)&__p, v16.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_EB8B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*v2)
  {
    sub_20B141C((uint64_t)v2);
    sub_C636F8((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_C636F8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_EB8B38(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  void *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  sub_445528(v4, *(void *)a2, *(void *)(a2 + 8), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
  unint64_t result = v4 + 3;
  if (*(char *)(a2 + 47) < 0)
  {
    unint64_t result = sub_4200(result, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    v4[5] = *(void *)(a2 + 40);
    *(_OWORD *)unint64_t result = v6;
  }
  *(void *)(a1 + 8) = v4 + 6;
  return result;
}

void sub_EB8BDC(_Unwind_Exception *exception_object)
{
  if (*v2)
  {
    sub_20B1468((uint64_t)v2);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_EB8C0C(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[48 * v3];
  std::string __p = v7;
  v20.i64[0] = (uint64_t)v8;
  v20.i64[1] = (uint64_t)v8;
  uint64_t v21 = &v7[48 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  sub_445528(v8, *(void *)a2, *(void *)(a2 + 8), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
  uint64_t v9 = v8 + 24;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_4200(v9, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + 24);
    *(void *)&v7[48 * v3 + 40] = *(void *)(a2 + 40);
  }
  uint64_t v10 = v20.i64[0];
  uint64_t v11 = v20.i64[1] + 48;
  v20.i64[1] += 48;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v12);
  }
  else
  {
    do
    {
      *(void *)(v10 - 48) = 0;
      *(void *)(v10 - 40) = 0;
      v10 -= 48;
      *(void *)(v10 + 16) = 0;
      long long v14 = *(_OWORD *)(v12 - 48);
      v12 -= 48;
      *(_OWORD *)uint64_t v10 = v14;
      *(void *)(v10 + 16) = *(void *)(v12 + 16);
      *(void *)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      long long v15 = *(_OWORD *)(v12 + 24);
      *(void *)(v10 + 40) = *(void *)(v12 + 40);
      *(_OWORD *)(v10 + 24) = v15;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 40) = 0;
      *(void *)(v12 + 24) = 0;
    }
    while (v12 != v13);
    int64x2_t v16 = *a1;
    uint64_t v11 = v20.i64[1];
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v20 = v16;
  uint64_t v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  uint64_t v21 = v17;
  std::string __p = (void *)v16.i64[0];
  sub_CE25EC((uint64_t)&__p, v16.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_EB8DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*v2)
  {
    sub_20B1468((uint64_t)v2);
    sub_CE25B4((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_CE25B4((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_EB8E20(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  void *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  sub_445528(v4, *(void *)a2, *(void *)(a2 + 8), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
  unint64_t result = v4 + 3;
  if (*(char *)(a2 + 47) < 0)
  {
    unint64_t result = sub_4200(result, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    v4[5] = *(void *)(a2 + 40);
    *(_OWORD *)unint64_t result = v6;
  }
  *(void *)(a1 + 8) = v4 + 6;
  return result;
}

void sub_EB8EC4(_Unwind_Exception *exception_object)
{
  if (*v2)
  {
    sub_20B1468((uint64_t)v2);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

uint64_t sub_EB8EF4(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[48 * v3];
  std::string __p = v7;
  v20.i64[0] = (uint64_t)v8;
  v20.i64[1] = (uint64_t)v8;
  uint64_t v21 = &v7[48 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  sub_445528(v8, *(void *)a2, *(void *)(a2 + 8), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
  uint64_t v9 = v8 + 24;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_4200(v9, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(a2 + 24);
    *(void *)&v7[48 * v3 + 40] = *(void *)(a2 + 40);
  }
  uint64_t v10 = v20.i64[0];
  uint64_t v11 = v20.i64[1] + 48;
  v20.i64[1] += 48;
  uint64_t v13 = a1->i64[0];
  unint64_t v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v12);
  }
  else
  {
    do
    {
      *(void *)(v10 - 48) = 0;
      *(void *)(v10 - 40) = 0;
      v10 -= 48;
      *(void *)(v10 + 16) = 0;
      long long v14 = *(_OWORD *)(v12 - 48);
      v12 -= 48;
      *(_OWORD *)uint64_t v10 = v14;
      *(void *)(v10 + 16) = *(void *)(v12 + 16);
      *(void *)unint64_t v12 = 0;
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      long long v15 = *(_OWORD *)(v12 + 24);
      *(void *)(v10 + 40) = *(void *)(v12 + 40);
      *(_OWORD *)(v10 + 24) = v15;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 40) = 0;
      *(void *)(v12 + 24) = 0;
    }
    while (v12 != v13);
    int64x2_t v16 = *a1;
    uint64_t v11 = v20.i64[1];
  }
  a1->i64[0] = v10;
  a1->i64[1] = v11;
  int64x2_t v20 = v16;
  uint64_t v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  uint64_t v21 = v17;
  std::string __p = (void *)v16.i64[0];
  sub_CE25EC((uint64_t)&__p, v16.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_EB90D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*v2)
  {
    sub_20B1468((uint64_t)v2);
    sub_CE25B4((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_CE25B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_EB9108@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 8) = v1;
  return a1;
}

void sub_EB9114()
{
  unk_25FC667 = 16641;
  word_25FC650 = 65;
  byte_25FC67F = 1;
  byte_25FC669 = 0;
}

char *sub_EB913C(uint64_t a1, long long *a2)
{
  return sub_EB9144((char **)(a1 + 120), a2);
}

char *sub_EB9144(char **a1, long long *a2)
{
  unint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    long long v15 = *a1;
    unint64_t v16 = 0xCF3CF3CF3CF3CF3DLL * ((v5 - *a1) >> 3);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 > 0x186186186186186) {
      sub_2E00();
    }
    unint64_t v18 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v4 - (void)v15) >> 3);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0xC30C30C30C30C3) {
      unint64_t v19 = 0x186186186186186;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 > 0x186186186186186) {
        sub_188D718();
      }
      int64x2_t v20 = (char *)operator new(168 * v19);
    }
    else
    {
      int64x2_t v20 = 0;
    }
    long long v21 = a2[9];
    uint64_t v22 = &v20[168 * v16];
    *((_OWORD *)v22 + 8) = a2[8];
    *((_OWORD *)v22 + 9) = v21;
    *((void *)v22 + 20) = *((void *)a2 + 20);
    long long v23 = a2[5];
    *((_OWORD *)v22 + 4) = a2[4];
    *((_OWORD *)v22 + 5) = v23;
    long long v24 = a2[7];
    *((_OWORD *)v22 + 6) = a2[6];
    *((_OWORD *)v22 + 7) = v24;
    long long v25 = a2[1];
    *(_OWORD *)uint64_t v22 = *a2;
    *((_OWORD *)v22 + 1) = v25;
    long long v27 = a2[2];
    long long v26 = a2[3];
    long long v14 = v22 + 168;
    *((_OWORD *)v22 + 2) = v27;
    *((_OWORD *)v22 + 3) = v26;
    if (v5 != v15)
    {
      do
      {
        long long v28 = *(_OWORD *)(v5 - 168);
        long long v29 = *(_OWORD *)(v5 - 152);
        *(_OWORD *)(v22 - 136) = *(_OWORD *)(v5 - 136);
        *(_OWORD *)(v22 - 152) = v29;
        *(_OWORD *)(v22 - 168) = v28;
        long long v30 = *(_OWORD *)(v5 - 120);
        long long v31 = *(_OWORD *)(v5 - 104);
        long long v32 = *(_OWORD *)(v5 - 88);
        *(_OWORD *)(v22 - 72) = *(_OWORD *)(v5 - 72);
        *(_OWORD *)(v22 - 88) = v32;
        *(_OWORD *)(v22 - 104) = v31;
        *(_OWORD *)(v22 - 120) = v30;
        long long v33 = *(_OWORD *)(v5 - 56);
        long long v34 = *(_OWORD *)(v5 - 40);
        long long v35 = *(_OWORD *)(v5 - 24);
        *((void *)v22 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v22 - 24) = v35;
        *(_OWORD *)(v22 - 40) = v34;
        *(_OWORD *)(v22 - 56) = v33;
        v22 -= 168;
        v5 -= 168;
      }
      while (v5 != v15);
      unint64_t v5 = *a1;
    }
    *a1 = v22;
    a1[1] = v14;
    a1[2] = &v20[168 * v19];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[2];
    *((_OWORD *)v5 + 1) = a2[1];
    *((_OWORD *)v5 + 2) = v7;
    *(_OWORD *)unint64_t v5 = v6;
    long long v8 = a2[3];
    long long v9 = a2[4];
    long long v10 = a2[6];
    *((_OWORD *)v5 + 5) = a2[5];
    *((_OWORD *)v5 + 6) = v10;
    *((_OWORD *)v5 + 3) = v8;
    *((_OWORD *)v5 + 4) = v9;
    long long v11 = a2[7];
    long long v12 = a2[8];
    long long v13 = a2[9];
    *((void *)v5 + 20) = *((void *)a2 + 20);
    *((_OWORD *)v5 + 8) = v12;
    *((_OWORD *)v5 + 9) = v13;
    *((_OWORD *)v5 + 7) = v11;
    long long v14 = v5 + 168;
  }
  a1[1] = v14;
  return v14 - 168;
}

BOOL sub_EB9330(uint64_t a1, unsigned int a2)
{
  return 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 3) > a2;
}

uint64_t sub_EB935C(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 120) + 168 * a2;
}

__n128 sub_EB9370@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 120);
  *a2 = result;
  return result;
}

uint64_t sub_EB937C(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 **)(result + 120);
  uint64_t v2 = *(void *)(result + 128);
  unint64_t v3 = v1;
  unint64_t v4 = v1;
  if (v2 - (uint64_t)v1 >= 168)
  {
    if (v2 - (void)v1 == 168)
    {
      long long v6 = *(unsigned __int8 **)(result + 120);
    }
    else
    {
      unint64_t v5 = (v2 - (uint64_t)v1) / 0xA8uLL;
      long long v6 = *(unsigned __int8 **)(result + 120);
      do
      {
        uint64_t v7 = 168 * (v5 >> 2);
        _X15 = &v6[v7];
        __asm { PRFM            #0, [X15] }
        long long v13 = &v6[168 * (v5 >> 1)];
        _X14 = &v13[v7];
        __asm { PRFM            #0, [X14] }
        if (*v13 >= 2u) {
          unint64_t v16 = 0;
        }
        else {
          unint64_t v16 = v5 >> 1;
        }
        v6 += 168 * v16;
        v5 -= v5 >> 1;
      }
      while ((uint64_t)v5 > 1);
    }
    unint64_t v3 = &v6[168 * (*v6 < 2u)];
    unint64_t v17 = v2 - (void)v3;
    unint64_t v4 = v3;
    _ZF = v2 - (void)v3 == 168;
    if (v2 - (uint64_t)v3 >= 168)
    {
      unint64_t v19 = v3;
      if (!_ZF)
      {
        unint64_t v20 = v17 / 0xA8;
        unint64_t v19 = v3;
        do
        {
          uint64_t v21 = 168 * (v20 >> 2);
          _X15 = &v19[v21];
          __asm { PRFM            #0, [X15] }
          long long v24 = &v19[168 * (v20 >> 1)];
          _X14 = &v24[v21];
          __asm { PRFM            #0, [X14] }
          if (*v24 >= 3u) {
            unint64_t v27 = 0;
          }
          else {
            unint64_t v27 = v20 >> 1;
          }
          v19 += 168 * v27;
          v20 -= v20 >> 1;
        }
        while ((uint64_t)v20 > 1);
      }
      unint64_t v4 = &v19[168 * (*v19 < 3u)];
    }
  }
  *(_DWORD *)(result + 144) = 1022611261 * ((unint64_t)(v3 - v1) >> 3);
  *(_DWORD *)(result + 148) = 1022611261 * ((unint64_t)(v4 - v1) >> 3);
  return result;
}

BOOL sub_EB94C0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 144);
  if (v1 == -1) {
    return 0;
  }
  unint64_t v2 = *(unsigned int *)(a1 + 148);
  return v2 != -1
      && v1 <= v2
      && 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 3) >= v2;
}

uint64_t sub_EB9510@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 120);
  uint64_t v3 = v2 + 168 * *(unsigned int *)(result + 144);
  *a2 = v2;
  a2[1] = v3;
  return result;
}

unint64_t sub_EB9528(uint64_t a1)
{
  return (unint64_t)*(unsigned int *)(a1 + 144) << 32;
}

uint64_t sub_EB9534@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 120);
  uint64_t v3 = v2 + 168 * *(unsigned int *)(result + 144);
  uint64_t v4 = v2 + 168 * *(unsigned int *)(result + 148);
  *a2 = v3;
  a2[1] = v4;
  return result;
}

uint64_t sub_EB9550(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 144);
  LODWORD(v2) = *(_DWORD *)(a1 + 148);
  if (v1 <= v2) {
    uint64_t v2 = v2;
  }
  else {
    uint64_t v2 = v1;
  }
  return v1 | (v2 << 32);
}

uint64_t sub_EB9564@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 128);
  *a2 = *(void *)(result + 120) + 168 * *(unsigned int *)(result + 148);
  a2[1] = v2;
  return result;
}

void sub_EB957C(void *a1, size_t a2, unint64_t a3, unint64_t a4, int a5, int a6)
{
  sub_EB96E8((uint64_t)a1, a2, a3, a5, a6);
  long long v8 = (unsigned char *)a1[15];
  long long v9 = (unsigned char *)a1[16];
  unint64_t v10 = 0xCF3CF3CF3CF3CF3DLL * ((v9 - v8) >> 3);
  if (v10 < a4 && 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[17] - (void)v8) >> 3) < a4)
  {
    if (a4 >= 0x186186186186187) {
      sub_2E00();
    }
    size_t v11 = 168 * a4;
    long long v12 = (char *)operator new(v11);
    long long v13 = &v12[8 * ((v9 - v8) >> 3)];
    if (v9 != v8)
    {
      long long v14 = &v12[8 * ((v9 - v8) >> 3)];
      do
      {
        long long v15 = *(_OWORD *)(v9 - 168);
        long long v16 = *(_OWORD *)(v9 - 152);
        *(_OWORD *)(v14 - 136) = *(_OWORD *)(v9 - 136);
        *(_OWORD *)(v14 - 152) = v16;
        *(_OWORD *)(v14 - 168) = v15;
        long long v17 = *(_OWORD *)(v9 - 120);
        long long v18 = *(_OWORD *)(v9 - 104);
        long long v19 = *(_OWORD *)(v9 - 88);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v9 - 72);
        *(_OWORD *)(v14 - 88) = v19;
        *(_OWORD *)(v14 - 104) = v18;
        *(_OWORD *)(v14 - 120) = v17;
        long long v20 = *(_OWORD *)(v9 - 56);
        long long v21 = *(_OWORD *)(v9 - 40);
        long long v22 = *(_OWORD *)(v9 - 24);
        long long v13 = v14 - 168;
        *((void *)v14 - 1) = *((void *)v9 - 1);
        *(_OWORD *)(v14 - 24) = v22;
        *(_OWORD *)(v14 - 40) = v21;
        *(_OWORD *)(v14 - 56) = v20;
        v9 -= 168;
        v14 -= 168;
      }
      while (v9 != v8);
    }
    a1[15] = v13;
    a1[16] = &v12[168 * v10];
    a1[17] = &v12[v11];
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_EB96E8(uint64_t a1, size_t __sz, unint64_t a3, int a4, int a5)
{
  unint64_t v9 = __sz + 1;
  if (!a5) {
    goto LABEL_15;
  }
  unint64_t v10 = *(unsigned char **)a1;
  size_t v11 = *(unsigned char **)(a1 + 8);
  uint64_t v12 = (uint64_t)&v11[-*(void *)a1];
  uint64_t v13 = v12 >> 2;
  if (v9 <= v12 >> 2 || v9 <= (uint64_t)(*(void *)(a1 + 16) - (void)v10) >> 2) {
    goto LABEL_15;
  }
  if (v9 >> 62) {
    goto LABEL_63;
  }
  long long v14 = (char *)operator new(4 * v9);
  long long v15 = &v14[4 * v13];
  long long v16 = v15;
  if (v11 != v10)
  {
    unint64_t v17 = v11 - v10 - 4;
    if (v17 < 0x2C)
    {
      long long v16 = &v14[4 * v13];
      do
      {
LABEL_12:
        int v25 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v16 - 1) = v25;
        v16 -= 4;
      }
      while (v11 != v10);
      goto LABEL_13;
    }
    long long v16 = &v14[4 * v13];
    if ((unint64_t)(v11 - v14 - v12) < 0x20) {
      goto LABEL_12;
    }
    uint64_t v18 = (v17 >> 2) + 1;
    uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    long long v20 = &v11[-v19];
    long long v16 = &v15[-v19];
    long long v21 = &v14[4 * v13 - 16];
    long long v22 = (long long *)(v11 - 16);
    uint64_t v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)long long v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 8;
    }
    while (v23);
    size_t v11 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_12;
    }
  }
LABEL_13:
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v15;
  *(void *)(a1 + 16) = &v14[4 * v9];
  if (v10) {
    operator delete(v10);
  }
LABEL_15:
  long long v26 = *(unsigned char **)(a1 + 48);
  unint64_t v27 = *(unsigned char **)(a1 + 56);
  unint64_t v28 = (v27 - v26) >> 2;
  if (v9 <= v28 || v9 <= (uint64_t)(*(void *)(a1 + 64) - (void)v26) >> 2) {
    goto LABEL_28;
  }
  if (v9 >> 62) {
LABEL_63:
  }
    sub_2E00();
  long long v29 = operator new(4 * v9);
  long long v30 = &v29[4 * v28];
  long long v31 = v30;
  if (v27 == v26) {
    goto LABEL_26;
  }
  unint64_t v32 = v27 - v26 - 4;
  if (v32 < 0x2C)
  {
    long long v31 = &v29[4 * v28];
    do
    {
LABEL_25:
      int v40 = *((_DWORD *)v27 - 1);
      v27 -= 4;
      *((_DWORD *)v31 - 1) = v40;
      v31 -= 4;
    }
    while (v27 != v26);
    goto LABEL_26;
  }
  long long v31 = &v29[4 * v28];
  if ((unint64_t)(v26 - v29) < 0x20) {
    goto LABEL_25;
  }
  uint64_t v33 = (v32 >> 2) + 1;
  uint64_t v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
  long long v35 = &v27[-v34];
  long long v31 = &v30[-v34];
  long long v36 = &v29[4 * v28 - 16];
  long long v37 = (long long *)(v27 - 16);
  uint64_t v38 = v33 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v39 = *v37;
    *(v36 - 1) = *(v37 - 1);
    *long long v36 = v39;
    v36 -= 2;
    v37 -= 2;
    v38 -= 8;
  }
  while (v38);
  unint64_t v27 = v35;
  if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_25;
  }
LABEL_26:
  *(void *)(a1 + 48) = v31;
  *(void *)(a1 + 56) = v30;
  *(void *)(a1 + 64) = &v29[4 * v9];
  if (v26) {
    operator delete(v26);
  }
LABEL_28:
  if (a5)
  {
    int64_t v41 = *(unsigned char **)(a1 + 24);
    long long v42 = *(unsigned char **)(a1 + 32);
    if (0xCCCCCCCCCCCCCCCDLL * ((v42 - v41) >> 4) < a3
      && 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 40) - (void)v41) >> 4) < a3)
    {
      if (a3 > 0x333333333333333) {
        goto LABEL_61;
      }
      unsigned int v43 = (char *)operator new(80 * a3);
      long long v44 = &v43[16 * ((v42 - v41) >> 4)];
      long long v45 = v44;
      if (v42 != v41)
      {
        uint64_t v46 = &v43[16 * ((v42 - v41) >> 4)];
        do
        {
          *((_OWORD *)v46 - 5) = *((_OWORD *)v42 - 5);
          long long v47 = *((_OWORD *)v42 - 4);
          long long v48 = *((_OWORD *)v42 - 3);
          long long v49 = *((_OWORD *)v42 - 1);
          long long v45 = v46 - 80;
          *((_OWORD *)v46 - 2) = *((_OWORD *)v42 - 2);
          *((_OWORD *)v46 - 1) = v49;
          *((_OWORD *)v46 - 4) = v47;
          *((_OWORD *)v46 - 3) = v48;
          v42 -= 80;
          v46 -= 80;
        }
        while (v42 != v41);
      }
      *(void *)(a1 + 24) = v45;
      *(void *)(a1 + 32) = v44;
      *(void *)(a1 + 40) = &v43[80 * a3];
      if (v41) {
        operator delete(v41);
      }
    }
  }
  long long v50 = *(unsigned char **)(a1 + 72);
  uint64_t v51 = *(unsigned char **)(a1 + 80);
  if (0xCCCCCCCCCCCCCCCDLL * ((v51 - v50) >> 4) >= a3
    || 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 88) - (void)v50) >> 4) >= a3)
  {
    goto LABEL_45;
  }
  if (a3 > 0x333333333333333) {
LABEL_61:
  }
    sub_2E00();
  size_t v52 = 80 * a3;
  unint64_t v53 = (char *)operator new(v52);
  uint64_t v54 = &v53[16 * ((v51 - v50) >> 4)];
  unint64_t v55 = v54;
  if (v51 != v50)
  {
    uint64_t v56 = &v53[16 * ((v51 - v50) >> 4)];
    do
    {
      *((_OWORD *)v56 - 5) = *((_OWORD *)v51 - 5);
      long long v57 = *((_OWORD *)v51 - 4);
      long long v58 = *((_OWORD *)v51 - 3);
      long long v59 = *((_OWORD *)v51 - 1);
      unint64_t v55 = v56 - 80;
      *((_OWORD *)v56 - 2) = *((_OWORD *)v51 - 2);
      *((_OWORD *)v56 - 1) = v59;
      *((_OWORD *)v56 - 4) = v57;
      *((_OWORD *)v56 - 3) = v58;
      v51 -= 80;
      v56 -= 80;
    }
    while (v51 != v50);
  }
  *(void *)(a1 + 72) = v55;
  *(void *)(a1 + 80) = v54;
  *(void *)(a1 + 88) = &v53[v52];
  if (v50) {
    operator delete(v50);
  }
LABEL_45:
  if (!a4) {
    return;
  }
  uint64_t v60 = *(unsigned char **)(a1 + 96);
  if (__sz <= (uint64_t)(*(void *)(a1 + 112) - (void)v60) >> 3) {
    return;
  }
  if (__sz >> 61) {
    sub_2E00();
  }
  uint64_t v61 = *(unsigned char **)(a1 + 104);
  size_t v62 = 8 * __sz;
  unint64_t v63 = (char *)operator new(v62);
  uint64_t v64 = v61 - v60;
  long long v65 = &v63[(v61 - v60) & 0xFFFFFFFFFFFFFFF8];
  unint64_t v66 = v65;
  if (v61 != v60)
  {
    if ((unint64_t)(v64 - 8) < 0x58)
    {
      unint64_t v66 = &v63[(v61 - v60) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_55:
        uint64_t v75 = *((void *)v61 - 1);
        v61 -= 8;
        *((void *)v66 - 1) = v75;
        v66 -= 8;
      }
      while (v61 != v60);
      goto LABEL_56;
    }
    unint64_t v66 = &v63[(v61 - v60) & 0xFFFFFFFFFFFFFFF8];
    if (v61 - v63 - (v64 & 0xFFFFFFFFFFFFFFF8) < 0x20) {
      goto LABEL_55;
    }
    uint64_t v67 = v64 >> 3;
    unint64_t v68 = ((unint64_t)(v64 - 8) >> 3) + 1;
    uint64_t v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v70 = &v61[-v69];
    unint64_t v66 = &v65[-v69];
    uint64_t v71 = &v63[8 * v67 - 16];
    double v72 = (long long *)(v61 - 16);
    uint64_t v73 = v68 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v74 = *v72;
      *((_OWORD *)v71 - 1) = *(v72 - 1);
      *(_OWORD *)uint64_t v71 = v74;
      v71 -= 32;
      v72 -= 2;
      v73 -= 4;
    }
    while (v73);
    uint64_t v61 = v70;
    if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_55;
    }
  }
LABEL_56:
  *(void *)(a1 + 96) = v66;
  *(void *)(a1 + 104) = v65;
  *(void *)(a1 + 112) = &v63[v62];
  if (v60)
  {
    operator delete(v60);
  }
}

void sub_EB9BBC(void *a1, size_t a2, unint64_t a3, unint64_t a4, int a5, int a6)
{
  sub_EB9D28((uint64_t)a1, a2, a3, a5, a6);
  long long v8 = (unsigned char *)a1[15];
  unint64_t v9 = (unsigned char *)a1[16];
  unint64_t v10 = 0xCF3CF3CF3CF3CF3DLL * ((v9 - v8) >> 3);
  if (v10 < a4 && 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a1[17] - (void)v8) >> 3) < a4)
  {
    if (a4 >= 0x186186186186187) {
      sub_2E00();
    }
    size_t v11 = 168 * a4;
    uint64_t v12 = (char *)operator new(v11);
    uint64_t v13 = &v12[8 * ((v9 - v8) >> 3)];
    if (v9 != v8)
    {
      long long v14 = &v12[8 * ((v9 - v8) >> 3)];
      do
      {
        long long v15 = *(_OWORD *)(v9 - 168);
        long long v16 = *(_OWORD *)(v9 - 152);
        *(_OWORD *)(v14 - 136) = *(_OWORD *)(v9 - 136);
        *(_OWORD *)(v14 - 152) = v16;
        *(_OWORD *)(v14 - 168) = v15;
        long long v17 = *(_OWORD *)(v9 - 120);
        long long v18 = *(_OWORD *)(v9 - 104);
        long long v19 = *(_OWORD *)(v9 - 88);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v9 - 72);
        *(_OWORD *)(v14 - 88) = v19;
        *(_OWORD *)(v14 - 104) = v18;
        *(_OWORD *)(v14 - 120) = v17;
        long long v20 = *(_OWORD *)(v9 - 56);
        long long v21 = *(_OWORD *)(v9 - 40);
        long long v22 = *(_OWORD *)(v9 - 24);
        uint64_t v13 = v14 - 168;
        *((void *)v14 - 1) = *((void *)v9 - 1);
        *(_OWORD *)(v14 - 24) = v22;
        *(_OWORD *)(v14 - 40) = v21;
        *(_OWORD *)(v14 - 56) = v20;
        v9 -= 168;
        v14 -= 168;
      }
      while (v9 != v8);
    }
    a1[15] = v13;
    a1[16] = &v12[168 * v10];
    a1[17] = &v12[v11];
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_EB9D28(uint64_t a1, size_t __sz, unint64_t a3, int a4, int a5)
{
  unint64_t v9 = __sz + 1;
  if (!a5) {
    goto LABEL_15;
  }
  unint64_t v10 = *(unsigned char **)a1;
  size_t v11 = *(unsigned char **)(a1 + 8);
  uint64_t v12 = (uint64_t)&v11[-*(void *)a1];
  uint64_t v13 = v12 >> 2;
  if (v9 <= v12 >> 2 || v9 <= (uint64_t)(*(void *)(a1 + 16) - (void)v10) >> 2) {
    goto LABEL_15;
  }
  if (v9 >> 62) {
    goto LABEL_58;
  }
  long long v14 = (char *)operator new(4 * v9);
  long long v15 = &v14[4 * v13];
  long long v16 = v15;
  if (v11 != v10)
  {
    unint64_t v17 = v11 - v10 - 4;
    if (v17 < 0x2C)
    {
      long long v16 = &v14[4 * v13];
      do
      {
LABEL_12:
        int v25 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v16 - 1) = v25;
        v16 -= 4;
      }
      while (v11 != v10);
      goto LABEL_13;
    }
    long long v16 = &v14[4 * v13];
    if ((unint64_t)(v11 - v14 - v12) < 0x20) {
      goto LABEL_12;
    }
    uint64_t v18 = (v17 >> 2) + 1;
    uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    long long v20 = &v11[-v19];
    long long v16 = &v15[-v19];
    long long v21 = &v14[4 * v13 - 16];
    long long v22 = (long long *)(v11 - 16);
    uint64_t v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)long long v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 8;
    }
    while (v23);
    size_t v11 = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_12;
    }
  }
LABEL_13:
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v15;
  *(void *)(a1 + 16) = &v14[4 * v9];
  if (v10) {
    operator delete(v10);
  }
LABEL_15:
  long long v26 = *(unsigned char **)(a1 + 48);
  unint64_t v27 = *(unsigned char **)(a1 + 56);
  unint64_t v28 = (v27 - v26) >> 2;
  if (v9 <= v28 || v9 <= (uint64_t)(*(void *)(a1 + 64) - (void)v26) >> 2) {
    goto LABEL_28;
  }
  if (v9 >> 62) {
LABEL_58:
  }
    sub_2E00();
  long long v29 = operator new(4 * v9);
  long long v30 = &v29[4 * v28];
  long long v31 = v30;
  if (v27 == v26) {
    goto LABEL_26;
  }
  unint64_t v32 = v27 - v26 - 4;
  if (v32 < 0x2C)
  {
    long long v31 = &v29[4 * v28];
    do
    {
LABEL_25:
      int v40 = *((_DWORD *)v27 - 1);
      v27 -= 4;
      *((_DWORD *)v31 - 1) = v40;
      v31 -= 4;
    }
    while (v27 != v26);
    goto LABEL_26;
  }
  long long v31 = &v29[4 * v28];
  if ((unint64_t)(v26 - v29) < 0x20) {
    goto LABEL_25;
  }
  uint64_t v33 = (v32 >> 2) + 1;
  uint64_t v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
  long long v35 = &v27[-v34];
  long long v31 = &v30[-v34];
  long long v36 = &v29[4 * v28 - 16];
  long long v37 = (long long *)(v27 - 16);
  uint64_t v38 = v33 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v39 = *v37;
    *(v36 - 1) = *(v37 - 1);
    *long long v36 = v39;
    v36 -= 2;
    v37 -= 2;
    v38 -= 8;
  }
  while (v38);
  unint64_t v27 = v35;
  if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_25;
  }
LABEL_26:
  *(void *)(a1 + 48) = v31;
  *(void *)(a1 + 56) = v30;
  *(void *)(a1 + 64) = &v29[4 * v9];
  if (v26) {
    operator delete(v26);
  }
LABEL_28:
  if (a5)
  {
    int64_t v41 = *(unsigned char **)(a1 + 24);
    long long v42 = *(unsigned char **)(a1 + 32);
    if (0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 4) < a3
      && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 40) - (void)v41) >> 4) < a3)
    {
      if (a3 > 0x555555555555555) {
        goto LABEL_56;
      }
      unsigned int v43 = (char *)operator new(48 * a3);
      long long v44 = &v43[16 * ((v42 - v41) >> 4)];
      long long v45 = v44;
      if (v42 != v41)
      {
        uint64_t v46 = &v43[16 * ((v42 - v41) >> 4)];
        do
        {
          long long v47 = *((_OWORD *)v42 - 3);
          long long v48 = *((_OWORD *)v42 - 1);
          long long v45 = v46 - 48;
          *((_OWORD *)v46 - 2) = *((_OWORD *)v42 - 2);
          *((_OWORD *)v46 - 1) = v48;
          *((_OWORD *)v46 - 3) = v47;
          v42 -= 48;
          v46 -= 48;
        }
        while (v42 != v41);
      }
      *(void *)(a1 + 24) = v45;
      *(void *)(a1 + 32) = v44;
      *(void *)(a1 + 40) = &v43[48 * a3];
      if (v41) {
        operator delete(v41);
      }
    }
  }
  long long v49 = *(unsigned char **)(a1 + 72);
  long long v50 = *(unsigned char **)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((v50 - v49) >> 4) >= a3
    || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - (void)v49) >> 4) >= a3)
  {
    goto LABEL_45;
  }
  if (a3 > 0x555555555555555) {
LABEL_56:
  }
    sub_2E00();
  size_t v51 = 48 * a3;
  size_t v52 = (char *)operator new(v51);
  unint64_t v53 = &v52[16 * ((v50 - v49) >> 4)];
  uint64_t v54 = v53;
  if (v50 != v49)
  {
    unint64_t v55 = &v52[16 * ((v50 - v49) >> 4)];
    do
    {
      long long v56 = *((_OWORD *)v50 - 3);
      long long v57 = *((_OWORD *)v50 - 1);
      uint64_t v54 = v55 - 48;
      *((_OWORD *)v55 - 2) = *((_OWORD *)v50 - 2);
      *((_OWORD *)v55 - 1) = v57;
      *((_OWORD *)v55 - 3) = v56;
      v50 -= 48;
      v55 -= 48;
    }
    while (v50 != v49);
  }
  *(void *)(a1 + 72) = v54;
  *(void *)(a1 + 80) = v53;
  *(void *)(a1 + 88) = &v52[v51];
  if (v49) {
    operator delete(v49);
  }
LABEL_45:
  if (a4)
  {
    long long v58 = *(unsigned char **)(a1 + 96);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 112) - (void)v58) >> 3) < __sz)
    {
      if (__sz >= 0xAAAAAAAAAAAAAABLL) {
        sub_2E00();
      }
      long long v59 = *(unsigned char **)(a1 + 104);
      size_t v60 = 24 * __sz;
      uint64_t v61 = (char *)operator new(v60);
      size_t v62 = &v61[24 * ((v59 - v58) / 24)];
      unint64_t v63 = v62;
      if (v59 != v58)
      {
        uint64_t v64 = &v61[24 * ((v59 - v58) / 24)];
        do
        {
          long long v65 = *(_OWORD *)(v59 - 24);
          unint64_t v63 = v64 - 24;
          *((void *)v64 - 1) = *((void *)v59 - 1);
          *(_OWORD *)(v64 - 24) = v65;
          v59 -= 24;
          v64 -= 24;
        }
        while (v59 != v58);
      }
      *(void *)(a1 + 96) = v63;
      *(void *)(a1 + 104) = v62;
      *(void *)(a1 + 112) = &v61[v60];
      if (v58)
      {
        operator delete(v58);
      }
    }
  }
}

void sub_EBA1C4()
{
  unk_25FC697 = 16641;
  word_25FC680 = 65;
  byte_25FC6AF = 1;
  byte_25FC699 = 0;
}

uint64_t sub_EBA1EC(uint64_t result, uint64_t a2, int a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)__n128 result = a2;
  *(_DWORD *)(result + 8) = a3;
  *(unsigned char *)(result + 12) = a4;
  *(void *)(result + 16) = a5;
  *(void *)(result + 24) = a6;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_EBA204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = a3;
  sub_ED4F58(a1 + 48, a3);
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return a1;
}

void sub_EBA268(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v4 = (void *)a2;
  sub_EBAB6C(a1, a2);
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  unint64_t v7 = ((v4[13] - v4[12]) >> 2);
  LODWORD(__t[0].__d_.__rep_) = -1;
  if (v7) {
    sub_500DC(a1 + 120, v7, (const float *)__t);
  }
  unsigned int v8 = sub_EE0624((uint64_t)v4);
  int v99 = 0;
  BOOL v100 = 0;
  unsigned int v101 = 0;
  unint64_t v9 = v4[13] - v4[12];
  uint64_t v10 = (v9 >> 2);
  if ((v9 >> 2))
  {
    int v99 = (unsigned int *)operator new(4 * v10);
    BOOL v100 = v99;
    unsigned int v101 = (char *)&v99[v10];
    size_t v11 = (unsigned __int16 *)operator new(2 * v10);
    bzero(v11, 2 * v10);
    uint64_t v12 = (int *)v4[15];
    uint64_t v13 = (int *)v4[16];
    if (v12 == v13) {
      goto LABEL_8;
    }
  }
  else
  {
    size_t v11 = 0;
    uint64_t v12 = (int *)v4[15];
    uint64_t v13 = (int *)v4[16];
    if (v12 == v13) {
      goto LABEL_8;
    }
  }
  do
  {
    int v14 = *v12;
    v12 += 26;
    ++v11[v14];
  }
  while (v12 != v13);
LABEL_8:
  if ((v9 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v15 = 0;
    do
    {
      LODWORD(__t[0].__d_.__rep_) = v15;
      int v16 = *(_DWORD *)(v4[21] + 4 * v15);
      if (v11[v15]) {
        BOOL v17 = v16 == 0;
      }
      else {
        BOOL v17 = 1;
      }
      if (!v17 && v16 + v11[v15] >= 3)
      {
        sub_745A4((uint64_t)&v99, __t);
        *(_DWORD *)(*(void *)(a1 + 120) + 4 * LODWORD(__t[0].__d_.__rep_)) = v8++;
      }
      ++v15;
    }
    while (v10 != v15);
  }
  unint64_t v82 = (void *)(a1 + 120);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v19 = operator new(4uLL);
  *uint64_t v19 = 0;
  *(void *)(a4 + 8) = v19 + 1;
  *(void *)(a4 + 16) = v19 + 1;
  *(void *)a4 = v19;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  long long v20 = operator new(4uLL);
  *(void *)(a4 + 48) = v20;
  *v20++ = 0;
  *(void *)(a4 + 56) = v20;
  *(void *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(void *)(a4 + 136) = 0;
  uint64_t v77 = a4 + 48;
  *(void *)(a4 + 144) = -1;
  unint64_t v21 = sub_EE0624((uint64_t)v4);
  unint64_t v22 = 2 * v8;
  sub_EB957C((void *)a4, v8, v22, v21, 1, *(unsigned __int8 *)(a1 + 32));
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v23 = *(void **)(a1 + 192);
    *(void *)(a1 + 200) = v23;
    if (v22 > (uint64_t)(*(void *)(a1 + 208) - (void)v23) >> 2)
    {
      long long v24 = (char *)operator new(4 * v22);
      *(void *)(a1 + 192) = v24;
      *(void *)(a1 + 200) = v24;
      *(void *)(a1 + 208) = &v24[4 * v22];
      if (v23) {
        operator delete(v23);
      }
    }
    int v25 = *(void **)(a1 + 216);
    *(void *)(a1 + 224) = v25;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 232) - (void)v25) >> 4) < v22)
    {
      long long v26 = (char *)operator new(80 * v22);
      *(void *)(a1 + 216) = v26;
      *(void *)(a1 + 224) = v26;
      *(void *)(a1 + 232) = &v26[80 * v22];
      if (v25) {
        operator delete(v25);
      }
    }
  }
  uint64_t v76 = v11;
  unint64_t v27 = *(unsigned __int16 **)(a1 + 168);
  unint64_t v28 = *(unsigned __int16 **)(a1 + 176);
  uint64_t v84 = a1;
  unsigned int v85 = v4;
  if (v27 != v28)
  {
    do
    {
      uint64_t v29 = sub_EE0610((uint64_t)v4, *v27);
      LOBYTE(__t[0].__d_.__rep_) = *(unsigned char *)v29;
      unsigned int v30 = *(_DWORD *)(v29 + 4);
      if (v30 == -1) {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v31 = 0;
      }
      else {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v31 = sub_EE02F4(v4, v30);
      }
      __t[1].__d_.__rep_ = v31;
      long long v32 = *(_OWORD *)(v29 + 24);
      long long v33 = *(_OWORD *)(v29 + 40);
      long long v34 = *(_OWORD *)(v29 + 56);
      *(void *)&long long v93 = *(void *)(v29 + 72);
      long long v35 = *(_OWORD *)(v29 + 8);
      long long v91 = v33;
      long long v92 = v34;
      long long v89 = v35;
      long long v90 = v32;
      unsigned int v36 = *(_DWORD *)(v29 + 80);
      if (v36 == -1) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = sub_EE02F4(v4, v36);
      }
      *((void *)&v93 + 1) = v37;
      long long v94 = *(_OWORD *)(v29 + 88);
      long long v38 = *(_OWORD *)(v29 + 104);
      long long v39 = *(_OWORD *)(v29 + 120);
      long long v40 = *(_OWORD *)(v29 + 136);
      uint64_t v98 = *(void *)(v29 + 152);
      long long v96 = v39;
      long long v97 = v40;
      long long v95 = v38;
      sub_EB913C(a4, (long long *)&__t[0].__d_.__rep_);
      ++v27;
    }
    while (v27 != v28);
    int64_t v41 = *(unsigned __int16 **)(a1 + 168);
    uint64_t v80 = *(unsigned __int16 **)(a1 + 176);
    if (v41 != v80)
    {
      unsigned int v42 = 0;
      int v78 = (unint64_t *)(a4 + 96);
      do
      {
        unsigned __int16 v43 = *v41;
        long long v44 = (_DWORD *)sub_EE0610((uint64_t)v4, *v41);
        unsigned int v45 = v44[1];
        unsigned int v46 = v44[20];
        uint64_t v47 = *(void *)(a4 + 48);
        uint64_t v48 = *(void *)(a4 + 56);
        uint64_t v49 = v48 - v47;
        if (((unint64_t)(v48 - v47) >> 2) - 1 <= v42)
        {
          unint64_t v50 = v42 + 2;
          uint64_t v51 = *(void *)(a4 + 8);
          unint64_t v52 = (v51 - *(void *)a4) >> 2;
          if (v50 <= v52)
          {
            if (v50 < v52) {
              *(void *)(a4 + 8) = *(void *)a4 + 4 * v50;
            }
          }
          else
          {
            sub_500DC(a4, v50 - v52, (const float *)(v51 - 4));
            uint64_t v47 = *(void *)(a4 + 48);
            uint64_t v48 = *(void *)(a4 + 56);
            uint64_t v49 = v48 - v47;
          }
          unint64_t v53 = v49 >> 2;
          if (v50 <= v53)
          {
            if (v50 < v53) {
              *(void *)(a4 + 56) = v47 + 4 * v50;
            }
          }
          else
          {
            sub_500DC(v77, v50 - v53, (const float *)(v48 - 4));
          }
        }
        if (v45 == -1)
        {
          unint64_t v54 = 0;
          if (v46 == -1)
          {
LABEL_52:
            unint64_t v55 = 0;
            goto LABEL_53;
          }
        }
        else
        {
          unint64_t v54 = sub_EE02F4(v85, v45);
          if (v46 == -1) {
            goto LABEL_52;
          }
        }
        unint64_t v55 = sub_EE02F4(v85, v46);
LABEL_53:
        unsigned int v56 = sub_EE08A0();
        sub_ECEDD8((double *)&v86, v54, v55, (uint64_t)v44, v56, *(void ***)(a1 + 40));
        long long v4 = v85;
        unint64_t v57 = *(void *)(a4 + 96);
        unint64_t v58 = (uint64_t)(*(void *)(a4 + 104) - v57) >> 3;
        if (v58 <= v42)
        {
          unint64_t v59 = v42 + 1;
          __t[0].__d_.__rep_ = 0;
          if (v59 <= v58)
          {
            if (v59 < v58) {
              *(void *)(a4 + 104) = v57 + 8 * v59;
            }
          }
          else
          {
            sub_2F898C(v78, v59 - v58, &__t[0].__d_.__rep_);
            unint64_t v57 = *v78;
          }
        }
        *(void *)(v57 + 8 * v42) = v86;
        if (*(unsigned char *)sub_EE0610((uint64_t)v85, v43) == 3)
        {
          sub_EBAD74(a1, v85, v43, a4);
        }
        else if (v46 != -1)
        {
          sub_EBAED8(a1, v85, v46, v44[22], a3, v42, a4);
        }
        ++v42;
        ++v41;
      }
      while (v41 != v80);
    }
  }
  size_t v60 = v99;
  unint64_t v81 = v100;
  if (v99 != v100)
  {
    unsigned int v79 = (unint64_t *)(a4 + 96);
    do
    {
      uint64_t v61 = *v60;
      unint64_t v62 = *(unsigned int *)(*v82 + 4 * v61);
      uint64_t v63 = *(void *)(a4 + 48);
      uint64_t v64 = *(void *)(a4 + 56);
      uint64_t v65 = v64 - v63;
      if (((unint64_t)(v64 - v63) >> 2) - 1 <= v62)
      {
        unint64_t v66 = (v62 + 2);
        uint64_t v67 = *(void *)(a4 + 8);
        unint64_t v68 = (v67 - *(void *)a4) >> 2;
        if (v66 <= v68)
        {
          if (v66 < v68) {
            *(void *)(a4 + 8) = *(void *)a4 + 4 * v66;
          }
        }
        else
        {
          sub_500DC(a4, v66 - v68, (const float *)(v67 - 4));
          uint64_t v63 = *(void *)(a4 + 48);
          uint64_t v64 = *(void *)(a4 + 56);
          uint64_t v65 = v64 - v63;
        }
        unint64_t v69 = v65 >> 2;
        if (v66 <= v69)
        {
          if (v66 < v69) {
            *(void *)(a4 + 56) = v63 + 4 * v66;
          }
        }
        else
        {
          sub_500DC(v77, v66 - v69, (const float *)(v64 - 4));
        }
      }
      unint64_t v70 = sub_EE02F4(v85, v61);
      unsigned int v71 = sub_EE08A0();
      long long v96 = 1uLL;
      long long v97 = 0u;
      *(void *)&long long v95 = 0;
      long long v93 = 0u;
      long long v91 = 1uLL;
      long long v92 = 0u;
      *(void *)&long long v90 = 0;
      *(_OWORD *)&__t[0].__d_.__rep_ = 0u;
      HIDWORD(__t[0].__d_.__rep_) = -1;
      long long v89 = 0uLL;
      *((void *)&v90 + 1) = 0x3FF0000000000000;
      *(void *)&long long v92 = 0;
      BYTE8(v92) = 0;
      WORD5(v92) = -29536;
      BYTE13(v92) = 0;
      LODWORD(v93) = -1;
      long long v94 = 0uLL;
      *((void *)&v95 + 1) = 0x3FF0000000000000;
      *(void *)&long long v97 = 0;
      BYTE8(v97) = 0;
      WORD5(v97) = -29536;
      BYTE13(v97) = 0;
      sub_ECEDD8((double *)&v87, v70, v70, (uint64_t)__t, v71, *(void ***)(v84 + 40));
      unint64_t v72 = *(void *)(a4 + 96);
      unint64_t v73 = (uint64_t)(*(void *)(a4 + 104) - v72) >> 3;
      if (v73 <= v62)
      {
        unint64_t v74 = (v62 + 1);
        *(void *)&long long v86 = 0;
        if (v74 <= v73)
        {
          if (v74 < v73) {
            *(void *)(a4 + 104) = v72 + 8 * v74;
          }
        }
        else
        {
          sub_2F898C(v79, v74 - v73, (uint64_t *)&v86);
          unint64_t v72 = *v79;
        }
      }
      *(void *)(v72 + 8 * v62) = v87;
      sub_EBAED8(v84, v85, v61, 0, a3, v62, a4);
      ++v60;
    }
    while (v60 != v81);
  }
  if (*(unsigned char *)(v84 + 33)) {
    sub_EB937C(a4);
  }
  if (*(unsigned char *)(v84 + 32)) {
    sub_EBB1F4(v84, (void *)a4);
  }
  if (*(unsigned char *)(v84 + 34))
  {
    __t[0] = std::chrono::system_clock::now();
    std::chrono::system_clock::to_time_t(__t);
    *(void *)&long long v86 = *(void *)v84;
    DWORD2(v86) = *(_DWORD *)(v84 + 8);
    BYTE12(v86) = *(unsigned char *)(v84 + 12);
    char v75 = *(unsigned char *)(v84 + 32);
    if (v75) {
      char v75 = *(unsigned char *)(v84 + 35) != 0;
    }
    BYTE13(v86) = v75;
    sub_ECF4A4((uint64_t)__t, &v86, *(void ***)(v84 + 40));
    sub_ECF4E0((uint64_t)__t, (uint64_t)v85, a3, *(void *)(v84 + 24), a4);
  }
  sub_EBF034(a4);
  sub_EBF034(v77);
  sub_EBF170((char **)(a4 + 24));
  sub_EBF170((char **)(a4 + 72));
  if (v76) {
    operator delete(v76);
  }
  if (v99)
  {
    BOOL v100 = v99;
    operator delete(v99);
  }
}

void sub_EBAAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v14 = *(void **)(v12 - 120);
  if (!v14) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v12 - 112) = v14;
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_EBAB6C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_EE0624(a2);
  long long v6 = *(int16x8_t **)(a1 + 168);
  uint64_t v5 = *(int16x8_t **)(a1 + 176);
  unint64_t v7 = ((char *)v5 - (char *)v6) >> 1;
  if (v4 <= v7)
  {
    if (v4 < v7)
    {
      uint64_t v5 = (int16x8_t *)((char *)v6 + 2 * v4);
      *(void *)(a1 + 176) = v5;
    }
  }
  else
  {
    sub_EBF29C(a1 + 168, v4 - v7);
    long long v6 = *(int16x8_t **)(a1 + 168);
    uint64_t v5 = *(int16x8_t **)(a1 + 176);
  }
  if (v6 != v5)
  {
    unint64_t v8 = (char *)v5 - (char *)v6 - 2;
    if (v8 < 0x1E)
    {
      LODWORD(v9) = 0;
      uint64_t v10 = v6;
      do
      {
LABEL_11:
        v10->i16[0] = v9;
        uint64_t v10 = (int16x8_t *)((char *)v10 + 2);
        LODWORD(v9) = v9 + 1;
      }
      while (v10 != v5);
      goto LABEL_12;
    }
    uint64_t v11 = (v8 >> 1) + 1;
    unint64_t v9 = v11 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v10 = (int16x8_t *)((char *)v6 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
    int16x8_t v12 = (int16x8_t)xmmword_20F0F20;
    uint64_t v13 = v6 + 1;
    v14.i64[0] = 0x8000800080008;
    v14.i64[1] = 0x8000800080008;
    v15.i64[0] = 0x10001000100010;
    v15.i64[1] = 0x10001000100010;
    unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v13[-1] = v12;
      *uint64_t v13 = vaddq_s16(v12, v14);
      int16x8_t v12 = vaddq_s16(v12, v15);
      v13 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v11 != v9) {
      goto LABEL_11;
    }
  }
LABEL_12:
  unint64_t v17 = sub_EE0624(a2);
  uint64_t v19 = *(int16x8_t **)(a1 + 144);
  uint64_t v18 = *(int16x8_t **)(a1 + 152);
  unint64_t v20 = ((char *)v18 - (char *)v19) >> 1;
  if (v17 <= v20)
  {
    if (v17 < v20)
    {
      uint64_t v18 = (int16x8_t *)((char *)v19 + 2 * v17);
      *(void *)(a1 + 152) = v18;
    }
  }
  else
  {
    sub_EBF29C(a1 + 144, v17 - v20);
    uint64_t v19 = *(int16x8_t **)(a1 + 144);
    uint64_t v18 = *(int16x8_t **)(a1 + 152);
  }
  if (v19 != v18)
  {
    unint64_t v21 = (char *)v18 - (char *)v19 - 2;
    if (v21 < 0x1E)
    {
      LODWORD(v22) = 0;
      uint64_t v23 = v19;
      do
      {
LABEL_22:
        v23->i16[0] = v22;
        uint64_t v23 = (int16x8_t *)((char *)v23 + 2);
        LODWORD(v22) = v22 + 1;
      }
      while (v23 != v18);
      goto LABEL_23;
    }
    uint64_t v24 = (v21 >> 1) + 1;
    unint64_t v22 = v24 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v23 = (int16x8_t *)((char *)v19 + 2 * (v24 & 0xFFFFFFFFFFFFFFF0));
    int16x8_t v25 = (int16x8_t)xmmword_20F0F20;
    long long v26 = v19 + 1;
    v27.i64[0] = 0x8000800080008;
    v27.i64[1] = 0x8000800080008;
    v28.i64[0] = 0x10001000100010;
    v28.i64[1] = 0x10001000100010;
    unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = v25;
      *long long v26 = vaddq_s16(v25, v27);
      int16x8_t v25 = vaddq_s16(v25, v28);
      v26 += 2;
      v29 -= 16;
    }
    while (v29);
    if (v24 != v22) {
      goto LABEL_22;
    }
  }
LABEL_23:
  if (*(unsigned char *)(a1 + 33))
  {
    uint64_t v30 = *(void *)(a1 + 168);
    std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v31 = *(unsigned __int16 **)(a1 + 176);
    unint64_t v32 = 126 - 2 * __clz(((uint64_t)v31 - v30) >> 1);
    uint64_t v40 = a2;
    if (v31 == (unsigned __int16 *)v30) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v32;
    }
    sub_EBF448(v30, v31, &v40, v33, 1);
    uint64_t v34 = *(void *)(a1 + 144);
    uint64_t v35 = *(void *)(a1 + 152);
    uint64_t v36 = v35 - v34;
    if (v35 != v34)
    {
      uint64_t v37 = 0;
      uint64_t v38 = v36 >> 1;
      uint64_t v39 = *(void *)(a1 + 168);
      do
      {
        *(_WORD *)(v34 + 2 * *(unsigned __int16 *)(v39 + 2 * v37)) = v37;
        ++v37;
      }
      while (v38 != v37);
    }
  }
}

void sub_EBAD74(uint64_t a1, void *a2, unsigned __int16 a3, uint64_t a4)
{
  uint64_t v6 = a3;
  uint64_t v18 = sub_EE0610((uint64_t)a2, a3);
  unint64_t v19 = sub_EE02F4(a2, *(_DWORD *)(v18 + 4));
  uint64_t v16 = v6;
  sub_EE08A8(&v29);
  unint64_t v7 = v29;
  for (uint64_t i = v30; v7 != i; ++v7)
  {
    uint64_t v9 = *v7;
    uint64_t v10 = sub_EE0610((uint64_t)a2, *v7);
    unint64_t v11 = sub_EE02F4(a2, *(_DWORD *)(v10 + 80));
    sub_EC9798((uint64_t)v28);
    sub_EC9F28((uint64_t)v28, v19, (unsigned int *)(v18 + 8), v11, (unsigned int *)(v10 + 88), a1 + 48);
    if (sub_EC97AC((uint64_t)v28))
    {
      uint64_t v12 = *(void *)(a1 + 144);
      unsigned int v13 = *(unsigned __int16 *)(v12 + 2 * v16);
      LODWORD(v12) = *(unsigned __int16 *)(v12 + 2 * v9);
      int v14 = *(_DWORD *)(v18 + 4);
      int v15 = *(_DWORD *)(v10 + 80);
      long long v21 = v28[0];
      long long v22 = v28[1];
      long long v23 = v28[2];
      int v20 = v12;
      int v24 = 0x7FFFFFFF;
      int v25 = v14;
      int v26 = v15;
      uint64_t v27 = 0;
      sub_EBB954(a4, v13, &v20);
    }
  }
}

uint64_t sub_EBAED8(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  sub_EC9798((uint64_t)v38);
  if (!sub_EB9330(a7, a6)
    || (int v14 = (unsigned __int8 *)sub_EB935C(a7, a6),
        sub_EC980C((uint64_t)v38, v14, 0, a5, *(void *)(a1 + 16), v15, v16),
        uint64_t result = sub_EC97AC((uint64_t)v38),
        result))
  {
    uint64_t v18 = a3;
    sub_EBB69C(a1, a2, a3, a3, a4, a6, 0, a5, v38, a7);
    sub_EC06EC((uint64_t)a2, a3);
    uint64_t v19 = *(unsigned int *)(a2[12] + 4 * a3);
    uint64_t result = sub_EC06EC((uint64_t)a2, a3);
    if (v19 != -1)
    {
      unsigned int v29 = 1000000000 - a4;
      do
      {
        int v20 = (unsigned int *)(a2[15] + 104 * v19);
        long long v35 = v38[0];
        long long v36 = v38[1];
        long long v37 = v38[2];
        sub_EC9CCC((uint64_t)&v35, (uint64_t)v20, v29, a5, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 12), *(void ***)(a1 + 40));
        unint64_t v21 = *v20;
        int v22 = *(_DWORD *)(*(void *)(a1 + 120) + 4 * v21);
        if (sub_EC97AC((uint64_t)&v35))
        {
          while (v22 == -1)
          {
            sub_EBB69C(a1, a2, v18, v21, 0, a6, (uint64_t)v20, a5, &v35, a7);
            if (v21 == v18)
            {
              int v22 = -1;
              LODWORD(v21) = v18;
              break;
            }
            uint64_t v23 = a2[12];
            if (v21 >= (a2[13] - v23) >> 2)
            {
              exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
              strcpy((char *)v30, "vertex id out of range");
              HIBYTE(v30[2]) = 22;
              int16x8_t v28 = (void *)sub_2F404((uint64_t)exception, (long long *)v30);
            }
            unsigned int v24 = *(_DWORD *)(v23 + 4 * v21);
            if (v24 == -1)
            {
              int v22 = -1;
              uint64_t result = sub_EC97AC((uint64_t)&v35);
              if (result) {
                goto LABEL_16;
              }
              goto LABEL_6;
            }
            int v25 = (unsigned int *)(a2[15] + 104 * v24);
            sub_EC9CCC((uint64_t)&v35, (uint64_t)v25, 0x3B9ACA00u, a5, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 12), *(void ***)(a1 + 40));
            unint64_t v21 = *v25;
            int v22 = *(_DWORD *)(*(void *)(a1 + 120) + 4 * v21);
            if (!sub_EC97AC((uint64_t)&v35)) {
              break;
            }
          }
        }
        uint64_t result = sub_EC97AC((uint64_t)&v35);
        if (result)
        {
LABEL_16:
          if (v22 != -1 && v22 != a6)
          {
            *(_OWORD *)&v30[1] = v35;
            *(_OWORD *)&v30[3] = v36;
            *(_OWORD *)&v30[5] = v37;
            LODWORD(v30[0]) = v22;
            int v31 = 0x7FFFFFFF;
            int v32 = v18;
            int v33 = v21;
            uint64_t v34 = v20;
            uint64_t result = sub_EBB954(a7, a6, v30);
          }
        }
LABEL_6:
        uint64_t v19 = *(unsigned int *)(a2[18] + 4 * v19);
      }
      while (v19 != -1);
    }
  }
  return result;
}

void sub_EBB1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_EBB1F4(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = a2[7] - a2[6];
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  std::string __p = 0;
  if ((v4 >> 2) == 1)
  {
    uint64_t v6 = 0;
    unint64_t v41 = ((v4 << 30) - 0x100000000) >> 32;
    if (v41) {
      goto LABEL_11;
    }
  }
  else
  {
    size_t v5 = 4 * ((v4 >> 2) - 1);
    uint64_t v6 = (char *)operator new(v5);
    std::string __p = v6;
    uint64_t v48 = &v6[v5];
    bzero(v6, v5);
    uint64_t v47 = &v6[v5];
    unint64_t v41 = ((v4 << 30) - 0x100000000) >> 32;
    if (v41)
    {
LABEL_11:
      uint64_t v14 = 0;
      unsigned __int16 v43 = (void **)(a1 + 192);
      uint64_t v40 = v2;
      while (1)
      {
        sub_EC079C((uint64_t)v2, v14);
        uint64_t v15 = v2[9];
        unsigned int v16 = *(_DWORD *)(v2[6] + 4 * v14);
        sub_EC079C((uint64_t)v2, v14);
        unint64_t v17 = (_OWORD *)(v15 + 80 * v16);
        uint64_t v42 = v14 + 1;
        uint64_t v45 = v2[9] + 80 * *(unsigned int *)(v2[6] + 4 * (v14 + 1));
        if (v17 != (_OWORD *)v45) {
          break;
        }
LABEL_12:
        uint64_t v14 = v42;
        uint64_t v2 = v40;
        if (v42 == v41) {
          goto LABEL_5;
        }
      }
      int v44 = v14;
      while (1)
      {
        int v18 = *(_DWORD *)v17;
        int v20 = *(char **)(a1 + 200);
        unint64_t v19 = *(void *)(a1 + 208);
        if ((unint64_t)v20 >= v19) {
          break;
        }
        *(_DWORD *)int v20 = v18;
        uint64_t v21 = (uint64_t)(v20 + 4);
LABEL_36:
        *(void *)(a1 + 200) = v21;
        sub_EBB540((char **)(a1 + 216), v17);
        *(_DWORD *)(*(void *)(a1 + 224) - 80) = v44;
        int v39 = *(_DWORD *)v17;
        v17 += 5;
        ++*(_DWORD *)&v6[4 * v39];
        if (v17 == (_OWORD *)v45) {
          goto LABEL_12;
        }
      }
      int v22 = (char *)*v43;
      uint64_t v23 = v20 - (unsigned char *)*v43;
      uint64_t v24 = v23 >> 2;
      unint64_t v25 = (v23 >> 2) + 1;
      if (v25 >> 62) {
        sub_2E00();
      }
      uint64_t v26 = v19 - (void)v22;
      if (v26 >> 1 > v25) {
        unint64_t v25 = v26 >> 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        if (v27 >> 62) {
          sub_188D718();
        }
        int16x8_t v28 = operator new(4 * v27);
        unsigned int v29 = &v28[4 * v24];
        *unsigned int v29 = v18;
        uint64_t v21 = (uint64_t)(v29 + 1);
        if (v20 == v22) {
          goto LABEL_34;
        }
      }
      else
      {
        int16x8_t v28 = 0;
        unsigned int v29 = (_DWORD *)(4 * v24);
        *(_DWORD *)(4 * v24) = v18;
        uint64_t v21 = 4 * v24 + 4;
        if (v20 == v22)
        {
LABEL_34:
          *(void *)(a1 + 192) = v29;
          *(void *)(a1 + 200) = v21;
          *(void *)(a1 + 208) = &v28[4 * v27];
          if (v22) {
            operator delete(v22);
          }
          goto LABEL_36;
        }
      }
      unint64_t v30 = v20 - 4 - v22;
      if (v30 < 0x2C) {
        goto LABEL_42;
      }
      if ((unint64_t)(v20 - &v28[v23]) < 0x20) {
        goto LABEL_42;
      }
      uint64_t v31 = (v30 >> 2) + 1;
      uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
      int v33 = &v20[-v32];
      unsigned int v29 = (_DWORD *)((char *)v29 - v32);
      uint64_t v34 = &v28[4 * v24 - 16];
      long long v35 = v20 - 16;
      uint64_t v36 = v31 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v37 = *(_OWORD *)v35;
        *(v34 - 1) = *((_OWORD *)v35 - 1);
        *uint64_t v34 = v37;
        v34 -= 2;
        v35 -= 32;
        v36 -= 8;
      }
      while (v36);
      int v20 = v33;
      if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_42:
        do
        {
          int v38 = *((_DWORD *)v20 - 1);
          v20 -= 4;
          *--unsigned int v29 = v38;
        }
        while (v20 != v22);
      }
      goto LABEL_34;
    }
  }
LABEL_5:
  uint64_t v9 = *(long long **)(a1 + 216);
  uint64_t v8 = a1 + 216;
  unint64_t v7 = v9;
  uint64_t v10 = *(unsigned int **)(v8 - 24);
  unint64_t v11 = *(char **)(v8 - 16);
  unint64_t v12 = 126 - 2 * __clz((v11 - (char *)v10) >> 2);
  if (v11 == (char *)v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  sub_EC084C(v10, v7, v11, *(long long **)(v8 + 8), (uint64_t)&v49, v13, 1);
  sub_EBBABC(v2, (int **)&__p, v8);
  if (__p)
  {
    uint64_t v47 = (char *)__p;
    operator delete(__p);
  }
}

void sub_EBB510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_EBB540(char **a1, _OWORD *a2)
{
  size_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v10 = *a1;
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x333333333333333) {
      sub_2E00();
    }
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (void)v10) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x199999999999999) {
      unint64_t v14 = 0x333333333333333;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x333333333333333) {
        sub_188D718();
      }
      uint64_t v15 = (char *)operator new(80 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unsigned int v16 = &v15[80 * v11];
    long long v17 = a2[3];
    *((_OWORD *)v16 + 2) = a2[2];
    *((_OWORD *)v16 + 3) = v17;
    *((_OWORD *)v16 + 4) = a2[4];
    long long v18 = a2[1];
    *(_OWORD *)unsigned int v16 = *a2;
    *((_OWORD *)v16 + 1) = v18;
    uint64_t v9 = v16 + 80;
    if (v5 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 5) = *((_OWORD *)v5 - 5);
        long long v19 = *((_OWORD *)v5 - 4);
        long long v20 = *((_OWORD *)v5 - 3);
        long long v21 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v16 - 1) = v21;
        *((_OWORD *)v16 - 4) = v19;
        *((_OWORD *)v16 - 3) = v20;
        v16 -= 80;
        v5 -= 80;
      }
      while (v5 != v10);
      size_t v5 = *a1;
    }
    *a1 = v16;
    a1[1] = v9;
    a1[2] = &v15[80 * v14];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(_OWORD *)size_t v5 = *a2;
    long long v6 = a2[1];
    long long v7 = a2[2];
    long long v8 = a2[4];
    *((_OWORD *)v5 + 3) = a2[3];
    *((_OWORD *)v5 + 4) = v8;
    *((_OWORD *)v5 + 1) = v6;
    *((_OWORD *)v5 + 2) = v7;
    uint64_t v9 = v5 + 80;
  }
  a1[1] = v9;
  return v9 - 80;
}

void sub_EBB69C(uint64_t a1, void *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, long long *a9, uint64_t a10)
{
  if (sub_EE0528((uint64_t)a2, a4))
  {
    int v36 = a3;
    uint64_t v17 = sub_3750CC(**(void ***)(a1 + 40));
    unint64_t v18 = sub_EE02F4(a2, a4);
    unint64_t v19 = HIDWORD(v18);
    unint64_t v20 = HIDWORD(v18) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v18) << 32);
    unint64_t v39 = (HIDWORD(v18) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v18) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v18 >> 1) & 1) << 48)) ^ 0x1000000000000;
    uint64_t v37 = a7;
    int v38 = (int *)sub_2D5D58(v17, v20);
    if (*(unsigned char *)(v17 + 7772))
    {
      long long v21 = sub_2DB8E0(v17 + 3896, v19, 0);
      int v22 = &v21[-*(int *)v21];
      if (*(unsigned __int16 *)v22 < 5u)
      {
        uint64_t v23 = 0;
      }
      else
      {
        uint64_t v23 = *((unsigned __int16 *)v22 + 2);
        if (v23) {
          v23 += (uint64_t)&v21[*(unsigned int *)&v21[v23]];
        }
      }
      uint64_t v24 = (int *)(v23 + 4 * WORD2(v39) + 4 + *(unsigned int *)(v23 + 4 * WORD2(v39) + 4));
    }
    else
    {
      uint64_t v24 = 0;
    }
    v56[0] = v38;
    v56[1] = v24;
    v56[2] = (int *)sub_2E5C38(v17, v20, 1);
    v56[3] = v25;
    int v57 = v19;
    __int16 v58 = WORD2(v39);
    char v59 = BYTE6(v39);
    sub_EE064C((uint64_t)a2, a4, (uint64_t)v54);
    sub_EE07B0((uint64_t)a2, a4, &v53);
    uint64_t v26 = (unsigned __int16 *)v54[0];
    unint64_t v27 = v55;
    if ((unsigned __int16 *)v54[0] != v55)
    {
      int16x8_t v28 = (void *)v54[1];
      unsigned int v29 = (unsigned __int16 *)v53.n128_u64[0];
      do
      {
        unsigned int v30 = *(unsigned __int16 *)(*(void *)(a1 + 144) + 2 * *v29);
        if (a6 != v30 && *(_DWORD *)(*v28 + 160 * *v26 + 4) == a4)
        {
          unsigned int v31 = *(_DWORD *)(*v28 + 160 * *v26 + 8);
          if (v31 >= a5)
          {
            long long v32 = a9[1];
            long long v50 = *a9;
            long long v51 = v32;
            long long v52 = a9[2];
            sub_EC9BD8((uint64_t)&v50, v56, v31 - a5, a8, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 12), *(void ***)(a1 + 40));
            if (sub_EC97AC((uint64_t)&v50))
            {
              int v33 = (unsigned __int8 *)sub_EB935C(a10, v30);
              sub_EC980C((uint64_t)&v50, v33, 1, a8, *(void *)(a1 + 16), v34, v35);
              if (sub_EC97AC((uint64_t)&v50))
              {
                long long v43 = v50;
                long long v44 = v51;
                long long v45 = v52;
                unsigned int v42 = v30;
                int v46 = 0x7FFFFFFF;
                int v47 = v36;
                unsigned int v48 = a4;
                uint64_t v49 = v37;
                sub_EBB954(a10, a6, &v42);
              }
            }
          }
        }
        ++v26;
        ++v29;
      }
      while (v26 != v27);
    }
  }
}

uint64_t sub_EBB954(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = a1 + 48;
  unsigned int v6 = a2 + 1;
  uint64_t v7 = v4 - v3;
  unsigned int v8 = ((unint64_t)(v4 - v3) >> 2) - 1;
  if (a2 + 1 < v8)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "outgoing arc cannot be inserted because vertices with higher index are already present in the graph");
    uint64_t v17 = (void *)sub_2F404((uint64_t)exception, &v18);
  }
  if (v8 <= a2)
  {
    unint64_t v11 = a2 + 2;
    uint64_t v12 = *(void *)(a1 + 8);
    unint64_t v13 = (v12 - *(void *)a1) >> 2;
    if (v11 <= v13)
    {
      if (v11 < v13) {
        *(void *)(a1 + 8) = *(void *)a1 + 4 * v11;
      }
    }
    else
    {
      sub_500DC(a1, v11 - v13, (const float *)(v12 - 4));
      uint64_t v3 = *(void *)(a1 + 48);
      uint64_t v4 = *(void *)(a1 + 56);
      uint64_t v7 = v4 - v3;
    }
    unint64_t v14 = v7 >> 2;
    if (v11 <= v14)
    {
      if (v11 < v14) {
        *(void *)(a1 + 56) = v3 + 4 * v11;
      }
    }
    else
    {
      sub_500DC(v5, v11 - v14, (const float *)(v4 - 4));
    }
  }
  sub_EBB540((char **)(a1 + 72), a3);
  ++*(_DWORD *)(*(void *)(a1 + 48) + 4 * v6);
  return *(void *)(a1 + 80) - 80;
}

void sub_EBBA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_EBBABC(void *a1, int **a2, uint64_t a3)
{
  uint64_t v7 = a1 + 3;
  unsigned int v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)a3;
  a1[5] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unsigned int v8 = *a2;
  uint64_t v9 = a2[1];
  int v10 = 0;
  uint64_t v11 = (char *)v9 - (char *)v8;
  if (v11)
  {
    uint64_t v12 = v11 >> 2;
    unint64_t v13 = (_DWORD *)*a1;
    do
    {
      *v13++ = v10;
      int v14 = *v8++;
      v10 += v14;
      --v12;
    }
    while (v12);
  }
  *(_DWORD *)(a1[1] - 4) = v10;
  sub_EBF034((uint64_t)a1);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[4] - a1[3]) >> 4) != v10)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v17, "sum of in-degrees does not match the size of the incoming arc vector");
    unsigned int v16 = (void *)sub_2F404((uint64_t)exception, &v17);
  }
}

void sub_EBBBCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EBBBFC(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = a1 + 48;
  unsigned int v6 = a2 + 1;
  uint64_t v7 = v4 - v3;
  unsigned int v8 = ((unint64_t)(v4 - v3) >> 2) - 1;
  if (a2 + 1 < v8)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "outgoing arc cannot be inserted because vertices with higher index are already present in the graph");
    long long v17 = (void *)sub_2F404((uint64_t)exception, &v18);
  }
  if (v8 <= a2)
  {
    unint64_t v11 = a2 + 2;
    uint64_t v12 = *(void *)(a1 + 8);
    unint64_t v13 = (v12 - *(void *)a1) >> 2;
    if (v11 <= v13)
    {
      if (v11 < v13) {
        *(void *)(a1 + 8) = *(void *)a1 + 4 * v11;
      }
    }
    else
    {
      sub_500DC(a1, v11 - v13, (const float *)(v12 - 4));
      uint64_t v3 = *(void *)(a1 + 48);
      uint64_t v4 = *(void *)(a1 + 56);
      uint64_t v7 = v4 - v3;
    }
    unint64_t v14 = v7 >> 2;
    if (v11 <= v14)
    {
      if (v11 < v14) {
        *(void *)(a1 + 56) = v3 + 4 * v11;
      }
    }
    else
    {
      sub_500DC(v5, v11 - v14, (const float *)(v4 - 4));
    }
  }
  sub_652DE4((char **)(a1 + 72), a3);
  ++*(_DWORD *)(*(void *)(a1 + 48) + 4 * v6);
  return *(void *)(a1 + 80) - 48;
}

void sub_EBBD34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_EBBD64(void *a1, int **a2, uint64_t a3)
{
  uint64_t v7 = a1 + 3;
  unsigned int v6 = (void *)a1[3];
  if (v6)
  {
    a1[4] = v6;
    operator delete(v6);
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *(_OWORD *)(a1 + 3) = *(_OWORD *)a3;
  a1[5] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  unsigned int v8 = *a2;
  uint64_t v9 = a2[1];
  int v10 = 0;
  uint64_t v11 = (char *)v9 - (char *)v8;
  if (v11)
  {
    uint64_t v12 = v11 >> 2;
    unint64_t v13 = (_DWORD *)*a1;
    do
    {
      *v13++ = v10;
      int v14 = *v8++;
      v10 += v14;
      --v12;
    }
    while (v12);
  }
  *(_DWORD *)(a1[1] - 4) = v10;
  sub_EBF034((uint64_t)a1);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[4] - a1[3]) >> 4) != v10)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v17, "sum of in-degrees does not match the size of the incoming arc vector");
    unsigned int v16 = (void *)sub_2F404((uint64_t)exception, &v17);
  }
}

void sub_EBBE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_EBBEA4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a2;
  sub_EBC9DC(a1, a2);
  uint64_t v7 = (void *)(a1 + 120);
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  unsigned int v8 = sub_EDBFA4((uint64_t)v4);
  LODWORD(__t[0].__d_.__rep_) = -1;
  unint64_t v9 = (uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 2;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      *(void *)(a1 + 128) = *v7 + 4 * v8;
    }
  }
  else
  {
    sub_500DC(a1 + 120, v8 - v9, (const float *)__t);
  }
  unsigned int v10 = sub_EDC0A4(v4);
  unint64_t v137 = 0;
  unint64_t v138 = 0;
  unint64_t v139 = 0;
  unsigned int v11 = sub_EDBFA4((uint64_t)v4);
  uint64_t v12 = v11;
  unint64_t v13 = v137;
  if (v11 <= (unint64_t)((v139 - v137) >> 2)) {
    goto LABEL_16;
  }
  int v14 = v138;
  uint64_t v15 = (char *)operator new(4 * v11);
  uint64_t v16 = v14 - v13;
  long long v17 = &v15[(v14 - v13) & 0xFFFFFFFFFFFFFFFCLL];
  long long v18 = v17;
  if (v14 != v13)
  {
    if ((unint64_t)(v16 - 4) < 0x2C)
    {
      long long v18 = &v15[(v14 - v13) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_13:
        int v27 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *((_DWORD *)v18 - 1) = v27;
        v18 -= 4;
      }
      while (v14 != v13);
      goto LABEL_14;
    }
    long long v18 = &v15[(v14 - v13) & 0xFFFFFFFFFFFFFFFCLL];
    if (v14 - v15 - (v16 & 0xFFFFFFFFFFFFFFFCLL) < 0x20) {
      goto LABEL_13;
    }
    uint64_t v19 = v16 >> 2;
    unint64_t v20 = ((unint64_t)(v16 - 4) >> 2) + 1;
    uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    int v22 = &v14[-v21];
    long long v18 = &v17[-v21];
    uint64_t v23 = &v15[4 * v19 - 16];
    uint64_t v24 = (long long *)(v14 - 16);
    uint64_t v25 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)uint64_t v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 8;
    }
    while (v25);
    int v14 = v22;
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_13;
    }
  }
LABEL_14:
  unint64_t v137 = v18;
  unint64_t v138 = v17;
  unint64_t v139 = &v15[4 * v12];
  if (v13) {
    operator delete(v13);
  }
LABEL_16:
  unsigned int v28 = sub_EDBFA4((uint64_t)v4);
  if (v28)
  {
    size_t v29 = 2 * v28;
    unsigned int v30 = (unsigned __int16 *)operator new(v29);
    bzero(v30, v29);
  }
  else
  {
    unsigned int v30 = 0;
  }
  sub_EBCBE4((char *)v4, (uint64_t)__t);
  sub_EBEF20((uint64_t)&v132, (long long *)&__t[0].__d_.__rep_);
  sub_EBEF20((uint64_t)v127, &v120);
  unsigned int v31 = v135;
  unint64_t v32 = *((void *)&v132 + 1);
  int v33 = v130;
  BOOL v34 = v130 == v131 || v136 == (unsigned char *)v135;
  double v36 = v127[0];
  double v35 = v127[1];
  char v37 = (v136 == (unsigned char *)v135) ^ (v130 == v131);
  unint64_t v38 = ((v136 - (unsigned char *)v135) >> 3) - 1;
  unint64_t v39 = (int *)v132;
  uint64_t v40 = v133 + 8;
LABEL_25:
  while (v34)
  {
    if ((v37 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_24:
    int v41 = *v39;
    v39 += 26;
    ++v30[v41];
    *(void *)&long long v132 = v39;
    if (v32 < v38)
    {
      while (v39 == v31[v32])
      {
        *((void *)&v132 + 1) = v32 + 1;
        unint64_t v39 = *(int **)&v40[8 * v32];
        *(void *)&long long v132 = v39;
        if (v38 == ++v32)
        {
          unint64_t v32 = v38;
          goto LABEL_25;
        }
      }
    }
  }
  if (v32 != *(void *)&v35 || v39 != *(int **)&v36) {
    goto LABEL_24;
  }
LABEL_32:
  if (v33)
  {
    unint64_t v131 = v33;
    operator delete(v33);
  }
  if (v128)
  {
    uint64_t v129 = v128;
    operator delete(v128);
  }
  if (v135)
  {
    uint64_t v136 = v135;
    operator delete(v135);
  }
  if (v133)
  {
    unsigned int v134 = v133;
    operator delete(v133);
  }
  if (*((void *)&v122 + 1))
  {
    *(void *)&long long v123 = *((void *)&v122 + 1);
    operator delete(*((void **)&v122 + 1));
  }
  if (v121[0])
  {
    v121[1] = v121[0];
    operator delete(v121[0]);
  }
  if (*((void *)&v118 + 1))
  {
    *(void *)&long long v119 = *((void *)&v118 + 1);
    operator delete(*((void **)&v118 + 1));
  }
  if (v117[0])
  {
    v117[1] = v117[0];
    operator delete(v117[0]);
  }
  unsigned int v42 = sub_EDBFA4((uint64_t)v4);
  if (v42)
  {
    uint64_t v43 = 0;
    uint64_t v44 = v42;
    do
    {
      LODWORD(__t[0].__d_.__rep_) = v43;
      int v45 = v30[v43];
      int v46 = sub_EDBF4C(v4, v43);
      if (v45) {
        BOOL v47 = v46 == 0;
      }
      else {
        BOOL v47 = 1;
      }
      if (!v47 && (v46 + v45) >= 3)
      {
        sub_745A4((uint64_t)&v137, __t);
        *(_DWORD *)(*v7 + 4 * LODWORD(__t[0].__d_.__rep_)) = v10++;
      }
      ++v43;
    }
    while (v44 != v43);
  }
  unint64_t v112 = (void *)(a1 + 120);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v49 = operator new(4uLL);
  _DWORD *v49 = 0;
  *(void *)(a4 + 8) = v49 + 1;
  *(void *)(a4 + 16) = v49 + 1;
  *(void *)a4 = v49;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  long long v50 = operator new(4uLL);
  *(void *)(a4 + 48) = v50;
  *v50++ = 0;
  *(void *)(a4 + 56) = v50;
  *(void *)(a4 + 64) = v50;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(void *)(a4 + 136) = 0;
  uint64_t v107 = a4 + 48;
  *(void *)(a4 + 144) = -1;
  unint64_t v51 = sub_EDC0A4(v4);
  unint64_t v52 = 2 * v10;
  sub_EB957C((void *)a4, v10, v52, v51, 1, *(unsigned __int8 *)(a1 + 32));
  if (*(unsigned char *)(a1 + 32))
  {
    __n128 v53 = *(void **)(a1 + 192);
    *(void *)(a1 + 200) = v53;
    if (v52 > (uint64_t)(*(void *)(a1 + 208) - (void)v53) >> 2)
    {
      unint64_t v54 = (char *)operator new(4 * v52);
      *(void *)(a1 + 192) = v54;
      *(void *)(a1 + 200) = v54;
      *(void *)(a1 + 208) = &v54[4 * v52];
      if (v53) {
        operator delete(v53);
      }
    }
    unint64_t v55 = *(void **)(a1 + 216);
    *(void *)(a1 + 224) = v55;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 232) - (void)v55) >> 4) < v52)
    {
      unsigned int v56 = (char *)operator new(80 * v52);
      *(void *)(a1 + 216) = v56;
      *(void *)(a1 + 224) = v56;
      *(void *)(a1 + 232) = &v56[80 * v52];
      if (v55) {
        operator delete(v55);
      }
    }
  }
  uint64_t v106 = v30;
  int v57 = *(unsigned __int16 **)(a1 + 168);
  __int16 v58 = *(unsigned __int16 **)(a1 + 176);
  uint64_t v114 = a1;
  unsigned int v115 = v4;
  if (v57 != v58)
  {
    do
    {
      uint64_t v59 = sub_EDC050(v4, *v57);
      LOBYTE(__t[0].__d_.__rep_) = *(unsigned char *)v59;
      unsigned int v60 = *(_DWORD *)(v59 + 4);
      if (v60 == -1) {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v61 = 0;
      }
      else {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v61 = sub_EDBFB0(v4, v60);
      }
      __t[1].__d_.__rep_ = v61;
      long long v62 = *(_OWORD *)(v59 + 24);
      long long v63 = *(_OWORD *)(v59 + 40);
      long long v64 = *(_OWORD *)(v59 + 56);
      v121[0] = *(void **)(v59 + 72);
      long long v65 = *(_OWORD *)(v59 + 8);
      long long v119 = v63;
      long long v120 = v64;
      *(_OWORD *)uint64_t v117 = v65;
      long long v118 = v62;
      unsigned int v66 = *(_DWORD *)(v59 + 80);
      if (v66 == -1) {
        uint64_t v67 = 0;
      }
      else {
        uint64_t v67 = (void *)sub_EDBFB0(v4, v66);
      }
      v121[1] = v67;
      long long v122 = *(_OWORD *)(v59 + 88);
      long long v68 = *(_OWORD *)(v59 + 104);
      long long v69 = *(_OWORD *)(v59 + 120);
      long long v70 = *(_OWORD *)(v59 + 136);
      uint64_t v126 = *(void *)(v59 + 152);
      long long v124 = v69;
      long long v125 = v70;
      long long v123 = v68;
      sub_EB913C(a4, (long long *)&__t[0].__d_.__rep_);
      ++v57;
    }
    while (v57 != v58);
    unsigned int v71 = *(unsigned __int16 **)(a1 + 168);
    unint64_t v110 = *(unsigned __int16 **)(v114 + 176);
    if (v71 != v110)
    {
      unsigned int v72 = 0;
      uint64_t v108 = (unint64_t *)(a4 + 96);
      do
      {
        unsigned __int16 v73 = *v71;
        unint64_t v74 = (_DWORD *)sub_EDC050(v4, *v71);
        unsigned int v75 = v74[1];
        unsigned int v76 = v74[20];
        uint64_t v77 = *(void *)(a4 + 48);
        uint64_t v78 = *(void *)(a4 + 56);
        uint64_t v79 = v78 - v77;
        if (((unint64_t)(v78 - v77) >> 2) - 1 <= v72)
        {
          unint64_t v80 = v72 + 2;
          uint64_t v81 = *(void *)(a4 + 8);
          unint64_t v82 = (v81 - *(void *)a4) >> 2;
          if (v80 <= v82)
          {
            if (v80 < v82) {
              *(void *)(a4 + 8) = *(void *)a4 + 4 * v80;
            }
          }
          else
          {
            sub_500DC(a4, v80 - v82, (const float *)(v81 - 4));
            uint64_t v77 = *(void *)(a4 + 48);
            uint64_t v78 = *(void *)(a4 + 56);
            uint64_t v79 = v78 - v77;
          }
          unint64_t v83 = v79 >> 2;
          if (v80 <= v83)
          {
            if (v80 < v83) {
              *(void *)(a4 + 56) = v77 + 4 * v80;
            }
          }
          else
          {
            sub_500DC(v107, v80 - v83, (const float *)(v78 - 4));
          }
        }
        if (v75 == -1)
        {
          unint64_t v84 = 0;
          if (v76 == -1)
          {
LABEL_92:
            unint64_t v85 = 0;
            goto LABEL_93;
          }
        }
        else
        {
          unint64_t v84 = sub_EDBFB0(v115, v75);
          if (v76 == -1) {
            goto LABEL_92;
          }
        }
        unint64_t v85 = sub_EDBFB0(v115, v76);
        unsigned int v75 = v76;
LABEL_93:
        unsigned __int16 v86 = sub_EDBE88((uint64_t)v115, v75);
        sub_ECEDD8((double *)&v132, v84, v85, (uint64_t)v74, v86, *(void ***)(v114 + 40));
        unint64_t v87 = *(void *)(a4 + 96);
        unint64_t v88 = (uint64_t)(*(void *)(a4 + 104) - v87) >> 3;
        if (v88 <= v72)
        {
          unint64_t v89 = v72 + 1;
          __t[0].__d_.__rep_ = 0;
          if (v89 <= v88)
          {
            if (v89 < v88) {
              *(void *)(a4 + 104) = v87 + 8 * v89;
            }
          }
          else
          {
            sub_2F898C(v108, v89 - v88, &__t[0].__d_.__rep_);
            unint64_t v87 = *v108;
          }
        }
        *(void *)(v87 + 8 * v72) = v132;
        if (*(unsigned char *)sub_EDC050(v115, v73) == 3)
        {
          sub_EBCC94(v114, v115, v73, a4);
        }
        else if (v76 != -1)
        {
          sub_EBCDF8(v114, v115, v76, v74[22], a3, v72, a4);
        }
        ++v72;
        ++v71;
        uint64_t v4 = v115;
      }
      while (v71 != v110);
    }
  }
  long long v90 = (unsigned int *)v137;
  unint64_t v111 = (unsigned int *)v138;
  if (v137 != v138)
  {
    unint64_t v109 = (unint64_t *)(a4 + 96);
    do
    {
      uint64_t v91 = *v90;
      unint64_t v92 = *(unsigned int *)(*v112 + 4 * v91);
      uint64_t v93 = *(void *)(a4 + 48);
      uint64_t v94 = *(void *)(a4 + 56);
      uint64_t v95 = v94 - v93;
      if (((unint64_t)(v94 - v93) >> 2) - 1 <= v92)
      {
        unint64_t v96 = (v92 + 2);
        uint64_t v97 = *(void *)(a4 + 8);
        unint64_t v98 = (v97 - *(void *)a4) >> 2;
        if (v96 <= v98)
        {
          if (v96 < v98) {
            *(void *)(a4 + 8) = *(void *)a4 + 4 * v96;
          }
        }
        else
        {
          sub_500DC(a4, v96 - v98, (const float *)(v97 - 4));
          uint64_t v93 = *(void *)(a4 + 48);
          uint64_t v94 = *(void *)(a4 + 56);
          uint64_t v95 = v94 - v93;
        }
        unint64_t v99 = v95 >> 2;
        if (v96 <= v99)
        {
          if (v96 < v99) {
            *(void *)(a4 + 56) = v93 + 4 * v96;
          }
        }
        else
        {
          sub_500DC(v107, v96 - v99, (const float *)(v94 - 4));
        }
      }
      unint64_t v100 = sub_EDBFB0(v115, v91);
      unsigned __int16 v101 = sub_EDBE88((uint64_t)v115, v91);
      long long v124 = 1uLL;
      long long v125 = 0u;
      *(void *)&long long v123 = 0;
      long long v120 = 0u;
      *(_OWORD *)unsigned int v121 = 0u;
      *(void *)&long long v118 = 0;
      long long v119 = 1uLL;
      *(_OWORD *)&__t[0].__d_.__rep_ = 0u;
      HIDWORD(__t[0].__d_.__rep_) = -1;
      v117[0] = 0;
      v117[1] = 0;
      *((void *)&v118 + 1) = 0x3FF0000000000000;
      *(void *)&long long v120 = 0;
      BYTE8(v120) = 0;
      WORD5(v120) = -29536;
      BYTE13(v120) = 0;
      LODWORD(v121[0]) = -1;
      long long v122 = 0uLL;
      *((void *)&v123 + 1) = 0x3FF0000000000000;
      *(void *)&long long v125 = 0;
      BYTE8(v125) = 0;
      WORD5(v125) = -29536;
      BYTE13(v125) = 0;
      sub_ECEDD8(v127, v100, v100, (uint64_t)__t, v101, *(void ***)(v114 + 40));
      uint64_t v4 = v115;
      unint64_t v102 = *(void *)(a4 + 96);
      unint64_t v103 = (uint64_t)(*(void *)(a4 + 104) - v102) >> 3;
      if (v103 <= v92)
      {
        unint64_t v104 = (v92 + 1);
        *(void *)&long long v132 = 0;
        if (v104 <= v103)
        {
          if (v104 < v103) {
            *(void *)(a4 + 104) = v102 + 8 * v104;
          }
        }
        else
        {
          sub_2F898C(v109, v104 - v103, (uint64_t *)&v132);
          unint64_t v102 = *v109;
        }
      }
      *(double *)(v102 + 8 * v92) = v127[0];
      sub_EBCDF8(v114, v115, v91, 0, a3, v92, a4);
      ++v90;
    }
    while (v90 != v111);
  }
  if (*(unsigned char *)(v114 + 33)) {
    sub_EB937C(a4);
  }
  if (*(unsigned char *)(v114 + 32)) {
    sub_EBD0E0(v114, (void *)a4);
  }
  if (*(unsigned char *)(v114 + 34))
  {
    __t[0] = std::chrono::system_clock::now();
    std::chrono::system_clock::to_time_t(__t);
    *(void *)&long long v132 = *(void *)v114;
    DWORD2(v132) = *(_DWORD *)(v114 + 8);
    BYTE12(v132) = *(unsigned char *)(v114 + 12);
    char v105 = *(unsigned char *)(v114 + 32);
    if (v105) {
      char v105 = *(unsigned char *)(v114 + 35) != 0;
    }
    BYTE13(v132) = v105;
    sub_ECF4A4((uint64_t)__t, &v132, *(void ***)(v114 + 40));
    sub_ED01F4((uint64_t)__t, (uint64_t)v4, a3, *(void *)(v114 + 24), a4);
  }
  sub_EBF034(a4);
  sub_EBF034(v107);
  sub_EBF170((char **)(a4 + 24));
  sub_EBF170((char **)(a4 + 72));
  if (v106) {
    operator delete(v106);
  }
  if (v137)
  {
    unint64_t v138 = v137;
    operator delete(v137);
  }
}

void sub_EBC8EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v13 = *(void **)(v11 - 112);
  if (!v13) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v11 - 104) = v13;
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

void sub_EBC9DC(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = sub_EDC0A4(a2);
  unsigned int v6 = *(int16x8_t **)(a1 + 168);
  uint64_t v5 = *(int16x8_t **)(a1 + 176);
  unint64_t v7 = ((char *)v5 - (char *)v6) >> 1;
  if (v4 <= v7)
  {
    if (v4 < v7)
    {
      uint64_t v5 = (int16x8_t *)((char *)v6 + 2 * v4);
      *(void *)(a1 + 176) = v5;
    }
  }
  else
  {
    sub_EBF29C(a1 + 168, v4 - v7);
    unsigned int v6 = *(int16x8_t **)(a1 + 168);
    uint64_t v5 = *(int16x8_t **)(a1 + 176);
  }
  if (v6 != v5)
  {
    unint64_t v8 = (char *)v5 - (char *)v6 - 2;
    if (v8 < 0x1E)
    {
      LODWORD(v9) = 0;
      unsigned int v10 = v6;
      do
      {
LABEL_11:
        v10->i16[0] = v9;
        unsigned int v10 = (int16x8_t *)((char *)v10 + 2);
        LODWORD(v9) = v9 + 1;
      }
      while (v10 != v5);
      goto LABEL_12;
    }
    uint64_t v11 = (v8 >> 1) + 1;
    unint64_t v9 = v11 & 0xFFFFFFFFFFFFFFF0;
    unsigned int v10 = (int16x8_t *)((char *)v6 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
    int16x8_t v12 = (int16x8_t)xmmword_20F0F20;
    unint64_t v13 = v6 + 1;
    v14.i64[0] = 0x8000800080008;
    v14.i64[1] = 0x8000800080008;
    v15.i64[0] = 0x10001000100010;
    v15.i64[1] = 0x10001000100010;
    unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v13[-1] = v12;
      *unint64_t v13 = vaddq_s16(v12, v14);
      int16x8_t v12 = vaddq_s16(v12, v15);
      v13 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v11 != v9) {
      goto LABEL_11;
    }
  }
LABEL_12:
  unint64_t v17 = sub_EDC0A4(a2);
  uint64_t v19 = *(int16x8_t **)(a1 + 144);
  long long v18 = *(int16x8_t **)(a1 + 152);
  unint64_t v20 = ((char *)v18 - (char *)v19) >> 1;
  if (v17 <= v20)
  {
    if (v17 < v20)
    {
      long long v18 = (int16x8_t *)((char *)v19 + 2 * v17);
      *(void *)(a1 + 152) = v18;
    }
  }
  else
  {
    sub_EBF29C(a1 + 144, v17 - v20);
    uint64_t v19 = *(int16x8_t **)(a1 + 144);
    long long v18 = *(int16x8_t **)(a1 + 152);
  }
  if (v19 != v18)
  {
    unint64_t v21 = (char *)v18 - (char *)v19 - 2;
    if (v21 < 0x1E)
    {
      LODWORD(v22) = 0;
      uint64_t v23 = v19;
      do
      {
LABEL_22:
        v23->i16[0] = v22;
        uint64_t v23 = (int16x8_t *)((char *)v23 + 2);
        LODWORD(v22) = v22 + 1;
      }
      while (v23 != v18);
      goto LABEL_23;
    }
    uint64_t v24 = (v21 >> 1) + 1;
    unint64_t v22 = v24 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v23 = (int16x8_t *)((char *)v19 + 2 * (v24 & 0xFFFFFFFFFFFFFFF0));
    int16x8_t v25 = (int16x8_t)xmmword_20F0F20;
    long long v26 = v19 + 1;
    v27.i64[0] = 0x8000800080008;
    v27.i64[1] = 0x8000800080008;
    v28.i64[0] = 0x10001000100010;
    v28.i64[1] = 0x10001000100010;
    unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = v25;
      *long long v26 = vaddq_s16(v25, v27);
      int16x8_t v25 = vaddq_s16(v25, v28);
      v26 += 2;
      v29 -= 16;
    }
    while (v29);
    if (v24 != v22) {
      goto LABEL_22;
    }
  }
LABEL_23:
  if (*(unsigned char *)(a1 + 33))
  {
    uint64_t v30 = *(void *)(a1 + 168);
    unsigned int v31 = *(unsigned __int16 **)(a1 + 176);
    unint64_t v32 = 126 - 2 * __clz(((uint64_t)v31 - v30) >> 1);
    uint64_t v40 = a2;
    if (v31 == (unsigned __int16 *)v30) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v32;
    }
    sub_EC3184(v30, v31, &v40, v33, 1);
    uint64_t v34 = *(void *)(a1 + 144);
    uint64_t v35 = *(void *)(a1 + 152);
    uint64_t v36 = v35 - v34;
    if (v35 != v34)
    {
      uint64_t v37 = 0;
      uint64_t v38 = v36 >> 1;
      uint64_t v39 = *(void *)(a1 + 168);
      do
      {
        *(_WORD *)(v34 + 2 * *(unsigned __int16 *)(v39 + 2 * v37)) = v37;
        ++v37;
      }
      while (v38 != v37);
    }
  }
}

void sub_EBCBE4(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EDB9B4(a1, (uint64_t)&v9);
  sub_EDBBF4(a1, (uint64_t)&v4);
  sub_EBEF20(a2, &v9);
  sub_EBEF20(a2 + 64, &v4);
  if (__p)
  {
    unint64_t v8 = __p;
    operator delete(__p);
  }
  if (v5)
  {
    unsigned int v6 = v5;
    operator delete(v5);
  }
  if (v12)
  {
    unint64_t v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
}

void sub_EBCC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2FC938((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_EBCC94(uint64_t a1, void *a2, unsigned __int16 a3, uint64_t a4)
{
  uint64_t v6 = a3;
  uint64_t v19 = sub_EDC050(a2, a3);
  unint64_t v20 = sub_EDBFB0(a2, *(_DWORD *)(v19 + 4));
  uint64_t v17 = v6;
  uint64_t result = sub_EDC250((uint64_t)a2, v6, &v30);
  unint64_t v8 = v30;
  for (uint64_t i = v31; v8 != i; ++v8)
  {
    uint64_t v10 = *v8;
    uint64_t v11 = sub_EDC050(a2, *v8);
    unint64_t v12 = sub_EDBFB0(a2, *(_DWORD *)(v11 + 80));
    sub_EC9798((uint64_t)v29);
    sub_EC9F28((uint64_t)v29, v20, (unsigned int *)(v19 + 8), v12, (unsigned int *)(v11 + 88), a1 + 48);
    uint64_t result = sub_EC97AC((uint64_t)v29);
    if (result)
    {
      uint64_t v13 = *(void *)(a1 + 144);
      unsigned int v14 = *(unsigned __int16 *)(v13 + 2 * v17);
      LODWORD(v13) = *(unsigned __int16 *)(v13 + 2 * v10);
      int v15 = *(_DWORD *)(v19 + 4);
      int v16 = *(_DWORD *)(v11 + 80);
      long long v22 = v29[0];
      long long v23 = v29[1];
      long long v24 = v29[2];
      int v21 = v13;
      int v25 = 0x7FFFFFFF;
      int v26 = v15;
      int v27 = v16;
      uint64_t v28 = 0;
      uint64_t result = sub_EBB954(a4, v14, &v21);
    }
  }
  return result;
}

uint64_t sub_EBCDF8(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  sub_EC9798((uint64_t)v39);
  if (!sub_EB9330(a7, a6)
    || (unsigned int v14 = (unsigned __int8 *)sub_EB935C(a7, a6),
        sub_EC980C((uint64_t)v39, v14, 0, a5, *(void *)(a1 + 16), v15, v16),
        uint64_t result = sub_EC97AC((uint64_t)v39),
        result))
  {
    sub_EBD42C(a1, a2, a3, a3, a4, a6, 0, a5, v39, a7);
    sub_EDBDF0(a2, a3, (uint64_t)&v28);
    uint64_t result = sub_EDBEC4(a2, a3, (uint64_t)&v36);
    uint64_t v18 = DWORD2(v29);
    uint64_t v27 = v37;
    if (DWORD2(v29) != (unint64_t)v37)
    {
      int v25 = (void *)v29;
      int v26 = v28;
      unsigned int v24 = 1000000000 - a4;
      do
      {
        uint64_t v19 = (unsigned int *)(*v26 + 104 * v18);
        long long v36 = v39[0];
        long long v37 = v39[1];
        long long v38 = v39[2];
        sub_EC9CCC((uint64_t)&v36, (uint64_t)v19, v24, a5, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 12), *(void ***)(a1 + 40));
        uint64_t v20 = *v19;
        int v21 = *(_DWORD *)(*(void *)(a1 + 120) + 4 * v20);
        if (sub_EC97AC((uint64_t)&v36))
        {
          while (v21 == -1)
          {
            sub_EBD42C(a1, a2, a3, v20, 0, a6, (uint64_t)v19, a5, &v36, a7);
            if (v20 == a3)
            {
              int v21 = -1;
              LODWORD(v20) = a3;
              break;
            }
            sub_EDBDF0(a2, v20, (uint64_t)&v28);
            sub_EDBEC4(a2, v20, (uint64_t)v40);
            if (DWORD2(v29) == v41)
            {
              int v21 = -1;
              uint64_t result = sub_EC97AC((uint64_t)&v36);
              if (result) {
                goto LABEL_15;
              }
              goto LABEL_6;
            }
            long long v22 = (unsigned int *)(*v28 + 104 * DWORD2(v29));
            sub_EC9CCC((uint64_t)&v36, (uint64_t)v22, 0x3B9ACA00u, a5, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 12), *(void ***)(a1 + 40));
            uint64_t v20 = *v22;
            int v21 = *(_DWORD *)(*(void *)(a1 + 120) + 4 * v20);
            if (!sub_EC97AC((uint64_t)&v36)) {
              break;
            }
          }
        }
        uint64_t result = sub_EC97AC((uint64_t)&v36);
        if (result)
        {
LABEL_15:
          if (v21 != -1 && v21 != a6)
          {
            long long v29 = v36;
            long long v30 = v37;
            long long v31 = v38;
            LODWORD(v28) = v21;
            int v32 = 0x7FFFFFFF;
            unsigned int v33 = a3;
            int v34 = v20;
            uint64_t v35 = v19;
            uint64_t result = sub_EBB954(a7, a6, &v28);
          }
        }
LABEL_6:
        uint64_t v18 = *(unsigned int *)(*v25 + 4 * v18);
      }
      while (v18 != v27);
    }
  }
  return result;
}

void sub_EBD0E0(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = a2[7] - a2[6];
  BOOL v47 = 0;
  unsigned int v48 = 0;
  std::string __p = 0;
  if ((v4 >> 2) == 1)
  {
    uint64_t v6 = 0;
    unint64_t v41 = ((v4 << 30) - 0x100000000) >> 32;
    if (v41) {
      goto LABEL_11;
    }
  }
  else
  {
    size_t v5 = 4 * ((v4 >> 2) - 1);
    uint64_t v6 = (char *)operator new(v5);
    std::string __p = v6;
    unsigned int v48 = &v6[v5];
    bzero(v6, v5);
    BOOL v47 = &v6[v5];
    unint64_t v41 = ((v4 << 30) - 0x100000000) >> 32;
    if (v41)
    {
LABEL_11:
      uint64_t v14 = 0;
      uint64_t v43 = (void **)(a1 + 192);
      uint64_t v40 = v2;
      while (1)
      {
        sub_EC079C((uint64_t)v2, v14);
        uint64_t v15 = v2[9];
        unsigned int v16 = *(_DWORD *)(v2[6] + 4 * v14);
        sub_EC079C((uint64_t)v2, v14);
        uint64_t v17 = (_OWORD *)(v15 + 80 * v16);
        uint64_t v42 = v14 + 1;
        uint64_t v45 = v2[9] + 80 * *(unsigned int *)(v2[6] + 4 * (v14 + 1));
        if (v17 != (_OWORD *)v45) {
          break;
        }
LABEL_12:
        uint64_t v14 = v42;
        uint64_t v2 = v40;
        if (v42 == v41) {
          goto LABEL_5;
        }
      }
      int v44 = v14;
      while (1)
      {
        int v18 = *(_DWORD *)v17;
        uint64_t v20 = *(char **)(a1 + 200);
        unint64_t v19 = *(void *)(a1 + 208);
        if ((unint64_t)v20 >= v19) {
          break;
        }
        *(_DWORD *)uint64_t v20 = v18;
        uint64_t v21 = (uint64_t)(v20 + 4);
LABEL_36:
        *(void *)(a1 + 200) = v21;
        sub_EBB540((char **)(a1 + 216), v17);
        *(_DWORD *)(*(void *)(a1 + 224) - 80) = v44;
        int v39 = *(_DWORD *)v17;
        v17 += 5;
        ++*(_DWORD *)&v6[4 * v39];
        if (v17 == (_OWORD *)v45) {
          goto LABEL_12;
        }
      }
      long long v22 = (char *)*v43;
      uint64_t v23 = v20 - (unsigned char *)*v43;
      uint64_t v24 = v23 >> 2;
      unint64_t v25 = (v23 >> 2) + 1;
      if (v25 >> 62) {
        sub_2E00();
      }
      uint64_t v26 = v19 - (void)v22;
      if (v26 >> 1 > v25) {
        unint64_t v25 = v26 >> 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        if (v27 >> 62) {
          sub_188D718();
        }
        uint64_t v28 = operator new(4 * v27);
        long long v29 = &v28[4 * v24];
        *long long v29 = v18;
        uint64_t v21 = (uint64_t)(v29 + 1);
        if (v20 == v22) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v28 = 0;
        long long v29 = (_DWORD *)(4 * v24);
        *(_DWORD *)(4 * v24) = v18;
        uint64_t v21 = 4 * v24 + 4;
        if (v20 == v22)
        {
LABEL_34:
          *(void *)(a1 + 192) = v29;
          *(void *)(a1 + 200) = v21;
          *(void *)(a1 + 208) = &v28[4 * v27];
          if (v22) {
            operator delete(v22);
          }
          goto LABEL_36;
        }
      }
      unint64_t v30 = v20 - 4 - v22;
      if (v30 < 0x2C) {
        goto LABEL_42;
      }
      if ((unint64_t)(v20 - &v28[v23]) < 0x20) {
        goto LABEL_42;
      }
      uint64_t v31 = (v30 >> 2) + 1;
      uint64_t v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
      unsigned int v33 = &v20[-v32];
      long long v29 = (_DWORD *)((char *)v29 - v32);
      int v34 = &v28[4 * v24 - 16];
      uint64_t v35 = v20 - 16;
      uint64_t v36 = v31 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v37 = *(_OWORD *)v35;
        *(v34 - 1) = *((_OWORD *)v35 - 1);
        *int v34 = v37;
        v34 -= 2;
        v35 -= 32;
        v36 -= 8;
      }
      while (v36);
      uint64_t v20 = v33;
      if (v31 != (v31 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_42:
        do
        {
          int v38 = *((_DWORD *)v20 - 1);
          v20 -= 4;
          *--long long v29 = v38;
        }
        while (v20 != v22);
      }
      goto LABEL_34;
    }
  }
LABEL_5:
  long long v9 = *(long long **)(a1 + 216);
  uint64_t v8 = a1 + 216;
  unint64_t v7 = v9;
  uint64_t v10 = *(unsigned int **)(v8 - 24);
  uint64_t v11 = *(char **)(v8 - 16);
  unint64_t v12 = 126 - 2 * __clz((v11 - (char *)v10) >> 2);
  if (v11 == (char *)v10) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v12;
  }
  sub_EC4428(v10, v7, v11, *(long long **)(v8 + 8), (uint64_t)&v49, v13, 1);
  sub_EBBABC(v2, (int **)&__p, v8);
  if (__p)
  {
    BOOL v47 = (char *)__p;
    operator delete(__p);
  }
}

void sub_EBD3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_EBD42C(uint64_t a1, void *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, long long *a9, uint64_t a10)
{
  if (sub_EDC000(a2, a4))
  {
    int v36 = a3;
    uint64_t v37 = a7;
    uint64_t v17 = sub_3750CC(**(void ***)(a1 + 40));
    unint64_t v18 = sub_EDBFB0(a2, a4);
    unint64_t v19 = HIDWORD(v18);
    unint64_t v20 = HIDWORD(v18) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v18) << 32);
    unint64_t v39 = (HIDWORD(v18) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v18) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v18 >> 1) & 1) << 48)) ^ 0x1000000000000;
    int v38 = (int *)sub_2D5D58(v17, v20);
    if (*(unsigned char *)(v17 + 7772))
    {
      uint64_t v21 = sub_2DB8E0(v17 + 3896, v19, 0);
      long long v22 = &v21[-*(int *)v21];
      if (*(unsigned __int16 *)v22 < 5u)
      {
        uint64_t v23 = 0;
      }
      else
      {
        uint64_t v23 = *((unsigned __int16 *)v22 + 2);
        if (v23) {
          v23 += (uint64_t)&v21[*(unsigned int *)&v21[v23]];
        }
      }
      uint64_t v24 = (int *)(v23 + 4 * WORD2(v39) + 4 + *(unsigned int *)(v23 + 4 * WORD2(v39) + 4));
    }
    else
    {
      uint64_t v24 = 0;
    }
    v56[0] = v38;
    v56[1] = v24;
    v56[2] = (int *)sub_2E5C38(v17, v20, 1);
    v56[3] = v25;
    int v57 = v19;
    __int16 v58 = WORD2(v39);
    char v59 = BYTE6(v39);
    sub_EDC10C(a2, a4, (uint64_t)v54);
    sub_EDC15C(a2, a4, (uint64_t)v53);
    uint64_t v26 = (unsigned __int16 *)v54[0];
    unint64_t v27 = v55;
    uint64_t v28 = (unsigned __int16 *)v53[0];
    if ((unsigned __int16 *)v54[0] != v55)
    {
      long long v29 = (void *)v54[1];
      do
      {
        unsigned int v30 = *(unsigned __int16 *)(*(void *)(a1 + 144) + 2 * *v28);
        if (a6 != v30 && *(_DWORD *)(*v29 + 160 * *v26 + 4) == a4)
        {
          unsigned int v31 = *(_DWORD *)(*v29 + 160 * *v26 + 8);
          if (v31 >= a5)
          {
            long long v32 = a9[1];
            long long v50 = *a9;
            long long v51 = v32;
            long long v52 = a9[2];
            sub_EC9BD8((uint64_t)&v50, v56, v31 - a5, a8, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 12), *(void ***)(a1 + 40));
            if (sub_EC97AC((uint64_t)&v50))
            {
              unsigned int v33 = (unsigned __int8 *)sub_EB935C(a10, v30);
              sub_EC980C((uint64_t)&v50, v33, 1, a8, *(void *)(a1 + 16), v34, v35);
              if (sub_EC97AC((uint64_t)&v50))
              {
                long long v43 = v50;
                long long v44 = v51;
                long long v45 = v52;
                unsigned int v42 = v30;
                int v46 = 0x7FFFFFFF;
                int v47 = v36;
                unsigned int v48 = a4;
                uint64_t v49 = v37;
                sub_EBB954(a10, a6, &v42);
              }
            }
          }
        }
        ++v26;
        ++v28;
      }
      while (v26 != v27);
      uint64_t v28 = (unsigned __int16 *)v53[0];
    }
    if (v28)
    {
      v53[1] = v28;
      operator delete(v28);
    }
  }
}

void sub_EBD6F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 184);
  if (v3)
  {
    *(void *)(v1 - 176) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_EBD71C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v4 = a2;
  sub_EBE310(a1, a2);
  unint64_t v7 = (void *)(a1 + 120);
  *(void *)(a1 + 128) = *(void *)(a1 + 120);
  unsigned int v8 = sub_EDBFA4((uint64_t)v4);
  LODWORD(__t) = -1;
  unint64_t v9 = (uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 2;
  if (v8 <= v9)
  {
    if (v8 < v9) {
      *(void *)(a1 + 128) = *v7 + 4 * v8;
    }
  }
  else
  {
    sub_500DC(a1 + 120, v8 - v9, (const float *)&__t);
  }
  unsigned int v10 = sub_EDD010(v4);
  unint64_t v137 = 0;
  unint64_t v138 = 0;
  unint64_t v139 = 0;
  unsigned int v11 = sub_EDBFA4((uint64_t)v4);
  uint64_t v12 = v11;
  uint64_t v13 = v137;
  if (v11 <= (unint64_t)((v139 - v137) >> 2)) {
    goto LABEL_16;
  }
  uint64_t v14 = v138;
  uint64_t v15 = (char *)operator new(4 * v11);
  uint64_t v16 = v14 - v13;
  uint64_t v17 = &v15[(v14 - v13) & 0xFFFFFFFFFFFFFFFCLL];
  unint64_t v18 = v17;
  if (v14 != v13)
  {
    if ((unint64_t)(v16 - 4) < 0x2C)
    {
      unint64_t v18 = &v15[(v14 - v13) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_13:
        int v27 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        *((_DWORD *)v18 - 1) = v27;
        v18 -= 4;
      }
      while (v14 != v13);
      goto LABEL_14;
    }
    unint64_t v18 = &v15[(v14 - v13) & 0xFFFFFFFFFFFFFFFCLL];
    if (v14 - v15 - (v16 & 0xFFFFFFFFFFFFFFFCLL) < 0x20) {
      goto LABEL_13;
    }
    uint64_t v19 = v16 >> 2;
    unint64_t v20 = ((unint64_t)(v16 - 4) >> 2) + 1;
    uint64_t v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    long long v22 = &v14[-v21];
    unint64_t v18 = &v17[-v21];
    uint64_t v23 = &v15[4 * v19 - 16];
    uint64_t v24 = (long long *)(v14 - 16);
    uint64_t v25 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)uint64_t v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 8;
    }
    while (v25);
    uint64_t v14 = v22;
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_13;
    }
  }
LABEL_14:
  unint64_t v137 = v18;
  unint64_t v138 = v17;
  unint64_t v139 = &v15[4 * v12];
  if (v13) {
    operator delete(v13);
  }
LABEL_16:
  unsigned int v28 = sub_EDBFA4((uint64_t)v4);
  if (v28)
  {
    size_t v29 = 2 * v28;
    unsigned int v30 = (unsigned __int16 *)operator new(v29);
    bzero(v30, v29);
  }
  else
  {
    unsigned int v30 = 0;
  }
  sub_EBE518((char *)v4, (uint64_t)&__t);
  sub_EBEF20((uint64_t)&v132, &__t);
  sub_EBEF20((uint64_t)&v127, &v120);
  unsigned int v31 = v135;
  unint64_t v32 = *((void *)&v132 + 1);
  unsigned int v33 = v130;
  BOOL v34 = v130 == v131 || v136 == (unsigned char *)v135;
  long long v35 = v127;
  char v36 = (v136 == (unsigned char *)v135) ^ (v130 == v131);
  unint64_t v37 = ((v136 - (unsigned char *)v135) >> 3) - 1;
  int v38 = (int *)v132;
  unint64_t v39 = v133 + 8;
LABEL_25:
  while (v34)
  {
    if ((v36 & 1) == 0) {
      goto LABEL_31;
    }
LABEL_24:
    int v40 = *v38;
    v38 += 26;
    ++v30[v40];
    *(void *)&long long v132 = v38;
    if (v32 < v37)
    {
      while (v38 == v31[v32])
      {
        *((void *)&v132 + 1) = v32 + 1;
        int v38 = *(int **)&v39[8 * v32];
        *(void *)&long long v132 = v38;
        if (v37 == ++v32)
        {
          unint64_t v32 = v37;
          goto LABEL_25;
        }
      }
    }
  }
  if (__PAIR128__(v32, (unint64_t)v38) != v35) {
    goto LABEL_24;
  }
LABEL_31:
  if (v33)
  {
    unint64_t v131 = v33;
    operator delete(v33);
  }
  if (v128)
  {
    uint64_t v129 = v128;
    operator delete(v128);
  }
  if (v135)
  {
    uint64_t v136 = v135;
    operator delete(v135);
  }
  if (v133)
  {
    unsigned int v134 = v133;
    operator delete(v133);
  }
  if (*((void *)&v122 + 1))
  {
    *(void *)&long long v123 = *((void *)&v122 + 1);
    operator delete(*((void **)&v122 + 1));
  }
  if ((void)v121)
  {
    *((void *)&v121 + 1) = v121;
    operator delete((void *)v121);
  }
  if (*((void *)&v118 + 1))
  {
    *(void *)&long long v119 = *((void *)&v118 + 1);
    operator delete(*((void **)&v118 + 1));
  }
  if ((void)v117)
  {
    *((void *)&v117 + 1) = v117;
    operator delete((void *)v117);
  }
  unsigned int v41 = sub_EDBFA4((uint64_t)v4);
  if (v41)
  {
    uint64_t v42 = 0;
    uint64_t v43 = v41;
    do
    {
      LODWORD(__t) = v42;
      int v44 = v30[v42];
      int v45 = sub_EDBF4C(v4, v42);
      if (v44) {
        BOOL v46 = v45 == 0;
      }
      else {
        BOOL v46 = 1;
      }
      if (!v46 && (v45 + v44) >= 3)
      {
        sub_745A4((uint64_t)&v137, &__t);
        *(_DWORD *)(*v7 + 4 * __t) = v10++;
      }
      ++v42;
    }
    while (v43 != v42);
  }
  unint64_t v111 = (void *)(a1 + 120);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  unsigned int v48 = operator new(4uLL);
  *unsigned int v48 = 0;
  *(void *)(a4 + 8) = v48 + 1;
  *(void *)(a4 + 16) = v48 + 1;
  *(void *)a4 = v48;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  uint64_t v49 = operator new(4uLL);
  *(void *)(a4 + 48) = v49;
  *v49++ = 0;
  *(void *)(a4 + 56) = v49;
  *(void *)(a4 + 64) = v49;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(void *)(a4 + 136) = 0;
  uint64_t v107 = a4 + 48;
  *(void *)(a4 + 144) = -1;
  unint64_t v50 = sub_EDD010(v4);
  unint64_t v51 = 2 * v10;
  sub_EB9BBC((void *)a4, v10, v51, v50, 1, *(unsigned __int8 *)(a1 + 32));
  if (*(unsigned char *)(a1 + 32))
  {
    __n128 v53 = *(void **)(a1 + 192);
    *(void *)(a1 + 200) = v53;
    if (v51 > (uint64_t)(*(void *)(a1 + 208) - (void)v53) >> 2)
    {
      unint64_t v54 = (char *)operator new(4 * v51);
      *(void *)(a1 + 192) = v54;
      *(void *)(a1 + 200) = v54;
      *(void *)(a1 + 208) = &v54[4 * v51];
      if (v53) {
        operator delete(v53);
      }
    }
    unint64_t v55 = *(void **)(a1 + 216);
    *(void *)(a1 + 224) = v55;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 232) - (void)v55) >> 4) < v51)
    {
      unsigned int v56 = (char *)operator new(48 * v51);
      *(void *)(a1 + 216) = v56;
      *(void *)(a1 + 224) = v56;
      *(void *)(a1 + 232) = &v56[48 * v51];
      if (v55) {
        operator delete(v55);
      }
    }
  }
  unint64_t v104 = (char **)(a4 + 72);
  char v105 = (char **)(a4 + 24);
  uint64_t v106 = v30;
  uint64_t v114 = v4;
  unsigned int v115 = (void *)a4;
  int v57 = *(unsigned __int16 **)(a1 + 168);
  __int16 v58 = *(unsigned __int16 **)(a1 + 176);
  uint64_t v113 = a1;
  if (v57 != v58)
  {
    do
    {
      uint64_t v59 = sub_EDCFBC(v4, *v57);
      LOBYTE(__t) = *(unsigned char *)(v59 + 16);
      unsigned int v60 = *(_DWORD *)(v59 + 20);
      if (v60 == -1) {
        uint64_t v61 = 0;
      }
      else {
        uint64_t v61 = sub_EDBFB0(v4, v60);
      }
      *((void *)&__t + 1) = v61;
      long long v118 = *(_OWORD *)(v59 + 40);
      long long v119 = *(_OWORD *)(v59 + 56);
      long long v120 = *(_OWORD *)(v59 + 72);
      *(void *)&long long v121 = *(void *)(v59 + 88);
      long long v117 = *(_OWORD *)(v59 + 24);
      unsigned int v62 = *(_DWORD *)(v59 + 96);
      if (v62 == -1) {
        uint64_t v63 = 0;
      }
      else {
        uint64_t v63 = sub_EDBFB0(v4, v62);
      }
      *((void *)&v121 + 1) = v63;
      long long v123 = *(_OWORD *)(v59 + 120);
      long long v124 = *(_OWORD *)(v59 + 136);
      long long v125 = *(_OWORD *)(v59 + 152);
      *(void *)&long long v126 = *(void *)(v59 + 168);
      long long v122 = *(_OWORD *)(v59 + 104);
      sub_EB913C(a4, &__t);
      ++v57;
    }
    while (v57 != v58);
    long long v64 = *(unsigned __int16 **)(a1 + 168);
    if (v64 != *(unsigned __int16 **)(v113 + 176))
    {
      long long v65 = *(unsigned __int16 **)(v113 + 176);
      unsigned int v66 = 0;
      unint64_t v109 = (void **)(v115 + 12);
      do
      {
        unsigned __int16 v67 = *v64;
        long long v68 = (_DWORD *)sub_EDCFBC(v4, *v64);
        unsigned int v69 = v68[5];
        unsigned int v70 = v68[24];
        uint64_t v71 = v115[6];
        uint64_t v72 = v115[7];
        uint64_t v73 = v72 - v71;
        if (((unint64_t)(v72 - v71) >> 2) - 1 <= v66)
        {
          unint64_t v74 = v66 + 2;
          uint64_t v75 = v115[1];
          unint64_t v76 = (v75 - *v115) >> 2;
          if (v74 <= v76)
          {
            if (v74 < v76) {
              v115[1] = *v115 + 4 * v74;
            }
          }
          else
          {
            sub_500DC((uint64_t)v115, v74 - v76, (const float *)(v75 - 4));
            uint64_t v71 = v115[6];
            uint64_t v72 = v115[7];
            uint64_t v73 = v72 - v71;
          }
          unint64_t v77 = v73 >> 2;
          if (v74 <= v77)
          {
            if (v74 < v77) {
              v115[7] = v71 + 4 * v74;
            }
          }
          else
          {
            sub_500DC(v107, v74 - v77, (const float *)(v72 - 4));
          }
        }
        if (v69 == -1)
        {
          uint64_t v78 = 0;
          if (v70 == -1)
          {
LABEL_91:
            uint64_t v79 = 0;
            goto LABEL_92;
          }
        }
        else
        {
          uint64_t v78 = sub_EDBFB0(v114, v69);
          if (v70 == -1) {
            goto LABEL_91;
          }
        }
        uint64_t v79 = sub_EDBFB0(v114, v70);
        unsigned int v69 = v70;
LABEL_92:
        unsigned __int16 v80 = sub_EDBE88((uint64_t)v114, v69);
        sub_ECF430((uint64_t)&v132, v78, v79, (uint64_t)v68, v80);
        uint64_t v81 = (char *)v115[12];
        unint64_t v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v115[13] - (void)v81) >> 3);
        if (v82 <= v66)
        {
          unint64_t v83 = v66 + 1;
          long long __t = 0xFFFFuLL;
          *(void *)&long long v117 = 0xFFFFFFFF7FFFFFFFLL;
          if (v83 <= v82)
          {
            if (v83 < v82) {
              v115[13] = &v81[24 * v83];
            }
          }
          else
          {
            sub_EC2DFC(v109, v83 - v82, &__t);
            uint64_t v81 = (char *)*v109;
          }
        }
        long long v84 = v132;
        unint64_t v85 = &v81[24 * v66];
        *((void *)v85 + 2) = v133;
        *(_OWORD *)unint64_t v85 = v84;
        if (*(unsigned char *)(sub_EDCFBC(v114, v67) + 16) == 3)
        {
          sub_EBE5C8(v113, v114, v67, (uint64_t)v115);
        }
        else if (v70 != -1)
        {
          sub_EBE6CC(v113, v114, v70, v68[26], a3, v66, (uint64_t)v115);
        }
        ++v66;
        ++v64;
        unint64_t v4 = v114;
      }
      while (v64 != v65);
    }
  }
  unsigned __int16 v86 = (unsigned int *)v137;
  unint64_t v110 = (unsigned int *)v138;
  if (v137 != v138)
  {
    uint64_t v108 = (void **)(v115 + 12);
    do
    {
      uint64_t v87 = *v86;
      unint64_t v88 = *(unsigned int *)(*v111 + 4 * v87);
      uint64_t v89 = v115[6];
      uint64_t v90 = v115[7];
      uint64_t v91 = v90 - v89;
      if (((unint64_t)(v90 - v89) >> 2) - 1 <= v88)
      {
        unint64_t v92 = (v88 + 2);
        uint64_t v93 = v115[1];
        unint64_t v94 = (v93 - *v115) >> 2;
        if (v92 <= v94)
        {
          if (v92 < v94) {
            v115[1] = *v115 + 4 * v92;
          }
        }
        else
        {
          sub_500DC((uint64_t)v115, v92 - v94, (const float *)(v93 - 4));
          uint64_t v89 = v115[6];
          uint64_t v90 = v115[7];
          uint64_t v91 = v90 - v89;
        }
        unint64_t v95 = v91 >> 2;
        if (v92 <= v95)
        {
          if (v92 < v95) {
            v115[7] = v89 + 4 * v92;
          }
        }
        else
        {
          sub_500DC(v107, v92 - v95, (const float *)(v90 - 4));
        }
      }
      uint64_t v96 = sub_EDBFB0(v114, v87);
      unsigned __int16 v97 = sub_EDBE88((uint64_t)v114, v87);
      long long v125 = 1uLL;
      long long v126 = 0u;
      *(void *)&long long v124 = 0;
      long long v121 = 0u;
      long long v122 = 0u;
      *(void *)&long long v119 = 0;
      long long v120 = 1uLL;
      long long v117 = 0u;
      long long __t = 0xFFFFuLL;
      DWORD1(v117) = -1;
      long long v118 = 0uLL;
      *((void *)&v119 + 1) = 0x3FF0000000000000;
      *(void *)&long long v121 = 0;
      BYTE8(v121) = 0;
      WORD5(v121) = -29536;
      BYTE13(v121) = 0;
      LODWORD(v122) = -1;
      long long v123 = 0uLL;
      *((void *)&v124 + 1) = 0x3FF0000000000000;
      *(void *)&long long v126 = 0;
      BYTE8(v126) = 0;
      WORD5(v126) = -29536;
      BYTE13(v126) = 0;
      sub_ECF430((uint64_t)&v127, v96, v96, (uint64_t)&__t, v97);
      unint64_t v4 = v114;
      unint64_t v98 = (char *)v115[12];
      unint64_t v99 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v115[13] - (void)v98) >> 3);
      if (v99 <= v88)
      {
        unint64_t v100 = (v88 + 1);
        long long v132 = 0xFFFFuLL;
        unint64_t v133 = (char *)0xFFFFFFFF7FFFFFFFLL;
        if (v100 <= v99)
        {
          if (v100 < v99) {
            v115[13] = &v98[24 * v100];
          }
        }
        else
        {
          sub_EC2DFC(v108, v100 - v99, &v132);
          unint64_t v98 = (char *)*v108;
        }
      }
      long long v101 = v127;
      unint64_t v102 = &v98[24 * v88];
      *((void *)v102 + 2) = v128;
      *(_OWORD *)unint64_t v102 = v101;
      sub_EBE6CC(v113, v114, v87, 0, a3, v88, (uint64_t)v115);
      ++v86;
    }
    while (v86 != v110);
  }
  if (*(unsigned char *)(v113 + 33)) {
    sub_EB937C((uint64_t)v115);
  }
  if (*(unsigned char *)(v113 + 32)) {
    sub_EBE928(v113, v115, v52);
  }
  if (*(unsigned char *)(v113 + 34))
  {
    *(std::chrono::system_clock::time_point *)&long long __t = std::chrono::system_clock::now();
    std::chrono::system_clock::to_time_t((const std::chrono::system_clock::time_point *)&__t);
    *(void *)&long long v132 = *(void *)v113;
    DWORD2(v132) = *(_DWORD *)(v113 + 8);
    BYTE12(v132) = *(unsigned char *)(v113 + 12);
    char v103 = *(unsigned char *)(v113 + 32);
    if (v103) {
      char v103 = *(unsigned char *)(v113 + 35) != 0;
    }
    BYTE13(v132) = v103;
    sub_ECF4A4((uint64_t)&__t, &v132, *(void ***)(v113 + 40));
    sub_ED0E9C((uint64_t)&__t, (uint64_t)v4, a3, *(void *)(v113 + 24), (uint64_t)v115);
  }
  sub_EBF034((uint64_t)v115);
  sub_EBF034(v107);
  sub_EC2FB0(v105);
  sub_EC2FB0(v104);
  if (v106) {
    operator delete(v106);
  }
  if (v137)
  {
    unint64_t v138 = v137;
    operator delete(v137);
  }
}

void sub_EBE21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  long long v22 = *(void **)(v20 - 128);
  if (!v22) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(v20 - 120) = v22;
  operator delete(v22);
  _Unwind_Resume(exception_object);
}

void sub_EBE310(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = sub_EDD010(a2);
  uint64_t v6 = *(int16x8_t **)(a1 + 168);
  size_t v5 = *(int16x8_t **)(a1 + 176);
  unint64_t v7 = ((char *)v5 - (char *)v6) >> 1;
  if (v4 <= v7)
  {
    if (v4 < v7)
    {
      size_t v5 = (int16x8_t *)((char *)v6 + 2 * v4);
      *(void *)(a1 + 176) = v5;
    }
  }
  else
  {
    sub_EBF29C(a1 + 168, v4 - v7);
    uint64_t v6 = *(int16x8_t **)(a1 + 168);
    size_t v5 = *(int16x8_t **)(a1 + 176);
  }
  if (v6 != v5)
  {
    unint64_t v8 = (char *)v5 - (char *)v6 - 2;
    if (v8 < 0x1E)
    {
      LODWORD(v9) = 0;
      unsigned int v10 = v6;
      do
      {
LABEL_11:
        v10->i16[0] = v9;
        unsigned int v10 = (int16x8_t *)((char *)v10 + 2);
        LODWORD(v9) = v9 + 1;
      }
      while (v10 != v5);
      goto LABEL_12;
    }
    uint64_t v11 = (v8 >> 1) + 1;
    unint64_t v9 = v11 & 0xFFFFFFFFFFFFFFF0;
    unsigned int v10 = (int16x8_t *)((char *)v6 + 2 * (v11 & 0xFFFFFFFFFFFFFFF0));
    int16x8_t v12 = (int16x8_t)xmmword_20F0F20;
    uint64_t v13 = v6 + 1;
    v14.i64[0] = 0x8000800080008;
    v14.i64[1] = 0x8000800080008;
    v15.i64[0] = 0x10001000100010;
    v15.i64[1] = 0x10001000100010;
    unint64_t v16 = v11 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v13[-1] = v12;
      *uint64_t v13 = vaddq_s16(v12, v14);
      int16x8_t v12 = vaddq_s16(v12, v15);
      v13 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v11 != v9) {
      goto LABEL_11;
    }
  }
LABEL_12:
  unint64_t v17 = sub_EDD010(a2);
  uint64_t v19 = *(int16x8_t **)(a1 + 144);
  unint64_t v18 = *(int16x8_t **)(a1 + 152);
  unint64_t v20 = ((char *)v18 - (char *)v19) >> 1;
  if (v17 <= v20)
  {
    if (v17 < v20)
    {
      unint64_t v18 = (int16x8_t *)((char *)v19 + 2 * v17);
      *(void *)(a1 + 152) = v18;
    }
  }
  else
  {
    sub_EBF29C(a1 + 144, v17 - v20);
    uint64_t v19 = *(int16x8_t **)(a1 + 144);
    unint64_t v18 = *(int16x8_t **)(a1 + 152);
  }
  if (v19 != v18)
  {
    unint64_t v21 = (char *)v18 - (char *)v19 - 2;
    if (v21 < 0x1E)
    {
      LODWORD(v22) = 0;
      uint64_t v23 = v19;
      do
      {
LABEL_22:
        v23->i16[0] = v22;
        uint64_t v23 = (int16x8_t *)((char *)v23 + 2);
        LODWORD(v22) = v22 + 1;
      }
      while (v23 != v18);
      goto LABEL_23;
    }
    uint64_t v24 = (v21 >> 1) + 1;
    unint64_t v22 = v24 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v23 = (int16x8_t *)((char *)v19 + 2 * (v24 & 0xFFFFFFFFFFFFFFF0));
    int16x8_t v25 = (int16x8_t)xmmword_20F0F20;
    long long v26 = v19 + 1;
    v27.i64[0] = 0x8000800080008;
    v27.i64[1] = 0x8000800080008;
    v28.i64[0] = 0x10001000100010;
    v28.i64[1] = 0x10001000100010;
    unint64_t v29 = v24 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v26[-1] = v25;
      *long long v26 = vaddq_s16(v25, v27);
      int16x8_t v25 = vaddq_s16(v25, v28);
      v26 += 2;
      v29 -= 16;
    }
    while (v29);
    if (v24 != v22) {
      goto LABEL_22;
    }
  }
LABEL_23:
  if (*(unsigned char *)(a1 + 33))
  {
    uint64_t v30 = *(void *)(a1 + 168);
    unsigned int v31 = *(unsigned __int16 **)(a1 + 176);
    unint64_t v32 = 126 - 2 * __clz(((uint64_t)v31 - v30) >> 1);
    int v40 = a2;
    if (v31 == (unsigned __int16 *)v30) {
      uint64_t v33 = 0;
    }
    else {
      uint64_t v33 = v32;
    }
    sub_EC60A4(v30, v31, &v40, v33, 1);
    uint64_t v34 = *(void *)(a1 + 144);
    uint64_t v35 = *(void *)(a1 + 152);
    uint64_t v36 = v35 - v34;
    if (v35 != v34)
    {
      uint64_t v37 = 0;
      uint64_t v38 = v36 >> 1;
      uint64_t v39 = *(void *)(a1 + 168);
      do
      {
        *(_WORD *)(v34 + 2 * *(unsigned __int16 *)(v39 + 2 * v37)) = v37;
        ++v37;
      }
      while (v38 != v37);
    }
  }
}

void sub_EBE518(char *a1@<X0>, uint64_t a2@<X8>)
{
  sub_EDCB80(a1, (uint64_t)&v9);
  sub_EDCDC0(a1, (uint64_t)&v4);
  sub_EBEF20(a2, &v9);
  sub_EBEF20(a2 + 64, &v4);
  if (__p)
  {
    unint64_t v8 = __p;
    operator delete(__p);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
}

void sub_EBE5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2FC938((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_EBE5C8(uint64_t a1, void *a2, unsigned __int16 a3, uint64_t a4)
{
  uint64_t v7 = a3;
  uint64_t v8 = sub_EDCFBC(a2, a3);
  sub_EDBFB0(a2, *(_DWORD *)(v8 + 20));
  uint64_t result = sub_EDC250((uint64_t)a2, v7, &v24);
  unsigned int v10 = v24;
  for (uint64_t i = v25; v10 != i; result = sub_EBBBFC(a4, v15, &v18))
  {
    unsigned int v12 = *v10++;
    uint64_t v13 = sub_EDCFBC(a2, v12);
    sub_EDBFB0(a2, *(_DWORD *)(v13 + 96));
    uint64_t v14 = *(void *)(a1 + 144);
    unsigned int v15 = *(unsigned __int16 *)(v14 + 2 * v7);
    int v16 = *(_DWORD *)(v8 + 20);
    int v17 = *(_DWORD *)(v13 + 96);
    int v18 = *(unsigned __int16 *)(v14 + 2 * v12);
    long long v19 = xmmword_20F0E10;
    unint64_t v20 = 0x8000000080000000;
    int v21 = v16;
    int v22 = v17;
    uint64_t v23 = 0;
  }
  return result;
}

void sub_EBE6CC(uint64_t a1, void *a2, unsigned int a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  unsigned int v30 = 0;
  if (sub_EB9330(a7, a6)) {
    sub_EB935C(a7, a6);
  }
  sub_EBEC74(a1, a2, a3, a3, a4, a6, 0, a5, (int *)&v30, a7);
  sub_EDBDF0(a2, a3, (uint64_t)&v23);
  sub_EDBEC4(a2, a3, (uint64_t)v31);
  uint64_t v14 = DWORD2(v24);
  uint64_t v22 = v32;
  if (DWORD2(v24) != (unint64_t)v32)
  {
    unint64_t v20 = (void *)v24;
    int v21 = v23;
    do
    {
      unsigned int v15 = (unsigned int *)(*v21 + 104 * v14);
      unsigned int v29 = v30;
      sub_ECEF84(&v29, (uint64_t)v15, 1000000000 - a4, a5, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 12), *(void ***)(a1 + 40));
      uint64_t v16 = *v15;
      unsigned int v17 = *(_DWORD *)(*(void *)(a1 + 120) + 4 * v16);
      if (v17 == -1)
      {
        while (1)
        {
          sub_EBEC74(a1, a2, a3, v16, 0, a6, (uint64_t)v15, a5, (int *)&v29, a7);
          if (v16 == a3) {
            break;
          }
          sub_EDBDF0(a2, v16, (uint64_t)&v23);
          sub_EDBEC4(a2, v16, (uint64_t)v31);
          if (DWORD2(v24) == v32) {
            break;
          }
          int v18 = (unsigned int *)(*v23 + 104 * DWORD2(v24));
          sub_ECEF84(&v29, (uint64_t)v18, 1000000000, a5, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 12), *(void ***)(a1 + 40));
          uint64_t v16 = *v18;
          unsigned int v17 = *(_DWORD *)(*(void *)(a1 + 120) + 4 * v16);
          if (v17 != -1) {
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        if (v17 != a6)
        {
          uint64_t v23 = (void *)__PAIR64__(v29, v17);
          long long v24 = xmmword_20EC810;
          int v25 = 0x7FFFFFFF;
          unsigned int v26 = a3;
          int v27 = v16;
          int16x8_t v28 = v15;
          sub_EBBBFC(a7, a6, &v23);
        }
      }
      uint64_t v14 = *(unsigned int *)(*v20 + 4 * v14);
    }
    while (v14 != v22);
  }
}

void sub_EBE928(uint64_t a1, void *a2, __n128 a3)
{
  uint64_t v3 = a2;
  unint64_t v5 = a2[7] - a2[6];
  unsigned int v48 = 0;
  uint64_t v49 = 0;
  std::string __p = 0;
  if ((v5 >> 2) == 1)
  {
    uint64_t v7 = 0;
    unint64_t v42 = ((v5 << 30) - 0x100000000) >> 32;
    if (v42) {
      goto LABEL_11;
    }
  }
  else
  {
    size_t v6 = 4 * ((v5 >> 2) - 1);
    uint64_t v7 = (char *)operator new(v6);
    std::string __p = v7;
    uint64_t v49 = &v7[v6];
    bzero(v7, v6);
    unsigned int v48 = &v7[v6];
    unint64_t v42 = ((v5 << 30) - 0x100000000) >> 32;
    if (v42)
    {
LABEL_11:
      uint64_t v15 = 0;
      int v44 = (void **)(a1 + 192);
      unsigned int v41 = v3;
      while (1)
      {
        sub_EC30D4((uint64_t)v3, v15);
        uint64_t v16 = v3[9];
        unsigned int v17 = *(_DWORD *)(v3[6] + 4 * v15);
        sub_EC30D4((uint64_t)v3, v15);
        int v18 = (_OWORD *)(v16 + 48 * v17);
        uint64_t v43 = v15 + 1;
        uint64_t v46 = v3[9] + 48 * *(unsigned int *)(v3[6] + 4 * (v15 + 1));
        if (v18 != (_OWORD *)v46) {
          break;
        }
LABEL_12:
        uint64_t v15 = v43;
        uint64_t v3 = v41;
        if (v43 == v42) {
          goto LABEL_5;
        }
      }
      int v45 = v15;
      while (1)
      {
        int v19 = *(_DWORD *)v18;
        int v21 = *(char **)(a1 + 200);
        unint64_t v20 = *(void *)(a1 + 208);
        if ((unint64_t)v21 >= v20) {
          break;
        }
        *(_DWORD *)int v21 = v19;
        uint64_t v22 = (uint64_t)(v21 + 4);
LABEL_36:
        *(void *)(a1 + 200) = v22;
        sub_652DE4((char **)(a1 + 216), v18);
        *(_DWORD *)(*(void *)(a1 + 224) - 48) = v45;
        int v40 = *(_DWORD *)v18;
        v18 += 3;
        ++*(_DWORD *)&v7[4 * v40];
        if (v18 == (_OWORD *)v46) {
          goto LABEL_12;
        }
      }
      uint64_t v23 = (char *)*v44;
      uint64_t v24 = v21 - (unsigned char *)*v44;
      uint64_t v25 = v24 >> 2;
      unint64_t v26 = (v24 >> 2) + 1;
      if (v26 >> 62) {
        sub_2E00();
      }
      uint64_t v27 = v20 - (void)v23;
      if (v27 >> 1 > v26) {
        unint64_t v26 = v27 >> 1;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        if (v28 >> 62) {
          sub_188D718();
        }
        unsigned int v29 = operator new(4 * v28);
        unsigned int v30 = &v29[4 * v25];
        *unsigned int v30 = v19;
        uint64_t v22 = (uint64_t)(v30 + 1);
        if (v21 == v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unsigned int v29 = 0;
        unsigned int v30 = (_DWORD *)(4 * v25);
        *(_DWORD *)(4 * v25) = v19;
        uint64_t v22 = 4 * v25 + 4;
        if (v21 == v23)
        {
LABEL_34:
          *(void *)(a1 + 192) = v30;
          *(void *)(a1 + 200) = v22;
          *(void *)(a1 + 208) = &v29[4 * v28];
          if (v23) {
            operator delete(v23);
          }
          goto LABEL_36;
        }
      }
      unint64_t v31 = v21 - 4 - v23;
      if (v31 < 0x2C) {
        goto LABEL_42;
      }
      if ((unint64_t)(v21 - &v29[v24]) < 0x20) {
        goto LABEL_42;
      }
      uint64_t v32 = (v31 >> 2) + 1;
      uint64_t v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v34 = &v21[-v33];
      unsigned int v30 = (_DWORD *)((char *)v30 - v33);
      uint64_t v35 = &v29[4 * v25 - 16];
      uint64_t v36 = v21 - 16;
      uint64_t v37 = v32 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v38 = *(_OWORD *)v36;
        *(v35 - 1) = *((_OWORD *)v36 - 1);
        *uint64_t v35 = v38;
        v35 -= 2;
        v36 -= 32;
        v37 -= 8;
      }
      while (v37);
      int v21 = v34;
      if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_42:
        do
        {
          int v39 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *--unsigned int v30 = v39;
        }
        while (v21 != v23);
      }
      goto LABEL_34;
    }
  }
LABEL_5:
  unsigned int v10 = *(long long **)(a1 + 216);
  uint64_t v9 = a1 + 216;
  uint64_t v8 = v10;
  uint64_t v11 = *(unsigned int **)(v9 - 24);
  unsigned int v12 = *(char **)(v9 - 16);
  unint64_t v13 = 126 - 2 * __clz((v12 - (char *)v11) >> 2);
  if (v12 == (char *)v11) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13;
  }
  sub_EC7348(v11, v8, v12, *(long long **)(v9 + 8), (uint64_t)&v50, v14, 1, a3);
  sub_EBBD64(v3, (int **)&__p, v9);
  if (__p)
  {
    unsigned int v48 = (char *)__p;
    operator delete(__p);
  }
}

void sub_EBEC44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_EBEC74(uint64_t a1, void *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, int *a9, uint64_t a10)
{
  if (sub_EDC000(a2, a4))
  {
    uint64_t v15 = sub_3750CC(**(void ***)(a1 + 40));
    unint64_t v16 = sub_EDBFB0(a2, a4);
    unint64_t v17 = HIDWORD(v16);
    unint64_t v18 = HIDWORD(v16) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v16) << 32);
    unint64_t v31 = (HIDWORD(v16) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v16) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v16 >> 1) & 1) << 48)) ^ 0x1000000000000;
    uint64_t v30 = sub_2D5D58(v15, v18);
    if (*(unsigned char *)(v15 + 7772))
    {
      int v19 = sub_2DB8E0(v15 + 3896, v17, 0);
      unint64_t v20 = &v19[-*(int *)v19];
      if (*(unsigned __int16 *)v20 < 5u)
      {
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v21 = *((unsigned __int16 *)v20 + 2);
        if (v21) {
          v21 += (uint64_t)&v19[*(unsigned int *)&v19[v21]];
        }
      }
      uint64_t v22 = v21 + 4 * WORD2(v31) + 4 + *(unsigned int *)(v21 + 4 * WORD2(v31) + 4);
    }
    else
    {
      uint64_t v22 = 0;
    }
    v46[0] = v30;
    v46[1] = v22;
    v46[2] = sub_2E5C38(v15, v18, 1);
    v46[3] = v23;
    int v47 = v17;
    __int16 v48 = WORD2(v31);
    char v49 = BYTE6(v31);
    sub_EDC10C(a2, a4, (uint64_t)v44);
    sub_EDD078(a2, a4, (uint64_t)__p);
    uint64_t v24 = (unsigned __int16 *)v44[0];
    uint64_t v25 = v45;
    unint64_t v26 = (unsigned __int16 *)__p[0];
    if ((unsigned __int16 *)v44[0] != v45)
    {
      uint64_t v27 = (void *)v44[1];
      do
      {
        unsigned int v28 = *(unsigned __int16 *)(*(void *)(a1 + 144) + 2 * *v26);
        if (a6 != v28 && *(_DWORD *)(*v27 + 176 * *v24 + 20) == a4)
        {
          unsigned int v29 = *(_DWORD *)(*v27 + 176 * *v24 + 24);
          if (v29 >= a5)
          {
            int v42 = *a9;
            sub_ECEF04(&v42, (uint64_t)v46, v29 - a5, a8, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 12), *(void ***)(a1 + 40));
            sub_EB935C(a10, v28);
            v36[0] = v28;
            v36[1] = v42;
            long long v37 = xmmword_20EC810;
            int v38 = 0x7FFFFFFF;
            int v39 = a3;
            unsigned int v40 = a4;
            uint64_t v41 = a7;
            sub_EBBBFC(a10, a6, v36);
          }
        }
        ++v24;
        ++v26;
      }
      while (v24 != v25);
      unint64_t v26 = (unsigned __int16 *)__p[0];
    }
    if (v26)
    {
      __p[1] = v26;
      operator delete(v26);
    }
  }
}

void sub_EBEEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EBEF20(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  size_t v6 = (unsigned char *)*((void *)a2 + 2);
  unint64_t v5 = (unsigned char *)*((void *)a2 + 3);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    *(void *)(a1 + 32) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 24) = v9;
  }
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v11 = (unsigned char *)*((void *)a2 + 5);
  unsigned int v10 = (unsigned char *)*((void *)a2 + 6);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2E00();
    }
    unint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v13;
    uint64_t v14 = &v13[8 * (v12 >> 3)];
    *(void *)(a1 + 56) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_EBF000(_Unwind_Exception *exception_object)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  size_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_EBF034(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 8);
  uint64_t v2 = *(unsigned char **)a1;
  uint64_t v3 = (uint64_t)&v1[-*(void *)a1];
  uint64_t v4 = v3 >> 2;
  if (v3 >> 2 >= (unint64_t)((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 2)) {
    return;
  }
  int64_t v6 = v1 - v2;
  if (v1 == v2)
  {
    uint64_t v8 = 4 * v4;
    uint64_t v9 = 4 * v4;
    goto LABEL_12;
  }
  if (v3 < 0) {
    sub_188D718();
  }
  int64_t v7 = (char *)operator new((size_t)&v1[-*(void *)a1]);
  uint64_t v8 = (uint64_t)&v7[4 * v4];
  if ((unint64_t)(v6 - 4) < 0x2C)
  {
    uint64_t v9 = (uint64_t)&v7[4 * v4];
    do
    {
LABEL_11:
      int v17 = *((_DWORD *)v1 - 1);
      v1 -= 4;
      *(_DWORD *)(v9 - 4) = v17;
      v9 -= 4;
    }
    while (v1 != v2);
    goto LABEL_12;
  }
  uint64_t v9 = (uint64_t)&v7[4 * v4];
  if ((unint64_t)(&v1[-v3] - v7) < 0x20) {
    goto LABEL_11;
  }
  unint64_t v10 = ((unint64_t)(v6 - 4) >> 2) + 1;
  uint64_t v11 = 4 * (v10 & 0x7FFFFFFFFFFFFFF8);
  int64_t v12 = &v1[-v11];
  uint64_t v9 = v8 - v11;
  unint64_t v13 = &v7[4 * v4 - 16];
  uint64_t v14 = (long long *)(v1 - 16);
  uint64_t v15 = v10 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v16 = *v14;
    *((_OWORD *)v13 - 1) = *(v14 - 1);
    *(_OWORD *)unint64_t v13 = v16;
    v13 -= 32;
    v14 -= 2;
    v15 -= 8;
  }
  while (v15);
  uint64_t v1 = v12;
  if (v10 != (v10 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_11;
  }
LABEL_12:
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v8;
  if (v2)
  {
    operator delete(v2);
  }
}

void sub_EBF170(char **a1)
{
  uint64_t v1 = *a1;
  int64x2_t v2 = *(int64x2_t *)(a1 + 1);
  int64x2_t v3 = vsubq_s64(v2, vdupq_n_s64((unint64_t)*a1));
  int64x2_t v4 = vshrq_n_s64(v3, 4uLL);
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * v4.i64[0];
  if (0xCCCCCCCCCCCCCCCDLL * v4.i64[1] <= v5) {
    return;
  }
  int64_t v7 = a1[1];
  if ((char *)v2.i64[0] == v1)
  {
    *a1 = (char *)(80 * v5);
    a1[1] = (char *)(80 * v5);
    a1[2] = (char *)(80 * v5);
    if (!v1) {
      return;
    }
    goto LABEL_9;
  }
  if (v5 >= 0x333333333333334) {
    sub_188D718();
  }
  uint64_t v8 = (char *)operator new(v3.u64[0]) + 80 * v5;
  uint64_t v9 = v8;
  do
  {
    *((_OWORD *)v9 - 5) = *((_OWORD *)v7 - 5);
    long long v10 = *((_OWORD *)v7 - 4);
    long long v11 = *((_OWORD *)v7 - 3);
    long long v12 = *((_OWORD *)v7 - 1);
    *((_OWORD *)v9 - 2) = *((_OWORD *)v7 - 2);
    *((_OWORD *)v9 - 1) = v12;
    *((_OWORD *)v9 - 4) = v10;
    *((_OWORD *)v9 - 3) = v11;
    v9 -= 80;
    v7 -= 80;
  }
  while (v7 != v1);
  uint64_t v1 = *a1;
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v8;
  if (v1)
  {
LABEL_9:
    operator delete(v1);
  }
}

void sub_EBF29C(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      memset(v5, 255, 2 * a2);
      int64_t v6 = &v5[2 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    int64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = (v8 >> 1) + a2;
    if (v10 < 0) {
      sub_2E00();
    }
    unint64_t v11 = v4 - (void)v7;
    if (v11 > v10) {
      uint64_t v10 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 < 0) {
        sub_188D718();
      }
      unint64_t v13 = operator new(2 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    uint64_t v14 = &v13[2 * v9];
    size_t v15 = 2 * a2;
    long long v16 = &v13[2 * v12];
    memset(v14, 255, v15);
    int v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 2;
      if (v18 < 0x1E) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - &v13[v8]) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 1) + 1;
      unint64_t v20 = 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      int64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[2 * v9 - 16];
      uint64_t v22 = v5 - 16;
      unint64_t v23 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *uint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_31:
        do
        {
          __int16 v25 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v25;
          v14 -= 2;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t sub_EBF448(uint64_t result, unsigned __int16 *a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v10 = (unsigned __int16 *)result;
LABEL_2:
  unint64_t v11 = a2 - 1;
  uint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  int v44 = a5;
  while (1)
  {
    uint64_t v10 = v12;
    uint64_t v14 = (char *)a2 - (char *)v12;
    unint64_t v15 = v14 >> 1;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unsigned __int16 v27 = *v10;
          unsigned int v28 = (unsigned __int8 *)sub_EE0610(*a3, *(a2 - 1));
          uint64_t result = sub_EE0610(*a3, v27);
          if (*v28 < *(unsigned __int8 *)result)
          {
            unsigned __int16 v29 = *v10;
            *uint64_t v10 = *(a2 - 1);
            *(a2 - 1) = v29;
          }
          break;
        case 3uLL:
          uint64_t result = sub_EBF9F4(v10, v10 + 1, v11, a3);
          break;
        case 4uLL:
          uint64_t result = (uint64_t)sub_EC0114(v10, v10 + 1, v10 + 2, v11, a3);
          break;
        case 5uLL:
          uint64_t result = (uint64_t)sub_EC0224(v10, v10 + 1, v10 + 2, v10 + 3, v11, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 47) {
      break;
    }
    uint64_t v16 = v13;
    if (v13 == 1)
    {
      if (v10 != a2)
      {
        unint64_t v30 = (v15 - 2) >> 1;
        unint64_t v31 = v30 + 1;
        uint64_t v32 = &v10[v30];
        do
        {
          sub_EC0378((char *)v10, a3, v14 >> 1, v32--);
          --v31;
        }
        while (v31);
        unint64_t v33 = (unint64_t)v14 >> 1;
        do
          uint64_t result = (uint64_t)sub_EC0534(v10, (uint64_t)a2--, a3, v33);
        while (v33-- > 2);
      }
      return result;
    }
    unint64_t v17 = v15 >> 1;
    unint64_t v18 = &v10[v15 >> 1];
    if ((unint64_t)v14 < 0x101)
    {
      sub_EBF9F4(v18, v10, v11, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_EBF9F4(v10, v18, v11, a3);
      uint64_t v19 = v11;
      unint64_t v20 = &v10[v17];
      sub_EBF9F4(v10 + 1, v20 - 1, a2 - 2, a3);
      sub_EBF9F4(v10 + 2, &v10[v17 + 1], a2 - 3, a3);
      sub_EBF9F4(v20 - 1, v18, &v10[v17 + 1], a3);
      unsigned __int16 v21 = *v10;
      *uint64_t v10 = *v20;
      *unint64_t v20 = v21;
      unint64_t v11 = v19;
      a5 = v44;
      if (v44) {
        goto LABEL_13;
      }
    }
    unsigned __int16 v22 = *v10;
    unint64_t v23 = (unsigned __int8 *)sub_EE0610(*a3, *(v10 - 1));
    if (*v23 >= *(unsigned __int8 *)sub_EE0610(*a3, v22))
    {
      uint64_t result = (uint64_t)sub_EBFB8C(v10, a2, a3);
      uint64_t v12 = (unsigned __int16 *)result;
      goto LABEL_18;
    }
LABEL_13:
    long long v24 = sub_EBFD4C(v10, a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v26 = sub_EBFEE0(v10, v24, a3);
    uint64_t v12 = v24 + 1;
    uint64_t result = sub_EBFEE0(v24 + 1, a2, a3);
    if (result)
    {
      a4 = -v16;
      a2 = v24;
      if (v26) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v16 + 1;
    if (!v26)
    {
LABEL_16:
      uint64_t result = sub_EBF448(v10, v24, a3, -v16, a5 & 1);
      uint64_t v12 = v24 + 1;
LABEL_18:
      a5 = 0;
      a4 = -v16;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)sub_EBF8E4(v10, a2, a3);
  }
  else if (v10 != a2)
  {
    while (v10 + 1 != a2)
    {
      unsigned __int16 v35 = v10[1];
      unsigned __int16 v36 = *v10++;
      long long v37 = (unsigned __int8 *)sub_EE0610(*a3, v35);
      uint64_t result = sub_EE0610(*a3, v36);
      if (*v37 < *(unsigned __int8 *)result)
      {
        unsigned __int16 v38 = *v10;
        int v39 = v10;
        do
        {
          unsigned int v40 = v39;
          unsigned __int16 v41 = *--v39;
          *unsigned int v40 = v41;
          unsigned __int16 v42 = *(v40 - 2);
          uint64_t v43 = (unsigned __int8 *)sub_EE0610(*a3, v38);
          uint64_t result = sub_EE0610(*a3, v42);
        }
        while (*v43 < *(unsigned __int8 *)result);
        *int v39 = v38;
      }
    }
  }
  return result;
}

unsigned __int16 *sub_EBF8E4(unsigned __int16 *result, unsigned __int16 *a2, uint64_t *a3)
{
  if (result != a2)
  {
    uint64_t v4 = result;
    char v5 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = result;
      do
      {
        unsigned __int16 v10 = v8[1];
        unsigned __int16 v11 = *v8;
        uint64_t v8 = v5;
        uint64_t v12 = (unsigned __int8 *)sub_EE0610(*a3, v10);
        uint64_t result = (unsigned __int16 *)sub_EE0610(*a3, v11);
        if (*v12 < *(unsigned __int8 *)result)
        {
          unsigned __int16 v13 = *v8;
          uint64_t v14 = v7;
          do
          {
            *(unsigned __int16 *)((char *)v4 + v14 + 2) = *(unsigned __int16 *)((char *)v4 + v14);
            if (!v14)
            {
              uint64_t v9 = v4;
              goto LABEL_5;
            }
            unsigned __int16 v15 = *(unsigned __int16 *)((char *)v4 + v14 - 2);
            uint64_t v16 = (unsigned __int8 *)sub_EE0610(*a3, v13);
            uint64_t result = (unsigned __int16 *)sub_EE0610(*a3, v15);
            v14 -= 2;
          }
          while (*v16 < *(unsigned __int8 *)result);
          uint64_t v9 = (unsigned __int16 *)((char *)v4 + v14 + 2);
LABEL_5:
          *uint64_t v9 = v13;
        }
        char v5 = v8 + 1;
        v7 += 2;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_EBF9F4(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t *a4)
{
  unsigned __int16 v8 = *a1;
  uint64_t v9 = (unsigned __int8 *)sub_EE0610(*a4, *a2);
  unsigned __int16 v10 = (unsigned __int8 *)sub_EE0610(*a4, v8);
  unsigned int v11 = *v9;
  unsigned int v12 = *v10;
  unsigned __int16 v13 = *a2;
  uint64_t v14 = (unsigned __int8 *)sub_EE0610(*a4, *a3);
  unsigned __int16 v15 = (unsigned __int8 *)sub_EE0610(*a4, v13);
  unsigned int v16 = *v14;
  unsigned int v17 = *v15;
  if (v11 < v12)
  {
    unsigned __int16 v18 = *a1;
    if (v16 < v17)
    {
      *a1 = *a3;
      *a3 = v18;
      return 1;
    }
    *a1 = *a2;
    *a2 = v18;
    unint64_t v23 = (unsigned __int8 *)sub_EE0610(*a4, *a3);
    if (*v23 >= *(unsigned __int8 *)sub_EE0610(*a4, v18)) {
      return 1;
    }
    unsigned __int16 v24 = *a2;
    *a2 = *a3;
    *a3 = v24;
    return 2;
  }
  if (v16 < v17)
  {
    unsigned __int16 v19 = *a2;
    *a2 = *a3;
    *a3 = v19;
    unsigned __int16 v20 = *a1;
    unsigned __int16 v21 = (unsigned __int8 *)sub_EE0610(*a4, *a2);
    if (*v21 >= *(unsigned __int8 *)sub_EE0610(*a4, v20)) {
      return 1;
    }
    unsigned __int16 v22 = *a1;
    *a1 = *a2;
    *a2 = v22;
    return 2;
  }
  return 0;
}

unsigned __int16 *sub_EBFB8C(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  unsigned __int16 v6 = *a1;
  unsigned __int16 v7 = *(a2 - 1);
  unsigned __int16 v8 = (unsigned __int8 *)sub_EE0610(*a3, *a1);
  if (*v8 >= *(unsigned __int8 *)sub_EE0610(*a3, v7))
  {
    unsigned int v12 = a1 + 1;
    do
    {
      uint64_t v9 = v12;
      if (v12 >= v4) {
        break;
      }
      ++v12;
      unsigned __int16 v13 = *v9;
      uint64_t v14 = (unsigned __int8 *)sub_EE0610(*a3, v6);
    }
    while (*v14 >= *(unsigned __int8 *)sub_EE0610(*a3, v13));
  }
  else
  {
    uint64_t v9 = a1;
    do
    {
      unsigned __int16 v10 = v9[1];
      ++v9;
      unsigned int v11 = (unsigned __int8 *)sub_EE0610(*a3, v6);
    }
    while (*v11 >= *(unsigned __int8 *)sub_EE0610(*a3, v10));
  }
  if (v9 < v4)
  {
    do
    {
      unsigned __int16 v15 = *--v4;
      unsigned int v16 = (unsigned __int8 *)sub_EE0610(*a3, v6);
    }
    while (*v16 < *(unsigned __int8 *)sub_EE0610(*a3, v15));
  }
  while (v9 < v4)
  {
    unsigned __int16 v17 = *v9;
    *uint64_t v9 = *v4;
    unsigned __int16 *v4 = v17;
    do
    {
      unsigned __int16 v18 = v9[1];
      ++v9;
      unsigned __int16 v19 = (unsigned __int8 *)sub_EE0610(*a3, v6);
    }
    while (*v19 >= *(unsigned __int8 *)sub_EE0610(*a3, v18));
    do
    {
      unsigned __int16 v20 = *--v4;
      unsigned __int16 v21 = (unsigned __int8 *)sub_EE0610(*a3, v6);
    }
    while (*v21 < *(unsigned __int8 *)sub_EE0610(*a3, v20));
  }
  if (v9 - 1 != a1) {
    *a1 = *(v9 - 1);
  }
  *(v9 - 1) = v6;
  return v9;
}

unsigned __int16 *sub_EBFD4C(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t *a3)
{
  uint64_t v6 = 0;
  unsigned __int16 v7 = *a1;
  do
    unsigned __int16 v8 = (unsigned __int8 *)sub_EE0610(*a3, a1[++v6]);
  while (*v8 < *(unsigned __int8 *)sub_EE0610(*a3, v7));
  uint64_t v9 = &a1[v6];
  unsigned __int16 v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      unsigned __int16 v13 = *--a2;
      uint64_t v14 = (unsigned __int8 *)sub_EE0610(*a3, v13);
    }
    while (*v14 >= *(unsigned __int8 *)sub_EE0610(*a3, v7));
  }
  else
  {
    do
    {
      unsigned __int16 v11 = *--a2;
      unsigned int v12 = (unsigned __int8 *)sub_EE0610(*a3, v11);
    }
    while (*v12 >= *(unsigned __int8 *)sub_EE0610(*a3, v7));
  }
  if (v9 < a2)
  {
    unsigned __int16 v15 = v9;
    unsigned int v16 = a2;
    do
    {
      unsigned __int16 v17 = *v15;
      *unsigned __int16 v15 = *v16;
      *unsigned int v16 = v17;
      do
      {
        unsigned __int16 v18 = v15[1];
        ++v15;
        unsigned __int16 v19 = (unsigned __int8 *)sub_EE0610(*a3, v18);
      }
      while (*v19 < *(unsigned __int8 *)sub_EE0610(*a3, v7));
      do
      {
        unsigned __int16 v20 = *--v16;
        unsigned __int16 v21 = (unsigned __int8 *)sub_EE0610(*a3, v20);
      }
      while (*v21 >= *(unsigned __int8 *)sub_EE0610(*a3, v7));
    }
    while (v15 < v16);
    unsigned __int16 v10 = v15 - 1;
  }
  if (v10 != a1) {
    *a1 = *v10;
  }
  *unsigned __int16 v10 = v7;
  return v10;
}

BOOL sub_EBFEE0(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned __int16 v8 = *a1;
      uint64_t v9 = (unsigned __int8 *)sub_EE0610(*a3, *(a2 - 1));
      if (*v9 < *(unsigned __int8 *)sub_EE0610(*a3, v8))
      {
        unsigned __int16 v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_EBF9F4(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_EC0114(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_EC0224(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      unsigned __int16 v11 = a1 + 2;
      sub_EBF9F4(a1, a1 + 1, a1 + 2, a3);
      unsigned int v12 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unsigned __int16 v15 = *v11;
    unsigned int v16 = (unsigned __int8 *)sub_EE0610(*a3, *v12);
    if (*v16 < *(unsigned __int8 *)sub_EE0610(*a3, v15)) {
      break;
    }
LABEL_13:
    unsigned __int16 v11 = v12;
    v13 += 2;
    if (++v12 == a2) {
      return 1;
    }
  }
  unsigned __int16 v17 = *v12;
  uint64_t v18 = v13;
  do
  {
    *(unsigned __int16 *)((char *)a1 + v18 + 6) = *(unsigned __int16 *)((char *)a1 + v18 + 4);
    if (v18 == -4)
    {
      *a1 = v17;
      if (++v14 != 8) {
        goto LABEL_13;
      }
      return v12 + 1 == a2;
    }
    unsigned __int16 v19 = *(unsigned __int16 *)((char *)a1 + v18 + 2);
    unsigned __int16 v20 = (unsigned __int8 *)sub_EE0610(*a3, v17);
    v18 -= 2;
  }
  while (*v20 < *(unsigned __int8 *)sub_EE0610(*a3, v19));
  *(unsigned __int16 *)((char *)a1 + v18 + 6) = v17;
  if (++v14 != 8) {
    goto LABEL_13;
  }
  return v12 + 1 == a2;
}

unsigned __int8 *sub_EC0114(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, uint64_t *a5)
{
  sub_EBF9F4(a1, a2, a3, a5);
  unsigned __int16 v10 = *a3;
  unsigned __int16 v11 = (unsigned __int8 *)sub_EE0610(*a5, *a4);
  BOOL result = (unsigned __int8 *)sub_EE0610(*a5, v10);
  if (*v11 < *result)
  {
    unsigned __int16 v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    unsigned __int16 v14 = *a2;
    unsigned __int16 v15 = (unsigned __int8 *)sub_EE0610(*a5, *a3);
    BOOL result = (unsigned __int8 *)sub_EE0610(*a5, v14);
    if (*v15 < *result)
    {
      unsigned __int16 v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      unsigned __int16 v17 = *a1;
      uint64_t v18 = (unsigned __int8 *)sub_EE0610(*a5, *a2);
      BOOL result = (unsigned __int8 *)sub_EE0610(*a5, v17);
      if (*v18 < *result)
      {
        unsigned __int16 v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

unsigned __int8 *sub_EC0224(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5, uint64_t *a6)
{
  sub_EC0114(a1, a2, a3, a4, a6);
  unsigned __int16 v12 = *a4;
  unsigned __int16 v13 = (unsigned __int8 *)sub_EE0610(*a6, *a5);
  BOOL result = (unsigned __int8 *)sub_EE0610(*a6, v12);
  if (*v13 < *result)
  {
    unsigned __int16 v15 = *a4;
    *a4 = *a5;
    *a5 = v15;
    unsigned __int16 v16 = *a3;
    unsigned __int16 v17 = (unsigned __int8 *)sub_EE0610(*a6, *a4);
    BOOL result = (unsigned __int8 *)sub_EE0610(*a6, v16);
    if (*v17 < *result)
    {
      unsigned __int16 v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      unsigned __int16 v19 = *a2;
      unsigned __int16 v20 = (unsigned __int8 *)sub_EE0610(*a6, *a3);
      BOOL result = (unsigned __int8 *)sub_EE0610(*a6, v19);
      if (*v20 < *result)
      {
        unsigned __int16 v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
        unsigned __int16 v22 = *a1;
        unint64_t v23 = (unsigned __int8 *)sub_EE0610(*a6, *a2);
        BOOL result = (unsigned __int8 *)sub_EE0610(*a6, v22);
        if (*v23 < *result)
        {
          unsigned __int16 v24 = *a1;
          *a1 = *a2;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

char *sub_EC0378(char *result, uint64_t *a2, uint64_t a3, unsigned __int16 *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = (char *)a4 - result;
    int64_t v8 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((char *)a4 - result) >> 1)
    {
      uint64_t v11 = v7 + 1;
      unsigned __int16 v12 = (unsigned __int16 *)&result[2 * v7 + 2];
      uint64_t v13 = v7 + 2;
      unint64_t v30 = result;
      if (v7 + 2 < a3)
      {
        unint64_t v14 = v4 >> 1;
        unsigned __int16 v15 = v12[1];
        unsigned __int16 v16 = (unsigned __int8 *)sub_EE0610(*a2, *v12);
        unsigned __int16 v17 = v15;
        int64_t v8 = v14;
        uint64_t v6 = v30;
        if (*v16 < *(unsigned __int8 *)sub_EE0610(*a2, v17))
        {
          ++v12;
          uint64_t v11 = v13;
        }
      }
      unsigned __int16 v18 = *v5;
      unsigned __int16 v19 = (unsigned __int8 *)sub_EE0610(*a2, *v12);
      BOOL result = (char *)sub_EE0610(*a2, v18);
      if (*v19 >= *result)
      {
        unsigned __int16 v31 = *v5;
        do
        {
          unsigned __int16 v22 = v12;
          unsigned __int16 *v5 = *v12;
          if (v8 < v11) {
            break;
          }
          uint64_t v23 = (2 * v11) | 1;
          unsigned __int16 v12 = (unsigned __int16 *)&v6[2 * v23];
          uint64_t v24 = 2 * v11 + 2;
          if (v24 < a3)
          {
            unsigned __int16 v25 = v12[1];
            BOOL v26 = (unsigned __int8 *)sub_EE0610(*a2, *v12);
            unsigned __int16 v27 = (unsigned __int8 *)sub_EE0610(*a2, v25);
            unsigned int v28 = *v26;
            unsigned int v29 = *v27;
            if (v28 < v29) {
              ++v12;
            }
            uint64_t v6 = v30;
            if (v28 < v29) {
              uint64_t v23 = v24;
            }
          }
          unsigned __int16 v20 = (unsigned __int8 *)sub_EE0610(*a2, *v12);
          BOOL result = (char *)sub_EE0610(*a2, v31);
          unsigned int v21 = *v20;
          char v5 = v22;
          uint64_t v11 = v23;
        }
        while (v21 >= *result);
        unsigned __int16 *v22 = v31;
      }
    }
  }
  return result;
}