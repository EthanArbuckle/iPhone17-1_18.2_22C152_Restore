uint64_t sub_F8AFDC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 1052) = a2;
  return result;
}

void *sub_F8AFE4(int32x2_t *a1, unsigned int **a2, char a3, void **a4)
{
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v9 = (*(void *)&a1[1] - *(void *)a1) >> 5;
    if (a3)
    {
      do
      {
        uint64_t v11 = **a4 + 1400;
        uint64_t v19 = *(void *)v6 | ((HIDWORD(*(void *)v6) & 0xFFFFFFF | (*(void *)v6 >> 31) & 0x60000000 | (((*(void *)v6 & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32);
        if (sub_F58474(v11, &v19) == -1)
        {
          LODWORD(v19) = 0;
          sub_F9E7F0((uint64_t)&a1[99], v6, (int *)&v19);
          sub_F9F9EC(a1 + 99);
          sub_F9FD68((uint64_t)&a1[3], v6, (uint64_t)&v19);
          uint64_t v12 = v19;
          if (v21)
          {
            v13 = (void *)(*(void *)(v19 + 8) + 32 * v20);
            void *v13 = *(void *)v6;
            v13[1] = 0;
            v13[2] = 0;
            v13[3] = 0;
          }
          uint64_t v10 = *(void *)(v12 + 8) + 32 * v20 + 8;
          LODWORD(v19) = v9;
          sub_F95644(v10, (unsigned int *)&v19);
        }
        v6 += 20;
      }
      while (v6 != v7);
    }
    else
    {
      do
      {
        uint64_t v15 = **a4 + 1400;
        uint64_t v19 = *(void *)v6 | ((HIDWORD(*(void *)v6) & 0xFFFFFFF | (*(void *)v6 >> 31) & 0x60000000 | (((*(void *)v6 & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32);
        if (sub_F58474(v15, &v19) == -1)
        {
          sub_F9FD68((uint64_t)&a1[3], v6, (uint64_t)&v19);
          uint64_t v16 = v19;
          if (v21)
          {
            v17 = (void *)(*(void *)(v19 + 8) + 32 * v20);
            void *v17 = *(void *)v6;
            v17[1] = 0;
            v17[2] = 0;
            v17[3] = 0;
          }
          uint64_t v14 = *(void *)(v16 + 8) + 32 * v20 + 8;
          LODWORD(v19) = v9;
          sub_F95644(v14, (unsigned int *)&v19);
        }
        v6 += 20;
      }
      while (v6 != v7);
    }
  }
  return sub_F9FC48((uint64_t)a1, (const void **)a2);
}

unint64_t sub_F8B1F0(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4)
{
  if (*(unsigned char *)(a1 + 1394))
  {
    v9[0] = *a2 | ((unint64_t)(a2[1] & 0xFFFFFFF | (((a2[1] >> 28) & 3) << 29) | (((a2[1] & 0x60000000) == 0x40000000) << 31)) << 32);
    if (sub_F58474(a1 + 1400, v9) != -1) {
      return 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  sub_ED9E74((unsigned __int8 *)(a1 + 8), *(void *)a2 | ((HIDWORD(*(void *)a2) & 0xFFFFFFF | (*(void *)a2 >> 31) & 0x60000000 | (((*(void *)a2 & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32), (uint64_t)v9);
  return sub_F6D9F4((uint64_t *)(a1 + 152), (unsigned int *)v9, a3, a4);
}

uint64_t sub_F8B2F0(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  int v6 = *(_DWORD *)(a1 + 1044);
  if (v6 == 0x7FFFFFFF) {
    return sub_F8C688(a1 + 1200, a2, (uint64_t)a3);
  }
  int v7 = a3[1];
  sub_F9E678(a1 + 1200, a2, v16);
  if (!v16[0])
  {
    if (v7 > v6) {
      return sub_F8C688(a1 + 1200, a2, (uint64_t)a3);
    }
    goto LABEL_20;
  }
  sub_F9E678(a1 + 1200, a2, v16);
  uint64_t v8 = *(void *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v17 + 8) + 8);
  if (*a3 < v8 || (*a3 <= v8 ? (BOOL v9 = a3[1] < SHIDWORD(v8)) : (BOOL v9 = 0), v9))
  {
    sub_F9E678(a1 + 1200, a2, v16);
    int v10 = *(_DWORD *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v17 + 8) + 12);
    int v11 = *(_DWORD *)(a1 + 1044);
    if (v11 >= v10 && v7 > v6)
    {
      int v14 = -1;
LABEL_21:
      *(_DWORD *)(a1 + 1048) += v14;
      return sub_F8C688(a1 + 1200, a2, (uint64_t)a3);
    }
    if (v11 >= v10 || v7 > v6) {
      return sub_F8C688(a1 + 1200, a2, (uint64_t)a3);
    }
LABEL_20:
    int v14 = 1;
    goto LABEL_21;
  }
  return sub_F8C688(a1 + 1200, a2, (uint64_t)a3);
}

BOOL sub_F8B420(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 3056);
  v3 = *(unsigned int **)(a1 + 3072);
  v4 = *(unsigned int **)(a1 + 3064);
  unint64_t v5 = *(unsigned int *)(a1 + 3052);
  if (v2 + v3 - v4 < v5) {
    return 0;
  }
  uint64_t v20 = 0;
  long long v8 = 0uLL;
  long long v19 = 0u;
  if (v4 == v3)
  {
    uint64_t v15 = 0;
  }
  else
  {
    do
    {
      while (1)
      {
        unsigned int v10 = *v4;
        unsigned int v18 = v10;
        uint64_t v11 = *(void *)(a1 + 928);
        unsigned int v12 = *(_DWORD *)(v11 + 24 * v10 + 8);
        if (*a2 >= v12)
        {
          int v13 = *(_DWORD *)(v11 + 24 * v10 + 12);
          if (v12 < *a2 || (int)a2[1] >= v13) {
            break;
          }
        }
        sub_745A4((uint64_t)&v19, &v18);
        if (++v4 == v3) {
          goto LABEL_12;
        }
      }
      ++*(_DWORD *)(a1 + 3056);
      ++v4;
    }
    while (v4 != v3);
LABEL_12:
    v3 = *(unsigned int **)(a1 + 3064);
    long long v8 = v19;
    uint64_t v15 = v20;
    LODWORD(v2) = *(_DWORD *)(a1 + 3056);
    LODWORD(v5) = *(_DWORD *)(a1 + 3052);
  }
  *(_OWORD *)(a1 + 3064) = v8;
  uint64_t v16 = *(void *)(a1 + 3080);
  *(void *)(a1 + 3080) = v15;
  *(void *)&long long v19 = v3;
  uint64_t v20 = v16;
  BOOL v6 = v2 >= v5;
  if (v3)
  {
    *((void *)&v19 + 1) = v3;
    operator delete(v3);
  }
  return v6;
}

void sub_F8B558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F8B574(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (!*(unsigned char *)(a1 + 3048)) {
    return 4294967294;
  }
  sub_F8BAF4((int32x2_t *)a1, a2, (uint64_t *)a3, a4);
  uint64_t v7 = *(void *)(a1 + 3032);
  int v38 = *(_DWORD *)(v7 + 160);
  unint64_t v8 = sub_F968AC(*(void *)(v7 + 24), *a2 | ((unint64_t)(a2[1] & 0xFFFFFFF) << 32), (a2[1] & 0x10000000) == 0, &v38);
  unint64_t v39 = v8;
  if (v8 > 0xFFFFFFFEFFFFFFFFLL || v8 == 0) {
    return 0;
  }
  LOWORD(v38) = sub_FA0788(*(void *)(v7 + 32), *(void *)a2, v8);
  if ((_WORD)v38 == 0xFFFF) {
    return 0;
  }
  sub_F96B60(*(void *)(v7 + 8), (unsigned int *)&v39, (unsigned __int16 *)&v38, v7 + 240);
  uint64_t v10 = *(void *)(v7 + 240);
  uint64_t v11 = *(void *)(v7 + 248);
  if (v10 != v11)
  {
    while (1)
    {
      unsigned int v16 = *(_DWORD *)(a1 + 1040);
      if (v16 != -1)
      {
        int v17 = *(_DWORD *)(v10 + 16);
        if (v17 != -1
          && *(_DWORD *)(v10 + 20) != 0x7FFFFFFF
          && *(void *)(v10 + 24) != 0x7FFFFFFFFFFFFFFFLL
          && v17 + *(_DWORD *)a3 > v16)
        {
          goto LABEL_11;
        }
      }
      unint64_t v18 = sub_F8BEFC((int32x2_t *)a1, (unsigned int *)v10);
      unint64_t v19 = v18;
      int v20 = *(_DWORD *)(v10 + 16);
      if (v20 == -1
        || (int v21 = *(_DWORD *)(v10 + 20), v21 == 0x7FFFFFFF)
        || *(void *)(v10 + 24) == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v12 = *(void *)(a1 + 3904);
        unint64_t v13 = v18 >> 6;
        uint64_t v14 = 1 << v18;
        uint64_t v15 = *(void *)(v12 + 8 * (v18 >> 6));
        if ((v15 & (1 << v18)) == 0)
        {
          uint64_t v25 = *(void *)(a1 + 24) + 32 * v18;
          v26 = *(unsigned int **)v25;
          v27 = *(unsigned int **)(v25 + 8);
          if (*(unsigned int **)v25 != v27)
          {
            do
            {
              LODWORD(v39) = 0;
              sub_F9E7F0(a1 + 816, v26, (int *)&v39);
              sub_F9F9EC((int32x2_t *)(a1 + 816));
              v26 += 20;
            }
            while (v26 != v27);
            uint64_t v12 = *(void *)(a1 + 3904);
            uint64_t v15 = *(void *)(v12 + 8 * v13);
          }
          *(void *)(v12 + 8 * v13) = v15 | v14;
        }
        ++*(void *)(a1 + 3936);
        goto LABEL_11;
      }
      if (!*(unsigned char *)(a1 + 3049)) {
        goto LABEL_42;
      }
      int v22 = *(_DWORD *)(a1 + 1044);
      if (v22 != 0x7FFFFFFF && v21 + *(_DWORD *)(a3 + 4) > v22) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(*(void *)(a1 + 3880) + 40 * v18 + 32) != -1) {
        goto LABEL_42;
      }
      v23.n128_f64[0] = sub_F8C11C(*(void *)(a1 + 3032), (unsigned int *)v10, (uint64_t)&v39);
      int v24 = v41;
      if (v41 != -1) {
        break;
      }
      uint64_t v28 = *(void *)(a1 + 3904);
      unint64_t v29 = v19 >> 6;
      uint64_t v30 = 1 << v19;
      uint64_t v31 = *(void *)(v28 + 8 * (v19 >> 6));
      if ((v31 & (1 << v19)) == 0)
      {
        uint64_t v32 = *(void *)(a1 + 24) + 32 * v19;
        v34 = *(unsigned int **)v32;
        v33 = *(unsigned int **)(v32 + 8);
        if (*(unsigned int **)v32 != v33)
        {
          do
          {
            int v38 = 0;
            sub_F9E7F0(a1 + 816, v34, &v38);
            sub_F9F9EC((int32x2_t *)(a1 + 816));
            v34 += 20;
          }
          while (v34 != v33);
          uint64_t v28 = *(void *)(a1 + 3904);
          uint64_t v30 = 1 << v19;
          unint64_t v29 = v19 >> 6;
          uint64_t v31 = *(void *)(v28 + 8 * (v19 >> 6));
        }
        *(void *)(v28 + 8 * v29) = v31 | v30;
      }
      ++*(void *)(a1 + 3928);
      if (!v41) {
        goto LABEL_37;
      }
LABEL_40:
      if (v24 != -1)
      {
        int v20 = *(_DWORD *)(v10 + 16);
        int v21 = *(_DWORD *)(v10 + 20);
LABEL_42:
        unint64_t v39 = (v20 + *(_DWORD *)a3) | ((unint64_t)(v21 + *(_DWORD *)(a3 + 4)) << 32);
        sub_F8C338(a1, a2, (unsigned int *)&v39, v19, a4, *(_DWORD *)(v10 + 8), 0, 1);
      }
LABEL_11:
      v10 += 32;
      if (v10 == v11) {
        return *(unsigned int *)(*(void *)(a1 + 3032) + 164);
      }
    }
    __n128 v23 = sub_F91EC0(*(void *)(a1 + 3880) + 40 * v19, (uint64_t *)&v39);
    if (v41) {
      goto LABEL_40;
    }
LABEL_37:
    v35 = v40;
    if (v40)
    {
      if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v35->__on_zero_shared)(v35, v23);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    goto LABEL_40;
  }
  return *(unsigned int *)(*(void *)(a1 + 3032) + 164);
}

void sub_F8B970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_F78528((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_F8B988(uint64_t a1, unsigned int *a2, unsigned int *a3, int *a4, char a5, unsigned int *a6)
{
  unsigned int v17 = *a6;
  if (v17)
  {
    uint64_t v11 = a1 + 1064;
    do
    {
      if (sub_F963A0(**(void **)(a1 + 8), *a2 | ((unint64_t)(a2[1] & 0xFFFFFFF) << 32), &v17))
      {
        unint64_t v12 = sub_F968AC(**(void **)(a1 + 8), *a2 | ((unint64_t)(a2[1] & 0xFFFFFFF) << 32), (a2[1] & 0x10000000) == 0, &v17);
        unint64_t v16 = v12;
        if (v12) {
          BOOL v13 = v12 >= 0xFFFFFFFF00000000;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          int v14 = *(_DWORD *)(a1 + 20);
          if (v14 != -1 && v17 == v14) {
            return 0xFFFFFFFFLL;
          }
        }
        else if (sub_F953E4(v11, &v16) == -1 && sub_F953E4(*(void *)(a1 + 976) + 800, &v16) == -1)
        {
          if (*(unsigned char *)(a1 + 3048) && v17 < *(_DWORD *)(*(void *)(a1 + 3032) + 160)) {
            return 0;
          }
          if (!*(unsigned char *)(*(void *)a1 + 1393)
            || !sub_FA8F9C(*(void *)a1 + 200, (unsigned int *)&v16, a3, a4, a5))
          {
            return v17;
          }
        }
      }
      --v17;
    }
    while (v17);
  }
  return 0;
}

void sub_F8BAF4(int32x2_t *a1, unsigned int *a2, uint64_t *a3, int a4)
{
  v43 = a1;
  if (a1[381].i8[0])
  {
    sub_F8C854(a1, a2);
    a1 = v43;
  }
  sub_FA18AC(*(void *)&a1[122] + 24, a2, v44);
  if (*(void *)v44)
  {
    sub_FA18AC(*(void *)&v43[122] + 24, a2, v44);
    unint64_t v5 = v43;
    BOOL v6 = *(uint64_t **)(v45 + 8);
    unint64_t v39 = *(uint64_t **)(v45 + 16);
    if (v6 != v39)
    {
      do
      {
        v42 = v6;
        uint64_t v7 = (void *)(**(void **)&v5[122] + 32 * *v6);
        uint64_t v8 = -858993459 * ((v7[1] - *v7) >> 4);
        if (v8)
        {
          for (uint64_t i = 0; i != v8; ++i)
          {
            uint64_t v10 = (unsigned int *)(*v7 + 80 * i);
            uint64_t v11 = *a2;
            if (*v10 == v11)
            {
              unsigned int v12 = v10[1];
              if (v12 == a2[1])
              {
                int32x2_t v13 = *v5;
                uint64_t v14 = *v7 + 80 * i;
                unsigned int v17 = *(_DWORD *)(v14 + 8);
                uint64_t v15 = v14 + 8;
                unsigned int v16 = v17;
                uint64_t v18 = (uint64_t)v5[371];
                if (!*(unsigned char *)(*(void *)v5 + 1394)) {
                  goto LABEL_36;
                }
                unint64_t v19 = v12 & 0xFFFFFFF | (((v12 >> 28) & 3) << 29) | (((v12 & 0x60000000) == 0x40000000) << 31);
                uint64_t v20 = *(void *)(*(void *)&v13 + 1456) - 1;
                unint64_t v21 = 0x2127599BF4325C37
                    * (((v19 >> 29) & 2 | (v19 >> 31) | (v19 >> 27) & 4 | (v11 << 32) | (8 * (v12 & 0xFFFFFFF))) ^ (((v11 << 32) | (8 * (unint64_t)(v12 & 0xFFFFFFF))) >> 23));
                uint64_t v22 = *(void *)(*(void *)&v13 + 1472);
                int v23 = *(_DWORD *)(*(void *)&v13 + 1464);
                int v24 = *(_DWORD *)(*(void *)&v13 + 1468);
                unint64_t v25 = (v21 ^ (v21 >> 47)) & v20;
                int v26 = *(_DWORD *)(v22 + 8 * v25);
                int v27 = *(_DWORD *)(v22 + 8 * v25 + 4);
                if (v23 == v26 && v24 == v27) {
                  goto LABEL_36;
                }
                if (*(void *)(*(void *)&v13 + 1440))
                {
                  uint64_t v29 = 1;
                  while (*(_DWORD *)(*(void *)&v13 + 1432) == v26 && *(_DWORD *)(*(void *)&v13 + 1436) == v27
                       || v27 != v19
                       || v26 != v11)
                  {
                    unint64_t v25 = (v25 + v29) & v20;
                    int v26 = *(_DWORD *)(v22 + 8 * v25);
                    int v27 = *(_DWORD *)(v22 + 8 * v25 + 4);
                    ++v29;
                    if (v23 == v26 && v24 == v27) {
                      goto LABEL_36;
                    }
                  }
                }
                else
                {
                  uint64_t v31 = 1;
                  while (v27 != v19 || v26 != v11)
                  {
                    unint64_t v25 = (v25 + v31) & v20;
                    int v26 = *(_DWORD *)(v22 + 8 * v25);
                    int v27 = *(_DWORD *)(v22 + 8 * v25 + 4);
                    ++v31;
                    if (v23 == v26 && v24 == v27) {
                      goto LABEL_36;
                    }
                  }
                }
                if (v25 == -1)
                {
LABEL_36:
                  v33 = (uint64_t *)(*(void *)&v13 + 152);
                  sub_ED9E74((unsigned __int8 *)(*(void *)&v13 + 8), *(void *)a2 | ((HIDWORD(*(void *)a2) & 0xFFFFFFF | (*(void *)a2 >> 31) & 0x60000000 | (((*(void *)a2 & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32), (uint64_t)v44);
                  unint64_t v34 = sub_F6D9F4(v33, v44, v16, v18);
                  unint64_t v5 = v43;
                  int v35 = v34;
                  if (v34 != -1)
                  {
                    unint64_t v36 = v34 & 0xFFFFFFFF00000000;
                    if ((v34 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
                    {
                      uint64_t v37 = *a3;
                      unint64_t v38 = sub_F6DA8C((uint64_t *)(*(void *)v43 + 152), v10, v15, *(void *)&v43[371], 1, 1);
                      unint64_t v5 = v43;
                      if (v38 != -1 && (v38 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
                      {
                        *(void *)v44 = (v37 + v36 + (v38 & 0xFFFFFFFF00000000)) & 0xFFFFFFFF00000000 | (v37 + v35 + v38);
                        sub_F8C338((uint64_t)v43, a2, v44, *v42, a4, i, 0, 0);
                        unint64_t v5 = v43;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        BOOL v6 = v42 + 1;
      }
      while (v42 + 1 != v39);
    }
  }
}

uint64_t sub_F8BEFC(int32x2_t *a1, unsigned int *a2)
{
  uint64_t v4 = (uint64_t)&a1[386];
  sub_F78DE8((uint64_t)&a1[386], a2, v21);
  if (v21[0]) {
    return v21[3][1];
  }
  int32x2_t v6 = a1[4];
  int32x2_t v7 = a1[3];
  int32x2_t v8 = a1[379];
  sub_F98E98(*(void *)(*(void *)&v8 + 8), a2, *(void *)&v8 + 192);
  sub_BF647C(*(void *)&v8 + 40, (uint64_t *)(*(void *)&v8 + 192), *(_DWORD *)(*(void *)&v8 + 168), 0, (uint64_t)&__p);
  uint64_t v22 = a1;
  sub_F8AFE4(a1 + 3, (unsigned int **)&__p, 0, (void **)&v22);
  unint64_t v5 = (uint64_t)(*(void *)&v6 - *(void *)&v7) >> 5;
  if (__p)
  {
    unint64_t v19 = __p;
    operator delete(__p);
  }
  sub_F99838(v4, a2, (uint64_t)&__p);
  BOOL v9 = __p;
  if (v20)
  {
    uint64_t v10 = (void *)(*((void *)__p + 1) + 16 * (void)v19);
    *uint64_t v10 = *(void *)a2;
    v10[1] = -1;
  }
  *(void *)(v9[1] + 16 * (void)v19 + 8) = v5;
  sub_29603C((void **)&a1[482], a2);
  unint64_t v11 = (unint64_t)a1[489];
  int32x2_t v12 = a1[490];
  if (v11 == *(void *)&v12 << 6)
  {
    if ((uint64_t)(v11 + 1) < 0) {
      sub_2E00();
    }
    unint64_t v13 = *(void *)&v12 << 7;
    if (v13 <= (v11 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v11 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v14 = v13;
    }
    else {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_3D110((uint64_t)&a1[488], v14);
    unint64_t v11 = (unint64_t)a1[489];
  }
  a1[489] = (int32x2_t)(v11 + 1);
  *(void *)(*(void *)&a1[488] + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v11);
  int32x2_t v15 = a1[486];
  if (*(void *)&v15 >= *(void *)&a1[487])
  {
    unsigned int v16 = sub_F99F7C((void **)&a1[485]);
  }
  else
  {
    *(void *)(*(void *)&v15 + 32) = 0;
    *(_OWORD *)*(void *)&int32x2_t v15 = 0u;
    *(_OWORD *)(*(void *)&v15 + 16) = 0u;
    *(_DWORD *)(*(void *)&v15 + 32) = -1;
    unsigned int v16 = (char *)(*(void *)&v15 + 40);
  }
  a1[486] = (int32x2_t)v16;
  if (v5 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a1[117] - *(void *)&a1[116]) >> 3)) {
    sub_FA1A24((char **)&a1[116]);
  }
  return v5;
}

void sub_F8C100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_F8C11C@<D0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 185)) {
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v6 + 3880)) {
    goto LABEL_3;
  }
  uint64_t v18 = sub_3823E0(v6 + 8, *a2, 1);
  if (!v18) {
    goto LABEL_3;
  }
  unint64_t v19 = &v18[-*(int *)v18];
  if (*(unsigned __int16 *)v19 < 7u) {
    goto LABEL_3;
  }
  uint64_t v7 = *((unsigned __int16 *)v19 + 3);
  if (!v7) {
    goto LABEL_4;
  }
  char v20 = &v18[v7 + *(unsigned int *)&v18[v7]];
  uint64_t v21 = a2[1];
  if (*(_DWORD *)v20 <= v21)
  {
LABEL_3:
    uint64_t v7 = 0;
    goto LABEL_4;
  }
  uint64_t v7 = (uint64_t)&v20[4 * v21 + 4 + *(unsigned int *)&v20[4 * v21 + 4]];
LABEL_4:
  int32x2_t v8 = (unsigned __int16 *)(v7 - *(int *)v7);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (int *)(v7 + v9 + *(unsigned int *)(v7 + v9));
    unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    unsigned int v12 = *v11;
    if (v12 < 5) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = (_WORD *)(&loc_1120530 + 1);
    unsigned int v12 = *(unsigned __int16 *)((char *)&loc_1120530 + 1);
    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
      goto LABEL_17;
    }
  }
  uint64_t v13 = v11[2];
  if (v11[2]) {
    v13 += (uint64_t)v10 + *(unsigned int *)((char *)v10 + v13);
  }
  if (v12 >= 9)
  {
    uint64_t v14 = v11[4];
    if (v14 && v13 != 0)
    {
      uint64_t v22 = (unsigned int *)((char *)v10 + v14);
      uint64_t v23 = *v22;
      *(void *)a3 = v13;
      *(void *)(a3 + 8) = (char *)v22 + v23;
      *(void *)&double result = 0xFFFFFFFFLL;
      *(void *)(a3 + 16) = 0xFFFFFFFFLL;
      *(_DWORD *)(a3 + 24) = -1;
      *(_DWORD *)(a3 + 32) = 1;
      return result;
    }
  }
LABEL_17:
  sub_FA0C68(a1, a2, &v25);
  if (!v25)
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = -1;
    unsigned int v17 = v26;
    if (!v26) {
      return result;
    }
    goto LABEL_23;
  }
  unsigned int v16 = v26;
  *(void *)a3 = v25;
  *(void *)(a3 + 8) = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a3 + 32) = 0;
  unsigned int v17 = v26;
  if (v26)
  {
LABEL_23:
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return result;
}

void sub_F8C338(uint64_t a1, void *a2, unsigned int *a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  uint64_t v59 = a4;
  unsigned int v8 = *(_DWORD *)(a1 + 1040);
  unsigned int v9 = *a3;
  if (v8 != -1 && v9 > v8) {
    return;
  }
  int v11 = a8;
  int v13 = a6;
  int v14 = a5;
  uint64_t v19 = *(void *)(a1 + 928);
  char v20 = (_DWORD *)(v19 + 24 * a4);
  if (!*v20)
  {
    uint64_t v22 = *(char **)(a1 + 960);
    unint64_t v23 = *(void *)(a1 + 968);
    if ((unint64_t)v22 < v23)
    {
      *(void *)uint64_t v22 = a4;
      int v24 = v22 + 8;
      int v14 = a5;
      *(void *)(a1 + 960) = v24;
      if (!*(unsigned char *)(a1 + 3048))
      {
LABEL_11:
        if (!*v20) {
          goto LABEL_18;
        }
        unsigned int v9 = *a3;
        unsigned int v21 = *(_DWORD *)(v19 + 24 * a4 + 8);
        if (*a3 < v21) {
          goto LABEL_18;
        }
LABEL_13:
        if (v21 < v9 || (int)a3[1] >= *(_DWORD *)(v19 + 24 * a4 + 12)) {
          return;
        }
        goto LABEL_18;
      }
LABEL_10:
      sub_3A998(a1 + 3064, &v59);
      goto LABEL_11;
    }
    unint64_t v34 = *(char **)(a1 + 952);
    int64_t v35 = v22 - v34;
    uint64_t v36 = (v22 - v34) >> 3;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 61) {
      sub_2E00();
    }
    uint64_t v38 = v23 - (void)v34;
    if (v38 >> 2 > v37) {
      unint64_t v37 = v38 >> 2;
    }
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      if (v39 >> 61) {
        sub_188D718();
      }
      v40 = operator new(8 * v39);
      int64_t v35 = v22 - v34;
      uint64_t v36 = (v22 - v34) >> 3;
      int v41 = &v40[8 * v36];
      v42 = &v40[8 * v39];
      *int v41 = a4;
      uint64_t v43 = (uint64_t)(v41 + 1);
      int64_t v44 = v22 - v34;
      if (v22 != v34)
      {
LABEL_43:
        unint64_t v45 = v44 - 8;
        int v13 = a6;
        if (v45 < 0x58) {
          goto LABEL_60;
        }
        if ((unint64_t)(v22 - v40 - v35) < 0x20) {
          goto LABEL_60;
        }
        uint64_t v46 = (v45 >> 3) + 1;
        uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
        v48 = &v22[-v47];
        int v41 = (void *)((char *)v41 - v47);
        v49 = &v40[8 * v36 - 16];
        v50 = v22 - 16;
        uint64_t v51 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v52 = *(_OWORD *)v50;
          *(v49 - 1) = *((_OWORD *)v50 - 1);
          _OWORD *v49 = v52;
          v49 -= 2;
          v50 -= 32;
          v51 -= 4;
        }
        while (v51);
        uint64_t v22 = v48;
        if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_60:
          do
          {
            uint64_t v53 = *((void *)v22 - 1);
            v22 -= 8;
            *--int v41 = v53;
          }
          while (v22 != v34);
        }
        *(void *)(a1 + 952) = v41;
        *(void *)(a1 + 960) = v43;
        *(void *)(a1 + 968) = v42;
        if (v34) {
          goto LABEL_50;
        }
        goto LABEL_51;
      }
    }
    else
    {
      v40 = 0;
      int v41 = (void *)(8 * v36);
      v42 = 0;
      *(void *)(8 * v36) = a4;
      uint64_t v43 = 8 * v36 + 8;
      int64_t v44 = v22 - v34;
      if (v22 != v34) {
        goto LABEL_43;
      }
    }
    int v13 = a6;
    *(void *)(a1 + 952) = v41;
    *(void *)(a1 + 960) = v43;
    *(void *)(a1 + 968) = v42;
    if (v34)
    {
LABEL_50:
      uint64_t v54 = v43;
      operator delete(v34);
      uint64_t v43 = v54;
    }
LABEL_51:
    int v11 = a8;
    int v14 = a5;
    *(void *)(a1 + 960) = v43;
    if (!*(unsigned char *)(a1 + 3048)) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  unsigned int v21 = *(_DWORD *)(v19 + 24 * a4 + 8);
  if (v9 >= v21) {
    goto LABEL_13;
  }
LABEL_18:
  uint64_t v26 = v19 + 24 * a4;
  *(void *)(v26 + 8) = *(void *)a3;
  *(void *)char v20 = *a2;
  if (a7) {
    int v27 = 0x40000000;
  }
  else {
    int v27 = 0;
  }
  unsigned int v28 = v27 & 0xC0000000 | v14 & 0x3FFFFFFF;
  if (v11) {
    unsigned int v29 = 0x80000000;
  }
  else {
    unsigned int v29 = 0;
  }
  *(_DWORD *)(v26 + 16) = v13;
  *(_DWORD *)(v26 + 20) = v28 | v29;
  if (!*(unsigned char *)(a1 + 3048))
  {
    uint64_t v30 = (uint64_t *)(a1 + 984);
    unsigned int v58 = *a3;
    uint64_t v31 = *(void *)(a1 + 1008);
    if (v59 >= (unint64_t)((*(void *)(a1 + 1016) - v31) >> 2)
      || *(_DWORD *)(v31 + 4 * v59) == -1)
    {
      sub_F97E70((uint64_t)v30, v59, &v58);
    }
    else
    {
      sub_F98124(v30, v59, &v58);
    }
    if ((uint64_t)(*(void *)(*(void *)(a1 + 976) + 8) - **(void **)(a1 + 976)) >> 5 == (uint64_t)(*(void *)(a1 + 960) - *(void *)(a1 + 952)) >> 3)
    {
      unsigned int v32 = *(_DWORD *)(a1 + 1040);
      unsigned int v33 = *(_DWORD *)(*(void *)(a1 + 984) + 4);
      if (v32 == -1 || v33 < v32) {
        *(_DWORD *)(a1 + 1040) = v33;
      }
    }
  }
}

uint64_t sub_F8C688(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_FA0FC8(a1, a2, &v23);
  if (v23)
  {
    uint64_t v6 = v24;
    uint64_t v7 = *(void *)(a1 + 768) + 80 * *(unsigned int *)(v24 + 8);
    unsigned int v10 = *(_DWORD *)(v7 + 8);
    uint64_t v8 = v7 + 8;
    unsigned int v9 = v10;
    if (*(_DWORD *)a3 >= v10 && (v9 < *(_DWORD *)a3 || *(_DWORD *)(a3 + 4) >= *(_DWORD *)(v8 + 4))) {
      return 0;
    }
    ++*(_DWORD *)(a1 + 816);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a3;
    long long v13 = *(_OWORD *)(a3 + 16);
    long long v14 = *(_OWORD *)(a3 + 32);
    long long v15 = *(_OWORD *)(a3 + 48);
    *(_DWORD *)(v8 + 64) = *(_DWORD *)(a3 + 64);
    *(_OWORD *)(v8 + 32) = v14;
    *(_OWORD *)(v8 + 48) = v15;
    *(_OWORD *)(v8 + 16) = v13;
    unsigned int v16 = (uint64_t *)(a1 + 824);
    unint64_t v17 = *(unsigned int *)(v6 + 8);
    uint64_t v18 = *(void *)(a1 + 848);
    if (v17 < (*(void *)(a1 + 856) - v18) >> 2 && *(_DWORD *)(v18 + 4 * v17) != -1) {
      goto LABEL_16;
    }
LABEL_19:
    sub_F97874((uint64_t)v16, v17, (void *)a3);
    return 1;
  }
  ++*(_DWORD *)(a1 + 816);
  unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 776) - *(void *)(a1 + 768)) >> 4);
  sub_FA1120(a1, a2, (uint64_t)&v25);
  uint64_t v20 = v25;
  if (v27)
  {
    uint64_t v21 = *(void *)(v25 + 8) + 16 * v26;
    *(void *)uint64_t v21 = *(void *)a2;
    *(_DWORD *)(v21 + 8) = 0;
  }
  *(_DWORD *)(*(void *)(v20 + 8) + 16 * v26 + 8) = v19;
  sub_BF6964((char **)(a1 + 768), a2, (long long *)a3);
  unsigned int v16 = (uint64_t *)(a1 + 824);
  uint64_t v22 = *(void *)(a1 + 848);
  if (v19 >= (unint64_t)((*(void *)(a1 + 856) - v22) >> 2)
    || *(_DWORD *)(v22 + 4 * v19) == -1)
  {
    LODWORD(v17) = v19;
    goto LABEL_19;
  }
  LODWORD(v17) = v19;
LABEL_16:
  sub_F97B30(v16, v17, a3);
  return 1;
}

void sub_F8C854(int32x2_t *a1, unsigned int *a2)
{
  v3 = (void *)a1[379];
  sub_FA1B70(v3[1], a2, v3 + 27);
  unint64_t v5 = (unsigned char *)v3[27];
  uint64_t v4 = (unsigned char *)v3[28];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    memcpy(v7, v5, v6);
    uint64_t v8 = 0;
    uint64_t v9 = 8 * (v6 >> 3);
    do
    {
      sub_F8BEFC(a1, (unsigned int *)&v7[v8]);
      v8 += 8;
    }
    while (v9 != v8);
    operator delete(v7);
  }
}

void sub_F8C928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_F8C950(uint64_t a1, unsigned int *a2)
{
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 1) {
    return sub_FA1D54(a1, a2);
  }
  if (v2)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &off_23FDF58;
  }
  v3 = *(void **)a1;
  unint64_t v4 = a2[1];
  unint64_t v7 = (((unint64_t)*a2 << 32) + 16 * (int)v4) | (v4 >> 25) & 8 | (v4 >> 27) & 4 | (v4 >> 29) & 2 | (v4 >> 31);
  return *(void *)sub_FA1ED0(v3, &v7);
}

uint64_t sub_F8CA20(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a2 + 184;
  *(void *)(a1 + 16) = -1;
  sub_F9D750((void *)(a1 + 24), a2);
  *(void *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  unint64_t v5 = operator new(0x18uLL);
  *(void *)(a1 + 928) = v5;
  *(void *)(a1 + 944) = v5 + 3;
  *(_OWORD *)unint64_t v5 = xmmword_20E8160;
  v5[2] = 0;
  *(void *)(a1 + 936) = v5 + 3;
  if (a3) {
    uint64_t v6 = 128;
  }
  else {
    uint64_t v6 = 2;
  }
  *(_DWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  unint64_t v7 = (char *)operator new(4 * v6);
  *(void *)(a1 + 1008) = v7;
  *(void *)(a1 + 1016) = v7;
  *(void *)(a1 + 1024) = &v7[4 * v6];
  uint64_t v8 = (char *)operator new(0x3F8uLL);
  *(void *)(a1 + 984) = v8;
  *(void *)(a1 + 992) = v8;
  *(void *)(a1 + 1000) = v8 + 1016;
  *(void *)(a1 + 1040) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 1048) = 0;
  *(unsigned char *)(a1 + 1052) = 0;
  sub_F9D8A8(a1 + 1056, *(uint64_t **)(a1 + 8));
  *(void *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(void *)(a1 + 1192) = -1;
  if (a3) {
    unsigned int v9 = 0x10000;
  }
  else {
    unsigned int v9 = 0x2000;
  }
  sub_FA2350((void *)(a1 + 1200), v9);
  v14[0] = 256;
  v14[1] = (unint64_t)&v13;
  v14[2] = (unint64_t)&v12;
  v14[3] = (unint64_t)&v11;
  sub_F91654((void *)(a1 + 2080), v14);
  sub_F9D8A8(a1 + 2848, *(uint64_t **)(a1 + 8));
  *(_DWORD *)(a1 + 2960) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 2964) = 0;
  *(void *)(a1 + 3016) = 0;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_DWORD *)(a1 + 3024) = -1;
  *(_WORD *)(a1 + 3048) = 256;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(void *)(a1 + 3052) = 0xFFFFFFFFLL;
  *(void *)(a1 + 3064) = 0;
  *(void *)(a1 + 3080) = 0;
  *(void *)(a1 + 3072) = 0;
  *(void *)(a1 + 3088) = &unk_20E1710;
  *(void *)(a1 + 3128) = 0;
  *(void *)(a1 + 3112) = 0;
  *(void *)(a1 + 3096) = 0;
  *(void *)(a1 + 3104) = 0;
  *(void *)(a1 + 3136) = &unk_20E1710;
  *(void *)(a1 + 3176) = 0;
  *(void *)(a1 + 3160) = 0;
  *(void *)(a1 + 3144) = 0;
  *(void *)(a1 + 3152) = 0;
  *(void *)(a1 + 3184) = &unk_20E1710;
  *(void *)(a1 + 3224) = 0;
  *(void *)(a1 + 3208) = 0;
  *(void *)(a1 + 3192) = 0;
  *(void *)(a1 + 3200) = 0;
  *(void *)(a1 + 3232) = &unk_20E1710;
  *(void *)(a1 + 3272) = 0;
  *(void *)(a1 + 3256) = 0;
  *(void *)(a1 + 3240) = 0;
  *(void *)(a1 + 3248) = 0;
  *(void *)(a1 + 3280) = &unk_20E1710;
  *(void *)(a1 + 3320) = 0;
  *(void *)(a1 + 3304) = 0;
  *(void *)(a1 + 3288) = 0;
  *(void *)(a1 + 3296) = 0;
  *(void *)(a1 + 3328) = &unk_20E1710;
  *(void *)(a1 + 3368) = 0;
  *(void *)(a1 + 3352) = 0;
  *(void *)(a1 + 3336) = 0;
  *(void *)(a1 + 3344) = 0;
  *(void *)(a1 + 3376) = &unk_20E1710;
  *(void *)(a1 + 3416) = 0;
  *(void *)(a1 + 3400) = 0;
  *(void *)(a1 + 3384) = 0;
  *(void *)(a1 + 3392) = 0;
  *(void *)(a1 + 3424) = &unk_20E1710;
  *(void *)(a1 + 3464) = 0;
  *(void *)(a1 + 3448) = 0;
  *(void *)(a1 + 3432) = 0;
  *(void *)(a1 + 3440) = 0;
  *(void *)(a1 + 3472) = &unk_20E1710;
  *(void *)(a1 + 3512) = 0;
  *(void *)(a1 + 3488) = 0;
  *(void *)(a1 + 3480) = 0;
  *(void *)(a1 + 3496) = 0;
  *(void *)(a1 + 3520) = &unk_20E1710;
  *(void *)(a1 + 3560) = 0;
  *(void *)(a1 + 3536) = 0;
  *(void *)(a1 + 3528) = 0;
  *(void *)(a1 + 3544) = 0;
  *(void *)(a1 + 3568) = &unk_20E1710;
  *(void *)(a1 + 3608) = 0;
  *(void *)(a1 + 3584) = 0;
  *(void *)(a1 + 3576) = 0;
  *(void *)(a1 + 3592) = 0;
  *(void *)(a1 + 3616) = &unk_20E1710;
  *(void *)(a1 + 3656) = 0;
  *(void *)(a1 + 3632) = 0;
  *(void *)(a1 + 3624) = 0;
  *(void *)(a1 + 3640) = 0;
  *(void *)(a1 + 3664) = &unk_20E1710;
  *(void *)(a1 + 3704) = 0;
  *(void *)(a1 + 3680) = 0;
  *(void *)(a1 + 3672) = 0;
  *(void *)(a1 + 3688) = 0;
  *(void *)(a1 + 3712) = &unk_20E1710;
  *(void *)(a1 + 3752) = 0;
  *(void *)(a1 + 3728) = 0;
  *(void *)(a1 + 3720) = 0;
  *(void *)(a1 + 3736) = 0;
  *(void *)(a1 + 3760) = &unk_20E1710;
  *(void *)(a1 + 3800) = 0;
  *(void *)(a1 + 3776) = 0;
  *(void *)(a1 + 3768) = 0;
  *(void *)(a1 + 3784) = 0;
  *(void *)(a1 + 3808) = &unk_20E1710;
  *(void *)(a1 + 3824) = 0;
  *(void *)(a1 + 3816) = 0;
  *(void *)(a1 + 3832) = 0;
  *(_OWORD *)(a1 + 3928) = 0u;
  *(_OWORD *)(a1 + 3912) = 0u;
  *(_OWORD *)(a1 + 3896) = 0u;
  *(_OWORD *)(a1 + 3880) = 0u;
  *(_OWORD *)(a1 + 3864) = 0u;
  *(_OWORD *)(a1 + 3848) = 0u;
  return a1;
}

void sub_F8CD3C(_Unwind_Exception *a1)
{
  uint64_t v7 = v3;
  sub_328138(v7);
  sub_5139D0(v5);
  unsigned int v9 = (void *)v1[146];
  if (v9)
  {
    v1[147] = v9;
    operator delete(v9);
  }
  sub_F7341C(v4);
  sub_3310C((uint64_t)(v1 + 123));
  unsigned int v10 = (void **)(v1 + 116);
  char v11 = *v6;
  if (*v6)
  {
    v1[120] = v11;
    operator delete(v11);
    char v12 = *v10;
    if (!*v10)
    {
LABEL_5:
      sub_BF10E8(v2);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    char v12 = *v10;
    if (!*v10) {
      goto LABEL_5;
    }
  }
  v1[117] = v12;
  operator delete(v12);
  sub_BF10E8(v2);
  _Unwind_Resume(a1);
}

void sub_F8CE2C(_Unwind_Exception *a1)
{
  sub_BF10E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F8CE44(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_F8CA20(a1, a2, 0);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 3032) = v6;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 3040);
  *(void *)(a1 + 3040) = v5;
  if (!v7 || atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  return a1;
}

void sub_F8CEE8(int32x2_t *a1)
{
  unsigned int v62 = 0;
  __p = 0;
  v60 = 0;
  uint64_t v61 = 0;
  int32x2_t v2 = *a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 1456);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    uint64_t v5 = *(void *)(*(void *)a1 + 1472);
    while (1)
    {
      int v6 = *(_DWORD *)(v5 + 4);
      if (*(_DWORD *)(*(void *)&v2 + 1464) != *(_DWORD *)v5 || *(_DWORD *)(*(void *)&v2 + 1468) != v6)
      {
        if (!*(void *)(*(void *)&v2 + 1440)) {
          break;
        }
        if (*(_DWORD *)(*(void *)&v2 + 1432) != *(_DWORD *)v5 || *(_DWORD *)(*(void *)&v2 + 1436) != v6) {
          break;
        }
      }
      v5 += 8;
      v4 -= 8;
      if (!v4) {
        goto LABEL_14;
      }
    }
    uint64_t v9 = *(void *)(*(void *)a1 + 1472) + 8 * v3;
    if (v5 != v9)
    {
      v56 = (int *)&a1[370];
      long long v14 = a1 + 132;
      while (1)
      {
        unsigned int v15 = HIDWORD(*(void *)v5) & 0x40000000;
        BOOL v16 = *(uint64_t *)v5 < 0 && v15 == 0;
        int v17 = (*(void *)v5 >> 33) & 0x10000000 | HIDWORD(*(void *)v5) & 0xFFFFFFF;
        if (v16) {
          int v18 = 0x40000000;
        }
        else {
          int v18 = 0;
        }
        unsigned int v57 = *(void *)v5;
        unsigned int v58 = v17 | (v15 >> 1) | v18;
        if (!v62
          || (int32x2_t v19 = *a1,
              uint64_t v20 = (uint64_t)a1[371],
              sub_ED9E74((unsigned __int8 *)(*(void *)a1 + 8), *(void *)v5, (uint64_t)v63),
              unint64_t v21 = sub_F6DA14((uint64_t *)(*(void *)&v19 + 152), v63, v20),
              v21 != -1)
          && (v21 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000
          && v22 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v63[0] = 0;
          sub_F9E7F0((uint64_t)v14, &v57, (int *)v63);
          sub_F9F9EC(v14);
          goto LABEL_47;
        }
        int v23 = sub_F78BBC(*(uint64_t **)&a1[1]);
        if (v23 - 1 <= v62) {
          break;
        }
        v55 = v14;
        int32x2_t v24 = *a1;
        uint64_t v25 = (unsigned int *)a1[371];
        char v26 = a1[370].i8[4];
        int v65 = v23 - 1;
        *(void *)v63 = sub_F968AC(*(void *)(*(void *)&v24 + 184), v57 | ((unint64_t)(v58 & 0xFFFFFFF) << 32), (v58 & 0x10000000) == 0, &v65);
        if (sub_FA8F9C(*(void *)&v24 + 200, v63, v25, v56, v26))
        {
          long long v14 = v55;
          break;
        }
        unint64_t v64 = sub_F968AC(*(void *)(*(void *)&v24 + 184), v57 | ((unint64_t)(v58 & 0xFFFFFFF) << 32), (v58 >> 28) & 1, &v65);
        BOOL v27 = sub_FA8F9C(*(void *)&v24 + 200, (unsigned int *)&v64, v25, v56, v26);
        long long v14 = v55;
        if (v27) {
          break;
        }
        v63[0] = v23 - 2;
        sub_F9E7F0((uint64_t)&a1[356], &v57, (int *)v63);
        sub_F9F9EC(a1 + 356);
        v5 += 8;
        if (v5 == v9) {
          goto LABEL_62;
        }
LABEL_50:
        while (1)
        {
          int v29 = *(_DWORD *)(v5 + 4);
          if (*(_DWORD *)(*(void *)&v2 + 1464) != *(_DWORD *)v5 || *(_DWORD *)(*(void *)&v2 + 1468) != v29)
          {
            if (!*(void *)(*(void *)&v2 + 1440)) {
              break;
            }
            if (*(_DWORD *)(*(void *)&v2 + 1432) != *(_DWORD *)v5 || *(_DWORD *)(*(void *)&v2 + 1436) != v29) {
              break;
            }
          }
          v5 += 8;
          if (v5 == v9) {
            goto LABEL_62;
          }
        }
        if (v5 == v9) {
          goto LABEL_62;
        }
      }
      sub_F9E7F0((uint64_t)v14, &v57, (int *)&v62);
      sub_F9F9EC(v14);
      v63[0] = v62 - 1;
      sub_F9E7F0((uint64_t)&a1[356], &v57, (int *)v63);
      sub_F9F9EC(a1 + 356);
      unint64_t v28 = sub_F968AC(**(void **)&a1[1], v57 | ((unint64_t)(v58 & 0xFFFFFFF) << 32), (v58 & 0x10000000) == 0, &v62);
      *(void *)v63 = v28;
      if (__p == v60 || v60[-1].i64[1] != v28) {
        sub_29603C(&__p, v63);
      }
      unint64_t v64 = sub_F968AC(**(void **)&a1[1], v57 | ((unint64_t)(v58 & 0xFFFFFFF) << 32), (v58 >> 28) & 1, &v62);
      if (v60[-1].i64[1] != v64) {
        sub_29603C(&__p, &v64);
      }
LABEL_47:
      v5 += 8;
      if (v5 != v9) {
        goto LABEL_50;
      }
LABEL_62:
      int32x2_t v2 = *a1;
      uint64_t v10 = *(void *)(*(void *)a1 + 1744);
      uint64_t v11 = *(void *)(*(void *)a1 + 1632);
      if (v11) {
        goto LABEL_15;
      }
LABEL_63:
      uint64_t v13 = v10;
      goto LABEL_64;
    }
  }
LABEL_14:
  uint64_t v10 = *(void *)(*(void *)&v2 + 1744);
  uint64_t v11 = *(void *)(*(void *)&v2 + 1632);
  if (!v11) {
    goto LABEL_63;
  }
LABEL_15:
  uint64_t v12 = 104 * v11;
  uint64_t v13 = v10;
  while (*(void *)(*(void *)&v2 + 1640) == *(void *)v13
       && *(void *)(*(void *)&v2 + 1688) == *(void *)(v13 + 48)
       && *(_DWORD *)(*(void *)&v2 + 1736) == *(_DWORD *)(v13 + 96)
       || *(void *)(*(void *)&v2 + 1616)
       && *(void *)(*(void *)&v2 + 1512) == *(void *)v13
       && *(void *)(*(void *)&v2 + 1560) == *(void *)(v13 + 48)
       && *(_DWORD *)(*(void *)&v2 + 1608) == *(_DWORD *)(v13 + 96))
  {
    v13 += 104;
    v12 -= 104;
    if (!v12) {
      goto LABEL_89;
    }
  }
LABEL_64:
  uint64_t v32 = v10 + 104 * v11;
  if (v13 != v32)
  {
    do
    {
      unsigned int v33 = HIDWORD(*(void *)v13) & 0x40000000;
      if (*(uint64_t *)v13 < 0 && v33 == 0) {
        int v35 = 0x40000000;
      }
      else {
        int v35 = 0;
      }
      *(void *)v63 = *(void *)v13 | ((HIDWORD(*(void *)v13) & 0xFFFFFFF | ((*(_DWORD *)(v13 + 96) >> 27) << 31) | (*(void *)v13 >> 33) & 0x10000000 | (v33 >> 1) | v35) << 32);
      LODWORD(v64) = 0;
      sub_F9E7F0((uint64_t)&a1[132], v63, (int *)&v64);
      sub_F9F9EC(a1 + 132);
      uint64_t v36 = *(void *)(v13 + 48);
      unsigned int v37 = HIDWORD(v36) & 0x40000000;
      if (v36 < 0 && v37 == 0) {
        int v39 = 0x40000000;
      }
      else {
        int v39 = 0;
      }
      *(void *)v63 = *(void *)(v13 + 48) | ((HIDWORD(v36) & 0xFFFFFFF | (*(_DWORD *)(v13 + 96) >> 28 << 31) | ((unint64_t)v36 >> 33) & 0x10000000 | (v37 >> 1) | v39) << 32);
      LODWORD(v64) = 0;
      sub_F9E7F0((uint64_t)&a1[132], v63, (int *)&v64);
      sub_F9F9EC(a1 + 132);
      v13 += 104;
      if (v13 == v32) {
        break;
      }
      while (*(void *)(*(void *)&v2 + 1640) == *(void *)v13
           && *(void *)(*(void *)&v2 + 1688) == *(void *)(v13 + 48)
           && *(_DWORD *)(*(void *)&v2 + 1736) == *(_DWORD *)(v13 + 96)
           || *(void *)(*(void *)&v2 + 1616)
           && *(void *)(*(void *)&v2 + 1512) == *(void *)v13
           && *(void *)(*(void *)&v2 + 1560) == *(void *)(v13 + 48)
           && *(_DWORD *)(*(void *)&v2 + 1608) == *(_DWORD *)(v13 + 96))
      {
        v13 += 104;
        if (v13 == v32) {
          goto LABEL_88;
        }
      }
    }
    while (v13 != v32);
LABEL_88:
    int32x2_t v2 = *a1;
  }
LABEL_89:
  for (uint64_t i = *(void **)(sub_2ABCB4(*(void *)&v2 + 8) + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v41 = i[2];
    unsigned int v42 = HIDWORD(v41) & 0x40000000;
    if (v41 < 0 && v42 == 0) {
      int v44 = 0x40000000;
    }
    else {
      int v44 = 0;
    }
    v63[0] = i[2];
    v63[1] = ((unint64_t)v41 >> 33) & 0x10000000 | HIDWORD(v41) & 0xFFFFFFF | (v42 >> 1) | v44;
    LODWORD(v64) = 0;
    sub_F9E7F0((uint64_t)&a1[132], v63, (int *)&v64);
    sub_F9F9EC(a1 + 132);
  }
  unint64_t v45 = 126 - 2 * __clz(((char *)v60 - (unsigned char *)__p) >> 3);
  if (v60 == __p) {
    uint64_t v46 = 0;
  }
  else {
    uint64_t v46 = v45;
  }
  sub_F98280((int8x16_t *)__p, v60, (uint64_t)v63, v46, 1);
  uint64_t v47 = v60;
  if (__p != v60)
  {
    v48 = (char *)__p - 8;
    do
    {
      if (v48 + 16 == (char *)v60) {
        goto LABEL_119;
      }
      int v49 = *((_DWORD *)v48 + 2);
      v48 += 8;
      LODWORD(v50) = *((_DWORD *)v48 + 2);
    }
    while (v49 != v50 || *((_DWORD *)v48 + 1) != *((_DWORD *)v48 + 3));
    long long v52 = (int8x16_t *)(v48 + 16);
    if (v48 + 16 == (char *)v60)
    {
      uint64_t v53 = (int8x16_t *)(v48 + 8);
      if (v48 + 8 == (char *)v60) {
        goto LABEL_119;
      }
      goto LABEL_118;
    }
    do
    {
      if (v50 != v52->i32[0] || *((_DWORD *)v48 + 1) != v52->i32[1])
      {
        uint64_t v50 = v52->i64[0];
        *((void *)v48 + 1) = v52->i64[0];
        v48 += 8;
      }
      long long v52 = (int8x16_t *)((char *)v52 + 8);
    }
    while (v52 != v47);
    uint64_t v53 = (int8x16_t *)(v48 + 8);
    if (v48 + 8 != (char *)v60) {
LABEL_118:
    }
      v60 = v53;
  }
LABEL_119:
  sub_FA7B98((void **)(*(void *)a1 + 200), (void ***)&__p, *(unsigned int **)&a1[371], (int *)&a1[370], a1[370].i8[4], 4u);
  if (__p)
  {
    v60 = (int8x16_t *)__p;
    operator delete(__p);
  }
}

void sub_F8D6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F8D6FC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 1176);
  uint64_t v3 = *(void *)(a1 + 1168);
  unint64_t v71 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - v3) >> 4);
  if (v71 >> 30)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v75, "The source terminal of a query cannot have more than (2^30 - 1) nodes.");
    unint64_t v64 = (void *)sub_2F404((uint64_t)exception, &v75);
  }
  if (v2 != v3)
  {
    uint64_t v5 = 0;
    uint64_t v65 = a1 + 2976;
    v66 = (uint64_t **)(a1 + 1056);
    uint64_t v67 = a1 + 1200;
    do
    {
      uint64_t v6 = *(void *)(a1 + 1168);
      uint64_t v7 = (unsigned int *)(v6 + 80 * v5);
      uint64_t v8 = *(uint64_t **)a1;
      uint64_t v9 = **(void **)a1;
      if (*(unsigned char *)(v9 + 7774))
      {
        uint64_t v11 = *v7;
        unsigned int v10 = v7[1];
        uint64_t v12 = sub_290DEC(v9 + 3896, *v7, 1);
        if (!v12) {
          goto LABEL_4;
        }
        uint64_t v13 = &v12[-*(int *)v12];
        if (*(unsigned __int16 *)v13 < 5u) {
          goto LABEL_4;
        }
        uint64_t v14 = *((unsigned __int16 *)v13 + 2);
        if (!v14
          || *(_DWORD *)&v12[v14 + *(unsigned int *)&v12[v14]] <= (v10 & 0xFFFFFFF)
          || !sub_295DB4(v9, v11 & 0xF0000000FFFFFFFFLL | ((unint64_t)(v10 & 0xFFFFFFF) << 32)))
        {
          goto LABEL_4;
        }
        uint64_t v8 = *(uint64_t **)a1;
      }
      unsigned int v15 = (unsigned int *)(v6 + 80 * v5 + 8);
      unint64_t v16 = sub_F6DA8C(v8 + 19, (unsigned int *)(v6 + 80 * v5), (uint64_t)v15, *(void *)(a1 + 2968), 1, 1);
      if (v16 != -1 && HIDWORD(v16) != 0x7FFFFFFF)
      {
        int64_t v18 = sub_F8B1F0(*(void *)a1, v7, *v15, *(void *)(a1 + 2968));
        if (v18 != -1 && HIDWORD(v18) != 0x7FFFFFFF)
        {
          sub_EDA198((unsigned __int8 *)(*(void *)a1 + 8), *(void *)v7, 1, v65);
          unsigned int v20 = -991146299 * ((*(void *)(a1 + 2984) - *(void *)(a1 + 2976)) >> 3);
          if (v20)
          {
            uint64_t v21 = 0;
            int v22 = 0;
            if (v18 < 0) {
              char v23 = -5;
            }
            else {
              char v23 = 5;
            }
            unsigned int v73 = SHIDWORD(v18) / 10
                + (((103 * (char)(SHIDWORD(v18) % 10 + v23)) >> 15) & 1)
                + ((103 * (char)(SHIDWORD(v18) % 10 + v23)) >> 10);
            int v70 = v18 + v16;
            unint64_t v69 = (unint64_t)(HIDWORD(v18) + HIDWORD(v16)) << 32;
            uint64_t v72 = 104 * v20;
            while (2)
            {
              uint64_t v28 = *(void *)(a1 + 2976);
              int v29 = (uint64_t *)(v28 + v21);
              int v30 = *(_DWORD *)(a1 + 2960);
              if (v30 == 0x7FFFFFFF) {
                int v31 = 0x7FFFFFFF;
              }
              else {
                int v31 = v73 + v30;
              }
              uint64_t v32 = *(void *)a1;
              uint64_t v33 = *(void *)(a1 + 2968);
              if (*(unsigned char *)(*(void *)a1 + 1394))
              {
                if (sub_F56CA0(v32 + 1480, v28 + v21) != -1) {
                  goto LABEL_34;
                }
                unint64_t v34 = HIDWORD(*v29);
                unsigned int v35 = v34 & 0x40000000;
                BOOL v36 = *v29 < 0 && v35 == 0;
                int v37 = v36 ? 0x40000000 : 0;
                *(void *)&long long v75 = *v29 | ((v34 & 0x6FFFFFFF | (((v37 | (v35 >> 1)) == 0x40000000) << 31)) << 32);
                if (sub_F58474(v32 + 1400, (uint64_t *)&v75) != -1) {
                  goto LABEL_34;
                }
              }
              unint64_t v38 = sub_F6D3B4((uint64_t *)(v32 + 152), v28 + v21, 0x3B9ACA00u, v33);
              unint64_t v39 = v38 & 0xFFFFFFFF00000000;
              if (v38 == -1 || v39 == 0x7FFFFFFF00000000) {
                goto LABEL_34;
              }
              uint64_t v41 = v28 + v21;
              uint64_t v42 = *(void *)(v28 + v21);
              unsigned int v43 = HIDWORD(v42) & 0x40000000;
              if (v42 < 0 && v43 == 0) {
                int v45 = 0x40000000;
              }
              else {
                int v45 = 0;
              }
              uint64_t v83 = *(void *)(v28 + v21) | ((HIDWORD(*(void *)(v28 + v21)) & 0xFFFFFFF | ((*(_DWORD *)(v28 + v21 + 96) >> 27) << 31) | (*(void *)(v28 + v21) >> 33) & 0x10000000 | (v43 >> 1) | v45) << 32);
              unint64_t v46 = v39 + v69;
              unint64_t v82 = v46 | (v70 + v38);
              char v47 = *(unsigned char *)(a1 + 2964);
              *(void *)&long long v75 = v82;
              DWORD2(v75) = v31;
              BYTE12(v75) = v47;
              unsigned int v48 = HIDWORD(*(void *)v41) & 0x40000000;
              if (*(uint64_t *)v41 < 0 && v48 == 0) {
                int v50 = 0x40000000;
              }
              else {
                int v50 = 0;
              }
              uint64_t v76 = *(void *)v41 | ((HIDWORD(*(void *)v41) & 0xFFFFFFF | ((*(_DWORD *)(v41 + 96) >> 27) << 31) | (*(void *)v41 >> 33) & 0x10000000 | (v48 >> 1) | v50) << 32);
              uint64_t v51 = *(void *)(v41 + 48);
              unsigned int v52 = HIDWORD(v51) & 0x40000000;
              if (v51 < 0 && v52 == 0) {
                int v54 = 0x40000000;
              }
              else {
                int v54 = 0;
              }
              unint64_t v77 = *(void *)(v41 + 48) | ((HIDWORD(v51) & 0xFFFFFFF | (*(_DWORD *)(v41 + 96) >> 28 << 31) | ((unint64_t)v51 >> 33) & 0x10000000 | (v52 >> 1) | v54) << 32);
              int v78 = *(_DWORD *)(v41 + 96);
              int v79 = v22;
              int v80 = 0;
              int v81 = v5 | 0x80000000;
              unsigned int v55 = HIDWORD(*(void *)v41) & 0x40000000;
              if (*(uint64_t *)v41 < 0 && v55 == 0) {
                int v57 = 0x40000000;
              }
              else {
                int v57 = 0;
              }
              uint64_t v74 = *(void *)v41 | ((HIDWORD(*(void *)v41) & 0xFFFFFFF | ((*(_DWORD *)(v41 + 96) >> 27) << 31) | (*(void *)v41 >> 33) & 0x10000000 | (v55 >> 1) | v57) << 32);
              int v58 = *(_DWORD *)(a1 + 1044);
              if (v58 != 0x7FFFFFFF)
              {
                unint64_t v59 = HIDWORD(v46);
                sub_F9E678(v67, (unsigned int *)&v74, v84);
                if (!*(void *)v84) {
                  goto LABEL_83;
                }
                sub_F9E678(v67, (unsigned int *)&v74, v84);
                uint64_t v60 = *(void *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v85 + 8) + 8);
                if (v75 < v60
                  || v75 <= v60 && SDWORD1(v75) < SHIDWORD(v60))
                {
                  sub_F9E678(v67, (unsigned int *)&v74, v84);
                  int v61 = *(_DWORD *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(v85 + 8) + 12);
                  int v62 = *(_DWORD *)(a1 + 1044);
                  if (v62 >= v61 && v58 < (int)v59)
                  {
                    int v24 = -1;
                    goto LABEL_26;
                  }
                  if (v62 < v61)
                  {
LABEL_83:
                    if (v58 >= (int)v59)
                    {
                      int v24 = 1;
LABEL_26:
                      *(_DWORD *)(a1 + 1048) += v24;
                    }
                  }
                }
              }
              sub_F8C688(v67, (unsigned int *)&v74, (uint64_t)&v75);
              unsigned int v25 = HIDWORD(*v29) & 0x40000000;
              if (*v29 < 0 && v25 == 0) {
                int v27 = 0x40000000;
              }
              else {
                int v27 = 0;
              }
              *(void *)v84 = *v29 | ((HIDWORD(*v29) & 0xFFFFFFF | (*(_DWORD *)(v41 + 96) >> 27 << 31) | ((unint64_t)*v29 >> 33) & 0x10000000 | (v25 >> 1) | v27) << 32);
              LODWORD(v74) = 0;
              sub_F9E7F0((uint64_t)v66, v84, (int *)&v74);
              sub_F9EA08(v66, a2);
              sub_F9F9EC((int32x2_t *)v66);
              sub_F9040C((int32x2_t *)a1, (unsigned int *)&v83, (unsigned int *)&v82, v5);
LABEL_34:
              ++v22;
              v21 += 104;
              if (v72 == v21) {
                break;
              }
              continue;
            }
          }
        }
      }
LABEL_4:
      ++v5;
    }
    while (v5 != v71);
  }
}

void sub_F8DD58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_F8DD88(uint64_t a1)
{
  uint64_t v39 = -858993459 * ((*(void *)(a1 + 1176) - *(void *)(a1 + 1168)) >> 4);
  if (v39)
  {
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(a1 + 1168);
      uint64_t v42 = v2;
      uint64_t v4 = (unsigned int *)(v3 + 80 * v2);
      if (*(unsigned char *)(a1 + 3048)) {
        sub_F91558((int32x2_t *)a1, (unsigned int *)(v3 + 80 * v2));
      }
      sub_FA18AC(*(void *)(a1 + 976) + 24, v4, v46);
      if (*(void *)v46)
      {
        uint64_t v5 = v3 + 80 * v42;
        unsigned int v45 = *(_DWORD *)(v5 + 8);
        unint64_t v6 = sub_F6DA8C((uint64_t *)(*(void *)a1 + 152), v4, v5 + 8, *(void *)(a1 + 2968), 1, 1);
        unint64_t v41 = v6;
        if (v6 != -1 && (v6 & 0xFFFFFFFF00000000) != 0x7FFFFFFF00000000)
        {
          sub_FA18AC(*(void *)(a1 + 976) + 24, v4, v46);
          uint64_t v8 = *(uint64_t **)(v47 + 8);
          v40 = *(uint64_t **)(v47 + 16);
          if (v8 != v40)
          {
            do
            {
              unsigned int v43 = v8;
              uint64_t v9 = (void *)(**(void **)(a1 + 976) + 32 * *v8);
              uint64_t v10 = -858993459 * ((v9[1] - *v9) >> 4);
              if (v10)
              {
                for (uint64_t i = 0; i != v10; ++i)
                {
                  uint64_t v12 = (unsigned int *)(*v9 + 80 * i);
                  if (*v12 == *v4 && v12[1] == v4[1])
                  {
                    uint64_t v13 = *v9 + 80 * i;
                    unsigned int v14 = *(_DWORD *)(v13 + 8);
                    unint64_t v15 = sub_F6DA8C((uint64_t *)(*(void *)a1 + 152), v12, v13 + 8, *(void *)(a1 + 2968), 1, 1);
                    int v16 = v15;
                    BOOL v17 = v15 == -1 || HIDWORD(v15) == 0x7FFFFFFF;
                    if (!v17 && v45 >= v14)
                    {
                      unint64_t v44 = HIDWORD(v15);
                      int32x2_t v19 = *(int32x2_t *)a1;
                      uint64_t v20 = *(void *)(a1 + 2968);
                      if (!*(unsigned char *)(*(void *)a1 + 1394)) {
                        goto LABEL_51;
                      }
                      uint64_t v21 = *v4;
                      unsigned int v22 = v4[1];
                      unint64_t v23 = v22 & 0xFFFFFFF | (((v22 >> 28) & 3) << 29) | (((v22 & 0x60000000) == 0x40000000) << 31);
                      uint64_t v24 = *(void *)(*(void *)&v19 + 1456) - 1;
                      unint64_t v25 = 0x2127599BF4325C37
                          * (((v23 >> 29) & 2 | (v23 >> 31) | (v23 >> 27) & 4 | (v21 << 32) | (8 * (v22 & 0xFFFFFFF))) ^ (((v21 << 32) | (8 * (unint64_t)(v22 & 0xFFFFFFF))) >> 23));
                      uint64_t v26 = *(void *)(*(void *)&v19 + 1472);
                      int v27 = *(_DWORD *)(*(void *)&v19 + 1464);
                      int v28 = *(_DWORD *)(*(void *)&v19 + 1468);
                      unint64_t v29 = (v25 ^ (v25 >> 47)) & v24;
                      int v30 = *(_DWORD *)(v26 + 8 * v29);
                      int v31 = *(_DWORD *)(v26 + 8 * v29 + 4);
                      if (v27 == v30 && v28 == v31) {
                        goto LABEL_51;
                      }
                      if (*(void *)(*(void *)&v19 + 1440))
                      {
                        uint64_t v33 = 1;
                        while (*(_DWORD *)(*(void *)&v19 + 1432) == v30
                             && *(_DWORD *)(*(void *)&v19 + 1436) == v31
                             || v31 != v23
                             || v30 != v21)
                        {
                          unint64_t v29 = (v29 + v33) & v24;
                          int v30 = *(_DWORD *)(v26 + 8 * v29);
                          int v31 = *(_DWORD *)(v26 + 8 * v29 + 4);
                          ++v33;
                          if (v27 == v30 && v28 == v31) {
                            goto LABEL_51;
                          }
                        }
                      }
                      else
                      {
                        uint64_t v35 = 1;
                        while (v31 != v23 || v30 != v21)
                        {
                          unint64_t v29 = (v29 + v35) & v24;
                          int v30 = *(_DWORD *)(v26 + 8 * v29);
                          int v31 = *(_DWORD *)(v26 + 8 * v29 + 4);
                          ++v35;
                          if (v27 == v30 && v28 == v31) {
                            goto LABEL_51;
                          }
                        }
                      }
                      if (v29 == -1)
                      {
LABEL_51:
                        int v37 = (uint64_t *)(*(void *)&v19 + 152);
                        sub_ED9E74((unsigned __int8 *)(*(void *)&v19 + 8), *(void *)v4 | ((HIDWORD(*(void *)v4) & 0xFFFFFFF | (*(void *)v4 >> 31) & 0x60000000 | (((*(void *)v4 & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32), (uint64_t)v46);
                        unint64_t v38 = sub_F6D9F4(v37, v46, v45 - v14, v20);
                        if (v38 != -1 && HIDWORD(v38) != 0x7FFFFFFF)
                        {
                          v46[0] = v38 + v16 + v41;
                          v46[1] = v44 + HIDWORD(v41) + HIDWORD(v38);
                          sub_F8C338(a1, v4, v46, *v43, v42, i, 1, 0);
                        }
                      }
                    }
                  }
                }
              }
              uint64_t v8 = v43 + 1;
            }
            while (v43 + 1 != v40);
          }
        }
      }
      uint64_t v2 = v42 + 1;
    }
    while (v42 + 1 != v39);
  }
}

void sub_F8E194(void *****a1, unsigned int *a2, unsigned int a3)
{
  if (*((unsigned char *)*a1 + 1392) && sub_65BD8()) {
    unsigned int v6 = sub_F78BBC((uint64_t *)a1[1]) - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  unsigned int v7 = -1;
  if (*a2 < v6 && *a2 != -1) {
    unsigned int v6 = *a2;
  }
  unsigned int v109 = v6;
  unsigned int v110 = v6;
  uint64_t v9 = (uint64_t)(a1 + 150);
  uint64_t v10 = (unsigned int *)v107 + 2;
  uint64_t v11 = a1 + 378;
  v88 = a1 + 375;
  int64x2_t v92 = vdupq_n_s64(0x5000FFFF00000000uLL);
  while (*((_DWORD *)a1 + 518) && ((unint64_t)((char *)a1[250] - (char *)a1[249]) >> 2) < a3)
  {
    uint64_t v12 = &a1[246][10 * *(unsigned int *)a1[253]];
    v107[0] = *v12;
    long long v13 = v12[3];
    long long v14 = v12[4];
    long long v15 = v12[2];
    v107[1] = v12[1];
    v107[3] = v13;
    long long v108 = v14;
    v107[2] = v15;
    sub_F773C4(v9);
    uint64_t v16 = (uint64_t)**a1;
    if (*(unsigned char *)(v16 + 7774))
    {
      uint64_t v18 = LODWORD(v107[0]);
      int v17 = DWORD1(v107[0]);
      int32x2_t v19 = sub_290DEC(v16 + 3896, v107[0], 1);
      if (!v19) {
        goto LABEL_79;
      }
      uint64_t v20 = &v19[-*(int *)v19];
      if (*(unsigned __int16 *)v20 < 5u) {
        goto LABEL_79;
      }
      uint64_t v21 = *((unsigned __int16 *)v20 + 2);
      if (!v21
        || *(_DWORD *)&v19[v21 + *(unsigned int *)&v19[v21]] <= (v17 & 0xFFFFFFFu)
        || !sub_295DB4(v16, v18 & 0xF0000000FFFFFFFFLL | ((unint64_t)(v17 & 0xFFFFFFF) << 32)))
      {
        goto LABEL_79;
      }
    }
    if (*((unsigned char *)a1 + 1052)
      && !sub_2961B8(**a1, LODWORD(v107[0]) | ((unint64_t)(DWORD1(v107[0]) & 0xFFFFFFF) << 32)))
    {
      goto LABEL_79;
    }
    int v22 = DWORD2(v108);
    unsigned int v23 = *((_DWORD *)a1 + 260);
    if (v23 != -1 && DWORD2(v107[0]) > v23 || *((unsigned char *)a1 + 3048) && sub_F90A50((uint64_t)a1, v10)) {
      return;
    }
    int v24 = *((_DWORD *)a1 + 261);
    if (v24 != 0x7FFFFFFF && SHIDWORD(v107[0]) <= v24) {
      --*((_DWORD *)a1 + 262);
    }
    if (*v11 != -1
      && sub_F963A0((uint64_t)*a1[1], LODWORD(v107[0]) | ((unint64_t)(DWORD1(v107[0]) & 0xFFFFFFF) << 32), v11))
    {
      goto LABEL_79;
    }
    int v25 = v22 & 0x7FFFFFFF;
    unsigned int v106 = sub_F90BA4((uint64_t)a1, (unsigned int *)v107, v10, v22 & 0x7FFFFFFF);
    int v26 = *((_DWORD *)a1 + 740);
    unsigned int v27 = 0x7FFFFFFF;
    if (v26 != 0x7FFFFFFF)
    {
      if (v107[0] < 0) {
        char v28 = -5;
      }
      else {
        char v28 = 5;
      }
      unsigned int v27 = SHIDWORD(v107[0]) / -10
          + v26
          + (((-103 * (char)(v28 + SHIDWORD(v107[0]) % 10)) >> 15) & 1)
          + ((-103 * (char)(v28 + SHIDWORD(v107[0]) % 10)) >> 10);
    }
    unsigned int v105 = v27;
    int v29 = sub_35E640();
    int v30 = (int *)&v110;
    if (v29) {
      int v30 = (int *)&v109;
    }
    int v31 = *v30 >= v106 ? &v106 : (unsigned int *)v30;
    int v32 = sub_F90FB4((uint64_t)a1, (unsigned int *)v107, (unsigned int *)a1[371], (int *)&v105, *((unsigned char *)a1 + 2964), v31);
    int v104 = v32;
    if (v32 != -1)
    {
      if (!v32)
      {
        uint64_t v90 = v9;
        unsigned int v91 = a3;
        if (!*((unsigned char *)a1 + 3048)) {
          sub_F9040C((int32x2_t *)a1, (unsigned int *)v107, v10, v22 & 0x7FFFFFFF);
        }
        int v93 = v22 & 0x7FFFFFFF;
        v89 = v10;
        sub_EDA198((unsigned __int8 *)*a1 + 8, *(unint64_t *)&v107[0], 1, (uint64_t)(a1 + 372));
        unsigned int v33 = -991146299 * ((unint64_t)((char *)a1[373] - (char *)a1[372]) >> 3);
        if (v33)
        {
          unint64_t v34 = 0;
          int v35 = 0;
          uint64_t v36 = 104 * v33;
          do
          {
            int v37 = a1[372];
            unint64_t v38 = (uint64_t *)&v37[v34 / 8];
            int32x2_t v39 = (int32x2_t)*a1;
            uint64_t v40 = (uint64_t)a1[371];
            if (!*((unsigned char *)*a1 + 1394)
              || sub_F56CA0(*(void *)&v39 + 1480, (uint64_t)&v37[v34 / 8]) == -1
              && ((unint64_t v41 = HIDWORD(*v38), v42 = v41 & 0x40000000, *v38 < 0) ? (v43 = v42 == 0) : (v43 = 0),
                  !v43 ? (int v44 = 0) : (int v44 = 0x40000000),
                  unint64_t v95 = *v38 | ((v41 & 0x6FFFFFFF | (((v44 | (v42 >> 1)) == 0x40000000) << 31)) << 32),
                  sub_F58474(*(void *)&v39 + 1400, (uint64_t *)&v95) == -1))
            {
              unint64_t v45 = sub_F6DA00((uint64_t *)(*(void *)&v39 + 152), (uint64_t)&v37[v34 / 8], v40);
              unint64_t v46 = v45 & 0xFFFFFFFF00000000;
              if (v45 != -1 && v46 != 0x7FFFFFFF00000000)
              {
                unsigned int v48 = &v37[v34 / 8];
                uint64_t v49 = (uint64_t)v37[v34 / 8];
                unsigned int v50 = HIDWORD(v49) & 0x40000000;
                if (v49 < 0 && v50 == 0) {
                  int v52 = 0x40000000;
                }
                else {
                  int v52 = 0;
                }
                unint64_t v103 = v37[v34 / 8] | ((HIDWORD(v49) & 0xFFFFFFF | (LODWORD(v37[v34 / 8 + 12]) >> 27 << 31) | ((unint64_t)v49 >> 33) & 0x10000000 | (v50 >> 1) | v52) << 32);
                unint64_t v94 = (*((void *)&v107[0] + 1) + v46) & 0xFFFFFFFF00000000 | (DWORD2(v107[0]) + v45);
                unint64_t v95 = v94;
                char v53 = *((unsigned char *)a1 + 2964);
                LODWORD(v96) = v105;
                BYTE4(v96) = v53;
                unsigned int v54 = ((unint64_t)*v48 >> 32) & 0x40000000;
                if ((uint64_t)*v48 < 0 && v54 == 0) {
                  int v56 = 0x40000000;
                }
                else {
                  int v56 = 0;
                }
                v97.i64[0] = *v48 | ((((unint64_t)*v48 >> 32) & 0xFFFFFFF | ((*((_DWORD *)v48 + 24) >> 27) << 31) | ((unint64_t)*v48 >> 33) & 0x10000000 | (v54 >> 1) | v56) << 32);
                uint64_t v57 = (uint64_t)v48[6];
                unsigned int v58 = HIDWORD(v57) & 0x40000000;
                if (v57 < 0 && v58 == 0) {
                  int v60 = 0x40000000;
                }
                else {
                  int v60 = 0;
                }
                v97.i64[1] = v48[6] | ((HIDWORD(v57) & 0xFFFFFFF | (*((_DWORD *)v48 + 24) >> 28 << 31) | ((unint64_t)v57 >> 33) & 0x10000000 | (v58 >> 1) | v60) << 32);
                LODWORD(v98) = *((_DWORD *)v48 + 24);
                int v100 = v35;
                int v101 = 0;
                int v102 = v93;
                sub_F8B2F0((uint64_t)a1, (unsigned int *)&v103, &v95);
                sub_F9040C((int32x2_t *)a1, (unsigned int *)&v103, (unsigned int *)&v94, v93);
              }
            }
            ++v35;
            v34 += 104;
          }
          while (v36 != v34);
        }
LABEL_100:
        int v80 = *((_DWORD *)a1 + 261);
        if (v80 == 0x7FFFFFFF)
        {
          int v61 = 0;
          a3 = v91;
          uint64_t v10 = v89;
          uint64_t v9 = v90;
          uint64_t v11 = a1 + 378;
        }
        else
        {
          int v61 = 0;
          a3 = v91;
          uint64_t v10 = v89;
          uint64_t v9 = v90;
          uint64_t v11 = a1 + 378;
          if (!*((_DWORD *)a1 + 262) && v7 == -1)
          {
            int v81 = a1[119];
            unint64_t v82 = a1[120];
            if (v81 == v82)
            {
              int v61 = 3;
              unsigned int v7 = -1;
            }
            else
            {
              unsigned int v7 = 0;
              uint64_t v83 = a1[116];
              do
              {
                if (0xAAAAAAAAAAAAAAABLL * (a1[117] - v83) > *v81) {
                  unint64_t v84 = (unint64_t)v83[3 * *v81 + 1];
                }
                else {
                  unint64_t v84 = 0x7FFFFFFFFFFFFFFFLL;
                }
                unint64_t v85 = HIDWORD(v84);
                if (v7 > v84) {
                  LODWORD(v84) = v7;
                }
                if (v80 >= (int)v85) {
                  unsigned int v7 = v84;
                }
                ++v81;
              }
              while (v81 != v82);
              unsigned int v86 = *((_DWORD *)a1 + 260);
              BOOL v87 = v86 != -1 && v7 >= v86;
              int v61 = 0;
              if (!v87) {
                *((_DWORD *)a1 + 260) = v7;
              }
            }
          }
        }
        goto LABEL_80;
      }
      unint64_t v62 = sub_F968AC((uint64_t)*a1[1], LODWORD(v107[0]) | ((unint64_t)(DWORD1(v107[0]) & 0xFFFFFFF) << 32), (DWORD1(v107[0]) >> 28) & 1, &v104);
      unint64_t v103 = v62;
      if (v62)
      {
        if (v62 <= 0xFFFFFFFEFFFFFFFFLL)
        {
          char v63 = *((unsigned char *)a1 + 2964);
          sub_FA7290(*a1 + 25, *(unint64_t *)&v107[0], &v104, 1u, (unsigned int *)a1[371], (int *)&v105, v63, (uint64_t)v88);
          if (a1[375] != a1[376])
          {
            sub_5217C8((uint64_t)(a1 + 260), &v103, (uint64_t)&v95);
            unint64_t v64 = v95;
            if (v97.i8[0])
            {
              uint64_t v65 = *(void *)(v95 + 8) + 12 * v96;
              *(void *)uint64_t v65 = v103;
              *(_DWORD *)(v65 + 8) = 0x7FFFFFFF;
            }
            uint64_t v90 = v9;
            unsigned int v91 = a3;
            uint64_t v66 = *(void *)(v64 + 8) + 12 * v96;
            int v69 = *(_DWORD *)(v66 + 8);
            uint64_t v67 = (_DWORD *)(v66 + 8);
            int v68 = v69;
            if (v69 == 0x7FFFFFFF || SHIDWORD(v107[0]) < v68) {
              *uint64_t v67 = HIDWORD(v107[0]);
            }
            uint64_t v70 = -858993459 * ((unint64_t)((char *)a1[376] - (char *)a1[375]) >> 3);
            if (v70)
            {
              uint64_t v71 = 0;
              int v72 = 0;
              uint64_t v73 = 40 * v70;
              do
              {
                uint64_t v74 = *v88 + v71;
                uint64_t v75 = *(void *)(v74 + 28);
                unint64_t v76 = v75 & 0xFFFFFFFF00000000;
                if (v75 != -1 && v76 != 0x7FFFFFFF00000000)
                {
                  unint64_t v95 = (v76 + *((void *)&v107[0] + 1)) & 0xFFFFFFFF00000000 | (v75 + DWORD2(v107[0]));
                  LODWORD(v96) = v105;
                  BYTE4(v96) = v63;
                  int64x2_t v97 = v92;
                  LODWORD(v98) = 0;
                  int v100 = v72;
                  int v101 = v104;
                  int v102 = v25;
                  int v78 = *(_DWORD *)(v74 + 32);
                  long long v79 = *(_OWORD *)(v74 + 16);
                  int64x2_t v97 = *(int64x2_t *)v74;
                  long long v98 = v79;
                  int v99 = v78;
                  unint64_t v94 = *(void *)v74;
                  sub_F8B2F0((uint64_t)a1, (unsigned int *)&v94, &v95);
                }
                ++v72;
                v71 += 40;
              }
              while (v73 != v71);
            }
            v89 = v10;
            goto LABEL_100;
          }
        }
      }
      int v61 = 2;
      uint64_t v11 = a1 + 378;
    }
    else
    {
LABEL_79:
      int v61 = 2;
    }
LABEL_80:
    if (v61 == 3) {
      return;
    }
  }
}

void sub_F8EA18(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, char a5, _DWORD *a6, int a7, unsigned int *a8, unsigned int **a9, void *a10, unsigned int a11, int a12, int a13)
{
  sub_F87098(a1);
  *(_DWORD *)(a1 + 2960) = *a4;
  *(unsigned char *)(a1 + 2964) = a5;
  *(void *)(a1 + 2968) = a3;
  if (a1 + 1168 != a2) {
    sub_BFF628((void *)(a1 + 1168), *(char **)a2, *(char **)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4));
  }
  *(void *)(a1 + 1192) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 1040) = *a6;
  *(_DWORD *)(a1 + 1044) = a7;
  *(_DWORD *)(a1 + 20) = a13;
  *(void *)(a1 + 976) = a1 + 24;
  sub_F8CEE8((int32x2_t *)a1);
  sub_F8D6FC(a1, a10);
  uint64_t v21 = *a9;
  uint64_t v20 = a9[1];
  if (*a9 != v20)
  {
    do
    {
      unsigned int v23 = v21[2];
      sub_F9E7F0(a1 + 1056, v21, (int *)&v23);
      sub_F9EA08((uint64_t **)(a1 + 1056), a10);
      sub_F9F9EC((int32x2_t *)(a1 + 1056));
      v21 += 4;
    }
    while (v21 != v20);
  }
  sub_F8E194((void *****)a1, a8, a11);
}

void sub_F8EB54(int32x2_t *a1, int32x2_t *a2, unsigned int ***a3, uint64_t a4, __int32 a5, __int8 a6, __int32 a7, __int32 a8, unsigned int a9, int a10, unsigned int a11)
{
  sub_F87098((uint64_t)a1);
  int32x2_t v19 = *a3;
  uint64_t v18 = a3[1];
  if (*a3 == v18)
  {
    uint64_t v20 = *a3;
  }
  else
  {
    do
    {
      int v24 = a1;
      sub_F8AFE4(a1 + 3, v19, 1, (void **)&v24);
      v19 += 4;
    }
    while (v19 != v18);
    int32x2_t v19 = *a3;
    uint64_t v20 = a3[1];
  }
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a1[117] - *(void *)&a1[116]) >> 3);
  unint64_t v22 = ((char *)v20 - (char *)v19) >> 5;
  if (v22 > v21) {
    sub_F9E408((void **)&a1[116], v22 - v21);
  }
  a1[122] = (int32x2_t)&a1[3];
  sub_F8EC68(a1, a2, a4, a5, a6, a7, a8, a9, a11);
}

void sub_F8EC68(int32x2_t *a1, int32x2_t *a2, uint64_t a3, __int32 a4, __int8 a5, __int32 a6, __int32 a7, unsigned int a8, unsigned int a9)
{
  unsigned int v18 = a8;
  a1[370].i32[0] = a4;
  a1[370].i8[4] = a5;
  a1[371] = (int32x2_t)a3;
  long long v13 = a1 + 146;
  if (v13 != a2) {
    sub_BFF628(v13, *(char **)a2, *(char **)&a2[1], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&a2[1] - *(void *)a2) >> 4));
  }
  a1[149] = a2[3];
  a1[130].i32[0] = a6;
  a1[130].i32[1] = a7;
  long long v14 = (void *)a1[122];
  if (v14[11]
     + v14[5]
     + v14[17]
     + v14[23]
     + v14[29]
     + v14[35]
     + v14[41]
     + v14[47]
     + v14[53]
     + v14[59]
     + v14[65]
     + v14[71]
     + v14[77]
     + v14[83]
     + v14[89]
     + v14[95]
    || a1[381].i8[0])
  {
    sub_F8CEE8(a1);
    __p = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    sub_F8D6FC((uint64_t)a1, &__p);
    if (__p)
    {
      uint64_t v16 = __p;
      operator delete(__p);
    }
    sub_F8DD88((uint64_t)a1);
    sub_F8E194(a1, &v18, a9);
  }
}

void sub_F8EDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F8EDDC(int32x2_t *a1, int32x2_t *a2, __int32 a3, __int8 a4, __int32 a5, __int32 a6, unsigned int a7, unsigned int a8, __int32 a9, __int8 a10)
{
  if (!*(void *)&a1[379])
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v25, "A BucketSearchDataProvider is required for the bucket search query");
    int v24 = (void *)sub_2F404((uint64_t)exception, &v25);
  }
  sub_F87098((uint64_t)a1);
  a1[122] = (int32x2_t)&a1[3];
  a1[381].i8[0] = 1;
  a1[381].i8[1] = a10;
  a1[381].i32[1] = a9;
  a1[384] = a1[383];
  a1[382].i32[0] = 0;
  uint64_t v18 = (uint64_t)a1[379];
  unsigned int v19 = *(_DWORD *)(v18 + 164);
  uint64_t v20 = sub_F89358(v18);
  if (v19 < a7 || a7 == -1) {
    unsigned int v22 = v19;
  }
  else {
    unsigned int v22 = a7;
  }

  sub_F8EC68(a1, a2, v20, a3, a4, a5, a6, v22, a8);
}

void sub_F8EF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F8EF3C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 928);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 936) - v3) >> 3) <= a2 || !*(_DWORD *)(v3 + 24 * a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v9, a2);
    unsigned int v6 = std::string::insert(&v9, 0, "No valid data for target id ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v6->__r_.__value_.__r.__words[2];
    long long v10 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return *(_DWORD *)(v3 + 24 * a2 + 20) & 0x3FFFFFFF;
}

void sub_F8F018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F8F070(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 928);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 936) - v3) >> 3) <= a2 || !*(_DWORD *)(v3 + 24 * a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v9, a2);
    unsigned int v6 = std::string::insert(&v9, 0, "No valid data for target id ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v6->__r_.__value_.__r.__words[2];
    long long v10 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return *(unsigned int *)(v3 + 24 * a2 + 16);
}

void sub_F8F148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F8F1A0(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[116];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[117] - v3) >> 3) <= a2 || !*(_DWORD *)(v3 + 24 * a2))
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v9, a2);
    unsigned int v6 = std::string::insert(&v9, 0, "No valid data for target id ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v11 = v6->__r_.__value_.__r.__words[2];
    long long v10 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = (void *)sub_2F404((uint64_t)exception, &v10);
  }
  return *(void *)(a1[482] + 8 * a2);
}

void sub_F8F274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F8F2CC@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_EB1D94(a3);
  uint64_t v8 = 0;
  sub_F8F3D4(a1, a2, (uint64_t)v7, a3);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_F8F3B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F89BE8((uint64_t *)va);
  sub_4451C0(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_F8F3D4(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_EB1BF8(a4);
  uint64_t v8 = a1[116];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[117] - v8) >> 3) > a2)
  {
    std::string v9 = (uint64_t *)(v8 + 24 * a2);
    if (*(_DWORD *)v9)
    {
      if (!*((unsigned char *)a1 + 3048) || *((unsigned char *)a1 + 3049))
      {
        uint64_t v10 = v8 + 24 * a2;
        std::string::size_type v11 = (int *)(v10 + 20);
        if ((*(unsigned char *)(v10 + 23) & 0x40) != 0)
        {
          uint64_t v15 = *v9;
          sub_ED9E74((unsigned __int8 *)(*a1 + 8), *v9 | ((HIDWORD(*v9) & 0xFFFFFFF | ((unint64_t)*v9 >> 31) & 0x60000000 | (((*v9 & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32), (uint64_t)v18);
          sub_EB2444(a4, v15, v18);
          sub_EB241C(a4, a1[146] + 80 * (*v11 & 0x3FFFFFFF) + 8);
          uint64_t v12 = 0;
          int v16 = *v11;
          uint64_t v14 = 32 * a2;
          if (v16 < 0)
          {
LABEL_10:
            sub_F8FB60(a1, (_DWORD *)(v8 + 24 * a2), a1[485] + 40 * a2, (unint64_t *)(*(void *)(*(void *)a1[122] + v14) + 80 * *(unsigned int *)(v8 + 24 * a2 + 16)), (uint64_t)v18);
            sub_EB3F30(a4, (uint64_t)v18);
            sub_4451C0((uint64_t)v18);
          }
        }
        else
        {
          uint64_t v12 = sub_F8F710((uint64_t)a1, (unsigned int *)(v8 + 24 * a2), a3, a4);
          int v13 = *v11;
          uint64_t v14 = 32 * a2;
          if (v13 < 0) {
            goto LABEL_10;
          }
        }
        sub_EB22B4(a4, *(void *)(*(void *)a1[122] + v14) + 80 * *(unsigned int *)(v8 + 24 * a2 + 16) + 8);
        return v12;
      }
    }
  }
  return 0;
}

void sub_F8F5F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4451C0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_F8F608@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  sub_EB1D94(a3);
  uint64_t v8 = 0;
  sub_F8F710(a1, a2, (uint64_t)v7, a3);
  uint64_t result = (uint64_t)v8;
  if (v8 == v7) {
    return (*(uint64_t (**)(void *))(v7[0] + 32))(v7);
  }
  if (v8) {
    return (*(uint64_t (**)(void))(*v8 + 40))();
  }
  return result;
}

void sub_F8F6F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_F89BE8((uint64_t *)va);
  sub_4451C0(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_F8F710(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  sub_EB1BF8(a4);
  if (!*a2) {
    return 0;
  }
  unint64_t v38 = 0;
  int32x2_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v37 = *(void *)a2;
  if (!v37) {
    return 0;
  }
  do
  {
    sub_F9E678(a1 + 1200, (unsigned int *)&v37, &v27);
    unsigned int v8 = *(_DWORD *)(*((void *)&v28 + 1) + 8);
    uint64_t v9 = *(void *)(a1 + 1968);
    sub_F7668C(&v38, v9 + 80 * v8 + 8);
    if ((*(_DWORD *)(v9 + 80 * v8 + 72) & 0x80000000) != 0)
    {
      uint64_t v37 = 0;
      std::string::size_type v11 = v38;
      uint64_t v10 = v39;
      if (v38 != v39) {
        goto LABEL_6;
      }
LABEL_29:
      uint64_t v20 = 0;
      if (!v10) {
        return v20;
      }
      goto LABEL_34;
    }
    uint64_t v37 = *(void *)(v9 + 80 * v8 + 32);
  }
  while (v37);
  std::string::size_type v11 = v38;
  uint64_t v10 = v39;
  if (v38 == v39) {
    goto LABEL_29;
  }
LABEL_6:
  __p = 0;
  int v35 = 0;
  uint64_t v36 = 0;
  while (!*((_DWORD *)v11 + 15))
  {
    if (*(void *)(a3 + 24) && !sub_EB2EC4(a4))
    {
      *(void *)&long long v27 = *((void *)v11 + 2);
      uint64_t v18 = *(void *)(a3 + 24);
      if (!v18) {
        sub_29F82C();
      }
      if ((*(uint64_t (**)(uint64_t, long long *))(*(void *)v18 + 48))(v18, &v27)) {
        goto LABEL_31;
      }
    }
    unsigned int v19 = (unsigned __int8 *)(*(void *)a1 + 8);
    sub_ED9E74(v19, *((void *)v11 + 2) | ((HIDWORD(*((void *)v11 + 2)) & 0xFFFFFFF | (*((void *)v11 + 2) >> 31) & 0x60000000 | (((*((void *)v11 + 2) & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32), (uint64_t)v42);
    sub_ED9E74(v19, *((void *)v11 + 3) | ((HIDWORD(*((void *)v11 + 3)) & 0xFFFFFFF | (*((void *)v11 + 3) >> 31) & 0x60000000 | (((*((void *)v11 + 3) & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32), (uint64_t)v41);
    long long v27 = v42[0];
    long long v28 = v42[1];
    long long v29 = v42[2];
    long long v30 = v41[0];
    long long v31 = v41[1];
    long long v32 = v41[2];
    int v33 = *((_DWORD *)v11 + 8);
    sub_EB258C(a4, &v27);
LABEL_7:
    v11 += 72;
    if (v11 == v10)
    {
      sub_F9E678(a1 + 1200, a2, &v27);
      sub_EB241C(a4, *(void *)(a1 + 1168)+ 80* (*(_DWORD *)(*(void *)(a1 + 1968) + 80 * *(unsigned int *)(*((void *)&v28 + 1) + 8) + 72) & 0x7FFFFFFF)+ 8);
      goto LABEL_38;
    }
  }
  sub_FBF950((uint64_t **)(*(void *)a1 + 296), (_OWORD *)v11 + 1, *(unsigned int **)(a1 + 2968), (int *)v11 + 2, v11[12], &__p);
  uint64_t v12 = (long long *)__p;
  int v13 = v35;
  if (__p != v35)
  {
    while (1)
    {
      if (*(void *)(a3 + 24) && !sub_EB2EC4(a4))
      {
        unsigned int v14 = HIDWORD(*(void *)v12) & 0x40000000;
        BOOL v15 = *(uint64_t *)v12 < 0 && v14 == 0;
        int v16 = v15 ? 0x40000000 : 0;
        *(void *)&long long v27 = *(void *)v12 | ((HIDWORD(*(void *)v12) & 0xFFFFFFF | ((*((_DWORD *)v12 + 24) >> 27) << 31) | (*(void *)v12 >> 33) & 0x10000000 | (v14 >> 1) | v16) << 32);
        uint64_t v17 = *(void *)(a3 + 24);
        if (!v17) {
          sub_29F82C();
        }
        if ((*(uint64_t (**)(uint64_t, long long *))(*(void *)v17 + 48))(v17, &v27)) {
          break;
        }
      }
      sub_EB258C(a4, v12);
      uint64_t v12 = (long long *)((char *)v12 + 104);
      if (v12 == v13) {
        goto LABEL_7;
      }
    }
LABEL_31:
    uint64_t v21 = sub_486CB4(a4);
    long long v27 = *(_OWORD *)v21;
    long long v22 = *(_OWORD *)(v21 + 16);
    long long v23 = *(_OWORD *)(v21 + 32);
    long long v24 = *(_OWORD *)(v21 + 48);
    *(void *)&long long v31 = *(void *)(v21 + 64);
    long long v29 = v23;
    long long v30 = v24;
    long long v28 = v22;
    LODWORD(v27) = 1000000000;
    sub_EB241C(a4, (uint64_t)&v27);
    uint64_t v20 = 1;
    long long v25 = (long long *)__p;
    if (!__p) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  sub_EB1BF8(a4);
LABEL_38:
  uint64_t v20 = 0;
  long long v25 = (long long *)__p;
  if (__p)
  {
LABEL_32:
    int v35 = v25;
    operator delete(v25);
  }
LABEL_33:
  uint64_t v10 = v38;
  if (v38)
  {
LABEL_34:
    int32x2_t v39 = v10;
    operator delete(v10);
  }
  return v20;
}

void sub_F8FAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p)
  {
    operator delete(__p);
    long long v31 = a29;
    if (!a29) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v31 = a29;
    if (!a29) {
      goto LABEL_3;
    }
  }
  operator delete(v31);
  _Unwind_Resume(exception_object);
}

void sub_F8FB60(void *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  sub_EB1D94(a5);
  if (!*a2) {
    return;
  }
  long long v31 = 0;
  long long v32 = 0;
  uint64_t v33 = 0;
  long long v30 = *(void **)a2;
  if (v30)
  {
    do
    {
      v29[0] = (void *)sub_F8C950(a3, (unsigned int *)&v30);
      v29[1] = v10;
      sub_3BFF8((char **)&v31, v29);
      long long v30 = v29[0];
    }
    while (LODWORD(v29[0]));
    std::string::size_type v11 = (unint64_t *)v31;
    uint64_t v12 = v32 - 16;
    if (v31 != v32 && v12 > v31)
    {
      unsigned int v14 = (char *)v31 + 16;
      do
      {
        long long v15 = *((_OWORD *)v14 - 1);
        *((_OWORD *)v14 - 1) = *(_OWORD *)v12;
        *(_OWORD *)uint64_t v12 = v15;
        v12 -= 16;
        BOOL v16 = v14 >= v12;
        v14 += 16;
      }
      while (!v16);
      std::string::size_type v11 = (unint64_t *)v31;
    }
  }
  else
  {
    std::string::size_type v11 = 0;
  }
  memset(v29, 0, sizeof(v29));
  __p = 0;
  long long v27 = 0;
  uint64_t v28 = 0;
  uint64_t v17 = (unint64_t *)v32;
  if (v11 == (unint64_t *)v32) {
    goto LABEL_28;
  }
  while (1)
  {
    if (!*((_DWORD *)v11 + 2))
    {
      if (*(_DWORD *)v11) {
        long long v24 = v11;
      }
      else {
        long long v24 = a4;
      }
      sub_EDA198((unsigned __int8 *)(*a1 + 8), *v24, 0, (uint64_t)v29);
      sub_EB258C(a5, (long long *)((char *)v29[0] + 104 * *((unsigned int *)v11 + 3)));
      goto LABEL_16;
    }
    uint64_t v18 = *a1;
    unint64_t v19 = *v11;
    uint64_t v20 = (unsigned int *)a1[371];
    int v25 = 0x7FFFFFFF;
    sub_FA7290((void **)(v18 + 200), v19, (_DWORD *)v11 + 2, 0, v20, &v25, 0, (uint64_t)&__p);
    uint64_t v21 = *a1;
    long long v22 = (char *)__p + 40 * *((unsigned int *)v11 + 3);
    long long v23 = (unsigned int *)a1[371];
    int v25 = 0x7FFFFFFF;
    sub_FBF950((uint64_t **)(v21 + 296), v22, v23, &v25, 0, v29);
    if (v29[0] == v29[1]) {
      break;
    }
    sub_EB39C0(a5, (long long **)v29);
LABEL_16:
    v11 += 2;
    if (v11 == v17) {
      goto LABEL_26;
    }
  }
  sub_EB1BF8(a5);
LABEL_26:
  if (__p)
  {
    long long v27 = __p;
    operator delete(__p);
  }
LABEL_28:
  if (v29[0])
  {
    v29[1] = v29[0];
    operator delete(v29[0]);
  }
  if (v31)
  {
    long long v32 = (char *)v31;
    operator delete(v31);
  }
}

void sub_F8FD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = a14;
    if (!a14)
    {
LABEL_3:
      long long v22 = a18;
      if (!a18) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v21 = a14;
    if (!a14) {
      goto LABEL_3;
    }
  }
  operator delete(v21);
  long long v22 = a18;
  if (!a18)
  {
LABEL_4:
    sub_4451C0(v19);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v22);
  sub_4451C0(v19);
  _Unwind_Resume(a1);
}

void sub_F8FE0C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_20B8E30;
  *(void *)(a2 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v4 = *(char **)(a1 + 2080);
  uint64_t v5 = *(unsigned int **)(a1 + 2088);
  if (*v4 > -2)
  {
    unsigned int v6 = *(void **)(a1 + 2080);
    uint64_t v17 = *(void *)(a1 + 2104);
    unsigned int v8 = &v4[v17];
    if (v4 != &v4[v17])
    {
LABEL_5:
      uint64_t v9 = (char **)(a1 + 2080);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v6 = *(void **)(a1 + 2080);
    do
    {
      unint64_t v7 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      unsigned int v6 = (void *)((char *)v6 + v7);
      v5 += 3 * v7;
    }
    while (*(char *)v6 < -1);
    unsigned int v8 = &v4[*(void *)(a1 + 2104)];
    if (v6 != (void *)v8) {
      goto LABEL_5;
    }
  }
  uint64_t v9 = (char **)(a1 + 2128);
  uint64_t v18 = 1;
  uint64_t v19 = a1 + 2080;
  while (1)
  {
    uint64_t v5 = *(unsigned int **)(v19 + 56);
    unsigned int v6 = *v9;
    if (**v9 <= -2)
    {
      do
      {
        unint64_t v20 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        unsigned int v6 = (void *)((char *)v6 + v20);
        v5 += 3 * v20;
      }
      while (*(char *)v6 < -1);
    }
    unsigned int v8 = &(*v9)[*(void *)(v19 + 72)];
    if (v6 != (void *)v8) {
      break;
    }
    uint64_t v19 = a1 + 2080 + 48 * v18++;
    uint64_t v9 = (char **)(v19 + 48);
    if (v18 == 16) {
      goto LABEL_26;
    }
  }
LABEL_6:
  uint64_t v10 = (char **)(a1 + 2848);
  do
  {
    while (1)
    {
      sub_F92FD4(**(void **)(a1 + 8), v5, (uint64_t)&__p);
      sub_33998(a2, (uint64_t)&__p);
      int v11 = *((char *)v6 + 1);
      unsigned int v6 = (void *)((char *)v6 + 1);
      v5 += 3;
      if (v11 <= -2)
      {
        do
        {
          unint64_t v12 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unsigned int v6 = (void *)((char *)v6 + v12);
          v5 += 3 * v12;
        }
        while (*(char *)v6 < -1);
      }
      if (v6 == (void *)v8) {
        break;
      }
      if (!v9) {
        goto LABEL_26;
      }
    }
    int v13 = v9 + 6;
    if (v9 + 6 == v10) {
      break;
    }
    while (1)
    {
      unsigned int v14 = v13;
      long long v15 = v9[6];
      uint64_t v5 = (unsigned int *)v9[7];
      unsigned int v6 = v15;
      if (*v15 <= -2)
      {
        do
        {
          unint64_t v16 = (__clz(__rbit64(((*v6 >> 7) & ~*v6 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
          unsigned int v6 = (void *)((char *)v6 + v16);
          v5 += 3 * v16;
        }
        while (*(char *)v6 < -1);
      }
      unsigned int v8 = &v9[9][(void)v15];
      if (v6 != (void *)v8) {
        break;
      }
      int v13 = v14 + 6;
      uint64_t v9 = v14;
      if (v14 + 6 == v10) {
        goto LABEL_26;
      }
    }
    uint64_t v9 = v14;
  }
  while (v14);
LABEL_26:
  if (!sub_344C4((_DWORD *)a2))
  {
    __p = 0;
    long long v31 = 0;
    uint64_t v32 = 0;
    uint64_t v21 = *(unsigned int **)(a1 + 1992);
    long long v22 = *(unsigned int **)(a1 + 2000);
    if (v21 != v22)
    {
      do
      {
        long long v23 = (unsigned int *)(*(void *)(a1 + 1968) + 80 * *v21);
        long long v24 = *(uint64_t **)(a1 + 8);
        v28[0] = 1;
        unint64_t v25 = sub_F968AC(*v24, *v23 | ((unint64_t)(v23[1] & 0xFFFFFFF) << 32), (v23[1] >> 28) & 1, v28);
        unint64_t v29 = v25;
        if (v25) {
          BOOL v26 = HIDWORD(v25) == -1;
        }
        else {
          BOOL v26 = 1;
        }
        if (!v26)
        {
          long long v27 = __p;
          if (__p != v31)
          {
            while (*v27 != v25)
            {
              if (++v27 == v31) {
                goto LABEL_39;
              }
            }
          }
          if (v27 == v31)
          {
LABEL_39:
            sub_F92FD4(**(void **)(a1 + 8), (unsigned int *)&v29, (uint64_t)v28);
            sub_33998(a2, (uint64_t)v28);
            sub_29603C(&__p, &v29);
          }
        }
        ++v21;
      }
      while (v21 != v22);
      if (__p)
      {
        long long v31 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_F9019C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F901C0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = a1 + 1200;
  sub_F9E678(a1 + 1200, (unsigned int *)&v7, v8);
  if (!v8[0]) {
    return 0;
  }
  sub_F9E678(v3, (unsigned int *)&v7, v8);
  unsigned int v4 = *(_DWORD *)(v8[3] + 8);
  uint64_t v5 = *(void *)(a1 + 1968);
  if ((*(_DWORD *)(v5 + 80 * v4 + 72) & 0x80000000) != 0) {
    return 0;
  }
  else {
    return *(void *)(v5 + 80 * v4 + 32);
  }
}

unint64_t sub_F90254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  uint64_t v4 = a1 + 1200;
  sub_F9E678(a1 + 1200, (unsigned int *)&v17, v18);
  unsigned int v5 = v18[0];
  if (v18[0] && (sub_F9E678(v4, (unsigned int *)&v16, v18), unsigned int v5 = v18[0], v18[0]))
  {
    uint64_t v14 = v16;
    uint64_t v15 = v17;
    sub_F9E678(v4, (unsigned int *)&v15, v18);
    unsigned int v6 = *(_DWORD *)(v19 + 8);
    uint64_t v7 = *(void *)(a1 + 1968);
    sub_F9E678(v4, (unsigned int *)&v14, v18);
    unsigned int v8 = v15;
    if (v15)
    {
      uint64_t v9 = *(void *)(a1 + 1968) + 80 * *(unsigned int *)(v19 + 8) + 8;
      uint64_t v10 = v7 + 80 * v6 + 8;
      while (v14)
      {
        if (__PAIR64__(HIDWORD(v15), v8) == v14)
        {
          unsigned int v5 = v15;
          unint64_t v11 = v15 & 0xFFFFFFFF00000000;
          return v11 & 0xFFFFFFFF00000000 | v5;
        }
        if (*(_DWORD *)v9 < *(_DWORD *)v10
          || (*(_DWORD *)v10 >= *(_DWORD *)v9 ? (BOOL v12 = *(_DWORD *)(v9 + 4) < *(_DWORD *)(v10 + 4)) : (BOOL v12 = 0), v12))
        {
          if ((*(_DWORD *)(v10 + 64) & 0x80000000) != 0) {
            break;
          }
          uint64_t v15 = *(void *)(v10 + 24);
          if (v15)
          {
            sub_F9E678(v4, (unsigned int *)&v15, v18);
            uint64_t v10 = *(void *)(a1 + 1968) + 80 * *(unsigned int *)(v19 + 8) + 8;
          }
        }
        else if ((*(_DWORD *)(v9 + 64) & 0x80000000) != 0)
        {
          uint64_t v14 = 0;
        }
        else
        {
          uint64_t v14 = *(void *)(v9 + 24);
          if (v14)
          {
            sub_F9E678(v4, (unsigned int *)&v14, v18);
            uint64_t v9 = *(void *)(a1 + 1968) + 80 * *(unsigned int *)(v19 + 8) + 8;
          }
        }
        unsigned int v8 = v15;
        if (!v15) {
          break;
        }
      }
    }
    unint64_t v11 = 0;
    unsigned int v5 = 0;
  }
  else
  {
    unint64_t v11 = 0;
  }
  return v11 & 0xFFFFFFFF00000000 | v5;
}

void sub_F9040C(int32x2_t *a1, unsigned int *a2, unsigned int *a3, int a4)
{
  uint64_t v4 = a2;
  uint64_t v75 = a1;
  if (a1[381].i8[0])
  {
    sub_F91558(a1, a2);
    a1 = v75;
  }
  sub_FA18AC(*(void *)&a1[122] + 24, v4, v76);
  if (*(void *)v76)
  {
    sub_FA18AC(*(void *)&v75[122] + 24, v4, v76);
    unsigned int v5 = (uint64_t *)v75;
    unsigned int v6 = *(uint64_t **)(v77 + 8);
    uint64_t v70 = *(uint64_t **)(v77 + 16);
    if (v6 != v70)
    {
      while (1)
      {
        uint64_t v71 = v6;
        uint64_t v7 = (void *)(*(void *)v5[122] + 32 * *v6);
        uint64_t v8 = -858993459 * ((v7[1] - *v7) >> 4);
        if (v8) {
          break;
        }
LABEL_6:
        unsigned int v6 = v71 + 1;
        if (v71 + 1 == v70) {
          return;
        }
      }
      uint64_t v9 = 0;
      while (1)
      {
        uint64_t v10 = *v7;
        unint64_t v11 = (unsigned int *)(*v7 + 80 * v9);
        uint64_t v12 = *v4;
        if (*v11 != v12) {
          goto LABEL_9;
        }
        unsigned int v13 = v11[1];
        if (v13 != v4[1]) {
          goto LABEL_9;
        }
        uint64_t v14 = *v5;
        uint64_t v15 = v5[371];
        if (*(unsigned char *)(*v5 + 1394))
        {
          unint64_t v16 = v13 & 0xFFFFFFF | (((v13 >> 28) & 3) << 29) | (((v13 & 0x60000000) == 0x40000000) << 31);
          uint64_t v17 = *(void *)(v14 + 1456) - 1;
          unint64_t v18 = 0x2127599BF4325C37
              * (((v16 >> 29) & 2 | (v16 >> 31) | (v16 >> 27) & 4 | (v12 << 32) | (8 * (v13 & 0xFFFFFFF))) ^ (((v12 << 32) | (8 * (unint64_t)(v13 & 0xFFFFFFF))) >> 23));
          uint64_t v19 = *(void *)(v14 + 1472);
          int v20 = *(_DWORD *)(v14 + 1464);
          int v21 = *(_DWORD *)(v14 + 1468);
          unint64_t v22 = (v18 ^ (v18 >> 47)) & v17;
          int v23 = *(_DWORD *)(v19 + 8 * v22);
          int v24 = *(_DWORD *)(v19 + 8 * v22 + 4);
          if (v20 != v23 || v21 != v24)
          {
            if (*(void *)(v14 + 1440))
            {
              uint64_t v26 = 1;
              while (*(_DWORD *)(v14 + 1432) == v23 && *(_DWORD *)(v14 + 1436) == v24
                   || v24 != v16
                   || v23 != v12)
              {
                unint64_t v22 = (v22 + v26) & v17;
                int v23 = *(_DWORD *)(v19 + 8 * v22);
                int v24 = *(_DWORD *)(v19 + 8 * v22 + 4);
                ++v26;
                if (v20 == v23 && v21 == v24) {
                  goto LABEL_36;
                }
              }
            }
            else
            {
              uint64_t v28 = 1;
              while (v24 != v16 || v23 != v12)
              {
                unint64_t v22 = (v22 + v28) & v17;
                int v23 = *(_DWORD *)(v19 + 8 * v22);
                int v24 = *(_DWORD *)(v19 + 8 * v22 + 4);
                ++v28;
                if (v20 == v23 && v21 == v24) {
                  goto LABEL_36;
                }
              }
            }
            if (v22 != -1) {
              goto LABEL_9;
            }
          }
        }
LABEL_36:
        long long v30 = (uint64_t *)(v14 + 152);
        sub_ED9E74((unsigned __int8 *)(v14 + 8), *(void *)v4 | ((HIDWORD(*(void *)v4) & 0xFFFFFFF | (*(void *)v4 >> 31) & 0x60000000 | (((*(void *)v4 & 0x6000000000000000) == 0x4000000000000000) << 31)) << 32), (uint64_t)v76);
        unint64_t v31 = sub_F6D9F4(v30, v76, 0x3B9ACA00u, v15);
        unsigned int v5 = (uint64_t *)v75;
        int v32 = v31;
        if (v31 != -1)
        {
          unint64_t v33 = HIDWORD(v31);
          if (HIDWORD(v31) != 0x7FFFFFFF)
          {
            int32x2_t v34 = *v75;
            uint64_t v35 = v10 + 80 * v9;
            uint64_t v36 = (uint64_t)v75[371];
            uint64_t v72 = v35 + 8;
            if (!*(unsigned char *)(*(void *)v75 + 1394)) {
              goto LABEL_64;
            }
            uint64_t v37 = *v4;
            unsigned int v38 = v4[1];
            unint64_t v39 = v38 & 0xFFFFFFF | (((v38 >> 28) & 3) << 29) | (((v38 & 0x60000000) == 0x40000000) << 31);
            uint64_t v40 = *(void *)(*(void *)&v34 + 1456) - 1;
            unint64_t v41 = 0x2127599BF4325C37
                * (((v39 >> 29) & 2 | (v39 >> 31) | (v39 >> 27) & 4 | (v37 << 32) | (8 * (v38 & 0xFFFFFFF))) ^ (((v37 << 32) | (8 * (unint64_t)(v38 & 0xFFFFFFF))) >> 23));
            uint64_t v42 = *(void *)(*(void *)&v34 + 1472);
            int v43 = *(_DWORD *)(*(void *)&v34 + 1464);
            int v44 = *(_DWORD *)(*(void *)&v34 + 1468);
            unint64_t v45 = (v41 ^ (v41 >> 47)) & v40;
            int v47 = *(_DWORD *)(v42 + 8 * v45);
            int v46 = *(_DWORD *)(v42 + 8 * v45 + 4);
            if (v43 == v47 && v44 == v46) {
              goto LABEL_64;
            }
            if (*(void *)(*(void *)&v34 + 1440))
            {
              uint64_t v49 = 1;
              while (*(_DWORD *)(*(void *)&v34 + 1432) == v47 && *(_DWORD *)(*(void *)&v34 + 1436) == v46
                   || v46 != v39
                   || v47 != v37)
              {
                unint64_t v45 = (v45 + v49) & v40;
                int v47 = *(_DWORD *)(v42 + 8 * v45);
                int v46 = *(_DWORD *)(v42 + 8 * v45 + 4);
                ++v49;
                if (v43 == v47 && v44 == v46) {
                  goto LABEL_64;
                }
              }
            }
            else
            {
              uint64_t v51 = 1;
              while (v46 != v39 || v47 != v37)
              {
                unint64_t v45 = (v45 + v51) & v40;
                int v47 = *(_DWORD *)(v42 + 8 * v45);
                int v46 = *(_DWORD *)(v42 + 8 * v45 + 4);
                ++v51;
                if (v43 == v47 && v44 == v46) {
                  goto LABEL_64;
                }
              }
            }
            if (v45 == -1)
            {
LABEL_64:
              unsigned int v56 = 1000000000 - *(_DWORD *)(v35 + 8);
              int v74 = v32;
              uint64_t v57 = (uint64_t *)(*(void *)&v34 + 152);
              unsigned int v58 = (unsigned __int8 *)(*(void *)&v34 + 8);
              uint64_t v59 = *(void *)v4;
              int v60 = HIDWORD(*(void *)v4) & 0xFFFFFFF | (*(void *)v4 >> 31) & 0x60000000;
              int v61 = (*(void *)v4 & 0x6000000000000000) == 0x4000000000000000;
              unint64_t v62 = v4;
              char v63 = v7;
              uint64_t v64 = v8;
              int v65 = v33;
              sub_ED9E74(v58, v59 | ((unint64_t)(v60 | (v61 << 31)) << 32), (uint64_t)v76);
              unint64_t v53 = sub_F6D9F4(v57, v76, v56, v36);
              LODWORD(v33) = v65;
              uint64_t v8 = v64;
              uint64_t v7 = v63;
              uint64_t v4 = v62;
              unsigned int v5 = (uint64_t *)v75;
              unsigned int v54 = v74 - v53;
              unsigned int v55 = *a3;
              if (*a3 >= v74 - (int)v53)
              {
LABEL_65:
                int v66 = v33 - HIDWORD(v53);
                if (v54 < v55 || (int)a3[1] >= v66)
                {
                  uint64_t v67 = *(void *)a3;
                  unint64_t v68 = sub_F6DA8C((uint64_t *)(*v5 + 152), v11, v72, v5[371], 1, 1);
                  unsigned int v5 = (uint64_t *)v75;
                  if (v68 != -1 && HIDWORD(v68) != 0x7FFFFFFF)
                  {
                    *(void *)unint64_t v76 = (v67 - v54 + v68) | ((unint64_t)(HIDWORD(v67) - v66 + HIDWORD(v68)) << 32);
                    sub_F8C338((uint64_t)v75, v4, v76, *v71, a4, v9, 0, 0);
                    unsigned int v5 = (uint64_t *)v75;
                  }
                }
              }
            }
            else
            {
              HIDWORD(v53) = 0x7FFFFFFF;
              unsigned int v54 = v32 + 1;
              unsigned int v55 = *a3;
              if (*a3 >= v32 + 1) {
                goto LABEL_65;
              }
            }
          }
        }
LABEL_9:
        if (++v9 == v8) {
          goto LABEL_6;
        }
      }
    }
  }
}

BOOL sub_F90A50(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 3056);
  uint64_t v3 = *(unsigned int **)(a1 + 3072);
  uint64_t v4 = *(unsigned int **)(a1 + 3064);
  unint64_t v5 = *(unsigned int *)(a1 + 3052);
  if (v2 + v3 - v4 < v5) {
    return 0;
  }
  uint64_t v20 = 0;
  long long v8 = 0uLL;
  long long v19 = 0u;
  if (v4 == v3)
  {
    uint64_t v15 = 0;
  }
  else
  {
    do
    {
      while (1)
      {
        unsigned int v10 = *v4;
        unsigned int v18 = v10;
        uint64_t v11 = *(void *)(a1 + 928);
        unsigned int v12 = *(_DWORD *)(v11 + 24 * v10 + 8);
        if (*a2 >= v12)
        {
          int v13 = *(_DWORD *)(v11 + 24 * v10 + 12);
          if (v12 < *a2 || (int)a2[1] >= v13) {
            break;
          }
        }
        sub_745A4((uint64_t)&v19, &v18);
        if (++v4 == v3) {
          goto LABEL_12;
        }
      }
      ++*(_DWORD *)(a1 + 3056);
      ++v4;
    }
    while (v4 != v3);
LABEL_12:
    uint64_t v3 = *(unsigned int **)(a1 + 3064);
    long long v8 = v19;
    uint64_t v15 = v20;
    LODWORD(v2) = *(_DWORD *)(a1 + 3056);
    LODWORD(v5) = *(_DWORD *)(a1 + 3052);
  }
  *(_OWORD *)(a1 + 3064) = v8;
  uint64_t v16 = *(void *)(a1 + 3080);
  *(void *)(a1 + 3080) = v15;
  *(void *)&long long v19 = v3;
  uint64_t v20 = v16;
  BOOL v6 = v2 >= v5;
  if (v3)
  {
    *((void *)&v19 + 1) = v3;
    operator delete(v3);
  }
  return v6;
}

void sub_F90B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F90BA4(uint64_t a1, unsigned int *a2, unsigned int *a3, int a4)
{
  if (!*(unsigned char *)(a1 + 3048)) {
    return 4294967294;
  }
  sub_F9040C((int32x2_t *)a1, a2, a3, a4);
  uint64_t v7 = *(void *)(a1 + 3032);
  int v38 = *(_DWORD *)(v7 + 160);
  unint64_t v8 = sub_F968AC(*(void *)(v7 + 24), *a2 | ((unint64_t)(a2[1] & 0xFFFFFFF) << 32), (a2[1] >> 28) & 1, &v38);
  unint64_t v39 = v8;
  if (v8 > 0xFFFFFFFEFFFFFFFFLL || v8 == 0) {
    return 0;
  }
  LOWORD(v38) = sub_FA24BC(*(void *)(v7 + 32), *(void *)a2, v8);
  if ((_WORD)v38 == 0xFFFF) {
    return 0;
  }
  sub_F9B030(*(void *)(v7 + 8), (unsigned int *)&v39, (unsigned __int16 *)&v38, v7 + 240);
  uint64_t v10 = *(void *)(v7 + 240);
  uint64_t v11 = *(void *)(v7 + 248);
  if (v10 != v11)
  {
    while (1)
    {
      unsigned int v16 = *(_DWORD *)(a1 + 1040);
      if (v16 != -1)
      {
        int v17 = *(_DWORD *)(v10 + 16);
        if (v17 != -1
          && *(_DWORD *)(v10 + 20) != 0x7FFFFFFF
          && *(void *)(v10 + 24) != 0x7FFFFFFFFFFFFFFFLL
          && v17 + *a3 > v16)
        {
          goto LABEL_11;
        }
      }
      unint64_t v18 = sub_F9111C((int32x2_t *)a1, (unsigned int *)v10);
      unint64_t v19 = v18;
      int v20 = *(_DWORD *)(v10 + 16);
      if (v20 == -1
        || (int v21 = *(_DWORD *)(v10 + 20), v21 == 0x7FFFFFFF)
        || *(void *)(v10 + 24) == 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v12 = *(void *)(a1 + 3904);
        unint64_t v13 = v18 >> 6;
        uint64_t v14 = 1 << v18;
        uint64_t v15 = *(void *)(v12 + 8 * (v18 >> 6));
        if ((v15 & (1 << v18)) == 0)
        {
          uint64_t v25 = *(void *)(a1 + 24) + 32 * v18;
          uint64_t v26 = *(unsigned int **)v25;
          long long v27 = *(unsigned int **)(v25 + 8);
          if (*(unsigned int **)v25 != v27)
          {
            do
            {
              LODWORD(v39) = 0;
              sub_F9E7F0(a1 + 816, v26, (int *)&v39);
              sub_F9F9EC((int32x2_t *)(a1 + 816));
              v26 += 20;
            }
            while (v26 != v27);
            uint64_t v12 = *(void *)(a1 + 3904);
            uint64_t v15 = *(void *)(v12 + 8 * v13);
          }
          *(void *)(v12 + 8 * v13) = v15 | v14;
        }
        ++*(void *)(a1 + 3936);
        goto LABEL_11;
      }
      if (!*(unsigned char *)(a1 + 3049)) {
        goto LABEL_42;
      }
      signed int v22 = *(_DWORD *)(a1 + 1044);
      if (v22 != 0x7FFFFFFF && (int)(v21 + a3[1]) > v22) {
        goto LABEL_42;
      }
      if (*(_DWORD *)(*(void *)(a1 + 3880) + 40 * v18 + 32) != -1) {
        goto LABEL_42;
      }
      v23.n128_f64[0] = sub_F9133C(*(void *)(a1 + 3032), (unsigned int *)v10, (uint64_t)&v39);
      int v24 = v41;
      if (v41 != -1) {
        break;
      }
      uint64_t v28 = *(void *)(a1 + 3904);
      unint64_t v29 = v19 >> 6;
      uint64_t v30 = 1 << v19;
      uint64_t v31 = *(void *)(v28 + 8 * (v19 >> 6));
      if ((v31 & (1 << v19)) == 0)
      {
        uint64_t v32 = *(void *)(a1 + 24) + 32 * v19;
        int32x2_t v34 = *(unsigned int **)v32;
        unint64_t v33 = *(unsigned int **)(v32 + 8);
        if (*(unsigned int **)v32 != v33)
        {
          do
          {
            int v38 = 0;
            sub_F9E7F0(a1 + 816, v34, &v38);
            sub_F9F9EC((int32x2_t *)(a1 + 816));
            v34 += 20;
          }
          while (v34 != v33);
          uint64_t v28 = *(void *)(a1 + 3904);
          uint64_t v30 = 1 << v19;
          unint64_t v29 = v19 >> 6;
          uint64_t v31 = *(void *)(v28 + 8 * (v19 >> 6));
        }
        *(void *)(v28 + 8 * v29) = v31 | v30;
      }
      ++*(void *)(a1 + 3928);
      if (!v41) {
        goto LABEL_37;
      }
LABEL_40:
      if (v24 != -1)
      {
        int v20 = *(_DWORD *)(v10 + 16);
        int v21 = *(_DWORD *)(v10 + 20);
LABEL_42:
        unint64_t v39 = (v20 + *a3) | ((unint64_t)(v21 + a3[1]) << 32);
        sub_F8C338(a1, a2, (unsigned int *)&v39, v19, a4, *(_DWORD *)(v10 + 8), 0, 1);
      }
LABEL_11:
      v10 += 32;
      if (v10 == v11) {
        return *(unsigned int *)(*(void *)(a1 + 3032) + 164);
      }
    }
    __n128 v23 = sub_F91EC0(*(void *)(a1 + 3880) + 40 * v19, (uint64_t *)&v39);
    if (v41) {
      goto LABEL_40;
    }
LABEL_37:
    uint64_t v35 = v40;
    if (v40)
    {
      if (!atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *, __n128))v35->__on_zero_shared)(v35, v23);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    goto LABEL_40;
  }
  return *(unsigned int *)(*(void *)(a1 + 3032) + 164);
}

void sub_F90F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_F78528((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_F90FB4(uint64_t a1, unsigned int *a2, unsigned int *a3, int *a4, char a5, unsigned int *a6)
{
  unsigned int v17 = *a6;
  if (v17)
  {
    uint64_t v11 = a1 + 1064;
    do
    {
      if (sub_F963A0(**(void **)(a1 + 8), *a2 | ((unint64_t)(a2[1] & 0xFFFFFFF) << 32), &v17))
      {
        unint64_t v12 = sub_F968AC(**(void **)(a1 + 8), *a2 | ((unint64_t)(a2[1] & 0xFFFFFFF) << 32), (a2[1] >> 28) & 1, &v17);
        unint64_t v16 = v12;
        if (v12) {
          BOOL v13 = v12 >= 0xFFFFFFFF00000000;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          int v14 = *(_DWORD *)(a1 + 20);
          if (v14 != -1 && v17 == v14) {
            return 0xFFFFFFFFLL;
          }
        }
        else if (sub_F953E4(v11, &v16) == -1 && sub_F953E4(*(void *)(a1 + 976) + 800, &v16) == -1)
        {
          if (*(unsigned char *)(a1 + 3048) && v17 < *(_DWORD *)(*(void *)(a1 + 3032) + 160)) {
            return 0;
          }
          if (!*(unsigned char *)(*(void *)a1 + 1393)
            || !sub_FA8F9C(*(void *)a1 + 200, (unsigned int *)&v16, a3, a4, a5))
          {
            return v17;
          }
        }
      }
      --v17;
    }
    while (v17);
  }
  return 0;
}

uint64_t sub_F9111C(int32x2_t *a1, unsigned int *a2)
{
  uint64_t v4 = (uint64_t)&a1[386];
  sub_F78DE8((uint64_t)&a1[386], a2, v21);
  if (v21[0]) {
    return v21[3][1];
  }
  int32x2_t v6 = a1[4];
  int32x2_t v7 = a1[3];
  int32x2_t v8 = a1[379];
  sub_F98E98(*(void *)(*(void *)&v8 + 8), a2, *(void *)&v8 + 192);
  sub_BF647C(*(void *)&v8 + 40, (uint64_t *)(*(void *)&v8 + 192), *(_DWORD *)(*(void *)&v8 + 168), 0, (uint64_t)&__p);
  signed int v22 = a1;
  sub_F8AFE4(a1 + 3, (unsigned int **)&__p, 0, (void **)&v22);
  unint64_t v5 = (uint64_t)(*(void *)&v6 - *(void *)&v7) >> 5;
  if (__p)
  {
    unint64_t v19 = __p;
    operator delete(__p);
  }
  sub_F99838(v4, a2, (uint64_t)&__p);
  uint64_t v9 = __p;
  if (v20)
  {
    uint64_t v10 = (void *)(*((void *)__p + 1) + 16 * (void)v19);
    *uint64_t v10 = *(void *)a2;
    v10[1] = -1;
  }
  *(void *)(v9[1] + 16 * (void)v19 + 8) = v5;
  sub_29603C((void **)&a1[482], a2);
  unint64_t v11 = (unint64_t)a1[489];
  int32x2_t v12 = a1[490];
  if (v11 == *(void *)&v12 << 6)
  {
    if ((uint64_t)(v11 + 1) < 0) {
      sub_2E00();
    }
    unint64_t v13 = *(void *)&v12 << 7;
    if (v13 <= (v11 & 0xFFFFFFFFFFFFFFC0) + 64) {
      unint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFC0) + 64;
    }
    if (v11 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v14 = v13;
    }
    else {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    sub_3D110((uint64_t)&a1[488], v14);
    unint64_t v11 = (unint64_t)a1[489];
  }
  a1[489] = (int32x2_t)(v11 + 1);
  *(void *)(*(void *)&a1[488] + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v11);
  int32x2_t v15 = a1[486];
  if (*(void *)&v15 >= *(void *)&a1[487])
  {
    unint64_t v16 = sub_F99F7C((void **)&a1[485]);
  }
  else
  {
    *(void *)(*(void *)&v15 + 32) = 0;
    *(_OWORD *)*(void *)&int32x2_t v15 = 0u;
    *(_OWORD *)(*(void *)&v15 + 16) = 0u;
    *(_DWORD *)(*(void *)&v15 + 32) = -1;
    unint64_t v16 = (char *)(*(void *)&v15 + 40);
  }
  a1[486] = (int32x2_t)v16;
  if (v5 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&a1[117] - *(void *)&a1[116]) >> 3)) {
    sub_FA1A24((char **)&a1[116]);
  }
  return v5;
}

void sub_F91320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_F9133C@<D0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(unsigned char *)(a1 + 185)) {
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v6 + 3880)) {
    goto LABEL_3;
  }
  unint64_t v18 = sub_3823E0(v6 + 8, *a2, 1);
  if (!v18) {
    goto LABEL_3;
  }
  unint64_t v19 = &v18[-*(int *)v18];
  if (*(unsigned __int16 *)v19 < 7u) {
    goto LABEL_3;
  }
  uint64_t v7 = *((unsigned __int16 *)v19 + 3);
  if (!v7) {
    goto LABEL_4;
  }
  char v20 = &v18[v7 + *(unsigned int *)&v18[v7]];
  uint64_t v21 = a2[1];
  if (*(_DWORD *)v20 <= v21)
  {
LABEL_3:
    uint64_t v7 = 0;
    goto LABEL_4;
  }
  uint64_t v7 = (uint64_t)&v20[4 * v21 + 4 + *(unsigned int *)&v20[4 * v21 + 4]];
LABEL_4:
  int32x2_t v8 = (unsigned __int16 *)(v7 - *(int *)v7);
  if (*v8 >= 9u && (uint64_t v9 = v8[4]) != 0)
  {
    uint64_t v10 = (int *)(v7 + v9 + *(unsigned int *)(v7 + v9));
    unint64_t v11 = (unsigned __int16 *)((char *)v10 - *v10);
    unsigned int v12 = *v11;
    if (v12 < 5) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = (_WORD *)(&loc_1120530 + 1);
    unsigned int v12 = *(unsigned __int16 *)((char *)&loc_1120530 + 1);
    if (*(unsigned __int16 *)((char *)&loc_1120530 + 1) < 5u) {
      goto LABEL_17;
    }
  }
  uint64_t v13 = v11[2];
  if (v11[2]) {
    v13 += (uint64_t)v10 + *(unsigned int *)((char *)v10 + v13);
  }
  if (v12 >= 7)
  {
    uint64_t v14 = v11[3];
    if (v14 && v13 != 0)
    {
      signed int v22 = (unsigned int *)((char *)v10 + v14);
      uint64_t v23 = *v22;
      *(void *)a3 = v13;
      *(void *)(a3 + 8) = (char *)v22 + v23;
      *(void *)&double result = 0xFFFFFFFFLL;
      *(void *)(a3 + 16) = 0xFFFFFFFFLL;
      *(_DWORD *)(a3 + 24) = -1;
      *(_DWORD *)(a3 + 32) = 1;
      return result;
    }
  }
LABEL_17:
  sub_FA25E0(a1, a2, &v25);
  if (!v25)
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = -1;
    unsigned int v17 = v26;
    if (!v26) {
      return result;
    }
    goto LABEL_23;
  }
  unint64_t v16 = v26;
  *(void *)a3 = v25;
  *(void *)(a3 + 8) = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a3 + 32) = 0;
  unsigned int v17 = v26;
  if (v26)
  {
LABEL_23:
    if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return result;
}

void sub_F91558(int32x2_t *a1, unsigned int *a2)
{
  uint64_t v3 = (void *)a1[379];
  sub_FA1B70(v3[1], a2, v3 + 27);
  unint64_t v5 = (unsigned char *)v3[27];
  uint64_t v4 = (unsigned char *)v3[28];
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      sub_2E00();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    memcpy(v7, v5, v6);
    uint64_t v8 = 0;
    uint64_t v9 = 8 * (v6 >> 3);
    do
    {
      sub_F9111C(a1, (unsigned int *)&v7[v8]);
      v8 += 8;
    }
    while (v9 != v8);
    operator delete(v7);
  }
}

void sub_F9162C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_F91654(void *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  a1[5] = 0;
  *a1 = &unk_20E1710;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  if (v4)
  {
    unint64_t v5 = __clz(v4);
    unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> v5;
    if (v5 == 61) {
      unint64_t v7 = 6;
    }
    else {
      unint64_t v7 = (0xFFFFFFFFFFFFFFFFLL >> v5) - (0x1FFFFFFFFFFFFFFFuLL >> v5);
    }
    a1[5] = v7;
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    uint64_t v9 = (char *)operator new(v8 + 12 * v6);
    *a1 = v9;
    a1[1] = &v9[v8];
    memset(v9, 128, v6 + 8);
    v9[v6] = -1;
    a1[5] = v7;
    a1[3] = v6;
  }
  a1[6] = &unk_20E1710;
  unint64_t v10 = *a2;
  a1[11] = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  if (v10)
  {
    unint64_t v11 = __clz(v10);
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> v11;
    if (v11 == 61) {
      unint64_t v13 = 6;
    }
    else {
      unint64_t v13 = (0xFFFFFFFFFFFFFFFFLL >> v11) - (0x1FFFFFFFFFFFFFFFuLL >> v11);
    }
    a1[11] = v13;
    unint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    int32x2_t v15 = (char *)operator new(v14 + 12 * v12);
    a1[6] = v15;
    a1[7] = &v15[v14];
    memset(v15, 128, v12 + 8);
    v15[v12] = -1;
    a1[11] = v13;
    a1[9] = v12;
  }
  a1[12] = &unk_20E1710;
  unint64_t v16 = *a2;
  a1[17] = 0;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  if (v16)
  {
    unint64_t v17 = __clz(v16);
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> v17;
    if (v17 == 61) {
      unint64_t v19 = 6;
    }
    else {
      unint64_t v19 = (0xFFFFFFFFFFFFFFFFLL >> v17) - (0x1FFFFFFFFFFFFFFFuLL >> v17);
    }
    a1[17] = v19;
    unint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    uint64_t v21 = (char *)operator new(v20 + 12 * v18);
    a1[12] = v21;
    a1[13] = &v21[v20];
    memset(v21, 128, v18 + 8);
    v21[v18] = -1;
    a1[17] = v19;
    a1[15] = v18;
  }
  a1[18] = &unk_20E1710;
  unint64_t v22 = *a2;
  a1[23] = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[19] = 0;
  if (v22)
  {
    unint64_t v23 = __clz(v22);
    unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> v23;
    if (v23 == 61) {
      unint64_t v25 = 6;
    }
    else {
      unint64_t v25 = (0xFFFFFFFFFFFFFFFFLL >> v23) - (0x1FFFFFFFFFFFFFFFuLL >> v23);
    }
    a1[23] = v25;
    unint64_t v26 = (v24 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    long long v27 = (char *)operator new(v26 + 12 * v24);
    a1[18] = v27;
    a1[19] = &v27[v26];
    memset(v27, 128, v24 + 8);
    v27[v24] = -1;
    a1[23] = v25;
    a1[21] = v24;
  }
  a1[24] = &unk_20E1710;
  unint64_t v28 = *a2;
  a1[29] = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = 0;
  if (v28)
  {
    unint64_t v29 = __clz(v28);
    unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> v29;
    if (v29 == 61) {
      unint64_t v31 = 6;
    }
    else {
      unint64_t v31 = (0xFFFFFFFFFFFFFFFFLL >> v29) - (0x1FFFFFFFFFFFFFFFuLL >> v29);
    }
    a1[29] = v31;
    unint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    unint64_t v33 = (char *)operator new(v32 + 12 * v30);
    a1[24] = v33;
    a1[25] = &v33[v32];
    memset(v33, 128, v30 + 8);
    v33[v30] = -1;
    a1[29] = v31;
    a1[27] = v30;
  }
  a1[30] = &unk_20E1710;
  unint64_t v34 = *a2;
  a1[35] = 0;
  a1[32] = 0;
  a1[33] = 0;
  a1[31] = 0;
  if (v34)
  {
    unint64_t v35 = __clz(v34);
    unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> v35;
    if (v35 == 61) {
      unint64_t v37 = 6;
    }
    else {
      unint64_t v37 = (0xFFFFFFFFFFFFFFFFLL >> v35) - (0x1FFFFFFFFFFFFFFFuLL >> v35);
    }
    a1[35] = v37;
    unint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    unint64_t v39 = (char *)operator new(v38 + 12 * v36);
    a1[30] = v39;
    a1[31] = &v39[v38];
    memset(v39, 128, v36 + 8);
    v39[v36] = -1;
    a1[35] = v37;
    a1[33] = v36;
  }
  unint64_t v40 = *a2;
  a1[41] = 0;
  a1[36] = &unk_20E1710;
  a1[37] = 0;
  a1[38] = 0;
  a1[39] = 0;
  if (v40)
  {
    unint64_t v41 = __clz(v40);
    unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> v41;
    if (v41 == 61) {
      unint64_t v43 = 6;
    }
    else {
      unint64_t v43 = (0xFFFFFFFFFFFFFFFFLL >> v41) - (0x1FFFFFFFFFFFFFFFuLL >> v41);
    }
    a1[41] = v43;
    unint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    unint64_t v45 = (char *)operator new(v44 + 12 * v42);
    a1[36] = v45;
    a1[37] = &v45[v44];
    memset(v45, 128, v42 + 8);
    v45[v42] = -1;
    a1[41] = v43;
    a1[39] = v42;
  }
  unint64_t v46 = *a2;
  a1[47] = 0;
  a1[42] = &unk_20E1710;
  a1[43] = 0;
  a1[44] = 0;
  a1[45] = 0;
  if (v46)
  {
    unint64_t v47 = __clz(v46);
    unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> v47;
    if (v47 == 61) {
      unint64_t v49 = 6;
    }
    else {
      unint64_t v49 = (0xFFFFFFFFFFFFFFFFLL >> v47) - (0x1FFFFFFFFFFFFFFFuLL >> v47);
    }
    a1[47] = v49;
    unint64_t v50 = (v48 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    uint64_t v51 = (char *)operator new(v50 + 12 * v48);
    a1[42] = v51;
    a1[43] = &v51[v50];
    memset(v51, 128, v48 + 8);
    v51[v48] = -1;
    a1[47] = v49;
    a1[45] = v48;
  }
  unint64_t v52 = *a2;
  a1[53] = 0;
  a1[48] = &unk_20E1710;
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  if (v52)
  {
    unint64_t v53 = __clz(v52);
    unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> v53;
    if (v53 == 61) {
      unint64_t v55 = 6;
    }
    else {
      unint64_t v55 = (0xFFFFFFFFFFFFFFFFLL >> v53) - (0x1FFFFFFFFFFFFFFFuLL >> v53);
    }
    a1[53] = v55;
    unint64_t v56 = (v54 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    uint64_t v57 = (char *)operator new(v56 + 12 * v54);
    a1[48] = v57;
    a1[49] = &v57[v56];
    memset(v57, 128, v54 + 8);
    v57[v54] = -1;
    a1[53] = v55;
    a1[51] = v54;
  }
  unint64_t v58 = *a2;
  a1[59] = 0;
  a1[54] = &unk_20E1710;
  a1[55] = 0;
  a1[56] = 0;
  a1[57] = 0;
  if (v58)
  {
    unint64_t v59 = __clz(v58);
    unint64_t v60 = 0xFFFFFFFFFFFFFFFFLL >> v59;
    if (v59 == 61) {
      unint64_t v61 = 6;
    }
    else {
      unint64_t v61 = (0xFFFFFFFFFFFFFFFFLL >> v59) - (0x1FFFFFFFFFFFFFFFuLL >> v59);
    }
    a1[59] = v61;
    unint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    char v63 = (char *)operator new(v62 + 12 * v60);
    a1[54] = v63;
    a1[55] = &v63[v62];
    memset(v63, 128, v60 + 8);
    v63[v60] = -1;
    a1[59] = v61;
    a1[57] = v60;
  }
  unint64_t v64 = *a2;
  a1[65] = 0;
  a1[60] = &unk_20E1710;
  a1[61] = 0;
  a1[62] = 0;
  a1[63] = 0;
  if (v64)
  {
    unint64_t v65 = __clz(v64);
    unint64_t v66 = 0xFFFFFFFFFFFFFFFFLL >> v65;
    if (v65 == 61) {
      unint64_t v67 = 6;
    }
    else {
      unint64_t v67 = (0xFFFFFFFFFFFFFFFFLL >> v65) - (0x1FFFFFFFFFFFFFFFuLL >> v65);
    }
    a1[65] = v67;
    unint64_t v68 = (v66 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    int v69 = (char *)operator new(v68 + 12 * v66);
    a1[60] = v69;
    a1[61] = &v69[v68];
    memset(v69, 128, v66 + 8);
    v69[v66] = -1;
    a1[65] = v67;
    a1[63] = v66;
  }
  unint64_t v70 = *a2;
  a1[66] = &unk_20E1710;
  a1[71] = 0;
  a1[67] = 0;
  a1[69] = 0;
  a1[68] = 0;
  if (v70)
  {
    unint64_t v71 = __clz(v70);
    unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> v71;
    if (v71 == 61) {
      unint64_t v73 = 6;
    }
    else {
      unint64_t v73 = (0xFFFFFFFFFFFFFFFFLL >> v71) - (0x1FFFFFFFFFFFFFFFuLL >> v71);
    }
    a1[71] = v73;
    unint64_t v74 = (v72 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    uint64_t v75 = (char *)operator new(v74 + 12 * v72);
    a1[66] = v75;
    a1[67] = &v75[v74];
    memset(v75, 128, v72 + 8);
    v75[v72] = -1;
    a1[71] = v73;
    a1[69] = v72;
  }
  unint64_t v76 = *a2;
  a1[72] = &unk_20E1710;
  a1[77] = 0;
  a1[73] = 0;
  a1[75] = 0;
  a1[74] = 0;
  if (v76)
  {
    unint64_t v77 = __clz(v76);
    unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> v77;
    if (v77 == 61) {
      unint64_t v79 = 6;
    }
    else {
      unint64_t v79 = (0xFFFFFFFFFFFFFFFFLL >> v77) - (0x1FFFFFFFFFFFFFFFuLL >> v77);
    }
    a1[77] = v79;
    unint64_t v80 = (v78 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    int v81 = (char *)operator new(v80 + 12 * v78);
    a1[72] = v81;
    a1[73] = &v81[v80];
    memset(v81, 128, v78 + 8);
    v81[v78] = -1;
    a1[77] = v79;
    a1[75] = v78;
  }
  unint64_t v82 = *a2;
  a1[78] = &unk_20E1710;
  a1[83] = 0;
  a1[79] = 0;
  a1[81] = 0;
  a1[80] = 0;
  if (v82)
  {
    unint64_t v83 = __clz(v82);
    unint64_t v84 = 0xFFFFFFFFFFFFFFFFLL >> v83;
    if (v83 == 61) {
      unint64_t v85 = 6;
    }
    else {
      unint64_t v85 = (0xFFFFFFFFFFFFFFFFLL >> v83) - (0x1FFFFFFFFFFFFFFFuLL >> v83);
    }
    a1[83] = v85;
    unint64_t v86 = (v84 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    BOOL v87 = (char *)operator new(v86 + 12 * v84);
    a1[78] = v87;
    a1[79] = &v87[v86];
    memset(v87, 128, v84 + 8);
    v87[v84] = -1;
    a1[83] = v85;
    a1[81] = v84;
  }
  unint64_t v88 = *a2;
  a1[84] = &unk_20E1710;
  a1[89] = 0;
  a1[85] = 0;
  a1[87] = 0;
  a1[86] = 0;
  if (v88)
  {
    unint64_t v89 = __clz(v88);
    unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> v89;
    if (v89 == 61) {
      unint64_t v91 = 6;
    }
    else {
      unint64_t v91 = (0xFFFFFFFFFFFFFFFFLL >> v89) - (0x1FFFFFFFFFFFFFFFuLL >> v89);
    }
    a1[89] = v91;
    unint64_t v92 = (v90 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    int v93 = (char *)operator new(v92 + 12 * v90);
    a1[84] = v93;
    a1[85] = &v93[v92];
    memset(v93, 128, v90 + 8);
    v93[v90] = -1;
    a1[89] = v91;
    a1[87] = v90;
  }
  unint64_t v94 = *a2;
  a1[90] = &unk_20E1710;
  a1[95] = 0;
  a1[91] = 0;
  a1[93] = 0;
  a1[92] = 0;
  if (v94)
  {
    unint64_t v95 = __clz(v94);
    unint64_t v96 = 0xFFFFFFFFFFFFFFFFLL >> v95;
    if (v95 == 61) {
      unint64_t v97 = 6;
    }
    else {
      unint64_t v97 = (0xFFFFFFFFFFFFFFFFLL >> v95) - (0x1FFFFFFFFFFFFFFFuLL >> v95);
    }
    a1[95] = v97;
    unint64_t v98 = (v96 & 0xFFFFFFFFFFFFFFFCLL) + 12;
    int v99 = (char *)operator new(v98 + 12 * v96);
    a1[90] = v99;
    a1[91] = &v99[v98];
    memset(v99, 128, v96 + 8);
    v99[v96] = -1;
    a1[95] = v97;
    a1[93] = v96;
  }
  return a1;
}

void sub_F91EA8(_Unwind_Exception *a1)
{
  sub_20B18D8(v2, v1);
  _Unwind_Resume(a1);
}

__n128 sub_F91EC0(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 == a2) {
    return result;
  }
  int v4 = *(_DWORD *)(a1 + 32);
  int v5 = *((_DWORD *)a2 + 8);
  if (v4 != v5)
  {
    if (v4)
    {
      if (v5 != 1)
      {
LABEL_13:
        if (!v5)
        {
          uint64_t v10 = a2[1];
          *(void *)a1 = *a2;
          *(void *)(a1 + 8) = v10;
          if (v10) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
          }
        }
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v11 = *(std::__shared_weak_count **)(a1 + 8);
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      int v5 = *((_DWORD *)a2 + 8);
      if (v5 != 1) {
        goto LABEL_13;
      }
    }
    __n128 result = *(__n128 *)a2;
    long long v12 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
LABEL_21:
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    return result;
  }
  if (v4 == 1)
  {
    __n128 result = *(__n128 *)a2;
    long long v13 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
  }
  else if (!v4)
  {
    uint64_t v7 = *a2;
    uint64_t v6 = a2[1];
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v6;
    if (v8)
    {
      if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  return result;
}

void *sub_F92034(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = &unk_20E1710;
  a1[5] = 0;
  a1[6] = 0;
  a1[4] = 0;
  a1[8] = 0;
  a1[9] = &unk_20E1710;
  a1[11] = 0;
  a1[12] = 0;
  a1[10] = 0;
  a1[14] = 0;
  a1[15] = &unk_20E1710;
  a1[16] = 0;
  a1[17] = 0;
  a1[18] = 0;
  a1[20] = 0;
  a1[21] = &unk_20E1710;
  a1[23] = 0;
  a1[24] = 0;
  a1[22] = 0;
  a1[26] = 0;
  a1[27] = &unk_20E1710;
  a1[29] = 0;
  a1[30] = 0;
  a1[28] = 0;
  a1[32] = 0;
  a1[33] = &unk_20E1710;
  a1[35] = 0;
  a1[36] = 0;
  a1[34] = 0;
  a1[38] = 0;
  a1[39] = &unk_20E1710;
  a1[40] = 0;
  a1[41] = 0;
  a1[42] = 0;
  a1[44] = 0;
  a1[45] = &unk_20E1710;
  a1[46] = 0;
  a1[47] = 0;
  a1[48] = 0;
  a1[50] = 0;
  a1[51] = &unk_20E1710;
  a1[52] = 0;
  a1[53] = 0;
  a1[54] = 0;
  a1[56] = 0;
  a1[57] = &unk_20E1710;
  a1[58] = 0;
  a1[59] = 0;
  a1[60] = 0;
  a1[62] = 0;
  a1[63] = &unk_20E1710;
  a1[68] = 0;
  a1[65] = 0;
  a1[64] = 0;
  a1[66] = 0;
  a1[69] = &unk_20E1710;
  a1[74] = 0;
  a1[71] = 0;
  a1[70] = 0;
  a1[72] = 0;
  a1[75] = &unk_20E1710;
  a1[80] = 0;
  a1[77] = 0;
  a1[76] = 0;
  a1[78] = 0;
  a1[81] = &unk_20E1710;
  a1[86] = 0;
  a1[83] = 0;
  a1[82] = 0;
  a1[84] = 0;
  a1[87] = &unk_20E1710;
  a1[92] = 0;
  a1[89] = 0;
  a1[88] = 0;
  a1[90] = 0;
  a1[93] = &unk_20E1710;
  a1[98] = 0;
  a1[95] = 0;
  a1[94] = 0;
  a1[96] = 0;
  sub_F92190((uint64_t)(a1 + 99), (uint64_t *)(a2 + 4280));
  return a1;
}

void sub_F92174(_Unwind_Exception *a1)
{
  sub_42CB30(v2);
  sub_C64510(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F92190(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 34) = 0;
  *(void *)(a1 + 24) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = -1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0xFFFFFFFF00000000;
  uint64_t v3 = (const double *)(a1 + 72);
  *(void *)(a1 + 64) = 32;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_20B98A0;
  *(_WORD *)(a1 + 32) = 0;
  unsigned int v4 = sub_F78BBC(a2);
  __p = 0;
  unint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_F92358((void *)(a1 + 88), v4, (uint64_t)&__p);
  if (__p)
  {
    unint64_t v16 = __p;
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 33) = 1;
  *(void *)(a1 + 72) = 0xFFFFFFFF00000000;
  int v5 = (char *)malloc_type_malloc(8 * *(void *)(a1 + 64), 0x100004000313F17uLL);
  *(void *)(a1 + 80) = v5;
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6)
  {
    unint64_t v7 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v7 < 0xF)
    {
      unint64_t v8 = v5;
LABEL_11:
      long long v13 = &v5[8 * v6];
      do
      {
        *(double *)unint64_t v8 = *v3;
        v8 += 8;
      }
      while (v8 != v13);
      return a1;
    }
    if ((unint64_t)v5 < a1 + 80)
    {
      unint64_t v8 = v5;
      if (v3 < (const double *)&v5[8 * v6]) {
        goto LABEL_11;
      }
    }
    unint64_t v9 = v7 + 1;
    unint64_t v8 = &v5[8 * (v9 & 0x3FFFFFFFFFFFFFFCLL)];
    float64x2_t v10 = vld1q_dup_f64(v3);
    unint64_t v11 = (float64x2_t *)(v5 + 16);
    uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v10;
      *unint64_t v11 = v10;
      v11 += 2;
      v12 -= 4;
    }
    while (v12);
    if (v9 != (v9 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_11;
    }
  }
  return a1;
}

void sub_F922F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_36094(v12);
  unint64_t v14 = *(void **)(v11 + 80);
  if (!v14) {
    _Unwind_Resume(a1);
  }
  free(v14);
  _Unwind_Resume(a1);
}

void *sub_F92358(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    uint64_t v6 = 3 * a2;
    unint64_t v7 = operator new(24 * a2);
    unint64_t v8 = v7;
    *a1 = v7;
    a1[1] = v7;
    unint64_t v9 = &v7[v6];
    a1[2] = &v7[v6];
    float64x2_t v10 = *(const void **)a3;
    int64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
    if (v11)
    {
      if (v11 < 0)
      {
        void *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        sub_2E00();
      }
      uint64_t v12 = 24 * a2;
      do
      {
        *unint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        long long v13 = (char *)operator new(v11);
        *unint64_t v8 = v13;
        v8[1] = v13;
        unint64_t v14 = &v13[8 * (v11 >> 3)];
        v8[2] = v14;
        memcpy(v13, v10, v11);
        v8[1] = v14;
        v8 += 3;
        v12 -= 24;
      }
      while (v12);
    }
    else
    {
      bzero(v7, 24 * ((v6 * 8 - 24) / 0x18uLL) + 24);
    }
    a1[1] = v9;
  }
  return a1;
}

void sub_F9247C(_Unwind_Exception *exception_object)
{
  unsigned int v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void *sub_F924AC(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  int v5 = sub_F92618(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    uint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  unint64_t v7 = (char *)operator new(0x5F4uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 1524;
  if (a2)
  {
    unint64_t v8 = (char *)operator new(80 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[80 * v4];
  }
  return a1;
}

void sub_F92590(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  int v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    uint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

void *sub_F92618(void *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  a1[5] = 0;
  *a1 = &unk_20E1710;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  if (v4)
  {
    unint64_t v5 = __clz(v4);
    unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> v5;
    if (v5 == 61) {
      unint64_t v7 = 6;
    }
    else {
      unint64_t v7 = (0xFFFFFFFFFFFFFFFFLL >> v5) - (0x1FFFFFFFFFFFFFFFuLL >> v5);
    }
    a1[5] = v7;
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v9 = (char *)operator new(v8 + 16 * v6);
    *a1 = v9;
    a1[1] = &v9[v8];
    memset(v9, 128, v6 + 8);
    v9[v6] = -1;
    a1[5] = v7;
    a1[3] = v6;
  }
  a1[6] = &unk_20E1710;
  unint64_t v10 = *a2;
  a1[11] = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  if (v10)
  {
    unint64_t v11 = __clz(v10);
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> v11;
    if (v11 == 61) {
      unint64_t v13 = 6;
    }
    else {
      unint64_t v13 = (0xFFFFFFFFFFFFFFFFLL >> v11) - (0x1FFFFFFFFFFFFFFFuLL >> v11);
    }
    a1[11] = v13;
    unint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 16;
    int32x2_t v15 = (char *)operator new(v14 + 16 * v12);
    a1[6] = v15;
    a1[7] = &v15[v14];
    memset(v15, 128, v12 + 8);
    v15[v12] = -1;
    a1[11] = v13;
    a1[9] = v12;
  }
  a1[12] = &unk_20E1710;
  unint64_t v16 = *a2;
  a1[17] = 0;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  if (v16)
  {
    unint64_t v17 = __clz(v16);
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> v17;
    if (v17 == 61) {
      unint64_t v19 = 6;
    }
    else {
      unint64_t v19 = (0xFFFFFFFFFFFFFFFFLL >> v17) - (0x1FFFFFFFFFFFFFFFuLL >> v17);
    }
    a1[17] = v19;
    unint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v21 = (char *)operator new(v20 + 16 * v18);
    a1[12] = v21;
    a1[13] = &v21[v20];
    memset(v21, 128, v18 + 8);
    v21[v18] = -1;
    a1[17] = v19;
    a1[15] = v18;
  }
  a1[18] = &unk_20E1710;
  unint64_t v22 = *a2;
  a1[23] = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[19] = 0;
  if (v22)
  {
    unint64_t v23 = __clz(v22);
    unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> v23;
    if (v23 == 61) {
      unint64_t v25 = 6;
    }
    else {
      unint64_t v25 = (0xFFFFFFFFFFFFFFFFLL >> v23) - (0x1FFFFFFFFFFFFFFFuLL >> v23);
    }
    a1[23] = v25;
    unint64_t v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 16;
    long long v27 = (char *)operator new(v26 + 16 * v24);
    a1[18] = v27;
    a1[19] = &v27[v26];
    memset(v27, 128, v24 + 8);
    v27[v24] = -1;
    a1[23] = v25;
    a1[21] = v24;
  }
  a1[24] = &unk_20E1710;
  unint64_t v28 = *a2;
  a1[29] = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = 0;
  if (v28)
  {
    unint64_t v29 = __clz(v28);
    unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> v29;
    if (v29 == 61) {
      unint64_t v31 = 6;
    }
    else {
      unint64_t v31 = (0xFFFFFFFFFFFFFFFFLL >> v29) - (0x1FFFFFFFFFFFFFFFuLL >> v29);
    }
    a1[29] = v31;
    unint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v33 = (char *)operator new(v32 + 16 * v30);
    a1[24] = v33;
    a1[25] = &v33[v32];
    memset(v33, 128, v30 + 8);
    v33[v30] = -1;
    a1[29] = v31;
    a1[27] = v30;
  }
  a1[30] = &unk_20E1710;
  unint64_t v34 = *a2;
  a1[35] = 0;
  a1[32] = 0;
  a1[33] = 0;
  a1[31] = 0;
  if (v34)
  {
    unint64_t v35 = __clz(v34);
    unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> v35;
    if (v35 == 61) {
      unint64_t v37 = 6;
    }
    else {
      unint64_t v37 = (0xFFFFFFFFFFFFFFFFLL >> v35) - (0x1FFFFFFFFFFFFFFFuLL >> v35);
    }
    a1[35] = v37;
    unint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v39 = (char *)operator new(v38 + 16 * v36);
    a1[30] = v39;
    a1[31] = &v39[v38];
    memset(v39, 128, v36 + 8);
    v39[v36] = -1;
    a1[35] = v37;
    a1[33] = v36;
  }
  unint64_t v40 = *a2;
  a1[41] = 0;
  a1[36] = &unk_20E1710;
  a1[37] = 0;
  a1[38] = 0;
  a1[39] = 0;
  if (v40)
  {
    unint64_t v41 = __clz(v40);
    unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> v41;
    if (v41 == 61) {
      unint64_t v43 = 6;
    }
    else {
      unint64_t v43 = (0xFFFFFFFFFFFFFFFFLL >> v41) - (0x1FFFFFFFFFFFFFFFuLL >> v41);
    }
    a1[41] = v43;
    unint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v45 = (char *)operator new(v44 + 16 * v42);
    a1[36] = v45;
    a1[37] = &v45[v44];
    memset(v45, 128, v42 + 8);
    v45[v42] = -1;
    a1[41] = v43;
    a1[39] = v42;
  }
  unint64_t v46 = *a2;
  a1[47] = 0;
  a1[42] = &unk_20E1710;
  a1[43] = 0;
  a1[44] = 0;
  a1[45] = 0;
  if (v46)
  {
    unint64_t v47 = __clz(v46);
    unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> v47;
    if (v47 == 61) {
      unint64_t v49 = 6;
    }
    else {
      unint64_t v49 = (0xFFFFFFFFFFFFFFFFLL >> v47) - (0x1FFFFFFFFFFFFFFFuLL >> v47);
    }
    a1[47] = v49;
    unint64_t v50 = (v48 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v51 = (char *)operator new(v50 + 16 * v48);
    a1[42] = v51;
    a1[43] = &v51[v50];
    memset(v51, 128, v48 + 8);
    v51[v48] = -1;
    a1[47] = v49;
    a1[45] = v48;
  }
  unint64_t v52 = *a2;
  a1[53] = 0;
  a1[48] = &unk_20E1710;
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  if (v52)
  {
    unint64_t v53 = __clz(v52);
    unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> v53;
    if (v53 == 61) {
      unint64_t v55 = 6;
    }
    else {
      unint64_t v55 = (0xFFFFFFFFFFFFFFFFLL >> v53) - (0x1FFFFFFFFFFFFFFFuLL >> v53);
    }
    a1[53] = v55;
    unint64_t v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v57 = (char *)operator new(v56 + 16 * v54);
    a1[48] = v57;
    a1[49] = &v57[v56];
    memset(v57, 128, v54 + 8);
    v57[v54] = -1;
    a1[53] = v55;
    a1[51] = v54;
  }
  unint64_t v58 = *a2;
  a1[59] = 0;
  a1[54] = &unk_20E1710;
  a1[55] = 0;
  a1[56] = 0;
  a1[57] = 0;
  if (v58)
  {
    unint64_t v59 = __clz(v58);
    unint64_t v60 = 0xFFFFFFFFFFFFFFFFLL >> v59;
    if (v59 == 61) {
      unint64_t v61 = 6;
    }
    else {
      unint64_t v61 = (0xFFFFFFFFFFFFFFFFLL >> v59) - (0x1FFFFFFFFFFFFFFFuLL >> v59);
    }
    a1[59] = v61;
    unint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 16;
    char v63 = (char *)operator new(v62 + 16 * v60);
    a1[54] = v63;
    a1[55] = &v63[v62];
    memset(v63, 128, v60 + 8);
    v63[v60] = -1;
    a1[59] = v61;
    a1[57] = v60;
  }
  unint64_t v64 = *a2;
  a1[65] = 0;
  a1[60] = &unk_20E1710;
  a1[61] = 0;
  a1[62] = 0;
  a1[63] = 0;
  if (v64)
  {
    unint64_t v65 = __clz(v64);
    unint64_t v66 = 0xFFFFFFFFFFFFFFFFLL >> v65;
    if (v65 == 61) {
      unint64_t v67 = 6;
    }
    else {
      unint64_t v67 = (0xFFFFFFFFFFFFFFFFLL >> v65) - (0x1FFFFFFFFFFFFFFFuLL >> v65);
    }
    a1[65] = v67;
    unint64_t v68 = (v66 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v69 = (char *)operator new(v68 + 16 * v66);
    a1[60] = v69;
    a1[61] = &v69[v68];
    memset(v69, 128, v66 + 8);
    v69[v66] = -1;
    a1[65] = v67;
    a1[63] = v66;
  }
  unint64_t v70 = *a2;
  a1[66] = &unk_20E1710;
  a1[71] = 0;
  a1[67] = 0;
  a1[69] = 0;
  a1[68] = 0;
  if (v70)
  {
    unint64_t v71 = __clz(v70);
    unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> v71;
    if (v71 == 61) {
      unint64_t v73 = 6;
    }
    else {
      unint64_t v73 = (0xFFFFFFFFFFFFFFFFLL >> v71) - (0x1FFFFFFFFFFFFFFFuLL >> v71);
    }
    a1[71] = v73;
    unint64_t v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v75 = (char *)operator new(v74 + 16 * v72);
    a1[66] = v75;
    a1[67] = &v75[v74];
    memset(v75, 128, v72 + 8);
    v75[v72] = -1;
    a1[71] = v73;
    a1[69] = v72;
  }
  unint64_t v76 = *a2;
  a1[72] = &unk_20E1710;
  a1[77] = 0;
  a1[73] = 0;
  a1[75] = 0;
  a1[74] = 0;
  if (v76)
  {
    unint64_t v77 = __clz(v76);
    unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> v77;
    if (v77 == 61) {
      unint64_t v79 = 6;
    }
    else {
      unint64_t v79 = (0xFFFFFFFFFFFFFFFFLL >> v77) - (0x1FFFFFFFFFFFFFFFuLL >> v77);
    }
    a1[77] = v79;
    unint64_t v80 = (v78 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v81 = (char *)operator new(v80 + 16 * v78);
    a1[72] = v81;
    a1[73] = &v81[v80];
    memset(v81, 128, v78 + 8);
    v81[v78] = -1;
    a1[77] = v79;
    a1[75] = v78;
  }
  unint64_t v82 = *a2;
  a1[78] = &unk_20E1710;
  a1[83] = 0;
  a1[79] = 0;
  a1[81] = 0;
  a1[80] = 0;
  if (v82)
  {
    unint64_t v83 = __clz(v82);
    unint64_t v84 = 0xFFFFFFFFFFFFFFFFLL >> v83;
    if (v83 == 61) {
      unint64_t v85 = 6;
    }
    else {
      unint64_t v85 = (0xFFFFFFFFFFFFFFFFLL >> v83) - (0x1FFFFFFFFFFFFFFFuLL >> v83);
    }
    a1[83] = v85;
    unint64_t v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 16;
    BOOL v87 = (char *)operator new(v86 + 16 * v84);
    a1[78] = v87;
    a1[79] = &v87[v86];
    memset(v87, 128, v84 + 8);
    v87[v84] = -1;
    a1[83] = v85;
    a1[81] = v84;
  }
  unint64_t v88 = *a2;
  a1[84] = &unk_20E1710;
  a1[89] = 0;
  a1[85] = 0;
  a1[87] = 0;
  a1[86] = 0;
  if (v88)
  {
    unint64_t v89 = __clz(v88);
    unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> v89;
    if (v89 == 61) {
      unint64_t v91 = 6;
    }
    else {
      unint64_t v91 = (0xFFFFFFFFFFFFFFFFLL >> v89) - (0x1FFFFFFFFFFFFFFFuLL >> v89);
    }
    a1[89] = v91;
    unint64_t v92 = (v90 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v93 = (char *)operator new(v92 + 16 * v90);
    a1[84] = v93;
    a1[85] = &v93[v92];
    memset(v93, 128, v90 + 8);
    v93[v90] = -1;
    a1[89] = v91;
    a1[87] = v90;
  }
  unint64_t v94 = *a2;
  a1[90] = &unk_20E1710;
  a1[95] = 0;
  a1[91] = 0;
  a1[93] = 0;
  a1[92] = 0;
  if (v94)
  {
    unint64_t v95 = __clz(v94);
    unint64_t v96 = 0xFFFFFFFFFFFFFFFFLL >> v95;
    if (v95 == 61) {
      unint64_t v97 = 6;
    }
    else {
      unint64_t v97 = (0xFFFFFFFFFFFFFFFFLL >> v95) - (0x1FFFFFFFFFFFFFFFuLL >> v95);
    }
    a1[95] = v97;
    unint64_t v98 = (v96 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v99 = (char *)operator new(v98 + 16 * v96);
    a1[90] = v99;
    a1[91] = &v99[v98];
    memset(v99, 128, v96 + 8);
    v99[v96] = -1;
    a1[95] = v97;
    a1[93] = v96;
  }
  return a1;
}

void sub_F92E2C(_Unwind_Exception *a1)
{
  sub_20B18D8(v2, v1);
  _Unwind_Resume(a1);
}

void sub_F92E44(void **a1, unint64_t a2)
{
  unint64_t v4 = (char *)a1[1];
  unint64_t v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      unint64_t v11 = &v4[24 * a2];
      do
      {
        *(void *)unint64_t v4 = 0;
        *(_OWORD *)(v4 + 8) = xmmword_20E7B70;
        v4 += 24;
      }
      while (v4 != v11);
      unint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      unint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      unint64_t v10 = 0;
    }
    unint64_t v12 = &v10[24 * v6];
    unint64_t v13 = &v12[24 * a2];
    unint64_t v14 = v12;
    do
    {
      *(void *)unint64_t v14 = 0;
      *(_OWORD *)(v14 + 8) = xmmword_20E7B70;
      v14 += 24;
    }
    while (v14 != v13);
    int32x2_t v15 = &v10[24 * v9];
    unint64_t v17 = (char *)*a1;
    unint64_t v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        long long v18 = *(_OWORD *)(v16 - 24);
        *((void *)v12 - 1) = *((void *)v16 - 1);
        *(_OWORD *)(v12 - 24) = v18;
        v12 -= 24;
        v16 -= 24;
      }
      while (v16 != v17);
      unint64_t v16 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v13;
    a1[2] = v15;
    if (v16)
    {
      operator delete(v16);
    }
  }
}

double sub_F92FD4@<D0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = sub_F93238(a1, *a2, 1);
  if (v5
    && (unint64_t v6 = &v5[-*(int *)v5], *(unsigned __int16 *)v6 >= 9u)
    && (uint64_t v7 = *((unsigned __int16 *)v6 + 4)) != 0
    && (unint64_t v8 = (int *)sub_F930D4((unsigned int *)&v5[v7 + *(unsigned int *)&v5[v7]], a2[1]),
        unint64_t v9 = (unsigned __int16 *)((char *)v8 - *v8),
        *v9 >= 0xDu)
    && (unsigned __int16 v10 = v9[6]) != 0)
  {
    uint64_t v11 = (uint64_t)v8 + v10;
    LODWORD(v12) = *(_DWORD *)(v11 + 4);
    if (v12 >= 0xFFFFFFFE) {
      uint64_t v12 = 4294967294;
    }
    else {
      uint64_t v12 = v12;
    }
    unint64_t v17 = *(unsigned int *)v11 | (unint64_t)(v12 << 32);
    int v18 = 0x7FFFFFFF;
    uint64_t v13 = *(unsigned int *)(v11 + 8);
    LODWORD(v11) = *(_DWORD *)(v11 + 12);
    if (v11 >= 0xFFFFFFFE) {
      uint64_t v11 = 4294967294;
    }
    else {
      uint64_t v11 = v11;
    }
    uint64_t v15 = v13 | (v11 << 32);
    int v16 = 0x7FFFFFFF;
    sub_3392C(a3, (unsigned int *)&v17, (unsigned int *)&v15);
  }
  else
  {
    *(_OWORD *)a3 = xmmword_20B8E30;
    double result = NAN;
    *(void *)(a3 + 16) = 0x7FFFFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_F930D4(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    unint64_t v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    unint64_t v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[a2 + 1] + a1[a2 + 1];
}

void sub_F931B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

char *sub_F93238(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 688) == a2)
    {
      unsigned int v7 = 28;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 712) == a2)
    {
      unsigned int v7 = 29;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 736) == a2)
    {
      unsigned int v7 = 30;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 760) == a2)
    {
      unsigned int v7 = 31;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      unint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 744);
    unint64_t v12 = *(void *)(a1 + 720);
    unint64_t v13 = *(void *)(a1 + 696);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 696);
    }
    int v15 = 28;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 720);
    }
    int v17 = 29;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 744);
    }
    unint64_t v19 = *(void *)(a1 + 768);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 30;
    }
    uint64_t v21 = (unsigned int *)sub_2AB884(v5, 7, a2, 1);
    unsigned int v22 = 31;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_F933C8(v24);
  return 0;
}

uint64_t sub_F933C8(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      unint64_t v9 = sub_736EC(7u);
      std::string v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_F93520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

double sub_F935F4(uint64_t a1)
{
  LODWORD(result) = *(_DWORD *)(a1 + 16);
  unint64_t v2 = 4;
  if (!vcvts_n_u32_f32(*(float *)&result, 2uLL))
  {
    do
    {
      if ((v2 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v2 *= 2;
    }
    while (!(unint64_t)(float)(*(float *)&result * (float)v2));
  }
  if (*(void *)(a1 + 48) || v2 != *(void *)(a1 + 56))
  {
    *(void *)&double result = sub_C74D8C(a1, v2).u64[0];
  }
  return result;
}

void sub_F936A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_F936B4(uint64_t a1, void *a2, int *a3)
{
  unsigned int v7 = *(char **)(a1 + 88);
  long long v6 = *(char **)(a1 + 96);
  if (v7 != v6)
  {
    unint64_t v8 = v6 - v7 - 24;
    unint64_t v9 = *(char **)(a1 + 88);
    if (v8 < 0x18) {
      goto LABEL_28;
    }
    unint64_t v10 = v8 / 0x18 + 1;
    unint64_t v9 = &v7[24 * (v10 & 0x1FFFFFFFFFFFFFFELL)];
    long long v11 = (uint64_t *)(v7 + 24);
    uint64_t v12 = v10 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v13 = *v11;
      *(v11 - 2) = *(v11 - 3);
      v11[1] = v13;
      v11 += 6;
      v12 -= 2;
    }
    while (v12);
    if (v10 != (v10 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_28:
      do
      {
        *((void *)v9 + 1) = *(void *)v9;
        v9 += 24;
      }
      while (v9 != v6);
    }
  }
  BOOL v14 = *(uint64_t **)a1;
  LODWORD(v24) = 1;
  BOOL v15 = sub_F963A0(*v14, HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), &v24);
  int v16 = *a3;
  unsigned int v17 = v16 + 1;
  unint64_t result = sub_F78BBC(*(uint64_t **)a1);
  if (v16 + 1 > result) {
    int v19 = v16 + 1;
  }
  else {
    int v19 = result;
  }
  if (v17 < result)
  {
    if (v15)
    {
      do
      {
        unsigned int v25 = v17;
        unint64_t result = sub_F968AC(**(void **)a1, HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), (*a2 >> 1) & 1, &v25);
        unint64_t v24 = result;
        if (result) {
          BOOL v20 = result > 0xFFFFFFFEFFFFFFFFLL;
        }
        else {
          BOOL v20 = 1;
        }
        if (!v20)
        {
          sub_29603C((void **)(*(void *)(a1 + 88) + 24 * v25), &v24);
          uint64_t v21 = (void **)(*(void *)(a1 + 88) + 24 * v25);
          unint64_t v23 = sub_F968AC(**(void **)a1, HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), (*a2 & 2) == 0, &v25);
          unint64_t result = (unint64_t)sub_29603C(v21, &v23);
        }
        ++v17;
      }
      while (v19 != v17);
    }
    else
    {
      do
      {
        unsigned int v25 = v17;
        unint64_t result = sub_F968AC(**(void **)a1, HIDWORD(*a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(*a2) << 32), (*a2 >> 1) & 1, &v25);
        unint64_t v24 = result;
        if (result) {
          BOOL v22 = result > 0xFFFFFFFEFFFFFFFFLL;
        }
        else {
          BOOL v22 = 1;
        }
        if (!v22) {
          unint64_t result = (unint64_t)sub_29603C((void **)(*(void *)(a1 + 88) + 24 * v25), &v24);
        }
        ++v17;
      }
      while (v19 != v17);
    }
  }
  return result;
}

void sub_F938DC(uint64_t **a1, void *a2)
{
  if (*a2 == a2[1]) {
    return;
  }
  char v200 = 0;
  uint64_t v198 = 0x3E4CCCCD3F000000;
  int v201 = 0;
  int v202 = 0;
  int v203 = -1;
  uint64_t v204 = 0;
  uint64_t v205 = 0;
  long long v197 = xmmword_20B98A0;
  __int16 v199 = 256;
  long long v206 = xmmword_20E2130;
  v207 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  int64x2_t v3 = vdupq_n_s64(0xFFFFFFFF00000000);
  unint64_t v4 = (int64x2_t *)((char *)v207 + 16);
  uint64_t v5 = 32;
  do
  {
    v4[-1] = v3;
    int64x2_t *v4 = v3;
    v4 += 2;
    v5 -= 4;
  }
  while (v5);
  v195 = 0;
  long long v196 = 0uLL;
  v193 = 0;
  long long v194 = 0uLL;
  __p = 0;
  v192 = 0;
  uint64_t v6 = (char *)a1[12] - (char *)a1[11];
  if (!v6) {
    goto LABEL_235;
  }
  unsigned int v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v180 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  v187 = a1;
  do
  {
    if (v10 < (uint64_t)(a2[1] - *a2) >> 2)
    {
      int v182 = *(_DWORD *)(*a2 + 4 * v10);
      if (v182)
      {
        uint64_t v12 = a1[11];
        long long v11 = a1[12];
        uint64_t v13 = (char **)&v12[3 * v10];
        if (&v195 != (void **)v13)
        {
          sub_326C0(&v195, *v13, v13[1], (v13[1] - *v13) >> 3);
          unint64_t v9 = (int8x16_t *)v195;
          unint64_t v8 = (int8x16_t *)v196;
        }
        unint64_t v14 = 126 - 2 * __clz(((char *)v8 - (char *)v9) >> 3);
        if (v8 == v9) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = v14;
        }
        sub_F98280(v9, v8, (uint64_t)&v208, v15, 1);
        int v16 = (int *)v195;
        if (v195 == (void *)v196)
        {
          long long v27 = (int8x16_t *)v195;
          unint64_t v9 = (int8x16_t *)v195;
          goto LABEL_37;
        }
        unint64_t v9 = (int8x16_t *)v196;
        unsigned int v17 = (int8x16_t *)v195;
        do
        {
          long long v18 = v16 + 2;
          if (v16 + 2 == (int *)v196) {
            goto LABEL_34;
          }
          int v19 = *v16;
          int v20 = v16[1];
          LODWORD(v21) = v16[2];
          int v22 = v16[3];
          BOOL v23 = v19 == v21 && v20 == v22;
          int v16 = v18;
        }
        while (!v23);
        unint64_t v24 = (int8x16_t *)(v18 + 2);
        unsigned int v25 = v18 - 2;
        if (v24 == (int8x16_t *)v196)
        {
          unsigned int v26 = (int8x16_t *)(v25 + 2);
          if (v25 + 2 != (_DWORD *)v196) {
            goto LABEL_24;
          }
        }
        else
        {
          do
          {
            if (v21 != v24->i32[0] || v25[1] != v24->i32[1])
            {
              uint64_t v21 = v24->i64[0];
              *((void *)v25 + 1) = v24->i64[0];
              v25 += 2;
            }
            unint64_t v24 = (int8x16_t *)((char *)v24 + 8);
          }
          while (v24 != v9);
          unint64_t v9 = (int8x16_t *)v196;
          unsigned int v26 = (int8x16_t *)(v25 + 2);
          if (v25 + 2 != (_DWORD *)v196)
          {
LABEL_24:
            unint64_t v9 = v26;
            *(void *)&long long v196 = v26;
            if (v17 == v26)
            {
LABEL_25:
              long long v27 = v9;
LABEL_37:
              int v183 = 0;
              uint64_t v188 = -1 - 0x5555555555555555 * (v11 - v12);
              unint64_t v189 = v10;
              unint64_t v186 = v10 + 1;
              unint64_t v8 = v27;
LABEL_40:
              v184 = v8;
              if (v9 == v8) {
                goto LABEL_39;
              }
LABEL_43:
              uint64_t v31 = **a1;
              v191 = __p;
              v185 = v9;
              unsigned int v32 = v9->i32[0];
              int v210 = 1;
              v211[0] = v32;
              v208 = &v210;
              v209 = v211;
              unint64_t v33 = *(void *)(v31 + 3856) + 1;
              *(void *)(v31 + 3856) = v33;
              if (!*(void *)v31) {
                goto LABEL_99;
              }
              uint64_t v34 = v31 + 16;
              if (*(_DWORD *)(v31 + 688) == v32)
              {
                unsigned int v35 = 28;
              }
              else if (*(_DWORD *)(v31 + 712) == v32)
              {
                unsigned int v35 = 29;
              }
              else if (*(_DWORD *)(v31 + 736) == v32)
              {
                unsigned int v35 = 30;
              }
              else
              {
                if (*(_DWORD *)(v31 + 760) != v32)
                {
                  unint64_t v69 = *(void *)(v31 + 744);
                  unint64_t v70 = *(void *)(v31 + 720);
                  unint64_t v71 = *(void *)(v31 + 696);
                  unint64_t v72 = *(void *)(v31 + 768);
                  unint64_t v37 = (unsigned int *)sub_2AB884(*(void *)v31, 7, v32, 1);
                  if (v71 >= v33) {
                    unint64_t v73 = v33;
                  }
                  else {
                    unint64_t v73 = v71;
                  }
                  int v74 = 28;
                  if (v71 >= v33) {
                    int v74 = 0;
                  }
                  if (v70 < v73)
                  {
                    unint64_t v73 = v70;
                    int v74 = 29;
                  }
                  if (v69 < v73)
                  {
                    int v74 = 30;
                    unint64_t v73 = v69;
                  }
                  BOOL v75 = v72 >= v73;
                  unsigned int v76 = 31;
                  if (v75) {
                    unsigned int v76 = v74;
                  }
                  uint64_t v77 = v34 + 24 * v76;
                  *(_DWORD *)uint64_t v77 = v211[0];
                  *(void *)(v77 + 8) = *(void *)(v31 + 3856);
                  *(void *)(v77 + 16) = v37;
                  a1 = v187;
                  if (v37)
                  {
LABEL_53:
                    unint64_t v38 = (int *)((char *)v37 + *v37);
                    unint64_t v39 = (unsigned __int16 *)((char *)v38 - *v38);
                    if (*v39 >= 9u)
                    {
                      uint64_t v40 = v39[4];
                      if (v40)
                      {
                        unint64_t v41 = (int *)sub_F930D4((unsigned int *)((char *)v38 + v40 + *(unsigned int *)((char *)v38 + v40)), v185->u32[1]);
                        unint64_t v42 = (unsigned __int16 *)((char *)v41 - *v41);
                        a1 = v187;
                        if (*v42 >= 9u)
                        {
                          uint64_t v43 = v42[4];
                          if (v43)
                          {
                            unint64_t v44 = (unsigned int *)((char *)v41 + v43);
                            uint64_t v45 = *v44;
                            unint64_t v47 = (uint64_t *)((char *)v44 + v45 + 4);
                            uint64_t v46 = *(unsigned int *)((char *)v44 + v45);
                            if (v46)
                            {
                              unint64_t v48 = &v47[v46];
                              unint64_t v50 = __p;
                              unint64_t v49 = v192;
                              while (1)
                              {
                                uint64_t v52 = *v47;
                                if (v50 < v49)
                                {
                                  *(void *)unint64_t v50 = v52;
                                  uint64_t v51 = v50 + 8;
                                }
                                else
                                {
                                  unint64_t v53 = __p;
                                  uint64_t v54 = (v50 - __p) >> 3;
                                  unint64_t v55 = v54 + 1;
                                  if ((unint64_t)(v54 + 1) >> 61) {
                                    sub_2E00();
                                  }
                                  if ((v49 - __p) >> 2 > v55) {
                                    unint64_t v55 = (v49 - __p) >> 2;
                                  }
                                  if ((unint64_t)(v49 - __p) >= 0x7FFFFFFFFFFFFFF8) {
                                    unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v56 = v55;
                                  }
                                  if (v56 >> 61) {
                                    sub_188D718();
                                  }
                                  uint64_t v57 = operator new(8 * v56);
                                  unint64_t v58 = &v57[8 * v54];
                                  *(void *)unint64_t v58 = v52;
                                  uint64_t v51 = v58 + 8;
                                  if (v50 != __p)
                                  {
                                    unint64_t v59 = v50 - 8 - __p;
                                    if (v59 < 0x168
                                      || (&v57[v50 - __p - 8 - (v59 & 0xFFFFFFFFFFFFFFF8)] <= &v57[v50 - __p - 8]
                                        ? (BOOL v60 = &v50[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] > v50 - 8)
                                        : (BOOL v60 = 1),
                                          v60 || (unint64_t)(__p - v57) < 0x20))
                                    {
                                      unint64_t v61 = v50;
                                      a1 = v187;
                                      goto LABEL_77;
                                    }
                                    uint64_t v63 = (v59 >> 3) + 1;
                                    uint64_t v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
                                    unint64_t v61 = &v50[-v64];
                                    v58 -= v64;
                                    unint64_t v65 = &v57[8 * v54 - 16];
                                    unint64_t v66 = v50 - 16;
                                    uint64_t v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
                                    a1 = v187;
                                    do
                                    {
                                      long long v68 = *(_OWORD *)v66;
                                      *(v65 - 1) = *((_OWORD *)v66 - 1);
                                      *unint64_t v65 = v68;
                                      v65 -= 2;
                                      v66 -= 32;
                                      v67 -= 4;
                                    }
                                    while (v67);
                                    if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
                                    {
                                      do
                                      {
LABEL_77:
                                        uint64_t v62 = *((void *)v61 - 1);
                                        v61 -= 8;
                                        *((void *)v58 - 1) = v62;
                                        v58 -= 8;
                                      }
                                      while (v61 != __p);
                                    }
                                    unint64_t v49 = &v57[8 * v56];
                                    __p = v58;
                                    v192 = v49;
                                    if (!v53) {
                                      goto LABEL_60;
                                    }
LABEL_81:
                                    operator delete(v53);
                                    goto LABEL_60;
                                  }
                                  a1 = v187;
                                  unint64_t v49 = &v57[8 * v56];
                                  __p = &v57[8 * v54];
                                  v192 = v49;
                                  if (v53) {
                                    goto LABEL_81;
                                  }
                                }
LABEL_60:
                                v191 = v51;
                                ++v47;
                                unint64_t v50 = v51;
                                if (v47 == v48) {
                                  goto LABEL_100;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    goto LABEL_100;
                  }
LABEL_99:
                  sub_F933C8(&v208);
                  a1 = v187;
LABEL_100:
                  for (uint64_t i = __p; ; i += 8)
                  {
                    if (i == v191)
                    {
                      unint64_t v9 = (int8x16_t *)&v185->u64[1];
                      if (&v185->u64[1] != (unint64_t *)v184) {
                        goto LABEL_43;
                      }
                      unint64_t v8 = (int8x16_t *)v195;
LABEL_39:
                      unsigned int v7 = v8;
                      unint64_t v9 = v193;
                      uint64_t v30 = *((void *)&v196 + 1);
                      long long v196 = v194;
                      *((void *)&v194 + 1) = v30;
                      v195 = v193;
                      v193 = v8;
                      *(void *)&long long v194 = v8;
                      unint64_t v8 = (int8x16_t *)v196;
                      if (++v183 == v182) {
                        goto LABEL_6;
                      }
                      goto LABEL_40;
                    }
                    if (v205 != v204)
                    {
                      uint64_t v80 = v206 - 1;
                      uint64_t v81 = *(void *)i;
                      unint64_t v82 = __ROR8__(*(void *)i, 32);
                      unint64_t v83 = 0xC4CEB9FE1A85EC53
                          * ((0xFF51AFD7ED558CCDLL * (v82 ^ (v82 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v82 ^ (v82 >> 33))) >> 33));
                      uint64_t v84 = (v83 ^ (v83 >> 33)) & (v206 - 1);
                      unint64_t v85 = (unsigned int *)((char *)v207 + 8 * v84);
                      unsigned int v87 = *v85;
                      unsigned int v86 = v85[1];
                      if (DWORD2(v206) != *v85 || HIDWORD(v206) != v86)
                      {
                        if (v204)
                        {
                          uint64_t v89 = 1;
                          while (v202 == v87 && v203 == v86 || __PAIR64__(v86, v87) != v81)
                          {
                            uint64_t v84 = (v84 + v89) & v80;
                            unint64_t v90 = (unsigned int *)((char *)v207 + 8 * v84);
                            unsigned int v87 = *v90;
                            unsigned int v86 = v90[1];
                            ++v89;
                            if (DWORD2(v206) == v87 && HIDWORD(v206) == v86) {
                              goto LABEL_128;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v92 = 1;
                          while (__PAIR64__(v86, v87) != v81)
                          {
                            uint64_t v84 = (v84 + v92) & v80;
                            int v93 = (unsigned int *)((char *)v207 + 8 * v84);
                            unsigned int v87 = *v93;
                            unsigned int v86 = v93[1];
                            ++v92;
                            if (DWORD2(v206) == v87 && HIDWORD(v206) == v86) {
                              goto LABEL_128;
                            }
                          }
                        }
                        if (v84 != -1 && (char *)v207 + 8 * v84 != (char *)v207 + 8 * (void)v206) {
                          continue;
                        }
                      }
                    }
LABEL_128:
                    unint64_t v95 = (int8x16_t *)v194;
                    if ((unint64_t)v194 < *((void *)&v194 + 1))
                    {
                      *(void *)long long v194 = *(void *)i;
                      uint64_t v96 = v194 + 8;
                      goto LABEL_150;
                    }
                    uint64_t v97 = (uint64_t)(v194 - (void)v193) >> 3;
                    unint64_t v98 = v97 + 1;
                    if ((unint64_t)(v97 + 1) >> 61) {
                      goto LABEL_241;
                    }
                    uint64_t v99 = *((void *)&v194 + 1) - (void)v193;
                    if ((uint64_t)(*((void *)&v194 + 1) - (void)v193) >> 2 > v98) {
                      unint64_t v98 = v99 >> 2;
                    }
                    unint64_t v100 = (unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v98;
                    if (v100) {
                      break;
                    }
                    int v101 = 0;
                    int v102 = (int8x16_t *)(8 * v97);
                    *(void *)(8 * v97) = *(void *)i;
                    uint64_t v96 = 8 * v97 + 8;
                    if ((int8x16_t *)v194 != v193) {
                      goto LABEL_141;
                    }
LABEL_148:
                    v193 = v102;
                    *((void *)&v194 + 1) = &v101[8 * v100];
                    if (v95) {
                      operator delete(v95);
                    }
LABEL_150:
                    *(void *)&long long v194 = v96;
                    sub_F94B1C((uint64_t)&v197, 1);
                    sub_F94DF0((int32x2_t *)&v197, i, (uint64_t)&v208);
                    v112 = (char **)&a1[11][3 * v10];
                    v114 = v112[1];
                    unint64_t v113 = (unint64_t)v112[2];
                    if ((unint64_t)v114 < v113)
                    {
                      *(void *)v114 = *(void *)i;
                      uint64_t v115 = (uint64_t)(v114 + 8);
                      goto LABEL_173;
                    }
                    v116 = *v112;
                    uint64_t v117 = v114 - *v112;
                    uint64_t v118 = v117 >> 3;
                    unint64_t v119 = (v117 >> 3) + 1;
                    if (v119 >> 61) {
LABEL_241:
                    }
                      sub_2E00();
                    uint64_t v120 = v113 - (void)v116;
                    if (v120 >> 2 > v119) {
                      unint64_t v119 = v120 >> 2;
                    }
                    if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v121 = v119;
                    }
                    if (v121)
                    {
                      if (v121 >> 61) {
LABEL_240:
                      }
                        sub_188D718();
                      v122 = operator new(8 * v121);
                      v123 = &v122[8 * v118];
                      *(void *)v123 = *(void *)i;
                      uint64_t v115 = (uint64_t)(v123 + 8);
                      if (v114 != v116)
                      {
LABEL_161:
                        unint64_t v124 = v114 - 8 - v116;
                        if (v124 < 0x58)
                        {
                          unint64_t v10 = v189;
                          goto LABEL_170;
                        }
                        unint64_t v125 = v114 - &v122[v117];
                        unint64_t v10 = v189;
                        if (v125 < 0x20) {
                          goto LABEL_248;
                        }
                        uint64_t v126 = (v124 >> 3) + 1;
                        uint64_t v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
                        v128 = &v114[-v127];
                        v123 -= v127;
                        v129 = &v122[8 * v118 - 16];
                        v130 = v114 - 16;
                        uint64_t v131 = v126 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v132 = *(_OWORD *)v130;
                          *(v129 - 1) = *((_OWORD *)v130 - 1);
                          _OWORD *v129 = v132;
                          v129 -= 2;
                          v130 -= 32;
                          v131 -= 4;
                        }
                        while (v131);
                        v114 = v128;
                        if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_248:
                          do
                          {
LABEL_170:
                            uint64_t v133 = *((void *)v114 - 1);
                            v114 -= 8;
                            *((void *)v123 - 1) = v133;
                            v123 -= 8;
                          }
                          while (v114 != v116);
                        }
                        v114 = *v112;
                        *v112 = v123;
                        v112[1] = (char *)v115;
                        v112[2] = &v122[8 * v121];
                        if (!v114) {
                          goto LABEL_173;
                        }
LABEL_172:
                        operator delete(v114);
                        goto LABEL_173;
                      }
                    }
                    else
                    {
                      v122 = 0;
                      v123 = (char *)(8 * v118);
                      *(void *)(8 * v118) = *(void *)i;
                      uint64_t v115 = 8 * v118 + 8;
                      if (v114 != v116) {
                        goto LABEL_161;
                      }
                    }
                    unint64_t v10 = v189;
                    *v112 = v123;
                    v112[1] = (char *)v115;
                    v112[2] = &v122[8 * v121];
                    if (v114) {
                      goto LABEL_172;
                    }
LABEL_173:
                    v112[1] = (char *)v115;
                    if (v10 != v188)
                    {
                      v134 = a1[11];
                      uint64_t v135 = **a1;
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6898, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_24F6898))
                      {
                        qword_24F6890 = 1;
                        __cxa_guard_release(&qword_24F6898);
                      }
                      unsigned int v136 = *(_DWORD *)i;
                      if (*(void *)i == qword_24F6890) {
                        goto LABEL_191;
                      }
                      int v210 = 1;
                      v211[0] = v136;
                      v208 = &v210;
                      v209 = v211;
                      unint64_t v137 = *(void *)(v135 + 3856) + 1;
                      *(void *)(v135 + 3856) = v137;
                      if (*(void *)v135)
                      {
                        uint64_t v138 = v135 + 16;
                        if (*(_DWORD *)(v135 + 688) == v136)
                        {
                          unsigned int v139 = 28;
                          goto LABEL_185;
                        }
                        if (*(_DWORD *)(v135 + 712) == v136)
                        {
                          unsigned int v139 = 29;
                          goto LABEL_185;
                        }
                        if (*(_DWORD *)(v135 + 736) == v136)
                        {
                          unsigned int v139 = 30;
                          goto LABEL_185;
                        }
                        if (*(_DWORD *)(v135 + 760) == v136)
                        {
                          unsigned int v139 = 31;
LABEL_185:
                          ++*(void *)(v135 + 3864);
                          uint64_t v140 = v138 + 24 * v139;
                          *(void *)(v140 + 8) = v137;
                          v141 = *(unsigned int **)(v140 + 16);
                          if (v141)
                          {
LABEL_186:
                            v142 = (int *)((char *)v141 + *v141);
                            v143 = (unsigned __int16 *)((char *)v142 - *v142);
                            if (*v143 < 9u) {
                              goto LABEL_191;
                            }
                            uint64_t v144 = v143[4];
                            if (!v144) {
                              goto LABEL_191;
                            }
                            v145 = (int *)sub_F930D4((unsigned int *)((char *)v142 + v144+ *(unsigned int *)((char *)v142 + v144)), *((_DWORD *)i + 1));
                            v146 = (unsigned __int16 *)((char *)v145 - *v145);
                            if (*v146 >= 0xBu)
                            {
                              unsigned __int16 v147 = v146[5];
                              a1 = v187;
                              if (v147)
                              {
                                uint64_t v149 = *(void *)((char *)v145 + v147);
                                unint64_t v148 = v149 & 0xFFFFFFFF00000000;
                                uint64_t v149 = v149;
                                goto LABEL_207;
                              }
LABEL_191:
                              uint64_t v149 = 0;
                              unint64_t v148 = 0xFFFFFFFF00000000;
LABEL_207:
                              v158 = (char **)&v134[3 * v186];
                              unint64_t v159 = v149 | v148;
                              v161 = v158[1];
                              unint64_t v160 = (unint64_t)v158[2];
                              if ((unint64_t)v161 < v160)
                              {
                                *(void *)v161 = v159;
                                uint64_t v79 = (uint64_t)(v161 + 8);
                                unint64_t v10 = v189;
                                goto LABEL_102;
                              }
                              v162 = *v158;
                              uint64_t v163 = v161 - *v158;
                              uint64_t v164 = v163 >> 3;
                              unint64_t v165 = (v163 >> 3) + 1;
                              if (v165 >> 61) {
                                sub_2E00();
                              }
                              uint64_t v166 = v160 - (void)v162;
                              if (v166 >> 2 > v165) {
                                unint64_t v165 = v166 >> 2;
                              }
                              if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v167 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v167 = v165;
                              }
                              if (v167)
                              {
                                if (v167 >> 61) {
                                  sub_188D718();
                                }
                                v168 = operator new(8 * v167);
                                v169 = &v168[8 * v164];
                                *(void *)v169 = v159;
                                uint64_t v79 = (uint64_t)(v169 + 8);
                                if (v161 != v162)
                                {
LABEL_217:
                                  unint64_t v170 = v161 - 8 - v162;
                                  unint64_t v10 = v189;
                                  if (v170 < 0x58)
                                  {
                                    a1 = v187;
                                    goto LABEL_226;
                                  }
                                  unint64_t v171 = v161 - &v168[v163];
                                  a1 = v187;
                                  if (v171 < 0x20) {
                                    goto LABEL_249;
                                  }
                                  uint64_t v172 = (v170 >> 3) + 1;
                                  uint64_t v173 = 8 * (v172 & 0x3FFFFFFFFFFFFFFCLL);
                                  v174 = &v161[-v173];
                                  v169 -= v173;
                                  v175 = &v168[8 * v164 - 16];
                                  v176 = v161 - 16;
                                  uint64_t v177 = v172 & 0x3FFFFFFFFFFFFFFCLL;
                                  do
                                  {
                                    long long v178 = *(_OWORD *)v176;
                                    *(v175 - 1) = *((_OWORD *)v176 - 1);
                                    _OWORD *v175 = v178;
                                    v175 -= 2;
                                    v176 -= 32;
                                    v177 -= 4;
                                  }
                                  while (v177);
                                  v161 = v174;
                                  if (v172 != (v172 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
LABEL_249:
                                    do
                                    {
LABEL_226:
                                      uint64_t v179 = *((void *)v161 - 1);
                                      v161 -= 8;
                                      *((void *)v169 - 1) = v179;
                                      v169 -= 8;
                                    }
                                    while (v161 != v162);
                                  }
                                  v161 = *v158;
                                  *v158 = v169;
                                  v158[1] = (char *)v79;
                                  v158[2] = &v168[8 * v167];
                                  if (v161) {
LABEL_228:
                                  }
                                    operator delete(v161);
LABEL_102:
                                  v158[1] = (char *)v79;
                                  continue;
                                }
                              }
                              else
                              {
                                v168 = 0;
                                v169 = (char *)(8 * v164);
                                *(void *)(8 * v164) = v159;
                                uint64_t v79 = 8 * v164 + 8;
                                if (v161 != v162) {
                                  goto LABEL_217;
                                }
                              }
                              a1 = v187;
                              unint64_t v10 = v189;
                              *v158 = v169;
                              v158[1] = (char *)v79;
                              v158[2] = &v168[8 * v167];
                              if (v161) {
                                goto LABEL_228;
                              }
                              goto LABEL_102;
                            }
LABEL_206:
                            uint64_t v149 = 0;
                            unint64_t v148 = 0xFFFFFFFF00000000;
                            a1 = v187;
                            goto LABEL_207;
                          }
                        }
                        else
                        {
                          unint64_t v150 = *(void *)(v135 + 744);
                          unint64_t v151 = *(void *)(v135 + 720);
                          unint64_t v152 = *(void *)(v135 + 696);
                          unint64_t v153 = *(void *)(v135 + 768);
                          v141 = (unsigned int *)sub_2AB884(*(void *)v135, 7, v136, 1);
                          if (v152 >= v137) {
                            unint64_t v154 = v137;
                          }
                          else {
                            unint64_t v154 = v152;
                          }
                          int v155 = 28;
                          if (v152 >= v137) {
                            int v155 = 0;
                          }
                          if (v151 < v154)
                          {
                            unint64_t v154 = v151;
                            int v155 = 29;
                          }
                          if (v150 < v154)
                          {
                            int v155 = 30;
                            unint64_t v154 = v150;
                          }
                          BOOL v75 = v153 >= v154;
                          unsigned int v156 = 31;
                          if (v75) {
                            unsigned int v156 = v155;
                          }
                          uint64_t v157 = v138 + 24 * v156;
                          *(_DWORD *)uint64_t v157 = v211[0];
                          *(void *)(v157 + 8) = *(void *)(v135 + 3856);
                          *(void *)(v157 + 16) = v141;
                          a1 = v187;
                          if (v141) {
                            goto LABEL_186;
                          }
                        }
                      }
                      sub_F933C8(&v208);
                      goto LABEL_206;
                    }
                  }
                  if (v100 >> 61) {
                    goto LABEL_240;
                  }
                  int v101 = operator new(8 * v100);
                  unint64_t v10 = v189;
                  int v102 = (int8x16_t *)&v101[8 * v97];
                  v102->i64[0] = *(void *)i;
                  uint64_t v96 = (uint64_t)&v102->i64[1];
                  if ((int8x16_t *)v194 == v193) {
                    goto LABEL_148;
                  }
LABEL_141:
                  unint64_t v103 = v194 - 8 - (void)v193;
                  if (v103 < 0x58) {
                    goto LABEL_250;
                  }
                  if ((unint64_t)((char *)v193 - v101) < 0x20) {
                    goto LABEL_250;
                  }
                  uint64_t v104 = (v103 >> 3) + 1;
                  uint64_t v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
                  unsigned int v106 = (int8x16_t *)(v194 - v105);
                  int v102 = (int8x16_t *)((char *)v102 - v105);
                  v107 = &v101[8 * v97 - 16];
                  long long v108 = (long long *)(v194 - 16);
                  uint64_t v109 = v104 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v110 = *v108;
                    *(v107 - 1) = *(v108 - 1);
                    _OWORD *v107 = v110;
                    v107 -= 2;
                    v108 -= 2;
                    v109 -= 4;
                  }
                  while (v109);
                  unint64_t v95 = v106;
                  if (v104 != (v104 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_250:
                    do
                    {
                      uint64_t v111 = v95[-1].i64[1];
                      unint64_t v95 = (int8x16_t *)((char *)v95 - 8);
                      v102[-1].i64[1] = v111;
                      int v102 = (int8x16_t *)((char *)v102 - 8);
                    }
                    while (v95 != v193);
                  }
                  unint64_t v95 = v193;
                  goto LABEL_148;
                }
                unsigned int v35 = 31;
              }
              ++*(void *)(v31 + 3864);
              uint64_t v36 = v34 + 24 * v35;
              *(void *)(v36 + 8) = v33;
              unint64_t v37 = *(unsigned int **)(v36 + 16);
              if (v37) {
                goto LABEL_53;
              }
              goto LABEL_99;
            }
            do
            {
LABEL_35:
              sub_F94B1C((uint64_t)&v197, 1);
              unint64_t v29 = (uint64_t *)v17;
              sub_F94DF0((int32x2_t *)&v197, v17, (uint64_t)&v208);
              unsigned int v17 = (int8x16_t *)((char *)v17 + 8);
            }
            while (v29 + 1 != (uint64_t *)v9);
            unint64_t v9 = (int8x16_t *)v195;
            long long v27 = (int8x16_t *)v196;
            goto LABEL_37;
          }
        }
LABEL_34:
        if (v17 == v9) {
          goto LABEL_25;
        }
        goto LABEL_35;
      }
    }
LABEL_6:
    ++v10;
  }
  while (v10 != v180);
  if (__p) {
    operator delete(__p);
  }
  if (v7) {
    operator delete(v7);
  }
LABEL_235:
  if (v195)
  {
    *(void *)&long long v196 = v195;
    operator delete(v195);
  }
  if (v207) {
    free(v207);
  }
}

void sub_F947BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  if (a38)
  {
    free(a38);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t *sub_F948C0(int32x2_t *result)
{
  int v1 = (uint64_t **)result[11];
  unint64_t v2 = (uint64_t **)result[12];
  if (v1 != v2)
  {
    int64x2_t v3 = result;
    uint64_t v4 = (uint64_t)&result[1];
    do
    {
      uint64_t v5 = *v1;
      uint64_t v6 = v1[1];
      while (v5 != v6)
      {
        if (!*(_DWORD *)v5 || *((_DWORD *)v5 + 1) == -1) {
          goto LABEL_7;
        }
        sub_F94B1C(v4, 1);
        uint64_t v7 = *(void *)&v3[8] - 1;
        uint64_t v8 = *v5;
        unint64_t v9 = __ROR8__(*v5, 32);
        unint64_t v10 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
        unint64_t v11 = v10 ^ (v10 >> 33);
        int32x2_t v12 = v3[10];
        __int32 v13 = v3[9].i32[0];
        __int32 v14 = v3[9].i32[1];
        uint64_t v15 = v11 & v7;
        int v16 = (unsigned int *)(*(void *)&v12 + 8 * (v11 & v7));
        unint64_t result = (int32x2_t *)*v16;
        unsigned int v17 = v16[1];
        int32x2_t v18 = v3[6];
        if (v13 == result && v14 == v17) {
          goto LABEL_28;
        }
        if (v18)
        {
          uint64_t v20 = -1;
          uint64_t v21 = 1;
          do
          {
            if (v3[5].i32[0] == result && v3[5].i32[1] == v17)
            {
              if (v20 == -1) {
                uint64_t v20 = v15;
              }
            }
            else if (__PAIR64__(v17, result) == v8)
            {
              goto LABEL_39;
            }
            uint64_t v15 = (v15 + v21) & v7;
            int v22 = (unsigned int *)(*(void *)&v12 + 8 * v15);
            unint64_t result = (int32x2_t *)*v22;
            unsigned int v17 = v22[1];
            ++v21;
          }
          while (v13 != result || v14 != v17);
          if (v20 == -1) {
LABEL_28:
          }
            uint64_t v20 = v15;
          int32x2_t v24 = v3[7];
          if (*(void *)&v24 - *(void *)&v18 >= 0x1FFFFFFFFFFFFFFFuLL) {
            goto LABEL_41;
          }
LABEL_30:
          if (*(void *)&v18
            && (int32x2_t v25 = vceq_s32(v3[5], *(int32x2_t *)(*(void *)&v12 + 8 * v20)), (v25.i32[0] & v25.i32[1] & 1) != 0))
          {
            v3[6] = (int32x2_t)(*(void *)&v18 - 1);
          }
          else
          {
            v3[7] = (int32x2_t)(*(void *)&v24 + 1);
          }
          *(void *)(*(void *)&v12 + 8 * v20) = *v5;
          goto LABEL_7;
        }
        uint64_t v26 = 1;
        while (__PAIR64__(v17, result) != v8)
        {
          uint64_t v15 = (v15 + v26) & v7;
          long long v27 = (unsigned int *)(*(void *)&v12 + 8 * v15);
          unint64_t result = (int32x2_t *)*v27;
          unsigned int v17 = v27[1];
          ++v26;
          if (v13 == result && v14 == v17) {
            goto LABEL_28;
          }
        }
LABEL_39:
        if (v15 == -1)
        {
          uint64_t v20 = -1;
          int32x2_t v24 = v3[7];
          if (*(void *)&v24 - *(void *)&v18 >= 0x1FFFFFFFFFFFFFFFuLL)
          {
LABEL_41:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
          goto LABEL_30;
        }
LABEL_7:
        ++v5;
      }
      v1 += 3;
    }
    while (v1 != v2);
  }
  return result;
}

void sub_F94B08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F94B1C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t result = sub_F94F00(a1);
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t result = 0;
    unint64_t v5 = *(void *)(a1 + 48);
    if (v5 >= ~a2) {
      goto LABEL_27;
    }
  }
  unint64_t v6 = *(void *)(a1 + 56);
  unint64_t v7 = v5 + a2;
  if (v6 < 4 || v7 > *(void *)a1)
  {
    float v8 = *(float *)(a1 + 16);
    unint64_t v9 = vcvts_n_u32_f32(v8, 2uLL);
    unint64_t v10 = 4;
    if (v7 >= v9)
    {
      while ((v10 & 0x8000000000000000) == 0)
      {
        v10 *= 2;
        if (v7 < (unint64_t)(float)(v8 * (float)v10)) {
          goto LABEL_8;
        }
      }
LABEL_27:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "resize overflow");
    }
LABEL_8:
    if (v10 > v6)
    {
      unint64_t v11 = *(void *)(a1 + 40);
      unint64_t v12 = v5 - v11 + a2;
      unint64_t v13 = 4;
      if (v6 > 4) {
        goto LABEL_11;
      }
LABEL_10:
      if (v12 >= (unint64_t)(float)(v8 * (float)v13))
      {
LABEL_11:
        while ((v13 & 0x8000000000000000) == 0)
        {
          v13 *= 2;
          if (v13 >= v6) {
            goto LABEL_10;
          }
        }
        goto LABEL_27;
      }
      unint64_t v14 = v7 - (v11 >> 2);
      unint64_t v15 = 4;
      if (v14 >= v9)
      {
        while ((v15 & 0x8000000000000000) == 0)
        {
          v15 *= 2;
          if (v14 < (unint64_t)(float)(v8 * (float)v15)) {
            goto LABEL_19;
          }
        }
        goto LABEL_27;
      }
LABEL_19:
      if (v13 <= 0x7FFFFFFFFFFFFFFELL
        && v13 < v15
        && v12 >= (unint64_t)(float)(*(float *)(a1 + 20) * (float)(2 * v13)))
      {
        v13 *= 2;
      }
      sub_F95038((uint64_t)&v24, a1, v13);
      uint64x2_t v17 = *(uint64x2_t *)a1;
      long long v16 = *(_OWORD *)(a1 + 16);
      long long v18 = v25;
      *(uint64x2_t *)a1 = v24;
      *(_OWORD *)(a1 + 16) = v18;
      uint64x2_t v24 = v17;
      long long v25 = v16;
      long long v19 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 32) = v26;
      long long v26 = v19;
      uint64_t v20 = *(void *)(a1 + 48);
      *(void *)(a1 + 48) = v27;
      uint64_t v27 = v20;
      *(void *)&long long v16 = v28;
      long long v21 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 56) = v28;
      long long v28 = v21;
      int v22 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v29;
      unint64_t v29 = v22;
      *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v16)));
      *(unsigned char *)(a1 + 24) = 0;
      uint64x2_t v24 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v25, (float)(unint64_t)v21)));
      BYTE8(v25) = 0;
      if (v22) {
        free(v22);
      }
      return 1;
    }
  }
  return result;
}

void sub_F94DA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F94DB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F94DC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F94DDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F94DF0@<X0>(int32x2_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_F953E4((uint64_t)a1, a2);
  if (result == -1)
  {
    int32x2_t v12 = a1[5];
    int32x2_t v11 = a1[6];
    if (*(void *)&v11 - *(void *)&v12 >= 0x1FFFFFFFFFFFFFFFuLL)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_2E18(exception, "insert overflow");
    }
    int32x2_t v13 = a1[9];
    if (*(void *)&v12
      && (int32x2_t v14 = vceq_s32(a1[4], *(int32x2_t *)(*(void *)&v13 + 8 * v7)), (v14.i32[0] & v14.i32[1] & 1) != 0))
    {
      a1[5] = (int32x2_t)(*(void *)&v12 - 1);
    }
    else
    {
      a1[6] = (int32x2_t)(*(void *)&v11 + 1);
    }
    *(void *)(*(void *)&v13 + 8 * v7) = *a2;
    int32x2_t v9 = a1[9];
    uint64_t v10 = *(void *)&v9 + 8 * v7;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    int32x2_t v9 = a1[9];
    uint64_t v10 = *(void *)&v9 + 8 * result;
  }
  uint64_t v15 = *(void *)&v9 + 8 * *(void *)&a1[7];
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v10;
  *(void *)(a3 + 16) = v15;
  *(unsigned char *)(a3 + 24) = v8;
  return result;
}

void sub_F94EEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F94F00(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 48) - *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    BOOL v4 = v2 >= v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (unint64_t v5 = *(void *)(a1 + 56), v5 < 0x21))
  {
    uint64_t result = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    float v6 = (float)v2;
    do
    {
      unint64_t v7 = v5;
      v5 >>= 1;
    }
    while (v7 >= 0x42 && (float)(*(float *)(a1 + 20) * (float)v5) > v6);
    sub_F95038((uint64_t)&v16, a1, v5);
    uint64x2_t v9 = *(uint64x2_t *)a1;
    long long v8 = *(_OWORD *)(a1 + 16);
    long long v10 = v17;
    *(uint64x2_t *)a1 = v16;
    *(_OWORD *)(a1 + 16) = v10;
    uint64x2_t v16 = v9;
    long long v17 = v8;
    long long v11 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v18;
    long long v18 = v11;
    uint64_t v12 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v19;
    uint64_t v19 = v12;
    *(void *)&long long v8 = v20;
    long long v13 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v20;
    long long v20 = v13;
    int32x2_t v14 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v21;
    long long v21 = v14;
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)(a1 + 16), (float)(unint64_t)v8)));
    *(unsigned char *)(a1 + 24) = 0;
    uint64x2_t v16 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)&v17, (float)(unint64_t)v13)));
    BYTE8(v17) = 0;
    if (v14) {
      free(v14);
    }
    uint64_t result = 1;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

float sub_F95038(uint64_t a1, uint64_t a2, unint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = 0;
  if (*(unsigned char *)(a2 + 25))
  {
    *(uint64x2_t *)a1 = vcvtq_u64_f64(vcvtq_f64_f32(vmul_f32(*(float32x2_t *)(a1 + 16), 0)));
    *(unsigned char *)(a1 + 24) = 0;
    sub_F95174(a1, a2, a3);
  }
  else
  {
    unint64_t v6 = 4;
    if (a3 > 4) {
      goto LABEL_5;
    }
    while (1)
    {
      float v7 = *(float *)(a1 + 16) * (float)v6;
      if (*(void *)(a2 + 48) - *(void *)(a2 + 40) < (unint64_t)v7) {
        break;
      }
      do
      {
LABEL_5:
        if ((v6 & 0x8000000000000000) != 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "resize overflow");
        }
        v6 *= 2;
      }
      while (v6 < a3);
    }
    *(void *)(a1 + 56) = v6;
    float result = *(float *)(a1 + 20) * (float)v6;
    *(void *)a1 = (unint64_t)v7;
    *(void *)(a1 + 8) = (unint64_t)result;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

void sub_F95160(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_F95174(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = *(void *)(a2 + 48) - *(void *)(a2 + 40);
  unint64_t v6 = 4;
  if (a3 <= 4) {
    goto LABEL_4;
  }
  do
  {
    do
    {
      if ((v6 & 0x8000000000000000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_2E18(exception, "resize overflow");
      }
      v6 *= 2;
    }
    while (v6 < a3);
LABEL_4:
    ;
  }
  while (v5 >= (unint64_t)(float)(*(float *)(a1 + 16) * (float)v6));
  sub_C74D8C(a1, v6);
  uint64_t v7 = *(void *)(a2 + 56);
  if (v7)
  {
    int v8 = *(_DWORD *)(a2 + 64);
    int v9 = *(_DWORD *)(a2 + 68);
    if (*(void *)(a2 + 40))
    {
      uint64_t v10 = 8 * v7;
      long long v11 = *(_DWORD **)(a2 + 72);
      while (1)
      {
        int v12 = v11[1];
        if ((v8 != *v11 || v9 != v12) && (*(_DWORD *)(a2 + 32) != *v11 || *(_DWORD *)(a2 + 36) != v12)) {
          break;
        }
        v11 += 2;
        v10 -= 8;
        if (!v10) {
          goto LABEL_60;
        }
      }
    }
    else
    {
      uint64_t v40 = 8 * v7;
      long long v11 = *(_DWORD **)(a2 + 72);
      while (v8 == *v11 && v9 == v11[1])
      {
        v11 += 2;
        v40 -= 8;
        if (!v40) {
          goto LABEL_60;
        }
      }
    }
  }
  else
  {
    long long v11 = *(_DWORD **)(a2 + 72);
  }
  uint64_t v15 = *(void *)(a2 + 72) + 8 * v7;
  if (v11 != (_DWORD *)v15)
  {
    do
    {
      uint64_t v16 = *(void *)(a1 + 56) - 1;
      unint64_t v17 = __ROR8__(*(void *)v11, 32);
      unint64_t v18 = 0xC4CEB9FE1A85EC53
          * ((0xFF51AFD7ED558CCDLL * (v17 ^ (v17 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v17 ^ (v17 >> 33))) >> 33));
      unint64_t v19 = v18 ^ (v18 >> 33);
      uint64_t v20 = *(void *)(a1 + 72);
      int v21 = *(_DWORD *)(a1 + 64);
      int v22 = *(_DWORD *)(a1 + 68);
      uint64_t v23 = v19 & v16;
      uint64x2_t v24 = (int *)(v20 + 8 * v23);
      int v26 = *v24;
      int v25 = v24[1];
      if (v21 != v26 || v22 != v25)
      {
        uint64_t v28 = 1;
        do
        {
          uint64_t v23 = (v23 + v28) & v16;
          unint64_t v29 = (int *)(v20 + 8 * v23);
          int v31 = *v29;
          int v30 = v29[1];
          ++v28;
        }
        while (v21 != v31 || v22 != v30);
      }
      *(void *)(v20 + 8 * v23) = *(void *)v11;
      ++*(void *)(a1 + 48);
      unint64_t v33 = v11 + 2;
      long long v11 = (_DWORD *)v15;
      if (v33 != (_DWORD *)v15)
      {
        int v34 = *(_DWORD *)(a2 + 64);
        int v35 = *(_DWORD *)(a2 + 68);
        if (*(void *)(a2 + 40))
        {
          while (1)
          {
            int v36 = v33[1];
            if ((v34 != *v33 || v35 != v36) && (*(_DWORD *)(a2 + 32) != *v33 || *(_DWORD *)(a2 + 36) != v36)) {
              break;
            }
            v33 += 2;
            if (v33 == (_DWORD *)v15) {
              goto LABEL_21;
            }
          }
        }
        else
        {
          while (v34 == *v33 && v35 == v33[1])
          {
            v33 += 2;
            if (v33 == (_DWORD *)v15)
            {
LABEL_21:
              long long v11 = (_DWORD *)v15;
              goto LABEL_22;
            }
          }
        }
        long long v11 = v33;
      }
LABEL_22:
      ;
    }
    while (v11 != (_DWORD *)(*(void *)(a2 + 72) + 8 * *(void *)(a2 + 56)));
  }
LABEL_60:
  ++*(_DWORD *)(a1 + 28);
}

void sub_F953D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F953E4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 56) - 1;
  uint64_t v4 = *a2;
  unint64_t v5 = __ROR8__(*a2, 32);
  unint64_t v6 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v5 ^ (v5 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v5 ^ (v5 >> 33))) >> 33));
  unint64_t v7 = v6 ^ (v6 >> 33);
  uint64_t v8 = *(void *)(a1 + 72);
  int v9 = *(_DWORD *)(a1 + 64);
  int v10 = *(_DWORD *)(a1 + 68);
  uint64_t result = v7 & v3;
  int v12 = (unsigned int *)(v8 + 8 * (v7 & v3));
  unsigned int v14 = *v12;
  unsigned int v13 = v12[1];
  if (v9 == *v12 && v10 == v13) {
    return -1;
  }
  if (*(void *)(a1 + 40))
  {
    int v17 = *(_DWORD *)(a1 + 32);
    int v16 = *(_DWORD *)(a1 + 36);
    uint64_t v18 = -1;
    uint64_t v19 = 1;
    do
    {
      if (v17 == v14 && v16 == v13)
      {
        if (v18 == -1) {
          uint64_t v18 = result;
        }
      }
      else if (__PAIR64__(v13, v14) == v4)
      {
        return result;
      }
      uint64_t result = (result + v19) & v3;
      uint64_t v20 = (unsigned int *)(v8 + 8 * result);
      unsigned int v14 = *v20;
      unsigned int v13 = v20[1];
      ++v19;
    }
    while (v9 != v14 || v10 != v13);
    if (v18 != -1) {
      return -1;
    }
    return -1;
  }
  uint64_t v22 = 1;
  while (__PAIR64__(v13, v14) != v4)
  {
    uint64_t result = (result + v22) & v3;
    uint64_t v23 = (unsigned int *)(v8 + 8 * result);
    unsigned int v14 = *v23;
    unsigned int v13 = v23[1];
    ++v22;
    if (v9 == v14 && v10 == v13) {
      return -1;
    }
  }
  return result;
}

unint64_t sub_F95510(uint64_t a1, unsigned int *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6898, memory_order_acquire) & 1) == 0)
  {
    uint64_t v11 = a1;
    int v10 = __cxa_guard_acquire(&qword_24F6898);
    a1 = v11;
    if (v10)
    {
      qword_24F6890 = 1;
      __cxa_guard_release(&qword_24F6898);
      a1 = v11;
    }
  }
  if (*(void *)a2 == qword_24F6890
    || (uint64_t v3 = sub_F93238(a1, *a2, 1)) == 0
    || (uint64_t v4 = &v3[-*(int *)v3], *(unsigned __int16 *)v4 < 9u))
  {
LABEL_9:
    LODWORD(v5) = 0;
    return v5 | 0xFFFFFFFF00000000;
  }
  uint64_t v5 = *((unsigned __int16 *)v4 + 4);
  if (v5)
  {
    unint64_t v6 = (int *)sub_F930D4((unsigned int *)&v3[v5 + *(unsigned int *)&v3[v5]], a2[1]);
    unint64_t v7 = (unsigned __int16 *)((char *)v6 - *v6);
    if (*v7 >= 0xBu)
    {
      unsigned __int16 v8 = v7[5];
      if (v8) {
        return *(void *)((char *)v6 + v8);
      }
    }
    goto LABEL_9;
  }
  return v5 | 0xFFFFFFFF00000000;
}

void *sub_F95644(uint64_t a1, unsigned int *a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    unsigned __int16 v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      sub_2E00();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_188D718();
      }
      unsigned int v14 = operator new(8 * v13);
    }
    else
    {
      unsigned int v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    *uint64_t v15 = *a2;
    unint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v16 = v5 - v8 - 8;
      if (v16 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v17 = (v16 >> 3) + 1;
      uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v6 = &v5[-v18];
      uint64_t v15 = (void *)((char *)v15 - v18);
      uint64_t v19 = &v14[8 * v10 - 16];
      uint64_t v20 = v5 - 16;
      uint64_t v21 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *uint64_t v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--uint64_t v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v14[8 * v13];
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)uint64_t v5 = *a2;
    unint64_t v7 = v5 + 8;
  }
  *(void *)(a1 + 8) = v7;
  return v7 - 1;
}

void *sub_F957AC(uint64_t a1, const void **a2)
{
  unint64_t v4 = *(void **)(a1 + 8);
  if ((unint64_t)v4 >= *(void *)(a1 + 16))
  {
    uint64_t v10 = sub_F96004((void **)a1, (uint64_t)a2);
  }
  else
  {
    void *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    unint64_t v6 = *a2;
    uint64_t v5 = a2[1];
    int64_t v7 = v5 - (unsigned char *)*a2;
    if (v5 != *a2)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v7 >> 4) >= 0x333333333333334) {
        sub_2E00();
      }
      unsigned __int16 v8 = (char *)operator new(v7);
      void *v4 = v8;
      v4[1] = v8;
      v4[2] = &v8[16 * (v7 >> 4)];
      size_t v9 = 80 * ((v7 - 80) / 0x50uLL) + 80;
      memcpy(v8, v6, v9);
      v4[1] = &v8[v9];
    }
    v4[3] = a2[3];
    uint64_t v10 = v4 + 4;
    *(void *)(a1 + 8) = v4 + 4;
  }
  *(void *)(a1 + 8) = v10;
  return v10 - 4;
}

void sub_F958AC(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

unint64_t sub_F958CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  unint64_t v6 = 0x2127599BF4325C37 * (*a2 ^ ((unint64_t)*a2 >> 23));
  unint64_t v7 = (v6 ^ ~(v6 >> 47)) + ((v6 ^ (v6 >> 47)) << 21);
  unint64_t v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
  unint64_t v9 = 2147483649u * (v8 ^ (v8 >> 28));
  uint64_t v10 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v8 ^ (v8 >> 28)) >> 8) ^ ((-2147483647
                                                                                     * (v8 ^ (v8 >> 28))) >> 16)) ^ ((-2147483647 * (v8 ^ (v8 >> 28))) >> 24)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  while (1)
  {
    unint64_t v13 = v11 & v12;
    uint64_t v14 = *(void *)(*v10 + v13);
    unint64_t v15 = ((v14 ^ (0x101010101010101 * (v9 & 0x7F))) - 0x101010101010101) & ~(v14 ^ (0x101010101010101
                                                                                       * (v9 & 0x7F))) & 0x8080808080808080;
    if (v15) {
      break;
    }
LABEL_5:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_F95A04(v10, v9);
      *(void *)a3 = v10;
      *(void *)(a3 + 8) = result;
      *(unsigned char *)(a3 + 16) = 1;
      return result;
    }
    v4 += 8;
    unint64_t v11 = v4 + v13;
  }
  while (1)
  {
    unint64_t result = (v13 + (__clz(__rbit64(v15)) >> 3)) & v12;
    if (*(void *)(v10[1] + 32 * result) == v5) {
      break;
    }
    v15 &= v15 - 1;
    if (!v15) {
      goto LABEL_5;
    }
  }
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

unint64_t sub_F95A04(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_F95AFC((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_F95AFC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_F95B2C((char **)a1, v2);
    return;
  }
  sub_F95D08(a1);
}

void sub_F95B2C(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = (char *)operator new(v7 + 32 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        uint64_t v14 = &v5[32 * (void)i];
        unint64_t v15 = 0x2127599BF4325C37 * (*(void *)v14 ^ (*(void *)v14 >> 23));
        unint64_t v16 = (v15 ^ ~(v15 >> 47)) + ((v15 ^ (v15 >> 47)) << 21);
        unint64_t v17 = 21 * ((265 * (v16 ^ (v16 >> 24))) ^ ((265 * (v16 ^ (v16 >> 24))) >> 14));
        unint64_t v18 = 2147483649u * (v17 ^ (v17 >> 28));
        uint64_t v19 = a1[3];
        uint64_t v20 = *a1;
        unint64_t v21 = (unint64_t)v19 & (v18 >> 7);
        unint64_t v22 = *(void *)&(*a1)[v21] & (~*(void *)&(*a1)[v21] << 7) & 0x8080808080808080;
        if (!v22)
        {
          uint64_t v23 = 8;
          do
          {
            unint64_t v21 = (v21 + v23) & (unint64_t)v19;
            v23 += 8;
            unint64_t v22 = *(void *)&v20[v21] & (~*(void *)&v20[v21] << 7) & 0x8080808080808080;
          }
          while (!v22);
        }
        unint64_t v11 = (v21 + (__clz(__rbit64(v22)) >> 3)) & (unint64_t)v19;
        char v12 = v18 & 0x7F;
        v20[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        unint64_t v13 = &a1[1][32 * v11];
        *(void *)unint64_t v13 = *(void *)v14;
        *((void *)v13 + 1) = 0;
        *((void *)v13 + 2) = 0;
        *((void *)v13 + 3) = 0;
        *(_OWORD *)(v13 + 8) = *(_OWORD *)(v14 + 8);
        *((void *)v13 + 3) = *((void *)v14 + 3);
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 2) = 0;
        *((void *)v14 + 3) = 0;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_F95D08(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_27;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      unint64_t v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        uint64_t v18 = 32 * i;
        unint64_t v19 = *(void *)(*(void *)(result + 8) + 32 * i);
        unint64_t v20 = ((0x2127599BF4325C37 * (v19 ^ (v19 >> 23))) ^ ~((0x2127599BF4325C37 * (v19 ^ (v19 >> 23))) >> 47))
            + (((0x2127599BF4325C37 * (v19 ^ (v19 >> 23))) ^ ((0x2127599BF4325C37 * (v19 ^ (v19 >> 23))) >> 47)) << 21);
        unint64_t v21 = 21 * ((265 * (v20 ^ (v20 >> 24))) ^ ((265 * (v20 ^ (v20 >> 24))) >> 14));
        unint64_t v22 = 2147483649u * (v21 ^ (v21 >> 28));
        unint64_t v23 = v13 & (v22 >> 7);
        unint64_t v24 = *(uint64_t *)((unsigned char *)v17->i64 + v23) & (~*(uint64_t *)((char *)v17->i64 + v23) << 7) & 0x8080808080808080;
        if (v24)
        {
          unint64_t v15 = v13 & (v22 >> 7);
        }
        else
        {
          uint64_t v25 = 8;
          unint64_t v15 = v13 & (v22 >> 7);
          do
          {
            unint64_t v15 = (v15 + v25) & v13;
            v25 += 8;
            unint64_t v24 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v24);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v24)) >> 3)) & v13;
        if ((((v16 - v23) ^ (i - v23)) & v13) > 7)
        {
          int v26 = v17->u8[v16];
          v17->i8[v16] = v22 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v22 & 0x7F;
          uint64_t v27 = *(void *)(result + 8);
          if (v26 == 128)
          {
            uint64_t v28 = (void *)(v27 + 32 * v16);
            uint64_t v29 = v27 + 32 * i;
            *uint64_t v28 = *(void *)v29;
            v28[1] = 0;
            v28[2] = 0;
            v28[3] = 0;
            *(_OWORD *)(v28 + 1) = *(_OWORD *)(v29 + 8);
            v28[3] = *(void *)(v29 + 24);
            *(void *)(v29 + 16) = 0;
            *(void *)(v29 + 24) = 0;
            *(void *)(v29 + 8) = 0;
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            int v30 = (uint64_t *)(v27 + v18);
            uint64_t v31 = *v30;
            uint64_t v32 = v30[3];
            long long v33 = *(_OWORD *)(v30 + 1);
            v30[2] = 0;
            v30[3] = 0;
            v30[1] = 0;
            uint64_t v34 = *(void *)(result + 8);
            int v35 = (void *)(v34 + v18);
            uint64_t v36 = v34 + 32 * v16;
            void *v35 = *(void *)v36;
            v35[1] = 0;
            v35[2] = 0;
            v35[3] = 0;
            *(_OWORD *)(v35 + 1) = *(_OWORD *)(v36 + 8);
            v35[3] = *(void *)(v36 + 24);
            *(void *)(v36 + 16) = 0;
            *(void *)(v36 + 24) = 0;
            *(void *)(v36 + 8) = 0;
            uint64_t v37 = *(void *)(result + 8) + 32 * v16;
            *(void *)uint64_t v37 = v31;
            *(_OWORD *)(v37 + 8) = v33;
            *(void *)(v37 + 24) = v32;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v22 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v22 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v38 = i - (i >> 3);
    BOOL v39 = i == 7;
    uint64_t v40 = 6;
    if (!v39) {
      uint64_t v40 = v38;
    }
    *(void *)(result + 40) = v40 - *(void *)(result + 16);
  }
  else
  {
    *(void *)(result + 40) = -*(void *)(result + 16);
  }
  return result;
}

void *sub_F96004(void **a1, uint64_t a2)
{
  unint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v5 = (v3 - (unsigned char *)*a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  int8x16_t v11 = &v10[32 * v5];
  int8x16_t v12 = &v10[32 * v9];
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)int8x16_t v11 = 0;
  uint64_t v14 = *(const void **)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  int64_t v15 = v13 - *(void *)a2;
  if (v13 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v15 >> 4) >= 0x333333333333334) {
      sub_2E00();
    }
    unint64_t v16 = (char *)operator new(v15);
    *(void *)int8x16_t v11 = v16;
    *((void *)v11 + 1) = v16;
    *((void *)v11 + 2) = &v16[16 * (v15 >> 4)];
    size_t v17 = 80 * ((v15 - 80) / 0x50uLL) + 80;
    memcpy(v16, v14, v17);
    *((void *)v11 + 1) = &v16[v17];
  }
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  uint64_t v18 = v11 + 32;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v18;
    a1[2] = v12;
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      unint64_t v20 = &v11[v19];
      unint64_t v21 = &v3[v19];
      *((void *)v20 - 3) = 0;
      *((void *)v20 - 2) = 0;
      *((_OWORD *)v20 - 2) = *(_OWORD *)&v3[v19 - 32];
      *((void *)v20 - 2) = *(void *)&v3[v19 - 16];
      *((void *)v21 - 4) = 0;
      *((void *)v21 - 3) = 0;
      *((void *)v21 - 2) = 0;
      *((void *)v20 - 1) = *(void *)&v3[v19 - 8];
      v19 -= 32;
    }
    while (&v3[v19] != v4);
    unint64_t v22 = (char *)*a1;
    uint64_t v3 = (char *)a1[1];
    uint64_t v18 = v11 + 32;
    *a1 = &v11[v19];
    a1[1] = v11 + 32;
    a1[2] = v12;
    if (v3 != v22)
    {
      unint64_t v23 = v3;
      do
      {
        uint64_t v25 = (void *)*((void *)v23 - 4);
        v23 -= 32;
        unint64_t v24 = v25;
        if (v25)
        {
          *((void *)v3 - 3) = v24;
          operator delete(v24);
        }
        uint64_t v3 = v23;
      }
      while (v23 != v22);
      uint64_t v3 = v22;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v18;
}

void sub_F96224(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_BF93E8((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned int **sub_F96248(unsigned int **result)
{
  uint64_t v1 = (uint64_t)*result;
  result[3][**result] = -1;
  int v2 = *((_DWORD *)result + 12);
  *((_DWORD *)result + 12) = v2 - 1;
  if (v2 != 1)
  {
    uint64_t v3 = v1 + 12 * (v2 - 1);
    *(_DWORD *)uint64_t v1 = *(_DWORD *)v3;
    *(void *)(v1 + 4) = *(void *)(v3 + 4);
    uint64_t v4 = (uint64_t)*result;
    result[3][**result] = 0;
    unsigned int v5 = *((_DWORD *)result + 12);
    if (v5 >= 2)
    {
      int v6 = 0;
      unsigned int v7 = 0;
      unsigned int v8 = 1;
      do
      {
        unsigned int v9 = v6 + 5;
        if (v9 >= v5) {
          unsigned int v10 = v5;
        }
        else {
          unsigned int v10 = v9;
        }
        if (v8 >= v10) {
          break;
        }
        uint64_t v11 = v4 + 12 * v7;
        unint64_t v14 = *(void *)(v11 + 4);
        int8x16_t v12 = (void *)(v11 + 4);
        unint64_t v13 = v14;
        uint64_t v15 = v7;
        unint64_t v16 = HIDWORD(v14);
        size_t v17 = (unsigned int *)(v4 + 12 * v8 + 4);
        unsigned int v7 = -1;
        unsigned int v18 = v14;
        do
        {
          if (*v17 < v18 || (v18 >= *v17 ? (BOOL v19 = (int)v17[1] < (int)v16) : (BOOL v19 = 0), v19))
          {
            unsigned int v18 = *v17;
            LODWORD(v16) = v17[1];
            unsigned int v7 = v8;
          }
          ++v8;
          v17 += 3;
        }
        while (v10 != v8);
        if (v7 >= v5) {
          break;
        }
        unint64_t v20 = (int *)(v4 + 12 * v7);
        uint64_t v21 = 12 * v15;
        int v22 = *v20;
        *unint64_t v20 = *(_DWORD *)(v4 + v21);
        *(_DWORD *)(v4 + v21) = v22;
        uint64_t v23 = *(void *)(v20 + 1);
        *(void *)(v20 + 1) = v13;
        *int8x16_t v12 = v23;
        uint64_t v4 = (uint64_t)*result;
        unint64_t v24 = result[3];
        uint64_t v25 = (*result)[3 * v7];
        uint64_t v26 = (*result)[(unint64_t)v21 / 4];
        unsigned int v27 = v24[v25];
        v24[v25] = v24[v26];
        v24[v26] = v27;
        int v6 = 4 * v7;
        unsigned int v8 = (4 * v7) | 1;
        unsigned int v5 = *((_DWORD *)result + 12);
      }
      while (v8 < v5);
    }
  }
  result[1] -= 3;
  return result;
}

BOOL sub_F963A0(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v5 = 1;
  int v6 = sub_F93238(a1, a2, 1);
  if (!v6) {
    return v5;
  }
  unsigned int v7 = (int *)v6;
  unsigned int v8 = &v6[-*(int *)v6];
  if (*(unsigned __int16 *)v8 < 5u) {
    return v5;
  }
  uint64_t v9 = *((unsigned __int16 *)v8 + 2);
  if (!v9) {
    return v5;
  }
  unint64_t v10 = HIDWORD(a2);
  uint64_t v11 = (unsigned int *)&v6[v9 + *(unsigned int *)&v6[v9]];
  int v12 = *(unsigned __int16 *)sub_F965E8(v11, v10);
  if (v12 == *(unsigned __int16 *)(sub_F965E8(v11, v10) + 2)) {
    return 0;
  }
  unint64_t v14 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v14 < 5u) {
    goto LABEL_16;
  }
  uint64_t v15 = v14[2];
  if (!v15) {
    goto LABEL_16;
  }
  unsigned int v16 = *(unsigned __int16 *)sub_F965E8((unsigned int *)((char *)v7 + v15 + *(unsigned int *)((char *)v7 + v15)), v10);
  size_t v17 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v17 >= 7u && (uint64_t v18 = v17[3]) != 0) {
    BOOL v19 = (unsigned int *)((char *)v7 + v18 + *(unsigned int *)((char *)v7 + v18));
  }
  else {
    BOOL v19 = 0;
  }
  unint64_t v20 = (int *)sub_F96748(v19, v16);
  uint64_t v21 = (unsigned __int16 *)((char *)v20 - *v20);
  if (*v21 >= 5u && (uint64_t v22 = v21[2]) != 0) {
    uint64_t v23 = (unsigned int *)((char *)v20 + v22 + *(unsigned int *)((char *)v20 + v22));
  }
  else {
LABEL_16:
  }
    uint64_t v23 = 0;
  unint64_t v24 = (_DWORD *)sub_BE1E78(v23, *a3 - 1);
  uint64_t v25 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v25 < 5u) {
    goto LABEL_26;
  }
  uint64_t v26 = v25[2];
  if (!v26) {
    goto LABEL_26;
  }
  unsigned int v27 = *(unsigned __int16 *)(sub_F965E8((unsigned int *)((char *)v7 + v26 + *(unsigned int *)((char *)v7 + v26)), v10)
                            + 2);
  uint64_t v28 = (unsigned __int16 *)((char *)v7 - *v7);
  if (*v28 >= 7u && (uint64_t v29 = v28[3]) != 0) {
    int v30 = (unsigned int *)((char *)v7 + v29 + *(unsigned int *)((char *)v7 + v29));
  }
  else {
    int v30 = 0;
  }
  uint64_t v31 = (int *)sub_F96748(v30, v27);
  uint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31);
  if (*v32 >= 5u && (uint64_t v33 = v32[2]) != 0) {
    uint64_t v34 = (unsigned int *)((char *)v31 + v33 + *(unsigned int *)((char *)v31 + v33));
  }
  else {
LABEL_26:
  }
    uint64_t v34 = 0;
  int v35 = (_DWORD *)sub_BE1E78(v34, *a3 - 1);
  return v24[1] != v35[1] || *v24 != *v35;
}

uint64_t sub_F965E8(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    uint64_t v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unsigned int v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[a2 + 1];
}

void sub_F966C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_F96748(unsigned int *a1, unsigned int a2)
{
  if (!a1 || *a1 <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v10, a2);
    uint64_t v5 = std::string::insert(&v10, 0, "Flatbuffer vector requested index ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    unsigned int v7 = std::string::append(&v11, " is out of range");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    long long v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  return (uint64_t)&a1[a2 + 1] + a1[a2 + 1];
}

void sub_F9682C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_F968AC(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  unsigned int v6 = HIDWORD(a2);
  long long v8 = sub_F93238(a1, a2, 1);
  if (!v8) {
    return 0xFFFFFFFF00000000;
  }
  uint64_t v9 = (int *)v8;
  std::string v10 = &v8[-*(int *)v8];
  if (*(unsigned __int16 *)v10 < 5u) {
    goto LABEL_14;
  }
  uint64_t v11 = *((unsigned __int16 *)v10 + 2);
  if (!v11) {
    goto LABEL_14;
  }
  uint64_t v12 = sub_F965E8((unsigned int *)&v8[v11 + *(unsigned int *)&v8[v11]], v6);
  std::string::size_type v13 = 0;
  uint64_t v14 = 2;
  if (a3) {
    uint64_t v14 = 0;
  }
  unsigned int v15 = *(unsigned __int16 *)(v12 + v14);
  unsigned int v16 = (unsigned __int16 *)((char *)v9 - *v9);
  if (*v16 < 7u)
  {
LABEL_9:
    uint64_t v18 = (int *)sub_F96748(v13, v15);
    BOOL v19 = (unsigned __int16 *)((char *)v18 - *v18);
    if (*v19 < 5u) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  uint64_t v17 = v16[3];
  if (v17)
  {
    std::string::size_type v13 = (unsigned int *)((char *)v9 + v17 + *(unsigned int *)((char *)v9 + v17));
    goto LABEL_9;
  }
  uint64_t v18 = (int *)sub_F96748(0, v15);
  BOOL v19 = (unsigned __int16 *)((char *)v18 - *v18);
  if (*v19 < 5u)
  {
LABEL_14:
    unint64_t v24 = (unsigned int *)sub_BE1E78(0, *a4 - 1);
    uint64_t v22 = *v24;
    uint64_t v23 = v24[1];
    if (!*(unsigned char *)(a1 + 3876)) {
      return (v23 << 32) | v22;
    }
    goto LABEL_15;
  }
LABEL_10:
  uint64_t v20 = v19[2];
  if (!v20) {
    goto LABEL_14;
  }
  uint64_t v21 = (unsigned int *)sub_BE1E78((unsigned int *)((char *)v18 + v20 + *(unsigned int *)((char *)v18 + v20)), *a4 - 1);
  uint64_t v22 = *v21;
  uint64_t v23 = v21[1];
  if (!*(unsigned char *)(a1 + 3876)) {
    return (v23 << 32) | v22;
  }
LABEL_15:
  uint64_t v25 = sub_F93238(a1, v22, 1);
  if (v25)
  {
    uint64_t v26 = &v25[-*(int *)v25];
    if (*(unsigned __int16 *)v26 >= 9u)
    {
      uint64_t v27 = *((unsigned __int16 *)v26 + 4);
      if (v27)
      {
        if (*(_DWORD *)&v25[v27 + *(unsigned int *)&v25[v27]]) {
          return (v23 << 32) | v22;
        }
      }
    }
  }
  return 0xFFFFFFFF00000000;
}

uint64_t sub_F96A54(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = sub_F96DE8(*(void *)(a1 + 8), *a3, 1);
  if (!v5) {
    return 0xFFFFLL;
  }
  unsigned int v6 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v6 < 5u) {
    return 0xFFFFLL;
  }
  if (!*((_WORD *)v6 + 2)) {
    return 0xFFFFLL;
  }
  unsigned int v7 = &v5[*((unsigned __int16 *)v6 + 2) + *(unsigned int *)&v5[*((unsigned __int16 *)v6 + 2)]];
  if (*(_DWORD *)v7 <= HIDWORD(v4)) {
    return 0xFFFFLL;
  }
  long long v8 = &v7[4 * HIDWORD(v4) + 4 + *(unsigned int *)&v7[4 * HIDWORD(v4) + 4]];
  uint64_t v9 = &v8[-*(int *)v8];
  if (*(unsigned __int16 *)v9 < 9u) {
    return 0xFFFFLL;
  }
  uint64_t v10 = *((unsigned __int16 *)v9 + 4);
  if (!v10) {
    return 0xFFFFLL;
  }
  uint64_t v11 = &v8[v10 + *(unsigned int *)&v8[v10]];
  unsigned int v14 = *(_DWORD *)v11;
  uint64_t v12 = v11 + 4;
  unint64_t v13 = v14;
  unsigned int v15 = &v12[8 * v14];
  unsigned int v16 = v12;
  while (v13)
  {
    uint64_t v17 = &v16[(4 * v13) & 0x7FFFFFFF8];
    unint64_t v19 = *(void *)v17;
    uint64_t v18 = v17 + 8;
    unint64_t v20 = v13 >> 1;
    v13 += ~(v13 >> 1);
    if (v19 >= v3) {
      unint64_t v13 = v20;
    }
    else {
      unsigned int v16 = v18;
    }
  }
  if (v16 != v15 && *(void *)v16 == v3) {
    return (unint64_t)(v16 - v12) >> 3;
  }
  else {
    return 0xFFFFLL;
  }
}

void sub_F96B60(uint64_t a1, unsigned int *a2, unsigned __int16 *a3, uint64_t a4)
{
  *(void *)(a4 + 8) = *(void *)a4;
  if (!*(_DWORD *)(a1 + 3880))
  {
    unsigned int v7 = sub_3823E0(a1 + 8, *a2, 1);
    if (v7)
    {
      long long v8 = v7;
      uint64_t v9 = &v7[-*(int *)v7];
      if (*(unsigned __int16 *)v9 >= 9u)
      {
        uint64_t v10 = *((unsigned __int16 *)v9 + 4);
        if (*((_WORD *)v9 + 4))
        {
          uint64_t v11 = *(unsigned int *)&v7[v10];
          uint64_t v12 = &v7[v10 + v11];
          uint64_t v13 = a2[1];
          if (*(_DWORD *)v12 > v13)
          {
            uint64_t v14 = 4 * v13;
            unsigned int v15 = &v12[4 * v13];
            uint64_t v16 = *((unsigned int *)v15 + 1);
            uint64_t v17 = &v15[v16 + 4];
            uint64_t v18 = &v17[-*(int *)v17];
            if (*(unsigned __int16 *)v18 >= 5u)
            {
              uint64_t v19 = *((unsigned __int16 *)v18 + 2);
              if (*((_WORD *)v18 + 2))
              {
                unint64_t v20 = &v17[v19];
                uint64_t v21 = *(unsigned int *)v20;
                uint64_t v22 = &v20[v21];
                uint64_t v23 = *a3;
                if (*(_DWORD *)v22 > v23)
                {
                  uint64_t v24 = 4 * v23;
                  uint64_t v25 = &v22[4 * v23];
                  uint64_t v26 = *((unsigned int *)v25 + 1);
                  uint64_t v27 = &v25[v26 + 4];
                  uint64_t v28 = &v27[-*(int *)v27];
                  if (*(unsigned __int16 *)v28 >= 5u)
                  {
                    uint64_t v29 = *((unsigned __int16 *)v28 + 2);
                    if (v29)
                    {
                      unint64_t v30 = *(unsigned int *)&v27[v29 + *(unsigned int *)&v27[v29]];
                      uint64_t v31 = *(unsigned char **)a4;
                      if (v30 > (uint64_t)(*(void *)(a4 + 16) - *(void *)a4) >> 5)
                      {
                        uint64_t v48 = v26;
                        uint64_t v49 = 4 * v23;
                        uint64_t v47 = v21;
                        uint64_t v32 = *(unsigned char **)(a4 + 8);
                        uint64_t v46 = 32 * v30;
                        uint64_t v33 = (char *)operator new(32 * v30);
                        uint64_t v34 = &v33[(v32 - v31) & 0xFFFFFFFFFFFFFFE0];
                        int v35 = v34;
                        if (v32 != v31)
                        {
                          uint64_t v36 = &v33[(v32 - v31) & 0xFFFFFFFFFFFFFFE0];
                          do
                          {
                            long long v37 = *((_OWORD *)v32 - 1);
                            int v35 = v36 - 32;
                            *((_OWORD *)v36 - 2) = *((_OWORD *)v32 - 2);
                            *((_OWORD *)v36 - 1) = v37;
                            v32 -= 32;
                            v36 -= 32;
                          }
                          while (v32 != v31);
                        }
                        *(void *)a4 = v35;
                        *(void *)(a4 + 8) = v34;
                        *(void *)(a4 + 16) = &v33[v46];
                        uint64_t v21 = v47;
                        uint64_t v26 = v48;
                        uint64_t v24 = v49;
                        if (v31)
                        {
                          operator delete(v31);
                          uint64_t v26 = v48;
                          uint64_t v24 = v49;
                        }
                      }
                      uint64_t v38 = *(unsigned __int16 *)&v27[-*(int *)v27 + 4];
                      uint64_t v39 = *(unsigned int *)&v27[v38];
                      uint64_t v40 = *(unsigned int *)&v27[v38 + v39];
                      if (v40)
                      {
                        uint64_t v41 = 0;
                        uint64_t v42 = 12 * v40;
                        uint64_t v43 = *(char **)(a4 + 8);
                        uint64_t v44 = (uint64_t)&v8[v11 + v10 + v24 + v14 + v38 + v26 + v21 + v19 + v16 + v39];
                        do
                        {
                          uint64_t v51 = 0x7FFFFFFFFFFFFFFFLL;
                          uint64_t v52 = 0x7FFFFFFFFFFFFFFFLL;
                          *(void *)&long long v50 = *(unsigned int *)(v44 + v41 + 12) | ((unint64_t)*(unsigned __int16 *)(v44 + v41 + 16) << 32);
                          DWORD2(v50) = *(unsigned __int16 *)(v44 + v41 + 18);
                          if (*(unsigned __int16 *)(v44 + v41 + 20) != 0xFFFF)
                          {
                            int v45 = *(unsigned __int16 *)(v44 + v41 + 22);
                            LODWORD(v51) = *(unsigned __int16 *)(v44 + v41 + 20);
                            HIDWORD(v51) = v45;
                            uint64_t v52 = 0;
                          }
                          uint64_t v43 = sub_F971A4((char **)a4, v43, &v50) + 32;
                          v41 += 12;
                        }
                        while (v42 != v41);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

char *sub_F96DE8(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 1744) == a2)
    {
      unsigned int v7 = 72;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1768) == a2)
    {
      unsigned int v7 = 73;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1792) == a2)
    {
      unsigned int v7 = 74;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1816) == a2)
    {
      unsigned int v7 = 75;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      uint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 1800);
    unint64_t v12 = *(void *)(a1 + 1776);
    unint64_t v13 = *(void *)(a1 + 1752);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 1752);
    }
    int v15 = 72;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 1776);
    }
    int v17 = 73;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 1800);
    }
    unint64_t v19 = *(void *)(a1 + 1824);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 74;
    }
    uint64_t v21 = (unsigned int *)sub_2AB884(v5, 18, a2, 1);
    unsigned int v22 = 75;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_F96F78(v24);
  return 0;
}

uint64_t sub_F96F78(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = sub_736EC(0x12u);
      uint64_t v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_F970D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

char *sub_F971A4(char **a1, char *a2, _OWORD *a3)
{
  long long v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  long long v8 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFE0];
  unint64_t v9 = (unint64_t)a1[2];
  if (v5 < v9)
  {
    if (v8 == (char *)v5)
    {
      long long v24 = a3[1];
      *(_OWORD *)long long v8 = *a3;
      *((_OWORD *)v8 + 1) = v24;
      a1[1] = v8 + 32;
    }
    else
    {
      uint64_t v10 = v8 + 32;
      long long v11 = (long long *)(v5 - 32);
      unint64_t v12 = a1[1];
      if (v5 >= 0x20)
      {
        do
        {
          long long v13 = *v11;
          long long v14 = v11[1];
          v11 += 2;
          *(_OWORD *)unint64_t v12 = v13;
          *((_OWORD *)v12 + 1) = v14;
          v12 += 32;
        }
        while ((unint64_t)v11 < v5);
      }
      a1[1] = v12;
      if ((_OWORD *)v5 != v10) {
        memmove((void *)(v5 - 32 * ((uint64_t)(v5 - (void)v10) >> 5)), v8, v5 - (void)v10);
      }
      long long v15 = a3[1];
      *(_OWORD *)long long v8 = *a3;
      *((_OWORD *)v8 + 1) = v15;
    }
    return v8;
  }
  unint64_t v16 = ((uint64_t)(v5 - (void)v6) >> 5) + 1;
  if (v16 >> 59) {
    sub_2E00();
  }
  uint64_t v18 = v9 - (void)v6;
  if (v18 >> 4 > v16) {
    unint64_t v16 = v18 >> 4;
  }
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v19 = v16;
  }
  if (v19)
  {
    if (v19 >> 59) {
      sub_188D718();
    }
    int v20 = (char *)operator new(32 * v19);
    uint64_t v21 = v7 >> 5;
    unsigned int v22 = &v20[32 * (v7 >> 5)];
    uint64_t v23 = &v20[32 * v19];
    if (v7 >> 5 != v19) {
      goto LABEL_31;
    }
    goto LABEL_20;
  }
  int v20 = 0;
  uint64_t v21 = v7 >> 5;
  unsigned int v22 = (char *)(32 * (v7 >> 5));
  uint64_t v23 = 0;
  if (!(v7 >> 5))
  {
LABEL_20:
    if (v7 < 1)
    {
      if (v6 == a2) {
        unint64_t v26 = 1;
      }
      else {
        unint64_t v26 = v7 >> 4;
      }
      if (v26 >> 59) {
        sub_188D718();
      }
      uint64_t v27 = (char *)operator new(32 * v26);
      unsigned int v22 = &v27[32 * (v26 >> 2)];
      uint64_t v23 = &v27[32 * v26];
      if (v20)
      {
        operator delete(v20);
        long long v6 = *a1;
      }
    }
    else
    {
      if (v21 >= -1) {
        unint64_t v25 = v21 + 1;
      }
      else {
        unint64_t v25 = v21 + 2;
      }
      v22 -= 32 * (v25 >> 1);
    }
  }
LABEL_31:
  long long v28 = a3[1];
  *(_OWORD *)unsigned int v22 = *a3;
  *((_OWORD *)v22 + 1) = v28;
  uint64_t v29 = v22;
  if (v6 != v8)
  {
    unint64_t v30 = v8;
    uint64_t v31 = v22;
    do
    {
      long long v32 = *((_OWORD *)v30 - 1);
      uint64_t v29 = v31 - 32;
      *((_OWORD *)v31 - 2) = *((_OWORD *)v30 - 2);
      *((_OWORD *)v31 - 1) = v32;
      v30 -= 32;
      v31 -= 32;
    }
    while (v30 != v6);
  }
  uint64_t v33 = a1[1];
  int64_t v34 = v33 - v8;
  if (v33 != v8) {
    memmove(v22 + 32, v8, v33 - v8);
  }
  int v35 = *a1;
  *a1 = v29;
  a1[1] = &v22[v34 + 32];
  a1[2] = v23;
  if (v35) {
    operator delete(v35);
  }
  return v22;
}

void sub_F973D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_F973F0(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = __ROR8__(*a2, 32);
  unint64_t v7 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) >> 33));
  sub_F97570((uint64_t *)(*(void *)(*(void *)(a1 + 16) + 56)+ 200 * ((v7 ^ (v7 >> 33)) % *(void *)(*(void *)(a1 + 16) + 40))), a2, (uint64_t)&v13);
  if (!v15)
  {
    unint64_t v8 = __ROR8__(*a2, 32);
    unint64_t v9 = 0xC4CEB9FE1A85EC53
       * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
    sub_39ABD8((uint64_t *)(*(void *)(*(void *)(a1 + 16) + 136)+ 200 * ((v9 ^ (v9 >> 33)) % *(void *)(*(void *)(a1 + 16) + 120))), a2, (uint64_t)&v12, 8uLL, 0);
  }
  uint64_t v10 = v14;
  *a3 = v13;
  a3[1] = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v11 = v14;
    if (v14)
    {
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_F9755C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F97570(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  unint64_t v8 = (void *)a1[14];
  unint64_t v7 = (void *)a1[15];
  if (v8 == v7) {
    goto LABEL_16;
  }
  unint64_t v9 = __ROR8__(*a2, 32);
  unint64_t v10 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
  unint64_t v11 = v10 ^ (v10 >> 33);
  uint64_t v12 = a1[11];
  unint64_t v13 = a1[12] - v12;
  unint64_t v14 = v11 % v13;
  uint64_t v15 = v13 - 1;
  while (*(unsigned char *)(v12 + v14) != 2)
  {
    if (!*(unsigned char *)(v12 + v14)) {
      goto LABEL_16;
    }
LABEL_4:
    if (v14 == v15) {
      unint64_t v14 = 0;
    }
    else {
      ++v14;
    }
  }
  unint64_t v16 = &v8[2 * v14];
  if (*v16 != *a2) {
    goto LABEL_4;
  }
  if (v16 != v7)
  {
    ++a1[23];
    std::string v17 = (uint64_t *)v16[1];
    if (v17 != a1)
    {
      uint64_t v18 = (uint64_t *)v17[1];
      if (v18 != a1)
      {
        uint64_t v19 = *v17;
        *(void *)(v19 + 8) = v18;
        *(void *)v17[1] = v19;
        uint64_t v20 = *a1;
        *(void *)(v20 + 8) = v17;
        uint64_t *v17 = v20;
        *a1 = (uint64_t)v17;
        v17[1] = (uint64_t)a1;
      }
    }
    uint64_t v22 = v17[3];
    uint64_t v21 = v17[4];
    *(void *)a3 = v22;
    *(void *)(a3 + 8) = v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    char v23 = 1;
    goto LABEL_20;
  }
LABEL_16:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7468, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F7468))
  {
    off_24F7458 = (int *)&unk_20F13E0;
    *(void *)&byte_24F7460 = 0;
    __cxa_guard_release(&qword_24F7468);
  }
  ++a1[24];
  uint64_t v24 = *((void *)off_24F7458 + 1);
  *(void *)a3 = *(void *)off_24F7458;
  *(void *)(a3 + 8) = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  char v23 = byte_24F7460;
LABEL_20:
  *(unsigned char *)(a3 + 16) = v23;

  std::mutex::unlock(v6);
}

uint64_t sub_F97750@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  unint64_t v5 = 0x2127599BF4325C37 * (*a2 ^ ((unint64_t)*a2 >> 23));
  unint64_t v6 = (v5 ^ ~(v5 >> 47)) + ((v5 ^ (v5 >> 47)) << 21);
  unint64_t v7 = 21 * ((265 * (v6 ^ (v6 >> 24))) ^ ((265 * (v6 ^ (v6 >> 24))) >> 14));
  unint64_t v8 = 2147483649u * (v7 ^ (v7 >> 28));
  unint64_t v9 = (uint64_t *)(result
                 + 48
                 * (((((unsigned __int16)(v7 ^ (v7 >> 28)) >> 8) ^ ((-2147483647
                                                                                    * (v7 ^ (v7 >> 28))) >> 16)) ^ ((-2147483647 * (v7 ^ (v7 >> 28))) >> 24)) & 0xF));
  unint64_t v10 = v8 >> 7;
  uint64_t v11 = v9[3];
  uint64_t v12 = *v9;
  uint64_t v13 = 0x101010101010101 * (v8 & 0x7F);
  while (1)
  {
    unint64_t v14 = v10 & v11;
    uint64_t v15 = *(void *)(v12 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_9;
    }
    v3 += 8;
    unint64_t v10 = v3 + v14;
  }
  uint64_t v17 = v9[1];
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v11;
    if (*(void *)(v17 + 16 * v18) == v4) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  if (v11 == v18)
  {
LABEL_9:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[4] = 0;
    return result;
  }
  *a3 = v9;
  a3[1] = (uint64_t *)(result + 768);
  a3[2] = (uint64_t *)(v12 + v18);
  a3[3] = (uint64_t *)(v17 + 16 * v18);
  a3[4] = (uint64_t *)(v12 + v11);
  return result;
}

void sub_F97874(uint64_t a1, unsigned int a2, void *a3)
{
  unint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v7 = a1 + 24;
  uint64_t v10 = v9 - v8;
  unint64_t v11 = (v9 - v8) >> 2;
  if (v11 <= a2)
  {
    do
    {
      unint64_t v16 = (v10 >> 1) | 1;
      if (v16 <= v11)
      {
        if (v16 < v11)
        {
          uint64_t v9 = v8 + 4 * v16;
          *(void *)(a1 + 32) = v9;
          uint64_t v10 = 4 * v16;
          unint64_t v17 = (uint64_t)(4 * v16) >> 2;
          if (v11 < v17) {
LABEL_12:
          }
            memset((void *)(v8 + 4 * v11), 255, v10 - 4 * v11);
        }
        else
        {
          uint64_t v10 = v9 - v8;
          unint64_t v17 = (v9 - v8) >> 2;
          if (v11 < v17) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        sub_4394C(v7, v16 - v11);
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = v9 - v8;
        unint64_t v17 = (v9 - v8) >> 2;
        if (v11 < v17) {
          goto LABEL_12;
        }
      }
      unint64_t v11 = v17;
    }
    while (v17 <= v6);
  }
  *(_DWORD *)uint64_t v46 = a2;
  *(void *)&v46[4] = *a3;
  uint64_t v12 = HIDWORD(*a3);
  unint64_t v14 = *(_DWORD **)(a1 + 8);
  unint64_t v13 = *(void *)(a1 + 16);
  if ((unint64_t)v14 >= v13)
  {
    unint64_t v18 = *(_DWORD **)a1;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - *(void *)a1) >> 2);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v18) >> 2);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v22 = 0x1555555555555555;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 > 0x1555555555555555) {
        sub_188D718();
      }
      char v23 = (char *)operator new(12 * v22);
    }
    else
    {
      char v23 = 0;
    }
    uint64_t v24 = &v23[12 * v19];
    *(void *)uint64_t v24 = *(void *)v46;
    *((_DWORD *)v24 + 2) = v12;
    uint64_t v15 = v24 + 12;
    if (v14 != v18)
    {
      do
      {
        uint64_t v25 = *(void *)(v14 - 3);
        v14 -= 3;
        int v26 = v14[2];
        *(void *)(v24 - 12) = v25;
        v24 -= 12;
        *((_DWORD *)v24 + 2) = v26;
      }
      while (v14 != v18);
      unint64_t v14 = *(_DWORD **)a1;
    }
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = &v23[12 * v22];
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *(void *)unint64_t v14 = *(void *)v46;
    v14[2] = v12;
    uint64_t v15 = v14 + 3;
  }
  *(void *)(a1 + 8) = v15;
  *(_DWORD *)(*(void *)(a1 + 24) + 4 * v6) = *(_DWORD *)(a1 + 48);
  unsigned int v27 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v27 + 1;
  if (v27)
  {
    long long v28 = *(_DWORD **)a1;
    do
    {
      unsigned int v29 = v27 - 1;
      unsigned int v30 = (v27 - 1) >> 2;
      uint64_t v31 = &v28[3 * v30];
      long long v32 = (uint64_t *)(v31 + 1);
      unsigned int v33 = v31[1];
      int64_t v34 = &v28[3 * v27];
      uint64_t v36 = (uint64_t *)(v34 + 1);
      unsigned int v35 = v34[1];
      if (v33 < v35) {
        break;
      }
      int v37 = v28[3 * v27 + 2];
      int v38 = v28[3 * v30 + 2];
      if (v35 >= v33 && v38 < v37) {
        break;
      }
      int v40 = *v34;
      _DWORD *v34 = *v31;
      *uint64_t v31 = v40;
      uint64_t v41 = *v36;
      *uint64_t v36 = *v32;
      *long long v32 = v41;
      long long v28 = *(_DWORD **)a1;
      uint64_t v42 = *(void *)(a1 + 24);
      uint64_t v43 = 4 * *(unsigned int *)(*(void *)a1 + 12 * v27);
      uint64_t v44 = 4 * *(unsigned int *)(*(void *)a1 + 12 * v30);
      int v45 = *(_DWORD *)(v42 + v43);
      *(_DWORD *)(v42 + v43) = *(_DWORD *)(v42 + v44);
      *(_DWORD *)(v42 + v44) = v45;
      unsigned int v27 = v29 >> 2;
    }
    while (v29 > 3);
  }
}

uint64_t *sub_F97B30(uint64_t *result, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(result[3] + 4 * a2);
  uint64_t v4 = *result + 12 * v3;
  uint64_t v5 = *(void *)(v4 + 4);
  *(void *)(v4 + 4) = *(void *)a3;
  if (*(_DWORD *)a3 < v5
    || (*(_DWORD *)a3 <= v5 ? (BOOL v6 = *(_DWORD *)(a3 + 4) < SHIDWORD(v5)) : (BOOL v6 = 0), v6))
  {
    if (v3)
    {
      uint64_t v30 = *result;
      do
      {
        unsigned int v31 = v3 - 1;
        unsigned int v32 = (v3 - 1) >> 2;
        unsigned int v33 = (_DWORD *)(v30 + 12 * v32);
        int64_t v34 = (uint64_t *)(v33 + 1);
        unsigned int v35 = v33[1];
        uint64_t v36 = (_DWORD *)(v30 + 12 * v3);
        int v38 = (uint64_t *)(v36 + 1);
        unsigned int v37 = v36[1];
        if (v35 < v37) {
          break;
        }
        int v39 = *(_DWORD *)(v30 + 12 * v3 + 8);
        int v40 = *(_DWORD *)(v30 + 12 * v32 + 8);
        if (v37 >= v35 && v40 < v39) {
          break;
        }
        int v42 = *v36;
        *uint64_t v36 = *v33;
        _DWORD *v33 = v42;
        uint64_t v43 = *v38;
        *int v38 = *v34;
        uint64_t *v34 = v43;
        uint64_t v30 = *result;
        uint64_t v44 = result[3];
        uint64_t v45 = 4 * *(unsigned int *)(*result + 12 * v3);
        uint64_t v46 = 4 * *(unsigned int *)(*result + 12 * v32);
        int v47 = *(_DWORD *)(v44 + v45);
        *(_DWORD *)(v44 + v45) = *(_DWORD *)(v44 + v46);
        *(_DWORD *)(v44 + v46) = v47;
        unsigned int v3 = v31 >> 2;
      }
      while (v31 >= 4);
    }
  }
  else
  {
    unsigned int v7 = (4 * v3) | 1;
    unsigned int v8 = *((_DWORD *)result + 12);
    if (v7 < v8)
    {
      int v9 = 4 * v3;
      do
      {
        unsigned int v10 = v9 + 5;
        if (v10 >= v8) {
          unsigned int v11 = v8;
        }
        else {
          unsigned int v11 = v10;
        }
        if (v7 >= v11) {
          break;
        }
        uint64_t v12 = *result;
        uint64_t v13 = *result + 12 * v3;
        unint64_t v16 = *(void *)(v13 + 4);
        unint64_t v14 = (void *)(v13 + 4);
        unint64_t v15 = v16;
        uint64_t v17 = v3;
        unint64_t v18 = HIDWORD(v16);
        unint64_t v19 = (unsigned int *)(*result + 12 * v7 + 4);
        unsigned int v3 = -1;
        unsigned int v20 = v16;
        do
        {
          if (*v19 < v20 || (v20 >= *v19 ? (BOOL v21 = (int)v19[1] < (int)v18) : (BOOL v21 = 0), v21))
          {
            unsigned int v20 = *v19;
            LODWORD(v18) = v19[1];
            unsigned int v3 = v7;
          }
          ++v7;
          v19 += 3;
        }
        while (v11 != v7);
        if (v3 >= v8) {
          break;
        }
        unint64_t v22 = (int *)(v12 + 12 * v3);
        uint64_t v23 = 12 * v17;
        int v24 = *v22;
        *unint64_t v22 = *(_DWORD *)(v12 + v23);
        *(_DWORD *)(v12 + v23) = v24;
        uint64_t v25 = *(void *)(v22 + 1);
        *(void *)(v22 + 1) = v15;
        *unint64_t v14 = v25;
        uint64_t v26 = result[3];
        uint64_t v27 = 4 * *(unsigned int *)(*result + 12 * v3);
        uint64_t v28 = 4 * *(unsigned int *)(*result + v23);
        int v29 = *(_DWORD *)(v26 + v27);
        *(_DWORD *)(v26 + v27) = *(_DWORD *)(v26 + v28);
        *(_DWORD *)(v26 + v28) = v29;
        int v9 = 4 * v3;
        unsigned int v7 = (4 * v3) | 1;
        unsigned int v8 = *((_DWORD *)result + 12);
      }
      while (v7 < v8);
    }
  }
  return result;
}

uint64_t sub_F97D2C@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  unint64_t v5 = 0x2127599BF4325C37 * (*a2 ^ ((unint64_t)*a2 >> 23));
  unint64_t v6 = (v5 ^ ~(v5 >> 47)) + ((v5 ^ (v5 >> 47)) << 21);
  unint64_t v7 = 21 * ((265 * (v6 ^ (v6 >> 24))) ^ ((265 * (v6 ^ (v6 >> 24))) >> 14));
  unint64_t v8 = 2147483649u * (v7 ^ (v7 >> 28));
  int v9 = (void *)(result
                + 48
                * (((((unsigned __int16)(v7 ^ (v7 >> 28)) >> 8) ^ ((-2147483647
                                                                                   * (v7 ^ (v7 >> 28))) >> 16)) ^ ((-2147483647 * (v7 ^ (v7 >> 28))) >> 24)) & 0xF));
  unint64_t v10 = v8 >> 7;
  uint64_t v11 = v9[3];
  uint64_t v12 = *v9;
  uint64_t v13 = 0x101010101010101 * (v8 & 0x7F);
  while (1)
  {
    unint64_t v14 = v10 & v11;
    uint64_t v15 = *(void *)(v12 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_6:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      a3[3] = v11;
      a3[4] = 0;
      return result;
    }
    v3 += 8;
    unint64_t v10 = v3 + v14;
  }
  uint64_t v17 = v9[1];
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v11;
    if (*(void *)(v17 + 32 * v18) == v4) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_6;
    }
  }
  BOOL v19 = v11 == v18;
  uint64_t v20 = v12 + v18;
  uint64_t v21 = v12 + v11;
  uint64_t v22 = result + 768;
  if (v11 == v18)
  {
    uint64_t v20 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = v9;
  }
  if (v11 == v18) {
    int v24 = a3;
  }
  else {
    int v24 = (void *)(v17 + 32 * v18);
  }
  if (v19) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v21;
  }
  *a3 = v23;
  a3[1] = v22;
  a3[2] = v20;
  a3[3] = v24;
  a3[4] = v25;
  return result;
}

void sub_F97E70(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  unint64_t v5 = a2;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v6 = a1 + 24;
  uint64_t v9 = v8 - v7;
  unint64_t v10 = (v8 - v7) >> 2;
  if (v10 <= a2)
  {
    do
    {
      unint64_t v15 = (v9 >> 1) | 1;
      if (v15 <= v10)
      {
        if (v15 < v10)
        {
          uint64_t v8 = v7 + 4 * v15;
          *(void *)(a1 + 32) = v8;
          uint64_t v9 = 4 * v15;
          unint64_t v16 = (uint64_t)(4 * v15) >> 2;
          if (v10 < v16) {
LABEL_12:
          }
            memset((void *)(v7 + 4 * v10), 255, v9 - 4 * v10);
        }
        else
        {
          uint64_t v9 = v8 - v7;
          unint64_t v16 = (v8 - v7) >> 2;
          if (v10 < v16) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        sub_4394C(v6, v15 - v10);
        uint64_t v7 = *(void *)(a1 + 24);
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = v8 - v7;
        unint64_t v16 = (v8 - v7) >> 2;
        if (v10 < v16) {
          goto LABEL_12;
        }
      }
      unint64_t v10 = v16;
    }
    while (v16 <= v5);
  }
  unint64_t v11 = v5 | ((unint64_t)*a3 << 32);
  uint64_t v13 = *(char **)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  if ((unint64_t)v13 < v12)
  {
    *(void *)uint64_t v13 = v11;
    uint64_t v14 = (uint64_t)(v13 + 8);
    goto LABEL_33;
  }
  uint64_t v17 = *(char **)a1;
  uint64_t v18 = (uint64_t)&v13[-*(void *)a1];
  uint64_t v19 = v18 >> 3;
  unint64_t v20 = (v18 >> 3) + 1;
  if (v20 >> 61) {
    sub_2E00();
  }
  uint64_t v21 = v12 - (void)v17;
  if (v21 >> 2 > v20) {
    unint64_t v20 = v21 >> 2;
  }
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v22 = v20;
  }
  if (v22)
  {
    if (v22 >> 61) {
      sub_188D718();
    }
    uint64_t v23 = operator new(8 * v22);
    int v24 = (unint64_t *)&v23[8 * v19];
    uint64_t v25 = &v23[8 * v22];
    *int v24 = v11;
    uint64_t v14 = (uint64_t)(v24 + 1);
    uint64_t v26 = (char *)(v13 - v17);
    if (v13 == v17) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  uint64_t v23 = 0;
  int v24 = (unint64_t *)(8 * v19);
  uint64_t v25 = 0;
  *(void *)(8 * v19) = v11;
  uint64_t v14 = 8 * v19 + 8;
  uint64_t v26 = (char *)(v13 - v17);
  if (v13 != v17)
  {
LABEL_24:
    unint64_t v27 = (unint64_t)(v26 - 8);
    if (v27 < 0x58) {
      goto LABEL_42;
    }
    if ((unint64_t)(v13 - v23 - v18) < 0x20) {
      goto LABEL_42;
    }
    uint64_t v28 = (v27 >> 3) + 1;
    uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v30 = &v13[-v29];
    int v24 = (unint64_t *)((char *)v24 - v29);
    unsigned int v31 = &v23[8 * v19 - 16];
    unsigned int v32 = v13 - 16;
    uint64_t v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v34 = *(_OWORD *)v32;
      *(v31 - 1) = *((_OWORD *)v32 - 1);
      *unsigned int v31 = v34;
      v31 -= 2;
      v32 -= 32;
      v33 -= 4;
    }
    while (v33);
    uint64_t v13 = v30;
    if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_42:
      do
      {
        unint64_t v35 = *((void *)v13 - 1);
        v13 -= 8;
        *--int v24 = v35;
      }
      while (v13 != v17);
    }
    uint64_t v13 = *(char **)a1;
  }
LABEL_31:
  *(void *)a1 = v24;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v25;
  if (v13) {
    operator delete(v13);
  }
LABEL_33:
  *(void *)(a1 + 8) = v14;
  uint64_t v36 = *(void *)(a1 + 24);
  *(_DWORD *)(v36 + 4 * v5) = *(_DWORD *)(a1 + 48);
  unsigned int v37 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v37 + 1;
  if (v37)
  {
    int v38 = *(char **)a1;
    do
    {
      unsigned int v39 = v37 - 1;
      uint64_t v40 = (v37 - 1) >> 2;
      uint64_t v41 = &v38[8 * v40];
      unsigned int v44 = *((_DWORD *)v41 + 1);
      int v42 = (unsigned int *)(v41 + 4);
      unsigned int v43 = v44;
      uint64_t v45 = &v38[8 * v37];
      unsigned int v48 = *((_DWORD *)v45 + 1);
      uint64_t v46 = (unsigned int *)(v45 + 4);
      unsigned int v47 = v48;
      if (v43 > v48) {
        break;
      }
      uint64_t v49 = 8 * v37;
      uint64_t v50 = *(unsigned int *)&v38[v49];
      *(_DWORD *)&v38[v49] = *(_DWORD *)&v38[8 * v40];
      *(_DWORD *)&v38[8 * v40] = v50;
      *uint64_t v46 = v43;
      unsigned int *v42 = v47;
      uint64_t v51 = 4 * *(unsigned int *)&v38[v49];
      int v52 = *(_DWORD *)(v36 + v51);
      *(_DWORD *)(v36 + v51) = *(_DWORD *)(v36 + 4 * v50);
      *(_DWORD *)(v36 + 4 * v50) = v52;
      unsigned int v37 = v39 >> 2;
    }
    while (v39 > 3);
  }
}

double sub_F98124(uint64_t *a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = *(unsigned int *)(v3 + 4 * a2);
  uint64_t v5 = *a1;
  uint64_t v6 = *a1 + 8 * v4;
  unsigned int v7 = *(_DWORD *)(v6 + 4);
  *(_DWORD *)(v6 + 4) = *a3;
  if (*a3 <= v7)
  {
    unsigned int v21 = (4 * v4) | 1;
    unsigned int v22 = *((_DWORD *)a1 + 12);
    if (v21 < v22)
    {
      int v23 = 4 * v4;
      do
      {
        unsigned int v24 = v23 + 5;
        if (v24 >= v22) {
          unsigned int v25 = v22;
        }
        else {
          unsigned int v25 = v24;
        }
        if (v21 >= v25) {
          break;
        }
        uint64_t v26 = v4;
        unsigned int v27 = *(_DWORD *)(v5 + 8 * v4 + 4);
        uint64_t v28 = (unsigned int *)(v5 + 4 + 8 * v21);
        LODWORD(v4) = -1;
        unsigned int v29 = v27;
        do
        {
          unsigned int v31 = *v28;
          v28 += 2;
          unsigned int v30 = v31;
          if (v31 > v29)
          {
            unsigned int v29 = v30;
            LODWORD(v4) = v21;
          }
          ++v21;
        }
        while (v25 != v21);
        if (v4 >= v22) {
          break;
        }
        uint64_t v32 = 8 * v26;
        int v33 = *(_DWORD *)(v5 + 8 * v26);
        long long v34 = (double *)(v5 + 8 * v4);
        double result = *v34;
        *(_DWORD *)long long v34 = v33;
        *((_DWORD *)v34 + 1) = v27;
        *(double *)(v5 + v32) = result;
        uint64_t v36 = 4 * *(unsigned int *)v34;
        uint64_t v37 = 4 * LODWORD(result);
        int v38 = *(_DWORD *)(v3 + v36);
        *(_DWORD *)(v3 + v36) = *(_DWORD *)(v3 + v37);
        *(_DWORD *)(v3 + v37) = v38;
        int v23 = 4 * v4;
        unsigned int v21 = (4 * v4) | 1;
        unsigned int v22 = *((_DWORD *)a1 + 12);
      }
      while (v21 < v22);
    }
  }
  else if (v4)
  {
    do
    {
      unsigned int v8 = v4 - 1;
      uint64_t v9 = (v4 - 1) >> 2;
      uint64_t v10 = v5 + 8 * v9;
      unsigned int v13 = *(_DWORD *)(v10 + 4);
      unint64_t v11 = (unsigned int *)(v10 + 4);
      unsigned int v12 = v13;
      uint64_t v14 = v5 + 8 * v4;
      unsigned int v17 = *(_DWORD *)(v14 + 4);
      unint64_t v15 = (unsigned int *)(v14 + 4);
      unsigned int v16 = v17;
      if (v12 > v17) {
        break;
      }
      uint64_t v18 = 8 * v4;
      uint64_t v19 = *(unsigned int *)(v5 + v18);
      *(_DWORD *)(v5 + v18) = *(_DWORD *)(v5 + 8 * v9);
      *(_DWORD *)(v5 + 8 * v9) = v19;
      *unint64_t v15 = v12;
      *unint64_t v11 = v16;
      uint64_t v4 = 4 * *(unsigned int *)(v5 + v18);
      int v20 = *(_DWORD *)(v3 + v4);
      *(_DWORD *)(v3 + v4) = *(_DWORD *)(v3 + 4 * v19);
      *(_DWORD *)(v3 + 4 * v19) = v20;
      LODWORD(v4) = v8 >> 2;
    }
    while (v8 >= 4);
  }
  return result;
}

int8x16_t sub_F98280(int8x16_t *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unsigned int v12 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        unint64_t v14 = ((char *)a2 - (char *)v12) >> 3;
        if (v6 || !v5)
        {
          switch(v14)
          {
            case 0uLL:
            case 1uLL:
              return result;
            case 2uLL:
              if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
                return result;
              }
              uint64_t v89 = v12->i64[0];
              goto LABEL_106;
            case 3uLL:
              unint64_t v87 = v12->u32[3] | ((unint64_t)v12->u32[2] << 32);
              unint64_t v88 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
              if (v87 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
              {
                if (v88 < v87)
                {
                  uint64_t v104 = v12->i64[1];
                  v12->i64[1] = a2[-1].i64[1];
                  a2[-1].i64[1] = v104;
                  if ((v12->u32[3] | ((unint64_t)v12->u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
                  {
                    int8x16_t result = vextq_s8(*v12, *v12, 8uLL);
                    *unsigned int v12 = result;
                  }
                }
              }
              else
              {
                uint64_t v89 = v12->i64[0];
                if (v88 < v87)
                {
LABEL_106:
                  v12->i64[0] = a2[-1].i64[1];
                }
                else
                {
                  v12->i64[0] = v12->i64[1];
                  v12->i64[1] = v89;
                  if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v89, 32)) {
                    return result;
                  }
                  v12->i64[1] = a2[-1].i64[1];
                }
                a2[-1].i64[1] = v89;
              }
              break;
            case 4uLL:
              sub_2A9374((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &a2[-1].u32[2]);
              return result;
            case 5uLL:
              sub_2A94B0((unsigned int *)v12, &v12->u32[2], (unsigned int *)&v12[1], &v12[1].u32[2], &a2[-1].u32[2]);
              return result;
            default:
              JUMPOUT(0);
          }
          return result;
        }
        if (v13 <= 191)
        {
          unint64_t v90 = (int8x16_t *)&v12->u64[1];
          BOOL v92 = v12 == a2 || v90 == a2;
          if (a5)
          {
            if (!v92)
            {
              uint64_t v93 = 0;
              unint64_t v94 = v12;
              do
              {
                uint64_t v96 = v94->u32[2];
                uint64_t v97 = v94->u32[3];
                uint64_t v98 = v94->u32[0];
                uint64_t v99 = v94->u32[1];
                unint64_t v94 = v90;
                if ((v97 | (unint64_t)(v96 << 32)) < (v99 | (unint64_t)(v98 << 32)))
                {
                  uint64_t v100 = v90->i64[0];
                  unint64_t v101 = __ROR8__(v94->i64[0], 32);
                  uint64_t v102 = v93;
                  do
                  {
                    unint64_t v103 = &v12->i8[v102];
                    *(uint64_t *)((char *)&v12->i64[1] + v102) = *(uint64_t *)((char *)v12->i64 + v102);
                    if (!v102)
                    {
                      unint64_t v95 = (uint64_t *)v12;
                      goto LABEL_124;
                    }
                    v102 -= 8;
                  }
                  while (v101 < (*((unsigned int *)v103 - 1) | ((unint64_t)*((unsigned int *)v103 - 2) << 32)));
                  unint64_t v95 = (uint64_t *)((char *)&v12->i64[1] + v102);
LABEL_124:
                  *unint64_t v95 = v100;
                }
                unint64_t v90 = (int8x16_t *)&v94->u64[1];
                v93 += 8;
              }
              while (&v94->u64[1] != (unint64_t *)a2);
            }
          }
          else if (!v92)
          {
            do
            {
              uint64_t v105 = a1->u32[2];
              uint64_t v106 = a1->u32[3];
              uint64_t v107 = a1->u32[0];
              uint64_t v108 = a1->u32[1];
              a1 = v90;
              if ((v106 | (unint64_t)(v105 << 32)) < (v108 | (unint64_t)(v107 << 32)))
              {
                uint64_t v109 = v90->i64[0];
                unint64_t v110 = __ROR8__(v90->i64[0], 32);
                do
                {
                  uint64_t v111 = (uint64_t *)v90;
                  uint64_t v112 = v90[-1].i64[1];
                  unint64_t v90 = (int8x16_t *)((char *)v90 - 8);
                  *uint64_t v111 = v112;
                }
                while (v110 < (*((unsigned int *)v111 - 3) | ((unint64_t)*((unsigned int *)v111 - 4) << 32)));
                v90->i64[0] = v109;
              }
              unint64_t v90 = (int8x16_t *)&a1->u64[1];
            }
            while (&a1->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v12 != a2)
          {
            sub_2A9598((unsigned int *)v12, (unsigned int *)a2, (unsigned int *)a2, a3);
          }
          return result;
        }
        unint64_t v15 = v14 >> 1;
        unsigned int v16 = (unsigned int *)v12 + 2 * (v14 >> 1);
        unint64_t v17 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
        if ((unint64_t)v13 >= 0x401) {
          break;
        }
        unint64_t v21 = v12->u32[1] | ((unint64_t)v12->u32[0] << 32);
        unsigned int v22 = &v12->u32[2 * v15 + 1];
        if (v21 < (*v22 | ((unint64_t)*v16 << 32)))
        {
          uint64_t v23 = *(void *)v16;
          if (v17 >= v21)
          {
            *(void *)unsigned int v16 = v12->i64[0];
            v12->i64[0] = v23;
            if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v23, 32)) {
              goto LABEL_32;
            }
            v12->i64[0] = a2[-1].i64[1];
          }
          else
          {
            *(void *)unsigned int v16 = a2[-1].i64[1];
          }
          a2[-1].i64[1] = v23;
LABEL_32:
          --a4;
          if ((a5 & 1) == 0) {
            goto LABEL_56;
          }
          goto LABEL_33;
        }
        if (v17 >= v21) {
          goto LABEL_32;
        }
        uint64_t v26 = v12->i64[0];
        v12->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v26;
        if ((v12->u32[1] | ((unint64_t)v12->u32[0] << 32)) >= (*v22 | ((unint64_t)*v16 << 32))) {
          goto LABEL_32;
        }
        uint64_t v27 = *(void *)v16;
        *(void *)unsigned int v16 = v12->i64[0];
        v12->i64[0] = v27;
        --a4;
        if (a5) {
          goto LABEL_33;
        }
LABEL_56:
        uint64_t v37 = v12->i64[0];
        if ((v12[-1].u32[3] | ((unint64_t)v12[-1].u32[2] << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32))) {
          goto LABEL_57;
        }
        unint64_t v73 = __ROR8__(v37, 32);
        if (v73 < (a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)))
        {
          do
          {
            uint64_t v74 = v12->u32[2];
            uint64_t v75 = v12->u32[3];
            unsigned int v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v75 | (unint64_t)(v74 << 32)));
        }
        else
        {
          unsigned int v76 = (int8x16_t *)&v12->u64[1];
          do
          {
            unsigned int v12 = v76;
            if (v76 >= a2) {
              break;
            }
            unint64_t v77 = v76->u32[1] | ((unint64_t)v76->u32[0] << 32);
            unsigned int v76 = (int8x16_t *)((char *)v76 + 8);
          }
          while (v73 >= v77);
        }
        unint64_t v78 = a2;
        if (v12 < a2)
        {
          unint64_t v78 = a2;
          do
          {
            uint64_t v79 = v78[-1].u32[2];
            uint64_t v80 = v78[-1].u32[3];
            unint64_t v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v80 | (unint64_t)(v79 << 32)));
        }
        while (v12 < v78)
        {
          uint64_t v81 = v12->i64[0];
          v12->i64[0] = v78->i64[0];
          v78->i64[0] = v81;
          do
          {
            uint64_t v82 = v12->u32[2];
            uint64_t v83 = v12->u32[3];
            unsigned int v12 = (int8x16_t *)((char *)v12 + 8);
          }
          while (v73 >= (v83 | (unint64_t)(v82 << 32)));
          do
          {
            uint64_t v84 = v78[-1].u32[2];
            uint64_t v85 = v78[-1].u32[3];
            unint64_t v78 = (int8x16_t *)((char *)v78 - 8);
          }
          while (v73 < (v85 | (unint64_t)(v84 << 32)));
        }
        unsigned int v86 = &v12[-1].i64[1];
        BOOL v5 = &v12[-1].u64[1] >= (unint64_t *)a1;
        BOOL v6 = &v12[-1].u64[1] == (unint64_t *)a1;
        if (&v12[-1].u64[1] != (unint64_t *)a1) {
          a1->i64[0] = *v86;
        }
        a5 = 0;
        *unsigned int v86 = v37;
      }
      uint64_t v18 = &v12->u32[2 * v15 + 1];
      unint64_t v19 = *v18 | ((unint64_t)*v16 << 32);
      if (v19 >= (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
      {
        if (v17 < v19)
        {
          uint64_t v24 = *(void *)v16;
          *(void *)unsigned int v16 = a2[-1].i64[1];
          a2[-1].i64[1] = v24;
          if ((*v18 | ((unint64_t)*v16 << 32)) < (v12->u32[1] | ((unint64_t)v12->u32[0] << 32)))
          {
            uint64_t v25 = v12->i64[0];
            v12->i64[0] = *(void *)v16;
            *(void *)unsigned int v16 = v25;
          }
        }
      }
      else
      {
        uint64_t v20 = v12->i64[0];
        if (v17 >= v19)
        {
          v12->i64[0] = *(void *)v16;
          *(void *)unsigned int v16 = v20;
          if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= __ROR8__(v20, 32)) {
            goto LABEL_23;
          }
          *(void *)unsigned int v16 = a2[-1].i64[1];
        }
        else
        {
          v12->i64[0] = a2[-1].i64[1];
        }
        a2[-1].i64[1] = v20;
      }
LABEL_23:
      uint64_t v28 = &v12->i8[8 * v15];
      unsigned int v30 = *((_DWORD *)v28 - 2);
      unsigned int v29 = v28 - 8;
      unsigned int v31 = (unsigned int *)(v29 + 4);
      unint64_t v32 = *((unsigned int *)v29 + 1) | ((unint64_t)v30 << 32);
      unint64_t v33 = a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32);
      if (v32 >= (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
      {
        if (v33 < v32)
        {
          uint64_t v35 = *(void *)v29;
          *(void *)unsigned int v29 = a2[-1].i64[0];
          a2[-1].i64[0] = v35;
          if ((*v31 | ((unint64_t)*(unsigned int *)v29 << 32)) < (v12->u32[3] | ((unint64_t)v12->u32[2] << 32)))
          {
            uint64_t v36 = v12->i64[1];
            v12->i64[1] = *(void *)v29;
            *(void *)unsigned int v29 = v36;
          }
        }
      }
      else
      {
        uint64_t v34 = v12->i64[1];
        if (v33 >= v32)
        {
          v12->i64[1] = *(void *)v29;
          *(void *)unsigned int v29 = v34;
          if ((a2[-1].u32[1] | ((unint64_t)a2[-1].u32[0] << 32)) >= __ROR8__(v34, 32)) {
            goto LABEL_37;
          }
          *(void *)unsigned int v29 = a2[-1].i64[0];
        }
        else
        {
          v12->i64[1] = a2[-1].i64[0];
        }
        a2[-1].i64[0] = v34;
      }
LABEL_37:
      int v38 = &v12->i8[8 * v15];
      unsigned int v40 = *((_DWORD *)v38 + 2);
      unsigned int v39 = (unsigned int *)(v38 + 8);
      uint64_t v41 = v39 + 1;
      unint64_t v42 = v39[1] | ((unint64_t)v40 << 32);
      unint64_t v43 = a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32);
      if (v42 >= (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
      {
        if (v43 < v42)
        {
          uint64_t v45 = *(void *)v39;
          *(void *)unsigned int v39 = a2[-2].i64[1];
          a2[-2].i64[1] = v45;
          if ((*v41 | ((unint64_t)*v39 << 32)) < (v12[1].u32[1] | ((unint64_t)v12[1].u32[0] << 32)))
          {
            uint64_t v46 = v12[1].i64[0];
            v12[1].i64[0] = *(void *)v39;
            *(void *)unsigned int v39 = v46;
          }
        }
      }
      else
      {
        uint64_t v44 = v12[1].i64[0];
        if (v43 >= v42)
        {
          v12[1].i64[0] = *(void *)v39;
          *(void *)unsigned int v39 = v44;
          if ((a2[-2].u32[3] | ((unint64_t)a2[-2].u32[2] << 32)) >= __ROR8__(v44, 32)) {
            goto LABEL_46;
          }
          *(void *)unsigned int v39 = a2[-2].i64[1];
        }
        else
        {
          v12[1].i64[0] = a2[-2].i64[1];
        }
        a2[-2].i64[1] = v44;
      }
LABEL_46:
      unint64_t v47 = *v18 | ((unint64_t)*v16 << 32);
      unint64_t v48 = *v31 | ((unint64_t)*(unsigned int *)v29 << 32);
      unint64_t v49 = *v41 | ((unint64_t)*v39 << 32);
      if (v47 >= v48)
      {
        uint64_t v50 = *(void *)v16;
        if (v49 < v47)
        {
          uint64_t v51 = *(void *)v39;
          *(void *)unsigned int v16 = *(void *)v39;
          *(void *)unsigned int v39 = v50;
          uint64_t v50 = v51;
          if ((*v18 | (unint64_t)(v51 << 32)) < v48)
          {
            uint64_t v52 = *(void *)v29;
            *(void *)unsigned int v29 = v51;
            *(void *)unsigned int v16 = v52;
LABEL_54:
            uint64_t v50 = v52;
          }
        }
      }
      else
      {
        uint64_t v50 = *(void *)v29;
        if (v49 < v47)
        {
          *(void *)unsigned int v29 = *(void *)v39;
          *(void *)unsigned int v39 = v50;
          uint64_t v50 = *(void *)v16;
          goto LABEL_55;
        }
        *(void *)unsigned int v29 = *(void *)v16;
        *(void *)unsigned int v16 = v50;
        if (v49 < __ROR8__(v50, 32))
        {
          uint64_t v52 = *(void *)v39;
          *(void *)unsigned int v16 = *(void *)v39;
          *(void *)unsigned int v39 = v50;
          goto LABEL_54;
        }
      }
LABEL_55:
      uint64_t v53 = v12->i64[0];
      v12->i64[0] = v50;
      *(void *)unsigned int v16 = v53;
      --a4;
      if ((a5 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_33:
      uint64_t v37 = v12->i64[0];
LABEL_57:
      uint64_t v54 = 0;
      unint64_t v55 = __ROR8__(v37, 32);
      do
      {
        unint64_t v56 = v12->u32[v54 + 3] | ((unint64_t)v12->u32[v54 + 2] << 32);
        v54 += 2;
      }
      while (v56 < v55);
      uint64_t v57 = &v12->i8[v54 * 4];
      unint64_t v58 = a2;
      if (v54 == 2)
      {
        unint64_t v58 = a2;
        do
        {
          if (v57 >= (char *)v58) {
            break;
          }
          uint64_t v61 = v58[-1].u32[2];
          uint64_t v62 = v58[-1].u32[3];
          unint64_t v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v62 | (unint64_t)(v61 << 32)) >= v55);
      }
      else
      {
        do
        {
          uint64_t v59 = v58[-1].u32[2];
          uint64_t v60 = v58[-1].u32[3];
          unint64_t v58 = (int8x16_t *)((char *)v58 - 8);
        }
        while ((v60 | (unint64_t)(v59 << 32)) >= v55);
      }
      if (v57 >= (char *)v58)
      {
        unint64_t v70 = v57 - 8;
        if (v57 - 8 == (char *)v12) {
          goto LABEL_75;
        }
LABEL_74:
        v12->i64[0] = *(void *)v70;
        goto LABEL_75;
      }
      unint64_t v63 = (unint64_t)v57;
      uint64_t v64 = (uint64_t *)v58;
      do
      {
        uint64_t v65 = *(void *)v63;
        *(void *)unint64_t v63 = *v64;
        *uint64_t v64 = v65;
        do
        {
          uint64_t v66 = *(unsigned int *)(v63 + 8);
          uint64_t v67 = *(unsigned int *)(v63 + 12);
          v63 += 8;
        }
        while ((v67 | (unint64_t)(v66 << 32)) < v55);
        do
        {
          uint64_t v68 = *((unsigned int *)v64 - 2);
          uint64_t v69 = *((unsigned int *)v64-- - 1);
        }
        while ((v69 | (unint64_t)(v68 << 32)) >= v55);
      }
      while (v63 < (unint64_t)v64);
      unint64_t v70 = (char *)(v63 - 8);
      if ((int8x16_t *)(v63 - 8) != v12) {
        goto LABEL_74;
      }
LABEL_75:
      *(void *)unint64_t v70 = v37;
      if (v57 < (char *)v58) {
        goto LABEL_78;
      }
      BOOL v71 = sub_F98BA8(v12, (int8x16_t *)v70);
      unsigned int v12 = (int8x16_t *)(v70 + 8);
      if (sub_F98BA8((int8x16_t *)(v70 + 8), a2)) {
        break;
      }
      if (!v71)
      {
LABEL_78:
        sub_F98280(a1, v70, a3, a4, a5 & 1);
        a5 = 0;
        unsigned int v12 = (int8x16_t *)(v70 + 8);
      }
    }
    a2 = (int8x16_t *)v70;
    if (!v71) {
      continue;
    }
    return result;
  }
}

BOOL sub_F98BA8(int8x16_t *a1, int8x16_t *a2)
{
  switch(((char *)a2 - (char *)a1) >> 3)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32))) {
        return 1;
      }
      uint64_t v3 = a1->i64[0];
      goto LABEL_7;
    case 3:
      unint64_t v4 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v5 = a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32);
      if (v4 >= (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
      {
        if (v5 < v4)
        {
          uint64_t v11 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v11;
          if ((a1->u32[3] | ((unint64_t)a1->u32[2] << 32)) < (a1->u32[1] | ((unint64_t)a1->u32[0] << 32)))
          {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
            return 1;
          }
        }
      }
      else
      {
        uint64_t v3 = a1->i64[0];
        if (v5 < v4)
        {
LABEL_7:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
        a1->i64[0] = a1->i64[1];
        a1->i64[1] = v3;
        if ((a2[-1].u32[3] | ((unint64_t)a2[-1].u32[2] << 32)) < __ROR8__(v3, 32))
        {
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v3;
          return 1;
        }
      }
      return 1;
    case 4:
      sub_2A9374((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a2[-1].u32[2]);
      return 1;
    case 5:
      sub_2A94B0((unsigned int *)a1, &a1->u32[2], (unsigned int *)&a1[1], &a1[1].u32[2], &a2[-1].u32[2]);
      return 1;
    default:
      BOOL v6 = a1 + 1;
      unint64_t v7 = a1->u32[3] | ((unint64_t)a1->u32[2] << 32);
      unint64_t v8 = a1->u32[1] | ((unint64_t)a1->u32[0] << 32);
      unint64_t v9 = a1[1].u32[1] | ((unint64_t)a1[1].u32[0] << 32);
      if (v7 >= v8)
      {
        if (v9 < v7)
        {
          uint64_t v13 = a1->i64[1];
          uint64_t v12 = a1[1].i64[0];
          a1->i64[1] = v12;
          a1[1].i64[0] = v13;
          if (__ROR8__(v12, 32) < v8)
          {
            uint64_t v14 = a1->i64[0];
            a1->i64[0] = v12;
            a1->i64[1] = v14;
          }
        }
      }
      else
      {
        uint64_t v10 = a1->i64[0];
        if (v9 >= v7)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v10;
          if (v9 >= __ROR8__(v10, 32)) {
            goto LABEL_25;
          }
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v10;
      }
LABEL_25:
      unint64_t v15 = &a1[1].u32[2];
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v16 = 0;
      int v17 = 0;
      break;
  }
  while ((v15[1] | ((unint64_t)*v15 << 32)) >= (v6->u32[1] | ((unint64_t)v6->u32[0] << 32)))
  {
LABEL_34:
    BOOL v6 = (int8x16_t *)v15;
    v16 += 8;
    v15 += 2;
    if (v15 == (unsigned int *)a2) {
      return 1;
    }
  }
  uint64_t v18 = *(void *)v15;
  unint64_t v19 = __ROR8__(*(void *)v15, 32);
  uint64_t v20 = v16;
  do
  {
    *(uint64_t *)((char *)&a1[1].i64[1] + v20) = *(uint64_t *)((char *)a1[1].i64 + v20);
    if (v20 == -16)
    {
      a1->i64[0] = v18;
      if (++v17 != 8) {
        goto LABEL_34;
      }
      return v15 + 2 == (unsigned int *)a2;
    }
    unint64_t v21 = *(unsigned int *)((char *)&a1->u32[3] + v20) | ((unint64_t)*(unsigned int *)((char *)&a1->u32[2] + v20) << 32);
    v20 -= 8;
  }
  while (v19 < v21);
  *(uint64_t *)((char *)&a1[1].i64[1] + v20) = v18;
  if (++v17 != 8) {
    goto LABEL_34;
  }
  return v15 + 2 == (unsigned int *)a2;
}

void sub_F98E98(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(void *)(a3 + 8) = *(void *)a3;
  if (!*(_DWORD *)(a1 + 3880))
  {
    uint64_t v27 = sub_3823E0(a1 + 8, *a2, 1);
    if (v27)
    {
      uint64_t v28 = &v27[-*(int *)v27];
      if (*(unsigned __int16 *)v28 >= 7u)
      {
        uint64_t v4 = *((unsigned __int16 *)v28 + 3);
        if (!v4) {
          goto LABEL_3;
        }
        unsigned int v29 = &v27[v4 + *(unsigned int *)&v27[v4]];
        uint64_t v30 = a2[1];
        if (*(_DWORD *)v29 > v30)
        {
          uint64_t v4 = (uint64_t)&v29[4 * v30 + 4 + *(unsigned int *)&v29[4 * v30 + 4]];
          goto LABEL_3;
        }
      }
    }
  }
  uint64_t v4 = 0;
LABEL_3:
  unint64_t v5 = (unsigned __int16 *)(v4 - *(int *)v4);
  if (*v5 >= 5u && (uint64_t v6 = v5[2]) != 0)
  {
    unint64_t v7 = (unsigned int *)(v4 + v6 + *(unsigned int *)(v4 + v6));
    unint64_t v8 = *v7;
    unint64_t v9 = *(unsigned char **)a3;
    if (v8 <= (uint64_t)(*(void *)(a3 + 16) - *(void *)a3) >> 6) {
      goto LABEL_13;
    }
  }
  else
  {
    unint64_t v7 = 0;
    unint64_t v8 = 4277009103;
    unint64_t v9 = *(unsigned char **)a3;
    if ((unint64_t)((uint64_t)(*(void *)(a3 + 16) - *(void *)a3) >> 6) >= 0xFEEDFACF) {
      goto LABEL_13;
    }
  }
  uint64_t v10 = *(unsigned char **)(a3 + 8);
  unint64_t v11 = v8 << 6;
  uint64_t v12 = (char *)operator new(v8 << 6);
  uint64_t v13 = &v12[v10 - v9];
  uint64_t v14 = v13;
  if (v10 != v9)
  {
    unint64_t v15 = &v12[v10 - v9];
    do
    {
      uint64_t v14 = v15 - 64;
      long long v16 = *((_OWORD *)v10 - 4);
      long long v17 = *((_OWORD *)v10 - 3);
      *((void *)v15 - 4) = *((void *)v10 - 4);
      *((_OWORD *)v15 - 4) = v16;
      *((_OWORD *)v15 - 3) = v17;
      *((_WORD *)v15 - 12) = *((_WORD *)v10 - 12);
      *((_WORD *)v15 - 11) = *((_WORD *)v10 - 11);
      uint64_t v18 = *((void *)v10 - 2);
      *(v15 - 8) = *(v10 - 8);
      *((void *)v15 - 2) = v18;
      v10 -= 64;
      v15 -= 64;
    }
    while (v10 != v9);
  }
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v13;
  *(void *)(a3 + 16) = &v12[v11];
  if (v9) {
    operator delete(v9);
  }
LABEL_13:
  unsigned int v21 = *v7;
  uint64_t v20 = v7 + 1;
  uint64_t v19 = v21;
  if (v21)
  {
    uint64_t v22 = 4 * v19;
    uint64_t v23 = *(void *)(a3 + 8);
    uint64_t v24 = v20;
    do
    {
      unsigned int v25 = *v24++;
      sub_2E8574((uint64_t)v31, (int *)((char *)v20 + v25));
      uint64_t v23 = sub_F99274((char **)a3, v23, (uint64_t)v31) + 64;
      uint64_t v20 = v24;
      v22 -= 4;
    }
    while (v22);
  }
}

void sub_F9906C(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = -1;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_DWORD *)(v5 + 32)
         && *(_DWORD *)(v5 + 36) != -1
         && *(void *)v5 != 0x7FFFFFFFFFFFFFFFLL
         && *(void *)(v5 + 24) != 0x7FFFFFFFFFFFFFFFLL)
    {
      long long v24 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      v19[1] = 0x7FFFFFFFLL;
      v19[0] = -1;
      v19[2] = -1;
      v19[3] = -1;
      v19[4] = 0x7FFFFFFFFFFFFFFFLL;
      DWORD2(v20) = -1935635296;
      *(void *)&long long v21 = 0;
      *(_DWORD *)((char *)&v21 + 7) = 0;
      __p = 0;
      uint64_t v23 = 0;
      *(void *)&long long v24 = 0;
      DWORD2(v24) = 0;
      BYTE12(v24) = 100;
      sub_F60E7C(a1, (uint64_t *)v5, a3, (uint64_t)v19, a4, (char **)a5, 1.0);
      if (__p)
      {
        uint64_t v23 = __p;
        operator delete(__p);
      }
      v5 += 64;
      if (v5 == v6)
      {
        uint64_t v10 = *(char **)a5;
        unint64_t v9 = *(char **)(a5 + 8);
        if (*(char **)a5 != v9)
        {
          unint64_t v11 = *(char **)a5;
          uint64_t v12 = *(char **)a5;
          while (v12[32])
          {
            v12 += 80;
            if (v12 == v9)
            {
              unint64_t v13 = v9 - v10 - 80;
              if (v13 < 0x50) {
                goto LABEL_21;
              }
              unint64_t v14 = v13 / 0x50 + 1;
              unint64_t v11 = &v10[80 * (v14 & 0x7FFFFFFFFFFFFFELL)];
              unint64_t v15 = v10 + 128;
              uint64_t v16 = v14 & 0x7FFFFFFFFFFFFFELL;
              do
              {
                *(v15 - 80) = 0;
                *unint64_t v15 = 0;
                v15 += 160;
                v16 -= 2;
              }
              while (v16);
              if (v14 != (v14 & 0x7FFFFFFFFFFFFFELL))
              {
LABEL_21:
                do
                {
                  v11[48] = 0;
                  v11 += 80;
                }
                while (v11 != v9);
              }
              return;
            }
          }
        }
        return;
      }
    }
  }
}

void sub_F99238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    long long v24 = *(void **)v22;
    if (!*(void *)v22) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v24 = *(void **)v22;
    if (!*(void *)v22) {
      goto LABEL_3;
    }
  }
  *(void *)(v22 + 8) = v24;
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

unint64_t sub_F99274(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 6;
  unint64_t v9 = (unint64_t)&(*a1)[v7 & 0xFFFFFFFFFFFFFFC0];
  unint64_t v10 = (unint64_t)a1[2];
  if (v6 >= v10)
  {
    unint64_t v34 = ((uint64_t)(v6 - (void)v5) >> 6) + 1;
    if (v34 >> 58) {
      sub_2E00();
    }
    uint64_t v35 = v10 - (void)v5;
    if (v35 >> 5 > v34) {
      unint64_t v34 = v35 >> 5;
    }
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v36 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v34;
    }
    uint64_t v62 = a1 + 2;
    if (v36)
    {
      if (v36 >> 58) {
        sub_188D718();
      }
      uint64_t v37 = (char *)operator new(v36 << 6);
    }
    else
    {
      uint64_t v37 = 0;
    }
    unint64_t v58 = v37;
    uint64_t v59 = &v37[64 * v8];
    unint64_t v60 = (unint64_t)v59;
    uint64_t v61 = &v37[64 * v36];
    sub_F99658((uint64_t)&v58, (__n128 *)a3);
    unint64_t v42 = v59;
    unint64_t v43 = *a1;
    uint64_t v44 = v59;
    if (*a1 != (char *)v9)
    {
      unint64_t v45 = v9;
      uint64_t v46 = v59;
      do
      {
        uint64_t v44 = v46 - 64;
        long long v47 = *(_OWORD *)(v45 - 64);
        long long v48 = *(_OWORD *)(v45 - 48);
        *((void *)v46 - 4) = *(void *)(v45 - 32);
        *((_OWORD *)v46 - 4) = v47;
        *((_OWORD *)v46 - 3) = v48;
        *((_WORD *)v46 - 12) = *(_WORD *)(v45 - 24);
        *((_WORD *)v46 - 11) = *(_WORD *)(v45 - 22);
        uint64_t v49 = *(void *)(v45 - 16);
        *(v46 - 8) = *(unsigned char *)(v45 - 8);
        *((void *)v46 - 2) = v49;
        v45 -= 64;
        v46 -= 64;
      }
      while ((char *)v45 != v43);
    }
    uint64_t v59 = v44;
    uint64_t v50 = a1[1];
    unint64_t v51 = v60;
    if (v50 != (char *)v9)
    {
      do
      {
        long long v52 = *(_OWORD *)v9;
        long long v53 = *(_OWORD *)(v9 + 16);
        *(void *)(v51 + 32) = *(void *)(v9 + 32);
        *(_OWORD *)unint64_t v51 = v52;
        *(_OWORD *)(v51 + 16) = v53;
        *(_WORD *)(v51 + 40) = *(_WORD *)(v9 + 40);
        *(_WORD *)(v51 + 42) = *(_WORD *)(v9 + 42);
        uint64_t v54 = *(void *)(v9 + 48);
        *(unsigned char *)(v51 + 56) = *(unsigned char *)(v9 + 56);
        *(void *)(v51 + 48) = v54;
        v51 += 64;
        v9 += 64;
      }
      while ((char *)v9 != v50);
      uint64_t v44 = v59;
      unint64_t v9 = (unint64_t)a1[1];
    }
    unint64_t v55 = *a1;
    *a1 = v44;
    a1[1] = (char *)v51;
    unint64_t v56 = a1[2];
    a1[2] = v61;
    unint64_t v60 = v9;
    uint64_t v61 = v56;
    unint64_t v58 = v55;
    uint64_t v59 = v55;
    if ((char *)v9 != v55) {
      unint64_t v60 = v9 + ((unint64_t)&v55[-v9 + 63] & 0xFFFFFFFFFFFFFFC0);
    }
    if (v55) {
      operator delete(v55);
    }
    return (unint64_t)v42;
  }
  else if (v9 == v6)
  {
    __n128 v38 = *(__n128 *)a3;
    long long v39 = *(_OWORD *)(a3 + 16);
    *(void *)(v9 + 32) = *(void *)(a3 + 32);
    *(__n128 *)unint64_t v9 = v38;
    *(_OWORD *)(v9 + 16) = v39;
    unsigned int v40 = &v5[64 * v8];
    *((_WORD *)v40 + 20) = *(_WORD *)(a3 + 40);
    *((_WORD *)v40 + 21) = *(_WORD *)(a3 + 42);
    uint64_t v41 = *(void *)(a3 + 48);
    v40[56] = *(unsigned char *)(a3 + 56);
    *((void *)v40 + 6) = v41;
    a1[1] = (char *)(v9 + 64);
  }
  else
  {
    unint64_t v11 = v9 + 64;
    unint64_t v12 = v6 - 64;
    unint64_t v13 = a1[1];
    if (v6 >= 0x40)
    {
      do
      {
        long long v14 = *(_OWORD *)v12;
        long long v15 = *(_OWORD *)(v12 + 16);
        *((void *)v13 + 4) = *(void *)(v12 + 32);
        *(_OWORD *)unint64_t v13 = v14;
        *((_OWORD *)v13 + 1) = v15;
        *((_WORD *)v13 + 20) = *(_WORD *)(v12 + 40);
        *((_WORD *)v13 + 21) = *(_WORD *)(v12 + 42);
        uint64_t v16 = *(void *)(v12 + 48);
        v13[56] = *(unsigned char *)(v12 + 56);
        *((void *)v13 + 6) = v16;
        v13 += 64;
        v12 += 64;
      }
      while (v12 < v6);
    }
    a1[1] = v13;
    if (v6 != v11)
    {
      uint64_t v17 = 0;
      uint64_t v18 = (uint64_t)(v6 - v11) >> 6 << 6;
      uint64_t v19 = &v5[64 * v8 + v18];
      uint64_t v20 = -v18;
      do
      {
        long long v21 = &v19[v17];
        uint64_t v22 = v6 + v17;
        *(void *)(v22 - 64) = *(void *)&v19[v17 - 64];
        uint64_t v23 = *(void *)&v19[v17 - 56];
        *(_DWORD *)(v22 - 48) = *(_DWORD *)&v19[v17 - 48];
        *(void *)(v22 - 56) = v23;
        *(_OWORD *)(v22 - 40) = *(_OWORD *)&v19[v17 - 40];
        char v24 = v19[v17 - 23];
        if (v24)
        {
          *(unsigned char *)(v22 - 24) = *(v21 - 24);
          char v24 = 1;
        }
        *(unsigned char *)(v22 - 23) = v24;
        int v25 = *(v21 - 21);
        if (v25)
        {
          *(unsigned char *)(v6 + v17 - 22) = v19[v17 - 22];
          LOBYTE(v25) = 1;
        }
        uint64_t v26 = v6 + v17;
        *(unsigned char *)(v26 - 21) = v25;
        uint64_t v27 = *(void *)&v19[v17 - 16];
        *(unsigned char *)(v26 - 8) = v19[v17 - 8];
        *(void *)(v26 - 16) = v27;
        v17 -= 64;
      }
      while (v20 != v17);
    }
    *(void *)unint64_t v9 = *(void *)a3;
    uint64_t v28 = &v5[64 * v8];
    uint64_t v29 = *(void *)(a3 + 8);
    *((_DWORD *)v28 + 4) = *(_DWORD *)(a3 + 16);
    *((void *)v28 + 1) = v29;
    *(_OWORD *)(v28 + 24) = *(_OWORD *)(a3 + 24);
    char v30 = *(unsigned char *)(a3 + 41);
    if (v30)
    {
      v28[40] = *(unsigned char *)(a3 + 40);
      char v30 = 1;
    }
    v28[41] = v30;
    char v31 = *(unsigned char *)(a3 + 43);
    if (v31)
    {
      v5[64 * v8 + 42] = *(unsigned char *)(a3 + 42);
      char v31 = 1;
    }
    unint64_t v32 = &v5[64 * v8];
    v32[43] = v31;
    uint64_t v33 = *(void *)(a3 + 48);
    v32[56] = *(unsigned char *)(a3 + 56);
    *((void *)v32 + 6) = v33;
  }
  return v9;
}

void sub_F99610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (a12 == a11)
  {
    unint64_t v13 = __p;
    if (!__p) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v13 = __p;
    if (!__p) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  operator delete(v13);
  _Unwind_Resume(exception_object);
}

__n128 sub_F99658(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    uint64_t v5 = *(__n128 **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    if (v6 <= *(void *)a1)
    {
      if (v4 == v5) {
        unint64_t v20 = 1;
      }
      else {
        unint64_t v20 = ((char *)v4 - (char *)v5) >> 5;
      }
      if (v20 >> 58) {
        sub_188D718();
      }
      long long v21 = (char *)operator new(v20 << 6);
      uint64_t v22 = (__n128 *)&v21[64 * (v20 >> 2)];
      char v24 = (char *)v4 - v6;
      BOOL v23 = v4 == (__n128 *)v6;
      uint64_t v4 = v22;
      if (!v23)
      {
        uint64_t v4 = (__n128 *)&v24[(void)v22];
        int v25 = (__n128 *)&v21[64 * (v20 >> 2)];
        do
        {
          __n128 v26 = *(__n128 *)v6;
          __n128 v27 = *(__n128 *)(v6 + 16);
          v25[2].n128_u64[0] = *(void *)(v6 + 32);
          *int v25 = v26;
          v25[1] = v27;
          v25[2].n128_u16[4] = *(_WORD *)(v6 + 40);
          v25[2].n128_u16[5] = *(_WORD *)(v6 + 42);
          unint64_t v28 = *(void *)(v6 + 48);
          v25[3].n128_u8[8] = *(unsigned char *)(v6 + 56);
          v25[3].n128_u64[0] = v28;
          v25 += 4;
          v6 += 64;
        }
        while (v25 != v4);
      }
      *(void *)a1 = v21;
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v21[64 * v20];
      if (v5)
      {
        operator delete(v5);
        uint64_t v4 = *(__n128 **)(a1 + 16);
      }
    }
    else
    {
      uint64_t v7 = (uint64_t)(v6 - *(void *)a1) >> 6;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = v8 >> 1;
      uint64_t v10 = -(v8 >> 1);
      if ((__n128 *)v6 == v4)
      {
        uint64_t v19 = (__n128 *)(v6 - (v9 << 6));
      }
      else
      {
        uint64_t v11 = v10 << 6;
        do
        {
          unint64_t v12 = v6 + v11;
          int v13 = *(_DWORD *)(v6 + 16);
          uint64_t v14 = *(void *)(v6 + 8);
          *(void *)unint64_t v12 = *(void *)v6;
          *(void *)(v12 + 8) = v14;
          *(_DWORD *)(v12 + 16) = v13;
          *(_OWORD *)(v12 + 24) = *(_OWORD *)(v6 + 24);
          char v15 = *(unsigned char *)(v6 + 41);
          if (v15)
          {
            *(unsigned char *)(v12 + 40) = *(unsigned char *)(v6 + 40);
            char v15 = 1;
          }
          *(unsigned char *)(v12 + 41) = v15;
          char v16 = *(unsigned char *)(v6 + 43);
          if (v16)
          {
            *(unsigned char *)(v6 + v11 + 42) = *(unsigned char *)(v6 + 42);
            char v16 = 1;
          }
          unint64_t v17 = v6 + v11;
          *(unsigned char *)(v17 + 43) = v16;
          char v18 = *(unsigned char *)(v6 + 56);
          *(void *)(v17 + 48) = *(void *)(v6 + 48);
          *(unsigned char *)(v17 + 56) = v18;
          v6 += 64;
        }
        while ((__n128 *)v6 != v4);
        uint64_t v4 = *(__n128 **)(a1 + 8);
        uint64_t v19 = (__n128 *)(v6 + (v10 << 6));
      }
      *(void *)(a1 + 8) = &v4[4 * v10];
      *(void *)(a1 + 16) = v19;
      uint64_t v4 = v19;
    }
  }
  __n128 result = *a2;
  __n128 v30 = a2[1];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  __n128 *v4 = result;
  v4[1] = v30;
  v4[2].n128_u16[4] = a2[2].n128_u16[4];
  v4[2].n128_u16[5] = a2[2].n128_u16[5];
  unint64_t v31 = a2[3].n128_u64[0];
  v4[3].n128_u8[8] = a2[3].n128_u8[8];
  v4[3].n128_u64[0] = v31;
  *(void *)(a1 + 16) += 64;
  return result;
}

unint64_t sub_F99838@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  unint64_t v6 = __ROR8__(*a2, 32);
  unint64_t v7 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) >> 33));
  unint64_t v8 = (v7 ^ ~(v7 >> 33)) + ((v7 ^ (v7 >> 33)) << 21);
  unint64_t v9 = 21 * ((265 * (v8 ^ (v8 >> 24))) ^ ((265 * (v8 ^ (v8 >> 24))) >> 14));
  unint64_t v10 = 2147483649u * (v9 ^ (v9 >> 28));
  uint64_t v11 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v9 ^ (v9 >> 28)) >> 8) ^ ((-2147483647
                                                                                     * (v9 ^ (v9 >> 28))) >> 16)) ^ ((-2147483647 * (v9 ^ (v9 >> 28))) >> 24)) & 0xF));
  unint64_t v12 = v10 >> 7;
  uint64_t v13 = v11[3];
  while (1)
  {
    unint64_t v14 = v12 & v13;
    uint64_t v15 = *(void *)(*v11 + v14);
    unint64_t v16 = ((v15 ^ (0x101010101010101 * (v10 & 0x7F))) - 0x101010101010101) & ~(v15 ^ (0x101010101010101
                                                                                        * (v10 & 0x7F))) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_8:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_F99994(v11, v10);
      *(void *)a3 = v11;
      *(void *)(a3 + 8) = result;
      *(unsigned char *)(a3 + 16) = 1;
      return result;
    }
    v4 += 8;
    unint64_t v12 = v4 + v14;
  }
  while (1)
  {
    unint64_t result = (v14 + (__clz(__rbit64(v16)) >> 3)) & v13;
    char v18 = (int *)(v11[1] + 16 * result);
    int v20 = *v18;
    int v19 = v18[1];
    if (v20 == v5 && v19 == HIDWORD(v5)) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_8;
    }
  }
  *(void *)a3 = v11;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

unint64_t sub_F99994(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_F99A8C((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_F99A8C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    int v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    int v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_F99ABC((char **)a1, v2);
    return;
  }
  sub_F99C94(a1);
}

void sub_F99ABC(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = (char *)operator new(v7 + 16 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (unint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        uint64_t v13 = &v5[16 * (void)i];
        unint64_t v14 = __ROR8__(*(void *)v13, 32);
        unint64_t v15 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v14 ^ (v14 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v14 ^ (v14 >> 33))) >> 33));
        unint64_t v16 = (v15 ^ ~(v15 >> 33)) + ((v15 ^ (v15 >> 33)) << 21);
        unint64_t v17 = 21 * ((265 * (v16 ^ (v16 >> 24))) ^ ((265 * (v16 ^ (v16 >> 24))) >> 14));
        unint64_t v18 = 2147483649u * (v17 ^ (v17 >> 28));
        int v19 = a1[3];
        int v20 = *a1;
        unint64_t v21 = (unint64_t)v19 & (v18 >> 7);
        unint64_t v22 = *(void *)&(*a1)[v21] & (~*(void *)&(*a1)[v21] << 7) & 0x8080808080808080;
        if (!v22)
        {
          uint64_t v23 = 8;
          do
          {
            unint64_t v21 = (v21 + v23) & (unint64_t)v19;
            v23 += 8;
            unint64_t v22 = *(void *)&v20[v21] & (~*(void *)&v20[v21] << 7) & 0x8080808080808080;
          }
          while (!v22);
        }
        unint64_t v11 = (v21 + (__clz(__rbit64(v22)) >> 3)) & (unint64_t)v19;
        char v12 = v18 & 0x7F;
        v20[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        *(_OWORD *)&a1[1][16 * v11] = *(_OWORD *)v13;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_F99C94(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_28;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      unint64_t v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        unint64_t v18 = __ROR8__(*(void *)(*(void *)(result + 8) + 16 * i), 32);
        unint64_t v19 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v18 ^ (v18 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v18 ^ (v18 >> 33))) >> 33));
        unint64_t v20 = (v19 ^ ~(v19 >> 33)) + ((v19 ^ (v19 >> 33)) << 21);
        unint64_t v21 = 21 * ((265 * (v20 ^ (v20 >> 24))) ^ ((265 * (v20 ^ (v20 >> 24))) >> 14));
        unint64_t v22 = 2147483649u * (v21 ^ (v21 >> 28));
        unint64_t v23 = v13 & (v22 >> 7);
        unint64_t v24 = *(uint64_t *)((unsigned char *)v17->i64 + v23) & (~*(uint64_t *)((char *)v17->i64 + v23) << 7) & 0x8080808080808080;
        if (v24)
        {
          unint64_t v15 = v13 & (v22 >> 7);
        }
        else
        {
          uint64_t v25 = 8;
          unint64_t v15 = v13 & (v22 >> 7);
          do
          {
            unint64_t v15 = (v15 + v25) & v13;
            v25 += 8;
            unint64_t v24 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v24);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v24)) >> 3)) & v13;
        if ((((v16 - v23) ^ (i - v23)) & v13) > 7)
        {
          int v26 = v17->u8[v16];
          v17->i8[v16] = v22 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v22 & 0x7F;
          uint64_t v27 = *(void *)(result + 8);
          if (v26 == 128)
          {
            *(_OWORD *)(v27 + 16 * v16) = *(_OWORD *)(v27 + 16 * i);
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            long long v28 = *(_OWORD *)(v27 + 16 * i);
            *(_OWORD *)(v27 + 16 * i) = *(_OWORD *)(v27 + 16 * v16);
            *(_OWORD *)(*(void *)(result + 8) + 16 * v16) = v28;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v22 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v22 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v29 = i - (i >> 3);
    BOOL v30 = i == 7;
    uint64_t v31 = 6;
    if (!v30) {
      uint64_t v31 = v29;
    }
  }
  else
  {
    uint64_t v31 = 0;
  }
  *(void *)(result + 40) = v31 - *(void *)(result + 16);
  return result;
}

char *sub_F99F7C(void **a1)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (unsigned char *)*a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    sub_2E00();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 3) > v5) {
    unint64_t v5 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v3) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      sub_188D718();
    }
    unint64_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  int8x16_t v8 = &v7[40 * v4];
  int8x16_t v9 = &v7[40 * v6];
  *((void *)v8 + 4) = 0;
  *(_OWORD *)int8x16_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_DWORD *)v8 + 8) = -1;
  uint64_t v10 = v8 + 40;
  if (v2 == v3)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v2) {
      return v10;
    }
    goto LABEL_28;
  }
  do
  {
    int8x16_t v12 = v8;
    v8 -= 40;
    uint64_t v13 = v2 - 40;
    int v14 = *((_DWORD *)v2 - 2);
    *((_DWORD *)v12 - 2) = v14;
    if (v14 == 1)
    {
      long long v11 = *(_OWORD *)(v2 - 24);
      *(_OWORD *)int8x16_t v8 = *(_OWORD *)v13;
      *((_OWORD *)v8 + 1) = v11;
    }
    else if (!v14)
    {
      uint64_t v15 = *((void *)v2 - 4);
      *((void *)v12 - 5) = *((void *)v2 - 5);
      *((void *)v12 - 4) = v15;
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
    }
    v2 -= 40;
  }
  while (v13 != v3);
  unint64_t v16 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v2 != v16)
  {
    do
    {
      if (!*((_DWORD *)v2 - 2))
      {
        unint64_t v17 = (std::__shared_weak_count *)*((void *)v2 - 4);
        if (v17)
        {
          if (!atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      v2 -= 40;
    }
    while (v2 != v16);
    uint64_t v2 = v16;
  }
  if (v2) {
LABEL_28:
  }
    operator delete(v2);
  return v10;
}

char *sub_F9A14C(char **a1)
{
  uint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 < v2)
  {
    *(void *)uint64_t v3 = 0;
    *(_OWORD *)(v3 + 8) = xmmword_20E7B70;
    unint64_t v4 = v3 + 24;
    goto LABEL_14;
  }
  unint64_t v5 = *a1;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v5) >> 3);
  if (2 * v8 > v7) {
    unint64_t v7 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9 > 0xAAAAAAAAAAAAAAALL) {
    sub_188D718();
  }
  uint64_t v10 = 24 * v9;
  long long v11 = (char *)operator new(24 * v9);
  int8x16_t v12 = &v11[24 * v6];
  uint64_t v13 = &v11[v10];
  *(void *)int8x16_t v12 = 0;
  *(_OWORD *)(v12 + 8) = xmmword_20E7B70;
  unint64_t v4 = v12 + 24;
  if (v3 == v5)
  {
    *a1 = v12;
    a1[1] = v4;
    a1[2] = v13;
    if (!v5) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  do
  {
    long long v14 = *(_OWORD *)(v3 - 24);
    uint64_t v15 = v12 - 24;
    *((void *)v12 - 1) = *((void *)v3 - 1);
    *(_OWORD *)(v12 - 24) = v14;
    v3 -= 24;
    v12 -= 24;
  }
  while (v3 != v5);
  *a1 = v15;
  a1[1] = v4;
  a1[2] = v13;
  if (v5) {
LABEL_13:
  }
    operator delete(v5);
LABEL_14:
  a1[1] = v4;
  return v4 - 24;
}

void sub_F9A298(uint64_t a1, _DWORD *a2, unint64_t *a3)
{
  a3[1] = *a3;
  if (*(_DWORD *)(a1 + 3880)) {
    return;
  }
  unint64_t v5 = sub_3823E0(a1 + 8, a2[1], 1);
  if (!v5) {
    return;
  }
  unint64_t v6 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v6 < 0xBu) {
    return;
  }
  uint64_t v7 = *((unsigned __int16 *)v6 + 5);
  if (!v7) {
    return;
  }
  unint64_t v8 = &v5[v7 + *(unsigned int *)&v5[v7]];
  unsigned int v9 = HIWORD(*a2);
  if (*(_DWORD *)v8 <= v9) {
    return;
  }
  uint64_t v10 = &v8[4 * v9 + 4 + *(unsigned int *)&v8[4 * v9 + 4]];
  long long v11 = &v10[-*(int *)v10];
  if (*(unsigned __int16 *)v11 < 5u) {
    return;
  }
  uint64_t v12 = *((unsigned __int16 *)v11 + 2);
  if (!v12) {
    return;
  }
  uint64_t v13 = &v10[v12 + *(unsigned int *)&v10[v12]];
  unint64_t v14 = *(unsigned int *)v13;
  uint64_t v15 = (unsigned char *)*a3;
  if (v14 > (uint64_t)(a3[2] - *a3) >> 3)
  {
    unint64_t v16 = (unsigned char *)a3[1];
    uint64_t v17 = 8 * v14;
    unint64_t v18 = (char *)operator new(8 * v14);
    uint64_t v19 = v16 - v15;
    unint64_t v20 = &v18[(v16 - v15) & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20;
    if (v16 == v15) {
      goto LABEL_18;
    }
    if ((unint64_t)(v19 - 8) >= 0x58)
    {
      unint64_t v21 = &v18[(v16 - v15) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v16[-(v19 & 0xFFFFFFFFFFFFFFF8)] - v18) >= 0x20)
      {
        uint64_t v22 = v19 >> 3;
        unint64_t v23 = ((unint64_t)(v19 - 8) >> 3) + 1;
        uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v25 = &v16[-v24];
        unint64_t v21 = &v20[-v24];
        int v26 = &v18[8 * v22 - 16];
        uint64_t v27 = (long long *)(v16 - 16);
        uint64_t v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v27;
          *((_OWORD *)v26 - 1) = *(v27 - 1);
          *(_OWORD *)int v26 = v29;
          v26 -= 32;
          v27 -= 2;
          v28 -= 4;
        }
        while (v28);
        unint64_t v16 = v25;
        if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_18:
          *a3 = (unint64_t)v21;
          a3[1] = (unint64_t)v20;
          a3[2] = (unint64_t)&v18[v17];
          if (v15) {
            operator delete(v15);
          }
          goto LABEL_20;
        }
      }
    }
    else
    {
      unint64_t v21 = &v18[(v16 - v15) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v30 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v21 - 1) = v30;
      v21 -= 8;
    }
    while (v16 != v15);
    goto LABEL_18;
  }
LABEL_20:
  unsigned int v33 = *(_DWORD *)v13;
  unint64_t v32 = (uint64_t *)(v13 + 4);
  uint64_t v31 = v33;
  if (v33)
  {
    uint64_t v34 = 8 * v31;
    uint64_t v35 = (char *)a3[1];
    do
    {
      uint64_t v36 = *v32++;
      uint64_t v37 = v36;
      uint64_t v35 = sub_F9A47C(a3, v35, &v37) + 8;
      v34 -= 8;
    }
    while (v34);
  }
}

char *sub_F9A47C(unint64_t *a1, void *a2, void *a3)
{
  unint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 >> 3;
  unsigned int v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 == (char *)v5)
    {
      *(void *)unsigned int v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return v9;
    }
    int64_t v11 = v5 - (void)(v9 + 8);
    uint64_t v12 = v11 >> 3;
    uint64_t v13 = (uint64_t *)(v5 - 8);
    if (v5 < 8)
    {
      uint64_t v19 = (void *)a1[1];
    }
    else
    {
      unint64_t v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + v11;
      uint64_t v15 = (char *)(v14 + v6);
      unint64_t v16 = v14 + v6 + 8;
      if (v5 > v16) {
        unint64_t v16 = a1[1];
      }
      unint64_t v17 = v16 + ~v6 - v14;
      if (v17 < 0x58)
      {
        uint64_t v19 = (void *)a1[1];
      }
      else
      {
        unint64_t v18 = v5 - (void)v15;
        uint64_t v19 = (void *)a1[1];
        if (v18 >= 0x20)
        {
          uint64_t v20 = (v17 >> 3) + 1;
          uint64_t v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v13 = (uint64_t *)((char *)v13 + v21);
          uint64_t v19 = (void *)(v5 + v21);
          uint64_t v22 = (_OWORD *)(v5 + 16);
          unint64_t v23 = (long long *)(8 * v12 + 8 * v8 + v6 + 16);
          uint64_t v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v25 = *v23;
            *(v22 - 1) = *(v23 - 1);
            *uint64_t v22 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_50;
          }
        }
      }
      do
      {
        uint64_t v56 = *v13++;
        *v19++ = v56;
      }
      while ((unint64_t)v13 < v5);
    }
LABEL_50:
    a1[1] = (unint64_t)v19;
    if ((char *)v5 != v9 + 8) {
      memmove((void *)(v5 - 8 * v12), v9, v11);
    }
    *(void *)unsigned int v9 = *a3;
    return v9;
  }
  unint64_t v26 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v26 >> 61) {
    sub_2E00();
  }
  uint64_t v28 = v10 - v6;
  if (v28 >> 2 > v26) {
    unint64_t v26 = v28 >> 2;
  }
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v29 = v26;
  }
  if (v29)
  {
    if (v29 >> 61) {
      sub_188D718();
    }
    uint64_t v30 = (char *)operator new(8 * v29);
    uint64_t v31 = &v30[8 * v8];
    unint64_t v32 = &v30[8 * v29];
    if (v8 != v29) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = (char *)(8 * v8);
    unint64_t v32 = 0;
    if (v8) {
      goto LABEL_28;
    }
  }
  if (v7 < 1)
  {
    if ((void *)v6 == a2) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v7 >> 2;
    }
    if (v53 >> 61) {
      sub_188D718();
    }
    uint64_t v54 = (char *)operator new(8 * v53);
    uint64_t v31 = &v54[8 * (v53 >> 2)];
    unint64_t v32 = &v54[8 * v53];
    if (v30)
    {
      unint64_t v55 = &v54[8 * v53];
      operator delete(v30);
      unint64_t v32 = v55;
      uint64_t v34 = (char *)*a1;
      *(void *)uint64_t v31 = *a3;
      uint64_t v35 = v31 + 8;
      uint64_t v36 = v31;
      if (v34 != v9) {
        goto LABEL_29;
      }
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v33 = v8 + 2;
    if (v8 >= -1) {
      unint64_t v33 = v8 + 1;
    }
    v31 -= 8 * (v33 >> 1);
  }
LABEL_28:
  uint64_t v34 = (char *)v6;
  *(void *)uint64_t v31 = *a3;
  uint64_t v35 = v31 + 8;
  uint64_t v36 = v31;
  if ((char *)v6 != v9)
  {
LABEL_29:
    uint64_t v37 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    unint64_t v38 = v37 - v34 - 8;
    long long v39 = v9;
    uint64_t v36 = v31;
    if (v38 < 0x58) {
      goto LABEL_59;
    }
    long long v39 = v9;
    uint64_t v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20) {
      goto LABEL_59;
    }
    uint64_t v40 = (v38 >> 3) + 1;
    uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    long long v39 = &v9[-v41];
    uint64_t v36 = &v31[-v41];
    unint64_t v42 = v31 - 16;
    unint64_t v43 = (long long *)(v6 + 8 * v8 - 16);
    uint64_t v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v45 = *v43;
      *((_OWORD *)v42 - 1) = *(v43 - 1);
      *(_OWORD *)unint64_t v42 = v45;
      v42 -= 32;
      v43 -= 2;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_59:
      do
      {
        uint64_t v46 = *((void *)v39 - 1);
        v39 -= 8;
        *((void *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v34);
    }
  }
LABEL_35:
  long long v47 = (char *)a1[1];
  int64_t v48 = v47 - v9;
  if (v47 != v9)
  {
    uint64_t v49 = v9;
    size_t v50 = v47 - v9;
    unint64_t v51 = v32;
    memmove(v35, v49, v50);
    unint64_t v32 = v51;
  }
  long long v52 = (void *)*a1;
  *a1 = (unint64_t)v36;
  a1[1] = (unint64_t)&v35[v48];
  a1[2] = (unint64_t)v32;
  if (v52) {
    operator delete(v52);
  }
  return v31;
}

void sub_F9A7D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_F9A7EC(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *a2;
  unsigned int v3 = a2[1];
  if (*(_DWORD *)(a1 + 20) == v3 && *(_DWORD *)(a1 + 16) == v2)
  {
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    unint64_t v5 = *(_DWORD **)(a1 + 8);
  }
  else
  {
    unint64_t v5 = *(_DWORD **)(a1 + 8);
    unint64_t v6 = *v5;
    if (*v5)
    {
      uint64_t v7 = (char *)(v5 + 1);
      do
      {
        unint64_t v8 = v6 >> 1;
        unsigned int v9 = &v7[12 * (v6 >> 1)];
        if (*(_DWORD *)v9 < v2
          || (*(_DWORD *)v9 <= v2
            ? (BOOL v10 = *(_DWORD *)(*(void *)a1 + 4 * *((unsigned __int16 *)v9 + 2) + 4) >= v3)
            : (BOOL v10 = 1),
              !v10))
        {
          uint64_t v7 = v9 + 12;
          unint64_t v8 = v6 + ~v8;
        }
        unint64_t v6 = v8;
      }
      while (v8);
    }
    else
    {
      uint64_t v7 = (char *)(v5 + 1);
    }
    if (v7 != (char *)&v5[3 * *v5 + 1]
      && (*(_DWORD *)(*(void *)a1 + 4 * *((unsigned __int16 *)v7 + 2) + 4) == v3
        ? (BOOL v11 = *(_DWORD *)v7 == v2)
        : (BOOL v11 = 0),
          v11))
    {
      unint64_t v4 = (v7 - (char *)(v5 + 1)) / 0xCuLL;
    }
    else
    {
      LODWORD(v4) = -1;
    }
  }
  uint64_t v12 = v5 + 1;
  int v13 = HIWORD(v12[3 * v4 + 2]);
  if (v13 == 0xFFFF) {
    return 0;
  }
  unint64_t v14 = v12[3 * v13] | ((unint64_t)*(unsigned int *)(*(void *)a1
                                                                        + 4 * LOWORD(v12[3 * v13 + 1])
                                                                        + 4) << 32);
  *(void *)(a1 + 16) = v14;
  *(_DWORD *)(a1 + 24) = v13;
  return v14;
}

uint64_t sub_F9A938(void *a1, void *a2)
{
  unint64_t v4 = (void *)sub_F9AA30((uint64_t)a1, a2);
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = (void *)(v5 + 8 * v6);
  if (v4 == v7 || *v4 != *a2)
  {
    uint64_t v8 = a1[6];
    uint64_t v9 = v8 + 16 * v6;
    unint64_t v4 = v7;
  }
  else
  {
    uint64_t v8 = a1[6];
    uint64_t v9 = v8 + 2 * ((void)v4 - v5);
  }
  uint64_t v10 = v8 + 16 * v6;
  if (v4 == v7 && v9 == v10)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v15, "Key not found.");
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v15);
  }
  return v9;
}

void sub_F9AA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F9AA30(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = &qword_24F7478;
    uint64_t v6 = &unk_24F7000;
    uint64_t v7 = &unk_24F7000;
    uint64_t v8 = &unk_24F7000;
    do
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)v5, memory_order_acquire) & 1) == 0)
      {
        unint64_t v33 = v4;
        uint64_t v35 = a1;
        unint64_t v18 = v5;
        uint64_t v31 = a2;
        uint64_t v19 = v6;
        int v20 = __cxa_guard_acquire(v5);
        uint64_t v8 = (void *)&unk_24F7000;
        uint64_t v7 = (void *)&unk_24F7000;
        uint64_t v6 = v19;
        a2 = v31;
        unint64_t v4 = v33;
        int v21 = v20;
        uint64_t v5 = v18;
        a1 = v35;
        if (v21)
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7488, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7488))
          {
            v19[144] = sub_2E8DA0();
            __cxa_guard_release(&qword_24F7488);
          }
          qword_24F7470 = v19[144] >> 3;
          __cxa_guard_release(v18);
          uint64_t v7 = &unk_24F7000;
          uint64_t v6 = v19;
          uint64_t v5 = v18;
          a2 = v31;
          unint64_t v4 = v33;
          a1 = v35;
          uint64_t v8 = (void *)&unk_24F7000;
        }
      }
      uint64_t v9 = v7[142];
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7498, memory_order_acquire) & 1) == 0)
      {
        unint64_t v34 = v4;
        uint64_t v36 = a1;
        unint64_t v32 = a2;
        uint64_t v22 = v7;
        int v23 = __cxa_guard_acquire(&qword_24F7498);
        uint64_t v8 = (void *)&unk_24F7000;
        uint64_t v7 = v22;
        uint64_t v6 = (void *)&unk_24F7000;
        a2 = v32;
        unint64_t v4 = v34;
        int v24 = v23;
        uint64_t v5 = &qword_24F7478;
        a1 = v36;
        if (v24)
        {
          uint64_t v30 = v9;
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7478, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7478))
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7488, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7488))
            {
              qword_24F7480 = sub_2E8DA0();
              __cxa_guard_release(&qword_24F7488);
            }
            v22[142] = (unint64_t)qword_24F7480 >> 3;
            __cxa_guard_release(&qword_24F7478);
          }
          uint64_t v25 = v22[142];
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7478, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F7478))
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7488, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F7488))
            {
              qword_24F7480 = sub_2E8DA0();
              __cxa_guard_release(&qword_24F7488);
            }
            v22[142] = (unint64_t)qword_24F7480 >> 3;
            __cxa_guard_release(&qword_24F7478);
          }
          qword_24F7490 = v25 + (v22[142] >> 1);
          __cxa_guard_release(&qword_24F7498);
          uint64_t v8 = &unk_24F7000;
          uint64_t v7 = v22;
          a2 = v32;
          unint64_t v4 = v34;
          a1 = v36;
          uint64_t v5 = &qword_24F7478;
          uint64_t v6 = (void *)&unk_24F7000;
          uint64_t v9 = v30;
        }
      }
      _X8 = v3 + 8 * (v8[146] + v9 * v4);
      __asm { PRFM            #0, [X8] }
      uint64_t v3 = *(void *)(a1 + 24);
      unint64_t v2 = *(void *)(a1 + 32);
      BOOL v16 = *a2 > *(void *)(v3 + 8 * v4);
      uint64_t v17 = (2 * v4) | 1;
      unint64_t v4 = 2 * v4 + 2;
      if (!v16) {
        unint64_t v4 = v17;
      }
    }
    while (v4 < v2);
    char v26 = __clz(__rbit64(-2 - v4));
    if (v4 == -2) {
      char v27 = 0;
    }
    else {
      char v27 = v26 + 1;
    }
    unint64_t v28 = (v4 + 1) >> v27;
  }
  else
  {
    unint64_t v28 = 0;
  }
  if (v28) {
    unint64_t v2 = v28 - 1;
  }
  return v3 + 8 * v2;
}

void sub_F9AD58(_Unwind_Exception *a1)
{
}

void sub_F9AD90(_Unwind_Exception *a1)
{
}

void *sub_F9ADB8(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  uint64_t v5 = sub_F92618(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    uint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  uint64_t v7 = (char *)operator new(0x5F4uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 1524;
  if (a2)
  {
    uint64_t v8 = (char *)operator new(80 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[80 * v4];
  }
  return a1;
}

void sub_F9AE9C(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  uint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    uint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F9AF24(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = sub_F96DE8(*(void *)(a1 + 8), *a3, 1);
  if (!v5) {
    return 0xFFFFLL;
  }
  uint64_t v6 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v6 < 5u) {
    return 0xFFFFLL;
  }
  if (!*((_WORD *)v6 + 2)) {
    return 0xFFFFLL;
  }
  uint64_t v7 = &v5[*((unsigned __int16 *)v6 + 2) + *(unsigned int *)&v5[*((unsigned __int16 *)v6 + 2)]];
  if (*(_DWORD *)v7 <= HIDWORD(v4)) {
    return 0xFFFFLL;
  }
  uint64_t v8 = &v7[4 * HIDWORD(v4) + 4 + *(unsigned int *)&v7[4 * HIDWORD(v4) + 4]];
  uint64_t v9 = &v8[-*(int *)v8];
  if (*(unsigned __int16 *)v9 < 0xBu) {
    return 0xFFFFLL;
  }
  uint64_t v10 = *((unsigned __int16 *)v9 + 5);
  if (!v10) {
    return 0xFFFFLL;
  }
  char v11 = &v8[v10 + *(unsigned int *)&v8[v10]];
  unsigned int v14 = *(_DWORD *)v11;
  char v12 = v11 + 4;
  unint64_t v13 = v14;
  long long v15 = &v12[8 * v14];
  BOOL v16 = v12;
  while (v13)
  {
    uint64_t v17 = &v16[(4 * v13) & 0x7FFFFFFF8];
    unint64_t v19 = *(void *)v17;
    unint64_t v18 = v17 + 8;
    unint64_t v20 = v13 >> 1;
    v13 += ~(v13 >> 1);
    if (v19 >= v3) {
      unint64_t v13 = v20;
    }
    else {
      BOOL v16 = v18;
    }
  }
  if (v16 != v15 && *(void *)v16 == v3) {
    return (unint64_t)(v16 - v12) >> 3;
  }
  else {
    return 0xFFFFLL;
  }
}

void sub_F9B030(uint64_t a1, unsigned int *a2, unsigned __int16 *a3, uint64_t a4)
{
  *(void *)(a4 + 8) = *(void *)a4;
  if (!*(_DWORD *)(a1 + 3880))
  {
    uint64_t v7 = sub_3823E0(a1 + 8, *a2, 1);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = &v7[-*(int *)v7];
      if (*(unsigned __int16 *)v9 >= 9u)
      {
        uint64_t v10 = *((unsigned __int16 *)v9 + 4);
        if (*((_WORD *)v9 + 4))
        {
          uint64_t v11 = *(unsigned int *)&v7[v10];
          char v12 = &v7[v10 + v11];
          uint64_t v13 = a2[1];
          if (*(_DWORD *)v12 > v13)
          {
            uint64_t v14 = 4 * v13;
            long long v15 = &v12[4 * v13];
            uint64_t v16 = *((unsigned int *)v15 + 1);
            uint64_t v17 = &v15[v16 + 4];
            unint64_t v18 = &v17[-*(int *)v17];
            if (*(unsigned __int16 *)v18 >= 7u)
            {
              uint64_t v19 = *((unsigned __int16 *)v18 + 3);
              if (*((_WORD *)v18 + 3))
              {
                unint64_t v20 = &v17[v19];
                uint64_t v21 = *(unsigned int *)v20;
                uint64_t v22 = &v20[v21];
                uint64_t v23 = *a3;
                if (*(_DWORD *)v22 > v23)
                {
                  uint64_t v24 = 4 * v23;
                  uint64_t v25 = &v22[4 * v23];
                  uint64_t v26 = *((unsigned int *)v25 + 1);
                  char v27 = &v25[v26 + 4];
                  unint64_t v28 = &v27[-*(int *)v27];
                  if (*(unsigned __int16 *)v28 >= 5u)
                  {
                    uint64_t v29 = *((unsigned __int16 *)v28 + 2);
                    if (v29)
                    {
                      unint64_t v30 = *(unsigned int *)&v27[v29 + *(unsigned int *)&v27[v29]];
                      uint64_t v31 = *(unsigned char **)a4;
                      if (v30 > (uint64_t)(*(void *)(a4 + 16) - *(void *)a4) >> 5)
                      {
                        uint64_t v48 = v26;
                        uint64_t v49 = 4 * v23;
                        uint64_t v47 = v21;
                        unint64_t v32 = *(unsigned char **)(a4 + 8);
                        uint64_t v46 = 32 * v30;
                        unint64_t v33 = (char *)operator new(32 * v30);
                        unint64_t v34 = &v33[(v32 - v31) & 0xFFFFFFFFFFFFFFE0];
                        uint64_t v35 = v34;
                        if (v32 != v31)
                        {
                          uint64_t v36 = &v33[(v32 - v31) & 0xFFFFFFFFFFFFFFE0];
                          do
                          {
                            long long v37 = *((_OWORD *)v32 - 1);
                            uint64_t v35 = v36 - 32;
                            *((_OWORD *)v36 - 2) = *((_OWORD *)v32 - 2);
                            *((_OWORD *)v36 - 1) = v37;
                            v32 -= 32;
                            v36 -= 32;
                          }
                          while (v32 != v31);
                        }
                        *(void *)a4 = v35;
                        *(void *)(a4 + 8) = v34;
                        *(void *)(a4 + 16) = &v33[v46];
                        uint64_t v21 = v47;
                        uint64_t v26 = v48;
                        uint64_t v24 = v49;
                        if (v31)
                        {
                          operator delete(v31);
                          uint64_t v26 = v48;
                          uint64_t v24 = v49;
                        }
                      }
                      uint64_t v38 = *(unsigned __int16 *)&v27[-*(int *)v27 + 4];
                      uint64_t v39 = *(unsigned int *)&v27[v38];
                      uint64_t v40 = *(unsigned int *)&v27[v38 + v39];
                      if (v40)
                      {
                        uint64_t v41 = 0;
                        uint64_t v42 = 12 * v40;
                        unint64_t v43 = *(char **)(a4 + 8);
                        uint64_t v44 = (uint64_t)&v8[v11 + v10 + v24 + v14 + v38 + v26 + v21 + v19 + v16 + v39];
                        do
                        {
                          uint64_t v51 = 0x7FFFFFFFFFFFFFFFLL;
                          uint64_t v52 = 0x7FFFFFFFFFFFFFFFLL;
                          *(void *)&long long v50 = *(unsigned int *)(v44 + v41 + 12) | ((unint64_t)*(unsigned __int16 *)(v44 + v41 + 16) << 32);
                          DWORD2(v50) = *(unsigned __int16 *)(v44 + v41 + 18);
                          if (*(unsigned __int16 *)(v44 + v41 + 20) != 0xFFFF)
                          {
                            int v45 = *(unsigned __int16 *)(v44 + v41 + 22);
                            LODWORD(v51) = *(unsigned __int16 *)(v44 + v41 + 20);
                            HIDWORD(v51) = v45;
                            uint64_t v52 = 0;
                          }
                          unint64_t v43 = sub_F971A4((char **)a4, v43, &v50) + 32;
                          v41 += 12;
                        }
                        while (v42 != v41);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_F9B2B8(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = __ROR8__(*a2, 32);
  unint64_t v7 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) >> 33));
  sub_F97570((uint64_t *)(*(void *)(*(void *)(a1 + 16) + 16) + 200 * ((v7 ^ (v7 >> 33)) % **(void **)(a1 + 16))), a2, (uint64_t)&v13);
  if (!v15)
  {
    unint64_t v8 = __ROR8__(*a2, 32);
    unint64_t v9 = 0xC4CEB9FE1A85EC53
       * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
    sub_39ABD8((uint64_t *)(*(void *)(*(void *)(a1 + 16) + 96)+ 200 * ((v9 ^ (v9 >> 33)) % *(void *)(*(void *)(a1 + 16) + 80))), a2, (uint64_t)&v12, 8uLL, 0);
  }
  uint64_t v10 = v14;
  *a3 = v13;
  a3[1] = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v11 = v14;
    if (v14)
    {
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_F9B424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_F9B438(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = &unk_20E1710;
  a1[5] = 0;
  a1[6] = 0;
  a1[4] = 0;
  a1[8] = 0;
  a1[9] = &unk_20E1710;
  a1[11] = 0;
  a1[12] = 0;
  a1[10] = 0;
  a1[14] = 0;
  a1[15] = &unk_20E1710;
  a1[16] = 0;
  a1[17] = 0;
  a1[18] = 0;
  a1[20] = 0;
  a1[21] = &unk_20E1710;
  a1[23] = 0;
  a1[24] = 0;
  a1[22] = 0;
  a1[26] = 0;
  a1[27] = &unk_20E1710;
  a1[29] = 0;
  a1[30] = 0;
  a1[28] = 0;
  a1[32] = 0;
  a1[33] = &unk_20E1710;
  a1[35] = 0;
  a1[36] = 0;
  a1[34] = 0;
  a1[38] = 0;
  a1[39] = &unk_20E1710;
  a1[40] = 0;
  a1[41] = 0;
  a1[42] = 0;
  a1[44] = 0;
  a1[45] = &unk_20E1710;
  a1[46] = 0;
  a1[47] = 0;
  a1[48] = 0;
  a1[50] = 0;
  a1[51] = &unk_20E1710;
  a1[52] = 0;
  a1[53] = 0;
  a1[54] = 0;
  a1[56] = 0;
  a1[57] = &unk_20E1710;
  a1[58] = 0;
  a1[59] = 0;
  a1[60] = 0;
  a1[62] = 0;
  a1[63] = &unk_20E1710;
  a1[68] = 0;
  a1[65] = 0;
  a1[64] = 0;
  a1[66] = 0;
  a1[69] = &unk_20E1710;
  a1[74] = 0;
  a1[71] = 0;
  a1[70] = 0;
  a1[72] = 0;
  a1[75] = &unk_20E1710;
  a1[80] = 0;
  a1[77] = 0;
  a1[76] = 0;
  a1[78] = 0;
  a1[81] = &unk_20E1710;
  a1[86] = 0;
  a1[83] = 0;
  a1[82] = 0;
  a1[84] = 0;
  a1[87] = &unk_20E1710;
  a1[92] = 0;
  a1[89] = 0;
  a1[88] = 0;
  a1[90] = 0;
  a1[93] = &unk_20E1710;
  a1[98] = 0;
  a1[95] = 0;
  a1[94] = 0;
  a1[96] = 0;
  sub_F9B594((uint64_t)(a1 + 99), (uint64_t *)(a2 + 14664));
  return a1;
}

void sub_F9B578(_Unwind_Exception *a1)
{
  sub_42CB30(v2);
  sub_C64510(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F9B594(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 34) = 0;
  *(void *)(a1 + 24) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = -1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0xFFFFFFFF00000000;
  unint64_t v3 = (const double *)(a1 + 72);
  *(void *)(a1 + 64) = 32;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_20B98A0;
  *(_WORD *)(a1 + 32) = 0;
  unsigned int v4 = sub_F78BBC(a2);
  __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_F92358((void *)(a1 + 88), v4, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 33) = 1;
  *(void *)(a1 + 72) = 0xFFFFFFFF00000000;
  uint64_t v5 = (char *)malloc_type_malloc(8 * *(void *)(a1 + 64), 0x100004000313F17uLL);
  *(void *)(a1 + 80) = v5;
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6)
  {
    unint64_t v7 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v7 < 0xF)
    {
      unint64_t v8 = v5;
LABEL_11:
      uint64_t v13 = &v5[8 * v6];
      do
      {
        *(double *)unint64_t v8 = *v3;
        v8 += 8;
      }
      while (v8 != v13);
      return a1;
    }
    if ((unint64_t)v5 < a1 + 80)
    {
      unint64_t v8 = v5;
      if (v3 < (const double *)&v5[8 * v6]) {
        goto LABEL_11;
      }
    }
    unint64_t v9 = v7 + 1;
    unint64_t v8 = &v5[8 * (v9 & 0x3FFFFFFFFFFFFFFCLL)];
    float64x2_t v10 = vld1q_dup_f64(v3);
    uint64_t v11 = (float64x2_t *)(v5 + 16);
    uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v10;
      *uint64_t v11 = v10;
      v11 += 2;
      v12 -= 4;
    }
    while (v12);
    if (v9 != (v9 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_11;
    }
  }
  return a1;
}

void sub_F9B6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_36094(v12);
  uint64_t v14 = *(void **)(v11 + 80);
  if (!v14) {
    _Unwind_Resume(a1);
  }
  free(v14);
  _Unwind_Resume(a1);
}

void *sub_F9B75C(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  uint64_t v5 = sub_F92618(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    uint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  unint64_t v7 = (char *)operator new(0x5F4uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 1524;
  if (a2)
  {
    unint64_t v8 = (char *)operator new(80 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[80 * v4];
  }
  return a1;
}

void sub_F9B840(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  uint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    uint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_F9B8C8(uint64_t **a1, void *a2)
{
  if (*a2 == a2[1]) {
    return;
  }
  char v200 = 0;
  uint64_t v198 = 0x3E4CCCCD3F000000;
  int v201 = 0;
  int v202 = 0;
  int v203 = -1;
  uint64_t v204 = 0;
  uint64_t v205 = 0;
  long long v197 = xmmword_20B98A0;
  __int16 v199 = 256;
  long long v206 = xmmword_20E2130;
  v207 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  int64x2_t v3 = vdupq_n_s64(0xFFFFFFFF00000000);
  uint64_t v4 = (int64x2_t *)((char *)v207 + 16);
  uint64_t v5 = 32;
  do
  {
    v4[-1] = v3;
    int64x2_t *v4 = v3;
    v4 += 2;
    v5 -= 4;
  }
  while (v5);
  v195 = 0;
  long long v196 = 0uLL;
  v193 = 0;
  long long v194 = 0uLL;
  __p = 0;
  v192 = 0;
  uint64_t v6 = (char *)a1[12] - (char *)a1[11];
  if (!v6) {
    goto LABEL_235;
  }
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v180 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  v187 = a1;
  do
  {
    if (v10 < (uint64_t)(a2[1] - *a2) >> 2)
    {
      int v182 = *(_DWORD *)(*a2 + 4 * v10);
      if (v182)
      {
        char v12 = a1[11];
        char v11 = a1[12];
        uint64_t v13 = (char **)&v12[3 * v10];
        if (&v195 != (void **)v13)
        {
          sub_326C0(&v195, *v13, v13[1], (v13[1] - *v13) >> 3);
          unint64_t v9 = (int8x16_t *)v195;
          unint64_t v8 = (int8x16_t *)v196;
        }
        unint64_t v14 = 126 - 2 * __clz(((char *)v8 - (char *)v9) >> 3);
        if (v8 == v9) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = v14;
        }
        sub_F98280(v9, v8, (uint64_t)&v208, v15, 1);
        uint64_t v16 = (int *)v195;
        if (v195 == (void *)v196)
        {
          char v27 = (int8x16_t *)v195;
          unint64_t v9 = (int8x16_t *)v195;
          goto LABEL_37;
        }
        unint64_t v9 = (int8x16_t *)v196;
        uint64_t v17 = (int8x16_t *)v195;
        do
        {
          unint64_t v18 = v16 + 2;
          if (v16 + 2 == (int *)v196) {
            goto LABEL_34;
          }
          int v19 = *v16;
          int v20 = v16[1];
          LODWORD(v21) = v16[2];
          int v22 = v16[3];
          BOOL v23 = v19 == v21 && v20 == v22;
          uint64_t v16 = v18;
        }
        while (!v23);
        uint64_t v24 = (int8x16_t *)(v18 + 2);
        uint64_t v25 = v18 - 2;
        if (v24 == (int8x16_t *)v196)
        {
          uint64_t v26 = (int8x16_t *)(v25 + 2);
          if (v25 + 2 != (_DWORD *)v196) {
            goto LABEL_24;
          }
        }
        else
        {
          do
          {
            if (v21 != v24->i32[0] || v25[1] != v24->i32[1])
            {
              uint64_t v21 = v24->i64[0];
              *((void *)v25 + 1) = v24->i64[0];
              v25 += 2;
            }
            uint64_t v24 = (int8x16_t *)((char *)v24 + 8);
          }
          while (v24 != v9);
          unint64_t v9 = (int8x16_t *)v196;
          uint64_t v26 = (int8x16_t *)(v25 + 2);
          if (v25 + 2 != (_DWORD *)v196)
          {
LABEL_24:
            unint64_t v9 = v26;
            *(void *)&long long v196 = v26;
            if (v17 == v26)
            {
LABEL_25:
              char v27 = v9;
LABEL_37:
              int v183 = 0;
              uint64_t v188 = -1 - 0x5555555555555555 * (v11 - v12);
              unint64_t v189 = v10;
              unint64_t v186 = v10 + 1;
              unint64_t v8 = v27;
LABEL_40:
              v184 = v8;
              if (v9 == v8) {
                goto LABEL_39;
              }
LABEL_43:
              uint64_t v31 = **a1;
              v191 = __p;
              v185 = v9;
              unsigned int v32 = v9->i32[0];
              int v210 = 1;
              v211[0] = v32;
              v208 = &v210;
              v209 = v211;
              unint64_t v33 = *(void *)(v31 + 3856) + 1;
              *(void *)(v31 + 3856) = v33;
              if (!*(void *)v31) {
                goto LABEL_99;
              }
              uint64_t v34 = v31 + 16;
              if (*(_DWORD *)(v31 + 688) == v32)
              {
                unsigned int v35 = 28;
              }
              else if (*(_DWORD *)(v31 + 712) == v32)
              {
                unsigned int v35 = 29;
              }
              else if (*(_DWORD *)(v31 + 736) == v32)
              {
                unsigned int v35 = 30;
              }
              else
              {
                if (*(_DWORD *)(v31 + 760) != v32)
                {
                  unint64_t v69 = *(void *)(v31 + 744);
                  unint64_t v70 = *(void *)(v31 + 720);
                  unint64_t v71 = *(void *)(v31 + 696);
                  unint64_t v72 = *(void *)(v31 + 768);
                  long long v37 = (unsigned int *)sub_2AB884(*(void *)v31, 7, v32, 1);
                  if (v71 >= v33) {
                    unint64_t v73 = v33;
                  }
                  else {
                    unint64_t v73 = v71;
                  }
                  int v74 = 28;
                  if (v71 >= v33) {
                    int v74 = 0;
                  }
                  if (v70 < v73)
                  {
                    unint64_t v73 = v70;
                    int v74 = 29;
                  }
                  if (v69 < v73)
                  {
                    int v74 = 30;
                    unint64_t v73 = v69;
                  }
                  BOOL v75 = v72 >= v73;
                  unsigned int v76 = 31;
                  if (v75) {
                    unsigned int v76 = v74;
                  }
                  uint64_t v77 = v34 + 24 * v76;
                  *(_DWORD *)uint64_t v77 = v211[0];
                  *(void *)(v77 + 8) = *(void *)(v31 + 3856);
                  *(void *)(v77 + 16) = v37;
                  a1 = v187;
                  if (v37)
                  {
LABEL_53:
                    uint64_t v38 = (int *)((char *)v37 + *v37);
                    uint64_t v39 = (unsigned __int16 *)((char *)v38 - *v38);
                    if (*v39 >= 9u)
                    {
                      uint64_t v40 = v39[4];
                      if (v40)
                      {
                        uint64_t v41 = (int *)sub_F930D4((unsigned int *)((char *)v38 + v40 + *(unsigned int *)((char *)v38 + v40)), v185->u32[1]);
                        uint64_t v42 = (unsigned __int16 *)((char *)v41 - *v41);
                        a1 = v187;
                        if (*v42 >= 9u)
                        {
                          uint64_t v43 = v42[4];
                          if (v43)
                          {
                            uint64_t v44 = (unsigned int *)((char *)v41 + v43);
                            uint64_t v45 = *v44;
                            uint64_t v47 = (uint64_t *)((char *)v44 + v45 + 4);
                            uint64_t v46 = *(unsigned int *)((char *)v44 + v45);
                            if (v46)
                            {
                              uint64_t v48 = &v47[v46];
                              long long v50 = __p;
                              uint64_t v49 = v192;
                              while (1)
                              {
                                uint64_t v52 = *v47;
                                if (v50 < v49)
                                {
                                  *(void *)long long v50 = v52;
                                  uint64_t v51 = v50 + 8;
                                }
                                else
                                {
                                  unint64_t v53 = __p;
                                  uint64_t v54 = (v50 - __p) >> 3;
                                  unint64_t v55 = v54 + 1;
                                  if ((unint64_t)(v54 + 1) >> 61) {
                                    sub_2E00();
                                  }
                                  if ((v49 - __p) >> 2 > v55) {
                                    unint64_t v55 = (v49 - __p) >> 2;
                                  }
                                  if ((unint64_t)(v49 - __p) >= 0x7FFFFFFFFFFFFFF8) {
                                    unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v56 = v55;
                                  }
                                  if (v56 >> 61) {
                                    sub_188D718();
                                  }
                                  uint64_t v57 = operator new(8 * v56);
                                  unint64_t v58 = &v57[8 * v54];
                                  *(void *)unint64_t v58 = v52;
                                  uint64_t v51 = v58 + 8;
                                  if (v50 != __p)
                                  {
                                    unint64_t v59 = v50 - 8 - __p;
                                    if (v59 < 0x168
                                      || (&v57[v50 - __p - 8 - (v59 & 0xFFFFFFFFFFFFFFF8)] <= &v57[v50 - __p - 8]
                                        ? (BOOL v60 = &v50[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] > v50 - 8)
                                        : (BOOL v60 = 1),
                                          v60 || (unint64_t)(__p - v57) < 0x20))
                                    {
                                      uint64_t v61 = v50;
                                      a1 = v187;
                                      goto LABEL_77;
                                    }
                                    uint64_t v63 = (v59 >> 3) + 1;
                                    uint64_t v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
                                    uint64_t v61 = &v50[-v64];
                                    v58 -= v64;
                                    uint64_t v65 = &v57[8 * v54 - 16];
                                    uint64_t v66 = v50 - 16;
                                    uint64_t v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
                                    a1 = v187;
                                    do
                                    {
                                      long long v68 = *(_OWORD *)v66;
                                      *(v65 - 1) = *((_OWORD *)v66 - 1);
                                      *uint64_t v65 = v68;
                                      v65 -= 2;
                                      v66 -= 32;
                                      v67 -= 4;
                                    }
                                    while (v67);
                                    if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
                                    {
                                      do
                                      {
LABEL_77:
                                        uint64_t v62 = *((void *)v61 - 1);
                                        v61 -= 8;
                                        *((void *)v58 - 1) = v62;
                                        v58 -= 8;
                                      }
                                      while (v61 != __p);
                                    }
                                    uint64_t v49 = &v57[8 * v56];
                                    __p = v58;
                                    v192 = v49;
                                    if (!v53) {
                                      goto LABEL_60;
                                    }
LABEL_81:
                                    operator delete(v53);
                                    goto LABEL_60;
                                  }
                                  a1 = v187;
                                  uint64_t v49 = &v57[8 * v56];
                                  __p = &v57[8 * v54];
                                  v192 = v49;
                                  if (v53) {
                                    goto LABEL_81;
                                  }
                                }
LABEL_60:
                                v191 = v51;
                                ++v47;
                                long long v50 = v51;
                                if (v47 == v48) {
                                  goto LABEL_100;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    goto LABEL_100;
                  }
LABEL_99:
                  sub_F933C8(&v208);
                  a1 = v187;
LABEL_100:
                  for (unint64_t i = __p; ; i += 8)
                  {
                    if (i == v191)
                    {
                      unint64_t v9 = (int8x16_t *)&v185->u64[1];
                      if (&v185->u64[1] != (unint64_t *)v184) {
                        goto LABEL_43;
                      }
                      unint64_t v8 = (int8x16_t *)v195;
LABEL_39:
                      unint64_t v7 = v8;
                      unint64_t v9 = v193;
                      uint64_t v30 = *((void *)&v196 + 1);
                      long long v196 = v194;
                      *((void *)&v194 + 1) = v30;
                      v195 = v193;
                      v193 = v8;
                      *(void *)&long long v194 = v8;
                      unint64_t v8 = (int8x16_t *)v196;
                      if (++v183 == v182) {
                        goto LABEL_6;
                      }
                      goto LABEL_40;
                    }
                    if (v205 != v204)
                    {
                      uint64_t v80 = v206 - 1;
                      uint64_t v81 = *(void *)i;
                      unint64_t v82 = __ROR8__(*(void *)i, 32);
                      unint64_t v83 = 0xC4CEB9FE1A85EC53
                          * ((0xFF51AFD7ED558CCDLL * (v82 ^ (v82 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v82 ^ (v82 >> 33))) >> 33));
                      uint64_t v84 = (v83 ^ (v83 >> 33)) & (v206 - 1);
                      uint64_t v85 = (unsigned int *)((char *)v207 + 8 * v84);
                      unsigned int v87 = *v85;
                      unsigned int v86 = v85[1];
                      if (DWORD2(v206) != *v85 || HIDWORD(v206) != v86)
                      {
                        if (v204)
                        {
                          uint64_t v89 = 1;
                          while (v202 == v87 && v203 == v86 || __PAIR64__(v86, v87) != v81)
                          {
                            uint64_t v84 = (v84 + v89) & v80;
                            unint64_t v90 = (unsigned int *)((char *)v207 + 8 * v84);
                            unsigned int v87 = *v90;
                            unsigned int v86 = v90[1];
                            ++v89;
                            if (DWORD2(v206) == v87 && HIDWORD(v206) == v86) {
                              goto LABEL_128;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v92 = 1;
                          while (__PAIR64__(v86, v87) != v81)
                          {
                            uint64_t v84 = (v84 + v92) & v80;
                            uint64_t v93 = (unsigned int *)((char *)v207 + 8 * v84);
                            unsigned int v87 = *v93;
                            unsigned int v86 = v93[1];
                            ++v92;
                            if (DWORD2(v206) == v87 && HIDWORD(v206) == v86) {
                              goto LABEL_128;
                            }
                          }
                        }
                        if (v84 != -1 && (char *)v207 + 8 * v84 != (char *)v207 + 8 * (void)v206) {
                          continue;
                        }
                      }
                    }
LABEL_128:
                    unint64_t v95 = (int8x16_t *)v194;
                    if ((unint64_t)v194 < *((void *)&v194 + 1))
                    {
                      *(void *)long long v194 = *(void *)i;
                      uint64_t v96 = v194 + 8;
                      goto LABEL_150;
                    }
                    uint64_t v97 = (uint64_t)(v194 - (void)v193) >> 3;
                    unint64_t v98 = v97 + 1;
                    if ((unint64_t)(v97 + 1) >> 61) {
                      goto LABEL_241;
                    }
                    uint64_t v99 = *((void *)&v194 + 1) - (void)v193;
                    if ((uint64_t)(*((void *)&v194 + 1) - (void)v193) >> 2 > v98) {
                      unint64_t v98 = v99 >> 2;
                    }
                    unint64_t v100 = (unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v98;
                    if (v100) {
                      break;
                    }
                    unint64_t v101 = 0;
                    uint64_t v102 = (int8x16_t *)(8 * v97);
                    *(void *)(8 * v97) = *(void *)i;
                    uint64_t v96 = 8 * v97 + 8;
                    if ((int8x16_t *)v194 != v193) {
                      goto LABEL_141;
                    }
LABEL_148:
                    v193 = v102;
                    *((void *)&v194 + 1) = &v101[8 * v100];
                    if (v95) {
                      operator delete(v95);
                    }
LABEL_150:
                    *(void *)&long long v194 = v96;
                    sub_F94B1C((uint64_t)&v197, 1);
                    sub_F94DF0((int32x2_t *)&v197, i, (uint64_t)&v208);
                    uint64_t v112 = (char **)&a1[11][3 * v10];
                    v114 = v112[1];
                    unint64_t v113 = (unint64_t)v112[2];
                    if ((unint64_t)v114 < v113)
                    {
                      *(void *)v114 = *(void *)i;
                      uint64_t v115 = (uint64_t)(v114 + 8);
                      goto LABEL_173;
                    }
                    v116 = *v112;
                    uint64_t v117 = v114 - *v112;
                    uint64_t v118 = v117 >> 3;
                    unint64_t v119 = (v117 >> 3) + 1;
                    if (v119 >> 61) {
LABEL_241:
                    }
                      sub_2E00();
                    uint64_t v120 = v113 - (void)v116;
                    if (v120 >> 2 > v119) {
                      unint64_t v119 = v120 >> 2;
                    }
                    if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v121 = v119;
                    }
                    if (v121)
                    {
                      if (v121 >> 61) {
LABEL_240:
                      }
                        sub_188D718();
                      v122 = operator new(8 * v121);
                      v123 = &v122[8 * v118];
                      *(void *)v123 = *(void *)i;
                      uint64_t v115 = (uint64_t)(v123 + 8);
                      if (v114 != v116)
                      {
LABEL_161:
                        unint64_t v124 = v114 - 8 - v116;
                        if (v124 < 0x58)
                        {
                          unint64_t v10 = v189;
                          goto LABEL_170;
                        }
                        unint64_t v125 = v114 - &v122[v117];
                        unint64_t v10 = v189;
                        if (v125 < 0x20) {
                          goto LABEL_248;
                        }
                        uint64_t v126 = (v124 >> 3) + 1;
                        uint64_t v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
                        v128 = &v114[-v127];
                        v123 -= v127;
                        v129 = &v122[8 * v118 - 16];
                        v130 = v114 - 16;
                        uint64_t v131 = v126 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v132 = *(_OWORD *)v130;
                          *(v129 - 1) = *((_OWORD *)v130 - 1);
                          _OWORD *v129 = v132;
                          v129 -= 2;
                          v130 -= 32;
                          v131 -= 4;
                        }
                        while (v131);
                        v114 = v128;
                        if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_248:
                          do
                          {
LABEL_170:
                            uint64_t v133 = *((void *)v114 - 1);
                            v114 -= 8;
                            *((void *)v123 - 1) = v133;
                            v123 -= 8;
                          }
                          while (v114 != v116);
                        }
                        v114 = *v112;
                        *uint64_t v112 = v123;
                        v112[1] = (char *)v115;
                        v112[2] = &v122[8 * v121];
                        if (!v114) {
                          goto LABEL_173;
                        }
LABEL_172:
                        operator delete(v114);
                        goto LABEL_173;
                      }
                    }
                    else
                    {
                      v122 = 0;
                      v123 = (char *)(8 * v118);
                      *(void *)(8 * v118) = *(void *)i;
                      uint64_t v115 = 8 * v118 + 8;
                      if (v114 != v116) {
                        goto LABEL_161;
                      }
                    }
                    unint64_t v10 = v189;
                    *uint64_t v112 = v123;
                    v112[1] = (char *)v115;
                    v112[2] = &v122[8 * v121];
                    if (v114) {
                      goto LABEL_172;
                    }
LABEL_173:
                    v112[1] = (char *)v115;
                    if (v10 != v188)
                    {
                      v134 = a1[11];
                      uint64_t v135 = **a1;
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6898, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_24F6898))
                      {
                        qword_24F6890 = 1;
                        __cxa_guard_release(&qword_24F6898);
                      }
                      unsigned int v136 = *(_DWORD *)i;
                      if (*(void *)i == qword_24F6890) {
                        goto LABEL_191;
                      }
                      int v210 = 1;
                      v211[0] = v136;
                      v208 = &v210;
                      v209 = v211;
                      unint64_t v137 = *(void *)(v135 + 3856) + 1;
                      *(void *)(v135 + 3856) = v137;
                      if (*(void *)v135)
                      {
                        uint64_t v138 = v135 + 16;
                        if (*(_DWORD *)(v135 + 688) == v136)
                        {
                          unsigned int v139 = 28;
                          goto LABEL_185;
                        }
                        if (*(_DWORD *)(v135 + 712) == v136)
                        {
                          unsigned int v139 = 29;
                          goto LABEL_185;
                        }
                        if (*(_DWORD *)(v135 + 736) == v136)
                        {
                          unsigned int v139 = 30;
                          goto LABEL_185;
                        }
                        if (*(_DWORD *)(v135 + 760) == v136)
                        {
                          unsigned int v139 = 31;
LABEL_185:
                          ++*(void *)(v135 + 3864);
                          uint64_t v140 = v138 + 24 * v139;
                          *(void *)(v140 + 8) = v137;
                          v141 = *(unsigned int **)(v140 + 16);
                          if (v141)
                          {
LABEL_186:
                            v142 = (int *)((char *)v141 + *v141);
                            v143 = (unsigned __int16 *)((char *)v142 - *v142);
                            if (*v143 < 9u) {
                              goto LABEL_191;
                            }
                            uint64_t v144 = v143[4];
                            if (!v144) {
                              goto LABEL_191;
                            }
                            v145 = (int *)sub_F930D4((unsigned int *)((char *)v142 + v144+ *(unsigned int *)((char *)v142 + v144)), *((_DWORD *)i + 1));
                            v146 = (unsigned __int16 *)((char *)v145 - *v145);
                            if (*v146 >= 0xBu)
                            {
                              unsigned __int16 v147 = v146[5];
                              a1 = v187;
                              if (v147)
                              {
                                uint64_t v149 = *(void *)((char *)v145 + v147);
                                unint64_t v148 = v149 & 0xFFFFFFFF00000000;
                                uint64_t v149 = v149;
                                goto LABEL_207;
                              }
LABEL_191:
                              uint64_t v149 = 0;
                              unint64_t v148 = 0xFFFFFFFF00000000;
LABEL_207:
                              v158 = (char **)&v134[3 * v186];
                              unint64_t v159 = v149 | v148;
                              v161 = v158[1];
                              unint64_t v160 = (unint64_t)v158[2];
                              if ((unint64_t)v161 < v160)
                              {
                                *(void *)v161 = v159;
                                uint64_t v79 = (uint64_t)(v161 + 8);
                                unint64_t v10 = v189;
                                goto LABEL_102;
                              }
                              v162 = *v158;
                              uint64_t v163 = v161 - *v158;
                              uint64_t v164 = v163 >> 3;
                              unint64_t v165 = (v163 >> 3) + 1;
                              if (v165 >> 61) {
                                sub_2E00();
                              }
                              uint64_t v166 = v160 - (void)v162;
                              if (v166 >> 2 > v165) {
                                unint64_t v165 = v166 >> 2;
                              }
                              if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v167 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v167 = v165;
                              }
                              if (v167)
                              {
                                if (v167 >> 61) {
                                  sub_188D718();
                                }
                                v168 = operator new(8 * v167);
                                v169 = &v168[8 * v164];
                                *(void *)v169 = v159;
                                uint64_t v79 = (uint64_t)(v169 + 8);
                                if (v161 != v162)
                                {
LABEL_217:
                                  unint64_t v170 = v161 - 8 - v162;
                                  unint64_t v10 = v189;
                                  if (v170 < 0x58)
                                  {
                                    a1 = v187;
                                    goto LABEL_226;
                                  }
                                  unint64_t v171 = v161 - &v168[v163];
                                  a1 = v187;
                                  if (v171 < 0x20) {
                                    goto LABEL_249;
                                  }
                                  uint64_t v172 = (v170 >> 3) + 1;
                                  uint64_t v173 = 8 * (v172 & 0x3FFFFFFFFFFFFFFCLL);
                                  v174 = &v161[-v173];
                                  v169 -= v173;
                                  v175 = &v168[8 * v164 - 16];
                                  v176 = v161 - 16;
                                  uint64_t v177 = v172 & 0x3FFFFFFFFFFFFFFCLL;
                                  do
                                  {
                                    long long v178 = *(_OWORD *)v176;
                                    *(v175 - 1) = *((_OWORD *)v176 - 1);
                                    _OWORD *v175 = v178;
                                    v175 -= 2;
                                    v176 -= 32;
                                    v177 -= 4;
                                  }
                                  while (v177);
                                  v161 = v174;
                                  if (v172 != (v172 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
LABEL_249:
                                    do
                                    {
LABEL_226:
                                      uint64_t v179 = *((void *)v161 - 1);
                                      v161 -= 8;
                                      *((void *)v169 - 1) = v179;
                                      v169 -= 8;
                                    }
                                    while (v161 != v162);
                                  }
                                  v161 = *v158;
                                  *v158 = v169;
                                  v158[1] = (char *)v79;
                                  v158[2] = &v168[8 * v167];
                                  if (v161) {
LABEL_228:
                                  }
                                    operator delete(v161);
LABEL_102:
                                  v158[1] = (char *)v79;
                                  continue;
                                }
                              }
                              else
                              {
                                v168 = 0;
                                v169 = (char *)(8 * v164);
                                *(void *)(8 * v164) = v159;
                                uint64_t v79 = 8 * v164 + 8;
                                if (v161 != v162) {
                                  goto LABEL_217;
                                }
                              }
                              a1 = v187;
                              unint64_t v10 = v189;
                              *v158 = v169;
                              v158[1] = (char *)v79;
                              v158[2] = &v168[8 * v167];
                              if (v161) {
                                goto LABEL_228;
                              }
                              goto LABEL_102;
                            }
LABEL_206:
                            uint64_t v149 = 0;
                            unint64_t v148 = 0xFFFFFFFF00000000;
                            a1 = v187;
                            goto LABEL_207;
                          }
                        }
                        else
                        {
                          unint64_t v150 = *(void *)(v135 + 744);
                          unint64_t v151 = *(void *)(v135 + 720);
                          unint64_t v152 = *(void *)(v135 + 696);
                          unint64_t v153 = *(void *)(v135 + 768);
                          v141 = (unsigned int *)sub_2AB884(*(void *)v135, 7, v136, 1);
                          if (v152 >= v137) {
                            unint64_t v154 = v137;
                          }
                          else {
                            unint64_t v154 = v152;
                          }
                          int v155 = 28;
                          if (v152 >= v137) {
                            int v155 = 0;
                          }
                          if (v151 < v154)
                          {
                            unint64_t v154 = v151;
                            int v155 = 29;
                          }
                          if (v150 < v154)
                          {
                            int v155 = 30;
                            unint64_t v154 = v150;
                          }
                          BOOL v75 = v153 >= v154;
                          unsigned int v156 = 31;
                          if (v75) {
                            unsigned int v156 = v155;
                          }
                          uint64_t v157 = v138 + 24 * v156;
                          *(_DWORD *)uint64_t v157 = v211[0];
                          *(void *)(v157 + 8) = *(void *)(v135 + 3856);
                          *(void *)(v157 + 16) = v141;
                          a1 = v187;
                          if (v141) {
                            goto LABEL_186;
                          }
                        }
                      }
                      sub_F933C8(&v208);
                      goto LABEL_206;
                    }
                  }
                  if (v100 >> 61) {
                    goto LABEL_240;
                  }
                  unint64_t v101 = operator new(8 * v100);
                  unint64_t v10 = v189;
                  uint64_t v102 = (int8x16_t *)&v101[8 * v97];
                  v102->i64[0] = *(void *)i;
                  uint64_t v96 = (uint64_t)&v102->i64[1];
                  if ((int8x16_t *)v194 == v193) {
                    goto LABEL_148;
                  }
LABEL_141:
                  unint64_t v103 = v194 - 8 - (void)v193;
                  if (v103 < 0x58) {
                    goto LABEL_250;
                  }
                  if ((unint64_t)((char *)v193 - v101) < 0x20) {
                    goto LABEL_250;
                  }
                  uint64_t v104 = (v103 >> 3) + 1;
                  uint64_t v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v106 = (int8x16_t *)(v194 - v105);
                  uint64_t v102 = (int8x16_t *)((char *)v102 - v105);
                  uint64_t v107 = &v101[8 * v97 - 16];
                  uint64_t v108 = (long long *)(v194 - 16);
                  uint64_t v109 = v104 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v110 = *v108;
                    *(v107 - 1) = *(v108 - 1);
                    _OWORD *v107 = v110;
                    v107 -= 2;
                    v108 -= 2;
                    v109 -= 4;
                  }
                  while (v109);
                  unint64_t v95 = v106;
                  if (v104 != (v104 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_250:
                    do
                    {
                      uint64_t v111 = v95[-1].i64[1];
                      unint64_t v95 = (int8x16_t *)((char *)v95 - 8);
                      v102[-1].i64[1] = v111;
                      uint64_t v102 = (int8x16_t *)((char *)v102 - 8);
                    }
                    while (v95 != v193);
                  }
                  unint64_t v95 = v193;
                  goto LABEL_148;
                }
                unsigned int v35 = 31;
              }
              ++*(void *)(v31 + 3864);
              uint64_t v36 = v34 + 24 * v35;
              *(void *)(v36 + 8) = v33;
              long long v37 = *(unsigned int **)(v36 + 16);
              if (v37) {
                goto LABEL_53;
              }
              goto LABEL_99;
            }
            do
            {
LABEL_35:
              sub_F94B1C((uint64_t)&v197, 1);
              uint64_t v29 = (uint64_t *)v17;
              sub_F94DF0((int32x2_t *)&v197, v17, (uint64_t)&v208);
              uint64_t v17 = (int8x16_t *)((char *)v17 + 8);
            }
            while (v29 + 1 != (uint64_t *)v9);
            unint64_t v9 = (int8x16_t *)v195;
            char v27 = (int8x16_t *)v196;
            goto LABEL_37;
          }
        }
LABEL_34:
        if (v17 == v9) {
          goto LABEL_25;
        }
        goto LABEL_35;
      }
    }
LABEL_6:
    ++v10;
  }
  while (v10 != v180);
  if (__p) {
    operator delete(__p);
  }
  if (v7) {
    operator delete(v7);
  }
LABEL_235:
  if (v195)
  {
    *(void *)&long long v196 = v195;
    operator delete(v195);
  }
  if (v207) {
    free(v207);
  }
}

void sub_F9C7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  if (a38)
  {
    free(a38);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t *sub_F9C8AC(int32x2_t *result)
{
  unint64_t v1 = (uint64_t **)result[11];
  uint64_t v2 = (uint64_t **)result[12];
  if (v1 != v2)
  {
    int64x2_t v3 = result;
    uint64_t v4 = (uint64_t)&result[1];
    do
    {
      uint64_t v5 = *v1;
      uint64_t v6 = v1[1];
      while (v5 != v6)
      {
        if (!*(_DWORD *)v5 || *((_DWORD *)v5 + 1) == -1) {
          goto LABEL_7;
        }
        sub_F94B1C(v4, 1);
        uint64_t v7 = *(void *)&v3[8] - 1;
        uint64_t v8 = *v5;
        unint64_t v9 = __ROR8__(*v5, 32);
        unint64_t v10 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
        unint64_t v11 = v10 ^ (v10 >> 33);
        int32x2_t v12 = v3[10];
        __int32 v13 = v3[9].i32[0];
        __int32 v14 = v3[9].i32[1];
        uint64_t v15 = v11 & v7;
        uint64_t v16 = (unsigned int *)(*(void *)&v12 + 8 * (v11 & v7));
        unint64_t result = (int32x2_t *)*v16;
        unsigned int v17 = v16[1];
        int32x2_t v18 = v3[6];
        if (v13 == result && v14 == v17) {
          goto LABEL_28;
        }
        if (v18)
        {
          uint64_t v20 = -1;
          uint64_t v21 = 1;
          do
          {
            if (v3[5].i32[0] == result && v3[5].i32[1] == v17)
            {
              if (v20 == -1) {
                uint64_t v20 = v15;
              }
            }
            else if (__PAIR64__(v17, result) == v8)
            {
              goto LABEL_39;
            }
            uint64_t v15 = (v15 + v21) & v7;
            int v22 = (unsigned int *)(*(void *)&v12 + 8 * v15);
            unint64_t result = (int32x2_t *)*v22;
            unsigned int v17 = v22[1];
            ++v21;
          }
          while (v13 != result || v14 != v17);
          if (v20 == -1) {
LABEL_28:
          }
            uint64_t v20 = v15;
          int32x2_t v24 = v3[7];
          if (*(void *)&v24 - *(void *)&v18 >= 0x1FFFFFFFFFFFFFFFuLL) {
            goto LABEL_41;
          }
LABEL_30:
          if (*(void *)&v18
            && (int32x2_t v25 = vceq_s32(v3[5], *(int32x2_t *)(*(void *)&v12 + 8 * v20)), (v25.i32[0] & v25.i32[1] & 1) != 0))
          {
            v3[6] = (int32x2_t)(*(void *)&v18 - 1);
          }
          else
          {
            v3[7] = (int32x2_t)(*(void *)&v24 + 1);
          }
          *(void *)(*(void *)&v12 + 8 * v20) = *v5;
          goto LABEL_7;
        }
        uint64_t v26 = 1;
        while (__PAIR64__(v17, result) != v8)
        {
          uint64_t v15 = (v15 + v26) & v7;
          char v27 = (unsigned int *)(*(void *)&v12 + 8 * v15);
          unint64_t result = (int32x2_t *)*v27;
          unsigned int v17 = v27[1];
          ++v26;
          if (v13 == result && v14 == v17) {
            goto LABEL_28;
          }
        }
LABEL_39:
        if (v15 == -1)
        {
          uint64_t v20 = -1;
          int32x2_t v24 = v3[7];
          if (*(void *)&v24 - *(void *)&v18 >= 0x1FFFFFFFFFFFFFFFuLL)
          {
LABEL_41:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
          goto LABEL_30;
        }
LABEL_7:
        ++v5;
      }
      v1 += 3;
    }
    while (v1 != v2);
  }
  return result;
}

void sub_F9CAF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F9CB08(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = sub_F9CC14(*(void *)(a1 + 8), *a3, 1);
  if (!v5) {
    return 0xFFFFLL;
  }
  uint64_t v6 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v6 < 5u) {
    return 0xFFFFLL;
  }
  if (!*((_WORD *)v6 + 2)) {
    return 0xFFFFLL;
  }
  uint64_t v7 = &v5[*((unsigned __int16 *)v6 + 2) + *(unsigned int *)&v5[*((unsigned __int16 *)v6 + 2)]];
  if (*(_DWORD *)v7 <= HIDWORD(v4)) {
    return 0xFFFFLL;
  }
  uint64_t v8 = &v7[4 * HIDWORD(v4) + 4 + *(unsigned int *)&v7[4 * HIDWORD(v4) + 4]];
  unint64_t v9 = &v8[-*(int *)v8];
  if (*(unsigned __int16 *)v9 < 9u) {
    return 0xFFFFLL;
  }
  uint64_t v10 = *((unsigned __int16 *)v9 + 4);
  if (!v10) {
    return 0xFFFFLL;
  }
  unint64_t v11 = &v8[v10 + *(unsigned int *)&v8[v10]];
  unsigned int v14 = *(_DWORD *)v11;
  int32x2_t v12 = v11 + 4;
  unint64_t v13 = v14;
  uint64_t v15 = &v12[8 * v14];
  uint64_t v16 = v12;
  while (v13)
  {
    unsigned int v17 = &v16[(4 * v13) & 0x7FFFFFFF8];
    unint64_t v19 = *(void *)v17;
    int32x2_t v18 = v17 + 8;
    unint64_t v20 = v13 >> 1;
    v13 += ~(v13 >> 1);
    if (v19 >= v3) {
      unint64_t v13 = v20;
    }
    else {
      uint64_t v16 = v18;
    }
  }
  if (v16 != v15 && *(void *)v16 == v3) {
    return (unint64_t)(v16 - v12) >> 3;
  }
  else {
    return 0xFFFFLL;
  }
}

char *sub_F9CC14(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 1264) == a2)
    {
      unsigned int v7 = 52;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1288) == a2)
    {
      unsigned int v7 = 53;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1312) == a2)
    {
      unsigned int v7 = 54;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1336) == a2)
    {
      unsigned int v7 = 55;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      unint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 1320);
    unint64_t v12 = *(void *)(a1 + 1296);
    unint64_t v13 = *(void *)(a1 + 1272);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 1272);
    }
    int v15 = 52;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 1296);
    }
    int v17 = 53;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 1320);
    }
    unint64_t v19 = *(void *)(a1 + 1344);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 54;
    }
    uint64_t v21 = (unsigned int *)sub_2AB884(v5, 13, a2, 1);
    unsigned int v22 = 55;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_F9CDA4(v24);
  return 0;
}

uint64_t sub_F9CDA4(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      unint64_t v9 = sub_736EC(0xDu);
      uint64_t v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_F9CEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

void sub_F9CFD0(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = __ROR8__(*a2, 32);
  unint64_t v7 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) >> 33));
  sub_F97570((uint64_t *)(*(void *)(*(void *)(a1 + 16) + 56)+ 200 * ((v7 ^ (v7 >> 33)) % *(void *)(*(void *)(a1 + 16) + 40))), a2, (uint64_t)&v13);
  if (!v15)
  {
    unint64_t v8 = __ROR8__(*a2, 32);
    unint64_t v9 = 0xC4CEB9FE1A85EC53
       * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
    sub_39ABD8((uint64_t *)(*(void *)(*(void *)(a1 + 16) + 136)+ 200 * ((v9 ^ (v9 >> 33)) % *(void *)(*(void *)(a1 + 16) + 120))), a2, (uint64_t)&v12, 8uLL, 0);
  }
  uint64_t v10 = v14;
  *a3 = v13;
  a3[1] = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v11 = v14;
    if (v14)
    {
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_F9D13C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_F9D150(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = -1;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    while (*(_DWORD *)(v5 + 32)
         && *(_DWORD *)(v5 + 36) != -1
         && *(void *)v5 != 0x7FFFFFFFFFFFFFFFLL
         && *(void *)(v5 + 24) != 0x7FFFFFFFFFFFFFFFLL)
    {
      long long v24 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      v19[1] = 0x7FFFFFFFLL;
      v19[0] = -1;
      v19[2] = -1;
      v19[3] = -1;
      v19[4] = 0x7FFFFFFFFFFFFFFFLL;
      DWORD2(v20) = -1935635296;
      *(void *)&long long v21 = 0;
      *(_DWORD *)((char *)&v21 + 7) = 0;
      __p = 0;
      uint64_t v23 = 0;
      *(void *)&long long v24 = 0;
      DWORD2(v24) = 0;
      BYTE12(v24) = 100;
      sub_F38624(a1, (uint64_t *)v5, a3, (uint64_t)v19, a4, (char **)a5, 1.0);
      if (__p)
      {
        uint64_t v23 = __p;
        operator delete(__p);
      }
      v5 += 64;
      if (v5 == v6)
      {
        uint64_t v10 = *(char **)a5;
        unint64_t v9 = *(char **)(a5 + 8);
        if (*(char **)a5 != v9)
        {
          long long v11 = *(char **)a5;
          char v12 = *(char **)a5;
          while (v12[32])
          {
            v12 += 80;
            if (v12 == v9)
            {
              unint64_t v13 = v9 - v10 - 80;
              if (v13 < 0x50) {
                goto LABEL_21;
              }
              unint64_t v14 = v13 / 0x50 + 1;
              long long v11 = &v10[80 * (v14 & 0x7FFFFFFFFFFFFFELL)];
              char v15 = v10 + 128;
              uint64_t v16 = v14 & 0x7FFFFFFFFFFFFFELL;
              do
              {
                *(v15 - 80) = 0;
                *char v15 = 0;
                v15 += 160;
                v16 -= 2;
              }
              while (v16);
              if (v14 != (v14 & 0x7FFFFFFFFFFFFFELL))
              {
LABEL_21:
                do
                {
                  v11[48] = 0;
                  v11 += 80;
                }
                while (v11 != v9);
              }
              return;
            }
          }
        }
        return;
      }
    }
  }
}

void sub_F9D31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    long long v24 = *(void **)v22;
    if (!*(void *)v22) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    long long v24 = *(void **)v22;
    if (!*(void *)v22) {
      goto LABEL_3;
    }
  }
  *(void *)(v22 + 8) = v24;
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void *sub_F9D358(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  uint64_t v5 = sub_F92618(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    uint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  unint64_t v7 = (char *)operator new(0x5F4uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 1524;
  if (a2)
  {
    unint64_t v8 = (char *)operator new(80 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[80 * v4];
  }
  return a1;
}

void sub_F9D43C(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  uint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    uint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F9D4C4(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = sub_F9CC14(*(void *)(a1 + 8), *a3, 1);
  if (!v5) {
    return 0xFFFFLL;
  }
  uint64_t v6 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v6 < 5u) {
    return 0xFFFFLL;
  }
  if (!*((_WORD *)v6 + 2)) {
    return 0xFFFFLL;
  }
  unint64_t v7 = &v5[*((unsigned __int16 *)v6 + 2) + *(unsigned int *)&v5[*((unsigned __int16 *)v6 + 2)]];
  if (*(_DWORD *)v7 <= HIDWORD(v4)) {
    return 0xFFFFLL;
  }
  unint64_t v8 = &v7[4 * HIDWORD(v4) + 4 + *(unsigned int *)&v7[4 * HIDWORD(v4) + 4]];
  unint64_t v9 = &v8[-*(int *)v8];
  if (*(unsigned __int16 *)v9 < 0xBu) {
    return 0xFFFFLL;
  }
  uint64_t v10 = *((unsigned __int16 *)v9 + 5);
  if (!v10) {
    return 0xFFFFLL;
  }
  char v11 = &v8[v10 + *(unsigned int *)&v8[v10]];
  unsigned int v14 = *(_DWORD *)v11;
  char v12 = v11 + 4;
  unint64_t v13 = v14;
  char v15 = &v12[8 * v14];
  uint64_t v16 = v12;
  while (v13)
  {
    std::string v17 = &v16[(4 * v13) & 0x7FFFFFFF8];
    unint64_t v19 = *(void *)v17;
    long long v18 = v17 + 8;
    unint64_t v20 = v13 >> 1;
    v13 += ~(v13 >> 1);
    if (v19 >= v3) {
      unint64_t v13 = v20;
    }
    else {
      uint64_t v16 = v18;
    }
  }
  if (v16 != v15 && *(void *)v16 == v3) {
    return (unint64_t)(v16 - v12) >> 3;
  }
  else {
    return 0xFFFFLL;
  }
}

void sub_F9D5D0(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = __ROR8__(*a2, 32);
  unint64_t v7 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) >> 33));
  sub_F97570((uint64_t *)(*(void *)(*(void *)(a1 + 16) + 16) + 200 * ((v7 ^ (v7 >> 33)) % **(void **)(a1 + 16))), a2, (uint64_t)&v13);
  if (!v15)
  {
    unint64_t v8 = __ROR8__(*a2, 32);
    unint64_t v9 = 0xC4CEB9FE1A85EC53
       * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
    sub_39ABD8((uint64_t *)(*(void *)(*(void *)(a1 + 16) + 96)+ 200 * ((v9 ^ (v9 >> 33)) % *(void *)(*(void *)(a1 + 16) + 80))), a2, (uint64_t)&v12, 8uLL, 0);
  }
  uint64_t v10 = v14;
  *a3 = v13;
  a3[1] = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    char v11 = v14;
    if (v14)
    {
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_F9D73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_F9D750(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = &unk_20E1710;
  a1[5] = 0;
  a1[6] = 0;
  a1[4] = 0;
  a1[8] = 0;
  a1[9] = &unk_20E1710;
  a1[11] = 0;
  a1[12] = 0;
  a1[10] = 0;
  a1[14] = 0;
  a1[15] = &unk_20E1710;
  a1[16] = 0;
  a1[17] = 0;
  a1[18] = 0;
  a1[20] = 0;
  a1[21] = &unk_20E1710;
  a1[23] = 0;
  a1[24] = 0;
  a1[22] = 0;
  a1[26] = 0;
  a1[27] = &unk_20E1710;
  a1[29] = 0;
  a1[30] = 0;
  a1[28] = 0;
  a1[32] = 0;
  a1[33] = &unk_20E1710;
  a1[35] = 0;
  a1[36] = 0;
  a1[34] = 0;
  a1[38] = 0;
  a1[39] = &unk_20E1710;
  a1[40] = 0;
  a1[41] = 0;
  a1[42] = 0;
  a1[44] = 0;
  a1[45] = &unk_20E1710;
  a1[46] = 0;
  a1[47] = 0;
  a1[48] = 0;
  a1[50] = 0;
  a1[51] = &unk_20E1710;
  a1[52] = 0;
  a1[53] = 0;
  a1[54] = 0;
  a1[56] = 0;
  a1[57] = &unk_20E1710;
  a1[58] = 0;
  a1[59] = 0;
  a1[60] = 0;
  a1[62] = 0;
  a1[63] = &unk_20E1710;
  a1[68] = 0;
  a1[65] = 0;
  a1[64] = 0;
  a1[66] = 0;
  a1[69] = &unk_20E1710;
  a1[74] = 0;
  a1[71] = 0;
  a1[70] = 0;
  a1[72] = 0;
  a1[75] = &unk_20E1710;
  a1[80] = 0;
  a1[77] = 0;
  a1[76] = 0;
  a1[78] = 0;
  a1[81] = &unk_20E1710;
  a1[86] = 0;
  a1[83] = 0;
  a1[82] = 0;
  a1[84] = 0;
  a1[87] = &unk_20E1710;
  a1[92] = 0;
  a1[89] = 0;
  a1[88] = 0;
  a1[90] = 0;
  a1[93] = &unk_20E1710;
  a1[98] = 0;
  a1[95] = 0;
  a1[94] = 0;
  a1[96] = 0;
  sub_F9D8A8((uint64_t)(a1 + 99), (uint64_t *)(a2 + 184));
  return a1;
}

void sub_F9D88C(_Unwind_Exception *a1)
{
  sub_42CB30(v2);
  sub_C64510(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F9D8A8(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 34) = 0;
  *(void *)(a1 + 24) = 0x3E4CCCCD3F000000;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = -1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0xFFFFFFFF00000000;
  unint64_t v3 = (const double *)(a1 + 72);
  *(void *)(a1 + 64) = 32;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_20B98A0;
  *(_WORD *)(a1 + 32) = 0;
  unsigned int v4 = sub_F78BBC(a2);
  __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_F92358((void *)(a1 + 88), v4, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 33) = 1;
  *(void *)(a1 + 72) = 0xFFFFFFFF00000000;
  uint64_t v5 = (char *)malloc_type_malloc(8 * *(void *)(a1 + 64), 0x100004000313F17uLL);
  *(void *)(a1 + 80) = v5;
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6)
  {
    unint64_t v7 = (v6 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v7 < 0xF)
    {
      unint64_t v8 = v5;
LABEL_11:
      uint64_t v13 = &v5[8 * v6];
      do
      {
        *(double *)unint64_t v8 = *v3;
        v8 += 8;
      }
      while (v8 != v13);
      return a1;
    }
    if ((unint64_t)v5 < a1 + 80)
    {
      unint64_t v8 = v5;
      if (v3 < (const double *)&v5[8 * v6]) {
        goto LABEL_11;
      }
    }
    unint64_t v9 = v7 + 1;
    unint64_t v8 = &v5[8 * (v9 & 0x3FFFFFFFFFFFFFFCLL)];
    float64x2_t v10 = vld1q_dup_f64(v3);
    char v11 = (float64x2_t *)(v5 + 16);
    uint64_t v12 = v9 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v11[-1] = v10;
      *char v11 = v10;
      v11 += 2;
      v12 -= 4;
    }
    while (v12);
    if (v9 != (v9 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_11;
    }
  }
  return a1;
}

void sub_F9DA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_36094(v12);
  unsigned int v14 = *(void **)(v11 + 80);
  if (!v14) {
    _Unwind_Resume(a1);
  }
  free(v14);
  _Unwind_Resume(a1);
}

void *sub_F9DA70(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  uint64_t v5 = sub_F9DBDC(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    uint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  unint64_t v7 = (char *)operator new(0x5F4uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 1524;
  if (a2)
  {
    unint64_t v8 = (char *)operator new(80 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[80 * v4];
  }
  return a1;
}

void sub_F9DB54(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  uint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    uint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

void *sub_F9DBDC(void *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  a1[5] = 0;
  *a1 = &unk_20E1710;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  if (v4)
  {
    unint64_t v5 = __clz(v4);
    unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> v5;
    if (v5 == 61) {
      unint64_t v7 = 6;
    }
    else {
      unint64_t v7 = (0xFFFFFFFFFFFFFFFFLL >> v5) - (0x1FFFFFFFFFFFFFFFuLL >> v5);
    }
    a1[5] = v7;
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v9 = (char *)operator new(v8 + 16 * v6);
    *a1 = v9;
    a1[1] = &v9[v8];
    memset(v9, 128, v6 + 8);
    v9[v6] = -1;
    a1[5] = v7;
    a1[3] = v6;
  }
  a1[6] = &unk_20E1710;
  unint64_t v10 = *a2;
  a1[11] = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  if (v10)
  {
    unint64_t v11 = __clz(v10);
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> v11;
    if (v11 == 61) {
      unint64_t v13 = 6;
    }
    else {
      unint64_t v13 = (0xFFFFFFFFFFFFFFFFLL >> v11) - (0x1FFFFFFFFFFFFFFFuLL >> v11);
    }
    a1[11] = v13;
    unint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 16;
    char v15 = (char *)operator new(v14 + 16 * v12);
    a1[6] = v15;
    a1[7] = &v15[v14];
    memset(v15, 128, v12 + 8);
    v15[v12] = -1;
    a1[11] = v13;
    a1[9] = v12;
  }
  a1[12] = &unk_20E1710;
  unint64_t v16 = *a2;
  a1[17] = 0;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  if (v16)
  {
    unint64_t v17 = __clz(v16);
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> v17;
    if (v17 == 61) {
      unint64_t v19 = 6;
    }
    else {
      unint64_t v19 = (0xFFFFFFFFFFFFFFFFLL >> v17) - (0x1FFFFFFFFFFFFFFFuLL >> v17);
    }
    a1[17] = v19;
    unint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 16;
    long long v21 = (char *)operator new(v20 + 16 * v18);
    a1[12] = v21;
    a1[13] = &v21[v20];
    memset(v21, 128, v18 + 8);
    v21[v18] = -1;
    a1[17] = v19;
    a1[15] = v18;
  }
  a1[18] = &unk_20E1710;
  unint64_t v22 = *a2;
  a1[23] = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[19] = 0;
  if (v22)
  {
    unint64_t v23 = __clz(v22);
    unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> v23;
    if (v23 == 61) {
      unint64_t v25 = 6;
    }
    else {
      unint64_t v25 = (0xFFFFFFFFFFFFFFFFLL >> v23) - (0x1FFFFFFFFFFFFFFFuLL >> v23);
    }
    a1[23] = v25;
    unint64_t v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 16;
    char v27 = (char *)operator new(v26 + 16 * v24);
    a1[18] = v27;
    a1[19] = &v27[v26];
    memset(v27, 128, v24 + 8);
    v27[v24] = -1;
    a1[23] = v25;
    a1[21] = v24;
  }
  a1[24] = &unk_20E1710;
  unint64_t v28 = *a2;
  a1[29] = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = 0;
  if (v28)
  {
    unint64_t v29 = __clz(v28);
    unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> v29;
    if (v29 == 61) {
      unint64_t v31 = 6;
    }
    else {
      unint64_t v31 = (0xFFFFFFFFFFFFFFFFLL >> v29) - (0x1FFFFFFFFFFFFFFFuLL >> v29);
    }
    a1[29] = v31;
    unint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v33 = (char *)operator new(v32 + 16 * v30);
    a1[24] = v33;
    a1[25] = &v33[v32];
    memset(v33, 128, v30 + 8);
    v33[v30] = -1;
    a1[29] = v31;
    a1[27] = v30;
  }
  a1[30] = &unk_20E1710;
  unint64_t v34 = *a2;
  a1[35] = 0;
  a1[32] = 0;
  a1[33] = 0;
  a1[31] = 0;
  if (v34)
  {
    unint64_t v35 = __clz(v34);
    unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> v35;
    if (v35 == 61) {
      unint64_t v37 = 6;
    }
    else {
      unint64_t v37 = (0xFFFFFFFFFFFFFFFFLL >> v35) - (0x1FFFFFFFFFFFFFFFuLL >> v35);
    }
    a1[35] = v37;
    unint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v39 = (char *)operator new(v38 + 16 * v36);
    a1[30] = v39;
    a1[31] = &v39[v38];
    memset(v39, 128, v36 + 8);
    v39[v36] = -1;
    a1[35] = v37;
    a1[33] = v36;
  }
  unint64_t v40 = *a2;
  a1[41] = 0;
  a1[36] = &unk_20E1710;
  a1[37] = 0;
  a1[38] = 0;
  a1[39] = 0;
  if (v40)
  {
    unint64_t v41 = __clz(v40);
    unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> v41;
    if (v41 == 61) {
      unint64_t v43 = 6;
    }
    else {
      unint64_t v43 = (0xFFFFFFFFFFFFFFFFLL >> v41) - (0x1FFFFFFFFFFFFFFFuLL >> v41);
    }
    a1[41] = v43;
    unint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v45 = (char *)operator new(v44 + 16 * v42);
    a1[36] = v45;
    a1[37] = &v45[v44];
    memset(v45, 128, v42 + 8);
    v45[v42] = -1;
    a1[41] = v43;
    a1[39] = v42;
  }
  unint64_t v46 = *a2;
  a1[47] = 0;
  a1[42] = &unk_20E1710;
  a1[43] = 0;
  a1[44] = 0;
  a1[45] = 0;
  if (v46)
  {
    unint64_t v47 = __clz(v46);
    unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> v47;
    if (v47 == 61) {
      unint64_t v49 = 6;
    }
    else {
      unint64_t v49 = (0xFFFFFFFFFFFFFFFFLL >> v47) - (0x1FFFFFFFFFFFFFFFuLL >> v47);
    }
    a1[47] = v49;
    unint64_t v50 = (v48 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v51 = (char *)operator new(v50 + 16 * v48);
    a1[42] = v51;
    a1[43] = &v51[v50];
    memset(v51, 128, v48 + 8);
    v51[v48] = -1;
    a1[47] = v49;
    a1[45] = v48;
  }
  unint64_t v52 = *a2;
  a1[53] = 0;
  a1[48] = &unk_20E1710;
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  if (v52)
  {
    unint64_t v53 = __clz(v52);
    unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> v53;
    if (v53 == 61) {
      unint64_t v55 = 6;
    }
    else {
      unint64_t v55 = (0xFFFFFFFFFFFFFFFFLL >> v53) - (0x1FFFFFFFFFFFFFFFuLL >> v53);
    }
    a1[53] = v55;
    unint64_t v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v57 = (char *)operator new(v56 + 16 * v54);
    a1[48] = v57;
    a1[49] = &v57[v56];
    memset(v57, 128, v54 + 8);
    v57[v54] = -1;
    a1[53] = v55;
    a1[51] = v54;
  }
  unint64_t v58 = *a2;
  a1[59] = 0;
  a1[54] = &unk_20E1710;
  a1[55] = 0;
  a1[56] = 0;
  a1[57] = 0;
  if (v58)
  {
    unint64_t v59 = __clz(v58);
    unint64_t v60 = 0xFFFFFFFFFFFFFFFFLL >> v59;
    if (v59 == 61) {
      unint64_t v61 = 6;
    }
    else {
      unint64_t v61 = (0xFFFFFFFFFFFFFFFFLL >> v59) - (0x1FFFFFFFFFFFFFFFuLL >> v59);
    }
    a1[59] = v61;
    unint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v63 = (char *)operator new(v62 + 16 * v60);
    a1[54] = v63;
    a1[55] = &v63[v62];
    memset(v63, 128, v60 + 8);
    v63[v60] = -1;
    a1[59] = v61;
    a1[57] = v60;
  }
  unint64_t v64 = *a2;
  a1[65] = 0;
  a1[60] = &unk_20E1710;
  a1[61] = 0;
  a1[62] = 0;
  a1[63] = 0;
  if (v64)
  {
    unint64_t v65 = __clz(v64);
    unint64_t v66 = 0xFFFFFFFFFFFFFFFFLL >> v65;
    if (v65 == 61) {
      unint64_t v67 = 6;
    }
    else {
      unint64_t v67 = (0xFFFFFFFFFFFFFFFFLL >> v65) - (0x1FFFFFFFFFFFFFFFuLL >> v65);
    }
    a1[65] = v67;
    unint64_t v68 = (v66 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v69 = (char *)operator new(v68 + 16 * v66);
    a1[60] = v69;
    a1[61] = &v69[v68];
    memset(v69, 128, v66 + 8);
    v69[v66] = -1;
    a1[65] = v67;
    a1[63] = v66;
  }
  unint64_t v70 = *a2;
  a1[66] = &unk_20E1710;
  a1[71] = 0;
  a1[67] = 0;
  a1[69] = 0;
  a1[68] = 0;
  if (v70)
  {
    unint64_t v71 = __clz(v70);
    unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> v71;
    if (v71 == 61) {
      unint64_t v73 = 6;
    }
    else {
      unint64_t v73 = (0xFFFFFFFFFFFFFFFFLL >> v71) - (0x1FFFFFFFFFFFFFFFuLL >> v71);
    }
    a1[71] = v73;
    unint64_t v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 16;
    BOOL v75 = (char *)operator new(v74 + 16 * v72);
    a1[66] = v75;
    a1[67] = &v75[v74];
    memset(v75, 128, v72 + 8);
    v75[v72] = -1;
    a1[71] = v73;
    a1[69] = v72;
  }
  unint64_t v76 = *a2;
  a1[72] = &unk_20E1710;
  a1[77] = 0;
  a1[73] = 0;
  a1[75] = 0;
  a1[74] = 0;
  if (v76)
  {
    unint64_t v77 = __clz(v76);
    unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> v77;
    if (v77 == 61) {
      unint64_t v79 = 6;
    }
    else {
      unint64_t v79 = (0xFFFFFFFFFFFFFFFFLL >> v77) - (0x1FFFFFFFFFFFFFFFuLL >> v77);
    }
    a1[77] = v79;
    unint64_t v80 = (v78 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v81 = (char *)operator new(v80 + 16 * v78);
    a1[72] = v81;
    a1[73] = &v81[v80];
    memset(v81, 128, v78 + 8);
    v81[v78] = -1;
    a1[77] = v79;
    a1[75] = v78;
  }
  unint64_t v82 = *a2;
  a1[78] = &unk_20E1710;
  a1[83] = 0;
  a1[79] = 0;
  a1[81] = 0;
  a1[80] = 0;
  if (v82)
  {
    unint64_t v83 = __clz(v82);
    unint64_t v84 = 0xFFFFFFFFFFFFFFFFLL >> v83;
    if (v83 == 61) {
      unint64_t v85 = 6;
    }
    else {
      unint64_t v85 = (0xFFFFFFFFFFFFFFFFLL >> v83) - (0x1FFFFFFFFFFFFFFFuLL >> v83);
    }
    a1[83] = v85;
    unint64_t v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v87 = (char *)operator new(v86 + 16 * v84);
    a1[78] = v87;
    a1[79] = &v87[v86];
    memset(v87, 128, v84 + 8);
    v87[v84] = -1;
    a1[83] = v85;
    a1[81] = v84;
  }
  unint64_t v88 = *a2;
  a1[84] = &unk_20E1710;
  a1[89] = 0;
  a1[85] = 0;
  a1[87] = 0;
  a1[86] = 0;
  if (v88)
  {
    unint64_t v89 = __clz(v88);
    unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> v89;
    if (v89 == 61) {
      unint64_t v91 = 6;
    }
    else {
      unint64_t v91 = (0xFFFFFFFFFFFFFFFFLL >> v89) - (0x1FFFFFFFFFFFFFFFuLL >> v89);
    }
    a1[89] = v91;
    unint64_t v92 = (v90 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v93 = (char *)operator new(v92 + 16 * v90);
    a1[84] = v93;
    a1[85] = &v93[v92];
    memset(v93, 128, v90 + 8);
    v93[v90] = -1;
    a1[89] = v91;
    a1[87] = v90;
  }
  unint64_t v94 = *a2;
  a1[90] = &unk_20E1710;
  a1[95] = 0;
  a1[91] = 0;
  a1[93] = 0;
  a1[92] = 0;
  if (v94)
  {
    unint64_t v95 = __clz(v94);
    unint64_t v96 = 0xFFFFFFFFFFFFFFFFLL >> v95;
    if (v95 == 61) {
      unint64_t v97 = 6;
    }
    else {
      unint64_t v97 = (0xFFFFFFFFFFFFFFFFLL >> v95) - (0x1FFFFFFFFFFFFFFFuLL >> v95);
    }
    a1[95] = v97;
    unint64_t v98 = (v96 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v99 = (char *)operator new(v98 + 16 * v96);
    a1[90] = v99;
    a1[91] = &v99[v98];
    memset(v99, 128, v96 + 8);
    v99[v96] = -1;
    a1[95] = v97;
    a1[93] = v96;
  }
  return a1;
}

void sub_F9E3F0(_Unwind_Exception *a1)
{
  sub_20B18D8(v2, v1);
  _Unwind_Resume(a1);
}

void sub_F9E408(void **a1, unint64_t a2)
{
  unint64_t v4 = (char *)a1[1];
  unint64_t v5 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      unint64_t v11 = &v4[24 * a2];
      unint64_t v12 = 24 * a2 - 24;
      if (v12 < 0x18) {
        goto LABEL_37;
      }
      unint64_t v13 = v12 / 0x18 + 1;
      unint64_t v14 = &v4[24 * (v13 & 0x1FFFFFFFFFFFFFFELL)];
      char v15 = v4 + 32;
      uint64_t v16 = v13 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v15 - 2) = xmmword_20E8160;
        *((void *)v15 - 2) = 0;
        *((void *)v15 - 1) = 0;
        *char v15 = xmmword_20E7B70;
        v15 += 3;
        v16 -= 2;
      }
      while (v16);
      unint64_t v4 = v14;
      if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_37:
        do
        {
          *(_OWORD *)unint64_t v4 = xmmword_20E8160;
          *((void *)v4 + 2) = 0;
          v4 += 24;
        }
        while (v4 != v11);
      }
      unint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_2E00();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        sub_188D718();
      }
      unint64_t v10 = (char *)operator new(24 * v9);
    }
    else
    {
      unint64_t v10 = 0;
    }
    unint64_t v17 = &v10[24 * v6];
    unint64_t v18 = &v17[24 * a2];
    unint64_t v19 = 24 * a2 - 24;
    unint64_t v20 = v17;
    if (v19 < 0x18) {
      goto LABEL_38;
    }
    unint64_t v21 = v19 / 0x18 + 1;
    unint64_t v20 = &v17[24 * (v21 & 0x1FFFFFFFFFFFFFFELL)];
    unint64_t v22 = &v10[24 * v6 + 32];
    uint64_t v23 = v21 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      *((_OWORD *)v22 - 2) = xmmword_20E8160;
      *((void *)v22 - 2) = 0;
      *((void *)v22 - 1) = 0;
      *(_OWORD *)unint64_t v22 = xmmword_20E7B70;
      v22 += 48;
      v23 -= 2;
    }
    while (v23);
    if (v21 != (v21 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_38:
      do
      {
        *(_OWORD *)unint64_t v20 = xmmword_20E8160;
        *((void *)v20 + 2) = 0;
        v20 += 24;
      }
      while (v20 != v18);
    }
    unint64_t v24 = &v10[24 * v9];
    unint64_t v26 = (char *)*a1;
    unint64_t v25 = (char *)a1[1];
    if (v25 != *a1)
    {
      do
      {
        long long v27 = *(_OWORD *)(v25 - 24);
        *((void *)v17 - 1) = *((void *)v25 - 1);
        *(_OWORD *)(v17 - 24) = v27;
        v17 -= 24;
        v25 -= 24;
      }
      while (v25 != v26);
      unint64_t v25 = (char *)*a1;
    }
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v24;
    if (v25)
    {
      operator delete(v25);
    }
  }
}

uint64_t sub_F9E678@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  unsigned int v5 = a2[1];
  unint64_t v6 = 0x2127599BF4325C37
     * ((((v4 << 32) + (int)(16 * v5)) | (v5 >> 29) & 2 | (v5 >> 31) | (v5 >> 27) & 4 | (v5 >> 25) & 8) ^ ((unint64_t)((v4 << 32) + (int)(16 * v5)) >> 23));
  unint64_t v7 = (v6 ^ ~(v6 >> 47)) + ((v6 ^ (v6 >> 47)) << 21);
  unint64_t v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
  unint64_t v9 = 2147483649u * (v8 ^ (v8 >> 28));
  unint64_t v10 = (void *)(result
                 + 48
                 * (((((unsigned __int16)(v8 ^ (v8 >> 28)) >> 8) ^ ((-2147483647
                                                                                    * (v8 ^ (v8 >> 28))) >> 16)) ^ ((-2147483647 * (v8 ^ (v8 >> 28))) >> 24)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = *v10;
  uint64_t v14 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v15 = v11 & v12;
    uint64_t v16 = *(void *)(v13 + v15);
    unint64_t v17 = ((v16 ^ v14) - 0x101010101010101) & ~(v16 ^ v14) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_8:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      a3[3] = v10;
      a3[4] = 0;
      return result;
    }
    v3 += 8;
    unint64_t v11 = v3 + v15;
  }
  while (1)
  {
    unint64_t v19 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v12;
    uint64_t v18 = v10[1];
    unint64_t v20 = (_DWORD *)(v18 + 16 * v19);
    if (*v20 == v4 && v20[1] == v5) {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_8;
    }
  }
  BOOL v22 = v12 == v19;
  uint64_t v23 = v13 + v19;
  uint64_t v24 = v13 + v12;
  uint64_t v25 = result + 768;
  if (v12 == v19)
  {
    uint64_t v23 = 0;
    uint64_t v25 = 0;
    unint64_t v26 = 0;
  }
  else
  {
    unint64_t v26 = v10;
  }
  if (v22) {
    long long v27 = a3;
  }
  else {
    long long v27 = (void *)(v18 + 16 * v19);
  }
  if (v22) {
    uint64_t v24 = 0;
  }
  *a3 = v26;
  a3[1] = v25;
  a3[2] = v23;
  a3[3] = v27;
  a3[4] = v24;
  return result;
}

unint64_t sub_F9E7F0(uint64_t a1, unsigned int *a2, int *a3)
{
  unint64_t v7 = *(char **)(a1 + 88);
  unint64_t v6 = *(char **)(a1 + 96);
  if (v7 != v6)
  {
    unint64_t v8 = v6 - v7 - 24;
    unint64_t v9 = *(char **)(a1 + 88);
    if (v8 < 0x18) {
      goto LABEL_28;
    }
    unint64_t v10 = v8 / 0x18 + 1;
    unint64_t v9 = &v7[24 * (v10 & 0x1FFFFFFFFFFFFFFELL)];
    unint64_t v11 = (uint64_t *)(v7 + 24);
    uint64_t v12 = v10 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      uint64_t v13 = *v11;
      *(v11 - 2) = *(v11 - 3);
      v11[1] = v13;
      v11 += 6;
      v12 -= 2;
    }
    while (v12);
    if (v10 != (v10 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_28:
      do
      {
        *((void *)v9 + 1) = *(void *)v9;
        v9 += 24;
      }
      while (v9 != v6);
    }
  }
  uint64_t v14 = *(uint64_t **)a1;
  LODWORD(v24) = 1;
  BOOL v15 = sub_F963A0(*v14, *a2 | ((unint64_t)(a2[1] & 0xFFFFFFF) << 32), &v24);
  int v16 = *a3;
  unsigned int v17 = v16 + 1;
  unint64_t result = sub_F78BBC(*(uint64_t **)a1);
  if (v16 + 1 > result) {
    int v19 = v16 + 1;
  }
  else {
    int v19 = result;
  }
  if (v17 < result)
  {
    if (v15)
    {
      do
      {
        unsigned int v25 = v17;
        unint64_t result = sub_F968AC(**(void **)a1, *a2 | ((unint64_t)(a2[1] & 0xFFFFFFF) << 32), (a2[1] >> 28) & 1, &v25);
        unint64_t v24 = result;
        if (result) {
          BOOL v20 = result > 0xFFFFFFFEFFFFFFFFLL;
        }
        else {
          BOOL v20 = 1;
        }
        if (!v20)
        {
          sub_29603C((void **)(*(void *)(a1 + 88) + 24 * v25), &v24);
          unint64_t v21 = (void **)(*(void *)(a1 + 88) + 24 * v25);
          unint64_t v23 = sub_F968AC(**(void **)a1, *a2 | ((unint64_t)(a2[1] & 0xFFFFFFF) << 32), (a2[1] & 0x10000000) == 0, &v25);
          unint64_t result = (unint64_t)sub_29603C(v21, &v23);
        }
        ++v17;
      }
      while (v19 != v17);
    }
    else
    {
      do
      {
        unsigned int v25 = v17;
        unint64_t result = sub_F968AC(**(void **)a1, *a2 | ((unint64_t)(a2[1] & 0xFFFFFFF) << 32), (a2[1] >> 28) & 1, &v25);
        unint64_t v24 = result;
        if (result) {
          BOOL v22 = result > 0xFFFFFFFEFFFFFFFFLL;
        }
        else {
          BOOL v22 = 1;
        }
        if (!v22) {
          unint64_t result = (unint64_t)sub_29603C((void **)(*(void *)(a1 + 88) + 24 * v25), &v24);
        }
        ++v17;
      }
      while (v19 != v17);
    }
  }
  return result;
}

void sub_F9EA08(uint64_t **a1, void *a2)
{
  if (*a2 == a2[1]) {
    return;
  }
  char v200 = 0;
  uint64_t v198 = 0x3E4CCCCD3F000000;
  int v201 = 0;
  int v202 = 0;
  int v203 = -1;
  uint64_t v204 = 0;
  uint64_t v205 = 0;
  long long v197 = xmmword_20B98A0;
  __int16 v199 = 256;
  long long v206 = xmmword_20E2130;
  v207 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  int64x2_t v3 = vdupq_n_s64(0xFFFFFFFF00000000);
  uint64_t v4 = (int64x2_t *)((char *)v207 + 16);
  uint64_t v5 = 32;
  do
  {
    v4[-1] = v3;
    int64x2_t *v4 = v3;
    v4 += 2;
    v5 -= 4;
  }
  while (v5);
  v195 = 0;
  long long v196 = 0uLL;
  v193 = 0;
  long long v194 = 0uLL;
  __p = 0;
  v192 = 0;
  uint64_t v6 = (char *)a1[12] - (char *)a1[11];
  if (!v6) {
    goto LABEL_235;
  }
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  unint64_t v10 = 0;
  unint64_t v180 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  v187 = a1;
  do
  {
    if (v10 < (uint64_t)(a2[1] - *a2) >> 2)
    {
      int v182 = *(_DWORD *)(*a2 + 4 * v10);
      if (v182)
      {
        uint64_t v12 = a1[11];
        unint64_t v11 = a1[12];
        uint64_t v13 = (char **)&v12[3 * v10];
        if (&v195 != (void **)v13)
        {
          sub_326C0(&v195, *v13, v13[1], (v13[1] - *v13) >> 3);
          unint64_t v9 = (int8x16_t *)v195;
          unint64_t v8 = (int8x16_t *)v196;
        }
        unint64_t v14 = 126 - 2 * __clz(((char *)v8 - (char *)v9) >> 3);
        if (v8 == v9) {
          uint64_t v15 = 0;
        }
        else {
          uint64_t v15 = v14;
        }
        sub_F98280(v9, v8, (uint64_t)&v208, v15, 1);
        int v16 = (int *)v195;
        if (v195 == (void *)v196)
        {
          long long v27 = (int8x16_t *)v195;
          unint64_t v9 = (int8x16_t *)v195;
          goto LABEL_37;
        }
        unint64_t v9 = (int8x16_t *)v196;
        unsigned int v17 = (int8x16_t *)v195;
        do
        {
          uint64_t v18 = v16 + 2;
          if (v16 + 2 == (int *)v196) {
            goto LABEL_34;
          }
          int v19 = *v16;
          int v20 = v16[1];
          LODWORD(v21) = v16[2];
          int v22 = v16[3];
          BOOL v23 = v19 == v21 && v20 == v22;
          int v16 = v18;
        }
        while (!v23);
        unint64_t v24 = (int8x16_t *)(v18 + 2);
        unsigned int v25 = v18 - 2;
        if (v24 == (int8x16_t *)v196)
        {
          unint64_t v26 = (int8x16_t *)(v25 + 2);
          if (v25 + 2 != (_DWORD *)v196) {
            goto LABEL_24;
          }
        }
        else
        {
          do
          {
            if (v21 != v24->i32[0] || v25[1] != v24->i32[1])
            {
              uint64_t v21 = v24->i64[0];
              *((void *)v25 + 1) = v24->i64[0];
              v25 += 2;
            }
            unint64_t v24 = (int8x16_t *)((char *)v24 + 8);
          }
          while (v24 != v9);
          unint64_t v9 = (int8x16_t *)v196;
          unint64_t v26 = (int8x16_t *)(v25 + 2);
          if (v25 + 2 != (_DWORD *)v196)
          {
LABEL_24:
            unint64_t v9 = v26;
            *(void *)&long long v196 = v26;
            if (v17 == v26)
            {
LABEL_25:
              long long v27 = v9;
LABEL_37:
              int v183 = 0;
              uint64_t v188 = -1 - 0x5555555555555555 * (v11 - v12);
              unint64_t v189 = v10;
              unint64_t v186 = v10 + 1;
              unint64_t v8 = v27;
LABEL_40:
              v184 = v8;
              if (v9 == v8) {
                goto LABEL_39;
              }
LABEL_43:
              uint64_t v31 = **a1;
              v191 = __p;
              v185 = v9;
              unsigned int v32 = v9->i32[0];
              int v210 = 1;
              v211[0] = v32;
              v208 = &v210;
              v209 = v211;
              unint64_t v33 = *(void *)(v31 + 3856) + 1;
              *(void *)(v31 + 3856) = v33;
              if (!*(void *)v31) {
                goto LABEL_99;
              }
              uint64_t v34 = v31 + 16;
              if (*(_DWORD *)(v31 + 688) == v32)
              {
                unsigned int v35 = 28;
              }
              else if (*(_DWORD *)(v31 + 712) == v32)
              {
                unsigned int v35 = 29;
              }
              else if (*(_DWORD *)(v31 + 736) == v32)
              {
                unsigned int v35 = 30;
              }
              else
              {
                if (*(_DWORD *)(v31 + 760) != v32)
                {
                  unint64_t v69 = *(void *)(v31 + 744);
                  unint64_t v70 = *(void *)(v31 + 720);
                  unint64_t v71 = *(void *)(v31 + 696);
                  unint64_t v72 = *(void *)(v31 + 768);
                  unint64_t v37 = (unsigned int *)sub_2AB884(*(void *)v31, 7, v32, 1);
                  if (v71 >= v33) {
                    unint64_t v73 = v33;
                  }
                  else {
                    unint64_t v73 = v71;
                  }
                  int v74 = 28;
                  if (v71 >= v33) {
                    int v74 = 0;
                  }
                  if (v70 < v73)
                  {
                    unint64_t v73 = v70;
                    int v74 = 29;
                  }
                  if (v69 < v73)
                  {
                    int v74 = 30;
                    unint64_t v73 = v69;
                  }
                  BOOL v75 = v72 >= v73;
                  unsigned int v76 = 31;
                  if (v75) {
                    unsigned int v76 = v74;
                  }
                  uint64_t v77 = v34 + 24 * v76;
                  *(_DWORD *)uint64_t v77 = v211[0];
                  *(void *)(v77 + 8) = *(void *)(v31 + 3856);
                  *(void *)(v77 + 16) = v37;
                  a1 = v187;
                  if (v37)
                  {
LABEL_53:
                    unint64_t v38 = (int *)((char *)v37 + *v37);
                    uint64_t v39 = (unsigned __int16 *)((char *)v38 - *v38);
                    if (*v39 >= 9u)
                    {
                      uint64_t v40 = v39[4];
                      if (v40)
                      {
                        unint64_t v41 = (int *)sub_F930D4((unsigned int *)((char *)v38 + v40 + *(unsigned int *)((char *)v38 + v40)), v185->u32[1]);
                        unint64_t v42 = (unsigned __int16 *)((char *)v41 - *v41);
                        a1 = v187;
                        if (*v42 >= 9u)
                        {
                          uint64_t v43 = v42[4];
                          if (v43)
                          {
                            unint64_t v44 = (unsigned int *)((char *)v41 + v43);
                            uint64_t v45 = *v44;
                            unint64_t v47 = (uint64_t *)((char *)v44 + v45 + 4);
                            uint64_t v46 = *(unsigned int *)((char *)v44 + v45);
                            if (v46)
                            {
                              unint64_t v48 = &v47[v46];
                              unint64_t v50 = __p;
                              unint64_t v49 = v192;
                              while (1)
                              {
                                uint64_t v52 = *v47;
                                if (v50 < v49)
                                {
                                  *(void *)unint64_t v50 = v52;
                                  uint64_t v51 = v50 + 8;
                                }
                                else
                                {
                                  unint64_t v53 = __p;
                                  uint64_t v54 = (v50 - __p) >> 3;
                                  unint64_t v55 = v54 + 1;
                                  if ((unint64_t)(v54 + 1) >> 61) {
                                    sub_2E00();
                                  }
                                  if ((v49 - __p) >> 2 > v55) {
                                    unint64_t v55 = (v49 - __p) >> 2;
                                  }
                                  if ((unint64_t)(v49 - __p) >= 0x7FFFFFFFFFFFFFF8) {
                                    unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
                                  }
                                  else {
                                    unint64_t v56 = v55;
                                  }
                                  if (v56 >> 61) {
                                    sub_188D718();
                                  }
                                  uint64_t v57 = operator new(8 * v56);
                                  unint64_t v58 = &v57[8 * v54];
                                  *(void *)unint64_t v58 = v52;
                                  uint64_t v51 = v58 + 8;
                                  if (v50 != __p)
                                  {
                                    unint64_t v59 = v50 - 8 - __p;
                                    if (v59 < 0x168
                                      || (&v57[v50 - __p - 8 - (v59 & 0xFFFFFFFFFFFFFFF8)] <= &v57[v50 - __p - 8]
                                        ? (BOOL v60 = &v50[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] > v50 - 8)
                                        : (BOOL v60 = 1),
                                          v60 || (unint64_t)(__p - v57) < 0x20))
                                    {
                                      unint64_t v61 = v50;
                                      a1 = v187;
                                      goto LABEL_77;
                                    }
                                    uint64_t v63 = (v59 >> 3) + 1;
                                    uint64_t v64 = 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
                                    unint64_t v61 = &v50[-v64];
                                    v58 -= v64;
                                    unint64_t v65 = &v57[8 * v54 - 16];
                                    unint64_t v66 = v50 - 16;
                                    uint64_t v67 = v63 & 0x3FFFFFFFFFFFFFFCLL;
                                    a1 = v187;
                                    do
                                    {
                                      long long v68 = *(_OWORD *)v66;
                                      *(v65 - 1) = *((_OWORD *)v66 - 1);
                                      *unint64_t v65 = v68;
                                      v65 -= 2;
                                      v66 -= 32;
                                      v67 -= 4;
                                    }
                                    while (v67);
                                    if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL))
                                    {
                                      do
                                      {
LABEL_77:
                                        uint64_t v62 = *((void *)v61 - 1);
                                        v61 -= 8;
                                        *((void *)v58 - 1) = v62;
                                        v58 -= 8;
                                      }
                                      while (v61 != __p);
                                    }
                                    unint64_t v49 = &v57[8 * v56];
                                    __p = v58;
                                    v192 = v49;
                                    if (!v53) {
                                      goto LABEL_60;
                                    }
LABEL_81:
                                    operator delete(v53);
                                    goto LABEL_60;
                                  }
                                  a1 = v187;
                                  unint64_t v49 = &v57[8 * v56];
                                  __p = &v57[8 * v54];
                                  v192 = v49;
                                  if (v53) {
                                    goto LABEL_81;
                                  }
                                }
LABEL_60:
                                v191 = v51;
                                ++v47;
                                unint64_t v50 = v51;
                                if (v47 == v48) {
                                  goto LABEL_100;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    goto LABEL_100;
                  }
LABEL_99:
                  sub_F933C8(&v208);
                  a1 = v187;
LABEL_100:
                  for (unint64_t i = __p; ; i += 8)
                  {
                    if (i == v191)
                    {
                      unint64_t v9 = (int8x16_t *)&v185->u64[1];
                      if (&v185->u64[1] != (unint64_t *)v184) {
                        goto LABEL_43;
                      }
                      unint64_t v8 = (int8x16_t *)v195;
LABEL_39:
                      unint64_t v7 = v8;
                      unint64_t v9 = v193;
                      uint64_t v30 = *((void *)&v196 + 1);
                      long long v196 = v194;
                      *((void *)&v194 + 1) = v30;
                      v195 = v193;
                      v193 = v8;
                      *(void *)&long long v194 = v8;
                      unint64_t v8 = (int8x16_t *)v196;
                      if (++v183 == v182) {
                        goto LABEL_6;
                      }
                      goto LABEL_40;
                    }
                    if (v205 != v204)
                    {
                      uint64_t v80 = v206 - 1;
                      uint64_t v81 = *(void *)i;
                      unint64_t v82 = __ROR8__(*(void *)i, 32);
                      unint64_t v83 = 0xC4CEB9FE1A85EC53
                          * ((0xFF51AFD7ED558CCDLL * (v82 ^ (v82 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v82 ^ (v82 >> 33))) >> 33));
                      uint64_t v84 = (v83 ^ (v83 >> 33)) & (v206 - 1);
                      unint64_t v85 = (unsigned int *)((char *)v207 + 8 * v84);
                      unsigned int v87 = *v85;
                      unsigned int v86 = v85[1];
                      if (DWORD2(v206) != *v85 || HIDWORD(v206) != v86)
                      {
                        if (v204)
                        {
                          uint64_t v89 = 1;
                          while (v202 == v87 && v203 == v86 || __PAIR64__(v86, v87) != v81)
                          {
                            uint64_t v84 = (v84 + v89) & v80;
                            unint64_t v90 = (unsigned int *)((char *)v207 + 8 * v84);
                            unsigned int v87 = *v90;
                            unsigned int v86 = v90[1];
                            ++v89;
                            if (DWORD2(v206) == v87 && HIDWORD(v206) == v86) {
                              goto LABEL_128;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v92 = 1;
                          while (__PAIR64__(v86, v87) != v81)
                          {
                            uint64_t v84 = (v84 + v92) & v80;
                            uint64_t v93 = (unsigned int *)((char *)v207 + 8 * v84);
                            unsigned int v87 = *v93;
                            unsigned int v86 = v93[1];
                            ++v92;
                            if (DWORD2(v206) == v87 && HIDWORD(v206) == v86) {
                              goto LABEL_128;
                            }
                          }
                        }
                        if (v84 != -1 && (char *)v207 + 8 * v84 != (char *)v207 + 8 * (void)v206) {
                          continue;
                        }
                      }
                    }
LABEL_128:
                    unint64_t v95 = (int8x16_t *)v194;
                    if ((unint64_t)v194 < *((void *)&v194 + 1))
                    {
                      *(void *)long long v194 = *(void *)i;
                      uint64_t v96 = v194 + 8;
                      goto LABEL_150;
                    }
                    uint64_t v97 = (uint64_t)(v194 - (void)v193) >> 3;
                    unint64_t v98 = v97 + 1;
                    if ((unint64_t)(v97 + 1) >> 61) {
                      goto LABEL_241;
                    }
                    uint64_t v99 = *((void *)&v194 + 1) - (void)v193;
                    if ((uint64_t)(*((void *)&v194 + 1) - (void)v193) >> 2 > v98) {
                      unint64_t v98 = v99 >> 2;
                    }
                    unint64_t v100 = (unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v98;
                    if (v100) {
                      break;
                    }
                    unint64_t v101 = 0;
                    uint64_t v102 = (int8x16_t *)(8 * v97);
                    *(void *)(8 * v97) = *(void *)i;
                    uint64_t v96 = 8 * v97 + 8;
                    if ((int8x16_t *)v194 != v193) {
                      goto LABEL_141;
                    }
LABEL_148:
                    v193 = v102;
                    *((void *)&v194 + 1) = &v101[8 * v100];
                    if (v95) {
                      operator delete(v95);
                    }
LABEL_150:
                    *(void *)&long long v194 = v96;
                    sub_F94B1C((uint64_t)&v197, 1);
                    sub_F94DF0((int32x2_t *)&v197, i, (uint64_t)&v208);
                    uint64_t v112 = (char **)&a1[11][3 * v10];
                    v114 = v112[1];
                    unint64_t v113 = (unint64_t)v112[2];
                    if ((unint64_t)v114 < v113)
                    {
                      *(void *)v114 = *(void *)i;
                      uint64_t v115 = (uint64_t)(v114 + 8);
                      goto LABEL_173;
                    }
                    v116 = *v112;
                    uint64_t v117 = v114 - *v112;
                    uint64_t v118 = v117 >> 3;
                    unint64_t v119 = (v117 >> 3) + 1;
                    if (v119 >> 61) {
LABEL_241:
                    }
                      sub_2E00();
                    uint64_t v120 = v113 - (void)v116;
                    if (v120 >> 2 > v119) {
                      unint64_t v119 = v120 >> 2;
                    }
                    if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v121 = v119;
                    }
                    if (v121)
                    {
                      if (v121 >> 61) {
LABEL_240:
                      }
                        sub_188D718();
                      v122 = operator new(8 * v121);
                      v123 = &v122[8 * v118];
                      *(void *)v123 = *(void *)i;
                      uint64_t v115 = (uint64_t)(v123 + 8);
                      if (v114 != v116)
                      {
LABEL_161:
                        unint64_t v124 = v114 - 8 - v116;
                        if (v124 < 0x58)
                        {
                          unint64_t v10 = v189;
                          goto LABEL_170;
                        }
                        unint64_t v125 = v114 - &v122[v117];
                        unint64_t v10 = v189;
                        if (v125 < 0x20) {
                          goto LABEL_248;
                        }
                        uint64_t v126 = (v124 >> 3) + 1;
                        uint64_t v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
                        v128 = &v114[-v127];
                        v123 -= v127;
                        v129 = &v122[8 * v118 - 16];
                        v130 = v114 - 16;
                        uint64_t v131 = v126 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          long long v132 = *(_OWORD *)v130;
                          *(v129 - 1) = *((_OWORD *)v130 - 1);
                          _OWORD *v129 = v132;
                          v129 -= 2;
                          v130 -= 32;
                          v131 -= 4;
                        }
                        while (v131);
                        v114 = v128;
                        if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_248:
                          do
                          {
LABEL_170:
                            uint64_t v133 = *((void *)v114 - 1);
                            v114 -= 8;
                            *((void *)v123 - 1) = v133;
                            v123 -= 8;
                          }
                          while (v114 != v116);
                        }
                        v114 = *v112;
                        *uint64_t v112 = v123;
                        v112[1] = (char *)v115;
                        v112[2] = &v122[8 * v121];
                        if (!v114) {
                          goto LABEL_173;
                        }
LABEL_172:
                        operator delete(v114);
                        goto LABEL_173;
                      }
                    }
                    else
                    {
                      v122 = 0;
                      v123 = (char *)(8 * v118);
                      *(void *)(8 * v118) = *(void *)i;
                      uint64_t v115 = 8 * v118 + 8;
                      if (v114 != v116) {
                        goto LABEL_161;
                      }
                    }
                    unint64_t v10 = v189;
                    *uint64_t v112 = v123;
                    v112[1] = (char *)v115;
                    v112[2] = &v122[8 * v121];
                    if (v114) {
                      goto LABEL_172;
                    }
LABEL_173:
                    v112[1] = (char *)v115;
                    if (v10 != v188)
                    {
                      v134 = a1[11];
                      uint64_t v135 = **a1;
                      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F6898, memory_order_acquire) & 1) == 0
                        && __cxa_guard_acquire(&qword_24F6898))
                      {
                        qword_24F6890 = 1;
                        __cxa_guard_release(&qword_24F6898);
                      }
                      unsigned int v136 = *(_DWORD *)i;
                      if (*(void *)i == qword_24F6890) {
                        goto LABEL_191;
                      }
                      int v210 = 1;
                      v211[0] = v136;
                      v208 = &v210;
                      v209 = v211;
                      unint64_t v137 = *(void *)(v135 + 3856) + 1;
                      *(void *)(v135 + 3856) = v137;
                      if (*(void *)v135)
                      {
                        uint64_t v138 = v135 + 16;
                        if (*(_DWORD *)(v135 + 688) == v136)
                        {
                          unsigned int v139 = 28;
                          goto LABEL_185;
                        }
                        if (*(_DWORD *)(v135 + 712) == v136)
                        {
                          unsigned int v139 = 29;
                          goto LABEL_185;
                        }
                        if (*(_DWORD *)(v135 + 736) == v136)
                        {
                          unsigned int v139 = 30;
                          goto LABEL_185;
                        }
                        if (*(_DWORD *)(v135 + 760) == v136)
                        {
                          unsigned int v139 = 31;
LABEL_185:
                          ++*(void *)(v135 + 3864);
                          uint64_t v140 = v138 + 24 * v139;
                          *(void *)(v140 + 8) = v137;
                          v141 = *(unsigned int **)(v140 + 16);
                          if (v141)
                          {
LABEL_186:
                            v142 = (int *)((char *)v141 + *v141);
                            v143 = (unsigned __int16 *)((char *)v142 - *v142);
                            if (*v143 < 9u) {
                              goto LABEL_191;
                            }
                            uint64_t v144 = v143[4];
                            if (!v144) {
                              goto LABEL_191;
                            }
                            v145 = (int *)sub_F930D4((unsigned int *)((char *)v142 + v144+ *(unsigned int *)((char *)v142 + v144)), *((_DWORD *)i + 1));
                            v146 = (unsigned __int16 *)((char *)v145 - *v145);
                            if (*v146 >= 0xBu)
                            {
                              unsigned __int16 v147 = v146[5];
                              a1 = v187;
                              if (v147)
                              {
                                uint64_t v149 = *(void *)((char *)v145 + v147);
                                unint64_t v148 = v149 & 0xFFFFFFFF00000000;
                                uint64_t v149 = v149;
                                goto LABEL_207;
                              }
LABEL_191:
                              uint64_t v149 = 0;
                              unint64_t v148 = 0xFFFFFFFF00000000;
LABEL_207:
                              v158 = (char **)&v134[3 * v186];
                              unint64_t v159 = v149 | v148;
                              v161 = v158[1];
                              unint64_t v160 = (unint64_t)v158[2];
                              if ((unint64_t)v161 < v160)
                              {
                                *(void *)v161 = v159;
                                uint64_t v79 = (uint64_t)(v161 + 8);
                                unint64_t v10 = v189;
                                goto LABEL_102;
                              }
                              v162 = *v158;
                              uint64_t v163 = v161 - *v158;
                              uint64_t v164 = v163 >> 3;
                              unint64_t v165 = (v163 >> 3) + 1;
                              if (v165 >> 61) {
                                sub_2E00();
                              }
                              uint64_t v166 = v160 - (void)v162;
                              if (v166 >> 2 > v165) {
                                unint64_t v165 = v166 >> 2;
                              }
                              if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFF8) {
                                unint64_t v167 = 0x1FFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v167 = v165;
                              }
                              if (v167)
                              {
                                if (v167 >> 61) {
                                  sub_188D718();
                                }
                                v168 = operator new(8 * v167);
                                v169 = &v168[8 * v164];
                                *(void *)v169 = v159;
                                uint64_t v79 = (uint64_t)(v169 + 8);
                                if (v161 != v162)
                                {
LABEL_217:
                                  unint64_t v170 = v161 - 8 - v162;
                                  unint64_t v10 = v189;
                                  if (v170 < 0x58)
                                  {
                                    a1 = v187;
                                    goto LABEL_226;
                                  }
                                  unint64_t v171 = v161 - &v168[v163];
                                  a1 = v187;
                                  if (v171 < 0x20) {
                                    goto LABEL_249;
                                  }
                                  uint64_t v172 = (v170 >> 3) + 1;
                                  uint64_t v173 = 8 * (v172 & 0x3FFFFFFFFFFFFFFCLL);
                                  v174 = &v161[-v173];
                                  v169 -= v173;
                                  v175 = &v168[8 * v164 - 16];
                                  v176 = v161 - 16;
                                  uint64_t v177 = v172 & 0x3FFFFFFFFFFFFFFCLL;
                                  do
                                  {
                                    long long v178 = *(_OWORD *)v176;
                                    *(v175 - 1) = *((_OWORD *)v176 - 1);
                                    _OWORD *v175 = v178;
                                    v175 -= 2;
                                    v176 -= 32;
                                    v177 -= 4;
                                  }
                                  while (v177);
                                  v161 = v174;
                                  if (v172 != (v172 & 0x3FFFFFFFFFFFFFFCLL))
                                  {
LABEL_249:
                                    do
                                    {
LABEL_226:
                                      uint64_t v179 = *((void *)v161 - 1);
                                      v161 -= 8;
                                      *((void *)v169 - 1) = v179;
                                      v169 -= 8;
                                    }
                                    while (v161 != v162);
                                  }
                                  v161 = *v158;
                                  *v158 = v169;
                                  v158[1] = (char *)v79;
                                  v158[2] = &v168[8 * v167];
                                  if (v161) {
LABEL_228:
                                  }
                                    operator delete(v161);
LABEL_102:
                                  v158[1] = (char *)v79;
                                  continue;
                                }
                              }
                              else
                              {
                                v168 = 0;
                                v169 = (char *)(8 * v164);
                                *(void *)(8 * v164) = v159;
                                uint64_t v79 = 8 * v164 + 8;
                                if (v161 != v162) {
                                  goto LABEL_217;
                                }
                              }
                              a1 = v187;
                              unint64_t v10 = v189;
                              *v158 = v169;
                              v158[1] = (char *)v79;
                              v158[2] = &v168[8 * v167];
                              if (v161) {
                                goto LABEL_228;
                              }
                              goto LABEL_102;
                            }
LABEL_206:
                            uint64_t v149 = 0;
                            unint64_t v148 = 0xFFFFFFFF00000000;
                            a1 = v187;
                            goto LABEL_207;
                          }
                        }
                        else
                        {
                          unint64_t v150 = *(void *)(v135 + 744);
                          unint64_t v151 = *(void *)(v135 + 720);
                          unint64_t v152 = *(void *)(v135 + 696);
                          unint64_t v153 = *(void *)(v135 + 768);
                          v141 = (unsigned int *)sub_2AB884(*(void *)v135, 7, v136, 1);
                          if (v152 >= v137) {
                            unint64_t v154 = v137;
                          }
                          else {
                            unint64_t v154 = v152;
                          }
                          int v155 = 28;
                          if (v152 >= v137) {
                            int v155 = 0;
                          }
                          if (v151 < v154)
                          {
                            unint64_t v154 = v151;
                            int v155 = 29;
                          }
                          if (v150 < v154)
                          {
                            int v155 = 30;
                            unint64_t v154 = v150;
                          }
                          BOOL v75 = v153 >= v154;
                          unsigned int v156 = 31;
                          if (v75) {
                            unsigned int v156 = v155;
                          }
                          uint64_t v157 = v138 + 24 * v156;
                          *(_DWORD *)uint64_t v157 = v211[0];
                          *(void *)(v157 + 8) = *(void *)(v135 + 3856);
                          *(void *)(v157 + 16) = v141;
                          a1 = v187;
                          if (v141) {
                            goto LABEL_186;
                          }
                        }
                      }
                      sub_F933C8(&v208);
                      goto LABEL_206;
                    }
                  }
                  if (v100 >> 61) {
                    goto LABEL_240;
                  }
                  unint64_t v101 = operator new(8 * v100);
                  unint64_t v10 = v189;
                  uint64_t v102 = (int8x16_t *)&v101[8 * v97];
                  v102->i64[0] = *(void *)i;
                  uint64_t v96 = (uint64_t)&v102->i64[1];
                  if ((int8x16_t *)v194 == v193) {
                    goto LABEL_148;
                  }
LABEL_141:
                  unint64_t v103 = v194 - 8 - (void)v193;
                  if (v103 < 0x58) {
                    goto LABEL_250;
                  }
                  if ((unint64_t)((char *)v193 - v101) < 0x20) {
                    goto LABEL_250;
                  }
                  uint64_t v104 = (v103 >> 3) + 1;
                  uint64_t v105 = 8 * (v104 & 0x3FFFFFFFFFFFFFFCLL);
                  uint64_t v106 = (int8x16_t *)(v194 - v105);
                  uint64_t v102 = (int8x16_t *)((char *)v102 - v105);
                  uint64_t v107 = &v101[8 * v97 - 16];
                  uint64_t v108 = (long long *)(v194 - 16);
                  uint64_t v109 = v104 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v110 = *v108;
                    *(v107 - 1) = *(v108 - 1);
                    _OWORD *v107 = v110;
                    v107 -= 2;
                    v108 -= 2;
                    v109 -= 4;
                  }
                  while (v109);
                  unint64_t v95 = v106;
                  if (v104 != (v104 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_250:
                    do
                    {
                      uint64_t v111 = v95[-1].i64[1];
                      unint64_t v95 = (int8x16_t *)((char *)v95 - 8);
                      v102[-1].i64[1] = v111;
                      uint64_t v102 = (int8x16_t *)((char *)v102 - 8);
                    }
                    while (v95 != v193);
                  }
                  unint64_t v95 = v193;
                  goto LABEL_148;
                }
                unsigned int v35 = 31;
              }
              ++*(void *)(v31 + 3864);
              uint64_t v36 = v34 + 24 * v35;
              *(void *)(v36 + 8) = v33;
              unint64_t v37 = *(unsigned int **)(v36 + 16);
              if (v37) {
                goto LABEL_53;
              }
              goto LABEL_99;
            }
            do
            {
LABEL_35:
              sub_F94B1C((uint64_t)&v197, 1);
              unint64_t v29 = (uint64_t *)v17;
              sub_F94DF0((int32x2_t *)&v197, v17, (uint64_t)&v208);
              unsigned int v17 = (int8x16_t *)((char *)v17 + 8);
            }
            while (v29 + 1 != (uint64_t *)v9);
            unint64_t v9 = (int8x16_t *)v195;
            long long v27 = (int8x16_t *)v196;
            goto LABEL_37;
          }
        }
LABEL_34:
        if (v17 == v9) {
          goto LABEL_25;
        }
        goto LABEL_35;
      }
    }
LABEL_6:
    ++v10;
  }
  while (v10 != v180);
  if (__p) {
    operator delete(__p);
  }
  if (v7) {
    operator delete(v7);
  }
LABEL_235:
  if (v195)
  {
    *(void *)&long long v196 = v195;
    operator delete(v195);
  }
  if (v207) {
    free(v207);
  }
}

void sub_F9F8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  if (a38)
  {
    free(a38);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

int32x2_t *sub_F9F9EC(int32x2_t *result)
{
  uint64_t v1 = (uint64_t **)result[11];
  uint64_t v2 = (uint64_t **)result[12];
  if (v1 != v2)
  {
    int64x2_t v3 = result;
    uint64_t v4 = (uint64_t)&result[1];
    do
    {
      uint64_t v5 = *v1;
      uint64_t v6 = v1[1];
      while (v5 != v6)
      {
        if (!*(_DWORD *)v5 || *((_DWORD *)v5 + 1) == -1) {
          goto LABEL_7;
        }
        sub_F94B1C(v4, 1);
        uint64_t v7 = *(void *)&v3[8] - 1;
        uint64_t v8 = *v5;
        unint64_t v9 = __ROR8__(*v5, 32);
        unint64_t v10 = 0xC4CEB9FE1A85EC53
            * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
        unint64_t v11 = v10 ^ (v10 >> 33);
        int32x2_t v12 = v3[10];
        __int32 v13 = v3[9].i32[0];
        __int32 v14 = v3[9].i32[1];
        uint64_t v15 = v11 & v7;
        int v16 = (unsigned int *)(*(void *)&v12 + 8 * (v11 & v7));
        unint64_t result = (int32x2_t *)*v16;
        unsigned int v17 = v16[1];
        int32x2_t v18 = v3[6];
        if (v13 == result && v14 == v17) {
          goto LABEL_28;
        }
        if (v18)
        {
          uint64_t v20 = -1;
          uint64_t v21 = 1;
          do
          {
            if (v3[5].i32[0] == result && v3[5].i32[1] == v17)
            {
              if (v20 == -1) {
                uint64_t v20 = v15;
              }
            }
            else if (__PAIR64__(v17, result) == v8)
            {
              goto LABEL_39;
            }
            uint64_t v15 = (v15 + v21) & v7;
            int v22 = (unsigned int *)(*(void *)&v12 + 8 * v15);
            unint64_t result = (int32x2_t *)*v22;
            unsigned int v17 = v22[1];
            ++v21;
          }
          while (v13 != result || v14 != v17);
          if (v20 == -1) {
LABEL_28:
          }
            uint64_t v20 = v15;
          int32x2_t v24 = v3[7];
          if (*(void *)&v24 - *(void *)&v18 >= 0x1FFFFFFFFFFFFFFFuLL) {
            goto LABEL_41;
          }
LABEL_30:
          if (*(void *)&v18
            && (int32x2_t v25 = vceq_s32(v3[5], *(int32x2_t *)(*(void *)&v12 + 8 * v20)), (v25.i32[0] & v25.i32[1] & 1) != 0))
          {
            v3[6] = (int32x2_t)(*(void *)&v18 - 1);
          }
          else
          {
            v3[7] = (int32x2_t)(*(void *)&v24 + 1);
          }
          *(void *)(*(void *)&v12 + 8 * v20) = *v5;
          goto LABEL_7;
        }
        uint64_t v26 = 1;
        while (__PAIR64__(v17, result) != v8)
        {
          uint64_t v15 = (v15 + v26) & v7;
          long long v27 = (unsigned int *)(*(void *)&v12 + 8 * v15);
          unint64_t result = (int32x2_t *)*v27;
          unsigned int v17 = v27[1];
          ++v26;
          if (v13 == result && v14 == v17) {
            goto LABEL_28;
          }
        }
LABEL_39:
        if (v15 == -1)
        {
          uint64_t v20 = -1;
          int32x2_t v24 = v3[7];
          if (*(void *)&v24 - *(void *)&v18 >= 0x1FFFFFFFFFFFFFFFuLL)
          {
LABEL_41:
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            sub_2E18(exception, "insert overflow");
          }
          goto LABEL_30;
        }
LABEL_7:
        ++v5;
      }
      v1 += 3;
    }
    while (v1 != v2);
  }
  return result;
}

void sub_F9FC34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_F9FC48(uint64_t a1, const void **a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  if ((unint64_t)v4 >= *(void *)(a1 + 16))
  {
    unint64_t v10 = sub_FA0544((void **)a1, (uint64_t)a2);
  }
  else
  {
    void *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    uint64_t v6 = *a2;
    uint64_t v5 = a2[1];
    int64_t v7 = v5 - (unsigned char *)*a2;
    if (v5 != *a2)
    {
      if (0xCCCCCCCCCCCCCCCDLL * (v7 >> 4) >= 0x333333333333334) {
        sub_2E00();
      }
      uint64_t v8 = (char *)operator new(v7);
      void *v4 = v8;
      v4[1] = v8;
      v4[2] = &v8[16 * (v7 >> 4)];
      size_t v9 = 80 * ((v7 - 80) / 0x50uLL) + 80;
      memcpy(v8, v6, v9);
      v4[1] = &v8[v9];
    }
    v4[3] = a2[3];
    unint64_t v10 = v4 + 4;
    *(void *)(a1 + 8) = v4 + 4;
  }
  *(void *)(a1 + 8) = v10;
  return v10 - 4;
}

void sub_F9FD48(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

unint64_t sub_F9FD68@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  unsigned int v6 = a2[1];
  unint64_t v7 = 0x2127599BF4325C37
     * ((((v5 << 32) + (int)(16 * v6)) | (v6 >> 29) & 2 | (v6 >> 31) | (v6 >> 27) & 4 | (v6 >> 25) & 8) ^ ((unint64_t)((v5 << 32) + (int)(16 * v6)) >> 23));
  unint64_t v8 = (v7 ^ ~(v7 >> 47)) + ((v7 ^ (v7 >> 47)) << 21);
  unint64_t v9 = 21 * ((265 * (v8 ^ (v8 >> 24))) ^ ((265 * (v8 ^ (v8 >> 24))) >> 14));
  unint64_t v10 = 2147483649u * (v9 ^ (v9 >> 28));
  unint64_t v11 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v9 ^ (v9 >> 28)) >> 8) ^ ((-2147483647
                                                                                     * (v9 ^ (v9 >> 28))) >> 16)) ^ ((-2147483647 * (v9 ^ (v9 >> 28))) >> 24)) & 0xF));
  unint64_t v12 = v10 >> 7;
  uint64_t v13 = v11[3];
  while (1)
  {
    unint64_t v14 = v12 & v13;
    uint64_t v15 = *(void *)(*v11 + v14);
    unint64_t v16 = ((v15 ^ (0x101010101010101 * (v10 & 0x7F))) - 0x101010101010101) & ~(v15 ^ (0x101010101010101
                                                                                        * (v10 & 0x7F))) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_8:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_F9FED8(v11, v10);
      *(void *)a3 = v11;
      *(void *)(a3 + 8) = result;
      *(unsigned char *)(a3 + 16) = 1;
      return result;
    }
    v4 += 8;
    unint64_t v12 = v4 + v14;
  }
  while (1)
  {
    unint64_t result = (v14 + (__clz(__rbit64(v16)) >> 3)) & v13;
    int32x2_t v18 = (int *)(v11[1] + 32 * result);
    int v20 = *v18;
    int v19 = v18[1];
    if (v20 == v5 && v19 == v6) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_8;
    }
  }
  *(void *)a3 = v11;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

unint64_t sub_F9FED8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_F9FFD0((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_F9FFD0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_FA0000((char **)a1, v2);
    return;
  }
  sub_FA0210(a1);
}

void sub_FA0000(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = (char *)operator new(v7 + 32 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (unint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        unint64_t v14 = &v5[32 * (void)i];
        unsigned int v15 = *((_DWORD *)v14 + 1);
        unint64_t v16 = ((unint64_t)*(unsigned int *)v14 << 32) + (int)(16 * v15);
        unint64_t v17 = 0x2127599BF4325C37
            * ((v16 | (v15 >> 29) & 2 | (v15 >> 31) | (v15 >> 27) & 4 | (v15 >> 25) & 8) ^ (v16 >> 23));
        unint64_t v18 = (v17 ^ ~(v17 >> 47)) + ((v17 ^ (v17 >> 47)) << 21);
        unint64_t v19 = 21 * ((265 * (v18 ^ (v18 >> 24))) ^ ((265 * (v18 ^ (v18 >> 24))) >> 14));
        unint64_t v20 = 2147483649u * (v19 ^ (v19 >> 28));
        uint64_t v21 = a1[3];
        int v22 = *a1;
        unint64_t v23 = (unint64_t)v21 & (v20 >> 7);
        unint64_t v24 = *(void *)&(*a1)[v23] & (~*(void *)&(*a1)[v23] << 7) & 0x8080808080808080;
        if (!v24)
        {
          uint64_t v25 = 8;
          do
          {
            unint64_t v23 = (v23 + v25) & (unint64_t)v21;
            v25 += 8;
            unint64_t v24 = *(void *)&v22[v23] & (~*(void *)&v22[v23] << 7) & 0x8080808080808080;
          }
          while (!v24);
        }
        unint64_t v11 = (v23 + (__clz(__rbit64(v24)) >> 3)) & (unint64_t)v21;
        char v12 = v20 & 0x7F;
        v22[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        uint64_t v13 = &a1[1][32 * v11];
        *(void *)uint64_t v13 = *(void *)v14;
        *((void *)v13 + 1) = 0;
        *((void *)v13 + 2) = 0;
        *((void *)v13 + 3) = 0;
        *(_OWORD *)(v13 + 8) = *(_OWORD *)(v14 + 8);
        *((void *)v13 + 3) = *((void *)v14 + 3);
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 2) = 0;
        *((void *)v14 + 3) = 0;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_FA0210(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_27;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      unint64_t v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        unint64_t v18 = (unsigned int *)(*(void *)(result + 8) + 32 * i);
        uint64_t v19 = *v18;
        LODWORD(v18) = v18[1];
        unint64_t v20 = 0x2127599BF4325C37
            * ((((v19 << 32) + 16 * (int)v18) | (v18 >> 29) & 2 | (v18 >> 31) | (v18 >> 27) & 4 | (v18 >> 25) & 8) ^ ((unint64_t)((v19 << 32) + 16 * (int)v18) >> 23));
        unint64_t v21 = (v20 ^ ~(v20 >> 47)) + ((v20 ^ (v20 >> 47)) << 21);
        unint64_t v22 = 21 * ((265 * (v21 ^ (v21 >> 24))) ^ ((265 * (v21 ^ (v21 >> 24))) >> 14));
        unint64_t v23 = 2147483649u * (v22 ^ (v22 >> 28));
        unint64_t v24 = v13 & (v23 >> 7);
        unint64_t v25 = *(uint64_t *)((unsigned char *)v17->i64 + v24) & (~*(uint64_t *)((char *)v17->i64 + v24) << 7) & 0x8080808080808080;
        if (v25)
        {
          unint64_t v15 = v13 & (v23 >> 7);
        }
        else
        {
          uint64_t v26 = 8;
          unint64_t v15 = v13 & (v23 >> 7);
          do
          {
            unint64_t v15 = (v15 + v26) & v13;
            v26 += 8;
            unint64_t v25 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v25);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v25)) >> 3)) & v13;
        if ((((v16 - v24) ^ (i - v24)) & v13) > 7)
        {
          int v27 = v17->u8[v16];
          v17->i8[v16] = v23 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v23 & 0x7F;
          uint64_t v28 = *(void *)(result + 8);
          if (v27 == 128)
          {
            unint64_t v29 = (void *)(v28 + 32 * v16);
            uint64_t v30 = v28 + 32 * i;
            *unint64_t v29 = *(void *)v30;
            v29[1] = 0;
            v29[2] = 0;
            v29[3] = 0;
            *(_OWORD *)(v29 + 1) = *(_OWORD *)(v30 + 8);
            v29[3] = *(void *)(v30 + 24);
            *(void *)(v30 + 16) = 0;
            *(void *)(v30 + 24) = 0;
            *(void *)(v30 + 8) = 0;
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            uint64_t v31 = (uint64_t *)(v28 + 32 * i);
            uint64_t v32 = *v31;
            uint64_t v33 = v31[3];
            long long v34 = *(_OWORD *)(v31 + 1);
            v31[2] = 0;
            v31[3] = 0;
            v31[1] = 0;
            uint64_t v35 = *(void *)(result + 8);
            uint64_t v36 = (void *)(v35 + 32 * i);
            uint64_t v37 = 32 * v16;
            uint64_t v38 = v35 + v37;
            *uint64_t v36 = *(void *)v38;
            v36[1] = 0;
            v36[2] = 0;
            v36[3] = 0;
            *(_OWORD *)(v36 + 1) = *(_OWORD *)(v38 + 8);
            v36[3] = *(void *)(v38 + 24);
            *(void *)(v38 + 16) = 0;
            *(void *)(v38 + 24) = 0;
            *(void *)(v38 + 8) = 0;
            uint64_t v39 = *(void *)(result + 8) + v37;
            *(void *)uint64_t v39 = v32;
            *(_OWORD *)(v39 + 8) = v34;
            *(void *)(v39 + 24) = v33;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v23 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v23 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v40 = i - (i >> 3);
    BOOL v41 = i == 7;
    uint64_t v42 = 6;
    if (!v41) {
      uint64_t v42 = v40;
    }
    *(void *)(result + 40) = v42 - *(void *)(result + 16);
  }
  else
  {
    *(void *)(result + 40) = -*(void *)(result + 16);
  }
  return result;
}

void *sub_FA0544(void **a1, uint64_t a2)
{
  unint64_t v4 = (char *)*a1;
  uint64_t v3 = (char *)a1[1];
  uint64_t v5 = (v3 - (unsigned char *)*a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v4;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    uint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  int8x16_t v11 = &v10[32 * v5];
  int8x16_t v12 = &v10[32 * v9];
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)int8x16_t v11 = 0;
  unint64_t v14 = *(const void **)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  int64_t v15 = v13 - *(void *)a2;
  if (v13 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v15 >> 4) >= 0x333333333333334) {
      sub_2E00();
    }
    unint64_t v16 = (char *)operator new(v15);
    *(void *)int8x16_t v11 = v16;
    *((void *)v11 + 1) = v16;
    *((void *)v11 + 2) = &v16[16 * (v15 >> 4)];
    size_t v17 = 80 * ((v15 - 80) / 0x50uLL) + 80;
    memcpy(v16, v14, v17);
    *((void *)v11 + 1) = &v16[v17];
  }
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  unint64_t v18 = v11 + 32;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v18;
    a1[2] = v12;
  }
  else
  {
    uint64_t v19 = 0;
    do
    {
      unint64_t v20 = &v11[v19];
      unint64_t v21 = &v3[v19];
      *((void *)v20 - 3) = 0;
      *((void *)v20 - 2) = 0;
      *((_OWORD *)v20 - 2) = *(_OWORD *)&v3[v19 - 32];
      *((void *)v20 - 2) = *(void *)&v3[v19 - 16];
      *((void *)v21 - 4) = 0;
      *((void *)v21 - 3) = 0;
      *((void *)v21 - 2) = 0;
      *((void *)v20 - 1) = *(void *)&v3[v19 - 8];
      v19 -= 32;
    }
    while (&v3[v19] != v4);
    unint64_t v22 = (char *)*a1;
    uint64_t v3 = (char *)a1[1];
    unint64_t v18 = v11 + 32;
    *a1 = &v11[v19];
    a1[1] = v11 + 32;
    a1[2] = v12;
    if (v3 != v22)
    {
      unint64_t v23 = v3;
      do
      {
        unint64_t v25 = (void *)*((void *)v23 - 4);
        v23 -= 32;
        unint64_t v24 = v25;
        if (v25)
        {
          *((void *)v3 - 3) = v24;
          operator delete(v24);
        }
        uint64_t v3 = v23;
      }
      while (v23 != v22);
      uint64_t v3 = v22;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v18;
}

void sub_FA0764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  unint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  sub_BF93E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_FA0788(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = sub_FA08AC(a1, a3, 1);
  if (!v5) {
    return 0xFFFFLL;
  }
  unint64_t v6 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v6 < 5u) {
    return 0xFFFFLL;
  }
  if (!*((_WORD *)v6 + 2)) {
    return 0xFFFFLL;
  }
  unint64_t v7 = &v5[*((unsigned __int16 *)v6 + 2) + *(unsigned int *)&v5[*((unsigned __int16 *)v6 + 2)]];
  if (*(_DWORD *)v7 <= HIDWORD(a3)) {
    return 0xFFFFLL;
  }
  uint64_t v8 = &v7[4 * HIDWORD(a3) + 4 + *(unsigned int *)&v7[4 * HIDWORD(a3) + 4]];
  unint64_t v9 = &v8[-*(int *)v8];
  if (*(unsigned __int16 *)v9 < 9u) {
    return 0xFFFFLL;
  }
  uint64_t v10 = *((unsigned __int16 *)v9 + 4);
  if (!v10) {
    return 0xFFFFLL;
  }
  int8x16_t v11 = &v8[v10 + *(unsigned int *)&v8[v10]];
  unsigned int v14 = *(_DWORD *)v11;
  int8x16_t v12 = v11 + 4;
  unint64_t v13 = v14;
  int64_t v15 = &v12[8 * v14];
  unint64_t v16 = (((int)((uint64_t)a2 >> 28) & 0xFFFFFFFFFFFFFFF0) + (a2 << 32)) & 0xFFFFFFFFFFFFFFF0 | (a2 >> 57) & 8 | (a2 >> 59) & 4 | (a2 >> 61) & 2 | (a2 >> 63);
  size_t v17 = v12;
  while (v13)
  {
    unint64_t v18 = (unint64_t *)&v17[(4 * v13) & 0x7FFFFFFF8];
    unint64_t v20 = *v18;
    uint64_t v19 = (char *)(v18 + 1);
    unint64_t v21 = v13 >> 1;
    v13 += ~(v13 >> 1);
    if (v20 >= v16) {
      unint64_t v13 = v21;
    }
    else {
      size_t v17 = v19;
    }
  }
  if (v17 != v15 && *(void *)v17 == v16) {
    return (unint64_t)(v17 - v12) >> 3;
  }
  else {
    return 0xFFFFLL;
  }
}

char *sub_FA08AC(uint64_t a1, unsigned int a2, int a3)
{
  int v25 = a3;
  unsigned int v26 = a2;
  v24[0] = &v25;
  v24[1] = (int *)&v26;
  unint64_t v4 = *(void *)(a1 + 3856) + 1;
  *(void *)(a1 + 3856) = v4;
  uint64_t v5 = *(void *)a1;
  if (v5)
  {
    uint64_t v6 = a1 + 16;
    if (*(_DWORD *)(a1 + 1360) == a2)
    {
      unsigned int v7 = 56;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1384) == a2)
    {
      unsigned int v7 = 57;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1408) == a2)
    {
      unsigned int v7 = 58;
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 1432) == a2)
    {
      unsigned int v7 = 59;
LABEL_10:
      ++*(void *)(a1 + 3864);
      uint64_t v8 = v6 + 24 * v7;
      *(void *)(v8 + 8) = v4;
      unint64_t v9 = *(unsigned int **)(v8 + 16);
      if (v9) {
        return (char *)v9 + *v9;
      }
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(a1 + 1416);
    unint64_t v12 = *(void *)(a1 + 1392);
    unint64_t v13 = *(void *)(a1 + 1368);
    BOOL v14 = v13 >= v4;
    if (v13 < v4) {
      unint64_t v4 = *(void *)(a1 + 1368);
    }
    int v15 = 56;
    if (v14) {
      int v15 = 0;
    }
    BOOL v16 = v12 >= v4;
    if (v12 < v4) {
      unint64_t v4 = *(void *)(a1 + 1392);
    }
    int v17 = 57;
    if (v16) {
      int v17 = v15;
    }
    if (v11 >= v4) {
      unint64_t v18 = v4;
    }
    else {
      unint64_t v18 = *(void *)(a1 + 1416);
    }
    unint64_t v19 = *(void *)(a1 + 1440);
    if (v11 >= v4) {
      int v20 = v17;
    }
    else {
      int v20 = 58;
    }
    unint64_t v21 = (unsigned int *)sub_2AB884(v5, 14, a2, 1);
    unsigned int v22 = 59;
    if (v19 >= v18) {
      unsigned int v22 = v20;
    }
    uint64_t v23 = v6 + 24 * v22;
    *(_DWORD *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = *(void *)(a1 + 3856);
    *(void *)(v23 + 16) = v21;
    if (v21) {
      return (char *)v21 + *v21;
    }
  }
LABEL_32:
  sub_FA0A3C(v24);
  return 0;
}

uint64_t sub_FA0A3C(int **a1)
{
  int v1 = **a1;
  if (v1 != 1)
  {
    if (!v1)
    {
      exception = __cxa_allocate_exception(0x40uLL);
      std::to_string(&v15, *a1[1]);
      uint64_t v5 = std::string::insert(&v15, 0, "Failed to acquire Flatbuffer data in quad node ");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      unsigned int v7 = std::string::append(&v16, " on layer ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      unint64_t v9 = sub_736EC(0xEu);
      uint64_t v10 = std::string::append(&v17, v9);
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      std::string::size_type v19 = v10->__r_.__value_.__r.__words[2];
      long long v18 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v18);
    }
    unint64_t v13 = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v18, "Unknown data access error policy");
    BOOL v14 = (void *)sub_2F404((uint64_t)v13, &v18);
  }
  return 0;
}

void sub_FA0B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a15 & 0x80000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0) {
LABEL_9:
  }
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(__p);
  goto LABEL_9;
}

void sub_FA0C68(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = __ROR8__(*a2, 32);
  unint64_t v7 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) >> 33));
  sub_FA0DE8((uint64_t *)(*(void *)(*(void *)(a1 + 16) + 56)+ 200 * ((v7 ^ (v7 >> 33)) % *(void *)(*(void *)(a1 + 16) + 40))), a2, (uint64_t)&v13);
  if (!v15)
  {
    unint64_t v8 = __ROR8__(*a2, 32);
    unint64_t v9 = 0xC4CEB9FE1A85EC53
       * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
    sub_39ABD8((uint64_t *)(*(void *)(*(void *)(a1 + 16) + 136)+ 200 * ((v9 ^ (v9 >> 33)) % *(void *)(*(void *)(a1 + 16) + 120))), a2, (uint64_t)&v12, 8uLL, 0);
  }
  uint64_t v10 = v14;
  *a3 = v13;
  a3[1] = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v11 = v14;
    if (v14)
    {
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_FA0DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FA0DE8(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  unint64_t v8 = (void *)a1[14];
  unint64_t v7 = (void *)a1[15];
  if (v8 == v7) {
    goto LABEL_16;
  }
  unint64_t v9 = __ROR8__(*a2, 32);
  unint64_t v10 = 0xC4CEB9FE1A85EC53
      * ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v9 ^ (v9 >> 33))) >> 33));
  unint64_t v11 = v10 ^ (v10 >> 33);
  uint64_t v12 = a1[11];
  unint64_t v13 = a1[12] - v12;
  unint64_t v14 = v11 % v13;
  uint64_t v15 = v13 - 1;
  while (*(unsigned char *)(v12 + v14) != 2)
  {
    if (!*(unsigned char *)(v12 + v14)) {
      goto LABEL_16;
    }
LABEL_4:
    if (v14 == v15) {
      unint64_t v14 = 0;
    }
    else {
      ++v14;
    }
  }
  std::string v16 = &v8[2 * v14];
  if (*v16 != *a2) {
    goto LABEL_4;
  }
  if (v16 != v7)
  {
    ++a1[23];
    std::string v17 = (uint64_t *)v16[1];
    if (v17 != a1)
    {
      long long v18 = (uint64_t *)v17[1];
      if (v18 != a1)
      {
        uint64_t v19 = *v17;
        *(void *)(v19 + 8) = v18;
        *(void *)v17[1] = v19;
        uint64_t v20 = *a1;
        *(void *)(v20 + 8) = v17;
        uint64_t *v17 = v20;
        *a1 = (uint64_t)v17;
        v17[1] = (uint64_t)a1;
      }
    }
    uint64_t v22 = v17[3];
    uint64_t v21 = v17[4];
    *(void *)a3 = v22;
    *(void *)(a3 + 8) = v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    char v23 = 1;
    goto LABEL_20;
  }
LABEL_16:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F74B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_24F74B0))
  {
    off_24F74A0 = (int *)&unk_20F1590;
    *(void *)&byte_24F74A8 = 0;
    __cxa_guard_release(&qword_24F74B0);
  }
  ++a1[24];
  uint64_t v24 = *((void *)off_24F74A0 + 1);
  *(void *)a3 = *(void *)off_24F74A0;
  *(void *)(a3 + 8) = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  char v23 = byte_24F74A8;
LABEL_20:
  *(unsigned char *)(a3 + 16) = v23;

  std::mutex::unlock(v6);
}

uint64_t sub_FA0FC8@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  unsigned int v5 = a2[1];
  unint64_t v6 = 0x2127599BF4325C37
     * ((((v4 << 32) + (int)(16 * v5)) | (v5 >> 29) & 2 | (v5 >> 31) | (v5 >> 27) & 4 | (v5 >> 25) & 8) ^ ((unint64_t)((v4 << 32) + (int)(16 * v5)) >> 23));
  unint64_t v7 = (v6 ^ ~(v6 >> 47)) + ((v6 ^ (v6 >> 47)) << 21);
  unint64_t v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
  unint64_t v9 = 2147483649u * (v8 ^ (v8 >> 28));
  unint64_t v10 = (uint64_t *)(result
                  + 48
                  * (((((unsigned __int16)(v8 ^ (v8 >> 28)) >> 8) ^ ((-2147483647
                                                                                     * (v8 ^ (v8 >> 28))) >> 16)) ^ ((-2147483647 * (v8 ^ (v8 >> 28))) >> 24)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = *v10;
  uint64_t v14 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v15 = v11 & v12;
    uint64_t v16 = *(void *)(v13 + v15);
    unint64_t v17 = ((v16 ^ v14) - 0x101010101010101) & ~(v16 ^ v14) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_8:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_11;
    }
    v3 += 8;
    unint64_t v11 = v3 + v15;
  }
  while (1)
  {
    unint64_t v18 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v12;
    uint64_t v19 = (uint64_t *)(v10[1] + 16 * v18);
    if (*(_DWORD *)v19 == v4 && *((_DWORD *)v19 + 1) == v5) {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_8;
    }
  }
  if (v12 == v18)
  {
LABEL_11:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[4] = 0;
    return result;
  }
  *a3 = v10;
  a3[1] = (uint64_t *)(result + 768);
  a3[2] = (uint64_t *)(v13 + v18);
  a3[3] = v19;
  a3[4] = (uint64_t *)(v13 + v12);
  return result;
}

unint64_t sub_FA1120@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  unsigned int v6 = a2[1];
  unint64_t v7 = 0x2127599BF4325C37
     * ((((v5 << 32) + (int)(16 * v6)) | (v6 >> 29) & 2 | (v6 >> 31) | (v6 >> 27) & 4 | (v6 >> 25) & 8) ^ ((unint64_t)((v5 << 32) + (int)(16 * v6)) >> 23));
  unint64_t v8 = (v7 ^ ~(v7 >> 47)) + ((v7 ^ (v7 >> 47)) << 21);
  unint64_t v9 = 21 * ((265 * (v8 ^ (v8 >> 24))) ^ ((265 * (v8 ^ (v8 >> 24))) >> 14));
  unint64_t v10 = 2147483649u * (v9 ^ (v9 >> 28));
  unint64_t v11 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v9 ^ (v9 >> 28)) >> 8) ^ ((-2147483647
                                                                                     * (v9 ^ (v9 >> 28))) >> 16)) ^ ((-2147483647 * (v9 ^ (v9 >> 28))) >> 24)) & 0xF));
  unint64_t v12 = v10 >> 7;
  uint64_t v13 = v11[3];
  while (1)
  {
    unint64_t v14 = v12 & v13;
    uint64_t v15 = *(void *)(*v11 + v14);
    unint64_t v16 = ((v15 ^ (0x101010101010101 * (v10 & 0x7F))) - 0x101010101010101) & ~(v15 ^ (0x101010101010101
                                                                                        * (v10 & 0x7F))) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_8:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_FA1290(v11, v10);
      *(void *)a3 = v11;
      *(void *)(a3 + 8) = result;
      *(unsigned char *)(a3 + 16) = 1;
      return result;
    }
    v4 += 8;
    unint64_t v12 = v4 + v14;
  }
  while (1)
  {
    unint64_t result = (v14 + (__clz(__rbit64(v16)) >> 3)) & v13;
    unint64_t v18 = (int *)(v11[1] + 16 * result);
    int v20 = *v18;
    int v19 = v18[1];
    if (v20 == v5 && v19 == v6) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_8;
    }
  }
  *(void *)a3 = v11;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

unint64_t sub_FA1290(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_FA1388((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_FA1388(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    uint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    uint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_FA13B8((char **)a1, v2);
    return;
  }
  sub_FA15A8(a1);
}

void sub_FA13B8(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = (char *)operator new(v7 + 16 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (unint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        uint64_t v13 = &v5[16 * (void)i];
        unsigned int v14 = *((_DWORD *)v13 + 1);
        unint64_t v15 = ((unint64_t)*(unsigned int *)v13 << 32) + (int)(16 * v14);
        unint64_t v16 = 0x2127599BF4325C37
            * ((v15 | (v14 >> 29) & 2 | (v14 >> 31) | (v14 >> 27) & 4 | (v14 >> 25) & 8) ^ (v15 >> 23));
        unint64_t v17 = (v16 ^ ~(v16 >> 47)) + ((v16 ^ (v16 >> 47)) << 21);
        unint64_t v18 = 21 * ((265 * (v17 ^ (v17 >> 24))) ^ ((265 * (v17 ^ (v17 >> 24))) >> 14));
        unint64_t v19 = 2147483649u * (v18 ^ (v18 >> 28));
        int v20 = a1[3];
        uint64_t v21 = *a1;
        unint64_t v22 = (unint64_t)v20 & (v19 >> 7);
        unint64_t v23 = *(void *)&(*a1)[v22] & (~*(void *)&(*a1)[v22] << 7) & 0x8080808080808080;
        if (!v23)
        {
          uint64_t v24 = 8;
          do
          {
            unint64_t v22 = (v22 + v24) & (unint64_t)v20;
            v24 += 8;
            unint64_t v23 = *(void *)&v21[v22] & (~*(void *)&v21[v22] << 7) & 0x8080808080808080;
          }
          while (!v23);
        }
        unint64_t v11 = (v22 + (__clz(__rbit64(v23)) >> 3)) & (unint64_t)v20;
        char v12 = v19 & 0x7F;
        v21[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        *(_OWORD *)&a1[1][16 * v11] = *(_OWORD *)v13;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_FA15A8(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_28;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      unint64_t v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        unint64_t v18 = (unsigned int *)(*(void *)(result + 8) + 16 * i);
        uint64_t v19 = *v18;
        LODWORD(v18) = v18[1];
        unint64_t v20 = 0x2127599BF4325C37
            * ((((v19 << 32) + 16 * (int)v18) | (v18 >> 29) & 2 | (v18 >> 31) | (v18 >> 27) & 4 | (v18 >> 25) & 8) ^ ((unint64_t)((v19 << 32) + 16 * (int)v18) >> 23));
        unint64_t v21 = (v20 ^ ~(v20 >> 47)) + ((v20 ^ (v20 >> 47)) << 21);
        unint64_t v22 = 21 * ((265 * (v21 ^ (v21 >> 24))) ^ ((265 * (v21 ^ (v21 >> 24))) >> 14));
        unint64_t v23 = 2147483649u * (v22 ^ (v22 >> 28));
        unint64_t v24 = v13 & (v23 >> 7);
        unint64_t v25 = *(uint64_t *)((unsigned char *)v17->i64 + v24) & (~*(uint64_t *)((char *)v17->i64 + v24) << 7) & 0x8080808080808080;
        if (v25)
        {
          unint64_t v15 = v13 & (v23 >> 7);
        }
        else
        {
          uint64_t v26 = 8;
          unint64_t v15 = v13 & (v23 >> 7);
          do
          {
            unint64_t v15 = (v15 + v26) & v13;
            v26 += 8;
            unint64_t v25 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v25);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v25)) >> 3)) & v13;
        if ((((v16 - v24) ^ (i - v24)) & v13) > 7)
        {
          int v27 = v17->u8[v16];
          v17->i8[v16] = v23 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v23 & 0x7F;
          uint64_t v28 = *(void *)(result + 8);
          if (v27 == 128)
          {
            *(_OWORD *)(v28 + 16 * v16) = *(_OWORD *)(v28 + 16 * i);
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            long long v29 = *(_OWORD *)(v28 + 16 * i);
            *(_OWORD *)(v28 + 16 * i) = *(_OWORD *)(v28 + 16 * v16);
            *(_OWORD *)(*(void *)(result + 8) + 16 * v16) = v29;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v23 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v23 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v30 = i - (i >> 3);
    BOOL v31 = i == 7;
    uint64_t v32 = 6;
    if (!v31) {
      uint64_t v32 = v30;
    }
  }
  else
  {
    uint64_t v32 = 0;
  }
  *(void *)(result + 40) = v32 - *(void *)(result + 16);
  return result;
}

uint64_t sub_FA18AC@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  unsigned int v5 = a2[1];
  unint64_t v6 = 0x2127599BF4325C37
     * ((((v4 << 32) + (int)(16 * v5)) | (v5 >> 29) & 2 | (v5 >> 31) | (v5 >> 27) & 4 | (v5 >> 25) & 8) ^ ((unint64_t)((v4 << 32) + (int)(16 * v5)) >> 23));
  unint64_t v7 = (v6 ^ ~(v6 >> 47)) + ((v6 ^ (v6 >> 47)) << 21);
  unint64_t v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
  unint64_t v9 = 2147483649u * (v8 ^ (v8 >> 28));
  uint64_t v10 = (void *)(result
                 + 48
                 * (((((unsigned __int16)(v8 ^ (v8 >> 28)) >> 8) ^ ((-2147483647
                                                                                    * (v8 ^ (v8 >> 28))) >> 16)) ^ ((-2147483647 * (v8 ^ (v8 >> 28))) >> 24)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = *v10;
  uint64_t v14 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v15 = v11 & v12;
    uint64_t v16 = *(void *)(v13 + v15);
    unint64_t v17 = ((v16 ^ v14) - 0x101010101010101) & ~(v16 ^ v14) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_8:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      a3[3] = v10;
      a3[4] = 0;
      return result;
    }
    v3 += 8;
    unint64_t v11 = v3 + v15;
  }
  while (1)
  {
    unint64_t v19 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v12;
    uint64_t v18 = v10[1];
    unint64_t v20 = (_DWORD *)(v18 + 32 * v19);
    if (*v20 == v4 && v20[1] == v5) {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_8;
    }
  }
  BOOL v22 = v12 == v19;
  uint64_t v23 = v13 + v19;
  uint64_t v24 = v13 + v12;
  uint64_t v25 = result + 768;
  if (v12 == v19)
  {
    uint64_t v23 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v26 = v10;
  }
  if (v22) {
    int v27 = a3;
  }
  else {
    int v27 = (void *)(v18 + 32 * v19);
  }
  if (v22) {
    uint64_t v24 = 0;
  }
  *a3 = v26;
  a3[1] = v25;
  a3[2] = v23;
  a3[3] = v27;
  a3[4] = v24;
  return result;
}

char *sub_FA1A24(char **a1)
{
  uint64_t v3 = a1[1];
  unint64_t v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 < v2)
  {
    *(_OWORD *)uint64_t v3 = xmmword_20E8160;
    *((void *)v3 + 2) = 0;
    uint64_t v4 = v3 + 24;
    goto LABEL_14;
  }
  unsigned int v5 = *a1;
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (void)v5) >> 3);
  if (2 * v8 > v7) {
    unint64_t v7 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9 > 0xAAAAAAAAAAAAAAALL) {
    sub_188D718();
  }
  uint64_t v10 = 24 * v9;
  unint64_t v11 = (char *)operator new(24 * v9);
  uint64_t v12 = &v11[24 * v6];
  *(_OWORD *)uint64_t v12 = xmmword_20E8160;
  uint64_t v13 = &v11[v10];
  *((void *)v12 + 2) = 0;
  uint64_t v4 = v12 + 24;
  if (v3 == v5)
  {
    *a1 = v12;
    a1[1] = v4;
    a1[2] = v13;
    if (!v5) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  do
  {
    long long v14 = *(_OWORD *)(v3 - 24);
    unint64_t v15 = v12 - 24;
    *((void *)v12 - 1) = *((void *)v3 - 1);
    *(_OWORD *)(v12 - 24) = v14;
    v3 -= 24;
    v12 -= 24;
  }
  while (v3 != v5);
  *a1 = v15;
  a1[1] = v4;
  a1[2] = v13;
  if (v5) {
LABEL_13:
  }
    operator delete(v5);
LABEL_14:
  a1[1] = v4;
  return v4 - 24;
}

void sub_FA1B70(uint64_t a1, unsigned int *a2, unint64_t *a3)
{
  a3[1] = *a3;
  if (*(_DWORD *)(a1 + 3880)) {
    return;
  }
  unsigned int v5 = sub_3823E0(a1 + 8, *a2, 1);
  if (!v5) {
    return;
  }
  unint64_t v6 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v6 < 0xBu) {
    return;
  }
  uint64_t v7 = *((unsigned __int16 *)v6 + 5);
  if (!v7) {
    return;
  }
  unint64_t v8 = &v5[v7 + *(unsigned int *)&v5[v7]];
  uint64_t v9 = a2[1] & 0xFFFFFFF;
  if (*(_DWORD *)v8 <= v9) {
    return;
  }
  uint64_t v10 = &v8[4 * v9 + 4 + *(unsigned int *)&v8[4 * v9 + 4]];
  unint64_t v11 = &v10[-*(int *)v10];
  if (*(unsigned __int16 *)v11 < 5u) {
    return;
  }
  uint64_t v12 = *((unsigned __int16 *)v11 + 2);
  if (!v12) {
    return;
  }
  uint64_t v13 = &v10[v12 + *(unsigned int *)&v10[v12]];
  unint64_t v14 = *(unsigned int *)v13;
  unint64_t v15 = (unsigned char *)*a3;
  if (v14 > (uint64_t)(a3[2] - *a3) >> 3)
  {
    uint64_t v16 = (unsigned char *)a3[1];
    uint64_t v17 = 8 * v14;
    uint64_t v18 = (char *)operator new(8 * v14);
    uint64_t v19 = v16 - v15;
    unint64_t v20 = &v18[(v16 - v15) & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20;
    if (v16 == v15) {
      goto LABEL_18;
    }
    if ((unint64_t)(v19 - 8) >= 0x58)
    {
      unint64_t v21 = &v18[(v16 - v15) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)(&v16[-(v19 & 0xFFFFFFFFFFFFFFF8)] - v18) >= 0x20)
      {
        uint64_t v22 = v19 >> 3;
        unint64_t v23 = ((unint64_t)(v19 - 8) >> 3) + 1;
        uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v25 = &v16[-v24];
        unint64_t v21 = &v20[-v24];
        uint64_t v26 = &v18[8 * v22 - 16];
        int v27 = (long long *)(v16 - 16);
        uint64_t v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v27;
          *((_OWORD *)v26 - 1) = *(v27 - 1);
          *(_OWORD *)uint64_t v26 = v29;
          v26 -= 32;
          v27 -= 2;
          v28 -= 4;
        }
        while (v28);
        uint64_t v16 = v25;
        if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_18:
          *a3 = (unint64_t)v21;
          a3[1] = (unint64_t)v20;
          a3[2] = (unint64_t)&v18[v17];
          if (v15) {
            operator delete(v15);
          }
          goto LABEL_20;
        }
      }
    }
    else
    {
      unint64_t v21 = &v18[(v16 - v15) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v30 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v21 - 1) = v30;
      v21 -= 8;
    }
    while (v16 != v15);
    goto LABEL_18;
  }
LABEL_20:
  unsigned int v33 = *(_DWORD *)v13;
  uint64_t v32 = (uint64_t *)(v13 + 4);
  uint64_t v31 = v33;
  if (v33)
  {
    uint64_t v34 = 8 * v31;
    uint64_t v35 = (char *)a3[1];
    do
    {
      uint64_t v36 = *v32++;
      uint64_t v37 = v36;
      uint64_t v35 = sub_F9A47C(a3, v35, &v37) + 8;
      v34 -= 8;
    }
    while (v34);
  }
}

unint64_t sub_FA1D54(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *a2;
  unsigned int v3 = (16 * a2[1]) | (a2[1] >> 25) & 8 | (a2[1] >> 27) & 4 | (a2[1] >> 29) & 2 | (a2[1] >> 31);
  if (*(_DWORD *)(a1 + 20) == *a2 && *(_DWORD *)(a1 + 16) == v3)
  {
    LODWORD(v4) = *(_DWORD *)(a1 + 24);
    unsigned int v5 = *(_DWORD **)(a1 + 8);
  }
  else
  {
    unsigned int v5 = *(_DWORD **)(a1 + 8);
    unint64_t v6 = *v5;
    if (*v5)
    {
      uint64_t v7 = (char *)(v5 + 1);
      do
      {
        unint64_t v8 = v6 >> 1;
        uint64_t v9 = (unsigned int *)&v7[12 * (v6 >> 1)];
        if (*v9 < v3
          || (v3 >= *v9 ? (BOOL v10 = *(_DWORD *)(*(void *)a1 + 4 * *((unsigned __int16 *)v9 + 2) + 4) >= v2) : (BOOL v10 = 1),
              !v10))
        {
          uint64_t v7 = (char *)(v9 + 3);
          unint64_t v8 = v6 + ~v8;
        }
        unint64_t v6 = v8;
      }
      while (v8);
    }
    else
    {
      uint64_t v7 = (char *)(v5 + 1);
    }
    if (v7 != (char *)&v5[3 * *v5 + 1]
      && (*(_DWORD *)(*(void *)a1 + 4 * *((unsigned __int16 *)v7 + 2) + 4) == v2
        ? (BOOL v11 = *(_DWORD *)v7 == v3)
        : (BOOL v11 = 0),
          v11))
    {
      unint64_t v4 = (v7 - (char *)(v5 + 1)) / 0xCuLL;
    }
    else
    {
      LODWORD(v4) = -1;
    }
  }
  int v12 = HIWORD(v5[3 * v4 + 3]);
  if (v12 == 0xFFFF) {
    return 0;
  }
  uint64_t v13 = &v5[3 * v12 + 1];
  uint64_t v14 = *(unsigned int *)(*(void *)a1 + 4 * *((unsigned __int16 *)v13 + 2) + 4);
  uint64_t v15 = *v13;
  *(void *)(a1 + 16) = v15 | (v14 << 32);
  *(_DWORD *)(a1 + 24) = v12;
  return v14 | ((unint64_t)((v15 >> 4) & 0x8FFFFFFF | (v15 << 31) | (((v15 >> 3) & 1) << 28) & 0x9FFFFFFF | (((v15 >> 2) & 1) << 29) & 0xBFFFFFFF | (((v15 >> 1) & 1) << 30)) << 32);
}

uint64_t sub_FA1ED0(void *a1, void *a2)
{
  unint64_t v4 = (void *)sub_FA1FC8((uint64_t)a1, a2);
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = (void *)(v5 + 8 * v6);
  if (v4 == v7 || *v4 != *a2)
  {
    uint64_t v8 = a1[6];
    uint64_t v9 = v8 + 16 * v6;
    unint64_t v4 = v7;
  }
  else
  {
    uint64_t v8 = a1[6];
    uint64_t v9 = v8 + 2 * ((void)v4 - v5);
  }
  uint64_t v10 = v8 + 16 * v6;
  if (v4 == v7 && v9 == v10)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v15, "Key not found.");
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v15);
  }
  return v9;
}

void sub_FA1F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FA1FC8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = &qword_24F74C0;
    uint64_t v6 = &unk_24F7000;
    uint64_t v7 = &unk_24F7000;
    uint64_t v8 = &unk_24F7000;
    do
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)v5, memory_order_acquire) & 1) == 0)
      {
        unint64_t v33 = v4;
        uint64_t v35 = a1;
        uint64_t v18 = v5;
        uint64_t v31 = a2;
        uint64_t v19 = v6;
        int v20 = __cxa_guard_acquire(v5);
        uint64_t v8 = (void *)&unk_24F7000;
        uint64_t v7 = (void *)&unk_24F7000;
        uint64_t v6 = v19;
        a2 = v31;
        unint64_t v4 = v33;
        int v21 = v20;
        uint64_t v5 = v18;
        a1 = v35;
        if (v21)
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F74D0, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F74D0))
          {
            v19[153] = sub_2E8DA0();
            __cxa_guard_release(&qword_24F74D0);
          }
          qword_24F74B8 = v19[153] >> 3;
          __cxa_guard_release(v18);
          uint64_t v7 = &unk_24F7000;
          uint64_t v6 = v19;
          uint64_t v5 = v18;
          a2 = v31;
          unint64_t v4 = v33;
          a1 = v35;
          uint64_t v8 = (void *)&unk_24F7000;
        }
      }
      uint64_t v9 = v7[151];
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F74E0, memory_order_acquire) & 1) == 0)
      {
        unint64_t v34 = v4;
        uint64_t v36 = a1;
        uint64_t v32 = a2;
        uint64_t v22 = v7;
        int v23 = __cxa_guard_acquire(&qword_24F74E0);
        uint64_t v8 = (void *)&unk_24F7000;
        uint64_t v7 = v22;
        uint64_t v6 = (void *)&unk_24F7000;
        a2 = v32;
        unint64_t v4 = v34;
        int v24 = v23;
        uint64_t v5 = &qword_24F74C0;
        a1 = v36;
        if (v24)
        {
          uint64_t v30 = v9;
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F74C0, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F74C0))
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F74D0, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F74D0))
            {
              qword_24F74C8 = sub_2E8DA0();
              __cxa_guard_release(&qword_24F74D0);
            }
            v22[151] = (unint64_t)qword_24F74C8 >> 3;
            __cxa_guard_release(&qword_24F74C0);
          }
          uint64_t v25 = v22[151];
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F74C0, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_24F74C0))
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F74D0, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_24F74D0))
            {
              qword_24F74C8 = sub_2E8DA0();
              __cxa_guard_release(&qword_24F74D0);
            }
            v22[151] = (unint64_t)qword_24F74C8 >> 3;
            __cxa_guard_release(&qword_24F74C0);
          }
          qword_24F74D8 = v25 + (v22[151] >> 1);
          __cxa_guard_release(&qword_24F74E0);
          uint64_t v8 = &unk_24F7000;
          uint64_t v7 = v22;
          a2 = v32;
          unint64_t v4 = v34;
          a1 = v36;
          uint64_t v5 = &qword_24F74C0;
          uint64_t v6 = (void *)&unk_24F7000;
          uint64_t v9 = v30;
        }
      }
      _X8 = v3 + 8 * (v8[155] + v9 * v4);
      __asm { PRFM            #0, [X8] }
      uint64_t v3 = *(void *)(a1 + 24);
      unint64_t v2 = *(void *)(a1 + 32);
      BOOL v16 = *a2 > *(void *)(v3 + 8 * v4);
      uint64_t v17 = (2 * v4) | 1;
      unint64_t v4 = 2 * v4 + 2;
      if (!v16) {
        unint64_t v4 = v17;
      }
    }
    while (v4 < v2);
    char v26 = __clz(__rbit64(-2 - v4));
    if (v4 == -2) {
      char v27 = 0;
    }
    else {
      char v27 = v26 + 1;
    }
    unint64_t v28 = (v4 + 1) >> v27;
  }
  else
  {
    unint64_t v28 = 0;
  }
  if (v28) {
    unint64_t v2 = v28 - 1;
  }
  return v3 + 8 * v2;
}

void sub_FA22F0(_Unwind_Exception *a1)
{
}

void sub_FA2328(_Unwind_Exception *a1)
{
}

void *sub_FA2350(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  uint64_t v5 = sub_F9DBDC(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    uint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  uint64_t v7 = (char *)operator new(0x5F4uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 1524;
  if (a2)
  {
    uint64_t v8 = (char *)operator new(80 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[80 * v4];
  }
  return a1;
}

void sub_FA2434(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  uint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    uint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FA24BC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = sub_FA08AC(a1, a3, 1);
  if (!v5) {
    return 0xFFFFLL;
  }
  uint64_t v6 = &v5[-*(int *)v5];
  if (*(unsigned __int16 *)v6 < 5u) {
    return 0xFFFFLL;
  }
  if (!*((_WORD *)v6 + 2)) {
    return 0xFFFFLL;
  }
  uint64_t v7 = &v5[*((unsigned __int16 *)v6 + 2) + *(unsigned int *)&v5[*((unsigned __int16 *)v6 + 2)]];
  if (*(_DWORD *)v7 <= HIDWORD(a3)) {
    return 0xFFFFLL;
  }
  uint64_t v8 = &v7[4 * HIDWORD(a3) + 4 + *(unsigned int *)&v7[4 * HIDWORD(a3) + 4]];
  uint64_t v9 = &v8[-*(int *)v8];
  if (*(unsigned __int16 *)v9 < 0xBu) {
    return 0xFFFFLL;
  }
  uint64_t v10 = *((unsigned __int16 *)v9 + 5);
  if (!v10) {
    return 0xFFFFLL;
  }
  char v11 = &v8[v10 + *(unsigned int *)&v8[v10]];
  unsigned int v14 = *(_DWORD *)v11;
  char v12 = v11 + 4;
  unint64_t v13 = v14;
  long long v15 = &v12[8 * v14];
  unint64_t v16 = (((int)((uint64_t)a2 >> 28) & 0xFFFFFFFFFFFFFFF0) + (a2 << 32)) & 0xFFFFFFFFFFFFFFF0 | (a2 >> 57) & 8 | (a2 >> 59) & 4 | (a2 >> 61) & 2 | (a2 >> 63);
  uint64_t v17 = v12;
  while (v13)
  {
    uint64_t v18 = (unint64_t *)&v17[(4 * v13) & 0x7FFFFFFF8];
    unint64_t v20 = *v18;
    uint64_t v19 = (char *)(v18 + 1);
    unint64_t v21 = v13 >> 1;
    v13 += ~(v13 >> 1);
    if (v20 >= v16) {
      unint64_t v13 = v21;
    }
    else {
      uint64_t v17 = v19;
    }
  }
  if (v17 != v15 && *(void *)v17 == v16) {
    return (unint64_t)(v17 - v12) >> 3;
  }
  else {
    return 0xFFFFLL;
  }
}

void sub_FA25E0(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = __ROR8__(*a2, 32);
  unint64_t v7 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v6 ^ (v6 >> 33))) >> 33));
  sub_FA0DE8((uint64_t *)(*(void *)(*(void *)(a1 + 16) + 16) + 200 * ((v7 ^ (v7 >> 33)) % **(void **)(a1 + 16))), a2, (uint64_t)&v13);
  if (!v15)
  {
    unint64_t v8 = __ROR8__(*a2, 32);
    unint64_t v9 = 0xC4CEB9FE1A85EC53
       * ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v8 ^ (v8 >> 33))) >> 33));
    sub_39ABD8((uint64_t *)(*(void *)(*(void *)(a1 + 16) + 96)+ 200 * ((v9 ^ (v9 >> 33)) % *(void *)(*(void *)(a1 + 16) + 80))), a2, (uint64_t)&v12, 8uLL, 0);
  }
  uint64_t v10 = v14;
  *a3 = v13;
  a3[1] = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    char v11 = v14;
    if (v14)
    {
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_FA274C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FA276C()
{
  *(void *)(v0 - 8) = 0;
  *(void *)(v0 - 48) = v1;
  *(void *)(v0 - 40) = 0;
  *(void *)(v0 - 32) = 0;
  *(void *)(v0 - 24) = 0;
}

void sub_FA277C()
{
  unk_25FD0FF = 16641;
  word_25FD0E8 = 65;
  byte_25FD117 = 1;
  byte_25FD101 = 0;
}

void **sub_FA27A4(void **a1, void *a2)
{
  *a1 = a2;
  a1[1] = (void *)sub_375FD8(a2);
  uint64_t v4 = (_DWORD *)sub_374D14(*a1);
  int v5 = sub_29AEC4(v4);
  if (v5)
  {
    uint64_t v6 = sub_374D14(*a1);
    int v5 = sub_29AEB4(v6);
  }
  *((_DWORD *)a1 + 4) = v5;
  *((_WORD *)a1 + 10) = *(_WORD *)(sub_3769E8(*a1) + 3872);
  uint64_t v7 = sub_375E94(a2);
  unint64_t v8 = a1[1];
  a1[3] = (void *)v7;
  a1[4] = v8;
  sub_F170F0((uint64_t *)a1 + 5, a2);
  a1[11] = (void *)sub_374E44(a2);
  a1[12] = (void *)sub_374E8C(a2);
  a1[13] = (void *)sub_50BE8((uint64_t)a2);
  return a1;
}

void sub_FA2858(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 64);
  if (v3)
  {
    *(void *)(v1 + 72) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_FA2878(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, char a5)
{
  if (!*(_DWORD *)(a2 + 16))
  {
    unint64_t v18 = 0x7FFFFFFF00000000;
    LODWORD(v19) = -1;
    return v18 & 0xFFFFFFFF00000000 | v19;
  }
  int v23 = 0;
  int v24 = 0;
  uint64_t v25 = 0;
  unint64_t v10 = *(void *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  if (!v11)
  {
LABEL_11:
    LODWORD(v17) = 0;
    goto LABEL_12;
  }
  char v12 = sub_F93238(*(void *)(a1 + 24), v11, 1);
  if (v12)
  {
    uint64_t v13 = &v12[-*(int *)v12];
    if (*(unsigned __int16 *)v13 >= 9u)
    {
      uint64_t v14 = *((unsigned __int16 *)v13 + 4);
      if (v14)
      {
        char v15 = (int *)sub_F930D4((unsigned int *)&v12[v14 + *(unsigned int *)&v12[v14]], HIDWORD(v11));
        unint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v16 >= 5u)
        {
          uint64_t v17 = v16[2];
          if (v17) {
            LODWORD(v17) = *((unsigned __int8 *)v15 + v17);
          }
          goto LABEL_12;
        }
        goto LABEL_11;
      }
    }
  }
  LODWORD(v17) = -1;
LABEL_12:
  int v22 = v17;
  sub_FA2A1C((void **)a1, v10, &v22, 0, a3, a4, a5, (uint64_t)&v23);
  unint64_t v20 = v23;
  if (v23 != v24)
  {
    LODWORD(v19) = -1;
    unint64_t v20 = v23;
    while (v20[1] != *(void *)(a2 + 8))
    {
      v20 += 5;
      if (v20 == v24)
      {
        unint64_t v18 = 0x7FFFFFFF00000000;
        if (v23) {
          goto LABEL_20;
        }
        return v18 & 0xFFFFFFFF00000000 | v19;
      }
    }
  }
  if (v20 == v24)
  {
    unint64_t v18 = 0x7FFFFFFF00000000;
    LODWORD(v19) = -1;
    if (!v23) {
      return v18 & 0xFFFFFFFF00000000 | v19;
    }
    goto LABEL_20;
  }
  uint64_t v19 = *(void *)((char *)v20 + 28);
  unint64_t v18 = v19 & 0xFFFFFFFF00000000;
  if (v23)
  {
LABEL_20:
    int v24 = v23;
    operator delete(v23);
  }
  return v18 & 0xFFFFFFFF00000000 | v19;
}

void sub_FA2A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_FA2A1C(void **a1, unint64_t a2, _DWORD *a3, unsigned int a4, int *a5, uint64_t a6, char a7, uint64_t a8)
{
  unint64_t v98 = a2;
  *(void *)(a8 + 8) = *(void *)a8;
  if (*a3)
  {
    char v12 = a4;
    unint64_t v15 = sub_F968AC((uint64_t)a1[3], HIDWORD(a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(a2) << 32), ((a2 & 2) == 0) ^ a4, a3);
    unint64_t v97 = v15;
    unsigned int v16 = v15;
    unint64_t v17 = HIDWORD(v15);
    if (v15 && HIDWORD(v15) != -1)
    {
      uint64_t v19 = (void *)v15;
      unint64_t v20 = sub_F96DE8((uint64_t)a1[4], v15, 1);
      if (v20)
      {
        unint64_t v21 = &v20[-*(int *)v20];
        if (*(unsigned __int16 *)v21 >= 5u)
        {
          uint64_t v22 = *((unsigned __int16 *)v21 + 2);
          if (v22)
          {
            int v23 = &v20[v22 + *(unsigned int *)&v20[v22]];
            if (*(_DWORD *)v23 > v17)
            {
              int v24 = &v23[4 * v17 + 4 + *(unsigned int *)&v23[4 * v17 + 4]];
              uint64_t v25 = &v24[-*(int *)v24];
              if (*(unsigned __int16 *)v25 >= 9u)
              {
                uint64_t v26 = *((unsigned __int16 *)v25 + 4);
                if (v26)
                {
                  if (*(_DWORD *)&v24[v26 + *(unsigned int *)&v24[v26]])
                  {
                    char v27 = sub_F96DE8((uint64_t)a1[4], v16, 1);
                    if (v27)
                    {
                      unint64_t v28 = &v27[-*(int *)v27];
                      if (*(unsigned __int16 *)v28 >= 5u)
                      {
                        uint64_t v29 = *((unsigned __int16 *)v28 + 2);
                        if (v29)
                        {
                          uint64_t v30 = &v27[v29 + *(unsigned int *)&v27[v29]];
                          if (*(_DWORD *)v30 > v17)
                          {
                            uint64_t v31 = &v30[4 * v17 + 4 + *(unsigned int *)&v30[4 * v17 + 4]];
                            uint64_t v32 = &v31[-*(int *)v31];
                            if (*(unsigned __int16 *)v32 >= 0xBu)
                            {
                              uint64_t v33 = *((unsigned __int16 *)v32 + 5);
                              if (v33)
                              {
                                if (*(_DWORD *)&v31[v33 + *(unsigned int *)&v31[v33]])
                                {
                                  unint64_t v34 = a1[11];
                                  __int16 v35 = *((_WORD *)a1 + 10);
                                  int v36 = *((_DWORD *)a1 + 4);
                                  uint64_t v37 = (uint64_t)a1[1];
                                  int v38 = *a5;
                                  __p = v19;
                                  *(_DWORD *)uint64_t v79 = v38;
                                  *(void *)&v79[4] = 0x8000000080000000;
                                  int v80 = 0x7FFFFFFF;
                                  char v81 = a7;
                                  __int16 v82 = v35;
                                  int v83 = v36;
                                  char v84 = 0;
                                  int v85 = 0x7FFFFFFF;
                                  sub_FA98E4((uint64_t *)&__p, v34, v37, (uint64_t)&v89);
                                  uint64_t v39 = (uint64_t)a1[1];
                                  BOOL v40 = sub_F06620((uint64_t)a1[11], v90);
                                  if (v94) {
                                    BOOL v41 = 0;
                                  }
                                  else {
                                    BOOL v41 = v40;
                                  }
                                  if (v41)
                                  {
                                    unint64_t v42 = v89;
                                    unsigned int v66 = v90;
                                    int v43 = v95;
                                    unint64_t v44 = sub_383034(v39, v89, 1);
                                    if (v44)
                                    {
                                      uint64_t v45 = &v44[-*(int *)v44];
                                      if (*(unsigned __int16 *)v45 >= 0xFu)
                                      {
                                        if (*((_WORD *)v45 + 7))
                                        {
                                          uint64_t v46 = &v44[*((unsigned __int16 *)v45 + 7)
                                                   + *(unsigned int *)&v44[*((unsigned __int16 *)v45 + 7)]];
                                          if (*(_DWORD *)v46 > HIDWORD(v42))
                                          {
                                            unint64_t v47 = &v46[4 * HIDWORD(v42)
                                                     + 4
                                                     + *(unsigned int *)&v46[4 * HIDWORD(v42) + 4]];
                                            unint64_t v48 = &v47[-*(int *)v47];
                                            if (*(unsigned __int16 *)v48 >= 5u)
                                            {
                                              uint64_t v49 = *((unsigned __int16 *)v48 + 2);
                                              if (v49)
                                              {
                                                unint64_t v50 = (unsigned int *)&v47[v49 + *(unsigned int *)&v47[v49]];
                                                unsigned int v51 = v66 + *(_DWORD *)(v39 + 3872) * v43;
                                                if (v51 < *v50 && v50[v51 + 1] != -1)
                                                {
                                                  uint64_t v52 = (uint64_t)a1[1];
                                                  if (v12) {
                                                    sub_FAA064(v52, (unint64_t)v19, a2, v90, v95, (char **)a8);
                                                  }
                                                  else {
                                                    sub_FA9BFC(v52, (unint64_t)v19, a2, v90, v95, (char **)a8);
                                                  }
                                                  return;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  if (sub_37D0C8(*a1)) {
                                    return;
                                  }
                                  unint64_t v53 = (HIDWORD(v89)
                                       + ((unint64_t)v89 << 6)
                                       + ((unint64_t)v89 >> 2)
                                       + 2654435769u) ^ v89;
                                  unint64_t v54 = (v90 + (v53 << 6) + (v53 >> 2) + 2654435769u) ^ v53;
                                  unint64_t v55 = (v91 + (v54 << 6) + (v54 >> 2) + 2654435769u) ^ v54;
                                  unint64_t v56 = (v92 + (v55 << 6) + (v55 >> 2) + 2654435769u) ^ v55;
                                  unint64_t v57 = (v93 + (v56 << 6) + (v56 >> 2) + 2654435769u) ^ v56;
                                  unint64_t v58 = (v94 + (v57 << 6) + (v57 >> 2) + 2654435769u) ^ v57;
                                  unint64_t v59 = (v95 + (v58 << 6) + (v58 >> 2) + 2654435769u) ^ v58;
                                  sub_FAA4F0((uint64_t *)(a1[12][2]+ 272 * (((v96 + (v59 << 6) + (v59 >> 2) + 2654435769u) ^ v59) % *a1[12])), (unsigned int *)&v89, (uint64_t)&v86);
                                  if (!v88)
                                  {
                                    *(void *)&long long v99 = v19;
                                    sub_FA3658(&__p, &v99, 1uLL);
                                    sub_FA3368(a1, (unsigned int **)&__p, a5, a6, v94, 4u);
                                    if (__p)
                                    {
                                      *(void *)uint64_t v79 = __p;
                                      operator delete(__p);
                                    }
                                    sub_FA32A8(a1[12], (unsigned int *)&v89, (uint64_t)&__p);
                                    sub_FA36EC((uint64_t)&v86, (long long *)&__p);
                                    sub_14A84((uint64_t)&__p);
                                  }
                                  if (v86 && *v86 != v86[1])
                                  {
                                    if (v12) {
                                      sub_FA3BAC((uint64_t)a1, &v97, &v98, v86, a8);
                                    }
                                    else {
                                      sub_FA3778((uint64_t)a1, &v97, &v98, v86, a8);
                                    }
LABEL_75:
                                    unint64_t v65 = v87;
                                    if (v87 && !atomic_fetch_add(&v87->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                    {
                                      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                                      std::__shared_weak_count::__release_weak(v65);
                                    }
                                    return;
                                  }
                                  if (sub_723EC(3u))
                                  {
                                    sub_6BAC((uint64_t)&__p);
                                    sub_188FC78(&__p, (uint64_t)"Costs are not available from cache (after computing them). LRUCache issue or differing keys.", 92);
                                    std::stringbuf::str();
                                    sub_7246C((uint64_t *)&v99, 3u);
                                    if (SBYTE7(v100) < 0) {
                                      operator delete((void *)v99);
                                    }
                                    sub_111ECAC((uint64_t)&__p);
                                  }
                                  uint64_t v75 = 0;
                                  unsigned int v76 = operator new(0x20uLL);
                                  long long v77 = xmmword_20B9800;
                                  strcpy((char *)v76, "ShortcutPool.Error.CacheAccess");
                                  unint64_t v73 = 0;
                                  int v74 = 0;
                                  uint64_t v103 = 0;
                                  long long v101 = 0u;
                                  long long v102 = 0u;
                                  long long v99 = 0u;
                                  long long v100 = 0u;
                                  char v72 = 0;
                                  LOBYTE(v71) = 0;
                                  uint64_t v69 = 0;
                                  unint64_t v70 = 0;
                                  uint64_t v67 = 0;
                                  long long v68 = 0;
                                  sub_29DC44((uint64_t)&__p, (long long **)&v73, &v99, &v71, &v69, 0, (uint64_t)&v67, 1);
                                  nullsub_1(1);
                                  sub_29E11C((uint64_t)&__p);
                                  BOOL v60 = v68;
                                  if (v68 && !atomic_fetch_add(&v68->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                  {
                                    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                                    std::__shared_weak_count::__release_weak(v60);
                                  }
                                  unint64_t v61 = v70;
                                  if (v70 && !atomic_fetch_add(&v70->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                  {
                                    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                                    std::__shared_weak_count::__release_weak(v61);
                                  }
                                  if (v72 < 0)
                                  {
                                    operator delete((void *)v71);
                                    if ((SHIBYTE(v103) & 0x80000000) == 0)
                                    {
LABEL_55:
                                      if ((SHIBYTE(v101) & 0x80000000) == 0) {
                                        goto LABEL_56;
                                      }
                                      goto LABEL_61;
                                    }
                                  }
                                  else if ((SHIBYTE(v103) & 0x80000000) == 0)
                                  {
                                    goto LABEL_55;
                                  }
                                  operator delete((void *)v102);
                                  if ((SHIBYTE(v101) & 0x80000000) == 0)
                                  {
LABEL_56:
                                    if ((SBYTE7(v100) & 0x80000000) == 0) {
                                      goto LABEL_57;
                                    }
                                    goto LABEL_62;
                                  }
LABEL_61:
                                  operator delete(*((void **)&v100 + 1));
                                  if ((SBYTE7(v100) & 0x80000000) == 0)
                                  {
LABEL_57:
                                    uint64_t v62 = (void **)v73;
                                    if (!v73)
                                    {
LABEL_72:
                                      if (SHIBYTE(v77) < 0) {
                                        operator delete(v76);
                                      }
                                      goto LABEL_75;
                                    }
                                    goto LABEL_63;
                                  }
LABEL_62:
                                  operator delete((void *)v99);
                                  uint64_t v62 = (void **)v73;
                                  if (!v73) {
                                    goto LABEL_72;
                                  }
LABEL_63:
                                  uint64_t v63 = v74;
                                  uint64_t v64 = v62;
                                  if (v74 == v62)
                                  {
LABEL_71:
                                    int v74 = v62;
                                    operator delete(v64);
                                    goto LABEL_72;
                                  }
                                  while (1)
                                  {
                                    if (*((char *)v63 - 1) < 0)
                                    {
                                      operator delete(*(v63 - 3));
                                      if ((*((char *)v63 - 25) & 0x80000000) == 0) {
                                        goto LABEL_66;
                                      }
LABEL_69:
                                      operator delete(*(v63 - 6));
                                      v63 -= 6;
                                      if (v63 == v62)
                                      {
LABEL_70:
                                        uint64_t v64 = v73;
                                        goto LABEL_71;
                                      }
                                    }
                                    else
                                    {
                                      if (*((char *)v63 - 25) < 0) {
                                        goto LABEL_69;
                                      }
LABEL_66:
                                      v63 -= 6;
                                      if (v63 == v62) {
                                        goto LABEL_70;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_FA31AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  if (*(char *)(v16 - 153) < 0)
  {
    operator delete(*(void **)(v16 - 176));
    sub_111ECAC((uint64_t)va);
    sub_14A84(v16 - 256);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)va);
  sub_14A84(v16 - 256);
  _Unwind_Resume(a1);
}

void sub_FA31F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31)
{
  sub_14A84(v31 - 256);
  _Unwind_Resume(a1);
}

void sub_FA32A8(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) + 2654435769u) ^ *a2;
  unint64_t v4 = (a2[2] + (v3 << 6) + (v3 >> 2) + 2654435769u) ^ v3;
  unint64_t v5 = ((int)a2[3] + (v4 << 6) + (v4 >> 2) + 2654435769u) ^ v4;
  unint64_t v6 = ((int)a2[4] + (v5 << 6) + (v5 >> 2) + 2654435769u) ^ v5;
  unint64_t v7 = ((int)a2[5] + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  unint64_t v8 = (*((unsigned __int8 *)a2 + 24) + (v7 << 6) + (v7 >> 2) + 2654435769u) ^ v7;
  unint64_t v9 = (*((unsigned __int16 *)a2 + 13) + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  sub_FAA4F0((uint64_t *)(a1[2] + 272 * (((a2[7] + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9) % *a1)), a2, a3);
}

void sub_FA3368(void **a1, unsigned int **a2, int *a3, uint64_t a4, char a5, unsigned int a6)
{
  if ((sub_37D0C8(*a1) & 1) == 0)
  {
    uint64_t v37 = 0;
    int v38 = 0;
    uint64_t v39 = 0;
    char v12 = *a2;
    uint64_t v13 = a2[1];
    if (v12 != v13)
    {
      int v14 = 0;
      do
      {
        v14 |= sub_FA3FE0((uint64_t)a1, v12, a3, a4, a5, (uint64_t)&v37);
        v12 += 2;
      }
      while (v12 != v13);
      unint64_t v15 = v37;
      if (v14)
      {
        __p = 0;
        unint64_t v47 = 0;
        uint64_t v48 = 0;
        sub_F92358(&v35, 0xCCCCCCCCCCCCCCCDLL * ((v38 - (unsigned char *)v37) >> 3), (uint64_t)&__p);
        if (__p)
        {
          unint64_t v47 = __p;
          operator delete(__p);
        }
        if (v38 != v37)
        {
          uint64_t v16 = 0;
          unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((v38 - (unsigned char *)v37) >> 3);
          do
          {
            unint64_t v18 = (char *)v37 + 40 * v16;
            uint64_t v19 = (void *)*((void *)v18 + 2);
            if (v19)
            {
              uint64_t v20 = 0;
              unint64_t v21 = (void *)*((void *)v18 + 2);
              do
              {
                ++v20;
                unint64_t v21 = (void *)*v21;
              }
              while (v21);
            }
            else
            {
              uint64_t v20 = 0;
            }
            sub_FAB404((unint64_t *)v35 + 3 * v16, *((void *)v35 + 3 * v16 + 1), v19, 0, v20);
            ++v16;
          }
          while (v16 != v17);
        }
        atomic_fetch_add((atomic_uint *volatile)sub_F72FEC(), 1u);
        char v45 = a5;
        if ((sub_37D0C8(*a1) & 1) == 0)
        {
          uint64_t v22 = sub_2E0C4();
          BOOL v40 = a1;
          BOOL v41 = &v35;
          unint64_t v42 = a3;
          uint64_t v43 = a4;
          unint64_t v44 = &v45;
          sub_FAA884((uint64_t)&__p, (uint64_t)v22, a6);
          sub_31A008((uint64_t)&__p);
        }
        atomic_fetch_add((atomic_uint *volatile)sub_F72FEC(), 0xFFFFFFFF);
        int v23 = (char *)v35;
        if (v35)
        {
          int v24 = v36;
          uint64_t v25 = v35;
          if (v36 != v35)
          {
            uint64_t v26 = v36;
            do
            {
              unint64_t v28 = (void *)*((void *)v26 - 3);
              v26 -= 24;
              char v27 = v28;
              if (v28)
              {
                *((void *)v24 - 2) = v27;
                operator delete(v27);
              }
              int v24 = v26;
            }
            while (v26 != v23);
            uint64_t v25 = v35;
          }
          int v36 = v23;
          operator delete(v25);
        }
        unint64_t v15 = v37;
      }
      if (v15)
      {
        uint64_t v29 = v38;
        uint64_t v30 = v15;
        if (v38 != (unsigned char *)v15)
        {
          do
          {
            uint64_t v31 = (void *)*(v29 - 3);
            if (v31)
            {
              do
              {
                uint64_t v32 = (void *)*v31;
                operator delete(v31);
                uint64_t v31 = v32;
              }
              while (v32);
            }
            unint64_t v34 = (void *)*(v29 - 5);
            v29 -= 5;
            uint64_t v33 = v34;
            *uint64_t v29 = 0;
            if (v34) {
              operator delete(v33);
            }
          }
          while (v29 != v15);
          uint64_t v30 = v37;
        }
        int v38 = v15;
        operator delete(v30);
      }
    }
  }
}

void sub_FA3600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
    sub_FA4880(&a13);
    _Unwind_Resume(a1);
  }
  sub_FA4880(&a13);
  _Unwind_Resume(a1);
}

void *sub_FA3658(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 61) {
      sub_2E00();
    }
    size_t v5 = 8 * a3;
    unint64_t v6 = (char *)operator new(8 * a3);
    *a1 = v6;
    a1[1] = v6;
    unint64_t v7 = &v6[v5];
    a1[2] = &v6[v5];
    memmove(v6, a2, v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_FA36D0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FA36EC(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  size_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  return a1;
}

void sub_FA3778(uint64_t a1, unint64_t *a2, unint64_t *a3, void *a4, uint64_t a5)
{
  unint64_t v10 = *a2;
  uint64_t v11 = sub_F96DE8(*(void *)(a1 + 32), *a2, 1);
  if (v11
    && (char v12 = &v11[-*(int *)v11], *(unsigned __int16 *)v12 >= 5u)
    && *((_WORD *)v12 + 2)
    && (uint64_t v13 = &v11[*((unsigned __int16 *)v12 + 2) + *(unsigned int *)&v11[*((unsigned __int16 *)v12 + 2)]],
        *(_DWORD *)v13 > HIDWORD(v10))
    && (int v14 = &v13[4 * HIDWORD(v10) + 4 + *(unsigned int *)&v13[4 * HIDWORD(v10) + 4]],
        unint64_t v15 = &v14[-*(int *)v14],
        *(unsigned __int16 *)v15 >= 0xBu)
    && (uint64_t v16 = *((unsigned __int16 *)v15 + 5)) != 0)
  {
    int v17 = *(_DWORD *)&v14[v16 + *(unsigned int *)&v14[v16]];
  }
  else
  {
    int v17 = 0;
  }
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  uint64_t v20 = sub_F96DE8(*(void *)(a1 + 8), *a2, 1);
  if (v20)
  {
    unint64_t v21 = &v20[-*(int *)v20];
    if (*(unsigned __int16 *)v21 >= 5u)
    {
      if (*((_WORD *)v21 + 2))
      {
        uint64_t v22 = &v20[*((unsigned __int16 *)v21 + 2) + *(unsigned int *)&v20[*((unsigned __int16 *)v21 + 2)]];
        if (*(_DWORD *)v22 > HIDWORD(v19))
        {
          int v23 = &v22[4 * HIDWORD(v19) + 4 + *(unsigned int *)&v22[4 * HIDWORD(v19) + 4]];
          int v24 = &v23[-*(int *)v23];
          if (*(unsigned __int16 *)v24 >= 9u)
          {
            uint64_t v25 = *((unsigned __int16 *)v24 + 4);
            if (v25)
            {
              uint64_t v26 = &v23[v25 + *(unsigned int *)&v23[v25]];
              unsigned int v29 = *(_DWORD *)v26;
              char v27 = v26 + 4;
              unint64_t v28 = v29;
              uint64_t v30 = &v27[v29];
              uint64_t v31 = v27;
              while (v28)
              {
                uint64_t v32 = (void *)((char *)v31 + ((4 * v28) & 0x7FFFFFFF8));
                unint64_t v34 = *v32;
                uint64_t v33 = v32 + 1;
                unint64_t v35 = v28 >> 1;
                v28 += ~(v28 >> 1);
                if (v34 >= v18) {
                  unint64_t v28 = v35;
                }
                else {
                  uint64_t v31 = v33;
                }
              }
              if (v31 != v30 && *v31 == v18)
              {
                unsigned int v36 = v31 - v27;
                LODWORD(v37) = (unsigned __int16)((v31 - v27) >> 3);
                if (v37 != 0xFFFF)
                {
                  uint64_t v38 = *(void *)(a1 + 8);
                  unint64_t v39 = *a2;
                  BOOL v40 = sub_F96DE8(v38, *a2, 1);
                  if (v40)
                  {
                    BOOL v41 = &v40[-*(int *)v40];
                    if (*(unsigned __int16 *)v41 >= 5u)
                    {
                      if (*((_WORD *)v41 + 2))
                      {
                        unint64_t v42 = &v40[*((unsigned __int16 *)v41 + 2)
                                 + *(unsigned int *)&v40[*((unsigned __int16 *)v41 + 2)]];
                        if (*(_DWORD *)v42 > HIDWORD(v39))
                        {
                          uint64_t v43 = &v42[4 * HIDWORD(v39) + 4 + *(unsigned int *)&v42[4 * HIDWORD(v39) + 4]];
                          unint64_t v44 = &v43[-*(int *)v43];
                          if (*(unsigned __int16 *)v44 >= 0xBu)
                          {
                            uint64_t v45 = *((unsigned __int16 *)v44 + 5);
                            if (v45)
                            {
                              uint64_t v46 = &v43[v45 + *(unsigned int *)&v43[v45]];
                              unsigned int v49 = *(_DWORD *)v46;
                              uint64_t v48 = (uint64_t *)(v46 + 4);
                              uint64_t v47 = v49;
                              if (v49)
                              {
                                int v50 = 0;
                                unsigned int v51 = (unsigned __int16)(v36 >> 3) * v17;
                                uint64_t v52 = &v48[v47];
                                unint64_t v73 = v52;
                                __int16 v72 = v37;
                                do
                                {
                                  while (1)
                                  {
                                    uint64_t v53 = v51;
                                    uint64_t v54 = *(unsigned int *)(*a4 + 8 * v51);
                                    unint64_t v55 = v54 == -1
                                        ? 0x7FFFFFFF00000000
                                        : (unint64_t)*(unsigned int *)(*a4 + 8 * v53 + 4) << 32;
                                    uint64_t v56 = *v48;
                                    unint64_t v57 = v55 | v54;
                                    unint64_t v59 = *(unint64_t **)(a5 + 8);
                                    unint64_t v58 = *(void *)(a5 + 16);
                                    if ((unint64_t)v59 >= v58) {
                                      break;
                                    }
                                    *unint64_t v59 = *a3;
                                    v59[1] = v56;
                                    v59[2] = *a2;
                                    *((_WORD *)v59 + 12) = v37;
                                    *((_WORD *)v59 + 13) = v50;
                                    *(unint64_t *)((char *)v59 + 28) = v57;
                                    *(void *)(a5 + 8) = v59 + 5;
                                    unsigned int v51 = v53 + 1;
                                    ++v50;
                                    if (++v48 == v52) {
                                      return;
                                    }
                                  }
                                  BOOL v60 = *(unint64_t **)a5;
                                  unint64_t v37 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v59 - *(void *)a5) >> 3);
                                  unint64_t v61 = v37 + 1;
                                  if (v37 + 1 > 0x666666666666666) {
                                    sub_2E00();
                                  }
                                  int v76 = v50;
                                  int v75 = v53;
                                  unint64_t v62 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v58 - (void)v60) >> 3);
                                  if (2 * v62 > v61) {
                                    unint64_t v61 = 2 * v62;
                                  }
                                  if (v62 >= 0x333333333333333) {
                                    unint64_t v63 = 0x666666666666666;
                                  }
                                  else {
                                    unint64_t v63 = v61;
                                  }
                                  if (v63 > 0x666666666666666) {
                                    sub_188D718();
                                  }
                                  uint64_t v74 = 40 * v63;
                                  uint64_t v64 = (char *)operator new(40 * v63);
                                  unint64_t v65 = &v64[40 * v37];
                                  *(void *)unint64_t v65 = *a3;
                                  *((void *)v65 + 1) = v56;
                                  *((void *)v65 + 2) = *a2;
                                  LOWORD(v37) = v72;
                                  *((_WORD *)v65 + 12) = v72;
                                  int v66 = v76;
                                  *((_WORD *)v65 + 13) = v76;
                                  *(void *)(v65 + 28) = v57;
                                  if (v59 == v60)
                                  {
                                    unint64_t v70 = v65;
                                  }
                                  else
                                  {
                                    uint64_t v67 = v65;
                                    do
                                    {
                                      long long v68 = *(_OWORD *)(v59 - 5);
                                      long long v69 = *(_OWORD *)(v59 - 3);
                                      unint64_t v70 = v67 - 40;
                                      *((_DWORD *)v67 - 2) = *((_DWORD *)v59 - 2);
                                      *(_OWORD *)(v67 - 24) = v69;
                                      *(_OWORD *)(v67 - 40) = v68;
                                      v59 -= 5;
                                      v67 -= 40;
                                    }
                                    while (v59 != v60);
                                  }
                                  long long v71 = v65 + 40;
                                  *(void *)a5 = v70;
                                  *(void *)(a5 + 8) = v65 + 40;
                                  *(void *)(a5 + 16) = &v64[v74];
                                  if (v60)
                                  {
                                    operator delete(v60);
                                    int v66 = v76;
                                  }
                                  uint64_t v52 = v73;
                                  *(void *)(a5 + 8) = v71;
                                  unsigned int v51 = v75 + 1;
                                  int v50 = v66 + 1;
                                  ++v48;
                                }
                                while (v48 != v73);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_FA3BAC(uint64_t a1, unint64_t *a2, unint64_t *a3, void *a4, uint64_t a5)
{
  unint64_t v10 = *a2;
  uint64_t v11 = sub_F96DE8(*(void *)(a1 + 32), *a2, 1);
  if (v11
    && (char v12 = &v11[-*(int *)v11], *(unsigned __int16 *)v12 >= 5u)
    && *((_WORD *)v12 + 2)
    && (uint64_t v13 = &v11[*((unsigned __int16 *)v12 + 2) + *(unsigned int *)&v11[*((unsigned __int16 *)v12 + 2)]],
        *(_DWORD *)v13 > HIDWORD(v10))
    && (int v14 = &v13[4 * HIDWORD(v10) + 4 + *(unsigned int *)&v13[4 * HIDWORD(v10) + 4]],
        unint64_t v15 = &v14[-*(int *)v14],
        *(unsigned __int16 *)v15 >= 0xBu)
    && (uint64_t v16 = *((unsigned __int16 *)v15 + 5)) != 0)
  {
    int v17 = *(_DWORD *)&v14[v16 + *(unsigned int *)&v14[v16]];
  }
  else
  {
    int v17 = 0;
  }
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  uint64_t v20 = sub_F96DE8(*(void *)(a1 + 8), *a2, 1);
  if (v20)
  {
    unint64_t v21 = &v20[-*(int *)v20];
    if (*(unsigned __int16 *)v21 >= 5u)
    {
      if (*((_WORD *)v21 + 2))
      {
        uint64_t v22 = &v20[*((unsigned __int16 *)v21 + 2) + *(unsigned int *)&v20[*((unsigned __int16 *)v21 + 2)]];
        if (*(_DWORD *)v22 > HIDWORD(v19))
        {
          int v23 = &v22[4 * HIDWORD(v19) + 4 + *(unsigned int *)&v22[4 * HIDWORD(v19) + 4]];
          int v24 = &v23[-*(int *)v23];
          if (*(unsigned __int16 *)v24 >= 0xBu)
          {
            uint64_t v25 = *((unsigned __int16 *)v24 + 5);
            if (v25)
            {
              uint64_t v26 = &v23[v25 + *(unsigned int *)&v23[v25]];
              unsigned int v29 = *(_DWORD *)v26;
              char v27 = v26 + 4;
              unint64_t v28 = v29;
              uint64_t v30 = &v27[v29];
              uint64_t v31 = v27;
              while (v28)
              {
                uint64_t v32 = (void *)((char *)v31 + ((4 * v28) & 0x7FFFFFFF8));
                unint64_t v34 = *v32;
                uint64_t v33 = v32 + 1;
                unint64_t v35 = v28 >> 1;
                v28 += ~(v28 >> 1);
                if (v34 >= v18) {
                  unint64_t v28 = v35;
                }
                else {
                  uint64_t v31 = v33;
                }
              }
              if (v31 != v30 && *v31 == v18)
              {
                unsigned int v36 = v31 - v27;
                LODWORD(v37) = (unsigned __int16)((v31 - v27) >> 3);
                if (v37 != 0xFFFF)
                {
                  uint64_t v38 = *(void *)(a1 + 8);
                  unint64_t v39 = *a2;
                  BOOL v40 = sub_F96DE8(v38, *a2, 1);
                  if (v40)
                  {
                    BOOL v41 = &v40[-*(int *)v40];
                    if (*(unsigned __int16 *)v41 >= 5u)
                    {
                      if (*((_WORD *)v41 + 2))
                      {
                        unint64_t v42 = &v40[*((unsigned __int16 *)v41 + 2)
                                 + *(unsigned int *)&v40[*((unsigned __int16 *)v41 + 2)]];
                        if (*(_DWORD *)v42 > HIDWORD(v39))
                        {
                          uint64_t v43 = &v42[4 * HIDWORD(v39) + 4 + *(unsigned int *)&v42[4 * HIDWORD(v39) + 4]];
                          unint64_t v44 = &v43[-*(int *)v43];
                          if (*(unsigned __int16 *)v44 >= 9u)
                          {
                            uint64_t v45 = *((unsigned __int16 *)v44 + 4);
                            if (v45)
                            {
                              uint64_t v46 = &v43[v45 + *(unsigned int *)&v43[v45]];
                              unsigned int v49 = *(_DWORD *)v46;
                              uint64_t v48 = (uint64_t *)(v46 + 4);
                              uint64_t v47 = v49;
                              if (v49)
                              {
                                int v50 = 0;
                                unsigned int v51 = (unsigned __int16)(v36 >> 3);
                                uint64_t v52 = &v48[v47];
                                __int16 v75 = v37;
                                uint64_t v74 = v52;
                                do
                                {
                                  while (1)
                                  {
                                    uint64_t v54 = v51;
                                    uint64_t v55 = *(unsigned int *)(*a4 + 8 * v51);
                                    unint64_t v56 = v55 == -1
                                        ? 0x7FFFFFFF00000000
                                        : (unint64_t)*(unsigned int *)(*a4 + 8 * v54 + 4) << 32;
                                    uint64_t v57 = *v48;
                                    unint64_t v58 = v56 | v55;
                                    BOOL v60 = *(void **)(a5 + 8);
                                    unint64_t v59 = *(void *)(a5 + 16);
                                    if ((unint64_t)v60 >= v59) {
                                      break;
                                    }
                                    unint64_t v53 = *a3;
                                    void *v60 = v57;
                                    v60[1] = v53;
                                    v60[2] = *a2;
                                    *((_WORD *)v60 + 12) = v50;
                                    *((_WORD *)v60 + 13) = v37;
                                    *(void *)((char *)v60 + 28) = v58;
                                    *(void *)(a5 + 8) = v60 + 5;
                                    unsigned int v51 = v54 + v17;
                                    ++v50;
                                    if (++v48 == v52) {
                                      return;
                                    }
                                  }
                                  unint64_t v61 = *(void **)a5;
                                  unint64_t v37 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v60 - *(void *)a5) >> 3);
                                  unint64_t v62 = v37 + 1;
                                  if (v37 + 1 > 0x666666666666666) {
                                    sub_2E00();
                                  }
                                  int v79 = v50;
                                  unint64_t v77 = v58;
                                  int v78 = v54;
                                  unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v59 - (void)v61) >> 3);
                                  if (2 * v63 > v62) {
                                    unint64_t v62 = 2 * v63;
                                  }
                                  if (v63 >= 0x333333333333333) {
                                    unint64_t v64 = 0x666666666666666;
                                  }
                                  else {
                                    unint64_t v64 = v62;
                                  }
                                  if (v64 > 0x666666666666666) {
                                    sub_188D718();
                                  }
                                  uint64_t v76 = 40 * v64;
                                  unint64_t v65 = (char *)operator new(40 * v64);
                                  int v66 = &v65[40 * v37];
                                  unint64_t v67 = *a3;
                                  *(void *)int v66 = v57;
                                  *((void *)v66 + 1) = v67;
                                  *((void *)v66 + 2) = *a2;
                                  int v68 = v79;
                                  *((_WORD *)v66 + 12) = v79;
                                  LOWORD(v37) = v75;
                                  *((_WORD *)v66 + 13) = v75;
                                  *(void *)(v66 + 28) = v77;
                                  if (v60 == v61)
                                  {
                                    __int16 v72 = v66;
                                  }
                                  else
                                  {
                                    long long v69 = v66;
                                    do
                                    {
                                      long long v70 = *(_OWORD *)(v60 - 5);
                                      long long v71 = *(_OWORD *)(v60 - 3);
                                      __int16 v72 = v69 - 40;
                                      *((_DWORD *)v69 - 2) = *((_DWORD *)v60 - 2);
                                      *(_OWORD *)(v69 - 24) = v71;
                                      *(_OWORD *)(v69 - 40) = v70;
                                      v60 -= 5;
                                      v69 -= 40;
                                    }
                                    while (v60 != v61);
                                  }
                                  unint64_t v73 = v66 + 40;
                                  *(void *)a5 = v72;
                                  *(void *)(a5 + 8) = v66 + 40;
                                  *(void *)(a5 + 16) = &v65[v76];
                                  if (v61)
                                  {
                                    operator delete(v61);
                                    int v68 = v79;
                                  }
                                  uint64_t v52 = v74;
                                  *(void *)(a5 + 8) = v73;
                                  unsigned int v51 = v78 + v17;
                                  int v50 = v68 + 1;
                                  ++v48;
                                }
                                while (v48 != v74);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_FA3FE0(uint64_t a1, unsigned int *a2, int *a3, uint64_t a4, char a5, uint64_t a6)
{
  __int16 v9 = *(_WORD *)(a1 + 20);
  int v10 = *(_DWORD *)(a1 + 16);
  uint64_t v11 = *(void **)(a1 + 88);
  uint64_t v12 = *(void *)(a1 + 8);
  int v13 = *a3;
  v109[0] = *(void **)a2;
  LODWORD(v109[1]) = v13;
  *(void **)((char *)&v109[1] + 4) = (void *)0x8000000080000000;
  HIDWORD(v109[2]) = 0x7FFFFFFF;
  LOBYTE(v109[3]) = a5;
  WORD1(v109[3]) = v9;
  HIDWORD(v109[3]) = v10;
  LOBYTE(v110) = 0;
  DWORD1(v110) = 0x7FFFFFFF;
  sub_FA98E4((uint64_t *)v109, v11, v12, (uint64_t)&v111);
  uint64_t v14 = *(void *)(a1 + 8);
  if (sub_F06620(*(void *)(a1 + 88), v112) && !v116)
  {
    unint64_t v15 = v111;
    unsigned int v16 = v112;
    int v17 = v117;
    unint64_t v18 = sub_383034(v14, v111, 1);
    if (v18)
    {
      unint64_t v19 = &v18[-*(int *)v18];
      if (*(unsigned __int16 *)v19 >= 0xFu)
      {
        if (*((_WORD *)v19 + 7))
        {
          uint64_t v20 = &v18[*((unsigned __int16 *)v19 + 7) + *(unsigned int *)&v18[*((unsigned __int16 *)v19 + 7)]];
          if (*(_DWORD *)v20 > HIDWORD(v15))
          {
            unint64_t v21 = &v20[4 * HIDWORD(v15) + 4 + *(unsigned int *)&v20[4 * HIDWORD(v15) + 4]];
            uint64_t v22 = &v21[-*(int *)v21];
            if (*(unsigned __int16 *)v22 >= 5u)
            {
              uint64_t v23 = *((unsigned __int16 *)v22 + 2);
              if (v23)
              {
                int v24 = (unsigned int *)&v21[v23 + *(unsigned int *)&v21[v23]];
                unsigned int v25 = v16 + *(_DWORD *)(v14 + 3872) * v17;
                if (v25 < *v24 && v24[v25 + 1] != -1) {
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  if (!*a2) {
    goto LABEL_19;
  }
  uint64_t v26 = sub_F93238(*(void *)(a1 + 24), *a2, 1);
  if (!v26 || (v27 = &v26[-*(int *)v26], *(unsigned __int16 *)v27 < 9u) || (uint64_t v28 = *((unsigned __int16 *)v27 + 4)) == 0)
  {
    int v32 = -1;
    goto LABEL_20;
  }
  unsigned int v29 = (int *)sub_F930D4((unsigned int *)&v26[v28 + *(unsigned int *)&v26[v28]], a2[1]);
  uint64_t v30 = (unsigned __int16 *)((char *)v29 - *v29);
  if (*v30 < 5u || (uint64_t v31 = v30[2]) == 0)
  {
LABEL_19:
    int v32 = 0;
    goto LABEL_20;
  }
  int v32 = *((unsigned __int8 *)v29 + v31);
LABEL_20:
  unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3);
  unint64_t v34 = (v32 + 1);
  if (v34 > v33) {
    sub_FAB798((void **)a6, v34 - v33);
  }
  unint64_t v35 = (HIDWORD(v111)
       + ((unint64_t)v111 << 6)
       + ((unint64_t)v111 >> 2)
       + 2654435769u) ^ v111;
  unint64_t v36 = (v112 + (v35 << 6) + (v35 >> 2) + 2654435769u) ^ v35;
  unint64_t v37 = (v113 + (v36 << 6) + (v36 >> 2) + 2654435769u) ^ v36;
  unint64_t v38 = (v114 + (v37 << 6) + (v37 >> 2) + 2654435769u) ^ v37;
  unint64_t v39 = (v115 + (v38 << 6) + (v38 >> 2) + 2654435769u) ^ v38;
  unint64_t v40 = (v116 + (v39 << 6) + (v39 >> 2) + 2654435769u) ^ v39;
  unint64_t v41 = (v117 + (v40 << 6) + (v40 >> 2) + 2654435769u) ^ v40;
  sub_FAA4F0((uint64_t *)(*(void *)(*(void *)(a1 + 96) + 16)+ 272 * (((v118 + (v41 << 6) + (v41 >> 2) + 2654435769u) ^ v41) % **(void **)(a1 + 96))), (unsigned int *)&v111, (uint64_t)v109);
  int v42 = LOBYTE(v109[2]);
  uint64_t v43 = (std::__shared_weak_count *)v109[1];
  if (v109[1] && !atomic_fetch_add((atomic_ullong *volatile)v109[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
    std::__shared_weak_count::__release_weak(v43);
    if (v42) {
      return 0;
    }
  }
  else if (v42)
  {
    return 0;
  }
  long long v110 = 0u;
  memset(v109, 0, sizeof(v109));
  sub_FA9314((uint64_t)v109);
  uint64_t v45 = ((unint64_t)(*((void *)&v110 + 1) + v110) * (unsigned __int128)0x8060180601806019) >> 64;
  unint64_t v46 = (v45 + ((unint64_t)(*((void *)&v110 + 1) + v110 - v45) >> 1)) >> 8;
  uint64_t v47 = *((void *)v109[1] + v46) + 12 * (*((void *)&v110 + 1) + v110 - 341 * v46);
  *(void *)uint64_t v47 = *(void *)a2;
  *(_DWORD *)(v47 + 8) = v32;
  __p = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  BOOL v48 = __CFADD__(*((void *)&v110 + 1), 1);
  uint64_t v49 = ++*((void *)&v110 + 1);
  if (v48) {
    goto LABEL_62;
  }
  do
  {
    unint64_t v50 = *((void *)v109[1] + (unint64_t)v110 / 0x155) + 12 * ((unint64_t)v110 % 0x155);
    unsigned int v51 = *(_DWORD *)(v50 + 8);
    uint64_t v104 = *(void *)v50;
    unsigned int v105 = v51;
    *(void *)&long long v110 = v110 + 1;
    *((void *)&v110 + 1) = v49 - 1;
    if ((unint64_t)v110 >= 0x2AA)
    {
      operator delete(*(void **)v109[1]);
      v109[1] = (char *)v109[1] + 8;
      *(void *)&long long v110 = v110 - 341;
    }
    unsigned int v52 = v105;
    if (!sub_36F918((void *)(*(void *)a6 + 40 * v105), &v104))
    {
      sub_FAB9FC(*(void *)a6 + 40 * v52, &v104, &v104);
      if (v52 != 1)
      {
        sub_FABD64(*(void *)(a1 + 24), (unsigned int *)&v104, &__p);
        uint64_t v54 = (uint64_t *)__p;
        unint64_t v53 = v107;
        if (__p != v107)
        {
          unsigned int v93 = v52 - 1;
          do
          {
            __int16 v56 = *(_WORD *)(a1 + 20);
            int v57 = *(_DWORD *)(a1 + 16);
            unint64_t v58 = *(void **)(a1 + 88);
            uint64_t v59 = *(void *)(a1 + 8);
            int v60 = *a3;
            uint64_t v119 = *v54;
            *(_DWORD *)uint64_t v120 = v60;
            *(void *)&v120[4] = 0x8000000080000000;
            int v121 = 0x7FFFFFFF;
            char v122 = a5;
            __int16 v123 = v56;
            int v124 = v57;
            char v125 = 0;
            int v126 = 0x7FFFFFFF;
            sub_FA98E4(&v119, v58, v59, (uint64_t)&v96);
            uint64_t v61 = *(void *)(a1 + 8);
            BOOL v62 = sub_F06620(*(void *)(a1 + 88), v97);
            if (v101) {
              BOOL v63 = 0;
            }
            else {
              BOOL v63 = v62;
            }
            if (!v63) {
              goto LABEL_50;
            }
            unint64_t v64 = v96;
            unsigned int v65 = v97;
            int v66 = v102;
            unint64_t v67 = sub_383034(v61, v96, 1);
            if (!v67
              || (int v68 = &v67[-*(int *)v67], *(unsigned __int16 *)v68 < 0xFu)
              || !*((_WORD *)v68 + 7)
              || (long long v69 = &v67[*((unsigned __int16 *)v68 + 7) + *(unsigned int *)&v67[*((unsigned __int16 *)v68 + 7)]],
                  *(_DWORD *)v69 <= HIDWORD(v64))
              || (long long v70 = &v69[4 * HIDWORD(v64) + 4 + *(unsigned int *)&v69[4 * HIDWORD(v64) + 4]],
                  long long v71 = &v70[-*(int *)v70],
                  *(unsigned __int16 *)v71 < 5u)
              || (uint64_t v72 = *((unsigned __int16 *)v71 + 2)) == 0
              || (unint64_t v73 = (unsigned int *)&v70[v72 + *(unsigned int *)&v70[v72]],
                  unsigned int v74 = v65 + *(_DWORD *)(v61 + 3872) * v66,
                  v74 >= *v73)
              || v73[v74 + 1] == -1)
            {
LABEL_50:
              unint64_t v75 = (HIDWORD(v96)
                   + 2654435769
                   + ((unint64_t)v96 << 6)
                   + ((unint64_t)v96 >> 2)) ^ v96;
              unint64_t v76 = (v97 + 2654435769 + (v75 << 6) + (v75 >> 2)) ^ v75;
              unint64_t v77 = (v98 + 2654435769 + (v76 << 6) + (v76 >> 2)) ^ v76;
              unint64_t v78 = (v99 + 2654435769 + (v77 << 6) + (v77 >> 2)) ^ v77;
              unint64_t v79 = (v100 + 2654435769 + (v78 << 6) + (v78 >> 2)) ^ v78;
              unint64_t v80 = (v101 + 2654435769 + (v79 << 6) + (v79 >> 2)) ^ v79;
              unint64_t v81 = (v102 + 2654435769 + (v80 << 6) + (v80 >> 2)) ^ v80;
              sub_FAA4F0((uint64_t *)(*(void *)(*(void *)(a1 + 96) + 16)+ 272 * (((v103 + 2654435769 + (v81 << 6) + (v81 >> 2)) ^ v81) % **(void **)(a1 + 96))), (unsigned int *)&v96, (uint64_t)&v119);
              int v82 = v120[8];
              int v83 = *(std::__shared_weak_count **)v120;
              if (*(void *)v120
                && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)v120 + 8), 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
                std::__shared_weak_count::__release_weak(v83);
                if (!v82)
                {
LABEL_53:
                  char v84 = v109[1];
                  if (v109[2] == v109[1]) {
                    int64_t v85 = 0;
                  }
                  else {
                    int64_t v85 = 341 * (((char *)v109[2] - (char *)v109[1]) >> 3) - 1;
                  }
                  unint64_t v86 = *((void *)&v110 + 1) + v110;
                  if (v85 == *((void *)&v110 + 1) + (void)v110)
                  {
                    sub_FA9314((uint64_t)v109);
                    char v84 = v109[1];
                    unint64_t v86 = *((void *)&v110 + 1) + v110;
                  }
                  unint64_t v55 = v84[v86 / 0x155] + 12 * (v86 % 0x155);
                  *(void *)unint64_t v55 = *v54;
                  *(_DWORD *)(v55 + 8) = v93;
                  ++*((void *)&v110 + 1);
                }
              }
              else if (!v82)
              {
                goto LABEL_53;
              }
            }
            ++v54;
          }
          while (v54 != v53);
        }
      }
    }
    uint64_t v49 = *((void *)&v110 + 1);
  }
  while (*((void *)&v110 + 1));
  if (__p)
  {
    uint64_t v107 = (uint64_t *)__p;
    operator delete(__p);
  }
LABEL_62:
  unsigned int v87 = (void **)v109[1];
  char v88 = (void **)v109[2];
  *((void *)&v110 + 1) = 0;
  unint64_t v89 = (char *)v109[2] - (char *)v109[1];
  if ((int *)((char *)v109[2] - (char *)v109[1]) >= (int *)((char *)&dword_10 + 1))
  {
    do
    {
      operator delete(*v87);
      char v88 = (void **)v109[2];
      unsigned int v87 = (void **)((char *)v109[1] + 8);
      v109[1] = v87;
      unint64_t v89 = (char *)v109[2] - (char *)v87;
    }
    while ((int *)((char *)v109[2] - (char *)v87) > &dword_10);
  }
  unint64_t v90 = v89 >> 3;
  if (v90 == 1)
  {
    uint64_t v91 = 170;
LABEL_68:
    *(void *)&long long v110 = v91;
  }
  else if (v90 == 2)
  {
    uint64_t v91 = 341;
    goto LABEL_68;
  }
  if (v87 != v88)
  {
    do
    {
      int v92 = *v87++;
      operator delete(v92);
    }
    while (v87 != v88);
    if (v109[2] != v109[1]) {
      v109[2] = (char *)v109[2] + (((char *)v109[1] - (char *)v109[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (v109[0]) {
    operator delete(v109[0]);
  }
  return 1;
}

void sub_FA4840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_4927C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FA4854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_4927C((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void *sub_FA4880(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    unint64_t v3 = (void *)a1[1];
    long long v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        size_t v5 = (void *)*(v3 - 3);
        if (v5)
        {
          do
          {
            unint64_t v6 = (void *)*v5;
            operator delete(v5);
            size_t v5 = v6;
          }
          while (v6);
        }
        unint64_t v8 = (void *)*(v3 - 5);
        v3 -= 5;
        unint64_t v7 = v8;
        void *v3 = 0;
        if (v8) {
          operator delete(v7);
        }
      }
      while (v3 != v2);
      long long v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL sub_FA4908(uint64_t a1, unsigned int *a2, int *a3, uint64_t a4, char a5)
{
  unsigned int v6 = *a2;
  if (!v6) {
    return 0;
  }
  int v10 = sub_F93238(*(void *)(a1 + 24), v6, 1);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = &v10[-*(int *)v10];
  if (*(unsigned __int16 *)v11 < 9u) {
    return 0;
  }
  uint64_t v12 = *((unsigned __int16 *)v11 + 4);
  if (!v12) {
    return 0;
  }
  int v13 = (int *)sub_F930D4((unsigned int *)&v10[v12 + *(unsigned int *)&v10[v12]], a2[1]);
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 < 5u) {
    return 0;
  }
  uint64_t v15 = v14[2];
  if (!v15) {
    return 0;
  }
  if (!*((unsigned char *)v13 + v15)) {
    return 0;
  }
  __int16 v16 = *(_WORD *)(a1 + 20);
  int v17 = *(_DWORD *)(a1 + 16);
  unint64_t v18 = *(void **)(a1 + 88);
  uint64_t v19 = *(void *)(a1 + 8);
  int v20 = *a3;
  uint64_t v51 = *(void *)a2;
  *(_DWORD *)unsigned int v52 = v20;
  *(void *)&v52[4] = 0x8000000080000000;
  int v53 = 0x7FFFFFFF;
  char v54 = a5;
  __int16 v55 = v16;
  int v56 = v17;
  char v57 = 0;
  int v58 = 0x7FFFFFFF;
  sub_FA98E4(&v51, v18, v19, (uint64_t)&v43);
  uint64_t v21 = *(void *)(a1 + 8);
  if (!sub_F06620(*(void *)(a1 + 88), v44)) {
    goto LABEL_20;
  }
  if (v48) {
    goto LABEL_20;
  }
  unint64_t v22 = v43;
  unsigned int v23 = v44;
  int v24 = v49;
  unsigned int v25 = sub_383034(v21, v43, 1);
  if (v25)
  {
    uint64_t v26 = &v25[-*(int *)v25];
    if (*(unsigned __int16 *)v26 >= 0xFu)
    {
      if (*((_WORD *)v26 + 7))
      {
        char v27 = &v25[*((unsigned __int16 *)v26 + 7) + *(unsigned int *)&v25[*((unsigned __int16 *)v26 + 7)]];
        if (*(_DWORD *)v27 > HIDWORD(v22))
        {
          uint64_t v28 = &v27[4 * HIDWORD(v22) + 4 + *(unsigned int *)&v27[4 * HIDWORD(v22) + 4]];
          unsigned int v29 = &v28[-*(int *)v28];
          if (*(unsigned __int16 *)v29 >= 5u)
          {
            uint64_t v30 = *((unsigned __int16 *)v29 + 2);
            if (v30)
            {
              uint64_t v31 = (unsigned int *)&v28[v30 + *(unsigned int *)&v28[v30]];
              unsigned int v32 = v23 + *(_DWORD *)(v21 + 3872) * v24;
              if (v32 < *v31 && v31[v32 + 1] != -1) {
                return 0;
              }
            }
          }
        }
      }
    }
  }
LABEL_20:
  unint64_t v35 = (HIDWORD(v43)
       + ((unint64_t)v43 << 6)
       + ((unint64_t)v43 >> 2)
       + 2654435769u) ^ v43;
  unint64_t v36 = (v44 + (v35 << 6) + (v35 >> 2) + 2654435769u) ^ v35;
  unint64_t v37 = (v45 + (v36 << 6) + (v36 >> 2) + 2654435769u) ^ v36;
  unint64_t v38 = (v46 + (v37 << 6) + (v37 >> 2) + 2654435769u) ^ v37;
  unint64_t v39 = (v47 + (v38 << 6) + (v38 >> 2) + 2654435769u) ^ v38;
  unint64_t v40 = (v48 + (v39 << 6) + (v39 >> 2) + 2654435769u) ^ v39;
  unint64_t v41 = (v49 + (v40 << 6) + (v40 >> 2) + 2654435769u) ^ v40;
  sub_FAA4F0((uint64_t *)(*(void *)(*(void *)(a1 + 96) + 16)+ 272 * (((v50 + (v41 << 6) + (v41 >> 2) + 2654435769u) ^ v41) % **(void **)(a1 + 96))), (unsigned int *)&v43, (uint64_t)&v51);
  BOOL v33 = v52[8] == 0;
  int v42 = *(std::__shared_weak_count **)v52;
  if (*(void *)v52 && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)v52 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
  }
  return v33;
}

void **sub_FA4C04(void **a1, void *a2)
{
  *a1 = a2;
  a1[1] = (void *)sub_3760BC(a2);
  long long v4 = (_DWORD *)sub_374D14(*a1);
  int v5 = sub_29AEC4(v4);
  if (v5)
  {
    uint64_t v6 = sub_374D14(*a1);
    int v5 = sub_29AEB4(v6);
  }
  *((_DWORD *)a1 + 4) = v5;
  *((_WORD *)a1 + 10) = *(_WORD *)(sub_3769E8(*a1) + 3872);
  uint64_t v7 = sub_375E94(a2);
  unint64_t v8 = a1[1];
  a1[3] = (void *)v7;
  a1[4] = v8;
  sub_F2CEBC();
  a1[660] = (void *)sub_374E5C(a2);
  a1[661] = (void *)sub_374E94(a2);
  a1[662] = (void *)sub_374EB4((uint64_t)a2);
  return a1;
}

void sub_FA4CC0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 5272))
  {
    sub_3A6230((void *)(v1 + 96));
    *(unsigned char *)(v1 + 5272) = 0;
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_FA4CEC(uint64_t a1, uint64_t a2, int *a3, signed int *a4, int a5)
{
  if (!*(_DWORD *)(a2 + 16))
  {
    unint64_t v18 = 0x7FFFFFFF00000000;
    LODWORD(v19) = -1;
    return v18 & 0xFFFFFFFF00000000 | v19;
  }
  unsigned int v23 = 0;
  int v24 = 0;
  uint64_t v25 = 0;
  unint64_t v10 = *(void *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  if (!v11)
  {
LABEL_11:
    LODWORD(v17) = 0;
    goto LABEL_12;
  }
  uint64_t v12 = sub_F93238(*(void *)(a1 + 24), v11, 1);
  if (v12)
  {
    int v13 = &v12[-*(int *)v12];
    if (*(unsigned __int16 *)v13 >= 9u)
    {
      uint64_t v14 = *((unsigned __int16 *)v13 + 4);
      if (v14)
      {
        uint64_t v15 = (int *)sub_F930D4((unsigned int *)&v12[v14 + *(unsigned int *)&v12[v14]], HIDWORD(v11));
        __int16 v16 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v16 >= 5u)
        {
          uint64_t v17 = v16[2];
          if (v17) {
            LODWORD(v17) = *((unsigned __int8 *)v15 + v17);
          }
          goto LABEL_12;
        }
        goto LABEL_11;
      }
    }
  }
  LODWORD(v17) = -1;
LABEL_12:
  int v22 = v17;
  sub_FA4E90((void **)a1, v10, &v22, 0, a3, a4, a5, (uint64_t)&v23);
  int v20 = v23;
  if (v23 != v24)
  {
    LODWORD(v19) = -1;
    int v20 = v23;
    while (v20[1] != *(void *)(a2 + 8))
    {
      v20 += 5;
      if (v20 == v24)
      {
        unint64_t v18 = 0x7FFFFFFF00000000;
        if (v23) {
          goto LABEL_20;
        }
        return v18 & 0xFFFFFFFF00000000 | v19;
      }
    }
  }
  if (v20 == v24)
  {
    unint64_t v18 = 0x7FFFFFFF00000000;
    LODWORD(v19) = -1;
    if (!v23) {
      return v18 & 0xFFFFFFFF00000000 | v19;
    }
    goto LABEL_20;
  }
  uint64_t v19 = *(void *)((char *)v20 + 28);
  unint64_t v18 = v19 & 0xFFFFFFFF00000000;
  if (v23)
  {
LABEL_20:
    int v24 = v23;
    operator delete(v23);
  }
  return v18 & 0xFFFFFFFF00000000 | v19;
}

void sub_FA4E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_FA4E90(void **a1, unint64_t a2, _DWORD *a3, unsigned int a4, int *a5, signed int *a6, int a7, uint64_t a8)
{
  unint64_t v83 = a2;
  *(void *)(a8 + 8) = *(void *)a8;
  if (*a3)
  {
    char v12 = a4;
    unint64_t v82 = sub_F968AC((uint64_t)a1[3], HIDWORD(a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(a2) << 32), ((a2 & 2) == 0) ^ a4, a3);
    unint64_t v15 = HIDWORD(v82);
    if (v82 && HIDWORD(v82) != -1)
    {
      uint64_t v17 = sub_F9CC14((uint64_t)a1[4], v82, 1);
      if (v17)
      {
        unint64_t v18 = &v17[-*(int *)v17];
        if (*(unsigned __int16 *)v18 >= 5u)
        {
          uint64_t v19 = *((unsigned __int16 *)v18 + 2);
          if (v19)
          {
            int v20 = &v17[v19 + *(unsigned int *)&v17[v19]];
            if (*(_DWORD *)v20 > HIDWORD(v82))
            {
              uint64_t v21 = &v20[4 * v15 + 4 + *(unsigned int *)&v20[4 * v15 + 4]];
              int v22 = &v21[-*(int *)v21];
              if (*(unsigned __int16 *)v22 >= 9u)
              {
                uint64_t v23 = *((unsigned __int16 *)v22 + 4);
                if (v23)
                {
                  if (*(_DWORD *)&v21[v23 + *(unsigned int *)&v21[v23]])
                  {
                    int v24 = sub_F9CC14((uint64_t)a1[4], v82, 1);
                    if (v24)
                    {
                      uint64_t v25 = &v24[-*(int *)v24];
                      if (*(unsigned __int16 *)v25 >= 5u)
                      {
                        uint64_t v26 = *((unsigned __int16 *)v25 + 2);
                        if (v26)
                        {
                          char v27 = &v24[v26 + *(unsigned int *)&v24[v26]];
                          if (*(_DWORD *)v27 > HIDWORD(v82))
                          {
                            uint64_t v28 = &v27[4 * v15 + 4 + *(unsigned int *)&v27[4 * v15 + 4]];
                            unsigned int v29 = &v28[-*(int *)v28];
                            if (*(unsigned __int16 *)v29 >= 0xBu)
                            {
                              uint64_t v30 = *((unsigned __int16 *)v29 + 5);
                              if (v30)
                              {
                                if (*(_DWORD *)&v28[v30 + *(unsigned int *)&v28[v30]])
                                {
                                  sub_FA56F0((uint64_t *)&v82, a5, a6, a7, (uint64_t)(a1 + 5), *((_WORD *)a1 + 10), *((_DWORD *)a1 + 4), a1[660], (uint64_t)&v74, (uint64_t)a1[1], a1[662]);
                                  uint64_t v31 = (uint64_t)a1[1];
                                  BOOL v32 = sub_F06620((uint64_t)a1[660], v75);
                                  if (v79) {
                                    BOOL v33 = 0;
                                  }
                                  else {
                                    BOOL v33 = v32;
                                  }
                                  if (v33)
                                  {
                                    unint64_t v34 = v74;
                                    unsigned int v35 = v75;
                                    int v36 = v80;
                                    unint64_t v37 = sub_383520(v31, v74, 1);
                                    if (v37)
                                    {
                                      unint64_t v38 = &v37[-*(int *)v37];
                                      if (*(unsigned __int16 *)v38 >= 0xFu)
                                      {
                                        if (*((_WORD *)v38 + 7))
                                        {
                                          unint64_t v39 = &v37[*((unsigned __int16 *)v38 + 7)
                                                   + *(unsigned int *)&v37[*((unsigned __int16 *)v38 + 7)]];
                                          if (*(_DWORD *)v39 > HIDWORD(v34))
                                          {
                                            unint64_t v40 = &v39[4 * HIDWORD(v34)
                                                     + 4
                                                     + *(unsigned int *)&v39[4 * HIDWORD(v34) + 4]];
                                            unint64_t v41 = &v40[-*(int *)v40];
                                            if (*(unsigned __int16 *)v41 >= 5u)
                                            {
                                              uint64_t v42 = *((unsigned __int16 *)v41 + 2);
                                              if (v42)
                                              {
                                                unint64_t v43 = (unsigned int *)&v40[v42 + *(unsigned int *)&v40[v42]];
                                                unsigned int v44 = v35 + *(_DWORD *)(v31 + 3872) * v36;
                                                if (v44 < *v43 && v43[v44 + 1] != -1)
                                                {
                                                  uint64_t v45 = (uint64_t)a1[1];
                                                  if (v12) {
                                                    sub_FAC82C(v45, v82, a2, v75, v80, (char **)a8);
                                                  }
                                                  else {
                                                    sub_FAC3C4(v45, v82, a2, v75, v80, (char **)a8);
                                                  }
                                                  return;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  if (sub_37D0C8(*a1)) {
                                    return;
                                  }
                                  unint64_t v46 = (HIDWORD(v74)
                                       + ((unint64_t)v74 << 6)
                                       + ((unint64_t)v74 >> 2)
                                       + 2654435769u) ^ v74;
                                  unint64_t v47 = (v75 + (v46 << 6) + (v46 >> 2) + 2654435769u) ^ v46;
                                  unint64_t v48 = (v76 + (v47 << 6) + (v47 >> 2) + 2654435769u) ^ v47;
                                  unint64_t v49 = (v77 + (v48 << 6) + (v48 >> 2) + 2654435769u) ^ v48;
                                  unint64_t v50 = (v78 + (v49 << 6) + (v49 >> 2) + 2654435769u) ^ v49;
                                  unint64_t v51 = (v79 + (v50 << 6) + (v50 >> 2) + 2654435769u) ^ v50;
                                  unint64_t v52 = (v80 + (v51 << 6) + (v51 >> 2) + 2654435769u) ^ v51;
                                  sub_FAA4F0((uint64_t *)(a1[661][2]+ 272 * (((v81 + (v52 << 6) + (v52 >> 2) + 2654435769u) ^ v52) % *a1[661])), (unsigned int *)&v74, (uint64_t)&v71);
                                  if (!v73)
                                  {
                                    *(void *)&long long v84 = v82;
                                    sub_FA3658(__p, &v84, 1uLL);
                                    sub_FA59A4(a1, (uint64_t *)__p, a5, a6, v79, 4u);
                                    if (__p[0])
                                    {
                                      __p[1] = __p[0];
                                      operator delete(__p[0]);
                                    }
                                    sub_FA32A8(a1[661], (unsigned int *)&v74, (uint64_t)__p);
                                    sub_FA36EC((uint64_t)&v71, (long long *)__p);
                                    sub_14A84((uint64_t)__p);
                                  }
                                  if (v71 && *v71 != v71[1])
                                  {
                                    if (v12) {
                                      sub_FA60C8((uint64_t)a1, &v82, &v83, v71, a8);
                                    }
                                    else {
                                      sub_FA5C94((uint64_t)a1, &v82, &v83, v71, a8);
                                    }
LABEL_75:
                                    int v58 = v72;
                                    if (v72 && !atomic_fetch_add(&v72->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                    {
                                      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                                      std::__shared_weak_count::__release_weak(v58);
                                    }
                                    return;
                                  }
                                  if (sub_723EC(3u))
                                  {
                                    sub_6BAC((uint64_t)__p);
                                    sub_188FC78(__p, (uint64_t)"Costs are not available from cache (after computing them). LRUCache issue or differing keys.", 92);
                                    std::stringbuf::str();
                                    sub_7246C((uint64_t *)&v84, 3u);
                                    if (SBYTE7(v85) < 0) {
                                      operator delete((void *)v84);
                                    }
                                    sub_111ECAC((uint64_t)__p);
                                  }
                                  uint64_t v67 = 0;
                                  int v68 = operator new(0x20uLL);
                                  long long v69 = xmmword_20B9800;
                                  strcpy((char *)v68, "ShortcutPool.Error.CacheAccess");
                                  unsigned int v65 = 0;
                                  int v66 = 0;
                                  uint64_t v88 = 0;
                                  long long v86 = 0u;
                                  long long v87 = 0u;
                                  long long v84 = 0u;
                                  long long v85 = 0u;
                                  char v64 = 0;
                                  LOBYTE(v63) = 0;
                                  uint64_t v61 = 0;
                                  BOOL v62 = 0;
                                  uint64_t v59 = 0;
                                  int v60 = 0;
                                  sub_29DC44((uint64_t)__p, (long long **)&v65, &v84, &v63, &v61, 0, (uint64_t)&v59, 1);
                                  nullsub_1(1);
                                  sub_29E11C((uint64_t)__p);
                                  int v53 = v60;
                                  if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                  {
                                    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                                    std::__shared_weak_count::__release_weak(v53);
                                  }
                                  char v54 = v62;
                                  if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                  {
                                    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                                    std::__shared_weak_count::__release_weak(v54);
                                  }
                                  if (v64 < 0)
                                  {
                                    operator delete((void *)v63);
                                    if ((SHIBYTE(v88) & 0x80000000) == 0)
                                    {
LABEL_55:
                                      if ((SHIBYTE(v86) & 0x80000000) == 0) {
                                        goto LABEL_56;
                                      }
                                      goto LABEL_61;
                                    }
                                  }
                                  else if ((SHIBYTE(v88) & 0x80000000) == 0)
                                  {
                                    goto LABEL_55;
                                  }
                                  operator delete((void *)v87);
                                  if ((SHIBYTE(v86) & 0x80000000) == 0)
                                  {
LABEL_56:
                                    if ((SBYTE7(v85) & 0x80000000) == 0) {
                                      goto LABEL_57;
                                    }
                                    goto LABEL_62;
                                  }
LABEL_61:
                                  operator delete(*((void **)&v85 + 1));
                                  if ((SBYTE7(v85) & 0x80000000) == 0)
                                  {
LABEL_57:
                                    __int16 v55 = (void **)v65;
                                    if (!v65)
                                    {
LABEL_72:
                                      if (SHIBYTE(v69) < 0) {
                                        operator delete(v68);
                                      }
                                      goto LABEL_75;
                                    }
                                    goto LABEL_63;
                                  }
LABEL_62:
                                  operator delete((void *)v84);
                                  __int16 v55 = (void **)v65;
                                  if (!v65) {
                                    goto LABEL_72;
                                  }
LABEL_63:
                                  int v56 = v66;
                                  char v57 = v55;
                                  if (v66 == v55)
                                  {
LABEL_71:
                                    int v66 = v55;
                                    operator delete(v57);
                                    goto LABEL_72;
                                  }
                                  while (1)
                                  {
                                    if (*((char *)v56 - 1) < 0)
                                    {
                                      operator delete(*(v56 - 3));
                                      if ((*((char *)v56 - 25) & 0x80000000) == 0) {
                                        goto LABEL_66;
                                      }
LABEL_69:
                                      operator delete(*(v56 - 6));
                                      v56 -= 6;
                                      if (v56 == v55)
                                      {
LABEL_70:
                                        char v57 = v65;
                                        goto LABEL_71;
                                      }
                                    }
                                    else
                                    {
                                      if (*((char *)v56 - 25) < 0) {
                                        goto LABEL_69;
                                      }
LABEL_66:
                                      v56 -= 6;
                                      if (v56 == v55) {
                                        goto LABEL_70;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_FA55F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  if (*(char *)(v16 - 153) < 0)
  {
    operator delete(*(void **)(v16 - 176));
    sub_111ECAC((uint64_t)va);
    sub_14A84(v16 - 256);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)va);
  sub_14A84(v16 - 256);
  _Unwind_Resume(a1);
}

void sub_FA5640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31)
{
  sub_14A84(v31 - 256);
  _Unwind_Resume(a1);
}

uint64_t sub_FA56F0@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, signed int *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, __int16 a6@<W5>, int a7@<W6>, void *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void *a11)
{
  signed int v11 = *a3;
  int v12 = 0x7FFFFFFF;
  int v13 = 0x7FFFFFFF;
  if (a4 != 2)
  {
LABEL_31:
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_39;
    }
    goto LABEL_32;
  }
  BOOL v14 = v11 == 0x7FFFFFFF || *((unsigned char *)a2 + 176) == 0;
  int v12 = 0x7FFFFFFF;
  if (!v14)
  {
    int v15 = *(_DWORD *)(a5 + 48);
    if (v15 != 0x7FFFFFFF)
    {
      int v16 = a2[43];
      int v17 = v16 / -10;
      int v18 = v16 % 10;
      char v19 = v16 < 0 ? -5 : 5;
      signed int v20 = v17 + v15 + (((-103 * (char)(v19 + v18)) >> 15) & 1) + ((-103 * (char)(v19 + v18)) >> 10);
      int v12 = 0x7FFFFFFF;
      if (v20 <= v11)
      {
        int v21 = a2[42];
        if (v21 < 0) {
          char v22 = -5;
        }
        else {
          char v22 = 5;
        }
        if ((int)(v21 / 10
                 + v15
                 + (((103 * (char)(v22 + v21 % 10)) >> 15) & 1)
                 + ((103 * (char)(v22 + v21 % 10)) >> 10)) >= v11)
          int v12 = *(_DWORD *)(a5 + 48);
        else {
          int v12 = 0x7FFFFFFF;
        }
      }
    }
  }
  if (!*((unsigned char *)a2 + 177))
  {
    int v13 = 0x7FFFFFFF;
    goto LABEL_31;
  }
  if (!*((unsigned char *)a2 + 178))
  {
    int v13 = *a3;
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_39;
    }
LABEL_32:
    if (a4 == 2) {
      goto LABEL_33;
    }
LABEL_39:
    signed int v11 = 0x7FFFFFFF;
    goto LABEL_40;
  }
  int v13 = 0x7FFFFFFF;
  if (v11 == 0x7FFFFFFF) {
    goto LABEL_39;
  }
  int v23 = *(_DWORD *)(a5 + 48);
  if (v23 == 0x7FFFFFFF
    || ((int v24 = a2[43], v24 < 0) ? (v25 = -5) : (v25 = 5),
        (int)(v24 / -10
            + v23
            + (((-103 * (char)(v25 + v24 % 10)) >> 15) & 1)
            + ((-103 * (char)(v25 + v24 % 10)) >> 10)) > v11
     || ((int v26 = a2[42], v26 < 0) ? (v27 = -5) : (v27 = 5),
         (int)(v26 / 10
             + v23
             + (((103 * (char)(v27 + v26 % 10)) >> 15) & 1)
             + ((103 * (char)(v27 + v26 % 10)) >> 10)) < v11)))
  {
    int v13 = 0x7FFFFFFF;
  }
  else
  {
    int v13 = *a3;
  }
LABEL_33:
  if (*(_DWORD *)(a5 + 48) == 0x7FFFFFFF || !a2[280] && !a2[281] && !*((void *)a2 + 141)) {
    goto LABEL_39;
  }
LABEL_40:
  int v28 = *a2;
  uint64_t v30 = *a1;
  int v31 = v28;
  int v32 = v12;
  int v33 = v13;
  signed int v34 = v11;
  char v35 = a4;
  __int16 v36 = a6;
  int v37 = a7;
  char v38 = 0;
  int v39 = 0x7FFFFFFF;
  return sub_FABFBC(&v30, a8, a10, a11, a9);
}

void sub_FA59A4(void **a1, uint64_t *a2, int *a3, signed int *a4, int a5, unsigned int a6)
{
  if ((sub_37D0C8(*a1) & 1) == 0)
  {
    int v37 = 0;
    char v38 = 0;
    uint64_t v39 = 0;
    uint64_t v12 = *a2;
    uint64_t v13 = a2[1];
    if (v12 != v13)
    {
      int v14 = 0;
      do
      {
        v14 |= sub_FA64FC((uint64_t)a1, v12, a3, a4, a5, (uint64_t)&v37);
        v12 += 8;
      }
      while (v12 != v13);
      int v15 = v37;
      if (v14)
      {
        __p = 0;
        unint64_t v47 = 0;
        uint64_t v48 = 0;
        sub_F92358(&v35, 0xCCCCCCCCCCCCCCCDLL * ((v38 - (unsigned char *)v37) >> 3), (uint64_t)&__p);
        if (__p)
        {
          unint64_t v47 = __p;
          operator delete(__p);
        }
        if (v38 != v37)
        {
          uint64_t v16 = 0;
          unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((v38 - (unsigned char *)v37) >> 3);
          do
          {
            int v18 = (char *)v37 + 40 * v16;
            char v19 = (void *)*((void *)v18 + 2);
            if (v19)
            {
              uint64_t v20 = 0;
              int v21 = (void *)*((void *)v18 + 2);
              do
              {
                ++v20;
                int v21 = (void *)*v21;
              }
              while (v21);
            }
            else
            {
              uint64_t v20 = 0;
            }
            sub_FAB404((unint64_t *)v35 + 3 * v16, *((void *)v35 + 3 * v16 + 1), v19, 0, v20);
            ++v16;
          }
          while (v16 != v17);
        }
        atomic_fetch_add((atomic_uint *volatile)sub_F72FEC(), 1u);
        char v45 = a5;
        if ((sub_37D0C8(*a1) & 1) == 0)
        {
          char v22 = sub_2E0C4();
          unint64_t v40 = a1;
          unint64_t v41 = &v35;
          uint64_t v42 = a3;
          unint64_t v43 = a4;
          unsigned int v44 = &v45;
          sub_FACCB8((uint64_t)&__p, (uint64_t)v22, a6);
          sub_31A008((uint64_t)&__p);
        }
        atomic_fetch_add((atomic_uint *volatile)sub_F72FEC(), 0xFFFFFFFF);
        int v23 = (char *)v35;
        if (v35)
        {
          int v24 = v36;
          char v25 = v35;
          if (v36 != v35)
          {
            int v26 = v36;
            do
            {
              int v28 = (void *)*((void *)v26 - 3);
              v26 -= 24;
              char v27 = v28;
              if (v28)
              {
                *((void *)v24 - 2) = v27;
                operator delete(v27);
              }
              int v24 = v26;
            }
            while (v26 != v23);
            char v25 = v35;
          }
          __int16 v36 = v23;
          operator delete(v25);
        }
        int v15 = v37;
      }
      if (v15)
      {
        unsigned int v29 = v38;
        uint64_t v30 = v15;
        if (v38 != (unsigned char *)v15)
        {
          do
          {
            int v31 = (void *)*(v29 - 3);
            if (v31)
            {
              do
              {
                int v32 = (void *)*v31;
                operator delete(v31);
                int v31 = v32;
              }
              while (v32);
            }
            signed int v34 = (void *)*(v29 - 5);
            v29 -= 5;
            int v33 = v34;
            *unsigned int v29 = 0;
            if (v34) {
              operator delete(v33);
            }
          }
          while (v29 != v15);
          uint64_t v30 = v37;
        }
        char v38 = v15;
        operator delete(v30);
      }
    }
  }
}

void sub_FA5C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
    sub_FA4880(&a13);
    _Unwind_Resume(a1);
  }
  sub_FA4880(&a13);
  _Unwind_Resume(a1);
}

void sub_FA5C94(uint64_t a1, unint64_t *a2, unint64_t *a3, void *a4, uint64_t a5)
{
  unint64_t v10 = *a2;
  signed int v11 = sub_F9CC14(*(void *)(a1 + 32), *a2, 1);
  if (v11
    && (uint64_t v12 = &v11[-*(int *)v11], *(unsigned __int16 *)v12 >= 5u)
    && *((_WORD *)v12 + 2)
    && (uint64_t v13 = &v11[*((unsigned __int16 *)v12 + 2) + *(unsigned int *)&v11[*((unsigned __int16 *)v12 + 2)]],
        *(_DWORD *)v13 > HIDWORD(v10))
    && (int v14 = &v13[4 * HIDWORD(v10) + 4 + *(unsigned int *)&v13[4 * HIDWORD(v10) + 4]],
        int v15 = &v14[-*(int *)v14],
        *(unsigned __int16 *)v15 >= 0xBu)
    && (uint64_t v16 = *((unsigned __int16 *)v15 + 5)) != 0)
  {
    int v17 = *(_DWORD *)&v14[v16 + *(unsigned int *)&v14[v16]];
  }
  else
  {
    int v17 = 0;
  }
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  uint64_t v20 = sub_F9CC14(*(void *)(a1 + 8), *a2, 1);
  if (v20)
  {
    int v21 = &v20[-*(int *)v20];
    if (*(unsigned __int16 *)v21 >= 5u)
    {
      if (*((_WORD *)v21 + 2))
      {
        char v22 = &v20[*((unsigned __int16 *)v21 + 2) + *(unsigned int *)&v20[*((unsigned __int16 *)v21 + 2)]];
        if (*(_DWORD *)v22 > HIDWORD(v19))
        {
          int v23 = &v22[4 * HIDWORD(v19) + 4 + *(unsigned int *)&v22[4 * HIDWORD(v19) + 4]];
          int v24 = &v23[-*(int *)v23];
          if (*(unsigned __int16 *)v24 >= 9u)
          {
            uint64_t v25 = *((unsigned __int16 *)v24 + 4);
            if (v25)
            {
              int v26 = &v23[v25 + *(unsigned int *)&v23[v25]];
              unsigned int v29 = *(_DWORD *)v26;
              char v27 = v26 + 4;
              unint64_t v28 = v29;
              uint64_t v30 = &v27[v29];
              int v31 = v27;
              while (v28)
              {
                int v32 = (void *)((char *)v31 + ((4 * v28) & 0x7FFFFFFF8));
                unint64_t v34 = *v32;
                int v33 = v32 + 1;
                unint64_t v35 = v28 >> 1;
                v28 += ~(v28 >> 1);
                if (v34 >= v18) {
                  unint64_t v28 = v35;
                }
                else {
                  int v31 = v33;
                }
              }
              if (v31 != v30 && *v31 == v18)
              {
                unsigned int v36 = v31 - v27;
                LODWORD(v37) = (unsigned __int16)((v31 - v27) >> 3);
                if (v37 != 0xFFFF)
                {
                  uint64_t v38 = *(void *)(a1 + 8);
                  unint64_t v39 = *a2;
                  unint64_t v40 = sub_F9CC14(v38, *a2, 1);
                  if (v40)
                  {
                    unint64_t v41 = &v40[-*(int *)v40];
                    if (*(unsigned __int16 *)v41 >= 5u)
                    {
                      if (*((_WORD *)v41 + 2))
                      {
                        uint64_t v42 = &v40[*((unsigned __int16 *)v41 + 2)
                                 + *(unsigned int *)&v40[*((unsigned __int16 *)v41 + 2)]];
                        if (*(_DWORD *)v42 > HIDWORD(v39))
                        {
                          unint64_t v43 = &v42[4 * HIDWORD(v39) + 4 + *(unsigned int *)&v42[4 * HIDWORD(v39) + 4]];
                          unsigned int v44 = &v43[-*(int *)v43];
                          if (*(unsigned __int16 *)v44 >= 0xBu)
                          {
                            uint64_t v45 = *((unsigned __int16 *)v44 + 5);
                            if (v45)
                            {
                              unint64_t v46 = &v43[v45 + *(unsigned int *)&v43[v45]];
                              unsigned int v49 = *(_DWORD *)v46;
                              uint64_t v48 = (uint64_t *)(v46 + 4);
                              uint64_t v47 = v49;
                              if (v49)
                              {
                                int v50 = 0;
                                unsigned int v51 = (unsigned __int16)(v36 >> 3) * v17;
                                unint64_t v52 = &v48[v47];
                                char v73 = v52;
                                __int16 v72 = v37;
                                do
                                {
                                  while (1)
                                  {
                                    uint64_t v53 = v51;
                                    uint64_t v54 = *(unsigned int *)(*a4 + 8 * v51);
                                    unint64_t v55 = v54 == -1
                                        ? 0x7FFFFFFF00000000
                                        : (unint64_t)*(unsigned int *)(*a4 + 8 * v53 + 4) << 32;
                                    uint64_t v56 = *v48;
                                    unint64_t v57 = v55 | v54;
                                    uint64_t v59 = *(unint64_t **)(a5 + 8);
                                    unint64_t v58 = *(void *)(a5 + 16);
                                    if ((unint64_t)v59 >= v58) {
                                      break;
                                    }
                                    *uint64_t v59 = *a3;
                                    v59[1] = v56;
                                    v59[2] = *a2;
                                    *((_WORD *)v59 + 12) = v37;
                                    *((_WORD *)v59 + 13) = v50;
                                    *(unint64_t *)((char *)v59 + 28) = v57;
                                    *(void *)(a5 + 8) = v59 + 5;
                                    unsigned int v51 = v53 + 1;
                                    ++v50;
                                    if (++v48 == v52) {
                                      return;
                                    }
                                  }
                                  int v60 = *(unint64_t **)a5;
                                  unint64_t v37 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v59 - *(void *)a5) >> 3);
                                  unint64_t v61 = v37 + 1;
                                  if (v37 + 1 > 0x666666666666666) {
                                    sub_2E00();
                                  }
                                  int v76 = v50;
                                  int v75 = v53;
                                  unint64_t v62 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v58 - (void)v60) >> 3);
                                  if (2 * v62 > v61) {
                                    unint64_t v61 = 2 * v62;
                                  }
                                  if (v62 >= 0x333333333333333) {
                                    unint64_t v63 = 0x666666666666666;
                                  }
                                  else {
                                    unint64_t v63 = v61;
                                  }
                                  if (v63 > 0x666666666666666) {
                                    sub_188D718();
                                  }
                                  uint64_t v74 = 40 * v63;
                                  char v64 = (char *)operator new(40 * v63);
                                  unsigned int v65 = &v64[40 * v37];
                                  *(void *)unsigned int v65 = *a3;
                                  *((void *)v65 + 1) = v56;
                                  *((void *)v65 + 2) = *a2;
                                  LOWORD(v37) = v72;
                                  *((_WORD *)v65 + 12) = v72;
                                  int v66 = v76;
                                  *((_WORD *)v65 + 13) = v76;
                                  *(void *)(v65 + 28) = v57;
                                  if (v59 == v60)
                                  {
                                    long long v70 = v65;
                                  }
                                  else
                                  {
                                    uint64_t v67 = v65;
                                    do
                                    {
                                      long long v68 = *(_OWORD *)(v59 - 5);
                                      long long v69 = *(_OWORD *)(v59 - 3);
                                      long long v70 = v67 - 40;
                                      *((_DWORD *)v67 - 2) = *((_DWORD *)v59 - 2);
                                      *(_OWORD *)(v67 - 24) = v69;
                                      *(_OWORD *)(v67 - 40) = v68;
                                      v59 -= 5;
                                      v67 -= 40;
                                    }
                                    while (v59 != v60);
                                  }
                                  long long v71 = v65 + 40;
                                  *(void *)a5 = v70;
                                  *(void *)(a5 + 8) = v65 + 40;
                                  *(void *)(a5 + 16) = &v64[v74];
                                  if (v60)
                                  {
                                    operator delete(v60);
                                    int v66 = v76;
                                  }
                                  unint64_t v52 = v73;
                                  *(void *)(a5 + 8) = v71;
                                  unsigned int v51 = v75 + 1;
                                  int v50 = v66 + 1;
                                  ++v48;
                                }
                                while (v48 != v73);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_FA60C8(uint64_t a1, unint64_t *a2, unint64_t *a3, void *a4, uint64_t a5)
{
  unint64_t v10 = *a2;
  signed int v11 = sub_F9CC14(*(void *)(a1 + 32), *a2, 1);
  if (v11
    && (uint64_t v12 = &v11[-*(int *)v11], *(unsigned __int16 *)v12 >= 5u)
    && *((_WORD *)v12 + 2)
    && (uint64_t v13 = &v11[*((unsigned __int16 *)v12 + 2) + *(unsigned int *)&v11[*((unsigned __int16 *)v12 + 2)]],
        *(_DWORD *)v13 > HIDWORD(v10))
    && (int v14 = &v13[4 * HIDWORD(v10) + 4 + *(unsigned int *)&v13[4 * HIDWORD(v10) + 4]],
        int v15 = &v14[-*(int *)v14],
        *(unsigned __int16 *)v15 >= 0xBu)
    && (uint64_t v16 = *((unsigned __int16 *)v15 + 5)) != 0)
  {
    int v17 = *(_DWORD *)&v14[v16 + *(unsigned int *)&v14[v16]];
  }
  else
  {
    int v17 = 0;
  }
  unint64_t v18 = *a3;
  unint64_t v19 = *a2;
  uint64_t v20 = sub_F9CC14(*(void *)(a1 + 8), *a2, 1);
  if (v20)
  {
    int v21 = &v20[-*(int *)v20];
    if (*(unsigned __int16 *)v21 >= 5u)
    {
      if (*((_WORD *)v21 + 2))
      {
        char v22 = &v20[*((unsigned __int16 *)v21 + 2) + *(unsigned int *)&v20[*((unsigned __int16 *)v21 + 2)]];
        if (*(_DWORD *)v22 > HIDWORD(v19))
        {
          int v23 = &v22[4 * HIDWORD(v19) + 4 + *(unsigned int *)&v22[4 * HIDWORD(v19) + 4]];
          int v24 = &v23[-*(int *)v23];
          if (*(unsigned __int16 *)v24 >= 0xBu)
          {
            uint64_t v25 = *((unsigned __int16 *)v24 + 5);
            if (v25)
            {
              int v26 = &v23[v25 + *(unsigned int *)&v23[v25]];
              unsigned int v29 = *(_DWORD *)v26;
              char v27 = v26 + 4;
              unint64_t v28 = v29;
              uint64_t v30 = &v27[v29];
              int v31 = v27;
              while (v28)
              {
                int v32 = (void *)((char *)v31 + ((4 * v28) & 0x7FFFFFFF8));
                unint64_t v34 = *v32;
                int v33 = v32 + 1;
                unint64_t v35 = v28 >> 1;
                v28 += ~(v28 >> 1);
                if (v34 >= v18) {
                  unint64_t v28 = v35;
                }
                else {
                  int v31 = v33;
                }
              }
              if (v31 != v30 && *v31 == v18)
              {
                unsigned int v36 = v31 - v27;
                LODWORD(v37) = (unsigned __int16)((v31 - v27) >> 3);
                if (v37 != 0xFFFF)
                {
                  uint64_t v38 = *(void *)(a1 + 8);
                  unint64_t v39 = *a2;
                  unint64_t v40 = sub_F9CC14(v38, *a2, 1);
                  if (v40)
                  {
                    unint64_t v41 = &v40[-*(int *)v40];
                    if (*(unsigned __int16 *)v41 >= 5u)
                    {
                      if (*((_WORD *)v41 + 2))
                      {
                        uint64_t v42 = &v40[*((unsigned __int16 *)v41 + 2)
                                 + *(unsigned int *)&v40[*((unsigned __int16 *)v41 + 2)]];
                        if (*(_DWORD *)v42 > HIDWORD(v39))
                        {
                          unint64_t v43 = &v42[4 * HIDWORD(v39) + 4 + *(unsigned int *)&v42[4 * HIDWORD(v39) + 4]];
                          unsigned int v44 = &v43[-*(int *)v43];
                          if (*(unsigned __int16 *)v44 >= 9u)
                          {
                            uint64_t v45 = *((unsigned __int16 *)v44 + 4);
                            if (v45)
                            {
                              unint64_t v46 = &v43[v45 + *(unsigned int *)&v43[v45]];
                              unsigned int v49 = *(_DWORD *)v46;
                              uint64_t v48 = (uint64_t *)(v46 + 4);
                              uint64_t v47 = v49;
                              if (v49)
                              {
                                int v50 = 0;
                                unsigned int v51 = (unsigned __int16)(v36 >> 3);
                                unint64_t v52 = &v48[v47];
                                __int16 v75 = v37;
                                uint64_t v74 = v52;
                                do
                                {
                                  while (1)
                                  {
                                    uint64_t v54 = v51;
                                    uint64_t v55 = *(unsigned int *)(*a4 + 8 * v51);
                                    unint64_t v56 = v55 == -1
                                        ? 0x7FFFFFFF00000000
                                        : (unint64_t)*(unsigned int *)(*a4 + 8 * v54 + 4) << 32;
                                    uint64_t v57 = *v48;
                                    unint64_t v58 = v56 | v55;
                                    int v60 = *(void **)(a5 + 8);
                                    unint64_t v59 = *(void *)(a5 + 16);
                                    if ((unint64_t)v60 >= v59) {
                                      break;
                                    }
                                    unint64_t v53 = *a3;
                                    void *v60 = v57;
                                    v60[1] = v53;
                                    v60[2] = *a2;
                                    *((_WORD *)v60 + 12) = v50;
                                    *((_WORD *)v60 + 13) = v37;
                                    *(void *)((char *)v60 + 28) = v58;
                                    *(void *)(a5 + 8) = v60 + 5;
                                    unsigned int v51 = v54 + v17;
                                    ++v50;
                                    if (++v48 == v52) {
                                      return;
                                    }
                                  }
                                  unint64_t v61 = *(void **)a5;
                                  unint64_t v37 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v60 - *(void *)a5) >> 3);
                                  unint64_t v62 = v37 + 1;
                                  if (v37 + 1 > 0x666666666666666) {
                                    sub_2E00();
                                  }
                                  int v79 = v50;
                                  unint64_t v77 = v58;
                                  int v78 = v54;
                                  unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v59 - (void)v61) >> 3);
                                  if (2 * v63 > v62) {
                                    unint64_t v62 = 2 * v63;
                                  }
                                  if (v63 >= 0x333333333333333) {
                                    unint64_t v64 = 0x666666666666666;
                                  }
                                  else {
                                    unint64_t v64 = v62;
                                  }
                                  if (v64 > 0x666666666666666) {
                                    sub_188D718();
                                  }
                                  uint64_t v76 = 40 * v64;
                                  unsigned int v65 = (char *)operator new(40 * v64);
                                  int v66 = &v65[40 * v37];
                                  unint64_t v67 = *a3;
                                  *(void *)int v66 = v57;
                                  *((void *)v66 + 1) = v67;
                                  *((void *)v66 + 2) = *a2;
                                  int v68 = v79;
                                  *((_WORD *)v66 + 12) = v79;
                                  LOWORD(v37) = v75;
                                  *((_WORD *)v66 + 13) = v75;
                                  *(void *)(v66 + 28) = v77;
                                  if (v60 == v61)
                                  {
                                    __int16 v72 = v66;
                                  }
                                  else
                                  {
                                    long long v69 = v66;
                                    do
                                    {
                                      long long v70 = *(_OWORD *)(v60 - 5);
                                      long long v71 = *(_OWORD *)(v60 - 3);
                                      __int16 v72 = v69 - 40;
                                      *((_DWORD *)v69 - 2) = *((_DWORD *)v60 - 2);
                                      *(_OWORD *)(v69 - 24) = v71;
                                      *(_OWORD *)(v69 - 40) = v70;
                                      v60 -= 5;
                                      v69 -= 40;
                                    }
                                    while (v60 != v61);
                                  }
                                  char v73 = v66 + 40;
                                  *(void *)a5 = v72;
                                  *(void *)(a5 + 8) = v66 + 40;
                                  *(void *)(a5 + 16) = &v65[v76];
                                  if (v61)
                                  {
                                    operator delete(v61);
                                    int v68 = v79;
                                  }
                                  unint64_t v52 = v74;
                                  *(void *)(a5 + 8) = v73;
                                  unsigned int v51 = v78 + v17;
                                  int v50 = v68 + 1;
                                  ++v48;
                                }
                                while (v48 != v74);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_FA64FC(uint64_t a1, uint64_t a2, int *a3, signed int *a4, int a5, uint64_t a6)
{
  uint64_t v9 = a1 + 40;
  sub_FA56F0((uint64_t *)a2, a3, a4, a5, a1 + 40, *(_WORD *)(a1 + 20), *(_DWORD *)(a1 + 16), *(void **)(a1 + 5280), (uint64_t)&v107, *(void *)(a1 + 8), *(void **)(a1 + 5296));
  uint64_t v10 = *(void *)(a1 + 8);
  if (sub_F06620(*(void *)(a1 + 5280), v108) && !v112)
  {
    unint64_t v11 = v107;
    unsigned int v12 = v108;
    int v13 = v113;
    int v14 = sub_383520(v10, v107, 1);
    if (v14)
    {
      int v15 = &v14[-*(int *)v14];
      if (*(unsigned __int16 *)v15 >= 0xFu)
      {
        if (*((_WORD *)v15 + 7))
        {
          uint64_t v16 = &v14[*((unsigned __int16 *)v15 + 7) + *(unsigned int *)&v14[*((unsigned __int16 *)v15 + 7)]];
          if (*(_DWORD *)v16 > HIDWORD(v11))
          {
            int v17 = &v16[4 * HIDWORD(v11) + 4 + *(unsigned int *)&v16[4 * HIDWORD(v11) + 4]];
            unint64_t v18 = &v17[-*(int *)v17];
            if (*(unsigned __int16 *)v18 >= 5u)
            {
              uint64_t v19 = *((unsigned __int16 *)v18 + 2);
              if (v19)
              {
                uint64_t v20 = (unsigned int *)&v17[v19 + *(unsigned int *)&v17[v19]];
                unsigned int v21 = v12 + *(_DWORD *)(v10 + 3872) * v13;
                if (v21 < *v20 && v20[v21 + 1] != -1) {
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  if (!*(_DWORD *)a2) {
    goto LABEL_19;
  }
  char v22 = sub_F93238(*(void *)(a1 + 24), *(_DWORD *)a2, 1);
  if (!v22 || (int v23 = &v22[-*(int *)v22], *(unsigned __int16 *)v23 < 9u) || (v24 = *((unsigned __int16 *)v23 + 4)) == 0)
  {
    int v28 = -1;
    goto LABEL_20;
  }
  uint64_t v25 = (int *)sub_F930D4((unsigned int *)&v22[v24 + *(unsigned int *)&v22[v24]], *(_DWORD *)(a2 + 4));
  int v26 = (unsigned __int16 *)((char *)v25 - *v25);
  if (*v26 < 5u || (uint64_t v27 = v26[2]) == 0)
  {
LABEL_19:
    int v28 = 0;
    goto LABEL_20;
  }
  int v28 = *((unsigned __int8 *)v25 + v27);
LABEL_20:
  unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3);
  unint64_t v30 = (v28 + 1);
  if (v30 > v29) {
    sub_FAB798((void **)a6, v30 - v29);
  }
  unint64_t v31 = (HIDWORD(v107)
       + ((unint64_t)v107 << 6)
       + ((unint64_t)v107 >> 2)
       + 2654435769u) ^ v107;
  unint64_t v32 = (v108 + (v31 << 6) + (v31 >> 2) + 2654435769u) ^ v31;
  unint64_t v33 = (v109 + (v32 << 6) + (v32 >> 2) + 2654435769u) ^ v32;
  unint64_t v34 = (v110 + (v33 << 6) + (v33 >> 2) + 2654435769u) ^ v33;
  unint64_t v35 = (v111 + (v34 << 6) + (v34 >> 2) + 2654435769u) ^ v34;
  unint64_t v36 = (v112 + (v35 << 6) + (v35 >> 2) + 2654435769u) ^ v35;
  unint64_t v37 = (v113 + (v36 << 6) + (v36 >> 2) + 2654435769u) ^ v36;
  sub_FAA4F0((uint64_t *)(*(void *)(*(void *)(a1 + 5288) + 16)+ 272 * (((v114 + (v37 << 6) + (v37 >> 2) + 2654435769u) ^ v37) % **(void **)(a1 + 5288))), (unsigned int *)&v107, (uint64_t)v104);
  int v38 = v105;
  unint64_t v39 = (std::__shared_weak_count *)v104[1];
  if (v104[1] && !atomic_fetch_add((atomic_ullong *volatile)v104[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    if (v38) {
      return 0;
    }
  }
  else if (v38)
  {
    return 0;
  }
  long long v105 = 0u;
  long long v106 = 0u;
  *(_OWORD *)uint64_t v104 = 0u;
  sub_FA9314((uint64_t)v104);
  uint64_t v41 = ((unint64_t)(*((void *)&v106 + 1) + v106) * (unsigned __int128)0x8060180601806019) >> 64;
  unint64_t v42 = (v41 + ((unint64_t)(*((void *)&v106 + 1) + v106 - v41) >> 1)) >> 8;
  uint64_t v43 = *((void *)v104[1] + v42) + 12 * (*((void *)&v106 + 1) + v106 - 341 * v42);
  *(void *)uint64_t v43 = *(void *)a2;
  *(_DWORD *)(v43 + 8) = v28;
  __p = 0;
  unsigned __int16 v102 = 0;
  uint64_t v103 = 0;
  BOOL v44 = __CFADD__(*((void *)&v106 + 1), 1);
  uint64_t v45 = ++*((void *)&v106 + 1);
  if (v44) {
    goto LABEL_63;
  }
  do
  {
    unint64_t v46 = *((void *)v104[1] + (unint64_t)v106 / 0x155) + 12 * ((unint64_t)v106 % 0x155);
    unsigned int v47 = *(_DWORD *)(v46 + 8);
    uint64_t v99 = *(void *)v46;
    unsigned int v100 = v47;
    *(void *)&long long v106 = v106 + 1;
    *((void *)&v106 + 1) = v45 - 1;
    if ((unint64_t)v106 >= 0x2AA)
    {
      operator delete(*(void **)v104[1]);
      v104[1] = (char *)v104[1] + 8;
      *(void *)&long long v106 = v106 - 341;
    }
    unsigned int v48 = v100;
    if (!sub_36F918((void *)(*(void *)a6 + 40 * v100), &v99))
    {
      sub_FAB9FC(*(void *)a6 + 40 * v48, &v99, &v99);
      if (v48 != 1)
      {
        sub_FABD64(*(void *)(a1 + 24), (unsigned int *)&v99, &__p);
        int v50 = (uint64_t *)__p;
        unsigned int v49 = v102;
        if (__p != v102)
        {
          unsigned int v84 = v48 - 1;
          do
          {
            sub_FA56F0(v50, a3, a4, a5, v9, *(_WORD *)(a1 + 20), *(_DWORD *)(a1 + 16), *(void **)(a1 + 5280), (uint64_t)&v91, *(void *)(a1 + 8), *(void **)(a1 + 5296));
            uint64_t v52 = *(void *)(a1 + 8);
            BOOL v53 = sub_F06620(*(void *)(a1 + 5280), v92);
            if (v96) {
              BOOL v54 = 0;
            }
            else {
              BOOL v54 = v53;
            }
            if (!v54) {
              goto LABEL_51;
            }
            unint64_t v55 = v91;
            unsigned int v56 = v92;
            int v57 = v97;
            unint64_t v58 = sub_383520(v52, v91, 1);
            if (!v58
              || (unint64_t v59 = &v58[-*(int *)v58], *(unsigned __int16 *)v59 < 0xFu)
              || !*((_WORD *)v59 + 7)
              || (int v60 = &v58[*((unsigned __int16 *)v59 + 7) + *(unsigned int *)&v58[*((unsigned __int16 *)v59 + 7)]],
                  *(_DWORD *)v60 <= HIDWORD(v55))
              || (unint64_t v61 = &v60[4 * HIDWORD(v55) + 4 + *(unsigned int *)&v60[4 * HIDWORD(v55) + 4]],
                  unint64_t v62 = &v61[-*(int *)v61],
                  *(unsigned __int16 *)v62 < 5u)
              || (uint64_t v63 = *((unsigned __int16 *)v62 + 2)) == 0
              || (unint64_t v64 = (unsigned int *)&v61[v63 + *(unsigned int *)&v61[v63]],
                  unsigned int v65 = v56 + *(_DWORD *)(v52 + 3872) * v57,
                  v65 >= *v64)
              || v64[v65 + 1] == -1)
            {
LABEL_51:
              unint64_t v66 = (HIDWORD(v91)
                   + 2654435769
                   + ((unint64_t)v91 << 6)
                   + ((unint64_t)v91 >> 2)) ^ v91;
              unint64_t v67 = (v92 + 2654435769 + (v66 << 6) + (v66 >> 2)) ^ v66;
              unint64_t v68 = (v93 + 2654435769 + (v67 << 6) + (v67 >> 2)) ^ v67;
              unint64_t v69 = (v94 + 2654435769 + (v68 << 6) + (v68 >> 2)) ^ v68;
              unint64_t v70 = (v95 + 2654435769 + (v69 << 6) + (v69 >> 2)) ^ v69;
              unint64_t v71 = (v96 + 2654435769 + (v70 << 6) + (v70 >> 2)) ^ v70;
              unint64_t v72 = (v97 + 2654435769 + (v71 << 6) + (v71 >> 2)) ^ v71;
              sub_FAA4F0((uint64_t *)(*(void *)(*(void *)(a1 + 5288) + 16)+ 272 * (((v98 + 2654435769 + (v72 << 6) + (v72 >> 2)) ^ v72) % **(void **)(a1 + 5288))), (unsigned int *)&v91, (uint64_t)v88);
              int v73 = v90;
              uint64_t v74 = v89;
              if (v89 && !atomic_fetch_add(&v89->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
                if (!v73)
                {
LABEL_54:
                  __int16 v75 = v104[1];
                  if ((void *)v105 == v104[1]) {
                    uint64_t v76 = 0;
                  }
                  else {
                    uint64_t v76 = 341 * ((uint64_t)(v105 - (unint64_t)v104[1]) >> 3) - 1;
                  }
                  unint64_t v77 = *((void *)&v106 + 1) + v106;
                  if (v76 == *((void *)&v106 + 1) + (void)v106)
                  {
                    sub_FA9314((uint64_t)v104);
                    __int16 v75 = v104[1];
                    unint64_t v77 = *((void *)&v106 + 1) + v106;
                  }
                  unint64_t v51 = v75[v77 / 0x155] + 12 * (v77 % 0x155);
                  *(void *)unint64_t v51 = *v50;
                  *(_DWORD *)(v51 + 8) = v84;
                  ++*((void *)&v106 + 1);
                }
              }
              else if (!v73)
              {
                goto LABEL_54;
              }
            }
            ++v50;
          }
          while (v50 != v49);
        }
      }
    }
    uint64_t v45 = *((void *)&v106 + 1);
  }
  while (*((void *)&v106 + 1));
  if (__p)
  {
    unsigned __int16 v102 = (uint64_t *)__p;
    operator delete(__p);
  }
LABEL_63:
  int v78 = (void **)v104[1];
  int v79 = (void **)v105;
  *((void *)&v106 + 1) = 0;
  unint64_t v80 = v105 - (unint64_t)v104[1];
  if ((unint64_t)v105 - (unint64_t)v104[1] >= 0x11)
  {
    do
    {
      operator delete(*v78);
      int v79 = (void **)v105;
      int v78 = (void **)((char *)v104[1] + 8);
      v104[1] = v78;
      unint64_t v80 = v105 - (void)v78;
    }
    while ((void)v105 - (void)v78 > 0x10uLL);
  }
  unint64_t v81 = v80 >> 3;
  if (v81 == 1)
  {
    uint64_t v82 = 170;
LABEL_69:
    *(void *)&long long v106 = v82;
  }
  else if (v81 == 2)
  {
    uint64_t v82 = 341;
    goto LABEL_69;
  }
  if (v78 != v79)
  {
    do
    {
      unint64_t v83 = *v78++;
      operator delete(v83);
    }
    while (v78 != v79);
    if ((void *)v105 != v104[1]) {
      *(void *)&long long v105 = v105 + (((unint64_t)v104[1] - v105 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (v104[0]) {
    operator delete(v104[0]);
  }
  return 1;
}

void sub_FA6D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_FA6D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
  if (__p) {
    operator delete(__p);
  }
  sub_4927C((uint64_t)&a29);
  _Unwind_Resume(a1);
}

BOOL sub_FA6D54(uint64_t a1, unsigned int *a2, int *a3, signed int *a4, int a5)
{
  unsigned int v6 = *a2;
  if (!v6) {
    return 0;
  }
  unint64_t v11 = sub_F93238(*(void *)(a1 + 24), v6, 1);
  if (!v11) {
    return 0;
  }
  unsigned int v12 = &v11[-*(int *)v11];
  if (*(unsigned __int16 *)v12 < 9u) {
    return 0;
  }
  uint64_t v13 = *((unsigned __int16 *)v12 + 4);
  if (!v13) {
    return 0;
  }
  int v14 = (int *)sub_F930D4((unsigned int *)&v11[v13 + *(unsigned int *)&v11[v13]], a2[1]);
  int v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 < 5u) {
    return 0;
  }
  uint64_t v16 = v15[2];
  if (!v16) {
    return 0;
  }
  if (!*((unsigned char *)v14 + v16)) {
    return 0;
  }
  sub_FA56F0((uint64_t *)a2, a3, a4, a5, a1 + 40, *(_WORD *)(a1 + 20), *(_DWORD *)(a1 + 16), *(void **)(a1 + 5280), (uint64_t)&v42, *(void *)(a1 + 8), *(void **)(a1 + 5296));
  uint64_t v17 = *(void *)(a1 + 8);
  if (!sub_F06620(*(void *)(a1 + 5280), v43)) {
    goto LABEL_20;
  }
  if (v47) {
    goto LABEL_20;
  }
  unint64_t v18 = v42;
  unsigned int v19 = v43;
  int v20 = v48;
  unsigned int v21 = sub_383520(v17, v42, 1);
  if (v21)
  {
    char v22 = &v21[-*(int *)v21];
    if (*(unsigned __int16 *)v22 >= 0xFu)
    {
      if (*((_WORD *)v22 + 7))
      {
        int v23 = &v21[*((unsigned __int16 *)v22 + 7) + *(unsigned int *)&v21[*((unsigned __int16 *)v22 + 7)]];
        if (*(_DWORD *)v23 > HIDWORD(v18))
        {
          uint64_t v24 = &v23[4 * HIDWORD(v18) + 4 + *(unsigned int *)&v23[4 * HIDWORD(v18) + 4]];
          uint64_t v25 = &v24[-*(int *)v24];
          if (*(unsigned __int16 *)v25 >= 5u)
          {
            uint64_t v26 = *((unsigned __int16 *)v25 + 2);
            if (v26)
            {
              uint64_t v27 = (unsigned int *)&v24[v26 + *(unsigned int *)&v24[v26]];
              unsigned int v28 = v19 + *(_DWORD *)(v17 + 3872) * v20;
              if (v28 < *v27 && v27[v28 + 1] != -1) {
                return 0;
              }
            }
          }
        }
      }
    }
  }
LABEL_20:
  unint64_t v31 = (HIDWORD(v42)
       + ((unint64_t)v42 << 6)
       + ((unint64_t)v42 >> 2)
       + 2654435769u) ^ v42;
  unint64_t v32 = (v43 + (v31 << 6) + (v31 >> 2) + 2654435769u) ^ v31;
  unint64_t v33 = (v44 + (v32 << 6) + (v32 >> 2) + 2654435769u) ^ v32;
  unint64_t v34 = (v45 + (v33 << 6) + (v33 >> 2) + 2654435769u) ^ v33;
  unint64_t v35 = (v46 + (v34 << 6) + (v34 >> 2) + 2654435769u) ^ v34;
  unint64_t v36 = (v47 + (v35 << 6) + (v35 >> 2) + 2654435769u) ^ v35;
  unint64_t v37 = (v48 + (v36 << 6) + (v36 >> 2) + 2654435769u) ^ v36;
  sub_FAA4F0((uint64_t *)(*(void *)(*(void *)(a1 + 5288) + 16)+ 272 * (((v49 + (v37 << 6) + (v37 >> 2) + 2654435769u) ^ v37) % **(void **)(a1 + 5288))), (unsigned int *)&v42, (uint64_t)v39);
  BOOL v29 = v41 == 0;
  int v38 = v40;
  if (v40 && !atomic_fetch_add(&v40->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
  return v29;
}

void **sub_FA7034(void **a1, void *a2)
{
  *a1 = a2;
  a1[1] = (void *)sub_3761A0(a2);
  long long v4 = (_DWORD *)sub_374D14(*a1);
  int v5 = sub_29AEC4(v4);
  if (v5)
  {
    uint64_t v6 = sub_374D14(*a1);
    int v5 = sub_29AEB4(v6);
  }
  *((_DWORD *)a1 + 4) = v5;
  *((_WORD *)a1 + 10) = *(_WORD *)(sub_3769E8(*a1) + 3872);
  uint64_t v7 = sub_375E94(a2);
  unint64_t v8 = a1[1];
  a1[3] = (void *)v7;
  a1[4] = v8;
  sub_F6DA28((uint64_t *)a1 + 5, a2);
  a1[9] = (void *)sub_374E74(a2);
  a1[10] = (void *)sub_374EAC(a2);
  a1[11] = (void *)sub_50BE8((uint64_t)a2);
  return a1;
}

unint64_t sub_FA70EC(uint64_t a1, uint64_t a2, unsigned int *a3, int *a4, char a5)
{
  if (!*(_DWORD *)(a2 + 16))
  {
    unint64_t v18 = 0x7FFFFFFF00000000;
    LODWORD(v19) = -1;
    return v18 & 0xFFFFFFFF00000000 | v19;
  }
  int v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  unint64_t v10 = *(void *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  if (!v11)
  {
LABEL_11:
    LODWORD(v17) = 0;
    goto LABEL_12;
  }
  unsigned int v12 = sub_F93238(*(void *)(a1 + 24), v11, 1);
  if (v12)
  {
    uint64_t v13 = &v12[-*(int *)v12];
    if (*(unsigned __int16 *)v13 >= 9u)
    {
      uint64_t v14 = *((unsigned __int16 *)v13 + 4);
      if (v14)
      {
        int v15 = (int *)sub_F930D4((unsigned int *)&v12[v14 + *(unsigned int *)&v12[v14]], HIDWORD(v11));
        uint64_t v16 = (unsigned __int16 *)((char *)v15 - *v15);
        if (*v16 >= 5u)
        {
          uint64_t v17 = v16[2];
          if (v17) {
            LODWORD(v17) = *((unsigned __int8 *)v15 + v17);
          }
          goto LABEL_12;
        }
        goto LABEL_11;
      }
    }
  }
  LODWORD(v17) = -1;
LABEL_12:
  int v22 = v17;
  sub_FA7290((void **)a1, v10, &v22, 0, a3, a4, a5, (uint64_t)&v23);
  int v20 = v23;
  if (v23 != v24)
  {
    LODWORD(v19) = -1;
    int v20 = v23;
    while (v20[1] != *(void *)(a2 + 8))
    {
      v20 += 5;
      if (v20 == v24)
      {
        unint64_t v18 = 0x7FFFFFFF00000000;
        if (v23) {
          goto LABEL_20;
        }
        return v18 & 0xFFFFFFFF00000000 | v19;
      }
    }
  }
  if (v20 == v24)
  {
    unint64_t v18 = 0x7FFFFFFF00000000;
    LODWORD(v19) = -1;
    if (!v23) {
      return v18 & 0xFFFFFFFF00000000 | v19;
    }
    goto LABEL_20;
  }
  uint64_t v19 = *(void *)((char *)v20 + 28);
  unint64_t v18 = v19 & 0xFFFFFFFF00000000;
  if (v23)
  {
LABEL_20:
    uint64_t v24 = v23;
    operator delete(v23);
  }
  return v18 & 0xFFFFFFFF00000000 | v19;
}

void sub_FA7274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_FA7290(void **a1, unint64_t a2, _DWORD *a3, unsigned int a4, unsigned int *a5, int *a6, char a7, uint64_t a8)
{
  unint64_t v103 = a2;
  *(void *)(a8 + 8) = *(void *)a8;
  if (*a3)
  {
    char v12 = a4;
    unint64_t v15 = sub_F968AC((uint64_t)a1[3], a2 & 0xFFFFFFFFFFFFFFFLL, ((a2 & 0x1000000000000000) == 0) ^ a4, a3);
    unint64_t v102 = v15;
    unsigned int v16 = v15;
    unint64_t v17 = HIDWORD(v15);
    if (v15 && HIDWORD(v15) != -1)
    {
      unint64_t v19 = v15;
      int v20 = sub_FA08AC((uint64_t)a1[4], v15, 1);
      if (v20)
      {
        unsigned int v21 = &v20[-*(int *)v20];
        if (*(unsigned __int16 *)v21 >= 5u)
        {
          uint64_t v22 = *((unsigned __int16 *)v21 + 2);
          if (v22)
          {
            int v23 = &v20[v22 + *(unsigned int *)&v20[v22]];
            if (*(_DWORD *)v23 > v17)
            {
              uint64_t v24 = &v23[4 * v17 + 4 + *(unsigned int *)&v23[4 * v17 + 4]];
              uint64_t v25 = &v24[-*(int *)v24];
              if (*(unsigned __int16 *)v25 >= 9u)
              {
                uint64_t v26 = *((unsigned __int16 *)v25 + 4);
                if (v26)
                {
                  if (*(_DWORD *)&v24[v26 + *(unsigned int *)&v24[v26]])
                  {
                    uint64_t v27 = sub_FA08AC((uint64_t)a1[4], v16, 1);
                    if (v27)
                    {
                      unsigned int v28 = &v27[-*(int *)v27];
                      if (*(unsigned __int16 *)v28 >= 5u)
                      {
                        uint64_t v29 = *((unsigned __int16 *)v28 + 2);
                        if (v29)
                        {
                          unint64_t v30 = &v27[v29 + *(unsigned int *)&v27[v29]];
                          if (*(_DWORD *)v30 > v17)
                          {
                            unint64_t v31 = &v30[4 * v17 + 4 + *(unsigned int *)&v30[4 * v17 + 4]];
                            unint64_t v32 = &v31[-*(int *)v31];
                            if (*(unsigned __int16 *)v32 >= 0xBu)
                            {
                              uint64_t v33 = *((unsigned __int16 *)v32 + 5);
                              if (v33)
                              {
                                if (*(_DWORD *)&v31[v33 + *(unsigned int *)&v31[v33]])
                                {
                                  int v67 = *((_DWORD *)a1 + 4);
                                  __int16 v68 = *((_WORD *)a1 + 10);
                                  uint64_t v69 = (uint64_t)a1[1];
                                  unint64_t v70 = a1[9];
                                  unsigned int v66 = sub_F6F0D8();
                                  if (sub_35E640()) {
                                    int v34 = *a6;
                                  }
                                  else {
                                    int v34 = 0x7FFFFFFF;
                                  }
                                  int v65 = v34;
                                  int v35 = sub_35E640();
                                  int v36 = *a6;
                                  if (!v35) {
                                    int v36 = 0x7FFFFFFF;
                                  }
                                  unsigned int v37 = *a5;
                                  *(void *)&long long __p = v19;
                                  *((void *)&__p + 1) = __PAIR64__(v66, v37);
                                  int v84 = v65;
                                  int v85 = v36;
                                  char v86 = a7;
                                  __int16 v87 = v68;
                                  int v88 = v67;
                                  char v89 = 0;
                                  int v90 = 0x7FFFFFFF;
                                  sub_FAD72C((uint64_t *)&__p, v70, v69, (uint64_t)&v94);
                                  uint64_t v38 = (uint64_t)a1[1];
                                  BOOL v39 = sub_F06620((uint64_t)a1[9], v95);
                                  if (v99) {
                                    BOOL v40 = 0;
                                  }
                                  else {
                                    BOOL v40 = v39;
                                  }
                                  if (v40)
                                  {
                                    unint64_t v41 = v94;
                                    unsigned int v71 = v95;
                                    int v42 = v100;
                                    unsigned int v43 = sub_383A0C(v38, v94, 1);
                                    if (v43)
                                    {
                                      int v44 = &v43[-*(int *)v43];
                                      if (*(unsigned __int16 *)v44 >= 0xFu)
                                      {
                                        if (*((_WORD *)v44 + 7))
                                        {
                                          int v45 = &v43[*((unsigned __int16 *)v44 + 7)
                                                   + *(unsigned int *)&v43[*((unsigned __int16 *)v44 + 7)]];
                                          if (*(_DWORD *)v45 > HIDWORD(v41))
                                          {
                                            int v46 = &v45[4 * HIDWORD(v41)
                                                     + 4
                                                     + *(unsigned int *)&v45[4 * HIDWORD(v41) + 4]];
                                            unsigned __int8 v47 = &v46[-*(int *)v46];
                                            if (*(unsigned __int16 *)v47 >= 5u)
                                            {
                                              uint64_t v48 = *((unsigned __int16 *)v47 + 2);
                                              if (v48)
                                              {
                                                unsigned int v49 = (unsigned int *)&v46[v48 + *(unsigned int *)&v46[v48]];
                                                unsigned int v50 = v71 + *(_DWORD *)(v38 + 3872) * v42;
                                                if (v50 < *v49 && v49[v50 + 1] != -1)
                                                {
                                                  uint64_t v51 = (uint64_t)a1[1];
                                                  if (v12) {
                                                    sub_FADDB0(v51, v19, a2, v95, v100, (char **)a8);
                                                  }
                                                  else {
                                                    sub_FAD900(v51, v19, a2, v95, v100, (char **)a8);
                                                  }
                                                  return;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  if (sub_37D0C8(*a1)) {
                                    return;
                                  }
                                  unint64_t v52 = (HIDWORD(v94)
                                       + ((unint64_t)v94 << 6)
                                       + ((unint64_t)v94 >> 2)
                                       + 2654435769u) ^ v94;
                                  unint64_t v53 = (v95 + (v52 << 6) + (v52 >> 2) + 2654435769u) ^ v52;
                                  unint64_t v54 = (v96 + (v53 << 6) + (v53 >> 2) + 2654435769u) ^ v53;
                                  unint64_t v55 = (v97 + (v54 << 6) + (v54 >> 2) + 2654435769u) ^ v54;
                                  unint64_t v56 = (v98 + (v55 << 6) + (v55 >> 2) + 2654435769u) ^ v55;
                                  unint64_t v57 = (v99 + (v56 << 6) + (v56 >> 2) + 2654435769u) ^ v56;
                                  unint64_t v58 = (v100 + (v57 << 6) + (v57 >> 2) + 2654435769u) ^ v57;
                                  sub_FAA4F0((uint64_t *)(a1[10][2]+ 272 * (((v101 + (v58 << 6) + (v58 >> 2) + 2654435769u) ^ v58) % *a1[10])), (unsigned int *)&v94, (uint64_t)&v91);
                                  if (!v93)
                                  {
                                    *(void *)&long long v104 = v19;
                                    sub_FA3658(&__p, &v104, 1uLL);
                                    sub_FA7B98(a1, (void ***)&__p, a5, a6, v99, 4u);
                                    if ((void)__p)
                                    {
                                      *((void *)&__p + 1) = __p;
                                      operator delete((void *)__p);
                                    }
                                    sub_FA32A8(a1[10], (unsigned int *)&v94, (uint64_t)&__p);
                                    sub_FA36EC((uint64_t)&v91, &__p);
                                    sub_14A84((uint64_t)&__p);
                                  }
                                  if (v91 && *v91 != v91[1])
                                  {
                                    if (v12) {
                                      sub_FA8248((uint64_t)a1, &v102, &v103, v91, a8);
                                    }
                                    else {
                                      sub_FA7E88((uint64_t)a1, &v102, &v103, v91, (char **)a8);
                                    }
LABEL_80:
                                    unint64_t v64 = v92;
                                    if (v92 && !atomic_fetch_add(&v92->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                    {
                                      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                                      std::__shared_weak_count::__release_weak(v64);
                                    }
                                    return;
                                  }
                                  if (sub_723EC(3u))
                                  {
                                    sub_6BAC((uint64_t)&__p);
                                    sub_188FC78(&__p, (uint64_t)"Costs are not available from cache (after computing them). LRUCache issue or differing keys.", 92);
                                    std::stringbuf::str();
                                    sub_7246C((uint64_t *)&v104, 3u);
                                    if (SBYTE7(v105) < 0) {
                                      operator delete((void *)v104);
                                    }
                                    sub_111ECAC((uint64_t)&__p);
                                  }
                                  uint64_t v80 = 0;
                                  unint64_t v81 = operator new(0x20uLL);
                                  long long v82 = xmmword_20B9800;
                                  strcpy((char *)v81, "ShortcutPool.Error.CacheAccess");
                                  int v78 = 0;
                                  int v79 = 0;
                                  uint64_t v108 = 0;
                                  long long v106 = 0u;
                                  long long v107 = 0u;
                                  long long v104 = 0u;
                                  long long v105 = 0u;
                                  char v77 = 0;
                                  LOBYTE(v76) = 0;
                                  uint64_t v74 = 0;
                                  __int16 v75 = 0;
                                  uint64_t v72 = 0;
                                  int v73 = 0;
                                  sub_29DC44((uint64_t)&__p, (long long **)&v78, &v104, &v76, &v74, 0, (uint64_t)&v72, 1);
                                  nullsub_1(1);
                                  sub_29E11C((uint64_t)&__p);
                                  unint64_t v59 = v73;
                                  if (v73 && !atomic_fetch_add(&v73->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                  {
                                    ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                                    std::__shared_weak_count::__release_weak(v59);
                                  }
                                  int v60 = v75;
                                  if (v75 && !atomic_fetch_add(&v75->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                  {
                                    ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                                    std::__shared_weak_count::__release_weak(v60);
                                  }
                                  if (v77 < 0)
                                  {
                                    operator delete((void *)v76);
                                    if ((SHIBYTE(v108) & 0x80000000) == 0)
                                    {
LABEL_60:
                                      if ((SHIBYTE(v106) & 0x80000000) == 0) {
                                        goto LABEL_61;
                                      }
                                      goto LABEL_66;
                                    }
                                  }
                                  else if ((SHIBYTE(v108) & 0x80000000) == 0)
                                  {
                                    goto LABEL_60;
                                  }
                                  operator delete((void *)v107);
                                  if ((SHIBYTE(v106) & 0x80000000) == 0)
                                  {
LABEL_61:
                                    if ((SBYTE7(v105) & 0x80000000) == 0) {
                                      goto LABEL_62;
                                    }
                                    goto LABEL_67;
                                  }
LABEL_66:
                                  operator delete(*((void **)&v105 + 1));
                                  if ((SBYTE7(v105) & 0x80000000) == 0)
                                  {
LABEL_62:
                                    unint64_t v61 = (void **)v78;
                                    if (!v78)
                                    {
LABEL_77:
                                      if (SHIBYTE(v82) < 0) {
                                        operator delete(v81);
                                      }
                                      goto LABEL_80;
                                    }
                                    goto LABEL_68;
                                  }
LABEL_67:
                                  operator delete((void *)v104);
                                  unint64_t v61 = (void **)v78;
                                  if (!v78) {
                                    goto LABEL_77;
                                  }
LABEL_68:
                                  unint64_t v62 = v79;
                                  uint64_t v63 = v61;
                                  if (v79 == v61)
                                  {
LABEL_76:
                                    int v79 = v61;
                                    operator delete(v63);
                                    goto LABEL_77;
                                  }
                                  while (1)
                                  {
                                    if (*((char *)v62 - 1) < 0)
                                    {
                                      operator delete(*(v62 - 3));
                                      if ((*((char *)v62 - 25) & 0x80000000) == 0) {
                                        goto LABEL_71;
                                      }
LABEL_74:
                                      operator delete(*(v62 - 6));
                                      v62 -= 6;
                                      if (v62 == v61)
                                      {
LABEL_75:
                                        uint64_t v63 = v78;
                                        goto LABEL_76;
                                      }
                                    }
                                    else
                                    {
                                      if (*((char *)v62 - 25) < 0) {
                                        goto LABEL_74;
                                      }
LABEL_71:
                                      v62 -= 6;
                                      if (v62 == v61) {
                                        goto LABEL_75;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_FA7A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (*(char *)(v28 - 153) < 0)
  {
    operator delete(*(void **)(v28 - 176));
    sub_111ECAC((uint64_t)&a28);
    sub_14A84(v28 - 256);
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a28);
  sub_14A84(v28 - 256);
  _Unwind_Resume(a1);
}

void sub_FA7AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35)
{
  sub_14A84(v35 - 256);
  _Unwind_Resume(a1);
}

void sub_FA7B98(void **a1, void ***a2, unsigned int *a3, int *a4, char a5, unsigned int a6)
{
  if ((sub_37D0C8(*a1) & 1) == 0)
  {
    unsigned int v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    char v12 = *a2;
    uint64_t v13 = a2[1];
    if (v12 != v13)
    {
      int v14 = 0;
      do
        v14 |= sub_FA8614((uint64_t)a1, v12++, a3, a4, a5, (uint64_t)&v37);
      while (v12 != v13);
      unint64_t v15 = v37;
      if (v14)
      {
        long long __p = 0;
        unsigned __int8 v47 = 0;
        uint64_t v48 = 0;
        sub_F92358(&v35, 0xCCCCCCCCCCCCCCCDLL * ((v38 - (unsigned char *)v37) >> 3), (uint64_t)&__p);
        if (__p)
        {
          unsigned __int8 v47 = __p;
          operator delete(__p);
        }
        if (v38 != v37)
        {
          uint64_t v16 = 0;
          unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((v38 - (unsigned char *)v37) >> 3);
          do
          {
            unint64_t v18 = (char *)v37 + 40 * v16;
            unint64_t v19 = (void *)*((void *)v18 + 2);
            if (v19)
            {
              uint64_t v20 = 0;
              unsigned int v21 = (void *)*((void *)v18 + 2);
              do
              {
                ++v20;
                unsigned int v21 = (void *)*v21;
              }
              while (v21);
            }
            else
            {
              uint64_t v20 = 0;
            }
            sub_FAB404((unint64_t *)v35 + 3 * v16, *((void *)v35 + 3 * v16 + 1), v19, 0, v20);
            ++v16;
          }
          while (v16 != v17);
        }
        atomic_fetch_add((atomic_uint *volatile)sub_F72FEC(), 1u);
        char v45 = a5;
        if ((sub_37D0C8(*a1) & 1) == 0)
        {
          uint64_t v22 = sub_2E0C4();
          BOOL v40 = a1;
          unint64_t v41 = &v35;
          int v42 = a3;
          unsigned int v43 = a4;
          int v44 = &v45;
          sub_FAE294((uint64_t)&__p, (uint64_t)v22, a6);
          sub_31A008((uint64_t)&__p);
        }
        atomic_fetch_add((atomic_uint *volatile)sub_F72FEC(), 0xFFFFFFFF);
        int v23 = (char *)v35;
        if (v35)
        {
          uint64_t v24 = v36;
          uint64_t v25 = v35;
          if (v36 != v35)
          {
            uint64_t v26 = v36;
            do
            {
              uint64_t v28 = (void *)*((void *)v26 - 3);
              v26 -= 24;
              uint64_t v27 = v28;
              if (v28)
              {
                *((void *)v24 - 2) = v27;
                operator delete(v27);
              }
              uint64_t v24 = v26;
            }
            while (v26 != v23);
            uint64_t v25 = v35;
          }
          int v36 = v23;
          operator delete(v25);
        }
        unint64_t v15 = v37;
      }
      if (v15)
      {
        uint64_t v29 = v38;
        unint64_t v30 = v15;
        if (v38 != (unsigned char *)v15)
        {
          do
          {
            unint64_t v31 = (void *)*(v29 - 3);
            if (v31)
            {
              do
              {
                unint64_t v32 = (void *)*v31;
                operator delete(v31);
                unint64_t v31 = v32;
              }
              while (v32);
            }
            int v34 = (void *)*(v29 - 5);
            v29 -= 5;
            uint64_t v33 = v34;
            *uint64_t v29 = 0;
            if (v34) {
              operator delete(v33);
            }
          }
          while (v29 != v15);
          unint64_t v30 = v37;
        }
        uint64_t v38 = v15;
        operator delete(v30);
      }
    }
  }
}

void sub_FA7E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
    sub_FA4880(&a13);
    _Unwind_Resume(a1);
  }
  sub_FA4880(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_FA7E88(uint64_t a1, unint64_t *a2, unint64_t *a3, void *a4, char **a5)
{
  unint64_t v10 = *a2;
  uint64_t v11 = sub_FA08AC(*(void *)(a1 + 32), *a2, 1);
  if (v11
    && (char v12 = &v11[-*(int *)v11], *(unsigned __int16 *)v12 >= 5u)
    && *((_WORD *)v12 + 2)
    && (uint64_t v13 = &v11[*((unsigned __int16 *)v12 + 2) + *(unsigned int *)&v11[*((unsigned __int16 *)v12 + 2)]],
        *(_DWORD *)v13 > HIDWORD(v10))
    && (int v14 = &v13[4 * HIDWORD(v10) + 4 + *(unsigned int *)&v13[4 * HIDWORD(v10) + 4]],
        unint64_t v15 = &v14[-*(int *)v14],
        *(unsigned __int16 *)v15 >= 0xBu)
    && (uint64_t v16 = *((unsigned __int16 *)v15 + 5)) != 0)
  {
    int v17 = *(_DWORD *)&v14[v16 + *(unsigned int *)&v14[v16]];
  }
  else
  {
    int v17 = 0;
  }
  uint64_t result = sub_FA0788(*(void *)(a1 + 8), *a3, *a2);
  if ((_WORD)result != 0xFFFF)
  {
    unsigned __int16 v19 = result;
    unint64_t v20 = *a2;
    uint64_t result = (uint64_t)sub_FA08AC(*(void *)(a1 + 8), *a2, 1);
    if (result)
    {
      unsigned int v21 = (unsigned __int16 *)(result - *(int *)result);
      if (*v21 >= 5u)
      {
        if (v21[2])
        {
          uint64_t v22 = (_DWORD *)(result + v21[2] + *(unsigned int *)(result + v21[2]));
          if (*v22 > HIDWORD(v20))
          {
            int v23 = (_DWORD *)((char *)&v22[HIDWORD(v20) + 1] + v22[HIDWORD(v20) + 1]);
            uint64_t v24 = (unsigned __int16 *)((char *)v23 - *v23);
            if (*v24 >= 0xBu)
            {
              uint64_t v25 = v24[5];
              if (v25)
              {
                uint64_t v26 = (int *)((char *)v23 + v25 + *(unsigned int *)((char *)v23 + v25));
                unsigned int v29 = *v26;
                uint64_t v28 = v26 + 1;
                uint64_t v27 = v29;
                if (v29)
                {
                  int v30 = 0;
                  unsigned int v31 = v17 * v19;
                  unint64_t v32 = &v28[v27];
                  unint64_t v58 = a3;
                  unint64_t v59 = a4;
                  unint64_t v54 = v32;
                  unint64_t v55 = a5;
                  do
                  {
                    while (1)
                    {
                      uint64_t result = v31;
                      uint64_t v34 = *(unsigned int *)(*a4 + 8 * v31);
                      unint64_t v35 = v34 == -1
                          ? 0x7FFFFFFF00000000
                          : (unint64_t)*(unsigned int *)(*a4 + 8 * result + 4) << 32;
                      uint64_t v36 = HIDWORD(*v28);
                      uint64_t v37 = (*v28 >> 4) & 0x8FFFFFFF | (*v28 << 31) | (((*v28 >> 3) & 1) << 28) & 0x9FFFFFFF | (((*v28 >> 2) & 1) << 29) & 0xBFFFFFFF | (((*v28 >> 1) & 1) << 30);
                      unint64_t v38 = v35 | v34;
                      uint64_t v39 = a5;
                      BOOL v40 = (unint64_t *)a5[1];
                      unint64_t v41 = (unint64_t)v39[2];
                      if ((unint64_t)v40 >= v41) {
                        break;
                      }
                      unint64_t *v40 = *v58;
                      v40[1] = v36 | (v37 << 32);
                      v40[2] = *a2;
                      *((_WORD *)v40 + 12) = v19;
                      *((_WORD *)v40 + 13) = v30;
                      *(unint64_t *)((char *)v40 + 28) = v38;
                      uint64_t v33 = (char *)(v40 + 5);
                      a5 = v39;
                      a4 = v59;
                      v39[1] = v33;
                      unsigned int v31 = result + 1;
                      ++v30;
                      if (++v28 == v32) {
                        return result;
                      }
                    }
                    int v42 = (unint64_t *)*v39;
                    unint64_t v43 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v40 - *v39) >> 3);
                    unint64_t v44 = v43 + 1;
                    if (v43 + 1 > 0x666666666666666) {
                      sub_2E00();
                    }
                    uint64_t v57 = result;
                    unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v41 - (void)v42) >> 3);
                    if (2 * v45 > v44) {
                      unint64_t v44 = 2 * v45;
                    }
                    if (v45 >= 0x333333333333333) {
                      unint64_t v46 = 0x666666666666666;
                    }
                    else {
                      unint64_t v46 = v44;
                    }
                    if (v46 > 0x666666666666666) {
                      sub_188D718();
                    }
                    uint64_t v56 = 40 * v46;
                    unsigned __int8 v47 = (char *)operator new(40 * v46);
                    uint64_t v48 = &v47[40 * v43];
                    *(void *)uint64_t v48 = *v58;
                    *((void *)v48 + 1) = v36 | (v37 << 32);
                    *((void *)v48 + 2) = *a2;
                    *((_WORD *)v48 + 12) = v19;
                    *((_WORD *)v48 + 13) = v30;
                    *(void *)(v48 + 28) = v38;
                    if (v40 == v42)
                    {
                      a4 = v59;
                      a5 = v55;
                      unint64_t v53 = v48 + 40;
                      char *v55 = v48;
                      v55[1] = v48 + 40;
                      v55[2] = &v47[v56];
                      if (!v42) {
                        goto LABEL_35;
                      }
                    }
                    else
                    {
                      unsigned int v49 = &v47[40 * v43];
                      a4 = v59;
                      do
                      {
                        long long v50 = *(_OWORD *)(v40 - 5);
                        long long v51 = *(_OWORD *)(v40 - 3);
                        unint64_t v52 = v49 - 40;
                        *((_DWORD *)v49 - 2) = *((_DWORD *)v40 - 2);
                        *(_OWORD *)(v49 - 24) = v51;
                        *(_OWORD *)(v49 - 40) = v50;
                        v40 -= 5;
                        v49 -= 40;
                      }
                      while (v40 != v42);
                      a5 = v55;
                      unint64_t v53 = v48 + 40;
                      char *v55 = v52;
                      v55[1] = v48 + 40;
                      v55[2] = &v47[v56];
                      if (!v42) {
                        goto LABEL_35;
                      }
                    }
                    operator delete(v42);
LABEL_35:
                    unint64_t v32 = v54;
                    uint64_t result = v57;
                    a5[1] = v53;
                    unsigned int v31 = v57 + 1;
                    ++v30;
                    ++v28;
                  }
                  while (v28 != v54);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_FA8248(uint64_t a1, unint64_t *a2, unint64_t *a3, void *a4, uint64_t a5)
{
  unint64_t v10 = *a2;
  uint64_t v11 = sub_FA08AC(*(void *)(a1 + 32), *a2, 1);
  if (v11
    && (char v12 = &v11[-*(int *)v11], *(unsigned __int16 *)v12 >= 5u)
    && *((_WORD *)v12 + 2)
    && (uint64_t v13 = &v11[*((unsigned __int16 *)v12 + 2) + *(unsigned int *)&v11[*((unsigned __int16 *)v12 + 2)]],
        *(_DWORD *)v13 > HIDWORD(v10))
    && (int v14 = &v13[4 * HIDWORD(v10) + 4 + *(unsigned int *)&v13[4 * HIDWORD(v10) + 4]],
        unint64_t v15 = &v14[-*(int *)v14],
        *(unsigned __int16 *)v15 >= 0xBu)
    && (uint64_t v16 = *((unsigned __int16 *)v15 + 5)) != 0)
  {
    int v17 = *(_DWORD *)&v14[v16 + *(unsigned int *)&v14[v16]];
  }
  else
  {
    int v17 = 0;
  }
  uint64_t result = sub_FA24BC(*(void *)(a1 + 8), *a3, *a2);
  unsigned __int16 v61 = result;
  if ((_WORD)result != 0xFFFF)
  {
    unint64_t v19 = *a2;
    uint64_t result = (uint64_t)sub_FA08AC(*(void *)(a1 + 8), *a2, 1);
    if (result)
    {
      unint64_t v20 = (unsigned __int16 *)(result - *(int *)result);
      if (*v20 >= 5u)
      {
        if (v20[2])
        {
          unsigned int v21 = (_DWORD *)(result + v20[2] + *(unsigned int *)(result + v20[2]));
          if (*v21 > HIDWORD(v19))
          {
            uint64_t v22 = (_DWORD *)((char *)&v21[HIDWORD(v19) + 1] + v21[HIDWORD(v19) + 1]);
            int v23 = (unsigned __int16 *)((char *)v22 - *v22);
            if (*v23 >= 9u)
            {
              uint64_t v24 = v23[4];
              if (v24)
              {
                uint64_t v25 = (int *)((char *)v22 + v24 + *(unsigned int *)((char *)v22 + v24));
                unsigned int v28 = *v25;
                uint64_t v27 = v25 + 1;
                uint64_t v26 = v28;
                if (v28)
                {
                  int v29 = 0;
                  unsigned int v30 = v61;
                  unsigned int v31 = &v27[v26];
                  int v60 = a3;
                  int v59 = v17;
                  unint64_t v55 = v31;
                  uint64_t v56 = a4;
                  do
                  {
                    while (1)
                    {
                      uint64_t result = v30;
                      uint64_t v33 = *(unsigned int *)(*a4 + 8 * v30);
                      unint64_t v34 = v33 == -1
                          ? 0x7FFFFFFF00000000
                          : (unint64_t)*(unsigned int *)(*a4 + 8 * result + 4) << 32;
                      uint64_t v35 = HIDWORD(*v27);
                      uint64_t v36 = (*v27 >> 4) & 0x8FFFFFFF | (*v27 << 31) | (((*v27 >> 3) & 1) << 28) & 0x9FFFFFFF | (((*v27 >> 2) & 1) << 29) & 0xBFFFFFFF | (((*v27 >> 1) & 1) << 30);
                      unint64_t v37 = v34 | v33;
                      uint64_t v39 = *(uint64_t **)(a5 + 8);
                      unint64_t v38 = *(void *)(a5 + 16);
                      if ((unint64_t)v39 >= v38) {
                        break;
                      }
                      unint64_t v32 = *v60;
                      *uint64_t v39 = v35 | (v36 << 32);
                      v39[1] = v32;
                      v39[2] = *a2;
                      *((_WORD *)v39 + 12) = v29;
                      *((_WORD *)v39 + 13) = v61;
                      *(uint64_t *)((char *)v39 + 28) = v37;
                      *(void *)(a5 + 8) = v39 + 5;
                      unsigned int v30 = result + v59;
                      ++v29;
                      if (++v27 == v31) {
                        return result;
                      }
                    }
                    uint64_t v40 = a5;
                    unint64_t v41 = *(uint64_t **)a5;
                    unint64_t v42 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v39 - *(void *)a5) >> 3);
                    unint64_t v43 = v42 + 1;
                    if (v42 + 1 > 0x666666666666666) {
                      sub_2E00();
                    }
                    uint64_t v58 = result;
                    unint64_t v44 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v38 - (void)v41) >> 3);
                    if (2 * v44 > v43) {
                      unint64_t v43 = 2 * v44;
                    }
                    if (v44 >= 0x333333333333333) {
                      unint64_t v45 = 0x666666666666666;
                    }
                    else {
                      unint64_t v45 = v43;
                    }
                    if (v45 > 0x666666666666666) {
                      sub_188D718();
                    }
                    uint64_t v57 = 40 * v45;
                    unint64_t v46 = (char *)operator new(40 * v45);
                    unsigned __int8 v47 = &v46[40 * v42];
                    unint64_t v48 = *v60;
                    *(void *)unsigned __int8 v47 = v35 | (v36 << 32);
                    *((void *)v47 + 1) = v48;
                    *((void *)v47 + 2) = *a2;
                    *((_WORD *)v47 + 12) = v29;
                    *((_WORD *)v47 + 13) = v61;
                    *(void *)(v47 + 28) = v37;
                    if (v39 == v41)
                    {
                      a5 = v40;
                      int v50 = v59;
                      a4 = v56;
                      unint64_t v54 = v47 + 40;
                      *(void *)a5 = v47;
                      *(void *)(a5 + 8) = v47 + 40;
                      *(void *)(a5 + 16) = &v46[v57];
                      if (!v41) {
                        goto LABEL_35;
                      }
                    }
                    else
                    {
                      unsigned int v49 = &v46[40 * v42];
                      a5 = v40;
                      int v50 = v59;
                      do
                      {
                        long long v51 = *(_OWORD *)(v39 - 5);
                        long long v52 = *(_OWORD *)(v39 - 3);
                        unint64_t v53 = v49 - 40;
                        *((_DWORD *)v49 - 2) = *((_DWORD *)v39 - 2);
                        *(_OWORD *)(v49 - 24) = v52;
                        *(_OWORD *)(v49 - 40) = v51;
                        v39 -= 5;
                        v49 -= 40;
                      }
                      while (v39 != v41);
                      a4 = v56;
                      unint64_t v54 = v47 + 40;
                      *(void *)a5 = v53;
                      *(void *)(a5 + 8) = v47 + 40;
                      *(void *)(a5 + 16) = &v46[v57];
                      if (!v41) {
                        goto LABEL_35;
                      }
                    }
                    operator delete(v41);
LABEL_35:
                    unsigned int v31 = v55;
                    uint64_t result = v58;
                    *(void *)(a5 + 8) = v54;
                    unsigned int v30 = v58 + v50;
                    ++v29;
                    ++v27;
                  }
                  while (v27 != v55);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_FA8614(uint64_t a1, void **a2, unsigned int *a3, int *a4, char a5, uint64_t a6)
{
  __int16 v103 = *(_WORD *)(a1 + 20);
  int v11 = *(_DWORD *)(a1 + 16);
  long long v107 = *(void **)(a1 + 72);
  uint64_t v104 = *(void *)(a1 + 8);
  unsigned int v12 = sub_F6F0D8();
  if (sub_35E640()) {
    int v13 = *a4;
  }
  else {
    int v13 = 0x7FFFFFFF;
  }
  int v14 = sub_35E640();
  int v109 = a3;
  int v110 = a4;
  int v15 = *a4;
  if (!v14) {
    int v15 = 0x7FFFFFFF;
  }
  uint64_t v16 = (unsigned int *)a2;
  unsigned int v17 = *a3;
  v125[0] = *a2;
  v125[1] = (void *)__PAIR64__(v12, v17);
  *(void *)&long long v126 = __PAIR64__(v15, v13);
  char v111 = a5;
  BYTE8(v126) = a5;
  WORD5(v126) = v103;
  HIDWORD(v126) = v11;
  LOBYTE(v127) = 0;
  DWORD1(v127) = 0x7FFFFFFF;
  sub_FAD72C((uint64_t *)v125, v107, v104, (uint64_t)&v128);
  uint64_t v18 = *(void *)(a1 + 8);
  if (sub_F06620(*(void *)(a1 + 72), v129) && !v133)
  {
    unint64_t v19 = v128;
    unsigned int v20 = v129;
    int v21 = v134;
    uint64_t v22 = sub_383A0C(v18, v128, 1);
    if (v22)
    {
      int v23 = &v22[-*(int *)v22];
      if (*(unsigned __int16 *)v23 >= 0xFu)
      {
        if (*((_WORD *)v23 + 7))
        {
          uint64_t v24 = &v22[*((unsigned __int16 *)v23 + 7) + *(unsigned int *)&v22[*((unsigned __int16 *)v23 + 7)]];
          if (*(_DWORD *)v24 > HIDWORD(v19))
          {
            uint64_t v25 = &v24[4 * HIDWORD(v19) + 4 + *(unsigned int *)&v24[4 * HIDWORD(v19) + 4]];
            uint64_t v26 = &v25[-*(int *)v25];
            if (*(unsigned __int16 *)v26 >= 5u)
            {
              uint64_t v27 = *((unsigned __int16 *)v26 + 2);
              if (v27)
              {
                unsigned int v28 = (unsigned int *)&v25[v27 + *(unsigned int *)&v25[v27]];
                unsigned int v29 = v20 + *(_DWORD *)(v18 + 3872) * v21;
                if (v29 < *v28 && v28[v29 + 1] != -1) {
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  unsigned int v30 = v16;
  if (!*v16) {
    goto LABEL_24;
  }
  unsigned int v31 = sub_F93238(*(void *)(a1 + 24), *v16, 1);
  if (!v31 || (unint64_t v32 = &v31[-*(int *)v31], *(unsigned __int16 *)v32 < 9u) || (v33 = *((unsigned __int16 *)v32 + 4)) == 0)
  {
    int v37 = -1;
    goto LABEL_25;
  }
  unint64_t v34 = (int *)sub_F930D4((unsigned int *)&v31[v33 + *(unsigned int *)&v31[v33]], v16[1]);
  uint64_t v35 = (unsigned __int16 *)((char *)v34 - *v34);
  if (*v35 < 5u || (uint64_t v36 = v35[2]) == 0)
  {
LABEL_24:
    int v37 = 0;
    goto LABEL_25;
  }
  int v37 = *((unsigned __int8 *)v34 + v36);
LABEL_25:
  unint64_t v38 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 3);
  unint64_t v39 = (v37 + 1);
  if (v39 > v38) {
    sub_FAB798((void **)a6, v39 - v38);
  }
  unint64_t v40 = (HIDWORD(v128)
       + ((unint64_t)v128 << 6)
       + ((unint64_t)v128 >> 2)
       + 2654435769u) ^ v128;
  unint64_t v41 = (v129 + (v40 << 6) + (v40 >> 2) + 2654435769u) ^ v40;
  unint64_t v42 = (v130 + (v41 << 6) + (v41 >> 2) + 2654435769u) ^ v41;
  unint64_t v43 = (v131 + (v42 << 6) + (v42 >> 2) + 2654435769u) ^ v42;
  unint64_t v44 = (v132 + (v43 << 6) + (v43 >> 2) + 2654435769u) ^ v43;
  unint64_t v45 = (v133 + (v44 << 6) + (v44 >> 2) + 2654435769u) ^ v44;
  unint64_t v46 = (v134 + (v45 << 6) + (v45 >> 2) + 2654435769u) ^ v45;
  sub_FAA4F0((uint64_t *)(*(void *)(*(void *)(a1 + 80) + 16)+ 272 * (((v135 + (v46 << 6) + (v46 >> 2) + 2654435769u) ^ v46) % **(void **)(a1 + 80))), (unsigned int *)&v128, (uint64_t)v125);
  int v47 = v126;
  unint64_t v48 = (std::__shared_weak_count *)v125[1];
  if (v125[1] && !atomic_fetch_add((atomic_ullong *volatile)v125[1] + 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
    if (v47) {
      return 0;
    }
  }
  else if (v47)
  {
    return 0;
  }
  long long v126 = 0u;
  long long v127 = 0u;
  *(_OWORD *)char v125 = 0u;
  sub_FA9314((uint64_t)v125);
  uint64_t v50 = ((unint64_t)(*((void *)&v127 + 1) + v127) * (unsigned __int128)0x8060180601806019) >> 64;
  unint64_t v51 = (v50 + ((unint64_t)(*((void *)&v127 + 1) + v127 - v50) >> 1)) >> 8;
  uint64_t v52 = *((void *)v125[1] + v51) + 12 * (*((void *)&v127 + 1) + v127 - 341 * v51);
  *(void *)uint64_t v52 = *(void *)v30;
  *(_DWORD *)(v52 + 8) = v37;
  long long __p = 0;
  __int16 v123 = 0;
  uint64_t v124 = 0;
  BOOL v53 = __CFADD__(*((void *)&v127 + 1), 1);
  uint64_t v54 = ++*((void *)&v127 + 1);
  if (v53) {
    goto LABEL_73;
  }
  do
  {
    unint64_t v55 = *((void *)v125[1] + (unint64_t)v127 / 0x155) + 12 * ((unint64_t)v127 % 0x155);
    unsigned int v56 = *(_DWORD *)(v55 + 8);
    uint64_t v120 = *(void *)v55;
    unsigned int v121 = v56;
    *(void *)&long long v127 = v127 + 1;
    *((void *)&v127 + 1) = v54 - 1;
    if ((unint64_t)v127 >= 0x2AA)
    {
      operator delete(*(void **)v125[1]);
      v125[1] = (char *)v125[1] + 8;
      *(void *)&long long v127 = v127 - 341;
    }
    unsigned int v57 = v121;
    if (!sub_36F918((void *)(*(void *)a6 + 40 * v121), &v120))
    {
      sub_FAB9FC(*(void *)a6 + 40 * v57, &v120, &v120);
      if (v57 != 1)
      {
        sub_FABD64(*(void *)(a1 + 24), (unsigned int *)&v120, &__p);
        uint64_t v58 = (uint64_t *)__p;
        uint64_t v108 = v123;
        if (__p != v123)
        {
          unsigned int v105 = v57 - 1;
          do
          {
            __int16 v60 = *(_WORD *)(a1 + 20);
            int v61 = *(_DWORD *)(a1 + 16);
            unint64_t v62 = *(void **)(a1 + 72);
            uint64_t v63 = *(void *)(a1 + 8);
            unsigned int v64 = sub_F6F0D8();
            int v65 = sub_35E640();
            int v66 = *v110;
            int v67 = sub_35E640();
            int v68 = *v110;
            if (v65) {
              int v69 = v66;
            }
            else {
              int v69 = 0x7FFFFFFF;
            }
            if (!v67) {
              int v68 = 0x7FFFFFFF;
            }
            unsigned int v70 = *v109;
            uint64_t v136 = *v58;
            unint64_t v137 = __PAIR64__(v64, v70);
            int v138 = v69;
            int v139 = v68;
            char v140 = v111;
            __int16 v141 = v60;
            int v142 = v61;
            char v143 = 0;
            int v144 = 0x7FFFFFFF;
            sub_FAD72C(&v136, v62, v63, (uint64_t)&v112);
            uint64_t v71 = *(void *)(a1 + 8);
            BOOL v72 = sub_F06620(*(void *)(a1 + 72), v113);
            if (v117) {
              BOOL v73 = 0;
            }
            else {
              BOOL v73 = v72;
            }
            if (v73)
            {
              unint64_t v74 = v112;
              unsigned int v75 = v113;
              int v76 = v118;
              char v77 = sub_383A0C(v71, v112, 1);
              if (v77)
              {
                int v78 = &v77[-*(int *)v77];
                if (*(unsigned __int16 *)v78 >= 0xFu)
                {
                  if (*((_WORD *)v78 + 7))
                  {
                    int v79 = &v77[*((unsigned __int16 *)v78 + 7) + *(unsigned int *)&v77[*((unsigned __int16 *)v78 + 7)]];
                    if (*(_DWORD *)v79 > HIDWORD(v74))
                    {
                      uint64_t v80 = &v79[4 * HIDWORD(v74) + 4 + *(unsigned int *)&v79[4 * HIDWORD(v74) + 4]];
                      unint64_t v81 = &v80[-*(int *)v80];
                      if (*(unsigned __int16 *)v81 >= 5u)
                      {
                        uint64_t v82 = *((unsigned __int16 *)v81 + 2);
                        if (v82)
                        {
                          unint64_t v83 = (unsigned int *)&v80[v82 + *(unsigned int *)&v80[v82]];
                          unsigned int v84 = v75 + *(_DWORD *)(v71 + 3872) * v76;
                          if (v84 < *v83 && v83[v84 + 1] != -1) {
                            goto LABEL_43;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            unint64_t v85 = (HIDWORD(v112)
                 + 2654435769
                 + ((unint64_t)v112 << 6)
                 + ((unint64_t)v112 >> 2)) ^ v112;
            unint64_t v86 = (v113 + 2654435769 + (v85 << 6) + (v85 >> 2)) ^ v85;
            unint64_t v87 = (v114 + 2654435769 + (v86 << 6) + (v86 >> 2)) ^ v86;
            unint64_t v88 = (v115 + 2654435769 + (v87 << 6) + (v87 >> 2)) ^ v87;
            unint64_t v89 = (v116 + 2654435769 + (v88 << 6) + (v88 >> 2)) ^ v88;
            unint64_t v90 = (v117 + 2654435769 + (v89 << 6) + (v89 >> 2)) ^ v89;
            unint64_t v91 = (v118 + 2654435769 + (v90 << 6) + (v90 >> 2)) ^ v90;
            sub_FAA4F0((uint64_t *)(*(void *)(*(void *)(a1 + 80) + 16)+ 272 * (((v119 + 2654435769 + (v91 << 6) + (v91 >> 2)) ^ v91) % **(void **)(a1 + 80))), (unsigned int *)&v112, (uint64_t)&v136);
            int v92 = v138;
            char v93 = (std::__shared_weak_count *)v137;
            if (v137 && !atomic_fetch_add((atomic_ullong *volatile)(v137 + 8), 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
              std::__shared_weak_count::__release_weak(v93);
              if (!v92)
              {
LABEL_64:
                unint64_t v94 = v125[1];
                if ((void *)v126 == v125[1]) {
                  uint64_t v95 = 0;
                }
                else {
                  uint64_t v95 = 341 * ((uint64_t)(v126 - (unint64_t)v125[1]) >> 3) - 1;
                }
                unint64_t v96 = *((void *)&v127 + 1) + v127;
                if (v95 == *((void *)&v127 + 1) + (void)v127)
                {
                  sub_FA9314((uint64_t)v125);
                  unint64_t v94 = v125[1];
                  unint64_t v96 = *((void *)&v127 + 1) + v127;
                }
                unint64_t v59 = v94[v96 / 0x155] + 12 * (v96 % 0x155);
                *(void *)unint64_t v59 = *v58;
                *(_DWORD *)(v59 + 8) = v105;
                ++*((void *)&v127 + 1);
              }
            }
            else if (!v92)
            {
              goto LABEL_64;
            }
LABEL_43:
            ++v58;
          }
          while (v58 != v108);
        }
      }
    }
    uint64_t v54 = *((void *)&v127 + 1);
  }
  while (*((void *)&v127 + 1));
  if (__p)
  {
    __int16 v123 = (uint64_t *)__p;
    operator delete(__p);
  }
LABEL_73:
  int v97 = (void **)v125[1];
  int v98 = (void **)v126;
  *((void *)&v127 + 1) = 0;
  unint64_t v99 = v126 - (unint64_t)v125[1];
  if ((unint64_t)v126 - (unint64_t)v125[1] >= 0x11)
  {
    do
    {
      operator delete(*v97);
      int v98 = (void **)v126;
      int v97 = (void **)((char *)v125[1] + 8);
      v125[1] = v97;
      unint64_t v99 = v126 - (void)v97;
    }
    while ((void)v126 - (void)v97 > 0x10uLL);
  }
  unint64_t v100 = v99 >> 3;
  if (v100 == 1)
  {
    uint64_t v101 = 170;
LABEL_79:
    *(void *)&long long v127 = v101;
  }
  else if (v100 == 2)
  {
    uint64_t v101 = 341;
    goto LABEL_79;
  }
  if (v97 != v98)
  {
    do
    {
      unint64_t v102 = *v97++;
      operator delete(v102);
    }
    while (v97 != v98);
    if ((void *)v126 != v125[1]) {
      *(void *)&long long v126 = v126 + (((unint64_t)v125[1] - v126 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (v125[0]) {
    operator delete(v125[0]);
  }
  return 1;
}

void sub_FA8F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_FA8F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
  if (__p) {
    operator delete(__p);
  }
  sub_4927C((uint64_t)&a29);
  _Unwind_Resume(a1);
}

BOOL sub_FA8F9C(uint64_t a1, unsigned int *a2, unsigned int *a3, int *a4, char a5)
{
  unsigned int v6 = *a2;
  if (!v6) {
    return 0;
  }
  int v11 = sub_F93238(*(void *)(a1 + 24), v6, 1);
  if (!v11) {
    return 0;
  }
  unsigned int v12 = &v11[-*(int *)v11];
  if (*(unsigned __int16 *)v12 < 9u) {
    return 0;
  }
  uint64_t v13 = *((unsigned __int16 *)v12 + 4);
  if (!v13) {
    return 0;
  }
  int v14 = (int *)sub_F930D4((unsigned int *)&v11[v13 + *(unsigned int *)&v11[v13]], a2[1]);
  int v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 < 5u) {
    return 0;
  }
  uint64_t v16 = v15[2];
  if (!v16 || !*((unsigned char *)v14 + v16)) {
    return 0;
  }
  __int16 v45 = *(_WORD *)(a1 + 20);
  int v17 = *(_DWORD *)(a1 + 16);
  uint64_t v46 = *(void *)(a1 + 8);
  int v47 = *(void **)(a1 + 72);
  unsigned int v18 = sub_F6F0D8();
  if (sub_35E640()) {
    int v19 = *a4;
  }
  else {
    int v19 = 0x7FFFFFFF;
  }
  int v20 = sub_35E640();
  int v21 = *a4;
  if (!v20) {
    int v21 = 0x7FFFFFFF;
  }
  unsigned int v22 = *a3;
  uint64_t v56 = *(void *)a2;
  unint64_t v57 = __PAIR64__(v18, v22);
  int v58 = v19;
  int v59 = v21;
  char v60 = a5;
  __int16 v61 = v45;
  int v62 = v17;
  char v63 = 0;
  int v64 = 0x7FFFFFFF;
  sub_FAD72C(&v56, v47, v46, (uint64_t)&v48);
  uint64_t v23 = *(void *)(a1 + 8);
  if (sub_F06620(*(void *)(a1 + 72), v49) && !v53)
  {
    unint64_t v24 = v48;
    unsigned int v25 = v49;
    int v26 = v54;
    uint64_t v27 = sub_383A0C(v23, v48, 1);
    if (v27)
    {
      unsigned int v28 = &v27[-*(int *)v27];
      if (*(unsigned __int16 *)v28 >= 0xFu)
      {
        if (*((_WORD *)v28 + 7))
        {
          unsigned int v29 = &v27[*((unsigned __int16 *)v28 + 7) + *(unsigned int *)&v27[*((unsigned __int16 *)v28 + 7)]];
          if (*(_DWORD *)v29 > HIDWORD(v24))
          {
            unsigned int v30 = &v29[4 * HIDWORD(v24) + 4 + *(unsigned int *)&v29[4 * HIDWORD(v24) + 4]];
            unsigned int v31 = &v30[-*(int *)v30];
            if (*(unsigned __int16 *)v31 >= 5u)
            {
              uint64_t v32 = *((unsigned __int16 *)v31 + 2);
              if (v32)
              {
                uint64_t v33 = (unsigned int *)&v30[v32 + *(unsigned int *)&v30[v32]];
                unsigned int v34 = v25 + *(_DWORD *)(v23 + 3872) * v26;
                if (v34 < *v33 && v33[v34 + 1] != -1) {
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  unint64_t v37 = (HIDWORD(v48)
       + ((unint64_t)v48 << 6)
       + ((unint64_t)v48 >> 2)
       + 2654435769u) ^ v48;
  unint64_t v38 = (v49 + (v37 << 6) + (v37 >> 2) + 2654435769u) ^ v37;
  unint64_t v39 = (v50 + (v38 << 6) + (v38 >> 2) + 2654435769u) ^ v38;
  unint64_t v40 = (v51 + (v39 << 6) + (v39 >> 2) + 2654435769u) ^ v39;
  unint64_t v41 = (v52 + (v40 << 6) + (v40 >> 2) + 2654435769u) ^ v40;
  unint64_t v42 = (v53 + (v41 << 6) + (v41 >> 2) + 2654435769u) ^ v41;
  unint64_t v43 = (v54 + (v42 << 6) + (v42 >> 2) + 2654435769u) ^ v42;
  sub_FAA4F0((uint64_t *)(*(void *)(*(void *)(a1 + 80) + 16)+ 272 * (((v55 + (v43 << 6) + (v43 >> 2) + 2654435769u) ^ v43) % **(void **)(a1 + 80))), (unsigned int *)&v48, (uint64_t)&v56);
  BOOL v35 = (_BYTE)v58 == 0;
  unint64_t v44 = (std::__shared_weak_count *)v57;
  if (v57 && !atomic_fetch_add((atomic_ullong *volatile)(v57 + 8), 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  return v35;
}

void sub_FA9314(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x155;
  unint64_t v4 = v2 - 341;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    unsigned int v6 = *(void **)(a1 + 8);
    int v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)int v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        unsigned int v34 = (char *)operator new(8 * v31);
        BOOL v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        int v5 = v35;
        if (!v37)
        {
          int v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            unint64_t v74 = &v34[8 * v32];
            unint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v40 = &v35[v76];
              v7 += v76;
              char v77 = (long long *)(v6 + 3);
              int v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *int v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    int v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    int v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      unint64_t v91 = operator new(0xFFCuLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    unint64_t v91 = operator new(0xFFCuLL);
    sub_224F8((void **)a1, &v91);
    unint64_t v41 = *(void **)(a1 + 8);
    int v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        unsigned int v34 = (char *)operator new(8 * v42);
        BOOL v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        int v5 = v35;
        if (!v37)
        {
          int v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            uint64_t v82 = &v34[8 * v43];
            int v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              int v47 = &v35[v84];
              v7 += v84;
              unint64_t v85 = (long long *)(v41 + 3);
              unint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *unint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            int v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)int v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          int v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  unsigned int v25 = (char *)operator new(8 * v24);
  int v26 = operator new(0xFFCuLL);
  uint64_t v27 = &v25[8 * v21];
  unsigned int v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    unint64_t v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      unsigned int v49 = (char *)operator new(8 * v48);
      uint64_t v27 = &v49[8 * (v48 >> 2)];
      unsigned int v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      unsigned int v25 = v49;
      *(void *)uint64_t v27 = v90;
      unsigned int v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)uint64_t v27 = v26;
      unsigned int v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          char v60 = (char *)operator new(8 * v59);
          unsigned int v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          unsigned __int8 v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          unsigned int v29 = v53;
          if (!v37)
          {
            unsigned int v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            int v64 = &v60[8 * v61];
            int v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            int v64 = &v60[8 * v61];
            int v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            int v64 = &v53[v68];
            int v65 = &v27[v68];
            int v69 = (long long *)(v27 + 16);
            unsigned int v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)unsigned int v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)int v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          unsigned int v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          unint64_t v57 = &v29[8 * (v56 >> 1)];
          unsigned __int8 v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          unsigned int v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          unsigned int v25 = v27;
        }
      }
      else
      {
        unsigned __int8 v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      int v51 = v53 - 8;
      uint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)uint64_t v27 = v26;
  unsigned int v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  int v51 = v27;
LABEL_46:
  int v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_FA9884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_FA98A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_FA98B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_FA98CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FA98E4@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v8 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v8;
  *(void *)(a4 + 32) = a1[4];
  uint64_t v9 = (unsigned int *)sub_F061D8(a2, (unsigned int *)a1 + 2);
  *(_DWORD *)(a4 + 28) = 0;
  *(void *)(a4 + 12) = 0x8000000080000000;
  *(_DWORD *)(a4 + 20) = 0x7FFFFFFF;
  __int16 v10 = *((_WORD *)a1 + 13);
  if (v10
    && (unint64_t v11 = *a1, (v12 = sub_F96DE8(a3, *a1, 1)) != 0)
    && (uint64_t v13 = &v12[-*(int *)v12], *(unsigned __int16 *)v13 >= 5u)
    && *((_WORD *)v13 + 2)
    && (uint64_t v14 = &v12[*((unsigned __int16 *)v13 + 2) + *(unsigned int *)&v12[*((unsigned __int16 *)v13 + 2)]],
        *(_DWORD *)v14 > HIDWORD(v11)))
  {
    int v15 = &v14[4 * HIDWORD(v11) + 4 + *(unsigned int *)&v14[4 * HIDWORD(v11) + 4]];
    int64_t v16 = &v15[-*(int *)v15];
    if (*(unsigned __int16 *)v16 >= 7u && (uint64_t v17 = *((unsigned __int16 *)v16 + 3)) != 0) {
      int v18 = v15[v17];
    }
    else {
      int v18 = 0;
    }
    if ((v18 & (1 << v10)) != 0) {
      __int16 v19 = *((_WORD *)a1 + 13);
    }
    else {
      __int16 v19 = 0;
    }
  }
  else
  {
    __int16 v19 = 0;
  }
  *(_WORD *)(a4 + 26) = v19;
  *(unsigned char *)(a4 + 24) = 0;
  *(_DWORD *)(a4 + 28) = 0;
  unint64_t v20 = *a1;
  uint64_t v21 = sub_F96DE8(a3, v20, 1);
  if (v21
    && (uint64_t v22 = &v21[-*(int *)v21], *(unsigned __int16 *)v22 >= 5u)
    && *((_WORD *)v22 + 2)
    && (uint64_t v23 = &v21[*((unsigned __int16 *)v22 + 2) + *(unsigned int *)&v21[*((unsigned __int16 *)v22 + 2)]],
        *(_DWORD *)v23 > HIDWORD(v20))
    && (unint64_t v24 = &v23[4 * HIDWORD(v20) + 4 + *(unsigned int *)&v23[4 * HIDWORD(v20) + 4]],
        unsigned int v25 = &v24[-*(int *)v24],
        *(unsigned __int16 *)v25 >= 5u)
    && (uint64_t v26 = *((unsigned __int16 *)v25 + 2)) != 0)
  {
    int v27 = *(_DWORD *)&v24[v26];
  }
  else
  {
    int v27 = 0;
  }
  int v29 = v27;
  uint64_t result = sub_F0657C((uint64_t)a2, *v9, &v29);
  *(_DWORD *)(a4 + 8) = result;
  return result;
}

uint64_t sub_FA9AB8(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (v4 + (v3 << 6) + (v3 >> 2) + 2654435769u) ^ v3;
  uint64_t v6 = a2[2];
  unint64_t v7 = (v6 + (v5 << 6) + (v5 >> 2) + 2654435769u) ^ v5;
  uint64_t v8 = *((unsigned __int8 *)a2 + 12);
  uint64_t v9 = (v8 + (v7 << 6) + (v7 >> 2) + 2654435769u) ^ v7;
  uint64_t v10 = -1;
  while (1)
  {
    uint64_t v11 = v9 & (*(void *)(a1 + 64) - 1);
    uint64_t v12 = *(void *)(a1 + 96) + 20 * v11;
    int v13 = *(_DWORD *)v12;
    if (*(_DWORD *)(a1 + 72) == *(_DWORD *)v12
      && *(_DWORD *)(a1 + 76) == *(_DWORD *)(v12 + 4)
      && *(_DWORD *)(a1 + 80) == *(_DWORD *)(v12 + 8)
      && *(unsigned __int8 *)(a1 + 84) == *(unsigned __int8 *)(v12 + 12))
    {
      break;
    }
    if (*(void *)(a1 + 48)
      && *(_DWORD *)(a1 + 32) == v13
      && *(_DWORD *)(a1 + 36) == *(_DWORD *)(v12 + 4)
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(v12 + 8)
      && *(unsigned __int8 *)(a1 + 44) == *(unsigned __int8 *)(v12 + 12))
    {
      if (v10 == -1) {
        uint64_t v10 = v11;
      }
    }
    else if (v3 == v13 {
           && v4 == *(_DWORD *)(v12 + 4)
    }
           && __PAIR64__(v8, v6) == __PAIR64__(*(unsigned __int8 *)(v12 + 12), *(_DWORD *)(v12 + 8)))
    {
      return v11;
    }
    uint64_t v9 = ++v2 + v11;
  }
  return -1;
}

void sub_FA9BFC(uint64_t a1, unint64_t a2, unint64_t a3, int a4, unsigned __int16 a5, char **a6)
{
  a6[1] = *a6;
  unsigned int v12 = a2;
  int v13 = sub_F96DE8(a1, a2, 1);
  if (!v13) {
    return;
  }
  uint64_t v14 = &v13[-*(int *)v13];
  if (*(unsigned __int16 *)v14 < 5u) {
    return;
  }
  uint64_t v15 = *((unsigned __int16 *)v14 + 2);
  if (!v15) {
    return;
  }
  unint64_t v16 = HIDWORD(a2);
  uint64_t v17 = &v13[v15 + *(unsigned int *)&v13[v15]];
  if (*(_DWORD *)v17 <= HIDWORD(a2)) {
    return;
  }
  int v18 = &v17[4 * v16 + 4 + *(unsigned int *)&v17[4 * v16 + 4]];
  __int16 v19 = &v18[-*(int *)v18];
  unsigned int v20 = *(unsigned __int16 *)v19;
  if (v20 < 9) {
    return;
  }
  uint64_t v21 = (_DWORD *)*((unsigned __int16 *)v19 + 4);
  if (*((_WORD *)v19 + 4)) {
    uint64_t v21 = (_DWORD *)((char *)v21 + (void)v18 + *(unsigned int *)((char *)v21 + (void)v18));
  }
  if (v20 < 0xB) {
    return;
  }
  uint64_t v22 = *((unsigned __int16 *)v19 + 5);
  if (!v22 || !v21) {
    return;
  }
  unsigned int v25 = *v21;
  uint64_t v23 = v21 + 1;
  unint64_t v24 = v25;
  uint64_t v26 = &v23[v25];
  int v27 = v23;
  while (v24)
  {
    unsigned int v28 = (void *)((char *)v27 + ((4 * v24) & 0x7FFFFFFF8));
    unint64_t v30 = *v28;
    int v29 = v28 + 1;
    unint64_t v31 = v24 >> 1;
    v24 += ~(v24 >> 1);
    if (v30 >= a3) {
      unint64_t v24 = v31;
    }
    else {
      int v27 = v29;
    }
  }
  if (v27 == v26) {
    return;
  }
  if (*v27 != a3) {
    return;
  }
  int v85 = (unsigned __int16)((v27 - v23) >> 3);
  if (v85 == 0xFFFF) {
    return;
  }
  unint64_t v32 = &v18[v22];
  uint64_t v81 = *(unsigned int *)&v18[v22];
  int v83 = v27 - v23;
  uint64_t v33 = sub_383034(a1, v12, 1);
  if (v33
    && (unsigned int v34 = &v33[-*(int *)v33], *(unsigned __int16 *)v34 >= 0xFu)
    && (uint64_t v35 = *((unsigned __int16 *)v34 + 7)) != 0
    && (uint64_t v36 = &v33[v35 + *(unsigned int *)&v33[v35]], *(_DWORD *)v36 > HIDWORD(a2)))
  {
    BOOL v37 = &v36[4 * v16 + 4 + *(unsigned int *)&v36[4 * v16 + 4]];
  }
  else
  {
    BOOL v37 = 0;
  }
  int64_t v38 = &v32[v81];
  unint64_t v39 = (unsigned __int16 *)&v37[-*(int *)v37];
  unsigned int v40 = *v39;
  uint64_t v41 = v39[2];
  if (v39[2]) {
    v41 += (uint64_t)&v37[*(unsigned int *)&v37[v41]];
  }
  if (v40 < 7)
  {
    uint64_t v42 = 0;
  }
  else
  {
    uint64_t v42 = v39[3];
    if (v39[3]) {
      v42 += (uint64_t)&v37[*(unsigned int *)&v37[v42]];
    }
    if (v40 >= 9)
    {
      uint64_t v43 = v39[4];
      unsigned int v44 = v83;
      if (v43)
      {
        int64_t v45 = &v37[v43 + *(unsigned int *)&v37[v43]];
        unsigned int v48 = *(_DWORD *)v38;
        int v47 = (uint64_t *)(v38 + 4);
        uint64_t v46 = v48;
        if (!v48) {
          return;
        }
      }
      else
      {
        int64_t v45 = 0;
        unsigned int v76 = *(_DWORD *)v38;
        int v47 = (uint64_t *)(v38 + 4);
        uint64_t v46 = v76;
        if (!v76) {
          return;
        }
      }
      goto LABEL_36;
    }
  }
  int64_t v45 = 0;
  unsigned int v44 = v83;
  unsigned int v49 = *(_DWORD *)v38;
  int v47 = (uint64_t *)(v38 + 4);
  uint64_t v46 = v49;
  if (!v49) {
    return;
  }
LABEL_36:
  int v50 = 0;
  int v51 = &v47[v46];
  int v52 = *(_DWORD *)(v41 + 4 * (a4 + *(_DWORD *)(a1 + 3872) * a5) + 4);
  unsigned int v53 = (v52 & 0x7FFFFFFF) + v46 * (unsigned __int16)(v44 >> 3);
  char v77 = v45 + 4;
  uint64_t v79 = v51;
  uint64_t v80 = v42 + 4;
  int v78 = v52;
  do
  {
    while (1)
    {
      unsigned int v54 = v53;
      if (v52 < 0)
      {
        size_t v58 = &v77[4 * v53];
        uint64_t v59 = *(unsigned __int16 *)v58;
        unint64_t v60 = v59 | ((unint64_t)*((unsigned __int16 *)v58 + 1) << 32);
        uint64_t v57 = v59 == 0xFFFF ? 0x7FFFFFFFFFFFFFFFLL : v60;
      }
      else
      {
        uint64_t v55 = v80 + 8 * v53;
        uint64_t v56 = *(unsigned int *)v55;
        LODWORD(v55) = *(_DWORD *)(v55 + 4);
        uint64_t v55 = v56 == 0xFFFFFFFFLL ? 0x7FFFFFFFLL : v55;
        uint64_t v57 = v56 | (v55 << 32);
      }
      uint64_t v61 = *v47;
      unint64_t v63 = a6[1];
      unint64_t v62 = (unint64_t)a6[2];
      if ((unint64_t)v63 >= v62) {
        break;
      }
      *(void *)unint64_t v63 = a3;
      *((void *)v63 + 1) = v61;
      *((void *)v63 + 2) = a2;
      *((_WORD *)v63 + 12) = v85;
      *((_WORD *)v63 + 13) = v50;
      *(void *)(v63 + 28) = v57;
      a6[1] = v63 + 40;
      ++v50;
      unsigned int v53 = v54 + 1;
      if (++v47 == v51) {
        return;
      }
    }
    int v64 = *a6;
    unint64_t v65 = 0xCCCCCCCCCCCCCCCDLL * ((v63 - *a6) >> 3);
    unint64_t v66 = v65 + 1;
    if (v65 + 1 > 0x666666666666666) {
      sub_2E00();
    }
    unsigned int v84 = v54;
    unint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v62 - (void)v64) >> 3);
    if (2 * v67 > v66) {
      unint64_t v66 = 2 * v67;
    }
    if (v67 >= 0x333333333333333) {
      unint64_t v68 = 0x666666666666666;
    }
    else {
      unint64_t v68 = v66;
    }
    if (v68 > 0x666666666666666) {
      sub_188D718();
    }
    uint64_t v82 = 40 * v68;
    int v69 = (char *)operator new(40 * v68);
    unsigned int v70 = &v69[40 * v65];
    *(void *)unsigned int v70 = a3;
    *((void *)v70 + 1) = v61;
    *((void *)v70 + 2) = a2;
    *((_WORD *)v70 + 12) = v85;
    *((_WORD *)v70 + 13) = v50;
    *(void *)(v70 + 28) = v57;
    if (v63 == v64)
    {
      unint64_t v74 = &v69[40 * v65];
    }
    else
    {
      uint64_t v71 = &v69[40 * v65];
      do
      {
        long long v72 = *(_OWORD *)(v63 - 40);
        long long v73 = *(_OWORD *)(v63 - 24);
        unint64_t v74 = v71 - 40;
        *((_DWORD *)v71 - 2) = *((_DWORD *)v63 - 2);
        *(_OWORD *)(v71 - 24) = v73;
        *(_OWORD *)(v71 - 40) = v72;
        v63 -= 40;
        v71 -= 40;
      }
      while (v63 != v64);
    }
    uint64_t v75 = v70 + 40;
    *a6 = v74;
    a6[1] = v70 + 40;
    a6[2] = &v69[v82];
    if (v64) {
      operator delete(v64);
    }
    int v51 = v79;
    int v52 = v78;
    a6[1] = v75;
    ++v50;
    unsigned int v53 = v84 + 1;
    ++v47;
  }
  while (v47 != v79);
}

void sub_FAA064(uint64_t a1, unint64_t a2, unint64_t a3, int a4, unsigned __int16 a5, char **a6)
{
  a6[1] = *a6;
  unsigned int v12 = a2;
  int v13 = sub_F96DE8(a1, a2, 1);
  if (v13)
  {
    uint64_t v14 = &v13[-*(int *)v13];
    if (*(unsigned __int16 *)v14 >= 5u)
    {
      uint64_t v15 = *((unsigned __int16 *)v14 + 2);
      if (v15)
      {
        unint64_t v16 = HIDWORD(a2);
        uint64_t v17 = &v13[v15 + *(unsigned int *)&v13[v15]];
        if (*(_DWORD *)v17 > HIDWORD(a2))
        {
          int v18 = &v17[4 * v16 + 4 + *(unsigned int *)&v17[4 * v16 + 4]];
          __int16 v19 = &v18[-*(int *)v18];
          unsigned int v20 = *(unsigned __int16 *)v19;
          if (v20 >= 9)
          {
            if (*((_WORD *)v19 + 4))
            {
              uint64_t v21 = &v18[*((unsigned __int16 *)v19 + 4) + *(unsigned int *)&v18[*((unsigned __int16 *)v19 + 4)]];
              if (v20 < 0xB) {
                return;
              }
            }
            else
            {
              uint64_t v21 = 0;
              if (v20 < 0xB) {
                return;
              }
            }
            uint64_t v22 = *((unsigned __int16 *)v19 + 5);
            if (v22 && v21)
            {
              uint64_t v23 = &v18[v22 + *(unsigned int *)&v18[v22]];
              int v24 = v23 + 4;
              unint64_t v25 = *(unsigned int *)v23;
              uint64_t v26 = (unsigned int *)(v23 + 4);
              while (v25)
              {
                int v27 = (void *)((char *)v26 + ((4 * v25) & 0x7FFFFFFF8));
                unint64_t v29 = *v27;
                unsigned int v28 = (unsigned int *)(v27 + 1);
                unint64_t v30 = v25 >> 1;
                v25 += ~(v25 >> 1);
                if (v29 >= a3) {
                  unint64_t v25 = v30;
                }
                else {
                  uint64_t v26 = v28;
                }
              }
              if (v26 != (unsigned int *)&v23[8 * *(unsigned int *)v23 + 4] && *(void *)v26 == a3)
              {
                int v84 = (unsigned __int16)((v26 - v24) >> 3);
                if (v84 != 0xFFFF)
                {
                  uint64_t v80 = v23;
                  int v82 = v26 - v24;
                  unint64_t v31 = sub_383034(a1, v12, 1);
                  if (v31
                    && (unint64_t v32 = &v31[-*(int *)v31], *(unsigned __int16 *)v32 >= 0xFu)
                    && (uint64_t v33 = *((unsigned __int16 *)v32 + 7)) != 0
                    && (unsigned int v34 = &v31[v33 + *(unsigned int *)&v31[v33]], *(_DWORD *)v34 > HIDWORD(a2)))
                  {
                    uint64_t v35 = &v34[4 * v16 + 4 + *(unsigned int *)&v34[4 * v16 + 4]];
                  }
                  else
                  {
                    uint64_t v35 = 0;
                  }
                  uint64_t v36 = (unsigned __int16 *)&v35[-*(int *)v35];
                  unsigned int v37 = *v36;
                  uint64_t v38 = v36[2];
                  if (v36[2]) {
                    v38 += (uint64_t)&v35[*(unsigned int *)&v35[v38]];
                  }
                  if (v37 < 7)
                  {
                    uint64_t v39 = 0;
                  }
                  else
                  {
                    uint64_t v39 = v36[3];
                    if (v36[3]) {
                      v39 += (uint64_t)&v35[*(unsigned int *)&v35[v39]];
                    }
                    if (v37 >= 9)
                    {
                      uint64_t v40 = v36[4];
                      unsigned int v41 = v82;
                      if (v40)
                      {
                        uint64_t v42 = &v35[v40 + *(unsigned int *)&v35[v40]];
                        unsigned int v45 = *(_DWORD *)v21;
                        unsigned int v44 = (uint64_t *)(v21 + 4);
                        uint64_t v43 = v45;
                        if (!v45) {
                          return;
                        }
                      }
                      else
                      {
                        uint64_t v42 = 0;
                        unsigned int v74 = *(_DWORD *)v21;
                        unsigned int v44 = (uint64_t *)(v21 + 4);
                        uint64_t v43 = v74;
                        if (!v74) {
                          return;
                        }
                      }
                      goto LABEL_37;
                    }
                  }
                  uint64_t v42 = 0;
                  unsigned int v41 = v82;
                  unsigned int v46 = *(_DWORD *)v21;
                  unsigned int v44 = (uint64_t *)(v21 + 4);
                  uint64_t v43 = v46;
                  if (!v46) {
                    return;
                  }
LABEL_37:
                  int v47 = 0;
                  int v48 = *(_DWORD *)v80;
                  unsigned int v49 = &v44[v43];
                  int v50 = *(_DWORD *)(v38 + 4 * (a4 + *(_DWORD *)(a1 + 3872) * a5) + 4);
                  unsigned int v51 = (v50 & 0x7FFFFFFF) + (unsigned __int16)(v41 >> 3);
                  uint64_t v75 = v42 + 4;
                  uint64_t v79 = v39 + 4;
                  int v78 = *(_DWORD *)v80;
                  char v77 = v49;
                  int v76 = v50;
                  do
                  {
                    while (1)
                    {
                      unsigned int v52 = v51;
                      if (v50 < 0)
                      {
                        uint64_t v56 = &v75[4 * v51];
                        uint64_t v57 = *(unsigned __int16 *)v56;
                        unint64_t v58 = v57 | ((unint64_t)*((unsigned __int16 *)v56 + 1) << 32);
                        uint64_t v55 = v57 == 0xFFFF ? 0x7FFFFFFFFFFFFFFFLL : v58;
                      }
                      else
                      {
                        uint64_t v53 = v79 + 8 * v51;
                        uint64_t v54 = *(unsigned int *)v53;
                        LODWORD(v53) = *(_DWORD *)(v53 + 4);
                        uint64_t v53 = v54 == 0xFFFFFFFFLL ? 0x7FFFFFFFLL : v53;
                        uint64_t v55 = v54 | (v53 << 32);
                      }
                      uint64_t v59 = *v44;
                      uint64_t v61 = a6[1];
                      unint64_t v60 = (unint64_t)a6[2];
                      if ((unint64_t)v61 >= v60) {
                        break;
                      }
                      *(void *)uint64_t v61 = v59;
                      *((void *)v61 + 1) = a3;
                      *((void *)v61 + 2) = a2;
                      *((_WORD *)v61 + 12) = v47;
                      *((_WORD *)v61 + 13) = v84;
                      *(void *)(v61 + 28) = v55;
                      a6[1] = v61 + 40;
                      ++v47;
                      unsigned int v51 = v52 + v48;
                      if (++v44 == v49) {
                        return;
                      }
                    }
                    unint64_t v62 = *a6;
                    unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * ((v61 - *a6) >> 3);
                    unint64_t v64 = v63 + 1;
                    if (v63 + 1 > 0x666666666666666) {
                      sub_2E00();
                    }
                    unsigned int v83 = v52;
                    unint64_t v65 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v60 - (void)v62) >> 3);
                    if (2 * v65 > v64) {
                      unint64_t v64 = 2 * v65;
                    }
                    if (v65 >= 0x333333333333333) {
                      unint64_t v66 = 0x666666666666666;
                    }
                    else {
                      unint64_t v66 = v64;
                    }
                    if (v66 > 0x666666666666666) {
                      sub_188D718();
                    }
                    uint64_t v81 = 40 * v66;
                    unint64_t v67 = (char *)operator new(40 * v66);
                    unint64_t v68 = &v67[40 * v63];
                    *(void *)unint64_t v68 = v59;
                    *((void *)v68 + 1) = a3;
                    *((void *)v68 + 2) = a2;
                    *((_WORD *)v68 + 12) = v47;
                    *((_WORD *)v68 + 13) = v84;
                    *(void *)(v68 + 28) = v55;
                    if (v61 == v62)
                    {
                      long long v72 = &v67[40 * v63];
                    }
                    else
                    {
                      int v69 = &v67[40 * v63];
                      do
                      {
                        long long v70 = *(_OWORD *)(v61 - 40);
                        long long v71 = *(_OWORD *)(v61 - 24);
                        long long v72 = v69 - 40;
                        *((_DWORD *)v69 - 2) = *((_DWORD *)v61 - 2);
                        *(_OWORD *)(v69 - 24) = v71;
                        *(_OWORD *)(v69 - 40) = v70;
                        v61 -= 40;
                        v69 -= 40;
                      }
                      while (v61 != v62);
                    }
                    long long v73 = v68 + 40;
                    *a6 = v72;
                    a6[1] = v68 + 40;
                    a6[2] = &v67[v81];
                    if (v62) {
                      operator delete(v62);
                    }
                    int v48 = v78;
                    unsigned int v49 = v77;
                    int v50 = v76;
                    a6[1] = v73;
                    ++v47;
                    unsigned int v51 = v83 + v78;
                    ++v44;
                  }
                  while (v44 != v77);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_FAA4F0(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  uint64_t v7 = sub_FAA71C(a1 + 11, a2);
  if (a1[15] == v7)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F74F8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F74F8))
    {
      off_24F74E8 = (int *)&unk_20F15A0;
      *(void *)&byte_24F74F0 = 0;
      __cxa_guard_release(&qword_24F74F8);
    }
    uint64_t v13 = a1[22];
    unint64_t v14 = a2[2];
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((a1[23] - v13) >> 3);
    if (v15 <= v14)
    {
      unint64_t v16 = (v14 + 1);
      if (v16 <= v15)
      {
        if (v16 < v15) {
          a1[23] = v13 + 24 * v16;
        }
      }
      else
      {
        sub_3844F4((char **)a1 + 22, v16 - v15);
        LODWORD(v14) = a2[2];
        uint64_t v13 = a1[22];
      }
    }
    ++*(void *)(v13 + 24 * v14 + 16);
    uint64_t v24 = *((void *)off_24F74E8 + 1);
    *(void *)a3 = *(void *)off_24F74E8;
    *(void *)(a3 + 8) = v24;
    if (v24) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    }
    char v23 = byte_24F74F0;
  }
  else
  {
    uint64_t v8 = v7;
    uint64_t v9 = a1[22];
    unint64_t v10 = a2[2];
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((a1[23] - v9) >> 3);
    if (v11 <= v10)
    {
      unint64_t v12 = (v10 + 1);
      if (v12 <= v11)
      {
        if (v12 < v11) {
          a1[23] = v9 + 24 * v12;
        }
      }
      else
      {
        sub_3844F4((char **)a1 + 22, v12 - v11);
        LODWORD(v10) = a2[2];
        uint64_t v9 = a1[22];
      }
    }
    ++*(void *)(v9 + 24 * v10 + 8);
    uint64_t v17 = *(uint64_t **)(v8 + 40);
    if (v17 != a1)
    {
      int v18 = (uint64_t *)v17[1];
      if (v18 != a1)
      {
        uint64_t v19 = *v17;
        *(void *)(v19 + 8) = v18;
        *(void *)v17[1] = v19;
        unsigned int v20 = (char *)*a1;
        *((void *)v20 + 1) = v17;
        uint64_t *v17 = (uint64_t)v20;
        *a1 = (uint64_t)v17;
        v17[1] = (uint64_t)a1;
      }
    }
    uint64_t v22 = v17[7];
    uint64_t v21 = v17[8];
    *(void *)a3 = v22;
    *(void *)(a3 + 8) = v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    char v23 = 1;
  }
  *(unsigned char *)(a3 + 16) = v23;

  std::mutex::unlock(v6);
}

void sub_FAA708(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FAA71C(uint64_t *a1, unsigned int *a2)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  if (v2 != v3)
  {
    unint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    unint64_t v6 = (v5 + (v4 << 6) + (v4 >> 2) + 2654435769u) ^ v4;
    uint64_t v7 = a2[2];
    uint64_t v8 = (int)a2[3];
    unint64_t v9 = (v7 + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
    unint64_t v10 = (v8 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
    uint64_t v11 = (int)a2[4];
    uint64_t v12 = (int)a2[5];
    unint64_t v13 = (v11 + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10;
    unint64_t v14 = (v12 + (v13 << 6) + (v13 >> 2) + 2654435769u) ^ v13;
    uint64_t v15 = *((unsigned __int8 *)a2 + 24);
    unint64_t v16 = (v15 + (v14 << 6) + (v14 >> 2) + 2654435769u) ^ v14;
    uint64_t v17 = *((unsigned __int16 *)a2 + 13);
    unint64_t v18 = (v17 + (v16 << 6) + (v16 >> 2) + 2654435769u) ^ v16;
    uint64_t v19 = a2[7];
    uint64_t v20 = *a1;
    unint64_t v21 = a1[1] - *a1;
    unint64_t v22 = ((v19 + (v18 << 6) + (v18 >> 2) + 2654435769u) ^ v18) % v21;
    uint64_t v23 = v21 - 1;
    while (1)
    {
      if (*(unsigned char *)(v20 + v22) == 2)
      {
        uint64_t result = v2 + 48 * v22;
        if (*(_DWORD *)result == v4
          && *(_DWORD *)(result + 4) == v5
          && *(_DWORD *)(result + 8) == v7
          && *(_DWORD *)(result + 12) == v8
          && *(_DWORD *)(result + 16) == v11
          && *(_DWORD *)(result + 20) == v12
          && *(unsigned __int8 *)(result + 24) == v15
          && v17 == *(unsigned __int16 *)(result + 26)
          && *(_DWORD *)(result + 28) == v19)
        {
          return result;
        }
      }
      else if (!*(unsigned char *)(v20 + v22))
      {
        return v3;
      }
      if (v22 == v23) {
        unint64_t v22 = 0;
      }
      else {
        ++v22;
      }
    }
  }
  return a1[3];
}

uint64_t sub_FAA884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 48) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = (char **)(a1 + 24);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 1018212795;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a3;
  *(void *)(a1 + 232) = a3;
  *(void *)(a1 + 240) = 0;
  sub_2980();
  uint64_t v6 = *(void *)(v5 + 24);
  if (v6)
  {
    sub_2980();
    uint64_t v6 = *(void *)(*(void *)(v7 + 24) + 248) + 1;
  }
  *(void *)(a1 + 248) = v6;
  uint64_t v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  *uint64_t v8 = off_24389C0;
  *(void *)&long long v19 = v8 + 3;
  *((void *)&v19 + 1) = v8;
  unint64_t v9 = *(void **)(a1 + 32);
  if ((unint64_t)v9 >= *(void *)(a1 + 40))
  {
    unint64_t v10 = sub_31A110(v4, (uint64_t)&v19);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v19 + 1);
    *(void *)(a1 + 32) = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    *unint64_t v9 = v8 + 3;
    v9[1] = v8;
    *(void *)(a1 + 32) = v9 + 2;
  }
  *(int64x2_t *)(a1 + 224) = vdupq_n_s64(1uLL);
  sub_2980();
  long long v19 = *v12;
  long long v20 = v12[1];
  sub_2980();
  void *v13 = 0;
  sub_2980();
  *(void *)(v14 + 8) = 1;
  sub_2980();
  *(void *)(v15 + 16) = 0;
  sub_2980();
  *(void *)(v16 + 24) = a1;
  sub_FAAAA8();
  sub_2980();
  _OWORD *v17 = v19;
  v17[1] = v20;
  return a1;
}

void sub_FAAA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_14A84((uint64_t)&a9);
  std::condition_variable::~condition_variable(v13);
  std::mutex::~mutex(v12);
  std::mutex::~mutex(v10);
  sub_34A128(v11);
  sub_34A1DC(v9);
  _Unwind_Resume(a1);
}

void *sub_FAAAA8()
{
  uint64_t v0 = __chkstk_darwin();
  sub_FAF204();
  sub_FB08AC((uint64_t)v9, 1);
  uint64_t v1 = *(uint64_t ***)(v0 + 8);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  if (*v1 != v3)
  {
    do
    {
      uint64_t v6 = v9;
      long long v7 = *(_OWORD *)(v0 + 16);
      uint64_t v8 = *(void *)(v0 + 32);
      sub_FAABB8(*v2, v2[1], (uint64_t)&v6);
      sub_2980();
      sub_FAAF70(*(void *)(v4 + 24) + 112);
      v2 += 3;
    }
    while (v2 != v3);
  }
  return sub_FAB028(v9);
}

void sub_FAAB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_FAB028((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_FAAB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_FAB028((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_FAABA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_FAB028((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_FAABB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2980();
  uint64_t v7 = v6;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = v6;
  uint64_t v17 = &v14;
  sub_2980();
  unint64_t v9 = (std::mutex *)(*(void *)(v8 + 24) + 48);
  std::mutex::lock(v9);
  sub_FAAD70(&v16);
  std::mutex::unlock(v9);
  unint64_t v10 = (a2 - a1) >> 3;
  for (unint64_t i = atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
        i < v10;
        unint64_t i = atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed))
  {
    uint64_t v18 = *(void *)(a1 + 8 * i);
    sub_FAF340(*(void *)a3, (unsigned int *)&v18, *(int **)(a3 + 8), *(int **)(a3 + 16), **(unsigned char **)(a3 + 24), (uint64_t)&v16);
    uint64_t v12 = (std::__shared_weak_count *)v17;
    if (v17 && !atomic_fetch_add((atomic_ullong *volatile)v17 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  ++*(void *)(v7 + 16);
  unint64_t v13 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_FAAD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::mutex::unlock(v10);
  sub_14A84((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_FAAD48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FAAD5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FAAD70(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 16);
  uint64_t v3 = *(void *)(*a1 + 24);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  unint64_t v6 = (v5 - v4) >> 4;
  if (v2 >= v6)
  {
    unint64_t v7 = v2 + 1;
    uint64_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_24389C0;
    uint64_t v17 = &v8[1].__vftable;
    uint64_t v18 = v8;
    unint64_t v9 = v7 - v6;
    if (v7 <= v6)
    {
      unint64_t v10 = v8;
      if (v7 < v6)
      {
        for (uint64_t i = v4 + 16 * v7; v5 != i; v5 -= 16)
        {
          uint64_t v12 = *(std::__shared_weak_count **)(v5 - 8);
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v9);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        *(void *)(v3 + 32) = i;
        unint64_t v10 = v18;
        if (!v18) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      sub_31A2E8((char **)(v3 + 24), v9, &v17);
      unint64_t v10 = v18;
      if (!v18)
      {
LABEL_15:
        unint64_t v2 = *(void *)(*a1 + 16);
        uint64_t v4 = *(void *)(*(void *)(*a1 + 24) + 24);
        goto LABEL_16;
      }
    }
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v13 = a1[1];
  long long v14 = *(_OWORD *)(v4 + 16 * v2);
  uint64_t v15 = *(void *)(v4 + 16 * v2 + 8);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  *(_OWORD *)uint64_t v13 = v14;
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_FAAF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_FAAF70(uint64_t a1)
{
  if (*(void *)(a1 + 112) != 1)
  {
    v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)a1;
    v4.__owns_ = 1;
    std::mutex::lock((std::mutex *)a1);
    uint64_t v2 = *(void *)(a1 + 128);
    uint64_t v3 = *(void *)(a1 + 120) - 1;
    *(void *)(a1 + 120) = v3;
    if (v3)
    {
      do
        std::condition_variable::wait((std::condition_variable *)(a1 + 64), &v4);
      while (v2 == *(void *)(a1 + 128));
      if (v4.__owns_) {
        std::mutex::unlock(v4.__m_);
      }
    }
    else
    {
      *(void *)(a1 + 120) = *(void *)(a1 + 112);
      *(void *)(a1 + 128) = v2 + 1;
      std::mutex::unlock((std::mutex *)a1);
      std::condition_variable::notify_all((std::condition_variable *)(a1 + 64));
    }
  }
}

void *sub_FAB028(void *a1)
{
  uint64_t v2 = (void **)(a1 + 4989);
  uint64_t v3 = (void *)a1[5006];
  if (v3)
  {
    uint64_t v4 = a1[5007];
    uint64_t v5 = v3;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_FAB36C(v4 - 960);
      while ((void *)v4 != v3);
      uint64_t v5 = v2[17];
    }
    v2[18] = v3;
    operator delete(v5);
  }
  unint64_t v6 = v2[12];
  if (v6)
  {
    v2[13] = v6;
    operator delete(v6);
  }
  unint64_t v7 = *v2;
  if (*v2)
  {
    v2[1] = v7;
    operator delete(v7);
  }
  sub_3A6318(a1 + 4473);
  uint64_t v8 = (std::__shared_weak_count *)a1[3989];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    sub_328138((uint64_t)(a1 + 3891));
    unint64_t v9 = (std::__shared_weak_count *)a1[3407];
    if (!v9) {
      goto LABEL_16;
    }
  }
  else
  {
    sub_328138((uint64_t)(a1 + 3891));
    unint64_t v9 = (std::__shared_weak_count *)a1[3407];
    if (!v9) {
      goto LABEL_16;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_16:
  unint64_t v10 = (std::__shared_weak_count *)a1[3405];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    uint64_t v11 = (std::__shared_weak_count *)a1[2920];
    if (!v11) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v11 = (std::__shared_weak_count *)a1[2920];
    if (!v11) {
      goto LABEL_22;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_22:
  uint64_t v12 = (std::__shared_weak_count *)a1[2434];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = (std::__shared_weak_count *)a1[1949];
    if (!v13) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v13 = (std::__shared_weak_count *)a1[1949];
    if (!v13) {
      goto LABEL_28;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_28:
  long long v14 = (std::__shared_weak_count *)a1[1465];
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    sub_32834C(a1 + 486);
    uint64_t v15 = (std::__shared_weak_count *)a1[1];
    if (!v15) {
      return a1;
    }
  }
  else
  {
    sub_32834C(a1 + 486);
    uint64_t v15 = (std::__shared_weak_count *)a1[1];
    if (!v15) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

uint64_t sub_FAB36C(uint64_t a1)
{
  sub_328138(a1 + 176);
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 128);
  if (v3)
  {
    *(void *)(a1 + 136) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 104);
  if (v4)
  {
    *(void *)(a1 + 112) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 80);
  if (v5)
  {
    *(void *)(a1 + 88) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)(a1 + 56);
  if (v6)
  {
    *(void *)(a1 + 64) = v6;
    operator delete(v6);
  }
  unint64_t v7 = *(void **)(a1 + 32);
  if (v7)
  {
    *(void *)(a1 + 40) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

char *sub_FAB404(unint64_t *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  unint64_t v5 = *a1;
  uint64_t v6 = a2 - *a1;
  unint64_t v7 = (char *)(*a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  if (a5 < 1) {
    return v7;
  }
  unint64_t v9 = a3;
  uint64_t v11 = v6 >> 3;
  uint64_t v13 = (uint64_t *)a1[1];
  unint64_t v12 = a1[2];
  if (a5 <= (uint64_t)(v12 - (void)v13) >> 3)
  {
    unint64_t v18 = a5 + 1;
    long long v19 = a3;
    do
    {
      long long v19 = (void *)*v19;
      --v18;
    }
    while (v18 > 1);
    uint64_t v20 = ((char *)v13 - v7) >> 3;
    if (v20 >= a5)
    {
      unint64_t v22 = a1[1];
      goto LABEL_41;
    }
    if ((char *)v13 - v7 < 1)
    {
      long long v19 = a3;
      unint64_t v22 = a1[1];
      if (a3 == a4) {
        goto LABEL_40;
      }
    }
    else
    {
      unint64_t v21 = v20 + 1;
      long long v19 = a3;
      do
      {
        long long v19 = (void *)*v19;
        --v21;
      }
      while (v21 > 1);
      unint64_t v22 = a1[1];
      if (v19 == a4)
      {
LABEL_40:
        a1[1] = v22;
        if (v20 >= 1)
        {
LABEL_41:
          int v47 = &v7[8 * a5];
          size_t v48 = v22 - (void)v47;
          uint64_t v49 = (uint64_t)(v22 - (void)v47) >> 3;
          int v50 = (uint64_t *)(v22 - 8 * a5);
          unsigned int v51 = (void *)v22;
          if (v50 < v13)
          {
            unint64_t v52 = (v6 & 0xFFFFFFFFFFFFFFF8) + v48;
            uint64_t v53 = (char *)(v52 + v5);
            unint64_t v54 = v52 + v5 + 8;
            if ((unint64_t)v13 > v54) {
              unint64_t v54 = (unint64_t)v13;
            }
            unint64_t v55 = v54 + ~v5 - v52;
            if (v55 < 0x58)
            {
              unsigned int v51 = (void *)v22;
            }
            else
            {
              unint64_t v56 = v22 - (void)v53;
              unsigned int v51 = (void *)v22;
              if (v56 >= 0x20)
              {
                uint64_t v57 = (v55 >> 3) + 1;
                uint64_t v58 = 8 * (v57 & 0x3FFFFFFFFFFFFFFCLL);
                int v50 = (uint64_t *)((char *)v50 + v58);
                unsigned int v51 = (void *)(v22 + v58);
                uint64_t v59 = (_OWORD *)(v22 + 16);
                unint64_t v60 = (long long *)(8 * v49 + 8 * v11 + v5 + 16);
                uint64_t v61 = v57 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v62 = *v60;
                  *(v59 - 1) = *(v60 - 1);
                  *uint64_t v59 = v62;
                  v59 += 2;
                  v60 += 2;
                  v61 -= 4;
                }
                while (v61);
                if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_52;
                }
              }
            }
            do
            {
              uint64_t v63 = *v50++;
              *v51++ = v63;
            }
            while (v50 < v13);
          }
LABEL_52:
          a1[1] = (unint64_t)v51;
          if ((char *)v22 != v47) {
            memmove((void *)(v22 - 8 * v49), v7, v48);
          }
          if (v19 != v9)
          {
            unint64_t v64 = v7;
            do
            {
              *(void *)unint64_t v64 = v9[2];
              v64 += 8;
              unint64_t v9 = (void *)*v9;
            }
            while (v9 != v19);
          }
        }
        return v7;
      }
    }
    unsigned int v45 = v19;
    unsigned int v46 = (void *)a1[1];
    do
    {
      *v46++ = v45[2];
      unsigned int v45 = (void *)*v45;
      v22 += 8;
    }
    while (v45 != a4);
    goto LABEL_40;
  }
  unint64_t v14 = a5 + ((uint64_t)((uint64_t)v13 - v5) >> 3);
  if (v14 >> 61) {
    sub_2E00();
  }
  uint64_t v15 = v12 - v5;
  if (v15 >> 2 > v14) {
    unint64_t v14 = v15 >> 2;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v14;
  }
  if (v16)
  {
    if (v16 >> 61) {
      sub_188D718();
    }
    uint64_t v17 = (char *)operator new(8 * v16);
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v23 = &v17[8 * v11];
  uint64_t v24 = 8 * a5;
  unint64_t v25 = &v23[8 * a5];
  uint64_t v26 = v23;
  do
  {
    *(void *)uint64_t v26 = v9[2];
    v26 += 8;
    unint64_t v9 = (void *)*v9;
    v24 -= 8;
  }
  while (v24);
  int v27 = (char *)*a1;
  if ((char *)*a1 != v7)
  {
    unint64_t v28 = v6 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v29 = (char *)((v6 & 0xFFFFFFFFFFFFFFF8) + v5);
    unint64_t v30 = v29 - v27 - 8;
    unint64_t v31 = v7;
    unint64_t v32 = &v17[8 * v11];
    if (v30 < 0x68) {
      goto LABEL_63;
    }
    unint64_t v31 = v7;
    unint64_t v32 = &v17[8 * v11];
    if ((unint64_t)(v29 - &v17[v28]) < 0x20) {
      goto LABEL_63;
    }
    uint64_t v33 = (v30 >> 3) + 1;
    uint64_t v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v31 = &v7[-v34];
    unint64_t v32 = &v23[-v34];
    uint64_t v35 = 8 * v11 - 16;
    uint64_t v36 = &v17[v35];
    unsigned int v37 = (long long *)(v5 + v35);
    uint64_t v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v39 = *v37;
      *((_OWORD *)v36 - 1) = *(v37 - 1);
      *(_OWORD *)uint64_t v36 = v39;
      v36 -= 32;
      v37 -= 2;
      v38 -= 4;
    }
    while (v38);
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_63:
      do
      {
        uint64_t v40 = *((void *)v31 - 1);
        v31 -= 8;
        *((void *)v32 - 1) = v40;
        v32 -= 8;
      }
      while (v31 != v27);
    }
    unsigned int v41 = (unsigned char *)a1[1];
    uint64_t v42 = &v17[8 * v16];
    size_t v43 = v41 - v7;
    if (v41 == v7) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  unint64_t v32 = &v17[8 * v11];
  uint64_t v42 = &v17[8 * v16];
  size_t v43 = (char *)v13 - v7;
  if (v13 != (uint64_t *)v7) {
LABEL_32:
  }
    memmove(v25, v7, v43);
LABEL_33:
  unsigned int v44 = (void *)*a1;
  *a1 = (unint64_t)v32;
  a1[1] = (unint64_t)&v25[v43];
  a1[2] = (unint64_t)v42;
  if (v44) {
    operator delete(v44);
  }
  return v23;
}

void sub_FAB798(void **a1, unint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  uint64_t v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = &v5[40 * a2];
      do
      {
        *(_OWORD *)unint64_t v5 = 0uLL;
        *((_OWORD *)v5 + 1) = 0uLL;
        *((_DWORD *)v5 + 8) = 1065353216;
        v5 += 40;
      }
      while (v5 != v11);
      unint64_t v5 = v11;
    }
    a1[1] = v5;
  }
  else
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x666666666666666) {
      sub_2E00();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x333333333333333) {
      unint64_t v9 = 0x666666666666666;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x666666666666666) {
        sub_188D718();
      }
      unint64_t v10 = (char *)operator new(40 * v9);
    }
    else
    {
      unint64_t v10 = 0;
    }
    unint64_t v12 = &v10[40 * v6];
    uint64_t v13 = &v10[40 * v9];
    unint64_t v14 = &v12[40 * a2];
    uint64_t v15 = v12;
    do
    {
      *(_OWORD *)uint64_t v15 = 0uLL;
      *((_OWORD *)v15 + 1) = 0uLL;
      *((_DWORD *)v15 + 8) = 1065353216;
      v15 += 40;
    }
    while (v15 != v14);
    unint64_t v16 = (char *)*a1;
    if (v5 == *a1)
    {
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
      if (!v5) {
        return;
      }
      goto LABEL_37;
    }
    uint64_t v17 = 0;
    do
    {
      long long v19 = &v12[v17];
      uint64_t v20 = &v5[v17];
      uint64_t v21 = *(void *)&v5[v17 - 40];
      *((void *)v20 - 5) = 0;
      *((void *)v19 - 5) = v21;
      unint64_t v22 = *(void *)&v5[v17 - 32];
      *((void *)v19 - 4) = v22;
      *((void *)v20 - 4) = 0;
      uint64_t v23 = *(void *)&v5[v17 - 24];
      *((void *)v19 - 3) = v23;
      uint64_t v24 = (uint64_t)&v12[v17 - 24];
      uint64_t v25 = *(void *)&v5[v17 - 16];
      *(void *)(v24 + 8) = v25;
      *(_DWORD *)(v24 + 16) = *(_DWORD *)&v5[v17 - 8];
      if (v25)
      {
        unint64_t v18 = *(void *)(v23 + 8);
        if ((v22 & (v22 - 1)) != 0)
        {
          if (v18 >= v22) {
            v18 %= v22;
          }
        }
        else
        {
          v18 &= v22 - 1;
        }
        *(void *)(v21 + 8 * v18) = v24;
        *(void *)&v5[v17 - 24] = 0;
        *(void *)&v5[v17 - 16] = 0;
      }
      v17 -= 40;
    }
    while (&v5[v17] != v16);
    uint64_t v26 = (char *)*a1;
    unint64_t v5 = (char *)a1[1];
    *a1 = &v12[v17];
    a1[1] = v14;
    a1[2] = v13;
    if (v5 != v26)
    {
      do
      {
        int v27 = (void *)*((void *)v5 - 3);
        if (v27)
        {
          do
          {
            unint64_t v28 = (void *)*v27;
            operator delete(v27);
            int v27 = v28;
          }
          while (v28);
        }
        unint64_t v30 = (void *)*((void *)v5 - 5);
        v5 -= 40;
        unint64_t v29 = v30;
        *(void *)unint64_t v5 = 0;
        if (v30) {
          operator delete(v29);
        }
      }
      while (v5 != v26);
      unint64_t v5 = v26;
    }
    if (v5)
    {
LABEL_37:
      operator delete(v5);
    }
  }
}

uint64_t *sub_FAB9FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = __ROR8__(*a2, 32);
  unint64_t v8 = 0xC4CEB9FE1A85EC53
     * ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) ^ ((0xFF51AFD7ED558CCDLL * (v7 ^ (v7 >> 33))) >> 33));
  unint64_t v9 = v8 ^ (v8 >> 33);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8 ^ (v8 >> 33);
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v16 = v13[1];
            if (v16 == v9)
            {
              if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
                return v13;
              }
            }
            else if ((v16 & (v10 - 1)) != v3)
            {
              goto LABEL_31;
            }
            uint64_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_31;
            }
          }
        }
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 5) == HIDWORD(v6)) {
              return v13;
            }
          }
          else
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_31:
  long long v19 = operator new(0x18uLL);
  *long long v19 = 0;
  v19[1] = v9;
  v19[2] = *a3;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (v10 && (float)(v21 * (float)v10) >= v20)
  {
    uint64_t v22 = *(void *)a1;
    uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
    if (v23)
    {
LABEL_34:
      *long long v19 = *v23;
LABEL_69:
      *uint64_t v23 = v19;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (prime > v10) {
      goto LABEL_45;
    }
    if (prime < v10)
    {
      unint64_t v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (prime <= v28) {
        size_t prime = v28;
      }
      if (prime < v10) {
LABEL_45:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    unint64_t v31 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
      {
        unint64_t v3 = v9 % v10;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v9 % v10));
        if (v23) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v3 = v9;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *(void **)(*(void *)a1 + 8 * v9);
        if (v23) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      unint64_t v3 = v31 & v9;
      uint64_t v22 = *(void *)a1;
      uint64_t v23 = *(void **)(*(void *)a1 + 8 * (v31 & v9));
      if (v23) {
        goto LABEL_34;
      }
    }
  }
  *long long v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v19;
  *(void *)(v22 + 8 * v3) = a1 + 16;
  if (*v19)
  {
    unint64_t v32 = *(void *)(*v19 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v32 >= v10) {
        v32 %= v10;
      }
    }
    else
    {
      v32 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_69;
  }
LABEL_70:
  ++*(void *)(a1 + 24);
  return v19;
}

void sub_FABD50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

int *sub_FABD64(uint64_t a1, unsigned int *a2, void *a3)
{
  a3[1] = *a3;
  uint64_t result = (int *)sub_F93238(a1, *a2, 1);
  if (result)
  {
    uint64_t v6 = (unsigned __int16 *)((char *)result - *result);
    if (*v6 >= 9u)
    {
      uint64_t v7 = v6[4];
      if (v7)
      {
        uint64_t result = (int *)sub_F930D4((unsigned int *)((char *)result + v7 + *(unsigned int *)((char *)result + v7)), a2[1]);
        unint64_t v8 = (unsigned __int16 *)((char *)result - *result);
        if (*v8 >= 7u)
        {
          uint64_t v9 = v8[3];
          if (v9)
          {
            uint64_t v10 = *(unsigned int *)((char *)result + v9);
            uint64_t v11 = *(unsigned int *)((char *)result + v9 + v10);
            if (v11)
            {
              uint64_t v12 = 8 * v11;
              uint64_t v13 = (int *)((char *)result + v10 + v9 + 8);
              do
              {
                int v15 = *v13;
                int v14 = *(v13 - 1);
                uint64_t result = sub_FABE48((uint64_t)a3, &v15, &v14);
                v13 += 2;
                v12 -= 8;
              }
              while (v12);
            }
          }
        }
      }
    }
  }
  return result;
}

_DWORD *sub_FABE48(uint64_t a1, int *a2, _DWORD *a3)
{
  uint64_t v7 = *(char **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  unint64_t v8 = v7;
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v7[-*(void *)a1];
    uint64_t v13 = v12 >> 3;
    unint64_t v14 = (v12 >> 3) + 1;
    if (v14 >> 61) {
      sub_2E00();
    }
    uint64_t v15 = v6 - (void)v11;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    BOOL v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v16) {
      unint64_t v17 = v14;
    }
    if (v17 >> 61) {
      sub_188D718();
    }
    uint64_t v18 = 8 * v17;
    long long v19 = operator new(8 * v17);
    int v20 = *a2;
    float v21 = &v19[8 * v13];
    *float v21 = *a3;
    v21[1] = v20;
    uint64_t v10 = v21 + 2;
    if (v7 != v11)
    {
      unint64_t v22 = v7 - v11 - 8;
      if (v22 < 0x58) {
        goto LABEL_23;
      }
      if ((unint64_t)(&v7[-v12] - v19) < 0x20) {
        goto LABEL_23;
      }
      uint64_t v23 = (v22 >> 3) + 1;
      uint64_t v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v8 = &v7[-v24];
      float v21 = (_DWORD *)((char *)v21 - v24);
      unint64_t v25 = &v19[8 * v13 - 16];
      unint64_t v26 = v7 - 16;
      uint64_t v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v28 = *(_OWORD *)v26;
        *(v25 - 1) = *((_OWORD *)v26 - 1);
        *unint64_t v25 = v28;
        v25 -= 2;
        v26 -= 32;
        v27 -= 4;
      }
      while (v27);
      if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_23:
        do
        {
          uint64_t v29 = *((void *)v8 - 1);
          v8 -= 8;
          *((void *)v21 - 1) = v29;
          v21 -= 2;
        }
        while (v8 != v11);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = &v19[v18];
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    int v9 = *a2;
    *(_DWORD *)uint64_t v7 = *a3;
    *((_DWORD *)v7 + 1) = v9;
    uint64_t v10 = v7 + 8;
  }
  *(void *)(a1 + 8) = v10;
  return v10 - 2;
}

uint64_t sub_FABFBC@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  long long v10 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 16) = v10;
  *(void *)(a5 + 32) = a1[4];
  uint64_t v11 = (unsigned int *)sub_F08F70(a2, (unsigned int *)a1 + 2);
  BOOL v12 = *((unsigned char *)a1 + 24) != 2 || *((unsigned char *)v11 + 176) == 0;
  if (v12
    || (int v13 = *((_DWORD *)a1 + 7), v41 = *a1, v42 = v13, v43 = 0, sub_FA9AB8((uint64_t)a4, (unsigned int *)&v41) == -1))
  {
    int v13 = 0;
    *(_DWORD *)(a5 + 28) = 0;
    if (*((unsigned char *)v11 + 176)) {
      goto LABEL_7;
    }
LABEL_14:
    int v14 = 0x7FFFFFFF;
    goto LABEL_15;
  }
  *(_DWORD *)(a5 + 28) = v13;
  if (!*((unsigned char *)v11 + 176)) {
    goto LABEL_14;
  }
LABEL_7:
  int v14 = 0x7FFFFFFF;
  if (*((unsigned char *)a1 + 24) == 2 && *((_DWORD *)a1 + 3) != 0x7FFFFFFF && a4[7] != a4[6])
  {
    uint64_t v41 = *a1;
    int v42 = v13;
    char v43 = 0;
    uint64_t v15 = sub_FA9AB8((uint64_t)a4, (unsigned int *)&v41);
    if (v15 != -1 && v15 != a4[8]) {
      int v14 = *(_DWORD *)(a4[12] + 20 * v15 + 16);
    }
  }
LABEL_15:
  *(_DWORD *)(a5 + 12) = v14;
  if (*((unsigned char *)v11 + 177))
  {
    int v16 = 0x7FFFFFFF;
    if (*((unsigned char *)a1 + 24) == 2 && *((_DWORD *)a1 + 4) != 0x7FFFFFFF && a4[7] != a4[6])
    {
      uint64_t v41 = *a1;
      int v42 = 0;
      char v43 = 1;
      uint64_t v17 = sub_FA9AB8((uint64_t)a4, (unsigned int *)&v41);
      if (v17 != -1 && v17 != a4[8]) {
        int v16 = *(_DWORD *)(a4[12] + 20 * v17 + 16);
      }
    }
  }
  else
  {
    int v16 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a5 + 16) = v16;
  if (v11[280] || v11[281] || *((void *)v11 + 141))
  {
    int v18 = 0x7FFFFFFF;
    if (*((unsigned char *)a1 + 24) == 2 && *((_DWORD *)a1 + 5) != 0x7FFFFFFF && a4[7] != a4[6])
    {
      uint64_t v41 = *a1;
      int v42 = 0;
      char v43 = 2;
      uint64_t v19 = sub_FA9AB8((uint64_t)a4, (unsigned int *)&v41);
      if (v19 != -1 && v19 != a4[8]) {
        int v18 = *(_DWORD *)(a4[12] + 20 * v19 + 16);
      }
    }
  }
  else
  {
    int v18 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a5 + 20) = v18;
  __int16 v20 = *((_WORD *)a1 + 13);
  if (v20
    && (unint64_t v21 = *a1, (v22 = sub_F9CC14(a3, *a1, 1)) != 0)
    && (uint64_t v23 = &v22[-*(int *)v22], *(unsigned __int16 *)v23 >= 5u)
    && *((_WORD *)v23 + 2)
    && (uint64_t v24 = &v22[*((unsigned __int16 *)v23 + 2) + *(unsigned int *)&v22[*((unsigned __int16 *)v23 + 2)]],
        *(_DWORD *)v24 > HIDWORD(v21)))
  {
    unint64_t v25 = &v24[4 * HIDWORD(v21) + 4 + *(unsigned int *)&v24[4 * HIDWORD(v21) + 4]];
    unint64_t v26 = &v25[-*(int *)v25];
    if (*(unsigned __int16 *)v26 >= 7u && (uint64_t v27 = *((unsigned __int16 *)v26 + 3)) != 0) {
      int v28 = v25[v27];
    }
    else {
      int v28 = 0;
    }
    if ((v28 & (1 << v20)) != 0) {
      __int16 v29 = *((_WORD *)a1 + 13);
    }
    else {
      __int16 v29 = 0;
    }
  }
  else
  {
    __int16 v29 = 0;
  }
  *(_WORD *)(a5 + 26) = v29;
  BOOL v30 = v16 == 0x7FFFFFFF && v14 == 0x7FFFFFFF;
  char v31 = 2 * (v18 != 0x7FFFFFFF);
  if (!v30) {
    char v31 = 2;
  }
  *(unsigned char *)(a5 + 24) = v31;
  if (v14 == 0x7FFFFFFF) {
    *(_DWORD *)(a5 + 28) = 0;
  }
  unint64_t v32 = *a1;
  uint64_t v33 = sub_F9CC14(a3, v32, 1);
  if (v33
    && (uint64_t v34 = &v33[-*(int *)v33], *(unsigned __int16 *)v34 >= 5u)
    && *((_WORD *)v34 + 2)
    && (uint64_t v35 = &v33[*((unsigned __int16 *)v34 + 2) + *(unsigned int *)&v33[*((unsigned __int16 *)v34 + 2)]],
        *(_DWORD *)v35 > HIDWORD(v32))
    && (uint64_t v36 = &v35[4 * HIDWORD(v32) + 4 + *(unsigned int *)&v35[4 * HIDWORD(v32) + 4]],
        unsigned int v37 = &v36[-*(int *)v36],
        *(unsigned __int16 *)v37 >= 5u)
    && (uint64_t v38 = *((unsigned __int16 *)v37 + 2)) != 0)
  {
    unsigned int v39 = *(_DWORD *)&v36[v38] & 0xFFDF9FFF;
  }
  else
  {
    unsigned int v39 = 0;
  }
  LODWORD(v41) = ((v14 != 0x7FFFFFFF) << 13) | ((v16 != 0x7FFFFFFF) << 14) | ((v18 != 0x7FFFFFFF) << 21) | v39;
  uint64_t result = sub_F09314((uint64_t)a2, *v11, &v41);
  *(_DWORD *)(a5 + 8) = result;
  return result;
}

void sub_FAC3C4(uint64_t a1, unint64_t a2, unint64_t a3, int a4, unsigned __int16 a5, char **a6)
{
  a6[1] = *a6;
  unsigned int v12 = a2;
  int v13 = sub_F9CC14(a1, a2, 1);
  if (!v13) {
    return;
  }
  int v14 = &v13[-*(int *)v13];
  if (*(unsigned __int16 *)v14 < 5u) {
    return;
  }
  uint64_t v15 = *((unsigned __int16 *)v14 + 2);
  if (!v15) {
    return;
  }
  unint64_t v16 = HIDWORD(a2);
  uint64_t v17 = &v13[v15 + *(unsigned int *)&v13[v15]];
  if (*(_DWORD *)v17 <= HIDWORD(a2)) {
    return;
  }
  int v18 = &v17[4 * v16 + 4 + *(unsigned int *)&v17[4 * v16 + 4]];
  uint64_t v19 = &v18[-*(int *)v18];
  unsigned int v20 = *(unsigned __int16 *)v19;
  if (v20 < 9) {
    return;
  }
  unint64_t v21 = (_DWORD *)*((unsigned __int16 *)v19 + 4);
  if (*((_WORD *)v19 + 4)) {
    unint64_t v21 = (_DWORD *)((char *)v21 + (void)v18 + *(unsigned int *)((char *)v21 + (void)v18));
  }
  if (v20 < 0xB) {
    return;
  }
  uint64_t v22 = *((unsigned __int16 *)v19 + 5);
  if (!v22 || !v21) {
    return;
  }
  unsigned int v25 = *v21;
  uint64_t v23 = v21 + 1;
  unint64_t v24 = v25;
  unint64_t v26 = &v23[v25];
  uint64_t v27 = v23;
  while (v24)
  {
    int v28 = (void *)((char *)v27 + ((4 * v24) & 0x7FFFFFFF8));
    unint64_t v30 = *v28;
    __int16 v29 = v28 + 1;
    unint64_t v31 = v24 >> 1;
    v24 += ~(v24 >> 1);
    if (v30 >= a3) {
      unint64_t v24 = v31;
    }
    else {
      uint64_t v27 = v29;
    }
  }
  if (v27 == v26) {
    return;
  }
  if (*v27 != a3) {
    return;
  }
  int v85 = (unsigned __int16)((v27 - v23) >> 3);
  if (v85 == 0xFFFF) {
    return;
  }
  unint64_t v32 = &v18[v22];
  uint64_t v81 = *(unsigned int *)&v18[v22];
  int v83 = v27 - v23;
  uint64_t v33 = sub_383520(a1, v12, 1);
  if (v33
    && (uint64_t v34 = &v33[-*(int *)v33], *(unsigned __int16 *)v34 >= 0xFu)
    && (uint64_t v35 = *((unsigned __int16 *)v34 + 7)) != 0
    && (uint64_t v36 = &v33[v35 + *(unsigned int *)&v33[v35]], *(_DWORD *)v36 > HIDWORD(a2)))
  {
    unsigned int v37 = &v36[4 * v16 + 4 + *(unsigned int *)&v36[4 * v16 + 4]];
  }
  else
  {
    unsigned int v37 = 0;
  }
  uint64_t v38 = &v32[v81];
  unsigned int v39 = (unsigned __int16 *)&v37[-*(int *)v37];
  unsigned int v40 = *v39;
  uint64_t v41 = v39[2];
  if (v39[2]) {
    v41 += (uint64_t)&v37[*(unsigned int *)&v37[v41]];
  }
  if (v40 < 7)
  {
    uint64_t v42 = 0;
  }
  else
  {
    uint64_t v42 = v39[3];
    if (v39[3]) {
      v42 += (uint64_t)&v37[*(unsigned int *)&v37[v42]];
    }
    if (v40 >= 9)
    {
      uint64_t v43 = v39[4];
      unsigned int v44 = v83;
      if (v43)
      {
        unsigned int v45 = &v37[v43 + *(unsigned int *)&v37[v43]];
        unsigned int v48 = *(_DWORD *)v38;
        int v47 = (uint64_t *)(v38 + 4);
        uint64_t v46 = v48;
        if (!v48) {
          return;
        }
      }
      else
      {
        unsigned int v45 = 0;
        unsigned int v76 = *(_DWORD *)v38;
        int v47 = (uint64_t *)(v38 + 4);
        uint64_t v46 = v76;
        if (!v76) {
          return;
        }
      }
      goto LABEL_36;
    }
  }
  unsigned int v45 = 0;
  unsigned int v44 = v83;
  unsigned int v49 = *(_DWORD *)v38;
  int v47 = (uint64_t *)(v38 + 4);
  uint64_t v46 = v49;
  if (!v49) {
    return;
  }
LABEL_36:
  int v50 = 0;
  unsigned int v51 = &v47[v46];
  int v52 = *(_DWORD *)(v41 + 4 * (a4 + *(_DWORD *)(a1 + 3872) * a5) + 4);
  unsigned int v53 = (v52 & 0x7FFFFFFF) + v46 * (unsigned __int16)(v44 >> 3);
  char v77 = v45 + 4;
  uint64_t v79 = v51;
  uint64_t v80 = v42 + 4;
  int v78 = v52;
  do
  {
    while (1)
    {
      unsigned int v54 = v53;
      if (v52 < 0)
      {
        uint64_t v58 = &v77[4 * v53];
        uint64_t v59 = *(unsigned __int16 *)v58;
        unint64_t v60 = v59 | ((unint64_t)*((unsigned __int16 *)v58 + 1) << 32);
        uint64_t v57 = v59 == 0xFFFF ? 0x7FFFFFFFFFFFFFFFLL : v60;
      }
      else
      {
        uint64_t v55 = v80 + 8 * v53;
        uint64_t v56 = *(unsigned int *)v55;
        LODWORD(v55) = *(_DWORD *)(v55 + 4);
        uint64_t v55 = v56 == 0xFFFFFFFFLL ? 0x7FFFFFFFLL : v55;
        uint64_t v57 = v56 | (v55 << 32);
      }
      uint64_t v61 = *v47;
      uint64_t v63 = a6[1];
      unint64_t v62 = (unint64_t)a6[2];
      if ((unint64_t)v63 >= v62) {
        break;
      }
      *(void *)uint64_t v63 = a3;
      *((void *)v63 + 1) = v61;
      *((void *)v63 + 2) = a2;
      *((_WORD *)v63 + 12) = v85;
      *((_WORD *)v63 + 13) = v50;
      *(void *)(v63 + 28) = v57;
      a6[1] = v63 + 40;
      ++v50;
      unsigned int v53 = v54 + 1;
      if (++v47 == v51) {
        return;
      }
    }
    unint64_t v64 = *a6;
    unint64_t v65 = 0xCCCCCCCCCCCCCCCDLL * ((v63 - *a6) >> 3);
    unint64_t v66 = v65 + 1;
    if (v65 + 1 > 0x666666666666666) {
      sub_2E00();
    }
    unsigned int v84 = v54;
    unint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v62 - (void)v64) >> 3);
    if (2 * v67 > v66) {
      unint64_t v66 = 2 * v67;
    }
    if (v67 >= 0x333333333333333) {
      unint64_t v68 = 0x666666666666666;
    }
    else {
      unint64_t v68 = v66;
    }
    if (v68 > 0x666666666666666) {
      sub_188D718();
    }
    uint64_t v82 = 40 * v68;
    int v69 = (char *)operator new(40 * v68);
    long long v70 = &v69[40 * v65];
    *(void *)long long v70 = a3;
    *((void *)v70 + 1) = v61;
    *((void *)v70 + 2) = a2;
    *((_WORD *)v70 + 12) = v85;
    *((_WORD *)v70 + 13) = v50;
    *(void *)(v70 + 28) = v57;
    if (v63 == v64)
    {
      unsigned int v74 = &v69[40 * v65];
    }
    else
    {
      long long v71 = &v69[40 * v65];
      do
      {
        long long v72 = *(_OWORD *)(v63 - 40);
        long long v73 = *(_OWORD *)(v63 - 24);
        unsigned int v74 = v71 - 40;
        *((_DWORD *)v71 - 2) = *((_DWORD *)v63 - 2);
        *(_OWORD *)(v71 - 24) = v73;
        *(_OWORD *)(v71 - 40) = v72;
        v63 -= 40;
        v71 -= 40;
      }
      while (v63 != v64);
    }
    uint64_t v75 = v70 + 40;
    *a6 = v74;
    a6[1] = v70 + 40;
    a6[2] = &v69[v82];
    if (v64) {
      operator delete(v64);
    }
    unsigned int v51 = v79;
    int v52 = v78;
    a6[1] = v75;
    ++v50;
    unsigned int v53 = v84 + 1;
    ++v47;
  }
  while (v47 != v79);
}

void sub_FAC82C(uint64_t a1, unint64_t a2, unint64_t a3, int a4, unsigned __int16 a5, char **a6)
{
  a6[1] = *a6;
  unsigned int v12 = a2;
  int v13 = sub_F9CC14(a1, a2, 1);
  if (v13)
  {
    int v14 = &v13[-*(int *)v13];
    if (*(unsigned __int16 *)v14 >= 5u)
    {
      uint64_t v15 = *((unsigned __int16 *)v14 + 2);
      if (v15)
      {
        unint64_t v16 = HIDWORD(a2);
        uint64_t v17 = &v13[v15 + *(unsigned int *)&v13[v15]];
        if (*(_DWORD *)v17 > HIDWORD(a2))
        {
          int v18 = &v17[4 * v16 + 4 + *(unsigned int *)&v17[4 * v16 + 4]];
          uint64_t v19 = &v18[-*(int *)v18];
          unsigned int v20 = *(unsigned __int16 *)v19;
          if (v20 >= 9)
          {
            if (*((_WORD *)v19 + 4))
            {
              unint64_t v21 = &v18[*((unsigned __int16 *)v19 + 4) + *(unsigned int *)&v18[*((unsigned __int16 *)v19 + 4)]];
              if (v20 < 0xB) {
                return;
              }
            }
            else
            {
              unint64_t v21 = 0;
              if (v20 < 0xB) {
                return;
              }
            }
            uint64_t v22 = *((unsigned __int16 *)v19 + 5);
            if (v22 && v21)
            {
              uint64_t v23 = &v18[v22 + *(unsigned int *)&v18[v22]];
              int v24 = v23 + 4;
              unint64_t v25 = *(unsigned int *)v23;
              unint64_t v26 = (unsigned int *)(v23 + 4);
              while (v25)
              {
                uint64_t v27 = (void *)((char *)v26 + ((4 * v25) & 0x7FFFFFFF8));
                unint64_t v29 = *v27;
                int v28 = (unsigned int *)(v27 + 1);
                unint64_t v30 = v25 >> 1;
                v25 += ~(v25 >> 1);
                if (v29 >= a3) {
                  unint64_t v25 = v30;
                }
                else {
                  unint64_t v26 = v28;
                }
              }
              if (v26 != (unsigned int *)&v23[8 * *(unsigned int *)v23 + 4] && *(void *)v26 == a3)
              {
                int v84 = (unsigned __int16)((v26 - v24) >> 3);
                if (v84 != 0xFFFF)
                {
                  uint64_t v80 = v23;
                  int v82 = v26 - v24;
                  unint64_t v31 = sub_383520(a1, v12, 1);
                  if (v31
                    && (unint64_t v32 = &v31[-*(int *)v31], *(unsigned __int16 *)v32 >= 0xFu)
                    && (uint64_t v33 = *((unsigned __int16 *)v32 + 7)) != 0
                    && (uint64_t v34 = &v31[v33 + *(unsigned int *)&v31[v33]], *(_DWORD *)v34 > HIDWORD(a2)))
                  {
                    uint64_t v35 = &v34[4 * v16 + 4 + *(unsigned int *)&v34[4 * v16 + 4]];
                  }
                  else
                  {
                    uint64_t v35 = 0;
                  }
                  uint64_t v36 = (unsigned __int16 *)&v35[-*(int *)v35];
                  unsigned int v37 = *v36;
                  uint64_t v38 = v36[2];
                  if (v36[2]) {
                    v38 += (uint64_t)&v35[*(unsigned int *)&v35[v38]];
                  }
                  if (v37 < 7)
                  {
                    uint64_t v39 = 0;
                  }
                  else
                  {
                    uint64_t v39 = v36[3];
                    if (v36[3]) {
                      v39 += (uint64_t)&v35[*(unsigned int *)&v35[v39]];
                    }
                    if (v37 >= 9)
                    {
                      uint64_t v40 = v36[4];
                      unsigned int v41 = v82;
                      if (v40)
                      {
                        uint64_t v42 = &v35[v40 + *(unsigned int *)&v35[v40]];
                        unsigned int v45 = *(_DWORD *)v21;
                        unsigned int v44 = (uint64_t *)(v21 + 4);
                        uint64_t v43 = v45;
                        if (!v45) {
                          return;
                        }
                      }
                      else
                      {
                        uint64_t v42 = 0;
                        unsigned int v74 = *(_DWORD *)v21;
                        unsigned int v44 = (uint64_t *)(v21 + 4);
                        uint64_t v43 = v74;
                        if (!v74) {
                          return;
                        }
                      }
                      goto LABEL_37;
                    }
                  }
                  uint64_t v42 = 0;
                  unsigned int v41 = v82;
                  unsigned int v46 = *(_DWORD *)v21;
                  unsigned int v44 = (uint64_t *)(v21 + 4);
                  uint64_t v43 = v46;
                  if (!v46) {
                    return;
                  }
LABEL_37:
                  int v47 = 0;
                  int v48 = *(_DWORD *)v80;
                  unsigned int v49 = &v44[v43];
                  int v50 = *(_DWORD *)(v38 + 4 * (a4 + *(_DWORD *)(a1 + 3872) * a5) + 4);
                  unsigned int v51 = (v50 & 0x7FFFFFFF) + (unsigned __int16)(v41 >> 3);
                  uint64_t v75 = v42 + 4;
                  uint64_t v79 = v39 + 4;
                  int v78 = *(_DWORD *)v80;
                  char v77 = v49;
                  int v76 = v50;
                  do
                  {
                    while (1)
                    {
                      unsigned int v52 = v51;
                      if (v50 < 0)
                      {
                        uint64_t v56 = &v75[4 * v51];
                        uint64_t v57 = *(unsigned __int16 *)v56;
                        unint64_t v58 = v57 | ((unint64_t)*((unsigned __int16 *)v56 + 1) << 32);
                        uint64_t v55 = v57 == 0xFFFF ? 0x7FFFFFFFFFFFFFFFLL : v58;
                      }
                      else
                      {
                        uint64_t v53 = v79 + 8 * v51;
                        uint64_t v54 = *(unsigned int *)v53;
                        LODWORD(v53) = *(_DWORD *)(v53 + 4);
                        uint64_t v53 = v54 == 0xFFFFFFFFLL ? 0x7FFFFFFFLL : v53;
                        uint64_t v55 = v54 | (v53 << 32);
                      }
                      uint64_t v59 = *v44;
                      uint64_t v61 = a6[1];
                      unint64_t v60 = (unint64_t)a6[2];
                      if ((unint64_t)v61 >= v60) {
                        break;
                      }
                      *(void *)uint64_t v61 = v59;
                      *((void *)v61 + 1) = a3;
                      *((void *)v61 + 2) = a2;
                      *((_WORD *)v61 + 12) = v47;
                      *((_WORD *)v61 + 13) = v84;
                      *(void *)(v61 + 28) = v55;
                      a6[1] = v61 + 40;
                      ++v47;
                      unsigned int v51 = v52 + v48;
                      if (++v44 == v49) {
                        return;
                      }
                    }
                    unint64_t v62 = *a6;
                    unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * ((v61 - *a6) >> 3);
                    unint64_t v64 = v63 + 1;
                    if (v63 + 1 > 0x666666666666666) {
                      sub_2E00();
                    }
                    unsigned int v83 = v52;
                    unint64_t v65 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v60 - (void)v62) >> 3);
                    if (2 * v65 > v64) {
                      unint64_t v64 = 2 * v65;
                    }
                    if (v65 >= 0x333333333333333) {
                      unint64_t v66 = 0x666666666666666;
                    }
                    else {
                      unint64_t v66 = v64;
                    }
                    if (v66 > 0x666666666666666) {
                      sub_188D718();
                    }
                    uint64_t v81 = 40 * v66;
                    unint64_t v67 = (char *)operator new(40 * v66);
                    unint64_t v68 = &v67[40 * v63];
                    *(void *)unint64_t v68 = v59;
                    *((void *)v68 + 1) = a3;
                    *((void *)v68 + 2) = a2;
                    *((_WORD *)v68 + 12) = v47;
                    *((_WORD *)v68 + 13) = v84;
                    *(void *)(v68 + 28) = v55;
                    if (v61 == v62)
                    {
                      long long v72 = &v67[40 * v63];
                    }
                    else
                    {
                      int v69 = &v67[40 * v63];
                      do
                      {
                        long long v70 = *(_OWORD *)(v61 - 40);
                        long long v71 = *(_OWORD *)(v61 - 24);
                        long long v72 = v69 - 40;
                        *((_DWORD *)v69 - 2) = *((_DWORD *)v61 - 2);
                        *(_OWORD *)(v69 - 24) = v71;
                        *(_OWORD *)(v69 - 40) = v70;
                        v61 -= 40;
                        v69 -= 40;
                      }
                      while (v61 != v62);
                    }
                    long long v73 = v68 + 40;
                    *a6 = v72;
                    a6[1] = v68 + 40;
                    a6[2] = &v67[v81];
                    if (v62) {
                      operator delete(v62);
                    }
                    int v48 = v78;
                    unsigned int v49 = v77;
                    int v50 = v76;
                    a6[1] = v73;
                    ++v47;
                    unsigned int v51 = v83 + v78;
                    ++v44;
                  }
                  while (v44 != v77);
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_FACCB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 48) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v4 = (char **)(a1 + 24);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 1018212795;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a3;
  *(void *)(a1 + 232) = a3;
  *(void *)(a1 + 240) = 0;
  sub_2980();
  uint64_t v6 = *(void *)(v5 + 24);
  if (v6)
  {
    sub_2980();
    uint64_t v6 = *(void *)(*(void *)(v7 + 24) + 248) + 1;
  }
  *(void *)(a1 + 248) = v6;
  unint64_t v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  *unint64_t v8 = off_24389C0;
  *(void *)&long long v19 = v8 + 3;
  *((void *)&v19 + 1) = v8;
  int v9 = *(void **)(a1 + 32);
  if ((unint64_t)v9 >= *(void *)(a1 + 40))
  {
    long long v10 = sub_31A110(v4, (uint64_t)&v19);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v19 + 1);
    *(void *)(a1 + 32) = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    *int v9 = v8 + 3;
    v9[1] = v8;
    *(void *)(a1 + 32) = v9 + 2;
  }
  *(int64x2_t *)(a1 + 224) = vdupq_n_s64(1uLL);
  sub_2980();
  long long v19 = *v12;
  long long v20 = v12[1];
  sub_2980();
  void *v13 = 0;
  sub_2980();
  *(void *)(v14 + 8) = 1;
  sub_2980();
  *(void *)(v15 + 16) = 0;
  sub_2980();
  *(void *)(v16 + 24) = a1;
  sub_FACEDC();
  sub_2980();
  _OWORD *v17 = v19;
  v17[1] = v20;
  return a1;
}

void sub_FACE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_14A84((uint64_t)&a9);
  std::condition_variable::~condition_variable(v13);
  std::mutex::~mutex(v12);
  std::mutex::~mutex(v10);
  sub_34A128(v11);
  sub_34A1DC(v9);
  _Unwind_Resume(a1);
}

void *sub_FACEDC()
{
  uint64_t v0 = __chkstk_darwin();
  sub_FB1BC4();
  sub_FB32E8((uint64_t)v9, 1);
  uint64_t v1 = *(uint64_t ***)(v0 + 8);
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  if (*v1 != v3)
  {
    do
    {
      uint64_t v6 = v9;
      long long v7 = *(_OWORD *)(v0 + 16);
      uint64_t v8 = *(void *)(v0 + 32);
      sub_FAD020(*v2, v2[1], (uint64_t)&v6);
      sub_2980();
      sub_FAAF70(*(void *)(v4 + 24) + 112);
      v2 += 3;
    }
    while (v2 != v3);
  }
  return sub_FAD3D8(v9);
}

void sub_FACFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_FAD3D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_FACFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_FAD3D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_FAD00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_FAD3D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_FAD020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2980();
  uint64_t v7 = v6;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = v6;
  uint64_t v17 = &v14;
  sub_2980();
  int v9 = (std::mutex *)(*(void *)(v8 + 24) + 48);
  std::mutex::lock(v9);
  sub_FAD1D8(&v16);
  std::mutex::unlock(v9);
  unint64_t v10 = (a2 - a1) >> 3;
  for (unint64_t i = atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
        i < v10;
        unint64_t i = atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed))
  {
    uint64_t v18 = *(void *)(a1 + 8 * i);
    sub_FB1CD4(*(void *)a3, (unsigned int *)&v18, *(int **)(a3 + 8), *(signed int **)(a3 + 16), **(unsigned __int8 **)(a3 + 24), (uint64_t)&v16);
    unsigned int v12 = (std::__shared_weak_count *)v17;
    if (v17 && !atomic_fetch_add((atomic_ullong *volatile)v17 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  ++*(void *)(v7 + 16);
  int v13 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_FAD194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::mutex::unlock(v10);
  sub_14A84((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_FAD1B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FAD1C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FAD1D8(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 16);
  uint64_t v3 = *(void *)(*a1 + 24);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  unint64_t v6 = (v5 - v4) >> 4;
  if (v2 >= v6)
  {
    unint64_t v7 = v2 + 1;
    uint64_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_24389C0;
    uint64_t v17 = &v8[1].__vftable;
    uint64_t v18 = v8;
    unint64_t v9 = v7 - v6;
    if (v7 <= v6)
    {
      unint64_t v10 = v8;
      if (v7 < v6)
      {
        for (uint64_t i = v4 + 16 * v7; v5 != i; v5 -= 16)
        {
          unsigned int v12 = *(std::__shared_weak_count **)(v5 - 8);
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v9);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        *(void *)(v3 + 32) = i;
        unint64_t v10 = v18;
        if (!v18) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      sub_31A2E8((char **)(v3 + 24), v9, &v17);
      unint64_t v10 = v18;
      if (!v18)
      {
LABEL_15:
        unint64_t v2 = *(void *)(*a1 + 16);
        uint64_t v4 = *(void *)(*(void *)(*a1 + 24) + 24);
        goto LABEL_16;
      }
    }
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v13 = a1[1];
  long long v14 = *(_OWORD *)(v4 + 16 * v2);
  uint64_t v15 = *(void *)(v4 + 16 * v2 + 8);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  *(_OWORD *)uint64_t v13 = v14;
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_FAD3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_FAD3D8(void *a1)
{
  unint64_t v2 = a1 + 5652;
  uint64_t v3 = (void **)(a1 + 4989);
  uint64_t v4 = (void *)a1[5655];
  if (v4)
  {
    uint64_t v5 = a1[5656];
    unint64_t v6 = v4;
    if ((void *)v5 != v4)
    {
      do
        uint64_t v5 = sub_FAB36C(v5 - 960);
      while ((void *)v5 != v4);
      unint64_t v6 = (void *)v2[3];
    }
    v2[4] = v4;
    operator delete(v6);
  }
  if (*(unsigned char *)v2)
  {
    sub_3A6230(a1 + 5005);
    *(unsigned char *)unint64_t v2 = 0;
  }
  unint64_t v7 = *v3;
  if (*v3)
  {
    v3[1] = v7;
    operator delete(v7);
  }
  sub_3A6318(a1 + 4473);
  uint64_t v8 = (std::__shared_weak_count *)a1[3989];
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    sub_328138((uint64_t)(a1 + 3891));
    unint64_t v9 = (std::__shared_weak_count *)a1[3407];
    if (!v9) {
      goto LABEL_16;
    }
  }
  else
  {
    sub_328138((uint64_t)(a1 + 3891));
    unint64_t v9 = (std::__shared_weak_count *)a1[3407];
    if (!v9) {
      goto LABEL_16;
    }
  }
  if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_16:
  unint64_t v10 = (std::__shared_weak_count *)a1[3405];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    uint64_t v11 = (std::__shared_weak_count *)a1[2920];
    if (!v11) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v11 = (std::__shared_weak_count *)a1[2920];
    if (!v11) {
      goto LABEL_22;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_22:
  unsigned int v12 = (std::__shared_weak_count *)a1[2434];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = (std::__shared_weak_count *)a1[1949];
    if (!v13) {
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v13 = (std::__shared_weak_count *)a1[1949];
    if (!v13) {
      goto LABEL_28;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_28:
  long long v14 = (std::__shared_weak_count *)a1[1465];
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    sub_32834C(a1 + 486);
    uint64_t v15 = (std::__shared_weak_count *)a1[1];
    if (!v15) {
      return a1;
    }
  }
  else
  {
    sub_32834C(a1 + 486);
    uint64_t v15 = (std::__shared_weak_count *)a1[1];
    if (!v15) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  return a1;
}

uint64_t sub_FAD72C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v8 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v8;
  *(void *)(a4 + 32) = a1[4];
  unint64_t v9 = (unsigned int *)sub_F0BC4C(a2, (unsigned int *)a1 + 2);
  *(_DWORD *)(a4 + 28) = 0;
  *(void *)(a4 + 12) = 0x8000000080000000;
  *(_DWORD *)(a4 + 20) = 0x7FFFFFFF;
  __int16 v10 = *((_WORD *)a1 + 13);
  if (v10
    && (unint64_t v11 = *a1, (v12 = sub_FA08AC(a3, *a1, 1)) != 0)
    && (uint64_t v13 = &v12[-*(int *)v12], *(unsigned __int16 *)v13 >= 5u)
    && *((_WORD *)v13 + 2)
    && (long long v14 = &v12[*((unsigned __int16 *)v13 + 2) + *(unsigned int *)&v12[*((unsigned __int16 *)v13 + 2)]],
        *(_DWORD *)v14 > HIDWORD(v11)))
  {
    uint64_t v15 = &v14[4 * HIDWORD(v11) + 4 + *(unsigned int *)&v14[4 * HIDWORD(v11) + 4]];
    uint64_t v16 = &v15[-*(int *)v15];
    if (*(unsigned __int16 *)v16 >= 7u && (uint64_t v17 = *((unsigned __int16 *)v16 + 3)) != 0) {
      int v18 = v15[v17];
    }
    else {
      int v18 = 0;
    }
    if ((v18 & (1 << v10)) != 0) {
      __int16 v19 = *((_WORD *)a1 + 13);
    }
    else {
      __int16 v19 = 0;
    }
  }
  else
  {
    __int16 v19 = 0;
  }
  *(_WORD *)(a4 + 26) = v19;
  *(unsigned char *)(a4 + 24) = 0;
  *(_DWORD *)(a4 + 28) = 0;
  unint64_t v20 = *a1;
  unint64_t v21 = sub_FA08AC(a3, v20, 1);
  if (v21
    && (uint64_t v22 = &v21[-*(int *)v21], *(unsigned __int16 *)v22 >= 5u)
    && *((_WORD *)v22 + 2)
    && (uint64_t v23 = &v21[*((unsigned __int16 *)v22 + 2) + *(unsigned int *)&v21[*((unsigned __int16 *)v22 + 2)]],
        *(_DWORD *)v23 > HIDWORD(v20))
    && (int v24 = &v23[4 * HIDWORD(v20) + 4 + *(unsigned int *)&v23[4 * HIDWORD(v20) + 4]],
        unint64_t v25 = &v24[-*(int *)v24],
        *(unsigned __int16 *)v25 >= 5u)
    && (uint64_t v26 = *((unsigned __int16 *)v25 + 2)) != 0)
  {
    int v27 = *(_DWORD *)&v24[v26];
  }
  else
  {
    int v27 = 0;
  }
  int v29 = v27;
  uint64_t result = sub_F0BFF0((uint64_t)a2, *v9, &v29);
  *(_DWORD *)(a4 + 8) = result;
  return result;
}

void sub_FAD900(uint64_t a1, unint64_t a2, unint64_t a3, int a4, unsigned __int16 a5, char **a6)
{
  a6[1] = *a6;
  unsigned int v12 = a2;
  uint64_t v13 = sub_FA08AC(a1, a2, 1);
  if (!v13) {
    return;
  }
  long long v14 = &v13[-*(int *)v13];
  if (*(unsigned __int16 *)v14 < 5u) {
    return;
  }
  uint64_t v15 = *((unsigned __int16 *)v14 + 2);
  if (!v15) {
    return;
  }
  unint64_t v16 = HIDWORD(a2);
  uint64_t v17 = &v13[v15 + *(unsigned int *)&v13[v15]];
  if (*(_DWORD *)v17 <= HIDWORD(a2)) {
    return;
  }
  int v18 = &v17[4 * v16 + 4 + *(unsigned int *)&v17[4 * v16 + 4]];
  __int16 v19 = &v18[-*(int *)v18];
  unsigned int v20 = *(unsigned __int16 *)v19;
  if (v20 < 9) {
    return;
  }
  unint64_t v21 = (_DWORD *)*((unsigned __int16 *)v19 + 4);
  if (*((_WORD *)v19 + 4)) {
    unint64_t v21 = (_DWORD *)((char *)v21 + (void)v18 + *(unsigned int *)((char *)v21 + (void)v18));
  }
  if (v20 < 0xB) {
    return;
  }
  uint64_t v22 = *((unsigned __int16 *)v19 + 5);
  if (!v22 || !v21) {
    return;
  }
  unsigned int v25 = *v21;
  uint64_t v23 = v21 + 1;
  unint64_t v24 = v25;
  uint64_t v26 = &v23[v25];
  unint64_t v27 = (((int)((uint64_t)a3 >> 28) & 0xFFFFFFFFFFFFFFF0) + (a3 << 32)) & 0xFFFFFFFFFFFFFFF0 | (a3 >> 57) & 8 | (a3 >> 59) & 4 | (a3 >> 61) & 2 | (a3 >> 63);
  int v28 = v23;
  while (v24)
  {
    int v29 = (void *)((char *)v28 + ((4 * v24) & 0x7FFFFFFF8));
    unint64_t v31 = *v29;
    unint64_t v30 = v29 + 1;
    unint64_t v32 = v24 >> 1;
    v24 += ~(v24 >> 1);
    if (v31 >= v27) {
      unint64_t v24 = v32;
    }
    else {
      int v28 = v30;
    }
  }
  if (v28 == v26) {
    return;
  }
  if (*v28 != v27) {
    return;
  }
  int v88 = (unsigned __int16)((v28 - v23) >> 3);
  if (v88 == 0xFFFF) {
    return;
  }
  uint64_t v33 = &v18[v22];
  uint64_t v84 = *(unsigned int *)&v18[v22];
  int v86 = v28 - v23;
  uint64_t v34 = sub_383A0C(a1, v12, 1);
  if (v34
    && (uint64_t v35 = &v34[-*(int *)v34], *(unsigned __int16 *)v35 >= 0xFu)
    && (uint64_t v36 = *((unsigned __int16 *)v35 + 7)) != 0
    && (unsigned int v37 = &v34[v36 + *(unsigned int *)&v34[v36]], *(_DWORD *)v37 > HIDWORD(a2)))
  {
    uint64_t v38 = &v37[4 * v16 + 4 + *(unsigned int *)&v37[4 * v16 + 4]];
  }
  else
  {
    uint64_t v38 = 0;
  }
  uint64_t v39 = &v33[v84];
  uint64_t v40 = (unsigned __int16 *)&v38[-*(int *)v38];
  unsigned int v41 = *v40;
  uint64_t v42 = v40[2];
  if (v40[2]) {
    v42 += (uint64_t)&v38[*(unsigned int *)&v38[v42]];
  }
  if (v41 < 7)
  {
    uint64_t v43 = 0;
  }
  else
  {
    uint64_t v43 = v40[3];
    if (v40[3]) {
      v43 += (uint64_t)&v38[*(unsigned int *)&v38[v43]];
    }
    if (v41 >= 9)
    {
      uint64_t v44 = v40[4];
      unsigned int v45 = v86;
      if (v44)
      {
        unsigned int v46 = &v38[v44 + *(unsigned int *)&v38[v44]];
        unsigned int v49 = *(_DWORD *)v39;
        int v47 = v39 + 4;
        uint64_t v48 = v49;
        if (!v49) {
          return;
        }
      }
      else
      {
        unsigned int v46 = 0;
        unsigned int v78 = *(_DWORD *)v39;
        int v47 = v39 + 4;
        uint64_t v48 = v78;
        if (!v78) {
          return;
        }
      }
      goto LABEL_36;
    }
  }
  unsigned int v46 = 0;
  unsigned int v45 = v86;
  unsigned int v50 = *(_DWORD *)v39;
  int v47 = v39 + 4;
  uint64_t v48 = v50;
  if (!v50) {
    return;
  }
LABEL_36:
  int v51 = 0;
  unsigned int v52 = &v47[v48];
  int v53 = *(_DWORD *)(v42 + 4 * (a4 + *(_DWORD *)(a1 + 3872) * a5) + 4);
  unsigned int v54 = (v53 & 0x7FFFFFFF) + v48 * (unsigned __int16)(v45 >> 3);
  uint64_t v79 = v46 + 4;
  uint64_t v81 = v52;
  uint64_t v82 = v43 + 4;
  int v80 = v53;
  do
  {
    while (1)
    {
      unsigned int v55 = v54;
      if (v53 < 0)
      {
        uint64_t v59 = &v79[4 * v54];
        uint64_t v60 = *(unsigned __int16 *)v59;
        unint64_t v61 = v60 | ((unint64_t)*((unsigned __int16 *)v59 + 1) << 32);
        uint64_t v58 = v60 == 0xFFFF ? 0x7FFFFFFFFFFFFFFFLL : v61;
      }
      else
      {
        uint64_t v56 = v82 + 8 * v54;
        uint64_t v57 = *(unsigned int *)v56;
        LODWORD(v56) = *(_DWORD *)(v56 + 4);
        uint64_t v56 = v57 == 0xFFFFFFFFLL ? 0x7FFFFFFFLL : v56;
        uint64_t v58 = v57 | (v56 << 32);
      }
      uint64_t v62 = HIDWORD(*v47);
      uint64_t v63 = (*v47 >> 4) & 0x8FFFFFFF | (*v47 << 31) | (((*v47 >> 3) & 1) << 28) & 0x9FFFFFFF | (((*v47 >> 2) & 1) << 29) & 0xBFFFFFFF | (((*v47 >> 1) & 1) << 30);
      unint64_t v65 = (unint64_t *)a6[1];
      unint64_t v64 = (unint64_t)a6[2];
      if ((unint64_t)v65 >= v64) {
        break;
      }
      *unint64_t v65 = a3;
      v65[1] = v62 | (v63 << 32);
      v65[2] = a2;
      *((_WORD *)v65 + 12) = v88;
      *((_WORD *)v65 + 13) = v51;
      *(unint64_t *)((char *)v65 + 28) = v58;
      a6[1] = (char *)(v65 + 5);
      ++v51;
      unsigned int v54 = v55 + 1;
      if (++v47 == v52) {
        return;
      }
    }
    unint64_t v66 = (unint64_t *)*a6;
    unint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v65 - *a6) >> 3);
    unint64_t v68 = v67 + 1;
    if (v67 + 1 > 0x666666666666666) {
      sub_2E00();
    }
    int v85 = v47;
    unsigned int v87 = v55;
    unint64_t v69 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v64 - (void)v66) >> 3);
    if (2 * v69 > v68) {
      unint64_t v68 = 2 * v69;
    }
    if (v69 >= 0x333333333333333) {
      unint64_t v70 = 0x666666666666666;
    }
    else {
      unint64_t v70 = v68;
    }
    if (v70 > 0x666666666666666) {
      sub_188D718();
    }
    uint64_t v83 = 40 * v70;
    long long v71 = (char *)operator new(40 * v70);
    long long v72 = &v71[40 * v67];
    *(void *)long long v72 = a3;
    *((void *)v72 + 1) = v62 | (v63 << 32);
    *((void *)v72 + 2) = a2;
    *((_WORD *)v72 + 12) = v88;
    *((_WORD *)v72 + 13) = v51;
    *(void *)(v72 + 28) = v58;
    if (v65 == v66)
    {
      int v76 = &v71[40 * v67];
    }
    else
    {
      long long v73 = &v71[40 * v67];
      do
      {
        long long v74 = *(_OWORD *)(v65 - 5);
        long long v75 = *(_OWORD *)(v65 - 3);
        int v76 = v73 - 40;
        *((_DWORD *)v73 - 2) = *((_DWORD *)v65 - 2);
        *(_OWORD *)(v73 - 24) = v75;
        *(_OWORD *)(v73 - 40) = v74;
        v65 -= 5;
        v73 -= 40;
      }
      while (v65 != v66);
    }
    char v77 = v72 + 40;
    *a6 = v76;
    a6[1] = v72 + 40;
    a6[2] = &v71[v83];
    if (v66) {
      operator delete(v66);
    }
    unsigned int v52 = v81;
    int v53 = v80;
    a6[1] = v77;
    ++v51;
    unsigned int v54 = v87 + 1;
    int v47 = v85 + 1;
  }
  while (v85 + 1 != v81);
}

char *sub_FADDB0(uint64_t a1, unint64_t a2, unint64_t a3, int a4, unsigned __int16 a5, char **a6)
{
  a6[1] = *a6;
  unsigned int v12 = a2;
  uint64_t result = sub_FA08AC(a1, a2, 1);
  if (result)
  {
    long long v14 = &result[-*(int *)result];
    if (*(unsigned __int16 *)v14 >= 5u)
    {
      uint64_t v15 = *((unsigned __int16 *)v14 + 2);
      if (v15)
      {
        unint64_t v16 = HIDWORD(a2);
        uint64_t v17 = &result[v15 + *(unsigned int *)&result[v15]];
        if (*(_DWORD *)v17 > HIDWORD(a2))
        {
          int v18 = &v17[4 * v16 + 4 + *(unsigned int *)&v17[4 * v16 + 4]];
          __int16 v19 = &v18[-*(int *)v18];
          unsigned int v20 = *(unsigned __int16 *)v19;
          if (v20 >= 9)
          {
            if (*((_WORD *)v19 + 4))
            {
              unint64_t v21 = &v18[*((unsigned __int16 *)v19 + 4) + *(unsigned int *)&v18[*((unsigned __int16 *)v19 + 4)]];
              if (v20 < 0xB) {
                return result;
              }
            }
            else
            {
              unint64_t v21 = 0;
              if (v20 < 0xB) {
                return result;
              }
            }
            uint64_t v22 = *((unsigned __int16 *)v19 + 5);
            if (v22 && v21)
            {
              uint64_t v23 = &v18[v22 + *(unsigned int *)&v18[v22]];
              int v24 = v23 + 4;
              unint64_t v25 = *(unsigned int *)v23;
              unint64_t v26 = (((int)((uint64_t)a3 >> 28) & 0xFFFFFFFFFFFFFFF0) + (a3 << 32)) & 0xFFFFFFFFFFFFFFF0 | (a3 >> 57) & 8 | (a3 >> 59) & 4 | (a3 >> 61) & 2 | (a3 >> 63);
              unint64_t v27 = (unsigned int *)(v23 + 4);
              while (v25)
              {
                int v28 = (unint64_t *)((char *)v27 + ((4 * v25) & 0x7FFFFFFF8));
                unint64_t v30 = *v28;
                int v29 = (unsigned int *)(v28 + 1);
                unint64_t v31 = v25 >> 1;
                v25 += ~(v25 >> 1);
                if (v30 >= v26) {
                  unint64_t v25 = v31;
                }
                else {
                  unint64_t v27 = v29;
                }
              }
              if (v27 != (unsigned int *)&v23[8 * *(unsigned int *)v23 + 4] && *(void *)v27 == v26)
              {
                int v87 = (unsigned __int16)((v27 - v24) >> 3);
                if (v87 != 0xFFFF)
                {
                  uint64_t v83 = v23;
                  int v85 = v27 - v24;
                  uint64_t result = sub_383A0C(a1, v12, 1);
                  if (result
                    && (unint64_t v32 = &result[-*(int *)result], *(unsigned __int16 *)v32 >= 0xFu)
                    && (uint64_t v33 = *((unsigned __int16 *)v32 + 7)) != 0
                    && (uint64_t v34 = &result[v33 + *(unsigned int *)&result[v33]], *(_DWORD *)v34 > HIDWORD(a2)))
                  {
                    uint64_t v35 = &v34[4 * v16 + 4 + *(unsigned int *)&v34[4 * v16 + 4]];
                  }
                  else
                  {
                    uint64_t v35 = 0;
                  }
                  uint64_t v36 = (unsigned __int16 *)&v35[-*(int *)v35];
                  unsigned int v37 = *v36;
                  uint64_t v38 = v36[2];
                  if (v36[2]) {
                    v38 += (uint64_t)&v35[*(unsigned int *)&v35[v38]];
                  }
                  if (v37 < 7)
                  {
                    uint64_t v39 = 0;
                  }
                  else
                  {
                    uint64_t v39 = v36[3];
                    if (v36[3]) {
                      v39 += (uint64_t)&v35[*(unsigned int *)&v35[v39]];
                    }
                    if (v37 >= 9)
                    {
                      uint64_t v40 = v36[4];
                      unsigned int v41 = v85;
                      if (v40)
                      {
                        uint64_t v42 = &v35[v40 + *(unsigned int *)&v35[v40]];
                        unsigned int v45 = *(_DWORD *)v21;
                        uint64_t v44 = v21 + 4;
                        uint64_t v43 = v45;
                        if (!v45) {
                          return result;
                        }
                      }
                      else
                      {
                        uint64_t v42 = 0;
                        unsigned int v76 = *(_DWORD *)v21;
                        uint64_t v44 = v21 + 4;
                        uint64_t v43 = v76;
                        if (!v76) {
                          return result;
                        }
                      }
                      goto LABEL_37;
                    }
                  }
                  uint64_t v42 = 0;
                  unsigned int v41 = v85;
                  unsigned int v46 = *(_DWORD *)v21;
                  uint64_t v44 = v21 + 4;
                  uint64_t v43 = v46;
                  if (!v46) {
                    return result;
                  }
LABEL_37:
                  int v47 = 0;
                  int v48 = *(_DWORD *)v83;
                  unsigned int v49 = &v44[v43];
                  int v50 = *(_DWORD *)(v38 + 4 * (a4 + *(_DWORD *)(a1 + 3872) * a5) + 4);
                  unsigned int v51 = (v50 & 0x7FFFFFFF) + (unsigned __int16)(v41 >> 3);
                  char v77 = v42 + 4;
                  uint64_t v81 = v39 + 4;
                  int v80 = *(_DWORD *)v83;
                  uint64_t v79 = v49;
                  int v78 = v50;
                  do
                  {
                    while (1)
                    {
                      uint64_t result = (char *)v51;
                      if (v50 < 0)
                      {
                        unsigned int v55 = &v77[4 * v51];
                        uint64_t v56 = *(unsigned __int16 *)v55;
                        unint64_t v57 = v56 | ((unint64_t)*((unsigned __int16 *)v55 + 1) << 32);
                        uint64_t v54 = v56 == 0xFFFF ? 0x7FFFFFFFFFFFFFFFLL : v57;
                      }
                      else
                      {
                        uint64_t v52 = v81 + 8 * v51;
                        uint64_t v53 = *(unsigned int *)v52;
                        LODWORD(v52) = *(_DWORD *)(v52 + 4);
                        uint64_t v52 = v53 == 0xFFFFFFFFLL ? 0x7FFFFFFFLL : v52;
                        uint64_t v54 = v53 | (v52 << 32);
                      }
                      uint64_t v58 = HIDWORD(*v44);
                      uint64_t v59 = (*v44 >> 4) & 0x8FFFFFFF | (*v44 << 31) | (((*v44 >> 3) & 1) << 28) & 0x9FFFFFFF | (((*v44 >> 2) & 1) << 29) & 0xBFFFFFFF | (((*v44 >> 1) & 1) << 30);
                      unint64_t v61 = (uint64_t *)a6[1];
                      unint64_t v60 = (unint64_t)a6[2];
                      if ((unint64_t)v61 >= v60) {
                        break;
                      }
                      *unint64_t v61 = v58 | (v59 << 32);
                      v61[1] = a3;
                      v61[2] = a2;
                      *((_WORD *)v61 + 12) = v47;
                      *((_WORD *)v61 + 13) = v87;
                      *(uint64_t *)((char *)v61 + 28) = v54;
                      a6[1] = (char *)(v61 + 5);
                      ++v47;
                      unsigned int v51 = result + v48;
                      if (++v44 == v49) {
                        return result;
                      }
                    }
                    int v86 = v44;
                    uint64_t v62 = (uint64_t *)*a6;
                    unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v61 - *a6) >> 3);
                    unint64_t v64 = v63 + 1;
                    if (v63 + 1 > 0x666666666666666) {
                      sub_2E00();
                    }
                    uint64_t v84 = result;
                    unint64_t v65 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v60 - (void)v62) >> 3);
                    if (2 * v65 > v64) {
                      unint64_t v64 = 2 * v65;
                    }
                    if (v65 >= 0x333333333333333) {
                      unint64_t v66 = 0x666666666666666;
                    }
                    else {
                      unint64_t v66 = v64;
                    }
                    if (v66 > 0x666666666666666) {
                      sub_188D718();
                    }
                    uint64_t v67 = v54;
                    uint64_t v82 = 40 * v66;
                    unint64_t v68 = (char *)operator new(40 * v66);
                    unint64_t v69 = &v68[40 * v63];
                    *(void *)unint64_t v69 = v58 | (v59 << 32);
                    *((void *)v69 + 1) = a3;
                    *((void *)v69 + 2) = a2;
                    *((_WORD *)v69 + 12) = v47;
                    *((_WORD *)v69 + 13) = v87;
                    *(void *)(v69 + 28) = v67;
                    if (v61 == v62)
                    {
                      long long v74 = &v68[40 * v63];
                      long long v71 = v86;
                    }
                    else
                    {
                      unint64_t v70 = &v68[40 * v63];
                      long long v71 = v86;
                      do
                      {
                        long long v72 = *(_OWORD *)(v61 - 5);
                        long long v73 = *(_OWORD *)(v61 - 3);
                        long long v74 = v70 - 40;
                        *((_DWORD *)v70 - 2) = *((_DWORD *)v61 - 2);
                        *(_OWORD *)(v70 - 24) = v73;
                        *(_OWORD *)(v70 - 40) = v72;
                        v61 -= 5;
                        v70 -= 40;
                      }
                      while (v61 != v62);
                    }
                    long long v75 = v69 + 40;
                    *a6 = v74;
                    a6[1] = v69 + 40;
                    a6[2] = &v68[v82];
                    if (v62) {
                      operator delete(v62);
                    }
                    int v48 = v80;
                    unsigned int v49 = v79;
                    int v50 = v78;
                    uint64_t result = v84;
                    a6[1] = v75;
                    ++v47;
                    unsigned int v51 = v84 + v80;
                    uint64_t v44 = v71 + 1;
                  }
                  while (v44 != v79);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_FAE294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 48) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v4 = (char **)(a1 + 24);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 850045863;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 1018212795;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a3;
  *(void *)(a1 + 232) = a3;
  *(void *)(a1 + 240) = 0;
  sub_2980();
  uint64_t v6 = *(void *)(v5 + 24);
  if (v6)
  {
    sub_2980();
    uint64_t v6 = *(void *)(*(void *)(v7 + 24) + 248) + 1;
  }
  *(void *)(a1 + 248) = v6;
  long long v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = 0;
  *long long v8 = off_24389C0;
  *(void *)&long long v19 = v8 + 3;
  *((void *)&v19 + 1) = v8;
  unint64_t v9 = *(void **)(a1 + 32);
  if ((unint64_t)v9 >= *(void *)(a1 + 40))
  {
    __int16 v10 = sub_31A110(v4, (uint64_t)&v19);
    unint64_t v11 = (std::__shared_weak_count *)*((void *)&v19 + 1);
    *(void *)(a1 + 32) = v10;
    if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    *unint64_t v9 = v8 + 3;
    v9[1] = v8;
    *(void *)(a1 + 32) = v9 + 2;
  }
  *(int64x2_t *)(a1 + 224) = vdupq_n_s64(1uLL);
  sub_2980();
  long long v19 = *v12;
  long long v20 = v12[1];
  sub_2980();
  void *v13 = 0;
  sub_2980();
  *(void *)(v14 + 8) = 1;
  sub_2980();
  *(void *)(v15 + 16) = 0;
  sub_2980();
  *(void *)(v16 + 24) = a1;
  sub_FAE4B8();
  sub_2980();
  _OWORD *v17 = v19;
  v17[1] = v20;
  return a1;
}

void sub_FAE46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_14A84((uint64_t)&a9);
  std::condition_variable::~condition_variable(v13);
  std::mutex::~mutex(v12);
  std::mutex::~mutex(v10);
  sub_34A128(v11);
  sub_34A1DC(v9);
  _Unwind_Resume(a1);
}

void *sub_FAE4B8()
{
  uint64_t v0 = __chkstk_darwin();
  sub_FB43AC((uint64_t)v9, **(void ***)v0, *(void *)(*(void *)v0 + 72), *(void *)(*(void *)v0 + 88), *(void *)(*(void *)v0 + 80), *(_WORD *)(*(void *)v0 + 20));
  sub_FB5B18((uint64_t)v9, 1);
  uint64_t v1 = *(uint64_t ***)(v0 + 8);
  unint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  if (*v1 != v3)
  {
    do
    {
      uint64_t v6 = v9;
      long long v7 = *(_OWORD *)(v0 + 16);
      uint64_t v8 = *(void *)(v0 + 32);
      sub_FAE5C8(*v2, v2[1], (uint64_t)&v6);
      sub_2980();
      sub_FAAF70(*(void *)(v4 + 24) + 112);
      v2 += 3;
    }
    while (v2 != v3);
  }
  return sub_FAE980(v9);
}

void sub_FAE58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_FAE980((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_FAE5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_FAE980((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_FAE5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_FAE980((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_FAE5C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2980();
  uint64_t v7 = v6;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = v6;
  uint64_t v17 = &v14;
  sub_2980();
  unint64_t v9 = (std::mutex *)(*(void *)(v8 + 24) + 48);
  std::mutex::lock(v9);
  sub_FAE780(&v16);
  std::mutex::unlock(v9);
  unint64_t v10 = (a2 - a1) >> 3;
  for (unint64_t i = atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
        i < v10;
        unint64_t i = atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed))
  {
    uint64_t v18 = *(void *)(a1 + 8 * i);
    sub_FB44C0(*(void *)a3, (unsigned int *)&v18, *(unsigned int **)(a3 + 8), *(int **)(a3 + 16), **(unsigned char **)(a3 + 24), (uint64_t)&v16);
    unsigned int v12 = (std::__shared_weak_count *)v17;
    if (v17 && !atomic_fetch_add((atomic_ullong *volatile)v17 + 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  ++*(void *)(v7 + 16);
  uint64_t v13 = v15;
  if (v15)
  {
    if (!atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_FAE73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::mutex::unlock(v10);
  sub_14A84((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_FAE758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FAE76C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FAE780(void *a1)
{
  unint64_t v2 = *(void *)(*a1 + 16);
  uint64_t v3 = *(void *)(*a1 + 24);
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  unint64_t v6 = (v5 - v4) >> 4;
  if (v2 >= v6)
  {
    unint64_t v7 = v2 + 1;
    uint64_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_24389C0;
    uint64_t v17 = &v8[1].__vftable;
    uint64_t v18 = v8;
    unint64_t v9 = v7 - v6;
    if (v7 <= v6)
    {
      unint64_t v10 = v8;
      if (v7 < v6)
      {
        for (uint64_t i = v4 + 16 * v7; v5 != i; v5 -= 16)
        {
          unsigned int v12 = *(std::__shared_weak_count **)(v5 - 8);
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *, unint64_t))v12->__on_zero_shared)(v12, v9);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        *(void *)(v3 + 32) = i;
        unint64_t v10 = v18;
        if (!v18) {
          goto LABEL_15;
        }
      }
    }
    else
    {
      sub_31A2E8((char **)(v3 + 24), v9, &v17);
      unint64_t v10 = v18;
      if (!v18)
      {
LABEL_15:
        unint64_t v2 = *(void *)(*a1 + 16);
        uint64_t v4 = *(void *)(*(void *)(*a1 + 24) + 24);
        goto LABEL_16;
      }
    }
    if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v13 = a1[1];
  long long v14 = *(_OWORD *)(v4 + 16 * v2);
  uint64_t v15 = *(void *)(v4 + 16 * v2 + 8);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 8);
  *(_OWORD *)uint64_t v13 = v14;
  if (v16)
  {
    if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_FAE96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_FAE980(void *a1)
{
  unint64_t v2 = (void **)(a1 + 4473);
  uint64_t v3 = (void *)a1[4496];
  if (v3)
  {
    uint64_t v4 = a1[4497];
    uint64_t v5 = v3;
    if ((void *)v4 != v3)
    {
      do
        uint64_t v4 = sub_FAB36C(v4 - 960);
      while ((void *)v4 != v3);
      uint64_t v5 = v2[23];
    }
    v2[24] = v3;
    operator delete(v5);
  }
  unint64_t v6 = v2[8];
  if (v6)
  {
    v2[9] = v6;
    operator delete(v6);
  }
  unint64_t v7 = v2[5];
  if (v7)
  {
    do
    {
      uint64_t v8 = (void *)*v7;
      operator delete(v7);
      unint64_t v7 = v8;
    }
    while (v8);
  }
  unint64_t v9 = v2[3];
  v2[3] = 0;
  if (v9) {
    operator delete(v9);
  }
  unint64_t v10 = *v2;
  if (*v2)
  {
    v2[1] = v10;
    operator delete(v10);
  }
  unint64_t v11 = (std::__shared_weak_count *)a1[3989];
  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    sub_328138((uint64_t)(a1 + 3891));
    unsigned int v12 = (std::__shared_weak_count *)a1[3407];
    if (!v12) {
      goto LABEL_20;
    }
  }
  else
  {
    sub_328138((uint64_t)(a1 + 3891));
    unsigned int v12 = (std::__shared_weak_count *)a1[3407];
    if (!v12) {
      goto LABEL_20;
    }
  }
  if (!atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_20:
  uint64_t v13 = (std::__shared_weak_count *)a1[3405];
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    long long v14 = (std::__shared_weak_count *)a1[2920];
    if (!v14) {
      goto LABEL_26;
    }
  }
  else
  {
    long long v14 = (std::__shared_weak_count *)a1[2920];
    if (!v14) {
      goto LABEL_26;
    }
  }
  if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_26:
  uint64_t v15 = (std::__shared_weak_count *)a1[2434];
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    uint64_t v16 = (std::__shared_weak_count *)a1[1949];
    if (!v16) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v16 = (std::__shared_weak_count *)a1[1949];
    if (!v16) {
      goto LABEL_32;
    }
  }
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_32:
  uint64_t v17 = (std::__shared_weak_count *)a1[1465];
  if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    sub_32834C(a1 + 486);
    uint64_t v18 = (std::__shared_weak_count *)a1[1];
    if (!v18) {
      return a1;
    }
  }
  else
  {
    sub_32834C(a1 + 486);
    uint64_t v18 = (std::__shared_weak_count *)a1[1];
    if (!v18) {
      return a1;
    }
  }
  if (atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL)) {
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  return a1;
}

void sub_FAECE0()
{
  unk_25FD12F = 16641;
  word_25FD118 = 65;
  byte_25FD147 = 1;
  byte_25FD131 = 0;
}

uint64_t sub_FAED08(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7, uint64_t a8, uint64_t a9)
{
  sub_382F04(a1, a2);
  *(_DWORD *)(a1 + 3880) = sub_29AEB4(a6);
  *(_WORD *)(a1 + 3884) = a7;
  uint64_t v17 = a2[1];
  uint64_t v48 = *a2;
  unsigned int v49 = (std::__shared_weak_count *)v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v47 = a3;
  sub_327C18(a1 + 3888, &v48);
  uint64_t v18 = v49;
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  long long v19 = (_OWORD *)(a1 + 39912);
  uint64_t v21 = *a2;
  uint64_t v20 = a2[1];
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 11712) = v21;
  uint64_t v22 = -3840;
  *(void *)(a1 + 11720) = v20;
  do
  {
    uint64_t v23 = a1 + v22;
    *(_DWORD *)(v23 + 15568) = 0;
    *(_DWORD *)(v23 + 15592) = 0;
    *(void *)(v23 + 15576) = 0;
    *(void *)(v23 + 15600) = 0;
    v22 += 48;
  }
  while (v22);
  *(_OWORD *)(a1 + 15568) = 0u;
  uint64_t v25 = *a2;
  uint64_t v24 = a2[1];
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = 0;
  *(void *)(a1 + 15584) = v25;
  *(void *)(a1 + 15592) = v24;
  do
  {
    uint64_t v27 = a1 + v26;
    *(_DWORD *)(v27 + 15600) = 0;
    *(_DWORD *)(v27 + 15624) = 0;
    *(void *)(v27 + 15608) = 0;
    *(void *)(v27 + 15632) = 0;
    v26 += 48;
  }
  while (v26 != 3840);
  *(_OWORD *)(a1 + 19440) = 0u;
  int v28 = (void **)*a2;
  *(_DWORD *)(a1 + 19456) = -1;
  if (v28) {
    LOBYTE(v28) = sub_2ABCE4(v28);
  }
  *(unsigned char *)(a1 + 19460) = (_BYTE)v28;
  sub_327FD8(a1 + 19464, a2, a7, 0);
  uint64_t v30 = *a2;
  uint64_t v29 = a2[1];
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = 0;
  *(void *)(a1 + 23352) = v30;
  *(void *)(a1 + 23360) = v29;
  uint64_t v32 = a1 + 23392;
  do
  {
    *(_DWORD *)(v32 + v31) = 0;
    *(_DWORD *)(v32 + v31 - 24) = 0;
    uint64_t v33 = a1 + v31;
    *(void *)(v33 + 23376) = 0;
    *(void *)(v33 + 23400) = 0;
    v31 += 48;
  }
  while (v31 != 3840);
  *(_DWORD *)(a1 + 27223) = 0;
  *(_OWORD *)(a1 + 27208) = 0u;
  sub_327DC8((uint64_t *)(a1 + 27232), a2, 255);
  *(void *)(a1 + 31896) = a6;
  uint64_t v34 = *a2;
  uint64_t v35 = (std::__shared_weak_count *)a2[1];
  if (v35)
  {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v36 = 0;
  *(void *)(a1 + 31904) = v34;
  *(void *)(a1 + 31912) = v35;
  uint64_t v37 = a1 + 31944;
  do
  {
    *(_DWORD *)(v37 + v36) = 0;
    *(_DWORD *)(v37 + v36 - 24) = 0;
    uint64_t v38 = a1 + v36;
    *(void *)(v38 + 31928) = 0;
    *(void *)(v38 + 31952) = 0;
    v36 += 48;
  }
  while (v36 != 3840);
  *(_OWORD *)(a1 + 35760) = 0u;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  *(_WORD *)(a1 + 35776) = *(_WORD *)a8;
  sub_F2D1FC(a1 + 35784, a8 + 8);
  *(void *)(a1 + 39928) = 0;
  *long long v19 = 0u;
  *long long v19 = *(_OWORD *)(a8 + 4136);
  *(void *)(a1 + 39928) = *(void *)(a8 + 4152);
  *(_OWORD *)(a8 + 4136) = 0u;
  *(void *)(a8 + 4152) = 0;
  uint64_t v39 = *(void *)(a8 + 4160);
  *(void *)(a1 + 39944) = a1 + 15584;
  *(void *)(a1 + 39936) = v39;
  *(void *)(a1 + 39952) = a1;
  *(void *)(a1 + 39960) = a4;
  *(void *)(a1 + 39968) = v47;
  *(void *)(a1 + 39976) = a9;
  sub_F170E0((void *)(a1 + 39984), a1 + 3888, a1 + 19464, a4);
  *(void *)(a1 + 40032) = a5;
  char v40 = sub_2ABCE4((void **)*a2);
  *(void *)(a1 + 40048) = 0;
  *(unsigned char *)(a1 + 40040) = v40;
  *(unsigned char *)(a1 + 40041) = 0;
  *(void *)(a1 + 40056) = 0;
  *(void *)(a1 + 40064) = 0;
  unint64_t v41 = sub_F78BBC((uint64_t *)(a1 + 39944));
  uint64_t v43 = *(void *)(a1 + 40048);
  uint64_t v42 = *(void *)(a1 + 40056);
  unint64_t v44 = 0xEEEEEEEEEEEEEEEFLL * ((v42 - v43) >> 6);
  if (v41 <= v44)
  {
    if (v41 < v44)
    {
      for (uint64_t i = v43 + 960 * v41; v42 != i; v42 = sub_FAB36C(v42 - 960))
        ;
      *(void *)(a1 + 40056) = i;
    }
  }
  else
  {
    sub_FB6850((uint64_t *)(a1 + 40048), v41 - v44);
  }
  return a1;
}

void sub_FAF11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, _Unwind_Exception *a19)
{
  uint64_t v22 = *(void *)(v19 + 15592);
  if (v22)
  {
    sub_20B192C(v22);
    a1 = a19;
  }
  sub_14A84(v20);
  sub_32834C(a16);
  sub_14A84(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_FAF204()
{
  uint64_t v0 = __chkstk_darwin();
  __int16 v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  uint64_t v11 = v0;
  unsigned int v12 = (uint64_t *)sub_374CE4(v9);
  uint64_t v13 = sub_3777C0(v10);
  uint64_t v14 = sub_374D14(v10);
  sub_ED6F04((uint64_t)v16, v10);
  uint64_t v20 = sub_3750CC(v10);
  sub_FAED08(v11, v12, v8, v13, v6, v14, v2, (uint64_t)v16, v4);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  sub_3A6318(v17);
  return v11;
}

void sub_FAF304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C62E9C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_FAF318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  uint64_t v4 = (void *)STACK[0x1030];
  if (STACK[0x1030])
  {
    STACK[0x1038] = (unint64_t)v4;
    operator delete(v4);
  }
  sub_3A6318(va);
  _Unwind_Resume(a1);
}

void sub_FAF340(uint64_t a1@<X0>, unsigned int *a2@<X1>, int *a3@<X2>, int *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8 = (uint64_t *)(a1 + 39944);
  unsigned int v9 = *a2;
  if (!v9) {
    goto LABEL_9;
  }
  unint64_t v10 = sub_F93238(*v8, v9, 1);
  if (!v10 || (uint64_t v11 = &v10[-*(int *)v10], *(unsigned __int16 *)v11 < 9u) || (v12 = *((unsigned __int16 *)v11 + 4)) == 0)
  {
    LODWORD(v15) = -1;
    goto LABEL_10;
  }
  uint64_t v13 = (int *)sub_F930D4((unsigned int *)&v10[v12 + *(unsigned int *)&v10[v12]], a2[1]);
  uint64_t v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 < 5u)
  {
LABEL_9:
    LODWORD(v15) = 0;
    goto LABEL_10;
  }
  uint64_t v15 = v14[2];
  if (v15) {
    LODWORD(v15) = *((unsigned __int8 *)v13 + v15);
  }
LABEL_10:
  uint64_t v16 = 0;
  unsigned int v62 = v15;
  unsigned int v17 = v15;
  unsigned int v49 = v8;
  uint64_t v18 = v8[13];
  uint64_t v19 = v18 + 960 * v15;
  *(void *)(v19 + 8) = *(void *)v19;
  *(_DWORD *)(v19 + 24) = 0;
  *(void *)(v19 + 40) = *(void *)(v19 + 32);
  *(void *)(v19 + 64) = *(void *)(v19 + 56);
  *(void *)(v19 + 88) = *(void *)(v19 + 80);
  *(void *)(v19 + 112) = *(void *)(v19 + 104);
  *(void *)(v19 + 136) = *(void *)(v19 + 128);
  *(void *)(v19 + 160) = 0;
  do
  {
    uint64_t v21 = v19 + v16;
    if (*(void *)(v19 + v16 + 192))
    {
      unint64_t v22 = *(void *)(v21 + 200);
      if (v22 >= 0x80)
      {
        uint64_t v20 = (void *)(v19 + v16);
        operator delete(*(void **)(v21 + 176));
        *(void *)(v21 + 176) = &unk_20E1710;
        v20[27] = 0;
        v20[24] = 0;
        v20[25] = 0;
        v20[23] = 0;
      }
      else if (v22)
      {
        *(void *)(v21 + 192) = 0;
        memset(*(void **)(v21 + 176), 128, v22 + 8);
        *(unsigned char *)(*(void *)(v21 + 176) + v22) = -1;
        unint64_t v23 = *(void *)(v21 + 200);
        if (v23 == 7) {
          uint64_t v24 = 6;
        }
        else {
          uint64_t v24 = v23 - (v23 >> 3);
        }
        *(void *)(v19 + v16 + 216) = v24 - *(void *)(v21 + 192);
      }
    }
    v16 += 48;
  }
  while (v16 != 768);
  uint64_t v25 = v18 + 960 * v17;
  *(void *)(v25 + 944) = 0;
  *(_DWORD *)(v25 + 952) = 0;
  LOWORD(v25) = *(_WORD *)(a1 + 3884);
  int v26 = *(_DWORD *)(a1 + 3880);
  uint64_t v27 = (void *)v49[3];
  int v28 = *a3;
  uint64_t v63 = *(void *)a2;
  *(_DWORD *)unint64_t v64 = v28;
  *(void *)&v64[4] = 0x8000000080000000;
  int v65 = 0x7FFFFFFF;
  char v66 = a5;
  __int16 v67 = v25;
  int v68 = v26;
  char v69 = 0;
  int v70 = 0x7FFFFFFF;
  sub_FA98E4(&v63, v27, a1, (uint64_t)&v51);
  unint64_t v29 = (v52 + ((unint64_t)v51 << 6) + ((unint64_t)v51 >> 2) + 2654435769u) ^ v51;
  unint64_t v30 = (v53 + (v29 << 6) + (v29 >> 2) + 2654435769u) ^ v29;
  unint64_t v31 = (v54 + (v30 << 6) + (v30 >> 2) + 2654435769u) ^ v30;
  unint64_t v32 = (v55 + (v31 << 6) + (v31 >> 2) + 2654435769u) ^ v31;
  unint64_t v33 = (v56 + (v32 << 6) + (v32 >> 2) + 2654435769u) ^ v32;
  unint64_t v34 = (v57 + (v33 << 6) + (v33 >> 2) + 2654435769u) ^ v33;
  unint64_t v35 = (v58 + (v34 << 6) + (v34 >> 2) + 2654435769u) ^ v34;
  sub_FAA4F0((uint64_t *)(*(void *)(v49[4] + 16)+ 272 * (((v59 + (v35 << 6) + (v35 >> 2) + 2654435769u) ^ v35) % *(void *)v49[4])), &v51, (uint64_t)&v63);
  if (v64[8])
  {
    uint64_t v36 = *(void *)v64;
    *(void *)a6 = v63;
    *(void *)(a6 + 8) = v36;
    if (v36) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v37 = operator new(0x30uLL);
    v37[1] = 0;
    v37[2] = 0;
    *uint64_t v37 = off_243F2A0;
    v37[4] = 0;
    v37[5] = 0;
    v37[3] = 0;
    *(void *)a6 = v37 + 3;
    *(void *)(a6 + 8) = v37;
    sub_FAF84C(a1, (unint64_t *)a2, &v62, a3, (uint64_t)a4, v57);
    sub_FB02A8(a1, &v62, *(uint64_t ***)a6);
    char v60 = *((unsigned char *)v49 + 97);
    int v61 = *a4;
    unint64_t v38 = (v52 + 2654435769 + ((unint64_t)v51 << 6) + ((unint64_t)v51 >> 2)) ^ v51;
    unint64_t v39 = (v53 + 2654435769 + (v38 << 6) + (v38 >> 2)) ^ v38;
    unint64_t v40 = (v54 + 2654435769 + (v39 << 6) + (v39 >> 2)) ^ v39;
    unint64_t v41 = (v55 + 2654435769 + (v40 << 6) + (v40 >> 2)) ^ v40;
    unint64_t v42 = (v56 + 2654435769 + (v41 << 6) + (v41 >> 2)) ^ v41;
    unint64_t v43 = (v57 + 2654435769 + (v42 << 6) + (v42 >> 2)) ^ v42;
    unint64_t v44 = (v58 + 2654435769 + (v43 << 6) + (v43 >> 2)) ^ v43;
    sub_FB7698(*(void *)(v49[4] + 16) + 272 * (((v59 + 2654435769 + (v44 << 6) + (v44 >> 2)) ^ v44) % *(void *)v49[4]), &v51, (uint64_t *)a6, *(void *)(*(void *)a6 + 16) - **(void **)a6 + 40);
  }
  unsigned int v45 = *(std::__shared_weak_count **)v64;
  if (*(void *)v64)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)v64 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_FAF818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_14A84(v14);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FAF84C(uint64_t a1, unint64_t *a2, unsigned int *a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = (void *)(a1 + 40048);
  sub_FB10D4(a1, a2, a3, 0);
  unsigned int v156 = a3;
  unsigned int v9 = *a3;
  int v158 = *a3 - 1;
  unint64_t v153 = v8;
  uint64_t v10 = *v8 + 960 * v9;
  uint64_t v11 = (_DWORD *)(v10 + 24);
  uint64_t v12 = *(unsigned int *)(v10 + 24);
  uint64_t v13 = (void *)(v10 + 128);
  uint64_t v14 = (void **)(v10 + 80);
  uint64_t v15 = *(void *)v10;
  unint64_t v151 = (uint64_t *)v10;
  unint64_t v152 = (void *)(v10 + 128);
  if (v12 != (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3)
  {
    unint64_t v150 = (unsigned int *)(v10 + 24);
    v146 = (uint64_t *)(v10 + 56);
    unsigned __int16 v147 = (uint64_t *)(v10 + 32);
    while (1)
    {
      uint64_t v20 = a6;
      *uint64_t v11 = v12 + 1;
      int v21 = -1431655765 * ((unint64_t)((unsigned char *)v14[1] - (unsigned char *)*v14) >> 2);
      unint64_t v23 = (char *)v13[1];
      unint64_t v22 = v13[2];
      if ((unint64_t)v23 < v22)
      {
        *(_DWORD *)unint64_t v23 = v21;
        uint64_t v24 = (uint64_t)(v23 + 4);
        a6 = v20;
        goto LABEL_27;
      }
      uint64_t v25 = (char *)*v13;
      uint64_t v26 = (uint64_t)&v23[-*v13];
      uint64_t v27 = v26 >> 2;
      unint64_t v28 = (v26 >> 2) + 1;
      if (v28 >> 62) {
        goto LABEL_126;
      }
      uint64_t v29 = v22 - (void)v25;
      if (v29 >> 1 > v28) {
        unint64_t v28 = v29 >> 1;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v149 = v28;
      if (v28)
      {
        if (v28 >> 62) {
          goto LABEL_124;
        }
        unint64_t v30 = operator new(4 * v28);
        unint64_t v31 = &v30[4 * v27];
        *unint64_t v31 = v21;
        uint64_t v24 = (uint64_t)(v31 + 1);
        if (v23 == v25)
        {
LABEL_19:
          uint64_t v13 = v152;
          a6 = v20;
          unint64_t v33 = v149;
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v30 = 0;
        unint64_t v31 = (_DWORD *)(4 * v27);
        *(_DWORD *)(4 * v27) = v21;
        uint64_t v24 = 4 * v27 + 4;
        if (v23 == v25) {
          goto LABEL_19;
        }
      }
      unint64_t v32 = v23 - 4 - v25;
      a6 = v20;
      unint64_t v33 = v149;
      if (v32 < 0x2C) {
        break;
      }
      unint64_t v34 = v23 - &v30[v26];
      uint64_t v13 = v152;
      if (v34 < 0x20) {
        goto LABEL_24;
      }
      uint64_t v35 = (v32 >> 2) + 1;
      uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v37 = &v23[-v36];
      unint64_t v31 = (_DWORD *)((char *)v31 - v36);
      unint64_t v38 = &v30[4 * v27 - 16];
      unint64_t v39 = v23 - 16;
      uint64_t v40 = v35 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v41 = *(_OWORD *)v39;
        *(v38 - 1) = *((_OWORD *)v39 - 1);
        *unint64_t v38 = v41;
        v38 -= 2;
        v39 -= 32;
        v40 -= 8;
      }
      while (v40);
      unint64_t v23 = v37;
      if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_24;
      }
LABEL_25:
      void *v13 = v31;
      v13[1] = v24;
      v13[2] = &v30[4 * v33];
      if (v25) {
        operator delete(v25);
      }
LABEL_27:
      v13[1] = v24;
      if (!*(unsigned char *)(a1 + 11662)
        || (unint64_t v43 = *(void *)(v15 + 8 * v12), (v44 = sub_290DEC(a1 + 7784, HIDWORD(v43), 1)) != 0)
        && (unsigned int v45 = &v44[-*(int *)v44], *(unsigned __int16 *)v45 >= 5u)
        && (uint64_t v46 = *((unsigned __int16 *)v45 + 2)) != 0
        && *(_DWORD *)&v44[v46 + *(unsigned int *)&v44[v46]] > WORD1(v43)
        && sub_295DB4(a1 + 3888, HIDWORD(v43) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v43) << 32)))
      {
        unint64_t v47 = *(void *)(v15 + 8 * v12);
        if (*v156 == 1)
        {
          sub_ED75C0(a1 + 35776, v47, 0, v147, 0);
          uint64_t v49 = *v147;
          uint64_t v48 = v151[5];
          while (1)
          {
            if (v49 == v48) {
              goto LABEL_5;
            }
            unint64_t v52 = sub_F178C0((uint64_t *)(a1 + 39984), (int **)v49, 0x3B9ACA00u, (uint64_t)a4);
            BOOL v53 = v52 == -1 || (v52 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000;
            if (!v53 && v51 != 0x7FFFFFFFFFFFFFFFLL) {
              break;
            }
LABEL_37:
            v49 += 88;
          }
          uint64_t v55 = 0;
          unint64_t v56 = ((*(void *)(v49 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v49 + 72) << 32) | (2
                                                                                               * ((*(void *)(v49 + 72) & 0xFF000000000000) == 0)))
              + (((unint64_t)*(unsigned int *)(v49 + 80) >> 14) & 0x3FFFC);
          unint64_t v57 = v56 & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v49 + 84) >> 1) & 1;
          unint64_t v157 = v57;
          uint64_t v58 = *v153 + 960 * *v156 + 176;
          unint64_t v59 = ((0x2127599BF4325C37 * (v57 ^ (v56 >> 23))) ^ ~((0x2127599BF4325C37 * (v57 ^ (v56 >> 23))) >> 47))
              + (((0x2127599BF4325C37 * (v57 ^ (v56 >> 23))) ^ ((0x2127599BF4325C37 * (v57 ^ (v56 >> 23))) >> 47)) << 21);
          unint64_t v60 = 21 * ((265 * (v59 ^ (v59 >> 24))) ^ ((265 * (v59 ^ (v59 >> 24))) >> 14));
          unint64_t v61 = 2147483649u * (v60 ^ (v60 >> 28));
          unsigned int v62 = (void *)(v58
                         + 48
                         * (((((unsigned __int16)(v60 ^ (v60 >> 28)) >> 8) ^ ((-2147483647
                                                                                              * (v60 ^ (v60 >> 28))) >> 16)) ^ ((-2147483647 * (v60 ^ (v60 >> 28))) >> 24)) & 0xF));
          unint64_t v63 = v61 >> 7;
          uint64_t v64 = v62[3];
          uint64_t v65 = 0x101010101010101 * (v61 & 0x7F);
          while (1)
          {
            unint64_t v66 = v63 & v64;
            uint64_t v67 = *(void *)(*v62 + v66);
            unint64_t v68 = ((v67 ^ v65) - 0x101010101010101) & ~(v67 ^ v65) & 0x8080808080808080;
            if (v68) {
              break;
            }
LABEL_51:
            if ((v67 & (~v67 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_54;
            }
            v55 += 8;
            unint64_t v63 = v55 + v66;
          }
          uint64_t v69 = v62[1];
          while (1)
          {
            unint64_t v70 = (v66 + (__clz(__rbit64(v68)) >> 3)) & v64;
            if (*(void *)(v69 + 16 * v70) == v57) {
              break;
            }
            v68 &= v68 - 1;
            if (!v68) {
              goto LABEL_51;
            }
          }
          if (v64 == v70)
          {
LABEL_54:
            uint64_t v71 = *v153 + 960 * *v156;
            int v72 = *(_DWORD *)(v71 + 952);
            sub_EE1844(v58, (uint64_t *)&v157, (uint64_t)&v159);
            uint64_t v73 = v160;
            uint64_t v74 = *(void *)(v159 + 8);
            if (v161)
            {
              uint64_t v75 = v74 + 16 * v160;
              *(void *)uint64_t v75 = v157;
              *(_DWORD *)(v75 + 8) = -1;
            }
            *(_DWORD *)(v74 + 16 * v73 + 8) = *(_DWORD *)(v71 + 952);
            sub_A4710(v71, &v157);
            ++*(_DWORD *)(v71 + 952);
            char v77 = v14[1];
            unsigned int v76 = v14[2];
            if (v77 >= (_DWORD *)v76)
            {
LABEL_57:
              int v78 = *v14;
              unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * (((char *)v77 - (unsigned char *)*v14) >> 2);
              unint64_t v80 = v79 + 1;
              if (v79 + 1 > 0x1555555555555555) {
                goto LABEL_125;
              }
              unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((v76 - (unsigned char *)v78) >> 2);
              if (2 * v81 > v80) {
                unint64_t v80 = 2 * v81;
              }
              if (v81 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v82 = 0x1555555555555555;
              }
              else {
                unint64_t v82 = v80;
              }
              if (v82 > 0x1555555555555555) {
                goto LABEL_124;
              }
              uint64_t v83 = 12 * v82;
              uint64_t v84 = (char *)operator new(12 * v82);
              int v85 = &v84[12 * v79];
              *(_DWORD *)int v85 = v72;
              *(void *)(v85 + 4) = v52;
              for (uint64_t i = v85; v77 != v78; *((_DWORD *)i + 2) = v88)
              {
                uint64_t v87 = *(void *)(v77 - 3);
                v77 -= 3;
                int v88 = v77[2];
                *(void *)(i - 12) = v87;
                i -= 12;
              }
              int v50 = v85 + 12;
              *uint64_t v14 = i;
              v14[1] = v85 + 12;
              v14[2] = &v84[v83];
              if (v78) {
                operator delete(v78);
              }
              goto LABEL_36;
            }
          }
          else
          {
            int v72 = *(_DWORD *)(v69 + 16 * v70 + 8);
            char v77 = v14[1];
            unsigned int v76 = v14[2];
            if (v77 >= (_DWORD *)v76) {
              goto LABEL_57;
            }
          }
          *char v77 = v72;
          *(void *)(v77 + 1) = v52;
          int v50 = (char *)(v77 + 3);
LABEL_36:
          v14[1] = v50;
          goto LABEL_37;
        }
        sub_FB08C4(a1, v47, &v158, a4, a5, a6, (uint64_t)v146);
        uint64_t v89 = *v146;
        uint64_t v90 = v151[8];
        while (2)
        {
          if (v89 == v90) {
            goto LABEL_5;
          }
          uint64_t v92 = *(void *)(v89 + 28);
          if (v92 == -1 || (v92 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000) {
            goto LABEL_73;
          }
          uint64_t v94 = 0;
          unint64_t v95 = *(void *)(v89 + 8);
          unint64_t v157 = v95;
          uint64_t v96 = *v153 + 960 * *v156 + 176;
          unint64_t v97 = ((0x2127599BF4325C37 * (v95 ^ (v95 >> 23))) ^ ~((0x2127599BF4325C37 * (v95 ^ (v95 >> 23))) >> 47))
              + (((0x2127599BF4325C37 * (v95 ^ (v95 >> 23))) ^ ((0x2127599BF4325C37 * (v95 ^ (v95 >> 23))) >> 47)) << 21);
          unint64_t v98 = 21 * ((265 * (v97 ^ (v97 >> 24))) ^ ((265 * (v97 ^ (v97 >> 24))) >> 14));
          unint64_t v99 = 2147483649u * (v98 ^ (v98 >> 28));
          unint64_t v100 = (void *)(v96
                          + 48
                          * (((((unsigned __int16)(v98 ^ (v98 >> 28)) >> 8) ^ ((-2147483647
                                                                                               * (v98 ^ (v98 >> 28))) >> 16)) ^ ((-2147483647 * (v98 ^ (v98 >> 28))) >> 24)) & 0xF));
          unint64_t v101 = v99 >> 7;
          uint64_t v102 = v100[3];
          uint64_t v103 = 0x101010101010101 * (v99 & 0x7F);
          while (1)
          {
            unint64_t v104 = v101 & v102;
            uint64_t v105 = *(void *)(*v100 + v104);
            unint64_t v106 = ((v105 ^ v103) - 0x101010101010101) & ~(v105 ^ v103) & 0x8080808080808080;
            if (v106) {
              break;
            }
LABEL_84:
            if ((v105 & (~v105 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_87;
            }
            v94 += 8;
            unint64_t v101 = v94 + v104;
          }
          uint64_t v107 = v100[1];
          while (1)
          {
            unint64_t v108 = (v104 + (__clz(__rbit64(v106)) >> 3)) & v102;
            if (*(void *)(v107 + 16 * v108) == v95) {
              break;
            }
            v106 &= v106 - 1;
            if (!v106) {
              goto LABEL_84;
            }
          }
          if (v102 == v108)
          {
LABEL_87:
            uint64_t v109 = *v153 + 960 * *v156;
            int v110 = *(_DWORD *)(v109 + 952);
            sub_EE1844(v96, (uint64_t *)&v157, (uint64_t)&v159);
            uint64_t v111 = v160;
            uint64_t v112 = *(void *)(v159 + 8);
            if (v161)
            {
              uint64_t v113 = v112 + 16 * v160;
              *(void *)uint64_t v113 = v157;
              *(_DWORD *)(v113 + 8) = -1;
            }
            *(_DWORD *)(v112 + 16 * v111 + 8) = *(_DWORD *)(v109 + 952);
            sub_A4710(v109, &v157);
            ++*(_DWORD *)(v109 + 952);
            uint64_t v92 = *(void *)(v89 + 28);
            int v115 = v14[1];
            int v114 = v14[2];
            if (v115 >= (_DWORD *)v114)
            {
LABEL_90:
              int v116 = *v14;
              unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * (((char *)v115 - (unsigned char *)*v14) >> 2);
              unint64_t v118 = v117 + 1;
              if (v117 + 1 > 0x1555555555555555) {
LABEL_125:
              }
                sub_2E00();
              unint64_t v119 = 0xAAAAAAAAAAAAAAABLL * ((v114 - (unsigned char *)v116) >> 2);
              if (2 * v119 > v118) {
                unint64_t v118 = 2 * v119;
              }
              if (v119 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v120 = 0x1555555555555555;
              }
              else {
                unint64_t v120 = v118;
              }
              if (v120 > 0x1555555555555555) {
                goto LABEL_124;
              }
              uint64_t v121 = 12 * v120;
              char v122 = (char *)operator new(12 * v120);
              __int16 v123 = &v122[12 * v117];
              *(_DWORD *)__int16 v123 = v110;
              *(void *)(v123 + 4) = v92;
              for (j = v123; v115 != v116; *((_DWORD *)j + 2) = v126)
              {
                uint64_t v125 = *(void *)(v115 - 3);
                v115 -= 3;
                int v126 = v115[2];
                *(void *)(j - 12) = v125;
                j -= 12;
              }
              unint64_t v91 = v123 + 12;
              *uint64_t v14 = j;
              v14[1] = v123 + 12;
              v14[2] = &v122[v121];
              if (v116) {
                operator delete(v116);
              }
LABEL_72:
              v14[1] = v91;
LABEL_73:
              v89 += 40;
              continue;
            }
          }
          else
          {
            int v110 = *(_DWORD *)(v107 + 16 * v108 + 8);
            int v115 = v14[1];
            int v114 = v14[2];
            if (v115 >= (_DWORD *)v114) {
              goto LABEL_90;
            }
          }
          break;
        }
        *int v115 = v110;
        *(void *)(v115 + 1) = v92;
        unint64_t v91 = (char *)(v115 + 3);
        goto LABEL_72;
      }
LABEL_5:
      uint64_t v11 = v150;
      uint64_t v12 = *v150;
      uint64_t v13 = v152;
      uint64_t v15 = *v151;
      if (v12 == (v151[1] - *v151) >> 3) {
        goto LABEL_2;
      }
    }
    uint64_t v13 = v152;
    do
    {
LABEL_24:
      int v42 = *((_DWORD *)v23 - 1);
      v23 -= 4;
      *--unint64_t v31 = v42;
    }
    while (v23 != v25);
    goto LABEL_25;
  }
LABEL_2:
  int v16 = -1431655765 * ((unint64_t)((unsigned char *)v14[1] - (unsigned char *)*v14) >> 2);
  uint64_t v18 = (char *)v13[1];
  unint64_t v17 = v13[2];
  if ((unint64_t)v18 < v17)
  {
    *(_DWORD *)uint64_t v18 = v16;
    uint64_t v19 = (uint64_t)(v18 + 4);
    goto LABEL_120;
  }
  long long v127 = (char *)*v13;
  uint64_t v128 = (uint64_t)&v18[-*v13];
  uint64_t v129 = v128 >> 2;
  unint64_t v130 = (v128 >> 2) + 1;
  if (v130 >> 62) {
LABEL_126:
  }
    sub_2E00();
  uint64_t v131 = v17 - (void)v127;
  if (v131 >> 1 > v130) {
    unint64_t v130 = v131 >> 1;
  }
  if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v132 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v132 = v130;
  }
  if (!v132)
  {
    unsigned __int8 v133 = 0;
    unsigned __int16 v134 = (_DWORD *)(4 * v129);
    unsigned int v135 = 0;
    *(_DWORD *)(4 * v129) = v16;
    uint64_t v19 = 4 * v129 + 4;
    int64_t v136 = v18 - v127;
    if (v18 != v127) {
      goto LABEL_112;
    }
LABEL_122:
    uint64_t v13 = v152;
    *unint64_t v152 = v134;
    v152[1] = v19;
    v152[2] = v135;
    if (!v127) {
      goto LABEL_120;
    }
    goto LABEL_119;
  }
  if (v132 >> 62) {
LABEL_124:
  }
    sub_188D718();
  unsigned __int8 v133 = operator new(4 * v132);
  unsigned __int16 v134 = &v133[4 * v129];
  unsigned int v135 = &v133[4 * v132];
  _DWORD *v134 = v16;
  uint64_t v19 = (uint64_t)(v134 + 1);
  int64_t v136 = v18 - v127;
  if (v18 == v127) {
    goto LABEL_122;
  }
LABEL_112:
  unint64_t v137 = v136 - 4;
  uint64_t v13 = v152;
  if (v137 < 0x2C) {
    goto LABEL_129;
  }
  if ((unint64_t)(v18 - v133 - v128) < 0x20) {
    goto LABEL_129;
  }
  uint64_t v138 = (v137 >> 2) + 1;
  uint64_t v139 = 4 * (v138 & 0x7FFFFFFFFFFFFFF8);
  char v140 = &v18[-v139];
  unsigned __int16 v134 = (_DWORD *)((char *)v134 - v139);
  __int16 v141 = &v133[4 * v129 - 16];
  int v142 = v18 - 16;
  uint64_t v143 = v138 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v144 = *(_OWORD *)v142;
    *(v141 - 1) = *((_OWORD *)v142 - 1);
    _OWORD *v141 = v144;
    v141 -= 2;
    v142 -= 32;
    v143 -= 8;
  }
  while (v143);
  uint64_t v18 = v140;
  if (v138 != (v138 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_129:
    do
    {
      int v145 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *--unsigned __int16 v134 = v145;
    }
    while (v18 != v127);
  }
  *unint64_t v152 = v134;
  v152[1] = v19;
  v152[2] = v135;
  if (v127) {
LABEL_119:
  }
    operator delete(v127);
LABEL_120:
  v13[1] = v19;
}

void sub_FB02A8(uint64_t a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v5 = (void *)(a1 + 40048);
  uint64_t v6 = *(void *)(a1 + 40048) + 960 * *a2;
  uint64_t v8 = *(void *)(v6 + 128);
  uint64_t v7 = v6 + 128;
  uint64_t v93 = *(unsigned int *)(v7 + 820);
  int v9 = *(_DWORD *)(v7 + 816);
  uint64_t v11 = (void **)(v7 - 24);
  uint64_t v10 = *(void *)(v7 - 24);
  uint64_t v12 = (void *)(v7 + 24);
  unint64_t v13 = (*(void *)(v7 - 16) - v10) >> 3;
  unint64_t v92 = ((*(void *)(v7 + 8) - v8) >> 2) - 1;
  if (v92 <= v13)
  {
    if (v92 < v13) {
      *(void *)(v7 - 16) = v10 + 8 * v92;
    }
  }
  else
  {
    sub_FB7FAC((char **)(v7 - 24), v92 - v13);
  }
  unsigned int v14 = v9 + v93;
  sub_A3E96C(v7 + 24, v92, 0);
  unint64_t v15 = (*(_DWORD *)(*v5 + 960 * *a2 + 944) * v93);
  int v16 = *a3;
  if (v15 > a3[2] - *a3)
  {
    unint64_t v17 = a3[1];
    uint64_t v18 = 8 * v15;
    uint64_t v19 = (char *)operator new(8 * v15);
    uint64_t v20 = (char *)v17 - (char *)v16;
    int v21 = &v19[((char *)v17 - (char *)v16) & 0xFFFFFFFFFFFFFFF8];
    unint64_t v22 = v21;
    if (v17 == v16) {
      goto LABEL_14;
    }
    if ((unint64_t)(v20 - 8) >= 0x58)
    {
      unint64_t v22 = &v19[((char *)v17 - (char *)v16) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)((char *)v17 - (v20 & 0xFFFFFFFFFFFFFFF8) - v19) >= 0x20)
      {
        uint64_t v23 = v20 >> 3;
        unint64_t v24 = ((unint64_t)(v20 - 8) >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v26 = (char *)&v17[v25 / 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = &v21[-v25];
        uint64_t v27 = &v19[8 * v23 - 16];
        unint64_t v28 = (long long *)(v17 - 2);
        uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v30 = *v28;
          *((_OWORD *)v27 - 1) = *(v28 - 1);
          *(_OWORD *)uint64_t v27 = v30;
          v27 -= 32;
          v28 -= 2;
          v29 -= 4;
        }
        while (v29);
        unint64_t v17 = (uint64_t *)v26;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_14:
          *a3 = (uint64_t *)v22;
          a3[1] = (uint64_t *)v21;
          a3[2] = (uint64_t *)&v19[v18];
          if (v16) {
            operator delete(v16);
          }
          goto LABEL_16;
        }
      }
    }
    else
    {
      unint64_t v22 = &v19[((char *)v17 - (char *)v16) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v31 = *--v17;
      *((void *)v22 - 1) = v31;
      v22 -= 8;
    }
    while (v17 != v16);
    goto LABEL_14;
  }
LABEL_16:
  if (v93 <= v14) {
    int v32 = v9 + v93;
  }
  else {
    int v32 = v93;
  }
  int v91 = v32;
  if (v93 < v14)
  {
    unint64_t v33 = (void *)(v7 - 48);
    if (v14 <= v92) {
      int v34 = v92;
    }
    else {
      int v34 = v9 + v93;
    }
    unsigned int v94 = v93;
    unint64_t v95 = a3;
    uint64_t v89 = (void *)(v7 + 24);
    uint64_t v90 = v7;
    int v88 = v34;
    while (1)
    {
      uint64_t v35 = (unsigned char *)v11[1] - (unsigned char *)*v11;
      if (v35 >= 1) {
        memset_pattern16(*v11, &xmmword_20B8FC0, 8 * (((unint64_t)v35 >> 3) - ((unint64_t)v35 > 7)) + 8);
      }
      unsigned int v36 = *(_DWORD *)(*(void *)v7 + 4 * v94++);
      unsigned int v37 = *(_DWORD *)(*(void *)v7 + 4 * v94);
      BOOL v38 = v36 >= v37;
      if (v36 > v37) {
        unsigned int v37 = v36;
      }
      if (!v38)
      {
        do
        {
          unint64_t v63 = (unsigned int *)(*v33 + 12 * v36);
          *((void *)*v11 + *v63) = *(void *)(v63 + 1);
          unint64_t v64 = *v63;
          if (v64 >= v14) {
            *(void *)(*v12 + ((v64 >> 3) & 0x1FFFFFF8)) |= 1 << v64;
          }
          ++v36;
        }
        while (v37 != v36);
      }
      if (v14 < v92)
      {
        char v39 = 0;
        unsigned int v40 = v14;
        while (1)
        {
          uint64_t v41 = v40;
          uint64_t v42 = *(void *)(*v12 + 8 * ((unint64_t)v40 >> 6));
          if ((v42 & (1 << v40)) != 0)
          {
            *(void *)(*v12 + 8 * ((unint64_t)v40 >> 6)) = v42 & ~(1 << v40);
            unsigned int v43 = *(_DWORD *)(*(void *)v7 + 4 * v40++);
            unsigned int v44 = *(_DWORD *)(*(void *)v7 + 4 * v40);
            BOOL v45 = v43 >= v44;
            if (v43 > v44) {
              unsigned int v44 = v43;
            }
            if (!v45)
            {
              uint64_t v46 = (char *)*v11;
              do
              {
                unint64_t v47 = (unsigned int *)(*v33 + 12 * v43);
                uint64_t v48 = &v46[8 * v41];
                int v49 = *(_DWORD *)v48;
                int v50 = *((_DWORD *)v48 + 1);
                unint64_t v51 = *v47;
                uint64_t v52 = v47[1] + v49;
                uint64_t v53 = v47[2] + v50;
                int v54 = (unsigned int *)((char *)*v11 + 8 * v51);
                unsigned int v55 = *v54;
                if (*v54 == -1
                  || ((v56 = v54[1], v56 != 0x7FFFFFFF) ? (BOOL v57 = v52 >= v55) : (BOOL v57 = 0),
                      !v57 || (v55 >= v52 ? (BOOL v58 = (int)v53 < v56) : (BOOL v58 = 0), v58)))
                {
                  *(void *)int v54 = (v53 << 32) | v52;
                  if (v51 >= v14)
                  {
                    char v39 = 1;
                    *(void *)(*v12 + ((v51 >> 3) & 0x1FFFFFF8)) |= 1 << v51;
                  }
                }
                ++v43;
              }
              while (v44 != v43);
            }
          }
          else
          {
            ++v40;
          }
          char v59 = v39;
          if (v40 == v34)
          {
            char v39 = 0;
            unsigned int v40 = v14;
            if ((v59 & 1) == 0) {
              break;
            }
          }
        }
      }
      if (v93) {
        break;
      }
LABEL_24:
      uint64_t v12 = v89;
      uint64_t v7 = v90;
      int v34 = v88;
      if (v94 == v91) {
        goto LABEL_93;
      }
    }
    unint64_t v60 = (unsigned int *)*v11;
    uint64_t v61 = (uint64_t)*v11 + 8 * v93;
    unsigned int v62 = a3[1];
    uint64_t v96 = (unsigned int *)v61;
    while (1)
    {
      while (1)
      {
        unsigned int v65 = v60[1];
        BOOL v66 = *v60 != -1;
        BOOL v67 = v65 != 0x7FFFFFFF;
        uint64_t v68 = v66 && v67 ? *v60 : 0xFFFFFFFFLL;
        uint64_t v69 = v66 && v67 ? v65 : 0;
        unint64_t v70 = (unint64_t)a3[2];
        if ((unint64_t)v62 >= v70) {
          break;
        }
        *v62++ = v68 | (v69 << 32);
        a3[1] = v62;
        v60 += 2;
        if (v60 == (unsigned int *)v61) {
          goto LABEL_24;
        }
      }
      uint64_t v71 = *a3;
      uint64_t v72 = (char *)v62 - (char *)*a3;
      uint64_t v73 = v72 >> 3;
      unint64_t v74 = (v72 >> 3) + 1;
      if (v74 >> 61) {
        sub_2E00();
      }
      uint64_t v75 = v70 - (void)v71;
      if (v75 >> 2 > v74) {
        unint64_t v74 = v75 >> 2;
      }
      if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v97 = v74;
      if (v74)
      {
        if (v74 >> 61) {
          sub_188D718();
        }
        unsigned int v76 = operator new(8 * v74);
        char v77 = (uint64_t *)&v76[8 * v73];
        *char v77 = v68 | (v69 << 32);
        uint64_t v78 = (uint64_t)(v77 + 1);
        if (v62 == v71)
        {
LABEL_84:
          a3 = v95;
          *unint64_t v95 = v77;
          v95[1] = (uint64_t *)v78;
          v95[2] = (uint64_t *)&v76[8 * v97];
          if (!v62) {
            goto LABEL_81;
          }
LABEL_80:
          operator delete(v62);
          goto LABEL_81;
        }
      }
      else
      {
        unsigned int v76 = 0;
        char v77 = (uint64_t *)(8 * v73);
        *(void *)(8 * v73) = v68 | (v69 << 32);
        uint64_t v78 = 8 * v73 + 8;
        if (v62 == v71) {
          goto LABEL_84;
        }
      }
      unint64_t v79 = (char *)(v62 - 1) - (char *)v71;
      if (v79 < 0x168
        || &v76[v72 - 8 - (v79 & 0xFFFFFFFFFFFFFFF8)] > &v76[v72 - 8]
        || (uint64_t *)((char *)v62 - (v79 & 0xFFFFFFFFFFFFFFF8) - 8) > v62 - 1
        || (unint64_t)((char *)v62 - v76 - v72) < 0x20)
      {
        break;
      }
      uint64_t v82 = (v79 >> 3) + 1;
      uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v80 = &v62[v83 / 0xFFFFFFFFFFFFFFF8];
      char v77 = (uint64_t *)((char *)v77 - v83);
      uint64_t v84 = &v76[8 * v73 - 16];
      int v85 = v62 - 2;
      uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v87 = *(_OWORD *)v85;
        *(v84 - 1) = *((_OWORD *)v85 - 1);
        *uint64_t v84 = v87;
        v84 -= 2;
        v85 -= 4;
        v86 -= 4;
      }
      while (v86);
      a3 = v95;
      if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_78;
      }
LABEL_79:
      unsigned int v62 = *a3;
      *a3 = v77;
      a3[1] = (uint64_t *)v78;
      a3[2] = (uint64_t *)&v76[8 * v97];
      if (v62) {
        goto LABEL_80;
      }
LABEL_81:
      uint64_t v61 = (uint64_t)v96;
      a3[1] = (uint64_t *)v78;
      v60 += 2;
      unsigned int v62 = (uint64_t *)v78;
      if (v60 == v96) {
        goto LABEL_24;
      }
    }
    unint64_t v80 = v62;
    a3 = v95;
    do
    {
LABEL_78:
      uint64_t v81 = *--v80;
      *--char v77 = v81;
    }
    while (v80 != v71);
    goto LABEL_79;
  }
LABEL_93:

  sub_FB1414((uint64_t)a3);
}

uint64_t sub_FB08AC(uint64_t result, int a2)
{
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 1;
  }
  *(unsigned char *)(result + 40041) = v2;
  return result;
}

void sub_FB08C4(uint64_t a1, unint64_t a2, _DWORD *a3, int *a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v12 = (uint64_t *)(a1 + 39944);
  *(void *)(a7 + 8) = *(void *)a7;
  unint64_t v13 = sub_F968AC(*(void *)(a1 + 39944), HIDWORD(a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(a2) << 32), (a2 & 2) == 0, a3);
  unint64_t v123 = v13;
  unsigned int v14 = v13;
  unint64_t v15 = HIDWORD(v13);
  if (v13) {
    BOOL v16 = HIDWORD(v13) == -1;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t v17 = v13;
    uint64_t v18 = sub_F96DE8(v12[1], v13, 1);
    if (v18
      && (uint64_t v19 = &v18[-*(int *)v18], *(unsigned __int16 *)v19 >= 5u)
      && (uint64_t v20 = *((unsigned __int16 *)v19 + 2)) != 0
      && (int v21 = &v18[v20 + *(unsigned int *)&v18[v20]], *(_DWORD *)v21 > v15)
      && (unint64_t v22 = &v21[4 * v15 + 4 + *(unsigned int *)&v21[4 * v15 + 4]],
          uint64_t v23 = &v22[-*(int *)v22],
          *(unsigned __int16 *)v23 >= 9u)
      && (uint64_t v24 = *((unsigned __int16 *)v23 + 4)) != 0)
    {
      int v25 = *(_DWORD *)&v22[v24 + *(unsigned int *)&v22[v24]];
      uint64_t v26 = sub_F96DE8(v12[1], v14, 1);
      if (!v26) {
        return;
      }
    }
    else
    {
      int v25 = 0;
      uint64_t v26 = sub_F96DE8(v12[1], v14, 1);
      if (!v26) {
        return;
      }
    }
    uint64_t v27 = &v26[-*(int *)v26];
    if (*(unsigned __int16 *)v27 >= 5u)
    {
      uint64_t v28 = *((unsigned __int16 *)v27 + 2);
      if (v28)
      {
        uint64_t v29 = &v26[v28 + *(unsigned int *)&v26[v28]];
        if (*(_DWORD *)v29 > v15)
        {
          long long v30 = &v29[4 * v15 + 4 + *(unsigned int *)&v29[4 * v15 + 4]];
          uint64_t v31 = &v30[-*(int *)v30];
          if (*(unsigned __int16 *)v31 >= 0xBu)
          {
            uint64_t v32 = *((unsigned __int16 *)v31 + 5);
            if (v32)
            {
              if (v25)
              {
                int v33 = *(_DWORD *)&v30[v32 + *(unsigned int *)&v30[v32]];
                if (v33)
                {
                  __int16 v34 = *(_WORD *)(a1 + 3884);
                  int v35 = *(_DWORD *)(a1 + 3880);
                  unsigned int v36 = (void *)v12[3];
                  int v37 = *a4;
                  uint64_t v124 = (void *)v17;
                  *(_DWORD *)uint64_t v125 = v37;
                  *(void *)&v125[4] = 0x8000000080000000;
                  int v126 = 0x7FFFFFFF;
                  char v127 = a6;
                  __int16 v128 = v34;
                  int v129 = v35;
                  char v130 = 0;
                  int v131 = 0x7FFFFFFF;
                  sub_FA98E4((uint64_t *)&v124, v36, a1, (uint64_t)&v115);
                  if (!sub_F06620(v12[3], v116)) {
                    goto LABEL_32;
                  }
                  if (v120) {
                    goto LABEL_32;
                  }
                  unint64_t v38 = v115;
                  unsigned int v39 = v116;
                  int v40 = v121;
                  uint64_t v41 = sub_383034(a1, v115, 1);
                  if (!v41) {
                    goto LABEL_32;
                  }
                  uint64_t v42 = &v41[-*(int *)v41];
                  if (*(unsigned __int16 *)v42 >= 0xFu
                    && *((_WORD *)v42 + 7)
                    && (unsigned int v43 = &v41[*((unsigned __int16 *)v42 + 7)
                                 + *(unsigned int *)&v41[*((unsigned __int16 *)v42 + 7)]],
                        *(_DWORD *)v43 > HIDWORD(v38))
                    && (unsigned int v44 = &v43[4 * HIDWORD(v38) + 4 + *(unsigned int *)&v43[4 * HIDWORD(v38) + 4]],
                        BOOL v45 = &v44[-*(int *)v44],
                        *(unsigned __int16 *)v45 >= 5u)
                    && (uint64_t v46 = *((unsigned __int16 *)v45 + 2)) != 0
                    && (unint64_t v47 = (unsigned int *)&v44[v46 + *(unsigned int *)&v44[v46]],
                        unsigned int v48 = v39 + *(_DWORD *)(a1 + 3872) * v40,
                        v48 < *v47)
                    && v47[v48 + 1] != -1)
                  {
                    sub_FA9BFC(a1, v123, a2, v116, v121, (char **)a7);
                  }
                  else
                  {
LABEL_32:
                    unint64_t v49 = (HIDWORD(v115)
                         + ((unint64_t)v115 << 6)
                         + ((unint64_t)v115 >> 2)
                         + 2654435769u) ^ v115;
                    unint64_t v50 = (v116 + (v49 << 6) + (v49 >> 2) + 2654435769u) ^ v49;
                    unint64_t v51 = (v117 + (v50 << 6) + (v50 >> 2) + 2654435769u) ^ v50;
                    unint64_t v52 = (v118 + (v51 << 6) + (v51 >> 2) + 2654435769u) ^ v51;
                    unint64_t v53 = (v119 + (v52 << 6) + (v52 >> 2) + 2654435769u) ^ v52;
                    unint64_t v54 = (v120 + (v53 << 6) + (v53 >> 2) + 2654435769u) ^ v53;
                    unint64_t v55 = (v121 + (v54 << 6) + (v54 >> 2) + 2654435769u) ^ v54;
                    sub_FAA4F0((uint64_t *)(*(void *)(v12[4] + 16)+ 272 * (((v122 + (v55 << 6) + (v55 >> 2) + 2654435769u) ^ v55) % *(void *)v12[4])), (unsigned int *)&v115, (uint64_t)&v124);
                    if (v125[8])
                    {
                      uint64_t v113 = v124;
                      int v114 = *(std::__shared_weak_count **)v125;
                      if (*(void *)v125) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)v125 + 8), 1uLL, memory_order_relaxed);
                      }
                    }
                    else
                    {
                      sub_FAF340(&v113, a1, &v123, a4, a5, v120);
                    }
                    unint64_t v56 = v123;
                    BOOL v57 = sub_F96DE8(a1, v123, 1);
                    if (!v57) {
                      goto LABEL_50;
                    }
                    BOOL v58 = &v57[-*(int *)v57];
                    if (*(unsigned __int16 *)v58 < 5u) {
                      goto LABEL_50;
                    }
                    if (!*((_WORD *)v58 + 2)) {
                      goto LABEL_50;
                    }
                    char v59 = &v57[*((unsigned __int16 *)v58 + 2) + *(unsigned int *)&v57[*((unsigned __int16 *)v58 + 2)]];
                    if (*(_DWORD *)v59 <= HIDWORD(v56)) {
                      goto LABEL_50;
                    }
                    unint64_t v60 = &v59[4 * HIDWORD(v56) + 4 + *(unsigned int *)&v59[4 * HIDWORD(v56) + 4]];
                    uint64_t v61 = &v60[-*(int *)v60];
                    if (*(unsigned __int16 *)v61 < 9u) {
                      goto LABEL_50;
                    }
                    uint64_t v62 = *((unsigned __int16 *)v61 + 4);
                    if (!v62) {
                      goto LABEL_50;
                    }
                    unint64_t v63 = &v60[v62 + *(unsigned int *)&v60[v62]];
                    unsigned int v66 = *(_DWORD *)v63;
                    unint64_t v64 = v63 + 4;
                    unint64_t v65 = v66;
                    BOOL v67 = &v64[8 * v66];
                    uint64_t v68 = v64;
                    while (v65)
                    {
                      uint64_t v69 = (unint64_t *)&v68[(4 * v65) & 0x7FFFFFFF8];
                      unint64_t v71 = *v69;
                      unint64_t v70 = (char *)(v69 + 1);
                      unint64_t v72 = v65 >> 1;
                      v65 += ~(v65 >> 1);
                      if (v71 >= a2) {
                        unint64_t v65 = v72;
                      }
                      else {
                        uint64_t v68 = v70;
                      }
                    }
                    if (v68 != v67 && *(void *)v68 == a2) {
                      unint64_t v73 = (unint64_t)(v68 - v64) >> 3;
                    }
                    else {
LABEL_50:
                    }
                      LOWORD(v73) = -1;
                    unint64_t v74 = v123;
                    uint64_t v75 = sub_F96DE8(a1, v123, 1);
                    if (v75)
                    {
                      unsigned int v76 = &v75[-*(int *)v75];
                      if (*(unsigned __int16 *)v76 >= 5u)
                      {
                        if (*((_WORD *)v76 + 2))
                        {
                          char v77 = &v75[*((unsigned __int16 *)v76 + 2)
                                   + *(unsigned int *)&v75[*((unsigned __int16 *)v76 + 2)]];
                          if (*(_DWORD *)v77 > HIDWORD(v74))
                          {
                            uint64_t v78 = &v77[4 * HIDWORD(v74) + 4 + *(unsigned int *)&v77[4 * HIDWORD(v74) + 4]];
                            unint64_t v79 = &v78[-*(int *)v78];
                            if (*(unsigned __int16 *)v79 >= 0xBu)
                            {
                              uint64_t v80 = *((unsigned __int16 *)v79 + 5);
                              if (v80)
                              {
                                uint64_t v81 = &v78[v80 + *(unsigned int *)&v78[v80]];
                                unsigned int v84 = *(_DWORD *)v81;
                                uint64_t v83 = (uint64_t *)(v81 + 4);
                                uint64_t v82 = v84;
                                if (v84)
                                {
                                  int v85 = 0;
                                  unsigned int v86 = v33 * (unsigned __int16)v73;
                                  long long v87 = &v83[v82];
                                  __int16 v112 = v73;
                                  uint64_t v109 = v87;
                                  do
                                  {
                                    while (1)
                                    {
                                      uint64_t v88 = v86;
                                      uint64_t v89 = *(unsigned int *)(*v113 + 8 * v86);
                                      unint64_t v90 = v89 == -1
                                          ? 0x7FFFFFFF00000000
                                          : (unint64_t)*(unsigned int *)(*v113 + 8 * v88 + 4) << 32;
                                      uint64_t v91 = *v83;
                                      unint64_t v92 = v90 | v89;
                                      unint64_t v94 = *(void *)(a7 + 8);
                                      unint64_t v93 = *(void *)(a7 + 16);
                                      if (v94 >= v93) {
                                        break;
                                      }
                                      *(void *)unint64_t v94 = a2;
                                      *(void *)(v94 + 8) = v91;
                                      *(void *)(v94 + 16) = v123;
                                      *(_WORD *)(v94 + 24) = v73;
                                      *(_WORD *)(v94 + 26) = v85;
                                      *(void *)(v94 + 28) = v92;
                                      *(void *)(a7 + 8) = v94 + 40;
                                      unsigned int v86 = v88 + 1;
                                      ++v85;
                                      if (++v83 == v87) {
                                        goto LABEL_79;
                                      }
                                    }
                                    unint64_t v95 = *(char **)a7;
                                    unint64_t v96 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v94 - *(void *)a7) >> 3);
                                    unint64_t v97 = v96 + 1;
                                    if (v96 + 1 > 0x666666666666666) {
                                      sub_2E00();
                                    }
                                    int v110 = v88;
                                    unint64_t v98 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v93 - (void)v95) >> 3);
                                    if (2 * v98 > v97) {
                                      unint64_t v97 = 2 * v98;
                                    }
                                    if (v98 >= 0x333333333333333) {
                                      unint64_t v99 = 0x666666666666666;
                                    }
                                    else {
                                      unint64_t v99 = v97;
                                    }
                                    if (v99 > 0x666666666666666) {
                                      sub_188D718();
                                    }
                                    unint64_t v100 = (char *)operator new(40 * v99);
                                    unint64_t v101 = &v100[40 * v96];
                                    *(void *)unint64_t v101 = a2;
                                    *((void *)v101 + 1) = v91;
                                    *((void *)v101 + 2) = v123;
                                    *((_WORD *)v101 + 12) = v112;
                                    *((_WORD *)v101 + 13) = v85;
                                    *(void *)(v101 + 28) = v92;
                                    if ((char *)v94 == v95)
                                    {
                                      uint64_t v105 = &v100[40 * v96];
                                    }
                                    else
                                    {
                                      uint64_t v102 = &v100[40 * v96];
                                      do
                                      {
                                        long long v103 = *(_OWORD *)(v94 - 40);
                                        long long v104 = *(_OWORD *)(v94 - 24);
                                        uint64_t v105 = v102 - 40;
                                        *((_DWORD *)v102 - 2) = *(_DWORD *)(v94 - 8);
                                        *(_OWORD *)(v102 - 24) = v104;
                                        *(_OWORD *)(v102 - 40) = v103;
                                        v94 -= 40;
                                        v102 -= 40;
                                      }
                                      while ((char *)v94 != v95);
                                    }
                                    unint64_t v106 = v101 + 40;
                                    *(void *)a7 = v105;
                                    *(void *)(a7 + 8) = v101 + 40;
                                    *(void *)(a7 + 16) = &v100[40 * v99];
                                    if (v95) {
                                      operator delete(v95);
                                    }
                                    LOWORD(v73) = v112;
                                    long long v87 = v109;
                                    *(void *)(a7 + 8) = v106;
                                    unsigned int v86 = v110 + 1;
                                    ++v85;
                                    ++v83;
                                  }
                                  while (v83 != v109);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
LABEL_79:
                    uint64_t v107 = v114;
                    if (v114 && !atomic_fetch_add(&v114->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                      std::__shared_weak_count::__release_weak(v107);
                    }
                    unint64_t v108 = *(std::__shared_weak_count **)v125;
                    if (*(void *)v125)
                    {
                      if (!atomic_fetch_add((atomic_ullong *volatile)(*(void *)v125 + 8), 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                        std::__shared_weak_count::__release_weak(v108);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_FB1098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_14A84((uint64_t)va1);
  _Unwind_Resume(a1);
}

int *sub_FB10D4(uint64_t a1, unint64_t *a2, unsigned int *a3, char a4)
{
  uint64_t v7 = (uint64_t *)(a1 + 39952);
  uint64_t v8 = *(void *)(a1 + 40048) + 960 * *a3;
  unint64_t v9 = *a2;
  uint64_t v10 = sub_F96DE8(*(void *)(a1 + 39952), *a2, 1);
  char v41 = a4;
  if (v10
    && (uint64_t v11 = &v10[-*(int *)v10], *(unsigned __int16 *)v11 >= 5u)
    && *((_WORD *)v11 + 2)
    && (uint64_t v12 = &v10[*((unsigned __int16 *)v11 + 2) + *(unsigned int *)&v10[*((unsigned __int16 *)v11 + 2)]],
        *(_DWORD *)v12 > HIDWORD(v9))
    && (uint64_t v13 = &v12[4 * HIDWORD(v9) + 4 + *(unsigned int *)&v12[4 * HIDWORD(v9) + 4]],
        unsigned int v14 = &v13[-*(int *)v13],
        *(unsigned __int16 *)v14 >= 0xBu)
    && (uint64_t v15 = *((unsigned __int16 *)v14 + 5)) != 0)
  {
    BOOL v16 = &v13[v15];
    uint64_t v17 = *(unsigned int *)v16;
    uint64_t v18 = (uint64_t *)&v16[v17 + 4];
    uint64_t v19 = &v18[*(unsigned int *)&v16[v17]];
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v18 = 0;
  }
  uint64_t v20 = (unsigned int *)(v8 + 952);
  *(_DWORD *)(v7[12] + 960 * *a3 + 948) = (unint64_t)((char *)v19 - (char *)v18) >> 3;
  if (v19 == v18)
  {
    unsigned int v21 = *v20;
  }
  else
  {
    do
    {
      uint64_t v43 = *v18;
      sub_EE1844(v8 + 176, &v43, (uint64_t)&v44);
      uint64_t v22 = v45;
      uint64_t v23 = *(void *)(v44 + 8);
      if (v46)
      {
        uint64_t v24 = v23 + 16 * v45;
        *(void *)uint64_t v24 = v43;
        *(_DWORD *)(v24 + 8) = -1;
      }
      *(_DWORD *)(v23 + 16 * v22 + 8) = *v20;
      unsigned int v21 = *v20 + 1;
      *uint64_t v20 = v21;
      ++v18;
    }
    while (v18 != v19);
  }
  LODWORD(v44) = 0;
  unint64_t v25 = (uint64_t)(*(void *)(v8 + 136) - *(void *)(v8 + 128)) >> 2;
  if (v21 <= v25)
  {
    if (v21 < v25) {
      *(void *)(v8 + 136) = *(void *)(v8 + 128) + 4 * v21;
    }
  }
  else
  {
    sub_500DC(v8 + 128, v21 - v25, (const float *)&v44);
  }
  unint64_t v26 = *a2;
  uint64_t result = (int *)sub_F96DE8(*v7, *a2, 1);
  if (result
    && (uint64_t v28 = (unsigned __int16 *)((char *)result - *result), *v28 >= 5u)
    && v28[2]
    && (uint64_t v29 = (int *)((char *)result + v28[2] + *(unsigned int *)((char *)result + v28[2])), *v29 > HIDWORD(v26))
    && (long long v30 = (_DWORD *)((char *)&v29[HIDWORD(v26) + 1] + v29[HIDWORD(v26) + 1]),
        uint64_t v31 = (unsigned __int16 *)((char *)v30 - *v30),
        *v31 >= 9u)
    && (uint64_t v32 = v31[4]) != 0)
  {
    int v33 = (unsigned int *)((char *)v30 + v32);
    uint64_t v34 = *v33;
    int v35 = (uint64_t *)((char *)v33 + v34 + 4);
    unsigned int v36 = &v35[*(unsigned int *)((char *)v33 + v34)];
  }
  else
  {
    unsigned int v36 = 0;
    int v35 = 0;
  }
  *(_DWORD *)(v7[12] + 960 * *a3 + 944) = (unint64_t)((char *)v36 - (char *)v35) >> 3;
  if (v36 != v35)
  {
    if (v41)
    {
      do
      {
        uint64_t v43 = 0;
        uint64_t v42 = *v35;
        uint64_t v43 = v42;
        sub_EE1844(v8 + 176, &v42, (uint64_t)&v44);
        uint64_t v38 = v45;
        uint64_t v39 = *(void *)(v44 + 8);
        if (v46)
        {
          uint64_t v40 = v39 + 16 * v45;
          *(void *)uint64_t v40 = v42;
          *(_DWORD *)(v40 + 8) = -1;
        }
        *(_DWORD *)(v39 + 16 * v38 + 8) = *v20;
        uint64_t result = (int *)sub_A4710(v8, &v43);
        ++*v20;
        ++v35;
      }
      while (v35 != v36);
    }
    else
    {
      do
      {
        uint64_t v43 = 0;
        uint64_t v37 = *v35++;
        uint64_t v43 = v37;
        uint64_t result = (int *)sub_A4710(v8, &v43);
        ++*v20;
      }
      while (v35 != v36);
    }
  }
  return result;
}

void sub_FB1414(uint64_t a1)
{
  __int16 v1 = *(unsigned char **)(a1 + 8);
  char v2 = *(unsigned char **)a1;
  uint64_t v3 = (uint64_t)&v1[-*(void *)a1];
  uint64_t v4 = v3 >> 3;
  if (v3 >> 3 >= (unint64_t)((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) {
    return;
  }
  int64_t v6 = v1 - v2;
  if (v1 == v2)
  {
    *(void *)a1 = 8 * v4;
    *(void *)(a1 + 8) = 8 * v4;
    *(void *)(a1 + 16) = 8 * v4;
    if (!v2) {
      return;
    }
    goto LABEL_14;
  }
  if (v3 < 0) {
    sub_188D718();
  }
  uint64_t v7 = (char *)operator new((size_t)&v1[-*(void *)a1]);
  uint64_t v8 = &v7[8 * v4];
  if ((unint64_t)(v6 - 8) < 0x58)
  {
    unint64_t v9 = &v7[8 * v4];
    do
    {
LABEL_12:
      uint64_t v17 = *((void *)v1 - 1);
      v1 -= 8;
      *((void *)v9 - 1) = v17;
      v9 -= 8;
    }
    while (v1 != v2);
    goto LABEL_13;
  }
  unint64_t v9 = &v7[8 * v4];
  if ((unint64_t)(&v1[-v3] - v7) < 0x20) {
    goto LABEL_12;
  }
  unint64_t v10 = ((unint64_t)(v6 - 8) >> 3) + 1;
  uint64_t v11 = 8 * (v10 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v12 = &v1[-v11];
  unint64_t v9 = &v8[-v11];
  uint64_t v13 = &v7[8 * v4 - 16];
  unsigned int v14 = (long long *)(v1 - 16);
  uint64_t v15 = v10 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v16 = *v14;
    *((_OWORD *)v13 - 1) = *(v14 - 1);
    *(_OWORD *)uint64_t v13 = v16;
    v13 -= 32;
    v14 -= 2;
    v15 -= 4;
  }
  while (v15);
  __int16 v1 = v12;
  if (v10 != (v10 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_12;
  }
LABEL_13:
  char v2 = *(unsigned char **)a1;
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v8;
  if (!v2) {
    return;
  }
LABEL_14:

  operator delete(v2);
}

uint64_t sub_FB1560(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, __int16 a7, uint64_t a8, uint64_t a9)
{
  sub_3833F0(a1, a2);
  int v17 = sub_29AEC4(a6);
  if (v17) {
    int v17 = sub_29AEB4((uint64_t)a6);
  }
  *(_DWORD *)(a1 + 3880) = v17;
  *(_WORD *)(a1 + 3884) = a7;
  uint64_t v18 = a2[1];
  uint64_t v54 = *a2;
  unint64_t v55 = (std::__shared_weak_count *)v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v52 = a4;
  uint64_t v50 = a5;
  uint64_t v51 = a3;
  uint64_t v53 = sub_327C18(a1 + 3888, &v54);
  uint64_t v19 = v55;
  if (v55 && !atomic_fetch_add(&v55->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = (_OWORD *)(a1 + 39912);
  uint64_t v22 = *a2;
  uint64_t v21 = a2[1];
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 11712) = v22;
  uint64_t v23 = -3840;
  *(void *)(a1 + 11720) = v21;
  do
  {
    uint64_t v24 = a1 + v23;
    *(_DWORD *)(v24 + 15568) = 0;
    *(_DWORD *)(v24 + 15592) = 0;
    *(void *)(v24 + 15576) = 0;
    *(void *)(v24 + 15600) = 0;
    v23 += 48;
  }
  while (v23);
  *(_OWORD *)(a1 + 15568) = 0u;
  uint64_t v26 = *a2;
  uint64_t v25 = a2[1];
  if (v25) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = 0;
  *(void *)(a1 + 15584) = v26;
  *(void *)(a1 + 15592) = v25;
  do
  {
    uint64_t v28 = a1 + v27;
    *(_DWORD *)(v28 + 15600) = 0;
    *(_DWORD *)(v28 + 15624) = 0;
    *(void *)(v28 + 15608) = 0;
    *(void *)(v28 + 15632) = 0;
    v27 += 48;
  }
  while (v27 != 3840);
  *(_OWORD *)(a1 + 19440) = 0u;
  uint64_t v29 = (void **)*a2;
  *(_DWORD *)(a1 + 19456) = -1;
  if (v29) {
    LOBYTE(v29) = sub_2ABCE4(v29);
  }
  *(unsigned char *)(a1 + 19460) = (_BYTE)v29;
  sub_327FD8(a1 + 19464, a2, a7, 0);
  uint64_t v31 = *a2;
  uint64_t v30 = a2[1];
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v32 = 0;
  *(void *)(a1 + 23352) = v31;
  *(void *)(a1 + 23360) = v30;
  uint64_t v33 = a1 + 23392;
  do
  {
    *(_DWORD *)(v33 + v32) = 0;
    *(_DWORD *)(v33 + v32 - 24) = 0;
    uint64_t v34 = a1 + v32;
    *(void *)(v34 + 23376) = 0;
    *(void *)(v34 + 23400) = 0;
    v32 += 48;
  }
  while (v32 != 3840);
  *(_DWORD *)(a1 + 27223) = 0;
  *(_OWORD *)(a1 + 27208) = 0u;
  sub_327DC8((uint64_t *)(a1 + 27232), a2, 255);
  *(void *)(a1 + 31896) = a6;
  uint64_t v35 = *a2;
  unsigned int v36 = (std::__shared_weak_count *)a2[1];
  if (v36)
  {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v37 = 0;
  *(void *)(a1 + 31904) = v35;
  *(void *)(a1 + 31912) = v36;
  uint64_t v38 = a1 + 31944;
  do
  {
    *(_DWORD *)(v38 + v37) = 0;
    *(_DWORD *)(v38 + v37 - 24) = 0;
    uint64_t v39 = a1 + v37;
    *(void *)(v39 + 31928) = 0;
    *(void *)(v39 + 31952) = 0;
    v37 += 48;
  }
  while (v37 != 3840);
  *(_OWORD *)(a1 + 35760) = 0u;
  if (v36 && !atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
  }
  *(_WORD *)(a1 + 35776) = *(_WORD *)a8;
  sub_F2D1FC(a1 + 35784, a8 + 8);
  *(void *)(a1 + 39928) = 0;
  *uint64_t v20 = 0u;
  *uint64_t v20 = *(_OWORD *)(a8 + 4136);
  *(void *)(a1 + 39928) = *(void *)(a8 + 4152);
  *(_OWORD *)(a8 + 4136) = 0u;
  *(void *)(a8 + 4152) = 0;
  uint64_t v40 = *(void *)(a8 + 4160);
  *(void *)(a1 + 39944) = a1 + 15584;
  *(void *)(a1 + 39936) = v40;
  *(void *)(a1 + 39952) = a1;
  *(void *)(a1 + 39960) = v52;
  *(void *)(a1 + 39968) = v51;
  *(void *)(a1 + 39976) = a9;
  uint64_t v41 = *(void *)(a1 + 31896);
  int v42 = *(_DWORD *)(a1 + 3880);
  *(void *)(a1 + 39984) = a1 + 19464;
  *(void *)(a1 + 39992) = a1 + 23352;
  *(void *)(a1 + 40000) = v41;
  *(void *)(a1 + 40008) = a1 + 27232;
  *(void *)(a1 + 40016) = v53;
  *(void *)(a1 + 40024) = v52;
  *(_DWORD *)(a1 + 40032) = sub_299C38(v41);
  *(unsigned char *)(a1 + 40036) = v42 == 0;
  *(unsigned char *)(a1 + 45216) = 0;
  *(void *)(a1 + 45224) = v50;
  char v43 = sub_2ABCE4((void **)*a2);
  *(void *)(a1 + 45240) = 0;
  *(unsigned char *)(a1 + 45232) = v43;
  *(unsigned char *)(a1 + 45233) = 0;
  *(void *)(a1 + 45248) = 0;
  *(void *)(a1 + 45256) = 0;
  unint64_t v44 = sub_F78BBC((uint64_t *)(a1 + 39944));
  uint64_t v46 = *(void *)(a1 + 45240);
  uint64_t v45 = *(void *)(a1 + 45248);
  unint64_t v47 = 0xEEEEEEEEEEEEEEEFLL * ((v45 - v46) >> 6);
  if (v44 <= v47)
  {
    if (v44 < v47)
    {
      for (uint64_t i = v46 + 960 * v44; v45 != i; v45 = sub_FAB36C(v45 - 960))
        ;
      *(void *)(a1 + 45248) = i;
    }
  }
  else
  {
    sub_FB6DD8((uint64_t *)(a1 + 45240), v44 - v47);
  }
  return a1;
}

void sub_FB19B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,_Unwind_Exception *a21)
{
  uint64_t v23 = *(void *)(v21 + 15592);
  if (v23)
  {
    sub_20B192C(v23);
    a1 = a21;
  }
  sub_14A84(a10);
  sub_32834C(a18);
  sub_14A84(v21);
  _Unwind_Resume(a1);
}

void sub_FB1A90(_Unwind_Exception *a1)
{
  sub_14A84(v1);
  _Unwind_Resume(a1);
}

void sub_FB1AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  HIBYTE(v14[2]) = 19;
  strcpy((char *)v14, "DrivingRoutingGraph");
  long long __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v7 = sub_374CDC(a4, (uint64_t)v14, (uint64_t *)&__p);
  sub_ED7C50(a1, a2, a3, v7);
  *(void *)(a1 + 4160) = a2;
  uint64_t v8 = (void **)__p;
  if (__p)
  {
    unint64_t v9 = v12;
    unint64_t v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0) {
          operator delete(*(v9 - 3));
        }
        v9 -= 3;
      }
      while (v9 != v8);
      unint64_t v10 = __p;
    }
    uint64_t v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14[2]) < 0) {
    operator delete(v14[0]);
  }
}

void sub_FB1BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_FB1BC4()
{
  uint64_t v0 = __chkstk_darwin();
  __int16 v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  unint64_t v10 = v9;
  uint64_t v11 = v0;
  uint64_t v12 = (uint64_t *)sub_374CE4(v9);
  uint64_t v13 = sub_3777C0(v10);
  unsigned int v14 = (_DWORD *)sub_374D14(v10);
  sub_FB1AA4((uint64_t)v16, v11 + 3888, v11 + 11712, (uint64_t)v10);
  sub_FB1560(v11, v12, v8, v13, v6, v14, v2, (uint64_t)v16, v4);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  sub_3A6318(v17);
  return v11;
}

void sub_FB1CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_C62E9C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_FB1CD4(uint64_t a1@<X0>, unsigned int *a2@<X1>, int *a3@<X2>, signed int *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v8 = a1 + 45233;
  unsigned int v9 = *a2;
  uint64_t v48 = a1 + 39944;
  uint64_t v45 = (uint64_t *)a2;
  if (!v9) {
    goto LABEL_9;
  }
  unint64_t v10 = sub_F93238(*(void *)(a1 + 39944), v9, 1);
  if (!v10 || (uint64_t v11 = &v10[-*(int *)v10], *(unsigned __int16 *)v11 < 9u) || (v12 = *((unsigned __int16 *)v11 + 4)) == 0)
  {
    LODWORD(v15) = -1;
    goto LABEL_10;
  }
  uint64_t v13 = (int *)sub_F930D4((unsigned int *)&v10[v12 + *(unsigned int *)&v10[v12]], a2[1]);
  unsigned int v14 = (unsigned __int16 *)((char *)v13 - *v13);
  if (*v14 < 5u)
  {
LABEL_9:
    LODWORD(v15) = 0;
    goto LABEL_10;
  }
  uint64_t v15 = v14[2];
  if (v15) {
    LODWORD(v15) = *((unsigned __int8 *)v13 + v15);
  }
LABEL_10:
  uint64_t v16 = 0;
  unsigned int v64 = v15;
  unsigned int v17 = v15;
  char v43 = (char *)v8;
  uint64_t v18 = *(void *)(v8 + 7);
  uint64_t v19 = v18 + 960 * v15;
  *(void *)(v19 + 8) = *(void *)v19;
  *(_DWORD *)(v19 + 24) = 0;
  *(void *)(v19 + 40) = *(void *)(v19 + 32);
  *(void *)(v19 + 64) = *(void *)(v19 + 56);
  *(void *)(v19 + 88) = *(void *)(v19 + 80);
  *(void *)(v19 + 112) = *(void *)(v19 + 104);
  *(void *)(v19 + 136) = *(void *)(v19 + 128);
  *(void *)(v19 + 160) = 0;
  do
  {
    uint64_t v21 = v19 + v16;
    if (*(void *)(v19 + v16 + 192))
    {
      unint64_t v22 = *(void *)(v21 + 200);
      if (v22 >= 0x80)
      {
        uint64_t v20 = (void *)(v19 + v16);
        operator delete(*(void **)(v21 + 176));
        *(void *)(v21 + 176) = &unk_20E1710;
        v20[27] = 0;
        v20[24] = 0;
        v20[25] = 0;
        v20[23] = 0;
      }
      else if (v22)
      {
        *(void *)(v21 + 192) = 0;
        memset(*(void **)(v21 + 176), 128, v22 + 8);
        *(unsigned char *)(*(void *)(v21 + 176) + v22) = -1;
        unint64_t v23 = *(void *)(v21 + 200);
        if (v23 == 7) {
          uint64_t v24 = 6;
        }
        else {
          uint64_t v24 = v23 - (v23 >> 3);
        }
        *(void *)(v19 + v16 + 216) = v24 - *(void *)(v21 + 192);
      }
    }
    v16 += 48;
  }
  while (v16 != 768);
  uint64_t v25 = v18 + 960 * v17;
  *(void *)(v25 + 944) = 0;
  *(_DWORD *)(v25 + 952) = 0;
  sub_FA56F0(v45, a3, a4, a5, a1 + 39984, *(_WORD *)(a1 + 3884), *(_DWORD *)(a1 + 3880), *(void **)(v48 + 24), (uint64_t)&v53, a1, *(void **)(v48 + 5280));
  unint64_t v26 = (v54 + ((unint64_t)v53 << 6) + ((unint64_t)v53 >> 2) + 2654435769u) ^ v53;
  unint64_t v27 = (v55 + (v26 << 6) + (v26 >> 2) + 2654435769u) ^ v26;
  unint64_t v28 = (v56 + (v27 << 6) + (v27 >> 2) + 2654435769u) ^ v27;
  unint64_t v29 = (v57 + (v28 << 6) + (v28 >> 2) + 2654435769u) ^ v28;
  unint64_t v30 = (v58 + (v29 << 6) + (v29 >> 2) + 2654435769u) ^ v29;
  unint64_t v31 = (v59 + (v30 << 6) + (v30 >> 2) + 2654435769u) ^ v30;
  unint64_t v32 = (v60 + (v31 << 6) + (v31 >> 2) + 2654435769u) ^ v31;
  sub_FAA4F0((uint64_t *)(*(void *)(*(void *)(v48 + 32) + 16)+ 272 * (((v61 + (v32 << 6) + (v32 >> 2) + 2654435769u) ^ v32) % **(void **)(v48 + 32))), &v53, (uint64_t)&v50);
  if (v52)
  {
    uint64_t v33 = v51;
    *(void *)a6 = v50;
    *(void *)(a6 + 8) = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v34 = operator new(0x30uLL);
    v34[1] = 0;
    v34[2] = 0;
    void *v34 = off_243F2A0;
    v34[4] = 0;
    v34[5] = 0;
    v34[3] = 0;
    *(void *)a6 = v34 + 3;
    *(void *)(a6 + 8) = v34;
    sub_FB21C4(a1, (unint64_t *)v45, &v64, a3, a4, v59);
    sub_FB2CE4(a1, &v64, *(uint64_t ***)a6);
    char v62 = *v43;
    signed int v63 = *a4;
    unint64_t v35 = (v54 + 2654435769 + ((unint64_t)v53 << 6) + ((unint64_t)v53 >> 2)) ^ v53;
    unint64_t v36 = (v55 + 2654435769 + (v35 << 6) + (v35 >> 2)) ^ v35;
    unint64_t v37 = (v56 + 2654435769 + (v36 << 6) + (v36 >> 2)) ^ v36;
    unint64_t v38 = (v57 + 2654435769 + (v37 << 6) + (v37 >> 2)) ^ v37;
    unint64_t v39 = (v58 + 2654435769 + (v38 << 6) + (v38 >> 2)) ^ v38;
    unint64_t v40 = (v59 + 2654435769 + (v39 << 6) + (v39 >> 2)) ^ v39;
    unint64_t v41 = (v60 + 2654435769 + (v40 << 6) + (v40 >> 2)) ^ v40;
    sub_FB7698(*(void *)(*(void *)(v48 + 32) + 16)+ 272 * (((v61 + 2654435769 + (v41 << 6) + (v41 >> 2)) ^ v41) % **(void **)(v48 + 32)), &v53, (uint64_t *)a6, *(void *)(*(void *)a6 + 16) - **(void **)a6 + 40);
  }
  int v42 = v51;
  if (v51)
  {
    if (!atomic_fetch_add(&v51->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_FB2190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_14A84(v10);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FB21C4(uint64_t a1, unint64_t *a2, unsigned int *a3, int *a4, signed int *a5, int a6)
{
  uint64_t v8 = (void *)(a1 + 45240);
  sub_FB3AF0(a1, a2, a3, 0);
  v168 = v8;
  v169 = a3;
  unsigned int v9 = *a3;
  int v174 = *a3 - 1;
  uint64_t v10 = *v8 + 960 * v9;
  uint64_t v11 = (_DWORD *)(v10 + 24);
  uint64_t v12 = *(unsigned int *)(v10 + 24);
  uint64_t v13 = v10 + 128;
  unsigned int v14 = (void **)(v10 + 80);
  uint64_t v15 = *(void *)v10;
  uint64_t v166 = (uint64_t *)v10;
  if (v12 != (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3)
  {
    unint64_t v165 = (unsigned int *)(v10 + 24);
    char v161 = (uint64_t *)(v10 + 56);
    v162 = (uint64_t *)(v10 + 32);
    uint64_t v171 = a1 + 39984;
    int v167 = a6;
    while (1)
    {
      *uint64_t v11 = v12 + 1;
      int v20 = -1431655765 * ((unint64_t)((unsigned char *)v14[1] - (unsigned char *)*v14) >> 2);
      unint64_t v22 = *(char **)(v13 + 8);
      unint64_t v21 = *(void *)(v13 + 16);
      if ((unint64_t)v22 < v21)
      {
        *(_DWORD *)unint64_t v22 = v20;
        uint64_t v23 = (uint64_t)(v22 + 4);
        int v24 = v167;
        goto LABEL_27;
      }
      uint64_t v25 = v13;
      unint64_t v26 = *(char **)v13;
      uint64_t v27 = (uint64_t)&v22[-*(void *)v13];
      uint64_t v28 = v27 >> 2;
      unint64_t v29 = (v27 >> 2) + 1;
      if (v29 >> 62) {
        sub_2E00();
      }
      uint64_t v30 = v21 - (void)v26;
      if (v30 >> 1 > v29) {
        unint64_t v29 = v30 >> 1;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v164 = v29;
      if (v29)
      {
        if (v29 >> 62) {
          goto LABEL_147;
        }
        unint64_t v31 = operator new(4 * v29);
        unint64_t v32 = &v31[4 * v28];
        *unint64_t v32 = v20;
        uint64_t v23 = (uint64_t)(v32 + 1);
        if (v22 == v26)
        {
LABEL_19:
          uint64_t v13 = v25;
          int v24 = v167;
          goto LABEL_25;
        }
      }
      else
      {
        unint64_t v31 = 0;
        unint64_t v32 = (_DWORD *)(4 * v28);
        *(_DWORD *)(4 * v28) = v20;
        uint64_t v23 = 4 * v28 + 4;
        if (v22 == v26) {
          goto LABEL_19;
        }
      }
      unint64_t v33 = v22 - 4 - v26;
      int v24 = v167;
      if (v33 < 0x2C) {
        break;
      }
      unint64_t v34 = v22 - &v31[v27];
      uint64_t v13 = v25;
      if (v34 < 0x20) {
        goto LABEL_24;
      }
      uint64_t v35 = (v33 >> 2) + 1;
      uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v37 = &v22[-v36];
      unint64_t v32 = (_DWORD *)((char *)v32 - v36);
      unint64_t v38 = &v31[4 * v28 - 16];
      unint64_t v39 = v22 - 16;
      uint64_t v40 = v35 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v41 = *(_OWORD *)v39;
        *(v38 - 1) = *((_OWORD *)v39 - 1);
        *unint64_t v38 = v41;
        v38 -= 2;
        v39 -= 32;
        v40 -= 8;
      }
      while (v40);
      unint64_t v22 = v37;
      if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_24;
      }
LABEL_25:
      *(void *)uint64_t v13 = v32;
      *(void *)(v13 + 8) = v23;
      *(void *)(v13 + 16) = &v31[4 * v164];
      if (v26) {
        operator delete(v26);
      }
LABEL_27:
      *(void *)(v13 + 8) = v23;
      if (!*(unsigned char *)(a1 + 11662)
        || (unint64_t v43 = *(void *)(v15 + 8 * v12), (v44 = sub_290DEC(a1 + 7784, HIDWORD(v43), 1)) != 0)
        && (uint64_t v45 = &v44[-*(int *)v44], *(unsigned __int16 *)v45 >= 5u)
        && (uint64_t v46 = *((unsigned __int16 *)v45 + 2)) != 0
        && *(_DWORD *)&v44[v46 + *(unsigned int *)&v44[v46]] > WORD1(v43)
        && sub_295DB4(a1 + 3888, HIDWORD(v43) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v43) << 32)))
      {
        unint64_t v47 = *(void *)(v15 + 8 * v12);
        if (*v169 == 1)
        {
          sub_ED8808(a1 + 35776, v47, 0, v162, 0);
          uint64_t v49 = *v162;
          uint64_t v48 = v166[5];
          while (1)
          {
            if (v49 == v48) {
              goto LABEL_5;
            }
            int v51 = *a5;
            double v52 = sub_ECA6AC(v171, (int **)v49, (uint64_t)a4, *a5, v24);
            unint64_t v53 = sub_ECA410(v171, (int **)v49, 0x3B9ACA00u, (uint64_t)a4, v51, v24, v52);
            int v55 = v53;
            unint64_t v56 = HIDWORD(v53);
            BOOL v57 = v53 == -1 || v56 == 0x7FFFFFFF;
            if (!v57 && v54 != 0x7FFFFFFFFFFFFFFFLL)
            {
              uint64_t v59 = v54;
              unint64_t v60 = sub_ECC250(v171, (int **)v49, (uint64_t)a4, v51, v24);
              LODWORD(v62) = v60 + v55;
              if ((v60 + v55) <= 1) {
                LODWORD(v62) = 1;
              }
              unint64_t v63 = (unint64_t)(HIDWORD(v60) + v56) << 32;
              BOOL v65 = v60 == -1 || HIDWORD(v60) == 0x7FFFFFFF || v61 == 0x7FFFFFFFFFFFFFFFLL;
              if (v65) {
                uint64_t v62 = v60;
              }
              else {
                uint64_t v62 = v62;
              }
              if (v65) {
                unint64_t v63 = v60 & 0xFFFFFFFF00000000;
              }
              uint64_t v66 = v65 ? v61 : v61 + v59;
              if (v62 != -1 && v63 != 0x7FFFFFFF00000000 && v66 != 0x7FFFFFFFFFFFFFFFLL) {
                break;
              }
            }
LABEL_37:
            v49 += 96;
          }
          uint64_t v67 = 0;
          unint64_t v68 = v63 | v62;
          unint64_t v69 = ((*(void *)(v49 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v49 + 72) << 32) | (2
                                                                                               * ((*(void *)(v49 + 72) & 0xFF000000000000) == 0)))
              + (((unint64_t)*(unsigned int *)(v49 + 80) >> 14) & 0x3FFFC);
          unint64_t v70 = v69 & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v49 + 88) >> 1) & 1;
          unint64_t v173 = v70;
          uint64_t v71 = *v168 + 960 * *v169 + 176;
          unint64_t v72 = ((0x2127599BF4325C37 * (v70 ^ (v69 >> 23))) ^ ~((0x2127599BF4325C37 * (v70 ^ (v69 >> 23))) >> 47))
              + (((0x2127599BF4325C37 * (v70 ^ (v69 >> 23))) ^ ((0x2127599BF4325C37 * (v70 ^ (v69 >> 23))) >> 47)) << 21);
          unint64_t v73 = 21 * ((265 * (v72 ^ (v72 >> 24))) ^ ((265 * (v72 ^ (v72 >> 24))) >> 14));
          unint64_t v74 = 2147483649u * (v73 ^ (v73 >> 28));
          uint64_t v75 = (void *)(v71
                         + 48
                         * (((((unsigned __int16)(v73 ^ (v73 >> 28)) >> 8) ^ ((-2147483647
                                                                                              * (v73 ^ (v73 >> 28))) >> 16)) ^ ((-2147483647 * (v73 ^ (v73 >> 28))) >> 24)) & 0xF));
          unint64_t v76 = v74 >> 7;
          uint64_t v77 = v75[3];
          uint64_t v78 = 0x101010101010101 * (v74 & 0x7F);
          while (1)
          {
            unint64_t v79 = v76 & v77;
            uint64_t v80 = *(void *)(*v75 + v79);
            unint64_t v81 = ((v80 ^ v78) - 0x101010101010101) & ~(v80 ^ v78) & 0x8080808080808080;
            if (v81) {
              break;
            }
LABEL_71:
            if ((v80 & (~v80 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_74;
            }
            v67 += 8;
            unint64_t v76 = v67 + v79;
          }
          uint64_t v82 = v75[1];
          while (1)
          {
            unint64_t v83 = (v79 + (__clz(__rbit64(v81)) >> 3)) & v77;
            if (*(void *)(v82 + 16 * v83) == v70) {
              break;
            }
            v81 &= v81 - 1;
            if (!v81) {
              goto LABEL_71;
            }
          }
          if (v77 == v83)
          {
LABEL_74:
            uint64_t v84 = *v168 + 960 * *v169;
            int v85 = *(_DWORD *)(v84 + 952);
            sub_EE1844(v71, (uint64_t *)&v173, (uint64_t)&v175);
            uint64_t v86 = v176;
            uint64_t v87 = *(void *)(v175 + 8);
            if (v177)
            {
              uint64_t v88 = v87 + 16 * v176;
              *(void *)uint64_t v88 = v173;
              *(_DWORD *)(v88 + 8) = -1;
            }
            *(_DWORD *)(v87 + 16 * v86 + 8) = *(_DWORD *)(v84 + 952);
            sub_A4710(v84, &v173);
            ++*(_DWORD *)(v84 + 952);
            unint64_t v90 = v14[1];
            uint64_t v89 = v14[2];
            if (v90 >= (_DWORD *)v89)
            {
LABEL_77:
              uint64_t v91 = *v14;
              unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * (((char *)v90 - (unsigned char *)*v14) >> 2);
              unint64_t v93 = v92 + 1;
              if (v92 + 1 > 0x1555555555555555) {
                goto LABEL_148;
              }
              unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((v89 - (unsigned char *)v91) >> 2);
              if (2 * v94 > v93) {
                unint64_t v93 = 2 * v94;
              }
              if (v94 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v95 = 0x1555555555555555;
              }
              else {
                unint64_t v95 = v93;
              }
              if (v95 > 0x1555555555555555) {
                goto LABEL_147;
              }
              uint64_t v96 = 12 * v95;
              unint64_t v97 = (char *)operator new(12 * v95);
              unint64_t v98 = &v97[12 * v92];
              *(_DWORD *)unint64_t v98 = v85;
              *(void *)(v98 + 4) = v68;
              unint64_t v99 = v98;
              if (v90 == v91)
              {
                int v24 = v167;
                uint64_t v50 = v98 + 12;
                *unsigned int v14 = v98;
                v14[1] = v98 + 12;
                v14[2] = &v97[v96];
                if (v91) {
                  goto LABEL_90;
                }
              }
              else
              {
                int v24 = v167;
                do
                {
                  uint64_t v100 = *(void *)(v90 - 3);
                  v90 -= 3;
                  int v101 = v90[2];
                  *(void *)(v99 - 12) = v100;
                  v99 -= 12;
                  *((_DWORD *)v99 + 2) = v101;
                }
                while (v90 != v91);
                uint64_t v50 = v98 + 12;
                *unsigned int v14 = v99;
                v14[1] = v98 + 12;
                v14[2] = &v97[v96];
                if (!v91) {
                  goto LABEL_36;
                }
LABEL_90:
                operator delete(v91);
              }
LABEL_36:
              v14[1] = v50;
              goto LABEL_37;
            }
          }
          else
          {
            int v85 = *(_DWORD *)(v82 + 16 * v83 + 8);
            unint64_t v90 = v14[1];
            uint64_t v89 = v14[2];
            if (v90 >= (_DWORD *)v89) {
              goto LABEL_77;
            }
          }
          *unint64_t v90 = v85;
          *(void *)(v90 + 1) = v68;
          uint64_t v50 = (char *)(v90 + 3);
          goto LABEL_36;
        }
        sub_FB3300(a1, v47, &v174, a4, a5, v24, (uint64_t)v161);
        uint64_t v102 = *v161;
        uint64_t v103 = v166[8];
        while (2)
        {
          if (v102 == v103) {
            goto LABEL_5;
          }
          uint64_t v105 = *(void *)(v102 + 28);
          if (v105 == -1 || (v105 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000) {
            goto LABEL_96;
          }
          uint64_t v107 = 0;
          unint64_t v108 = *(void *)(v102 + 8);
          unint64_t v173 = v108;
          uint64_t v109 = *v168 + 960 * *v169 + 176;
          unint64_t v110 = ((0x2127599BF4325C37 * (v108 ^ (v108 >> 23))) ^ ~((0x2127599BF4325C37 * (v108 ^ (v108 >> 23))) >> 47))
               + (((0x2127599BF4325C37 * (v108 ^ (v108 >> 23))) ^ ((0x2127599BF4325C37 * (v108 ^ (v108 >> 23))) >> 47)) << 21);
          unint64_t v111 = 21 * ((265 * (v110 ^ (v110 >> 24))) ^ ((265 * (v110 ^ (v110 >> 24))) >> 14));
          unint64_t v112 = 2147483649u * (v111 ^ (v111 >> 28));
          uint64_t v113 = (void *)(v109
                          + 48
                          * (((((unsigned __int16)(v111 ^ (v111 >> 28)) >> 8) ^ ((-2147483647
                                                                                                 * (v111 ^ (v111 >> 28))) >> 16)) ^ ((-2147483647 * (v111 ^ (v111 >> 28))) >> 24)) & 0xF));
          unint64_t v114 = v112 >> 7;
          uint64_t v115 = v113[3];
          uint64_t v116 = 0x101010101010101 * (v112 & 0x7F);
          while (1)
          {
            unint64_t v117 = v114 & v115;
            uint64_t v118 = *(void *)(*v113 + v117);
            unint64_t v119 = ((v118 ^ v116) - 0x101010101010101) & ~(v118 ^ v116) & 0x8080808080808080;
            if (v119) {
              break;
            }
LABEL_107:
            if ((v118 & (~v118 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_110;
            }
            v107 += 8;
            unint64_t v114 = v107 + v117;
          }
          uint64_t v120 = v113[1];
          while (1)
          {
            unint64_t v121 = (v117 + (__clz(__rbit64(v119)) >> 3)) & v115;
            if (*(void *)(v120 + 16 * v121) == v108) {
              break;
            }
            v119 &= v119 - 1;
            if (!v119) {
              goto LABEL_107;
            }
          }
          if (v115 == v121)
          {
LABEL_110:
            uint64_t v122 = *v168 + 960 * *v169;
            int v123 = *(_DWORD *)(v122 + 952);
            sub_EE1844(v109, (uint64_t *)&v173, (uint64_t)&v175);
            uint64_t v124 = v176;
            uint64_t v125 = *(void *)(v175 + 8);
            if (v177)
            {
              uint64_t v126 = v125 + 16 * v176;
              *(void *)uint64_t v126 = v173;
              *(_DWORD *)(v126 + 8) = -1;
            }
            *(_DWORD *)(v125 + 16 * v124 + 8) = *(_DWORD *)(v122 + 952);
            sub_A4710(v122, &v173);
            ++*(_DWORD *)(v122 + 952);
            uint64_t v105 = *(void *)(v102 + 28);
            __int16 v128 = v14[1];
            char v127 = v14[2];
            if (v128 >= (_DWORD *)v127)
            {
LABEL_113:
              int v129 = *v14;
              unint64_t v130 = 0xAAAAAAAAAAAAAAABLL * (((char *)v128 - (unsigned char *)*v14) >> 2);
              unint64_t v131 = v130 + 1;
              if (v130 + 1 > 0x1555555555555555) {
LABEL_148:
              }
                sub_2E00();
              unint64_t v132 = 0xAAAAAAAAAAAAAAABLL * ((v127 - (unsigned char *)v129) >> 2);
              if (2 * v132 > v131) {
                unint64_t v131 = 2 * v132;
              }
              if (v132 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v133 = 0x1555555555555555;
              }
              else {
                unint64_t v133 = v131;
              }
              if (v133 > 0x1555555555555555) {
                goto LABEL_147;
              }
              uint64_t v134 = 12 * v133;
              unsigned int v135 = (char *)operator new(12 * v133);
              int64_t v136 = &v135[12 * v130];
              *(_DWORD *)int64_t v136 = v123;
              *(void *)(v136 + 4) = v105;
              for (uint64_t i = v136; v128 != v129; *((_DWORD *)i + 2) = v139)
              {
                uint64_t v138 = *(void *)(v128 - 3);
                v128 -= 3;
                int v139 = v128[2];
                *(void *)(i - 12) = v138;
                i -= 12;
              }
              long long v104 = v136 + 12;
              *unsigned int v14 = i;
              v14[1] = v136 + 12;
              v14[2] = &v135[v134];
              if (v129) {
                operator delete(v129);
              }
LABEL_95:
              v14[1] = v104;
LABEL_96:
              v102 += 40;
              continue;
            }
          }
          else
          {
            int v123 = *(_DWORD *)(v120 + 16 * v121 + 8);
            __int16 v128 = v14[1];
            char v127 = v14[2];
            if (v128 >= (_DWORD *)v127) {
              goto LABEL_113;
            }
          }
          break;
        }
        _DWORD *v128 = v123;
        *(void *)(v128 + 1) = v105;
        long long v104 = (char *)(v128 + 3);
        goto LABEL_95;
      }
LABEL_5:
      uint64_t v11 = v165;
      uint64_t v12 = *v165;
      uint64_t v15 = *v166;
      if (v12 == (v166[1] - *v166) >> 3) {
        goto LABEL_2;
      }
    }
    uint64_t v13 = v25;
    do
    {
LABEL_24:
      int v42 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *--unint64_t v32 = v42;
    }
    while (v22 != v26);
    goto LABEL_25;
  }
LABEL_2:
  int v16 = -1431655765 * ((unint64_t)((unsigned char *)v14[1] - (unsigned char *)*v14) >> 2);
  uint64_t v18 = *(char **)(v13 + 8);
  unint64_t v17 = *(void *)(v13 + 16);
  if ((unint64_t)v18 < v17)
  {
    *(_DWORD *)uint64_t v18 = v16;
    uint64_t v19 = (uint64_t)(v18 + 4);
    goto LABEL_146;
  }
  uint64_t v140 = v13;
  __int16 v141 = *(char **)v13;
  uint64_t v142 = (uint64_t)&v18[-*(void *)v13];
  uint64_t v143 = v142 >> 2;
  unint64_t v144 = (v142 >> 2) + 1;
  if (v144 >> 62) {
    sub_2E00();
  }
  uint64_t v145 = v17 - (void)v141;
  if (v145 >> 1 > v144) {
    unint64_t v144 = v145 >> 1;
  }
  if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v146 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v146 = v144;
  }
  if (!v146)
  {
    unsigned __int16 v147 = 0;
    unint64_t v148 = (_DWORD *)(4 * v143);
    unint64_t v149 = 0;
    *(_DWORD *)(4 * v143) = v16;
    uint64_t v19 = 4 * v143 + 4;
    int64_t v150 = v18 - v141;
    if (v18 != v141) {
      goto LABEL_135;
    }
LABEL_138:
    uint64_t v13 = v140;
    goto LABEL_144;
  }
  if (v146 >> 62) {
LABEL_147:
  }
    sub_188D718();
  unsigned __int16 v147 = operator new(4 * v146);
  unint64_t v148 = &v147[4 * v143];
  unint64_t v149 = &v147[4 * v146];
  *unint64_t v148 = v16;
  uint64_t v19 = (uint64_t)(v148 + 1);
  int64_t v150 = v18 - v141;
  if (v18 == v141) {
    goto LABEL_138;
  }
LABEL_135:
  unint64_t v151 = v150 - 4;
  if (v151 < 0x2C)
  {
    uint64_t v13 = v140;
    do
    {
LABEL_143:
      int v160 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *--unint64_t v148 = v160;
    }
    while (v18 != v141);
    goto LABEL_144;
  }
  unint64_t v152 = v18 - v147 - v142;
  uint64_t v13 = v140;
  if (v152 < 0x20) {
    goto LABEL_143;
  }
  uint64_t v153 = (v151 >> 2) + 1;
  uint64_t v154 = 4 * (v153 & 0x7FFFFFFFFFFFFFF8);
  int v155 = &v18[-v154];
  unint64_t v148 = (_DWORD *)((char *)v148 - v154);
  unsigned int v156 = &v147[4 * v143 - 16];
  unint64_t v157 = v18 - 16;
  uint64_t v158 = v153 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v159 = *(_OWORD *)v157;
    *(v156 - 1) = *((_OWORD *)v157 - 1);
    *unsigned int v156 = v159;
    v156 -= 2;
    v157 -= 32;
    v158 -= 8;
  }
  while (v158);
  uint64_t v18 = v155;
  if (v153 != (v153 & 0x7FFFFFFFFFFFFFF8)) {
    goto LABEL_143;
  }
LABEL_144:
  *(void *)uint64_t v13 = v148;
  *(void *)(v13 + 8) = v19;
  *(void *)(v13 + 16) = v149;
  if (v141) {
    operator delete(v141);
  }
LABEL_146:
  *(void *)(v13 + 8) = v19;
}

void sub_FB2CE4(uint64_t a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v5 = (void *)(a1 + 45240);
  uint64_t v6 = *(void *)(a1 + 45240) + 960 * *a2;
  uint64_t v8 = *(void *)(v6 + 128);
  uint64_t v7 = v6 + 128;
  uint64_t v93 = *(unsigned int *)(v7 + 820);
  int v9 = *(_DWORD *)(v7 + 816);
  uint64_t v11 = (void **)(v7 - 24);
  uint64_t v10 = *(void *)(v7 - 24);
  uint64_t v12 = (void *)(v7 + 24);
  unint64_t v13 = (*(void *)(v7 - 16) - v10) >> 3;
  unint64_t v92 = ((*(void *)(v7 + 8) - v8) >> 2) - 1;
  if (v92 <= v13)
  {
    if (v92 < v13) {
      *(void *)(v7 - 16) = v10 + 8 * v92;
    }
  }
  else
  {
    sub_FB7FAC((char **)(v7 - 24), v92 - v13);
  }
  unsigned int v14 = v9 + v93;
  sub_A3E96C(v7 + 24, v92, 0);
  unint64_t v15 = (*(_DWORD *)(*v5 + 960 * *a2 + 944) * v93);
  int v16 = *a3;
  if (v15 > a3[2] - *a3)
  {
    unint64_t v17 = a3[1];
    uint64_t v18 = 8 * v15;
    uint64_t v19 = (char *)operator new(8 * v15);
    uint64_t v20 = (char *)v17 - (char *)v16;
    unint64_t v21 = &v19[((char *)v17 - (char *)v16) & 0xFFFFFFFFFFFFFFF8];
    unint64_t v22 = v21;
    if (v17 == v16) {
      goto LABEL_14;
    }
    if ((unint64_t)(v20 - 8) >= 0x58)
    {
      unint64_t v22 = &v19[((char *)v17 - (char *)v16) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)((char *)v17 - (v20 & 0xFFFFFFFFFFFFFFF8) - v19) >= 0x20)
      {
        uint64_t v23 = v20 >> 3;
        unint64_t v24 = ((unint64_t)(v20 - 8) >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v26 = (char *)&v17[v25 / 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = &v21[-v25];
        uint64_t v27 = &v19[8 * v23 - 16];
        uint64_t v28 = (long long *)(v17 - 2);
        uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v30 = *v28;
          *((_OWORD *)v27 - 1) = *(v28 - 1);
          *(_OWORD *)uint64_t v27 = v30;
          v27 -= 32;
          v28 -= 2;
          v29 -= 4;
        }
        while (v29);
        unint64_t v17 = (uint64_t *)v26;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_14:
          *a3 = (uint64_t *)v22;
          a3[1] = (uint64_t *)v21;
          a3[2] = (uint64_t *)&v19[v18];
          if (v16) {
            operator delete(v16);
          }
          goto LABEL_16;
        }
      }
    }
    else
    {
      unint64_t v22 = &v19[((char *)v17 - (char *)v16) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v31 = *--v17;
      *((void *)v22 - 1) = v31;
      v22 -= 8;
    }
    while (v17 != v16);
    goto LABEL_14;
  }
LABEL_16:
  if (v93 <= v14) {
    int v32 = v9 + v93;
  }
  else {
    int v32 = v93;
  }
  int v91 = v32;
  if (v93 < v14)
  {
    unint64_t v33 = (void *)(v7 - 48);
    if (v14 <= v92) {
      int v34 = v92;
    }
    else {
      int v34 = v9 + v93;
    }
    unsigned int v94 = v93;
    unint64_t v95 = a3;
    uint64_t v89 = (void *)(v7 + 24);
    uint64_t v90 = v7;
    int v88 = v34;
    while (1)
    {
      uint64_t v35 = (unsigned char *)v11[1] - (unsigned char *)*v11;
      if (v35 >= 1) {
        memset_pattern16(*v11, &xmmword_20B8FC0, 8 * (((unint64_t)v35 >> 3) - ((unint64_t)v35 > 7)) + 8);
      }
      unsigned int v36 = *(_DWORD *)(*(void *)v7 + 4 * v94++);
      unsigned int v37 = *(_DWORD *)(*(void *)v7 + 4 * v94);
      BOOL v38 = v36 >= v37;
      if (v36 > v37) {
        unsigned int v37 = v36;
      }
      if (!v38)
      {
        do
        {
          unint64_t v63 = (unsigned int *)(*v33 + 12 * v36);
          *((void *)*v11 + *v63) = *(void *)(v63 + 1);
          unint64_t v64 = *v63;
          if (v64 >= v14) {
            *(void *)(*v12 + ((v64 >> 3) & 0x1FFFFFF8)) |= 1 << v64;
          }
          ++v36;
        }
        while (v37 != v36);
      }
      if (v14 < v92)
      {
        char v39 = 0;
        unsigned int v40 = v14;
        while (1)
        {
          uint64_t v41 = v40;
          uint64_t v42 = *(void *)(*v12 + 8 * ((unint64_t)v40 >> 6));
          if ((v42 & (1 << v40)) != 0)
          {
            *(void *)(*v12 + 8 * ((unint64_t)v40 >> 6)) = v42 & ~(1 << v40);
            unsigned int v43 = *(_DWORD *)(*(void *)v7 + 4 * v40++);
            unsigned int v44 = *(_DWORD *)(*(void *)v7 + 4 * v40);
            BOOL v45 = v43 >= v44;
            if (v43 > v44) {
              unsigned int v44 = v43;
            }
            if (!v45)
            {
              uint64_t v46 = (char *)*v11;
              do
              {
                unint64_t v47 = (unsigned int *)(*v33 + 12 * v43);
                uint64_t v48 = &v46[8 * v41];
                int v49 = *(_DWORD *)v48;
                int v50 = *((_DWORD *)v48 + 1);
                unint64_t v51 = *v47;
                uint64_t v52 = v47[1] + v49;
                uint64_t v53 = v47[2] + v50;
                uint64_t v54 = (unsigned int *)((char *)*v11 + 8 * v51);
                unsigned int v55 = *v54;
                if (*v54 == -1
                  || ((v56 = v54[1], v56 != 0x7FFFFFFF) ? (BOOL v57 = v52 >= v55) : (BOOL v57 = 0),
                      !v57 || (v55 >= v52 ? (BOOL v58 = (int)v53 < v56) : (BOOL v58 = 0), v58)))
                {
                  *(void *)uint64_t v54 = (v53 << 32) | v52;
                  if (v51 >= v14)
                  {
                    char v39 = 1;
                    *(void *)(*v12 + ((v51 >> 3) & 0x1FFFFFF8)) |= 1 << v51;
                  }
                }
                ++v43;
              }
              while (v44 != v43);
            }
          }
          else
          {
            ++v40;
          }
          char v59 = v39;
          if (v40 == v34)
          {
            char v39 = 0;
            unsigned int v40 = v14;
            if ((v59 & 1) == 0) {
              break;
            }
          }
        }
      }
      if (v93) {
        break;
      }
LABEL_24:
      uint64_t v12 = v89;
      uint64_t v7 = v90;
      int v34 = v88;
      if (v94 == v91) {
        goto LABEL_93;
      }
    }
    unint64_t v60 = (unsigned int *)*v11;
    uint64_t v61 = (uint64_t)*v11 + 8 * v93;
    uint64_t v62 = a3[1];
    uint64_t v96 = (unsigned int *)v61;
    while (1)
    {
      while (1)
      {
        unsigned int v65 = v60[1];
        BOOL v66 = *v60 != -1;
        BOOL v67 = v65 != 0x7FFFFFFF;
        uint64_t v68 = v66 && v67 ? *v60 : 0xFFFFFFFFLL;
        uint64_t v69 = v66 && v67 ? v65 : 0;
        unint64_t v70 = (unint64_t)a3[2];
        if ((unint64_t)v62 >= v70) {
          break;
        }
        *v62++ = v68 | (v69 << 32);
        a3[1] = v62;
        v60 += 2;
        if (v60 == (unsigned int *)v61) {
          goto LABEL_24;
        }
      }
      uint64_t v71 = *a3;
      uint64_t v72 = (char *)v62 - (char *)*a3;
      uint64_t v73 = v72 >> 3;
      unint64_t v74 = (v72 >> 3) + 1;
      if (v74 >> 61) {
        sub_2E00();
      }
      uint64_t v75 = v70 - (void)v71;
      if (v75 >> 2 > v74) {
        unint64_t v74 = v75 >> 2;
      }
      if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v97 = v74;
      if (v74)
      {
        if (v74 >> 61) {
          sub_188D718();
        }
        unint64_t v76 = operator new(8 * v74);
        uint64_t v77 = (uint64_t *)&v76[8 * v73];
        *uint64_t v77 = v68 | (v69 << 32);
        uint64_t v78 = (uint64_t)(v77 + 1);
        if (v62 == v71)
        {
LABEL_84:
          a3 = v95;
          *unint64_t v95 = v77;
          v95[1] = (uint64_t *)v78;
          v95[2] = (uint64_t *)&v76[8 * v97];
          if (!v62) {
            goto LABEL_81;
          }
LABEL_80:
          operator delete(v62);
          goto LABEL_81;
        }
      }
      else
      {
        unint64_t v76 = 0;
        uint64_t v77 = (uint64_t *)(8 * v73);
        *(void *)(8 * v73) = v68 | (v69 << 32);
        uint64_t v78 = 8 * v73 + 8;
        if (v62 == v71) {
          goto LABEL_84;
        }
      }
      unint64_t v79 = (char *)(v62 - 1) - (char *)v71;
      if (v79 < 0x168
        || &v76[v72 - 8 - (v79 & 0xFFFFFFFFFFFFFFF8)] > &v76[v72 - 8]
        || (uint64_t *)((char *)v62 - (v79 & 0xFFFFFFFFFFFFFFF8) - 8) > v62 - 1
        || (unint64_t)((char *)v62 - v76 - v72) < 0x20)
      {
        break;
      }
      uint64_t v82 = (v79 >> 3) + 1;
      uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v80 = &v62[v83 / 0xFFFFFFFFFFFFFFF8];
      uint64_t v77 = (uint64_t *)((char *)v77 - v83);
      uint64_t v84 = &v76[8 * v73 - 16];
      int v85 = v62 - 2;
      uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v87 = *(_OWORD *)v85;
        *(v84 - 1) = *((_OWORD *)v85 - 1);
        *uint64_t v84 = v87;
        v84 -= 2;
        v85 -= 4;
        v86 -= 4;
      }
      while (v86);
      a3 = v95;
      if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_78;
      }
LABEL_79:
      uint64_t v62 = *a3;
      *a3 = v77;
      a3[1] = (uint64_t *)v78;
      a3[2] = (uint64_t *)&v76[8 * v97];
      if (v62) {
        goto LABEL_80;
      }
LABEL_81:
      uint64_t v61 = (uint64_t)v96;
      a3[1] = (uint64_t *)v78;
      v60 += 2;
      uint64_t v62 = (uint64_t *)v78;
      if (v60 == v96) {
        goto LABEL_24;
      }
    }
    uint64_t v80 = v62;
    a3 = v95;
    do
    {
LABEL_78:
      uint64_t v81 = *--v80;
      *--uint64_t v77 = v81;
    }
    while (v80 != v71);
    goto LABEL_79;
  }
LABEL_93:

  sub_FB1414((uint64_t)a3);
}

uint64_t sub_FB32E8(uint64_t result, int a2)
{
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 1;
  }
  *(unsigned char *)(result + 45233) = v2;
  return result;
}

void sub_FB3300(uint64_t a1, unint64_t a2, _DWORD *a3, int *a4, signed int *a5, int a6, uint64_t a7)
{
  uint64_t v13 = a1 + 39944;
  *(void *)(a7 + 8) = *(void *)a7;
  unint64_t v119 = sub_F968AC(*(void *)(a1 + 39944), HIDWORD(a2) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(a2) << 32), (a2 & 2) == 0, a3);
  unint64_t v14 = HIDWORD(v119);
  if (v119) {
    BOOL v15 = HIDWORD(v119) == -1;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15)
  {
    int v16 = sub_F9CC14(*(void *)(v13 + 8), v119, 1);
    if (v16
      && (unint64_t v17 = &v16[-*(int *)v16], *(unsigned __int16 *)v17 >= 5u)
      && (uint64_t v18 = *((unsigned __int16 *)v17 + 2)) != 0
      && (uint64_t v19 = &v16[v18 + *(unsigned int *)&v16[v18]], *(_DWORD *)v19 > HIDWORD(v119))
      && (uint64_t v20 = &v19[4 * v14 + 4 + *(unsigned int *)&v19[4 * v14 + 4]],
          unint64_t v21 = &v20[-*(int *)v20],
          *(unsigned __int16 *)v21 >= 9u)
      && (uint64_t v22 = *((unsigned __int16 *)v21 + 4)) != 0)
    {
      int v23 = *(_DWORD *)&v20[v22 + *(unsigned int *)&v20[v22]];
      unint64_t v24 = sub_F9CC14(*(void *)(v13 + 8), v119, 1);
      if (!v24) {
        return;
      }
    }
    else
    {
      int v23 = 0;
      unint64_t v24 = sub_F9CC14(*(void *)(v13 + 8), v119, 1);
      if (!v24) {
        return;
      }
    }
    uint64_t v25 = &v24[-*(int *)v24];
    if (*(unsigned __int16 *)v25 >= 5u)
    {
      uint64_t v26 = *((unsigned __int16 *)v25 + 2);
      if (v26)
      {
        uint64_t v27 = &v24[v26 + *(unsigned int *)&v24[v26]];
        if (*(_DWORD *)v27 > HIDWORD(v119))
        {
          uint64_t v28 = &v27[4 * v14 + 4 + *(unsigned int *)&v27[4 * v14 + 4]];
          uint64_t v29 = &v28[-*(int *)v28];
          if (*(unsigned __int16 *)v29 >= 0xBu)
          {
            uint64_t v30 = *((unsigned __int16 *)v29 + 5);
            if (v30)
            {
              if (v23)
              {
                int v31 = *(_DWORD *)&v28[v30 + *(unsigned int *)&v28[v30]];
                if (v31)
                {
                  sub_FA56F0((uint64_t *)&v119, a4, a5, a6, a1 + 39984, *(_WORD *)(a1 + 3884), *(_DWORD *)(a1 + 3880), *(void **)(v13 + 24), (uint64_t)&v111, a1, *(void **)(v13 + 5280));
                  if (!sub_F06620(*(void *)(v13 + 24), v112)) {
                    goto LABEL_32;
                  }
                  if (v116) {
                    goto LABEL_32;
                  }
                  unint64_t v32 = v111;
                  unsigned int v33 = v112;
                  int v34 = v117;
                  uint64_t v35 = sub_383520(a1, v111, 1);
                  if (!v35) {
                    goto LABEL_32;
                  }
                  unsigned int v36 = &v35[-*(int *)v35];
                  if (*(unsigned __int16 *)v36 >= 0xFu
                    && *((_WORD *)v36 + 7)
                    && (unsigned int v37 = &v35[*((unsigned __int16 *)v36 + 7)
                                 + *(unsigned int *)&v35[*((unsigned __int16 *)v36 + 7)]],
                        *(_DWORD *)v37 > HIDWORD(v32))
                    && (BOOL v38 = &v37[4 * HIDWORD(v32) + 4 + *(unsigned int *)&v37[4 * HIDWORD(v32) + 4]],
                        char v39 = &v38[-*(int *)v38],
                        *(unsigned __int16 *)v39 >= 5u)
                    && (uint64_t v40 = *((unsigned __int16 *)v39 + 2)) != 0
                    && (uint64_t v41 = (unsigned int *)&v38[v40 + *(unsigned int *)&v38[v40]],
                        unsigned int v42 = v33 + *(_DWORD *)(a1 + 3872) * v34,
                        v42 < *v41)
                    && v41[v42 + 1] != -1)
                  {
                    sub_FAC3C4(a1, v119, a2, v112, v117, (char **)a7);
                  }
                  else
                  {
LABEL_32:
                    unint64_t v43 = (HIDWORD(v111)
                         + ((unint64_t)v111 << 6)
                         + ((unint64_t)v111 >> 2)
                         + 2654435769u) ^ v111;
                    unint64_t v44 = (v112 + (v43 << 6) + (v43 >> 2) + 2654435769u) ^ v43;
                    unint64_t v45 = (v113 + (v44 << 6) + (v44 >> 2) + 2654435769u) ^ v44;
                    unint64_t v46 = (v114 + (v45 << 6) + (v45 >> 2) + 2654435769u) ^ v45;
                    unint64_t v47 = (v115 + (v46 << 6) + (v46 >> 2) + 2654435769u) ^ v46;
                    unint64_t v48 = (v116 + (v47 << 6) + (v47 >> 2) + 2654435769u) ^ v47;
                    unint64_t v49 = (v117 + (v48 << 6) + (v48 >> 2) + 2654435769u) ^ v48;
                    sub_FAA4F0((uint64_t *)(*(void *)(*(void *)(v13 + 32) + 16)+ 272* (((v118 + (v49 << 6) + (v49 >> 2) + 2654435769u) ^ v49) % **(void **)(v13 + 32))), (unsigned int *)&v111, (uint64_t)&v108);
                    if (v110)
                    {
                      unint64_t v106 = v108;
                      uint64_t v107 = v109;
                      if (v109) {
                        atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                    }
                    else
                    {
                      sub_FB1CD4(&v106, a1, &v119, a4, a5, v116);
                    }
                    unint64_t v50 = v119;
                    unint64_t v51 = sub_F9CC14(a1, v119, 1);
                    if (!v51) {
                      goto LABEL_50;
                    }
                    uint64_t v52 = &v51[-*(int *)v51];
                    if (*(unsigned __int16 *)v52 < 5u) {
                      goto LABEL_50;
                    }
                    if (!*((_WORD *)v52 + 2)) {
                      goto LABEL_50;
                    }
                    uint64_t v53 = &v51[*((unsigned __int16 *)v52 + 2) + *(unsigned int *)&v51[*((unsigned __int16 *)v52 + 2)]];
                    if (*(_DWORD *)v53 <= HIDWORD(v50)) {
                      goto LABEL_50;
                    }
                    uint64_t v54 = &v53[4 * HIDWORD(v50) + 4 + *(unsigned int *)&v53[4 * HIDWORD(v50) + 4]];
                    unsigned int v55 = &v54[-*(int *)v54];
                    if (*(unsigned __int16 *)v55 < 9u) {
                      goto LABEL_50;
                    }
                    uint64_t v56 = *((unsigned __int16 *)v55 + 4);
                    if (!v56) {
                      goto LABEL_50;
                    }
                    BOOL v57 = &v54[v56 + *(unsigned int *)&v54[v56]];
                    unsigned int v60 = *(_DWORD *)v57;
                    BOOL v58 = v57 + 4;
                    unint64_t v59 = v60;
                    uint64_t v61 = &v58[8 * v60];
                    uint64_t v62 = v58;
                    while (v59)
                    {
                      unint64_t v63 = (unint64_t *)&v62[(4 * v59) & 0x7FFFFFFF8];
                      unint64_t v65 = *v63;
                      unint64_t v64 = (char *)(v63 + 1);
                      unint64_t v66 = v59 >> 1;
                      v59 += ~(v59 >> 1);
                      if (v65 >= a2) {
                        unint64_t v59 = v66;
                      }
                      else {
                        uint64_t v62 = v64;
                      }
                    }
                    if (v62 != v61 && *(void *)v62 == a2) {
                      unint64_t v67 = (unint64_t)(v62 - v58) >> 3;
                    }
                    else {
LABEL_50:
                    }
                      LOWORD(v67) = -1;
                    unint64_t v68 = v119;
                    uint64_t v69 = sub_F9CC14(a1, v119, 1);
                    if (v69)
                    {
                      unint64_t v70 = &v69[-*(int *)v69];
                      if (*(unsigned __int16 *)v70 >= 5u)
                      {
                        if (*((_WORD *)v70 + 2))
                        {
                          uint64_t v71 = &v69[*((unsigned __int16 *)v70 + 2)
                                   + *(unsigned int *)&v69[*((unsigned __int16 *)v70 + 2)]];
                          if (*(_DWORD *)v71 > HIDWORD(v68))
                          {
                            uint64_t v72 = &v71[4 * HIDWORD(v68) + 4 + *(unsigned int *)&v71[4 * HIDWORD(v68) + 4]];
                            uint64_t v73 = &v72[-*(int *)v72];
                            if (*(unsigned __int16 *)v73 >= 0xBu)
                            {
                              uint64_t v74 = *((unsigned __int16 *)v73 + 5);
                              if (v74)
                              {
                                uint64_t v75 = &v72[v74 + *(unsigned int *)&v72[v74]];
                                unsigned int v78 = *(_DWORD *)v75;
                                uint64_t v77 = (uint64_t *)(v75 + 4);
                                uint64_t v76 = v78;
                                if (v78)
                                {
                                  int v79 = 0;
                                  unsigned int v80 = v31 * (unsigned __int16)v67;
                                  uint64_t v81 = &v77[v76];
                                  __int16 v105 = v67;
                                  uint64_t v103 = v81;
                                  do
                                  {
                                    while (1)
                                    {
                                      uint64_t v82 = v80;
                                      uint64_t v83 = *(unsigned int *)(*v106 + 8 * v80);
                                      unint64_t v84 = v83 == -1
                                          ? 0x7FFFFFFF00000000
                                          : (unint64_t)*(unsigned int *)(*v106 + 8 * v82 + 4) << 32;
                                      uint64_t v85 = *v77;
                                      unint64_t v86 = v84 | v83;
                                      unint64_t v88 = *(void *)(a7 + 8);
                                      unint64_t v87 = *(void *)(a7 + 16);
                                      if (v88 >= v87) {
                                        break;
                                      }
                                      *(void *)unint64_t v88 = a2;
                                      *(void *)(v88 + 8) = v85;
                                      *(void *)(v88 + 16) = v119;
                                      *(_WORD *)(v88 + 24) = v67;
                                      *(_WORD *)(v88 + 26) = v79;
                                      *(void *)(v88 + 28) = v86;
                                      *(void *)(a7 + 8) = v88 + 40;
                                      unsigned int v80 = v82 + 1;
                                      ++v79;
                                      if (++v77 == v81) {
                                        goto LABEL_79;
                                      }
                                    }
                                    uint64_t v89 = *(char **)a7;
                                    unint64_t v90 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v88 - *(void *)a7) >> 3);
                                    unint64_t v91 = v90 + 1;
                                    if (v90 + 1 > 0x666666666666666) {
                                      sub_2E00();
                                    }
                                    int v104 = v82;
                                    unint64_t v92 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v87 - (void)v89) >> 3);
                                    if (2 * v92 > v91) {
                                      unint64_t v91 = 2 * v92;
                                    }
                                    if (v92 >= 0x333333333333333) {
                                      unint64_t v93 = 0x666666666666666;
                                    }
                                    else {
                                      unint64_t v93 = v91;
                                    }
                                    if (v93 > 0x666666666666666) {
                                      sub_188D718();
                                    }
                                    unsigned int v94 = (char *)operator new(40 * v93);
                                    unint64_t v95 = &v94[40 * v90];
                                    *(void *)unint64_t v95 = a2;
                                    *((void *)v95 + 1) = v85;
                                    *((void *)v95 + 2) = v119;
                                    *((_WORD *)v95 + 12) = v105;
                                    *((_WORD *)v95 + 13) = v79;
                                    *(void *)(v95 + 28) = v86;
                                    if ((char *)v88 == v89)
                                    {
                                      unint64_t v99 = &v94[40 * v90];
                                    }
                                    else
                                    {
                                      uint64_t v96 = &v94[40 * v90];
                                      do
                                      {
                                        long long v97 = *(_OWORD *)(v88 - 40);
                                        long long v98 = *(_OWORD *)(v88 - 24);
                                        unint64_t v99 = v96 - 40;
                                        *((_DWORD *)v96 - 2) = *(_DWORD *)(v88 - 8);
                                        *(_OWORD *)(v96 - 24) = v98;
                                        *(_OWORD *)(v96 - 40) = v97;
                                        v88 -= 40;
                                        v96 -= 40;
                                      }
                                      while ((char *)v88 != v89);
                                    }
                                    uint64_t v100 = v95 + 40;
                                    *(void *)a7 = v99;
                                    *(void *)(a7 + 8) = v95 + 40;
                                    *(void *)(a7 + 16) = &v94[40 * v93];
                                    if (v89) {
                                      operator delete(v89);
                                    }
                                    LOWORD(v67) = v105;
                                    uint64_t v81 = v103;
                                    *(void *)(a7 + 8) = v100;
                                    unsigned int v80 = v104 + 1;
                                    ++v79;
                                    ++v77;
                                  }
                                  while (v77 != v103);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
LABEL_79:
                    int v101 = v107;
                    if (v107 && !atomic_fetch_add(&v107->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                      std::__shared_weak_count::__release_weak(v101);
                    }
                    uint64_t v102 = v109;
                    if (v109)
                    {
                      if (!atomic_fetch_add(&v109->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                        std::__shared_weak_count::__release_weak(v102);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_FB3AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_14A84((uint64_t)va1);
  _Unwind_Resume(a1);
}

int *sub_FB3AF0(uint64_t a1, unint64_t *a2, unsigned int *a3, char a4)
{
  uint64_t v7 = (void *)(a1 + 45240);
  uint64_t v8 = (uint64_t *)(a1 + 39952);
  uint64_t v9 = *(void *)(a1 + 45240) + 960 * *a3;
  unint64_t v10 = *a2;
  uint64_t v11 = sub_F9CC14(*(void *)(a1 + 39952), *a2, 1);
  char v42 = a4;
  if (v11
    && (uint64_t v12 = &v11[-*(int *)v11], *(unsigned __int16 *)v12 >= 5u)
    && *((_WORD *)v12 + 2)
    && (uint64_t v13 = &v11[*((unsigned __int16 *)v12 + 2) + *(unsigned int *)&v11[*((unsigned __int16 *)v12 + 2)]],
        *(_DWORD *)v13 > HIDWORD(v10))
    && (unint64_t v14 = &v13[4 * HIDWORD(v10) + 4 + *(unsigned int *)&v13[4 * HIDWORD(v10) + 4]],
        BOOL v15 = &v14[-*(int *)v14],
        *(unsigned __int16 *)v15 >= 0xBu)
    && (uint64_t v16 = *((unsigned __int16 *)v15 + 5)) != 0)
  {
    unint64_t v17 = &v14[v16];
    uint64_t v18 = *(unsigned int *)v17;
    uint64_t v19 = (uint64_t *)&v17[v18 + 4];
    uint64_t v20 = &v19[*(unsigned int *)&v17[v18]];
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v19 = 0;
  }
  unint64_t v21 = (unsigned int *)(v9 + 952);
  *(_DWORD *)(*v7 + 960 * *a3 + 948) = (unint64_t)((char *)v20 - (char *)v19) >> 3;
  if (v20 == v19)
  {
    unsigned int v22 = *v21;
  }
  else
  {
    do
    {
      uint64_t v44 = *v19;
      sub_EE1844(v9 + 176, &v44, (uint64_t)&v45);
      uint64_t v23 = v46;
      uint64_t v24 = *(void *)(v45 + 8);
      if (v47)
      {
        uint64_t v25 = v24 + 16 * v46;
        *(void *)uint64_t v25 = v44;
        *(_DWORD *)(v25 + 8) = -1;
      }
      *(_DWORD *)(v24 + 16 * v23 + 8) = *v21;
      unsigned int v22 = *v21 + 1;
      *unint64_t v21 = v22;
      ++v19;
    }
    while (v19 != v20);
  }
  LODWORD(v45) = 0;
  unint64_t v26 = (uint64_t)(*(void *)(v9 + 136) - *(void *)(v9 + 128)) >> 2;
  if (v22 <= v26)
  {
    if (v22 < v26) {
      *(void *)(v9 + 136) = *(void *)(v9 + 128) + 4 * v22;
    }
  }
  else
  {
    sub_500DC(v9 + 128, v22 - v26, (const float *)&v45);
  }
  unint64_t v27 = *a2;
  uint64_t result = (int *)sub_F9CC14(*v8, *a2, 1);
  if (result
    && (uint64_t v29 = (unsigned __int16 *)((char *)result - *result), *v29 >= 5u)
    && v29[2]
    && (uint64_t v30 = (int *)((char *)result + v29[2] + *(unsigned int *)((char *)result + v29[2])), *v30 > HIDWORD(v27))
    && (int v31 = (_DWORD *)((char *)&v30[HIDWORD(v27) + 1] + v30[HIDWORD(v27) + 1]),
        unint64_t v32 = (unsigned __int16 *)((char *)v31 - *v31),
        *v32 >= 9u)
    && (uint64_t v33 = v32[4]) != 0)
  {
    int v34 = (unsigned int *)((char *)v31 + v33);
    uint64_t v35 = *v34;
    unsigned int v36 = (uint64_t *)((char *)v34 + v35 + 4);
    unsigned int v37 = &v36[*(unsigned int *)((char *)v34 + v35)];
  }
  else
  {
    unsigned int v37 = 0;
    unsigned int v36 = 0;
  }
  *(_DWORD *)(*v7 + 960 * *a3 + 944) = (unint64_t)((char *)v37 - (char *)v36) >> 3;
  if (v37 != v36)
  {
    if (v42)
    {
      do
      {
        uint64_t v44 = 0;
        uint64_t v43 = *v36;
        uint64_t v44 = v43;
        sub_EE1844(v9 + 176, &v43, (uint64_t)&v45);
        uint64_t v39 = v46;
        uint64_t v40 = *(void *)(v45 + 8);
        if (v47)
        {
          uint64_t v41 = v40 + 16 * v46;
          *(void *)uint64_t v41 = v43;
          *(_DWORD *)(v41 + 8) = -1;
        }
        *(_DWORD *)(v40 + 16 * v39 + 8) = *v21;
        uint64_t result = (int *)sub_A4710(v9, &v44);
        ++*v21;
        ++v36;
      }
      while (v36 != v37);
    }
    else
    {
      do
      {
        uint64_t v44 = 0;
        uint64_t v38 = *v36++;
        uint64_t v44 = v38;
        uint64_t result = (int *)sub_A4710(v9, &v44);
        ++*v21;
      }
      while (v36 != v37);
    }
  }
  return result;
}

uint64_t sub_FB3E5C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 a7, uint64_t a8, uint64_t a9)
{
  sub_3838DC(a1, a2);
  *(_DWORD *)(a1 + 3880) = sub_29AEB4(a6);
  *(_WORD *)(a1 + 3884) = a7;
  uint64_t v17 = a2[1];
  uint64_t v46 = *a2;
  char v47 = (std::__shared_weak_count *)v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  sub_327C18(a1 + 3888, &v46);
  uint64_t v45 = a3;
  uint64_t v18 = v47;
  if (v47 && !atomic_fetch_add(&v47->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = (uint64_t *)(a1 + 35880);
  uint64_t v20 = *a2;
  uint64_t v21 = a2[1];
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 11712) = v20;
  uint64_t v22 = -3840;
  *(void *)(a1 + 11720) = v21;
  do
  {
    uint64_t v23 = a1 + v22;
    *(_DWORD *)(v23 + 15568) = 0;
    *(_DWORD *)(v23 + 15592) = 0;
    *(void *)(v23 + 15576) = 0;
    *(void *)(v23 + 15600) = 0;
    v22 += 48;
  }
  while (v22);
  *(_OWORD *)(a1 + 15568) = 0u;
  uint64_t v25 = *a2;
  uint64_t v24 = a2[1];
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = 0;
  *(void *)(a1 + 15584) = v25;
  *(void *)(a1 + 15592) = v24;
  do
  {
    uint64_t v27 = a1 + v26;
    *(_DWORD *)(v27 + 15600) = 0;
    *(_DWORD *)(v27 + 15624) = 0;
    *(void *)(v27 + 15608) = 0;
    *(void *)(v27 + 15632) = 0;
    v26 += 48;
  }
  while (v26 != 3840);
  *(_OWORD *)(a1 + 19440) = 0u;
  uint64_t v28 = (void **)*a2;
  *(_DWORD *)(a1 + 19456) = -1;
  if (v28) {
    LOBYTE(v28) = sub_2ABCE4(v28);
  }
  *(unsigned char *)(a1 + 19460) = (_BYTE)v28;
  sub_327FD8(a1 + 19464, a2, a7, 0);
  uint64_t v30 = *a2;
  uint64_t v29 = a2[1];
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v31 = 0;
  *(void *)(a1 + 23352) = v30;
  *(void *)(a1 + 23360) = v29;
  uint64_t v32 = a1 + 23392;
  do
  {
    *(_DWORD *)(v32 + v31) = 0;
    *(_DWORD *)(v32 + v31 - 24) = 0;
    uint64_t v33 = a1 + v31;
    *(void *)(v33 + 23376) = 0;
    *(void *)(v33 + 23400) = 0;
    v31 += 48;
  }
  while (v31 != 3840);
  *(_DWORD *)(a1 + 27223) = 0;
  *(_OWORD *)(a1 + 27208) = 0u;
  sub_327DC8((uint64_t *)(a1 + 27232), a2, 255);
  *(void *)(a1 + 31896) = a6;
  uint64_t v34 = *a2;
  uint64_t v35 = (std::__shared_weak_count *)a2[1];
  if (v35)
  {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v36 = 0;
  *(void *)(a1 + 31904) = v34;
  *(void *)(a1 + 31912) = v35;
  uint64_t v37 = a1 + 31944;
  do
  {
    *(_DWORD *)(v37 + v36) = 0;
    *(_DWORD *)(v37 + v36 - 24) = 0;
    uint64_t v38 = a1 + v36;
    *(void *)(v38 + 31928) = 0;
    *(void *)(v38 + 31952) = 0;
    v36 += 48;
  }
  while (v36 != 3840);
  *(_OWORD *)(a1 + 35760) = 0u;
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  sub_FB6718(a1 + 35776, (char *)a8);
  *(void *)(a1 + 35872) = *(void *)(a8 + 96);
  *uint64_t v19 = a1 + 15584;
  *(void *)(a1 + 35888) = a1;
  *(void *)(a1 + 35896) = a4;
  *(void *)(a1 + 35904) = v45;
  *(void *)(a1 + 35912) = a9;
  sub_F6DA80((void *)(a1 + 35920), a1 + 3888, a1 + 19464, a1 + 31904, a4);
  *(void *)(a1 + 35952) = a5;
  *(unsigned char *)(a1 + 35960) = sub_2ABCE4((void **)*a2);
  *(unsigned char *)(a1 + 35961) = 0;
  *(void *)(a1 + 35968) = 0;
  *(void *)(a1 + 35976) = 0;
  *(void *)(a1 + 35984) = 0;
  unint64_t v39 = sub_F78BBC(v19);
  uint64_t v41 = *(void *)(a1 + 35968);
  uint64_t v40 = *(void *)(a1 + 35976);
  unint64_t v42 = 0xEEEEEEEEEEEEEEEFLL * ((v40 - v41) >> 6);
  if (v39 <= v42)
  {
    if (v39 < v42)
    {
      for (uint64_t i = v41 + 960 * v39; v40 != i; v40 = sub_FAB36C(v40 - 960))
        ;
      *(void *)(a1 + 35976) = i;
    }
  }
  else
  {
    sub_FB71F0((uint64_t *)(a1 + 35968), v39 - v42);
  }
  return a1;
}

void sub_FB423C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, _Unwind_Exception *a19)
{
  uint64_t v21 = *(void *)(v19 + 15592);
  if (v21)
  {
    sub_20B192C(v21);
    a1 = a19;
  }
  sub_14A84(a12);
  sub_32834C(a16);
  sub_14A84(v19);
  _Unwind_Resume(a1);
}

void sub_FB430C(uint64_t a1, uint64_t a2)
{
  *(void *)(sub_ED9920(a1) + 96) = a2;
}

void sub_FB4398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_FB43AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  uint64_t v12 = (uint64_t *)sub_374CE4(a2);
  uint64_t v13 = sub_3777C0(a2);
  uint64_t v14 = sub_374D14(a2);
  sub_FB430C((uint64_t)v19, a1 + 3888);
  sub_FB3E5C(a1, v12, a3, v13, a4, v14, a6, (uint64_t)v19, a5);
  if (__p)
  {
    uint64_t v25 = __p;
    operator delete(__p);
  }
  BOOL v15 = v23;
  if (v23)
  {
    do
    {
      uint64_t v16 = (void *)*v15;
      operator delete(v15);
      BOOL v15 = v16;
    }
    while (v16);
  }
  uint64_t v17 = v22;
  uint64_t v22 = 0;
  if (v17) {
    operator delete(v17);
  }
  if (v20)
  {
    uint64_t v21 = v20;
    operator delete(v20);
  }
  return a1;
}

void sub_FB44AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3821F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_FB44C0(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, int *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v9 = (uint64_t *)(a1 + 35880);
  unsigned int v10 = *a2;
  uint64_t v54 = (unint64_t *)a2;
  if (!v10) {
    goto LABEL_9;
  }
  uint64_t v11 = sub_F93238(*v9, v10, 1);
  if (!v11 || (uint64_t v12 = &v11[-*(int *)v11], *(unsigned __int16 *)v12 < 9u) || (v13 = *((unsigned __int16 *)v12 + 4)) == 0)
  {
    LODWORD(v16) = -1;
    goto LABEL_10;
  }
  uint64_t v14 = (int *)sub_F930D4((unsigned int *)&v11[v13 + *(unsigned int *)&v11[v13]], a2[1]);
  BOOL v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 < 5u)
  {
LABEL_9:
    LODWORD(v16) = 0;
    goto LABEL_10;
  }
  uint64_t v16 = v15[2];
  if (v16) {
    LODWORD(v16) = *((unsigned __int8 *)v14 + v16);
  }
LABEL_10:
  uint64_t v17 = 0;
  unsigned int v68 = v16;
  unsigned int v52 = v16;
  uint64_t v18 = v9[11];
  uint64_t v19 = v18 + 960 * v16;
  *(void *)(v19 + 8) = *(void *)v19;
  *(_DWORD *)(v19 + 24) = 0;
  *(void *)(v19 + 40) = *(void *)(v19 + 32);
  *(void *)(v19 + 64) = *(void *)(v19 + 56);
  *(void *)(v19 + 88) = *(void *)(v19 + 80);
  *(void *)(v19 + 112) = *(void *)(v19 + 104);
  *(void *)(v19 + 136) = *(void *)(v19 + 128);
  *(void *)(v19 + 160) = 0;
  do
  {
    uint64_t v21 = v19 + v17;
    if (*(void *)(v19 + v17 + 192))
    {
      unint64_t v22 = *(void *)(v21 + 200);
      if (v22 >= 0x80)
      {
        uint64_t v20 = (void *)(v19 + v17);
        operator delete(*(void **)(v21 + 176));
        *(void *)(v21 + 176) = &unk_20E1710;
        v20[27] = 0;
        v20[24] = 0;
        v20[25] = 0;
        v20[23] = 0;
      }
      else if (v22)
      {
        *(void *)(v21 + 192) = 0;
        memset(*(void **)(v21 + 176), 128, v22 + 8);
        *(unsigned char *)(*(void *)(v21 + 176) + v22) = -1;
        unint64_t v23 = *(void *)(v21 + 200);
        if (v23 == 7) {
          uint64_t v24 = 6;
        }
        else {
          uint64_t v24 = v23 - (v23 >> 3);
        }
        *(void *)(v19 + v17 + 216) = v24 - *(void *)(v21 + 192);
      }
    }
    v17 += 48;
  }
  while (v17 != 768);
  uint64_t v25 = v18 + 960 * v52;
  *(void *)(v25 + 944) = 0;
  *(_DWORD *)(v25 + 952) = 0;
  __int16 v50 = *(_WORD *)(a1 + 3884);
  int v26 = *(_DWORD *)(a1 + 3880);
  unint64_t v51 = (void *)v9[3];
  unsigned int v27 = sub_F6F0D8();
  uint64_t v28 = v9;
  if (sub_35E640()) {
    int v29 = *a4;
  }
  else {
    int v29 = 0x7FFFFFFF;
  }
  int v30 = sub_35E640();
  int v31 = *a4;
  if (!v30) {
    int v31 = 0x7FFFFFFF;
  }
  unsigned int v32 = *a3;
  unint64_t v69 = *v54;
  unint64_t v70 = __PAIR64__(v27, v32);
  int v71 = v29;
  int v72 = v31;
  char v73 = a5;
  __int16 v74 = v50;
  int v75 = v26;
  char v76 = 0;
  int v77 = 0x7FFFFFFF;
  sub_FAD72C((uint64_t *)&v69, v51, a1, (uint64_t)&v57);
  unint64_t v33 = (v58 + ((unint64_t)v57 << 6) + ((unint64_t)v57 >> 2) + 2654435769u) ^ v57;
  unint64_t v34 = (v59 + (v33 << 6) + (v33 >> 2) + 2654435769u) ^ v33;
  unint64_t v35 = (v60 + (v34 << 6) + (v34 >> 2) + 2654435769u) ^ v34;
  unint64_t v36 = (v61 + (v35 << 6) + (v35 >> 2) + 2654435769u) ^ v35;
  unint64_t v37 = (v62 + (v36 << 6) + (v36 >> 2) + 2654435769u) ^ v36;
  unint64_t v38 = (v63 + (v37 << 6) + (v37 >> 2) + 2654435769u) ^ v37;
  unint64_t v39 = (v64 + (v38 << 6) + (v38 >> 2) + 2654435769u) ^ v38;
  sub_FAA4F0((uint64_t *)(*(void *)(v28[4] + 16)+ 272 * (((v65 + (v39 << 6) + (v39 >> 2) + 2654435769u) ^ v39) % *(void *)v28[4])), &v57, (uint64_t)&v69);
  if ((_BYTE)v71)
  {
    unint64_t v40 = v70;
    *(void *)a6 = v69;
    *(void *)(a6 + 8) = v40;
    if (v40) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v41 = operator new(0x30uLL);
    v41[1] = 0;
    v41[2] = 0;
    *uint64_t v41 = off_243F2A0;
    v41[4] = 0;
    v41[5] = 0;
    _OWORD v41[3] = 0;
    *(void *)a6 = v41 + 3;
    *(void *)(a6 + 8) = v41;
    sub_FB4A40(a1, v54, &v68, a3, a4, v63);
    sub_FB5514(a1, &v68, *(uint64_t ***)a6);
    char v66 = *((unsigned char *)v28 + 81);
    int v67 = *a4;
    unint64_t v42 = (v58 + 2654435769 + ((unint64_t)v57 << 6) + ((unint64_t)v57 >> 2)) ^ v57;
    unint64_t v43 = (v59 + 2654435769 + (v42 << 6) + (v42 >> 2)) ^ v42;
    unint64_t v44 = (v60 + 2654435769 + (v43 << 6) + (v43 >> 2)) ^ v43;
    unint64_t v45 = (v61 + 2654435769 + (v44 << 6) + (v44 >> 2)) ^ v44;
    unint64_t v46 = (v62 + 2654435769 + (v45 << 6) + (v45 >> 2)) ^ v45;
    unint64_t v47 = (v63 + 2654435769 + (v46 << 6) + (v46 >> 2)) ^ v46;
    unint64_t v48 = (v64 + 2654435769 + (v47 << 6) + (v47 >> 2)) ^ v47;
    sub_FB7698(*(void *)(v28[4] + 16) + 272 * (((v65 + 2654435769 + (v48 << 6) + (v48 >> 2)) ^ v48) % *(void *)v28[4]), &v57, (uint64_t *)a6, *(void *)(*(void *)a6 + 16) - **(void **)a6 + 40);
  }
  unint64_t v49 = (std::__shared_weak_count *)v70;
  if (v70)
  {
    if (!atomic_fetch_add((atomic_ullong *volatile)(v70 + 8), 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_FB4A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_14A84(v17);
  sub_14A84((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FB4A40(uint64_t a1, unint64_t *a2, unsigned int *a3, unsigned int *a4, int *a5, uint64_t a6)
{
  uint64_t v8 = (void *)(a1 + 35968);
  sub_FB6318(a1, a2, a3, 0);
  unint64_t v165 = a3;
  unsigned int v9 = *a3;
  int v167 = *a3 - 1;
  v162 = v8;
  uint64_t v10 = *v8 + 960 * v9;
  uint64_t v11 = (_DWORD *)(v10 + 24);
  uint64_t v12 = *(unsigned int *)(v10 + 24);
  uint64_t v13 = (void *)(v10 + 128);
  uint64_t v14 = (void **)(v10 + 80);
  uint64_t v15 = *(void *)v10;
  int v160 = (uint64_t *)v10;
  char v161 = (void *)(v10 + 128);
  if (v12 != (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3)
  {
    long long v159 = (unsigned int *)(v10 + 24);
    int v155 = (uint64_t *)(v10 + 56);
    unsigned int v156 = (uint64_t *)(v10 + 32);
    while (1)
    {
      uint64_t v20 = a6;
      *uint64_t v11 = v12 + 1;
      int v21 = -1431655765 * ((unint64_t)((unsigned char *)v14[1] - (unsigned char *)*v14) >> 2);
      unint64_t v23 = (char *)v13[1];
      unint64_t v22 = v13[2];
      if ((unint64_t)v23 < v22)
      {
        *(_DWORD *)unint64_t v23 = v21;
        uint64_t v24 = (uint64_t)(v23 + 4);
        a6 = v20;
        goto LABEL_27;
      }
      uint64_t v25 = (char *)*v13;
      uint64_t v26 = (uint64_t)&v23[-*v13];
      uint64_t v27 = v26 >> 2;
      unint64_t v28 = (v26 >> 2) + 1;
      if (v28 >> 62) {
        goto LABEL_136;
      }
      uint64_t v29 = v22 - (void)v25;
      if (v29 >> 1 > v28) {
        unint64_t v28 = v29 >> 1;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      unint64_t v158 = v28;
      if (v28)
      {
        if (v28 >> 62) {
          goto LABEL_134;
        }
        int v30 = operator new(4 * v28);
        int v31 = &v30[4 * v27];
        *int v31 = v21;
        uint64_t v24 = (uint64_t)(v31 + 1);
        if (v23 == v25)
        {
LABEL_19:
          uint64_t v13 = v161;
          a6 = v20;
          unint64_t v33 = v158;
          goto LABEL_25;
        }
      }
      else
      {
        int v30 = 0;
        int v31 = (_DWORD *)(4 * v27);
        *(_DWORD *)(4 * v27) = v21;
        uint64_t v24 = 4 * v27 + 4;
        if (v23 == v25) {
          goto LABEL_19;
        }
      }
      unint64_t v32 = v23 - 4 - v25;
      a6 = v20;
      unint64_t v33 = v158;
      if (v32 < 0x2C) {
        break;
      }
      unint64_t v34 = v23 - &v30[v26];
      uint64_t v13 = v161;
      if (v34 < 0x20) {
        goto LABEL_24;
      }
      uint64_t v35 = (v32 >> 2) + 1;
      uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v37 = &v23[-v36];
      int v31 = (_DWORD *)((char *)v31 - v36);
      unint64_t v38 = &v30[4 * v27 - 16];
      unint64_t v39 = v23 - 16;
      uint64_t v40 = v35 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v41 = *(_OWORD *)v39;
        *(v38 - 1) = *((_OWORD *)v39 - 1);
        *unint64_t v38 = v41;
        v38 -= 2;
        v39 -= 32;
        v40 -= 8;
      }
      while (v40);
      unint64_t v23 = v37;
      if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_24;
      }
LABEL_25:
      void *v13 = v31;
      v13[1] = v24;
      v13[2] = &v30[4 * v33];
      if (v25) {
        operator delete(v25);
      }
LABEL_27:
      unint64_t v43 = (unsigned int *)(v15 + 8 * v12);
      v13[1] = v24;
      if (!*(unsigned char *)(a1 + 11662)
        || (v44 = *(_DWORD *)(v15 + 8 * v12 + 4), uint64_t v45 = *v43, (v46 = sub_290DEC(a1 + 7784, *v43, 1)) != 0)
        && (unint64_t v47 = &v46[-*(int *)v46], *(unsigned __int16 *)v47 >= 5u)
        && (uint64_t v48 = *((unsigned __int16 *)v47 + 2)) != 0
        && *(_DWORD *)&v46[v48 + *(unsigned int *)&v46[v48]] > (v44 & 0xFFFFFFFu)
        && sub_295DB4(a1 + 3888, v45 & 0xF0000000FFFFFFFFLL | ((unint64_t)(v44 & 0xFFFFFFF) << 32)))
      {
        unint64_t v49 = *(void *)v43;
        if (*v165 == 1)
        {
          sub_EDA198((unsigned __int8 *)(a1 + 35776), v49, 0, (uint64_t)v156);
          uint64_t v51 = *v156;
          uint64_t v50 = v160[5];
          while (1)
          {
            if (v51 == v50) {
              goto LABEL_5;
            }
            unint64_t v54 = sub_F6DA00((uint64_t *)(a1 + 35920), v51, (uint64_t)a4);
            BOOL v55 = v54 == -1 || (v54 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000;
            if (!v55 && v53 != 0x7FFFFFFFFFFFFFFFLL) {
              break;
            }
LABEL_37:
            v51 += 104;
          }
          uint64_t v57 = 0;
          uint64_t v58 = *(void *)(v51 + 48);
          unsigned int v59 = *(_DWORD *)(v51 + 96);
          uint64_t v60 = ((unint64_t)v58 >> 33) & 0x10000000;
          unsigned int v61 = HIDWORD(v58) & 0x40000000;
          if (v58 < 0 && v61 == 0) {
            unsigned int v63 = 0x40000000;
          }
          else {
            unsigned int v63 = 0;
          }
          unsigned int v64 = HIDWORD(v58) & 0xFFFFFFF | (v61 >> 1) | (v59 >> 28 << 31) | v63 | v60;
          unint64_t v166 = v58 | ((unint64_t)v64 << 32);
          uint64_t v65 = *v162 + 960 * *v165 + 176;
          unint64_t v66 = 0x2127599BF4325C37
              * ((((v58 << 32) + 16 * HIDWORD(v58)) | (v63 >> 29) & 0xFFFFFFFE | (v59 >> 28) & 1 | (v61 >> 28) | (v60 >> 25)) ^ ((unint64_t)((v58 << 32) + 16 * HIDWORD(v58)) >> 23));
          unint64_t v67 = (v66 ^ ~(v66 >> 47)) + ((v66 ^ (v66 >> 47)) << 21);
          unint64_t v68 = 21 * ((265 * (v67 ^ (v67 >> 24))) ^ ((265 * (v67 ^ (v67 >> 24))) >> 14));
          unint64_t v69 = 2147483649u * (v68 ^ (v68 >> 28));
          unint64_t v70 = (void *)(v65
                         + 48
                         * (((((unsigned __int16)(v68 ^ (v68 >> 28)) >> 8) ^ ((-2147483647
                                                                                              * (v68 ^ (v68 >> 28))) >> 16)) ^ ((-2147483647 * (v68 ^ (v68 >> 28))) >> 24)) & 0xF));
          unint64_t v71 = v69 >> 7;
          uint64_t v72 = v70[3];
          uint64_t v73 = 0x101010101010101 * (v69 & 0x7F);
          while (1)
          {
            unint64_t v74 = v71 & v72;
            uint64_t v75 = *(void *)(*v70 + v74);
            unint64_t v76 = ((v75 ^ v73) - 0x101010101010101) & ~(v75 ^ v73) & 0x8080808080808080;
            if (v76) {
              break;
            }
LABEL_59:
            if ((v75 & (~v75 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_62;
            }
            v57 += 8;
            unint64_t v71 = v57 + v74;
          }
          while (1)
          {
            unint64_t v77 = (v74 + (__clz(__rbit64(v76)) >> 3)) & v72;
            unsigned int v78 = (_DWORD *)(v70[1] + 16 * v77);
            if (*v78 == v58 && v78[1] == v64) {
              break;
            }
            v76 &= v76 - 1;
            if (!v76) {
              goto LABEL_59;
            }
          }
          if (v72 == v77)
          {
LABEL_62:
            uint64_t v80 = *v162 + 960 * *v165;
            int v81 = *(_DWORD *)(v80 + 952);
            sub_FA1120(v65, (unsigned int *)&v166, (uint64_t)&v168);
            uint64_t v82 = v168;
            if (v170)
            {
              uint64_t v83 = *(void *)(v168 + 8) + 16 * v169;
              *(void *)uint64_t v83 = v166;
              *(_DWORD *)(v83 + 8) = -1;
            }
            *(_DWORD *)(*(void *)(v82 + 8) + 16 * v169 + 8) = *(_DWORD *)(v80 + 952);
            sub_29603C((void **)v80, &v166);
            ++*(_DWORD *)(v80 + 952);
            uint64_t v85 = v14[1];
            unint64_t v84 = v14[2];
            if (v85 >= (_DWORD *)v84)
            {
LABEL_65:
              unint64_t v86 = *v14;
              unint64_t v87 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85 - (unsigned char *)*v14) >> 2);
              unint64_t v88 = v87 + 1;
              if (v87 + 1 > 0x1555555555555555) {
                goto LABEL_135;
              }
              unint64_t v89 = 0xAAAAAAAAAAAAAAABLL * ((v84 - (unsigned char *)v86) >> 2);
              if (2 * v89 > v88) {
                unint64_t v88 = 2 * v89;
              }
              if (v89 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v90 = 0x1555555555555555;
              }
              else {
                unint64_t v90 = v88;
              }
              if (v90 > 0x1555555555555555) {
                goto LABEL_134;
              }
              uint64_t v91 = 12 * v90;
              unint64_t v92 = (char *)operator new(12 * v90);
              unint64_t v93 = &v92[12 * v87];
              *(_DWORD *)unint64_t v93 = v81;
              *(void *)(v93 + 4) = v54;
              for (uint64_t i = v93; v85 != v86; *((_DWORD *)i + 2) = v96)
              {
                uint64_t v95 = *(void *)(v85 - 3);
                v85 -= 3;
                int v96 = v85[2];
                *(void *)(i - 12) = v95;
                i -= 12;
              }
              unsigned int v52 = v93 + 12;
              *uint64_t v14 = i;
              v14[1] = v93 + 12;
              v14[2] = &v92[v91];
              if (v86) {
                operator delete(v86);
              }
              goto LABEL_36;
            }
          }
          else
          {
            int v81 = v78[2];
            uint64_t v85 = v14[1];
            unint64_t v84 = v14[2];
            if (v85 >= (_DWORD *)v84) {
              goto LABEL_65;
            }
          }
          *uint64_t v85 = v81;
          *(void *)(v85 + 1) = v54;
          unsigned int v52 = (char *)(v85 + 3);
LABEL_36:
          v14[1] = v52;
          goto LABEL_37;
        }
        sub_FB5B30(a1, v49, &v167, a4, a5, a6, (uint64_t)v155);
        uint64_t v97 = *v155;
        uint64_t v98 = v160[8];
        while (2)
        {
          if (v97 == v98) {
            goto LABEL_5;
          }
          uint64_t v100 = *(void *)(v97 + 28);
          if (v100 == -1 || (v100 & 0xFFFFFFFF00000000) == 0x7FFFFFFF00000000) {
            goto LABEL_81;
          }
          uint64_t v102 = 0;
          unint64_t v103 = *(void *)(v97 + 8);
          unint64_t v166 = v103;
          uint64_t v104 = *v162 + 960 * *v165 + 176;
          unint64_t v105 = 0x2127599BF4325C37
               * ((((v103 << 32) + 16 * HIDWORD(v103)) | (v103 >> 61) & 2 | (v103 >> 63) | (v103 >> 59) & 4 | (v103 >> 57) & 8) ^ (((v103 << 32) + 16 * HIDWORD(v103)) >> 23));
          unint64_t v106 = (v105 ^ ~(v105 >> 47)) + ((v105 ^ (v105 >> 47)) << 21);
          unint64_t v107 = 21 * ((265 * (v106 ^ (v106 >> 24))) ^ ((265 * (v106 ^ (v106 >> 24))) >> 14));
          unint64_t v108 = 2147483649u * (v107 ^ (v107 >> 28));
          uint64_t v109 = (void *)(v104
                          + 48
                          * (((((unsigned __int16)(v107 ^ (v107 >> 28)) >> 8) ^ ((-2147483647
                                                                                                 * (v107 ^ (v107 >> 28))) >> 16)) ^ ((-2147483647 * (v107 ^ (v107 >> 28))) >> 24)) & 0xF));
          unint64_t v110 = v108 >> 7;
          uint64_t v111 = v109[3];
          uint64_t v112 = 0x101010101010101 * (v108 & 0x7F);
          while (1)
          {
            unint64_t v113 = v110 & v111;
            uint64_t v114 = *(void *)(*v109 + v113);
            unint64_t v115 = ((v114 ^ v112) - 0x101010101010101) & ~(v114 ^ v112) & 0x8080808080808080;
            if (v115) {
              break;
            }
LABEL_94:
            if ((v114 & (~v114 << 6) & 0x8080808080808080) != 0) {
              goto LABEL_97;
            }
            v102 += 8;
            unint64_t v110 = v102 + v113;
          }
          while (1)
          {
            unint64_t v116 = (v113 + (__clz(__rbit64(v115)) >> 3)) & v111;
            unsigned __int16 v117 = (_DWORD *)(v109[1] + 16 * v116);
            if (*v117 == v103 && v117[1] == HIDWORD(v103)) {
              break;
            }
            v115 &= v115 - 1;
            if (!v115) {
              goto LABEL_94;
            }
          }
          if (v111 == v116)
          {
LABEL_97:
            uint64_t v119 = *v162 + 960 * *v165;
            int v120 = *(_DWORD *)(v119 + 952);
            sub_FA1120(v104, (unsigned int *)&v166, (uint64_t)&v168);
            uint64_t v121 = v168;
            if (v170)
            {
              uint64_t v122 = *(void *)(v168 + 8) + 16 * v169;
              *(void *)uint64_t v122 = v166;
              *(_DWORD *)(v122 + 8) = -1;
            }
            *(_DWORD *)(*(void *)(v121 + 8) + 16 * v169 + 8) = *(_DWORD *)(v119 + 952);
            sub_29603C((void **)v119, &v166);
            ++*(_DWORD *)(v119 + 952);
            uint64_t v100 = *(void *)(v97 + 28);
            uint64_t v124 = v14[1];
            int v123 = v14[2];
            if (v124 >= (_DWORD *)v123)
            {
LABEL_100:
              uint64_t v125 = *v14;
              unint64_t v126 = 0xAAAAAAAAAAAAAAABLL * (((char *)v124 - (unsigned char *)*v14) >> 2);
              unint64_t v127 = v126 + 1;
              if (v126 + 1 > 0x1555555555555555) {
LABEL_135:
              }
                sub_2E00();
              unint64_t v128 = 0xAAAAAAAAAAAAAAABLL * ((v123 - (unsigned char *)v125) >> 2);
              if (2 * v128 > v127) {
                unint64_t v127 = 2 * v128;
              }
              if (v128 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v129 = 0x1555555555555555;
              }
              else {
                unint64_t v129 = v127;
              }
              if (v129 > 0x1555555555555555) {
                goto LABEL_134;
              }
              uint64_t v130 = 12 * v129;
              unint64_t v131 = (char *)operator new(12 * v129);
              unint64_t v132 = &v131[12 * v126];
              *(_DWORD *)unint64_t v132 = v120;
              *(void *)(v132 + 4) = v100;
              for (j = v132; v124 != v125; *((_DWORD *)j + 2) = v135)
              {
                uint64_t v134 = *(void *)(v124 - 3);
                v124 -= 3;
                int v135 = v124[2];
                *(void *)(j - 12) = v134;
                j -= 12;
              }
              unint64_t v99 = v132 + 12;
              *uint64_t v14 = j;
              v14[1] = v132 + 12;
              v14[2] = &v131[v130];
              if (v125) {
                operator delete(v125);
              }
LABEL_80:
              v14[1] = v99;
LABEL_81:
              v97 += 40;
              continue;
            }
          }
          else
          {
            int v120 = v117[2];
            uint64_t v124 = v14[1];
            int v123 = v14[2];
            if (v124 >= (_DWORD *)v123) {
              goto LABEL_100;
            }
          }
          break;
        }
        *uint64_t v124 = v120;
        *(void *)(v124 + 1) = v100;
        unint64_t v99 = (char *)(v124 + 3);
        goto LABEL_80;
      }
LABEL_5:
      uint64_t v11 = v159;
      uint64_t v12 = *v159;
      uint64_t v13 = v161;
      uint64_t v15 = *v160;
      if (v12 == (v160[1] - *v160) >> 3) {
        goto LABEL_2;
      }
    }
    uint64_t v13 = v161;
    do
    {
LABEL_24:
      int v42 = *((_DWORD *)v23 - 1);
      v23 -= 4;
      *--int v31 = v42;
    }
    while (v23 != v25);
    goto LABEL_25;
  }
LABEL_2:
  int v16 = -1431655765 * ((unint64_t)((unsigned char *)v14[1] - (unsigned char *)*v14) >> 2);
  uint64_t v18 = (char *)v13[1];
  unint64_t v17 = v13[2];
  if ((unint64_t)v18 < v17)
  {
    *(_DWORD *)uint64_t v18 = v16;
    uint64_t v19 = (uint64_t)(v18 + 4);
    goto LABEL_130;
  }
  int64_t v136 = (char *)*v13;
  uint64_t v137 = (uint64_t)&v18[-*v13];
  uint64_t v138 = v137 >> 2;
  unint64_t v139 = (v137 >> 2) + 1;
  if (v139 >> 62) {
LABEL_136:
  }
    sub_2E00();
  uint64_t v140 = v17 - (void)v136;
  if (v140 >> 1 > v139) {
    unint64_t v139 = v140 >> 1;
  }
  if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v141 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v141 = v139;
  }
  if (!v141)
  {
    uint64_t v142 = 0;
    uint64_t v143 = (_DWORD *)(4 * v138);
    unint64_t v144 = 0;
    *(_DWORD *)(4 * v138) = v16;
    uint64_t v19 = 4 * v138 + 4;
    int64_t v145 = v18 - v136;
    if (v18 != v136) {
      goto LABEL_122;
    }
LABEL_132:
    uint64_t v13 = v161;
    void *v161 = v143;
    v161[1] = v19;
    v161[2] = v144;
    if (!v136) {
      goto LABEL_130;
    }
    goto LABEL_129;
  }
  if (v141 >> 62) {
LABEL_134:
  }
    sub_188D718();
  uint64_t v142 = operator new(4 * v141);
  uint64_t v143 = &v142[4 * v138];
  unint64_t v144 = &v142[4 * v141];
  _DWORD *v143 = v16;
  uint64_t v19 = (uint64_t)(v143 + 1);
  int64_t v145 = v18 - v136;
  if (v18 == v136) {
    goto LABEL_132;
  }
LABEL_122:
  unint64_t v146 = v145 - 4;
  uint64_t v13 = v161;
  if (v146 < 0x2C) {
    goto LABEL_139;
  }
  if ((unint64_t)(v18 - v142 - v137) < 0x20) {
    goto LABEL_139;
  }
  uint64_t v147 = (v146 >> 2) + 1;
  uint64_t v148 = 4 * (v147 & 0x7FFFFFFFFFFFFFF8);
  unint64_t v149 = &v18[-v148];
  uint64_t v143 = (_DWORD *)((char *)v143 - v148);
  int64_t v150 = &v142[4 * v138 - 16];
  unint64_t v151 = v18 - 16;
  uint64_t v152 = v147 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v153 = *(_OWORD *)v151;
    *(v150 - 1) = *((_OWORD *)v151 - 1);
    *int64_t v150 = v153;
    v150 -= 2;
    v151 -= 32;
    v152 -= 8;
  }
  while (v152);
  uint64_t v18 = v149;
  if (v147 != (v147 & 0x7FFFFFFFFFFFFFF8))
  {
LABEL_139:
    do
    {
      int v154 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *--uint64_t v143 = v154;
    }
    while (v18 != v136);
  }
  void *v161 = v143;
  v161[1] = v19;
  v161[2] = v144;
  if (v136) {
LABEL_129:
  }
    operator delete(v136);
LABEL_130:
  v13[1] = v19;
}

void sub_FB5514(uint64_t a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v5 = (void *)(a1 + 35968);
  uint64_t v6 = *(void *)(a1 + 35968) + 960 * *a2;
  uint64_t v8 = *(void *)(v6 + 128);
  uint64_t v7 = v6 + 128;
  uint64_t v93 = *(unsigned int *)(v7 + 820);
  int v9 = *(_DWORD *)(v7 + 816);
  uint64_t v11 = (void **)(v7 - 24);
  uint64_t v10 = *(void *)(v7 - 24);
  uint64_t v12 = (void *)(v7 + 24);
  unint64_t v13 = (*(void *)(v7 - 16) - v10) >> 3;
  unint64_t v92 = ((*(void *)(v7 + 8) - v8) >> 2) - 1;
  if (v92 <= v13)
  {
    if (v92 < v13) {
      *(void *)(v7 - 16) = v10 + 8 * v92;
    }
  }
  else
  {
    sub_FB7FAC((char **)(v7 - 24), v92 - v13);
  }
  unsigned int v14 = v9 + v93;
  sub_A3E96C(v7 + 24, v92, 0);
  unint64_t v15 = (*(_DWORD *)(*v5 + 960 * *a2 + 944) * v93);
  int v16 = *a3;
  if (v15 > a3[2] - *a3)
  {
    unint64_t v17 = a3[1];
    uint64_t v18 = 8 * v15;
    uint64_t v19 = (char *)operator new(8 * v15);
    uint64_t v20 = (char *)v17 - (char *)v16;
    int v21 = &v19[((char *)v17 - (char *)v16) & 0xFFFFFFFFFFFFFFF8];
    unint64_t v22 = v21;
    if (v17 == v16) {
      goto LABEL_14;
    }
    if ((unint64_t)(v20 - 8) >= 0x58)
    {
      unint64_t v22 = &v19[((char *)v17 - (char *)v16) & 0xFFFFFFFFFFFFFFF8];
      if ((unint64_t)((char *)v17 - (v20 & 0xFFFFFFFFFFFFFFF8) - v19) >= 0x20)
      {
        uint64_t v23 = v20 >> 3;
        unint64_t v24 = ((unint64_t)(v20 - 8) >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v26 = (char *)&v17[v25 / 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = &v21[-v25];
        uint64_t v27 = &v19[8 * v23 - 16];
        unint64_t v28 = (long long *)(v17 - 2);
        uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v30 = *v28;
          *((_OWORD *)v27 - 1) = *(v28 - 1);
          *(_OWORD *)uint64_t v27 = v30;
          v27 -= 32;
          v28 -= 2;
          v29 -= 4;
        }
        while (v29);
        unint64_t v17 = (uint64_t *)v26;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_14:
          *a3 = (uint64_t *)v22;
          a3[1] = (uint64_t *)v21;
          a3[2] = (uint64_t *)&v19[v18];
          if (v16) {
            operator delete(v16);
          }
          goto LABEL_16;
        }
      }
    }
    else
    {
      unint64_t v22 = &v19[((char *)v17 - (char *)v16) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v31 = *--v17;
      *((void *)v22 - 1) = v31;
      v22 -= 8;
    }
    while (v17 != v16);
    goto LABEL_14;
  }
LABEL_16:
  if (v93 <= v14) {
    int v32 = v9 + v93;
  }
  else {
    int v32 = v93;
  }
  int v91 = v32;
  if (v93 < v14)
  {
    unint64_t v33 = (void *)(v7 - 48);
    if (v14 <= v92) {
      int v34 = v92;
    }
    else {
      int v34 = v9 + v93;
    }
    unsigned int v94 = v93;
    uint64_t v95 = a3;
    unint64_t v89 = (void *)(v7 + 24);
    uint64_t v90 = v7;
    int v88 = v34;
    while (1)
    {
      uint64_t v35 = (unsigned char *)v11[1] - (unsigned char *)*v11;
      if (v35 >= 1) {
        memset_pattern16(*v11, &xmmword_20B8FC0, 8 * (((unint64_t)v35 >> 3) - ((unint64_t)v35 > 7)) + 8);
      }
      unsigned int v36 = *(_DWORD *)(*(void *)v7 + 4 * v94++);
      unsigned int v37 = *(_DWORD *)(*(void *)v7 + 4 * v94);
      BOOL v38 = v36 >= v37;
      if (v36 > v37) {
        unsigned int v37 = v36;
      }
      if (!v38)
      {
        do
        {
          unsigned int v63 = (unsigned int *)(*v33 + 12 * v36);
          *((void *)*v11 + *v63) = *(void *)(v63 + 1);
          unint64_t v64 = *v63;
          if (v64 >= v14) {
            *(void *)(*v12 + ((v64 >> 3) & 0x1FFFFFF8)) |= 1 << v64;
          }
          ++v36;
        }
        while (v37 != v36);
      }
      if (v14 < v92)
      {
        char v39 = 0;
        unsigned int v40 = v14;
        while (1)
        {
          uint64_t v41 = v40;
          uint64_t v42 = *(void *)(*v12 + 8 * ((unint64_t)v40 >> 6));
          if ((v42 & (1 << v40)) != 0)
          {
            *(void *)(*v12 + 8 * ((unint64_t)v40 >> 6)) = v42 & ~(1 << v40);
            unsigned int v43 = *(_DWORD *)(*(void *)v7 + 4 * v40++);
            unsigned int v44 = *(_DWORD *)(*(void *)v7 + 4 * v40);
            BOOL v45 = v43 >= v44;
            if (v43 > v44) {
              unsigned int v44 = v43;
            }
            if (!v45)
            {
              unint64_t v46 = (char *)*v11;
              do
              {
                unint64_t v47 = (unsigned int *)(*v33 + 12 * v43);
                uint64_t v48 = &v46[8 * v41];
                int v49 = *(_DWORD *)v48;
                int v50 = *((_DWORD *)v48 + 1);
                unint64_t v51 = *v47;
                uint64_t v52 = v47[1] + v49;
                uint64_t v53 = v47[2] + v50;
                unint64_t v54 = (unsigned int *)((char *)*v11 + 8 * v51);
                unsigned int v55 = *v54;
                if (*v54 == -1
                  || ((v56 = v54[1], v56 != 0x7FFFFFFF) ? (BOOL v57 = v52 >= v55) : (BOOL v57 = 0),
                      !v57 || (v55 >= v52 ? (BOOL v58 = (int)v53 < v56) : (BOOL v58 = 0), v58)))
                {
                  *(void *)unint64_t v54 = (v53 << 32) | v52;
                  if (v51 >= v14)
                  {
                    char v39 = 1;
                    *(void *)(*v12 + ((v51 >> 3) & 0x1FFFFFF8)) |= 1 << v51;
                  }
                }
                ++v43;
              }
              while (v44 != v43);
            }
          }
          else
          {
            ++v40;
          }
          char v59 = v39;
          if (v40 == v34)
          {
            char v39 = 0;
            unsigned int v40 = v14;
            if ((v59 & 1) == 0) {
              break;
            }
          }
        }
      }
      if (v93) {
        break;
      }
LABEL_24:
      uint64_t v12 = v89;
      uint64_t v7 = v90;
      int v34 = v88;
      if (v94 == v91) {
        goto LABEL_93;
      }
    }
    uint64_t v60 = (unsigned int *)*v11;
    uint64_t v61 = (uint64_t)*v11 + 8 * v93;
    int v62 = a3[1];
    int v96 = (unsigned int *)v61;
    while (1)
    {
      while (1)
      {
        unsigned int v65 = v60[1];
        BOOL v66 = *v60 != -1;
        BOOL v67 = v65 != 0x7FFFFFFF;
        uint64_t v68 = v66 && v67 ? *v60 : 0xFFFFFFFFLL;
        uint64_t v69 = v66 && v67 ? v65 : 0;
        unint64_t v70 = (unint64_t)a3[2];
        if ((unint64_t)v62 >= v70) {
          break;
        }
        *v62++ = v68 | (v69 << 32);
        a3[1] = v62;
        v60 += 2;
        if (v60 == (unsigned int *)v61) {
          goto LABEL_24;
        }
      }
      unint64_t v71 = *a3;
      uint64_t v72 = (char *)v62 - (char *)*a3;
      uint64_t v73 = v72 >> 3;
      unint64_t v74 = (v72 >> 3) + 1;
      if (v74 >> 61) {
        sub_2E00();
      }
      uint64_t v75 = v70 - (void)v71;
      if (v75 >> 2 > v74) {
        unint64_t v74 = v75 >> 2;
      }
      if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
      }
      unint64_t v97 = v74;
      if (v74)
      {
        if (v74 >> 61) {
          sub_188D718();
        }
        unint64_t v76 = operator new(8 * v74);
        unint64_t v77 = (uint64_t *)&v76[8 * v73];
        *unint64_t v77 = v68 | (v69 << 32);
        uint64_t v78 = (uint64_t)(v77 + 1);
        if (v62 == v71)
        {
LABEL_84:
          a3 = v95;
          *uint64_t v95 = v77;
          v95[1] = (uint64_t *)v78;
          v95[2] = (uint64_t *)&v76[8 * v97];
          if (!v62) {
            goto LABEL_81;
          }
LABEL_80:
          operator delete(v62);
          goto LABEL_81;
        }
      }
      else
      {
        unint64_t v76 = 0;
        unint64_t v77 = (uint64_t *)(8 * v73);
        *(void *)(8 * v73) = v68 | (v69 << 32);
        uint64_t v78 = 8 * v73 + 8;
        if (v62 == v71) {
          goto LABEL_84;
        }
      }
      unint64_t v79 = (char *)(v62 - 1) - (char *)v71;
      if (v79 < 0x168
        || &v76[v72 - 8 - (v79 & 0xFFFFFFFFFFFFFFF8)] > &v76[v72 - 8]
        || (uint64_t *)((char *)v62 - (v79 & 0xFFFFFFFFFFFFFFF8) - 8) > v62 - 1
        || (unint64_t)((char *)v62 - v76 - v72) < 0x20)
      {
        break;
      }
      uint64_t v82 = (v79 >> 3) + 1;
      uint64_t v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v80 = &v62[v83 / 0xFFFFFFFFFFFFFFF8];
      unint64_t v77 = (uint64_t *)((char *)v77 - v83);
      unint64_t v84 = &v76[8 * v73 - 16];
      uint64_t v85 = v62 - 2;
      uint64_t v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v87 = *(_OWORD *)v85;
        *(v84 - 1) = *((_OWORD *)v85 - 1);
        *unint64_t v84 = v87;
        v84 -= 2;
        v85 -= 4;
        v86 -= 4;
      }
      while (v86);
      a3 = v95;
      if (v82 != (v82 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_78;
      }
LABEL_79:
      int v62 = *a3;
      *a3 = v77;
      a3[1] = (uint64_t *)v78;
      a3[2] = (uint64_t *)&v76[8 * v97];
      if (v62) {
        goto LABEL_80;
      }
LABEL_81:
      uint64_t v61 = (uint64_t)v96;
      a3[1] = (uint64_t *)v78;
      v60 += 2;
      int v62 = (uint64_t *)v78;
      if (v60 == v96) {
        goto LABEL_24;
      }
    }
    uint64_t v80 = v62;
    a3 = v95;
    do
    {
LABEL_78:
      uint64_t v81 = *--v80;
      *--unint64_t v77 = v81;
    }
    while (v80 != v71);
    goto LABEL_79;
  }
LABEL_93:

  sub_FB1414((uint64_t)a3);
}

uint64_t sub_FB5B18(uint64_t result, int a2)
{
  if (a2) {
    char v2 = 2;
  }
  else {
    char v2 = 1;
  }
  *(unsigned char *)(result + 35961) = v2;
  return result;
}

void sub_FB5B30(uint64_t a1, unint64_t a2, _DWORD *a3, unsigned int *a4, int *a5, char a6, uint64_t a7)
{
  uint64_t v12 = (uint64_t *)(a1 + 35880);
  *(void *)(a7 + 8) = *(void *)a7;
  unint64_t v13 = sub_F968AC(*(void *)(a1 + 35880), a2 & 0xFFFFFFFFFFFFFFFLL, (a2 & 0x1000000000000000) == 0, a3);
  unint64_t v115 = v13;
  unsigned int v14 = v13;
  unint64_t v15 = HIDWORD(v13);
  if (v13) {
    BOOL v16 = HIDWORD(v13) == -1;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t v17 = v13;
    uint64_t v18 = sub_FA08AC(v12[1], v13, 1);
    if (v18
      && (uint64_t v19 = &v18[-*(int *)v18], *(unsigned __int16 *)v19 >= 5u)
      && (uint64_t v20 = *((unsigned __int16 *)v19 + 2)) != 0
      && (int v21 = &v18[v20 + *(unsigned int *)&v18[v20]], *(_DWORD *)v21 > v15)
      && (unint64_t v22 = &v21[4 * v15 + 4 + *(unsigned int *)&v21[4 * v15 + 4]],
          uint64_t v23 = &v22[-*(int *)v22],
          *(unsigned __int16 *)v23 >= 9u)
      && (uint64_t v24 = *((unsigned __int16 *)v23 + 4)) != 0)
    {
      int v25 = *(_DWORD *)&v22[v24 + *(unsigned int *)&v22[v24]];
      uint64_t v26 = sub_FA08AC(v12[1], v14, 1);
      if (!v26) {
        return;
      }
    }
    else
    {
      int v25 = 0;
      uint64_t v26 = sub_FA08AC(v12[1], v14, 1);
      if (!v26) {
        return;
      }
    }
    uint64_t v27 = &v26[-*(int *)v26];
    if (*(unsigned __int16 *)v27 >= 5u)
    {
      uint64_t v28 = *((unsigned __int16 *)v27 + 2);
      if (v28)
      {
        uint64_t v29 = &v26[v28 + *(unsigned int *)&v26[v28]];
        if (*(_DWORD *)v29 > v15)
        {
          long long v30 = &v29[4 * v15 + 4 + *(unsigned int *)&v29[4 * v15 + 4]];
          uint64_t v31 = &v30[-*(int *)v30];
          if (*(unsigned __int16 *)v31 >= 0xBu)
          {
            uint64_t v32 = *((unsigned __int16 *)v31 + 5);
            if (v32)
            {
              if (v25)
              {
                int v33 = *(_DWORD *)&v30[v32 + *(unsigned int *)&v30[v32]];
                if (v33)
                {
                  int v95 = v33;
                  int v97 = *(_DWORD *)(a1 + 3880);
                  __int16 v98 = *(_WORD *)(a1 + 3884);
                  uint64_t v100 = (void *)v12[3];
                  unsigned int v96 = sub_F6F0D8();
                  if (sub_35E640()) {
                    int v34 = *a5;
                  }
                  else {
                    int v34 = 0x7FFFFFFF;
                  }
                  int v35 = sub_35E640();
                  int v36 = *a5;
                  if (!v35) {
                    int v36 = 0x7FFFFFFF;
                  }
                  unsigned int v37 = *a4;
                  unint64_t v116 = (void *)v17;
                  unint64_t v117 = __PAIR64__(v96, v37);
                  int v118 = v34;
                  int v119 = v36;
                  char v120 = a6;
                  __int16 v121 = v98;
                  int v122 = v97;
                  char v123 = 0;
                  int v124 = 0x7FFFFFFF;
                  sub_FAD72C((uint64_t *)&v116, v100, a1, (uint64_t)&v107);
                  if (!sub_F06620(v12[3], v108)) {
                    goto LABEL_37;
                  }
                  if (v112) {
                    goto LABEL_37;
                  }
                  unint64_t v38 = v107;
                  unsigned int v39 = v108;
                  int v40 = v113;
                  uint64_t v41 = sub_383A0C(a1, v107, 1);
                  if (!v41) {
                    goto LABEL_37;
                  }
                  uint64_t v42 = &v41[-*(int *)v41];
                  if (*(unsigned __int16 *)v42 >= 0xFu
                    && *((_WORD *)v42 + 7)
                    && (unsigned int v43 = &v41[*((unsigned __int16 *)v42 + 7)
                                 + *(unsigned int *)&v41[*((unsigned __int16 *)v42 + 7)]],
                        *(_DWORD *)v43 > HIDWORD(v38))
                    && (unsigned int v44 = &v43[4 * HIDWORD(v38) + 4 + *(unsigned int *)&v43[4 * HIDWORD(v38) + 4]],
                        BOOL v45 = &v44[-*(int *)v44],
                        *(unsigned __int16 *)v45 >= 5u)
                    && (uint64_t v46 = *((unsigned __int16 *)v45 + 2)) != 0
                    && (unint64_t v47 = (unsigned int *)&v44[v46 + *(unsigned int *)&v44[v46]],
                        unsigned int v48 = v39 + *(_DWORD *)(a1 + 3872) * v40,
                        v48 < *v47)
                    && v47[v48 + 1] != -1)
                  {
                    sub_FAD900(a1, v115, a2, v108, v113, (char **)a7);
                  }
                  else
                  {
LABEL_37:
                    unint64_t v49 = (HIDWORD(v107)
                         + ((unint64_t)v107 << 6)
                         + ((unint64_t)v107 >> 2)
                         + 2654435769u) ^ v107;
                    unint64_t v50 = (v108 + (v49 << 6) + (v49 >> 2) + 2654435769u) ^ v49;
                    unint64_t v51 = (v109 + (v50 << 6) + (v50 >> 2) + 2654435769u) ^ v50;
                    unint64_t v52 = (v110 + (v51 << 6) + (v51 >> 2) + 2654435769u) ^ v51;
                    unint64_t v53 = (v111 + (v52 << 6) + (v52 >> 2) + 2654435769u) ^ v52;
                    unint64_t v54 = (v112 + (v53 << 6) + (v53 >> 2) + 2654435769u) ^ v53;
                    unint64_t v55 = (v113 + (v54 << 6) + (v54 >> 2) + 2654435769u) ^ v54;
                    sub_FAA4F0((uint64_t *)(*(void *)(v12[4] + 16)+ 272 * (((v114 + (v55 << 6) + (v55 >> 2) + 2654435769u) ^ v55) % *(void *)v12[4])), (unsigned int *)&v107, (uint64_t)&v116);
                    if ((_BYTE)v118)
                    {
                      unint64_t v105 = v116;
                      unint64_t v106 = (std::__shared_weak_count *)v117;
                      if (v117) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v117 + 8), 1uLL, memory_order_relaxed);
                      }
                    }
                    else
                    {
                      sub_FB44C0(&v105, a1, &v115, a4, a5, v112);
                    }
                    unsigned __int16 v56 = sub_FA0788(a1, a2, v115);
                    unint64_t v57 = v115;
                    BOOL v58 = sub_FA08AC(a1, v115, 1);
                    if (v58)
                    {
                      char v59 = &v58[-*(int *)v58];
                      if (*(unsigned __int16 *)v59 >= 5u)
                      {
                        if (*((_WORD *)v59 + 2))
                        {
                          uint64_t v60 = &v58[*((unsigned __int16 *)v59 + 2)
                                   + *(unsigned int *)&v58[*((unsigned __int16 *)v59 + 2)]];
                          if (*(_DWORD *)v60 > HIDWORD(v57))
                          {
                            uint64_t v61 = &v60[4 * HIDWORD(v57) + 4 + *(unsigned int *)&v60[4 * HIDWORD(v57) + 4]];
                            int v62 = &v61[-*(int *)v61];
                            if (*(unsigned __int16 *)v62 >= 0xBu)
                            {
                              uint64_t v63 = *((unsigned __int16 *)v62 + 5);
                              if (v63)
                              {
                                unint64_t v64 = &v61[v63 + *(unsigned int *)&v61[v63]];
                                unsigned int v67 = *(_DWORD *)v64;
                                BOOL v66 = v64 + 4;
                                uint64_t v65 = v67;
                                if (v67)
                                {
                                  int v68 = 0;
                                  unsigned int v69 = v95 * v56;
                                  unint64_t v70 = &v66[v65];
                                  int v101 = v70;
                                  unsigned __int16 v99 = v56;
                                  do
                                  {
                                    while (1)
                                    {
                                      uint64_t v71 = v69;
                                      uint64_t v72 = *(unsigned int *)(*v105 + 8 * v69);
                                      unint64_t v73 = v72 == -1
                                          ? 0x7FFFFFFF00000000
                                          : (unint64_t)*(unsigned int *)(*v105 + 8 * v71 + 4) << 32;
                                      uint64_t v74 = HIDWORD(*v66);
                                      uint64_t v75 = (*v66 >> 4) & 0x8FFFFFFF | (*v66 << 31) | (((*v66 >> 3) & 1) << 28) & 0x9FFFFFFF | (((*v66 >> 2) & 1) << 29) & 0xBFFFFFFF | (((*v66 >> 1) & 1) << 30);
                                      unint64_t v76 = v73 | v72;
                                      unint64_t v78 = *(void *)(a7 + 8);
                                      unint64_t v77 = *(void *)(a7 + 16);
                                      if (v78 >= v77) {
                                        break;
                                      }
                                      *(void *)unint64_t v78 = a2;
                                      *(void *)(v78 + 8) = v74 | (v75 << 32);
                                      *(void *)(v78 + 16) = v115;
                                      *(_WORD *)(v78 + 24) = v56;
                                      *(_WORD *)(v78 + 26) = v68;
                                      *(void *)(v78 + 28) = v76;
                                      *(void *)(a7 + 8) = v78 + 40;
                                      unsigned int v69 = v71 + 1;
                                      ++v68;
                                      if (++v66 == v70) {
                                        goto LABEL_69;
                                      }
                                    }
                                    int v104 = v68;
                                    unint64_t v79 = *(char **)a7;
                                    unint64_t v80 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v78 - *(void *)a7) >> 3);
                                    unint64_t v81 = v80 + 1;
                                    if (v80 + 1 > 0x666666666666666) {
                                      sub_2E00();
                                    }
                                    int v102 = v71;
                                    unint64_t v82 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v77 - (void)v79) >> 3);
                                    if (2 * v82 > v81) {
                                      unint64_t v81 = 2 * v82;
                                    }
                                    if (v82 >= 0x333333333333333) {
                                      unint64_t v83 = 0x666666666666666;
                                    }
                                    else {
                                      unint64_t v83 = v81;
                                    }
                                    if (v83 > 0x666666666666666) {
                                      sub_188D718();
                                    }
                                    uint64_t v84 = HIDWORD(*v66);
                                    uint64_t v85 = (char *)operator new(40 * v83);
                                    uint64_t v86 = &v85[40 * v80];
                                    *(void *)uint64_t v86 = a2;
                                    *((void *)v86 + 1) = v84 | (v75 << 32);
                                    *((void *)v86 + 2) = v115;
                                    unsigned __int16 v56 = v99;
                                    *((_WORD *)v86 + 12) = v99;
                                    *((_WORD *)v86 + 13) = v104;
                                    *(void *)(v86 + 28) = v76;
                                    if ((char *)v78 == v79)
                                    {
                                      uint64_t v90 = v86;
                                    }
                                    else
                                    {
                                      long long v87 = v86;
                                      do
                                      {
                                        long long v88 = *(_OWORD *)(v78 - 40);
                                        long long v89 = *(_OWORD *)(v78 - 24);
                                        uint64_t v90 = v87 - 40;
                                        *((_DWORD *)v87 - 2) = *(_DWORD *)(v78 - 8);
                                        *(_OWORD *)(v87 - 24) = v89;
                                        *(_OWORD *)(v87 - 40) = v88;
                                        v78 -= 40;
                                        v87 -= 40;
                                      }
                                      while ((char *)v78 != v79);
                                    }
                                    int v91 = &v85[40 * v83];
                                    unint64_t v92 = v86 + 40;
                                    *(void *)a7 = v90;
                                    *(void *)(a7 + 8) = v86 + 40;
                                    *(void *)(a7 + 16) = v91;
                                    if (v79) {
                                      operator delete(v79);
                                    }
                                    unint64_t v70 = v101;
                                    *(void *)(a7 + 8) = v92;
                                    unsigned int v69 = v102 + 1;
                                    int v68 = v104 + 1;
                                    ++v66;
                                  }
                                  while (v66 != v101);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
LABEL_69:
                    uint64_t v93 = v106;
                    if (v106 && !atomic_fetch_add(&v106->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                    {
                      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                      std::__shared_weak_count::__release_weak(v93);
                    }
                    unsigned int v94 = (std::__shared_weak_count *)v117;
                    if (v117)
                    {
                      if (!atomic_fetch_add((atomic_ullong *volatile)(v117 + 8), 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                        std::__shared_weak_count::__release_weak(v94);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_FB62DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  sub_14A84((uint64_t)va);
  sub_14A84((uint64_t)va1);
  _Unwind_Resume(a1);
}

int *sub_FB6318(uint64_t a1, unint64_t *a2, unsigned int *a3, char a4)
{
  uint64_t v7 = (uint64_t *)(a1 + 35888);
  uint64_t v8 = *(void *)(a1 + 35968) + 960 * *a3;
  unint64_t v9 = *a2;
  uint64_t v10 = sub_FA08AC(*(void *)(a1 + 35888), *a2, 1);
  char v40 = a4;
  if (v10
    && (uint64_t v11 = &v10[-*(int *)v10], *(unsigned __int16 *)v11 >= 5u)
    && *((_WORD *)v11 + 2)
    && (uint64_t v12 = &v10[*((unsigned __int16 *)v11 + 2) + *(unsigned int *)&v10[*((unsigned __int16 *)v11 + 2)]],
        *(_DWORD *)v12 > HIDWORD(v9))
    && (uint64_t v13 = &v12[4 * HIDWORD(v9) + 4 + *(unsigned int *)&v12[4 * HIDWORD(v9) + 4]],
        uint64_t v14 = &v13[-*(int *)v13],
        *(unsigned __int16 *)v14 >= 0xBu)
    && (uint64_t v15 = *((unsigned __int16 *)v14 + 5)) != 0)
  {
    BOOL v16 = &v13[v15];
    uint64_t v17 = *(unsigned int *)v16;
    uint64_t v18 = &v16[v17 + 4];
    uint64_t v19 = &v18[8 * *(unsigned int *)&v16[v17]];
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v18 = 0;
  }
  uint64_t v20 = (unsigned int *)(v8 + 952);
  *(_DWORD *)(v7[10] + 960 * *a3 + 948) = (unint64_t)(v19 - v18) >> 3;
  if (v19 == v18)
  {
    unsigned int v21 = *v20;
  }
  else
  {
    do
    {
      unsigned int v22 = (*(void *)v18 >> 4) & 0x8FFFFFFF | (*(void *)v18 << 31) | (((*(void *)v18 >> 3) & 1) << 28) & 0x9FFFFFFF | (((*(void *)v18 >> 2) & 1) << 29) & 0xBFFFFFFF | (((*(void *)v18 >> 1) & 1) << 30);
      LODWORD(v42) = HIDWORD(*(void *)v18);
      HIDWORD(v42) = v22;
      sub_FA1120(v8 + 176, (unsigned int *)&v42, (uint64_t)&v43);
      uint64_t v23 = v43;
      if (v45)
      {
        uint64_t v24 = *(void *)(v43 + 8) + 16 * v44;
        *(void *)uint64_t v24 = v42;
        *(_DWORD *)(v24 + 8) = -1;
      }
      *(_DWORD *)(*(void *)(v23 + 8) + 16 * v44 + 8) = *v20;
      unsigned int v21 = *v20 + 1;
      *uint64_t v20 = v21;
      v18 += 8;
    }
    while (v18 != v19);
  }
  LODWORD(v43) = 0;
  unint64_t v25 = (uint64_t)(*(void *)(v8 + 136) - *(void *)(v8 + 128)) >> 2;
  if (v21 <= v25)
  {
    if (v21 < v25) {
      *(void *)(v8 + 136) = *(void *)(v8 + 128) + 4 * v21;
    }
  }
  else
  {
    sub_500DC(v8 + 128, v21 - v25, (const float *)&v43);
  }
  unint64_t v26 = *a2;
  uint64_t result = (int *)sub_FA08AC(*v7, *a2, 1);
  if (result
    && (uint64_t v28 = (unsigned __int16 *)((char *)result - *result), *v28 >= 5u)
    && v28[2]
    && (uint64_t v29 = (int *)((char *)result + v28[2] + *(unsigned int *)((char *)result + v28[2])), *v29 > HIDWORD(v26))
    && (long long v30 = (_DWORD *)((char *)&v29[HIDWORD(v26) + 1] + v29[HIDWORD(v26) + 1]),
        uint64_t v31 = (unsigned __int16 *)((char *)v30 - *v30),
        *v31 >= 9u)
    && (uint64_t v32 = v31[4]) != 0)
  {
    int v33 = (unsigned int *)((char *)v30 + v32);
    uint64_t v34 = *v33;
    int v35 = (char *)v33 + v34 + 4;
    int v36 = &v35[8 * *(unsigned int *)((char *)v33 + v34)];
  }
  else
  {
    int v36 = 0;
    int v35 = 0;
  }
  *(_DWORD *)(v7[10] + 960 * *a3 + 944) = (unint64_t)(v36 - v35) >> 3;
  if (v36 != v35)
  {
    if (v40)
    {
      do
      {
        uint64_t v42 = 0;
        uint64_t v42 = *(void *)v35;
        LODWORD(v41) = HIDWORD(v42);
        HIDWORD(v41) = (v42 >> 4) & 0x8FFFFFFF | (v42 << 31) | (((v42 >> 3) & 1) << 28) & 0x9FFFFFFF | (((v42 >> 2) & 1) << 29) & 0xBFFFFFFF | (((v42 >> 1) & 1) << 30);
        sub_FA1120(v8 + 176, (unsigned int *)&v41, (uint64_t)&v43);
        uint64_t v38 = v43;
        if (v45)
        {
          uint64_t v39 = *(void *)(v43 + 8) + 16 * v44;
          *(void *)uint64_t v39 = v41;
          *(_DWORD *)(v39 + 8) = -1;
        }
        *(_DWORD *)(*(void *)(v38 + 8) + 16 * v44 + 8) = *v20;
        uint64_t result = sub_FB81E4(v8, &v42);
        ++*v20;
        v35 += 8;
      }
      while (v35 != v36);
    }
    else
    {
      do
      {
        uint64_t v42 = 0;
        uint64_t v37 = *(void *)v35;
        v35 += 8;
        uint64_t v42 = v37;
        uint64_t result = sub_FB81E4(v8, &v42);
        ++*v20;
      }
      while (v35 != v36);
    }
  }
  return result;
}

void **sub_FB66BC(void **a1)
{
  char v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_FAB36C(v3 - 960);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_FB6718(uint64_t a1, char *a2)
{
  char v4 = *a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = (unsigned char *)*((void *)a2 + 1);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 2);
  size_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if ((v7 & 0x8000000000000000) != 0) {
      sub_2E00();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    unint64_t v9 = &v8[v7];
    *(void *)(a1 + 24) = &v8[v7];
    memcpy(v8, v6, v7);
    *(void *)(a1 + 16) = v9;
  }
  uint64_t v10 = *((void *)a2 + 4);
  *((void *)a2 + 4) = 0;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 5) = 0;
  uint64_t v11 = *((void *)a2 + 6);
  *(void *)(a1 + 48) = v11;
  uint64_t v12 = *((void *)a2 + 7);
  *(void *)(a1 + 56) = v12;
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
  if (v12)
  {
    unint64_t v13 = *(void *)(v11 + 8);
    unint64_t v14 = *(void *)(a1 + 40);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(v10 + 8 * v13) = a1 + 48;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  return a1;
}

void sub_FB6834(_Unwind_Exception *exception_object)
{
  char v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_FB6850(uint64_t *a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 6) >= a2)
  {
    sub_FB6B3C((uint64_t)a1, a2);
  }
  else
  {
    unint64_t v6 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - *a1) >> 6);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x44444444444444) {
      sub_2E00();
    }
    unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 6);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x22222222222222) {
      unint64_t v9 = 0x44444444444444;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x44444444444444) {
        sub_188D718();
      }
      uint64_t v10 = (char *)operator new(960 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v11 = (uint64_t)&v10[960 * v6];
    uint64_t v12 = &v10[960 * v9];
    unint64_t v13 = v11 + 960 * a2;
    uint64_t v14 = v11;
    do
    {
      *(void *)(v14 + 16) = 0;
      *(_OWORD *)uint64_t v14 = 0uLL;
      *(_OWORD *)(v14 + 32) = 0uLL;
      *(_OWORD *)(v14 + 48) = 0uLL;
      *(_OWORD *)(v14 + 64) = 0uLL;
      *(_OWORD *)(v14 + 80) = 0uLL;
      *(_OWORD *)(v14 + 96) = 0uLL;
      *(_OWORD *)(v14 + 112) = 0uLL;
      *(_OWORD *)(v14 + 128) = 0uLL;
      *(_OWORD *)(v14 + 144) = 0uLL;
      *(_OWORD *)(v14 + 160) = 0uLL;
      *(void *)(v14 + 176) = &unk_20E1710;
      *(void *)(v14 + 184) = 0;
      *(_OWORD *)(v14 + 192) = 0uLL;
      *(void *)(v14 + 216) = 0;
      *(void *)(v14 + 224) = &unk_20E1710;
      *(void *)(v14 + 248) = 0;
      *(_OWORD *)(v14 + 232) = 0uLL;
      *(void *)(v14 + 264) = 0;
      *(void *)(v14 + 272) = &unk_20E1710;
      *(void *)(v14 + 296) = 0;
      *(_OWORD *)(v14 + 280) = 0uLL;
      *(void *)(v14 + 312) = 0;
      *(void *)(v14 + 320) = &unk_20E1710;
      *(void *)(v14 + 344) = 0;
      *(_OWORD *)(v14 + 328) = 0uLL;
      *(void *)(v14 + 360) = 0;
      *(void *)(v14 + 368) = &unk_20E1710;
      *(void *)(v14 + 392) = 0;
      *(_OWORD *)(v14 + 376) = 0uLL;
      *(void *)(v14 + 408) = 0;
      *(void *)(v14 + 416) = &unk_20E1710;
      *(void *)(v14 + 440) = 0;
      *(_OWORD *)(v14 + 424) = 0uLL;
      *(void *)(v14 + 456) = 0;
      *(void *)(v14 + 464) = &unk_20E1710;
      *(void *)(v14 + 488) = 0;
      *(_OWORD *)(v14 + 472) = 0uLL;
      *(void *)(v14 + 504) = 0;
      *(void *)(v14 + 512) = &unk_20E1710;
      *(void *)(v14 + 552) = 0;
      *(void *)(v14 + 536) = 0;
      *(_OWORD *)(v14 + 520) = 0uLL;
      *(void *)(v14 + 560) = &unk_20E1710;
      *(void *)(v14 + 600) = 0;
      *(void *)(v14 + 584) = 0;
      *(_OWORD *)(v14 + 568) = 0uLL;
      *(void *)(v14 + 608) = &unk_20E1710;
      *(void *)(v14 + 648) = 0;
      *(void *)(v14 + 632) = 0;
      *(_OWORD *)(v14 + 616) = 0uLL;
      *(void *)(v14 + 656) = &unk_20E1710;
      *(void *)(v14 + 696) = 0;
      *(void *)(v14 + 680) = 0;
      *(_OWORD *)(v14 + 664) = 0uLL;
      *(void *)(v14 + 704) = &unk_20E1710;
      *(void *)(v14 + 744) = 0;
      *(void *)(v14 + 728) = 0;
      *(_OWORD *)(v14 + 712) = 0uLL;
      *(void *)(v14 + 752) = &unk_20E1710;
      *(void *)(v14 + 792) = 0;
      *(void *)(v14 + 776) = 0;
      *(_OWORD *)(v14 + 760) = 0uLL;
      *(void *)(v14 + 800) = &unk_20E1710;
      *(void *)(v14 + 840) = 0;
      *(void *)(v14 + 824) = 0;
      *(_OWORD *)(v14 + 808) = 0uLL;
      *(void *)(v14 + 848) = &unk_20E1710;
      *(void *)(v14 + 888) = 0;
      *(void *)(v14 + 872) = 0;
      *(_OWORD *)(v14 + 856) = 0uLL;
      *(void *)(v14 + 896) = &unk_20E1710;
      *(void *)(v14 + 936) = 0;
      uint64_t v15 = (_OWORD *)(v14 + 904);
      *(void *)(v14 + 920) = 0;
      *(_DWORD *)(v14 + 952) = -1;
      v14 += 960;
      *uint64_t v15 = 0uLL;
    }
    while (v14 != v13);
    uint64_t v17 = (char *)*a1;
    BOOL v16 = (char *)a1[1];
    if (v16 == (char *)*a1)
    {
      *a1 = v11;
      a1[1] = v13;
      a1[2] = (uint64_t)v12;
      if (!v16) {
        return;
      }
      goto LABEL_23;
    }
    do
    {
      v16 -= 960;
      uint64_t v11 = sub_FB6CAC(v11 - 960, (uint64_t)v16);
    }
    while (v16 != v17);
    uint64_t v18 = (char *)*a1;
    BOOL v16 = (char *)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = (uint64_t)v12;
    if (v16 != v18)
    {
      do
      {
        v16 -= 960;
        sub_FAB36C((uint64_t)v16);
      }
      while (v16 != v18);
      BOOL v16 = v18;
    }
    if (v16)
    {
LABEL_23:
      operator delete(v16);
    }
  }
}

uint64_t sub_FB6B3C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  if (a2)
  {
    uint64_t v3 = v2 + 960 * a2;
    do
    {
      *(void *)(v2 + 16) = 0;
      *(_OWORD *)uint64_t v2 = 0uLL;
      *(_OWORD *)(v2 + 32) = 0uLL;
      *(_OWORD *)(v2 + 48) = 0uLL;
      *(_OWORD *)(v2 + 64) = 0uLL;
      *(_OWORD *)(v2 + 80) = 0uLL;
      *(_OWORD *)(v2 + 96) = 0uLL;
      *(_OWORD *)(v2 + 112) = 0uLL;
      *(_OWORD *)(v2 + 128) = 0uLL;
      *(_OWORD *)(v2 + 144) = 0uLL;
      *(_OWORD *)(v2 + 160) = 0uLL;
      *(void *)(v2 + 176) = &unk_20E1710;
      *(void *)(v2 + 184) = 0;
      *(_OWORD *)(v2 + 192) = 0uLL;
      *(void *)(v2 + 216) = 0;
      *(void *)(v2 + 224) = &unk_20E1710;
      *(void *)(v2 + 248) = 0;
      *(_OWORD *)(v2 + 232) = 0uLL;
      *(void *)(v2 + 264) = 0;
      *(void *)(v2 + 272) = &unk_20E1710;
      *(void *)(v2 + 296) = 0;
      *(_OWORD *)(v2 + 280) = 0uLL;
      *(void *)(v2 + 312) = 0;
      *(void *)(v2 + 320) = &unk_20E1710;
      *(void *)(v2 + 344) = 0;
      *(_OWORD *)(v2 + 328) = 0uLL;
      *(void *)(v2 + 360) = 0;
      *(void *)(v2 + 368) = &unk_20E1710;
      *(void *)(v2 + 392) = 0;
      *(_OWORD *)(v2 + 376) = 0uLL;
      *(void *)(v2 + 408) = 0;
      *(void *)(v2 + 416) = &unk_20E1710;
      *(void *)(v2 + 440) = 0;
      *(_OWORD *)(v2 + 424) = 0uLL;
      *(void *)(v2 + 456) = 0;
      *(void *)(v2 + 464) = &unk_20E1710;
      *(void *)(v2 + 488) = 0;
      *(_OWORD *)(v2 + 472) = 0uLL;
      *(void *)(v2 + 504) = 0;
      *(void *)(v2 + 512) = &unk_20E1710;
      *(void *)(v2 + 552) = 0;
      *(void *)(v2 + 536) = 0;
      *(_OWORD *)(v2 + 520) = 0uLL;
      *(void *)(v2 + 560) = &unk_20E1710;
      *(void *)(v2 + 600) = 0;
      *(void *)(v2 + 584) = 0;
      *(_OWORD *)(v2 + 568) = 0uLL;
      *(void *)(v2 + 608) = &unk_20E1710;
      *(void *)(v2 + 648) = 0;
      *(void *)(v2 + 632) = 0;
      *(_OWORD *)(v2 + 616) = 0uLL;
      *(void *)(v2 + 656) = &unk_20E1710;
      *(void *)(v2 + 696) = 0;
      *(void *)(v2 + 680) = 0;
      *(_OWORD *)(v2 + 664) = 0uLL;
      *(void *)(v2 + 704) = &unk_20E1710;
      *(void *)(v2 + 744) = 0;
      *(void *)(v2 + 728) = 0;
      *(_OWORD *)(v2 + 712) = 0uLL;
      *(void *)(v2 + 752) = &unk_20E1710;
      *(void *)(v2 + 792) = 0;
      *(void *)(v2 + 776) = 0;
      *(_OWORD *)(v2 + 760) = 0uLL;
      *(void *)(v2 + 800) = &unk_20E1710;
      *(void *)(v2 + 840) = 0;
      *(void *)(v2 + 824) = 0;
      *(_OWORD *)(v2 + 808) = 0uLL;
      *(void *)(v2 + 848) = &unk_20E1710;
      *(void *)(v2 + 888) = 0;
      *(void *)(v2 + 872) = 0;
      *(_OWORD *)(v2 + 856) = 0uLL;
      *(void *)(v2 + 896) = &unk_20E1710;
      *(void *)(v2 + 936) = 0;
      uint64_t v4 = (_OWORD *)(v2 + 904);
      *(void *)(v2 + 920) = 0;
      *(_DWORD *)(v2 + 952) = -1;
      v2 += 960;
      _OWORD *v4 = 0uLL;
    }
    while (v2 != v3);
    uint64_t v2 = v3;
  }
  *(void *)(result + 8) = v2;
  return result;
}

uint64_t sub_FB6CAC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 128) = 0;
  uint64_t v4 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v4;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  sub_F2DEC0((void *)(a1 + 176), a2 + 176);
  uint64_t v5 = *(void *)(a2 + 944);
  *(_DWORD *)(a1 + 952) = *(_DWORD *)(a2 + 952);
  *(void *)(a1 + 944) = v5;
  return a1;
}

void sub_FB6DD8(uint64_t *a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 6) >= a2)
  {
    sub_FB6B3C((uint64_t)a1, a2);
  }
  else
  {
    unint64_t v6 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - *a1) >> 6);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x44444444444444) {
      sub_2E00();
    }
    unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 6);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x22222222222222) {
      unint64_t v9 = 0x44444444444444;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x44444444444444) {
        sub_188D718();
      }
      uint64_t v10 = (char *)operator new(960 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v11 = (uint64_t)&v10[960 * v6];
    uint64_t v12 = &v10[960 * v9];
    unint64_t v13 = v11 + 960 * a2;
    uint64_t v14 = v11;
    do
    {
      *(void *)(v14 + 16) = 0;
      *(_OWORD *)uint64_t v14 = 0uLL;
      *(_OWORD *)(v14 + 32) = 0uLL;
      *(_OWORD *)(v14 + 48) = 0uLL;
      *(_OWORD *)(v14 + 64) = 0uLL;
      *(_OWORD *)(v14 + 80) = 0uLL;
      *(_OWORD *)(v14 + 96) = 0uLL;
      *(_OWORD *)(v14 + 112) = 0uLL;
      *(_OWORD *)(v14 + 128) = 0uLL;
      *(_OWORD *)(v14 + 144) = 0uLL;
      *(_OWORD *)(v14 + 160) = 0uLL;
      *(void *)(v14 + 176) = &unk_20E1710;
      *(void *)(v14 + 184) = 0;
      *(_OWORD *)(v14 + 192) = 0uLL;
      *(void *)(v14 + 216) = 0;
      *(void *)(v14 + 224) = &unk_20E1710;
      *(void *)(v14 + 248) = 0;
      *(_OWORD *)(v14 + 232) = 0uLL;
      *(void *)(v14 + 264) = 0;
      *(void *)(v14 + 272) = &unk_20E1710;
      *(void *)(v14 + 296) = 0;
      *(_OWORD *)(v14 + 280) = 0uLL;
      *(void *)(v14 + 312) = 0;
      *(void *)(v14 + 320) = &unk_20E1710;
      *(void *)(v14 + 344) = 0;
      *(_OWORD *)(v14 + 328) = 0uLL;
      *(void *)(v14 + 360) = 0;
      *(void *)(v14 + 368) = &unk_20E1710;
      *(void *)(v14 + 392) = 0;
      *(_OWORD *)(v14 + 376) = 0uLL;
      *(void *)(v14 + 408) = 0;
      *(void *)(v14 + 416) = &unk_20E1710;
      *(void *)(v14 + 440) = 0;
      *(_OWORD *)(v14 + 424) = 0uLL;
      *(void *)(v14 + 456) = 0;
      *(void *)(v14 + 464) = &unk_20E1710;
      *(void *)(v14 + 488) = 0;
      *(_OWORD *)(v14 + 472) = 0uLL;
      *(void *)(v14 + 504) = 0;
      *(void *)(v14 + 512) = &unk_20E1710;
      *(void *)(v14 + 552) = 0;
      *(void *)(v14 + 536) = 0;
      *(_OWORD *)(v14 + 520) = 0uLL;
      *(void *)(v14 + 560) = &unk_20E1710;
      *(void *)(v14 + 600) = 0;
      *(void *)(v14 + 584) = 0;
      *(_OWORD *)(v14 + 568) = 0uLL;
      *(void *)(v14 + 608) = &unk_20E1710;
      *(void *)(v14 + 648) = 0;
      *(void *)(v14 + 632) = 0;
      *(_OWORD *)(v14 + 616) = 0uLL;
      *(void *)(v14 + 656) = &unk_20E1710;
      *(void *)(v14 + 696) = 0;
      *(void *)(v14 + 680) = 0;
      *(_OWORD *)(v14 + 664) = 0uLL;
      *(void *)(v14 + 704) = &unk_20E1710;
      *(void *)(v14 + 744) = 0;
      *(void *)(v14 + 728) = 0;
      *(_OWORD *)(v14 + 712) = 0uLL;
      *(void *)(v14 + 752) = &unk_20E1710;
      *(void *)(v14 + 792) = 0;
      *(void *)(v14 + 776) = 0;
      *(_OWORD *)(v14 + 760) = 0uLL;
      *(void *)(v14 + 800) = &unk_20E1710;
      *(void *)(v14 + 840) = 0;
      *(void *)(v14 + 824) = 0;
      *(_OWORD *)(v14 + 808) = 0uLL;
      *(void *)(v14 + 848) = &unk_20E1710;
      *(void *)(v14 + 888) = 0;
      *(void *)(v14 + 872) = 0;
      *(_OWORD *)(v14 + 856) = 0uLL;
      *(void *)(v14 + 896) = &unk_20E1710;
      *(void *)(v14 + 936) = 0;
      uint64_t v15 = (_OWORD *)(v14 + 904);
      *(void *)(v14 + 920) = 0;
      *(_DWORD *)(v14 + 952) = -1;
      v14 += 960;
      *uint64_t v15 = 0uLL;
    }
    while (v14 != v13);
    uint64_t v17 = (char *)*a1;
    BOOL v16 = (char *)a1[1];
    if (v16 == (char *)*a1)
    {
      *a1 = v11;
      a1[1] = v13;
      a1[2] = (uint64_t)v12;
      if (!v16) {
        return;
      }
      goto LABEL_23;
    }
    do
    {
      v16 -= 960;
      uint64_t v11 = sub_FB70C4(v11 - 960, (uint64_t)v16);
    }
    while (v16 != v17);
    uint64_t v18 = (char *)*a1;
    BOOL v16 = (char *)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = (uint64_t)v12;
    if (v16 != v18)
    {
      do
      {
        v16 -= 960;
        sub_FAB36C((uint64_t)v16);
      }
      while (v16 != v18);
      BOOL v16 = v18;
    }
    if (v16)
    {
LABEL_23:
      operator delete(v16);
    }
  }
}

uint64_t sub_FB70C4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 128) = 0;
  uint64_t v4 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v4;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  sub_F2DEC0((void *)(a1 + 176), a2 + 176);
  uint64_t v5 = *(void *)(a2 + 944);
  *(_DWORD *)(a1 + 952) = *(_DWORD *)(a2 + 952);
  *(void *)(a1 + 944) = v5;
  return a1;
}

void sub_FB71F0(uint64_t *a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 6) >= a2)
  {
    sub_FB6B3C((uint64_t)a1, a2);
  }
  else
  {
    unint64_t v6 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - *a1) >> 6);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x44444444444444) {
      sub_2E00();
    }
    unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 6);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x22222222222222) {
      unint64_t v9 = 0x44444444444444;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x44444444444444) {
        sub_188D718();
      }
      uint64_t v10 = (char *)operator new(960 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v11 = (uint64_t)&v10[960 * v6];
    uint64_t v12 = &v10[960 * v9];
    unint64_t v13 = v11 + 960 * a2;
    uint64_t v14 = v11;
    do
    {
      *(void *)(v14 + 16) = 0;
      *(_OWORD *)uint64_t v14 = 0uLL;
      *(_OWORD *)(v14 + 32) = 0uLL;
      *(_OWORD *)(v14 + 48) = 0uLL;
      *(_OWORD *)(v14 + 64) = 0uLL;
      *(_OWORD *)(v14 + 80) = 0uLL;
      *(_OWORD *)(v14 + 96) = 0uLL;
      *(_OWORD *)(v14 + 112) = 0uLL;
      *(_OWORD *)(v14 + 128) = 0uLL;
      *(_OWORD *)(v14 + 144) = 0uLL;
      *(_OWORD *)(v14 + 160) = 0uLL;
      *(void *)(v14 + 176) = &unk_20E1710;
      *(void *)(v14 + 184) = 0;
      *(_OWORD *)(v14 + 192) = 0uLL;
      *(void *)(v14 + 216) = 0;
      *(void *)(v14 + 224) = &unk_20E1710;
      *(void *)(v14 + 248) = 0;
      *(_OWORD *)(v14 + 232) = 0uLL;
      *(void *)(v14 + 264) = 0;
      *(void *)(v14 + 272) = &unk_20E1710;
      *(void *)(v14 + 296) = 0;
      *(_OWORD *)(v14 + 280) = 0uLL;
      *(void *)(v14 + 312) = 0;
      *(void *)(v14 + 320) = &unk_20E1710;
      *(void *)(v14 + 344) = 0;
      *(_OWORD *)(v14 + 328) = 0uLL;
      *(void *)(v14 + 360) = 0;
      *(void *)(v14 + 368) = &unk_20E1710;
      *(void *)(v14 + 392) = 0;
      *(_OWORD *)(v14 + 376) = 0uLL;
      *(void *)(v14 + 408) = 0;
      *(void *)(v14 + 416) = &unk_20E1710;
      *(void *)(v14 + 440) = 0;
      *(_OWORD *)(v14 + 424) = 0uLL;
      *(void *)(v14 + 456) = 0;
      *(void *)(v14 + 464) = &unk_20E1710;
      *(void *)(v14 + 488) = 0;
      *(_OWORD *)(v14 + 472) = 0uLL;
      *(void *)(v14 + 504) = 0;
      *(void *)(v14 + 512) = &unk_20E1710;
      *(void *)(v14 + 552) = 0;
      *(void *)(v14 + 536) = 0;
      *(_OWORD *)(v14 + 520) = 0uLL;
      *(void *)(v14 + 560) = &unk_20E1710;
      *(void *)(v14 + 600) = 0;
      *(void *)(v14 + 584) = 0;
      *(_OWORD *)(v14 + 568) = 0uLL;
      *(void *)(v14 + 608) = &unk_20E1710;
      *(void *)(v14 + 648) = 0;
      *(void *)(v14 + 632) = 0;
      *(_OWORD *)(v14 + 616) = 0uLL;
      *(void *)(v14 + 656) = &unk_20E1710;
      *(void *)(v14 + 696) = 0;
      *(void *)(v14 + 680) = 0;
      *(_OWORD *)(v14 + 664) = 0uLL;
      *(void *)(v14 + 704) = &unk_20E1710;
      *(void *)(v14 + 744) = 0;
      *(void *)(v14 + 728) = 0;
      *(_OWORD *)(v14 + 712) = 0uLL;
      *(void *)(v14 + 752) = &unk_20E1710;
      *(void *)(v14 + 792) = 0;
      *(void *)(v14 + 776) = 0;
      *(_OWORD *)(v14 + 760) = 0uLL;
      *(void *)(v14 + 800) = &unk_20E1710;
      *(void *)(v14 + 840) = 0;
      *(void *)(v14 + 824) = 0;
      *(_OWORD *)(v14 + 808) = 0uLL;
      *(void *)(v14 + 848) = &unk_20E1710;
      *(void *)(v14 + 888) = 0;
      *(void *)(v14 + 872) = 0;
      *(_OWORD *)(v14 + 856) = 0uLL;
      *(void *)(v14 + 896) = &unk_20E1710;
      *(void *)(v14 + 936) = 0;
      uint64_t v15 = (_OWORD *)(v14 + 904);
      *(void *)(v14 + 920) = 0;
      *(_DWORD *)(v14 + 952) = -1;
      v14 += 960;
      *uint64_t v15 = 0uLL;
    }
    while (v14 != v13);
    uint64_t v17 = (char *)*a1;
    BOOL v16 = (char *)a1[1];
    if (v16 == (char *)*a1)
    {
      *a1 = v11;
      a1[1] = v13;
      a1[2] = (uint64_t)v12;
      if (!v16) {
        return;
      }
      goto LABEL_23;
    }
    do
    {
      v16 -= 960;
      uint64_t v11 = sub_FB74DC(v11 - 960, (uint64_t)v16);
    }
    while (v16 != v17);
    uint64_t v18 = (char *)*a1;
    BOOL v16 = (char *)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = (uint64_t)v12;
    if (v16 != v18)
    {
      do
      {
        v16 -= 960;
        sub_FAB36C((uint64_t)v16);
      }
      while (v16 != v18);
      BOOL v16 = v18;
    }
    if (v16)
    {
LABEL_23:
      operator delete(v16);
    }
  }
}

uint64_t sub_FB74DC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 128) = 0;
  uint64_t v4 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v4;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  sub_F2DEC0((void *)(a1 + 176), a2 + 176);
  uint64_t v5 = *(void *)(a2 + 944);
  *(_DWORD *)(a1 + 952) = *(_DWORD *)(a2 + 952);
  *(void *)(a1 + 944) = v5;
  return a1;
}

void sub_FB7608(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243F2A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_FB7628(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243F2A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_FB767C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t sub_FB7698(uint64_t a1, unsigned int *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v8 = (std::mutex *)(a1 + 208);
  std::mutex::lock((std::mutex *)(a1 + 208));
  sub_FB7ED0(*a3, &v12);
  uint64_t v9 = sub_FB7798((void **)a1, a2, &v12, a4, 0);
  uint64_t v10 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  std::mutex::unlock(v8);
  return v9;
}

void sub_FB7768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_FB7784(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FB7798(void **a1, unsigned int *a2, uint64_t *a3, unint64_t a4, int a5)
{
  unint64_t v57 = a4;
  uint64_t v5 = (unint64_t *)(a1 + 21);
  if ((unint64_t)a1[21] < a4)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v49);
      unint64_t v6 = sub_188FC78(&v49, (uint64_t)"LRUCache: item is too large (", 29);
      unint64_t v7 = (void *)sub_38EC58((uint64_t)v6, &v57);
      unint64_t v8 = sub_188FC78(v7, (uint64_t)" > ", 3);
      uint64_t v9 = (void *)sub_38EC58((uint64_t)v8, v5);
      sub_188FC78(v9, (uint64_t)")", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (SHIBYTE(v48) < 0) {
        operator delete(__p);
      }
      if (v56 < 0) {
        operator delete(v55);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return 0;
  }
  long long __p = &__p;
  p_p = &__p;
  uint64_t v48 = 0;
  BOOL v16 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  uint64_t v17 = sub_FAA71C((uint64_t *)a1 + 11, a2);
  if (a1[15] != (void *)v17)
  {
    if (!a5)
    {
      uint64_t v10 = 0;
      std::mutex::unlock(v16);
      if (!v48) {
        return v10;
      }
      goto LABEL_31;
    }
    uint64_t v18 = *(void ***)(v17 + 40);
    a1[20] = (void *)((unsigned char *)a1[20] - (unsigned char *)v18[9]);
    sub_3806E0((uint64_t *)a1 + 11, (unsigned int *)v18 + 4);
    if (v18 != &__p)
    {
      uint64_t v19 = (void **)v18[1];
      if (v19 != &__p)
      {
        uint64_t v20 = *v18;
        v20[1] = v19;
        *(void *)v18[1] = v20;
        unsigned int v21 = __p;
        *((void *)__p + 1) = v18;
        *uint64_t v18 = v21;
        v18[1] = &__p;
        a1[2] = (char *)a1[2] - 1;
        long long __p = v18;
        ++v48;
      }
    }
  }
  unsigned int v22 = a1[22];
  unint64_t v23 = a2[2];
  unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[23] - v22) >> 3);
  if (v24 <= v23)
  {
    unint64_t v25 = (v23 + 1);
    if (v25 <= v24)
    {
      if (v25 < v24) {
        a1[23] = &v22[24 * v25];
      }
    }
    else
    {
      sub_3844F4((char **)a1 + 22, v25 - v24);
      LODWORD(v23) = a2[2];
      unsigned int v22 = a1[22];
    }
  }
  ++*(void *)&v22[24 * v23];
  unint64_t v26 = (void **)a1[1];
  if (v26 != a1)
  {
    unint64_t v27 = (unint64_t)a1[21] - a4;
    do
    {
      unint64_t v28 = (unint64_t)a1[20];
      if (v28 <= v27) {
        break;
      }
      a1[20] = (void *)(v28 - (void)v26[9]);
      sub_3806E0((uint64_t *)a1 + 11, (unsigned int *)v26 + 4);
      if (v26 != &__p)
      {
        uint64_t v29 = (void **)v26[1];
        if (v29 != &__p)
        {
          long long v30 = *v26;
          v30[1] = v29;
          *(void *)v26[1] = v30;
          uint64_t v31 = __p;
          *((void *)__p + 1) = v26;
          char *v26 = v31;
          v26[1] = &__p;
          a1[2] = (char *)a1[2] - 1;
          long long __p = v26;
          ++v48;
        }
      }
      unint64_t v26 = (void **)a1[1];
    }
    while (v26 != a1);
  }
  long long v32 = *((_OWORD *)a2 + 1);
  long long v49 = *(_OWORD *)a2;
  long long v50 = v32;
  uint64_t v33 = *a3;
  uint64_t v34 = a3[1];
  uint64_t v51 = *((void *)a2 + 4);
  uint64_t v52 = v33;
  uint64_t v53 = v34;
  if (v34) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v35 = v57;
  unint64_t v54 = v57;
  int v36 = operator new(0x50uLL);
  long long v37 = v50;
  v36[1] = v49;
  v36[2] = v37;
  *((void *)v36 + 6) = v51;
  *((void *)v36 + 7) = v33;
  *((void *)v36 + 8) = v34;
  *((void *)v36 + 9) = v35;
  uint64_t v38 = (char *)*a1;
  *((void *)v38 + 1) = v36;
  *a1 = v36;
  *(void *)int v36 = v38;
  *((void *)v36 + 1) = a1;
  a1[2] = (char *)a1[2] + 1;
  char v45 = v36;
  sub_FB7D10((uint64_t *)a1 + 11, a2, &v45);
  a1[20] = (char *)a1[20] + v35;
  uint64_t v10 = 1;
  std::mutex::unlock(v16);
  if (v48)
  {
LABEL_31:
    uint64_t v39 = (void **)__p;
    char v40 = p_p;
    uint64_t v41 = *p_p;
    v41[1] = *((void *)__p + 1);
    *v39[1] = v41;
    uint64_t v48 = 0;
    if (v40 != &__p)
    {
      do
      {
        uint64_t v42 = (void **)v40[1];
        uint64_t v43 = (std::__shared_weak_count *)v40[8];
        if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
        operator delete(v40);
        char v40 = v42;
      }
      while (v42 != &__p);
    }
  }
  return v10;
}

void sub_FB7C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::mutex::unlock(v16);
  sub_37F1F0((uint64_t *)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_FB7D10(uint64_t *a1, unsigned int *a2, void *a3)
{
  uint64_t v6 = sub_FAA71C(a1, a2);
  uint64_t v7 = v6;
  uint64_t v8 = a1[4];
  if (v8 == v6)
  {
    if (2 * a1[8] + 2 > 0xAAAAAAAAAAAAAAABLL * ((v6 - a1[3]) >> 4)) {
      sub_380894((uint64_t)a1);
    }
    unint64_t v9 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) + 2654435769u) ^ *a2;
    unint64_t v10 = (a2[2] + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
    unint64_t v11 = ((int)a2[3] + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10;
    unint64_t v12 = ((int)a2[4] + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
    unint64_t v13 = ((int)a2[5] + (v12 << 6) + (v12 >> 2) + 2654435769u) ^ v12;
    unint64_t v14 = (*((unsigned __int8 *)a2 + 24) + (v13 << 6) + (v13 >> 2) + 2654435769u) ^ v13;
    unint64_t v15 = (*((unsigned __int16 *)a2 + 13) + (v14 << 6) + (v14 >> 2) + 2654435769u) ^ v14;
    unint64_t v16 = (a2[7] + (v15 << 6) + (v15 >> 2) + 2654435769u) ^ v15;
    uint64_t v17 = *a1;
    unint64_t v18 = v16 % (a1[1] - *a1);
    int v19 = *(unsigned __int8 *)(*a1 + v18);
    if (*(unsigned char *)(*a1 + v18))
    {
      while (v19 != 1)
      {
        if (v18 == 0xAAAAAAAAAAAAAAABLL * ((a1[4] - a1[3]) >> 4) - 1) {
          unint64_t v18 = 0;
        }
        else {
          ++v18;
        }
        int v19 = *(unsigned __int8 *)(v17 + v18);
        if (!*(unsigned char *)(v17 + v18)) {
          goto LABEL_10;
        }
      }
    }
    else
    {
LABEL_10:
      ++a1[8];
    }
    ++a1[7];
    *(unsigned char *)(v17 + v18) = 2;
    uint64_t v20 = 48 * v18;
    uint64_t v21 = a1[3] + v20;
    long long v22 = *(_OWORD *)a2;
    long long v23 = *((_OWORD *)a2 + 1);
    *(void *)(v21 + 32) = *((void *)a2 + 4);
    *(_OWORD *)uint64_t v21 = v22;
    *(_OWORD *)(v21 + 16) = v23;
    *(void *)(a1[3] + v20 + 40) = *a3;
  }
  return v8 == v7;
}

void *sub_FB7ED0@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t result = operator new(0x30uLL);
  uint64_t v5 = result;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  uint64_t v6 = result + 3;
  *uint64_t result = off_243F2A0;
  result[4] = 0;
  result[5] = 0;
  uint64_t v7 = *(const void **)a1;
  int64_t v8 = *(void *)(a1 + 8) - *(void *)a1;
  if (v8)
  {
    if (v8 < 0) {
      sub_2E00();
    }
    unint64_t v9 = (char *)operator new(v8);
    v5[3] = v9;
    v5[4] = v9;
    unint64_t v10 = &v9[8 * (v8 >> 3)];
    v5[5] = v10;
    uint64_t result = memcpy(v9, v7, v8);
    v5[4] = v10;
  }
  *a2 = v6;
  a2[1] = v5;
  return result;
}

void sub_FB7F84(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_FB7FAC(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      unint64_t v14 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v14 < 7) {
        goto LABEL_41;
      }
      unint64_t v15 = v14 + 1;
      uint64_t v6 = &v5[8 * (v15 & 0x3FFFFFFFFFFFFFF8)];
      unint64_t v16 = v5 + 32;
      uint64_t v17 = v15 & 0x3FFFFFFFFFFFFFF8;
      do
      {
        *(v16 - 2) = xmmword_20B8FC0;
        *(v16 - 1) = xmmword_20B8FC0;
        *unint64_t v16 = xmmword_20B8FC0;
        v16[1] = xmmword_20B8FC0;
        v16 += 4;
        v17 -= 8;
      }
      while (v17);
      if (v15 != (v15 & 0x3FFFFFFFFFFFFFF8))
      {
LABEL_41:
        do
        {
          *(void *)uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
          v6 += 8;
        }
        while (v6 != &v5[8 * a2]);
      }
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t v8 = v5 - *a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_2E00();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_188D718();
      }
      unint64_t v13 = (char *)operator new(8 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v18 = &v13[8 * v9];
    int v19 = &v18[8 * a2];
    unint64_t v20 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v21 = v18;
    if (v20 < 7) {
      goto LABEL_42;
    }
    unint64_t v22 = v20 + 1;
    uint64_t v21 = &v18[8 * (v22 & 0x3FFFFFFFFFFFFFF8)];
    long long v23 = v18 + 32;
    uint64_t v24 = v22 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      *(v23 - 2) = xmmword_20B8FC0;
      *(v23 - 1) = xmmword_20B8FC0;
      *long long v23 = xmmword_20B8FC0;
      v23[1] = xmmword_20B8FC0;
      v23 += 4;
      v24 -= 8;
    }
    while (v24);
    if (v22 != (v22 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_42:
      do
      {
        *(void *)uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        v21 += 8;
      }
      while (v21 != v19);
    }
    unint64_t v25 = &v13[8 * v12];
    if (v5 != v7)
    {
      unint64_t v26 = v5 - v7 - 8;
      if (v26 < 0x58) {
        goto LABEL_43;
      }
      if ((unint64_t)(v5 - &v13[v8]) < 0x20) {
        goto LABEL_43;
      }
      uint64_t v27 = (v26 >> 3) + 1;
      uint64_t v28 = 8 * (v27 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v28];
      v18 -= v28;
      uint64_t v29 = &v13[8 * v9 - 16];
      long long v30 = (long long *)(v5 - 16);
      uint64_t v31 = v27 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v32 = *v30;
        *((_OWORD *)v29 - 1) = *(v30 - 1);
        *(_OWORD *)uint64_t v29 = v32;
        v29 -= 32;
        v30 -= 2;
        v31 -= 4;
      }
      while (v31);
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_43:
        do
        {
          uint64_t v33 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v18 - 1) = v33;
          v18 -= 8;
        }
        while (v6 != v7);
      }
    }
    uint64_t v34 = *a1;
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v25;
    if (v34)
    {
      operator delete(v34);
    }
  }
}

_DWORD *sub_FB81E4(uint64_t a1, void *a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + 1;
    if (v12 >> 61) {
      sub_2E00();
    }
    uint64_t v13 = v4 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15 >> 61) {
      sub_188D718();
    }
    uint64_t v16 = 8 * v15;
    uint64_t v17 = operator new(8 * v15);
    unint64_t v18 = &v17[8 * v11];
    unsigned int v19 = (*a2 >> 4) & 0x8FFFFFFF | (*a2 << 31) | (((*a2 >> 3) & 1) << 28) & 0x9FFFFFFF | (((*a2 >> 2) & 1) << 29) & 0xBFFFFFFF | (((*a2 >> 1) & 1) << 30);
    *unint64_t v18 = HIDWORD(*a2);
    v18[1] = v19;
    uint64_t v8 = v18 + 2;
    if (v5 != v9)
    {
      unint64_t v20 = v5 - v9 - 8;
      if (v20 < 0x58) {
        goto LABEL_23;
      }
      if ((unint64_t)(&v5[-v10] - v17) < 0x20) {
        goto LABEL_23;
      }
      uint64_t v21 = (v20 >> 3) + 1;
      uint64_t v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v6 = &v5[-v22];
      unint64_t v18 = (_DWORD *)((char *)v18 - v22);
      long long v23 = &v17[8 * v11 - 16];
      uint64_t v24 = v5 - 16;
      uint64_t v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        *long long v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 4;
      }
      while (v25);
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_23:
        do
        {
          uint64_t v27 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v18 - 1) = v27;
          v18 -= 2;
        }
        while (v6 != v9);
      }
    }
    *(void *)a1 = v18;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = &v17[v16];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    unsigned int v7 = (*a2 >> 4) & 0x8FFFFFFF | (*a2 << 31) | (((*a2 >> 3) & 1) << 28) & 0x9FFFFFFF | (((*a2 >> 2) & 1) << 29) & 0xBFFFFFFF | (((*a2 >> 1) & 1) << 30);
    *(_DWORD *)uint64_t v5 = HIDWORD(*a2);
    *((_DWORD *)v5 + 1) = v7;
    uint64_t v8 = v5 + 8;
  }
  *(void *)(a1 + 8) = v8;
  return v8 - 2;
}

void sub_FB838C()
{
  unk_25FD15F = 16641;
  word_25FD148 = 65;
  byte_25FD177 = 1;
  byte_25FD161 = 0;
}

void **sub_FB83B4(void **a1, void *a2, void *a3)
{
  *a1 = a2;
  a1[1] = (void *)sub_375FD8(a2);
  uint64_t v6 = (_DWORD *)sub_374D14(*a1);
  int v7 = sub_29AEC4(v6);
  if (v7)
  {
    uint64_t v8 = sub_374D14(*a1);
    int v7 = sub_29AEB4(v8);
  }
  *((_DWORD *)a1 + 4) = v7;
  *((_WORD *)a1 + 10) = *(_WORD *)(sub_3769E8(*a1) + 3872);
  sub_ED6F04((uint64_t)(a1 + 3), a2);
  a1[523] = (void *)sub_3750CC(a2);
  uint64_t v9 = sub_375E94(a2);
  uint64_t v10 = a1[1];
  a1[524] = (void *)v9;
  a1[525] = v10;
  sub_F170F0((uint64_t *)a1 + 526, a2);
  a1[532] = a3;
  a1[533] = (void *)sub_374E44(a2);
  a1[534] = (void *)sub_374ECC(a2);
  a1[535] = (void *)sub_50BE8((uint64_t)a2);
  a1[536] = 0;
  sub_FC5338(a1 + 537, 0x100u);
  return a1;
}

void sub_FB84B8(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)v1[520];
  if (v3)
  {
    v1[521] = v3;
    operator delete(v3);
  }
  sub_3A6318(v1 + 4);
  _Unwind_Resume(a1);
}

void sub_FB84DC(_Unwind_Exception *a1)
{
  sub_C62E9C(v1);
  _Unwind_Resume(a1);
}

void sub_FB84F0(_Unwind_Exception *a1)
{
  unint64_t v4 = *(void **)(v1 + 4232);
  if (v4)
  {
    *(void *)(v1 + 4240) = v4;
    operator delete(v4);
  }
  sub_C62E9C(v2);
  _Unwind_Resume(a1);
}

void sub_FB8518(uint64_t **a1, _OWORD *a2, int *a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[1] = *a6;
  long long v168 = 0u;
  long long v169 = 0u;
  long long v167 = 0u;
  sub_FC3DA0((uint64_t)&v167);
  uint64_t v11 = (_OWORD *)(*(void *)(*((void *)&v167 + 1)
                             + (((*((void *)&v169 + 1) + (void)v169) >> 4) & 0xFFFFFFFFFFFFFF8))
                 + 32 * ((*((void *)&v169 + 1) + v169) & 0x7F));
  long long v12 = a2[1];
  *uint64_t v11 = *a2;
  v11[1] = v12;
  BOOL v13 = __CFADD__(*((void *)&v169 + 1), 1);
  uint64_t v14 = ++*((void *)&v169 + 1);
  if (!v13)
  {
    uint64_t v137 = (uint64_t)(a3 + 2);
    uint64_t v140 = (uint64_t)a2;
    unint64_t v20 = &v154;
    uint64_t v142 = a3;
    while (1)
    {
      uint64_t v21 = v20;
      uint64_t v22 = 16 * (v168 - *((void *)&v167 + 1)) - 1;
      if ((void)v168 == *((void *)&v167 + 1)) {
        uint64_t v22 = 0;
      }
      long long v23 = (long long *)(*(void *)(*((void *)&v167 + 1)
                                   + (((unint64_t)(v169 + v14 - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                       + 32 * ((v169 + v14 - 1) & 0x7F));
      long long v24 = v23[1];
      long long v165 = *v23;
      long long v166 = v24;
      *((void *)&v169 + 1) = v14 - 1;
      if ((unint64_t)(v22 - (v14 + v169) + 1) >= 0x100)
      {
        operator delete(*(void **)(v168 - 8));
        *(void *)&long long v168 = v168 - 8;
      }
      unsigned int v25 = DWORD1(v166);
      if (v166)
      {
        long long v26 = sub_F93238((uint64_t)a1[524], v166, 1);
        if (!v26
          || (uint64_t v27 = &v26[-*(int *)v26], *(unsigned __int16 *)v27 < 9u)
          || (uint64_t v28 = *((unsigned __int16 *)v27 + 4)) == 0)
        {
          unsigned int v32 = -2;
          goto LABEL_21;
        }
        uint64_t v29 = (int *)sub_F930D4((unsigned int *)&v26[v28 + *(unsigned int *)&v26[v28]], v25);
        long long v30 = (unsigned __int16 *)((char *)v29 - *v29);
        if (*v30 >= 5u)
        {
          uint64_t v31 = v30[2];
          if (v31)
          {
            unsigned int v32 = *((unsigned __int8 *)v29 + v31) - 1;
            goto LABEL_21;
          }
        }
      }
      unsigned int v32 = -1;
LABEL_21:
      if (sub_37D0C8(*a1) && v32 <= *((_DWORD *)a1[1] + 969)) {
        unsigned int v32 = 0;
      }
      unint64_t v20 = v21;
      uint64_t v33 = a3;
      uint64_t v34 = a5;
      sub_FB9684(a1, (uint64_t)&v165, v33, a4, a5, v32, (uint64_t *)&v163);
      unint64_t v35 = v163;
      uint64_t v36 = *v163;
      uint64_t v143 = v163[1];
      uint64_t v144 = *v163;
      if (*v163 == v143)
      {
        if (sub_37D0C8(*a1))
        {
          a6[1] = *a6;
          unint64_t v20 = v21;
        }
        else
        {
          int v162 = 0x7FFFFFFF;
          v161[0] = sub_374E8C(*a1);
          v161[1] = (uint64_t)a1;
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)&v151);
            unint64_t v82 = sub_188FC78(&v151, (uint64_t)"Cache entries for input shortcut ", 33);
            sub_FBA898(v82, (unint64_t *)v140);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 1u);
            if (v148 < 0) {
              operator delete(__p[0]);
            }
            unint64_t v151 = v139;
            *(void **)((char *)&v151 + *(v139 - 3)) = v138;
            if (SHIBYTE(v157) < 0) {
              operator delete(v156);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          sub_FBA9A0(v161, (void (__cdecl **)(std::ostringstream *__hidden))v140);
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)&v151);
            unint64_t v83 = sub_188FC78(&v151, (uint64_t)"Cache entries for failed (current) shortcut ", 44);
            sub_FBB484(v83, (unint64_t *)&v165);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 1u);
            if (v148 < 0) {
              operator delete(__p[0]);
            }
            unint64_t v151 = v139;
            *(void **)((char *)&v151 + *(v139 - 3)) = v138;
            if (SHIBYTE(v157) < 0) {
              operator delete(v156);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          sub_FBA9A0(v161, (void (__cdecl **)(std::ostringstream *__hidden))&v165);
          __int16 v84 = *((_WORD *)a1 + 10);
          int v85 = *((_DWORD *)a1 + 4);
          uint64_t v86 = a1[533];
          uint64_t v87 = (uint64_t)a1[1];
          int v88 = *v142;
          unint64_t v151 = *(void **)(v140 + 16);
          LODWORD(v152) = *(_DWORD *)(v140 + 24);
          HIDWORD(v152) = v88;
          unint64_t v153 = 0x8000000080000000;
          LODWORD(v154) = 0x7FFFFFFF;
          BYTE4(v154) = a5;
          HIWORD(v154) = v84;
          int v155 = v85;
          sub_FC54A4((uint64_t *)&v151, v86, v87, (uint64_t)v160);
          __int16 v89 = *((_WORD *)a1 + 10);
          int v90 = *((_DWORD *)a1 + 4);
          int v91 = a1[533];
          uint64_t v92 = (uint64_t)a1[1];
          int v93 = *v142;
          unint64_t v151 = (void *)v166;
          uint64_t v152 = (void (__cdecl **)(std::stringbuf *__hidden))__PAIR64__(v93, DWORD2(v166));
          unint64_t v153 = 0x8000000080000000;
          LODWORD(v154) = 0x7FFFFFFF;
          BYTE4(v154) = a5;
          HIWORD(v154) = v89;
          int v155 = v90;
          sub_FC54A4((uint64_t *)&v151, v91, v92, (uint64_t)v159);
          sub_E1B4((uint64_t)&v151);
          unsigned int v94 = sub_188FC78(&v153, (uint64_t)"Unpacking of shortcut ", 22);
          int v95 = sub_FBA898(v94, (unint64_t *)v140);
          unsigned int v96 = sub_188FC78(v95, (uint64_t)" (level ", 8);
          uint64_t v97 = *(void *)(v140 + 16);
          if (v97)
          {
            __int16 v98 = sub_F93238((uint64_t)a1[524], *(void *)(v140 + 16), 1);
            if (v98)
            {
              unsigned __int16 v99 = &v98[-*(int *)v98];
              if (*(unsigned __int16 *)v99 >= 9u)
              {
                uint64_t v100 = *((unsigned __int16 *)v99 + 4);
                if (v100) {
                  sub_F930D4((unsigned int *)&v98[v100 + *(unsigned int *)&v98[v100]], HIDWORD(v97));
                }
              }
            }
          }
          std::ostream::operator<<();
          int v101 = sub_188FC78(v96, (uint64_t)", cost ", 7);
          sub_FA2878((uint64_t)a1[532], v140, v142, a4, a5);
          std::ostream::operator<<();
          sub_188FC78(v101, (uint64_t)",", 1);
          std::ostream::operator<<();
          int v102 = sub_188FC78(v101, (uint64_t)", key: ", 7);
          unint64_t v103 = sub_FBB54C(v102, v160);
          int v104 = sub_188FC78(v103, (uint64_t)") failed on level ", 18);
          unsigned int v105 = DWORD1(v166);
          if (v166)
          {
            unint64_t v106 = sub_F93238((uint64_t)a1[524], v166, 1);
            unint64_t v107 = v142;
            char v108 = v34;
            if (v106)
            {
              int v109 = &v106[-*(int *)v106];
              if (*(unsigned __int16 *)v109 >= 9u)
              {
                uint64_t v110 = *((unsigned __int16 *)v109 + 4);
                if (v110) {
                  sub_F930D4((unsigned int *)&v106[v110 + *(unsigned int *)&v106[v110]], v105);
                }
              }
            }
          }
          else
          {
            char v108 = a5;
            unint64_t v107 = v142;
          }
          std::ostream::operator<<();
          int v111 = sub_188FC78(v104, (uint64_t)" for sub shortcut ", 18);
          unsigned __int8 v112 = sub_FBB484(v111, (unint64_t *)&v165);
          unsigned __int16 v113 = sub_188FC78(v112, (uint64_t)" (cost ", 7);
          sub_FA2878((uint64_t)a1[532], (uint64_t)&v165, v107, a4, v108);
          std::ostream::operator<<();
          sub_188FC78(v113, (uint64_t)",", 1);
          std::ostream::operator<<();
          unsigned int v114 = sub_188FC78(v113, (uint64_t)") with cost_function: ", 22);
          char v115 = *((unsigned char *)v142 + 31);
          if (v115 >= 0) {
            uint64_t v116 = v137;
          }
          else {
            uint64_t v116 = *((void *)v142 + 1);
          }
          if (v115 >= 0) {
            uint64_t v117 = *((unsigned __int8 *)v142 + 31);
          }
          else {
            uint64_t v117 = *((void *)v142 + 2);
          }
          int v118 = sub_188FC78(v114, v116, v117);
          int v119 = sub_188FC78(v118, (uint64_t)", id: ", 6);
          std::ostream::operator<<();
          char v120 = sub_188FC78(v119, (uint64_t)", time_utc:", 11);
          __int16 v121 = (void *)sub_266E4((uint64_t)v120);
          int v122 = sub_188FC78(v121, (uint64_t)", eval_time: ", 13);
          char v123 = (void *)sub_266E4((uint64_t)v122);
          sub_188FC78(v123, (uint64_t)", uses_blockages: ", 18);
          int v124 = (void *)std::ostream::operator<<();
          sub_188FC78(v124, (uint64_t)", uses_area_incidents: ", 23);
          uint64_t v125 = (void *)std::ostream::operator<<();
          sub_188FC78(v125, (uint64_t)", traffic_type: ", 16);
          unint64_t v126 = (void *)std::ostream::operator<<();
          unint64_t v127 = sub_188FC78(v126, (uint64_t)", current_cache_key: ", 21);
          unint64_t v128 = sub_FBB54C(v127, v159);
          sub_188FC78(v128, (uint64_t)", scanned nodes: ", 17);
          unint64_t v129 = (void *)std::ostream::operator<<();
          sub_188FC78(v129, (uint64_t)", cache hit: ", 13);
          std::ostream::operator<<();
          unint64_t v20 = v21;
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)__p);
            std::stringbuf::str();
            if ((v146 & 0x80u) == 0) {
              uint64_t v130 = v145;
            }
            else {
              uint64_t v130 = (void **)v145[0];
            }
            if ((v146 & 0x80u) == 0) {
              uint64_t v131 = v146;
            }
            else {
              uint64_t v131 = (uint64_t)v145[1];
            }
            sub_188FC78(__p, (uint64_t)v130, v131);
            if ((char)v146 < 0) {
              operator delete(v145[0]);
            }
            std::stringbuf::str();
            sub_7246C((uint64_t *)v145, 3u);
            if ((char)v146 < 0) {
              operator delete(v145[0]);
            }
            __p[0] = v139;
            *(void **)((char *)__p + *(v139 - 3)) = v138;
            if (v150 < 0) {
              operator delete(v149);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          a6[1] = *a6;
          unint64_t v151 = (void *)v136;
          *(void **)((char *)&v151 + *(void *)(v136 - 24)) = (void *)v135;
          unint64_t v153 = v134;
          if (v158 < 0) {
            operator delete(v157);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          std::ios::~ios();
        }
      }
      else if (v32)
      {
        uint64_t v37 = *((void *)&v169 + 1);
        uint64_t v38 = (_OWORD *)v163[1];
        do
        {
          uint64_t v41 = *((void *)&v167 + 1);
          if ((void)v168 == *((void *)&v167 + 1)) {
            uint64_t v42 = 0;
          }
          else {
            uint64_t v42 = 16 * (v168 - *((void *)&v167 + 1)) - 1;
          }
          unint64_t v43 = v37 + v169;
          if (v42 == v43)
          {
            sub_FC3DA0((uint64_t)&v167);
            uint64_t v41 = *((void *)&v167 + 1);
            unint64_t v43 = *((void *)&v169 + 1) + v169;
          }
          uint64_t v38 = (_OWORD *)((char *)v38 - 88);
          uint64_t v39 = (_OWORD *)(*(void *)(v41 + ((v43 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v43 & 0x7F));
          long long v40 = v38[1];
          *uint64_t v39 = *v38;
          v39[1] = v40;
          uint64_t v37 = ++*((void *)&v169 + 1);
        }
        while (v38 != (_OWORD *)*v35);
      }
      else
      {
        char v45 = (char *)*a6;
        uint64_t v44 = (char *)a6[1];
        uint64_t v46 = v163[1];
        uint64_t v47 = (uint64_t)&v44[-*a6];
        uint64_t v48 = 0x2E8BA2E8BA2E8BA3 * (v47 >> 3);
        unint64_t v49 = v48 + 0x2E8BA2E8BA2E8BA3 * ((v46 - v36) >> 3);
        if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a6[2] - *a6) >> 3) < v49)
        {
          if (v49 > 0x2E8BA2E8BA2E8BALL) {
            sub_2E00();
          }
          long long v50 = (char *)operator new(v47 + v46 - v36);
          uint64_t v51 = &v50[88 * v48];
          if (v44 != v45)
          {
            uint64_t v52 = &v50[88 * v48];
            do
            {
              long long v53 = *(_OWORD *)(v44 - 88);
              *(_OWORD *)(v52 - 72) = *(_OWORD *)(v44 - 72);
              *(_OWORD *)(v52 - 88) = v53;
              long long v54 = *(_OWORD *)(v44 - 56);
              long long v55 = *(_OWORD *)(v44 - 40);
              long long v56 = *(_OWORD *)(v44 - 24);
              uint64_t v51 = v52 - 88;
              *((void *)v52 - 1) = *((void *)v44 - 1);
              *(_OWORD *)(v52 - 24) = v56;
              *(_OWORD *)(v52 - 40) = v55;
              *(_OWORD *)(v52 - 56) = v54;
              v44 -= 88;
              v52 -= 88;
            }
            while (v44 != v45);
          }
          *a6 = v51;
          a6[1] = &v50[88 * v48];
          a6[2] = &v50[88 * v49];
          if (v45) {
            operator delete(v45);
          }
        }
        unint64_t v57 = (_OWORD *)*v35;
        BOOL v58 = (_OWORD *)v35[1];
        unint64_t v20 = v21;
        if (v57 != v58)
        {
          char v59 = (char *)a6[1];
          do
          {
            unint64_t v65 = a6[2];
            if ((unint64_t)v59 < v65)
            {
              long long v60 = v57[1];
              *(_OWORD *)char v59 = *v57;
              *((_OWORD *)v59 + 1) = v60;
              long long v61 = v57[2];
              long long v62 = v57[3];
              long long v63 = v57[4];
              *((void *)v59 + 10) = *((void *)v57 + 10);
              *((_OWORD *)v59 + 3) = v62;
              *((_OWORD *)v59 + 4) = v63;
              *((_OWORD *)v59 + 2) = v61;
              unint64_t v64 = v59 + 88;
            }
            else
            {
              BOOL v66 = (char *)*a6;
              uint64_t v67 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)&v59[-*a6] >> 3);
              unint64_t v68 = v67 + 1;
              if ((unint64_t)(v67 + 1) > 0x2E8BA2E8BA2E8BALL) {
                sub_2E00();
              }
              unint64_t v69 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v65 - (void)v66) >> 3);
              if (2 * v69 > v68) {
                unint64_t v68 = 2 * v69;
              }
              if (v69 >= 0x1745D1745D1745DLL) {
                unint64_t v70 = 0x2E8BA2E8BA2E8BALL;
              }
              else {
                unint64_t v70 = v68;
              }
              if (v70)
              {
                if (v70 > 0x2E8BA2E8BA2E8BALL) {
                  sub_188D718();
                }
                uint64_t v71 = (char *)operator new(88 * v70);
              }
              else
              {
                uint64_t v71 = 0;
              }
              uint64_t v72 = &v71[88 * v67];
              long long v73 = v57[1];
              *(_OWORD *)uint64_t v72 = *v57;
              *((_OWORD *)v72 + 1) = v73;
              long long v74 = v57[2];
              long long v75 = v57[3];
              long long v76 = v57[4];
              *((void *)v72 + 10) = *((void *)v57 + 10);
              *((_OWORD *)v72 + 3) = v75;
              *((_OWORD *)v72 + 4) = v76;
              *((_OWORD *)v72 + 2) = v74;
              unint64_t v77 = v72;
              if (v59 != v66)
              {
                do
                {
                  long long v78 = *(_OWORD *)(v59 - 88);
                  *(_OWORD *)(v77 - 72) = *(_OWORD *)(v59 - 72);
                  *(_OWORD *)(v77 - 88) = v78;
                  long long v79 = *(_OWORD *)(v59 - 56);
                  long long v80 = *(_OWORD *)(v59 - 40);
                  long long v81 = *(_OWORD *)(v59 - 24);
                  *((void *)v77 - 1) = *((void *)v59 - 1);
                  *(_OWORD *)(v77 - 24) = v81;
                  *(_OWORD *)(v77 - 40) = v80;
                  *(_OWORD *)(v77 - 56) = v79;
                  v77 -= 88;
                  v59 -= 88;
                }
                while (v59 != v66);
                char v59 = (char *)*a6;
              }
              unint64_t v64 = v72 + 88;
              *a6 = v77;
              a6[1] = v72 + 88;
              a6[2] = &v71[88 * v70];
              if (v59) {
                operator delete(v59);
              }
            }
            a6[1] = v64;
            unint64_t v57 = (_OWORD *)((char *)v57 + 88);
            char v59 = v64;
            unint64_t v20 = v21;
          }
          while (v57 != v58);
        }
      }
      unint64_t v132 = v164;
      if (v164 && !atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
      a5 = v34;
      a3 = v142;
      if (v144 != v143)
      {
        uint64_t v14 = *((void *)&v169 + 1);
        if (*((void *)&v169 + 1)) {
          continue;
        }
      }
      break;
    }
  }
  unint64_t v15 = (void **)*((void *)&v167 + 1);
  uint64_t v16 = (void **)v168;
  *((void *)&v169 + 1) = 0;
  unint64_t v17 = v168 - *((void *)&v167 + 1);
  if ((void)v168 - *((void *)&v167 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v15);
      uint64_t v16 = (void **)v168;
      unint64_t v15 = (void **)(*((void *)&v167 + 1) + 8);
      *((void *)&v167 + 1) = v15;
      unint64_t v17 = v168 - (void)v15;
    }
    while ((void)v168 - (void)v15 > 0x10uLL);
  }
  unint64_t v18 = v17 >> 3;
  if (v18 == 1)
  {
    uint64_t v19 = 64;
    goto LABEL_117;
  }
  if (v18 == 2)
  {
    uint64_t v19 = 128;
LABEL_117:
    *(void *)&long long v169 = v19;
  }
  if (v15 != v16)
  {
    do
    {
      unint64_t v133 = *v15++;
      operator delete(v133);
    }
    while (v15 != v16);
    if ((void)v168 != *((void *)&v167 + 1)) {
      *(void *)&long long v168 = v168 + ((*((void *)&v167 + 1) - v168 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if ((void)v167) {
    operator delete((void *)v167);
  }
}

void sub_FB954C(_Unwind_Exception *a1)
{
  sub_48CA88(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_FB9560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a67);
  sub_14A84(v67 - 208);
  sub_48CA88(v67 - 160);
  _Unwind_Resume(a1);
}

void sub_FB9610(_Unwind_Exception *a1)
{
  sub_48CA88(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_FB962C(_Unwind_Exception *a1)
{
  sub_48CA88(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_FB9644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1C02990((uint64_t)&a64);
  sub_14A84(v64 - 208);
  sub_48CA88(v64 - 160);
  _Unwind_Resume(a1);
}

void sub_FB9668(_Unwind_Exception *a1)
{
  sub_14A84(v1 - 208);
  sub_48CA88(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_FB9684(void **a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  int v153 = a6;
  uint64_t v132 = (uint64_t)(a1 + 537);
  a1[644] = a1[643];
  a1[641] = a1[640];
  *((_DWORD *)a1 + 1292) = 0;
  a1[634] = a1[633];
  uint64_t v9 = 0x1FFFFFFFFFFFFFA0;
  do
  {
    uint64_t v11 = &a1[v9];
    if (a1[v9 + 635])
    {
      unint64_t v12 = (unint64_t)v11[636];
      if (v12 >= 0x80)
      {
        uint64_t v10 = &a1[v9];
        operator delete(v11[633]);
        v11[633] = &unk_20E1710;
        v10[638] = 0;
        v10[634] = 0;
        v10[636] = 0;
        v10[635] = 0;
      }
      else if (v12)
      {
        v11[635] = 0;
        memset(v11[633], 128, v12 + 8);
        *((unsigned char *)v11[633] + v12) = -1;
        unint64_t v13 = (unint64_t)v11[636];
        if (v13 == 7) {
          uint64_t v14 = 6;
        }
        else {
          uint64_t v14 = v13 - (v13 >> 3);
        }
        a1[v9 + 638] = (void *)(v14 - (void)v11[635]);
      }
    }
    v9 += 6;
  }
  while (v9 * 8);
  a1[637] = a1[636];
  *((_DWORD *)a1 + 1278) = 0;
  unint64_t v15 = *(void *)a2;
  unint64_t v151 = *(void *)(a2 + 8);
  unint64_t v152 = v15;
  LOWORD(v15) = *((_WORD *)a1 + 10);
  int v17 = *((_DWORD *)a1 + 4);
  unint64_t v18 = a1[533];
  uint64_t v19 = (uint64_t)a1[1];
  int v20 = *a3;
  *(void *)uint64_t v143 = *(void *)(a2 + 16);
  uint64_t v16 = *(void *)v143;
  *(_DWORD *)&v143[8] = *(_DWORD *)(a2 + 24);
  *(_DWORD *)&v143[12] = v20;
  *(void *)&v143[16] = 0x8000000080000000;
  *(_DWORD *)&v143[24] = 0x7FFFFFFF;
  v143[28] = a5;
  *(_WORD *)&v143[30] = v15;
  *(_DWORD *)&v143[32] = v17;
  sub_FC54A4((uint64_t *)v143, v18, v19, (uint64_t)v150);
  if (!v16)
  {
LABEL_19:
    LODWORD(v26) = 0;
    goto LABEL_20;
  }
  uint64_t v21 = sub_F93238((uint64_t)a1[524], v16, 1);
  if (v21)
  {
    uint64_t v22 = &v21[-*(int *)v21];
    if (*(unsigned __int16 *)v22 >= 9u)
    {
      uint64_t v23 = *((unsigned __int16 *)v22 + 4);
      if (v23)
      {
        long long v24 = (int *)sub_F930D4((unsigned int *)&v21[v23 + *(unsigned int *)&v21[v23]], HIDWORD(v16));
        unsigned int v25 = (unsigned __int16 *)((char *)v24 - *v24);
        if (*v25 >= 5u)
        {
          uint64_t v26 = v25[2];
          if (v26) {
            LODWORD(v26) = *((unsigned __int8 *)v24 + v26);
          }
          goto LABEL_20;
        }
        goto LABEL_19;
      }
    }
  }
  LODWORD(v26) = -1;
LABEL_20:
  int v149 = v26;
  sub_FBB760(a1[534], v150, (uint64_t)&v146);
  ++*((_DWORD *)a1 + 1072);
  if (v148)
  {
    ++*((_DWORD *)a1 + 1073);
    if (v146 && *v146 != v146[1] || (uint64_t v27 = sub_3750CC(*a1), !sub_723EC(3u)))
    {
LABEL_43:
      uint64_t v36 = v147;
      *a7 = (uint64_t)v146;
      a7[1] = (uint64_t)v36;
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_127;
    }
    sub_6BAC((uint64_t)v143);
    uint64_t v28 = sub_188FC78(v143, (uint64_t)"Failed to unpack ", 17);
    sub_3D1524(&v152, v27);
    if (v154[23] >= 0) {
      uint64_t v29 = v154;
    }
    else {
      uint64_t v29 = *(unsigned char **)v154;
    }
    if (v154[23] >= 0) {
      uint64_t v30 = v154[23];
    }
    else {
      uint64_t v30 = *(void *)&v154[8];
    }
    uint64_t v31 = sub_188FC78(v28, (uint64_t)v29, v30);
    unsigned int v32 = sub_188FC78(v31, (uint64_t)" to ", 4);
    sub_3D1524(&v151, v27);
    if (v142 >= 0) {
      uint64_t v33 = &v140;
    }
    else {
      uint64_t v33 = v140;
    }
    if (v142 >= 0) {
      uint64_t v34 = HIBYTE(v142);
    }
    else {
      uint64_t v34 = (uint64_t)v141;
    }
    unint64_t v35 = sub_188FC78(v32, (uint64_t)v33, v34);
    sub_188FC78(v35, (uint64_t)": cached shortcut is empty?", 27);
    if (SHIBYTE(v142) < 0)
    {
      operator delete(v140);
      if ((v154[23] & 0x80000000) == 0) {
        goto LABEL_38;
      }
    }
    else if ((v154[23] & 0x80000000) == 0)
    {
LABEL_38:
      std::stringbuf::str();
      sub_7246C((uint64_t *)v154, 3u);
      if ((v154[23] & 0x80000000) != 0) {
        operator delete(*(void **)v154);
      }
      if (SHIBYTE(v144) < 0) {
        operator delete(*(void **)&v143[72]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_43;
    }
    operator delete(*(void **)v154);
    goto LABEL_38;
  }
  memset(&v154[1], 0, 32);
  *(_OWORD *)&v143[47] = *(_OWORD *)v154;
  int v155 = 0;
  memset(v143, 0, 44);
  *(_WORD *)&v143[44] = -1;
  v143[46] = 0;
  *(_OWORD *)&v143[63] = *(_OWORD *)&v154[16];
  *(void *)&v143[76] = 0;
  *(_WORD *)&v143[84] = -1;
  v143[86] = 0;
  LODWORD(v144) = 0;
  BYTE4(v144) = 0;
  unsigned int v145 = 0;
  sub_FBB848(v132, (uint64_t *)&v152, (uint64_t)v143);
  int v128 = v153;
  memset(v154, 0, 24);
  uint64_t v140 = 0;
  unint64_t v141 = 0;
  uint64_t v142 = 0;
  if (*((_DWORD *)a1 + 1292))
  {
    while (1)
    {
      uint64_t v37 = (uint64_t)&a1[633][14 * *(unsigned int *)a1[640]];
      unint64_t v39 = *(void *)v37;
      uint64_t v38 = *(void *)(v37 + 8);
      unsigned int v40 = *(_DWORD *)(v37 + 104);
      sub_F773C4(v132);
      BOOL v41 = v39 != v151;
      if (v39 == v151) {
        break;
      }
      if (v39 == v152
        || !sub_F963A0((uint64_t)a1[524], HIDWORD(v39) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v39) << 32), &v149))
      {
        if (v128)
        {
          sub_FA2A1C((void **)a1[532], v39, &v153, 0, a3, a4, a5, (uint64_t)&v140);
          uint64_t v42 = (char *)v140;
          unint64_t v43 = v141;
          if (v140 != v141)
          {
            unsigned int v44 = v40 + 1;
            do
            {
              uint64_t v45 = *(void *)(v42 + 28);
              unint64_t v46 = v45 & 0xFFFFFFFF00000000;
              if (v45 != -1 && v46 != 0x7FFFFFFF00000000)
              {
                v138[0] = *((void **)v42 + 1);
                *(void *)uint64_t v143 = (v46 + v38) & 0xFFFFFFFF00000000 | (v45 + v38);
                memset(&v143[8], 0, 36);
                *(_WORD *)&v143[44] = -1;
                v143[46] = 0;
                memset(&v143[48], 0, 36);
                *(_WORD *)&v143[84] = -1;
                v143[86] = 0;
                LODWORD(v144) = 0;
                BYTE4(v144) &= 0xF8u;
                unsigned int v145 = v44;
                uint64_t v48 = *((void *)v42 + 2);
                int v49 = *((_DWORD *)v42 + 6);
                *(_OWORD *)&v143[8] = *(_OWORD *)v42;
                *(void *)&v143[24] = v48;
                *(_DWORD *)&v143[32] = v49;
                sub_FBB9E0(v132, (uint64_t *)v138, (uint64_t)v143);
              }
              v42 += 40;
            }
            while (v42 != v43);
          }
        }
        else if (!sub_37D0C8(*a1) {
               || (v50 = sub_3750CC(*a1), uint64_t v51 = v50, !*(unsigned char *)(v50 + 7774))
        }
               || (uint64_t v52 = sub_290DEC(v50 + 3896, HIDWORD(v39), 1)) != 0
               && (long long v53 = &v52[-*(int *)v52], *(unsigned __int16 *)v53 >= 5u)
               && (uint64_t v54 = *((unsigned __int16 *)v53 + 2)) != 0
               && *(_DWORD *)&v52[v54 + *(unsigned int *)&v52[v54]] > WORD1(v39)
               && sub_295DB4(v51, HIDWORD(v39) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v39) << 32)))
        {
          sub_ED75C0((uint64_t)(a1 + 3), v39, 0, v154, 0);
          uint64_t v56 = *(void *)v154;
          uint64_t v55 = *(void *)&v154[8];
          if (*(void *)v154 != *(void *)&v154[8])
          {
            unsigned int v57 = v40 + 1;
            do
            {
              unint64_t v58 = sub_F178C0((uint64_t *)a1 + 526, (int **)v56, 0x3B9ACA00u, (uint64_t)a3);
              unint64_t v60 = v58 & 0xFFFFFFFF00000000;
              if (v58 != -1 && v60 != 0x7FFFFFFF00000000 && v59 != 0x7FFFFFFFFFFFFFFFLL)
              {
                v138[0] = (void *)((((*(void *)(v56 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v56 + 72) << 32) | (2 * ((*(void *)(v56 + 72) & 0xFF000000000000) == 0)))
                                  + (((unint64_t)*(unsigned int *)(v56 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v56 + 84) >> 1) & 1);
                *(void *)uint64_t v143 = (v60 + v38) & 0xFFFFFFFF00000000 | (v58 + v38);
                long long v63 = *(_OWORD *)(v56 + 16);
                *(_OWORD *)&v143[8] = *(_OWORD *)v56;
                *(_OWORD *)&v143[24] = v63;
                long long v64 = *(_OWORD *)(v56 + 32);
                long long v65 = *(_OWORD *)(v56 + 48);
                long long v66 = *(_OWORD *)(v56 + 64);
                uint64_t v144 = *(void *)(v56 + 80);
                *(_OWORD *)&v143[56] = v65;
                *(_OWORD *)&v143[72] = v66;
                *(_OWORD *)&v143[40] = v64;
                unsigned int v145 = v57;
                sub_FBB9E0(v132, (uint64_t *)v138, (uint64_t)v143);
              }
              v56 += 88;
            }
            while (v56 != v55);
          }
        }
      }
      if (!*((_DWORD *)a1 + 1292))
      {
        unsigned int v40 = 0;
        BOOL v41 = 1;
        break;
      }
    }
  }
  else
  {
    unsigned int v40 = 0;
    BOOL v41 = 1;
  }
  uint64_t v67 = a7;
  unint64_t v68 = operator new(0x30uLL);
  v68[1] = 0;
  v68[2] = 0;
  *unint64_t v68 = off_243F2F0;
  v68[3] = 0;
  unint64_t v69 = (char **)(v68 + 3);
  v68[4] = 0;
  v68[5] = 0;
  *a7 = (uint64_t)(v68 + 3);
  a7[1] = (uint64_t)v68;
  if (v41)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v143);
      unint64_t v70 = sub_188FC78(v143, (uint64_t)"failed to unpack ", 17);
      uint64_t v71 = sub_3D1870(v70, v152);
      uint64_t v72 = sub_188FC78(v71, (uint64_t)" to ", 4);
      long long v73 = sub_3D1870(v72, v151);
      sub_188FC78(v73, (uint64_t)": target not found?", 19);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v138, 3u);
      if ((char)v139 < 0) {
        operator delete(v138[0]);
      }
      if (SHIBYTE(v144) < 0) {
        operator delete(*(void **)&v143[72]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      long long v74 = (char *)v140;
      if (!v140) {
        goto LABEL_125;
      }
LABEL_124:
      unint64_t v141 = v74;
      operator delete(v74);
      goto LABEL_125;
    }
LABEL_123:
    long long v74 = (char *)v140;
    if (!v140) {
      goto LABEL_125;
    }
    goto LABEL_124;
  }
  if (v40)
  {
    long long v75 = (char *)operator new(88 * v40);
    v68[3] = v75;
    v68[4] = v75;
    v68[5] = &v75[88 * v40];
    unint64_t v137 = v151;
    if (v151 != v152) {
      goto LABEL_98;
    }
    goto LABEL_90;
  }
  long long v75 = 0;
  unint64_t v137 = v151;
  if (v151 == v152)
  {
LABEL_90:
    long long v76 = (char *)v68[4];
    if (v75 != v76)
    {
LABEL_118:
      unint64_t v102 = (unint64_t)(v76 - 88);
      if (v102 > (unint64_t)v75)
      {
        unint64_t v103 = v75 + 88;
        do
        {
          long long v104 = *(_OWORD *)(v103 - 72);
          *(_OWORD *)uint64_t v143 = *(_OWORD *)(v103 - 88);
          *(_OWORD *)&v143[16] = v104;
          long long v105 = *(_OWORD *)(v103 - 56);
          long long v106 = *(_OWORD *)(v103 - 40);
          long long v107 = *(_OWORD *)(v103 - 24);
          *(void *)&v143[80] = *((void *)v103 - 1);
          *(_OWORD *)&v143[48] = v106;
          *(_OWORD *)&v143[64] = v107;
          *(_OWORD *)&v143[32] = v105;
          long long v109 = *(_OWORD *)(v102 + 48);
          long long v108 = *(_OWORD *)(v102 + 64);
          uint64_t v110 = *(void *)(v102 + 80);
          *(_OWORD *)(v103 - 56) = *(_OWORD *)(v102 + 32);
          *((void *)v103 - 1) = v110;
          *(_OWORD *)(v103 - 24) = v108;
          *(_OWORD *)(v103 - 40) = v109;
          long long v111 = *(_OWORD *)v102;
          *(_OWORD *)(v103 - 72) = *(_OWORD *)(v102 + 16);
          *(_OWORD *)(v103 - 88) = v111;
          *(void *)(v102 + 80) = *(void *)&v143[80];
          *(_OWORD *)(v102 + 64) = *(_OWORD *)&v143[64];
          *(_OWORD *)(v102 + 48) = *(_OWORD *)&v143[48];
          *(_OWORD *)(v102 + 32) = *(_OWORD *)&v143[32];
          *(_OWORD *)unint64_t v102 = *(_OWORD *)v143;
          *(_OWORD *)(v102 + 16) = *(_OWORD *)&v143[16];
          v102 -= 88;
          BOOL v112 = (unint64_t)v103 >= v102;
          v103 += 88;
        }
        while (!v112);
      }
    }
LABEL_122:
    sub_FBBBAC(v69);
    sub_FBBCFC(a1[534], v150, v67, *(void *)(*v67 + 16) - *(void *)*v67 + 40);
    goto LABEL_123;
  }
LABEL_98:
  while (1)
  {
    sub_EE03E4(v132, (uint64_t *)&v137, v143);
    if (!*(void *)v143) {
      break;
    }
    sub_EE03E4(v132, (uint64_t *)&v137, v143);
    uint64_t v81 = (uint64_t)&a1[633][14 * *(unsigned int *)(*(void *)&v143[24] + 8) + 2];
    uint64_t v67 = a7;
    unint64_t v82 = (void **)*a7;
    __int16 v84 = *(char **)(*a7 + 8);
    unint64_t v83 = *(void *)(*a7 + 16);
    if ((unint64_t)v84 < v83)
    {
      long long v77 = *(_OWORD *)&a1[633][14 * *(unsigned int *)(*(void *)&v143[24] + 8) + 4];
      *(_OWORD *)__int16 v84 = *(_OWORD *)v81;
      *((_OWORD *)v84 + 1) = v77;
      long long v78 = *(_OWORD *)(v81 + 32);
      long long v79 = *(_OWORD *)(v81 + 48);
      long long v80 = *(_OWORD *)(v81 + 64);
      *((void *)v84 + 10) = *(void *)(v81 + 80);
      *((_OWORD *)v84 + 3) = v79;
      *((_OWORD *)v84 + 4) = v80;
      *((_OWORD *)v84 + 2) = v78;
      v82[1] = v84 + 88;
      if (v128) {
        goto LABEL_97;
      }
LABEL_116:
      unint64_t v137 = (((*(void *)(v81 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v81 + 32) << 32) | (2
                                                                                             * ((*(void *)(v81 + 32) & 0xFF000000000000) == 0)))
            + 4 * (unsigned __int16)*(_DWORD *)(v81 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v81 + 84) & 1;
      if (v137 == v152)
      {
LABEL_117:
        unint64_t v69 = (char **)*v67;
        long long v75 = *(char **)*v67;
        long long v76 = *(char **)(*v67 + 8);
        if (v75 == v76) {
          goto LABEL_122;
        }
        goto LABEL_118;
      }
    }
    else
    {
      int v85 = (char *)*v82;
      uint64_t v86 = 0x2E8BA2E8BA2E8BA3 * ((v84 - (unsigned char *)*v82) >> 3);
      unint64_t v87 = v86 + 1;
      if ((unint64_t)(v86 + 1) > 0x2E8BA2E8BA2E8BALL) {
        sub_2E00();
      }
      unint64_t v88 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v83 - (void)v85) >> 3);
      if (2 * v88 > v87) {
        unint64_t v87 = 2 * v88;
      }
      if (v88 >= 0x1745D1745D1745DLL) {
        unint64_t v89 = 0x2E8BA2E8BA2E8BALL;
      }
      else {
        unint64_t v89 = v87;
      }
      if (v89)
      {
        if (v89 > 0x2E8BA2E8BA2E8BALL) {
          sub_188D718();
        }
        int v90 = (char *)operator new(88 * v89);
      }
      else
      {
        int v90 = 0;
      }
      int v91 = &v90[88 * v86];
      long long v92 = *(_OWORD *)(v81 + 16);
      *(_OWORD *)int v91 = *(_OWORD *)v81;
      *((_OWORD *)v91 + 1) = v92;
      long long v93 = *(_OWORD *)(v81 + 32);
      long long v94 = *(_OWORD *)(v81 + 48);
      long long v95 = *(_OWORD *)(v81 + 64);
      *((void *)v91 + 10) = *(void *)(v81 + 80);
      *((_OWORD *)v91 + 3) = v94;
      *((_OWORD *)v91 + 4) = v95;
      *((_OWORD *)v91 + 2) = v93;
      unsigned int v96 = v91;
      if (v84 != v85)
      {
        do
        {
          long long v97 = *(_OWORD *)(v84 - 88);
          *(_OWORD *)(v96 - 72) = *(_OWORD *)(v84 - 72);
          *(_OWORD *)(v96 - 88) = v97;
          long long v98 = *(_OWORD *)(v84 - 56);
          long long v99 = *(_OWORD *)(v84 - 40);
          long long v100 = *(_OWORD *)(v84 - 24);
          *((void *)v96 - 1) = *((void *)v84 - 1);
          *(_OWORD *)(v96 - 24) = v100;
          *(_OWORD *)(v96 - 40) = v99;
          *(_OWORD *)(v96 - 56) = v98;
          v96 -= 88;
          v84 -= 88;
        }
        while (v84 != v85);
        __int16 v84 = (char *)*v82;
      }
      int v101 = v91 + 88;
      *unint64_t v82 = v96;
      v82[1] = v91 + 88;
      v82[2] = &v90[88 * v89];
      if (v84) {
        operator delete(v84);
      }
      uint64_t v67 = a7;
      v82[1] = v101;
      if (!v128) {
        goto LABEL_116;
      }
LABEL_97:
      unint64_t v137 = *(void *)v81;
      if (v137 == v152) {
        goto LABEL_117;
      }
    }
  }
  uint64_t v114 = sub_3750CC(*a1);
  if (sub_723EC(3u))
  {
    sub_6BAC((uint64_t)v143);
    char v115 = sub_188FC78(v143, (uint64_t)"Failed to unpack ", 17);
    sub_3D1524(&v152, v114);
    if ((v139 & 0x80u) == 0) {
      uint64_t v116 = v138;
    }
    else {
      uint64_t v116 = (void **)v138[0];
    }
    if ((v139 & 0x80u) == 0) {
      uint64_t v117 = v139;
    }
    else {
      uint64_t v117 = (uint64_t)v138[1];
    }
    int v118 = sub_188FC78(v115, (uint64_t)v116, v117);
    int v119 = sub_188FC78(v118, (uint64_t)" to ", 4);
    sub_3D1524(&v151, v114);
    if ((v136 & 0x80u) == 0) {
      char v120 = v135;
    }
    else {
      char v120 = (void **)v135[0];
    }
    if ((v136 & 0x80u) == 0) {
      uint64_t v121 = v136;
    }
    else {
      uint64_t v121 = (uint64_t)v135[1];
    }
    int v122 = sub_188FC78(v119, (uint64_t)v120, v121);
    char v123 = sub_188FC78(v122, (uint64_t)": ", 2);
    sub_3D1524(&v137, v114);
    if ((v134 & 0x80u) == 0) {
      int v124 = v133;
    }
    else {
      int v124 = (void **)v133[0];
    }
    if ((v134 & 0x80u) == 0) {
      uint64_t v125 = v134;
    }
    else {
      uint64_t v125 = (uint64_t)v133[1];
    }
    unint64_t v126 = sub_188FC78(v123, (uint64_t)v124, v125);
    sub_188FC78(v126, (uint64_t)" has not been scanned?", 22);
    if ((char)v134 < 0)
    {
      operator delete(v133[0]);
      if ((char)v136 < 0) {
        goto LABEL_161;
      }
LABEL_152:
      if ((char)v139 < 0) {
LABEL_162:
      }
        operator delete(v138[0]);
    }
    else
    {
      if (((char)v136 & 0x80000000) == 0) {
        goto LABEL_152;
      }
LABEL_161:
      operator delete(v135[0]);
      if ((char)v139 < 0) {
        goto LABEL_162;
      }
    }
    std::stringbuf::str();
    sub_7246C((uint64_t *)v138, 3u);
    if ((char)v139 < 0) {
      operator delete(v138[0]);
    }
    if (SHIBYTE(v144) < 0) {
      operator delete(*(void **)&v143[72]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  *(void *)(*v67 + 8) = *(void *)*v67;
  long long v74 = (char *)v140;
  if (v140) {
    goto LABEL_124;
  }
LABEL_125:
  if (*(void *)v154)
  {
    *(void *)&v154[8] = *(void *)v154;
    operator delete(*(void **)v154);
  }
LABEL_127:
  unsigned __int16 v113 = v147;
  if (v147)
  {
    if (!atomic_fetch_add(&v147->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
}

void sub_FBA688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a43);
  sub_14A84(a12);
  if (a37)
  {
    operator delete(a37);
    uint64_t v45 = *(void **)(v43 - 144);
    if (!v45)
    {
LABEL_5:
      sub_14A84(v43 - 232);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v45 = *(void **)(v43 - 144);
    if (!v45) {
      goto LABEL_5;
    }
  }
  *(void *)(v43 - 136) = v45;
  operator delete(v45);
  sub_14A84(v43 - 232);
  _Unwind_Resume(a1);
}

void *sub_FBA898(void *a1, unint64_t *a2)
{
  unint64_t v4 = sub_3D1870(a1, *a2);
  uint64_t v5 = sub_188FC78(v4, (uint64_t)"(", 1);
  std::ostream::operator<<();
  uint64_t v6 = sub_188FC78(v5, (uint64_t)")-->", 4);
  int v7 = sub_3D1870(v6, a2[1]);
  uint64_t v8 = sub_188FC78(v7, (uint64_t)"(", 1);
  std::ostream::operator<<();
  uint64_t v9 = sub_188FC78(v8, (uint64_t)") cell:", 7);
  uint64_t v10 = sub_51960(v9, a2[2]);
  sub_188FC78(v10, (uint64_t)".", 1);
  std::ostream::operator<<();
  uint64_t v11 = sub_188FC78(v9, (uint64_t)", cost = ", 9);
  std::ostream::operator<<();
  sub_188FC78(v11, (uint64_t)",", 1);
  std::ostream::operator<<();
  return a1;
}

void sub_FBA9A0(uint64_t *a1, void (__cdecl **a2)(std::ostringstream *__hidden this))
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  long long v64 = a2;
  sub_FC30DC(v3, (uint64_t)&v64, (uint64_t)&v70);
  if (v70 == v71 && sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v64);
    sub_188FC78(&v64, (uint64_t)"No shortcut entries found.", 26);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    if (v63 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v67) < 0) {
      operator delete((void *)v66);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  uint64_t v6 = v70;
  int v7 = v71;
  if (v70 != v71)
  {
    while (1)
    {
      if (!v6[5] && sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v64);
        uint64_t v9 = sub_188FC78(&v64, (uint64_t)"Invalid cost ptr stored for key ", 32);
        sub_FC3480(v9, v6);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 3u);
        if (v63 < 0) {
          operator delete(__p[0]);
        }
        long long v64 = v61;
        *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v64 + (void)*(v61 - 3)) = v8;
        if (SBYTE7(v67) < 0) {
          operator delete((void *)v66);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      uint64_t v10 = *a2;
      uint64_t v11 = a2[2];
      unint64_t v12 = sub_F96DE8(*(void *)(v4 + 8), v11, 1);
      if (v12)
      {
        unint64_t v13 = &v12[-*(int *)v12];
        if (*(unsigned __int16 *)v13 >= 5u)
        {
          if (*((_WORD *)v13 + 2))
          {
            uint64_t v14 = &v12[*((unsigned __int16 *)v13 + 2) + *(unsigned int *)&v12[*((unsigned __int16 *)v13 + 2)]];
            if (*(_DWORD *)v14 > HIDWORD(v11))
            {
              unint64_t v15 = &v14[4 * ((unint64_t)v11 >> 32)
                       + 4
                       + *(unsigned int *)&v14[4 * ((unint64_t)v11 >> 32) + 4]];
              uint64_t v16 = &v15[-*(int *)v15];
              if (*(unsigned __int16 *)v16 >= 9u)
              {
                uint64_t v17 = *((unsigned __int16 *)v16 + 4);
                if (v17)
                {
                  unint64_t v18 = &v15[v17 + *(unsigned int *)&v15[v17]];
                  unsigned int v21 = *(_DWORD *)v18;
                  uint64_t v19 = (void (__cdecl **)(std::ostringstream *__hidden))(v18 + 4);
                  unint64_t v20 = v21;
                  if (v21)
                  {
                    uint64_t v22 = v19;
                    unint64_t v23 = v20;
                    do
                    {
                      long long v24 = (unint64_t *)((char *)v22 + ((4 * v23) & 0x7FFFFFFF8));
                      unint64_t v26 = *v24;
                      unsigned int v25 = (void (__cdecl **)(std::ostringstream *__hidden))(v24 + 1);
                      unint64_t v27 = v23 >> 1;
                      v23 += ~(v23 >> 1);
                      if (v26 >= (unint64_t)v10) {
                        unint64_t v23 = v27;
                      }
                      else {
                        uint64_t v22 = v25;
                      }
                    }
                    while (v23);
                    if (v22 == &v19[v20]) {
                      goto LABEL_37;
                    }
                  }
                  else
                  {
                    uint64_t v22 = v19;
                    if (v19 == &v19[v20]) {
                      goto LABEL_37;
                    }
                  }
                  if (*v22 == v10)
                  {
                    int v28 = v22 - v19;
                    if ((~(v22 - v19) & 0x7FFF8) != 0)
                    {
                      uint64_t v30 = a2[2];
                      uint64_t v31 = sub_F96DE8(*(void *)(v4 + 4200), v30, 1);
                      unsigned int v58 = v28;
                      if (v31
                        && (unsigned int v32 = &v31[-*(int *)v31], *(unsigned __int16 *)v32 >= 5u)
                        && *((_WORD *)v32 + 2)
                        && (uint64_t v33 = &v31[*((unsigned __int16 *)v32 + 2)
                                     + *(unsigned int *)&v31[*((unsigned __int16 *)v32 + 2)]],
                            *(_DWORD *)v33 > HIDWORD(v30))
                        && (uint64_t v34 = &v33[4 * ((unint64_t)v30 >> 32)
                                     + 4
                                     + *(unsigned int *)&v33[4 * ((unint64_t)v30 >> 32) + 4]],
                            unint64_t v35 = &v34[-*(int *)v34],
                            *(unsigned __int16 *)v35 >= 0xBu)
                        && (uint64_t v36 = *((unsigned __int16 *)v35 + 5)) != 0)
                      {
                        int v37 = *(_DWORD *)&v34[v36 + *(unsigned int *)&v34[v36]];
                      }
                      else
                      {
                        int v37 = 0;
                      }
                      uint64_t v38 = a2[2];
                      unint64_t v39 = sub_F96DE8(*(void *)(v4 + 8), v38, 1);
                      if (!v39) {
                        goto LABEL_12;
                      }
                      unsigned int v40 = &v39[-*(int *)v39];
                      if (*(unsigned __int16 *)v40 < 5u) {
                        goto LABEL_12;
                      }
                      if (!*((_WORD *)v40 + 2)) {
                        goto LABEL_12;
                      }
                      BOOL v41 = &v39[*((unsigned __int16 *)v40 + 2) + *(unsigned int *)&v39[*((unsigned __int16 *)v40 + 2)]];
                      if (*(_DWORD *)v41 <= HIDWORD(v38)) {
                        goto LABEL_12;
                      }
                      uint64_t v42 = &v41[4 * ((unint64_t)v38 >> 32)
                               + 4
                               + *(unsigned int *)&v41[4 * ((unint64_t)v38 >> 32) + 4]];
                      uint64_t v43 = &v42[-*(int *)v42];
                      if (*(unsigned __int16 *)v43 < 0xBu) {
                        goto LABEL_12;
                      }
                      uint64_t v44 = *((unsigned __int16 *)v43 + 5);
                      if (!v44) {
                        goto LABEL_12;
                      }
                      uint64_t v45 = &v42[v44 + *(unsigned int *)&v42[v44]];
                      unsigned int v48 = *(_DWORD *)v45;
                      unint64_t v46 = (void (__cdecl **)(std::ostringstream *__hidden))(v45 + 4);
                      uint64_t v47 = v48;
                      if (!v48) {
                        goto LABEL_12;
                      }
                      unint64_t v49 = v37 * (unsigned __int16)(v58 >> 3);
                      uint64_t v50 = 8 * v47;
                      while (*v46 != a2[1])
                      {
                        ++v46;
                        v50 -= 8;
                        if (!v50) {
                          goto LABEL_12;
                        }
                      }
                      if (!sub_723EC(3u)) {
                        goto LABEL_12;
                      }
                      long long v64 = v60;
                      *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v64 + (void)*(v60 - 3)) = v59;
                      uint64_t v51 = (std::ios_base *)((char *)&v64 + (void)*(v64 - 3));
                      std::ios_base::init(v51, &v65);
                      v51[1].__vftable = 0;
                      v51[1].__fmtflags_ = -1;
                      std::streambuf::basic_streambuf();
                      long long v66 = 0u;
                      long long v67 = 0u;
                      int v68 = 16;
                      uint64_t v52 = sub_188FC78(&v64, (uint64_t)"Cost for ", 9);
                      long long v53 = sub_FC3480(v52, v6);
                      uint64_t v54 = sub_188FC78(v53, (uint64_t)": ", 2);
                      sub_FC363C((void *)v6[5], v49);
                      std::ostream::operator<<();
                      sub_188FC78(v54, (uint64_t)",", 1);
                      std::ostream::operator<<();
                      std::stringbuf::str();
                      sub_7246C((uint64_t *)__p, 3u);
                      if (v63 < 0) {
                        operator delete(__p[0]);
                      }
                      long long v64 = v61;
                      *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v64 + (void)*(v61 - 3)) = v8;
                      if ((SBYTE7(v67) & 0x80000000) == 0) {
                        goto LABEL_11;
                      }
LABEL_10:
                      operator delete((void *)v66);
                      goto LABEL_11;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_37:
      if (!sub_723EC(3u)) {
        goto LABEL_12;
      }
      sub_6BAC((uint64_t)&v64);
      uint64_t v29 = sub_188FC78(&v64, (uint64_t)"Invalid entry id for key ", 25);
      sub_FC3480(v29, v6);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v63 < 0) {
        operator delete(__p[0]);
      }
      long long v64 = v61;
      *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v64 + (void)*(v61 - 3)) = v8;
      if (SBYTE7(v67) < 0) {
        goto LABEL_10;
      }
LABEL_11:
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
LABEL_12:
      v6 += 7;
      if (v6 == v7)
      {
        uint64_t v6 = v70;
        break;
      }
    }
  }
  if (v6)
  {
    uint64_t v55 = v71;
    uint64_t v56 = v6;
    if (v71 != v6)
    {
      do
      {
        unsigned int v57 = (std::__shared_weak_count *)*(v55 - 1);
        if (v57)
        {
          if (!atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v55 -= 7;
      }
      while (v55 != v6);
      uint64_t v56 = v70;
    }
    uint64_t v71 = v6;
    operator delete(v56);
  }
}

void sub_FBB310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a21);
    sub_FC384C((void **)(v21 - 112));
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a21);
  sub_FC384C((void **)(v21 - 112));
  _Unwind_Resume(a1);
}

void sub_FBB470(_Unwind_Exception *a1)
{
  sub_FC384C((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void *sub_FBB484(void *a1, unint64_t *a2)
{
  uint64_t v4 = sub_3D1870(a1, *a2);
  uint64_t v5 = sub_188FC78(v4, (uint64_t)"(", 1);
  std::ostream::operator<<();
  uint64_t v6 = sub_188FC78(v5, (uint64_t)")-->", 4);
  int v7 = sub_3D1870(v6, a2[1]);
  uint64_t v8 = sub_188FC78(v7, (uint64_t)"(", 1);
  std::ostream::operator<<();
  uint64_t v9 = sub_188FC78(v8, (uint64_t)") cell:", 7);
  uint64_t v10 = sub_51960(v9, a2[2]);
  sub_188FC78(v10, (uint64_t)".", 1);
  std::ostream::operator<<();
  return a1;
}

void *sub_FBB54C(void *a1, void *a2)
{
  uint64_t v4 = sub_188FC78(a1, (uint64_t)"cell: ", 6);
  uint64_t v5 = sub_51960(v4, *a2);
  sub_188FC78(v5, (uint64_t)".", 1);
  std::ostream::operator<<();
  uint64_t v6 = sub_188FC78(v4, (uint64_t)", ", 2);
  int v7 = sub_188FC78(v6, (uint64_t)"entry_id: ", 10);
  std::ostream::operator<<();
  uint64_t v8 = sub_188FC78(v7, (uint64_t)", ", 2);
  uint64_t v9 = sub_188FC78(v8, (uint64_t)"exit_id: ", 9);
  std::ostream::operator<<();
  uint64_t v10 = sub_188FC78(v9, (uint64_t)", ", 2);
  uint64_t v11 = sub_188FC78(v10, (uint64_t)"cost_function_id: ", 18);
  std::ostream::operator<<();
  unint64_t v12 = sub_188FC78(v11, (uint64_t)", ", 2);
  unint64_t v13 = sub_188FC78(v12, (uint64_t)"live_speeds_time_stamp: ", 24);
  uint64_t v14 = (void *)sub_266E4((uint64_t)v13);
  unint64_t v15 = sub_188FC78(v14, (uint64_t)", ", 2);
  uint64_t v16 = sub_188FC78(v15, (uint64_t)"live_blockages_time_stamp: ", 27);
  uint64_t v17 = (void *)sub_266E4((uint64_t)v16);
  unint64_t v18 = sub_188FC78(v17, (uint64_t)", ", 2);
  uint64_t v19 = sub_188FC78(v18, (uint64_t)"live_area_incidents_time_stamp: ", 32);
  unint64_t v20 = (void *)sub_266E4((uint64_t)v19);
  uint64_t v21 = sub_188FC78(v20, (uint64_t)", ", 2);
  sub_188FC78(v21, (uint64_t)"traffic_type: ", 14);
  uint64_t v22 = (void *)std::ostream::operator<<();
  unint64_t v23 = sub_188FC78(v22, (uint64_t)", ", 2);
  long long v24 = sub_188FC78(v23, (uint64_t)"free_flow_branch_id: ", 21);
  std::ostream::operator<<();
  unsigned int v25 = sub_188FC78(v24, (uint64_t)", ", 2);
  sub_188FC78(v25, (uint64_t)"traffic_branch_id: ", 19);
  std::ostream::operator<<();
  return a1;
}

unsigned int sub_FBB728(uint64_t a1, double a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 4288);
  if (!v2) {
    return 1000;
  }
  LODWORD(a2) = *(_DWORD *)(a1 + 4292);
  return vcvtad_u64_f64((double)*(unint64_t *)&a2 * 1000.0 / (double)v2);
}

void sub_FBB760(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) + 2654435769u) ^ *a2;
  unint64_t v4 = (*((unsigned __int16 *)a2 + 4) + (v3 << 6) + (v3 >> 2) + 2654435769u) ^ v3;
  unint64_t v5 = (*((unsigned __int16 *)a2 + 5) + (v4 << 6) + (v4 >> 2) + 2654435769u) ^ v4;
  unint64_t v6 = (a2[3] + (v5 << 6) + (v5 >> 2) + 2654435769u) ^ v5;
  unint64_t v7 = ((int)a2[4] + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  unint64_t v8 = ((int)a2[5] + (v7 << 6) + (v7 >> 2) + 2654435769u) ^ v7;
  unint64_t v9 = ((int)a2[6] + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v10 = (*((unsigned __int8 *)a2 + 28) + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  unint64_t v11 = (*((unsigned __int16 *)a2 + 15) + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10;
  sub_FC5678((uint64_t *)(a1[2] + 272 * (((a2[8] + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11) % *a1)), a2, a3);
}

void sub_FBB848(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  ++*(_DWORD *)(a1 + 816);
  sub_F97750(a1, a2, &v20);
  if (v20)
  {
    uint64_t v6 = v21;
    uint64_t v7 = *(void *)(a1 + 768) + 112 * *(unsigned int *)(v21 + 8);
    long long v9 = *(_OWORD *)(a3 + 64);
    long long v8 = *(_OWORD *)(a3 + 80);
    int v10 = *(_DWORD *)(a3 + 96);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(a3 + 48);
    *(_DWORD *)(v7 + 104) = v10;
    *(_OWORD *)(v7 + 88) = v8;
    *(_OWORD *)(v7 + 72) = v9;
    long long v11 = *(_OWORD *)a3;
    long long v12 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v7 + 24) = v12;
    *(_OWORD *)(v7 + 8) = v11;
    unint64_t v13 = (uint64_t *)(a1 + 824);
    unint64_t v14 = *(unsigned int *)(v6 + 8);
    uint64_t v15 = *(void *)(a1 + 848);
    if (v14 >= (*(void *)(a1 + 856) - v15) >> 2 || *(_DWORD *)(v15 + 4 * v14) == -1) {
      goto LABEL_12;
    }
LABEL_10:
    sub_F97B30(v13, v14, a3);
    return;
  }
  uint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 776) - *(void *)(a1 + 768)) >> 4);
  sub_EE1844(a1, a2, (uint64_t)&v22);
  uint64_t v17 = v23;
  uint64_t v18 = *(void *)(v22 + 8);
  if (v24) {
    *(void *)(v18 + 16 * v23) = *a2;
  }
  *(_DWORD *)(v18 + 16 * v17 + 8) = v16;
  sub_FC5980((char **)(a1 + 768), a2, (long long *)a3);
  unint64_t v13 = (uint64_t *)(a1 + 824);
  uint64_t v19 = *(void *)(a1 + 848);
  if (v16 < (unint64_t)((*(void *)(a1 + 856) - v19) >> 2)
    && *(_DWORD *)(v19 + 4 * v16) != -1)
  {
    LODWORD(v14) = v16;
    goto LABEL_10;
  }
  LODWORD(v14) = v16;
LABEL_12:
  sub_F97874((uint64_t)v13, v14, (void *)a3);
}

uint64_t sub_FBB9E0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_F97750(a1, a2, &v25);
  if (v25)
  {
    uint64_t v6 = v26;
    uint64_t v7 = *(void *)(a1 + 768) + 112 * *(unsigned int *)(v26 + 8);
    unsigned int v10 = *(_DWORD *)(v7 + 8);
    uint64_t v8 = v7 + 8;
    unsigned int v9 = v10;
    if (*(_DWORD *)a3 >= v10 && (v9 < *(_DWORD *)a3 || *(_DWORD *)(a3 + 4) >= *(_DWORD *)(v8 + 4))) {
      return 0;
    }
    ++*(_DWORD *)(a1 + 816);
    long long v13 = *(_OWORD *)a3;
    long long v14 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v8 + 32) = v14;
    *(_OWORD *)uint64_t v8 = v13;
    long long v15 = *(_OWORD *)(a3 + 48);
    long long v16 = *(_OWORD *)(a3 + 64);
    long long v17 = *(_OWORD *)(a3 + 80);
    *(_DWORD *)(v8 + 96) = *(_DWORD *)(a3 + 96);
    *(_OWORD *)(v8 + 64) = v16;
    *(_OWORD *)(v8 + 80) = v17;
    *(_OWORD *)(v8 + 48) = v15;
    uint64_t v18 = (uint64_t *)(a1 + 824);
    unint64_t v19 = *(unsigned int *)(v6 + 8);
    uint64_t v20 = *(void *)(a1 + 848);
    if (v19 < (*(void *)(a1 + 856) - v20) >> 2 && *(_DWORD *)(v20 + 4 * v19) != -1) {
      goto LABEL_16;
    }
LABEL_19:
    sub_F97874((uint64_t)v18, v19, (void *)a3);
    return 1;
  }
  ++*(_DWORD *)(a1 + 816);
  uint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 776) - *(void *)(a1 + 768)) >> 4);
  sub_EE1844(a1, a2, (uint64_t)&v27);
  uint64_t v22 = v28;
  uint64_t v23 = *(void *)(v27 + 8);
  if (v29) {
    *(void *)(v23 + 16 * v28) = *a2;
  }
  *(_DWORD *)(v23 + 16 * v22 + 8) = v21;
  sub_FC5980((char **)(a1 + 768), a2, (long long *)a3);
  uint64_t v18 = (uint64_t *)(a1 + 824);
  uint64_t v24 = *(void *)(a1 + 848);
  if (v21 >= (unint64_t)((*(void *)(a1 + 856) - v24) >> 2)
    || *(_DWORD *)(v24 + 4 * v21) == -1)
  {
    LODWORD(v19) = v21;
    goto LABEL_19;
  }
  LODWORD(v19) = v21;
LABEL_16:
  sub_F97B30(v18, v19, a3);
  return 1;
}

void sub_FBBBAC(char **a1)
{
  uint64_t v1 = *a1;
  int64x2_t v2 = *(int64x2_t *)(a1 + 1);
  int64x2_t v3 = vsubq_s64(v2, vdupq_n_s64((unint64_t)*a1));
  int64x2_t v4 = vshrq_n_s64(v3, 3uLL);
  unint64_t v5 = 0x2E8BA2E8BA2E8BA3 * v4.i64[0];
  if (0x2E8BA2E8BA2E8BA3 * v4.i64[1] <= v5) {
    return;
  }
  uint64_t v7 = a1[1];
  if ((char *)v2.i64[0] == v1)
  {
    *a1 = (char *)(88 * v5);
    a1[1] = (char *)(88 * v5);
    a1[2] = (char *)(88 * v5);
    if (!v1) {
      return;
    }
    goto LABEL_9;
  }
  if (v5 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_188D718();
  }
  uint64_t v8 = (char *)operator new(v3.u64[0]) + 88 * v5;
  unsigned int v9 = v8;
  do
  {
    long long v10 = *(_OWORD *)(v7 - 88);
    *(_OWORD *)(v9 - 72) = *(_OWORD *)(v7 - 72);
    *(_OWORD *)(v9 - 88) = v10;
    long long v11 = *(_OWORD *)(v7 - 56);
    long long v12 = *(_OWORD *)(v7 - 40);
    long long v13 = *(_OWORD *)(v7 - 24);
    *((void *)v9 - 1) = *((void *)v7 - 1);
    *(_OWORD *)(v9 - 24) = v13;
    *(_OWORD *)(v9 - 40) = v12;
    *(_OWORD *)(v9 - 56) = v11;
    v9 -= 88;
    v7 -= 88;
  }
  while (v7 != v1);
  uint64_t v1 = *a1;
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v8;
  if (v1)
  {
LABEL_9:
    operator delete(v1);
  }
}

uint64_t sub_FBBCFC(void *a1, unsigned int *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v4 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) + 2654435769u) ^ *a2;
  unint64_t v5 = (*((unsigned __int16 *)a2 + 4) + (v4 << 6) + (v4 >> 2) + 2654435769u) ^ v4;
  unint64_t v6 = (*((unsigned __int16 *)a2 + 5) + (v5 << 6) + (v5 >> 2) + 2654435769u) ^ v5;
  unint64_t v7 = (a2[3] + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  unint64_t v8 = ((int)a2[4] + (v7 << 6) + (v7 >> 2) + 2654435769u) ^ v7;
  unint64_t v9 = ((int)a2[5] + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v10 = ((int)a2[6] + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  unint64_t v11 = (*((unsigned __int8 *)a2 + 28) + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10;
  unint64_t v12 = (*((unsigned __int16 *)a2 + 15) + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
  return sub_FC5BD4(a1[2] + 272 * (((a2[8] + (v12 << 6) + (v12 >> 2) + 2654435769u) ^ v12) % *a1), a2, a3, a4);
}

void **sub_FBBDE4(void **a1, void *a2, void *a3)
{
  *a1 = a2;
  a1[1] = (void *)sub_3760BC(a2);
  unint64_t v6 = (_DWORD *)sub_374D14(*a1);
  int v7 = sub_29AEC4(v6);
  if (v7)
  {
    uint64_t v8 = sub_374D14(*a1);
    int v7 = sub_29AEB4(v8);
  }
  *((_DWORD *)a1 + 4) = v7;
  *((_WORD *)a1 + 10) = *(_WORD *)(sub_3769E8(*a1) + 3872);
  sub_ED82AC((uint64_t)(a1 + 3), a2);
  a1[523] = (void *)sub_3750CC(a2);
  uint64_t v9 = sub_375E94(a2);
  unint64_t v10 = a1[1];
  a1[524] = (void *)v9;
  a1[525] = v10;
  sub_F2CEBC();
  a1[1181] = a3;
  a1[1182] = (void *)sub_374E5C(a2);
  a1[1183] = (void *)sub_374ED4(a2);
  a1[1184] = (void *)sub_374EB4((uint64_t)a2);
  a1[1185] = 0;
  sub_FC64E0(a1 + 1186, 0x100u);
  return a1;
}

void sub_FBBEE8(_Unwind_Exception *a1)
{
  int64x2_t v3 = (void *)v1[520];
  if (v3)
  {
    v1[521] = v3;
    operator delete(v3);
  }
  sub_3A6318(v1 + 4);
  _Unwind_Resume(a1);
}

void sub_FBBF0C(_Unwind_Exception *a1)
{
  sub_C62E9C(v1);
  _Unwind_Resume(a1);
}

void sub_FBBF20(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 9440))
  {
    sub_3A6230((void *)(v1 + 4264));
    *(unsigned char *)(v1 + 9440) = 0;
  }
  sub_C62E9C(v2);
  _Unwind_Resume(a1);
}

void sub_FBBF58(void **a1, uint64_t a2, int *a3, signed int *a4, uint64_t a5, void *a6)
{
  a6[1] = *a6;
  long long v173 = 0u;
  long long v174 = 0u;
  long long v172 = 0u;
  sub_FC3DA0((uint64_t)&v172);
  unint64_t v12 = (_OWORD *)(*(void *)(*((void *)&v172 + 1)
                             + (((*((void *)&v174 + 1) + (void)v174) >> 4) & 0xFFFFFFFFFFFFFF8))
                 + 32 * ((*((void *)&v174 + 1) + v174) & 0x7F));
  long long v13 = *(_OWORD *)(a2 + 16);
  *unint64_t v12 = *(_OWORD *)a2;
  v12[1] = v13;
  BOOL v14 = __CFADD__(*((void *)&v174 + 1), 1);
  uint64_t v15 = ++*((void *)&v174 + 1);
  if (!v14)
  {
    uint64_t v143 = (uint64_t)(a1 + 526);
    uint64_t v142 = a3 + 2;
    uint64_t v21 = &v160;
    unsigned __int8 v146 = a4;
    uint64_t v147 = (unint64_t *)a2;
    char v148 = a3;
    while (1)
    {
      uint64_t v22 = v21;
      uint64_t v23 = 16 * (v173 - *((void *)&v172 + 1)) - 1;
      if ((void)v173 == *((void *)&v172 + 1)) {
        uint64_t v23 = 0;
      }
      uint64_t v24 = (long long *)(*(void *)(*((void *)&v172 + 1)
                                   + (((unint64_t)(v174 + v15 - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                       + 32 * ((v174 + v15 - 1) & 0x7F));
      long long v25 = v24[1];
      long long v170 = *v24;
      long long v171 = v25;
      *((void *)&v174 + 1) = v15 - 1;
      if ((unint64_t)(v23 - (v15 + v174) + 1) >= 0x100)
      {
        operator delete(*(void **)(v173 - 8));
        *(void *)&long long v173 = v173 - 8;
      }
      unsigned int v26 = DWORD1(v171);
      if (v171)
      {
        uint64_t v27 = sub_F93238((uint64_t)a1[524], v171, 1);
        if (!v27
          || (uint64_t v28 = &v27[-*(int *)v27], *(unsigned __int16 *)v28 < 9u)
          || (uint64_t v29 = *((unsigned __int16 *)v28 + 4)) == 0)
        {
          unsigned int v33 = -2;
          goto LABEL_21;
        }
        uint64_t v30 = (int *)sub_F930D4((unsigned int *)&v27[v29 + *(unsigned int *)&v27[v29]], v26);
        uint64_t v31 = (unsigned __int16 *)((char *)v30 - *v30);
        if (*v31 >= 5u)
        {
          uint64_t v32 = v31[2];
          if (v32)
          {
            unsigned int v33 = *((unsigned __int8 *)v30 + v32) - 1;
            goto LABEL_21;
          }
        }
      }
      unsigned int v33 = -1;
LABEL_21:
      if (sub_37D0C8(*a1) && v33 <= *((_DWORD *)a1[1] + 969)) {
        unsigned int v33 = 0;
      }
      uint64_t v21 = v22;
      uint64_t v34 = a4;
      uint64_t v35 = a5;
      sub_FBD298(a1, (unint64_t *)&v170, a3, v34, a5, v33, (uint64_t *)&v168);
      uint64_t v36 = v168;
      uint64_t v37 = *v168;
      uint64_t v149 = v168[1];
      uint64_t v150 = *v168;
      if (*v168 == v149)
      {
        if (sub_37D0C8(*a1))
        {
          a6[1] = *a6;
          uint64_t v21 = v22;
        }
        else
        {
          signed int v84 = *v146;
          if (a5 == 2)
          {
            int v85 = v148;
            if (v84 == 0x7FFFFFFF
              || !*((unsigned char *)v148 + 176)
              || (int v86 = *((_DWORD *)a1 + 1064), v86 == 0x7FFFFFFF)
              || ((int v87 = v148[43], v88 = v87 / -10, v89 = v87 % 10, v87 < 0) ? (v90 = -5) : (v90 = 5),
                  (int)(v88
                      + v86
                      + (((-103 * (char)(v90 + v89)) >> 15) & 1)
                      + ((-103 * (char)(v90 + v89)) >> 10)) > v84))
            {
              int v167 = 0x7FFFFFFF;
            }
            else
            {
              int v91 = v148[42];
              int v92 = v91 / 10;
              int v93 = v91 % 10;
              if (v91 < 0) {
                char v94 = -5;
              }
              else {
                char v94 = 5;
              }
              if ((int)(v92
                       + v86
                       + (((103 * (char)(v94 + v93)) >> 15) & 1)
                       + ((103 * (char)(v94 + v93)) >> 10)) >= v84)
                int v95 = *((_DWORD *)a1 + 1064);
              else {
                int v95 = 0x7FFFFFFF;
              }
              int v167 = v95;
            }
          }
          else
          {
            int v167 = 0x7FFFFFFF;
            int v85 = v148;
          }
          v166[0] = sub_374E94(*a1);
          v166[1] = (uint64_t)a1;
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)&v157);
            unsigned int v96 = sub_188FC78(&v157, (uint64_t)"Cache entries for input shortcut ", 33);
            sub_FBA898(v96, (unint64_t *)a2);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 1u);
            if (v154 < 0) {
              operator delete(__p[0]);
            }
            unint64_t v157 = v145;
            *(void **)((char *)&v157 + *(v145 - 3)) = v144;
            if (SHIBYTE(v162) < 0) {
              operator delete(v161);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          sub_FBE438(v166, (void (__cdecl **)(std::ostringstream *__hidden))a2);
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)&v157);
            long long v97 = sub_188FC78(&v157, (uint64_t)"Cache entries for failed (current) shortcut ", 44);
            sub_FBB484(v97, (unint64_t *)&v170);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 1u);
            if (v154 < 0) {
              operator delete(__p[0]);
            }
            unint64_t v157 = v145;
            *(void **)((char *)&v157 + *(v145 - 3)) = v144;
            if (SHIBYTE(v162) < 0) {
              operator delete(v161);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          sub_FBE438(v166, (void (__cdecl **)(std::ostringstream *__hidden))&v170);
          sub_FBEF54(a2, v85, v146, a5, v143, *((_WORD *)a1 + 10), *((_DWORD *)a1 + 4), a1[1182], (uint64_t)v165, (uint64_t)a1[1], a1[1184]);
          sub_FBEF54((uint64_t)&v170, v85, v146, a5, v143, *((_WORD *)a1 + 10), *((_DWORD *)a1 + 4), a1[1182], (uint64_t)v164, (uint64_t)a1[1], a1[1184]);
          sub_E1B4((uint64_t)&v157);
          long long v98 = sub_188FC78(&v159, (uint64_t)"Unpacking of shortcut ", 22);
          long long v99 = sub_FBA898(v98, v147);
          long long v100 = sub_188FC78(v99, (uint64_t)" (level ", 8);
          unint64_t v101 = v147[2];
          if (v101)
          {
            unint64_t v102 = sub_F93238((uint64_t)a1[524], v147[2], 1);
            if (v102)
            {
              unint64_t v103 = &v102[-*(int *)v102];
              if (*(unsigned __int16 *)v103 >= 9u)
              {
                uint64_t v104 = *((unsigned __int16 *)v103 + 4);
                if (v104) {
                  sub_F930D4((unsigned int *)&v102[v104 + *(unsigned int *)&v102[v104]], HIDWORD(v101));
                }
              }
            }
          }
          std::ostream::operator<<();
          long long v105 = sub_188FC78(v100, (uint64_t)", cost ", 7);
          sub_FA4CEC((uint64_t)a1[1181], (uint64_t)v147, v85, v146, a5);
          std::ostream::operator<<();
          sub_188FC78(v105, (uint64_t)",", 1);
          std::ostream::operator<<();
          long long v106 = sub_188FC78(v105, (uint64_t)", key: ", 7);
          long long v107 = sub_FBB54C(v106, v165);
          long long v108 = sub_188FC78(v107, (uint64_t)") failed on level ", 18);
          unsigned int v109 = DWORD1(v171);
          if (v171)
          {
            uint64_t v110 = sub_F93238((uint64_t)a1[524], v171, 1);
            long long v111 = v146;
            BOOL v112 = v148;
            int v113 = v35;
            if (v110)
            {
              uint64_t v114 = &v110[-*(int *)v110];
              if (*(unsigned __int16 *)v114 >= 9u)
              {
                uint64_t v115 = *((unsigned __int16 *)v114 + 4);
                if (v115) {
                  sub_F930D4((unsigned int *)&v110[v115 + *(unsigned int *)&v110[v115]], v109);
                }
              }
            }
          }
          else
          {
            int v113 = a5;
            long long v111 = v146;
            BOOL v112 = v148;
          }
          std::ostream::operator<<();
          uint64_t v116 = sub_188FC78(v108, (uint64_t)" for sub shortcut ", 18);
          uint64_t v117 = sub_FBB484(v116, (unint64_t *)&v170);
          int v118 = sub_188FC78(v117, (uint64_t)" (cost ", 7);
          sub_FA4CEC((uint64_t)a1[1181], (uint64_t)&v170, v112, v111, v113);
          std::ostream::operator<<();
          sub_188FC78(v118, (uint64_t)",", 1);
          std::ostream::operator<<();
          int v119 = sub_188FC78(v118, (uint64_t)") with cost_function: ", 22);
          char v120 = *((unsigned char *)v148 + 31);
          if (v120 >= 0) {
            uint64_t v121 = (uint64_t)v142;
          }
          else {
            uint64_t v121 = *((void *)v148 + 1);
          }
          if (v120 >= 0) {
            uint64_t v122 = *((unsigned __int8 *)v148 + 31);
          }
          else {
            uint64_t v122 = *((void *)v148 + 2);
          }
          char v123 = sub_188FC78(v119, v121, v122);
          int v124 = sub_188FC78(v123, (uint64_t)", id: ", 6);
          std::ostream::operator<<();
          uint64_t v125 = sub_188FC78(v124, (uint64_t)", time_utc:", 11);
          unint64_t v126 = (void *)sub_266E4((uint64_t)v125);
          unint64_t v127 = sub_188FC78(v126, (uint64_t)", eval_time: ", 13);
          int v128 = (void *)sub_266E4((uint64_t)v127);
          sub_188FC78(v128, (uint64_t)", uses_blockages: ", 18);
          unint64_t v129 = (void *)std::ostream::operator<<();
          sub_188FC78(v129, (uint64_t)", uses_area_incidents: ", 23);
          uint64_t v130 = (void *)std::ostream::operator<<();
          sub_188FC78(v130, (uint64_t)", traffic_type: ", 16);
          uint64_t v131 = (void *)std::ostream::operator<<();
          uint64_t v132 = sub_188FC78(v131, (uint64_t)", current_cache_key: ", 21);
          unint64_t v133 = sub_FBB54C(v132, v164);
          sub_188FC78(v133, (uint64_t)", scanned nodes: ", 17);
          unsigned __int8 v134 = (void *)std::ostream::operator<<();
          sub_188FC78(v134, (uint64_t)", cache hit: ", 13);
          std::ostream::operator<<();
          uint64_t v21 = v22;
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)__p);
            std::stringbuf::str();
            if ((v152 & 0x80u) == 0) {
              uint64_t v135 = v151;
            }
            else {
              uint64_t v135 = (void **)v151[0];
            }
            if ((v152 & 0x80u) == 0) {
              uint64_t v136 = v152;
            }
            else {
              uint64_t v136 = (uint64_t)v151[1];
            }
            sub_188FC78(__p, (uint64_t)v135, v136);
            if ((char)v152 < 0) {
              operator delete(v151[0]);
            }
            std::stringbuf::str();
            sub_7246C((uint64_t *)v151, 3u);
            if ((char)v152 < 0) {
              operator delete(v151[0]);
            }
            __p[0] = v145;
            *(void **)((char *)__p + *(v145 - 3)) = v144;
            if (v156 < 0) {
              operator delete(v155);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          a6[1] = *a6;
          unint64_t v157 = v141;
          *(void **)((char *)&v157 + *(v141 - 3)) = v140;
          uint64_t v159 = v139;
          if (v163 < 0) {
            operator delete(v162);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          std::ios::~ios();
        }
      }
      else if (v33)
      {
        uint64_t v38 = *((void *)&v174 + 1);
        uint64_t v39 = v168[1];
        do
        {
          uint64_t v43 = *((void *)&v172 + 1);
          if ((void)v173 == *((void *)&v172 + 1)) {
            uint64_t v44 = 0;
          }
          else {
            uint64_t v44 = 16 * (v173 - *((void *)&v172 + 1)) - 1;
          }
          unint64_t v45 = v38 + v174;
          if (v44 == v45)
          {
            sub_FC3DA0((uint64_t)&v172);
            uint64_t v43 = *((void *)&v172 + 1);
            unint64_t v45 = *((void *)&v174 + 1) + v174;
          }
          unsigned int v40 = (_OWORD *)(*(void *)(v43 + ((v45 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v45 & 0x7F));
          long long v41 = *(_OWORD *)(v39 - 96);
          long long v42 = *(_OWORD *)(v39 - 80);
          v39 -= 96;
          _OWORD *v40 = v41;
          v40[1] = v42;
          uint64_t v38 = ++*((void *)&v174 + 1);
        }
        while (v39 != *v36);
      }
      else
      {
        uint64_t v47 = (char *)*a6;
        unint64_t v46 = (char *)a6[1];
        uint64_t v48 = v168[1];
        uint64_t v49 = (uint64_t)&v46[-*a6];
        unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * (v49 >> 5);
        unint64_t v51 = v50 - 0x5555555555555555 * ((v48 - v37) >> 5);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a6[2] - *a6) >> 5) < v51)
        {
          if (v51 > 0x2AAAAAAAAAAAAAALL) {
            sub_2E00();
          }
          uint64_t v52 = (char *)operator new(v49 + v48 - v37);
          long long v53 = &v52[96 * v50];
          if (v46 != v47)
          {
            uint64_t v54 = &v52[96 * v50];
            do
            {
              long long v55 = *((_OWORD *)v46 - 5);
              *((_OWORD *)v54 - 6) = *((_OWORD *)v46 - 6);
              *((_OWORD *)v54 - 5) = v55;
              long long v56 = *((_OWORD *)v46 - 4);
              long long v57 = *((_OWORD *)v46 - 3);
              long long v58 = *((_OWORD *)v46 - 2);
              long long v53 = v54 - 96;
              *(_OWORD *)(v54 - 20) = *(_OWORD *)(v46 - 20);
              *((_OWORD *)v54 - 3) = v57;
              *((_OWORD *)v54 - 2) = v58;
              *((_OWORD *)v54 - 4) = v56;
              v46 -= 96;
              v54 -= 96;
            }
            while (v46 != v47);
          }
          *a6 = v53;
          a6[1] = &v52[96 * v50];
          a6[2] = &v52[96 * v51];
          if (v47) {
            operator delete(v47);
          }
        }
        unint64_t v60 = (_OWORD *)*v36;
        uint64_t v59 = (_OWORD *)v36[1];
        uint64_t v21 = v22;
        if (v60 != v59)
        {
          long long v61 = (_OWORD *)a6[1];
          do
          {
            unint64_t v67 = a6[2];
            if ((unint64_t)v61 < v67)
            {
              long long v62 = v60[1];
              *long long v61 = *v60;
              v61[1] = v62;
              long long v63 = v60[2];
              long long v64 = v60[3];
              long long v65 = v60[5];
              v61[4] = v60[4];
              v61[5] = v65;
              v61[2] = v63;
              v61[3] = v64;
              long long v66 = v61 + 6;
            }
            else
            {
              int v68 = (char *)*a6;
              unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v61 - *a6) >> 5);
              unint64_t v70 = v69 + 1;
              if (v69 + 1 > 0x2AAAAAAAAAAAAAALL) {
                sub_2E00();
              }
              unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - (void)v68) >> 5);
              if (2 * v71 > v70) {
                unint64_t v70 = 2 * v71;
              }
              if (v71 >= 0x155555555555555) {
                unint64_t v72 = 0x2AAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v72 = v70;
              }
              if (v72)
              {
                if (v72 > 0x2AAAAAAAAAAAAAALL) {
                  sub_188D718();
                }
                long long v73 = (char *)operator new(96 * v72);
              }
              else
              {
                long long v73 = 0;
              }
              long long v74 = &v73[96 * v69];
              long long v75 = v60[1];
              *(_OWORD *)long long v74 = *v60;
              *((_OWORD *)v74 + 1) = v75;
              long long v76 = v60[2];
              long long v77 = v60[3];
              long long v78 = v60[5];
              *((_OWORD *)v74 + 4) = v60[4];
              *((_OWORD *)v74 + 5) = v78;
              *((_OWORD *)v74 + 2) = v76;
              *((_OWORD *)v74 + 3) = v77;
              long long v79 = v74;
              if (v61 != (_OWORD *)v68)
              {
                do
                {
                  long long v80 = *(v61 - 5);
                  *(v79 - 6) = *(v61 - 6);
                  *(v79 - 5) = v80;
                  long long v81 = *(v61 - 4);
                  long long v82 = *(v61 - 3);
                  long long v83 = *(v61 - 2);
                  *(_OWORD *)((char *)v79 - 20) = *(_OWORD *)((char *)v61 - 20);
                  *(v79 - 3) = v82;
                  *(v79 - 2) = v83;
                  *(v79 - 4) = v81;
                  v79 -= 6;
                  v61 -= 6;
                }
                while (v61 != (_OWORD *)v68);
                long long v61 = (_OWORD *)*a6;
              }
              long long v66 = v74 + 96;
              *a6 = v79;
              a6[1] = v74 + 96;
              a6[2] = &v73[96 * v72];
              if (v61) {
                operator delete(v61);
              }
            }
            a6[1] = v66;
            v60 += 6;
            long long v61 = v66;
            uint64_t v21 = v22;
          }
          while (v60 != v59);
        }
      }
      unint64_t v137 = v169;
      if (v169 && !atomic_fetch_add(&v169->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
      a5 = v35;
      a4 = v146;
      a2 = (uint64_t)v147;
      a3 = v148;
      if (v150 != v149)
      {
        uint64_t v15 = *((void *)&v174 + 1);
        if (*((void *)&v174 + 1)) {
          continue;
        }
      }
      break;
    }
  }
  long long v16 = (void **)*((void *)&v172 + 1);
  long long v17 = (void **)v173;
  *((void *)&v174 + 1) = 0;
  unint64_t v18 = v173 - *((void *)&v172 + 1);
  if ((void)v173 - *((void *)&v172 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v16);
      long long v17 = (void **)v173;
      long long v16 = (void **)(*((void *)&v172 + 1) + 8);
      *((void *)&v172 + 1) = v16;
      unint64_t v18 = v173 - (void)v16;
    }
    while ((void)v173 - (void)v16 > 0x10uLL);
  }
  unint64_t v19 = v18 >> 3;
  if (v19 == 1)
  {
    uint64_t v20 = 64;
    goto LABEL_133;
  }
  if (v19 == 2)
  {
    uint64_t v20 = 128;
LABEL_133:
    *(void *)&long long v174 = v20;
  }
  if (v16 != v17)
  {
    do
    {
      uint64_t v138 = *v16++;
      operator delete(v138);
    }
    while (v16 != v17);
    if ((void)v173 != *((void *)&v172 + 1)) {
      *(void *)&long long v173 = v173 + ((*((void *)&v172 + 1) - v173 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if ((void)v172) {
    operator delete((void *)v172);
  }
}

void sub_FBD160(_Unwind_Exception *a1)
{
  sub_48CA88(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_FBD174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a71);
  sub_14A84(v71 - 192);
  sub_48CA88(v71 - 144);
  _Unwind_Resume(a1);
}

void sub_FBD224(_Unwind_Exception *a1)
{
  sub_48CA88(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_FBD240(_Unwind_Exception *a1)
{
  sub_48CA88(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_FBD258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1C02990((uint64_t)&a68);
  sub_14A84(v68 - 192);
  sub_48CA88(v68 - 144);
  _Unwind_Resume(a1);
}

void sub_FBD27C(_Unwind_Exception *a1)
{
  sub_14A84(v1 - 192);
  sub_48CA88(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_FBD298(void **a1@<X0>, unint64_t *a2@<X1>, int *a3@<X2>, signed int *a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  int v149 = a6;
  uint64_t v9 = (uint64_t)(a1 + 1186);
  a1[1293] = a1[1292];
  a1[1290] = a1[1289];
  *((_DWORD *)a1 + 2590) = 0;
  a1[1283] = a1[1282];
  uint64_t v10 = 0x1FFFFFFFFFFFFFA0;
  do
  {
    unint64_t v12 = &a1[v10];
    if (a1[v10 + 1284])
    {
      unint64_t v13 = (unint64_t)v12[1285];
      if (v13 >= 0x80)
      {
        unint64_t v11 = &a1[v10];
        operator delete(v12[1282]);
        v12[1282] = &unk_20E1710;
        v11[1287] = 0;
        v11[1283] = 0;
        v11[1285] = 0;
        v11[1284] = 0;
      }
      else if (v13)
      {
        v12[1284] = 0;
        memset(v12[1282], 128, v13 + 8);
        *((unsigned char *)v12[1282] + v13) = -1;
        unint64_t v14 = (unint64_t)v12[1285];
        if (v14 == 7) {
          uint64_t v15 = 6;
        }
        else {
          uint64_t v15 = v14 - (v14 >> 3);
        }
        a1[v10 + 1287] = (void *)(v15 - (void)v12[1284]);
      }
    }
    v10 += 6;
  }
  while (v10 * 8);
  a1[1286] = a1[1285];
  *((_DWORD *)a1 + 2576) = 0;
  unint64_t v16 = *a2;
  unint64_t v147 = a2[1];
  unint64_t v148 = v16;
  unint64_t v17 = a2[2];
  sub_FBEF54((uint64_t)a2, a3, a4, a5, (uint64_t)(a1 + 526), *((_WORD *)a1 + 10), *((_DWORD *)a1 + 4), a1[1182], (uint64_t)v146, (uint64_t)a1[1], a1[1184]);
  unint64_t v18 = a7;
  if (!v17) {
    goto LABEL_19;
  }
  unint64_t v19 = sub_F93238((uint64_t)a1[524], v17, 1);
  if (!v19 || (uint64_t v20 = &v19[-*(int *)v19], *(unsigned __int16 *)v20 < 9u) || (v21 = *((unsigned __int16 *)v20 + 4)) == 0)
  {
    LODWORD(v24) = -1;
    goto LABEL_20;
  }
  uint64_t v22 = (int *)sub_F930D4((unsigned int *)&v19[v21 + *(unsigned int *)&v19[v21]], HIDWORD(v17));
  uint64_t v23 = (unsigned __int16 *)((char *)v22 - *v22);
  if (*v23 >= 5u)
  {
    uint64_t v24 = v23[2];
    if (v24) {
      LODWORD(v24) = *((unsigned __int8 *)v22 + v24);
    }
  }
  else
  {
LABEL_19:
    LODWORD(v24) = 0;
  }
LABEL_20:
  int v145 = v24;
  sub_FBF204(a1[1183], v146, (uint64_t)&v142);
  ++*((_DWORD *)a1 + 2370);
  if (v144)
  {
    ++*((_DWORD *)a1 + 2371);
    if (v142 && *v142 != v142[1] || (uint64_t v25 = sub_3750CC(*a1), !sub_723EC(3u)))
    {
LABEL_43:
      uint64_t v34 = v143;
      *a7 = (uint64_t)v142;
      a7[1] = (uint64_t)v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_128;
    }
    sub_6BAC((uint64_t)v140);
    unsigned int v26 = sub_188FC78(v140, (uint64_t)"Failed to unpack ", 17);
    sub_3D1524(&v148, v25);
    if (v150[23] >= 0) {
      uint64_t v27 = v150;
    }
    else {
      uint64_t v27 = *(unsigned char **)v150;
    }
    if (v150[23] >= 0) {
      uint64_t v28 = v150[23];
    }
    else {
      uint64_t v28 = *(void *)&v150[8];
    }
    uint64_t v29 = sub_188FC78(v26, (uint64_t)v27, v28);
    uint64_t v30 = sub_188FC78(v29, (uint64_t)" to ", 4);
    sub_3D1524(&v147, v25);
    if (v139 >= 0) {
      uint64_t v31 = &v137;
    }
    else {
      uint64_t v31 = v137;
    }
    if (v139 >= 0) {
      uint64_t v32 = HIBYTE(v139);
    }
    else {
      uint64_t v32 = (uint64_t)v138;
    }
    unsigned int v33 = sub_188FC78(v30, (uint64_t)v31, v32);
    sub_188FC78(v33, (uint64_t)": cached shortcut is empty?", 27);
    if (SHIBYTE(v139) < 0)
    {
      operator delete(v137);
      if ((v150[23] & 0x80000000) == 0) {
        goto LABEL_38;
      }
    }
    else if ((v150[23] & 0x80000000) == 0)
    {
LABEL_38:
      std::stringbuf::str();
      sub_7246C((uint64_t *)v150, 3u);
      if ((v150[23] & 0x80000000) != 0) {
        operator delete(*(void **)v150);
      }
      if ((v140[95] & 0x80000000) != 0) {
        operator delete(*(void **)&v140[72]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_43;
    }
    operator delete(*(void **)v150);
    goto LABEL_38;
  }
  memset(&v150[1], 0, 32);
  *(_OWORD *)&v140[47] = *(_OWORD *)v150;
  int v151 = 0;
  memset(v140, 0, 44);
  *(_WORD *)&v140[44] = -1;
  v140[46] = 0;
  *(_OWORD *)&v140[63] = *(_OWORD *)&v150[16];
  *(void *)&v140[76] = 0;
  *(_WORD *)&v140[84] = -1;
  v140[86] = 0;
  *(void *)&v140[88] = 0x28000000000;
  v140[96] = 0;
  unsigned int v141 = 0;
  sub_FBF2EC(v9, (uint64_t *)&v148, (long long *)v140);
  int v126 = v149;
  memset(v150, 0, 24);
  unint64_t v137 = 0;
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  if (*((_DWORD *)a1 + 2590))
  {
    while (1)
    {
      uint64_t v35 = (uint64_t)&a1[1282][15 * *(unsigned int *)a1[1289]];
      unint64_t v37 = *(void *)v35;
      uint64_t v36 = *(void *)(v35 + 8);
      unsigned int v38 = *(_DWORD *)(v35 + 112);
      sub_F773C4(v9);
      BOOL v39 = v37 != v147;
      if (v37 == v147) {
        break;
      }
      if (v37 == v148
        || !sub_F963A0((uint64_t)a1[524], HIDWORD(v37) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v37) << 32), &v145))
      {
        if (v126)
        {
          sub_FA4E90((void **)a1[1181], v37, &v149, 0, a3, a4, a5, (uint64_t)&v137);
          unsigned int v40 = (char *)v137;
          long long v41 = v138;
          if (v137 != v138)
          {
            unsigned int v42 = v38 + 1;
            do
            {
              uint64_t v43 = *(void *)(v40 + 28);
              unint64_t v44 = v43 & 0xFFFFFFFF00000000;
              if (v43 != -1 && v44 != 0x7FFFFFFF00000000)
              {
                v135[0] = *((void **)v40 + 1);
                *(void *)uint64_t v140 = (v44 + v36) & 0xFFFFFFFF00000000 | (v43 + v36);
                memset(&v140[8], 0, 36);
                *(_WORD *)&v140[44] = -1;
                v140[46] = 0;
                memset(&v140[48], 0, 36);
                *(_WORD *)&v140[84] = -1;
                v140[86] = 0;
                *(_DWORD *)&v140[88] = 0;
                *(_DWORD *)&v140[92] = *(_WORD *)&v140[92] & 0x8000 | 0x280;
                v140[96] &= 0xE0u;
                unsigned int v141 = v42;
                uint64_t v46 = *((void *)v40 + 2);
                int v47 = *((_DWORD *)v40 + 6);
                *(_OWORD *)&v140[8] = *(_OWORD *)v40;
                *(void *)&v140[24] = v46;
                *(_DWORD *)&v140[32] = v47;
                sub_FBF47C(v9, (uint64_t *)v135, (uint64_t)v140);
              }
              v40 += 40;
            }
            while (v40 != v41);
          }
        }
        else if (!sub_37D0C8(*a1) {
               || (v48 = sub_3750CC(*a1), uint64_t v49 = v48, !*(unsigned char *)(v48 + 7774))
        }
               || (unint64_t v50 = sub_290DEC(v48 + 3896, HIDWORD(v37), 1)) != 0
               && (unint64_t v51 = &v50[-*(int *)v50], *(unsigned __int16 *)v51 >= 5u)
               && (uint64_t v52 = *((unsigned __int16 *)v51 + 2)) != 0
               && *(_DWORD *)&v50[v52 + *(unsigned int *)&v50[v52]] > WORD1(v37)
               && sub_295DB4(v49, HIDWORD(v37) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v37) << 32)))
        {
          sub_ED8808((uint64_t)(a1 + 3), v37, 0, v150, 0);
          uint64_t v53 = *(void *)v150;
          uint64_t v54 = *(void *)&v150[8];
          if (*(void *)v150 != *(void *)&v150[8])
          {
            unsigned int v55 = v38 + 1;
            do
            {
              unint64_t v56 = sub_F5C6E0((uint64_t)(a1 + 526), (int **)v53, 0x3B9ACA00u, (uint64_t)a3, *a4, a5);
              unint64_t v58 = v56 & 0xFFFFFFFF00000000;
              if (v56 != -1 && v58 != 0x7FFFFFFF00000000 && v57 != 0x7FFFFFFFFFFFFFFFLL)
              {
                v135[0] = (void *)((((*(void *)(v53 + 72) >> 16) & 0xFFFF0000 | (*(void *)(v53 + 72) << 32) | (2 * ((*(void *)(v53 + 72) & 0xFF000000000000) == 0)))
                                  + (((unint64_t)*(unsigned int *)(v53 + 80) >> 14) & 0x3FFFC)) & 0xFFFFFFFFFFFFFFFELL | ((unint64_t)*(unsigned __int8 *)(v53 + 88) >> 1) & 1);
                *(void *)uint64_t v140 = (v58 + v36) & 0xFFFFFFFF00000000 | (v56 + v36);
                long long v61 = *(_OWORD *)(v53 + 16);
                *(_OWORD *)&v140[8] = *(_OWORD *)v53;
                *(_OWORD *)&v140[24] = v61;
                long long v62 = *(_OWORD *)(v53 + 32);
                long long v63 = *(_OWORD *)(v53 + 48);
                long long v64 = *(_OWORD *)(v53 + 64);
                *(_OWORD *)&v140[84] = *(_OWORD *)(v53 + 76);
                *(_OWORD *)&v140[56] = v63;
                *(_OWORD *)&v140[72] = v64;
                *(_OWORD *)&v140[40] = v62;
                unsigned int v141 = v55;
                sub_FBF47C(v9, (uint64_t *)v135, (uint64_t)v140);
              }
              v53 += 96;
            }
            while (v53 != v54);
          }
        }
      }
      if (!*((_DWORD *)a1 + 2590))
      {
        unsigned int v38 = 0;
        BOOL v39 = 1;
        break;
      }
    }
    unint64_t v18 = a7;
  }
  else
  {
    unsigned int v38 = 0;
    BOOL v39 = 1;
  }
  long long v65 = operator new(0x30uLL);
  v65[1] = 0;
  v65[2] = 0;
  *long long v65 = off_243F340;
  v65[3] = 0;
  long long v66 = (char **)(v65 + 3);
  v65[4] = 0;
  v65[5] = 0;
  *unint64_t v18 = (uint64_t)(v65 + 3);
  v18[1] = (uint64_t)v65;
  if (!v39)
  {
    if (v38)
    {
      unint64_t v72 = (char *)operator new(96 * v38);
      v65[3] = v72;
      v65[4] = v72;
      v65[5] = &v72[96 * v38];
      unint64_t v134 = v147;
      if (v147 != v148) {
        goto LABEL_98;
      }
      goto LABEL_91;
    }
    unint64_t v72 = 0;
    unint64_t v134 = v147;
    if (v147 == v148)
    {
LABEL_91:
      long long v73 = (char *)v65[4];
      if (v72 != v73)
      {
LABEL_119:
        long long v100 = v73 - 96;
        if (v100 > v72)
        {
          unint64_t v101 = v72 + 96;
          do
          {
            long long v102 = *((_OWORD *)v101 - 5);
            *(_OWORD *)uint64_t v140 = *((_OWORD *)v101 - 6);
            *(_OWORD *)&v140[16] = v102;
            long long v103 = *((_OWORD *)v101 - 4);
            long long v104 = *((_OWORD *)v101 - 3);
            long long v105 = *((_OWORD *)v101 - 1);
            *(_OWORD *)&v140[64] = *((_OWORD *)v101 - 2);
            *(_OWORD *)&v140[80] = v105;
            *(_OWORD *)&v140[32] = v103;
            *(_OWORD *)&v140[48] = v104;
            long long v106 = *((_OWORD *)v100 + 5);
            long long v108 = *((_OWORD *)v100 + 2);
            long long v107 = *((_OWORD *)v100 + 3);
            *((_OWORD *)v101 - 2) = *((_OWORD *)v100 + 4);
            *((_OWORD *)v101 - 1) = v106;
            *((_OWORD *)v101 - 4) = v108;
            *((_OWORD *)v101 - 3) = v107;
            long long v109 = *((_OWORD *)v100 + 1);
            *((_OWORD *)v101 - 6) = *(_OWORD *)v100;
            *((_OWORD *)v101 - 5) = v109;
            *((_OWORD *)v100 + 5) = *(_OWORD *)&v140[80];
            *((_OWORD *)v100 + 4) = *(_OWORD *)&v140[64];
            *((_OWORD *)v100 + 3) = *(_OWORD *)&v140[48];
            *((_OWORD *)v100 + 2) = *(_OWORD *)&v140[32];
            *(_OWORD *)long long v100 = *(_OWORD *)v140;
            *((_OWORD *)v100 + 1) = *(_OWORD *)&v140[16];
            v100 -= 96;
            BOOL v110 = v101 >= v100;
            v101 += 96;
          }
          while (!v110);
        }
      }
LABEL_123:
      sub_FBF640(v66);
      sub_FBF76C(a1[1183], v146, v18, *(void *)(*v18 + 16) - *(void *)*v18 + 40);
LABEL_124:
      uint64_t v71 = (char *)v137;
      if (!v137) {
        goto LABEL_126;
      }
      goto LABEL_125;
    }
LABEL_98:
    while (1)
    {
      sub_EE03E4(v9, (uint64_t *)&v134, v140);
      if (!*(void *)v140) {
        break;
      }
      sub_EE03E4(v9, (uint64_t *)&v134, v140);
      uint64_t v74 = (uint64_t)&a1[1282][15 * *(unsigned int *)(*(void *)&v140[24] + 8) + 2];
      unint64_t v18 = a7;
      long long v75 = (void *)*a7;
      long long v77 = *(_OWORD **)(*a7 + 8);
      unint64_t v76 = *(void *)(*a7 + 16);
      if ((unint64_t)v77 >= v76)
      {
        long long v83 = (_OWORD *)*v75;
        unint64_t v84 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v77 - *v75) >> 5);
        unint64_t v85 = v84 + 1;
        if (v84 + 1 > 0x2AAAAAAAAAAAAAALL) {
          sub_2E00();
        }
        unint64_t v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - (void)v83) >> 5);
        if (2 * v86 > v85) {
          unint64_t v85 = 2 * v86;
        }
        if (v86 >= 0x155555555555555) {
          unint64_t v87 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v87 = v85;
        }
        if (v87)
        {
          if (v87 > 0x2AAAAAAAAAAAAAALL) {
            sub_188D718();
          }
          int v88 = (char *)operator new(96 * v87);
        }
        else
        {
          int v88 = 0;
        }
        int v89 = &v88[96 * v84];
        long long v90 = *(_OWORD *)(v74 + 16);
        *(_OWORD *)int v89 = *(_OWORD *)v74;
        *((_OWORD *)v89 + 1) = v90;
        long long v91 = *(_OWORD *)(v74 + 32);
        long long v92 = *(_OWORD *)(v74 + 48);
        long long v93 = *(_OWORD *)(v74 + 80);
        *((_OWORD *)v89 + 4) = *(_OWORD *)(v74 + 64);
        *((_OWORD *)v89 + 5) = v93;
        *((_OWORD *)v89 + 2) = v91;
        *((_OWORD *)v89 + 3) = v92;
        char v94 = v89;
        if (v77 != v83)
        {
          do
          {
            long long v95 = *(v77 - 5);
            *((_OWORD *)v94 - 6) = *(v77 - 6);
            *((_OWORD *)v94 - 5) = v95;
            long long v96 = *(v77 - 4);
            long long v97 = *(v77 - 3);
            long long v98 = *(v77 - 1);
            *((_OWORD *)v94 - 2) = *(v77 - 2);
            *((_OWORD *)v94 - 1) = v98;
            *((_OWORD *)v94 - 4) = v96;
            *((_OWORD *)v94 - 3) = v97;
            v94 -= 96;
            v77 -= 6;
          }
          while (v77 != v83);
          long long v77 = (_OWORD *)*v75;
        }
        long long v99 = &v88[96 * v87];
        long long v82 = v89 + 96;
        *long long v75 = v94;
        v75[1] = v89 + 96;
        v75[2] = v99;
        unint64_t v18 = a7;
        if (v77) {
          operator delete(v77);
        }
      }
      else
      {
        long long v78 = *(_OWORD *)&a1[1282][15 * *(unsigned int *)(*(void *)&v140[24] + 8) + 4];
        *long long v77 = *(_OWORD *)v74;
        v77[1] = v78;
        long long v79 = *(_OWORD *)(v74 + 32);
        long long v80 = *(_OWORD *)(v74 + 48);
        long long v81 = *(_OWORD *)(v74 + 80);
        v77[4] = *(_OWORD *)(v74 + 64);
        v77[5] = v81;
        v77[2] = v79;
        v77[3] = v80;
        long long v82 = v77 + 6;
      }
      v75[1] = v82;
      if (v126)
      {
        unint64_t v134 = *(void *)v74;
        if (v134 == v148)
        {
LABEL_118:
          long long v66 = (char **)*v18;
          unint64_t v72 = *(char **)*v18;
          long long v73 = *(char **)(*v18 + 8);
          if (v72 == v73) {
            goto LABEL_123;
          }
          goto LABEL_119;
        }
      }
      else
      {
        unint64_t v134 = (((*(void *)(v74 + 32) >> 16) & 0xFFFF0000 | (*(void *)(v74 + 32) << 32) | (2
                                                                                               * ((*(void *)(v74 + 32) & 0xFF000000000000) == 0)))
              + 4 * (unsigned __int16)*(_DWORD *)(v74 + 80)) & 0xFFFFFFFFFFFFFFFELL | *(unsigned char *)(v74 + 88) & 1;
        if (v134 == v148) {
          goto LABEL_118;
        }
      }
    }
    uint64_t v112 = sub_3750CC(*a1);
    if (!sub_723EC(3u))
    {
LABEL_159:
      *(void *)(*v18 + 8) = *(void *)*v18;
      uint64_t v71 = (char *)v137;
      if (v137) {
        goto LABEL_125;
      }
      goto LABEL_126;
    }
    sub_6BAC((uint64_t)v140);
    int v113 = sub_188FC78(v140, (uint64_t)"Failed to unpack ", 17);
    sub_3D1524(&v148, v112);
    if ((v136 & 0x80u) == 0) {
      uint64_t v114 = v135;
    }
    else {
      uint64_t v114 = (void **)v135[0];
    }
    if ((v136 & 0x80u) == 0) {
      uint64_t v115 = v136;
    }
    else {
      uint64_t v115 = (uint64_t)v135[1];
    }
    uint64_t v116 = sub_188FC78(v113, (uint64_t)v114, v115);
    uint64_t v117 = sub_188FC78(v116, (uint64_t)" to ", 4);
    sub_3D1524(&v147, v112);
    if ((v133 & 0x80u) == 0) {
      int v118 = v132;
    }
    else {
      int v118 = (void **)v132[0];
    }
    if ((v133 & 0x80u) == 0) {
      uint64_t v119 = v133;
    }
    else {
      uint64_t v119 = (uint64_t)v132[1];
    }
    char v120 = sub_188FC78(v117, (uint64_t)v118, v119);
    uint64_t v121 = sub_188FC78(v120, (uint64_t)": ", 2);
    sub_3D1524(&v134, v112);
    if ((v131 & 0x80u) == 0) {
      uint64_t v122 = v130;
    }
    else {
      uint64_t v122 = (void **)v130[0];
    }
    if ((v131 & 0x80u) == 0) {
      uint64_t v123 = v131;
    }
    else {
      uint64_t v123 = (uint64_t)v130[1];
    }
    int v124 = sub_188FC78(v121, (uint64_t)v122, v123);
    sub_188FC78(v124, (uint64_t)" has not been scanned?", 22);
    if ((char)v131 < 0)
    {
      operator delete(v130[0]);
      if (((char)v133 & 0x80000000) == 0)
      {
LABEL_153:
        if (((char)v136 & 0x80000000) == 0)
        {
LABEL_154:
          std::stringbuf::str();
          sub_7246C((uint64_t *)v135, 3u);
          if ((char)v136 < 0) {
            operator delete(v135[0]);
          }
          if ((v140[95] & 0x80000000) != 0) {
            operator delete(*(void **)&v140[72]);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
          goto LABEL_159;
        }
LABEL_163:
        operator delete(v135[0]);
        goto LABEL_154;
      }
    }
    else if (((char)v133 & 0x80000000) == 0)
    {
      goto LABEL_153;
    }
    operator delete(v132[0]);
    if (((char)v136 & 0x80000000) == 0) {
      goto LABEL_154;
    }
    goto LABEL_163;
  }
  if (!sub_723EC(3u)) {
    goto LABEL_124;
  }
  sub_6BAC((uint64_t)v140);
  unint64_t v67 = sub_188FC78(v140, (uint64_t)"failed to unpack ", 17);
  uint64_t v68 = sub_3D1870(v67, v148);
  unint64_t v69 = sub_188FC78(v68, (uint64_t)" to ", 4);
  unint64_t v70 = sub_3D1870(v69, v147);
  sub_188FC78(v70, (uint64_t)": target not found?", 19);
  std::stringbuf::str();
  sub_7246C((uint64_t *)v135, 3u);
  if ((char)v136 < 0) {
    operator delete(v135[0]);
  }
  if ((v140[95] & 0x80000000) != 0) {
    operator delete(*(void **)&v140[72]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  uint64_t v71 = (char *)v137;
  if (!v137) {
    goto LABEL_126;
  }
LABEL_125:
  uint64_t v138 = v71;
  operator delete(v71);
LABEL_126:
  if (*(void *)v150)
  {
    *(void *)&v150[8] = *(void *)v150;
    operator delete(*(void **)v150);
  }
LABEL_128:
  long long v111 = v143;
  if (v143)
  {
    if (!atomic_fetch_add(&v143->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
      std::__shared_weak_count::__release_weak(v111);
    }
  }
}

void sub_FBE228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a45);
  sub_14A84(a14);
  if (a39)
  {
    operator delete(a39);
    int v47 = *(void **)(v45 - 144);
    if (!v47)
    {
LABEL_5:
      sub_14A84(v45 - 232);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    int v47 = *(void **)(v45 - 144);
    if (!v47) {
      goto LABEL_5;
    }
  }
  *(void *)(v45 - 136) = v47;
  operator delete(v47);
  sub_14A84(v45 - 232);
  _Unwind_Resume(a1);
}

void sub_FBE438(uint64_t *a1, void (__cdecl **a2)(std::ostringstream *__hidden this))
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  long long v64 = a2;
  sub_FC4370(v3, (uint64_t)&v64, (uint64_t)&v70);
  if (v70 == v71 && sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v64);
    sub_188FC78(&v64, (uint64_t)"No shortcut entries found.", 26);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    if (v63 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v67) < 0) {
      operator delete((void *)v66);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v6 = v70;
  int v7 = v71;
  if (v70 != v71)
  {
    while (1)
    {
      if (!v6[5] && sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v64);
        uint64_t v9 = sub_188FC78(&v64, (uint64_t)"Invalid cost ptr stored for key ", 32);
        sub_FC3480(v9, v6);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 3u);
        if (v63 < 0) {
          operator delete(__p[0]);
        }
        long long v64 = v61;
        *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v64 + (void)*(v61 - 3)) = v8;
        if (SBYTE7(v67) < 0) {
          operator delete((void *)v66);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      uint64_t v10 = *a2;
      unint64_t v11 = a2[2];
      unint64_t v12 = sub_F9CC14(*(void *)(v4 + 8), v11, 1);
      if (v12)
      {
        unint64_t v13 = &v12[-*(int *)v12];
        if (*(unsigned __int16 *)v13 >= 5u)
        {
          if (*((_WORD *)v13 + 2))
          {
            unint64_t v14 = &v12[*((unsigned __int16 *)v13 + 2) + *(unsigned int *)&v12[*((unsigned __int16 *)v13 + 2)]];
            if (*(_DWORD *)v14 > HIDWORD(v11))
            {
              uint64_t v15 = &v14[4 * ((unint64_t)v11 >> 32)
                       + 4
                       + *(unsigned int *)&v14[4 * ((unint64_t)v11 >> 32) + 4]];
              unint64_t v16 = &v15[-*(int *)v15];
              if (*(unsigned __int16 *)v16 >= 9u)
              {
                uint64_t v17 = *((unsigned __int16 *)v16 + 4);
                if (v17)
                {
                  unint64_t v18 = &v15[v17 + *(unsigned int *)&v15[v17]];
                  unsigned int v21 = *(_DWORD *)v18;
                  unint64_t v19 = (void (__cdecl **)(std::ostringstream *__hidden))(v18 + 4);
                  unint64_t v20 = v21;
                  if (v21)
                  {
                    uint64_t v22 = v19;
                    unint64_t v23 = v20;
                    do
                    {
                      uint64_t v24 = (unint64_t *)((char *)v22 + ((4 * v23) & 0x7FFFFFFF8));
                      unint64_t v26 = *v24;
                      uint64_t v25 = (void (__cdecl **)(std::ostringstream *__hidden))(v24 + 1);
                      unint64_t v27 = v23 >> 1;
                      v23 += ~(v23 >> 1);
                      if (v26 >= (unint64_t)v10) {
                        unint64_t v23 = v27;
                      }
                      else {
                        uint64_t v22 = v25;
                      }
                    }
                    while (v23);
                    if (v22 == &v19[v20]) {
                      goto LABEL_37;
                    }
                  }
                  else
                  {
                    uint64_t v22 = v19;
                    if (v19 == &v19[v20]) {
                      goto LABEL_37;
                    }
                  }
                  if (*v22 == v10)
                  {
                    int v28 = v22 - v19;
                    if ((~(v22 - v19) & 0x7FFF8) != 0)
                    {
                      uint64_t v30 = a2[2];
                      uint64_t v31 = sub_F9CC14(*(void *)(v4 + 4200), v30, 1);
                      unsigned int v58 = v28;
                      if (v31
                        && (uint64_t v32 = &v31[-*(int *)v31], *(unsigned __int16 *)v32 >= 5u)
                        && *((_WORD *)v32 + 2)
                        && (unsigned int v33 = &v31[*((unsigned __int16 *)v32 + 2)
                                     + *(unsigned int *)&v31[*((unsigned __int16 *)v32 + 2)]],
                            *(_DWORD *)v33 > HIDWORD(v30))
                        && (uint64_t v34 = &v33[4 * ((unint64_t)v30 >> 32)
                                     + 4
                                     + *(unsigned int *)&v33[4 * ((unint64_t)v30 >> 32) + 4]],
                            uint64_t v35 = &v34[-*(int *)v34],
                            *(unsigned __int16 *)v35 >= 0xBu)
                        && (uint64_t v36 = *((unsigned __int16 *)v35 + 5)) != 0)
                      {
                        int v37 = *(_DWORD *)&v34[v36 + *(unsigned int *)&v34[v36]];
                      }
                      else
                      {
                        int v37 = 0;
                      }
                      unsigned int v38 = a2[2];
                      BOOL v39 = sub_F9CC14(*(void *)(v4 + 8), v38, 1);
                      if (!v39) {
                        goto LABEL_12;
                      }
                      unsigned int v40 = &v39[-*(int *)v39];
                      if (*(unsigned __int16 *)v40 < 5u) {
                        goto LABEL_12;
                      }
                      if (!*((_WORD *)v40 + 2)) {
                        goto LABEL_12;
                      }
                      long long v41 = &v39[*((unsigned __int16 *)v40 + 2) + *(unsigned int *)&v39[*((unsigned __int16 *)v40 + 2)]];
                      if (*(_DWORD *)v41 <= HIDWORD(v38)) {
                        goto LABEL_12;
                      }
                      unsigned int v42 = &v41[4 * ((unint64_t)v38 >> 32)
                               + 4
                               + *(unsigned int *)&v41[4 * ((unint64_t)v38 >> 32) + 4]];
                      uint64_t v43 = &v42[-*(int *)v42];
                      if (*(unsigned __int16 *)v43 < 0xBu) {
                        goto LABEL_12;
                      }
                      uint64_t v44 = *((unsigned __int16 *)v43 + 5);
                      if (!v44) {
                        goto LABEL_12;
                      }
                      uint64_t v45 = &v42[v44 + *(unsigned int *)&v42[v44]];
                      unsigned int v48 = *(_DWORD *)v45;
                      uint64_t v46 = (void (__cdecl **)(std::ostringstream *__hidden))(v45 + 4);
                      uint64_t v47 = v48;
                      if (!v48) {
                        goto LABEL_12;
                      }
                      unint64_t v49 = v37 * (unsigned __int16)(v58 >> 3);
                      uint64_t v50 = 8 * v47;
                      while (*v46 != a2[1])
                      {
                        ++v46;
                        v50 -= 8;
                        if (!v50) {
                          goto LABEL_12;
                        }
                      }
                      if (!sub_723EC(3u)) {
                        goto LABEL_12;
                      }
                      long long v64 = v60;
                      *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v64 + (void)*(v60 - 3)) = v59;
                      unint64_t v51 = (std::ios_base *)((char *)&v64 + (void)*(v64 - 3));
                      std::ios_base::init(v51, &v65);
                      v51[1].__vftable = 0;
                      v51[1].__fmtflags_ = -1;
                      std::streambuf::basic_streambuf();
                      long long v66 = 0u;
                      long long v67 = 0u;
                      int v68 = 16;
                      uint64_t v52 = sub_188FC78(&v64, (uint64_t)"Cost for ", 9);
                      uint64_t v53 = sub_FC3480(v52, v6);
                      uint64_t v54 = sub_188FC78(v53, (uint64_t)": ", 2);
                      sub_FC363C((void *)v6[5], v49);
                      std::ostream::operator<<();
                      sub_188FC78(v54, (uint64_t)",", 1);
                      std::ostream::operator<<();
                      std::stringbuf::str();
                      sub_7246C((uint64_t *)__p, 3u);
                      if (v63 < 0) {
                        operator delete(__p[0]);
                      }
                      long long v64 = v61;
                      *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v64 + (void)*(v61 - 3)) = v8;
                      if ((SBYTE7(v67) & 0x80000000) == 0) {
                        goto LABEL_11;
                      }
LABEL_10:
                      operator delete((void *)v66);
                      goto LABEL_11;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_37:
      if (!sub_723EC(3u)) {
        goto LABEL_12;
      }
      sub_6BAC((uint64_t)&v64);
      uint64_t v29 = sub_188FC78(&v64, (uint64_t)"Invalid entry id for key ", 25);
      sub_FC3480(v29, v6);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v63 < 0) {
        operator delete(__p[0]);
      }
      long long v64 = v61;
      *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v64 + (void)*(v61 - 3)) = v8;
      if (SBYTE7(v67) < 0) {
        goto LABEL_10;
      }
LABEL_11:
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
LABEL_12:
      v6 += 7;
      if (v6 == v7)
      {
        unint64_t v6 = v70;
        break;
      }
    }
  }
  if (v6)
  {
    unsigned int v55 = v71;
    unint64_t v56 = v6;
    if (v71 != v6)
    {
      do
      {
        uint64_t v57 = (std::__shared_weak_count *)*(v55 - 1);
        if (v57)
        {
          if (!atomic_fetch_add(&v57->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v55 -= 7;
      }
      while (v55 != v6);
      unint64_t v56 = v70;
    }
    uint64_t v71 = v6;
    operator delete(v56);
  }
}

void sub_FBEDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a21);
    sub_FC384C((void **)(v21 - 112));
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a21);
  sub_FC384C((void **)(v21 - 112));
  _Unwind_Resume(a1);
}

void sub_FBEF08(_Unwind_Exception *a1)
{
  sub_FC384C((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

unsigned int sub_FBEF1C(uint64_t a1, double a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 9480);
  if (!v2) {
    return 1000;
  }
  LODWORD(a2) = *(_DWORD *)(a1 + 9484);
  return vcvtad_u64_f64((double)*(unint64_t *)&a2 * 1000.0 / (double)v2);
}

uint64_t sub_FBEF54@<X0>(uint64_t a1@<X0>, int *a2@<X1>, signed int *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, __int16 a6@<W5>, int a7@<W6>, void *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void *a11)
{
  signed int v11 = *a3;
  int v12 = 0x7FFFFFFF;
  int v13 = 0x7FFFFFFF;
  if (a4 != 2)
  {
LABEL_31:
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_39;
    }
    goto LABEL_32;
  }
  BOOL v14 = v11 == 0x7FFFFFFF || *((unsigned char *)a2 + 176) == 0;
  int v12 = 0x7FFFFFFF;
  if (!v14)
  {
    int v15 = *(_DWORD *)(a5 + 48);
    if (v15 != 0x7FFFFFFF)
    {
      int v16 = a2[43];
      int v17 = v16 / -10;
      int v18 = v16 % 10;
      char v19 = v16 < 0 ? -5 : 5;
      signed int v20 = v17 + v15 + (((-103 * (char)(v19 + v18)) >> 15) & 1) + ((-103 * (char)(v19 + v18)) >> 10);
      int v12 = 0x7FFFFFFF;
      if (v20 <= v11)
      {
        int v21 = a2[42];
        if (v21 < 0) {
          char v22 = -5;
        }
        else {
          char v22 = 5;
        }
        if ((int)(v21 / 10
                 + v15
                 + (((103 * (char)(v22 + v21 % 10)) >> 15) & 1)
                 + ((103 * (char)(v22 + v21 % 10)) >> 10)) >= v11)
          int v12 = *(_DWORD *)(a5 + 48);
        else {
          int v12 = 0x7FFFFFFF;
        }
      }
    }
  }
  if (!*((unsigned char *)a2 + 177))
  {
    int v13 = 0x7FFFFFFF;
    goto LABEL_31;
  }
  if (!*((unsigned char *)a2 + 178))
  {
    int v13 = *a3;
    if (v11 == 0x7FFFFFFF) {
      goto LABEL_39;
    }
LABEL_32:
    if (a4 == 2) {
      goto LABEL_33;
    }
LABEL_39:
    signed int v11 = 0x7FFFFFFF;
    goto LABEL_40;
  }
  int v13 = 0x7FFFFFFF;
  if (v11 == 0x7FFFFFFF) {
    goto LABEL_39;
  }
  int v23 = *(_DWORD *)(a5 + 48);
  if (v23 == 0x7FFFFFFF
    || ((int v24 = a2[43], v24 < 0) ? (v25 = -5) : (v25 = 5),
        (int)(v24 / -10
            + v23
            + (((-103 * (char)(v25 + v24 % 10)) >> 15) & 1)
            + ((-103 * (char)(v25 + v24 % 10)) >> 10)) > v11
     || ((int v26 = a2[42], v26 < 0) ? (v27 = -5) : (v27 = 5),
         (int)(v26 / 10
             + v23
             + (((103 * (char)(v27 + v26 % 10)) >> 15) & 1)
             + ((103 * (char)(v27 + v26 % 10)) >> 10)) < v11)))
  {
    int v13 = 0x7FFFFFFF;
  }
  else
  {
    int v13 = *a3;
  }
LABEL_33:
  if (*(_DWORD *)(a5 + 48) == 0x7FFFFFFF || !a2[280] && !a2[281] && !*((void *)a2 + 141)) {
    goto LABEL_39;
  }
LABEL_40:
  int v28 = *a2;
  uint64_t v30 = *(void *)(a1 + 16);
  int v31 = *(_DWORD *)(a1 + 24);
  int v32 = v28;
  int v33 = v12;
  int v34 = v13;
  signed int v35 = v11;
  char v36 = a4;
  __int16 v37 = a6;
  int v38 = a7;
  return sub_FC664C(&v30, a8, a10, a11, a9);
}

void sub_FBF204(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) + 2654435769u) ^ *a2;
  unint64_t v4 = (*((unsigned __int16 *)a2 + 4) + (v3 << 6) + (v3 >> 2) + 2654435769u) ^ v3;
  unint64_t v5 = (*((unsigned __int16 *)a2 + 5) + (v4 << 6) + (v4 >> 2) + 2654435769u) ^ v4;
  unint64_t v6 = (a2[3] + (v5 << 6) + (v5 >> 2) + 2654435769u) ^ v5;
  unint64_t v7 = ((int)a2[4] + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  unint64_t v8 = ((int)a2[5] + (v7 << 6) + (v7 >> 2) + 2654435769u) ^ v7;
  unint64_t v9 = ((int)a2[6] + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v10 = (*((unsigned __int8 *)a2 + 28) + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  unint64_t v11 = (*((unsigned __int16 *)a2 + 15) + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10;
  sub_FC6A54((uint64_t *)(a1[2] + 272 * (((a2[8] + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11) % *a1)), a2, a3);
}

void sub_FBF2EC(uint64_t a1, uint64_t *a2, long long *a3)
{
  ++*(_DWORD *)(a1 + 816);
  sub_F97750(a1, a2, &v20);
  if (v20)
  {
    uint64_t v6 = v21;
    uint64_t v7 = *(void *)(a1 + 768) + 120 * *(unsigned int *)(v21 + 8);
    long long v9 = a3[4];
    long long v8 = a3[5];
    long long v10 = *(long long *)((char *)a3 + 92);
    *(_OWORD *)(v7 + 56) = a3[3];
    *(_OWORD *)(v7 + 100) = v10;
    *(_OWORD *)(v7 + 88) = v8;
    *(_OWORD *)(v7 + 72) = v9;
    long long v11 = *a3;
    long long v12 = a3[1];
    *(_OWORD *)(v7 + 40) = a3[2];
    *(_OWORD *)(v7 + 24) = v12;
    *(_OWORD *)(v7 + 8) = v11;
    int v13 = (uint64_t *)(a1 + 824);
    unint64_t v14 = *(unsigned int *)(v6 + 8);
    uint64_t v15 = *(void *)(a1 + 848);
    if (v14 >= (*(void *)(a1 + 856) - v15) >> 2 || *(_DWORD *)(v15 + 4 * v14) == -1) {
      goto LABEL_12;
    }
LABEL_10:
    sub_F97B30(v13, v14, (uint64_t)a3);
    return;
  }
  unint64_t v16 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 776) - *(void *)(a1 + 768)) >> 3);
  sub_EE1844(a1, a2, (uint64_t)&v22);
  uint64_t v17 = v23;
  uint64_t v18 = *(void *)(v22 + 8);
  if (v24) {
    *(void *)(v18 + 16 * v23) = *a2;
  }
  *(_DWORD *)(v18 + 16 * v17 + 8) = v16;
  sub_FC6BA0((char **)(a1 + 768), a2, a3);
  int v13 = (uint64_t *)(a1 + 824);
  uint64_t v19 = *(void *)(a1 + 848);
  if (v16 < (unint64_t)((*(void *)(a1 + 856) - v19) >> 2)
    && *(_DWORD *)(v19 + 4 * v16) != -1)
  {
    LODWORD(v14) = v16;
    goto LABEL_10;
  }
  LODWORD(v14) = v16;
LABEL_12:
  sub_F97874((uint64_t)v13, v14, a3);
}

uint64_t sub_FBF47C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_F97750(a1, a2, &v25);
  if (v25)
  {
    uint64_t v6 = v26;
    uint64_t v7 = *(void *)(a1 + 768) + 120 * *(unsigned int *)(v26 + 8);
    unsigned int v10 = *(_DWORD *)(v7 + 8);
    uint64_t v8 = v7 + 8;
    unsigned int v9 = v10;
    if (*(_DWORD *)a3 >= v10 && (v9 < *(_DWORD *)a3 || *(_DWORD *)(a3 + 4) >= *(_DWORD *)(v8 + 4))) {
      return 0;
    }
    ++*(_DWORD *)(a1 + 816);
    long long v13 = *(_OWORD *)a3;
    long long v14 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v8 + 32) = v14;
    *(_OWORD *)uint64_t v8 = v13;
    long long v15 = *(_OWORD *)(a3 + 48);
    long long v16 = *(_OWORD *)(a3 + 64);
    long long v17 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(v8 + 92) = *(_OWORD *)(a3 + 92);
    *(_OWORD *)(v8 + 64) = v16;
    *(_OWORD *)(v8 + 80) = v17;
    *(_OWORD *)(v8 + 48) = v15;
    uint64_t v18 = (uint64_t *)(a1 + 824);
    unint64_t v19 = *(unsigned int *)(v6 + 8);
    uint64_t v20 = *(void *)(a1 + 848);
    if (v19 < (*(void *)(a1 + 856) - v20) >> 2 && *(_DWORD *)(v20 + 4 * v19) != -1) {
      goto LABEL_16;
    }
LABEL_19:
    sub_F97874((uint64_t)v18, v19, (void *)a3);
    return 1;
  }
  ++*(_DWORD *)(a1 + 816);
  unint64_t v21 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 776) - *(void *)(a1 + 768)) >> 3);
  sub_EE1844(a1, a2, (uint64_t)&v27);
  uint64_t v22 = v28;
  uint64_t v23 = *(void *)(v27 + 8);
  if (v29) {
    *(void *)(v23 + 16 * v28) = *a2;
  }
  *(_DWORD *)(v23 + 16 * v22 + 8) = v21;
  sub_FC6BA0((char **)(a1 + 768), a2, (_OWORD *)a3);
  uint64_t v18 = (uint64_t *)(a1 + 824);
  uint64_t v24 = *(void *)(a1 + 848);
  if (v21 >= (unint64_t)((*(void *)(a1 + 856) - v24) >> 2)
    || *(_DWORD *)(v24 + 4 * v21) == -1)
  {
    LODWORD(v19) = v21;
    goto LABEL_19;
  }
  LODWORD(v19) = v21;
LABEL_16:
  sub_F97B30(v18, v19, a3);
  return 1;
}

void sub_FBF640(char **a1)
{
  uint64_t v1 = *a1;
  int64x2_t v2 = *(int64x2_t *)(a1 + 1);
  int64x2_t v3 = vsubq_s64(v2, vdupq_n_s64((unint64_t)*a1));
  int64x2_t v4 = vshrq_n_s64(v3, 5uLL);
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * v4.i64[0];
  if (0xAAAAAAAAAAAAAAABLL * v4.i64[1] <= v5) {
    return;
  }
  uint64_t v7 = a1[1];
  if ((char *)v2.i64[0] == v1)
  {
    *a1 = (char *)(96 * v5);
    a1[1] = (char *)(96 * v5);
    a1[2] = (char *)(96 * v5);
    if (!v1) {
      return;
    }
    goto LABEL_9;
  }
  if (v5 >= 0x2AAAAAAAAAAAAABLL) {
    sub_188D718();
  }
  uint64_t v8 = (char *)operator new(v3.u64[0]) + 96 * v5;
  unsigned int v9 = v8;
  do
  {
    long long v10 = *((_OWORD *)v7 - 5);
    *((_OWORD *)v9 - 6) = *((_OWORD *)v7 - 6);
    *((_OWORD *)v9 - 5) = v10;
    long long v11 = *((_OWORD *)v7 - 4);
    long long v12 = *((_OWORD *)v7 - 3);
    long long v13 = *((_OWORD *)v7 - 1);
    *((_OWORD *)v9 - 2) = *((_OWORD *)v7 - 2);
    *((_OWORD *)v9 - 1) = v13;
    *((_OWORD *)v9 - 4) = v11;
    *((_OWORD *)v9 - 3) = v12;
    v9 -= 96;
    v7 -= 96;
  }
  while (v7 != v1);
  uint64_t v1 = *a1;
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v8;
  if (v1)
  {
LABEL_9:
    operator delete(v1);
  }
}

uint64_t sub_FBF76C(void *a1, unsigned int *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v4 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) + 2654435769u) ^ *a2;
  unint64_t v5 = (*((unsigned __int16 *)a2 + 4) + (v4 << 6) + (v4 >> 2) + 2654435769u) ^ v4;
  unint64_t v6 = (*((unsigned __int16 *)a2 + 5) + (v5 << 6) + (v5 >> 2) + 2654435769u) ^ v5;
  unint64_t v7 = (a2[3] + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  unint64_t v8 = ((int)a2[4] + (v7 << 6) + (v7 >> 2) + 2654435769u) ^ v7;
  unint64_t v9 = ((int)a2[5] + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v10 = ((int)a2[6] + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  unint64_t v11 = (*((unsigned __int8 *)a2 + 28) + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10;
  unint64_t v12 = (*((unsigned __int16 *)a2 + 15) + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
  return sub_FC6DF8(a1[2] + 272 * (((a2[8] + (v12 << 6) + (v12 >> 2) + 2654435769u) ^ v12) % *a1), a2, a3, a4);
}

void **sub_FBF854(void **a1, void *a2, void *a3)
{
  *a1 = a2;
  a1[1] = (void *)sub_3761A0(a2);
  unint64_t v6 = (_DWORD *)sub_374D14(*a1);
  int v7 = sub_29AEC4(v6);
  if (v7)
  {
    uint64_t v8 = sub_374D14(*a1);
    int v7 = sub_29AEB4(v8);
  }
  *((_DWORD *)a1 + 4) = v7;
  *((_WORD *)a1 + 10) = *(_WORD *)(sub_3769E8(*a1) + 3872);
  sub_382300((uint64_t)(a1 + 3), a2, 1);
  uint64_t v9 = sub_375E94(a2);
  unint64_t v10 = a1[1];
  a1[16] = (void *)v9;
  a1[17] = v10;
  sub_F6DA28((uint64_t *)a1 + 18, a2);
  a1[22] = a3;
  a1[23] = (void *)sub_374E74(a2);
  a1[24] = (void *)sub_374EEC(a2);
  a1[25] = (void *)sub_50BE8((uint64_t)a2);
  a1[26] = 0;
  sub_FC76F8(a1 + 27, 0x100u);
  return a1;
}

void sub_FBF938(_Unwind_Exception *a1)
{
  sub_3821F8(v1);
  _Unwind_Resume(a1);
}

void sub_FBF950(uint64_t **a1, _OWORD *a2, unsigned int *a3, int *a4, char a5, void *a6)
{
  a6[1] = *a6;
  long long v179 = 0u;
  long long v180 = 0u;
  long long v178 = 0u;
  sub_FC4D68((uint64_t)&v178);
  unint64_t v12 = (_OWORD *)(*(void *)(*((void *)&v178 + 1)
                             + (((*((void *)&v180 + 1) + (void)v180) >> 4) & 0xFFFFFFFFFFFFFF8))
                 + 32 * ((*((void *)&v180 + 1) + v180) & 0x7F));
  long long v13 = a2[1];
  uint64_t v151 = (uint64_t)a2;
  *unint64_t v12 = *a2;
  v12[1] = v13;
  BOOL v14 = __CFADD__(*((void *)&v180 + 1), 1);
  uint64_t v15 = ++*((void *)&v180 + 1);
  if (!v14)
  {
    char v144 = a3 + 2;
    unsigned __int8 v152 = a1;
    int v153 = a3;
    while (1)
    {
      uint64_t v21 = 16 * (v179 - *((void *)&v178 + 1)) - 1;
      if ((void)v179 == *((void *)&v178 + 1)) {
        uint64_t v21 = 0;
      }
      uint64_t v22 = (long long *)(*(void *)(*((void *)&v178 + 1)
                                   + (((unint64_t)(v180 + v15 - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                       + 32 * ((v180 + v15 - 1) & 0x7F));
      long long v23 = v22[1];
      long long v176 = *v22;
      long long v177 = v23;
      *((void *)&v180 + 1) = v15 - 1;
      if ((unint64_t)(v21 - (v15 + v180) + 1) >= 0x100)
      {
        operator delete(*(void **)(v179 - 8));
        *(void *)&long long v179 = v179 - 8;
      }
      unsigned int v24 = DWORD1(v177);
      if (v177)
      {
        char v25 = sub_F93238((uint64_t)a1[16], v177, 1);
        if (!v25
          || (uint64_t v26 = &v25[-*(int *)v25], *(unsigned __int16 *)v26 < 9u)
          || (uint64_t v27 = *((unsigned __int16 *)v26 + 4)) == 0)
        {
          unsigned int v31 = -2;
          goto LABEL_21;
        }
        uint64_t v28 = (int *)sub_F930D4((unsigned int *)&v25[v27 + *(unsigned int *)&v25[v27]], v24);
        char v29 = (unsigned __int16 *)((char *)v28 - *v28);
        if (*v29 >= 5u)
        {
          uint64_t v30 = v29[2];
          if (v30)
          {
            unsigned int v31 = *((unsigned __int8 *)v28 + v30) - 1;
            goto LABEL_21;
          }
        }
      }
      unsigned int v31 = -1;
LABEL_21:
      if (sub_37D0C8(*a1) && v31 <= *((_DWORD *)a1[1] + 969)) {
        unsigned int v31 = 0;
      }
      sub_FC0BC0(a1, (uint64_t)&v176, a3, a4, a5, v31, (uint64_t *)&v174);
      int v32 = v174;
      uint64_t v34 = *v174;
      uint64_t v33 = v174[1];
      uint64_t v154 = v33;
      uint64_t v155 = *v174;
      if (*v174 == v33)
      {
        if (sub_37D0C8(*a1))
        {
          a6[1] = *a6;
        }
        else
        {
          int v173 = sub_F6F0D8();
          sub_35E640();
          sub_35E640();
          v172[0] = sub_374EAC(*a1);
          v172[1] = (uint64_t)a1;
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)&v162);
            long long v83 = sub_188FC78(&v162, (uint64_t)"Cache entries for input shortcut ", 33);
            sub_FC1E20(v83, (uint64_t *)v151);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 1u);
            if (v159 < 0) {
              operator delete(__p[0]);
            }
            int v162 = v146;
            *(void **)((char *)&v162 + *(v146 - 3)) = v145;
            if (SHIBYTE(v168) < 0) {
              operator delete(v167);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          sub_FC1F28(v172, v151);
          if (sub_723EC(1u))
          {
            sub_6BAC((uint64_t)&v162);
            unint64_t v84 = sub_188FC78(&v162, (uint64_t)"Cache entries for failed (current) shortcut ", 44);
            sub_FC295C(v84, (uint64_t *)&v176);
            std::stringbuf::str();
            sub_7246C((uint64_t *)__p, 1u);
            if (v159 < 0) {
              operator delete(__p[0]);
            }
            int v162 = v146;
            *(void **)((char *)&v162 + *(v146 - 3)) = v145;
            if (SHIBYTE(v168) < 0) {
              operator delete(v167);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          sub_FC1F28(v172, (uint64_t)&v176);
          __int16 v85 = *((_WORD *)a1 + 10);
          int v86 = *((_DWORD *)a1 + 4);
          uint64_t v147 = (uint64_t)a1[1];
          int v149 = a1[23];
          unsigned int v87 = sub_F6F0D8();
          int v88 = sub_35E640();
          int v89 = *a4;
          int v90 = sub_35E640();
          int v91 = *a4;
          if (v88) {
            int v92 = v89;
          }
          else {
            int v92 = 0x7FFFFFFF;
          }
          unsigned int v93 = *v153;
          if (!v90) {
            int v91 = 0x7FFFFFFF;
          }
          int v162 = *(void **)(v151 + 16);
          LODWORD(v163) = *(_DWORD *)(v151 + 24);
          HIDWORD(v163) = v93;
          unint64_t v164 = __PAIR64__(v92, v87);
          LODWORD(v165) = v91;
          BYTE4(v165) = a5;
          HIWORD(v165) = v85;
          int v166 = v86;
          sub_FC785C((uint64_t *)&v162, v149, v147, (uint64_t)v171);
          __int16 v94 = *((_WORD *)v152 + 10);
          int v95 = *((_DWORD *)v152 + 4);
          uint64_t v148 = (uint64_t)v152[1];
          uint64_t v150 = v152[23];
          unsigned int v96 = sub_F6F0D8();
          int v97 = sub_35E640();
          int v98 = *a4;
          int v99 = sub_35E640();
          int v100 = *a4;
          if (v97) {
            int v101 = v98;
          }
          else {
            int v101 = 0x7FFFFFFF;
          }
          unsigned int v102 = *v153;
          if (!v99) {
            int v100 = 0x7FFFFFFF;
          }
          int v162 = (void *)v177;
          char v163 = (void (__cdecl **)(std::stringbuf *__hidden))__PAIR64__(v102, DWORD2(v177));
          unint64_t v164 = __PAIR64__(v101, v96);
          LODWORD(v165) = v100;
          BYTE4(v165) = a5;
          HIWORD(v165) = v94;
          int v166 = v95;
          sub_FC785C((uint64_t *)&v162, v150, v148, (uint64_t)v170);
          sub_E1B4((uint64_t)&v162);
          long long v103 = sub_188FC78(&v164, (uint64_t)"Unpacking of shortcut ", 22);
          long long v104 = sub_FC1E20(v103, (uint64_t *)v151);
          long long v105 = sub_188FC78(v104, (uint64_t)" (level ", 8);
          uint64_t v106 = *(void *)(v151 + 16);
          if (v106)
          {
            long long v107 = sub_F93238((uint64_t)v152[16], *(void *)(v151 + 16), 1);
            if (v107)
            {
              long long v108 = &v107[-*(int *)v107];
              if (*(unsigned __int16 *)v108 >= 9u)
              {
                uint64_t v109 = *((unsigned __int16 *)v108 + 4);
                if (v109) {
                  sub_F930D4((unsigned int *)&v107[v109 + *(unsigned int *)&v107[v109]], HIDWORD(v106));
                }
              }
            }
          }
          std::ostream::operator<<();
          BOOL v110 = sub_188FC78(v105, (uint64_t)", cost ", 7);
          sub_FA70EC((uint64_t)v152[22], v151, v153, a4, a5);
          std::ostream::operator<<();
          sub_188FC78(v110, (uint64_t)",", 1);
          std::ostream::operator<<();
          long long v111 = sub_188FC78(v110, (uint64_t)", key: ", 7);
          uint64_t v112 = sub_FBB54C(v111, v171);
          int v113 = sub_188FC78(v112, (uint64_t)") failed on level ", 18);
          unsigned int v114 = DWORD1(v177);
          if (v177)
          {
            uint64_t v115 = sub_F93238((uint64_t)v152[16], v177, 1);
            if (v115)
            {
              uint64_t v116 = &v115[-*(int *)v115];
              if (*(unsigned __int16 *)v116 >= 9u)
              {
                uint64_t v117 = *((unsigned __int16 *)v116 + 4);
                if (v117) {
                  sub_F930D4((unsigned int *)&v115[v117 + *(unsigned int *)&v115[v117]], v114);
                }
              }
            }
          }
          std::ostream::operator<<();
          int v118 = sub_188FC78(v113, (uint64_t)" for sub shortcut ", 18);
          uint64_t v119 = sub_FC295C(v118, (uint64_t *)&v176);
          char v120 = sub_188FC78(v119, (uint64_t)" (cost ", 7);
          sub_FA70EC((uint64_t)v152[22], (uint64_t)&v176, v153, a4, a5);
          std::ostream::operator<<();
          sub_188FC78(v120, (uint64_t)",", 1);
          std::ostream::operator<<();
          uint64_t v121 = sub_188FC78(v120, (uint64_t)") with cost_function: ", 22);
          char v122 = *((unsigned char *)v153 + 31);
          if (v122 >= 0) {
            uint64_t v123 = (uint64_t)v144;
          }
          else {
            uint64_t v123 = *((void *)v153 + 1);
          }
          if (v122 >= 0) {
            uint64_t v124 = *((unsigned __int8 *)v153 + 31);
          }
          else {
            uint64_t v124 = *((void *)v153 + 2);
          }
          uint64_t v125 = sub_188FC78(v121, v123, v124);
          int v126 = sub_188FC78(v125, (uint64_t)", id: ", 6);
          std::ostream::operator<<();
          unint64_t v127 = sub_188FC78(v126, (uint64_t)", time_utc:", 11);
          int v128 = (void *)sub_266E4((uint64_t)v127);
          unint64_t v129 = sub_188FC78(v128, (uint64_t)", eval_time: ", 13);
          uint64_t v130 = (void *)sub_266E4((uint64_t)v129);
          sub_188FC78(v130, (uint64_t)", uses_blockages: ", 18);
          unsigned __int8 v131 = (void *)std::ostream::operator<<();
          sub_188FC78(v131, (uint64_t)", uses_area_incidents: ", 23);
          uint64_t v132 = (void *)std::ostream::operator<<();
          sub_188FC78(v132, (uint64_t)", traffic_type: ", 16);
          unsigned __int8 v133 = (void *)std::ostream::operator<<();
          unint64_t v134 = sub_188FC78(v133, (uint64_t)", current_cache_key: ", 21);
          uint64_t v135 = sub_FBB54C(v134, v170);
          sub_188FC78(v135, (uint64_t)", scanned nodes: ", 17);
          unsigned __int8 v136 = (void *)std::ostream::operator<<();
          sub_188FC78(v136, (uint64_t)", cache hit: ", 13);
          std::ostream::operator<<();
          if (sub_723EC(3u))
          {
            sub_6BAC((uint64_t)__p);
            std::stringbuf::str();
            if ((v157 & 0x80u) == 0) {
              unint64_t v137 = v156;
            }
            else {
              unint64_t v137 = (void **)v156[0];
            }
            if ((v157 & 0x80u) == 0) {
              uint64_t v138 = v157;
            }
            else {
              uint64_t v138 = (uint64_t)v156[1];
            }
            sub_188FC78(__p, (uint64_t)v137, v138);
            if ((char)v157 < 0) {
              operator delete(v156[0]);
            }
            std::stringbuf::str();
            sub_7246C((uint64_t *)v156, 3u);
            if ((char)v157 < 0) {
              operator delete(v156[0]);
            }
            __p[0] = v146;
            *(void **)((char *)__p + *(v146 - 3)) = v145;
            if (v161 < 0) {
              operator delete(v160);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            std::ios::~ios();
          }
          a6[1] = *a6;
          int v162 = (void *)v143;
          *(void **)((char *)&v162 + *(void *)(v143 - 24)) = (void *)v142;
          unint64_t v164 = v141;
          if (v169 < 0) {
            operator delete(v168);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          std::ios::~ios();
        }
      }
      else if (v31)
      {
        uint64_t v35 = *((void *)&v180 + 1);
        char v36 = (_OWORD *)v174[1];
        do
        {
          uint64_t v39 = *((void *)&v178 + 1);
          if ((void)v179 == *((void *)&v178 + 1)) {
            uint64_t v40 = 0;
          }
          else {
            uint64_t v40 = 16 * (v179 - *((void *)&v178 + 1)) - 1;
          }
          unint64_t v41 = v35 + v180;
          if (v40 == v41)
          {
            sub_FC4D68((uint64_t)&v178);
            uint64_t v39 = *((void *)&v178 + 1);
            unint64_t v41 = *((void *)&v180 + 1) + v180;
          }
          char v36 = (_OWORD *)((char *)v36 - 104);
          __int16 v37 = (_OWORD *)(*(void *)(v39 + ((v41 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v41 & 0x7F));
          long long v38 = v36[1];
          *__int16 v37 = *v36;
          v37[1] = v38;
          uint64_t v35 = ++*((void *)&v180 + 1);
        }
        while (v36 != (_OWORD *)*v32);
      }
      else
      {
        uint64_t v43 = (char *)*a6;
        unsigned int v42 = (char *)a6[1];
        uint64_t v44 = (uint64_t)&v42[-*a6];
        uint64_t v45 = 0x4EC4EC4EC4EC4EC5 * (v44 >> 3);
        unint64_t v46 = v45 + 0x4EC4EC4EC4EC4EC5 * ((v33 - v34) >> 3);
        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a6[2] - *a6) >> 3) < v46)
        {
          if (v46 > 0x276276276276276) {
            sub_2E00();
          }
          uint64_t v47 = (char *)operator new(v44 + v33 - v34);
          unsigned int v48 = &v47[104 * v45];
          if (v42 != v43)
          {
            unint64_t v49 = &v47[104 * v45];
            do
            {
              long long v50 = *(_OWORD *)(v42 - 104);
              long long v51 = *(_OWORD *)(v42 - 88);
              *(_OWORD *)(v49 - 72) = *(_OWORD *)(v42 - 72);
              *(_OWORD *)(v49 - 88) = v51;
              *(_OWORD *)(v49 - 104) = v50;
              long long v52 = *(_OWORD *)(v42 - 56);
              long long v53 = *(_OWORD *)(v42 - 40);
              long long v54 = *(_OWORD *)(v42 - 24);
              unsigned int v48 = v49 - 104;
              *((_DWORD *)v49 - 2) = *((_DWORD *)v42 - 2);
              *(_OWORD *)(v49 - 24) = v54;
              *(_OWORD *)(v49 - 40) = v53;
              *(_OWORD *)(v49 - 56) = v52;
              v42 -= 104;
              v49 -= 104;
            }
            while (v42 != v43);
          }
          *a6 = v48;
          a6[1] = &v47[104 * v45];
          a6[2] = &v47[104 * v46];
          if (v43) {
            operator delete(v43);
          }
        }
        unsigned int v55 = (_OWORD *)*v32;
        unint64_t v56 = (_OWORD *)v32[1];
        if ((_OWORD *)*v32 != v56)
        {
          uint64_t v57 = (char *)a6[1];
          do
          {
            while (1)
            {
              unint64_t v63 = a6[2];
              if ((unint64_t)v57 >= v63) {
                break;
              }
              long long v58 = *v55;
              long long v59 = v55[2];
              *((_OWORD *)v57 + 1) = v55[1];
              *((_OWORD *)v57 + 2) = v59;
              *(_OWORD *)uint64_t v57 = v58;
              long long v60 = v55[3];
              long long v61 = v55[4];
              long long v62 = v55[5];
              *((void *)v57 + 12) = *((void *)v55 + 12);
              *((_OWORD *)v57 + 4) = v61;
              *((_OWORD *)v57 + 5) = v62;
              *((_OWORD *)v57 + 3) = v60;
              a6[1] = v57 + 104;
              unsigned int v55 = (_OWORD *)((char *)v55 + 104);
              v57 += 104;
              if (v55 == v56) {
                goto LABEL_118;
              }
            }
            long long v64 = (char *)*a6;
            uint64_t v65 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v57[-*a6] >> 3);
            unint64_t v66 = v65 + 1;
            if ((unint64_t)(v65 + 1) > 0x276276276276276) {
              sub_2E00();
            }
            unint64_t v67 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v63 - (void)v64) >> 3);
            if (2 * v67 > v66) {
              unint64_t v66 = 2 * v67;
            }
            if (v67 >= 0x13B13B13B13B13BLL) {
              unint64_t v68 = 0x276276276276276;
            }
            else {
              unint64_t v68 = v66;
            }
            if (v68)
            {
              if (v68 > 0x276276276276276) {
                sub_188D718();
              }
              unint64_t v69 = (char *)operator new(104 * v68);
            }
            else
            {
              unint64_t v69 = 0;
            }
            unint64_t v70 = &v69[104 * v65];
            long long v71 = *v55;
            long long v72 = v55[2];
            *((_OWORD *)v70 + 1) = v55[1];
            *((_OWORD *)v70 + 2) = v72;
            *(_OWORD *)unint64_t v70 = v71;
            long long v73 = v55[3];
            long long v74 = v55[4];
            long long v75 = v55[5];
            *((void *)v70 + 12) = *((void *)v55 + 12);
            *((_OWORD *)v70 + 4) = v74;
            *((_OWORD *)v70 + 5) = v75;
            *((_OWORD *)v70 + 3) = v73;
            unint64_t v76 = v70;
            if (v57 != v64)
            {
              do
              {
                long long v77 = *(_OWORD *)(v57 - 104);
                long long v78 = *(_OWORD *)(v57 - 88);
                *(_OWORD *)(v76 - 72) = *(_OWORD *)(v57 - 72);
                *(_OWORD *)(v76 - 88) = v78;
                *(_OWORD *)(v76 - 104) = v77;
                long long v79 = *(_OWORD *)(v57 - 56);
                long long v80 = *(_OWORD *)(v57 - 40);
                long long v81 = *(_OWORD *)(v57 - 24);
                *((_DWORD *)v76 - 2) = *((_DWORD *)v57 - 2);
                *(_OWORD *)(v76 - 24) = v81;
                *(_OWORD *)(v76 - 40) = v80;
                *(_OWORD *)(v76 - 56) = v79;
                v76 -= 104;
                v57 -= 104;
              }
              while (v57 != v64);
              uint64_t v57 = (char *)*a6;
            }
            long long v82 = v70 + 104;
            *a6 = v76;
            a6[1] = v70 + 104;
            a6[2] = &v69[104 * v68];
            if (v57) {
              operator delete(v57);
            }
            a6[1] = v82;
            unsigned int v55 = (_OWORD *)((char *)v55 + 104);
            uint64_t v57 = v82;
          }
          while (v55 != v56);
        }
      }
LABEL_118:
      uint64_t v139 = v175;
      if (v175 && !atomic_fetch_add(&v175->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
        std::__shared_weak_count::__release_weak(v139);
      }
      a1 = v152;
      a3 = v153;
      if (v155 != v154)
      {
        uint64_t v15 = *((void *)&v180 + 1);
        if (*((void *)&v180 + 1)) {
          continue;
        }
      }
      break;
    }
  }
  long long v16 = (void **)*((void *)&v178 + 1);
  long long v17 = (void **)v179;
  *((void *)&v180 + 1) = 0;
  unint64_t v18 = v179 - *((void *)&v178 + 1);
  if ((void)v179 - *((void *)&v178 + 1) >= 0x11uLL)
  {
    do
    {
      operator delete(*v16);
      long long v17 = (void **)v179;
      long long v16 = (void **)(*((void *)&v178 + 1) + 8);
      *((void *)&v178 + 1) = v16;
      unint64_t v18 = v179 - (void)v16;
    }
    while ((void)v179 - (void)v16 > 0x10uLL);
  }
  unint64_t v19 = v18 >> 3;
  if (v19 == 1)
  {
    uint64_t v20 = 64;
    goto LABEL_125;
  }
  if (v19 == 2)
  {
    uint64_t v20 = 128;
LABEL_125:
    *(void *)&long long v180 = v20;
  }
  if (v16 != v17)
  {
    do
    {
      uint64_t v140 = *v16++;
      operator delete(v140);
    }
    while (v16 != v17);
    if ((void)v179 != *((void *)&v178 + 1)) {
      *(void *)&long long v179 = v179 + ((*((void *)&v178 + 1) - v179 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if ((void)v178) {
    operator delete((void *)v178);
  }
}

void sub_FC0A7C(_Unwind_Exception *a1)
{
  sub_48CA88(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_FC0A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a40);
  sub_1C02990((uint64_t)&a72);
  sub_14A84(v72 - 192);
  sub_48CA88(v72 - 144);
  _Unwind_Resume(a1);
}

void sub_FC0BC0(void **a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, int *a4@<X3>, char a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v9 = 0;
  int v170 = a6;
  uint64_t v149 = (uint64_t)(a1 + 27);
  a1[134] = a1[133];
  a1[131] = a1[130];
  *((_DWORD *)a1 + 272) = 0;
  a1[124] = a1[123];
  do
  {
    unint64_t v11 = &a1[v9];
    if (a1[v9 + 29])
    {
      unint64_t v12 = (unint64_t)v11[30];
      if (v12 >= 0x80)
      {
        unint64_t v10 = &a1[v9];
        operator delete(v11[27]);
        v11[27] = &unk_20E1710;
        v10[32] = 0;
        v10[29] = 0;
        v10[30] = 0;
        v10[28] = 0;
      }
      else if (v12)
      {
        v11[29] = 0;
        memset(v11[27], 128, v12 + 8);
        *((unsigned char *)v11[27] + v12) = -1;
        unint64_t v13 = (unint64_t)v11[30];
        if (v13 == 7) {
          uint64_t v14 = 6;
        }
        else {
          uint64_t v14 = v13 - (v13 >> 3);
        }
        a1[v9 + 32] = (void *)(v14 - (void)v11[29]);
      }
    }
    v9 += 6;
  }
  while (v9 != 96);
  a1[127] = a1[126];
  *((_DWORD *)a1 + 258) = 0;
  uint64_t v15 = *(void *)a2;
  uint64_t v168 = *(void *)(a2 + 8);
  uint64_t v169 = v15;
  __int16 v140 = *((_WORD *)a1 + 10);
  int v16 = *((_DWORD *)a1 + 4);
  uint64_t v142 = (uint64_t)a1[1];
  uint64_t v143 = a1[23];
  uint64_t v141 = *(void *)(a2 + 16);
  unsigned int v17 = sub_F6F0D8();
  if (sub_35E640()) {
    int v18 = *a4;
  }
  else {
    int v18 = 0x7FFFFFFF;
  }
  int v19 = sub_35E640();
  int v20 = *a4;
  if (!v19) {
    int v20 = 0x7FFFFFFF;
  }
  unsigned int v21 = *a3;
  *(void *)&v171[0] = *(void *)(a2 + 16);
  DWORD2(v171[0]) = *(_DWORD *)(a2 + 24);
  HIDWORD(v171[0]) = v21;
  *(void *)&v171[1] = __PAIR64__(v18, v17);
  DWORD2(v171[1]) = v20;
  BYTE12(v171[1]) = a5;
  HIWORD(v171[1]) = v140;
  LODWORD(v171[2]) = v16;
  sub_FC785C((uint64_t *)v171, v143, v142, (uint64_t)v167);
  if (!v141)
  {
LABEL_24:
    LODWORD(v27) = 0;
    goto LABEL_25;
  }
  uint64_t v22 = sub_F93238((uint64_t)a1[16], v141, 1);
  if (v22)
  {
    long long v23 = &v22[-*(int *)v22];
    if (*(unsigned __int16 *)v23 >= 9u)
    {
      uint64_t v24 = *((unsigned __int16 *)v23 + 4);
      if (v24)
      {
        char v25 = (int *)sub_F930D4((unsigned int *)&v22[v24 + *(unsigned int *)&v22[v24]], HIDWORD(v141));
        uint64_t v26 = (unsigned __int16 *)((char *)v25 - *v25);
        if (*v26 >= 5u)
        {
          uint64_t v27 = v26[2];
          if (v27) {
            LODWORD(v27) = *((unsigned __int8 *)v25 + v27);
          }
          goto LABEL_25;
        }
        goto LABEL_24;
      }
    }
  }
  LODWORD(v27) = -1;
LABEL_25:
  int v166 = v27;
  sub_FC2A5C(a1[24], v167, (uint64_t)&v163);
  ++*((_DWORD *)a1 + 52);
  if (v165)
  {
    ++*((_DWORD *)a1 + 53);
    if (v163 && *v163 != v163[1] || (uint64_t v28 = sub_3750CC(*a1), !sub_723EC(3u)))
    {
LABEL_48:
      __int16 v37 = v164;
      *a7 = (uint64_t)v163;
      a7[1] = (uint64_t)v37;
      if (v37) {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_181;
    }
    sub_6BAC((uint64_t)v171);
    char v29 = sub_188FC78(v171, (uint64_t)"Failed to unpack ", 17);
    sub_3F85E4((unsigned int *)&v169, v28);
    if (v162 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v162 >= 0) {
      uint64_t v31 = HIBYTE(v162);
    }
    else {
      uint64_t v31 = (uint64_t)v161;
    }
    int v32 = sub_188FC78(v29, (uint64_t)p_p, v31);
    uint64_t v33 = sub_188FC78(v32, (uint64_t)" to ", 4);
    sub_3F85E4((unsigned int *)&v168, v28);
    if (v159 >= 0) {
      uint64_t v34 = &v157;
    }
    else {
      uint64_t v34 = v157;
    }
    if (v159 >= 0) {
      uint64_t v35 = HIBYTE(v159);
    }
    else {
      uint64_t v35 = (uint64_t)v158;
    }
    char v36 = sub_188FC78(v33, (uint64_t)v34, v35);
    sub_188FC78(v36, (uint64_t)": cached shortcut is empty?", 27);
    if (SHIBYTE(v159) < 0)
    {
      operator delete(v157);
      if ((SHIBYTE(v162) & 0x80000000) == 0) {
        goto LABEL_43;
      }
    }
    else if ((SHIBYTE(v162) & 0x80000000) == 0)
    {
LABEL_43:
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 3u);
      if (SHIBYTE(v162) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v171[5]) < 0) {
        operator delete(*((void **)&v171[4] + 1));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      goto LABEL_48;
    }
    operator delete(__p);
    goto LABEL_43;
  }
  *(void *)&v171[0] = 0;
  *((void *)&v171[0] + 1) = 0xA000FFFF00000000;
  memset(&v171[1], 0, 32);
  *(void *)&v171[3] = 0xFFFF00000000;
  *((void *)&v171[3] + 1) = 0xA000FFFF00000000;
  memset(&v171[4], 0, 36);
  *(void *)((char *)&v171[6] + 4) = 0xFFFFLL;
  unsigned int v172 = 0;
  sub_FC2B44(v149, (unsigned int *)&v169, (uint64_t)v171);
  int v144 = v170;
  long long __p = 0;
  char v161 = 0;
  uint64_t v162 = 0;
  unsigned __int8 v157 = 0;
  char v158 = 0;
  uint64_t v159 = 0;
  if (*((_DWORD *)a1 + 272))
  {
    while (1)
    {
      unint64_t v38 = (unint64_t)&a1[123][16 * (unint64_t)*(unsigned int *)a1[130]];
      unint64_t v40 = *(void *)v38;
      uint64_t v39 = *(void *)(v38 + 8);
      unsigned int v41 = *(_DWORD *)(v38 + 120);
      sub_F773C4(v149);
      BOOL v42 = v168 == v40 && HIDWORD(v168) == HIDWORD(v40);
      BOOL v43 = !v42;
      if (v42) {
        break;
      }
      BOOL v44 = v169 == v40 && HIDWORD(v169) == HIDWORD(v40);
      if (v44 || !sub_F963A0((uint64_t)a1[16], v40 & 0xFFFFFFFFFFFFFFFLL, &v166))
      {
        if (v144)
        {
          sub_FA7290((void **)a1[22], v40, &v170, 0, a3, a4, a5, (uint64_t)&v157);
          uint64_t v45 = (char *)v157;
          unint64_t v46 = v158;
          if (v157 != v158)
          {
            unsigned int v47 = v41 + 1;
            do
            {
              uint64_t v48 = *(void *)(v45 + 28);
              unint64_t v49 = v48 & 0xFFFFFFFF00000000;
              if (v48 != -1 && v49 != 0x7FFFFFFF00000000)
              {
                v155[0] = *((void **)v45 + 1);
                *(void *)&v171[0] = (v49 + v39) & 0xFFFFFFFF00000000 | (v48 + v39);
                memset((char *)v171 + 8, 0, 48);
                *((void *)&v171[3] + 1) = 0xA000FFFF00000000;
                HIDWORD(v171[0]) = -1610547201;
                WORD2(v171[3]) = -1;
                memset(&v171[4], 0, 48);
                WORD2(v171[6]) = -1;
                unsigned int v172 = v47;
                uint64_t v51 = *((void *)v45 + 2);
                int v52 = *((_DWORD *)v45 + 6);
                *(_OWORD *)((char *)v171 + 8) = *(_OWORD *)v45;
                *((void *)&v171[1] + 1) = v51;
                LODWORD(v171[2]) = v52;
                sub_FC2CD8(v149, (unsigned int *)v155, (uint64_t)v171);
              }
              v45 += 40;
            }
            while (v45 != v46);
          }
        }
        else if (!sub_37D0C8(*a1) {
               || (uint64_t v53 = sub_3750CC(*a1), v54 = v53, !*(unsigned char *)(v53 + 7774))
        }
               || (unsigned int v55 = sub_290DEC(v53 + 3896, v40, 1)) != 0
               && (unint64_t v56 = &v55[-*(int *)v55], *(unsigned __int16 *)v56 >= 5u)
               && (uint64_t v57 = *((unsigned __int16 *)v56 + 2)) != 0
               && *(_DWORD *)&v55[v57 + *(unsigned int *)&v55[v57]] > (HIDWORD(v40) & 0xFFFFFFFu)
               && sub_295DB4(v54, v40 & 0xFFFFFFFFFFFFFFFLL))
        {
          sub_EDA198((unsigned __int8 *)a1 + 24, v40, 0, (uint64_t)&__p);
          long long v59 = __p;
          long long v58 = v161;
          if (__p != v161)
          {
            unsigned int v60 = v41 + 1;
            do
            {
              unint64_t v61 = sub_F6DA00((uint64_t *)a1 + 18, (uint64_t)v59, (uint64_t)a3);
              unint64_t v63 = v61 & 0xFFFFFFFF00000000;
              if (v61 != -1 && v63 != 0x7FFFFFFF00000000 && v62 != 0x7FFFFFFFFFFFFFFFLL)
              {
                uint64_t v66 = v59[6];
                unsigned int v67 = HIDWORD(v66) & 0x40000000;
                if (v66 < 0 && v67 == 0) {
                  int v69 = 0x40000000;
                }
                else {
                  int v69 = 0;
                }
                v155[0] = (void *)(v59[6] | ((HIDWORD(v66) & 0xFFFFFFF | (*((_DWORD *)v59 + 24) >> 28 << 31) | ((unint64_t)v66 >> 33) & 0x10000000 | (v67 >> 1) | v69) << 32));
                *(void *)&v171[0] = (v63 + v39) & 0xFFFFFFFF00000000 | (v61 + v39);
                long long v70 = *(_OWORD *)v59;
                long long v71 = *((_OWORD *)v59 + 2);
                *(_OWORD *)((char *)&v171[1] + 8) = *((_OWORD *)v59 + 1);
                *(_OWORD *)((char *)&v171[2] + 8) = v71;
                *(_OWORD *)((char *)v171 + 8) = v70;
                long long v72 = *((_OWORD *)v59 + 3);
                long long v73 = *((_OWORD *)v59 + 4);
                long long v74 = *((_OWORD *)v59 + 5);
                DWORD2(v171[6]) = *((_DWORD *)v59 + 24);
                *(_OWORD *)((char *)&v171[4] + 8) = v73;
                *(_OWORD *)((char *)&v171[5] + 8) = v74;
                *(_OWORD *)((char *)&v171[3] + 8) = v72;
                unsigned int v172 = v60;
                sub_FC2CD8(v149, (unsigned int *)v155, (uint64_t)v171);
              }
              v59 += 13;
            }
            while (v59 != v58);
          }
        }
      }
      if (!*((_DWORD *)a1 + 272)) {
        goto LABEL_98;
      }
    }
  }
  else
  {
LABEL_98:
    unsigned int v41 = 0;
    BOOL v43 = 1;
  }
  long long v75 = a7;
  unint64_t v76 = operator new(0x30uLL);
  v76[1] = 0;
  v76[2] = 0;
  *unint64_t v76 = off_243F390;
  v76[4] = 0;
  v76[5] = 0;
  v76[3] = 0;
  *a7 = (uint64_t)(v76 + 3);
  a7[1] = (uint64_t)v76;
  if (v43)
  {
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v171);
      long long v77 = sub_188FC78(v171, (uint64_t)"failed to unpack ", 17);
      long long v78 = sub_3F8738(v77, v169);
      long long v79 = sub_188FC78(v78, (uint64_t)" to ", 4);
      long long v80 = sub_3F8738(v79, v168);
      sub_188FC78(v80, (uint64_t)": target not found?", 19);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v155, 3u);
      if ((char)v156 < 0) {
        operator delete(v155[0]);
      }
      if (SHIBYTE(v171[5]) < 0) {
        operator delete(*((void **)&v171[4] + 1));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    goto LABEL_177;
  }
  if (v41)
  {
    long long v81 = (char *)operator new(104 * v41);
    v76[3] = v81;
    v76[4] = v81;
    v76[5] = &v81[104 * v41];
  }
  int64_t v82 = v168;
  while (1)
  {
    int64_t v154 = v82;
    if (v169 == v82) {
      break;
    }
    sub_F9E678(v149, (unsigned int *)&v154, v171);
    if (!*(void *)&v171[0])
    {
      uint64_t v114 = sub_3750CC(*a1);
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v171);
        uint64_t v115 = sub_188FC78(v171, (uint64_t)"Failed to unpack ", 17);
        sub_3F85E4((unsigned int *)&v169, v114);
        if ((v156 & 0x80u) == 0) {
          uint64_t v116 = v155;
        }
        else {
          uint64_t v116 = (void **)v155[0];
        }
        if ((v156 & 0x80u) == 0) {
          uint64_t v117 = v156;
        }
        else {
          uint64_t v117 = (uint64_t)v155[1];
        }
        int v118 = sub_188FC78(v115, (uint64_t)v116, v117);
        uint64_t v119 = sub_188FC78(v118, (uint64_t)" to ", 4);
        sub_3F85E4((unsigned int *)&v168, v114);
        if ((v153 & 0x80u) == 0) {
          char v120 = v152;
        }
        else {
          char v120 = (void **)v152[0];
        }
        if ((v153 & 0x80u) == 0) {
          uint64_t v121 = v153;
        }
        else {
          uint64_t v121 = (uint64_t)v152[1];
        }
        char v122 = sub_188FC78(v119, (uint64_t)v120, v121);
        uint64_t v123 = sub_188FC78(v122, (uint64_t)": ", 2);
        sub_3F85E4((unsigned int *)&v154, v114);
        if ((v151 & 0x80u) == 0) {
          uint64_t v124 = v150;
        }
        else {
          uint64_t v124 = (void **)v150[0];
        }
        if ((v151 & 0x80u) == 0) {
          uint64_t v125 = v151;
        }
        else {
          uint64_t v125 = (uint64_t)v150[1];
        }
        int v126 = sub_188FC78(v123, (uint64_t)v124, v125);
        sub_188FC78(v126, (uint64_t)" has not been scanned?", 22);
        if ((char)v151 < 0)
        {
          operator delete(v150[0]);
          if ((char)v153 < 0) {
            goto LABEL_186;
          }
LABEL_159:
          if ((char)v156 < 0) {
LABEL_187:
          }
            operator delete(v155[0]);
        }
        else
        {
          if (((char)v153 & 0x80000000) == 0) {
            goto LABEL_159;
          }
LABEL_186:
          operator delete(v152[0]);
          if ((char)v156 < 0) {
            goto LABEL_187;
          }
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)v155, 3u);
        if ((char)v156 < 0) {
          operator delete(v155[0]);
        }
        if (SHIBYTE(v171[5]) < 0) {
          operator delete(*((void **)&v171[4] + 1));
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      *(void *)(*v75 + 8) = *(void *)*v75;
      goto LABEL_177;
    }
    sub_F9E678(v149, (unsigned int *)&v154, v171);
    unint64_t v86 = (unint64_t)&a1[123][16 * (unint64_t)*(unsigned int *)(*((void *)&v171[1] + 1) + 8) + 2];
    long long v75 = a7;
    unsigned int v87 = (void *)*a7;
    int v89 = *(_OWORD **)(*a7 + 8);
    unint64_t v88 = *(void *)(*a7 + 16);
    if ((unint64_t)v89 >= v88)
    {
      int v95 = (_OWORD *)*v87;
      uint64_t v96 = 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v89 - *v87) >> 3);
      unint64_t v97 = v96 + 1;
      if ((unint64_t)(v96 + 1) > 0x276276276276276) {
        sub_2E00();
      }
      unint64_t v98 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v88 - (void)v95) >> 3);
      if (2 * v98 > v97) {
        unint64_t v97 = 2 * v98;
      }
      if (v98 >= 0x13B13B13B13B13BLL) {
        unint64_t v99 = 0x276276276276276;
      }
      else {
        unint64_t v99 = v97;
      }
      if (v99)
      {
        if (v99 > 0x276276276276276) {
          sub_188D718();
        }
        int v100 = (char *)operator new(104 * v99);
      }
      else
      {
        int v100 = 0;
      }
      int v101 = &v100[104 * v96];
      long long v102 = *(_OWORD *)v86;
      long long v103 = *(_OWORD *)(v86 + 32);
      *((_OWORD *)v101 + 1) = *(_OWORD *)(v86 + 16);
      *((_OWORD *)v101 + 2) = v103;
      *(_OWORD *)int v101 = v102;
      long long v104 = *(_OWORD *)(v86 + 48);
      long long v105 = *(_OWORD *)(v86 + 64);
      long long v106 = *(_OWORD *)(v86 + 80);
      *((void *)v101 + 12) = *(void *)(v86 + 96);
      *((_OWORD *)v101 + 4) = v105;
      *((_OWORD *)v101 + 5) = v106;
      *((_OWORD *)v101 + 3) = v104;
      long long v107 = v101;
      if (v89 != v95)
      {
        do
        {
          long long v108 = *(_OWORD *)((char *)v89 - 104);
          long long v109 = *(_OWORD *)((char *)v89 - 88);
          *(_OWORD *)(v107 - 72) = *(_OWORD *)((char *)v89 - 72);
          *(_OWORD *)(v107 - 88) = v109;
          *(_OWORD *)(v107 - 104) = v108;
          long long v110 = *(_OWORD *)((char *)v89 - 56);
          long long v111 = *(_OWORD *)((char *)v89 - 40);
          long long v112 = *(_OWORD *)((char *)v89 - 24);
          *((void *)v107 - 1) = *((void *)v89 - 1);
          *(_OWORD *)(v107 - 24) = v112;
          *(_OWORD *)(v107 - 40) = v111;
          *(_OWORD *)(v107 - 56) = v110;
          v107 -= 104;
          int v89 = (_OWORD *)((char *)v89 - 104);
        }
        while (v89 != v95);
        int v89 = (_OWORD *)*v87;
      }
      int v113 = v101 + 104;
      *unsigned int v87 = v107;
      v87[1] = v101 + 104;
      v87[2] = &v100[104 * v99];
      if (v89) {
        operator delete(v89);
      }
      long long v75 = a7;
      v87[1] = v113;
      int64_t v82 = *(void *)v86;
      if (!v144)
      {
LABEL_109:
        unsigned int v83 = HIDWORD(v82) & 0x40000000;
        if (v82 < 0 && v83 == 0) {
          int v85 = 0x40000000;
        }
        else {
          int v85 = 0;
        }
        int64_t v82 = v82 | ((HIDWORD(v82) & 0xFFFFFFF | (*(_DWORD *)(v86 + 96) >> 27 << 31) | ((unint64_t)v82 >> 33) & 0x10000000 | (v83 >> 1) | v85) << 32);
      }
    }
    else
    {
      long long v90 = *(_OWORD *)v86;
      long long v91 = *(_OWORD *)&a1[123][16 * (unint64_t)*(unsigned int *)(*((void *)&v171[1] + 1) + 8) + 6];
      v89[1] = *(_OWORD *)&a1[123][16 * (unint64_t)*(unsigned int *)(*((void *)&v171[1] + 1) + 8) + 4];
      v89[2] = v91;
      _OWORD *v89 = v90;
      long long v92 = *(_OWORD *)(v86 + 48);
      long long v93 = *(_OWORD *)(v86 + 64);
      long long v94 = *(_OWORD *)(v86 + 80);
      *((void *)v89 + 12) = *(void *)(v86 + 96);
      v89[4] = v93;
      v89[5] = v94;
      v89[3] = v92;
      v87[1] = (char *)v89 + 104;
      int64_t v82 = *(void *)v86;
      if (!v144) {
        goto LABEL_109;
      }
    }
  }
  unint64_t v127 = (char **)*v75;
  unint64_t v128 = *(void *)*v75;
  uint64_t v129 = *(void *)(*v75 + 8);
  unint64_t v130 = v129 - 104;
  if (v128 != v129 && v130 > v128)
  {
    unint64_t v132 = v128 + 104;
    do
    {
      v171[3] = *(_OWORD *)(v132 - 56);
      void v171[4] = *(_OWORD *)(v132 - 40);
      v171[5] = *(_OWORD *)(v132 - 24);
      *(void *)&v171[6] = *(void *)(v132 - 8);
      v171[0] = *(_OWORD *)(v132 - 104);
      v171[1] = *(_OWORD *)(v132 - 88);
      v171[2] = *(_OWORD *)(v132 - 72);
      long long v134 = *(_OWORD *)(v130 + 16);
      long long v133 = *(_OWORD *)(v130 + 32);
      *(_OWORD *)(v132 - 104) = *(_OWORD *)v130;
      *(_OWORD *)(v132 - 88) = v134;
      *(_OWORD *)(v132 - 72) = v133;
      long long v136 = *(_OWORD *)(v130 + 64);
      long long v135 = *(_OWORD *)(v130 + 80);
      uint64_t v137 = *(void *)(v130 + 96);
      *(_OWORD *)(v132 - 56) = *(_OWORD *)(v130 + 48);
      *(void *)(v132 - 8) = v137;
      *(_OWORD *)(v132 - 24) = v135;
      *(_OWORD *)(v132 - 40) = v136;
      *(_OWORD *)(v130 + 32) = v171[2];
      *(_OWORD *)(v130 + 16) = v171[1];
      *(_OWORD *)unint64_t v130 = v171[0];
      *(void *)(v130 + 96) = *(void *)&v171[6];
      *(_OWORD *)(v130 + 80) = v171[5];
      *(_OWORD *)(v130 + 64) = v171[4];
      *(_OWORD *)(v130 + 48) = v171[3];
      v130 -= 104;
      BOOL v138 = v132 >= v130;
      v132 += 104;
    }
    while (!v138);
  }
  sub_FC2E9C(v127);
  sub_FC2FF4(a1[24], v167, v75, *(void *)(*v75 + 16) - *(void *)*v75 + 40);
LABEL_177:
  if (v157)
  {
    char v158 = (char *)v157;
    operator delete(v157);
  }
  if (__p)
  {
    char v161 = __p;
    operator delete(__p);
  }
LABEL_181:
  uint64_t v139 = v164;
  if (v164)
  {
    if (!atomic_fetch_add(&v164->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
}

void sub_FC1C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a62);
  sub_14A84(a14);
  if (a39)
  {
    operator delete(a39);
    unint64_t v63 = a45;
    if (!a45)
    {
LABEL_5:
      sub_14A84((uint64_t)&a51);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unint64_t v63 = a45;
    if (!a45) {
      goto LABEL_5;
    }
  }
  operator delete(v63);
  sub_14A84((uint64_t)&a51);
  _Unwind_Resume(a1);
}

void *sub_FC1E20(void *a1, uint64_t *a2)
{
  unint64_t v4 = sub_3F8738(a1, *a2);
  unint64_t v5 = sub_188FC78(v4, (uint64_t)"(", 1);
  std::ostream::operator<<();
  unint64_t v6 = sub_188FC78(v5, (uint64_t)")-->", 4);
  int v7 = sub_3F8738(v6, a2[1]);
  uint64_t v8 = sub_188FC78(v7, (uint64_t)"(", 1);
  std::ostream::operator<<();
  uint64_t v9 = sub_188FC78(v8, (uint64_t)") cell:", 7);
  unint64_t v10 = sub_51960(v9, a2[2]);
  sub_188FC78(v10, (uint64_t)".", 1);
  std::ostream::operator<<();
  unint64_t v11 = sub_188FC78(v9, (uint64_t)", cost = ", 9);
  std::ostream::operator<<();
  sub_188FC78(v11, (uint64_t)",", 1);
  std::ostream::operator<<();
  return a1;
}

void sub_FC1F28(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unsigned int v47 = (void (__cdecl **)(std::ostringstream *__hidden))a2;
  sub_FC486C(v3, (uint64_t)&v47, (uint64_t)&v53);
  if (v53 == v54 && sub_723EC(3u))
  {
    sub_6BAC((uint64_t)&v47);
    sub_188FC78(&v47, (uint64_t)"No shortcut entries found.", 26);
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v50) < 0) {
      operator delete((void *)v49);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
  }
  unint64_t v6 = v53;
  int v7 = v54;
  if (v53 != v54)
  {
    while (1)
    {
      if (!v6[5] && sub_723EC(3u))
      {
        sub_6BAC((uint64_t)&v47);
        uint64_t v8 = sub_188FC78(&v47, (uint64_t)"Invalid cost ptr stored for key ", 32);
        sub_FC3480(v8, v6);
        std::stringbuf::str();
        sub_7246C((uint64_t *)__p, 3u);
        if (v46 < 0) {
          operator delete(__p[0]);
        }
        unsigned int v47 = v44;
        *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v47 + (void)*(v44 - 3)) = v43;
        if (SBYTE7(v50) < 0) {
          operator delete((void *)v49);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      unsigned __int16 v9 = sub_FA0788(*(void *)(v4 + 8), *(void *)a2, *(void *)(a2 + 16));
      if (v9 != 0xFFFF) {
        break;
      }
      if (!sub_723EC(3u)) {
        goto LABEL_12;
      }
      sub_6BAC((uint64_t)&v47);
      int v32 = sub_188FC78(&v47, (uint64_t)"Invalid entry id for key ", 25);
      sub_FC3480(v32, v6);
      std::stringbuf::str();
      sub_7246C((uint64_t *)__p, 3u);
      if (v46 < 0) {
        operator delete(__p[0]);
      }
      unsigned int v47 = v44;
      *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v47 + (void)*(v44 - 3)) = v43;
      if (SBYTE7(v50) < 0) {
        goto LABEL_10;
      }
LABEL_11:
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
LABEL_12:
      v6 += 7;
      if (v6 == v7)
      {
        unint64_t v6 = v53;
        goto LABEL_54;
      }
    }
    unint64_t v10 = *(void *)(a2 + 16);
    unint64_t v11 = sub_FA08AC(*(void *)(v4 + 136), v10, 1);
    if (v11
      && (unint64_t v12 = &v11[-*(int *)v11], *(unsigned __int16 *)v12 >= 5u)
      && *((_WORD *)v12 + 2)
      && (unint64_t v13 = &v11[*((unsigned __int16 *)v12 + 2) + *(unsigned int *)&v11[*((unsigned __int16 *)v12 + 2)]],
          *(_DWORD *)v13 > HIDWORD(v10))
      && (uint64_t v14 = &v13[4 * HIDWORD(v10) + 4 + *(unsigned int *)&v13[4 * HIDWORD(v10) + 4]],
          uint64_t v15 = &v14[-*(int *)v14],
          *(unsigned __int16 *)v15 >= 0xBu)
      && (uint64_t v16 = *((unsigned __int16 *)v15 + 5)) != 0)
    {
      int v17 = *(_DWORD *)&v14[v16 + *(unsigned int *)&v14[v16]];
    }
    else
    {
      int v17 = 0;
    }
    unint64_t v18 = *(void *)(a2 + 16);
    int v19 = sub_FA08AC(*(void *)(v4 + 8), v18, 1);
    if (!v19) {
      goto LABEL_12;
    }
    int v20 = &v19[-*(int *)v19];
    if (*(unsigned __int16 *)v20 < 5u) {
      goto LABEL_12;
    }
    if (!*((_WORD *)v20 + 2)) {
      goto LABEL_12;
    }
    unsigned int v21 = &v19[*((unsigned __int16 *)v20 + 2) + *(unsigned int *)&v19[*((unsigned __int16 *)v20 + 2)]];
    if (*(_DWORD *)v21 <= HIDWORD(v18)) {
      goto LABEL_12;
    }
    uint64_t v22 = &v21[4 * HIDWORD(v18) + 4 + *(unsigned int *)&v21[4 * HIDWORD(v18) + 4]];
    long long v23 = &v22[-*(int *)v22];
    if (*(unsigned __int16 *)v23 < 0xBu) {
      goto LABEL_12;
    }
    uint64_t v24 = *((unsigned __int16 *)v23 + 5);
    if (!v24) {
      goto LABEL_12;
    }
    char v25 = &v22[v24 + *(unsigned int *)&v22[v24]];
    unsigned int v28 = *(_DWORD *)v25;
    uint64_t v26 = v25 + 4;
    uint64_t v27 = v28;
    if (!v28) {
      goto LABEL_12;
    }
    unint64_t v29 = v17 * v9;
    uint64_t v30 = 8 * v27;
    while (v26[1] != *(_DWORD *)(a2 + 8)
         || ((*v26 >> 4) & 0x8FFFFFFF | (*v26 << 31) | (((*v26 >> 3) & 1) << 28) & 0x9FFFFFFF | (((*v26 >> 2) & 1) << 29) & 0xBFFFFFFF | (((*v26 >> 1) & 1) << 30)) != *(_DWORD *)(a2 + 12))
    {
      v26 += 2;
      v30 -= 8;
      if (!v30) {
        goto LABEL_12;
      }
    }
    if (!sub_723EC(3u)) {
      goto LABEL_12;
    }
    unint64_t v40 = v29;
    unsigned int v47 = v42;
    *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v47 + (void)*(v42 - 3)) = v41;
    uint64_t v33 = (std::ios_base *)((char *)&v47 + (void)*(v47 - 3));
    std::ios_base::init(v33, &v48);
    v33[1].__vftable = 0;
    v33[1].__fmtflags_ = -1;
    std::streambuf::basic_streambuf();
    long long v49 = 0u;
    long long v50 = 0u;
    int v51 = 16;
    uint64_t v34 = sub_188FC78(&v47, (uint64_t)"Cost for ", 9);
    uint64_t v35 = sub_FC3480(v34, v6);
    char v36 = sub_188FC78(v35, (uint64_t)": ", 2);
    sub_FC363C((void *)v6[5], v40);
    std::ostream::operator<<();
    sub_188FC78(v36, (uint64_t)",", 1);
    std::ostream::operator<<();
    std::stringbuf::str();
    sub_7246C((uint64_t *)__p, 3u);
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    unsigned int v47 = v44;
    *(void (__cdecl ***)(std::ostringstream *__hidden))((char *)&v47 + (void)*(v44 - 3)) = v43;
    if ((SBYTE7(v50) & 0x80000000) == 0) {
      goto LABEL_11;
    }
LABEL_10:
    operator delete((void *)v49);
    goto LABEL_11;
  }
LABEL_54:
  if (v6)
  {
    __int16 v37 = v54;
    unint64_t v38 = v6;
    if (v54 != v6)
    {
      do
      {
        uint64_t v39 = (std::__shared_weak_count *)*(v37 - 1);
        if (v39)
        {
          if (!atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v37 -= 7;
      }
      while (v37 != v6);
      unint64_t v38 = v53;
    }
    uint64_t v54 = v6;
    operator delete(v38);
  }
}

void sub_FC27E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0)
  {
    operator delete(__p);
    sub_111ECAC((uint64_t)&a23);
    sub_FC384C((void **)(v23 - 112));
    _Unwind_Resume(a1);
  }
  sub_111ECAC((uint64_t)&a23);
  sub_FC384C((void **)(v23 - 112));
  _Unwind_Resume(a1);
}

void sub_FC290C(_Unwind_Exception *a1)
{
  sub_FC384C((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_FC2920(_Unwind_Exception *a1)
{
  sub_FC384C((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_FC2934(_Unwind_Exception *a1)
{
  sub_FC384C((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_FC2948(_Unwind_Exception *a1)
{
  sub_FC384C((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void *sub_FC295C(void *a1, uint64_t *a2)
{
  uint64_t v4 = sub_3F8738(a1, *a2);
  unint64_t v5 = sub_188FC78(v4, (uint64_t)"(", 1);
  std::ostream::operator<<();
  unint64_t v6 = sub_188FC78(v5, (uint64_t)")-->", 4);
  int v7 = sub_3F8738(v6, a2[1]);
  uint64_t v8 = sub_188FC78(v7, (uint64_t)"(", 1);
  std::ostream::operator<<();
  unsigned __int16 v9 = sub_188FC78(v8, (uint64_t)") cell:", 7);
  unint64_t v10 = sub_51960(v9, a2[2]);
  sub_188FC78(v10, (uint64_t)".", 1);
  std::ostream::operator<<();
  return a1;
}

unsigned int sub_FC2A24(uint64_t a1, double a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 208);
  if (!v2) {
    return 1000;
  }
  LODWORD(a2) = *(_DWORD *)(a1 + 212);
  return vcvtad_u64_f64((double)*(unint64_t *)&a2 * 1000.0 / (double)v2);
}

void sub_FC2A5C(void *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) + 2654435769u) ^ *a2;
  unint64_t v4 = (*((unsigned __int16 *)a2 + 4) + (v3 << 6) + (v3 >> 2) + 2654435769u) ^ v3;
  unint64_t v5 = (*((unsigned __int16 *)a2 + 5) + (v4 << 6) + (v4 >> 2) + 2654435769u) ^ v4;
  unint64_t v6 = (a2[3] + (v5 << 6) + (v5 >> 2) + 2654435769u) ^ v5;
  unint64_t v7 = ((int)a2[4] + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  unint64_t v8 = ((int)a2[5] + (v7 << 6) + (v7 >> 2) + 2654435769u) ^ v7;
  unint64_t v9 = ((int)a2[6] + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v10 = (*((unsigned __int8 *)a2 + 28) + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  unint64_t v11 = (*((unsigned __int16 *)a2 + 15) + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10;
  sub_FC7A30((uint64_t *)(a1[2] + 272 * (((a2[8] + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11) % *a1)), a2, a3);
}

void sub_FC2B44(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  ++*(_DWORD *)(a1 + 816);
  sub_FA0FC8(a1, a2, &v22);
  if (v22)
  {
    uint64_t v6 = v23;
    unint64_t v7 = *(void *)(a1 + 768) + ((unint64_t)*(unsigned int *)(v23 + 8) << 7);
    long long v8 = *(_OWORD *)a3;
    long long v9 = *(_OWORD *)(a3 + 16);
    long long v10 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(a3 + 48);
    long long v12 = *(_OWORD *)(a3 + 80);
    long long v11 = *(_OWORD *)(a3 + 96);
    int v13 = *(_DWORD *)(a3 + 112);
    *(_OWORD *)(v7 + 72) = *(_OWORD *)(a3 + 64);
    *(_DWORD *)(v7 + 120) = v13;
    *(_OWORD *)(v7 + 104) = v11;
    *(_OWORD *)(v7 + 88) = v12;
    *(_OWORD *)(v7 + 40) = v10;
    *(_OWORD *)(v7 + 24) = v9;
    *(_OWORD *)(v7 + 8) = v8;
    uint64_t v14 = (uint64_t *)(a1 + 824);
    unint64_t v15 = *(unsigned int *)(v6 + 8);
    uint64_t v16 = *(void *)(a1 + 848);
    if (v15 >= (*(void *)(a1 + 856) - v16) >> 2 || *(_DWORD *)(v16 + 4 * v15) == -1) {
      goto LABEL_12;
    }
LABEL_10:
    sub_F97B30(v14, v15, a3);
    return;
  }
  unint64_t v17 = *(void *)(a1 + 776) - *(void *)(a1 + 768);
  sub_FA1120(a1, a2, (uint64_t)&v24);
  uint64_t v18 = v24;
  if (v26)
  {
    uint64_t v19 = *(void *)(v24 + 8) + 16 * v25;
    *(void *)uint64_t v19 = *(void *)a2;
    *(_DWORD *)(v19 + 8) = 0;
  }
  *(_DWORD *)(*(void *)(v18 + 8) + 16 * v25 + 8) = v17 >> 7;
  sub_FC7B7C((char **)(a1 + 768), a2, (long long *)a3);
  uint64_t v14 = (uint64_t *)(a1 + 824);
  unint64_t v20 = (v17 >> 7);
  uint64_t v21 = *(void *)(a1 + 848);
  if (v20 < (*(void *)(a1 + 856) - v21) >> 2 && *(_DWORD *)(v21 + 4 * v20) != -1)
  {
    unint64_t v15 = v17 >> 7;
    goto LABEL_10;
  }
  unint64_t v15 = v17 >> 7;
LABEL_12:
  sub_F97874((uint64_t)v14, v15, (void *)a3);
}

uint64_t sub_FC2CD8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  sub_FA0FC8(a1, a2, &v27);
  if (v27)
  {
    uint64_t v6 = v28;
    unint64_t v7 = *(void *)(a1 + 768) + ((unint64_t)*(unsigned int *)(v28 + 8) << 7);
    unsigned int v10 = *(_DWORD *)(v7 + 8);
    unint64_t v8 = v7 + 8;
    unsigned int v9 = v10;
    if (*(_DWORD *)a3 >= v10 && (v9 < *(_DWORD *)a3 || *(_DWORD *)(a3 + 4) >= *(_DWORD *)(v8 + 4))) {
      return 0;
    }
    ++*(_DWORD *)(a1 + 816);
    long long v13 = *(_OWORD *)a3;
    long long v14 = *(_OWORD *)(a3 + 16);
    long long v15 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v8 + 32) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v8 + 48) = v15;
    *(_OWORD *)unint64_t v8 = v13;
    *(_OWORD *)(v8 + 16) = v14;
    long long v16 = *(_OWORD *)(a3 + 64);
    long long v17 = *(_OWORD *)(a3 + 80);
    long long v18 = *(_OWORD *)(a3 + 96);
    *(_DWORD *)(v8 + 112) = *(_DWORD *)(a3 + 112);
    *(_OWORD *)(v8 + 80) = v17;
    *(_OWORD *)(v8 + 96) = v18;
    *(_OWORD *)(v8 + 64) = v16;
    uint64_t v19 = (uint64_t *)(a1 + 824);
    unint64_t v20 = *(unsigned int *)(v6 + 8);
    uint64_t v21 = *(void *)(a1 + 848);
    if (v20 < (*(void *)(a1 + 856) - v21) >> 2 && *(_DWORD *)(v21 + 4 * v20) != -1) {
      goto LABEL_16;
    }
LABEL_19:
    sub_F97874((uint64_t)v19, v20, (void *)a3);
    return 1;
  }
  ++*(_DWORD *)(a1 + 816);
  unint64_t v22 = *(void *)(a1 + 776) - *(void *)(a1 + 768);
  sub_FA1120(a1, a2, (uint64_t)&v29);
  uint64_t v23 = v29;
  if (v31)
  {
    uint64_t v24 = *(void *)(v29 + 8) + 16 * v30;
    *(void *)uint64_t v24 = *(void *)a2;
    *(_DWORD *)(v24 + 8) = 0;
  }
  *(_DWORD *)(*(void *)(v23 + 8) + 16 * v30 + 8) = v22 >> 7;
  sub_FC7B7C((char **)(a1 + 768), a2, (long long *)a3);
  uint64_t v19 = (uint64_t *)(a1 + 824);
  unint64_t v25 = (v22 >> 7);
  uint64_t v26 = *(void *)(a1 + 848);
  if (v25 >= (*(void *)(a1 + 856) - v26) >> 2 || *(_DWORD *)(v26 + 4 * v25) == -1)
  {
    unint64_t v20 = v22 >> 7;
    goto LABEL_19;
  }
  unint64_t v20 = v22 >> 7;
LABEL_16:
  sub_F97B30(v19, v20, a3);
  return 1;
}

void sub_FC2E9C(char **a1)
{
  uint64_t v1 = *a1;
  int64x2_t v2 = *(int64x2_t *)(a1 + 1);
  int64x2_t v3 = vsubq_s64(v2, vdupq_n_s64((unint64_t)*a1));
  int64x2_t v4 = vshrq_n_s64(v3, 3uLL);
  unint64_t v5 = 0x4EC4EC4EC4EC4EC5 * v4.i64[0];
  if (0x4EC4EC4EC4EC4EC5 * v4.i64[1] <= v5) {
    return;
  }
  unint64_t v7 = a1[1];
  if ((char *)v2.i64[0] == v1)
  {
    *a1 = (char *)(104 * v5);
    a1[1] = (char *)(104 * v5);
    a1[2] = (char *)(104 * v5);
    if (!v1) {
      return;
    }
    goto LABEL_9;
  }
  if (v5 >= 0x276276276276277) {
    sub_188D718();
  }
  unint64_t v8 = (char *)operator new(v3.u64[0]) + 104 * v5;
  unsigned int v9 = v8;
  do
  {
    long long v10 = *(_OWORD *)(v7 - 104);
    long long v11 = *(_OWORD *)(v7 - 88);
    *(_OWORD *)(v9 - 72) = *(_OWORD *)(v7 - 72);
    *(_OWORD *)(v9 - 88) = v11;
    *(_OWORD *)(v9 - 104) = v10;
    long long v12 = *(_OWORD *)(v7 - 56);
    long long v13 = *(_OWORD *)(v7 - 40);
    long long v14 = *(_OWORD *)(v7 - 24);
    *((void *)v9 - 1) = *((void *)v7 - 1);
    *(_OWORD *)(v9 - 24) = v14;
    *(_OWORD *)(v9 - 40) = v13;
    *(_OWORD *)(v9 - 56) = v12;
    v9 -= 104;
    v7 -= 104;
  }
  while (v7 != v1);
  uint64_t v1 = *a1;
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v8;
  if (v1)
  {
LABEL_9:
    operator delete(v1);
  }
}

uint64_t sub_FC2FF4(void *a1, unsigned int *a2, uint64_t *a3, unint64_t a4)
{
  unint64_t v4 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) + 2654435769u) ^ *a2;
  unint64_t v5 = (*((unsigned __int16 *)a2 + 4) + (v4 << 6) + (v4 >> 2) + 2654435769u) ^ v4;
  unint64_t v6 = (*((unsigned __int16 *)a2 + 5) + (v5 << 6) + (v5 >> 2) + 2654435769u) ^ v5;
  unint64_t v7 = (a2[3] + (v6 << 6) + (v6 >> 2) + 2654435769u) ^ v6;
  unint64_t v8 = ((int)a2[4] + (v7 << 6) + (v7 >> 2) + 2654435769u) ^ v7;
  unint64_t v9 = ((int)a2[5] + (v8 << 6) + (v8 >> 2) + 2654435769u) ^ v8;
  unint64_t v10 = ((int)a2[6] + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  unint64_t v11 = (*((unsigned __int8 *)a2 + 28) + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10;
  unint64_t v12 = (*((unsigned __int16 *)a2 + 15) + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
  return sub_FC7DA0(a1[2] + 272 * (((a2[8] + (v12 << 6) + (v12 >> 2) + 2654435769u) ^ v12) % *a1), a2, a3, a4);
}

void sub_FC30DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v30 = *(void *)(a1 + 24);
  if (v4 == v30) {
    return;
  }
  while (2)
  {
    long long __p = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    std::mutex::lock((std::mutex *)(v4 + 24));
    unint64_t v6 = *(uint64_t **)(v4 + 8);
    uint64_t v36 = a2;
    sub_FC3A7C(v4, (uint64_t *)v4, (uint64_t)v6, v6, (uint64_t)&__p, (uint64_t)&v37, (uint64_t)&v36);
    uint64_t v32 = v4;
    std::mutex::unlock((std::mutex *)(v4 + 24));
    sub_FC3900((char **)a3, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3)+ 0x6DB6DB6DB6DB6DB7 * ((v34 - (unsigned char *)__p) >> 3));
    unint64_t v7 = __p;
    unint64_t v8 = v34;
    if (__p == v34) {
      goto LABEL_31;
    }
    unint64_t v9 = *(char **)(a3 + 8);
    do
    {
      unint64_t v12 = *(void *)(a3 + 16);
      if ((unint64_t)v9 < v12)
      {
        long long v10 = *v7;
        long long v11 = v7[1];
        *((void *)v9 + 4) = *((void *)v7 + 4);
        *(_OWORD *)unint64_t v9 = v10;
        *((_OWORD *)v9 + 1) = v11;
        *(_OWORD *)(v9 + 40) = *(_OWORD *)((char *)v7 + 40);
        *((void *)v7 + 5) = 0;
        *((void *)v7 + 6) = 0;
        v9 += 56;
        goto LABEL_9;
      }
      uint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v9[-*(void *)a3] >> 3);
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) > 0x492492492492492) {
        sub_2E00();
      }
      unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *(void *)a3) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x249249249249249) {
        unint64_t v16 = 0x492492492492492;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16 > 0x492492492492492) {
        sub_188D718();
      }
      long long v17 = (char *)operator new(56 * v16);
      long long v18 = &v17[56 * v13];
      uint64_t v19 = &v17[56 * v16];
      long long v20 = *v7;
      long long v21 = v7[1];
      *((void *)v18 + 4) = *((void *)v7 + 4);
      *(_OWORD *)long long v18 = v20;
      *((_OWORD *)v18 + 1) = v21;
      *(_OWORD *)(v18 + 40) = *(_OWORD *)((char *)v7 + 40);
      *((void *)v7 + 5) = 0;
      *((void *)v7 + 6) = 0;
      unint64_t v9 = v18 + 56;
      unint64_t v22 = *(char **)a3;
      uint64_t v23 = *(char **)(a3 + 8);
      if (v23 == *(char **)a3)
      {
        *(void *)a3 = v18;
        *(void *)(a3 + 8) = v9;
        *(void *)(a3 + 16) = v19;
        if (!v23) {
          goto LABEL_9;
        }
LABEL_29:
        operator delete(v23);
        goto LABEL_9;
      }
      do
      {
        long long v24 = *(_OWORD *)(v23 - 56);
        long long v25 = *(_OWORD *)(v23 - 40);
        *((void *)v18 - 3) = *((void *)v23 - 3);
        *(_OWORD *)(v18 - 40) = v25;
        *(_OWORD *)(v18 - 56) = v24;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v23 - 1);
        v18 -= 56;
        *((void *)v23 - 2) = 0;
        *((void *)v23 - 1) = 0;
        v23 -= 56;
      }
      while (v23 != v22);
      uint64_t v23 = *(char **)a3;
      uint64_t v26 = *(char **)(a3 + 8);
      *(void *)a3 = v18;
      *(void *)(a3 + 8) = v9;
      for (*(void *)(a3 + 16) = v19; v26 != v23; v26 -= 56)
      {
        uint64_t v27 = (std::__shared_weak_count *)*((void *)v26 - 1);
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (v23) {
        goto LABEL_29;
      }
LABEL_9:
      *(void *)(a3 + 8) = v9;
      unint64_t v7 = (_OWORD *)((char *)v7 + 56);
    }
    while (v7 != (_OWORD *)v8);
    unint64_t v7 = __p;
LABEL_31:
    if (v7)
    {
      uint64_t v28 = v34;
      unint64_t v5 = v7;
      if (v34 != (unsigned char *)v7)
      {
        do
        {
          uint64_t v29 = (std::__shared_weak_count *)*((void *)v28 - 1);
          if (v29)
          {
            if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v28 -= 56;
        }
        while (v28 != (unsigned char *)v7);
        unint64_t v5 = __p;
      }
      uint64_t v34 = v7;
      operator delete(v5);
    }
    uint64_t v4 = v32 + 272;
    if (v32 + 272 != v30) {
      continue;
    }
    break;
  }
}

void sub_FC3434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FC384C((void **)va);
  sub_FC384C(v4);
  _Unwind_Resume(a1);
}

void *sub_FC3480(void *a1, void *a2)
{
  uint64_t v4 = sub_188FC78(a1, (uint64_t)"cell: ", 6);
  unint64_t v5 = sub_51960(v4, *a2);
  sub_188FC78(v5, (uint64_t)".", 1);
  std::ostream::operator<<();
  unint64_t v6 = sub_188FC78(v4, (uint64_t)", ", 2);
  unint64_t v7 = sub_188FC78(v6, (uint64_t)"cost_function_id: ", 18);
  std::ostream::operator<<();
  unint64_t v8 = sub_188FC78(v7, (uint64_t)", ", 2);
  unint64_t v9 = sub_188FC78(v8, (uint64_t)"live_speeds_time_stamp: ", 24);
  long long v10 = (void *)sub_266E4((uint64_t)v9);
  long long v11 = sub_188FC78(v10, (uint64_t)", ", 2);
  unint64_t v12 = sub_188FC78(v11, (uint64_t)"live_blockages_time_stamp: ", 27);
  uint64_t v13 = (void *)sub_266E4((uint64_t)v12);
  unint64_t v14 = sub_188FC78(v13, (uint64_t)", ", 2);
  unint64_t v15 = sub_188FC78(v14, (uint64_t)"live_area_incidents_time_stamp: ", 32);
  unint64_t v16 = (void *)sub_266E4((uint64_t)v15);
  long long v17 = sub_188FC78(v16, (uint64_t)", ", 2);
  sub_188FC78(v17, (uint64_t)"traffic_type: ", 14);
  long long v18 = (void *)std::ostream::operator<<();
  uint64_t v19 = sub_188FC78(v18, (uint64_t)", ", 2);
  long long v20 = sub_188FC78(v19, (uint64_t)"free_flow_branch_id: ", 21);
  std::ostream::operator<<();
  long long v21 = sub_188FC78(v20, (uint64_t)", ", 2);
  unint64_t v22 = sub_188FC78(v21, (uint64_t)"traffic_branch_id: ", 19);
  std::ostream::operator<<();
  sub_188FC78(v22, (uint64_t)", source: ", 10);
  uint64_t v23 = (void *)std::ostream::operator<<();
  long long v24 = sub_188FC78(v23, (uint64_t)", computation_timestamp: ", 25);
  sub_266E4((uint64_t)v24);
  return a1;
}

uint64_t sub_FC363C(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 3)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 3);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v10 = &v15;
    }
    else {
      long long v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    unint64_t v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    unint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 8 * a2;
}

void sub_FC376C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void **sub_FC384C(void **a1)
{
  int64x2_t v2 = (char *)*a1;
  if (*a1)
  {
    int64x2_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_FC3900(char **a1, unint64_t a2)
{
  int64x2_t v2 = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x492492492492493) {
    sub_2E00();
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = 56 * a2;
  unint64_t v6 = (char *)operator new(56 * a2);
  long long v7 = &v6[v5];
  unint64_t v8 = &v6[v4 - v2];
  if (v4 == v2)
  {
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v7;
    if (!v2) {
      return;
    }
    goto LABEL_14;
  }
  long long v9 = &v6[v4 - v2];
  do
  {
    long long v10 = *(_OWORD *)(v4 - 56);
    long long v11 = *(_OWORD *)(v4 - 40);
    *((void *)v9 - 3) = *((void *)v4 - 3);
    *(_OWORD *)(v9 - 40) = v11;
    *(_OWORD *)(v9 - 56) = v10;
    *((_OWORD *)v9 - 1) = *((_OWORD *)v4 - 1);
    v9 -= 56;
    *((void *)v4 - 2) = 0;
    *((void *)v4 - 1) = 0;
    v4 -= 56;
  }
  while (v4 != v2);
  unint64_t v12 = *a1;
  int64x2_t v2 = a1[1];
  *a1 = v9;
  a1[1] = v8;
  a1[2] = v7;
  if (v2 != v12)
  {
    do
    {
      long long v13 = (std::__shared_weak_count *)*((void *)v2 - 1);
      if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
      v2 -= 56;
    }
    while (v2 != v12);
    int64x2_t v2 = v12;
  }
  if (v2)
  {
LABEL_14:
    operator delete(v2);
  }
}

uint64_t sub_FC3A7C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2 != a4)
  {
    long long v10 = a2;
    do
    {
      long long v13 = (uint64_t *)*v10;
      uint64_t v14 = *v10 + 16;
      if (*(_DWORD *)v14 == *(_DWORD *)(**(void **)a7 + 16)
        && *(_DWORD *)(*v10 + 20) == *(_DWORD *)(**(void **)a7 + 20))
      {
        long long v16 = *(_OWORD *)(*v10 + 32);
        long long v23 = *(_OWORD *)v14;
        long long v24 = v16;
        uint64_t v18 = v13[7];
        uint64_t v17 = v13[8];
        uint64_t v25 = *(void *)(v14 + 32);
        *(void *)&long long v26 = v18;
        *((void *)&v26 + 1) = v17;
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v19 = *(void *)(a5 + 8);
        if (v19 < *(void *)(a5 + 16))
        {
          long long v11 = v23;
          long long v12 = v24;
          *(void *)(v19 + 32) = v25;
          *(_OWORD *)unint64_t v19 = v11;
          *(_OWORD *)(v19 + 16) = v12;
          *(_OWORD *)(v19 + 40) = v26;
          *(void *)(a5 + 8) = v19 + 56;
        }
        else
        {
          std::string::size_type v20 = sub_FC3BD4((void **)a5, (uint64_t)&v23);
          long long v21 = (std::__shared_weak_count *)*((void *)&v26 + 1);
          *(void *)(a5 + 8) = v20;
          if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        long long v13 = (uint64_t *)*v10;
      }
      long long v10 = v13;
    }
    while (v13 != a4);
  }
  return a5;
}

void sub_FC3BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_FC3BD4(void **a1, uint64_t a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    sub_2E00();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)) >= 0x249249249249249) {
    unint64_t v5 = 0x492492492492492;
  }
  else {
    unint64_t v5 = v4;
  }
  if (v5 > 0x492492492492492) {
    sub_188D718();
  }
  uint64_t v7 = 56 * v5;
  unint64_t v8 = (char *)operator new(56 * v5);
  long long v9 = &v8[56 * v3];
  long long v10 = &v8[v7];
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v11;
  *((void *)v9 + 4) = *(void *)(a2 + 32);
  *(_OWORD *)(v9 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  long long v12 = v9 + 56;
  long long v13 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    if (!v14) {
      return v12;
    }
    goto LABEL_18;
  }
  do
  {
    long long v15 = *(_OWORD *)(v14 - 56);
    long long v16 = *(_OWORD *)(v14 - 40);
    *((void *)v9 - 3) = *((void *)v14 - 3);
    *(_OWORD *)(v9 - 40) = v16;
    *(_OWORD *)(v9 - 56) = v15;
    *((_OWORD *)v9 - 1) = *((_OWORD *)v14 - 1);
    v9 -= 56;
    *((void *)v14 - 2) = 0;
    *((void *)v14 - 1) = 0;
    v14 -= 56;
  }
  while (v14 != v13);
  uint64_t v17 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  *a1 = v9;
  a1[1] = v12;
  a1[2] = v10;
  if (v14 != v17)
  {
    do
    {
      uint64_t v18 = (std::__shared_weak_count *)*((void *)v14 - 1);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      v14 -= 56;
    }
    while (v14 != v17);
    uint64_t v14 = v17;
  }
  if (v14) {
LABEL_18:
  }
    operator delete(v14);
  return v12;
}

void sub_FC3DA0(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    unint64_t v6 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)unint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    long long v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        uint64_t v34 = (char *)operator new(8 * v31);
        uint64_t v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        unint64_t v5 = v35;
        if (!v37)
        {
          unint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            long long v74 = &v34[8 * v32];
            unint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v40 = &v35[v76];
              v7 += v76;
              long long v77 = (long long *)(v6 + 3);
              long long v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *long long v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    long long v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    unint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      long long v91 = operator new(0x1000uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    long long v91 = operator new(0x1000uLL);
    sub_224F8((void **)a1, &v91);
    unsigned int v41 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    long long v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        uint64_t v34 = (char *)operator new(8 * v42);
        uint64_t v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        unint64_t v5 = v35;
        if (!v37)
        {
          unint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            int64_t v82 = &v34[8 * v43];
            unsigned int v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              unsigned int v47 = &v35[v84];
              v7 += v84;
              int v85 = (long long *)(v41 + 3);
              unint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *unint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unsigned int v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)unsigned int v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          unint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  long long v26 = operator new(0x1000uLL);
  uint64_t v27 = &v25[8 * v21];
  uint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      long long v49 = (char *)operator new(8 * v48);
      uint64_t v27 = &v49[8 * (v48 >> 2)];
      uint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)uint64_t v27 = v90;
      uint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)uint64_t v27 = v26;
      uint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          unsigned int v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v53;
          if (!v37)
          {
            uint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            long long v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            long long v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            long long v64 = &v53[v68];
            uint64_t v65 = &v27[v68];
            int v69 = (long long *)(v27 + 16);
            long long v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)long long v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)long long v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          uint64_t v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      int v51 = v53 - 8;
      uint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)uint64_t v27 = v26;
  uint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  int v51 = v27;
LABEL_46:
  int v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_FC4310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_FC432C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_FC4340(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_FC4358(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_FC4370(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v30 = *(void *)(a1 + 24);
  if (v4 == v30) {
    return;
  }
  while (2)
  {
    long long __p = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    std::mutex::lock((std::mutex *)(v4 + 24));
    unint64_t v6 = *(uint64_t **)(v4 + 8);
    uint64_t v36 = a2;
    sub_FC4714(v4, (uint64_t *)v4, (uint64_t)v6, v6, (uint64_t)&__p, (uint64_t)&v37, (uint64_t)&v36);
    uint64_t v32 = v4;
    std::mutex::unlock((std::mutex *)(v4 + 24));
    sub_FC3900((char **)a3, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3)+ 0x6DB6DB6DB6DB6DB7 * ((v34 - (unsigned char *)__p) >> 3));
    uint64_t v7 = __p;
    uint64_t v8 = v34;
    if (__p == v34) {
      goto LABEL_31;
    }
    long long v9 = *(char **)(a3 + 8);
    do
    {
      unint64_t v12 = *(void *)(a3 + 16);
      if ((unint64_t)v9 < v12)
      {
        long long v10 = *v7;
        long long v11 = v7[1];
        *((void *)v9 + 4) = *((void *)v7 + 4);
        *(_OWORD *)long long v9 = v10;
        *((_OWORD *)v9 + 1) = v11;
        *(_OWORD *)(v9 + 40) = *(_OWORD *)((char *)v7 + 40);
        *((void *)v7 + 5) = 0;
        *((void *)v7 + 6) = 0;
        v9 += 56;
        goto LABEL_9;
      }
      uint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v9[-*(void *)a3] >> 3);
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) > 0x492492492492492) {
        sub_2E00();
      }
      unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *(void *)a3) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x249249249249249) {
        unint64_t v16 = 0x492492492492492;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16 > 0x492492492492492) {
        sub_188D718();
      }
      uint64_t v17 = (char *)operator new(56 * v16);
      uint64_t v18 = &v17[56 * v13];
      uint64_t v19 = &v17[56 * v16];
      long long v20 = *v7;
      long long v21 = v7[1];
      *((void *)v18 + 4) = *((void *)v7 + 4);
      *(_OWORD *)uint64_t v18 = v20;
      *((_OWORD *)v18 + 1) = v21;
      *(_OWORD *)(v18 + 40) = *(_OWORD *)((char *)v7 + 40);
      *((void *)v7 + 5) = 0;
      *((void *)v7 + 6) = 0;
      long long v9 = v18 + 56;
      uint64_t v22 = *(char **)a3;
      uint64_t v23 = *(char **)(a3 + 8);
      if (v23 == *(char **)a3)
      {
        *(void *)a3 = v18;
        *(void *)(a3 + 8) = v9;
        *(void *)(a3 + 16) = v19;
        if (!v23) {
          goto LABEL_9;
        }
LABEL_29:
        operator delete(v23);
        goto LABEL_9;
      }
      do
      {
        long long v24 = *(_OWORD *)(v23 - 56);
        long long v25 = *(_OWORD *)(v23 - 40);
        *((void *)v18 - 3) = *((void *)v23 - 3);
        *(_OWORD *)(v18 - 40) = v25;
        *(_OWORD *)(v18 - 56) = v24;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v23 - 1);
        v18 -= 56;
        *((void *)v23 - 2) = 0;
        *((void *)v23 - 1) = 0;
        v23 -= 56;
      }
      while (v23 != v22);
      uint64_t v23 = *(char **)a3;
      long long v26 = *(char **)(a3 + 8);
      *(void *)a3 = v18;
      *(void *)(a3 + 8) = v9;
      for (*(void *)(a3 + 16) = v19; v26 != v23; v26 -= 56)
      {
        uint64_t v27 = (std::__shared_weak_count *)*((void *)v26 - 1);
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (v23) {
        goto LABEL_29;
      }
LABEL_9:
      *(void *)(a3 + 8) = v9;
      uint64_t v7 = (_OWORD *)((char *)v7 + 56);
    }
    while (v7 != (_OWORD *)v8);
    uint64_t v7 = __p;
LABEL_31:
    if (v7)
    {
      uint64_t v28 = v34;
      unint64_t v5 = v7;
      if (v34 != (unsigned char *)v7)
      {
        do
        {
          uint64_t v29 = (std::__shared_weak_count *)*((void *)v28 - 1);
          if (v29)
          {
            if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v28 -= 56;
        }
        while (v28 != (unsigned char *)v7);
        unint64_t v5 = __p;
      }
      uint64_t v34 = v7;
      operator delete(v5);
    }
    uint64_t v4 = v32 + 272;
    if (v32 + 272 != v30) {
      continue;
    }
    break;
  }
}

void sub_FC46C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FC384C((void **)va);
  sub_FC384C(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_FC4714(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2 != a4)
  {
    long long v10 = a2;
    do
    {
      uint64_t v13 = (uint64_t *)*v10;
      uint64_t v14 = *v10 + 16;
      if (*(_DWORD *)v14 == *(_DWORD *)(**(void **)a7 + 16)
        && *(_DWORD *)(*v10 + 20) == *(_DWORD *)(**(void **)a7 + 20))
      {
        long long v16 = *(_OWORD *)(*v10 + 32);
        long long v23 = *(_OWORD *)v14;
        long long v24 = v16;
        uint64_t v18 = v13[7];
        uint64_t v17 = v13[8];
        uint64_t v25 = *(void *)(v14 + 32);
        *(void *)&long long v26 = v18;
        *((void *)&v26 + 1) = v17;
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v19 = *(void *)(a5 + 8);
        if (v19 < *(void *)(a5 + 16))
        {
          long long v11 = v23;
          long long v12 = v24;
          *(void *)(v19 + 32) = v25;
          *(_OWORD *)unint64_t v19 = v11;
          *(_OWORD *)(v19 + 16) = v12;
          *(_OWORD *)(v19 + 40) = v26;
          *(void *)(a5 + 8) = v19 + 56;
        }
        else
        {
          long long v20 = sub_FC3BD4((void **)a5, (uint64_t)&v23);
          long long v21 = (std::__shared_weak_count *)*((void *)&v26 + 1);
          *(void *)(a5 + 8) = v20;
          if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        uint64_t v13 = (uint64_t *)*v10;
      }
      long long v10 = v13;
    }
    while (v13 != a4);
  }
  return a5;
}

void sub_FC4858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_FC486C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v30 = *(void *)(a1 + 24);
  if (v4 == v30) {
    return;
  }
  while (2)
  {
    long long __p = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    std::mutex::lock((std::mutex *)(v4 + 24));
    unint64_t v6 = *(uint64_t **)(v4 + 8);
    uint64_t v36 = a2;
    sub_FC4C10(v4, (uint64_t *)v4, (uint64_t)v6, v6, (uint64_t)&__p, (uint64_t)&v37, (uint64_t)&v36);
    uint64_t v32 = v4;
    std::mutex::unlock((std::mutex *)(v4 + 24));
    sub_FC3900((char **)a3, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3)+ 0x6DB6DB6DB6DB6DB7 * ((v34 - (unsigned char *)__p) >> 3));
    uint64_t v7 = __p;
    uint64_t v8 = v34;
    if (__p == v34) {
      goto LABEL_31;
    }
    long long v9 = *(char **)(a3 + 8);
    do
    {
      unint64_t v12 = *(void *)(a3 + 16);
      if ((unint64_t)v9 < v12)
      {
        long long v10 = *v7;
        long long v11 = v7[1];
        *((void *)v9 + 4) = *((void *)v7 + 4);
        *(_OWORD *)long long v9 = v10;
        *((_OWORD *)v9 + 1) = v11;
        *(_OWORD *)(v9 + 40) = *(_OWORD *)((char *)v7 + 40);
        *((void *)v7 + 5) = 0;
        *((void *)v7 + 6) = 0;
        v9 += 56;
        goto LABEL_9;
      }
      uint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v9[-*(void *)a3] >> 3);
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) > 0x492492492492492) {
        sub_2E00();
      }
      unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v12 - *(void *)a3) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x249249249249249) {
        unint64_t v16 = 0x492492492492492;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16 > 0x492492492492492) {
        sub_188D718();
      }
      uint64_t v17 = (char *)operator new(56 * v16);
      uint64_t v18 = &v17[56 * v13];
      unint64_t v19 = &v17[56 * v16];
      long long v20 = *v7;
      long long v21 = v7[1];
      *((void *)v18 + 4) = *((void *)v7 + 4);
      *(_OWORD *)uint64_t v18 = v20;
      *((_OWORD *)v18 + 1) = v21;
      *(_OWORD *)(v18 + 40) = *(_OWORD *)((char *)v7 + 40);
      *((void *)v7 + 5) = 0;
      *((void *)v7 + 6) = 0;
      long long v9 = v18 + 56;
      uint64_t v22 = *(char **)a3;
      long long v23 = *(char **)(a3 + 8);
      if (v23 == *(char **)a3)
      {
        *(void *)a3 = v18;
        *(void *)(a3 + 8) = v9;
        *(void *)(a3 + 16) = v19;
        if (!v23) {
          goto LABEL_9;
        }
LABEL_29:
        operator delete(v23);
        goto LABEL_9;
      }
      do
      {
        long long v24 = *(_OWORD *)(v23 - 56);
        long long v25 = *(_OWORD *)(v23 - 40);
        *((void *)v18 - 3) = *((void *)v23 - 3);
        *(_OWORD *)(v18 - 40) = v25;
        *(_OWORD *)(v18 - 56) = v24;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v23 - 1);
        v18 -= 56;
        *((void *)v23 - 2) = 0;
        *((void *)v23 - 1) = 0;
        v23 -= 56;
      }
      while (v23 != v22);
      long long v23 = *(char **)a3;
      long long v26 = *(char **)(a3 + 8);
      *(void *)a3 = v18;
      *(void *)(a3 + 8) = v9;
      for (*(void *)(a3 + 16) = v19; v26 != v23; v26 -= 56)
      {
        uint64_t v27 = (std::__shared_weak_count *)*((void *)v26 - 1);
        if (v27 && !atomic_fetch_add(&v27->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (v23) {
        goto LABEL_29;
      }
LABEL_9:
      *(void *)(a3 + 8) = v9;
      uint64_t v7 = (_OWORD *)((char *)v7 + 56);
    }
    while (v7 != (_OWORD *)v8);
    uint64_t v7 = __p;
LABEL_31:
    if (v7)
    {
      uint64_t v28 = v34;
      unint64_t v5 = v7;
      if (v34 != (unsigned char *)v7)
      {
        do
        {
          uint64_t v29 = (std::__shared_weak_count *)*((void *)v28 - 1);
          if (v29)
          {
            if (!atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v28 -= 56;
        }
        while (v28 != (unsigned char *)v7);
        unint64_t v5 = __p;
      }
      uint64_t v34 = v7;
      operator delete(v5);
    }
    uint64_t v4 = v32 + 272;
    if (v32 + 272 != v30) {
      continue;
    }
    break;
  }
}

void sub_FC4BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FC384C((void **)va);
  sub_FC384C(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_FC4C10(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a2 != a4)
  {
    long long v10 = a2;
    do
    {
      uint64_t v13 = (uint64_t *)*v10;
      uint64_t v14 = *v10 + 16;
      if (*(_DWORD *)v14 == *(_DWORD *)(**(void **)a7 + 16)
        && *(_DWORD *)(*v10 + 20) == *(_DWORD *)(**(void **)a7 + 20))
      {
        long long v16 = *(_OWORD *)(*v10 + 32);
        long long v23 = *(_OWORD *)v14;
        long long v24 = v16;
        uint64_t v18 = v13[7];
        uint64_t v17 = v13[8];
        uint64_t v25 = *(void *)(v14 + 32);
        *(void *)&long long v26 = v18;
        *((void *)&v26 + 1) = v17;
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v19 = *(void *)(a5 + 8);
        if (v19 < *(void *)(a5 + 16))
        {
          long long v11 = v23;
          long long v12 = v24;
          *(void *)(v19 + 32) = v25;
          *(_OWORD *)unint64_t v19 = v11;
          *(_OWORD *)(v19 + 16) = v12;
          *(_OWORD *)(v19 + 40) = v26;
          *(void *)(a5 + 8) = v19 + 56;
        }
        else
        {
          long long v20 = sub_FC3BD4((void **)a5, (uint64_t)&v23);
          long long v21 = (std::__shared_weak_count *)*((void *)&v26 + 1);
          *(void *)(a5 + 8) = v20;
          if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        uint64_t v13 = (uint64_t *)*v10;
      }
      long long v10 = v13;
    }
    while (v13 != a4);
  }
  return a5;
}

void sub_FC4D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_FC4D68(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    unint64_t v6 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_80:
      *(void *)unint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    long long v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v31 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v31 = 1;
      }
      if (!(v31 >> 61))
      {
        unint64_t v32 = v31 >> 2;
        uint64_t v33 = 8 * v31;
        uint64_t v34 = (char *)operator new(8 * v31);
        uint64_t v35 = &v34[8 * v32];
        uint64_t v36 = &v34[v33];
        int64_t v38 = v5 - v7;
        BOOL v37 = v5 == v7;
        unint64_t v5 = v35;
        if (!v37)
        {
          unint64_t v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            long long v74 = &v34[8 * v32];
            unint64_t v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              uint64_t v75 = (v39 >> 3) + 1;
              uint64_t v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v40 = &v35[v76];
              v7 += v76;
              long long v77 = (long long *)(v6 + 3);
              long long v78 = v74 + 16;
              uint64_t v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *long long v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unint64_t v40 = &v34[8 * v32];
          }
          do
          {
            uint64_t v81 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_78;
      }
LABEL_89:
      sub_188D718();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    unint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_80;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v19 = *(void *)(a1 + 8);
  uint64_t v20 = v18 - v19;
  uint64_t v21 = (v18 - v19) >> 3;
  uint64_t v22 = v17 - *(void *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      long long v91 = operator new(0x1000uLL);
      sub_22368((char **)a1, &v91);
      return;
    }
    long long v91 = operator new(0x1000uLL);
    sub_224F8((void **)a1, &v91);
    unsigned int v41 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v41 + 1);
    uint64_t v8 = *v41;
    *(void *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_80;
    }
    long long v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v42 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v42 = 1;
      }
      if (!(v42 >> 61))
      {
        unint64_t v43 = v42 >> 2;
        uint64_t v44 = 8 * v42;
        uint64_t v34 = (char *)operator new(8 * v42);
        uint64_t v35 = &v34[8 * v43];
        uint64_t v36 = &v34[v44];
        int64_t v45 = v5 - v7;
        BOOL v37 = v5 == v7;
        unint64_t v5 = v35;
        if (!v37)
        {
          unint64_t v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            int64_t v82 = &v34[8 * v43];
            unsigned int v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              uint64_t v83 = (v46 >> 3) + 1;
              uint64_t v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              unsigned int v47 = &v35[v84];
              v7 += v84;
              int v85 = (long long *)(v41 + 3);
              unint64_t v86 = v82 + 16;
              uint64_t v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *unint64_t v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_78;
              }
            }
          }
          else
          {
            unsigned int v47 = &v34[8 * v43];
          }
          do
          {
            uint64_t v89 = *(void *)v7;
            v7 += 8;
            *(void *)unsigned int v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_78:
        *(void *)a1 = v34;
        *(void *)(a1 + 8) = v35;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          unint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_80;
      }
      goto LABEL_89;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v17 == *(void *)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  if (v24 >> 61) {
    goto LABEL_89;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  long long v26 = operator new(0x1000uLL);
  uint64_t v27 = &v25[8 * v21];
  uint64_t v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    long long v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19) {
        unint64_t v48 = 1;
      }
      else {
        unint64_t v48 = v20 >> 2;
      }
      if (v48 >> 61) {
        sub_188D718();
      }
      long long v49 = (char *)operator new(8 * v48);
      uint64_t v27 = &v49[8 * (v48 >> 2)];
      uint64_t v28 = &v49[8 * v48];
      operator delete(v25);
      uint64_t v50 = *(void *)(a1 + 8);
      uint64_t v18 = *(void *)(a1 + 16);
      uint64_t v25 = v49;
      *(void *)uint64_t v27 = v90;
      uint64_t v29 = v27 + 8;
      if (v18 == v50) {
        goto LABEL_45;
      }
    }
    else
    {
      unint64_t v30 = v21 + 2;
      if (v21 >= -1) {
        unint64_t v30 = v21 + 1;
      }
      v27 -= 8 * (v30 >> 1);
      *(void *)uint64_t v27 = v26;
      uint64_t v29 = v27 + 8;
      if (v18 == v19) {
        goto LABEL_45;
      }
    }
    do
    {
LABEL_52:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27) {
            unint64_t v59 = 1;
          }
          else {
            unint64_t v59 = (v28 - v27) >> 2;
          }
          if (v59 >> 61) {
            sub_188D718();
          }
          unsigned int v60 = (char *)operator new(8 * v59);
          uint64_t v25 = v60;
          unint64_t v61 = (v59 + 3) >> 2;
          uint64_t v53 = &v60[8 * v61];
          int64_t v62 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v53;
          if (!v37)
          {
            uint64_t v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            unint64_t v63 = v62 - 8;
            long long v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if (v63 < 0x38) {
              goto LABEL_93;
            }
            uint64_t v66 = 8 * v61;
            long long v64 = &v60[8 * v61];
            uint64_t v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20) {
              goto LABEL_93;
            }
            uint64_t v67 = (v63 >> 3) + 1;
            uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            long long v64 = &v53[v68];
            uint64_t v65 = &v27[v68];
            int v69 = (long long *)(v27 + 16);
            long long v70 = &v60[v66 + 16];
            uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)long long v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_93:
              do
              {
                uint64_t v73 = *(void *)v65;
                v65 += 8;
                *(void *)long long v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          uint64_t v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          uint64_t v55 = (v28 - v29) >> 3;
          if (v55 >= -1) {
            unint64_t v56 = v55 + 1;
          }
          else {
            unint64_t v56 = v55 + 2;
          }
          uint64_t v57 = &v29[8 * (v56 >> 1)];
          uint64_t v53 = &v57[-(v29 - v27)];
          size_t v58 = v29 - v27;
          BOOL v37 = v29 == v27;
          uint64_t v29 = v57;
          if (!v37) {
            memmove(v53, v27, v58);
          }
          uint64_t v25 = v27;
        }
      }
      else
      {
        uint64_t v53 = v27;
      }
      uint64_t v54 = *(void *)(v18 - 8);
      v18 -= 8;
      *((void *)v53 - 1) = v54;
      int v51 = v53 - 8;
      uint64_t v27 = v51;
    }
    while (v18 != *(void *)(a1 + 8));
    goto LABEL_46;
  }
  *(void *)uint64_t v27 = v26;
  uint64_t v29 = v27 + 8;
  if (v18 != v19) {
    goto LABEL_52;
  }
LABEL_45:
  int v51 = v27;
LABEL_46:
  int v52 = *(char **)a1;
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v51;
  *(void *)(a1 + 16) = v29;
  *(void *)(a1 + 24) = v28;
  if (v52)
  {
    operator delete(v52);
  }
}

void sub_FC52D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_FC52F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_FC5308(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_FC5320(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_FC5338(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  unint64_t v5 = sub_F92618(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    unint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  uint64_t v7 = (char *)operator new(0x5F4uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 1524;
  if (a2)
  {
    uint64_t v8 = (char *)operator new(112 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[112 * v4];
  }
  return a1;
}

void sub_FC541C(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  unint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    unint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FC54A4@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v8 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 32) = *((_DWORD *)a1 + 8);
  long long v9 = (unsigned int *)sub_F061D8(a2, (unsigned int *)a1 + 3);
  *(_DWORD *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0x8000000080000000;
  *(_DWORD *)(a4 + 24) = 0x7FFFFFFF;
  __int16 v10 = *((_WORD *)a1 + 15);
  if (v10
    && (unint64_t v11 = *a1, (v12 = sub_F96DE8(a3, *a1, 1)) != 0)
    && (uint64_t v13 = &v12[-*(int *)v12], *(unsigned __int16 *)v13 >= 5u)
    && *((_WORD *)v13 + 2)
    && (uint64_t v14 = &v12[*((unsigned __int16 *)v13 + 2) + *(unsigned int *)&v12[*((unsigned __int16 *)v13 + 2)]],
        *(_DWORD *)v14 > HIDWORD(v11)))
  {
    unint64_t v15 = &v14[4 * HIDWORD(v11) + 4 + *(unsigned int *)&v14[4 * HIDWORD(v11) + 4]];
    int64_t v16 = &v15[-*(int *)v15];
    if (*(unsigned __int16 *)v16 >= 7u && (uint64_t v17 = *((unsigned __int16 *)v16 + 3)) != 0) {
      int v18 = v15[v17];
    }
    else {
      int v18 = 0;
    }
    if ((v18 & (1 << v10)) != 0) {
      __int16 v19 = *((_WORD *)a1 + 15);
    }
    else {
      __int16 v19 = 0;
    }
  }
  else
  {
    __int16 v19 = 0;
  }
  *(_WORD *)(a4 + 30) = v19;
  *(unsigned char *)(a4 + 28) = 0;
  *(_DWORD *)(a4 + 32) = 0;
  unint64_t v20 = *a1;
  uint64_t v21 = sub_F96DE8(a3, v20, 1);
  if (v21
    && (uint64_t v22 = &v21[-*(int *)v21], *(unsigned __int16 *)v22 >= 5u)
    && *((_WORD *)v22 + 2)
    && (uint64_t v23 = &v21[*((unsigned __int16 *)v22 + 2) + *(unsigned int *)&v21[*((unsigned __int16 *)v22 + 2)]],
        *(_DWORD *)v23 > HIDWORD(v20))
    && (unint64_t v24 = &v23[4 * HIDWORD(v20) + 4 + *(unsigned int *)&v23[4 * HIDWORD(v20) + 4]],
        uint64_t v25 = &v24[-*(int *)v24],
        *(unsigned __int16 *)v25 >= 5u)
    && (uint64_t v26 = *((unsigned __int16 *)v25 + 2)) != 0)
  {
    int v27 = *(_DWORD *)&v24[v26];
  }
  else
  {
    int v27 = 0;
  }
  int v29 = v27;
  uint64_t result = sub_F0657C((uint64_t)a2, *v9, &v29);
  *(_DWORD *)(a4 + 12) = result;
  return result;
}

void sub_FC5678(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  uint64_t v7 = sub_FC57C4(a1 + 11, a2);
  if (a1[15] == v7)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7510, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7510))
    {
      off_24F7500 = (int *)&unk_20F1630;
      *(void *)&byte_24F7508 = 0;
      __cxa_guard_release(&qword_24F7510);
    }
    ++a1[24];
    uint64_t v15 = *((void *)off_24F7500 + 1);
    *(void *)a3 = *(void *)off_24F7500;
    *(void *)(a3 + 8) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    char v14 = byte_24F7508;
  }
  else
  {
    ++a1[23];
    long long v8 = *(uint64_t **)(v7 + 40);
    if (v8 != a1)
    {
      long long v9 = (uint64_t *)v8[1];
      if (v9 != a1)
      {
        uint64_t v10 = *v8;
        *(void *)(v10 + 8) = v9;
        *(void *)v8[1] = v10;
        uint64_t v11 = *a1;
        *(void *)(v11 + 8) = v8;
        *long long v8 = v11;
        *a1 = (uint64_t)v8;
        v8[1] = (uint64_t)a1;
      }
    }
    uint64_t v13 = v8[7];
    uint64_t v12 = v8[8];
    *(void *)a3 = v13;
    *(void *)(a3 + 8) = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    char v14 = 1;
  }
  *(unsigned char *)(a3 + 16) = v14;

  std::mutex::unlock(v6);
}

uint64_t sub_FC57C4(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[3];
  if (v2 == a1[4]) {
    return a1[3];
  }
  unint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = (v4 + (v3 << 6) + (v3 >> 2) + 2654435769u) ^ v3;
  uint64_t v6 = *((unsigned __int16 *)a2 + 4);
  unint64_t v7 = (v6 + (v5 << 6) + (v5 >> 2) + 2654435769u) ^ v5;
  uint64_t v8 = *((unsigned __int16 *)a2 + 5);
  unint64_t v9 = (v8 + (v7 << 6) + (v7 >> 2) + 2654435769u) ^ v7;
  uint64_t v10 = a2[3];
  uint64_t v11 = (int)a2[4];
  unint64_t v12 = (v10 + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
  unint64_t v13 = (v11 + (v12 << 6) + (v12 >> 2) + 2654435769u) ^ v12;
  uint64_t v14 = (int)a2[5];
  uint64_t v15 = (int)a2[6];
  unint64_t v16 = (v14 + (v13 << 6) + (v13 >> 2) + 2654435769u) ^ v13;
  unint64_t v17 = (v15 + (v16 << 6) + (v16 >> 2) + 2654435769u) ^ v16;
  uint64_t v18 = *((unsigned __int8 *)a2 + 28);
  unint64_t v19 = (v18 + (v17 << 6) + (v17 >> 2) + 2654435769u) ^ v17;
  uint64_t v20 = *((unsigned __int16 *)a2 + 15);
  unint64_t v21 = (v20 + (v19 << 6) + (v19 >> 2) + 2654435769u) ^ v19;
  uint64_t v22 = a2[8];
  unint64_t v23 = a1[1] - *a1;
  unint64_t v24 = ((v22 + (v21 << 6) + (v21 >> 2) + 2654435769u) ^ v21) % v23;
  uint64_t v25 = v23 - 1;
  while (*(unsigned char *)(*a1 + v24) == 2)
  {
    uint64_t v26 = v2 + 48 * v24;
    if (*(_DWORD *)v26 == v3
      && *(_DWORD *)(v26 + 4) == v4
      && v6 == *(unsigned __int16 *)(v26 + 8)
      && v8 == *(unsigned __int16 *)(v26 + 10)
      && *(_DWORD *)(v26 + 12) == v10
      && *(_DWORD *)(v26 + 16) == v11
      && *(_DWORD *)(v26 + 20) == v14
      && *(_DWORD *)(v26 + 24) == v15
      && *(unsigned __int8 *)(v26 + 28) == v18
      && v20 == *(unsigned __int16 *)(v26 + 30)
      && *(_DWORD *)(v26 + 32) == v22)
    {
      return v26;
    }
LABEL_4:
    if (v24 == v25) {
      unint64_t v24 = 0;
    }
    else {
      ++v24;
    }
  }
  if (*(unsigned char *)(*a1 + v24)) {
    goto LABEL_4;
  }
  return a1[4];
}

char *sub_FC5980(char **a1, void *a2, long long *a3)
{
  unint64_t v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v14 = *a1;
    uint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 4);
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) > 0x249249249249249) {
      sub_2E00();
    }
    unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - (void)v14) >> 4);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x124924924924924) {
      unint64_t v18 = 0x249249249249249;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 > 0x249249249249249) {
        sub_188D718();
      }
      unint64_t v19 = (char *)operator new(112 * v18);
    }
    else
    {
      unint64_t v19 = 0;
    }
    long long v20 = a3[2];
    unint64_t v21 = &v19[112 * v15];
    *(_OWORD *)(v21 + 56) = a3[3];
    long long v22 = a3[5];
    *(_OWORD *)(v21 + 72) = a3[4];
    *(_OWORD *)(v21 + 88) = v22;
    long long v23 = a3[1];
    *(_OWORD *)(v21 + 8) = *a3;
    *(_OWORD *)(v21 + 24) = v23;
    *(void *)unint64_t v21 = *a2;
    *((void *)v21 + 13) = *((void *)a3 + 12);
    unint64_t v13 = v21 + 112;
    *(_OWORD *)(v21 + 40) = v20;
    if (v7 != v14)
    {
      do
      {
        long long v24 = *((_OWORD *)v7 - 7);
        long long v25 = *((_OWORD *)v7 - 5);
        *((_OWORD *)v21 - 6) = *((_OWORD *)v7 - 6);
        *((_OWORD *)v21 - 5) = v25;
        *((_OWORD *)v21 - 7) = v24;
        long long v26 = *((_OWORD *)v7 - 4);
        long long v27 = *((_OWORD *)v7 - 3);
        long long v28 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v21 - 2) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v21 - 1) = v28;
        *((_OWORD *)v21 - 4) = v26;
        *((_OWORD *)v21 - 3) = v27;
        v21 -= 112;
        v7 -= 112;
      }
      while (v7 != v14);
      unint64_t v7 = *a1;
    }
    *a1 = v21;
    a1[1] = v13;
    a1[2] = &v19[112 * v18];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)unint64_t v7 = *a2;
    long long v8 = *a3;
    long long v9 = a3[1];
    *(_OWORD *)(v7 + 40) = a3[2];
    *(_OWORD *)(v7 + 24) = v9;
    *(_OWORD *)(v7 + 8) = v8;
    long long v10 = a3[3];
    long long v11 = a3[4];
    long long v12 = a3[5];
    *((void *)v7 + 13) = *((void *)a3 + 12);
    *(_OWORD *)(v7 + 88) = v12;
    *(_OWORD *)(v7 + 72) = v11;
    *(_OWORD *)(v7 + 56) = v10;
    unint64_t v13 = v7 + 112;
  }
  a1[1] = v13;
  return v13 - 112;
}

void sub_FC5B44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243F2F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_FC5B64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243F2F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_FC5BB8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t sub_FC5BD4(uint64_t a1, unsigned int *a2, uint64_t *a3, unint64_t a4)
{
  long long v8 = (std::mutex *)(a1 + 208);
  std::mutex::lock((std::mutex *)(a1 + 208));
  sub_FC63D8(*a3, &v12);
  uint64_t v9 = sub_FC5CD4((void **)a1, a2, &v12, a4, 0);
  long long v10 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  std::mutex::unlock(v8);
  return v9;
}

void sub_FC5CA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_FC5CC0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FC5CD4(void **a1, unsigned int *a2, uint64_t *a3, unint64_t a4, int a5)
{
  unint64_t v53 = a4;
  unint64_t v5 = (unint64_t *)(a1 + 21);
  if ((unint64_t)a1[21] < a4)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v45);
      unint64_t v6 = sub_188FC78(&v45, (uint64_t)"LRUCache: item is too large (", 29);
      unint64_t v7 = (void *)sub_38EC58((uint64_t)v6, &v53);
      long long v8 = sub_188FC78(v7, (uint64_t)" > ", 3);
      uint64_t v9 = (void *)sub_38EC58((uint64_t)v8, v5);
      sub_188FC78(v9, (uint64_t)")", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (SHIBYTE(v44) < 0) {
        operator delete(__p);
      }
      if (v52 < 0) {
        operator delete(v51);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return 0;
  }
  long long __p = &__p;
  p_p = &__p;
  uint64_t v44 = 0;
  unint64_t v16 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  uint64_t v17 = sub_FC57C4(a1 + 11, a2);
  if (a1[15] != (void *)v17)
  {
    if (!a5)
    {
      uint64_t v10 = 0;
      std::mutex::unlock(v16);
      if (!v44) {
        return v10;
      }
      goto LABEL_26;
    }
    unint64_t v18 = *(void ***)(v17 + 40);
    a1[20] = (void *)((unsigned char *)a1[20] - (unsigned char *)v18[9]);
    sub_397ACC((int64x2_t *)(a1 + 11), (unsigned int *)v18 + 4);
    if (v18 != &__p)
    {
      unint64_t v19 = (void **)v18[1];
      if (v19 != &__p)
      {
        long long v20 = *v18;
        v20[1] = v19;
        *(void *)v18[1] = v20;
        unint64_t v21 = __p;
        *((void *)__p + 1) = v18;
        *unint64_t v18 = v21;
        v18[1] = &__p;
        a1[2] = (char *)a1[2] - 1;
        long long __p = v18;
        ++v44;
      }
    }
  }
  a1[22] = (char *)a1[22] + 1;
  long long v22 = (void **)a1[1];
  if (v22 != a1)
  {
    unint64_t v23 = (unint64_t)a1[21] - a4;
    do
    {
      unint64_t v24 = (unint64_t)a1[20];
      if (v24 <= v23) {
        break;
      }
      a1[20] = (void *)(v24 - (void)v22[9]);
      sub_397ACC((int64x2_t *)(a1 + 11), (unsigned int *)v22 + 4);
      if (v22 != &__p)
      {
        long long v25 = (void **)v22[1];
        if (v25 != &__p)
        {
          long long v26 = *v22;
          v26[1] = v25;
          *(void *)v22[1] = v26;
          long long v27 = __p;
          *((void *)__p + 1) = v22;
          *long long v22 = v27;
          v22[1] = &__p;
          a1[2] = (char *)a1[2] - 1;
          long long __p = v22;
          ++v44;
        }
      }
      long long v22 = (void **)a1[1];
    }
    while (v22 != a1);
  }
  long long v28 = *((_OWORD *)a2 + 1);
  long long v45 = *(_OWORD *)a2;
  long long v46 = v28;
  unsigned int v47 = a2[8];
  uint64_t v29 = *a3;
  uint64_t v30 = a3[1];
  uint64_t v48 = *a3;
  uint64_t v49 = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v31 = v53;
  unint64_t v50 = v53;
  unint64_t v32 = operator new(0x50uLL);
  long long v33 = v46;
  v32[1] = v45;
  v32[2] = v33;
  *((_DWORD *)v32 + 12) = v47;
  *((void *)v32 + 7) = v29;
  *((void *)v32 + 8) = v30;
  *((void *)v32 + 9) = v31;
  uint64_t v34 = *a1;
  v34[1] = v32;
  *a1 = v32;
  *(void *)unint64_t v32 = v34;
  *((void *)v32 + 1) = a1;
  a1[2] = (char *)a1[2] + 1;
  unsigned int v41 = v32;
  sub_FC61F0((int64x2_t *)(a1 + 11), a2, &v41);
  a1[20] = (char *)a1[20] + v31;
  uint64_t v10 = 1;
  std::mutex::unlock(v16);
  if (v44)
  {
LABEL_26:
    uint64_t v35 = (void **)__p;
    uint64_t v36 = p_p;
    BOOL v37 = *p_p;
    v37[1] = *((void *)__p + 1);
    *v35[1] = v37;
    uint64_t v44 = 0;
    if (v36 != &__p)
    {
      do
      {
        int64_t v38 = (void **)v36[1];
        unint64_t v39 = (std::__shared_weak_count *)v36[8];
        if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
        operator delete(v36);
        uint64_t v36 = v38;
      }
      while (v38 != &__p);
    }
  }
  return v10;
}

void sub_FC6148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::mutex::unlock(v16);
  sub_37F1F0((uint64_t *)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_FC61F0(int64x2_t *a1, unsigned int *a2, void *a3)
{
  uint64_t v6 = sub_FC57C4(a1, a2);
  uint64_t v7 = v6;
  uint64_t v8 = a1[2].i64[0];
  if (v8 == v6)
  {
    if (2 * a1[4].i64[0] + 2 > 0xAAAAAAAAAAAAAAABLL * ((v6 - a1[1].i64[1]) >> 4)) {
      sub_397CCC(a1);
    }
    unint64_t v9 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) + 2654435769u) ^ *a2;
    unint64_t v10 = (*((unsigned __int16 *)a2 + 4) + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
    unint64_t v11 = (*((unsigned __int16 *)a2 + 5) + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10;
    unint64_t v12 = (a2[3] + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
    unint64_t v13 = ((int)a2[4] + (v12 << 6) + (v12 >> 2) + 2654435769u) ^ v12;
    unint64_t v14 = ((int)a2[5] + (v13 << 6) + (v13 >> 2) + 2654435769u) ^ v13;
    unint64_t v15 = ((int)a2[6] + (v14 << 6) + (v14 >> 2) + 2654435769u) ^ v14;
    unint64_t v16 = (*((unsigned __int8 *)a2 + 28) + (v15 << 6) + (v15 >> 2) + 2654435769u) ^ v15;
    unint64_t v17 = (*((unsigned __int16 *)a2 + 15) + (v16 << 6) + (v16 >> 2) + 2654435769u) ^ v16;
    unint64_t v18 = (a2[8] + (v17 << 6) + (v17 >> 2) + 2654435769u) ^ v17;
    uint64_t v19 = a1->i64[0];
    unint64_t v20 = v18 % (a1->i64[1] - a1->i64[0]);
    int v21 = *(unsigned __int8 *)(a1->i64[0] + v20);
    if (*(unsigned char *)(a1->i64[0] + v20))
    {
      while (v21 != 1)
      {
        if (v20 == 0xAAAAAAAAAAAAAAABLL * ((a1[2].i64[0] - a1[1].i64[1]) >> 4) - 1) {
          unint64_t v20 = 0;
        }
        else {
          ++v20;
        }
        int v21 = *(unsigned __int8 *)(v19 + v20);
        if (!*(unsigned char *)(v19 + v20)) {
          goto LABEL_10;
        }
      }
    }
    else
    {
LABEL_10:
      ++a1[4].i64[0];
    }
    ++a1[3].i64[1];
    *(unsigned char *)(v19 + v20) = 2;
    uint64_t v22 = 48 * v20;
    uint64_t v23 = a1[1].i64[1] + v22;
    long long v24 = *(_OWORD *)a2;
    long long v25 = *((_OWORD *)a2 + 1);
    *(_DWORD *)(v23 + 32) = a2[8];
    *(_OWORD *)uint64_t v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    *(void *)(a1[1].i64[1] + v22 + 40) = *a3;
  }
  return v8 == v7;
}

void *sub_FC63D8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t result = operator new(0x30uLL);
  unint64_t v5 = result;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  uint64_t v6 = result + 3;
  *uint64_t result = off_243F2F0;
  result[4] = 0;
  result[5] = 0;
  uint64_t v7 = *(const void **)a1;
  int64_t v8 = *(void *)(a1 + 8) - *(void *)a1;
  if (v8)
  {
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * (v8 >> 3)) >= 0x2E8BA2E8BA2E8BBLL) {
      sub_2E00();
    }
    unint64_t v9 = (char *)operator new(v8);
    v5[3] = v9;
    v5[4] = v9;
    unint64_t v10 = &v9[8 * (v8 >> 3)];
    v5[5] = v10;
    uint64_t result = memcpy(v9, v7, v8);
    v5[4] = v10;
  }
  *a2 = v6;
  a2[1] = v5;
  return result;
}

void sub_FC64B8(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void *sub_FC64E0(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  unint64_t v5 = sub_F92618(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    uint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  uint64_t v7 = (char *)operator new(0x5F4uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 1524;
  if (a2)
  {
    int64_t v8 = (char *)operator new(120 * v4);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[120 * v4];
  }
  return a1;
}

void sub_FC65C4(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  unint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    uint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FC664C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  long long v10 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 16) = v10;
  *(_DWORD *)(a5 + 32) = *((_DWORD *)a1 + 8);
  char v11 = (unsigned int *)sub_F08F70(a2, (unsigned int *)a1 + 3);
  BOOL v12 = *((unsigned char *)a1 + 28) != 2 || *((unsigned char *)v11 + 176) == 0;
  if (v12
    || (int v13 = *((_DWORD *)a1 + 8), v41 = *a1, v42 = v13, v43 = 0, sub_FA9AB8((uint64_t)a4, (unsigned int *)&v41) == -1))
  {
    int v13 = 0;
    *(_DWORD *)(a5 + 32) = 0;
    if (*((unsigned char *)v11 + 176)) {
      goto LABEL_7;
    }
LABEL_14:
    int v14 = 0x7FFFFFFF;
    goto LABEL_15;
  }
  *(_DWORD *)(a5 + 32) = v13;
  if (!*((unsigned char *)v11 + 176)) {
    goto LABEL_14;
  }
LABEL_7:
  int v14 = 0x7FFFFFFF;
  if (*((unsigned char *)a1 + 28) == 2 && *((_DWORD *)a1 + 4) != 0x7FFFFFFF && a4[7] != a4[6])
  {
    uint64_t v41 = *a1;
    int v42 = v13;
    char v43 = 0;
    uint64_t v15 = sub_FA9AB8((uint64_t)a4, (unsigned int *)&v41);
    if (v15 != -1 && v15 != a4[8]) {
      int v14 = *(_DWORD *)(a4[12] + 20 * v15 + 16);
    }
  }
LABEL_15:
  *(_DWORD *)(a5 + 16) = v14;
  if (*((unsigned char *)v11 + 177))
  {
    int v16 = 0x7FFFFFFF;
    if (*((unsigned char *)a1 + 28) == 2 && *((_DWORD *)a1 + 5) != 0x7FFFFFFF && a4[7] != a4[6])
    {
      uint64_t v41 = *a1;
      int v42 = 0;
      char v43 = 1;
      uint64_t v17 = sub_FA9AB8((uint64_t)a4, (unsigned int *)&v41);
      if (v17 != -1 && v17 != a4[8]) {
        int v16 = *(_DWORD *)(a4[12] + 20 * v17 + 16);
      }
    }
  }
  else
  {
    int v16 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a5 + 20) = v16;
  if (v11[280] || v11[281] || *((void *)v11 + 141))
  {
    int v18 = 0x7FFFFFFF;
    if (*((unsigned char *)a1 + 28) == 2 && *((_DWORD *)a1 + 6) != 0x7FFFFFFF && a4[7] != a4[6])
    {
      uint64_t v41 = *a1;
      int v42 = 0;
      char v43 = 2;
      uint64_t v19 = sub_FA9AB8((uint64_t)a4, (unsigned int *)&v41);
      if (v19 != -1 && v19 != a4[8]) {
        int v18 = *(_DWORD *)(a4[12] + 20 * v19 + 16);
      }
    }
  }
  else
  {
    int v18 = 0x7FFFFFFF;
  }
  *(_DWORD *)(a5 + 24) = v18;
  __int16 v20 = *((_WORD *)a1 + 15);
  if (v20
    && (unint64_t v21 = *a1, (v22 = sub_F9CC14(a3, *a1, 1)) != 0)
    && (uint64_t v23 = &v22[-*(int *)v22], *(unsigned __int16 *)v23 >= 5u)
    && *((_WORD *)v23 + 2)
    && (long long v24 = &v22[*((unsigned __int16 *)v23 + 2) + *(unsigned int *)&v22[*((unsigned __int16 *)v23 + 2)]],
        *(_DWORD *)v24 > HIDWORD(v21)))
  {
    long long v25 = &v24[4 * HIDWORD(v21) + 4 + *(unsigned int *)&v24[4 * HIDWORD(v21) + 4]];
    long long v26 = &v25[-*(int *)v25];
    if (*(unsigned __int16 *)v26 >= 7u && (uint64_t v27 = *((unsigned __int16 *)v26 + 3)) != 0) {
      int v28 = v25[v27];
    }
    else {
      int v28 = 0;
    }
    if ((v28 & (1 << v20)) != 0) {
      __int16 v29 = *((_WORD *)a1 + 15);
    }
    else {
      __int16 v29 = 0;
    }
  }
  else
  {
    __int16 v29 = 0;
  }
  *(_WORD *)(a5 + 30) = v29;
  BOOL v30 = v16 == 0x7FFFFFFF && v14 == 0x7FFFFFFF;
  char v31 = 2 * (v18 != 0x7FFFFFFF);
  if (!v30) {
    char v31 = 2;
  }
  *(unsigned char *)(a5 + 28) = v31;
  if (v14 == 0x7FFFFFFF) {
    *(_DWORD *)(a5 + 32) = 0;
  }
  unint64_t v32 = *a1;
  long long v33 = sub_F9CC14(a3, v32, 1);
  if (v33
    && (uint64_t v34 = &v33[-*(int *)v33], *(unsigned __int16 *)v34 >= 5u)
    && *((_WORD *)v34 + 2)
    && (uint64_t v35 = &v33[*((unsigned __int16 *)v34 + 2) + *(unsigned int *)&v33[*((unsigned __int16 *)v34 + 2)]],
        *(_DWORD *)v35 > HIDWORD(v32))
    && (uint64_t v36 = &v35[4 * HIDWORD(v32) + 4 + *(unsigned int *)&v35[4 * HIDWORD(v32) + 4]],
        BOOL v37 = &v36[-*(int *)v36],
        *(unsigned __int16 *)v37 >= 5u)
    && (uint64_t v38 = *((unsigned __int16 *)v37 + 2)) != 0)
  {
    unsigned int v39 = *(_DWORD *)&v36[v38] & 0xFFDF9FFF;
  }
  else
  {
    unsigned int v39 = 0;
  }
  LODWORD(v41) = ((v14 != 0x7FFFFFFF) << 13) | ((v16 != 0x7FFFFFFF) << 14) | ((v18 != 0x7FFFFFFF) << 21) | v39;
  uint64_t result = sub_F09314((uint64_t)a2, *v11, &v41);
  *(_DWORD *)(a5 + 12) = result;
  return result;
}

void sub_FC6A54(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  uint64_t v7 = sub_FC57C4(a1 + 11, a2);
  if (a1[15] == v7)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7528, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7528))
    {
      off_24F7518 = (int *)&unk_20F16D8;
      *(void *)&byte_24F7520 = 0;
      __cxa_guard_release(&qword_24F7528);
    }
    ++a1[24];
    uint64_t v15 = *((void *)off_24F7518 + 1);
    *(void *)a3 = *(void *)off_24F7518;
    *(void *)(a3 + 8) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    char v14 = byte_24F7520;
  }
  else
  {
    ++a1[23];
    int64_t v8 = *(uint64_t **)(v7 + 40);
    if (v8 != a1)
    {
      unint64_t v9 = (uint64_t *)v8[1];
      if (v9 != a1)
      {
        uint64_t v10 = *v8;
        *(void *)(v10 + 8) = v9;
        *(void *)v8[1] = v10;
        uint64_t v11 = *a1;
        *(void *)(v11 + 8) = v8;
        *int64_t v8 = v11;
        *a1 = (uint64_t)v8;
        v8[1] = (uint64_t)a1;
      }
    }
    uint64_t v13 = v8[7];
    uint64_t v12 = v8[8];
    *(void *)a3 = v13;
    *(void *)(a3 + 8) = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    char v14 = 1;
  }
  *(unsigned char *)(a3 + 16) = v14;

  std::mutex::unlock(v6);
}

char *sub_FC6BA0(char **a1, void *a2, _OWORD *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    char v14 = *a1;
    unint64_t v15 = 0xEEEEEEEEEEEEEEEFLL * ((v7 - *a1) >> 3);
    unint64_t v16 = v15 + 1;
    if (v15 + 1 > 0x222222222222222) {
      sub_2E00();
    }
    unint64_t v17 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6 - (void)v14) >> 3);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0x111111111111111) {
      unint64_t v18 = 0x222222222222222;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 > 0x222222222222222) {
        sub_188D718();
      }
      uint64_t v19 = (char *)operator new(120 * v18);
    }
    else
    {
      uint64_t v19 = 0;
    }
    long long v20 = a3[2];
    unint64_t v21 = &v19[120 * v15];
    *(_OWORD *)(v21 + 56) = a3[3];
    long long v22 = a3[5];
    *(_OWORD *)(v21 + 72) = a3[4];
    *(_OWORD *)(v21 + 88) = v22;
    *(_OWORD *)(v21 + 104) = a3[6];
    long long v23 = a3[1];
    *(_OWORD *)(v21 + 8) = *a3;
    *(_OWORD *)(v21 + 24) = v23;
    *(void *)unint64_t v21 = *a2;
    uint64_t v13 = v21 + 120;
    *(_OWORD *)(v21 + 40) = v20;
    if (v7 != v14)
    {
      do
      {
        long long v24 = *(_OWORD *)(v7 - 120);
        long long v25 = *(_OWORD *)(v7 - 104);
        long long v26 = *(_OWORD *)(v7 - 88);
        *(_OWORD *)(v21 - 72) = *(_OWORD *)(v7 - 72);
        *(_OWORD *)(v21 - 88) = v26;
        *(_OWORD *)(v21 - 104) = v25;
        *(_OWORD *)(v21 - 120) = v24;
        long long v27 = *(_OWORD *)(v7 - 56);
        long long v28 = *(_OWORD *)(v7 - 40);
        long long v29 = *(_OWORD *)(v7 - 24);
        *((void *)v21 - 1) = *((void *)v7 - 1);
        *(_OWORD *)(v21 - 24) = v29;
        *(_OWORD *)(v21 - 40) = v28;
        *(_OWORD *)(v21 - 56) = v27;
        v21 -= 120;
        v7 -= 120;
      }
      while (v7 != v14);
      uint64_t v7 = *a1;
    }
    *a1 = v21;
    a1[1] = v13;
    a1[2] = &v19[120 * v18];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)uint64_t v7 = *a2;
    long long v8 = *a3;
    long long v9 = a3[1];
    *(_OWORD *)(v7 + 40) = a3[2];
    *(_OWORD *)(v7 + 24) = v9;
    *(_OWORD *)(v7 + 8) = v8;
    long long v10 = a3[3];
    long long v11 = a3[4];
    long long v12 = a3[5];
    *(_OWORD *)(v7 + 104) = a3[6];
    *(_OWORD *)(v7 + 88) = v12;
    *(_OWORD *)(v7 + 72) = v11;
    *(_OWORD *)(v7 + 56) = v10;
    uint64_t v13 = v7 + 120;
  }
  a1[1] = v13;
  return v13 - 120;
}

void sub_FC6D68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243F340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_FC6D88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243F340;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_FC6DDC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t sub_FC6DF8(uint64_t a1, unsigned int *a2, uint64_t *a3, unint64_t a4)
{
  long long v8 = (std::mutex *)(a1 + 208);
  std::mutex::lock((std::mutex *)(a1 + 208));
  sub_FC75FC(*a3, &v12);
  uint64_t v9 = sub_FC6EF8((void **)a1, a2, &v12, a4, 0);
  long long v10 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  std::mutex::unlock(v8);
  return v9;
}

void sub_FC6EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_FC6EE4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FC6EF8(void **a1, unsigned int *a2, uint64_t *a3, unint64_t a4, int a5)
{
  unint64_t v53 = a4;
  unint64_t v5 = (unint64_t *)(a1 + 21);
  if ((unint64_t)a1[21] < a4)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v45);
      unint64_t v6 = sub_188FC78(&v45, (uint64_t)"LRUCache: item is too large (", 29);
      uint64_t v7 = (void *)sub_38EC58((uint64_t)v6, &v53);
      long long v8 = sub_188FC78(v7, (uint64_t)" > ", 3);
      uint64_t v9 = (void *)sub_38EC58((uint64_t)v8, v5);
      sub_188FC78(v9, (uint64_t)")", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (SHIBYTE(v44) < 0) {
        operator delete(__p);
      }
      if (v52 < 0) {
        operator delete(v51);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return 0;
  }
  long long __p = &__p;
  p_p = &__p;
  uint64_t v44 = 0;
  unint64_t v16 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  uint64_t v17 = sub_FC57C4(a1 + 11, a2);
  if (a1[15] != (void *)v17)
  {
    if (!a5)
    {
      uint64_t v10 = 0;
      std::mutex::unlock(v16);
      if (!v44) {
        return v10;
      }
      goto LABEL_26;
    }
    unint64_t v18 = *(void ***)(v17 + 40);
    a1[20] = (void *)((unsigned char *)a1[20] - (unsigned char *)v18[9]);
    sub_37F2B8((int64x2_t *)(a1 + 11), (unsigned int *)v18 + 4);
    if (v18 != &__p)
    {
      uint64_t v19 = (void **)v18[1];
      if (v19 != &__p)
      {
        long long v20 = *v18;
        v20[1] = v19;
        *(void *)v18[1] = v20;
        unint64_t v21 = __p;
        *((void *)__p + 1) = v18;
        *unint64_t v18 = v21;
        v18[1] = &__p;
        a1[2] = (char *)a1[2] - 1;
        long long __p = v18;
        ++v44;
      }
    }
  }
  a1[22] = (char *)a1[22] + 1;
  long long v22 = (void **)a1[1];
  if (v22 != a1)
  {
    unint64_t v23 = (unint64_t)a1[21] - a4;
    do
    {
      unint64_t v24 = (unint64_t)a1[20];
      if (v24 <= v23) {
        break;
      }
      a1[20] = (void *)(v24 - (void)v22[9]);
      sub_37F2B8((int64x2_t *)(a1 + 11), (unsigned int *)v22 + 4);
      if (v22 != &__p)
      {
        long long v25 = (void **)v22[1];
        if (v25 != &__p)
        {
          long long v26 = *v22;
          v26[1] = v25;
          *(void *)v22[1] = v26;
          long long v27 = __p;
          *((void *)__p + 1) = v22;
          *long long v22 = v27;
          v22[1] = &__p;
          a1[2] = (char *)a1[2] - 1;
          long long __p = v22;
          ++v44;
        }
      }
      long long v22 = (void **)a1[1];
    }
    while (v22 != a1);
  }
  long long v28 = *((_OWORD *)a2 + 1);
  long long v45 = *(_OWORD *)a2;
  long long v46 = v28;
  unsigned int v47 = a2[8];
  uint64_t v29 = *a3;
  uint64_t v30 = a3[1];
  uint64_t v48 = *a3;
  uint64_t v49 = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v31 = v53;
  unint64_t v50 = v53;
  unint64_t v32 = operator new(0x50uLL);
  long long v33 = v46;
  v32[1] = v45;
  v32[2] = v33;
  *((_DWORD *)v32 + 12) = v47;
  *((void *)v32 + 7) = v29;
  *((void *)v32 + 8) = v30;
  *((void *)v32 + 9) = v31;
  uint64_t v34 = *a1;
  v34[1] = v32;
  *a1 = v32;
  *(void *)unint64_t v32 = v34;
  *((void *)v32 + 1) = a1;
  a1[2] = (char *)a1[2] + 1;
  uint64_t v41 = v32;
  sub_FC7414((int64x2_t *)(a1 + 11), a2, &v41);
  a1[20] = (char *)a1[20] + v31;
  uint64_t v10 = 1;
  std::mutex::unlock(v16);
  if (v44)
  {
LABEL_26:
    uint64_t v35 = (void **)__p;
    uint64_t v36 = p_p;
    BOOL v37 = *p_p;
    v37[1] = *((void *)__p + 1);
    *v35[1] = v37;
    uint64_t v44 = 0;
    if (v36 != &__p)
    {
      do
      {
        uint64_t v38 = (void **)v36[1];
        unsigned int v39 = (std::__shared_weak_count *)v36[8];
        if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
        operator delete(v36);
        uint64_t v36 = v38;
      }
      while (v38 != &__p);
    }
  }
  return v10;
}

void sub_FC736C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::mutex::unlock(v16);
  sub_37F1F0((uint64_t *)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_FC7414(int64x2_t *a1, unsigned int *a2, void *a3)
{
  uint64_t v6 = sub_FC57C4(a1, a2);
  uint64_t v7 = v6;
  uint64_t v8 = a1[2].i64[0];
  if (v8 == v6)
  {
    if (2 * a1[4].i64[0] + 2 > 0xAAAAAAAAAAAAAAABLL * ((v6 - a1[1].i64[1]) >> 4)) {
      sub_37F4B8(a1);
    }
    unint64_t v9 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) + 2654435769u) ^ *a2;
    unint64_t v10 = (*((unsigned __int16 *)a2 + 4) + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
    unint64_t v11 = (*((unsigned __int16 *)a2 + 5) + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10;
    unint64_t v12 = (a2[3] + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
    unint64_t v13 = ((int)a2[4] + (v12 << 6) + (v12 >> 2) + 2654435769u) ^ v12;
    unint64_t v14 = ((int)a2[5] + (v13 << 6) + (v13 >> 2) + 2654435769u) ^ v13;
    unint64_t v15 = ((int)a2[6] + (v14 << 6) + (v14 >> 2) + 2654435769u) ^ v14;
    unint64_t v16 = (*((unsigned __int8 *)a2 + 28) + (v15 << 6) + (v15 >> 2) + 2654435769u) ^ v15;
    unint64_t v17 = (*((unsigned __int16 *)a2 + 15) + (v16 << 6) + (v16 >> 2) + 2654435769u) ^ v16;
    unint64_t v18 = (a2[8] + (v17 << 6) + (v17 >> 2) + 2654435769u) ^ v17;
    uint64_t v19 = a1->i64[0];
    unint64_t v20 = v18 % (a1->i64[1] - a1->i64[0]);
    int v21 = *(unsigned __int8 *)(a1->i64[0] + v20);
    if (*(unsigned char *)(a1->i64[0] + v20))
    {
      while (v21 != 1)
      {
        if (v20 == 0xAAAAAAAAAAAAAAABLL * ((a1[2].i64[0] - a1[1].i64[1]) >> 4) - 1) {
          unint64_t v20 = 0;
        }
        else {
          ++v20;
        }
        int v21 = *(unsigned __int8 *)(v19 + v20);
        if (!*(unsigned char *)(v19 + v20)) {
          goto LABEL_10;
        }
      }
    }
    else
    {
LABEL_10:
      ++a1[4].i64[0];
    }
    ++a1[3].i64[1];
    *(unsigned char *)(v19 + v20) = 2;
    uint64_t v22 = 48 * v20;
    uint64_t v23 = a1[1].i64[1] + v22;
    long long v24 = *(_OWORD *)a2;
    long long v25 = *((_OWORD *)a2 + 1);
    *(_DWORD *)(v23 + 32) = a2[8];
    *(_OWORD *)uint64_t v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    *(void *)(a1[1].i64[1] + v22 + 40) = *a3;
  }
  return v8 == v7;
}

void *sub_FC75FC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t result = operator new(0x30uLL);
  unint64_t v5 = result;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  uint64_t v6 = result + 3;
  *uint64_t result = off_243F340;
  result[4] = 0;
  result[5] = 0;
  uint64_t v7 = *(const void **)a1;
  int64_t v8 = *(void *)(a1 + 8) - *(void *)a1;
  if (v8)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 5) >= 0x2AAAAAAAAAAAAABLL) {
      sub_2E00();
    }
    unint64_t v9 = (char *)operator new(v8);
    v5[3] = v9;
    v5[4] = v9;
    unint64_t v10 = &v9[32 * (v8 >> 5)];
    v5[5] = v10;
    uint64_t result = memcpy(v9, v7, v8);
    v5[4] = v10;
  }
  *a2 = v6;
  a2[1] = v5;
  return result;
}

void sub_FC76D0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void *sub_FC76F8(void *a1, unsigned int a2)
{
  uint64_t v4 = a2;
  v13[0] = a2;
  v13[1] = (unint64_t)&v12;
  v13[2] = (unint64_t)&v11;
  v13[3] = (unint64_t)&v10;
  unint64_t v5 = sub_F9DBDC(a1, v13);
  *((_DWORD *)v5 + 218) = 0;
  *(_OWORD *)(v5 + 105) = 0u;
  *(_OWORD *)(v5 + 107) = 0u;
  *(_OWORD *)(v5 + 103) = 0u;
  *((_OWORD *)v5 + 48) = 0u;
  *((_OWORD *)v5 + 49) = 0u;
  *((_OWORD *)v5 + 50) = 0u;
  *((_DWORD *)v5 + 204) = 0;
  if (a2)
  {
    uint64_t v6 = (char *)operator new(4 * v4);
    a1[106] = v6;
    a1[107] = v6;
    a1[108] = &v6[4 * v4];
  }
  uint64_t v7 = (char *)operator new(0x5F4uLL);
  a1[103] = v7;
  a1[104] = v7;
  a1[105] = v7 + 1524;
  if (a2)
  {
    int64_t v8 = (char *)operator new(v4 << 7);
    a1[96] = v8;
    a1[97] = v8;
    a1[98] = &v8[128 * v4];
  }
  return a1;
}

void sub_FC77D4(_Unwind_Exception *a1)
{
  sub_3310C(v2);
  uint64_t v4 = (void **)(v1 + 96);
  unint64_t v5 = (void *)v1[99];
  if (v5)
  {
    v1[100] = v5;
    operator delete(v5);
    uint64_t v6 = *v4;
    if (!*v4)
    {
LABEL_3:
      sub_328138((uint64_t)v1);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    uint64_t v6 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[97] = v6;
  operator delete(v6);
  sub_328138((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FC785C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v8 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 32) = *((_DWORD *)a1 + 8);
  unint64_t v9 = (unsigned int *)sub_F0BC4C(a2, (unsigned int *)a1 + 3);
  *(_DWORD *)(a4 + 32) = 0;
  *(void *)(a4 + 16) = 0x8000000080000000;
  *(_DWORD *)(a4 + 24) = 0x7FFFFFFF;
  __int16 v10 = *((_WORD *)a1 + 15);
  if (v10
    && (unint64_t v11 = *a1, (v12 = sub_FA08AC(a3, *a1, 1)) != 0)
    && (unint64_t v13 = &v12[-*(int *)v12], *(unsigned __int16 *)v13 >= 5u)
    && *((_WORD *)v13 + 2)
    && (unint64_t v14 = &v12[*((unsigned __int16 *)v13 + 2) + *(unsigned int *)&v12[*((unsigned __int16 *)v13 + 2)]],
        *(_DWORD *)v14 > HIDWORD(v11)))
  {
    unint64_t v15 = &v14[4 * HIDWORD(v11) + 4 + *(unsigned int *)&v14[4 * HIDWORD(v11) + 4]];
    unint64_t v16 = &v15[-*(int *)v15];
    if (*(unsigned __int16 *)v16 >= 7u && (uint64_t v17 = *((unsigned __int16 *)v16 + 3)) != 0) {
      int v18 = v15[v17];
    }
    else {
      int v18 = 0;
    }
    if ((v18 & (1 << v10)) != 0) {
      __int16 v19 = *((_WORD *)a1 + 15);
    }
    else {
      __int16 v19 = 0;
    }
  }
  else
  {
    __int16 v19 = 0;
  }
  *(_WORD *)(a4 + 30) = v19;
  *(unsigned char *)(a4 + 28) = 0;
  *(_DWORD *)(a4 + 32) = 0;
  unint64_t v20 = *a1;
  int v21 = sub_FA08AC(a3, v20, 1);
  if (v21
    && (uint64_t v22 = &v21[-*(int *)v21], *(unsigned __int16 *)v22 >= 5u)
    && *((_WORD *)v22 + 2)
    && (uint64_t v23 = &v21[*((unsigned __int16 *)v22 + 2) + *(unsigned int *)&v21[*((unsigned __int16 *)v22 + 2)]],
        *(_DWORD *)v23 > HIDWORD(v20))
    && (long long v24 = &v23[4 * HIDWORD(v20) + 4 + *(unsigned int *)&v23[4 * HIDWORD(v20) + 4]],
        long long v25 = &v24[-*(int *)v24],
        *(unsigned __int16 *)v25 >= 5u)
    && (uint64_t v26 = *((unsigned __int16 *)v25 + 2)) != 0)
  {
    int v27 = *(_DWORD *)&v24[v26];
  }
  else
  {
    int v27 = 0;
  }
  int v29 = v27;
  uint64_t result = sub_F0BFF0((uint64_t)a2, *v9, &v29);
  *(_DWORD *)(a4 + 12) = result;
  return result;
}

void sub_FC7A30(uint64_t *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  uint64_t v7 = sub_FC57C4(a1 + 11, a2);
  if (a1[15] == v7)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_24F7540, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_24F7540))
    {
      off_24F7530 = (int *)&unk_20F1788;
      *(void *)&byte_24F7538 = 0;
      __cxa_guard_release(&qword_24F7540);
    }
    ++a1[24];
    uint64_t v15 = *((void *)off_24F7530 + 1);
    *(void *)a3 = *(void *)off_24F7530;
    *(void *)(a3 + 8) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    char v14 = byte_24F7538;
  }
  else
  {
    ++a1[23];
    long long v8 = *(uint64_t **)(v7 + 40);
    if (v8 != a1)
    {
      unint64_t v9 = (uint64_t *)v8[1];
      if (v9 != a1)
      {
        uint64_t v10 = *v8;
        *(void *)(v10 + 8) = v9;
        *(void *)v8[1] = v10;
        uint64_t v11 = *a1;
        *(void *)(v11 + 8) = v8;
        *long long v8 = v11;
        *a1 = (uint64_t)v8;
        v8[1] = (uint64_t)a1;
      }
    }
    uint64_t v13 = v8[7];
    uint64_t v12 = v8[8];
    *(void *)a3 = v13;
    *(void *)(a3 + 8) = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    char v14 = 1;
  }
  *(unsigned char *)(a3 + 16) = v14;

  std::mutex::unlock(v6);
}

char *sub_FC7B7C(char **a1, void *a2, long long *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = (unint64_t)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v15 = *a1;
    uint64_t v16 = (v7 - *a1) >> 7;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 57) {
      sub_2E00();
    }
    uint64_t v18 = v6 - (void)v15;
    if (v18 >> 6 > v17) {
      unint64_t v17 = v18 >> 6;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 57) {
        sub_188D718();
      }
      unint64_t v20 = (char *)operator new(v19 << 7);
    }
    else
    {
      unint64_t v20 = 0;
    }
    long long v21 = a3[5];
    uint64_t v22 = &v20[128 * v16];
    *(_OWORD *)(v22 + 72) = a3[4];
    *(_OWORD *)(v22 + 88) = v21;
    *(_OWORD *)(v22 + 104) = a3[6];
    long long v23 = a3[1];
    *(_OWORD *)(v22 + 8) = *a3;
    *(_OWORD *)(v22 + 24) = v23;
    long long v24 = a3[3];
    *(_OWORD *)(v22 + 40) = a3[2];
    *(void *)uint64_t v22 = *a2;
    *((void *)v22 + 15) = *((void *)a3 + 14);
    char v14 = v22 + 128;
    *(_OWORD *)(v22 + 56) = v24;
    if (v7 != v15)
    {
      do
      {
        long long v25 = *((_OWORD *)v7 - 8);
        long long v26 = *((_OWORD *)v7 - 7);
        long long v27 = *((_OWORD *)v7 - 5);
        *((_OWORD *)v22 - 6) = *((_OWORD *)v7 - 6);
        *((_OWORD *)v22 - 5) = v27;
        *((_OWORD *)v22 - 8) = v25;
        *((_OWORD *)v22 - 7) = v26;
        long long v28 = *((_OWORD *)v7 - 4);
        long long v29 = *((_OWORD *)v7 - 3);
        long long v30 = *((_OWORD *)v7 - 1);
        *((_OWORD *)v22 - 2) = *((_OWORD *)v7 - 2);
        *((_OWORD *)v22 - 1) = v30;
        *((_OWORD *)v22 - 4) = v28;
        *((_OWORD *)v22 - 3) = v29;
        v22 -= 128;
        v7 -= 128;
      }
      while (v7 != v15);
      uint64_t v7 = *a1;
    }
    *a1 = v22;
    a1[1] = v14;
    a1[2] = &v20[128 * v19];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)uint64_t v7 = *a2;
    long long v8 = *a3;
    long long v9 = a3[1];
    long long v10 = a3[2];
    *(_OWORD *)(v7 + 56) = a3[3];
    *(_OWORD *)(v7 + 40) = v10;
    *(_OWORD *)(v7 + 24) = v9;
    *(_OWORD *)(v7 + 8) = v8;
    long long v11 = a3[4];
    long long v12 = a3[5];
    long long v13 = a3[6];
    *((void *)v7 + 15) = *((void *)a3 + 14);
    *(_OWORD *)(v7 + 104) = v13;
    *(_OWORD *)(v7 + 88) = v12;
    *(_OWORD *)(v7 + 72) = v11;
    char v14 = v7 + 128;
  }
  a1[1] = v14;
  return v14 - 128;
}

void sub_FC7D10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_243F390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_FC7D30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_243F390;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_FC7D84(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t sub_FC7DA0(uint64_t a1, unsigned int *a2, uint64_t *a3, unint64_t a4)
{
  long long v8 = (std::mutex *)(a1 + 208);
  std::mutex::lock((std::mutex *)(a1 + 208));
  sub_FC85A4(*a3, &v12);
  uint64_t v9 = sub_FC7EA0((void **)a1, a2, &v12, a4, 0);
  long long v10 = v13;
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  std::mutex::unlock(v8);
  return v9;
}

void sub_FC7E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_14A84((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_FC7E8C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FC7EA0(void **a1, unsigned int *a2, uint64_t *a3, unint64_t a4, int a5)
{
  unint64_t v53 = a4;
  unint64_t v5 = (unint64_t *)(a1 + 21);
  if ((unint64_t)a1[21] < a4)
  {
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)&v45);
      unint64_t v6 = sub_188FC78(&v45, (uint64_t)"LRUCache: item is too large (", 29);
      uint64_t v7 = (void *)sub_38EC58((uint64_t)v6, &v53);
      long long v8 = sub_188FC78(v7, (uint64_t)" > ", 3);
      uint64_t v9 = (void *)sub_38EC58((uint64_t)v8, v5);
      sub_188FC78(v9, (uint64_t)")", 1);
      std::stringbuf::str();
      sub_7246C((uint64_t *)&__p, 1u);
      if (SHIBYTE(v44) < 0) {
        operator delete(__p);
      }
      if (v52 < 0) {
        operator delete(v51);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    return 0;
  }
  long long __p = &__p;
  p_p = &__p;
  uint64_t v44 = 0;
  uint64_t v16 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  uint64_t v17 = sub_FC57C4(a1 + 11, a2);
  if (a1[15] != (void *)v17)
  {
    if (!a5)
    {
      uint64_t v10 = 0;
      std::mutex::unlock(v16);
      if (!v44) {
        return v10;
      }
      goto LABEL_26;
    }
    uint64_t v18 = *(void ***)(v17 + 40);
    a1[20] = (void *)((unsigned char *)a1[20] - (unsigned char *)v18[9]);
    sub_397300((int64x2_t *)(a1 + 11), (unsigned int *)v18 + 4);
    if (v18 != &__p)
    {
      unint64_t v19 = (void **)v18[1];
      if (v19 != &__p)
      {
        unint64_t v20 = *v18;
        v20[1] = v19;
        *(void *)v18[1] = v20;
        long long v21 = __p;
        *((void *)__p + 1) = v18;
        *uint64_t v18 = v21;
        v18[1] = &__p;
        a1[2] = (char *)a1[2] - 1;
        long long __p = v18;
        ++v44;
      }
    }
  }
  a1[22] = (char *)a1[22] + 1;
  uint64_t v22 = (void **)a1[1];
  if (v22 != a1)
  {
    unint64_t v23 = (unint64_t)a1[21] - a4;
    do
    {
      unint64_t v24 = (unint64_t)a1[20];
      if (v24 <= v23) {
        break;
      }
      a1[20] = (void *)(v24 - (void)v22[9]);
      sub_397300((int64x2_t *)(a1 + 11), (unsigned int *)v22 + 4);
      if (v22 != &__p)
      {
        long long v25 = (void **)v22[1];
        if (v25 != &__p)
        {
          long long v26 = *v22;
          v26[1] = v25;
          *(void *)v22[1] = v26;
          long long v27 = __p;
          *((void *)__p + 1) = v22;
          *uint64_t v22 = v27;
          v22[1] = &__p;
          a1[2] = (char *)a1[2] - 1;
          long long __p = v22;
          ++v44;
        }
      }
      uint64_t v22 = (void **)a1[1];
    }
    while (v22 != a1);
  }
  long long v28 = *((_OWORD *)a2 + 1);
  long long v45 = *(_OWORD *)a2;
  long long v46 = v28;
  unsigned int v47 = a2[8];
  uint64_t v29 = *a3;
  uint64_t v30 = a3[1];
  uint64_t v48 = *a3;
  uint64_t v49 = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v31 = v53;
  unint64_t v50 = v53;
  unint64_t v32 = operator new(0x50uLL);
  long long v33 = v46;
  v32[1] = v45;
  v32[2] = v33;
  *((_DWORD *)v32 + 12) = v47;
  *((void *)v32 + 7) = v29;
  *((void *)v32 + 8) = v30;
  *((void *)v32 + 9) = v31;
  uint64_t v34 = *a1;
  v34[1] = v32;
  *a1 = v32;
  *(void *)unint64_t v32 = v34;
  *((void *)v32 + 1) = a1;
  a1[2] = (char *)a1[2] + 1;
  uint64_t v41 = v32;
  sub_FC83BC((int64x2_t *)(a1 + 11), a2, &v41);
  a1[20] = (char *)a1[20] + v31;
  uint64_t v10 = 1;
  std::mutex::unlock(v16);
  if (v44)
  {
LABEL_26:
    uint64_t v35 = (void **)__p;
    uint64_t v36 = p_p;
    BOOL v37 = *p_p;
    v37[1] = *((void *)__p + 1);
    *v35[1] = v37;
    uint64_t v44 = 0;
    if (v36 != &__p)
    {
      do
      {
        uint64_t v38 = (void **)v36[1];
        unsigned int v39 = (std::__shared_weak_count *)v36[8];
        if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
        operator delete(v36);
        uint64_t v36 = v38;
      }
      while (v38 != &__p);
    }
  }
  return v10;
}

void sub_FC8314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::mutex::unlock(v16);
  sub_37F1F0((uint64_t *)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_FC83BC(int64x2_t *a1, unsigned int *a2, void *a3)
{
  uint64_t v6 = sub_FC57C4(a1, a2);
  uint64_t v7 = v6;
  uint64_t v8 = a1[2].i64[0];
  if (v8 == v6)
  {
    if (2 * a1[4].i64[0] + 2 > 0xAAAAAAAAAAAAAAABLL * ((v6 - a1[1].i64[1]) >> 4)) {
      sub_397500(a1);
    }
    unint64_t v9 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) + 2654435769u) ^ *a2;
    unint64_t v10 = (*((unsigned __int16 *)a2 + 4) + (v9 << 6) + (v9 >> 2) + 2654435769u) ^ v9;
    unint64_t v11 = (*((unsigned __int16 *)a2 + 5) + (v10 << 6) + (v10 >> 2) + 2654435769u) ^ v10;
    unint64_t v12 = (a2[3] + (v11 << 6) + (v11 >> 2) + 2654435769u) ^ v11;
    unint64_t v13 = ((int)a2[4] + (v12 << 6) + (v12 >> 2) + 2654435769u) ^ v12;
    unint64_t v14 = ((int)a2[5] + (v13 << 6) + (v13 >> 2) + 2654435769u) ^ v13;
    unint64_t v15 = ((int)a2[6] + (v14 << 6) + (v14 >> 2) + 2654435769u) ^ v14;
    unint64_t v16 = (*((unsigned __int8 *)a2 + 28) + (v15 << 6) + (v15 >> 2) + 2654435769u) ^ v15;
    unint64_t v17 = (*((unsigned __int16 *)a2 + 15) + (v16 << 6) + (v16 >> 2) + 2654435769u) ^ v16;
    unint64_t v18 = (a2[8] + (v17 << 6) + (v17 >> 2) + 2654435769u) ^ v17;
    uint64_t v19 = a1->i64[0];
    unint64_t v20 = v18 % (a1->i64[1] - a1->i64[0]);
    int v21 = *(unsigned __int8 *)(a1->i64[0] + v20);
    if (*(unsigned char *)(a1->i64[0] + v20))
    {
      while (v21 != 1)
      {
        if (v20 == 0xAAAAAAAAAAAAAAABLL * ((a1[2].i64[0] - a1[1].i64[1]) >> 4) - 1) {
          unint64_t v20 = 0;
        }
        else {
          ++v20;
        }
        int v21 = *(unsigned __int8 *)(v19 + v20);
        if (!*(unsigned char *)(v19 + v20)) {
          goto LABEL_10;
        }
      }
    }
    else
    {
LABEL_10:
      ++a1[4].i64[0];
    }
    ++a1[3].i64[1];
    *(unsigned char *)(v19 + v20) = 2;
    uint64_t v22 = 48 * v20;
    uint64_t v23 = a1[1].i64[1] + v22;
    long long v24 = *(_OWORD *)a2;
    long long v25 = *((_OWORD *)a2 + 1);
    *(_DWORD *)(v23 + 32) = a2[8];
    *(_OWORD *)uint64_t v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    *(void *)(a1[1].i64[1] + v22 + 40) = *a3;
  }
  return v8 == v7;
}

void *sub_FC85A4@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t result = operator new(0x30uLL);
  unint64_t v5 = result;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  uint64_t v6 = result + 3;
  *uint64_t result = off_243F390;
  result[4] = 0;
  result[5] = 0;
  uint64_t v7 = *(const void **)a1;
  int64_t v8 = *(void *)(a1 + 8) - *(void *)a1;
  if (v8)
  {
    if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (v8 >> 3)) >= 0x276276276276277) {
      sub_2E00();
    }
    unint64_t v9 = (char *)operator new(v8);
    v5[3] = v9;
    v5[4] = v9;
    unint64_t v10 = &v9[8 * (v8 >> 3)];
    v5[5] = v10;
    uint64_t result = memcpy(v9, v7, v8);
    v5[4] = v10;
  }
  *a2 = v6;
  a2[1] = v5;
  return result;
}

void sub_FC8684(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    v1[1].__shared_owners_ = (uint64_t)v4;
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_FC86AC()
{
  unk_25FD18F = 16641;
  word_25FD178 = 65;
  byte_25FD1A7 = 1;
  byte_25FD191 = 0;
}

uint64_t sub_FC86D4(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = sub_3FD4E4(*a2, (void *)(a1 + 24), 0);
  unint64_t v5 = sub_3FD4E4(*a2, (void *)(a1 + 32), 1);
  if (v4 == -1 && HIDWORD(v4) == -1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned int v7 = v5;
  unint64_t v8 = HIDWORD(v5);
  if ((HIDWORD(v5) & v5) == 0xFFFFFFFF) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  long double v9 = exp(3.14159265 - (double)HIDWORD(v4) * 6.28318531 / 4294967300.0);
  long double v10 = atan((v9 - 1.0 / v9) * 0.5) * 57.2957795 * 0.0174532925;
  v11.i64[0] = v4;
  v11.i64[1] = v7;
  long double v12 = exp(3.14159265 - (double)v8 * 6.28318531 / 4294967300.0);
  long double v13 = atan((v12 - 1.0 / v12) * 0.5) * 57.2957795 * 0.0174532925;
  float64x2_t v14 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v11), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v26 = vsubq_f64(v14, (float64x2_t)vdupq_laneq_s64((int64x2_t)v14, 1)).f64[0];
  long double v15 = sin((v10 - v13) * 0.5);
  long double v16 = v15 * v15;
  double v17 = cos(v10);
  long double v18 = v17 * cos(v13);
  long double v19 = sin(0.5 * v26);
  long double v20 = atan2(sqrt(v19 * v19 * v18 + v16), sqrt(1.0 - (v19 * v19 * v18 + v16)));
  double v21 = (v20 + v20) * 6372797.56 * 100.0;
  if (v21 >= 0.0)
  {
    double v22 = v21;
    if (v21 >= 4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v23 = (uint64_t)(v21 + v21) + 1;
  }
  else
  {
    double v22 = v21;
    if (v21 <= -4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v23 = (uint64_t)(v21 + v21);
    if (v23 >= 1) {
      --v23;
    }
  }
  double v22 = (double)(v23 >> 1);
LABEL_15:
  if (v22 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v21 >= 0.0)
  {
    if (v21 < 4.50359963e15)
    {
      uint64_t v25 = (uint64_t)(v21 + v21) + 1;
      return (uint64_t)(double)(v25 >> 1);
    }
  }
  else if (v21 > -4.50359963e15)
  {
    uint64_t v25 = (uint64_t)(v21 + v21);
    if (v25 >= 1) {
      --v25;
    }
    return (uint64_t)(double)(v25 >> 1);
  }
  return (uint64_t)v21;
}

uint64_t sub_FC8998(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = sub_3FD4E4(*a2, (void *)(a1 + 24), 0);
  unsigned int v5 = *(_DWORD *)(a1 + 68);
  unsigned int v4 = *(_DWORD *)(a1 + 72);
  if (v5 == -1 && v4 == -1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned int v7 = v3;
  unint64_t v8 = HIDWORD(v3);
  if ((HIDWORD(v3) & v3) == 0xFFFFFFFF) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  long double v9 = exp(3.14159265 - (double)v4 * 6.28318531 / 4294967300.0);
  long double v10 = atan((v9 - 1.0 / v9) * 0.5) * 57.2957795 * 0.0174532925;
  v11.i64[0] = v5;
  v11.i64[1] = v7;
  long double v12 = exp(3.14159265 - (double)v8 * 6.28318531 / 4294967300.0);
  long double v13 = atan((v12 - 1.0 / v12) * 0.5) * 57.2957795 * 0.0174532925;
  float64x2_t v14 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v11), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v26 = vsubq_f64(v14, (float64x2_t)vdupq_laneq_s64((int64x2_t)v14, 1)).f64[0];
  long double v15 = sin((v10 - v13) * 0.5);
  long double v16 = v15 * v15;
  double v17 = cos(v10);
  long double v18 = v17 * cos(v13);
  long double v19 = sin(0.5 * v26);
  long double v20 = atan2(sqrt(v19 * v19 * v18 + v16), sqrt(1.0 - (v19 * v19 * v18 + v16)));
  double v21 = (v20 + v20) * 6372797.56 * 100.0;
  if (v21 >= 0.0)
  {
    double v22 = v21;
    if (v21 >= 4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v23 = (uint64_t)(v21 + v21) + 1;
  }
  else
  {
    double v22 = v21;
    if (v21 <= -4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v23 = (uint64_t)(v21 + v21);
    if (v23 >= 1) {
      --v23;
    }
  }
  double v22 = (double)(v23 >> 1);
LABEL_15:
  if (v22 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v21 >= 0.0)
  {
    if (v21 < 4.50359963e15)
    {
      uint64_t v25 = (uint64_t)(v21 + v21) + 1;
      return (uint64_t)(double)(v25 >> 1);
    }
  }
  else if (v21 > -4.50359963e15)
  {
    uint64_t v25 = (uint64_t)(v21 + v21);
    if (v25 >= 1) {
      --v25;
    }
    return (uint64_t)(double)(v25 >> 1);
  }
  return (uint64_t)v21;
}

uint64_t sub_FC8C48(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v1 = *(unsigned __int8 *)(a1 + 23);
    if (v1 != 4)
    {
      if (v1 != 7) {
        goto LABEL_29;
      }
      if (*(_DWORD *)a1 != 1818584418 || *(_DWORD *)(a1 + 3) != 1701734764)
      {
LABEL_21:
        unsigned int v5 = (_DWORD *)a1;
        if (v1 != 4) {
          goto LABEL_29;
        }
        goto LABEL_22;
      }
      return 2;
    }
    if (*(_DWORD *)a1 != 1701669236)
    {
      if (*(_DWORD *)a1 != 1953722211) {
        goto LABEL_21;
      }
      return 0;
    }
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 != 4)
  {
LABEL_11:
    if (v3 == 7)
    {
      if (**(_DWORD **)a1 == 1818584418 && *(_DWORD *)(*(void *)a1 + 3) == 1701734764) {
        return 2;
      }
      uint64_t v3 = *(void *)(a1 + 8);
    }
    if (v3 != 4) {
      goto LABEL_29;
    }
    unsigned int v5 = *(_DWORD **)a1;
LABEL_22:
    if (*v5 == 1701736302) {
      return 3;
    }
LABEL_29:
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    unint64_t v8 = std::string::append(&v11, "\" provided");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v8->__r_.__value_.__r.__words[2];
    long long v12 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    long double v10 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  if (**(_DWORD **)a1 != 1953722211)
  {
    if (**(_DWORD **)a1 == 1701669236) {
      return 1;
    }
    goto LABEL_11;
  }
  return 0;
}

void sub_FC8E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_FC8E74(uint64_t a1, void *a2)
{
  HIBYTE(v61[2]) = 17;
  strcpy((char *)v61, "sort_by_path_cost");
  unsigned int v4 = sub_58070(a2, (uint64_t)v61);
  if (v4)
  {
    BOOL v5 = *((_DWORD *)v4 + 12) == 4;
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  BOOL v5 = 0;
  if (SHIBYTE(v61[2]) < 0) {
LABEL_3:
  }
    operator delete(v61[0]);
LABEL_4:
  *(unsigned char *)a1 = v5;
  HIBYTE(v61[2]) = 14;
  strcpy((char *)v61, "add_debug_info");
  uint64_t v6 = sub_58070(a2, (uint64_t)v61);
  if (v6)
  {
    BOOL v7 = *((_DWORD *)v6 + 12) == 4;
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  BOOL v7 = 0;
  if (SHIBYTE(v61[2]) < 0) {
LABEL_6:
  }
    operator delete(v61[0]);
LABEL_7:
  *(_OWORD *)(a1 + 8) = 0u;
  *(unsigned char *)(a1 + 1) = v7;
  *(_OWORD *)(a1 + 56) = 0u;
  unint64_t v56 = (void *)(a1 + 56);
  uint64_t v57 = (void *)a1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  HIBYTE(v61[2]) = 21;
  *(void *)(a1 + 72) = 0;
  strcpy((char *)v61, "max_num_scanned_nodes");
  if (!sub_31AC04(a2, (uint64_t)v61))
  {
    int v8 = -1;
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
  char v60 = 21;
  strcpy(__p, "max_num_scanned_nodes");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if ((v60 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v61[2]) < 0) {
LABEL_33:
  }
    operator delete(v61[0]);
LABEL_10:
  *(_DWORD *)(a1 + 80) = v8;
  HIBYTE(v61[2]) = 17;
  strcpy((char *)v61, "max_num_via_nodes");
  if (!sub_31AC04(a2, (uint64_t)v61))
  {
    int v9 = -1;
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
  char v60 = 17;
  strcpy(__p, "max_num_via_nodes");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if ((v60 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v61[2]) < 0) {
LABEL_35:
  }
    operator delete(v61[0]);
LABEL_13:
  *(_DWORD *)(a1 + 84) = v9;
  HIBYTE(v61[2]) = 17;
  strcpy((char *)v61, "min_partial_level");
  *(_DWORD *)(a1 + 88) = sub_FC9C0C(a2, (uint64_t)v61);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  HIBYTE(v61[2]) = 18;
  strcpy((char *)v61, "max_stretch_factor");
  double v10 = sub_5C7E8(a2, (uint64_t)v61);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  *(double *)(a1 + 96) = v10;
  HIBYTE(v61[2]) = 18;
  strcpy((char *)v61, "check_cost_stretch");
  BOOL v11 = sub_29D62C(a2, (uint64_t)v61);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  *(unsigned char *)(a1 + 104) = v11;
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B91C0;
  strcpy(v61[0], "max_local_stretch_factor");
  double v12 = sub_5C7E8(a2, (uint64_t)v61);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  *(double *)(a1 + 112) = v12;
  v61[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v61[1] = xmmword_20B93A0;
  strcpy(v61[0], "use_full_path_for_plateau_threshold");
  BOOL v13 = sub_29D62C(a2, (uint64_t)v61);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  *(unsigned char *)(a1 + 120) = v13;
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B91C0;
  strcpy(v61[0], "local_stretch_check_mode");
  uint64_t v14 = sub_561B0(a2, (uint64_t)v61);
  int v15 = sub_FC8C48(v14);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 124) = v15;
  uint64_t v53 = a1 + 152;
  uint64_t v54 = (char **)(a1 + 128);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v61[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v61[1] = xmmword_20B9250;
  strcpy(v61[0], "max_exploration_factors");
  sub_FD6E68(a2, (uint64_t)v61, a1 + 8);
  if (SHIBYTE(v61[2]) < 0)
  {
    operator delete(v61[0]);
    if (*(void *)(a1 + 8) != *(void *)(a1 + 16)) {
      goto LABEL_38;
    }
  }
  else if (*(void *)(a1 + 8) != *(void *)(a1 + 16))
  {
    goto LABEL_38;
  }
  *(_DWORD *)long long __p = 0;
  v61[0] = (char *)0x3FF8000000000000;
  sub_F16CE4((char **)(a1 + 8), __p, v61);
LABEL_38:
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B91C0;
  strcpy(v61[0], "bfs_anchor_hops_by_level");
  long double v16 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v61);
  double v17 = v16;
  uint64_t v55 = (uint64_t *)(a1 + 32);
  if (SHIBYTE(v61[2]) < 0)
  {
    operator delete(v61[0]);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    if (*v17 == v19) {
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v18 = *v16;
    uint64_t v19 = v16[1];
    if (*v16 == v19) {
      goto LABEL_54;
    }
  }
  do
  {
    if (*(_DWORD *)(v18 + 8) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    long double v20 = *(void **)v18;
    HIBYTE(v61[2]) = 5;
    strcpy((char *)v61, "level");
    unsigned int v21 = sub_31AC04(v20, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    uint64_t v22 = v57[7];
    unint64_t v23 = (v57[8] - v22) >> 2;
    if (v23 <= v21)
    {
      unint64_t v24 = v21 + 1;
      LODWORD(v61[0]) = 0;
      if (v24 <= v23)
      {
        if (v24 < v23) {
          v57[8] = v22 + 4 * v24;
        }
      }
      else
      {
        sub_500DC((uint64_t)v56, v24 - v23, (const float *)v61);
      }
    }
    HIBYTE(v61[2]) = 4;
    strcpy((char *)v61, "hops");
    *(_DWORD *)(*v56 + 4 * v21) = sub_31AC04(v20, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    v18 += 16;
  }
  while (v18 != v19);
LABEL_54:
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B8870;
  strcpy(v61[0], "path_anchor_hops_by_level");
  uint64_t v25 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v61);
  double v26 = v25;
  if (SHIBYTE(v61[2]) < 0)
  {
    operator delete(v61[0]);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    if (*v26 == v27) {
      goto LABEL_73;
    }
    while (1)
    {
LABEL_62:
      if (*(_DWORD *)(v28 + 8) != 2)
      {
        unint64_t v50 = __cxa_allocate_exception(8uLL);
        void *v50 = &off_23FDF58;
      }
      uint64_t v30 = *(void **)v28;
      HIBYTE(v61[2]) = 5;
      strcpy((char *)v61, "level");
      unsigned int v31 = sub_31AC04(v30, (uint64_t)v61);
      if (SHIBYTE(v61[2]) < 0) {
        operator delete(v61[0]);
      }
      HIBYTE(v61[2]) = 4;
      strcpy((char *)v61, "hops");
      int v32 = sub_31AC04(v30, (uint64_t)v61);
      int v33 = v32;
      if (SHIBYTE(v61[2]) < 0)
      {
        operator delete(v61[0]);
        if (v33)
        {
LABEL_69:
          uint64_t v29 = v57[4];
          unint64_t v34 = (v57[5] - v29) >> 2;
          if (v34 <= v31)
          {
            unint64_t v35 = v31 + 1;
            LODWORD(v61[0]) = 0;
            if (v35 > v34)
            {
              sub_500DC((uint64_t)v55, v35 - v34, (const float *)v61);
              uint64_t v29 = *v55;
            }
            else if (v35 < v34)
            {
              v57[5] = v29 + 4 * v35;
            }
          }
          *(_DWORD *)(v29 + 4 * v31) = v33;
        }
      }
      else if (v32)
      {
        goto LABEL_69;
      }
      v28 += 16;
      if (v28 == v27) {
        goto LABEL_73;
      }
    }
  }
  uint64_t v28 = *v25;
  uint64_t v27 = v25[1];
  if (*v25 != v27) {
    goto LABEL_62;
  }
LABEL_73:
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B8870;
  strcpy(v61[0], "plateau_time_thresholds_s");
  uint64_t v36 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v61);
  BOOL v37 = v36;
  if (SHIBYTE(v61[2]) < 0)
  {
    operator delete(v61[0]);
    uint64_t v38 = *v37;
    uint64_t v39 = v37[1];
    if (*v37 == v39) {
      goto LABEL_83;
    }
  }
  else
  {
    uint64_t v38 = *v36;
    uint64_t v39 = v36[1];
    if (*v36 == v39) {
      goto LABEL_83;
    }
  }
  do
  {
    if (*(_DWORD *)(v38 + 8) != 2)
    {
      int v51 = __cxa_allocate_exception(8uLL);
      *int v51 = &off_23FDF58;
    }
    unint64_t v40 = *(void **)v38;
    *(void *)long long __p = 0;
    HIBYTE(v61[2]) = 9;
    strcpy((char *)v61, "threshold");
    double v41 = sub_5C7E8(v40, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    *(double *)long long __p = v41;
    HIBYTE(v61[2]) = 4;
    strcpy((char *)v61, "time");
    LODWORD(v58) = 10 * sub_319F48(v40, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    sub_EFC730(v54, __p, &v58);
    v38 += 16;
  }
  while (v38 != v39);
LABEL_83:
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B8890;
  strcpy(v61[0], "plateau_distance_thresholds_m");
  int v42 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v61);
  char v43 = v42;
  if (SHIBYTE(v61[2]) < 0)
  {
    operator delete(v61[0]);
    uint64_t v44 = *v43;
    uint64_t v45 = v43[1];
    if (*v43 == v45) {
      return v57;
    }
  }
  else
  {
    uint64_t v44 = *v42;
    uint64_t v45 = v42[1];
    if (*v42 == v45) {
      return v57;
    }
  }
  do
  {
    if (*(_DWORD *)(v44 + 8) != 2)
    {
      char v52 = __cxa_allocate_exception(8uLL);
      *char v52 = &off_23FDF58;
    }
    long long v46 = *(void **)v44;
    *(void *)long long __p = 0;
    HIBYTE(v61[2]) = 9;
    strcpy((char *)v61, "threshold");
    double v47 = sub_5C7E8(v46, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    *(double *)long long __p = v47;
    HIBYTE(v61[2]) = 8;
    strcpy((char *)v61, "distance");
    uint64_t v58 = 100 * sub_FC9CCC(v46, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    sub_FC9D8C(v53, __p, &v58);
    v44 += 16;
  }
  while (v44 != v45);
  return v57;
}

void sub_FC99A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  int v33 = *a14;
  if (*a14)
  {
    v29[20] = v33;
    operator delete(v33);
    unint64_t v34 = *v28;
    if (!*v28)
    {
LABEL_3:
      unint64_t v35 = *a20;
      if (!*a20) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v34 = *v28;
    if (!*v28) {
      goto LABEL_3;
    }
  }
  v29[17] = v34;
  operator delete(v34);
  unint64_t v35 = *a20;
  if (!*a20)
  {
LABEL_4:
    uint64_t v36 = *v31;
    if (!*v31) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  v29[8] = v35;
  operator delete(v35);
  uint64_t v36 = *v31;
  if (!*v31)
  {
LABEL_5:
    BOOL v37 = *v30;
    if (!*v30) {
LABEL_12:
    }
      _Unwind_Resume(exception_object);
LABEL_11:
    v29[2] = v37;
    operator delete(v37);
    goto LABEL_12;
  }
LABEL_10:
  v29[5] = v36;
  operator delete(v36);
  BOOL v37 = *v30;
  if (!*v30) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

uint64_t sub_FC9C0C(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    BOOL v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return *((double *)v2 + 5);
}

void sub_FC9C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FC9CCC(void *a1, uint64_t a2)
{
  uint64_t v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    BOOL v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return (uint64_t)*((double *)v2 + 5);
}

void sub_FC9D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_FC9D8C(uint64_t a1, void *a2, void *a3)
{
  BOOL v7 = *(void **)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if ((unint64_t)v7 < v6)
  {
    void *v7 = *a2;
    v7[1] = *a3;
    int v8 = v7 + 2;
    goto LABEL_13;
  }
  int v9 = *(void **)a1;
  uint64_t v10 = ((uint64_t)v7 - *(void *)a1) >> 4;
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 60) {
    sub_2E00();
  }
  uint64_t v12 = v6 - (void)v9;
  if (v12 >> 3 > v11) {
    unint64_t v11 = v12 >> 3;
  }
  BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
  if (!v13) {
    unint64_t v14 = v11;
  }
  if (v14 >> 60) {
    sub_188D718();
  }
  uint64_t v15 = 16 * v14;
  long double v16 = (char *)operator new(16 * v14);
  double v17 = &v16[16 * v10];
  uint64_t v18 = &v16[v15];
  *(void *)double v17 = *a2;
  *((void *)v17 + 1) = *a3;
  int v8 = v17 + 16;
  if (v7 == v9)
  {
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v18;
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  do
  {
    uint64_t v19 = v17 - 16;
    *((_OWORD *)v17 - 1) = *((_OWORD *)v7 - 1);
    v7 -= 2;
    v17 -= 16;
  }
  while (v7 != v9);
  *(void *)a1 = v19;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v18;
  if (v9) {
LABEL_12:
  }
    operator delete(v9);
LABEL_13:
  *(void *)(a1 + 8) = v8;
  return v8 - 2;
}

uint64_t sub_FC9EBC(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = a2;
  sub_F734A0(a1 + 8, a2, 0);
  sub_F79350(a1 + 3952, *(void *)a1, 0);
  *(_OWORD *)(a1 + 7896) = xmmword_20B8E30;
  *(void *)(a1 + 7912) = 0x7FFFFFFFFFFFFFFFLL;
  v9[0] = 10;
  v9[1] = (unint64_t)&v8;
  v9[2] = (unint64_t)&v7;
  v9[3] = (unint64_t)&v6;
  sub_FD5524((void *)(a1 + 7920), v9);
  sub_FC8E74(a1 + 8688, a3);
  *(void *)(a1 + 8864) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8872) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8880) = 0x7FFFFFFFFFFFFFFFLL;
  return a1;
}

void sub_FC9F94(_Unwind_Exception *a1)
{
  sub_328138(v3);
  sub_BF0DE8(v2);
  sub_BF0DE8(v1);
  _Unwind_Resume(a1);
}

void sub_FC9FC0(_Unwind_Exception *a1)
{
  sub_BF0DE8(v1);
  _Unwind_Resume(a1);
}

void sub_FC9FD8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, int *a5@<X4>, int a6@<W5>, void *a7@<X6>, unsigned int a8@<W7>, uint64_t *a9@<X8>)
{
  uint64_t v13 = 0;
  uint64_t v105 = a1 + 7896;
  unsigned int v117 = a8;
  do
  {
    uint64_t v15 = a1 + v13;
    if (*(void *)(a1 + v13 + 7936))
    {
      unint64_t v16 = *(void *)(v15 + 7944);
      if (v16 >= 0x80)
      {
        unint64_t v14 = (void *)(a1 + v13);
        operator delete(*(void **)(v15 + 7920));
        *(void *)(v15 + 7920) = &unk_20E1710;
        v14[995] = 0;
        v14[991] = 0;
        v14[993] = 0;
        v14[992] = 0;
      }
      else if (v16)
      {
        *(void *)(v15 + 7936) = 0;
        memset(*(void **)(v15 + 7920), 128, v16 + 8);
        *(unsigned char *)(*(void *)(v15 + 7920) + v16) = -1;
        unint64_t v17 = *(void *)(v15 + 7944);
        if (v17 == 7) {
          uint64_t v18 = 6;
        }
        else {
          uint64_t v18 = v17 - (v17 >> 3);
        }
        *(void *)(a1 + v13 + 7960) = v18 - *(void *)(v15 + 7936);
      }
    }
    v13 += 48;
  }
  while (v13 != 768);
  *(void *)(a1 + 8880) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8864) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8872) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)uint64_t v105 = xmmword_20B8E30;
  *(void *)(a1 + 7912) = 0x7FFFFFFFFFFFFFFFLL;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  char v19 = a6;
  *(_OWORD *)(a1 + 8864) = *((_OWORD *)sub_F5A874(*(void *)a1 + 4176, a7, (int *)a4, a5, a6, 0) + 1);
  if (*(_DWORD *)(a1 + 8864) != -1)
  {
    int v20 = *(_DWORD *)(a1 + 8868);
    if (v20 != 0x7FFFFFFF && *(void *)(a1 + 8872) != 0x7FFFFFFFFFFFFFFFLL)
    {
      int v116 = 0x7FFFFFFF;
      unsigned int v115 = 0x7FFFFFFF;
      int v21 = *a5;
      if (*a5 != 0x7FFFFFFF)
      {
        int v116 = *a5;
        int v22 = v20 / 10;
        int v23 = v20 % 10;
        if (v20 < 0) {
          char v24 = -5;
        }
        else {
          char v24 = 5;
        }
        unsigned int v115 = v22 + v21 + (((103 * (char)(v24 + v23)) >> 15) & 1) + ((103 * (char)(v24 + v23)) >> 10);
      }
      sub_FCACE8((uint64_t)v114, *(void *)a1, (uint64_t)a7, (void *)(a1 + 8720));
      uint64_t v27 = (void *)*a2;
      double v26 = (void *)a2[1];
      if ((void *)*a2 != v26)
      {
        do
        {
          LODWORD(__p) = 0;
          sub_EDFF98((char **)v114, v27, &__p);
          v27 += 10;
        }
        while (v27 != v26);
      }
      uint64_t v29 = (void *)*a3;
      uint64_t v28 = (void *)a3[1];
      if ((void *)*a3 != v28)
      {
        do
        {
          LODWORD(__p) = 0;
          sub_EDFF98((char **)v114, v29, &__p);
          v29 += 10;
        }
        while (v29 != v28);
      }
      unsigned int v30 = *(_DWORD *)(a1 + 8864);
      unsigned int v31 = *(unsigned int **)(a1 + 8696);
      unsigned int v32 = *v31;
      if (v30 <= *v31)
      {
        double v36 = *((double *)v31 + 1);
        unint64_t v34 = a9;
      }
      else
      {
        int v33 = *(int **)(a1 + 8704);
        if ((char *)v33 - (char *)v31 >= 16)
        {
          unint64_t v34 = a9;
          if ((char *)v33 - (char *)v31 != 16)
          {
            unint64_t v37 = (unint64_t)((char *)v33 - (char *)v31) >> 4;
            do
            {
              unint64_t v38 = (4 * v37) & 0xFFFFFFFFFFFFFFF0;
              _X14 = (uint64_t)v31 + v38;
              __asm { PRFM            #0, [X14] }
              uint64_t v45 = &v31[4 * (v37 >> 1)];
              _X13 = (char *)v45 + v38;
              __asm { PRFM            #0, [X13] }
              if (*v45 >= v30) {
                unint64_t v48 = 0;
              }
              else {
                unint64_t v48 = v37 >> 1;
              }
              v31 += 4 * v48;
              v37 -= v37 >> 1;
            }
            while ((uint64_t)v37 > 1);
            unsigned int v32 = *v31;
          }
          v31 += 4 * (v32 < v30);
          if (v31 != (unsigned int *)v33) {
            goto LABEL_26;
          }
        }
        else
        {
          unint64_t v34 = a9;
          if (v31 != (unsigned int *)v33)
          {
LABEL_26:
            int v35 = *(v31 - 4);
            if (*v31 == v35)
            {
              double v36 = *((double *)v31 + 1);
            }
            else
            {
              double v25 = *((double *)v31 - 1);
              double v36 = v25 + (double)(v30 - v35) / (double)(*v31 - v35) * (*((double *)v31 + 1) - v25);
            }
            goto LABEL_39;
          }
        }
        double v36 = *((double *)v33 - 1);
      }
LABEL_39:
      int v113 = sub_ECE090((_DWORD *)(a1 + 8864), v36, v25);
      sub_F75358(a1 + 8, (uint64_t)a2, a4, &v116, v19, &v113, 0x7FFFFFFF, &v117, (uint64_t *)v114, (void *)(a1 + 8744), *(_DWORD *)(a1 + 8768), v96, *(_DWORD *)(a1 + 8776));
      sub_F76A30(a1 + 8, (uint64_t)&__p);
      sub_33998(v105, (uint64_t)&__p);
      sub_F7AC10(a1 + 3952, (uint64_t)a3, a4, &v115, v19, &v113, 0x7FFFFFFF, &v117, (uint64_t *)v114, (void *)(a1 + 8744), *(_DWORD *)(a1 + 8768), v97, *(_DWORD *)(a1 + 8776));
      sub_F7BB54(a1 + 3952, (uint64_t)&__p);
      sub_33998(v105, (uint64_t)&__p);
      sub_FCB57C((uint64_t **)a1, a2, a3, a4, &v111);
      uint64_t v49 = v111;
      if (v111 != v112)
      {
        unint64_t v50 = v112;
        int v51 = (char *)v111 + 32;
        do
        {
          sub_FCC034(a1, v51 - 4, (uint64_t)&__p);
          if (!sub_EAE144(&__p))
          {
            if (*(unsigned char *)(v105 + 793))
            {
              unsigned int v54 = sub_3FD4E4(**(void **)a1, v51 - 1, 0) >> 32;
              unsigned int v55 = sub_3FD4E4(**(void **)a1, v51, 0) >> 32;
              sub_E1B4((uint64_t)v108);
              *(void *)((char *)v109 + *(void *)(v108[0] - 24)) = 9;
              unint64_t v56 = sub_188FC78(v109, (uint64_t)"\"ViaPath\": {", 12);
              uint64_t v57 = sub_188FC78(v56, (uint64_t)"  \"cost_function\": \"", 20);
              char v58 = *(unsigned char *)(a4 + 31);
              if (v58 >= 0) {
                uint64_t v59 = a4 + 8;
              }
              else {
                uint64_t v59 = *(void *)(a4 + 8);
              }
              if (v58 >= 0) {
                uint64_t v60 = *(unsigned __int8 *)(a4 + 31);
              }
              else {
                uint64_t v60 = *(void *)(a4 + 16);
              }
              unint64_t v61 = sub_188FC78(v57, v59, v60);
              int64_t v62 = sub_188FC78(v61, (uint64_t)"\",", 2);
              unint64_t v63 = sub_188FC78(v62, (uint64_t)"  \"via_node\": \"", 15);
              long long v64 = sub_3D1870(v63, *(v51 - 4));
              uint64_t v65 = sub_188FC78(v64, (uint64_t)"\",", 2);
              uint64_t v66 = sub_188FC78(v65, (uint64_t)"  \"path_cost\": \"", 16);
              std::ostream::operator<<();
              sub_188FC78(v66, (uint64_t)",", 1);
              std::ostream::operator<<();
              uint64_t v67 = sub_188FC78(v66, (uint64_t)"\",", 2);
              uint64_t v68 = sub_188FC78(v67, (uint64_t)"  \"path_length_lb\": \"", 21);
              std::ostream::operator<<();
              int v69 = sub_188FC78(v68, (uint64_t)"\",", 2);
              long long v70 = sub_188FC78(v69, (uint64_t)"  \"plateau\": {", 14);
              uint64_t v71 = sub_188FC78(v70, (uint64_t)"    \"length_lb\": \"", 18);
              sub_FC86D4((uint64_t)(v51 - 4), *(uint64_t **)a1);
              std::ostream::operator<<();
              long long v72 = sub_188FC78(v71, (uint64_t)"\",", 2);
              sub_188FC78(v72, (uint64_t)"    \"first_node_coord\":\"", 24);
              long double v73 = exp((double)v54 * -6.28318531 / 4294967300.0 + 3.14159265);
              atan((v73 + -1.0 / v73) * 0.5);
              long long v74 = (void *)std::ostream::operator<<();
              sub_188FC78(v74, (uint64_t)",", 1);
              uint64_t v75 = (void *)std::ostream::operator<<();
              uint64_t v76 = sub_188FC78(v75, (uint64_t)"\",", 2);
              sub_188FC78(v76, (uint64_t)"    \"last_node_coord\": \"", 24);
              long double v77 = exp((double)v55 * -6.28318531 / 4294967300.0 + 3.14159265);
              atan((v77 + -1.0 / v77) * 0.5);
              long long v78 = (void *)std::ostream::operator<<();
              sub_188FC78(v78, (uint64_t)",", 1);
              uint64_t v79 = (void *)std::ostream::operator<<();
              long long v80 = sub_188FC78(v79, (uint64_t)"\"", 1);
              uint64_t v81 = sub_188FC78(v80, (uint64_t)"  }", 3);
              sub_188FC78(v81, (uint64_t)"}", 1);
              std::stringbuf::str();
              if (SHIBYTE(v119) < 0) {
                operator delete((void *)__p);
              }
              long long __p = v106;
              uint64_t v119 = v107;
              v108[0] = v100;
              *(void *)((char *)v108 + *(void *)(v100 - 24)) = v99;
              v109[0] = v98;
              if (v110 < 0) {
                operator delete((void *)v109[9]);
              }
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              std::ios::~ios();
            }
            unint64_t v82 = v34[1];
            if (v82 >= v34[2])
            {
              uint64_t v52 = sub_446BBC(v34, &__p);
            }
            else
            {
              long long v83 = __p;
              *(void *)(v82 + 16) = v119;
              *(void *)(v82 + 24) = 0;
              *(_OWORD *)unint64_t v82 = v83;
              uint64_t v119 = 0;
              long long __p = 0uLL;
              *(void *)(v82 + 32) = 0;
              *(void *)(v82 + 40) = 0;
              *(_OWORD *)(v82 + 24) = v120;
              *(void *)(v82 + 40) = v121;
              long long v120 = 0uLL;
              uint64_t v121 = 0;
              long long v84 = v122;
              long long v85 = v123;
              long long v86 = v124[0];
              *(_OWORD *)(v82 + 94) = *(_OWORD *)((char *)v124 + 14);
              *(_OWORD *)(v82 + 64) = v85;
              *(_OWORD *)(v82 + 80) = v86;
              *(_OWORD *)(v82 + 48) = v84;
              *(void *)(v82 + 112) = 0;
              *(void *)(v82 + 120) = 0;
              *(void *)(v82 + 128) = 0;
              *(void *)(v82 + 136) = 0;
              *(_OWORD *)(v82 + 112) = v125;
              *(void *)(v82 + 128) = v126;
              long long v125 = 0uLL;
              uint64_t v126 = 0;
              *(void *)(v82 + 144) = 0;
              *(void *)(v82 + 152) = 0;
              *(_OWORD *)(v82 + 136) = v127;
              long long v127 = 0uLL;
              *(void *)(v82 + 152) = v128;
              *(void *)(v82 + 160) = 0;
              uint64_t v128 = 0;
              *(void *)(v82 + 168) = 0;
              *(void *)(v82 + 176) = 0;
              *(_OWORD *)(v82 + 160) = v129;
              *(void *)(v82 + 176) = v130;
              long long v129 = 0uLL;
              uint64_t v130 = 0;
              long long v87 = v131;
              uint64_t v88 = v133;
              *(_OWORD *)(v82 + 200) = v132;
              *(_OWORD *)(v82 + 184) = v87;
              *(void *)(v82 + 216) = v88;
              *(void *)(v82 + 224) = 0;
              *(void *)(v82 + 232) = 0;
              *(void *)(v82 + 240) = 0;
              *(_OWORD *)(v82 + 224) = v134;
              long long v134 = 0uLL;
              *(void *)(v82 + 240) = v135;
              *(void *)(v82 + 248) = 0;
              uint64_t v135 = 0;
              *(void *)(v82 + 256) = 0;
              *(void *)(v82 + 264) = 0;
              *(_OWORD *)(v82 + 248) = v136;
              *(void *)(v82 + 264) = v137;
              long long v136 = 0uLL;
              uint64_t v137 = 0;
              *(_OWORD *)(v82 + 272) = v138;
              *(_DWORD *)(v82 + 296) = v140;
              if (v140 <= 1) {
                *(void *)(v82 + 288) = v139;
              }
              *(_OWORD *)(v82 + 304) = v141;
              long long v89 = v147;
              long long v91 = v144;
              long long v90 = v145;
              *(_OWORD *)(v82 + 384) = v146;
              *(_OWORD *)(v82 + 400) = v89;
              *(_OWORD *)(v82 + 352) = v91;
              *(_OWORD *)(v82 + 368) = v90;
              long long v93 = v149;
              long long v92 = *(_OWORD *)v150;
              long long v94 = v148;
              *(void *)(v82 + 463) = *(void *)&v150[15];
              *(_OWORD *)(v82 + 432) = v93;
              *(_OWORD *)(v82 + 448) = v92;
              *(_OWORD *)(v82 + 416) = v94;
              long long v95 = v143;
              *(_OWORD *)(v82 + 320) = v142;
              *(_OWORD *)(v82 + 336) = v95;
              uint64_t v52 = v82 + 472;
            }
            v34[1] = v52;
          }
          sub_405F44((uint64_t)&__p);
          uint64_t v53 = v51 + 8;
          v51 += 12;
        }
        while (v53 != v50);
        uint64_t v49 = v111;
      }
      if (v49)
      {
        long long v112 = v49;
        operator delete(v49);
      }
      if (v114[0])
      {
        v114[1] = v114[0];
        operator delete(v114[0]);
      }
    }
  }
}

void sub_FCABC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  unsigned int v32 = (void *)STACK[0x218];
  if (!STACK[0x218])
  {
    sub_4323C0(a31);
    _Unwind_Resume(a1);
  }
  STACK[0x220] = (unint64_t)v32;
  operator delete(v32);
  sub_4323C0(a31);
  _Unwind_Resume(a1);
}

uint64_t sub_FCACE8(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v4 = (void **)result;
  if (*a4 != a4[1])
  {
    uint64_t v5 = a3;
    uint64_t result = sub_5231C(a3);
    if (*(void *)result != *(void *)(result + 8))
    {
      if (*(unsigned char *)(a2 + 9584))
      {
        uint64_t result = sub_51D60((unsigned __int8 *)(a2 + 8));
        if (result)
        {
          uint64_t *v4 = 0;
          v4[1] = 0;
          int v96 = v4;
          v4[2] = 0;
          uint64_t v7 = *(void *)(a2 + 4280);
          unsigned int v8 = sub_2D0F10((uint64_t)(a4[1] - *a4) >> 2);
          unsigned int v9 = *(_DWORD *)(v7 + 3872);
          if (v9 != -1 || (unsigned int v9 = 1, (v79 = sub_F93238(v7, 1u, 1)) == 0))
          {
LABEL_6:
            if (v9 >= v8) {
              uint64_t v10 = v8;
            }
            else {
              uint64_t v10 = v9;
            }
            __int16 v106 = 256;
            uint64_t v91 = v10;
            if (v10 < 2) {
              return sub_5231C(v5);
            }
            uint64_t v11 = 0;
            uint64_t v97 = v7 + 16;
            while (1)
            {
              if (!*((unsigned char *)&v106 + v11))
              {
                uint64_t v13 = 0;
                uint64_t v14 = 1;
                goto LABEL_19;
              }
              uint64_t result = sub_5231C(v5);
              uint64_t v12 = *(void *)(result + 8) - *(void *)result;
              if (v12 >= 88) {
                break;
              }
LABEL_14:
              if (++v11 == 2) {
                return result;
              }
            }
            uint64_t v13 = 0x2E8BA2E8BA2E8BA3 * (v12 >> 3) - 1;
            uint64_t v14 = -1;
LABEL_19:
            uint64_t v98 = 88 * (int)v14;
            uint64_t v99 = v14;
            uint64_t v15 = 1;
            uint64_t v90 = v11;
            while (1)
            {
              uint64_t result = sub_5231C(v5);
              if (v13 >= 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(result + 8) - *(void *)result) >> 3)) {
                goto LABEL_14;
              }
              unsigned int v103 = *(_DWORD *)(*a4 + 4 * v15);
              if (v103) {
                break;
              }
LABEL_115:
              if (++v15 == v91 || v13 < 0) {
                goto LABEL_14;
              }
            }
            int v105 = v15;
            uint64_t v16 = *(void *)sub_5231C(v5) + 88 * v13;
            unint64_t v17 = *(void *)(v16 + 32);
            BOOL v18 = (v17 & 0xFF000000000000) == 0;
            unint64_t v19 = ((v17 >> 16) & 0xFFFF0000 | (v17 << 32) | (2 * v18)) + 4 * (unsigned __int16)*(_DWORD *)(v16 + 80);
            unint64_t v20 = sub_F968AC(v7, HIDWORD(v19) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v19) << 32), v18, &v105);
            uint64_t v93 = v15;
            unsigned int v104 = 0;
            unint64_t v21 = HIDWORD(v20);
            unsigned int v22 = v20;
LABEL_23:
            int v101 = v21;
            unsigned int v102 = v22;
            uint64_t v23 = 88 * v13;
            while (1)
            {
              uint64_t result = sub_5231C(v5);
              if (v13 < 0
                || (v13 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(result + 8) - *(void *)result) >> 3)
                  ? (BOOL v24 = v104 >= v103)
                  : (BOOL v24 = 1),
                    v24))
              {
                uint64_t v11 = v90;
                uint64_t v15 = v93;
                goto LABEL_115;
              }
              uint64_t v25 = v5;
              uint64_t v26 = *(void *)sub_5231C(v5) + v23;
              unint64_t v27 = *(void *)(v26 + 32);
              char v100 = *(unsigned char *)(v26 + 84);
              uint64_t v28 = v27 & 0xFF000000000000;
              uint64_t v29 = ((v27 >> 16) & 0xFFFF0000 | (v27 << 32) | (2 * ((v27 & 0xFF000000000000) == 0)))
                  + 4 * (unsigned __int16)*(_DWORD *)(v26 + 80);
              int v109 = 1;
              unsigned int v110 = HIDWORD(v29);
              uint64_t v107 = &v109;
              long long v108 = &v110;
              unint64_t v30 = *(void *)(v7 + 3856) + 1;
              *(void *)(v7 + 3856) = v30;
              if (!*(void *)v7) {
                goto LABEL_68;
              }
              if (*(_DWORD *)(v7 + 688) == HIDWORD(v29))
              {
                unsigned int v31 = 28;
              }
              else if (*(_DWORD *)(v7 + 712) == HIDWORD(v29))
              {
                unsigned int v31 = 29;
              }
              else if (*(_DWORD *)(v7 + 736) == HIDWORD(v29))
              {
                unsigned int v31 = 30;
              }
              else
              {
                if (*(_DWORD *)(v7 + 760) != HIDWORD(v29))
                {
                  unint64_t v47 = *(void *)(v7 + 744);
                  unint64_t v48 = *(void *)(v7 + 720);
                  unint64_t v49 = *(void *)(v7 + 696);
                  unint64_t v94 = *(void *)(v7 + 768);
                  int v33 = (unsigned int *)sub_2AB884(*(void *)v7, 7, HIDWORD(v29), 1);
                  if (v49 >= v30) {
                    unint64_t v50 = v30;
                  }
                  else {
                    unint64_t v50 = v49;
                  }
                  int v51 = 28;
                  if (v49 >= v30) {
                    int v51 = 0;
                  }
                  if (v48 < v50)
                  {
                    unint64_t v50 = v48;
                    int v51 = 29;
                  }
                  if (v47 < v50)
                  {
                    int v51 = 30;
                    unint64_t v50 = v47;
                  }
                  BOOL v24 = v94 >= v50;
                  unsigned int v52 = 31;
                  if (v24) {
                    unsigned int v52 = v51;
                  }
                  uint64_t v53 = v97 + 24 * v52;
                  *(_DWORD *)uint64_t v53 = v110;
                  *(void *)(v53 + 8) = *(void *)(v7 + 3856);
                  *(void *)(v53 + 16) = v33;
                  if (!v33) {
                    goto LABEL_68;
                  }
                  goto LABEL_39;
                }
                unsigned int v31 = 31;
              }
              ++*(void *)(v7 + 3864);
              uint64_t v32 = v97 + 24 * v31;
              *(void *)(v32 + 8) = v30;
              int v33 = *(unsigned int **)(v32 + 16);
              if (!v33) {
                goto LABEL_68;
              }
LABEL_39:
              unint64_t v34 = (int *)((char *)v33 + *v33);
              int v35 = (unsigned __int16 *)((char *)v34 - *v34);
              if (*v35 < 5u) {
                goto LABEL_48;
              }
              uint64_t v36 = v35[2];
              if (!v36) {
                goto LABEL_48;
              }
              uint64_t v37 = sub_F965E8((unsigned int *)((char *)v34 + v36 + *(unsigned int *)((char *)v34 + v36)), WORD1(v29));
              unint64_t v38 = (unsigned __int16 *)((char *)v34 - *v34);
              if (*v38 < 7u)
              {
                uint64_t v39 = 0;
              }
              else
              {
                uint64_t v39 = (unsigned int *)v38[3];
                if (v39) {
                  uint64_t v39 = (unsigned int *)((char *)v39 + (void)v34 + *(unsigned int *)((char *)v39 + (void)v34));
                }
              }
              unint64_t v40 = (int *)sub_F96748(v39, *(unsigned __int16 *)(v37 + 2 * (v28 != 0)));
              double v41 = (unsigned __int16 *)((char *)v40 - *v40);
              if (*v41 >= 5u && (uint64_t v42 = v41[2]) != 0) {
                char v43 = (unsigned int *)((char *)v40 + v42 + *(unsigned int *)((char *)v40 + v42));
              }
              else {
LABEL_48:
              }
                char v43 = 0;
              uint64_t v44 = (unsigned int *)sub_BE1E78(v43, v105 - 1);
              unsigned int v22 = *v44;
              LODWORD(v21) = v44[1];
              if (!*(unsigned char *)(v7 + 3876)) {
                goto LABEL_70;
              }
              int v109 = 1;
              unsigned int v110 = v22;
              uint64_t v107 = &v109;
              long long v108 = &v110;
              unint64_t v45 = *(void *)(v7 + 3856) + 1;
              *(void *)(v7 + 3856) = v45;
              if (!*(void *)v7) {
                goto LABEL_68;
              }
              if (*(_DWORD *)(v7 + 688) == v22)
              {
                unsigned int v46 = 28;
                goto LABEL_77;
              }
              if (*(_DWORD *)(v7 + 712) == v22)
              {
                unsigned int v46 = 29;
                goto LABEL_77;
              }
              if (*(_DWORD *)(v7 + 736) == v22)
              {
                unsigned int v46 = 30;
                goto LABEL_77;
              }
              if (*(_DWORD *)(v7 + 760) == v22)
              {
                unsigned int v46 = 31;
LABEL_77:
                ++*(void *)(v7 + 3864);
                uint64_t v54 = v97 + 24 * v46;
                *(void *)(v54 + 8) = v45;
                unsigned int v55 = *(unsigned int **)(v54 + 16);
                if (v55) {
                  goto LABEL_78;
                }
                goto LABEL_68;
              }
              unint64_t v95 = *(void *)(v7 + 744);
              unint64_t v59 = *(void *)(v7 + 720);
              unint64_t v60 = *(void *)(v7 + 696);
              unint64_t v89 = *(void *)(v7 + 768);
              unsigned int v55 = (unsigned int *)sub_2AB884(*(void *)v7, 7, v22, 1);
              if (v60 >= v45) {
                unint64_t v61 = v45;
              }
              else {
                unint64_t v61 = v60;
              }
              int v62 = 28;
              if (v60 >= v45) {
                int v62 = 0;
              }
              if (v59 < v61)
              {
                unint64_t v61 = v59;
                int v62 = 29;
              }
              if (v95 < v61)
              {
                int v62 = 30;
                unint64_t v61 = v95;
              }
              BOOL v24 = v89 >= v61;
              unsigned int v63 = 31;
              if (v24) {
                unsigned int v63 = v62;
              }
              uint64_t v64 = v97 + 24 * v63;
              *(_DWORD *)uint64_t v64 = v110;
              *(void *)(v64 + 8) = *(void *)(v7 + 3856);
              *(void *)(v64 + 16) = v55;
              if (v55)
              {
LABEL_78:
                unint64_t v56 = (int *)((char *)v55 + *v55);
                uint64_t v57 = (unsigned __int16 *)((char *)v56 - *v56);
                if (*v57 >= 9u)
                {
                  uint64_t v58 = v57[4];
                  if (v58)
                  {
                    if (*(int *)((char *)v56 + v58 + *(unsigned int *)((char *)v56 + v58))) {
                      goto LABEL_70;
                    }
                  }
                }
                goto LABEL_69;
              }
LABEL_68:
              sub_F933C8(&v107);
LABEL_69:
              unsigned int v22 = 0;
              LODWORD(v21) = -1;
LABEL_70:
              v13 += v99;
              uint64_t v5 = v25;
              if (v22 == v102)
              {
                v23 += v98;
                if (v21 == v101) {
                  continue;
                }
              }
              uint64_t v65 = v29 | v100 & 1;
              uint64_t v67 = (char *)v96[1];
              unint64_t v66 = (unint64_t)v96[2];
              if ((unint64_t)v67 < v66)
              {
                *(void *)uint64_t v67 = v65;
                *((_DWORD *)v67 + 2) = v105;
                uint64_t v68 = v67 + 16;
LABEL_111:
                v96[1] = v68;
                ++v104;
                goto LABEL_23;
              }
              int v69 = (char *)*v96;
              uint64_t v70 = (v67 - (unsigned char *)*v96) >> 4;
              unint64_t v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 60) {
                sub_2E00();
              }
              uint64_t v72 = v66 - (void)v69;
              if (v72 >> 3 > v71) {
                unint64_t v71 = v72 >> 3;
              }
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v73 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v71;
              }
              if (v73 >> 60) {
                sub_188D718();
              }
              uint64_t v74 = v65;
              uint64_t v75 = (char *)operator new(16 * v73);
              uint64_t v76 = &v75[16 * v70];
              *(void *)uint64_t v76 = v74;
              *((_DWORD *)v76 + 2) = v105;
              if (v67 == v69)
              {
                uint64_t v68 = v76 + 16;
                *int v96 = &v75[16 * v70];
                v96[1] = v76 + 16;
                v96[2] = &v75[16 * v73];
                if (v69) {
                  goto LABEL_109;
                }
              }
              else
              {
                long double v77 = &v75[16 * v70];
                do
                {
                  long long v78 = v77 - 16;
                  *((_OWORD *)v77 - 1) = *((_OWORD *)v67 - 1);
                  v67 -= 16;
                  v77 -= 16;
                }
                while (v67 != v69);
                uint64_t v68 = v76 + 16;
                *int v96 = v78;
                v96[1] = v76 + 16;
                v96[2] = &v75[16 * v73];
                if (v69) {
LABEL_109:
                }
                  operator delete(v69);
              }
              uint64_t v5 = v25;
              goto LABEL_111;
            }
          }
          long long v80 = &v79[-*(int *)v79];
          unsigned int v81 = *(unsigned __int16 *)v80;
          if (v81 < 0xB)
          {
            if (v81 < 9)
            {
LABEL_129:
              unsigned int v9 = 1;
              goto LABEL_6;
            }
          }
          else if (*((_WORD *)v80 + 5))
          {
            unint64_t v82 = &v79[*((unsigned __int16 *)v80 + 5) + *(unsigned int *)&v79[*((unsigned __int16 *)v80 + 5)]];
            long long v83 = &v82[-*(int *)v82];
            if (*(unsigned __int16 *)v83 >= 5u && (uint64_t v84 = *((unsigned __int16 *)v83 + 2)) != 0) {
              unsigned int v9 = v82[v84];
            }
            else {
              unsigned int v9 = 0;
            }
            goto LABEL_6;
          }
          uint64_t v85 = *((unsigned __int16 *)v80 + 4);
          if (v85)
          {
            long long v86 = (int *)sub_F930D4((unsigned int *)&v79[v85 + *(unsigned int *)&v79[v85]], 0);
            unsigned int v9 = 0;
            long long v87 = (unsigned __int16 *)((char *)v86 - *v86);
            if (*v87 >= 5u)
            {
              uint64_t v88 = v87[2];
              if (v88) {
                unsigned int v9 = *((unsigned __int8 *)v86 + v88);
              }
              else {
                unsigned int v9 = 0;
              }
            }
            *(_DWORD *)(v7 + 3872) = v9;
            goto LABEL_6;
          }
          goto LABEL_129;
        }
      }
    }
  }
  uint64_t *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  return result;
}

void sub_FCB53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unint64_t v17 = *(void **)a16;
  if (*(void *)a16)
  {
    *(void *)(a16 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_FCB57C(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  sub_F5F9D4(a2, *a1, (uint64_t)v110);
  sub_F5F9D4(a3, *a1, (uint64_t)v109);
  uint64_t v93 = a5;
  uint64_t v96 = (uint64_t)a1;
  sub_F76A04((uint64_t)(a1 + 494), &v106);
  unsigned int v8 = v107;
  unsigned int v9 = v108;
  if (v107 != v108)
  {
    uint64_t v10 = v106;
    uint64_t v11 = (uint64_t)(a1 + 1);
    uint64_t v12 = (uint64_t)(a1 + 990);
    do
    {
      unsigned int v17 = *v8;
      uint64_t v18 = *v10;
      unint64_t v19 = (uint64_t *)(*v10 + 80 * *v8);
      if (sub_F769D0(v11, v19))
      {
        sub_FD70BC(v12, v19, (uint64_t)&v99);
        unint64_t v21 = v99;
        uint64_t v20 = v100;
        if (v101)
        {
          uint64_t v22 = v99[1] + 104 * v100;
          *(void *)uint64_t v22 = *v19;
          *(_OWORD *)(v22 + 40) = 0u;
          *(_OWORD *)(v22 + 56) = 0u;
          *(_OWORD *)(v22 + 72) = 0u;
          *(_OWORD *)(v22 + 88) = 0u;
          *(_OWORD *)(v22 + 8) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          *(_OWORD *)(v22 + 48) = xmmword_20EC680;
          *(_OWORD *)(v22 + 64) = xmmword_20EC680;
          *(_OWORD *)(v22 + 80) = xmmword_20B8EB0;
          *(_DWORD *)(v22 + 96) = 0x7FFFFFFF;
        }
        uint64_t v23 = v21[1];
        uint64_t v24 = v23 + 104 * v20;
        *(void *)(v24 + 8) = *v19;
        uint64_t v25 = v18 + 80 * v17;
        *(void *)(v24 + 60) = *(void *)(v25 + 8);
        int v27 = *(_DWORD *)(v25 + 72);
        uint64_t v26 = (_DWORD *)(v25 + 72);
        if (v27 < 0) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = *(void *)(v18 + 80 * v17 + 32);
        }
        uint64_t v14 = v23 + 104 * v20;
        *(void *)(v14 + 24) = v13;
        uint64_t v15 = v109[0] + 12 * (*v26 & 0x7FFFFFFF);
        uint64_t v16 = *(void *)v15;
        *(_DWORD *)(v14 + 96) = *(_DWORD *)(v15 + 8);
        *(void *)(v14 + 88) = v16;
      }
      ++v8;
    }
    while (v8 != v9);
  }
  sub_F76A04(v96 + 8, &v103);
  uint64_t v28 = v104;
  uint64_t v29 = v105;
  if (v104 != v105)
  {
    unint64_t v30 = v103;
    do
    {
      unsigned int v31 = *v28;
      uint64_t v32 = *v30;
      sub_FCC430(v96 + 7920, (uint64_t *)(*v30 + 80 * *v28), &v99);
      if (v99)
      {
        uint64_t v33 = v102;
        uint64_t v34 = v32 + 80 * v31;
        *(void *)(v102 + 52) = *(void *)(v34 + 8);
        int v36 = *(_DWORD *)(v34 + 72);
        int v35 = (_DWORD *)(v34 + 72);
        uint64_t v37 = v36 < 0 ? 0 : *(void *)(v32 + 80 * v31 + 24);
        *(void *)(v33 + 16) = v37;
        *(_DWORD *)(v33 + 48) = *(_DWORD *)(v32 + 80 * v31 + 16);
        unint64_t v38 = (char *)v110[0] + 12 * (*v35 & 0x7FFFFFFF);
        int v39 = *((_DWORD *)v38 + 2);
        *(void *)(v33 + 76) = *(void *)v38;
        *(_DWORD *)(v33 + 84) = v39;
        sub_FCC554(v96, (uint64_t *)(v33 + 8));
        if (*(_DWORD *)(v33 + 52) != -1 && *(_DWORD *)(v33 + 56) != 0x7FFFFFFF)
        {
          int v40 = *(_DWORD *)(v33 + 60);
          if (v40 != -1)
          {
            int v41 = *(_DWORD *)(v33 + 64);
            if (v41 != 0x7FFFFFFF)
            {
              uint64_t v42 = (v41 + *(_DWORD *)(v33 + 56));
              if (v42 != 0x7FFFFFFF)
              {
                uint64_t v43 = (v40 + *(_DWORD *)(v33 + 52));
                if (v43 != -1)
                {
                  if (*(_DWORD *)(v96 + 8880) == -1
                    || (int v44 = *(_DWORD *)(v96 + 8884), v44 == 0x7FFFFFFF)
                    || (int)v42 < v44)
                  {
                    *(void *)(v96 + 8880) = v43 | (v42 << 32);
                  }
                }
              }
            }
          }
        }
      }
      ++v28;
    }
    while (v28 != v29);
  }
  unint64_t v45 = (char **)(v96 + 8688);
  long long v97 = 0uLL;
  uint64_t v98 = 0;
  uint64_t v46 = v96 + 7920;
  unint64_t v47 = *(char **)(v96 + 7920);
  unint64_t v48 = *(char **)(v96 + 7928);
  if (*v47 > -2)
  {
    unint64_t v49 = *(void **)(v96 + 7920);
    uint64_t v53 = *(void *)(v96 + 7944);
    int v51 = &v47[v53];
    unsigned int v52 = (char **)(v96 + 7920);
    if (v47 != &v47[v53]) {
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v49 = *(void **)(v96 + 7920);
    do
    {
      unint64_t v50 = (__clz(__rbit64(((*v49 >> 7) & ~*v49 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      unint64_t v49 = (void *)((char *)v49 + v50);
      v48 += 104 * v50;
    }
    while (*(char *)v49 < -1);
    int v51 = &v47[*(void *)(v96 + 7944)];
    unsigned int v52 = (char **)(v96 + 7920);
    if (v49 != (void *)v51) {
      goto LABEL_35;
    }
  }
  unsigned int v52 = (char **)(v96 + 7968);
  uint64_t v77 = 1;
  uint64_t v78 = v96 + 7920;
  while (1)
  {
    unint64_t v48 = *(char **)(v78 + 56);
    unint64_t v49 = *v52;
    if (**v52 <= -2)
    {
      do
      {
        unint64_t v79 = (__clz(__rbit64(((*v49 >> 7) & ~*v49 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        unint64_t v49 = (void *)((char *)v49 + v79);
        v48 += 104 * v79;
      }
      while (*(char *)v49 < -1);
    }
    int v51 = &(*v52)[*(void *)(v78 + 72)];
    if (v49 != (void *)v51) {
      break;
    }
    uint64_t v78 = v46 + 48 * v77++;
    unsigned int v52 = (char **)(v78 + 48);
    if (v77 == 16)
    {
LABEL_95:
      if (*(unsigned char *)v45)
      {
        unint64_t v80 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v97 + 1) - v97) >> 5));
        if (*((void *)&v97 + 1) == (void)v97) {
          uint64_t v81 = 0;
        }
        else {
          uint64_t v81 = v80;
        }
        sub_FD7860(v97, *((_DWORD **)&v97 + 1), (uint64_t)&v99, v81, 1);
        unint64_t v82 = (unsigned char *)v97;
        unint64_t v83 = *(unsigned int *)(v96 + 8772);
        uint64_t v84 = (unsigned char *)*((void *)&v97 + 1);
        unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v97 + 1) - v97) >> 5);
        long long v86 = (unsigned char *)(v97 + 96 * v83);
        v93[1] = 0;
        v93[2] = 0;
        if (v85 <= v83) {
          long long v87 = v84;
        }
        else {
          long long v87 = v86;
        }
        *uint64_t v93 = 0;
        uint64_t v88 = v87 - v82;
        if (v87 != v82)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v88 >> 5) >= 0x2AAAAAAAAAAAAABLL) {
            sub_2E00();
          }
          unint64_t v89 = (char *)operator new(v87 - v82);
          *uint64_t v93 = v89;
          v93[1] = v89;
          uint64_t v90 = &v89[32 * (v88 >> 5)];
          v93[2] = v90;
          if (v82 != v87) {
            memmove(v89, v82, v88 - 4);
          }
          v93[1] = v90;
        }
        if (v82)
        {
          *((void *)&v97 + 1) = v82;
          operator delete(v82);
          uint64_t v91 = (void *)v109[0];
          if (!v109[0]) {
            goto LABEL_113;
          }
LABEL_112:
          v109[1] = v91;
          operator delete(v91);
          goto LABEL_113;
        }
      }
      else
      {
        *(_OWORD *)uint64_t v93 = v97;
        v93[2] = v98;
      }
      uint64_t v91 = (void *)v109[0];
      if (!v109[0]) {
        goto LABEL_113;
      }
      goto LABEL_112;
    }
  }
LABEL_35:
  while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v97 + 1) - v97) >> 5) < *(unsigned int *)(v96 + 8772)
       || *(unsigned char *)v45)
  {
    uint64_t v54 = (unint64_t *)(v48 + 8);
    if (!*((void *)v48 + 1)) {
      goto LABEL_50;
    }
    if (*((_DWORD *)v48 + 13) == -1) {
      goto LABEL_50;
    }
    if (*((_DWORD *)v48 + 14) == 0x7FFFFFFF) {
      goto LABEL_50;
    }
    if (*((_DWORD *)v48 + 15) == -1) {
      goto LABEL_50;
    }
    if (*((_DWORD *)v48 + 16) == 0x7FFFFFFF) {
      goto LABEL_50;
    }
    if (*((_DWORD *)v48 + 17) == -1) {
      goto LABEL_50;
    }
    if (*((_DWORD *)v48 + 18) == 0x7FFFFFFF) {
      goto LABEL_50;
    }
    sub_FCC430(v46, (uint64_t *)v48 + 3, &v99);
    if (v99)
    {
      if (*v54 == *(void *)(v102 + 16)) {
        goto LABEL_50;
      }
    }
    if (*((_DWORD *)v48 + 13) == -1) {
      goto LABEL_50;
    }
    if (*((_DWORD *)v48 + 14) == 0x7FFFFFFF) {
      goto LABEL_50;
    }
    int v55 = *((_DWORD *)v48 + 15);
    if (v55 == -1) {
      goto LABEL_50;
    }
    int v56 = *((_DWORD *)v48 + 16);
    if (v56 == 0x7FFFFFFF) {
      goto LABEL_50;
    }
    int v63 = v56 + *((_DWORD *)v48 + 14);
    if (v63 == 0x7FFFFFFF) {
      goto LABEL_50;
    }
    unsigned int v64 = v55 + *((_DWORD *)v48 + 13);
    if (v64 == -1) {
      goto LABEL_50;
    }
    double v65 = *(double *)(v96 + 8784);
    double v66 = v65 * (double)*(int *)(v96 + 8884);
    if (v66 >= 0.0)
    {
      HIDWORD(v67) = 1127219200;
      if (v66 >= 4.50359963e15) {
        goto LABEL_73;
      }
      uint64_t v68 = (uint64_t)(v66 + v66) + 1;
    }
    else
    {
      HIDWORD(v67) = -1020264448;
      if (v66 <= -4.50359963e15) {
        goto LABEL_73;
      }
      uint64_t v68 = (uint64_t)(v66 + v66);
      if (v68 >= 1) {
        --v68;
      }
    }
    double v66 = (double)(v68 >> 1);
LABEL_73:
    if (v63 <= (int)v66)
    {
      if (!*(unsigned char *)(v96 + 8792) || (LODWORD(v67) = *(_DWORD *)(v96 + 8864), v65 * (double)v67 >= (double)v64))
      {
        int v69 = *(uint64_t **)v96;
        uint64_t v70 = **(void **)v96;
        if (!*(unsigned char *)(v70 + 7774)) {
          goto LABEL_83;
        }
        unint64_t v95 = *v54;
        uint64_t v94 = **(void **)v96;
        unint64_t v71 = HIDWORD(*v54);
        uint64_t v72 = sub_290DEC(v70 + 3896, HIDWORD(*v54), 1);
        if (v72)
        {
          unint64_t v73 = &v72[-*(int *)v72];
          if (*(unsigned __int16 *)v73 >= 5u)
          {
            uint64_t v74 = *((unsigned __int16 *)v73 + 2);
            if (v74)
            {
              if (*(_DWORD *)&v72[v74 + *(unsigned int *)&v72[v74]] > (unsigned __int16)WORD1(v95)
                && sub_295DB4(v94, v71 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v95) << 32)))
              {
                int v69 = *(uint64_t **)v96;
LABEL_83:
                if (!*((unsigned char *)v69 + 9586)
                  || (v111[0] = (int *)((HIDWORD(*v54) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*v54) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*v54 >> 1) & 1) << 48)) ^ 0x1000000000000),
                      sub_F57414((uint64_t)(v69 + 1199), v111) == -1))
                {
                  sub_ED7040((uint64_t)(v69 + 1), (HIDWORD(*v54) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(*v54) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((*v54 >> 1) & 1) << 48)) ^ 0x1000000000000, (uint64_t)v111);
                  unint64_t v75 = sub_F17510(v69 + 529, v111, 0x3B9ACA00u, a4);
                  if (v75 != -1 && HIDWORD(v75) != 0x7FFFFFFF)
                  {
                    int v76 = *((_DWORD *)v48 + 18) + HIDWORD(v75);
                    *((_DWORD *)v48 + 17) += v75;
                    *((_DWORD *)v48 + 18) = v76;
                    if (sub_FCC6CC(v96, (uint64_t)(v48 + 8)))
                    {
                      if (sub_FCC7D0(v96, (uint64_t)(v48 + 8))) {
                        sub_3DEE84((char **)&v97, v48 + 8);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_50:
    int v57 = *((char *)v49 + 1);
    unint64_t v49 = (void *)((char *)v49 + 1);
    v48 += 104;
    if (v57 <= -2)
    {
      do
      {
        unint64_t v58 = (__clz(__rbit64(((*v49 >> 7) & ~*v49 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        unint64_t v49 = (void *)((char *)v49 + v58);
        v48 += 104 * v58;
      }
      while (*(char *)v49 < -1);
    }
    if (v49 == (void *)v51)
    {
      unint64_t v59 = v52 + 6;
      if (v52 + 6 == v45) {
        goto LABEL_95;
      }
      while (1)
      {
        unint64_t v60 = v59;
        unint64_t v61 = v52[6];
        unint64_t v48 = v52[7];
        unint64_t v49 = v61;
        if (*v61 <= -2)
        {
          do
          {
            unint64_t v62 = (__clz(__rbit64(((*v49 >> 7) & ~*v49 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            unint64_t v49 = (void *)((char *)v49 + v62);
            v48 += 104 * v62;
          }
          while (*(char *)v49 < -1);
        }
        int v51 = &v52[9][(void)v61];
        if (v49 != (void *)v51) {
          break;
        }
        unint64_t v59 = v60 + 6;
        unsigned int v52 = v60;
        if (v60 + 6 == v45) {
          goto LABEL_95;
        }
      }
      unsigned int v52 = v60;
      if (!v60) {
        goto LABEL_95;
      }
    }
    else if (!v52)
    {
      goto LABEL_95;
    }
  }
  *(_OWORD *)uint64_t v93 = v97;
  v93[2] = v98;
  uint64_t v91 = (void *)v109[0];
  if (v109[0]) {
    goto LABEL_112;
  }
LABEL_113:
  if (v110[0])
  {
    v110[1] = v110[0];
    operator delete(v110[0]);
  }
}

void sub_FCBF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v21 = *(void **)(v20 - 176);
    if (v21)
    {
LABEL_7:
      *(void *)(v20 - 168) = v21;
      operator delete(v21);
      uint64_t v22 = *(void **)(v20 - 152);
      if (v22)
      {
LABEL_8:
        *(void *)(v20 - 144) = v22;
        operator delete(v22);
        _Unwind_Resume(exception_object);
      }
LABEL_4:
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    unint64_t v21 = *(void **)(v20 - 176);
    if (v21) {
      goto LABEL_7;
    }
  }
  uint64_t v22 = *(void **)(v20 - 152);
  if (v22) {
    goto LABEL_8;
  }
  goto LABEL_4;
}

uint64_t sub_FCC034@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_F75D6C(a1 + 8, a2, &v36);
  if (sub_EAE144(&v36))
  {
    uint64_t v6 = v39;
    *(void *)(a3 + 16) = v37;
    *(void *)(a3 + 40) = v6;
    uint64_t v7 = v46;
    *(void *)(a3 + 128) = v44;
    *(void *)(a3 + 152) = v7;
    uint64_t v8 = v51;
    *(void *)(a3 + 176) = v48;
    *(void *)(a3 + 216) = v8;
    uint64_t v9 = v55;
    *(void *)(a3 + 240) = v53;
    *(_OWORD *)a3 = v36;
    long long v36 = 0uLL;
    *(_OWORD *)(a3 + 24) = v38;
    uint64_t v37 = 0;
    long long v38 = 0uLL;
    uint64_t v39 = 0;
    long long v10 = v40;
    long long v11 = v41;
    long long v12 = v42[0];
    *(_OWORD *)(a3 + 94) = *(_OWORD *)((char *)v42 + 14);
    *(_OWORD *)(a3 + 64) = v11;
    *(_OWORD *)(a3 + 80) = v12;
    *(_OWORD *)(a3 + 48) = v10;
    *(_OWORD *)(a3 + 112) = v43;
    long long v43 = 0uLL;
    *(_OWORD *)(a3 + 136) = v45;
    uint64_t v44 = 0;
    long long v45 = 0uLL;
    uint64_t v46 = 0;
    *(_OWORD *)(a3 + 160) = v47;
    long long v47 = 0uLL;
    long long v13 = v49;
    *(_OWORD *)(a3 + 200) = v50;
    *(_OWORD *)(a3 + 184) = v13;
    *(_OWORD *)(a3 + 224) = v52;
    uint64_t v48 = 0;
    long long v52 = 0uLL;
    uint64_t v53 = 0;
    *(_OWORD *)(a3 + 248) = v54;
    *(void *)(a3 + 264) = v9;
    long long v54 = 0uLL;
    uint64_t v55 = 0;
    *(_OWORD *)(a3 + 272) = v56;
    unsigned int v14 = v58;
    *(_DWORD *)(a3 + 296) = v58;
    if (v14 <= 1) {
      *(void *)(a3 + 288) = v57;
    }
    long long v15 = *(_OWORD *)v68;
    *(_OWORD *)(a3 + 432) = v67;
    *(_OWORD *)(a3 + 448) = v15;
    long long v16 = v64;
    *(_OWORD *)(a3 + 368) = v63;
    *(_OWORD *)(a3 + 384) = v16;
    long long v17 = v66;
    *(_OWORD *)(a3 + 400) = v65;
    *(_OWORD *)(a3 + 416) = v17;
    long long v18 = v60;
    *(_OWORD *)(a3 + 304) = v59;
    *(_OWORD *)(a3 + 320) = v18;
    long long v19 = v62;
    *(_OWORD *)(a3 + 336) = v61;
    *(_OWORD *)(a3 + 352) = v19;
    *(void *)(a3 + 463) = *(void *)&v68[15];
  }
  else
  {
    sub_F7B300(a1 + 3952, a2, v35);
    if (sub_EAE144(v35))
    {
      sub_443EFC((char *)a3, v35);
    }
    else
    {
      sub_EAEFD8((uint64_t)&v36, (uint64_t)v35);
      uint64_t v20 = v39;
      *(void *)(a3 + 16) = v37;
      *(void *)(a3 + 40) = v20;
      uint64_t v21 = v46;
      *(void *)(a3 + 128) = v44;
      *(void *)(a3 + 152) = v21;
      uint64_t v22 = v51;
      *(void *)(a3 + 176) = v48;
      *(void *)(a3 + 216) = v22;
      uint64_t v23 = v55;
      *(void *)(a3 + 240) = v53;
      *(_OWORD *)a3 = v36;
      long long v36 = 0uLL;
      *(_OWORD *)(a3 + 24) = v38;
      uint64_t v37 = 0;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      long long v24 = v40;
      long long v25 = v41;
      long long v26 = v42[0];
      *(_OWORD *)(a3 + 94) = *(_OWORD *)((char *)v42 + 14);
      *(_OWORD *)(a3 + 64) = v25;
      *(_OWORD *)(a3 + 80) = v26;
      *(_OWORD *)(a3 + 48) = v24;
      *(_OWORD *)(a3 + 112) = v43;
      long long v43 = 0uLL;
      *(_OWORD *)(a3 + 136) = v45;
      uint64_t v44 = 0;
      long long v45 = 0uLL;
      uint64_t v46 = 0;
      *(_OWORD *)(a3 + 160) = v47;
      long long v47 = 0uLL;
      long long v27 = v49;
      *(_OWORD *)(a3 + 200) = v50;
      *(_OWORD *)(a3 + 184) = v27;
      *(_OWORD *)(a3 + 224) = v52;
      uint64_t v48 = 0;
      long long v52 = 0uLL;
      uint64_t v53 = 0;
      *(_OWORD *)(a3 + 248) = v54;
      *(void *)(a3 + 264) = v23;
      long long v54 = 0uLL;
      uint64_t v55 = 0;
      *(_OWORD *)(a3 + 272) = v56;
      unsigned int v28 = v58;
      *(_DWORD *)(a3 + 296) = v58;
      if (v28 <= 1) {
        *(void *)(a3 + 288) = v57;
      }
      long long v29 = *(_OWORD *)v68;
      *(_OWORD *)(a3 + 432) = v67;
      *(_OWORD *)(a3 + 448) = v29;
      long long v30 = v64;
      *(_OWORD *)(a3 + 368) = v63;
      *(_OWORD *)(a3 + 384) = v30;
      long long v31 = v66;
      *(_OWORD *)(a3 + 400) = v65;
      *(_OWORD *)(a3 + 416) = v31;
      long long v32 = v60;
      *(_OWORD *)(a3 + 304) = v59;
      *(_OWORD *)(a3 + 320) = v32;
      long long v33 = v62;
      *(_OWORD *)(a3 + 336) = v61;
      *(_OWORD *)(a3 + 352) = v33;
      *(void *)(a3 + 463) = *(void *)&v68[15];
    }
    sub_405F44((uint64_t)v35);
  }
  return sub_405F44((uint64_t)&v36);
}

void sub_FCC398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_405F44((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void sub_FCC3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_405F44((uint64_t)&a10);
  sub_405F44((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void sub_FCC3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_405F44((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_FCC3E0(uint64_t a1)
{
  int v2 = sub_F76A1C(a1 + 8);
  return sub_F76A1C(a1 + 3952) + v2;
}

__n128 sub_FCC418@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  a2[1].n128_u64[0] = *(void *)(a1 + 7912);
  __n128 result = *(__n128 *)(a1 + 7896);
  *a2 = result;
  return result;
}

uint64_t sub_FCC430@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  unint64_t v5 = 0x2127599BF4325C37 * (*a2 ^ ((unint64_t)*a2 >> 23));
  unint64_t v6 = (v5 ^ ~(v5 >> 47)) + ((v5 ^ (v5 >> 47)) << 21);
  unint64_t v7 = 21 * ((265 * (v6 ^ (v6 >> 24))) ^ ((265 * (v6 ^ (v6 >> 24))) >> 14));
  unint64_t v8 = 2147483649u * (v7 ^ (v7 >> 28));
  uint64_t v9 = (uint64_t *)(result
                 + 48
                 * (((((unsigned __int16)(v7 ^ (v7 >> 28)) >> 8) ^ ((-2147483647
                                                                                    * (v7 ^ (v7 >> 28))) >> 16)) ^ ((-2147483647 * (v7 ^ (v7 >> 28))) >> 24)) & 0xF));
  unint64_t v10 = v8 >> 7;
  uint64_t v11 = v9[3];
  uint64_t v12 = *v9;
  uint64_t v13 = 0x101010101010101 * (v8 & 0x7F);
  while (1)
  {
    unint64_t v14 = v10 & v11;
    uint64_t v15 = *(void *)(v12 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_5:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_8;
    }
    v3 += 8;
    unint64_t v10 = v3 + v14;
  }
  while (1)
  {
    unint64_t v17 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v11;
    long long v18 = (uint64_t *)(v9[1] + 104 * v17);
    if (*v18 == v4) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_5;
    }
  }
  if (v11 == v17)
  {
LABEL_8:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[4] = 0;
    return result;
  }
  *a3 = v9;
  a3[1] = (uint64_t *)(result + 768);
  a3[2] = (uint64_t *)(v12 + v17);
  a3[3] = v18;
  a3[4] = (uint64_t *)(v12 + v11);
  return result;
}

uint64_t sub_FCC554(uint64_t result, uint64_t *a2)
{
  *(uint64_t *)((char *)a2 + 60) = 0;
  uint64_t v3 = *a2;
  a2[3] = *a2;
  a2[4] = v3;
  int v4 = 0x7FFFFFFF;
  BOOL v5 = *((_DWORD *)a2 + 11) == -1 || *((_DWORD *)a2 + 12) == 0x7FFFFFFF;
  if (v5 || (int v6 = *((_DWORD *)a2 + 13), v6 == -1) || (v7 = *((_DWORD *)a2 + 14), v7 == 0x7FFFFFFF))
  {
    int v8 = -1;
    uint64_t v16 = a2[1];
    if (!v16) {
      return result;
    }
  }
  else
  {
    int v8 = v6 + *((_DWORD *)a2 + 11);
    int v4 = v7 + *((_DWORD *)a2 + 12);
    uint64_t v16 = a2[1];
    if (!v16) {
      return result;
    }
  }
  __n128 result = sub_FCCD0C(result + 7920, &v16, v14);
  if (v14[0])
  {
    uint64_t v9 = v15;
    int v10 = v15[13];
    if (v10 == -1)
    {
      int v12 = 0x7FFFFFFF;
      int v11 = -1;
    }
    else if (v15[14] == 0x7FFFFFFF)
    {
      int v11 = -1;
      int v12 = 0x7FFFFFFF;
    }
    else
    {
      int v11 = v15[15];
      int v12 = 0x7FFFFFFF;
      if (v11 != -1)
      {
        int v13 = v15[16];
        if (v13 == 0x7FFFFFFF)
        {
          int v11 = -1;
        }
        else
        {
          int v10 = v15[13];
          v11 += v10;
          int v12 = v13 + v15[14];
        }
      }
    }
    if (v12 != 0x7FFFFFFF && v11 != -1 && v11 == v8 && v12 == v4)
    {
      *(uint64_t *)((char *)a2 + 60) = (*((_DWORD *)a2 + 11) - v10 + v15[17]) | ((unint64_t)(*((_DWORD *)a2 + 12) - v15[14] + v15[18]) << 32);
      a2[3] = *((void *)v9 + 4);
    }
  }
  return result;
}

BOOL sub_FCC6CC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8840) == *(void *)(a1 + 8848))
  {
    int v6 = *(_DWORD *)(a2 + 48);
    int v7 = *(_DWORD *)(a2 + 64);
    BOOL v8 = __OFSUB__(v6, v7);
    int v9 = v6 - v7;
    if (v9 < 0 != v8) {
      int v9 = 0;
    }
    if (*(unsigned char *)(a1 + 8808)) {
      int v9 = *(_DWORD *)(a1 + 8884);
    }
    double v12 = (double)v9 / 10.0;
    return v7 >= (int)sub_EFB0C8(&v12, (double **)(a1 + 8816));
  }
  else
  {
    int v4 = (double **)(a1 + 8840);
    if (*(unsigned char *)(a1 + 8808)) {
      uint64_t v5 = *(void *)(a1 + 8872);
    }
    else {
      uint64_t v5 = sub_FC8998(a2, *(uint64_t **)a1);
    }
    uint64_t v11 = sub_FC86D4(a2, *(uint64_t **)a1);
    double v12 = (double)v5 / 100.0;
    return v11 >= sub_FCCE50(&v12, v4);
  }
}

uint64_t sub_FCC7D0(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8812);
  if (v4 == 2)
  {
    int v7 = *(_DWORD *)(a2 + 44);
    int v6 = *(_DWORD *)(a2 + 48);
    if (v7 != -1 && v6 != 0x7FFFFFFF && *(_DWORD *)(a2 + 52) != -1)
    {
      int v10 = *(_DWORD *)(a2 + 56);
      if (v10 != 0x7FFFFFFF)
      {
        int v11 = *(_DWORD *)(a2 + 48);
        if (v10 + v11 < *(_DWORD *)(a1 + 8868)) {
          return 1;
        }
        int v12 = *(_DWORD *)(a2 + 44);
        v68[0] = a1;
        if (v12 != -1 && v11 != 0x7FFFFFFF) {
          goto LABEL_17;
        }
        goto LABEL_26;
      }
    }
LABEL_21:
    v68[0] = a1;
    if (v7 != -1 && v6 != 0x7FFFFFFF)
    {
LABEL_17:
      int v14 = *(_DWORD *)(a2 + 52);
      int v15 = 0x7FFFFFFF;
      if (v14 == -1 || (int v16 = *(_DWORD *)(a2 + 56), v16 == 0x7FFFFFFF))
      {
        unsigned int v17 = -1;
      }
      else
      {
        unsigned int v17 = v14 + *(_DWORD *)(a2 + 44);
        int v15 = v16 + *(_DWORD *)(a2 + 48);
      }
      goto LABEL_28;
    }
LABEL_26:
    unsigned int v17 = -1;
    int v15 = 0x7FFFFFFF;
LABEL_28:
    if (v4) {
      unsigned int v19 = v15;
    }
    else {
      unsigned int v19 = v17;
    }
    unsigned int v54 = v19;
    unint64_t v66 = sub_3FD4E4(**(void **)a1, (void *)(a2 + 24), 0);
    int v67 = v20;
    uint64_t v55 = a1 + 8;
    unint64_t v21 = sub_3FD4E4(**(void **)a1, (void *)(a2 + 32), 1);
    int v65 = v22;
    uint64_t v23 = *(void *)(a2 + 32);
    *((void *)&v63 + 1) = *(void *)(a2 + 24);
    unint64_t v64 = v21;
    *(void *)&long long v63 = v23;
    unsigned int v24 = v17;
    int v25 = v15;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          if (v63 == 0) {
            return 1;
          }
          if (v24 >= v17 && (v17 < v24 || v25 >= v15)) {
            break;
          }
          if (!(void)v63) {
            return 1;
          }
          *(void *)&long long v63 = sub_F7BF0C(a1 + 3952, v63);
          if (!(void)v63) {
            return 1;
          }
          sub_FCCD0C(a1 + 7920, (uint64_t *)&v63, v61);
          if (v61[0])
          {
            if (v62[13] != -1 && v62[14] != 0x7FFFFFFF)
            {
              int v26 = v62[15];
              if (v26 != -1)
              {
                int v27 = v62[16];
                if (v27 != 0x7FFFFFFF)
                {
                  int v28 = v27 + v62[14];
                  if (v28 != 0x7FFFFFFF)
                  {
                    int v29 = v26 + v62[13];
                    if (v29 != -1 && (v29 != v17 || v28 != v15))
                    {
                      long long v30 = v62 + 16;
                      int v31 = *(_DWORD *)(a1 + 8812);
                      unsigned int v52 = v26 + v62[13];
                      if (v31) {
                        int v32 = v28;
                      }
                      else {
                        int v32 = v26 + v62[13];
                      }
                      if (!v31) {
                        long long v30 = v62 + 15;
                      }
                      if (v31 == 2)
                      {
                        uint64_t v60 = sub_F76F00(v55, v63, *(void *)a2);
                        if (v60)
                        {
                          unint64_t v58 = sub_3FD4E4(**(void **)a1, &v63, 0);
                          int v59 = v33;
                          unint64_t v56 = sub_3FD4E4(**(void **)a1, &v60, 1);
                          int v57 = v34;
                          if (sub_FCCF6C(v68, (unsigned int *)&v56, (unsigned int *)&v66, (unsigned int *)&v64, (unsigned int *)&v58))
                          {
                            return 0;
                          }
                        }
                      }
                      else
                      {
                        int v40 = *v30;
                        if (*(double *)(a1 + 8800) * (double)(v32 - *v30) < (double)(int)(v54 - *v30)) {
                          return 0;
                        }
                        uint64_t v41 = sub_F76F00(v55, v63, *(void *)a2);
                        if (v41)
                        {
                          unint64_t v42 = sub_F76E7C(v55, v41);
                          unint64_t v43 = HIDWORD(v42);
                          if (!*(_DWORD *)(a1 + 8812)) {
                            LODWORD(v43) = v42;
                          }
                          if (*(double *)(a1 + 8800) * (double)(v32 - (v40 + (int)v43)) < (double)(int)(v54 - (v40 + v43))) {
                            return 0;
                          }
                        }
                      }
                      unsigned int v17 = v52;
                      int v15 = v28;
                    }
                  }
                }
              }
            }
          }
        }
        if (!*((void *)&v63 + 1)) {
          return 1;
        }
        *((void *)&v63 + 1) = sub_F76DE8(v55, *((uint64_t *)&v63 + 1));
        if (!*((void *)&v63 + 1)) {
          return 1;
        }
        sub_FCCD0C(a1 + 7920, (uint64_t *)&v63 + 1, v61);
        if (v61[0])
        {
          if (v62[13] != -1 && v62[14] != 0x7FFFFFFF)
          {
            int v35 = v62[15];
            if (v35 != -1)
            {
              int v36 = v62[16];
              if (v36 != 0x7FFFFFFF) {
                break;
              }
            }
          }
        }
        int v37 = 2;
LABEL_64:
        if (v37 != 2) {
          return 0;
        }
      }
      int v38 = v36 + v62[14];
      int v37 = 2;
      if (v38 == 0x7FFFFFFF) {
        goto LABEL_64;
      }
      unsigned int v39 = v35 + v62[13];
      if (v39 == -1 || v39 == v24 && v38 == v25) {
        goto LABEL_64;
      }
      int v44 = *(_DWORD *)(a1 + 8812);
      unsigned int v53 = v39;
      if (v44 == 2)
      {
        int v25 = v36 + v62[14];
        uint64_t v60 = sub_F7BFA0(a1 + 3952, *((uint64_t *)&v63 + 1), *(void *)a2);
        if (!v60
          || (int v37 = 1,
              unint64_t v58 = sub_3FD4E4(**(void **)a1, (void *)&v63 + 1, 1),
              int v59 = v45,
              unint64_t v56 = sub_3FD4E4(**(void **)a1, &v60, 0),
              int v57 = v46,
              sub_FCCF6C(v68, (unsigned int *)&v58, (unsigned int *)&v66, (unsigned int *)&v64, (unsigned int *)&v56)))
        {
          unsigned int v24 = v53;
          goto LABEL_64;
        }
      }
      else
      {
        if (v44) {
          unsigned int v47 = v36 + v62[14];
        }
        else {
          unsigned int v47 = v39;
        }
        if (v44) {
          int v48 = v62[14];
        }
        else {
          int v48 = v62[13];
        }
        if (*(double *)(a1 + 8800) * (double)(int)(v47 - v48) < (double)(int)(v54 - v48)) {
          return 0;
        }
        int v25 = v36 + v62[14];
        uint64_t v49 = sub_F7BFA0(a1 + 3952, *((uint64_t *)&v63 + 1), *(void *)a2);
        if (v49)
        {
          unint64_t v50 = sub_F76E7C(a1 + 3952, v49);
          unint64_t v51 = HIDWORD(v50);
          if (!*(_DWORD *)(a1 + 8812)) {
            LODWORD(v51) = v50;
          }
          if (*(double *)(a1 + 8800) * (double)(int)(v47 - (v48 + v51)) < (double)(int)(v54 - (v48 + v51))) {
            return 0;
          }
        }
      }
      unsigned int v24 = v53;
    }
  }
  if (v4 != 3)
  {
    int v7 = *(_DWORD *)(a2 + 44);
    int v6 = *(_DWORD *)(a2 + 48);
    goto LABEL_21;
  }
  return 1;
}

uint64_t sub_FCCD0C@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  unint64_t v5 = 0x2127599BF4325C37 * (*a2 ^ ((unint64_t)*a2 >> 23));
  unint64_t v6 = (v5 ^ ~(v5 >> 47)) + ((v5 ^ (v5 >> 47)) << 21);
  unint64_t v7 = 21 * ((265 * (v6 ^ (v6 >> 24))) ^ ((265 * (v6 ^ (v6 >> 24))) >> 14));
  unint64_t v8 = 2147483649u * (v7 ^ (v7 >> 28));
  int v9 = (void *)(result
                + 48
                * (((((unsigned __int16)(v7 ^ (v7 >> 28)) >> 8) ^ ((-2147483647
                                                                                   * (v7 ^ (v7 >> 28))) >> 16)) ^ ((-2147483647 * (v7 ^ (v7 >> 28))) >> 24)) & 0xF));
  unint64_t v10 = v8 >> 7;
  uint64_t v11 = v9[3];
  uint64_t v12 = *v9;
  uint64_t v13 = 0x101010101010101 * (v8 & 0x7F);
  while (1)
  {
    unint64_t v14 = v10 & v11;
    uint64_t v15 = *(void *)(v12 + v14);
    unint64_t v16 = ((v15 ^ v13) - 0x101010101010101) & ~(v15 ^ v13) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_5:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      a3[3] = v11;
      a3[4] = 0;
      return result;
    }
    v3 += 8;
    unint64_t v10 = v3 + v14;
  }
  while (1)
  {
    unint64_t v18 = (v14 + (__clz(__rbit64(v16)) >> 3)) & v11;
    uint64_t v17 = v9[1];
    if (*(void *)(v17 + 104 * v18) == v4) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_5;
    }
  }
  BOOL v19 = v11 == v18;
  uint64_t v20 = v12 + v18;
  uint64_t v21 = v12 + v11;
  uint64_t v22 = result + 768;
  if (v11 == v18)
  {
    uint64_t v20 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = v9;
  }
  if (v11 == v18) {
    unsigned int v24 = a3;
  }
  else {
    unsigned int v24 = (void *)(v17 + 104 * v18);
  }
  if (v19) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v21;
  }
  *a3 = v23;
  a3[1] = v22;
  a3[2] = v20;
  a3[3] = v24;
  a3[4] = v25;
  return result;
}

uint64_t sub_FCCE50(double *a1, double **a2)
{
  double v2 = *a1;
  uint64_t v3 = *a2;
  double v4 = **a2;
  if (*a1 <= v4) {
    return *((void *)v3 + 1);
  }
  unint64_t v5 = a2[1];
  if ((char *)v5 - (char *)v3 >= 16)
  {
    if ((char *)v5 - (char *)v3 != 16)
    {
      unint64_t v6 = (unint64_t)((char *)v5 - (char *)v3) >> 4;
      do
      {
        unint64_t v7 = (4 * v6) & 0xFFFFFFFFFFFFFFF0;
        _X13 = (char *)v3 + v7;
        __asm { PRFM            #0, [X13] }
        unint64_t v14 = &v3[2 * (v6 >> 1)];
        _X12 = (char *)v14 + v7;
        __asm { PRFM            #0, [X12] }
        if (*v14 >= v2) {
          unint64_t v17 = 0;
        }
        else {
          unint64_t v17 = v6 >> 1;
        }
        v3 += 2 * v17;
        v6 -= v6 >> 1;
      }
      while ((uint64_t)v6 > 1);
      double v4 = *v3;
    }
    v3 += 2 * (v4 < v2);
  }
  if (v3 == v5) {
    return *((void *)v5 - 1);
  }
  double v18 = *(v3 - 2);
  double v19 = *v3;
  if (v18 == *v3) {
    return *((void *)v3 + 1);
  }
  uint64_t v21 = *((void *)v3 + 1);
  uint64_t v22 = *((void *)v3 - 1);
  double v23 = (v2 - v18) / (v19 - v18) * (double)(v21 - v22);
  if (v23 >= 0.0)
  {
    if (v23 < 4.50359963e15)
    {
      uint64_t v24 = (uint64_t)(v23 + v23) + 1;
LABEL_22:
      double v23 = (double)(v24 >> 1);
    }
  }
  else if (v23 > -4.50359963e15)
  {
    uint64_t v24 = (uint64_t)(v23 + v23);
    if (v24 >= 1) {
      --v24;
    }
    goto LABEL_22;
  }
  return v22 + (uint64_t)v23;
}

BOOL sub_FCCF6C(uint64_t *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v8 = *a1;
  unsigned int v9 = *a2;
  unsigned int v10 = a2[1];
  if (*a2 == -1 && v10 == -1)
  {
    unsigned int v30 = *a3;
    unsigned int v31 = a3[1];
    uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
    unsigned int v34 = *a4;
    if (*a3 == -1 && v31 == -1) {
      goto LABEL_92;
    }
    goto LABEL_18;
  }
  unsigned int v13 = *a5;
  unsigned int v12 = a5[1];
  if (*a5 == -1 && v12 == -1)
  {
    uint64_t v32 = 0x7FFFFFFFFFFFFFFFLL;
    unsigned int v30 = *a3;
    unsigned int v31 = a3[1];
    if (*a3 == -1 && v31 == -1) {
      goto LABEL_91;
    }
    goto LABEL_31;
  }
  long double v15 = exp(3.14159265 - (double)v10 * 6.28318531 / 4294967300.0);
  long double v16 = atan((v15 - 1.0 / v15) * 0.5) * 57.2957795 * 0.0174532925;
  v17.i64[0] = v9;
  v17.i64[1] = v13;
  long double v18 = exp(3.14159265 - (double)v12 * 6.28318531 / 4294967300.0);
  long double v19 = atan((v18 - 1.0 / v18) * 0.5) * 57.2957795 * 0.0174532925;
  float64x2_t v20 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v17), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v102 = vsubq_f64(v20, (float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1)).f64[0];
  long double v21 = sin((v16 - v19) * 0.5);
  long double v22 = v21 * v21;
  double v23 = cos(v16);
  long double v24 = v23 * cos(v19);
  long double v25 = sin(0.5 * v102);
  long double v26 = atan2(sqrt(v25 * v25 * v24 + v22), sqrt(1.0 - (v25 * v25 * v24 + v22)));
  double v27 = (v26 + v26) * 6372797.56 * 100.0;
  if (v27 >= 0.0)
  {
    double v28 = v27;
    if (v27 < 4.50359963e15)
    {
      uint64_t v29 = (uint64_t)(v27 + v27) + 1;
LABEL_40:
      double v28 = (double)(v29 >> 1);
    }
  }
  else
  {
    double v28 = v27;
    if (v27 > -4.50359963e15)
    {
      uint64_t v29 = (uint64_t)(v27 + v27);
      if (v29 >= 1) {
        --v29;
      }
      goto LABEL_40;
    }
  }
  if (v28 < 9.22337204e18)
  {
    if (v27 >= 0.0)
    {
      if (v27 >= 4.50359963e15) {
        goto LABEL_86;
      }
      uint64_t v70 = (uint64_t)(v27 + v27) + 1;
    }
    else
    {
      if (v27 <= -4.50359963e15) {
        goto LABEL_86;
      }
      uint64_t v70 = (uint64_t)(v27 + v27);
      if (v70 >= 1) {
        --v70;
      }
    }
    double v27 = (double)(v70 >> 1);
LABEL_86:
    uint64_t v32 = (uint64_t)v27;
    unsigned int v30 = *a3;
    unsigned int v31 = a3[1];
    if (*a3 != -1 || v31 != -1) {
      goto LABEL_31;
    }
LABEL_91:
    uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
    unsigned int v34 = *a4;
    goto LABEL_92;
  }
  uint64_t v32 = 0x7FFFFFFFFFFFFFFELL;
  unsigned int v30 = *a3;
  unsigned int v31 = a3[1];
  if (*a3 == -1 && v31 == -1) {
    goto LABEL_91;
  }
LABEL_31:
  long double v54 = exp(3.14159265 - (double)v10 * 6.28318531 / 4294967300.0);
  long double v55 = atan((v54 - 1.0 / v54) * 0.5) * 57.2957795 * 0.0174532925;
  v56.i64[0] = v9;
  v56.i64[1] = v30;
  long double v57 = exp(3.14159265 - (double)v31 * 6.28318531 / 4294967300.0);
  long double v58 = atan((v57 - 1.0 / v57) * 0.5) * 57.2957795 * 0.0174532925;
  float64x2_t v59 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v56), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v104 = vsubq_f64(v59, (float64x2_t)vdupq_laneq_s64((int64x2_t)v59, 1)).f64[0];
  long double v60 = sin((v55 - v58) * 0.5);
  long double v61 = v60 * v60;
  double v62 = cos(v55);
  long double v63 = v62 * cos(v58);
  long double v64 = sin(0.5 * v104);
  long double v65 = atan2(sqrt(v64 * v64 * v63 + v61), sqrt(1.0 - (v64 * v64 * v63 + v61)));
  double v66 = (v65 + v65) * 6372797.56 * 100.0;
  if (v66 >= 0.0)
  {
    double v67 = v66;
    if (v66 < 4.50359963e15)
    {
      uint64_t v68 = (uint64_t)(v66 + v66) + 1;
LABEL_58:
      double v67 = (double)(v68 >> 1);
    }
  }
  else
  {
    double v67 = v66;
    if (v66 > -4.50359963e15)
    {
      uint64_t v68 = (uint64_t)(v66 + v66);
      if (v68 >= 1) {
        --v68;
      }
      goto LABEL_58;
    }
  }
  if (v67 < 9.22337204e18)
  {
    if (v66 >= 0.0)
    {
      if (v66 >= 4.50359963e15) {
        goto LABEL_138;
      }
      uint64_t v72 = (uint64_t)(v66 + v66) + 1;
    }
    else
    {
      if (v66 <= -4.50359963e15) {
        goto LABEL_138;
      }
      uint64_t v72 = (uint64_t)(v66 + v66);
      if (v72 >= 1) {
        --v72;
      }
    }
    double v66 = (double)(v72 >> 1);
LABEL_138:
    uint64_t v33 = (uint64_t)v66;
    unsigned int v34 = *a4;
    if (v30 != -1 || v31 != -1) {
      goto LABEL_18;
    }
LABEL_92:
    unsigned int v36 = a4[1];
    uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
    if (v34 == -1 && v36 == -1) {
      goto LABEL_98;
    }
LABEL_96:
    unsigned int v79 = *a5;
    unsigned int v78 = a5[1];
    if (v79 == -1 && v78 == -1) {
      goto LABEL_98;
    }
    long double v83 = exp(3.14159265 - (double)v36 * 6.28318531 / 4294967300.0);
    long double v84 = atan((v83 - 1.0 / v83) * 0.5) * 57.2957795 * 0.0174532925;
    v85.i64[0] = v34;
    v85.i64[1] = v79;
    long double v86 = exp(3.14159265 - (double)v78 * 6.28318531 / 4294967300.0);
    long double v87 = atan((v86 - 1.0 / v86) * 0.5) * 57.2957795 * 0.0174532925;
    float64x2_t v88 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v85), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    double v105 = vsubq_f64(v88, (float64x2_t)vdupq_laneq_s64((int64x2_t)v88, 1)).f64[0];
    long double v89 = sin((v84 - v87) * 0.5);
    long double v90 = v89 * v89;
    double v91 = cos(v84);
    long double v92 = v91 * cos(v87);
    long double v93 = sin(0.5 * v105);
    long double v94 = atan2(sqrt(v93 * v93 * v92 + v90), sqrt(1.0 - (v93 * v93 * v92 + v90)));
    double v95 = (v94 + v94) * 6372797.56 * 100.0;
    if (v95 >= 0.0)
    {
      double v96 = v95;
      if (v95 >= 4.50359963e15) {
        goto LABEL_111;
      }
      uint64_t v97 = (uint64_t)(v95 + v95) + 1;
    }
    else
    {
      double v96 = v95;
      if (v95 <= -4.50359963e15) {
        goto LABEL_111;
      }
      uint64_t v97 = (uint64_t)(v95 + v95);
      if (v97 >= 1) {
        --v97;
      }
    }
    double v96 = (double)(v97 >> 1);
LABEL_111:
    if (v96 >= 9.22337204e18)
    {
      uint64_t v80 = 0x7FFFFFFFFFFFFFFELL;
      double v81 = *(double *)(v8 + 8800) * (double)v32;
      if (v81 >= 0.0) {
        goto LABEL_123;
      }
LABEL_99:
      if (v81 > -4.50359963e15)
      {
        uint64_t v82 = (uint64_t)(v81 + v81);
        if (v82 >= 1) {
          --v82;
        }
        goto LABEL_125;
      }
      return v69 + v33 + v80 > (uint64_t)v81;
    }
    if (v95 >= 0.0)
    {
      if (v95 >= 4.50359963e15) {
        goto LABEL_122;
      }
      uint64_t v98 = (uint64_t)(v95 + v95) + 1;
    }
    else
    {
      if (v95 <= -4.50359963e15) {
        goto LABEL_122;
      }
      uint64_t v98 = (uint64_t)(v95 + v95);
      if (v98 >= 1) {
        --v98;
      }
    }
    double v95 = (double)(v98 >> 1);
LABEL_122:
    uint64_t v80 = (uint64_t)v95;
    double v81 = *(double *)(v8 + 8800) * (double)v32;
    if (v81 >= 0.0) {
      goto LABEL_123;
    }
    goto LABEL_99;
  }
  uint64_t v33 = 0x7FFFFFFFFFFFFFFELL;
  unsigned int v34 = *a4;
  if (v30 == -1 && v31 == -1) {
    goto LABEL_92;
  }
LABEL_18:
  unsigned int v36 = a4[1];
  if (v34 == -1 && v36 == -1)
  {
    uint64_t v69 = 0x7FFFFFFFFFFFFFFFLL;
    unsigned int v36 = -1;
    if (v34 == -1) {
      goto LABEL_98;
    }
    goto LABEL_96;
  }
  long double v38 = exp(3.14159265 - (double)v31 * 6.28318531 / 4294967300.0);
  long double v39 = atan((v38 - 1.0 / v38) * 0.5) * 57.2957795 * 0.0174532925;
  v40.i64[0] = v30;
  v40.i64[1] = v34;
  long double v41 = exp(3.14159265 - (double)v36 * 6.28318531 / 4294967300.0);
  long double v42 = atan((v41 - 1.0 / v41) * 0.5) * 57.2957795 * 0.0174532925;
  float64x2_t v43 = vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v40), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v103 = vsubq_f64(v43, (float64x2_t)vdupq_laneq_s64((int64x2_t)v43, 1)).f64[0];
  long double v44 = sin((v39 - v42) * 0.5);
  long double v45 = v44 * v44;
  double v46 = cos(v39);
  long double v47 = v46 * cos(v42);
  long double v48 = sin(0.5 * v103);
  long double v49 = atan2(sqrt(v48 * v48 * v47 + v45), sqrt(1.0 - (v48 * v48 * v47 + v45)));
  double v50 = (v49 + v49) * 6372797.56 * 100.0;
  if (v50 >= 0.0)
  {
    double v51 = v50;
    if (v50 >= 4.50359963e15) {
      goto LABEL_50;
    }
    uint64_t v52 = (uint64_t)(v50 + v50) + 1;
  }
  else
  {
    double v51 = v50;
    if (v50 <= -4.50359963e15) {
      goto LABEL_50;
    }
    uint64_t v52 = (uint64_t)(v50 + v50);
    if (v52 >= 1) {
      --v52;
    }
  }
  double v51 = (double)(v52 >> 1);
LABEL_50:
  if (v51 >= 9.22337204e18)
  {
    uint64_t v69 = 0x7FFFFFFFFFFFFFFELL;
    if (v34 == -1 && v36 == -1) {
      goto LABEL_98;
    }
    goto LABEL_96;
  }
  if (v50 >= 0.0)
  {
    if (v50 >= 4.50359963e15) {
      goto LABEL_130;
    }
    uint64_t v71 = (uint64_t)(v50 + v50) + 1;
  }
  else
  {
    if (v50 <= -4.50359963e15) {
      goto LABEL_130;
    }
    uint64_t v71 = (uint64_t)(v50 + v50);
    if (v71 >= 1) {
      --v71;
    }
  }
  double v50 = (double)(v71 >> 1);
LABEL_130:
  uint64_t v69 = (uint64_t)v50;
  if (v34 != -1 || v36 != -1) {
    goto LABEL_96;
  }
LABEL_98:
  uint64_t v80 = 0x7FFFFFFFFFFFFFFFLL;
  double v81 = *(double *)(v8 + 8800) * (double)v32;
  if (v81 < 0.0) {
    goto LABEL_99;
  }
LABEL_123:
  if (v81 < 4.50359963e15)
  {
    uint64_t v82 = (uint64_t)(v81 + v81) + 1;
LABEL_125:
    double v81 = (double)(v82 >> 1);
  }
  return v69 + v33 + v80 > (uint64_t)v81;
}

uint64_t sub_FCDA18(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v1 = *(unsigned __int8 *)(a1 + 23);
    if (v1 != 4)
    {
      if (v1 != 7) {
        goto LABEL_29;
      }
      if (*(_DWORD *)a1 != 1818584418 || *(_DWORD *)(a1 + 3) != 1701734764)
      {
LABEL_21:
        unint64_t v5 = (_DWORD *)a1;
        if (v1 != 4) {
          goto LABEL_29;
        }
        goto LABEL_22;
      }
      return 2;
    }
    if (*(_DWORD *)a1 != 1701669236)
    {
      if (*(_DWORD *)a1 != 1953722211) {
        goto LABEL_21;
      }
      return 0;
    }
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 != 4)
  {
LABEL_11:
    if (v3 == 7)
    {
      if (**(_DWORD **)a1 == 1818584418 && *(_DWORD *)(*(void *)a1 + 3) == 1701734764) {
        return 2;
      }
      uint64_t v3 = *(void *)(a1 + 8);
    }
    if (v3 != 4) {
      goto LABEL_29;
    }
    unint64_t v5 = *(_DWORD **)a1;
LABEL_22:
    if (*v5 == 1701736302) {
      return 3;
    }
LABEL_29:
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v11, "\" provided");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v8->__r_.__value_.__r.__words[2];
    long long v12 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    unsigned int v10 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  if (**(_DWORD **)a1 != 1953722211)
  {
    if (**(_DWORD **)a1 == 1701669236) {
      return 1;
    }
    goto LABEL_11;
  }
  return 0;
}

void sub_FCDBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_FCDC44(uint64_t a1, void *a2)
{
  HIBYTE(v61[2]) = 17;
  strcpy((char *)v61, "sort_by_path_cost");
  double v4 = sub_58070(a2, (uint64_t)v61);
  if (v4)
  {
    BOOL v5 = *((_DWORD *)v4 + 12) == 4;
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  BOOL v5 = 0;
  if (SHIBYTE(v61[2]) < 0) {
LABEL_3:
  }
    operator delete(v61[0]);
LABEL_4:
  *(unsigned char *)a1 = v5;
  HIBYTE(v61[2]) = 14;
  strcpy((char *)v61, "add_debug_info");
  unint64_t v6 = sub_58070(a2, (uint64_t)v61);
  if (v6)
  {
    BOOL v7 = *((_DWORD *)v6 + 12) == 4;
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  BOOL v7 = 0;
  if (SHIBYTE(v61[2]) < 0) {
LABEL_6:
  }
    operator delete(v61[0]);
LABEL_7:
  *(_OWORD *)(a1 + 8) = 0u;
  *(unsigned char *)(a1 + 1) = v7;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64x2_t v56 = (void *)(a1 + 56);
  long double v57 = (void *)a1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  HIBYTE(v61[2]) = 21;
  *(void *)(a1 + 72) = 0;
  strcpy((char *)v61, "max_num_scanned_nodes");
  if (!sub_31AC04(a2, (uint64_t)v61))
  {
    int v8 = -1;
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
  char v60 = 21;
  strcpy(__p, "max_num_scanned_nodes");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if ((v60 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v61[2]) < 0) {
LABEL_33:
  }
    operator delete(v61[0]);
LABEL_10:
  *(_DWORD *)(a1 + 80) = v8;
  HIBYTE(v61[2]) = 17;
  strcpy((char *)v61, "max_num_via_nodes");
  if (!sub_31AC04(a2, (uint64_t)v61))
  {
    int v9 = -1;
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
  char v60 = 17;
  strcpy(__p, "max_num_via_nodes");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if ((v60 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v61[2]) < 0) {
LABEL_35:
  }
    operator delete(v61[0]);
LABEL_13:
  *(_DWORD *)(a1 + 84) = v9;
  HIBYTE(v61[2]) = 17;
  strcpy((char *)v61, "min_partial_level");
  *(_DWORD *)(a1 + 88) = sub_FC9C0C(a2, (uint64_t)v61);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  HIBYTE(v61[2]) = 18;
  strcpy((char *)v61, "max_stretch_factor");
  double v10 = sub_5C7E8(a2, (uint64_t)v61);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  *(double *)(a1 + 96) = v10;
  HIBYTE(v61[2]) = 18;
  strcpy((char *)v61, "check_cost_stretch");
  BOOL v11 = sub_29D62C(a2, (uint64_t)v61);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  *(unsigned char *)(a1 + 104) = v11;
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B91C0;
  strcpy(v61[0], "max_local_stretch_factor");
  double v12 = sub_5C7E8(a2, (uint64_t)v61);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  *(double *)(a1 + 112) = v12;
  v61[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v61[1] = xmmword_20B93A0;
  strcpy(v61[0], "use_full_path_for_plateau_threshold");
  BOOL v13 = sub_29D62C(a2, (uint64_t)v61);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  *(unsigned char *)(a1 + 120) = v13;
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B91C0;
  strcpy(v61[0], "local_stretch_check_mode");
  uint64_t v14 = sub_561B0(a2, (uint64_t)v61);
  int v15 = sub_FCDA18(v14);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 124) = v15;
  uint64_t v53 = a1 + 152;
  long double v54 = (char **)(a1 + 128);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v61[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v61[1] = xmmword_20B9250;
  strcpy(v61[0], "max_exploration_factors");
  sub_FD6E68(a2, (uint64_t)v61, a1 + 8);
  if (SHIBYTE(v61[2]) < 0)
  {
    operator delete(v61[0]);
    if (*(void *)(a1 + 8) != *(void *)(a1 + 16)) {
      goto LABEL_38;
    }
  }
  else if (*(void *)(a1 + 8) != *(void *)(a1 + 16))
  {
    goto LABEL_38;
  }
  *(_DWORD *)long long __p = 0;
  v61[0] = (char *)0x3FF8000000000000;
  sub_F16CE4((char **)(a1 + 8), __p, v61);
LABEL_38:
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B91C0;
  strcpy(v61[0], "bfs_anchor_hops_by_level");
  long double v16 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v61);
  uint64x2_t v17 = v16;
  long double v55 = (uint64_t *)(a1 + 32);
  if (SHIBYTE(v61[2]) < 0)
  {
    operator delete(v61[0]);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    if (*v17 == v19) {
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v18 = *v16;
    uint64_t v19 = v16[1];
    if (*v16 == v19) {
      goto LABEL_54;
    }
  }
  do
  {
    if (*(_DWORD *)(v18 + 8) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    float64x2_t v20 = *(void **)v18;
    HIBYTE(v61[2]) = 5;
    strcpy((char *)v61, "level");
    unsigned int v21 = sub_31AC04(v20, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    uint64_t v22 = v57[7];
    unint64_t v23 = (v57[8] - v22) >> 2;
    if (v23 <= v21)
    {
      unint64_t v24 = v21 + 1;
      LODWORD(v61[0]) = 0;
      if (v24 <= v23)
      {
        if (v24 < v23) {
          v57[8] = v22 + 4 * v24;
        }
      }
      else
      {
        sub_500DC((uint64_t)v56, v24 - v23, (const float *)v61);
      }
    }
    HIBYTE(v61[2]) = 4;
    strcpy((char *)v61, "hops");
    *(_DWORD *)(*v56 + 4 * v21) = sub_31AC04(v20, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    v18 += 16;
  }
  while (v18 != v19);
LABEL_54:
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B8870;
  strcpy(v61[0], "path_anchor_hops_by_level");
  long double v25 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v61);
  long double v26 = v25;
  if (SHIBYTE(v61[2]) < 0)
  {
    operator delete(v61[0]);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    if (*v26 == v27) {
      goto LABEL_73;
    }
    while (1)
    {
LABEL_62:
      if (*(_DWORD *)(v28 + 8) != 2)
      {
        double v50 = __cxa_allocate_exception(8uLL);
        void *v50 = &off_23FDF58;
      }
      unsigned int v30 = *(void **)v28;
      HIBYTE(v61[2]) = 5;
      strcpy((char *)v61, "level");
      unsigned int v31 = sub_31AC04(v30, (uint64_t)v61);
      if (SHIBYTE(v61[2]) < 0) {
        operator delete(v61[0]);
      }
      HIBYTE(v61[2]) = 4;
      strcpy((char *)v61, "hops");
      int v32 = sub_31AC04(v30, (uint64_t)v61);
      int v33 = v32;
      if (SHIBYTE(v61[2]) < 0)
      {
        operator delete(v61[0]);
        if (v33)
        {
LABEL_69:
          uint64_t v29 = v57[4];
          unint64_t v34 = (v57[5] - v29) >> 2;
          if (v34 <= v31)
          {
            unint64_t v35 = v31 + 1;
            LODWORD(v61[0]) = 0;
            if (v35 > v34)
            {
              sub_500DC((uint64_t)v55, v35 - v34, (const float *)v61);
              uint64_t v29 = *v55;
            }
            else if (v35 < v34)
            {
              v57[5] = v29 + 4 * v35;
            }
          }
          *(_DWORD *)(v29 + 4 * v31) = v33;
        }
      }
      else if (v32)
      {
        goto LABEL_69;
      }
      v28 += 16;
      if (v28 == v27) {
        goto LABEL_73;
      }
    }
  }
  uint64_t v28 = *v25;
  uint64_t v27 = v25[1];
  if (*v25 != v27) {
    goto LABEL_62;
  }
LABEL_73:
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B8870;
  strcpy(v61[0], "plateau_time_thresholds_s");
  unsigned int v36 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v61);
  int v37 = v36;
  if (SHIBYTE(v61[2]) < 0)
  {
    operator delete(v61[0]);
    uint64_t v38 = *v37;
    uint64_t v39 = v37[1];
    if (*v37 == v39) {
      goto LABEL_83;
    }
  }
  else
  {
    uint64_t v38 = *v36;
    uint64_t v39 = v36[1];
    if (*v36 == v39) {
      goto LABEL_83;
    }
  }
  do
  {
    if (*(_DWORD *)(v38 + 8) != 2)
    {
      double v51 = __cxa_allocate_exception(8uLL);
      *double v51 = &off_23FDF58;
    }
    uint64x2_t v40 = *(void **)v38;
    *(void *)long long __p = 0;
    HIBYTE(v61[2]) = 9;
    strcpy((char *)v61, "threshold");
    double v41 = sub_5C7E8(v40, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    *(double *)long long __p = v41;
    HIBYTE(v61[2]) = 4;
    strcpy((char *)v61, "time");
    LODWORD(v58) = 10 * sub_319F48(v40, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    sub_EFC730(v54, __p, &v58);
    v38 += 16;
  }
  while (v38 != v39);
LABEL_83:
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B8890;
  strcpy(v61[0], "plateau_distance_thresholds_m");
  long double v42 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v61);
  float64x2_t v43 = v42;
  if (SHIBYTE(v61[2]) < 0)
  {
    operator delete(v61[0]);
    uint64_t v44 = *v43;
    uint64_t v45 = v43[1];
    if (*v43 == v45) {
      return v57;
    }
  }
  else
  {
    uint64_t v44 = *v42;
    uint64_t v45 = v42[1];
    if (*v42 == v45) {
      return v57;
    }
  }
  do
  {
    if (*(_DWORD *)(v44 + 8) != 2)
    {
      uint64_t v52 = __cxa_allocate_exception(8uLL);
      *uint64_t v52 = &off_23FDF58;
    }
    double v46 = *(void **)v44;
    *(void *)long long __p = 0;
    HIBYTE(v61[2]) = 9;
    strcpy((char *)v61, "threshold");
    double v47 = sub_5C7E8(v46, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    *(double *)long long __p = v47;
    HIBYTE(v61[2]) = 8;
    strcpy((char *)v61, "distance");
    uint64_t v58 = 100 * sub_FC9CCC(v46, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    sub_FC9D8C(v53, __p, &v58);
    v44 += 16;
  }
  while (v44 != v45);
  return v57;
}

void sub_FCE778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  int v33 = *a14;
  if (*a14)
  {
    v29[20] = v33;
    operator delete(v33);
    unint64_t v34 = *v28;
    if (!*v28)
    {
LABEL_3:
      unint64_t v35 = *a20;
      if (!*a20) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v34 = *v28;
    if (!*v28) {
      goto LABEL_3;
    }
  }
  v29[17] = v34;
  operator delete(v34);
  unint64_t v35 = *a20;
  if (!*a20)
  {
LABEL_4:
    unsigned int v36 = *v31;
    if (!*v31) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  v29[8] = v35;
  operator delete(v35);
  unsigned int v36 = *v31;
  if (!*v31)
  {
LABEL_5:
    int v37 = *v30;
    if (!*v30) {
LABEL_12:
    }
      _Unwind_Resume(exception_object);
LABEL_11:
    v29[2] = v37;
    operator delete(v37);
    goto LABEL_12;
  }
LABEL_10:
  v29[5] = v36;
  operator delete(v36);
  int v37 = *v30;
  if (!*v30) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

uint64_t sub_FCE9DC(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = a2;
  sub_F7D728(a1 + 8, a2, 0);
  sub_F82704(a1 + 3952, *(void *)a1, 0);
  *(_OWORD *)(a1 + 7896) = xmmword_20B8E30;
  *(void *)(a1 + 7912) = 0x7FFFFFFFFFFFFFFFLL;
  v9[0] = 10;
  v9[1] = (unint64_t)&v8;
  v9[2] = (unint64_t)&v7;
  v9[3] = (unint64_t)&v6;
  sub_FD5D90((void *)(a1 + 7920), v9);
  sub_FCDC44(a1 + 8688, a3);
  *(void *)(a1 + 8864) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8872) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8880) = 0x7FFFFFFFFFFFFFFFLL;
  return a1;
}

void sub_FCEAB4(_Unwind_Exception *a1)
{
  sub_328138(v3);
  sub_BF0DE8(v2);
  sub_BF0DE8(v1);
  _Unwind_Resume(a1);
}

void sub_FCEAE0(_Unwind_Exception *a1)
{
  sub_BF0DE8(v1);
  _Unwind_Resume(a1);
}

void sub_FCEAF8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, int *a5@<X4>, int a6@<W5>, void *a7@<X6>, unsigned int a8@<W7>, uint64_t *a9@<X8>)
{
  uint64_t v13 = 0;
  uint64_t v105 = a1 + 7896;
  unsigned int v117 = a8;
  do
  {
    uint64_t v15 = a1 + v13;
    if (*(void *)(a1 + v13 + 7936))
    {
      unint64_t v16 = *(void *)(v15 + 7944);
      if (v16 >= 0x80)
      {
        uint64_t v14 = (void *)(a1 + v13);
        operator delete(*(void **)(v15 + 7920));
        *(void *)(v15 + 7920) = &unk_20E1710;
        v14[995] = 0;
        v14[991] = 0;
        v14[993] = 0;
        v14[992] = 0;
      }
      else if (v16)
      {
        *(void *)(v15 + 7936) = 0;
        memset(*(void **)(v15 + 7920), 128, v16 + 8);
        *(unsigned char *)(*(void *)(v15 + 7920) + v16) = -1;
        unint64_t v17 = *(void *)(v15 + 7944);
        if (v17 == 7) {
          uint64_t v18 = 6;
        }
        else {
          uint64_t v18 = v17 - (v17 >> 3);
        }
        *(void *)(a1 + v13 + 7960) = v18 - *(void *)(v15 + 7936);
      }
    }
    v13 += 48;
  }
  while (v13 != 768);
  *(void *)(a1 + 8880) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8864) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8872) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)uint64_t v105 = xmmword_20B8E30;
  *(void *)(a1 + 7912) = 0x7FFFFFFFFFFFFFFFLL;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  int v19 = a6;
  *(_OWORD *)(a1 + 8864) = *((_OWORD *)sub_F5B780(*(void *)a1 + 4176, a7, (int *)a4, a5, a6, 0) + 1);
  if (*(_DWORD *)(a1 + 8864) != -1)
  {
    int v20 = *(_DWORD *)(a1 + 8868);
    if (v20 != 0x7FFFFFFF && *(void *)(a1 + 8872) != 0x7FFFFFFFFFFFFFFFLL)
    {
      int v116 = 0x7FFFFFFF;
      unsigned int v115 = 0x7FFFFFFF;
      int v21 = *a5;
      if (*a5 != 0x7FFFFFFF)
      {
        int v116 = *a5;
        int v22 = v20 / 10;
        int v23 = v20 % 10;
        if (v20 < 0) {
          char v24 = -5;
        }
        else {
          char v24 = 5;
        }
        unsigned int v115 = v22 + v21 + (((103 * (char)(v24 + v23)) >> 15) & 1) + ((103 * (char)(v24 + v23)) >> 10);
      }
      sub_FCF808((uint64_t)v114, *(void *)a1, (uint64_t)a7, (void *)(a1 + 8720));
      uint64_t v27 = (void *)*a2;
      long double v26 = (void *)a2[1];
      if ((void *)*a2 != v26)
      {
        do
        {
          LODWORD(__p) = 0;
          sub_EDFF98((char **)v114, v27, &__p);
          v27 += 10;
        }
        while (v27 != v26);
      }
      uint64_t v29 = (void *)*a3;
      uint64_t v28 = (void *)a3[1];
      if ((void *)*a3 != v28)
      {
        do
        {
          LODWORD(__p) = 0;
          sub_EDFF98((char **)v114, v29, &__p);
          v29 += 10;
        }
        while (v29 != v28);
      }
      unsigned int v30 = *(_DWORD *)(a1 + 8864);
      unsigned int v31 = *(unsigned int **)(a1 + 8696);
      unsigned int v32 = *v31;
      if (v30 <= *v31)
      {
        double v36 = *((double *)v31 + 1);
        unint64_t v34 = a9;
      }
      else
      {
        int v33 = *(int **)(a1 + 8704);
        if ((char *)v33 - (char *)v31 >= 16)
        {
          unint64_t v34 = a9;
          if ((char *)v33 - (char *)v31 != 16)
          {
            unint64_t v37 = (unint64_t)((char *)v33 - (char *)v31) >> 4;
            do
            {
              unint64_t v38 = (4 * v37) & 0xFFFFFFFFFFFFFFF0;
              _X14 = (uint64_t)v31 + v38;
              __asm { PRFM            #0, [X14] }
              uint64_t v45 = &v31[4 * (v37 >> 1)];
              _X13 = (char *)v45 + v38;
              __asm { PRFM            #0, [X13] }
              if (*v45 >= v30) {
                unint64_t v48 = 0;
              }
              else {
                unint64_t v48 = v37 >> 1;
              }
              v31 += 4 * v48;
              v37 -= v37 >> 1;
            }
            while ((uint64_t)v37 > 1);
            unsigned int v32 = *v31;
          }
          v31 += 4 * (v32 < v30);
          if (v31 != (unsigned int *)v33) {
            goto LABEL_26;
          }
        }
        else
        {
          unint64_t v34 = a9;
          if (v31 != (unsigned int *)v33)
          {
LABEL_26:
            int v35 = *(v31 - 4);
            if (*v31 == v35)
            {
              double v36 = *((double *)v31 + 1);
            }
            else
            {
              double v25 = *((double *)v31 - 1);
              double v36 = v25 + (double)(v30 - v35) / (double)(*v31 - v35) * (*((double *)v31 + 1) - v25);
            }
            goto LABEL_39;
          }
        }
        double v36 = *((double *)v33 - 1);
      }
LABEL_39:
      int v113 = sub_ECE090((_DWORD *)(a1 + 8864), v36, v25);
      sub_F7F5BC(a1 + 8, (uint64_t)a2, a4, &v116, v19, &v113, 0x7FFFFFFF, &v117, (uint64_t *)v114, (void *)(a1 + 8744), *(_DWORD *)(a1 + 8768), v96, *(_DWORD *)(a1 + 8776));
      sub_F809F4(a1 + 8, (uint64_t)&__p);
      sub_33998(v105, (uint64_t)&__p);
      sub_F842AC(a1 + 3952, (uint64_t)a3, a4, &v115, v19, &v113, 0x7FFFFFFF, &v117, (uint64_t *)v114, (void *)(a1 + 8744), *(_DWORD *)(a1 + 8768), v97, *(_DWORD *)(a1 + 8776));
      sub_F851F0(a1 + 3952, (uint64_t)&__p);
      sub_33998(v105, (uint64_t)&__p);
      sub_FD0084((uint64_t **)a1, a2, a3, a4, v19, &v111);
      long double v49 = v111;
      if (v111 != v112)
      {
        double v50 = v112;
        double v51 = (char *)v111 + 32;
        do
        {
          sub_FD0AB8(a1, v51 - 4, (uint64_t)&__p);
          if (!sub_EAE144(&__p))
          {
            if (*(unsigned char *)(v105 + 793))
            {
              unsigned int v54 = sub_3FD4E4(**(void **)a1, v51 - 1, 0) >> 32;
              unsigned int v55 = sub_3FD4E4(**(void **)a1, v51, 0) >> 32;
              sub_E1B4((uint64_t)v108);
              *(void *)((char *)v109 + *(void *)(v108[0] - 24)) = 9;
              uint64x2_t v56 = sub_188FC78(v109, (uint64_t)"\"ViaPath\": {", 12);
              long double v57 = sub_188FC78(v56, (uint64_t)"  \"cost_function\": \"", 20);
              char v58 = *(unsigned char *)(a4 + 31);
              if (v58 >= 0) {
                uint64_t v59 = a4 + 8;
              }
              else {
                uint64_t v59 = *(void *)(a4 + 8);
              }
              if (v58 >= 0) {
                uint64_t v60 = *(unsigned __int8 *)(a4 + 31);
              }
              else {
                uint64_t v60 = *(void *)(a4 + 16);
              }
              long double v61 = sub_188FC78(v57, v59, v60);
              double v62 = sub_188FC78(v61, (uint64_t)"\",", 2);
              long double v63 = sub_188FC78(v62, (uint64_t)"  \"via_node\": \"", 15);
              long double v64 = sub_3D1870(v63, *(v51 - 4));
              long double v65 = sub_188FC78(v64, (uint64_t)"\",", 2);
              double v66 = sub_188FC78(v65, (uint64_t)"  \"path_cost\": \"", 16);
              std::ostream::operator<<();
              sub_188FC78(v66, (uint64_t)",", 1);
              std::ostream::operator<<();
              double v67 = sub_188FC78(v66, (uint64_t)"\",", 2);
              uint64_t v68 = sub_188FC78(v67, (uint64_t)"  \"path_length_lb\": \"", 21);
              std::ostream::operator<<();
              uint64_t v69 = sub_188FC78(v68, (uint64_t)"\",", 2);
              uint64_t v70 = sub_188FC78(v69, (uint64_t)"  \"plateau\": {", 14);
              uint64_t v71 = sub_188FC78(v70, (uint64_t)"    \"length_lb\": \"", 18);
              sub_FC86D4((uint64_t)(v51 - 4), *(uint64_t **)a1);
              std::ostream::operator<<();
              uint64_t v72 = sub_188FC78(v71, (uint64_t)"\",", 2);
              sub_188FC78(v72, (uint64_t)"    \"first_node_coord\":\"", 24);
              long double v73 = exp((double)v54 * -6.28318531 / 4294967300.0 + 3.14159265);
              atan((v73 + -1.0 / v73) * 0.5);
              uint64_t v74 = (void *)std::ostream::operator<<();
              sub_188FC78(v74, (uint64_t)",", 1);
              unint64_t v75 = (void *)std::ostream::operator<<();
              int v76 = sub_188FC78(v75, (uint64_t)"\",", 2);
              sub_188FC78(v76, (uint64_t)"    \"last_node_coord\": \"", 24);
              long double v77 = exp((double)v55 * -6.28318531 / 4294967300.0 + 3.14159265);
              atan((v77 + -1.0 / v77) * 0.5);
              unsigned int v78 = (void *)std::ostream::operator<<();
              sub_188FC78(v78, (uint64_t)",", 1);
              unsigned int v79 = (void *)std::ostream::operator<<();
              uint64_t v80 = sub_188FC78(v79, (uint64_t)"\"", 1);
              double v81 = sub_188FC78(v80, (uint64_t)"  }", 3);
              sub_188FC78(v81, (uint64_t)"}", 1);
              std::stringbuf::str();
              if (SHIBYTE(v119) < 0) {
                operator delete((void *)__p);
              }
              long long __p = v106;
              uint64_t v119 = v107;
              v108[0] = v100;
              *(void *)((char *)v108 + *(void *)(v100 - 24)) = v99;
              v109[0] = v98;
              if (v110 < 0) {
                operator delete((void *)v109[9]);
              }
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              std::ios::~ios();
            }
            unint64_t v82 = v34[1];
            if (v82 >= v34[2])
            {
              uint64_t v52 = sub_446BBC(v34, &__p);
            }
            else
            {
              long long v83 = __p;
              *(void *)(v82 + 16) = v119;
              *(void *)(v82 + 24) = 0;
              *(_OWORD *)unint64_t v82 = v83;
              uint64_t v119 = 0;
              long long __p = 0uLL;
              *(void *)(v82 + 32) = 0;
              *(void *)(v82 + 40) = 0;
              *(_OWORD *)(v82 + 24) = v120;
              *(void *)(v82 + 40) = v121;
              long long v120 = 0uLL;
              uint64_t v121 = 0;
              long long v84 = v122;
              long long v85 = v123;
              long long v86 = v124[0];
              *(_OWORD *)(v82 + 94) = *(_OWORD *)((char *)v124 + 14);
              *(_OWORD *)(v82 + 64) = v85;
              *(_OWORD *)(v82 + 80) = v86;
              *(_OWORD *)(v82 + 48) = v84;
              *(void *)(v82 + 112) = 0;
              *(void *)(v82 + 120) = 0;
              *(void *)(v82 + 128) = 0;
              *(void *)(v82 + 136) = 0;
              *(_OWORD *)(v82 + 112) = v125;
              *(void *)(v82 + 128) = v126;
              long long v125 = 0uLL;
              uint64_t v126 = 0;
              *(void *)(v82 + 144) = 0;
              *(void *)(v82 + 152) = 0;
              *(_OWORD *)(v82 + 136) = v127;
              long long v127 = 0uLL;
              *(void *)(v82 + 152) = v128;
              *(void *)(v82 + 160) = 0;
              uint64_t v128 = 0;
              *(void *)(v82 + 168) = 0;
              *(void *)(v82 + 176) = 0;
              *(_OWORD *)(v82 + 160) = v129;
              *(void *)(v82 + 176) = v130;
              long long v129 = 0uLL;
              uint64_t v130 = 0;
              long long v87 = v131;
              uint64_t v88 = v133;
              *(_OWORD *)(v82 + 200) = v132;
              *(_OWORD *)(v82 + 184) = v87;
              *(void *)(v82 + 216) = v88;
              *(void *)(v82 + 224) = 0;
              *(void *)(v82 + 232) = 0;
              *(void *)(v82 + 240) = 0;
              *(_OWORD *)(v82 + 224) = v134;
              long long v134 = 0uLL;
              *(void *)(v82 + 240) = v135;
              *(void *)(v82 + 248) = 0;
              uint64_t v135 = 0;
              *(void *)(v82 + 256) = 0;
              *(void *)(v82 + 264) = 0;
              *(_OWORD *)(v82 + 248) = v136;
              *(void *)(v82 + 264) = v137;
              long long v136 = 0uLL;
              uint64_t v137 = 0;
              *(_OWORD *)(v82 + 272) = v138;
              *(_DWORD *)(v82 + 296) = v140;
              if (v140 <= 1) {
                *(void *)(v82 + 288) = v139;
              }
              *(_OWORD *)(v82 + 304) = v141;
              long long v89 = v147;
              long long v91 = v144;
              long long v90 = v145;
              *(_OWORD *)(v82 + 384) = v146;
              *(_OWORD *)(v82 + 400) = v89;
              *(_OWORD *)(v82 + 352) = v91;
              *(_OWORD *)(v82 + 368) = v90;
              long long v93 = v149;
              long long v92 = *(_OWORD *)v150;
              long long v94 = v148;
              *(void *)(v82 + 463) = *(void *)&v150[15];
              *(_OWORD *)(v82 + 432) = v93;
              *(_OWORD *)(v82 + 448) = v92;
              *(_OWORD *)(v82 + 416) = v94;
              long long v95 = v143;
              *(_OWORD *)(v82 + 320) = v142;
              *(_OWORD *)(v82 + 336) = v95;
              uint64_t v52 = v82 + 472;
            }
            v34[1] = v52;
          }
          sub_405F44((uint64_t)&__p);
          uint64_t v53 = v51 + 8;
          v51 += 12;
        }
        while (v53 != v50);
        long double v49 = v111;
      }
      if (v49)
      {
        long long v112 = v49;
        operator delete(v49);
      }
      if (v114[0])
      {
        v114[1] = v114[0];
        operator delete(v114[0]);
      }
    }
  }
}

void sub_FCF6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  unsigned int v32 = (void *)STACK[0x218];
  if (!STACK[0x218])
  {
    sub_4323C0(a31);
    _Unwind_Resume(a1);
  }
  STACK[0x220] = (unint64_t)v32;
  operator delete(v32);
  sub_4323C0(a31);
  _Unwind_Resume(a1);
}

uint64_t sub_FCF808(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  double v4 = (void **)result;
  if (*a4 != a4[1])
  {
    uint64_t v5 = a3;
    __n128 result = sub_5231C(a3);
    if (*(void *)result != *(void *)(result + 8))
    {
      if (*(unsigned char *)(a2 + 30352))
      {
        __n128 result = sub_51D60((unsigned __int8 *)(a2 + 8));
        if (result)
        {
          uint64_t *v4 = 0;
          v4[1] = 0;
          int v96 = v4;
          v4[2] = 0;
          uint64_t v7 = *(void *)(a2 + 14664);
          unsigned int v8 = sub_2D0F10((uint64_t)(a4[1] - *a4) >> 2);
          unsigned int v9 = *(_DWORD *)(v7 + 3872);
          if (v9 != -1 || (unsigned int v9 = 1, (v79 = sub_F93238(v7, 1u, 1)) == 0))
          {
LABEL_6:
            if (v9 >= v8) {
              uint64_t v10 = v8;
            }
            else {
              uint64_t v10 = v9;
            }
            __int16 v106 = 256;
            uint64_t v91 = v10;
            if (v10 < 2) {
              return sub_5231C(v5);
            }
            uint64_t v11 = 0;
            uint64_t v97 = v7 + 16;
            while (1)
            {
              if (!*((unsigned char *)&v106 + v11))
              {
                uint64_t v13 = 0;
                uint64_t v14 = 1;
                goto LABEL_19;
              }
              __n128 result = sub_5231C(v5);
              uint64_t v12 = *(void *)(result + 8) - *(void *)result;
              if (v12 >= 96) {
                break;
              }
LABEL_14:
              if (++v11 == 2) {
                return result;
              }
            }
            uint64_t v13 = -1 - 0x5555555555555555 * (v12 >> 5);
            uint64_t v14 = -1;
LABEL_19:
            uint64_t v98 = 96 * v14;
            uint64_t v99 = v14;
            uint64_t v15 = 1;
            uint64_t v90 = v11;
            while (1)
            {
              __n128 result = sub_5231C(v5);
              if (v13 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(result + 8) - *(void *)result) >> 5))) {
                goto LABEL_14;
              }
              unsigned int v103 = *(_DWORD *)(*a4 + 4 * v15);
              if (v103) {
                break;
              }
LABEL_115:
              if (++v15 == v91 || v13 < 0) {
                goto LABEL_14;
              }
            }
            int v105 = v15;
            uint64_t v16 = *(void *)sub_5231C(v5) + 96 * v13;
            unint64_t v17 = *(void *)(v16 + 32);
            BOOL v18 = (v17 & 0xFF000000000000) == 0;
            unint64_t v19 = ((v17 >> 16) & 0xFFFF0000 | (v17 << 32) | (2 * v18)) + 4 * (unsigned __int16)*(_DWORD *)(v16 + 80);
            unint64_t v20 = sub_F968AC(v7, HIDWORD(v19) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v19) << 32), v18, &v105);
            uint64_t v93 = v15;
            unsigned int v104 = 0;
            unint64_t v21 = HIDWORD(v20);
            unsigned int v22 = v20;
LABEL_23:
            int v101 = v21;
            unsigned int v102 = v22;
            uint64_t v23 = 96 * v13;
            while (1)
            {
              __n128 result = sub_5231C(v5);
              if (v13 < 0
                || (v13 < (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(result + 8) - *(void *)result) >> 5))
                  ? (BOOL v24 = v104 >= v103)
                  : (BOOL v24 = 1),
                    v24))
              {
                uint64_t v11 = v90;
                uint64_t v15 = v93;
                goto LABEL_115;
              }
              uint64_t v25 = v5;
              uint64_t v26 = *(void *)sub_5231C(v5) + v23;
              unint64_t v27 = *(void *)(v26 + 32);
              char v100 = *(unsigned char *)(v26 + 88);
              uint64_t v28 = v27 & 0xFF000000000000;
              uint64_t v29 = ((v27 >> 16) & 0xFFFF0000 | (v27 << 32) | (2 * ((v27 & 0xFF000000000000) == 0)))
                  + 4 * (unsigned __int16)*(_DWORD *)(v26 + 80);
              int v109 = 1;
              unsigned int v110 = HIDWORD(v29);
              uint64_t v107 = &v109;
              long long v108 = &v110;
              unint64_t v30 = *(void *)(v7 + 3856) + 1;
              *(void *)(v7 + 3856) = v30;
              if (!*(void *)v7) {
                goto LABEL_68;
              }
              if (*(_DWORD *)(v7 + 688) == HIDWORD(v29))
              {
                unsigned int v31 = 28;
              }
              else if (*(_DWORD *)(v7 + 712) == HIDWORD(v29))
              {
                unsigned int v31 = 29;
              }
              else if (*(_DWORD *)(v7 + 736) == HIDWORD(v29))
              {
                unsigned int v31 = 30;
              }
              else
              {
                if (*(_DWORD *)(v7 + 760) != HIDWORD(v29))
                {
                  unint64_t v47 = *(void *)(v7 + 744);
                  unint64_t v48 = *(void *)(v7 + 720);
                  unint64_t v49 = *(void *)(v7 + 696);
                  unint64_t v94 = *(void *)(v7 + 768);
                  int v33 = (unsigned int *)sub_2AB884(*(void *)v7, 7, HIDWORD(v29), 1);
                  if (v49 >= v30) {
                    unint64_t v50 = v30;
                  }
                  else {
                    unint64_t v50 = v49;
                  }
                  int v51 = 28;
                  if (v49 >= v30) {
                    int v51 = 0;
                  }
                  if (v48 < v50)
                  {
                    unint64_t v50 = v48;
                    int v51 = 29;
                  }
                  if (v47 < v50)
                  {
                    int v51 = 30;
                    unint64_t v50 = v47;
                  }
                  BOOL v24 = v94 >= v50;
                  unsigned int v52 = 31;
                  if (v24) {
                    unsigned int v52 = v51;
                  }
                  uint64_t v53 = v97 + 24 * v52;
                  *(_DWORD *)uint64_t v53 = v110;
                  *(void *)(v53 + 8) = *(void *)(v7 + 3856);
                  *(void *)(v53 + 16) = v33;
                  if (!v33) {
                    goto LABEL_68;
                  }
                  goto LABEL_39;
                }
                unsigned int v31 = 31;
              }
              ++*(void *)(v7 + 3864);
              uint64_t v32 = v97 + 24 * v31;
              *(void *)(v32 + 8) = v30;
              int v33 = *(unsigned int **)(v32 + 16);
              if (!v33) {
                goto LABEL_68;
              }
LABEL_39:
              unint64_t v34 = (int *)((char *)v33 + *v33);
              int v35 = (unsigned __int16 *)((char *)v34 - *v34);
              if (*v35 < 5u) {
                goto LABEL_48;
              }
              uint64_t v36 = v35[2];
              if (!v36) {
                goto LABEL_48;
              }
              uint64_t v37 = sub_F965E8((unsigned int *)((char *)v34 + v36 + *(unsigned int *)((char *)v34 + v36)), WORD1(v29));
              unint64_t v38 = (unsigned __int16 *)((char *)v34 - *v34);
              if (*v38 < 7u)
              {
                uint64_t v39 = 0;
              }
              else
              {
                uint64_t v39 = (unsigned int *)v38[3];
                if (v39) {
                  uint64_t v39 = (unsigned int *)((char *)v39 + (void)v34 + *(unsigned int *)((char *)v39 + (void)v34));
                }
              }
              uint64x2_t v40 = (int *)sub_F96748(v39, *(unsigned __int16 *)(v37 + 2 * (v28 != 0)));
              double v41 = (unsigned __int16 *)((char *)v40 - *v40);
              if (*v41 >= 5u && (uint64_t v42 = v41[2]) != 0) {
                float64x2_t v43 = (unsigned int *)((char *)v40 + v42 + *(unsigned int *)((char *)v40 + v42));
              }
              else {
LABEL_48:
              }
                float64x2_t v43 = 0;
              uint64_t v44 = (unsigned int *)sub_BE1E78(v43, v105 - 1);
              unsigned int v22 = *v44;
              LODWORD(v21) = v44[1];
              if (!*(unsigned char *)(v7 + 3876)) {
                goto LABEL_70;
              }
              int v109 = 1;
              unsigned int v110 = v22;
              uint64_t v107 = &v109;
              long long v108 = &v110;
              unint64_t v45 = *(void *)(v7 + 3856) + 1;
              *(void *)(v7 + 3856) = v45;
              if (!*(void *)v7) {
                goto LABEL_68;
              }
              if (*(_DWORD *)(v7 + 688) == v22)
              {
                unsigned int v46 = 28;
                goto LABEL_77;
              }
              if (*(_DWORD *)(v7 + 712) == v22)
              {
                unsigned int v46 = 29;
                goto LABEL_77;
              }
              if (*(_DWORD *)(v7 + 736) == v22)
              {
                unsigned int v46 = 30;
                goto LABEL_77;
              }
              if (*(_DWORD *)(v7 + 760) == v22)
              {
                unsigned int v46 = 31;
LABEL_77:
                ++*(void *)(v7 + 3864);
                uint64_t v54 = v97 + 24 * v46;
                *(void *)(v54 + 8) = v45;
                unsigned int v55 = *(unsigned int **)(v54 + 16);
                if (v55) {
                  goto LABEL_78;
                }
                goto LABEL_68;
              }
              unint64_t v95 = *(void *)(v7 + 744);
              unint64_t v59 = *(void *)(v7 + 720);
              unint64_t v60 = *(void *)(v7 + 696);
              unint64_t v89 = *(void *)(v7 + 768);
              unsigned int v55 = (unsigned int *)sub_2AB884(*(void *)v7, 7, v22, 1);
              if (v60 >= v45) {
                unint64_t v61 = v45;
              }
              else {
                unint64_t v61 = v60;
              }
              int v62 = 28;
              if (v60 >= v45) {
                int v62 = 0;
              }
              if (v59 < v61)
              {
                unint64_t v61 = v59;
                int v62 = 29;
              }
              if (v95 < v61)
              {
                int v62 = 30;
                unint64_t v61 = v95;
              }
              BOOL v24 = v89 >= v61;
              unsigned int v63 = 31;
              if (v24) {
                unsigned int v63 = v62;
              }
              uint64_t v64 = v97 + 24 * v63;
              *(_DWORD *)uint64_t v64 = v110;
              *(void *)(v64 + 8) = *(void *)(v7 + 3856);
              *(void *)(v64 + 16) = v55;
              if (v55)
              {
LABEL_78:
                uint64x2_t v56 = (int *)((char *)v55 + *v55);
                long double v57 = (unsigned __int16 *)((char *)v56 - *v56);
                if (*v57 >= 9u)
                {
                  uint64_t v58 = v57[4];
                  if (v58)
                  {
                    if (*(int *)((char *)v56 + v58 + *(unsigned int *)((char *)v56 + v58))) {
                      goto LABEL_70;
                    }
                  }
                }
                goto LABEL_69;
              }
LABEL_68:
              sub_F933C8(&v107);
LABEL_69:
              unsigned int v22 = 0;
              LODWORD(v21) = -1;
LABEL_70:
              v13 += v99;
              uint64_t v5 = v25;
              if (v22 == v102)
              {
                v23 += v98;
                if (v21 == v101) {
                  continue;
                }
              }
              uint64_t v65 = v29 | v100 & 1;
              double v67 = (char *)v96[1];
              unint64_t v66 = (unint64_t)v96[2];
              if ((unint64_t)v67 < v66)
              {
                *(void *)double v67 = v65;
                *((_DWORD *)v67 + 2) = v105;
                uint64_t v68 = v67 + 16;
LABEL_111:
                v96[1] = v68;
                ++v104;
                goto LABEL_23;
              }
              uint64_t v69 = (char *)*v96;
              uint64_t v70 = (v67 - (unsigned char *)*v96) >> 4;
              unint64_t v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 60) {
                sub_2E00();
              }
              uint64_t v72 = v66 - (void)v69;
              if (v72 >> 3 > v71) {
                unint64_t v71 = v72 >> 3;
              }
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v73 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v71;
              }
              if (v73 >> 60) {
                sub_188D718();
              }
              uint64_t v74 = v65;
              unint64_t v75 = (char *)operator new(16 * v73);
              int v76 = &v75[16 * v70];
              *(void *)int v76 = v74;
              *((_DWORD *)v76 + 2) = v105;
              if (v67 == v69)
              {
                uint64_t v68 = v76 + 16;
                *int v96 = &v75[16 * v70];
                v96[1] = v76 + 16;
                v96[2] = &v75[16 * v73];
                if (v69) {
                  goto LABEL_109;
                }
              }
              else
              {
                long double v77 = &v75[16 * v70];
                do
                {
                  unsigned int v78 = v77 - 16;
                  *((_OWORD *)v77 - 1) = *((_OWORD *)v67 - 1);
                  v67 -= 16;
                  v77 -= 16;
                }
                while (v67 != v69);
                uint64_t v68 = v76 + 16;
                *int v96 = v78;
                v96[1] = v76 + 16;
                v96[2] = &v75[16 * v73];
                if (v69) {
LABEL_109:
                }
                  operator delete(v69);
              }
              uint64_t v5 = v25;
              goto LABEL_111;
            }
          }
          uint64_t v80 = &v79[-*(int *)v79];
          unsigned int v81 = *(unsigned __int16 *)v80;
          if (v81 < 0xB)
          {
            if (v81 < 9)
            {
LABEL_129:
              unsigned int v9 = 1;
              goto LABEL_6;
            }
          }
          else if (*((_WORD *)v80 + 5))
          {
            unint64_t v82 = &v79[*((unsigned __int16 *)v80 + 5) + *(unsigned int *)&v79[*((unsigned __int16 *)v80 + 5)]];
            long long v83 = &v82[-*(int *)v82];
            if (*(unsigned __int16 *)v83 >= 5u && (uint64_t v84 = *((unsigned __int16 *)v83 + 2)) != 0) {
              unsigned int v9 = v82[v84];
            }
            else {
              unsigned int v9 = 0;
            }
            goto LABEL_6;
          }
          uint64_t v85 = *((unsigned __int16 *)v80 + 4);
          if (v85)
          {
            long long v86 = (int *)sub_F930D4((unsigned int *)&v79[v85 + *(unsigned int *)&v79[v85]], 0);
            unsigned int v9 = 0;
            long long v87 = (unsigned __int16 *)((char *)v86 - *v86);
            if (*v87 >= 5u)
            {
              uint64_t v88 = v87[2];
              if (v88) {
                unsigned int v9 = *((unsigned __int8 *)v86 + v88);
              }
              else {
                unsigned int v9 = 0;
              }
            }
            *(_DWORD *)(v7 + 3872) = v9;
            goto LABEL_6;
          }
          goto LABEL_129;
        }
      }
    }
  }
  uint64_t *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  return result;
}

void sub_FD0044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unint64_t v17 = *(void **)a16;
  if (*(void *)a16)
  {
    *(void *)(a16 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_FD0084(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  sub_F5F900(a2, *a1, (uint64_t)v111);
  sub_F5F900(a3, *a1, (uint64_t)v110);
  unint64_t v94 = a6;
  uint64_t v97 = (uint64_t)a1;
  sub_F76A04((uint64_t)(a1 + 494), &v107);
  unsigned int v9 = v108;
  uint64_t v10 = v109;
  if (v108 != v109)
  {
    uint64_t v11 = v107;
    uint64_t v12 = (uint64_t)(a1 + 1);
    uint64_t v13 = (uint64_t)(a1 + 990);
    do
    {
      unsigned int v18 = *v9;
      uint64_t v19 = *v11;
      unint64_t v20 = (uint64_t *)(*v11 + 80 * *v9);
      if (sub_F769D0(v12, v20))
      {
        sub_FD70BC(v13, v20, (uint64_t)&v100);
        unsigned int v22 = v100;
        uint64_t v21 = v101;
        if (v102)
        {
          uint64_t v23 = v100[1] + 104 * v101;
          *(void *)uint64_t v23 = *v20;
          *(_OWORD *)(v23 + 40) = 0u;
          *(_OWORD *)(v23 + 56) = 0u;
          *(_OWORD *)(v23 + 72) = 0u;
          *(_OWORD *)(v23 + 88) = 0u;
          *(_OWORD *)(v23 + 8) = 0u;
          *(_OWORD *)(v23 + 24) = 0u;
          *(_OWORD *)(v23 + 48) = xmmword_20EC680;
          *(_OWORD *)(v23 + 64) = xmmword_20EC680;
          *(_OWORD *)(v23 + 80) = xmmword_20B8EB0;
          *(_DWORD *)(v23 + 96) = 0x7FFFFFFF;
        }
        uint64_t v24 = v22[1];
        uint64_t v25 = v24 + 104 * v21;
        *(void *)(v25 + 8) = *v20;
        uint64_t v26 = v19 + 80 * v18;
        *(void *)(v25 + 60) = *(void *)(v26 + 8);
        int v28 = *(_DWORD *)(v26 + 72);
        unint64_t v27 = (_DWORD *)(v26 + 72);
        if (v28 < 0) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = *(void *)(v19 + 80 * v18 + 32);
        }
        uint64_t v15 = v24 + 104 * v21;
        *(void *)(v15 + 24) = v14;
        uint64_t v16 = v110[0] + 12 * (*v27 & 0x7FFFFFFF);
        uint64_t v17 = *(void *)v16;
        *(_DWORD *)(v15 + 96) = *(_DWORD *)(v16 + 8);
        *(void *)(v15 + 88) = v17;
      }
      ++v9;
    }
    while (v9 != v10);
  }
  sub_F76A04(v97 + 8, &v104);
  uint64_t v29 = v105;
  unint64_t v30 = v106;
  if (v105 != v106)
  {
    unsigned int v31 = v104;
    do
    {
      unsigned int v32 = *v29;
      uint64_t v33 = *v31;
      sub_FCC430(v97 + 7920, (uint64_t *)(*v31 + 80 * *v29), &v100);
      if (v100)
      {
        uint64_t v34 = v103;
        uint64_t v35 = v33 + 80 * v32;
        *(void *)(v103 + 52) = *(void *)(v35 + 8);
        int v37 = *(_DWORD *)(v35 + 72);
        uint64_t v36 = (_DWORD *)(v35 + 72);
        uint64_t v38 = v37 < 0 ? 0 : *(void *)(v33 + 80 * v32 + 24);
        *(void *)(v34 + 16) = v38;
        *(_DWORD *)(v34 + 48) = *(_DWORD *)(v33 + 80 * v32 + 16);
        uint64_t v39 = (char *)v111[0] + 12 * (*v36 & 0x7FFFFFFF);
        int v40 = *((_DWORD *)v39 + 2);
        *(void *)(v34 + 76) = *(void *)v39;
        *(_DWORD *)(v34 + 84) = v40;
        sub_FCC554(v97, (uint64_t *)(v34 + 8));
        if (*(_DWORD *)(v34 + 52) != -1 && *(_DWORD *)(v34 + 56) != 0x7FFFFFFF)
        {
          int v41 = *(_DWORD *)(v34 + 60);
          if (v41 != -1)
          {
            int v42 = *(_DWORD *)(v34 + 64);
            if (v42 != 0x7FFFFFFF)
            {
              uint64_t v43 = (v42 + *(_DWORD *)(v34 + 56));
              if (v43 != 0x7FFFFFFF)
              {
                uint64_t v44 = (v41 + *(_DWORD *)(v34 + 52));
                if (v44 != -1)
                {
                  if (*(_DWORD *)(v97 + 8880) == -1
                    || (int v45 = *(_DWORD *)(v97 + 8884), v45 == 0x7FFFFFFF)
                    || (int)v43 < v45)
                  {
                    *(void *)(v97 + 8880) = v44 | (v43 << 32);
                  }
                }
              }
            }
          }
        }
      }
      ++v29;
    }
    while (v29 != v30);
  }
  unsigned int v46 = (char **)(v97 + 8688);
  long long v98 = 0uLL;
  uint64_t v99 = 0;
  uint64_t v47 = v97 + 7920;
  unint64_t v48 = *(char **)(v97 + 7920);
  unint64_t v49 = *(char **)(v97 + 7928);
  if (*v48 > -2)
  {
    unint64_t v50 = *(void **)(v97 + 7920);
    uint64_t v54 = *(void *)(v97 + 7944);
    unsigned int v52 = &v48[v54];
    uint64_t v53 = (char **)(v97 + 7920);
    if (v48 != &v48[v54]) {
      goto LABEL_35;
    }
  }
  else
  {
    unint64_t v50 = *(void **)(v97 + 7920);
    do
    {
      unint64_t v51 = (__clz(__rbit64(((*v50 >> 7) & ~*v50 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      unint64_t v50 = (void *)((char *)v50 + v51);
      v49 += 104 * v51;
    }
    while (*(char *)v50 < -1);
    unsigned int v52 = &v48[*(void *)(v97 + 7944)];
    uint64_t v53 = (char **)(v97 + 7920);
    if (v50 != (void *)v52) {
      goto LABEL_35;
    }
  }
  uint64_t v53 = (char **)(v97 + 7968);
  uint64_t v77 = 1;
  uint64_t v78 = v97 + 7920;
  while (1)
  {
    unint64_t v49 = *(char **)(v78 + 56);
    unint64_t v50 = *v53;
    if (**v53 <= -2)
    {
      do
      {
        unint64_t v79 = (__clz(__rbit64(((*v50 >> 7) & ~*v50 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        unint64_t v50 = (void *)((char *)v50 + v79);
        v49 += 104 * v79;
      }
      while (*(char *)v50 < -1);
    }
    unsigned int v52 = &(*v53)[*(void *)(v78 + 72)];
    if (v50 != (void *)v52) {
      break;
    }
    uint64_t v78 = v47 + 48 * v77++;
    uint64_t v53 = (char **)(v78 + 48);
    if (v77 == 16)
    {
LABEL_93:
      if (*(unsigned char *)v46)
      {
        unint64_t v80 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v98 + 1) - v98) >> 5));
        if (*((void *)&v98 + 1) == (void)v98) {
          uint64_t v81 = 0;
        }
        else {
          uint64_t v81 = v80;
        }
        sub_FDA7BC(v98, *((_DWORD **)&v98 + 1), (uint64_t)&v100, v81, 1);
        unint64_t v82 = (unsigned char *)v98;
        unint64_t v83 = *(unsigned int *)(v97 + 8772);
        uint64_t v84 = (unsigned char *)*((void *)&v98 + 1);
        unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v98 + 1) - v98) >> 5);
        long long v86 = (unsigned char *)(v98 + 96 * v83);
        v94[1] = 0;
        v94[2] = 0;
        if (v85 <= v83) {
          long long v87 = v84;
        }
        else {
          long long v87 = v86;
        }
        *unint64_t v94 = 0;
        uint64_t v88 = v87 - v82;
        if (v87 != v82)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v88 >> 5) >= 0x2AAAAAAAAAAAAABLL) {
            sub_2E00();
          }
          unint64_t v89 = (char *)operator new(v87 - v82);
          *unint64_t v94 = v89;
          v94[1] = v89;
          uint64_t v90 = &v89[32 * (v88 >> 5)];
          v94[2] = v90;
          if (v82 != v87) {
            memmove(v89, v82, v88 - 4);
          }
          v94[1] = v90;
        }
        if (v82)
        {
          *((void *)&v98 + 1) = v82;
          operator delete(v82);
          uint64_t v91 = (void *)v110[0];
          if (!v110[0]) {
            goto LABEL_111;
          }
LABEL_110:
          v110[1] = v91;
          operator delete(v91);
          goto LABEL_111;
        }
      }
      else
      {
        *(_OWORD *)unint64_t v94 = v98;
        v94[2] = v99;
      }
      uint64_t v91 = (void *)v110[0];
      if (!v110[0]) {
        goto LABEL_111;
      }
      goto LABEL_110;
    }
  }
LABEL_35:
  while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v98 + 1) - v98) >> 5) < *(unsigned int *)(v97 + 8772)
       || *(unsigned char *)v46)
  {
    unsigned int v55 = (unint64_t *)(v49 + 8);
    if (!*((void *)v49 + 1)) {
      goto LABEL_50;
    }
    if (*((_DWORD *)v49 + 13) == -1) {
      goto LABEL_50;
    }
    if (*((_DWORD *)v49 + 14) == 0x7FFFFFFF) {
      goto LABEL_50;
    }
    if (*((_DWORD *)v49 + 15) == -1) {
      goto LABEL_50;
    }
    if (*((_DWORD *)v49 + 16) == 0x7FFFFFFF) {
      goto LABEL_50;
    }
    if (*((_DWORD *)v49 + 17) == -1) {
      goto LABEL_50;
    }
    if (*((_DWORD *)v49 + 18) == 0x7FFFFFFF) {
      goto LABEL_50;
    }
    sub_FCC430(v47, (uint64_t *)v49 + 3, &v100);
    if (v100)
    {
      if (*v55 == *(void *)(v103 + 16)) {
        goto LABEL_50;
      }
    }
    if (*((_DWORD *)v49 + 13) == -1) {
      goto LABEL_50;
    }
    if (*((_DWORD *)v49 + 14) == 0x7FFFFFFF) {
      goto LABEL_50;
    }
    int v56 = *((_DWORD *)v49 + 15);
    if (v56 == -1) {
      goto LABEL_50;
    }
    int v57 = *((_DWORD *)v49 + 16);
    if (v57 == 0x7FFFFFFF) {
      goto LABEL_50;
    }
    int v64 = v57 + *((_DWORD *)v49 + 14);
    if (v64 == 0x7FFFFFFF) {
      goto LABEL_50;
    }
    unsigned int v65 = v56 + *((_DWORD *)v49 + 13);
    if (v65 == -1) {
      goto LABEL_50;
    }
    double v66 = *(double *)(v97 + 8784);
    double v67 = v66 * (double)*(int *)(v97 + 8884);
    if (v67 >= 0.0)
    {
      HIDWORD(v68) = 1127219200;
      if (v67 >= 4.50359963e15) {
        goto LABEL_73;
      }
      uint64_t v69 = (uint64_t)(v67 + v67) + 1;
    }
    else
    {
      HIDWORD(v68) = -1020264448;
      if (v67 <= -4.50359963e15) {
        goto LABEL_73;
      }
      uint64_t v69 = (uint64_t)(v67 + v67);
      if (v69 >= 1) {
        --v69;
      }
    }
    double v67 = (double)(v69 >> 1);
LABEL_73:
    if (v64 <= (int)v67)
    {
      if (!*(unsigned char *)(v97 + 8792) || (LODWORD(v68) = *(_DWORD *)(v97 + 8864), v66 * (double)v68 >= (double)v65))
      {
        uint64_t v70 = *(uint64_t **)v97;
        uint64_t v71 = **(void **)v97;
        if (!*(unsigned char *)(v71 + 7774)) {
          goto LABEL_83;
        }
        unint64_t v96 = *v55;
        unint64_t v95 = HIDWORD(*v55);
        uint64_t v72 = sub_290DEC(v71 + 3896, HIDWORD(*v55), 1);
        if (v72)
        {
          unint64_t v73 = &v72[-*(int *)v72];
          if (*(unsigned __int16 *)v73 >= 5u)
          {
            uint64_t v74 = *((unsigned __int16 *)v73 + 2);
            if (v74)
            {
              if (*(_DWORD *)&v72[v74 + *(unsigned int *)&v72[v74]] > (unsigned __int16)WORD1(v96)
                && sub_295DB4(v71, v95 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v96) << 32)))
              {
                uint64_t v70 = *(uint64_t **)v97;
LABEL_83:
                unint64_t v75 = sub_F80F98((uint64_t)v70, (void *)v49 + 1, 0x3B9ACA00u, a4, (signed int *)v49 + 12, a5);
                if (v75 != -1 && HIDWORD(v75) != 0x7FFFFFFF)
                {
                  int v76 = *((_DWORD *)v49 + 18) + HIDWORD(v75);
                  *((_DWORD *)v49 + 17) += v75;
                  *((_DWORD *)v49 + 18) = v76;
                  if (sub_FCC6CC(v97, (uint64_t)(v49 + 8)))
                  {
                    if (sub_FCC7D0(v97, (uint64_t)(v49 + 8))) {
                      sub_3DEE84((char **)&v98, v49 + 8);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_50:
    int v58 = *((char *)v50 + 1);
    unint64_t v50 = (void *)((char *)v50 + 1);
    v49 += 104;
    if (v58 <= -2)
    {
      do
      {
        unint64_t v59 = (__clz(__rbit64(((*v50 >> 7) & ~*v50 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        unint64_t v50 = (void *)((char *)v50 + v59);
        v49 += 104 * v59;
      }
      while (*(char *)v50 < -1);
    }
    if (v50 == (void *)v52)
    {
      unint64_t v60 = v53 + 6;
      if (v53 + 6 == v46) {
        goto LABEL_93;
      }
      while (1)
      {
        unint64_t v61 = v60;
        int v62 = v53[6];
        unint64_t v49 = v53[7];
        unint64_t v50 = v62;
        if (*v62 <= -2)
        {
          do
          {
            unint64_t v63 = (__clz(__rbit64(((*v50 >> 7) & ~*v50 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            unint64_t v50 = (void *)((char *)v50 + v63);
            v49 += 104 * v63;
          }
          while (*(char *)v50 < -1);
        }
        unsigned int v52 = &v53[9][(void)v62];
        if (v50 != (void *)v52) {
          break;
        }
        unint64_t v60 = v61 + 6;
        uint64_t v53 = v61;
        if (v61 + 6 == v46) {
          goto LABEL_93;
        }
      }
      uint64_t v53 = v61;
      if (!v61) {
        goto LABEL_93;
      }
    }
    else if (!v53)
    {
      goto LABEL_93;
    }
  }
  *(_OWORD *)unint64_t v94 = v98;
  v94[2] = v99;
  uint64_t v91 = (void *)v110[0];
  if (v110[0]) {
    goto LABEL_110;
  }
LABEL_111:
  if (v111[0])
  {
    v111[1] = v111[0];
    operator delete(v111[0]);
  }
}

void sub_FD09BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = *(void **)(v20 - 136);
    if (v21)
    {
LABEL_7:
      *(void *)(v20 - 128) = v21;
      operator delete(v21);
      unsigned int v22 = *(void **)(v20 - 112);
      if (v22)
      {
LABEL_8:
        *(void *)(v20 - 104) = v22;
        operator delete(v22);
        _Unwind_Resume(exception_object);
      }
LABEL_4:
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    uint64_t v21 = *(void **)(v20 - 136);
    if (v21) {
      goto LABEL_7;
    }
  }
  unsigned int v22 = *(void **)(v20 - 112);
  if (v22) {
    goto LABEL_8;
  }
  goto LABEL_4;
}

uint64_t sub_FD0AB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_F7FEFC(a1 + 8, a2, &v36);
  if (sub_EAE144(&v36))
  {
    uint64_t v6 = v39;
    *(void *)(a3 + 16) = v37;
    *(void *)(a3 + 40) = v6;
    uint64_t v7 = v46;
    *(void *)(a3 + 128) = v44;
    *(void *)(a3 + 152) = v7;
    uint64_t v8 = v51;
    *(void *)(a3 + 176) = v48;
    *(void *)(a3 + 216) = v8;
    uint64_t v9 = v55;
    *(void *)(a3 + 240) = v53;
    *(_OWORD *)a3 = v36;
    long long v36 = 0uLL;
    *(_OWORD *)(a3 + 24) = v38;
    uint64_t v37 = 0;
    long long v38 = 0uLL;
    uint64_t v39 = 0;
    long long v10 = v40;
    long long v11 = v41;
    long long v12 = v42[0];
    *(_OWORD *)(a3 + 94) = *(_OWORD *)((char *)v42 + 14);
    *(_OWORD *)(a3 + 64) = v11;
    *(_OWORD *)(a3 + 80) = v12;
    *(_OWORD *)(a3 + 48) = v10;
    *(_OWORD *)(a3 + 112) = v43;
    long long v43 = 0uLL;
    *(_OWORD *)(a3 + 136) = v45;
    uint64_t v44 = 0;
    long long v45 = 0uLL;
    uint64_t v46 = 0;
    *(_OWORD *)(a3 + 160) = v47;
    long long v47 = 0uLL;
    long long v13 = v49;
    *(_OWORD *)(a3 + 200) = v50;
    *(_OWORD *)(a3 + 184) = v13;
    *(_OWORD *)(a3 + 224) = v52;
    uint64_t v48 = 0;
    long long v52 = 0uLL;
    uint64_t v53 = 0;
    *(_OWORD *)(a3 + 248) = v54;
    *(void *)(a3 + 264) = v9;
    long long v54 = 0uLL;
    uint64_t v55 = 0;
    *(_OWORD *)(a3 + 272) = v56;
    unsigned int v14 = v58;
    *(_DWORD *)(a3 + 296) = v58;
    if (v14 <= 1) {
      *(void *)(a3 + 288) = v57;
    }
    long long v15 = *(_OWORD *)v68;
    *(_OWORD *)(a3 + 432) = v67;
    *(_OWORD *)(a3 + 448) = v15;
    long long v16 = v64;
    *(_OWORD *)(a3 + 368) = v63;
    *(_OWORD *)(a3 + 384) = v16;
    long long v17 = v66;
    *(_OWORD *)(a3 + 400) = v65;
    *(_OWORD *)(a3 + 416) = v17;
    long long v18 = v60;
    *(_OWORD *)(a3 + 304) = v59;
    *(_OWORD *)(a3 + 320) = v18;
    long long v19 = v62;
    *(_OWORD *)(a3 + 336) = v61;
    *(_OWORD *)(a3 + 352) = v19;
    *(void *)(a3 + 463) = *(void *)&v68[15];
  }
  else
  {
    sub_F8499C(a1 + 3952, a2, v35);
    if (sub_EAE144(v35))
    {
      sub_444D20((char *)a3, v35);
    }
    else
    {
      sub_EB10BC((uint64_t)&v36, (uint64_t)v35);
      uint64_t v20 = v39;
      *(void *)(a3 + 16) = v37;
      *(void *)(a3 + 40) = v20;
      uint64_t v21 = v46;
      *(void *)(a3 + 128) = v44;
      *(void *)(a3 + 152) = v21;
      uint64_t v22 = v51;
      *(void *)(a3 + 176) = v48;
      *(void *)(a3 + 216) = v22;
      uint64_t v23 = v55;
      *(void *)(a3 + 240) = v53;
      *(_OWORD *)a3 = v36;
      long long v36 = 0uLL;
      *(_OWORD *)(a3 + 24) = v38;
      uint64_t v37 = 0;
      long long v38 = 0uLL;
      uint64_t v39 = 0;
      long long v24 = v40;
      long long v25 = v41;
      long long v26 = v42[0];
      *(_OWORD *)(a3 + 94) = *(_OWORD *)((char *)v42 + 14);
      *(_OWORD *)(a3 + 64) = v25;
      *(_OWORD *)(a3 + 80) = v26;
      *(_OWORD *)(a3 + 48) = v24;
      *(_OWORD *)(a3 + 112) = v43;
      long long v43 = 0uLL;
      *(_OWORD *)(a3 + 136) = v45;
      uint64_t v44 = 0;
      long long v45 = 0uLL;
      uint64_t v46 = 0;
      *(_OWORD *)(a3 + 160) = v47;
      long long v47 = 0uLL;
      long long v27 = v49;
      *(_OWORD *)(a3 + 200) = v50;
      *(_OWORD *)(a3 + 184) = v27;
      *(_OWORD *)(a3 + 224) = v52;
      uint64_t v48 = 0;
      long long v52 = 0uLL;
      uint64_t v53 = 0;
      *(_OWORD *)(a3 + 248) = v54;
      *(void *)(a3 + 264) = v23;
      long long v54 = 0uLL;
      uint64_t v55 = 0;
      *(_OWORD *)(a3 + 272) = v56;
      unsigned int v28 = v58;
      *(_DWORD *)(a3 + 296) = v58;
      if (v28 <= 1) {
        *(void *)(a3 + 288) = v57;
      }
      long long v29 = *(_OWORD *)v68;
      *(_OWORD *)(a3 + 432) = v67;
      *(_OWORD *)(a3 + 448) = v29;
      long long v30 = v64;
      *(_OWORD *)(a3 + 368) = v63;
      *(_OWORD *)(a3 + 384) = v30;
      long long v31 = v66;
      *(_OWORD *)(a3 + 400) = v65;
      *(_OWORD *)(a3 + 416) = v31;
      long long v32 = v60;
      *(_OWORD *)(a3 + 304) = v59;
      *(_OWORD *)(a3 + 320) = v32;
      long long v33 = v62;
      *(_OWORD *)(a3 + 336) = v61;
      *(_OWORD *)(a3 + 352) = v33;
      *(void *)(a3 + 463) = *(void *)&v68[15];
    }
    sub_405F44((uint64_t)v35);
  }
  return sub_405F44((uint64_t)&v36);
}

void sub_FD0E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_405F44((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void sub_FD0E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_405F44((uint64_t)&a10);
  sub_405F44((uint64_t)&a69);
  _Unwind_Resume(a1);
}

void sub_FD0E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_405F44((uint64_t)&a69);
  _Unwind_Resume(a1);
}

uint64_t sub_FD0E64(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = sub_FDB2F0(*a2, (unsigned int *)(a1 + 24), 0);
  unint64_t v5 = sub_FDB2F0(*a2, (unsigned int *)(a1 + 32), 1);
  if (v4 == -1 && HIDWORD(v4) == -1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned int v7 = v5;
  unint64_t v8 = HIDWORD(v5);
  if ((HIDWORD(v5) & v5) == 0xFFFFFFFF) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  long double v9 = exp(3.14159265 - (double)HIDWORD(v4) * 6.28318531 / 4294967300.0);
  long double v10 = atan((v9 - 1.0 / v9) * 0.5) * 57.2957795 * 0.0174532925;
  v11.i64[0] = v4;
  v11.i64[1] = v7;
  long double v12 = exp(3.14159265 - (double)v8 * 6.28318531 / 4294967300.0);
  long double v13 = atan((v12 - 1.0 / v12) * 0.5) * 57.2957795 * 0.0174532925;
  int64x2_t v14 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v11), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v26 = vsubq_f64((float64x2_t)v14, (float64x2_t)vdupq_laneq_s64(v14, 1)).f64[0];
  long double v15 = sin((v10 - v13) * 0.5);
  long double v16 = v15 * v15;
  double v17 = cos(v10);
  long double v18 = v17 * cos(v13);
  long double v19 = sin(0.5 * v26);
  long double v20 = atan2(sqrt(v19 * v19 * v18 + v16), sqrt(1.0 - (v19 * v19 * v18 + v16)));
  double v21 = (v20 + v20) * 6372797.56 * 100.0;
  if (v21 >= 0.0)
  {
    double v22 = v21;
    if (v21 >= 4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v23 = (uint64_t)(v21 + v21) + 1;
  }
  else
  {
    double v22 = v21;
    if (v21 <= -4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v23 = (uint64_t)(v21 + v21);
    if (v23 >= 1) {
      --v23;
    }
  }
  double v22 = (double)(v23 >> 1);
LABEL_15:
  if (v22 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v21 >= 0.0)
  {
    if (v21 < 4.50359963e15)
    {
      uint64_t v25 = (uint64_t)(v21 + v21) + 1;
      return (uint64_t)(double)(v25 >> 1);
    }
  }
  else if (v21 > -4.50359963e15)
  {
    uint64_t v25 = (uint64_t)(v21 + v21);
    if (v25 >= 1) {
      --v25;
    }
    return (uint64_t)(double)(v25 >> 1);
  }
  return (uint64_t)v21;
}

uint64_t sub_FD1128(unsigned int *a1, uint64_t *a2)
{
  unint64_t v3 = sub_FDB2F0(*a2, a1 + 6, 0);
  unsigned int v5 = a1[17];
  unsigned int v4 = a1[18];
  if (v5 == -1 && v4 == -1) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  unsigned int v7 = v3;
  unint64_t v8 = HIDWORD(v3);
  if ((HIDWORD(v3) & v3) == 0xFFFFFFFF) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  long double v9 = exp(3.14159265 - (double)v4 * 6.28318531 / 4294967300.0);
  long double v10 = atan((v9 - 1.0 / v9) * 0.5) * 57.2957795 * 0.0174532925;
  v11.i64[0] = v5;
  v11.i64[1] = v7;
  long double v12 = exp(3.14159265 - (double)v8 * 6.28318531 / 4294967300.0);
  long double v13 = atan((v12 - 1.0 / v12) * 0.5) * 57.2957795 * 0.0174532925;
  int64x2_t v14 = (int64x2_t)vmulq_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_u64(v11), (float64x2_t)vdupq_n_s64(0x4076800000000000uLL)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL)), (float64x2_t)vdupq_n_s64(0xC066800000000000)), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v26 = vsubq_f64((float64x2_t)v14, (float64x2_t)vdupq_laneq_s64(v14, 1)).f64[0];
  long double v15 = sin((v10 - v13) * 0.5);
  long double v16 = v15 * v15;
  double v17 = cos(v10);
  long double v18 = v17 * cos(v13);
  long double v19 = sin(0.5 * v26);
  long double v20 = atan2(sqrt(v19 * v19 * v18 + v16), sqrt(1.0 - (v19 * v19 * v18 + v16)));
  double v21 = (v20 + v20) * 6372797.56 * 100.0;
  if (v21 >= 0.0)
  {
    double v22 = v21;
    if (v21 >= 4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v23 = (uint64_t)(v21 + v21) + 1;
  }
  else
  {
    double v22 = v21;
    if (v21 <= -4.50359963e15) {
      goto LABEL_15;
    }
    uint64_t v23 = (uint64_t)(v21 + v21);
    if (v23 >= 1) {
      --v23;
    }
  }
  double v22 = (double)(v23 >> 1);
LABEL_15:
  if (v22 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFELL;
  }
  if (v21 >= 0.0)
  {
    if (v21 < 4.50359963e15)
    {
      uint64_t v25 = (uint64_t)(v21 + v21) + 1;
      return (uint64_t)(double)(v25 >> 1);
    }
  }
  else if (v21 > -4.50359963e15)
  {
    uint64_t v25 = (uint64_t)(v21 + v21);
    if (v25 >= 1) {
      --v25;
    }
    return (uint64_t)(double)(v25 >> 1);
  }
  return (uint64_t)v21;
}

uint64_t sub_FD13D8(uint64_t a1)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    int v1 = *(unsigned __int8 *)(a1 + 23);
    if (v1 != 4)
    {
      if (v1 != 7) {
        goto LABEL_29;
      }
      if (*(_DWORD *)a1 != 1818584418 || *(_DWORD *)(a1 + 3) != 1701734764)
      {
LABEL_21:
        unsigned int v5 = (_DWORD *)a1;
        if (v1 != 4) {
          goto LABEL_29;
        }
        goto LABEL_22;
      }
      return 2;
    }
    if (*(_DWORD *)a1 != 1701669236)
    {
      if (*(_DWORD *)a1 != 1953722211) {
        goto LABEL_21;
      }
      return 0;
    }
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 != 4)
  {
LABEL_11:
    if (v3 == 7)
    {
      if (**(_DWORD **)a1 == 1818584418 && *(_DWORD *)(*(void *)a1 + 3) == 1701734764) {
        return 2;
      }
      uint64_t v3 = *(void *)(a1 + 8);
    }
    if (v3 != 4) {
      goto LABEL_29;
    }
    unsigned int v5 = *(_DWORD **)a1;
LABEL_22:
    if (*v5 == 1701736302) {
      return 3;
    }
LABEL_29:
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    unint64_t v8 = std::string::append(&v11, "\" provided");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v8->__r_.__value_.__r.__words[2];
    long long v12 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    long double v10 = (void *)sub_2F404((uint64_t)exception, &v12);
  }
  if (**(_DWORD **)a1 != 1953722211)
  {
    if (**(_DWORD **)a1 == 1701669236) {
      return 1;
    }
    goto LABEL_11;
  }
  return 0;
}

void sub_FD15AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_FD1604(uint64_t a1, void *a2)
{
  HIBYTE(v61[2]) = 17;
  strcpy((char *)v61, "sort_by_path_cost");
  unsigned int v4 = sub_58070(a2, (uint64_t)v61);
  if (v4)
  {
    BOOL v5 = *((_DWORD *)v4 + 12) == 4;
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  BOOL v5 = 0;
  if (SHIBYTE(v61[2]) < 0) {
LABEL_3:
  }
    operator delete(v61[0]);
LABEL_4:
  *(unsigned char *)a1 = v5;
  HIBYTE(v61[2]) = 14;
  strcpy((char *)v61, "add_debug_info");
  uint64_t v6 = sub_58070(a2, (uint64_t)v61);
  if (v6)
  {
    BOOL v7 = *((_DWORD *)v6 + 12) == 4;
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  BOOL v7 = 0;
  if (SHIBYTE(v61[2]) < 0) {
LABEL_6:
  }
    operator delete(v61[0]);
LABEL_7:
  *(_OWORD *)(a1 + 8) = 0u;
  *(unsigned char *)(a1 + 1) = v7;
  *(_OWORD *)(a1 + 56) = 0u;
  long long v56 = (void *)(a1 + 56);
  uint64_t v57 = (void *)a1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  HIBYTE(v61[2]) = 21;
  *(void *)(a1 + 72) = 0;
  strcpy((char *)v61, "max_num_scanned_nodes");
  if (!sub_31AC04(a2, (uint64_t)v61))
  {
    int v8 = -1;
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
  char v60 = 21;
  strcpy(__p, "max_num_scanned_nodes");
  int v8 = sub_31AC04(a2, (uint64_t)__p);
  if ((v60 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v61[2]) < 0) {
LABEL_33:
  }
    operator delete(v61[0]);
LABEL_10:
  *(_DWORD *)(a1 + 80) = v8;
  HIBYTE(v61[2]) = 17;
  strcpy((char *)v61, "max_num_via_nodes");
  if (!sub_31AC04(a2, (uint64_t)v61))
  {
    int v9 = -1;
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
  char v60 = 17;
  strcpy(__p, "max_num_via_nodes");
  int v9 = sub_31AC04(a2, (uint64_t)__p);
  if ((v60 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
  operator delete(*(void **)__p);
  if (SHIBYTE(v61[2]) < 0) {
LABEL_35:
  }
    operator delete(v61[0]);
LABEL_13:
  *(_DWORD *)(a1 + 84) = v9;
  HIBYTE(v61[2]) = 17;
  strcpy((char *)v61, "min_partial_level");
  *(_DWORD *)(a1 + 88) = sub_FC9C0C(a2, (uint64_t)v61);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  HIBYTE(v61[2]) = 18;
  strcpy((char *)v61, "max_stretch_factor");
  double v10 = sub_5C7E8(a2, (uint64_t)v61);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  *(double *)(a1 + 96) = v10;
  HIBYTE(v61[2]) = 18;
  strcpy((char *)v61, "check_cost_stretch");
  BOOL v11 = sub_29D62C(a2, (uint64_t)v61);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  *(unsigned char *)(a1 + 104) = v11;
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B91C0;
  strcpy(v61[0], "max_local_stretch_factor");
  double v12 = sub_5C7E8(a2, (uint64_t)v61);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  *(double *)(a1 + 112) = v12;
  v61[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v61[1] = xmmword_20B93A0;
  strcpy(v61[0], "use_full_path_for_plateau_threshold");
  BOOL v13 = sub_29D62C(a2, (uint64_t)v61);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  *(unsigned char *)(a1 + 120) = v13;
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B91C0;
  strcpy(v61[0], "local_stretch_check_mode");
  uint64_t v14 = sub_561B0(a2, (uint64_t)v61);
  int v15 = sub_FD13D8(v14);
  if (SHIBYTE(v61[2]) < 0) {
    operator delete(v61[0]);
  }
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 124) = v15;
  uint64_t v53 = a1 + 152;
  long long v54 = (char **)(a1 + 128);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v61[0] = (char *)operator new(0x19uLL);
  *(_OWORD *)&v61[1] = xmmword_20B9250;
  strcpy(v61[0], "max_exploration_factors");
  sub_FD6E68(a2, (uint64_t)v61, a1 + 8);
  if (SHIBYTE(v61[2]) < 0)
  {
    operator delete(v61[0]);
    if (*(void *)(a1 + 8) != *(void *)(a1 + 16)) {
      goto LABEL_38;
    }
  }
  else if (*(void *)(a1 + 8) != *(void *)(a1 + 16))
  {
    goto LABEL_38;
  }
  *(_DWORD *)long long __p = 0;
  v61[0] = (char *)0x3FF8000000000000;
  sub_F16CE4((char **)(a1 + 8), __p, v61);
LABEL_38:
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B91C0;
  strcpy(v61[0], "bfs_anchor_hops_by_level");
  long double v16 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v61);
  double v17 = v16;
  uint64_t v55 = (uint64_t *)(a1 + 32);
  if (SHIBYTE(v61[2]) < 0)
  {
    operator delete(v61[0]);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    if (*v17 == v19) {
      goto LABEL_54;
    }
  }
  else
  {
    uint64_t v18 = *v16;
    uint64_t v19 = v16[1];
    if (*v16 == v19) {
      goto LABEL_54;
    }
  }
  do
  {
    if (*(_DWORD *)(v18 + 8) != 2)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &off_23FDF58;
    }
    long double v20 = *(void **)v18;
    HIBYTE(v61[2]) = 5;
    strcpy((char *)v61, "level");
    unsigned int v21 = sub_31AC04(v20, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    uint64_t v22 = v57[7];
    unint64_t v23 = (v57[8] - v22) >> 2;
    if (v23 <= v21)
    {
      unint64_t v24 = v21 + 1;
      LODWORD(v61[0]) = 0;
      if (v24 <= v23)
      {
        if (v24 < v23) {
          v57[8] = v22 + 4 * v24;
        }
      }
      else
      {
        sub_500DC((uint64_t)v56, v24 - v23, (const float *)v61);
      }
    }
    HIBYTE(v61[2]) = 4;
    strcpy((char *)v61, "hops");
    *(_DWORD *)(*v56 + 4 * v21) = sub_31AC04(v20, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    v18 += 16;
  }
  while (v18 != v19);
LABEL_54:
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B8870;
  strcpy(v61[0], "path_anchor_hops_by_level");
  uint64_t v25 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v61);
  double v26 = v25;
  if (SHIBYTE(v61[2]) < 0)
  {
    operator delete(v61[0]);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    if (*v26 == v27) {
      goto LABEL_73;
    }
    while (1)
    {
LABEL_62:
      if (*(_DWORD *)(v28 + 8) != 2)
      {
        long long v50 = __cxa_allocate_exception(8uLL);
        void *v50 = &off_23FDF58;
      }
      long long v30 = *(void **)v28;
      HIBYTE(v61[2]) = 5;
      strcpy((char *)v61, "level");
      unsigned int v31 = sub_31AC04(v30, (uint64_t)v61);
      if (SHIBYTE(v61[2]) < 0) {
        operator delete(v61[0]);
      }
      HIBYTE(v61[2]) = 4;
      strcpy((char *)v61, "hops");
      int v32 = sub_31AC04(v30, (uint64_t)v61);
      int v33 = v32;
      if (SHIBYTE(v61[2]) < 0)
      {
        operator delete(v61[0]);
        if (v33)
        {
LABEL_69:
          uint64_t v29 = v57[4];
          unint64_t v34 = (v57[5] - v29) >> 2;
          if (v34 <= v31)
          {
            unint64_t v35 = v31 + 1;
            LODWORD(v61[0]) = 0;
            if (v35 > v34)
            {
              sub_500DC((uint64_t)v55, v35 - v34, (const float *)v61);
              uint64_t v29 = *v55;
            }
            else if (v35 < v34)
            {
              v57[5] = v29 + 4 * v35;
            }
          }
          *(_DWORD *)(v29 + 4 * v31) = v33;
        }
      }
      else if (v32)
      {
        goto LABEL_69;
      }
      v28 += 16;
      if (v28 == v27) {
        goto LABEL_73;
      }
    }
  }
  uint64_t v28 = *v25;
  uint64_t v27 = v25[1];
  if (*v25 != v27) {
    goto LABEL_62;
  }
LABEL_73:
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B8870;
  strcpy(v61[0], "plateau_time_thresholds_s");
  long long v36 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v61);
  uint64_t v37 = v36;
  if (SHIBYTE(v61[2]) < 0)
  {
    operator delete(v61[0]);
    uint64_t v38 = *v37;
    uint64_t v39 = v37[1];
    if (*v37 == v39) {
      goto LABEL_83;
    }
  }
  else
  {
    uint64_t v38 = *v36;
    uint64_t v39 = v36[1];
    if (*v36 == v39) {
      goto LABEL_83;
    }
  }
  do
  {
    if (*(_DWORD *)(v38 + 8) != 2)
    {
      uint64_t v51 = __cxa_allocate_exception(8uLL);
      *uint64_t v51 = &off_23FDF58;
    }
    long long v40 = *(void **)v38;
    *(void *)long long __p = 0;
    HIBYTE(v61[2]) = 9;
    strcpy((char *)v61, "threshold");
    double v41 = sub_5C7E8(v40, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    *(double *)long long __p = v41;
    HIBYTE(v61[2]) = 4;
    strcpy((char *)v61, "time");
    LODWORD(v58) = 10 * sub_319F48(v40, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    sub_EFC730(v54, __p, &v58);
    v38 += 16;
  }
  while (v38 != v39);
LABEL_83:
  v61[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v61[1] = xmmword_20B8890;
  strcpy(v61[0], "plateau_distance_thresholds_m");
  int v42 = (uint64_t *)sub_5C4AC(a2, (uint64_t)v61);
  long long v43 = v42;
  if (SHIBYTE(v61[2]) < 0)
  {
    operator delete(v61[0]);
    uint64_t v44 = *v43;
    uint64_t v45 = v43[1];
    if (*v43 == v45) {
      return v57;
    }
  }
  else
  {
    uint64_t v44 = *v42;
    uint64_t v45 = v42[1];
    if (*v42 == v45) {
      return v57;
    }
  }
  do
  {
    if (*(_DWORD *)(v44 + 8) != 2)
    {
      long long v52 = __cxa_allocate_exception(8uLL);
      *long long v52 = &off_23FDF58;
    }
    uint64_t v46 = *(void **)v44;
    *(void *)long long __p = 0;
    HIBYTE(v61[2]) = 9;
    strcpy((char *)v61, "threshold");
    double v47 = sub_5C7E8(v46, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    *(double *)long long __p = v47;
    HIBYTE(v61[2]) = 8;
    strcpy((char *)v61, "distance");
    uint64_t v58 = 100 * sub_FC9CCC(v46, (uint64_t)v61);
    if (SHIBYTE(v61[2]) < 0) {
      operator delete(v61[0]);
    }
    sub_FC9D8C(v53, __p, &v58);
    v44 += 16;
  }
  while (v44 != v45);
  return v57;
}

void sub_FD2138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  int v33 = *a14;
  if (*a14)
  {
    v29[20] = v33;
    operator delete(v33);
    unint64_t v34 = *v28;
    if (!*v28)
    {
LABEL_3:
      unint64_t v35 = *a20;
      if (!*a20) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v34 = *v28;
    if (!*v28) {
      goto LABEL_3;
    }
  }
  v29[17] = v34;
  operator delete(v34);
  unint64_t v35 = *a20;
  if (!*a20)
  {
LABEL_4:
    long long v36 = *v31;
    if (!*v31) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  v29[8] = v35;
  operator delete(v35);
  long long v36 = *v31;
  if (!*v31)
  {
LABEL_5:
    uint64_t v37 = *v30;
    if (!*v30) {
LABEL_12:
    }
      _Unwind_Resume(exception_object);
LABEL_11:
    v29[2] = v37;
    operator delete(v37);
    goto LABEL_12;
  }
LABEL_10:
  v29[5] = v36;
  operator delete(v36);
  uint64_t v37 = *v30;
  if (!*v30) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

uint64_t sub_FD239C(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = a2;
  sub_F86C00(a1 + 8);
  sub_F8CE40(a1 + 3952, *(void *)a1, 0);
  *(_OWORD *)(a1 + 7896) = xmmword_20B8E30;
  *(void *)(a1 + 7912) = 0x7FFFFFFFFFFFFFFFLL;
  v9[0] = 10;
  v9[1] = (unint64_t)&v8;
  v9[2] = (unint64_t)&v7;
  v9[3] = (unint64_t)&v6;
  sub_FD65FC((void *)(a1 + 7920), v9);
  sub_FD1604(a1 + 8688, a3);
  *(void *)(a1 + 8864) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8872) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8880) = 0x7FFFFFFFFFFFFFFFLL;
  return a1;
}

void sub_FD2474(_Unwind_Exception *a1)
{
  sub_328138(v3);
  sub_BF0DE8(v2);
  sub_BF0DE8(v1);
  _Unwind_Resume(a1);
}

void sub_FD24A0(_Unwind_Exception *a1)
{
  sub_BF0DE8(v1);
  _Unwind_Resume(a1);
}

void sub_FD24B8(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, int *a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, unsigned int a8@<W7>, uint64_t *a9@<X8>)
{
  uint64_t v13 = 0;
  uint64_t v103 = a1 + 7896;
  unsigned int v115 = a8;
  do
  {
    uint64_t v15 = a1 + v13;
    if (*(void *)(a1 + v13 + 7936))
    {
      unint64_t v16 = *(void *)(v15 + 7944);
      if (v16 >= 0x80)
      {
        uint64_t v14 = (void *)(a1 + v13);
        operator delete(*(void **)(v15 + 7920));
        *(void *)(v15 + 7920) = &unk_20E1710;
        v14[995] = 0;
        v14[991] = 0;
        v14[993] = 0;
        v14[992] = 0;
      }
      else if (v16)
      {
        *(void *)(v15 + 7936) = 0;
        memset(*(void **)(v15 + 7920), 128, v16 + 8);
        *(unsigned char *)(*(void *)(v15 + 7920) + v16) = -1;
        unint64_t v17 = *(void *)(v15 + 7944);
        if (v17 == 7) {
          uint64_t v18 = 6;
        }
        else {
          uint64_t v18 = v17 - (v17 >> 3);
        }
        *(void *)(a1 + v13 + 7960) = v18 - *(void *)(v15 + 7936);
      }
    }
    v13 += 48;
  }
  while (v13 != 768);
  *(void *)(a1 + 8880) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8864) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(a1 + 8872) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)uint64_t v103 = xmmword_20B8E30;
  *(void *)(a1 + 7912) = 0x7FFFFFFFFFFFFFFFLL;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  *(_OWORD *)(a1 + 8864) = *((_OWORD *)sub_F5C828(*(void *)a1 + 112, a7, (int *)a4, a5, a6, 0) + 1);
  if (*(_DWORD *)(a1 + 8864) != -1)
  {
    int v19 = *(_DWORD *)(a1 + 8868);
    if (v19 != 0x7FFFFFFF && *(void *)(a1 + 8872) != 0x7FFFFFFFFFFFFFFFLL)
    {
      int v114 = 0x7FFFFFFF;
      unsigned int v113 = 0x7FFFFFFF;
      int v20 = *a5;
      if (*a5 != 0x7FFFFFFF)
      {
        int v114 = *a5;
        int v21 = v19 / 10;
        int v22 = v19 % 10;
        if (v19 < 0) {
          char v23 = -5;
        }
        else {
          char v23 = 5;
        }
        unsigned int v113 = v21 + v20 + (((103 * (char)(v23 + v22)) >> 15) & 1) + ((103 * (char)(v23 + v22)) >> 10);
      }
      sub_FD31B8((uint64_t)v112, *(void *)a1, a7, (void *)(a1 + 8720));
      double v26 = (void *)*a2;
      uint64_t v25 = (void *)a2[1];
      if ((void *)*a2 != v25)
      {
        do
        {
          LODWORD(__p) = 0;
          sub_EDFF98((char **)v112, v26, &__p);
          v26 += 10;
        }
        while (v26 != v25);
      }
      uint64_t v28 = (void *)*a3;
      uint64_t v27 = (void *)a3[1];
      if ((void *)*a3 != v27)
      {
        do
        {
          LODWORD(__p) = 0;
          sub_EDFF98((char **)v112, v28, &__p);
          v28 += 10;
        }
        while (v28 != v27);
      }
      unsigned int v29 = *(_DWORD *)(a1 + 8864);
      long long v30 = *(unsigned int **)(a1 + 8696);
      unsigned int v31 = *v30;
      if (v29 > *v30)
      {
        int v32 = *(int **)(a1 + 8704);
        if ((char *)v32 - (char *)v30 >= 16)
        {
          if ((char *)v32 - (char *)v30 != 16)
          {
            unint64_t v33 = (unint64_t)((char *)v32 - (char *)v30) >> 4;
            do
            {
              unint64_t v34 = (4 * v33) & 0xFFFFFFFFFFFFFFF0;
              _X14 = (uint64_t)v30 + v34;
              __asm { PRFM            #0, [X14] }
              double v41 = &v30[4 * (v33 >> 1)];
              _X13 = (char *)v41 + v34;
              __asm { PRFM            #0, [X13] }
              if (*v41 >= v29) {
                unint64_t v44 = 0;
              }
              else {
                unint64_t v44 = v33 >> 1;
              }
              v30 += 4 * v44;
              v33 -= v33 >> 1;
            }
            while ((uint64_t)v33 > 1);
            unsigned int v31 = *v30;
          }
          v30 += 4 * (v31 < v29);
        }
        if (v30 == (unsigned int *)v32)
        {
          double v46 = *((double *)v32 - 1);
          goto LABEL_38;
        }
        int v45 = *(v30 - 4);
        if (*v30 != v45)
        {
          double v24 = *((double *)v30 - 1);
          double v46 = v24 + (double)(v29 - v45) / (double)(*v30 - v45) * (*((double *)v30 + 1) - v24);
          goto LABEL_38;
        }
      }
      double v46 = *((double *)v30 + 1);
LABEL_38:
      int v111 = sub_ECE090((_DWORD *)(a1 + 8864), v46, v24);
      sub_F88E34(a1 + 8, (uint64_t)a2, a4, &v114, a6, &v111, 0x7FFFFFFF, &v115, (unsigned int **)v112, (void *)(a1 + 8744), *(_DWORD *)(a1 + 8768), v93, *(_DWORD *)(a1 + 8776));
      sub_F8A7A8(a1 + 8, (uint64_t)&__p);
      sub_33998(v103, (uint64_t)&__p);
      sub_F8EA18(a1 + 3952, (uint64_t)a3, a4, &v113, a6, &v111, 0x7FFFFFFF, &v115, (unsigned int **)v112, (void *)(a1 + 8744), *(_DWORD *)(a1 + 8768), v94, *(_DWORD *)(a1 + 8776));
      sub_F8FE0C(a1 + 3952, (uint64_t)&__p);
      sub_33998(v103, (uint64_t)&__p);
      sub_FD3A44((uint64_t **)a1, (uint64_t)a2, (uint64_t)a3, a4, &v109);
      double v47 = (unsigned int *)v109;
      uint64_t v101 = v110;
      if (v109 != v110)
      {
        uint64_t v48 = (unsigned int *)((char *)v109 + 32);
        do
        {
          sub_FD4484(a1, v48 - 8, (uint64_t)&__p);
          if (!sub_EB2EC4((uint64_t)&__p))
          {
            if (*(unsigned char *)(v103 + 793))
            {
              unsigned int v51 = sub_FDB2F0(**(void **)a1, v48 - 2, 0) >> 32;
              unsigned int v52 = sub_FDB2F0(**(void **)a1, v48, 0) >> 32;
              sub_E1B4((uint64_t)v106);
              *(void *)((char *)v107 + *(void *)(v106[0] - 24)) = 9;
              uint64_t v53 = sub_188FC78(v107, (uint64_t)"\"ViaPath\": {", 12);
              long long v54 = sub_188FC78(v53, (uint64_t)"  \"cost_function\": \"", 20);
              char v55 = *(unsigned char *)(a4 + 31);
              if (v55 >= 0) {
                uint64_t v56 = a4 + 8;
              }
              else {
                uint64_t v56 = *(void *)(a4 + 8);
              }
              if (v55 >= 0) {
                uint64_t v57 = *(unsigned __int8 *)(a4 + 31);
              }
              else {
                uint64_t v57 = *(void *)(a4 + 16);
              }
              uint64_t v58 = sub_188FC78(v54, v56, v57);
              long long v59 = sub_188FC78(v58, (uint64_t)"\",", 2);
              char v60 = sub_188FC78(v59, (uint64_t)"  \"via_node\": \"", 15);
              long long v61 = sub_3F8738(v60, *((void *)v48 - 4));
              long long v62 = sub_188FC78(v61, (uint64_t)"\",", 2);
              long long v63 = sub_188FC78(v62, (uint64_t)"  \"path_cost\": \"", 16);
              std::ostream::operator<<();
              sub_188FC78(v63, (uint64_t)",", 1);
              std::ostream::operator<<();
              long long v64 = sub_188FC78(v63, (uint64_t)"\",", 2);
              long long v65 = sub_188FC78(v64, (uint64_t)"  \"path_length_lb\": \"", 21);
              std::ostream::operator<<();
              long long v66 = sub_188FC78(v65, (uint64_t)"\",", 2);
              long long v67 = sub_188FC78(v66, (uint64_t)"  \"plateau\": {", 14);
              unint64_t v68 = sub_188FC78(v67, (uint64_t)"    \"length_lb\": \"", 18);
              sub_FD0E64((uint64_t)(v48 - 8), *(uint64_t **)a1);
              std::ostream::operator<<();
              uint64_t v69 = sub_188FC78(v68, (uint64_t)"\",", 2);
              sub_188FC78(v69, (uint64_t)"    \"first_node_coord\":\"", 24);
              long double v70 = exp((double)v51 * -6.28318531 / 4294967300.0 + 3.14159265);
              atan((v70 + -1.0 / v70) * 0.5);
              uint64_t v71 = (void *)std::ostream::operator<<();
              sub_188FC78(v71, (uint64_t)",", 1);
              uint64_t v72 = (void *)std::ostream::operator<<();
              unint64_t v73 = sub_188FC78(v72, (uint64_t)"\",", 2);
              sub_188FC78(v73, (uint64_t)"    \"last_node_coord\": \"", 24);
              long double v74 = exp((double)v52 * -6.28318531 / 4294967300.0 + 3.14159265);
              atan((v74 + -1.0 / v74) * 0.5);
              unint64_t v75 = (void *)std::ostream::operator<<();
              sub_188FC78(v75, (uint64_t)",", 1);
              int v76 = (void *)std::ostream::operator<<();
              uint64_t v77 = sub_188FC78(v76, (uint64_t)"\"", 1);
              uint64_t v78 = sub_188FC78(v77, (uint64_t)"  }", 3);
              sub_188FC78(v78, (uint64_t)"}", 1);
              std::stringbuf::str();
              if (SHIBYTE(v117) < 0) {
                operator delete((void *)__p);
              }
              long long __p = v104;
              uint64_t v117 = v105;
              v106[0] = v97;
              *(void *)((char *)v106 + *(void *)(v97 - 24)) = v96;
              v107[0] = v95;
              if (v108 < 0) {
                operator delete((void *)v107[9]);
              }
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              std::ios::~ios();
            }
            unint64_t v79 = a9[1];
            if (v79 >= a9[2])
            {
              uint64_t v49 = sub_CE37BC(a9, &__p);
            }
            else
            {
              long long v80 = __p;
              *(void *)(v79 + 16) = v117;
              *(void *)(v79 + 24) = 0;
              *(_OWORD *)unint64_t v79 = v80;
              uint64_t v117 = 0;
              long long __p = 0uLL;
              *(void *)(v79 + 32) = 0;
              *(void *)(v79 + 40) = 0;
              *(_OWORD *)(v79 + 24) = v118;
              *(void *)(v79 + 40) = v119;
              long long v118 = 0uLL;
              uint64_t v119 = 0;
              *(_OWORD *)(v79 + 48) = v120;
              long long v81 = v121;
              long long v82 = v122;
              long long v83 = *(_OWORD *)v123;
              *(void *)(v79 + 110) = *(void *)&v123[14];
              *(_OWORD *)(v79 + 80) = v82;
              *(_OWORD *)(v79 + 96) = v83;
              *(_OWORD *)(v79 + 64) = v81;
              *(void *)(v79 + 120) = 0;
              *(void *)(v79 + 128) = 0;
              *(void *)(v79 + 136) = 0;
              *(void *)(v79 + 144) = 0;
              *(_OWORD *)(v79 + 120) = v124;
              *(void *)(v79 + 136) = v125;
              long long v124 = 0uLL;
              uint64_t v125 = 0;
              *(void *)(v79 + 152) = 0;
              *(void *)(v79 + 160) = 0;
              *(_OWORD *)(v79 + 144) = v126;
              long long v126 = 0uLL;
              *(void *)(v79 + 160) = v127;
              *(void *)(v79 + 168) = 0;
              uint64_t v127 = 0;
              *(void *)(v79 + 176) = 0;
              *(void *)(v79 + 184) = 0;
              *(_OWORD *)(v79 + 168) = v128;
              *(void *)(v79 + 184) = v129;
              long long v128 = 0uLL;
              uint64_t v129 = 0;
              long long v84 = v131;
              uint64_t v85 = v132;
              *(_OWORD *)(v79 + 192) = v130;
              *(_OWORD *)(v79 + 208) = v84;
              *(void *)(v79 + 224) = v85;
              *(void *)(v79 + 232) = 0;
              *(void *)(v79 + 240) = 0;
              *(void *)(v79 + 248) = 0;
              *(_OWORD *)(v79 + 232) = v133;
              long long v133 = 0uLL;
              *(void *)(v79 + 248) = v134;
              *(void *)(v79 + 256) = 0;
              uint64_t v134 = 0;
              *(void *)(v79 + 264) = 0;
              *(void *)(v79 + 272) = 0;
              *(_OWORD *)(v79 + 256) = v135;
              *(void *)(v79 + 272) = v136;
              long long v135 = 0uLL;
              uint64_t v136 = 0;
              *(_OWORD *)(v79 + 280) = v137;
              *(_DWORD *)(v79 + 304) = v139;
              if (v139 <= 1) {
                *(void *)(v79 + 296) = v138;
              }
              *(_OWORD *)(v79 + 312) = v140;
              long long v86 = v146;
              long long v88 = v143;
              long long v87 = v144;
              *(_OWORD *)(v79 + 392) = v145;
              *(_OWORD *)(v79 + 408) = v86;
              *(_OWORD *)(v79 + 360) = v88;
              *(_OWORD *)(v79 + 376) = v87;
              long long v90 = v148;
              long long v89 = v149[0];
              long long v91 = v147;
              *(void *)(v79 + 471) = *(void *)((char *)v149 + 15);
              *(_OWORD *)(v79 + 440) = v90;
              *(_OWORD *)(v79 + 456) = v89;
              *(_OWORD *)(v79 + 424) = v91;
              long long v92 = v142;
              *(_OWORD *)(v79 + 328) = v141;
              *(_OWORD *)(v79 + 344) = v92;
              uint64_t v49 = v79 + 480;
            }
            a9[1] = v49;
          }
          sub_4451C0((uint64_t)&__p);
          long long v50 = v48 + 16;
          v48 += 24;
        }
        while (v50 != v101);
        double v47 = (unsigned int *)v109;
      }
      if (v47)
      {
        unsigned int v110 = v47;
        operator delete(v47);
      }
      if (v112[0])
      {
        v112[1] = v112[0];
        operator delete(v112[0]);
      }
    }
  }
}

void sub_FD3098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  unsigned int v31 = (void *)STACK[0x218];
  if (!STACK[0x218])
  {
    sub_44106C(a30);
    _Unwind_Resume(a1);
  }
  STACK[0x220] = (unint64_t)v31;
  operator delete(v31);
  sub_44106C(a30);
  _Unwind_Resume(a1);
}

uint64_t sub_FD31B8(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v4 = (char **)result;
  if (*a4 != a4[1])
  {
    uint64_t v5 = a3;
    __n128 result = sub_5231C(a3);
    if (*(void *)result != *(void *)(result + 8) && *(unsigned char *)(a2 + 1392) != 0)
    {
      __n128 result = sub_65BD8();
      if (result)
      {
        uint64_t *v4 = 0;
        v4[1] = 0;
        uint64_t v95 = v4;
        v4[2] = 0;
        uint64_t v8 = *(void *)(a2 + 184);
        unsigned int v9 = sub_2D0F10((uint64_t)(a4[1] - *a4) >> 2);
        unsigned int v10 = *(_DWORD *)(v8 + 3872);
        if (v10 != -1 || (unsigned int v10 = 1, (v79 = sub_F93238(v8, 1u, 1)) == 0))
        {
LABEL_8:
          if (v10 >= v9) {
            uint64_t v11 = v9;
          }
          else {
            uint64_t v11 = v10;
          }
          __int16 v108 = 256;
          uint64_t v92 = v11;
          if (v11 < 2) {
            return sub_5231C(v5);
          }
          uint64_t v12 = 0;
          uint64_t v96 = v8 + 16;
          uint64_t v100 = v5;
          while (1)
          {
            if (!*((unsigned char *)&v108 + v12))
            {
              uint64_t v14 = 0;
              uint64_t v15 = 1;
              goto LABEL_21;
            }
            __n128 result = sub_5231C(v5);
            uint64_t v13 = *(void *)(result + 8) - *(void *)result;
            if (v13 >= 104) {
              break;
            }
LABEL_16:
            if (++v12 == 2) {
              return result;
            }
          }
          uint64_t v14 = 0x4EC4EC4EC4EC4EC5 * (v13 >> 3) - 1;
          uint64_t v15 = -1;
LABEL_21:
          uint64_t v97 = 104 * (int)v15;
          uint64_t v98 = v15;
          uint64_t v16 = 1;
          uint64_t v91 = v12;
          while (1)
          {
            __n128 result = sub_5231C(v5);
            if (v14 >= 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(result + 8) - *(void *)result) >> 3)) {
              goto LABEL_16;
            }
            unsigned int v104 = *(_DWORD *)(*a4 + 4 * v16);
            if (v104) {
              break;
            }
LABEL_122:
            if (++v16 == v92 || v14 < 0) {
              goto LABEL_16;
            }
          }
          int v107 = v16;
          unint64_t v17 = (void *)sub_5231C(v5);
          unint64_t v18 = sub_F968AC(v8, *(void *)(*v17 + 104 * v14) & 0xFFFFFFFFFFFFFFFLL, (*(void *)(*v17 + 104 * v14) & 0x2000000000000000) != 0, &v107);
          uint64_t v94 = v16;
          unsigned int v105 = 0;
          unint64_t v19 = HIDWORD(v18);
          unsigned int v20 = v18;
LABEL_25:
          int v101 = v19;
          unsigned int v102 = v20;
          uint64_t v21 = 104 * v14;
          while (1)
          {
            uint64_t v5 = v100;
            __n128 result = sub_5231C(v100);
            if (v14 < 0
              || (v14 < 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(result + 8) - *(void *)result) >> 3)
                ? (BOOL v22 = v105 >= v104)
                : (BOOL v22 = 1),
                  v22))
            {
              uint64_t v12 = v91;
              uint64_t v16 = v94;
              goto LABEL_122;
            }
            uint64_t v23 = *(void *)sub_5231C(v100) + v21;
            uint64_t v24 = *(void *)v23;
            unsigned int v99 = *(_DWORD *)(v23 + 96);
            uint64_t v25 = HIDWORD(*(void *)v23) & 0xFFFFFFFLL;
            int v106 = (*(void *)v23 >> 33) & 0x10000000;
            uint64_t v103 = *(void *)v23;
            int v111 = 1;
            v112[0] = v24;
            int v109 = &v111;
            unsigned int v110 = v112;
            unint64_t v26 = *(void *)(v8 + 3856) + 1;
            *(void *)(v8 + 3856) = v26;
            if (!*(void *)v8) {
              goto LABEL_70;
            }
            if (*(_DWORD *)(v8 + 688) == v24)
            {
              unsigned int v27 = 28;
            }
            else if (*(_DWORD *)(v8 + 712) == v24)
            {
              unsigned int v27 = 29;
            }
            else if (*(_DWORD *)(v8 + 736) == v24)
            {
              unsigned int v27 = 30;
            }
            else
            {
              if (*(_DWORD *)(v8 + 760) != v24)
              {
                unint64_t v43 = *(void *)(v8 + 744);
                unint64_t v44 = *(void *)(v8 + 720);
                unint64_t v45 = *(void *)(v8 + 696);
                unint64_t v46 = *(void *)(v8 + 768);
                unsigned int v29 = (unsigned int *)sub_2AB884(*(void *)v8, 7, v103, 1);
                if (v45 >= v26) {
                  unint64_t v47 = v26;
                }
                else {
                  unint64_t v47 = v45;
                }
                int v48 = 28;
                if (v45 >= v26) {
                  int v48 = 0;
                }
                if (v44 < v47)
                {
                  unint64_t v47 = v44;
                  int v48 = 29;
                }
                if (v43 < v47)
                {
                  int v48 = 30;
                  unint64_t v47 = v43;
                }
                BOOL v22 = v46 >= v47;
                unsigned int v49 = 31;
                if (v22) {
                  unsigned int v49 = v48;
                }
                uint64_t v50 = v96 + 24 * v49;
                *(_DWORD *)uint64_t v50 = v112[0];
                *(void *)(v50 + 8) = *(void *)(v8 + 3856);
                *(void *)(v50 + 16) = v29;
                if (!v29) {
                  goto LABEL_70;
                }
                goto LABEL_41;
              }
              unsigned int v27 = 31;
            }
            ++*(void *)(v8 + 3864);
            uint64_t v28 = v96 + 24 * v27;
            *(void *)(v28 + 8) = v26;
            unsigned int v29 = *(unsigned int **)(v28 + 16);
            if (!v29) {
              goto LABEL_70;
            }
LABEL_41:
            long long v30 = (int *)((char *)v29 + *v29);
            unsigned int v31 = (unsigned __int16 *)((char *)v30 - *v30);
            if (*v31 < 5u) {
              goto LABEL_50;
            }
            uint64_t v32 = v31[2];
            if (!v32) {
              goto LABEL_50;
            }
            uint64_t v33 = sub_F965E8((unsigned int *)((char *)v30 + v32 + *(unsigned int *)((char *)v30 + v32)), HIDWORD(v24) & 0xFFFFFFF);
            unint64_t v34 = (unsigned __int16 *)((char *)v30 - *v30);
            if (*v34 < 7u)
            {
              unint64_t v35 = 0;
            }
            else
            {
              unint64_t v35 = (unsigned int *)v34[3];
              if (v35) {
                unint64_t v35 = (unsigned int *)((char *)v35 + (void)v30 + *(unsigned int *)((char *)v35 + (void)v30));
              }
            }
            long long v36 = (int *)sub_F96748(v35, *(unsigned __int16 *)(v33 + 2 * (v106 == 0)));
            uint64_t v37 = (unsigned __int16 *)((char *)v36 - *v36);
            if (*v37 >= 5u && (uint64_t v38 = v37[2]) != 0) {
              uint64_t v39 = (unsigned int *)((char *)v36 + v38 + *(unsigned int *)((char *)v36 + v38));
            }
            else {
LABEL_50:
            }
              uint64_t v39 = 0;
            long long v40 = (unsigned int *)sub_BE1E78(v39, v107 - 1);
            unsigned int v20 = *v40;
            LODWORD(v19) = v40[1];
            if (!*(unsigned char *)(v8 + 3876)) {
              goto LABEL_72;
            }
            int v111 = 1;
            v112[0] = v20;
            int v109 = &v111;
            unsigned int v110 = v112;
            unint64_t v41 = *(void *)(v8 + 3856) + 1;
            *(void *)(v8 + 3856) = v41;
            if (!*(void *)v8) {
              goto LABEL_70;
            }
            if (*(_DWORD *)(v8 + 688) == v20)
            {
              unsigned int v42 = 28;
              goto LABEL_79;
            }
            if (*(_DWORD *)(v8 + 712) == v20)
            {
              unsigned int v42 = 29;
              goto LABEL_79;
            }
            if (*(_DWORD *)(v8 + 736) == v20)
            {
              unsigned int v42 = 30;
              goto LABEL_79;
            }
            if (*(_DWORD *)(v8 + 760) == v20)
            {
              unsigned int v42 = 31;
LABEL_79:
              ++*(void *)(v8 + 3864);
              uint64_t v51 = v96 + 24 * v42;
              *(void *)(v51 + 8) = v41;
              unsigned int v52 = *(unsigned int **)(v51 + 16);
              if (v52) {
                goto LABEL_80;
              }
              goto LABEL_70;
            }
            unint64_t v56 = *(void *)(v8 + 720);
            unint64_t v57 = *(void *)(v8 + 696);
            unint64_t v89 = *(void *)(v8 + 768);
            unint64_t v90 = *(void *)(v8 + 744);
            unsigned int v52 = (unsigned int *)sub_2AB884(*(void *)v8, 7, v20, 1);
            if (v57 >= v41) {
              unint64_t v58 = v41;
            }
            else {
              unint64_t v58 = v57;
            }
            int v59 = 28;
            if (v57 >= v41) {
              int v59 = 0;
            }
            if (v56 < v58)
            {
              unint64_t v58 = v56;
              int v59 = 29;
            }
            if (v90 < v58)
            {
              int v59 = 30;
              unint64_t v58 = v90;
            }
            BOOL v22 = v89 >= v58;
            unsigned int v60 = 31;
            if (v22) {
              unsigned int v60 = v59;
            }
            uint64_t v61 = v96 + 24 * v60;
            *(_DWORD *)uint64_t v61 = v112[0];
            *(void *)(v61 + 8) = *(void *)(v8 + 3856);
            *(void *)(v61 + 16) = v52;
            if (v52)
            {
LABEL_80:
              uint64_t v53 = (int *)((char *)v52 + *v52);
              long long v54 = (unsigned __int16 *)((char *)v53 - *v53);
              if (*v54 >= 9u)
              {
                uint64_t v55 = v54[4];
                if (v55)
                {
                  if (*(int *)((char *)v53 + v55 + *(unsigned int *)((char *)v53 + v55))) {
                    goto LABEL_72;
                  }
                }
              }
              goto LABEL_71;
            }
LABEL_70:
            sub_F933C8(&v109);
LABEL_71:
            unsigned int v20 = 0;
            LODWORD(v19) = -1;
LABEL_72:
            v14 += v98;
            if (v20 == v102)
            {
              v21 += v97;
              if (v19 == v101) {
                continue;
              }
            }
            unsigned int v62 = HIDWORD(v24) & 0x40000000;
            BOOL v63 = v24 < 0 && v62 == 0;
            unsigned int v64 = v62 >> 1;
            if (v63) {
              int v65 = 0x40000000;
            }
            else {
              int v65 = 0;
            }
            unint64_t v66 = (unint64_t)(v64 & 0x7FFFFFFF | (v99 >> 27 << 31) | v65 | v25 | v106) << 32;
            unint64_t v68 = v95[1];
            unint64_t v67 = (unint64_t)v95[2];
            if ((unint64_t)v68 >= v67)
            {
              long double v70 = *v95;
              uint64_t v71 = (v68 - *v95) >> 4;
              unint64_t v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 60) {
                sub_2E00();
              }
              uint64_t v73 = v67 - (void)v70;
              if (v73 >> 3 > v72) {
                unint64_t v72 = v73 >> 3;
              }
              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v74 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v74 = v72;
              }
              if (v74 >> 60) {
                sub_188D718();
              }
              unint64_t v75 = (char *)operator new(16 * v74);
              int v76 = &v75[16 * v71];
              *(void *)int v76 = v66 | v103;
              *((_DWORD *)v76 + 2) = v107;
              if (v68 == v70)
              {
                uint64_t v69 = v76 + 16;
                *uint64_t v95 = &v75[16 * v71];
                v95[1] = v76 + 16;
                v95[2] = &v75[16 * v74];
                if (!v70) {
                  goto LABEL_118;
                }
              }
              else
              {
                uint64_t v77 = &v75[16 * v71];
                do
                {
                  uint64_t v78 = v77 - 16;
                  *((_OWORD *)v77 - 1) = *((_OWORD *)v68 - 1);
                  v68 -= 16;
                  v77 -= 16;
                }
                while (v68 != v70);
                uint64_t v69 = v76 + 16;
                *uint64_t v95 = v78;
                v95[1] = v76 + 16;
                v95[2] = &v75[16 * v74];
                if (!v70) {
                  goto LABEL_118;
                }
              }
              operator delete(v70);
            }
            else
            {
              *(void *)unint64_t v68 = v66 | v103;
              *((_DWORD *)v68 + 2) = v107;
              uint64_t v69 = v68 + 16;
            }
LABEL_118:
            v95[1] = v69;
            ++v105;
            goto LABEL_25;
          }
        }
        long long v80 = &v79[-*(int *)v79];
        unsigned int v81 = *(unsigned __int16 *)v80;
        if (v81 < 0xB)
        {
          if (v81 < 9)
          {
LABEL_136:
            unsigned int v10 = 1;
            goto LABEL_8;
          }
        }
        else if (*((_WORD *)v80 + 5))
        {
          long long v82 = &v79[*((unsigned __int16 *)v80 + 5) + *(unsigned int *)&v79[*((unsigned __int16 *)v80 + 5)]];
          long long v83 = &v82[-*(int *)v82];
          if (*(unsigned __int16 *)v83 >= 5u && (uint64_t v84 = *((unsigned __int16 *)v83 + 2)) != 0) {
            unsigned int v10 = v82[v84];
          }
          else {
            unsigned int v10 = 0;
          }
          goto LABEL_8;
        }
        uint64_t v85 = *((unsigned __int16 *)v80 + 4);
        if (v85)
        {
          long long v86 = (int *)sub_F930D4((unsigned int *)&v79[v85 + *(unsigned int *)&v79[v85]], 0);
          unsigned int v10 = 0;
          long long v87 = (unsigned __int16 *)((char *)v86 - *v86);
          if (*v87 >= 5u)
          {
            uint64_t v88 = v87[2];
            if (v88) {
              unsigned int v10 = *((unsigned __int8 *)v86 + v88);
            }
            else {
              unsigned int v10 = 0;
            }
          }
          *(_DWORD *)(v8 + 3872) = v10;
          goto LABEL_8;
        }
        goto LABEL_136;
      }
    }
  }
  uint64_t *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  return result;
}

void sub_FD3A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unint64_t v17 = *(void **)a16;
  if (*(void *)a16)
  {
    *(void *)(a16 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_FD3A44(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  sub_F5FAA8(a2, *a1, (uint64_t)v108);
  sub_F5FAA8(a3, *a1, (uint64_t)v107);
  uint64_t v91 = a5;
  uint64_t v94 = (uint64_t)a1;
  sub_F76A04((uint64_t)(a1 + 494), &v104);
  uint64_t v8 = v105;
  unsigned int v9 = v106;
  if (v105 != v106)
  {
    unsigned int v10 = v104;
    uint64_t v11 = (uint64_t)(a1 + 1);
    uint64_t v12 = (uint64_t)(a1 + 990);
    do
    {
      unsigned int v17 = *v8;
      uint64_t v18 = *v10;
      unint64_t v19 = (unsigned int *)(*v10 + 80 * *v8);
      if (sub_F8A730(v11, v19))
      {
        sub_FDB3C0(v12, v19, (uint64_t)&v97);
        unsigned int v20 = v97;
        if (v99)
        {
          uint64_t v21 = v97[1] + 104 * v98;
          *(void *)uint64_t v21 = *(void *)v19;
          *(_OWORD *)(v21 + 40) = 0u;
          *(_OWORD *)(v21 + 56) = 0u;
          *(_OWORD *)(v21 + 72) = 0u;
          *(_OWORD *)(v21 + 88) = 0u;
          *(_OWORD *)(v21 + 8) = 0u;
          *(_OWORD *)(v21 + 24) = 0u;
          *(_OWORD *)(v21 + 48) = xmmword_20EC680;
          *(_OWORD *)(v21 + 64) = xmmword_20EC680;
          *(_OWORD *)(v21 + 80) = xmmword_20B8EB0;
          *(_DWORD *)(v21 + 96) = 0x7FFFFFFF;
        }
        uint64_t v22 = v98;
        uint64_t v23 = v20[1];
        uint64_t v24 = v23 + 104 * v98;
        *(void *)(v24 + 8) = *(void *)v19;
        uint64_t v25 = v18 + 80 * v17;
        *(void *)(v24 + 60) = *(void *)(v25 + 8);
        int v27 = *(_DWORD *)(v25 + 72);
        unint64_t v26 = (_DWORD *)(v25 + 72);
        if (v27 < 0) {
          uint64_t v13 = 0;
        }
        else {
          uint64_t v13 = *(void *)(v18 + 80 * v17 + 32);
        }
        uint64_t v14 = v23 + 104 * v22;
        *(void *)(v14 + 24) = v13;
        uint64_t v15 = v107[0] + 12 * (*v26 & 0x7FFFFFFF);
        uint64_t v16 = *(void *)v15;
        *(_DWORD *)(v14 + 96) = *(_DWORD *)(v15 + 8);
        *(void *)(v14 + 88) = v16;
      }
      ++v8;
    }
    while (v8 != v9);
  }
  sub_F76A04(v94 + 8, &v101);
  uint64_t v28 = v102;
  unsigned int v29 = v103;
  if (v102 != v103)
  {
    long long v30 = v101;
    do
    {
      unsigned int v31 = *v28;
      uint64_t v32 = *v30;
      sub_FD48B4(v94 + 7920, (unsigned int *)(*v30 + 80 * *v28), &v97);
      if (v97)
      {
        uint64_t v33 = v100;
        uint64_t v34 = v32 + 80 * v31;
        *(void *)(v100 + 52) = *(void *)(v34 + 8);
        int v36 = *(_DWORD *)(v34 + 72);
        unint64_t v35 = (_DWORD *)(v34 + 72);
        uint64_t v37 = v36 < 0 ? 0 : *(void *)(v32 + 80 * v31 + 24);
        *(void *)(v33 + 16) = v37;
        *(_DWORD *)(v33 + 48) = *(_DWORD *)(v32 + 80 * v31 + 16);
        uint64_t v38 = (char *)v108[0] + 12 * (*v35 & 0x7FFFFFFF);
        int v39 = *((_DWORD *)v38 + 2);
        *(void *)(v33 + 76) = *(void *)v38;
        *(_DWORD *)(v33 + 84) = v39;
        sub_FD4A20(v94, (uint64_t *)(v33 + 8));
        if (*(_DWORD *)(v33 + 52) != -1 && *(_DWORD *)(v33 + 56) != 0x7FFFFFFF)
        {
          int v40 = *(_DWORD *)(v33 + 60);
          if (v40 != -1)
          {
            int v41 = *(_DWORD *)(v33 + 64);
            if (v41 != 0x7FFFFFFF)
            {
              uint64_t v42 = (v41 + *(_DWORD *)(v33 + 56));
              if (v42 != 0x7FFFFFFF)
              {
                uint64_t v43 = (v40 + *(_DWORD *)(v33 + 52));
                if (v43 != -1)
                {
                  if (*(_DWORD *)(v94 + 8880) == -1
                    || (int v44 = *(_DWORD *)(v94 + 8884), v44 == 0x7FFFFFFF)
                    || (int)v42 < v44)
                  {
                    *(void *)(v94 + 8880) = v43 | (v42 << 32);
                  }
                }
              }
            }
          }
        }
      }
      ++v28;
    }
    while (v28 != v29);
  }
  unint64_t v45 = (char **)(v94 + 8688);
  long long v95 = 0uLL;
  uint64_t v96 = 0;
  uint64_t v46 = v94 + 7920;
  unint64_t v47 = *(char **)(v94 + 7920);
  int v48 = *(unsigned int **)(v94 + 7928);
  if (*v47 > -2)
  {
    unsigned int v49 = *(void **)(v94 + 7920);
    uint64_t v53 = *(void *)(v94 + 7944);
    uint64_t v51 = &v47[v53];
    unsigned int v52 = (char **)(v94 + 7920);
    if (v47 != &v47[v53]) {
      goto LABEL_35;
    }
  }
  else
  {
    unsigned int v49 = *(void **)(v94 + 7920);
    do
    {
      unint64_t v50 = (__clz(__rbit64(((*v49 >> 7) & ~*v49 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
      unsigned int v49 = (void *)((char *)v49 + v50);
      v48 += 26 * v50;
    }
    while (*(char *)v49 < -1);
    uint64_t v51 = &v47[*(void *)(v94 + 7944)];
    unsigned int v52 = (char **)(v94 + 7920);
    if (v49 != (void *)v51) {
      goto LABEL_35;
    }
  }
  unsigned int v52 = (char **)(v94 + 7968);
  uint64_t v75 = 1;
  uint64_t v76 = v94 + 7920;
  while (1)
  {
    int v48 = *(unsigned int **)(v76 + 56);
    unsigned int v49 = *v52;
    if (**v52 <= -2)
    {
      do
      {
        unint64_t v77 = (__clz(__rbit64(((*v49 >> 7) & ~*v49 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        unsigned int v49 = (void *)((char *)v49 + v77);
        v48 += 26 * v77;
      }
      while (*(char *)v49 < -1);
    }
    uint64_t v51 = &(*v52)[*(void *)(v76 + 72)];
    if (v49 != (void *)v51) {
      break;
    }
    uint64_t v76 = v46 + 48 * v75++;
    unsigned int v52 = (char **)(v76 + 48);
    if (v75 == 16)
    {
LABEL_94:
      if (*(unsigned char *)v45)
      {
        unint64_t v78 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v95 + 1) - v95) >> 5));
        if (*((void *)&v95 + 1) == (void)v95) {
          uint64_t v79 = 0;
        }
        else {
          uint64_t v79 = v78;
        }
        sub_FDBC04(v95, *((_DWORD **)&v95 + 1), (uint64_t)&v97, v79, 1);
        long long v80 = (unsigned char *)v95;
        unint64_t v81 = *(unsigned int *)(v94 + 8772);
        long long v82 = (unsigned char *)*((void *)&v95 + 1);
        unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v95 + 1) - v95) >> 5);
        uint64_t v84 = (unsigned char *)(v95 + 96 * v81);
        v91[1] = 0;
        v91[2] = 0;
        if (v83 <= v81) {
          uint64_t v85 = v82;
        }
        else {
          uint64_t v85 = v84;
        }
        *uint64_t v91 = 0;
        uint64_t v86 = v85 - v80;
        if (v85 != v80)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v86 >> 5) >= 0x2AAAAAAAAAAAAABLL) {
            sub_2E00();
          }
          long long v87 = (char *)operator new(v85 - v80);
          *uint64_t v91 = v87;
          v91[1] = v87;
          uint64_t v88 = &v87[32 * (v86 >> 5)];
          v91[2] = v88;
          if (v80 != v85) {
            memmove(v87, v80, v86 - 4);
          }
          v91[1] = v88;
        }
        if (v80)
        {
          *((void *)&v95 + 1) = v80;
          operator delete(v80);
          unint64_t v89 = (void *)v107[0];
          if (!v107[0]) {
            goto LABEL_112;
          }
LABEL_111:
          v107[1] = v89;
          operator delete(v89);
          goto LABEL_112;
        }
      }
      else
      {
        *(_OWORD *)uint64_t v91 = v95;
        v91[2] = v96;
      }
      unint64_t v89 = (void *)v107[0];
      if (!v107[0]) {
        goto LABEL_112;
      }
      goto LABEL_111;
    }
  }
LABEL_35:
  while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v95 + 1) - v95) >> 5) < *(unsigned int *)(v94 + 8772)
       || *(unsigned char *)v45)
  {
    if (!v48[2]) {
      goto LABEL_51;
    }
    if (v48[13] == -1) {
      goto LABEL_51;
    }
    if (v48[14] == 0x7FFFFFFF) {
      goto LABEL_51;
    }
    if (v48[15] == -1) {
      goto LABEL_51;
    }
    if (v48[16] == 0x7FFFFFFF) {
      goto LABEL_51;
    }
    if (v48[17] == -1) {
      goto LABEL_51;
    }
    if (v48[18] == 0x7FFFFFFF) {
      goto LABEL_51;
    }
    sub_FD48B4(v46, v48 + 6, &v97);
    if (v97)
    {
      if (v48[2] == *(_DWORD *)(v100 + 16) && v48[3] == *(_DWORD *)(v100 + 20)) {
        goto LABEL_51;
      }
    }
    if (v48[13] == -1) {
      goto LABEL_51;
    }
    if (v48[14] == 0x7FFFFFFF) {
      goto LABEL_51;
    }
    unsigned int v54 = v48[15];
    if (v54 == -1) {
      goto LABEL_51;
    }
    unsigned int v55 = v48[16];
    if (v55 == 0x7FFFFFFF) {
      goto LABEL_51;
    }
    int v62 = v55 + v48[14];
    if (v62 == 0x7FFFFFFF) {
      goto LABEL_51;
    }
    unsigned int v63 = v54 + v48[13];
    if (v63 == -1) {
      goto LABEL_51;
    }
    double v64 = *(double *)(v94 + 8784);
    double v65 = v64 * (double)*(int *)(v94 + 8884);
    if (v65 >= 0.0)
    {
      HIDWORD(v66) = 1127219200;
      if (v65 >= 4.50359963e15) {
        goto LABEL_74;
      }
      uint64_t v67 = (uint64_t)(v65 + v65) + 1;
    }
    else
    {
      HIDWORD(v66) = -1020264448;
      if (v65 <= -4.50359963e15) {
        goto LABEL_74;
      }
      uint64_t v67 = (uint64_t)(v65 + v65);
      if (v67 >= 1) {
        --v67;
      }
    }
    double v65 = (double)(v67 >> 1);
LABEL_74:
    if (v62 <= (int)v65)
    {
      if (!*(unsigned char *)(v94 + 8792) || (LODWORD(v66) = *(_DWORD *)(v94 + 8864), v64 * (double)v66 >= (double)v63))
      {
        unint64_t v68 = *(uint64_t **)v94;
        uint64_t v69 = **(void **)v94;
        if (!*(unsigned char *)(v69 + 7774)) {
          goto LABEL_84;
        }
        unsigned int v93 = v48[3];
        uint64_t v92 = v48[2];
        long double v70 = sub_290DEC(v69 + 3896, v92, 1);
        if (v70)
        {
          uint64_t v71 = &v70[-*(int *)v70];
          if (*(unsigned __int16 *)v71 >= 5u)
          {
            uint64_t v72 = *((unsigned __int16 *)v71 + 2);
            if (v72)
            {
              if (*(_DWORD *)&v70[v72 + *(unsigned int *)&v70[v72]] > (v93 & 0xFFFFFFF)
                && sub_295DB4(v69, v92 & 0xF0000000FFFFFFFFLL | ((unint64_t)(v93 & 0xFFFFFFF) << 32)))
              {
                unint64_t v68 = *(uint64_t **)v94;
LABEL_84:
                unint64_t v73 = sub_F8B1F0((uint64_t)v68, v48 + 2, 0x3B9ACA00u, a4);
                if (v73 != -1 && HIDWORD(v73) != 0x7FFFFFFF)
                {
                  int v74 = v48[18] + HIDWORD(v73);
                  v48[17] += v73;
                  v48[18] = v74;
                  if (sub_FD4B98(v94, v48 + 2))
                  {
                    if (sub_FD4C9C(v94, (uint64_t)(v48 + 2))) {
                      sub_3DEE84((char **)&v95, v48 + 2);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_51:
    int v56 = *((char *)v49 + 1);
    unsigned int v49 = (void *)((char *)v49 + 1);
    v48 += 26;
    if (v56 <= -2)
    {
      do
      {
        unint64_t v57 = (__clz(__rbit64(((*v49 >> 7) & ~*v49 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
        unsigned int v49 = (void *)((char *)v49 + v57);
        v48 += 26 * v57;
      }
      while (*(char *)v49 < -1);
    }
    if (v49 == (void *)v51)
    {
      unint64_t v58 = v52 + 6;
      if (v52 + 6 == v45) {
        goto LABEL_94;
      }
      while (1)
      {
        int v59 = v58;
        unsigned int v60 = v52[6];
        int v48 = (unsigned int *)v52[7];
        unsigned int v49 = v60;
        if (*v60 <= -2)
        {
          do
          {
            unint64_t v61 = (__clz(__rbit64(((*v49 >> 7) & ~*v49 | 0xFEFEFEFEFEFEFELL) + 1)) + 7) >> 3;
            unsigned int v49 = (void *)((char *)v49 + v61);
            v48 += 26 * v61;
          }
          while (*(char *)v49 < -1);
        }
        uint64_t v51 = &v52[9][(void)v60];
        if (v49 != (void *)v51) {
          break;
        }
        unint64_t v58 = v59 + 6;
        unsigned int v52 = v59;
        if (v59 + 6 == v45) {
          goto LABEL_94;
        }
      }
      unsigned int v52 = v59;
      if (!v59) {
        goto LABEL_94;
      }
    }
    else if (!v52)
    {
      goto LABEL_94;
    }
  }
  *(_OWORD *)uint64_t v91 = v95;
  v91[2] = v96;
  unint64_t v89 = (void *)v107[0];
  if (v107[0]) {
    goto LABEL_111;
  }
LABEL_112:
  if (v108[0])
  {
    v108[1] = v108[0];
    operator delete(v108[0]);
  }
}

void sub_FD4388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = *(void **)(v20 - 136);
    if (v21)
    {
LABEL_7:
      *(void *)(v20 - 128) = v21;
      operator delete(v21);
      uint64_t v22 = *(void **)(v20 - 112);
      if (v22)
      {
LABEL_8:
        *(void *)(v20 - 104) = v22;
        operator delete(v22);
        _Unwind_Resume(exception_object);
      }
LABEL_4:
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    uint64_t v21 = *(void **)(v20 - 136);
    if (v21) {
      goto LABEL_7;
    }
  }
  uint64_t v22 = *(void **)(v20 - 112);
  if (v22) {
    goto LABEL_8;
  }
  goto LABEL_4;
}

uint64_t sub_FD4484@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  sub_F89C78(a1 + 8, a2, (uint64_t)&v33);
  if (sub_EB2EC4((uint64_t)&v33))
  {
    *(_OWORD *)a3 = v33;
    uint64_t v6 = v36;
    *(void *)(a3 + 16) = v34;
    long long v33 = 0uLL;
    *(_OWORD *)(a3 + 24) = v35;
    *(void *)(a3 + 40) = v6;
    uint64_t v34 = 0;
    long long v35 = 0uLL;
    uint64_t v36 = 0;
    long long v7 = v37;
    long long v8 = v38;
    long long v9 = v39;
    long long v10 = *(_OWORD *)v40;
    *(void *)(a3 + 110) = *(void *)&v40[14];
    *(_OWORD *)(a3 + 80) = v9;
    *(_OWORD *)(a3 + 96) = v10;
    *(_OWORD *)(a3 + 48) = v7;
    *(_OWORD *)(a3 + 64) = v8;
    *(_OWORD *)(a3 + 120) = v41;
    *(void *)(a3 + 136) = v42;
    long long v41 = 0uLL;
    *(_OWORD *)(a3 + 144) = v43;
    uint64_t v11 = v46;
    *(void *)(a3 + 160) = v44;
    uint64_t v42 = 0;
    long long v43 = 0uLL;
    uint64_t v44 = 0;
    *(_OWORD *)(a3 + 168) = v45;
    *(void *)(a3 + 184) = v11;
    long long v45 = 0uLL;
    uint64_t v12 = v51;
    *(void *)(a3 + 224) = v49;
    long long v13 = v48;
    *(_OWORD *)(a3 + 192) = v47;
    *(_OWORD *)(a3 + 208) = v13;
    *(_OWORD *)(a3 + 232) = v50;
    *(void *)(a3 + 248) = v12;
    uint64_t v46 = 0;
    long long v50 = 0uLL;
    uint64_t v51 = 0;
    *(_OWORD *)(a3 + 256) = v52;
    *(void *)(a3 + 272) = v53;
    long long v52 = 0uLL;
    uint64_t v53 = 0;
    *(_OWORD *)(a3 + 280) = v54;
    LODWORD(v11) = v56;
    *(_DWORD *)(a3 + 304) = v56;
    if (v11 <= 1) {
      *(void *)(a3 + 296) = v55;
    }
    *(_OWORD *)(a3 + 312) = v57;
    long long v14 = v65;
    *(_OWORD *)(a3 + 424) = v64;
    *(_OWORD *)(a3 + 440) = v14;
    *(_OWORD *)(a3 + 456) = *(_OWORD *)v66;
    *(void *)(a3 + 471) = *(void *)&v66[15];
    long long v15 = v61;
    *(_OWORD *)(a3 + 360) = v60;
    *(_OWORD *)(a3 + 376) = v15;
    long long v16 = v63;
    *(_OWORD *)(a3 + 392) = v62;
    *(_OWORD *)(a3 + 408) = v16;
    long long v17 = v59;
    *(_OWORD *)(a3 + 328) = v58;
    *(_OWORD *)(a3 + 344) = v17;
  }
  else
  {
    sub_F8F608(a1 + 3952, a2, (uint64_t)v32);
    if (sub_EB2EC4((uint64_t)v32))
    {
      sub_4456B4((char *)a3, v32);
    }
    else
    {
      sub_EB3B28((uint64_t)&v33, (uint64_t)v32);
      *(_OWORD *)a3 = v33;
      uint64_t v18 = v36;
      *(void *)(a3 + 16) = v34;
      long long v33 = 0uLL;
      *(_OWORD *)(a3 + 24) = v35;
      *(void *)(a3 + 40) = v18;
      uint64_t v34 = 0;
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      long long v19 = v37;
      long long v20 = v38;
      long long v21 = v39;
      long long v22 = *(_OWORD *)v40;
      *(void *)(a3 + 110) = *(void *)&v40[14];
      *(_OWORD *)(a3 + 80) = v21;
      *(_OWORD *)(a3 + 96) = v22;
      *(_OWORD *)(a3 + 48) = v19;
      *(_OWORD *)(a3 + 64) = v20;
      *(_OWORD *)(a3 + 120) = v41;
      *(void *)(a3 + 136) = v42;
      long long v41 = 0uLL;
      *(_OWORD *)(a3 + 144) = v43;
      uint64_t v23 = v46;
      *(void *)(a3 + 160) = v44;
      uint64_t v42 = 0;
      long long v43 = 0uLL;
      uint64_t v44 = 0;
      *(_OWORD *)(a3 + 168) = v45;
      *(void *)(a3 + 184) = v23;
      long long v45 = 0uLL;
      uint64_t v24 = v51;
      *(void *)(a3 + 224) = v49;
      long long v25 = v48;
      *(_OWORD *)(a3 + 192) = v47;
      *(_OWORD *)(a3 + 208) = v25;
      *(_OWORD *)(a3 + 232) = v50;
      *(void *)(a3 + 248) = v24;
      uint64_t v46 = 0;
      long long v50 = 0uLL;
      uint64_t v51 = 0;
      *(_OWORD *)(a3 + 256) = v52;
      *(void *)(a3 + 272) = v53;
      long long v52 = 0uLL;
      uint64_t v53 = 0;
      *(_OWORD *)(a3 + 280) = v54;
      unsigned int v26 = v56;
      *(_DWORD *)(a3 + 304) = v56;
      if (v26 <= 1) {
        *(void *)(a3 + 296) = v55;
      }
      *(_OWORD *)(a3 + 312) = v57;
      long long v27 = v65;
      *(_OWORD *)(a3 + 424) = v64;
      *(_OWORD *)(a3 + 440) = v27;
      *(_OWORD *)(a3 + 456) = *(_OWORD *)v66;
      *(void *)(a3 + 471) = *(void *)&v66[15];
      long long v28 = v61;
      *(_OWORD *)(a3 + 360) = v60;
      *(_OWORD *)(a3 + 376) = v28;
      long long v29 = v63;
      *(_OWORD *)(a3 + 392) = v62;
      *(_OWORD *)(a3 + 408) = v29;
      long long v30 = v59;
      *(_OWORD *)(a3 + 328) = v58;
      *(_OWORD *)(a3 + 344) = v30;
    }
    sub_4451C0((uint64_t)v32);
  }
  return sub_4451C0((uint64_t)&v33);
}

void sub_FD486C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_4451C0((uint64_t)&a70);
  _Unwind_Resume(a1);
}

void sub_FD4880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_4451C0((uint64_t)&a10);
  sub_4451C0((uint64_t)&a70);
  _Unwind_Resume(a1);
}

void sub_FD489C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_4451C0((uint64_t)&a70);
  _Unwind_Resume(a1);
}

uint64_t sub_FD48B4@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  unsigned int v5 = a2[1];
  unint64_t v6 = 0x2127599BF4325C37
     * ((((v4 << 32) + (int)(16 * v5)) | (v5 >> 29) & 2 | (v5 >> 31) | (v5 >> 27) & 4 | (v5 >> 25) & 8) ^ ((unint64_t)((v4 << 32) + (int)(16 * v5)) >> 23));
  unint64_t v7 = (v6 ^ ~(v6 >> 47)) + ((v6 ^ (v6 >> 47)) << 21);
  unint64_t v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
  unint64_t v9 = 2147483649u * (v8 ^ (v8 >> 28));
  long long v10 = (uint64_t *)(result
                  + 48
                  * (((((unsigned __int16)(v8 ^ (v8 >> 28)) >> 8) ^ ((-2147483647
                                                                                     * (v8 ^ (v8 >> 28))) >> 16)) ^ ((-2147483647 * (v8 ^ (v8 >> 28))) >> 24)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = *v10;
  uint64_t v14 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v15 = v11 & v12;
    uint64_t v16 = *(void *)(v13 + v15);
    unint64_t v17 = ((v16 ^ v14) - 0x101010101010101) & ~(v16 ^ v14) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_8:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_11;
    }
    v3 += 8;
    unint64_t v11 = v3 + v15;
  }
  while (1)
  {
    unint64_t v18 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v12;
    long long v19 = (uint64_t *)(v10[1] + 104 * v18);
    if (*(_DWORD *)v19 == v4 && *((_DWORD *)v19 + 1) == v5) {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_8;
    }
  }
  if (v12 == v18)
  {
LABEL_11:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    a3[4] = 0;
    return result;
  }
  *a3 = v10;
  a3[1] = (uint64_t *)(result + 768);
  a3[2] = (uint64_t *)(v13 + v18);
  a3[3] = v19;
  a3[4] = (uint64_t *)(v13 + v12);
  return result;
}

uint64_t sub_FD4A20(uint64_t result, uint64_t *a2)
{
  *(uint64_t *)((char *)a2 + 60) = 0;
  uint64_t v3 = *a2;
  a2[3] = *a2;
  a2[4] = v3;
  int v4 = 0x7FFFFFFF;
  BOOL v5 = *((_DWORD *)a2 + 11) == -1 || *((_DWORD *)a2 + 12) == 0x7FFFFFFF;
  if (v5 || (int v6 = *((_DWORD *)a2 + 13), v6 == -1) || (v7 = *((_DWORD *)a2 + 14), v7 == 0x7FFFFFFF))
  {
    int v8 = -1;
    uint64_t v16 = a2[1];
    if (!v16) {
      return result;
    }
  }
  else
  {
    int v8 = v6 + *((_DWORD *)a2 + 11);
    int v4 = v7 + *((_DWORD *)a2 + 12);
    uint64_t v16 = a2[1];
    if (!v16) {
      return result;
    }
  }
  __n128 result = sub_FD539C(result + 7920, (unsigned int *)&v16, v14);
  if (v14[0])
  {
    unint64_t v9 = v15;
    int v10 = v15[13];
    if (v10 == -1)
    {
      int v12 = 0x7FFFFFFF;
      int v11 = -1;
    }
    else if (v15[14] == 0x7FFFFFFF)
    {
      int v11 = -1;
      int v12 = 0x7FFFFFFF;
    }
    else
    {
      int v11 = v15[15];
      int v12 = 0x7FFFFFFF;
      if (v11 != -1)
      {
        int v13 = v15[16];
        if (v13 == 0x7FFFFFFF)
        {
          int v11 = -1;
        }
        else
        {
          int v10 = v15[13];
          v11 += v10;
          int v12 = v13 + v15[14];
        }
      }
    }
    if (v12 != 0x7FFFFFFF && v11 != -1 && v11 == v8 && v12 == v4)
    {
      *(uint64_t *)((char *)a2 + 60) = (*((_DWORD *)a2 + 11) - v10 + v15[17]) | ((unint64_t)(*((_DWORD *)a2 + 12) - v15[14] + v15[18]) << 32);
      a2[3] = *((void *)v9 + 4);
    }
  }
  return result;
}

BOOL sub_FD4B98(uint64_t a1, unsigned int *a2)
{
  if (*(void *)(a1 + 8840) == *(void *)(a1 + 8848))
  {
    unsigned int v6 = a2[12];
    int v7 = a2[16];
    BOOL v8 = __OFSUB__(v6, v7);
    int v9 = v6 - v7;
    if (v9 < 0 != v8) {
      int v9 = 0;
    }
    if (*(unsigned char *)(a1 + 8808)) {
      int v9 = *(_DWORD *)(a1 + 8884);
    }
    double v12 = (double)v9 / 10.0;
    return v7 >= (int)sub_EFB0C8(&v12, (double **)(a1 + 8816));
  }
  else
  {
    int v4 = (double **)(a1 + 8840);
    if (*(unsigned char *)(a1 + 8808)) {
      uint64_t v5 = *(void *)(a1 + 8872);
    }
    else {
      uint64_t v5 = sub_FD1128(a2, *(uint64_t **)a1);
    }
    uint64_t v11 = sub_FD0E64((uint64_t)a2, *(uint64_t **)a1);
    double v12 = (double)v5 / 100.0;
    return v11 >= sub_FCCE50(&v12, v4);
  }
}

uint64_t sub_FD4C9C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8812);
  if (v4 == 2)
  {
    int v7 = *(_DWORD *)(a2 + 44);
    int v6 = *(_DWORD *)(a2 + 48);
    if (v7 != -1 && v6 != 0x7FFFFFFF && *(_DWORD *)(a2 + 52) != -1)
    {
      int v10 = *(_DWORD *)(a2 + 56);
      if (v10 != 0x7FFFFFFF)
      {
        int v11 = *(_DWORD *)(a2 + 48);
        if (v10 + v11 < *(_DWORD *)(a1 + 8868)) {
          return 1;
        }
        int v12 = *(_DWORD *)(a2 + 44);
        uint64_t v96 = a1;
        int v13 = 0x7FFFFFFF;
        if (v12 == -1 || v11 == 0x7FFFFFFF) {
          goto LABEL_25;
        }
        goto LABEL_23;
      }
    }
  }
  else
  {
    if (v4 == 3) {
      return 1;
    }
    int v7 = *(_DWORD *)(a2 + 44);
    int v6 = *(_DWORD *)(a2 + 48);
  }
  uint64_t v96 = a1;
  int v13 = 0x7FFFFFFF;
  if (v7 == -1 || v6 == 0x7FFFFFFF) {
    goto LABEL_25;
  }
LABEL_23:
  int v16 = *(_DWORD *)(a2 + 52);
  if (v16 == -1 || (int v17 = *(_DWORD *)(a2 + 56), v17 == 0x7FFFFFFF))
  {
LABEL_25:
    unsigned int v18 = -1;
    goto LABEL_26;
  }
  unsigned int v18 = v16 + *(_DWORD *)(a2 + 44);
  int v13 = v17 + *(_DWORD *)(a2 + 48);
LABEL_26:
  if (v4) {
    unsigned int v19 = v13;
  }
  else {
    unsigned int v19 = v18;
  }
  unint64_t v94 = sub_FDB2F0(**(void **)a1, (unsigned int *)(a2 + 24), 0);
  int v95 = v20;
  uint64_t v5 = 1;
  unint64_t v21 = sub_FDB2F0(**(void **)a1, (unsigned int *)(a2 + 32), 1);
  int v93 = v22;
  uint64_t v23 = *(void *)(a2 + 32);
  uint64_t v91 = *(void *)(a2 + 24);
  unint64_t v92 = v21;
  uint64_t v90 = v23;
  BOOL v24 = v91 != 0;
  if (v91 || v23)
  {
    uint64_t v85 = a1 + 3952;
    int v26 = v13;
    unsigned int v27 = v18;
    while (1)
    {
      while (v18 < v27 || v27 >= v18 && v13 < v26)
      {
        if (!v23) {
          return 1;
        }
        uint64_t v90 = sub_F901C0(v85, v90);
        if (!v90) {
          return 1;
        }
        sub_FD539C(a1 + 7920, (unsigned int *)&v90, v88);
        if (v88[0])
        {
          if (v89[13] != -1 && v89[14] != 0x7FFFFFFF)
          {
            int v41 = v89[15];
            if (v41 != -1)
            {
              int v42 = v89[16];
              if (v42 != 0x7FFFFFFF)
              {
                int v43 = v42 + v89[14];
                if (v43 != 0x7FFFFFFF)
                {
                  unsigned int v44 = v41 + v89[13];
                  if (v44 != -1 && (v44 != v27 || v43 != v26))
                  {
                    int v45 = *(_DWORD *)(a1 + 8812);
                    if (v45) {
                      unsigned int v46 = v42 + v89[14];
                    }
                    else {
                      unsigned int v46 = v44;
                    }
                    long long v47 = v89 + 16;
                    if (!v45) {
                      long long v47 = v89 + 15;
                    }
                    if (v45 == 2)
                    {
                      unint64_t v48 = sub_F8AE24(a1 + 8, v90, *(void *)a2);
                      if (v48)
                      {
                        sub_2954EC(**(void **)a1, (((unint64_t)(HIDWORD(v90) & 0x10000000) << 20) | ((unint64_t)WORD2(v90) << 32) | v90) ^ 0x1000000000000, (uint64_t)&v97);
                        uint64_t v49 = v98;
                        if (v98 == v99)
                        {
                          unint64_t v51 = 0xFFFFFFFF00000000;
                          uint64_t v52 = 0xFFFFFFFFLL;
                          int v54 = 0x7FFFFFFF;
                        }
                        else
                        {
                          unint64_t v50 = sub_2E1AA4((uint64_t)&v97);
                          LODWORD(v52) = v50;
                          unint64_t v51 = v50 & 0xFFFFFFFF00000000;
                          uint64_t v49 = v98;
                          uint64_t v52 = v52;
                          int v54 = v53;
                        }
                        if (v49)
                        {
                          char v99 = v49;
                          unint64_t v79 = v51;
                          unint64_t v81 = v48;
                          uint64_t v64 = v52;
                          operator delete(v49);
                          uint64_t v52 = v64;
                          unint64_t v51 = v79;
                          unint64_t v48 = v81;
                        }
                        unint64_t v86 = v51 | v52;
                        int v87 = v54;
                        sub_2954EC(**(void **)a1, (v48 & 0xFFFFFFFFFFFFLL | (((v48 >> 60) & 1) << 48)) ^ 0x1000000000000, (uint64_t)&v97);
                        long long v65 = v98;
                        if (v98 == v99)
                        {
                          unint64_t v68 = 0xFFFFFFFF00000000;
                          uint64_t v69 = 0xFFFFFFFFLL;
                          int v71 = 0x7FFFFFFF;
                        }
                        else
                        {
                          unint64_t v66 = sub_2E40A4((uint64_t)&v97);
                          unsigned int v67 = v66;
                          unint64_t v68 = v66 & 0xFFFFFFFF00000000;
                          long long v65 = v98;
                          uint64_t v69 = v67;
                          int v71 = v70;
                        }
                        if (v65)
                        {
                          char v99 = v65;
                          int v82 = v71;
                          operator delete(v65);
                          int v71 = v82;
                        }
                        unint64_t v97 = v68 | v69;
                        LODWORD(v98) = v71;
                        if (sub_FCCF6C(&v96, (unsigned int *)&v97, (unsigned int *)&v94, (unsigned int *)&v92, (unsigned int *)&v86))
                        {
                          return 0;
                        }
                      }
                    }
                    else
                    {
                      int v55 = *v47;
                      if (*(double *)(a1 + 8800) * (double)(int)(v46 - *v47) < (double)(int)(v19 - *v47)) {
                        return 0;
                      }
                      unint64_t v56 = sub_F8AE24(a1 + 8, v90, *(void *)a2);
                      if (v56)
                      {
                        unint64_t v57 = sub_F8ADA0(a1 + 8, v56);
                        unint64_t v58 = HIDWORD(v57);
                        if (!*(_DWORD *)(a1 + 8812)) {
                          LODWORD(v58) = v57;
                        }
                        if (*(double *)(a1 + 8800) * (double)(int)(v46 - (v55 + v58)) < (double)(int)(v19 - (v55 + v58))) {
                          return 0;
                        }
                      }
                    }
                    unsigned int v27 = v44;
                    int v26 = v43;
                  }
                }
              }
            }
          }
        }
LABEL_61:
        LODWORD(v23) = v90;
        BOOL v24 = v91 != 0;
        if (!(v91 | v90)) {
          return 1;
        }
      }
      if (!v24) {
        return 1;
      }
      uint64_t v91 = sub_F8AB5C(a1 + 8, v91);
      if (!v91) {
        return 1;
      }
      sub_FD539C(a1 + 7920, (unsigned int *)&v91, v88);
      if (v88[0])
      {
        if (v89[13] != -1 && v89[14] != 0x7FFFFFFF)
        {
          int v28 = v89[15];
          if (v28 != -1)
          {
            int v29 = v89[16];
            if (v29 != 0x7FFFFFFF)
            {
              int v30 = v29 + v89[14];
              if (v30 != 0x7FFFFFFF)
              {
                unsigned int v31 = v28 + v89[13];
                if (v31 != -1 && (v31 != v18 || v30 != v13))
                {
                  int v32 = *(_DWORD *)(a1 + 8812);
                  if (v32 != 2)
                  {
                    if (v32) {
                      unsigned int v59 = v29 + v89[14];
                    }
                    else {
                      unsigned int v59 = v31;
                    }
                    if (v32) {
                      int v60 = v89[14];
                    }
                    else {
                      int v60 = v89[13];
                    }
                    if (*(double *)(a1 + 8800) * (double)(int)(v59 - v60) < (double)(int)(v19 - v60)) {
                      return 0;
                    }
                    unsigned int v18 = v31;
                    unint64_t v61 = sub_F90254(v85, v91, *(void *)a2);
                    if (v61)
                    {
                      unint64_t v62 = sub_F8ADA0(v85, v61);
                      unint64_t v63 = HIDWORD(v62);
                      if (!*(_DWORD *)(a1 + 8812)) {
                        LODWORD(v63) = v62;
                      }
                      if (*(double *)(a1 + 8800) * (double)(int)(v59 - (v60 + v63)) < (double)(int)(v19 - (v60 + v63))) {
                        return 0;
                      }
                    }
                    goto LABEL_113;
                  }
                  unsigned int v18 = v31;
                  unint64_t v33 = sub_F90254(v85, v91, *(void *)a2);
                  if (v33)
                  {
                    sub_2954EC(**(void **)a1, (((unint64_t)(HIDWORD(v91) & 0x10000000) << 20) | ((unint64_t)WORD2(v91) << 32) | v91) ^ 0x1000000000000, (uint64_t)&v97);
                    uint64_t v34 = v98;
                    if (v98 == v99)
                    {
                      unint64_t v37 = 0xFFFFFFFF00000000;
                      uint64_t v38 = 0xFFFFFFFFLL;
                      int v40 = 0x7FFFFFFF;
                    }
                    else
                    {
                      unint64_t v35 = sub_2E40A4((uint64_t)&v97);
                      unsigned int v36 = v35;
                      unint64_t v37 = v35 & 0xFFFFFFFF00000000;
                      uint64_t v34 = v98;
                      uint64_t v38 = v36;
                      int v40 = v39;
                    }
                    if (v34)
                    {
                      char v99 = v34;
                      int v80 = v40;
                      unint64_t v83 = v37;
                      operator delete(v34);
                      int v40 = v80;
                      unint64_t v37 = v83;
                    }
                    unint64_t v86 = v37 | v38;
                    int v87 = v40;
                    sub_2954EC(**(void **)a1, (v33 & 0xFFFFFFFFFFFFLL | (((v33 >> 60) & 1) << 48)) ^ 0x1000000000000, (uint64_t)&v97);
                    uint64_t v72 = v98;
                    if (v98 == v99)
                    {
                      unint64_t v75 = 0xFFFFFFFF00000000;
                      uint64_t v76 = 0xFFFFFFFFLL;
                      int v78 = 0x7FFFFFFF;
                    }
                    else
                    {
                      unint64_t v73 = sub_2E1AA4((uint64_t)&v97);
                      unsigned int v74 = v73;
                      unint64_t v75 = v73 & 0xFFFFFFFF00000000;
                      uint64_t v72 = v98;
                      uint64_t v76 = v74;
                      int v78 = v77;
                    }
                    if (v72)
                    {
                      char v99 = v72;
                      int v84 = v78;
                      operator delete(v72);
                      int v78 = v84;
                    }
                    unint64_t v97 = v75 | v76;
                    LODWORD(v98) = v78;
                    if (sub_FCCF6C(&v96, (unsigned int *)&v86, (unsigned int *)&v94, (unsigned int *)&v92, (unsigned int *)&v97))
                    {
                      return 0;
                    }
LABEL_113:
                    int v13 = v30;
                    goto LABEL_61;
                  }
                  int v13 = v30;
                }
              }
            }
          }
        }
      }
      LODWORD(v23) = v90;
      BOOL v24 = v91 != 0;
      if (!(v91 | v90)) {
        return 1;
      }
    }
  }
  return v5;
}

void sub_FD5374(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(void *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FD539C@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  unsigned int v5 = a2[1];
  unint64_t v6 = 0x2127599BF4325C37
     * ((((v4 << 32) + (int)(16 * v5)) | (v5 >> 29) & 2 | (v5 >> 31) | (v5 >> 27) & 4 | (v5 >> 25) & 8) ^ ((unint64_t)((v4 << 32) + (int)(16 * v5)) >> 23));
  unint64_t v7 = (v6 ^ ~(v6 >> 47)) + ((v6 ^ (v6 >> 47)) << 21);
  unint64_t v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
  unint64_t v9 = 2147483649u * (v8 ^ (v8 >> 28));
  int v10 = (void *)(result
                 + 48
                 * (((((unsigned __int16)(v8 ^ (v8 >> 28)) >> 8) ^ ((-2147483647
                                                                                    * (v8 ^ (v8 >> 28))) >> 16)) ^ ((-2147483647 * (v8 ^ (v8 >> 28))) >> 24)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  uint64_t v13 = *v10;
  uint64_t v14 = 0x101010101010101 * (v9 & 0x7F);
  while (1)
  {
    unint64_t v15 = v11 & v12;
    uint64_t v16 = *(void *)(v13 + v15);
    unint64_t v17 = ((v16 ^ v14) - 0x101010101010101) & ~(v16 ^ v14) & 0x8080808080808080;
    if (v17) {
      break;
    }
LABEL_8:
    if ((v16 & (~v16 << 6) & 0x8080808080808080) != 0)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      a3[3] = v10;
      a3[4] = 0;
      return result;
    }
    v3 += 8;
    unint64_t v11 = v3 + v15;
  }
  while (1)
  {
    unint64_t v19 = (v15 + (__clz(__rbit64(v17)) >> 3)) & v12;
    uint64_t v18 = v10[1];
    int v20 = (_DWORD *)(v18 + 104 * v19);
    if (*v20 == v4 && v20[1] == v5) {
      break;
    }
    v17 &= v17 - 1;
    if (!v17) {
      goto LABEL_8;
    }
  }
  BOOL v22 = v12 == v19;
  uint64_t v23 = v13 + v19;
  uint64_t v24 = v13 + v12;
  uint64_t v25 = result + 768;
  if (v12 == v19)
  {
    uint64_t v23 = 0;
    uint64_t v25 = 0;
    int v26 = 0;
  }
  else
  {
    int v26 = v10;
  }
  if (v22) {
    unsigned int v27 = a3;
  }
  else {
    unsigned int v27 = (void *)(v18 + 104 * v19);
  }
  if (v22) {
    uint64_t v24 = 0;
  }
  *a3 = v26;
  a3[1] = v25;
  a3[2] = v23;
  a3[3] = v27;
  a3[4] = v24;
  return result;
}

void *sub_FD5524(void *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  a1[5] = 0;
  *a1 = &unk_20E1710;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  if (v4)
  {
    unint64_t v5 = __clz(v4);
    unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> v5;
    if (v5 == 61) {
      unint64_t v7 = 6;
    }
    else {
      unint64_t v7 = (0xFFFFFFFFFFFFFFFFLL >> v5) - (0x1FFFFFFFFFFFFFFFuLL >> v5);
    }
    a1[5] = v7;
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v9 = (char *)operator new(v8 + 104 * v6);
    *a1 = v9;
    a1[1] = &v9[v8];
    memset(v9, 128, v6 + 8);
    v9[v6] = -1;
    a1[5] = v7;
    a1[3] = v6;
  }
  a1[6] = &unk_20E1710;
  unint64_t v10 = *a2;
  a1[11] = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  if (v10)
  {
    unint64_t v11 = __clz(v10);
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> v11;
    if (v11 == 61) {
      unint64_t v13 = 6;
    }
    else {
      unint64_t v13 = (0xFFFFFFFFFFFFFFFFLL >> v11) - (0x1FFFFFFFFFFFFFFFuLL >> v11);
    }
    a1[11] = v13;
    unint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v15 = (char *)operator new(v14 + 104 * v12);
    a1[6] = v15;
    a1[7] = &v15[v14];
    memset(v15, 128, v12 + 8);
    v15[v12] = -1;
    a1[11] = v13;
    a1[9] = v12;
  }
  a1[12] = &unk_20E1710;
  unint64_t v16 = *a2;
  a1[17] = 0;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  if (v16)
  {
    unint64_t v17 = __clz(v16);
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> v17;
    if (v17 == 61) {
      unint64_t v19 = 6;
    }
    else {
      unint64_t v19 = (0xFFFFFFFFFFFFFFFFLL >> v17) - (0x1FFFFFFFFFFFFFFFuLL >> v17);
    }
    a1[17] = v19;
    unint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v21 = (char *)operator new(v20 + 104 * v18);
    a1[12] = v21;
    a1[13] = &v21[v20];
    memset(v21, 128, v18 + 8);
    v21[v18] = -1;
    a1[17] = v19;
    a1[15] = v18;
  }
  a1[18] = &unk_20E1710;
  unint64_t v22 = *a2;
  a1[23] = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[19] = 0;
  if (v22)
  {
    unint64_t v23 = __clz(v22);
    unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> v23;
    if (v23 == 61) {
      unint64_t v25 = 6;
    }
    else {
      unint64_t v25 = (0xFFFFFFFFFFFFFFFFLL >> v23) - (0x1FFFFFFFFFFFFFFFuLL >> v23);
    }
    a1[23] = v25;
    unint64_t v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v27 = (char *)operator new(v26 + 104 * v24);
    a1[18] = v27;
    a1[19] = &v27[v26];
    memset(v27, 128, v24 + 8);
    v27[v24] = -1;
    a1[23] = v25;
    a1[21] = v24;
  }
  a1[24] = &unk_20E1710;
  unint64_t v28 = *a2;
  a1[29] = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = 0;
  if (v28)
  {
    unint64_t v29 = __clz(v28);
    unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> v29;
    if (v29 == 61) {
      unint64_t v31 = 6;
    }
    else {
      unint64_t v31 = (0xFFFFFFFFFFFFFFFFLL >> v29) - (0x1FFFFFFFFFFFFFFFuLL >> v29);
    }
    a1[29] = v31;
    unint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v33 = (char *)operator new(v32 + 104 * v30);
    a1[24] = v33;
    a1[25] = &v33[v32];
    memset(v33, 128, v30 + 8);
    v33[v30] = -1;
    a1[29] = v31;
    a1[27] = v30;
  }
  a1[30] = &unk_20E1710;
  unint64_t v34 = *a2;
  a1[35] = 0;
  a1[32] = 0;
  a1[33] = 0;
  a1[31] = 0;
  if (v34)
  {
    unint64_t v35 = __clz(v34);
    unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> v35;
    if (v35 == 61) {
      unint64_t v37 = 6;
    }
    else {
      unint64_t v37 = (0xFFFFFFFFFFFFFFFFLL >> v35) - (0x1FFFFFFFFFFFFFFFuLL >> v35);
    }
    a1[35] = v37;
    unint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v39 = (char *)operator new(v38 + 104 * v36);
    a1[30] = v39;
    a1[31] = &v39[v38];
    memset(v39, 128, v36 + 8);
    v39[v36] = -1;
    a1[35] = v37;
    a1[33] = v36;
  }
  unint64_t v40 = *a2;
  a1[41] = 0;
  a1[36] = &unk_20E1710;
  a1[37] = 0;
  a1[38] = 0;
  a1[39] = 0;
  if (v40)
  {
    unint64_t v41 = __clz(v40);
    unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> v41;
    if (v41 == 61) {
      unint64_t v43 = 6;
    }
    else {
      unint64_t v43 = (0xFFFFFFFFFFFFFFFFLL >> v41) - (0x1FFFFFFFFFFFFFFFuLL >> v41);
    }
    a1[41] = v43;
    unint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v45 = (char *)operator new(v44 + 104 * v42);
    a1[36] = v45;
    a1[37] = &v45[v44];
    memset(v45, 128, v42 + 8);
    v45[v42] = -1;
    a1[41] = v43;
    a1[39] = v42;
  }
  unint64_t v46 = *a2;
  a1[47] = 0;
  a1[42] = &unk_20E1710;
  a1[43] = 0;
  a1[44] = 0;
  a1[45] = 0;
  if (v46)
  {
    unint64_t v47 = __clz(v46);
    unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> v47;
    if (v47 == 61) {
      unint64_t v49 = 6;
    }
    else {
      unint64_t v49 = (0xFFFFFFFFFFFFFFFFLL >> v47) - (0x1FFFFFFFFFFFFFFFuLL >> v47);
    }
    a1[47] = v49;
    unint64_t v50 = (v48 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v51 = (char *)operator new(v50 + 104 * v48);
    a1[42] = v51;
    a1[43] = &v51[v50];
    memset(v51, 128, v48 + 8);
    v51[v48] = -1;
    a1[47] = v49;
    a1[45] = v48;
  }
  unint64_t v52 = *a2;
  a1[53] = 0;
  a1[48] = &unk_20E1710;
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  if (v52)
  {
    unint64_t v53 = __clz(v52);
    unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> v53;
    if (v53 == 61) {
      unint64_t v55 = 6;
    }
    else {
      unint64_t v55 = (0xFFFFFFFFFFFFFFFFLL >> v53) - (0x1FFFFFFFFFFFFFFFuLL >> v53);
    }
    a1[53] = v55;
    unint64_t v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v57 = (char *)operator new(v56 + 104 * v54);
    a1[48] = v57;
    a1[49] = &v57[v56];
    memset(v57, 128, v54 + 8);
    v57[v54] = -1;
    a1[53] = v55;
    a1[51] = v54;
  }
  unint64_t v58 = *a2;
  a1[59] = 0;
  a1[54] = &unk_20E1710;
  a1[55] = 0;
  a1[56] = 0;
  a1[57] = 0;
  if (v58)
  {
    unint64_t v59 = __clz(v58);
    unint64_t v60 = 0xFFFFFFFFFFFFFFFFLL >> v59;
    if (v59 == 61) {
      unint64_t v61 = 6;
    }
    else {
      unint64_t v61 = (0xFFFFFFFFFFFFFFFFLL >> v59) - (0x1FFFFFFFFFFFFFFFuLL >> v59);
    }
    a1[59] = v61;
    unint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v63 = (char *)operator new(v62 + 104 * v60);
    a1[54] = v63;
    a1[55] = &v63[v62];
    memset(v63, 128, v60 + 8);
    v63[v60] = -1;
    a1[59] = v61;
    a1[57] = v60;
  }
  unint64_t v64 = *a2;
  a1[65] = 0;
  a1[60] = &unk_20E1710;
  a1[61] = 0;
  a1[62] = 0;
  a1[63] = 0;
  if (v64)
  {
    unint64_t v65 = __clz(v64);
    unint64_t v66 = 0xFFFFFFFFFFFFFFFFLL >> v65;
    if (v65 == 61) {
      unint64_t v67 = 6;
    }
    else {
      unint64_t v67 = (0xFFFFFFFFFFFFFFFFLL >> v65) - (0x1FFFFFFFFFFFFFFFuLL >> v65);
    }
    a1[65] = v67;
    unint64_t v68 = (v66 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v69 = (char *)operator new(v68 + 104 * v66);
    a1[60] = v69;
    a1[61] = &v69[v68];
    memset(v69, 128, v66 + 8);
    v69[v66] = -1;
    a1[65] = v67;
    a1[63] = v66;
  }
  unint64_t v70 = *a2;
  a1[66] = &unk_20E1710;
  a1[71] = 0;
  a1[67] = 0;
  a1[69] = 0;
  a1[68] = 0;
  if (v70)
  {
    unint64_t v71 = __clz(v70);
    unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> v71;
    if (v71 == 61) {
      unint64_t v73 = 6;
    }
    else {
      unint64_t v73 = (0xFFFFFFFFFFFFFFFFLL >> v71) - (0x1FFFFFFFFFFFFFFFuLL >> v71);
    }
    a1[71] = v73;
    unint64_t v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v75 = (char *)operator new(v74 + 104 * v72);
    a1[66] = v75;
    a1[67] = &v75[v74];
    memset(v75, 128, v72 + 8);
    v75[v72] = -1;
    a1[71] = v73;
    a1[69] = v72;
  }
  unint64_t v76 = *a2;
  a1[72] = &unk_20E1710;
  a1[77] = 0;
  a1[73] = 0;
  a1[75] = 0;
  a1[74] = 0;
  if (v76)
  {
    unint64_t v77 = __clz(v76);
    unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> v77;
    if (v77 == 61) {
      unint64_t v79 = 6;
    }
    else {
      unint64_t v79 = (0xFFFFFFFFFFFFFFFFLL >> v77) - (0x1FFFFFFFFFFFFFFFuLL >> v77);
    }
    a1[77] = v79;
    unint64_t v80 = (v78 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v81 = (char *)operator new(v80 + 104 * v78);
    a1[72] = v81;
    a1[73] = &v81[v80];
    memset(v81, 128, v78 + 8);
    v81[v78] = -1;
    a1[77] = v79;
    a1[75] = v78;
  }
  unint64_t v82 = *a2;
  a1[78] = &unk_20E1710;
  a1[83] = 0;
  a1[79] = 0;
  a1[81] = 0;
  a1[80] = 0;
  if (v82)
  {
    unint64_t v83 = __clz(v82);
    unint64_t v84 = 0xFFFFFFFFFFFFFFFFLL >> v83;
    if (v83 == 61) {
      unint64_t v85 = 6;
    }
    else {
      unint64_t v85 = (0xFFFFFFFFFFFFFFFFLL >> v83) - (0x1FFFFFFFFFFFFFFFuLL >> v83);
    }
    a1[83] = v85;
    unint64_t v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v87 = (char *)operator new(v86 + 104 * v84);
    a1[78] = v87;
    a1[79] = &v87[v86];
    memset(v87, 128, v84 + 8);
    v87[v84] = -1;
    a1[83] = v85;
    a1[81] = v84;
  }
  unint64_t v88 = *a2;
  a1[84] = &unk_20E1710;
  a1[89] = 0;
  a1[85] = 0;
  a1[87] = 0;
  a1[86] = 0;
  if (v88)
  {
    unint64_t v89 = __clz(v88);
    unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> v89;
    if (v89 == 61) {
      unint64_t v91 = 6;
    }
    else {
      unint64_t v91 = (0xFFFFFFFFFFFFFFFFLL >> v89) - (0x1FFFFFFFFFFFFFFFuLL >> v89);
    }
    a1[89] = v91;
    unint64_t v92 = (v90 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v93 = (char *)operator new(v92 + 104 * v90);
    a1[84] = v93;
    a1[85] = &v93[v92];
    memset(v93, 128, v90 + 8);
    v93[v90] = -1;
    a1[89] = v91;
    a1[87] = v90;
  }
  unint64_t v94 = *a2;
  a1[90] = &unk_20E1710;
  a1[95] = 0;
  a1[91] = 0;
  a1[93] = 0;
  a1[92] = 0;
  if (v94)
  {
    unint64_t v95 = __clz(v94);
    unint64_t v96 = 0xFFFFFFFFFFFFFFFFLL >> v95;
    if (v95 == 61) {
      unint64_t v97 = 6;
    }
    else {
      unint64_t v97 = (0xFFFFFFFFFFFFFFFFLL >> v95) - (0x1FFFFFFFFFFFFFFFuLL >> v95);
    }
    a1[95] = v97;
    unint64_t v98 = (v96 & 0xFFFFFFFFFFFFFFF8) + 16;
    char v99 = (char *)operator new(v98 + 104 * v96);
    a1[90] = v99;
    a1[91] = &v99[v98];
    memset(v99, 128, v96 + 8);
    v99[v96] = -1;
    a1[95] = v97;
    a1[93] = v96;
  }
  return a1;
}

void sub_FD5D78(_Unwind_Exception *a1)
{
}

void *sub_FD5D90(void *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  a1[5] = 0;
  *a1 = &unk_20E1710;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  if (v4)
  {
    unint64_t v5 = __clz(v4);
    unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> v5;
    if (v5 == 61) {
      unint64_t v7 = 6;
    }
    else {
      unint64_t v7 = (0xFFFFFFFFFFFFFFFFLL >> v5) - (0x1FFFFFFFFFFFFFFFuLL >> v5);
    }
    a1[5] = v7;
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v9 = (char *)operator new(v8 + 104 * v6);
    *a1 = v9;
    a1[1] = &v9[v8];
    memset(v9, 128, v6 + 8);
    v9[v6] = -1;
    a1[5] = v7;
    a1[3] = v6;
  }
  a1[6] = &unk_20E1710;
  unint64_t v10 = *a2;
  a1[11] = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  if (v10)
  {
    unint64_t v11 = __clz(v10);
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> v11;
    if (v11 == 61) {
      unint64_t v13 = 6;
    }
    else {
      unint64_t v13 = (0xFFFFFFFFFFFFFFFFLL >> v11) - (0x1FFFFFFFFFFFFFFFuLL >> v11);
    }
    a1[11] = v13;
    unint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v15 = (char *)operator new(v14 + 104 * v12);
    a1[6] = v15;
    a1[7] = &v15[v14];
    memset(v15, 128, v12 + 8);
    v15[v12] = -1;
    a1[11] = v13;
    a1[9] = v12;
  }
  a1[12] = &unk_20E1710;
  unint64_t v16 = *a2;
  a1[17] = 0;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  if (v16)
  {
    unint64_t v17 = __clz(v16);
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> v17;
    if (v17 == 61) {
      unint64_t v19 = 6;
    }
    else {
      unint64_t v19 = (0xFFFFFFFFFFFFFFFFLL >> v17) - (0x1FFFFFFFFFFFFFFFuLL >> v17);
    }
    a1[17] = v19;
    unint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v21 = (char *)operator new(v20 + 104 * v18);
    a1[12] = v21;
    a1[13] = &v21[v20];
    memset(v21, 128, v18 + 8);
    v21[v18] = -1;
    a1[17] = v19;
    a1[15] = v18;
  }
  a1[18] = &unk_20E1710;
  unint64_t v22 = *a2;
  a1[23] = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[19] = 0;
  if (v22)
  {
    unint64_t v23 = __clz(v22);
    unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> v23;
    if (v23 == 61) {
      unint64_t v25 = 6;
    }
    else {
      unint64_t v25 = (0xFFFFFFFFFFFFFFFFLL >> v23) - (0x1FFFFFFFFFFFFFFFuLL >> v23);
    }
    a1[23] = v25;
    unint64_t v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v27 = (char *)operator new(v26 + 104 * v24);
    a1[18] = v27;
    a1[19] = &v27[v26];
    memset(v27, 128, v24 + 8);
    v27[v24] = -1;
    a1[23] = v25;
    a1[21] = v24;
  }
  a1[24] = &unk_20E1710;
  unint64_t v28 = *a2;
  a1[29] = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = 0;
  if (v28)
  {
    unint64_t v29 = __clz(v28);
    unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> v29;
    if (v29 == 61) {
      unint64_t v31 = 6;
    }
    else {
      unint64_t v31 = (0xFFFFFFFFFFFFFFFFLL >> v29) - (0x1FFFFFFFFFFFFFFFuLL >> v29);
    }
    a1[29] = v31;
    unint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v33 = (char *)operator new(v32 + 104 * v30);
    a1[24] = v33;
    a1[25] = &v33[v32];
    memset(v33, 128, v30 + 8);
    v33[v30] = -1;
    a1[29] = v31;
    a1[27] = v30;
  }
  a1[30] = &unk_20E1710;
  unint64_t v34 = *a2;
  a1[35] = 0;
  a1[32] = 0;
  a1[33] = 0;
  a1[31] = 0;
  if (v34)
  {
    unint64_t v35 = __clz(v34);
    unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> v35;
    if (v35 == 61) {
      unint64_t v37 = 6;
    }
    else {
      unint64_t v37 = (0xFFFFFFFFFFFFFFFFLL >> v35) - (0x1FFFFFFFFFFFFFFFuLL >> v35);
    }
    a1[35] = v37;
    unint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v39 = (char *)operator new(v38 + 104 * v36);
    a1[30] = v39;
    a1[31] = &v39[v38];
    memset(v39, 128, v36 + 8);
    v39[v36] = -1;
    a1[35] = v37;
    a1[33] = v36;
  }
  unint64_t v40 = *a2;
  a1[41] = 0;
  a1[36] = &unk_20E1710;
  a1[37] = 0;
  a1[38] = 0;
  a1[39] = 0;
  if (v40)
  {
    unint64_t v41 = __clz(v40);
    unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> v41;
    if (v41 == 61) {
      unint64_t v43 = 6;
    }
    else {
      unint64_t v43 = (0xFFFFFFFFFFFFFFFFLL >> v41) - (0x1FFFFFFFFFFFFFFFuLL >> v41);
    }
    a1[41] = v43;
    unint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v45 = (char *)operator new(v44 + 104 * v42);
    a1[36] = v45;
    a1[37] = &v45[v44];
    memset(v45, 128, v42 + 8);
    v45[v42] = -1;
    a1[41] = v43;
    a1[39] = v42;
  }
  unint64_t v46 = *a2;
  a1[47] = 0;
  a1[42] = &unk_20E1710;
  a1[43] = 0;
  a1[44] = 0;
  a1[45] = 0;
  if (v46)
  {
    unint64_t v47 = __clz(v46);
    unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> v47;
    if (v47 == 61) {
      unint64_t v49 = 6;
    }
    else {
      unint64_t v49 = (0xFFFFFFFFFFFFFFFFLL >> v47) - (0x1FFFFFFFFFFFFFFFuLL >> v47);
    }
    a1[47] = v49;
    unint64_t v50 = (v48 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v51 = (char *)operator new(v50 + 104 * v48);
    a1[42] = v51;
    a1[43] = &v51[v50];
    memset(v51, 128, v48 + 8);
    v51[v48] = -1;
    a1[47] = v49;
    a1[45] = v48;
  }
  unint64_t v52 = *a2;
  a1[53] = 0;
  a1[48] = &unk_20E1710;
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  if (v52)
  {
    unint64_t v53 = __clz(v52);
    unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> v53;
    if (v53 == 61) {
      unint64_t v55 = 6;
    }
    else {
      unint64_t v55 = (0xFFFFFFFFFFFFFFFFLL >> v53) - (0x1FFFFFFFFFFFFFFFuLL >> v53);
    }
    a1[53] = v55;
    unint64_t v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v57 = (char *)operator new(v56 + 104 * v54);
    a1[48] = v57;
    a1[49] = &v57[v56];
    memset(v57, 128, v54 + 8);
    v57[v54] = -1;
    a1[53] = v55;
    a1[51] = v54;
  }
  unint64_t v58 = *a2;
  a1[59] = 0;
  a1[54] = &unk_20E1710;
  a1[55] = 0;
  a1[56] = 0;
  a1[57] = 0;
  if (v58)
  {
    unint64_t v59 = __clz(v58);
    unint64_t v60 = 0xFFFFFFFFFFFFFFFFLL >> v59;
    if (v59 == 61) {
      unint64_t v61 = 6;
    }
    else {
      unint64_t v61 = (0xFFFFFFFFFFFFFFFFLL >> v59) - (0x1FFFFFFFFFFFFFFFuLL >> v59);
    }
    a1[59] = v61;
    unint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v63 = (char *)operator new(v62 + 104 * v60);
    a1[54] = v63;
    a1[55] = &v63[v62];
    memset(v63, 128, v60 + 8);
    v63[v60] = -1;
    a1[59] = v61;
    a1[57] = v60;
  }
  unint64_t v64 = *a2;
  a1[65] = 0;
  a1[60] = &unk_20E1710;
  a1[61] = 0;
  a1[62] = 0;
  a1[63] = 0;
  if (v64)
  {
    unint64_t v65 = __clz(v64);
    unint64_t v66 = 0xFFFFFFFFFFFFFFFFLL >> v65;
    if (v65 == 61) {
      unint64_t v67 = 6;
    }
    else {
      unint64_t v67 = (0xFFFFFFFFFFFFFFFFLL >> v65) - (0x1FFFFFFFFFFFFFFFuLL >> v65);
    }
    a1[65] = v67;
    unint64_t v68 = (v66 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v69 = (char *)operator new(v68 + 104 * v66);
    a1[60] = v69;
    a1[61] = &v69[v68];
    memset(v69, 128, v66 + 8);
    v69[v66] = -1;
    a1[65] = v67;
    a1[63] = v66;
  }
  unint64_t v70 = *a2;
  a1[66] = &unk_20E1710;
  a1[71] = 0;
  a1[67] = 0;
  a1[69] = 0;
  a1[68] = 0;
  if (v70)
  {
    unint64_t v71 = __clz(v70);
    unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> v71;
    if (v71 == 61) {
      unint64_t v73 = 6;
    }
    else {
      unint64_t v73 = (0xFFFFFFFFFFFFFFFFLL >> v71) - (0x1FFFFFFFFFFFFFFFuLL >> v71);
    }
    a1[71] = v73;
    unint64_t v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v75 = (char *)operator new(v74 + 104 * v72);
    a1[66] = v75;
    a1[67] = &v75[v74];
    memset(v75, 128, v72 + 8);
    v75[v72] = -1;
    a1[71] = v73;
    a1[69] = v72;
  }
  unint64_t v76 = *a2;
  a1[72] = &unk_20E1710;
  a1[77] = 0;
  a1[73] = 0;
  a1[75] = 0;
  a1[74] = 0;
  if (v76)
  {
    unint64_t v77 = __clz(v76);
    unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> v77;
    if (v77 == 61) {
      unint64_t v79 = 6;
    }
    else {
      unint64_t v79 = (0xFFFFFFFFFFFFFFFFLL >> v77) - (0x1FFFFFFFFFFFFFFFuLL >> v77);
    }
    a1[77] = v79;
    unint64_t v80 = (v78 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v81 = (char *)operator new(v80 + 104 * v78);
    a1[72] = v81;
    a1[73] = &v81[v80];
    memset(v81, 128, v78 + 8);
    v81[v78] = -1;
    a1[77] = v79;
    a1[75] = v78;
  }
  unint64_t v82 = *a2;
  a1[78] = &unk_20E1710;
  a1[83] = 0;
  a1[79] = 0;
  a1[81] = 0;
  a1[80] = 0;
  if (v82)
  {
    unint64_t v83 = __clz(v82);
    unint64_t v84 = 0xFFFFFFFFFFFFFFFFLL >> v83;
    if (v83 == 61) {
      unint64_t v85 = 6;
    }
    else {
      unint64_t v85 = (0xFFFFFFFFFFFFFFFFLL >> v83) - (0x1FFFFFFFFFFFFFFFuLL >> v83);
    }
    a1[83] = v85;
    unint64_t v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v87 = (char *)operator new(v86 + 104 * v84);
    a1[78] = v87;
    a1[79] = &v87[v86];
    memset(v87, 128, v84 + 8);
    v87[v84] = -1;
    a1[83] = v85;
    a1[81] = v84;
  }
  unint64_t v88 = *a2;
  a1[84] = &unk_20E1710;
  a1[89] = 0;
  a1[85] = 0;
  a1[87] = 0;
  a1[86] = 0;
  if (v88)
  {
    unint64_t v89 = __clz(v88);
    unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> v89;
    if (v89 == 61) {
      unint64_t v91 = 6;
    }
    else {
      unint64_t v91 = (0xFFFFFFFFFFFFFFFFLL >> v89) - (0x1FFFFFFFFFFFFFFFuLL >> v89);
    }
    a1[89] = v91;
    unint64_t v92 = (v90 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v93 = (char *)operator new(v92 + 104 * v90);
    a1[84] = v93;
    a1[85] = &v93[v92];
    memset(v93, 128, v90 + 8);
    v93[v90] = -1;
    a1[89] = v91;
    a1[87] = v90;
  }
  unint64_t v94 = *a2;
  a1[90] = &unk_20E1710;
  a1[95] = 0;
  a1[91] = 0;
  a1[93] = 0;
  a1[92] = 0;
  if (v94)
  {
    unint64_t v95 = __clz(v94);
    unint64_t v96 = 0xFFFFFFFFFFFFFFFFLL >> v95;
    if (v95 == 61) {
      unint64_t v97 = 6;
    }
    else {
      unint64_t v97 = (0xFFFFFFFFFFFFFFFFLL >> v95) - (0x1FFFFFFFFFFFFFFFuLL >> v95);
    }
    a1[95] = v97;
    unint64_t v98 = (v96 & 0xFFFFFFFFFFFFFFF8) + 16;
    char v99 = (char *)operator new(v98 + 104 * v96);
    a1[90] = v99;
    a1[91] = &v99[v98];
    memset(v99, 128, v96 + 8);
    v99[v96] = -1;
    a1[95] = v97;
    a1[93] = v96;
  }
  return a1;
}

void sub_FD65E4(_Unwind_Exception *a1)
{
}

void *sub_FD65FC(void *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  a1[5] = 0;
  *a1 = &unk_20E1710;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  if (v4)
  {
    unint64_t v5 = __clz(v4);
    unint64_t v6 = 0xFFFFFFFFFFFFFFFFLL >> v5;
    if (v5 == 61) {
      unint64_t v7 = 6;
    }
    else {
      unint64_t v7 = (0xFFFFFFFFFFFFFFFFLL >> v5) - (0x1FFFFFFFFFFFFFFFuLL >> v5);
    }
    a1[5] = v7;
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v9 = (char *)operator new(v8 + 104 * v6);
    *a1 = v9;
    a1[1] = &v9[v8];
    memset(v9, 128, v6 + 8);
    v9[v6] = -1;
    a1[5] = v7;
    a1[3] = v6;
  }
  a1[6] = &unk_20E1710;
  unint64_t v10 = *a2;
  a1[11] = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  if (v10)
  {
    unint64_t v11 = __clz(v10);
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> v11;
    if (v11 == 61) {
      unint64_t v13 = 6;
    }
    else {
      unint64_t v13 = (0xFFFFFFFFFFFFFFFFLL >> v11) - (0x1FFFFFFFFFFFFFFFuLL >> v11);
    }
    a1[11] = v13;
    unint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v15 = (char *)operator new(v14 + 104 * v12);
    a1[6] = v15;
    a1[7] = &v15[v14];
    memset(v15, 128, v12 + 8);
    v15[v12] = -1;
    a1[11] = v13;
    a1[9] = v12;
  }
  a1[12] = &unk_20E1710;
  unint64_t v16 = *a2;
  a1[17] = 0;
  a1[14] = 0;
  a1[15] = 0;
  a1[13] = 0;
  if (v16)
  {
    unint64_t v17 = __clz(v16);
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> v17;
    if (v17 == 61) {
      unint64_t v19 = 6;
    }
    else {
      unint64_t v19 = (0xFFFFFFFFFFFFFFFFLL >> v17) - (0x1FFFFFFFFFFFFFFFuLL >> v17);
    }
    a1[17] = v19;
    unint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v21 = (char *)operator new(v20 + 104 * v18);
    a1[12] = v21;
    a1[13] = &v21[v20];
    memset(v21, 128, v18 + 8);
    v21[v18] = -1;
    a1[17] = v19;
    a1[15] = v18;
  }
  a1[18] = &unk_20E1710;
  unint64_t v22 = *a2;
  a1[23] = 0;
  a1[20] = 0;
  a1[21] = 0;
  a1[19] = 0;
  if (v22)
  {
    unint64_t v23 = __clz(v22);
    unint64_t v24 = 0xFFFFFFFFFFFFFFFFLL >> v23;
    if (v23 == 61) {
      unint64_t v25 = 6;
    }
    else {
      unint64_t v25 = (0xFFFFFFFFFFFFFFFFLL >> v23) - (0x1FFFFFFFFFFFFFFFuLL >> v23);
    }
    a1[23] = v25;
    unint64_t v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v27 = (char *)operator new(v26 + 104 * v24);
    a1[18] = v27;
    a1[19] = &v27[v26];
    memset(v27, 128, v24 + 8);
    v27[v24] = -1;
    a1[23] = v25;
    a1[21] = v24;
  }
  a1[24] = &unk_20E1710;
  unint64_t v28 = *a2;
  a1[29] = 0;
  a1[26] = 0;
  a1[27] = 0;
  a1[25] = 0;
  if (v28)
  {
    unint64_t v29 = __clz(v28);
    unint64_t v30 = 0xFFFFFFFFFFFFFFFFLL >> v29;
    if (v29 == 61) {
      unint64_t v31 = 6;
    }
    else {
      unint64_t v31 = (0xFFFFFFFFFFFFFFFFLL >> v29) - (0x1FFFFFFFFFFFFFFFuLL >> v29);
    }
    a1[29] = v31;
    unint64_t v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v33 = (char *)operator new(v32 + 104 * v30);
    a1[24] = v33;
    a1[25] = &v33[v32];
    memset(v33, 128, v30 + 8);
    v33[v30] = -1;
    a1[29] = v31;
    a1[27] = v30;
  }
  a1[30] = &unk_20E1710;
  unint64_t v34 = *a2;
  a1[35] = 0;
  a1[32] = 0;
  a1[33] = 0;
  a1[31] = 0;
  if (v34)
  {
    unint64_t v35 = __clz(v34);
    unint64_t v36 = 0xFFFFFFFFFFFFFFFFLL >> v35;
    if (v35 == 61) {
      unint64_t v37 = 6;
    }
    else {
      unint64_t v37 = (0xFFFFFFFFFFFFFFFFLL >> v35) - (0x1FFFFFFFFFFFFFFFuLL >> v35);
    }
    a1[35] = v37;
    unint64_t v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v39 = (char *)operator new(v38 + 104 * v36);
    a1[30] = v39;
    a1[31] = &v39[v38];
    memset(v39, 128, v36 + 8);
    v39[v36] = -1;
    a1[35] = v37;
    a1[33] = v36;
  }
  unint64_t v40 = *a2;
  a1[41] = 0;
  a1[36] = &unk_20E1710;
  a1[37] = 0;
  a1[38] = 0;
  a1[39] = 0;
  if (v40)
  {
    unint64_t v41 = __clz(v40);
    unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> v41;
    if (v41 == 61) {
      unint64_t v43 = 6;
    }
    else {
      unint64_t v43 = (0xFFFFFFFFFFFFFFFFLL >> v41) - (0x1FFFFFFFFFFFFFFFuLL >> v41);
    }
    a1[41] = v43;
    unint64_t v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v45 = (char *)operator new(v44 + 104 * v42);
    a1[36] = v45;
    a1[37] = &v45[v44];
    memset(v45, 128, v42 + 8);
    v45[v42] = -1;
    a1[41] = v43;
    a1[39] = v42;
  }
  unint64_t v46 = *a2;
  a1[47] = 0;
  a1[42] = &unk_20E1710;
  a1[43] = 0;
  a1[44] = 0;
  a1[45] = 0;
  if (v46)
  {
    unint64_t v47 = __clz(v46);
    unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> v47;
    if (v47 == 61) {
      unint64_t v49 = 6;
    }
    else {
      unint64_t v49 = (0xFFFFFFFFFFFFFFFFLL >> v47) - (0x1FFFFFFFFFFFFFFFuLL >> v47);
    }
    a1[47] = v49;
    unint64_t v50 = (v48 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v51 = (char *)operator new(v50 + 104 * v48);
    a1[42] = v51;
    a1[43] = &v51[v50];
    memset(v51, 128, v48 + 8);
    v51[v48] = -1;
    a1[47] = v49;
    a1[45] = v48;
  }
  unint64_t v52 = *a2;
  a1[53] = 0;
  a1[48] = &unk_20E1710;
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  if (v52)
  {
    unint64_t v53 = __clz(v52);
    unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> v53;
    if (v53 == 61) {
      unint64_t v55 = 6;
    }
    else {
      unint64_t v55 = (0xFFFFFFFFFFFFFFFFLL >> v53) - (0x1FFFFFFFFFFFFFFFuLL >> v53);
    }
    a1[53] = v55;
    unint64_t v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v57 = (char *)operator new(v56 + 104 * v54);
    a1[48] = v57;
    a1[49] = &v57[v56];
    memset(v57, 128, v54 + 8);
    v57[v54] = -1;
    a1[53] = v55;
    a1[51] = v54;
  }
  unint64_t v58 = *a2;
  a1[59] = 0;
  a1[54] = &unk_20E1710;
  a1[55] = 0;
  a1[56] = 0;
  a1[57] = 0;
  if (v58)
  {
    unint64_t v59 = __clz(v58);
    unint64_t v60 = 0xFFFFFFFFFFFFFFFFLL >> v59;
    if (v59 == 61) {
      unint64_t v61 = 6;
    }
    else {
      unint64_t v61 = (0xFFFFFFFFFFFFFFFFLL >> v59) - (0x1FFFFFFFFFFFFFFFuLL >> v59);
    }
    a1[59] = v61;
    unint64_t v62 = (v60 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v63 = (char *)operator new(v62 + 104 * v60);
    a1[54] = v63;
    a1[55] = &v63[v62];
    memset(v63, 128, v60 + 8);
    v63[v60] = -1;
    a1[59] = v61;
    a1[57] = v60;
  }
  unint64_t v64 = *a2;
  a1[65] = 0;
  a1[60] = &unk_20E1710;
  a1[61] = 0;
  a1[62] = 0;
  a1[63] = 0;
  if (v64)
  {
    unint64_t v65 = __clz(v64);
    unint64_t v66 = 0xFFFFFFFFFFFFFFFFLL >> v65;
    if (v65 == 61) {
      unint64_t v67 = 6;
    }
    else {
      unint64_t v67 = (0xFFFFFFFFFFFFFFFFLL >> v65) - (0x1FFFFFFFFFFFFFFFuLL >> v65);
    }
    a1[65] = v67;
    unint64_t v68 = (v66 & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v69 = (char *)operator new(v68 + 104 * v66);
    a1[60] = v69;
    a1[61] = &v69[v68];
    memset(v69, 128, v66 + 8);
    v69[v66] = -1;
    a1[65] = v67;
    a1[63] = v66;
  }
  unint64_t v70 = *a2;
  a1[66] = &unk_20E1710;
  a1[71] = 0;
  a1[67] = 0;
  a1[69] = 0;
  a1[68] = 0;
  if (v70)
  {
    unint64_t v71 = __clz(v70);
    unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> v71;
    if (v71 == 61) {
      unint64_t v73 = 6;
    }
    else {
      unint64_t v73 = (0xFFFFFFFFFFFFFFFFLL >> v71) - (0x1FFFFFFFFFFFFFFFuLL >> v71);
    }
    a1[71] = v73;
    unint64_t v74 = (v72 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v75 = (char *)operator new(v74 + 104 * v72);
    a1[66] = v75;
    a1[67] = &v75[v74];
    memset(v75, 128, v72 + 8);
    v75[v72] = -1;
    a1[71] = v73;
    a1[69] = v72;
  }
  unint64_t v76 = *a2;
  a1[72] = &unk_20E1710;
  a1[77] = 0;
  a1[73] = 0;
  a1[75] = 0;
  a1[74] = 0;
  if (v76)
  {
    unint64_t v77 = __clz(v76);
    unint64_t v78 = 0xFFFFFFFFFFFFFFFFLL >> v77;
    if (v77 == 61) {
      unint64_t v79 = 6;
    }
    else {
      unint64_t v79 = (0xFFFFFFFFFFFFFFFFLL >> v77) - (0x1FFFFFFFFFFFFFFFuLL >> v77);
    }
    a1[77] = v79;
    unint64_t v80 = (v78 & 0xFFFFFFFFFFFFFFF8) + 16;
    unint64_t v81 = (char *)operator new(v80 + 104 * v78);
    a1[72] = v81;
    a1[73] = &v81[v80];
    memset(v81, 128, v78 + 8);
    v81[v78] = -1;
    a1[77] = v79;
    a1[75] = v78;
  }
  unint64_t v82 = *a2;
  a1[78] = &unk_20E1710;
  a1[83] = 0;
  a1[79] = 0;
  a1[81] = 0;
  a1[80] = 0;
  if (v82)
  {
    unint64_t v83 = __clz(v82);
    unint64_t v84 = 0xFFFFFFFFFFFFFFFFLL >> v83;
    if (v83 == 61) {
      unint64_t v85 = 6;
    }
    else {
      unint64_t v85 = (0xFFFFFFFFFFFFFFFFLL >> v83) - (0x1FFFFFFFFFFFFFFFuLL >> v83);
    }
    a1[83] = v85;
    unint64_t v86 = (v84 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v87 = (char *)operator new(v86 + 104 * v84);
    a1[78] = v87;
    a1[79] = &v87[v86];
    memset(v87, 128, v84 + 8);
    v87[v84] = -1;
    a1[83] = v85;
    a1[81] = v84;
  }
  unint64_t v88 = *a2;
  a1[84] = &unk_20E1710;
  a1[89] = 0;
  a1[85] = 0;
  a1[87] = 0;
  a1[86] = 0;
  if (v88)
  {
    unint64_t v89 = __clz(v88);
    unint64_t v90 = 0xFFFFFFFFFFFFFFFFLL >> v89;
    if (v89 == 61) {
      unint64_t v91 = 6;
    }
    else {
      unint64_t v91 = (0xFFFFFFFFFFFFFFFFLL >> v89) - (0x1FFFFFFFFFFFFFFFuLL >> v89);
    }
    a1[89] = v91;
    unint64_t v92 = (v90 & 0xFFFFFFFFFFFFFFF8) + 16;
    int v93 = (char *)operator new(v92 + 104 * v90);
    a1[84] = v93;
    a1[85] = &v93[v92];
    memset(v93, 128, v90 + 8);
    v93[v90] = -1;
    a1[89] = v91;
    a1[87] = v90;
  }
  unint64_t v94 = *a2;
  a1[90] = &unk_20E1710;
  a1[95] = 0;
  a1[91] = 0;
  a1[93] = 0;
  a1[92] = 0;
  if (v94)
  {
    unint64_t v95 = __clz(v94);
    unint64_t v96 = 0xFFFFFFFFFFFFFFFFLL >> v95;
    if (v95 == 61) {
      unint64_t v97 = 6;
    }
    else {
      unint64_t v97 = (0xFFFFFFFFFFFFFFFFLL >> v95) - (0x1FFFFFFFFFFFFFFFuLL >> v95);
    }
    a1[95] = v97;
    unint64_t v98 = (v96 & 0xFFFFFFFFFFFFFFF8) + 16;
    char v99 = (char *)operator new(v98 + 104 * v96);
    a1[90] = v99;
    a1[91] = &v99[v98];
    memset(v99, 128, v96 + 8);
    v99[v96] = -1;
    a1[95] = v97;
    a1[93] = v96;
  }
  return a1;
}

void sub_FD6E50(_Unwind_Exception *a1)
{
}

uint64_t *sub_FD6E68(void *a1, uint64_t a2, uint64_t a3)
{
  __n128 result = sub_58070(a1, a2);
  if (result)
  {
    *(void *)(a3 + 8) = *(void *)a3;
    __n128 result = (uint64_t *)sub_5C4AC(a1, a2);
    uint64_t v7 = *result;
    uint64_t v8 = result[1];
    if (*result != v8)
    {
      do
      {
        if (*(_DWORD *)(v7 + 8) != 2)
        {
          exception = __cxa_allocate_exception(8uLL);
          void *exception = &off_23FDF58;
        }
        unint64_t v9 = *(void **)v7;
        char v15 = 9;
        strcpy((char *)__p, "threshold");
        int v10 = sub_FD6FFC(v9, (uint64_t)__p);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        int v13 = v10;
        strcpy((char *)__p, "value");
        char v15 = 5;
        double v11 = sub_5C7E8(v9, (uint64_t)__p);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        __p[0] = *(void **)&v11;
        __n128 result = (uint64_t *)sub_F16CE4((char **)a3, &v13, __p);
        v7 += 16;
      }
      while (v7 != v8);
    }
  }
  return result;
}

void sub_FD6FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FD6FFC(void *a1, uint64_t a2)
{
  double v2 = sub_58070(a1, a2);
  if (!v2 || *((_DWORD *)v2 + 12) != 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::operator+<char>();
    unint64_t v5 = (void *)sub_2F404((uint64_t)exception, &v6);
  }
  return *((double *)v2 + 5);
}

void sub_FD708C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_FD70BC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  unint64_t v6 = 0x2127599BF4325C37 * (*a2 ^ ((unint64_t)*a2 >> 23));
  unint64_t v7 = (v6 ^ ~(v6 >> 47)) + ((v6 ^ (v6 >> 47)) << 21);
  unint64_t v8 = 21 * ((265 * (v7 ^ (v7 >> 24))) ^ ((265 * (v7 ^ (v7 >> 24))) >> 14));
  unint64_t v9 = 2147483649u * (v8 ^ (v8 >> 28));
  int v10 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v8 ^ (v8 >> 28)) >> 8) ^ ((-2147483647
                                                                                     * (v8 ^ (v8 >> 28))) >> 16)) ^ ((-2147483647 * (v8 ^ (v8 >> 28))) >> 24)) & 0xF));
  unint64_t v11 = v9 >> 7;
  uint64_t v12 = v10[3];
  while (1)
  {
    unint64_t v13 = v11 & v12;
    uint64_t v14 = *(void *)(*v10 + v13);
    unint64_t v15 = ((v14 ^ (0x101010101010101 * (v9 & 0x7F))) - 0x101010101010101) & ~(v14 ^ (0x101010101010101
                                                                                       * (v9 & 0x7F))) & 0x8080808080808080;
    if (v15) {
      break;
    }
LABEL_5:
    if ((v14 & (~v14 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_FD71F8(v10, v9);
      *(void *)a3 = v10;
      *(void *)(a3 + 8) = result;
      *(unsigned char *)(a3 + 16) = 1;
      return result;
    }
    v4 += 8;
    unint64_t v11 = v4 + v13;
  }
  while (1)
  {
    unint64_t result = (v13 + (__clz(__rbit64(v15)) >> 3)) & v12;
    if (*(void *)(v10[1] + 104 * result) == v5) {
      break;
    }
    v15 &= v15 - 1;
    if (!v15) {
      goto LABEL_5;
    }
  }
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

unint64_t sub_FD71F8(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_FD72F0((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_FD72F0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    double v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    double v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_FD7320((char **)a1, v2);
    return;
  }
  sub_FD7508(a1);
}

void sub_FD7320(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = (char *)operator new(v7 + 104 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        unint64_t v19 = &v5[104 * (void)i];
        unint64_t v20 = 0x2127599BF4325C37 * (*(void *)v19 ^ (*(void *)v19 >> 23));
        unint64_t v21 = (v20 ^ ~(v20 >> 47)) + ((v20 ^ (v20 >> 47)) << 21);
        unint64_t v22 = 21 * ((265 * (v21 ^ (v21 >> 24))) ^ ((265 * (v21 ^ (v21 >> 24))) >> 14));
        unint64_t v23 = 2147483649u * (v22 ^ (v22 >> 28));
        unint64_t v24 = a1[3];
        unint64_t v25 = *a1;
        unint64_t v26 = (unint64_t)v24 & (v23 >> 7);
        unint64_t v27 = *(void *)&(*a1)[v26] & (~*(void *)&(*a1)[v26] << 7) & 0x8080808080808080;
        if (!v27)
        {
          uint64_t v28 = 8;
          do
          {
            unint64_t v26 = (v26 + v28) & (unint64_t)v24;
            v28 += 8;
            unint64_t v27 = *(void *)&v25[v26] & (~*(void *)&v25[v26] << 7) & 0x8080808080808080;
          }
          while (!v27);
        }
        unint64_t v11 = (v26 + (__clz(__rbit64(v27)) >> 3)) & (unint64_t)v24;
        char v12 = v23 & 0x7F;
        v25[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        uint64_t v13 = (uint64_t)&a1[1][104 * v11];
        long long v14 = *(_OWORD *)v19;
        long long v15 = *((_OWORD *)v19 + 2);
        *(_OWORD *)(v13 + 16) = *((_OWORD *)v19 + 1);
        *(_OWORD *)(v13 + 32) = v15;
        *(_OWORD *)uint64_t v13 = v14;
        long long v16 = *((_OWORD *)v19 + 3);
        long long v17 = *((_OWORD *)v19 + 4);
        long long v18 = *((_OWORD *)v19 + 5);
        *(void *)(v13 + 96) = *((void *)v19 + 12);
        *(_OWORD *)(v13 + 64) = v17;
        *(_OWORD *)(v13 + 80) = v18;
        *(_OWORD *)(v13 + 48) = v16;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_FD7508(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_28;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      long long v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        unint64_t v18 = *(void *)(*(void *)(result + 8) + 104 * i);
        unint64_t v19 = ((0x2127599BF4325C37 * (v18 ^ (v18 >> 23))) ^ ~((0x2127599BF4325C37 * (v18 ^ (v18 >> 23))) >> 47))
            + (((0x2127599BF4325C37 * (v18 ^ (v18 >> 23))) ^ ((0x2127599BF4325C37 * (v18 ^ (v18 >> 23))) >> 47)) << 21);
        unint64_t v20 = 21 * ((265 * (v19 ^ (v19 >> 24))) ^ ((265 * (v19 ^ (v19 >> 24))) >> 14));
        unint64_t v21 = 2147483649u * (v20 ^ (v20 >> 28));
        unint64_t v22 = v13 & (v21 >> 7);
        unint64_t v23 = *(uint64_t *)((unsigned char *)v17->i64 + v22) & (~*(uint64_t *)((char *)v17->i64 + v22) << 7) & 0x8080808080808080;
        if (v23)
        {
          unint64_t v15 = v13 & (v21 >> 7);
        }
        else
        {
          uint64_t v24 = 8;
          unint64_t v15 = v13 & (v21 >> 7);
          do
          {
            unint64_t v15 = (v15 + v24) & v13;
            v24 += 8;
            unint64_t v23 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v23);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v23)) >> 3)) & v13;
        if ((((v16 - v22) ^ (i - v22)) & v13) > 7)
        {
          int v25 = v17->u8[v16];
          v17->i8[v16] = v21 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
          uint64_t v26 = *(void *)(result + 8);
          if (v25 == 128)
          {
            uint64_t v27 = v26 + 104 * v16;
            uint64_t v28 = (long long *)(v26 + 104 * i);
            long long v29 = *v28;
            long long v30 = v28[2];
            *(_OWORD *)(v27 + 16) = v28[1];
            *(_OWORD *)(v27 + 32) = v30;
            *(_OWORD *)uint64_t v27 = v29;
            long long v31 = v28[3];
            long long v32 = v28[4];
            long long v33 = v28[5];
            *(void *)(v27 + 96) = *((void *)v28 + 12);
            *(_OWORD *)(v27 + 64) = v32;
            *(_OWORD *)(v27 + 80) = v33;
            *(_OWORD *)(v27 + 48) = v31;
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            unint64_t v34 = (long long *)(v26 + 104 * i);
            long long v49 = v34[4];
            long long v50 = v34[5];
            uint64_t v51 = *((void *)v34 + 12);
            long long v45 = *v34;
            long long v46 = v34[1];
            long long v47 = v34[2];
            long long v48 = v34[3];
            unint64_t v35 = (long long *)(v26 + 104 * v16);
            long long v37 = v35[1];
            long long v36 = v35[2];
            long long *v34 = *v35;
            v34[1] = v37;
            v34[2] = v36;
            long long v39 = v35[4];
            long long v38 = v35[5];
            long long v40 = v35[3];
            *((void *)v34 + 12) = *((void *)v35 + 12);
            v34[4] = v39;
            v34[5] = v38;
            v34[3] = v40;
            uint64_t v41 = *(void *)(result + 8) + 104 * v16;
            *(_OWORD *)uint64_t v41 = v45;
            *(_OWORD *)(v41 + 16) = v46;
            *(void *)(v41 + 96) = v51;
            *(_OWORD *)(v41 + 64) = v49;
            *(_OWORD *)(v41 + 80) = v50;
            *(_OWORD *)(v41 + 32) = v47;
            *(_OWORD *)(v41 + 48) = v48;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v21 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v21 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v42 = i - (i >> 3);
    BOOL v43 = i == 7;
    uint64_t v44 = 6;
    if (!v43) {
      uint64_t v44 = v42;
    }
  }
  else
  {
    uint64_t v44 = 0;
  }
  *(void *)(result + 40) = v44 - *(void *)(result + 16);
  return result;
}

__n128 sub_FD7860(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
_OWORD *sub_FD7E7C(_OWORD *result, _OWORD *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 6;
    if (result + 6 != a2)
    {
      uint64_t v3 = 0;
      unint64_t v4 = result;
      do
      {
        char v6 = v4;
        unint64_t v4 = v2;
        if (*((_DWORD *)v6 + 35) == -1 || *((_DWORD *)v6 + 36) == 0x7FFFFFFF)
        {
          unsigned int v8 = -1;
          int v9 = 0x7FFFFFFF;
          if (*((_DWORD *)v6 + 11) == -1 || *((_DWORD *)v6 + 12) == 0x7FFFFFFF)
          {
LABEL_25:
            unsigned int v13 = -1;
            int v14 = 0x7FFFFFFF;
            if (v8 == -1) {
              goto LABEL_35;
            }
            goto LABEL_39;
          }
        }
        else
        {
          unsigned int v8 = *((_DWORD *)v6 + 37);
          int v9 = 0x7FFFFFFF;
          if (v8 == -1) {
            goto LABEL_20;
          }
          int v11 = *((_DWORD *)v6 + 38);
          if (v11 == 0x7FFFFFFF)
          {
            unsigned int v8 = -1;
LABEL_20:
            if (*((_DWORD *)v6 + 11) == -1 || *((_DWORD *)v6 + 12) == 0x7FFFFFFF) {
              goto LABEL_25;
            }
            goto LABEL_31;
          }
          v8 += *((_DWORD *)v6 + 35);
          int v9 = v11 + *((_DWORD *)v6 + 36);
          if (*((_DWORD *)v6 + 11) == -1 || *((_DWORD *)v6 + 12) == 0x7FFFFFFF) {
            goto LABEL_25;
          }
        }
LABEL_31:
        unsigned int v13 = *((_DWORD *)v6 + 13);
        int v14 = 0x7FFFFFFF;
        if (v13 == -1) {
          goto LABEL_34;
        }
        int v16 = *((_DWORD *)v6 + 14);
        if (v16 == 0x7FFFFFFF)
        {
          unsigned int v13 = -1;
LABEL_34:
          if (v8 >= v13) {
            goto LABEL_35;
          }
          goto LABEL_39;
        }
        v13 += *((_DWORD *)v6 + 11);
        int v14 = v16 + *((_DWORD *)v6 + 12);
        if (v8 >= v13)
        {
LABEL_35:
          if (v13 < v8 || v9 >= v14) {
            goto LABEL_6;
          }
        }
LABEL_39:
        *(_OWORD *)&v41[12] = *(_OWORD *)((char *)v4 + 28);
        long long v40 = *v4;
        *(_OWORD *)int v41 = v4[1];
        unint64_t v17 = *(void *)((char *)v6 + 140);
        int v18 = *((_DWORD *)v6 + 37);
        int v19 = *((_DWORD *)v6 + 38);
        long long v38 = *(_OWORD *)((char *)v6 + 156);
        long long v39 = *(_OWORD *)((char *)v6 + 172);
        long long v20 = v6[4];
        v4[3] = v6[3];
        v4[4] = v20;
        *(_OWORD *)((char *)v4 + 76) = *(_OWORD *)((char *)v6 + 76);
        long long v21 = v6[2];
        v4[1] = v6[1];
        v4[2] = v21;
        char v5 = (char *)result;
        _OWORD *v4 = *v6;
        if (v6 == result) {
          goto LABEL_5;
        }
        BOOL v24 = v17 == -1 || HIDWORD(v17) == 0x7FFFFFFF || v18 == -1 || v19 == 0x7FFFFFFF;
        char v25 = v24;
        unsigned int v26 = v18 + v17;
        if (v24) {
          unsigned int v26 = -1;
        }
        char v27 = v25 ^ 1;
        uint64_t v28 = v3;
        while (1)
        {
          int v31 = (_OWORD *)((char *)result + v28);
          if (*(_DWORD *)((char *)result + v28 - 52) == -1 || *(_DWORD *)((char *)result + v28 - 48) == 0x7FFFFFFF)
          {
            unsigned int v33 = -1;
            int v34 = 0x7FFFFFFF;
            if (v26 == -1) {
              goto LABEL_68;
            }
            goto LABEL_56;
          }
          unsigned int v33 = *((_DWORD *)v31 - 11);
          int v34 = 0x7FFFFFFF;
          if (v33 != -1) {
            break;
          }
LABEL_67:
          if (v26 >= v33) {
            goto LABEL_68;
          }
LABEL_56:
          long long v29 = *(v31 - 3);
          v31[2] = *(v31 - 4);
          v31[3] = v29;
          v31[4] = *(v31 - 2);
          *(_OWORD *)((char *)v31 + 76) = *(_OWORD *)((char *)v31 - 20);
          long long v30 = *(v31 - 5);
          *int v31 = *(v31 - 6);
          v31[1] = v30;
          v28 -= 96;
          if (!v28)
          {
            char v5 = (char *)result;
            goto LABEL_5;
          }
        }
        int v35 = *(_DWORD *)((char *)result + v28 - 40);
        if (v35 == 0x7FFFFFFF)
        {
          unsigned int v33 = -1;
          goto LABEL_67;
        }
        v33 += *((_DWORD *)v31 - 13);
        int v34 = v35 + *((_DWORD *)v31 - 12);
        if (v26 < v33) {
          goto LABEL_56;
        }
LABEL_68:
        BOOL v36 = v33 >= v26;
        char v37 = v27 ^ 1;
        if (!v36) {
          char v37 = 1;
        }
        if ((v37 & 1) == 0 && v19 + HIDWORD(v17) < v34) {
          goto LABEL_56;
        }
        char v5 = (char *)result + v28;
LABEL_5:
        *(_OWORD *)char v5 = v40;
        *((_OWORD *)v5 + 1) = *(_OWORD *)v41;
        *(_OWORD *)(v5 + 28) = *(_OWORD *)&v41[12];
        *(void *)(v5 + 44) = v17;
        *((_DWORD *)v5 + 13) = v18;
        *((_DWORD *)v5 + 14) = v19;
        *(_OWORD *)(v5 + 60) = v38;
        *(_OWORD *)(v5 + 76) = v39;
LABEL_6:
        uint64_t v2 = v4 + 6;
        v3 += 96;
      }
      while (v4 + 6 != a2);
    }
  }
  return result;
}

_OWORD *sub_FD810C(_OWORD *result, _OWORD *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 6;
    while (result + 6 != a2)
    {
      uint64_t v3 = result;
      __n128 result = v2;
      if (*((_DWORD *)v3 + 35) == -1 || *((_DWORD *)v3 + 36) == 0x7FFFFFFF)
      {
        unsigned int v5 = -1;
        int v6 = 0x7FFFFFFF;
        if (*((_DWORD *)v3 + 11) == -1 || *((_DWORD *)v3 + 12) == 0x7FFFFFFF)
        {
LABEL_24:
          unsigned int v10 = -1;
          int v11 = 0x7FFFFFFF;
          if (v5 != -1) {
            goto LABEL_38;
          }
          goto LABEL_34;
        }
      }
      else
      {
        unsigned int v5 = *((_DWORD *)v3 + 37);
        int v6 = 0x7FFFFFFF;
        if (v5 == -1) {
          goto LABEL_19;
        }
        int v8 = *((_DWORD *)v3 + 38);
        if (v8 == 0x7FFFFFFF)
        {
          unsigned int v5 = -1;
LABEL_19:
          if (*((_DWORD *)v3 + 11) == -1 || *((_DWORD *)v3 + 12) == 0x7FFFFFFF) {
            goto LABEL_24;
          }
          goto LABEL_30;
        }
        v5 += *((_DWORD *)v3 + 35);
        int v6 = v8 + *((_DWORD *)v3 + 36);
        if (*((_DWORD *)v3 + 11) == -1 || *((_DWORD *)v3 + 12) == 0x7FFFFFFF) {
          goto LABEL_24;
        }
      }
LABEL_30:
      unsigned int v10 = *((_DWORD *)v3 + 13);
      int v11 = 0x7FFFFFFF;
      if (v10 == -1) {
        goto LABEL_33;
      }
      int v13 = *((_DWORD *)v3 + 14);
      if (v13 == 0x7FFFFFFF)
      {
        unsigned int v10 = -1;
LABEL_33:
        if (v5 < v10) {
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      v10 += *((_DWORD *)v3 + 11);
      int v11 = v13 + *((_DWORD *)v3 + 12);
      if (v5 < v10) {
        goto LABEL_38;
      }
LABEL_34:
      if (v10 >= v5 && v6 < v11)
      {
LABEL_38:
        long long v33 = *result;
        *(_OWORD *)int v34 = result[1];
        *(_OWORD *)&v34[12] = *(_OWORD *)((char *)result + 28);
        unint64_t v14 = *(void *)((char *)v3 + 140);
        int v15 = *((_DWORD *)v3 + 37);
        int v16 = *((_DWORD *)v3 + 38);
        long long v31 = *(_OWORD *)((char *)v3 + 156);
        long long v32 = *(_OWORD *)((char *)v3 + 172);
        BOOL v19 = v14 == -1 || HIDWORD(v14) == 0x7FFFFFFF || v15 == -1 || v16 == 0x7FFFFFFF;
        char v20 = v19;
        unsigned int v21 = v15 + v14;
        if (v19) {
          unsigned int v21 = -1;
        }
        char v22 = v20 ^ 1;
        long long v23 = result;
        while (2)
        {
          long long v24 = *(v23 - 3);
          v23[2] = *(v23 - 4);
          v23[3] = v24;
          v23[4] = *(v23 - 2);
          *(_OWORD *)((char *)v23 + 76) = *(_OWORD *)((char *)v23 - 20);
          long long v25 = *(v23 - 5);
          *long long v23 = *(v23 - 6);
          v23[1] = v25;
          unsigned int v26 = -1;
          int v27 = 0x7FFFFFFF;
          if (*((_DWORD *)v23 - 37) == -1
            || *((_DWORD *)v23 - 36) == 0x7FFFFFFF
            || (unsigned int v26 = *((_DWORD *)v23 - 35), v26 == -1))
          {
LABEL_60:
            if (v21 >= v26) {
              goto LABEL_61;
            }
          }
          else
          {
            int v28 = *((_DWORD *)v23 - 34);
            if (v28 == 0x7FFFFFFF)
            {
              unsigned int v26 = -1;
              goto LABEL_60;
            }
            v26 += *((_DWORD *)v23 - 37);
            int v27 = v28 + *((_DWORD *)v23 - 36);
            if (v21 >= v26)
            {
LABEL_61:
              BOOL v29 = v26 >= v21;
              char v30 = v22 ^ 1;
              if (!v29) {
                char v30 = 1;
              }
              if ((v30 & 1) != 0 || v16 + HIDWORD(v14) >= v27)
              {
                *(v23 - 6) = v33;
                *(v23 - 5) = *(_OWORD *)v34;
                *(_OWORD *)((char *)v23 - 68) = *(_OWORD *)&v34[12];
                *(void *)((char *)v23 - 52) = v14;
                *((_DWORD *)v23 - 11) = v15;
                *((_DWORD *)v23 - 10) = v16;
                *(_OWORD *)((char *)v23 - 36) = v31;
                *(_OWORD *)((char *)v23 - 20) = v32;
                break;
              }
            }
          }
          v23 -= 6;
          continue;
        }
      }
      uint64_t v2 = result + 6;
    }
  }
  return result;
}

uint64_t sub_FD8340(long long *a1, long long *a2, long long *a3)
{
  int v3 = 0x7FFFFFFF;
  BOOL v4 = *((_DWORD *)a2 + 11) == -1 || *((_DWORD *)a2 + 12) == 0x7FFFFFFF;
  char v5 = v4;
  if (v4)
  {
    unsigned int v6 = -1;
    int v7 = 0x7FFFFFFF;
    if (*((_DWORD *)a1 + 11) == -1 || *((_DWORD *)a1 + 12) == 0x7FFFFFFF) {
      goto LABEL_26;
    }
  }
  else
  {
    unsigned int v6 = *((_DWORD *)a2 + 13);
    if (v6 == -1) {
      goto LABEL_21;
    }
    int v11 = *((_DWORD *)a2 + 14);
    if (v11 == 0x7FFFFFFF)
    {
      unsigned int v6 = -1;
LABEL_21:
      int v7 = 0x7FFFFFFF;
      if (*((_DWORD *)a1 + 11) != -1 && *((_DWORD *)a1 + 12) != 0x7FFFFFFF) {
        goto LABEL_13;
      }
LABEL_26:
      unsigned int v9 = -1;
      if (v6 != -1) {
        goto LABEL_31;
      }
      goto LABEL_29;
    }
    v6 += *((_DWORD *)a2 + 11);
    int v3 = v11 + *((_DWORD *)a2 + 12);
    int v7 = 0x7FFFFFFF;
    if (*((_DWORD *)a1 + 11) == -1 || *((_DWORD *)a1 + 12) == 0x7FFFFFFF) {
      goto LABEL_26;
    }
  }
LABEL_13:
  unsigned int v9 = *((_DWORD *)a1 + 13);
  if (v9 != -1)
  {
    int v10 = *((_DWORD *)a1 + 14);
    if (v10 != 0x7FFFFFFF)
    {
      v9 += *((_DWORD *)a1 + 11);
      int v7 = v10 + *((_DWORD *)a1 + 12);
      if (v6 < v9) {
        goto LABEL_31;
      }
      goto LABEL_29;
    }
    unsigned int v9 = -1;
  }
  if (v6 < v9) {
    goto LABEL_31;
  }
LABEL_29:
  if (v9 >= v6 && v3 < v7)
  {
LABEL_31:
    unsigned int v13 = -1;
    int v14 = 0x7FFFFFFF;
    if (*((_DWORD *)a3 + 11) != -1 && *((_DWORD *)a3 + 12) != 0x7FFFFFFF)
    {
      unsigned int v13 = *((_DWORD *)a3 + 13);
      if (v13 != -1)
      {
        int v15 = *((_DWORD *)a3 + 14);
        if (v15 != 0x7FFFFFFF)
        {
          v13 += *((_DWORD *)a3 + 11);
          int v14 = v15 + *((_DWORD *)a3 + 12);
          if (v5)
          {
LABEL_37:
            unsigned int v16 = -1;
            int v17 = 0x7FFFFFFF;
            if (v13 != -1) {
              goto LABEL_74;
            }
LABEL_57:
            if (v16 < v13 || v14 >= v17)
            {
              long long v77 = a1[2];
              long long v82 = a1[3];
              *(_OWORD *)int v87 = a1[4];
              *(_OWORD *)&v87[16] = a1[5];
              long long v67 = *a1;
              long long v72 = a1[1];
              long long v25 = a2[1];
              *a1 = *a2;
              a1[1] = v25;
              long long v27 = a2[3];
              long long v26 = a2[4];
              long long v28 = a2[2];
              *(long long *)((char *)a1 + 76) = *(long long *)((char *)a2 + 76);
              a1[3] = v27;
              a1[4] = v26;
              a1[2] = v28;
              a2[4] = *(_OWORD *)v87;
              *(long long *)((char *)a2 + 76) = *(_OWORD *)&v87[12];
              a2[2] = v77;
              a2[3] = v82;
              *a2 = v67;
              a2[1] = v72;
              unsigned int v29 = -1;
              int v30 = 0x7FFFFFFF;
              if (*((_DWORD *)a3 + 11) != -1 && *((_DWORD *)a3 + 12) != 0x7FFFFFFF)
              {
                int v31 = *((_DWORD *)a3 + 13);
                if (v31 != -1)
                {
                  int v32 = *((_DWORD *)a3 + 14);
                  if (v32 != 0x7FFFFFFF)
                  {
                    unsigned int v29 = v31 + *((_DWORD *)a3 + 11);
                    int v30 = v32 + *((_DWORD *)a3 + 12);
                  }
                }
              }
              unsigned int v33 = -1;
              int v34 = 0x7FFFFFFF;
              if (*((_DWORD *)a2 + 11) != -1 && *((_DWORD *)a2 + 12) != 0x7FFFFFFF)
              {
                int v35 = *((_DWORD *)a2 + 13);
                if (v35 != -1)
                {
                  int v36 = *((_DWORD *)a2 + 14);
                  if (v36 != 0x7FFFFFFF)
                  {
                    unsigned int v33 = v35 + *((_DWORD *)a2 + 11);
                    int v34 = v36 + *((_DWORD *)a2 + 12);
                  }
                }
              }
              if (v29 >= v33)
              {
                uint64_t v37 = 1;
                if (v33 < v29 || v30 >= v34) {
                  return v37;
                }
              }
              long long v78 = a2[2];
              long long v83 = a2[3];
              *(_OWORD *)unint64_t v88 = a2[4];
              *(_OWORD *)&v88[16] = a2[5];
              long long v68 = *a2;
              long long v73 = a2[1];
              long long v38 = a3[1];
              *a2 = *a3;
              a2[1] = v38;
              long long v40 = a3[3];
              long long v39 = a3[4];
              long long v41 = a3[2];
              *(long long *)((char *)a2 + 76) = *(long long *)((char *)a3 + 76);
              a2[3] = v40;
              a2[4] = v39;
              a2[2] = v41;
              a3[4] = *(_OWORD *)v88;
              *(long long *)((char *)a3 + 76) = *(_OWORD *)&v88[12];
              a3[2] = v78;
              a3[3] = v83;
              long long v42 = v68;
              long long v43 = v73;
              uint64_t v37 = 2;
              goto LABEL_75;
            }
LABEL_74:
            long long v79 = a1[2];
            long long v84 = a1[3];
            *(_OWORD *)unint64_t v89 = a1[4];
            *(_OWORD *)&v89[16] = a1[5];
            long long v69 = *a1;
            long long v74 = a1[1];
            long long v44 = a3[1];
            *a1 = *a3;
            a1[1] = v44;
            long long v46 = a3[3];
            long long v45 = a3[4];
            long long v47 = a3[2];
            *(long long *)((char *)a1 + 76) = *(long long *)((char *)a3 + 76);
            a1[3] = v46;
            a1[4] = v45;
            a1[2] = v47;
            a3[4] = *(_OWORD *)v89;
            *(long long *)((char *)a3 + 76) = *(_OWORD *)&v89[12];
            a3[2] = v79;
            a3[3] = v84;
            long long v42 = v69;
            long long v43 = v74;
            uint64_t v37 = 1;
LABEL_75:
            *a3 = v42;
            a3[1] = v43;
            return v37;
          }
LABEL_53:
          unsigned int v16 = *((_DWORD *)a2 + 13);
          int v17 = 0x7FFFFFFF;
          if (v16 != -1)
          {
            int v24 = *((_DWORD *)a2 + 14);
            if (v24 != 0x7FFFFFFF)
            {
              v16 += *((_DWORD *)a2 + 11);
              int v17 = v24 + *((_DWORD *)a2 + 12);
              if (v13 < v16) {
                goto LABEL_74;
              }
              goto LABEL_57;
            }
            unsigned int v16 = -1;
          }
          if (v13 < v16) {
            goto LABEL_74;
          }
          goto LABEL_57;
        }
        unsigned int v13 = -1;
      }
    }
    if (v5) {
      goto LABEL_37;
    }
    goto LABEL_53;
  }
  unsigned int v18 = -1;
  int v19 = 0x7FFFFFFF;
  if (*((_DWORD *)a3 + 11) == -1 || *((_DWORD *)a3 + 12) == 0x7FFFFFFF || (unsigned int v18 = *((_DWORD *)a3 + 13), v18 == -1))
  {
LABEL_44:
    if (v5) {
      goto LABEL_45;
    }
    goto LABEL_78;
  }
  int v20 = *((_DWORD *)a3 + 14);
  if (v20 == 0x7FFFFFFF)
  {
    unsigned int v18 = -1;
    goto LABEL_44;
  }
  v18 += *((_DWORD *)a3 + 11);
  int v19 = v20 + *((_DWORD *)a3 + 12);
  if (v5)
  {
LABEL_45:
    unsigned int v21 = -1;
    int v22 = 0x7FFFFFFF;
    if (v18 != -1) {
      goto LABEL_85;
    }
    goto LABEL_83;
  }
LABEL_78:
  int v49 = *((_DWORD *)a2 + 13);
  int v22 = 0x7FFFFFFF;
  if (v49 == -1 || (int v50 = *((_DWORD *)a2 + 14), v50 == 0x7FFFFFFF))
  {
    unsigned int v21 = -1;
    if (v18 != -1) {
      goto LABEL_85;
    }
  }
  else
  {
    unsigned int v21 = v49 + *((_DWORD *)a2 + 11);
    int v22 = v50 + *((_DWORD *)a2 + 12);
    if (v18 < v21) {
      goto LABEL_85;
    }
  }
LABEL_83:
  uint64_t v37 = 0;
  if (v21 < v18 || v19 >= v22) {
    return v37;
  }
LABEL_85:
  long long v80 = a2[2];
  long long v85 = a2[3];
  *(_OWORD *)unint64_t v90 = a2[4];
  *(_OWORD *)&v90[16] = a2[5];
  long long v70 = *a2;
  long long v75 = a2[1];
  long long v51 = a3[1];
  *a2 = *a3;
  a2[1] = v51;
  long long v53 = a3[3];
  long long v52 = a3[4];
  long long v54 = a3[2];
  *(long long *)((char *)a2 + 76) = *(long long *)((char *)a3 + 76);
  a2[3] = v53;
  a2[4] = v52;
  a2[2] = v54;
  a3[4] = *(_OWORD *)v90;
  *(long long *)((char *)a3 + 76) = *(_OWORD *)&v90[12];
  a3[2] = v80;
  a3[3] = v85;
  *a3 = v70;
  a3[1] = v75;
  unsigned int v55 = -1;
  int v56 = 0x7FFFFFFF;
  if (*((_DWORD *)a2 + 11) != -1 && *((_DWORD *)a2 + 12) != 0x7FFFFFFF)
  {
    int v57 = *((_DWORD *)a2 + 13);
    if (v57 != -1)
    {
      int v58 = *((_DWORD *)a2 + 14);
      if (v58 != 0x7FFFFFFF)
      {
        unsigned int v55 = v57 + *((_DWORD *)a2 + 11);
        int v56 = v58 + *((_DWORD *)a2 + 12);
      }
    }
  }
  unsigned int v59 = -1;
  int v60 = 0x7FFFFFFF;
  if (*((_DWORD *)a1 + 11) != -1 && *((_DWORD *)a1 + 12) != 0x7FFFFFFF)
  {
    int v61 = *((_DWORD *)a1 + 13);
    if (v61 != -1)
    {
      int v62 = *((_DWORD *)a1 + 14);
      if (v62 != 0x7FFFFFFF)
      {
        unsigned int v59 = v61 + *((_DWORD *)a1 + 11);
        int v60 = v62 + *((_DWORD *)a1 + 12);
      }
    }
  }
  if (v55 >= v59)
  {
    uint64_t v37 = 1;
    if (v59 < v55 || v56 >= v60) {
      return v37;
    }
  }
  long long v81 = a1[2];
  long long v86 = a1[3];
  *(_OWORD *)unint64_t v91 = a1[4];
  *(_OWORD *)&v91[16] = a1[5];
  long long v71 = *a1;
  long long v76 = a1[1];
  long long v63 = a2[1];
  *a1 = *a2;
  a1[1] = v63;
  long long v65 = a2[3];
  long long v64 = a2[4];
  long long v66 = a2[2];
  *(long long *)((char *)a1 + 76) = *(long long *)((char *)a2 + 76);
  a1[3] = v65;
  a1[4] = v64;
  a1[2] = v66;
  a2[4] = *(_OWORD *)v91;
  *(long long *)((char *)a2 + 76) = *(_OWORD *)&v91[12];
  a2[2] = v81;
  a2[3] = v86;
  *a2 = v71;
  a2[1] = v76;
  return 2;
}

unint64_t sub_FD88B0(long long *a1, _DWORD *a2)
{
  long long v68 = *a1;
  *(_OWORD *)long long v69 = a1[1];
  *(_OWORD *)&v69[12] = *(long long *)((char *)a1 + 28);
  unint64_t v2 = *(void *)((char *)a1 + 44);
  int v3 = *((_DWORD *)a1 + 13);
  int v4 = *((_DWORD *)a1 + 14);
  long long v66 = *(long long *)((char *)a1 + 60);
  long long v67 = *(long long *)((char *)a1 + 76);
  int v5 = 0x7FFFFFFF;
  BOOL v8 = v2 == -1 || HIDWORD(v2) == 0x7FFFFFFF || v3 == -1 || v4 == 0x7FFFFFFF;
  int v9 = v8;
  unsigned int v10 = v3 + v2;
  if (v8) {
    unsigned int v10 = -1;
  }
  int v11 = *(a2 - 12);
  unsigned int v12 = -1;
  if (*(a2 - 13) != -1 && v11 != 0x7FFFFFFF)
  {
    int v13 = *(a2 - 11);
    int v5 = 0x7FFFFFFF;
    if (v13 != -1)
    {
      int v14 = *(a2 - 10);
      if (v14 != 0x7FFFFFFF)
      {
        int v11 = *(a2 - 12);
        unsigned int v12 = v13 + *(a2 - 13);
        int v5 = v14 + v11;
      }
    }
  }
  int v15 = v4 + HIDWORD(v2);
  if (v10 < v12 || (v12 >= v10 ? (BOOL v16 = v9 == 1) : (BOOL v16 = 1), !v16 ? (v17 = v15 < v5) : (v17 = 0), v17))
  {
    unint64_t v28 = (unint64_t)(a1 + 6);
    while (1)
    {
      unint64_t v19 = v28;
      int v29 = *(_DWORD *)(v28 + 44);
      int v30 = *(_DWORD *)(v28 + 48);
      if (v29 == -1 || v30 == 0x7FFFFFFF)
      {
        unsigned int v32 = -1;
        int v33 = 0x7FFFFFFF;
        if (v10 != -1) {
          goto LABEL_66;
        }
      }
      else
      {
        unsigned int v32 = *(_DWORD *)(v19 + 52);
        int v33 = 0x7FFFFFFF;
        if (v32 != -1)
        {
          int v34 = *(_DWORD *)(v19 + 56);
          if (v34 != 0x7FFFFFFF)
          {
            v32 += *(_DWORD *)(v19 + 44);
            int v33 = v34 + *(_DWORD *)(v19 + 48);
            if (v10 < v32) {
              goto LABEL_66;
            }
            goto LABEL_59;
          }
          unsigned int v32 = -1;
        }
        if (v10 < v32) {
          goto LABEL_66;
        }
      }
LABEL_59:
      BOOL v26 = v32 >= v10;
      unint64_t v28 = v19 + 96;
      if (v26) {
        char v35 = v9;
      }
      else {
        char v35 = 1;
      }
      if ((v35 & 1) == 0 && v15 < v33) {
        goto LABEL_66;
      }
    }
  }
  unint64_t v18 = (unint64_t)(a1 + 6);
  do
  {
    unint64_t v19 = v18;
    if (v18 >= (unint64_t)a2) {
      break;
    }
    int v20 = *(_DWORD *)(v18 + 44);
    int v21 = *(_DWORD *)(v18 + 48);
    if (v20 == -1 || v21 == 0x7FFFFFFF)
    {
      unsigned int v23 = -1;
      int v24 = 0x7FFFFFFF;
    }
    else
    {
      unsigned int v23 = *(_DWORD *)(v19 + 52);
      int v24 = 0x7FFFFFFF;
      if (v23 != -1)
      {
        int v25 = *(_DWORD *)(v19 + 56);
        if (v25 == 0x7FFFFFFF)
        {
          unsigned int v23 = -1;
        }
        else
        {
          v23 += *(_DWORD *)(v19 + 44);
          int v24 = v25 + *(_DWORD *)(v19 + 48);
        }
      }
    }
    if (v10 < v23) {
      break;
    }
    BOOL v26 = v23 >= v10;
    char v27 = v9;
    unint64_t v18 = v19 + 96;
    if (!v26) {
      char v27 = 1;
    }
  }
  while ((v27 & 1) != 0 || v15 >= v24);
LABEL_66:
  if (v19 >= (unint64_t)a2) {
    goto LABEL_89;
  }
  for (unint64_t i = a2 - 13; ; i -= 24)
  {
    if (*i == -1 || v11 == 0x7FFFFFFF)
    {
      unsigned int v38 = -1;
      int v39 = 0x7FFFFFFF;
      if (v10 != -1) {
        goto LABEL_68;
      }
      goto LABEL_80;
    }
    unsigned int v38 = i[2];
    int v39 = 0x7FFFFFFF;
    if (v38 == -1) {
      goto LABEL_79;
    }
    int v40 = i[3];
    if (v40 == 0x7FFFFFFF)
    {
      unsigned int v38 = -1;
LABEL_79:
      if (v10 < v38) {
        goto LABEL_68;
      }
      goto LABEL_80;
    }
    v38 += *i;
    int v39 = v40 + i[1];
    if (v10 < v38) {
      goto LABEL_68;
    }
LABEL_80:
    char v41 = v38 < v10 ? 1 : v9;
    if ((v41 & 1) != 0 || v15 >= v39) {
      break;
    }
LABEL_68:
    int v11 = *(i - 23);
  }
  a2 = i - 11;
LABEL_89:
  if (v19 < (unint64_t)a2)
  {
    char v42 = v9 ^ 1;
    do
    {
      long long v70 = *(_OWORD *)v19;
      long long v71 = *(_OWORD *)(v19 + 16);
      *(_OWORD *)long long v74 = *(_OWORD *)(v19 + 64);
      *(_OWORD *)&v74[16] = *(_OWORD *)(v19 + 80);
      long long v72 = *(_OWORD *)(v19 + 32);
      long long v73 = *(_OWORD *)(v19 + 48);
      long long v44 = *((_OWORD *)a2 + 3);
      long long v43 = *((_OWORD *)a2 + 4);
      long long v45 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(v19 + 76) = *(_OWORD *)(a2 + 19);
      *(_OWORD *)(v19 + 48) = v44;
      *(_OWORD *)(v19 + 64) = v43;
      *(_OWORD *)(v19 + 32) = v45;
      long long v46 = *((_OWORD *)a2 + 1);
      *(_OWORD *)unint64_t v19 = *(_OWORD *)a2;
      *(_OWORD *)(v19 + 16) = v46;
      *(_OWORD *)a2 = v70;
      *((_OWORD *)a2 + 1) = v71;
      *(_OWORD *)(a2 + 19) = *(_OWORD *)&v74[12];
      *((_OWORD *)a2 + 3) = v73;
      *((_OWORD *)a2 + 4) = *(_OWORD *)v74;
      *((_OWORD *)a2 + 2) = v72;
      unint64_t v47 = v19 + 96;
      do
      {
        unint64_t v19 = v47;
        int v48 = *(_DWORD *)(v47 + 44);
        int v49 = *(_DWORD *)(v47 + 48);
        if (v48 == -1 || v49 == 0x7FFFFFFF)
        {
          unsigned int v51 = -1;
          int v52 = 0x7FFFFFFF;
          if (v10 != -1) {
            goto LABEL_112;
          }
        }
        else
        {
          unsigned int v51 = *(_DWORD *)(v19 + 52);
          int v52 = 0x7FFFFFFF;
          if (v51 == -1) {
            goto LABEL_103;
          }
          int v53 = *(_DWORD *)(v19 + 56);
          if (v53 == 0x7FFFFFFF)
          {
            unsigned int v51 = -1;
LABEL_103:
            if (v10 < v51) {
              goto LABEL_112;
            }
            goto LABEL_104;
          }
          v51 += *(_DWORD *)(v19 + 44);
          int v52 = v53 + *(_DWORD *)(v19 + 48);
          if (v10 < v51) {
            goto LABEL_112;
          }
        }
LABEL_104:
        BOOL v26 = v51 >= v10;
        char v54 = v42 ^ 1;
        unint64_t v47 = v19 + 96;
        if (!v26) {
          char v54 = 1;
        }
      }
      while ((v54 & 1) != 0 || v15 >= v52);
      do
      {
        do
        {
LABEL_112:
          while (1)
          {
            a2 -= 24;
            if (a2[11] == -1 || a2[12] == 0x7FFFFFFF) {
              break;
            }
            unsigned int v55 = a2[13];
            int v56 = 0x7FFFFFFF;
            if (v55 == -1)
            {
LABEL_122:
              if (v10 >= v55) {
                goto LABEL_123;
              }
            }
            else
            {
              int v58 = a2[14];
              if (v58 == 0x7FFFFFFF)
              {
                unsigned int v55 = -1;
                goto LABEL_122;
              }
              v55 += a2[11];
              int v56 = v58 + a2[12];
              if (v10 >= v55) {
                goto LABEL_123;
              }
            }
          }
          unsigned int v55 = -1;
          int v56 = 0x7FFFFFFF;
        }
        while (v10 != -1);
LABEL_123:
        BOOL v26 = v55 >= v10;
        char v59 = v42 ^ 1;
        if (!v26) {
          char v59 = 1;
        }
      }
      while ((v59 & 1) == 0 && v15 < v56);
    }
    while (v19 < (unint64_t)a2);
  }
  int v60 = (long long *)(v19 - 96);
  if ((long long *)(v19 - 96) != a1)
  {
    long long v61 = *(_OWORD *)(v19 - 80);
    *a1 = *v60;
    a1[1] = v61;
    long long v62 = *(_OWORD *)(v19 - 64);
    long long v63 = *(_OWORD *)(v19 - 48);
    long long v64 = *(_OWORD *)(v19 - 32);
    *(long long *)((char *)a1 + 76) = *(_OWORD *)(v19 - 20);
    a1[3] = v63;
    a1[4] = v64;
    a1[2] = v62;
  }
  long long *v60 = v68;
  *(_OWORD *)(v19 - 80) = *(_OWORD *)v69;
  *(_OWORD *)(v19 - 68) = *(_OWORD *)&v69[12];
  *(void *)(v19 - 52) = v2;
  *(_DWORD *)(v19 - 44) = v3;
  *(_DWORD *)(v19 - 40) = v4;
  *(_OWORD *)(v19 - 20) = v67;
  *(_OWORD *)(v19 - 36) = v66;
  return v19;
}

unint64_t sub_FD8CFC(long long *a1, _DWORD *a2)
{
  long long v65 = *a1;
  *(_OWORD *)long long v66 = a1[1];
  *(_OWORD *)&v66[12] = *(long long *)((char *)a1 + 28);
  unint64_t v2 = *(void *)((char *)a1 + 44);
  int v3 = *((_DWORD *)a1 + 13);
  int v4 = *((_DWORD *)a1 + 14);
  long long v63 = *(long long *)((char *)a1 + 60);
  long long v64 = *(long long *)((char *)a1 + 76);
  BOOL v7 = v2 == -1 || HIDWORD(v2) == 0x7FFFFFFF || v3 == -1 || v4 == 0x7FFFFFFF;
  unsigned int v8 = v3 + v2;
  int v9 = v4 + HIDWORD(v2);
  if (v7)
  {
    int v9 = 0x7FFFFFFF;
    unsigned int v8 = -1;
  }
  unint64_t v10 = (unint64_t)(a1 + 6);
  if (*((_DWORD *)a1 + 35) == -1 || *((_DWORD *)a1 + 36) == 0x7FFFFFFF)
  {
    unint64_t v15 = (unint64_t)(a1 + 6);
    goto LABEL_48;
  }
  int v11 = a1;
  while (1)
  {
    unint64_t v15 = v10;
    int v16 = *((_DWORD *)v11 + 37);
    if (v16 == -1) {
      goto LABEL_29;
    }
    int v17 = *((_DWORD *)v11 + 38);
    if (v17 == 0x7FFFFFFF) {
      break;
    }
    uint64_t v18 = *(void *)((char *)v11 + 140);
    unsigned int v19 = v16 + v18;
    if (v19 >= v8)
    {
      int v20 = v17 + HIDWORD(v18);
      if (v8 < v19 || v20 >= v9) {
        goto LABEL_29;
      }
    }
    unint64_t v10 = v15 + 96;
    int v13 = *((_DWORD *)v11 + 59);
    int v12 = *((_DWORD *)v11 + 60);
    v11 += 6;
    if (v13 == -1 || v12 == 0x7FFFFFFF)
    {
      unint64_t v22 = (unint64_t)(v11 + 6);
      int v11 = (long long *)v15;
      unint64_t v15 = v22;
LABEL_29:
      if (v11 == a1) {
        goto LABEL_48;
      }
LABEL_30:
      unsigned int v23 = a2 - 24;
      while (2)
      {
        while (1)
        {
          int v24 = v23;
          if (v23[11] == -1 || v23[12] == 0x7FFFFFFF) {
            break;
          }
          unsigned int v27 = v23[13];
          int v26 = 0x7FFFFFFF;
          if (v27 == -1) {
            goto LABEL_41;
          }
          int v28 = v23[14];
          if (v28 == 0x7FFFFFFF)
          {
            unsigned int v27 = -1;
LABEL_41:
            unsigned int v23 = v24 - 24;
            if (v8 < v27) {
              continue;
            }
LABEL_42:
            if (v26 < v9) {
              goto LABEL_66;
            }
            continue;
          }
          unsigned int v29 = v27 + v24[11];
          if (v29 < v8) {
            goto LABEL_66;
          }
          int v26 = v28 + v24[12];
          unsigned int v23 = v24 - 24;
          if (v8 >= v29) {
            goto LABEL_42;
          }
        }
        int v26 = 0x7FFFFFFF;
        v23 -= 24;
        if (v8 != -1) {
          continue;
        }
        goto LABEL_42;
      }
    }
  }
  unint64_t v15 = (unint64_t)(v11 + 6);
  if (v11 != a1) {
    goto LABEL_30;
  }
LABEL_48:
  while (1)
  {
    int v24 = a2;
    if (v15 >= (unint64_t)a2) {
      break;
    }
    a2 -= 24;
    if (*(v24 - 13) == -1 || *(v24 - 12) == 0x7FFFFFFF)
    {
      int v31 = 0x7FFFFFFF;
      if (v8 == -1) {
        goto LABEL_60;
      }
    }
    else
    {
      unsigned int v32 = *(v24 - 11);
      int v31 = 0x7FFFFFFF;
      if (v32 == -1)
      {
LABEL_59:
        if (v8 >= v32) {
          goto LABEL_60;
        }
      }
      else
      {
        int v33 = *(v24 - 10);
        if (v33 == 0x7FFFFFFF)
        {
          unsigned int v32 = -1;
          goto LABEL_59;
        }
        unsigned int v34 = v32 + *(v24 - 13);
        if (v34 < v8)
        {
LABEL_65:
          v24 -= 24;
          break;
        }
        int v31 = v33 + *(v24 - 12);
        if (v8 >= v34)
        {
LABEL_60:
          if (v31 < v9) {
            goto LABEL_65;
          }
        }
      }
    }
  }
LABEL_66:
  unint64_t v35 = v15;
  if (v15 >= (unint64_t)v24) {
    goto LABEL_102;
  }
  unint64_t v35 = v15;
  int v36 = v24;
  while (2)
  {
    long long v67 = *(_OWORD *)v35;
    long long v68 = *(_OWORD *)(v35 + 16);
    *(_OWORD *)long long v71 = *(_OWORD *)(v35 + 64);
    *(_OWORD *)&v71[16] = *(_OWORD *)(v35 + 80);
    long long v69 = *(_OWORD *)(v35 + 32);
    long long v70 = *(_OWORD *)(v35 + 48);
    long long v38 = *((_OWORD *)v36 + 3);
    long long v37 = *((_OWORD *)v36 + 4);
    long long v39 = *((_OWORD *)v36 + 2);
    *(_OWORD *)(v35 + 76) = *(_OWORD *)(v36 + 19);
    *(_OWORD *)(v35 + 48) = v38;
    *(_OWORD *)(v35 + 64) = v37;
    *(_OWORD *)(v35 + 32) = v39;
    long long v40 = *((_OWORD *)v36 + 1);
    *(_OWORD *)unint64_t v35 = *(_OWORD *)v36;
    *(_OWORD *)(v35 + 16) = v40;
    *(_OWORD *)int v36 = v67;
    *((_OWORD *)v36 + 1) = v68;
    *(_OWORD *)(v36 + 19) = *(_OWORD *)&v71[12];
    *((_OWORD *)v36 + 3) = v70;
    *((_OWORD *)v36 + 4) = *(_OWORD *)v71;
    *((_OWORD *)v36 + 2) = v69;
    unint64_t v41 = v35 + 140;
    int v42 = *(_DWORD *)(v35 + 140);
    v35 += 96;
    if (v42 != -1 && *(_DWORD *)(v41 + 4) != 0x7FFFFFFF)
    {
      while (1)
      {
        int v46 = *(_DWORD *)(v41 + 8);
        if (v46 == -1) {
          break;
        }
        int v47 = *(_DWORD *)(v41 + 12);
        if (v47 != 0x7FFFFFFF)
        {
          unsigned int v48 = v46 + *(void *)v41;
          if (v48 >= v8)
          {
            int v49 = v47 + HIDWORD(*(void *)v41);
            if (v8 < v48 || v49 >= v9) {
              break;
            }
          }
          v35 += 96;
          int v43 = *(_DWORD *)(v41 + 96);
          int v44 = *(_DWORD *)(v41 + 100);
          v41 += 96;
          if (v43 != -1 && v44 != 0x7FFFFFFF) {
            continue;
          }
        }
        unint64_t v35 = v41 - 44;
        break;
      }
    }
    unsigned int v51 = v36 - 24;
    while (2)
    {
      while (2)
      {
        while (2)
        {
          int v36 = v51;
          if (v51[11] == -1 || v51[12] == 0x7FFFFFFF)
          {
            int v53 = 0x7FFFFFFF;
            v51 -= 24;
            if (v8 != -1) {
              continue;
            }
            goto LABEL_97;
          }
          break;
        }
        unsigned int v54 = v51[13];
        int v53 = 0x7FFFFFFF;
        if (v54 == -1)
        {
LABEL_96:
          unsigned int v51 = v36 - 24;
          if (v8 < v54) {
            continue;
          }
LABEL_97:
          if (v53 < v9) {
            goto LABEL_68;
          }
          continue;
        }
        break;
      }
      int v55 = v51[14];
      if (v55 == 0x7FFFFFFF)
      {
        unsigned int v54 = -1;
        goto LABEL_96;
      }
      unsigned int v56 = v54 + v36[11];
      if (v56 >= v8)
      {
        int v53 = v55 + v36[12];
        unsigned int v51 = v36 - 24;
        if (v8 < v56) {
          continue;
        }
        goto LABEL_97;
      }
      break;
    }
LABEL_68:
    if (v35 < (unint64_t)v36) {
      continue;
    }
    break;
  }
LABEL_102:
  int v57 = (long long *)(v35 - 96);
  if ((long long *)(v35 - 96) != a1)
  {
    long long v58 = *(_OWORD *)(v35 - 80);
    *a1 = *v57;
    a1[1] = v58;
    long long v59 = *(_OWORD *)(v35 - 64);
    long long v60 = *(_OWORD *)(v35 - 48);
    long long v61 = *(_OWORD *)(v35 - 32);
    *(long long *)((char *)a1 + 76) = *(_OWORD *)(v35 - 20);
    a1[3] = v60;
    a1[4] = v61;
    a1[2] = v59;
  }
  *int v57 = v65;
  *(_OWORD *)(v35 - 80) = *(_OWORD *)v66;
  *(_OWORD *)(v35 - 68) = *(_OWORD *)&v66[12];
  *(void *)(v35 - 52) = v2;
  *(_DWORD *)(v35 - 44) = v3;
  *(_DWORD *)(v35 - 40) = v4;
  *(_OWORD *)(v35 - 20) = v64;
  *(_OWORD *)(v35 - 36) = v63;
  return v35 - 96;
}

__n128 sub_FD9120(uint64_t a1, uint64_t a2)
{
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 5))
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v45 = 0x7FFFFFFF;
      if (*(_DWORD *)(a2 - 52) == -1 || *(_DWORD *)(a2 - 48) == 0x7FFFFFFF) {
        goto LABEL_83;
      }
      unsigned int v47 = *(_DWORD *)(a2 - 44);
      if (v47 == -1) {
        goto LABEL_84;
      }
      int v48 = *(_DWORD *)(a2 - 40);
      if (v48 == 0x7FFFFFFF)
      {
LABEL_83:
        unsigned int v47 = -1;
LABEL_84:
        unsigned int v49 = -1;
        int v50 = 0x7FFFFFFF;
        if (*(_DWORD *)(a1 + 44) == -1) {
          goto LABEL_95;
        }
      }
      else
      {
        v47 += *(_DWORD *)(a2 - 52);
        int v45 = v48 + *(_DWORD *)(a2 - 48);
        unsigned int v49 = -1;
        int v50 = 0x7FFFFFFF;
        if (*(_DWORD *)(a1 + 44) == -1) {
          goto LABEL_95;
        }
      }
      if (*(_DWORD *)(a1 + 48) != 0x7FFFFFFF)
      {
        unsigned int v49 = *(_DWORD *)(a1 + 52);
        if (v49 != -1)
        {
          int v51 = *(_DWORD *)(a1 + 56);
          if (v51 != 0x7FFFFFFF)
          {
            v49 += *(_DWORD *)(a1 + 44);
            int v50 = v51 + *(_DWORD *)(a1 + 48);
            if (v47 < v49) {
              goto LABEL_100;
            }
LABEL_96:
            if (v49 < v47 || v45 >= v50) {
              return result;
            }
LABEL_100:
            int v52 = (__n128 *)(a2 - 96);
            __n128 v63 = *(__n128 *)(a1 + 32);
            __n128 v64 = *(__n128 *)(a1 + 48);
            *(_OWORD *)long long v65 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)&v65[16] = *(_OWORD *)(a1 + 80);
            __n128 v60 = *(__n128 *)a1;
            __n128 v62 = *(__n128 *)(a1 + 16);
            long long v53 = *(_OWORD *)(a2 - 80);
            *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
            *(_OWORD *)(a1 + 16) = v53;
            long long v55 = *(_OWORD *)(a2 - 48);
            long long v54 = *(_OWORD *)(a2 - 32);
            long long v56 = *(_OWORD *)(a2 - 64);
            *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 - 20);
            *(_OWORD *)(a1 + 48) = v55;
            *(_OWORD *)(a1 + 64) = v54;
            *(_OWORD *)(a1 + 32) = v56;
            v52[4] = *(__n128 *)v65;
            *(__n128 *)((char *)v52 + 76) = *(__n128 *)&v65[12];
            v52[2] = v63;
            v52[3] = v64;
            __n128 result = v60;
            *int v52 = v60;
            v52[1] = v62;
            return result;
          }
          unsigned int v49 = -1;
        }
      }
LABEL_95:
      if (v47 < v49) {
        goto LABEL_100;
      }
      goto LABEL_96;
    case 3uLL:
      sub_FD8340((long long *)a1, (long long *)(a1 + 96), (long long *)(a2 - 96));
      return result;
    case 4uLL:
      result.n128_u64[0] = sub_FD9638(a1, a1 + 96, a1 + 192, a2 - 96).n128_u64[0];
      return result;
    case 5uLL:
      result.n128_u64[0] = sub_FD9A08(a1, a1 + 96, a1 + 192, a1 + 288, a2 - 96).n128_u64[0];
      return result;
    default:
      uint64_t v4 = a1 + 192;
      sub_FD8340((long long *)a1, (long long *)(a1 + 96), (long long *)(a1 + 192));
      uint64_t v6 = a1 + 288;
      if (a1 + 288 == a2) {
        return result;
      }
      uint64_t v7 = 0;
      int v8 = 0;
      while (2)
      {
        if (*(_DWORD *)(v6 + 44) == -1 || *(_DWORD *)(v6 + 48) == 0x7FFFFFFF)
        {
          unsigned int v11 = -1;
          int v12 = 0x7FFFFFFF;
          if (*(_DWORD *)(v4 + 44) == -1 || *(_DWORD *)(v4 + 48) == 0x7FFFFFFF) {
            goto LABEL_30;
          }
        }
        else
        {
          unsigned int v11 = *(_DWORD *)(v6 + 52);
          int v12 = 0x7FFFFFFF;
          if (v11 == -1) {
            goto LABEL_25;
          }
          int v17 = *(_DWORD *)(v6 + 56);
          if (v17 == 0x7FFFFFFF)
          {
            unsigned int v11 = -1;
LABEL_25:
            if (*(_DWORD *)(v4 + 44) != -1 && *(_DWORD *)(v4 + 48) != 0x7FFFFFFF) {
              goto LABEL_17;
            }
LABEL_30:
            unsigned int v14 = -1;
            int v15 = 0x7FFFFFFF;
            if (v11 != -1) {
              goto LABEL_35;
            }
            goto LABEL_33;
          }
          v11 += *(_DWORD *)(v6 + 44);
          int v12 = v17 + *(_DWORD *)(v6 + 48);
          if (*(_DWORD *)(v4 + 44) == -1 || *(_DWORD *)(v4 + 48) == 0x7FFFFFFF) {
            goto LABEL_30;
          }
        }
LABEL_17:
        unsigned int v14 = *(_DWORD *)(v4 + 52);
        int v15 = 0x7FFFFFFF;
        if (v14 == -1) {
          goto LABEL_20;
        }
        int v16 = *(_DWORD *)(v4 + 56);
        if (v16 == 0x7FFFFFFF)
        {
          unsigned int v14 = -1;
LABEL_20:
          if (v11 < v14) {
            goto LABEL_35;
          }
          goto LABEL_33;
        }
        v14 += *(_DWORD *)(v4 + 44);
        int v15 = v16 + *(_DWORD *)(v4 + 48);
        if (v11 < v14) {
          goto LABEL_35;
        }
LABEL_33:
        if (v14 < v11 || v12 >= v15) {
          goto LABEL_7;
        }
LABEL_35:
        *(_OWORD *)&v61[12] = *(_OWORD *)(v6 + 28);
        long long v59 = *(_OWORD *)v6;
        *(_OWORD *)long long v61 = *(_OWORD *)(v6 + 16);
        unint64_t v19 = *(void *)(v6 + 44);
        int v20 = *(_DWORD *)(v6 + 52);
        int v21 = *(_DWORD *)(v6 + 56);
        __n128 v57 = *(__n128 *)(v6 + 60);
        long long v58 = *(_OWORD *)(v6 + 76);
        long long v22 = *(_OWORD *)(v4 + 16);
        *(_OWORD *)uint64_t v6 = *(_OWORD *)v4;
        *(_OWORD *)(v6 + 16) = v22;
        long long v24 = *(_OWORD *)(v4 + 32);
        long long v23 = *(_OWORD *)(v4 + 48);
        *(_OWORD *)(v6 + 76) = *(_OWORD *)(v4 + 76);
        long long v25 = *(_OWORD *)(v4 + 64);
        *(_OWORD *)(v6 + 48) = v23;
        *(_OWORD *)(v6 + 64) = v25;
        uint64_t v9 = a1;
        *(_OWORD *)(v6 + 32) = v24;
        if (v4 == a1) {
          goto LABEL_6;
        }
        BOOL v28 = v19 == -1 || HIDWORD(v19) == 0x7FFFFFFF || v20 == -1 || v21 == 0x7FFFFFFF;
        char v29 = v28;
        unsigned int v30 = v20 + v19;
        if (v28) {
          unsigned int v30 = -1;
        }
        char v31 = v29 ^ 1;
        uint64_t v32 = v7;
        while (1)
        {
          long long v37 = (_DWORD *)(a1 + v32);
          if (*(_DWORD *)(a1 + v32 + 140) == -1 || *(_DWORD *)(a1 + v32 + 144) == 0x7FFFFFFF)
          {
            unsigned int v39 = -1;
            int v40 = 0x7FFFFFFF;
            if (v30 == -1) {
              goto LABEL_64;
            }
            goto LABEL_52;
          }
          unsigned int v39 = v37[37];
          int v40 = 0x7FFFFFFF;
          if (v39 != -1) {
            break;
          }
LABEL_63:
          if (v30 >= v39) {
            goto LABEL_64;
          }
LABEL_52:
          int v33 = v37 + 48;
          unsigned int v34 = v37 + 24;
          long long v35 = v34[3];
          v33[2] = v34[2];
          v33[3] = v35;
          v33[4] = v34[4];
          *(_OWORD *)((char *)v33 + 76) = *(_OWORD *)((char *)v34 + 76);
          long long v36 = v34[1];
          _OWORD *v33 = *v34;
          v33[1] = v36;
          v32 -= 96;
          if (v32 == -192)
          {
            uint64_t v9 = a1;
            goto LABEL_6;
          }
        }
        int v41 = *(_DWORD *)(a1 + v32 + 152);
        if (v41 == 0x7FFFFFFF)
        {
          unsigned int v39 = -1;
          goto LABEL_63;
        }
        v39 += v37[35];
        int v40 = v41 + v37[36];
        if (v30 < v39) {
          goto LABEL_52;
        }
LABEL_64:
        BOOL v42 = v39 >= v30;
        char v43 = v31 ^ 1;
        if (!v42) {
          char v43 = 1;
        }
        if ((v43 & 1) == 0 && v21 + HIDWORD(v19) < v40) {
          goto LABEL_52;
        }
        uint64_t v9 = a1 + v32 + 192;
LABEL_6:
        *(_OWORD *)uint64_t v9 = v59;
        *(_OWORD *)(v9 + 16) = *(_OWORD *)v61;
        *(_OWORD *)(v9 + 28) = *(_OWORD *)&v61[12];
        __n128 result = v57;
        *(__n128 *)(v9 + 60) = v57;
        *(void *)(v9 + 44) = v19;
        *(_DWORD *)(v9 + 52) = v20;
        *(_DWORD *)(v9 + 56) = v21;
        ++v8;
        *(_OWORD *)(v9 + 76) = v58;
        if (v8 != 8)
        {
LABEL_7:
          uint64_t v4 = v6;
          v7 += 96;
          v6 += 96;
          if (v6 == a2) {
            return result;
          }
          continue;
        }
        return result;
      }
  }
}

__n128 sub_FD9638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_FD8340((long long *)a1, (long long *)a2, (long long *)a3);
  int v9 = 0x7FFFFFFF;
  if (*(_DWORD *)(a4 + 44) == -1 || *(_DWORD *)(a4 + 48) == 0x7FFFFFFF)
  {
    unsigned int v11 = -1;
    int v12 = 0x7FFFFFFF;
    if (*(_DWORD *)(a3 + 44) != -1 && *(_DWORD *)(a3 + 48) != 0x7FFFFFFF) {
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  unsigned int v11 = *(_DWORD *)(a4 + 52);
  if (v11 == -1) {
    goto LABEL_14;
  }
  int v14 = *(_DWORD *)(a4 + 56);
  if (v14 != 0x7FFFFFFF)
  {
    v11 += *(_DWORD *)(a4 + 44);
    int v9 = v14 + *(_DWORD *)(a4 + 48);
    int v12 = 0x7FFFFFFF;
    if (*(_DWORD *)(a3 + 44) != -1 && *(_DWORD *)(a3 + 48) != 0x7FFFFFFF) {
      goto LABEL_25;
    }
LABEL_19:
    unsigned int v16 = -1;
    if (v11 != -1) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  unsigned int v11 = -1;
LABEL_14:
  int v12 = 0x7FFFFFFF;
  if (*(_DWORD *)(a3 + 44) == -1 || *(_DWORD *)(a3 + 48) == 0x7FFFFFFF) {
    goto LABEL_19;
  }
LABEL_25:
  unsigned int v16 = *(_DWORD *)(a3 + 52);
  if (v16 == -1) {
    goto LABEL_28;
  }
  int v18 = *(_DWORD *)(a3 + 56);
  if (v18 == 0x7FFFFFFF)
  {
    unsigned int v16 = -1;
LABEL_28:
    if (v11 < v16) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  v16 += *(_DWORD *)(a3 + 44);
  int v12 = v18 + *(_DWORD *)(a3 + 48);
  if (v11 < v16) {
    goto LABEL_33;
  }
LABEL_29:
  if (v16 < v11 || v9 >= v12) {
    return result;
  }
LABEL_33:
  long long v49 = *(_OWORD *)(a3 + 32);
  long long v52 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)long long v55 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)&v55[16] = *(_OWORD *)(a3 + 80);
  __n128 v43 = *(__n128 *)a3;
  long long v46 = *(_OWORD *)(a3 + 16);
  long long v19 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_OWORD *)(a3 + 16) = v19;
  long long v21 = *(_OWORD *)(a4 + 48);
  long long v20 = *(_OWORD *)(a4 + 64);
  long long v22 = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(a3 + 76) = *(_OWORD *)(a4 + 76);
  *(_OWORD *)(a3 + 48) = v21;
  *(_OWORD *)(a3 + 64) = v20;
  *(_OWORD *)(a3 + 32) = v22;
  *(_OWORD *)(a4 + 64) = *(_OWORD *)v55;
  *(_OWORD *)(a4 + 76) = *(_OWORD *)&v55[12];
  *(_OWORD *)(a4 + 32) = v49;
  *(_OWORD *)(a4 + 48) = v52;
  __n128 result = v43;
  *(__n128 *)a4 = v43;
  *(_OWORD *)(a4 + 16) = v46;
  unsigned int v23 = -1;
  int v24 = 0x7FFFFFFF;
  if (*(_DWORD *)(a3 + 44) == -1 || *(_DWORD *)(a3 + 48) == 0x7FFFFFFF || (unsigned int v23 = *(_DWORD *)(a3 + 52), v23 == -1))
  {
LABEL_38:
    unsigned int v26 = -1;
    int v27 = 0x7FFFFFFF;
    if (*(_DWORD *)(a2 + 44) == -1) {
      goto LABEL_45;
    }
    goto LABEL_39;
  }
  int v25 = *(_DWORD *)(a3 + 56);
  if (v25 == 0x7FFFFFFF)
  {
    unsigned int v23 = -1;
    goto LABEL_38;
  }
  v23 += *(_DWORD *)(a3 + 44);
  int v24 = v25 + *(_DWORD *)(a3 + 48);
  unsigned int v26 = -1;
  int v27 = 0x7FFFFFFF;
  if (*(_DWORD *)(a2 + 44) == -1) {
    goto LABEL_45;
  }
LABEL_39:
  if (*(_DWORD *)(a2 + 48) == 0x7FFFFFFF || (unsigned int v26 = *(_DWORD *)(a2 + 52), v26 == -1))
  {
LABEL_45:
    if (v23 < v26) {
      goto LABEL_50;
    }
    goto LABEL_46;
  }
  int v28 = *(_DWORD *)(a2 + 56);
  if (v28 == 0x7FFFFFFF)
  {
    unsigned int v26 = -1;
    if (v23 != -1) {
      goto LABEL_50;
    }
  }
  else
  {
    v26 += *(_DWORD *)(a2 + 44);
    int v27 = v28 + *(_DWORD *)(a2 + 48);
    if (v23 < v26) {
      goto LABEL_50;
    }
  }
LABEL_46:
  if (v26 < v23 || v24 >= v27) {
    return result;
  }
LABEL_50:
  long long v50 = *(_OWORD *)(a2 + 32);
  long long v53 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)long long v56 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&v56[16] = *(_OWORD *)(a2 + 80);
  __n128 v44 = *(__n128 *)a2;
  long long v47 = *(_OWORD *)(a2 + 16);
  long long v29 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v29;
  long long v31 = *(_OWORD *)(a3 + 48);
  long long v30 = *(_OWORD *)(a3 + 64);
  long long v32 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 76) = *(_OWORD *)(a3 + 76);
  *(_OWORD *)(a2 + 48) = v31;
  *(_OWORD *)(a2 + 64) = v30;
  *(_OWORD *)(a2 + 32) = v32;
  *(_OWORD *)(a3 + 64) = *(_OWORD *)v56;
  *(_OWORD *)(a3 + 76) = *(_OWORD *)&v56[12];
  *(_OWORD *)(a3 + 32) = v50;
  *(_OWORD *)(a3 + 48) = v53;
  __n128 result = v44;
  *(__n128 *)a3 = v44;
  *(_OWORD *)(a3 + 16) = v47;
  unsigned int v33 = -1;
  int v34 = 0x7FFFFFFF;
  if (*(_DWORD *)(a2 + 44) != -1 && *(_DWORD *)(a2 + 48) != 0x7FFFFFFF)
  {
    unsigned int v33 = *(_DWORD *)(a2 + 52);
    if (v33 != -1)
    {
      int v35 = *(_DWORD *)(a2 + 56);
      if (v35 != 0x7FFFFFFF)
      {
        v33 += *(_DWORD *)(a2 + 44);
        int v34 = v35 + *(_DWORD *)(a2 + 48);
        unsigned int v36 = -1;
        int v37 = 0x7FFFFFFF;
        if (*(_DWORD *)(a1 + 44) != -1) {
          goto LABEL_56;
        }
        goto LABEL_63;
      }
      unsigned int v33 = -1;
    }
  }
  unsigned int v36 = -1;
  int v37 = 0x7FFFFFFF;
  if (*(_DWORD *)(a1 + 44) != -1)
  {
LABEL_56:
    if (*(_DWORD *)(a1 + 48) != 0x7FFFFFFF)
    {
      unsigned int v36 = *(_DWORD *)(a1 + 52);
      if (v36 != -1)
      {
        int v38 = *(_DWORD *)(a1 + 56);
        if (v38 == 0x7FFFFFFF)
        {
          unsigned int v36 = -1;
        }
        else
        {
          v36 += *(_DWORD *)(a1 + 44);
          int v37 = v38 + *(_DWORD *)(a1 + 48);
        }
      }
    }
  }
LABEL_63:
  if (v33 < v36 || v36 >= v33 && v34 < v37)
  {
    long long v51 = *(_OWORD *)(a1 + 32);
    long long v54 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)__n128 v57 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)&v57[16] = *(_OWORD *)(a1 + 80);
    __n128 v45 = *(__n128 *)a1;
    long long v48 = *(_OWORD *)(a1 + 16);
    long long v39 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v39;
    long long v41 = *(_OWORD *)(a2 + 48);
    long long v40 = *(_OWORD *)(a2 + 64);
    long long v42 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
    *(_OWORD *)(a1 + 48) = v41;
    *(_OWORD *)(a1 + 64) = v40;
    *(_OWORD *)(a1 + 32) = v42;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)v57;
    *(_OWORD *)(a2 + 76) = *(_OWORD *)&v57[12];
    *(_OWORD *)(a2 + 32) = v51;
    *(_OWORD *)(a2 + 48) = v54;
    __n128 result = v45;
    *(__n128 *)a2 = v45;
    *(_OWORD *)(a2 + 16) = v48;
  }
  return result;
}

__n128 sub_FD9A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = sub_FD9638(a1, a2, a3, a4).n128_u64[0];
  int v11 = 0x7FFFFFFF;
  if (*(_DWORD *)(a5 + 44) == -1 || *(_DWORD *)(a5 + 48) == 0x7FFFFFFF)
  {
    unsigned int v13 = -1;
    int v14 = 0x7FFFFFFF;
    if (*(_DWORD *)(a4 + 44) == -1 || *(_DWORD *)(a4 + 48) == 0x7FFFFFFF) {
      goto LABEL_19;
    }
  }
  else
  {
    unsigned int v13 = *(_DWORD *)(a5 + 52);
    if (v13 == -1) {
      goto LABEL_14;
    }
    int v16 = *(_DWORD *)(a5 + 56);
    if (v16 == 0x7FFFFFFF)
    {
      unsigned int v13 = -1;
LABEL_14:
      int v14 = 0x7FFFFFFF;
      if (*(_DWORD *)(a4 + 44) != -1 && *(_DWORD *)(a4 + 48) != 0x7FFFFFFF) {
        goto LABEL_25;
      }
LABEL_19:
      unsigned int v18 = -1;
      if (v13 != -1) {
        goto LABEL_33;
      }
      goto LABEL_29;
    }
    v13 += *(_DWORD *)(a5 + 44);
    int v11 = v16 + *(_DWORD *)(a5 + 48);
    int v14 = 0x7FFFFFFF;
    if (*(_DWORD *)(a4 + 44) == -1 || *(_DWORD *)(a4 + 48) == 0x7FFFFFFF) {
      goto LABEL_19;
    }
  }
LABEL_25:
  unsigned int v18 = *(_DWORD *)(a4 + 52);
  if (v18 != -1)
  {
    int v20 = *(_DWORD *)(a4 + 56);
    if (v20 != 0x7FFFFFFF)
    {
      v18 += *(_DWORD *)(a4 + 44);
      int v14 = v20 + *(_DWORD *)(a4 + 48);
      if (v13 < v18) {
        goto LABEL_33;
      }
      goto LABEL_29;
    }
    unsigned int v18 = -1;
  }
  if (v13 < v18) {
    goto LABEL_33;
  }
LABEL_29:
  if (v18 >= v13 && v11 < v14)
  {
LABEL_33:
    long long v63 = *(_OWORD *)(a4 + 32);
    long long v67 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)long long v71 = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&v71[16] = *(_OWORD *)(a4 + 80);
    __n128 v55 = *(__n128 *)a4;
    long long v59 = *(_OWORD *)(a4 + 16);
    long long v21 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v21;
    long long v23 = *(_OWORD *)(a5 + 48);
    long long v22 = *(_OWORD *)(a5 + 64);
    long long v24 = *(_OWORD *)(a5 + 32);
    *(_OWORD *)(a4 + 76) = *(_OWORD *)(a5 + 76);
    *(_OWORD *)(a4 + 48) = v23;
    *(_OWORD *)(a4 + 64) = v22;
    *(_OWORD *)(a4 + 32) = v24;
    *(_OWORD *)(a5 + 64) = *(_OWORD *)v71;
    *(_OWORD *)(a5 + 76) = *(_OWORD *)&v71[12];
    *(_OWORD *)(a5 + 32) = v63;
    *(_OWORD *)(a5 + 48) = v67;
    __n128 result = v55;
    *(__n128 *)a5 = v55;
    *(_OWORD *)(a5 + 16) = v59;
    unsigned int v25 = -1;
    int v26 = 0x7FFFFFFF;
    if (*(_DWORD *)(a4 + 44) != -1 && *(_DWORD *)(a4 + 48) != 0x7FFFFFFF)
    {
      unsigned int v25 = *(_DWORD *)(a4 + 52);
      if (v25 != -1)
      {
        int v27 = *(_DWORD *)(a4 + 56);
        if (v27 != 0x7FFFFFFF)
        {
          v25 += *(_DWORD *)(a4 + 44);
          int v26 = v27 + *(_DWORD *)(a4 + 48);
          unsigned int v28 = -1;
          int v29 = 0x7FFFFFFF;
          if (*(_DWORD *)(a3 + 44) == -1) {
            goto LABEL_45;
          }
          goto LABEL_39;
        }
        unsigned int v25 = -1;
      }
    }
    unsigned int v28 = -1;
    int v29 = 0x7FFFFFFF;
    if (*(_DWORD *)(a3 + 44) == -1) {
      goto LABEL_45;
    }
LABEL_39:
    if (*(_DWORD *)(a3 + 48) != 0x7FFFFFFF)
    {
      unsigned int v28 = *(_DWORD *)(a3 + 52);
      if (v28 != -1)
      {
        int v30 = *(_DWORD *)(a3 + 56);
        if (v30 == 0x7FFFFFFF)
        {
          unsigned int v28 = -1;
          if (v25 != -1) {
            goto LABEL_50;
          }
        }
        else
        {
          v28 += *(_DWORD *)(a3 + 44);
          int v29 = v30 + *(_DWORD *)(a3 + 48);
          if (v25 < v28) {
            goto LABEL_50;
          }
        }
LABEL_46:
        if (v28 < v25 || v26 >= v29) {
          return result;
        }
LABEL_50:
        long long v64 = *(_OWORD *)(a3 + 32);
        long long v68 = *(_OWORD *)(a3 + 48);
        *(_OWORD *)long long v72 = *(_OWORD *)(a3 + 64);
        *(_OWORD *)&v72[16] = *(_OWORD *)(a3 + 80);
        __n128 v56 = *(__n128 *)a3;
        long long v60 = *(_OWORD *)(a3 + 16);
        long long v31 = *(_OWORD *)(a4 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a4;
        *(_OWORD *)(a3 + 16) = v31;
        long long v33 = *(_OWORD *)(a4 + 48);
        long long v32 = *(_OWORD *)(a4 + 64);
        long long v34 = *(_OWORD *)(a4 + 32);
        *(_OWORD *)(a3 + 76) = *(_OWORD *)(a4 + 76);
        *(_OWORD *)(a3 + 48) = v33;
        *(_OWORD *)(a3 + 64) = v32;
        *(_OWORD *)(a3 + 32) = v34;
        *(_OWORD *)(a4 + 64) = *(_OWORD *)v72;
        *(_OWORD *)(a4 + 76) = *(_OWORD *)&v72[12];
        *(_OWORD *)(a4 + 32) = v64;
        *(_OWORD *)(a4 + 48) = v68;
        __n128 result = v56;
        *(__n128 *)a4 = v56;
        *(_OWORD *)(a4 + 16) = v60;
        unsigned int v35 = -1;
        int v36 = 0x7FFFFFFF;
        if (*(_DWORD *)(a3 + 44) != -1 && *(_DWORD *)(a3 + 48) != 0x7FFFFFFF)
        {
          unsigned int v35 = *(_DWORD *)(a3 + 52);
          if (v35 != -1)
          {
            int v37 = *(_DWORD *)(a3 + 56);
            if (v37 != 0x7FFFFFFF)
            {
              v35 += *(_DWORD *)(a3 + 44);
              int v36 = v37 + *(_DWORD *)(a3 + 48);
              unsigned int v38 = -1;
              int v39 = 0x7FFFFFFF;
              if (*(_DWORD *)(a2 + 44) == -1) {
                goto LABEL_63;
              }
LABEL_56:
              if (*(_DWORD *)(a2 + 48) != 0x7FFFFFFF)
              {
                unsigned int v38 = *(_DWORD *)(a2 + 52);
                if (v38 != -1)
                {
                  int v40 = *(_DWORD *)(a2 + 56);
                  if (v40 == 0x7FFFFFFF)
                  {
                    unsigned int v38 = -1;
                  }
                  else
                  {
                    v38 += *(_DWORD *)(a2 + 44);
                    int v39 = v40 + *(_DWORD *)(a2 + 48);
                  }
                }
              }
LABEL_63:
              if (v35 >= v38 && (v38 < v35 || v36 >= v39)) {
                return result;
              }
              long long v65 = *(_OWORD *)(a2 + 32);
              long long v69 = *(_OWORD *)(a2 + 48);
              *(_OWORD *)long long v73 = *(_OWORD *)(a2 + 64);
              *(_OWORD *)&v73[16] = *(_OWORD *)(a2 + 80);
              __n128 v57 = *(__n128 *)a2;
              long long v61 = *(_OWORD *)(a2 + 16);
              long long v41 = *(_OWORD *)(a3 + 16);
              *(_OWORD *)a2 = *(_OWORD *)a3;
              *(_OWORD *)(a2 + 16) = v41;
              long long v43 = *(_OWORD *)(a3 + 48);
              long long v42 = *(_OWORD *)(a3 + 64);
              long long v44 = *(_OWORD *)(a3 + 32);
              *(_OWORD *)(a2 + 76) = *(_OWORD *)(a3 + 76);
              *(_OWORD *)(a2 + 48) = v43;
              *(_OWORD *)(a2 + 64) = v42;
              *(_OWORD *)(a2 + 32) = v44;
              *(_OWORD *)(a3 + 64) = *(_OWORD *)v73;
              *(_OWORD *)(a3 + 76) = *(_OWORD *)&v73[12];
              *(_OWORD *)(a3 + 32) = v65;
              *(_OWORD *)(a3 + 48) = v69;
              __n128 result = v57;
              *(__n128 *)a3 = v57;
              *(_OWORD *)(a3 + 16) = v61;
              unsigned int v45 = -1;
              int v46 = 0x7FFFFFFF;
              if (*(_DWORD *)(a2 + 44) != -1 && *(_DWORD *)(a2 + 48) != 0x7FFFFFFF)
              {
                unsigned int v45 = *(_DWORD *)(a2 + 52);
                if (v45 != -1)
                {
                  int v47 = *(_DWORD *)(a2 + 56);
                  if (v47 == 0x7FFFFFFF)
                  {
                    unsigned int v45 = -1;
                  }
                  else
                  {
                    v45 += *(_DWORD *)(a2 + 44);
                    int v46 = v47 + *(_DWORD *)(a2 + 48);
                  }
                }
              }
              unsigned int v48 = -1;
              int v49 = 0x7FFFFFFF;
              if (*(_DWORD *)(a1 + 44) != -1 && *(_DWORD *)(a1 + 48) != 0x7FFFFFFF)
              {
                unsigned int v48 = *(_DWORD *)(a1 + 52);
                if (v48 != -1)
                {
                  int v50 = *(_DWORD *)(a1 + 56);
                  if (v50 != 0x7FFFFFFF)
                  {
                    v48 += *(_DWORD *)(a1 + 44);
                    int v49 = v50 + *(_DWORD *)(a1 + 48);
                    if (v45 < v48) {
                      goto LABEL_82;
                    }
LABEL_78:
                    if (v48 < v45 || v46 >= v49) {
                      return result;
                    }
LABEL_82:
                    long long v66 = *(_OWORD *)(a1 + 32);
                    long long v70 = *(_OWORD *)(a1 + 48);
                    *(_OWORD *)long long v74 = *(_OWORD *)(a1 + 64);
                    *(_OWORD *)&v74[16] = *(_OWORD *)(a1 + 80);
                    __n128 v58 = *(__n128 *)a1;
                    long long v62 = *(_OWORD *)(a1 + 16);
                    long long v51 = *(_OWORD *)(a2 + 16);
                    *(_OWORD *)a1 = *(_OWORD *)a2;
                    *(_OWORD *)(a1 + 16) = v51;
                    long long v53 = *(_OWORD *)(a2 + 48);
                    long long v52 = *(_OWORD *)(a2 + 64);
                    long long v54 = *(_OWORD *)(a2 + 32);
                    *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
                    *(_OWORD *)(a1 + 48) = v53;
                    *(_OWORD *)(a1 + 64) = v52;
                    *(_OWORD *)(a1 + 32) = v54;
                    *(_OWORD *)(a2 + 64) = *(_OWORD *)v74;
                    *(_OWORD *)(a2 + 76) = *(_OWORD *)&v74[12];
                    *(_OWORD *)(a2 + 32) = v66;
                    *(_OWORD *)(a2 + 48) = v70;
                    __n128 result = v58;
                    *(__n128 *)a2 = v58;
                    *(_OWORD *)(a2 + 16) = v62;
                    return result;
                  }
                  unsigned int v48 = -1;
                }
              }
              if (v45 < v48) {
                goto LABEL_82;
              }
              goto LABEL_78;
            }
            unsigned int v35 = -1;
          }
        }
        unsigned int v38 = -1;
        int v39 = 0x7FFFFFFF;
        if (*(_DWORD *)(a2 + 44) == -1) {
          goto LABEL_63;
        }
        goto LABEL_56;
      }
    }
LABEL_45:
    if (v25 < v28) {
      goto LABEL_50;
    }
    goto LABEL_46;
  }
  return result;
}

__n128 sub_FD9EF8(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  if (a3 < 2) {
    return result;
  }
  int64_t v4 = (unint64_t)(a3 - 2) >> 1;
  if (v4 < (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 5))) {
    return result;
  }
  uint64_t v5 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 5)) | 1;
  uint64_t v6 = (long long *)(a1 + 96 * v5);
  if (0x5555555555555556 * (((uint64_t)a4 - a1) >> 5) + 2 >= a3) {
    goto LABEL_30;
  }
  uint64_t v7 = a1 + 96 * v5;
  int v9 = *(_DWORD *)(v7 + 44);
  int v10 = *(_DWORD *)(v7 + 48);
  int v8 = (_DWORD *)(v7 + 44);
  int v11 = 0x7FFFFFFF;
  BOOL v12 = v9 == -1 || v10 == 0x7FFFFFFF;
  if (v12
    || (v13 = *(_DWORD *)(a1 + 96 * v5 + 52), int v11 = 0x7FFFFFFF, v13 == -1)
    || (int v14 = *(_DWORD *)(a1 + 96 * v5 + 56), v14 == 0x7FFFFFFF))
  {
    unsigned int v15 = -1;
    int v16 = 0x7FFFFFFF;
    if (*((_DWORD *)v6 + 35) != -1 && *((_DWORD *)v6 + 36) != 0x7FFFFFFF) {
      goto LABEL_20;
    }
LABEL_15:
    unsigned int v18 = -1;
    goto LABEL_24;
  }
  long long v19 = v8;
  unsigned int v15 = v13 + *v8;
  int v11 = v14 + v19[1];
  int v16 = 0x7FFFFFFF;
  if (*((_DWORD *)v6 + 35) == -1 || *((_DWORD *)v6 + 36) == 0x7FFFFFFF) {
    goto LABEL_15;
  }
LABEL_20:
  unsigned int v18 = *((_DWORD *)v6 + 37);
  if (v18 == -1)
  {
LABEL_24:
    if (v15 >= v18) {
      goto LABEL_25;
    }
LABEL_29:
    v6 += 6;
    uint64_t v5 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 5) + 2;
    goto LABEL_30;
  }
  int v21 = *((_DWORD *)v6 + 38);
  if (v21 != 0x7FFFFFFF)
  {
    v18 += *((_DWORD *)v6 + 35);
    int v16 = v21 + *((_DWORD *)v6 + 36);
    if (v15 >= v18) {
      goto LABEL_25;
    }
    goto LABEL_29;
  }
  unsigned int v18 = -1;
  if (v15 != -1) {
    goto LABEL_29;
  }
LABEL_25:
  if (v18 >= v15 && v11 < v16) {
    goto LABEL_29;
  }
LABEL_30:
  int v22 = 0x7FFFFFFF;
  if (*((_DWORD *)v6 + 11) == -1 || *((_DWORD *)v6 + 12) == 0x7FFFFFFF) {
    goto LABEL_36;
  }
  unsigned int v24 = *((_DWORD *)v6 + 13);
  if (v24 == -1) {
    goto LABEL_37;
  }
  int v25 = *((_DWORD *)v6 + 14);
  if (v25 == 0x7FFFFFFF)
  {
LABEL_36:
    unsigned int v24 = -1;
LABEL_37:
    unsigned int v26 = -1;
    int v27 = 0x7FFFFFFF;
    if (*((_DWORD *)a4 + 11) == -1) {
      goto LABEL_45;
    }
    goto LABEL_38;
  }
  v24 += *((_DWORD *)v6 + 11);
  int v22 = v25 + *((_DWORD *)v6 + 12);
  unsigned int v26 = -1;
  int v27 = 0x7FFFFFFF;
  if (*((_DWORD *)a4 + 11) == -1) {
    goto LABEL_45;
  }
LABEL_38:
  if (*((_DWORD *)a4 + 12) != 0x7FFFFFFF)
  {
    unsigned int v26 = *((_DWORD *)a4 + 13);
    if (v26 != -1)
    {
      int v28 = *((_DWORD *)a4 + 14);
      if (v28 == 0x7FFFFFFF)
      {
        unsigned int v26 = -1;
      }
      else
      {
        v26 += *((_DWORD *)a4 + 11);
        int v27 = v28 + *((_DWORD *)a4 + 12);
      }
    }
  }
LABEL_45:
  if (v24 >= v26 && (v26 < v24 || v22 >= v27))
  {
    long long v70 = *a4;
    *(_OWORD *)long long v71 = a4[1];
    *(_OWORD *)&v71[12] = *(long long *)((char *)a4 + 28);
    unint64_t v29 = *(void *)((char *)a4 + 44);
    int v30 = *((_DWORD *)a4 + 13);
    int v31 = *((_DWORD *)a4 + 14);
    __n128 v68 = *(__n128 *)((char *)a4 + 60);
    long long v69 = *(long long *)((char *)a4 + 76);
    BOOL v34 = v29 == -1 || HIDWORD(v29) == 0x7FFFFFFF || v30 == -1 || v31 == 0x7FFFFFFF;
    unsigned int v35 = v30 + v29;
    int v36 = v31 + HIDWORD(v29);
    if (v34)
    {
      int v36 = 0x7FFFFFFF;
      unsigned int v35 = -1;
    }
    while (1)
    {
      unsigned int v38 = a4;
      a4 = v6;
      long long v39 = v6[1];
      *unsigned int v38 = *v6;
      v38[1] = v39;
      long long v40 = v6[2];
      long long v41 = v6[3];
      long long v42 = v6[4];
      *(_OWORD *)((char *)v38 + 76) = *(long long *)((char *)v6 + 76);
      v38[3] = v41;
      v38[4] = v42;
      v38[2] = v40;
      if (v4 < v5)
      {
LABEL_116:
        *a4 = v70;
        a4[1] = *(_OWORD *)v71;
        *(long long *)((char *)a4 + 28) = *(_OWORD *)&v71[12];
        *(void *)((char *)a4 + 44) = v29;
        *((_DWORD *)a4 + 13) = v30;
        *((_DWORD *)a4 + 14) = v31;
        __n128 result = v68;
        *(long long *)((char *)a4 + 60) = (__int128)v68;
        *(long long *)((char *)a4 + 76) = v69;
        return result;
      }
      uint64_t v43 = (2 * v5) | 1;
      uint64_t v6 = (long long *)(a1 + 96 * v43);
      uint64_t v44 = 2 * v5 + 2;
      if (v44 >= a3)
      {
LABEL_95:
        uint64_t v5 = v43;
        if (*((_DWORD *)v6 + 11) == -1 || *((_DWORD *)v6 + 12) == 0x7FFFFFFF) {
          goto LABEL_93;
        }
        goto LABEL_99;
      }
      uint64_t v45 = a1 + 96 * v43;
      int v46 = *(_DWORD *)(v45 + 44);
      int v47 = *(_DWORD *)(v45 + 48);
      unsigned int v48 = (_DWORD *)(v45 + 44);
      if (v46 == -1 || v47 == 0x7FFFFFFF)
      {
        unsigned int v50 = -1;
        int v51 = 0x7FFFFFFF;
        if (*((_DWORD *)v6 + 35) == -1 || *((_DWORD *)v6 + 36) == 0x7FFFFFFF)
        {
LABEL_74:
          unsigned int v53 = -1;
          int v54 = 0x7FFFFFFF;
          if (v50 != -1) {
            goto LABEL_110;
          }
          goto LABEL_86;
        }
      }
      else
      {
        int v55 = *(_DWORD *)(a1 + 96 * v43 + 52);
        int v51 = 0x7FFFFFFF;
        if (v55 == -1 || (int v56 = *(_DWORD *)(a1 + 96 * v43 + 56), v56 == 0x7FFFFFFF))
        {
          unsigned int v50 = -1;
          if (*((_DWORD *)v6 + 35) == -1 || *((_DWORD *)v6 + 36) == 0x7FFFFFFF) {
            goto LABEL_74;
          }
        }
        else
        {
          long long v64 = v48;
          unsigned int v50 = v55 + *v48;
          int v51 = v56 + v64[1];
          if (*((_DWORD *)v6 + 35) == -1 || *((_DWORD *)v6 + 36) == 0x7FFFFFFF) {
            goto LABEL_74;
          }
        }
      }
      unsigned int v53 = *((_DWORD *)v6 + 37);
      int v54 = 0x7FFFFFFF;
      if (v53 != -1)
      {
        int v58 = *((_DWORD *)v6 + 38);
        if (v58 != 0x7FFFFFFF)
        {
          v53 += *((_DWORD *)v6 + 35);
          int v54 = v58 + *((_DWORD *)v6 + 36);
          if (v50 < v53) {
            goto LABEL_110;
          }
          goto LABEL_86;
        }
        unsigned int v53 = -1;
      }
      if (v50 < v53) {
        goto LABEL_110;
      }
LABEL_86:
      if (v53 < v50) {
        goto LABEL_95;
      }
      uint64_t v5 = v43;
      if (v51 < v54)
      {
LABEL_110:
        v6 += 6;
        uint64_t v5 = v44;
        if (*((_DWORD *)v6 + 11) == -1 || *((_DWORD *)v6 + 12) == 0x7FFFFFFF) {
          goto LABEL_93;
        }
LABEL_99:
        unsigned int v37 = *((_DWORD *)v6 + 13);
        int v60 = 0x7FFFFFFF;
        if (v37 == -1) {
          goto LABEL_60;
        }
        int v62 = *((_DWORD *)v6 + 14);
        if (v62 == 0x7FFFFFFF)
        {
          unsigned int v37 = -1;
LABEL_60:
          if (v35 >= v37) {
            goto LABEL_61;
          }
        }
        else
        {
          unsigned int v63 = v37 + *((_DWORD *)v6 + 11);
          if (v63 < v35) {
            goto LABEL_116;
          }
          int v60 = v62 + *((_DWORD *)v6 + 12);
          if (v35 >= v63)
          {
LABEL_61:
            if (v60 < v36) {
              goto LABEL_116;
            }
          }
        }
      }
      else
      {
        if (*((_DWORD *)v6 + 11) != -1 && *((_DWORD *)v6 + 12) != 0x7FFFFFFF) {
          goto LABEL_99;
        }
LABEL_93:
        int v60 = 0x7FFFFFFF;
        if (v35 == -1) {
          goto LABEL_61;
        }
      }
    }
  }
  return result;
}

__n128 sub_FDA350(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v4 = 0;
    __n128 v37 = a1[2];
    __n128 v38 = a1[3];
    *(__n128 *)long long v39 = a1[4];
    *(__n128 *)&v39[16] = a1[5];
    uint64_t v5 = a1;
    __n128 v35 = *a1;
    __n128 v36 = a1[1];
    while (1)
    {
      int v10 = v5;
      uint64_t v11 = v4 + 1;
      v5 += 6 * v4 + 6;
      uint64_t v12 = 2 * v4;
      uint64_t v4 = (2 * v4) | 1;
      uint64_t v13 = v12 + 2;
      if (v13 >= a4) {
        goto LABEL_4;
      }
      int v14 = &v10[6 * v11];
      int v16 = v14[2].n128_i32[3];
      int v15 = v14[3].n128_i32[0];
      int v17 = &v14[2].n128_u32[3];
      if (v16 == -1 || v15 == 0x7FFFFFFF)
      {
        unsigned int v19 = -1;
        int v20 = 0x7FFFFFFF;
        if (v5[8].n128_u32[3] == -1 || v5[9].n128_u32[0] == 0x7FFFFFFF)
        {
LABEL_16:
          unsigned int v22 = -1;
          int v23 = 0x7FFFFFFF;
          if (v19 == -1) {
            goto LABEL_28;
          }
          goto LABEL_3;
        }
      }
      else
      {
        int v24 = v10[6 * v11 + 3].n128_i32[1];
        int v20 = 0x7FFFFFFF;
        if (v24 == -1 || (int v25 = v10[6 * v11 + 3].n128_i32[2], v25 == 0x7FFFFFFF))
        {
          unsigned int v19 = -1;
          if (v5[8].n128_u32[3] == -1 || v5[9].n128_u32[0] == 0x7FFFFFFF) {
            goto LABEL_16;
          }
        }
        else
        {
          unsigned int v19 = v24 + *v17;
          int v20 = v25 + v17[1];
          if (v5[8].n128_u32[3] == -1 || v5[9].n128_u32[0] == 0x7FFFFFFF) {
            goto LABEL_16;
          }
        }
      }
      unsigned int v22 = v5[9].n128_u32[1];
      int v23 = 0x7FFFFFFF;
      if (v22 == -1) {
        goto LABEL_27;
      }
      __int32 v27 = v5[9].n128_i32[2];
      if (v27 == 0x7FFFFFFF) {
        break;
      }
      v22 += v5[8].n128_u32[3];
      int v23 = v27 + v5[9].n128_u32[0];
      if (v19 >= v22)
      {
LABEL_28:
        if (v22 < v19 || v20 >= v23) {
          goto LABEL_4;
        }
      }
LABEL_3:
      v5 += 6;
      uint64_t v4 = v13;
LABEL_4:
      __n128 v6 = v5[1];
      *int v10 = *v5;
      v10[1] = v6;
      __n128 v7 = v5[2];
      __n128 v8 = v5[3];
      __n128 v9 = v5[4];
      *(__n128 *)((char *)v10 + 76) = *(__n128 *)((char *)v5 + 76);
      v10[3] = v8;
      v10[4] = v9;
      v10[2] = v7;
      if (v4 > (uint64_t)((unint64_t)(a4 - 2) >> 1))
      {
        unint64_t v29 = (__n128 *)(a2 - 96);
        if (v5 == (__n128 *)(a2 - 96))
        {
          *uint64_t v5 = v35;
          v5[1] = v36;
          __n128 result = v37;
          *(__n128 *)((char *)v5 + 76) = *(__n128 *)&v39[12];
          v5[3] = v38;
          v5[4] = *(__n128 *)v39;
          v5[2] = v37;
        }
        else
        {
          __n128 v30 = *(__n128 *)(a2 - 80);
          *uint64_t v5 = *v29;
          v5[1] = v30;
          __n128 v31 = *(__n128 *)(a2 - 64);
          __n128 v32 = *(__n128 *)(a2 - 48);
          __n128 v33 = *(__n128 *)(a2 - 32);
          *(__n128 *)((char *)v5 + 76) = *(__n128 *)(a2 - 20);
          v5[3] = v32;
          v5[4] = v33;
          v5[2] = v31;
          *(__n128 *)(a2 - 64) = v37;
          *(__n128 *)(a2 - 48) = v38;
          *(_OWORD *)(a2 - 32) = *(_OWORD *)v39;
          *(_OWORD *)(a2 - 20) = *(_OWORD *)&v39[12];
          *unint64_t v29 = v35;
          *(__n128 *)(a2 - 80) = v36;
          result.n128_u64[0] = sub_FDA578((uint64_t)a1, (uint64_t)&v5[6], a3, 0xAAAAAAAAAAAAAAABLL * (((char *)&v5[6] - (char *)a1) >> 5)).n128_u64[0];
        }
        return result;
      }
    }
    unsigned int v22 = -1;
LABEL_27:
    if (v19 >= v22) {
      goto LABEL_28;
    }
    goto LABEL_3;
  }
  return result;
}

__n128 sub_FDA578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 < 2) {
    return result;
  }
  unint64_t v5 = v4 >> 1;
  uint64_t v6 = a1 + 96 * (v4 >> 1);
  int v7 = 0x7FFFFFFF;
  BOOL v8 = *(_DWORD *)(v6 + 44) == -1 || *(_DWORD *)(v6 + 48) == 0x7FFFFFFF;
  if (v8
    || (int v9 = *(_DWORD *)(a1 + 96 * v5 + 52), v7 = 0x7FFFFFFF, v9 == -1)
    || (int v10 = *(_DWORD *)(a1 + 96 * v5 + 56), v10 == 0x7FFFFFFF))
  {
    unsigned int v11 = -1;
    unsigned int v12 = -1;
    int v13 = 0x7FFFFFFF;
    if (*(_DWORD *)(a2 - 52) == -1) {
      goto LABEL_13;
    }
  }
  else
  {
    unsigned int v11 = v9 + *(_DWORD *)(v6 + 44);
    int v7 = v10 + *(_DWORD *)(v6 + 48);
    unsigned int v12 = -1;
    int v13 = 0x7FFFFFFF;
    if (*(_DWORD *)(a2 - 52) == -1) {
      goto LABEL_13;
    }
  }
  if (*(_DWORD *)(a2 - 48) != 0x7FFFFFFF)
  {
    unsigned int v12 = *(_DWORD *)(a2 - 44);
    if (v12 != -1)
    {
      int v14 = *(_DWORD *)(a2 - 40);
      if (v14 != 0x7FFFFFFF)
      {
        v12 += *(_DWORD *)(a2 - 52);
        int v13 = v14 + *(_DWORD *)(a2 - 48);
        if (v11 >= v12) {
          goto LABEL_14;
        }
        goto LABEL_20;
      }
      unsigned int v12 = -1;
    }
  }
LABEL_13:
  if (v11 >= v12)
  {
LABEL_14:
    if (v12 < v11 || v7 >= v13) {
      return result;
    }
  }
LABEL_20:
  int v15 = (_OWORD *)(a2 - 96);
  long long v45 = *(_OWORD *)(a2 - 96);
  *(_OWORD *)int v46 = *(_OWORD *)(a2 - 80);
  *(_OWORD *)&unsigned char v46[12] = *(_OWORD *)(a2 - 68);
  unint64_t v16 = *(void *)(a2 - 52);
  int v17 = *(_DWORD *)(a2 - 44);
  int v18 = *(_DWORD *)(a2 - 40);
  __n128 v43 = *(__n128 *)(a2 - 36);
  long long v44 = *(_OWORD *)(a2 - 20);
  long long v19 = *(_OWORD *)(v6 + 76);
  long long v20 = *(_OWORD *)(v6 + 64);
  long long v21 = *(_OWORD *)(v6 + 32);
  v15[3] = *(_OWORD *)(v6 + 48);
  v15[4] = v20;
  *(_OWORD *)((char *)v15 + 76) = v19;
  v15[2] = v21;
  long long v22 = *(_OWORD *)(v6 + 16);
  *int v15 = *(_OWORD *)v6;
  v15[1] = v22;
  if (v4 >= 2)
  {
    BOOL v27 = v16 == -1 || HIDWORD(v16) == 0x7FFFFFFF || v17 == -1 || v18 == 0x7FFFFFFF;
    unsigned int v28 = v17 + v16;
    if (v27) {
      int v29 = 0x7FFFFFFF;
    }
    else {
      int v29 = v18 + HIDWORD(v16);
    }
    if (v27) {
      unsigned int v28 = -1;
    }
    while (1)
    {
      unint64_t v34 = v5 - 1;
      unint64_t v5 = (v5 - 1) >> 1;
      uint64_t v23 = a1 + 96 * v5;
      __n128 v35 = (uint64_t *)(v23 + 44);
      if (*(_DWORD *)(v23 + 44) == -1 || *(_DWORD *)(v23 + 48) == 0x7FFFFFFF) {
        break;
      }
      int v37 = *(_DWORD *)(a1 + 96 * v5 + 52);
      if (v37 == -1) {
        break;
      }
      int v38 = *(_DWORD *)(a1 + 96 * v5 + 56);
      if (v38 == 0x7FFFFFFF) {
        break;
      }
      uint64_t v39 = *v35;
      unsigned int v40 = v37 + *v35;
      if (v40 >= v28)
      {
        int v41 = v38 + HIDWORD(v39);
        if (v28 < v40 || v41 >= v29) {
          break;
        }
      }
      long long v30 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)uint64_t v6 = *(_OWORD *)v23;
      *(_OWORD *)(v6 + 16) = v30;
      long long v31 = *(_OWORD *)(v23 + 32);
      long long v32 = *(_OWORD *)(v23 + 48);
      long long v33 = *(_OWORD *)(v23 + 64);
      *(_OWORD *)(v6 + 76) = *(_OWORD *)(v23 + 76);
      *(_OWORD *)(v6 + 48) = v32;
      *(_OWORD *)(v6 + 64) = v33;
      *(_OWORD *)(v6 + 32) = v31;
      uint64_t v6 = a1 + 96 * v5;
      if (v34 <= 1) {
        goto LABEL_22;
      }
    }
  }
  uint64_t v23 = v6;
LABEL_22:
  *(_OWORD *)uint64_t v23 = v45;
  *(_OWORD *)(v23 + 16) = *(_OWORD *)v46;
  *(_OWORD *)(v23 + 28) = *(_OWORD *)&v46[12];
  *(void *)(v23 + 44) = v16;
  *(_DWORD *)(v23 + 52) = v17;
  *(_DWORD *)(v23 + 56) = v18;
  __n128 result = v43;
  *(__n128 *)(v23 + 60) = v43;
  *(_OWORD *)(v23 + 76) = v44;
  return result;
}

__n128 sub_FDA7BC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
__n128 sub_FDADD8(uint64_t a1, uint64_t a2)
{
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 5))
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v45 = 0x7FFFFFFF;
      if (*(_DWORD *)(a2 - 52) == -1 || *(_DWORD *)(a2 - 48) == 0x7FFFFFFF) {
        goto LABEL_83;
      }
      unsigned int v47 = *(_DWORD *)(a2 - 44);
      if (v47 == -1) {
        goto LABEL_84;
      }
      int v48 = *(_DWORD *)(a2 - 40);
      if (v48 == 0x7FFFFFFF)
      {
LABEL_83:
        unsigned int v47 = -1;
LABEL_84:
        unsigned int v49 = -1;
        int v50 = 0x7FFFFFFF;
        if (*(_DWORD *)(a1 + 44) == -1) {
          goto LABEL_95;
        }
      }
      else
      {
        v47 += *(_DWORD *)(a2 - 52);
        int v45 = v48 + *(_DWORD *)(a2 - 48);
        unsigned int v49 = -1;
        int v50 = 0x7FFFFFFF;
        if (*(_DWORD *)(a1 + 44) == -1) {
          goto LABEL_95;
        }
      }
      if (*(_DWORD *)(a1 + 48) != 0x7FFFFFFF)
      {
        unsigned int v49 = *(_DWORD *)(a1 + 52);
        if (v49 != -1)
        {
          int v51 = *(_DWORD *)(a1 + 56);
          if (v51 != 0x7FFFFFFF)
          {
            v49 += *(_DWORD *)(a1 + 44);
            int v50 = v51 + *(_DWORD *)(a1 + 48);
            if (v47 < v49) {
              goto LABEL_100;
            }
LABEL_96:
            if (v49 < v47 || v45 >= v50) {
              return result;
            }
LABEL_100:
            long long v52 = (__n128 *)(a2 - 96);
            __n128 v63 = *(__n128 *)(a1 + 32);
            __n128 v64 = *(__n128 *)(a1 + 48);
            *(_OWORD *)long long v65 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)&v65[16] = *(_OWORD *)(a1 + 80);
            __n128 v60 = *(__n128 *)a1;
            __n128 v62 = *(__n128 *)(a1 + 16);
            long long v53 = *(_OWORD *)(a2 - 80);
            *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
            *(_OWORD *)(a1 + 16) = v53;
            long long v55 = *(_OWORD *)(a2 - 48);
            long long v54 = *(_OWORD *)(a2 - 32);
            long long v56 = *(_OWORD *)(a2 - 64);
            *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 - 20);
            *(_OWORD *)(a1 + 48) = v55;
            *(_OWORD *)(a1 + 64) = v54;
            *(_OWORD *)(a1 + 32) = v56;
            v52[4] = *(__n128 *)v65;
            *(__n128 *)((char *)v52 + 76) = *(__n128 *)&v65[12];
            v52[2] = v63;
            v52[3] = v64;
            __n128 result = v60;
            *long long v52 = v60;
            v52[1] = v62;
            return result;
          }
          unsigned int v49 = -1;
        }
      }
LABEL_95:
      if (v47 < v49) {
        goto LABEL_100;
      }
      goto LABEL_96;
    case 3uLL:
      sub_FD8340((long long *)a1, (long long *)(a1 + 96), (long long *)(a2 - 96));
      return result;
    case 4uLL:
      result.n128_u64[0] = sub_FD9638(a1, a1 + 96, a1 + 192, a2 - 96).n128_u64[0];
      return result;
    case 5uLL:
      result.n128_u64[0] = sub_FD9A08(a1, a1 + 96, a1 + 192, a1 + 288, a2 - 96).n128_u64[0];
      return result;
    default:
      uint64_t v4 = a1 + 192;
      sub_FD8340((long long *)a1, (long long *)(a1 + 96), (long long *)(a1 + 192));
      uint64_t v6 = a1 + 288;
      if (a1 + 288 == a2) {
        return result;
      }
      uint64_t v7 = 0;
      int v8 = 0;
      while (2)
      {
        if (*(_DWORD *)(v6 + 44) == -1 || *(_DWORD *)(v6 + 48) == 0x7FFFFFFF)
        {
          unsigned int v11 = -1;
          int v12 = 0x7FFFFFFF;
          if (*(_DWORD *)(v4 + 44) == -1 || *(_DWORD *)(v4 + 48) == 0x7FFFFFFF) {
            goto LABEL_30;
          }
        }
        else
        {
          unsigned int v11 = *(_DWORD *)(v6 + 52);
          int v12 = 0x7FFFFFFF;
          if (v11 == -1) {
            goto LABEL_25;
          }
          int v17 = *(_DWORD *)(v6 + 56);
          if (v17 == 0x7FFFFFFF)
          {
            unsigned int v11 = -1;
LABEL_25:
            if (*(_DWORD *)(v4 + 44) != -1 && *(_DWORD *)(v4 + 48) != 0x7FFFFFFF) {
              goto LABEL_17;
            }
LABEL_30:
            unsigned int v14 = -1;
            int v15 = 0x7FFFFFFF;
            if (v11 != -1) {
              goto LABEL_35;
            }
            goto LABEL_33;
          }
          v11 += *(_DWORD *)(v6 + 44);
          int v12 = v17 + *(_DWORD *)(v6 + 48);
          if (*(_DWORD *)(v4 + 44) == -1 || *(_DWORD *)(v4 + 48) == 0x7FFFFFFF) {
            goto LABEL_30;
          }
        }
LABEL_17:
        unsigned int v14 = *(_DWORD *)(v4 + 52);
        int v15 = 0x7FFFFFFF;
        if (v14 == -1) {
          goto LABEL_20;
        }
        int v16 = *(_DWORD *)(v4 + 56);
        if (v16 == 0x7FFFFFFF)
        {
          unsigned int v14 = -1;
LABEL_20:
          if (v11 < v14) {
            goto LABEL_35;
          }
          goto LABEL_33;
        }
        v14 += *(_DWORD *)(v4 + 44);
        int v15 = v16 + *(_DWORD *)(v4 + 48);
        if (v11 < v14) {
          goto LABEL_35;
        }
LABEL_33:
        if (v14 < v11 || v12 >= v15) {
          goto LABEL_7;
        }
LABEL_35:
        *(_OWORD *)&v61[12] = *(_OWORD *)(v6 + 28);
        long long v59 = *(_OWORD *)v6;
        *(_OWORD *)long long v61 = *(_OWORD *)(v6 + 16);
        unint64_t v19 = *(void *)(v6 + 44);
        int v20 = *(_DWORD *)(v6 + 52);
        int v21 = *(_DWORD *)(v6 + 56);
        __n128 v57 = *(__n128 *)(v6 + 60);
        long long v58 = *(_OWORD *)(v6 + 76);
        long long v22 = *(_OWORD *)(v4 + 16);
        *(_OWORD *)uint64_t v6 = *(_OWORD *)v4;
        *(_OWORD *)(v6 + 16) = v22;
        long long v24 = *(_OWORD *)(v4 + 32);
        long long v23 = *(_OWORD *)(v4 + 48);
        *(_OWORD *)(v6 + 76) = *(_OWORD *)(v4 + 76);
        long long v25 = *(_OWORD *)(v4 + 64);
        *(_OWORD *)(v6 + 48) = v23;
        *(_OWORD *)(v6 + 64) = v25;
        uint64_t v9 = a1;
        *(_OWORD *)(v6 + 32) = v24;
        if (v4 == a1) {
          goto LABEL_6;
        }
        BOOL v28 = v19 == -1 || HIDWORD(v19) == 0x7FFFFFFF || v20 == -1 || v21 == 0x7FFFFFFF;
        char v29 = v28;
        unsigned int v30 = v20 + v19;
        if (v28) {
          unsigned int v30 = -1;
        }
        char v31 = v29 ^ 1;
        uint64_t v32 = v7;
        while (1)
        {
          int v37 = (_DWORD *)(a1 + v32);
          if (*(_DWORD *)(a1 + v32 + 140) == -1 || *(_DWORD *)(a1 + v32 + 144) == 0x7FFFFFFF)
          {
            unsigned int v39 = -1;
            int v40 = 0x7FFFFFFF;
            if (v30 == -1) {
              goto LABEL_64;
            }
            goto LABEL_52;
          }
          unsigned int v39 = v37[37];
          int v40 = 0x7FFFFFFF;
          if (v39 != -1) {
            break;
          }
LABEL_63:
          if (v30 >= v39) {
            goto LABEL_64;
          }
LABEL_52:
          char v33 = v37 + 48;
          char v34 = v37 + 24;
          long long v35 = v34[3];
          v33[2] = v34[2];
          v33[3] = v35;
          v33[4] = v34[4];
          *(_OWORD *)((char *)v33 + 76) = *(_OWORD *)((char *)v34 + 76);
          long long v36 = v34[1];
          _OWORD *v33 = *v34;
          v33[1] = v36;
          v32 -= 96;
          if (v32 == -192)
          {
            uint64_t v9 = a1;
            goto LABEL_6;
          }
        }
        int v41 = *(_DWORD *)(a1 + v32 + 152);
        if (v41 == 0x7FFFFFFF)
        {
          unsigned int v39 = -1;
          goto LABEL_63;
        }
        v39 += v37[35];
        int v40 = v41 + v37[36];
        if (v30 < v39) {
          goto LABEL_52;
        }
LABEL_64:
        BOOL v42 = v39 >= v30;
        char v43 = v31 ^ 1;
        if (!v42) {
          char v43 = 1;
        }
        if ((v43 & 1) == 0 && v21 + HIDWORD(v19) < v40) {
          goto LABEL_52;
        }
        uint64_t v9 = a1 + v32 + 192;
LABEL_6:
        *(_OWORD *)uint64_t v9 = v59;
        *(_OWORD *)(v9 + 16) = *(_OWORD *)v61;
        *(_OWORD *)(v9 + 28) = *(_OWORD *)&v61[12];
        __n128 result = v57;
        *(__n128 *)(v9 + 60) = v57;
        *(void *)(v9 + 44) = v19;
        *(_DWORD *)(v9 + 52) = v20;
        *(_DWORD *)(v9 + 56) = v21;
        ++v8;
        *(_OWORD *)(v9 + 76) = v58;
        if (v8 != 8)
        {
LABEL_7:
          uint64_t v4 = v6;
          v7 += 96;
          v6 += 96;
          if (v6 == a2) {
            return result;
          }
          continue;
        }
        return result;
      }
  }
}

unint64_t sub_FDB2F0(uint64_t a1, unsigned int *a2, char a3)
{
  sub_2954EC(a1, (((unint64_t)(a2[1] & 0x10000000) << 20) | ((unint64_t)(unsigned __int16)a2[1] << 32) | *a2) ^ 0x1000000000000, (uint64_t)v10);
  uint64_t v4 = __p;
  if (__p == v12)
  {
    unint64_t v6 = 0xFFFFFFFF00000000;
    uint64_t v7 = 0xFFFFFFFFLL;
    if (!__p) {
      return v6 | v7;
    }
    goto LABEL_8;
  }
  if (a3) {
    unint64_t v5 = sub_2E40A4((uint64_t)v10);
  }
  else {
    unint64_t v5 = sub_2E1AA4((uint64_t)v10);
  }
  unsigned int v8 = v5;
  unint64_t v6 = v5 & 0xFFFFFFFF00000000;
  uint64_t v4 = __p;
  uint64_t v7 = v8;
  if (__p)
  {
LABEL_8:
    int v12 = v4;
    operator delete(v4);
  }
  return v6 | v7;
}

void sub_FDB3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_FDB3C0@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = 0;
  uint64_t v5 = *a2;
  unsigned int v6 = a2[1];
  unint64_t v7 = 0x2127599BF4325C37
     * ((((v5 << 32) + (int)(16 * v6)) | (v6 >> 29) & 2 | (v6 >> 31) | (v6 >> 27) & 4 | (v6 >> 25) & 8) ^ ((unint64_t)((v5 << 32) + (int)(16 * v6)) >> 23));
  unint64_t v8 = (v7 ^ ~(v7 >> 47)) + ((v7 ^ (v7 >> 47)) << 21);
  unint64_t v9 = 21 * ((265 * (v8 ^ (v8 >> 24))) ^ ((265 * (v8 ^ (v8 >> 24))) >> 14));
  unint64_t v10 = 2147483649u * (v9 ^ (v9 >> 28));
  unsigned int v11 = (uint64_t *)(a1
                  + 48
                  * (((((unsigned __int16)(v9 ^ (v9 >> 28)) >> 8) ^ ((-2147483647
                                                                                     * (v9 ^ (v9 >> 28))) >> 16)) ^ ((-2147483647 * (v9 ^ (v9 >> 28))) >> 24)) & 0xF));
  unint64_t v12 = v10 >> 7;
  uint64_t v13 = v11[3];
  while (1)
  {
    unint64_t v14 = v12 & v13;
    uint64_t v15 = *(void *)(*v11 + v14);
    unint64_t v16 = ((v15 ^ (0x101010101010101 * (v10 & 0x7F))) - 0x101010101010101) & ~(v15 ^ (0x101010101010101
                                                                                        * (v10 & 0x7F))) & 0x8080808080808080;
    if (v16) {
      break;
    }
LABEL_8:
    if ((v15 & (~v15 << 6) & 0x8080808080808080) != 0)
    {
      unint64_t result = sub_FDB534(v11, v10);
      *(void *)a3 = v11;
      *(void *)(a3 + 8) = result;
      *(unsigned char *)(a3 + 16) = 1;
      return result;
    }
    v4 += 8;
    unint64_t v12 = v4 + v14;
  }
  while (1)
  {
    unint64_t result = (v14 + (__clz(__rbit64(v16)) >> 3)) & v13;
    int v18 = (int *)(v11[1] + 104 * result);
    int v20 = *v18;
    int v19 = v18[1];
    if (v20 == v5 && v19 == v6) {
      break;
    }
    v16 &= v16 - 1;
    if (!v16) {
      goto LABEL_8;
    }
  }
  *(void *)a3 = v11;
  *(void *)(a3 + 8) = result;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

unint64_t sub_FDB534(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = *a1;
  unint64_t v6 = v4 & (a2 >> 7);
  unint64_t v7 = *(void *)(*a1 + v6) & (~*(void *)(*a1 + v6) << 7) & 0x8080808080808080;
  if (!v7)
  {
    uint64_t v8 = 8;
    do
    {
      unint64_t v6 = (v6 + v8) & v4;
      v8 += 8;
      unint64_t v7 = *(void *)(v5 + v6) & (~*(void *)(v5 + v6) << 7) & 0x8080808080808080;
    }
    while (!v7);
  }
  unint64_t result = (v6 + (__clz(__rbit64(v7)) >> 3)) & v4;
  uint64_t v10 = a1[5];
  if (!v10)
  {
    if (*(unsigned __int8 *)(v5 + result) == 254)
    {
      uint64_t v10 = 0;
    }
    else
    {
      sub_FDB62C((uint64_t)a1);
      unint64_t result = sub_2D7FC4(a1, a2);
      uint64_t v5 = *a1;
      uint64_t v10 = a1[5];
    }
  }
  ++a1[2];
  a1[5] = v10 - (*(unsigned __int8 *)(v5 + result) == 128);
  *(unsigned char *)(v5 + result) = a2 & 0x7F;
  *(unsigned char *)((a1[3] & (result - 8)) + (a1[3] & 7) + *a1 + 1) = a2 & 0x7F;
  return result;
}

void sub_FDB62C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (!v1)
  {
    unint64_t v2 = (unsigned char *)(&def_332C + 1);
    goto LABEL_4;
  }
  if (*(void *)(a1 + 16) > (v1 - (v1 >> 3)) >> 1)
  {
    unint64_t v2 = (char *)((2 * v1) | 1);
LABEL_4:
    sub_FDB65C((char **)a1, v2);
    return;
  }
  sub_FDB878(a1);
}

void sub_FDB65C(char **a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[3];
  unint64_t v7 = ((unint64_t)a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = (char *)operator new(v7 + 104 * (void)a2);
  *a1 = v8;
  a1[1] = &v8[v7];
  memset(v8, 128, (size_t)(a2 + 8));
  a2[(void)v8] = -1;
  uint64_t v9 = (uint64_t)&a2[-((unint64_t)a2 >> 3)];
  if (a2 == (unsigned char *)dword_4 + 3) {
    uint64_t v9 = 6;
  }
  a1[5] = (char *)(v9 - (void)a1[2]);
  a1[3] = a2;
  if (v6)
  {
    for (unint64_t i = 0; i != v6; ++i)
    {
      if ((i[(void)v4] & 0x80000000) == 0)
      {
        int v19 = &v5[104 * (void)i];
        unsigned int v20 = *((_DWORD *)v19 + 1);
        unint64_t v21 = ((unint64_t)*(unsigned int *)v19 << 32) + (int)(16 * v20);
        unint64_t v22 = 0x2127599BF4325C37
            * ((v21 | (v20 >> 29) & 2 | (v20 >> 31) | (v20 >> 27) & 4 | (v20 >> 25) & 8) ^ (v21 >> 23));
        unint64_t v23 = (v22 ^ ~(v22 >> 47)) + ((v22 ^ (v22 >> 47)) << 21);
        unint64_t v24 = 21 * ((265 * (v23 ^ (v23 >> 24))) ^ ((265 * (v23 ^ (v23 >> 24))) >> 14));
        unint64_t v25 = 2147483649u * (v24 ^ (v24 >> 28));
        unsigned int v26 = a1[3];
        int v27 = *a1;
        unint64_t v28 = (unint64_t)v26 & (v25 >> 7);
        unint64_t v29 = *(void *)&(*a1)[v28] & (~*(void *)&(*a1)[v28] << 7) & 0x8080808080808080;
        if (!v29)
        {
          uint64_t v30 = 8;
          do
          {
            unint64_t v28 = (v28 + v30) & (unint64_t)v26;
            v30 += 8;
            unint64_t v29 = *(void *)&v27[v28] & (~*(void *)&v27[v28] << 7) & 0x8080808080808080;
          }
          while (!v29);
        }
        unint64_t v11 = (v28 + (__clz(__rbit64(v29)) >> 3)) & (unint64_t)v26;
        char v12 = v25 & 0x7F;
        v27[v11] = v12;
        (*a1)[((unint64_t)a1[3] & 7) + 1 + ((v11 - 8) & (unint64_t)a1[3])] = v12;
        uint64_t v13 = (uint64_t)&a1[1][104 * v11];
        long long v14 = *(_OWORD *)v19;
        long long v15 = *((_OWORD *)v19 + 2);
        *(_OWORD *)(v13 + 16) = *((_OWORD *)v19 + 1);
        *(_OWORD *)(v13 + 32) = v15;
        *(_OWORD *)uint64_t v13 = v14;
        long long v16 = *((_OWORD *)v19 + 3);
        long long v17 = *((_OWORD *)v19 + 4);
        long long v18 = *((_OWORD *)v19 + 5);
        *(void *)(v13 + 96) = *((void *)v19 + 12);
        *(_OWORD *)(v13 + 64) = v17;
        *(_OWORD *)(v13 + 80) = v18;
        *(_OWORD *)(v13 + 48) = v16;
      }
    }
    operator delete(v4);
  }
}

uint64_t sub_FDB878(uint64_t result)
{
  unint64_t v1 = *(int8x16_t **)result;
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v3 = *(void *)result + v2;
  if (v3 + 1 != *(void *)result)
  {
    unint64_t v4 = v2 - 7;
    uint64_t v5 = *(unint64_t **)result;
    if (v4 < 0x18) {
      goto LABEL_28;
    }
    uint64_t v6 = (v4 >> 3) + 1;
    uint64_t v5 = (unint64_t *)v1 + (v6 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v7 = v1 + 1;
    v8.i64[0] = 0x8080808080808080;
    v8.i64[1] = 0x8080808080808080;
    v9.i64[0] = 0xFEFEFEFEFEFEFEFELL;
    v9.i64[1] = 0xFEFEFEFEFEFEFEFELL;
    uint64_t v10 = v6 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v11 = vandq_s8(v7[-1], v8);
      int8x16_t v12 = vandq_s8(*v7, v8);
      v7[-1] = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v11), (uint64x2_t)v11, 7uLL), v9);
      int8x16_t *v7 = vandq_s8((int8x16_t)vsraq_n_u64((uint64x2_t)vmvnq_s8(v12), (uint64x2_t)v12, 7uLL), v9);
      v7 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v6 != (v6 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_28:
      do
      {
        *uint64_t v5 = (~(*v5 & 0x8080808080808080) + ((*v5 & 0x8080808080808080) >> 7)) & 0xFEFEFEFEFEFEFEFELL;
        ++v5;
      }
      while (v5 != (unint64_t *)(v3 + 1));
    }
  }
  *(void *)(v3 + 1) = v1->i64[0];
  *(unsigned char *)uint64_t v3 = -1;
  uint64_t v13 = *(void *)(result + 24);
  if (v13)
  {
    for (unint64_t i = 0; i != v13; ++i)
    {
      long long v17 = *(int8x16_t **)result;
      if (*(unsigned __int8 *)(*(void *)result + i) == 254)
      {
        long long v18 = (unsigned int *)(*(void *)(result + 8) + 104 * i);
        uint64_t v19 = *v18;
        LODWORD(v18) = v18[1];
        unint64_t v20 = 0x2127599BF4325C37
            * ((((v19 << 32) + 16 * (int)v18) | (v18 >> 29) & 2 | (v18 >> 31) | (v18 >> 27) & 4 | (v18 >> 25) & 8) ^ ((unint64_t)((v19 << 32) + 16 * (int)v18) >> 23));
        unint64_t v21 = (v20 ^ ~(v20 >> 47)) + ((v20 ^ (v20 >> 47)) << 21);
        unint64_t v22 = 21 * ((265 * (v21 ^ (v21 >> 24))) ^ ((265 * (v21 ^ (v21 >> 24))) >> 14));
        unint64_t v23 = 2147483649u * (v22 ^ (v22 >> 28));
        unint64_t v24 = v13 & (v23 >> 7);
        unint64_t v25 = *(uint64_t *)((unsigned char *)v17->i64 + v24) & (~*(uint64_t *)((char *)v17->i64 + v24) << 7) & 0x8080808080808080;
        if (v25)
        {
          unint64_t v15 = v13 & (v23 >> 7);
        }
        else
        {
          uint64_t v26 = 8;
          unint64_t v15 = v13 & (v23 >> 7);
          do
          {
            unint64_t v15 = (v15 + v26) & v13;
            v26 += 8;
            unint64_t v25 = *(uint64_t *)((unsigned char *)v17->i64 + v15) & (~*(uint64_t *)((char *)v17->i64 + v15) << 7) & 0x8080808080808080;
          }
          while (!v25);
        }
        unint64_t v16 = (v15 + (__clz(__rbit64(v25)) >> 3)) & v13;
        if ((((v16 - v24) ^ (i - v24)) & v13) > 7)
        {
          int v27 = v17->u8[v16];
          v17->i8[v16] = v23 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (v16 - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v23 & 0x7F;
          uint64_t v28 = *(void *)(result + 8);
          if (v27 == 128)
          {
            uint64_t v29 = v28 + 104 * v16;
            uint64_t v30 = (long long *)(v28 + 104 * i);
            long long v31 = *v30;
            long long v32 = v30[2];
            *(_OWORD *)(v29 + 16) = v30[1];
            *(_OWORD *)(v29 + 32) = v32;
            *(_OWORD *)uint64_t v29 = v31;
            long long v33 = v30[3];
            long long v34 = v30[4];
            long long v35 = v30[5];
            *(void *)(v29 + 96) = *((void *)v30 + 12);
            *(_OWORD *)(v29 + 64) = v34;
            *(_OWORD *)(v29 + 80) = v35;
            *(_OWORD *)(v29 + 48) = v33;
            *(unsigned char *)(*(void *)result + i) = 0x80;
            *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = 0x80;
          }
          else
          {
            long long v36 = (long long *)(v28 + 104 * i);
            long long v51 = v36[4];
            long long v52 = v36[5];
            uint64_t v53 = *((void *)v36 + 12);
            long long v47 = *v36;
            long long v48 = v36[1];
            long long v49 = v36[2];
            long long v50 = v36[3];
            int v37 = (long long *)(v28 + 104 * v16);
            long long v39 = v37[1];
            long long v38 = v37[2];
            *long long v36 = *v37;
            v36[1] = v39;
            v36[2] = v38;
            long long v41 = v37[4];
            long long v40 = v37[5];
            long long v42 = v37[3];
            *((void *)v36 + 12) = *((void *)v37 + 12);
            v36[4] = v41;
            v36[5] = v40;
            v36[3] = v42;
            uint64_t v43 = *(void *)(result + 8) + 104 * v16;
            *(_OWORD *)uint64_t v43 = v47;
            *(_OWORD *)(v43 + 16) = v48;
            *(void *)(v43 + 96) = v53;
            *(_OWORD *)(v43 + 64) = v51;
            *(_OWORD *)(v43 + 80) = v52;
            *(_OWORD *)(v43 + 32) = v49;
            *(_OWORD *)(v43 + 48) = v50;
            --i;
          }
        }
        else
        {
          v17->i8[i] = v23 & 0x7F;
          *(unsigned char *)((*(void *)(result + 24) & (i - 8)) + (*(void *)(result + 24) & 7) + *(void *)result + 1) = v23 & 0x7F;
        }
      }
      uint64_t v13 = *(void *)(result + 24);
    }
    uint64_t v44 = i - (i >> 3);
    BOOL v45 = i == 7;
    uint64_t v46 = 6;
    if (!v45) {
      uint64_t v46 = v44;
    }
  }
  else
  {
    uint64_t v46 = 0;
  }
  *(void *)(result + 40) = v46 - *(void *)(result + 16);
  return result;
}

__n128 sub_FDBC04(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
__n128 sub_FDC220(uint64_t a1, uint64_t a2)
{
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 5))
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v45 = 0x7FFFFFFF;
      if (*(_DWORD *)(a2 - 52) == -1 || *(_DWORD *)(a2 - 48) == 0x7FFFFFFF) {
        goto LABEL_83;
      }
      unsigned int v47 = *(_DWORD *)(a2 - 44);
      if (v47 == -1) {
        goto LABEL_84;
      }
      int v48 = *(_DWORD *)(a2 - 40);
      if (v48 == 0x7FFFFFFF)
      {
LABEL_83:
        unsigned int v47 = -1;
LABEL_84:
        unsigned int v49 = -1;
        int v50 = 0x7FFFFFFF;
        if (*(_DWORD *)(a1 + 44) == -1) {
          goto LABEL_95;
        }
      }
      else
      {
        v47 += *(_DWORD *)(a2 - 52);
        int v45 = v48 + *(_DWORD *)(a2 - 48);
        unsigned int v49 = -1;
        int v50 = 0x7FFFFFFF;
        if (*(_DWORD *)(a1 + 44) == -1) {
          goto LABEL_95;
        }
      }
      if (*(_DWORD *)(a1 + 48) != 0x7FFFFFFF)
      {
        unsigned int v49 = *(_DWORD *)(a1 + 52);
        if (v49 != -1)
        {
          int v51 = *(_DWORD *)(a1 + 56);
          if (v51 != 0x7FFFFFFF)
          {
            v49 += *(_DWORD *)(a1 + 44);
            int v50 = v51 + *(_DWORD *)(a1 + 48);
            if (v47 < v49) {
              goto LABEL_100;
            }
LABEL_96:
            if (v49 < v47 || v45 >= v50) {
              return result;
            }
LABEL_100:
            long long v52 = (__n128 *)(a2 - 96);
            __n128 v63 = *(__n128 *)(a1 + 32);
            __n128 v64 = *(__n128 *)(a1 + 48);
            *(_OWORD *)long long v65 = *(_OWORD *)(a1 + 64);
            *(_OWORD *)&v65[16] = *(_OWORD *)(a1 + 80);
            __n128 v60 = *(__n128 *)a1;
            __n128 v62 = *(__n128 *)(a1 + 16);
            long long v53 = *(_OWORD *)(a2 - 80);
            *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
            *(_OWORD *)(a1 + 16) = v53;
            long long v55 = *(_OWORD *)(a2 - 48);
            long long v54 = *(_OWORD *)(a2 - 32);
            long long v56 = *(_OWORD *)(a2 - 64);
            *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 - 20);
            *(_OWORD *)(a1 + 48) = v55;
            *(_OWORD *)(a1 + 64) = v54;
            *(_OWORD *)(a1 + 32) = v56;
            v52[4] = *(__n128 *)v65;
            *(__n128 *)((char *)v52 + 76) = *(__n128 *)&v65[12];
            v52[2] = v63;
            v52[3] = v64;
            __n128 result = v60;
            *long long v52 = v60;
            v52[1] = v62;
            return result;
          }
          unsigned int v49 = -1;
        }
      }
LABEL_95:
      if (v47 < v49) {
        goto LABEL_100;
      }
      goto LABEL_96;
    case 3uLL:
      sub_FD8340((long long *)a1, (long long *)(a1 + 96), (long long *)(a2 - 96));
      return result;
    case 4uLL:
      result.n128_u64[0] = sub_FD9638(a1, a1 + 96, a1 + 192, a2 - 96).n128_u64[0];
      return result;
    case 5uLL:
      result.n128_u64[0] = sub_FD9A08(a1, a1 + 96, a1 + 192, a1 + 288, a2 - 96).n128_u64[0];
      return result;
    default:
      uint64_t v4 = a1 + 192;
      sub_FD8340((long long *)a1, (long long *)(a1 + 96), (long long *)(a1 + 192));
      uint64_t v6 = a1 + 288;
      if (a1 + 288 == a2) {
        return result;
      }
      uint64_t v7 = 0;
      int v8 = 0;
      while (2)
      {
        if (*(_DWORD *)(v6 + 44) == -1 || *(_DWORD *)(v6 + 48) == 0x7FFFFFFF)
        {
          unsigned int v11 = -1;
          int v12 = 0x7FFFFFFF;
          if (*(_DWORD *)(v4 + 44) == -1 || *(_DWORD *)(v4 + 48) == 0x7FFFFFFF) {
            goto LABEL_30;
          }
        }
        else
        {
          unsigned int v11 = *(_DWORD *)(v6 + 52);
          int v12 = 0x7FFFFFFF;
          if (v11 == -1) {
            goto LABEL_25;
          }
          int v17 = *(_DWORD *)(v6 + 56);
          if (v17 == 0x7FFFFFFF)
          {
            unsigned int v11 = -1;
LABEL_25:
            if (*(_DWORD *)(v4 + 44) != -1 && *(_DWORD *)(v4 + 48) != 0x7FFFFFFF) {
              goto LABEL_17;
            }
LABEL_30:
            unsigned int v14 = -1;
            int v15 = 0x7FFFFFFF;
            if (v11 != -1) {
              goto LABEL_35;
            }
            goto LABEL_33;
          }
          v11 += *(_DWORD *)(v6 + 44);
          int v12 = v17 + *(_DWORD *)(v6 + 48);
          if (*(_DWORD *)(v4 + 44) == -1 || *(_DWORD *)(v4 + 48) == 0x7FFFFFFF) {
            goto LABEL_30;
          }
        }
LABEL_17:
        unsigned int v14 = *(_DWORD *)(v4 + 52);
        int v15 = 0x7FFFFFFF;
        if (v14 == -1) {
          goto LABEL_20;
        }
        int v16 = *(_DWORD *)(v4 + 56);
        if (v16 == 0x7FFFFFFF)
        {
          unsigned int v14 = -1;
LABEL_20:
          if (v11 < v14) {
            goto LABEL_35;
          }
          goto LABEL_33;
        }
        v14 += *(_DWORD *)(v4 + 44);
        int v15 = v16 + *(_DWORD *)(v4 + 48);
        if (v11 < v14) {
          goto LABEL_35;
        }
LABEL_33:
        if (v14 < v11 || v12 >= v15) {
          goto LABEL_7;
        }
LABEL_35:
        *(_OWORD *)&v61[12] = *(_OWORD *)(v6 + 28);
        long long v59 = *(_OWORD *)v6;
        *(_OWORD *)long long v61 = *(_OWORD *)(v6 + 16);
        unint64_t v19 = *(void *)(v6 + 44);
        int v20 = *(_DWORD *)(v6 + 52);
        int v21 = *(_DWORD *)(v6 + 56);
        __n128 v57 = *(__n128 *)(v6 + 60);
        long long v58 = *(_OWORD *)(v6 + 76);
        long long v22 = *(_OWORD *)(v4 + 16);
        *(_OWORD *)uint64_t v6 = *(_OWORD *)v4;
        *(_OWORD *)(v6 + 16) = v22;
        long long v24 = *(_OWORD *)(v4 + 32);
        long long v23 = *(_OWORD *)(v4 + 48);
        *(_OWORD *)(v6 + 76) = *(_OWORD *)(v4 + 76);
        long long v25 = *(_OWORD *)(v4 + 64);
        *(_OWORD *)(v6 + 48) = v23;
        *(_OWORD *)(v6 + 64) = v25;
        uint64_t v9 = a1;
        *(_OWORD *)(v6 + 32) = v24;
        if (v4 == a1) {
          goto LABEL_6;
        }
        BOOL v28 = v19 == -1 || HIDWORD(v19) == 0x7FFFFFFF || v20 == -1 || v21 == 0x7FFFFFFF;
        char v29 = v28;
        unsigned int v30 = v20 + v19;
        if (v28) {
          unsigned int v30 = -1;
        }
        char v31 = v29 ^ 1;
        uint64_t v32 = v7;
        while (1)
        {
          int v37 = (_DWORD *)(a1 + v32);
          if (*(_DWORD *)(a1 + v32 + 140) == -1 || *(_DWORD *)(a1 + v32 + 144) == 0x7FFFFFFF)
          {
            unsigned int v39 = -1;
            int v40 = 0x7FFFFFFF;
            if (v30 == -1) {
              goto LABEL_64;
            }
            goto LABEL_52;
          }
          unsigned int v39 = v37[37];
          int v40 = 0x7FFFFFFF;
          if (v39 != -1) {
            break;
          }
LABEL_63:
          if (v30 >= v39) {
            goto LABEL_64;
          }
LABEL_52:
          char v33 = v37 + 48;
          char v34 = v37 + 24;
          long long v35 = v34[3];
          v33[2] = v34[2];
          v33[3] = v35;
          v33[4] = v34[4];
          *(_OWORD *)((char *)v33 + 76) = *(_OWORD *)((char *)v34 + 76);
          long long v36 = v34[1];
          _OWORD *v33 = *v34;
          v33[1] = v36;
          v32 -= 96;
          if (v32 == -192)
          {
            uint64_t v9 = a1;
            goto LABEL_6;
          }
        }
        int v41 = *(_DWORD *)(a1 + v32 + 152);
        if (v41 == 0x7FFFFFFF)
        {
          unsigned int v39 = -1;
          goto LABEL_63;
        }
        v39 += v37[35];
        int v40 = v41 + v37[36];
        if (v30 < v39) {
          goto LABEL_52;
        }
LABEL_64:
        BOOL v42 = v39 >= v30;
        char v43 = v31 ^ 1;
        if (!v42) {
          char v43 = 1;
        }
        if ((v43 & 1) == 0 && v21 + HIDWORD(v19) < v40) {
          goto LABEL_52;
        }
        uint64_t v9 = a1 + v32 + 192;
LABEL_6:
        *(_OWORD *)uint64_t v9 = v59;
        *(_OWORD *)(v9 + 16) = *(_OWORD *)v61;
        *(_OWORD *)(v9 + 28) = *(_OWORD *)&v61[12];
        __n128 result = v57;
        *(__n128 *)(v9 + 60) = v57;
        *(void *)(v9 + 44) = v19;
        *(_DWORD *)(v9 + 52) = v20;
        *(_DWORD *)(v9 + 56) = v21;
        ++v8;
        *(_OWORD *)(v9 + 76) = v58;
        if (v8 != 8)
        {
LABEL_7:
          uint64_t v4 = v6;
          v7 += 96;
          v6 += 96;
          if (v6 == a2) {
            return result;
          }
          continue;
        }
        return result;
      }
  }
}

void sub_FDC744()
{
  unk_25FD1BF = 16641;
  word_25FD1A8 = 65;
  byte_25FD1D7 = 1;
  byte_25FD1C1 = 0;
}

uint64_t sub_FDC76C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_F734A0(a1, a2, 0);
  *(_OWORD *)(v3 + 3944) = xmmword_20E22B0;
  *(void *)(v3 + 3960) = -1;
  *(_DWORD *)(v3 + 3968) = 0x7FFFFFFF;
  v5.n128_u64[0] = 0;
  v5.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)(v3 + 3976), &v5);
  return a1;
}

void sub_FDC7D8(_Unwind_Exception *a1)
{
  sub_BF0DE8(v1);
  _Unwind_Resume(a1);
}

void sub_FDC7EC(int32x2_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, unsigned int a7@<W6>, char *a8@<X8>)
{
  sub_FDC868(a1, a2, a3, a4, a5, a6, a7, 0, __p);
  sub_FDD468(__p, a8);
  if (__p[0])
  {
    sub_FE24EC((uint64_t)__p, (void **)__p[0]);
    operator delete(__p[0]);
  }
}

void sub_FDC854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FDD6C4((void ***)va);
  _Unwind_Resume(a1);
}

void sub_FDC868(int32x2_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, unsigned int a7@<W6>, int a8@<W7>, void *a9@<X8>)
{
  uint64_t v10 = a1;
  a1[493].i32[0] = 0;
  int32x2_t v11 = a1[500];
  int32x2_t v12 = a1[499];
  while (*(void *)&v11 != *(void *)&v12)
  {
    if (*(char *)(*(void *)&v11 - 1) < 0) {
      operator delete(*(void **)(*(void *)&v11 - 24));
    }
    *(void *)&v11 -= 32;
  }
  v10[500] = v12;
  __p[0] = 0;
  __p[1] = 0;
  unsigned int v110 = 0;
  unsigned int v14 = *(const void **)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  int64_t v15 = v13 - *(void *)a2;
  if (v13 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v15 >> 4) > 0x333333333333333) {
      sub_2E00();
    }
    __p[0] = operator new(v15);
    unsigned int v110 = (char *)__p[0] + 16 * (v15 >> 4);
    size_t v16 = 80 * ((v15 - 80) / 0x50uLL) + 80;
    memcpy(__p[0], v14, v16);
    __p[1] = (char *)__p[0] + v16;
  }
  int v93 = (char **)&v10[499];
  uint64_t v111 = *(void *)(a2 + 24);
  v107[0] = 0;
  v107[1] = 0;
  uint64_t v108 = 0;
  __int32 v106 = 0;
  uint64_t v17 = a3[1] - *a3;
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v95 = v17 >> 5;
    unint64_t v96 = v10;
    while (1)
    {
      ++v106;
      uint64_t v100 = v18;
      uint64_t v19 = *a3 + 32 * v18;
      uint64_t v103 = 0;
      unsigned int v104 = 0;
      unsigned int v105 = 0;
      if (a8 == 2)
      {
        sub_F957AC((uint64_t)&v103, (const void **)v19);
      }
      else
      {
        long long v22 = *(char **)v19;
        long long v23 = *(char **)(v19 + 8);
        while (v22 != v23)
        {
          BOOL v28 = v104;
          if (v104 >= (void *)v105)
          {
            unsigned int v30 = v103;
            uint64_t v31 = ((char *)v104 - (unsigned char *)v103) >> 5;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 59) {
              sub_2E00();
            }
            uint64_t v33 = v105 - (unsigned char *)v103;
            if ((v105 - (unsigned char *)v103) >> 4 > v32) {
              unint64_t v32 = v33 >> 4;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34 >> 59) {
LABEL_128:
            }
              sub_188D718();
            long long v35 = (char *)operator new(32 * v34);
            long long v36 = &v35[32 * v31];
            *(void *)long long v36 = 0;
            *((void *)v36 + 1) = 0;
            *((void *)v36 + 2) = 0;
            *((void *)v36 + 3) = -1;
            char v29 = v36 + 32;
            if (v28 == v30)
            {
              uint64_t v103 = v36;
              unsigned int v104 = v36 + 32;
              unsigned int v105 = &v35[32 * v34];
            }
            else
            {
              uint64_t v37 = 0;
              do
              {
                int v38 = &v36[v37 * 8];
                unsigned int v39 = &v28[v37];
                *((_OWORD *)v38 - 2) = *(_OWORD *)&v28[v37 - 4];
                *((void *)v38 - 2) = v28[v37 - 2];
                *(v39 - 4) = 0;
                *(v39 - 3) = 0;
                *(v39 - 2) = 0;
                *((void *)v38 - 1) = v28[v37 - 1];
                v37 -= 4;
              }
              while (&v28[v37] != v30);
              BOOL v28 = v103;
              int v40 = v104;
              uint64_t v103 = &v36[v37 * 8];
              unsigned int v104 = v36 + 32;
              unsigned int v105 = &v35[32 * v34];
              if (v40 != v28)
              {
                int v41 = v40;
                do
                {
                  char v43 = (void *)*(v41 - 4);
                  v41 -= 4;
                  BOOL v42 = v43;
                  if (v43)
                  {
                    *(v40 - 3) = v42;
                    operator delete(v42);
                  }
                  int v40 = v41;
                }
                while (v41 != v28);
              }
            }
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            *unsigned int v104 = 0;
            v28[1] = 0;
            char v29 = v28 + 4;
            v28[2] = 0;
            v28[3] = -1;
          }
          unsigned int v104 = v29;
          int v44 = v22 + 8;
          uint64_t v45 = *(void *)v22;
          unsigned int v47 = (char *)*(v29 - 3);
          unint64_t v46 = *(v29 - 2);
          if ((unint64_t)v47 < v46)
          {
            *(void *)unsigned int v47 = v45;
            *(_OWORD *)(v47 + 8) = *v44;
            long long v24 = *(_OWORD *)(v22 + 24);
            long long v25 = *(_OWORD *)(v22 + 40);
            long long v26 = *(_OWORD *)(v22 + 56);
            *((void *)v47 + 9) = *((void *)v22 + 9);
            *(_OWORD *)(v47 + 56) = v26;
            *(_OWORD *)(v47 + 40) = v25;
            *(_OWORD *)(v47 + 24) = v24;
            int v27 = v47 + 80;
          }
          else
          {
            int v48 = (unsigned char *)*(v29 - 4);
            unint64_t v49 = 0xCCCCCCCCCCCCCCCDLL * ((v47 - v48) >> 4) + 1;
            if (v49 > 0x333333333333333) {
              sub_2E00();
            }
            unint64_t v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - (void)v48) >> 4);
            if (2 * v50 > v49) {
              unint64_t v49 = 2 * v50;
            }
            if (v50 >= 0x199999999999999) {
              unint64_t v51 = 0x333333333333333;
            }
            else {
              unint64_t v51 = v49;
            }
            if (v51)
            {
              if (v51 > 0x333333333333333) {
                goto LABEL_128;
              }
              long long v52 = (char *)operator new(80 * v51);
            }
            else
            {
              long long v52 = 0;
            }
            long long v53 = &v52[16 * ((v47 - v48) >> 4)];
            *(void *)long long v53 = v45;
            *(_OWORD *)(v53 + 8) = *v44;
            long long v54 = *(_OWORD *)(v22 + 24);
            long long v55 = *(_OWORD *)(v22 + 40);
            long long v56 = *(_OWORD *)(v22 + 56);
            *((void *)v53 + 9) = *((void *)v22 + 9);
            *(_OWORD *)(v53 + 56) = v56;
            *(_OWORD *)(v53 + 40) = v55;
            *(_OWORD *)(v53 + 24) = v54;
            __n128 v57 = v53;
            if (v47 != v48)
            {
              do
              {
                *((_OWORD *)v57 - 5) = *((_OWORD *)v47 - 5);
                long long v58 = *((_OWORD *)v47 - 4);
                long long v59 = *((_OWORD *)v47 - 3);
                long long v60 = *((_OWORD *)v47 - 1);
                *((_OWORD *)v57 - 2) = *((_OWORD *)v47 - 2);
                *((_OWORD *)v57 - 1) = v60;
                *((_OWORD *)v57 - 4) = v58;
                *((_OWORD *)v57 - 3) = v59;
                v57 -= 80;
                v47 -= 80;
              }
              while (v47 != v48);
              unsigned int v47 = (char *)*(v29 - 4);
            }
            long long v61 = &v52[80 * v51];
            int v27 = v53 + 80;
            *(v29 - 4) = v57;
            *(v29 - 3) = v53 + 80;
            *(v29 - 2) = v61;
            if (v47) {
              operator delete(v47);
            }
          }
          *(v29 - 3) = v27;
          v22 += 80;
        }
      }
      uint64_t v10 = v96;
      BOOL v20 = sub_FDD728(v96, __p, (uint64_t)&v103, a5, a6, a7, (uint64_t *)v107);
      if (v20)
      {
        sub_FDDCBC((int32x2_t **)v107[1] - 3, a8, (uint64_t)v112);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        *(_OWORD *)long long __p = *(_OWORD *)v112;
        unsigned int v110 = v113;
        uint64_t v111 = v114;
        int v21 = v103;
        if (!v103) {
          goto LABEL_84;
        }
        goto LABEL_77;
      }
      v96[497] = (int32x2_t)10;
      v96[498] = (int32x2_t)&off_2439090;
      sub_FDDAE8("Failed to compute a path including waypoint ", (uint64_t)&v106, ".");
      int32x2_t v62 = v96[500];
      if (*(void *)&v62 >= *(void *)&v96[501]) {
        break;
      }
      **(unsigned char **)&int32x2_t v62 = 0;
      __n128 v63 = (unsigned char *)(*(void *)&v62 + 8);
      if (SHIBYTE(v113) < 0)
      {
        sub_4200(v63, v112[0], (unint64_t)v112[1]);
      }
      else
      {
        long long v64 = *(_OWORD *)v112;
        *(void *)(*(void *)&v62 + 24) = v113;
        *(_OWORD *)__n128 v63 = v64;
      }
      v96[500] = (int32x2_t)(*(void *)&v62 + 32);
      v96[500] = (int32x2_t)(*(void *)&v62 + 32);
      if (SHIBYTE(v113) < 0) {
        goto LABEL_89;
      }
LABEL_62:
      v96[502].i32[0] = v106;
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v112);
        sub_CBB20C((unsigned __int8 *)(*(void *)&v96[500] - 32), (uint64_t)v101);
        if ((v102 & 0x80u) == 0) {
          long long v65 = v101;
        }
        else {
          long long v65 = (void **)v101[0];
        }
        if ((v102 & 0x80u) == 0) {
          uint64_t v66 = v102;
        }
        else {
          uint64_t v66 = (uint64_t)v101[1];
        }
        sub_188FC78(v112, (uint64_t)v65, v66);
        if ((char)v102 < 0) {
          operator delete(v101[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)v101, 3u);
        if ((char)v102 < 0) {
          operator delete(v101[0]);
        }
        v112[0] = v92;
        *(void **)((char *)v112 + *((void *)v92 - 3)) = v91;
        if (v116 < 0) {
          operator delete(v115);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      *a9 = 0;
      a9[1] = 0;
      a9[2] = 0;
      int v21 = v103;
      if (!v103) {
        goto LABEL_84;
      }
LABEL_77:
      long long v67 = v104;
      __n128 v68 = v21;
      if (v104 != v21)
      {
        long long v69 = v104;
        do
        {
          long long v71 = (void *)*(v69 - 4);
          v69 -= 4;
          long long v70 = v71;
          if (v71)
          {
            *(v67 - 3) = v70;
            operator delete(v70);
          }
          long long v67 = v69;
        }
        while (v69 != v21);
        __n128 v68 = v103;
      }
      unsigned int v104 = v21;
      operator delete(v68);
LABEL_84:
      if (!v20) {
        goto LABEL_123;
      }
      uint64_t v18 = v100 + 1;
      if (v100 + 1 == v95) {
        goto LABEL_90;
      }
    }
    v96[500] = (int32x2_t)sub_FE27D4(v93, (uint64_t)v112);
    if ((SHIBYTE(v113) & 0x80000000) == 0) {
      goto LABEL_62;
    }
LABEL_89:
    operator delete(v112[0]);
    goto LABEL_62;
  }
LABEL_90:
  v112[0] = 0;
  v112[1] = 0;
  unsigned int v113 = 0;
  long long v73 = *(const void **)a4;
  uint64_t v72 = *(void *)(a4 + 8);
  int64_t v74 = v72 - *(void *)a4;
  if (v72 != *(void *)a4)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v74 >> 4) > 0x333333333333333) {
      sub_2E00();
    }
    long long v75 = (char *)operator new(v74);
    v112[0] = v75;
    v112[1] = v75;
    unsigned int v113 = &v75[16 * (v74 >> 4)];
    size_t v76 = 80 * ((v74 - 80) / 0x50uLL) + 80;
    memcpy(v75, v73, v76);
    v112[1] = &v75[v76];
  }
  uint64_t v114 = *(void *)(a4 + 24);
  sub_F3553C(&v103, (uint64_t)v112, 1uLL);
  BOOL v77 = sub_FDD728(v10, __p, (uint64_t)&v103, a5, a6, a7, (uint64_t *)v107);
  long long v78 = v103;
  if (v103)
  {
    long long v79 = v104;
    long long v80 = v103;
    if (v104 != v103)
    {
      long long v81 = v104;
      do
      {
        long long v83 = (void *)*(v81 - 4);
        v81 -= 4;
        long long v82 = v83;
        if (v83)
        {
          *(v79 - 3) = v82;
          operator delete(v82);
        }
        long long v79 = v81;
      }
      while (v81 != v78);
      long long v80 = v103;
    }
    unsigned int v104 = v78;
    operator delete(v80);
  }
  if (v112[0])
  {
    v112[1] = v112[0];
    operator delete(v112[0]);
  }
  if (v77)
  {
    *(_OWORD *)a9 = *(_OWORD *)v107;
    a9[2] = v108;
  }
  else
  {
    ++v106;
    v10[497] = (int32x2_t)10;
    v10[498] = (int32x2_t)&off_2439090;
    int32x2_t v84 = v10[500];
    if (*(void *)&v84 >= *(void *)&v10[501])
    {
      long long v85 = sub_FE2988(v93, "Failed to compute a path including the destination.");
    }
    else
    {
      sub_FE2B08(v10 + 4008, *(unsigned char **)&v10[500], "Failed to compute a path including the destination.");
      long long v85 = (char *)(*(void *)&v84 + 32);
      v10[500] = (int32x2_t)(*(void *)&v84 + 32);
    }
    v10[500] = (int32x2_t)v85;
    v10[502].i32[0] = v106;
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v112);
      sub_CBB20C((unsigned __int8 *)(*(void *)&v10[500] - 32), (uint64_t)&v103);
      if (SHIBYTE(v105) >= 0) {
        long long v86 = &v103;
      }
      else {
        long long v86 = v103;
      }
      if (SHIBYTE(v105) >= 0) {
        uint64_t v87 = HIBYTE(v105);
      }
      else {
        uint64_t v87 = (uint64_t)v104;
      }
      sub_188FC78(v112, (uint64_t)v86, v87);
      if (SHIBYTE(v105) < 0) {
        operator delete(v103);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v103, 3u);
      if (SHIBYTE(v105) < 0) {
        operator delete(v103);
      }
      if (v116 < 0) {
        operator delete(v115);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
LABEL_123:
    if (v107[0])
    {
      sub_FE24EC((uint64_t)v107, (void **)v107[0]);
      operator delete(v107[0]);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_FDD350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void **a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a49);
  sub_FDD6C4(&a41);
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_FDD468(void *a1@<X1>, char *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if (*a1 == v3 || *(void *)(v3 - 24) == *(void *)(v3 - 16))
  {
    sub_EAD400((uint64_t)a2);
  }
  else
  {
    sub_FDE054(a1, (unint64_t *)&__p);
    __n128 v5 = (void *)sub_FDE144(a1, 0);
    uint64_t v6 = (unsigned int *)sub_FDE5B4(&__p, 0);
    uint64_t v7 = (long long *)sub_FDE374(v5, *v6);
    sub_443EFC(a2, v7);
    uint64_t v8 = a1[1];
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3);
    if (v9 <= 1) {
      unint64_t v10 = 1;
    }
    else {
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3);
    }
    if (v9 >= 2)
    {
      unint64_t v11 = 1;
      do
      {
        int32x2_t v12 = (void *)sub_FDE144(a1, v11);
        uint64_t v13 = (unsigned int *)sub_FDE5B4(&__p, v11);
        unsigned int v14 = (void *)sub_FDE374(v12, *v13);
        if (!sub_EADC78((uint64_t)a2)
          || !sub_EADC78((uint64_t)v14)
          || (unsigned int v15 = *(_DWORD *)sub_69134((uint64_t)a2),
              unsigned int v16 = *(_DWORD *)sub_EADAD0((uint64_t)v14),
              uint64_t v17 = sub_EAE1B8(a2, 0),
              uint64_t v18 = *(void *)(sub_EAE1B8(v14, 0) + 32),
              __PAIR64__(*(unsigned __int16 *)(v17 + 36), *(_DWORD *)(v17 + 32)) == __PAIR64__(WORD2(v18), v18))
          && ((v18 & 0x1000000000000) == 0) == (*(unsigned char *)(v17 + 38) == 0)
          && v16 > v15)
        {
          sub_EAEFD8((uint64_t)a2, (uint64_t)v14);
        }
        ++v11;
      }
      while (v10 != v11);
      uint64_t v8 = a1[1];
    }
    uint64_t v19 = sub_FDE374((void *)(v8 - 24), *(v27 - 1));
    uint64_t v20 = sub_EADAD0(v19);
    v24[0] = *(_OWORD *)v20;
    long long v21 = *(_OWORD *)(v20 + 16);
    long long v22 = *(_OWORD *)(v20 + 32);
    long long v23 = *(_OWORD *)(v20 + 48);
    uint64_t v25 = *(void *)(v20 + 64);
    v24[2] = v22;
    v24[3] = v23;
    v24[1] = v21;
    sub_EADAA8((uint64_t)a2, (uint64_t)v24);
    if (__p)
    {
      int v27 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_FDD68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  sub_405F44(v19);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ***sub_FDD6C4(void ***a1)
{
  if (*a1)
  {
    sub_FE24EC((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

uint64_t sub_FDD700(uint64_t a1)
{
  return *(unsigned int *)(a1 + 3944);
}

__n128 sub_FDD708@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 3948);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(a1 + 3964);
  return result;
}

uint64_t sub_FDD720(uint64_t a1)
{
  return a1 + 3992;
}

BOOL sub_FDD728(int32x2_t *a1, void *a2, uint64_t a3, uint64_t a4, int a5, unsigned int a6, uint64_t *a7)
{
  long long __p = 0;
  unint64_t v32 = 0;
  unint64_t v33 = 0;
  sub_FDDEC0((uint64_t)&__p, (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  sub_F75494(a1, (uint64_t)a2, (uint64_t ***)a3, a4, 0x7FFFFFFF, 0, a5, 0x7FFFFFFF, a6, 0, 0xFFFFFFFF);
  a1[493].i32[0] += sub_F76A1C((uint64_t)a1);
  sub_F76A30((uint64_t)a1, (uint64_t)v34);
  sub_33998((uint64_t)&a1[493] + 4, (uint64_t)v34);
  uint64_t v14 = a7[1];
  if (*a7 == v14) {
    LODWORD(v15) = 1;
  }
  else {
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL
  }
        * ((uint64_t)(a2[1] - *a2) >> 4)
        / (0x4FBCDA3AC10C9715
         * ((uint64_t)(*(void *)(v14 - 16) - *(void *)(v14 - 24)) >> 3));
  uint64_t v16 = sub_F7571C((uint64_t)a1);
  uint64_t v17 = *(unint64_t **)v16;
  uint64_t v18 = *(unint64_t **)(v16 + 8);
  if (*(unint64_t **)v16 != v18)
  {
    uint64_t v19 = v32;
    do
    {
      unint64_t v20 = *v17;
      if ((unint64_t)v19 >= v33)
      {
        long long v21 = (void *)sub_FE2E0C((uint64_t *)&__p);
      }
      else
      {
        v19[60] = 0;
        *((_OWORD *)v19 + 28) = 0u;
        *((_OWORD *)v19 + 29) = 0u;
        *((_OWORD *)v19 + 26) = 0u;
        *((_OWORD *)v19 + 27) = 0u;
        *((_OWORD *)v19 + 24) = 0u;
        *((_OWORD *)v19 + 25) = 0u;
        *((_OWORD *)v19 + 22) = 0u;
        *((_OWORD *)v19 + 23) = 0u;
        *((_OWORD *)v19 + 20) = 0u;
        *((_OWORD *)v19 + 21) = 0u;
        *((_OWORD *)v19 + 18) = 0u;
        *((_OWORD *)v19 + 19) = 0u;
        *((_OWORD *)v19 + 16) = 0u;
        *((_OWORD *)v19 + 17) = 0u;
        *((_OWORD *)v19 + 14) = 0u;
        *((_OWORD *)v19 + 15) = 0u;
        *((_OWORD *)v19 + 12) = 0u;
        *((_OWORD *)v19 + 13) = 0u;
        *((_OWORD *)v19 + 10) = 0u;
        *((_OWORD *)v19 + 11) = 0u;
        *((_OWORD *)v19 + 8) = 0u;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        *((_OWORD *)v19 + 7) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *(_OWORD *)uint64_t v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        sub_EAD400((uint64_t)v19);
        v19[59] = 0x7FFFFFFFFFFFFFFFLL;
        *((_DWORD *)v19 + 120) = -1;
        long long v21 = v19 + 61;
      }
      unint64_t v32 = v21;
      sub_F759B0((uint64_t)a1, v20, v34);
      sub_448838((uint64_t)(v32 - 61), v34);
      sub_405F44((uint64_t)v34);
      uint64_t v22 = sub_F75724((uint64_t)a1, v20);
      *(v32 - 2) = v22;
      unsigned int v23 = sub_F75760((uint64_t)a1, v20);
      uint64_t v19 = v32;
      *((_DWORD *)v32 - 2) = v23 / v15;
      ++v17;
    }
    while (v17 != v18);
  }
  long long v24 = (void *)a7[1];
  if ((unint64_t)v24 >= a7[2])
  {
    uint64_t v25 = sub_FE3008(a7, (uint64_t *)&__p);
  }
  else
  {
    *long long v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    sub_FE31A8(v24, (uint64_t)__p, (uint64_t)v32, 0x4FBCDA3AC10C9715 * (((char *)v32 - (unsigned char *)__p) >> 3));
    uint64_t v25 = (uint64_t)(v24 + 3);
    a7[1] = (uint64_t)(v24 + 3);
  }
  a7[1] = v25;
  long long v26 = __p;
  int v27 = v32;
  if (__p)
  {
    BOOL v28 = __p;
    if (__p != v32)
    {
      char v29 = v32;
      do
        char v29 = (void *)sub_405F44((uint64_t)(v29 - 61));
      while (v29 != v26);
      BOOL v28 = __p;
    }
    unint64_t v32 = v26;
    operator delete(v28);
  }
  return v26 != v27;
}

void sub_FDDA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDDA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  *(void *)(v4 + 8) = v5;
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDDA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDDA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDDA6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDDA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDDA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDDAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDDAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDDAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_FDDAE8(const char *a1, uint64_t a2, const char *a3)
{
  sub_E1B4((uint64_t)v9);
  size_t v5 = strlen(a1);
  sub_188FC78(v10, (uint64_t)a1, v5);
  std::ostream::operator<<();
  size_t v6 = strlen(a3);
  sub_188FC78(v10, (uint64_t)a3, v6);
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_FDDC94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FDDCA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1C02990((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FDDCBC(int32x2_t **a1@<X1>, int a2@<W3>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = -1;
  uint64_t v4 = *a1;
  size_t v5 = a1[1];
  if (*a1 != v5)
  {
    if (a2 == 2)
    {
      do
      {
        unint64_t v6 = sub_EADCD0((uint64_t)v4);
        LODWORD(v18) = 0;
        *((void *)&v18 + 1) = 0;
        *(void *)&long long v19 = 0;
        BYTE8(v19) = 0;
        *(void *)&long long v20 = 0x3FF0000000000000;
        BYTE8(v20) = 1;
        memset(v21, 0, 17);
        *(_DWORD *)&v21[18] = 36000;
        v21[22] = 0;
        uint64_t v7 = sub_EADAD0((uint64_t)v4);
        long long v8 = *(_OWORD *)(v7 + 16);
        long long v9 = *(_OWORD *)(v7 + 32);
        uint64_t v10 = *(void *)(v7 + 63);
        *(_OWORD *)long long v21 = *(_OWORD *)(v7 + 48);
        long long v11 = *(_OWORD *)v7;
        *(void *)&v21[15] = v10;
        long long v19 = v8;
        long long v20 = v9;
        long long v18 = v11;
        *(int32x2_t *)long long v21 = vadd_s32(v4[59], *(int32x2_t *)v21);
        unint64_t v22 = v6;
        sub_BF6964((char **)a3, &v22, &v18);
        LODWORD(v18) = 1000000000 - v18;
        v21[16] ^= 1u;
        BYTE8(v19) ^= 1u;
        unint64_t v22 = v6 & 0xFFFFFFFFFFFF0003 ^ 2;
        sub_BF6964((char **)a3, &v22, &v18);
        v4 += 61;
      }
      while (v4 != v5);
    }
    else
    {
      do
      {
        unint64_t v12 = sub_EADCD0((uint64_t)v4);
        LODWORD(v18) = 0;
        *((void *)&v18 + 1) = 0;
        *(void *)&long long v19 = 0;
        BYTE8(v19) = 0;
        *(void *)&long long v20 = 0x3FF0000000000000;
        BYTE8(v20) = 1;
        memset(v21, 0, 17);
        *(_DWORD *)&v21[18] = 36000;
        v21[22] = 0;
        uint64_t v13 = sub_EADAD0((uint64_t)v4);
        long long v14 = *(_OWORD *)(v13 + 16);
        long long v15 = *(_OWORD *)(v13 + 32);
        uint64_t v16 = *(void *)(v13 + 63);
        *(_OWORD *)long long v21 = *(_OWORD *)(v13 + 48);
        long long v17 = *(_OWORD *)v13;
        *(void *)&v21[15] = v16;
        long long v19 = v14;
        long long v20 = v15;
        long long v18 = v17;
        *(int32x2_t *)long long v21 = vadd_s32(v4[59], *(int32x2_t *)v21);
        unint64_t v22 = v12;
        sub_BF6964((char **)a3, &v22, &v18);
        v4 += 61;
      }
      while (v4 != v5);
    }
  }
}

void sub_FDDE98(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_FDDEC0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(long long **)a1;
  if (0x4FBCDA3AC10C9715 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= a2) {
    return;
  }
  if (a2 >= 0x864B8A7DE6D1D7) {
    sub_2E00();
  }
  size_t v5 = *(long long **)(a1 + 8);
  uint64_t v6 = 488 * a2;
  uint64_t v7 = (char *)operator new(488 * a2);
  long long v8 = &v7[v6];
  long long v9 = &v7[(char *)v5 - (char *)v3];
  if (v5 == v3)
  {
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v8;
    if (!v3) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v10 = (uint64_t)&v7[(char *)v5 - (char *)v3];
  do
  {
    v10 -= 488;
    size_t v5 = (long long *)((char *)v5 - 488);
    sub_FE2C8C(v2, v10, v5);
  }
  while (v5 != v3);
  long long v11 = *(long long **)a1;
  uint64_t v3 = *(long long **)(a1 + 8);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v8;
  if (v3 != v11)
  {
    do
    {
      uint64_t v3 = (long long *)((char *)v3 - 488);
      sub_405F44((uint64_t)v3);
    }
    while (v3 != v11);
    uint64_t v3 = v11;
  }
  if (v3)
  {
LABEL_10:
    operator delete(v3);
  }
}

void **sub_FDDFF8(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_405F44(v3 - 488);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_FDE054(void *a1@<X1>, unint64_t *a2@<X8>)
{
  unsigned int v13 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  unint64_t v3 = -1431655765 * ((a1[1] - *a1) >> 3) - 1;
  if ((v3 & 0x80000000) == 0)
  {
    do
    {
      sub_745A4((uint64_t)a2, &v13);
      size_t v5 = (void *)sub_FDE144(a1, v3);
      unsigned int v13 = *(_DWORD *)(sub_FDE374(v5, v13) + 480);
    }
    while (v13 != -1 && (int)v3-- > 0);
    unint64_t v8 = *a2;
    unint64_t v7 = a2[1];
    if (*a2 != v7)
    {
      long long v9 = (_DWORD *)(v7 - 4);
      if ((unint64_t)v9 > v8)
      {
        unint64_t v10 = v8 + 4;
        do
        {
          int v11 = *(_DWORD *)(v10 - 4);
          *(_DWORD *)(v10 - 4) = *v9;
          *v9-- = v11;
          BOOL v12 = v10 >= (unint64_t)v9;
          v10 += 4;
        }
        while (!v12);
      }
    }
  }
}

void sub_FDE128(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FDE144(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v15;
    }
    else {
      unint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    BOOL v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    long long v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 24 * a2;
}

void sub_FDE294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_FDE374(void *a1, unint64_t a2)
{
  if (0x4FBCDA3AC10C9715 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x4FBCDA3AC10C9715 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v15;
    }
    else {
      unint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    BOOL v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    long long v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 488 * a2;
}

void sub_FDE4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_FDE5B4(void *a1, unint64_t a2)
{
  if (a2 >= (uint64_t)(a1[1] - *a1) >> 2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, (uint64_t)(a1[1] - *a1) >> 2);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v15;
    }
    else {
      unint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    BOOL v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    long long v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 4 * a2;
}

void sub_FDE6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_FDE7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_F7D728(a1, a2, 0);
  *(_OWORD *)(v3 + 3944) = xmmword_20E22B0;
  *(void *)(v3 + 3960) = -1;
  *(_DWORD *)(v3 + 3968) = 0x7FFFFFFF;
  v5.n128_u64[0] = 0;
  v5.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)(v3 + 3976), &v5);
  return a1;
}

void sub_FDE830(_Unwind_Exception *a1)
{
  sub_BF0DE8(v1);
  _Unwind_Resume(a1);
}

void sub_FDE844(int32x2_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, int32x2_t *a5@<X4>, __int32 a6@<W5>, unsigned int a7@<W6>, char *a8@<X8>)
{
  sub_FDE8C0(a1, a2, a3, a4, a5, a6, a7, 0, __p);
  sub_FDF4BC(__p, a8);
  if (__p[0])
  {
    sub_FE24EC((uint64_t)__p, (void **)__p[0]);
    operator delete(__p[0]);
  }
}

void sub_FDE8AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FDD6C4((void ***)va);
  _Unwind_Resume(a1);
}

void sub_FDE8C0(int32x2_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, int32x2_t *a5@<X4>, __int32 a6@<W5>, unsigned int a7@<W6>, int a8@<W7>, void *a9@<X8>)
{
  unint64_t v10 = a1;
  a1[493].i32[0] = 0;
  int32x2_t v11 = a1[500];
  int32x2_t v12 = a1[499];
  while (*(void *)&v11 != *(void *)&v12)
  {
    if (*(char *)(*(void *)&v11 - 1) < 0) {
      operator delete(*(void **)(*(void *)&v11 - 24));
    }
    *(void *)&v11 -= 32;
  }
  v10[500] = v12;
  __p[0] = 0;
  __p[1] = 0;
  unsigned int v110 = 0;
  long long v14 = *(const void **)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  int64_t v15 = v13 - *(void *)a2;
  if (v13 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v15 >> 4) > 0x333333333333333) {
      sub_2E00();
    }
    __p[0] = operator new(v15);
    unsigned int v110 = (char *)__p[0] + 16 * (v15 >> 4);
    size_t v16 = 80 * ((v15 - 80) / 0x50uLL) + 80;
    memcpy(__p[0], v14, v16);
    __p[1] = (char *)__p[0] + v16;
  }
  int v93 = (char **)&v10[499];
  uint64_t v111 = *(void *)(a2 + 24);
  v107[0] = 0;
  v107[1] = 0;
  uint64_t v108 = 0;
  __int32 v106 = 0;
  uint64_t v17 = a3[1] - *a3;
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v95 = v17 >> 5;
    unint64_t v96 = v10;
    while (1)
    {
      ++v106;
      uint64_t v100 = v18;
      uint64_t v19 = *a3 + 32 * v18;
      uint64_t v103 = 0;
      unsigned int v104 = 0;
      unsigned int v105 = 0;
      if (a8 == 2)
      {
        sub_F957AC((uint64_t)&v103, (const void **)v19);
      }
      else
      {
        unint64_t v22 = *(char **)v19;
        unsigned int v23 = *(char **)(v19 + 8);
        while (v22 != v23)
        {
          BOOL v28 = v104;
          if (v104 >= (void *)v105)
          {
            unsigned int v30 = v103;
            uint64_t v31 = ((char *)v104 - (unsigned char *)v103) >> 5;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 59) {
              sub_2E00();
            }
            uint64_t v33 = v105 - (unsigned char *)v103;
            if ((v105 - (unsigned char *)v103) >> 4 > v32) {
              unint64_t v32 = v33 >> 4;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34 >> 59) {
LABEL_128:
            }
              sub_188D718();
            long long v35 = (char *)operator new(32 * v34);
            long long v36 = &v35[32 * v31];
            *(void *)long long v36 = 0;
            *((void *)v36 + 1) = 0;
            *((void *)v36 + 2) = 0;
            *((void *)v36 + 3) = -1;
            char v29 = v36 + 32;
            if (v28 == v30)
            {
              uint64_t v103 = v36;
              unsigned int v104 = v36 + 32;
              unsigned int v105 = &v35[32 * v34];
            }
            else
            {
              uint64_t v37 = 0;
              do
              {
                int v38 = &v36[v37 * 8];
                unsigned int v39 = &v28[v37];
                *((_OWORD *)v38 - 2) = *(_OWORD *)&v28[v37 - 4];
                *((void *)v38 - 2) = v28[v37 - 2];
                *(v39 - 4) = 0;
                *(v39 - 3) = 0;
                *(v39 - 2) = 0;
                *((void *)v38 - 1) = v28[v37 - 1];
                v37 -= 4;
              }
              while (&v28[v37] != v30);
              BOOL v28 = v103;
              int v40 = v104;
              uint64_t v103 = &v36[v37 * 8];
              unsigned int v104 = v36 + 32;
              unsigned int v105 = &v35[32 * v34];
              if (v40 != v28)
              {
                int v41 = v40;
                do
                {
                  char v43 = (void *)*(v41 - 4);
                  v41 -= 4;
                  BOOL v42 = v43;
                  if (v43)
                  {
                    *(v40 - 3) = v42;
                    operator delete(v42);
                  }
                  int v40 = v41;
                }
                while (v41 != v28);
              }
            }
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            *unsigned int v104 = 0;
            v28[1] = 0;
            char v29 = v28 + 4;
            v28[2] = 0;
            v28[3] = -1;
          }
          unsigned int v104 = v29;
          int v44 = v22 + 8;
          uint64_t v45 = *(void *)v22;
          unsigned int v47 = (char *)*(v29 - 3);
          unint64_t v46 = *(v29 - 2);
          if ((unint64_t)v47 < v46)
          {
            *(void *)unsigned int v47 = v45;
            *(_OWORD *)(v47 + 8) = *v44;
            long long v24 = *(_OWORD *)(v22 + 24);
            long long v25 = *(_OWORD *)(v22 + 40);
            long long v26 = *(_OWORD *)(v22 + 56);
            *((void *)v47 + 9) = *((void *)v22 + 9);
            *(_OWORD *)(v47 + 56) = v26;
            *(_OWORD *)(v47 + 40) = v25;
            *(_OWORD *)(v47 + 24) = v24;
            int v27 = v47 + 80;
          }
          else
          {
            int v48 = (unsigned char *)*(v29 - 4);
            unint64_t v49 = 0xCCCCCCCCCCCCCCCDLL * ((v47 - v48) >> 4) + 1;
            if (v49 > 0x333333333333333) {
              sub_2E00();
            }
            unint64_t v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - (void)v48) >> 4);
            if (2 * v50 > v49) {
              unint64_t v49 = 2 * v50;
            }
            if (v50 >= 0x199999999999999) {
              unint64_t v51 = 0x333333333333333;
            }
            else {
              unint64_t v51 = v49;
            }
            if (v51)
            {
              if (v51 > 0x333333333333333) {
                goto LABEL_128;
              }
              long long v52 = (char *)operator new(80 * v51);
            }
            else
            {
              long long v52 = 0;
            }
            long long v53 = &v52[16 * ((v47 - v48) >> 4)];
            *(void *)long long v53 = v45;
            *(_OWORD *)(v53 + 8) = *v44;
            long long v54 = *(_OWORD *)(v22 + 24);
            long long v55 = *(_OWORD *)(v22 + 40);
            long long v56 = *(_OWORD *)(v22 + 56);
            *((void *)v53 + 9) = *((void *)v22 + 9);
            *(_OWORD *)(v53 + 56) = v56;
            *(_OWORD *)(v53 + 40) = v55;
            *(_OWORD *)(v53 + 24) = v54;
            __n128 v57 = v53;
            if (v47 != v48)
            {
              do
              {
                *((_OWORD *)v57 - 5) = *((_OWORD *)v47 - 5);
                long long v58 = *((_OWORD *)v47 - 4);
                long long v59 = *((_OWORD *)v47 - 3);
                long long v60 = *((_OWORD *)v47 - 1);
                *((_OWORD *)v57 - 2) = *((_OWORD *)v47 - 2);
                *((_OWORD *)v57 - 1) = v60;
                *((_OWORD *)v57 - 4) = v58;
                *((_OWORD *)v57 - 3) = v59;
                v57 -= 80;
                v47 -= 80;
              }
              while (v47 != v48);
              unsigned int v47 = (char *)*(v29 - 4);
            }
            long long v61 = &v52[80 * v51];
            int v27 = v53 + 80;
            *(v29 - 4) = v57;
            *(v29 - 3) = v53 + 80;
            *(v29 - 2) = v61;
            if (v47) {
              operator delete(v47);
            }
          }
          *(v29 - 3) = v27;
          v22 += 80;
        }
      }
      unint64_t v10 = v96;
      BOOL v20 = sub_FDFB20(v96, (int32x2_t *)__p, (uint64_t)&v103, (uint64_t)a5, a6, a7, (uint64_t *)v107);
      if (v20)
      {
        sub_FDFEE0((int32x2_t **)v107[1] - 3, a5, a8, (uint64_t)v112);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        *(_OWORD *)long long __p = *(_OWORD *)v112;
        unsigned int v110 = v113;
        uint64_t v111 = v114;
        long long v21 = v103;
        if (!v103) {
          goto LABEL_84;
        }
        goto LABEL_77;
      }
      v96[497] = (int32x2_t)10;
      v96[498] = (int32x2_t)&off_2439090;
      sub_FDDAE8("Failed to compute a path including waypoint ", (uint64_t)&v106, ".");
      int32x2_t v62 = v96[500];
      if (*(void *)&v62 >= *(void *)&v96[501]) {
        break;
      }
      **(unsigned char **)&int32x2_t v62 = 0;
      __n128 v63 = (unsigned char *)(*(void *)&v62 + 8);
      if (SHIBYTE(v113) < 0)
      {
        sub_4200(v63, v112[0], (unint64_t)v112[1]);
      }
      else
      {
        long long v64 = *(_OWORD *)v112;
        *(void *)(*(void *)&v62 + 24) = v113;
        *(_OWORD *)__n128 v63 = v64;
      }
      v96[500] = (int32x2_t)(*(void *)&v62 + 32);
      v96[500] = (int32x2_t)(*(void *)&v62 + 32);
      if (SHIBYTE(v113) < 0) {
        goto LABEL_89;
      }
LABEL_62:
      v96[502].i32[0] = v106;
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v112);
        sub_CBB20C((unsigned __int8 *)(*(void *)&v96[500] - 32), (uint64_t)v101);
        if ((v102 & 0x80u) == 0) {
          long long v65 = v101;
        }
        else {
          long long v65 = (void **)v101[0];
        }
        if ((v102 & 0x80u) == 0) {
          uint64_t v66 = v102;
        }
        else {
          uint64_t v66 = (uint64_t)v101[1];
        }
        sub_188FC78(v112, (uint64_t)v65, v66);
        if ((char)v102 < 0) {
          operator delete(v101[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)v101, 3u);
        if ((char)v102 < 0) {
          operator delete(v101[0]);
        }
        v112[0] = v92;
        *(void **)((char *)v112 + *((void *)v92 - 3)) = v91;
        if (v116 < 0) {
          operator delete(v115);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      *a9 = 0;
      a9[1] = 0;
      a9[2] = 0;
      long long v21 = v103;
      if (!v103) {
        goto LABEL_84;
      }
LABEL_77:
      long long v67 = v104;
      __n128 v68 = v21;
      if (v104 != v21)
      {
        long long v69 = v104;
        do
        {
          long long v71 = (void *)*(v69 - 4);
          v69 -= 4;
          long long v70 = v71;
          if (v71)
          {
            *(v67 - 3) = v70;
            operator delete(v70);
          }
          long long v67 = v69;
        }
        while (v69 != v21);
        __n128 v68 = v103;
      }
      unsigned int v104 = v21;
      operator delete(v68);
LABEL_84:
      if (!v20) {
        goto LABEL_123;
      }
      uint64_t v18 = v100 + 1;
      if (v100 + 1 == v95) {
        goto LABEL_90;
      }
    }
    v96[500] = (int32x2_t)sub_FE27D4(v93, (uint64_t)v112);
    if ((SHIBYTE(v113) & 0x80000000) == 0) {
      goto LABEL_62;
    }
LABEL_89:
    operator delete(v112[0]);
    goto LABEL_62;
  }
LABEL_90:
  v112[0] = 0;
  v112[1] = 0;
  unsigned int v113 = 0;
  long long v73 = *(const void **)a4;
  uint64_t v72 = *(void *)(a4 + 8);
  int64_t v74 = v72 - *(void *)a4;
  if (v72 != *(void *)a4)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v74 >> 4) > 0x333333333333333) {
      sub_2E00();
    }
    long long v75 = (char *)operator new(v74);
    v112[0] = v75;
    v112[1] = v75;
    unsigned int v113 = &v75[16 * (v74 >> 4)];
    size_t v76 = 80 * ((v74 - 80) / 0x50uLL) + 80;
    memcpy(v75, v73, v76);
    v112[1] = &v75[v76];
  }
  uint64_t v114 = *(void *)(a4 + 24);
  sub_F3553C(&v103, (uint64_t)v112, 1uLL);
  BOOL v77 = sub_FDFB20(v10, (int32x2_t *)__p, (uint64_t)&v103, (uint64_t)a5, a6, a7, (uint64_t *)v107);
  long long v78 = v103;
  if (v103)
  {
    long long v79 = v104;
    long long v80 = v103;
    if (v104 != v103)
    {
      long long v81 = v104;
      do
      {
        long long v83 = (void *)*(v81 - 4);
        v81 -= 4;
        long long v82 = v83;
        if (v83)
        {
          *(v79 - 3) = v82;
          operator delete(v82);
        }
        long long v79 = v81;
      }
      while (v81 != v78);
      long long v80 = v103;
    }
    unsigned int v104 = v78;
    operator delete(v80);
  }
  if (v112[0])
  {
    v112[1] = v112[0];
    operator delete(v112[0]);
  }
  if (v77)
  {
    *(_OWORD *)a9 = *(_OWORD *)v107;
    a9[2] = v108;
  }
  else
  {
    ++v106;
    v10[497] = (int32x2_t)10;
    v10[498] = (int32x2_t)&off_2439090;
    int32x2_t v84 = v10[500];
    if (*(void *)&v84 >= *(void *)&v10[501])
    {
      long long v85 = sub_FE2988(v93, "Failed to compute a path including the destination.");
    }
    else
    {
      sub_FE2B08(v10 + 4008, *(unsigned char **)&v10[500], "Failed to compute a path including the destination.");
      long long v85 = (char *)(*(void *)&v84 + 32);
      v10[500] = (int32x2_t)(*(void *)&v84 + 32);
    }
    v10[500] = (int32x2_t)v85;
    v10[502].i32[0] = v106;
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v112);
      sub_CBB20C((unsigned __int8 *)(*(void *)&v10[500] - 32), (uint64_t)&v103);
      if (SHIBYTE(v105) >= 0) {
        long long v86 = &v103;
      }
      else {
        long long v86 = v103;
      }
      if (SHIBYTE(v105) >= 0) {
        uint64_t v87 = HIBYTE(v105);
      }
      else {
        uint64_t v87 = (uint64_t)v104;
      }
      sub_188FC78(v112, (uint64_t)v86, v87);
      if (SHIBYTE(v105) < 0) {
        operator delete(v103);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v103, 3u);
      if (SHIBYTE(v105) < 0) {
        operator delete(v103);
      }
      if (v116 < 0) {
        operator delete(v115);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
LABEL_123:
    if (v107[0])
    {
      sub_FE24EC((uint64_t)v107, (void **)v107[0]);
      operator delete(v107[0]);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_FDF3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void **a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a49);
  sub_FDD6C4(&a41);
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_FDF4BC(void *a1@<X1>, char *a2@<X8>)
{
  uint64_t v4 = a1[1];
  if (*a1 == v4 || *(void *)(v4 - 24) == *(void *)(v4 - 16))
  {
    sub_EAFC08((uint64_t)a2);
  }
  else
  {
    sub_FE007C(a1, (unint64_t *)&v48);
    uint64_t v6 = (void *)sub_FE016C(a1, 0);
    long long v7 = (unsigned int *)sub_FDE5B4(&v48, 0);
    unint64_t v8 = (long long *)sub_FE039C(v6, *v7);
    sub_444D20(a2, v8);
    uint64_t v9 = a1[1];
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *a1) >> 3);
    if (v10 <= 1) {
      unint64_t v11 = 1;
    }
    else {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *a1) >> 3);
    }
    unint64_t v40 = v11;
    if (v10 >= 2)
    {
      unint64_t v12 = 1;
      do
      {
        uint64_t v13 = (void *)sub_FE016C(a1, v12);
        long long v14 = (unsigned int *)sub_FDE5B4(&v48, v12);
        int64_t v15 = (void *)sub_FE039C(v13, *v14);
        unint64_t v16 = sub_EAFF14((uint64_t)a2);
        unint64_t v17 = sub_EAFECC((uint64_t)v15);
        if (v16 >> 16 == v17 >> 16) {
          int v18 = (v16 >> 1) & 1 ^ (v17 >> 1) & 1;
        }
        else {
          int v18 = 0;
        }
        if (!sub_EADC78((uint64_t)a2)
          || !sub_EADC78((uint64_t)v15)
          || (unsigned int v19 = *(_DWORD *)sub_69134((uint64_t)a2), v20 = (unsigned int *)sub_EADAD0((uint64_t)v15), (v18 & 1) != 0)
          || (unsigned int v32 = *v20,
              uint64_t v33 = sub_EB0624(a2, 0),
              uint64_t v34 = *(void *)(sub_EB0624(v15, 0) + 32),
              __PAIR64__(*(unsigned __int16 *)(v33 + 36), *(_DWORD *)(v33 + 32)) == __PAIR64__(WORD2(v34), v34))
          && ((v34 & 0x1000000000000) == 0) == (*(unsigned char *)(v33 + 38) == 0)
          && v32 > v19)
        {
          if (((sub_EAE144(a2) | v18 ^ 1) & 1) == 0)
          {
            uint64_t v21 = sub_EAFF60((uint64_t)a2);
            uint64_t v22 = sub_EADD1C((uint64_t)v15);
            unsigned __int16 v23 = sub_EAFF14((uint64_t)a2);
            int v24 = sub_EAFECC((uint64_t)v15);
            char v25 = sub_EAFF14((uint64_t)a2);
            char v26 = sub_EAFECC((uint64_t)v15);
            unsigned int v2 = v2 & 0xFFFF8000 | 0x280;
            long long v27 = *(_OWORD *)v21;
            long long v28 = *(_OWORD *)(v21 + 16);
            *(void *)char v43 = *(void *)(v21 + 32);
            long long v41 = v27;
            long long v42 = v28;
            long long v30 = *(_OWORD *)v22;
            long long v29 = *(_OWORD *)(v22 + 16);
            uint64_t v44 = *(void *)(v22 + 32);
            *(_OWORD *)&v43[8] = v30;
            *(_OWORD *)&v43[24] = v29;
            int v45 = (v24 << 14) & 0x3FFF0000 | (v23 >> 2);
            int v46 = v2 & 0xFF80;
            char v47 = v25 & 1 | (2 * (v26 & 1)) | v47 & 0xE0;
            sub_EAFD8C((uint64_t)a2, (int **)&v41);
          }
          if (sub_EADC78((uint64_t)a2) && !sub_EADC78((uint64_t)v15)) {
            sub_EAD268((uint64_t)a2);
          }
          uint64_t v31 = (int ***)sub_5231C((uint64_t)v15);
          sub_EB0F78((uint64_t)a2, v31);
        }
        ++v12;
      }
      while (v40 != v12);
      uint64_t v9 = a1[1];
    }
    uint64_t v35 = sub_FE039C((void *)(v9 - 24), *(v49 - 1));
    uint64_t v36 = sub_EADAD0(v35);
    long long v41 = *(_OWORD *)v36;
    long long v37 = *(_OWORD *)(v36 + 16);
    long long v38 = *(_OWORD *)(v36 + 32);
    long long v39 = *(_OWORD *)(v36 + 48);
    *(void *)&v43[32] = *(void *)(v36 + 64);
    *(_OWORD *)char v43 = v38;
    *(_OWORD *)&v43[16] = v39;
    long long v42 = v37;
    sub_EADAA8((uint64_t)a2, (uint64_t)&v41);
    if (v48)
    {
      unint64_t v49 = v48;
      operator delete(v48);
    }
  }
}

void sub_FDF818(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  uint64_t v4 = *(void **)(v2 - 104);
  if (v4)
  {
    *(void *)(v2 - 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void sub_FDF874(int32x2_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, int32x2_t *a5@<X4>, __int32 a6@<W5>, unsigned int a7@<W6>, std::string *a8@<X8>)
{
  sub_FDE8C0(a1, a2, a3, a4, a5, a6, a7, 1, __p);
  sub_FDF8F0(__p, a8);
  if (__p[0])
  {
    sub_FE24EC((uint64_t)__p, (void **)__p[0]);
    operator delete(__p[0]);
  }
}

void sub_FDF8DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FDD6C4((void ***)va);
  _Unwind_Resume(a1);
}

double sub_FDF8F0@<D0>(void *a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if (*a1 == v3 || *(void *)(v3 - 24) == *(void *)(v3 - 16))
  {
    return sub_47E0E4(a2);
  }
  else
  {
    sub_FE007C(a1, (unint64_t *)v19);
    long long __p = 0;
    unint64_t v17 = 0;
    unint64_t v18 = 0;
    uint64_t v5 = a1[1] - *a1;
    if (v5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = v5 / 24;
      do
      {
        while (1)
        {
          unint64_t v8 = (void *)sub_FE016C(a1, v6);
          uint64_t v9 = (unsigned int *)sub_FDE5B4(v19, v6);
          unint64_t v10 = (long long *)sub_FE039C(v8, *v9);
          unint64_t v11 = v17;
          if ((unint64_t)v17 < v18) {
            break;
          }
          unint64_t v17 = sub_EB78F8((long long **)&__p, v10);
          if (v7 == ++v6) {
            goto LABEL_8;
          }
        }
        sub_444D20(v17, v10);
        unint64_t v17 = v11 + 472;
        ++v6;
      }
      while (v7 != v6);
    }
LABEL_8:
    sub_EA7740(a2, (uint64_t *)&__p);
    uint64_t v13 = (char *)__p;
    if (__p)
    {
      long long v14 = v17;
      int64_t v15 = __p;
      if (v17 != __p)
      {
        do
          long long v14 = (char *)sub_405F44((uint64_t)(v14 - 472));
        while (v14 != v13);
        int64_t v15 = __p;
      }
      unint64_t v17 = v13;
      operator delete(v15);
    }
    if (v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
  }
  return result;
}

void sub_FDFA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_FDFAA0(int32x2_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, int32x2_t *a5@<X5>, __int32 a6@<W6>, unsigned int a7@<W7>, std::string *a8@<X8>)
{
  sub_FDE8C0(a1, a2, a3, a4, a5, a6, a7, 2, __p);
  sub_FDF8F0(__p, a8);
  if (__p[0])
  {
    sub_FE24EC((uint64_t)__p, (void **)__p[0]);
    operator delete(__p[0]);
  }
}

void sub_FDFB0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FDD6C4((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_FDFB20(int32x2_t *a1, int32x2_t *a2, uint64_t a3, uint64_t a4, __int32 a5, unsigned int a6, uint64_t *a7)
{
  long long __p = 0;
  unsigned int v32 = 0;
  unint64_t v33 = 0;
  sub_FDDEC0((uint64_t)&__p, (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  sub_F7F6F8(a1, a2, (uint64_t ***)a3, a4, 0x7FFFFFFF, 0, a5, 0x7FFFFFFF, a6, 0, 0xFFFFFFFF);
  a1[493].i32[0] += sub_F76A1C((uint64_t)a1);
  sub_F809F4((uint64_t)a1, (uint64_t)v34);
  sub_33998((uint64_t)&a1[493] + 4, (uint64_t)v34);
  uint64_t v14 = a7[1];
  if (*a7 == v14) {
    LODWORD(v15) = 1;
  }
  else {
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL
  }
        * ((uint64_t)(*(void *)&a2[1] - *(void *)a2) >> 4)
        / (0x4FBCDA3AC10C9715
         * ((uint64_t)(*(void *)(v14 - 16) - *(void *)(v14 - 24)) >> 3));
  uint64_t v16 = sub_F7571C((uint64_t)a1);
  unint64_t v17 = *(unint64_t **)v16;
  unint64_t v18 = *(unint64_t **)(v16 + 8);
  if (*(unint64_t **)v16 != v18)
  {
    unsigned int v19 = v32;
    do
    {
      unint64_t v20 = *v17;
      if ((unint64_t)v19 >= v33)
      {
        uint64_t v21 = (void *)sub_FE34FC((uint64_t *)&__p);
      }
      else
      {
        v19[60] = 0;
        *((_OWORD *)v19 + 28) = 0u;
        *((_OWORD *)v19 + 29) = 0u;
        *((_OWORD *)v19 + 26) = 0u;
        *((_OWORD *)v19 + 27) = 0u;
        *((_OWORD *)v19 + 24) = 0u;
        *((_OWORD *)v19 + 25) = 0u;
        *((_OWORD *)v19 + 22) = 0u;
        *((_OWORD *)v19 + 23) = 0u;
        *((_OWORD *)v19 + 20) = 0u;
        *((_OWORD *)v19 + 21) = 0u;
        *((_OWORD *)v19 + 18) = 0u;
        *((_OWORD *)v19 + 19) = 0u;
        *((_OWORD *)v19 + 16) = 0u;
        *((_OWORD *)v19 + 17) = 0u;
        *((_OWORD *)v19 + 14) = 0u;
        *((_OWORD *)v19 + 15) = 0u;
        *((_OWORD *)v19 + 12) = 0u;
        *((_OWORD *)v19 + 13) = 0u;
        *((_OWORD *)v19 + 10) = 0u;
        *((_OWORD *)v19 + 11) = 0u;
        *((_OWORD *)v19 + 8) = 0u;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        *((_OWORD *)v19 + 7) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *(_OWORD *)unsigned int v19 = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        sub_EAFC08((uint64_t)v19);
        v19[59] = 0x7FFFFFFFFFFFFFFFLL;
        *((_DWORD *)v19 + 120) = -1;
        uint64_t v21 = v19 + 61;
      }
      unsigned int v32 = v21;
      sub_F7FBD0((uint64_t)a1, v20, v34);
      sub_448838((uint64_t)(v32 - 61), v34);
      sub_405F44((uint64_t)v34);
      uint64_t v22 = sub_F75724((uint64_t)a1, v20);
      *(v32 - 2) = v22;
      unsigned int v23 = sub_F7F980((uint64_t)a1, v20);
      unsigned int v19 = v32;
      *((_DWORD *)v32 - 2) = v23 / v15;
      ++v17;
    }
    while (v17 != v18);
  }
  int v24 = (void *)a7[1];
  if ((unint64_t)v24 >= a7[2])
  {
    uint64_t v25 = sub_FE36F8(a7, (uint64_t *)&__p);
  }
  else
  {
    *int v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    sub_FE3898(v24, (uint64_t)__p, (uint64_t)v32, 0x4FBCDA3AC10C9715 * (((char *)v32 - (unsigned char *)__p) >> 3));
    uint64_t v25 = (uint64_t)(v24 + 3);
    a7[1] = (uint64_t)(v24 + 3);
  }
  a7[1] = v25;
  char v26 = __p;
  long long v27 = v32;
  if (__p)
  {
    long long v28 = __p;
    if (__p != v32)
    {
      long long v29 = v32;
      do
        long long v29 = (void *)sub_405F44((uint64_t)(v29 - 61));
      while (v29 != v26);
      long long v28 = __p;
    }
    unsigned int v32 = v26;
    operator delete(v28);
  }
  return v26 != v27;
}

void sub_FDFE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDFE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  *(void *)(v4 + 8) = v5;
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDFE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDFE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDFE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDFE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDFE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDFEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDFEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDFECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_FDDFF8((void **)va);
  _Unwind_Resume(a1);
}

void sub_FDFEE0(int32x2_t **a1@<X1>, int32x2_t *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = -1;
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    do
    {
      unint64_t v9 = sub_EAFF14((uint64_t)v5);
      LODWORD(v16) = 0;
      if (a3 == 1) {
        unint64_t v10 = v9 & 0xFFFFFFFFFFFF0002;
      }
      else {
        unint64_t v10 = v9;
      }
      *((void *)&v16 + 1) = 0;
      *(void *)&long long v17 = 0;
      BYTE8(v17) = 0;
      *(void *)&long long v18 = 0x3FF0000000000000;
      BYTE8(v18) = 1;
      memset(v19, 0, 17);
      *(_DWORD *)&v19[18] = 36000;
      v19[22] = 0;
      uint64_t v11 = sub_EADAD0((uint64_t)v5);
      long long v12 = *(_OWORD *)(v11 + 16);
      long long v13 = *(_OWORD *)(v11 + 32);
      uint64_t v14 = *(void *)(v11 + 63);
      *(_OWORD *)unsigned int v19 = *(_OWORD *)(v11 + 48);
      long long v15 = *(_OWORD *)v11;
      *(void *)&v19[15] = v14;
      long long v17 = v12;
      long long v18 = v13;
      long long v16 = v15;
      *(int32x2_t *)unsigned int v19 = vadd_s32(v5[59], *(int32x2_t *)v19);
      unint64_t v20 = v10;
      sub_BF6964((char **)a4, &v20, &v16);
      LODWORD(v16) = 1000000000 - v16;
      v19[16] ^= 1u;
      BYTE8(v17) ^= 1u;
      *(int32x2_t *)unsigned int v19 = vadd_s32(a2[134], *(int32x2_t *)v19);
      *(void *)&v19[8] += *(void *)&a2[135];
      unint64_t v20 = v10 & 0xFFFFFFFFFFFF0003 ^ 2;
      sub_BF6964((char **)a4, &v20, &v16);
      v5 += 61;
    }
    while (v5 != v6);
  }
}

void sub_FE005C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_FE007C(void *a1@<X1>, unint64_t *a2@<X8>)
{
  unsigned int v13 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  unint64_t v3 = -1431655765 * ((a1[1] - *a1) >> 3) - 1;
  if ((v3 & 0x80000000) == 0)
  {
    do
    {
      sub_745A4((uint64_t)a2, &v13);
      uint64_t v5 = (void *)sub_FE016C(a1, v3);
      unsigned int v13 = *(_DWORD *)(sub_FE039C(v5, v13) + 480);
    }
    while (v13 != -1 && (int)v3-- > 0);
    unint64_t v8 = *a2;
    unint64_t v7 = a2[1];
    if (*a2 != v7)
    {
      unint64_t v9 = (_DWORD *)(v7 - 4);
      if ((unint64_t)v9 > v8)
      {
        unint64_t v10 = v8 + 4;
        do
        {
          int v11 = *(_DWORD *)(v10 - 4);
          *(_DWORD *)(v10 - 4) = *v9;
          *v9-- = v11;
          BOOL v12 = v10 >= (unint64_t)v9;
          v10 += 4;
        }
        while (!v12);
      }
    }
  }
}

void sub_FE0150(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FE016C(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v15;
    }
    else {
      unint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    BOOL v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 24 * a2;
}

void sub_FE02BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_FE039C(void *a1, unint64_t a2)
{
  if (0x4FBCDA3AC10C9715 * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    unint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0x4FBCDA3AC10C9715 * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v15;
    }
    else {
      unint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    BOOL v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 488 * a2;
}

void sub_FE04FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_FE05DC(uint64_t a1)
{
  uint64_t v2 = sub_F86C00(a1);
  *(_OWORD *)(v2 + 3944) = xmmword_20E22B0;
  *(void *)(v2 + 3960) = -1;
  *(_DWORD *)(v2 + 3968) = 0x7FFFFFFF;
  v4.n128_u64[0] = 0;
  v4.n128_u64[1] = (unint64_t)&off_2439090;
  sub_3E7814((__n128 *)(v2 + 3976), &v4);
  return a1;
}

void sub_FE0648(_Unwind_Exception *a1)
{
  sub_BF0DE8(v1);
  _Unwind_Resume(a1);
}

void sub_FE065C(int32x2_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, __int32 a6@<W5>, unsigned int a7@<W6>, char *a8@<X8>)
{
  sub_FE06D8(a1, a2, a3, a4, a5, a6, a7, 0, __p);
  sub_FE12D8(__p, a8);
  if (__p[0])
  {
    sub_FE2660((uint64_t)__p, (void **)__p[0]);
    operator delete(__p[0]);
  }
}

void sub_FE06C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FE1514((void ***)va);
  _Unwind_Resume(a1);
}

void sub_FE06D8(int32x2_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, __int32 a6@<W5>, unsigned int a7@<W6>, int a8@<W7>, void *a9@<X8>)
{
  unint64_t v10 = a1;
  a1[493].i32[0] = 0;
  int32x2_t v11 = a1[500];
  int32x2_t v12 = a1[499];
  while (*(void *)&v11 != *(void *)&v12)
  {
    if (*(char *)(*(void *)&v11 - 1) < 0) {
      operator delete(*(void **)(*(void *)&v11 - 24));
    }
    *(void *)&v11 -= 32;
  }
  v10[500] = v12;
  __p[0] = 0;
  __p[1] = 0;
  unsigned int v110 = 0;
  uint64_t v14 = *(const void **)a2;
  uint64_t v13 = *(void *)(a2 + 8);
  int64_t v15 = v13 - *(void *)a2;
  if (v13 != *(void *)a2)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v15 >> 4) > 0x333333333333333) {
      sub_2E00();
    }
    __p[0] = operator new(v15);
    unsigned int v110 = (char *)__p[0] + 16 * (v15 >> 4);
    size_t v16 = 80 * ((v15 - 80) / 0x50uLL) + 80;
    memcpy(__p[0], v14, v16);
    __p[1] = (char *)__p[0] + v16;
  }
  int v93 = (char **)&v10[499];
  uint64_t v111 = *(void *)(a2 + 24);
  v107[0] = 0;
  v107[1] = 0;
  uint64_t v108 = 0;
  __int32 v106 = 0;
  uint64_t v17 = a3[1] - *a3;
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v95 = v17 >> 5;
    unint64_t v96 = v10;
    while (1)
    {
      ++v106;
      uint64_t v100 = v18;
      uint64_t v19 = *a3 + 32 * v18;
      uint64_t v103 = 0;
      unsigned int v104 = 0;
      unsigned int v105 = 0;
      if (a8 == 2)
      {
        sub_F9FC48((uint64_t)&v103, (const void **)v19);
      }
      else
      {
        uint64_t v22 = *(char **)v19;
        unsigned int v23 = *(char **)(v19 + 8);
        while (v22 != v23)
        {
          long long v28 = v104;
          if (v104 >= (void *)v105)
          {
            long long v30 = v103;
            uint64_t v31 = ((char *)v104 - (unsigned char *)v103) >> 5;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 59) {
              sub_2E00();
            }
            uint64_t v33 = v105 - (unsigned char *)v103;
            if ((v105 - (unsigned char *)v103) >> 4 > v32) {
              unint64_t v32 = v33 >> 4;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34 >> 59) {
LABEL_128:
            }
              sub_188D718();
            uint64_t v35 = (char *)operator new(32 * v34);
            uint64_t v36 = &v35[32 * v31];
            *(void *)uint64_t v36 = 0;
            *((void *)v36 + 1) = 0;
            *((void *)v36 + 2) = 0;
            *((void *)v36 + 3) = -1;
            long long v29 = v36 + 32;
            if (v28 == v30)
            {
              uint64_t v103 = v36;
              unsigned int v104 = v36 + 32;
              unsigned int v105 = &v35[32 * v34];
            }
            else
            {
              uint64_t v37 = 0;
              do
              {
                long long v38 = &v36[v37 * 8];
                long long v39 = &v28[v37];
                *((_OWORD *)v38 - 2) = *(_OWORD *)&v28[v37 - 4];
                *((void *)v38 - 2) = v28[v37 - 2];
                *(v39 - 4) = 0;
                *(v39 - 3) = 0;
                *(v39 - 2) = 0;
                *((void *)v38 - 1) = v28[v37 - 1];
                v37 -= 4;
              }
              while (&v28[v37] != v30);
              long long v28 = v103;
              unint64_t v40 = v104;
              uint64_t v103 = &v36[v37 * 8];
              unsigned int v104 = v36 + 32;
              unsigned int v105 = &v35[32 * v34];
              if (v40 != v28)
              {
                long long v41 = v40;
                do
                {
                  char v43 = (void *)*(v41 - 4);
                  v41 -= 4;
                  long long v42 = v43;
                  if (v43)
                  {
                    *(v40 - 3) = v42;
                    operator delete(v42);
                  }
                  unint64_t v40 = v41;
                }
                while (v41 != v28);
              }
            }
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            *unsigned int v104 = 0;
            v28[1] = 0;
            long long v29 = v28 + 4;
            v28[2] = 0;
            v28[3] = -1;
          }
          unsigned int v104 = v29;
          uint64_t v44 = v22 + 8;
          uint64_t v45 = *(void *)v22;
          char v47 = (char *)*(v29 - 3);
          unint64_t v46 = *(v29 - 2);
          if ((unint64_t)v47 < v46)
          {
            *(void *)char v47 = v45;
            *(_OWORD *)(v47 + 8) = *v44;
            long long v24 = *(_OWORD *)(v22 + 24);
            long long v25 = *(_OWORD *)(v22 + 40);
            long long v26 = *(_OWORD *)(v22 + 56);
            *((void *)v47 + 9) = *((void *)v22 + 9);
            *(_OWORD *)(v47 + 56) = v26;
            *(_OWORD *)(v47 + 40) = v25;
            *(_OWORD *)(v47 + 24) = v24;
            long long v27 = v47 + 80;
          }
          else
          {
            int v48 = (unsigned char *)*(v29 - 4);
            unint64_t v49 = 0xCCCCCCCCCCCCCCCDLL * ((v47 - v48) >> 4) + 1;
            if (v49 > 0x333333333333333) {
              sub_2E00();
            }
            unint64_t v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v46 - (void)v48) >> 4);
            if (2 * v50 > v49) {
              unint64_t v49 = 2 * v50;
            }
            if (v50 >= 0x199999999999999) {
              unint64_t v51 = 0x333333333333333;
            }
            else {
              unint64_t v51 = v49;
            }
            if (v51)
            {
              if (v51 > 0x333333333333333) {
                goto LABEL_128;
              }
              long long v52 = (char *)operator new(80 * v51);
            }
            else
            {
              long long v52 = 0;
            }
            long long v53 = &v52[16 * ((v47 - v48) >> 4)];
            *(void *)long long v53 = v45;
            *(_OWORD *)(v53 + 8) = *v44;
            long long v54 = *(_OWORD *)(v22 + 24);
            long long v55 = *(_OWORD *)(v22 + 40);
            long long v56 = *(_OWORD *)(v22 + 56);
            *((void *)v53 + 9) = *((void *)v22 + 9);
            *(_OWORD *)(v53 + 56) = v56;
            *(_OWORD *)(v53 + 40) = v55;
            *(_OWORD *)(v53 + 24) = v54;
            __n128 v57 = v53;
            if (v47 != v48)
            {
              do
              {
                *((_OWORD *)v57 - 5) = *((_OWORD *)v47 - 5);
                long long v58 = *((_OWORD *)v47 - 4);
                long long v59 = *((_OWORD *)v47 - 3);
                long long v60 = *((_OWORD *)v47 - 1);
                *((_OWORD *)v57 - 2) = *((_OWORD *)v47 - 2);
                *((_OWORD *)v57 - 1) = v60;
                *((_OWORD *)v57 - 4) = v58;
                *((_OWORD *)v57 - 3) = v59;
                v57 -= 80;
                v47 -= 80;
              }
              while (v47 != v48);
              char v47 = (char *)*(v29 - 4);
            }
            long long v61 = &v52[80 * v51];
            long long v27 = v53 + 80;
            *(v29 - 4) = v57;
            *(v29 - 3) = v53 + 80;
            *(v29 - 2) = v61;
            if (v47) {
              operator delete(v47);
            }
          }
          *(v29 - 3) = v27;
          v22 += 80;
        }
      }
      unint64_t v10 = v96;
      BOOL v20 = sub_FE17FC(v96, (int32x2_t *)__p, (uint64_t)&v103, a5, a6, a7, (uint64_t *)v107);
      if (v20)
      {
        sub_FE1BBC((int32x2_t **)v107[1] - 3, a8, (uint64_t)v112);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        *(_OWORD *)long long __p = *(_OWORD *)v112;
        unsigned int v110 = v113;
        uint64_t v111 = v114;
        uint64_t v21 = v103;
        if (!v103) {
          goto LABEL_84;
        }
        goto LABEL_77;
      }
      v96[497] = (int32x2_t)10;
      v96[498] = (int32x2_t)&off_2439090;
      sub_FDDAE8("Failed to compute a path including waypoint ", (uint64_t)&v106, ".");
      int32x2_t v62 = v96[500];
      if (*(void *)&v62 >= *(void *)&v96[501]) {
        break;
      }
      **(unsigned char **)&int32x2_t v62 = 0;
      __n128 v63 = (unsigned char *)(*(void *)&v62 + 8);
      if (SHIBYTE(v113) < 0)
      {
        sub_4200(v63, v112[0], (unint64_t)v112[1]);
      }
      else
      {
        long long v64 = *(_OWORD *)v112;
        *(void *)(*(void *)&v62 + 24) = v113;
        *(_OWORD *)__n128 v63 = v64;
      }
      v96[500] = (int32x2_t)(*(void *)&v62 + 32);
      v96[500] = (int32x2_t)(*(void *)&v62 + 32);
      if (SHIBYTE(v113) < 0) {
        goto LABEL_89;
      }
LABEL_62:
      v96[502].i32[0] = v106;
      if (sub_723EC(3u))
      {
        sub_6BAC((uint64_t)v112);
        sub_CBB20C((unsigned __int8 *)(*(void *)&v96[500] - 32), (uint64_t)v101);
        if ((v102 & 0x80u) == 0) {
          long long v65 = v101;
        }
        else {
          long long v65 = (void **)v101[0];
        }
        if ((v102 & 0x80u) == 0) {
          uint64_t v66 = v102;
        }
        else {
          uint64_t v66 = (uint64_t)v101[1];
        }
        sub_188FC78(v112, (uint64_t)v65, v66);
        if ((char)v102 < 0) {
          operator delete(v101[0]);
        }
        std::stringbuf::str();
        sub_7246C((uint64_t *)v101, 3u);
        if ((char)v102 < 0) {
          operator delete(v101[0]);
        }
        v112[0] = v92;
        *(void **)((char *)v112 + *((void *)v92 - 3)) = v91;
        if (v116 < 0) {
          operator delete(v115);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
      }
      *a9 = 0;
      a9[1] = 0;
      a9[2] = 0;
      uint64_t v21 = v103;
      if (!v103) {
        goto LABEL_84;
      }
LABEL_77:
      long long v67 = v104;
      __n128 v68 = v21;
      if (v104 != v21)
      {
        long long v69 = v104;
        do
        {
          long long v71 = (void *)*(v69 - 4);
          v69 -= 4;
          long long v70 = v71;
          if (v71)
          {
            *(v67 - 3) = v70;
            operator delete(v70);
          }
          long long v67 = v69;
        }
        while (v69 != v21);
        __n128 v68 = v103;
      }
      unsigned int v104 = v21;
      operator delete(v68);
LABEL_84:
      if (!v20) {
        goto LABEL_123;
      }
      uint64_t v18 = v100 + 1;
      if (v100 + 1 == v95) {
        goto LABEL_90;
      }
    }
    v96[500] = (int32x2_t)sub_FE27D4(v93, (uint64_t)v112);
    if ((SHIBYTE(v113) & 0x80000000) == 0) {
      goto LABEL_62;
    }
LABEL_89:
    operator delete(v112[0]);
    goto LABEL_62;
  }
LABEL_90:
  v112[0] = 0;
  v112[1] = 0;
  unsigned int v113 = 0;
  long long v73 = *(const void **)a4;
  uint64_t v72 = *(void *)(a4 + 8);
  int64_t v74 = v72 - *(void *)a4;
  if (v72 != *(void *)a4)
  {
    if (0xCCCCCCCCCCCCCCCDLL * (v74 >> 4) > 0x333333333333333) {
      sub_2E00();
    }
    long long v75 = (char *)operator new(v74);
    v112[0] = v75;
    v112[1] = v75;
    unsigned int v113 = &v75[16 * (v74 >> 4)];
    size_t v76 = 80 * ((v74 - 80) / 0x50uLL) + 80;
    memcpy(v75, v73, v76);
    v112[1] = &v75[v76];
  }
  uint64_t v114 = *(void *)(a4 + 24);
  sub_BEF5AC(&v103, (uint64_t)v112, 1uLL);
  BOOL v77 = sub_FE17FC(v10, (int32x2_t *)__p, (uint64_t)&v103, a5, a6, a7, (uint64_t *)v107);
  long long v78 = v103;
  if (v103)
  {
    long long v79 = v104;
    long long v80 = v103;
    if (v104 != v103)
    {
      long long v81 = v104;
      do
      {
        long long v83 = (void *)*(v81 - 4);
        v81 -= 4;
        long long v82 = v83;
        if (v83)
        {
          *(v79 - 3) = v82;
          operator delete(v82);
        }
        long long v79 = v81;
      }
      while (v81 != v78);
      long long v80 = v103;
    }
    unsigned int v104 = v78;
    operator delete(v80);
  }
  if (v112[0])
  {
    v112[1] = v112[0];
    operator delete(v112[0]);
  }
  if (v77)
  {
    *(_OWORD *)a9 = *(_OWORD *)v107;
    a9[2] = v108;
  }
  else
  {
    ++v106;
    v10[497] = (int32x2_t)10;
    v10[498] = (int32x2_t)&off_2439090;
    int32x2_t v84 = v10[500];
    if (*(void *)&v84 >= *(void *)&v10[501])
    {
      long long v85 = sub_FE2988(v93, "Failed to compute a path including the destination.");
    }
    else
    {
      sub_FE2B08(v10 + 4008, *(unsigned char **)&v10[500], "Failed to compute a path including the destination.");
      long long v85 = (char *)(*(void *)&v84 + 32);
      v10[500] = (int32x2_t)(*(void *)&v84 + 32);
    }
    v10[500] = (int32x2_t)v85;
    v10[502].i32[0] = v106;
    if (sub_723EC(3u))
    {
      sub_6BAC((uint64_t)v112);
      sub_CBB20C((unsigned __int8 *)(*(void *)&v10[500] - 32), (uint64_t)&v103);
      if (SHIBYTE(v105) >= 0) {
        long long v86 = &v103;
      }
      else {
        long long v86 = v103;
      }
      if (SHIBYTE(v105) >= 0) {
        uint64_t v87 = HIBYTE(v105);
      }
      else {
        uint64_t v87 = (uint64_t)v104;
      }
      sub_188FC78(v112, (uint64_t)v86, v87);
      if (SHIBYTE(v105) < 0) {
        operator delete(v103);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)&v103, 3u);
      if (SHIBYTE(v105) < 0) {
        operator delete(v103);
      }
      if (v116 < 0) {
        operator delete(v115);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
LABEL_123:
    if (v107[0])
    {
      sub_FE2660((uint64_t)v107, (void **)v107[0]);
      operator delete(v107[0]);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_FE11C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void **a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a49);
  sub_FE1514(&a41);
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void sub_FE12D8(void *a1@<X1>, char *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if (*a1 == v3 || *(void *)(v3 - 24) == *(void *)(v3 - 16))
  {
    sub_EB1D94(a2);
  }
  else
  {
    sub_FE1F8C(a1, (unint64_t *)&__p);
    uint64_t v5 = (void *)sub_FE207C(a1, 0);
    unint64_t v6 = (unsigned int *)sub_FDE5B4(&__p, 0);
    long long v7 = (long long *)sub_FE22AC(v5, *v6);
    sub_4456B4(a2, v7);
    uint64_t v8 = a1[1];
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3);
    if (v9 <= 1) {
      unint64_t v10 = 1;
    }
    else {
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3);
    }
    if (v9 >= 2)
    {
      unint64_t v11 = 1;
      do
      {
        int32x2_t v12 = (void *)sub_FE207C(a1, v11);
        uint64_t v13 = (unsigned int *)sub_FDE5B4(&__p, v11);
        uint64_t v14 = sub_FE22AC(v12, *v13);
        if (!sub_EB29DC((uint64_t)a2)
          || !sub_EB29DC(v14)
          || (unsigned int v15 = *(_DWORD *)sub_EB22DC((uint64_t)a2),
              unsigned int v16 = *(_DWORD *)sub_486CB4(v14),
              uint64_t v17 = (_DWORD *)sub_EB2F38((uint64_t)a2, 0),
              uint64_t v18 = (void *)sub_EB2F38(v14, 0),
              *v17 == *v18)
          && (v17[1] == HIDWORD(*v18) ? (BOOL v19 = v16 > v15) : (BOOL v19 = 0), v19))
        {
          sub_EB3B28((uint64_t)a2, v14);
        }
        ++v11;
      }
      while (v10 != v11);
      uint64_t v8 = a1[1];
    }
    uint64_t v20 = sub_FE22AC((void *)(v8 - 24), *(v28 - 1));
    uint64_t v21 = sub_486CB4(v20);
    v25[0] = *(_OWORD *)v21;
    long long v22 = *(_OWORD *)(v21 + 16);
    long long v23 = *(_OWORD *)(v21 + 32);
    long long v24 = *(_OWORD *)(v21 + 48);
    uint64_t v26 = *(void *)(v21 + 64);
    v25[2] = v23;
    v25[3] = v24;
    v25[1] = v22;
    sub_EB241C((uint64_t)a2, (uint64_t)v25);
    if (__p)
    {
      long long v28 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_FE14DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  sub_4451C0(v19);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ***sub_FE1514(void ***a1)
{
  if (*a1)
  {
    sub_FE2660((uint64_t)a1, *a1);
    operator delete(*a1);
  }
  return a1;
}

void sub_FE1550(int32x2_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, __int32 a6@<W5>, unsigned int a7@<W6>, std::string *a8@<X8>)
{
  sub_FE06D8(a1, a2, a3, a4, a5, a6, a7, 1, __p);
  sub_FE15CC(__p, a8);
  if (__p[0])
  {
    sub_FE2660((uint64_t)__p, (void **)__p[0]);
    operator delete(__p[0]);
  }
}

void sub_FE15B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FE1514((void ***)va);
  _Unwind_Resume(a1);
}

double sub_FE15CC@<D0>(void *a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v3 = a1[1];
  if (*a1 == v3 || *(void *)(v3 - 24) == *(void *)(v3 - 16))
  {
    return sub_47E0E4(a2);
  }
  else
  {
    sub_FE1F8C(a1, (unint64_t *)v19);
    long long __p = 0;
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    uint64_t v5 = a1[1] - *a1;
    if (v5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = v5 / 24;
      do
      {
        while (1)
        {
          uint64_t v8 = (void *)sub_FE207C(a1, v6);
          unint64_t v9 = (unsigned int *)sub_FDE5B4(v19, v6);
          unint64_t v10 = (long long *)sub_FE22AC(v8, *v9);
          unint64_t v11 = v17;
          if ((unint64_t)v17 < v18) {
            break;
          }
          uint64_t v17 = sub_EB7C40((long long **)&__p, v10);
          if (v7 == ++v6) {
            goto LABEL_8;
          }
        }
        sub_4456B4(v17, v10);
        uint64_t v17 = v11 + 480;
        ++v6;
      }
      while (v7 != v6);
    }
LABEL_8:
    sub_EA84CC(a2, (uint64_t *)&__p);
    uint64_t v13 = (char *)__p;
    if (__p)
    {
      uint64_t v14 = v17;
      unsigned int v15 = __p;
      if (v17 != __p)
      {
        do
          uint64_t v14 = (char *)sub_4451C0((uint64_t)(v14 - 480));
        while (v14 != v13);
        unsigned int v15 = __p;
      }
      uint64_t v17 = v13;
      operator delete(v15);
    }
    if (v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
  }
  return result;
}

void sub_FE1748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_FE177C(int32x2_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, __int32 a6@<W6>, unsigned int a7@<W7>, std::string *a8@<X8>)
{
  sub_FE06D8(a1, a2, a3, a4, a5, a6, a7, 2, __p);
  sub_FE15CC(__p, a8);
  if (__p[0])
  {
    sub_FE2660((uint64_t)__p, (void **)__p[0]);
    operator delete(__p[0]);
  }
}

void sub_FE17E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FE1514((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_FE17FC(int32x2_t *a1, int32x2_t *a2, uint64_t a3, uint64_t a4, __int32 a5, unsigned int a6, uint64_t *a7)
{
  long long __p = 0;
  unint64_t v32 = 0;
  unint64_t v33 = 0;
  sub_FE1DF8((uint64_t)&__p, (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5);
  sub_F88F70(a1, a2, (unsigned int ***)a3, a4, 0x7FFFFFFF, 0, a5, 0x7FFFFFFF, a6, 0, 0xFFFFFFFF);
  a1[493].i32[0] += sub_F76A1C((uint64_t)a1);
  sub_F8A7A8((uint64_t)a1, (uint64_t)v34);
  sub_33998((uint64_t)&a1[493] + 4, (uint64_t)v34);
  uint64_t v14 = a7[1];
  if (*a7 == v14) {
    LODWORD(v15) = 1;
  }
  else {
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL
  }
        * ((uint64_t)(*(void *)&a2[1] - *(void *)a2) >> 4)
        / (0xEF7BDEF7BDEF7BDFLL
         * ((uint64_t)(*(void *)(v14 - 16) - *(void *)(v14 - 24)) >> 4));
  uint64_t v16 = sub_F7571C((uint64_t)a1);
  uint64_t v17 = *(unint64_t **)v16;
  unint64_t v18 = *(unint64_t **)(v16 + 8);
  if (*(unint64_t **)v16 != v18)
  {
    uint64_t v19 = v32;
    do
    {
      unint64_t v20 = *v17;
      if ((unint64_t)v19 >= v33)
      {
        uint64_t v21 = sub_FE3B98((uint64_t *)&__p);
      }
      else
      {
        *((_OWORD *)v19 + 29) = 0u;
        *((_OWORD *)v19 + 30) = 0u;
        *((_OWORD *)v19 + 27) = 0u;
        *((_OWORD *)v19 + 28) = 0u;
        *((_OWORD *)v19 + 25) = 0u;
        *((_OWORD *)v19 + 26) = 0u;
        *((_OWORD *)v19 + 23) = 0u;
        *((_OWORD *)v19 + 24) = 0u;
        *((_OWORD *)v19 + 21) = 0u;
        *((_OWORD *)v19 + 22) = 0u;
        *((_OWORD *)v19 + 19) = 0u;
        *((_OWORD *)v19 + 20) = 0u;
        *((_OWORD *)v19 + 17) = 0u;
        *((_OWORD *)v19 + 18) = 0u;
        *((_OWORD *)v19 + 15) = 0u;
        *((_OWORD *)v19 + 16) = 0u;
        *((_OWORD *)v19 + 13) = 0u;
        *((_OWORD *)v19 + 14) = 0u;
        *((_OWORD *)v19 + 11) = 0u;
        *((_OWORD *)v19 + 12) = 0u;
        *((_OWORD *)v19 + 9) = 0u;
        *((_OWORD *)v19 + 10) = 0u;
        *((_OWORD *)v19 + 7) = 0u;
        *((_OWORD *)v19 + 8) = 0u;
        *((_OWORD *)v19 + 5) = 0u;
        *((_OWORD *)v19 + 6) = 0u;
        *((_OWORD *)v19 + 3) = 0u;
        *((_OWORD *)v19 + 4) = 0u;
        *((_OWORD *)v19 + 1) = 0u;
        *((_OWORD *)v19 + 2) = 0u;
        *(_OWORD *)uint64_t v19 = 0u;
        sub_EB1D94(v19);
        *((void *)v19 + 60) = 0x7FFFFFFFFFFFFFFFLL;
        *((_DWORD *)v19 + 122) = -1;
        uint64_t v21 = v19 + 496;
      }
      unint64_t v32 = v21;
      sub_F898AC(a1, v20, (uint64_t)v34);
      sub_4495AC((uint64_t)(v32 - 496), v34);
      sub_4451C0((uint64_t)v34);
      uint64_t v22 = sub_F75724((uint64_t)a1, v20);
      *((void *)v32 - 2) = v22;
      unsigned int v23 = sub_F89400((uint64_t)a1, v20);
      uint64_t v19 = v32;
      *((_DWORD *)v32 - 2) = v23 / v15;
      ++v17;
    }
    while (v17 != v18);
  }
  long long v24 = (void *)a7[1];
  if ((unint64_t)v24 >= a7[2])
  {
    uint64_t v25 = sub_FE3D94(a7, (uint64_t *)&__p);
  }
  else
  {
    *long long v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    sub_FE3F34(v24, (uint64_t)__p, (uint64_t)v32, 0xEF7BDEF7BDEF7BDFLL * ((v32 - (unsigned char *)__p) >> 4));
    uint64_t v25 = (uint64_t)(v24 + 3);
    a7[1] = (uint64_t)(v24 + 3);
  }
  a7[1] = v25;
  uint64_t v26 = (char *)__p;
  long long v27 = v32;
  if (__p)
  {
    long long v28 = __p;
    if (__p != v32)
    {
      long long v29 = v32;
      do
        long long v29 = (char *)sub_4451C0((uint64_t)(v29 - 496));
      while (v29 != v26);
      long long v28 = __p;
    }
    unint64_t v32 = v26;
    operator delete(v28);
  }
  return v26 != v27;
}

void sub_FE1AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_FE1F30((void **)va);
  _Unwind_Resume(a1);
}

void sub_FE1B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  *(void *)(v3 + 8) = v4;
  sub_FE1F30((void **)va);
  _Unwind_Resume(a1);
}

void sub_FE1B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_FE1F30((void **)va);
  _Unwind_Resume(a1);
}

void sub_FE1B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_FE1F30((void **)va);
  _Unwind_Resume(a1);
}

void sub_FE1B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_FE1F30((void **)va);
  _Unwind_Resume(a1);
}

void sub_FE1B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_FE1F30((void **)va);
  _Unwind_Resume(a1);
}

void sub_FE1B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_FE1F30((void **)va);
  _Unwind_Resume(a1);
}

void sub_FE1B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_FE1F30((void **)va);
  _Unwind_Resume(a1);
}

void sub_FE1B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_FE1F30((void **)va);
  _Unwind_Resume(a1);
}

void sub_FE1BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_FE1F30((void **)va);
  _Unwind_Resume(a1);
}

void sub_FE1BBC(int32x2_t **a1@<X1>, int a2@<W3>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = -1;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    if (a2 == 2)
    {
      do
      {
        unint64_t v6 = sub_EB2A48((uint64_t)v4);
        LODWORD(v21) = 0;
        *((void *)&v21 + 1) = 0;
        *(void *)&long long v22 = 0;
        BYTE8(v22) = 0;
        *(void *)&long long v23 = 0x3FF0000000000000;
        BYTE8(v23) = 1;
        memset(v24, 0, 17);
        *(_DWORD *)&v24[18] = 36000;
        v24[22] = 0;
        uint64_t v7 = sub_486CB4((uint64_t)v4);
        long long v8 = *(_OWORD *)(v7 + 16);
        long long v9 = *(_OWORD *)(v7 + 32);
        uint64_t v10 = *(void *)(v7 + 63);
        *(_OWORD *)long long v24 = *(_OWORD *)(v7 + 48);
        long long v11 = *(_OWORD *)v7;
        *(void *)&v24[15] = v10;
        long long v22 = v8;
        long long v23 = v9;
        long long v21 = v11;
        *(int32x2_t *)long long v24 = vadd_s32(v4[60], *(int32x2_t *)v24);
        unint64_t v25 = v6;
        sub_BF6964((char **)a3, &v25, &v21);
        LODWORD(v21) = 1000000000 - v21;
        v24[16] ^= 1u;
        BYTE8(v22) ^= 1u;
        unsigned int v12 = (2 * HIDWORD(v6)) & 0x40000000;
        if ((HIDWORD(v6) & 0x60000000) != 0x40000000 && v12 == 0) {
          int v14 = 0x40000000;
        }
        else {
          int v14 = 0;
        }
        unint64_t v25 = v6 | ((unint64_t)((HIDWORD(v6) & 0x9FFFFFFF | (v12 >> 1) | v14) ^ 0x10000000) << 32);
        sub_BF6964((char **)a3, &v25, &v21);
        v4 += 62;
      }
      while (v4 != v5);
    }
    else
    {
      do
      {
        unint64_t v15 = sub_EB2A48((uint64_t)v4);
        LODWORD(v21) = 0;
        *((void *)&v21 + 1) = 0;
        *(void *)&long long v22 = 0;
        BYTE8(v22) = 0;
        *(void *)&long long v23 = 0x3FF0000000000000;
        BYTE8(v23) = 1;
        memset(v24, 0, 17);
        *(_DWORD *)&v24[18] = 36000;
        v24[22] = 0;
        uint64_t v16 = sub_486CB4((uint64_t)v4);
        long long v17 = *(_OWORD *)(v16 + 16);
        long long v18 = *(_OWORD *)(v16 + 32);
        uint64_t v19 = *(void *)(v16 + 63);
        *(_OWORD *)long long v24 = *(_OWORD *)(v16 + 48);
        long long v20 = *(_OWORD *)v16;
        *(void *)&v24[15] = v19;
        long long v22 = v17;
        long long v23 = v18;
        long long v21 = v20;
        *(int32x2_t *)long long v24 = vadd_s32(v4[60], *(int32x2_t *)v24);
        unint64_t v25 = v15;
        sub_BF6964((char **)a3, &v25, &v21);
        v4 += 62;
      }
      while (v4 != v5);
    }
  }
}

void sub_FE1DD0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_FE1DF8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(long long **)a1;
  if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x84210842108422) {
    sub_2E00();
  }
  uint64_t v5 = *(long long **)(a1 + 8);
  uint64_t v6 = 496 * a2;
  uint64_t v7 = (char *)operator new(496 * a2);
  long long v8 = &v7[v6];
  long long v9 = &v7[(char *)v5 - (char *)v3];
  if (v5 == v3)
  {
    *(void *)a1 = v9;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v8;
    if (!v3) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v10 = (uint64_t)&v7[(char *)v5 - (char *)v3];
  do
  {
    v10 -= 496;
    v5 -= 31;
    sub_FE3A08(v2, v10, v5);
  }
  while (v5 != v3);
  long long v11 = *(long long **)a1;
  uint64_t v3 = *(long long **)(a1 + 8);
  *(void *)a1 = v10;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v8;
  if (v3 != v11)
  {
    do
    {
      v3 -= 31;
      sub_4451C0((uint64_t)v3);
    }
    while (v3 != v11);
    uint64_t v3 = v11;
  }
  if (v3)
  {
LABEL_10:
    operator delete(v3);
  }
}

void **sub_FE1F30(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_4451C0(v3 - 496);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_FE1F8C(void *a1@<X1>, unint64_t *a2@<X8>)
{
  unsigned int v13 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  unint64_t v3 = -1431655765 * ((a1[1] - *a1) >> 3) - 1;
  if ((v3 & 0x80000000) == 0)
  {
    do
    {
      sub_745A4((uint64_t)a2, &v13);
      uint64_t v5 = (void *)sub_FE207C(a1, v3);
      unsigned int v13 = *(_DWORD *)(sub_FE22AC(v5, v13) + 488);
    }
    while (v13 != -1 && (int)v3-- > 0);
    unint64_t v8 = *a2;
    unint64_t v7 = a2[1];
    if (*a2 != v7)
    {
      long long v9 = (_DWORD *)(v7 - 4);
      if ((unint64_t)v9 > v8)
      {
        unint64_t v10 = v8 + 4;
        do
        {
          int v11 = *(_DWORD *)(v10 - 4);
          *(_DWORD *)(v10 - 4) = *v9;
          *v9-- = v11;
          BOOL v12 = v10 >= (unint64_t)v9;
          v10 += 4;
        }
        while (!v12);
      }
    }
  }
}

void sub_FE2060(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FE207C(void *a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v15;
    }
    else {
      unint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    BOOL v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 24 * a2;
}

void sub_FE21CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

uint64_t sub_FE22AC(void *a1, unint64_t a2)
{
  if (0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a1[1] - *a1) >> 4) <= a2)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    std::to_string(&v16, a2);
    uint64_t v6 = std::string::insert(&v16, 0, "Out-of-bounds access in Vector::at with index=");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, ",size=");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, 0xEF7BDEF7BDEF7BDFLL * ((uint64_t)(a1[1] - *a1) >> 4));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v10 = &v15;
    }
    else {
      unint64_t v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    BOOL v12 = std::string::append(&v18, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v20 = v12->__r_.__value_.__r.__words[2];
    long long v19 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    int v14 = (void *)sub_2F404((uint64_t)exception, &v19);
  }
  return *a1 + 496 * a2;
}

void sub_FE240C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((a33 & 0x80000000) == 0)
    {
LABEL_5:
      if ((a26 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
LABEL_10:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0) {
LABEL_11:
  }
    _Unwind_Resume(a1);
LABEL_7:
  operator delete(__p);
  goto LABEL_11;
}

void sub_FE24EC(uint64_t a1, void **a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = *(void ***)(a1 + 8);
    do
    {
      unint64_t v8 = (void **)*(v5 - 3);
      v5 -= 3;
      long long v7 = v8;
      if (v8)
      {
        long long v9 = (void **)*(v4 - 2);
        uint64_t v6 = v7;
        if (v9 != v7)
        {
          do
          {
            unint64_t v10 = *(v9 - 30);
            if (v10)
            {
              *(v9 - 29) = v10;
              operator delete(v10);
            }
            int v11 = *(v9 - 33);
            if (v11)
            {
              *(v9 - 32) = v11;
              operator delete(v11);
            }
            BOOL v12 = *(v9 - 41);
            if (v12)
            {
              *(v9 - 40) = v12;
              operator delete(v12);
            }
            long long v13 = *(v9 - 44);
            if (v13)
            {
              *(v9 - 43) = v13;
              operator delete(v13);
            }
            int v14 = (char *)*(v9 - 47);
            if (v14)
            {
              std::string v15 = (char *)*(v9 - 46);
              std::string v16 = *(v9 - 47);
              if (v15 != v14)
              {
                do
                {
                  std::string v17 = (void *)*((void *)v15 - 3);
                  if (v17)
                  {
                    *((void *)v15 - 2) = v17;
                    operator delete(v17);
                  }
                  v15 -= 56;
                }
                while (v15 != v14);
                std::string v16 = *(v9 - 47);
              }
              *(v9 - 46) = v14;
              operator delete(v16);
            }
            std::string v18 = *(v9 - 58);
            if (v18)
            {
              *(v9 - 57) = v18;
              operator delete(v18);
            }
            long long v19 = v9 - 61;
            if (*((char *)v9 - 465) < 0) {
              operator delete(*v19);
            }
            v9 -= 61;
          }
          while (v19 != v7);
          uint64_t v6 = *v5;
        }
        *(v4 - 2) = v7;
        operator delete(v6);
      }
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

void sub_FE2660(uint64_t a1, void **a2)
{
  uint64_t v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = *(void ***)(a1 + 8);
    do
    {
      unint64_t v8 = (void **)*(v5 - 3);
      v5 -= 3;
      long long v7 = v8;
      if (v8)
      {
        long long v9 = (void **)*(v4 - 2);
        uint64_t v6 = v7;
        if (v9 != v7)
        {
          do
          {
            unint64_t v10 = *(v9 - 30);
            if (v10)
            {
              *(v9 - 29) = v10;
              operator delete(v10);
            }
            int v11 = *(v9 - 33);
            if (v11)
            {
              *(v9 - 32) = v11;
              operator delete(v11);
            }
            BOOL v12 = *(v9 - 41);
            if (v12)
            {
              *(v9 - 40) = v12;
              operator delete(v12);
            }
            long long v13 = *(v9 - 44);
            if (v13)
            {
              *(v9 - 43) = v13;
              operator delete(v13);
            }
            int v14 = (char *)*(v9 - 47);
            if (v14)
            {
              std::string v15 = (char *)*(v9 - 46);
              std::string v16 = *(v9 - 47);
              if (v15 != v14)
              {
                do
                {
                  std::string v17 = (void *)*((void *)v15 - 3);
                  if (v17)
                  {
                    *((void *)v15 - 2) = v17;
                    operator delete(v17);
                  }
                  v15 -= 56;
                }
                while (v15 != v14);
                std::string v16 = *(v9 - 47);
              }
              *(v9 - 46) = v14;
              operator delete(v16);
            }
            std::string v18 = *(v9 - 59);
            if (v18)
            {
              *(v9 - 58) = v18;
              operator delete(v18);
            }
            long long v19 = v9 - 62;
            if (*((char *)v9 - 473) < 0) {
              operator delete(*v19);
            }
            v9 -= 62;
          }
          while (v19 != v7);
          uint64_t v6 = *v5;
        }
        *(v4 - 2) = v7;
        operator delete(v6);
      }
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

char *sub_FE27D4(char **a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = (v4 - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v6) {
    unint64_t v6 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v6;
  }
  if (v9)
  {
    if (v9 >> 59) {
      sub_188D718();
    }
    unint64_t v10 = (char *)operator new(32 * v9);
  }
  else
  {
    unint64_t v10 = 0;
  }
  int v11 = &v10[32 * v5];
  long long v19 = v11;
  std::string::size_type v20 = v11;
  long long v21 = &v10[32 * v9];
  *int v11 = 0;
  BOOL v12 = v11 + 8;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_4200(v12, *(void **)a2, *(void *)(a2 + 8));
    unint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    int v11 = v19;
    long long v13 = v20 + 32;
    if (v4 == *a1)
    {
LABEL_17:
      std::string v16 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)BOOL v12 = *(_OWORD *)a2;
    *((void *)v11 + 3) = *(void *)(a2 + 16);
    long long v13 = v11 + 32;
    if (v4 == v3) {
      goto LABEL_17;
    }
  }
  do
  {
    char v14 = *(v4 - 32);
    v4 -= 32;
    *(v11 - 32) = v14;
    v11 -= 32;
    long long v15 = *(_OWORD *)(v4 + 8);
    *((void *)v11 + 3) = *((void *)v4 + 3);
    *(_OWORD *)(v11 + 8) = v15;
    *((void *)v4 + 2) = 0;
    *((void *)v4 + 3) = 0;
    *((void *)v4 + 1) = 0;
  }
  while (v4 != v3);
  std::string v16 = *a1;
  unint64_t v3 = a1[1];
LABEL_18:
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v21;
  if (v3 == v16)
  {
    if (v3) {
LABEL_20:
    }
      operator delete(v3);
  }
  else
  {
    do
    {
      std::string v18 = v3 - 32;
      if (*(v3 - 1) < 0) {
        operator delete(*((void **)v3 - 3));
      }
      v3 -= 32;
    }
    while (v18 != v16);
    unint64_t v3 = v16;
    if (v16) {
      goto LABEL_20;
    }
  }
  return v13;
}

void sub_FE2974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_FE2988(char **a1, char *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 5;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59) {
    sub_2E00();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 4 > v4) {
    unint64_t v4 = v6 >> 4;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  if (v7)
  {
    if (v7 >> 59) {
      sub_188D718();
    }
    uint64_t v8 = (char *)operator new(32 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::string v17 = &v8[32 * v3];
  std::string v18 = &v8[32 * v7];
  sub_FE2B08(a1 + 16, v17, a2);
  unint64_t v9 = v17;
  unint64_t v10 = v17 + 32;
  int v11 = *a1;
  BOOL v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v17;
    a1[1] = v10;
    a1[2] = v18;
  }
  else
  {
    do
    {
      char v13 = *(v12 - 32);
      v12 -= 32;
      *(v9 - 32) = v13;
      v9 -= 32;
      long long v14 = *(_OWORD *)(v12 + 8);
      *((void *)v9 + 3) = *((void *)v12 + 3);
      *(_OWORD *)(v9 + 8) = v14;
      *((void *)v12 + 2) = 0;
      *((void *)v12 + 3) = 0;
      *((void *)v12 + 1) = 0;
    }
    while (v12 != v11);
    long long v15 = *a1;
    BOOL v12 = a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v18;
    if (v12 != v15)
    {
      do
      {
        if (*(v12 - 1) < 0) {
          operator delete(*((void **)v12 - 3));
        }
        v12 -= 32;
      }
      while (v12 != v15);
      BOOL v12 = v15;
    }
  }
  if (v12) {
    operator delete(v12);
  }
  return v17 + 32;
}

void sub_FE2AF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21F404((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_FE2B08(int a1, unsigned char *a2, char *__s)
{
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_188D690();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (long long *)operator new(v9 + 1);
    *((void *)&__dst + 1) = v6;
    unint64_t v13 = v10 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_9:
    memcpy(p_dst, __s, v6);
    *((unsigned char *)p_dst + v6) = 0;
    *a2 = 0;
    uint64_t v8 = a2 + 8;
    if ((SHIBYTE(v13) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  HIBYTE(v13) = v5;
  p_dst = &__dst;
  if (v5) {
    goto LABEL_9;
  }
  LOBYTE(__dst) = 0;
  *a2 = 0;
  uint64_t v8 = a2 + 8;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
LABEL_5:
    *(_OWORD *)uint64_t v8 = __dst;
    *((void *)v8 + 2) = v13;
    return;
  }
LABEL_10:
  int v11 = (void *)__dst;
  sub_4200(v8, (void *)__dst, *((unint64_t *)&__dst + 1));

  operator delete(v11);
}

void sub_FE2C24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FE2C38(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 488;
    sub_405F44(i - 488);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_FE2C8C(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 40) = *((void *)a3 + 5);
  *((void *)a3 + 3) = 0;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  long long v4 = a3[3];
  long long v5 = a3[4];
  long long v6 = a3[5];
  *(_OWORD *)(a2 + 94) = *(long long *)((char *)a3 + 94);
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 112) = a3[7];
  *(void *)(a2 + 128) = *((void *)a3 + 16);
  *((void *)a3 + 14) = 0;
  *((void *)a3 + 15) = 0;
  *((void *)a3 + 16) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 136) = *(long long *)((char *)a3 + 136);
  *(void *)(a2 + 152) = *((void *)a3 + 19);
  *((void *)a3 + 17) = 0;
  *((void *)a3 + 18) = 0;
  *((void *)a3 + 19) = 0;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(_OWORD *)(a2 + 160) = a3[10];
  *(void *)(a2 + 176) = *((void *)a3 + 22);
  *((void *)a3 + 20) = 0;
  *((void *)a3 + 21) = 0;
  *((void *)a3 + 22) = 0;
  long long v7 = *(long long *)((char *)a3 + 184);
  uint64_t v8 = *((void *)a3 + 27);
  *(_OWORD *)(a2 + 200) = *(long long *)((char *)a3 + 200);
  *(_OWORD *)(a2 + 184) = v7;
  *(void *)(a2 + 216) = v8;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *(_OWORD *)(a2 + 224) = a3[14];
  *(void *)(a2 + 240) = *((void *)a3 + 30);
  *((void *)a3 + 28) = 0;
  *((void *)a3 + 29) = 0;
  *((void *)a3 + 30) = 0;
  *(void *)(a2 + 248) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(_OWORD *)(a2 + 248) = *(long long *)((char *)a3 + 248);
  *(void *)(a2 + 264) = *((void *)a3 + 33);
  *((void *)a3 + 31) = 0;
  *((void *)a3 + 32) = 0;
  *((void *)a3 + 33) = 0;
  *(_OWORD *)(a2 + 272) = a3[17];
  *(_DWORD *)(a2 + 296) = *((_DWORD *)a3 + 74);
  if (*((_DWORD *)a3 + 74) <= 1u) {
    *(void *)(a2 + 288) = *((void *)a3 + 36);
  }
  *(_OWORD *)(a2 + 304) = a3[19];
  long long v9 = a3[25];
  long long v11 = a3[22];
  long long v10 = a3[23];
  *(_OWORD *)(a2 + 384) = a3[24];
  *(_OWORD *)(a2 + 400) = v9;
  *(_OWORD *)(a2 + 352) = v11;
  *(_OWORD *)(a2 + 368) = v10;
  long long v13 = a3[27];
  long long v12 = a3[28];
  long long v14 = a3[26];
  *(void *)(a2 + 463) = *(void *)((char *)a3 + 463);
  *(_OWORD *)(a2 + 432) = v13;
  *(_OWORD *)(a2 + 448) = v12;
  *(_OWORD *)(a2 + 416) = v14;
  __n128 result = (__n128)a3[20];
  long long v16 = a3[21];
  *(__n128 *)(a2 + 320) = result;
  *(_OWORD *)(a2 + 336) = v16;
  uint64_t v17 = *((void *)a3 + 59);
  *(_DWORD *)(a2 + 480) = *((_DWORD *)a3 + 120);
  *(void *)(a2 + 472) = v17;
  return result;
}

uint64_t sub_FE2E0C(uint64_t *a1)
{
  uint64_t v2 = 0x4FBCDA3AC10C9715 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x864B8A7DE6D1D6) {
    sub_2E00();
  }
  if (0x9F79B47582192E2ALL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x9F79B47582192E2ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4FBCDA3AC10C9715 * ((a1[2] - *a1) >> 3)) >= 0x4325C53EF368EBLL) {
    unint64_t v4 = 0x864B8A7DE6D1D6;
  }
  else {
    unint64_t v4 = v3;
  }
  if (v4)
  {
    if (v4 > 0x864B8A7DE6D1D6) {
      sub_188D718();
    }
    long long v5 = (char *)operator new(488 * v4);
  }
  else
  {
    long long v5 = 0;
  }
  uint64_t v12 = (uint64_t)&v5[488 * v2];
  long long v13 = &v5[488 * v4];
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_OWORD *)(v12 + 320) = 0u;
  *(_OWORD *)(v12 + 336) = 0u;
  *(_OWORD *)(v12 + 352) = 0u;
  *(_OWORD *)(v12 + 368) = 0u;
  *(_OWORD *)(v12 + 384) = 0u;
  *(_OWORD *)(v12 + 400) = 0u;
  *(_OWORD *)(v12 + 416) = 0u;
  *(_OWORD *)(v12 + 432) = 0u;
  *(_OWORD *)(v12 + 448) = 0u;
  *(_OWORD *)(v12 + 464) = 0u;
  *(void *)(v12 + 480) = 0;
  sub_EAD400(v12);
  *(void *)(v12 + 472) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(v12 + 480) = -1;
  uint64_t v6 = v12;
  uint64_t v7 = v12 + 488;
  long long v9 = (long long *)*a1;
  uint64_t v8 = (long long *)a1[1];
  if (v8 == (long long *)*a1)
  {
    *a1 = v12;
    a1[1] = v7;
    a1[2] = (uint64_t)v13;
  }
  else
  {
    do
    {
      v6 -= 488;
      uint64_t v8 = (long long *)((char *)v8 - 488);
      sub_FE2C8C((uint64_t)(a1 + 2), v6, v8);
    }
    while (v8 != v9);
    long long v10 = (long long *)*a1;
    uint64_t v8 = (long long *)a1[1];
    *a1 = v6;
    a1[1] = v7;
    a1[2] = (uint64_t)v13;
    if (v8 != v10)
    {
      do
      {
        uint64_t v8 = (long long *)((char *)v8 - 488);
        sub_405F44((uint64_t)v8);
      }
      while (v8 != v10);
      uint64_t v8 = v10;
    }
  }
  if (v8) {
    operator delete(v8);
  }
  return v12 + 488;
}

void sub_FE2FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FE2C38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_FE3008(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  std::string::size_type v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  long long __p = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  long long v19 = &v7[24 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  sub_FE31A8(v8, *a2, a2[1], 0x4FBCDA3AC10C9715 * ((a2[1] - *a2) >> 3));
  uint64_t v9 = v18.i64[0];
  uint64_t v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  uint64_t v12 = (void *)*a1;
  long long v11 = (void *)a1[1];
  if (v11 == (void *)*a1)
  {
    int64x2_t v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      v9 -= 24;
      *(void *)(v9 + 16) = 0;
      long long v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)uint64_t v9 = v13;
      *(void *)(v9 + 16) = v11[2];
      *long long v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    int64x2_t v14 = *(int64x2_t *)a1;
    uint64_t v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  int64x2_t v18 = v14;
  long long v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  long long v19 = v15;
  long long __p = (void *)v14.i64[0];
  sub_FE3384((uint64_t)&__p, (void **)v14.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

void sub_FE3194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FE334C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_FE31A8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x864B8A7DE6D1D7) {
      sub_2E00();
    }
    __n128 result = operator new(488 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[61 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        __n128 result = sub_443EFC((char *)&v8[v9 / 8], (long long *)(a2 + v9));
        result[59] = *(void *)(a2 + v9 + 472);
        *((_DWORD *)result + 120) = *(_DWORD *)(a2 + v9 + 480);
        v9 += 488;
      }
      while (a2 + v9 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_FE3280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_FE3294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 488)
    sub_405F44(v10 - 488 + v11);
  *(void *)(v9 + 8) = v10;
  sub_FE32C4(&a9);
  _Unwind_Resume(a1);
}

void ***sub_FE32C4(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v2 = *result;
    unint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_405F44(v4 - 488);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_FE334C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_FE3384(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    long long v5 = *(void ***)(a1 + 16);
    do
    {
      uint64_t v8 = (void **)*(v5 - 3);
      v5 -= 3;
      uint64_t v7 = v8;
      *(void *)(a1 + 16) = v5;
      if (v8)
      {
        uint64_t v9 = (void **)*(v2 - 2);
        unint64_t v6 = v7;
        if (v9 != v7)
        {
          do
          {
            uint64_t v10 = *(v9 - 30);
            if (v10)
            {
              *(v9 - 29) = v10;
              operator delete(v10);
            }
            uint64_t v11 = *(v9 - 33);
            if (v11)
            {
              *(v9 - 32) = v11;
              operator delete(v11);
            }
            uint64_t v12 = *(v9 - 41);
            if (v12)
            {
              *(v9 - 40) = v12;
              operator delete(v12);
            }
            long long v13 = *(v9 - 44);
            if (v13)
            {
              *(v9 - 43) = v13;
              operator delete(v13);
            }
            int64x2_t v14 = (char *)*(v9 - 47);
            if (v14)
            {
              long long v15 = (char *)*(v9 - 46);
              long long v16 = *(v9 - 47);
              if (v15 != v14)
              {
                do
                {
                  uint64_t v17 = (void *)*((void *)v15 - 3);
                  if (v17)
                  {
                    *((void *)v15 - 2) = v17;
                    operator delete(v17);
                  }
                  v15 -= 56;
                }
                while (v15 != v14);
                long long v16 = *(v9 - 47);
              }
              *(v9 - 46) = v14;
              operator delete(v16);
            }
            int64x2_t v18 = *(v9 - 58);
            if (v18)
            {
              *(v9 - 57) = v18;
              operator delete(v18);
            }
            long long v19 = v9 - 61;
            if (*((char *)v9 - 465) < 0) {
              operator delete(*v19);
            }
            v9 -= 61;
          }
          while (v19 != v7);
          unint64_t v6 = *v5;
        }
        *(v2 - 2) = v7;
        operator delete(v6);
        long long v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_FE34FC(uint64_t *a1)
{
  uint64_t v2 = 0x4FBCDA3AC10C9715 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x864B8A7DE6D1D6) {
    sub_2E00();
  }
  if (0x9F79B47582192E2ALL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x9F79B47582192E2ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x4FBCDA3AC10C9715 * ((a1[2] - *a1) >> 3)) >= 0x4325C53EF368EBLL) {
    unint64_t v4 = 0x864B8A7DE6D1D6;
  }
  else {
    unint64_t v4 = v3;
  }
  if (v4)
  {
    if (v4 > 0x864B8A7DE6D1D6) {
      sub_188D718();
    }
    long long v5 = (char *)operator new(488 * v4);
  }
  else
  {
    long long v5 = 0;
  }
  uint64_t v12 = (uint64_t)&v5[488 * v2];
  long long v13 = &v5[488 * v4];
  *(_OWORD *)uint64_t v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_OWORD *)(v12 + 320) = 0u;
  *(_OWORD *)(v12 + 336) = 0u;
  *(_OWORD *)(v12 + 352) = 0u;
  *(_OWORD *)(v12 + 368) = 0u;
  *(_OWORD *)(v12 + 384) = 0u;
  *(_OWORD *)(v12 + 400) = 0u;
  *(_OWORD *)(v12 + 416) = 0u;
  *(_OWORD *)(v12 + 432) = 0u;
  *(_OWORD *)(v12 + 448) = 0u;
  *(_OWORD *)(v12 + 464) = 0u;
  *(void *)(v12 + 480) = 0;
  sub_EAFC08(v12);
  *(void *)(v12 + 472) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(v12 + 480) = -1;
  uint64_t v6 = v12;
  uint64_t v7 = v12 + 488;
  uint64_t v9 = (long long *)*a1;
  uint64_t v8 = (long long *)a1[1];
  if (v8 == (long long *)*a1)
  {
    *a1 = v12;
    a1[1] = v7;
    a1[2] = (uint64_t)v13;
  }
  else
  {
    do
    {
      v6 -= 488;
      uint64_t v8 = (long long *)((char *)v8 - 488);
      sub_FE2C8C((uint64_t)(a1 + 2), v6, v8);
    }
    while (v8 != v9);
    uint64_t v10 = (long long *)*a1;
    uint64_t v8 = (long long *)a1[1];
    *a1 = v6;
    a1[1] = v7;
    a1[2] = (uint64_t)v13;
    if (v8 != v10)
    {
      do
      {
        uint64_t v8 = (long long *)((char *)v8 - 488);
        sub_405F44((uint64_t)v8);
      }
      while (v8 != v10);
      uint64_t v8 = v10;
    }
  }
  if (v8) {
    operator delete(v8);
  }
  return v12 + 488;
}

void sub_FE36E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FE2C38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_FE36F8(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  std::string::size_type v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    uint64_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  long long __p = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  long long v19 = &v7[24 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  sub_FE3898(v8, *a2, a2[1], 0x4FBCDA3AC10C9715 * ((a2[1] - *a2) >> 3));
  uint64_t v9 = v18.i64[0];
  uint64_t v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  uint64_t v12 = (void *)*a1;
  uint64_t v11 = (void *)a1[1];
  if (v11 == (void *)*a1)
  {
    int64x2_t v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      v9 -= 24;
      *(void *)(v9 + 16) = 0;
      long long v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)uint64_t v9 = v13;
      *(void *)(v9 + 16) = v11[2];
      *uint64_t v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    int64x2_t v14 = *(int64x2_t *)a1;
    uint64_t v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  int64x2_t v18 = v14;
  long long v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  long long v19 = v15;
  long long __p = (void *)v14.i64[0];
  sub_FE3384((uint64_t)&__p, (void **)v14.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

void sub_FE3884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FE334C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_FE3898(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x864B8A7DE6D1D7) {
      sub_2E00();
    }
    __n128 result = operator new(488 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[61 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        __n128 result = sub_444D20((char *)&v8[v9 / 8], (long long *)(a2 + v9));
        result[59] = *(void *)(a2 + v9 + 472);
        *((_DWORD *)result + 120) = *(_DWORD *)(a2 + v9 + 480);
        v9 += 488;
      }
      while (a2 + v9 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_FE3970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_FE3984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 488)
    sub_405F44(v10 - 488 + v11);
  *(void *)(v9 + 8) = v10;
  sub_FE32C4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_FE39B4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 496;
    sub_4451C0(i - 496);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_FE3A08(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(long long *)((char *)a3 + 24);
  *(void *)(a2 + 40) = *((void *)a3 + 5);
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 3) = 0;
  long long v4 = a3[4];
  long long v5 = a3[5];
  long long v6 = a3[6];
  *(void *)(a2 + 110) = *(void *)((char *)a3 + 110);
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 96) = v6;
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)(a2 + 48) = a3[3];
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 120) = 0;
  *(_OWORD *)(a2 + 120) = *(long long *)((char *)a3 + 120);
  *(void *)(a2 + 136) = *((void *)a3 + 17);
  *((void *)a3 + 15) = 0;
  *((void *)a3 + 16) = 0;
  *((void *)a3 + 17) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 144) = a3[9];
  *(void *)(a2 + 160) = *((void *)a3 + 20);
  *((void *)a3 + 18) = 0;
  *((void *)a3 + 19) = 0;
  *((void *)a3 + 20) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 168) = *(long long *)((char *)a3 + 168);
  *(void *)(a2 + 184) = *((void *)a3 + 23);
  *((void *)a3 + 21) = 0;
  *((void *)a3 + 22) = 0;
  *((void *)a3 + 23) = 0;
  long long v7 = a3[13];
  uint64_t v8 = *((void *)a3 + 28);
  *(_OWORD *)(a2 + 192) = a3[12];
  *(_OWORD *)(a2 + 208) = v7;
  *(void *)(a2 + 224) = v8;
  *(void *)(a2 + 232) = 0;
  *(void *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  *(_OWORD *)(a2 + 232) = *(long long *)((char *)a3 + 232);
  *(void *)(a2 + 248) = *((void *)a3 + 31);
  *((void *)a3 + 29) = 0;
  *((void *)a3 + 30) = 0;
  *((void *)a3 + 31) = 0;
  *(void *)(a2 + 256) = 0;
  *(void *)(a2 + 264) = 0;
  *(void *)(a2 + 272) = 0;
  *(_OWORD *)(a2 + 256) = a3[16];
  *(void *)(a2 + 272) = *((void *)a3 + 34);
  *((void *)a3 + 32) = 0;
  *((void *)a3 + 33) = 0;
  *((void *)a3 + 34) = 0;
  *(_OWORD *)(a2 + 280) = *(long long *)((char *)a3 + 280);
  *(_DWORD *)(a2 + 304) = *((_DWORD *)a3 + 76);
  if (*((_DWORD *)a3 + 76) <= 1u) {
    *(void *)(a2 + 296) = *((void *)a3 + 37);
  }
  *(_OWORD *)(a2 + 312) = *(long long *)((char *)a3 + 312);
  long long v9 = *(long long *)((char *)a3 + 408);
  long long v11 = *(long long *)((char *)a3 + 360);
  long long v10 = *(long long *)((char *)a3 + 376);
  *(_OWORD *)(a2 + 392) = *(long long *)((char *)a3 + 392);
  *(_OWORD *)(a2 + 408) = v9;
  *(_OWORD *)(a2 + 360) = v11;
  *(_OWORD *)(a2 + 376) = v10;
  long long v13 = *(long long *)((char *)a3 + 440);
  long long v12 = *(long long *)((char *)a3 + 456);
  long long v14 = *(long long *)((char *)a3 + 424);
  *(void *)(a2 + 471) = *(void *)((char *)a3 + 471);
  *(_OWORD *)(a2 + 440) = v13;
  *(_OWORD *)(a2 + 456) = v12;
  *(_OWORD *)(a2 + 424) = v14;
  __n128 result = *(__n128 *)((char *)a3 + 328);
  long long v16 = *(long long *)((char *)a3 + 344);
  *(__n128 *)(a2 + 328) = result;
  *(_OWORD *)(a2 + 344) = v16;
  uint64_t v17 = *((void *)a3 + 60);
  *(_DWORD *)(a2 + 488) = *((_DWORD *)a3 + 122);
  *(void *)(a2 + 480) = v17;
  return result;
}

char *sub_FE3B98(uint64_t *a1)
{
  unint64_t v2 = 0xEF7BDEF7BDEF7BDFLL * ((a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x84210842108421) {
    sub_2E00();
  }
  if (0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0xDEF7BDEF7BDEF7BELL * ((a1[2] - *a1) >> 4);
  }
  if (0xEF7BDEF7BDEF7BDFLL * ((a1[2] - *a1) >> 4) >= 0x42108421084210) {
    unint64_t v4 = 0x84210842108421;
  }
  else {
    unint64_t v4 = v3;
  }
  if (v4)
  {
    if (v4 > 0x84210842108421) {
      sub_188D718();
    }
    long long v5 = (char *)operator new(496 * v4);
  }
  else
  {
    long long v5 = 0;
  }
  long long v12 = &v5[496 * v2];
  long long v13 = &v5[496 * v4];
  *(_OWORD *)long long v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *((_OWORD *)v12 + 2) = 0u;
  *((_OWORD *)v12 + 3) = 0u;
  *((_OWORD *)v12 + 4) = 0u;
  *((_OWORD *)v12 + 5) = 0u;
  *((_OWORD *)v12 + 6) = 0u;
  *((_OWORD *)v12 + 7) = 0u;
  *((_OWORD *)v12 + 8) = 0u;
  *((_OWORD *)v12 + 9) = 0u;
  *((_OWORD *)v12 + 10) = 0u;
  *((_OWORD *)v12 + 11) = 0u;
  *((_OWORD *)v12 + 12) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_OWORD *)v12 + 15) = 0u;
  *((_OWORD *)v12 + 16) = 0u;
  *((_OWORD *)v12 + 17) = 0u;
  *((_OWORD *)v12 + 18) = 0u;
  *((_OWORD *)v12 + 19) = 0u;
  *((_OWORD *)v12 + 20) = 0u;
  *((_OWORD *)v12 + 21) = 0u;
  *((_OWORD *)v12 + 22) = 0u;
  *((_OWORD *)v12 + 23) = 0u;
  *((_OWORD *)v12 + 24) = 0u;
  *((_OWORD *)v12 + 25) = 0u;
  *((_OWORD *)v12 + 26) = 0u;
  *((_OWORD *)v12 + 27) = 0u;
  *((_OWORD *)v12 + 28) = 0u;
  *((_OWORD *)v12 + 29) = 0u;
  *((_OWORD *)v12 + 30) = 0u;
  sub_EB1D94(v12);
  *((void *)v12 + 60) = 0x7FFFFFFFFFFFFFFFLL;
  *((_DWORD *)v12 + 122) = -1;
  uint64_t v6 = (uint64_t)v12;
  long long v7 = v12 + 496;
  long long v9 = (long long *)*a1;
  uint64_t v8 = (long long *)a1[1];
  if (v8 == (long long *)*a1)
  {
    *a1 = (uint64_t)v12;
    a1[1] = (uint64_t)v7;
    a1[2] = (uint64_t)v13;
  }
  else
  {
    do
    {
      v6 -= 496;
      v8 -= 31;
      sub_FE3A08((uint64_t)(a1 + 2), v6, v8);
    }
    while (v8 != v9);
    long long v10 = (long long *)*a1;
    uint64_t v8 = (long long *)a1[1];
    *a1 = v6;
    a1[1] = (uint64_t)v7;
    a1[2] = (uint64_t)v13;
    if (v8 != v10)
    {
      do
      {
        v8 -= 31;
        sub_4451C0((uint64_t)v8);
      }
      while (v8 != v10);
      uint64_t v8 = v10;
    }
  }
  if (v8) {
    operator delete(v8);
  }
  return v12 + 496;
}

void sub_FE3D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FE39B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_FE3D94(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2E00();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  std::string::size_type v20 = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_188D718();
    }
    long long v7 = (char *)operator new(24 * v6);
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v8 = &v7[24 * v3];
  long long __p = v7;
  v18.i64[0] = (uint64_t)v8;
  v18.i64[1] = (uint64_t)v8;
  long long v19 = &v7[24 * v6];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = 0;
  sub_FE3F34(v8, *a2, a2[1], 0xEF7BDEF7BDEF7BDFLL * ((a2[1] - *a2) >> 4));
  uint64_t v9 = v18.i64[0];
  uint64_t v10 = v18.i64[1] + 24;
  v18.i64[1] += 24;
  long long v12 = (void *)*a1;
  long long v11 = (void *)a1[1];
  if (v11 == (void *)*a1)
  {
    int64x2_t v14 = vdupq_n_s64((unint64_t)v11);
  }
  else
  {
    do
    {
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      v9 -= 24;
      *(void *)(v9 + 16) = 0;
      long long v13 = *(_OWORD *)(v11 - 3);
      v11 -= 3;
      *(_OWORD *)uint64_t v9 = v13;
      *(void *)(v9 + 16) = v11[2];
      *long long v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
    }
    while (v11 != v12);
    int64x2_t v14 = *(int64x2_t *)a1;
    uint64_t v10 = v18.i64[1];
  }
  *a1 = v9;
  a1[1] = v10;
  int64x2_t v18 = v14;
  long long v15 = (char *)a1[2];
  a1[2] = (uint64_t)v19;
  long long v19 = v15;
  long long __p = (void *)v14.i64[0];
  sub_FE4110((uint64_t)&__p, (void **)v14.i64[0]);
  if (__p) {
    operator delete(__p);
  }
  return v10;
}

void sub_FE3F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FE40D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_FE3F34(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v5 = result;
    if (a4 >= 0x84210842108422) {
      sub_2E00();
    }
    __n128 result = operator new(496 * a4);
    uint64_t v8 = result;
    *long long v5 = result;
    v5[1] = result;
    v5[2] = &result[62 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        __n128 result = sub_4456B4((char *)&v8[v9 / 8], (long long *)(a2 + v9));
        result[60] = *(void *)(a2 + v9 + 480);
        *((_DWORD *)result + 122) = *(_DWORD *)(a2 + v9 + 488);
        v9 += 496;
      }
      while (a2 + v9 != a3);
      uint64_t v8 = (void *)((char *)v8 + v9);
    }
    v5[1] = v8;
  }
  return result;
}

void sub_FE400C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_FE4020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  for (; v11; v11 -= 496)
    sub_4451C0(v10 - 496 + v11);
  *(void *)(v9 + 8) = v10;
  sub_FE4050(&a9);
  _Unwind_Resume(a1);
}

void ***sub_FE4050(void ***result)
{
  uint64_t v1 = result;
  if (!*((unsigned char *)result + 8))
  {
    unint64_t v2 = *result;
    unint64_t v3 = **result;
    if (v3)
    {
      uint64_t v4 = (uint64_t)v2[1];
      long long v5 = **v1;
      if ((void *)v4 != v3)
      {
        do
          uint64_t v4 = sub_4451C0(v4 - 496);
        while ((void *)v4 != v3);
        long long v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_FE40D8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_FE4110(uint64_t a1, void **a2)
{
  unint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    long long v5 = *(void ***)(a1 + 16);
    do
    {
      uint64_t v8 = (void **)*(v5 - 3);
      v5 -= 3;
      long long v7 = v8;
      *(void *)(a1 + 16) = v5;
      if (v8)
      {
        uint64_t v9 = (void **)*(v2 - 2);
        unint64_t v6 = v7;
        if (v9 != v7)
        {
          do
          {
            uint64_t v10 = *(v9 - 30);
            if (v10)
            {
              *(v9 - 29) = v10;
              operator delete(v10);
            }
            uint64_t v11 = *(v9 - 33);
            if (v11)
            {
              *(v9 - 32) = v11;
              operator delete(v11);
            }
            long long v12 = *(v9 - 41);
            if (v12)
            {
              *(v9 - 40) = v12;
              operator delete(v12);
            }
            long long v13 = *(v9 - 44);
            if (v13)
            {
              *(v9 - 43) = v13;
              operator delete(v13);
            }
            int64x2_t v14 = (char *)*(v9 - 47);
            if (v14)
            {
              long long v15 = (char *)*(v9 - 46);
              long long v16 = *(v9 - 47);
              if (v15 != v14)
              {
                do
                {
                  uint64_t v17 = (void *)*((void *)v15 - 3);
                  if (v17)
                  {
                    *((void *)v15 - 2) = v17;
                    operator delete(v17);
                  }
                  v15 -= 56;
                }
                while (v15 != v14);
                long long v16 = *(v9 - 47);
              }
              *(v9 - 46) = v14;
              operator delete(v16);
            }
            int64x2_t v18 = *(v9 - 59);
            if (v18)
            {
              *(v9 - 58) = v18;
              operator delete(v18);
            }
            long long v19 = v9 - 62;
            if (*((char *)v9 - 473) < 0) {
              operator delete(*v19);
            }
            v9 -= 62;
          }
          while (v19 != v7);
          unint64_t v6 = *v5;
        }
        *(v2 - 2) = v7;
        operator delete(v6);
        long long v5 = *(void ***)(a1 + 16);
      }
      unint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_FE4288()
{
  unk_25FD1EF = 16641;
  word_25FD1D8 = 65;
  byte_25FD207 = 1;
  byte_25FD1F1 = 0;
}

uint64_t sub_FE42B0(uint64_t a1, void *a2)
{
  long long __p = operator new(0x19uLL);
  long long v7 = xmmword_20B9250;
  strcpy((char *)__p, "charging_stop_penalty_s");
  *(_DWORD *)a1 = sub_5D2EC(a2, &__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x20uLL);
  long long v7 = xmmword_20B8890;
  strcpy((char *)__p, "charging_overhead_time_factor");
  double v4 = sub_5C7E8(a2, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  *(double *)(a1 + 8) = v4;
  long long __p = operator new(0x28uLL);
  long long v7 = xmmword_20B9960;
  strcpy((char *)__p, "next_charging_stop_bias_while_driving_s");
  *(_DWORD *)(a1 + 16) = sub_5D2EC(a2, &__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x30uLL);
  long long v7 = xmmword_20B93C0;
  strcpy((char *)__p, "next_charging_stop_bias_while_charging_s");
  *(_DWORD *)(a1 + 20) = sub_5D2EC(a2, &__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x30uLL);
  long long v7 = xmmword_20E1380;
  strcpy((char *)__p, "outside_preferred_charging_network_penalty_s");
  *(_DWORD *)(a1 + 24) = sub_5D2EC(a2, &__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  long long __p = operator new(0x28uLL);
  long long v7 = xmmword_20B9280;
  strcpy((char *)__p, "avoided_charging_network_penalty_s");
  *(_DWORD *)(a1 + 28) = sub_5D2EC(a2, &__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_FE44FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FE4530(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  long long v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v7;
  char v27 = 9;
  uint64_t v25 = 0;
  strcpy((char *)v26, "EVRouting");
  long long v23 = 0;
  uint64_t v24 = 0;
  uint64_t v8 = sub_374CDC(a4, (uint64_t)v26, (uint64_t *)&v23);
  uint64_t v19 = 0;
  std::string::size_type v20 = operator new(0x20uLL);
  long long v21 = xmmword_20B8890;
  strcpy((char *)v20, "ChargingOverheadTimeEstimator");
  long long __p = 0;
  int64x2_t v18 = 0;
  uint64_t v9 = sub_374CDC(a4, (uint64_t)&v20, (uint64_t *)&__p);
  sub_3F8E98((uint64_t)v22, v9);
  sub_3F9014(a1 + 32, a3, (uint64_t)v8, v22);
  uint64_t v10 = (void **)__p;
  if (__p)
  {
    uint64_t v11 = v18;
    long long v12 = __p;
    if (v18 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0) {
          operator delete(*(v11 - 3));
        }
        v11 -= 3;
      }
      while (v11 != v10);
      long long v12 = __p;
    }
    int64x2_t v18 = v10;
    operator delete(v12);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(v20);
  }
  uint64_t v13 = (uint64_t)v23;
  if (v23)
  {
    uint64_t v14 = v24;
    long long v15 = v23;
    if ((void *)v24 != v23)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0) {
          operator delete(*(void **)(v14 - 24));
        }
        v14 -= 24;
      }
      while (v14 != v13);
      long long v15 = v23;
    }
    uint64_t v24 = v13;
    operator delete(v15);
  }
  if (v27 < 0) {
    operator delete(v26[0]);
  }
  *(void *)(a1 + 96) = a3;
  return a1;
}

void sub_FE46C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1A668((void **)(v18 - 80));
  if ((*(char *)(v18 - 33) & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v18 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_FE4750(uint64_t result, int a2)
{
  *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_FE4758(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v17[0] = a4;
  v17[1] = a5;
  uint64_t v16 = *(void *)(a2 + 52);
  uint64_t v8 = *a1;
  if (*((double *)a1 + 1) > 0.0)
  {
    double v9 = *((double *)a1 + 1) * (double)(int)sub_3F9018((uint64_t)(a1 + 8), a2, a3);
    if (v9 >= 0.0)
    {
      if (v9 < 4.50359963e15)
      {
        uint64_t v10 = (uint64_t)(v9 + v9) + 1;
LABEL_9:
        double v9 = (double)(v10 >> 1);
      }
    }
    else if (v9 > -4.50359963e15)
    {
      uint64_t v10 = (uint64_t)(v9 + v9);
      if (v10 >= 1) {
        --v10;
      }
      goto LABEL_9;
    }
    uint64_t v8 = (v8 + (int)v9);
  }
  uint64_t v11 = (void *)(a4 + 16);
  if (!sub_36F918(v11, &v16)) {
    goto LABEL_19;
  }
  int v12 = *((unsigned __int8 *)sub_36F918(v11, &v16) + 24);
  if (v12 == 2)
  {
    uint64_t v13 = a1 + 4;
  }
  else
  {
    if (v12 != 1)
    {
      int v14 = 0x7FFFFFFF;
      goto LABEL_18;
    }
    uint64_t v13 = a1 + 5;
  }
  int v14 = -*v13;
LABEL_18:
  uint64_t v8 = (v14 + v8);
LABEL_19:
  if (sub_40EFF8((uint64_t)v17, *(void *)(a2 + 64)))
  {
    if (!sub_40F000((uint64_t)v17, *(void *)(a2 + 64))) {
      return v8;
    }
  }
  else
  {
    uint64_t v8 = a1[6] + v8;
    if (!sub_40F000((uint64_t)v17, *(void *)(a2 + 64))) {
      return v8;
    }
  }
  return a1[7] + v8;
}

void sub_FE48CC(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v3 = (unint64_t)(((a3[7] - a3[6]) << 30) - 0x100000000) >> 32;
  if (v3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 96) + 160;
    double v9 = (void **)(a3 + 12);
    do
    {
      uint64_t v10 = (char *)a3[12];
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[13] - (void)v10) >> 3);
      if (v11 <= v7)
      {
        long long v20 = 0xFFFFuLL;
        unint64_t v21 = 0xFFFFFFFF7FFFFFFFLL;
        sub_EC2DFC(v9, v7 - v11 + 1, &v20);
        uint64_t v10 = (char *)*v9;
      }
      uint64_t v12 = *(unsigned __int16 *)&v10[v6];
      if (v12 != 0xFFFF)
      {
        uint64_t v13 = sub_40B954(a2, v12);
        *(void *)&long long v20 = sub_3FA038(v8);
        *((void *)&v20 + 1) = v14;
        long long v15 = &v10[v6];
        uint64_t v16 = sub_40F020(&v20, *((unsigned int *)v15 + 5));
        int v18 = sub_FE4758((unsigned int *)a1, v13, v13 + 80, v16, v17);
        *((_DWORD *)v15 + 4) = v18 & ~(v18 >> 31);
      }
      ++v7;
      v6 += 24;
    }
    while (v3 != v7);
  }
}

void sub_FE4A08()
{
  unk_25FD21F = 16641;
  word_25FD208 = 65;
  byte_25FD237 = 1;
  byte_25FD221 = 0;
}

void sub_FE4A30(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v18 = 0;
  uint64_t v19 = operator new(0x20uLL);
  long long v20 = xmmword_20B91C0;
  strcpy((char *)v19, "ChargingStationPenalties");
  long long __p = 0;
  uint64_t v17 = 0;
  uint64_t v8 = sub_374CDC(a1, (uint64_t)&v19, (uint64_t *)&__p);
  sub_FE452C(a2, v8);
  double v9 = (void **)__p;
  if (__p)
  {
    uint64_t v10 = v17;
    unint64_t v11 = __p;
    if (v17 != __p)
    {
      do
      {
        if (*((char *)v10 - 1) < 0) {
          operator delete(*(v10 - 3));
        }
        v10 -= 3;
      }
      while (v10 != v9);
      unint64_t v11 = __p;
    }
    uint64_t v17 = v9;
    operator delete(v11);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(v19);
  }
  *(_DWORD *)a2 = 0;
  *(double *)(a2 + 8) = a3;
  double v12 = (double)*(int *)(a2 + 24) * a4;
  if (v12 >= 0.0)
  {
    if (v12 >= 4.50359963e15) {
      goto LABEL_19;
    }
    uint64_t v13 = (uint64_t)(v12 + v12) + 1;
  }
  else
  {
    if (v12 <= -4.50359963e15) {
      goto LABEL_19;
    }
    uint64_t v13 = (uint64_t)(v12 + v12);
    if (v13 >= 1) {
      --v13;
    }
  }
  double v12 = (double)(v13 >> 1);
LABEL_19:
  *(_DWORD *)(a2 + 24) = (int)v12;
  double v14 = (double)*(int *)(a2 + 28) * a4;
  if (v14 >= 0.0)
  {
    if (v14 < 4.50359963e15)
    {
      uint64_t v15 = (uint64_t)(v14 + v14) + 1;
LABEL_26:
      double v14 = (double)(v15 >> 1);
    }
  }
  else if (v14 > -4.50359963e15)
  {
    uint64_t v15 = (uint64_t)(v14 + v14);
    if (v15 >= 1) {
      --v15;
    }
    goto LABEL_26;
  }
  *(_DWORD *)(a2 + 28) = (int)v14;
}

void sub_FE4BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double *sub_FE4C1C(double *a1, void *a2)
{
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "charging_time_penalty_factor");
  double v4 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "detour_penalty_factor");
  double v5 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[1] = v5;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "overhead_time_penalty_factor");
  double v6 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[2] = v6;
  __p[0] = operator new(0x30uLL);
  *(_OWORD *)&__p[1] = xmmword_20B93E0;
  strcpy((char *)__p[0], "network_preference_violation_penalty_factor");
  double v7 = sub_5C7E8(a2, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  a1[3] = v7;
  return a1;
}

void sub_FE4DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FE4DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  long long v8 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(a1 + 32) = v8;
  double v9 = (char **)sub_37D0C0(a2);
  *(_DWORD *)(a1 + 48) = sub_89DD4(v9);
  *(_OWORD *)(a1 + 52) = xmmword_20B8E30;
  *(void *)(a1 + 68) = 0x7FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 76) = 0x7FFFFFFF;
  sub_FE4A30(a3, (uint64_t)v11, *(double *)(a4 + 16), *(double *)(a4 + 24));
  sub_FE474C(a1 + 80, v11, a2, a3);
  return a1;
}

uint64_t sub_FE4E7C(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4 = *(void *)a2;
  *(_DWORD *)(a1 + 60) = a2[2];
  *(void *)(a1 + 52) = v4;
  uint64_t v5 = *(void *)a3;
  *(_DWORD *)(a1 + 72) = a3[2];
  *(void *)(a1 + 64) = v5;
  uint64_t result = sub_FE4EC4(a1, a2, a3);
  *(_DWORD *)(a1 + 76) = result;
  return result;
}

uint64_t sub_FE4EC4(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  unint64_t v3 = a2[1] - (unint64_t)a3[1];
  double v4 = sqrt((double)((*a2 - (unint64_t)*a3) * (*a2 - (unint64_t)*a3) + v3 * v3)) / 100.0 * 100.0;
  if (v4 >= 0.0)
  {
    double v5 = v4;
    if (v4 >= 4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4) + 1;
  }
  else
  {
    double v5 = v4;
    if (v4 <= -4.50359963e15) {
      goto LABEL_9;
    }
    uint64_t v6 = (uint64_t)(v4 + v4);
    if (v6 >= 1) {
      --v6;
    }
  }
  double v5 = (double)(v6 >> 1);
LABEL_9:
  double v7 = 9.22337204e18;
  if (v5 >= 9.22337204e18) {
    goto LABEL_19;
  }
  if (v4 >= 0.0)
  {
    if (v4 < 4.50359963e15)
    {
      uint64_t v8 = (uint64_t)(v4 + v4) + 1;
LABEL_17:
      double v4 = (double)(v8 >> 1);
    }
  }
  else if (v4 > -4.50359963e15)
  {
    uint64_t v8 = (uint64_t)(v4 + v4);
    if (v8 >= 1) {
      --v8;
    }
    goto LABEL_17;
  }
  double v7 = (double)(uint64_t)v4;
LABEL_19:
  double v9 = v7 / 100000.0 / 60.0 * 60.0 * 60.0 * 10.0;
  if (v9 >= 0.0)
  {
    if (v9 < 4.50359963e15)
    {
      uint64_t v10 = (uint64_t)(v9 + v9) + 1;
LABEL_26:
      double v9 = (double)(v10 >> 1);
    }
  }
  else if (v9 > -4.50359963e15)
  {
    uint64_t v10 = (uint64_t)(v9 + v9);
    if (v10 >= 1) {
      --v10;
    }
    goto LABEL_26;
  }
  return (int)v9;
}

uint64_t sub_FE5038(void *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = sub_376F8C((void *)a1[1]);
  if (*((double *)a1 + 2) <= 0.0)
  {
    int v17 = 0;
    if (*((double *)a1 + 3) <= 0.0) {
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  uint64_t v10 = (char *)a2[3];
  double v9 = (char *)a2[4];
  unint64_t v11 = v10 + 48;
  if (v10 != v9 && v11 != v9)
  {
    char v13 = *v10;
    do
    {
      if ((((int)(*((_DWORD *)a1 + 12) >> v13 << 31) >> 31) & *((_DWORD *)v10 + 1)) < (((int)(*((_DWORD *)a1 + 12) >> *v11 << 31) >> 31) & *((_DWORD *)v11 + 1)))
      {
        char v13 = *v11;
        uint64_t v10 = v11;
      }
      v11 += 48;
    }
    while (v11 != v9);
  }
  uint64_t v14 = nullsub_1(*a1);
  int v15 = sub_40A44C(v14);
  uint64_t v16 = nullsub_1(*a1);
  int v17 = (int)(*((double *)a1 + 2)
            * ((double)(int)(v15 - sub_53FA4(v16))
             / 1000.0
             * 3600.0
             / ((double)*((int *)v10 + 1)
              / 1000.0)));
  if (*((double *)a1 + 3) > 0.0)
  {
LABEL_13:
    unint64_t v24 = sub_28E018(v8, *(void *)((char *)a2 + 52));
    int v25 = v18;
    uint64_t v19 = sub_FE4EC4(v24, (unsigned int *)a1 + 13, (unsigned int *)&v24);
    double v20 = (double)(int)(sub_FE4EC4(v19, (unsigned int *)&v24, (unsigned int *)a1 + 16) + v19 - *((_DWORD *)a1 + 19))
        / 10.0;
    if (v20 < 0.0) {
      double v20 = 0.0;
    }
    v17 += (int)(*((double *)a1 + 3) * v20);
  }
LABEL_16:
  int v21 = sub_FE4758((unsigned int *)a1 + 20, (uint64_t)a2, a3, *a4, a4[1]);
  if (v21 < 0) {
    char v22 = -5;
  }
  else {
    char v22 = 5;
  }
  return v21 / 10
       + v17
       + (((103 * (char)(v22 + v21 % 10)) >> 15) & 1)
       + ((103 * (char)(v22 + v21 % 10)) >> 10);
}

void sub_FE5240()
{
  unk_25FD24F = 16641;
  word_25FD238 = 65;
  byte_25FD267 = 1;
  byte_25FD251 = 0;
}

void *sub_FE5268(void *a1, void *a2, uint64_t a3)
{
  a1[655] = sub_3750CC(a2);
  a1[656] = sub_376408(a2);
  a1[657] = *(void *)(a3 + 280);
  return a1;
}

void sub_FE52C4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 5232))
  {
    sub_3A6230((void *)(v1 + 56));
    *(unsigned char *)(v1 + 5232) = 0;
  }
  _Unwind_Resume(exception_object);
}

void sub_FE52EC(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, int a6@<W5>, unsigned int *a7@<X6>, int a8@<W7>, __n128 *a9@<X8>)
{
  sub_ECBC00((uint64_t)a1, (int **)a2, a4, a5, a6);
  double v19 = v18;
  double v20 = sub_45A4DC(*a1, a2);
  int v21 = sub_4F44(a5);
  *(void *)&long long v35 = sub_ECA410((uint64_t)a1, (int **)a2, a3, a4, v21, a6, v19);
  *((void *)&v35 + 1) = v22;
  if (v35 == -1 || DWORD1(v35) == 0x7FFFFFFF || v22 == 0x7FFFFFFFFFFFFFFFLL)
  {
    sub_3FAF3C(a9);
  }
  else
  {
    int v25 = (uint64_t *)a1[656];
    uint64_t v26 = *(void *)(a2 + 32);
    int v27 = sub_4F44(a5);
    unsigned int v28 = sub_2AACDC(v25, v26, v27);
    if (*(uint64_t *)&v20 > -1 && ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
      || (unint64_t)(*(void *)&v20 - 1) < 0xFFFFFFFFFFFFFLL
      || (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    {
      double v32 = v20;
    }
    else
    {
      double v32 = v19;
    }
    v34.n128_u64[0] = sub_402EC4(a1[655], (int **)a2, SDWORD1(v35), v28, a8, a7, a1[657], v19, v32, (double)a3 / 1000000000.0);
    v34.n128_u64[1] = v33;
    sub_3FAF7C(a9, &v35, &v34);
  }
}

void sub_FE5480(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, int a6@<W5>, unsigned int *a7@<X6>, int a8@<W7>, __n128 *a9@<X8>)
{
  sub_ECBC00((uint64_t)a1, (int **)a2, a4, a5, a6);
  double v16 = v15;
  double v17 = sub_45A4DC(*a1, a2);
  int v18 = sub_4F44(a5);
  unint64_t v19 = sub_ECA410((uint64_t)a1, (int **)a2, a3, a4, v18, a6, v16);
  int v21 = v19;
  uint64_t v22 = v20;
  unint64_t v23 = HIDWORD(v19);
  if (v19 == -1 || v23 == 0x7FFFFFFF || v20 == 0x7FFFFFFFFFFFFFFFLL)
  {
    *(void *)&long long v45 = 0x7FFFFFFFFFFFFFFFLL;
    *((void *)&v45 + 1) = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_34;
  }
  unint64_t v26 = sub_ECC250((uint64_t)a1, (int **)a2, a4, v18, a6);
  if (v26 == -1 || HIDWORD(v26) == 0x7FFFFFFF || v27 == 0x7FFFFFFFFFFFFFFFLL)
  {
    unint64_t v28 = v26 & 0xFFFFFFFF00000000;
    *(void *)&long long v45 = v26;
    *((void *)&v45 + 1) = v27;
    if (v26 != -1) {
      goto LABEL_19;
    }
LABEL_34:
    sub_3FAF3C(a9);
    return;
  }
  v27 += v22;
  if ((v26 + v21) <= 1) {
    LODWORD(v26) = 1;
  }
  else {
    LODWORD(v26) = v26 + v21;
  }
  unint64_t v28 = (unint64_t)(HIDWORD(v26) + v23) << 32;
  *(void *)&long long v45 = v28 | v26;
  *((void *)&v45 + 1) = v27;
  if (v26 == -1) {
    goto LABEL_34;
  }
LABEL_19:
  if (v28 == 0x7FFFFFFF00000000 || v27 == 0x7FFFFFFFFFFFFFFFLL) {
    goto LABEL_34;
  }
  unint64_t v29 = HIDWORD(v28);
  long long v30 = *(_OWORD *)(a2 + 16);
  v43[0] = *(_OWORD *)a2;
  v43[1] = v30;
  uint64_t v44 = *(void *)(a2 + 32);
  uint64_t v31 = (uint64_t *)a1[656];
  int v32 = sub_4F44(a5);
  unsigned int v33 = sub_2AACDC(v31, v44, v32);
  if (*(uint64_t *)&v17 > -1 && ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
    || (unint64_t)(*(void *)&v17 - 1) < 0xFFFFFFFFFFFFFLL
    || (*(void *)&v17 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    double v37 = v17;
  }
  else
  {
    double v37 = v16;
  }
  v42.n128_u64[0] = sub_402EC4(a1[655], (int **)v43, v29, v33, a8, a7, a1[657], v16, v37, (double)a3 / 1000000000.0);
  v42.n128_u64[1] = v38;
  sub_3FAF7C(a9, &v45, &v42);
}

double sub_FE56E0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, _OWORD *a6@<X8>, double a7@<D0>, double a8@<D1>)
{
  uint64_t v14 = a2;
  *(void *)&long long v13 = sub_EC98F8(a7, a8, a1, (uint64_t)&v14, a3, a4, a5);
  *((void *)&v13 + 1) = v9;
  v12.n128_u64[0] = sub_40AB18();
  v12.n128_u64[1] = v10;
  *(void *)&double result = sub_3FAF7C(a6, &v13, &v12).n128_u64[0];
  return result;
}

void sub_FE5730()
{
  unk_25FD27F = 16641;
  word_25FD268 = 65;
  byte_25FD297 = 1;
  byte_25FD281 = 0;
}

uint64_t sub_FE5758(uint64_t a1, void *a2, void *a3, unsigned int *a4)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v8 = nullsub_1(a4);
  uint64_t v30 = sub_40A454(v8);
  uint64_t v9 = a4 + 78;
  *(_DWORD *)(a1 + 4) = sub_4F44(a4 + 78);
  unint64_t v10 = a4 + 84;
  *(_DWORD *)(a1 + 12) = sub_4F44(a4 + 84);
  *(_DWORD *)(a1 + 20) = sub_4F44(a4 + 90);
  *(_DWORD *)(a1 + 28) = sub_4F44(a4 + 96);
  int v11 = sub_3FCE64(a2, &v30);
  *(_DWORD *)(a1 + 32) = v11 & ~(v11 >> 31);
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B93A0;
  strcpy(*(char **)__p, "relaxed_dominance_offset_percentage");
  double v12 = sub_5C7E8(a3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = sub_40A328(&v30, v12 / 100.0);
  *(_DWORD *)&__p[8] = v13;
  int v14 = sub_4F44((unsigned int *)__p);
  int v15 = v30;
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9280;
  strcpy(*(char **)__p, "relaxed_dominance_offset_energy_wh");
  signed int v16 = v14 - v15;
  signed int v17 = llround(sub_5C7E8(a3, (uint64_t)__p) * 1000.0);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (v16 >= v17) {
    int v18 = v17;
  }
  else {
    int v18 = v16;
  }
  *(_DWORD *)a1 = v18 & ~(v18 >> 31);
  __p[23] = 21;
  strcpy(__p, "max_low_soc_penalty_s");
  int v19 = sub_5D2EC(a3, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  int v20 = sub_40A440(v9);
  *(void *)long long __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B5EB0;
  strcpy(*(char **)__p, "max_critical_soc_penalty_s");
  int v21 = sub_5D2EC(a3, __p);
  double v22 = fmax((double)v20 / 1000000.0, 1.0);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  double v23 = fmax((double)(int)sub_40A440(v10) / 1000000.0, 1.0);
  double v24 = (double)v19 / v22;
  if (v24 >= 0.0)
  {
    if (v24 >= 4.50359963e15) {
      goto LABEL_20;
    }
    uint64_t v25 = (uint64_t)(v24 + v24) + 1;
  }
  else
  {
    if (v24 <= -4.50359963e15) {
      goto LABEL_20;
    }
    uint64_t v25 = (uint64_t)(v24 + v24);
    if (v25 >= 1) {
      --v25;
    }
  }
  double v24 = (double)(v25 >> 1);
LABEL_20:
  *(_DWORD *)(a1 + 8) = (int)v24;
  double v26 = (double)v21 / v23;
  if (v26 >= 0.0)
  {
    if (v26 >= 4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v27 = (uint64_t)(v26 + v26) + 1;
  }
  else
  {
    if (v26 <= -4.50359963e15) {
      goto LABEL_28;
    }
    uint64_t v27 = (uint64_t)(v26 + v26);
    if (v27 >= 1) {
      --v27;
    }
  }
  double v26 = (double)(v27 >> 1);
LABEL_28:
  *(_DWORD *)(a1 + 16) = (int)v26;
  __p[23] = 18;
  strcpy(__p, "high_soc_penalty_s");
  *(_DWORD *)(a1 + 24) = sub_5D2EC(a3, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20B9960;
  strcpy(*(char **)__p, "min_energy_consumption_between_stops_wh");
  *(_DWORD *)(a1 + 36) = sub_5CC34(a3, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x20uLL);
  *(_OWORD *)&__p[8] = xmmword_20B8870;
  strcpy(*(char **)__p, "max_close_stops_penalty_s");
  *(_DWORD *)(a1 + 40) = sub_5D2EC(a3, __p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  *(void *)long long __p = operator new(0x28uLL);
  *(_OWORD *)&__p[8] = xmmword_20E12D0;
  strcpy(*(char **)__p, "min_num_distinct_first_stop_candidates");
  *(_DWORD *)(a1 + 44) = sub_31AC04(a3, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  return a1;
}

void sub_FE5BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_FE5C2C@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void sub_FE5C3C()
{
  unk_25FD2AF = 16641;
  word_25FD298 = 65;
  byte_25FD2C7 = 1;
  byte_25FD2B1 = 0;
}

double sub_FE5C64(uint64_t a1)
{
  *(void *)&double result = 0x8000000080000000;
  *(void *)a1 = 0x8000000080000000;
  *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
  return result;
}

BOOL sub_FE5C78(_DWORD *a1)
{
  if (*a1 == 0x7FFFFFFF) {
    return 0;
  }
  if (a1[1] == 0x7FFFFFFF) {
    return 0;
  }
  return a1[2] != 0x7FFFFFFF;
}

uint64_t sub_FE5CB8(_DWORD *a1, _DWORD *a2)
{
  int v2 = a1[2];
  int v3 = a2[2];
  if (v2 < v3) {
    return 1;
  }
  int v5 = a1[1];
  int v6 = a2[1];
  BOOL v8 = v5 >= v6 && *a2 < *a1;
  unsigned int v9 = v6 < v5 || v8;
  if (v3 >= v2) {
    return v9;
  }
  else {
    return 0;
  }
}

uint64_t sub_FE5CFC(uint64_t a1, int a2, int a3)
{
  int v6 = sub_3FDE18(a3, a1);
  int v7 = sub_3FDEFC(a3, a1);
  if (v6 <= a2) {
    return 0;
  }
  int v8 = v7;
  double v9 = (double)(v6 - a2) / 1000000.0 * (double)*(int *)(a1 + 8);
  if (v9 >= 0.0)
  {
    if (v9 >= 4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v10 = (uint64_t)(v9 + v9) + 1;
  }
  else
  {
    if (v9 <= -4.50359963e15) {
      goto LABEL_12;
    }
    uint64_t v10 = (uint64_t)(v9 + v9);
    if (v10 >= 1) {
      --v10;
    }
  }
  double v9 = (double)(v10 >> 1);
LABEL_12:
  uint64_t result = (int)v9;
  BOOL v12 = __OFSUB__(v8, a2);
  int v13 = v8 - a2;
  if (!((v13 < 0) ^ v12 | (v13 == 0)))
  {
    double v14 = (double)v13 / 1000000.0 * (double)*(int *)(a1 + 16);
    if (v14 >= 0.0)
    {
      if (v14 < 4.50359963e15)
      {
        uint64_t v15 = (uint64_t)(v14 + v14) + 1;
LABEL_20:
        double v14 = (double)(v15 >> 1);
      }
    }
    else if (v14 > -4.50359963e15)
    {
      uint64_t v15 = (uint64_t)(v14 + v14);
      if (v15 >= 1) {
        --v15;
      }
      goto LABEL_20;
    }
    return ((int)v14 + result);
  }
  return result;
}

unint64_t sub_FE5E64(uint64_t a1, uint64_t a2, int a3, int a4, signed int a5, char a6, int a7, _DWORD *a8)
{
  int v13 = (int *)(a2 + 20);
  int v14 = *(_DWORD *)(a2 + 20);
  int v15 = v14 + a3 - *a8;
  if (a3 == 0x7FFFFFFF) {
    int v15 = *(_DWORD *)(a2 + 20);
  }
  signed int v16 = *(_DWORD *)(a2 + 28) + a4;
  if (a4 == 0x7FFFFFFF) {
    signed int v16 = 0;
  }
  if (*(_DWORD *)(a2 + 16) > v15) {
    int v15 = *(_DWORD *)(a2 + 16);
  }
  if (v15 >= v16) {
    signed int v17 = v15;
  }
  else {
    signed int v17 = v16;
  }
  unint64_t v18 = sub_3F8970(*(char ***)(v13 - 3), v17) >> 32;
  if (a5 != 0x7FFFFFFFLL)
  {
    unint64_t v19 = sub_3F8970(*(char ***)(a2 + 8), a5);
    if (SHIDWORD(v19) > (int)v18) {
      LODWORD(v18) = HIDWORD(v19);
    }
  }
  int v20 = v18 - v14 + *a8;
  uint64_t v21 = sub_40A8CC(v13, v18);
  sub_FE5CFC(a1, v20, a7);
  sub_3FDF8C(a6, a1);
  return v18 | (unint64_t)(v21 << 32);
}

unint64_t sub_FE5F98(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int a5, void *a6)
{
  int v11 = *(_DWORD *)(a3 + 4);
  BOOL v12 = (int *)(a2 + 20);
  uint64_t v13 = (*(_DWORD *)(a2 + 28) + v11);
  sub_40A2E4((uint64_t)v16, *(_DWORD *)(a2 + 28) + v11, a6);
  int v14 = sub_40AA28(v12, v16);
  sub_FE5CFC(a1, *(_DWORD *)a6 + v14, a5);
  sub_3FDF8C(a4, a1);
  return v13 | ((unint64_t)*(unsigned int *)(a3 + 4) << 32);
}

unint64_t sub_FE6054(int *a1, uint64_t a2, char a3, int a4, _DWORD *a5)
{
  unint64_t v10 = sub_FE5E64((uint64_t)a1, a2, a1[1], 0x7FFFFFFF, 0x7FFFFFFF, a3, a4, a5);
  int v12 = v11;
  unint64_t v49 = v10;
  int v50 = v11;
  char v42 = a3;
  int v43 = a4;
  unint64_t v13 = sub_FE5E64((uint64_t)a1, a2, a1[3], 0x7FFFFFFF, 0x7FFFFFFF, a3, a4, a5);
  unint64_t v47 = v13;
  int v48 = v14;
  if (v14 >= v12
    && (v12 < v14
     || SHIDWORD(v10) >= SHIDWORD(v13) && ((int)v10 < (int)v13 ? (BOOL v15 = SHIDWORD(v13) < SHIDWORD(v10)) : (BOOL v15 = 1), v15)))
  {
    signed int v16 = &v49;
  }
  else
  {
    signed int v16 = &v47;
  }
  unint64_t v51 = *v16;
  int v52 = *((_DWORD *)v16 + 2);
  if (*(_DWORD *)(a2 + 16) <= *(_DWORD *)(a2 + 20)) {
    signed int v17 = *(_DWORD *)(a2 + 20);
  }
  else {
    signed int v17 = *(_DWORD *)(a2 + 16);
  }
  unint64_t v18 = sub_3F8970(*(char ***)(a2 + 8), v17);
  int v19 = v18;
  uint64_t v21 = v20;
  unsigned int v22 = *(_DWORD *)a2;
  uint64_t v23 = sub_40A8CC((int *)(a2 + 20), SHIDWORD(v18));
  int v39 = *(_DWORD *)(a2 + 28);
  unsigned int v40 = *(_DWORD *)a2;
  unint64_t v41 = sub_52058(*(void *)(a2 + 8));
  sub_FE62EC((unsigned int *)a2, (uint64_t *)&v44);
  double v24 = v46;
  if (v46 != v21)
  {
    unint64_t v25 = (v22 + v19) | (unint64_t)(v23 << 32);
    double v26 = v21 + 2;
    while (SHIDWORD(v10) >= SHIDWORD(v25))
    {
      int v28 = *(_DWORD *)(a2 + 28);
      uint64_t v29 = (v28 + HIDWORD(v25));
      sub_40A2E4((uint64_t)&v44, v28 + HIDWORD(v25), a5);
      int v30 = sub_40AA28((int *)(a2 + 20), (unsigned int *)&v44);
      int v31 = sub_FE5CFC((uint64_t)a1, *a5 + v30, v43);
      int v32 = sub_3FDF8C(v42, (uint64_t)a1);
      int v33 = a1[6];
      if (v32 >= (int)v29) {
        int v33 = 0;
      }
      int v34 = v31 + v25 + v33;
      unint64_t v44 = v25 & 0xFFFFFFFF00000000 | v29;
      int v45 = v34;
      if (v34 < v52
        || v52 >= v34
        && (SHIDWORD(v51) < SHIDWORD(v25)
         || ((int)v51 < (int)v29 ? (BOOL v35 = SHIDWORD(v51) <= SHIDWORD(v25)) : (BOOL v35 = 0), v35)))
      {
        uint64_t v36 = &v44;
      }
      else
      {
        uint64_t v36 = &v51;
      }
      unint64_t v37 = *v36;
      int v52 = *((_DWORD *)v36 + 2);
      unint64_t v51 = v37;
      if ((unint64_t)v26 < v41)
      {
        unint64_t v25 = (*v26 + v40) | ((unint64_t)(v26[1] - v39) << 32);
        BOOL v27 = v26 == v24;
        v26 += 2;
        if (v27) {
          return v51;
        }
      }
      else
      {
        unint64_t v25 = 0x7FFFFFFF7FFFFFFFLL;
        BOOL v27 = v26 == v24;
        v26 += 2;
        if (v27) {
          return v51;
        }
      }
    }
  }
  return v51;
}

uint64_t sub_FE62EC@<X0>(unsigned int *a1@<X0>, uint64_t *a2@<X8>)
{
  double v4 = (int *)(a1 + 5);
  int v5 = a1[4];
  if (v5 <= (int)a1[5]) {
    unsigned int v6 = a1[5];
  }
  else {
    unsigned int v6 = a1[4];
  }
  if (v5 <= (int)(a1[7] + a1[6])) {
    signed int v7 = a1[7] + a1[6];
  }
  else {
    signed int v7 = a1[4];
  }
  unint64_t v8 = sub_3F8970(*((char ***)a1 + 1), v7);
  unint64_t v10 = v9;
  int v11 = v4[2];
  if (*v9 != v8)
  {
    if (v6 != v7)
    {
      uint64_t v15 = *a1 + v8;
      uint64_t v13 = v15 | (sub_40A8CC(v4, SHIDWORD(v8)) << 32);
      unint64_t v14 = *a1 | ((unint64_t)-a1[7] << 32);
      v10 += 2;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v6 == v7 || v9[1] - v11 <= (int)a1[6])
  {
LABEL_12:
    unint64_t v14 = *a1 | ((unint64_t)-v11 << 32);
    unint64_t v10 = v9 + 2;
    uint64_t v13 = 0x7FFFFFFF7FFFFFFFLL;
    goto LABEL_14;
  }
  uint64_t v12 = *a1 + v8;
  uint64_t v13 = v12 | (sub_40A8CC(v4, SHIDWORD(v8)) << 32);
  unint64_t v14 = *a1 | ((unint64_t)-a1[7] << 32);
LABEL_14:
  uint64_t result = sub_52058(*((void *)a1 + 1));
  *a2 = v13;
  a2[1] = v14;
  a2[2] = (uint64_t)v10;
  a2[3] = result;
  return result;
}

uint64_t sub_FE6408(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 32) == -1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a2 + 20);
  int v3 = *(_DWORD *)(a1 + 36);
  BOOL v4 = __OFSUB__(v3, v2);
  int v5 = v3 - v2;
  if ((v5 < 0) ^ v4 | (v5 == 0)) {
    return 0;
  }
  double v6 = (double)v5 / (double)v3 * (double)*(int *)(a1 + 40);
  if (v6 >= 0.0)
  {
    if (v6 < 4.50359963e15)
    {
      uint64_t v7 = (uint64_t)(v6 + v6) + 1;
LABEL_11:
      double v6 = (double)(v7 >> 1);
    }
  }
  else if (v6 > -4.50359963e15)
  {
    uint64_t v7 = (uint64_t)(v6 + v6);
    if (v7 >= 1) {
      --v7;
    }
    goto LABEL_11;
  }
  return (int)v6;
}

double sub_FE64A0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 101) = 0u;
  *(_OWORD *)(a1 + 120) = xmmword_20B8E30;
  *(void *)(a1 + 136) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  return result;
}

void sub_FE64F4()
{
  uint64_t v0 = (uint64_t *)__chkstk_darwin();
  char v2 = v1;
  v413 = v3;
  v419 = v4;
  uint64_t v421 = v5;
  uint64_t v7 = v6;
  double v9 = v8;
  v415 = v0;
  uint64_t v10 = *v0;
  *((unsigned char *)&v536.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&v536, "EVRouting");
  memset(__p, 0, 24);
  v407 = sub_374CDC(v10, (uint64_t)&v536, (uint64_t *)__p);
  int v11 = (void **)__p[0];
  if (__p[0])
  {
    uint64_t v12 = (void **)__p[1];
    uint64_t v13 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v12 - 1) < 0) {
          operator delete(*(v12 - 3));
        }
        v12 -= 3;
      }
      while (v12 != v11);
      uint64_t v13 = __p[0];
    }
    __p[1] = v11;
    operator delete(v13);
  }
  if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v536.__r_.__value_.__l.__data_);
  }
  unint64_t v14 = (uint64_t *)*v415;
  *((unsigned char *)&v536.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&v536, "EVPathGraphSearch");
  memset(__p, 0, 24);
  v411 = sub_374CDC((uint64_t)v14, (uint64_t)&v536, (uint64_t *)__p);
  uint64_t v15 = (void **)__p[0];
  if (__p[0])
  {
    signed int v16 = (void **)__p[1];
    signed int v17 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
      signed int v17 = __p[0];
    }
    __p[1] = v15;
    operator delete(v17);
  }
  if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v536.__r_.__value_.__l.__data_);
  }
  v412 = (_DWORD *)nullsub_1(v413);
  *((unsigned char *)v415 + 116) = 1;
  *((_DWORD *)v415 + 2) = sub_40A4FC(v412);
  sub_725D0((uint64_t)v534);
  *((unsigned char *)&v536.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v536, "cost_functions");
  unint64_t v18 = (void *)sub_560F4(v411, (uint64_t)&v536);
  if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v536.__r_.__value_.__l.__data_);
  }
  sub_F395A4(v421 + 17, (uint64_t)&v536);
  int v19 = std::string::append(&v536, "_");
  std::string v533 = *v19;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v536.__r_.__value_.__l.__data_);
  }
  char v405 = v2;
  v536.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&v536.__r_.__value_.__r.__words[1] = xmmword_20B9250;
  strcpy(v536.__r_.__value_.__l.__data_, "charging_station_search");
  uint64_t v20 = sub_561B0(v18, (uint64_t)&v536);
  uint64_t v21 = (const void **)v20;
  int v422 = SHIBYTE(v533.__r_.__value_.__r.__words[2]);
  if ((v533.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v533.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v533.__r_.__value_.__l.__size_;
  }
  int v23 = *(char *)(v20 + 23);
  if (v23 >= 0) {
    size_t v24 = *(unsigned __int8 *)(v20 + 23);
  }
  else {
    size_t v24 = *(void *)(v20 + 8);
  }
  unint64_t v25 = v24 + size;
  if (v24 + size > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v25 <= 0x16)
  {
    unint64_t v532 = 0;
    size_t v531 = 0;
    long long __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v532) = v24 + size;
    if (!size) {
      goto LABEL_38;
    }
    goto LABEL_34;
  }
  uint64_t v65 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v25 | 7) != 0x17) {
    uint64_t v65 = v25 | 7;
  }
  uint64_t v66 = v65 + 1;
  p_dst = (void **)operator new(v65 + 1);
  unint64_t v532 = v66 | 0x8000000000000000;
  long long __dst = p_dst;
  size_t v531 = v24 + size;
  if (size)
  {
LABEL_34:
    if (v422 >= 0) {
      BOOL v27 = &v533;
    }
    else {
      BOOL v27 = (std::string *)v533.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v27, size);
  }
LABEL_38:
  int v28 = (char *)p_dst + size;
  if (v24)
  {
    if (v23 >= 0) {
      uint64_t v29 = v21;
    }
    else {
      uint64_t v29 = *v21;
    }
    memmove(v28, v29, v24);
  }
  v28[v24] = 0;
  if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v536.__r_.__value_.__l.__data_);
  }
  uint64_t v30 = sub_374E14((uint64_t *)*v415, (uint64_t)&__dst);
  *((unsigned char *)&v536.__r_.__value_.__s + 23) = 14;
  strcpy((char *)&v536, "shortcut_graph");
  uint64_t v31 = sub_561B0(v18, (uint64_t)&v536);
  int v32 = (const void **)v31;
  int v33 = *(char *)(v31 + 23);
  if (v33 >= 0) {
    size_t v34 = *(unsigned __int8 *)(v31 + 23);
  }
  else {
    size_t v34 = *(void *)(v31 + 8);
  }
  unint64_t v35 = v34 + size;
  if (v34 + size > 0x7FFFFFFFFFFFFFF7) {
    sub_188D690();
  }
  if (v35 <= 0x16)
  {
    unint64_t v529 = 0;
    size_t v528 = 0;
    v527 = 0;
    uint64_t v36 = (char *)&v527;
    HIBYTE(v529) = v34 + size;
    if (!size) {
      goto LABEL_55;
    }
    goto LABEL_51;
  }
  uint64_t v67 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v35 | 7) != 0x17) {
    uint64_t v67 = v35 | 7;
  }
  uint64_t v68 = v67 + 1;
  uint64_t v36 = (char *)operator new(v67 + 1);
  unint64_t v529 = v68 | 0x8000000000000000;
  v527 = v36;
  size_t v528 = v34 + size;
  if (size)
  {
LABEL_51:
    if (v422 >= 0) {
      unint64_t v37 = &v533;
    }
    else {
      unint64_t v37 = (std::string *)v533.__r_.__value_.__r.__words[0];
    }
    memmove(v36, v37, size);
  }
LABEL_55:
  unint64_t v38 = &v36[size];
  if (v34)
  {
    if (v33 >= 0) {
      int v39 = v32;
    }
    else {
      int v39 = *v32;
    }
    memmove(v38, v39, v34);
  }
  v38[v34] = 0;
  if (SHIBYTE(v536.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v536.__r_.__value_.__l.__data_);
  }
  uint64_t v409 = sub_374E14((uint64_t *)*v415, (uint64_t)&v527);
  sub_FF44C4((uint64_t)v526, (uint64_t)v413, *v415);
  sub_FF44E4((uint64_t)v526, v419, v30, v421, v7, (uint64_t)(v415 + 1), (uint64_t)v525);
  sub_FF5284(v526, (__n128 *)&v536);
  sub_33998((uint64_t)(v415 + 15), (uint64_t)&v536);
  uint64_t v40 = v7[1] - *v7;
  v423 = v9;
  if (v40)
  {
    uint64_t v41 = 0;
    unint64_t v42 = 0;
    uint64_t v416 = v40 / 2336;
    do
    {
      uint64_t v43 = *v419 + 32 * ((v42 >> 1) + 1);
      memset(&v536, 0, sizeof(v536));
      int v45 = *(const void **)v43;
      uint64_t v44 = *(void *)(v43 + 8);
      int64_t v46 = v44 - *(void *)v43;
      if (v44 != *(void *)v43)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (v46 >> 4) >= 0x333333333333334) {
          sub_2E00();
        }
        unint64_t v47 = operator new(v46);
        v536.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
        v536.__r_.__value_.__l.__size_ = (std::string::size_type)v47;
        v536.__r_.__value_.__r.__words[2] = (std::string::size_type)v47 + 16 * (v46 >> 4);
        size_t v48 = 80 * ((v46 - 80) / 0x50uLL) + 80;
        memcpy(v47, v45, v48);
        v536.__r_.__value_.__l.__size_ = (std::string::size_type)v47 + v48;
        double v9 = v423;
      }
      uint64_t v537 = *(void *)(v43 + 24);
      uint64_t v538 = 0;
      sub_1000D20();
      if (v536.__r_.__value_.__r.__words[0])
      {
        v536.__r_.__value_.__l.__size_ = v536.__r_.__value_.__r.__words[0];
        operator delete(v536.__r_.__value_.__l.__data_);
      }
      ++v42;
      v41 += 2336;
    }
    while (v416 != v42);
  }
  sub_725D0((uint64_t)v524);
  v522 = 0;
  v521 = 0;
  uint64_t v523 = 0;
  sub_FEAB34((char **)&v521, 0x7E3F1F8FC7E3F1F9 * ((v7[1] - *v7) >> 5));
  uint64_t v49 = *v7;
  uint64_t v420 = v7[1];
  if (*v7 != v420)
  {
    uint64_t v50 = (uint64_t)v522;
    do
    {
      sub_EE08B0(v49, (uint64_t)&v536);
      unint64_t v51 = sub_FEAE44((char **)&v521, v50, (uint64_t)&v536);
      sub_328138((uint64_t)v543);
      int v52 = v543;
      do
      {
        long long v53 = (uint64_t *)(v52 - 48);
        uint64_t v54 = *((void *)v52 - 3);
        if (v54)
        {
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          __n128 v57 = v52 - 40;
          do
          {
            if ((*(char *)(*v53 + v56) & 0x80000000) == 0)
            {
              uint64_t v58 = *v57 + v55;
              long long v59 = *(void **)(v58 + 8);
              if (v59)
              {
                *(void *)(v58 + 16) = v59;
                operator delete(v59);
                uint64_t v54 = *((void *)v52 - 3);
              }
            }
            ++v56;
            v55 += 32;
          }
          while (v56 != v54);
          operator delete(*((void **)v52 - 6));
          *((void *)v52 - 6) = &unk_20E1710;
          *((void *)v52 - 1) = 0;
          *((void *)v52 - 4) = 0;
          *((void *)v52 - 3) = 0;
          *__n128 v57 = 0;
        }
        v52 -= 48;
      }
      while (v53 != &v542);
      if (v540)
      {
        v541 = v540;
        operator delete(v540);
      }
      uint64_t v50 = (uint64_t)(v51 + 1776);
      sub_EDD2E4((uint64_t)&v536);
      v49 += 2336;
      double v9 = v423;
    }
    while (v49 != v420);
  }
  sub_EDCB7C((uint64_t)v520, (uint64_t)&v521);
  v519[0] = *v415;
  v519[1] = v413;
  sub_EBA1EC((uint64_t)v516, *(void *)(v421 + 4), *(_DWORD *)(v421 + 12), *(unsigned char *)(v421 + 16), v409, v409);
  __int16 v517 = 257;
  char v518 = 1;
  sub_EBA204((uint64_t)v505, (uint64_t)v516, (uint64_t)v519);
  sub_FE5268(&v536, (void *)*v415, (uint64_t)v413);
  sub_EBD71C((uint64_t)v505, (uint64_t *)v520, (uint64_t)&v536, (uint64_t)v496);
  long long v60 = (uint64_t *)*v415;
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91C0;
  strcpy((char *)__p[0], "ChargingStationPenalties");
  memset(v426, 0, sizeof(v426));
  long long v61 = sub_374CDC((uint64_t)v60, (uint64_t)__p, (uint64_t *)v426);
  sub_FE452C((uint64_t)v495, v61);
  int32x2_t v62 = (void **)v426[0];
  if (v426[0])
  {
    __n128 v63 = (void **)v426[1];
    long long v64 = v426[0];
    if (v426[1] != v426[0])
    {
      do
      {
        if (*((char *)v63 - 1) < 0) {
          operator delete(*(v63 - 3));
        }
        v63 -= 3;
      }
      while (v63 != v62);
      long long v64 = v426[0];
    }
    v426[1] = v62;
    operator delete(v64);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_FE474C((uint64_t)v494, v495, (uint64_t)v413, *v415);
  sub_FE48CC((uint64_t)v494, (uint64_t)v525, v496);
  unint64_t v69 = -1431655765 * ((*((void *)&v500 + 1) - (void)v500) >> 4);
  v415[12] = ((unint64_t)(v499 - (unsigned char *)v498) >> 2) - 1;
  v415[13] = v69;
  v415[7] = (unint64_t)sub_72688((uint64_t)v524);
  sub_725A0((uint64_t)v524);
  sub_FEB6A8((uint64_t *)&v480, (uint64_t)v496);
  int v70 = sub_EB9528((uint64_t)v496);
  if (v70 == sub_EB9528((uint64_t)v496) >> 32
    || (int v71 = sub_EB9550((uint64_t)v496), v71 == (unint64_t)sub_EB9550((uint64_t)v496) >> 32))
  {
    v9->i64[0] = 0;
    v9->i64[1] = 0;
    v9[1].i64[0] = 0;
    goto LABEL_105;
  }
  v478 = 0;
  v477 = 0;
  uint64_t v479 = 0;
  unint64_t v81 = sub_EB9528((uint64_t)v496);
  unint64_t v82 = HIDWORD(v81);
  LODWORD(v426[0]) = v81;
  __p[0] = &v477;
  if (v81 != HIDWORD(v81))
  {
    do
    {
      sub_737BC((uint64_t *)__p, v426);
      ++LODWORD(v426[0]);
    }
    while (LODWORD(v426[0]) != v82);
  }
  v475 = 0;
  v474 = 0;
  uint64_t v476 = 0;
  unint64_t v83 = sub_EB9550((uint64_t)v496);
  unint64_t v84 = HIDWORD(v83);
  LODWORD(v426[0]) = v83;
  __p[0] = &v474;
  if (v83 != HIDWORD(v83))
  {
    do
    {
      sub_737BC((uint64_t *)__p, v426);
      ++LODWORD(v426[0]);
    }
    while (LODWORD(v426[0]) != v84);
  }
  v415[8] = (unint64_t)sub_72688((uint64_t)v524);
  sub_725A0((uint64_t)v524);
  uint64_t v85 = (uint64_t)(v413 + 40);
  __p[0] = (void *)sub_3FA068((uint64_t)(v413 + 40));
  __p[1] = v86;
  uint64_t v87 = sub_40F008(__p, 1);
  if (*(_DWORD *)(v87 + 8)) {
    BOOL v417 = *(_DWORD *)(v87 + 12) != -1;
  }
  else {
    BOOL v417 = 0;
  }
  unint64_t v88 = (uint64_t *)*v415;
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9390;
  strcpy((char *)__p[0], "EVPathFindingHeuristicParameters");
  memset(v426, 0, sizeof(v426));
  unint64_t v89 = sub_374CDC((uint64_t)v88, (uint64_t)__p, (uint64_t *)v426);
  sub_54214((uint64_t)v472, (uint64_t)v89);
  unint64_t v90 = (void **)v426[0];
  if (v426[0])
  {
    unint64_t v91 = (void **)v426[1];
    unint64_t v92 = v426[0];
    if (v426[1] != v426[0])
    {
      do
      {
        if (*((char *)v91 - 1) < 0) {
          operator delete(*(v91 - 3));
        }
        v91 -= 3;
      }
      while (v91 != v90);
      unint64_t v92 = v426[0];
    }
    v426[1] = v90;
    operator delete(v92);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_FE5C28((uint64_t)v470, v407, v472, v413);
  v493[0] = v470[0];
  v493[1] = v470[1];
  v493[2] = v471;
  char v492 = 1;
  int v93 = (uint64_t *)*v415;
  HIBYTE(__p[2]) = 21;
  strcpy((char *)__p, "EVTargetLabelSelector");
  memset(v426, 0, sizeof(v426));
  unint64_t v94 = sub_374CDC((uint64_t)v93, (uint64_t)__p, (uint64_t *)v426);
  sub_54214((uint64_t)v468, (uint64_t)v94);
  uint64_t v95 = (void **)v426[0];
  if (v426[0])
  {
    unint64_t v96 = (void **)v426[1];
    unint64_t v97 = v426[0];
    if (v426[1] != v426[0])
    {
      do
      {
        if (*((char *)v96 - 1) < 0) {
          operator delete(*(v96 - 3));
        }
        v96 -= 3;
      }
      while (v96 != v95);
      unint64_t v97 = v426[0];
    }
    v426[1] = v95;
    operator delete(v97);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  sub_FF18D0((uint64_t)&v463, v468, (uint64_t)v413);
  int v98 = sub_4F44(v413 + 96);
  char v99 = v405 ^ 1;
  char v467 = v405 ^ 1;
  int v100 = v465;
  if (v465 <= 1) {
    int v100 = 1;
  }
  int v463 = v98;
  unsigned int v406 = v100;
  unsigned int v465 = v100;
  uint64_t v101 = v466;
  if ((v99 & 1) == 0)
  {
    uint64_t v466 = 0;
    unsigned int v465 = 0;
  }
  unsigned int v414 = v464;
  v9->i64[0] = 0;
  v9->i64[1] = 0;
  v9[1].i64[0] = 0;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "run_min_time_search");
  BOOL v408 = sub_29D62C(v411, (uint64_t)__p);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (!v408) {
      goto LABEL_191;
    }
    goto LABEL_190;
  }
  operator delete(__p[0]);
  if (v408)
  {
LABEL_190:
    unsigned int v464 = 1;
    sub_FEBB70((uint64_t)&v480, (unsigned int **)&v477, (uint64_t)&v474, *(void *)v412, v412[2], (uint64_t)__p);
    sub_FE9A98(v415, (uint64_t)&v480, v496, v520, (uint64_t)v413, (uint64_t)&v463, v417, 0, 0, v525, v9);
    unsigned int v464 = v414;
  }
LABEL_191:
  *(_OWORD *)v426 = v497;
  long long v456 = v500;
  sub_ED432C((uint64_t *)v426, (uint64_t *)&v456, (uint64_t)__p);
  sub_ED44AC((uint64_t)v426, (long long *)__p);
  sub_ED44AC((uint64_t)&v456, &v439);
  unsigned __int8 v102 = v430;
  uint64_t v103 = v431;
  while (v102 == v103 || v459 == v460)
  {
    if ((v102 == v103) == (v459 == v460)) {
      goto LABEL_208;
    }
    unsigned int v104 = v426[0];
LABEL_202:
    if (sub_ECF004(v104 + 2)) {
      v104[3] = v104[2];
    }
    __int32 v106 = (char *)v426[1];
    int v107 = (char *)v426[0] + 48;
    unsigned __int8 v102 = v430;
    uint64_t v103 = v431;
    uint64_t v108 = (void *)(((v431 - (unsigned char *)v430) >> 3) - 1);
    v426[0] = (char *)v426[0] + 48;
    if (v426[1] < v108)
    {
      do
      {
        if (v107 != *((char **)v430 + (void)v106)) {
          break;
        }
        v426[1] = v106 + 1;
        int v107 = (char *)*((void *)v426[2] + (void)v106 + 1);
        v426[0] = v107;
        ++v106;
      }
      while (v108 != v426[1]);
    }
  }
  unsigned int v104 = v426[0];
  BOOL v105 = v426[1] == *((void **)&v456 + 1) && v426[0] == (void *)v456;
  if (!v105) {
    goto LABEL_202;
  }
LABEL_208:
  if (v459)
  {
    v460 = v459;
    operator delete(v459);
  }
  if (v457)
  {
    v458 = v457;
    operator delete(v457);
  }
  if (v430)
  {
    v431 = v430;
    operator delete(v430);
  }
  if (v426[2])
  {
    v427 = (char *)v426[2];
    operator delete(v426[2]);
  }
  if (v442)
  {
    v443 = v442;
    operator delete(v442);
  }
  if (v440)
  {
    v441 = v440;
    operator delete(v440);
  }
  if (*((void *)&v437 + 1))
  {
    uint64_t v438 = *((void *)&v437 + 1);
    operator delete(*((void **)&v437 + 1));
  }
  if (__p[2])
  {
    __p[3] = __p[2];
    operator delete(__p[2]);
  }
  int v109 = (uint64_t *)*v415;
  HIBYTE(__p[2]) = 19;
  strcpy((char *)__p, "DrivingPathAnalyzer");
  memset(v426, 0, sizeof(v426));
  unsigned int v110 = sub_374CDC((uint64_t)v109, (uint64_t)__p, (uint64_t *)v426);
  HIBYTE(v454) = 7;
  strcpy((char *)&v452, "default");
  uint64_t v111 = (void *)sub_560F4(v110, (uint64_t)&v452);
  sub_1068CE4((uint64_t **)&v456, v109, v111, *(unsigned __int8 *)(v421 + 16));
  if (SHIBYTE(v454) < 0) {
    operator delete(v452);
  }
  long long v112 = (void **)v426[0];
  if (v426[0])
  {
    unsigned int v113 = (void **)v426[1];
    uint64_t v114 = v426[0];
    if (v426[1] != v426[0])
    {
      do
      {
        if (*((char *)v113 - 1) < 0) {
          operator delete(*(v113 - 3));
        }
        v113 -= 3;
      }
      while (v113 != v112);
      uint64_t v114 = v426[0];
    }
    v426[1] = v112;
    operator delete(v114);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  v426[0] = operator new(0x20uLL);
  *(_OWORD *)&v426[1] = xmmword_20B8E90;
  strcpy((char *)v426[0], "run_avoid_area_incidents_search");
  if (!sub_29D62C(v411, (uint64_t)v426))
  {
    BOOL v410 = 0;
    if ((SHIBYTE(v426[2]) & 0x80000000) == 0) {
      goto LABEL_250;
    }
    goto LABEL_247;
  }
  uint64_t v115 = sub_40EFE8((uint64_t)v9);
  uint64_t v116 = sub_52058((uint64_t)v9);
  if (v115 == v116)
  {
    BOOL v410 = 1;
    if ((SHIBYTE(v426[2]) & 0x80000000) == 0) {
      goto LABEL_250;
    }
    goto LABEL_247;
  }
  do
  {
    uint64_t v117 = (uint64_t *)nullsub_1(v115);
    uint64_t v118 = *v117;
    uint64_t v119 = v117[1];
    BOOL v410 = *v117 != v119;
    if (*v117 == v119) {
      break;
    }
    while (1)
    {
      sub_106A7A0((char **)&v456, (uint64_t)__p);
      long long v120 = __p[0];
      long long v121 = __p[1];
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v120 != v121) {
        break;
      }
      v118 += 472;
      if (v118 == v119)
      {
        BOOL v410 = 0;
        goto LABEL_249;
      }
    }
    v115 += 48;
  }
  while (v115 != v116);
LABEL_249:
  if (SHIBYTE(v426[2]) < 0)
  {
LABEL_247:
    operator delete(v426[0]);
    if (!v410) {
      goto LABEL_315;
    }
LABEL_251:
    unsigned int v464 = 1;
    int v122 = v412[2];
    v452 = *(void **)v412;
    int v453 = v122;
    uint64_t v489 = sub_40A454((uint64_t)&v452);
    unsigned int v123 = sub_4F44((unsigned int *)&v452);
    sub_3F885C((unint64_t **)__p, 0, v123);
    if ((void)v490)
    {
      *((void *)&v490 + 1) = v490;
      operator delete((void *)v490);
    }
    long long v490 = *(_OWORD *)__p;
    v491 = __p[2];
    v485 = v484;
    v483 = (char *)v482;
    unsigned int v486 = 0;
    long long v124 = v487;
    if (v488 - (unsigned char *)v487 >= 1)
    {
      unint64_t v125 = ((unint64_t)(v488 - (unsigned char *)v487) >> 5) + 1;
      do
      {
        sub_FEC1A0(v124, 0, 0, 0);
        v124[6] = 0;
        --v125;
        v124 += 8;
      }
      while (v125 > 1);
    }
    sub_FEBC88((uint64_t)&v480, (unsigned int **)&v477, (unsigned int *)&v452);
    if (!v486)
    {
LABEL_314:
      double v9 = v423;
      sub_FE9A98(v415, (uint64_t)&v480, v496, v520, (uint64_t)v413, (uint64_t)&v463, v417, 1, 0, v525, v423);
      unsigned int v464 = v414;
      goto LABEL_315;
    }
    while (1)
    {
      unint64_t v126 = *(unsigned int *)v482;
      uint64_t v127 = (char *)v487 + 32 * v126;
      unsigned int v128 = *((_DWORD *)v127 + 6);
      *((_DWORD *)v127 + 6) = v128 + 1;
      uint64_t v129 = *(void *)v127 + 56 * v128;
      long long v130 = *(_OWORD *)v129;
      long long v131 = *(_OWORD *)(v129 + 16);
      long long v132 = *(_OWORD *)(v129 + 32);
      uint64_t v438 = *(void *)(v129 + 48);
      *(_OWORD *)&__p[2] = v131;
      long long v437 = v132;
      *(_OWORD *)long long __p = v130;
      sub_FEFC50((uint64_t)&v480, v126, (uint64_t)__p, (uint64_t)v127);
      unint64_t v133 = *((unsigned int *)v127 + 6);
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)v127 + 1) - *(void *)v127) >> 3) <= v133)
      {
        long long v140 = (char *)v482;
        *((_DWORD *)v484 + *(unsigned int *)v482) = -1;
        unsigned int v141 = --v486;
        if (v486)
        {
          long long v142 = &v140[12 * v141];
          *(_DWORD *)long long v140 = *(_DWORD *)v142;
          *(void *)(v140 + 4) = *(void *)(v142 + 4);
          long long v143 = (char *)v482;
          *((_DWORD *)v484 + *(unsigned int *)v482) = 0;
          unsigned int v144 = v486;
          if (v486 >= 2)
          {
            int v145 = 0;
            unsigned int v146 = 0;
            unsigned int v147 = 1;
            do
            {
              unsigned int v148 = v145 + 5;
              if (v148 >= v144) {
                unsigned int v149 = v144;
              }
              else {
                unsigned int v149 = v148;
              }
              if (v147 >= v149) {
                break;
              }
              uint64_t v150 = &v143[12 * v146];
              unint64_t v153 = *(void *)(v150 + 4);
              unsigned __int8 v151 = v150 + 4;
              unint64_t v152 = v153;
              uint64_t v154 = v146;
              unint64_t v155 = HIDWORD(v153);
              unsigned __int8 v156 = &v143[12 * v147 + 4];
              unsigned int v146 = -1;
              int v157 = v153;
              do
              {
                if (*(_DWORD *)v156 < v157 || *(_DWORD *)v156 == v157 && *((_DWORD *)v156 + 1) > (int)v155)
                {
                  int v157 = *(_DWORD *)v156;
                  LODWORD(v155) = *((_DWORD *)v156 + 1);
                  unsigned int v146 = v147;
                }
                ++v147;
                v156 += 12;
              }
              while (v149 != v147);
              if (v146 >= v144) {
                break;
              }
              char v158 = &v143[12 * v146];
              uint64_t v159 = 12 * v154;
              int v160 = *(_DWORD *)v158;
              *(_DWORD *)char v158 = *(_DWORD *)&v143[v159];
              *(_DWORD *)&v143[v159] = v160;
              uint64_t v161 = *(void *)(v158 + 4);
              *(void *)(v158 + 4) = v152;
              *unsigned __int8 v151 = v161;
              long long v143 = (char *)v482;
              uint64_t v162 = (char *)v484;
              uint64_t v163 = 4 * *((unsigned int *)v482 + 3 * v146);
              uint64_t v164 = 4 * *(unsigned int *)((char *)v482 + v159);
              int v165 = *(_DWORD *)((char *)v484 + v163);
              *(_DWORD *)((char *)v484 + v163) = *(_DWORD *)((char *)v484 + v164);
              *(_DWORD *)&v162[v164] = v165;
              int v145 = 4 * v146;
              unsigned int v147 = (4 * v146) | 1;
              unsigned int v144 = v486;
            }
            while (v147 < v486);
          }
        }
        v483 -= 12;
      }
      else
      {
        uint64_t v134 = *(void *)v127 + 56 * v133;
        signed int v135 = *(_DWORD *)(v134 + 16) <= *(_DWORD *)(v134 + 20) ? *(_DWORD *)(v134 + 20) : *(_DWORD *)(v134 + 16);
        unint64_t v136 = sub_3F8970(*(char ***)(v134 + 8), v135);
        int v137 = v136;
        int v138 = *(_DWORD *)v134;
        int v139 = sub_40A8CC((int *)(v134 + 20), SHIDWORD(v136));
        sub_52058(*(void *)(v134 + 8));
        LODWORD(v426[0]) = v138 + v137;
        HIDWORD(v426[0]) = v139;
        if (v126 >= (v485 - (unsigned char *)v484) >> 2 || *((_DWORD *)v484 + v126) == -1) {
          sub_FEC610((uint64_t)&v482, v126, v426);
        }
        else {
          sub_FEC8D0((uint64_t *)&v482, v126, (uint64_t)v426);
        }
      }
      if (!*(void *)(sub_FEA8D4(v480, v126) + 8) || v492 == 0) {
        break;
      }
      if (DWORD1(v437) == -1 || DWORD1(v437) == v126) {
        break;
      }
LABEL_258:
      uint64_t v85 = (uint64_t)(v413 + 40);
      if (!v486) {
        goto LABEL_314;
      }
    }
    uint64_t v168 = v481;
    sub_EC30D4(v481, v126);
    uint64_t v169 = *(void *)(v168 + 72);
    unsigned int v170 = *(_DWORD *)(*(void *)(v168 + 48) + 4 * v126);
    sub_EC30D4(v168, v126);
    long long v171 = (unsigned int *)(v169 + 48 * v170);
    uint64_t v172 = *(void *)(v168 + 72) + 48 * *(unsigned int *)(*(void *)(v168 + 48) + 4 * (v126 + 1));
    while (1)
    {
      if (v171 == (unsigned int *)v172) {
        goto LABEL_258;
      }
      if (v171[2] != -1 && sub_40A820(v171 + 4) && (*((unsigned char *)v171 + 6) & 0x20) == 0) {
        break;
      }
LABEL_295:
      v171 += 12;
    }
    unint64_t v173 = *v171;
    if (sub_40A820(v171 + 4))
    {
      unsigned int v174 = v171[3];
      int v175 = (int)__p[0];
      long long v176 = __p[1];
      int v177 = (int)__p[2];
      v426[0] = (void *)sub_40AAA0((int *)&__p[2] + 1, (signed int *)v171 + 4);
      LODWORD(v426[1]) = v178;
      int v179 = v437;
      unint64_t v180 = 0x8000000080000000;
      if (sub_40A820(v426))
      {
        int v181 = sub_3F88E0((uint64_t)v176);
        int v182 = (int)v426[0];
        if (v181 >= SLODWORD(v426[0]))
        {
          unsigned int v183 = v175 + v174;
          unint64_t v180 = *(unint64_t *)((char *)v426 + 4);
LABEL_306:
          v426[0] = (void *)v183;
          v426[1] = v176;
          v426[2] = (void *)__PAIR64__(v182, v177);
          v427 = (char *)v180;
          int v428 = v179;
          int v429 = v126;
          LODWORD(v430) = v128;
          v184 = (unsigned int *)v487;
          v185 = (char *)v487 + 32 * v173;
          v431 = v171;
          if (sub_FEC424((uint64_t)v185, (uint64_t)v426, (int *)v493))
          {
            uint64_t v186 = *v185 + 56 * v184[8 * v173 + 6];
            if (*(_DWORD *)(v186 + 16) <= *(_DWORD *)(v186 + 20)) {
              signed int v187 = *(_DWORD *)(v186 + 20);
            }
            else {
              signed int v187 = *(_DWORD *)(v186 + 16);
            }
            unint64_t v188 = sub_3F8970(*(char ***)(v186 + 8), v187);
            int v189 = v188;
            int v190 = *(_DWORD *)v186;
            int v191 = sub_40A8CC((int *)(v186 + 20), SHIDWORD(v188));
            sub_52058(*(void *)(v186 + 8));
            LODWORD(v424[0]) = v190 + v189;
            HIDWORD(v424[0]) = v191;
            if (v173 >= (v485 - (unsigned char *)v484) >> 2 || *((_DWORD *)v484 + v173) == -1) {
              sub_FEC610((uint64_t)&v482, v173, v424);
            }
            else {
              sub_FEC8D0((uint64_t *)&v482, v173, (uint64_t)v424);
            }
          }
          goto LABEL_295;
        }
      }
      long long v176 = 0;
    }
    else
    {
      long long v176 = 0;
      unint64_t v180 = 0x8000000080000000;
    }
    int v179 = -1;
    unsigned int v183 = 0x7FFFFFFF;
    int v177 = 0x7FFFFFFF;
    int v182 = 0x7FFFFFFF;
    goto LABEL_306;
  }
LABEL_250:
  if (v410) {
    goto LABEL_251;
  }
LABEL_315:
  uint64_t v466 = v101;
  unsigned int v465 = v406;
  BOOL v192 = sub_3FA098(v85);
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_20B91B0;
  strcpy((char *)__p[0], "max_num_penalty_search_paths");
  int v193 = sub_31AC04(v411, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (v192) {
      goto LABEL_317;
    }
    goto LABEL_320;
  }
  if (!v192)
  {
LABEL_320:
    unsigned int v194 = 0;
    goto LABEL_321;
  }
LABEL_317:
  __p[0] = operator new(0x38uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A60;
  strcpy((char *)__p[0], "max_num_strict_charging_preferences_search_paths");
  unsigned int v194 = sub_31AC04(v411, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
LABEL_321:
  if (v408) {
    int v195 = 2;
  }
  else {
    int v195 = 1;
  }
  unsigned int v196 = v195 + v194 + v410 + v193;
  BOOL v197 = v464 >= v196;
  unsigned int v198 = v464 - v196;
  if (!v197) {
    unsigned int v198 = 0;
  }
  if (v198 <= 1) {
    unsigned int v198 = 1;
  }
  unsigned int v464 = v198;
  sub_FEBB70((uint64_t)&v480, (unsigned int **)&v477, (uint64_t)&v474, *(void *)v412, v412[2], (uint64_t)__p);
  uint64_t v199 = sub_FE9A98(v415, (uint64_t)&v480, v496, v520, (uint64_t)v413, (uint64_t)&v463, v417, 1, v193 != 0, v525, v9);
  sub_FE9E28((void **)v415, (uint64_t)v9, (uint64_t)&v452);
  unint64_t v200 = v455;
  if (v193) {
    sub_FE9FB0(v415, (uint64_t)&v480, (unsigned int **)&v477, (uint64_t)&v474, v496, v520, (uint64_t)v413, (uint64_t)&v463, v417, v525, v9);
  }
  if (v192 && sub_EB6EB0(v9) + 1 < v414)
  {
    unsigned int v201 = v414 + ~sub_EB6EB0(v9);
    if (v201 >= v194) {
      unsigned int v201 = v194;
    }
    unsigned int v464 = v201;
    sub_FE4750((uint64_t)v494, 432000);
    sub_FE48CC((uint64_t)v494, (uint64_t)v525, v496);
    sub_FEBB70((uint64_t)&v480, (unsigned int **)&v477, (uint64_t)&v474, *(void *)v412, v412[2], (uint64_t)__p);
    sub_FE9A98(v415, (uint64_t)&v480, v496, v520, (uint64_t)v413, (uint64_t)&v463, v417, 1, 0, v525, v9);
    unsigned int v464 = 1;
    sub_FE4750((uint64_t)v494, 0);
    sub_FE48CC((uint64_t)v494, (uint64_t)v525, v496);
    sub_FEBB70((uint64_t)&v480, (unsigned int **)&v477, (uint64_t)&v474, *(void *)v412, v412[2], (uint64_t)__p);
    sub_FE9A98(v415, (uint64_t)&v480, v496, v520, (uint64_t)v413, (uint64_t)&v463, v417, 1, 0, v525, v9);
  }
  uint64_t v202 = sub_3FA3A8(v85);
  if ((unint64_t)sub_3F9CC4(v85) < 2)
  {
    int v205 = 0;
    int v206 = -1;
    v207 = v454;
    if (!v454) {
      goto LABEL_348;
    }
LABEL_339:
    while (1)
    {
      int v209 = *((_DWORD *)v207 + 4);
      int v208 = *((_DWORD *)v207 + 5);
      if (v202 == v209 && HIDWORD(v202) == v208) {
        break;
      }
      if (v205 == v209 && v206 == v208) {
        break;
      }
      v207 = (void *)*v207;
      if (!v207) {
        goto LABEL_348;
      }
    }
    char v212 = 1;
  }
  else
  {
    __p[0] = (void *)sub_3FA038(v85);
    __p[1] = v203;
    uint64_t v204 = (int *)sub_40F020(__p, 1);
    int v205 = *v204;
    int v206 = v204[1];
    v207 = v454;
    if (v454) {
      goto LABEL_339;
    }
LABEL_348:
    char v212 = 0;
  }
  v415[10] = v199;
  uint64_t v213 = sub_EB6EB0(v9);
  if (v213 >= v414) {
    char v214 = 1;
  }
  else {
    char v214 = v212;
  }
  if ((v214 & 1) == 0 && v200 < HIDWORD(v471) && sub_FEA3B0(v213, (uint64_t)&v480, v496))
  {
    char v467 = 1;
    unsigned int v464 = v414 - sub_EB6EB0(v9);
    sub_FEBB70((uint64_t)&v480, (unsigned int **)&v477, (uint64_t)&v474, *(void *)v412, v412[2], (uint64_t)__p);
    sub_FE9A98(v415, (uint64_t)&v480, v496, v520, (uint64_t)v413, (uint64_t)&v463, v417, 0, 0, v525, v9);
  }
  if (*(unsigned char *)(v421 + 28) != 1 || !sub_45FB38(v9)) {
    goto LABEL_535;
  }
  __p[0] = operator new(0x38uLL);
  *(_OWORD *)&__p[1] = xmmword_20B9A10;
  strcpy((char *)__p[0], "run_infeasible_reroute_extra_energy_buffer_search");
  BOOL v215 = sub_29D62C(v411, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (!v215) {
    goto LABEL_535;
  }
  unint64_t v216 = sub_3FA3A8(v85);
  int v217 = v216;
  LODWORD(v218) = -1;
  if (v216)
  {
    unint64_t v219 = HIDWORD(v216);
    if (HIDWORD(v216) != -1)
    {
      unint64_t v220 = (unint64_t)(((v499 - (unsigned char *)v498) << 30) - 0x100000000) >> 32;
      if (v220)
      {
        uint64_t v218 = 0;
        while (1)
        {
          uint64_t v354 = *(unsigned __int16 *)sub_FEA8D4(v496, v218);
          if (v354 != 0xFFFF)
          {
            unint64_t v355 = *(void *)(sub_40B954((uint64_t)v525, v354) + 52);
            BOOL v105 = v355 == v217;
            unint64_t v356 = HIDWORD(v355);
            if (v105 && v356 == v219) {
              break;
            }
          }
          if (v220 == ++v218) {
            goto LABEL_365;
          }
        }
      }
      else
      {
LABEL_365:
        LODWORD(v218) = -1;
      }
    }
  }
  __p[0] = v496;
  v426[0] = &stru_3D8 + 40;
  v426[1] = v424;
  v426[2] = &v434;
  v427 = &v535;
  sub_ED2164(&__p[1], (unint64_t *)v426);
  *(_OWORD *)v448 = 0u;
  *(_OWORD *)v449 = 0u;
  long long v450 = 0u;
  unsigned int v451 = 0;
  long long v444 = 0u;
  long long v445 = 0u;
  long long v446 = 0u;
  int v447 = 0;
  v449[1] = operator new(0x1000uLL);
  *(void **)&long long v450 = v449[1];
  *((void *)&v450 + 1) = (char *)v449[1] + 4096;
  v448[0] = operator new(0x3F8uLL);
  v448[1] = v448[0];
  v449[0] = (char *)v448[0] + 1016;
  *(void *)&long long v444 = operator new(0x5000uLL);
  *((void *)&v444 + 1) = v444;
  *(void *)&long long v445 = v444 + 20480;
  v221 = (unsigned int *)v477;
  v222 = v478;
  if (v477 == v478) {
    goto LABEL_494;
  }
  int v418 = v218;
  do
  {
    uint64_t v223 = *v221;
    v426[0] = (void *)sub_40A454((uint64_t)v412);
    v224 = (void *)sub_40A674((uint64_t)v426);
    uint64_t v225 = 0;
    LODWORD(v424[0]) = 0;
    *(void **)((char *)v424 + 4) = v224;
    HIDWORD(v424[1]) = v226;
    LODWORD(v434) = v223;
    ++v447;
    unint64_t v227 = 265 * ((~v223 + (v223 << 21)) ^ ((unint64_t)(~v223 + (v223 << 21)) >> 24));
    unint64_t v228 = 2147483649u * ((21 * (v227 ^ (v227 >> 14))) ^ ((21 * (v227 ^ (v227 >> 14))) >> 28));
    v229 = &__p[6 * (((BYTE1(v228) ^ BYTE2(v228)) ^ BYTE3(v228)) & 0xF) + 1];
    unint64_t v230 = v228 >> 7;
    unint64_t v231 = (unint64_t)v229[3];
    uint64_t v232 = 0x101010101010101 * (v228 & 0x7F);
    while (1)
    {
      unint64_t v233 = v230 & v231;
      uint64_t v234 = *(void *)((char *)*v229 + v233);
      unint64_t v235 = ((v234 ^ v232) - 0x101010101010101) & ~(v234 ^ v232) & 0x8080808080808080;
      if (v235) {
        break;
      }
LABEL_375:
      if ((v234 & (~v234 << 6) & 0x8080808080808080) != 0) {
        goto LABEL_378;
      }
      v225 += 8;
      unint64_t v230 = v225 + v233;
    }
    v236 = v229[1];
    while (1)
    {
      unint64_t v237 = (v233 + (__clz(__rbit64(v235)) >> 3)) & v231;
      if (v236[2 * v237] == v223) {
        break;
      }
      v235 &= v235 - 1;
      if (!v235) {
        goto LABEL_375;
      }
    }
    if (v231 == v237)
    {
LABEL_378:
      long long v238 = v444;
      sub_ED2D48((uint64_t)&__p[1], (unsigned int *)&v434, (uint64_t)v426);
      v239 = v426[1];
      uint64_t v240 = *((void *)v426[0] + 1);
      if (LOBYTE(v426[2])) {
        *(_DWORD *)(v240 + 8 * (uint64_t)v426[1]) = v434;
      }
      unsigned int v241 = -858993459 * ((uint64_t)(*((void *)&v238 + 1) - v238) >> 2);
      *(_DWORD *)(v240 + 8 * (void)v239 + 4) = v241;
      int v242 = v434;
      uint64_t v243 = *((void *)&v444 + 1);
      if (*((void *)&v444 + 1) >= (unint64_t)v445)
      {
        uint64_t v245 = v444;
        unint64_t v246 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v444 + 1) - v444) >> 2);
        unint64_t v247 = v246 + 1;
        if (v246 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          sub_2E00();
        }
        if (0x999999999999999ALL * ((uint64_t)(v445 - v444) >> 2) > v247) {
          unint64_t v247 = 0x999999999999999ALL * ((uint64_t)(v445 - v444) >> 2);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v445 - v444) >> 2) >= 0x666666666666666) {
          unint64_t v248 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v248 = v247;
        }
        if (v248)
        {
          if (v248 > 0xCCCCCCCCCCCCCCCLL) {
            sub_188D718();
          }
          v249 = (char *)operator new(20 * v248);
        }
        else
        {
          v249 = 0;
        }
        v253 = &v249[20 * v246];
        *(_DWORD *)v253 = v242;
        *(_OWORD *)(v253 + 4) = *(_OWORD *)v424;
        v254 = v253;
        if (v243 != v245)
        {
          do
          {
            long long v255 = *(_OWORD *)(v243 - 20);
            *((_DWORD *)v254 - 1) = *(_DWORD *)(v243 - 4);
            *(_OWORD *)(v254 - 20) = v255;
            v254 -= 20;
            v243 -= 20;
          }
          while (v243 != v245);
          uint64_t v243 = v444;
        }
        *(void *)&long long v444 = v254;
        v244 = v253 + 20;
        *((void *)&v444 + 1) = v253 + 20;
        *(void *)&long long v445 = &v249[20 * v248];
        if (v243) {
          operator delete((void *)v243);
        }
      }
      else
      {
        **((_DWORD **)&v444 + 1) = v434;
        *(_OWORD *)(v243 + 4) = *(_OWORD *)v424;
        v244 = (char *)(v243 + 20);
      }
      *((void *)&v444 + 1) = v244;
      unint64_t v251 = -858993459 * ((uint64_t)(*((void *)&v238 + 1) - v238) >> 2);
      v252 = v449[1];
      if (v251 >= (uint64_t)(v450 - (unint64_t)v449[1]) >> 2)
      {
LABEL_368:
        sub_ED33A0((uint64_t)v448, v241, (unsigned int *)v424);
        goto LABEL_369;
      }
    }
    else
    {
      v250 = (char *)&v236[2 * v237];
      *(_OWORD *)(v444 + 20 * *((unsigned int *)v250 + 1) + 4) = *(_OWORD *)v424;
      unint64_t v251 = *((unsigned int *)v250 + 1);
      unsigned int v241 = v251;
      v252 = v449[1];
      if (v251 >= (uint64_t)(v450 - (unint64_t)v449[1]) >> 2) {
        goto LABEL_368;
      }
    }
    if (v252[v251] == -1) {
      goto LABEL_368;
    }
    sub_ED3660((uint64_t *)v448, v241, v424);
LABEL_369:
    ++v221;
  }
  while (v221 != v222);
  if (!v451)
  {
LABEL_494:
    LODWORD(v258) = -1;
    goto LABEL_504;
  }
  while (2)
  {
    v256 = v448[0];
    v257 = (unsigned int *)(v444 + 20 * *(unsigned int *)v448[0]);
    uint64_t v258 = *v257;
    *(_OWORD *)v426 = *(_OWORD *)(v257 + 1);
    v259 = (unsigned char *)v446;
    if ((unint64_t)v446 < *((void *)&v446 + 1))
    {
      *(_DWORD *)long long v446 = *(_DWORD *)v448[0];
      uint64_t v260 = (uint64_t)(v259 + 4);
      goto LABEL_428;
    }
    v261 = (unsigned char *)*((void *)&v445 + 1);
    uint64_t v262 = v446 - *((void *)&v445 + 1);
    uint64_t v263 = (uint64_t)(v446 - *((void *)&v445 + 1)) >> 2;
    unint64_t v264 = v263 + 1;
    if ((unint64_t)(v263 + 1) >> 62) {
      sub_2E00();
    }
    uint64_t v265 = *((void *)&v446 + 1) - *((void *)&v445 + 1);
    if ((uint64_t)(*((void *)&v446 + 1) - *((void *)&v445 + 1)) >> 1 > v264) {
      unint64_t v264 = v265 >> 1;
    }
    if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v266 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v266 = v264;
    }
    if (v266)
    {
      if (v266 >> 62) {
LABEL_589:
      }
        sub_188D718();
      v267 = (char *)operator new(4 * v266);
      v268 = &v267[4 * v263];
      *(_DWORD *)v268 = *v256;
      uint64_t v260 = (uint64_t)(v268 + 4);
      if (v259 == v261) {
        goto LABEL_426;
      }
LABEL_420:
      unint64_t v269 = v259 - 4 - v261;
      if (v269 < 0x2C) {
        goto LABEL_595;
      }
      if ((unint64_t)(v259 - &v267[v262]) < 0x20) {
        goto LABEL_595;
      }
      uint64_t v270 = (v269 >> 2) + 1;
      uint64_t v271 = 4 * (v270 & 0x7FFFFFFFFFFFFFF8);
      v272 = &v259[-v271];
      v268 -= v271;
      v273 = &v267[4 * v263 - 16];
      v274 = (long long *)(v259 - 16);
      uint64_t v275 = v270 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v276 = *v274;
        *((_OWORD *)v273 - 1) = *(v274 - 1);
        *(_OWORD *)v273 = v276;
        v273 -= 32;
        v274 -= 2;
        v275 -= 8;
      }
      while (v275);
      v259 = v272;
      if (v270 != (v270 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_595:
        do
        {
          int v277 = *((_DWORD *)v259 - 1);
          v259 -= 4;
          *((_DWORD *)v268 - 1) = v277;
          v268 -= 4;
        }
        while (v259 != v261);
      }
    }
    else
    {
      v267 = 0;
      v268 = (char *)(4 * v263);
      *(_DWORD *)(4 * v263) = *(_DWORD *)v448[0];
      uint64_t v260 = 4 * v263 + 4;
      if (v259 != v261) {
        goto LABEL_420;
      }
    }
LABEL_426:
    *((void *)&v445 + 1) = v268;
    *(void *)&long long v446 = v260;
    *((void *)&v446 + 1) = &v267[4 * v266];
    if (v261)
    {
      operator delete(v261);
      v256 = v448[0];
    }
LABEL_428:
    *(void *)&long long v446 = v260;
    *((_DWORD *)v449[1] + *v256) = -1;
    unsigned int v278 = --v451;
    if (v451)
    {
      *(void *)v256 = *(void *)&v256[2 * v278];
      v279 = v448[0];
      *((_DWORD *)v449[1] + *(unsigned int *)v448[0]) = 0;
      unsigned int v280 = v451;
      if (v451 >= 2)
      {
        int v281 = 0;
        unsigned int v282 = 0;
        unsigned int v283 = 1;
        do
        {
          unsigned int v284 = v281 + 5;
          if (v284 >= v280) {
            unsigned int v285 = v280;
          }
          else {
            unsigned int v285 = v284;
          }
          if (v283 >= v285) {
            break;
          }
          uint64_t v286 = v282;
          int v287 = v279[2 * v282 + 1];
          v288 = &v279[2 * v283 + 1];
          unsigned int v282 = -1;
          int v289 = v287;
          do
          {
            int v291 = *v288;
            v288 += 2;
            int v290 = v291;
            if (v291 < v289)
            {
              int v289 = v290;
              unsigned int v282 = v283;
            }
            ++v283;
          }
          while (v285 != v283);
          if (v282 >= v280) {
            break;
          }
          uint64_t v292 = 2 * v282;
          v293 = &v279[v292];
          uint64_t v294 = 8 * v286;
          uint64_t v295 = *(void *)&v279[v292];
          _DWORD *v293 = *(_DWORD *)((char *)v279 + v294);
          v293[1] = v287;
          *(void *)((char *)v279 + v294) = v295;
          v279 = v448[0];
          v296 = (char *)v449[1];
          uint64_t v297 = 4 * *(unsigned int *)((char *)v448[0] + v292 * 4);
          uint64_t v298 = 4 * *(unsigned int *)((char *)v448[0] + v294);
          LODWORD(v294) = *(_DWORD *)((char *)v449[1] + v297);
          *(_DWORD *)((char *)v449[1] + v297) = *(_DWORD *)((char *)v449[1] + v298);
          *(_DWORD *)&v296[v298] = v294;
          int v281 = 4 * v282;
          unsigned int v283 = (4 * v282) | 1;
          unsigned int v280 = v451;
        }
        while (v283 < v451);
      }
    }
    v448[1] = (char *)v448[1] - 8;
    if (v418 == -1)
    {
      if (sub_EB9330((uint64_t)v496, v258))
      {
        int v299 = *(unsigned __int8 *)sub_EB935C((uint64_t)v496, v258);
        if (v299 == 2 || v299 == 5) {
          break;
        }
      }
    }
    else if (v418 == v258)
    {
      LODWORD(v258) = v418;
      break;
    }
    v301 = __p[0];
    sub_EC30D4((uint64_t)__p[0], v258);
    uint64_t v302 = v301[9];
    unsigned int v303 = *(_DWORD *)(v301[6] + 4 * v258);
    sub_EC30D4((uint64_t)v301, v258);
    v304 = (signed int *)(v302 + 48 * v303);
    uint64_t v305 = v301[9] + 48 * *(unsigned int *)(v301[6] + 4 * (v258 + 1));
    while (2)
    {
      if (v304 != (signed int *)v305)
      {
        if (!sub_ECF004(v304 + 2)) {
          goto LABEL_451;
        }
        v424[0] = (void *)sub_40AAA0((int *)v426 + 1, v304 + 4);
        LODWORD(v424[1]) = v306;
        if (!sub_40A820(v424)) {
          goto LABEL_451;
        }
        uint64_t v307 = *v304;
        unsigned int v308 = v304[3];
        int v309 = (int)v426[0];
        uint64_t v310 = sub_40AAA0((int *)v426 + 1, v304 + 4);
        uint64_t v311 = 0;
        int v312 = v309 + v308;
        v313.i64[0] = v310;
        int8x16_t v314 = vextq_s8(v313, v313, 0xCuLL);
        v314.i32[0] = v309 + v308;
        v314.i32[3] = v315;
        *(int8x16_t *)v424 = v314;
        unint64_t v316 = 265 * ((~v307 + (v307 << 21)) ^ ((unint64_t)(~v307 + (v307 << 21)) >> 24));
        unint64_t v317 = 2147483649u * ((21 * (v316 ^ (v316 >> 14))) ^ ((21 * (v316 ^ (v316 >> 14))) >> 28));
        v318 = &__p[6 * (((BYTE1(v317) ^ BYTE2(v317)) ^ BYTE3(v317)) & 0xF) + 1];
        unint64_t v319 = v317 >> 7;
        unint64_t v320 = (unint64_t)v318[3];
        v321 = (char *)*v318;
        uint64_t v322 = 0x101010101010101 * (v317 & 0x7F);
        for (unint64_t i = v317 >> 7; ; unint64_t i = v311 + v324)
        {
          unint64_t v324 = i & v320;
          uint64_t v325 = *(void *)&v321[v324];
          unint64_t v326 = ((v325 ^ v322) - 0x101010101010101) & ~(v325 ^ v322) & 0x8080808080808080;
          if (v326) {
            break;
          }
LABEL_460:
          if ((v325 & (~v325 << 6) & 0x8080808080808080) != 0) {
            goto LABEL_463;
          }
          v311 += 8;
        }
        v327 = v318[1];
        while (1)
        {
          unint64_t v328 = (v324 + (__clz(__rbit64(v326)) >> 3)) & v320;
          if (v327[2 * v328] == v307) {
            break;
          }
          v326 &= v326 - 1;
          if (!v326) {
            goto LABEL_460;
          }
        }
        if (v320 == v328)
        {
LABEL_463:
          uint64_t v329 = 0;
          ++v447;
          v330 = (_DWORD *)*((void *)&v444 + 1);
          unint64_t v331 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v444 + 1) - v444) >> 2);
          while (1)
          {
            unint64_t v332 = v319 & v320;
            uint64_t v333 = *(void *)&v321[v319 & v320];
            unint64_t v334 = ((v333 ^ v322) - 0x101010101010101) & ~(v333 ^ v322) & 0x8080808080808080;
            if (v334) {
              break;
            }
LABEL_468:
            if ((v333 & (~v333 << 6) & 0x8080808080808080) != 0)
            {
              unint64_t v336 = sub_ED2E64((uint64_t *)&__p[6 * (((BYTE1(v317) ^ BYTE2(v317)) ^ BYTE3(v317)) & 0xF) + 1], v317);
              v335 = v318[1];
              v335[2 * v336] = v307;
              v330 = (_DWORD *)*((void *)&v444 + 1);
              goto LABEL_471;
            }
            v329 += 8;
            unint64_t v319 = v329 + v332;
          }
          v335 = v318[1];
          while (1)
          {
            unint64_t v336 = (v332 + (__clz(__rbit64(v334)) >> 3)) & v320;
            if (v335[2 * v336] == v307) {
              break;
            }
            v334 &= v334 - 1;
            if (!v334) {
              goto LABEL_468;
            }
          }
LABEL_471:
          v335[2 * v336 + 1] = v331;
          if ((unint64_t)v330 >= (unint64_t)v445)
          {
            v338 = (_DWORD *)v444;
            unint64_t v339 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)v330 - v444) >> 2);
            unint64_t v340 = v339 + 1;
            if (v339 + 1 > 0xCCCCCCCCCCCCCCCLL) {
              sub_2E00();
            }
            if (0x999999999999999ALL * ((uint64_t)(v445 - v444) >> 2) > v340) {
              unint64_t v340 = 0x999999999999999ALL * ((uint64_t)(v445 - v444) >> 2);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v445 - v444) >> 2) >= 0x666666666666666) {
              unint64_t v341 = 0xCCCCCCCCCCCCCCCLL;
            }
            else {
              unint64_t v341 = v340;
            }
            if (v341)
            {
              if (v341 > 0xCCCCCCCCCCCCCCCLL) {
                goto LABEL_589;
              }
              v342 = (char *)operator new(20 * v341);
            }
            else
            {
              v342 = 0;
            }
            v351 = &v342[20 * v339];
            *(_DWORD *)v351 = v307;
            *(_OWORD *)(v351 + 4) = *(_OWORD *)v424;
            v352 = v351;
            if (v330 != v338)
            {
              do
              {
                long long v353 = *(_OWORD *)(v330 - 5);
                *((_DWORD *)v352 - 1) = *(v330 - 1);
                *(_OWORD *)(v352 - 20) = v353;
                v352 -= 20;
                v330 -= 5;
              }
              while (v330 != v338);
              v330 = (_DWORD *)v444;
            }
            *(void *)&long long v444 = v352;
            v337 = v351 + 20;
            *((void *)&v444 + 1) = v351 + 20;
            *(void *)&long long v445 = &v342[20 * v341];
            if (v330) {
              operator delete(v330);
            }
          }
          else
          {
            _DWORD *v330 = v307;
            *(_OWORD *)(v330 + 1) = *(_OWORD *)v424;
            v337 = v330 + 5;
          }
          *((void *)&v444 + 1) = v337;
          unint64_t v349 = v331;
          v350 = v449[1];
          if (v331 < (unint64_t)((uint64_t)(v450 - (unint64_t)v449[1]) >> 2))
          {
LABEL_492:
            if (v350[v349] != -1)
            {
              sub_ED3660((uint64_t *)v448, v331, v424);
              goto LABEL_451;
            }
          }
LABEL_450:
          sub_ED33A0((uint64_t)v448, v331, (unsigned int *)v424);
        }
        else
        {
          v343 = (char *)&v327[2 * v328];
          unsigned int v345 = *((_DWORD *)v343 + 1);
          v344 = (unsigned int *)(v343 + 4);
          uint64_t v346 = v444 + 20 * v345;
          int v348 = *(_DWORD *)(v346 + 4);
          v347 = (_OWORD *)(v346 + 4);
          if (v348 > v312)
          {
            ++v447;
            _OWORD *v347 = *(_OWORD *)v424;
            unint64_t v349 = *v344;
            LODWORD(v331) = v349;
            v350 = v449[1];
            if (v349 < (uint64_t)(v450 - (unint64_t)v449[1]) >> 2) {
              goto LABEL_492;
            }
            goto LABEL_450;
          }
        }
LABEL_451:
        v304 += 12;
        continue;
      }
      break;
    }
    if (v451) {
      continue;
    }
    break;
  }
LABEL_504:
  uint64_t v358 = 0;
  unint64_t v359 = ~(unint64_t)v258 + ((unint64_t)v258 << 21);
  unint64_t v360 = 21 * ((265 * (v359 ^ (v359 >> 24))) ^ ((265 * (v359 ^ (v359 >> 24))) >> 14));
  unint64_t v361 = 2147483649u * (v360 ^ (v360 >> 28));
  double v9 = v423;
  v362 = &__p[6
            * (((((unsigned __int16)(v360 ^ (v360 >> 28)) >> 8) ^ ((-2147483647
                                                                                   * (v360 ^ (v360 >> 28))) >> 16)) ^ ((-2147483647 * (v360 ^ (v360 >> 28))) >> 24)) & 0xF)
            + 1];
  unint64_t v363 = v361 >> 7;
  unint64_t v364 = (unint64_t)v362[3];
  v365 = (char *)*v362;
  uint64_t v366 = 0x101010101010101 * (v361 & 0x7F);
  for (unint64_t j = v363; ; unint64_t j = v358 + v368)
  {
    unint64_t v368 = j & v364;
    uint64_t v369 = *(void *)&v365[j & v364];
    unint64_t v370 = ((v369 ^ v366) - 0x101010101010101) & ~(v369 ^ v366) & 0x8080808080808080;
    if (v370) {
      break;
    }
LABEL_509:
    if ((v369 & (~v369 << 6) & 0x8080808080808080) != 0) {
      goto LABEL_512;
    }
    v358 += 8;
  }
  v371 = v362[1];
  while (1)
  {
    unint64_t v372 = (v368 + (__clz(__rbit64(v370)) >> 3)) & v364;
    if (v371[2 * v372] == v258) {
      break;
    }
    v370 &= v370 - 1;
    if (!v370) {
      goto LABEL_509;
    }
  }
  if (v364 == v372)
  {
LABEL_512:
    HIDWORD(v373) = 0x7FFFFFFF;
    goto LABEL_513;
  }
  for (k = 0; ; unint64_t v363 = k + v402)
  {
    unint64_t v402 = v363 & v364;
    unint64_t v403 = ((*(void *)&v365[v402] ^ v366) - 0x101010101010101) & ~(*(void *)&v365[v402] ^ v366) & 0x8080808080808080;
    if (v403) {
      break;
    }
LABEL_579:
    k += 8;
  }
  while (1)
  {
    unint64_t v404 = (v402 + (__clz(__rbit64(v403)) >> 3)) & v364;
    if (v371[2 * v404] == v258) {
      break;
    }
    v403 &= v403 - 1;
    if (!v403) {
      goto LABEL_579;
    }
  }
  unint64_t v373 = (unint64_t)*(unsigned int *)(v444 + 20 * v371[2 * v404 + 1] + 8) << 32;
LABEL_513:
  v426[0] = (void *)sub_40A454((uint64_t)v412);
  sub_40A2E4((uint64_t)&v434, SHIDWORD(v373), v426);
  LODWORD(v426[0]) = 500000;
  sub_40A628(&v434, v426);
  sub_FEBB70((uint64_t)&v480, (unsigned int **)&v477, (uint64_t)&v474, v434, v435, (uint64_t)v426);
  sub_FE9A98(v415, (uint64_t)&v480, v496, v520, (uint64_t)v413, (uint64_t)&v463, v417, 0, 0, v525, v423);
  if (sub_45FB38(v423))
  {
    v374 = sub_69510();
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)v426);
      v375 = sub_188FC78(v426, (uint64_t)"No EV feasible path found, even when increasing the current range to ensure that a charging stop or the destination is reachable: ", 130);
      uint64_t v376 = sub_68EE4((uint64_t)v374);
      int v377 = *(char *)(v376 + 23);
      if (v377 >= 0) {
        uint64_t v378 = v376;
      }
      else {
        uint64_t v378 = *(void *)v376;
      }
      if (v377 >= 0) {
        uint64_t v379 = *(unsigned __int8 *)(v376 + 23);
      }
      else {
        uint64_t v379 = *(void *)(v376 + 8);
      }
      sub_188FC78(v375, v378, v379);
      std::stringbuf::str();
      sub_7246C((uint64_t *)v424, 1u);
      if (v425 < 0) {
        operator delete(v424[0]);
      }
      if (v433 < 0) {
        operator delete(v432);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
  if (v449[1])
  {
    *(void **)&long long v450 = v449[1];
    operator delete(v449[1]);
  }
  if (v448[0])
  {
    v448[1] = v448[0];
    operator delete(v448[0]);
  }
  if (*((void *)&v445 + 1))
  {
    *(void *)&long long v446 = *((void *)&v445 + 1);
    operator delete(*((void **)&v445 + 1));
  }
  if ((void)v444)
  {
    *((void *)&v444 + 1) = v444;
    operator delete((void *)v444);
  }
  sub_328138((uint64_t)&__p[1]);
LABEL_535:
  v415[9] = (unint64_t)sub_72688((uint64_t)v524);
  *((_DWORD *)v415 + 28) = sub_EB6EB0(v9);
  double v380 = sub_72688((uint64_t)v534);
  v415[2] = (unint64_t)v380;
  if ((unint64_t)v380 >= 0x3A99)
  {
    v381 = sub_69510();
    if (sub_723EC(1u))
    {
      sub_6BAC((uint64_t)__p);
      v382 = sub_188FC78(__p, (uint64_t)"[EVPerformance] Long running ", 29);
      LODWORD(v424[0]) = sub_69124((uint64_t)v381);
      sub_677F0((unsigned int *)v424, (uint64_t)v426);
      if (SHIBYTE(v426[2]) >= 0) {
        v383 = v426;
      }
      else {
        v383 = (void **)v426[0];
      }
      if (SHIBYTE(v426[2]) >= 0) {
        uint64_t v384 = HIBYTE(v426[2]);
      }
      else {
        uint64_t v384 = (uint64_t)v426[1];
      }
      v385 = sub_188FC78(v382, (uint64_t)v383, v384);
      sub_188FC78(v385, (uint64_t)" EV request (", 13);
      v386 = (void *)std::ostream::operator<<();
      v387 = sub_188FC78(v386, (uint64_t)" s): ", 5);
      uint64_t v388 = sub_68EE4((uint64_t)v381);
      int v389 = *(char *)(v388 + 23);
      if (v389 >= 0) {
        uint64_t v390 = v388;
      }
      else {
        uint64_t v390 = *(void *)v388;
      }
      if (v389 >= 0) {
        uint64_t v391 = *(unsigned __int8 *)(v388 + 23);
      }
      else {
        uint64_t v391 = *(void *)(v388 + 8);
      }
      sub_188FC78(v387, v390, v391);
      if (SHIBYTE(v426[2]) < 0) {
        operator delete(v426[0]);
      }
      std::stringbuf::str();
      sub_7246C((uint64_t *)v426, 1u);
      if (SHIBYTE(v426[2]) < 0) {
        operator delete(v426[0]);
      }
      if (SHIBYTE(v441) < 0) {
        operator delete(*((void **)&v439 + 1));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
  }
  v392 = v454;
  if (v454)
  {
    do
    {
      v393 = (void *)*v392;
      operator delete(v392);
      v392 = v393;
    }
    while (v393);
  }
  v394 = v452;
  v452 = 0;
  if (v394) {
    operator delete(v394);
  }
  if (v462 < 0) {
    operator delete(v461);
  }
  v395 = v469;
  if (v469)
  {
    do
    {
      v399 = (void **)*v395;
      sub_55198((uint64_t)(v395 + 5));
      if (*((char *)v395 + 39) < 0) {
        operator delete(v395[2]);
      }
      operator delete(v395);
      v395 = v399;
    }
    while (v399);
  }
  v396 = v468[0];
  v468[0] = 0;
  if (v396) {
    operator delete(v396);
  }
  v397 = v473;
  if (v473)
  {
    do
    {
      v400 = (void **)*v397;
      sub_55198((uint64_t)(v397 + 5));
      if (*((char *)v397 + 39) < 0) {
        operator delete(v397[2]);
      }
      operator delete(v397);
      v397 = v400;
    }
    while (v400);
  }
  v398 = v472[0];
  v472[0] = 0;
  if (v398) {
    operator delete(v398);
  }
  if (v474)
  {
    v475 = v474;
    operator delete(v474);
  }
  if (v477)
  {
    v478 = (unsigned int *)v477;
    operator delete(v477);
  }
LABEL_105:
  if ((void)v490)
  {
    *((void *)&v490 + 1) = v490;
    operator delete((void *)v490);
  }
  uint64_t v72 = (char *)v487;
  if (v487)
  {
    long long v73 = v488;
    int64_t v74 = v487;
    if (v488 != v487)
    {
      long long v75 = v488;
      do
      {
        BOOL v77 = (void *)*((void *)v75 - 4);
        v75 -= 32;
        size_t v76 = v77;
        if (v77)
        {
          *((void *)v73 - 3) = v76;
          operator delete(v76);
        }
        long long v73 = v75;
      }
      while (v75 != v72);
      int64_t v74 = v487;
    }
    v488 = v72;
    operator delete(v74);
  }
  if (v484)
  {
    v485 = v484;
    operator delete(v484);
  }
  if (v482)
  {
    v483 = (char *)v482;
    operator delete(v482);
  }
  if (v503)
  {
    v504 = v503;
    operator delete(v503);
  }
  if (v501)
  {
    v502 = v501;
    operator delete(v501);
  }
  if ((void)v500)
  {
    *((void *)&v500 + 1) = v500;
    operator delete((void *)v500);
  }
  if (v498)
  {
    v499 = v498;
    operator delete(v498);
  }
  if ((void)v497)
  {
    *((void *)&v497 + 1) = v497;
    operator delete((void *)v497);
  }
  if (v496[0])
  {
    v496[1] = v496[0];
    operator delete(v496[0]);
  }
  if (v543[4224]) {
    sub_3A6230(v539);
  }
  if (v514)
  {
    v515 = v514;
    operator delete(v514);
  }
  if (v512)
  {
    v513 = v512;
    operator delete(v512);
  }
  if (v510)
  {
    v511 = v510;
    operator delete(v510);
  }
  if (v508)
  {
    v509 = v508;
    operator delete(v508);
  }
  if (v506)
  {
    v507 = v506;
    operator delete(v506);
  }
  sub_FEAA50(v520);
  long long v78 = v521;
  if (v521)
  {
    uint64_t v79 = (uint64_t)v522;
    long long v80 = v521;
    if (v522 != v521)
    {
      do
      {
        v79 -= 1776;
        sub_EDD1F0((uint64_t)&v523, v79);
      }
      while ((void *)v79 != v78);
      long long v80 = v521;
    }
    v522 = v78;
    operator delete(v80);
  }
  sub_EF175C((uint64_t)v525);
  if (SHIBYTE(v529) < 0)
  {
    operator delete(v527);
    if (SHIBYTE(v532) < 0) {
      goto LABEL_153;
    }
LABEL_150:
    if (SHIBYTE(v533.__r_.__value_.__r.__words[2]) < 0) {
LABEL_154:
    }
      operator delete(v533.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((SHIBYTE(v532) & 0x80000000) == 0) {
      goto LABEL_150;
    }
LABEL_153:
    operator delete(__dst);
    if (SHIBYTE(v533.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_154;
    }
  }
}

void sub_FE9478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void ***a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  sub_111ECAC((uint64_t)&a34);
  sub_ECFCF0(&a70);
  sub_12168((uint64_t)&STACK[0x548]);
  if (SLOBYTE(STACK[0x5E7]) < 0) {
    operator delete((void *)STACK[0x5D0]);
  }
  sub_C63044(a26);
  sub_5450C((uint64_t)&STACK[0x658]);
  sub_5450C((uint64_t)&STACK[0x6B0]);
  uint64_t v72 = (void *)STACK[0x6D8];
  if (STACK[0x6D8])
  {
    STACK[0x6E0] = (unint64_t)v72;
    operator delete(v72);
    int v71 = (void *)STACK[0x6F0];
    if (!STACK[0x6F0]) {
      goto LABEL_11;
    }
  }
  else
  {
    int v71 = (void *)STACK[0x6F0];
    if (!STACK[0x6F0])
    {
LABEL_11:
      sub_FEA50C(&STACK[0x708]);
      sub_3B01C8((uint64_t)&STACK[0x848]);
      if (LOBYTE(STACK[0x21A0])) {
        sub_3A6230(&STACK[0xD68]);
      }
      sub_FEA5B4(&STACK[0x8E0]);
      sub_FEAA50((void **)&STACK[0xA08]);
      sub_FEA628((void **)&STACK[0xAB8]);
      sub_EF175C((uint64_t)&STACK[0xAE8]);
      if (SLOBYTE(STACK[0xCD7]) < 0) {
        operator delete((void *)STACK[0xCC0]);
      }
      if (SLOBYTE(STACK[0xCEF]) < 0) {
        operator delete((void *)STACK[0xCD8]);
      }
      if (SLOBYTE(STACK[0xD07]) < 0) {
        operator delete((void *)STACK[0xCF0]);
      }
      _Unwind_Resume(a1);
    }
  }
  STACK[0x6F8] = (unint64_t)v71;
  operator delete(v71);
  goto LABEL_11;
}

uint64_t sub_FE9A98(uint64_t *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, int a7, int a8, char a9, void *a10, int64x2_t *a11)
{
  sub_FF18D4((uint64_t)v58, a2, a5, a6);
  unint64_t v15 = sub_EB9550((uint64_t)a3);
  unsigned int v16 = v15;
  unint64_t v17 = HIDWORD(v15);
  if (v15 != HIDWORD(v15))
  {
    do
    {
      sub_FF18F8((char *)v58, v16, a7, (void *)(*(void *)(a2 + 72) + 32 * v16));
      ++v16;
    }
    while (v17 != v16);
  }
  unint64_t v18 = a1;
  if (sub_45FB38(v58))
  {
    uint64_t v19 = 0;
    goto LABEL_44;
  }
  sub_FF1B34((uint64_t *)v58, &v56);
  uint64_t v20 = v56;
  int v45 = v57;
  if (v56 != v57)
  {
    if (a8) {
      int v21 = 3;
    }
    else {
      int v21 = 0;
    }
    int v44 = v21;
    do
    {
      int v23 = *(_DWORD *)v20;
      long long v24 = *(_OWORD *)(v20 + 8);
      long long v25 = *(_OWORD *)(v20 + 24);
      long long v26 = *(_OWORD *)(v20 + 40);
      uint64_t v27 = *((void *)v20 + 8);
      uint64_t v55 = *((void *)v20 + 7);
      v54[1] = v25;
      v54[2] = v26;
      v54[0] = v24;
      uint64_t v52 = v27;
      int v53 = *((_DWORD *)v20 + 18);
      sub_FF037C(a2, v23, (uint64_t)v54, (int *)&v52, a7, a3, a4, a10, &__p.__r_.__value_.__l.__data_, (void *)*v18);
      uint64_t v28 = nullsub_1(&__p);
      *(unsigned char *)(sub_EAD918(*(void *)(v28 + 8) - 472) + 6) = a7;
      sub_EB6F70(a11, &__p, v44);
      if (a9)
      {
        long long v29 = *(_OWORD *)(v20 + 24);
        v47[0] = *(_OWORD *)(v20 + 8);
        v47[1] = v29;
        v47[2] = *(_OWORD *)(v20 + 40);
        uint64_t v48 = *((void *)v20 + 7);
        sub_FEA6D8(v18, (uint64_t)v47, a2, (uint64_t)a3);
      }
      if (v51 < 0)
      {
        operator delete(v50);
        std::string::size_type v30 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
LABEL_19:
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
          unsigned int v22 = (void *)v30;
          if (__p.__r_.__value_.__l.__size_ != v30)
          {
            do
            {
              int v32 = *(void **)(size - 224);
              if (v32)
              {
                *(void *)(size - 216) = v32;
                operator delete(v32);
              }
              int v33 = *(void **)(size - 248);
              if (v33)
              {
                *(void *)(size - 240) = v33;
                operator delete(v33);
              }
              size_t v34 = *(void **)(size - 312);
              if (v34)
              {
                *(void *)(size - 304) = v34;
                operator delete(v34);
              }
              unint64_t v35 = *(void **)(size - 336);
              if (v35)
              {
                *(void *)(size - 328) = v35;
                operator delete(v35);
              }
              uint64_t v36 = *(void *)(size - 360);
              if (v36)
              {
                uint64_t v37 = *(void *)(size - 352);
                unint64_t v38 = *(void **)(size - 360);
                if (v37 != v36)
                {
                  do
                  {
                    int v39 = *(void **)(v37 - 24);
                    if (v39)
                    {
                      *(void *)(v37 - 16) = v39;
                      operator delete(v39);
                    }
                    v37 -= 56;
                  }
                  while (v37 != v36);
                  unint64_t v38 = *(void **)(size - 360);
                }
                *(void *)(size - 352) = v36;
                operator delete(v38);
              }
              uint64_t v40 = *(void **)(size - 448);
              if (v40)
              {
                *(void *)(size - 440) = v40;
                operator delete(v40);
              }
              uint64_t v41 = (void **)(size - 472);
              if (*(char *)(size - 449) < 0) {
                operator delete(*v41);
              }
              size -= 472;
            }
            while (v41 != (void **)v30);
            unsigned int v22 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__l.__size_ = v30;
          operator delete(v22);
          unint64_t v18 = a1;
        }
      }
      else
      {
        std::string::size_type v30 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0]) {
          goto LABEL_19;
        }
      }
      v20 += 80;
    }
    while (v20 != v45);
  }
  uint64_t v19 = sub_FF1A70((uint64_t *)v58);
  if (v56)
  {
    __n128 v57 = v56;
    operator delete(v56);
  }
LABEL_44:
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
  return v19;
}

void sub_FE9DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v27 = *(void **)(v25 - 200);
  if (v27)
  {
    *(void *)(v25 - 192) = v27;
    operator delete(v27);
    uint64_t v28 = *(void **)(v25 - 176);
    if (!v28) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v28 = *(void **)(v25 - 176);
    if (!v28) {
      goto LABEL_3;
    }
  }
  *(void *)(v25 - 168) = v28;
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

uint64_t sub_FE9E28@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (uint64_t *)sub_376F8C(*a1);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  double v6 = (void *)sub_40EFE8(a2);
  uint64_t result = sub_52058(a2);
  unint64_t v8 = (void *)result;
  while (v6 != v8)
  {
    uint64_t v9 = sub_404710(v6);
    uint64_t result = sub_52058((uint64_t)v6);
    if (v9 != result)
    {
      uint64_t v10 = sub_EADA60(v9);
      unsigned int v13 = *(_DWORD *)(v10 + 112);
      if (v13 <= 1) {
        uint64_t v12 = *(void *)(v10 + 104);
      }
      unint64_t v11 = sub_28CDA4(v5, (uint64_t)&v12);
      uint64_t result = (uint64_t)sub_F38124(a3, &v11, &v11);
    }
    v6 += 6;
  }
  return result;
}

void sub_FE9F38(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_FE9F4C(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_FE9F60(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_FE9F74(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_FE9F88(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

void sub_FE9F9C(_Unwind_Exception *a1)
{
  sub_12168(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FE9FB0(uint64_t *a1, uint64_t a2, unsigned int **a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, void *a10, int64x2_t *a11)
{
  uint64_t v13 = *a1;
  HIBYTE(v45[2]) = 17;
  strcpy((char *)v45, "EVPathGraphSearch");
  std::string __p = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  unint64_t v14 = sub_374CDC(v13, (uint64_t)v45, (uint64_t *)&__p);
  unint64_t v15 = (void **)__p;
  if (__p)
  {
    unsigned int v16 = v43;
    unint64_t v17 = __p;
    if (v43 != __p)
    {
      do
      {
        if (*((char *)v16 - 1) < 0) {
          operator delete(*(v16 - 3));
        }
        v16 -= 3;
      }
      while (v16 != v15);
      unint64_t v17 = __p;
    }
    uint64_t v43 = v15;
    operator delete(v17);
  }
  if (SHIBYTE(v45[2]) < 0) {
    operator delete(v45[0]);
  }
  v45[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v45[1] = xmmword_20B91B0;
  strcpy(v45[0], "max_num_penalty_search_paths");
  unsigned int v38 = sub_31AC04(v14, (uint64_t)v45);
  if (SHIBYTE(v45[2]) < 0) {
    operator delete(v45[0]);
  }
  v45[0] = (char *)operator new(0x28uLL);
  *(_OWORD *)&v45[1] = xmmword_20B9260;
  strcpy(v45[0], "max_num_penalty_search_iterations");
  int v39 = sub_31AC04(v14, (uint64_t)v45);
  if (SHIBYTE(v45[2]) < 0) {
    operator delete(v45[0]);
  }
  v45[0] = (char *)operator new(0x20uLL);
  *(_OWORD *)&v45[1] = xmmword_20B8E90;
  strcpy(v45[0], "penalty_search_arc_count_factor");
  double v18 = sub_5C7E8(v14, (uint64_t)v45);
  if (SHIBYTE(v45[2]) < 0) {
    operator delete(v45[0]);
  }
  uint64_t v19 = nullsub_1(a7);
  uint64_t result = sub_EB6EB0(a11);
  *(_DWORD *)(a8 + 4) = 1;
  if (v39)
  {
    int v21 = result;
    for (int i = 0; i != v39; ++i)
    {
      uint64_t result = sub_EB6EB0(a11);
      if ((int)result - v21 > v38) {
        break;
      }
      for (uint64_t j = a1[20]; j; uint64_t j = *(void *)j)
      {
        unsigned int v25 = *(_DWORD *)(j + 20);
        if (!v25) {
          continue;
        }
        uint64_t v26 = a5[9] + 48 * *(unsigned int *)(j + 16);
        int v29 = *(_DWORD *)(v26 + 12);
        uint64_t v27 = (_DWORD *)(v26 + 12);
        int v28 = v29;
        double v30 = v18 * (double)v29;
        if (v30 >= 0.0)
        {
          if (v30 >= 4.50359963e15) {
            goto LABEL_35;
          }
          uint64_t v31 = (uint64_t)(v30 + v30) + 1;
        }
        else
        {
          if (v30 <= -4.50359963e15) {
            goto LABEL_35;
          }
          uint64_t v31 = (uint64_t)(v30 + v30);
          if (v31 >= 1) {
            --v31;
          }
        }
        double v30 = (double)(v31 >> 1);
LABEL_35:
        double v24 = (double)v25 * (double)(int)v30;
        if (v24 >= 0.0)
        {
          if (v24 >= 4.50359963e15) {
            goto LABEL_24;
          }
          uint64_t v32 = (uint64_t)(v24 + v24) + 1;
        }
        else
        {
          if (v24 <= -4.50359963e15) {
            goto LABEL_24;
          }
          uint64_t v32 = (uint64_t)(v24 + v24);
          if (v32 >= 1) {
            --v32;
          }
        }
        double v24 = (double)(v32 >> 1);
LABEL_24:
        _DWORD *v27 = v28 + (int)v24;
        *(_DWORD *)(j + 20) = 0;
      }
      sub_FEBB70(a2, a3, a4, *(void *)v19, *(_DWORD *)(v19 + 8), (uint64_t)v45);
      uint64_t result = sub_FE9A98(a1, a2, a5, a6, a7, a8, a9, 1, 1, a10, a11);
    }
  }
  for (uint64_t k = a1[20]; k; uint64_t k = *(void *)k)
    *(_DWORD *)(a5[9] + 48 * *(unsigned int *)(k + 16) + 12) = *(_DWORD *)(k + 24);
  return result;
}

void sub_FEA374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FEA3B0(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v5 = sub_EB9550((uint64_t)a3);
  unint64_t v6 = HIDWORD(v5);
  if (v5 == HIDWORD(v5))
  {
    char v7 = 0;
  }
  else
  {
    char v7 = 0;
    do
    {
      uint64_t v9 = (uint64_t *)(*(void *)(a2 + 72) + 32 * v5);
      uint64_t v10 = *v9;
      uint64_t v11 = v9[1];
      while (v10 != v11)
      {
        uint64_t v12 = *(unsigned int *)(v10 + 32);
        if (v12 != -1)
        {
          uint64_t v13 = v12 + 1;
          uint64_t v14 = a3[6];
          if (v12 + 1 >= (unint64_t)((a3[7] - v14) >> 2))
          {
            exception = __cxa_allocate_exception(0x40uLL);
            strcpy((char *)v22, "vertex id out of range");
            BYTE7(v22[1]) = 22;
            int v21 = (void *)sub_2F404((uint64_t)exception, v22);
          }
          unsigned int v15 = *(_DWORD *)(v14 + 4 * v12);
          unsigned int v16 = *(_DWORD *)(v14 + 4 * v13);
          if (v15 != v16)
          {
            uint64_t v17 = a3[9];
            uint64_t v18 = v17 + 48 * v16;
            uint64_t v19 = v17 + 48 * v15;
            do
            {
              *(_OWORD *)uint64_t v19 = xmmword_20F1830;
              *(_OWORD *)(v19 + 16) = xmmword_20F1840;
              *(void *)(v19 + 32) = 0xFFFFFFFFLL;
              *(void *)(v19 + 40) = 0;
              v19 += 48;
            }
            while (v19 != v18);
          }
          char v7 = 1;
        }
        v10 += 56;
      }
      LODWORD(v5) = v5 + 1;
    }
    while (v5 != v6);
  }
  return v7 & 1;
}

void sub_FEA4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_FEA50C(void *a1)
{
  char v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[9];
  if (v3)
  {
    uint64_t v4 = a1[10];
    unint64_t v5 = (void *)a1[9];
    if (v4 != v3)
    {
      uint64_t v6 = a1[10];
      do
      {
        unint64_t v8 = *(void **)(v6 - 32);
        v6 -= 32;
        char v7 = v8;
        if (v8)
        {
          *(void *)(v4 - 24) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      unint64_t v5 = (void *)a1[9];
    }
    a1[10] = v3;
    operator delete(v5);
  }
  uint64_t v9 = (void *)a1[5];
  if (v9)
  {
    a1[6] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[2];
  if (v10)
  {
    a1[3] = v10;
    operator delete(v10);
  }
  return a1;
}

void *sub_FEA5B4(void *a1)
{
  char v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[24];
  if (v3)
  {
    a1[25] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[21];
  if (v4)
  {
    a1[22] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[18];
  if (v5)
  {
    a1[19] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[15];
  if (v6)
  {
    a1[16] = v6;
    operator delete(v6);
  }
  return a1;
}

void **sub_FEA628(void **a1)
{
  char v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 1776;
        sub_EDD1F0((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

__n128 sub_FEA694@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 120);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(a1 + 136);
  return result;
}

__n128 sub_FEA6A8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 56);
  long long v3 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 80) = v3;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 104);
  long long v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 40);
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t *sub_FEA6D8(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (unsigned int *)(a2 + 36);
  uint64_t v4 = *(unsigned int *)(a2 + 36);
  if (v4 == -1) {
    return result;
  }
  uint64_t v8 = a2;
  uint64_t v9 = result;
  uint64_t v10 = result + 18;
  while (2)
  {
    uint64_t v12 = *(void *)(v8 + 48);
    if (!v12) {
      goto LABEL_6;
    }
    unsigned int v13 = -1431655765 * ((v12 - *(void *)(a4 + 72)) >> 4);
    unsigned int v22 = v13;
    unint64_t v14 = v9[19];
    if (!v14) {
      goto LABEL_4;
    }
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v16 = v13;
      if (v14 <= v13) {
        unint64_t v16 = v13 % v14;
      }
    }
    else
    {
      unint64_t v16 = v13 & (v14 + 0xFFFFFFFF);
    }
    uint64_t v17 = *(uint64_t ***)(*v10 + 8 * v16);
    if (!v17 || (uint64_t v18 = *v17) == 0)
    {
LABEL_4:
      int v23 = &v22;
      *((_DWORD *)sub_FF0044((uint64_t)v10, &v22, (uint64_t)&unk_20F06E0, &v23) + 5) = 1;
      uint64_t v11 = *(void *)(v8 + 48);
      int v23 = &v22;
      __n128 result = sub_FF0044((uint64_t)v10, &v22, (uint64_t)&unk_20F06E0, &v23);
      *((_DWORD *)result + 6) = *(_DWORD *)(v11 + 12);
      goto LABEL_5;
    }
    if (v15.u32[0] < 2uLL)
    {
      unint64_t v19 = v14 - 1;
      while (1)
      {
        uint64_t v21 = v18[1];
        if (v21 == v13)
        {
          if (*((_DWORD *)v18 + 4) == v13) {
            goto LABEL_29;
          }
        }
        else if ((v21 & v19) != v16)
        {
          goto LABEL_4;
        }
        uint64_t v18 = (uint64_t *)*v18;
        if (!v18) {
          goto LABEL_4;
        }
      }
    }
    while (1)
    {
      unint64_t v20 = v18[1];
      if (v20 == v13) {
        break;
      }
      if (v20 >= v14) {
        v20 %= v14;
      }
      if (v20 != v16) {
        goto LABEL_4;
      }
LABEL_18:
      uint64_t v18 = (uint64_t *)*v18;
      if (!v18) {
        goto LABEL_4;
      }
    }
    if (*((_DWORD *)v18 + 4) != v13) {
      goto LABEL_18;
    }
LABEL_29:
    ++*((_DWORD *)v18 + 5);
LABEL_5:
    uint64_t v4 = *v5;
LABEL_6:
    uint64_t v8 = *(void *)(*(void *)(a3 + 72) + 32 * v4) + 56 * *(unsigned int *)(v8 + 40);
    unint64_t v5 = (unsigned int *)(v8 + 36);
    uint64_t v4 = *(unsigned int *)(v8 + 36);
    if (*(_DWORD *)(v8 + 36) != -1) {
      continue;
    }
    return result;
  }
}

uint64_t sub_FEA8D4(void *a1, unsigned int a2)
{
  sub_EC30D4((uint64_t)a1, a2);
  uint64_t v4 = a1[12];
  if (0xAAAAAAAAAAAAAAABLL * ((a1[13] - v4) >> 3) < ((a1[7] - a1[6]) >> 2) - 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v8, "no or incomplete vertex data stored");
    char v7 = (void *)sub_2F404((uint64_t)exception, &v8);
  }
  return v4 + 24 * a2;
}

void sub_FEA988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_FEA9B8(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2)
  {
    uint64_t v3 = a1[9];
    uint64_t v4 = (void *)a1[8];
    if (v3 != v2)
    {
      uint64_t v5 = a1[9];
      do
      {
        char v7 = *(void **)(v5 - 32);
        v5 -= 32;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 24) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)a1[8];
    }
    a1[9] = v2;
    operator delete(v4);
  }
  long long v8 = (void *)a1[4];
  if (v8)
  {
    a1[5] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[1];
  if (v9)
  {
    a1[2] = v9;
    operator delete(v9);
  }
  return a1;
}

void **sub_FEAA50(void **a1)
{
  uint64_t v2 = a1[21];
  if (v2)
  {
    uint64_t v3 = (char *)a1[16];
    if (v3)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = (uint64_t)a1[21] + v4;
        uint64_t v6 = *(void **)(v5 + 8);
        if (v6)
        {
          *(void *)(v5 + 16) = v6;
          operator delete(v6);
        }
        v4 += 32;
        --v3;
      }
      while (v3);
      uint64_t v2 = a1[21];
    }
    free(v2);
  }
  char v7 = a1[18];
  if (v7)
  {
    a1[19] = v7;
    operator delete(v7);
  }
  long long v8 = a1[6];
  if (v8)
  {
    a1[7] = v8;
    operator delete(v8);
  }
  uint64_t v9 = a1[3];
  if (v9)
  {
    a1[4] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *a1;
  if (*a1)
  {
    uint64_t v11 = (uint64_t)a1[1];
    uint64_t v12 = *a1;
    if ((void *)v11 != v10)
    {
      do
      {
        v11 -= 1776;
        sub_EDD1F0((uint64_t)(a1 + 2), v11);
      }
      while ((void *)v11 != v10);
      uint64_t v12 = *a1;
    }
    a1[1] = v10;
    operator delete(v12);
  }
  return a1;
}

void sub_FEAB34(char **a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  uint64_t v3 = *a1;
  if (0xB195E8EFDB195E8FLL * ((a1[2] - *a1) >> 4) >= a2) {
    return;
  }
  if (a2 >= 0x24E6A171024E6BLL) {
    sub_2E00();
  }
  uint64_t v5 = (uint64_t)a1[1];
  uint64_t v6 = 1776 * a2;
  char v7 = (char *)operator new(1776 * a2);
  long long v8 = &v7[v6];
  uint64_t v9 = &v7[v5 - (void)v3];
  if ((char *)v5 == v3)
  {
    *a1 = v9;
    a1[1] = v9;
    a1[2] = v8;
    if (!v3) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v10 = &v7[v5 - (void)v3];
  do
  {
    v5 -= 1776;
    uint64_t v10 = (char *)sub_FEACB4((void *)v10 - 222, v5);
  }
  while ((char *)v5 != v3);
  uint64_t v11 = *a1;
  uint64_t v3 = a1[1];
  *a1 = v10;
  a1[1] = v9;
  a1[2] = v8;
  if (v3 != v11)
  {
    do
    {
      v3 -= 1776;
      sub_EDD1F0(v2, (uint64_t)v3);
    }
    while (v3 != v11);
    uint64_t v3 = v11;
  }
  if (v3)
  {
LABEL_10:
    operator delete(v3);
  }
}

uint64_t sub_FEAC5C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 1776;
    sub_EDD1F0(v4, i - 1776);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_FEACB4(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  a1[14] = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
  a1[17] = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  a1[18] = 0;
  a1[19] = 0;
  a1[20] = 0;
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  a1[20] = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  a1[21] = 0;
  a1[22] = 0;
  a1[23] = 0;
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 168);
  a1[23] = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  a1[24] = 0;
  a1[25] = 0;
  a1[26] = 0;
  *((_OWORD *)a1 + 12) = *(_OWORD *)(a2 + 192);
  a1[26] = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a2 + 216);
  a1[29] = *(void *)(a2 + 232);
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  sub_F2D450(a1 + 30, a2 + 240);
  sub_F2DEC0(a1 + 126, a2 + 1008);
  return a1;
}

char *sub_FEAE44(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = (a2 - (uint64_t)*a1) / 1776;
  long long v8 = &(*a1)[1776 * v7];
  unint64_t v9 = (unint64_t)a1[2];
  if (v6 >= v9)
  {
    unint64_t v15 = 0xB195E8EFDB195E8FLL * ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v15 > 0x24E6A171024E6ALL) {
      sub_2E00();
    }
    unint64_t v16 = 0xB195E8EFDB195E8FLL * ((uint64_t)(v9 - (void)v5) >> 4);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x127350B8812735) {
      unint64_t v17 = 0x24E6A171024E6ALL;
    }
    else {
      unint64_t v17 = v15;
    }
    int v33 = a1 + 2;
    if (v17)
    {
      if (v17 > 0x24E6A171024E6ALL) {
        sub_188D718();
      }
      uint64_t v18 = (char *)operator new(1776 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    int v29 = v18;
    double v30 = &v18[1776 * v7];
    uint64_t v31 = v30;
    uint64_t v32 = &v18[1776 * v17];
    sub_FEB29C((uint64_t)&v29, a3);
    unint64_t v19 = v30;
    unint64_t v20 = *a1;
    uint64_t v21 = v30;
    if (*a1 != v8)
    {
      uint64_t v21 = v30;
      uint64_t v22 = (uint64_t)v8;
      do
      {
        v22 -= 1776;
        uint64_t v21 = (char *)sub_FEACB4((void *)v21 - 222, v22);
      }
      while ((char *)v22 != v20);
    }
    double v30 = v21;
    int v23 = a1[1];
    double v24 = v31;
    if (v23 != v8)
    {
      do
      {
        sub_FEACB4(v24, (uint64_t)v8);
        v8 += 1776;
        v24 += 1776;
      }
      while (v8 != v23);
      uint64_t v21 = v30;
      long long v8 = a1[1];
    }
    unsigned int v25 = *a1;
    *a1 = v21;
    a1[1] = v24;
    uint64_t v26 = a1[2];
    a1[2] = v32;
    uint64_t v31 = v8;
    uint64_t v32 = v26;
    int v29 = v25;
    double v30 = v25;
    if (v8 != v25)
    {
      do
      {
        uint64_t v31 = v8 - 1776;
        sub_EDD1F0((uint64_t)v33, (uint64_t)(v8 - 1776));
        long long v8 = v31;
      }
      while (v31 != v25);
      long long v8 = v29;
    }
    if (v8) {
      operator delete(v8);
    }
    return v19;
  }
  else
  {
    if (v8 != (char *)v6)
    {
      uint64_t v10 = v8 + 1776;
      uint64_t v11 = (void *)(v6 - 1776);
      if (v6 < 0x6F0)
      {
        a1[1] = (char *)v6;
        if ((char *)v6 == v10)
        {
LABEL_34:
          sub_FEB124(v8, a3);
          return v8;
        }
      }
      else
      {
        unint64_t v12 = v6 - 1776;
        unsigned int v13 = a1[1];
        do
        {
          unint64_t v14 = sub_FEACB4(v13, v12);
          v12 += 1776;
          unsigned int v13 = (char *)(v14 + 222);
        }
        while (v12 < v6);
        a1[1] = v13;
        if ((char *)v6 == v10) {
          goto LABEL_34;
        }
      }
      uint64_t v27 = 16 * ((uint64_t)(v6 - (void)v10) >> 4);
      do
      {
        sub_FEB124(v11, (uint64_t)&v5[1776 * v7 - 1776 + v27]);
        v11 -= 222;
        v27 -= 1776;
      }
      while (v27);
      goto LABEL_34;
    }
    sub_FEACB4(&(*a1)[1776 * v7], a3);
    a1[1] = v8 + 1776;
  }
  return v8;
}

void sub_FEB110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_FEAC5C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_FEB124(void *a1, uint64_t a2)
{
  sub_FEB494((uint64_t)a1, a2);
  uint64_t v4 = (void *)a1[27];
  if (v4)
  {
    a1[28] = v4;
    operator delete(v4);
    a1[27] = 0;
    a1[28] = 0;
    a1[29] = 0;
  }
  uint64_t v5 = 0;
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a2 + 216);
  a1[29] = *(void *)(a2 + 232);
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  do
  {
    uint64_t v6 = a2 + 240 + 48 * v5;
    uint64_t v7 = (uint64_t)&a1[6 * v5 + 30];
    uint64_t v8 = *(void *)(v6 + 40);
    long long v9 = *(_OWORD *)v6;
    long long v10 = *(_OWORD *)(v6 + 16);
    *(void *)uint64_t v6 = &unk_20E1710;
    *(void *)(v6 + 8) = 0;
    unint64_t v12 = *(char **)v7;
    uint64_t v11 = *(void *)(v7 + 8);
    *(_OWORD *)uint64_t v7 = v9;
    *(void *)(v6 + 40) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = 0;
    uint64_t v13 = *(void *)(v7 + 24);
    *(_OWORD *)(v7 + 16) = v10;
    *(void *)(v7 + 40) = v8;
    if (v13)
    {
      uint64_t v14 = 0;
      unint64_t v15 = (void *)(v11 + 16);
      do
      {
        if ((v12[v14] & 0x80000000) == 0)
        {
          unint64_t v16 = (void *)*(v15 - 1);
          if (v16)
          {
            *unint64_t v15 = v16;
            operator delete(v16);
          }
        }
        ++v14;
        v15 += 4;
      }
      while (v13 != v14);
      operator delete(v12);
    }
    ++v5;
  }
  while (v5 != 16);
  for (uint64_t i = 0; i != 96; i += 6)
  {
    uint64_t v18 = a2 + i * 8;
    unint64_t v19 = &a1[i];
    uint64_t v20 = *(void *)(a2 + i * 8 + 1048);
    *(void *)(v18 + 1048) = 0;
    long long v21 = *(_OWORD *)(a2 + i * 8 + 1008);
    long long v22 = *(_OWORD *)(a2 + i * 8 + 1024);
    *(void *)(v18 + 1008) = &unk_20E1710;
    *(void *)(v18 + 1016) = 0;
    int v23 = (void *)a1[i + 126];
    *(_OWORD *)(v18 + 1024) = 0u;
    uint64_t v24 = a1[i + 129];
    *((_OWORD *)v19 + 63) = v21;
    *((_OWORD *)v19 + 64) = v22;
    v19[131] = v20;
    if (v24) {
      operator delete(v23);
    }
  }
  return a1;
}

void *sub_FEB29C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(char **)(a1 + 16);
  if (v4 != *(char **)(a1 + 24)) {
    goto LABEL_22;
  }
  uint64_t v6 = *(char **)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 <= *(void *)a1)
  {
    unint64_t v12 = 0x632BD1DFB632BD1ELL * ((v4 - v6) >> 4);
    if (v4 == v6) {
      unint64_t v12 = 1;
    }
    if (v12 >= 0x24E6A171024E6BLL) {
      sub_188D718();
    }
    uint64_t v13 = *(void *)(a1 + 32);
    unint64_t v14 = v12 >> 2;
    uint64_t v15 = 1776 * v12;
    unint64_t v16 = (char *)operator new(1776 * v12);
    unint64_t v17 = v16;
    uint64_t v18 = &v16[1776 * v14];
    unint64_t v19 = &v16[v15];
    if (v4 == (char *)v5)
    {
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = v18;
      *(void *)(a1 + 24) = v19;
      if (!v6) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v20 = (uint64_t)&v4[-v5] / 1776;
      long long v21 = &v18[1776 * v20];
      uint64_t v22 = 1776 * v20;
      int v23 = v18;
      do
      {
        int v23 = (char *)(sub_FEACB4(v23, v5) + 222);
        v5 += 1776;
        v22 -= 1776;
      }
      while (v22);
      uint64_t v6 = *(char **)a1;
      uint64_t v24 = *(void *)(a1 + 8);
      uint64_t v25 = *(void *)(a1 + 16);
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = v21;
      *(void *)(a1 + 24) = v19;
      while (v25 != v24)
      {
        v25 -= 1776;
        sub_EDD1F0(v13, v25);
      }
      if (!v6) {
        goto LABEL_19;
      }
    }
    operator delete(v6);
LABEL_19:
    uint64_t v4 = *(char **)(a1 + 16);
    goto LABEL_22;
  }
  int64_t v7 = 0xB195E8EFDB195E8FLL * ((uint64_t)(v5 - *(void *)a1) >> 4);
  if (v7 >= -1) {
    uint64_t v8 = v7 + 1;
  }
  else {
    uint64_t v8 = v7 + 2;
  }
  uint64_t v9 = v8 >> 1;
  uint64_t v10 = -v9;
  if ((char *)v5 == v4)
  {
    uint64_t v11 = (char *)(v5 - 1776 * v9);
  }
  else
  {
    do
    {
      sub_FEB124((void *)(v5 + 1776 * v10), v5);
      v5 += 1776;
    }
    while ((char *)v5 != v4);
    uint64_t v4 = *(char **)(a1 + 8);
    uint64_t v11 = (char *)(v5 + 1776 * v10);
  }
  *(void *)(a1 + 8) = &v4[1776 * v10];
  *(void *)(a1 + 16) = v11;
  uint64_t v4 = v11;
LABEL_22:
  __n128 result = sub_FEACB4(v4, a2);
  *(void *)(a1 + 16) += 1776;
  return result;
}

uint64_t sub_FEB494(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(void *)(a1 + 56) = v6;
    operator delete(v6);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  int64_t v7 = *(void **)(a1 + 72);
  if (v7)
  {
    *(void *)(a1 + 80) = v7;
    operator delete(v7);
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  uint64_t v8 = *(void **)(a1 + 96);
  if (v8)
  {
    *(void *)(a1 + 104) = v8;
    operator delete(v8);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  uint64_t v9 = *(void **)(a1 + 120);
  if (v9)
  {
    *(void *)(a1 + 128) = v9;
    operator delete(v9);
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
  }
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  uint64_t v10 = *(void **)(a1 + 144);
  if (v10)
  {
    *(void *)(a1 + 152) = v10;
    operator delete(v10);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  uint64_t v11 = *(void **)(a1 + 168);
  if (v11)
  {
    *(void *)(a1 + 176) = v11;
    operator delete(v11);
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  unint64_t v12 = *(void **)(a1 + 192);
  if (v12)
  {
    *(void *)(a1 + 200) = v12;
    operator delete(v12);
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 200) = 0;
    *(void *)(a1 + 208) = 0;
  }
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  return a1;
}

uint64_t *sub_FEB6A8(uint64_t *a1, uint64_t a2)
{
  *a1 = a2;
  sub_FEB8E0((uint64_t)(a1 + 1), a2);
  a1[12] = 0x7FFFFFFF7FFFFFFFLL;
  sub_3F8850(a1 + 13);
  *((unsigned char *)a1 + 128) = 0;
  sub_FE5C2C((uint64_t *)((char *)a1 + 132));
  unint64_t v3 = *(void *)(*a1 + 56) - *(void *)(*a1 + 48);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(*a1 + 104) - *(void *)(*a1 + 96)) >> 3) != (v3 >> 2)
                                                                                                - 1)
  {
    exception = __cxa_allocate_exception(0x40uLL);
    sub_5E5C(&v13, "Graph does not have charging function data stored at all its vertices.");
    unint64_t v12 = (void *)sub_2F404((uint64_t)exception, &v13);
  }
  unint64_t v4 = ((v3 << 30) - 0x100000000) >> 32;
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v7 = *(void *)(sub_FEA8D4((void *)*a1, i) + 8);
      int v8 = *(_DWORD *)(sub_FEA8D4((void *)*a1, i) + 16);
      if (v7)
      {
        if (v8 == 0x7FFFFFFF) {
          goto LABEL_10;
        }
      }
      else if (v8 != 0x7FFFFFFF && *(_DWORD *)(sub_FEA8D4((void *)*a1, i) + 16))
      {
LABEL_10:
        uint64_t v9 = __cxa_allocate_exception(0x40uLL);
        sub_5E5C(&v13, "Graph has inconsistent charging function data.");
        uint64_t v10 = (void *)sub_2F404((uint64_t)v9, &v13);
      }
    }
  }
  return a1;
}

void sub_FEB84C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    unint64_t v19 = *v17;
    if (!*v17)
    {
LABEL_3:
      sub_FEA9B8(v15);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    unint64_t v19 = *v17;
    if (!*v17) {
      goto LABEL_3;
    }
  }
  *(void *)(v16 + 112) = v19;
  operator delete(v19);
  sub_FEA9B8(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_FEB8E0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  unsigned int v6 = ((unint64_t)(v4 - v5) >> 2) - 1;
  if (v6)
  {
    size_t v7 = 4 * v6;
    int v8 = (char *)operator new(v7);
    *(void *)(a1 + 32) = v8;
    *(void *)(a1 + 40) = v8;
    *(void *)(a1 + 48) = &v8[v7];
  }
  uint64_t v9 = (char *)operator new(0x5F4uLL);
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v9 + 1524;
  unint64_t v10 = ((*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2) - 1;
  *(_OWORD *)std::string __p = 0u;
  long long v13 = 0u;
  sub_FEBA0C((void *)(a1 + 64), v10, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return a1;
}

void sub_FEB9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  sub_3310C(v12);
  _Unwind_Resume(a1);
}

void sub_FEB9E0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    v1[5] = v2;
    operator delete(v2);
    uint64_t v4 = (void *)v1[1];
    if (v4)
    {
      v1[2] = v4;
      operator delete(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_FEBA0C(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 59) {
      sub_2E00();
    }
    uint64_t v5 = 4 * a2;
    unsigned int v6 = operator new(32 * a2);
    size_t v7 = v6;
    *a1 = v6;
    a1[1] = v6;
    int v8 = &v6[v5];
    a1[2] = &v6[v5];
    uint64_t v9 = *(const void **)a3;
    int v10 = *(_DWORD *)(a3 + 24);
    int64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
    if (v11)
    {
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v11 >> 3)) > 0x492492492492492)
      {
        void *v6 = 0;
        v6[1] = 0;
        v6[2] = 0;
        sub_2E00();
      }
      do
      {
        void *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        uint64_t v12 = (char *)operator new(v11);
        void *v7 = v12;
        v7[1] = v12;
        long long v13 = &v12[8 * (v11 >> 3)];
        v7[2] = v13;
        memcpy(v12, v9, v11);
        v7[1] = v13;
        *((_DWORD *)v7 + 6) = v10;
        v7 += 4;
        v5 -= 4;
      }
      while (v5 * 8);
    }
    else
    {
      do
      {
        void *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        *((_DWORD *)v7 + 6) = v10;
        v7 += 4;
      }
      while (v7 != v8);
    }
    a1[1] = v8;
  }
  return a1;
}

void sub_FEBB40(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
    *(void *)(v1 + 8) = v2;
    _Unwind_Resume(exception_object);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_FEBB70(uint64_t a1, unsigned int **a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v19 = a4;
  int v20 = a5;
  *(void *)(a1 + 96) = sub_40A454((uint64_t)&v19);
  unsigned int v9 = sub_4F44((unsigned int *)&v19);
  sub_3F885C((unint64_t **)&v17, 0, v9);
  int v10 = *(void **)(a1 + 104);
  if (v10)
  {
    *(void *)(a1 + 112) = v10;
    operator delete(v10);
  }
  *(_OWORD *)(a1 + 104) = v17;
  *(void *)(a1 + 120) = v18;
  *(void *)(a1 + 48) = *(void *)(a1 + 40);
  *(void *)(a1 + 24) = *(void *)(a1 + 16);
  *(_DWORD *)(a1 + 64) = 0;
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80) - v11;
  if (v12 >= 1)
  {
    unint64_t v13 = ((unint64_t)v12 >> 5) + 1;
    do
    {
      sub_FEC1A0((void *)v11, 0, 0, 0);
      *(_DWORD *)(v11 + 24) = 0;
      --v13;
      v11 += 32;
    }
    while (v13 > 1);
  }
  sub_FEBC88(a1, a2, (unsigned int *)&v19);
  uint64_t v16 = (void **)a1;
  *(void *)&long long v17 = a1;
  sub_FEBDFC(a1 + 8, (uint64_t)&v15, &v16, a6, (uint64_t *)&v17, (uint64_t)&v14, (int *)(a1 + 132));
}

uint64_t sub_FEBC88(uint64_t result, unsigned int **a2, unsigned int *a3)
{
  unint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    unsigned int v6 = (void **)result;
    size_t v7 = (void *)(result + 8);
    int v8 = (char **)(result + 104);
    do
    {
      unsigned int v9 = *v3;
      signed int v10 = sub_4F44(a3);
      int v11 = sub_3F8970(v8, v10);
      int v17 = sub_3F88D4((unsigned int **)v8) - v11;
      uint64_t v18 = v8;
      int v19 = sub_4F44(a3);
      uint64_t v25 = sub_40A454((uint64_t)a3);
      uint64_t v20 = sub_40A674((uint64_t)&v25);
      int v21 = v12;
      uint64_t v22 = -1;
      int v23 = 0;
      uint64_t v24 = 0;
      sub_FEC33C(v7, v9, (uint64_t)&v17);
      __n128 result = sub_FEA8D4(*v6, v9);
      unint64_t v13 = *(char ***)(result + 8);
      if (v13)
      {
        signed int v14 = sub_4F44(a3);
        int v15 = sub_3F8970(v13, v14);
        int v17 = sub_3F88D4((unsigned int **)v13) - v15;
        uint64_t v18 = v13;
        int v19 = sub_4F44(a3);
        uint64_t v25 = sub_40A454((uint64_t)a3);
        uint64_t v20 = sub_40A674((uint64_t)&v25);
        int v21 = v16;
        uint64_t v22 = -1;
        int v23 = 0;
        uint64_t v24 = 0;
        __n128 result = sub_FEC33C(v7, v9, (uint64_t)&v17);
      }
      ++v3;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_FEBDFC(uint64_t a1, uint64_t a2, void ***a3, uint64_t a4, uint64_t *a5, uint64_t a6, int *a7)
{
  if (*(_DWORD *)(a1 + 56))
  {
    int64_t v46 = (unsigned int **)(a1 + 8);
    while (1)
    {
      unint64_t v8 = **(unsigned int **)(a1 + 8);
      uint64_t v9 = *(void *)(a1 + 64) + 32 * v8;
      unsigned int v10 = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v9 + 24) = v10 + 1;
      unsigned int v48 = v10;
      uint64_t v11 = *(void *)v9 + 56 * v10;
      long long v12 = *(_OWORD *)v11;
      long long v13 = *(_OWORD *)(v11 + 16);
      long long v14 = *(_OWORD *)(v11 + 32);
      uint64_t v61 = *(void *)(v11 + 48);
      long long v59 = v13;
      long long v60 = v14;
      long long v58 = v12;
      sub_FEFC50(*a5, v8, (uint64_t)&v58, v9);
      unint64_t v15 = *(unsigned int *)(v9 + 24);
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 3) <= v15)
      {
        sub_FEFAF8(v46);
      }
      else
      {
        uint64_t v16 = *(void *)v9 + 56 * v15;
        signed int v17 = *(_DWORD *)(v16 + 16) <= *(_DWORD *)(v16 + 20) ? *(_DWORD *)(v16 + 20) : *(_DWORD *)(v16 + 16);
        unint64_t v18 = sub_3F8970(*(char ***)(v16 + 8), v17);
        uint64_t v19 = (*(_DWORD *)v16 + v18);
        uint64_t v20 = v19 | (sub_40A8CC((int *)(v16 + 20), SHIDWORD(v18)) << 32);
        sub_52058(*(void *)(v16 + 8));
        *(void *)&long long v50 = v20;
        uint64_t v21 = *(void *)(a1 + 32);
        if (v8 >= (*(void *)(a1 + 40) - v21) >> 2 || *(_DWORD *)(v21 + 4 * v8) == -1) {
          sub_FEC610((uint64_t)v46, v8, &v50);
        }
        else {
          sub_FEC8D0((uint64_t *)v46, v8, (uint64_t)&v50);
        }
      }
      uint64_t v22 = *a3;
      if (!*(void *)(sub_FEA8D4(**a3, v8) + 8)
        || !*((unsigned char *)v22 + 128)
        || DWORD1(v60) == -1
        || DWORD1(v60) == v8)
      {
        uint64_t v23 = *(void *)a1;
        sub_EC30D4(*(void *)a1, v8);
        uint64_t v24 = (signed int *)(*(void *)(v23 + 72) + 48 * *(unsigned int *)(*(void *)(v23 + 48) + 4 * v8));
        sub_EC30D4(v23, v8);
        uint64_t v25 = *(void *)(v23 + 72) + 48 * *(unsigned int *)(*(void *)(v23 + 48) + 4 * (v8 + 1));
        if (v24 != (signed int *)v25) {
          break;
        }
      }
LABEL_3:
      if (!*(_DWORD *)(a1 + 56)) {
        return;
      }
    }
    while (1)
    {
      if (v24[2] == -1 || !sub_40A820(v24 + 4)) {
        goto LABEL_21;
      }
      unint64_t v26 = *v24;
      if (!sub_40A820(v24 + 4)) {
        break;
      }
      unsigned int v27 = v24[3];
      int v28 = v58;
      uint64_t v29 = *((void *)&v58 + 1);
      int v30 = v59;
      *(void *)&long long v50 = sub_40AAA0((int *)&v59 + 1, v24 + 4);
      DWORD2(v50) = v31;
      int v32 = v60;
      unint64_t v33 = 0x8000000080000000;
      if (!sub_40A820(&v50) || (int v34 = sub_3F88E0(v29), v35 = v50, v34 < (int)v50))
      {
        uint64_t v29 = 0;
LABEL_29:
        int v32 = -1;
        unsigned int v36 = 0x7FFFFFFF;
        int v30 = 0x7FFFFFFF;
        int v35 = 0x7FFFFFFF;
        goto LABEL_30;
      }
      unsigned int v36 = v28 + v27;
      unint64_t v33 = *(void *)((char *)&v50 + 4);
LABEL_30:
      *(void *)&long long v50 = v36;
      *((void *)&v50 + 1) = v29;
      int v51 = v30;
      int v52 = v35;
      unint64_t v53 = v33;
      int v54 = v32;
      int v55 = v8;
      unsigned int v56 = v48;
      uint64_t v37 = *(void *)(a1 + 64) + 32 * v26;
      __n128 v57 = v24;
      if (!sub_FEC424(v37, (uint64_t)&v50, a7)) {
        goto LABEL_21;
      }
      uint64_t v38 = *(void *)v37 + 56 * *(unsigned int *)(v37 + 24);
      if (*(_DWORD *)(v38 + 16) <= *(_DWORD *)(v38 + 20)) {
        signed int v39 = *(_DWORD *)(v38 + 20);
      }
      else {
        signed int v39 = *(_DWORD *)(v38 + 16);
      }
      unint64_t v40 = sub_3F8970(*(char ***)(v38 + 8), v39);
      uint64_t v41 = (*(_DWORD *)v38 + v40);
      uint64_t v42 = v41 | (sub_40A8CC((int *)(v38 + 20), SHIDWORD(v40)) << 32);
      sub_52058(*(void *)(v38 + 8));
      uint64_t v49 = v42;
      uint64_t v43 = *(void *)(a1 + 32);
      if (v26 >= (*(void *)(a1 + 40) - v43) >> 2 || *(_DWORD *)(v43 + 4 * v26) == -1)
      {
        sub_FEC610((uint64_t)v46, v26, &v49);
        v24 += 12;
        if (v24 == (signed int *)v25) {
          goto LABEL_3;
        }
      }
      else
      {
        sub_FEC8D0((uint64_t *)v46, v26, (uint64_t)&v49);
LABEL_21:
        v24 += 12;
        if (v24 == (signed int *)v25) {
          goto LABEL_3;
        }
      }
    }
    uint64_t v29 = 0;
    unint64_t v33 = 0x8000000080000000;
    goto LABEL_29;
  }
}

void *sub_FEC1A0(void *result, char *__src, char *a3, unint64_t a4)
{
  unsigned int v6 = __src;
  size_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x492492492492492) {
      goto LABEL_23;
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x249249249249249 ? 0x492492492492492 : v11;
    if (v12 > 0x492492492492492) {
LABEL_23:
    }
      sub_2E00();
    uint64_t v13 = 7 * v12;
    __n128 result = operator new(56 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  unint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v16 - v9) >> 3) >= a4)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    unint64_t v18 = (void *)*result;
LABEL_21:
    __n128 result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  signed int v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    unint64_t v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *unint64_t v15 = &v9[v14];
  return result;
}

uint64_t sub_FEC33C(void *a1, unsigned int a2, uint64_t a3)
{
  unsigned int v6 = a1 + 1;
  size_t v7 = (int *)(a3 + 20);
  if (*(_DWORD *)(a3 + 16) <= *(_DWORD *)(a3 + 20)) {
    signed int v8 = *(_DWORD *)(a3 + 20);
  }
  else {
    signed int v8 = *(_DWORD *)(a3 + 16);
  }
  unint64_t v9 = sub_3F8970(*(char ***)(a3 + 8), v8);
  uint64_t v10 = (*(_DWORD *)a3 + v9);
  uint64_t v11 = v10 | (sub_40A8CC(v7, SHIDWORD(v9)) << 32);
  sub_52058(*(void *)(a3 + 8));
  *(void *)unint64_t v15 = v11;
  uint64_t v12 = a1[4];
  if (a2 >= (unint64_t)((a1[5] - v12) >> 2) || *(_DWORD *)(v12 + 4 * a2) == -1) {
    sub_FEC610((uint64_t)v6, a2, v15);
  }
  else {
    sub_FEC8D0(v6, a2, (uint64_t)v15);
  }
  uint64_t v13 = a1[8] + 32 * a2;
  sub_FE5C2C(v15);
  return sub_FEC424(v13, a3, v15);
}

uint64_t sub_FEC424(uint64_t a1, uint64_t a2, int *a3)
{
  if (*(_DWORD *)a2 == 0x7FFFFFFF) {
    return 0;
  }
  if (!*(void *)(a2 + 8) || *(_DWORD *)(a2 + 16) == 0x7FFFFFFF) {
    return 0;
  }
  if (!sub_40A820((_DWORD *)(a2 + 20))) {
    return 0;
  }
  int v7 = *(_DWORD *)(a2 + 20);
  if (v7 > (int)sub_3F88E0(*(void *)(a2 + 8))) {
    return 0;
  }
  uint64_t v10 = *(char **)a1;
  uint64_t v11 = *(char **)(a1 + 8);
  if (*(char **)a1 != v11)
  {
    while ((sub_FECC4C((unsigned int *)v10, (unsigned int *)a2, a3) & 1) == 0)
    {
      v10 += 56;
      if (v10 == v11)
      {
        uint64_t v10 = *(char **)(a1 + 8);
        uint64_t v12 = *(void *)a1 + 56 * *(unsigned int *)(a1 + 24);
        if ((char *)v12 != v10) {
          goto LABEL_16;
        }
        goto LABEL_18;
      }
    }
    return 0;
  }
  uint64_t v12 = (uint64_t)&v10[56 * *(unsigned int *)(a1 + 24)];
  if ((char *)v12 == v10)
  {
LABEL_18:
    uint64_t v12 = (uint64_t)v10;
  }
  else
  {
LABEL_16:
    while ((sub_FECC4C((unsigned int *)a2, (unsigned int *)v12, a3) & 1) == 0)
    {
      v12 += 56;
      if ((char *)v12 == v10) {
        goto LABEL_18;
      }
    }
    if ((char *)v12 != v10)
    {
      for (uint64_t i = v12 + 56; (char *)i != v10; i += 56)
      {
        if ((sub_FECC4C((unsigned int *)a2, (unsigned int *)i, a3) & 1) == 0)
        {
          long long v18 = *(_OWORD *)i;
          long long v19 = *(_OWORD *)(i + 16);
          long long v20 = *(_OWORD *)(i + 32);
          *(void *)(v12 + 48) = *(void *)(i + 48);
          *(_OWORD *)(v12 + 16) = v19;
          *(_OWORD *)(v12 + 32) = v20;
          *(_OWORD *)uint64_t v12 = v18;
          v12 += 56;
        }
      }
    }
  }
  if (v12 != *(void *)(a1 + 8)) {
    *(void *)(a1 + 8) = v12;
  }
  sub_FECAD0((char **)a1, (long long *)a2);
  unint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)a1 + 56 * *(unsigned int *)(a1 + 24);
  unint64_t v15 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - v14) >> 3));
  if (v13 == v14) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  uint64_t v8 = 1;
  sub_FED40C(v14, v13, (uint64_t)&v21, v16, 1);
  return v8;
}

void sub_FEC610(uint64_t a1, unsigned int a2, void *a3)
{
  unint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v7 = a1 + 24;
  uint64_t v10 = v9 - v8;
  unint64_t v11 = (v9 - v8) >> 2;
  if (v11 <= a2)
  {
    do
    {
      unint64_t v16 = (v10 >> 1) | 1;
      if (v16 <= v11)
      {
        if (v16 < v11)
        {
          uint64_t v9 = v8 + 4 * v16;
          *(void *)(a1 + 32) = v9;
          uint64_t v10 = 4 * v16;
          unint64_t v17 = (uint64_t)(4 * v16) >> 2;
          if (v11 < v17) {
LABEL_12:
          }
            memset((void *)(v8 + 4 * v11), 255, v10 - 4 * v11);
        }
        else
        {
          uint64_t v10 = v9 - v8;
          unint64_t v17 = (v9 - v8) >> 2;
          if (v11 < v17) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        sub_4394C(v7, v16 - v11);
        uint64_t v8 = *(void *)(a1 + 24);
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = v9 - v8;
        unint64_t v17 = (v9 - v8) >> 2;
        if (v11 < v17) {
          goto LABEL_12;
        }
      }
      unint64_t v11 = v17;
    }
    while (v17 <= v6);
  }
  *(_DWORD *)uint64_t v44 = a2;
  *(void *)&v44[4] = *a3;
  uint64_t v12 = HIDWORD(*a3);
  uint64_t v14 = *(_DWORD **)(a1 + 8);
  unint64_t v13 = *(void *)(a1 + 16);
  if ((unint64_t)v14 >= v13)
  {
    long long v18 = *(_DWORD **)a1;
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v14 - *(void *)a1) >> 2);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0x1555555555555555) {
      sub_2E00();
    }
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v18) >> 2);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v22 = 0x1555555555555555;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 > 0x1555555555555555) {
        sub_188D718();
      }
      uint64_t v23 = (char *)operator new(12 * v22);
    }
    else
    {
      uint64_t v23 = 0;
    }
    uint64_t v24 = &v23[12 * v19];
    *(void *)uint64_t v24 = *(void *)v44;
    *((_DWORD *)v24 + 2) = v12;
    unint64_t v15 = v24 + 12;
    if (v14 != v18)
    {
      do
      {
        uint64_t v25 = *(void *)(v14 - 3);
        v14 -= 3;
        int v26 = v14[2];
        *(void *)(v24 - 12) = v25;
        v24 -= 12;
        *((_DWORD *)v24 + 2) = v26;
      }
      while (v14 != v18);
      uint64_t v14 = *(_DWORD **)a1;
    }
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = &v23[12 * v22];
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *(void *)uint64_t v14 = *(void *)v44;
    v14[2] = v12;
    unint64_t v15 = v14 + 3;
  }
  *(void *)(a1 + 8) = v15;
  *(_DWORD *)(*(void *)(a1 + 24) + 4 * v6) = *(_DWORD *)(a1 + 48);
  unsigned int v27 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v27 + 1;
  if (v27)
  {
    int v28 = *(_DWORD **)a1;
    do
    {
      unsigned int v35 = v27 - 1;
      unsigned int v36 = (v27 - 1) >> 2;
      uint64_t v37 = &v28[3 * v36];
      uint64_t v38 = (uint64_t *)(v37 + 1);
      int v39 = v37[1];
      unint64_t v40 = &v28[3 * v27];
      int v42 = v40[1];
      uint64_t v41 = (uint64_t *)(v40 + 1);
      BOOL v43 = v39 == v42;
      if (v39 < v42 || v43 && v28[3 * v36 + 2] > v28[3 * v27 + 2]) {
        break;
      }
      int v29 = *v40;
      _DWORD *v40 = *v37;
      *uint64_t v37 = v29;
      uint64_t v30 = *v41;
      *uint64_t v41 = *v38;
      *uint64_t v38 = v30;
      int v28 = *(_DWORD **)a1;
      uint64_t v31 = *(void *)(a1 + 24);
      uint64_t v32 = 4 * *(unsigned int *)(*(void *)a1 + 12 * v27);
      uint64_t v33 = 4 * *(unsigned int *)(*(void *)a1 + 12 * v36);
      int v34 = *(_DWORD *)(v31 + v32);
      *(_DWORD *)(v31 + v32) = *(_DWORD *)(v31 + v33);
      *(_DWORD *)(v31 + v33) = v34;
      unsigned int v27 = v35 >> 2;
    }
    while (v35 > 3);
  }
}

uint64_t *sub_FEC8D0(uint64_t *result, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(result[3] + 4 * a2);
  uint64_t v4 = *result + 12 * v3;
  uint64_t v5 = *(void *)(v4 + 4);
  *(void *)(v4 + 4) = *(void *)a3;
  if (*(_DWORD *)a3 >= (int)v5
    && (*(_DWORD *)a3 == v5 ? (BOOL v6 = *(_DWORD *)(a3 + 4) <= SHIDWORD(v5)) : (BOOL v6 = 1), v6))
  {
    unsigned int v7 = (4 * v3) | 1;
    unsigned int v8 = *((_DWORD *)result + 12);
    if (v7 < v8)
    {
      int v9 = 4 * v3;
      do
      {
        unsigned int v10 = v9 + 5;
        if (v10 >= v8) {
          unsigned int v11 = v8;
        }
        else {
          unsigned int v11 = v10;
        }
        if (v7 >= v11) {
          break;
        }
        uint64_t v12 = *result;
        uint64_t v13 = *result + 12 * v3;
        unint64_t v16 = *(void *)(v13 + 4);
        uint64_t v14 = (void *)(v13 + 4);
        unint64_t v15 = v16;
        uint64_t v17 = v3;
        unint64_t v18 = HIDWORD(v16);
        unint64_t v19 = (int *)(*result + 12 * v7 + 4);
        unsigned int v3 = -1;
        int v20 = v16;
        do
        {
          if (*v19 < v20 || *v19 == v20 && v19[1] > (int)v18)
          {
            int v20 = *v19;
            LODWORD(v18) = v19[1];
            unsigned int v3 = v7;
          }
          ++v7;
          v19 += 3;
        }
        while (v11 != v7);
        if (v3 >= v8) {
          break;
        }
        unint64_t v21 = (int *)(v12 + 12 * v3);
        uint64_t v22 = 12 * v17;
        int v23 = *v21;
        *unint64_t v21 = *(_DWORD *)(v12 + v22);
        *(_DWORD *)(v12 + v22) = v23;
        uint64_t v24 = *(void *)(v21 + 1);
        *(void *)(v21 + 1) = v15;
        *uint64_t v14 = v24;
        uint64_t v25 = result[3];
        uint64_t v26 = 4 * *(unsigned int *)(*result + 12 * v3);
        uint64_t v27 = 4 * *(unsigned int *)(*result + v22);
        int v28 = *(_DWORD *)(v25 + v26);
        *(_DWORD *)(v25 + v26) = *(_DWORD *)(v25 + v27);
        *(_DWORD *)(v25 + v27) = v28;
        int v9 = 4 * v3;
        unsigned int v7 = (4 * v3) | 1;
        unsigned int v8 = *((_DWORD *)result + 12);
      }
      while (v7 < v8);
    }
  }
  else if (v3)
  {
    uint64_t v29 = *result;
    do
    {
      unsigned int v36 = v3 - 1;
      unsigned int v37 = (v3 - 1) >> 2;
      uint64_t v38 = (_DWORD *)(v29 + 12 * v37);
      int v39 = (uint64_t *)(v38 + 1);
      int v40 = v38[1];
      uint64_t v41 = (_DWORD *)(v29 + 12 * v3);
      int v43 = v41[1];
      int v42 = (uint64_t *)(v41 + 1);
      BOOL v44 = v40 == v43;
      if (v40 < v43 || v44 && *(_DWORD *)(v29 + 12 * v37 + 8) > *(_DWORD *)(v29 + 12 * v3 + 8)) {
        break;
      }
      int v30 = *v41;
      *uint64_t v41 = *v38;
      *uint64_t v38 = v30;
      uint64_t v31 = *v42;
      uint64_t *v42 = *v39;
      *int v39 = v31;
      uint64_t v29 = *result;
      uint64_t v32 = result[3];
      uint64_t v33 = 4 * *(unsigned int *)(*result + 12 * v3);
      uint64_t v34 = 4 * *(unsigned int *)(*result + 12 * v37);
      int v35 = *(_DWORD *)(v32 + v33);
      *(_DWORD *)(v32 + v33) = *(_DWORD *)(v32 + v34);
      *(_DWORD *)(v32 + v34) = v35;
      unsigned int v3 = v36 >> 2;
    }
    while (v36 >= 4);
  }
  return result;
}

char *sub_FECAD0(char **a1, long long *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unsigned int v10 = *a1;
    uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) > 0x492492492492492) {
      sub_2E00();
    }
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (void)v10) >> 3);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x249249249249249) {
      unint64_t v14 = 0x492492492492492;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 > 0x492492492492492) {
        sub_188D718();
      }
      unint64_t v15 = (char *)operator new(56 * v14);
    }
    else
    {
      unint64_t v15 = 0;
    }
    unint64_t v16 = &v15[56 * v11];
    long long v17 = a2[1];
    *(_OWORD *)unint64_t v16 = *a2;
    *((_OWORD *)v16 + 1) = v17;
    *((_OWORD *)v16 + 2) = a2[2];
    *((void *)v16 + 6) = *((void *)a2 + 6);
    int v9 = v16 + 56;
    if (v5 != v10)
    {
      do
      {
        long long v18 = *(_OWORD *)(v5 - 56);
        long long v19 = *(_OWORD *)(v5 - 40);
        long long v20 = *(_OWORD *)(v5 - 24);
        *((void *)v16 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v16 - 24) = v20;
        *(_OWORD *)(v16 - 40) = v19;
        *(_OWORD *)(v16 - 56) = v18;
        v16 -= 56;
        v5 -= 56;
      }
      while (v5 != v10);
      uint64_t v5 = *a1;
    }
    *a1 = v16;
    a1[1] = v9;
    a1[2] = &v15[56 * v14];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    long long v8 = a2[2];
    *((void *)v5 + 6) = *((void *)a2 + 6);
    *((_OWORD *)v5 + 1) = v7;
    *((_OWORD *)v5 + 2) = v8;
    *(_OWORD *)uint64_t v5 = v6;
    int v9 = v5 + 56;
  }
  a1[1] = v9;
  return v9 - 56;
}

uint64_t sub_FECC4C(unsigned int *a1, unsigned int *a2, int *a3)
{
  long long v6 = (int *)(a1 + 5);
  if ((int)a1[4] <= (int)a1[5]) {
    signed int v7 = a1[5];
  }
  else {
    signed int v7 = a1[4];
  }
  unint64_t v8 = sub_3F8970(*((char ***)a1 + 1), v7);
  uint64_t v10 = v9;
  uint64_t v11 = *a1 + v8;
  uint64_t v12 = v11 | (sub_40A8CC(v6, SHIDWORD(v8)) << 32);
  unint64_t v13 = *a1 | ((unint64_t)-a1[7] << 32);
  uint64_t v14 = sub_52058(*((void *)a1 + 1));
  sub_FE62EC(a1, v31);
  v30[0] = v12;
  v30[1] = v13;
  v30[2] = v10;
  v30[3] = v14;
  if ((int)a2[4] <= (int)a2[5]) {
    signed int v15 = a2[5];
  }
  else {
    signed int v15 = a2[4];
  }
  unint64_t v16 = sub_3F8970(*((char ***)a2 + 1), v15);
  uint64_t v18 = v17;
  uint64_t v19 = *a2 + v16;
  uint64_t v20 = v19 | (sub_40A8CC((int *)a2 + 5, SHIDWORD(v16)) << 32);
  unint64_t v21 = *a2 | ((unint64_t)-a2[7] << 32);
  uint64_t v22 = sub_52058(*((void *)a2 + 1));
  sub_FE62EC(a2, v29);
  v28[0] = v20;
  v28[1] = v21;
  v28[2] = v18;
  v28[3] = v22;
  int v27 = *a3;
  uint64_t v25 = &v27;
  uint64_t v26 = &v27;
  BOOL v23 = sub_FECDB4((uint64_t)a1, (uint64_t)v28, (uint64_t)v30, (uint64_t)&v26);
  uint64_t result = 0;
  if (!v23) {
    return sub_FECF00((uint64_t)a1, (uint64_t)v30, (uint64_t)v28, (uint64_t)&v25) ^ 1;
  }
  return result;
}

BOOL sub_FECDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  v25[0] = *(_OWORD *)a2;
  v25[1] = v5;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = v7 + 8;
  if (v8 <= v7 + 8) {
    unint64_t v10 = 0x7FFFFFFF7FFFFFFFLL;
  }
  else {
    unint64_t v10 = (*(_DWORD *)(v7 + 8) + v6) | ((unint64_t)(*(_DWORD *)(v7 + 12) + HIDWORD(v6)) << 32);
  }
  v24[0] = v10;
  v24[1] = v6;
  v24[2] = v9;
  v24[3] = v8;
  v23[0] = v24;
  v23[1] = a2;
  v23[2] = v25;
  v22[0] = v25;
  v22[1] = v24;
  long long v22[2] = a2;
  *(void *)&long long v20 = v23;
  *((void *)&v20 + 1) = a4;
  unint64_t v21 = v22;
  unint64_t v11 = *(void *)a3;
  int v12 = *(_DWORD *)(a3 + 8);
  int v13 = *(_DWORD *)(a3 + 12);
  uint64_t v14 = *(_DWORD **)(a3 + 16);
  unint64_t v15 = *(void *)(a3 + 24);
  unint64_t v16 = *(_DWORD **)(a3 + 48);
  long long v26 = v20;
  int v27 = v22;
  if (v14 == v16)
  {
LABEL_11:
    *(void *)&long long v26 = *(void *)(a3 + 32);
    return sub_FED04C((uint64_t **)&v20, (int *)&v26);
  }
  else
  {
    uint64_t v17 = v14 + 2;
    while (1)
    {
      unint64_t v28 = v11;
      if (sub_FED04C((uint64_t **)&v26, (int *)&v28)) {
        return 1;
      }
      if (v15 > (unint64_t)v17)
      {
        unint64_t v11 = (*v17 + v12) | ((unint64_t)(v17[1] + v13) << 32);
        BOOL v18 = v17 == v16;
        v17 += 2;
        if (v18) {
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v11 = 0x7FFFFFFF7FFFFFFFLL;
        BOOL v18 = v17 == v16;
        v17 += 2;
        if (v18) {
          goto LABEL_11;
        }
      }
    }
  }
}

uint64_t sub_FECF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  v25[0] = *(_OWORD *)a2;
  v25[1] = v5;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  unint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = v7 + 8;
  if (v8 <= v7 + 8) {
    unint64_t v10 = 0x7FFFFFFF7FFFFFFFLL;
  }
  else {
    unint64_t v10 = (*(_DWORD *)(v7 + 8) + v6) | ((unint64_t)(*(_DWORD *)(v7 + 12) + HIDWORD(v6)) << 32);
  }
  v24[0] = v10;
  v24[1] = v6;
  v24[2] = v9;
  v24[3] = v8;
  v23[0] = v24;
  v23[1] = a2;
  v23[2] = v25;
  v22[0] = v25;
  v22[1] = v24;
  long long v22[2] = a2;
  *(void *)&long long v20 = v23;
  *((void *)&v20 + 1) = a4;
  unint64_t v21 = v22;
  unint64_t v11 = *(void *)a3;
  int v12 = *(_DWORD *)(a3 + 8);
  int v13 = *(_DWORD *)(a3 + 12);
  uint64_t v14 = *(_DWORD **)(a3 + 16);
  unint64_t v15 = *(void *)(a3 + 24);
  unint64_t v16 = *(_DWORD **)(a3 + 48);
  long long v26 = v20;
  int v27 = v22;
  if (v14 == v16)
  {
LABEL_11:
    *(void *)&long long v26 = *(void *)(a3 + 32);
    return sub_FED228((uint64_t **)&v20, (int *)&v26);
  }
  else
  {
    uint64_t v17 = v14 + 2;
    while (1)
    {
      unint64_t v28 = v11;
      if (sub_FED228((uint64_t **)&v26, (int *)&v28)) {
        return 1;
      }
      if (v15 > (unint64_t)v17)
      {
        unint64_t v11 = (*v17 + v12) | ((unint64_t)(v17[1] + v13) << 32);
        BOOL v18 = v17 == v16;
        v17 += 2;
        if (v18) {
          goto LABEL_11;
        }
      }
      else
      {
        unint64_t v11 = 0x7FFFFFFF7FFFFFFFLL;
        BOOL v18 = v17 == v16;
        v17 += 2;
        if (v18) {
          goto LABEL_11;
        }
      }
    }
  }
}

BOOL sub_FED04C(uint64_t **a1, int *a2)
{
  int v2 = *a2;
  int v3 = a2[1];
  if (*a2 == 0x7FFFFFFF || v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = **a1;
  unint64_t v8 = (void *)(v7 + 16);
  if (*(void *)(v7 + 16) == *(void *)((*a1)[1] + 48))
  {
    uint64_t v9 = a1[2];
    unint64_t v10 = (_DWORD *)*v9;
    if (v2 < *(_DWORD *)*v9) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      int v2 = *a2;
      if (*(_DWORD *)v7 >= *a2) {
        break;
      }
      int v12 = (void *)v6[2];
      *int v12 = *(void *)v7;
      v12[2] = *v8;
      uint64_t v13 = *v6;
      uint64_t v14 = *(void *)(*v6 + 16);
      unint64_t v15 = *(void *)(*v6 + 24);
      *(void *)(*v6 + 16) = v14 + 8;
      if (v15 > v14 + 8) {
        unint64_t v11 = (*(_DWORD *)(v14 + 8) + *(_DWORD *)(v13 + 8)) | ((unint64_t)(*(_DWORD *)(v14 + 12) + *(_DWORD *)(v13 + 12)) << 32);
      }
      else {
        unint64_t v11 = 0x7FFFFFFF7FFFFFFFLL;
      }
      *(void *)uint64_t v13 = v11;
      uint64_t v7 = *v6;
      unint64_t v8 = (void *)(*v6 + 16);
      if (*v8 == *(void *)(v6[1] + 48))
      {
        int v2 = *a2;
        break;
      }
    }
    int v3 = a2[1];
    uint64_t v9 = a1[2];
    unint64_t v10 = (_DWORD *)*v9;
    if (v2 < *(_DWORD *)*v9) {
      return 0;
    }
  }
  unint64_t v16 = a1[1];
  BOOL v18 = (uint64_t *)v9[1];
  uint64_t v17 = v9[2];
  if (v18[2] != *(void *)(v17 + 48))
  {
    uint64_t v24 = *(void *)v10;
    uint64_t v19 = *v18;
LABEL_19:
    uint64_t v23 = v19;
    int v20 = sub_3F88EC(&v24, &v23, v2);
    goto LABEL_20;
  }
  int v21 = *(_DWORD *)(v17 + 32);
  int v20 = *(_DWORD *)(v17 + 36);
  if (v21 == 0x7FFFFFFF || v20 == 0x7FFFFFFF)
  {
    int v20 = v10[1];
  }
  else if (v2 <= v21)
  {
    uint64_t v24 = *(void *)v10;
    uint64_t v19 = *(void *)(v17 + 32);
    goto LABEL_19;
  }
LABEL_20:
  if (v20 == 0x7FFFFFFF) {
    return 0;
  }
  if (v3 == 0x7FFFFFFF) {
    return 1;
  }
  return v3 < v20 - *(_DWORD *)*v16;
}

uint64_t sub_FED228(uint64_t **a1, int *a2)
{
  int v2 = *a2;
  int v3 = a2[1];
  if (*a2 == 0x7FFFFFFF || v3 == 0x7FFFFFFF) {
    return 0;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = **a1;
  unint64_t v8 = (void *)(v7 + 16);
  if (*(void *)(v7 + 16) == *(void *)((*a1)[1] + 48))
  {
    uint64_t v9 = a1[2];
    unint64_t v10 = (_DWORD *)*v9;
    if (v2 < *(_DWORD *)*v9) {
      return v3 != 0x7FFFFFFF;
    }
  }
  else
  {
    while (1)
    {
      int v2 = *a2;
      if (*(_DWORD *)v7 >= *a2) {
        break;
      }
      int v12 = (void *)v6[2];
      *int v12 = *(void *)v7;
      v12[2] = *v8;
      uint64_t v13 = *v6;
      uint64_t v14 = *(void *)(*v6 + 16);
      unint64_t v15 = *(void *)(*v6 + 24);
      *(void *)(*v6 + 16) = v14 + 8;
      if (v15 > v14 + 8) {
        unint64_t v11 = (*(_DWORD *)(v14 + 8) + *(_DWORD *)(v13 + 8)) | ((unint64_t)(*(_DWORD *)(v14 + 12) + *(_DWORD *)(v13 + 12)) << 32);
      }
      else {
        unint64_t v11 = 0x7FFFFFFF7FFFFFFFLL;
      }
      *(void *)uint64_t v13 = v11;
      uint64_t v7 = *v6;
      unint64_t v8 = (void *)(*v6 + 16);
      if (*v8 == *(void *)(v6[1] + 48))
      {
        int v2 = *a2;
        break;
      }
    }
    int v3 = a2[1];
    uint64_t v9 = a1[2];
    unint64_t v10 = (_DWORD *)*v9;
    if (v2 < *(_DWORD *)*v9) {
      return v3 != 0x7FFFFFFF;
    }
  }
  unint64_t v16 = a1[1];
  BOOL v18 = (uint64_t *)v9[1];
  uint64_t v17 = v9[2];
  if (v18[2] != *(void *)(v17 + 48))
  {
    uint64_t v24 = *(void *)v10;
    uint64_t v19 = *v18;
LABEL_19:
    uint64_t v23 = v19;
    int v20 = sub_3F88EC(&v24, &v23, v2);
    goto LABEL_20;
  }
  int v21 = *(_DWORD *)(v17 + 32);
  int v20 = *(_DWORD *)(v17 + 36);
  if (v21 == 0x7FFFFFFF || v20 == 0x7FFFFFFF)
  {
    int v20 = v10[1];
  }
  else if (v2 <= v21)
  {
    uint64_t v24 = *(void *)v10;
    uint64_t v19 = *(void *)(v17 + 32);
    goto LABEL_19;
  }
LABEL_20:
  if (v3 == 0x7FFFFFFF) {
    return 0;
  }
  if (v20 == 0x7FFFFFFF) {
    return 1;
  }
  return v3 - *(_DWORD *)*v16 > v20;
}

void sub_FED40C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
uint64_t sub_FEDA38(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v41 = v2;
    uint64_t v42 = v3;
    uint64_t v4 = a2;
    uint64_t v5 = result;
    uint64_t v6 = result + 56;
    if (result + 56 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = result;
      do
      {
        uint64_t v11 = v6;
        if (*(_DWORD *)(v8 + 72) <= *(_DWORD *)(v8 + 76)) {
          signed int v12 = *(_DWORD *)(v8 + 76);
        }
        else {
          signed int v12 = *(_DWORD *)(v8 + 72);
        }
        unint64_t v13 = sub_3F8970(*(char ***)(v8 + 64), v12);
        int v14 = *(_DWORD *)(v8 + 56) + v13;
        int v15 = sub_40A8CC((int *)(v8 + 76), SHIDWORD(v13));
        sub_52058(*(void *)(v8 + 64));
        if (*(_DWORD *)(v8 + 16) <= *(_DWORD *)(v8 + 20)) {
          signed int v16 = *(_DWORD *)(v8 + 20);
        }
        else {
          signed int v16 = *(_DWORD *)(v8 + 16);
        }
        unint64_t v17 = sub_3F8970(*(char ***)(v8 + 8), v16);
        int v18 = *(_DWORD *)v8 + v17;
        int v19 = sub_40A8CC((int *)(v8 + 20), SHIDWORD(v17));
        uint64_t result = sub_52058(*(void *)(v8 + 8));
        if (v14 < v18 || (v14 == v18 ? (BOOL v20 = v15 <= v19) : (BOOL v20 = 1), !v20))
        {
          long long v37 = *(_OWORD *)v11;
          long long v38 = *(_OWORD *)(v11 + 16);
          long long v39 = *(_OWORD *)(v11 + 32);
          uint64_t v40 = *(void *)(v11 + 48);
          long long v21 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)uint64_t v11 = *(_OWORD *)v8;
          *(_OWORD *)(v11 + 16) = v21;
          *(_OWORD *)(v11 + 32) = *(_OWORD *)(v8 + 32);
          *(void *)(v11 + 48) = *(void *)(v8 + 48);
          uint64_t v9 = v5;
          if (v8 != v5)
          {
            uint64_t v36 = v7;
            uint64_t v22 = v7;
            while (1)
            {
              uint64_t v24 = v5 + v22;
              signed int v25 = (int)v38 <= SDWORD1(v38) ? DWORD1(v38) : v38;
              unint64_t v26 = sub_3F8970(*((char ***)&v37 + 1), v25);
              int v27 = v26;
              int v28 = sub_40A8CC((int *)&v38 + 1, SHIDWORD(v26));
              sub_52058(*((uint64_t *)&v37 + 1));
              signed int v29 = *(_DWORD *)(v24 - 40) <= *(_DWORD *)(v24 - 36) ? *(_DWORD *)(v24 - 36) : *(_DWORD *)(v24 - 40);
              unint64_t v30 = sub_3F8970(*(char ***)(v24 - 48), v29);
              int v31 = v37 + v27;
              int v32 = *(_DWORD *)(v24 - 56) + v30;
              int v33 = sub_40A8CC((int *)(v24 - 36), SHIDWORD(v30));
              uint64_t result = sub_52058(*(void *)(v24 - 48));
              if (v31 >= v32 && (v31 != v32 || v28 <= v33)) {
                break;
              }
              long long v23 = *(_OWORD *)(v24 - 40);
              *(_OWORD *)uint64_t v24 = *(_OWORD *)(v24 - 56);
              *(_OWORD *)(v24 + 16) = v23;
              *(_OWORD *)(v24 + 32) = *(_OWORD *)(v24 - 24);
              *(void *)(v24 + 48) = *(void *)(v24 - 8);
              v22 -= 56;
              if (!v22)
              {
                uint64_t v9 = v5;
                goto LABEL_5;
              }
            }
            uint64_t v9 = v5 + v22;
LABEL_5:
            uint64_t v4 = a2;
            uint64_t v7 = v36;
          }
          long long v10 = v38;
          *(_OWORD *)uint64_t v9 = v37;
          *(_OWORD *)(v9 + 16) = v10;
          *(_OWORD *)(v9 + 32) = v39;
          *(void *)(v9 + 48) = v40;
        }
        uint64_t v6 = v11 + 56;
        v7 += 56;
        uint64_t v8 = v11;
      }
      while (v11 + 56 != v4);
    }
  }
  return result;
}

uint64_t sub_FEDC74(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v37 = v2;
    uint64_t v38 = v3;
    uint64_t v5 = result;
    uint64_t v6 = result + 56;
    if (result + 56 != a2)
    {
      do
      {
        uint64_t v7 = v6;
        if (*(_DWORD *)(v5 + 72) <= *(_DWORD *)(v5 + 76)) {
          signed int v8 = *(_DWORD *)(v5 + 76);
        }
        else {
          signed int v8 = *(_DWORD *)(v5 + 72);
        }
        unint64_t v9 = sub_3F8970(*(char ***)(v5 + 64), v8);
        int v10 = *(_DWORD *)(v5 + 56) + v9;
        int v11 = sub_40A8CC((int *)(v5 + 76), SHIDWORD(v9));
        sub_52058(*(void *)(v5 + 64));
        if (*(_DWORD *)(v5 + 16) <= *(_DWORD *)(v5 + 20)) {
          signed int v12 = *(_DWORD *)(v5 + 20);
        }
        else {
          signed int v12 = *(_DWORD *)(v5 + 16);
        }
        unint64_t v13 = sub_3F8970(*(char ***)(v5 + 8), v12);
        int v14 = *(_DWORD *)v5 + v13;
        int v15 = sub_40A8CC((int *)(v5 + 20), SHIDWORD(v13));
        uint64_t result = sub_52058(*(void *)(v5 + 8));
        if (v10 < v14 || (v10 == v14 ? (BOOL v16 = v11 <= v15) : (BOOL v16 = 1), !v16))
        {
          long long v33 = *(_OWORD *)v7;
          long long v34 = *(_OWORD *)(v7 + 16);
          long long v35 = *(_OWORD *)(v7 + 32);
          uint64_t v36 = *(void *)(v7 + 48);
          do
          {
            uint64_t v17 = v5;
            long long v18 = *(_OWORD *)(v5 + 16);
            *(_OWORD *)(v5 + 56) = *(_OWORD *)v5;
            *(_OWORD *)(v5 + 72) = v18;
            *(_OWORD *)(v5 + 88) = *(_OWORD *)(v5 + 32);
            *(void *)(v5 + 104) = *(void *)(v5 + 48);
            if ((int)v34 <= SDWORD1(v34)) {
              signed int v19 = DWORD1(v34);
            }
            else {
              signed int v19 = v34;
            }
            unint64_t v20 = sub_3F8970(*((char ***)&v33 + 1), v19);
            int v21 = v20;
            int v22 = sub_40A8CC((int *)&v34 + 1, SHIDWORD(v20));
            sub_52058(*((uint64_t *)&v33 + 1));
            long long v23 = (int *)(v5 - 36);
            if (*(_DWORD *)(v5 - 40) <= *(_DWORD *)(v5 - 36)) {
              signed int v24 = *(_DWORD *)(v5 - 36);
            }
            else {
              signed int v24 = *(_DWORD *)(v5 - 40);
            }
            unint64_t v25 = sub_3F8970(*(char ***)(v5 - 48), v24);
            int v26 = *(_DWORD *)(v5 - 56);
            v5 -= 56;
            int v27 = v33 + v21;
            int v28 = v26 + v25;
            int v29 = sub_40A8CC(v23, SHIDWORD(v25));
            uint64_t result = sub_52058(*(void *)(v17 - 48));
          }
          while (v27 < v28 || v27 == v28 && v22 > v29);
          long long v31 = v34;
          long long v32 = v35;
          *(void *)(v17 + 48) = v36;
          *(_OWORD *)(v17 + 16) = v31;
          *(_OWORD *)(v17 + 32) = v32;
          *(_OWORD *)uint64_t v17 = v33;
        }
        uint64_t v6 = v7 + 56;
        uint64_t v5 = v7;
      }
      while (v7 + 56 != a2);
    }
  }
  return result;
}

uint64_t sub_FEDE58(long long *a1, long long *a2, long long *a3)
{
  uint64_t v6 = (int *)a2 + 5;
  if (*((_DWORD *)a2 + 4) <= *((_DWORD *)a2 + 5)) {
    signed int v7 = *((_DWORD *)a2 + 5);
  }
  else {
    signed int v7 = *((_DWORD *)a2 + 4);
  }
  unint64_t v8 = sub_3F8970(*((char ***)a2 + 1), v7);
  int v9 = *(_DWORD *)a2 + v8;
  int v10 = sub_40A8CC(v6, SHIDWORD(v8));
  sub_52058(*((void *)a2 + 1));
  if (*((_DWORD *)a1 + 4) <= *((_DWORD *)a1 + 5)) {
    signed int v11 = *((_DWORD *)a1 + 5);
  }
  else {
    signed int v11 = *((_DWORD *)a1 + 4);
  }
  unint64_t v12 = sub_3F8970(*((char ***)a1 + 1), v11);
  int v13 = *(_DWORD *)a1 + v12;
  int v14 = sub_40A8CC((int *)a1 + 5, SHIDWORD(v12));
  sub_52058(*((void *)a1 + 1));
  if (v9 >= v13 && (v9 == v13 ? (BOOL v15 = v10 <= v14) : (BOOL v15 = 1), v15))
  {
    if (*((_DWORD *)a3 + 4) <= *((_DWORD *)a3 + 5)) {
      signed int v16 = *((_DWORD *)a3 + 5);
    }
    else {
      signed int v16 = *((_DWORD *)a3 + 4);
    }
    unint64_t v17 = sub_3F8970(*((char ***)a3 + 1), v16);
    int v18 = *(_DWORD *)a3 + v17;
    int v19 = sub_40A8CC((int *)a3 + 5, SHIDWORD(v17));
    sub_52058(*((void *)a3 + 1));
    if (*((_DWORD *)a2 + 4) <= *((_DWORD *)a2 + 5)) {
      signed int v20 = *((_DWORD *)a2 + 5);
    }
    else {
      signed int v20 = *((_DWORD *)a2 + 4);
    }
    unint64_t v21 = sub_3F8970(*((char ***)a2 + 1), v20);
    int v22 = *(_DWORD *)a2 + v21;
    int v23 = sub_40A8CC(v6, SHIDWORD(v21));
    sub_52058(*((void *)a2 + 1));
    if (v18 < v22 || (uint64_t result = 0, v18 == v22) && v19 > v23)
    {
      uint64_t v25 = *((void *)a2 + 6);
      long long v27 = a2[1];
      long long v26 = a2[2];
      long long v28 = *a2;
      long long v30 = a3[1];
      long long v29 = a3[2];
      long long v31 = *a3;
      *((void *)a2 + 6) = *((void *)a3 + 6);
      a2[1] = v30;
      a2[2] = v29;
      *a2 = v31;
      *a3 = v28;
      a3[1] = v27;
      a3[2] = v26;
      *((void *)a3 + 6) = v25;
      signed int v32 = *((_DWORD *)a2 + 4) <= *((_DWORD *)a2 + 5) ? *((_DWORD *)a2 + 5) : *((_DWORD *)a2 + 4);
      unint64_t v33 = sub_3F8970(*((char ***)a2 + 1), v32);
      int v34 = *(_DWORD *)a2 + v33;
      int v35 = sub_40A8CC(v6, SHIDWORD(v33));
      sub_52058(*((void *)a2 + 1));
      signed int v36 = *((_DWORD *)a1 + 4) <= *((_DWORD *)a1 + 5) ? *((_DWORD *)a1 + 5) : *((_DWORD *)a1 + 4);
      unint64_t v37 = sub_3F8970(*((char ***)a1 + 1), v36);
      int v38 = *(_DWORD *)a1 + v37;
      int v39 = sub_40A8CC((int *)a1 + 5, SHIDWORD(v37));
      sub_52058(*((void *)a1 + 1));
      if (v34 < v38 || (uint64_t result = 1, v34 == v38) && v35 > v39)
      {
        uint64_t v40 = *((void *)a1 + 6);
        long long v42 = a1[1];
        long long v41 = a1[2];
        long long v43 = *a1;
        long long v45 = a2[1];
        long long v44 = a2[2];
        long long v46 = *a2;
        *((void *)a1 + 6) = *((void *)a2 + 6);
        a1[1] = v45;
        a1[2] = v44;
        *a1 = v46;
        *a2 = v43;
        a2[1] = v42;
        a2[2] = v41;
        uint64_t result = 2;
        *((void *)a2 + 6) = v40;
      }
    }
  }
  else
  {
    if (*((_DWORD *)a3 + 4) <= *((_DWORD *)a3 + 5)) {
      signed int v47 = *((_DWORD *)a3 + 5);
    }
    else {
      signed int v47 = *((_DWORD *)a3 + 4);
    }
    unint64_t v48 = sub_3F8970(*((char ***)a3 + 1), v47);
    int v49 = *(_DWORD *)a3 + v48;
    int v50 = sub_40A8CC((int *)a3 + 5, SHIDWORD(v48));
    sub_52058(*((void *)a3 + 1));
    if (*((_DWORD *)a2 + 4) <= *((_DWORD *)a2 + 5)) {
      signed int v51 = *((_DWORD *)a2 + 5);
    }
    else {
      signed int v51 = *((_DWORD *)a2 + 4);
    }
    unint64_t v52 = sub_3F8970(*((char ***)a2 + 1), v51);
    int v53 = *(_DWORD *)a2 + v52;
    int v54 = sub_40A8CC(v6, SHIDWORD(v52));
    sub_52058(*((void *)a2 + 1));
    if (v49 < v53 || v49 == v53 && v50 > v54)
    {
      uint64_t v55 = *((void *)a1 + 6);
      long long v57 = a1[1];
      long long v56 = a1[2];
      long long v58 = *a1;
      long long v60 = a3[1];
      long long v59 = a3[2];
      long long v61 = *a3;
      *((void *)a1 + 6) = *((void *)a3 + 6);
      a1[1] = v60;
      a1[2] = v59;
      *a1 = v61;
      *a3 = v58;
      a3[1] = v57;
      a3[2] = v56;
      uint64_t result = 1;
LABEL_52:
      *((void *)a3 + 6) = v55;
      return result;
    }
    uint64_t v62 = *((void *)a1 + 6);
    long long v64 = a1[1];
    long long v63 = a1[2];
    long long v65 = *a1;
    long long v67 = a2[1];
    long long v66 = a2[2];
    long long v68 = *a2;
    *((void *)a1 + 6) = *((void *)a2 + 6);
    a1[1] = v67;
    a1[2] = v66;
    *a1 = v68;
    *a2 = v65;
    a2[1] = v64;
    a2[2] = v63;
    *((void *)a2 + 6) = v62;
    if (*((_DWORD *)a3 + 4) <= *((_DWORD *)a3 + 5)) {
      signed int v69 = *((_DWORD *)a3 + 5);
    }
    else {
      signed int v69 = *((_DWORD *)a3 + 4);
    }
    unint64_t v70 = sub_3F8970(*((char ***)a3 + 1), v69);
    int v71 = *(_DWORD *)a3 + v70;
    int v72 = sub_40A8CC((int *)a3 + 5, SHIDWORD(v70));
    sub_52058(*((void *)a3 + 1));
    if (*((_DWORD *)a2 + 4) <= *((_DWORD *)a2 + 5)) {
      signed int v73 = *((_DWORD *)a2 + 5);
    }
    else {
      signed int v73 = *((_DWORD *)a2 + 4);
    }
    unint64_t v74 = sub_3F8970(*((char ***)a2 + 1), v73);
    int v75 = *(_DWORD *)a2 + v74;
    int v76 = sub_40A8CC(v6, SHIDWORD(v74));
    sub_52058(*((void *)a2 + 1));
    if (v71 < v75 || (uint64_t result = 1, v71 == v75) && v72 > v76)
    {
      uint64_t v55 = *((void *)a2 + 6);
      long long v78 = a2[1];
      long long v77 = a2[2];
      long long v79 = *a2;
      long long v81 = a3[1];
      long long v80 = a3[2];
      long long v82 = *a3;
      *((void *)a2 + 6) = *((void *)a3 + 6);
      a2[1] = v81;
      a2[2] = v80;
      *a2 = v82;
      *a3 = v79;
      a3[1] = v78;
      a3[2] = v77;
      uint64_t result = 2;
      goto LABEL_52;
    }
  }
  return result;
}

int *sub_FEE23C(int *a1, unint64_t a2)
{
  long long v80 = *(_OWORD *)a1;
  long long v81 = *((_OWORD *)a1 + 1);
  long long v82 = *((_OWORD *)a1 + 2);
  uint64_t v83 = *((void *)a1 + 6);
  if ((int)v81 <= SDWORD1(v81)) {
    signed int v4 = DWORD1(v81);
  }
  else {
    signed int v4 = v81;
  }
  unint64_t v5 = sub_3F8970(*((char ***)&v80 + 1), v4);
  int v6 = v80 + v5;
  int v7 = sub_40A8CC((int *)&v81 + 1, SHIDWORD(v5));
  sub_52058(*((uint64_t *)&v80 + 1));
  if (*(_DWORD *)(a2 - 40) <= *(_DWORD *)(a2 - 36)) {
    signed int v8 = *(_DWORD *)(a2 - 36);
  }
  else {
    signed int v8 = *(_DWORD *)(a2 - 40);
  }
  unint64_t v9 = sub_3F8970(*(char ***)(a2 - 48), v8);
  int v10 = *(_DWORD *)(a2 - 56) + v9;
  int v11 = sub_40A8CC((int *)(a2 - 36), SHIDWORD(v9));
  sub_52058(*(void *)(a2 - 48));
  if (v6 >= v10 && (v6 == v10 ? (BOOL v12 = v7 <= v11) : (BOOL v12 = 1), v12))
  {
    int v13 = a1 + 19;
    do
    {
      int v14 = v13 - 5;
      if ((unint64_t)(v13 - 5) >= a2) {
        break;
      }
      signed int v15 = (int)v81 <= SDWORD1(v81) ? DWORD1(v81) : v81;
      unint64_t v16 = sub_3F8970(*((char ***)&v80 + 1), v15);
      int v17 = v80 + v16;
      int v18 = sub_40A8CC((int *)&v81 + 1, SHIDWORD(v16));
      sub_52058(*((uint64_t *)&v80 + 1));
      signed int v19 = *(v13 - 1) <= *v13 ? *v13 : *(v13 - 1);
      unint64_t v20 = sub_3F8970(*(char ***)(v13 - 3), v19);
      int v21 = *(v13 - 5) + v20;
      int v22 = sub_40A8CC(v13, SHIDWORD(v20));
      sub_52058(*(void *)(v13 - 3));
      if (v17 < v21) {
        break;
      }
      v13 += 14;
    }
    while (v17 != v21 || v18 <= v22);
    if ((unint64_t)v14 >= a2) {
      goto LABEL_79;
    }
  }
  else
  {
    signed int v24 = a1 + 19;
    do
    {
      uint64_t v25 = v24;
      if ((int)v81 <= SDWORD1(v81)) {
        signed int v26 = DWORD1(v81);
      }
      else {
        signed int v26 = v81;
      }
      unint64_t v27 = sub_3F8970(*((char ***)&v80 + 1), v26);
      int v28 = v80 + v27;
      int v29 = sub_40A8CC((int *)&v81 + 1, SHIDWORD(v27));
      sub_52058(*((uint64_t *)&v80 + 1));
      if (*(v25 - 1) <= *v25) {
        signed int v30 = *v25;
      }
      else {
        signed int v30 = *(v25 - 1);
      }
      unint64_t v31 = sub_3F8970(*(char ***)(v25 - 3), v30);
      int v32 = *(v25 - 5) + v31;
      int v33 = sub_40A8CC(v25, SHIDWORD(v31));
      sub_52058(*(void *)(v25 - 3));
      if (v28 < v32) {
        break;
      }
      signed int v24 = v25 + 14;
    }
    while (v28 != v32 || v29 <= v33);
    int v14 = v25 - 5;
    if ((unint64_t)v14 >= a2) {
      goto LABEL_79;
    }
  }
  do
  {
    a2 -= 56;
    if ((int)v81 <= SDWORD1(v81)) {
      signed int v35 = DWORD1(v81);
    }
    else {
      signed int v35 = v81;
    }
    unint64_t v36 = sub_3F8970(*((char ***)&v80 + 1), v35);
    int v37 = v80 + v36;
    int v38 = sub_40A8CC((int *)&v81 + 1, SHIDWORD(v36));
    sub_52058(*((uint64_t *)&v80 + 1));
    if (*(_DWORD *)(a2 + 16) <= *(_DWORD *)(a2 + 20)) {
      signed int v39 = *(_DWORD *)(a2 + 20);
    }
    else {
      signed int v39 = *(_DWORD *)(a2 + 16);
    }
    unint64_t v40 = sub_3F8970(*(char ***)(a2 + 8), v39);
    int v41 = *(_DWORD *)a2 + v40;
    int v42 = sub_40A8CC((int *)(a2 + 20), SHIDWORD(v40));
    sub_52058(*(void *)(a2 + 8));
  }
  while (v37 < v41 || v37 == v41 && v38 > v42);
LABEL_79:
  while ((unint64_t)v14 < a2)
  {
    long long v44 = *(_OWORD *)v14;
    long long v45 = *((_OWORD *)v14 + 1);
    long long v46 = *((_OWORD *)v14 + 2);
    uint64_t v87 = *((void *)v14 + 6);
    long long v85 = v45;
    long long v86 = v46;
    long long v84 = v44;
    long long v47 = *(_OWORD *)a2;
    long long v48 = *(_OWORD *)(a2 + 16);
    long long v49 = *(_OWORD *)(a2 + 32);
    *((void *)v14 + 6) = *(void *)(a2 + 48);
    *((_OWORD *)v14 + 1) = v48;
    *((_OWORD *)v14 + 2) = v49;
    *(_OWORD *)int v14 = v47;
    long long v50 = v84;
    long long v51 = v85;
    long long v52 = v86;
    *(void *)(a2 + 48) = v87;
    *(_OWORD *)(a2 + 16) = v51;
    *(_OWORD *)(a2 + 32) = v52;
    *(_OWORD *)a2 = v50;
    int v53 = v14 + 19;
    do
    {
      int v54 = v53;
      if ((int)v81 <= SDWORD1(v81)) {
        signed int v55 = DWORD1(v81);
      }
      else {
        signed int v55 = v81;
      }
      unint64_t v56 = sub_3F8970(*((char ***)&v80 + 1), v55);
      int v57 = v80 + v56;
      int v58 = sub_40A8CC((int *)&v81 + 1, SHIDWORD(v56));
      sub_52058(*((uint64_t *)&v80 + 1));
      if (*(v54 - 1) <= *v54) {
        signed int v59 = *v54;
      }
      else {
        signed int v59 = *(v54 - 1);
      }
      unint64_t v60 = sub_3F8970(*(char ***)(v54 - 3), v59);
      int v61 = *(v54 - 5) + v60;
      int v62 = sub_40A8CC(v54, SHIDWORD(v60));
      sub_52058(*(void *)(v54 - 3));
      if (v57 < v61) {
        break;
      }
      int v53 = v54 + 14;
    }
    while (v57 != v61 || v58 <= v62);
    int v14 = v54 - 5;
    do
    {
      a2 -= 56;
      if ((int)v81 <= SDWORD1(v81)) {
        signed int v64 = DWORD1(v81);
      }
      else {
        signed int v64 = v81;
      }
      unint64_t v65 = sub_3F8970(*((char ***)&v80 + 1), v64);
      int v66 = v80 + v65;
      int v67 = sub_40A8CC((int *)&v81 + 1, SHIDWORD(v65));
      sub_52058(*((uint64_t *)&v80 + 1));
      if (*(_DWORD *)(a2 + 16) <= *(_DWORD *)(a2 + 20)) {
        signed int v68 = *(_DWORD *)(a2 + 20);
      }
      else {
        signed int v68 = *(_DWORD *)(a2 + 16);
      }
      unint64_t v69 = sub_3F8970(*(char ***)(a2 + 8), v68);
      int v70 = *(_DWORD *)a2 + v69;
      int v71 = sub_40A8CC((int *)(a2 + 20), SHIDWORD(v69));
      sub_52058(*(void *)(a2 + 8));
    }
    while (v66 < v70 || v66 == v70 && v67 > v71);
  }
  signed int v73 = v14 - 14;
  if (v14 - 14 != a1)
  {
    long long v74 = *(_OWORD *)v73;
    long long v75 = *(_OWORD *)(v14 - 10);
    long long v76 = *(_OWORD *)(v14 - 6);
    *((void *)a1 + 6) = *((void *)v14 - 1);
    *((_OWORD *)a1 + 1) = v75;
    *((_OWORD *)a1 + 2) = v76;
    *(_OWORD *)a1 = v74;
  }
  long long v77 = v81;
  long long v78 = v82;
  *((void *)v14 - 1) = v83;
  *(_OWORD *)(v14 - 10) = v77;
  *(_OWORD *)(v14 - 6) = v78;
  *(_OWORD *)signed int v73 = v80;
  return v14;
}

int *sub_FEE674(int *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  long long v77 = *(_OWORD *)a1;
  long long v78 = *((_OWORD *)a1 + 1);
  long long v79 = *((_OWORD *)a1 + 2);
  uint64_t v80 = *((void *)a1 + 6);
  while (1)
  {
    signed int v5 = a1[v4 + 18] <= a1[v4 + 19] ? a1[v4 + 19] : a1[v4 + 18];
    unint64_t v6 = sub_3F8970(*(char ***)&a1[v4 + 16], v5);
    int v7 = a1[v4 + 14] + v6;
    int v8 = sub_40A8CC(&a1[v4 + 19], SHIDWORD(v6));
    sub_52058(*(void *)&a1[v4 + 16]);
    signed int v9 = (int)v78 <= SDWORD1(v78) ? DWORD1(v78) : v78;
    unint64_t v10 = sub_3F8970(*((char ***)&v77 + 1), v9);
    int v11 = v77 + v10;
    int v12 = sub_40A8CC((int *)&v78 + 1, SHIDWORD(v10));
    sub_52058(*((uint64_t *)&v77 + 1));
    if (v7 >= v11 && (v7 != v11 || v8 <= v12)) {
      break;
    }
    v4 += 14;
  }
  int v14 = &a1[v4];
  unint64_t v15 = (unint64_t)&a1[v4 + 14];
  unint64_t v16 = a2 - 56;
  if (v4 * 4)
  {
    do
    {
      unint64_t v17 = v16;
      signed int v19 = (int *)(v16 + 20);
      signed int v18 = *(_DWORD *)(v16 + 20);
      if (*(_DWORD *)(v17 + 16) <= v18) {
        signed int v20 = v18;
      }
      else {
        signed int v20 = *(_DWORD *)(v17 + 16);
      }
      unint64_t v21 = sub_3F8970(*(char ***)(v17 + 8), v20);
      int v22 = *(_DWORD *)v17 + v21;
      int v23 = sub_40A8CC(v19, SHIDWORD(v21));
      sub_52058(*(void *)(v17 + 8));
      if ((int)v78 <= SDWORD1(v78)) {
        signed int v24 = DWORD1(v78);
      }
      else {
        signed int v24 = v78;
      }
      unint64_t v25 = sub_3F8970(*((char ***)&v77 + 1), v24);
      int v26 = v77 + v25;
      int v27 = sub_40A8CC((int *)&v78 + 1, SHIDWORD(v25));
      sub_52058(*((uint64_t *)&v77 + 1));
      if (v22 < v26) {
        break;
      }
      unint64_t v16 = v17 - 56;
    }
    while (v22 != v26 || v23 <= v27);
  }
  else
  {
    while (1)
    {
      unint64_t v17 = v16;
      unint64_t v38 = v16 + 56;
      if (v15 >= v38) {
        break;
      }
      if (*(_DWORD *)(v17 + 16) <= *(_DWORD *)(v17 + 20)) {
        signed int v29 = *(_DWORD *)(v17 + 20);
      }
      else {
        signed int v29 = *(_DWORD *)(v17 + 16);
      }
      unint64_t v30 = sub_3F8970(*(char ***)(v17 + 8), v29);
      int v31 = *(_DWORD *)v17 + v30;
      int v32 = sub_40A8CC((int *)(v17 + 20), SHIDWORD(v30));
      sub_52058(*(void *)(v17 + 8));
      if ((int)v78 <= SDWORD1(v78)) {
        signed int v33 = DWORD1(v78);
      }
      else {
        signed int v33 = v78;
      }
      unint64_t v34 = sub_3F8970(*((char ***)&v77 + 1), v33);
      int v35 = v77 + v34;
      int v36 = sub_40A8CC((int *)&v78 + 1, SHIDWORD(v34));
      sub_52058(*((uint64_t *)&v77 + 1));
      if (v31 >= v35)
      {
        unint64_t v16 = v17 - 56;
        if (v31 != v35 || v32 <= v36) {
          continue;
        }
      }
      goto LABEL_42;
    }
    unint64_t v17 = v38;
  }
LABEL_42:
  if (v15 < v17)
  {
    unint64_t v39 = v17;
    do
    {
      long long v40 = *(_OWORD *)v15;
      long long v41 = *(_OWORD *)(v15 + 16);
      long long v42 = *(_OWORD *)(v15 + 32);
      uint64_t v84 = *(void *)(v15 + 48);
      long long v82 = v41;
      long long v83 = v42;
      long long v81 = v40;
      long long v43 = *(_OWORD *)v39;
      long long v44 = *(_OWORD *)(v39 + 16);
      long long v45 = *(_OWORD *)(v39 + 32);
      *(void *)(v15 + 48) = *(void *)(v39 + 48);
      *(_OWORD *)(v15 + 16) = v44;
      *(_OWORD *)(v15 + 32) = v45;
      *(_OWORD *)unint64_t v15 = v43;
      long long v46 = v81;
      long long v47 = v82;
      long long v48 = v83;
      *(void *)(v39 + 48) = v84;
      *(_OWORD *)(v39 + 16) = v47;
      *(_OWORD *)(v39 + 32) = v48;
      *(_OWORD *)unint64_t v39 = v46;
      for (uint64_t i = (int *)(v15 + 76); ; i += 14)
      {
        signed int v50 = *(i - 1) <= *i ? *i : *(i - 1);
        unint64_t v51 = sub_3F8970(*(char ***)(i - 3), v50);
        int v52 = *(i - 5) + v51;
        int v53 = sub_40A8CC(i, SHIDWORD(v51));
        sub_52058(*(void *)(i - 3));
        signed int v54 = (int)v78 <= SDWORD1(v78) ? DWORD1(v78) : v78;
        unint64_t v55 = sub_3F8970(*((char ***)&v77 + 1), v54);
        int v56 = v77 + v55;
        int v57 = sub_40A8CC((int *)&v78 + 1, SHIDWORD(v55));
        sub_52058(*((uint64_t *)&v77 + 1));
        if (v52 >= v56 && (v52 != v56 || v53 <= v57)) {
          break;
        }
      }
      unint64_t v15 = (unint64_t)(i - 5);
      unint64_t v59 = v39 - 56;
      do
      {
        unint64_t v39 = v59;
        int v61 = (int *)(v59 + 20);
        signed int v60 = *(_DWORD *)(v59 + 20);
        if (*(_DWORD *)(v39 + 16) <= v60) {
          signed int v62 = v60;
        }
        else {
          signed int v62 = *(_DWORD *)(v39 + 16);
        }
        unint64_t v63 = sub_3F8970(*(char ***)(v39 + 8), v62);
        int v64 = *(_DWORD *)v39 + v63;
        int v65 = sub_40A8CC(v61, SHIDWORD(v63));
        sub_52058(*(void *)(v39 + 8));
        if ((int)v78 <= SDWORD1(v78)) {
          signed int v66 = DWORD1(v78);
        }
        else {
          signed int v66 = v78;
        }
        unint64_t v67 = sub_3F8970(*((char ***)&v77 + 1), v66);
        int v68 = v77 + v67;
        int v69 = sub_40A8CC((int *)&v78 + 1, SHIDWORD(v67));
        sub_52058(*((uint64_t *)&v77 + 1));
        if (v64 < v68) {
          break;
        }
        unint64_t v59 = v39 - 56;
      }
      while (v64 != v68 || v65 <= v69);
    }
    while (v15 < v39);
    int v14 = i - 19;
  }
  if (v14 != a1)
  {
    long long v71 = *(_OWORD *)v14;
    long long v72 = *((_OWORD *)v14 + 1);
    long long v73 = *((_OWORD *)v14 + 2);
    *((void *)a1 + 6) = *((void *)v14 + 6);
    *((_OWORD *)a1 + 1) = v72;
    *((_OWORD *)a1 + 2) = v73;
    *(_OWORD *)a1 = v71;
  }
  long long v74 = v78;
  long long v75 = v79;
  *((void *)v14 + 6) = v80;
  *((_OWORD *)v14 + 1) = v74;
  *((_OWORD *)v14 + 2) = v75;
  *(_OWORD *)int v14 = v77;
  return v14;
}

BOOL sub_FEEA74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 40) <= *(_DWORD *)(a2 - 36)) {
        signed int v6 = *(_DWORD *)(a2 - 36);
      }
      else {
        signed int v6 = *(_DWORD *)(a2 - 40);
      }
      unint64_t v7 = sub_3F8970(*(char ***)(v2 - 48), v6);
      int v8 = (long long *)(v2 - 56);
      int v9 = *(_DWORD *)(v2 - 56) + v7;
      int v10 = sub_40A8CC((int *)(v2 - 36), SHIDWORD(v7));
      sub_52058(*(void *)(v2 - 48));
      if (*(_DWORD *)(a1 + 16) <= *(_DWORD *)(a1 + 20)) {
        signed int v11 = *(_DWORD *)(a1 + 20);
      }
      else {
        signed int v11 = *(_DWORD *)(a1 + 16);
      }
      unint64_t v12 = sub_3F8970(*(char ***)(a1 + 8), v11);
      int v13 = *(_DWORD *)a1 + v12;
      int v14 = sub_40A8CC((int *)(a1 + 20), SHIDWORD(v12));
      sub_52058(*(void *)(a1 + 8));
      if (v9 >= v13 && (v9 != v13 || v10 <= v14)) {
        return 1;
      }
      uint64_t v16 = *(void *)(a1 + 48);
      long long v18 = *(_OWORD *)(a1 + 16);
      long long v17 = *(_OWORD *)(a1 + 32);
      long long v19 = *(_OWORD *)a1;
      long long v21 = *(_OWORD *)(v2 - 40);
      long long v20 = *(_OWORD *)(v2 - 24);
      long long v22 = *v8;
      *(void *)(a1 + 48) = *(void *)(v2 - 8);
      *(_OWORD *)(a1 + 16) = v21;
      *(_OWORD *)(a1 + 32) = v20;
      *(_OWORD *)a1 = v22;
      *int v8 = v19;
      *(_OWORD *)(v2 - 40) = v18;
      *(_OWORD *)(v2 - 24) = v17;
      BOOL result = 1;
      *(void *)(v2 - 8) = v16;
      return result;
    case 3:
      sub_FEDE58((long long *)a1, (long long *)(a1 + 56), (long long *)(a2 - 56));
      return 1;
    case 4:
      sub_FEEE68(a1, a1 + 56, a1 + 112, (long long *)(a2 - 56));
      return 1;
    case 5:
      sub_FEF0E4(a1, a1 + 56, a1 + 112, a1 + 168, (long long *)(a2 - 56));
      return 1;
    default:
      uint64_t v23 = a1 + 112;
      sub_FEDE58((long long *)a1, (long long *)(a1 + 56), (long long *)(a1 + 112));
      uint64_t v24 = a1 + 168;
      if (a1 + 168 == v2) {
        return 1;
      }
      uint64_t v25 = 0;
      int v26 = 0;
      uint64_t v52 = v2;
      break;
  }
  while (1)
  {
    signed int v29 = *(_DWORD *)(v24 + 16) <= *(_DWORD *)(v24 + 20) ? *(_DWORD *)(v24 + 20) : *(_DWORD *)(v24 + 16);
    unint64_t v30 = sub_3F8970(*(char ***)(v24 + 8), v29);
    int v31 = *(_DWORD *)v24 + v30;
    int v32 = sub_40A8CC((int *)(v24 + 20), SHIDWORD(v30));
    sub_52058(*(void *)(v24 + 8));
    signed int v33 = *(_DWORD *)(v23 + 16) <= *(_DWORD *)(v23 + 20) ? *(_DWORD *)(v23 + 20) : *(_DWORD *)(v23 + 16);
    unint64_t v34 = sub_3F8970(*(char ***)(v23 + 8), v33);
    int v35 = *(_DWORD *)v23 + v34;
    int v36 = sub_40A8CC((int *)(v23 + 20), SHIDWORD(v34));
    sub_52058(*(void *)(v23 + 8));
    if (v31 < v35 || (v31 == v35 ? (BOOL v37 = v32 <= v36) : (BOOL v37 = 1), !v37))
    {
      long long v55 = *(_OWORD *)v24;
      long long v56 = *(_OWORD *)(v24 + 16);
      long long v57 = *(_OWORD *)(v24 + 32);
      uint64_t v58 = *(void *)(v24 + 48);
      long long v38 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v23;
      *(_OWORD *)(v24 + 16) = v38;
      *(_OWORD *)(v24 + 32) = *(_OWORD *)(v23 + 32);
      *(void *)(v24 + 48) = *(void *)(v23 + 48);
      uint64_t v27 = a1;
      if (v23 != a1)
      {
        int v53 = v26;
        uint64_t v54 = v25;
        uint64_t v39 = v25;
        while (1)
        {
          uint64_t v41 = a1 + v39;
          signed int v42 = (int)v56 <= SDWORD1(v56) ? DWORD1(v56) : v56;
          unint64_t v43 = sub_3F8970(*((char ***)&v55 + 1), v42);
          int v44 = v43;
          int v45 = sub_40A8CC((int *)&v56 + 1, SHIDWORD(v43));
          sub_52058(*((uint64_t *)&v55 + 1));
          signed int v46 = *(_DWORD *)(v41 + 72) <= *(_DWORD *)(v41 + 76) ? *(_DWORD *)(v41 + 76) : *(_DWORD *)(v41 + 72);
          unint64_t v47 = sub_3F8970(*(char ***)(v41 + 64), v46);
          int v48 = v55 + v44;
          int v49 = *(_DWORD *)(v41 + 56) + v47;
          int v50 = sub_40A8CC((int *)(v41 + 76), SHIDWORD(v47));
          sub_52058(*(void *)(v41 + 64));
          if (v48 >= v49 && (v48 != v49 || v45 <= v50)) {
            break;
          }
          long long v40 = *(_OWORD *)(v41 + 72);
          *(_OWORD *)(v41 + 112) = *(_OWORD *)(v41 + 56);
          *(_OWORD *)(v41 + 128) = v40;
          *(_OWORD *)(v41 + 144) = *(_OWORD *)(v41 + 88);
          *(void *)(v41 + 160) = *(void *)(v41 + 104);
          v39 -= 56;
          if (v39 == -112)
          {
            uint64_t v27 = a1;
            goto LABEL_17;
          }
        }
        uint64_t v27 = a1 + v39 + 112;
LABEL_17:
        uint64_t v2 = v52;
        uint64_t v25 = v54;
        int v26 = v53;
      }
      long long v28 = v56;
      *(_OWORD *)uint64_t v27 = v55;
      *(_OWORD *)(v27 + 16) = v28;
      *(_OWORD *)(v27 + 32) = v57;
      *(void *)(v27 + 48) = v58;
      if (++v26 == 8) {
        return v24 + 56 == v2;
      }
    }
    uint64_t v23 = v24;
    v25 += 56;
    v24 += 56;
    if (v24 == v2) {
      return 1;
    }
  }
}

__n128 sub_FEEE68(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  sub_FEDE58((long long *)a1, (long long *)a2, (long long *)a3);
  if (*((_DWORD *)a4 + 4) <= *((_DWORD *)a4 + 5)) {
    signed int v8 = *((_DWORD *)a4 + 5);
  }
  else {
    signed int v8 = *((_DWORD *)a4 + 4);
  }
  unint64_t v9 = sub_3F8970(*((char ***)a4 + 1), v8);
  int v10 = *(_DWORD *)a4 + v9;
  int v11 = sub_40A8CC((int *)a4 + 5, SHIDWORD(v9));
  sub_52058(*((void *)a4 + 1));
  if (*(_DWORD *)(a3 + 16) <= *(_DWORD *)(a3 + 20)) {
    signed int v12 = *(_DWORD *)(a3 + 20);
  }
  else {
    signed int v12 = *(_DWORD *)(a3 + 16);
  }
  unint64_t v13 = sub_3F8970(*(char ***)(a3 + 8), v12);
  int v14 = *(_DWORD *)a3 + v13;
  int v15 = sub_40A8CC((int *)(a3 + 20), SHIDWORD(v13));
  sub_52058(*(void *)(a3 + 8));
  if (v10 < v14 || (v10 == v14 ? (BOOL v17 = v11 <= v15) : (BOOL v17 = 1), !v17))
  {
    uint64_t v18 = *(void *)(a3 + 48);
    long long v20 = *(_OWORD *)(a3 + 16);
    long long v19 = *(_OWORD *)(a3 + 32);
    long long v21 = *(_OWORD *)a3;
    long long v23 = a4[1];
    long long v22 = a4[2];
    long long v24 = *a4;
    *(void *)(a3 + 48) = *((void *)a4 + 6);
    *(_OWORD *)(a3 + 16) = v23;
    *(_OWORD *)(a3 + 32) = v22;
    *(_OWORD *)a3 = v24;
    *a4 = v21;
    a4[1] = v20;
    a4[2] = v19;
    *((void *)a4 + 6) = v18;
    if (*(_DWORD *)(a3 + 16) <= *(_DWORD *)(a3 + 20)) {
      signed int v25 = *(_DWORD *)(a3 + 20);
    }
    else {
      signed int v25 = *(_DWORD *)(a3 + 16);
    }
    unint64_t v26 = sub_3F8970(*(char ***)(a3 + 8), v25);
    int v27 = *(_DWORD *)a3 + v26;
    int v28 = sub_40A8CC((int *)(a3 + 20), SHIDWORD(v26));
    sub_52058(*(void *)(a3 + 8));
    if (*(_DWORD *)(a2 + 16) <= *(_DWORD *)(a2 + 20)) {
      signed int v29 = *(_DWORD *)(a2 + 20);
    }
    else {
      signed int v29 = *(_DWORD *)(a2 + 16);
    }
    unint64_t v30 = sub_3F8970(*(char ***)(a2 + 8), v29);
    int v31 = *(_DWORD *)a2 + v30;
    int v32 = sub_40A8CC((int *)(a2 + 20), SHIDWORD(v30));
    sub_52058(*(void *)(a2 + 8));
    if (v27 < v31 || v27 == v31 && v28 > v32)
    {
      uint64_t v33 = *(void *)(a2 + 48);
      long long v35 = *(_OWORD *)(a2 + 16);
      long long v34 = *(_OWORD *)(a2 + 32);
      long long v36 = *(_OWORD *)a2;
      long long v38 = *(_OWORD *)(a3 + 16);
      long long v37 = *(_OWORD *)(a3 + 32);
      long long v39 = *(_OWORD *)a3;
      *(void *)(a2 + 48) = *(void *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v38;
      *(_OWORD *)(a2 + 32) = v37;
      *(_OWORD *)a2 = v39;
      *(_OWORD *)a3 = v36;
      *(_OWORD *)(a3 + 16) = v35;
      *(_OWORD *)(a3 + 32) = v34;
      *(void *)(a3 + 48) = v33;
      if (*(_DWORD *)(a2 + 16) <= *(_DWORD *)(a2 + 20)) {
        signed int v40 = *(_DWORD *)(a2 + 20);
      }
      else {
        signed int v40 = *(_DWORD *)(a2 + 16);
      }
      unint64_t v41 = sub_3F8970(*(char ***)(a2 + 8), v40);
      int v42 = *(_DWORD *)a2 + v41;
      int v43 = sub_40A8CC((int *)(a2 + 20), SHIDWORD(v41));
      sub_52058(*(void *)(a2 + 8));
      if (*(_DWORD *)(a1 + 16) <= *(_DWORD *)(a1 + 20)) {
        signed int v44 = *(_DWORD *)(a1 + 20);
      }
      else {
        signed int v44 = *(_DWORD *)(a1 + 16);
      }
      unint64_t v45 = sub_3F8970(*(char ***)(a1 + 8), v44);
      int v46 = *(_DWORD *)a1 + v45;
      int v47 = sub_40A8CC((int *)(a1 + 20), SHIDWORD(v45));
      sub_52058(*(void *)(a1 + 8));
      if (v42 < v46 || v42 == v46 && v43 > v47)
      {
        uint64_t v48 = *(void *)(a1 + 48);
        long long v49 = *(_OWORD *)(a1 + 16);
        __n128 result = *(__n128 *)(a1 + 32);
        long long v50 = *(_OWORD *)a1;
        long long v52 = *(_OWORD *)(a2 + 16);
        long long v51 = *(_OWORD *)(a2 + 32);
        long long v53 = *(_OWORD *)a2;
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(_OWORD *)(a1 + 16) = v52;
        *(_OWORD *)(a1 + 32) = v51;
        *(_OWORD *)a1 = v53;
        *(_OWORD *)a2 = v50;
        *(_OWORD *)(a2 + 16) = v49;
        *(__n128 *)(a2 + 32) = result;
        *(void *)(a2 + 48) = v48;
      }
    }
  }
  return result;
}

__n128 sub_FEF0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  sub_FEEE68(a1, a2, a3, (long long *)a4);
  if (*((_DWORD *)a5 + 4) <= *((_DWORD *)a5 + 5)) {
    signed int v10 = *((_DWORD *)a5 + 5);
  }
  else {
    signed int v10 = *((_DWORD *)a5 + 4);
  }
  unint64_t v11 = sub_3F8970(*((char ***)a5 + 1), v10);
  int v12 = *(_DWORD *)a5 + v11;
  int v13 = sub_40A8CC((int *)a5 + 5, SHIDWORD(v11));
  sub_52058(*((void *)a5 + 1));
  if (*(_DWORD *)(a4 + 16) <= *(_DWORD *)(a4 + 20)) {
    signed int v14 = *(_DWORD *)(a4 + 20);
  }
  else {
    signed int v14 = *(_DWORD *)(a4 + 16);
  }
  unint64_t v15 = sub_3F8970(*(char ***)(a4 + 8), v14);
  int v16 = *(_DWORD *)a4 + v15;
  int v17 = sub_40A8CC((int *)(a4 + 20), SHIDWORD(v15));
  sub_52058(*(void *)(a4 + 8));
  if (v12 < v16 || (v12 == v16 ? (BOOL v19 = v13 <= v17) : (BOOL v19 = 1), !v19))
  {
    uint64_t v20 = *(void *)(a4 + 48);
    long long v22 = *(_OWORD *)(a4 + 16);
    long long v21 = *(_OWORD *)(a4 + 32);
    long long v23 = *(_OWORD *)a4;
    long long v25 = a5[1];
    long long v24 = a5[2];
    long long v26 = *a5;
    *(void *)(a4 + 48) = *((void *)a5 + 6);
    *(_OWORD *)(a4 + 16) = v25;
    *(_OWORD *)(a4 + 32) = v24;
    *(_OWORD *)a4 = v26;
    *a5 = v23;
    a5[1] = v22;
    a5[2] = v21;
    *((void *)a5 + 6) = v20;
    if (*(_DWORD *)(a4 + 16) <= *(_DWORD *)(a4 + 20)) {
      signed int v27 = *(_DWORD *)(a4 + 20);
    }
    else {
      signed int v27 = *(_DWORD *)(a4 + 16);
    }
    unint64_t v28 = sub_3F8970(*(char ***)(a4 + 8), v27);
    int v29 = *(_DWORD *)a4 + v28;
    int v30 = sub_40A8CC((int *)(a4 + 20), SHIDWORD(v28));
    sub_52058(*(void *)(a4 + 8));
    if (*(_DWORD *)(a3 + 16) <= *(_DWORD *)(a3 + 20)) {
      signed int v31 = *(_DWORD *)(a3 + 20);
    }
    else {
      signed int v31 = *(_DWORD *)(a3 + 16);
    }
    unint64_t v32 = sub_3F8970(*(char ***)(a3 + 8), v31);
    int v33 = *(_DWORD *)a3 + v32;
    int v34 = sub_40A8CC((int *)(a3 + 20), SHIDWORD(v32));
    sub_52058(*(void *)(a3 + 8));
    if (v29 < v33 || v29 == v33 && v30 > v34)
    {
      uint64_t v35 = *(void *)(a3 + 48);
      long long v37 = *(_OWORD *)(a3 + 16);
      long long v36 = *(_OWORD *)(a3 + 32);
      long long v38 = *(_OWORD *)a3;
      long long v40 = *(_OWORD *)(a4 + 16);
      long long v39 = *(_OWORD *)(a4 + 32);
      long long v41 = *(_OWORD *)a4;
      *(void *)(a3 + 48) = *(void *)(a4 + 48);
      *(_OWORD *)(a3 + 16) = v40;
      *(_OWORD *)(a3 + 32) = v39;
      *(_OWORD *)a3 = v41;
      *(_OWORD *)a4 = v38;
      *(_OWORD *)(a4 + 16) = v37;
      *(_OWORD *)(a4 + 32) = v36;
      *(void *)(a4 + 48) = v35;
      signed int v42 = *(_DWORD *)(a3 + 16) <= *(_DWORD *)(a3 + 20) ? *(_DWORD *)(a3 + 20) : *(_DWORD *)(a3 + 16);
      unint64_t v43 = sub_3F8970(*(char ***)(a3 + 8), v42);
      int v44 = *(_DWORD *)a3 + v43;
      int v45 = sub_40A8CC((int *)(a3 + 20), SHIDWORD(v43));
      sub_52058(*(void *)(a3 + 8));
      signed int v46 = *(_DWORD *)(a2 + 16) <= *(_DWORD *)(a2 + 20) ? *(_DWORD *)(a2 + 20) : *(_DWORD *)(a2 + 16);
      unint64_t v47 = sub_3F8970(*(char ***)(a2 + 8), v46);
      int v48 = *(_DWORD *)a2 + v47;
      int v49 = sub_40A8CC((int *)(a2 + 20), SHIDWORD(v47));
      sub_52058(*(void *)(a2 + 8));
      if (v44 < v48 || v44 == v48 && v45 > v49)
      {
        uint64_t v50 = *(void *)(a2 + 48);
        long long v52 = *(_OWORD *)(a2 + 16);
        long long v51 = *(_OWORD *)(a2 + 32);
        long long v53 = *(_OWORD *)a2;
        long long v55 = *(_OWORD *)(a3 + 16);
        long long v54 = *(_OWORD *)(a3 + 32);
        long long v56 = *(_OWORD *)a3;
        *(void *)(a2 + 48) = *(void *)(a3 + 48);
        *(_OWORD *)(a2 + 16) = v55;
        *(_OWORD *)(a2 + 32) = v54;
        *(_OWORD *)a2 = v56;
        *(_OWORD *)a3 = v53;
        *(_OWORD *)(a3 + 16) = v52;
        *(_OWORD *)(a3 + 32) = v51;
        *(void *)(a3 + 48) = v50;
        if (*(_DWORD *)(a2 + 16) <= *(_DWORD *)(a2 + 20)) {
          signed int v57 = *(_DWORD *)(a2 + 20);
        }
        else {
          signed int v57 = *(_DWORD *)(a2 + 16);
        }
        unint64_t v58 = sub_3F8970(*(char ***)(a2 + 8), v57);
        int v59 = *(_DWORD *)a2 + v58;
        int v60 = sub_40A8CC((int *)(a2 + 20), SHIDWORD(v58));
        sub_52058(*(void *)(a2 + 8));
        if (*(_DWORD *)(a1 + 16) <= *(_DWORD *)(a1 + 20)) {
          signed int v61 = *(_DWORD *)(a1 + 20);
        }
        else {
          signed int v61 = *(_DWORD *)(a1 + 16);
        }
        unint64_t v62 = sub_3F8970(*(char ***)(a1 + 8), v61);
        int v63 = *(_DWORD *)a1 + v62;
        int v64 = sub_40A8CC((int *)(a1 + 20), SHIDWORD(v62));
        sub_52058(*(void *)(a1 + 8));
        if (v59 < v63 || v59 == v63 && v60 > v64)
        {
          uint64_t v65 = *(void *)(a1 + 48);
          long long v66 = *(_OWORD *)(a1 + 16);
          __n128 result = *(__n128 *)(a1 + 32);
          long long v67 = *(_OWORD *)a1;
          long long v69 = *(_OWORD *)(a2 + 16);
          long long v68 = *(_OWORD *)(a2 + 32);
          long long v70 = *(_OWORD *)a2;
          *(void *)(a1 + 48) = *(void *)(a2 + 48);
          *(_OWORD *)(a1 + 16) = v69;
          *(_OWORD *)(a1 + 32) = v68;
          *(_OWORD *)a1 = v70;
          *(_OWORD *)a2 = v67;
          *(_OWORD *)(a2 + 16) = v66;
          *(__n128 *)(a2 + 32) = result;
          *(void *)(a2 + 48) = v65;
        }
      }
    }
  }
  return result;
}

__n128 sub_FEF418(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v69 = v4;
    uint64_t v70 = v5;
    unint64_t v7 = a4;
    int64_t v64 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - a1) >> 3))
    {
      int64_t v9 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3)) | 1;
      signed int v10 = (int *)(a1 + 56 * v9);
      int64_t v11 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v11 < a3)
      {
        signed int v12 = v10[4] <= v10[5] ? v10[5] : v10[4];
        unint64_t v13 = sub_3F8970(*((char ***)v10 + 1), v12);
        int v14 = v13;
        int v62 = *v10;
        int v15 = sub_40A8CC(v10 + 5, SHIDWORD(v13));
        sub_52058(*((void *)v10 + 1));
        signed int v16 = v10[18] <= v10[19] ? v10[19] : v10[18];
        unint64_t v17 = sub_3F8970(*((char ***)v10 + 8), v16);
        int v18 = v62 + v14;
        int v19 = v10[14] + v17;
        int v20 = sub_40A8CC(v10 + 19, SHIDWORD(v17));
        sub_52058(*((void *)v10 + 8));
        if (v18 < v19 || (v18 == v19 ? (BOOL v21 = v15 <= v20) : (BOOL v21 = 1), !v21))
        {
          v10 += 14;
          int64_t v9 = v11;
        }
      }
      if (v10[4] <= v10[5]) {
        signed int v22 = v10[5];
      }
      else {
        signed int v22 = v10[4];
      }
      unint64_t v23 = sub_3F8970(*((char ***)v10 + 1), v22);
      int v24 = *v10 + v23;
      int v25 = sub_40A8CC(v10 + 5, SHIDWORD(v23));
      sub_52058(*((void *)v10 + 1));
      if (v7[4] <= v7[5]) {
        signed int v26 = v7[5];
      }
      else {
        signed int v26 = v7[4];
      }
      unint64_t v27 = sub_3F8970(*((char ***)v7 + 1), v26);
      int v28 = *v7 + v27;
      int v29 = sub_40A8CC(v7 + 5, SHIDWORD(v27));
      sub_52058(*((void *)v7 + 1));
      BOOL v31 = v24 == v28;
      BOOL v21 = v24 < v28;
      uint64_t v32 = a1;
      if (!v21 && (!v31 || v25 <= v29))
      {
        __n128 v65 = *(__n128 *)v7;
        long long v66 = *((_OWORD *)v7 + 1);
        long long v67 = *((_OWORD *)v7 + 2);
        uint64_t v68 = *((void *)v7 + 6);
        do
        {
          int v34 = v10;
          long long v35 = *(_OWORD *)v10;
          long long v36 = *((_OWORD *)v10 + 1);
          long long v37 = *((_OWORD *)v10 + 2);
          *((void *)v7 + 6) = *((void *)v10 + 6);
          *((_OWORD *)v7 + 1) = v36;
          *((_OWORD *)v7 + 2) = v37;
          *(_OWORD *)unint64_t v7 = v35;
          if (v64 < v9) {
            break;
          }
          uint64_t v38 = 2 * v9;
          int64_t v9 = (2 * v9) | 1;
          signed int v10 = (int *)(v32 + 56 * v9);
          int64_t v39 = v38 + 2;
          if (v38 + 2 < a3)
          {
            signed int v40 = v10[4] <= v10[5] ? v10[5] : v10[4];
            unint64_t v41 = sub_3F8970(*((char ***)v10 + 1), v40);
            int v42 = v41;
            int v43 = *v10;
            int v61 = sub_40A8CC(v10 + 5, SHIDWORD(v41));
            sub_52058(*((void *)v10 + 1));
            signed int v44 = v10[18] <= v10[19] ? v10[19] : v10[18];
            unint64_t v45 = sub_3F8970(*((char ***)v10 + 8), v44);
            int v46 = v43 + v42;
            int v47 = v10[14] + v45;
            uint64_t v32 = a1;
            int v48 = sub_40A8CC(v10 + 19, SHIDWORD(v45));
            sub_52058(*((void *)v10 + 8));
            if (v46 < v47 || (v46 == v47 ? (BOOL v49 = v61 <= v48) : (BOOL v49 = 1), !v49))
            {
              v10 += 14;
              int64_t v9 = v39;
            }
          }
          signed int v50 = v10[4] <= v10[5] ? v10[5] : v10[4];
          unint64_t v51 = sub_3F8970(*((char ***)v10 + 1), v50);
          int v52 = *v10 + v51;
          int v53 = sub_40A8CC(v10 + 5, SHIDWORD(v51));
          sub_52058(*((void *)v10 + 1));
          signed int v54 = (int)v66 <= SDWORD1(v66) ? DWORD1(v66) : v66;
          unint64_t v55 = sub_3F8970((char **)v65.n128_u64[1], v54);
          int v56 = v65.n128_u32[0] + v55;
          int v57 = sub_40A8CC((int *)&v66 + 1, SHIDWORD(v55));
          sub_52058(v65.n128_i64[1]);
          if (v52 < v56) {
            break;
          }
          BOOL v58 = v52 != v56 || v53 <= v57;
          unint64_t v7 = v34;
        }
        while (v58);
        __n128 result = v65;
        long long v59 = v66;
        long long v60 = v67;
        *((void *)v34 + 6) = v68;
        *((_OWORD *)v34 + 1) = v59;
        *((_OWORD *)v34 + 2) = v60;
        *(__n128 *)int v34 = v65;
      }
    }
  }
  return result;
}

int *sub_FEF798(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = a3 - 2;
  if (a3 < 2) {
    uint64_t v5 = a3 - 1;
  }
  uint64_t v6 = v5 >> 1;
  uint64_t v25 = v5 >> 1;
  uint64_t v26 = a3;
  do
  {
    signed int v10 = a1;
    a1 += 14 * v4 + 14;
    uint64_t v11 = 2 * v4;
    uint64_t v4 = (2 * v4) | 1;
    uint64_t v12 = v11 + 2;
    if (v11 + 2 < a3)
    {
      signed int v13 = a1[4] <= a1[5] ? a1[5] : a1[4];
      unint64_t v14 = sub_3F8970(*((char ***)a1 + 1), v13);
      int v15 = v14;
      int v16 = *a1;
      int v17 = sub_40A8CC(a1 + 5, SHIDWORD(v14));
      sub_52058(*((void *)a1 + 1));
      signed int v18 = a1[18] <= a1[19] ? a1[19] : a1[18];
      unint64_t v19 = sub_3F8970(*((char ***)a1 + 8), v18);
      int v20 = v16 + v15;
      int v21 = a1[14] + v19;
      int v22 = sub_40A8CC(a1 + 19, SHIDWORD(v19));
      sub_52058(*((void *)a1 + 8));
      uint64_t v6 = v25;
      a3 = v26;
      if (v20 < v21 || (v20 == v21 ? (BOOL v23 = v17 <= v22) : (BOOL v23 = 1), !v23))
      {
        a1 += 14;
        uint64_t v4 = v12;
      }
    }
    long long v7 = *(_OWORD *)a1;
    long long v8 = *((_OWORD *)a1 + 1);
    long long v9 = *((_OWORD *)a1 + 2);
    *((void *)v10 + 6) = *((void *)a1 + 6);
    *((_OWORD *)v10 + 1) = v8;
    *((_OWORD *)v10 + 2) = v9;
    *(_OWORD *)signed int v10 = v7;
  }
  while (v4 <= v6);
  return a1;
}

__n128 sub_FEF8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    long long v8 = (int *)(a1 + 56 * (v4 >> 1));
    signed int v9 = v8[4] <= v8[5] ? v8[5] : v8[4];
    unint64_t v10 = sub_3F8970(*((char ***)v8 + 1), v9);
    int v11 = v10;
    int v12 = *v8;
    int v40 = sub_40A8CC(v8 + 5, SHIDWORD(v10));
    sub_52058(*((void *)v8 + 1));
    signed int v13 = *(_DWORD *)(a2 - 40) <= *(_DWORD *)(a2 - 36) ? *(_DWORD *)(a2 - 36) : *(_DWORD *)(a2 - 40);
    unint64_t v14 = sub_3F8970(*(char ***)(a2 - 48), v13);
    int v15 = (__n128 *)(a2 - 56);
    int v16 = v12 + v11;
    int v17 = *(_DWORD *)(a2 - 56) + v14;
    int v18 = sub_40A8CC((int *)(a2 - 36), SHIDWORD(v14));
    sub_52058(*(void *)(a2 - 48));
    if (v16 < v17 || (v16 == v17 ? (BOOL v20 = v40 <= v18) : (BOOL v20 = 1), !v20))
    {
      __n128 v41 = *v15;
      __n128 v42 = *(__n128 *)(a2 - 40);
      __n128 v43 = *(__n128 *)(a2 - 24);
      unint64_t v44 = *(void *)(a2 - 8);
      long long v22 = *((_OWORD *)v8 + 1);
      long long v21 = *((_OWORD *)v8 + 2);
      __n128 v23 = *(__n128 *)v8;
      *(void *)(a2 - 8) = *((void *)v8 + 6);
      *(_OWORD *)(a2 - 40) = v22;
      *(_OWORD *)(a2 - 24) = v21;
      *int v15 = v23;
      if (v4 >= 2)
      {
        while (1)
        {
          unint64_t v27 = v7 - 1;
          unint64_t v7 = (v7 - 1) >> 1;
          int v28 = (__n128 *)(a1 + 56 * v7);
          signed int v29 = (signed __int32)v28[1].n128_u32[0] <= (signed __int32)v28[1].n128_u32[1]
              ? v28[1].n128_u32[1]
              : v28[1].n128_u32[0];
          unint64_t v30 = sub_3F8970((char **)v28->n128_u64[1], v29);
          int v31 = v28->n128_u32[0] + v30;
          int v32 = sub_40A8CC(&v28[1].n128_i32[1], SHIDWORD(v30));
          sub_52058(v28->n128_i64[1]);
          signed int v33 = v42.n128_i32[0] <= v42.n128_i32[1] ? v42.n128_u32[1] : v42.n128_u32[0];
          unint64_t v34 = sub_3F8970((char **)v41.n128_u64[1], v33);
          int v35 = v41.n128_u32[0] + v34;
          int v36 = sub_40A8CC(&v42.n128_i32[1], SHIDWORD(v34));
          sub_52058(v41.n128_i64[1]);
          if (v31 >= v35 && (v31 != v35 || v32 <= v36)) {
            break;
          }
          __n128 v24 = *v28;
          __n128 v25 = v28[1];
          __n128 v26 = v28[2];
          *((void *)v8 + 6) = v28[3].n128_u64[0];
          *((__n128 *)v8 + 1) = v25;
          *((__n128 *)v8 + 2) = v26;
          *(__n128 *)long long v8 = v24;
          long long v8 = (int *)(a1 + 56 * v7);
          if (v27 <= 1) {
            goto LABEL_29;
          }
        }
      }
      int v28 = (__n128 *)v8;
LABEL_29:
      __n128 result = v41;
      __n128 v38 = v42;
      __n128 v39 = v43;
      v28[3].n128_u64[0] = v44;
      v28[1] = v38;
      v28[2] = v39;
      *int v28 = v41;
    }
  }
  return result;
}

unsigned int **sub_FEFAF8(unsigned int **result)
{
  uint64_t v1 = (uint64_t)*result;
  result[3][**result] = -1;
  int v2 = *((_DWORD *)result + 12);
  *((_DWORD *)result + 12) = v2 - 1;
  if (v2 != 1)
  {
    uint64_t v3 = v1 + 12 * (v2 - 1);
    *(_DWORD *)uint64_t v1 = *(_DWORD *)v3;
    *(void *)(v1 + 4) = *(void *)(v3 + 4);
    uint64_t v4 = (uint64_t)*result;
    result[3][**result] = 0;
    unsigned int v5 = *((_DWORD *)result + 12);
    if (v5 >= 2)
    {
      int v6 = 0;
      unsigned int v7 = 0;
      unsigned int v8 = 1;
      do
      {
        unsigned int v9 = v6 + 5;
        if (v9 >= v5) {
          unsigned int v10 = v5;
        }
        else {
          unsigned int v10 = v9;
        }
        if (v8 >= v10) {
          break;
        }
        uint64_t v11 = v4 + 12 * v7;
        unint64_t v14 = *(void *)(v11 + 4);
        int v12 = (void *)(v11 + 4);
        unint64_t v13 = v14;
        uint64_t v15 = v7;
        unint64_t v16 = HIDWORD(v14);
        int v17 = (int *)(v4 + 12 * v8 + 4);
        unsigned int v7 = -1;
        int v18 = v14;
        do
        {
          if (*v17 < v18 || *v17 == v18 && v17[1] > (int)v16)
          {
            int v18 = *v17;
            LODWORD(v16) = v17[1];
            unsigned int v7 = v8;
          }
          ++v8;
          v17 += 3;
        }
        while (v10 != v8);
        if (v7 >= v5) {
          break;
        }
        unint64_t v19 = (int *)(v4 + 12 * v7);
        uint64_t v20 = 12 * v15;
        int v21 = *v19;
        *unint64_t v19 = *(_DWORD *)(v4 + v20);
        *(_DWORD *)(v4 + v20) = v21;
        uint64_t v22 = *(void *)(v19 + 1);
        *(void *)(v19 + 1) = v13;
        *int v12 = v22;
        uint64_t v4 = (uint64_t)*result;
        __n128 v23 = result[3];
        uint64_t v24 = (*result)[3 * v7];
        uint64_t v25 = (*result)[(unint64_t)v20 / 4];
        unsigned int v26 = v23[v24];
        v23[v24] = v23[v25];
        v23[v25] = v26;
        int v6 = 4 * v7;
        unsigned int v8 = (4 * v7) | 1;
        unsigned int v5 = *((_DWORD *)result + 12);
      }
      while (v8 < v5);
    }
  }
  result[1] -= 3;
  return result;
}

uint64_t sub_FEFC50(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_FEA8D4(*(void **)a1, a2);
  unsigned int v10 = *(char ***)(result + 8);
  if (v10) {
    BOOL v11 = *(_DWORD *)(a3 + 36) == a2;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11)
  {
    if (*(_DWORD *)(a3 + 16) <= *(_DWORD *)(a3 + 20)) {
      signed int v12 = *(_DWORD *)(a3 + 20);
    }
    else {
      signed int v12 = *(_DWORD *)(a3 + 16);
    }
    unint64_t v13 = sub_3F8970(*(char ***)(a3 + 8), v12);
    int v14 = v13;
    unint64_t v16 = v15;
    unsigned int v17 = *(_DWORD *)a3;
    uint64_t v18 = sub_40A8CC((int *)(a3 + 20), SHIDWORD(v13));
    int v34 = *(_DWORD *)(a3 + 28);
    unsigned int v35 = *(_DWORD *)a3;
    unint64_t v19 = sub_52058(*(void *)(a3 + 8));
    sub_FE62EC((unsigned int *)a3, (uint64_t *)&v37);
    uint64_t v20 = v16;
    int v21 = v38;
    if (v38 != v20)
    {
      unint64_t v22 = (v17 + v14) | (unint64_t)(v18 << 32);
      __n128 v23 = v20 + 2;
      do
      {
        while (1)
        {
          unint64_t v39 = v22;
          unint64_t v24 = sub_FE5F98(a1 + 132, a3, (uint64_t)&v39, 0, 0, (void *)(a1 + 96));
          unint64_t v36 = v24 & 0xFFFFFFFF00000000 | v25;
          sub_FEFF18(a1, a2, v10, (int *)&v36, a3, a4);
          if ((unint64_t)v23 >= v19) {
            break;
          }
          unint64_t v22 = (*v23 + v35) | ((unint64_t)(v23[1] - v34) << 32);
          BOOL v11 = v23 == v21;
          v23 += 2;
          if (v11) {
            goto LABEL_14;
          }
        }
        unint64_t v22 = 0x7FFFFFFF7FFFFFFFLL;
        BOOL v11 = v23 == v21;
        v23 += 2;
      }
      while (!v11);
    }
LABEL_14:
    if (v37 != 0x7FFFFFFF && HIDWORD(v37) != 0x7FFFFFFF)
    {
      unint64_t v36 = v37;
      unint64_t v26 = sub_FE5F98(a1 + 132, a3, (uint64_t)&v36, 0, 0, (void *)(a1 + 96));
      unint64_t v39 = v26 & 0xFFFFFFFF00000000 | v27;
      sub_FEFF18(a1, a2, v10, (int *)&v39, a3, a4);
    }
    unint64_t v28 = sub_FE5E64(a1 + 132, a3, *(_DWORD *)(a1 + 136), 0x7FFFFFFF, 0x7FFFFFFF, 0, 0, (_DWORD *)(a1 + 96));
    unint64_t v39 = __PAIR64__(HIDWORD(v28), v29);
    sub_FEFF18(a1, a2, v10, (int *)&v39, a3, a4);
    unint64_t v30 = sub_FE5E64(a1 + 132, a3, *(_DWORD *)(a1 + 144), 0x7FFFFFFF, 0x7FFFFFFF, 0, 0, (_DWORD *)(a1 + 96));
    unint64_t v39 = __PAIR64__(HIDWORD(v30), v31);
    sub_FEFF18(a1, a2, v10, (int *)&v39, a3, a4);
    unint64_t v32 = sub_FE5E64(a1 + 132, a3, 0x7FFFFFFF, 0x7FFFFFFF, *(_DWORD *)(a1 + 152), 0, 0, (_DWORD *)(a1 + 96));
    unint64_t v39 = __PAIR64__(HIDWORD(v32), v33);
    return sub_FEFF18(a1, a2, v10, (int *)&v39, a3, a4);
  }
  return result;
}

uint64_t sub_FEFF18(uint64_t a1, unsigned int a2, char **a3, int *a4, uint64_t a5, uint64_t a6)
{
  int v12 = *a4;
  int v11 = a4[1];
  uint64_t result = sub_3F88E0((uint64_t)a3);
  if ((int)result >= v11)
  {
    int v14 = *(_DWORD *)(sub_FEA8D4(*(void **)a1, a2) + 16);
    int v15 = v12 + sub_FE6408(a1 + 132, a5);
    if (*(_DWORD *)(a5 + 32) == -1) {
      unsigned int v16 = a2;
    }
    else {
      unsigned int v16 = *(_DWORD *)(a5 + 32);
    }
    sub_40A2E4((uint64_t)v22, v11, (void *)(a1 + 96));
    int v17 = *(_DWORD *)(a1 + 164);
    signed int v18 = sub_4F44((unsigned int *)v22);
    int v19 = sub_3F8970(a3, v18);
    int v23 = v14 + v15 + sub_3F88D4((unsigned int **)a3) - v19;
    unint64_t v24 = a3;
    int v25 = sub_4F44((unsigned int *)v22) + v17;
    uint64_t v32 = sub_40A454((uint64_t)v22);
    uint64_t v26 = sub_40A674((uint64_t)&v32);
    int v27 = v20;
    unsigned int v28 = v16;
    int v21 = *(_DWORD *)(a6 + 24) - 1;
    unsigned int v29 = a2;
    int v30 = v21;
    uint64_t v31 = 0;
    sub_FE5C2C(v22);
    return sub_FEC424(a6, (uint64_t)&v23, (int *)v22);
  }
  return result;
}

uint64_t *sub_FF0044(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unsigned int v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      int v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v13 = v11[1];
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == v7) {
                return v11;
              }
            }
            else if ((v13 & (v8 - 1)) != v4)
            {
              goto LABEL_23;
            }
            int v11 = (uint64_t *)*v11;
            if (!v11) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
            if (v12 != v4) {
              break;
            }
          }
          int v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
    }
  }
LABEL_23:
  int v15 = operator new(0x20uLL);
  *int v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = **a4;
  *(void *)((char *)v15 + 20) = 0x7FFFFFFF00000000;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    unint64_t v7 = v4;
  }
  else
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (prime > v8) {
      goto LABEL_36;
    }
    if (prime < v8)
    {
      unint64_t v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
      {
        unint64_t v22 = std::__next_prime(v22);
      }
      else
      {
        uint64_t v24 = 1 << -(char)__clz(v22 - 1);
        if (v22 >= 2) {
          unint64_t v22 = v24;
        }
      }
      if (prime <= v22) {
        size_t prime = v22;
      }
      if (prime < v8) {
LABEL_36:
      }
        sub_B6C0(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        v7 %= v8;
      }
    }
    else
    {
      unint64_t v7 = (v8 - 1) & v7;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v7);
  if (v26)
  {
    *int v15 = *v26;
LABEL_59:
    void *v26 = v15;
    goto LABEL_60;
  }
  *int v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v25 + 8 * v7) = a1 + 16;
  if (*v15)
  {
    unint64_t v27 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v27 >= v8) {
        v27 %= v8;
      }
    }
    else
    {
      v27 &= v8 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_FF0340(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_FF0354()
{
  unk_25FD2DF = 16641;
  word_25FD2C8 = 65;
  byte_25FD2F7 = 1;
  byte_25FD2E1 = 0;
}

void sub_FF037C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int *a4@<X3>, int a5@<W4>, void *a6@<X5>, void *a7@<X6>, void *a8@<X7>, char **a9@<X8>, void *a10)
{
  LODWORD(v13) = a2;
  sub_47E0E4(a9);
  unint64_t v88 = a9;
  float v17 = (uint64_t *)nullsub_1(v16);
  std::string __p = 0;
  char v99 = 0;
  uint64_t v100 = 0;
  uint64_t v18 = *(unsigned int *)(a3 + 36);
  uint64_t v19 = *(void *)(a3 + 8);
  if (v19 == a1 + 104) {
    char v20 = 3;
  }
  else {
    char v20 = 2;
  }
  if (*(_DWORD *)(a3 + 32) == -1) {
    char v21 = v20;
  }
  else {
    char v21 = 0;
  }
  if (a5) {
    unsigned __int8 v22 = 2;
  }
  else {
    unsigned __int8 v22 = 3;
  }
  unint64_t v97 = *(unsigned int **)(a3 + 48);
  int v23 = *(_DWORD *)(a3 + 16);
  if (v19 == a1 + 104)
  {
    uint64_t v24 = (void *)(a1 + 96);
  }
  else
  {
    uint64_t v24 = (void *)(a1 + 96);
    v23 -= *(_DWORD *)(a1 + 164);
    if (v23 <= *(_DWORD *)(a1 + 96)) {
      int v23 = *(_DWORD *)(a1 + 96);
    }
  }
  uint64_t v25 = *(unsigned int *)(a3 + 40);
  sub_40A2E4((uint64_t)&v101, v23, v24);
  uint64_t v95 = v101;
  int v96 = DWORD2(v101);
  if (sub_FE5C78(a4))
  {
    sub_40A2E4((uint64_t)&v101, *a4, (void *)(a1 + 96));
  }
  else
  {
    int v26 = sub_FE6054((int *)(a1 + 132), a3, v21, v22, (_DWORD *)(a1 + 96));
    sub_40A2E4((uint64_t)&v101, v26, (void *)(a1 + 96));
  }
  uint64_t v93 = v101;
  int v94 = DWORD2(v101);
  int v27 = sub_40AA28((int *)(a3 + 20), (unsigned int *)&v93);
  int v28 = 0x7FFFFFFF;
  if (v27 != 0x7FFFFFFF) {
    int v28 = sub_53FA4((uint64_t)&v93) + v27;
  }
  uint64_t v29 = v13;
  int v92 = 0;
  if (v18 != 0xFFFFFFFFLL)
  {
    int v46 = v97;
    do
    {
      uint64_t v13 = v18;
      uint64_t v48 = *(void *)(*(void *)(a1 + 72) + 32 * v18);
      if (v46)
      {
        BOOL v49 = sub_EC9098((uint64_t)a6, v18, v46, 0);
        if (v18 == v29) {
          goto LABEL_37;
        }
        if (v49)
        {
          if (__p != v99)
          {
            sub_FF0F74(v29, (unint64_t *)&__p, (uint64_t)a6, a7, a10, (uint64_t)&v101);
            unint64_t v50 = v17[1];
            if (v50 >= v17[2])
            {
              uint64_t v64 = sub_446BBC(v17, &v101);
            }
            else
            {
              long long v51 = v101;
              *(void *)(v50 + 16) = v102;
              *(void *)(v50 + 24) = 0;
              *(_OWORD *)unint64_t v50 = v51;
              uint64_t v102 = 0;
              long long v101 = 0uLL;
              *(void *)(v50 + 32) = 0;
              *(void *)(v50 + 40) = 0;
              *(_OWORD *)(v50 + 24) = v103;
              *(void *)(v50 + 40) = v104;
              long long v103 = 0uLL;
              uint64_t v104 = 0;
              long long v52 = v105;
              long long v53 = v106;
              long long v54 = v107[0];
              *(_OWORD *)(v50 + 94) = *(_OWORD *)((char *)v107 + 14);
              *(_OWORD *)(v50 + 64) = v53;
              *(_OWORD *)(v50 + 80) = v54;
              *(_OWORD *)(v50 + 48) = v52;
              *(void *)(v50 + 112) = 0;
              *(void *)(v50 + 120) = 0;
              *(void *)(v50 + 128) = 0;
              *(void *)(v50 + 136) = 0;
              *(_OWORD *)(v50 + 112) = v108;
              *(void *)(v50 + 128) = v109;
              long long v108 = 0uLL;
              uint64_t v109 = 0;
              *(void *)(v50 + 144) = 0;
              *(void *)(v50 + 152) = 0;
              *(_OWORD *)(v50 + 136) = v110;
              long long v110 = 0uLL;
              *(void *)(v50 + 152) = v111;
              *(void *)(v50 + 160) = 0;
              uint64_t v111 = 0;
              *(void *)(v50 + 168) = 0;
              *(void *)(v50 + 176) = 0;
              *(_OWORD *)(v50 + 160) = v112;
              *(void *)(v50 + 176) = v113;
              long long v112 = 0uLL;
              uint64_t v113 = 0;
              long long v55 = v114;
              uint64_t v56 = v116;
              *(_OWORD *)(v50 + 200) = v115;
              *(_OWORD *)(v50 + 184) = v55;
              *(void *)(v50 + 216) = v56;
              *(void *)(v50 + 224) = 0;
              *(void *)(v50 + 232) = 0;
              *(void *)(v50 + 240) = 0;
              *(_OWORD *)(v50 + 224) = v117;
              long long v117 = 0uLL;
              *(void *)(v50 + 240) = v118;
              *(void *)(v50 + 248) = 0;
              uint64_t v118 = 0;
              *(void *)(v50 + 256) = 0;
              *(void *)(v50 + 264) = 0;
              *(_OWORD *)(v50 + 248) = v119;
              *(void *)(v50 + 264) = v120;
              long long v119 = 0uLL;
              uint64_t v120 = 0;
              *(_OWORD *)(v50 + 272) = v121;
              *(_DWORD *)(v50 + 296) = v123;
              if (v123 <= 1) {
                *(void *)(v50 + 288) = v122;
              }
              *(_OWORD *)(v50 + 304) = v124;
              long long v57 = v130;
              long long v59 = v127;
              long long v58 = v128;
              *(_OWORD *)(v50 + 384) = v129;
              *(_OWORD *)(v50 + 400) = v57;
              *(_OWORD *)(v50 + 352) = v59;
              *(_OWORD *)(v50 + 368) = v58;
              long long v61 = v132;
              long long v60 = *(_OWORD *)v133;
              long long v62 = v131;
              *(void *)(v50 + 463) = *(void *)&v133[15];
              *(_OWORD *)(v50 + 432) = v61;
              *(_OWORD *)(v50 + 448) = v60;
              *(_OWORD *)(v50 + 416) = v62;
              long long v63 = v126;
              *(_OWORD *)(v50 + 320) = v125;
              *(_OWORD *)(v50 + 336) = v63;
              uint64_t v64 = v50 + 472;
            }
            v17[1] = v64;
            sub_405F44((uint64_t)&v101);
          }
          sub_EADD60(v17[1] - 472, &v92);
          goto LABEL_27;
        }
      }
      else if (v18 == v29)
      {
LABEL_37:
        __n128 v65 = (__int16 *)sub_FEA8D4(a6, v29);
        sub_FF0D6C(v65, (unsigned int *)&v95, (unsigned int *)&v93, v28, a8, (uint64_t)v134);
        sub_FF0F74(v29, (unint64_t *)&__p, (uint64_t)a6, a7, a10, (uint64_t)&v101);
        sub_EAFF7C((uint64_t)&v101, v134);
        unint64_t v66 = v17[1];
        if (v66 >= v17[2])
        {
          uint64_t v80 = sub_446BBC(v17, &v101);
        }
        else
        {
          long long v67 = v101;
          *(void *)(v66 + 16) = v102;
          *(void *)(v66 + 24) = 0;
          *(_OWORD *)unint64_t v66 = v67;
          uint64_t v102 = 0;
          long long v101 = 0uLL;
          *(void *)(v66 + 32) = 0;
          *(void *)(v66 + 40) = 0;
          *(_OWORD *)(v66 + 24) = v103;
          *(void *)(v66 + 40) = v104;
          long long v103 = 0uLL;
          uint64_t v104 = 0;
          long long v68 = v105;
          long long v69 = v106;
          long long v70 = v107[0];
          *(_OWORD *)(v66 + 94) = *(_OWORD *)((char *)v107 + 14);
          *(_OWORD *)(v66 + 64) = v69;
          *(_OWORD *)(v66 + 80) = v70;
          *(_OWORD *)(v66 + 48) = v68;
          *(void *)(v66 + 112) = 0;
          *(void *)(v66 + 120) = 0;
          *(void *)(v66 + 128) = 0;
          *(void *)(v66 + 136) = 0;
          *(_OWORD *)(v66 + 112) = v108;
          *(void *)(v66 + 128) = v109;
          long long v108 = 0uLL;
          uint64_t v109 = 0;
          *(void *)(v66 + 144) = 0;
          *(void *)(v66 + 152) = 0;
          *(_OWORD *)(v66 + 136) = v110;
          long long v110 = 0uLL;
          *(void *)(v66 + 152) = v111;
          *(void *)(v66 + 160) = 0;
          uint64_t v111 = 0;
          *(void *)(v66 + 168) = 0;
          *(void *)(v66 + 176) = 0;
          *(_OWORD *)(v66 + 160) = v112;
          *(void *)(v66 + 176) = v113;
          long long v112 = 0uLL;
          uint64_t v113 = 0;
          long long v71 = v114;
          uint64_t v72 = v116;
          *(_OWORD *)(v66 + 200) = v115;
          *(_OWORD *)(v66 + 184) = v71;
          *(void *)(v66 + 216) = v72;
          *(void *)(v66 + 224) = 0;
          *(void *)(v66 + 232) = 0;
          *(void *)(v66 + 240) = 0;
          *(_OWORD *)(v66 + 224) = v117;
          long long v117 = 0uLL;
          *(void *)(v66 + 240) = v118;
          *(void *)(v66 + 248) = 0;
          uint64_t v118 = 0;
          *(void *)(v66 + 256) = 0;
          *(void *)(v66 + 264) = 0;
          *(_OWORD *)(v66 + 248) = v119;
          *(void *)(v66 + 264) = v120;
          long long v119 = 0uLL;
          uint64_t v120 = 0;
          *(_OWORD *)(v66 + 272) = v121;
          *(_DWORD *)(v66 + 296) = v123;
          if (v123 <= 1) {
            *(void *)(v66 + 288) = v122;
          }
          *(_OWORD *)(v66 + 304) = v124;
          long long v73 = v130;
          long long v75 = v127;
          long long v74 = v128;
          *(_OWORD *)(v66 + 384) = v129;
          *(_OWORD *)(v66 + 400) = v73;
          *(_OWORD *)(v66 + 352) = v75;
          *(_OWORD *)(v66 + 368) = v74;
          long long v77 = v132;
          long long v76 = *(_OWORD *)v133;
          long long v78 = v131;
          *(void *)(v66 + 463) = *(void *)&v133[15];
          *(_OWORD *)(v66 + 432) = v77;
          *(_OWORD *)(v66 + 448) = v76;
          *(_OWORD *)(v66 + 416) = v78;
          long long v79 = v126;
          *(_OWORD *)(v66 + 320) = v125;
          *(_OWORD *)(v66 + 336) = v79;
          uint64_t v80 = v66 + 472;
        }
        v17[1] = v80;
        sub_405F44((uint64_t)&v101);
        if (v137)
        {
          int v138 = v137;
          operator delete(v137);
        }
        if (v135)
        {
          unint64_t v136 = v135;
          operator delete(v135);
        }
        uint64_t v81 = v48 + 56 * v25;
        uint64_t v93 = sub_FF1288(v81, (unsigned int *)&v95);
        int v94 = v82;
        int v83 = sub_40AA28((int *)(v81 + 20), (unsigned int *)&v93);
        int v28 = 0x7FFFFFFF;
        if (v83 != 0x7FFFFFFF) {
          int v28 = sub_53FA4((uint64_t)&v93) + v83;
        }
        int v84 = *(_DWORD *)(v81 + 16);
        if (*(void *)(v81 + 8) != a1 + 104)
        {
          v84 -= *(_DWORD *)(a1 + 164);
          if (v84 <= *(_DWORD *)(a1 + 96)) {
            int v84 = *(_DWORD *)(a1 + 96);
          }
        }
        sub_40A2E4((uint64_t)&v101, v84, (void *)(a1 + 96));
        uint64_t v95 = v101;
        int v96 = DWORD2(v101);
        goto LABEL_27;
      }
      sub_29603C(&__p, &v97);
LABEL_27:
      uint64_t v47 = v48 + 56 * v25;
      uint64_t v18 = *(unsigned int *)(v47 + 36);
      int v46 = *(unsigned int **)(v47 + 48);
      unint64_t v97 = v46;
      uint64_t v25 = *(unsigned int *)(v47 + 40);
      uint64_t v29 = v13;
    }
    while (v18 != -1);
  }
  if (__p != v99)
  {
    int v30 = (__int16 *)sub_FEA8D4(a6, v13);
    sub_FF0D6C(v30, (unsigned int *)&v95, (unsigned int *)&v93, v28, a8, (uint64_t)v134);
    sub_FF0F74(v13, (unint64_t *)&__p, (uint64_t)a6, a7, a10, (uint64_t)&v101);
    sub_EADD60((uint64_t)&v101, &v92);
    sub_EAFF7C((uint64_t)&v101, v134);
    unint64_t v31 = v17[1];
    if (v31 >= v17[2])
    {
      uint64_t v45 = sub_446BBC(v17, &v101);
    }
    else
    {
      long long v32 = v101;
      *(void *)(v31 + 16) = v102;
      *(void *)(v31 + 24) = 0;
      *(_OWORD *)unint64_t v31 = v32;
      long long v101 = 0uLL;
      *(void *)(v31 + 32) = 0;
      *(void *)(v31 + 40) = 0;
      *(_OWORD *)(v31 + 24) = v103;
      *(void *)(v31 + 40) = v104;
      uint64_t v102 = 0;
      long long v103 = 0uLL;
      uint64_t v104 = 0;
      long long v33 = v105;
      long long v34 = v106;
      long long v35 = v107[0];
      *(_OWORD *)(v31 + 94) = *(_OWORD *)((char *)v107 + 14);
      *(_OWORD *)(v31 + 64) = v34;
      *(_OWORD *)(v31 + 80) = v35;
      *(_OWORD *)(v31 + 48) = v33;
      *(void *)(v31 + 112) = 0;
      *(void *)(v31 + 120) = 0;
      *(void *)(v31 + 128) = 0;
      *(void *)(v31 + 136) = 0;
      *(_OWORD *)(v31 + 112) = v108;
      *(void *)(v31 + 128) = v109;
      long long v108 = 0uLL;
      *(void *)(v31 + 144) = 0;
      *(void *)(v31 + 152) = 0;
      *(_OWORD *)(v31 + 136) = v110;
      *(void *)(v31 + 152) = v111;
      *(void *)(v31 + 160) = 0;
      uint64_t v109 = 0;
      long long v110 = 0uLL;
      uint64_t v111 = 0;
      *(void *)(v31 + 168) = 0;
      *(void *)(v31 + 176) = 0;
      *(_OWORD *)(v31 + 160) = v112;
      *(void *)(v31 + 176) = v113;
      long long v112 = 0uLL;
      uint64_t v113 = 0;
      long long v36 = v114;
      uint64_t v37 = v116;
      *(_OWORD *)(v31 + 200) = v115;
      *(_OWORD *)(v31 + 184) = v36;
      *(void *)(v31 + 216) = v37;
      *(void *)(v31 + 224) = 0;
      *(void *)(v31 + 232) = 0;
      *(void *)(v31 + 240) = 0;
      *(_OWORD *)(v31 + 224) = v117;
      long long v117 = 0uLL;
      *(void *)(v31 + 240) = v118;
      *(void *)(v31 + 248) = 0;
      *(void *)(v31 + 256) = 0;
      *(void *)(v31 + 264) = 0;
      *(_OWORD *)(v31 + 248) = v119;
      *(void *)(v31 + 264) = v120;
      uint64_t v118 = 0;
      long long v119 = 0uLL;
      uint64_t v120 = 0;
      *(_OWORD *)(v31 + 272) = v121;
      *(_DWORD *)(v31 + 296) = v123;
      if (v123 <= 1) {
        *(void *)(v31 + 288) = v122;
      }
      *(_OWORD *)(v31 + 304) = v124;
      long long v38 = v130;
      long long v40 = v127;
      long long v39 = v128;
      *(_OWORD *)(v31 + 384) = v129;
      *(_OWORD *)(v31 + 400) = v38;
      *(_OWORD *)(v31 + 352) = v40;
      *(_OWORD *)(v31 + 368) = v39;
      long long v42 = v132;
      long long v41 = *(_OWORD *)v133;
      long long v43 = v131;
      *(void *)(v31 + 463) = *(void *)&v133[15];
      *(_OWORD *)(v31 + 432) = v42;
      *(_OWORD *)(v31 + 448) = v41;
      *(_OWORD *)(v31 + 416) = v43;
      long long v44 = v126;
      *(_OWORD *)(v31 + 320) = v125;
      *(_OWORD *)(v31 + 336) = v44;
      uint64_t v45 = v31 + 472;
    }
    v17[1] = v45;
    sub_405F44((uint64_t)&v101);
    if (v137)
    {
      int v138 = v137;
      operator delete(v137);
    }
    if (v135)
    {
      unint64_t v136 = v135;
      operator delete(v135);
    }
  }
  unint64_t v86 = *v17;
  uint64_t v85 = v17[1];
  if (*v17 != v85)
  {
    uint64_t v87 = (long long *)(v85 - 472);
    if (v85 - 472 > v86)
    {
      do
      {
        sub_FF1414(v86, v87);
        v86 += 472;
        uint64_t v87 = (long long *)((char *)v87 - 472);
      }
      while (v86 < (unint64_t)v87);
    }
  }
  sub_FF133C(v88);
  if (__p)
  {
    char v99 = __p;
    operator delete(__p);
  }
}

void sub_FF0CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,char a35)
{
  sub_45E914((void *)(v35 - 232));
  if (__p) {
    operator delete(__p);
  }
  sub_405E28(a9);
  _Unwind_Resume(a1);
}

double sub_FF0D6C@<D0>(__int16 *a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, int a4@<W3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  if (*a1 == -1)
  {
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 96) = 0u;
    *(void *)(a6 + 112) = 0;
    *(_DWORD *)a6 = 0x7FFFFFFF;
    *(_DWORD *)(a6 + 8) = 0x7FFFFFFF;
    *(void *)(a6 + 12) = 0x7FFFFFFF7FFFFFFFLL;
    *(void *)(a6 + 32) = 0x8000000080000000;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 56) = 0u;
    *(_OWORD *)(a6 + 72) = 0u;
    *(unsigned char *)(a6 + 88) = 0;
    *(void *)(a6 + 92) = 0x8000000080000000;
    *(_DWORD *)(a6 + 100) = 0x7FFFFFFF;
    *(_DWORD *)(a6 + 112) = -1;
    double result = 0.0;
    *(_OWORD *)(a6 + 120) = xmmword_20E8160;
  }
  else
  {
    unsigned int v10 = a2;
    unint64_t v12 = (char **)*((void *)a1 + 1);
    signed int v13 = sub_4F44(a2);
    signed int v14 = sub_4F44(a3);
    LODWORD(v12) = sub_3F8AF8(v12, v13, v14);
    LOWORD(v13) = *a1;
    uint64_t v15 = sub_40B954((uint64_t)a5, *a1);
    LODWORD(v10) = sub_4F44(v10);
    signed int v16 = sub_4F44(a3);
    sub_40B9FC(a5, v13, (signed int)v10, v16, (uint64_t *)&v25);
    sub_40C21C((uint64_t)a5, v13, (uint64_t *)&v23);
    sub_3FB100((uint64_t)&v21, (uint64_t *)a3, 0);
    *(unsigned char *)(a6 + 91) = 0;
    *(_WORD *)(a6 + 89) = 0;
    uint64_t v17 = *(void *)(v15 + 52);
    *(_DWORD *)a6 = v12;
    *(_OWORD *)(a6 + 8) = v21;
    *(void *)(a6 + 24) = v22;
    *(_DWORD *)(a6 + 32) = a4;
    *(_DWORD *)(a6 + 36) = v12;
    *(unsigned char *)(a6 + 88) = 0;
    *(void *)(a6 + 92) = 0x8000000080000000;
    *(_DWORD *)(a6 + 100) = 0x7FFFFFFF;
    *(_DWORD *)(a6 + 112) = 1;
    *(void *)(a6 + 104) = v17;
    *(_OWORD *)(a6 + 120) = *(_OWORD *)(v15 + 80);
    uint64_t v18 = v26;
    *(_OWORD *)(a6 + 40) = v25;
    *(void *)(a6 + 56) = v18;
    uint64_t v19 = v24;
    double result = *(double *)&v23;
    *(_OWORD *)(a6 + 64) = v23;
    *(void *)(a6 + 80) = v19;
  }
  return result;
}

void sub_FF0F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v19 = a17;
    if (!a17) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v19 = a17;
    if (!a17) {
      goto LABEL_3;
    }
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

void sub_FF0F74(unsigned int a1@<W0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9 = sub_3750CC(a5);
  unint64_t v10 = *a2;
  unint64_t v11 = a2[1];
  unint64_t v12 = (void *)(v11 - 8);
  if (*a2 != v11 && (unint64_t)v12 > v10)
  {
    unint64_t v14 = v10 + 8;
    do
    {
      uint64_t v15 = *(void *)(v14 - 8);
      *(void *)(v14 - 8) = *v12;
      *v12-- = v15;
      BOOL v16 = v14 >= (unint64_t)v12;
      v14 += 8;
    }
    while (!v16);
  }
  sub_EAFC08(a6);
  unint64_t v17 = *a2;
  unint64_t v18 = a2[1];
  if (*a2 != v18)
  {
    do
    {
      int v19 = *(_DWORD *)(*(void *)v17 + 32);
      uint64_t v20 = *(void *)(*(void *)v17 + 40);
      if (*(_DWORD *)(*(void *)v17 + 28) != v19 || v20 != 0)
      {
        do
        {
          while (1)
          {
            sub_EAFD8C(a6, (int **)(v20 + 8));
            unsigned int v22 = *(_DWORD *)v20;
            if (sub_EDBF4C(a4, *(_DWORD *)v20) == 1) {
              break;
            }
            uint64_t v20 = 0;
            if (v22 == v19) {
              goto LABEL_11;
            }
          }
          sub_EDBDF0(a4, v22, (uint64_t)&v39);
          uint64_t v20 = *(void *)v39 + 104 * v40;
        }
        while (v22 != v19);
      }
LABEL_11:
      v17 += 8;
    }
    while (v17 != v18);
  }
  long long v23 = (void *)sub_5231C(a6);
  if (*v23 == v23[1])
  {
    unint64_t v24 = sub_EDBFB0(a4, *(_DWORD *)(*(void *)*a2 + 28));
    unint64_t v25 = HIDWORD(v24) & 0xFFFF0000FFFFFFFFLL | ((unint64_t)WORD1(v24) << 32);
    uint64_t v26 = sub_2D5D58(v9, v25);
    if (*(unsigned char *)(v9 + 7772))
    {
      int v28 = sub_2DB8E0(v9 + 3896, HIDWORD(v24), 0);
      uint64_t v29 = &v28[-*(int *)v28];
      if (*(unsigned __int16 *)v29 < 5u)
      {
        uint64_t v30 = 0;
      }
      else
      {
        uint64_t v30 = *((unsigned __int16 *)v29 + 2);
        if (v30) {
          v30 += (uint64_t)&v28[*(unsigned int *)&v28[v30]];
        }
      }
      unint64_t v27 = (HIDWORD(v24) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v24) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v24 >> 1) & 1) << 48)) ^ 0x1000000000000;
      uint64_t v31 = v30 + 4 * WORD2(v27) + 4 + *(unsigned int *)(v30 + 4 * WORD2(v27) + 4);
    }
    else
    {
      uint64_t v31 = 0;
    }
    uint64_t v32 = sub_2E5C38(v9, v25, 1);
    *(void *)&long long v39 = v26;
    *((void *)&v39 + 1) = v31;
    uint64_t v40 = v32;
    uint64_t v41 = v33;
    int v42 = HIDWORD(v24);
    __int16 v43 = ((HIDWORD(v24) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v24) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v24 >> 1) & 1) << 48)) ^ 0x1000000000000) >> 32;
    char v44 = ((HIDWORD(v24) & 0xFFFE0000FFFFFFFFLL | ((unint64_t)WORD1(v24) << 32) & 0xFFFEFFFFFFFFFFFFLL | (((v24 >> 1) & 1) << 48)) ^ 0x1000000000000) >> 48;
    sub_EAFC44(a6, v24, &v39);
  }
  unsigned int v34 = **(_DWORD **)(a2[1] - 8);
  uint64_t v35 = sub_EB935C(a3, a1);
  uint64_t v36 = sub_EB935C(a3, v34);
  sub_EAD920(a6, v35 + 96);
  sub_EADAA8(a6, v36 + 16);
  a2[1] = *a2;
}

void sub_FF11FC(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

void sub_FF1210(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

void sub_FF1224(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

void sub_FF1238(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

void sub_FF124C(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

void sub_FF1260(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

void sub_FF1274(_Unwind_Exception *a1)
{
  sub_405F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FF1288(uint64_t a1, unsigned int *a2)
{
  unint64_t v4 = (int *)(a1 + 20);
  int v5 = sub_4F44(a2);
  int v6 = sub_40A9DC(v4, v5);
  int v7 = sub_40A44C((uint64_t)a2);
  if (v7 >= *(_DWORD *)(a1 + 16)) {
    int v8 = *(_DWORD *)(a1 + 16);
  }
  else {
    int v8 = v7;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9) {
    sub_3F88E0(v9);
  }
  uint64_t v12 = sub_40A454((uint64_t)a2);
  if (v6 >= v8) {
    int v10 = v6;
  }
  else {
    int v10 = v8;
  }
  sub_40A2E4((uint64_t)&v13, v10, &v12);
  return v13;
}

uint64_t sub_FF133C(char **a1)
{
  uint64_t result = sub_EA80FC(a1);
  if ((result & 1) == 0)
  {
    uint64_t v3 = sub_40EFE8((uint64_t)a1);
    uint64_t v4 = sub_52058((uint64_t)a1);
    int v5 = 1;
    if (v3 != v4)
    {
      uint64_t v6 = v4;
      uint64_t v7 = v3 + 472;
      while (v7 != v6)
      {
        if (*(_DWORD *)sub_EADD50(v3 + 472) != -1)
        {
          int v11 = v5;
          sub_EADD6C(v3, &v11);
          int v10 = v5;
          sub_EADD60(v3 + 472, &v10);
          ++v5;
        }
        uint64_t v7 = v3 + 944;
        v3 += 472;
      }
    }
    uint64_t v8 = *(void *)(nullsub_1(a1) + 8) - 472;
    int v9 = v5;
    return sub_EADD6C(v8, &v9);
  }
  return result;
}

uint64_t sub_FF1414(uint64_t a1, long long *a2)
{
  long long v20 = *(_OWORD *)a1;
  uint64_t v21 = *(void *)(a1 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  long long v22 = *(_OWORD *)(a1 + 24);
  uint64_t v23 = *(void *)(a1 + 40);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  long long v3 = *(_OWORD *)(a1 + 64);
  long long v24 = *(_OWORD *)(a1 + 48);
  long long v25 = v3;
  long long v4 = *(_OWORD *)(a1 + 94);
  long long v5 = *(_OWORD *)(a1 + 112);
  v26[0] = *(_OWORD *)(a1 + 80);
  *(_OWORD *)((char *)v26 + 14) = v4;
  v26[2] = v5;
  uint64_t v6 = *(void *)(a1 + 128);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  long long v28 = *(_OWORD *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 152);
  uint64_t v27 = v6;
  uint64_t v29 = v7;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  long long v30 = *(_OWORD *)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 176);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  long long v9 = *(_OWORD *)(a1 + 184);
  long long v10 = *(_OWORD *)(a1 + 200);
  uint64_t v11 = *(void *)(a1 + 216);
  uint64_t v31 = v8;
  uint64_t v34 = v11;
  long long v33 = v10;
  long long v32 = v9;
  long long v35 = *(_OWORD *)(a1 + 224);
  uint64_t v12 = *(void *)(a1 + 240);
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  long long v37 = *(_OWORD *)(a1 + 248);
  uint64_t v13 = *(void *)(a1 + 264);
  uint64_t v36 = v12;
  uint64_t v38 = v13;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  long long v39 = *(_OWORD *)(a1 + 272);
  unsigned int v41 = *(_DWORD *)(a1 + 296);
  if (v41 <= 1) {
    uint64_t v40 = *(void *)(a1 + 288);
  }
  *(void *)&v51[15] = *(void *)(a1 + 463);
  long long v14 = *(_OWORD *)(a1 + 448);
  long long v50 = *(_OWORD *)(a1 + 432);
  *(_OWORD *)long long v51 = v14;
  long long v15 = *(_OWORD *)(a1 + 384);
  long long v46 = *(_OWORD *)(a1 + 368);
  long long v47 = v15;
  long long v16 = *(_OWORD *)(a1 + 416);
  long long v48 = *(_OWORD *)(a1 + 400);
  long long v49 = v16;
  long long v17 = *(_OWORD *)(a1 + 320);
  long long v42 = *(_OWORD *)(a1 + 304);
  long long v43 = v17;
  long long v18 = *(_OWORD *)(a1 + 352);
  long long v44 = *(_OWORD *)(a1 + 336);
  long long v45 = v18;
  sub_448838(a1, a2);
  sub_448838((uint64_t)a2, &v20);
  return sub_405F44((uint64_t)&v20);
}

void sub_FF15AC()
{
  unk_25FD30F = 16641;
  word_25FD2F8 = 65;
  byte_25FD327 = 1;
  byte_25FD311 = 0;
}

uint64_t sub_FF15D4(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)a1 = xmmword_20F1850;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)a1 = sub_4F44((unsigned int *)(a3 + 384));
  std::string __p = operator new(0x20uLL);
  long long v16 = xmmword_20B9800;
  strcpy((char *)__p, "max_num_selected_target_labels");
  *(_DWORD *)(a1 + 4) = sub_31AC04(a2, (uint64_t)&__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  std::string __p = operator new(0x28uLL);
  long long v16 = xmmword_20B9240;
  strcpy((char *)__p, "min_num_distinct_first_charging_stops");
  *(_DWORD *)(a1 + 8) = sub_31AC04(a2, (uint64_t)&__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p);
  }
  uint64_t v6 = nullsub_1(a3);
  uint64_t v7 = sub_40A454(v6);
  std::string __p = operator new(0x28uLL);
  long long v16 = xmmword_20B9960;
  strcpy((char *)__p, "arrival_soc_dominance_threshold_percent");
  unsigned int v8 = sub_31AC04(a2, (uint64_t)&__p);
  unsigned int v9 = v8;
  if (SHIBYTE(v16) < 0)
  {
    operator delete(__p);
    sub_3FB2AC(v9, *(void *)(a3 + 288), (uint64_t)&__p);
    if (v9) {
      goto LABEL_7;
    }
  }
  else
  {
    sub_3FB2AC(v8, *(void *)(a3 + 288), (uint64_t)&__p);
    if (v9)
    {
LABEL_7:
      int v10 = sub_4F44((unsigned int *)&__p);
      int v11 = (HIDWORD(v7) - v10) & ~((HIDWORD(v7) - v10) >> 31);
      goto LABEL_10;
    }
  }
  int v11 = 0x7FFFFFFF;
LABEL_10:
  *(_DWORD *)(a1 + 12) = v11;
  uint64_t v13 = operator new(0x30uLL);
  long long v14 = xmmword_20E1380;
  strcpy((char *)v13, "arrival_soc_dominance_min_num_charging_stops");
  *(_DWORD *)(a1 + 16) = sub_31AC04(a2, (uint64_t)&v13);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13);
  }
  uint64_t v13 = operator new(0x20uLL);
  long long v14 = xmmword_20B9800;
  strcpy((char *)v13, "low_arrival_soc_penalty_factor");
  *(double *)(a1 + 24) = sub_5C7E8(a2, (uint64_t)&v13);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13);
  }
  uint64_t v13 = operator new(0x28uLL);
  long long v14 = xmmword_20B8FD0;
  strcpy((char *)v13, "exclude_paths_without_charging_stops");
  *(unsigned char *)(a1 + 32) = sub_29D62C(a2, (uint64_t)&v13);
  if (SHIBYTE(v14) < 0) {
    operator delete(v13);
  }
  return a1;
}